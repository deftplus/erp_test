////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//

// Выставляет значения отборов значениями по умолчанию, если отборы не заданы явно.
&НаСервере
Процедура ВыставитьОтборПоУмолчанию()
	// Начало периода отбора.
	Если Не ЗначениеЗаполнено(ПериодПланированияОтборНачало) Тогда
		ПериодПланированияОтборНачало = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(ТекущаяДатаСеанса(), Перечисления.Периодичность.Год);
	Иначе
		// Данное поле уже заполнено.
	КонецЕсли;
	// Окончание периода отбора.
	Если Не ЗначениеЗаполнено(ПериодПланированияОтборОкончание) Тогда
		ПериодПланированияОтборОкончание = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(ТекущаяДатаСеанса(), Перечисления.Периодичность.Год);
	Иначе
		// Данное поле уже заполнено.
	КонецЕсли;
	// Сценарий.
	Если Не ЗначениеЗаполнено(ОтборПоСценарию) Тогда
		ОтборПоСценарию = Справочники.Сценарии.Факт;
	Иначе
		// Данное поле уже заполнено.
	КонецЕсли;
	// Валюта.
	Если Не ЗначениеЗаполнено(ОтборПоВалюте) Тогда
		ОтборПоВалюте = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		// Данное поле уже заполнено.
	КонецЕсли;
КонецПроцедуры

// Восстанавливает значения отборов текущей аналитической панели по текущему пользователю
// из регистра НастройкиАналитическихПанелейПользователей.
&НаСервере
Процедура СчитатьОтборыИзРегистраНастроек()
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураОтборов = РегистрыСведений.НастройкиАналитическихПанелейПользователей.СчитатьНастройкиОтборов(ТекПользователь, Объект.Ссылка);
		ПериодПланированияОтборОкончание	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборов, "ПериодОтчета",			 Справочники.Периоды.ПустаяСсылка());
		ПериодПланированияОтборНачало		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборов, "ПериодОтчетаНачало",	 Справочники.Периоды.ПустаяСсылка());
		ОтборПоОрганизации					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборов, "Организация",			 Справочники.Организации.ПустаяСсылка());
		ОтборПоСценарию						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборов, "Сценарий",				 Справочники.Сценарии.ПустаяСсылка());
		ОтборПоВалюте						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборов, "Валюта",				 Справочники.Валюты.ПустаяСсылка());
		ОтборПоПроекту						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборов, "Проект",				 Справочники.Проекты.ПустаяСсылка());
	Иначе
		// Новая панель. Не загружаем настройки.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки_Сервер()	
	СчитатьОтборыИзРегистраНастроек();
	ВыставитьОтборПоУмолчанию();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВосстанавливатьВерсию = Истина;
	// Если это существующая диаграмма
	Если НЕ Параметры.Ключ.Пустая() Тогда
		
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		
		СКД = ТекОбъект.СхемаКомпоновкиДанныхХранилище.Получить();
		
		Если ТипЗнч(СКД) <> Тип("СхемаКомпоновкиДанных") Тогда
			СКД = Новый СхемаКомпоновкиДанных;
		КонецЕсли;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор)));
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		Если Параметры.ВнешниеОтборы.Настройки.Отбор.Элементы.Количество() <> 0 Тогда
			
			ВосстанавливатьВерсию = Ложь;
			
			Для Каждого Элемент Из Параметры.ВнешниеОтборы.Настройки.Отбор.Элементы Цикл
			
				ТиповыеОтчеты_УправляемыйРежимУХ.УстановитьОтбор(КомпоновщикНастроек.Настройки.Отбор, Элемент.ЛевоеЗначение, Элемент.ВидСравнения, Элемент.ПравоеЗначение);
				ИспользоватьОтборПоВалюте      = Ложь;
				ИспользоватьОтборПоОрганизации = Ложь;
				ИспользоватьОтборПоПериоду     = Ложь;
				ИспользоватьОтборПоСценарию    = Ложь;
			
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураПредопределенныхЭлементов = Новый Структура("ТипЗнчТабличныйДокумент", Тип("ТабличныйДокумент"));
		ПустаяСсылкаНаУниверсальныйОтчет   = Справочники.ПроизвольныеОтчеты.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ТекущийПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		АдресСпискаВариантовНастроек = ТиповыеОтчетыУХ.ПолучитьСписокДоступныхВариантовДляПанелиОтчетов(Объект.Ссылка, ТекущийПользователь);
		СписокВыбора = ПолучитьИзВременногоХранилища(АдресСпискаВариантовНастроек);
	КонецЕсли;
	
	Для ИндОбъекта = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		нСтрока = КэшИспользованныхОбъектов.Добавить();
		нСтрока.Использован = Ложь;
		нСтрока.ИмяОбъекта = "СТ_Объект"+ИндОбъекта;	
	КонецЦикла;
	
	тКэшНастроекБыстрыхОтборовАдрес = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("тКэшНастроекБыстрыхОтборов"),Новый УникальныйИдентификатор());
	
	Если Объект.РежимМоделирования Тогда
		 Элементы.Группа_Сценарий.Видимость = Ложь;
	КонецЕсли;	
	
	ЗаполнитьРежимыРаботы();
	
	Элементы.ГруппаСценарии.Видимость = Объект.РежимМоделирования;
	Элементы.ГруппаКомандыРежимаМоделирования.Видимость = Объект.РежимМоделирования;
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
	УправлениеДоступностью();

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаНастройки_Управляемая");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выводится аналитическая панель'"));
	ЗагрузитьНастройки_Сервер();
	
	СинхронизироватьНастройкиКомпоновки();
	ВывестиОтчеты();
	
	ОбновитьЗависимыеОбластиПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранаСохраненнаяНастройка" И Параметр.УИДФормы = УникальныйИдентификатор Тогда
		СохраненнаяНастройка = Параметр.СохраненнаяНастройка;
		СохранитьНастройки();
	КонецЕсли;
	
	Если ИмяСобытия = "СТ_ИзмененОтбор"  Тогда
		Элементы[ТекущийМакет+"_Заголовок"].Заголовок = Параметр.ПредставлениеОтборов;
		ОтобразитьТаблицуСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "СТ_ИзмененыНастройкиПредставления"  Тогда
		ОтобразитьТаблицуСервер(Параметр);
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаОткрытыхОтчетов = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	НайденныеСтроки = ТаблицаОткрытыхОтчетов.НайтиСтроки(Новый Структура("ВидПроизвольногоОтчета", 1));
	
	Для Каждого Элемент Из НайденныеСтроки Цикл
		
		ТекСтрока = ТекущийОБъект.Состав.Найти(Элемент.УниверсальныйОтчет, "УниверсальныйОтчет");
		Если ТекСтрока <> Неопределено Тогда
			
			СтруктураПараметров = Новый Структура;
			
			ИмяРеквизита = Элемент.ИмяОкна + "_ПлановыйСценарий";
			СтруктураПараметров.Вставить(ИмяРеквизита, ЭтаФорма[ИмяРеквизита]);
			
			ИмяРеквизита = Элемент.ИмяОкна + "_Смещение";
			СтруктураПараметров.Вставить(ИмяРеквизита, ЭтаФорма[ИмяРеквизита]);
			
			ТекСтрока.ПараметрыОтчета = Новый ХранилищеЗначения(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СКД = ТекущийОбъект.СхемаКомпоновкиДанныхХранилище.Получить();
	
	ТиповыеОтчетыУХ.ЗагрузитьВСхемуНастройкиКомпоновщика(СКД, КомпоновщикНастроек.ПолучитьНастройки());
	ТекущийОбъект.СхемаКомпоновкиДанныхХранилище = Новый ХранилищеЗначения(СКД);
	
	Если СохраненнаяНастройка.Пустая() Тогда
		НастройкиПоУмолчанию = Новый Структура("НастройкиПанели, НастройкиПараметров, НастройкиОтборов"
												, ПреобразоватьНастройкиПанелиВТаблицуНастроек()
												, ТиповыеОтчеты_УправляемыйРежимУХ.ПреобразоватьПараметрыДанныхВТаблицуПараметров(КомпоновщикНастроек.Настройки.ПараметрыДанных)
												, ТиповыеОтчеты_УправляемыйРежимУХ.ПреобразоватьНастройкиОтбораВТаблицуОтборов(КомпоновщикНастроек.Настройки.Отбор));
		ТекущийОбъект.НастройкиПоУмолчанию = Новый ХранилищеЗначения(НастройкиПоУмолчанию);
	Иначе
		ВнСохраненнаяНастройка = СохраненнаяНастройка.ПолучитьОбъект();
		ВнСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(ТиповыеОтчеты_УправляемыйРежимУХ.ПреобразоватьНастройкиОтбораВТаблицуОтборов(КомпоновщикНастроек.Настройки.Отбор));
		Попытка
			ВнСохраненнаяНастройка.Записать();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось сохранить настройки для панели'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ.
//

&НаКлиенте
Процедура Сформировать(Команда)
	
	СписокОбновленныхСтраниц.ЗаполнитьПометки(Ложь);
	ВывестиОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнСохранитьНастройки(Команда)
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Записать();
	Иначе
		ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройку_УР(Объект.Ссылка, УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиПанели");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуПоУмолчанию()
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКак(Команда)
	
	ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройкуКак_УР(Объект.Ссылка, УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиПанели");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительныеОтборы(Команда)
	
	Элементы.ПоказатьДополнительныеОтборы.Пометка = НЕ Элементы.ПоказатьДополнительныеОтборы.Пометка;
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиПоказателей(Команда)
	СохранитьНастройкиПоказателей();
	СчитатьНастройкиПоказателей();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ.
//

// Управляет доступностью элементов на форме.
&НаСервере
Процедура УправлениеДоступностью()
	Элементы.Отборы.Видимость = Элементы.ПоказатьДополнительныеОтборы.Пометка;
	Элементы.ГлавнаяПанель.ТекущаяСтраница = ?(Элементы.Отборы.Видимость, Элементы.Отборы, Элементы.СтраницаОтчета);
КонецПроцедуры		// УправлениеДоступностью()

// Выводит в таблицу показателей настройки показателей из показателей в панелях.
&НаСервере
Процедура СчитатьНастройкиПоказателей()
	ТаблицаНастроекПоказателей.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПанелиОтчетовСостав.УниверсальныйОтчет.Ссылка КАК УниверсальныйОтчетСсылка,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных КАК ИсточникДанных,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ТочностьОтображения КАК ТочностьОтображения,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ОтображатьОтклоненияВместоАбсолютныхЗначений КАК ОтображатьОтклоненияВместоАбсолютныхЗначений,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения КАК ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.СпособРасчетаИтоговогоЗначения КАК СпособРасчетаИтоговогоЗначения,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ПредставлениеНуля КАК ПредставлениеНуля,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ВерхняяГраницаЗначения КАК ВерхняяГраницаЗначения,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.НижняяГраницаЗначения КАК НижняяГраницаЗначения,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ПорогЗначимостиТренда КАК ПорогЗначимостиТренда,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ДопустимоеОтклонениеОтПлана КАК ДопустимоеОтклонениеОтПлана,
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных.ПредельноеОтклонениеОтПлана КАК ПредельноеОтклонениеОтПлана
		|ИЗ
		|	Справочник.ПанелиОтчетов.Состав КАК ПанелиОтчетовСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
		|		ПО ПанелиОтчетовСостав.УниверсальныйОтчет = ПроизвольныеОтчетыИсточникиДанных.Ссылка
		|ГДЕ
		|	ПанелиОтчетовСостав.Ссылка = &Ссылка
		|	И ПанелиОтчетовСостав.Использование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТаблицаНастроекПоказателей.Добавить();
		НоваяСтрока.Показатель												 = ВыборкаДетальныеЗаписи.ИсточникДанных;
		НоваяСтрока.ТочностьОтображения										 = ВыборкаДетальныеЗаписи.ТочностьОтображения;
		НоваяСтрока.ОтображатьОтклоненияВместоАбсолютныхЗначений			 = ВыборкаДетальныеЗаписи.ОтображатьОтклоненияВместоАбсолютныхЗначений;
		НоваяСтрока.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения	 = ВыборкаДетальныеЗаписи.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения;
		НоваяСтрока.СпособРасчетаИтоговогоЗначения							 = ВыборкаДетальныеЗаписи.СпособРасчетаИтоговогоЗначения;
		НоваяСтрока.ПредставлениеНуля										 = ВыборкаДетальныеЗаписи.ПредставлениеНуля;
		НоваяСтрока.ВерхняяГраницаЗначения									 = ВыборкаДетальныеЗаписи.ВерхняяГраницаЗначения;
		НоваяСтрока.НижняяГраницаЗначения									 = ВыборкаДетальныеЗаписи.НижняяГраницаЗначения;
		НоваяСтрока.ПорогЗначимостиТренда									 = ВыборкаДетальныеЗаписи.ПорогЗначимостиТренда;
		НоваяСтрока.ДопустимоеОтклонениеОтПлана								 = ВыборкаДетальныеЗаписи.ДопустимоеОтклонениеОтПлана;
		НоваяСтрока.ПредельноеОтклонениеОтПлана								 = ВыборкаДетальныеЗаписи.ПредельноеОтклонениеОтПлана;
		НоваяСтрока.Изменена												 = Ложь;
	КонецЦикла;
КонецПроцедуры		// СчитатьНастройкиПоказателей()

// Записывает настройки показателей на форме в базу данных.
&НаСервере
Процедура СохранитьНастройкиПоказателей()
	Для Каждого ТекТаблицаНастроекПоказателей Из ТаблицаНастроекПоказателей Цикл
		Если ТекТаблицаНастроекПоказателей.Изменена Тогда
			ПоказательСсылка = ТекТаблицаНастроекПоказателей.Показатель;
			Попытка
				ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
				ПоказательОбъект.ТочностьОтображения										 = ТекТаблицаНастроекПоказателей.ТочностьОтображения;
				ПоказательОбъект.ОтображатьОтклоненияВместоАбсолютныхЗначений				 = ТекТаблицаНастроекПоказателей.ОтображатьОтклоненияВместоАбсолютныхЗначений;
				ПоказательОбъект.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения	 = ТекТаблицаНастроекПоказателей.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения;
				ПоказательОбъект.СпособРасчетаИтоговогоЗначения								 = ТекТаблицаНастроекПоказателей.СпособРасчетаИтоговогоЗначения;
				ПоказательОбъект.ПредставлениеНуля											 = ТекТаблицаНастроекПоказателей.ПредставлениеНуля;
				ПоказательОбъект.ВерхняяГраницаЗначения										 = ТекТаблицаНастроекПоказателей.ВерхняяГраницаЗначения;
				ПоказательОбъект.НижняяГраницаЗначения										 = ТекТаблицаНастроекПоказателей.НижняяГраницаЗначения;
				ПоказательОбъект.ПорогЗначимостиТренда										 = ТекТаблицаНастроекПоказателей.ПорогЗначимостиТренда;
				ПоказательОбъект.ДопустимоеОтклонениеОтПлана								 = ТекТаблицаНастроекПоказателей.ДопустимоеОтклонениеОтПлана;
				ПоказательОбъект.ПредельноеОтклонениеОтПлана								 = ТекТаблицаНастроекПоказателей.ПредельноеОтклонениеОтПлана;
				ПоказательОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Произошла ошибка при записи показателя монитора %Показатель%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ПоказательСсылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		Иначе
			// Значение не было изменено. Не перезаписываем показатель.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры		// СохранитьНастройкиПоказателей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫВОДА ОТЧЕТОВ НА ПАНЕЛЬ.
//

// Создаёт новый реквизит формы с префиксом ПрефиксВход, идентифкатором ИдентификаторВход,
// заголовком ЗаголовокРеквизита и с типом ОписаниеТиповВход, добавляет его в массив МассивДобавленияВход.
// Возвращает наименование реквизита.
&НаСервере
Функция ДобавитьРеквизитФормы(ПрефиксВход, ИдентификаторВход, ЗаголовокРеквизитаВход, ОписаниеТиповВход, МассивДобавленияВход)
	НаименованиеНовогоРеквизита = ПрефиксВход + Строка(ИдентификаторВход);
	НовыйРеквизитФормы = Новый РеквизитФормы(НаименованиеНовогоРеквизита, ОписаниеТиповВход, "", ЗаголовокРеквизитаВход);
	МассивДобавленияВход.Добавить(НовыйРеквизитФормы);
	Возврат НаименованиеНовогоРеквизита;
КонецФункции

// Размещает на форме в группе ГруппаРодительВход элемент с префиксом ПрефиксВход,
// идентификатором ИдентификаторПоказателяВход, заголовком ЗаголовокВход и типом
// элемента формы ТипЭлементаВход. По умолчанию заголовок скрыт. Подключает его к 
// реквизиту НаименованиеРеквизитаВход. Возвращает новый элемент формы.
&НаСервере
Функция ДобавитьЭлементФормы(ПрефиксВход, ГруппаРодительВход, НаименованиеРеквизитаВход, ИдентификаторПоказателяВход, ТипЭлементаВход = Неопределено, ЗаголовокВход = "", ЗаголовокСкрыт = Истина)
	Если ТипЭлементаВход = Неопределено Тогда
		ТипЭлементаРабочий = Тип("ПолеФормы");
	Иначе	
		ТипЭлементаРабочий = ТипЭлементаВход;
	КонецЕсли;
	НаименованиеЭлемента = ПрефиксВход + Строка(ИдентификаторПоказателяВход);
	НовыйЭлемент = Элементы.Вставить(НаименованиеЭлемента, ТипЭлементаРабочий, ГруппаРодительВход);
	НовыйЭлемент.ПутьКДанным = НаименованиеРеквизитаВход;
	НовыйЭлемент.Заголовок = ЗаголовокВход;
	Если ЗаголовокСкрыт Тогда
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		// Новое положение заголовка будет установлено далее.
	КонецЕсли;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	Возврат НовыйЭлемент;
КонецФункции

// Добавляет на форму в группу ГруппаРодительВход элемент декорацию-картинку ПрефиксВход с
// префиксом и идентификатором ИдентификаторВход.
&НаСервере
Функция ДобавитьДекорациюКартинка(ПрефиксВход, ГруппаРодительВход, ИдентификаторВход, КартинкаВход)
	НаименованиеЭлемента = ПрефиксВход + Строка(ИдентификаторВход);
	НовыйЭлемент = Элементы.Вставить(НаименованиеЭлемента, Тип("ДекорацияФормы"), ГруппаРодительВход);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = КартинкаВход;
	Возврат НовыйЭлемент;
КонецФункции

// Добавляет группу элементов формы в родительскую группу ГруппаРодительВход с префиксом ПрефиксВход, 
// идентификатором ИдентификаторВход. ГруппировкаВход задаёт способ размещения (группировку) элементов.
&НаСервере
Функция ДобавитьГруппуЭлементов(ПрефиксВход, ГруппаРодительВход, ИдентификаторВход, ГруппировкаВход, ЗаголовокВход = "", ОтображатьЗаголовокВход = Ложь)
	НаименованиеНовогоРеквизита = ПрефиксВход + Строка(ИдентификаторВход);
	НовыйЭлемент									 = Элементы.Вставить(НаименованиеНовогоРеквизита, Тип("ГруппаФормы"), ГруппаРодительВход);
	НовыйЭлемент.Вид								 = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.ОтображатьЗаголовок				 = ОтображатьЗаголовокВход;
	НовыйЭлемент.Заголовок							 = ЗаголовокВход;
	НовыйЭлемент.ГоризонтальноеПоложениеПодчиненных	 = ГоризонтальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.Объединенная						 = Истина;
	НовыйЭлемент.Отображение						 = ОтображениеОбычнойГруппы.Нет;
	НовыйЭлемент.Группировка						 = ГруппировкаВход;
	НовыйЭлемент.РастягиватьПоГоризонтали			 = Истина;
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет декорацию формы в родительскую группу ГруппаРодительВход  с префиксом ПрефиксВход, 
// идентификатором ИдентификаторВход, с видом надпись и заголовком ЗаголовокВход.
&НаСервере
Функция ДобавитьДекорациюНадпись(ПрефиксВход, ГруппаРодительВход, ИдентификаторВход, ЗаголовокВход, ПодсказкаВход = "");
	НаименованиеЭлемента = ПрефиксВход + Строка(ИдентификаторВход);
	НовыйЭлемент = Элементы.Вставить(НаименованиеЭлемента, Тип("ДекорацияФормы"), ГруппаРодительВход);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = ЗаголовокВход;
	НовыйЭлемент.Подсказка = ПодсказкаВход;
	Возврат НовыйЭлемент;
КонецФункции

// Добавляет на форму команду с префиксом ПрефиксВход и идентификатором ИдентификаторВход.
&НаСервере
Функция ДобавитьКомандуФормы(ПрефиксВход, ИдентификаторВход)
	НаименованиеКоманды = ПрефиксВход + Строка(ИдентификаторВход);
	НоваяКоманда = ЭтаФорма.Команды.Добавить(НаименованиеКоманды);
	Возврат НаименованиеКоманды;
КонецФункции

// Размещает команду с префиксом ПрефиксВход, Идентификатором ИдентификаторВход в группе
// ГруппаРодительВход формы.
&НаСервере
Функция ДобавитьЭлементКоманды(ПрефиксВход, ГруппаРодительВход, ИдентификаторВход)
	ИмяКоманды = ПрефиксВход + ИдентификаторВход;
	НовыйЭлемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаРодительВход);
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Возврат НовыйЭлемент; 
КонецФункции

// По числовому представлению тренда ЗначениеТрендаВход возвращает
// картинку - его представление.
&НаСервере
Функция ВернутьКартинкуПоЗначениюТренда(ЗначениеТрендаВход)
	РезультатаФункции = Новый Картинка;
	Если ТипЗнч(ЗначениеТрендаВход) = Тип("Картинка") Тогда
		РезультатаФункции = ЗначениеТрендаВход;
	ИначеЕсли ТипЗнч(ЗначениеТрендаВход) = Тип("Число") Тогда	
		Если ЗначениеТрендаВход = 0 Тогда
			РезультатаФункции = БиблиотекаКартинок.СостояниеХорошее;				// Состояние хорошее
		ИначеЕсли ЗначениеТрендаВход = 1 Тогда
			РезультатаФункции = БиблиотекаКартинок.СостояниеУдовлетворительное;   	// Состояние удовлетворительное
		ИначеЕсли ЗначениеТрендаВход = 2 Тогда
			РезультатаФункции = БиблиотекаКартинок.СостояниеТревожное; 				// Состояние тревожное
		ИначеЕсли ЗначениеТрендаВход = 3 Тогда
			РезультатаФункции = БиблиотекаКартинок.СтрелкаВверх;       				// Тренд положительный
		ИначеЕсли ЗначениеТрендаВход = 4 Тогда
			РезультатаФункции = БиблиотекаКартинок.СтрелкаВправо;   				// Тренд нулевой
		ИначеЕсли ЗначениеТрендаВход = 5 Тогда
			РезультатаФункции = БиблиотекаКартинок.СтрелкаВниз;     				// Тренд отрицательный
		Иначе
			РезультатаФункции = Новый Картинка;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант тренда: %Тренд%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Тренд%", Строка(ЗначениеТрендаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатаФункции = Новый Картинка;
	КонецЕсли;
	Возврат РезультатаФункции;
КонецФункции

// Выводит в реквизит формы с имененем НаименованиеРеквизитаВход картинку показателя ПоказательВход.
&НаСервере
Процедура ОтобразитьКартинкуПоказателя(НаименованиеРеквизитаВход, ПоказательВход)
	ЛоготипПоУмолчанию = БиблиотекаКартинок.ЗначокМониторБухгалтера32;
	АдресКартинки = ПоместитьВоВременноеХранилище(ЛоготипПоУмолчанию, ЭтаФорма.УникальныйИдентификатор);
	Если ЗначениеЗаполнено(ПоказательВход) Тогда
		ХранилищеЛоготипа = ПоказательВход.Логотип;
		НоваяКартинкаПоказателя = ХранилищеЛоготипа.Получить();
		Если ТипЗнч(НоваяКартинкаПоказателя) = Тип("Картинка") Тогда
			АдресКартинки = ПоместитьВоВременноеХранилище(НоваяКартинкаПоказателя, ЭтаФорма.УникальныйИдентификатор);
		Иначе	
			АдресКартинки = ПоместитьВоВременноеХранилище(ЛоготипПоУмолчанию, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		АдресКартинки = ПоместитьВоВременноеХранилище(ЛоготипПоУмолчанию, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	ЭтаФорма[НаименованиеРеквизитаВход] = АдресКартинки;
КонецПроцедуры

// Для показателя ПоказательВход получает цвет оформления тренда со значением ОтносительноеИзменениеВход.
&НаСервере
Функция ПолучитьЦветВыделенияТренда(ПоказательВход, ОтносительноеИзменениеВход)
	// Перевернём тренд, если его нужно трактовать отрицательно.
	РезультатФункции = WebЦвета.Черный;
	Если ПоказательВход.ТрактовкаПоложительногоОтклонения Тогда
		ТрендРабочий = ОтносительноеИзменениеВход;
	Иначе
		ТрендРабочий = -ОтносительноеИзменениеВход;
	КонецЕсли;
	Если ТрендРабочий < -ПоказательВход.ПредельноеОтклонениеОтПлана Тогда
		РезультатФункции = WebЦвета.Красный;
	ИначеЕсли (ТрендРабочий >= -ПоказательВход.ПредельноеОтклонениеОтПлана) И (ТрендРабочий < -ПоказательВход.ПорогЗначимостиТренда) Тогда
		РезультатФункции = WebЦвета.Лосось;
	ИначеЕсли (ТрендРабочий >= -ПоказательВход.ПорогЗначимостиТренда) И (ТрендРабочий < -ПоказательВход.ПорогЗначимостиТренда) Тогда
		РезультатФункции = WebЦвета.Черный;		
	ИначеЕсли (ТрендРабочий >= -ПоказательВход.ПорогЗначимостиТренда) И (ТрендРабочий < ПоказательВход.ПредельноеОтклонениеОтПлана) Тогда
		РезультатФункции = WebЦвета.ЦветМорскойВолны;				
	ИначеЕсли ТрендРабочий > ПоказательВход.ПредельноеОтклонениеОтПлана Тогда
		РезультатФункции = WebЦвета.Зеленый;						
	Иначе	
		РезультатФункции = WebЦвета.Черный;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции

// Возвращает отформатированную строку представления относительного изменения 
// ИзменениеОтносительное показателя.
&НаСервере
Функция СформироватьПредставлениеТренда(ИзменениеОтносительное)
	РезультатФункции = Строка(ИзменениеОтносительное);
	Если ИзменениеОтносительное > 0 Тогда
		РезультатФункции = "▲" + Формат(ИзменениеОтносительное * 100, "ЧДЦ=1") + "%";
	ИначеЕсли ИзменениеОтносительное = 0 Тогда
		РезультатФункции = Формат(ИзменениеОтносительное * 100, "ЧДЦ=1") + "%";
	Иначе
		РезультатФункции = "▼" + Формат(ИзменениеОтносительное * 100, "ЧДЦ=1") + "%";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру данных, необходимых для отображения виджета по показателю 
// ПоказательВход по входным данным СтруктураДанныхВход.
&НаСервере
Функция ПолучитьСтруктуруОтображенияВиджета(ПоказательВход, СтруктураДанныхВход)
	РезультатФункции = Новый Структура;
	// Считаем исходные данные.
	ФактическоеЗначениеТекущегоПериода		 = СтруктураДанныхВход["ФактическоеЗначениеТекущегоПериода"];
	ФактическоеЗначениеПредыдущегоПериода	 = СтруктураДанныхВход["ФактическоеЗначениеПредыдущегоПериода"];
	ИзменениеОтносительное					 = СтруктураДанныхВход["ИзменениеОтносительное"];
	ИзменениеАбсолютное						 = СтруктураДанныхВход["ИзменениеАбсолютное"];
	ЗначениеТренда							 = СтруктураДанныхВход["Тренд"];
	ПлановоеЗначение						 = СтруктураДанныхВход["ПлановоеЗначение"];
	ПроцентОтклоненияПлан					 = СтруктураДанныхВход["ОтклонениеОтПланаОтносительное"];
	ЗначениеОтклоненияПлан					 = СтруктураДанныхВход["ОтклонениеОтПланаАбсолютное"];
	ТочностьПоказателя = ПоказательВход.ТочностьОтображения;
	// Единица измерения и представление нуля.
	ПредставлениеНуля = " ";
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмеренияКлючевыхПоказателей.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПоказательВход) Тогда
		ЕдиницаИзмерения = ПоказательВход.ЕдиницаИзмерения;
		ПредставлениеНуля = ПоказательВход.ПредставлениеНуля;
	Иначе
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмеренияКлючевыхПоказателей.ПустаяСсылка();
		ПредставлениеНуля = " ";
	КонецЕсли;
	РезультатФункции.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	// Представление пред значения, Плановое значение.
	Если ПоказательВход.ОтображатьОтклоненияВместоАбсолютныхЗначений Тогда
		НовоеПредставлениеПредЗначение = ТиповыеОтчетыУХ.ПолучитьСокращенноеПредставлениеЧисла(ИзменениеАбсолютное, , ТочностьПоказателя, Ложь);
		НоваяПодсказкаПредставлениеПредЗначение = НСтр("ru = 'Абсолютное изменение от значения базового периода: '") + Строка(ИзменениеАбсолютное);
		НовоеПредставлениеПлановоеЗначение = ТиповыеОтчетыУХ.ПолучитьСокращенноеПредставлениеЧисла(ЗначениеОтклоненияПлан, , ТочностьПоказателя, Ложь);
		НоваяПодсказкаПредставлениеПлановоеЗначение = НСтр("ru = 'Абсолютное отклонение от плана: '") + Строка(ЗначениеОтклоненияПлан);
	Иначе
		НовоеПредставлениеПредЗначение = ТиповыеОтчетыУХ.ПолучитьСокращенноеПредставлениеЧисла(ФактическоеЗначениеПредыдущегоПериода, , ТочностьПоказателя, Ложь);
		НоваяПодсказкаПредставлениеПредЗначение = НСтр("ru = 'Значение базового периода: '") + Строка(ФактическоеЗначениеПредыдущегоПериода);
		НовоеПредставлениеПлановоеЗначение = ТиповыеОтчетыУХ.ПолучитьСокращенноеПредставлениеЧисла(ПлановоеЗначение, , ТочностьПоказателя, Ложь);
		НоваяПодсказкаПредставлениеПлановоеЗначение = НСтр("ru = 'Плановое значение: '") + Строка(ПлановоеЗначение);
	КонецЕсли;
	РезультатФункции.Вставить("ПредставлениеПредЗначение", НовоеПредставлениеПредЗначение);
	РезультатФункции.Вставить("ПодсказкаПредставлениеПредЗначение", НоваяПодсказкаПредставлениеПредЗначение);
	РезультатФункции.Вставить("ПредставлениеПлановоеЗначение", НовоеПредставлениеПлановоеЗначение);
	РезультатФункции.Вставить("ПодсказкаПредставлениеПлановоеЗначение", НоваяПодсказкаПредставлениеПлановоеЗначение);
	// Процент отклонения от плана.
	Если ПоказательВход.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения Тогда
		ЗначениеОтклоненияРабочее = 100 + ПроцентОтклоненияПлан;
		Если ПоказательВход.ТрактовкаПоложительногоОтклонения Тогда
			ЗначениеОтклоненияРабочее = 100 + ПроцентОтклоненияПлан;
		Иначе
			ЗначениеОтклоненияРабочее = 100 - ПроцентОтклоненияПлан;			// За нулевую точку выполнения плана в случае негативного тренда берём удвоенное значение плана.
		КонецЕсли;
		НовоеПредставлениеПроцентОтклоненияПлан = Строка(ЗначениеОтклоненияРабочее) + "%";

		НоваяПодсказкаПредставлениеПроцентОтклоненияПлан = НСтр("ru = 'Процент выполнения плана: '") + Строка(ЗначениеОтклоненияРабочее) + "%";
	Иначе
		НовоеПредставлениеПроцентОтклоненияПлан = СформироватьПредставлениеТренда(ПроцентОтклоненияПлан);   

		НоваяПодсказкаПредставлениеПроцентОтклоненияПлан = НСтр("ru = 'Относительное отклонение от плана: '") + Строка(ПроцентОтклоненияПлан) + "%";
	КонецЕсли;
	НовыйЦветПлановогоОтклонения = БизнесАнализСерверУХ.ПолучитьЦветВыделенияТренда(ПоказательВход, ПроцентОтклоненияПлан, ФактическоеЗначениеТекущегоПериода, Ложь);
	РезультатФункции.Вставить("ПредставлениеПроцентОтклоненияПлан", НовоеПредставлениеПроцентОтклоненияПлан);
	РезультатФункции.Вставить("ЦветПлановогоОтклонения", НовыйЦветПлановогоОтклонения);
	РезультатФункции.Вставить("ПодсказкаПредставлениеПроцентОтклоненияПлан", НоваяПодсказкаПредставлениеПроцентОтклоненияПлан);
	// Представление значения, Процент увеличения, Цвет тренда. 
	НоваяПодсказкаПредставлениеЗначенияПоказателя = Нстр("ru = 'Текущее значение: '") + Строка(ФактическоеЗначениеТекущегоПериода);
	НовоеПредставлениеЗначенияПоказателя = ТиповыеОтчетыУХ.ПолучитьСокращенноеПредставлениеЧисла(ФактическоеЗначениеТекущегоПериода, ЕдиницаИзмерения, ТочностьПоказателя, , ПредставлениеНуля);
	НовоеПредставлениеПроцентУвеличения = СформироватьПредставлениеТренда(ИзменениеОтносительное);
	НовыйЦветТренда = БизнесАнализСерверУХ.ПолучитьЦветВыделенияТренда(ПоказательВход, ИзменениеОтносительное, ФактическоеЗначениеТекущегоПериода, Истина);
	НоваяПодсказкаПредставлениеПроцентУвеличения = НСтр("ru = 'Относительное изменение от значения базового периода: '") + Строка(ИзменениеОтносительное) + "%";
	РезультатФункции.Вставить("ПредставлениеЗначенияПоказателя", НовоеПредставлениеЗначенияПоказателя);
	РезультатФункции.Вставить("ПредставлениеПроцентУвеличения", НовоеПредставлениеПроцентУвеличения);
	РезультатФункции.Вставить("ПодсказкаПредставлениеЗначенияПоказателя", НоваяПодсказкаПредставлениеЗначенияПоказателя);
	РезультатФункции.Вставить("ПодсказкаПредставлениеПроцентУвеличения", НоваяПодсказкаПредставлениеПроцентУвеличения);
	РезультатФункции.Вставить("ЦветТренда", НовыйЦветТренда);
	Возврат РезультатФункции;
КонецФункции

// Возвращает элемент на форме, наименование которого получается из префикса ПрефиксВход
// и идентификатора ИдентификаторПоказателяВход.
&НаСервере
Функция НайтиЭлементНаФорме(ПрефиксВход, ИдентификаторПоказателяВход)
	НаименованиеЭлемента = ПрефиксВход + Строка(ИдентификаторПоказателяВход);
	РезультатФункции = Элементы[НаименованиеЭлемента];
	Возврат РезультатФункции;
КонецФункции

// Добавляет на форму в существующую группу ГруппаРодительВход виджет с идентификатором 
// ИдентификаторПоказателяВход, отображающий показатель ПоказательВход с данными СтруктураДанныхВход
&НаСервере
Процедура НарисоватьВиджетПоказателя(ПоказательВход, ИдентификаторПоказателяВход, ГруппаРодительВход, СтруктураДанныхВход)
	Попытка
		// Инициализация.
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов);
		ПрефиксЗначениеПоказателя					 = "ЗначениеПоказателя_";
		ПрефиксПредставлениеЗначениеПоказателя		 = "ПредставлениеЗначениеПоказателя_";
		ПрефиксПредставлениеПредЗначение			 = "ПредставлениеПредЗначение_";
		ПрефиксПредставлениеПроцентУвеличения		 = "ПредставлениеПроцентУвеличения_";
		ПрефиксПредставлениеПроцентОтклоненияПлан	 = "ОтклоненияПлан_";
		ПрефиксПроцентУвеличения					 = "ПроцентУвеличения_";
		ПрефиксПредыдущееЗначение					 = "ПредыдущееЗначение_";
		ПрефиксНаправлениеТрендаКартинка			 = "НаправлениеТрендаКартинка_";
		ПрефиксЛоготипПоказателя					 = "ЛоготипПоказателя_";
		ПрефиксГруппаВертикальная					 = "ГруппаВертикальная_";
		ПрефиксГруппаОбщая							 = "ГруппаОбщая_";
		ПрефиксГруппаСтрокаЗначения					 = "ГруппаСтрокаЗначения_";
		ПрефиксГруппаПредставлениеЗначения			 = "ГруппаПредставлениеЗначения_";
		ПрефиксГруппаСтрокаЗаголовок				 = "ГруппаСтрокаЗаголовок_";
		ПрефиксГруппаПредЗначениеОбщая				 = "ГруппаПредЗначениеОбщая_";
		ПрефиксГруппаПредЗначениеЛевая				 = "ГруппаПредЗначениеЛевая_";
		ПрефиксГруппаПредЗначениеПравая				 = "ГруппаПредЗначениеПравая_";
		ПрефиксПредставлениеПлановоеЗначение		 = "ПредставлениеПлановоеЗначение_";
		ПрефиксЗаголовокПоказателя					 = "ЗаголовокПоказателя_";
		ПрефиксРазделитель							 = "Разделитель_";
		ПрефиксКартинкаПредЗначение					 = "КартинкаПредЗначение_";
		ПрефиксКартинкаПлановоеЗначение				 = "КартинкаПлановоеЗначение_";
		ПрефиксГруппаПлановоеЗначениеОбщая			 = "ГруппаПлановоеЗначениеОбщая_";
		ПрефиксГруппаПлановоеЗначениеЛевая			 = "ГруппаПлановоеЗначениеЛевая_";
		ПрефиксГруппаПлановоеЗначениеПравая			 = "ГруппаПлановоеЗначениеПравая_";
		ПрефиксКомандаПредставлениеЗначение			 = "КомандаПредставлениеЗначение_";
		ПрефиксКомандаПредставлениеПредЗначение		 = "КомандаПредставлениеПредЗначение_";
		ПрефиксКомандаПредставлениеПлановоеЗначение	 = "КомандаПредставлениеПлановоеЗначение_";
		ПрефиксПредставлениеКоридорЗначений			 = "КоридорЗначенийПредставление_";
		ПрефиксГруппаПредставлениеЗначенияКоридор	 = "ГруппаПредставлениеЗначенияКоридор_";
		// Добавим реквизиты формы.
		МассивДобавляемых = Новый Массив;
		НаименованиеРеквизитаПредставлениеЗначенияПоказателя = ПрефиксПредставлениеЗначениеПоказателя + Строка(ИдентификаторПоказателяВход);
		УжеЕстьРеквизитЭтогоПоказателя = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, НаименованиеРеквизитаПредставлениеЗначенияПоказателя);
		Если НЕ УжеЕстьРеквизитЭтогоПоказателя Тогда
			НаименованиеРеквизитаПроцентУвеличения						 = ДобавитьРеквизитФормы(ПрефиксПроцентУвеличения, ИдентификаторПоказателяВход, "", ОписаниеТиповЧисло, МассивДобавляемых);	
			НаименованиеРеквизитаЛоготипПоказателя						 = ДобавитьРеквизитФормы(ПрефиксЛоготипПоказателя, ИдентификаторПоказателяВход, "", ОписаниеТиповСтрока, МассивДобавляемых);	
			НаименованиеРеквизитаПредставлениеЗначенияПоказателя		 = ДобавитьРеквизитФормы(ПрефиксПредставлениеЗначениеПоказателя, ИдентификаторПоказателяВход, "", ОписаниеТиповСтрока, МассивДобавляемых);	
			НаименованиеРеквизитаПредставлениеПроцентУвеличения			 = ДобавитьРеквизитФормы(ПрефиксПредставлениеПроцентУвеличения, ИдентификаторПоказателяВход, "", ОписаниеТиповСтрока, МассивДобавляемых);	
			НаименованиеРеквизитаПредставлениеПроцентОтклоненияПлан		 = ДобавитьРеквизитФормы(ПрефиксПредставлениеПроцентОтклоненияПлан, ИдентификаторПоказателяВход, "", ОписаниеТиповСтрока, МассивДобавляемых);	
			НаименованиеКомандыПредставлениеЗначение					 = ДобавитьКомандуФормы(ПрефиксКомандаПредставлениеЗначение, ИдентификаторПоказателяВход);
			НаименованиеКомандыПредставлениеПредЗначение				 = ДобавитьКомандуФормы(ПрефиксКомандаПредставлениеПредЗначение, ИдентификаторПоказателяВход);
			НаименованиеКомандыПредставлениеПлановоеЗначение			 = ДобавитьКомандуФормы(ПрефиксКомандаПредставлениеПлановоеЗначение, ИдентификаторПоказателяВход);
		Иначе
			ИдентификаторПоказателяСтрока = Строка(ИдентификаторПоказателяВход);
			НаименованиеРеквизитаПроцентУвеличения						 = ПрефиксПроцентУвеличения						 + ИдентификаторПоказателяСтрока;
			НаименованиеРеквизитаЛоготипПоказателя						 = ПрефиксЛоготипПоказателя						 + ИдентификаторПоказателяСтрока;
			НаименованиеРеквизитаПредставлениеЗначенияПоказателя		 = ПрефиксПредставлениеЗначениеПоказателя		 + ИдентификаторПоказателяСтрока;
			НаименованиеРеквизитаПредставлениеПроцентУвеличения			 = ПрефиксПредставлениеПроцентУвеличения		 + ИдентификаторПоказателяСтрока;
			НаименованиеРеквизитаПредставлениеПроцентОтклоненияПлан		 = ПрефиксПредставлениеПроцентОтклоненияПлан	 + ИдентификаторПоказателяСтрока;
			НаименованиеКомандыПредставлениеЗначение					 = ПрефиксКомандаПредставлениеЗначение			 + ИдентификаторПоказателяСтрока;
			НаименованиеКомандыПредставлениеПредЗначение				 = ПрефиксКомандаПредставлениеПредЗначение		 + ИдентификаторПоказателяСтрока;
			НаименованиеКомандыПредставлениеПлановоеЗначение			 = ПрефиксКомандаПредставлениеПлановоеЗначение	 + ИдентификаторПоказателяСтрока;
		КонецЕсли;
		ИзменитьРеквизиты(МассивДобавляемых);
		// Добавим элементы формы.
		Если НЕ УжеЕстьРеквизитЭтогоПоказателя Тогда
			// Размещение элементов и групп.
			// -Значения настроек.
			СкрыватьЛоготипПоказателей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "СкрыватьЛоготипПоказателей", Ложь);
			КоличествоКолонокВиджетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "КоличествоКолонокВиджетов", 3);
			ПредставлениеКоридораЗначенийПоказателя = СформироватьПредставлениеКоридораЗначений(ПоказательВход);
			// -Группа заголовка.
			ГруппаОбщая									 = ДобавитьГруппуЭлементов(ПрефиксГруппаОбщая, 							ГруппаРодительВход, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ГруппаСтрокаЗаголовок						 = ДобавитьГруппуЭлементов(ПрефиксГруппаСтрокаЗаголовок, 				ГруппаОбщая, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			ЭлементЗаголовокПоказателя					 = ДобавитьДекорациюНадпись(ПрефиксЗаголовокПоказателя, 				ГруппаСтрокаЗаголовок, ИдентификаторПоказателяВход, Строка(ПоказательВход));
			// -Логотип показателя.
			ГруппаСтрокаЗначения						 = ДобавитьГруппуЭлементов(ПрефиксГруппаСтрокаЗначения, 				ГруппаОбщая, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			ЛоготипПоказателя							 = ДобавитьЭлементФормы(ПрефиксЛоготипПоказателя, 						ГруппаСтрокаЗначения, НаименованиеРеквизитаЛоготипПоказателя, ИдентификаторПоказателяВход); 	
			// -Значение и коридор.
			ГруппаПредставлениеЗначения					 = ДобавитьГруппуЭлементов(ПрефиксГруппаПредставлениеЗначения,			ГруппаСтрокаЗначения, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			ГруппаПредставлениеЗначенияКоридор			 = ДобавитьГруппуЭлементов(ПрефиксГруппаПредставлениеЗначенияКоридор,	ГруппаПредставлениеЗначения, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ЭлементКомандаПредставлениеЗначение			 = ДобавитьЭлементКоманды(ПрефиксКомандаПредставлениеЗначение, 			ГруппаПредставлениеЗначенияКоридор, ИдентификаторПоказателяВход);
			ЭлементПредставлениеКоридораЗначений		 = ДобавитьДекорациюНадпись(ПрефиксПредставлениеКоридорЗначений,		ГруппаПредставлениеЗначенияКоридор, ИдентификаторПоказателяВход, ПредставлениеКоридораЗначенийПоказателя);
			// -Предыдущее значение.
			ГруппаВертикальная							 = ДобавитьГруппуЭлементов(ПрефиксГруппаВертикальная, 					ГруппаСтрокаЗначения, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ГруппаПредЗначениеОбщая						 = ДобавитьГруппуЭлементов(ПрефиксГруппаПредЗначениеОбщая, 				ГруппаВертикальная, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			ГруппаПредЗначениеЛевая						 = ДобавитьГруппуЭлементов(ПрефиксГруппаПредЗначениеЛевая, 				ГруппаПредЗначениеОбщая, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ГруппаПредЗначениеПравая					 = ДобавитьГруппуЭлементов(ПрефиксГруппаПредЗначениеПравая, 			ГруппаПредЗначениеОбщая, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ЭлементКартинкаПредыдущийПериод				 = ДобавитьДекорациюКартинка(ПрефиксКартинкаПредЗначение, 				ГруппаПредЗначениеЛевая, ИдентификаторПоказателяВход, БиблиотекаКартинок.КалендарьМонохромный);
			ЭлементПредставлениеПроцентУвеличения		 = ДобавитьЭлементФормы(ПрефиксПредставлениеПроцентУвеличения, 			ГруппаПредЗначениеПравая, НаименованиеРеквизитаПредставлениеПроцентУвеличения, ИдентификаторПоказателяВход); 	
			ЭлементКомандаПредставлениеПредЗначение		 = ДобавитьЭлементКоманды(ПрефиксКомандаПредставлениеПредЗначение, 		ГруппаПредЗначениеПравая, ИдентификаторПоказателяВход);
			ЭлементРазделитель							 = ДобавитьДекорациюНадпись(ПрефиксРазделитель, 						ГруппаВертикальная, ИдентификаторПоказателяВход, "");
			// -Плановое значение.
			ГруппаПлановоеЗначениеОбщая					 = ДобавитьГруппуЭлементов(ПрефиксГруппаПлановоеЗначениеОбщая, 			ГруппаВертикальная, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			ГруппаПлановоеЗначениеЛевая					 = ДобавитьГруппуЭлементов(ПрефиксГруппаПлановоеЗначениеЛевая, 			ГруппаПлановоеЗначениеОбщая, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ГруппаПлановоеЗначениеПравая				 = ДобавитьГруппуЭлементов(ПрефиксГруппаПлановоеЗначениеПравая, 		ГруппаПлановоеЗначениеОбщая, ИдентификаторПоказателяВход, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
			ЭлементКартинкаПлановоеЗначение				 = ДобавитьДекорациюКартинка(ПрефиксКартинкаПлановоеЗначение, 			ГруппаПлановоеЗначениеЛевая, ИдентификаторПоказателяВход, БиблиотекаКартинок.Цель);
			ЭлементПредставлениеПроцентОтлоненияПлан	 = ДобавитьЭлементФормы(ПрефиксПредставлениеПроцентОтклоненияПлан, 		ГруппаПлановоеЗначениеПравая, НаименованиеРеквизитаПредставлениеПроцентОтклоненияПлан, ИдентификаторПоказателяВход); 	
			ЭлементКомандаПредставлениеПлановоеЗначение	 = ДобавитьЭлементКоманды(ПрефиксКомандаПредставлениеПлановоеЗначение, 	ГруппаПлановоеЗначениеПравая, ИдентификаторПоказателяВход);
			// Настройка элементов.
			Если КоличествоКолонокВиджетов <= 2 Тогда
				РазмерШрифта = 26;
			ИначеЕсли КоличествоКолонокВиджетов > 2 И КоличествоКолонокВиджетов <= 4 Тогда
				РазмерШрифта = 22;
			ИначеЕсли КоличествоКолонокВиджетов > 4 И КоличествоКолонокВиджетов <= 6 Тогда	
				РазмерШрифта = 15;
			Иначе	
				РазмерШрифта = 10;
			КонецЕсли;
			ЭлементПредставлениеКоридораЗначений.Подсказка = СформироватьПодсказкуКоридораПоказателя(ПоказательВход);
			ГруппаПлановоеЗначениеОбщая.ВертикальноеПоложениеПодчиненных		 = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаПлановоеЗначениеЛевая.ВертикальноеПоложениеПодчиненных		 = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементПредставлениеПроцентОтлоненияПлан.ГоризонтальноеПоложение	 = ГоризонтальноеПоложениеЭлемента.Лево;
			ЭлементПредставлениеПроцентУвеличения.ГоризонтальноеПоложение		 = ГоризонтальноеПоложениеЭлемента.Лево;
			ЭлементКомандаПредставлениеПредЗначение.ГоризонтальноеПоложениеВГруппе		 = ГоризонтальноеПоложениеЭлемента.Лево;
			ЭлементКомандаПредставлениеПлановоеЗначение.ГоризонтальноеПоложениеВГруппе	 = ГоризонтальноеПоложениеЭлемента.Лево;
			ГруппаСтрокаЗначения.ВертикальноеПоложениеПодчиненных				 = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаПредЗначениеОбщая.ВертикальноеПоложениеПодчиненных			 = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаПредЗначениеЛевая.ВертикальноеПоложениеПодчиненных			 = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаПредставлениеЗначения.РастягиватьПоГоризонтали = Истина;
			ГруппаПредставлениеЗначенияКоридор.РастягиватьПоГоризонтали = Истина;
			ЛоготипПоказателя.Вид = ВидПоляФормы.ПолеКартинки;
			ЛоготипПоказателя.Ширина = 4;
			ЛоготипПоказателя.Высота = 4;
			ЛоготипПоказателя.РастягиватьПоГоризонтали = Ложь;
			ЛоготипПоказателя.РастягиватьПоВертикали = Ложь;
			ЛоготипПоказателя.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
			ЛоготипПоказателя.Видимость = НЕ СкрыватьЛоготипПоказателей;
			ГруппаПлановоеЗначениеОбщая.Видимость = ЗначениеЗаполнено(ПоказательВход.ИсточникПлановогоЗначения);
			ГруппаПредЗначениеОбщая.Видимость = ЗначениеЗаполнено(ПоказательВход.ИсточникЗначенияПериодаСравнения);
			ГруппаВертикальная.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			ГруппаВертикальная.РастягиватьПоГоризонтали = Ложь;
			ЭлементКомандаПредставлениеЗначение.Шрифт = Новый Шрифт("Verdana", РазмерШрифта, , , Ложь);
			ЭлементКомандаПредставлениеЗначение.ЦветТекста = WebЦвета.КоролевскиГолубой;
			ЭлементКомандаПредставлениеЗначение.РастягиватьПоГоризонтали = Ложь;
			ЭлементКомандаПредставлениеЗначение.ОтображениеФигуры			 = ОтображениеФигурыКнопки.Нет;
			ЭлементКомандаПредставлениеПредЗначение.ОтображениеФигуры		 = ОтображениеФигурыКнопки.Нет;
			ЭлементКомандаПредставлениеПредЗначение.ЦветТекста				 = WebЦвета.Пурпурный;
			ЭлементКомандаПредставлениеПлановоеЗначение.ОтображениеФигуры	 = ОтображениеФигурыКнопки.Нет;
			ЭлементКомандаПредставлениеПлановоеЗначение.ЦветТекста			 = WebЦвета.КожаноКоричневый;
			ЭлементЗаголовокПоказателя.Шрифт = Новый Шрифт(, 10);
			// Установка обработчиков новым элементам.
			ЭтаФорма.Команды[НаименованиеКомандыПредставлениеЗначение].Действие			 = "НажатиеПредставлениеЗначение_Подключаемый";
			ЭтаФорма.Команды[НаименованиеКомандыПредставлениеПредЗначение].Действие		 = "НажатиеПредставлениеПредЗначение_Подключаемый";
			ЭтаФорма.Команды[НаименованиеКомандыПредставлениеПлановоеЗначение].Действие	 = "НажатиеПредставлениеПлановоеЗначение_Подключаемый";
		Иначе
			// Поиск уже существующих элементов.
			ЭлементПредставлениеПроцентУвеличения			 = НайтиЭлементНаФорме(ПрефиксПредставлениеПроцентУвеличения, ИдентификаторПоказателяВход);
			ЭлементПредставлениеПроцентОтлоненияПлан		 = НайтиЭлементНаФорме(ПрефиксПредставлениеПроцентОтклоненияПлан, ИдентификаторПоказателяВход);
			ЭлементКомандаПредставлениеЗначение				 = НайтиЭлементНаФорме(ПрефиксКомандаПредставлениеЗначение, ИдентификаторПоказателяВход);
			ЭлементКомандаПредставлениеПредЗначение			 = НайтиЭлементНаФорме(ПрефиксКомандаПредставлениеПредЗначение, ИдентификаторПоказателяВход);
			ЭлементКомандаПредставлениеПлановоеЗначение		 = НайтиЭлементНаФорме(ПрефиксКомандаПредставлениеПлановоеЗначение, ИдентификаторПоказателяВход);
			ЭлементЗаголовокПоказателя						 = НайтиЭлементНаФорме(ПрефиксЗаголовокПоказателя, ИдентификаторПоказателяВход);
		КонецЕсли;
		// Получим значения для отображения.
		СтруктураОтображенияВиджета = ПолучитьСтруктуруОтображенияВиджета(ПоказательВход, СтруктураДанныхВход);
		// Обновим отображения.
		ЭтаФорма[НаименованиеРеквизитаПредставлениеПроцентУвеличения]		 = СтруктураОтображенияВиджета.ПредставлениеПроцентУвеличения;
		ЭтаФорма[НаименованиеРеквизитаПредставлениеПроцентОтклоненияПлан]	 = СтруктураОтображенияВиджета.ПредставлениеПроцентОтклоненияПлан;
		ЭлементПредставлениеПроцентОтлоненияПлан.Подсказка	 = СтруктураОтображенияВиджета.ПодсказкаПредставлениеПроцентОтклоненияПлан;
		ЭтаФорма.Команды[НаименованиеКомандыПредставлениеЗначение].Подсказка			 = СтруктураОтображенияВиджета.ПодсказкаПредставлениеЗначенияПоказателя;
		ЭтаФорма.Команды[НаименованиеКомандыПредставлениеПредЗначение].Подсказка		 = СтруктураОтображенияВиджета.ПодсказкаПредставлениеПредЗначение;
		ЭтаФорма.Команды[НаименованиеКомандыПредставлениеПлановоеЗначение].Подсказка	 = СтруктураОтображенияВиджета.ПодсказкаПредставлениеПлановоеЗначение;
		ЭлементПредставлениеПроцентУвеличения.Подсказка		 = СтруктураОтображенияВиджета.ПодсказкаПредставлениеПроцентУвеличения;
		ЭлементПредставлениеПроцентУвеличения.ЦветТекста	 = СтруктураОтображенияВиджета.ЦветТренда;
		ЭлементПредставлениеПроцентОтлоненияПлан.ЦветТекста	 = СтруктураОтображенияВиджета.ЦветПлановогоОтклонения;
		ЭлементЗаголовокПоказателя.ЦветТекста = СтруктураОтображенияВиджета.ЦветПлановогоОтклонения;	
		ОтобразитьКартинкуПоказателя(НаименованиеРеквизитаЛоготипПоказателя, ПоказательВход);
		ЭлементКомандаПредставлениеЗначение.Заголовок = СтруктураОтображенияВиджета.ПредставлениеЗначенияПоказателя; 
		ЭлементКомандаПредставлениеПредЗначение.Заголовок = СтруктураОтображенияВиджета.ПредставлениеПредЗначение; 
		ЭлементКомандаПредставлениеПлановоеЗначение.Заголовок = СтруктураОтображенияВиджета.ПредставлениеПлановоеЗначение; 
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при выводе показателя монитора %Показатель% : %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ПоказательВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Возвращает новый уникальный идентификатор, в котором символы - заменены на на _
&НаСервере
Функция СформироватьПодсказкуКоридораПоказателя(ПоказательВход)
	РезультатФункции = "";
	Если ПоказательВход.ИспользоватьКоридорЗначений Тогда
		РезультатФункции = НСтр("ru = 'Допустимый интервал значений'");
	Иначе
		РезультатФункции = НСтр("ru = 'Трактовка положительного отклонения'");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция СформироватьПредставлениеКоридораЗначений(ПоказательВход)
	РезультатФункции = "";
	Если ПоказательВход.ИспользоватьКоридорЗначений Тогда
		РезультатФункции = РезультатФункции + "[";
		РезультатФункции = РезультатФункции + Строка(ПоказательВход.НижняяГраницаЗначения);
		РезультатФункции = РезультатФункции + "; ";
		РезультатФункции = РезультатФункции + Строка(ПоказательВход.ВерхняяГраницаЗначения);
		РезультатФункции = РезультатФункции + "]";
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция СгенерироватьСтроковыйИдентификатор()
	НовыйИдентификатор = Новый УникальныйИдентификатор;
	РезультатФункции = Строка(НовыйИдентификатор);
	РезультатФункции = СтрЗаменить(РезультатФункции, "-", "_");
	Возврат РезультатФункции;
КонецФункции

// Получает таблицу значений, содержащую все показатели для префикса ИмяОкнаВход в 
// дереве ДеревоВход,  записывая её в ТаблицаРезультат. Параметр ГлубинаРекурсииВход 
//защищает  от бесконечной рекурсии.
&НаСервере
Процедура ВыделитьПоказателиВДереве(ДеревоВход, ТаблицаРезультат, ИмяОкнаВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;			// Превышена глубина рекурсии.
	КонецЕсли;
	ТипПоказатели = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей");
	Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
		Если ТипЗнч(ТекСтроки[ИмяОкнаВход + "_Показатель"]) = ТипПоказатели Тогда	
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтроки);
		Иначе
			// Не показатель. Не добавляем строку.
		КонецЕсли;
		ВыделитьПоказателиВДереве(ТекСтроки, ТаблицаРезультат, ИмяОкнаВход, ГлубинаРекурсииВход + 1);
	КонецЦикла;
КонецПроцедуры

// Возвращает ссылку для выбранного элемента графической схемы ИмяЭлементаВход.
// Когда получить ссылку не удалось, возвращает пустую ссылку на справочник Цели.
&НаСервереБезКонтекста
Функция ПолучитьВыбранныйЭлементГрафическойСхемы(ИмяЭлементаВход)
	// Инициализация и преобразование имени элемента.
	РезультатФункции = Справочники.Цели.ПустаяСсылка();
	ЭлементИД = Сред(СтрЗаменить(ИмяЭлементаВход, "_", "-"), 2);
	Если СтроковыеФункцииКлиентсервер.ЭтоУникальныйИдентификатор(ЭлементИД) Тогда
		// Получение ссылки на элемент и вывод готового значения.
		Попытка                            
			ИдентификаторОбъекта = Новый УникальныйИдентификатор(ЭлементИД);
			СсылкаЦель = Справочники.Цели.ПолучитьСсылку(ИдентификаторОбъекта);
			Если СсылкаЦель.ПолучитьОбъект() <> Неопределено Тогда
				РезультатФункции = СсылкаЦель;
			Иначе
				СсылкаПоказатель = Справочники.ПоказателиМонитораКлючевыхПоказателей.ПолучитьСсылку(ИдентификаторОбъекта);
				Если СсылкаПоказатель.ПолучитьОбъект() <> Неопределено Тогда
					РезультатФункции = СсылкаПоказатель;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось определить элемент'");
					РезультатФункции = Справочники.Цели.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось определить элемент'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Справочники.Цели.ПустаяСсылка();
		КонецПопытки;
	Иначе
		РезультатФункции = Справочники.Цели.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Выводит в окно ИмяОкнаВход виджеты из ТаблицаВиджетовВход.
&НаСервере
Процедура ВывестиОбластьВиджетов(ИмяОкнаВход, ТаблицаВиджетовВход, ДелительВход, СкрыватьЛоготипПоказателейВход, МассивКолонокИзм)
	Счетчик = 0;
	Для Каждого ТекСтроки Из ТаблицаВиджетовВход Цикл
		Если ТипЗнч(ТекСтроки[ИмяОкнаВход + "_Показатель"]) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
			// Получение исходных данных.
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ФактическоеЗначениеТекущегоПериода",		 ТекСтроки[ИмяОкнаВход + "_ФактическоеЗначениеТекущегоПериода"]);
			СтруктураДанных.Вставить("ФактическоеЗначениеПредыдущегоПериода",	 ТекСтроки[ИмяОкнаВход + "_ФактическоеЗначениеПредыдущегоПериода"]);
			СтруктураДанных.Вставить("ИзменениеОтносительное",					 ТекСтроки[ИмяОкнаВход + "_ИзменениеОтносительное"]);
			СтруктураДанных.Вставить("ИзменениеАбсолютное"	,					 ТекСтроки[ИмяОкнаВход + "_ИзменениеАбсолютное"]);
			СтруктураДанных.Вставить("Тренд",									 ТекСтроки[ИмяОкнаВход + "_Тренд"]);
			СтруктураДанных.Вставить("ПлановоеЗначение",						 ТекСтроки[ИмяОкнаВход + "_ПлановоеЗначение"]);
			СтруктураДанных.Вставить("ОтклонениеОтПланаАбсолютное",				 ТекСтроки[ИмяОкнаВход + "_ОтклонениеОтПланаАбсолютное"]);
			СтруктураДанных.Вставить("ОтклонениеОтПланаОтносительное",			 ТекСтроки[ИмяОкнаВход + "_ОтклонениеОтПланаОтносительное"]);
			СтруктураДанных.Вставить("СкрыватьЛоготипПоказателей", 				 СкрыватьЛоготипПоказателейВход);
			СтруктураДанных.Вставить("КоличествоКолонокВиджетов", 				 ДелительВход);
			ТекПоказатель = ТекСтроки[ИмяОкнаВход + "_Показатель"];
			// Заполнение таблицы показателей.
			ИдентификаторНовогоПоказателяСтрока = СгенерироватьСтроковыйИдентификатор();
			НоваяСтрокаТаблицаПоказателей = ТаблицаПоказателей.Добавить();
			НоваяСтрокаТаблицаПоказателей.Показатель = ТекПоказатель;
			НоваяСтрокаТаблицаПоказателей.ИдентификаторПоказателя = ИдентификаторНовогоПоказателяСтрока;
			НоваяСтрокаТаблицаПоказателей.ИмяОкна = ИмяОкнаВход;
			// Отрисовка виджета.
			НомерКолонки = Счетчик % ДелительВход;
			ГруппаКолонки = МассивКолонокИзм[НомерКолонки];
			ГруппаПоказателя = ДобавитьГруппуЭлементов("ГруппаПоказателя_", ГруппаКолонки, ИдентификаторНовогоПоказателяСтрока, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			ГруппаПоказателя.ЦветФона = WebЦвета.Бежевый;
			ГруппаПоказателя.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
			ГруппаПоказателя.Высота = 11;
			НарисоватьВиджетПоказателя(ТекПоказатель, ИдентификаторНовогоПоказателяСтрока, ГруппаПоказателя, СтруктураДанных);
			Счетчик = Счетчик + 1;
		Иначе
			// Неизвестный тип. Не выводим показатель.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ВывестиОбластьВиджетов()

// Возвращает тип диаграммы для области ИдентификаторОбластиВход.
&НаСервере
Функция ВернутьТипДиаграммы(ИдентификаторОбластиВход)
	// Инициализация.
	РезультатФункции = ТипДиаграммы.График;
	// Поиск текущей области и её настроек.
	НовыйТипОбластиДиаграммы = Перечисления.ТипыДиаграмм.ПустаяСсылка();
	Для Каждого ТекСостав Из Объект.Состав Цикл
		Если СокрЛП(ИдентификаторОбластиВход) = Строка(ТекСостав.ИдентификаторОбласти) Тогда
			НовыйТипОбластиДиаграммы = ТекСостав.ТипОбластиДиаграммы;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	// Выбор типа диаграмммы.
	РезультатФункции = БизнесАнализКлиентСерверУХ.ПреобразоватьТипДиаграммы(НовыйТипОбластиДиаграммы, ТипДиаграммы.График);
	Возврат РезультатФункции;	
КонецФункции		// ВернутьТипДиаграммы()	

// Возвращает вариант размещения легенды диаграммы для области ИдентификаторОбластиВход.
&НаСервере
Функция ВернутьВариантРазмещенияЛегендыДиаграммы(ИдентификаторОбластиВход)
	// Инициализация.
	РезультатФункции = Перечисления.ВариантыРазмещенияЛегендыДиаграммы.Право;
	// Поиск текущей области и её настроек.
	НовыйВариантРазмещения = Перечисления.ВариантыРазмещенияЛегендыДиаграммы.Право;
	Для Каждого ТекСостав Из Объект.Состав Цикл
		Если СокрЛП(ИдентификаторОбластиВход) = Строка(ТекСостав.ИдентификаторОбласти) Тогда
			НовыйВариантРазмещения = ТекСостав.ВариантРазмещенияЛегендыДиаграммы;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	// Преобразование перечисления.
	РезультатФункции = БизнесАнализКлиентСерверУХ.ПреобразоватьВариантРазмещенияДиаграммы(НовыйВариантРазмещения);
	Возврат РезультатФункции;	
КонецФункции		// ВернутьВариантРазмещенияЛегендыДиаграммы()

// Размещает команду смены типы диаграммы на тип ИмяТипаДиаграммы в элементе
// ЭлементВход окна ИмяОкнаВход. Устанавливает размещенной команде заголовок 
// ЗаголовокКомандыВход.
&НаСервере
Процедура РазместитьКомандуПереключениеТипаДиаграммы(ИмяТипаДиаграммы, ЗаголовокКомандыВход, ЭлементВход, ИмяОкнаВход)
	НовыйПрефикс = "ОбластьДиаграммаСменаТипаДиаграммы_" + ИмяТипаДиаграммы + "_";
	НаименованиеКомандаСменаТипа = ДобавитьКомандуФормы(НовыйПрефикс, ИмяОкнаВход);
	ЭлементКомандыСменаТипаДиаграммы = ДобавитьЭлементКоманды(НовыйПрефикс, ЭлементВход.КонтекстноеМеню, ИмяОкнаВход);
	ЭлементКомандыСменаТипаДиаграммы.Заголовок = ЗаголовокКомандыВход;
	ИмяПодключаемогоОбработчика = "СменаТипаДиграммы_" + ИмяТипаДиаграммы + "_Подключаемый";
	ЭтаФорма.Команды[НаименованиеКомандаСменаТипа].Действие = ИмяПодключаемогоОбработчика;
КонецПроцедуры		// РазместитьКомандуПереключениеТипаДиаграммы()

// Размещает контекстное меню для элемента-диаграммы ЭлементВход в окне ИмяОкнаВход.
&НаСервере
Процедура РазместитьКонтекстноеМенюДиаграммы(ЭлементВход, ИмяОкнаВход)
	РазместитьКомандуПереключениеТипаДиаграммы("Водопад",					 НСтр("ru = 'Водопад'"),					 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("Воронка",					 НСтр("ru = 'Воронка'"),					 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("Гистограмма",				 НСтр("ru = 'Гистограмма'"),				 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("ГистограммаГоризонтальная",	 НСтр("ru = 'Гистограмма горизонтальная'"),	 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("ГистограммаОбъемная",		 НСтр("ru = 'Гистограмма объемная'"),		 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("График",					 НСтр("ru = 'График'"),						 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("ГрафикПоШагам",				 НСтр("ru = 'График по шагам'"),			 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("ГрафикСОбластями",			 НСтр("ru = 'График с областями'"),			 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("Измерительная",				 НСтр("ru = 'Измерительная'"),				 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("Изометрическая",			 НСтр("ru = 'Изометрическая'"),				 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("Круговая",					 НСтр("ru = 'Круговая'"),					 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("КруговаяОбъемная",			 НСтр("ru = 'Круговая объемная'"),			 ЭлементВход, ИмяОкнаВход);
	РазместитьКомандуПереключениеТипаДиаграммы("Точечная",					 НСтр("ru = 'Точечная'"),					 ЭлементВход, ИмяОкнаВход);
КонецПроцедуры		// РазместитьКонтекстноеМенюДиаграммы()

// Определяет, принадлежит ли диаграмма с типом ТипДиаграммыВход
// диаграммам с отображением динамики.
&НаСервереБезКонтекста
Функция ЭтоДиаграммаСДинамикой(ТипДиаграммыВход)
	РезультатФункции = Ложь;
	ТипыДиаграммСДинамикой = Новый Массив;
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.Водопад);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.Гистограмма);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.ГистограммаГоризонтальная);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.ГистограммаОбъемная);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.График);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.ГрафикПоШагам);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.ГрафикСОбластями);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.Изометрическая);
	ТипыДиаграммСДинамикой.Добавить(ТипДиаграммы.Точечная);
	Если ТипыДиаграммСДинамикой.Найти(ТипДиаграммыВход) = Неопределено Тогда
		РезультатФункции = Ложь;
	Иначе
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЭтоДиаграммаСДинамикой()

// Выводит в окно ИмяОкнаВход диаграмму по ТаблицаВиджетовВход в группу формы ГруппаДиаграммыВход 
// из монитора показателей МониторПоказателейВход.
&НаСервере
Процедура ВывестиОбластьДиаграмма(ИмяОкнаВход, ТаблицаВиджетовВход, ГруппаДиаграммыВход, МониторПоказателейВход, ИдентификаторОбластиВход)
	Попытка
		// Инициализация.
		ТипПериоды = Тип("СправочникСсылка.Периоды");
		ПустаяДата = Дата(1, 1, 1);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ОписаниеТиповДиграмма = Новый ОписаниеТипов(МассивТипов);
		ПрефиксЭлементДиаграмма = "ОбластьДиаграмма_";
		// Добавление реквизитов и элементов на форму.
		НаименованиеРеквизитаПредставлениеДиаграмма = ПрефиксЭлементДиаграмма + ИмяОкнаВход;
		УжеЕстьРеквизит = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, НаименованиеРеквизитаПредставлениеДиаграмма);
		Если НЕ УжеЕстьРеквизит Тогда
			МассивДобавляемых = Новый Массив;
			НаименованиеРеквизитаДиаграмма = ДобавитьРеквизитФормы(ПрефиксЭлементДиаграмма, ИмяОкнаВход, "", ОписаниеТиповДиграмма, МассивДобавляемых);
			ИзменитьРеквизиты(МассивДобавляемых);
			ЭлементДиаграмма = ДобавитьЭлементФормы(ПрефиксЭлементДиаграмма, ГруппаДиаграммыВход, НаименованиеРеквизитаДиаграмма, ИмяОкнаВход); 			
			ЭлементДиаграмма.УстановитьДействие("Выбор", "ОбластьДиаграммаВыбор_Подключаемый");
			РазместитьКонтекстноеМенюДиаграммы(ЭлементДиаграмма, ИмяОкнаВход);
		Иначе
			НаименованиеРеквизитаДиаграмма = ПрефиксЭлементДиаграмма + ИмяОкнаВход;
		КонецЕсли;
		// Настройка диаграммы.
		РеквизитДиаграмма = ЭтаФорма[НаименованиеРеквизитаДиаграмма]; 
		РеквизитДиаграмма.КоличествоСерий = 0; 
		РеквизитДиаграмма.КоличествоТочек = 0; 
		РеквизитДиаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение; 
		РеквизитДиаграмма.ОбластьЗаголовка.Текст = Строка(МониторПоказателейВход); 
		РеквизитДиаграмма.Обновление = Ложь; 
		РеквизитДиаграмма.ТипДиаграммы = ВернутьТипДиаграммы(ИдентификаторОбластиВход);
		ВариантРазмещенияЛегенды = ВернутьВариантРазмещенияЛегендыДиаграммы(ИдентификаторОбластиВход);
		РеквизитДиаграмма.ОбластьЛегенды.Расположение = ВариантРазмещенияЛегенды;
		// Настройка запроса динамики.
		СтруктураОтборов = СформироватьСтруктуруОтборов();
		Контекст = ПолучитьКонтекстРасчета(ИмяОкнаВход, "ФактическоеЗначениеТекущегоПериода", ПутьКТаблицеОткрытыхОтчетов, СтруктураОтборов);
		Для Каждого ТекСтроки Из ТаблицаВиджетовВход Цикл
			// Добавим серию.
			ТекПоказатель = ТекСтроки[ИмяОкнаВход + "_Показатель"];
			КоличествоСерий = РеквизитДиаграмма.Серии.Количество(); 
			РеквизитДиаграмма.КоличествоСерий = КоличествоСерий + 1; 
			ТекущаяСерия = РеквизитДиаграмма.Серии[КоличествоСерий];
			ТекущаяСерия.Текст = Строка(ТекПоказатель); 
			ТекущаяСерия.Значение = ТекПоказатель;
			// Получение данных динамики.
			АдресТаблицы = Справочники.ПанелиОтчетов.ПолучитьАдресТаблицыДинамики(ТекПоказатель, Контекст, "ФактическоеЗначениеТекущегоПериода");
			Если ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
				ТаблицаПериодов = ПолучитьИзВременногоХранилища(АдресТаблицы);
				Если ТипЗнч(ТаблицаПериодов) = Тип("ТаблицаЗначений") Тогда
					// Упорядочим периоды.
					ТаблицаПериодов.Колонки.Добавить("ДатаНачала");
					Для Каждого ТекТаблицаПериодов Из ТаблицаПериодов Цикл
						ТекПериод = ТекТаблицаПериодов.Период;
						Если ТипЗнч(ТекПериод) = ТипПериоды Тогда
							ТекТаблицаПериодов.ДатаНачала = ТекПериод.ДатаНачала;
						Иначе
							ТекТаблицаПериодов.ДатаНачала = ПустаяДата;
						КонецЕсли;
					КонецЦикла;	
					ТаблицаПериодов.Сортировать("ДатаНачала Возр");
					// Рассчитаем итоговые значения.
					Если НЕ ЭтоДиаграммаСДинамикой(РеквизитДиаграмма.ТипДиаграммы) Тогда
						Если ТаблицаПериодов.Количество() > 1 Тогда
							ТаблицаВрем = ТаблицаПериодов.СкопироватьКолонки();
							НоваяСтрока = ТаблицаВрем.Добавить();
							ПерваяСтрока = ТаблицаПериодов[0];
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрока);
							СпособРасчетаИтоговогоЗначения = ТекПоказатель.СпособРасчетаИтоговогоЗначения;
							ИтогПоПоказателю = БизнесАнализСерверУХ.РассчитатьИтогПоТаблицеПоказателя(ТаблицаПериодов, СпособРасчетаИтоговогоЗначения);
							НоваяСтрока.Значение = ИтогПоПоказателю;
							ТаблицаПериодов = ТаблицаВрем.Скопировать();
						Иначе
							// Пустая таблица. Преобразование не требуется.
						КонецЕсли;
					Иначе
						// Оставляем таблицу.
					КонецЕсли;
					// Выведем периоды в точки.
					Для Каждого ТекТаблицаПериодов Из ТаблицаПериодов Цикл
						ТекПериод = ТекТаблицаПериодов.Период;
						ТекЗначение = ТекТаблицаПериодов.Значение;
						НоваяТочка = РеквизитДиаграмма.УстановитьТочку(ТекПериод);
						РеквизитДиаграмма.УстановитьЗначение(НоваяТочка, КоличествоСерий, ТекЗначение); 
					КонецЦикла;	
				Иначе
					ТекстСообщения = НСтр("ru = 'Неизвестный вариант данных показателя %Показатель%: %Данные%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ТекПоказатель));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Данные%", Строка(ТаблицаПериодов));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить данные диаграммы по показателю %Показатель%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ТекПоказатель));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			// Добавление данных в таблицу показателей.
			ИдентификаторНовогоПоказателяСтрока = СгенерироватьСтроковыйИдентификатор();
			НоваяСтрокаТаблицаПоказателей = ТаблицаПоказателей.Добавить();
			НоваяСтрокаТаблицаПоказателей.Показатель = ТекПоказатель;
			НоваяСтрокаТаблицаПоказателей.ИдентификаторПоказателя = ИдентификаторНовогоПоказателяСтрока;
			НоваяСтрокаТаблицаПоказателей.ИмяОкна = ИмяОкнаВход;
		КонецЦикла;
		РеквизитДиаграмма.Обновление = Истина;   
	Исключение
		ТекстСообщения = НСтр("ru = 'При выводе диаграммы в окно %Окно% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Окно%", Строка(ИмяОкнаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// ВывестиОбластьДиаграмма()

// Возвращает пустую таблицу открытых отчетов.
&НаСервере
Функция ИнициализироватьТаблицуОткрытыхОтчетов()
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("ИмяОкна");
	РезультатФункции.Колонки.Добавить("УниверсальныйОтчет");
	РезультатФункции.Колонки.Добавить("АдресДанныеРасшифровки");
	РезультатФункции.Колонки.Добавить("НастройкиОтчета");
	РезультатФункции.Колонки.Добавить("URLСхемы");
	РезультатФункции.Колонки.Добавить("ВидПроизвольногоОтчета");
	РезультатФункции.Колонки.Добавить("ВнешнийКонтекст");
	РезультатФункции.Колонки.Добавить("ИмяСтраницы");
	РезультатФункции.Колонки.Добавить("ОтображениеМонитора");
	РезультатФункции.Колонки.Добавить("ГруппировкаМонитора");
	РезультатФункции.Колонки.Добавить("ИдентификаторОбласти");
	РезультатФункции.Колонки.Добавить("РасшифровываемаяОбласть");
	РезультатФункции.Колонки.Добавить("НомерАналитики");
	РезультатФункции.Колонки.Добавить("КоличествоПериодовДляОтображения");
	РезультатФункции.Колонки.Добавить("ОтображениеРасшифровки");
	РезультатФункции.Колонки.Добавить("НастройкиКомпоновщика");
	РезультатФункции.Колонки.Добавить("ВариантРазмещенияЛегендыДиаграммы");
	РезультатФункции.Колонки.Добавить("КоличествоСтолбцовДиаграммы");
	Возврат РезультатФункции;	
КонецФункции		// ИнициализироватьТаблицуОткрытыхОтчетов()

// Выводит отчёты, когда данные по отчётам уже были сформированы ранее.
&НаСервере
Процедура ВывестиОтчетыВВидеТаблицыЗначений(ОткрытыеОтчеты, ВыводимыйДокумент, ПрефиксГрафСхема)
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница <> Неопределено Тогда
		СтрокаОбновленныхОтчетов = СписокОбновленныхСтраниц.НайтиПоЗначению(Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя);
		НайденныеСтроки = ОткрытыеОтчеты.НайтиСтроки(Новый Структура("ИмяСтраницы", СтрокаОбновленныхОтчетов.Значение));
		Для Каждого Элемент Из НайденныеСтроки Цикл
			
			ИмяОкна = Элемент.ИмяОкна;
			ЗависимаяОбласть = ЗначениеЗаполнено(Элемент.РасшифровываемаяОбласть);
			
			Если ЗависимаяОбласть Тогда
				ИспользуетсяОтчет = Ложь;
			ИначеЕсли ТипЗнч(Элемент.УниверсальныйОтчет) = Тип("СправочникСсылка.БланкиОтчетов") Тогда
				ИспользуетсяОтчет = Истина;
			ИначеЕсли (Элемент.УниверсальныйОтчет) = Неопределено Тогда
				ИспользуетсяОтчет = Истина;
			Иначе	
				ИспользуетсяОтчет = Элемент.УниверсальныйОтчет.ПредставлениеЭлементаОтчета <> Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
			КонецЕсли;
			ПутьКТаблицеОткрытыхОтчетов = ПоместитьВоВременноеХранилище(ОткрытыеОтчеты, УникальныйИдентификатор);
			
			Если НЕ ЗависимаяОбласть Тогда
				
				Если Элемент.ОтображениеМонитора = Перечисления.СпособОтображенияМонитораКлючевыхПоказателей.ВВидеКартыПоказателей Тогда
					ГрафСхема = Новый ГрафическаяСхема;
				Иначе	
					ГрафСхема = Неопределено;
				КонецЕсли;
				ОбщийОтбор = ВернутьНастройкиОтбораДляОтчета(Элемент.УниверсальныйОтчет);
				РезультатВывода = ВывестиОтчет(Элемент.УниверсальныйОтчет, УникальныйИдентификатор, Элемент.НастройкиОтчета, ОбщийОтбор, ВыводимыйДокумент, ИспользуетсяОтчет, ИмяОкна, , ГрафСхема);
				Если РезультатВывода <> Неопределено Тогда
					Элемент.АдресДанныеРасшифровки = РезультатВывода.ДанныеРасшифровки;
					Элемент.URLСхемы               = РезультатВывода.URLСхемы;
					Элемент.ВнешнийКонтекст        = РезультатВывода.ВнешнийКонтекст;
					Элемент.НастройкиКомпоновщика  = РезультатВывода.НастройкиКомпоновщика;
					Если Элемент.ВидПроизвольногоОтчета = 1 Тогда
						СтруктураОтображения = БизнесАнализВызовСервераУХ.ВернутьСтруктуруОтображенияМонитора(Элемент.ОтображениеМонитора);
						// Таблица.
						Если СтруктураОтображения.ОтображатьТаблицу Тогда
							ЗначениеВРеквизитФормы(ВыводимыйДокумент.Скопировать(), ИмяОкна);
						Иначе
							// Не выводим таблицу.
						КонецЕсли;
						// Графическая схема карты целей.
						Если СтруктураОтображения.ОтображатьКарту Тогда
							Если ГрафСхема = Неопределено Тогда
								ЭтаФорма[ИмяОкна + "_Карта"].Очистить();
								ЭтаФорма[ИмяОкна + "_Карта"].Вывести(Справочники.ПроизвольныеОтчеты.ОтрисоватьГрафическоеПредставлениеМонитора(ВыводимыйДокумент, Элемент.ГруппировкаМонитора, ИмяОкна + "_"));
							ИначеЕсли ТипЗнч(ГрафСхема) = Тип("ГрафическаяСхема") Тогда
								НаименованиеРеквизитаГрафСхема = ПрефиксГрафСхема + ИмяОкна;
								ЭтаФорма[НаименованиеРеквизитаГрафСхема] = ГрафСхема;
							Иначе
								ТекстСообщения = НСтр("ru = 'Неизвестный вариант отображения карты: %Схема%'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Схема%", Строка(ГрафСхема));
								ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							КонецЕсли;
						Иначе
							// Не выводим карту целей.
						КонецЕсли;
						// Виджеты.
						Если СтруктураОтображения.ОтображатьВиджеты Тогда
							Для Каждого ТекСтроки Из ВыводимыйДокумент.Строки Цикл
								// Получение исходных данных.
								СтруктураДанных = Новый Структура;
								СтруктураДанных.Вставить("ФактическоеЗначениеТекущегоПериода",		 ТекСтроки[ИмяОкна + "_ФактическоеЗначениеТекущегоПериода"]);
								СтруктураДанных.Вставить("ФактическоеЗначениеПредыдущегоПериода",	 ТекСтроки[ИмяОкна + "_ФактическоеЗначениеПредыдущегоПериода"]);
								СтруктураДанных.Вставить("ИзменениеОтносительное",					 ТекСтроки[ИмяОкна + "_ИзменениеОтносительное"]);
								СтруктураДанных.Вставить("ИзменениеАбсолютное"	,					 ТекСтроки[ИмяОкна + "_ИзменениеАбсолютное"]);
								СтруктураДанных.Вставить("Тренд",									 ТекСтроки[ИмяОкна + "_Тренд"]);
								СтруктураДанных.Вставить("ПлановоеЗначение",						 ТекСтроки[ИмяОкна + "_ПлановоеЗначение"]);
								СтруктураДанных.Вставить("ОтклонениеОтПланаАбсолютное",				 ТекСтроки[ИмяОкна + "_ОтклонениеОтПланаАбсолютное"]);
								СтруктураДанных.Вставить("ОтклонениеОтПланаОтносительное",			 ТекСтроки[ИмяОкна + "_ОтклонениеОтПланаОтносительное"]);
								ТекПоказатель = ТекСтроки[ИмяОкна + "_Показатель"];
								СтруктураПоискаПоказателей = Новый Структура;
								СтруктураПоискаПоказателей.Вставить("Показатель", ТекПоказатель);
								НайденныеСтрокиТаблицаПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоискаПоказателей); 
								Для Каждого ТекНайденныеСтрокиТаблицаПоказателей Из НайденныеСтрокиТаблицаПоказателей Цикл
									ТекПоказательМкп = ТекНайденныеСтрокиТаблицаПоказателей.Показатель;
									ТекИдентификатор = ТекНайденныеСтрокиТаблицаПоказателей.ИдентификаторПоказателя;
									НарисоватьВиджетПоказателя(ТекПоказательМкп, ТекИдентификатор, Неопределено, СтруктураДанных);
								КонецЦикла;
							КонецЦикла;
						Иначе
							// Не требуется отображать в виде виджетов.
						КонецЕсли;
						// Вывод диаграммы.
						Если СтруктураОтображения.ОтображатьДиаграмму Тогда
							ТаблицаВиджетов = ОбщегоНазначенияСерверУХ.СформироватьПустуюТаблицуПоДереву(ВыводимыйДокумент);
							ВыделитьПоказателиВДереве(ВыводимыйДокумент, ТаблицаВиджетов, ИмяОкна);
							ВывестиОбластьДиаграмма(ИмяОкна, ТаблицаВиджетов, Элементы[ИмяОкна], Элемент.УниверсальныйОтчет, Элемент.ИдентификаторОбласти);
						Иначе
							// Не отображаем диаграмму.
						КонецЕсли;
					Иначе
						НайденныйЭлемент = СоответствиеИменИОбъектовСТ.НайтиПоЗначению(ИмяОкна);
						Если НайденныйЭлемент <> Неопределено Тогда
							ПредставлениеНайденногоЭлемента = НайденныйЭлемент.Представление;
							ИмяТаблицыФормы = СтрЗаменить(ПредставлениеНайденногоЭлемента, "_Окно", "");
							ЭтаФорма[ИмяТаблицыФормы] = ВыводимыйДокумент;
						Иначе	
							ЕстьРеквизитСИменемФормы = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ИмяОкна);
							Если ЕстьРеквизитСИменемФормы Тогда
								ЭтаФорма[ИмяОкна] = ВыводимыйДокумент;
							Иначе
								// Реквизит не найден. Не заполняем.
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтрокаОбновленныхОтчетов.Пометка = Истина;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбрана страница для отображения аналитической панели'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ВывестиОтчетыВВидеТаблицыЗначений()	

// Формирует данные по отчётам аналитической панели и выводит их.
&НаСервере
Процедура СформироватьИВывестиОткрытыеОтчеты(ВыводимыйДокумент, ПрефиксГрафСхема)
	НомерСтраницы = 0;
	Инд = 0;
	ИндСТ = 0;
	СоответствиеЗависимыхОбластей = Новый Соответствие;
	СоответствиеИменОбластей      = Новый Соответствие;
	ИспользуетсяСводнаяТаблица = Ложь;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ГрафическаяСхема"));
	ОписаниеТиповГрафСхема = Новый ОписаниеТипов(МассивТипов);
	ОткрытыеОтчеты = ИнициализироватьТаблицуОткрытыхОтчетов();

	СоответствиеИменИОбъектовСТ.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраницыПанели.Описание КАК Описание_СтраницыПанели,
	|	СтраницыПанели.ОтображатьНаименование КАК ОтображатьНаименование_СтраницыПанели,
	|	СтраницыПанели.ГруппировкаПанелей КАК ГруппировкаПанелей,
	|	ПанелиОтчетовГруппыОтчетов.Описание КАК Описание_ГруппаОтчета,
	|	ПанелиОтчетовГруппыОтчетов.ОтображатьНаименование КАК ОтображатьНаименование_ГруппаОтчета,
	|	ПанелиОтчетовСостав.Описание КАК Описание_УниверсальныйОтчет,
	|	ПанелиОтчетовСостав.УниверсальныйОтчет КАК УниверсальныйОтчет,
	|	ПанелиОтчетовСостав.ОтображатьНаименование КАК ОтображатьНаименование_УниверсальныйОтчет,
	|	ПанелиОтчетовСостав.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|	ВЫРАЗИТЬ(ПанелиОтчетовСостав.УниверсальныйОтчет КАК Справочник.ПроизвольныеОтчеты).ВидПроизвольногоОтчета КАК ВидПроизвольногоОтчета,
	|	ВЫБОР
	|		КОГДА ПанелиОтчетовСостав.УниверсальныйОтчет ССЫЛКА Справочник.ПроизвольныеОтчеты
	|			ТОГДА ПанелиОтчетовСостав.УниверсальныйОтчет.Код
	|		КОГДА ПанелиОтчетовСостав.УниверсальныйОтчет = ЗНАЧЕНИЕ(Перечисление.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя)
	|			ТОГДА ""Структура""
	|		КОГДА ПанелиОтчетовСостав.УниверсальныйОтчет = ЗНАЧЕНИЕ(Перечисление.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя)
	|			ТОГДА ""Динамика""
	|		ИНАЧЕ ""Служебная""
	|	КОНЕЦ КАК КодОтчета,
	|	ПанелиОтчетовСостав.ПараметрыОтчета КАК ПараметрыОтчета,
	|	ПанелиОтчетовСостав.ОтображениеМонитора КАК ОтображениеМонитора,
	|	ВЫРАЗИТЬ(ПанелиОтчетовСостав.УниверсальныйОтчет КАК Справочник.ПроизвольныеОтчеты).ГруппировкаМонитора КАК ГруппировкаМонитора,
	|	ПанелиОтчетовСостав.ИдентификаторОбласти КАК ИдентификаторОбласти,
	|	ПанелиОтчетовСостав.РасшифровываемаяОбласть КАК РасшифровываемаяОбласть,
	|	ПанелиОтчетовСостав.НомерАналитики КАК НомерАналитики,
	|	ПанелиОтчетовСостав.КоличествоПериодовДляОтображения КАК КоличествоПериодовДляОтображения,
	|	ПанелиОтчетовСостав.ОтображениеРасшифровки КАК ОтображениеРасшифровки,
	|	ПанелиОтчетовСостав.КоличествоКолонокВиджетов КАК КоличествоКолонокВиджетов,
	|	ПанелиОтчетовСостав.СкрыватьЛоготипПоказателей КАК СкрыватьЛоготипПоказателей,
	|	ПанелиОтчетовСостав.Отбор КАК Отбор,
	|	ПанелиОтчетовСостав.ВариантРазмещенияЛегендыДиаграммы КАК ВариантРазмещенияЛегендыДиаграммы,
	|	ПанелиОтчетовСостав.КоличествоСтолбцовДиаграммы КАК КоличествоСтолбцовДиаграммы,
	|	ПанелиОтчетовСостав.СкрыватьЗаголовокПринадлежностиЗависимойОбласти КАК СкрыватьЗаголовокПринадлежностиЗависимойОбласти,
	|	ПанелиОтчетовСостав.СкрыватьЗаголовокПоказателяЗависимойОбласти КАК СкрыватьЗаголовокПоказателяЗависимойОбласти
	|ИЗ
	|	Справочник.ПанелиОтчетов.Состав КАК ПанелиОтчетовСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПанелиОтчетов.ГруппыОтчетов КАК ПанелиОтчетовГруппыОтчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПанелиОтчетов.СтраницыПанели КАК СтраницыПанели
	|			ПО (СтраницыПанели.ПорядковыйНомер = ПанелиОтчетовГруппыОтчетов.ИдентификаторСтраницы)
	|		ПО (ПанелиОтчетовГруппыОтчетов.ПорядковыйНомер = ПанелиОтчетовСостав.ИдентификаторКолонки)
	|ГДЕ
	|	СтраницыПанели.Ссылка = &ПанельОтчетов
	|	И ПанелиОтчетовГруппыОтчетов.Ссылка = &ПанельОтчетов
	|	И ПанелиОтчетовСостав.Ссылка = &ПанельОтчетов
	|	И ПанелиОтчетовГруппыОтчетов.Использование = ИСТИНА
	|	И ПанелиОтчетовСостав.Использование = ИСТИНА
	|	И СтраницыПанели.Использование = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПанелиОтчетовГруппыОтчетов.ПорядковыйНомер,
	|	ПанелиОтчетовСостав.ПорядковыйНомер
	|ИТОГИ
	|	МАКСИМУМ(Описание_СтраницыПанели),
	|	МАКСИМУМ(ОтображатьНаименование_СтраницыПанели),
	|	МАКСИМУМ(ГруппировкаПанелей),
	|	МАКСИМУМ(Описание_ГруппаОтчета),
	|	МАКСИМУМ(ОтображатьНаименование_ГруппаОтчета)
	|ПО
	|	СтраницыПанели.ПорядковыйНомер,
	|	ПанелиОтчетовГруппыОтчетов.ПорядковыйНомер";
	Запрос.УстановитьПараметр("ПанельОтчетов", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Количество() <= 1 Тогда
		// Не отображаем закладки, если их только одна.
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет; 
	Иначе
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		// Выборка страниц.
		ИмяСтраницы     = "Страница" + НомерСтраницы;
		ТекущаяСтраница = ДобавитьСтраницуПанели(ИмяСтраницы, Выборка.Описание_СтраницыПанели, Выборка.ГруппировкаПанелей);
		
		ПутьКТаблицеОткрытыхОтчетов = ПоместитьВоВременноеХранилище(ОткрытыеОтчеты, УникальныйИдентификатор);
		ВыборкаГрупп = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГрупп.Следующий() Цикл
			// Выборка групп.
			ПервыйОбъект = Истина;
			ВыборкаОтчетов = ВыборкаГрупп.Выбрать();
			Пока ВыборкаОтчетов.Следующий() Цикл
				// Выборка отчетов.
				ИспользуетсяСводнаяТаблица = Ложь;
				Инд = Инд + 1;
				ИмяОкна     = "Код_" + СокрЛП(ВыборкаОтчетов.КодОтчета) + "_" + Строка(Инд);
				ИспользуетсяГант = Ложь;
				
				ЗависимаяОбласть = ЗначениеЗаполнено(ВыборкаОтчетов.РасшифровываемаяОбласть);
				
				Если ТипЗнч(ВыборкаОтчетов.УниверсальныйОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
					ИспользуетсяОтчет = ВыборкаОтчетов.УниверсальныйОтчет.ПредставлениеЭлементаОтчета <> Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;	
				ИначеЕсли ТипЗнч(ВыборкаОтчетов.УниверсальныйОтчет) = Тип("СправочникСсылка.БланкиОтчетов") Тогда	
					ИспользуетсяСводнаяТаблица = Истина;
					ИспользуетсяОтчет = Истина;
					КэшИспользованныхОбъектов[ИндСТ].ИмяОкна = ИмяОкна;
					ИндСТ = ИндСТ+1;
				ИначеЕсли ВыборкаОтчетов.УниверсальныйОтчет = Неопределено Тогда	
					ИспользуетсяОтчет = Истина;
					КэшИспользованныхОбъектов[ИндСТ].ИмяОкна = ИмяОкна;
					ИспользуетсяСводнаяТаблица = Ложь;
					ИспользуетсяГант = Истина;
					ИндСТ = ИндСТ+1;	
				Иначе
					ИспользуетсяОтчет = НЕ ЗначениеЗаполнено(ВыборкаОтчетов.ОтображениеРасшифровки) ИЛИ ВыборкаОтчетов.ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.ВВидеТаблицы;
				КонецЕсли;
				
				Если ЗависимаяОбласть Тогда
					СоответствиеЗависимыхОбластей.Вставить(ИмяОкна + "_ИмяГлавнойОбласти", ВыборкаОтчетов.РасшифровываемаяОбласть);
				КонецЕсли;
				
				НастройкиОтчета = ВыборкаОтчетов.СохраненнаяНастройка;
				НаименованиеОтчета = ?(ВыборкаОтчетов.ОтображатьНаименование_УниверсальныйОтчет = ИСТИНА, ВыборкаОтчетов.Описание_УниверсальныйОтчет, "");
				
				СоответствиеИменОбластей.Вставить(ВыборкаОтчетов.ИдентификаторОбласти, ВыборкаОтчетов.Описание_УниверсальныйОтчет);
				
				ЭтоМониторМКП = (ВыборкаОтчетов.ВидПроизвольногоОтчета = 1);
				Если ПервыйОбъект Тогда
					НаименованиеНовойКолонки = ?(ВыборкаГрупп.ОтображатьНаименование_ГруппаОтчета = ИСТИНА, ВыборкаГрупп.Описание_ГруппаОтчета, "");
					ДобавитьКолонкуПанели(ИмяОкна, НаименованиеНовойКолонки, НаименованиеОтчета, ЭтоМониторМКП, ВыборкаОтчетов.ОтображениеМонитора, ВыборкаОтчетов.ПараметрыОтчета, Истина, ИспользуетсяСводнаяТаблица, ТекущаяСтраница, Выборка.ГруппировкаПанелей, ЗависимаяОбласть, ИспользуетсяГант, ИспользуетсяОтчет);
					ИмяОкнаКолонки = "Панель" + ЧислоКолонок;
					ПервыйОбъект = Ложь;
				ИначеЕсли ИспользуетсяСводнаяТаблица Тогда	
					ДобавитьСводнуюТаблицу(ИмяОкна, НаименованиеОтчета, ЭтоМониторМКП, ВыборкаОтчетов.ОтображениеМонитора, Элементы[ИмяОкнаКолонки], ВыборкаОтчетов.ПараметрыОтчета, ЗависимаяОбласть);
				ИначеЕсли ИспользуетсяОтчет И НЕ ИспользуетсяСводнаяТаблица И НЕ ИспользуетсяГант Тогда
					ДополнительныеНастройкиОтчета = Новый Структура;
					ДополнительныеНастройкиОтчета.Вставить("СкрыватьЗаголовокПринадлежностиЗависимойОбласти", ВыборкаОтчетов.СкрыватьЗаголовокПринадлежностиЗависимойОбласти);
					ДополнительныеНастройкиОтчета.Вставить("СкрыватьЗаголовокПоказателяЗависимойОбласти", ВыборкаОтчетов.СкрыватьЗаголовокПоказателяЗависимойОбласти);
					ДобавитьОтчет(ИмяОкна, НаименованиеОтчета, ЭтоМониторМКП, ВыборкаОтчетов.ОтображениеМонитора, Элементы[ИмяОкнаКолонки], ВыборкаОтчетов.ПараметрыОтчета, ЗависимаяОбласть, ДополнительныеНастройкиОтчета);
				ИначеЕсли ИспользуетсяГант Тогда
					ДобавитьГант(ИмяОкна, НаименованиеОтчета, ЭтоМониторМКП, ВыборкаОтчетов.ОтображениеМонитора, Элементы[ИмяОкнаКолонки], ВыборкаОтчетов.ПараметрыОтчета, ЗависимаяОбласть);
				Иначе
					ДополнительныеНастройкиДиаграммы = Новый Структура;
					ДополнительныеНастройкиДиаграммы.Вставить("СкрыватьЗаголовокПринадлежностиЗависимойОбласти", ВыборкаОтчетов.СкрыватьЗаголовокПринадлежностиЗависимойОбласти);
					ДополнительныеНастройкиДиаграммы.Вставить("СкрыватьЗаголовокПоказателяЗависимойОбласти", ВыборкаОтчетов.СкрыватьЗаголовокПоказателяЗависимойОбласти);
					ДобавитьДиаграмму(ИмяОкна, НаименованиеОтчета, Элементы[ИмяОкнаКолонки], ЗависимаяОбласть, ДополнительныеНастройкиДиаграммы);
				КонецЕсли;
				
				НоваяСтрока = ОткрытыеОтчеты.Добавить();
				НоваяСтрока.ВариантРазмещенияЛегендыДиаграммы	 = ВыборкаОтчетов.ВариантРазмещенияЛегендыДиаграммы;
				НоваяСтрока.ВидПроизвольногоОтчета				 = ВыборкаОтчетов.ВидПроизвольногоОтчета;
				НоваяСтрока.ГруппировкаМонитора					 = ВыборкаОтчетов.ГруппировкаМонитора;
				НоваяСтрока.ИдентификаторОбласти				 = ВыборкаОтчетов.ИдентификаторОбласти;
				НоваяСтрока.ИмяОкна								 = ИмяОкна;
				НоваяСтрока.ИмяСтраницы							 = ИмяСтраницы;
				НоваяСтрока.КоличествоПериодовДляОтображения	 = ВыборкаОтчетов.КоличествоПериодовДляОтображения;
				НоваяСтрока.КоличествоСтолбцовДиаграммы			 = ВыборкаОтчетов.КоличествоСтолбцовДиаграммы;
				НоваяСтрока.НастройкиОтчета						 = НастройкиОтчета;
				НоваяСтрока.НомерАналитики						 = ВыборкаОтчетов.НомерАналитики;
				НоваяСтрока.ОтображениеМонитора					 = ВыборкаОтчетов.ОтображениеМонитора;
				НоваяСтрока.ОтображениеРасшифровки				 = ВыборкаОтчетов.ОтображениеРасшифровки;
				НоваяСтрока.РасшифровываемаяОбласть				 = ВыборкаОтчетов.РасшифровываемаяОбласть;
				НоваяСтрока.УниверсальныйОтчет					 = ВыборкаОтчетов.УниверсальныйОтчет;
				
				СтруктураОтображения = БизнесАнализВызовСервераУХ.ВернутьСтруктуруОтображенияМонитора(ВыборкаОтчетов.ОтображениеМонитора);
				
				СписокОбновленныхСтраниц.Добавить(ИмяСтраницы, , Истина);
				
				Если НЕ ЗависимаяОбласть Тогда // Зависимые области не обновляются при первоначальном выводе.
					Если СтруктураОтображения.ОтображатьКарту Тогда
						ГрафСхема = Новый ГрафическаяСхема;
					Иначе	
						ГрафСхема = Неопределено;
					КонецЕсли;
					ПолученныеНастройки = ВернутьНастройкиОтбораДляОтчета(ВыборкаОтчетов.УниверсальныйОтчет);
					РезультатВывода = ВывестиОтчет(ВыборкаОтчетов.УниверсальныйОтчет, УникальныйИдентификатор, ВыборкаОтчетов.СохраненнаяНастройка, ПолученныеНастройки, ВыводимыйДокумент, ИспользуетсяОтчет, ИмяОкна, , ГрафСхема);
					Если РезультатВывода <> Неопределено Тогда
						НоваяСтрока.АдресДанныеРасшифровки  = РезультатВывода.ДанныеРасшифровки;
						НоваяСтрока.URLСхемы                = РезультатВывода.URLСхемы;
						НоваяСтрока.ВнешнийКонтекст         = РезультатВывода.ВнешнийКонтекст;
						НоваяСтрока.НастройкиКомпоновщика   = РезультатВывода.НастройкиКомпоновщика;
					КонецЕсли;
					
					Если ТипЗнч(ВыводимыйДокумент) = Тип("ДеревоЗначений") Тогда
						
						Если СтруктураОтображения.ОтображатьТаблицу Тогда
							ЗначениеВРеквизитФормы(ВыводимыйДокумент, ИмяОкна);
						КонецЕсли;
						
						Если СтруктураОтображения.ОтображатьКарту Тогда
							Если ГрафСхема = Неопределено Тогда
								// Не удалось получить графическую схему. Выводим стандартным способом.									
								ЭтаФорма[ИмяОкна + "_Карта"].Очистить();
								ЭтаФорма[ИмяОкна + "_Карта"].Вывести(Справочники.ПроизвольныеОтчеты.ОтрисоватьГрафическоеПредставлениеМонитора(ВыводимыйДокумент, ВыборкаОтчетов.ГруппировкаМонитора, ИмяОкна + "_"));
							ИначеЕсли ТипЗнч(ГрафСхема) = Тип("ГрафическаяСхема") Тогда
								// Есть графическая схема. Выведем её на форму.
								МассивДобавляемых = Новый Массив;
								НаименованиеРеквизитаГрафСхема = ПрефиксГрафСхема + ИмяОкна;
								Если ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, НаименованиеРеквизитаГрафСхема) Тогда
									ГрафСхемаНаименованиеРеквизита = НаименованиеРеквизитаГрафСхема;
								Иначе
									ГрафСхемаНаименованиеРеквизита = ДобавитьРеквизитФормы(ПрефиксГрафСхема, ИмяОкна, "", ОписаниеТиповГрафСхема, МассивДобавляемых);	
									ИзменитьРеквизиты(МассивДобавляемых);
									ГрафСхемаЭлемент = Элементы.Вставить(ИмяОкна + ПрефиксГрафСхема, Тип("ПолеФормы"), Элементы[ИмяОкна]);
									ГрафСхемаЭлемент.Вид = ВидПоляФормы.ПолеГрафическойСхемы;
									ГрафСхемаЭлемент.ПутьКДанным = ГрафСхемаНаименованиеРеквизита;
									ГрафСхемаЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
									ГрафСхемаЭлемент.УстановитьДействие("Выбор", "ГрафСхемаВыбор_Подключаемый");
								КонецЕсли;
								ЭтаФорма[ГрафСхемаНаименованиеРеквизита] = ГрафСхема;
								// Скроем табличный документ.
								ИмяЭлементаТабДок = ИмяОкна + "_Окно";
								Если Элементы.Найти(ИмяЭлементаТабДок) <> Неопределено Тогда
									Элементы[ИмяЭлементаТабДок].Видимость = Ложь;
								Иначе
									// Нет такого элемента. Не скрываем.
								КонецЕсли;
							Иначе
								ТекстСообщения = НСтр("ru = 'Неизвестный вариант отображения карты: %Схема%'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Схема%", Строка(ГрафСхема));
								ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							КонецЕсли;
						КонецЕсли;
						// Виджеты.
						Если СтруктураОтображения.ОтображатьВиджеты Тогда
							// Получим количество колонок.
							Если ЗначениеЗаполнено(ВыборкаОтчетов.КоличествоКолонокВиджетов) Тогда
								Делитель = ВыборкаОтчетов.КоличествоКолонокВиджетов;
							Иначе
								Делитель = 3;		// По умолчанию в 3 колонки;
							КонецЕсли;
							// Добавляем колонки.
							ИдентификаторНовойГруппы = СгенерироватьСтроковыйИдентификатор();
							ГруппаГоризонтальная = ДобавитьГруппуЭлементов("ГруппаМонитораГоризонтальная_", Элементы[ИмяОкнаКолонки], ИдентификаторНовойГруппы, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
							МассивКолонок = Новый Массив;
							Для Счетчик = 1 По Делитель Цикл
								ИдентификаторНовойГруппы = СгенерироватьСтроковыйИдентификатор();
								ИмяНовойГруппы = "ГруппаКолонка" + Строка(Счетчик) + "_";
								ГруппаВертикальная = ДобавитьГруппуЭлементов(ИмяНовойГруппы, ГруппаГоризонтальная, ИдентификаторНовойГруппы, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
								ГруппаВертикальная.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх;
								МассивКолонок.Добавить(ГруппаВертикальная);
							КонецЦикла;
							// Добавляем группы показателей (виджеты) в колонки.
							ТаблицаВиджетов = ОбщегоНазначенияСерверУХ.СформироватьПустуюТаблицуПоДереву(ВыводимыйДокумент);
							ВыделитьПоказателиВДереве(ВыводимыйДокумент, ТаблицаВиджетов, ИмяОкна);
							ВывестиОбластьВиджетов(ИмяОкна, ТаблицаВиджетов, Делитель, ВыборкаОтчетов.СкрыватьЛоготипПоказателей, МассивКолонок);
						Иначе
							// Не требуется отображать виджеты.
						КонецЕсли;
						// Диаграмма.
						Если СтруктураОтображения.ОтображатьДиаграмму Тогда
							ТаблицаВиджетов = ОбщегоНазначенияСерверУХ.СформироватьПустуюТаблицуПоДереву(ВыводимыйДокумент);
							ВыделитьПоказателиВДереве(ВыводимыйДокумент, ТаблицаВиджетов, ИмяОкна);
							ВывестиОбластьДиаграмма(ИмяОкна, ТаблицаВиджетов, Элементы[ИмяОкна], ВыборкаОтчетов.УниверсальныйОтчет, ВыборкаОтчетов.ИдентификаторОбласти);
						Иначе
							// Не отображаем диаграмму.
						КонецЕсли;
					Иначе
						НайденныйЭлемент = СоответствиеИменИОбъектовСТ.НайтиПоЗначению(ИмяОкна);
						Если НайденныйЭлемент <> Неопределено Тогда
							ПредставлениеНайденногоЭлемента = НайденныйЭлемент.Представление;
							ИмяТаблицыФормы = СтрЗаменить(ПредставлениеНайденногоЭлемента, "_Окно", "");
							ЭтаФорма[ИмяТаблицыФормы] = ВыводимыйДокумент;
						Иначе	
							ЕстьРеквизитСИменемФормы = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ИмяОкна);
							Если ЕстьРеквизитСИменемФормы Тогда
								ЭтаФорма[ИмяОкна] = ВыводимыйДокумент; 		
							Иначе
								// Реквизит не найден. Не заполняем.
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			ПутьКТаблицеОткрытыхОтчетов = ПоместитьВоВременноеХранилище(ОткрытыеОтчеты, УникальныйИдентификатор);
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗависимыхОбластей Цикл
		ЗаголовокЗависимойОбласти = НСтр("ru = 'Зависимая область области %ИмяОбласти%'");
		ЗаголовокЗависимойОбласти = СтрЗаменить(ЗаголовокЗависимойОбласти, "%ИмяОбласти%", Строка(СоответствиеИменОбластей[ЭлементСоответствия.Значение]));
		ЭтаФорма[ЭлементСоответствия.Ключ] = ЗаголовокЗависимойОбласти;
	КонецЦикла;
	
	Если ИспользуетсяСводнаяТаблица Тогда
		СводнаяТаблицаУХ.СоздатьКомандыСводнойТаблицы(ЭтаФорма);
		ЗаполнитьВариантыДиаграммы();
	КонецЕсли;	
КонецПроцедуры		// СформироватьИВывестиОткрытыеОтчеты()

&НаСервере
Процедура ВывестиОтчеты()
	
	//Перем ДанныеРасшифровки;
	Перем ВыводимыйДокумент;
	//Перем ИспользуетсяОтчет;
	//Перем ИмяОкна;
	
	ПрефиксГрафСхема = "ГрафСхема_";
	//Заполним отборы компоновщика настройки из реквизитов формы отчета.
	
	ИсходныеНастройкиОтбора = КомпоновщикНастроек.ПолучитьНастройки();
	ДополнитьНастройкиКомпоновщикаНастройкамиПанели(КомпоновщикНастроек.Настройки);
	
	ОткрытыеОтчеты = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов) Тогда
		
		ОткрытыеОтчеты = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
		УдалитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
		
	КонецЕсли;

	Если ТипЗнч(ОткрытыеОтчеты) <> Тип("ТаблицаЗначений") Тогда
		// Отчёты не сформированы, либо сформированы в неизвестном варианте. Сформируем снова.
		СформироватьИВывестиОткрытыеОтчеты(ВыводимыйДокумент, ПрефиксГрафСхема);
	Иначе
		// Открытые отчеты сформированы ранее и представлены в виде таблицы значений. 
		ВывестиОтчетыВВидеТаблицыЗначений(ОткрытыеОтчеты, ВыводимыйДокумент, ПрефиксГрафСхема);
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(ИсходныеНастройкиОтбора);
	СчитатьНастройкиПоказателей();
	
КонецПроцедуры

// Возвращает структуру, содержащую Идентификатор, Показатель и ИмяОкна
// из таблицы ТаблицаПоказателей по идентифкатору элемента ИдентификаторЭлементаВход.
&НаСервере
Функция ПолучитьСтруктуруТаблицыПоказателей(ИдентификаторЭлементаВход)
	РезультатФункции = Новый Структура;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторПоказателя", ИдентификаторЭлементаВход);
	НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		РезультатФункции.Вставить("Показатель", ТекНайденныеСтроки.Показатель);
		РезультатФункции.Вставить("ИдентификаторПоказателя", ТекНайденныеСтроки.ИдентификаторПоказателя);
		РезультатФункции.Вставить("ИмяОкна", ТекНайденныеСтроки.ИмяОкна);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Добавляет в массив расшифровок МассивРасшифровокВход даты начала и конца периода отчета
// ПериодОтчетаВход. Когда ПериодОтчетаВход не заполнен - добавляет текущие даты.
&НаСервереБезКонтекста
Процедура ДобавитьДатыПериодаОтчетаВМассивРасшифровок(ПериодОтчетаВход, МассивРасшифровокВход)
	Если ЗначениеЗаполнено(ПериодОтчетаВход) Тогда
		// Дата начала периода отчета.
		СтруктураДаты = Новый Структура;
		СтруктураДаты.Вставить("Поле", "ДатаНачалаПериодаОтчета");
		СтруктураДаты.Вставить("Иерархия", Ложь);
		СтруктураДаты.Вставить("Значение", ПериодОтчетаВход.ДатаНачала);
		МассивРасшифровокВход.Добавить(СтруктураДаты);
		// Дата конца периода отчета.
		СтруктураДаты = Новый Структура;
		СтруктураДаты.Вставить("Поле", "ДатаОкончанияПериодаОтчета");
		СтруктураДаты.Вставить("Иерархия", Ложь);
		СтруктураДаты.Вставить("Значение", ПериодОтчетаВход.ДатаОкончания);
		МассивРасшифровокВход.Добавить(СтруктураДаты);
	Иначе
		// Дата начала периода отчета.
		СтруктураДаты = Новый Структура;
		СтруктураДаты.Вставить("Поле", "ДатаНачалаПериодаОтчета");
		СтруктураДаты.Вставить("Иерархия", Ложь);
		СтруктураДаты.Вставить("Значение", ТекущаяДатаСеанса());
		МассивРасшифровокВход.Добавить(СтруктураДаты);
		// Дата конца периода отчета.
		СтруктураДаты = Новый Структура;
		СтруктураДаты.Вставить("Поле", "ДатаОкончанияПериодаОтчета");
		СтруктураДаты.Вставить("Иерархия", Ложь);
		СтруктураДаты.Вставить("Значение", ТекущаяДатаСеанса());
		МассивРасшифровокВход.Добавить(СтруктураДаты);
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру, содержащую выранные пользователем отборы в шапке формы.
&НаСервере
Функция СформироватьСтруктуруОтборов()
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОтборПоОрганизации",					 ОтборПоОрганизации);
	РезультатФункции.Вставить("ОтборПоВалюте",						 ОтборПоВалюте);
	РезультатФункции.Вставить("ПериодПланированияОтборНачало",		 ПериодПланированияОтборНачало);
	РезультатФункции.Вставить("ПериодПланированияОтборОкончание",	 ПериодПланированияОтборОкончание);
	РезультатФункции.Вставить("ОтборПоСценарию",					 ОтборПоСценарию);
	РезультатФункции.Вставить("ОтборПоПроекту",						 ОтборПоПроекту);
	Возврат РезультатФункции;
КонецФункции

// Инициализирует зависимые области значениями по умолчанию (например, первым показателем
// из монитора ключевых показателей).
&НаСервере
Процедура ОбновитьЗависимыеОбластиПоУмолчанию()
	Если ЭтоАдресВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов) Тогда
		ТаблицаОтчетов = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
		// Получим зависимые области.
		Для Каждого ТекТаблицаОтчетов Из ТаблицаОтчетов Цикл
			Если ЗначениеЗаполнено(ТекТаблицаОтчетов.РасшифровываемаяОбласть) Тогда
				// Получим главные области от текущей зависимой.
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИдентификаторОбласти", ТекТаблицаОтчетов.РасшифровываемаяОбласть);
				НайденныеСтроки = ТаблицаОтчетов.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
					ТекОтчет = ТекНайденныеСтроки.УниверсальныйОтчет; 
					Если ТипЗнч(ТекОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
						Если ТекОтчет.ВидПроизвольногоОтчета = 1 Тогда			// 1 - монитор ключевых показателей.
							// Для монитора ключевых показателей инициализируем первым показателем.
							Если ТекОтчет.ИсточникиДанных.Количество() >0 Тогда
								ПерваяСтрокаИсточникиДанных = ТекОтчет.ИсточникиДанных[0];
								ТекПоказатель = ПерваяСтрокаИсточникиДанных.ИсточникДанных;
								ИмяОкна = ТекНайденныеСтроки.ИмяОкна;
								ИмяОперанда = "ФактическоеЗначениеТекущегоПериода";
								Контекст = ПолучитьКонтекстРасчета(ИмяОкна, ИмяОперанда, ПутьКТаблицеОткрытыхОтчетов, СформироватьСтруктуруОтборов());
								ОбновитьПодчиненныеОтчеты(ИмяОкна, , , ТекПоказатель, Контекст);
							Иначе
								Продолжить;		// Пустой монитор.
							КонецЕсли;
						Иначе
							Продолжить;			// Для прочих вариантов аналитических отчетов не производим инициализацию.
						КонецЕсли;
					Иначе
						Продолжить;			// Для прочих вариантов главных областей не производим инициализацию.
					КонецЕсли;
				КонецЦикла;
			Иначе
				Продолжить;				// Данная область не является зависимой. Не инициализируем её.
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить адрес таблицы открытых отчетов'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Сохраняет в регистр НастройкиАналитическихПанелейПользователей текущие 
// значения СтруктураОтборовВход отборов панели ПанельВход.
&НаСервереБезКонтекста
Процедура СохранитьОтборыПоТекущемуПользователю(СтруктураОтборовВход, ПанельВход)
	Если ЗначениеЗаполнено(ПанельВход) Тогда
		Если ТипЗнч(СтруктураОтборовВход) = Тип("Структура") Тогда
			ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
			РегистрыСведений.НастройкиАналитическихПанелейПользователей.ЗаписатьНастройкуАналитическойПанели(ТекПользователь, ПанельВход, СтруктураОтборовВход);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант отборов %Отбор%. Сохранение настроек не удалось.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отбор%", Строка(СтруктураОтборовВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Новая панель. Не сохраняем отборы.
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру значений отборов на форме.
&НаКлиенте
Функция СчитатьСтруктуруТекущихОтборов()
	РезультатФункции = Новый Структура;
	РезультатФункции = БизнесАнализКлиентСерверУХ.ИнициализироватьСтруктуруОтборовАналитическойПанели();
	РезультатФункции.Вставить("ПериодОтчета", ПериодПланированияОтборОкончание);
	РезультатФункции.Вставить("ПериодОтчетаНачало", ПериодПланированияОтборНачало);
	РезультатФункции.Вставить("Организация", ОтборПоОрганизации);
	РезультатФункции.Вставить("Сценарий", ОтборПоСценарию);
	РезультатФункции.Вставить("Валюта", ОтборПоВалюте);
	РезультатФункции.Вставить("Проект", ОтборПоПроекту);
	Возврат РезультатФункции;
КонецФункции

// Считывает значения отборов на форме и записывает их для текущего пользователя
// в регистр НастройкиАналитическихПанелейПользователей.
&НаКлиенте
Процедура ЗаписатьТекущиеНастройкиОтборов()
 	СтруктураОтборов = СчитатьСтруктуруТекущихОтборов();
	СохранитьОтборыПоТекущемуПользователю(СтруктураОтборов, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ГрафСхемаВыбор_Подключаемый(Элемент) Экспорт
	ТекЭлемент = Элемент.ТекущийЭлемент;
	Если ТекЭлемент <> Неопределено Тогда
		ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
		ВыбранныйЭлемент = ПолучитьВыбранныйЭлементГрафическойСхемы(ИмяЭлемента);
		Если ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
			Если ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.Цели") Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Цель", ВыбранныйЭлемент);
				ОткрытьФорму("Отчет.Инициативы.Форма.ФормаОтчета", СтруктураПараметров);
			ИначеЕсли ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
				ИмяОкна = Элемент.Родитель.Имя;
				ИмяОперанда	 = "ФактическоеЗначениеТекущегоПериода";
				Контекст = ПолучитьКонтекстРасчета(ИмяОкна, ИмяОперанда, ПутьКТаблицеОткрытыхОтчетов, СформироватьСтруктуруОтборов());
				БизнесАнализКлиентУХ.ВывестиОтчетПоДинамикеМонитора(ВыбранныйЭлемент, Контекст);
			Иначе	
				ПоказатьЗначение(, ВыбранныйЭлемент);
			КонецЕсли;
		Иначе
			// Не удалось получить элемент. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Элемент не выбран. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Выставляет для диаграммы в окне ИмяОкнаВход новый тип диаграммы ТипДиаграммыВход.
&НаКлиенте
Процедура ИзменитьТипДиаграммыВОкне(ИмяОкнаВход, ТипДиаграммыВход)
	РеквизитДиаграмма = ЭтаФорма["ОбластьДиаграмма_" + ИмяОкнаВход];
	ПреобразованныйТипДиаграммы = БизнесАнализКлиентСерверУХ.ПреобразоватьТипДиаграммы(ТипДиаграммыВход, ТипДиаграммы.График);
	РеквизитДиаграмма.ТипДиаграммы = ПреобразованныйТипДиаграммы;
КонецПроцедуры		// ИзменитьТипДиаграммыВОкне()

&НаКлиенте
Процедура ПослеВыбораИзМеню_ОбластьДиаграмма(ВыбранныйЭлемент, Параметры) Экспорт
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		РезультатВыбора = ВыбранныйЭлемент.Значение;
		ЗначениеДиаграммы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ЗначениеДиаграммы", Неопределено);	
		ИмяОкна = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяОкна", "");
		Если ТипЗнч(ЗначениеДиаграммы) = Тип("ЗначениеДиаграммы") Тогда
			// Выбранные значения.
			ТекСерия = ЗначениеДиаграммы.Серия;
			ТекТочка = ЗначениеДиаграммы.Точка;
			ЗначениеСерии = ТекСерия.Значение;
			ЗначениеТочки = ТекТочка.Значение;
			// Контекст отчета.
			Контекст = Новый Структура;
			Контекст.Вставить("АнализЧувствительности",		 Ложь);
			Контекст.Вставить("БазовыйПериод",				 ЗначениеТочки);
			Контекст.Вставить("БазовыйСценарий",			 ОтборПоСценарию);
			Контекст.Вставить("Организация",				 ОтборПоОрганизации);	
			Контекст.Вставить("ОсновнаяВалюта",				 ОтборПоВалюте);
			Контекст.Вставить("ОтборПоПроекту",				 ОтборПоПроекту); 	
			Контекст.Вставить("ПериодОтчета",				 ЗначениеТочки);
			Контекст.Вставить("ПериодОтборНачало",			 ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ЗначениеТочки, "ДатаНачала"));			// Для расшифровки по периоду.
			Контекст.Вставить("ПериодОтборОкончание",		 ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ЗначениеТочки, "ДатаОкончания"));			// Для расшифровки по периоду.
			Контекст.Вставить("Сценарий",					 ОтборПоСценарию);
			Контекст.Вставить("УправляемыйРежим",			 Истина);
			Контекст.Вставить("ЧтениеНеактуальныхЗаписей",	 Истина);
			Если РезультатВыбора = "Структура" Тогда
				// Данные расшифровки по контексту.
				АдресТаблицыРасшифровки = ПолучитьАдресТаблицыРасшифровкиПоАналитикам_Сервер(ЗначениеСерии, Контекст);
				// Открытие формы аналитики.
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("АдресКонтекста",	 ПоместитьВоВременноеХранилище(Контекст));
				ПараметрыФормы.Вставить("АдресТаблицы",		 АдресТаблицыРасшифровки);
				ПараметрыФормы.Вставить("ПериодОтчета",		 ЗначениеТочки);
				ПараметрыФормы.Вставить("Показатель",		 ЗначениеСерии);
				ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаРасшифровкиПоАналитикам", ПараметрыФормы);	
			ИначеЕсли РезультатВыбора = "ОбновитьЗависимыеОбласти" Тогда
				// Зависимые области.
				ИспользуемаяИБ	 = ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка");
				Контекст.Вставить("ВнешняяИБ", ИспользуемаяИБ);
				Контекст.Вставить("ОтборПоПроекту", ОтборПоПроекту);
				ОбновитьПодчиненныеОтчеты(ИмяОкна, Неопределено, Неопределено, ЗначениеСерии, Контекст, ЭтаФорма[ИмяОкна + "_ПлановыйСценарий"]);
			ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("ФиксированнаяСтруктура") Тогда
				ТипОбъектаМетаданных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ТипОбъектаМетаданных", "");
				Если ЗначениеЗаполнено(ТипОбъектаМетаданных) Тогда
					// Расшифровка объектом метаданных.
					НаименованиеОбъектаМетаданных	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "НаименованиеОбъектаМетаданных", "");
					ФормаРасшифровки				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ФормаРасшифровки", "");

					Показатель = Параметры.ЗначениеДиаграммы.Серия.Значение;
					СтруктураПараметров = ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, ПутьКТаблицеОткрытыхОтчетов, ИмяОкна, Контекст, , Показатель);
					БизнесАнализКлиентУХ.ОтобразитьРаскрытиеОбъектомИнформационнойБазы(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, СтруктураПараметров);
				Иначе				
					// Произвольная расшифровка аналитическим отчетом.
					МассивДоступныхРасшифровок = Новый Массив;
					Для Каждого ЭлементКонтекста Из Контекст Цикл
						СтруктураДоступныхРасшифровок = Новый Структура;
						СтруктураДоступныхРасшифровок.Вставить("Поле",		 ЭлементКонтекста.Ключ);
						СтруктураДоступныхРасшифровок.Вставить("Иерархия",	 Ложь);
						СтруктураДоступныхРасшифровок.Вставить("Значение",	 ЭлементКонтекста.Значение);
						МассивДоступныхРасшифровок.Добавить(СтруктураДоступныхРасшифровок);
					КонецЦикла;
					// Дополнительно добавим дату начала и дату окончания периода отчета.
					ДобавитьДатыПериодаОтчетаВМассивРасшифровок(Контекст.ПериодОтчета, МассивДоступныхРасшифровок);
					АдресМассивРасшифровок = ПоместитьВоВременноеХранилище(МассивДоступныхРасшифровок, УникальныйИдентификатор);
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Ключ", РезультатВыбора.Отчет); 
					ПараметрыФормы.Вставить("ЭтоРасшифровка", Истина);
					ПараметрыФормы.Вставить("СохраненнаяНастройка", РезультатВыбора.СохраненнаяНастройка);
					ПараметрыФормы.Вставить("ФормироватьПриОткрытии", Истина);
					ПараметрыФормы.Вставить("АдресМассивРасшифровок", АдресМассивРасшифровок);
					ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы);
				КонецЕсли;
			Иначе
				// Неизвестный вариант. Не осуществляем расшифровку.
			КонецЕсли;
		Иначе
			// Неизвестная расшифровка. Не осуществляем расшифровку.
		КонецЕсли;
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ПослеВыбораИзМеню_ОбластьДиаграмма()

&НаКлиенте
Процедура ОбластьДиаграммаВыбор_Подключаемый(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка) Экспорт
	ТекСерия = ЗначениеДиаграммы.Серия;
	ТекТочка = ЗначениеДиаграммы.Точка;
	ЗначениеСерии = ТекСерия.Значение;
	ЗначениеТочки = ТекТочка.Значение;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначениеДиаграммы", ЗначениеДиаграммы);
	СписокМеню = Новый СписокЗначений;
	СписокМеню.Добавить("ОбновитьЗависимыеОбласти", НСтр("ru = 'Обновить зависимые области'"), , БиблиотекаКартинок.ВводНаОсновании);
	СписокМеню.Добавить("Структура", НСтр("ru = 'Структура'"), , БиблиотекаКартинок.Структура);
	Если ТипЗнч(ЗначениеСерии) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
		// Добавим расшифровку объектом системы.
		Если Лев(Элемент.Имя, 17) = "ОбластьДиаграмма_" Тогда
			ИмяОкнаТек = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) -17);
			СтруктураПараметров.Вставить("ИмяОкна", ИмяОкнаТек);
			ВернутьСписокОтчетовРасшифровок(СписокМеню, ПутьКТаблицеОткрытыхОтчетов, ИмяОкнаТек, ЗначениеСерии);
			ДобавитьРасшифровкиОбъектаТекущегоОтчета(ПутьКТаблицеОткрытыхОтчетов, СписокМеню, ИмяОкнаТек, ЗначениеСерии);
		Иначе
			// Не удалось выделить имя окна.
		КонецЕсли;
	Иначе
		// Не монитор МКП. Не добавлем расшифровку МКП.
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню_ОбластьДиаграмма", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
КонецПроцедуры		// ОбластьДиаграммаВыбор_Подключаемый()

&НаКлиенте
Процедура ОбработчикСменаТипаДиаграммы(ЭлементВход, НовыйТипДиаграммыВход)
	ИмяЭлемента = ЭлементВход.Имя;
	Если СтрДлина(ИмяЭлемента) >= 18 Тогда
		ИмяОкна = Прав(ИмяЭлемента, 18);
		НовыйТипДиаграммы = НовыйТипДиаграммыВход;
		ИзменитьТипДиаграммыВОкне(ИмяОкна, НовыйТипДиаграммы);
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не удалось изменить тип диаграммы %Элемент%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ЭлементВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ОбработчикСменаТипаДиаграммы()

&НаКлиенте
Процедура СменаТипаДиграммы_График_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.График"));
КонецПроцедуры		// СменаТипаДиграммы_График_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Гистограмма_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Гистограмма"));
КонецПроцедуры		// СменаТипаДиграммы_Гистограмма_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Водопад_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Водопад"));
КонецПроцедуры		// СменаТипаДиграммы_Водопад_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Воронка_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Воронка"));
КонецПроцедуры		// СменаТипаДиграммы_Воронка_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_ГистограммаГоризонтальная_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГистограммаГоризонтальная"));
КонецПроцедуры		// СменаТипаДиграммы_ГистограммаГоризонтальная_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_ГистограммаОбъемная_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГистограммаОбъемная"));
КонецПроцедуры		// СменаТипаДиграммы_ГистограммаОбъемная_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_ГрафикПоШагам_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГрафикПоШагам"));
КонецПроцедуры		// СменаТипаДиграммы_ГрафикПоШагам_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_ГрафикСОбластями_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГрафикСОбластями"));
КонецПроцедуры		// СменаТипаДиграммы_ГрафикСОбластями_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Измерительная_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Измерительная"));
КонецПроцедуры		// СменаТипаДиграммы_Измерительная_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Изометрическая_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Изометрическая"));
КонецПроцедуры		// СменаТипаДиграммы_Изометрическая_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Круговая_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Круговая"));
КонецПроцедуры		// СменаТипаДиграммы_Круговая_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_КруговаяОбъемная_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.КруговаяОбъемная"));
КонецПроцедуры		// СменаТипаДиграммы_КруговаяОбъемная_Подключаемый()

&НаКлиенте
Процедура СменаТипаДиграммы_Точечная_Подключаемый(Команда) Экспорт
	ОбработчикСменаТипаДиаграммы(Команда, ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Точечная"));
КонецПроцедуры		// СменаТипаДиграммы_Точечная_Подключаемый()

&НаКлиенте
Процедура ЗависимаяОбластьСменаСортировки_Возрастание_Подключаемый(Команда) Экспорт
	ИмяЭлемента = Команда.Имя;
	Если СтрДлина(ИмяЭлемента) >= 15 Тогда
		ИмяОкна = Прав(ИмяЭлемента, 15);
		РеквизитДиаграмма = ЭтаФорма[ИмяОкна];
		ЭлементыКомпоновки = ЭтаФорма.КомпоновщикНастроек.Настройки.Порядок.Элементы;
		НовыйЭлемент = ЭлементыКомпоновки.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		//НовыйТипДиаграммы = НовыйТипДиаграммыВход;
		//ИзменитьТипДиаграммыВОкне(ИмяОкна, НовыйТипДиаграммы);
	Иначе	
		//ТекстСообщения = НСтр("ru = 'Не удалось изменить тип диаграммы %Элемент%'");
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(Команда));
		//ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры		// ЗависимаяОбластьСменаСортировки_Возрастание_Подключаемый()

&НаКлиенте
Процедура РасшифроватьЭлемент(Элемент, ИдентификаторЭлементаВход, ИмяОперандаВход = "")
	СтруктураТаблицыПоказателей = ПолучитьСтруктуруТаблицыПоказателей(ИдентификаторЭлементаВход);
	Если СтруктураТаблицыПоказателей.Количество() > 0 Тогда
		ИмяОкна			 = СтруктураТаблицыПоказателей.ИмяОкна;
		Если НЕ ЗначениеЗаполнено(ИмяОперандаВход) Тогда
			ИмяОперанда	 = "ФактическоеЗначениеТекущегоПериода";
		Иначе
			ИмяОперанда	 = ИмяОперандаВход;
		КонецЕсли;
		Контекст		 = ПолучитьКонтекстРасчета(ИмяОкна, ИмяОперанда, ПутьКТаблицеОткрытыхОтчетов, СформироватьСтруктуруОтборов());
		Показатель		 = СтруктураТаблицыПоказателей.Показатель;
		Операнд			 = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
		ИспользуемаяИБ	 = ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка");
		Если НЕ ЗначениеЗаполнено(Контекст) Тогда
			Возврат;
		КонецЕсли;
		РасшифроватьПоказательМКП(Элемент, ИмяОкна, Показатель, ИмяОперанда, Операнд, ИспользуемаяИБ, Контекст);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить расшифровку для элемента %Элемент%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(Элемент));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НажатиеПредставлениеЗначение_Подключаемый(Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	Если СтрДлина(ИмяЭлемента) >= 36 Тогда
		ИдентификаторЭлемента = Прав(ИмяЭлемента, 36);
		РасшифроватьЭлемент(Элемент, ИдентификаторЭлемента, "ФактическоеЗначениеТекущегоПериода");
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не удалось расшифровать элемент %Элемент%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(Элемент));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НажатиеПредставлениеПредЗначение_Подключаемый(Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	Если СтрДлина(ИмяЭлемента) >= 36 Тогда
		ИдентификаторЭлемента = Прав(ИмяЭлемента, 36);
		РасшифроватьЭлемент(Элемент, ИдентификаторЭлемента, "ФактическоеЗначениеПредыдущегоПериода");
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не удалось расшифровать элемент %Элемент%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(Элемент));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НажатиеПредставлениеПлановоеЗначение_Подключаемый(Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	Если СтрДлина(ИмяЭлемента) >= 36 Тогда
		ИдентификаторЭлемента = Прав(ИмяЭлемента, 36);
		РасшифроватьЭлемент(Элемент, ИдентификаторЭлемента, "ПлановоеЗначение");
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не удалось расшифровать элемент %Элемент%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(Элемент));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Функция ВернутьТаблицуДляРасшифровки(Показатель, Контекст, ИмяОперанда = "")
	
	АдресТаблицПоказателей = ТиповыеОтчетыУХ.ВернутьТаблицыПоказателяМонитораКлючевыхПоказателей(Показатель, Контекст, ИмяОперанда);
	Возврат ТиповыеОтчетыУХ.ВывестиОтчетПоМонитору(Показатель, АдресТаблицПоказателей);
	
КонецФункции

// Серверная обёртка для функции ПолучитьАдресТаблицыРасшифровкиПоАналитикам.
&НаСервереБезКонтекста
Функция ПолучитьАдресТаблицыРасшифровкиПоАналитикам_Сервер(Показатель, Контекст, ИсключатьНезначимыеВход = Ложь)
	РезультатФункции = Справочники.ПанелиОтчетов.ПолучитьАдресТаблицыРасшифровкиПоАналитикам(Показатель, Контекст, Истина);
	Возврат РезультатФункции;
КонецФункции

// Отображает отчет расшифровки по аналитикам для показателя Показатель и внешним
// данным Контекст.
&НаКлиенте
Процедура ВывестиОтчетРасшифровкиПоАналитике(Показатель, Контекст)
	АдресТаблицыРасшифровки = ПолучитьАдресТаблицыРасшифровкиПоАналитикам_Сервер(Показатель, Контекст, Истина);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресТаблицы", АдресТаблицыРасшифровки);
	ПараметрыФормы.Вставить("Показатель", Показатель);
	ПараметрыФормы.Вставить("ПериодОтчета", Контекст.ПериодОтчета);
	ПараметрыФормы.Вставить("АдресКонтекста", ПоместитьВоВременноеХранилище(Контекст));
	ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаРасшифровкиПоАналитикам", ПараметрыФормы);	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНастройкиКомпоновщикаНастройкамиПанели(НастройкиОтбора)
	
	Если ИспользоватьОтборПоОрганизации Тогда
		НовыйОтбор = ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиОтбора.Отбор, Новый ПолеКомпоновкиДанных("Организация"), ОтборПоОрганизации);
		ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиОтбора, "Организация", ОтборПоОрганизации);
	КонецЕсли;
	
	Если ИспользоватьОтборПоВалюте Тогда
		НовыйОтбор = ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиОтбора.Отбор, Новый ПолеКомпоновкиДанных("ОсновнаяВалюта"), ОтборПоВалюте);
		ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиОтбора, "ОсновнаяВалюта", ОтборПоВалюте);
	КонецЕсли;
	
	Если ИспользоватьОтборПоСценарию Тогда
		НовыйОтбор = ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиОтбора.Отбор, Новый ПолеКомпоновкиДанных("Сценарий"), ОтборПоСценарию);
		ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиОтбора, "Сценарий", ОтборПоСценарию);
	КонецЕсли;
	
	Если ЗначениеЗАполнено(ПериодПланированияОтборОкончание) Тогда
		НовыйОтбор = ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиОтбора.Отбор, Новый ПолеКомпоновкиДанных("ПериодОтчета"), ПериодПланированияОтборОкончание);
		ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиОтбора, "ПериодОтчета", ПериодПланированияОтборОкончание);
	КонецЕсли;	
	
	Если ЗначениеЗАполнено(ПериодПланированияОтборОкончание) Тогда
		НовыйОтбор = ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиОтбора.Отбор, Новый ПолеКомпоновкиДанных("ПериодОтчетаОкончание"), ПериодПланированияОтборОкончание);
		ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиОтбора, "ПериодОтчетаОкончание", ПериодПланированияОтборОкончание);
	КонецЕсли;	

	Если ЗначениеЗАполнено(ПериодПланированияОтборНачало) Тогда
		НовыйОтбор = ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиОтбора.Отбор, Новый ПолеКомпоновкиДанных("ПериодНачало"), ПериодПланированияОтборНачало);
		ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиОтбора, "ПериодНачало", ПериодПланированияОтборНачало);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьОперандПоказателя(ИмяПараметра, Показатель)
	
	Если ИмяПараметра = "ФактическоеЗначениеТекущегоПериода" Тогда
		Возврат Показатель["ИсточникЗначенияТекущегоПериода"];
	ИначеЕсли ИмяПараметра = "ФактическоеЗначениеПредыдущегоПериода" Тогда
		Возврат Показатель["ИсточникЗначенияПериодаСравнения"];
	ИначеЕсли ИмяПараметра = "ПлановоеЗначение" Тогда
		Возврат Показатель["ИсточникПлановогоЗначения"];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает копию структуры настроек СтруктураФильтровВход, куда перенесены настройки
// из сохранённой настройки СохраненнаяНастройкаВход.
&НаСервере
Функция ЗагрузитьНастройкиФильтраИзСохраненнойНастройки(СтруктураФильтровВход, СохраненнаяНастройкаВход)
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураФильтровВход);
	Если ЗначениеЗаполнено(СохраненнаяНастройкаВход) Тогда
		СохраненныеНастройкиХранилище = СохраненнаяНастройкаВход.ХранилищеНастроек;
		Если ТипЗнч(СохраненныеНастройкиХранилище) = Тип("ХранилищеЗначения") Тогда
			СохраненныеНастройкиСтруктура = СохраненныеНастройкиХранилище.Получить();
			Если ТипЗнч(СохраненныеНастройкиСтруктура) = Тип("Структура") Тогда
				Если СохраненныеНастройкиСтруктура.Свойство("ЗначенияНастроекПанелиОтчета") Тогда
					НастройкиМонитораЭффективности = СохраненныеНастройкиСтруктура.ЗначенияНастроекПанелиОтчета.НастройкиМонитораЭффективности;
					Если ЗначениеЗаполнено(НастройкиМонитораЭффективности.СценарийФакт) Тогда
						РезультатФункции.Фильтр_Сценарии = НастройкиМонитораЭффективности.СценарийФакт;
						РезультатФункции.Сценарии = НастройкиМонитораЭффективности.СценарийФакт;
					Иначе
						// Не изменяем сценарий.
					КонецЕсли;
					Если ЗначениеЗаполнено(НастройкиМонитораЭффективности.ОтборВалюта) Тогда
						РезультатФункции.Фильтр_Валюты = НастройкиМонитораЭффективности.ОтборВалюта;
						РезультатФункции.Валюты = НастройкиМонитораЭффективности.ОтборВалюта;
					Иначе
						// Не изменяем валюту.
					КонецЕсли;
					Если ЗначениеЗаполнено(НастройкиМонитораЭффективности.ОтборОрганизация) Тогда
						РезультатФункции.Фильтр_Организации = НастройкиМонитораЭффективности.ОтборОрганизация;
						РезультатФункции.Организации = НастройкиМонитораЭффективности.ОтборОрганизация;
					Иначе
						// Не изменяем организацию.
					КонецЕсли;
				Иначе
					// Нет поля ЗначенияНастроекПанелиОтчета.
				КонецЕсли;
			Иначе
				// Неизвестный вариант значения в хранилище значений сохранённых настроек.
			КонецЕсли;
		Иначе
			// Нет хранилища значений в сохранённой настройке.
		КонецЕсли;	
	Иначе
		// Сохранённая настройка не задана.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Переносит используемые отборы из ЭлементыОтбораВход в структуру СтруктураОбщихФильтровВход. 
&НаСервере
Функция ПеренестиОбщиеОтборыВСтруктуруФильтров(СтруктураОбщихФильтровВход, ЭлементыОтбораВход)
	Для Каждого ТекЭлементы Из ЭлементыОтбораВход Цикл
		Если ТекЭлементы.Использование Тогда
			ТекПравоеЗначение = ТекЭлементы.ПравоеЗначение;
			Если ЗначениеЗаполнено(ТекПравоеЗначение) Тогда
				Если ТекЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сценарий") Тогда
					СтруктураОбщихФильтровВход.Фильтр_Сценарии			 = ТекПравоеЗначение;
					СтруктураОбщихФильтровВход.Сценарии					 = ТекПравоеЗначение;
				ИначеЕсли ТекЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Валюта") Тогда
					СтруктураОбщихФильтровВход.Фильтр_Валюты			 = ТекПравоеЗначение;
					СтруктураОбщихФильтровВход.Валюты					 = ТекПравоеЗначение;
				ИначеЕсли ТекЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
					СтруктураОбщихФильтровВход.Фильтр_Организации		 = ТекПравоеЗначение;
					СтруктураОбщихФильтровВход.Организации				 = ТекПравоеЗначение;
				ИначеЕсли ТекЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодОтчетаНачало") Тогда
					СтруктураОбщихФильтровВход.ГоризонтДатаНачала		 = ТекПравоеЗначение;
				ИначеЕсли ТекЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодОтчетаОкончание") Тогда
					СтруктураОбщихФильтровВход.ГоризонтДатаОкончания	 = ТекПравоеЗначение;
				ИначеЕсли ТекЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проект") Тогда
					СтруктураОбщихФильтровВход.Фильтр_Проекты			 = ТекПравоеЗначение;
					СтруктураОбщихФильтровВход.Проекты					 = ТекПравоеЗначение;
				Иначе
					// Неизвестное поле. Не переносим.
				КонецЕсли;
			Иначе
				// Пустой отбор. Не задействует.
			КонецЕсли;
		Иначе
			// Данный отбор не включен. Не добавляем в итоговую структуру.
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ВывестиОтчет(Знач УниверсальныйОтчет, Знач УникальныйИдентификатор, Знач НастройкиОтчета, Знач ОбщийОтбор, ВыводимыйДокумент, ИспользуетсяОтчет, ИмяОкна, ОбновитьДанные=Истина, ГрафСхемаВход = Неопределено)
	
	Перем ДанныеРасшифровки, URLСхемы, ВнешнийКонтекст, НастройкиКомпоновщика;
	
	Попытка
		Если ИспользуетсяОтчет Тогда
			ВыводимыйДокумент = Новый ТабличныйДокумент;
			Если  ТипЗнч(УниверсальныйОтчет)= Тип("СправочникСсылка.БланкиОтчетов") Тогда
				
				//Установить доп отборы.


				Если КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",ИмяОкна,Истина)).Количество()=1 Тогда
					Спсокиспользованных = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",ИмяОкна,Истина));
					ТекущийОбъектИмя = Спсокиспользованных[0].ИмяОбъекта;
					ст_ОбработкаОбъект = РеквизитФормыВЗначение(ТекущийОбъектИмя);
					

					СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(СТ_ОбработкаОбъект.АдресСтруктураФильтров);
					СтруктураОбщихФильтров = ПолучитьСтрукутуруОбщихФильтров(СтруктураФильтровИтог,ТекущийОбъектИмя);
					СтруктураОбщихФильтров = ЗагрузитьНастройкиФильтраИзСохраненнойНастройки(СтруктураОбщихФильтров, НастройкиОтчета);
					
					УстановитьЗначенияОтборовСТ(СТ_ОбработкаОбъект);
					СТ_ОбработкаОбъект.ВариантыДиаграммы = ВариантыДиаграммы;
					СТ_ОбработкаОбъект.ПолучитьИтоговыйМакет(ВыводимыйДокумент, УниверсальныйОтчет, , СтруктураОбщихФильтров,
					Истина,,ОбновитьДанные,СТ_ДополнительныеНастройки);
					

					ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъектИмя);

				Иначе	
					СпсокНеиспользованных = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",ИмяОкна,Ложь));
					
					ТекущийОбъектИмя =  СпсокНеиспользованных[0].ИмяОбъекта;
					СТ_ОбработкаОбъект = Обработки.СводнаяТаблица.Создать();
					СТ_ОбработкаОбъект.НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.Данные;
					СТ_ОбработкаОбъект.Периодичность = УниверсальныйОтчет.Периодичность;
					СТ_ОбработкаОбъект.ВидОтчета = УниверсальныйОтчет.Владелец;
					СТ_ОбработкаОбъект.ИерархияГруппировокСтрок = УниверсальныйОтчет.ИерархияГруппировокСтрок;
                    СТ_ОбработкаОбъект.ИерархияГруппировокКолонок = УниверсальныйОтчет.ИерархияГруппировокКолонок;
					СТ_ОбработкаОбъект.Масштаб = УниверсальныйОтчет.УровеньТочностиПоУмолчанию;
					СТ_ОбработкаОбъект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Основной;
					СТ_ОбработкаОбъект.ВариантыДиаграммы = ВариантыДиаграммы;
					СТ_ОбработкаОбъект.ИнициализироватьКонтекст(УниверсальныйОтчет);
					
					ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(СТ_ОбработкаОбъект.АдресТаблицИнтерфейса);
					СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(СТ_ОбработкаОбъект.АдресСтруктураФильтров);
					
					СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала",ПериодПланированияОтборНачало.ДатаНачала);
	                СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",ПериодПланированияОтборОкончание.ДатаНачала);

					СтруктураОбщихФильтров = ПолучитьСтрукутуруОбщихФильтров(СтруктураФильтровИтог,ТекущийОбъектИмя);
					// Получим настройки из общего отбора.
					ПеренестиОбщиеОтборыВСтруктуруФильтров(СтруктураОбщихФильтров, ОбщийОтбор.Отбор.Элементы);
					// Когда есть сохранённая настройка - возьмём данные оттуда.
					СтруктураОбщихФильтров = ЗагрузитьНастройкиФильтраИзСохраненнойНастройки(СтруктураОбщихФильтров, НастройкиОтчета);

					УстановитьЗначенияОтборовСТ(СТ_ОбработкаОбъект);
					
					СТ_ОбработкаОбъект.ПолучитьИтоговыйМакет(ВыводимыйДокумент, УниверсальныйОтчет, , СтруктураОбщихФильтров,
					Истина, , ОбновитьДанные, СТ_ДополнительныеНастройки);
					
					СпсокНеиспользованных[0].Использован = Истина;
					ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъектИмя);

				КонецЕсли;	
				

			ИначеЕсли (УниверсальныйОтчет)= Неопределено Тогда

				Если КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",ИмяОкна,Истина)).Количество()=1 Тогда
					Спсокиспользованных = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",ИмяОкна,Истина));
					ТекущийОбъектИмя = Спсокиспользованных[0].ИмяОбъекта;
					СТ_ОбработкаОбъект = РеквизитФормыВЗначение("СТ_Объект_Гант");
                    СТ_ОбработкаОбъект.Проект = ОтборПоПроекту;
					СТ_ОбработкаОбъект.ДатаНач = ОтборПоПериоду.ДатаНачала;
					СТ_ОбработкаОбъект.ДатаКон = ОтборПоПериоду.ДатаОкончания;
					ДанныеОбъекта = Новый Структура;
					ДанныеОбъекта.Вставить("Проект", ОтборПоПроекту);
					ВыводимыйДокумент = Новый ДиаграммаГанта;
					СТ_ОбработкаОбъект.СформироватьОтчетПоПоказателям(ВыводимыйДокумент, ДанныеОбъекта, ОтборПоСценарию);
					ЗначениеВреквизитФормы(ст_ОбработкаОбъект,"СТ_Объект_Гант");

				Иначе	
					СпсокНеиспользованных = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",ИмяОкна,Ложь));
					
					ТекущийОбъектИмя =  СпсокНеиспользованных[0].ИмяОбъекта;
					СТ_ОбработкаОбъект = Обработки.ДиаграммаГантаОперации.Создать();

					СпсокНеиспользованных[0].Использован = Истина;
					СТ_ОбработкаОбъект.Проект = ОтборПоПроекту;
					СТ_ОбработкаОбъект.ДатаНач = ПериодПланированияОтборНачало.ДатаНачала;
					СТ_ОбработкаОбъект.ДатаКон = ПериодПланированияОтборОкончание.ДатаНачала;
					ДанныеОбъекта = Новый Структура;
					ДанныеОбъекта.Вставить("Проект", ОтборПоПроекту);
					ВыводимыйДокумент = Новый ДиаграммаГанта;
					СТ_ОбработкаОбъект.СформироватьОтчетПоПоказателям(ВыводимыйДокумент, ДанныеОбъекта, ОтборПоСценарию);
					ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъектИмя);

				КонецЕсли;	
				
			Иначе
				Если УниверсальныйОтчет.ВидПроизвольногоОтчета = 1 Тогда
					Если ГрафСхемаВход <> Неопределено Тогда
						ГрафСхемаРезультат = Новый ГрафическаяСхема;
						Попытка
							// Выведем графическую схему карты показателей.
							ЛокальныеПараметры = Новый Структура("ПлановыйСценарий, СмещениеПредыдущегоПериода", ЭтаФорма[ИмяОкна + "_ПлановыйСценарий"], ЭтаФорма[ИмяОкна + "_Смещение"]);
							Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ВыводимыйДокумент, УниверсальныйОтчет, НастройкиОтчета, ДанныеРасшифровки, ОбщийОтбор, ЛокальныеПараметры, URLСхемы, ВнешнийКонтекст, ИмяОкна + "_", , , ГрафСхемаРезультат);
							ГрафСхемаВход = ГрафСхемаРезультат;
						Исключение
							ГрафСхемаВход = Неопределено;
							ТекстСообщения = НСтр("ru = 'Возникли ошибки при выводе карты целей: %ОписаниеОшибки%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						КонецПопытки;
					Иначе
						Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ВыводимыйДокумент, УниверсальныйОтчет, НастройкиОтчета, ДанныеРасшифровки, ОбщийОтбор, ЛокальныеПараметры, URLСхемы, ВнешнийКонтекст, ИмяОкна + "_");
					КонецЕсли;
				Иначе
					Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ВыводимыйДокумент, УниверсальныйОтчет, НастройкиОтчета, ДанныеРасшифровки, ОбщийОтбор, ЛокальныеПараметры, URLСхемы, ВнешнийКонтекст, , , НастройкиКомпоновщика);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТД = Новый ТабличныйДокумент;
			ВыводимыйДокумент = Новый Диаграмма;
			Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ТД, УниверсальныйОтчет, НастройкиОтчета, ДанныеРасшифровки, ОбщийОтбор, ,URLСхемы, , , НастройкиКомпоновщика);
			Если ТД.Рисунки.Количество() > 0 Тогда // Ошибка формирования отчета. Нет диаграмм.
				ВывестиДиаграммуОтдельно(ТД.Рисунки[0].Объект, ВыводимыйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
		СтруктураВывод = Новый Структура;
		СтруктураВывод.Вставить("URLСхемы",					 URLСхемы);
		СтруктураВывод.Вставить("ВнешнийКонтекст",			 ВнешнийКонтекст);
		СтруктураВывод.Вставить("ДанныеРасшифровки",		 ХранилищеДанныеРасшифровки);
		СтруктураВывод.Вставить("НастройкиКомпоновщика",	 НастройкиКомпоновщика);
		Возврат Новый ФиксированнаяСтруктура(СтруктураВывод);
		
	Исключение
		Инфо = ИнформацияОбОшибке();

		Возврат Неопределено;
	КонецПопытки;
	

КонецФункции

&НаСервере
Процедура УстановитьЗначенияОтборовСТ(СТ_ОбработкаОбъект)
	
	Если Объект.РежимМоделирования Тогда	
		Для Каждого ЭлОтбора ИЗ  СТ_ОбработкаОбъект.СТ_ДополнительныеНастройки_Объект.Настройки.Отбор.Элементы Цикл	
			Если Строка(ЭлОтбора.ЛевоеЗначение) = "Сценарии" Тогда	 
				ЭлОтбора.Использование  = Истина;
				ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлОтбора.ПравоеЗначение = СценарииМоделей.Выгрузить(,"Сценарий").ВыгрузитьКолонку("Сценарий");
			КонецЕсли;	 	 
		КонецЦикла;		 
		
		Для Каждого ЭлОтбора ИЗ  СТ_ОбработкаОбъект.СТ_ДополнительныеНастройки_Объект.Настройки.Отбор.Элементы Цикл	
			Если Строка(ЭлОтбора.ЛевоеЗначение) = "Организации" Тогда	 
				ЭлОтбора.Использование  = Истина;
				Если ТипЗнч(ОтборПоОрганизации) = Тип("СписокЗначений") Тогда 
					
					ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
					ЭлОтбора.ПравоеЗначение = ОтборПоОрганизации;
				Иначе	
					ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ЭлОтбора.ПравоеЗначение = ОтборПоОрганизации;

				КонецЕсли;	
			КонецЕсли;	 	 
		КонецЦикла;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиДиаграммуОтдельно(Знач ИсходнаяДиаграмма, НоваяДиаграмма)
	
	МассивЦветов = Новый Массив;
	МассивЦветов.Добавить(Новый Цвет(245,43,65));
	МассивЦветов.Добавить(Новый Цвет(40,174,199));
	МассивЦветов.Добавить(Новый Цвет(243,234,40));
	МассивЦветов.Добавить(Новый Цвет(40,211,40));
	МассивЦветов.Добавить(Новый Цвет(128,44,171));
	МассивЦветов.Добавить(Новый Цвет(40,106,186));
	МассивЦветов.Добавить(Новый Цвет(238,175,93));
	МассивЦветов.Добавить(Новый Цвет(40,148,40));
	МассивЦветов.Добавить(Новый Цвет(183,48,23));
	МассивЦветов.Добавить(Новый Цвет(61,41,245));
	МассивЦветов.Добавить(Новый Цвет(200,160,40));
	МассивЦветов.Добавить(Новый Цвет(40,10,40));
	МассивЦветов.Добавить(Новый Цвет(175,42,42));
	МассивЦветов.Добавить(Новый Цвет(40,40,164));
	МассивЦветов.Добавить(Новый Цвет(105,40,40));
	МассивЦветов.Добавить(Новый Цвет(40,235,201));
	                                           	
	НоваяДиаграмма.Обновление = Ложь;

	НоваяДиаграмма.ОбластьЗаголовка.Текст = ИсходнаяДиаграмма.ОбластьЗаголовка.Текст;
	НоваяДиаграмма.ОбластьЗаголовка.ПрозрачныйФон = ИсходнаяДиаграмма.ОбластьЗаголовка.ПрозрачныйФон;
	НоваяДиаграмма.ОбластьЗаголовка.ЦветФона = ИсходнаяДиаграмма.ОбластьЗаголовка.ЦветФона;
	НоваяДиаграмма.ОбластьЗаголовка.ЦветТекста = ИсходнаяДиаграмма.ОбластьЗаголовка.ЦветТекста;
	НоваяДиаграмма.ОбластьЗаголовка.ЦветРамки = ИсходнаяДиаграмма.ОбластьЗаголовка.ЦветРамки;
	НоваяДиаграмма.ОбластьЗаголовка.Шрифт = ИсходнаяДиаграмма.ОбластьЗаголовка.Шрифт;
	НоваяДиаграмма.ОбластьЗаголовка.Рамка = ИсходнаяДиаграмма.ОбластьЗаголовка.Рамка;


	НоваяДиаграмма.ОбластьЛегенды.ПрозрачныйФон = ИсходнаяДиаграмма.ОбластьЛегенды.ПрозрачныйФон;
	НоваяДиаграмма.ОбластьЛегенды.ЦветФона = ИсходнаяДиаграмма.ОбластьЛегенды.ЦветФона;
	НоваяДиаграмма.ОбластьЛегенды.ЦветТекста = ИсходнаяДиаграмма.ОбластьЛегенды.ЦветТекста;
	НоваяДиаграмма.ОбластьЛегенды.ЦветРамки = ИсходнаяДиаграмма.ОбластьЛегенды.ЦветРамки;
	НоваяДиаграмма.ОбластьЛегенды.Шрифт = ИсходнаяДиаграмма.ОбластьЛегенды.Шрифт;
	НоваяДиаграмма.ОбластьЛегенды.Рамка = ИсходнаяДиаграмма.ОбластьЛегенды.Рамка;
	НоваяДиаграмма.ОбластьЛегенды.Верх = ИсходнаяДиаграмма.ОбластьЛегенды.Верх;
	НоваяДиаграмма.ОбластьЛегенды.Низ = ИсходнаяДиаграмма.ОбластьЛегенды.Низ;
	НоваяДиаграмма.ОбластьЛегенды.Лево = ИсходнаяДиаграмма.ОбластьЛегенды.Лево;
	НоваяДиаграмма.ОбластьЛегенды.Право = ИсходнаяДиаграмма.ОбластьЛегенды.Право;

	НоваяДиаграмма.ОбластьПостроения.ПрозрачныйФон = ИсходнаяДиаграмма.ОбластьПостроения.ПрозрачныйФон;
	НоваяДиаграмма.ОбластьПостроения.ЦветФона = ИсходнаяДиаграмма.ОбластьПостроения.ЦветФона;
	НоваяДиаграмма.ОбластьПостроения.ЦветТекста = ИсходнаяДиаграмма.ОбластьПостроения.ЦветТекста;
	НоваяДиаграмма.ОбластьПостроения.ЦветРамки = ИсходнаяДиаграмма.ОбластьПостроения.ЦветРамки;
	НоваяДиаграмма.ОбластьПостроения.Шрифт = ИсходнаяДиаграмма.ОбластьПостроения.Шрифт;
	НоваяДиаграмма.ОбластьПостроения.Рамка = ИсходнаяДиаграмма.ОбластьПостроения.Рамка;
	НоваяДиаграмма.ОбластьПостроения.ОтображатьШкалу = ИсходнаяДиаграмма.ОбластьПостроения.ОтображатьШкалу;
	НоваяДиаграмма.ОбластьПостроения.ЦветШкалы = ИсходнаяДиаграмма.ОбластьПостроения.ЦветШкалы;
	НоваяДиаграмма.ОбластьПостроения.ЛинииШкалы = ИсходнаяДиаграмма.ОбластьПостроения.ЛинииШкалы;
	НоваяДиаграмма.ОбластьПостроения.ВертикальныеМетки = ИсходнаяДиаграмма.ОбластьПостроения.ВертикальныеМетки;
	НоваяДиаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = ИсходнаяДиаграмма.ОбластьПостроения.ОтображатьТаблицуДанных;
	НоваяДиаграмма.ОбластьПостроения.ВертикальныеЛинииВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.ВертикальныеЛинииВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.ГоризонтальныеЛинииВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.ГоризонтальныеЛинииВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.КлючиВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.КлючиВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.ВыравниваниеВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.ВыравниваниеВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.Верх = ИсходнаяДиаграмма.ОбластьПостроения.Верх;
	НоваяДиаграмма.ОбластьПостроения.Лево = ИсходнаяДиаграмма.ОбластьПостроения.Лево;
	НоваяДиаграмма.ОбластьПостроения.Низ = ИсходнаяДиаграмма.ОбластьПостроения.Низ;
	НоваяДиаграмма.ОбластьПостроения.Право = ИсходнаяДиаграмма.ОбластьПостроения.Право;
	
	НоваяДиаграмма.КоличествоТочек = ИсходнаяДиаграмма.КоличествоТочек;
	НоваяДиаграмма.КоличествоСерий = ИсходнаяДиаграмма.КоличествоСерий;
	НоваяДиаграмма.ПрозрачныйФон = ИсходнаяДиаграмма.ПрозрачныйФон;
	НоваяДиаграмма.Окантовка = ИсходнаяДиаграмма.Окантовка;
	НоваяДиаграмма.Свет = ИсходнаяДиаграмма.Свет;
	НоваяДиаграмма.ОтображатьЗаголовок = ИсходнаяДиаграмма.ОтображатьЗаголовок;
	НоваяДиаграмма.ОтображатьЛегенду = ИсходнаяДиаграмма.ОтображатьЛегенду;
	НоваяДиаграмма.ЦветФона = ИсходнаяДиаграмма.ЦветФона;
	НоваяДиаграмма.Рамка = ИсходнаяДиаграмма.Рамка;
	НоваяДиаграмма.ЦветРамки = ИсходнаяДиаграмма.ЦветРамки;
	НоваяДиаграмма.ТипДиаграммы = ИсходнаяДиаграмма.ТипДиаграммы;
	НоваяДиаграмма.ВидПодписей = ИсходнаяДиаграмма.ВидПодписей;
	НоваяДиаграмма.Ориентация = ИсходнаяДиаграмма.Ориентация;
	НоваяДиаграмма.МаксимумСерий = ИсходнаяДиаграмма.МаксимумСерий;
	НоваяДиаграмма.МаксимумСерийКоличество = ИсходнаяДиаграмма.МаксимумСерийКоличество;
	НоваяДиаграмма.МаксимумСерийПроцент = ИсходнаяДиаграмма.МаксимумСерийПроцент;
	НоваяДиаграмма.РежимПробелов = ИсходнаяДиаграмма.РежимПробелов;
	НоваяДиаграмма.БазовоеЗначение = ИсходнаяДиаграмма.БазовоеЗначение;
	НоваяДиаграмма.Градиент = ИсходнаяДиаграмма.Градиент;
	НоваяДиаграмма.АвтоРаздвижениеСерий = ИсходнаяДиаграмма.АвтоРаздвижениеСерий;
	НоваяДиаграмма.ПропускатьБазовоеЗначение = ИсходнаяДиаграмма.ПропускатьБазовоеЗначение;

	Для ии = 0 По ИсходнаяДиаграмма.Серии.Количество() - 1 Цикл
		НоваяСерия = НоваяДиаграмма.Серии[ии];
		ИсходнаяСерия = ИсходнаяДиаграмма.Серии[ии];

		НоваяСерия.Текст = ИсходнаяСерия.Текст;
		ИндексЦвета = ии - Цел(ии/16) * 16;
		НоваяСерия.Цвет = МассивЦветов[ИндексЦвета];
		НоваяСерия.Линия = ИсходнаяСерия.Линия;
		НоваяСерия.Маркер = ИсходнаяСерия.Маркер;
		НоваяСерия.Раздвигать = ИсходнаяСерия.Раздвигать;
		НоваяСерия.Индикатор = ИсходнаяСерия.Индикатор;

		Для жж = 0 По ИсходнаяДиаграмма.Точки.Количество() - 1 Цикл
			Если ии = 0 Тогда
				НоваяТочка = НоваяДиаграмма.Точки[жж];
				ИсходнаяТочка = ИсходнаяДиаграмма.Точки[жж];

				НоваяТочка.Текст = ИсходнаяТочка.Текст;
			КонецЕсли;
			ЗначениеДиаграммы = ИсходнаяДиаграмма.ПолучитьЗначение(жж, ии);
			НоваяДиаграмма.УстановитьЗначение(жж, ии, ЗначениеДиаграммы.Значение, ЗначениеДиаграммы.Расшифровка);
		КонецЦикла;
	КонецЦикла;

	НоваяДиаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтчет(ИмяОкна, НаименованиеОкна, МониторКлючевыхПоказателей = Ложь, ОтображениеМонитора, Знач Родитель = Неопределено, ПараметрыОтчета = Неопределено, ЗависимаяОбласть = Ложь, ДополнительныеНастройкиВход = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ВернутьТекущегоРодителя();
	КонецЕсли;
	
	Если ЗависимаяОбласть Тогда
		
		Если ТипЗнч(ДополнительныеНастройкиВход) = Тип("Структура") Тогда
			СкрыватьЗаголовокПринадлежностиЗависимойОбласти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеНастройкиВход, "СкрыватьЗаголовокПринадлежностиЗависимойОбласти", Ложь);
			СкрыватьЗаголовокПоказателяЗависимойОбласти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеНастройкиВход, "СкрыватьЗаголовокПоказателяЗависимойОбласти", Ложь);
		Иначе
			СкрыватьЗаголовокПринадлежностиЗависимойОбласти = Ложь;
			СкрыватьЗаголовокПоказателяЗависимойОбласти = Ложь;
		КонецЕсли; 

		БизнесАнализВызовСервераУХ.ДобавитьЭлементФормыДляЗависимойОбласти(ЭтаФорма, ИмяОкна);
		
		ГруппаЗависимойОбласти							 = Элементы.Добавить(ИмяОкна + "_ГруппаЗависимойОбласти", Тип("ГруппаФормы"), Родитель);
		ГруппаЗависимойОбласти.Вид						 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗависимойОбласти.Группировка				 = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЗависимойОбласти.ОтображатьЗаголовок		 = Ложь;
		ГруппаЗависимойОбласти.Отображение				 = ОтображениеОбычнойГруппы.Нет;
		
		ПолеИмяГлавнойПанели = Элементы.Добавить(ИмяОкна + "_ИмяГлавнойОбласти", Тип("ПолеФормы"), ГруппаЗависимойОбласти);
		ПолеИмяГлавнойПанели.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеИмяГлавнойПанели.ПутьКДанным = ИмяОкна + "_ИмяГлавнойОбласти";
		ПолеИмяГлавнойПанели.Заголовок = НСтр("ru = 'Зависимая панель панели'");
		ПолеИмяГлавнойПанели.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеИмяГлавнойПанели.Видимость = НЕ СкрыватьЗаголовокПринадлежностиЗависимойОбласти;
		
		ПолеСтраницы = Элементы.Добавить(ИмяОкна + "_Страницы", Тип("ГруппаФормы"), ГруппаЗависимойОбласти);
		ПолеСтраницы.Вид = ВидГруппыФормы.Страницы;
		ПолеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		ПолеСтраница = Элементы.Добавить(ИмяОкна + "_Предупреждение", Тип("ГруппаФормы"), ПолеСтраницы);
		ПолеСтраница.Вид = ВидГруппыФормы.Страница;
		
		КартинкаСообщения     = Элементы.Добавить(ИмяОкна + "_ПредупреждениеКартинка", Тип("ДекорацияФормы"), ПолеСтраница);
		КартинкаСообщения.Вид = ВидДекорацииФормы.Картинка;
		КартинкаСообщения.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		КартинкаСообщения.РастягиватьПоГоризонтали = Истина;
		
		ТекстСообщения = Элементы.Добавить(ИмяОкна + "_ПредупреждениеИнформация", Тип("ДекорацияФормы"), ПолеСтраница);
		
		ТекстСообщения.РастягиватьПоГоризонтали = Истина;
		ТекстСообщения.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Центр;
		
		ТекстСообщения.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ТекстСообщения.Заголовок = НСтр("ru = 'Обновите содержимое, выбрав пункт ""Обновить зависимые области"" в меню расшифровки ячейки в главной области.'");
		
		ПолеПанель = Элементы.Добавить(ИмяОкна, Тип("ГруппаФормы"), ПолеСтраницы);
		ПолеПанель.Вид = ВидГруппыФормы.Страница;
		
		
		ПолеПоказатель = Элементы.Добавить(ИмяОкна+"_Показатель", Тип("ПолеФормы"), ПолеПанель);
		ПолеПоказатель.Заголовок = "Показатель";
		ПолеПоказатель.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеПоказатель.ПутьКДанным = ИмяОкна + "_Показатель";
		ПолеПоказатель.Видимость = НЕ СкрыватьЗаголовокПоказателяЗависимойОбласти;
		
	Иначе
		ПолеПанель = Элементы.Добавить(ИмяОкна, Тип("ГруппаФормы"), Родитель);
		ПолеПанель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ПолеПанель.ОтображатьЗаголовок = Ложь;
		ПолеПанель.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если МониторКлючевыхПоказателей Тогда
		
		БизнесАнализВызовСервераУХ.ДобавитьЭлементыФормыДляМонитораПоказателя(ЭтаФорма, ПолеПанель, ИмяОкна, ОтображениеМонитора, НаименованиеОкна);
		
		Если ПараметрыОтчета <> Неопределено Тогда
			СтруктураПараметровОтчета = ПараметрыОтчета.Получить();
			Если ТипЗнч(СтруктураПараметровОтчета) = Тип("Структура") Тогда
				СтруктураПараметровОтчета.Свойство(ИмяОкна + "_ПлановыйСценарий", ЭтаФорма[ИмяОкна + "_ПлановыйСценарий"]);
				СтруктураПараметровОтчета.Свойство(ИмяОкна + "_Смещение", ЭтаФорма[ИмяОкна + "_Смещение"]);
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяОкна, Новый ОписаниеТипов("ТабличныйДокумент"), , ,Ложь));
		ИзменитьРеквизиты(МассивРеквизитов);

		ПолеФормы = Элементы.Добавить(ИмяОкна + "_Окно", Тип("ПолеФормы"), ПолеПанель);
		ПолеФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		
		Если ПустаяСтрока(НаименованиеОкна) Тогда
			ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Иначе
			ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ПолеФормы.Заголовок          = НаименованиеОкна;
		КонецЕсли;
		
		ПолеФормы.ПутьКДанным = ИмяОкна;
		ПолеФормы.УстановитьДействие("ОбработкаРасшифровки", "ОбработкаРасшифровки");
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСводнуюТаблицу(ИмяОкна, НаименованиеОкна, МониторКлючевыхПоказателей = Ложь, ОтображениеМонитора, Знач Родитель = Неопределено, ПараметрыОтчета = Неопределено, ЗависимаяОбласть = Ложь)
	
	Если Родитель = Неопределено Тогда
		Родитель = ВернутьТекущегоРодителя();
	КонецЕсли;
	Родитель.ОтображатьЗаголовок = Ложь;
	Если ЗависимаяОбласть Тогда	
		БизнесАнализВызовСервераУХ.ДобавитьЭлементФормыДляЗависимойОбласти(ЭтаФорма, ИмяОкна);
		ГруппаЗависимойОбласти                         = Элементы.Добавить(ИмяОкна + "", Тип("ГруппаФормы"), Родитель);
		ГруппаЗависимойОбласти.Вид                     = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗависимойОбласти.ОтображатьЗаголовок     = Ложь;
		ГруппаЗависимойОбласти.Отображение             = ОтображениеОбычнойГруппы.Нет;
		ПолеПанель = ГруппаЗависимойОбласти;	       
	Иначе
		ПолеПанель = Элементы.Добавить(ИмяОкна, Тип("ГруппаФормы"), Родитель);
		ПолеПанель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ПолеПанель.ОтображатьЗаголовок = Ложь;
		ПолеПанель.Отображение = ОтображениеОбычнойГруппы.Нет;	
	КонецЕсли;
		
	ИндексРеквизита = СоответствиеИменИОбъектовСТ.Количество()+1;
	Если ИндексРеквизита>5 Тогда
		 Возврат;
	КонецЕсли;
	
	ПолеФормы = Элементы["Группа_СТ_Поле"+ИндексРеквизита+""];
	ПолеТабДока = Элементы["СТ_Поле"+ИндексРеквизита+"_Окно"];

	ПолеТабДока.Редактирование = Истина;
	ПолеФормы.Видимость = Истина;
	Элементы.Переместить(ПолеФормы,ПолеПанель);
	
	СоответствиеИменИОбъектовСТ.Добавить(ИмяОкна,"СТ_Поле"+ИндексРеквизита+"_Окно");
	ИмяПоляЗаголовка = "СТ_Поле" + ИндексРеквизита + "_Заголовок";
	Если Элементы.Найти(ИмяПоляЗаголовка) <> Неопределено Тогда
		
		Элементы[ИмяПоляЗаголовка].Заголовок = НаименованиеОкна;
		СводнаяТаблицаУХ.СоздатьКонтекстноеМенюСводнойТаблицы(ЭтаФорма,ПолеТабДока);
		
		тКэшНастроекБыстрыхОтборов_ = ПолучитьИзВременногоХранилища(тКэшНастроекБыстрыхОтборовАдрес);
		нстрока =  тКэшНастроекБыстрыхОтборов_.Добавить();
		нстрока.ИмяОбъекта = "СТ_Объект"+ИндексРеквизита;
		нстрока.Фильтр = "Фильтр_Периоды";
		
		нстрока =  тКэшНастроекБыстрыхОтборов_.Добавить();
		нстрока.ИмяОбъекта = "СТ_Объект"+ИндексРеквизита;
		нстрока.Фильтр = "Фильтр_Сценарии";
		
		нстрока =  тКэшНастроекБыстрыхОтборов_.Добавить();
		нстрока.ИмяОбъекта = "СТ_Объект"+ИндексРеквизита;
		нстрока.Фильтр = "Фильтр_Валюты";
		
		нстрока =  тКэшНастроекБыстрыхОтборов_.Добавить();
		нстрока.ИмяОбъекта = "СТ_Объект"+ИндексРеквизита;
		нстрока.Фильтр = "Фильтр_Организации";
		
		нстрока =  тКэшНастроекБыстрыхОтборов_.Добавить();
		нстрока.ИмяОбъекта = "СТ_Объект"+ИндексРеквизита;
		нстрока.Фильтр = "Фильтр_Проекты";
		
	Иначе
		// Нет элемента.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьГант(ИмяОкна, НаименованиеОкна, МониторКлючевыхПоказателей = Ложь, ОтображениеМонитора, Знач Родитель = Неопределено, ПараметрыОтчета = Неопределено, ЗависимаяОбласть = Ложь)
	
	Если Родитель = Неопределено Тогда
		Родитель = ВернутьТекущегоРодителя();
	КонецЕсли;
	
	ПолеПанель = Элементы.Добавить(ИмяОкна, Тип("ГруппаФормы"), Родитель);

	ПолеПанель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПолеПанель.ОтображатьЗаголовок = Ложь;
	ПолеПанель.Отображение = ОтображениеОбычнойГруппы.Нет;
		
	ИндексРеквизита = СоответствиеИменИОбъектовСТ.Количество()+1;
	Если ИндексРеквизита>5 Тогда
		 Возврат;
	КонецЕсли;
	
	ПолеФормы = Элементы["Группа_СТ_Поле"+6+""];
	ПолеТабДока = Элементы["СТ_Поле"+6+"_Окно"];
	
	ПолеФормы.Видимость = Истина;
	Элементы.Переместить(ПолеФормы,ПолеПанель);
    Элементы["СТ_Поле"+6+"_Заголовок"].Заголовок =  НаименованиеОкна;
	
	СоответствиеИменИОбъектовСТ.Добавить(ИмяОкна,"СТ_Поле"+6+"_Окно");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДиаграмму(ИмяОкна, НаименованиеОкна, Знач Родитель = Неопределено, ЗависимаяОбласть = Ложь, ДополнительныеНастройкиДиаграммыВход = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ВернутьТекущегоРодителя();
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеНастройкиДиаграммыВход) = Тип("Структура") Тогда
		СкрыватьЗаголовокПринадлежностиЗависимойОбласти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеНастройкиДиаграммыВход, "СкрыватьЗаголовокПринадлежностиЗависимойОбласти", Ложь);
		СкрыватьЗаголовокПоказателяЗависимойОбласти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеНастройкиДиаграммыВход, "СкрыватьЗаголовокПоказателяЗависимойОбласти", Ложь);
	Иначе
		СкрыватьЗаголовокПринадлежностиЗависимойОбласти = Ложь;
		СкрыватьЗаголовокПоказателяЗависимойОбласти = Ложь;
	КонецЕсли; 
	
	Если ЗависимаяОбласть Тогда
		
		БизнесАнализВызовСервераУХ.ДобавитьЭлементФормыДляЗависимойОбласти(ЭтаФорма, ИмяОкна);
		
		ГруппаЗависимойОбласти = Элементы.Добавить(ИмяОкна + "_ГруппаЗависимойОбласти", Тип("ГруппаФормы"), Родитель);
		ГруппаЗависимойОбласти.Вид						 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗависимойОбласти.ОтображатьЗаголовок		 = Ложь;
		ГруппаЗависимойОбласти.Отображение				 = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗависимойОбласти.Группировка				 = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		ПолеИмяГлавнойПанели = Элементы.Добавить(ИмяОкна + "_ИмяГлавнойОбласти", Тип("ПолеФормы"), ГруппаЗависимойОбласти);
		ПолеИмяГлавнойПанели.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеИмяГлавнойПанели.ПутьКДанным = ИмяОкна + "_ИмяГлавнойОбласти";
		ПолеИмяГлавнойПанели.Заголовок = НСтр("ru = 'Зависимая панель панели'");
		ПолеИмяГлавнойПанели.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеИмяГлавнойПанели.Видимость = НЕ СкрыватьЗаголовокПринадлежностиЗависимойОбласти;
		
		ПолеСтраницы = Элементы.Добавить(ИмяОкна + "_Страницы", Тип("ГруппаФормы"), ГруппаЗависимойОбласти);
		ПолеСтраницы.Вид = ВидГруппыФормы.Страницы;
		ПолеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		ПолеСтраница = Элементы.Добавить(ИмяОкна + "_Предупреждение", Тип("ГруппаФормы"), ПолеСтраницы);
		ПолеСтраница.Вид = ВидГруппыФормы.Страница;
		
		ПолеПанель = Элементы.Добавить(ИмяОкна, Тип("ГруппаФормы"), ПолеСтраницы);
		ПолеПанель.Вид = ВидГруппыФормы.Страница;
		
		
		ПолеПоказатель = Элементы.Добавить(ИмяОкна+"_Показатель", Тип("ПолеФормы"), ПолеПанель);
		ПолеПоказатель.Заголовок = "Показатель";
		ПолеПоказатель.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеПоказатель.ПутьКДанным = ИмяОкна + "_Показатель";
		ПолеПоказатель.Видимость = НЕ СкрыватьЗаголовокПоказателяЗависимойОбласти;

	Иначе

		ПолеПанель = Элементы.Добавить(ИмяОкна, Тип("ГруппаФормы"), Родитель);
		ПолеПанель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ПолеПанель.ОтображатьЗаголовок = Ложь;
		ПолеПанель.Отображение = ОтображениеОбычнойГруппы.Нет;
		
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяОкна, Новый ОписаниеТипов("Диаграмма"), , ,Ложь));
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ПолеФормы = Элементы.Добавить(ИмяОкна + "_Окно", Тип("ПолеФормы"), ПолеПанель);
	ПолеФормы.Вид = ВидПоляФормы.ПолеДиаграммы;
	
	Если ПустаяСтрока(НаименованиеОкна) Тогда
		ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ПолеФормы.Заголовок          = НаименованиеОкна;
	КонецЕсли;
	
	ПолеФормы.ПутьКДанным = ИмяОкна;
	ПолеФормы.УстановитьДействие("ОбработкаРасшифровки", "ОбработкаРасшифровки");
	
	//НовыйПрефикс = "ОбластьДиаграммаСменаТипаДиаграммы_" + ИмяТипаДиаграммы + "_";
	//НаименованиеКомандаСменаТипа = ДобавитьКомандуФормы(НовыйПрефикс, ИмяОкнаВход);
	//ЭлементКомандыСменаТипаДиаграммы = ДобавитьЭлементКоманды(НовыйПрефикс, ЭлементВход.КонтекстноеМеню, ИмяОкнаВход);
	//ЭлементКомандыСменаТипаДиаграммы.Заголовок = ЗаголовокКомандыВход;
	//ИмяПодключаемогоОбработчика = "СменаТипаДиграммы_" + ИмяТипаДиаграммы + "_Подключаемый";
	//ЭтаФорма.Команды[НаименованиеКомандаСменаТипа].Действие = ИмяПодключаемогоОбработчика;
	
	НовыйПрефикс = "ЗависимаяОбластьСменаСортировки_Возрастание_";
	НаименованиеКомандаСменаСортировкиВозрастание = ДобавитьКомандуФормы(НовыйПрефикс, ИмяОкна);
	ЭлементКомандыСменаСортировкиВозрастание = ДобавитьЭлементКоманды(НовыйПрефикс, ПолеФормы.КонтекстноеМеню, ИмяОкна);
	ЭлементКомандыСменаСортировкиВозрастание.Заголовок = НСтр("ru = 'Сортировать по возрастанию'");
	ИмяПодключаемогоОбработчика = "ЗависимаяОбластьСменаСортировки_Возрастание_Подключаемый";
	ЭтаФорма.Команды[НаименованиеКомандаСменаСортировкиВозрастание].Действие = ИмяПодключаемогоОбработчика;

КонецПроцедуры

&НаСервере
Функция ДобавитьСтраницуПанели(ИмяПанели, НаименованиеПанели, ВидГруппировки)
	
	ПолеФормы             = Элементы.Добавить(ИмяПанели, Тип("ГруппаФормы"), Элементы.ОсновнаяПанель);
	ПолеФормы.Вид         = ВидГруппыФормы.Страница;
	ПолеФормы.Заголовок   = НаименованиеПанели;
	ПолеФормы.Группировка = ?(ВидГруппировки = 1, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	Возврат ПолеФормы;
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуПанели(ИмяКолонки, НаименованиеКолонки, НаименованиеОтчета, ДобавлятьОтборы = Ложь, ВВидеТаблицы, ПараметрыОтчета, ДобавлятьОтчет = Истина,
	ИспользуетсяСводнаяТаблица,ЭлементРодитель, ГруппировкаПанелей, ЗависимаяОбласть = Ложь,ЭтоГант=Ложь,ИспользуетсяОтчет=Истина)
	
	ЧислоКолонок = ЧислоКолонок + 1;
	ПолеФормы = Элементы.Добавить("Панель" + ЧислоКолонок, Тип("ГруппаФормы"), ЭлементРодитель);
	ПолеФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПолеФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ПолеФормы.Заголовок   = НаименованиеКолонки;
	ПолеФормы.Группировка = ?(ГруппировкаПанелей = 0, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПолеФормы.РастягиватьПоГоризонтали = Истина;
	ПолеФормы.ШрифтЗаголовка = Новый Шрифт(, 12, Истина);	
	Если ИспользуетсяСводнаяТаблица Тогда	 
		ДобавитьСводнуюТаблицу(ИмяКолонки, НаименованиеОтчета, ДобавлятьОтборы, ВВидеТаблицы, ПолеФормы, ПараметрыОтчета, ЗависимаяОбласть);	
	ИначеЕсли ИспользуетсяОтчет И НЕ ИспользуетсяСводнаяТаблица И НЕ ЭтоГант Тогда
		ДобавитьОтчет(ИмяКолонки, НаименованиеОтчета, ДобавлятьОтборы, ВВидеТаблицы, ПолеФормы, ПараметрыОтчета, ЗависимаяОбласть);	
	ИначеЕсли ЭтоГант  Тогда 
		ДобавитьГант(ИмяКолонки, НаименованиеОтчета, Ложь, ВВидеТаблицы, ПолеФормы, ПараметрыОтчета, ЗависимаяОбласть);
	Иначе	
		ДобавитьДиаграмму(ИмяКолонки, НаименованиеОтчета, ПолеФормы, ЗависимаяОбласть);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПанель()
	
	ОткрытыеОтчеты = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("КнопкаФормы") Тогда
		РодительРодителя = ТекущийЭлемент.Родитель.Родитель;
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить(ТекущийЭлемент.Родитель.Имя);
		ТекСтрока = ОткрытыеОтчеты.Найти(ТекущийЭлемент.Родитель.Имя, "ИмяОкна");
		
		Если ТекСтрока <> Неопределено Тогда
			ОткрытыеОтчеты.Удалить(ТекСтрока);
		КонецЕсли;
		
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
		Элементы.Удалить(Элементы[ТекущийЭлемент.Родитель.Имя]);
		
		Если РодительРодителя.ПодчиненныеЭлементы.Количество() = 0 Тогда
			Попытка
				Элементы.Удалить(РодительРодителя);
			Исключение
			КонецПопытки;
			ЧислоКолонок = ЧислоКолонок - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру параметров для открытия формы с именем ФормаРасшифровкиВход расшифровки объетом информационной базы
// с типом ТипОбъектаМетаданныхВход и наименованием НаименованиеОбъектаМетаданныхВход для отчета
// с именем окна ИмяОкнаВход в таблице с адресом ПутьКТаблицеОткрытыхОтчетовВход.
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход, ПутьКТаблицеОткрытыхОтчетовВход, ИмяОкнаВход, КонтекстВход = Неопределено, ОтборыРасшифровкиВход = Неопределено, ПоказательВход = Неопределено)
	РезультатФункции = Новый Структура;
	ОткрытыеОтчеты	 = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетовВход);
	ТекСтрока		 = ОткрытыеОтчеты.Найти(ИмяОкнаВход, "ИмяОкна");
	Если ТекСтрока <> Неопределено Тогда
		Попытка
			ТекОтчет = ТекСтрока.УниверсальныйОтчет;      
			РезультатФункции = Справочники.ПроизвольныеОтчеты.ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход, ТекОтчет, КонтекстВход, ОтборыРасшифровкиВход, ПоказательВход);
		Исключение
			ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении параметров расшифровки для %НаименованиеОбъекта%: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОбъекта%", Строка(НаименованиеОбъектаМетаданныхВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Новый Структура;
		КонецПопытки;
	Иначе
		РезультатФункции = Новый Структура;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает ссылку на экземпляр отчета, которым будет расшифрован операнд ОперандВход.
&НаСервереБезКонтекста
Функция ПолучитьЭкземплярОтчетаРасшифровки(ПоказательВход, ОперандВход, КонтекстВход, СтруктураОтборовВход, ИдентификаторВход, ИмяОперандаВход)
	РезультатФункции = Документы.НастраиваемыйОтчет.ПустаяСсылка();
	ТабЗапросы = УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета( , , , , ОперандВход).мТабПоказателиЗапросы;
	Если ТабЗапросы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить данные операнда %Операнд% для расчета'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операнд%", Строка(ОперандВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Документы.НастраиваемыйОтчет.ПустаяСсылка();
	Иначе	
		РабочийОбъект = БизнесАнализВызовСервераУХ.ПолучитьСтруктуруОбъектаРасчета(ПоказательВход, ОперандВход, КонтекстВход, СтруктураОтборовВход, ИдентификаторВход, ИмяОперандаВход);
		ДанныеОтчетов = УправлениеОтчетамиУХ.ПолучитьТаблицуОтчетовРасшифровки(РабочийОбъект, ТабЗапросы[0]);
		ТабСписокОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОтчетов, "ТабСписокОтчетов", Новый ТаблицаЗначений);
		Если ТабСписокОтчетов.Количество() = 1 Тогда
			ПерваяСтрока = ТабСписокОтчетов[0];
			РезультатФункции = ПерваяСтрока.Регистратор;
		Иначе
			РезультатФункции = Документы.НастраиваемыйОтчет.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОТЧЕТОВ.
//

&НаКлиенте
Процедура ОбработчикВыбораМонитора(Параметр1, Параметр2, Параметр3)
	
	ТекущаяСтрока = Параметр1.ДанныеСтроки(Параметр2);
	ИмяОкна       = СтрЗаменить(Параметр1.Имя, "_Монитор", "");
	ИмяОперанда   = СтрЗаменить(Параметр3.Имя, ИмяОкна + "_", "");
	Контекст      = ПолучитьКонтекстРасчета(ИмяОкна, ИмяОперанда, ПутьКТаблицеОткрытыхОтчетов, СформироватьСтруктуруОтборов());
	Показатель    = ТекущаяСтрока[ИмяОкна + "_Показатель"];
	Операнд       = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
	
	Если НЕ ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифроватьПоказательМКП(Параметр1, ИмяОкна, Показатель, ИмяОперанда, Операнд, ТекущаяСтрока[ИмяОкна + "_ИспользуемаяИБ"], Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиКартыМКП(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОкна = СтрЗаменить(Элемент.Имя, "_Окно", "");
	ИмяОперанда = "ФактическоеЗначениеТекущегоПериода";
	Контекст    = ПолучитьКонтекстРасчета(ИмяОкна, ИмяОперанда, ПутьКТаблицеОткрытыхОтчетов, СформироватьСтруктуруОтборов());
	Показатель  = Расшифровка.Показатель;
	Операнд     = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
	
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифроватьПоказательМКП(Элемент, ИмяОкна, Показатель, ИмяОперанда, Операнд, Расшифровка.ИспользуемаяИБ, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказательМКП(Элемент, ИмяОкна, Показатель, ИмяОперанда, Операнд, ИспользуемаяИБ, Контекст)
	
	Если Операнд = Неопределено Тогда
		
		РезультатВыбора = 1;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(3, Нстр("ru = 'Обновить зависимые области'"), , БиблиотекаКартинок.ВводНаОсновании);
		//СписокЗначений.Добавить(1, "Раскрытие");
		СписокЗначений.Добавить(2, Нстр("ru = 'Расшифровка (основная)'"));
		СписокЗначений.Добавить(4, Нстр("ru = 'Динамика'"), , БиблиотекаКартинок.ГрафикМонохромный);
		СписокЗначений.Добавить(5, Нстр("ru = 'Структура'"), , БиблиотекаКартинок.Структура);

		ВернутьСписокОтчетовРасшифровок(СписокЗначений, ПутьКТаблицеОткрытыхОтчетов, ИмяОкна, Показатель);
		ДобавитьРасшифровкиОбъектаТекущегоОтчета(ПутьКТаблицеОткрытыхОтчетов, СписокЗначений, ИмяОкна, Показатель);

		Результат = Неопределено;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяОкна", ИмяОкна);
		ДопПараметры.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
		ДопПараметры.Вставить("Контекст", Контекст);
		ДопПараметры.Вставить("Операнд", Операнд);
		ДопПараметры.Вставить("Показатель", Показатель);
		ДопПараметры.Вставить("ИмяОперанда", ИмяОперанда);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРасшифровки", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВыборИзМеню(Оповещение, СписокЗначений);		
		Возврат;
		
	КонецЕсли;
	
	РасшифроватьПоказательМКП_Завершение(ИмяОкна, ИспользуемаяИБ, Контекст, Операнд, Показатель, РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРасшифровки(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ИмяОкна 		= ДополнительныеПараметры.ИмяОкна;
    ИспользуемаяИБ 	= ДополнительныеПараметры.ИспользуемаяИБ;
    Контекст 		= ДополнительныеПараметры.Контекст;
    Операнд 		= ДополнительныеПараметры.Операнд;
    Показатель 		= ДополнительныеПараметры.Показатель;    
    ИмяОперанда		= ДополнительныеПараметры.ИмяОперанда;    
    
    Результат = ВыбранныйЭлемент;
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    РезультатВыбора = Результат.Значение;    
    
    РасшифроватьПоказательМКП_Завершение(ИмяОкна, ИспользуемаяИБ, Контекст, Операнд, Показатель, РезультатВыбора, ИмяОперанда);

КонецПроцедуры

// Выполняет расшифровку, отмеченную как Основная, для показателя МКП.
&НаКлиенте
Процедура ОсновнаяРасшифровкаПоказателяМкп(ИспользуемаяИБ, Контекст, Операнд, Показатель, ИмяОперанда = "")
	Контекст.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
	Контекст.Вставить("УправляемыйРежим", Истина);
	СпособПолучения = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Операнд, "СпособПолучения");
	Если СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета") Тогда
		ПоказательОтчета = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Операнд, "ПоказательОтбор");
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОтборПоВалюте",						 ОтборПоВалюте);
		СтруктураОтбора.Вставить("ОтборПоОрганизации",					 ОтборПоОрганизации);
		СтруктураОтбора.Вставить("ПериодПланированияОтборОкончание",	 ПериодПланированияОтборОкончание);
		СтруктураОтбора.Вставить("ОтборПоСценарию",						 ОтборПоСценарию);
		СтруктураОтбора.Вставить("ОтборПоПроекту",						 ОтборПоПроекту);
		ВыбЭкземплярОтчета = ПолучитьЭкземплярОтчетаРасшифровки(Показатель, Операнд, Контекст, СтруктураОтбора, УникальныйИдентификатор, ИмяОперанда);
		Если ЗначениеЗаполнено(ВыбЭкземплярОтчета) Тогда
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить(ПоказательОтчета);
			ФиксМассивПоказателей = Новый ФиксированныйМассив(МассивПоказателей);
			СтруктураПараметровФормы = Новый Структура;
			СтруктураПараметровФормы.Вставить("Ключ", ВыбЭкземплярОтчета);
			СтруктураПараметровФормы.Вставить("МассивПоказателей", ФиксМассивПоказателей);
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", СтруктураПараметровФормы);
		Иначе	
			ТекстСообщения = НСтр("ru = 'Не удалось получить экземпляр для расшифровки операнда %Операнд%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операнд%", Строка(Операнд));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		РезультатРасшифровки = УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(Операнд, Контекст);
		Если ТипЗнч(РезультатРасшифровки) = Тип("ТабличныйДокумент") Тогда
			
			ПараметрыФормы = Новый Структура("ИспользуемаяИБ, Результат", Контекст.ИспользуемаяИБ, РезультатРасшифровки);
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", ПараметрыФормы);
			
		ИначеЕсли ТипЗнч(РезультатРасшифровки) = Тип("Структура") Тогда
			
			Если РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии")
				ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии")  Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления")
				ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос") Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуВИБ.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуТек.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета") Тогда			
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("МассивКодовПоказателей", Новый Массив);
				СтруктураПараметров.Вставить("РабочийОбъектАдрес", "");
				СтруктураПараметров.Вставить("мТекущаяВалюта", ОтборПоВалюте);
				ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.РасшифровкаПоказателейУправляемая",СтруктураПараметров,ЭтаФорма);
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант (%СпособПолученияДанных%) показателя %Показатель% для расшифровки. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособПолученияДанных%", Строка(РезультатРасшифровки.СпособПолучения));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Получен неизвестный вариант расшифровки: %Расшифровка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Расшифровка%", Строка(РезультатРасшифровки));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры		// ОсновнаяРасшифровкаПоказателяМкп()

&НаКлиенте
Процедура РасшифроватьПоказательМКП_Завершение(ИмяОкна, ИспользуемаяИБ, Контекст, Операнд, Показатель, РезультатВыбора, ИмяОперанда = "")
    
	Если РезультатВыбора = 1 Тогда
		
		Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
			АдресРезультатРасшифровки = ВернутьТаблицуДляРасшифровки(Показатель, Контекст, ИмяОперанда);
			ПараметрыФормы = Новый Структура("АдресТабличныйДокумент", АдресРезультатРасшифровки);
			ОткрытьФорму("ОбщаяФорма.ФормаРасшифровкиПоказателяМонитораКлючевыхПоказателей", ПараметрыФормы);
		ИначеЕсли ТипЗнч(Показатель) = Тип("СправочникСсылка.Цели") Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Цель", Показатель);
			ОткрытьФорму("Отчет.Инициативы.Форма.ФормаОтчета", СтруктураПараметров);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант показателя: %Показатель%. Расшифровка отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли РезультатВыбора = 2 Тогда  			// Основная расшифровка.
		
		ОсновнаяРасшифровкаПоказателяМкп(ИспользуемаяИБ, Контекст, Операнд, Показатель, ИмяОперанда);
		
	ИначеЕсли РезультатВыбора = 3 Тогда				// Обновить подчинённые.

		Контекст.Вставить("ВнешняяИБ", ИспользуемаяИБ);
		Контекст.Вставить("ОтборПоПроекту", ОтборПоПроекту);
		ОбновитьПодчиненныеОтчеты(ИмяОкна, Неопределено, Неопределено, Показатель, Контекст, ЭтаФорма[ИмяОкна + "_ПлановыйСценарий"]);
		
	ИначеЕсли РезультатВыбора = 4 Тогда				// Динамика.
		
		Контекст.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
		Контекст.Вставить("ОтборПоПроекту", ОтборПоПроекту);
		БизнесАнализКлиентУХ.ВывестиОтчетПоДинамикеМонитора(Показатель, Контекст, ИмяОперанда);
		
	ИначеЕсли РезультатВыбора = 5 Тогда				// Расшифровка по аналитикам.
		
		Контекст.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
		Контекст.Вставить("ОтборПоПроекту", ОтборПоПроекту);
		ВывестиОтчетРасшифровкиПоАналитике(Показатель, Контекст);
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("ФиксированнаяСтруктура") Тогда		// Дополнительные расшифровки.
		
		ТипОбъектаМетаданных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ТипОбъектаМетаданных", "");
		Если ЗначениеЗаполнено(ТипОбъектаМетаданных) Тогда
			// Задан объект метаданных. Расшифруем по нему.
			НаименованиеОбъектаМетаданных	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "НаименованиеОбъектаМетаданных", "");
			ФормаРасшифровки				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ФормаРасшифровки", "");
			СтруктураПараметров = ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, ПутьКТаблицеОткрытыхОтчетов, ИмяОкна, Контекст, , Показатель);
			БизнесАнализКлиентУХ.ОтобразитьРаскрытиеОбъектомИнформационнойБазы(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, СтруктураПараметров);
		Иначе				
			// Произвольная расшифровка аналитическим отчетом.
			МассивДоступныхРасшифровок = Новый Массив;
			
			Для Каждого ЭлементКонтекста Из Контекст Цикл
				МассивДоступныхРасшифровок.Добавить(Новый Структура("Поле, Иерархия, Значение", ЭлементКонтекста.Ключ, Ложь, ЭлементКонтекста.Значение));
			КонецЦикла;
			// Дополнительно добавим дату начала и дату окончания периода отчета.
			ДобавитьДатыПериодаОтчетаВМассивРасшифровок(Контекст.ПериодОтчета, МассивДоступныхРасшифровок);
			
			АдресМассивРасшифровок = ПоместитьВоВременноеХранилище(МассивДоступныхРасшифровок, УникальныйИдентификатор);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", РезультатВыбора.Отчет); 
			ПараметрыФормы.Вставить("ЭтоРасшифровка", Истина);
			ПараметрыФормы.Вставить("СохраненнаяНастройка", РезультатВыбора.СохраненнаяНастройка);
			ПараметрыФормы.Вставить("ФормироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("АдресМассивРасшифровок", АдресМассивРасшифровок);
			ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в список значений СписокОтчетовРез расшировки отчетами из
// таблицы ТаблицаВход.
&НаСервереБезКонтекста
Процедура ДобавитьВСписокОтчетыИзТаблицы(СписокОтчетовРез, ТаблицаВход)
	КартинкаАналитическийОтчет = БиблиотекаКартинок.АналитическиеОтчетыРасшифровка;
	Для Каждого Строка Из ТаблицаВход Цикл
		ЗначениеСписка = Новый ФиксированнаяСтруктура("Отчет, СохраненнаяНастройка", Строка.Отчет, Строка.ВариантОтчета);
		ПредставлениеСписка = "";
		Если ПустаяСтрока(Строка.Представление) Тогда
			ПредставлениеСписка = Строка(Строка.Отчет);
		Иначе
			ПредставлениеСписка = Строка.Представление;
		КонецЕсли;
		СписокОтчетовРез.Добавить(ЗначениеСписка, ПредставлениеСписка, , КартинкаАналитическийОтчет);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВернутьСписокОтчетовРасшифровок(СписокОтчетов, Знач ПутьКТаблицеОткрытыхОтчетов, Знач ИмяЭлемента, Знач ПоказательМонитора)
	// Расшифровки на уровне аналитического отчета.
	ТекСтрока = ВернутьРасшифровкиТекущегоОтчета(ПутьКТаблицеОткрытыхОтчетов, ИмяЭлемента);
	Если ТекСтрока <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("ПоказательМонитора", ПоказательМонитора);
		НайденныеСтроки = ТекСтрока.Расшифровки.НайтиСтроки(СтруктураПоиска);
		ДобавитьВСписокОтчетыИзТаблицы(СписокОтчетов, НайденныеСтроки);
		
	КонецЕсли;
	// Расшифровки на уровне показателя МКП.
	Если ЗначениеЗаполнено(ПоказательМонитора) Тогда
		ТаблицаРасшифровок = ПоказательМонитора.Расшифровки.Получить();
		Если ТаблицаРасшифровок <> Неопределено Тогда
			ДобавитьВСписокОтчетыИзТаблицы(СписокОтчетов, ТаблицаРасшифровок);
		Иначе
			// Таблица расшировок пуста. Не добавляем.
		КонецЕсли; 
	Иначе
		// Показатель не указан. Не добавляем.
	КонецЕсли;
КонецПроцедуры

// Вставляет в структуру СтруктураВход значение поля ИмяПоляВход из строки 
// таблицы СтрокаТаблицыЗначенийВход.
&НаСервере
Процедура ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначенийВход, СтруктураВход, ИмяПоляВход)
	ЕстьПоле = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыЗначенийВход, ИмяПоляВход);
	Если ЕстьПоле Тогда
		ЗначениеПоля = СтрокаТаблицыЗначенийВход[ИмяПоляВход];
		СтруктураВход.Вставить(ИмяПоляВход, ЗначениеПоля);
	Иначе
		СтруктураВход.Вставить(ИмяПоляВход, Неопределено);
	КонецЕсли;
КонецПроцедуры

// Выполняет расшифровку источника данных ОперандВход по нешнему контексту 
// ВнешнийКонтекстВход и дополнительной расшифровке ДополнительнаяРасшифровкаВход.
&НаСервере
Функция РасшифроватьДанныеОперанда_Сервер(ОперандВход, ВнешнийКонтекстВход, Знач ДополнительнаяРасшифровкаВход)
	РезультатФункции = Новый Структура;
	РезультатРасшифровки = УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(ОперандВход, ВнешнийКонтекстВход, ДополнительнаяРасшифровкаВход);
	Если ТипЗнч(РезультатРасшифровки) = Тип("СтрокаТаблицыЗначений") Тогда
		// Преобразуем строку таблицы значений в структуру.
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "АналитикВидаОтчета");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ВалютнаяСумма");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ГруппаРаскрытия");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ГруппаРаскрытияОтбор");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ПланСчетов");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ПоказательОтбор");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ПоказательТекущегоОтчета");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ПроизвольныйЗапрос");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "РегистрБД");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "СпособПолучения");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "СтруктураЗапроса");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "СтруктураПараметров");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ТабПравилаИспользованияПолей");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ТекстЗапроса");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ТипБД");
		ПеренестиПолеСтрокиТаблицыЗначенийВСтруктуру(РезультатРасшифровки, РезультатФункции, "ТолькоАналитическиеЗначения");
	Иначе
		РезультатФункции = РезультатРасшифровки;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ВернутьНастройкиДляРасшифровкиПоказателя(ВыбраннаяРасшифровка, НомерСтрокиВМониторе, УправляемыйРежим)
	
	ДопРасшифровки = ВыбраннаяРасшифровка.ДополнительныеРасшифровки;
	Если НомерСтрокиВМониторе <> Неопределено Тогда
		ТекущаяСтрока = ЭтаФорма[ДопРасшифровки.ИмяОкна].НайтиПоИдентификатору(НомерСтрокиВМониторе);
		Показатель    = ТекущаяСтрока[ДопРасшифровки.ИмяОкна + "_Показатель"];
	Иначе
		Показатель = Справочники.ПоказателиМонитораКлючевыхПоказателей.ПустаяСсылка();
	КонецЕсли;
	
	Если ДопРасшифровки.Свойство("Аналитика") Тогда
		ИсточникДанных = Показатель.ИсточникЗначенияТекущегоПериода;
		Если ИсточникДанных.ПравилаИспользованияПолейЗапроса.Количество() < ДопРасшифровки.НомерАналитики Тогда
			ПолеАналитики  = ИсточникДанных.ПравилаИспользованияПолейЗапроса[ДопРасшифровки.НомерАналитики].Поле;
			ДополнительныеРасшифровки = Новый ФиксированнаяСтруктура(ПолеАналитики, ДопРасшифровки.Аналитика);
		Иначе
			ДополнительныеРасшифровки = Неопределено;
		КонецЕсли;
		ПериодРасчета = ВыбраннаяРасшифровка.ВнешнийКонтекст.БазовыйПериод;
	ИначеЕсли ДопРасшифровки.Свойство("ПлановоеЗначение") И ДопРасшифровки.ПлановоеЗначение Тогда
		ИсточникДанных = Показатель.ИсточникПлановогоЗначения;
		ДополнительныеРасшифровки = Неопределено;
		Если ДопРасшифровки.Свойство("ДатаНачала") Тогда
			ПериодРасчета  = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДопРасшифровки.ДатаНачала, ВыбраннаяРасшифровка.ВнешнийКонтекст.БазовыйПериод.Периодичность, 0, Истина);
		Иначе
			ПериодРасчета = ВыбраннаяРасшифровка.ВнешнийКонтекст.ПериодСравнения;
		КонецЕсли;
	Иначе
		ИсточникДанных = Показатель.ИсточникЗначенияТекущегоПериода;
		ДополнительныеРасшифровки = Неопределено;
		
		Если ДопРасшифровки.Свойство("ДатаНачала") Тогда
			ПериодРасчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДопРасшифровки.ДатаНачала, ВыбраннаяРасшифровка.ВнешнийКонтекст.БазовыйПериод.Периодичность, 0, Истина);
		Иначе
			ПериодРасчета = ВыбраннаяРасшифровка.ВнешнийКонтекст.БазовыйПериод;
		КонецЕсли;
		
	КонецЕсли;
	
	ВнешнийКонтекст = Новый ФиксированнаяСтруктура("ОРганизация, ПериодОтчета, Сценарий, ОснованаяВалюта, ИспользуемаяИБ, УправляемыйРежим"
									 , ВыбраннаяРасшифровка.ВнешнийКонтекст.Организация
									 , ПериодРасчета
									 , ВыбраннаяРасшифровка.ВнешнийКонтекст.БазовыйСценарий
									 , ВыбраннаяРасшифровка.ВнешнийКонтекст.ОсновнаяВалюта
									 , ?(ВыбраннаяРасшифровка.ВнешнийКонтекст.Свойство("ИспользуемаяИБ"), ВыбраннаяРасшифровка.ВнешнийКонтекст.ИспользуемаяИБ, ВыбраннаяРасшифровка.ВнешнийКонтекст.ВнешняяИБ)
									 , УправляемыйРежим);
	
	Возврат Новый ФиксированнаяСтруктура("Операнд, ВнешнийКонтекст, ДополнительнаяРасшифровка", ИсточникДанных, ВнешнийКонтекст, ДополнительныеРасшифровки);
	
КонецФункции

// Возвращает настройки компоновки по выбранной ячейке с идентификатором расшифровки РасшифровкаВход, выведенной
// в области с именем ИмяОбъектаВход.
&НаСервере
Функция ВернутьНастройкиОтбораРасшифровки(ПутьКТаблицеОткрытыхОтчетовВход, ИмяОбъектаВход, РасшифровкаВход, АдресДанныхРасшифровкиВход)
	РезультатФункции = Неопределено;
	ОткрытыеОтчеты	 = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетовВход);
	ТекСтрока		 = ОткрытыеОтчеты.Найти(ИмяОбъектаВход, "ИмяОкна");
	Если ТекСтрока <> Неопределено Тогда
		Попытка
			РезультатФункции = ВернутьНастройкиОтбораДляОтчета(ТекСтрока.УниверсальныйОтчет, РасшифровкаВход, АдресДанныхРасшифровкиВход, Истина);
		Исключение
			ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении параметров расшифровки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Новый Структура;
		КонецПопытки;
	Иначе
		РезультатФункции = Новый Структура;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ОбработатьВыбраннуюРасшифровку(СпособРасшифровкиВход, СтруктураОтветаВход, РасшифровкаВход, ЭлементВход, СтандартнаяОбработкаВход, ИмяОбъектаВход, АдресДанныхРасшифровкиВход)
	Если СпособРасшифровкиВход = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Расшифровка показателя монитора ключевых показателей.
	Если СтруктураОтветаВход.РаскрытиеПоказателя Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			УправляемыйРежим = Ложь;
		#Иначе
			УправляемыйРежим = Истина;
		#КонецЕсли
		ИмяЭлементаМонитора = СпособРасшифровкиВход.Значение.ДополнительныеРасшифровки.ИмяОкна + "_Монитор";
		Если Элементы.Найти(ИмяЭлементаМонитора) <> Неопределено Тогда
			СтруктураРасшифровки = ВернутьНастройкиДляРасшифровкиПоказателя(СпособРасшифровкиВход.Значение, Элементы[ИмяЭлементаМонитора].ТекущаяСтрока, УправляемыйРежим);
			
			РезультатРасшифровки = РасшифроватьДанныеОперанда_Сервер(СтруктураРасшифровки.Операнд, СтруктураРасшифровки.ВнешнийКонтекст, СтруктураРасшифровки.ДополнительнаяРасшифровка);
			
			Если ТипЗнч(РезультатРасшифровки)=Тип("ТабличныйДокумент") Тогда
				
				ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", новый Структура("ИспользуемаяИБ, Результат", СтруктураРасшифровки.Контекст.ИспользуемаяИБ, РезультатРасшифровки));
				
			ИначеЕсли ТипЗнч(РезультатРасшифровки)=Тип("Структура") Тогда
				
				Если РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии")
					ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии")  Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления")
					ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос") Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуВИБ.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуТек.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Элемент не найден. Не расшифровываем, т.к. нет данных о текущей строке монитора.
		КонецЕсли;
		
		// Расшифровка аналитического отчета.
	ИначеЕсли СпособРасшифровкиВход.Значение = "ТиповыеОтчетыУХ.ОткрытьНастраиваемыйОтчет" Тогда
		ОткрытьНастраиваемыйОтчет(РасшифровкаВход, СтруктураОтветаВход.АдресДанныхРасшифровки);
	ИначеЕсли СпособРасшифровкиВход.Значение = "ОбновитьОтчеты" Тогда
		ОбновитьПодчиненныеОтчеты(ИмяОбъектаВход, РасшифровкаВход, СтруктураОтветаВход.АдресДанныхРасшифровки);
	ИначеЕсли СпособРасшифровкиВход.Значение = "ОткрытьВОтдельномОкне" Тогда
		СтруктураОтветаВход = ОпределитьНастройкиОтображенияТекущегоОтчетаВНовомОкне(ИмяОбъектаВход, ПутьКТаблицеОткрытыхОтчетов);
		Если СтруктураОтветаВход <> Неопределено Тогда
			ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая"
			, Новый Структура("Ключ, Расшифровка, АдресДанныхРасшифровки, Настройки, СохраненнаяНастройка, ФормироватьПриОткрытии, ЭтоРасшифровка, ИспользоватьПереданнуюСохраненнуюНастройку"
			, СтруктураОтветаВход.Отчет
			, РасшифровкаВход
			, Неопределено
			, СтруктураОтветаВход.НастройкиКомпоновщика
			, СтруктураОтветаВход.СохраненнаяНастройка
			, Истина
			, Истина
			, Истина));
		КонецЕсли;
	ИначеЕсли СпособРасшифровкиВход.Значение = "СтандартнаяРасшифровка" Тогда
		СтандартнаяОбработкаРасшифровки(ЭлементВход, РасшифровкаВход, СтруктураОтветаВход, СтандартнаяОбработкаВход);
	ИначеЕсли ТипЗнч(СпособРасшифровкиВход) = Тип("ЭлементСпискаЗначений") Тогда
		
		Если СпособРасшифровкиВход.Значение.Свойство("Операнд") Тогда
			
			Контекст = СпособРасшифровкиВход.Значение.Контекст;
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Контекст.Вставить("УправляемыйРежим", Ложь);
			#Иначе
				Контекст.Вставить("УправляемыйРежим", Истина);
			#КонецЕсли
			
			РезультатРасшифровки = РасшифроватьДанныеОперанда_Сервер(СпособРасшифровкиВход.Значение.Операнд, Контекст, СпособРасшифровкиВход.Значение.ДополнительнаяРасшифровка);
			
			Если ТипЗнч(РезультатРасшифровки)=Тип("ТабличныйДокумент") Тогда
				
				ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", новый Структура("ИспользуемаяИБ, Результат", Контекст.ИспользуемаяИБ, РезультатРасшифровки));
				
			ИначеЕсли ТипЗнч(РезультатРасшифровки)=Тип("Структура") Тогда
				
				Если РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии")
					ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии")  Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления")
					ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос") Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуВИБ.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуТек.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе     
			// Дополнительные расшифровки, определённые пользователем.
			ЗначениеСпособаРасшифровки = СпособРасшифровкиВход.Значение;
			ТипОбъектаМетаданных			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеСпособаРасшифровки, "ТипОбъектаМетаданных", "");
			Если ЗначениеЗаполнено(ТипОбъектаМетаданных) Тогда
				// Задан объект метаданных. Расшифруем по нему.
				НаименованиеОбъектаМетаданных	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеСпособаРасшифровки, "НаименованиеОбъектаМетаданных", "");
				ФормаРасшифровки				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеСпособаРасшифровки, "ФормаРасшифровки", "");
				ОтборыРасшифровки = ВернутьНастройкиОтбораРасшифровки(ПутьКТаблицеОткрытыхОтчетов, ИмяОбъектаВход, РасшифровкаВход, СтруктураОтветаВход.АдресДанныхРасшифровки);				
				Контекст = ПолучитьКонтекстРасчета(ИмяОбъектаВход, "ФактическоеЗначениеТекущегоПериода", ПутьКТаблицеОткрытыхОтчетов, СформироватьСтруктуруОтборов());
				СтруктураПараметров = ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, ПутьКТаблицеОткрытыхОтчетов, ИмяОбъектаВход, Контекст, ОтборыРасшифровки);
				БизнесАнализКлиентУХ.ОтобразитьРаскрытиеОбъектомИнформационнойБазы(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, СтруктураПараметров);
			Иначе				
				// Тип объекта метаданных не задан. Расшифровываем аналитическим отчетом.
				Если ЗначениеЗаполнено(ЗначениеСпособаРасшифровки.Отчет) Тогда
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Ключ",					 ЗначениеСпособаРасшифровки.Отчет); 
					СтруктураПараметров.Вставить("Расшифровка",				 РасшифровкаВход); 
					СтруктураПараметров.Вставить("АдресДанныхРасшифровки",	 АдресДанныхРасшифровкиВход); 
					СтруктураПараметров.Вставить("Настройки",				 Неопределено); 
					СтруктураПараметров.Вставить("СохраненнаяНастройка",	 ЗначениеСпособаРасшифровки.СохраненнаяНастройка); 
					СтруктураПараметров.Вставить("ФормироватьПриОткрытии",	 Истина); 
					СтруктураПараметров.Вставить("ЭтоРасшифровка",			 Истина);
					ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", СтруктураПараметров);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось получить отчет для расшифровки. Операция отменена.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюРасшифровка(ВыбранныйЭлемент, Параметры) Экспорт
	ОбработатьВыбраннуюРасшифровку(ВыбранныйЭлемент, Параметры.СтруктураОтвета, Параметры.Расшифровка, Параметры.Элемент, Параметры.СтандартнаяОбработка, Параметры.ИмяОбъекта, Параметры.АдресДанныхРасшифровки);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем АдресМассиваРасшифровок, АдресДанныхРасшифровки, URLСхемы, ВыполненноеДействие;
	Перем СписокДоступныхРасшифровок;
	Перем ДанныеРасшифровки;
	
	СтандартнаяОбработка = Ложь;
	ИмяОбъекта = СтрЗаменить(Элемент.Имя, "_Окно", "");
	СтруктураОтвета = ОбработатьРасшифровкуНаСервере(ПутьКТаблицеОткрытыхОтчетов, ИмяОбъекта, Расшифровка, АдресМассиваРасшифровок, АдресДанныхРасшифровки, URLСхемы, ЭтаФорма.УникальныйИдентификатор);
	
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета.Свойство("СписокДоступныхРасшифровок", СписокДоступныхРасшифровок);
	СтруктураОтвета.Свойство("АдресМассиваДоступныхРасшифровок", АдресМассиваРасшифровок);
	
	Если СписокДоступныхРасшифровок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхРасшифровок.Количество() = 1 Тогда
		ВыбранноеЗначение = СписокДоступныхРасшифровок[0];
		ОбработатьВыбраннуюРасшифровку(ВыбранноеЗначение, СтруктураОтвета, Расшифровка, Элемент, СтандартнаяОбработка, ИмяОбъекта, АдресДанныхРасшифровки);
	Иначе
		ПараметрыМеню = Новый Структура;
		ПараметрыМеню.Вставить("СтруктураОтвета", СтруктураОтвета);
		ПараметрыМеню.Вставить("Расшифровка", Расшифровка);
		ПараметрыМеню.Вставить("Элемент", Элемент);
		ПараметрыМеню.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
		ПараметрыМеню.Вставить("ИмяОбъекта", ИмяОбъекта);
		ПараметрыМеню.Вставить("АдресДанныхРасшифровки", АдресДанныхРасшифровки);
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюРасшифровка", ЭтаФорма, ПараметрыМеню);
		ПоказатьВыборИзМеню(Оповещение, СписокДоступныхРасшифровок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПрименитьНастройкиОбработки_Сервер(URLСхемыВход, АдресДанныхРасшифровкиВход, РасшифровкаВход, ПараметрВход)
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемыВход);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровкиВход, ИсточникДоступныхНастроек);
	РезультатФункции = ОбработкаРасшифровки.ПрименитьНастройки(РасшифровкаВход, ПараметрВход);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура СтандартнаяОбработкаРасшифровки_Завершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	Если ПараметрВыполненногоДействия <> Неопределено Тогда
		// Пользователь выбрал действие, для которого нужно менять настройки
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ПоказатьЗначение(, ПараметрВыполненногоДействия);
		Иначе
			Вн_Настройки = ПрименитьНастройкиОбработки_Сервер(ДополнительныеПараметры.URLСхемы, ДополнительныеПараметры.АдресДанныхРасшифровки, ДополнительныеПараметры.Расшифровка, ПараметрВыполненногоДействия);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ДополнительныеПараметры.УниверсальныйОтчет);
			ПараметрыФормы.Вставить("Настройки", Вн_Настройки);
			ПараметрыФормы.Вставить("ЭтоРасшифровка", Истина);
			ПараметрыФормы.Вставить("ФормироватьПриОткрытии", Истина);
			ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы, , Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяОбработкаРасшифровки(Элемент, Расшифровка, СтруктураОтвета,  СтандартнаяОбработка)

	Перем ВыполненноеДействие;
	Перем Настройки;
	
	// Запретим стандартную обработку расшифровки
	
	Попытка
		Если ЭтоАдресВременногоХранилища(СтруктураОтвета.АдресДанныхРасшифровки) Тогда
			// Создадим и инициализируем обработчик расшифровки
			СтандартнаяОбработка = Ложь;
			ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СтруктураОтвета.URLСхемы);
			ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(СтруктураОтвета.АдресДанныхРасшифровки, ИсточникДоступныхНастроек);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Настройки", Настройки);
			СтруктураПараметров.Вставить("Расшифровка", Расшифровка);
			СтруктураПараметров.Вставить("УниверсальныйОтчет", СтруктураОтвета.УниверсальныйОтчет);
			СтруктураПараметров.Вставить("URLСхемы", СтруктураОтвета.URLСхемы);
			СтруктураПараметров.Вставить("АдресДанныхРасшифровки", СтруктураОтвета.АдресДанныхРасшифровки);
			ОписаниеОповещения = Новый ОписаниеОповещения("СтандартнаяОбработкаРасшифровки_Завершение", ЭтаФорма, СтруктураПараметров);
			ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить исходные данные для расшифровки'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось расшифровать значение по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция ОбработкаРасшифровкиМКП(ИмяОбласти, Показатель, ЛокальныеПараметры)
	
	Возврат БизнесАнализВызовСервераУХ.ОбработатьРасшифровкуМКП(ИмяОбласти, Показатель, ПутьКТаблицеОткрытыхОтчетов, ЛокальныеПараметры, ЭтаФорма.УникальныйИдентификатор);	
	
КонецФункции

&НаКлиенте
Процедура АктивизацияСтроки(Элемент)
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ИЗМЕНЕНИЙ ОТБОРОВ НА ПАНЕЛИ ОБЩИХ ОТБОРОВ.
//

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	ЗаписатьТекущиеНастройкиОтборов();	
	ИспользоватьОтборПоОрганизации = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСценариюПриИзменении(Элемент)
	
	ЗаписатьТекущиеНастройкиОтборов();	
	ИспользоватьОтборПоСценарию = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПериодуПриИзменении(Элемент)
	
	ИспользоватьОтборПоПериоду = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВалютеПриИзменении(Элемент)
	
	ЗаписатьТекущиеНастройкиОтборов();	
	ИспользоватьОтборПоВалюте = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С СОХРАНЯЕМЫМИ НАСТРОЙКАМИ.
//

&НаСервере
Функция ПреобразоватьНастройкиПанелиВТаблицуНастроек()
	
	ТаблицаОтветов = Новый ТаблицаЗначений;
	ТаблицаОтветов.Колонки.Добавить("ИмяПоля");
	ТаблицаОтветов.Колонки.Добавить("ЗначениеОтбора");
	
	ЗаписатьНастройкуПоля(ТаблицаОтветов, "ОтборПоОрганизации");
	ЗаписатьНастройкуПоля(ТаблицаОтветов, "ОтборПоПериоду");
	ЗаписатьНастройкуПоля(ТаблицаОтветов, "ОтборПоСценарию");
	ЗаписатьНастройкуПоля(ТаблицаОтветов, "ОтборПоВалюте");
	
	Возврат ТаблицаОтветов;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьТаблицуНастроекВНастройкиПанели(ТаблицаНастроек)
	
	Если ТипЗнч(ТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
		
		ВосстановитьНастройкуПоля(ТаблицаНастроек, "ОтборПоОрганизации");
		ВосстановитьНастройкуПоля(ТаблицаНастроек,"ОтборПоПериоду");
		ВосстановитьНастройкуПоля(ТаблицаНастроек,"ОтборПоСценарию");
		ВосстановитьНастройкуПоля(ТаблицаНастроек,"ОтборПоВалюте");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкуПоля(ТаблицаОтветов, ИмяПоля)
	
	ТекущееПоле =  ТаблицаОтветов.Найти(ИмяПоля, "ИмяПоля");
	Если ТекущееПоле = Неопределено Тогда
		ЭтаФорма[ИмяПоля] = Неопределено;
		ЭтаФорма["Использовать" + ИмяПоля] = Ложь;
	Иначе
		ЭтаФорма["Использовать" + ИмяПоля] = Истина;
		ЭтаФорма[ИмяПоля] = ТекущееПоле.ЗначениеОтбора;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуПоля(ТаблицаОтветов, ИмяПоля)
	
	НоваяСтрока = ТаблицаОтветов.Добавить();
	
	Если ЭтаФорма["Использовать" + ИмяПоля] Тогда
		НоваяСтрока.ИмяПоля = ИмяПоля;
		НоваяСтрока.ЗначениеОтбора = ЭтаФорма[ИмяПоля];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохраняет настройки панели в справочнике Сохраненные настройки.
Процедура СохранитьНастройки()
	
	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		СохраненнаяНастройкаОбъект = СохраненнаяНастройка.ПолучитьОбъект();
		ТекущиеНастройки = Новый Структура("НастройкиПанели, НастройкиПараметров, НастройкиОтборов"
											, ПреобразоватьНастройкиПанелиВТаблицуНастроек()
											, ТиповыеОтчеты_УправляемыйРежимУХ.ПреобразоватьПараметрыДанныхВТаблицуПараметров(КомпоновщикНастроек.Настройки.ПараметрыДанных)
											, ТиповыеОтчеты_УправляемыйРежимУХ.ПреобразоватьНастройкиОтбораВТаблицуОтборов(КомпоновщикНастроек.Настройки.Отбор));
		СохраненнаяНастройкаОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(ТекущиеНастройки);
		Попытка
			СохраненнаяНастройкаОбъект.Записать();
			Модифицированность = Ложь;
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = НСтр("ru = 'Не удалось сохранить настройки'");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНовыйИДКолонки()
	
	Если Объект.КолонкиОтчета.Количество() = 0 ТОгда
		Возврат 1;
	Иначе
		КопияТаблицы = Объект.КолонкиОтчета.Выгрузить();
		КопияТаблицы.Сортировать("Идентификатор Убыв");
		Возврат КопияТаблицы[0].Идентификатор + 1;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработкаИзмененияПроизвольногоОтчета(ТекущаяСтрока) Экспорт
#Если Клиент Тогда
	
	СтруктураНастроек = ТиповыеОтчетыУХ.ПолучитьСтруктуруПараметровТиповогоОтчета(ТекущаяСтрока.УниверсальныйОтчет);
	СтруктураНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	СтруктураНастроек.Вставить("НастройкиКомпоновщика", ТекущаяСтрока.УниверсальныйОтчет.СхемаКомпоновкиДанных.Получить().НастройкиПоУмолчанию);
	ТекущаяСтрока.НастройкиОтчета = СтруктураНастроек;
	ТекущаяСтрока.КомпоновщикНастроек = ТиповыеОтчетыУХ.ПолучитьКомопновщикПоСхемеИНастройкам(ТекущаяСтрока.УниверсальныйОтчет.СхемаКомпоновкиДанных.Получить(), ТекущаяСтрока.НастройкиОтчета.НастройкиКомпоновщика);
	
#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбщуюСхемуКомпоновки(ТекОбъект)
	
	ОбщаяСхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = ОбщаяСхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = ОбщаяСхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПанелиОтчетов.НастройкиОтчета,
	|	СтруктураПанелиОтчетов.УниверсальныйОтчет
	|ИЗ
	|	Справочник.СтруктураПанелиОтчетов КАК СтруктураПанелиОтчетов
	|ГДЕ
	|	СтруктураПанелиОтчетов.Владелец = &Владелец
	|	И СтруктураПанелиОтчетов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВЫборка.Следующий() Цикл
		
		СКД = ТиповыеОтчетыУХ.ПолучитьСхемуКомпоновкиОбъекта(Выборка.УниверсальныйОтчет);
		НастройкиОтчета = Выборка.НастройкиОтчета.Получить();
		
		Если НастройкиОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомпоновщикДанных = ТиповыеОтчетыУХ.ПолучитьКомопновщикПоСхемеИНастройкам(СКД, Выборка.НастройкиОтчета.Получить().НастройкиКомпоновщика);		
		
		Для Каждого ЭлементОтбора Из КомпоновщикДанных.Настройки.ДоступныеПоляОтбора.Элементы Цикл
				
			Если ЭлементОтбора.Папка Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле        = Строка(ЭлементОтбора.Поле);
			НовоеПоле.Заголовок   = ЭлементОтбора.Заголовок;
			НовоеПоле.ПутьКДанным = Строка(ЭлементОтбора.Поле);
			НовоеПоле.ТипЗначения = ЭлементОтбора.Тип;
				
		КонецЦикла;
	КонецЦикла;
	
	НовыйПараметр = ОбщаяСхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "Организация";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = ОбщаяСхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "ПериодОтчета";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = ОбщаяСхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "Сценарий";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = ОбщаяСхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "ОсновнаяВалюта";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	ПутьКОбщейСхемеНастройки = ПоместитьВоВременноеХранилище(ОбщаяСхемаКомпоновкиДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомпоновщикДанных(ТекОбъект)
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКОбщейСхемеНастройки));
	
	НастройкиКомпоновщика = ТекОбъект.НастройкиКомпоновщикаНастроек.Получить();
	
	Если НастройкиКомпоновщика = Неопределено тогда
		ОбщаяСхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПутьКОбщейСхемеНастройки);
		КомпоновщикНастроек.ЗагрузитьНастройки(ОбщаяСхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОткрытьФорму("Справочник.СтруктураПанелиОтчетов.ФормаСписка", Новый Структура("Отбор", Новый Структура("Владелец", Объект.Ссылка)));
	
	
КонецПроцедуры

&НаСервере
Функция ВернутьНастройкиОтбораДляОтчета(ТекОтчет, Расшифровка = Неопределено , АдресДанныхРасшифровки = Неопределено, ИспользуетсяКакРасшифровка = Ложь)
	
	ИсходныеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекСтрока = ТекОбъект.Состав.Найти(ТекОтчет, "УниверсальныйОтчет");
	
	ОтборыОтчета = ТекСтрока.Отбор.Получить();
	ПараметрыОтчета = ТекСтрока.Параметры.Получить();
	
	Если ИспользуетсяКакРасшифровка Тогда // Если отчет используется в зависимой области, то в него передаются все отборы основной области.
		Если Расшифровка <> Неопределено И АдресДанныхРасшифровки <> Неопределено Тогда
			МассивРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, АдресДанныхРасшифровки, КомпоновщикНастроек);
			Справочники.ПроизвольныеОтчеты.Настроить(КомпоновщикНастроек, МассивРасшифровки);
		КонецЕсли;
	ИначеЕсли ОтборыОтчета = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Иначе
		МассивУдаляемыхЭлементов = Новый Массив;
		СтруктураПоиска          = Новый Структура("УниверсальныйОтчет", ТекОтчет);
		Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ОтборыОтчета) = Тип("Структура") Тогда
				Если ОтборыОтчета[Элемент.ЛевоеЗначение] = Неопределено ИЛИ НЕ ОтборыОтчета[Элемент.ЛевоеЗначение] Тогда
					МассивУдаляемыхЭлементов.Добавить(Элемент);
				КонецЕсли;
			Иначе
				МассивУдаляемыхЭлементов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;
		
		Если Расшифровка <> Неопределено И АдресДанныхРасшифровки <> Неопределено Тогда
			МассивРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, АдресДанныхРасшифровки, КомпоновщикНастроек);
			Справочники.ПроизвольныеОтчеты.Настроить(КомпоновщикНастроек, МассивРасшифровки);
		КонецЕсли;
	КонецЕсли;
	
	МассивУдаляемыхПараметров = Новый Массив;
	
	Если ПараметрыОтчета = Неопределено Тогда
		
		Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			Элемент.Использование = Ложь;
		КонецЦикла;
		
	Иначе
		//Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		//	ИмяПараметра = Строка(Элемент.Параметр);
		//	Элемент.Использование = ПараметрыОтчета[ИмяПараметра] <> Неопределено И ПараметрыОтчета[ИмяПараметра];
		//КонецЦикла;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(ИсходныеНастройки);
	ОтборКомпоновщика = Настройки.Отбор;
	Если ТипЗнч(ОтборыОтчета) = Тип("ОтборКомпоновкиДанных") Тогда
		Для Каждого ТекЭлементы Из ОтборыОтчета.Элементы Цикл
			ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборКомпоновщика, Строка(ТекЭлементы.ЛевоеЗначение), ТекЭлементы.ПравоеЗначение, ТекЭлементы.ВидСравнения, , ТекЭлементы.Использование);
		КонецЦикла;
	Иначе
		// Оставляем настройки.
	КонецЕсли;
	Возврат Настройки;
КонецФункции

&НаСервере
Функция ВернутьТекущегоРодителя()
		
	Возврат ТекущийЭлемент.Родитель;
		
КонецФункции

&НаКлиенте
Процедура ЗакрытьОкно(Команда)
	
	УдалитьПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Элементы.ГлавнаяПанель.ТекущаяСтраница = Элементы.СтраницаОтчета;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьНастройкиОтображенияТекущегоОтчетаВНовомОкне(ИмяЭлемента, ПутьКТаблицеОткрытыхОтчетов)
	
	ОткрытыеОтчеты = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	
	ТекСтрока = ОткрытыеОтчеты.Найти(ИмяЭлемента, "ИмяОкна");
	
	Если ТекСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура("Отчет, СохраненнаяНастройка, НастройкиКомпоновщика", ТекСтрока.УниверсальныйОтчет, ТекСтрока.НастройкиОтчета, ТекСтрока.НастройкиКомпоновщика);
	
КонецФункции

&НаСервере
Процедура ОбновитьПодчиненныеОтчеты(ИмяОбъекта, Расшифровка = Неопределено, АдресДанныхРасшифровки = Неопределено, Показатель = Неопределено, ВнешнийКонтекст = Неопределено, ПлановыйСценарий = Неопределено)
	
	Перем ВыводимыйДокумент;
	
	Если ЭтоАдресВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов) Тогда
		ТаблицаОткрытыхОтчетов = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
		СтрокаОтчета           = ТаблицаОткрытыхОтчетов.Найти(ИмяОбъекта, "ИмяОкна");
		ОтчетыРасшифровки      = Объект.Состав.НайтиСтроки(Новый Структура("РасшифровываемаяОбласть", СтрокаОтчета.ИдентификаторОбласти));
		
		ИсходныеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
		ДополнитьНастройкиКомпоновщикаНастройкамиПанели(КомпоновщикНастроек.Настройки);
		
		Если СтрокаОтчета.ВидПроизвольногоОтчета = 3 Тогда //Создадим отбор на основании данных внешнего контекста для МКП.
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек.Отбор, "Организация"   , СтрокаОтчета.ВнешнийКонтекст.Организация);
			ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек.Отбор, "ПериодОтчета"  , СтрокаОтчета.ВнешнийКонтекст.БазовыйПериод);
			ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек.Отбор, "Сценарий"      , СтрокаОтчета.ВнешнийКонтекст.БазовыйСценарий);
			ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек.Отбор, "ОсновнаяВалюта", СтрокаОтчета.ВнешнийКонтекст.ОсновнаяВалюта);
			Отборы = КомпоновщикНастроек.Настройки;
		Иначе
			Отборы = ВернутьНастройкиОтбораДляОтчета(СтрокаОтчета.УниверсальныйОтчет, Расшифровка, АдресДанныхРасшифровки, Истина);
		КонецЕсли;
		
		Для Каждого ОтчетРасшифровки Из ОтчетыРасшифровки Цикл
			СтруктураПоискаРасшифровки = Новый Структура;
			СтруктураПоискаРасшифровки.Вставить("УниверсальныйОтчет", ОтчетРасшифровки.УниверсальныйОтчет);
			СтруктураПоискаРасшифровки.Вставить("РасшифровываемаяОбласть", СтрокаОтчета.ИдентификаторОбласти);
			СтруктураПоискаРасшифровки.Вставить("ИдентификаторОбласти", ОтчетРасшифровки.ИдентификаторОбласти);
			НайденныеСтроки = ТаблицаОткрытыхОтчетов.НайтиСтроки(СтруктураПоискаРасшифровки);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаОтчетаРасшифровки = НайденныеСтроки[0];
				ИмяОкна                 = СтрокаОтчетаРасшифровки.ИмяОкна;
				
				Если СтрокаОтчетаРасшифровки.УниверсальныйОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя Тогда
					// Динамика показателя.
					ДанныеРасшифровки = Неопределено;
					СтруктураПараметровДиаграммы = Новый Структура;
					ТекВариантРазмещенияЛегенды = СтрокаОтчетаРасшифровки.ВариантРазмещенияЛегендыДиаграммы;
					СтруктураПараметровДиаграммы.Вставить("ВариантРазмещенияЛегендыДиаграммы", ТекВариантРазмещенияЛегенды);
					ВыводимыйДокумент = БизнесАнализВызовСервераУХ.ВернутьДинамикуПоказателя(Показатель.ИсточникЗначенияТекущегоПериода, Показатель.ИсточникПлановогоЗначения, ВнешнийКонтекст, ПлановыйСценарий, СтрокаОтчетаРасшифровки.КоличествоПериодовДляОтображения, СтрокаОтчетаРасшифровки.ОтображениеРасшифровки, ИмяОбъекта, ДанныеРасшифровки, СтруктураПараметровДиаграммы);
					РезультатВывода = Новый Структура("ДанныеРасшифровки, URLСхемы", ДанныеРасшифровки, Неопределено);
				ИначеЕсли СтрокаОтчетаРасшифровки.УниверсальныйОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя Тогда
					// Структура показателя.
					ДанныеРасшифровки = Неопределено;
					СтруктураПараметровДиаграммы = Новый Структура;
					ТекВариантРазмещенияЛегенды		 = СтрокаОтчетаРасшифровки.ВариантРазмещенияЛегендыДиаграммы;
					ТекКоличествоСтолбцовДиаграммы	 = СтрокаОтчетаРасшифровки.КоличествоСтолбцовДиаграммы;
					СтруктураПараметровДиаграммы.Вставить("ВариантРазмещенияЛегендыДиаграммы", ТекВариантРазмещенияЛегенды);
					СтруктураПараметровДиаграммы.Вставить("КоличествоСтолбцовДиаграммы", ТекКоличествоСтолбцовДиаграммы);
					ВыводимыйДокумент = БизнесАнализВызовСервераУХ.ВернутьСтруктуруПоказателяПоАналитике(Показатель.ИсточникЗначенияТекущегоПериода, ВнешнийКонтекст, СтрокаОтчетаРасшифровки.НомерАналитики, СтрокаОтчетаРасшифровки.ОтображениеРасшифровки, ИмяОкна, ДанныеРасшифровки, СтруктураПараметровДиаграммы);
					РезультатВывода = Новый Структура("ДанныеРасшифровки, URLСхемы", ДанныеРасшифровки, Неопределено);
				Иначе
					ИспользуетсяОтчет = СтрокаОтчетаРасшифровки.УниверсальныйОтчет.ПредставлениеЭлементаОтчета <> Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
					РезультатВывода = ВывестиОтчет(СтрокаОтчетаРасшифровки.УниверсальныйОтчет, УникальныйИдентификатор, СтрокаОтчетаРасшифровки.НастройкиОтчета, Отборы, ВыводимыйДокумент, ИспользуетсяОтчет, ИмяОкна);
				КонецЕсли;
				
				Если РезультатВывода <> Неопределено Тогда
					
					ЭтаФорма[ИмяОкна].Очистить();
					Если ТипЗнч(ЭтаФорма[ИмяОкна]) = Тип("Диаграмма") Тогда
						Если ТипЗнч(ВыводимыйДокумент) = Тип("Диаграмма") Тогда
							ВывестиДиаграммуОтдельно(ВыводимыйДокумент, ЭтаФорма[ИмяОкна]);
						ИначеЕсли ТипЗнч(ВыводимыйДокумент) = Тип("ТабличныйДокумент") И ВыводимыйДокумент.Рисунки.Количество() > 0 Тогда
							ВывестиДиаграммуОтдельно(ВыводимыйДокумент.Рисунки[0].Объект, ЭтаФорма[ИмяОкна]);
						КонецЕсли;
					Иначе
						ЭтаФорма[ИмяОкна].Вывести(ВыводимыйДокумент);
					КонецЕсли;
					
					СтрокаОтчетаРасшифровки.АдресДанныеРасшифровки = РезультатВывода.ДанныеРасшифровки;
					СтрокаОтчетаРасшифровки.URLСхемы          = РезультатВывода.URLСхемы;
					СтрокаОтчетаРасшифровки.ВнешнийКонтекст   = ВнешнийКонтекст;
					Элементы[ИмяОкна + "_Страницы"].ТекущаяСтраница = Элементы[ИмяОкна];
				Иначе
					Элементы[ИмяОкна + "_Страницы"].ТекущаяСтраница = Элементы[ИмяОкна + "_Предупреждение"];
				КонецЕсли;
				//Обновим заголовок зависимой области.
				ИмяРеквизитаПоказателя = ИмяОкна + "_Показатель";
				Если ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ИмяРеквизитаПоказателя) <> Неопределено Тогда
					ЭтаФорма[ИмяРеквизитаПоказателя] = Показатель;
				Иначе
					// Область не найдена. Не обновляем.
				КонецЕсли;
			Иначе
				
			КонецЕсли;
			
		КонецЦикла;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(ИсходныеНастройки);
		УдалитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
		ПутьКТаблицеОткрытыхОтчетов = ПоместитьВоВременноеХранилище(ТаблицаОткрытыхОтчетов, УникальныйИдентификатор);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить адрес таблицы открытых отчетов'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СТ_ОбновитьЗависимые() 
	Если  ТипЗнч(ЭтаФорма[ТекущийМакет].ВыделенныеОбласти[0].Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СТ_ОбновитьЗависимыеСервер(ЭтаФорма[ТекущийМакет].ВыделенныеОбласти[0].Расшифровка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СТ_ОбновитьЗависимыеСервер(Расшифровка = Неопределено, АдресДанныхРасшифровки = Неопределено, Показатель = Неопределено, ВнешнийКонтекст = Неопределено, ПлановыйСценарий = Неопределено)
	
	Перем ВыводимыйДокумент;
	
	
		
	ТаблицаОткрытыхОтчетов = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	СтрокаОтчета           = ТаблицаОткрытыхОтчетов.Найти(ТекущееИмяОкна, "ИмяОкна");
	ОтчетыРасшифровки      = Объект.Состав.НайтиСтроки(Новый Структура("РасшифровываемаяОбласть", СтрокаОтчета.ИдентификаторОбласти));
	
	ТекущийОбъект_ = ЭтаФорма[ТекущийОбъект];
	
	Если Расшифровка = Неопределено Тогда
		 Для Каждого ОтчетРасшифровки Из ОтчетыРасшифровки Цикл
			 СтрокаОтчетаРасшифровки = ТаблицаОткрытыхОтчетов.Найти(ОтчетРасшифровки.УниверсальныйОтчет, "УниверсальныйОтчет");
			 ИмяОкна                 = СтрокаОтчетаРасшифровки.ИмяОкна;
			 ЭтаФорма[СтрЗаменить(СоответствиеИменИОбъектовСТ.НайтиПоЗначению(ИмяОкна).Представление,"_Окно","")].Очистить();
			 АналитикиОтбораИсточник = РеквизитФормыВЗначение(ТекущийОбъект).ПолучитьРасшифровкуТаблицы();
			 УстановитьОтборыЗависимогоОбъекта(АналитикиОтбораИсточник,СтрокаОтчетаРасшифровки);
		 КонецЦикла;
	Возврат;	 
	КонецЕсли;
	
	АналитикиОтбораИсточник = РеквизитФормыВЗначение(ТекущийОбъект).ПолучитьРасшифровкуТаблицы(Расшифровка);
   
		
	Для Каждого ОтчетРасшифровки Из ОтчетыРасшифровки Цикл
		
		СтрокаОтчетаРасшифровки = ТаблицаОткрытыхОтчетов.Найти(ОтчетРасшифровки.УниверсальныйОтчет, "УниверсальныйОтчет");
		ИмяОкна                 = СтрокаОтчетаРасшифровки.ИмяОкна;

		ИспользуетсяОтчет = Истина;
		ВыводимыйДокумент = Новый ТабличныйДокумент;
		УстановитьОтборыЗависимогоОбъекта(АналитикиОтбораИсточник,СтрокаОтчетаРасшифровки);
		
		РезультатВывода = ВывестиОтчет(СтрокаОтчетаРасшифровки.УниверсальныйОтчет, УникальныйИдентификатор, СтрокаОтчетаРасшифровки.НастройкиОтчета, , ВыводимыйДокумент, ИспользуетсяОтчет, ИмяОкна);
		//КонецЕсли;
		//
		//ВыводимыйДокумент = ТекущийОбъект;
		     
		Если РезультатВывода <> Неопределено Тогда
			
			
			Если НЕ СоответствиеИменИОбъектовСТ.НайтиПоЗначению(ИмяОкна) = Неопределено Тогда
				ЭтаФорма[СтрЗаменить(СоответствиеИменИОбъектовСТ.НайтиПоЗначению(ИмяОкна).Представление,"_Окно","")].Очистить();
				ЭтаФорма[СтрЗаменить(СоответствиеИменИОбъектовСТ.НайтиПоЗначению(ИмяОкна).Представление,"_Окно","")] = ВыводимыйДокумент;
			Иначе	
				ЭтаФорма[ИмяОкна].Очистить();
				ЭтаФорма[ИмяОкна] = ВыводимыйДокумент;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	//КомпоновщикНастроек.ЗагрузитьНастройки(ИсходныеНастройки);
	//УдалитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	//ПутьКТаблицеОткрытыхОтчетов = ПоместитьВоВременноеХранилище(ТаблицаОткрытыхОтчетов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыЗависимогоОбъекта(АналитикиОтбораИсточник,СтрокаОтчетаРасшифровки)
	
	//Если КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",СтрокаОтчетаРасшифровки.ИмяОкна,Истина)).Количество()=1 Тогда
	//	  Спсокиспользованных = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",СтрокаОтчетаРасшифровки.ИмяОкна,Истина));
	//	  ТекущийОбъектИмя = Спсокиспользованных[0].ИмяОбъекта;
	//	  ст_ОбработкаОбъект = РеквизитФормыВЗначение(ТекущийОбъектИмя);
	//	  Горизонт = Справочники.Периоды.НайтиПоКоду("2015");
	//	  ТаблицаСтраницы =  ПолучитьИзВременногоХранилища(ст_ОбработкаОбъект.АдресТаблицИнтерфейса).ТаблицаСтраницы;
	//	  
	//	  СтруктураФильтров = Новый Структура;
	//	  Для Каждого Стр ИЗ ТаблицаСтраницы Цикл
	//		   Если АналитикиОтбораИсточник.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
	//			    СтруктураФильтров.Вставить(Стр.Код,АналитикиОтбораИсточник[СтрЗаменить(Стр.Код,"Фильтр_","")]);
	//		   КонецЕсли;	   
	//	  КонецЦикла;
	//	  ст_ОбработкаОбъект.АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(СтруктураФильтров,Новый УникальныйИдентификатор);
	//	  ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъектИмя);
	//	  
	//  Иначе	
	//	  СпсокНеиспользованных = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна,Использован",СтрокаОтчетаРасшифровки.ИмяОкна,Ложь));
	//	  
	//	  ТекущийОбъектИмя =  СпсокНеиспользованных[0].ИмяОбъекта;
	//	  СТ_ОбработкаОбъект = Обработки.СводнаяТаблица.Создать();
	//	  Горизонт = Справочники.Периоды.НайтиПоКоду("2015");
	//	  
	//	  СТ_ОбработкаОбъект.ПолучитьИтоговыйМакет(Новый ТабличныйДокумент,СтрокаОтчетаРасшифровки.УниверсальныйОтчет,Горизонт,ПолучитьСтрукутуруОбщихФильтров());
	//	  СпсокНеиспользованных[0].Использован = Истина;
	//	  ТаблицаСтраницы =  ПолучитьИзВременногоХранилища(ст_ОбработкаОбъект.АдресТаблицИнтерфейса).ТаблицаСтраницы;
	//	   СтруктураФильтров = Новый Структура;
	//	  Для Каждого Стр ИЗ ТаблицаСтраницы Цикл
	//		   Если АналитикиОтбораИсточник.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
	//			    СтруктураФильтров.Вставить(Стр.Код,АналитикиОтбораИсточник[СтрЗаменить(Стр.Код,"Фильтр_","")]);
	//		   КонецЕсли;	   
	//	  КонецЦикла;
	//      ст_ОбработкаОбъект.АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(СтруктураФильтров,Новый УникальныйИдентификатор);
	//      СТ_ОбработкаОбъект.ПолучитьИтоговыйМакет(Новый ТабличныйДокумент,СтрокаОтчетаРасшифровки.УниверсальныйОтчет,Горизонт,ПолучитьСтрукутуруОбщихФильтров());


	//	  ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъектИмя);
	//	  
	//  КонецЕсли;	
	//  
	//   Элементы[СтрЗаменить(ТекущийОбъектИмя,"СТ_Объект","СТ_Поле")+"_Заголовок"].Заголовок =
	//   СводнаяТаблицаУХ.СформироватьПредставлениеОтборов(ЭтаФорма[ТекущийОбъектИмя].Бланк,Горизонт,ТаблицаСтраницы,СтруктураФильтров);

	  	          
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастраиваемыйОтчет(Расшифровка, АдресДанныхРасшифровок) Экспорт
	
	НастраиваемыеОтчеты = АналитическиеОтчетыУХ.ПолучитьНастраиваемыеОтчетыДляРасшифровки_УправляемоеПриложение(ПоместитьВоВременноеХранилище(Расшифровка), АдресДанныхРасшифровок);
	
	Если НастраиваемыеОтчеты = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдено ни одного экземпляра отчета'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	ИначеЕсли ТипЗнч(НастраиваемыеОтчеты) = Тип("Строка") Тогда
		ДокументСсылка = Неопределено;

		ПараметрыФормы = Новый Структура("Расшифровка, АдресДанныхРасшифровки", Расшифровка, АдресДанныхРасшифровок);
		ДопПараметры = Новый Структура("АдресДанныхРасшифровок, НастраиваемыеОтчеты, Расшифровка", 
										АдресДанныхРасшифровок, НастраиваемыеОтчеты, Расшифровка);
										
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОткрытьНастраиваемыйОтчет", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораНастраиваемогоОтчета_Управляемая", 
						ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        Возврат;
		
	Иначе
		ДокументСсылка = НастраиваемыеОтчеты;
	КонецЕсли;
	
	ОткрытьФормуОтчета(АдресДанныхРасшифровок, ДокументСсылка, Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастраиваемыйОтчет(Результат, ДополнительныеПараметры) Экспорт
    
    АдресДанныхРасшифровок 	= ДополнительныеПараметры.АдресДанныхРасшифровок;
    НастраиваемыеОтчеты		= ДополнительныеПараметры.НастраиваемыеОтчеты;
    Расшифровка 			= ДополнительныеПараметры.Расшифровка;
        
    ДокументСсылка = Результат;
    
    ОткрытьФормуОтчета(АдресДанныхРасшифровок, ДокументСсылка, Расшифровка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(АдресДанныхРасшифровок, ДокументСсылка, Расшифровка)
    
    Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		
		Показатели = АналитическиеОтчетыУХ.ПолучитьПоказателиНастраиваемогоОтчетаДляРасшифровки_УправляемоеПриложение(
													ПоместитьВоВременноеХранилище(Расшифровка), 
													АдресДанныхРасшифровок, 
													ПоместитьВоВременноеХранилище(ДокументСсылка)
												);
		
		ПараметрыФормы = Новый Структура("Ключ, МассивПоказателей", ДокументСсылка, Показатели);		
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", ПараметрыФормы);
		
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьРасшифровкиТекущегоОтчета(ПутьКТаблицеОткрытыхОтчетов, ИмяЭлемента)
	
	ОткрытыеОтчеты = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	ТекСтрока      = ОткрытыеОтчеты.Найти(ИмяЭлемента, "ИмяОкна");
	Если ТекСтрока = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ТекСтрока.УниверсальныйОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
			Возврат Новый ФиксированнаяСтруктура("URLСхемы, АдресДанныеРасшифровки, ВидПроизвольногоОтчета, ИмяОкна, ИмяСтраницы, НастройкиОтчета, УниверсальныйОтчет, ВнешнийКонтекст, Расшифровки, ЕстьЗависимыеОбласти"
												, ТекСтрока.URLСхемы
												, ТекСтрока.АдресДанныеРасшифровки
												, ТекСтрока.ВидПроизвольногоОтчета
												, ТекСтрока.ИмяОкна
												, ТекСтрока.ИмяСтраницы
												, ТекСтрока.НастройкиОтчета
												, ТекСтрока.УниверсальныйОтчет
												, ТекСтрока.ВнешнийКонтекст
												, ТекСтрока.УниверсальныйОтчет.Расшифровки.Получить()
												, ОткрытыеОтчеты.Найти(ТекСтрока.ИдентификаторОбласти, "РасшифровываемаяОбласть") <> Неопределено);
	Иначе
		СтрокаРодитель = ОткрытыеОтчеты.Найти(ТекСтрока.РасшифровываемаяОбласть, "ИдентификаторОбласти");
		Если СтрокаРодитель = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый ФиксированнаяСтруктура("URLСхемы, АдресДанныеРасшифровки, ВидПроизвольногоОтчета, ИмяОкна, ИмяСтраницы, НастройкиОтчета, УниверсальныйОтчет, ВнешнийКонтекст, НомерАналитики"
												, ТекСтрока.URLСхемы
												, ТекСтрока.АдресДанныеРасшифровки
												, ТекСтрока.ВидПроизвольногоОтчета
												, СтрокаРодитель.ИмяОкна
												, СтрокаРодитель.ИмяСтраницы
												, СтрокаРодитель.НастройкиОтчета
												, ТекСтрока.УниверсальныйОтчет
												, ТекСтрока.ВнешнийКонтекст
												, ТекСтрока.НомерАналитики);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает копию таблицы расшифровок ТаблицаРасшифровокВход, куда добавлены 
// спецэффические расшифровки показателя МКП ПоказательВход.
&НаСервереБезКонтекста
Функция ДополнитьРасшифровкамиПоказателяМКП(ПоказательВход, ТаблицаРасшифровокВход)
	РезультатФункции = ТаблицаРасшифровокВход.Скопировать();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Ссылка,
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ТипОбъектаМетаданных,
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.НаименованиеОбъектаМетаданных,
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ФормаРасшифровки,
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ИдентификаторСтроки,
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Представление,
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Ссылка.Владелец КАК Показатель
		|ИЗ
		|	Справочник.РасшифровкиАналитическихОтчетов.РасшифровкиОбъектомИнформационнойБазы КАК РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы
		|ГДЕ
		|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Ссылка.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ПоказательВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		НоваяСтрока.ТипОбъектаМетаданных			 = ВыборкаДетальныеЗаписи.ТипОбъектаМетаданных;
		НоваяСтрока.НаименованиеОбъектаМетаданных	 = ВыборкаДетальныеЗаписи.НаименованиеОбъектаМетаданных;
		НоваяСтрока.ФормаРасшифровки				 = ВыборкаДетальныеЗаписи.ФормаРасшифровки;
		НоваяСтрока.Представление					 = ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Добавляет в меню расшифровок СписокМенюВход расшифровки объектами информационной базы
// для объектов из таблицы с адресом ПутьКТаблицеОткрытыхОтчетовВход в окне панели ИмяОкнаВход. 
&НаСервереБезКонтекста
Процедура ДобавитьРасшифровкиОбъектаТекущегоОтчета(ПутьКТаблицеОткрытыхОтчетовВход, СписокМенюВход, ИмяОкнаВход, ПоказательВход)
	ОткрытыеОтчеты = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетовВход);
	ТекСтрока      = ОткрытыеОтчеты.Найти(ИмяОкнаВход, "ИмяОкна");
	КартинкаЖурналДокументов = БиблиотекаКартинок.ЖурналДокументов;
	Если ТекСтрока = Неопределено Тогда
		// Строка не найдена. Не добавляем.
	ИначеЕсли ТипЗнч(ТекСтрока.УниверсальныйОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
		ТекОтчет = ТекСтрока.УниверсальныйОтчет;
		СтруктураТаблицРасшифровки = БизнесАнализСерверУХ.ПолучитьСтруктуруТаблицРасшифровкиОбъектомИнформационнойБазыПоВладельцу(ТекОтчет);
		РасшифровкиОбъектом = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТаблицРасшифровки, "РасшифровкиОбъектом", Новый ТаблицаЗначений);
		Если ПоказательВход <> Неопределено Тогда
			РасшифровкиОбъектом = ДополнитьРасшифровкамиПоказателяМКП(ПоказательВход, РасшифровкиОбъектом);
		Иначе
			// Показатель не задан. Не добавляем спецэффические расшифровки.
		КонецЕсли;
		Для Каждого ТекРасшифровкиОбъектом Из РасшифровкиОбъектом Цикл
			СтруктураДобавления = Новый Структура;
			СтруктураДобавления.Вставить("Отчет", Неопределено);
			СтруктураДобавления.Вставить("Поля", Неопределено);
			СтруктураДобавления.Вставить("Представление", Неопределено);
			СтруктураДобавления.Вставить("СохраненнаяНастройка", Неопределено);
			СтруктураДобавления.Вставить("ТипОбъектаМетаданных", ТекРасшифровкиОбъектом.ТипОбъектаМетаданных);
			СтруктураДобавления.Вставить("НаименованиеОбъектаМетаданных", ТекРасшифровкиОбъектом.НаименованиеОбъектаМетаданных);
			СтруктураДобавления.Вставить("ФормаРасшифровки", ТекРасшифровкиОбъектом.ФормаРасшифровки);
			ФиксСтруктура = Новый ФиксированнаяСтруктура(СтруктураДобавления);
			Если СокрЛП(ТекРасшифровкиОбъектом.Представление) <> "" Тогда
				ПредставлениеОтчета = ТекРасшифровкиОбъектом.Представление;
			Иначе
				ПредставлениеОтчета = ОбщегоНазначенияКлиентСерверУХ.НаименованиеПоКоду(ТекРасшифровкиОбъектом.НаименованиеОбъектаМетаданных);
			КонецЕсли;
			СписокМенюВход.Добавить(ФиксСтруктура, ПредставлениеОтчета, , КартинкаЖурналДокументов);
		КонецЦикла;
	Иначе
		// Неизвестный вариант. Не добавляем.
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьРасшифровкуНаСервере(ПутьКТаблицеОткрытыхОтчетов, ИмяЭлемента, Расшифровка, АдресМассиваРасшифровок, знач АдресДанныхРасшифровки, URLСхемы, UIDФормы)
	
	Перем МассивПолейРасшифровки;
	СписокДоступныхРасшифровок = Новый СписокЗначений;
	ТекСтрока = ВернутьРасшифровкиТекущегоОтчета(ПутьКТаблицеОткрытыхОтчетов, ИмяЭлемента);
	АдресДанныхРасшифровки = ТекСтрока.АдресДанныеРасшифровки;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		ДанныеРасшифровки = АдресДанныхРасшифровки;
		Если ТекСтрока.ВидПроизвольногоОтчета = 0 Тогда
			Расшифровки       = ТекСтрока.УниверсальныйОтчет.Расшифровки.Получить();
			Справочники.ПроизвольныеОтчеты.ПолучитьДоступныеРасшифровки(ТекСтрока.УниверсальныйОтчет, ДанныеРасшифровки, Расшифровка, Расшифровки, СписокДоступныхРасшифровок, МассивПолейРасшифровки, ТекСтрока.URLСхемы, UIDФормы);
			РаскрытиеПоказателя = Ложь;
			СписокДоступныхРасшифровок.Вставить(0, "ОткрытьВОтдельномОкне", НСтр("ru = 'Открыть область в новом окне'"), , БиблиотекаКартинок.АналитическиеОтчеты);
			Если ТекСтрока.ЕстьЗависимыеОбласти Тогда
				СписокДоступныхРасшифровок.Вставить(0, "ОбновитьОтчеты", НСтр("ru = 'Обновить зависимые области'"), , БиблиотекаКартинок.ВводНаОсновании);
			КонецЕсли;
		ИначеЕсли ТекСтрока.УниверсальныйОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя Тогда
			МассивПолейРасшифровкиСРесурсами = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, Неопределено, Истина);
			СтруктураДопПараметров = Новый Структура;
			Для Каждого Элемент Из МассивПолейРасшифровкиСРесурсами Цикл
				Если Элемент.Поле = "ВидСерии" Тогда
					Если Элемент.Значение = Перечисления.ВидыСерийДинамикиПоказателя.Прогноз Тогда
						СообщениеПользователю = Новый СообщениеПользователю;
						СообщениеПользователю.Текст = НСтр("ru = 'Прогнозные данные не расшифровываются'");
						СообщениеПользователю.Сообщить();
						Возврат Неопределено;
					ИначеЕсли Элемент.Значение = Перечисления.ВидыСерийДинамикиПоказателя.План Тогда
						СтруктураДопПараметров.Вставить("ПлановоеЗначение", Истина);
					Иначе
						СтруктураДопПараметров.Вставить("ПлановоеЗначение", Ложь);
					КонецЕсли;
					
				ИначеЕсли Элемент.Поле = "ДатаНачала" Тогда
					СтруктураДопПараметров.Вставить("ДатаНачала", Элемент.Значение);
				КонецЕсли;
			КонецЦикла;
			СтруктураДопПараметров.Вставить("ИмяОкна", ТекСтрока.ИмяОкна);
			СтруктураДопПараметров.Вставить("НомерАналитики", ТекСтрока.НомерАналитики);
			СписокДоступныхРасшифровок.Добавить(Новый ФиксированнаяСтруктура("ДополнительныеРасшифровки, ВнешнийКонтекст", СтруктураДопПараметров, ТекСтрока.ВнешнийКонтекст), Нстр("ru = 'Расшифровать'"));
			РаскрытиеПоказателя = Истина;
		ИначеЕсли ТекСтрока.УниверсальныйОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя Тогда
			МассивПолейРасшифровкиСРесурсами = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, Неопределено, Истина);
			
			СтруктураДопПараметров = Новый Структура;
			Для Каждого Элемент Из МассивПолейРасшифровкиСРесурсами Цикл
				
				Если Элемент.Поле = "Аналитика" Тогда
					
					СтруктураДопПараметров.Вставить("Аналитика", Элемент.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СписокДоступныхРасшифровок.Добавить(Новый ФиксированнаяСтруктура("ДополнительныеРасшифровки, ВнешнийКонтекст", СтруктураДопПараметров, ТекСтрока.ВнешнийКонтекст), Нстр("ru = 'Расшифровать'"));
			РаскрытиеПоказателя = Истина;
			СтруктураДопПараметров.Вставить("ИмяОкна", ТекСтрока.ИмяОкна);
			СтруктураДопПараметров.Вставить("НомерАналитики", ТекСтрока.НомерАналитики);
		Иначе
			ПоказательРасшифровки = Справочники.ПроизвольныеОтчеты.ВернутьРасшифровываемыйПоказатель(ДанныеРасшифровки, Расшифровка);
			СписокДоступныхРасшифровок.Добавить(Новый ФиксированнаяСтруктура("ПоказательРасшифровки, ВнешнийКонтекст", ПоказательРасшифровки, ТекСтрока.ВнешнийКонтекст), Нстр("ru = 'Раскрытие по аналитикам'"));
			РаскрытиеПоказателя = Истина;
		КонецЕсли;
		
		СтруктураРезультат = Новый Структура;
		СтруктураРезультат.Вставить("СписокДоступныхРасшифровок", СписокДоступныхРасшифровок);
		СтруктураРезультат.Вставить("АдресМассиваДоступныхРасшифровок", МассивПолейРасшифровки);
		СтруктураРезультат.Вставить("РаскрытиеПоказателя", РаскрытиеПоказателя);
		СтруктураРезультат.Вставить("URLСхемы", ТекСтрока.URLСхемы);
		СтруктураРезультат.Вставить("УниверсальныйОтчет", ТекСтрока.УниверсальныйОтчет);
		Если ЭтоАдресВременногоХранилища(ТекСтрока.АдресДанныеРасшифровки) Тогда
			СтруктураРезультат.Вставить("АдресДанныхРасшифровки", ТекСтрока.АдресДанныеРасшифровки);
		Иначе
			СтруктураРезультат.Вставить("АдресДанныхРасшифровки", ПоместитьВоВременноеХранилище(ТекСтрока.АдресДанныеРасшифровки));
		КонецЕсли;
		РезультатФункции = Новый ФиксированнаяСтруктура(СтруктураРезультат);
		Возврат РезультатФункции;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтекстРасчета(ИмяОкна, ИмяПараметра, ПутьКТаблицеОткрытыхОтчетов, СтруктураОтборовВход = Неопределено)
	// Инициализация.
	Контекст = Новый Структура;
	ПустойПериод		 = Справочники.Периоды.ПустаяСсылка();
	ПустойСценарий		 = Справочники.Сценарии.ПустаяСсылка();
	ПустаяОрганизация	 = Справочники.Организации.ПустаяСсылка();
	ПустаяВалюта		 = Справочники.Валюты.ПустаяСсылка();
	ПустойПроект		 = Справочники.Проекты.ПустаяСсылка();
	ОрганизацияНовая				 = ПустаяОрганизация;
	ОсновнаяВалютаНовая				 = ПустаяВалюта;
	БазовыйПериодНовый				 = ПустойПериод;
	ПериодСравненияНовый			 = ПустойПериод;
	ПериодПрогнозНовый				 = ПустойПериод;
	БазовыйСценарийНовый			 = ПустойСценарий;
	ПлановыйСценарийНовый			 = ПустойСценарий;
	ИспользуемаяИБНовая				 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
	ВнешняяИБНовая					 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
	АнализЧувствительностиНовый		 = Ложь;
	ЧтениеНеактуальныхЗаписейНовое	 = Истина;
	УправляемыйРежимНовый			 = Истина;
	ПериодОтчетаНовый				 = ПустойПериод;
	ПериодНачало					 = ПустойПериод;
	ПериодОкончание					 = ПустойПериод;
	СценарийНовый					 = ПустойСценарий;
	// Получение данных.
	Если ЭтоАдресВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов) Тогда
		// Получение данных из временного хранилища.
		ОткрытыеОтчеты = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
		Если ТипЗнч(ОткрытыеОтчеты) = Тип("ТаблицаЗначений") Тогда
			ТекСтрока = ОткрытыеОтчеты.Найти(ИмяОкна, "ИмяОкна");
			Если СтруктураОтборовВход = Неопределено Тогда
				СтруктураОтборовРабочий = Новый Структура;
			Иначе
				СтруктураОтборовРабочий = СтруктураОтборовВход;
			КонецЕсли;
			Если ТекСтрока = Неопределено Тогда
				Возврат Неопределено;				// Не данных.
			КонецЕсли;
			Если ТипЗнч(ТекСтрока.ВнешнийКонтекст) = Тип("Структура") Тогда
				// Заполнение основных данных из внешнего контекста.
				СтруктураКонтекста = ТекСтрока.ВнешнийКонтекст;
				ОрганизацияНовая				 = СтруктураКонтекста.Организация;
				ОсновнаяВалютаНовая				 = СтруктураКонтекста.ОсновнаяВалюта;
				БазовыйПериодНовый				 = СтруктураКонтекста.БазовыйПериод;
				ПериодСравненияНовый			 = СтруктураКонтекста.ПериодСравнения;
				ПериодПрогнозНовый				 = СтруктураКонтекста.ПериодПрогноз;
				БазовыйСценарийНовый			 = СтруктураКонтекста.БазовыйСценарий;
				ПлановыйСценарийНовый			 = СтруктураКонтекста.ПлановыйСценарий;
				ИспользуемаяИБНовая				 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
				ВнешняяИБНовая					 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
				АнализЧувствительностиНовый		 = Ложь;
				ЧтениеНеактуальныхЗаписейНовое	 = Истина;
				УправляемыйРежимНовый			 = Истина;
				ПериодНачало					 = СтруктураКонтекста.ПериодНачало;
				ПериодОкончание					 = СтруктураКонтекста.БазовыйПериод;
				// Выбор сценария и периода в зависимости от операнда.
				Если ИмяПараметра = "ФактическоеЗначениеТекущегоПериода" Тогда
					ПериодОтчетаНовый	 = СтруктураКонтекста.БазовыйПериод;
					СценарийНовый		 = СтруктураКонтекста.БазовыйСценарий;
				ИначеЕсли ИмяПараметра = "ФактическоеЗначениеПредыдущегоПериода" Тогда
					ПериодОтчетаНовый	 = СтруктураКонтекста.ПериодСравнения;
					СценарийНовый		 = СтруктураКонтекста.БазовыйСценарий;
				ИначеЕсли ИмяПараметра = "ПлановоеЗначение" Тогда
					ПериодОтчетаНовый	 =  СтруктураКонтекста.БазовыйПериод;
					СценарийНовый		 = СтруктураКонтекста.ПлановыйСценарий;
				Иначе
					ПериодОтчетаНовый	 = ПустойПериод;
					СценарийНовый		 = ПустойСценарий;
				КонецЕсли;
			Иначе
				
			КонецЕсли;
		Иначе
			// Заполнение основных данных из структуры отбора.
			ОрганизацияНовая				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ОтборПоОрганизации", ПустаяОрганизация);
			ОсновнаяВалютаНовая				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ОтборПоВалюте", ПустаяВалюта);
			БазовыйПериодНовый				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ПериодПланированияОтборНачало", ПустойПериод);
			ПериодСравненияНовый			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ПериодПланированияОтборНачало", ПустойПериод);
			ПериодПрогнозНовый				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ПериодПланированияОтборНачало", ПустойПериод);
			БазовыйСценарийНовый			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ОтборПоСценарию", ПустойСценарий);
			ПлановыйСценарийНовый			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ОтборПоСценарию", ПустойСценарий);
			ИспользуемаяИБНовая				 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
			ВнешняяИБНовая					 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
			АнализЧувствительностиНовый		 = Ложь;
			ЧтениеНеактуальныхЗаписейНовое	 = Истина;
			УправляемыйРежимНовый			 = Истина;
			ПериодОтчетаНовый				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ПериодПланированияОтборНачало", ПустойПериод);
			СценарийНовый					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ОтборПоСценарию", ПустойСценарий);
			ПериодНачало					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ПериодПланированияОтборНачало", ПустойПериод);
			ПериодОкончание					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтборовРабочий, "ПериодПланированияОтборОкончание", ПустойПериод);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу открытых отчетов'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Контекст.Вставить("Организация",				 ОрганизацияНовая);
	Контекст.Вставить("ОсновнаяВалюта",				 ОсновнаяВалютаНовая);
	Контекст.Вставить("БазовыйПериод",				 БазовыйПериодНовый);
	Контекст.Вставить("ПериодСравнения",			 ПериодСравненияНовый);
	Контекст.Вставить("ПериодПрогноз",				 ПериодПрогнозНовый);
	Контекст.Вставить("БазовыйСценарий",			 БазовыйСценарийНовый);
	Контекст.Вставить("ПлановыйСценарий",			 ПлановыйСценарийНовый);
	Контекст.Вставить("ИспользуемаяИБ",				 ИспользуемаяИБНовая);
	Контекст.Вставить("ВнешняяИБ",					 ВнешняяИБНовая);
	Контекст.Вставить("АнализЧувствительности",		 АнализЧувствительностиНовый);
	Контекст.Вставить("ЧтениеНеактуальныхЗаписей",	 ЧтениеНеактуальныхЗаписейНовое);
	Контекст.Вставить("УправляемыйРежим",			 УправляемыйРежимНовый);
	Контекст.Вставить("ПериодОтчета", 				 ПериодОтчетаНовый);
	Контекст.Вставить("ПериодНачало", 				 ПериодНачало);
	Контекст.Вставить("ПериодОкончание", 			 ПериодОкончание);
	Контекст.Вставить("Сценарий"    ,				 СценарийНовый);
	Возврат Контекст;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРаскрытияДляТекущейПанели(Панель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ПанелиОтчетов.Состав КАК ПанелиОтчетовСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПанелиОтчетов КАК ПанелиОтчетов
	|		ПО ПанелиОтчетовСостав.Ссылка = ПанелиОтчетов.Ссылка
	|ГДЕ
	|	ПанелиОтчетовСостав.РасшифровываемыйОтчет <> ЗНАЧЕНИЕ(Справочник.ПроизвольныеОтчеты.ПустаяСсылка)";
	
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиСтандартнойРасшифровки(АдресДанныхРасшифровки, URLСхемы, Расшифровка, ВыполненноеДействие)
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки), Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Возврат ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие);
	
КонецФункции

&НаСервере
Функция ЗаменитьСтрокуНаПолеКомпоновкиДанныхВСоответствии(СоответствиеПараметр)
	
	НовоеСоответствие = Новый Соответствие;
	
	Если СоответствиеПараметр = Неопределено Тогда
		Возврат НовоеСоответствие;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из СоответствиеПараметр Цикл
		НовоеСоответствие.Вставить(Новый ПолеКомпоновкиДанных(ЭлементСоответствия.Ключ), ЭлементСоответствия.Значение);
	КонецЦикла;
	
	Возврат НовоеСоответствие;

КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиЗаголовокКолонки(Область, Значение)
	
	Область.СодержитЗначение = Истина;
	Область.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПроизвольныеОтчеты");
	Область.Значение    = Значение;
	Область.Расшифровка = Значение;
	Область.Защита = Истина;
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Область.Шрифт = Новый Шрифт(Область.Шрифт, , , Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиОтбор(Область, Значение, ЦветФона)
	
	Область.СодержитЗначение = Истина;
	Область.ТипЗначения      = Новый ОписаниеТипов("ПолеКомпоновкиДанных");
	Область.Значение         = Значение;
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Область.Шрифт = Новый Шрифт(Область.Шрифт, , , Истина);
	Область.ЦветФона = ЦветФона;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиЗначение(Область, Текст, Расшифровка, Цвет)
	
	Область.Расшифровка = Расшифровка;
	Область.СодержитЗначение = Ложь;
	Область.Текст            = Текст;
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Область.ЦветФона = Цвет;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиПустоеЗначение(Область, Цвет)
	
	Область.СодержитЗначение = Ложь;
	Область.ЦветФона = Цвет;
	Область.Узор = ТипУзораТабличногоДокумента.Узор14;
	Область.Защита = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетОтчета()
	
	Если ЧислоСтрокОтчета = 0  Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.ПутьКДанным = "ЧислоСтрокОтчета";
		СообщениеПользователю.Текст = НСтр("ru = 'Не задано число строк'");
		СообщениеПользователю.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если ЧислоКолонокОтчета = 0  Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.ПутьКДанным = "ЧислоКолонокОтчета";
		СообщениеПользователю.Текст = НСтр("ru = 'Не задано число колонок'");
		СообщениеПользователю.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	НастройкаПоложенияОтчетов.Рисунки.Очистить();
	НастройкиМакетаПанелиОтчетов.Очистить();
	
	ПорядковыйНомер = 0;
	НастройкаПоложенияОтчетов.Область().АвтоВысотаСтроки = Ложь;
	НастройкаПоложенияОтчетов.Область().ВысотаСтроки = 60;
	НастройкаПоложенияОтчетов.Область().ШиринаКолонки = 30;
	НастройкаПоложенияОтчетов.Область().Защита = Ложь;
	
	Для ИндХ = 1 По ЧислоСтрокОтчета Цикл
		Для ИндУ = 1 По ЧислоКолонокОтчета Цикл
			НоваяСтрока = НастройкиМакетаПанелиОтчетов.Добавить();
			НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
			НоваяСтрока.ЛевоОбласти     = ИндУ;
			НоваяСтрока.ВерхОбласти     = ИндХ;
			ТекРисунок = НастройкаПоложенияОтчетов.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			ТекРисунок.Расположить(ТабличноеПолеНастройкиОтбора.Область(ИндХ, ИндУ, ИндХ, ИндУ));
			ТекРисунок.СодержитЗначение = Истина;
			ТекРисунок.ТипЗначения      = Новый ОписаниеТипов("Строка");
			//ТекРисунок.УстановитьЭлементУправления(Тип("ПолеНадписи"));
			//ТекРисунок.ЭлементУправления.Доступность = Ложь;
			НоваяСтрока.ИмяРисунка = ТекРисунок.Имя;
			НоваяСтрока.УниверсальныйОтчет = Справочники.ПроизвольныеОтчеты.ПустаяСсылка();
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМакет(Команда)
	
	ЗаполнитьМакетОтчета();
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеНастройкиОтбораОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ТекСтрока = НастройкаОбщегоОтбора.НайтиСтроки(Новый Структура("ЛевоеЗначение", Расшифровка.ЛевоеЗначение));
		Если ТекСтрока.Количество() <> 0 Тогда
			ТекущееЗначение = ТекСтрока[0][Расшифровка.КодКолонки];
			ИзменитьНастройкиОтбора(Расшифровка.УниверсальныйОтчет, Расшифровка.ЛевоеЗначение, ТекущееЗначение = 1);
			ТекОбласть = ТабличноеПолеНастройкиОтбора.Область(ТекСтрока[0].СтрокаРеквизита, Расшифровка.ПозицияКолонки);
			Если ТекущееЗначение = 2 Тогда
				ТекСтрока[0][Расшифровка.КодКолонки] = 1;
			Иначе
				ТекСтрока[0][Расшифровка.КодКолонки] = 2;
			КонецЕсли;
			ТекОбласть.Текст = ?(ТекСтрока[0][Расшифровка.КодКолонки] = 2, "+", "-");
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиОтбора(УниверсальныйОтчет, ЛевоеЗначение, Использование)
	
	ТекСтроки = СоставТЗ.НайтиСтроки(Новый Структура("УниверсальныйОтчет, Отбор", УниверсальныйОтчет, ЛевоеЗначение));
	Если ТекСтроки.Количество() <> 0 Тогда
		ТекСтроки[0].Использование = Использование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтбораПоСохраненнойНастройке(ВнСохраненнаяНастройка)
	
	Если ВнСохраненнаяНастройка.Пустая() Тогда
		ТекОБъект = РеквизитФормыВЗначение("Объект");
		ТекНастройки = ТекОБъект.НастройкиПоУмолчанию.Получить();
	Иначе
		ТекНастройки = ВнСохраненнаяНастройка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
	Если ТипЗнч(ТекНастройки) = Тип("ТаблицаЗначений") Тогда
		ТиповыеОтчеты_УправляемыйРежимУХ.ВосстановитьНастройкиОтбораИзТаблицыОтбора(КомпоновщикНастроек.Настройки.Отбор, ТекНастройки);
	ИначеЕсли ТипЗнч(ТекНастройки) = Тип("Структура") Тогда
		Попытка
			ПреобразоватьТаблицуНастроекВНастройкиПанели(ТекНастройки.НастройкиПанели);
			ТиповыеОтчеты_УправляемыйРежимУХ.ВосстановитьНастройкиОтбораИзТаблицыОтбора(КомпоновщикНастроек.Настройки.Отбор, ТекНастройки.НастройкиОтборов);
			ТиповыеОтчеты_УправляемыйРежимУХ.ВосстановитьНастройкиПараметровДанныхИзТаблицыПараметров(КомпоновщикНастроек.Настройки.ПараметрыДанных, ТекНастройки.НастройкиПараметров);
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось восстановить настройки'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПараметрыДанныхПриИзменении(Элемент)
	
	СинхронизироватьНастройкиКомпоновки();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизацииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСценариюПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПериодуПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоВалютеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СИНХРОНИЗАЦИИ ОТОБРАЖЕНИЯ КЛЮЧЕВЫХ ОТБОРОВ НА ПАНЕЛИ И КОМПОНОВЩИКА
// НАСТРОЕК.
//

// Процедура синхронизирует настройку общих отборов панели с настройками компоновщика панели.
//    
&НаКлиенте
Процедура ПеренестиНастройкуПанелиВОбщиеОтборы(ПолеКомпоновки, Значение, Использование)
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки Тогда
			Элемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			Элемент.ПравоеЗначение = Значение;
			Элемент.Использование  = Использование;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьНастройкиКомпоновки()
	
	Параметр_Организация = Новый ПараметрКомпоновкиДанных("Организация");
	Параметр_Сценарий    = Новый ПараметрКомпоновкиДанных("Сценарий");
	Параметр_Период      = Новый ПараметрКомпоновкиДанных("ПериодОтчета");
	Параметр_Валюта      = Новый ПараметрКомпоновкиДанных("ОсновнаяВалюта");
	
	Поле_Организация     = Новый ПолеКомпоновкиДанных("Организация");
	Поле_Сценарий        = Новый ПолеКомпоновкиДанных("Сценарий");
	Поле_ПериодОтчета    = Новый ПолеКомпоновкиДанных("ПериодОтчета");
	Поле_Валюта          = Новый ПолеКомпоновкиДанных("ОсновнаяВалюта");
	
	Признак_ИспользоватьОрганизация = Ложь;
	Признак_ИспользоватьПериод = Ложь;
	Признак_ИспользоватьСценарий = Ложь;
	Признак_ИспользоватьВалюта = Ложь;
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		
		Если Элемент.Использование Тогда
			
			Если Элемент.Параметр = Параметр_Организация Тогда
				Признак_ИспользоватьОрганизация = Истина;
			ИначеЕсли Элемент.Параметр = Параметр_Сценарий Тогда
				Признак_ИспользоватьСценарий = Истина;
			ИначеЕсли Элемент.Параметр = Параметр_Период Тогда
				Признак_ИспользоватьПериод = Истина;
			ИначеЕсли Элемент.Параметр = Параметр_Валюта Тогда
				Признак_ИспользоватьВалюта = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если Элемент.Использование Тогда
			Если Элемент.ЛевоеЗначение = Поле_Организация Тогда
				Признак_ИспользоватьОрганизация = Истина;
			ИначеЕсли Элемент.ЛевоеЗначение = Поле_Сценарий Тогда
				Признак_ИспользоватьСценарий = Истина;
			ИначеЕсли Элемент.ЛевоеЗначение = Поле_ПериодОтчета Тогда
				Признак_ИспользоватьПериод = Истина;
			ИначеЕсли Элемент.ЛевоеЗначение = Поле_Валюта Тогда
				Признак_ИспользоватьВалюта = Истина;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	//Если НЕ Признак_ИспользоватьОрганизация Тогда
		ИспользоватьОтборПоОрганизации = Истина;
	//КонецЕсли;
	
	//Если НЕ Признак_ИспользоватьСценарий Тогда
		ИспользоватьОтборПоСценарию = Истина;
	//КонецЕсли;
	
	//Если НЕ Признак_ИспользоватьПериод Тогда
		ИспользоватьОтборПоПериоду = Истина;
	//КонецЕсли;
	
	//Если НЕ Признак_ИспользоватьВалюта Тогда
		ИспользоватьОтборПоВалюте = Истина;
	//КонецЕсли;
	
	//Элементы.ОтборПоВалюте.Доступность      = Признак_ИспользоватьВалюта;
	//Элементы.ОтборПоСценарию.Доступность    = Признак_ИспользоватьСценарий;
	//Элементы.ОтборПоОрганизации.Доступность = Признак_ИспользоватьОрганизация;
	//Элементы.ОтборПоПериоду.Доступность     = Признак_ИспользоватьПериод;
	//
	//Элементы.ИспользоватьОтборПоВалюте.Доступность      = Признак_ИспользоватьВалюта;
	//Элементы.ИспользоватьОтборПоСценарию.Доступность    = Признак_ИспользоватьСценарий;
	//Элементы.ИспользоватьОтборПоОрганизации.Доступность = Признак_ИспользоватьОрганизация;
	//Элементы.ИспользоватьОтборПоПериоду.Доступность     = Признак_ИспользоватьПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаПриИзменении(Элемент)
	
	ВосстановитьНастройкиОтбораПоСохраненнойНастройке(СохраненнаяНастройка);
	СинхронизироватьНастройкиКомпоновки();
	ВывестиОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекСтраница = СписокОбновленныхСтраниц.НайтиПоЗначению(ТекущаяСтраница.Имя);
	
	Если ТекСтраница <> Неопределено И НЕ ТекСтраница.Пометка Тогда
		ВывестиОтчеты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоказателиСервер(ИмяОбласти,Парамтеры)
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.ИзменитьЗначенияВОбласти(ПолеТабличногоДокументаМакет,ИмяОбласти,Парамтеры);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметров(Расшифровка)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресХранилищаДанныеРасшифровки);
	СтруктураАналитик = Новый Структура;
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,,,СтруктураАналитик);	
		
	ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	СтруктураФильтров =  ПолучитьИзВременногоХранилища(РабочийОбъект.АдресСтруктураФильтров);
	ДобавляемыеАналитики = РабочийОбъект.ПолучитьСтруктуруНеобходимыхАналитик(СтруктураАналитик,ТаблицыИнтерфейса);
	
	СтруктураДопФильтров = Новый Структура;
	
	Если ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет доступных аналитик для расшифровки!'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;	
	
    Измерения = Новый Структура;
	ТаблицаСтроки = ТаблицыИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	ТаблицаКолонки = ТаблицыИнтерфейса.ТаблицаКолонки.Скопировать();
	ТаблицаСтраницы = ТаблицыИнтерфейса.ТаблицаСтраницы.Скопировать();
    ТаблицаДоступныеПоля =  ТаблицыИнтерфейса.ТаблицаДоступныеПоля.Скопировать();
	
	МассивУдаляемыхАналитик = Новый Массив;
	Для Каждого СтрАналитика Из ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик Цикл
		
		НужнаяАналитикаСтрока = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтрАналитика.Ключ))[0];
		Нстр = ТаблицаСтроки.Добавить();
		МассивУдаляемыхАналитик.Добавить(НужнаяАналитикаСтрока);
		ЗаполнитьЗначенияСвойств(Нстр,НужнаяАналитикаСтрока);
		
	КонецЦикла;
	
	Для Каждого СтрАналитика Из МассивУдаляемыхАналитик Цикл
		ТаблицаДоступныеПоля.Удалить(СтрАналитика);	
	КонецЦикла;

	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл 
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;
		Если СтруктураАналитик.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			Если СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
				Нстр = ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(Нстр,Стр);
				СтруктураДопФильтров.Вставить(Стр.Код, СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаКолонки Цикл 
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;
		
		Если СтруктураАналитик.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			Если СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
				Нстр = ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(Нстр,Стр);
				СтруктураДопФильтров.Вставить(Стр.Код, СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]);
				УдСтрока = ТаблицаКолонки.НайтиСтроки(Новый Структура("Код",Стр.Код))[0];
				ТаблицаКолонки.Удалить(УдСтрока);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтраницы Цикл 
		Если СтруктураАналитик.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			Если СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
				СтруктураДопФильтров.Вставить(Стр.Код, СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	

	Измерения.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	Измерения.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
	Измерения.Вставить("ТаблицаКолонки",ТаблицаКолонки);
	Измерения.Вставить("ТаблицаДоступныеПоля",ТаблицаДоступныеПоля);
    Измерения.Вставить("СтруктураДопФильтров",СтруктураДопФильтров);
	
	СтруктураПараметров=Новый Структура();
    СтруктураПараметров.Вставить("Бланк",ТекущийБланк);	
    СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",ПериодПланированияОтборНачало);	
	СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",ПериодПланированияОтборОкончание);
	СтруктураПараметров.Вставить("АналитикиОтбораИсточник",ПоместитьВоВременноеХранилище(СтруктураАналитик,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("Измерения",ПоместитьВоВременноеХранилище(Измерения,Новый УникальныйИдентификатор()));

	СтруктураПараметров.Вставить("РежимРасшифровки",  Истина);
    Если ЗначениеЗаполнено(СтруктураАналитик.Периоды) Тогда
		  СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",СтруктураАналитик.ПериодыСвязанныйПериод);
		  СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",СтруктураАналитик.ПериодыСвязанныйПериод);
	КонецЕсли;
	
	
	Возврат СтруктураПараметров;
		
КонецФункции

&НаСервере
Процедура ИзменитьСтруктуруТаблицы(Параметр,сОбъект = Неопределено)
	
	Если Не ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(Параметр.СтруктураТаблиц);
	
	Если сОбъект = Неопределено Тогда 
		РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	Иначе
		РабочийОбъект = РеквизитФормыВЗначение(сОбъект);
	КонецЕсли;	
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	СтруктураТаблицИнтерфейса.ТаблицаСтроки   = СтруктураТаблиц.ТаблицаСтроки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаКолонки  = СтруктураТаблиц.ТаблицаКолонки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаСтраницы = СтруктураТаблиц.ТаблицаСтраницы.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля = СтруктураТаблиц.ТаблицаДоступныеПоля.Скопировать();
	
	РабочийОбъект.АдресТаблицИнтерфейса = ПоместитьВоВременноеХранилище(СтруктураТаблицИнтерфейса,новый УникальныйИдентификатор);		
	
	ЗначениеВРеквизитФормы(РабочийОбъект,ТекущийОбъект);
			
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТаблицуСервер(ПараметрыОтображения = Неопределено)
	
	ТекОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	
	Если НЕ ПараметрыОтображения = Неопределено Тогда
		ТекОбъект.РежимДиаграммы = ПараметрыОтображения.ВариантОтображения="Диаграмма";
		ТекОбъект.ВариантОтображенияРесурсов = ПараметрыОтображения.ВариантОтображенияИтогов;
		ТекОбъект.Точность = ПараметрыОтображения.ТочностьОтображения;
		ТекОбъект.Масштаб = ПараметрыОтображения.МасштабОтображения;
		ТекОбъект.ВариантыДиаграммы = ПараметрыОтображения.ВариантОтображенияДиаграммы;
		
	КонецЕсли;	 
	
	Если ТекОбъект.РежимДиаграммы Тогда
		СводнаяТаблицаУХ.УстановитьРежимМенюСводнойТаблицы(Элементы[ТекущийМакет+"_Окно"],2);
	Иначе	 
		СводнаяТаблицаУХ.УстановитьРежимМенюСводнойТаблицы(Элементы[ТекущийМакет+"_Окно"],1);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТекОбъект,ТекущийОбъект);
	
	НастройкиОбласти = Неопределено;
	ТаблицаОткрытыхОтчетов = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяОкна", ТекущееИмяОкна);
	НайденныеСтроки = ТаблицаОткрытыхОтчетов.НайтиСтроки(СтруктураОтбора);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		НастройкиОбласти = ТекНайденныеСтроки.НастройкиОтчета;
	КонецЦикла;
	ВывестиОтчет(ТекущийБланк, , НастройкиОбласти, , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна); 
	СТ_ОбновитьЗависимыеСервер();
	
КонецПроцедуры

&НаСервере 
Функция ОбработатьРасшифровкуТаблицы(Расшифровка,ТекущаяОбластьТект)
	
	   //РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	   //
	   //Расшифровка_ = РабочийОбъект.ОбработатьРасшифровкуТаблицы(Расшифровка,ТекущаяОбластьТект,ПолучитьСтрукутуруОбщихФильтров());
	   //ЗначениеВРеквизитФормы(РабочийОбъект,ТекущийОбъект);
	   //ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна); 
	   //Возврат Расшифровка_;
	   
КонецФункции

&НаКлиенте
 Процедура СТ_Поле1_ЗаголовокНажатие(Элемент)
	   
	ТекущийОбъектНажатие = СтрЗАменить(Элемент.Имя,"Поле","Объект");
	ТекущийМакет =         СтрЗАменить(Элемент.Имя,"_Заголовок","");
	ТекущийОбъект = СтрЗАменить(ТекущийОбъектНажатие,"_Заголовок","");
	ТекущийБланк = ЭтаФорма[ТекущийОбъект].Бланк;	
	ТекущееИмяОкна =  Элемент.Родитель.Родитель.Имя;
	
	
	Параметры_ = Новый Структура("Бланк,АдресТаблицИнтерфейса,СтруктураФильтровАдрес", ТекущийБланк,ЭтаФорма[ТекущийОбъект].АдресТаблицИнтерфейса,ЭтаФорма[ТекущийОбъект].АдресСтруктураФильтров);
	ИзмененаСтруктура = Истина;	
	ОткрытьФорму("ОбщаяФорма.ФормаОтборовСводнойТаблицы", 
	Параметры_,,,,, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

	 
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрукутуруОбщихФильтров(СтруктураФильтровИтог,ТекущийОбъектИмя=Неопределено)
	
	Если Не ТекущийОбъектИмя=Неопределено Тогда	
		тКэшНастроекБыстрыхОтборов_ = ПолучитьИзВременногоХранилища(тКэшНастроекБыстрыхОтборовАдрес);
		ОбщиеОтборы = тКэшНастроекБыстрыхОтборов_.НайтиСтроки(Новый Структура ("ИмяОбъекта,Фиксировать",ТекущийОбъектИмя,Ложь));	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодПланированияОтборНачало) Тогда
		СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала",ПериодПланированияОтборНачало.ДатаНачала);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодПланированияОтборОкончание) Тогда
		СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",ПериодПланированияОтборОкончание.ДатаОкончания);
	КонецЕсли;
	
	Для Каждого Стр Из ОбщиеОтборы Цикл
		Если  стр.Фильтр = "Фильтр_Периоды" Тогда  
			Если ЗначениеЗаполнено(ПериодПланированияОтборНачало) Тогда
				СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала",ПериодПланированияОтборНачало.ДатаНачала);	
			КонецЕсли;	
			Если ЗначениеЗаполнено(ПериодПланированияОтборОкончание) Тогда
				СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",ПериодПланированияОтборОкончание.ДатаОкончания);
			КонецЕсли;
		ИначеЕсли  стр.Фильтр = "Фильтр_Сценарии" Тогда	   
			
			Если НЕ Объект.РежимМоделирования Тогда
			//	СтруктураФильтровИтог.Вставить("Фильтр_Сценарии",СценарииМоделей.Выгрузить(,"Сценарий").ВыгрузитьКолонку("Сценарий"));
			//	СтруктураФильтровИтог.Вставить("Сценарии",СценарииМоделей.Выгрузить(,"Сценарий").ВыгрузитьКолонку("Сценарий"));
			//Иначе
				СтруктураФильтровИтог.Вставить("Фильтр_Сценарии",ОтборПоСценарию);
				СтруктураФильтровИтог.Вставить("Сценарии",ОтборПоСценарию);
			КонецЕсли;
			
			
		ИначеЕсли  стр.Фильтр = "Фильтр_Организации" Тогда	   
			СтруктураФильтровИтог.Вставить("Фильтр_Организации",ОтборПоОрганизации);
			СтруктураФильтровИтог.Вставить("Организации",ОтборПоОрганизации);
		ИначеЕсли  стр.Фильтр = "Фильтр_Валюты" Тогда   
			СтруктураФильтровИтог.Вставить("Фильтр_Валюты",ОтборПоВалюте);
			СтруктураФильтровИтог.Вставить("Валюты",ОтборПоВалюте);
		ИначеЕсли  стр.Фильтр = "Фильтр_Проекты" Тогда   	   
			СтруктураФильтровИтог.Вставить("Фильтр_Проекты",ОтборПоПроекту);
			СтруктураФильтровИтог.Вставить("Проекты",ОтборПоПроекту);
		КонецЕсли;	   	
	КонецЦикла;	
		
	Возврат СтруктураФильтровИтог;
	
КонецФункции

&НаСервере
Функция ВернутьРасшифровкуЯчейки(Расшифровка)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	АналитикиОтбораИсточник = РабочийОбъект.ПолучитьРасшифровкуТаблицы(Расшифровка);
	Возврат АналитикиОтбораИсточник;	
	
КонецФункции

&НаСервере
Процедура ОбновитьАналитики(Параметры)
		
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	ТабИзмененныхАналитик = ПолучитьИзВременногоХранилища(Параметры.АдресТекущейТаблицы);
	ТекущийСоставСтрок = ПолучитьИзВременногоХранилища(РабочийОбъект.ТЗСтрокАдрес);
	ТекущийСоставСтрок =  ТабИзмененныхАналитик.Скопировать();
	РабочийОбъект.ТЗСтрокАдрес = ПоместитьВоВременноеХранилище(ТекущийСоставСтрок,Новый УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(РабочийОбъект,ТекущийОбъект)
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресТекущегоСостава(ТекущийОтбор)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	ТекущийСоставСтрок = ПолучитьИзВременногоХранилища(РабочийОбъект.ТЗСтрокАдрес);
	ТекущийСоставСтрок_ = ТекущийСоставСтрок.Скопировать();
	ТекущийСоставСтрок_.Свернуть("КК01,Показатели");	
	Возврат ПоместитьВоВременноеХранилище(ТекущийСоставСтрок_,Новый УникальныйИдентификатор); 
	
КонецФункции	

&НаКлиенте
Процедура ОтборПоПроектуПриИзменении(Элемент)
	
	ЗаписатьТекущиеНастройкиОтборов();	
	ИспользоватьОтборПоПроекту = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если  ЭтаФорма[ТекущийОбъект].РежимОбратногоРаспределения Тогда 
		
		Параметры_ = Новый Структура("Бланк", ТекущийБланк);
		Оповещение = Новый ОписаниеОповещения("НастрйкаРаспределенияЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаВыбораСпособаРаспределения", 
		Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	Иначе
		
		
		Попытка
						//Элементы.ПолеТабличногоДокументаМакет.Доступность =Ложь;
			ВернутьРисунокДлительнойОперации();
			ЗапуститьВычислениеВФоне();

			//ПодключитьОбработчикОжидания("ОжиданиеОбновленияДанных",1);
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникли ошибки при попытке записи! Подробнее см. журнал регистрации'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;	
		

		//ПрименитьИзменения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОбновленияДанных()
		
	СтатусВыполнения = ПроверитьСтатусПроцесса();

	Если  СтатусВыполнения=0  Тогда
		ТекстСообщения = НСтр("ru = 'Возникли ошибки при попытке записи! Подробнее см. журнал регистрации'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ОтключитьОбработчикОжидания("ОжиданиеОбновленияДанных");

	ИначеЕсли СтатусВыполнения=1 Тогда		
		
		Сформировать(Неопределено);	 		
		УстановитьРежимРедактированияДанных(Ложь);
		//Элементы.ПолеТабличногоДокументаМакет.Доступность =Истина;
		ОтключитьОбработчикОжидания("ОжиданиеОбновленияДанных");

	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура Отменить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьИзменения",ЭтаФорма);
	ТекстВопроса = НСтр("ru = 'При отмене все несохраненные данные будут потеряны, отменить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимРедактированияДанных(Режим)
	
	Элементы.ГруппаПрименитьОтменить.Видимость = Режим;	
	Элементы.ПанельОсновныхОтборов.ТолькоПросмотр = Элементы.ГруппаПрименитьОтменить.Видимость;	
	Элементы.Сформировать.Доступность = НЕ Режим;
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьВычислениеВФоне()
	
	Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
		
		ТекОбъект = ЭтаФорма["СТ_Объект"+Инд];
		
		Если Не ЗначениеЗаполнено(ТекОбъект.логИзмененныхДанныхАдрес) Тогда
			 Продолжить;
		КонецЕсли;	
		
		ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(ТекОбъект.логИзмененныхДанныхАдрес);
		Если ТабИзмененныхДанных.Количество() = 0 Тогда
			 Продолжить;
		КонецЕсли;	
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Бланк",ТекущийБланк);		
		ПараметрыЗадания.Вставить("Валюта",ОтборПоВалюте);
		ПараметрыЗадания.Вставить("логИзмененныхДанныхАдрес",ТекОбъект.логИзмененныхДанныхАдрес);
		ПараметрыЗадания.Вставить("РежимТрассировки",Ложь);
						
		АдресХранилища               = "";
		АдресХранилищаДополнительный = "";	
		СводнаяТаблицаУХ.ПрименитьИзменения(ПараметрыЗадания,АдресХранилища,АдресХранилищаДополнительный);
		ТабИзмененныхДанных.Очистить();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатусПроцесса()
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания)  Тогда
		Возврат 0; //Были ошибки или задание потерялоь
	КонецЕсли;
	
	Попытка
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат 1;//Задание успешно выполнено
		Иначе	 
			Возврат 2;//Задание выполняется
		КонецЕсли;	
	Исключение
		Возврат 0; //Были ошибки
	КонецПопытки;	
		
КонецФункции

&НаКлиенте
Процедура ВернутьРисунокДлительнойОперации()
			
	Параметры_ = Новый структура;
	Параметры_.Вставить("ИдентификаторЗадания",ИдентификаторЗадания);
	Оповещение = Новый ОписаниеОповещения("ВычислениеЗавершение", ЭтаФорма);

	ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаДлительнойОперации", 
	Параметры_,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Сформировать(Неопределено);	 		
	УстановитьРежимРедактированияДанных(Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуАналитикиСервер(Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз,Копирование,ВыбранноеЗначение = Неопределено,Результат=Неопределено)
		   		
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
    ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	
	Если Копирование Тогда
		ТекущийМакетОбласти = РабочийОбъект.СкопироватьШаблонНовойОбласти(ПолеТабличногоДокументаМакет,Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз);
	Иначе	
		ТекущийМакетОбласти = РабочийОбъект.ДобавитьШаблонНовойОбласти(ПолеТабличногоДокументаМакет,Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз,ВыбранноеЗначение);	
	КонецЕсли;
	
	Если ТекущийМакетОбласти = "стСтрокаНеВыбрана" Тогда
		Результат = ТекущийМакетОбласти;
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийМакетОбласти) Тогда
		УстановитьРежимРедактированияДанных(Истина);	
	Иначе	
		Результат = "стПустойМакет";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьВидОтчета(Бланк)
	
	Возврат Бланк.Владелец;
	
КонецФункции	

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Настройки.Вставить("СвязанныйОбъект", Объект.Ссылка);
	Иначе
		// Нет ссылки.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияОтборОкончаниеПриИзменении(Элемент)
	
	ЗаписатьТекущиеНастройкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияОтборНачалоПриИзменении(Элемент)
	
	ЗаписатьТекущиеНастройкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловиеОтбора(Команда)
	
	ИзменитьВидСравнения()
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидСравнения() Экспорт
	
	ИнформацияОТипах = АнализТипов(ЭтаФорма.ТекущийЭлемент.ДоступныеТипы, Ложь);
	
	Список = Новый СписокЗначений;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
		
		Если ИнформацияОТипах.СодержитОбъектныеТипы Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии); // НСтр("ru = 'В списке включая подчиненные'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии); // НСтр("ru = 'Не в списке включая подчиненные'").
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии); // НСтр("ru = 'В группе'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии); // НСтр("ru = 'Не в группе'")
			
		КонецЕсли;
		
		Если ИнформацияОТипах.КоличествоПримитивныхТипов > 0 Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформацияОТипах.СодержитТипСтрока Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	КонецЕсли;
	
	//ТекущийЭлемент = Список.НайтиПоЗначению(ПользовательскаяНастройкаКД.ВидСравнения);
	
	Контекст = Новый Структура;
		
	Обработчик = Новый ОписаниеОповещения("ИзменитьВидСравненияЗавершение", ЭтотОбъект, Контекст);
	ФормаЗаголовок = НСтр("ru = 'Выберите условие отбора'");
	
	Список.ПоказатьВыборЭлемента(Обработчик, ФормаЗаголовок);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидСравненияЗавершение(ЭлементСписка, Контекст) Экспорт
	Если ЭлементСписка = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = ЭлементСписка.Значение;
	КонецЕсли;
	
	Если Результат = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ Результат = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		ЭтаФорма.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Элементы.ОтборПоОрганизации.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ОтборПоОрганизации.КнопкаВыбора = Истина;
		СписокЗначенийОрг = Новый СписокЗначений;
		СписокЗначенийОрг.ТипЗначения = Новый ОписаниеТипов("СправочникССылка.Организации");
		СписокЗначенийОрг.Добавить(ОтборПоОрганизации);
		ОтборПоОрганизации = СписокЗначенийОрг;
		
	Иначе
		Если ТипЗнч(ОтборПоОрганизации) = Тип("СписокЗначений") Тогда
			
			Если  ОтборПоОрганизации.Количество()>0 Тогда
				 тОрганизация =  ОтборПоОрганизации[0].Значение;
			КонецЕсли;	
			
		КонецЕсли;	
		
		ЭтаФорма.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникССылка.Организации");
		Элементы.ОтборПоОрганизации.КнопкаВыпадающегоСписка = Истина;
		Элементы.ОтборПоОрганизации.КнопкаВыбора = Ложь;
		ОтборПоОрганизации = тОрганизация;	
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтчет()
	
	ст_ОбработкаОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	СТ_ОбработкаОбъект.ИнициализироватьКонтекст(ТекущийБланк);
	ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура глОткрытьСтруктуру(Команда)
				
	Параметры_ = Новый Структура("Бланк", ТекущийБланк);
	Параметры_.Вставить("АдресТекущихНастроек",ЭтаФорма[ТекущийОбъект].АдресТаблицИнтерфейса);
	Параметры_.Вставить("РежимРедактированияСвойств",Ложь);
    Параметры_.Вставить("ИерархияСтрок",ЭтаФорма[ТекущийОбъект].ИерархияГруппировокСтрок);
    Параметры_.Вставить("ИерархияКолонок",ЭтаФорма[ТекущийОбъект].ИерархияГруппировокКолонок);

	
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	Оповещение = Новый ОписаниеОповещения("глНастрйкаОсейЗавершение", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастроекСтруктурыСводнойТаблицы", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура глНастрйкаОсейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Для Инд = 1 По ЧислоДопАналитик Цикл	
		тОбъект = ЭтаФорма["СТ_Объект"+Инд];		
		Если ЗначениеЗаполнено(тОбъект.АдресТаблицИнтерфейса) Тогда	
			ИзменитьСтруктуруТаблицы(Результат,"СТ_Объект"+Инд);
			ВывестиОтчет(ЭтаФорма["СТ_Объект"+Инд].Бланк, , , , ЭтаФорма["СТ_Поле"+Инд], Истина,  "Код_Служебная_"+Инд);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекПоказателейПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаНастроекПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Изменена = Истина;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры
 
#Область КомандыРаботыСоСводнымиТаблицами

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	РежимРаботыПриИзмененииСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБланк(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ", ТекущийБланк);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаМакетаСводнаяТаблица", 
	СтруктураПараметров,,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуру(Команда)
			
		
	Параметры_ = Новый Структура("Бланк", ТекущийБланк);
	Параметры_.Вставить("АдресТекущихНастроек",ЭтаФорма[ТекущийОбъект].АдресТаблицИнтерфейса);
	Параметры_.Вставить("РежимРедактированияСвойств",Ложь);
    Параметры_.Вставить("ИерархияСтрок",ЭтаФорма[ТекущийОбъект].ИерархияГруппировокСтрок);
    Параметры_.Вставить("ИерархияКолонок",ЭтаФорма[ТекущийОбъект].ИерархияГруппировокКолонок);

	
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	Оповещение = Новый ОписаниеОповещения("НастрйкаОсейЗавершение", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастроекСтруктурыСводнойТаблицы", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтры(Команда)
		
	глОтборы = Новый Структура;
	глОтборы.Вставить("ГоризонтДатаНачала",ПериодПланированияОтборНачало);
	глОтборы.Вставить("ГоризонтДатаОкончания",ПериодПланированияОтборОкончание);
    глОтборы.Вставить("Фильтр_Валюты",ОтборПоВалюте);
    глОтборы.Вставить("Фильтр_Организации",ОтборПоОрганизации);
	глОтборы.Вставить("Фильтр_Сценарии",ОтборПоСценарию);
    глОтборы.Вставить("Фильтр_Проекты",ОтборПоПроекту);
	
	Параметры_ = Новый Структура("Бланк,АдресТаблицИнтерфейса,СтруктураФильтровАдрес,Периодичность,глОтборы,тКэшНастроекБыстрыхОтборовАдрес,ТекущийОбъект", 
	ТекущийБланк,
	ЭтаФорма[ТекущийОбъект].АдресТаблицИнтерфейса,
	ЭтаФорма[ТекущийОбъект].АдресСтруктураФильтров,
	ЭтаФорма[ТекущийОбъект].Периодичность,
	глОтборы,
	тКэшНастроекБыстрыхОтборовАдрес,
	ТекущийОбъект);
	
	ИзмененаСтруктура = Истина;	
	ОткрытьФорму("ОбщаяФорма.ФормаОтборовСводнойТаблицы", 
	Параметры_,,,,, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСоставуСтрок(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Бланк", ТекущийБланк);
		
	СтруктураАналитикСтрок = Новый СписокЗначений;
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаПоказателейЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиСтрок", 
	СтруктураПараметров,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАналитику(Команда)
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
  	
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;	
	ДобавленнаяОбластьНиз =0;	
	Результат = "";	
	ДобавитьСтрокуАналитикиСервер(Область.Расшифровка,Область.Низ,ДобавленнаяОбластьНиз,Ложь,,Результат);
		
	Если Результат = "стСтрокаНеВыбрана" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Строка отчета не определена. Добавление на текущем уровне недоступно.'"));
		Возврат;	
	КонецЕсли;
	
	Если Результат = "стПустойМакет" Тогда
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьАналитику(Команда)
			

	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
			
	МассивУдаляемых = Новый Массив;
	ТекущийУровень 	=  ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1,ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1).Отступ;
	Для Инд=ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх  По ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Цикл
		Уровень = ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Отступ;
		Если Уровень <> ТекущийУровень Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строки одного уровня'"), 10);
			Возврат;
		КонецЕсли;	
		МассивУдаляемых.Добавить(Инд);
	КонецЦикла;	
	
	ОповещениеЗаблокированные = Новый ОписаниеОповещения("ВопросУдалениеСЗаблокированнымиЗавершение",ЭтаФорма,МассивУдаляемых);

	Если ПроверитьВложенныеСтроки(МассивУдаляемых[0]) Тогда	
		ОповещениеВложенные = Новый ОписаниеОповещения("ВопросУдалениеСВложеннымиЗавершение",ЭтаФорма,МассивУдаляемых);
		ПоказатьВопрос(ОповещениеВложенные, НСтр("ru = 'Строка содержит подчиненные элементы, удалить все?'"), РежимДиалогаВопрос.ДаНет);	
	Иначе		
		Если ПроверитьЗаблокированныеЯчейки(МассивУдаляемых) Тогда
			ПоказатьВопрос(ОповещениеЗаблокированные, НСтр("ru = 'Удаляемая область содержит заблокированные ячейки. Строки с заблокированными ячейками не будут удалены,доступные значения будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);	
		Иначе	
			УдалитьСтрокуАналитикиСервер(МассивУдаляемых);
			УстановитьРежимРедактированияДанных(Истина);	
		КонецЕсли;		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАналитику(Команда)
	
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
  	
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ТекущийУровень 	=  ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1,ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1).Отступ;
	Для Инд=ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх  По ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Цикл
		Уровень = ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Отступ;
		Если Уровень <> ТекущийУровень Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строки одного уровня'"), 10);
			Возврат;
		КонецЕсли;	
	КонецЦикла;	

	ДобавленнаяОбластьНиз =0;
	ДобавитьСтрокуАналитикиСервер(Область.Расшифровка,Область.Низ,ДобавленнаяОбластьНиз,Истина);
	
	ЭтаФорма.ТекущийЭлемент = ТекущийЭлемент;
    УстановитьРежимРедактированияДанных(Истина);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьПоСтроке(Команда)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];

	ВыдОбласть =ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	
	Если ВыдОбласть.Право - ВыдОбласть.Лево<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Право;
	Иначе	
		ГраницаОбласти =  ПолеТабличногоДокументаМакет.ШиринаТаблицы;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	НачальныйИндексКолонки = ВыдОбласть.Лево;

	 
	ОбластьДляВставки = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Низ,ГраницаОбласти);
	
	Для  СтрУ=ВыдОбласть.Верх По ВыдОбласть.Низ Цикл 
		Если  ТипЗнч(ПолеТабличногоДокументаМакет.Область(СтрУ,ВыдОбласть.Право,СтрУ,ВыдОбласть.Право).Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			МассивЗначений = Новый Массив();
			Значение = ПолеТабличногоДокументаМакет.Область(СтрУ,ВыдОбласть.Лево,СтрУ,ВыдОбласть.Лево).Текст;
			Для ИндК = НачальныйИндексКолонки По ГраницаОбласти Цикл
				
				Область = ПолеТабличногоДокументаМакет.Область(СтрУ,ИндК,СтрУ,ИндК);
				Если  ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					МассивЗначений.Добавить(Значение);
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
		МассивСтрок.Добавить(МассивЗначений);
		
	КонецЦикла;
	
	СкопироватьЗначениеПоКолонкам(ОбластьДляВставки.Имя,МассивСтрок);	
	УстановитьРежимРедактированияДанных(Истина);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьПоКолонке(Команда)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	
	ВыдОбласть =ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	
	Если ВыдОбласть.Низ - ВыдОбласть.Верх<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Низ;
	Иначе	
		ГраницаОбласти =   ПолеТабличногоДокументаМакет.ВысотаТаблицы;	
	КонецЕсли;
	МассивСтрок = Новый Массив();
	НачальныйИндексСтроки = ВыдОбласть.Верх;	
	
	ОбластьДляВставки = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ГраницаОбласти,ВыдОбласть.Право);

	
	Для  СтрУ=ВыдОбласть.Верх По ГраницаОбласти Цикл 
		Если  ТипЗнч(ПолеТабличногоДокументаМакет.Область(СтрУ,ВыдОбласть.Право,СтрУ,ВыдОбласть.Право).Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			МассивЗначений = Новый Массив();
			
			Для ИндК =  ВыдОбласть.Лево По ВыдОбласть.Право Цикл
				Значение = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ИндК,ВыдОбласть.Верх,ИндК).Текст;
				Область = ПолеТабличногоДокументаМакет.Область(СтрУ,ИндК,СтрУ,ИндК);
				Если  ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					МассивЗначений.Добавить(Значение);
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
		МассивСтрок.Добавить(МассивЗначений);
		
	КонецЦикла;
	
	СкопироватьЗначениеПоКолонкам(ОбластьДляВставки.Имя,МассивСтрок);
    УстановитьРежимРедактированияДанных(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказатели(Команда)
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];

	МассивКодов = Новый Массив;
		
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				ТекОбласть =ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
				
				Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
					Продолжить;
				КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
				
			    МассивКодов.Добавить(ТекОбласть.Расшифровка);					
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеПоказателейЗавершение", ЭтаФорма);

	Если МассивКодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму("ОбщаяФорма.ФормаИзмененияПоказателейСводнойТаблицы", 
	, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Вставить(Команда)
		
	ОбъектКопирования = Новый COMОбъект("htmlfile");
	ДанныеБуфера =ОбъектКопирования.ParentWindow.ClipboardData.GETdata("Text");
	МассивСтрок = Новый Массив;
	МассивЗначений = Новый Массив;		
	РазобратьДанныеБУфера(ДанныеБуфера,МассивСтрок,МассивЗначений);
	Для Каждого Область Из  ЭтаФорма[ТекущийМакет].ВыделенныеОбласти Цикл
		ВставитьЗначенияСервер(Область.Имя,МассивСтрок,МассивЗначений);
	КонецЦикла;
	
	УстановитьРежимРедактированияДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ОчиститьСодержимоеРаскрытияСервер(Область.Имя);
	КонецЦикла;
	
	УстановитьРежимРедактированияДанных(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗависимыеПоказатели(Команда)
	
	ВернутьЗависимыеKPI();
	  
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьВлияющиеПоказатели(Команда)
	 
	ВернутьЗависимыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализ(Команда)
	
	ВызватьОтчетСценарныйАнализ(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОтчетСценарныйАнализ(МассивПоказателей=Неопределено,Моделирование=Ложь) Экспорт
		
	ПолеТабличногоДокументаМакет = ЭтаФорма[ТекущийМакет];

	ТекущаяОбластьРасшифровка  = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	Если ТипЗнч(ТекущаяОбластьРасшифровка.Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Сообщить(НСтр("ru = 'Необходимо выделить область показателя!'"));
		Возврат;	
	КонецЕсли;
	
	Попытка
		ЗначениеЧисло = Число(СтрЗаменить(ТекущаяОбластьРасшифровка.Текст," ",""));
	Исключение	  
		Сообщить(НСтр("ru = 'Необходимо выбрать числовое значение'"));
		Возврат; 
	КонецПопытки;	  
	
	СтруктураПараметров = ПодготовитьПараметрыСценарногоАнализа(ТекущаяОбластьРасшифровка.Расшифровка,ЗначениеЧисло,Моделирование);

	Если СтруктураПараметров = Неопределено Тогда	
		Сообщить(НСтр("ru = 'Недостаточно параметров для вызова факторного анализа!'"));
		Возврат; 	
	КонецЕсли;	
	
	ФормаОтчета  = ПолучитьФорму("Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая", СтруктураПараметров);		
			             	
	Если Моделирование Тогда	
		ФормаОтчета.Заголовок = Нстр("ru = 'Факторный анализ и моделирование'");
		ФормаОтчета.Открыть();								
	Иначе	
		ФормаОтчета.Заголовок = Нстр("ru = 'Сравнительный факторный анализ'");
		ФормаОтчета.Открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКоманднуюПанель(Команда)
	ЭтаФорма.ТекущийЭлемент.КонтекстноеМеню.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0].Пометка = НЕ ЭтаФорма.ТекущийЭлемент.КонтекстноеМеню.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0].Пометка; 
	Элементы.ГруппаКомандыСводныхТаблиц.Видимость = ЭтаФорма.ТекущийЭлемент.КонтекстноеМеню.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0].Пометка;	    	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыборСводнойТаблицы(Элемент, Область, СтандартнаяОбработка)
		
	ПолеТабличногоДокументаМакет = ЭтаФорма[ТекущийМакет];
	ИнтерактивноеИзменениеСодержимого = Истина;
	
	Если ЭтаФорма[ТекущийОбъект].РежимДиаграммы  Тогда		
		СтандартнаяОбработка = Истина;
		Возврат;		
	ИначеЕсли ЭтаФорма[ТекущийОбъект].РежимОбратногоРаспределения Тогда
		
		Если НЕ Область.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат			
			СтандартнаяОбработка = Ложь;		
			Возврат;	
		Иначе	
			Если НЕ ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;			
			КонецЕсли;	  
		КонецЕсли;	
		
	Иначе
		
		Если  НЕ ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") И  НЕ ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда  	
			Если НЕ Область.СодержитЗначение Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
		Иначе	
			
			Если Область.Лево <= ПолеТабличногоДокументаМакет.ФиксацияСлева Тогда //Заголовки
				ТипОбласти = Неопределено;
				Редактируется = Ложь;
				ЭтоЭтапПроекта = Ложь;
				КолонкаИмяТипа = "";
				Владелец = Неопределено;
				АдресТЗРасшифровок = "";
				ТекЗначение = РасшифроватьЗаголовок(Область.Расшифровка,ТипОбласти,Редактируется,ЭтоЭтапПроекта,Владелец,КолонкаИмяТипа);
							
				Если Редактируется  Тогда
					СтандартнаяОбработка = Ложь;
					СтруктураАналитик=ПолучитьАналитикиЯчейки(Область.Расшифровка);	
					Оповещение = Новый ОписаниеОповещения("ДобавлениеАналитикиЗавершение", ЭтаФорма);
					Если ЭтоЭтапПроекта Тогда
						Область.СодержитЗначение = Истина;				
						СтруктураОтбора = Новый Структура("ПроектЭтапа",СтруктураАналитик.Проекты);
						ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоЭтапов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Истина,СтруктураОтбора,ТекЗначение,Истина);
						ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы,,,,,Оповещение);
						Возврат;
					ИначеЕсли ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда	
						Область.СодержитЗначение = Истина;				
						СтруктураОтбора = Новый Структура("Владелец",Владелец);
						ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоЭтапов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Истина,СтруктураОтбора,ТекЗначение,Истина);
						ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", ПараметрыФормы,,,,,Оповещение);
						Возврат;	
					Иначе	
						ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоЭтапов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Истина,СтруктураОтбора,ТекЗначение,Истина);
						ОткрытьФорму(СтрЗаменить(КолонкаИмяТипа,"Ссылка","")+".ФормаВыбора",ПараметрыФормы,,,,,Оповещение);
						Область.СодержитЗначение = Истина;				
					КонецЕсли;	
				Иначе
					
					Если Не ТекЗначение = Неопределено Тогда
						ПоказатьЗначение(,ТекЗначение);			
					КонецЕсли;
					СтандартнаяОбработка = Ложь;
					Возврат;
				КонецЕсли;		
			КонецЕсли;
			
			Если Область.Верх <= ПолеТабличногоДокументаМакет.ФиксацияСверху Тогда //Шапка	
				ТипОбласти = Неопределено;
				Редактируется = Ложь;
				ТекЗначение = РасшифроватьЗаголовок(Область.Расшифровка,ТипОбласти,Редактируется);
				Если Не ТекЗначение = Неопределено Тогда
					ПоказатьЗначение(,ТекЗначение);			
				КонецЕсли;
				СтандартнаяОбработка = Ложь;
				Возврат;			
			КонецЕсли;		
			
			Если Область.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
				СтандартнаяОбработка = Ложь;
				//Проверяем на расшифровку по аналиткам
				ПоказатьРаскрытие(Неопределено);	
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ЦветКнопки = WebЦвета.Бежевый;
			#Иначе	
				ЦветКнопки = WindowsЦвета.Кнопка; 
			#КонецЕсли	
			Если Область.ЦветФона = ЦветКнопки Тогда //Недоступный
				СтандартнаяОбработка = Ложь;
				Возврат;	
			КонецЕсли;
			
			Если НЕ Элементы[ТекущийМакет+"_Окно"].Редактирование Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;	
			КонецЕсли;	
	
		КонецЕсли;			
	КонецЕсли;	  
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриИзмененииСодержимогоОбластиСводнойТаблицы(Элемент, Область,Результат = Неопределено)
	
	ПолеТабличногоДокументаМакет = ЭтаФорма[ТекущийМакет];
	
	Обл=Элементы[ТекущийМакет+"_Окно"].ТекущаяОбласть;
	
	Если Область.Лево <= ПолеТабличногоДокументаМакет.ФиксацияСлева  Тогда //Заголовки
		ЗаменитьАналитику(Результат,Область.Верх,Область.Низ,Область.Лево,Область.Право);
		УстановитьРежимРедактированияДанных(Истина);
		ИнтерактивноеИзменениеСодержимого = Ложь;
		Возврат;			
	КонецЕсли;
	
	Если  ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных")
		ИЛИ  ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда
		//Выделена одна ячейка
		Если Область.Лево - Область.Право = 0 И Область.Верх - Область.Низ = 0 Тогда
			ТекстОбласти = Область.Текст;
			ВставитьЗначениеПоказателя(Область.Имя,ТекстОбласти);
			СтандартнаяОбработка = Ложь;
		Иначе					
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;		
		УстановитьРежимРедактированияДанных(Истина);				
	КонецЕсли;
	
	ИнтерактивноеИзменениеСодержимого = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДиаграммыПриИзменении(Элемент)
	
	РежимРаботыПриИзмененииСервер();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОповещенийСводныхТаблиц

&НаКлиенте
Процедура НастрйкаПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	КонецЕсли; 			
	
	ИнициализироватьОтчет();	
	ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);
					
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАналитикЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменитьАналитики(Результат);
	ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);

КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалениеСзаблокированнымиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокуАналитикиСервер(ДополнительныеПараметры);
		УстановитьРежимРедактированияДанных(Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалениеСВложеннымиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗаблокированные = Новый ОписаниеОповещения("ВопросУдалениеСЗаблокированнымиЗавершение",ЭтаФорма,ДополнительныеПараметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаблокированныеЯчейки(ДополнительныеПараметры) Тогда
			ПоказатьВопрос(ОповещениеЗаблокированные, НСтр("ru = 'Удаляемая область содержит заблокированные ячейки. Строки с заблокированными ячейками не будут удалены,доступные значения будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);	
		Иначе	
			УдалитьСтрокуАналитикиСервер(ДополнительныеПараметры);
			УстановитьРежимРедактированияДанных(Истина);		
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаОсейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменитьСтруктуруТаблицы(Результат);
	ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтклоненийЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбновитьСтруктуруПолей(Результат.АдресТзОтклонений);
	ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ИзменитьПоказателиСервер(Область.Имя,Результат);
	КонецЦикла;
	
	УстановитьРежимРедактированияДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеАналитикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаМакет = ЭтаФорма[ТекущийМакет];
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;	                                                         
	Если ЗначениеЗАполнено(Результат) Тогда
		Область.Значение = Результат;	
		ОбработчикПриИзмененииСодержимогоОбластиСводнойТаблицы(ТекущийЭлемент, Область,Результат);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииДляПоддержкиСводныхТаблиц

&НаСервере
Функция ВернутьЗависимыеKPI()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст =
	  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	  |	ТаблицаЗависимостейПоказателей.ПотребительРасчета.Строка.Ссылка КАК мСтрока
	  |ИЗ
	  |	РегистрСведений.ТаблицаЗависимостейПоказателей КАК ТаблицаЗависимостейПоказателей
	  |ГДЕ
	  |	ТаблицаЗависимостейПоказателей.ВидОтчета = &ВидОтчета
	  |	И ТаблицаЗависимостейПоказателей.ПоказательОтчета.Ссылка В(&Ссылка)
	  |
	  |УПОРЯДОЧИТЬ ПО
	  |	ТаблицаЗависимостейПоказателей.ПотребительРасчета.Строка.ПорядковыйНомер";
	
	  
	  Запрос.УстановитьПараметр("ВидОтчета",СТ_Объект1.ВидОтчета);
	  Запрос.УстановитьПараметр("Ссылка",ПолучитьИзВременногоХранилища(СТ_Объект1.АдресТаблицИнтерфейса).ВыбранныеПоказатели);
	  
	  ДобавляемыеПоказатели = Запрос.Выполнить().Выгрузить();
	  
	  УдалитьСтрокиАналитик(СТ_Объект2.Бланк);

	  ПорядковыйНомер = 0;
	  Для Каждого мПоказатель Из ДобавляемыеПоказатели Цикл 
		  оСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
		  оСтр.ПорядковыйНомер = ПорядковыйНомер;
		  оСтр.Наименование = мПоказатель.мСтрока.Наименование;
		  оСтр.Код = мПоказатель.мСтрока.Код;
		  оСтр.СтрокаОтчета = мПоказатель.мСтрока;
		  оСтр.ИндексЭлемента = 2;
		  оСтр.Владелец = СТ_Объект2.Бланк;
		  //оСтр.Уровень =  Стр.Уровень()-1;
		  //оСтр.ЭтоЭлементГруппа = Стр.ЭтоЭлементГруппа;
		  оСтр.Записать();
		  СводнаяТаблицаУХ.СоздатьНастройкуПоказателя(СТ_Объект2.Бланк,оСтр.Ссылка);
		  ПорядковыйНомер = ПорядковыйНомер+1;	  
	  КонецЦикла;	  
	  
	  
	  ИндексТекущегоОбъекта = 2;
	  ИмяОбъекта = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна","Код_Служебная_"+ИндексТекущегоОбъекта))[0].ИмяОбъекта; 
	  ТекущийБланк = ЭтаФорма[ИмяОбъекта].Бланк;
	  ТекущийОбъект = ИмяОбъекта;	
	  ТекущийМакет = СтрЗаменить(ИмяОбъекта,"Объект","Поле");
	  ТекущееИмяОкна =  "Код_Служебная_"+ИндексТекущегоОбъекта;	
	   
	  инициализироватьОтчет();
	  
	  ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);
  
 КонецФункции	
 
&НаСервере 
Функция ВернутьЗависимыеПоказатели()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст =
	  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	  |	ТаблицаЗависимостейПоказателей.ПоказательОтчета.Строка.Ссылка КАК мСтрока
	  |ИЗ
	  |	РегистрСведений.ТаблицаЗависимостейПоказателей КАК ТаблицаЗависимостейПоказателей
	  |ГДЕ
	  |	ТаблицаЗависимостейПоказателей.ВидОтчета = &ВидОтчета
	  |	И ТаблицаЗависимостейПоказателей.ПотребительРасчета.Ссылка В(&Ссылка)
	  |
	  |УПОРЯДОЧИТЬ ПО
	  |	ТаблицаЗависимостейПоказателей.ПоказательОтчета.Строка.ПорядковыйНомер";
	
	  
	  Запрос.УстановитьПараметр("ВидОтчета",СТ_Объект2.ВидОтчета);
	  Запрос.УстановитьПараметр("Ссылка",ПолучитьИзВременногоХранилища(СТ_Объект2.АдресТаблицИнтерфейса).ВыбранныеПоказатели);
	  
	  ДобавляемыеПоказатели = Запрос.Выполнить().Выгрузить();
	  
	  УдалитьСтрокиАналитик(СТ_Объект1.Бланк);

	  ПорядковыйНомер = 0;
	  Для Каждого мПоказатель Из ДобавляемыеПоказатели Цикл 
		  оСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
		  оСтр.ПорядковыйНомер = ПорядковыйНомер;
		  оСтр.Наименование = мПоказатель.мСтрока.Наименование;
		  оСтр.Код = мПоказатель.мСтрока.Код;
		  оСтр.СтрокаОтчета = мПоказатель.мСтрока;
		  оСтр.ИндексЭлемента = 2;
		  оСтр.Владелец = СТ_Объект1.Бланк;
		  оСтр.Записать();
		  СводнаяТаблицаУХ.СоздатьНастройкуПоказателя(СТ_Объект1.Бланк,оСтр.Ссылка);
		  ПорядковыйНомер = ПорядковыйНомер+1;	  
	  КонецЦикла;	  
	  
	  ИндексТекущегоОбъекта = 1;
	  ИмяОбъекта = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна","Код_Служебная_"+ИндексТекущегоОбъекта))[0].ИмяОбъекта; 
	  ТекущийБланк = ЭтаФорма[ИмяОбъекта].Бланк;
	  ТекущийОбъект = ИмяОбъекта;	
	  ТекущийМакет = СтрЗаменить(ИмяОбъекта,"Объект","Поле");
	  ТекущееИмяОкна =  "Код_Служебная_"+ИндексТекущегоОбъекта;	
	   
	  инициализироватьОтчет();
	  
	  ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);
  
 КонецФункции	

&НаСервере
Процедура УдалитьСтрокиАналитик(Бланк)
	
	ВыборкаСтрок = Справочники.НастройкиСтруктурыБланка.Выбрать(,Бланк,,);
	Пока ВыборкаСтрок.Следующий() Цикл
		Если ВыборкаСтрок.ИндексЭлемента <>2 Тогда
			 Продолжить;
		КонецЕсли;	
		
		оСтруктура = ВыборкаСтрок.ПолучитьОбъект();
        оСтруктура.Удалить();
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСвойстваСтроки(СтрокаНастройки)
	
	
	
КонецПроцедуры

&НаСервере
Процедура РежимРаботыПриИзмененииСервер()
	
	Ст_ОбработкаОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
		
	Ст_ОбработкаОбъект.РежимРаботы = РежимРаботыСТ;
	
	Если Ст_ОбработкаОбъект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Диаграмма Тогда	
		РежимДиаграммы = Истина;
		РежимОбратноеРаспределение = Ложь;	
	ИначеЕсли Ст_ОбработкаОбъект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных Тогда 		
		РежимДиаграммы = Ложь;
		РежимОбратноеРаспределение = Ложь;	
	ИначеЕсли Ст_ОбработкаОбъект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда 		
		РежимОбратноеРаспределение = Истина;
		РежимДиаграммы = Ложь;			
	ИначеЕсли Ст_ОбработкаОбъект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой Тогда		
		РежимДиаграммы = Ложь;
		РежимОбратноеРаспределение = Ложь;
		УстановитьБазуДляСравнения(Ст_ОбработкаОбъект);	
	ИначеЕсли Ст_ОбработкаОбъект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Основной Тогда		
		РежимДиаграммы = Ложь;
		РежимОбратноеРаспределение = Ложь;	
	КонецЕсли;	
	
	ЗначениеВреквизитФормы(ст_ОбработкаОбъект,ТекущийОбъект);
	ВывестиОтчет(ТекущийБланк, , , , ЭтаФорма[ТекущийМакет], Истина, ТекущееИмяОкна);

КонецПроцедуры

&НаСервере
Функция ВыбратьСтрокиТекущегоВО(ТекущийБланк)
	
	Строки = Новый СписокЗначений;
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И СтрокиОтчетов.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Владелец",ТекущийБланк.Владелец);
	Строки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат  Строки;
	
КонецФункции

&НаСервере
Функция ВыбратьПоказателиТекущегоВО(ТекущийБланк)
	
	Колонки = Новый СписокЗначений;
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И КолонкиОтчетов.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Владелец",ТекущийБланк.Владелец);
	Колонки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат  Колонки;
		
КонецФункции 

&НаСервере
Функция ПодготовитьПараметрыСценарногоАнализа(Расшифровка,ИсходноеЗначение,Моделирование)
	
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	//АналитикиОтбораИсточник = РабочийОбъект.ПолучитьРасшифровкуТаблицы(Расшифровка);
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	
	АналитикиОтбораИсточник = Новый Структура;
	//РабочийОбъект.СоздатьОписаниеСтруктурыПолей(АналитикиОтбораИсточник,СтруктураТаблицИнтерфейса.ДоступныеАналитики);
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(,Расшифровка,,,АналитикиОтбораИсточник);
	
	ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",АналитикиОтбораИсточник.КодРесурса,АналитикиОтбораИсточник.ПоказателиСтрокаОтчета));
	
	ИсходныйПоказатель = Неопределено;
	Если ПоказательСсылка.Количество()=1 Тогда
		 ИсходныйПоказатель = ПоказательСсылка[0].Показатель;
	КонецЕсли;	
	
	ЭкземплярСсылка = РабочийОбъект.ПолучитьЭкземплярОтчета(Расшифровка,ТекущийБланк.Владелец);
	Если ЭкземплярСсылка = Неопределено Тогда
		 Возврат Неопределено;
	КонецЕсли;
	
	ЭкземплярОбъект=ЭкземплярСсылка.ПолучитьОбъект();
	
	Если НЕ ЭкземплярОбъект.ДанныеПараметрикиАктуальны Тогда
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭкземплярОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	Если НЕ АналитикиОтбораИсточник.Свойство("Показатели") 
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Сценарии") 
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Валюты")
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Организации")
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Периоды")
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Проекты")
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВидОтчета", ТекущийБланк.Владелец);
	СтруктураПараметров.Вставить("Сценарий", АналитикиОтбораИсточник.Сценарии);
	СтруктураПараметров.Вставить("ПериодОтчета", АналитикиОтбораИсточник.ПериодыСвязанныйПериод);
	СтруктураПараметров.Вставить("ОсновнаяВалюта", АналитикиОтбораИсточник.Валюты);
	СтруктураПараметров.Вставить("Организация", АналитикиОтбораИсточник.Организации);
	СтруктураПараметров.Вставить("Проект", АналитикиОтбораИсточник.Проекты);
	СтруктураПараметров.Вставить("ДокументСсылка", ЭкземплярСсылка);
	СтруктураПараметров.Вставить("ИсходныйПоказатель",ИсходныйПоказатель);
	СтруктураПараметров.Вставить("РежимАнализаЧувствительности", Моделирование);
	СтруктураПараметров.Вставить("ИсходноеЗначениеЦелевого", ИсходноеЗначение);
	
	ТаблицаПараметров = Отчеты.СценарныйАнализ.Создать().ТаблицаПараметров.ВыгрузитьКолонки();
	
	Для Каждого СтрСценарий Из СценарииМоделей Цикл	
		 нСтр =  ТаблицаПараметров.Добавить();
		 нСтр.Сценарий = СтрСценарий.Сценарий;
		 нСтр.Базовое  = СтрСценарий.Базовый;
		 нСтр.Организация  = АналитикиОтбораИсточник.Организации;
		 нСтр.ПериодОтчета  = АналитикиОтбораИсточник.ПериодыСвязанныйПериод;	 
	КонецЦикла;	
	
	//
	ЭкземплярОбъект.ИнициализироватьКонтекст();

	ЭкземплярОбъект.СформироватьСтруктуруПараметров();
	//УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭкземплярОбъект);
	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(ЭкземплярОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИсходныйДокумент", АдресВременногоХранилища);
	
	ТаблицаПараметровАдрес = ПоместитьВоВременноеХранилище(ТаблицаПараметров,Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ТаблицаПараметровАдрес", ТаблицаПараметровАдрес);

	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПроверитьВложенныеСтроки(иСтрока)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];

	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	Возврат РабочийОбъект.ПроверитьВложенныеАналитики(ПолеТабличногоДокументаМакет,иСтрока);		
			
КонецФункции

&НаСервере
Функция ПроверитьЗаблокированныеЯчейки(МассивУдаляемых)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	ЕстьЗаблокированные = Ложь;
	
	Для Каждого Инд Из МассивУдаляемых Цикл
		ЕстьЗаблокированные = РабочийОбъект.ПроверитьЗаблокированныеЯчейки(ПолеТабличногоДокументаМакет,Инд);		
		Если ЕстьЗаблокированные Тогда
			 Возврат ЕстьЗаблокированные;
		КонецЕсли;		
	КонецЦикла;	
		
	Возврат ЕстьЗаблокированные;	
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокуАналитикиСервер(МассивУдаляемых)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
    РабочийОбъект.УдалитьСтрокиАналитик(ПолеТабличногоДокументаМакет,МассивУдаляемых);		
	
КонецПроцедуры

&НаСервере
Процедура УдалитьАналитики(Верх,Низ,Лево,Право)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.УдалитьСтрокиАналитик(РасчетПоказателей.ТаблицаИзмененныхПоказателей,ПолеТабличногоДокументаМакет,Верх,Низ,Лево,Право);	

КонецПроцедуры

&НаСервере
Функция ПолучитьАналитикиЯчейки(Расшифровка)
	
	СтруктураРасшифровки = Новый Структура;
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(,Расшифровка,,,СтруктураРасшифровки);
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервере
Процедура ПолучитьСтруктуруТЗРасшифровок(СтруктураАналитик,СписокВыбораАналитик,АдресТЗРасшифровок)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);	
	СтруктураАналитикРасшифровок =  ТаблицыИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	
	ДобавляемыеАналитики = РабочийОбъект.ПолучитьСтруктуруНеобходимыхАналитик(СтруктураАналитик,ТаблицыИнтерфейса);
	//Расшифровок нет - добавляем текущуюю+все незаполненные.
	СписокВыбораАналитик = Новый СписокЗначений;
	ДобавляемаяТекущаяАналитика = Неопределено;
	Если ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик.Количество() =0 Тогда
		
		Для Каждого СтрАналитика Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл
			Если ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Свойство(СтрЗаменить(СтрАналитика.Код,"Фильтр_","")) Тогда
				Если  СтрАналитика.Редактируется Тогда
					нАналитика = СтруктураАналитикРасшифровок.Добавить();
					ЗаполнитьЗначенияСвойств(нАналитика,СтрАналитика);
					СписокВыбораАналитик.Добавить(СтрЗаменить(СтрАналитика.Код,"Фильтр_",""));
				КонецЕсли;
			КонецЕсли;
			Если НЕ СтруктураАналитик[СтрЗаменить(СтрАналитика.Код,"Фильтр_","")] = Неопределено Тогда
				Если  СтрАналитика.Редактируется Тогда
					ДобавляемаяТекущаяАналитика = СтрАналитика;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;	
	
	Если НЕ ДобавляемаяТекущаяАналитика = Неопределено  Тогда
		нАналитика = СтруктураАналитикРасшифровок.Добавить();
		ЗаполнитьЗначенияСвойств(нАналитика,ДобавляемаяТекущаяАналитика);
	КонецЕсли;
	
	СписокВыбораАналитик = СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");                                	
	АдресТЗРасшифровок = ПоместитьВоВременноеХранилище(СтруктураАналитикРасшифровок,Новый УникальныйИдентификатор);
	
	Возврат;
	
КонецПроцедуры	

&НаСервере
Процедура РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений)
		     	
	МассивСтрок = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера,Символ(13));	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если Лев(Стр,1) = Символ(10) Тогда
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Прав(Стр,СтрДлина(Стр)-1),"	");
		Иначе
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Стр,"	");
		КонецЕсли;
		МассивЗначений.Добавить(МассивЗначенийСтроки);
	КонецЦикла;
		 		
КонецПроцедуры	

&НаСервере
Процедура ВставитьЗначенияСервер(ИмяОбласти,МассивСтрок,МассивЗначений)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.ВставитьЗначениеВОбласть(ЭтаФорма[ТекущийМакет],ИмяОбласти,МассивЗначений);
		
КонецПроцедуры

&НаСервере
Функция ВставитьЗначениеПоказателя(ИмяОбласти,Значение)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	Если РабочийОбъект.РежимОбратногоРаспределения Тогда
		СтруктураРасшифровки = Новый Структура;
		СТ_ОбработкаОбъект = РабочийОбъект;
		СТ_ОбработкаОбъект.ВставитьЗначениеВОбласть(ЭтаФорма[ТекущийМакет],ИмяОбласти,Значение,ТекущаяОбластьТекст);
		Возврат СтруктураРасшифровки;

	Иначе
		СтруктураРасшифровки = Новый Структура;
		СТ_ОбработкаОбъект = РабочийОбъект;
		СТ_ОбработкаОбъект.ВставитьЗначениеВОбласть(ЭтаФорма[ТекущийМакет],ИмяОбласти,Значение,ТекущаяОбластьТекст);
		Возврат СтруктураРасшифровки;
	КонецЕсли;
		
КонецФункции	

&НаСервере
Процедура ОчиститьСодержимоеРаскрытияСервер(ИмяОбласти)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.ВставитьЗначениеВОбласть(ЭтаФорма[ТекущийМакет],ИмяОбласти,"");
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьЗначениеПоКолонкам(ИмяОбласти,МассивЗначений)
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.ВставитьЗначениеВОбласть(ЭтаФорма[ТекущийМакет],ИмяОбласти,МассивЗначений);
	   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРежимыРаботы()
	
	Элементы.РежимРаботыСТ.СписокВыбора.Очистить();
	
	Элементы.РежимРаботыСТ.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.Основной, Нстр("ru = 'Основной'"),, БиблиотекаКартинок.Сформировать_Мастер);
	Элементы.РежимРаботыСТ.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение, Нстр("ru = 'Обратное распределение'"),, БиблиотекаКартинок.Иерархия);
	Элементы.РежимРаботыСТ.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных, Нстр("ru = 'Статусы и согласование'"),, БиблиотекаКартинок.НастроитьИсполняющего);
	Элементы.РежимРаботыСТ.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой, Нстр("ru = 'Сравнение с базой'"),, БиблиотекаКартинок.ТреугольникиВверхВниз);
	Элементы.РежимРаботыСТ.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.Диаграмма, Нстр("ru = 'Диаграмма'"),, БиблиотекаКартинок.ЗначокОтчет);
	
КонецПроцедуры	

&НаСервере
Процедура ИзменитьАналитики(Параметр)
	
	Если Не ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;	
	
	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	ТЗДанные = ПолучитьИзВременногоХранилища(РабочийОбъект.ТЗДанныеАдрес);
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	ДобавленныеАналитики = ПолучитьИзВременногоХранилища(Параметр.ДобавленныеАналитики);
	СтруктураАналитик =     ПолучитьИзВременногоХранилища(Параметр.СтруктураАналитикАдрес);
	ТзДобавленныхАналитик = ПолучитьИзВременногоХранилища(РабочийОбъект.ТзДобавленныхАналитикАдрес);
			
	//Для Каждого Стр Из  СтруктураТаблицИнтерфейса.ДоступныеАналитики Цикл
	//	Если СтруктураАналитик.Свойство(Стр.НазначениеАналитикиКод) И СтруктураАналитик[Стр.НазначениеАналитикиКод] = Неопределено Тогда
	//		 СтруктураАналитик[Стр.НазначениеАналитикиКод] = Стр.ТипСубконто;
	//	КонецЕсли;	
	//Конеццикла;	
	СтруктураОтбораСтроки = Новый Структура;
	ДобавляемаяАналитикаКод = ДобавленныеАналитики.Колонки[0].Имя;
	ТекстСвертки = "СтатусБлокировки,";
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		Если НЕ Стр.Код = "Фильтр_Показатели_Колонки" Тогда
			 ТекстСвертки = ТекстСвертки+СтрЗаменить(стр.Код,"Фильтр_","")+",";
		КонецЕсли;	
		Если Стр.Код = "Фильтр_Периоды" Тогда
			  ТекстСвертки = ТекстСвертки+"ПериодыСвязанныйПериод"+",";
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого стр Из СтруктураАналитик Цикл
		Если НЕ (стр.Значение)=Неопределено И НЕ ДобавляемаяАналитикаКод =стр.Ключ  Тогда
			 СтруктураОтбораСтроки.Вставить(стр.Ключ,стр.Значение);
			 ТекстСвертки = ТекстСвертки+стр.Ключ+",";
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрДобавленныеАналитики Из  ДобавленныеАналитики Цикл
		  Нстр =  ТзДобавленныхАналитик.Добавить();
		  Нстр.ПоказательСтрока = СтруктураАналитик.ПоказателиСтрокаОтчета;	  
		  ЗаполнитьЗначенияСвойств(Нстр,СтруктураАналитик);	
		  ЗаполнитьЗначенияСвойств(Нстр,СтрДобавленныеАналитики);
		  Нстр.ДобавляемаяАналитикаКод = ДобавляемаяАналитикаКод;
		  Нстр.СтруктураОтбораСтроки = СтруктураОтбораСтроки;
          Нстр.ТекстСвертки = ЛЕВ(ТекстСвертки,СтрДлина(ТекстСвертки)-1);
	КонецЦикла;	
	
	РабочийОбъект.ТзДобавленныхАналитикАдрес = ПоместитьВоВременноеХранилище(ТзДобавленныхАналитик,Новый УникальныйИдентификатор);  
	ЗначениеВРеквизитФормы(РабочийОбъект,ТекущийОбъект);

КонецПроцедуры	

&НаСервере
Процедура ОбновитьСтруктуруПолей(Адрес)
		
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъект].АдресТаблицИнтерфейса);	
	ТаблицыИнтерфейса.ДополнительныеПоля =ПолучитьИзВременногоХранилища(Адрес);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыДиаграммы()
	
	Элементы.ВариантыДиаграммы.СписокВыбора.Очистить();
	
	Для Каждого СтрВариант Из ТипДиаграммы Цикл   
		Элементы.ВариантыДиаграммы.СписокВыбора.Добавить(СтрВариант,СтрВариант);   
	КонецЦикла;	   
	
	ВариантыДиаграммы =  ТипДиаграммы.ГистограммаОбъемная
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АнализТипов(ИсходноеОписаниеТипов, ПривестиКФорме) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СодержитТипТип",        Ложь);
	Результат.Вставить("СодержитТипДата",       Ложь);
	Результат.Вставить("СодержитТипБулево",     Ложь);
	Результат.Вставить("СодержитТипСтрока",     Ложь);
	Результат.Вставить("СодержитТипЧисло",      Ложь);
	Результат.Вставить("СодержитТипПериод",     Ложь);
	Результат.Вставить("СодержитТипУИД",        Ложь);
	Результат.Вставить("СодержитТипХранилище",  Ложь);
	Результат.Вставить("СодержитОбъектныеТипы", Ложь);
	Результат.Вставить("ОграниченнойДлины",     Истина);
	
	Результат.Вставить("КоличествоТипов",            0);
	Результат.Вставить("КоличествоПримитивныхТипов", 0);
	Результат.Вставить("ОбъектныеТипы", Новый Массив);
	
	Если ПривестиКФорме Тогда
		ДобавляемыеТипы = Новый Массив;
		ВычитаемыеТипы = Новый Массив;
		Результат.Вставить("ОписаниеТиповИсходное", ИсходноеОписаниеТипов);
		Результат.Вставить("ОписаниеТиповДляФормы", ИсходноеОписаниеТипов);
	КонецЕсли;
	
	Если ИсходноеОписаниеТипов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивТипов = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		МетаданныеНастройки = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеНастройки <> Неопределено И Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеНастройки) Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
#КонецЕсли
		
		Результат.КоличествоТипов = Результат.КоличествоТипов + 1;
		
		Если Тип = Тип("Тип") Тогда
			Результат.СодержитТипТип = Истина;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Результат.СодержитТипДата = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Результат.СодержитТипБулево = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			Результат.СодержитТипЧисло = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Результат.СодержитТипПериод = Истина;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Результат.СодержитТипСтрока = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
			Если ИсходноеОписаниеТипов.КвалификаторыСтроки.Длина = 0
				И ИсходноеОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
				Результат.ОграниченнойДлины = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Результат.СодержитТипУИД = Истина;
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			Результат.СодержитТипХранилище = Истина;
		Иначе
			Результат.СодержитОбъектныеТипы = Истина;
			Результат.ОбъектныеТипы.Добавить(Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПривестиКФорме
		И (ДобавляемыеТипы.Количество() > 0 Или ВычитаемыеТипы.Количество() > 0) Тогда
		Результат.ОписаниеТиповДляФормы = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийСводнойТаблицы

&НаСервере
Процедура ЗаменитьАналитику(НовоеЗначение,Верх,Низ,Лево,Право) 
	
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];	
	РабочийОбъект = РеквизитФормыВЗначение(ТекущийОбъект);
	РабочийОбъект.ЗаменитьСтрокиАналитик(НовоеЗначение,ПолеТабличногоДокументаМакет,Низ);	
	
КонецПроцедуры	

&НаСервере
Функция РасшифроватьЗаголовок(Расшифровка,ТипОбласти,Редактируется,ЭтоЭтапПроекта=Ложь,Вледелец = Неопределено,КолонкаИмяТипа=Неопределено)
	
	
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъект].АдресХранилищаДанныеРасшифровки);
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяТекущегоРесурса = Расшифровка[Расшифровка.КодРесурса];
	Иначе
		ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	КонецЕсли;
	
	ТипОбласти =ОбщегоНазначенияУХ.ПолучитьСтроковоеПредставлениеТипа(ТипЗнч(ИмяТекущегоРесурса));
	
	Если ТипОбласти = "СправочникСсылка.НастройкиСтруктурыБланка" Тогда
		 ТипОбласти = "СправочникСсылка.СтрокиОтчетов";	 
		 Редактируется = Ложь;
		 Возврат ИмяТекущегоРесурса.СтрокаОтчета;

	ИначеЕсли ТипОбласти = "СправочникСсылка.ШкалыПериодов" Тогда
		 ТипОбласти = "Неопределено";	 	
		 Редактируется = Ложь;
		 Возврат Неопределено;

	 КонецЕсли;	
	
	СтруктураАналитик=ПолучитьАналитикиЯчейки(Расшифровка);
	СписокАналитик = Новый СписокЗначений;
	АдресТЗРасшифровок = "";
	ПолучитьСтруктуруТЗРасшифровок(СтруктураАналитик,СписокАналитик,АдресТЗРасшифровок);	
		
	Если СписокАналитик.Количество() = 0 Тогда
		Редактируется = Ложь;
		Возврат ИмяТекущегоРесурса;	
	Иначе  		
		ТзАналитик = ПолучитьИзВременногоХранилища(АдресТЗРасшифровок);
		Редактируется  = ТзАналитик[0].Редактируется;
		ЭтоЭтапПроекта = ТзАналитик[0].ЭтоЭтапПроекта;
		Вледелец       = ТзАналитик[0].ТипСубконто;
		КолонкаИмяТипа = ТзАналитик[0].ТипСтрока;

		Возврат ИмяТекущегоРесурса;
	КонецЕсли;

	Возврат ИмяТекущегоРесурса;
	
КонецФункции	

&НаКлиенте
Процедура ОбработчикПриАктивизацииСодержимогоОбластиСводнойТаблицы(Элемент)
		
	ИмяОбъекта = КэшИспользованныхОбъектов.НайтиСтроки(Новый Структура("ИмяОкна",Элемент.Родитель.Родитель.Имя))[0].ИмяОбъекта; 
	ТекущийБланк = ЭтаФорма[ИмяОбъекта].Бланк;
	ТекущийОбъект = ИмяОбъекта;	
	ТекущийМакет = СтрЗаменить(ИмяОбъекта,"Объект","Поле");
	ТекущееИмяОкна =  Элемент.Родитель.Родитель.Имя;
		
	РежимРаботыСТ =  ЭтаФорма[ТекущийОбъект].РежимРаботы;
    Элементы.КомандыРежимаДиаграммы.Видимость = РежимРаботыСТ = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.Диаграмма");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	ДанныеРасчета = ОбщегоНазначенияСлужебныйКлиентСервер.РасчетныеПоказателиЯчеек(ЭтаФорма[ТекущийМакет], Неопределено);
    СуммаВыделенныхЯчеек = ДанныеРасчета.Сумма;
	КоличествоВыделенныхЯчеек = ДанныеРасчета.Количество;	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительныеНастройки(Команда)
		
	Параметры_ = Новый Структура("Бланк", ТекущийБланк);
    Параметры_.Вставить("ВариантОтображения",ЭтаФорма[ТекущийОбъект].РежимДиаграммы);	
	Параметры_.Вставить("ВариантОтображенияИтогов",ЭтаФорма[ТекущийОбъект].ВариантОтображенияРесурсов);
	Параметры_.Вставить("МасштабОтображения",ЭтаФорма[ТекущийОбъект].Масштаб);
	Параметры_.Вставить("ТочностьОтображения",ЭтаФорма[ТекущийОбъект].Точность);
	Параметры_.Вставить("ВариантОтображенияДиаграммы",ЭтаФорма[ТекущийОбъект].ВариантыДиаграммы);		
	
	ОткрытьФорму("ОбщаяФорма.ФормаДополнительныхНастроекСводнойТаблицы", 
	Параметры_,,,,, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДопПоля(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаОтклоненийЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура("АдресТекущихНастроек,Бланк",ЭтаФорма[ТекущийОбъект].АдресТаблицИнтерфейса,ТекущийБланк);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаНастройкиОтклонений",СтруктураПараметров,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		ПоказатьОповещениеПользователя(,, НСтр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
		Сформировать(Неопределено);	
		УстановитьРежимРедактированияДанных(Ложь);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРаскрытие(Команда)
		
	ПолеТабличногоДокументаМакет =  ЭтаФорма[ТекущийМакет];

	СтруктураПараметров = Новый Структура();
	СтруктураАналитикРасшифровок = Новый Структура();	
		
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	Если  ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СтруктураПараметров = ПодготовитьСтруктуруПараметров(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Расшифровка);
	Иначе	
		Возврат;
	КонецЕсли;
	ЕстьАналитикиДляРасшифровки = Ложь;
	
	Если СтруктураПараметров = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ВидОтчета", ПолучитьВидОтчета(ТекущийБланк));
	
	Если Не СтруктураПараметров = Неопределено Тогда 
		ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров,ЭтаФорма,Истина,,,,РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоддержкаРежимаМоделирования

&НаКлиенте
Процедура ПоказатьПанельСценариев(Команда)
	
	Элементы.ПоказатьПанельСценариев.Пометка = НЕ Элементы.ПоказатьПанельСценариев.Пометка;
	Элементы.ГруппаСценарии.Видимость =  Элементы.ПоказатьПанельСценариев.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарииМоделейПриИзменении(Элемент)
	
	Если СценарииМоделей.Количество() =1 Тогда
		 СценарииМоделей[0].Базовый = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СценарииМоделейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
    СтандартнаяОбработка = Ложь;	
	
	дПараметры = Новый Структура;
	дПараметры.Вставить("СценарийПриемник",СценарииМоделей.НайтиПоИдентификатору(Строка).Сценарий);
	дПараметры.Вставить("СценарийИсточник",СценарииМоделей.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]).Сценарий);
	
	Оповещение = Новый ОписаниеОповещения("ВопросПередКопированиемДанныхЗавершение",ЭтаФорма,дПараметры);
	
	СтрокаШаблона = НСтр("ru = 'Скопировать данные из сценария %1 в сценарий %2 по текущим отборам?'");
	
	Если Не ПустаяСтрока(СтрокаШаблона) тогда		
		ПоказатьВопрос(Оповещение, СтрШаблон(СтрокаШаблона, дПараметры.СценарийИсточник, дПараметры.СценарийПриемник), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередКопированиемДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		ВернутьРисунокДлительнойОперации();
		Попытка	
			ПодготовитьСтруктуруПараметровКопирования(ДополнительныеПараметры.СценарийИсточник,ДополнительныеПараметры.СценарийПриемник);	
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникли ошибки при попытке копирования! Подробнее см. журнал регистрации'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СценарииМоделейБазовыйПриИзменении(Элемент)
	
	Для Каждого стрСценарий Из СценарииМоделей Цикл	
		Если Элемент.Родитель.ТекущиеДанные.Сценарий <> стрСценарий.Сценарий Тогда
			 стрСценарий.Базовый = Ложь;
		Иначе	 
			 стрСценарий.Базовый = Истина;
		КонецЕсли;			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБазуДляСравнения(Ст_ОбработкаОбъект)
	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Ст_ОбработкаОбъект.АдресТаблицИнтерфейса);
	ТекущаяБаза = ТаблицыИнтерфейса.БазаДляОтклонений;
	ТекущаяБаза.Очистить();	
	БазовыйСценарий = СценарииМоделей.НайтиСтроки(Новый Структура("Базовый",Истина))[0].Сценарий;	
	ТаблицыИнтерфейса.БазаДляОтклонений  = ТаблицыИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать,Расчетный",Истина,Ложь));
	
	Для каждого база Из ТаблицыИнтерфейса.БазаДляОтклонений  Цикл	
		База.ИндексПоказателя = СтрЗаменить(Строка(Новый УникальныйИдентификатор()) ,"-","") ;
		База.КодПоказателя = База.ИндексПоказателя+"_"+База.КодПоказателя;
		База.Сценарии = БазовыйСценарий;	
		База.Расчетный  = Истина;
		База.ВидОтклонения  = "АбсОтклонение";
	КонецЦикла; 

	// Если включено сравнение по базе - то расчетные поля не должны выводится
	Для каждого дПоле Из ТаблицыИнтерфейса.ДополнительныеПоля Цикл
		Если дПоле.Расчетный И дПоле.Использовать Тогда
			 дПоле.Использовать = Ложь;
		КонецЕсли; 	
	КонецЦикла;  
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметровКопирования(СценарийИсточник,СценарийПриемник)
	
	Результат = Истина;
	
	//СтруктураПараметров = Новый Структура;
	//
	//СтруктураПараметров.Вставить("Строки",ВыбратьСтрокиТекущегоВО(ТекущийБланк));
	//СтруктураПараметров.Вставить("Показатели",ВыбратьПоказателиТекущегоВО(ТекущийБланк));	
	//СтруктураПараметров.Вставить("ПериодПриемникС",	ПериодПланированияОтборНачало);
	//СтруктураПараметров.Вставить("ПериодПриемникПо",ПериодПланированияОтборОкончание);
	//СтруктураПараметров.Вставить("ПериодИсточникС",	ПериодПланированияОтборНачало);
	//СтруктураПараметров.Вставить("ПериодИсточникПо",ПериодПланированияОтборОкончание);
	//СтруктураПараметров.Вставить("СценарийИсточник",СценарийИсточник);
	//СтруктураПараметров.Вставить("СценарийПриемник",СценарийПриемник);
	//СтруктураПараметров.Вставить("ПериодичностьИсточника",СценарийИсточник.Периодичность);
	//СтруктураПараметров.Вставить("ПериодичностьПриемника",СценарийПриемник.Периодичность);
	//СтруктураПараметров.Вставить("Режим","Копирование");
	//
	//СтруктураПараметров.Вставить("ВидОтчета",ТекущийБланк.Владелец);	
	//СводнаяТаблицаУХ.ЗаполнитьДоступныеАналитикиДляОбработкиПереноса(ТекущийБланк.Владелец,СтруктураПараметров.Строки,ОтборыРасширеннойНастройки,Неопределено);
	//СтруктураПараметров.Вставить("ОтборыРасширеннойНастройки",РеквизитФормывЗначение("ОтборыРасширеннойНастройки"));	
	//СводнаяТаблицаУХ.СкопироватьПоОтборам(СтруктураПараметров,Результат);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
