// Устанавливает использование ресурсов в настройках НастройкиКДВход схемы
// компоновки данных согласно выбранным пользователем настройкам в форме.
&НаСервере
Процедура УстановитьВыбранныеПоляВыводаДинамики(НастройкиКДВход)
	// Инициализация.
	ПолеЗначение		 = Новый ПолеКомпоновкиДанных("Значение");
	ПолеЗначениеПлан	 = Новый ПолеКомпоновкиДанных("ЗначениеПлан");
	ПолеОтклонениеПред	 = Новый ПолеКомпоновкиДанных("ОтклонениеПред");
	ПолеОтклонениеПлан	 = Новый ПолеКомпоновкиДанных("ОтклонениеПлан");
	ПолеНижняяГраница	 = Новый ПолеКомпоновкиДанных("НижняяГраница");
	ПолеВерхняяГраница	 = Новый ПолеКомпоновкиДанных("ВерхняяГраница");
	Если ОтображатьФактическоеЗначение ИЛИ ОтображатьПлановоеЗначение ИЛИ ОтображатьОтклонениеОтБазовогоПериода ИЛИ ОтображатьОтклонениеОтПлана Тогда 
		// Есть выбранные поля. Установим настройки согласно выбору пользователя.
		Для Каждого ТекЭлементы Из НастройкиКДВход.Выбор.Элементы Цикл
			Если ТекЭлементы.Поле = ПолеЗначение Тогда
				ТекЭлементы.Использование = ОтображатьФактическоеЗначение;
			ИначеЕсли ТекЭлементы.Поле = ПолеЗначениеПлан Тогда
				ТекЭлементы.Использование = ОтображатьПлановоеЗначение;	
			ИначеЕсли ТекЭлементы.Поле = ПолеОтклонениеПред Тогда
				ТекЭлементы.Использование = ОтображатьОтклонениеОтБазовогоПериода;	
			ИначеЕсли ТекЭлементы.Поле = ПолеОтклонениеПлан Тогда
				ТекЭлементы.Использование = ОтображатьОтклонениеОтПлана;	
			ИначеЕсли ТекЭлементы.Поле = ПолеНижняяГраница Тогда
				ТекЭлементы.Использование = ОтображатьНижнююГраницу;	
			ИначеЕсли ТекЭлементы.Поле = ПолеВерхняяГраница Тогда
				ТекЭлементы.Использование = ОтображатьВерхнююГраницу;	
			Иначе
				// Не изменяем использование у прочих полей.
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Не выбрано ни одного поля. Уставим использование для всех ресурсов.
		Для Каждого ТекЭлементы Из НастройкиКДВход.Выбор.Элементы Цикл
			Если ТекЭлементы.Поле = ПолеЗначение Тогда
				ТекЭлементы.Использование = Истина;
			ИначеЕсли ТекЭлементы.Поле = ПолеЗначениеПлан Тогда
				ТекЭлементы.Использование = Истина;	
			ИначеЕсли ТекЭлементы.Поле = ПолеОтклонениеПред Тогда
				ТекЭлементы.Использование = Истина;	
			ИначеЕсли ТекЭлементы.Поле = ПолеОтклонениеПлан Тогда
				ТекЭлементы.Использование = Истина;		
			Иначе
				// Не изменяем использование у прочих полей.
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

// Устанавливает диаграмме с настройками комппоновки НастройкиКДВход
// базовое значение в БазовоеЗначениеДиаграммыВход
Процедура УстановитьБазовоеЗначениеДиаграммы(НастройкиКДВход, БазовоеЗначениеДиаграммыВход)
	ТипДиаграммыПараметр = Новый ПараметрКомпоновкиДанных("ТипДиаграммы");
	БазовоеЗначениеПараметр = Новый ПараметрКомпоновкиДанных("ТипДиаграммы.БазовоеЗначение");
	Для Каждого ТекЭлементы Из НастройкиКДВход.ПараметрыВывода.Элементы Цикл
		Если ТекЭлементы.Параметр = ТипДиаграммыПараметр Тогда
			Для Каждого ТекЗначенияВложенныхПараметров Из ТекЭлементы.ЗначенияВложенныхПараметров Цикл
				Если ТекЗначенияВложенныхПараметров.Параметр = БазовоеЗначениеПараметр Тогда
					ТекЗначенияВложенныхПараметров.Значение = БазовоеЗначениеДиаграммыВход;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// По операнду ИмяОперандаВход выставляет настройки выбранных ресурсов в форме.
&НаСервере
Процедура УстановитьВыборРесурсовПоОперанду(ИмяОперандаВход)
	ОтображатьФактическоеЗначение			 = Ложь;
	ОтображатьПлановоеЗначение				 = Ложь;
	ОтображатьОтклонениеОтБазовогоПериода	 = Ложь;
	ОтображатьОтклонениеОтПлана				 = Ложь;
	Если СокрЛП(ИмяОперандаВход) = "ФактическоеЗначениеТекущегоПериода" Тогда
		ОтображатьФактическоеЗначение			 = Истина;
		ОтображатьОтклонениеОтБазовогоПериода	 = Истина;
		ОтображатьОтклонениеОтПлана				 = Истина;
	ИначеЕсли СокрЛП(ИмяОперандаВход) = "ПлановоеЗначение" Тогда
		ОтображатьФактическоеЗначение			 = Истина;
		ОтображатьПлановоеЗначение				 = Истина;
		ОтображатьОтклонениеОтПлана				 = Истина;
	ИначеЕсли СокрЛП(ИмяОперандаВход) = "ФактическоеЗначениеПредыдущегоПериода" Тогда
		ОтображатьФактическоеЗначение			 = Истина;
		ОтображатьОтклонениеОтБазовогоПериода	 = Истина;
	Иначе
		// Во всех остальных случаях выводим все варианты.
		ОтображатьФактическоеЗначение			 = Истина;
		ОтображатьПлановоеЗначение				 = Истина;
		ОтображатьОтклонениеОтБазовогоПериода	 = Истина;
		ОтображатьОтклонениеОтПлана				 = Истина;
	КонецЕсли;
КонецПроцедуры

// Формирует и устанавливает заголовок форме, исходя из данных отчета.
&НаСервере
Процедура СформироватьЗаголовокФормы()
	Если ЗначениеЗаполнено(Показатель.ЕдиницаИзмерения) Тогда
		ЗаголовокФормы = НСтр("ru = '%Показатель% (%ЕдиницаИзмерения%)'");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%Показатель%", Строка(Показатель));
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%ЕдиницаИзмерения%", Строка(Показатель.ЕдиницаИзмерения.КраткоеНаименование));
	Иначе	
		ЗаголовокФормы = НСтр("ru = '%Показатель%'");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%Показатель%", Строка(Показатель));
	КонецЕсли;
	ЭтаФорма.Заголовок = ЗаголовокФормы;
КонецПроцедуры		// СформироватьЗаголовокФормы()

// Возвращает массив по всем ресурсам таблицы.
&НаСервере
Функция ПолучитьМассивЗначенийВТаблицеДинамики(ТаблицаВход)
	РезультатФункции = Новый Массив;
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		// Факт.
		Если ОтображатьФактическоеЗначение Тогда
			РезультатФункции.Добавить(ТекТаблицаВход.Значение);
		Иначе
			// Не требуется добавлять фактическое значение.
		КонецЕсли;
		// План.
		Если ОтображатьПлановоеЗначение Тогда
			РезультатФункции.Добавить(ТекТаблицаВход.ЗначениеПлан);
		Иначе
			// Не требуется добавлять плановое значение.
		КонецЕсли;
		// Отклонение от плана.
		Если ОтображатьОтклонениеОтПлана Тогда
			РезультатФункции.Добавить(ТекТаблицаВход.ОтклонениеПлан);
		Иначе
			// Не требуется добавлять отклоение от планового значения.
		КонецЕсли;
		// Отклонение от пред.
		Если ОтображатьОтклонениеОтБазовогоПериода Тогда
			РезультатФункции.Добавить(ТекТаблицаВход.ОтклонениеПред);
		Иначе
			// Не требуется добавлять отклонение от пред значения.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Получает структуру, содержащую минимум, максимум, абсолютный минимум
// и абсолютный максимум в массиве МассивВход.
&НаСервере
Функция ПолучитьСтруктуруАгрегатовМассива(МассивВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Мин", 0);
	РезультатФункции.Вставить("Макс", 0);
	РезультатФункции.Вставить("МинАбс", 0);
	РезультатФункции.Вставить("МаксАбс", 0);
	Если МассивВход.Количество() > 0 Тогда
		РезультатФункции.Мин = МассивВход[0];
		РезультатФункции.Макс = МассивВход[0];
		РезультатФункции.МинАбс = ТиповыеОтчетыУХ.Абс(МассивВход[0]);
		РезультатФункции.МаксАбс = ТиповыеОтчетыУХ.Абс(МассивВход[0]);
		Для Каждого ТекМассивВход Из МассивВход Цикл
			АбсЗначение = ТиповыеОтчетыУХ.Абс(ТекМассивВход);
			// Минимум.
			Если РезультатФункции.Мин > ТекМассивВход Тогда
				РезультатФункции.Мин = ТекМассивВход;
			Иначе
				// Не изменяем значение.
			КонецЕсли;
			// Максимум.
			Если РезультатФункции.Макс < ТекМассивВход Тогда
				РезультатФункции.Макс = ТекМассивВход;
			Иначе
				// Не изменяем значение.
			КонецЕсли;
			// Минимум абс.
			Если РезультатФункции.МинАбс > АбсЗначение Тогда
				РезультатФункции.МинАбс = АбсЗначение;
			Иначе
				// Не изменяем значение.
			КонецЕсли;
			// Максимум абс.
			Если РезультатФункции.МаксАбс < АбсЗначение Тогда
				РезультатФункции.МаксАбс = АбсЗначение;
			Иначе
				// Не изменяем значение.
			КонецЕсли;
		КонецЦикла;		
	Иначе
		РезультатФункции.Мин = 0;
		РезультатФункции.Макс = 0;
		РезультатФункции.МинАбс = 0;
		РезультатФункции.МаксАбс = 0;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Определяет базовое значение для диаграммы, которая будет отображать таблицу ТаблицаВход.
&НаСервере
Функция ПолучитьБазовоеЗначениеДиаграммы(ТаблицаВход)
	РезультатФункции = 0;
	Если ТаблицаВход.Количество() > 0 Тогда
		МассивЗначенийВТаблице = ПолучитьМассивЗначенийВТаблицеДинамики(ТаблицаВход);
		СтруктураАгрегатов = ПолучитьСтруктуруАгрегатовМассива(МассивЗначенийВТаблице);
		Разброс = СтруктураАгрегатов.МаксАбс - СтруктураАгрегатов.МинАбс;
		Если Разброс = 0 Тогда
			// Все значения совпадают. Выведем диаграмму в исходном виде.
			РезультатФункции = 0;	
		ИначеЕсли СтруктураАгрегатов.Мин >= 0 Тогда
			// Все значения больше нуля. Вычтем 2 разброса из максимума.
			Если СтруктураАгрегатов.МаксАбс > Разброс * 2 Тогда
				РезультатФункции = СтруктураАгрегатов.Макс - Разброс * 2;
			Иначе
				РезультатФункции = 0;			
			КонецЕсли;
		ИначеЕсли (СтруктураАгрегатов.Мин < 0) И (СтруктураАгрегатов.Макс > 0) Тогда
			// Есть значения разных знаков. Вернём 0.
			РезультатФункции = 0;			
		ИначеЕсли (СтруктураАгрегатов.Макс <= 0) Тогда
			// Все значения меньше нуля. Прибавим 2 разброса к минимуму.
			Если СтруктураАгрегатов.МаксАбс > Разброс * 2 Тогда
				РезультатФункции = СтруктураАгрегатов.Мин + Разброс * 2;
			Иначе
				РезультатФункции = 0;			
			КонецЕсли;
		Иначе
			//Неизвестный вариант. Вернём 0.
			РезультатФункции = 0;
		КонецЕсли;
	Иначе
		РезультатФункции = 0;		// Пустая таблица. Выводим значение по умолчанию.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции

// Выставляет в диаграмму СКД с настройками НастройкиКДВход тип диаграммы ТипДиаграммыВход.
&НаСервере
Процедура УстановитьТипДиаграммы(НастройкиКДВход, ТипДиаграммыВход)
	// Выбор нового типа диаграммы.
	НовоеЗначениеТипДиаграммы = БизнесАнализКлиентСерверУХ.ПреобразоватьТипДиаграммы(ТипДиаграммыВход, ТипДиаграммы.Гистограмма);
	// Установка выбранного типа диаграммы.
	ТипДиаграммыПараметр = Новый ПараметрКомпоновкиДанных("ТипДиаграммы");
	Для Каждого ТекЭлементы Из НастройкиКДВход.ПараметрыВывода.Элементы Цикл
		Если ТекЭлементы.Параметр = ТипДиаграммыПараметр Тогда
			ТекЭлементы.Значение = НовоеЗначениеТипДиаграммы;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// УстановитьТипДиаграммы()

// Возвращает копию таблицы значений ТаблицаВход, куда Добавляет и заполняет 
// колонки НижняяГраница и ВерхняяГраница по показателю ПоказательВход. Когда
// показатель не использует коридор значений - будут вставлены нулевые значений.
&НаСервере
Функция ДобавитьКоридорЗначенийВТаблицу(ТаблицаВход, ПоказательВход)
	РезультатФункции = ТаблицаВход.Скопировать();
	// Определим значения границ.
	НижняяГраница = 0;
	ВерхняяГраница = 0;
	Если ПоказательВход.ИспользоватьКоридорЗначений Тогда
		НижняяГраница = ПоказательВход.НижняяГраницаЗначения;
		ВерхняяГраница = ПоказательВход.ВерхняяГраницаЗначения;
	Иначе
		НижняяГраница = 0;
		ВерхняяГраница = 0;
	КонецЕсли;
	// Добавим колонки.
	РезультатФункции.Колонки.Добавить("НижняяГраница");
	РезультатФункции.Колонки.Добавить("ВерхняяГраница");
	// Заполним значения добавленных колонок.
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		ТекРезультатФункции.НижняяГраница = НижняяГраница;
		ТекРезультатФункции.ВерхняяГраница = ВерхняяГраница;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Формирует отчет по динамике показателя по выбранным настройкам.
&НаСервере
Процедура Сформировать_Сервер()
	Если ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		// Получение входных данных.
		ТаблицаДинамикиРабочая = ТаблицаДинамики.Выгрузить();
		БазовоеЗначениеДиаграммы = ПолучитьБазовоеЗначениеДиаграммы(ТаблицаДинамикиРабочая);
		ТаблицаДинамикиРабочая = ДобавитьКоридорЗначенийВТаблицу(ТаблицаДинамикиРабочая, Показатель);
		ТипДиаграммыРабочий = ТипДиаграммыДинамики;
		// Получение макета.
		СхемаКД = Справочники.ПанелиОтчетов.ПолучитьМакет("МакетДинамика");
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		// Настройка компоновки.
		НастройкиКД = СхемаКД.НастройкиПоУмолчанию;
		УстановитьВыбранныеПоляВыводаДинамики(НастройкиКД);
		УстановитьБазовоеЗначениеДиаграммы(НастройкиКД, БазовоеЗначениеДиаграммы);
		УстановитьТипДиаграммы(НастройкиКД, ТипДиаграммыРабочий);
		// Вывод СКД.
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиКД, ДанныеРасшифровки);
		Результат.Очистить();
		ВнешниеДанные = Новый Структура("ТЗ_Динамика", ТаблицаДинамикиРабочая);
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеДанные, ДанныеРасшифровки, Ложь);
		ПроцессорВыводаРезультатаОтчета = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВыводаРезультатаОтчета.УстановитьДокумент(Результат);
		ПроцессорВыводаРезультатаОтчета.НачатьВывод();
		ПроцессорВыводаРезультатаОтчета.Вывести(ПроцессорКомпоновкиДанных);
		ПроцессорВыводаРезультатаОтчета.ЗакончитьВывод();
		// Кеш результатов выполнения.
		АдресРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить исходную таблицу динамики показателя'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

// Возврщает структуру расшифровки по идентификатору РасшифровкаВход.
&НаСервере
Функция ПолучитьЗначениеРасшифровки(РасшифровкаВход)
	РезультатФункции = ТиповыеОтчетыУХ.ПолучитьЗначенияИзРасшифровки(АдресСхемыКомпоновкиДанных, АдресРасшифровки, РасшифровкаВход, "Период");
	Возврат РезультатФункции;
КонецФункции

// Возвращает адрес таблицы динамики измнения показателя Показатель по 
// параметрам Контекст.
&НаСервере
Функция ПолучитьАдресТаблицыРасшифровкиПоАналитикам(Показатель, Контекст)
	РезультатФункции = Справочники.ПанелиОтчетов.ПолучитьАдресТаблицыРасшифровкиПоАналитикам(Показатель, Контекст);
	Возврат РезультатФункции;
КонецФункции

// Выводит отчет расшифровки по структуре по идентификатору расшифровки РасшифровкаВход.
&НаКлиенте
Процедура РасшифроватьПоСтруктуре(РасшифровкаВход)
	СтруктураРасшифровки = ПолучитьЗначениеРасшифровки(РасшифровкаВход);
	Если СтруктураРасшифровки.Свойство("Период") Тогда
		Если СтруктураКонтекста.Количество() > 0 Тогда
			АдресТаблицыРасшифровки = ПолучитьАдресТаблицыРасшифровкиПоАналитикам(Показатель, СтруктураКонтекста);
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("АдресТаблицы", АдресТаблицыРасшифровки);
			ПараметрыФормы.Вставить("Показатель", Показатель);
			ПараметрыФормы.Вставить("ПериодОтчета", СтруктураРасшифровки.Период);
			ПараметрыФормы.Вставить("АдресКонтекста", ПоместитьВоВременноеХранилище(СтруктураКонтекста));
			ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаРасшифровкиПоАналитикам", ПараметрыФормы);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить контекст для дополнительной расшифровки. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Не удалось получить период расшифровки. Скорее всего, это поле нельзя расшифровать. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровкиПродолжение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	Если ВыполненноеДействие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, ПараметрВыполненногоДействия);
	ИначеЕсли ТипЗнч(ВыполненноеДействие) = Тип("Структура") Тогда
		Если ВыполненноеДействие.Свойство("Наименование") Тогда
			Если СокрЛП(ВыполненноеДействие.Наименование) = "Основная" Тогда
				Операнд = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Показатель, "ИсточникЗначенияТекущегоПериода");
				СпособПолучения = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Операнд, "СпособПолучения");
				Если СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета") Тогда
					СтруктураРасшифровки = ПолучитьЗначениеРасшифровки(ДополнительныеПараметры.Расшифровка);
					Если СтруктураРасшифровки.Свойство("Период") Тогда
						ПериодОтобра = СтруктураРасшифровки.Период;
					Иначе
						ПериодОтобра = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
					КонецЕсли;
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ОтборПоВалюте", СтруктураКонтекста.ОсновнаяВалюта);
					СтруктураОтбора.Вставить("ОтборПоОрганизации", СтруктураКонтекста.Организация);
					СтруктураОтбора.Вставить("ПериодПланированияОтборОкончание", ПериодОтобра);
					СтруктураОтбора.Вставить("ОтборПоСценарию", СтруктураКонтекста.Сценарий);
					СтруктураОтбора.Вставить("ОтборПоПроекту", СтруктураКонтекста.ОтборПоПроекту);
					АдресХранилищаПеременныхДляРасчета = БизнесАнализВызовСервераУХ.ПолучитьАдресОбъектаРасчетаОперанда(Показатель, Операнд, СтруктураКонтекста, СтруктураОтбора, УникальныйИдентификатор);
					СтруктураОтбора = Новый Структура;
					СтруктураПараметров = Новый Структура;
					ПоказательОтчета = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Операнд, "ПоказательОтбор");
					СтруктураПараметров.Вставить("ПоказательОтчета", ПоказательОтчета);
					СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета", АдресХранилищаПеременныхДляРасчета);
					СтруктураПараметров.Вставить("мТекущаяВалюта", СтруктураКонтекста.ОсновнаяВалюта);
					СтруктураПараметров.Вставить("СтруктураОтбора", СтруктураОтбора);
					ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",СтруктураПараметров);
					Возврат;
				Иначе
					ТекущаяИБ = ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка");
					ОтборПоВалюте = СтруктураКонтекста.ОсновнаяВалюта;
					ТиповыеОтчеты_КлиентУХ.ОсновнаяРасшифровка(СтруктураКонтекста, Операнд, Показатель, ТекущаяИБ, ОтборПоВалюте, ЭтаФорма);
				КонецЕсли;
			ИначеЕсли СокрЛП(ВыполненноеДействие.Наименование) = "Структура" Тогда	
				Если ДополнительныеПараметры.Свойство("Расшифровка") Тогда
					РасшифроватьПоСтруктуре(ДополнительныеПараметры.Расшифровка);
				Иначе
					// Нет данных для расшифровки. Не выводим.
				КонецЕсли;
			Иначе
				// Неизвестный вариант расшифровки. Ничего не делаем.
			КонецЕсли;
		Иначе
			// Неизвестный вариант расшифровки. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Неизвестный вариант расшифровки. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Добавляет пункты меню в расшифровку.
&НаКлиенте
Функция ДополнительныеПунктыМеню()
	СписокДействийРасшифровка = Новый СписокЗначений;
	// Основная.
	СтруктураПараметровРасшифровкаОсновная = Новый Структура;
	СтруктураПараметровРасшифровкаОсновная.Вставить("Наименование", "Основная");
	СписокДействийРасшифровка.Добавить(СтруктураПараметровРасшифровкаОсновная, "Основная");
	// Структура.
	СтруктураПараметровРасшифровкаПоСтруктуре = Новый Структура;
	СтруктураПараметровРасшифровкаПоСтруктуре.Вставить("Наименование", "Структура");
	СписокДействийРасшифровка.Добавить(СтруктураПараметровРасшифровкаПоСтруктуре, "Структура", , БиблиотекаКартинок.Структура);
	СписокРезультат = Новый СписокЗначений;
	СписокРезультат.Добавить(СписокДействийРасшифровка, "Расшифровка", , БиблиотекаКартинок.Лупа);
	Возврат СписокРезультат;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Получение исходных данных.
	Показатель = Параметры.Показатель;
	ИмяОперанда = Параметры.ИмяОперанда;
	АдресТаблицы = Параметры.АдресТаблицы;
	АдресКонтекста = Параметры.АдресКонтекста;
	Если ЭтоАдресВременногоХранилища(АдресКонтекста) Тогда
		СтруктураКонтекста = ПолучитьИзВременногоХранилища(АдресКонтекста);
	Иначе
		СтруктураКонтекста = Новый Структура;
	КонецЕсли;
	Если ЗначениеЗаполнено(Показатель.ТипДиаграммы) Тогда
		ТипДиаграммыДинамики = Показатель.ТипДиаграммы;
	Иначе
		ТипДиаграммыДинамики = Перечисления.ТипыДиаграмм.Гистограмма;
	КонецЕсли;
	ТаблицаДинамикиРабочая = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ТаблицаДинамики.Загрузить(ТаблицаДинамикиРабочая);
	ЕстьКоридорЗначенийПоказателя = Показатель.ИспользоватьКоридорЗначений;
	ОтображатьНижнююГраницу = Ложь;
	ОтображатьВерхнююГраницу = Ложь;
	// Настройка формы.
	СформироватьЗаголовокФормы();
	УстановитьВыборРесурсовПоОперанду(ИмяОперанда);
	Элементы.ГруппаОтображениеГраниц.Видимость = ЕстьКоридорЗначенийПоказателя;
	// Вывод отчета.
	Сформировать_Сервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчет(Команда)
	Сформировать_Сервер();
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьПоСтруктуре(Расшифровка);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Создадим источник
	ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресРасшифровки,	ИсточникДоступныхНастроекКомпоновкиДанных);
	// Ограничим доступные действия расшифровки
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДополнительныеПараметры = Новый Структура("Расшифровка", Расшифровка);
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатОбработкаДополнительнойРасшифровкиПродолжение", ЭтаФорма, ДополнительныеПараметры);
	// Осуществим выбор действия расшифровки пользователем.
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДополнительныеПунктыМеню());
КонецПроцедуры

