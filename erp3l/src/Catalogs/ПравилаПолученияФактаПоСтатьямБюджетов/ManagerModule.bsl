#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Запускает фоновое задание для регистрации документов к отражению факта
// 
// Параметры:
// 	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта. 
// 	НачалоПериода - Дата - Начало периода.
// 	КонецПериода - Дата - Окончание периода.
// 	РеквизитыСравнения - Структура - ДействуетС, ДействуетПо ПравилПолученияФакта до записи.
//
Процедура ЗапуститьРегистрациюДокументовДляОтраженияФоном(Ссылка,НачалоПериода,КонецПериода,РеквизитыСравнения=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(РеквизитыСравнения) И РеквизитыСравнения.Свойство("ДействуетС") Тогда
		Если РеквизитыСравнения.ДействуетС <> НачалоПериода Тогда
			НачалоПериода = Мин(НачалоПериода, РеквизитыСравнения.ДействуетС);
		КонецЕсли;
		
		Если РеквизитыСравнения.ДействуетПо <> КонецПериода Тогда
			КонецПериода = Макс(КонецПериода, РеквизитыСравнения.ДействуетПо);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПравила = Ссылка.ПолучитьОбъект(); 
	ВидыДокументов = ФактическиеДанныеБюджетированияСервер.ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила).ВыгрузитьКолонку("ИмяВидаДокумента");
	
	Ключ = "РегистрацияДокументовДляОтраженияФакта" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется регистрация документов для отражения факта';
								|en = 'Registering documents for recording fact'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ВидыДокументов);
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ЗарегистрироватьДокументыДляОтражения");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура регистрирует документы к отражению факта.
// 
// Параметры:
//	ВидыДокументов - Массив - Массив имен видов документов из метаданных.
//	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта.
//	НачалоПериода - Дата - Необязательный. Начало периода.
//  КонецПериода - Дата - Необязательный. Окончание периода.
//
Процедура ЗарегистрироватьДокументыДляОтражения(ВидыДокументов, Ссылка, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	СброситьКэшБюджетов(Ссылка);
	
	Если ВидыДокументов.Количество() = 1 И ВидыДокументов[0] = "" Тогда
		ВидыДокументов = Новый Массив;
		Для Каждого Документ Из Метаданные.Документы Цикл
			ВидыДокументов.Добавить(Документ.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Документ,
		|	Таблица.Дата КАК ПериодЗаписи,
		|	&ТекстВидДокумента КАК ИмяВидаДокумента
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	&ТекстУсловия";
	
	ТекстыЗапроса = Новый Массив;
	Для каждого ВидДокумента Из ВидыДокументов Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&Таблица", "Документ." + ВидДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидДокумента", """" + ВидДокумента + """");
		
		Если Метаданные.Документы[ВидДокумента].Проведение = 
				Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ТекстУсловия = "Таблица.Проведен";
		Иначе
			ТекстУсловия = "НЕ Таблица.ПометкаУдаления";
		КонецЕсли;
		Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата >= &НачалоПериода";
		ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата <= &КонецПериода";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Разделитель);
	ТекстЗапроса = СхемыЗапросов.УстановитьПомещениеВоВременнуюТаблицу(ТекстЗапроса, "ТаблицаДокументов");
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекстЗапроса = ТекстЗапроса + ";
		| ВЫБРАТЬ * ИЗ ТаблицаДокументов";
		
		Ключ = "ОтражениеДокументовВБюджетировании";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Если АктивныеЗадания.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			| ГДЕ НЕ Документ В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ ИЗ РегистрСведений.ЗаданияКОтражениюВБюджетировании)";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода));
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		
		НомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		НомерЗадания = НомерЗадания + 1;
		Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(НомерЗадания + 1);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Регистрация документов для отражения факта';
						|en = 'Register documents for recording fact'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
			
	Для Каждого Стр Из ТаблицаДокументов Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
		НаборЗаписей.Отбор.Документ.Установить(Стр.Документ);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	НомерЗадания);
			ЭлементБлокировки.УстановитьЗначение("Документ",		Стр.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЗаписьОтражения = НаборЗаписей.Добавить();
			ЗаписьОтражения.НомерЗадания = НомерЗадания;
			ЗаполнитьЗначенияСвойств(ЗаписьОтражения,Стр);
			НаборЗаписей.Записать(Истина);
		
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖР = НСтр("ru = 'Регистрация документов для отражения факта';
							|en = 'Register documents for recording fact'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				СобытиеЖР,
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТ
	Отчеты.РезультатРаботыПравилПолученияФактическихДанных.ДобавитьКомандуОтчетаПоСтатьеБюджетов(КомандыОтчетов);
	//-- НЕ УТ
	
	Возврат; // Не используется в УТ.
	
КонецПроцедуры

#КонецОбласти


//++ НЕ УТКА
#Область СлужебныеПроцедурыИФункции
	
// Очищает вспомогательный кэш видов бюджетов
// 
// Параметры
//   Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов.
//
Процедура СброситьКэшБюджетов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка
		|ПОМЕСТИТЬ ЭлементыФинансовойОтчетности
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
		|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Справочник.Владелец КАК Ссылка
		|ИЗ
		|	ЭлементыФинансовойОтчетности КАК ЭлементыФинансовойОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ПО ЭлементыФинансовойОтчетности.Ссылка = Справочник.Ссылка";
		
	РеквизитыСравнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "СтатьяБюджетов");

	Запрос.УстановитьПараметр("Значение", РеквизитыСравнения.СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидБюджета.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
//-- НЕ УТКА


//++ НЕ УТ
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("029d5c5e-a193-47f4-a97f-80771be96080");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Конвертирует выражения заполнения аналитик в новый формат.
	|Заполняет реквизит ""План счетов международного учета"".';
	|en = 'Converts dimension population expressions to a new format.
	|Populates the ""Financial accounting charts of accounts"" attribute"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолноеИмя());
	//++ НЕ УТКА
	Читаемые.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя());
	//-- НЕ УТКА
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьВидыКонтактнойИнформацииУТ";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

#Область Обработчики_2_5_5

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ПравилаПолученияФактаПоСтатьямБюджетов";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	(НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики1 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики1ИсторияПереходаНаНовыеФормулы ПОДОБНО """"
	|	ИЛИ НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики2 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики2ИсторияПереходаНаНовыеФормулы ПОДОБНО """"
	|	ИЛИ НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики3 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики3ИсторияПереходаНаНовыеФормулы ПОДОБНО """"
	|	ИЛИ НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики4 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики4ИсторияПереходаНаНовыеФормулы ПОДОБНО """"
	|	ИЛИ НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики5 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики5ИсторияПереходаНаНовыеФормулы ПОДОБНО """"
	|	ИЛИ НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики6 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики6ИсторияПереходаНаНовыеФормулы ПОДОБНО """"
	//++ НЕ УТКА
	|	ИЛИ ПравилаПолученияФактаПоСтатьямБюджетов.ПланСчетовМеждународногоУчета = ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)
	|		И ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет)
	//-- НЕ УТКА
	|	)
	|	И ВЫБОР КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных ССЫЛКА Справочник.НастройкиХозяйственныхОпераций ТОГДА
	|		ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).ИспользоватьВБюджетировании
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыплатаЗарплаты)
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	ПланСчетовПоУмолчанию = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	//-- НЕ УТКА
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			Иначе
				
				ОбъектИзменен = Ложь;

				Если СправочникОбъект.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплаты Тогда
					
					СправочникОбъект.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплатыПоЗарплатномуПроекту;
					
				Иначе
					ОбработатьИзменениеВыраженийЗаполненияАналитик(СправочникОбъект, ОбъектИзменен);
				
					//++ НЕ УТКА
					Если Не ЗначениеЗаполнено(СправочникОбъект.ПланСчетовМеждународногоУчета)
						И СправочникОбъект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
							СправочникОбъект.ПланСчетовМеждународногоУчета = ПланСчетовПоУмолчанию;
					КонецЕсли;
					//-- НЕ УТКА
				Конецесли;
				
				Если СправочникОбъект.Модифицированность() Или ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


// Выполняет обработку изменений выражений заполнения аналитик (перевод формул на новый формат).
// 
// Параметры:
// 	СправочникОбъект - СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов - Обрабатываемый объект.
// 	ОбъектИзменен - Булево - Флаг изменения объекта.
//
Процедура ОбработатьИзменениеВыраженийЗаполненияАналитик(СправочникОбъект, ОбъектИзменен)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВыраженияДляОбработки = Новый Соответствие;
	ИсходныеВыражения = Новый Массив;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИмяРеквизита = "ВыражениеЗаполненияАналитики" + НомерАналитики;
		ИмяРеквизитаИстория = "ВыражениеЗаполненияАналитики" + НомерАналитики + "ИсторияПереходаНаНовыеФормулы";
		Если НЕ ЗначениеЗаполнено(СправочникОбъект[ИмяРеквизитаИстория])
			И ЗначениеЗаполнено(СправочникОбъект[ИмяРеквизита]) Тогда
			Выражение = СправочникОбъект[ИмяРеквизита];
			ВыраженияДляОбработки.Вставить(ИмяРеквизита, Выражение);
			Если ИсходныеВыражения.Найти(Выражение) = Неопределено Тогда
				ИсходныеВыражения.Добавить(Выражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыраженияДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СхемаПолученияДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(СправочникОбъект.Ссылка);
	
	
	РезультатПреобразований = РаботаСФормулами.ПреобразоватьВФорматИдентификаторовОперандыФормулыСКД(ИсходныеВыражения,
		СхемаПолученияДанных);
		
	Если РезультатПреобразований.ЕстьОшибки Тогда
		ТекстОшибок = "";
		Для Каждого КлючИЗначение Из РезультатПреобразований.СообщенияОшибокПреобразования Цикл
			ТекстОшибок = ТекстОшибок + ?(ТекстОшибок = "", "", " / " + Символы.ПС) + КлючИЗначение.Значение;
		КонецЦикла;
		СправочникОбъект.УдалитьЕстьОшибкиПереходаНаНовыйФорматФормул = Истина;
		ИмяСобытияОшибкиЖР = НСтр("ru = 'Перевод формул и выражение в новый формат';
									|en = 'Conversion of formulas and expression to a new format'");
		ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиЖР,
			УровеньЖурналаРегистрации.Ошибка,
			СправочникОбъект.Метаданные(),
			СправочникОбъект.Ссылка,
			ТекстОшибок);
		// Переход на новый формат формул не гарантируется, т.к. выражения могут содержать ошибки.
		// Отказа от транзакции не происходит.
		
		ОбъектИзменен = Истина;
	КонецЕсли;
	
	ПреобразованныеВыражения = РезультатПреобразований.ПреобразованныеВыражения;
	Для каждого ИмяРеквизитаИИсходноеВыражение Из ВыраженияДляОбработки Цикл
		ИмяРеквизита = ИмяРеквизитаИИсходноеВыражение.Ключ;
		ИмяРеквизитаИстория = ИмяРеквизита + "ИсторияПереходаНаНовыеФормулы";
		ИсходноеВыражение = ИмяРеквизитаИИсходноеВыражение.Значение;
		ВыражениеЗамены = ПреобразованныеВыражения.Получить(ИсходноеВыражение);
		Если ЗначениеЗаполнено(ВыражениеЗамены) Тогда
			СправочникОбъект[ИмяРеквизита] = ВыражениеЗамены;
		КонецЕсли;
		СправочникОбъект[ИмяРеквизитаИстория] = ИсходноеВыражение;
		
		ОбъектИзменен = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

#КонецЕсли
