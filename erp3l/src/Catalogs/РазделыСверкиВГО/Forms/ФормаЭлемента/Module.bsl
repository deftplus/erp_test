
#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнициализироватьКэшСпособовОпределенияНаправленияУчета();
	
	ТипДляЭлиминацииПоказательСверки = 
		Перечисления.ТипПоказателяЭлиминации.ПоказательСверки;
	ЭтаФорма.ТолькоПросмотр = 
		НЕ Справочники.ШаблоныСверкиВГО.МожноРедактироватьОбъект(
			Объект.Владелец);
			
	ИнициализироватьТипНастройкиИД();
	
	СпособОпределенияНаправленияУчетаНаФорме =
		ПолучитьСпособОпределенияНаправленияУчетаНаФорме(
			Объект.ИсточникиДанных);
			
	СтарыйСпособЭлиминации = Объект.СпособЭлиминации;
	
	УстановитьРеквизитыФормыПоСпособуЭлиминации();
	ЗаполнитьАнилитикиИИДФормыПоОбъекту();
	СпособАвтоматическогоУрегулированияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ГруппаРаскрытия) Тогда
		Справочники.РазделыСверкиВГО.УстановитьГруппуРаскрытия(ТекущийОбъект);
	КонецЕсли;
	
	ТекущийОбъект.ЕстьДопАналитики = ЕстьДопАналитики(АналитикиСверки);
	ТекущийОбъект.РасширеннаяНастройкаИсточниковДанных =
		флРасширеннаяНастройкаИсточниковДанных;
		
	Если НЕ ТекущийОбъект.РасширеннаяНастройкаИсточниковДанных Тогда
		ЗаписатьОсновныеИсточникиДанныхФормы(ТекущийОбъект);
	КонецЕсли;
	
	УстановитьДополнительныеИсточникиДанных(
		ТекущийОбъект, 
		ИсточникиДанныхДляУдаления);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если флИзменениеАналитик ИЛИ флИзменениеРесурсов Тогда
		ОбъектГруппыАналитик = Объект.ГруппаРаскрытия.ПолучитьОбъект();
		
		Если флИзменениеАналитик Тогда
			СтрокиАналитик = АналитикиСверки.НайтиСтроки(
					Новый Структура("ВидПоля", 1));
			АналитикиГруппы = ОбъектГруппыАналитик.Аналитики;
			АналитикиГруппы.Очистить();
			Для Каждого СтрокаАналитики_ Из СтрокиАналитик Цикл
				НоваяСтрока_ = АналитикиГруппы.Добавить();
				ЗаполнитьСтрокуАналитикиГруппыПоДаннымСтрокиФормы(
						НоваяСтрока_, СтрокаАналитики_);
			КонецЦикла;
			ОбъектГруппыАналитик.Записать();
			флИзменениеАналитик = Ложь;
		КонецЕсли;
		
		Если флИзменениеРесурсов Тогда
			СтрокиПоказателей = АналитикиСверки.НайтиСтроки(
					Новый Структура("ВидПоля", 2));
			РесурсыГруппы = ОбъектГруппыАналитик.Ресурсы;
			РесурсыГруппы.Очистить();
			Для Каждого Ресурс_ Из СтрокиПоказателей Цикл
				НоваяСтрока_ = РесурсыГруппы.Добавить();
				ЗаполнитьСтрокуПоказателяГруппыПоДаннымСтрокиФормы(НоваяСтрока_, Ресурс_);
			КонецЦикла;
			ОбъектГруппыАналитик.Записать();
			флИзменениеРесурсов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаИД = ТекущийОбъект.ИсточникиДанных;
	Для Каждого ЭлементИД_ Из ИсточникиДанныхДляУдаления Цикл
		
		ИД_ = ЭлементИД_.Значение;
		мСторкиИД_ = ТаблицаИД.НайтиСтроки(Новый Структура("ИсточникДанных", ИД_));
		
		Если мСторкиИД_.Количество() = 0 
				И ТекущийОбъект.ИсточникДанныхФСДЗакупки <> ИД_ 
				И ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж <> ИД_ Тогда
			СверкаВГОУХ.ОбработатьПометкуНаУдалениеПодчиненногоОбъекта(ИД_, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ИсточникиДанныхДляУдаления.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьОбИзменении(Тип("СправочникСсылка.РазделыСверкиВГО"));
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ИсточникиДанных(Команда)
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ПотребительРасчета", Объект.Ссылка));
	ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаСписка", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ПараметрыФормы = Новый Структура("СпособЭлиминации", Объект.СпособЭлиминации);
	ОповещениеЗакрытия = Новый ОписаниеОповещения("Подключаемый_ЗаполнитьРазделСверки", ЭтотОбъект);
	ОткрытьФорму("Справочник.РазделыСверкиВГО.Форма.НастройкиЗаполнения", 
					ПараметрыФормы, ЭтаФорма, , , , ОповещениеЗакрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура флРасширеннаяНастройкаИсточниковДанныхПриИзменении(Элемент)
	НовоеЗначениеТипаРедкатированияИД =
		флРасширеннаяНастройкаИсточниковДанных;
	// Сбрасываем новое значение к старому, чтобы переключить его
	// если пройдем проверку.
	флРасширеннаяНастройкаИсточниковДанных = 
		НЕ флРасширеннаяНастройкаИсточниковДанных;
	ОбработатьПопыткуПереключенияРасширеннойНастройкиИД(
		НовоеЗначениеТипаРедкатированияИД);
КонецПроцедуры

&НаКлиенте
Процедура СпособЭлиминацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияВыборСпособаЭлиминации =
		Новый ОписаниеОповещения("ОбработкаВыбораСпособаЭлиминации",
		ЭтаФорма);
	Элементы.СпособЭлиминации.СписокВыбора.ПоказатьВыборЭлемента(
		ОписаниеОповещенияВыборСпособаЭлиминации,
		НСтр("ru='Укажите способ элиминации'"),
		Объект.СпособЭлиминации);
КонецПроцедуры

&НаКлиенте
Процедура СпособЭлиминацииПриИзменении(Элемент)
	СпособЭлиминацииПриИзмененииНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиПриИзменении(Элемент)
	// Изменение ресурсов в ручном режиме не предполагается.
	флИзменениеАналитик = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоказателяНаСервере(ТекДанныеАналитикСверки, 
										ПараметрыИД,
										ИмяПоляАналитикиСверки)
										
	Если флЭтоЭлиминацияПоказателейОтчетов Тогда
		
		Если ТекДанныеАналитикСверки = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(ПараметрыИД) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекДанныеАналитикСверки.ТипДляЭлиминации = ТипДляЭлиминацииПоказательСверки Тогда
			
			Если ПараметрыИД.ИмяПоляАналитикиСверки = "ПолеИсточникаДанныхДт" Тогда
				ВидОтчета = ФСДОбщий;
			Иначе
				ВидОтчета = ФСДКредитора;
			КонецЕсли;
			
			КодПоказателя = ТекДанныеАналитикСверки[ИмяПоляАналитикиСверки];
			УстановитьСсылкуНаПоказательНаСервере(
				ВидОтчета,
				КодПоказателя,
				ПараметрыИД,
				ИмяПоляАналитикиСверки);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиИмяПриИзменении(Элемент)
	ИдСтроки = Элементы.АналитикиСверки.ТекущаяСтрока;
	ТекСтрока = АналитикиСверки.НайтиПоИдентификатору(ИдСтроки);
	Если ТекСтрока <> Неопределено Тогда
		Префикс = ?(ТекСтрока.ВидПоля = 1, "Аналитика", "Ресурс");
		мИмен = СверкаВГОКлиентСервер.ВыгрузитьКолонкуКоллекцииФормыВМассив(
					АналитикиСверки, "Имя", ТекСтрока);
		
		Результат = СверкаВГОКлиентСервер.ПроверитьИмяРеквизита(ТекСтрока.Имя, Префикс, мИмен);
		Если Не Результат.Успех Тогда
			ТекСтрока.Имя = Результат.Имя;
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = Результат.ТекстОшибки;
			СообщениеПользователю.Поле  = "АналитикиСверки[" + 
				АналитикиСверки.Индекс(ТекСтрока) + "].Имя";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = 
			НСтр("ru='Необходимо сохранить настройку сверки, прежде чем редактировать источники данных'");
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособАвтоматическогоУрегулированияПриИзменении(Элемент)
	СпособАвтоматическогоУрегулированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Обязательная Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхПриИзменении(Элемент)
	флЗапрещенаУпрощеннаяНастройкаИД = 
		ПолучитьФлагЗапрещенияРасширеннойНастройкиИД(
			Объект.ИсточникиДанных,
			КэшСпособовОпределенияНаправленияУчета);
	УстановитьОформлениеЭлементовЗапрещенияУпрощеннойНастройки(
		флЗапрещенаУпрощеннаяНастройкаИД);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ИсточникиДанных.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.ИсточникДанных) Тогда
		ИсточникиДанныхДляУдаления.Добавить(ТекДанные.ИсточникДанных);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхФСДЗакупкиПриИзменении(Элемент)
	ИсточникиДанныхДляУдаления.Добавить(Объект.ИсточникДанныхФСДЗакупки);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхФСДСебестоимостьПродажПриИзменении(Элемент)
	ИсточникиДанныхДляУдаления.Добавить(Объект.ИсточникДанныхФСДСебестоимостьПродаж);
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияНаправленияУчетаНаФормеПриИзменении(Элемент)
	СпособОпределенияНаправленияУчетаНаФормеПриИзмененииНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРаскрытияОбщаяПриИзменении(Элемент)
	ГруппаРаскрытияПриИзмененииНаСервере(ПараметрыИД, ГруппаРаскрытияОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРаскрытияКредитораПриИзменении(Элемент)
	ГруппаРаскрытияПриИзмененииНаСервере(ПараметрыИДКредитора, ГруппаРаскрытияКредитора);
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиПолеИсточникаДанныхДтНачалоВыбора(
				Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборПоляИД(ПараметрыИД, Элементы.АналитикиСверки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиПолеИсточникаДанныхКтНачалоВыбора(
					Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборПоляИД(
		ПараметрыИДКредитора,
		Элементы.АналитикиСверки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьНовуюАналитику(Команда)
	ДобавитьНовуюАналитику();
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиТипПоляПриИзменении(Элемент)
	Если Элементы.АналитикиСверки.ТекущаяСтрока <> Неопределено Тогда
		АналитикиСверкиТипПоляПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикиСверкиСпособЗаполненияПриИзменении(Элемент)
	ОчиститьСопоставлениеАналитики(Элементы.АналитикиСверки.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте

// Спрашивает подтверждение о сохранении формы
// если стоит признак Модифицированность.
// В случае положительного ответа сохраняет ее,
// и вызывает заданный обработчик.
&НаКлиенте
Процедура СпроситьСохранитьИВыполнитьОбработчик(Обработчик, ТекстВопроса)
	Если Модифицированность Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОбработчикПослеСохранения", Обработчик);
		ОбработчикПодтвержденияСохранения =
			Новый ОписаниеОповещения("ОбработатьПодтвержденияСохранения", 
				ЭтаФорма,
				ДопПараметры);
		ПоказатьВопрос(
			ОбработчикПодтвержденияСохранения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтвержденияСохранения(Результат, ДопПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Записать();
	ОбработчикПослеСохранения = Неопределено;
	ДопПараметры.Свойство("ОбработчикПослеСохранения", ОбработчикПослеСохранения);
	Если ОбработчикПослеСохранения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПослеСохранения, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеФормы()
	
	флЭтоЭлиминацияЗапасов = 
		(Объект.СпособЭлиминации = ПредопределенноеЗначение(
			"Перечисление.СпособыЭлиминации.ЭлиминацияЗапасов"));
	
	Элементы.ИсточникДанныхФСДЗакупки.Видимость = флЭтоЭлиминацияЗапасов;
	Элементы.ИсточникДанныхФСДСебестоимостьПродаж.Видимость = флЭтоЭлиминацияЗапасов;
	
	УстановитьОформлениеЭлементовЗапрещенияУпрощеннойНастройки(
		флЗапрещенаУпрощеннаяНастройкаИД);
		
	УстановитьОформлениеЭлементовРасширеннойНастройки(
		флРасширеннаяНастройкаИсточниковДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементовЗапрещенияУпрощеннойНастройки(
										ЗапрещенаУпрощеннаяНастройкаИД)
	Элементы.ДекорацияЗапрещеноПереключатьТипНастройкиИД.Видимость = 
		ЗапрещенаУпрощеннаяНастройкаИД;
	Элементы.флРасширеннаяНастройкаИсточниковДанных.Видимость =
		НЕ ЗапрещенаУпрощеннаяНастройкаИД;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементовРасширеннойНастройки(
							РасширеннаяНастройкаИсточниковДанных)
	флДтКтПоЗнакуОперации = 
		(СпособОпределенияНаправленияУчетаНаФорме = 2);
	Элементы.ГруппаСтраницаИсточникиДанных.Видимость =
		РасширеннаяНастройкаИсточниковДанных;
	Элементы.ГруппаИсточникиДанных.Видимость =
		НЕ РасширеннаяНастройкаИсточниковДанных;
	Элементы.АналитикиСверкиПолеИсточникаДанныхДт.Видимость = 
		НЕ РасширеннаяНастройкаИсточниковДанных;
	Элементы.АналитикиСверкиПолеИсточникаДанныхКт.Видимость = 
		НЕ РасширеннаяНастройкаИсточниковДанных
		И НЕ флДтКтПоЗнакуОперации;
	Элементы.АналитикиСверкиПолеИсточникаДанныхДт.Заголовок =
			?(флДтКтПоЗнакуОперации, 
				НСтр("ru='Данные из...'"),
				НСтр("ru='Данные дебитора из...'"));
				
	Если РасширеннаяНастройкаИсточниковДанных Тогда
		Элементы.ГруппаСтраницаИспользуемыеАналитики.Заголовок =
			НСтр("ru='Требуемые данные'");
	Иначе
		Элементы.ГруппаСтраницаИспользуемыеАналитики.Заголовок =
			НСтр("ru='Получение данных'");
		Элементы.ФСДОбщий.Заголовок =
				?(флДтКтПоЗнакуОперации, 
					НСтр("ru='ФСД'"), 
					НСтр("ru='ФСД дебитора'"));
		Элементы.ГруппаФСДКредитора.Видимость = НЕ флДтКтПоЗнакуОперации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСпособаЭлиминации(Значение, ДопПараметры) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("ЭлементСпискаЗначений") Тогда
		Значение = Значение.Значение;
	КонецЕсли;
	Если Значение = СтарыйСпособЭлиминации Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтарыйСпособЭлиминации) Тогда
		ТекстВопроса = 
			НСтр("ru='Будут изменены настройки аналитик, ресурсов и источников данных. Объект будет сохранен.'");
	Иначе
		ТекстВопроса = НСтр("ru='Объект будет записан.'");
	КонеЦЕсли;
	
	ОписаниеОповещенияВыборСпособаЭлиминации =
		Новый ОписаниеОповещения("ОбработкаПодтверждениеВыбораСпособаЭлиминации",
		ЭтаФорма,
		Значение);
	ПоказатьВопрос(
		ОписаниеОповещенияВыборСпособаЭлиминации,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодтверждениеВыбораСпособаЭлиминации(Результат, ВыбранныйСпособЭлиминации) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйСпособЭлиминации = ВыбранныйСпособЭлиминации;
	Объект.СпособЭлиминации = ВыбранныйСпособЭлиминации;
	
	СпособЭлиминацииПриИзменении(Элементы.СпособЭлиминации);
КонецПроцедуры

// Решает, какую форму выбора открыть в зависимости от способа заполнения.
&НаКлиенте
Процедура ОбработатьВыборПоляИД(ПараметрыИД, ИдентификаторСтрокиАналитики)
	СпособЗаполнения = ОбщегоНазначенияКлиентСерверУХ.ПолучитьЗначениеПоляКоллекции(
			АналитикиСверки, "СпособЗаполнения", ИдентификаторСтрокиАналитики);
					
	Если НЕ ЗначениеЗаполнено(СпособЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособЗаполнения = ПредопределенноеЗначение(
			"Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение") Тогда
		ОткрытьФормуВыбораФиксированногоЗначения(ПараметрыИД, ИдентификаторСтрокиАналитики);
		
	ИначеЕсли СпособЗаполнения = ПредопределенноеЗначение(
			"Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы") Тогда
		ОткрытьФормуВыбораДереваПолей(ПараметрыИД, ИдентификаторСтрокиАналитики);
	КонецЕсли;
КонецПроцедуры

// Запустить выбор произвольного значения для типа выбранной строки аналитики.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораФиксированногоЗначения(ПараметрыИД, ИдентификаторСтрокиАналитики)
	СтрокаАналитики = АналитикиСверки.НайтиПоИдентификатору(
						ИдентификаторСтрокиАналитики);
	Если СтрокаАналитики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаАналитики.ТипыЗначенийАналитики.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПараметрыИД", ПараметрыИД);
		ДопПараметры.Вставить("ТекущаяСтрока", ИдентификаторСтрокиАналитики);
		
		ОписаниеОповещенияПослеВводаЗначения = Новый ОписаниеОповещения(
				"ОбработатьВводФиксированногоЗначенияПоляИсточника", ЭтотОбъект,
				ДопПараметры);
		
		ВыбранноеЗначение = СтрокаАналитики[ПараметрыИД.ИмяПоляФиксированноеЗначение];
		ОписаниеТипов = ПолучитьОписаниеТиповИзМассиваСтрокТипов(
				СтрокаАналитики.ТипыЗначенийАналитики);
		ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаЗначения,
				ВыбранноеЗначение,, ОписаниеТипов);
	КонецЕсли;
КонецПроцедуры

// Активизировать выбор значения поля из дерева значений.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораДереваПолей(ПараметрыИД, ИдентификаторСтрокиАналитики)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПараметрыИД", ПараметрыИД);
	ДопПараметры.Вставить("ИмяРеквизитаДереваФормы", ПараметрыИД.ИмяРеквизитаДерева);
	ДопПараметры.Вставить("ИмяПоляАналитикиСверки", ПараметрыИД.ИмяПоляАналитикиСверки);
	ДопПараметры.Вставить("ТекущаяСтрока", ИдентификаторСтрокиАналитики);
	
	ОписаниеОповещенияОВыбореПоляИсточника = Новый ОписаниеОповещения(
			"ОбработатьОповещенияОВыбореПоляИсточника", ЭтотОбъект, ДопПараметры);
	ИменаПоказываемыхКолонок = Новый Соответствие;
	ИменаПоказываемыхКолонок.Вставить(
		НСтр("ru='НаименованиеБД'"),
		НСтр("ru='Поле ФСД'"));
	// Ищем текущее значение поля ИД
	ИдСтрокиДереваПолей = Неопределено;
	ЗначениеПоля = ОбщегоНазначенияКлиентСерверУХ.ПолучитьЗначениеПоляКоллекции(
				АналитикиСверки,
				ПараметрыИД.ИмяПоляАналитикиСверки,
				ИдентификаторСтрокиАналитики);
	Если НЕ ПустаяСтрока(ЗначениеПоля) Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
				"ПолеБД", 
				ИдСтрокиДереваПолей,
				ПараметрыИД.ДеревоПолейБД.ПолучитьЭлементы(), 
				ЗначениеПоля, 
				Ложь);
	КонецЕсли;
	ИмяПоля = ОбщегоНазначенияКлиентСерверУХ.ПолучитьЗначениеПоляКоллекции(
				АналитикиСверки, "Имя", ИдентификаторСтрокиАналитики);
	// Открыть окно выбора из дерева значений
	ВыборОбъектовКлиентУХ.ОткрытьФормуВыбораИзДереваЗначений(
			ПараметрыИД.ДеревоПолейБД,
			ЭтотОбъект,
			ИменаПоказываемыхКолонок,
			ИдСтрокиДереваПолей,
			ОписаниеОповещенияОВыбореПоляИсточника,
			СтрШаблон(НСтр("ru='Выбор поля ФСД для реквизита сверки: %1'"), ИмяПоля),
			Истина,
			ПараметрыИД);
КонецПроцедуры

// Обработка выбора значения поля источника данных
//
&НаКлиенте
Процедура ОбработатьОповещенияОВыбореПоляИсточника(Результат, ДопПараметры) Экспорт
	Перем ПараметрыИД;
	ДеревоИзвне = Неопределено;
	мИндексов = Неопределено;
	Если НЕ ЗначениеЗаполнено(Результат)
			ИЛИ НЕ Результат.Свойство("Дерево", ДеревоИзвне)
			ИЛИ НЕ Результат.Свойство("мИндексов", мИндексов) Тогда
		Возврат;
	КонецЕсли;
	Если мИндексов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИД = ДопПараметры.ПараметрыИД;
	ИдТекСтроки = ДопПараметры.ТекущаяСтрока;
	ИмяПоляАналитикиСверки = ДопПараметры.ИмяПоляАналитикиСверки;
	Если ИдТекСтроки = Неопределено
			ИЛИ ПустаяСтрока(ИмяПоляАналитикиСверки) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьРеквизитФормыДеревоПоДаннымРеквизитФормыДерево(
		ДеревоИзвне,
		ДопПараметры.ИмяРеквизитаДереваФормы);
	ВыбраннаяСтрока =
		ОбщегоНазначенияКлиентСерверУХ.ПолучитьЭлементДереваФормыПоИндексам(
			ЭтотОбъект[ДопПараметры.ИмяРеквизитаДереваФормы], 
			мИндексов);
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанныеАналитикСверки = АналитикиСверки.НайтиПоИдентификатору(ИдТекСтроки);
	Если ТекДанныеАналитикСверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтрокиАналитики = АналитикиСверки.Индекс(
		АналитикиСверки.НайтиПоИдентификатору(
			ИдТекСтроки));
	Если ТекДанныеАналитикСверки.ВидПоля = 1 Тогда
		// Аналитика
		Если НЕ ТекДанныеАналитикСверки.ДопАналитикаСверки
				И НЕ СоответствуютТипыРеквизитов(
								ТекДанныеАналитикСверки, ВыбраннаяСтрока) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Несовпадение типов аналитик.'");
			Сообщение.Поле = "АналитикиСверки["
				+ ИндексСтрокиАналитики + "]."
				+ ПараметрыИД.ИмяПоляАналитикиСверки
				+ "Наименование";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		Если ТекДанныеАналитикСверки.ДопАналитикаСверки Тогда
			УстановитьТипПоляСтрокиАналитики(
				ТекДанныеАналитикСверки, 
				ВыбраннаяСтрока.ВидАналитики,
				ВыбраннаяСтрока.ТипЗначения);
		КонецЕсли;
	Иначе
		// Показатель
		Если Лев(ВыбраннаяСтрока.НаименованиеБД, 12) <> НСтр("ru='Показатель :'") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Нужно выбрать показатель, а не аналитику.'");
			Сообщение.Поле = "АналитикиСверки["
				+ ИндексСтрокиАналитики + "]."
				+ ПараметрыИД.ИмяПоляАналитикиСверки
				+ "Наименование";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	УстановитьПараметрическоеЗначениеАналитики(
		ИдТекСтроки,
		ПараметрыИД,
		ВыбраннаяСтрока.ПолеБД,
		ВыбраннаяСтрока.НаименованиеБД);
КонецПроцедуры

// Обработка выбора произвольного значения для подстановки в поле источника данных.
//
&НаКлиенте
Процедура ОбработатьВводФиксированногоЗначенияПоляИсточника(
											ВыбранноеЗначение, 
											ДопПараметры) Экспорт
	Перем ПараметрыИД;
	ИдТекСтроки = ДопПараметры.ТекущаяСтрока;
	ПараметрыИД = ДопПараметры.ПараметрыИД;
	Если ИдТекСтроки = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыИД) Тогда
		Возврат;
	КонецЕсли;
	 УстановитьФиксированноеЗначениеАналитики(
	 	ИдТекСтроки,
		ПараметрыИД,
		ВыбранноеЗначение);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрическоеЗначениеПоляИсточника(
										СтрокаАналитики,
										ПараметрыИД, 
										ПолеБД,
										ПредставлениеПоляБД)
	СтрокаАналитики.СпособЗаполнения = ПредопределенноеЗначение(
		"Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
	СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки] = ПолеБД;
	СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки + "Наименование"] =
		ПредставлениеПоляБД;
	СтрокаАналитики[ПараметрыИД.ИмяПоляФиксированноеЗначение] = 
		Неопределено;
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксированноеЗначениеАналитики(ИдентификаторСтроки,
												   ПараметрыИД,
												   ВыбранноеЗначение)
	СтрокаАналитикСверки =
		АналитикиСверки.НайтиПоИдентификатору(ИдентификаторСтроки);
	УстановитьФиксированноеЗначениеПоляИсточника(
		СтрокаАналитикСверки, 
		ПараметрыИД, 
		ВыбранноеЗначение);
	ОбновитьСтрокуСоответствияИД(
		ПараметрыИД, 
		ИдентификаторСтроки, 
		Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрическоеЗначениеАналитики(ИдентификаторСтроки,
												   ПараметрыИД,
												   ПолеБД,
												   НаименованиеБД)
	СтрокаАналитикСверки =
		АналитикиСверки.НайтиПоИдентификатору(ИдентификаторСтроки);
	УстановитьПараметрическоеЗначениеПоляИсточника(
		СтрокаАналитикСверки,
		ПараметрыИД,
		ПолеБД,
		НаименованиеБД);
	ОбновитьСтрокуСоответствияИД(
		ПараметрыИД, 
		ИдентификаторСтроки, 
		Ложь);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФиксированноеЗначениеПоляИсточника(
										СтрокаАналитики,
										ПараметрыИД, 
										Значение)
	СтрокаАналитики.СпособЗаполнения = ПредопределенноеЗначение(
		"Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение");
	СтрокаАналитики[ПараметрыИД.ИмяПоляФиксированноеЗначение] = Значение;
	СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки] = "";
	СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки + "Наименование"] =
			Строка(Значение);
КонецПроцедуры
	
// Добавить новую аналитику в таблицу значений АналитикиСверки.
//
&НаКлиенте
Процедура ДобавитьНовуюАналитику()
	
	ИменаАналитик = СверкаВГОКлиентСервер.ВыгрузитьКолонкуКоллекцииФормыВМассив(
						АналитикиСверки, "Имя");
	
	НоваяСтрока = АналитикиСверки.Добавить();
	
	НоваяСтрока.Имя = СверкаВГОКлиентСервер.СгенерироватьНовоеИмяРеквизита(
							ИменаАналитик, "Аналитика");
	НоваяСтрока.ТипДляЭлиминации = ПредопределенноеЗначение(
		"Перечисление.ТипыАналитикЭлиминации.ТолькоСверка");
	НоваяСтрока.Обязательная = Ложь;
	НоваяСтрока.ИспользоватьДляСверки = Истина;
	НоваяСтрока.Изменять = Истина;
	НоваяСтрока.ДопАналитикаСверки = Истина;
	НоваяСтрока.ВидПоля = 1;
	НоваяСтрока.ТипПоля = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка");
	НоваяСтрока.Использовать = НСтр("ru = 'Сверки и элиминации'");
	НоваяСтрока.СпособЗаполнения = ПредопределенноеЗначение(
		"Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
	
	// Переместим выше ресурса сверки
	АналитикиСверки.Сдвинуть(АналитикиСверки.Индекс(НоваяСтрока), -1);
	
	Элементы.АналитикиСверки.ТекущаяСтрока = НоваяСтрока;
	
	Элементы.АналитикиСверки.ИзменитьСтроку();
	
КонецПроцедуры

// ПроверитьСоответствие типа поля строки аналитик сверки
// и поля выбранного пользователем.
//
&НаКлиенте
Функция СоответствуютТипыРеквизитов(СтрокаАналитикСверки, СтрокаДереваПолейБД)
	Если СтрокаАналитикСверки = Неопределено
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаАналитикСверки.ТипПоля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаАналитикСверки.ТипПоля = СтрокаДереваПолейБД.ВидАналитики Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрТип ИЗ СтрокаАналитикСверки.ТипыЗначенийАналитики Цикл
		Если СтрокаДереваПолейБД.ТипЗначения.НайтиПоЗначению(СтрТип) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
    Возврат Ложь;
КонецФункции

// Определяет есть-ли в таблице аналитик дополнительные.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЕстьДопАналитики(АналитикиСверки)
	Отбор = Новый Структура("ДопАналитикаСверки", Истина);
	Возврат (АналитикиСверки.НайтиСтроки(Отбор).Количество() > 0);
КонецФункции

// Очищает поля настроек связанные с источниками данных.
//
// Параметры:
//  ИдентификаторСтрокиАналитики - Число - идентификатор в таблице
//		значений "АналитикиСверки".
//
&НаКлиенте
Процедура ОчиститьСопоставлениеАналитики(ИдентификаторСтрокиАналитики)
	ТекСтрока = АналитикиСверки.НайтиПоИдентификатору(ИдентификаторСтрокиАналитики);
	ТекСтрока.ПолеИсточникаДанныхДт = "";
	ТекСтрока.ПолеИсточникаДанныхКт = "";
	ТекСтрока.ПолеИсточникаДанныхДтНаименование = "";
	ТекСтрока.ПолеИсточникаДанныхКтНаименование = "";
	ТекСтрока.ФиксированноеЗначениеДт = Неопределено;
	ТекСтрока.ФиксированноеЗначениеКт = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПопыткуПереключенияРасширеннойНастройкиИД(
									НовоеЗначение)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НовоеЗначение",
		НовоеЗначение);
	ОбработчикИзмененияТипаНастройкиИД =
		Новый ОписаниеОповещения(
			"ОбработатьИзменениеТипаНастройкиИД", 
			ЭтаФорма,
			ДопПараметры);
	СпроситьСохранитьИВыполнитьОбработчик(
		ОбработчикИзмененияТипаНастройкиИД,
		НСтр("ru='Раздел сверки будет сохранен. Продолжить?'"));
КонецПроцедуры
								
&НаКлиенте
Процедура ОбработатьИзменениеТипаНастройкиИД(Результат, ДопПараметры) Экспорт
	НовоеЗначение = ДопПараметры.НовоеЗначение;
	флРасширеннаяНастройкаИсточниковДанных = НовоеЗначение;
	Если НЕ флРасширеннаяНастройкаИсточниковДанных Тогда
		ОбновитьИсточникиДанныхФормы();
	КонецЕсли;
	УстановитьОформлениеЭлементовРасширеннойНастройки(
		флРасширеннаяНастройкаИсточниковДанных);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРазделСверки(РезультатЗакрытия, ДопПараметры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Или (РезультатЗакрытия = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.СпособЭлиминации <> Объект.СпособЭлиминации Тогда
		
		Объект.СпособЭлиминации = РезультатЗакрытия.СпособЭлиминации; 
		
		СпособЭлиминацииПриИзмененииНаСервере();
		УстановитьОформлениеФормы();
	
	КонецЕсли;
	
	ЗаполнитьРазделСверки(РезультатЗакрытия);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаСервере

&НаСервере
Процедура ИнициализироватьКэшСпособовОпределенияНаправленияУчета()
	
	СпособыОпределенияСтруктура = Новый Структура;
	МаксИндекс = 
		Перечисления.СпособОпределенияНаправленияУчета.Количество() - 1;
	МетаданныеЗначенийПеречисления = 
		Метаданные.Перечисления.СпособОпределенияНаправленияУчета.ЗначенияПеречисления;
	Для Индекс = 0 По МаксИндекс Цикл
		Значение = 
			Перечисления.СпособОпределенияНаправленияУчета[Индекс];
		СпособыОпределенияСтруктура.Вставить(
			МетаданныеЗначенийПеречисления[Индекс].Имя,
			Значение);
	КонецЦикла;
	
	КэшСпособовОпределенияНаправленияУчета = 
		Новый ФиксированнаяСтруктура(
			СпособыОпределенияСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТипНастройкиИД()
	флЗапрещенаУпрощеннаяНастройкаИД = 
		ПолучитьФлагЗапрещенияРасширеннойНастройкиИД(
			Объект.ИсточникиДанных,
			КэшСпособовОпределенияНаправленияУчета);
	флРасширеннаяНастройкаИсточниковДанных =
		Объект.РасширеннаяНастройкаИсточниковДанных
		ИЛИ	флЗапрещенаУпрощеннаяНастройкаИД;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТЗАналитикФормыПоОбъекту(Объект, АналитикиСверки)
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособЭлиминации) Тогда
		Возврат;
	КонецЕсли;
	
	// Аналитики сверки из группы раскрытия
	АналитикиСверки.Загрузить(ПолучитьТаблицуАналитикИзГруппыРаскрытия(Объект.ГруппаРаскрытия));

	// Заполним массивы типов
	Для Каждого СтрокаАналитики Из АналитикиСверки Цикл
		УстановитьТипыЗначенийСтрокиАналитикСверки(СтрокаАналитики);
	КонецЦикла;
	
	// Аналитики сверки из способа элиминации
	ОписаниеЭлиминации = ЭлиминацияВГОУХ.ПолучитьОписаниеСпособаЭлиминации(
		Объект.СпособЭлиминации, 
		Объект.Владелец);
		
	флИзменениеАналитик = Ложь;
	
	Для Каждого Аналитика_ Из ОписаниеЭлиминации.Аналитики Цикл
		МассивСтрок = АналитикиСверки.НайтиСтроки(Новый Структура("ТипДляЭлиминации", Аналитика_.ТипДляЭлиминации));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока_ = АналитикиСверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока_, Аналитика_);
			флИзменениеАналитик = Истина;
		КонецЕсли;
	КонецЦикла;
	
	флИзменениеРесурсов = Ложь;
	Для Каждого Ресурс_ Из ОписаниеЭлиминации.Показатели Цикл
		МассивСтрок = АналитикиСверки.НайтиСтроки(Новый Структура("ТипДляЭлиминации", Ресурс_.ТипДляЭлиминации));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока_ = АналитикиСверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока_, Ресурс_);
			флИзменениеРесурсов = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыФормыПоСпособуЭлиминации()
	
	Если ЗначениеЗаполнено(Объект.СпособЭлиминации) Тогда
		флЭтоЭлиминацияПоказателейОтчетов =
			(Объект.СпособЭлиминации = 
				Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов);
	Иначе
		флЭтоЭлиминацияПоказателейОтчетов = Ложь;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура СпособЭлиминацииПриИзмененииНаСервере()
	
	УстановитьРеквизитыФормыПоСпособуЭлиминации();
	
	Если (НЕ ЗначениеЗаполнено(Объект.Наименование)
				ИЛИ СтрНайти(Объект.Наименование, НСтр("ru='Настройка:'")) > 0)
			И ЗначениеЗаполнено(Объект.СпособЭлиминации) Тогда
		Название = НСтр("ru='Настройка: '") + Объект.СпособЭлиминации;
		Объект.Наименование = Название + " " 
			+ СлещующийНомерНазвания(Объект.Владелец, Название);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗначения) Тогда
		Объект.ВидЗначения =
			Перечисления.СпособыЭлиминации.ВидЗначенияВГОДляСпособаЭлиминации(
				Объект.СпособЭлиминации);
	КонецЕсли;
	
	// Подготовим и заполним объект раздела сверки.
	РазделСверкиОбъект = РеквизитФормыВЗначение("Объект");
	
	// Если не выбрана гр. аналитик, то устанавливаем существующую, либо создаем новую
	Справочники.РазделыСверкиВГО.УстановитьГруппуРаскрытия(РазделСверкиОбъект);
	
	// Если необходимо, то установим источники данных для ФСД_Закупки и ФСД_Себестоимость
	УстановитьДополнительныеИсточникиДанных(
		РазделСверкиОбъект,
		ИсточникиДанныхДляУдаления);
		
	// Для корректного заполнения источника данных на основании раздела
	// сверки, нужно иметь актуальную ссылку на раздел.
	РазделСверкиОбъект.Записать();
	ЗначениеВРеквизитФормы(РазделСверкиОбъект, "Объект");
	
	// Заполняем таблицу источников данных возможными типами
	// для элиминации (из гр.раскрытия), и заполненными
	// (из ИсточникиДанных)
	ЗаполнитьАнилитикиИИДФормыПоОбъекту();
	
КонецПроцедуры

&НаСервере
Функция СлещующийНомерНазвания(Владелец, Название)
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		Возврат 1;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(РазделыСверкиВГО.Наименование, &Позиция, 100) КАК Наименование
		|ИЗ
		|	Справочник.РазделыСверкиВГО КАК РазделыСверкиВГО
		|ГДЕ
		|	РазделыСверкиВГО.Владелец = &Владелец
		|	И РазделыСверкиВГО.Наименование ПОДОБНО &Название";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Название", Название + "%");
	Запрос.УстановитьПараметр("Позиция", СтрДлина(Название)+1);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МаксНомер = 0;
	Количество = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Количество = Количество + 1;
		Если НЕ ПустаяСтрока(ВыборкаДетальныеЗаписи.Наименование) Тогда
			Попытка
				ТекущийНомер = Число(ВыборкаДетальныеЗаписи.Наименование);
			Исключение
				ТекущийНомер = 0;
			КонецПопытки;
			Если МаксНомер < ТекущийНомер Тогда
				МаксНомер = ТекущийНомер;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МаксНомер > Количество Тогда
		Возврат МаксНомер + 1;
	КонецЕсли;
	Возврат Количество + 1;
КонецФункции

&НаСервере
Процедура ЗаполнитьАнилитикиИИДФормыПоОбъекту()
	
	// Заполняем таблицу аналитик на форме
	ЗаполнитьТЗАналитикФормыПоОбъекту(Объект, АналитикиСверки);
	
	// Обновляем источники данных на форме
	Если НЕ флРасширеннаяНастройкаИсточниковДанных Тогда
		ОбновитьИсточникиДанныхФормы();
	КонецЕсли;
	
КонецПроцедуры

// Обновляем источники данных на форме
&НаСервере
Процедура ОбновитьИсточникиДанныхФормы()
	ЗаполнитьИсточникиДанныхНаФорме(
		ЭтаФорма,
		СпособОпределенияНаправленияУчетаНаФорме);
	ЗаполнитьФСДИГруппыРаскрытияПоИсточникамДанных(
		ЭтаФорма,
		СпособОпределенияНаправленияУчетаНаФорме);
	ОбновитьАналитикиСверкиПоДаннымИДФормы();
КонецПроцедуры

// Считываем настройки источников данных из ТЗ "АналитикиСверки"
// и записываем в источники данных.
&НаСервере
Процедура ЗаписатьОсновныеИсточникиДанныхФормы(ТекущийОбъект)
	// Записываем объекты
	ОбновитьЗаписатьИсточникДанныхПоДаннымФормы(ПараметрыИД, АналитикиСверки, 
			ЭтотОбъект.УникальныйИдентификатор);
	Если СпособОпределенияНаправленияУчетаНаФорме = 1 Тогда
		ОбновитьЗаписатьИсточникДанныхПоДаннымФормы(ПараметрыИДКредитора, АналитикиСверки,
			ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	// Устанавливаем ссылки на объекты в ТЧ "ИсточникиДанных"
	ТекущийОбъект.ИсточникиДанных.Очистить();
	Если СпособОпределенияНаправленияУчетаНаФорме = 1 Тогда
		НоваяСтрока = ТекущийОбъект.ИсточникиДанных.Добавить();
		НоваяСтрока.ИсточникДанных = ПараметрыИД.РабочийОбъект.Ссылка;
		НоваяСтрока.СпособОпределенияНаправленияУчета =
				Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет;
				
		НоваяСтрока = ТекущийОбъект.ИсточникиДанных.Добавить();
		НоваяСтрока.ИсточникДанных = ПараметрыИДКредитора.РабочийОбъект.Ссылка;
		НоваяСтрока.СпособОпределенияНаправленияУчета =
				Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит;
				
	Иначе
		НоваяСтрока = ТекущийОбъект.ИсточникиДанных.Добавить();
		НоваяСтрока.ИсточникДанных = ПараметрыИД.РабочийОбъект.Ссылка;
		НоваяСтрока.СпособОпределенияНаправленияУчета =
				Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДополнительныеИсточникиДанных(ТекущийОбъект,
												  ИсточникиДанныхДляУдаления)
												  
	Если ТекущийОбъект.СпособЭлиминации 
	  			= Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов Тогда
		УстановитьДополнительныеИсточникиДанныхЭлиминацииЗапасов(
			ТекущийОбъект,
			ИсточникиДанныхДляУдаления);
	Иначе
		ТекущийОбъект.ИсточникДанныхФСДЗакупки = 
			Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
		ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж = 
			Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаТекущийОбъект(ТекущийОбъект)
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		Возврат ТекущийОбъект.Ссылка;
	КонецЕсли;
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ТекущийОбъект.ДополнительныеСвойства, "Ссылка") Тогда
		СсылкаНового = Справочники.РазделыСверкиВГО.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаНового);
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"Ссылка", 
			СсылкаНового);
	КонецЕсли;
	Возврат ТекущийОбъект.ДополнительныеСвойства.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьДополнительныеИсточникиДанныхЭлиминацииЗапасов(
												ТекущийОбъект,
												ИсточникиДанныхДляУдаления)
												
	// заполним ссылки
	РезультатыЗапросов = ПолучитьРезультатИсточниковЭлиминацииЗапасов(
		ТекущийОбъект);
		
	ЗаполнитьДопИсточникиЭлиминацииЗапасовИзРезультатаЗапроса(
		ТекущийОбъект,
		РезультатыЗапросов.ИсточникиДанныхДляРасчетов,
		ИсточникиДанныхДляУдаления);
		
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникДанныхФСДЗакупки) 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж) Тогда
			
		ТЗГруппАналитик = РезультатыЗапросов.ГруппыАналитикСверкиВГО.Выгрузить();
		ТЗИсточниковДанных = РезультатыЗапросов.ИсточникиДанныхВГО.Выгрузить();
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникДанныхФСДЗакупки) Тогда
			
			УстановитьДопИсточникДанныхФСДЗакупки(
				ТекущийОбъект, 
				ТЗГруппАналитик, 
				ТЗИсточниковДанных,
				ИсточникиДанныхДляУдаления);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж) Тогда
			
			УстановитьДопИсточникДанныхФСДСебестоимостьПродаж(
				ТекущийОбъект, 
				ТЗГруппАналитик, 
				ТЗИсточниковДанных,
				ИсточникиДанныхДляУдаления);
			
		КонецЕсли
			
	КонецЕсли
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатИсточниковЭлиминацииЗапасов(ТекущийОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ИсточникиДанныхВГО).Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ИсточникиДанныхВГО).Тип КАК Тип
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
		|	И ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ИсточникиДанныхВГО).ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыАналитикСверкиВГО.ПустаяСсылка)
		|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета ССЫЛКА Справочник.ИсточникиДанныхВГО
		|	И НЕ ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ИсточникиДанныхВГО).ГруппаРаскрытия.ПометкаУдаления
		|	И (&ПолучитьФСДЗакупки
		|				И ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ИсточникиДанныхВГО).Тип = ЗНАЧЕНИЕ(Перечисление.ТипИсточникаДанныхВГО.Закупки)
		|			ИЛИ &ПолучитьФСДСебестоимостьПродаж
		|				И ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ИсточникиДанныхВГО).Тип = ЗНАЧЕНИЕ(Перечисление.ТипИсточникаДанныхВГО.СебестоимостьПродаж))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыАналитикСверкиВГО.Ссылка КАК Ссылка,
		|	ГруппыАналитикСверкиВГО.ТипИсточникаДанныхВГО КАК ТипИсточникаДанныхВГО
		|ИЗ
		|	Справочник.ГруппыАналитикСверкиВГО КАК ГруппыАналитикСверкиВГО
		|ГДЕ
		|	НЕ ГруппыАналитикСверкиВГО.ПометкаУдаления
		|	И ГруппыАналитикСверкиВГО.ТипИсточникаДанныхВГО <> ЗНАЧЕНИЕ(Перечисление.ТипИсточникаДанныхВГО.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхВГО.Ссылка КАК Ссылка,
		|	ИсточникиДанныхВГО.Тип КАК Тип
		|ИЗ
		|	Справочник.ИсточникиДанныхВГО КАК ИсточникиДанныхВГО
		|ГДЕ
		|	НЕ ИсточникиДанныхВГО.ПометкаУдаления
		|	И ИсточникиДанныхВГО.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПолучитьФСДЗакупки", 
		НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникДанныхФСДЗакупки));
	Запрос.УстановитьПараметр("ПолучитьФСДСебестоимостьПродаж", 
		НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж));
	мРезультатыЗапроса = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Результат.Вставить("ИсточникиДанныхДляРасчетов", мРезультатыЗапроса[0]);
	Результат.Вставить("ГруппыАналитикСверкиВГО", мРезультатыЗапроса[1]);
	Результат.Вставить("ИсточникиДанныхВГО", мРезультатыЗапроса[2]);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДопИсточникиЭлиминацииЗапасовИзРезультатаЗапроса(
												ТекущийОбъект,
												РезультатЗапроса,
												ИсточникиДанныхДляУдаления)
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипИсточникаДанныхВГО.Закупки Тогда
			ТекущийОбъект.ИсточникДанныхФСДЗакупки = ВыборкаДетальныеЗаписи.Ссылка;
			ИсточникиДанныхДляУдаления.Добавить(ТекущийОбъект.ИсточникДанныхФСДЗакупки);
		ИначеЕсли ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипИсточникаДанныхВГО.СебестоимостьПродаж Тогда
			ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж = ВыборкаДетальныеЗаписи.Ссылка;
			ИсточникиДанныхДляУдаления.Добавить(ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьДопИсточникДанныхФСДЗакупки(ТекущийОбъект,
											  ТЗГруппАналитик, 
											  ТЗИсточниковДанных,
											  ИсточникиДанныхДляУдаления)
	ДопИсточникДанных = ПолучитьИсточникДанныхВГО(
		ТекущийОбъект,
		Перечисления.ТипИсточникаДанныхВГО.Закупки,
		"ФСД_Закупки",
		ТЗГруппАналитик,
		ТЗИсточниковДанных);
	ТекущийОбъект.ИсточникДанныхФСДЗакупки =
		СоздатьЗаписатьИсточникДанныхНаСервере(
			"ИД_Закупки_" + ТекущийОбъект.Наименование, 
			ДопИсточникДанных.Ссылка);
	ИсточникиДанныхДляУдаления.Добавить(ТекущийОбъект.ИсточникДанныхФСДЗакупки);
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьДопИсточникДанныхФСДСебестоимостьПродаж(ТекущийОбъект,
											  ТЗГруппАналитик, 
											  ТЗИсточниковДанных,
											  ИсточникиДанныхДляУдаления)
	ДопИсточникДанных = ПолучитьИсточникДанныхВГО(
		ТекущийОбъект,
		Перечисления.ТипИсточникаДанныхВГО.СебестоимостьПродаж,
		"ФСД_СебестоимостьПродаж",
		ТЗГруппАналитик,
		ТЗИсточниковДанных);
	ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж = 
		СоздатьЗаписатьИсточникДанныхНаСервере(
			"ИД_Себест_" + ТекущийОбъект.Наименование, 
			ДопИсточникДанных.Ссылка);
	ИсточникиДанныхДляУдаления.Добавить(ТекущийОбъект.ИсточникДанныхФСДСебестоимостьПродаж);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсточникДанныхВГО(ТекущийОбъект,
								  ТипИсточникаДанныхВГО, 
								  Наименование,
								  ТЗГруппАналитик, 
								  ТЗИсточниковДанных)
								  
	ДопИсточникДанных = ТЗИсточниковДанных.Найти(ТипИсточникаДанныхВГО, "Тип");
	
	Если НЕ ЗначениеЗаполнено(ДопИсточникДанных) Тогда
		
		ГруппаРаскрытияДляУстановки = ТЗГруппАналитик.Найти(
			ТипИсточникаДанныхВГО, 
			"ТипИсточникаДанныхВГО");
			
		Если НЕ ЗначениеЗаполнено(ГруппаРаскрытияДляУстановки) Тогда
			
			// создаем группу раскрытия для источника данных
			ГруппаРаскрытияДляУстановки = 
				Справочники.ГруппыАналитикСверкиВГО.СоздатьЭлемент();
				
			ГруппаРаскрытияДляУстановки.УстановитьНовыйКод();
			ГруппаРаскрытияДляУстановки.Владелец = ТекущийОбъект.Владелец;
			ГруппаРаскрытияДляУстановки.СпособЭлиминации = 
				ТекущийОбъект.СпособЭлиминации;
			УстановитьНаименованиеГруппыРаскрытияДляИсточникаДанныхВГО(
				ГруппаРаскрытияДляУстановки,
				ТипИсточникаДанныхВГО);
			ГруппаРаскрытияДляУстановки.ТипИсточникаДанныхВГО = ТипИсточникаДанныхВГО;
			ГруппаРаскрытияДляУстановки.ЗаполнитьНедостающиеПоля();
			
			ГруппаРаскрытияДляУстановки.Записать();
			
		КонецЕсли;
		
		ДопИсточникДанных = Справочники.ИсточникиДанныхВГО.СоздатьЭлемент();
		
		ДопИсточникДанных.Владелец = ПолучитьСсылкуНаТекущийОбъект(ТекущийОбъект);
		ДопИсточникДанных.ГруппаРаскрытия = ГруппаРаскрытияДляУстановки.Ссылка;
		ДопИсточникДанных.Наименование = Наименование;
		ДопИсточникДанных.Тип = ТипИсточникаДанныхВГО;
		
		ДопИсточникДанных.Записать();
		
	КонецЕсли;
	
	Возврат ДопИсточникДанных.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьНаименованиеГруппыРаскрытияДляИсточникаДанныхВГО(
											ГруппаРаскрытияДляУстановки,
											ТипИсточникаДанныхВГО)
	Если ТипИсточникаДанныхВГО = Перечисления.ТипИсточникаДанныхВГО.Закупки Тогда
		ШаблонНаименования = НСтр("ru='Аналитика закупки (%1)'");
	ИначеЕсли ТипИсточникаДанныхВГО = 
				Перечисления.ТипИсточникаДанныхВГО.СебестоимостьПродаж Тогда
		ШаблонНаименования = НСтр("ru='Аналитика себестоимости продаж (%1)'");
	Иначе
		ШаблонНаименования = НСтр("ru='Группа раскрытия (%1)'");
	КонецЕсли;
	ГруппаРаскрытияДляУстановки.Наименование =
		СтрШаблон(ШаблонНаименования, ГруппаРаскрытияДляУстановки.Код);
КонецПроцедуры

&НаСервере
Процедура СпособАвтоматическогоУрегулированияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ЗначениеОтбора = Объект.Владелец;
	Иначе
		ЗначениеОтбора = Справочники.ШаблоныСверкиВГО.ПустаяСсылка();
	КонецЕсли;
	Если Объект.СпособАвтоматическогоУрегулирования =
				Перечисления.СпособыАвтоматическогоУрегулирования.ПоРейтингуКомпаний Тогда
		флДоступность = Истина;
	Иначе
		флДоступность = Ложь;
	КонецЕсли;
	
	ЭлементОтбора = ТиповыеОтчеты_УправляемыйРежимУХ.УстановитьОтбор(
						РейтингОрганизацийДляУрегулирования.Отбор,
						Новый ПолеКомпоновкиДанных("ШаблонСверкиВГО"),
						ВидСравненияКомпоновкиДанных.Равно,
						ЗначениеОтбора);
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Элементы.РейтингОрганизацийДляУрегулирования.Видимость = флДоступность;
КонецПроцедуры

// Заполнить значениями дерево с именем реквизита формы ИмяРеквизитаДереваПриемник
// по данным другого дерева ДеревоИсточник.
// Оба дерева должны иметь одинаковую структуру.
//
// Параметры:
//  ДеревоИсточник - ДанныеФормыДерево - дерево источник данных.
//  ИмяРеквизитаДереваПриемник - Строка - имя реквизита формы с типом ДанныеФормыДерево,
//		которое будет заполнено строками из ДеревоИсточник.
//
&НаСервере
Процедура ЗаполнитьРеквизитФормыДеревоПоДаннымРеквизитФормыДерево(ДеревоИсточник, ИмяРеквизитаДереваПриемник)
	ДеревоОбъект = ДанныеФормыВЗначение(ДеревоИсточник, Тип("ДеревоЗначений"));
	ЗначениеВРеквизитФормы(ДеревоОбъект, ИмяРеквизитаДереваПриемник);
КонецПроцедуры

// Обработать изменение группы раскрытия источника данных.
//  Установить группу раскрытия в объекте-источнике данных.
//  Проверить поля маппинга в аналитиках сверки.
//
// Параметры:
//  ПараметрыИД - фиксированная структура - реквизти формы
//		"ПараметрыИД" или "ПараметрыИДКредитора".
//		Поля структуры см. функцию ПолучитьСтруктуруПараметровИД().
//  ГруппаРаскрытия - СправочникСсылка.ГруппыРаскрытия - группа раскрытия,
//		которую нужно записать в источник данных.
//  ИмяПоляАналитикСверки - Строка - либо "", либо "", имя поля таблицы
//		"АналитикиСверки" в котором, при изменении группы раскрытия
//		пути к реквизитам от группы раскрытия могут стать не актуальными.
//
&НаСервере
Процедура ГруппаРаскрытияПриИзмененииНаСервере(ПараметрыИД, ГруппаРаскрытия)
	
	СтруктураПараметровИД = Новый Структура(ПараметрыИД);
	
	УстановитьГруппуРаскрытияИДНаСервере(СтруктураПараметровИД, ГруппаРаскрытия,
			УникальныйИдентификатор);
			
	ПроверитьОчиститьПоляИДАналитикСверкиНаСервере(АналитикиСверки,
			СтруктураПараметровИД.ИмяПоляАналитикиСверки,
			СтруктураПараметровИД.ДеревоПолейБД);
	
	ПараметрыИД = Новый ФиксированнаяСтруктура(СтруктураПараметровИД);
	
КонецПроцедуры
	
// Заполнить реквизиты строки ТЧ "Аналитики" объекта "ГруппыАналитикСверкиВГО".
//
// Процедура - Заполнить строку аналитики группы по данным строки формы
//
// Параметры:
//  СтрокаОбъекта - СтрокаТаблицыЗначений - строка для заполнения.
//  СтрокаФормы -  - строка по данным которой, будем заполнять.
//
&НаСервере
Процедура ЗаполнитьСтрокуАналитикиГруппыПоДаннымСтрокиФормы(СтрокаОбъекта, СтрокаФормы)
	ЗаполнитьЗначенияСвойств(СтрокаОбъекта, СтрокаФормы);
	СтрокаОбъекта.ВидАналитики = СтрокаФормы.ТипПоля;
	
	Если СтрокаФормы.Использовать = "Элиминации" Тогда
		СтрокаОбъекта.ИспользоватьДляСверки = Ложь;
	Иначе
		СтрокаОбъекта.ИспользоватьДляСверки = Истина;
	КонецЕсли;
	
	СтрокаОбъекта.ДопАналитикаСверки = СтрокаФормы.ИспользоватьДляСверки И
			Справочники.ГруппыАналитикСверкиВГО.ЭтоДопАналитикаСверки(СтрокаФормы.ТипДляЭлиминации);
КонецПроцедуры

// Заполнить реквизиты строки ТЧ "Ресурсы" объекта "ГруппыАналитикСверкиВГО".
//
// Процедура - Заполнить строку аналитики группы по данным строки формы
//
// Параметры:
//  СтрокаОбъекта - СтрокаТаблицыЗначений - строка для заполнения.
//  СтрокаФормы -  - строка по данным которой, будем заполнять.
//
&НаСервере
Процедура ЗаполнитьСтрокуПоказателяГруппыПоДаннымСтрокиФормы(СтрокаОбъекта, СтрокаФормы)
	ЗаполнитьЗначенияСвойств(СтрокаОбъекта, СтрокаФормы);
	СтрокаОбъекта.ТипЗначения = СтрокаФормы.ТипПоля;
КонецПроцедуры

// Заполнить строку аналитики группы по данным строки формы
//
&НаСервере
Процедура ОбновитьАналитикиСверкиПоДаннымИДФормы()
	Если НЕ флРасширеннаяНастройкаИсточниковДанных Тогда
		ОбновитьТаблицуАналитикСверкиПоТаблицеСоответствияИД(ПараметрыИД,
					 АналитикиСверки);
		Если СпособОпределенияНаправленияУчетаНаФорме = 1 Тогда		 
			ОбновитьТаблицуАналитикСверкиПоТаблицеСоответствияИД(ПараметрыИДКредитора,
					 АналитикиСверки);
		 КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СпособОпределенияНаправленияУчетаНаФормеПриИзмененииНаСервере()
	ЭтаФорма.Записать();
	ЗаполнитьИсточникиДанныхНаФорме(ЭтотОбъект, СпособОпределенияНаправленияУчетаНаФорме);
КонецПроцедуры

// Обновить строку ТаблицаСоответствияБД по данным строки аналитики.
//
// Параметры:
//  ПараметрыИД - Структура - параметры источника данных
//			для получения ТаблицаСоответствияБД
//  ИдСтрокиАналитики - Число - идентификатор строки таблицы
//			аналитик, из которой будут браться данные.
//
&НаСервере
Процедура ОбновитьСтрокуСоответствияИД(ПараметрыИД, ИдСтрокиАналитики, ФиксированноеЗначение)
	ТекДанныеАналитикСверки = АналитикиСверки.НайтиПоИдентификатору(ИдСтрокиАналитики);
	СтрокиСоответствия = ПараметрыИД.ТаблицаСоответствияБД.НайтиСтроки(
				Новый Структура("АналитикаКонсолидации", ТекДанныеАналитикСверки.Имя));
	Если СтрокиСоответствия.Количество() > 0 Тогда
		ОбновитьНастройкуСоответствия(
				ПараметрыИД, СтрокиСоответствия[0], ТекДанныеАналитикСверки);
	КонецЕсли;
	ИмяПоля = ?(ФиксированноеЗначение, "ИмяПоляФиксированноеЗначение", "ИмяПоляАналитикиСверки");		
	ОбработатьИзменениеПоказателяНаСервере(
		ТекДанныеАналитикСверки, 
		ПараметрыИД,
		ПараметрыИД[ИмяПоля]);		
КонецПроцедуры

// Определяет необходимость способ опредления направления учета
// в упрощенном случае настройки. Делает это анализом поля
// "СпособОпределенияНаправленияУчета" таблицы источников.
// Параметры:
//	ИсточникиДанных - ТабличнаяЧасть ИсточникиДанных, должна содержать
//						реквизит "СпособОпределенияНаправленияУчета".
// Возвращает:
//	Число - 1 - отдельный вид отчета для каждой стороны (Дт/Кт).
//			2 - по знаку операции в одном виде отчета.
//
&НаСервереБезКонтекста
Функция ПолучитьСпособОпределенияНаправленияУчетаНаФорме(ИсточникиДанных)
	Если ИсточникиДанных.Количество() = 0 Тогда
		Возврат 2;
	КонецЕсли;
	
	мСтрокиПоЗнаку = ИсточникиДанных.НайтиСтроки(Новый Структура("СпособОпределенияНаправленияУчета", 
				Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации));
	Если мСтрокиПоЗнаку.Количество() > 0 Тогда
		Возврат 2;
	КонецЕсли;
		
	Возврат 1;
КонецФункции

// Получить ТЗ подходящую для заполнения таблицы аналитик по данным группы раскрытия.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуАналитикИзГруппыРаскрытия(ГруппаРаскрытия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыАналитикСверкиВГОАналитики.НомерСтроки КАК НомерСтроки,
	|	ГруппыАналитикСверкиВГОАналитики.Имя КАК Имя,
	|	ГруппыАналитикСверкиВГОАналитики.ВидАналитики КАК ТипПоля,
	|	ГруппыАналитикСверкиВГОАналитики.ТипДляЭлиминации КАК ТипДляЭлиминации,
	|	ГруппыАналитикСверкиВГОАналитики.Обязательная КАК Обязательная,
	|	ГруппыАналитикСверкиВГОАналитики.ИспользоватьДляСверки КАК ИспользоватьДляСверки,
	|	ГруппыАналитикСверкиВГОАналитики.ДопАналитикаСверки КАК ДопАналитикаСверки,
	|	ГруппыАналитикСверкиВГОАналитики.Изменять КАК Изменять,
	|	1 КАК ВидПоля,
	|	ВЫБОР
	|		КОГДА ГруппыАналитикСверкиВГОАналитики.ТипДляЭлиминации = ЗНАЧЕНИЕ(Перечисление.ТипыАналитикЭлиминации.ТолькоСверка)
	|			ТОГДА &СтрокаСверки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ГруппыАналитикСверкиВГОАналитики.ИспользоватьДляСверки
	|					ТОГДА &СтрокаСверкиИЭлиминации
	|				ИНАЧЕ &СтрокаЭлиминации
	|			КОНЕЦ
	|	КОНЕЦ КАК Использовать
	|ИЗ
	|	Справочник.ГруппыАналитикСверкиВГО.Аналитики КАК ГруппыАналитикСверкиВГОАналитики
	|ГДЕ
	|	ГруппыАналитикСверкиВГОАналитики.Ссылка = &ГруппаРаскрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппыАналитикСверкиВГОРесурсы.НомерСтроки,
	|	ГруппыАналитикСверкиВГОРесурсы.Имя,
	|	ГруппыАналитикСверкиВГОРесурсы.ТипЗначения,
	|	ГруппыАналитикСверкиВГОРесурсы.ТипДляЭлиминации,
	|	ИСТИНА,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	2,
	|	&СтрокаСверкиИЭлиминации
	|ИЗ
	|	Справочник.ГруппыАналитикСверкиВГО.Ресурсы КАК ГруппыАналитикСверкиВГОРесурсы
	|ГДЕ
	|	ГруппыАналитикСверкиВГОРесурсы.Ссылка = &ГруппаРаскрытия";
	
	Запрос.УстановитьПараметр("ГруппаРаскрытия", 			ГруппаРаскрытия);	
	Запрос.УстановитьПараметр("СтрокаСверки", 				НСтр("ru='Сверки'"));	
	Запрос.УстановитьПараметр("СтрокаСверкиИЭлиминации", 	НСтр("ru='Сверки и элиминации'"));	
	Запрос.УстановитьПараметр("СтрокаЭлиминации", 			НСтр("ru='Элиминации'"));
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Заполнить параметры источников данных (ПараметрыИД, ПараметрыИДКредитора)
//  с учетом СпособаОпределенияНаправленияУчета.
//
// Параметры:
//  Форма - Форма раздела сверки ВГО 
//  СпособОпределенияНаправленияУчетаНаФорме - Число - 1 - по стороне сверки Дт/Кт; 2 - по знаку.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьИсточникиДанныхНаФорме(Форма, СпособОпределенияНаправленияУчетаНаФорме)
	
	Форма.ПараметрыИД = Новый ФиксированнаяСтруктура(
			ПолучитьПараметрыИДПоДаннымОбъекта(Форма.Объект,
					?(СпособОпределенияНаправленияУчетаНаФорме = 1,
						Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет,
						Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации),
					Форма.ДеревоПолейБД,
					Форма.ТаблицаСоответствияБД,
					Форма.ДеревоПараметровОтбораБД,
					"ДеревоПолейБД",
					"ПолеИсточникаДанныхДт",
					"ФиксированноеЗначениеДт",
					Форма.ИДОбщий,
					Форма.УникальныйИдентификатор));
					
	Форма.ПараметрыИДКредитора = Новый ФиксированнаяСтруктура(
			ПолучитьПараметрыИДПоДаннымОбъекта(Форма.Объект,
					Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит,
					Форма.ДеревоПолейБДКредитора,
					Форма.ТаблицаСоответствияБДКредитора,
					Форма.ДеревоПараметровОтбораБДКредитора,
					"ДеревоПолейБДКредитора",
					"ПолеИсточникаДанныхКт",
					"ФиксированноеЗначениеКт",
					Форма.ИДКредитора,
					Форма.УникальныйИдентификатор));

КонецПроцедуры

// Заполнить реквизиты формы ФСД... и ГруппаРаскрытия... по данным источников данных
//  с учетом СпособаОпределенияНаправленияУчета.
//
// Параметры:
//  Форма - Форма раздела сверки ВГО 
//  СпособОпределенияНаправленияУчетаНаФорме - Число - 1 - по стороне сверки Дт/Кт; 2 - по знаку.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьФСДИГруппыРаскрытияПоИсточникамДанных(
				Форма, СпособОпределенияНаправленияУчетаНаФорме)
	Форма.ФСДОбщий = Справочники.ВидыОтчетов.ПустаяСсылка();
	Форма.ФСДКредитора = Справочники.ВидыОтчетов.ПустаяСсылка();

	Форма.ГруппаРаскрытияОбщая = Справочники.ГруппыАналитикСверкиВГО.ПустаяСсылка();
	Форма.ГруппаРаскрытияКредитора = Справочники.ГруппыАналитикСверкиВГО.ПустаяСсылка();
	
	Если СпособОпределенияНаправленияУчетаНаФорме = 2
		 И ЗначениеЗаполнено(Форма.ПараметрыИД.РабочийОбъект.Ссылка) Тогда
		// По знаку операции
		УстановитьФСДИГруппуРаскрытияПоИсточникуДанных(
			Форма.ФСДОбщий,
			Форма.ГруппаРаскрытияОбщая,
			Форма.ПараметрыИД.РабочийОбъект);
		
	ИначеЕсли СпособОпределенияНаправленияУчетаНаФорме = 1 Тогда
		// По Дт/Кт отдельно
		УстановитьФСДИГруппуРаскрытияПоИсточникуДанных(
			Форма.ФСДОбщий,
			Форма.ГруппаРаскрытияОбщая,
			Форма.ПараметрыИД.РабочийОбъект);
		УстановитьФСДИГруппуРаскрытияПоИсточникуДанных(
			Форма.ФСДКредитора,
			Форма.ГруппаРаскрытияКредитора,
			Форма.ПараметрыИДКредитора.РабочийОбъект);
	КонецЕсли;
КонецПроцедуры

// Заполнить реквизиты формы ФСД и ГруппаРаскрытия из источника данных.
//
// Параметры:
//  ФСД - ДанныеФормыКоллекция - реквизит формы содержащий вид отчета
//			для установки значения.
//	ГруппаРаскрытия - ДанныеФормыКоллекция - реквизит формы содержащий
//			группу раскрытия для установки значения.
//	ИДОбъект - ДанныеФормыКоллекция - СправочникОбъект.ИсточникиДанныхДляРасчетов.
//			По его реквизитам будет выполнено заполнение.
//
&НаСервереБезКонтекста
Процедура УстановитьФСДИГруппуРаскрытияПоИсточникуДанных(ФСД, ГруппаРаскрытия, ИДОбъект)
	Если ЗначениеЗаполнено(ИДОбъект.Ссылка) Тогда
		ГруппаРаскрытия = ИДОбъект.ГруппаРаскрытияОтбор;
		Если ЗначениеЗаполнено(ГруппаРаскрытия) Тогда
			ФСД = ГруппаРаскрытия.Владелец;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет ячейки таблицы аналитик сверки в колонке с настройками полей ИД.
// Если поле не соответствует ИД, то оно очищается.
//
&НаСервереБезКонтекста
Процедура ПроверитьОчиститьПоляИДАналитикСверкиНаСервере(АналитикиСверки, ИмяЭлемента, ДеревоПолейБД)
	Для Каждого СтрокаАналитики Из АналитикиСверки Цикл
		Если НЕ РеквизитЕстьВ_ИД(ДеревоПолейБД, "ПолеБД", СтрокаАналитики[ИмяЭлемента]) Тогда
			// Очищаем ошибочный реквизит
			СтрокаАналитики[ИмяЭлемента] = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяет, что строка с описанием пути в объекте источнике данных,
//  может быть пройдена от реквизита к реквизиту.
//
// Параметры:
//  ДеревоПолейБД - ДанныеФормыДерево - дерево с описанием полей группы раскрытия.
//  ИмяРеквизита - Строка - имя реквизита дерева, содержащего поля группы раскрытия.
//  РеквизитИД - Строка - путь к реквизиту из группы раскрытия. Через точку.
//
// Возвращает:
//	Булево - Истина - реквизит 
&НаСервереБезКонтекста
Функция РеквизитЕстьВ_ИД(ДеревоПолейБД, ИмяРеквизита, РеквизитИД)
	Если Не ПустаяСтрока(РеквизитИД) Тогда
		Возврат Истина; // пустой реквизит есть в любом источнике данных
	КонецЕсли;
	
	мРеквизитов = СтрРазделить(РеквизитИД, ".", Ложь);
	ЧислоРеквизитов = мРеквизитов.Количество();
	Для НомерРеквизита = 1 По ЧислоРеквизитов Цикл
		Элемент = НайтиЭлементДерева(ДеревоПолейБД, ИмяРеквизита, мРеквизитов[НомерРеквизита-1]);
		Если Элемент = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

// Ищет указанное значение в указанном реквизите дерева формы.
&НаСервереБезКонтекста
Функция НайтиЭлементДерева(ЭлементыДереваФормы, ИмяРеквизита, ИскомоеЗначение)
	Если ЗначениеЗаполнено(ЭлементыДереваФормы) Тогда
		Для Каждого Элемент Из ЭлементыДереваФормы.ПолучитьЭлементы() Цикл
			Если Элемент[ИмяРеквизита] = ИскомоеЗначение Тогда
				Возврат Элемент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполнить реквизит "ТипыЗначенийАналитики" массивом строк имен
// типов, содержащихся в данных выбранного типа аналитики.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипыЗначенийСтрокиАналитикСверки(СтрокаАналитики)
	Если СтрокаАналитики.ВидПоля = 1 Тогда
		СтрокаАналитики.ТипыЗначенийАналитики = ПолучитьТипыЗначенийПВХ(
				СтрокаАналитики.ТипПоля);
	ИначеЕсли СтрокаАналитики.ВидПоля = 2 Тогда
		мТипов = ОбщегоНазначенияКлиентСерверУХ.ЗначениеВМассиве(
					Строка(СтрокаАналитики.ТипПоля));
		СтрокаАналитики.ТипыЗначенийАналитики = Новый ФиксированныйМассив(мТипов);
	КонецЕсли;
КонецПроцедуры

// Для указанного элемента плана вида характеристик
// получить массив строковых представление типов этого
// элемента ПВХ.
//
&НаСервереБезКонтекста
Функция ПолучитьТипыЗначенийПВХ(ПВХ)
	мТипов = Новый Массив;
	Если ЗначениеЗаполнено(ПВХ) Тогда
		СтрокаТиповБД = ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхТек(
				ПВХ.ТипЗначения, Справочники.ТипыБазДанных.ТекущаяИБ, Ложь);
		мТипов = СтрРазделить(СтрокаТиповБД, ";", Ложь);
	КонецЕсли;
	Возврат Новый ФиксированныйМассив(мТипов);
КонецФункции

// Обновить таблицу соответствия в объекте источника данных.
//
// Параметры:
//  ПараметрыИД - ФиксированнаяСтруктура - параметры источника данных
//		из поля формы ПараметрыИД или ПараметрыИДКредитора.
//  ТаблицаСоответствияФормы - ТаблицаЗначений - будут прочитаны данные
//		этой таблицы, и по ним будет обновлена таблица соответствия ИД.
//
&НаСервереБезКонтекста
Процедура ОбновитьТаблицуСоответствияИДПоДаннымФормы(ПараметрыИД, ТаблицаСоответствияФормы)
			
	Для Каждого СтрокаАналитики Из ТаблицаСоответствияФормы Цикл
		СтрокиСоответствия = ПараметрыИД.ТаблицаСоответствияБД.НайтиСтроки(
				Новый Структура("АналитикаКонсолидации", СтрокаАналитики.Имя));
		Если СтрокиСоответствия.Количество() > 0 Тогда
			ОбновитьНастройкуСоответствия(ПараметрыИД, СтрокиСоответствия[0], СтрокаАналитики);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает массив заполненный типами значений.
// Типы берутся из строк описания типов в мСтрокТипов.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТиповИзМассиваСтрокТипов(мСтрокТипов)
	мТипов = Новый Массив;
	Для Каждого ИмяТипа Из мСтрокТипов Цикл
		мТипов.Добавить(
				ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(
						ИмяТипа, Истина, Ложь));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(мТипов);
КонецФункции

&НаСервере
Процедура УстановитьСсылкуНаПоказательНаСервере(ВидОтчета,
												КодПоказателя,
												ПараметрыИД,
												ИмяПоляАналитикиСверки)
	СтрокаСсылкиНаПоказатель = ПолучитьСтрокуСсылкиНаПоказатель();
	Если СтрокаСсылкиНаПоказатель <> Неопределено Тогда
		Показатель = ПолучитьПоказательПоКоду(
			ВидОтчета,
			КодПоказателя,
			ИмяПоляАналитикиСверки);
		УстановитьФиксированноеЗначениеАналитики(
			СтрокаСсылкиНаПоказатель.ПолучитьИдентификатор(),
			ПараметрыИД,
			Показатель);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуСсылкиНаПоказатель()
	Для Каждого ТекСтрока Из АналитикиСверки Цикл
		Если ТекСтрока.ТипДляЭлиминации = 
				Перечисления.ТипыАналитикЭлиминации.ПоказательОтчета Тогда
			Возврат ТекСтрока;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоказательПоКоду(ВидОтчета, КодПоказателя, ИмяПоляАналитикиСверки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &Владелец
		|	И ПоказателиОтчетов.Код = &Код";
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Код", КодПоказателя);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Возврат Справочники.ПоказателиОтчетов.ПустаяСсылка();
КонецФункции

// Определяет возможность упрощенной настройки источников данных
// в зависимости от их количества в таблице источников.
// Если больше одного для направления учета, то нужна расширенная
// настройка.
// Параметры:
//	ИсточникиДанных - ТабличнаяЧасть ИсточникиДанных, должна содержать
//						реквизит "СпособОпределенияНаправленияУчета".
// Возвращает:
//	Булево - Истина - возможна только расширенная настройка.
//			 Ложь - можно обойтись упрощенной настройкой.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьФлагЗапрещенияРасширеннойНастройкиИД(
								ИсточникиДанных, 
								КэшСпособовОпределенияНаправленияУчета)
	Если ИсточникиДанных.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ИсточникиДанных.Количество() > 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЧислоНастроекИД = Новый Соответствие;
	Для Каждого ИмяЗначение Из КэшСпособовОпределенияНаправленияУчета Цикл
		ЧислоНастроекИД[ИмяЗначение.Значение] = 0;
	КонецЦикла;
	
	Для Каждого СтрокаИД Из ИсточникиДанных Цикл
		ЧислоНастроекСпособа = ЧислоНастроекИД[СтрокаИД.СпособОпределенияНаправленияУчета];
		Если ЧислоНастроекСпособа <> Неопределено Тогда
			ЧислоНастроекИД[СтрокаИД.СпособОпределенияНаправленияУчета] = ЧислоНастроекСпособа + 1;
		КонецЕсли;
	КонецЦикла;

	// В упрощенной настройке должен быть только одна настройка определенного типа.
	Для Каждого ИмяЗначение Из КэшСпособовОпределенияНаправленияУчета Цикл
		Если ЧислоНастроекИД[ИмяЗначение.Значение] > 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	// В упрощенной настройке нельзя смешивать разные способы определения Дт/Кт.
	Если ЧислоНастроекИД[КэшСпособовОпределенияНаправленияУчета.ПоЗнакуОперации] > 0
		И (ЧислоНастроекИД[КэшСпособовОпределенияНаправленияУчета.ТолькоДебет] > 0
			ИЛИ ЧислоНастроекИД[КэшСпособовОпределенияНаправленияУчета.ТолькоКредит] > 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура АналитикиСверкиТипПоляПриИзмененииНаСервере()
	ТекСтрока = АналитикиСверки.НайтиПоИдентификатору(
					Элементы.АналитикиСверки.ТекущаяСтрока);
	УстановитьТипыЗначенийСтрокиАналитикСверки(ТекСтрока);
	Если ТекСтрока.СпособЗаполнения = 
			Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
		УстановитьФиксированноеЗначениеАналитики(
			Элементы.АналитикиСверки.ТекущаяСтрока,
			ПараметрыИД,
			Неопределено);
		Если СпособОпределенияНаправленияУчетаНаФорме = 1 Тогда
			УстановитьФиксированноеЗначениеАналитики(
				Элементы.АналитикиСверки.ТекущаяСтрока,
				ПараметрыИДКредитора,
				Неопределено);
		КонецЕсли;
	ИначеЕсли ТекСтрока.СпособЗаполнения = 
			Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
		УстановитьПараметрическоеЗначениеАналитики(
			Элементы.АналитикиСверки.ТекущаяСтрока,
			ПараметрыИД,
			Неопределено,
			"");
		Если СпособОпределенияНаправленияУчетаНаФорме = 1 Тогда
			УстановитьПараметрическоеЗначениеАналитики(
				Элементы.АналитикиСверки.ТекущаяСтрока,
				ПараметрыИДКредитора,
				Неопределено,
				"");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Устанавливает значение вида субконто для указанной строки аналитик.
// Если указано значение ВидАналитки, то устанавливает его.
// Иначе по типу значения ищеть подходящий вид субконто.
// Возможен серверный вызов.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипПоляСтрокиАналитики(СтрокаАналитикСверки,
											ВидАналитики,
											ТипЗначения)
	Если ЗначениеЗаполнено(ВидАналитики) Тогда
		СтрокаАналитикСверки.ТипПоля = ВидАналитики;
	Иначе
		Если СтрокаАналитикСверки.ТипыЗначенийАналитики <> Неопределено Тогда
			Индекс = СтрокаАналитикСверки.ТипыЗначенийАналитики.Найти(
				ТипЗначения[0].Значение);
			Если Индекс <> Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ВозвращатьТип = Истина;
		ТолькоПримитивные = Ложь;
		ТипДляПоиска = КэшируемыеПроцедурыУХ.ПреобразоватьТипИзСтроки(
			ТипЗначения[0].Значение,
			ВозвращатьТип,
			ТолькоПримитивные);
		СтрокаАналитикСверки.ТипПоля = 
			ПолучитьСоздатьВидСубконтоУХПоТипу(ТипДляПоиска);
	КонецЕсли;
	УстановитьТипыЗначенийСтрокиАналитикСверки(СтрокаАналитикСверки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоздатьВидСубконтоУХПоТипу(ТипЗначения)
	ВидСубконтоУХ = ОбщегоНазначенияУХ.ПолучитьВидСубконтоУХПоТипу(
		ТипЗначения);
	Если НЕ ЗначениеЗаполнено(ВидСубконтоУХ) Тогда
		ВидСубконтоУХ = СоздатьВидСубконтоУХПоТипу(ТипЗначения);
	КонецЕсли;
	Возврат ВидСубконтоУХ;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьВидСубконтоУХПоТипу(ТипЗначения)
	СубконтоОбъект = 
		ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СоздатьЭлемент();
	СубконтоОбъект.Код = "Тип" + Строка(ТипЗначения);
	СубконтоОбъект.ТипЗначения = Новый ОписаниеТипов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	СубконтоОбъект.Наименование = Строка(ТипЗначения);
	СубконтоОбъект.СоздаватьПриНеудачномПоискеПриИмпорте = Ложь;
	СубконтоОбъект.ОбновлятьРеквизитыПриИмпорте = Ложь;
	СубконтоОбъект.РазделятьПоОрганизациям = Ложь;
	СубконтоОбъект.ПроизвольныйКласификаторУХ = Ложь;
	СубконтоОбъект.Записать();
	Возврат СубконтоОбъект.Ссылка;
КонецФункции

&НаСервере
Процедура ЗаполнитьРазделСверки(Настройки = Неопределено)

	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Новый Структура("ЗаполнитьРазделВГО", Настройки));
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

КонецПроцедуры

#КонецОбласти

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСИсточникамиДанных
// Работа с реквизитами формы "ПараметрыИД" и "ПараметрыИДКредитор"

// Получает пустую структуру (не фиксированную) с параметрами
// источника данных для записи в реквизиты формы "ПараметрыИД...".
// Необходима для работы функции ИнициализироватьПараметрыИД().
//
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровИД()
	
	ПараметрыИД = Новый Структура;
	ПараметрыИД.Вставить("РабочийОбъект", Неопределено); // ДанныеФормыКоллекция(СправочникОбъект.ИсточникиДанныхДляРасчетов)
	ПараметрыИД.Вставить("ДеревоПолейБД", Неопределено); // ДанныеФормыДерево (см. одноименный реквизит формы)
	ПараметрыИД.Вставить("ТаблицаСоответствияБД", Неопределено); //ДанныеФормыКоллекция (см. одноименный реквизит формы)
	ПараметрыИД.Вставить("ДеревоПараметровОтбораБД", Неопределено); //ДанныеФормыКоллекция (см. одноименный реквизит формы)
	ПараметрыИД.Вставить("ИмяРеквизитаДерева", ""); // Строка (ДеревоПолейБД, ДеревоПолейБДКредитора) имя реквизита на форме
	ПараметрыИД.Вставить("ИмяПоляАналитикиСверки", ""); // Строка (ПолеИсточникаДанныхДт, ПолеИсточникаДанныхКт)
	ПараметрыИД.Вставить("ИмяПоляФиксированноеЗначение", ""); // Строка (ФиксированноеЗначениеДт, ФиксированноеЗначениеКт)
	ПараметрыИД.Вставить("РабочийОбъектАдрес", ""); // Строка(УникальныйИдентификатор) рабочий объект в хранилище
	ПараметрыИД.Вставить("КодУпрощеннойФормулы", ""); // см. реквизиты формы элемента справочника ИсточникиДанныхДляРасчетов
	ПараметрыИД.Вставить("ПланСчетов", Неопределено);
	
	Возврат ПараметрыИД;
	
КонецФункции

// Создает СправочникОбъект.ИсточникиДанныхДляРасчетов для сверки ВГО.
//  Возвращает незаписанный объект.
//
// Параметры:
//  Наименование - Строка(100).
//  ПотребительРасчета - СправочникСсылка.РазделыСверкиВГО, СправочникСсылка.ИсточникиДанныхВГО.
// 
// Возвращаемое значение:
//   - СправочникОбъект.ИсточникиДанныхДляРасчетов - объект не записан в БД.
//
&НаСервереБезКонтекста
Функция СоздатьОбъектИсточникаДанныхНаСервере(Наименование,
											  ПотребительРасчета)
											  
	ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Наименование,25);
		
	ИДОбъект = Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	ИДОбъект.НазначениеРасчетов = Справочники.ПравилаОбработки.ПустаяСсылка();
	ИДОбъект.ПотребительРасчета = ПотребительРасчета;
	ИДОбъект.ТипБД = Справочники.ТипыБазДанных.ТекущаяИБ;
	ИДОбъект.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляСверкиВГО;
	ИДОбъект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия;
	ИДОбъект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	ИДОбъект.Код = ТекКод;
	ИДОбъект.Наименование = Наименование;
	ИДОбъект.ТолькоАналитическиеЗначения = Истина;
	ИДОбъект.ЗаполнитьНачальныеНастройки();
	ИДОбъект.СформироватьТаблицуСоответствияБД();
	ИДОбъект.ПодготовитьДеревоПараметровОтбораБД();
	ИДОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
	
	Возврат ИДОбъект;
	
КонецФункции

// Создает и записывает новый элемент Справочник.ИсточникиДанныхДляРасчетов.
// Возвращает:
//	СправочникСсылка.ИсточникиДанныхДляРасчетов.
&НаСервереБезКонтекста
Функция СоздатьЗаписатьИсточникДанныхНаСервере(Наименование, 
											   ПотребительРасчета)
	ИДОбъект = СоздатьОбъектИсточникаДанныхНаСервере(
		Наименование, 
		ПотребительРасчета);
	ИДОбъект.Записать();
	Возврат ИДОбъект.Ссылка;
КонецФункции

// Возвращает структуру параметров источника данных.
// Данная структура эмулирует реквизиты формы элемента справочника ИсточникиДанныхДляРасчетов.
//
// Параметры:
//  Объект - СправочникОбъект.РазделыСверкиВГО. Объект должен быть записан в базу
//		и иметь ссылку. В ТЧ "ИсточникиДанных" производится поиск подходящих ИД.
//		Если такие отсутствуют, то используется для заполнения поля ПотребительРасчета
//		нового источника данных.
//  СпособОпределенияНаправленияУчета - ПеречисленияСсылка.СпособОпределенияНаправленияУчета.
//		Позволяет понять, какие источники данных брать из ТЧ Объект.ИсточникиДанных.
//	ДеревоПолейБД - ДанныеФормыДерево - реквизит формы для хранения перечня полей
//		источника данных. Запоминаем ссылку в результирующей структуре.
//	ИмяРеквизитаДерева - Строка - имя колоки в дереве полей источника данных,
//		по которой будет определяться путь к реквизиту ИД.
//	ИмяПоляАналитикиСверки - Строка - колонка в таблице "АналитикиСверки" куда
//		будет записан путь к реквизиту источника данных, для заполнения
//		этой аналитики.
//	ИДОбъектФормы - ДанныеФормыКоллекция - ссылка на реквизит формы представляющий
//		СправочникОбъект.ИсточникиДанныхДляРасчетов. Запоминаем ссылку
//		в результирующей структуре.
//	УИДФормы - УникальныйИдентификатор - УИД формы. Используется для сохранения
//		объекта источника данных во временное хранилище, чтобы обеспечить
//		время его жизни в рамках формы.
//
// Возвращает:
//	Структура, формат см. ПолучитьСтруктуруПараметровИД().
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыИДПоДаннымОбъекта(Знач Объект, СпособОпределенияНаправленияУчета,
				ДеревоПолейБД, ТаблицаСоответствияБД, ДеревоПараметровОтбораБД,
				ИмяРеквизитаДерева, ИмяПоляАналитикиСверки, ИмяПоляФиксированноеЗначение,
				ИДОбъектФормы, УИДФормы)
				
	СтруктураПараметровИД = ПолучитьСтруктуруПараметровИД();
	СтруктураПараметровИД.ДеревоПолейБД = ДеревоПолейБД;
	СтруктураПараметровИД.ТаблицаСоответствияБД = ТаблицаСоответствияБД;
	СтруктураПараметровИД.ДеревоПараметровОтбораБД = ДеревоПараметровОтбораБД;
	СтруктураПараметровИД.ИмяРеквизитаДерева = ИмяРеквизитаДерева;
	СтруктураПараметровИД.ИмяПоляАналитикиСверки = ИмяПоляАналитикиСверки;
	СтруктураПараметровИД.ИмяПоляФиксированноеЗначение = ИмяПоляФиксированноеЗначение;
	СтруктураПараметровИД.РабочийОбъект = ИДОбъектФормы;
	
	мСтрокИД = Объект.ИсточникиДанных.НайтиСтроки(
					Новый Структура("СпособОпределенияНаправленияУчета",
								СпособОпределенияНаправленияУчета));
								
	Если мСтрокИД.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(мСтрокИД[0].ИсточникДанных) Тогда
		// Создаем новый источник данных
		ИДОбъект = СоздатьЗаписатьИсточникДанныхНаСервере(
						СоздатьНаименованиеИсточникаДанных(
							СпособОпределенияНаправленияУчета),
						Объект.Ссылка)
					.ПолучитьОбъект();
	Иначе
		// Получаем сохраненный объект
		ИДОбъект = мСтрокИД[0].ИсточникДанных.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИДОбъект.ПотребительРасчета) Тогда
		ИДОбъект.ПотребительРасчета = Объект.Ссылка;
	КонецЕсли;
	
	ЗаполнитьКонтекстИД(СтруктураПараметровИД, ИДОбъект);
	ИДОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
	СтруктураПараметровИД.КодУпрощеннойФормулы = 
			ОбщегоНазначенияУХ.ПрочитатьКодУпрощеннойФормулы(ИДОбъект.Ссылка);
	СтруктураПараметровИД.ПланСчетов = ИДОбъект.ПланСчетовБД;
	
	ПоместитьРабочийОбъектВПараметрыИД(СтруктураПараметровИД, ИДОбъект, УИДФормы);
	
	Возврат СтруктураПараметровИД;
	
КонецФункции

// Получить СправочникОбъект.ИсточникиДанныхДляРасчетов по параметрам ИД формы.
//
// Параметры:
//  СтруктураПараметровИД - Структура - параметры источника данных.
//		Поля структуры см. в функции ПолучитьСтруктуруПараметровИД().
// 
// Возвращаемое значение:
//   - СправочникОбъект.ИсточникиДанныхДляРасчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьРабочийОбъектИД(СтруктураПараметровИД)
	
	РабочийОбъект = ДанныеФормыВЗначение(
		СтруктураПараметровИД.РабочийОбъект, 
		Тип("СправочникОбъект.ИсточникиДанныхДляРасчетов"));
		
	ЗаполнитьКонтекстИД(СтруктураПараметровИД, РабочийОбъект);
	
	Возврат РабочийОбъект;
	
КонецФункции

// Заполнить экспортные переменные объекта СправочникОбъект.ИсточникиДанныхДляРасчетов.
//
// Параметры:
//  СтруктураПараметровИД - Структура - параметры источника данных.
//		Поля структуры см. в функции ПолучитьСтруктуруПараметровИД().
//	РабочийОбъект - СправочникОбъект.ИсточникиДанныхДляРасчетов
&НаСервереБезКонтекста
Процедура ЗаполнитьКонтекстИД(СтруктураПараметровИД, РабочийОбъект)
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета = СтруктураПараметровИД.РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();
	
	РабочийОбъект.ДеревоПолейБД = ДанныеФормыВЗначение(
				СтруктураПараметровИД.ДеревоПолейБД,
				Тип("ДеревоЗначений"));
	РабочийОбъект.ТаблицаСоответствияБД = ДанныеФормыВЗначение(
				СтруктураПараметровИД.ТаблицаСоответствияБД,
				Тип("ТаблицаЗначений"));
	РабочийОбъект.ДеревоПараметровОтбораБД = ДанныеФормыВЗначение(
				СтруктураПараметровИД.ДеревоПараметровОтбораБД,
				Тип("ДеревоЗначений"));
	
	РабочийОбъект.КодУпрощеннойФормулы = СтруктураПараметровИД.КодУпрощеннойФормулы;
	РабочийОбъект.ПланСчетовБД = СтруктураПараметровИД.ПланСчетов;
	
КонецПроцедуры

// Сохранить СправочникОбъект.ИсточникиДанныхДляРасчетов
// в параметры источника данных формы.
//
// Параметры:
//  СтруктураПараметровИД - Структура - параметры источника данных.
//		Поля структуры см. в функции ПолучитьСтруктуруПараметровИД().
//  РабочийОбъект - СправочникОбъект.ИсточникиДанныхДляРасчетов - объект источника
//		данных для помещения в параметры ИД формы.
//  УИДФормы - УникальныйИдентификатор - УИД формы.
//
&НаСервереБезКонтекста
Процедура ПоместитьРабочийОбъектВПараметрыИД(СтруктураПараметровИД, РабочийОбъект, УИДФормы)
	СтруктураПараметровИД.РабочийОбъектАдрес = ПоместитьВоВременноеХранилище(
			РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(), УИДФормы);
			
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(
			РабочийОбъект.ДеревоПолейБД,
			СтруктураПараметровИД.ДеревоПолейБД);
    ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(
			РабочийОбъект.ТаблицаСоответствияБД,
			СтруктураПараметровИД.ТаблицаСоответствияБД);
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(
			РабочийОбъект.ДеревоПараметровОтбораБД,
			СтруктураПараметровИД.ДеревоПараметровОтбораБД);
			
	ЗначениеВДанныеФормы(РабочийОбъект, СтруктураПараметровИД.РабочийОбъект);
КонецПроцедуры

// Изменяем параметры и сам источник данных по указанной группе раскрытия.
//
&НаСервереБезКонтекста
Процедура УстановитьГруппуРаскрытияИДНаСервере(СтруктураПараметровИД, ГруппаРаскрытия, УИДФормы)
	
	// Обработка изменения источника данных
	РабочийОбъект = ПолучитьРабочийОбъектИД(СтруктураПараметровИД);
	РабочийОбъект.ГруппаРаскрытияОтбор = ГруппаРаскрытия;
	РабочийОбъект.ПриИзмененииГруппыРаскрытияОтбор();
	
	ПоместитьРабочийОбъектВПараметрыИД(СтруктураПараметровИД, РабочийОбъект, УИДФормы);
	
КонецПроцедуры

// Сконструировать строку с наименованием источника данных, по настройкам формы.
//
// Параметры:
//  Форма - Форма раздела сверки ВГО 
//  СпособОпределенияНаправленияУчета - ПеречисленияСсылка.СпособОпределенияНаправленияУчета.
//
&НаСервереБезКонтекста
Функция СоздатьНаименованиеИсточникаДанных(СпособОпределенияНаправленияУчета)
	Наименование = НСтр("ru='ФСД Сверки'");
	Если СпособОпределенияНаправленияУчета = 
			Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
		Наименование = Наименование + НСтр("ru=' по знаку операции'");
	ИначеЕсли СпособОпределенияНаправленияУчета = 
			Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет Тогда
		Наименование = Наименование + НСтр("ru=' Дт'");
	ИначеЕсли СпособОпределенияНаправленияУчета = 
			Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит Тогда
		Наименование = Наименование + НСтр("ru=' Кт'");
	КонецЕсли;
	
	Возврат Наименование;
КонецФункции

// Обработать событие раскрытия дерева значений полей ИД в форме выбора.
//
// Параметры:
//  Элемент - ТаблицаФормы - элемент внешней формы выбора представляющий дерево.
//  Строка - Число - Идентификатор строки дерева для разворачивания.
//  Отказ - Булево - переменная для установки отказа от раскрытия элемента.
//  ДопПараметры - ФиксированнаяСтруктура - описание источника данных.
//		Реквизиты см. у функции ПолучитьСтруктуруПараметровИД().
//
&НаКлиенте
Процедура ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ, ДопПараметры) Экспорт
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазворачиваемаяСтрока = Элемент.ДанныеСтроки(Строка);
	
	Если НЕ (РазворачиваемаяСтрока.ТипМетаДанных="Справочник" 
		ИЛИ РазворачиваемаяСтрока.ТипМетаДанных="Документ"
		ИЛИ РазворачиваемаяСтрока.ТипМетаДанных="ПланВидовХарактеристик"
		ИЛИ РазворачиваемаяСтрока.ТипМетаДанных="ТаблицаADO" 
		ИЛИ РазворачиваемаяСтрока.ТипЗначения.Количество() > 1) Тогда
		Возврат;
	КонецЕсли;
	
	Если РазворачиваемаяСтрока.ПолучитьЭлементы().Количество() > 0
			И (НЕ ПустаяСтрока(РазворачиваемаяСтрока.ПолучитьЭлементы()[0].ПолеБД)) Тогда
		// Уже разворачивали эту строку. Можно просто развернуть.
		Возврат;
	КонецЕсли;
		
	СтруктураСтрока = СформироватьСтруктуруСтрокиБД(
		РазворачиваемаяСтрока,
		ПредопределенноеЗначение(
			"Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия"));
	ДанныеОбъекта = СформироватьДанныеОбъекта(
		ДопПараметры.РабочийОбъект,
		ДопПараметры.РабочийОбъектАдрес,
		ЭтотОбъект.УникальныйИдентификатор,
		Ложь,
		Истина);
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта, СтруктураСтрока);
	
	Отказ = ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	РабочийОбъектАдрес=ДанныеОбъекта.РабочийОбъектАдрес;
	
	РазворачиваемаяСтрока.ПолучитьЭлементы().Очистить();
	ОбщегоНазначенияКлиентСерверУХ.ДополнитьСтрокиДереваФормы(РазворачиваемаяСтрока, СтруктураСтрока.СтрокиКДобавлению);
КонецПроцедуры

// Получить структуру, описывающую строку аналитики источника данных.
//
// Параметры:
//  ДанныеСтрокиАналитики - ДанныеФормыСтруктура, ДанныеФормыЭлементДерева,
//			ДанныеФормыЭлементКоллекции - строка с описанием аналитики.
//			Формат определяется реквизитом формы "ДеревоПолейБД". 
//  СпособПолучения - ПеречислениеСсылка.СпособыПолученияОперандов - способ
//		получения операндов в источнике данных.
// 
// Возвращаемое значение:
//   Структура - для передачи в функцию
//		РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики()
//
&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики, СпособПолучения)
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	ДанныеСтрокиАналитики.ИспользуетсяВСопоставлении);
	
	Если СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеADO") Тогда
		СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.ТаблицаADO);
		СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
		
	Иначе
		СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
		СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
	КонецЕсли;
	
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);
	СтрокаБД.Вставить("ТаблицаADO",					ДанныеСтрокиАналитики.ТаблицаADO);
	
	Возврат СтрокаБД;
КонецФункции

// Получить структуру описывающую источник данных.
// 
&НаКлиенте
Функция СформироватьДанныеОбъекта(Знач Объект, РабочийОбъектАдрес, УИДФормы, Использование77, ВнутренниеДанные)
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		РабочийОбъектАдрес);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	УИДФормы);
	ДанныеОбъекта.Вставить("ТипБД",						Объект.ТипБД);
	ДанныеОбъекта.Вставить("ТипБДПриемник",				Объект.ТипБДПриемник);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("Отказ",						ЛОЖЬ);
	ДанныеОбъекта.Вставить("Использование77",			Использование77);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			ВнутренниеДанные);
	ДанныеОбъекта.Вставить("СпособПолучения",			Объект.СпособПолучения);
	ДанныеОбъекта.Вставить("СпособИспользования",		Объект.СпособИспользования);
	
	Возврат ДанныеОбъекта;
КонецФункции

// Обработка заполнения подчиненных строк дерева реквизитов источника данных.
&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта, СтруктураСтрока);
КонецПроцедуры

// Обновить таблицу соответствия в источнике данных
//  и записать его в БД. Обновляет ПараметрыИД в соответствии
//  с записанным ИД.
//
// Параметры:
//  ПараметрыИД - ФиксированнаяСтруктура - параметры источника данных
//		из поля формы ПараметрыИД или ПараметрыИДКредитора.
//  ТаблицаСоответствияФормы - ТаблицаЗначений - будут прочитаны данные
//		этой таблицы, и по ним будет обновлена таблица соответствия ИД.
//	ИмяПоляПриемника - Строка - имя колонки таблицы "ТаблицаСоответствияФормы"
//		в которой записаны имена полей приемника данных.
//  УИДФормы - УникальныйИдентификатор - УИД формы.
//
&НаСервереБезКонтекста
Процедура ОбновитьЗаписатьИсточникДанныхПоДаннымФормы(
					ПараметрыИД, ТаблицаСоответствияФормы, УИДФормы)
			
	СтруктураПараметровИД = Новый Структура(ПараметрыИД);
	
	РабочийОбъект = ПолучитьРабочийОбъектИД(СтруктураПараметровИД);
	ОбновитьТаблицуСоответствияИДПоДаннымФормы(ПараметрыИД, ТаблицаСоответствияФормы);
	ИсточникДанныхОбъектПередЗаписью(СтруктураПараметровИД, РабочийОбъект);
	РабочийОбъект.Записать();
	
	ПоместитьРабочийОбъектВПараметрыИД(СтруктураПараметровИД, РабочийОбъект, УИДФормы);
	
	ПараметрыИД = Новый ФиксированнаяСтруктура(СтруктураПараметровИД);
КонецПроцедуры

// Обновить объект источника данных из данных формы перед его записью.
// Аналогична процедуре "ПередЗаписьюНаСервере" формы элемента
// справочника "ИсточникиДанныхДляРасчетов".
//
// Параметры:
//  СтруктураПараметровИД - Структура - описывает данные формы.
//		Поля структуры см. в функции ПолучитьСтруктуруПараметровИД().
//  РабочийОбъект - СправочникОбъект.ИсточникиДанныхДляРасчетов - объект источника
//		данных для обновления из данных формы.
//
&НаСервереБезКонтекста
Процедура ИсточникДанныхОбъектПередЗаписью(СтруктураПараметровИД, РабочийОбъект)
	//РабочийОбъект.СписокРесурсовРегистра = СписокРесурсовРегистра;
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета = СтруктураПараметровИД.РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();	
	
	РабочийОбъект.ДеревоПолейБД = ДанныеФормыВЗначение(
			СтруктураПараметровИД.ДеревоПолейБД, Тип("ДеревоЗначений"));
	РабочийОбъект.ТаблицаСоответствияБД = ДанныеФормыВЗначение(
			СтруктураПараметровИД.ТаблицаСоответствияБД, Тип("ТаблицаЗначений"));		
	РабочийОбъект.ДеревоПараметровОтбораБД = ДанныеФормыВЗначение(
			СтруктураПараметровИД.ДеревоПараметровОтбораБД, Тип("ДеревоЗначений"));
	
	РабочийОбъект.мМодифицированность =  Истина;
	
	Если РабочийОбъект.СпособИспользования = 
				Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
			ИЛИ РабочийОбъект.СпособИспользования =
				Перечисления.СпособыИспользованияОперандов.ДляПримечаний
			ИЛИ (НЕ ЗначениеЗаполнено(РабочийОбъект.Код)) Тогда
		РабочийОбъект.СформироватьКодОперанда(Истина);
	КонецЕсли;
	
	РабочийОбъект.СохранитьНастройкиОперанда();
КонецПроцедуры

// Обновить ТЗ АналитикиСверки по таблице соответствия в объекте источника данных.
//
// Параметры:
//  ПараметрыИД - ФиксированнаяСтруктура - параметры источника данных
//		из поля формы ПараметрыИД или ПараметрыИДКредитора.
//  ТаблицаСоответствияФормы - ТаблицаЗначений - будут прочитаны данные
//		этой таблицы, и по ним будет обновлена таблица соответствия ИД.
//
&НаСервереБезКонтекста
Процедура ОбновитьТаблицуАналитикСверкиПоТаблицеСоответствияИД(
				ПараметрыИД, ТаблицаСоответствияФормы)
			
	Для Каждого СтрокаАналитики Из ТаблицаСоответствияФормы Цикл
		СтрокиСоответствия = ПараметрыИД.ТаблицаСоответствияБД.НайтиСтроки(
				Новый Структура("АналитикаКонсолидации", СтрокаАналитики.Имя));
		Если СтрокиСоответствия.Количество() > 0 Тогда
			ОбновитьСтрокуАналитики(ПараметрыИД, СтрокаАналитики, СтрокиСоответствия[0]);
		Иначе
			СтрокаАналитики.СпособЗаполнения =
					Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Заполнить строку ТЗ АналитикаСверки из строки таблицы соответствия источника данных.
//
&НаСервереБезКонтекста
Процедура ОбновитьСтрокуАналитики(ПараметрыИД, СтрокаАналитики, СтрокаСоответствия)
	СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки] =
			СтрокаСоответствия.ПолеБД;
	СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки + "Наименование"] =
			СтрокаСоответствия.ПсевдонимБД;
	Если НЕ ЗначениеЗаполнено(СтрокаАналитики.СпособЗаполнения)
		ИЛИ ЗначениеЗаполнено(СтрокаСоответствия.СпособЗаполнения) Тогда
		СтрокаАналитики.СпособЗаполнения = 
			СтрокаСоответствия.СпособЗаполнения;
	КонецЕсли;
	СтрокаАналитики[ПараметрыИД.ИмяПоляФиксированноеЗначение] =
			СтрокаСоответствия.ФиксированноеЗначение;
КонецПроцедуры

// Заполнить строку соответствия объекта источника данных
// по данным формы.
//
&НаСервереБезКонтекста
Процедура ОбновитьНастройкуСоответствия(ПараметрыИД, СтрокаСоответствия, СтрокаАналитики)
	СтрокаСоответствия.ПолеБД = СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки];
	СтрокаСоответствия.ПсевдонимБД =
			СтрокаАналитики[ПараметрыИД.ИмяПоляАналитикиСверки + "Наименование"];
	СтрокаСоответствия.Сопоставлено = Истина;
	СтрокаСоответствия.СпособЗаполнения = СтрокаАналитики.СпособЗаполнения;
	СтрокаСоответствия.ФиксированноеЗначение =
			СтрокаАналитики[ПараметрыИД.ИмяПоляФиксированноеЗначение];
КонецПроцедуры

#КонецОбласти
