#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Возвращаем соответствие {ИмяАналитики, СтруктураОписанияДопАналитики}.
// Где ИмяАналитики - ключ соответстивия, это РазделСверкиВГО.ГруппаРаскрытия.Аналитики.Имя.
//		СтруктураОписанияАналитики - все поля таблицы РазделСверкиВГО.ГруппаРаскрытия.Аналитики.
// В соответствие записываются только аналитики с ТипДляЭлиминации не (Организация, Контрагент, ВалютаВзаиморасчетов) и ИспользоватьДляСверки
Функция ПолучитьДопАналитики(РазделВГО) Экспорт
	Перем СоответствиеДопАналитик;
	
	СоответствиеДопАналитик = Новый Соответствие;
	ОтборАналитик = Новый Структура("ИспользоватьДляСверки,ДопАналитикаСверки", Истина, Истина);
	ТЧАналитик = РазделВГО.ГруппаРаскрытия.Аналитики;
	
	ИменаКолонок = "";
	Для Каждого Колонка_ Из Метаданные.Справочники.ГруппыАналитикСверкиВГО.ТабличныеЧасти.Аналитики.Реквизиты Цикл
		ИменаКолонок = ИменаКолонок + Колонка_.Имя + ",";
	КонецЦикла;
	ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
	
	мАналитикСверки = ТЧАналитик.НайтиСтроки(ОтборАналитик);
	Для Каждого АналитикаСверки_ Из мАналитикСверки Цикл
		ОписаниеАналитики = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(ОписаниеАналитики, АналитикаСверки_);
		СоответствиеДопАналитик.Вставить(АналитикаСверки_.Имя, ОписаниеАналитики);
	КонецЦикла;
	
	Возврат СоответствиеДопАналитик;
КонецФункции

// Возвращает имя ресурса для сверки
// Параметры:
//	РазделСверкиВГО - СправочникСсылка.РазделыСверкиВГО
//
// Возвращает:
//	Строка, имя ресурса для сверки.
//  Если не нашли ресурс, то возвращаем пустую строку.
//
Функция ПолучитьИмяРесурсаСверки(РазделВГО) Экспорт
	Имя = "";
	Попытка
		СтрокаРесурса = РазделВГО.ГруппаРаскрытия.Аналитики.Найти(Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, "ТипДляЭлиминации");
		Если СтрокаРесурса = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		Имя = СтрокаРесурса.Имя;
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат Имя;
КонецФункции

// Возвращает преобразованные данные источника данных
// Параметры:
//	РазделСверкиВГО - СправочникСсылка.РазделыСверкиВГО.
//	ИсточникДанных - СправочникСсылка.ИсточникиДанныхДляРасчетов.
//	флВключитьОрганизациюВАналитики - Булево. Если Истина, то аналитика организации будет включена в описание.
//
// Возвращает:
//	Структура, описание источника данных. Если найден ИсточникДанных.
//		Содержит поля:
//			Показатели - Соответствие.
//				Ключ - Перечисление.ТипПоказателяЭлиминации.
//				Значение - СправочникСсылка.ПоказателиОтчетов, показатель указанный в настройках группы раскрытия ВГО.
//			ИмяРесурсаСверки - Строка. Имя ресурса сверки.
//			ЧислоАналитик - Число аналитик в ГруппеРаскрытия ИсточникДанных.
//			ТЗСвязи - ТаблицаЗначений. Описывает связи аналитик в ИсточникДанных. Содержит колонки:
//				Поле - реквизит группы раскрытия.
//				Имя - Имя аналитики ВГО.
//				ВидАналитики - ПланВидовХарактеристикСсылка. Описывает тип аналитики.
//				ЭтоДопАналитика - Булево. Аналитика входит в дополнительные.
//				ТипДляЭлиминации - Перечисление.ТипыАналитикиЭлиминации.
//				ЭтоФиксированноеЗначение - Булево. Если значение аналитики установлено в определенное значение.
//				ФиксированноеЗначение - Произвольный. Значение аналитики, если флаг ЭтоФиксированноеЗначение == Истина. Иначе равно Неопределено.
//	Неопределено, если не найден источник данных, или возникли ошибки.
//
Функция ПолучитьОписаниеИД(РазделВГО, ИсточникДанных, флВключитьОрганизациюВАналитики=Ложь) Экспорт
	Перем СтрОписания;
	
	Если ТипЗнч(РазделВГО) <> Тип("СправочникСсылка.РазделыСверкиВГО") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(ИсточникДанных) <> Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрОписания = Новый Структура("Показатели, ИмяРесурсаСверки, ЧислоАналитик, ТЗСвязи");
	Показатели = Новый Соответствие;
	ТЗСвязи = Новый ТаблицаЗначений;
	ТЗСвязи.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ТЗСвязи.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТЗСвязи.Колонки.Добавить("ВидАналитики");
	ТЗСвязи.Колонки.Добавить("ЭтоДопАналитика", Новый ОписаниеТипов("Булево"));
	ТЗСвязи.Колонки.Добавить("ТипДляЭлиминации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыАналитикЭлиминации"));
	ТЗСвязи.Колонки.Добавить("ЭтоФиксированноеЗначение", Новый ОписаниеТипов("Булево"));
	ТЗСвязи.Колонки.Добавить("ФиксированноеЗначение");
	
	ГруппаРаскрытия = ИсточникДанных.ГруппаРаскрытияОтбор;
		
	СтрОписания.ЧислоАналитик = ГруппаРаскрытия.ЧислоАналитик;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле КАК Поле,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.АналитикаОперанда КАК ВидАналитики,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики КАК Имя,
		|	ЕСТЬNULL(ПоказателиОтчетов.Ссылка, НЕОПРЕДЕЛЕНО) КАК Показатель,
		|	ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле ПОДОБНО ""Аналитика%""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоАналитика,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоПоказатель,
		|	ГруппыАналитикСверкиВГОРесурсы.ТипЗначения КАК ТипЗначения,
		|	ГруппыАналитикСверкиВГОРесурсы.ТипДляЭлиминации КАК ТипДляЭлиминации,
		|	ВЫБОР
		|		КОГДА ГруппыАналитикСверкиВГОРесурсы.ТипЗначения ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОписаниеПоказателя,
		|	ГруппыАналитикСверкиВГОАналитики.ДопАналитикаСверки КАК ЭтоДопАналитика,
		|	ГруппыАналитикСверкиВГОАналитики.ТипДляЭлиминации КАК ТипАналитикиДляЭлиминации,
		|	НЕОПРЕДЕЛЕНО КАК ФиксированноеЗначение,
		|	ЛОЖЬ КАК ЭтоФиксированноеЗначение,
		|	ЕСТЬNULL(ГруппыАналитикСверкиВГОАналитики.НомерСтроки, 1000 * ЕСТЬNULL(ГруппыАналитикСверкиВГОРесурсы.НомерСтроки, 1000)) КАК НомерСтроки
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ГруппаРаскрытияОтбор.Владелец = ПоказателиОтчетов.Владелец
		|			И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле = ПоказателиОтчетов.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналитикСверкиВГО.Ресурсы КАК ГруппыАналитикСверкиВГОРесурсы
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики = ГруппыАналитикСверкиВГОРесурсы.Имя
		|			И (ГруппыАналитикСверкиВГОРесурсы.Ссылка = &ГруппаРаскрытияВГО)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналитикСверкиВГО.Аналитики КАК ГруппыАналитикСверкиВГОАналитики
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики = ГруппыАналитикСверкиВГОАналитики.Имя
		|			И (ГруппыАналитикСверкиВГОАналитики.Ссылка = &ГруппаРаскрытияВГО)
		|ГДЕ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы)
		|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанных
		|	И ВЫБОР
		|			КОГДА ГруппыАналитикСверкиВГОАналитики.ИспользоватьДляСверки ЕСТЬ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ПоказателиОтчетов.Ссылка ЕСТЬ NULL 
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ
		|			ИНАЧЕ ГруппыАналитикСверкиВГОАналитики.ИспользоватьДляСверки
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.АналитикаОперанда,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики,
		|	ЕСТЬNULL(ПоказателиОтчетов.Ссылка, НЕОПРЕДЕЛЕНО),
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле ПОДОБНО ""Аналитика%""
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ГруппыАналитикСверкиВГОРесурсы.ТипЗначения,
		|	ГруппыАналитикСверкиВГОРесурсы.ТипДляЭлиминации,
		|	ВЫБОР
		|		КОГДА ГруппыАналитикСверкиВГОРесурсы.ТипЗначения ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ГруппыАналитикСверкиВГОАналитики.ДопАналитикаСверки,
		|	ГруппыАналитикСверкиВГОАналитики.ТипДляЭлиминации,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ФиксированноеЗначение,
		|	ИСТИНА,
		|	ЕСТЬNULL(ГруппыАналитикСверкиВГОАналитики.НомерСтроки, 1000 * ЕСТЬNULL(ГруппыАналитикСверкиВГОРесурсы.НомерСтроки, 1000))
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ГруппаРаскрытияОтбор.Владелец = ПоказателиОтчетов.Владелец
		|			И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле = ПоказателиОтчетов.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналитикСверкиВГО.Ресурсы КАК ГруппыАналитикСверкиВГОРесурсы
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики = ГруппыАналитикСверкиВГОРесурсы.Имя
		|			И (ГруппыАналитикСверкиВГОРесурсы.Ссылка = &ГруппаРаскрытияВГО)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналитикСверкиВГО.Аналитики КАК ГруппыАналитикСверкиВГОАналитики
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики = ГруппыАналитикСверкиВГОАналитики.Имя
		|			И (ГруппыАналитикСверкиВГОАналитики.Ссылка = &ГруппаРаскрытияВГО)
		|ГДЕ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение)
		|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанных
		|	И ВЫБОР
		|			КОГДА ГруппыАналитикСверкиВГОАналитики.ИспользоватьДляСверки ЕСТЬ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ПоказателиОтчетов.Ссылка ЕСТЬ NULL 
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ
		|			ИНАЧЕ ГруппыАналитикСверкиВГОАналитики.ИспользоватьДляСверки
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Имя";

	Запрос.УстановитьПараметр("ГруппаРаскрытияВГО", РазделВГО.ГруппаРаскрытия);
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЭтоПоказатель Тогда
			ТипПоказателя = ВыборкаДетальныеЗаписи.ТипДляЭлиминации;
			Показатели.Вставить(ТипПоказателя, ВыборкаДетальныеЗаписи.Показатель);
			Если ТипПоказателя = Перечисления.ТипПоказателяЭлиминации.ПоказательСверки Тогда
				СтрОписания.ИмяРесурсаСверки = ВыборкаДетальныеЗаписи.Имя;
			КонецЕсли;
			
		ИначеЕсли флВключитьОрганизациюВАналитики ИЛИ ВыборкаДетальныеЗаписи.ТипАналитикиДляЭлиминации <> Перечисления.ТипыАналитикЭлиминации.Организация Тогда
			НоваяСтрока = ТЗСвязи.Добавить();
			НоваяСтрока.Поле = ВыборкаДетальныеЗаписи.Поле;
			НоваяСтрока.Имя = ВыборкаДетальныеЗаписи.Имя;
			НоваяСтрока.ВидАналитики = ВыборкаДетальныеЗаписи.ВидАналитики;
			НоваяСтрока.ЭтоДопАналитика = ВыборкаДетальныеЗаписи.ЭтоДопАналитика;
			НоваяСтрока.ТипДляЭлиминации = ВыборкаДетальныеЗаписи.ТипАналитикиДляЭлиминации;
			НоваяСтрока.ЭтоФиксированноеЗначение = ВыборкаДетальныеЗаписи.ЭтоФиксированноеЗначение;
			НоваяСтрока.ФиксированноеЗначение = ВыборкаДетальныеЗаписи.ФиксированноеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	СтрОписания.Показатели = Показатели;
	СтрОписания.ТЗСвязи = ТЗСвязи;
	
	Возврат СтрОписания;
КонецФункции

// Возвращает ссылку на источник данных по стороне сверки
// Параметры:
//	РазделВГО - СправочникСсылка.РазделыСверкиВГО. Раздел для которого выполняется поиск.
//	СторонаСверки - ПеречислениеСсылка.СтороныСверкиВГО.
// Возвращает:
//	СправочникСсылка.ИсточникиДанныхДляРасчетов - ссылка на источник данных, соответствующий стороне сверки.
//	Неопределено - если ничего не нашли.
//
Функция ПолучитьИДДляСтороныСверки(РазделВГО, СторонаСверки) Экспорт
	Если ТипЗнч(РазделВГО) <> Тип("СправочникСсылка.РазделыСверкиВГО") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(СторонаСверки) <> Тип("ПеречислениеСсылка.СтороныСверкиВГО") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаИД Из РазделВГО.ИсточникиДанных Цикл
		Если СтрокаИД.СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
			Возврат СтрокаИД.ИсточникДанных;
		ИначеЕсли СтрокаИД.СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет
			И СторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор Тогда
			Возврат СтрокаИД.ИсточникДанных;
		ИначеЕсли СтрокаИД.СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит
			И СторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор Тогда
			Возврат СтрокаИД.ИсточникДанных;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ШаблоныРазделаВГО(ТипРазделаВГО, Продавец = Истина) Экспорт
	
 

КонецФункции

#Область ЗаполнениеРазделаВГО

Процедура ЗаполнитьРазделВГО(ОбъектРазделВГО, Настройки = Неопределено) Экспорт
	
	Заполнение = ПолучитьЗаполнение(Настройки);	

	Если Заполнение.ОбновитьФСД Тогда
		ОбновитьФСД(ОбъектРазделВГО);
	КонецЕсли;
	
	Если Заполнение.ОбновитьПравилаИмпортаФСД Тогда
		ОбновитьПравилаИмпортаФСД(ОбъектРазделВГО);
	КонецЕсли;
	
	Если Заполнение.ОбновитьСверяемыеИсточникиДанных Тогда
		ОбновитьСверяемыеИсточникиДанных(ОбъектРазделВГО);		
	КонецЕсли;
	
	Если Заполнение.ОбновитьИсточникиСебестоимости Тогда
		ОбновитьИсточникиСебестоимости(ОбъектРазделВГО);	
	КонецЕсли;
	
	Если Заполнение.ОбновитьПоляКолонкиСверки Тогда	
		ОбновитьПоляКолонкиСверки(ОбъектРазделВГО);	
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьЗаполнение(Настройки = Неопределено)

	Заполнение = Новый Структура(
	"ОбновитьПоляКолонкиСверки,
	|ОбновитьСверяемыеИсточникиДанных,
	|ОбновитьИсточникиСебестоимости,
	|ОбновитьФСД,
	|ОбновитьПравилаИмпортаФСД", Истина, Истина, Истина, Истина, Истина);

	ЗаполнитьЗначенияСвойств(Заполнение, Настройки);
	
	Возврат Заполнение;

КонецФункции

Процедура ОбновитьПоляКолонкиСверки(ОбъектРазделВГО)

	УстановитьГруппуРаскрытия(ОбъектРазделВГО);
	
	Если Не ОбъектРазделВГО.ДополнительныеСвойства.Свойство("ОписанияФСД") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектРазделВГО.ИсточникиДанных.Очистить();
	
	Для каждого ОписаниеФСД Из ОбъектРазделВГО.ДополнительныеСвойства.ОписанияФСД Цикл
		
		Если СтрНайти(ВРЕГ(ОписаниеФСД.ГруппаРаскрытия.Код), "ССОТПРАВИТЕЛЬ") Тогда
			ОбъектРазделВГО.ИсточникДанныхФСДСебестоимостьПродаж = ОписаниеФСД.ИсточникДанных;
			Продолжить;
		КонецЕсли;
		
		СтрокаТаб = ОбъектРазделВГО.ИсточникиДанных.Добавить();
		СтрокаТаб.ИсточникДанных = ОписаниеФСД.ИсточникДанных;
		
		Если СтрНайти(ВРЕГ(ОписаниеФСД.ГруппаРаскрытия.Код), "ОТПРАВИТЕЛЬ") > 0 Тогда
			СтрокаТаб.СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет;
		ИначеЕсли СтрНайти(ВРЕГ(ОписаниеФСД.ГруппаРаскрытия.Код), "ПОЛУЧАТЕЛЬ") > 0 Тогда
			СтрокаТаб.СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит;
			ОбъектРазделВГО.ИсточникДанныхФСДЗакупки = ОписаниеФСД.ИсточникДанных;
		Иначе 
			СтрокаТаб.СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации;
		КонецЕсли;
	
	КонецЦикла;
	
	ОбъектРазделВГО.ИсточникиДанных.Свернуть("ИсточникДанных,СпособОпределенияНаправленияУчета");
	
КонецПроцедуры

Процедура УстановитьГруппуРаскрытия(ОбъектРазделВГО) Экспорт
	
	ГруппаЗаполнена = ЗначениеЗаполнено(ОбъектРазделВГО.ГруппаРаскрытия);
	
	Если ГруппаЗаполнена 
			И ОбъектРазделВГО.ГруппаРаскрытия.СпособЭлиминации
						= ОбъектРазделВГО.СпособЭлиминации Тогда
						
		СверкаВГОУХ.ОбработатьПометкуНаУдалениеПодчиненногоОбъекта(
			ОбъектРазделВГО.ГруппаРаскрытия, 
			Ложь);
			
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ГруппаЗаполнена Тогда
			
			СверкаВГОУХ.ОбработатьПометкуНаУдалениеПодчиненногоОбъекта(
				ОбъектРазделВГО.ГруппаРаскрытия, 
				Истина);

		КонецЕсли;
		
		НаименованиеВГО = НСтр("ru = 'Группа: %1 (%2)'");
		
		РаскрытиеВГО = Справочники.ГруппыАналитикСверкиВГО.СоздатьЭлемент();
		РаскрытиеВГО.УстановитьНовыйКод();
		
		РаскрытиеВГО.Владелец 			= ОбъектРазделВГО.Владелец;
		РаскрытиеВГО.СпособЭлиминации 	= ОбъектРазделВГО.СпособЭлиминации;
		РаскрытиеВГО.Наименование 		= СтрШаблон(НаименованиеВГО, ОбъектРазделВГО.СпособЭлиминации, РаскрытиеВГО.Код);
			
		РаскрытиеВГО.ЗаполнитьНедостающиеПоля();
		РаскрытиеВГО.Записать();
		
		ЗафиксироватьТранзакцию();
		
		ГруппаРаскрытияДляУстановкиСсылка = РаскрытиеВГО.Ссылка;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = 
			СтрШаблон(НСтр("ru='Ошибка при создании группы раскрытия: %1'"), 
				ОписаниеОшибки());
		Сообщение.Сообщить();
		
		ОтменитьТранзакцию();
		
		ГруппаРаскрытияДляУстановкиСсылка = Справочники.ГруппыАналитикСверкиВГО.ПустаяСсылка();
			
	КонецПопытки;
		
	ОбъектРазделВГО.ГруппаРаскрытия = ГруппаРаскрытияДляУстановкиСсылка;
	
КонецПроцедуры

Процедура ОбновитьФСД(ОбъектРазделВГО)

	Отказ = Ложь;
	
	ГруппаВО = ПолучитьГруппуВидовОтчетов(ОбъектРазделВГО);// папка с ФСД ВГО
	ИмяШаблона = ИмяШаблона(ОбъектРазделВГО);
	
	ТабДок = ПолучитьМакет("ШаблоныРазделовВГО_" + ОбщегоНазначения.КодОсновногоЯзыка());
	РазделВГО = ТабДок.Области.Найти(ИмяШаблона);
	
	ОбъектРазделВГО.ДополнительныеСвойства.Вставить("ОписанияФСД", Новый Массив);
	
	Для НомерФСД = РазделВГО.Верх По РазделВГО.Низ Цикл
		
		Дт				= ТабДок.Область(НомерФСД, 1).Текст;
		Кт				= ТабДок.Область(НомерФСД, 2).Текст;
		КодВО 			= ТабДок.Область(НомерФСД, 3).Текст;
		НаименованиеВО 	= ТабДок.Область(НомерФСД, 4).Текст;
		Показатели		= СтрРазделить(СтрЗаменить(ТабДок.Область(НомерФСД, 5).Текст, " ", ""), ",");
		Аналитики		= ПолучитьАналитики(Дт, Кт, КодВО);
		
		ВО 				= ПодготовитьВидОтчета(КодВО, НаименованиеВО, ГруппаВО);
		СтрокаОтчета 	= СоздатьСтроку(ВО, КодВО, НаименованиеВО);
		ГруппаРаскрытия = СоздатьГруппуРаскрытия(ВО, Аналитики, КодВО, НаименованиеВО);
		
		Для каждого Показатель Из Показатели Цикл
			КолонкаОтчета = СоздатьКолонку(ВО, Показатель, НаименованиеПоказателя(Показатель), Показатели.Найти(Показатель));
			ПоказательОтчета = СоздатьПоказательПоКолонке(ВО, КолонкаОтчета, СтрокаОтчета, ГруппаРаскрытия);
		КонецЦикла;
		
		ОбъектРазделВГО.ДополнительныеСвойства.ОписанияФСД.Добавить(Новый Структура("ГруппаРаскрытия", ГруппаРаскрытия));
		
		СтруктураСоздания = Новый Структура("БланкОтчета, ПравилоПроверки, ПравилоОбработки");
		УправлениеОтчетамиУХ.ПроверитьНаличиеЭлементовНастройки(ВО, СтруктураСоздания, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСверяемыеИсточникиДанных(ОбъектРазделВГО)
	
	Для каждого ФСД Из ОбъектРазделВГО.ДополнительныеСвойства.ОписанияФСД Цикл	
		ИД = СоздатьИсточникиДанныхДляРасчетов(ОбъектРазделВГО.Ссылка, ФСД.ГруппаРаскрытия);
		ФСД.Вставить("ИсточникДанных", ИД);
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьПравилаИмпортаФСД(ОбъектРазделВГО)

	ГруппыРаскрытия = Новый Массив;
	Для каждого ФСД Из ОбъектРазделВГО.ДополнительныеСвойства.ОписанияФСД Цикл
		ГруппыРаскрытия.Добавить(ФСД.ГруппаРаскрытия);
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса_ОтсутствующиеПравила());
	Запрос.УстановитьПараметр("ГруппыРаскрытия", ГруппыРаскрытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипВИБ = Выборка.ТипВИБ;
		
		ОбъектПравило = Справочники.ПравилаОбработки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектПравило, Выборка);
		ОбъектПравило.ПроцедураЗаполнения = ТекстПроцедурыЗаполнения(ОбъектПравило, ОбъектРазделВГО);
		ОбъектПравило.УстановитьНовыйКод();
		
		Попытка
			ОбъектПравило.Записать();					
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать для <%1> правило импорта из <%2>: %3'");
			Сообщить(СтрШаблон(ТекстСообщения, Выборка.Владелец, Выборка.ТипБД, ОписаниеОшибки()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьИсточникиСебестоимости(ОбъектРазделВГО)

	

КонецПроцедуры

#Область СозданиеФСД

Функция ОписаниеФСД(КодФСД = "ВГОМПЗ_Отправитель", АналитикаДт = "ДКЗ", АналитикаКт = "ДР", Показатели = "Сумма, Количество")

	Возврат
	Новый Структура("Код, Дт, Кт, Показатели", 
		КодФСД, АналитикаДт, АналитикаКт, Показатели); 

КонецФункции

Функция ИмяШаблона(ОбъектРазделВГО)

	Если ОбъектРазделВГО.СпособЭлиминации = ПредопределенноеЗначение("Перечисление.СпособыЭлиминации.ЭлиминацияЗапасов") Тогда
		Возврат "МПЗ";		
	ИначеЕсли ОбъектРазделВГО.СпособЭлиминации = ПредопределенноеЗначение("Перечисление.СпособыЭлиминации.ЭлиминацияОСиНМА") Тогда
		Возврат "ВНА";
	ИначеЕсли ОбъектРазделВГО.СпособЭлиминации = ПредопределенноеЗначение("Перечисление.СпособыЭлиминации.ЭлиминацияУслуг") Тогда
		Возврат "Услуги";
	ИначеЕсли ОбъектРазделВГО.СпособЭлиминации = ПредопределенноеЗначение("Перечисление.СпособыЭлиминации.НеЭлиминировать") Тогда
		Возврат "ДДС";
	Иначе
		Возврат "ФИ";
	КонецЕсли;

КонецФункции

Функция ПолучитьАналитики(Дт = "ДР", Кт = "ДКЗ", КодВО = "МПЗ")

	Себестоимость = СтрНайти(КодВО, "Сс") > 0;
	ТипСчета = ?(Себестоимость, Дт, ?(Дт = "ДКЗ", Кт, Дт));//для УиЭ важнее Дт(91.2), чем Кт - списание актива
	
	пвхДоговор = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникДоговораКонтрагентов");
	пвхКонтрагентВГО = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ОрганизационныеЕдиницы");
	пвхВНА = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.РеализуемыеАктивыВГО");
	пвхМПЗ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникНоменклатура");
	пвхПДР = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПрочиеДоходыИРасходы");
	пвхНГ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.НоменклатурныеГруппы");
	пвхЦФО = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникЦФО");
	пвхСЗ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникСтатьиЗатрат");
	
	Результат = Новый Массив;	
	
	#Область ДКЗ
	
	Если Не Себестоимость Тогда
		
		ПВХ = пвхКонтрагентВГО;//КонтрагентВГО
		Результат.Добавить(ОписаниеАналитики(ПВХ, Результат.Количество(), Истина));

	КонецЕсли;
	
	ПВХ = пвхДоговор;
	Результат.Добавить(ОписаниеАналитики(ПВХ, Результат.Количество(), Истина));
	
	Если Себестоимость Тогда
		ПВХ = ?(Кт="ВНА", пвхВНА, пвхМПЗ);
		Результат.Добавить(ОписаниеАналитики(ПВХ, Результат.Количество(), Истина));
	КонецЕсли;
	
	ПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД");
	Результат.Добавить(ОписаниеАналитики(ПВХ, Результат.Количество(), Истина));//для СС
	
	#КонецОбласти
	
	#Область КорСчет
	
	ПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД2");
	Результат.Добавить(ОписаниеАналитики(ПВХ, Результат.Количество(), Истина));
	
	ПВХ1 = пвхНГ;//9002
	ПВХ2 = ?(Себестоимость, пвхСЗ, пвхМПЗ);//9002
	Если ТипСчета = "ПДР" Тогда
		ПВХ1 = пвхПДР;
		ПВХ2 = пвхЦФО;
	ИначеЕсли ТипСчета = "ВНА" Тогда
		ПВХ1 = пвхВНА;
		ПВХ2 = пвхЦФО;
	ИначеЕсли ТипСчета = "ФИ" Тогда
		ПВХ1 = пвхЦФО;
		ПВХ2 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникБанковскиеСчета");
	ИначеЕсли ТипСчета = "ДДС" Тогда
		ПВХ1 = пвхЦФО;
		ПВХ2 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникБанковскиеСчета");
	КонецЕсли;
	
	Результат.Добавить(ОписаниеАналитики(ПВХ1, Результат.Количество(), Ложь));
	Результат.Добавить(ОписаниеАналитики(ПВХ2, Результат.Количество(), Ложь));

	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеАналитики(ВидАналитики, НомерАналитики = 1, Обязательная = Ложь)

	Возврат 
	Новый Структура("ВидАналитики, НомерАналитики, Обязательная", 
					ВидАналитики, НомерАналитики+1, Обязательная);
	
КонецФункции

Функция ПолучитьГруппуВидовОтчетов(ОбъектРазделВГО)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК ИД,
	|	т.ГруппаРаскрытияОтбор.Владелец.Родитель КАК ГруппаВидОтчета
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК т
	|ГДЕ
	|	т.ПотребительРасчета В
	|			(ВЫБРАТЬ
	|				т.Ссылка
	|			ИЗ
	|				Справочник.РазделыСверкиВГО КАК т
	|			ГДЕ
	|				т.Владелец В (ВЫРАЗИТЬ(&РазделВГО КАК Справочник.РазделыСверкиВГО).Владелец))
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.ГруппаРаскрытияОтбор.Владелец.Код УБЫВ");
	Запрос.УстановитьПараметр("РазделВГО", ОбъектРазделВГО.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ГруппаВидОтчета;
	КонецЕсли;
			
	ОбъектВО = Справочники.ВидыОтчетов.СоздатьЭлемент();
	ОбъектВО.Код 			= НСтр("ru = 'ФсдВго'");
	ОбъектВО.Наименование 	= НСтр("ru = 'Формы сбора данных ВГО'");
	
	ОбъектВО.Записать();
	
	Возврат ОбъектВО.Ссылка;

КонецФункции

Функция ПодготовитьВидОтчета(КодФСД, Наименование, Родитель)
	
	Отказ = Ложь;
	
	СсылкаВО = Справочники.ВидыОтчетов.НайтиПоКоду(КодФСД);
	Если ЗначениеЗаполнено(СсылкаВО) Тогда
	    ОбъектВО = СсылкаВО.ПолучитьОбъект();
	Иначе 
		ОбъектВО = Справочники.ВидыОтчетов.СоздатьЭлемент();
		ОбъектВО.Код = КодФСД;
	КонецЕсли;
	
	ОбъектВО.Наименование 	= Наименование;
	ОбъектВО.Родитель 		= Родитель;
	ОбъектВО.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
	
	ОбъектВО.Записать();
	
	//СтруктураСоздания = Новый Структура("БланкОтчета,ПравилоПроверки,ПравилоОбработки");
	//УправлениеОтчетамиУХ.ПроверитьНаличиеЭлементовНастройки(ОбъектВО.Ссылка, , Отказ);
	//
	Возврат ОбъектВО.Ссылка;
	
КонецФункции

Функция СоздатьКолонку(ВидОтчета, Код = Неопределено, Наименование = Неопределено, Номер = 0, Родитель = Неопределено)
	
	ТекущийКод = ?(ЗначениеЗаполнено(Код), Код, ВидОтчета.Код);
	Ссылка = Справочники.КолонкиОтчетов.НайтиПоКоду(ТекущийКод, , , ВидОтчета);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;	
	
	Колонка = Справочники.КолонкиОтчетов.СоздатьЭлемент();
	
	Колонка.Владелец 		= ВидОтчета;
	Колонка.Наименование 	= ?(ЗначениеЗаполнено(Наименование), Наименование, ВидОтчета.Наименование);
	Колонка.Код 			= ТекущийКод;
	Колонка.ПорядковыйНомер = Номер+1;
	Колонка.ТипЗначения		= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	
	Колонка.Записать();
	
	Возврат Колонка.Ссылка;
	
КонецФункции

Функция СоздатьСтроку(ВидОтчета, Код = Неопределено, Наименование = Неопределено, Номер = 1, Родитель = Неопределено)
	
	ТекущийКод = ?(ЗначениеЗаполнено(Код), Код, ВидОтчета.Код);
	Ссылка = Справочники.СтрокиОтчетов.НайтиПоКоду(ТекущийКод, , , ВидОтчета);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;	
		
	Объект = Справочники.СтрокиОтчетов.СоздатьЭлемент();
	
	Объект.Владелец 		= ВидОтчета;
	Объект.Родитель 		= Родитель;
	Объект.Наименование 	= ?(ЗначениеЗаполнено(Наименование), Наименование, ВидОтчета.Наименование);
	Объект.Код 				= ТекущийКод;
	Объект.ПорядковыйНомер 	= Номер;
	
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьГруппуРаскрытия(ВидОтчета, Аналитики, Код = Неопределено, Наименование = Неопределено)
	
	ТекущийКод = ?(ЗначениеЗаполнено(Код), Код, ВидОтчета.Код);
	Ссылка = Справочники.ГруппыРаскрытия.НайтиПоКоду(ТекущийКод, , , ВидОтчета);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;	
	
	Объект = Справочники.ГруппыРаскрытия.СоздатьЭлемент();
	Объект.Владелец		= ВидОтчета;
	Объект.Наименование	= ?(ЗначениеЗаполнено(Наименование), Наименование, ВидОтчета.Наименование);
	Объект.Код 			= ТекущийКод;
	
	Для каждого Аналитика Из Аналитики Цикл
		
		НомерАналитики = Формат(Аналитика.НомерАналитики, "ЧГ=");
		Объект["ВидАналитики" + НомерАналитики] = Аналитика.ВидАналитики;
		Объект["Аналитика" + НомерАналитики + "Обязательна"] = Аналитика.Обязательная;
		
	КонецЦикла;
	
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьПоказательПоКолонке(ВидОтчета, КолонкаОтчета, СтрокаОтчета, ГруппаРаскрытия)
		
	ТекущийКод = КолонкаОтчета.Код;
	Ссылка = Справочники.ПоказателиОтчетов.НайтиПоКоду(ТекущийКод, , , ВидОтчета);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;	
	
	ПоказательОбъект = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
	
	ПоказательОбъект.Владелец 		= ВидОтчета;
	ПоказательОбъект.Наименование 	= КолонкаОтчета.Наименование;
	ПоказательОбъект.Код 			= ТекущийКод;
	ПоказательОбъект.ТипЗначения	= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	
	ПоказательОбъект.Колонка	= КолонкаОтчета;
	ПоказательОбъект.Строка		= СтрокаОтчета;
	
	ПоказательОбъект.ГруппаРаскрытия 	= ГруппаРаскрытия;
	ПоказательОбъект.ВидИтога 			= Перечисления.ВидыИтоговПоказателя.Сумма;
	
	ПоказательОбъект.Записать();
	
	Возврат ПоказательОбъект.Ссылка;
	
КонецФункции

Функция НаименованиеПоказателя(КодПоказателя)

	Если КодПоказателя = "Сумма" Тогда
		Возврат НСтр("ru = 'Сумма взаморасчетов'");
	ИначеЕсли КодПоказателя = "Количество" Тогда
		Возврат НСтр("ru = 'Количество'");
	ИначеЕсли КодПоказателя = "СуммаНДС" Тогда
		Возврат НСтр("ru = 'Сумма НДС'");
	ИначеЕсли КодПоказателя = "СуммаФВ" Тогда
		Возврат НСтр("ru = 'Сумма в функциональной валюте'");
	ИначеЕсли КодПоказателя = "ОстаточнаяСтоимость" Тогда
		Возврат НСтр("ru = 'Выбывающая остаточная стоимость'");
	ИначеЕсли КодПоказателя = "НакопленнаяАмортизация" Тогда
		Возврат НСтр("ru = 'Выбывающая накопленная амортизация'");
	Иначе
		Возврат НСтр("ru = 'Сумма'");//ошибка
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СозданиеИДВГО

Функция СоздатьИсточникиДанныхДляРасчетов(РазделВГО, ГруппаРаскрытия = Неопределено) Экспорт
	
	Ссылка = ПолучитьИсточникДанныхВГО(РазделВГО, ГруппаРаскрытия);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ОбъектИД = Ссылка.ПолучитьОбъект();
	Иначе 
		
		ОбъектИД = Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
		
		ОбъектИД.ПотребительРасчета 	= РазделВГО;
	   	ОбъектИД.ГруппаРаскрытияОтбор = ГруппаРаскрытия;
		ОбъектИД.СпособПолучения 		= Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия;
		
	КонецЕсли;
		
	ОбъектИД.Код 							= ГруппаРаскрытия.Владелец.Код;
	ОбъектИД.Наименование 					= ГруппаРаскрытия.Владелец.Наименование;
	ОбъектИД.НазначениеРасчетов 			= Справочники.ПравилаОбработки.ПустаяСсылка();
	ОбъектИД.ТолькоАналитическиеЗначения	= Истина;
	
	ОбъектИД.ТипБД 					= Справочники.ТипыБазДанных.ТекущаяИБ;
	ОбъектИД.СпособИспользования 	= Перечисления.СпособыИспользованияОперандов.ДляСверкиВГО;
	ОбъектИД.ТипЗначения 			= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	ОбъектИД.ЗаполнитьНачальныеНастройки();
	ОбъектИД.СформироватьТаблицуСоответствияБД();//Объект.ТаблицаСоответствияБД
	ОбъектИД.ПодготовитьДеревоПараметровОтбораБД();
	ОбъектИД.ПодготовитьТаблицыСопоставленийИОтборов();
	
	ЗаполнитьПоляИД(ОбъектИД);
	
	ОбъектИД.мМодифицированность =  Истина;
	ОбъектИД.СформироватьКодОперанда(Истина);
	ОбъектИД.СохранитьНастройкиОперанда();
	ОбъектИД.Записать();
	
	Возврат ОбъектИД.Ссылка;

КонецФункции

Процедура ЗаполнитьПоляИД(ОбъектИД)
	
	Если ОбъектИД.ДеревоПолейБД.Строки.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;
	
	ПоляИсточники = ОбъектИД.ДеревоПолейБД.Строки[0].Строки;
	ПравилаПоиска = ПравилаПоиска();
	Занятые = Новый Соответствие;
	ОбъектИД.ТаблицаСоответствияБД.ЗаполнитьЗначения("", "ПолеБД");
	
	Для каждого ПолеПриемник Из ОбъектИД.ТаблицаСоответствияБД Цикл
		
		Если СтрНачинаетсяС(ПолеПриемник.АналитикаКонсолидации, "Версия.") Тогда //ключевые не сопоставляем
			Продолжить;//системное поле
		ИначеЕсли ПолеПриемник.АналитикаКонсолидации = "Организация" Тогда //организация из шапки
			СопоставитьПолеИД(ПолеПриемник, ПоляИсточники.Найти("Версия.Организация", "ПолеБД"), Занятые);
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(ПолеПриемник.ВидАналитики) Тогда // поля ВГО из аналитики источника
			СопоставитьАналитику(ПолеПриемник, ПоляИсточники, ПравилаПоиска, Занятые);
			Продолжить;
		КонецЕсли;
		
		//поля-показатели ВГО из показателей-источников		
		СопоставитьПолеИД(ПолеПриемник, ПоляИсточники.Найти("Сумма", 					"ПолеБД"), Занятые);
		СопоставитьПолеИД(ПолеПриемник, ПоляИсточники.Найти("СуммаФВ", 					"ПолеБД"), Занятые);
		СопоставитьПолеИД(ПолеПриемник, ПоляИсточники.Найти("ОстаточнаяСтоимость", 		"ПолеБД"), Занятые);
		СопоставитьПолеИД(ПолеПриемник, ПоляИсточники.Найти("НакопленнаяАмортизация",	"ПолеБД"), Занятые);		
		
	КонецЦикла;

КонецПроцедуры

Процедура СопоставитьАналитику(ПолеПриемник, ПоляИсточники, ПравилаПоиска, Занятые)
	
	Для каждого ТекущийТип Из ПолеПриемник.ВидАналитики.ТипЗначения.Типы() Цикл
		
		Если ЗначениеЗаполнено(ПолеПриемник.ПолеБД) Тогда
			Прервать;
		КонецЕсли;
		
		ПравилаТипа = ПравилаПоиска.Получить(ТекущийТип);
		
		Для каждого ПолеИсточник Из ПоляИсточники Цикл
			
			Если Не ЗначениеЗаполнено(ПолеИсточник.ВидАналитики) Тогда
				Продолжить;
			ИначеЕсли ПолеИсточник.ВидАналитики.ТипЗначения.СодержитТип(ТекущийТип) Тогда
				СопоставитьПолеИД(ПолеПриемник, ПолеИсточник, Занятые);
				Продолжить;//может быть было занято, тогда нужно искать следующее
			КонецЕсли;
			
			Если ПравилаТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ПравилоИсточника Из ПравилаТипа Цикл
				Если ПолеИсточник.ВидАналитики.ТипЗначения.СодержитТип(ПравилоИсточника.Значение) Тогда
					СопоставитьПолеИД(ПолеПриемник, ПолеИсточник, Занятые, ПравилоИсточника.Представление);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура СопоставитьПолеИД(ПолеПриемник, ПолеИсточник, Занятые, Путь = "")
	
	Если ПолеИсточник = Неопределено Тогда
	    Возврат;//нет сопоставления
	ИначеЕсли ЗначениеЗаполнено(ПолеПриемник.ПолеБД) Тогда
		Возврат;//уже сопоставили
	КонецЕсли;
	
	Если (Путь = "") Тогда 
		Если Занятые.Получить(ПолеИсточник.ПолеБД) = Неопределено Тогда
			Занятые.Вставить(ПолеИсточник.ПолеБД, Истина);
		Иначе 
			Возврат;//поле источник уже занято
		КонецЕсли;
	КонецЕсли;
	
	ПолеПриемник.ПолеБД 		= ПолеИсточник.ПолеБД + ?(Путь = "", "", "." + Путь);
	ПолеПриемник.ПсевдонимБД 	= ПолеИсточник.НаименованиеБД + Путь;
	
	ПолеПриемник.СправочникБД 	= ПолеИсточник.СправочникБД;
	ПолеПриемник.ТипМетаДанных 	= ПолеИсточник.ТипМетаДанных;
	ПолеПриемник.Измерение 		= ПолеИсточник.Измерение;

	ПолеПриемник.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	ПолеПриемник.Сопоставлено 	= Истина;
	
КонецПроцедуры

Процедура ЗаполнитьИсточникДанных(ИД, Настройки)

	//счета
	//договор, контрагент, валюта, организация
	//Счета
	//видВыручки
	//суммы
	
КонецПроцедуры

Функция ПолучитьИсточникДанныхВГО(РазделВГО, ГруппаРаскрытия = Неопределено)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК т
	|ГДЕ
	|	т.ПотребительРасчета = &РазделВГО
	|	И т.ГруппаРаскрытияОтбор = &ГруппаРаскрытия
	|	И т.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ");
	
	Запрос.УстановитьПараметр("РазделВГО", 			РазделВГО);
	Запрос.УстановитьПараметр("ГруппаРаскрытия",	ГруппаРаскрытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();

КонецФункции

Функция ПравилаПоиска()

	Правила = Новый Соответствие;
	
	ПоТипу = Новый СписокЗначений;
	ПоТипу.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "ВалютаВзаиморасчетов");
	Правила.Вставить(Тип("СправочникСсылка.Валюты"), ПоТипу);
	
	ПоТипу = Новый СписокЗначений;
	ПоТипу.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "Владелец.ОрганизационнаяЕдиница");
	ПоТипу.Добавить(Тип("СправочникСсылка.Контрагенты"), "ОрганизационнаяЕдиница");
	Правила.Вставить(Тип("СправочникСсылка.Организации"), ПоТипу);
	
	Возврат Правила;

КонецФункции

#КонецОбласти

#Область СозданиеПравилИмпорта

Функция ТекстПроцедурыЗаполнения(ОбъектПравило, ОбъектРазделВГО)

	Возврат 
	"
	|//автогенерация правил обработки из разделов ВГО
	|
	|//ЭтотОбъект - Экземпляр отчета
	|Справочники.РазделыСверкиВГО.Подключаемый_ПолучитьВГОВИБ(ЭтотОбъект);
	|";

КонецФункции

Функция ТекстЗапроса_ОтсутствующиеПравила()

	Возврат
	"ВЫБРАТЬ
	|	МАКСИМУМ(РБ.Ссылка) КАК РегистрБухгалтерии,
	|	РБ.ПланСчетов КАК ПланСчетов,
	|	РБ.Владелец КАК ТипВИБ
	|ПОМЕСТИТЬ втРБ
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД КАК РБ
	|ГДЕ
	|	РБ.ПланСчетов В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				пс.ПланСчетов.Владелец КАК ТипВИБ
	|			ИЗ
	|				Справочник.Организации КАК пс)
	|
	|СГРУППИРОВАТЬ ПО
	|	РБ.ПланСчетов,
	|	РБ.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипВИБ,
	|	ПланСчетов,
	|	РегистрБухгалтерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раскрытия.Владелец КАК ВидОтчета,
	|	Раскрытия.Ссылка КАК ГруппаРаскрытия
	|ПОМЕСТИТЬ втГруппыРаскрытия
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК Раскрытия
	|ГДЕ
	|	Раскрытия.Ссылка В(&ГруппыРаскрытия)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРБ.РегистрБухгалтерии КАК РегистрБухгалтерииПоУмолчанию,
	|	втРБ.ПланСчетов КАК ПланСчетовПоУмолчанию,
	|	втРБ.ТипВИБ КАК ТипБД,
	|	втГруппыРаскрытия.ВидОтчета КАК Владелец,
	|	втГруппыРаскрытия.ГруппаРаскрытия КАК ГруппаРаскрытия
	|ИЗ
	|	втРБ КАК втРБ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыРаскрытия КАК втГруппыРаскрытия
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Созданные
	|		ПО втРБ.ТипВИБ = Созданные.ТипБД
	|			И втРБ.ПланСчетов = Созданные.ПланСчетовПоУмолчанию
	|			И (втГруппыРаскрытия.ВидОтчета = Созданные.Владелец)
	|			И втРБ.РегистрБухгалтерии = Созданные.РегистрБухгалтерииПоУмолчанию
	|ГДЕ
	|	Созданные.Ссылка ЕСТЬ NULL";

КонецФункции

Функция ТекстЗапроса_ОборотыДтКтВИБ(ИмяРБ = "Хозрасчетный", СторонаДКЗ = "Дт", Ресурсы = Неопределено, СубконтоСчетов = Неопределено)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&СубконтоСчетов КАК Субконто,
	|	&Ресурсы КАК Ресурсы,
	|	&Валюта КАК Валюта,
	|	т.СчетДт КАК СчетДт,
	|	т.СчетКт КАК СчетКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт В ИЕРАРХИИ (&СчетДт),
	|			&СубконтоДт,
	|			СчетКт В ИЕРАРХИИ (&СчетКт),
	|			&СубконтоКт,
	|			Организация = &Организация
	|				И ИСТИНА) КАК т";
	
	Если ИмяРБ <> "Хозрасчетный" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Хозрасчетный", ИмяРБ);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СторонаДКЗ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", ?(СторонаДКЗ = "Дт", "т.ВалютаДт", "т.ВалютаКт"));
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", "NULL");	
	КонецЕсли;
	
	Ресурсы = ?(Ресурсы = Неопределено, "NULL КАК Сумма", Ресурсы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ресурсы КАК Ресурсы", Ресурсы);
	
	СубконтоСчетов = ?(СубконтоСчетов = Неопределено, "NULL КАК СубконтоДт1", СубконтоСчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СубконтоСчетов КАК Субконто", СубконтоСчетов);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапроса_Счета()

	

КонецФункции

Функция Подключаемый_ПолучитьВГОВИБ(ОбъектЭкземпляр) Экспорт
	
	ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьСоединениеВИБ(ОбъектЭкземпляр);
	
	стрЗапрос = Новый Структура;
	ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьДанныеРегистраНакопленияВИБ(ОбъектЭкземпляр, стрЗапрос);
	
	//Для Каждого СтрОперанд Из ОбъектЭкземпляр.мЗначенияОперандов Цикл
	//	
	//	Если СтрОперанд.ИтогПоПоказателю Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Для Каждого СтрокаОперанд Из стрЗапрос.ТаблицаОперандов Цикл
	//		
	//		НСтр = тВнешнихДанных.Добавить();
	//		ЗаполнитьЗначенияСвойств(нСтр,СтрОперанд);
	//		НСтр.ПериодОтчета 	= ПериодОтчета;
	//		НСтр.Показатель 	= СтрокаОперанд.Показатель;
	//		НСтр.КодВФормуле 	= СтрокаОперанд.Код;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	//параметры запроса
	//текстЗапроса
	//ТаблицаРезультат
	//загрузка в показатели
	
	//правила импорта
	//алгоритм импорта
	// правила для ВИБ
	//РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьРабочуюТаблицуДанных8х(ТекСоединениеВИБ,ДанныеДляЗапроса);
	//ДанныеДляЗапроса
	//ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,СтрЗапрос.ТаблицаОперандов,СтрЗапрос.ТабПравилаИспользованияПолей);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли