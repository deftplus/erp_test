#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Контрагент = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
	МастерСчетКонтрагента = УправлениеДенежнымиСредствамиУХ.БанковскийСчетКонтрагента(Объект.МастерСчет);
	
	ОбновитьСписокСчетовНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Участники пула.
	ТаблицаУчастники = УчастникиПула.Выгрузить(Новый Структура("ВходитВПул", Истина),"Организация,Договор");
	ТекущийОбъект.УчастникиПула.Загрузить(ТаблицаУчастники);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ТекСтрокаСчет Из БанковскиеСчетаПула Цикл
		
		СчетОбъект = ТекСтрокаСчет.СчетОрганизации.ПолучитьОбъект();
		Если ТекСтрокаСчет.ВходитВПул Тогда
			СсылкаПул = Объект.Ссылка;
			ИнструментРазмещения = Перечисления.ИнструментыРазмещенияОстатков.КэшПулинг;
		Иначе
			СсылкаПул = Справочники.ПулыЛиквидности.ПустаяСсылка();
			ИнструментРазмещения = Перечисления.ИнструментыРазмещенияОстатков.НеИспользовать;
		КонецЕсли;
		СчетОбъект.ПулЛиквидности = СсылкаПул;
		СчетОбъект.ИнструментРазмещенияСвободныхОстатков = ИнструментРазмещения;
		СчетОбъект.ЛимитОстаткаМакс = ТекСтрокаСчет.МаксимальныйОстаток;
		СчетОбъект.АвтоматическиПереводитьИзлишки = ТекСтрокаСчет.ПереводитьАвтоматически;

		СчетОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьСписокСчетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ОбновитьСписокСчетовНаСервере();
	УправлениеФормой(ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МастерСчетПриИзменении(Элемент)
	МастерСчетПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МастерСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СписокПулов = Новый СписокЗначений;
	СписокПулов.Добавить(ПредопределенноеЗначение("Справочник.ПулыЛиквидности.ПустаяСсылка"));
	СписокПулов.Добавить(Объект.Ссылка);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПулЛиквидности", 	СписокПулов);
	СтруктураОтбора.Вставить("Владелец", 		Объект.Организация);
	СтруктураОтбора.Вставить("ВалютаДенежныхСредств", Объект.Валюта);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	Форма = ДенежныеСредстваВстраиваниеУХКлиент.ПолучитьФормуВыбораБанковскогоСчетаОрганизации(СтруктураПараметров, Элемент);
	Форма.Открыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастникиПула

&НаКлиенте
Процедура УчастникиПулаПометкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.УчастникиПула.ТекущиеДанные;
	УстановитьПометкуПоКоллекцииСчетов(ТекДанные.ВходитВПул, ТекДанные.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПулаПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрокПодчиненнойТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПулаДоговорПриИзменении(Элемент)
	
	ТекДанные = Элементы.УчастникиПула.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		ТекДанные.ЕстьОшибкиДоговор = Не ЕстьВстречныйДоговорКонтрагента(ТекДанные.Договор);
	Иначе
		ТекДанные.ЕстьОшибкиДоговор = Ложь;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскиеСчетаПула

&НаКлиенте
Процедура БанковскиеСчетаПулаПометкаПриИзменении(Элемент)
	
	БанковскиеСчетаПулаПометкаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВсеСчета(Команда)
	
	УстановитьПометкуБанковскиеСчета(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеСчета(Команда)
	
	УстановитьПометкуБанковскиеСчета(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеУчастники(Команда)
	УстановитьПометкуУчастникиНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеУчастники(Команда)
	УстановитьПометкуУчастникиНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПула(Команда)
	ОбновитьСписокСчетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВстречныйДоговор(Команда)
	ТекстВопроса = НСтр("ru = 'Создать недостающие встречные договоры по выбранным организациям?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПодтверждениеСозданиеВстречныхДоговоровЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуВнутригрупповыхКонтрагентов(Команда)
	
	СтруктураПараметров = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкуВнутригрупповыхКонтрагентовПродолжение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаВнутригрупповыхКонтрагентов.Форма.Форма", СтруктураПараметров,ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСчетов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ТекДанные = Элементы.УчастникиПула.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("Организация", ТекДанные.Организация);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПараметрыСчетовПродолжение",ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПулыЛиквидности.Форма.ГрупповаяУстановкаПараметров", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокСчетовНаСервере()
	
	ВыгрузкаДоговоров = Объект.УчастникиПула.Выгрузить();	
	БанковскиеСчетаПула.Загрузить(
			ДенежныеСредстваВстраиваниеУХ.ПолучитьСписокСчетовУчастниковПулаЛиквидности(
								ВыгрузкаДоговоров, Объект.Ссылка, Объект.Валюта));
	УчастникиПула.Загрузить(ВыгрузкаДоговоров);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВстречныйДоговор(Знач ТекДоговорПулинга)
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	СтруктураДанныеЗаполнения = Новый Структура;
	СтруктураДанныеЗаполнения.Вставить("ВстречныйДоговор", ТекДоговорПулинга);
	НовыйДоговор.Заполнить(СтруктураДанныеЗаполнения);
	НовыйДоговор.Наименование = ТекДоговорПулинга.Наименование + НСтр("ru = '_Встречный'");
	НовыйДоговор.ОсновнойЦФО = НовыйДоговор.Организация;
	НовыйДоговор.Записать();
	РегистрыСведений.СвязанныеДоговоры.ЗаписатьВстречныеДоговоры(ТекДоговорПулинга, НовыйДоговор.Ссылка);
	
КонецПроцедуры

// Создает и заполняет во всех выбранных на форме счетах встречные договоры.
&НаСервере
Процедура ЗаполнитьВстречныеДоговораПоВыбранным()

	ВыбранныеСтроки = УчастникиПула.НайтиСтроки(Новый Структура("ВходитВПул,ЕстьОшибкиДоговор", Истина, Истина));
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	
	Попытка
		Для Каждого ТекСтрока Из ВыбранныеСтроки Цикл
			СоздатьВстречныйДоговор(ТекСтрока.Договор);
			ТекСтрока.ЕстьОшибкиДоговор = Ложь;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошли ошибки при создании встречных договоров: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	ОбновитьСписокСчетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеСозданиеВстречныхДоговоровЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;				// Пользователь отказался. Ничего не делаем.
	Иначе	
		ЗаполнитьВстречныеДоговораПоВыбранным();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Контрагент = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
	МастерСчетКонтрагента = Неопределено;
	УправлениеФормой(ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Процедура МастерСчетПриИзмененииНаСервере()
	МастерСчетКонтрагента = УправлениеДенежнымиСредствамиУХ.БанковскийСчетКонтрагента(Объект.МастерСчет);
	УправлениеФормой(ЭтотОбъект);		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокПодчиненнойТаблицы()
	
	СтруктураОтбора = Новый Структура("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	Если Элементы.УчастникиПула.ТекущиеДанные <> Неопределено Тогда
		СтруктураОтбора.Организация = Элементы.УчастникиПула.ТекущиеДанные.Организация;
	КонецЕсли;
	
	Элементы.БанковскиеСчетаПула.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Пометка организации мастер-счета установлена перманентно.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УчастникиПулаПометка.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"УчастникиПула.Организация", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("Объект.Организация"),,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Не выбираем договор, если организация не входит в пул или является мастер-организацией.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УчастникиПулаДоговор.Имя);
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,"Группа ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
	"УчастникиПула.ВходитВПул", ВидСравненияКомпоновкиДанных.Равно,Ложь,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
	"УчастникиПула.Организация", ВидСравненияКомпоновкиДанных.Равно,Новый ПолеКомпоновкиДанных("Объект.Организация"),,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Добавить подсказку ввода в поле договор для строки мастер-организации.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УчастникиПулаДоговор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"УчастникиПула.Организация", ВидСравненияКомпоновкиДанных.Равно,Новый ПолеКомпоновкиДанных("Объект.Организация"),,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	
	// Установить для поля Договор отметку незаполненного, если организация входит в пул и не является мастер-организацией
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УчастникиПулаДоговор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"УчастникиПула.ВходитВПул", ВидСравненияКомпоновкиДанных.Равно,Истина,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"УчастникиПула.Договор", ВидСравненияКомпоновкиДанных.НеЗаполнено,,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"УчастникиПула.Организация", ВидСравненияКомпоновкиДанных.НеРавно,Новый ПолеКомпоновкиДанных("Объект.Организация"),,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Пометка мастер-счета установлена перманентно.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскиеСчетаПулаПометка.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"БанковскиеСчетаПула.СчетОрганизации", ВидСравненияКомпоновкиДанных.Равно,Новый ПолеКомпоновкиДанных("Объект.МастерСчет"),,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуБанковскиеСчета(Пометка)
	
	ТекДанные = Элементы.УчастникиПула.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ОРганизация <> Объект.Организация Тогда
			ТекДанные.ВходитВПул = Пометка;
		КонецЕсли;
		ОрганизацияОтбор = ТекДанные.Организация;
	Иначе
		ОрганизацияОтбор = Неопределено;
	КонецЕсли;
	
	УстановитьПометкуПоКоллекцииСчетов(Пометка, ОрганизацияОтбор)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУчастникиНаСервере(Знач ЗначениеПометки)
	
	Для Каждого ТекСтрока Из УчастникиПула Цикл
		Если ЗначениеПометки = Ложь И ТекСтрока.Организация = Объект.Организация Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрока.ВходитВПул = ЗначениеПометки;
	КонецЦикла;

	УстановитьПометкуПоКоллекцииСчетов(ЗначениеПометки);
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуПоКоллекцииСчетов(Знач ЗначениеПометки, Знач ОрганизацияОтбор = Неопределено)
	
	Если ОрганизацияОтбор = Неопределено Тогда
		КоллекцияПоиск = БанковскиеСчетаПула;
	Иначе
		КоллекцияПоиск = БанковскиеСчетаПула.НайтиСтроки(Новый Структура("Организация", ОрганизацияОтбор));
	КонецЕсли;
	
	Для Каждого ТекЭлементКоллекции Из КоллекцияПоиск Цикл
		Если ЗначениеПометки = Ложь И ТекЭлементКоллекции.СчетОрганизации = Объект.МастерСчет Тогда
			Продолжить;
		КонецЕсли;
		ТекЭлементКоллекции.ВходитВПул = ЗначениеПометки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьВстречныйДоговорКонтрагента(Договор)
	
	Возврат (РегистрыСведений.СвязанныеДоговоры.ПолучитьВстречныйДоговор(Договор) <> Неопределено);
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыСчетовПродолжение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекОрганизация = Неопределено;
	Если Результат.Свойство("Организация") Тогда
		ТекОрганизация = Результат.Организация;
		Результат.Удалить("Организация");
	КонецЕсли;
	
	ЗаполнитьПараметрыСчетовНаСервере(Результат, ТекОрганизация);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСчетовНаСервере(Знач СтруктураПараметров, Знач ОрганизацияОтбор = Неопределено)
	
	СтруктураОтбор = Новый Структура("ВходитВПул", Истина);
	Если ЗначениеЗаполнено(ОрганизацияОтбор) Тогда
		СтруктураОтбор.Вставить("Организация", ОрганизацияОтбор);
	КонецЕсли;
	
	Счета = БанковскиеСчетаПула.НайтиСтроки(СтруктураОтбор);
	Для Каждого ТекСчет Из Счета Цикл
		ЗаполнитьЗначенияСвойств(ТекСчет, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуВнутригрупповыхКонтрагентовПродолжение(Результат, Параметры) Экспорт
	
	ЗавершитьНастройкуВнутригрупповыхКонтрагентовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьНастройкуВнутригрупповыхКонтрагентовНаСервере()
	
	Контрагент = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
	МастерСчетКонтрагента = УправлениеДенежнымиСредствамиУХ.БанковскийСчетКонтрагента(Объект.МастерСчет);
	
	ОбновитьСписокСчетовНаСервере();

КонецПроцедуры

&НаСервере
Процедура БанковскиеСчетаПулаПометкаПриИзмененииНаСервере()
	
	ДанныеСтрокиИсточник = БанковскиеСчетаПула.НайтиПоИдентификатору(Элементы.БанковскиеСчетаПула.ТекущаяСтрока);
	Если ДанныеСтрокиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = БанковскиеСчетаПула.НайтиСтроки(Новый Структура("ВходитВПул,Организация", Истина, ДанныеСтрокиИсточник.Организация));
	
	ОрганизацияИспользуется = (НайденныеСтроки.Количество() > 0);
	
	СтрокиОрганизации = УчастникиПула.НайтиСтроки(Новый Структура("Организация", ДанныеСтрокиИсточник.Организация));
	Если СтрокиОрганизации.Количество() Тогда
		СтрокиОрганизации[0].ВходитВПул = ОрганизацияИспользуется;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ЕстьОшибкиОрганизация.Видимость = Не ЗначениеЗаполнено(Форма.Контрагент);
	Элементы.ЕстьОшибкиМастерСчет.Видимость = Не ЗначениеЗаполнено(Форма.МастерСчетКонтрагента)
	
КонецПроцедуры


#КонецОбласти
