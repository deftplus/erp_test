
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция ПолучитьИменаСубконто() Экспорт 

	Результат = Новый Структура;
	
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетУчетаПервоначальнойСтоимостиСубконто1");
	Субконто.Вставить(2, "СчетУчетаПервоначальнойСтоимостиСубконто2");
	Субконто.Вставить(3, "СчетУчетаПервоначальнойСтоимостиСубконто3");
	
	Результат.Вставить("СчетУчетаПервоначальнойСтоимости", Субконто);
	
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетНакопленнойАмортизацииСубконто1");
	Субконто.Вставить(2, "СчетНакопленнойАмортизацииСубконто2");
	Субконто.Вставить(3, "СчетНакопленнойАмортизацииСубконто3");
	
	Результат.Вставить("СчетНакопленнойАмортизации", Субконто);
		
	Возврат Результат;
	
КонецФункции

Функция ОбъектИспользуетсяВУчете(СсылкаСправочник) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыУчетаВНАМСФО.ГруппаВНА
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАМСФО КАК ПараметрыУчетаВНАМСФО
	|ГДЕ
	|	ПараметрыУчетаВНАМСФО.ГруппаВНА = &ГруппаВНА");
	Запрос.УстановитьПараметр("ГруппаВНА", СсылкаСправочник);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция ПолучитьСоздатьГруппуВНА(КлассВНА, СчетУчетаПервоначальнойСтоимости = Неопределено, СчетНакопленнойАмортизации = Неопределено, 
									НачислятьАмортизацию, КэшГруппыВНА = Неопределено, Отказ = Ложь) Экспорт

	Отбор = Новый Структура("КлассВНА,СчетУчетаПервоначальнойСтоимости,СчетНакопленнойАмортизации,НачислятьАмортизацию",
							КлассВНА, СчетУчетаПервоначальнойСтоимости, СчетНакопленнойАмортизации, НачислятьАмортизацию);
	
	Если КэшГруппыВНА <> Неопределено Тогда
		
		СтрокиГруппаВНА = КэшГруппыВНА.НайтиСтроки(Отбор);
		Если СтрокиГруппаВНА.Количество() > 0 Тогда
			ГруппаВНА = СтрокиГруппаВНА[0].ГруппаВНА;
			Возврат ГруппаВНА;
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК ГруппаВНА
	|ИЗ
	|	Справочник.ГруппыВНАМСФО КАК т
	|ГДЕ
	|	т.КлассВНА = &КлассВНА
	|	И т.НачислятьАмортизацию = &НачислятьАмортизацию
	|	И НЕ т.ПометкаУдаления");
	
	Для каждого Параметр Из Отбор Цикл
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Параметр.Ключ = "СчетУчетаПервоначальнойСтоимости" Тогда
			Запрос.Текст = Запрос.Текст + " И т.СчетУчетаПервоначальнойСтоимости = &СчетУчетаПервоначальнойСтоимости";
		ИначеЕсли Параметр.Ключ = "СчетНакопленнойАмортизации" Тогда
			Запрос.Текст = Запрос.Текст + " И т.СчетНакопленнойАмортизации = &СчетНакопленнойАмортизации";		
		КонецЕсли;

		Запрос.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ОбъектГруппаВНА = Справочники.ГруппыВНАМСФО.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектГруппаВНА, Отбор);
		ОбъектГруппаВНА.МодельУчетаВНА = Перечисления.МоделиУчетаВНАМСФО.УчетПоПереоцененнойСтоимости;
		
		ОбъектГруппаВНА.Наименование = МСФОКлиентСерверУХ.ПолучитьАвтоНаименованиеПараметрыУчетаВНА(ОбъектГруппаВНА);
		
		Попытка			
			ОбъектГруппаВНА.Записать();				
			ГруппаВНА = ОбъектГруппаВНА.Ссылка; 
		Исключение			
			
			ТекстОшибки = НСтр("ru = 'Не удалось создать группу ВНА (%1)'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстОшибки, СчетУчетаПервоначальнойСтоимости), Отказ);
			ГруппаВНА = Неопределено;
			
		КонецПопытки;		
		
		Если КэшГруппыВНА <> Неопределено Тогда
			
			СтрокаКэша = КэшГруппыВНА.Добавить();
			СтрокаКэша.ГруппаВНА = ГруппаВНА;
			ЗаполнитьЗначенияСвойств(СтрокаКэша, Отбор);
			
		КонецЕсли;
		
		Возврат ГруппаВНА;
		
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить()[0].ГруппаВНА;
	
	КонецЕсли;

КонецФункции

Функция ПолучитьГруппуВНАпоУмолчанию(ВНА, ДатаСведений = Неопределено) Экспорт

	ТипыВНА = УчетМСФОПовтИспУХ.ПолучитьОписаниеТиповВНА();
	
	ТаблицаИсточникВНА = Новый ТаблицаЗначений;
	ТаблицаИсточникВНА.Колонки.Добавить("ВНА", ТипыВНА);
	ТаблицаИсточникВНА.Добавить().ВНА = ВНА;
	
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить("ВЫБРАТЬ т.ВНА ПОМЕСТИТЬ ТаблицаИсточникВНА ИЗ &ТабИсточник КАК т");
	ТекстЗапроса.Добавить(ТекстЗапроса_ПараметрыУчетаВНАПоУмолчанию(Новый Структура));
	ТекстЗапроса.Добавить("ВЫБРАТЬ т.ПараметрыУчетаВНА КАК ГруппаВНА ИЗ втПараметрыДляЗаполненияВНА КАК т");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()));
	
	Запрос.УстановитьПараметр("ДатаОкончания",	?(ЗначениеЗаполнено(ДатаСведений), ДатаСведений, ТекущаяДата()));
	Запрос.УстановитьПараметр("ТабИсточник",	ТаблицаИсточникВНА);
	Запрос.УстановитьПараметр("ТипыВНА", 		ТипыВНА.Типы());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;//Неопределено - нет записи, ПустаяСсылка - отказ от рекласса из МПЗ в ОС
	Иначе 
		Возврат РезультатЗапроса.Выгрузить().Получить(0).ГруппаВНА;
	КонецЕсли;
			
КонецФункции

Функция ПолучитьТаблицуГруппВНАпоУмолчанию(МассивВНА, ДатаСведений = Неопределено) Экспорт

	ТипыВНА = Новый Массив;	
	Для каждого ТекущийВНА Из МассивВНА Цикл
		ТипыВНА.Добавить(ТипЗнч(ТекущийВНА));
	КонецЦикла;
		
	ТипыВНА = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТипыВНА);
	
	ТаблицаИсточникВНА = Новый ТаблицаЗначений;
	ТаблицаИсточникВНА.Колонки.Добавить("ВНА", Новый ОписаниеТипов(ТипыВНА));	
	
	Если МассивВНА.Количество() = 0 Тогда
		ТаблицаИсточникВНА.Колонки.Добавить("ГруппаВНА", Новый ОписаниеТипов("СправочникСсылка.ГруппыВНАМСФО"));
		Возврат ТаблицаИсточникВНА;	
	КонецЕсли;
	
	Для каждого ТекущийВНА Из МассивВНА Цикл
		ТаблицаИсточникВНА.Добавить().ВНА = ТекущийВНА;	
	КонецЦикла;	
	
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить("ВЫБРАТЬ т.ВНА ПОМЕСТИТЬ ТаблицаИсточникВНА ИЗ &ТабИсточник КАК т");
	ТекстЗапроса.Добавить(ТекстЗапроса_ПараметрыУчетаВНАПоУмолчанию(Новый Структура));
	ТекстЗапроса.Добавить("ВЫБРАТЬ т.ВНА, т.ПараметрыУчетаВНА ИЗ втПараметрыДляЗаполненияВНА КАК т");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()));
	
	Запрос.УстановитьПараметр("ДатаОкончания",	?(ЗначениеЗаполнено(ДатаСведений), ДатаСведений, ТекущаяДата()));
	Запрос.УстановитьПараметр("ТабИсточник", 	ТаблицаИсточникВНА);
	Запрос.УстановитьПараметр("ТипыВНА", 		ТипыВНА);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТаблицаИсточникВНА.Колонки.Добавить("ПараметрыУчетаВНА", Новый ОписаниеТипов("СправочникСсылка.ГруппыВНАМСФО"));
		Возврат ТаблицаИсточникВНА;
	Иначе 
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
			
КонецФункции

Функция ПолучитьТипыОбъектовВНА() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ВстраиваниеУХКлиентСервер.ПолучитьТипОС());
	Результат.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Результат.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	Результат.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
		
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ПараметрыУчетаВНАПоУмолчанию(НомераТаблиц, ИмяТаблицыВНА = Неопределено) Экспорт

	НомераТаблиц.Вставить("втУчитываемыеВНА",				НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втПриоритеты", 					НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втПараметрыДляЗаполненияВНА",	НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтоимостьВНАМСФООбороты.ВНА КАК ВНА,
	|	СтоимостьВНАМСФООбороты.ГруппаВНА КАК ГруппаВНА
	|ПОМЕСТИТЬ втУчитываемыеВНА
	|ИЗ
	|	РегистрНакопления.СтоимостьВНАМСФО.Обороты(
	|			,
	|			&ДатаОкончания,
	|			,
	|			ВНА В
	|				(ВЫБРАТЬ
	|					т.ВНА
	|				ИЗ
	|					ТаблицаИсточникВНА КАК т)) КАК СтоимостьВНАМСФООбороты
	|ГДЕ
	|	СтоимостьВНАМСФООбороты.СуммаВВалютеУчетаОборот <> 0
	|	И СтоимостьВНАМСФООбороты.ГруппаВНА <> ЗНАЧЕНИЕ(Справочник.ГруппыВНАМСФО.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВНА.ВНА КАК ВНА,
	|	ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	ВЫБОР
	|		КОГДА ТаблицаВНА.ВНА = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|			ТОГДА 0
	|		КОГДА ТаблицаВНА.ВНА.Родитель В (&ТипыВНА)
	|			ТОГДА 1
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель В (&ТипыВНА)
	|			ТОГДА 2
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель В (&ТипыВНА)
	|			ТОГДА 3
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель.Родитель В (&ТипыВНА)
	|			ТОГДА 4
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель В (&ТипыВНА)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втПриоритеты
	|ИЗ
	|	ТаблицаИсточникВНА КАК ТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаВНАПоУмолчанию КАК ПараметрыУчетаВНАПоУмолчанию
	|		ПО (ТаблицаВНА.ВНА = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель.Родитель.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА)
	|ГДЕ
	|	НЕ ТаблицаВНА.ВНА В
	|				(ВЫБРАТЬ
	|					т.ВНА
	|				ИЗ
	|					втУчитываемыеВНА КАК т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПриоритеты.ВНА КАК ВНА,
	|	МАКСИМУМ(втПриоритеты.ПараметрыУчетаВНА) КАК ПараметрыУчетаВНА
	|ПОМЕСТИТЬ втПараметрыДляЗаполненияВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		втПриоритеты.ВНА КАК ВНА,
	|		МИНИМУМ(втПриоритеты.Приоритет) КАК Приоритет
	|	ИЗ
	|		втПриоритеты КАК втПриоритеты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втПриоритеты.ВНА) КАК МинПриоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
	|		ПО МинПриоритет.ВНА = втПриоритеты.ВНА
	|			И МинПриоритет.Приоритет = втПриоритеты.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втПриоритеты.ВНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втУчитываемыеВНА.ВНА,
	|	втУчитываемыеВНА.ГруппаВНА
	|ИЗ
	|	втУчитываемыеВНА КАК втУчитываемыеВНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА";
	
	Если ИмяТаблицыВНА = Неопределено Тогда
		Возврат ТекстЗапроса;
	Иначе 
		Возврат СтрЗаменить(ТекстЗапроса, "ТаблицаИсточникВНА", ИмяТаблицыВНА);
	КонецЕсли;
	
КонецФункции

Процедура СохранитьПараметрыПоУмолчаниюВНА(ВНА, ПараметрыУчетаВНА, ЗаписатьПустое = Ложь, Отказ = Ложь) Экспорт 
	
	нз = РегистрыСведений.ПараметрыУчетаВНАПоУмолчанию.СоздатьНаборЗаписей();
	нз.Отбор.ВНА.Установить(ВНА);
	нз.Прочитать();
	
	нз.Очистить();
	
	Если ЗаписатьПустое Или ЗначениеЗаполнено(ПараметрыУчетаВНА) Тогда
		
		Запись = нз.Добавить();
		Запись.ВНА = ВНА;
		Запись.ПараметрыУчетаВНА = ПараметрыУчетаВНА;
	
	КонецЕсли;
	
	Попытка
	    нз.Записать(Истина);
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить параметры по умолчанию(<%1>) для ВНА <%2>'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстОшибки, ПараметрыУчетаВНА, ВНА), Отказ);
			
	КонецПопытки;

КонецПроцедуры

#КонецЕсли