// Выставляет значения в колонке Доля таблицы стадий пропорционально 
// длительности стадий.
&НаСервере
Процедура РаспределитьДолиПропорционально(ТаблицаВход)
	// Подготовка исходных данных.
	КоличествоСтрок = ТаблицаВход.Количество();
	Если КоличествоСтрок > 0 Тогда
		// Заполняем колонку Длительность.
		ТаблицаВход.Колонки.Добавить("Длительность");
		Для Каждого ТекВыгрузка Из ТаблицаВход Цикл
			ТекСтадия = ТекВыгрузка.Стадия;
			Если ЗначениеЗаполнено(ТекСтадия) Тогда
				ТекВыгрузка.Длительность = ТекСтадия.Длительность;
			Иначе
				ТекВыгрузка.Длительность = 0;
			КонецЕсли;	
		КонецЦикла;	
		// Распределяем пропорционально.
		ИтогДлительность = ТаблицаВход.Итог("Длительность");
		Если ИтогДлительность > 0 Тогда
			ЕдиницаПропорции = 100 / ИтогДлительность;
			Для Каждого ТекВыгрузка Из ТаблицаВход Цикл
				НоваяДоля = Цел(ЕдиницаПропорции * ТекВыгрузка.Длительность * 100) / 100;
				ТекВыгрузка.Доля = НоваяДоля;
			КонецЦикла;	
		Иначе
			ЕдиницаПропорции = 100 / КоличествоСтрок;
			Для Каждого ТекВыгрузка Из ТаблицаВход Цикл
				НоваяДоля = Цел(ЕдиницаПропорции * 100) / 100;
				ТекВыгрузка.Доля = НоваяДоля;
			КонецЦикла;	
		КонецЕсли;	
		// Установим для последней строки долю как разность прочих долей.
		НоваяДоляИтог = ТаблицаВход.Итог("Доля");
		ПоследняяСтрока = ТаблицаВход[КоличествоСтрок - 1].Доля;
		ДоляИтогБезПоследней = НоваяДоляИтог - ПоследняяСтрока;
		ТаблицаВход[КоличествоСтрок - 1].Доля = 100 - ДоляИтогБезПоследней;
	ИначеЕсли КоличествоСтрок = 1 Тогда
		ПерваяСтрока = Объект.Стадии[0];
		ПерваяСтрока.Доля = 100;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указано ни одной стадии. Распределение пропорционально отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// РаспределитьДолиПропорционально_Сервер()

// Загружает в дерево на форме данные по стадиям из базы данных.
&НаСервере
Процедура ЗагрузитьСтадииВДерево()
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ДеревоВрем.Строки.Очистить();
	// Формирование соответствия групп.
	СоответствиеГрупп = Новый Соответствие;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ГруппирующаяСтрока", Истина);
	НайденныеСтроки = Объект.Стадии.НайтиСтроки(СтруктураОтбора);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		СоответствиеГрупп.Вставить(ТекНайденныеСтроки.ИсходныйНомерСтроки, Новый Массив);
	КонецЦикла;	
	// Добавление
	Для Каждого ТекСтадии Из Объект.Стадии Цикл
		ЕстьРодительТекущейСтроки = (ТекСтадии.ГруппаРодитель <> 0);
		Если ЕстьРодительТекущейСтроки Тогда
			МассивРодителя = СоответствиеГрупп.Получить(ТекСтадии.ГруппаРодитель);
			Если МассивРодителя <> Неопределено Тогда
				МассивРодителя.Добавить(ТекСтадии.ИсходныйНомерСтроки);
			Иначе
				МассивРодителя = Новый Массив;
			КонецЕсли;	
			СоответствиеГрупп.Вставить(ТекСтадии.ГруппаРодитель, МассивРодителя);
		Иначе
			// Нет родителя. Пропускаем строку.
		КонецЕсли;
	КонецЦикла;	
	Для Каждого ТекСтадии Из Объект.Стадии Цикл
		ЕстьРодительТекущейСтроки = (ТекСтадии.ГруппаРодитель <> 0);
		Если НЕ ЕстьРодительТекущейСтроки Тогда
			Если ТекСтадии.ГруппирующаяСтрока Тогда
				// Добавление группирующей строки.
				НоваяСтрокаРодитель = ДеревоВрем.Строки.Добавить();
				НоваяСтрокаРодитель.Стадия								 = ПустаяСтадия;
				НоваяСтрокаРодитель.ИтогВыполнения						 = 0;
				НоваяСтрокаРодитель.СтадияГруппа						 = ТекСтадии.ПредставлениеГруппы;
				НоваяСтрокаРодитель.ГруппирующаяСтрока					 = Истина;
				НоваяСтрокаРодитель.ОграничениеМинимальнойДлительности	 = Ложь;
				НоваяСтрокаРодитель.ОграничениеМаксимальнойДлительности	 = Ложь;
				// Получение дочерних строк.
				МассивРодителя = СоответствиеГрупп.Получить(ТекСтадии.ИсходныйНомерСтроки);
				Если МассивРодителя <> Неопределено Тогда
					Для Каждого ТекМассивРодителя Из МассивРодителя Цикл
						// Поиск данных дочерней строки.
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("ИсходныйНомерСтроки", ТекМассивРодителя);
						НайденныеСтроки = Объект.Стадии.НайтиСтроки(СтруктураПоиска);
						Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
							// Добавление дочерней строки.
							НоваяСтрокаПотомок = НоваяСтрокаРодитель.Строки.Добавить();
							НоваяСтрокаПотомок.Стадия				 = ТекНайденныеСтроки.Стадия;
							НоваяСтрокаПотомок.ИтогВыполнения		 = ТекНайденныеСтроки.ИтогВыполнения;
							НоваяСтрокаПотомок.СтадияГруппа			 = ТекНайденныеСтроки.Стадия;
							НоваяСтрокаПотомок.ГруппирующаяСтрока	 = Ложь;
							НоваяСтрокаПотомок.ОграничениеМинимальнойДлительности	 = ТекНайденныеСтроки.ОграничениеМинимальнойДлительности;
							НоваяСтрокаПотомок.ОграничениеМаксимальнойДлительности	 = ТекНайденныеСтроки.ОграничениеМаксимальнойДлительности;
						КонецЦикла;	
					КонецЦикла;	
				Иначе
					// Нет данных по группе.
				КонецЕсли;	
			Иначе
				НоваяСтрокаЭлемент = ДеревоВрем.Строки.Добавить();
				НоваяСтрокаЭлемент.Стадия								 = ТекСтадии.Стадия;
				НоваяСтрокаЭлемент.ИтогВыполнения						 = ТекСтадии.ИтогВыполнения;
				НоваяСтрокаЭлемент.СтадияГруппа							 = ТекСтадии.Стадия;
				НоваяСтрокаЭлемент.ГруппирующаяСтрока					 = Ложь;
				НоваяСтрокаЭлемент.ОграничениеМинимальнойДлительности	 = ТекСтадии.ОграничениеМинимальнойДлительности;
				НоваяСтрокаЭлемент.ОграничениеМаксимальнойДлительности	 = ТекСтадии.ОграничениеМаксимальнойДлительности;
			КонецЕсли;	
		Иначе
			// Принадлежит другой строке. Будет добавлена отдельно.
		КонецЕсли;
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры		// ЗагрузитьСтадииВДерево()

// Записывает в табличную часть объекта ТекущийОбъект данные по стадиям из
// дерева стадий.
&НаСервере
Процедура ЗаписатьДеревоВСтадии(ТекущийОбъект)
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ТекущийОбъект.Стадии.Очистить();
	Для Каждого ТекСтроки Из ДеревоВрем.Строки Цикл
		НоваяСтрока = ТекущийОбъект.Стадии.Добавить();
		Если ТекСтроки.ГруппирующаяСтрока Тогда
			НоваяСтрока.Стадия								 = ПустаяСтадия;
			НоваяСтрока.ИтогВыполнения						 = 0;
			НоваяСтрока.ГруппаРодитель						 = 0;
			НоваяСтрока.ГруппирующаяСтрока					 = Истина;
			НоваяСтрока.ПредставлениеГруппы					 = ТекСтроки.СтадияГруппа;
			НоваяСтрока.ОграничениеМинимальнойДлительности	 = Ложь;
			НоваяСтрока.ОграничениеМаксимальнойДлительности	 = Ложь;
			Для Каждого ТекДочерниеСтроки Из ТекСтроки.Строки Цикл
				НоваяДочерняяСтрока = ТекущийОбъект.Стадии.Добавить();
				НоваяДочерняяСтрока.Стадия								 = ТекДочерниеСтроки.Стадия;
				НоваяДочерняяСтрока.ИтогВыполнения						 = ТекДочерниеСтроки.ИтогВыполнения;
				НоваяДочерняяСтрока.ГруппаРодитель						 = НоваяСтрока.НомерСтроки;
				НоваяДочерняяСтрока.ГруппирующаяСтрока					 = Ложь;
				НоваяДочерняяСтрока.ПредставлениеГруппы					 = "";
				НоваяДочерняяСтрока.ОграничениеМинимальнойДлительности	 = ТекДочерниеСтроки.ОграничениеМинимальнойДлительности;
				НоваяДочерняяСтрока.ОграничениеМаксимальнойДлительности	 = ТекДочерниеСтроки.ОграничениеМаксимальнойДлительности;
			КонецЦикла;	
		Иначе
			НоваяСтрока.Стадия								 = ТекСтроки.Стадия;
			НоваяСтрока.ИтогВыполнения						 = ТекСтроки.ИтогВыполнения;
			НоваяСтрока.ГруппаРодитель						 = 0;
			НоваяСтрока.ГруппирующаяСтрока					 = Ложь;
			НоваяСтрока.ПредставлениеГруппы					 = "";
			НоваяСтрока.ОграничениеМинимальнойДлительности	 = ТекСтроки.ОграничениеМинимальнойДлительности;
			НоваяСтрока.ОграничениеМаксимальнойДлительности	 = ТекСтроки.ОграничениеМаксимальнойДлительности;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры		// ЗаписатьДеревоВСтадии()

// Добавляет в дерево стадий новую группу с именем ИмяГруппыВход.
&НаСервере
Процедура ДобавитьГруппу_Сервер(ИмяГруппыВход)
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	НоваяСтрокаРодитель = ДеревоВрем.Строки.Добавить();
	НоваяСтрокаРодитель.Стадия				 = ПустаяСтадия;
	НоваяСтрокаРодитель.ИтогВыполнения		 = 0;
	НоваяСтрокаРодитель.СтадияГруппа		 = ИмяГруппыВход;
	НоваяСтрокаРодитель.ГруппирующаяСтрока	 = Истина;
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры		// ДобавитьГруппу_Сервер()

// Добавляет в корень дерева стадий новую стадию ДобавляемаяСтадияВход. Когда
// добавляемая стадия не указана - будет добавлена пустая.
&НаСервере
Процедура ДобавитьСтадию_Сервер(ДобавляемаяСтадияВход = Неопределено)
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	СтадияРабочая = ПустаяСтадия;
	Если ЗначениеЗаполнено(ДобавляемаяСтадияВход) Тогда
		СтадияРабочая = ДобавляемаяСтадияВход;
	Иначе
		СтадияРабочая = ПустаяСтадия;
	КонецЕсли;	
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	НоваяСтрокаРодитель = ДеревоВрем.Строки.Добавить();
	НоваяСтрокаРодитель.Стадия				 = СтадияРабочая;
	НоваяСтрокаРодитель.ИтогВыполнения		 = 0;
	НоваяСтрокаРодитель.СтадияГруппа		 = СтадияРабочая;
	НоваяСтрокаРодитель.ГруппирующаяСтрока	 = Ложь;
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры		// ДобавитьГруппу_Сервер()

// Выполняет пропорциональное распределение для долей стадий по величине их длительностей.
&НаСервере
Процедура РаспределитьПропорционально_Сервер()
	// Получение таблицы стадий.
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ТаблицаСтадий = ОбщегоНазначенияСерверУХ.ПреобразоватьДеревоЗначенийВТаблицу(ДеревоВрем);
	ТаблицаОчищ = ТаблицаСтадий.СкопироватьКолонки();
	Для Каждого ТекТаблицаСтадий Из ТаблицаСтадий Цикл
		Если ЗначениеЗаполнено(ТекТаблицаСтадий.Стадия) Тогда
			НоваяСтрока = ТаблицаОчищ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаСтадий);
		Иначе
			// Пропускаем.
		КонецЕсли;	
	КонецЦикла;	
	ТаблицаОчищ.Свернуть("Стадия", "ИтогВыполнения");
	ТаблицаОчищ.Колонки.Добавить("Доля");
	// Распределение долей.
	РаспределитьДолиПропорционально(ТаблицаОчищ);
	// Соответствие долей стадиям.
	СоответствиеДолей = Новый Соответствие;
	СуммаДолей = 0;
	Для Каждого ТекТаблицаОчищ Из ТаблицаОчищ Цикл
		НоваяДоля = СуммаДолей + ТекТаблицаОчищ.Доля;
		СоответствиеДолей.Вставить(ТекТаблицаОчищ.Стадия, НоваяДоля);
		СуммаДолей = СуммаДолей + ТекТаблицаОчищ.Доля;
	КонецЦикла;	
	// Запись долей в дерево.
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	Для Каждого ТекСтроки Из ДеревоВрем.Строки Цикл
		Если ТекСтроки.ГруппирующаяСтрока Тогда
			ТекСтроки.ИтогВыполнения = 0;
			Для Каждого ТекПодчиненныеСтроки Из ТекСтроки.Строки Цикл
				ТекСтадияПодчиненные = ТекПодчиненныеСтроки.Стадия;
				ЗначениеДоли = СоответствиеДолей.Получить(ТекСтадияПодчиненные);
				Если ЗначениеЗаполнено(ЗначениеДоли) Тогда
					ТекПодчиненныеСтроки.ИтогВыполнения = ЗначениеДоли;
				Иначе
					ТекПодчиненныеСтроки.ИтогВыполнения = 0;
				КонецЕсли;	
			КонецЦикла;	
		Иначе
			ТекСтадия = ТекСтроки.Стадия;
			ЗначениеДоли = СоответствиеДолей.Получить(ТекСтадия);
			Если ЗначениеЗаполнено(ЗначениеДоли) Тогда
				ТекСтроки.ИтогВыполнения = ЗначениеДоли;
			Иначе
				ТекСтроки.ИтогВыполнения = 0;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	// Вывод дерева на форму.
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры

// Обновляет отображение элементов, отражающие даные по основному
// шаблону на форме.
&НаСервере
Процедура ОбновитьЭлементыОсновнойШаблон()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.ВидМероприятия = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура Тогда
			Элементы.ГруппаОсновнойШаблон.Видимость = Истина;
			ТекСпособВыбораПоставщика = Объект.СпособВыбораПоставщика;
			ТекВидМероприятия = Объект.ВидМероприятия;
			ОсновнойШаблонРезультат = РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.ПолучитьОсновнойШаблонПоКонтексту(ТекСпособВыбораПоставщика, ТекВидМероприятия);
			ЭтоОсновнойШаблон = (ОсновнойШаблонРезультат = Объект.Ссылка);
			Элементы.ГруппаШаблонУстановленОсновным.Видимость = ЭтоОсновнойШаблон;
			Элементы.ГруппаУстановитьШаблонОсновным.Видимость = НЕ ЭтоОсновнойШаблон;
		Иначе
			Элементы.ГруппаОсновнойШаблон.Видимость = Ложь;
		КонецЕсли;	
	Иначе
		Элементы.ГруппаОсновнойШаблон.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры		// ОбновитьЭлементыОсновнойШаблон()

// Управляет доступностью реквизитов на форме.
&НаСервере
Процедура УправлениеДоступностью()
	ЕстьМероприятие = ЗначениеЗаполнено(Объект.ВидМероприятия);
	Элементы.ВидМероприятия.Доступность = НЕ ЕстьМероприятие;
	ЭтоВидМероприятияЗакупочнаяПроцедура = (Объект.ВидМероприятия = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура);
	Элементы.СпособВыбораПоставщика.Видимость = ЭтоВидМероприятияЗакупочнаяПроцедура;	
	Элементы.ИспользоватьПроцентВыполнения.Видимость	 = НЕ ЭтоВидМероприятияЗакупочнаяПроцедура;
	Элементы.ИспользоватьКонтрольЗатрат.Видимость		 = НЕ ЭтоВидМероприятияЗакупочнаяПроцедура;
	Элементы.ГруппаПринадлежность.Видимость				 = НЕ ЭтоВидМероприятияЗакупочнаяПроцедура;
	Элементы.ГруппаНалоговыйМониторинг.Видимость				 = НЕ ЭтоВидМероприятияЗакупочнаяПроцедура;
	Если ЭтоВидМероприятияЗакупочнаяПроцедура Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;	
	ОбновитьЭлементыОсновнойШаблон();
	Элементы.ДеревоСтадийИтогВыполнения.Видимость			 = Объект.ИспользоватьПроцентВыполнения;
	Элементы.СтадииРаспределитьПропорционально.Видимость	 = Объект.ИспользоватьПроцентВыполнения;
	Элементы.ПроизводственныйКалендарь.Видимость			 = Объект.ИспользоватьПроизводственныйКалендарь;
	Элементы.УчитываетсяВНалоговомМониторинге.Видимость = Объект.ВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие;
	Элементы.ГруппаНалоговыйМониторинг.Видимость = Объект.ВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие;
	Элементы.НаправлениеВыявленияРисков.Видимость = Объект.УчитываетсяВНалоговомМониторинге;
КонецПроцедуры		// УправлениеДоступностью()

// Серверная обёртка команды УстановитьШаблонОсновным.
&НаСервере
Процедура УстановитьШаблонОсновным_Сервер()
	РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.УстановитьШаблонОсновным(Объект.СпособВыбораПоставщика, Объект.ВидМероприятия, Объект.Ссылка);
	УправлениеДоступностью();
КонецПроцедуры		// УстановитьШаблонОсновным_Сервер()	

// Получает таблицу значений, содержащую данные по принадлежности
// шаблона мероприятия ШаблонВход.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуПринадлежностиШаблона(ШаблонВход, ВидМероприятияВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиИспользованияШаблоновМероприятий.Контекст КАК Контекст,
		|	НастройкиИспользованияШаблоновМероприятий.ВидМероприятия КАК ВидМероприятия,
		|	НастройкиИспользованияШаблоновМероприятий.ШаблонМероприятия КАК ШаблонМероприятия,
		|	НастройкиИспользованияШаблоновМероприятий.НазначенОсновным КАК НазначенОсновным
		|ИЗ
		|	РегистрСведений.НастройкиИспользованияШаблоновМероприятий КАК НастройкиИспользованияШаблоновМероприятий
		|ГДЕ
		|	НастройкиИспользованияШаблоновМероприятий.ШаблонМероприятия = &ШаблонМероприятия
		|	И НастройкиИспользованияШаблоновМероприятий.ВидМероприятия = &ВидМероприятия";
	Запрос.УстановитьПараметр("ВидМероприятия", ВидМероприятияВход);
	Запрос.УстановитьПараметр("ШаблонМероприятия", ШаблонВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуПринадлежностиШаблона()

// Загружает данные принадлежности текущего шаблона в табличную
// часть на форме. Когда параметр ОчищатьТаблицуВход установлен в
// истину, таблица будет очищена перед заполнением.
&НаСервере
Процедура СчитатьПринадлежностьШаблона(ОчищатьТаблицуВход = Истина)
	Если ОчищатьТаблицуВход Тогда
		ТаблицаПринадлежность.Очистить();
	Иначе
		// очистка не требуется.
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДанныеПринадлежности = ПолучитьТаблицуПринадлежностиШаблона(Объект.Ссылка, Объект.ВидМероприятия);
		Для Каждого ТекДанныеПринадлежности Из ДанныеПринадлежности Цикл
			НоваяСтрока = ТаблицаПринадлежность.Добавить();
			НоваяСтрока.Контекст			 = ТекДанныеПринадлежности.Контекст;
			НоваяСтрока.НазначенОсновным	 = ТекДанныеПринадлежности.НазначенОсновным;
		КонецЦикла;	
	Иначе
		// Новый шаблон. Оставляем принадлежность пустой.
	КонецЕсли;
КонецПроцедуры		// СчитатьПринадлежностьШаблона()

// Записывает данные по принадлежности текущего шаблона исходя из настроек на форме.
&НаСервере
Процедура СохранитьПринадлежностьМероприятий(ШаблонВход)
	// Сравним данныепо шаблонам в базе и на форме.
	ВыгрузкаПринадлежности = ТаблицаПринадлежность.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_ДанныеШаблона.Контекст КАК Контекст,
		|	ТЗ_ДанныеШаблона.НазначенОсновным КАК НазначенОсновным
		|ПОМЕСТИТЬ ВТ_ДанныеШаблона
		|ИЗ
		|	&ТЗ_ДанныеШаблона КАК ТЗ_ДанныеШаблона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиИспользованияШаблоновМероприятий.Контекст КАК Контекст,
		|	НастройкиИспользованияШаблоновМероприятий.ВидМероприятия КАК ВидМероприятия,
		|	НастройкиИспользованияШаблоновМероприятий.ШаблонМероприятия КАК ШаблонМероприятия,
		|	НастройкиИспользованияШаблоновМероприятий.НазначенОсновным КАК НазначенОсновным
		|ПОМЕСТИТЬ ВТ_ДанныеРегистра
		|ИЗ
		|	РегистрСведений.НастройкиИспользованияШаблоновМероприятий КАК НастройкиИспользованияШаблоновМероприятий
		|ГДЕ
		|	НастройкиИспользованияШаблоновМероприятий.ШаблонМероприятия = &ШаблонМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ДанныеРегистра.Контекст КАК КонтекстБаза,
		|	ВТ_ДанныеРегистра.НазначенОсновным КАК НазначенОсновнымБаза,
		|	ВТ_ДанныеШаблона.Контекст КАК КонтекстТаблица,
		|	ВТ_ДанныеШаблона.НазначенОсновным КАК НазначенОсновнымТаблица,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеШаблона.Контекст ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьЗаписьТаблицы,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеРегистра.Контекст ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьЗаписьБазы
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеШаблона КАК ВТ_ДанныеШаблона
		|		ПО ВТ_ДанныеРегистра.Контекст = ВТ_ДанныеШаблона.Контекст
		|			И (ВТ_ДанныеРегистра.ВидМероприятия = &ВидМероприятия)
		|			И (ВТ_ДанныеРегистра.ШаблонМероприятия = &ШаблонМероприятия)";
	Запрос.УстановитьПараметр("ТЗ_ДанныеШаблона", ВыгрузкаПринадлежности);
	Запрос.УстановитьПараметр("ВидМероприятия", Объект.ВидМероприятия);
	Запрос.УстановитьПараметр("ШаблонМероприятия", ШаблонВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекЕстьЗаписьТаблицы = ВыборкаДетальныеЗаписи.ЕстьЗаписьТаблицы;
		ТекЕстьЗаписьБазы = ВыборкаДетальныеЗаписи.ЕстьЗаписьБазы;
		Если (НЕ ТекЕстьЗаписьТаблицы) И (ТекЕстьЗаписьБазы) Тогда
			// Нет данных в таблице формы. Удалим запись из базы.
			Попытка
				НаборЗаписей = РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Контекст.Установить(ВыборкаДетальныеЗаписи.КонтекстБаза);
				НаборЗаписей.Отбор.ВидМероприятия.Установить(Объект.ВидМероприятия);
				НаборЗаписей.Отбор.ШаблонМероприятия.Установить(ШаблонВход);
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'При удалении шастроек использования шаблона мероприятия для контекста %Контекст% произошли ошибки: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Контекст%", Строка(ВыборкаДетальныеЗаписи.КонтекстБаза));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		ИначеЕсли (НЕ ТекЕстьЗаписьБазы) И (ТекЕстьЗаписьТаблицы) Тогда
			// Нет данных в базе. Создадим новую запись в базе.
			Попытка
				МенеджерЗаписи = РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Контекст					 = ВыборкаДетальныеЗаписи.КонтекстТаблица;
				МенеджерЗаписи.ВидМероприятия			 = Объект.ВидМероприятия;
				МенеджерЗаписи.ШаблонМероприятия		 = ШаблонВход;
				МенеджерЗаписи.НазначенОсновным			 = ВыборкаДетальныеЗаписи.НазначенОсновнымТаблица;
				МенеджерЗаписи.ИспользоватьРасписание	 = Ложь;
				МенеджерЗаписи.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'При добавлении настроек использования шаблона для контекста %Контекст% произошли ошибки: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Контекст%", Строка(ВыборкаДетальныеЗаписи.КонтекстТаблица));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		ИначеЕсли (ТекЕстьЗаписьБазы) И (ТекЕстьЗаписьТаблицы) Тогда
			// Записи совпадают. Обновим признак использования по умолчанию.
			Если (ВыборкаДетальныеЗаписи.НазначенОсновнымТаблица <> ВыборкаДетальныеЗаписи.НазначенОсновнымБаза) Тогда
				Попытка
					ТекКонтекст = ВыборкаДетальныеЗаписи.КонтекстТаблица;
					ТекВидМероприятия = Объект.ВидМероприятия;
					ТекШаблон = ШаблонВход;
					РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.ИзменитьОтметкуОсновногоШаблона(ТекКонтекст, ТекВидМероприятия, ТекШаблон, ВыборкаДетальныеЗаписи.НазначенОсновнымТаблица);
				Исключение
					ТекстСообщения = НСтр("ru = 'При изменении настроек использования шаблона для контекста %Контекст% произошли ошибки: %ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Контекст%", Строка(ВыборкаДетальныеЗаписи.КонтекстТаблица));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецПопытки;
			Иначе
				// Настройки уже совпадают. Пропускаем.
			КонецЕсли;	
		Иначе
			// Неизвестный вариант. Пропускаем.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// СохранитьПринадлежностьМероприятий()

// Возвращает массив, содержащий обязательные стадии для закупочной процедуры.
&НаСервереБезКонтекста
Функция ВернутьМассивОбязательныхСтадийЗакупочнойПроцедуры()
	РезультатФункции = Новый Массив;
	МассивСтадииНачалоПодготовкиЗакупкиКПубликации = Справочники.СтадииМероприятий.ВернутьСтадииНачалоПодготовкиЗакупкиКПубликации();
	МассивСтадииОфициальноеОбъявлениеЗакупки = Справочники.СтадииМероприятий.ВернутьСтадииОфициальноеОбъявлениеЗакупки();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатФункции, МассивСтадииНачалоПодготовкиЗакупкиКПубликации, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатФункции, МассивСтадииОфициальноеОбъявлениеЗакупки, Истина);
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивОбязательныхСтадийЗакупочнойПроцедуры()

// Серверная обёртка команды Заполнить стадии по умолчанию.
&НаСервере
Процедура ЗаполнитьСтадииПоУмолчанию_Сервер(ОчисткаВход = Истина)
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	Если ОчисткаВход Тогда
		ОбъектФормы.Стадии.Очистить();
	Иначе
		// Не требуется очистка имеющихся стадий.
	КонецЕсли;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МероприятияВыборПоставщиков");
		Модуль.РазместитьСтадииВОбъект(Объект.СпособВыбораПоставщика, ОбъектФормы);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	ЗагрузитьСтадииВДерево();
КонецПроцедуры		// ЗаполнитьСтадииПоУмолчанию_Сервер()

// Возвращает общую длительность стадий из массива МассивСтадийВход.
&НаСервереБезКонтекста
Функция ИтоговаяДлительностьМассиваСтадий(МассивСтадийВход)
	РезультатФункции = 0;
	Для Каждого ТекМассивСтадийВход Из МассивСтадийВход Цикл
		Если ЗначениеЗаполнено(ТекМассивСтадийВход) Тогда
			РезультатФункции = РезультатФункции + ТекМассивСтадийВход.Длительность;
		Иначе
			// Пустое значение. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ИтоговаяДлительностьМассиваСтадий()
	
// Сворачивает дерево этапов на форме.
&НаКлиенте
Процедура СвернутьДерево()
	ЭлементыДерева = ДеревоСтадий.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДерева Из ЭлементыДерева Цикл 
		ТекИдентификатор = ТекЭлементыДерева.ПолучитьИдентификатор();
		Элементы.ДеревоСтадий.Свернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры		// СвернутьДерево()

// Разворачивает дерево на форме.
&НаКлиенте
Процедура РазвернутьДерево()
	ЭлементыДереваСтадий = ДеревоСтадий.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДереваСтадий Из ЭлементыДереваСтадий Цикл 
		ТекИдентификатор = ТекЭлементыДереваСтадий.ПолучитьИдентификатор();
		Элементы.ДеревоСтадий.Развернуть(ТекИдентификатор, Истина);
	КонецЦикла;
КонецПроцедуры		// РазвернутьДерево()

// Рекурсивно добавляет в массив стадий МассивСтадийИзм стадии из узла УзелВход.
// Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаКлиенте
Процедура ДополнитьМассивСтадий(УзелВход, МассивСтадийИзм, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекЭлементы Из УзелВход.ПолучитьЭлементы() Цикл
		ТекСтадия = ТекЭлементы.Стадия;
		Если ЗначениеЗаполнено(ТекСтадия) Тогда
			МассивСтадийИзм.Добавить(ТекСтадия);
		Иначе
			// Стадия не заполнена. Не добавляем в массив.
		КонецЕсли;
		ДополнитьМассивСтадий(ТекЭлементы, МассивСтадийИзм, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ДополнитьМассивСтадий()

// Возвращает массив всех стадий в дереве на форме.
&НаКлиенте
Функция ПолучитьМассивСтадийДерева()
	РезультатФункции = Новый Массив;
	ДополнитьМассивСтадий(ДеревоСтадий, РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивСтадийДерева()

// Выводит в подвал итоговое значение длительности.
&НаКлиенте
Процедура РассчитатьИтоговуюДлительность()
	МассивСтадий = ПолучитьМассивСтадийДерева();
	Если МассивСтадий.Количество() > 0 Тогда
		ИтоговаяДлительность = ИтоговаяДлительностьМассиваСтадий(МассивСтадий);
		Элементы.ДеревоСтадийСтадияДлительность.ТекстПодвала = Строка(ИтоговаяДлительность);
	Иначе
		Элементы.ДеревоСтадийСтадияДлительность.ТекстПодвала = "";
	КонецЕсли;
КонецПроцедуры		// РассчитатьИтоговуюДлительность()

&НаКлиенте
Процедура РаспределитьПропорционально(Команда)
	РаспределитьПропорционально_Сервер();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидМероприятия", Объект.ВидМероприятия);
	СтруктураОтбора.Вставить("СпособВыбораПоставщика", Объект.СпособВыбораПоставщика);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.СтадииМероприятий.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтадииМероприятий") Тогда
		ДобавитьСтадию_Сервер(ВыбранноеЗначение);
		РассчитатьИтоговуюДлительность();
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		// Неизвестный вариант. Пропускаем.
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если (ЗначениеЗаполнено(Параметры.ВидМероприятия)) И (НЕ ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		Объект.ВидМероприятия = Параметры.ВидМероприятия;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.Принадлежность) Тогда
		ТаблицаПринадлежность.Очистить();
		НоваяСтрока = ТаблицаПринадлежность.Добавить();
		НоваяСтрока.Контекст = Параметры.Принадлежность;
	КонецЕсли;
	ЗаполнитьСпискиВыбораНМ();
	ЗагрузитьСтадииВДерево();
	СчитатьПринадлежностьШаблона(Ложь);
	УправлениеДоступностью();
	ИмяСтратегическиеИнинциативы = "СтратегическиеИнинциативы";
	Если Метаданные.ФункциональныеОпции.Найти(ИмяСтратегическиеИнинциативы) <> Неопределено И ПолучитьФункциональнуюОпцию(ИмяСтратегическиеИнинциативы) = Ложь Тогда
		ИмяЭлемента = "Инициатива";
		Элементы.ВидМероприятия.СписокВыбора.Удалить(Элементы.ВидМероприятия.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ВидыМероприятий." + ИмяЭлемента)));
	КонецЕсли;
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияЦентрализованноеУправлениеЗакупками") Тогда
		ИмяЭлемента = "ЗакупочнаяПроцедура";
		Элементы.ВидМероприятия.СписокВыбора.Удалить(Элементы.ВидМероприятия.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ВидыМероприятий." + ИмяЭлемента)));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораНМ()
	НалоговыйМониторинг.ЗаполнитьСпискиВыбораВЭлементахУправления(Элементы.НаправлениеВыявленияРисков, "РегламентированноеУведомлениеКонтрольныеПроцедуры", "СпискиВыбора2020_1", "СписокНапрРиск");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьДеревоВСтадии(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВводИмениГруппы_Завершение(ВыбранноеЗначение, Параметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ДобавитьГруппу_Сервер(ВыбранноеЗначение);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить имя группы. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры		// ВводИмениГруппы_Завершение()	
	
&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	Оповещение = Новый ОписаниеОповещения("ВводИмениГруппы_Завершение", ЭтотОбъект);
    ПоказатьВводСтроки(Оповещение, НСтр("ru = 'Новая группа'"), НСтр("ru = 'Ввод наименования группы'"), 75, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийСтадияГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ГруппирующаяСтрока Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Строка"));
			Элемент.ВыбиратьТип = Ложь;
			Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.СтадииМероприятий"));
			Элемент.ВыбиратьТип = Ложь;
			Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;	
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ГруппирующаяСтрока Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Строка"));
			Элементы.ДеревоСтадийСтадияГруппа.ВыбиратьТип = Ложь;
			Элементы.ДеревоСтадийСтадияГруппа.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.СтадииМероприятий"));
			Элементы.ДеревоСтадийСтадияГруппа.ВыбиратьТип = Ложь;
			Элементы.ДеревоСтадийСтадияГруппа.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;	
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Попытка
		МассивПеретаскивания = ПараметрыПеретаскивания.Значение;
		Если МассивПеретаскивания.Количество() > 0 Тогда
			ПерваяСтрока = МассивПеретаскивания[0];
			НайденноеЗначение = ДеревоСтадий.НайтиПоИдентификатору(ПерваяСтрока);
			Выполнение = (НЕ НайденноеЗначение.ГруппирующаяСтрока);
		Иначе
			// Нет данных. Пропускаем.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось получить строку перетаскивания'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Попытка
		Если ТипЗнч(Строка) = Тип("Число") Тогда
			НайденнаяСтрока = ДеревоСтадий.НайтиПоИдентификатору(Строка);
			Если НайденнаяСтрока.ГруппирующаяСтрока Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
			Иначе
				СтандартнаяОбработка = Ложь;
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Попытка
		СтандартнаяОбработка = Ложь;
		ЭтаФорма.Модифицированность = Истина;
		// Поиск приемника и источника.
		НайденнаяСтрокаПриемник = ДеревоСтадий.НайтиПоИдентификатору(Строка);
		Если НайденнаяСтрокаПриемник.ГруппирующаяСтрока Тогда
			МассивПеретаскивания = ПараметрыПеретаскивания.Значение;
			Если МассивПеретаскивания.Количество() > 0 Тогда
				ИндексСтрокиПерестаскивания = МассивПеретаскивания[0];
				СтрокаПеретаскивания = ДеревоСтадий.НайтиПоИдентификатору(ИндексСтрокиПерестаскивания);
				Если СтрокаПеретаскивания <> Неопределено Тогда
					// Добавление новой строки в приёмник.
					НоваяСтрока = НайденнаяСтрокаПриемник.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПеретаскивания);
					// Удаление исходной строки.
					РодительИсходной = СтрокаПеретаскивания.ПолучитьРодителя();
					Если РодительИсходной = Неопределено Тогда
						ДеревоСтадий.ПолучитьЭлементы().Удалить(СтрокаПеретаскивания);		
					Иначе
						РодительИсходной.ПолучитьЭлементы().Удалить(СтрокаПеретаскивания);		
					КонецЕсли;	
				Иначе
					// Не удалось получить строку перетаскивания. Ничего не делаем.
				КонецЕсли;
			Иначе
				// Нет данных перетаскивания. Ничего не делаем.
			КонецЕсли	
		Иначе
			// Не перетаскиваем в негрупповую строку.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Перетаскивание не удалось: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеЭлементаСтадии_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    Если ВыбранноеЗначение <> Неопределено Тогда
		ДобавитьСтадию_Сервер(ВыбранноеЗначение);
		РассчитатьИтоговуюДлительность();
	Иначе
		ТекстСообщения = НСтр("ru = 'Стадия не выбрана. Добаление отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементСтадии(Команда)
	Если ЗначениеЗаполнено(Объект.ВидМероприятия) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидМероприятия", Объект.ВидМероприятия);
		СтруктураОтбора.Вставить("СпособВыбораПоставщика", Объект.СпособВыбораПоставщика);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		ОписаниеОЗакрытии = Новый ОписаниеОповещения("ДобавлениеЭлементаСтадии_Завершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.СтадииМероприятий.ФормаВыбора", СтруктураПараметров, , , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнен вид мерприятия. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийСтадияГруппаПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТипЗнч(ТекДанные.СтадияГруппа) = Тип("СправочникСсылка.СтадииМероприятий") Тогда
			ТекДанные.Стадия = ТекДанные.СтадияГруппа;
		Иначе
			// Групповая строка. Не изменяем.
		КонецЕсли;	
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.ГруппирующаяСтрока Тогда
				Отказ = Ложь;				
			Иначе
				Отказ = Истина;
				ДобавитьСтадию_Сервер();
				РассчитатьИтоговуюДлительность();
			КонецЕсли;	
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		// Разрешаем копировать существующие строки.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Объект.ВидМероприятия <> Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура Тогда
		СохранитьПринадлежностьМероприятий(ТекущийОбъект.Ссылка);
	Иначе
		// Для закупочной процедуры не используем таблицу Принадлежность.
	КонецЕсли;
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонОсновным(Команда)
	Если Не ЭтаФорма.Модифицированность Тогда
		УстановитьШаблонОсновным_Сервер();
	Иначе
		ТекстСообщения = НСтр("ru = 'Для установки шаблона основным требуется его записать. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыбораПоставщикаПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроцентВыполненияПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтадию(Команда)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Не ТекДанные.ГруппирующаяСтрока Тогда
			Если ЗначениеЗаполнено(ТекДанные.Стадия) Тогда
				ПоказатьЗначение(, ТекДанные.Стадия);
			Иначе
				ТекстСообщения = НСтр("ru = 'Стадия в строке таблицы не заполнена. Продолжение открытия стадии невозможно.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Выбрана группа стадий. Продолжение открытия стадии невозможно.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Строка стадии не выбрана. Продолжение открытия стадии невозможно.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоСтадийСтадияДлительность" Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если Не ТекДанные.ГруппирующаяСтрока Тогда
				Если ЗначениеЗаполнено(ТекДанные.Стадия) Тогда
					ПоказатьЗначение(, ТекДанные.Стадия);
				Иначе
					// Стадия в строке таблицы не заполнена. 
				КонецЕсли;
			Иначе
				// Выбрана группа стадий. 
			КонецЕсли;	
		Иначе
			// Строка стадии не выбрана.
		КонецЕсли;
	Иначе
		// Выполняем стандартную обработку.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	РазвернутьДерево();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПринадлежностьКонтекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.РеакцияНаРиск") Тогда
		ОткрытьФорму("Справочник.Риски.ФормаВыбора", , Элемент);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.КонтрольноеМероприятие") Тогда
		ОткрытьФорму("Справочник.Риски.ФормаВыбора", , Элемент);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.Инициатива") Тогда
		Имя = "Справочник.Цели.ФормаВыбора";
		ОткрытьФорму(Имя, , Элемент);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.ЗакупочнаяПроцедура") Тогда
		Имя = "Перечисление.СпособыВыбораПоставщика.ФормаВыбора";
		ОткрытьФорму(Имя, , Элемент);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.ПустаяСсылка") Тогда
		СтандартнаяОбработка = Истина;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вид мероприятия: %ВидМероприятия%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидМероприятия%", Строка(Объект.ВидМероприятия));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьСписокШаблоновМероприятий");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводственныйКалендарьПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеОчисткиСтадии_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСтадииПоУмолчанию_Сервер(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
		ЗаполнитьСтадииПоУмолчанию_Сервер(Ложь);
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда		
		// Пользователь отказался.
    Иначе
        // Неизвестный вариант. Ничего не делаем.
	КонецЕсли;
	РассчитатьИтоговуюДлительность();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтадииПоУмолчанию(Команда)
	Если Объект.Стадии.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'В шаблоне уже введены стадии. Очистить их перед добавлением новых?'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеОчисткиСтадии_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьСтадииПоУмолчанию_Сервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПриИзменении(Элемент)
	РассчитатьИтоговуюДлительность();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РассчитатьИтоговуюДлительность();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПослеУдаления(Элемент)
	РассчитатьИтоговуюДлительность();
КонецПроцедуры

&НаКлиенте
Процедура УчитываетсяВНалоговомМониторингеПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры
