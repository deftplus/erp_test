
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьРегламент(Сценарий, МеткаВремени) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК т
	|ГДЕ
	|	т.МеткаВремени = &МеткаВремени
	|	И т.Сценарий = &Сценарий
	|	И НЕ т.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("МеткаВремени", МеткаВремени);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда		
		Возврат ПустаяСсылка();
	Иначе 
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАктуальныйРегламент(Сценарий, МеткаВремени) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка,
	|	т.МеткаВремени
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК т
	|ГДЕ
	|	т.МеткаВремени <= &МеткаВремени
	|	И т.Сценарий = &Сценарий
	|	И НЕ т.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.МеткаВремени УБЫВ");
	
	Запрос.УстановитьПараметр("МеткаВремени", МеткаВремени);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда		
		Возврат ПустаяСсылка();
	Иначе 
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьРегламентКИК(Сценарий, МеткаВремени, ТаблицаИнвесторОбъектИнвестирования, ГруппаВидОтчета = Неопределено, Регламент = Неопределено) Экспорт

	РегламентСсылка = Регламент;
	Если Не ЗначениеЗаполнено(РегламентСсылка) Тогда		
		РегламентСсылка = ПолучитьРегламент(Сценарий, МеткаВремени);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегламентСсылка) Тогда
		
		Возврат СоздатьРегламент(
					Сценарий, 
					МеткаВремени, 
					ПолучитьДеревоКИК(ТаблицаИнвесторОбъектИнвестирования, МеткаВремени, Сценарий), 
					ГруппаВидОтчета
				);
	Иначе 
		
		ОбъектРегламент = РегламентСсылка.ПолучитьОбъект();
		
		ОбъектРегламент.МеткаВремени = МеткаВремени;
		ОбъектРегламент.Сценарий = Сценарий;
		ОбъектРегламент.РасчетЭффективныхДолей = Истина;
		ОбъектРегламент.Наименование = НСтр("ru = 'Расчет КИК'");
		
		Если ГруппаВидОтчета <> Неопределено Тогда
			ОбъектРегламент.ВидОтчета = ГруппаВидОтчета;
		КонецЕсли;
		
		РегламентыВызовСервера.ЗаполнитьОбъектПоДереву(ОбъектРегламент, ПолучитьДеревоКИК(ТаблицаИнвесторОбъектИнвестирования, МеткаВремени, Сценарий));
		
		Попытка
			ОбъектРегламент.Записать();
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось обновить регламент КИК <%1>: '");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона + ОписаниеОшибки(), РегламентСсылка));
			КонецЕсли;
			
			Возврат Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		КонецПопытки;
		
		Возврат ОбъектРегламент.Ссылка;
				
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьДеревоКИК(ТаблицаИнвесторОбъектИнвестирования, МеткаВремени, Сценарий)
	
	Дерево = ПолучитьДеревоСтруктураГруппы();
	
	КэшируемыеЗначения = Новый Структура;
	КэшируемыеЗначения.Вставить("Период", 	МеткаВремени);
	КэшируемыеЗначения.Вставить("Сценарий", Сценарий);
	КэшируемыеЗначения.Вставить("Регламент", Неопределено);
	КэшируемыеЗначения.Вставить("ОтношенияМатеринское", Справочники.ГруппыКонтрагентов.ПолучитьОтношенияКГруппе(Перечисления.ВидыОтношенийКГруппе.Материнское) );
		
	Для каждого СтрокаТаб Из ТаблицаИнвесторОбъектИнвестирования Цикл
		
		УзелИнвестор = Дерево.Строки.Найти(СтрокаТаб.Инвестор, "ОрганизационнаяЕдиница", Ложь);
		Если УзелИнвестор = Неопределено Тогда
						
			КэшируемыеЗначения.Вставить("ТекущийРодитель", 	Дерево);
									
			УзелИнвестор = Дерево.Строки.Добавить();
			УзелИнвестор.ОрганизационнаяЕдиница = СтрокаТаб.Инвестор;
			
			СтруктураДействий = Новый Структура("ЗаполнитьОбъектыИнвестирования,
										|ЗаполнитьДочерние,
										|ЗаполнитьВалюты,
										|ЗаполнитьЭффективнуюДолю,
										|ЗаполнитьОтношениеКГруппе");
	
			СтруктураДействий.Вставить("ЗаполнитьОбъектыИнвестирования", Новый Структура("Инвестор", СтрокаТаб.Инвестор));
			РегламентыКлиентСервер.ОбработатьСтрокуТЧ(УзелИнвестор, СтруктураДействий, КэшируемыеЗначения);
			
			КэшируемыеЗначения.Вставить("ТекущийРодитель", 	Дерево);			
			СтруктураДействий = Новый Структура("ЗаполнитьВалюты", Новый Структура("Инвестор,ОбновитьДочерние", СтрокаТаб.Инвестор, Истина));
			РегламентыКлиентСервер.ОбработатьСтрокуТЧ(УзелИнвестор, СтруктураДействий, КэшируемыеЗначения);			
		
		КонецЕсли;
							
	КонецЦикла;
	
	Возврат Дерево; 

КонецФункции

Функция СоздатьРегламент(Сценарий, МеткаВремени, Дерево, ГруппаВидОтчета = Неопределено)
	
	Регламент = СоздатьЭлемент();
	
	Регламент.МеткаВремени = МеткаВремени;
	Регламент.Сценарий = Сценарий;
	Регламент.РасчетЭффективныхДолей = Истина;
	Регламент.Наименование = Нстр("ru = 'Расчет КИК'");
	
	Если ГруппаВидОтчета <> Неопределено Тогда
		Регламент.ВидОтчета = ГруппаВидОтчета;
	КонецЕсли;
	
	РегламентыВызовСервера.ЗаполнитьОбъектПоДереву(Регламент, Дерево);
	
	Попытка
		Регламент.Записать();
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось создать регламент <%1>: '");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона + ОписаниеОшибки(), Регламент.Наименование));
		КонецЕсли;
		
		Возврат Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Регламент.Ссылка;

КонецФункции

Функция ПолучитьДеревоСтруктураГруппы()

	Дерево = Новый ДеревоЗначений;

	КолонкиИсточники = Новый Структура("
	|ТипОрганизационнойЕдиницы,
	|ОсновнаяВалюта,
	//|ДополнительныеВалюты,
	|ОрганизационнаяЕдиница,
	|ПометкаУдаления,
	|ВидОрганизационнойЕдиницы,
	|ОтношениеКГруппе,
	|ТолькоПросмотр,
	|КонсолидирующаяОрганизацияОтображение,
	|ЭффективнаяДоля,
	|ЯвляетсяКонсолидирующей,
	|ДоступностьДолиВладения,
	|ЭлиминирующаяОрганизация,
	|ОграничениеДоступа,
	|ЯвляетсяЦФО,
	|МетодИсключенияВГО,
	|СтатусИностраннойКомпании,
	|ИностранныйНалоговыйРезидент,
	|ИспользоватьВРегламентированномУчете");
	
	Для каждого КолонкаИсточник Из КолонкиИсточники Цикл
		Дерево.Колонки.Добавить(КолонкаИсточник.Ключ);
	КонецЦикла;
	
	Дерево.Колонки.Добавить("ДополнительныеВалюты", Новый ОписаниеТипов("СписокЗначений"));
	
	Возврат Дерево;
	
КонецФункции

Функция ОткрытьУопПоСценарию(Сценарий,ДатаСценария,Периодичность,ВерсияРегламента = Неопределено) Экспорт
	
	Если ВерсияРегламента = Неопределено Тогда 
		
		//Смотрим: какой регламент нужно применить по-умолчанию в свойствах сценария.
		//Если нет регламента по умолчанию - выходим.
		РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
		
		РегламентыПериоды.Сортировать("Периодичность,ДействуетС");
		
		Регламенты = РегламентыПериоды.НайтиСтроки(Новый Структура("Периодичность",Периодичность));
		
		Если Регламенты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТекущийРегламент = Неопределено;
		//Выбираем регламент, исходя из даты его актуальности
		Для Каждого Регламент Из Регламенты Цикл	
			Если ДатаСценария>=Регламент.ДействуетС Тогда	
				ТекущийРегламент = Регламент;	
			КонецЕсли;			
		КонецЦикла;	
		
		Если  ТекущийРегламент = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТекущийРегламент = ТекущийРегламент.Регламент;
		
	Иначе
		
		ТекущийРегламент = ВерсияРегламента;
		
	КонецЕсли;
	
	КоличествоПериодовРегламента = ТекущийРегламент.КоличествоПериодов;

	Если Сценарий.РежимПланирования = Перечисления.РежимыПланирования.ПланированиеНаИнтервал Тогда
		 ТаблицаРазбивкиПоУОП = ТаблицаРазбивкиПоУОП(Сценарий,ДатаСценария,Периодичность,КоличествоПериодовРегламента);		 
	Иначе	 
		Возврат Неопределено;
	КонецЕсли;		
		
	ТекСтрокаУОП = Неопределено;
	
	Для Каждого СтрУОП Из ТаблицаРазбивкиПоУОП Цикл	
		Если ДатаСценария>=СтрУОП.ДатаНачала И ДатаСценария<=СтрУОП.ДатаОкончания Тогда	
			 ТекСтрокаУОП = СтрУОП;		
		КонецЕсли;		
	КонецЦикла;	
	
	Если Не ТекСтрокаУОП = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаУОП.УправлениеПериодомСценария) Тогда
			
			//Получим предполагаемый период окончания
			ТаблицаРазбивкиПоУОПОкончание = ТаблицаРазбивкиПоУОП.Скопировать(Новый Структура("ИндексУОП",ТекСтрокаУОП.ИндексУОП));
			ТекСтрокаУОПОкончание         = ТаблицаРазбивкиПоУОПОкончание[ТаблицаРазбивкиПоУОПОкончание.Количество()-1];
			
			Если  НЕ ЗначениеЗаполнено(ТекСтрокаУОПОкончание.УправлениеПериодомСценария) Тогда
				
				НовыйДокумент=Документы.УправлениеПериодомСценария.СоздатьДокумент();
				НовыйДокумент.ВерсияОрганизационнойСтруктуры = ТекущийРегламент;
				НовыйДокумент.Сценарий=Сценарий;	
				
				НовыйДокумент.Дата = ТекущаяДата();
				НовыйДокумент.УстановитьНовыйНомер();
				
				НовыйДокумент.ПериодСценария				=ТекСтрокаУОП.Ссылка;
				НовыйДокумент.ПериодСценарияОкончание		=ТекСтрокаУОПОкончание.Ссылка;
				
				//НовыйДокумент.ДатаНачалаПроцесса=УправлениеОтчетамиУХ.ПолучитьДатуСоСмещением(ЭталонныйДокумент.ДатаНачалаПроцесса, Период.Периодичность, ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(Период.ДатаНачала,ЭталонныйДокумент.ПериодСценария.ДатаНачала,Период.Периодичность));
				
				Попытка	
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
					УправлениеПериодом =  НовыйДокумент.Ссылка; 	
					Возврат  УправлениеПериодом;
				Исключение
					
					СтрокаШаблона = НСтр("ru = 'Не удалось создать документ ""Управление периодом сценария"" для периода %1 и сценария %2'");
					
					Если ЗначениеЗаполнено(СтрокаШаблона) тогда
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекСтрокаУОП.Ссылка, Сценарий),,, СтатусСообщения.Внимание);
					КонецЕсли;
					
					Возврат Неопределено;	
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе		
			Возврат ТекСтрокаУОП.УправлениеПериодомСценария	
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецФункции

Функция ТаблицаРазбивкиПоУОП(Сценарий,ДатаСценария,Периодичность,КоличествоПериодовРегламента) Экспорт
	
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	Периоды_.Ссылка КАК Ссылка,
	                  |	Периоды_.ДатаНачала КАК ДатаНачала,
	                  |	Периоды_.ДатаОкончания КАК ДатаОкончания,
	                  |	0 КАК ИндексУОП,
	                  |	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	                  |ИЗ
	                  |	Справочник.Периоды КАК Периоды_
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                  |			СтатусыПериодовСценариев.Периоды КАК Периоды,
	                  |			СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	                  |		ИЗ
	                  |			РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	                  |		ГДЕ
	                  |			СтатусыПериодовСценариев.Сценарии = &Сценарий) КАК СтатусыПериодовСценариев
	                  |		ПО Периоды_.Ссылка = СтатусыПериодовСценариев.Периоды
	                  |ГДЕ
	                  |	Периоды_.Периодичность = &Периодичность
	                  |	И Периоды_.ДатаНачала >= &ДатаНачала
	                  |	И Периоды_.ДатаОкончания <= &ДатаОкончания
	                  |	И Периоды_.Произвольный = ЛОЖЬ
	                  |	И Периоды_.ПометкаУдаления = ЛОЖЬ";
	   
	   Запрос.УстановитьПараметр("Периодичность",Периодичность);
	    Запрос.УстановитьПараметр("Сценарий",Сценарий);

	   Запрос.УстановитьПараметр("ДатаНачала",НачалоГода(ДатаСценария));
	   Запрос.УстановитьПараметр("ДатаОкончания",КонецГода(ДобавитьМесяц(ДатаСценария,120)));   //Уопов на горизонт больше 10 лет не предвидится.
  
	   Результат = Запрос.Выполнить().Выгрузить();
	   
	   ИндексУОП 	= 1;
	   СчетчикУОП 	= 1;

	   Для Каждого СтрПериод Из Результат Цикл
		   
		   Если СчетчикУОП>КоличествоПериодовРегламента Тогда	   
			    ИндексУОП 	= ИндексУОП+1;
			    СчетчикУОП  = 1;
		   КонецЕсли;	   
		      
		   СчетчикУОП = СчетчикУОП+1;   
		   СтрПериод.ИндексУОП = ИндексУОП;
		   
	   КонецЦикла;	   
	   
	   Возврат Результат;
	  	
   КонецФункции

#КонецОбласти 

#Область Обновление

Процедура ЗаполнитьМетодИсключенияВГО() Экспорт

	ЗапросРегламенты = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регламент.Ссылка КАК Регламент,	
	|	Регламент.ОрганизационнаяЕдиницаРодитель КАК Консолидирующая
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК Регламент
	|ГДЕ
	|	Регламент.МетодИсключенияВГО = ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.ПустаяСсылка)
	|ИТОГИ ПО
	|	Регламент");
	
	ОтношенияМатеринские = Справочники.ГруппыКонтрагентов.ПолучитьОтношенияКГруппе(ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Материнское"));
	
	Если ОтношенияМатеринские.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоРегламенту = ЗапросРегламенты.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаПоРегламенту.Следующий() Цикл
		
		Объект = ВыборкаПоРегламенту.Регламент.ПолучитьОбъект();
		
		КэшируемыеЗначения = Новый Структура;
		КэшируемыеЗначения.Вставить("Регламент",	Объект.Ссылка);
		КэшируемыеЗначения.Вставить("Период", 		Объект.МеткаВремени);
		КэшируемыеЗначения.Вставить("Сценарий", 	Объект.Сценарий);
				
		ВыборкаПоКонсолидирующей = ВыборкаПоРегламенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПоКонсолидирующей.Следующий() Цикл
			
			Материнские = Новый Массив;
			
			Для каждого ТекущееОтношение Из ОтношенияМатеринские Цикл
				Отбор = Новый Структура("ОрганизационнаяЕдиницаРодитель,ОтношениеКГруппе", ВыборкаПоКонсолидирующей.Консолидирующая, ТекущееОтношение);
				Для каждого СтрокаМатеринская Из Объект.ОрганизационныеЕдиницы.НайтиСтроки(Отбор) Цикл
					Материнские.Добавить(СтрокаМатеринская.ОрганизационнаяЕдиница);
				КонецЦикла;				
			КонецЦикла;
						
			РеквизитыЗаполнитьОбъектыИнвестирования = Новый Структура;
			РеквизитыЗаполнитьОбъектыИнвестирования.Вставить("Инвестор", Материнские);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьОбъектыИнвестирования", РеквизитыЗаполнитьОбъектыИнвестирования);
			
			Кэш = РегламентыВызовСервера.ПолучитьКешируемыеЗначения(СтруктураДействий, КэшируемыеЗначения);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьМетодИсключенияВГО");
			
			КэшируемыеЗначения.Вставить("ОбъектыИнвестирования", 	Кэш.ОбъектыИнвестирования);
			
			Отбор.Удалить("ОтношениеКГруппе");//заполнить по всем строкам Консолидирующей
			РегламентыКлиентСервер.ОбработатьСтрокиТЧ(Объект.ОрганизационныеЕдиницы.НайтиСтроки(Отбор), СтруктураДействий, КэшируемыеЗначения);
						
		КонецЦикла; 
		
		ОбновлениеИнформационнойБазыБМ.ЗаписатьОбъект(Объект);		
		
	КонецЦикла; 	

КонецПроцедуры

Процедура ПометитьНаУдалениеПоступленияИнвестицийПоРегламенту() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеИнвестиций.Ссылка КАК Ссылка,
	|	ПоступлениеИнвестиций.УдалитьРегламент КАК УдалитьРегламент
	|ИЗ
	|	Документ.ПоступлениеИнвестиций КАК ПоступлениеИнвестиций
	|ГДЕ
	|	ПоступлениеИнвестиций.УдалитьРегламент <> ЗНАЧЕНИЕ(Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка)
	|	И НЕ ПоступлениеИнвестиций.ПометкаУдаления");
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл		
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецЕсли
