
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.МеткаВремени) Тогда
		Объект.МеткаВремени = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Объект.РасчетЭффективныхДолей = (Объект.Родитель.РасчетЭффективныхДолей = Истина);
		
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда	
			Объект.РежимМногопериодныхУОП = Истина;	
		КонецЕсли;
		
		ПодготовитьФормуНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			ЗаполнитьЗначенияСвойств(Объект, ЗначениеКопирования, "Примечание,ШаблонСверкиВГО,ШаблонПроцесса,МеткаВремени");
						
			Объект.ДополнительныеВалюты.Загрузить(ЗначениеКопирования.ДополнительныеВалюты.Выгрузить());
			Объект.СтруктураГруппы.Загрузить(ЗначениеКопирования.СтруктураГруппы.Выгрузить());
			Объект.ОрганизационныеЕдиницы.Загрузить(ЗначениеКопирования.ОрганизационныеЕдиницы.Выгрузить());
						
			ЗаполнитьРеквизитыФормыИзОбъекта(Параметры.ЗначениеКопирования);			
			
		КонецЕсли;
		
		РегламентыКлиентСервер.ОбновитьНаименованиеЗаголовок(Объект, ЭтаФорма);
			
		Объект.КоличествоПериодов = 1;
		
	Иначе	
		
		 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.НастройкаПериметра;
		
	КонецЕсли;
	
	СтруктураГруппыКолонки = УправлениеФормойУХ.ПолучитьСтрокуРеквизитовФормы(ЭтаФорма, "СтруктураГруппы");
		
	ИндексПоследнегоСостоянияСтруктурыГруппы = -1;
	
	УправлениеФормой(ЭтаФорма);
	ДобавитьУсловноеОформление();
	ОпределитьСпособВыбораШаблонаПроцесса();	
	
	Элементы.ИспользоватьПроцесс.Видимость = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	
	ОпределитьСвойстваВидовОтчетов();
		
	Если Не ЗначениеЗаполнено(Объект.Периодичность) Тогда
		 Объект.Периодичность = Перечисления.Периодичность.Месяц;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ИспользоватьРасширенныеНастройкиПериметра Тогда
		ВывестиСообщенияОбОтсутствииМатеринских();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		СкрытьРеквизитыШапки = Ложь;
	КонецЕсли;
	
	Если НЕ Объект.ИспользоватьРасширенныеНастройкиПериметра И СтруктураГруппы.ПолучитьЭлементы().Количество() = 0 Тогда
		
		МассивОрганизаций = Новый Массив;
		КэшПеретаскивания = ЗаполнитьПериметрПоВсемОрганизациям(МассивОрганизаций);
		
		Если МассивОрганизаций.Количество()>0 Тогда
			
			ПараметрыПеретаскивания = Новый Структура;
			ПараметрыПеретаскивания.Вставить("Действие",			ДействиеПеретаскивания.Перемещение);
			ПараметрыПеретаскивания.Вставить("ДопустимыеДействия",	ДопустимыеДействияПеретаскивания.КопированиеИПеремещение);
			ПараметрыПеретаскивания.Вставить("Значение",			МассивОрганизаций);
			
			КэшПеретаскивания.Вставить("ЗаполнитьОтношениеКГруппе",	ЗаполнитьОтношениеКГруппе(ЭтотОбъект));
			КэшПеретаскивания.Вставить("Сценарий",					Объект.Сценарий);
			КэшПеретаскивания.Вставить("Период",					Объект.МеткаВремени);
			
			РегламентыКлиентСервер.ДополнитьСтруктуруГруппы(
				СтруктураГруппы, Неопределено, ПараметрыПеретаскивания, КэшПеретаскивания);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписатьВФорме" Тогда
		Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ТекущийОбъект.РежимМногопериодныхУОП  ИЛИ НЕ ЗначениеЗаполнено(ТекущийОбъект.КоличествоПериодов) Тогда
		
		ТекущийОбъект.КоличествоПериодов = 1;
		
	КонецЕсли;	
	
	РегламентыВызовСервера.ЗаполнитьОбъектПоДереву(ТекущийОбъект, РеквизитФормыВЗначение("СтруктураГруппы"));	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОпределитьСпособВыбораШаблонаПроцесса();
	Оповестить("ИзмененаВерсия", Объект.Ссылка, ВладелецФормы);	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	РегламентыКлиентСервер.ОбновитьНаименованиеЗаголовок(Объект, ЭтаФорма);
	
	Если НЕ Объект.ИспользоватьПроцесс И ЗначениеЗаполнено(СвязанныйШаблонПроцесса) тогда
		ОтключитьСвязанныйПроцесс();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		ВывестиСообщенияОбОтсутствииМатеринских(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоставИнвесторов(Команда)
	
	ТекущаяСтрока = Элементы.СтруктураГруппы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Сценарий, ДатаАктуальности, СформироватьПриОткрытии", 
									Объект.Сценарий, Объект.МеткаВремени, Истина);
									
	Имя = "Обработка.СтруктураВладения.Форма";
	ОткрытьФорму(Имя, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоследнееИзменение(Команда)
	
	ВосстановитьВерсиюРедактирования(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПоследнееИзменение(Команда)
	
	ВосстановитьВерсиюРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	РегламентыКлиентСервер.ПереместитьСтрокуСтруктуруГруппы(СтруктураГруппы, Элементы.СтруктураГруппы.ТекущиеДанные, -1);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	РегламентыКлиентСервер.ПереместитьСтрокуСтруктуруГруппы(СтруктураГруппы, Элементы.СтруктураГруппы.ТекущиеДанные, 1);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОрганизационныеЕдиницы(Команда)
	СтруктураГруппы.ПолучитьЭлементы().Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПодборОрганизаций(Команда)
	
	Элементы.СтруктураГруппыПодборОрганизаций.Пометка = Не Элементы.СтруктураГруппыПодборОрганизаций.Пометка;
	ОбновитьВидимостьСписокОрганизаций(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУтвержденные(Команда)
	Утвержденные = РегламентыВызовСервера.ПолучитьУтвержденныеОтчеты(Объект.Ссылка);
	ОткрытьФорму("Документ.НастраиваемыйОтчет.ФормаСписка", Новый Структура("Ключ", Утвержденные));
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСИерархией(Команда)
	
	//Подготовим КэшПеретаскивания, используемый как источник для заполнения приемника
	ОрганизацииИсточники = Элементы.ОрганизационныеЕдиницы.ВыделенныеСтроки;	
	КэшПеретаскивания = РегламентыВызовСервера.ПолучитьСтруктуруПеретаскивания(
		ОрганизацииИсточники, КэшируемыеЗначения.ШаблонУзла, Объект.Сценарий, Объект.МеткаВремени);
	
	ВыбранныйЭлемент = Новый Структура("Значение", Нстр("ru = 'Копировать с иерархией'"));	
	ДополнительныеПараметры = Новый Структура("Строка,ПараметрыПеретаскивания", Элементы.СтруктураГруппы.ТекущаяСтрока, Неопределено);
	
	Подключаемый_Перетаскивание(ВыбранныйЭлемент, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПериметрыПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьРасширенныеНастройкиПериметра Тогда
		
		СтатусДочернее = РегламентыВызовСервера.ПолучитьСтатусДочернее();
		
		ЗаполнитьСтатусРекурсивно(СтруктураГруппы, СтатусДочернее);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатусРекурсивно(УзелРодитель, СтатусДочернее)
	
	Для каждого Узел Из УзелРодитель.ПолучитьЭлементы() Цикл
		
		Узел.ЭффективнаяДоля = 100;
		Узел.ОтношениеКГруппе = СтатусДочернее;
		
		ЗаполнитьСтатусРекурсивно(Узел, СтатусДочернее);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РасчетЭффективныхДолейПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВГОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроцессПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура РежимМногопериодныхУОППриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилаЗаполнения(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда	
		 ЭтаФорма.Записать();	
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ВерсияОрганизационнойСтруктуры", Объект.Ссылка);
	ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМатрицуПолномочий(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда	
		 ЭтаФорма.Записать();	
	КонецЕсли;	
	
	ПараметрыФормы = ПолучитьСтруктуруОткрытияМатрицыПолномочий();
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМатрицуПолномочийПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНастройкуРегламентаПоОрганизациямПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлемента_СтруктураГруппы

&НаКлиенте
Процедура СтруктураГруппыПриИзменении(Элемент)
	
	ДоступностьКнопокПеремещения();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыПередНачаломДобавления(Элемент, Отказ, ФиксированнаяСтруктураКопирование, Родитель, Группа)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Удаление не возможно!
		|На строку наложена блокировка изменения из-за наличия подготовленого экземпляра отчета.'"));
		Возврат;
	КонецЕсли;
	
	Если РегламентыКлиентСервер.ЕстьПодчиненныеТолькоПросмотр(Элемент.ТекущиеДанные) Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Удаление не возможно!
		|На подчиненную строку наложена блокировка изменения из-за наличия подготовленого экземпляра отчета.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Пока НЕ ТекущийРодитель = Неопределено Цикл
		Если ТекущийРодитель.ТолькоПросмотр Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Удаление не возможно!
			|На вышестоящую строку наложена блокировка изменения из-за наличия подготовленого экземпляра отчета.'"));
			Возврат;
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Модифицированность = Истина;	
	СохранитьВерсиюРедактирования();
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();//	
	
	РегламентыКлиентСервер.УдалитьСтрокуСтруктурыГруппы(СтруктураГруппы, ТекущаяСтрока);
	ДоступностьКнопокПеремещения();
	
	Если ТекущийРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("ЗаполнитьЯвляетсяКонсолидирующей, ЗаполнитьКартинкуСтрок");
	РегламентыКлиентСервер.ОбработатьСтрокуТЧ(ТекущийРодитель, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	// перетаскивание внутри дерева
	КэшПеретаскивания = РегламентыКлиентСервер.ПолучитьЗначениеПеретаскивания(ПараметрыПеретаскивания.Значение, СтруктураГруппы, КэшируемыеЗначения.ШаблонУзла);
	КэшПеретаскивания.Вставить("ИдентификаторыИсходныхУзлов", 	ПараметрыПеретаскивания.Значение);
	КэшПеретаскивания.Вставить("ТипИсточника", 					"СтруктураГруппы");
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;	
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Перем ТекстОтказа;
	
	СтандартнаяОбработка = Ложь;
	
	Если (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")) 
		И ПараметрыПеретаскивания.Значение.Количество() Тогда
		
		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Организации") Тогда 
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
			КэшПеретаскивания = РегламентыВызовСервера.ПолучитьСтруктуруПеретаскивания(
				ПараметрыПеретаскивания.Значение, КэшируемыеЗначения.ШаблонУзла, Объект.Сценарий, Объект.МеткаВремени);
			КэшПеретаскивания.Вставить("ТипИсточника", "СписокОрганизаций");			
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(КэшПеретаскивания) <> Тип("Структура") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		                      
   
	КонецЕсли;
		
	Если ТолькоПросмотр Тогда                                               
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Состояние(Нстр("ru = 'Редактирование регламента не доступно'"));
		Возврат;   
	КонецЕсли;
		
	Если ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Найти(Строка) <> Неопределено Тогда
		Состояние(Нстр("ru = 'Не допускается совпадение консолидирующей и консолидируемой организации'"));
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

	ПроверкаПеретаскивания = РегламентыКлиентСервер.ПроверкаПеретаскивания(СтруктураГруппы, КэшПеретаскивания, Строка, ТекстОтказа);
	
	Если  НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда	
		ПроверкаПеретаскивания = Строка = Неопределено;		
	КонецЕсли;
	
	Если Не ПроверкаПеретаскивания Тогда
		
		Если ЗначениеЗаполнено(ТекстОтказа) Тогда
			Состояние(ТекстОтказа);		
		КонецЕсли;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
		
	Если КэшПеретаскивания.ТипИсточника = "СтруктураГруппы" Тогда
		
		ДоступноКопирование = Истина;
		Для каждого УзелПервогоУровня Из КэшПеретаскивания.Дерево Цикл
			Если УзелПервогоУровня.ЭлиминирующаяОрганизация Тогда
				ДоступноКопирование = Ложь;
			КонецЕсли;		
		КонецЦикла;		
		
		Ответы = Новый СписокЗначений();
		Если ДоступноКопирование Тогда
			Ответы.Добавить(ДействиеПеретаскивания.Копирование);
		КонецЕсли;		
		Ответы.Добавить(ДействиеПеретаскивания.Перемещение);
		Ответы.Добавить(ДействиеПеретаскивания.Отмена);
		
		ДопПараметры = Новый Структура("Строка, ПараметрыПеретаскивания", Строка, ПараметрыПеретаскивания);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_Перетаскивание", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзМеню(Оповещение, Ответы);
		
	Иначе	
		
		ЕстьИерархия = (КэшПеретаскивания.ОрганизацииИсточники.Количество() <> КэшПеретаскивания.Дерево.Количество());
		
		Ответы = Новый СписокЗначений();
		Если ЕстьИерархия Тогда
			Ответы.Добавить(Нстр("ru = 'Копировать с иерархией'"));
			Ответы.Добавить(Нстр("ru = 'Копировать без иерархии'"));
		Иначе 
			Ответы.Добавить(Нстр("ru = 'Копировать'"));	
		КонецЕсли;		
		
		Ответы.Добавить(ДействиеПеретаскивания.Отмена);
		
		ДопПараметры = Новый Структура("Строка, ПараметрыПеретаскивания", Строка, ПараметрыПеретаскивания);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_Перетаскивание", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзМеню(Оповещение, Ответы);		
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Перетаскивание(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныйЭлемент = Неопределено) Или (ВыбранныйЭлемент.Значение = ДействиеПеретаскивания.Отмена) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = НСтр("ru = 'Копировать без иерархии'") Тогда //очистим иерархию		
		Для каждого УзелИсточник Из КэшПеретаскивания.Дерево Цикл			
			УзелИсточник.Строки.Очистить();		
		КонецЦикла;		
	КонецЕсли;	
	
	СохранитьВерсиюРедактирования();
	
	Модифицированность = Истина;
	
	ИдентификаторСтрокиПриемника = ДополнительныеПараметры.Строка;
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	
	КэшПеретаскивания.Вставить("ЗаполнитьОтношениеКГруппе", ЗаполнитьОтношениеКГруппе(ЭтотОбъект));
	КэшПеретаскивания.Вставить("Сценарий", 					Объект.Сценарий);
	КэшПеретаскивания.Вставить("Период", 					Объект.МеткаВремени);
	
	РегламентыКлиентСервер.ДополнитьСтруктуруГруппы(
		СтруктураГруппы, ИдентификаторСтрокиПриемника, ПараметрыПеретаскивания, КэшПеретаскивания);
	
	КэшПеретаскивания = Неопределено;
	
	Если ВыбранныйЭлемент.Значение = ДействиеПеретаскивания.Перемещение Тогда		
		Для Каждого УдаляемыйИдентификатор Из ПараметрыПеретаскивания.Значение Цикл			
			РегламентыКлиентСервер.УдалитьСтрокуСтруктурыГруппы(
				СтруктураГруппы, СтруктураГруппы.НайтиПоИдентификатору(УдаляемыйИдентификатор));			
		КонецЦикла;		
	КонецЕсли;
	
	ДоступностьКнопокПеремещения();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовЭлемента_СтруктураГруппы

&НаСервере
Функция ПолучитьМассивВалют(ОсновнаяВалюта, ДополнительныеВалюты)

	МассивВалют = Новый Массив;
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) тогда		
		МассивВалют.Добавить(ОсновнаяВалюта);
	КонецЕсли;
	
	ВыборкаВалют = Справочники.Валюты.Выбрать();
	
	Пока ВыборкаВалют.Следующий() Цикл
		Если ВыборкаВалют.Ссылка <> ОсновнаяВалюта
			И ДополнительныеВалюты.НайтиПоЗначению(ВыборкаВалют.Ссылка) = неопределено тогда
			
			МассивВалют.Добавить(ВыборкаВалют.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВалют;
	
КонецФункции

&НаКлиенте
Процедура СтруктураГруппыОсновнаяВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СтруктураГруппы.ТекущиеДанные;	
	ОсновнаяВалюта = ТекущиеДанные.ОсновнаяВалюта;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивВалют(ОсновнаяВалюта, ТекущиеДанные.ДополнительныеВалюты));
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) тогда		
		Если Элемент.ТекстРедактирования = "" тогда   //нужно для отображения текущего значения в ячейке
			ТекущиеДанные.ОсновнаяВалюта = ОсновнаяВалюта;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокВалют()
	
	МассивЗначений = Новый Массив;
	ВыборкаВалюты = Справочники.Валюты.Выбрать();
	Пока ВыборкаВалюты.Следующий() Цикл
		МассивЗначений.Добавить(ВыборкаВалюты.Ссылка);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

&НаСервере
Функция ПоказатьВыборВалют()
	
	ТаблицаВалют = Новый ТаблицаЗначений();
	ТаблицаВалют.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта");
	//ТаблицаВалют.ВыбратьСтроку("Дополнительные валюты");
	
	НС = ТаблицаВалют.Добавить();
	НС.Валюта = Справочники.Валюты.НайтиПоНаименованию("USD");
	//возврат ТаблицаВалют.ВыгрузитьКолонку("Валюта");
	
	СЗ = Новый СписокЗначений();
	СЗ.ЗагрузитьЗначения(ТаблицаВалют.ВыгрузитьКолонку("Валюта"));
	
	возврат СЗ;
	
КонецФункции

&НаКлиенте
Процедура СтруктураГруппыДополнительныеВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОбработатьНачалоВыбораДополнительныхВалют(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияВыбораТипа(ЗначениеВыбора, ДопПараметры) Экспорт
// Процедура  обработки оповещений должна быть экспортной, должна иметь как минимум 2 параметра
	//ТипЗагрузкиФорма = ЗначениеВыбора;
	//Если ЗначениеВыбора = "'Реализация товаров' в 'Поступление товаров'" Тогда
	//    Объект.ТипЗагрузки = 1;
	//ИначеЕсли ЗначениеВыбора = "'Поступление товаров' в 'Реализация товаров'" Тогда
	//    Объект.ТипЗагрузки = 2;
	//Иначе	
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыДополнительныеВалютыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	ОбработатьВыборДополнительныхВалют(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Возвращает ссылку на справочник Документы БД с 
// наименование НастраиваемыйОтчет
&НаСервереБезКонтекста
Функция ПолучитьДокументБдПоНаименованию(НаименованиеВход)
	РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию(НаименованиеВход);
	Возврат РезультатФункции;
КонецФункции

#Область ОбработчикиВидимостиДоступности

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	ЕстьОграничениеДоступа = Форма.ЕстьОграничениеДоступа;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Форма.ТолькоПросмотр = РегламентыВызовСервера.ТолькоПросмотрВерсииРегламента(Объект.Ссылка);
	КонецЕсли;
		
	Элементы.СтруктураГруппы.ТолькоПросмотр = ЕстьОграничениеДоступа;	
	Элементы.РедактированиеЗапрещено.Видимость = Форма.ТолькоПросмотр;
	Элементы.СтруктураГруппы.РазрешитьНачалоПеретаскивания = НЕ ЕстьОграничениеДоступа И НЕ Форма.ТолькоПросмотр;
	Элементы.Группа_КнопкиВернутьОтменить.Доступность = НЕ Форма.ТолькоПросмотр;
	ОбновитьВидимостьСписокОрганизаций(Форма);
	
	Элементы.СтруктураГруппыЭффективнаяДоля.ТолькоПросмотр = Объект.РасчетЭффективныхДолей;
	Элементы.СтруктураГруппыГруппаКонтрагента.ТолькоПросмотр = Объект.РасчетЭффективныхДолей;
	
	Элементы.ОбъектДата.ТолькоПросмотр = НЕ Объект.РасчетЭффективныхДолей;
	Элементы.ОбъектСценарий.ТолькоПросмотр = НЕ Объект.РасчетЭффективныхДолей;
	
	Если Форма.СтруктураГруппы.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Элементы.СтруктураГруппыКоманднаяПанельПереместитьВверх.Доступность = Ложь;
		Элементы.СтруктураГруппыКоманднаяПанельПереместитьВниз.Доступность = Ложь;
		Элементы.СтруктураГруппыКонтекстноеМенюПереместитьВверх.Доступность = Ложь;
		Элементы.СтруктураГруппыКонтекстноеМенюПереместитьВниз.Доступность = Ложь;
		
	Иначе 
		
		Элементы.СтруктураГруппыКоманднаяПанельПереместитьВверх.Доступность = Истина;
		Элементы.СтруктураГруппыКоманднаяПанельПереместитьВниз.Доступность = Истина;
		Элементы.СтруктураГруппыКонтекстноеМенюПереместитьВверх.Доступность = Истина;
		Элементы.СтруктураГруппыКонтекстноеМенюПереместитьВниз.Доступность = Истина;
				
	КонецЕсли;
			
	Элементы.ГруппаДатаСценарий.Видимость 						= Объект.РасчетЭффективныхДолей;
	Элементы.ГруппаВГОобщая.Видимость 							= Объект.ИспользоватьВГО;
	Элементы.ГруппаДатаСценарий.Видимость 						= Объект.РасчетЭффективныхДолей;
	Элементы.ГруппаШаблонПроцесса.Видимость 					= Объект.ИспользоватьПроцесс;
    Элементы.РасчетДолей.Видимость 								= Объект.ИспользоватьРасширенныеНастройкиПериметра;

	Элементы.СтруктураГруппыЭффективнаяДоля.Видимость           = Объект.ИспользоватьРасширенныеНастройкиПериметра;
	Элементы.СтруктураГруппыГруппаКонтрагента.Видимость         = Объект.ИспользоватьРасширенныеНастройкиПериметра;
	Элементы.СтруктураГруппыВидОрганизационнойЕдиницы.Видимость = Объект.ИспользоватьРасширенныеНастройкиПериметра;
	Элементы.СтруктураГруппыМетодИсключенияВГО.Видимость        = Объект.ИспользоватьРасширенныеНастройкиПериметра;
	
	Элементы.СтруктураГруппыЗаполнить.Видимость       			 = Объект.РасчетЭффективныхДолей;
	Элементы.ФормаСоставИнвесторов.Видимость       			 	 = Объект.ИспользоватьРасширенныеНастройкиПериметра;
	
	ЭлементИнвестиции = Элементы.Найти("СтруктураГруппыСправочникВерсииРегламентовПодготовкиОтчетностиИнвестиции");
	Если ЭлементИнвестиции <> Неопределено Тогда //БМ, РЛС
		ЭлементИнвестиции.Видимость	= Объект.ИспользоватьРасширенныеНастройкиПериметра;
	КонецЕсли;
	
	Элементы.КоличествоПериодов.Доступность                     = Объект.РежимМногопериодныхУОП;
	Если НЕ Объект.РежимМногопериодныхУОП Тогда
		 Объект.КоличествоПериодов = 1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьСписокОрганизаций(Форма)
	
	ДоступенСписокОрганизаций = НЕ Форма.ЕстьОграничениеДоступа И НЕ Форма.ТолькоПросмотр;
	
	Если ДоступенСписокОрганизаций Тогда		
		Форма.Элементы.СтруктураГруппыПодборОрганизаций.Видимость = ДоступенСписокОрганизаций;
		Форма.Элементы.Группа_ОрганизационныеЕдиницы.Видимость = Форма.Элементы.СтруктураГруппыПодборОрганизаций.Пометка;		
	Иначе 
		Форма.Элементы.Группа_ОрганизационныеЕдиницы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопокПеремещения()
	
	ДоступностьПеремещения = Неопределено;
	
	Если СтруктураГруппы.ПолучитьЭлементы().Количество() Тогда
		Если НЕ Элементы.СтруктураГруппыКоманднаяПанельПереместитьВверх.Доступность Тогда
			ДоступностьПеремещения = Истина;
		КонецЕсли;
	Иначе
		Если Элементы.СтруктураГруппыКоманднаяПанельПереместитьВверх.Доступность Тогда
			ДоступностьПеремещения = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДоступностьПеремещения = Неопределено Тогда
		Элементы.СтруктураГруппыКоманднаяПанельПереместитьВверх.Доступность = ДоступностьПеремещения;
		Элементы.СтруктураГруппыКоманднаяПанельПереместитьВниз.Доступность = ДоступностьПеремещения;
		Элементы.СтруктураГруппыКонтекстноеМенюПереместитьВверх.Доступность = ДоступностьПеремещения;
		Элементы.СтруктураГруппыКонтекстноеМенюПереместитьВниз.Доступность = ДоступностьПеремещения;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиПервоначальногоЗаполненияДанных

&НаСервере
Процедура ЗаполнитьРеквизитыФормыИзОбъекта(ОбъектВерсияРегламента)
	
	ДеревоВерсии = Неопределено;
	
	ДатаСреза = ТекущаяДата();
	
	РасширениеБизнесЛогикиУХ.ВерсииРегламентов_ПолучитьСтруктуруГруппыВерсии(Объект, КонецДня(Объект.МеткаВремени), Объект.Сценарий, Объект.МеткаВремени, ДеревоВерсии, ОбъектВерсияРегламента.Ссылка);

	ЗначениеВДанныеФормы(ДеревоВерсии, СтруктураГруппы);
	
	ЕстьОграничениеДоступа = ДеревоВерсии.Строки.Найти(Истина, "ОграничениеДоступа", Истина) <> Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСохраненияВосстановленияДанныхОрганизационнойСтруктуры

&НаКлиенте
Процедура  ИзвлечьСтруктуруТекущейВерсии(Структура)	
	УправлениеФормойКлиентСерверУХ.РаспаковатьДанныеФормыДерево(Структура, СтруктураГруппы, Элементы.СтруктураГруппы);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруТекущейВерсии()
	Возврат УправлениеФормойКлиентСерверУХ.УпаковатьДанныеФормыДерево(СтруктураГруппы, СтруктураГруппыКолонки, Элементы.СтруктураГруппы);	
КонецФункции

&НаКлиенте                                                     
Процедура СохранитьВерсиюРедактирования()
	
	Если НЕ ИндексПоследнегоСостоянияСтруктурыГруппы = -1 Тогда
		Для Индекс = ИндексПоследнегоСостоянияСтруктурыГруппы По СписокСостоянийСтруктурыГруппы.Количество()-1 Цикл
			СписокСостоянийСтруктурыГруппы.Удалить(ИндексПоследнегоСостоянияСтруктурыГруппы);
		КонецЦикла;
	КонецЕсли;
	
	ИндексПоследнегоСостоянияСтруктурыГруппы = -1;
	
	СписокСостоянийСтруктурыГруппы.Добавить(ПолучитьСтруктуруТекущейВерсии());
	
	Элементы.КнопкаОтменитьПосленееИзменение.Доступность = Истина;
	Элементы.КнопкаВернутьПоследнееИзменение.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВерсиюРедактирования(Направо = Неопределено)
	
	Удалять = Направо = Неопределено;
		
	Если ИндексПоследнегоСостоянияСтруктурыГруппы = -1 Тогда
		Если НЕ Удалять Тогда
			СохранитьВерсиюРедактирования();
			НовыйИндекс = СписокСостоянийСтруктурыГруппы.Количество() - 2;
		Иначе
			НовыйИндекс = СписокСостоянийСтруктурыГруппы.Количество() - 1;
		КонецЕсли;
	Иначе
		Если Направо Тогда
			НовыйИндекс = ИндексПоследнегоСостоянияСтруктурыГруппы + 1;
		Иначе
			НовыйИндекс = ИндексПоследнегоСостоянияСтруктурыГруппы - 1;
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоследнегоСостоянияСтруктурыГруппы = -1;
	
	Если НовыйИндекс >= 0 Тогда
		
	КонецЕсли;	
	
	ИзвлечьСтруктуруТекущейВерсии(СписокСостоянийСтруктурыГруппы.Получить(НовыйИндекс).Значение);
	
	ЭтоПоследнееИзменение = НовыйИндекс = СписокСостоянийСтруктурыГруппы.Количество()-1;
	
	Если ЭтоПоследнееИзменение ИЛИ Удалять Тогда
		СписокСостоянийСтруктурыГруппы.Удалить(НовыйИндекс);
	Иначе
		ИндексПоследнегоСостоянияСтруктурыГруппы = НовыйИндекс;
	КонецЕсли;
	
	Элементы.КнопкаОтменитьПосленееИзменение.Доступность = НЕ НовыйИндекс = 0;
	Элементы.КнопкаВернутьПоследнееИзменение.Доступность = НЕ ЭтоПоследнееИзменение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияВалютОрганизационнойСтруктуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораДополнительныхВалют(Элемент)
	
	ТекущиеДанные = Элементы.СтруктураГруппы.ТекущиеДанные;
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.ЗагрузитьЗначения(ТекущиеДанные.ДополнительныеВалюты.ВыгрузитьЗначения());
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДополнительныеВалюты", СписокВалют);
	ПараметрыОткрытия.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрыОткрытия.Вставить("ОсновнаяВалюта", ТекущиеДанные.ОсновнаяВалюта);
		
	ОткрытьФорму("Справочник.ВерсииРегламентовПодготовкиОтчетности.Форма.ПодборВалютСписок", 
		ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДополнительныхВалют(Элемент, ВыбранноеЗначение)
	
	СтрокаИсточник = СтруктураГруппы.НайтиПоИдентификатору(ВыбранноеЗначение.ИдентификаторСтроки);
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник.ДополнительныеВалюты.Очистить();

	Для Каждого Элемент Из ВыбранноеЗначение.ДополнительныеВалюты Цикл				
		СтрокаИсточник.ДополнительныеВалюты.Добавить(Элемент.Валюта);			
	КонецЦикла;
	
	КэшируемыеЗначения.Вставить("СтруктураГруппы",	СтруктураГруппы);
	КэшируемыеЗначения.Вставить("Регламент",		Объект.Ссылка);
	КэшируемыеЗначения.Вставить("Период", 			Объект.МеткаВремени);
	КэшируемыеЗначения.Вставить("Сценарий", 		Объект.Сценарий);
	
	СтруктураДействий = Новый Структура("ЗаполнитьВалюты", Новый Структура("ОбновитьДочерние", Истина));
	РегламентыКлиентСервер.ОбработатьСтрокуТЧ(СтрокаИсточник, СтруктураДействий, КэшируемыеЗначения);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПрочие

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)

	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Если Объект.Родитель.Пустая() Тогда
			Объект.Наименование = "Регламент";
		Иначе 
			Объект.Наименование = Объект.Родитель.Наименование;
		КонецЕсли;			
	КонецЕсли;
		
	КэшируемыеЗначения = Новый Структура;	
	КэшируемыеЗначения.Вставить("ТипыОрганизаций", 			МСФОВызовСервераУХ.ПолучитьСтруктуруСоЗначениямиПеречисления("ТипыОрганизационныхЕдиниц"));
	КэшируемыеЗначения.Вставить("РасчетЭффективныхДолей",	Объект.РасчетЭффективныхДолей);
	
	ОтношенияМатеринское = Справочники.ГруппыКонтрагентов.ПолучитьОтношенияКГруппе(Перечисления.ВидыОтношенийКГруппе.Материнское);	
	КэшируемыеЗначения.Вставить("ОтношенияМатеринское", ОтношенияМатеринское);
	КэшируемыеЗначения.Вставить("ОтношенияКГруппе", РегламентыВызовСервера.ПолучитьОсновныеОтношенияКГруппе());
	
	ШаблонУзла = Новый Структура;
	Для каждого КолонкаДерева Из РеквизитФормыВЗначение("СтруктураГруппы").Колонки Цикл
		ШаблонУзла.Вставить(КолонкаДерева.Имя);	
	КонецЦикла;	
	КэшируемыеЗначения.Вставить("ШаблонУзла", ШаблонУзла);	
	
	ЗаполнитьРеквизитыРасчетаЭффективныхДолей();
	
	ЗаполнитьРеквизитыФормыИзОбъекта(Объект);
	РегламентыКлиентСервер.ОбновитьНаименованиеЗаголовок(Объект, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРасчетаЭффективныхДолей()
	Если Не ЗначениеЗаполнено(Объект.МеткаВремени) И Объект.РасчетЭффективныхДолей Тогда
		Объект.МеткаВремени = ТекущаяДата();
	КонецЕсли;

	Если Объект.Сценарий.Пустая() И Объект.РасчетЭффективныхДолей Тогда
		
		Объект.Сценарий = Константы.СценарийМСФО.Получить();
		Если Объект.Сценарий.Пустая() Тогда
			Объект.Сценарий = Справочники.Сценарии.Факт;
		КонецЕсли;
		
	КонецЕсли;	
	КэшируемыеЗначения.Вставить("МеткаВремени", 			Объект.МеткаВремени);
	КэшируемыеЗначения.Вставить("Сценарий", 				Объект.Сценарий);
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление()
	
	СписокОтношений = Новый СписокЗначений;
	СписокОтношений.ЗагрузитьЗначения(КэшируемыеЗначения.ОтношенияМатеринское);
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	ТиповыеОтчетыУХ.ДобавитьОтбор(
						ЭлементОформления.Отбор, 
						"СтруктураГруппы.ОтношениеКГруппе",
						СписокОтношений, 
						ВидСравненияКомпоновкиДанных.ВСписке,
						Ложь);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаТолькоПросмотр);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Материнское предприятие'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СтруктураГруппыГруппаКонтрагентаВидОтношенияКГруппе");
	
	ЭлементОформления.Использование = Истина;					
						
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущаяСтрока.ЯвляетсяКонсолидирующей Тогда
		Элементы.СтруктураГруппыГруппаКонтрагента.ОграничениеТипа = Новый ОписаниеТипов("Булево");
	Иначе
		Элементы.СтруктураГруппыГруппаКонтрагента.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ГруппыКонтрагентов");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыЭффективнаяДоляПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СтруктураГруппы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель =  ТекущаяСтрока.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	КонсолидирующаяОрганизация = СтрокаРодитель.ОрганизационнаяЕдиница;
	
	Если Не ЗначениеЗаполнено(КонсолидирующаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ОтношениеКГруппе = РегламентыКлиентСервер.ПолучитьОтношениеКГруппеПоДоле(
										ТекущаяСтрока.ЭффективнаяДоля, КэшируемыеЗначения.ОтношенияКГруппе);
										
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМетодИсключенияВГО");
	
	КэшируемыеЗначения.Вставить("Регламент",	Объект.Ссылка);
	КэшируемыеЗначения.Вставить("Период", 		Объект.МеткаВремени);
	КэшируемыеЗначения.Вставить("Сценарий", 	Объект.Сценарий);
		
	РегламентыКлиентСервер.ОбработатьСтрокиТЧ(ТекущаяСтрока.ПолучитьЭлементы(), СтруктураДействий, КэшируемыеЗначения);
	 
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыГруппаКонтрагентаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СтруктураГруппы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМетодИсключенияВГО");
	
	КэшируемыеЗначения.Вставить("Регламент",	Объект.Ссылка);
	КэшируемыеЗначения.Вставить("Период", 		Объект.МеткаВремени);
	КэшируемыеЗначения.Вставить("Сценарий", 	Объект.Сценарий);
		
	РегламентыКлиентСервер.ОбработатьСтрокиТЧ(ТекущаяСтрока.ПолучитьЭлементы(), СтруктураДействий, КэшируемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУзелПервогоУровня(СтрокаПриемник)

	РодительПервогоУровня = СтрокаПриемник;
	Пока (РодительПервогоУровня <> Неопределено) И (РодительПервогоУровня.ПолучитьРодителя() <> Неопределено) Цикл
		РодительПервогоУровня = РодительПервогоУровня.ПолучитьРодителя();
	КонецЦикла;

	Возврат РодительПервогоУровня;
	
КонецФункции

&НаКлиенте
Процедура ВыборСвязанногоШаблонПроцесса_Завершение(ВыбЗнач, Параметры) Экспорт
	Если ВыбЗнач <> Неопределено Тогда
		СвязанныйШаблонПроцесса = СоздатьШаблонПроцесса(Объект.Ссылка, ВыбЗнач);
		Если ЗначениеЗаполнено(СвязанныйШаблонПроцесса) Тогда
			ПараметрыФормы = Новый Структура("ШаблонПроцесса", СвязанныйШаблонПроцесса);
			Имя = "Отчет.СетеваяДиаграммаШаблонаУниверсальногоПроцесса.Форма";
			ОткрытьФорму(Имя, ПараметрыФормы);	
			ОпределитьСпособВыбораШаблонаПроцесса();
			Элементы.ВидОтчета.Доступность 		= Ложь;
			Элементы.ВидОтчета.ПодсказкаВвода 	= НСтр("ru = 'Список видов отчетов определяется связанным шаблоном процесса'");

		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось создать шаблон процесса по регламенту. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пользователь отменил выбор. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСвязанногоШаблонПроцесса()
	Перем ВыбЗнач;
	ЕстьСвязанныйШаблон = РегламентыВызовСервера.ОпределитьСвязанныйШаблон(Объект.Ссылка, СвязанныйШаблонПроцесса);
	Если ЕстьСвязанныйШаблон Тогда
		ПараметрыФормы = Новый Структура("ШаблонПроцесса", СвязанныйШаблонПроцесса);
		Имя = "Отчет.СетеваяДиаграммаШаблонаУниверсальногоПроцесса.Форма"; 
		ОткрытьФорму(Имя, ПараметрыФормы);	
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		КС = Новый КвалификаторыСтроки(100);
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС, );
		
		СтрокаШаблона = НСтр("ru = 'Шаблон для регламента %1'");
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ВыбЗнач = СтрШаблон(СтрокаШаблона, Объект.Ссылка);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВыборСвязанногоШаблонПроцесса_Завершение", ЭтаФорма);
		ПоказатьВводЗначения(Оповещение, ВыбЗнач, Нстр("ru = 'Введите наименование шаблона процесса'"), ОписаниеТипов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязанныйШаблонПроцесса_Заверешение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Записать();
		ВыборСвязанногоШаблонПроцесса();
	Иначе
		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязанныйШаблонПроцесса(Команда)	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения нужно сохранить элемент. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ОткрытьСвязанныйШаблонПроцесса_Заверешение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ВыборСвязанногоШаблонПроцесса();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьСпособВыбораШаблонаПроцесса()
		
	СвязанныйШаблонПроцесса = Неопределено;	
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(Объект.Ссылка, СвязанныйШаблонПроцесса);
	
	Если ЗначениеЗаполнено(СвязанныйШаблонПроцесса) Тогда
		Элементы.ДекорацияШаблонПроцесса1.Заголовок = НСтр("ru = 'Шаблон процесса подготовки отчетности: '");
		Элементы.ПоказатьШаблонПроцесса.Заголовок = Строка(СвязанныйШаблонПроцесса);
	Иначе
		Элементы.ДекорацияШаблонПроцесса1.Заголовок = НСтр("ru = 'Шаблон процесса подготовки отчетности не задан. '");
		Элементы.ПоказатьШаблонПроцесса.Заголовок = НСтр("ru = 'Создать шаблон'");
	КонецЕсли;
	
	ОпределитьСвойстваВидовОтчетов();
	
КонецПроцедуры

&НаСервере
Функция СоздатьШаблонПроцесса(ВерсияВход, НаименованиеВход)
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ОМ = ОбщегоНазначения.ОбщийМодуль("КэшируемыеПроцедурыУХ");
		РезультатФункции = ОМ.ПолучитьПустуюСсылкуПоТаблицеАналитики("Справочник.ШаблоныУниверсальныхПроцессов");
		ОМ = ОбщегоНазначения.ОбщийМодуль("МодульУправленияПроцессамиУХ");
		ОМ.СоздатьШаблонПроцесса(ВерсияВход, НаименованиеВход, РезультатФункции);
		Возврат РезультатФункции;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьОбъектыИнвестирования(Команда)
	
	ТекущаяСтрока = Элементы.СтруктураГруппы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Материнские = РегламентыКлиентСервер.ПолучитьМатеринские(ТекущаяСтрока, КэшируемыеЗначения.ОтношенияМатеринское);	
	Если Материнские.Количество() = 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Для организации <%1> не указаны материнские организации для заполнения списком объектов инвестирования по эффективным долям!'");
		
		Если ЗначениеЗаполнено(ШаблонСообщения) тогда
			ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, ТекущаяСтрока.ОрганизационнаяЕдиница));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СохранитьВерсиюРедактирования();
	
	РеквизитыЗаполнитьОбъектыИнвестирования = Новый Структура;
	РеквизитыЗаполнитьОбъектыИнвестирования.Вставить("Инвестор", 	Материнские);
	РеквизитыЗаполнитьОбъектыИнвестирования.Вставить("Сценарий",	Объект.Сценарий);
	РеквизитыЗаполнитьОбъектыИнвестирования.Вставить("Период", 		Объект.МеткаВремени);
	РеквизитыЗаполнитьОбъектыИнвестирования.Вставить("Регламент", 	Объект.Ссылка);
	РеквизитыЗаполнитьОбъектыИнвестирования.Вставить("ВыводитьСообщения", 	Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОбъектыИнвестирования", РеквизитыЗаполнитьОбъектыИнвестирования);
	СтруктураДействий.Вставить("ЗаполнитьВалюты");
	СтруктураДействий.Вставить("ЗаполнитьРеквизитыОрганизации");
	СтруктураДействий.Вставить("ЗаполнитьЯвляетсяЦФО");
	СтруктураДействий.Вставить("ЗаполнитьЭффективнуюДолю");	
	СтруктураДействий.Вставить("ЗаполнитьОтношениеКГруппе");
	СтруктураДействий.Вставить("ЗаполнитьМетодИсключенияВГО");
	СтруктураДействий.Вставить("ЗаполнитьЕстьУтвержденные");
	СтруктураДействий.Вставить("ЗаполнитьКартинкуСтрок");
	
	КэшируемыеЗначения.Вставить("Регламент",	Объект.Ссылка);
	КэшируемыеЗначения.Вставить("Период", 		Объект.МеткаВремени);
	КэшируемыеЗначения.Вставить("Сценарий", 	Объект.Сценарий);
		
	РегламентыКлиентСервер.ОбработатьСтрокиТЧ(ТекущаяСтрока.ПолучитьЭлементы(), СтруктураДействий, КэшируемыеЗначения);
	
	СохранитьВерсиюРедактирования();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДатаПриИзменении(Элемент)
	РегламентыКлиентСервер.ОбновитьНаименованиеЗаголовок(Объект, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьИзменениеРеквизитаВерсии(РезультатВопроса, ДополнительныеПараметры = Неопределено)

	//Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда		
	//	
	//	Возврат;// отказались от создания новой версии - значит просто изменили реквизит
	//	
	//ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
	//	
	//	Объект[ДополнительныеПараметры.Источник] = КэшируемыеЗначения[ДополнительныеПараметры.Источник]; // отменили изменение реквизита - значит возвращаем значение до изменения
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//// согласились создать новую версию

КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	КэшируемыеЗначения.Вставить("РасчетЭффективныхДолей", ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.Родитель, "РасчетЭффективныхДолей"));
	УправлениеФормой(ЭтаФорма);
	РегламентыКлиентСервер.ОбновитьНаименованиеЗаголовок(Объект, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеПриИзменении(Элемент)
	РегламентыКлиентСервер.ОбновитьНаименованиеЗаголовок(Объект, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыКонтекстноеМенюУстановитьКонсолидирующей(Команда)
	
	ТекущаяСтрока = Элементы.СтруктураГруппы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущияОтношениеМатеринское = КэшируемыеЗначения.ОтношенияМатеринское.Найти(ТекущаяСтрока.ОтношениеКГруппе) <> Неопределено;
	
	Если ТекущияОтношениеМатеринское Тогда		
		ТекущаяСтрока.ОтношениеКГруппе = РегламентыКлиентСервер.ПолучитьОтношениеКГруппеПоДоле(ТекущаяСтрока.ЭффективнаяДоля, КэшируемыеЗначения.ОтношенияКГруппе);
	ИначеЕсли КэшируемыеЗначения.ОтношенияМатеринское.Количество() > 0 Тогда
		ТекущаяСтрока.ОтношениеКГруппе = КэшируемыеЗначения.ОтношенияМатеринское[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыГруппаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВывестиСообщенияОбОтсутствииМатеринских(СообщитьВместоСостояния = Истина)

	Консолидирующие = ПолучитьКонсолидирующихБезМатеринских();
	
	Если Консолидирующие.Количество() = 0 ИЛИ Объект.РасчетЭффективныхДолей = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗаголовка = НСтр("ru = 'В регламенте <%1> (для заполнения по типу ""Консолидировать периметр"") необходимо указать материнские предприятия для консолидирующих: '");
	
	Если ЗначениеЗаполнено(ТекстЗаголовка) тогда
		
		ТекстЗаголовка = ТекстЗаголовка + Символы.ПС;
		ТекстСостояния = СтрШаблон(ТекстЗаголовка, Объект.Наименование) + СтрСоединить(Консолидирующие, "," + Символы.ПС);
		
		Если СообщитьВместоСостояния Тогда
			Сообщить(ТекстСостояния);
		Иначе	
			Состояние(ТекстСостояния);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьКонсолидирующихБезМатеринских()

	Результат = Новый Массив;
	
	ДеревоГруппы = РеквизитФормыВЗначение("СтруктураГруппы");		
	СтрокиКонсолидирующих = ДеревоГруппы.Строки.НайтиСтроки(Новый Структура("ЯвляетсяКонсолидирующей", Истина), Истина);
	
	Для каждого СтрокаКонсолидирующая Из СтрокиКонсолидирующих Цикл	
		
		ЕстьМатеринская = Неопределено; // неопределено - в периметре пусто или только ЦФО
		
		Для каждого СтрокаКонсолидируемая Из СтрокаКонсолидирующая.Строки Цикл			
			
			Если НЕ СтрокаКонсолидируемая.ИспользоватьВРегламентированномУчете И Не СтрокаКонсолидируемая.ИностранныйНалоговыйРезидент Тогда
				Продолжить;
			КонецЕсли;
				
			ЕстьМатеринская = КэшируемыеЗначения.ОтношенияМатеринское.Найти(СтрокаКонсолидируемая.ОтношениеКГруппе) <> Неопределено;
			Если ЕстьМатеринская Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;		
		
		Если ЕстьМатеринская = Ложь Тогда
			Результат.Добавить(СтрокаКонсолидирующая.ОрганизационнаяЕдиница);
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбъектСценарийПриИзменении(Элемент)
	КэшируемыеЗначения.Вставить("Сценарий", Объект.Сценарий);
КонецПроцедуры

&НаСервере 
Процедура ПроверитьНаличиеЭкземпляров(Отказ);

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	НастраиваемыйОтчет.Ссылка КАК Ссылка
	                |ИЗ
	                |	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	                |ГДЕ
	                |	НастраиваемыйОтчет.УправлениеПериодом.ВерсияОрганизационнойСтруктуры = &ВерсияОрганизационнойСтруктуры
	                |	И НастраиваемыйОтчет.ПометкаУдаления = Ложь";
	 
	 Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры",Объект.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл 
		 ТекстСообщения = НСтр("ru = 'По данной версии регламента существуют экземпляры отчётов, не помеченные на удаление. Изменение признака ""Использовать многопериодные экземпляры отчета"" запрещено.'");
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		 Отказ = Истина;
		 Возврат;	 
	 КонецЦикла;
	 		
КонецПроцедуры

&НаСервере
Процедура ОпределитьСвойстваВидовОтчетов()
	
	Если Не ЗначениеЗаполнено(СвязанныйШаблонПроцесса) Тогда
		Элементы.ВидОтчета.Доступность 		= Истина;
		Элементы.ВидОтчета.ПодсказкаВвода 	= НСтр("ru = 'Выберите группу отчетов'");
	Иначе		
		Объект.ВидОтчета 					= Справочники.ВидыОтчетов.ПустаяСсылка();
		Элементы.ВидОтчета.Доступность 		= Ложь;
		Элементы.ВидОтчета.ПодсказкаВвода 	= НСтр("ru = 'Список видов отчетов определяется связанным шаблоном процесса'");
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Функция ПолучитьСтруктуруОткрытияМатрицыПолномочий()
	РезультатФункции = Новый Структура;
	ОбъектБдНастраиваемыйОтчет = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	РезультатФункции.Вставить("ОбъектБД", ОбъектБдНастраиваемыйОтчет);
	РезультатФункции.Вставить("ВерсияОрганизационнойСтруктуры", Объект.Ссылка);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ЗаполнитьПериметрПоВсемОрганизациям(МассивОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.Родитель = &Родитель
	               |	И Организации.ПометкаУдаления = Ложь";
	
	
	Запрос.УстановитьПараметр("Родитель",Справочники.Организации.ПустаяСсылка());
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ШаблонУзла = Новый Структура;
	Для каждого КолонкаДерева Из РеквизитФормыВЗначение("СтруктураГруппы").Колонки Цикл
		ШаблонУзла.Вставить(КолонкаДерева.Имя);	
	КонецЦикла;	
	
	КэшПеретаскивания = РегламентыВызовСервера.ПолучитьСтруктуруПеретаскивания(
		МассивОрганизаций, ШаблонУзла, Объект.Сценарий, Объект.МеткаВремени);
	
	КэшПеретаскивания.Вставить("ТипИсточника", "СписокОрганизаций");
	
	Возврат КэшПеретаскивания;	
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьЭлемент(Команда)
	
	Если Элементы.СтруктураГруппы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизационнаяЕдиница = Элементы.СтруктураГруппы.ТекущиеДанные.ОрганизационнаяЕдиница;
	ОсновнаяВалюта = Элементы.СтруктураГруппы.ТекущиеДанные.ОсновнаяВалюта;
	ОтношениеКГруппе = Элементы.СтруктураГруппы.ТекущиеДанные.ОтношениеКГруппе;
	ВидОрганизационнойЕдиницы = Элементы.СтруктураГруппы.ТекущиеДанные.ВидОрганизационнойЕдиницы;
	
	Если Элементы.СтруктураГруппы.ТекущийЭлемент.Имя = "СтруктураГруппыОрганизационнаяЕдиница" 
		И НЕ ОрганизационнаяЕдиница.Пустая() тогда
		
		СтруктураСсылка = Новый Структура("Ключ", ОрганизационнаяЕдиница);
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", СтруктураСсылка,,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли Элементы.СтруктураГруппы.ТекущийЭлемент.Имя = "СтруктураГруппыВалюта"
		И НЕ ОсновнаяВалюта.Пустая() тогда
		
		СтруктураСсылка = Новый Структура("Ключ", ОсновнаяВалюта);
		ОткрытьФорму("Справочник.Валюты.ФормаОбъекта", СтруктураСсылка,,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли Элементы.СтруктураГруппы.ТекущийЭлемент.Имя = "СтруктураГруппыДополнительныеВалюты" тогда
		
		ОбработатьНачалоВыбораДополнительныхВалют(Элементы.СтруктураГруппы.ТекущийЭлемент);
		
	ИначеЕсли Элементы.СтруктураГруппы.ТекущийЭлемент.Имя = "СтруктураГруппыГруппаКонтрагента"
		И НЕ ОтношениеКГруппе.Пустая() тогда
		
		СтруктураСсылка = Новый Структура("Ключ", ОтношениеКГруппе);
		ОткрытьФорму("Справочник.ГруппыКонтрагентов.ФормаОбъекта", СтруктураСсылка,,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли Элементы.СтруктураГруппы.ТекущийЭлемент.Имя = "СтруктураГруппыВидОрганизационнойЕдиницы" 
		И НЕ ВидОрганизационнойЕдиницы.Пустая() тогда
		
		СтруктураСсылка = Новый Структура("Ключ", ВидОрганизационнойЕдиницы);
		ОткрытьФорму("Справочник.ВидыОрганизационныхЕдиниц.ФормаОбъекта", СтруктураСсылка,,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СтруктураГруппыОрганизационнаяЕдиница" тогда
				
		СтруктураСсылка = Новый Структура("Ключ", Элемент.ТекущиеДанные.ОрганизационнаяЕдиница);
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", СтруктураСсылка,,,,,, РежимОткрытияОкнаФормы.Независимый);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьОтношениеКГруппе(Форма)

	Объект = Форма.Объект;
	
	Если Не Объект.ИспользоватьРасширенныеНастройкиПериметра Тогда
		Возврат "ВсеДочки";
	ИначеЕсли Объект.РасчетЭффективныхДолей Тогда 
		Возврат "ПоДокументам";
	Иначе 
		Возврат "ПоУмолчанию";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтключитьСвязанныйПроцесс()
	
	СвязанныйШаблон = Неопределено;	
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(Объект.Ссылка, СвязанныйШаблон);
	
	Если НЕ СвязанныйШаблон = Неопределено тогда
		Попытка
			СвязанныйШаблонОбъект = СвязанныйШаблон.ПолучитьОбъект();
		Исключение
			Возврат;
		КонецПопытки;
		
		СвязанныйШаблонОбъект.СвязанныйРегламент = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		СвязанныйШаблонОбъект.ПометкаУдаления = Истина;
		
		Попытка
			СвязанныйШаблонОбъект.Записать();
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
