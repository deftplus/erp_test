
#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Предопределенный Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нельзя открыть предопредленный элемент для редактирования.'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ИнициализацияКонтактнойИнформации();
	
	АккредитацияПоставщиковУХ.УстановитьРеквизитыФормыСпискаДляПоставщика(
		ЭтаФорма);
	
	Если ЭтоВнешнийПользователь Тогда
		АнкетаПоставщикаТекущегоПользователя = АккредитацияПоставщиковУХ.
			ПолучитьАнектуПоставщикаВнешнегоПользователя(ТекущийПользователь);
			
		Если НЕ ЗначениеЗаполнено(АнкетаПоставщикаТекущегоПользователя) Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Внешнему пользователю должна быть назначена анекта поставщика.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ЭтоСаморегистрация = (АнкетаПоставщикаТекущегоПользователя =
			Справочники.АнкетыПоставщиков.СаморегистрацияПоставщика);
		флАнкетаЗаписана = ЗначениеЗаполнено(Объект.Ссылка);
		
		Если ЭтоСаморегистрация И флАнкетаЗаписана Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Вам недоступна возможность открывать существующие анкеты поставщиков.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если НЕ ЭтоСаморегистрация
				И флАнкетаЗаписана
				И Объект.Ссылка <> АнкетаПоставщикаТекущегоПользователя Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Вам недоступна возможность открывать анкеты других поставщиков.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
	Иначе
		ЭтоСаморегистрация = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоВнешнийПользователь Тогда
		ПриСозданииНаСервереПроверкаКонтрагента();
	КонецЕсли;
	
	#Область УниверсальныеПроцессыСогласование
	Если НЕ ЭтоСаморегистрация Тогда
		АккредитацияПоставщиковУХ.ИнициализироватьПодсистемуСогласованияПоВнешнемуПоставщику(
			ЭтаФорма);
	КонецЕсли;
	#КонецОбласти
	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	#Область УниверсальныеПроцессыСогласование
	Если НЕ ЭтоСаморегистрация Тогда
		Если ИмяСобытия = "ОбъектСогласован"
			ИЛИ ИмяСобытия = "ОбъектОтклонен"
			ИЛИ ИмяСобытия = "МаршрутИнициализирован"
			ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
			
			ОпределитьСостояниеОбъекта();
			УстановитьОформлениеФормы();
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ Объект.СПравиламиОзнакомлен Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Пожалуйста, прочитайте правила регистрации и подтвердите, что соглашаетесь с ними.'");
		Сообщение.Поле = "СПравиламиОзнакомлен";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ЭтоСаморегистрация Тогда
		// Спросим пользователя и завершим работу программы
		ОбработчикПодтвержденияЗакрытияАнкеты = Новый ОписаниеОповещения("ПоказатьПредупреждениеПользователюПередЗакрытием", ЭтаФорма);
		ПоказатьВопрос(ОбработчикПодтвержденияЗакрытияАнкеты,
			НСтр(
			"ru = 'Проверьте данные анкеты.
			|После закрытия вы больше не сможете ее отредактировать.
			|Закрыть форму?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОповещениеПоставщикуОбОткрытииДоступа(Команда)
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо записать анкету перед отправкой оповещения.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	АккредитацияПоставщиковВызовСервераУХ.ОповеститьПоставщикаОРешенииПоОбъекту(Объект.Ссылка, "Ссылка");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнешнегоПользователя(Команда)
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо записать анкету перед созданием польователя ИБ.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СоздатьВнешнегоПользователяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо записать анкету перед созданием контрагента.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Объект.Контрагент = СоздатьКонтрагентаПоДаннымАнкетыПоставщика(Объект.Ссылка);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилаРегистрации(Команда)
	ПравилаРегистрации = ПолучитьПравилаРегистрацииПоставщиков();
	ПравилаРегистрации.Показать(НСтр("ru = 'Правила регистрации поставщиков'"));
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоЕГРН(Команда)
	ПроверитьПоЕГРНАнкетуПоставщика();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	Элементы.ПояснениеНекорректногоИмениПользователяИБ.Видимость = 
		ПроверитьКорректностьИмениПользователяИБ(Объект.ВнешнийПользователь, Объект.ПользовательИБИмя);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийПользовательСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо записать анкету перед созданием польователя ИБ.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СоздатьВнешнегоПользователяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоПриИзменении(Элемент)
	ЮридическоеФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЮридическоеФизическоеЛицоПриИзмененииНаСервере()
	Если Объект.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Объект.КПП  = "";
	Иначе
		Объект.ДокументУдостоверяющийЛичность = "";
	КонецЕсли;
	УстановитьВидимостьРеквизитовКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоНаСпецрежиме422ФЗПриИзменении(Элемент)
	УстановитьВидимостьРегистрационногоНомера();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаПоставщикаПриИзменении(Элемент)
	Объект.Ответственный = ПолучитьПользователяПоКонтактномуЛицу(Объект.ОтветственныйЗаПоставщика);
КонецПроцедуры


#КонецОбласти


#Область ВнутренняяЛогикаРаботыФормы

&НаКлиенте
Процедура ПоказатьПредупреждениеПользователюПередЗакрытием(Результат, ДопПараметры) Экспорт
    Если Результат <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	// Покажем текст о том, что придет оповещение по почте
	ОбработчикЗакрытияФормы = Новый ОписаниеОповещения("ОбработкаЗакрытияФормы", ЭтаФорма);
	ПоказатьВопрос(ОбработчикЗакрытияФормы,
			НСтр("ru = 'Ваша анкета будет рассмотрена.
			|На указанный вами адрес электронной почты придет
			|подтверждение регистрации и учетные данные
			|для доступа к системе.'"),
			РежимДиалогаВопрос.ОК);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормы(Результат, ДопПараметры) Экспорт
	ЗавершитьРаботуСистемы(Ложь);
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы()
	ТекСтатус = ПолучитьСтатусОбъекта(ЭтаФорма);
	флУтвержден = (ТекСтатус = Перечисления.СостоянияСогласования.Утверждена);
	флОтменен = (ТекСтатус = Перечисления.СостоянияСогласования.Отклонена);
	флЧерновик = (ТекСтатус = Перечисления.СостоянияСогласования.Черновик) ИЛИ
		НЕ ЗначениеЗаполнено(ТекСтатус);
	флЗарегистрирован = ЗначениеЗаполнено(Объект.Контрагент);
	флЭлементСохранен = ЗначениеЗаполнено(Объект.Ссылка);
	флВнешнийПользовательЗаполнен = ЗначениеЗаполнено(Объект.ВнешнийПользователь);
	флПоказатьВнешнегоПользователя = Константы.РазрешитьДоступВнешнихПоставщиков.Получить() И
		НЕ ЭтоВнешнийПользователь И флУтвержден;
	флМожноСоздатьВнешнегоПользователя = НЕ флВнешнийПользовательЗаполнен И флПоказатьВнешнегоПользователя;
	флУказанКонтрагент = ЗначениеЗаполнено(Объект.Контрагент);
	флПоказатьКнопкуОтправкиОповещенияОРегистрации = НЕ ЭтоВнешнийПользователь И
		((флУтвержден И флВнешнийПользовательЗаполнен) ИЛИ флОтменен);
	
	// Внешний пользователь утвержденную анкету может только просматривать.
	Если ЭтоВнешнийПользователь И (флЗарегистрирован ИЛИ НЕ флЧерновик) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ФормаОтправитьОповещениеПоставщикуОбОткрытииДоступа.Видимость = флПоказатьКнопкуОтправкиОповещенияОРегистрации;
	
	// Доступ к внешнему пользователю
	Элементы.ГруппаВнешниеПользователи.Видимость = флПоказатьВнешнегоПользователя;
	Элементы.СоздатьВнешнегоПользователя.Видимость = флМожноСоздатьВнешнегоПользователя;
	
	// Доступ к Контрагенту
	Элементы.ГруппаКонтрагент.Видимость = НЕ ЭтоВнешнийПользователь;
	Элементы.СоздатьКонтрагента.Видимость =  флЭлементСохранен И НЕ ЭтоВнешнийПользователь И НЕ флУказанКонтрагент И флУтвержден;
	Элементы.Контрагент.Видимость = флЭлементСохранен И НЕ ЭтоВнешнийПользователь;
	Элементы.Контрагент.ТолькоПросмотр = НЕ флУтвержден;
	
	// Ответственный за поставщика
	Элементы.ОтветственныйЗаПоставщика.Видимость = НЕ ЭтоВнешнийПользователь;
	
	// Видимость элементов пользователя/внешнего пользователя
	Элементы.ФормаПроверитьПоЕГРН.Видимость = НЕ ЭтоВнешнийПользователь;
	
	// Флаги настройки
	Элементы.ГруппаСлужебнаяИнформация.Видимость = НЕ ЭтоВнешнийПользователь;
	
	// Статус аккредитации
	Элементы.ОбщийСтатусАккредитации.Видимость = флУтвержден;
	Если флУтвержден Тогда
		ДанныеАккредитации = АккредитацияПоставщиковУХ.ПолучитьОписаниеСтатусаАккредитацииПоставщика(
			Объект.Ссылка, ТекущаяДатаСеанса());
		ОбщийСтатусАккредитации = АккредитацияПоставщиковУХ.ПолучитьПредставлениеОбщегоСтатусаАккредитации(ДанныеАккредитации);
	Иначе
		ОбщийСтатусАккредитации = "";
	КонецЕсли;
		
	// Доступ к имени пользователя БД
	Элементы.ПользовательИБИмя.ТолькоПросмотр = флУтвержден ИЛИ 
		флВнешнийПользовательЗаполнен ИЛИ (ЭтоВнешнийПользователь И НЕ флЧерновик);
	Элементы.ПояснениеНекорректногоИмениПользователяИБ.Видимость =
		ЗначениеЗаполнено(Объект.ПользовательИБИмя)
		И Справочники.АнкетыПоставщиков.ПроверитьКорректностьИмениПользователяИБ(
				Объект.ВнешнийПользователь,
				Объект.ПользовательИБИмя);
		
	// Состояние проверки контрагента по ЕГРН
	Элементы.СостояниеКонтрагента.Видимость = НЕ (ЭтоВнешнийПользователь И флЧерновик);
	Элементы.СостояниеКонтрагента.ТолькоПросмотр = ЭтоВнешнийПользователь;
	
	// Видимость реквизитов в зависимости от вида контрагента
	УстановитьВидимостьРеквизитовКонтрагента();
	
	Элементы.Ответственный.Видимость = НЕ ЭтоВнешнийПользователь;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовКонтрагента()
	
	КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонтрагентФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Элементы.НаименованиеПолное.Заголовок = ?(КонтрагентФизическоеЛицо, НСтр("ru = 'ФИО'"), НСтр("ru = 'Полное наименование'"));
	Элементы.ДокументУдостоверяющийЛичность.Видимость = КонтрагентФизическоеЛицо;
	Элементы.КПП.Видимость = НЕ КонтрагентФизическоеЛицо И КонтрагентЗарегистрированВРФ;
	Элементы.НалоговыйНомер.Видимость = НЕ КонтрагентЗарегистрированВРФ;
	
	Элементы.ФизЛицоНаСпецрежиме422ФЗ.Видимость = КонтрагентФизическоеЛицо;
	УстановитьВидимостьРегистрационногоНомера();
	// ОГРН, ОГРНИП или регистрационный номер для иностранного контрагента
	Если НЕ КонтрагентЗарегистрированВРФ Тогда
		Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'Рег. номер'");
		Элементы.РегистрационныйНомер.Подсказка 		= НСтр("ru = 'Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= НСтр("ru = 'Регистрационный номер в стране регистрации'");
		Элементы.РегистрационныйНомер.Ширина 			= 31;
		Элементы.РегистрационныйНомер.Маска 			= "";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
											|при первой постановке на учет в налоговом органе Российской Федерации'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
		
	ИначеЕсли КонтрагентФизическоеЛицо Тогда
		Элементы.РегистрационныйНомер.Заголовок		= НСтр("ru = 'ОГРНИП'");
		Элементы.РегистрационныйНомер.Подсказка 		= 
			НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
					   |указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
		Элементы.РегистрационныйНомер.Ширина 			= 16;
		Элементы.РегистрационныйНомер.Маска 			= "999999999999999";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
		
	Иначе
		// Юридическое лицо
		Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'ОГРН'");
		Элементы.РегистрационныйНомер.Подсказка 		= 
			НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
		Элементы.РегистрационныйНомер.Маска 			= "9999999999999";
		Элементы.РегистрационныйНомер.Ширина 			= 16;
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	КонецЕсли;
	
	Элементы.КодПоОКПО.Видимость = КонтрагентЗарегистрированВРФ;
	Элементы.ГруппаСвидетельствоНомер.Видимость = КонтрагентФизическоеЛицо;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРегистрационногоНомера()
	Элементы.РегистрационныйНомер.Видимость = 
		(Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		ИЛИ НЕ Объект.ФизЛицоНаСпецрежиме422ФЗ;
КонецПроцедуры

&НаСервере
Процедура СоздатьВнешнегоПользователяНаСервере()
	Если ПустаяСтрока(Объект.ПользовательИБВременныйПароль) Тогда
		Объект.ПользовательИБВременныйПароль =
			АккредитацияПоставщиковУХ.СоздатьПарольВнешнегоПользователя();
	КонецЕсли;
	ТекстОшибки = Неопределено;
	Результат = АккредитацияПоставщиковУХ.ПолучитьВнешнегоПользователяПоставщика(
		Объект.Ссылка,
		Объект.ПользовательИБИмя);
	Если Результат.Успех Тогда
		Объект.ВнешнийПользователь = Результат.Ссылка;
		Модифицированность = Истина;
		УстановитьОформлениеФормы();
		ТекстОшибки = УстановитьПарольВнешнегоПользователяНаСервере(
			Объект.ВнешнийПользователь, 
			Объект.ПользовательИБВременныйПароль);
	Иначе
		ТекстОшибки = Результат.ТекстОшибки;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПарольВнешнегоПользователяНаСервере(
												ВнешнийПользователь, 
												Пароль)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Пользователь", ВнешнийПользователь);
	ПараметрыВыполнения.Вставить("НовыйПароль", Пароль);
	ПараметрыВыполнения.Вставить("СтарыйПароль", "");
	ПараметрыВыполнения.Вставить("ПриВходеВПрограмму", Истина);
	ПараметрыВыполнения.Вставить("ПарольПользователяСервиса", "");
	ПараметрыВыполнения.Вставить("ТолькоПроверить",           Ложь);
	Попытка
		ТекстОшибки = ПользователиСлужебный.ОбработатьНовыйПароль(ПараметрыВыполнения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	Возврат ТекстОшибки;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьКорректностьИмениПользователяИБ(ВнешнийПользователь, ПользовательИБИмя) Экспорт
	Если НЕ ПустаяСтрока(ПользовательИБИмя) Тогда
		Возврат Справочники.АнкетыПоставщиков.ПроверитьКорректностьИмениПользователяИБ(
					ВнешнийПользователь,
					ПользовательИБИмя);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПравилаРегистрацииПоставщиков() Экспорт
	МакетПравил = Справочники.АнкетыПоставщиков.ПолучитьМакет("ПравилаРегистрацииПоставщика");
	ТекстПравил = МакетПравил.ПолучитьОбласть("ТекстПравил");
	ПравилаРегистрации = Новый ТабличныйДокумент;
	ПравилаРегистрации.Вывести(ТекстПравил);
	ПравилаРегистрации.ТолькоПросмотр = Истина;
	ПравилаРегистрации.ОтображатьЗаголовки = Ложь;
	ПравилаРегистрации.ОтображатьСетку = Ложь;
	Возврат ПравилаРегистрации;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьКонтрагентаПоДаннымАнкетыПоставщика(Поставщик) Экспорт
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Возврат АккредитацияПоставщиковУХ.ПолучитьКонтрагентаПоставщика(Поставщик);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументыКвалификации(Поставщик, ДатаСреза) Экспорт
	мКвалификации = АккредитацияПоставщиковУХ.ПолучитьДокументыАккредитации(Поставщик, ДатаСреза);
	Если мКвалификации.Количество() > 0 Тогда
		Возврат мКвалификации[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользователяПоКонтактномуЛицу(КонтактноеЛицоОрганизации)
	Если ЗначениеЗаполнено(КонтактноеЛицоОрганизации) Тогда
		Возврат КонтактноеЛицоОрганизации.СвязанныйПользователь;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции


#КонецОбласти


#Область ПроверкаКонтрагентаПоЕГРН


// Проверка наличия доступа к проверке контрагентов, запуск проверки.
&НаСервере
Процедура ПриСозданииНаСервереПроверкаКонтрагента()
	
	// Нас интересуют флаги "ПроверкаИспользуется"
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтаФорма);
	
	Если РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется И
		НЕ ЗначениеЗаполнено(Объект.СостояниеКонтрагента) Тогда
		
		ПроверитьАнкетуПоставщикаНаСервере();
	КонецЕсли;
	
	ОтобразитьРезультатПроверкиКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоЕГРНАнкетуПоставщика()
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо записать анкету перед проверкой.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для проверки нужно заполнить ИНН.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПроверитьОтобразитьАнкетуПоставщикаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтобразитьАнкетуПоставщикаНаСервере()
	Если НЕ ПроверкаКонтрагентов.ИспользованиеПроверкиВозможно() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Недоступен сервис проверки контрагентов.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПроверитьАнкетуПоставщикаНаСервере();
	ОтобразитьРезультатПроверкиКонтрагента();
КонецПроцедуры

// Модифицирует данные объекта: "СостояниеКонтрагента", "ПрошелПроверкуЕГРН"
&НаСервере
Процедура ПроверитьАнкетуПоставщикаНаСервере()
	Объект.СостояниеКонтрагента = 
		ПроверкаКонтрагентов.СостояниеКонтрагента(
			Объект.ИНН, 
			Объект.КПП,
			ТекущаяДатаСеанса());
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеКонтрагента) Тогда
		Объект.СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС;
	КонецЕсли;
	Если Объект.СостояниеКонтрагента =
				Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС
			ИЛИ Объект.СостояниеКонтрагента = 
				Перечисления.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке Тогда
		Объект.ПрошелПроверкуЕГРН = Истина;
	Иначе
		Объект.ПрошелПроверкуЕГРН = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	
	СостояниеКонтрагента = Объект.СостояниеКонтрагента;
	ЦветТекста = ЦветНадписиРезультатаПроверкиПоСостояниюКонтрагента(СостояниеКонтрагента);
	
	Элементы.СостояниеКонтрагента.ЦветТекста = ЦветТекста;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветНадписиРезультатаПроверкиПоСостояниюКонтрагента(СостояниеКонтрагента)
	
	Цвета = ПроверкаКонтрагентовВызовСервера.ЦветаРезультатовПроверки();
	
	Если СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП") Тогда
		ЦветТекста = Цвета.ЦветТекстаКонтрагентаПрекратившегоДеятельность;
	ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС") Тогда
		ЦветТекста = Цвета.ЦветТекстаКонтрагентаДействующего;
	Иначе
		ЦветТекста = Цвета.ЦветТекстаНекорректногоКонтрагента;
	КонецЕсли;
	
	Возврат ЦветТекста;
	
КонецФункции


#КонецОбласти


#Область ОбработкаАдресовПоставщика


&НаСервере
Процедура ИнициализацияКонтактнойИнформации()
	ВидКонтактнойИнформацииАдреса = Новый Структура;
	ВидКонтактнойИнформацииАдреса.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдреса.Вставить("АдресТолькоРоссийский", Ложь);
	ВидКонтактнойИнформацииАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	
	ПредставлениеЮридическийАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Объект.ЮридическийАдрес);
	КомментарийЮридическийАдрес  = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(Объект.ЮридическийАдрес);
	
	ПредставлениеФактическийАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Объект.ФактическийАдрес);
	КомментарийФактическийАдрес  = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(Объект.ФактическийАдрес);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаПриИзменении(Элемент)
	ИмяРеквизитаОбъекта = СтрЗаменить(Элемент.Имя, "Представление", "");
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		ЭтаФорма["Представление" + ИмяРеквизитаОбъекта] = "";
		ЭтаФорма["Комментарий" + ИмяРеквизитаОбъекта] = "";
		Объект[ИмяРеквизитаОбъекта] = "";
		Возврат;
	КонецЕсли;

	// Формируем внутренние значения полей по тексту и параметрам
	Объект[ИмяРеквизитаОбъекта] = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииАдреса);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИмяРеквизитаОбъекта = СтрЗаменить(Элемент.Имя, "Представление", "");
	
	// Если представление было изменено в поле и сразу нажата
	// кнопка выбора, то необходимо привести данные в соответствие
	// и сбросить внутренние поля для повторного репарсинга
	Если Элемент.ТекстРедактирования <> ЭтаФорма["Представление" + ИмяРеквизитаОбъекта] Тогда
		ЭтаФорма["Представление" + ИмяРеквизитаОбъекта] = Элемент.ТекстРедактирования;
		Объект[ИмяРеквизитаОбъекта] = "";
	КонецЕсли;

	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдреса);
	ПараметрыОткрытия.Вставить(	"ЗначенияПолей", Объект[ИмяРеквизитаОбъекта]);

	ПараметрыОткрытия.Вставить("Представление", ЭтаФорма["Представление" + ИмяРеквизитаОбъекта]);

	ПараметрыОткрытия.Вставить("Комментарий", ЭтаФорма["Комментарий" + ИмяРеквизитаОбъекта]);

	// Переопределямый заголовок формы,
	// по умолчнию отобразятся данные по ВидКонтактнойИнформации
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Адрес '"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОчистка(Элемент, СтандартнаяОбработка)
	ИмяРеквизитаОбъекта = СтрЗаменить(Элемент.Имя, "Представление", "");
	ЭтаФорма["Представление" + ИмяРеквизитаОбъекта] = "";
	ЭтаФорма["Комментарий" + ИмяРеквизитаОбъекта] = "";
	Объект[ИмяРеквизитаОбъекта] = "";
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИмяРеквизитаОбъекта = СтрЗаменить(Элемент.Имя, "Представление", "");
	
	ЭтаФорма["Представление" + ИмяРеквизитаОбъекта] = ВыбранноеЗначение.Представление;
	ЭтаФорма["Комментарий" + ИмяРеквизитаОбъекта] = ВыбранноеЗначение.Комментарий;
	Объект[ИмяРеквизитаОбъекта] = ВыбранноеЗначение.КонтактнаяИнформация;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(
										Знач Представление,
										Знач ВидКонтактнойИнформации)
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
		Представление, 
		ВидКонтактнойИнформации);
КонецФункции

#КонецОбласти


#Область ПереопределеноУниверсальныеПроцессыСогласование

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	Если ЭтоВнешнийПользователь Тогда
		СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Объект.Ссылка);
		СтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка);
	Иначе
		ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтатусОбъекта(Форма)
	Если Форма.ЭтоСаморегистрация Тогда
		Возврат ПредопределенноеЗначение(
					"Перечисление.СостоянияСогласования.Черновик")
	КонецЕсли;
	Возврат РеквизитСтатусОбъекта(Форма);
КонецФункции


#КонецОбласти


#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Или ЭтаФорма.Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние,,,ЭтаФорма);
	
КонецФункции

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта() Экспорт
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()


#КонецОбласти
