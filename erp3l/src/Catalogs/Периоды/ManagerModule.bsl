#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция выполняет создание дочерних периодов по родителю
// 
Функция СоздатьПериоды(Родитель, ЗаполняемыеПериоды, МассивПодчиненныхПериодов = Неопределено, Реструктурировать = Истина) Экспорт
	
	Если ЗаполняемыеПериоды.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Периоды.Ссылка КАК Ссылка,
	             |	Периоды.ДатаНачала КАК ДатаНачала,
	             |	Периоды.Периодичность КАК Периодичность
	             |ИЗ
	             |	Справочник.Периоды КАК Периоды
	             |ГДЕ
	             |	Периоды.Родитель В ИЕРАРХИИ(&Родитель)
	             |	И Периоды.Периодичность В(&Периодичность)
	             |	И НЕ Периоды.Произвольный
	             |	И НЕ Периоды.ПометкаУдаления";
				 
	Запрос.УстановитьПараметр("Родитель",Родитель);
	Запрос.УстановитьПараметр("Периодичность",ЗаполняемыеПериоды);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Периодичность ИЗ ЗаполняемыеПериоды Цикл
		
		ДатаНачала = Родитель.ДатаНачала;
		
		Пока ДатаНачала <= Родитель.ДатаОкончания Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДатаНачала",ДатаНачала);
			СтруктураПоиска.Вставить("Периодичность",Периодичность);
			
			МассивСуществующих = Результат.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСуществующих.Количество() = 0 Тогда
				
				Объект = Справочники.Периоды.СоздатьЭлемент();
				Объект.Родитель = Родитель;
				Объект.ДатаНачала = ДатаНачала;
				Объект.Периодичность = Периодичность;
				Объект.Заполнить(Неопределено);
				
				СуществующийПериод = НайтиПериодПоНаименованию(Объект.Наименование);
				
				Если Не СуществующийПериод.Пустая() тогда
					Попытка
						Объект = СуществующийПериод.ПолучитьОбъект();
					Исключение
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
						Возврат Ложь;
					КонецПопытки;
				КонецЕсли;
				
				Попытка
					Объект.Записать();
				Исключение
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки;
							
				Ссылка = Объект.Ссылка;
				
			Иначе
				
				Ссылка = МассивСуществующих[0].Ссылка;
				
			КонецЕсли; 
			
			Если НЕ МассивПодчиненныхПериодов = Неопределено Тогда
				 МассивПодчиненныхПериодов.Добавить(Ссылка);
			КонецЕсли;	
			
			Если Периодичность = Перечисления.Периодичность.ДевятьМесяцев Тогда
				Прервать;
			Иначе
				ДатаНачала = НачалоДня(ОбщегоНазначенияУХ.ДобавитьДень(Ссылка.ДатаОкончания, 1));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Реструктурировать тогда
		РеструктурироватьПериоды(Родитель);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиПериодПоНаименованию(НаименованиеПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Периоды.Ссылка КАК Ссылка,
	               |	Периоды.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Периоды КАК Периоды
	               |ГДЕ
	               |	Периоды.Наименование = &Наименование
	               |	И НЕ Периоды.ПометкаУдаления
	               |	И Периоды.Произвольный = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПериода);
	
	ВыборкаПериод = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПериод.Следующий() Тогда
		Возврат ВыборкаПериод.Ссылка;
	Иначе
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Процедура переподчинения и реструктуризации периодов.
//
Процедура РеструктурироватьПериоды(Родитель=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.День) КАК Период,
	|	1 КАК Ранг
	|ПОМЕСТИТЬ РангиПериодов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя),
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада),
	|	10
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц),
	|	30
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал),
	|	90
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие),
	|	180
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.ДевятьМесяцев),
	|	270
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Год),
	|	360
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Ссылка КАК Ссылка,
	|	Периоды.ДатаНачала КАК ДатаНачала,
	|	Периоды.ДатаОкончания КАК ДатаОкончания,
	|	Периоды.Периодичность КАК Периодичность,
	|	РангиПериодов.Ранг КАК Ранг
	|ПОМЕСТИТЬ ОтобранныеПериоды
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РангиПериодов КАК РангиПериодов
	|		ПО (РангиПериодов.Период = Периоды.Периодичность)
	|ГДЕ
	|	НЕ Периоды.Произвольный
	|	И НЕ Периоды.ПометкаУдаления
	|	" + ?(НЕ Родитель=Неопределено, "И Периоды.Родитель В ИЕРАРХИИ(&Родитель)", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ранг,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеПериоды.Ссылка КАК Период,
	|	ОтобранныеПериоды.Ссылка.Родитель КАК ТекущийРодитель,
	|	ПериодыВладельцы.Ссылка КАК ВозможныйРодитель,
	|	ПериодыВладельцы.Ранг КАК Ранг
	|ИЗ
	|	ОтобранныеПериоды КАК ОтобранныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеПериоды КАК ПериодыВладельцы
	|		ПО (НЕ ПериодыВладельцы.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.ДевятьМесяцев))
	|			И ОтобранныеПериоды.Периодичность <> ПериодыВладельцы.Периодичность
	|			И ОтобранныеПериоды.ДатаНачала >= ПериодыВладельцы.ДатаНачала
	|			И ОтобранныеПериоды.ДатаОкончания <= ПериодыВладельцы.ДатаОкончания
	|			И ОтобранныеПериоды.Ранг < ПериодыВладельцы.Ранг
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Ранг
	|ИТОГИ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Результат.Следующий() Цикл
		
		ВозможныеРодителиПериода = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Если ВозможныеРодителиПериода.Следующий() Тогда
			
			Если ВозможныеРодителиПериода.Период.Родитель <> ВозможныеРодителиПериода.ВозможныйРодитель тогда
				
				ПериодОбъект = ВозможныеРодителиПериода.Период.ПолучитьОбъект();
				ПериодОбъект.Родитель = ВозможныеРодителиПериода.ВозможныйРодитель;
				ПериодОбъект.ОбменДанными.Загрузка = Истина;
				ПериодОбъект.Записать();
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ОпределитьДатуОкончания(ДатаНачала, ДатаОкончания, Периодичность, УстановитьДату = Истина) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ДатаКонцаПериода = НачалоДня(ДобавитьМесяц(ДатаНачала, 12) - 1);
	ИначеЕсли Периодичность =Перечисления.Периодичность.ДевятьМесяцев Тогда
		ДатаКонцаПериода = НачалоДня(ДобавитьМесяц(ДатаНачала, 9) - 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ДатаКонцаПериода = НачалоДня(ДобавитьМесяц(ДатаНачала, 6) - 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаКонцаПериода = НачалоДня(ДобавитьМесяц(ДатаНачала, 3) - 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаКонцаПериода = НачалоДня(ДобавитьМесяц(ДатаНачала, 1) - 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Если День(ДатаНачала) < 10 Тогда
			ДатаКонцаПериода = ОбщегоНазначенияУХ.ДобавитьДень(ДатаНачала, 10) - 1;
		ИначеЕсли День(ДатаНачала) < 20 Тогда
			ДатаКонцаПериода = ОбщегоНазначенияУХ.ДобавитьДень(ДатаНачала, 10) - 1;
		Иначе 
			ДатаКонцаПериода = КонецМесяца(ДатаНачала);
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Если День(ДатаНачала)<=День(КонецНедели(ДатаНачала)) Тогда
			ДатаКонцаПериода = КонецНедели(ДатаНачала);
		Иначе
			ДатаКонцаПериода = КонецМесяца(ДатаНачала);
		КонецЕсли;
		
	Иначе	
		ДатаКонцаПериода = ДатаНачала;
	КонецЕсли;
    
    Если УстановитьДату Тогда
 		ОбщегоНазначенияУХ.УстановитьНовоеЗначение(ДатаОкончания, ДатаКонцаПериода);
    КонецЕсли; 
    
    Возврат ДатаКонцаПериода;
    
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("ТолькоПериодыГода") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Периоды.ДатаНачала, ГОД) = &ТолькоПериодыГода
		|	И Периоды.Произвольный = &Произвольный
		|	И Периоды.Периодичность = &Периодичность";
		
		Запрос.УстановитьПараметр("ТолькоПериодыГода", Параметры.Отбор.ТолькоПериодыГода);
		
		Если Параметры.Отбор.Свойство("Периодичность") Тогда
			Запрос.УстановитьПараметр("Периодичность", Параметры.Отбор.Периодичность);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Периоды.Периодичность = &Периодичность", "ИСТИНА");
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("Произвольный") Тогда
			Запрос.УстановитьПараметр("Произвольный", Параметры.Отбор.Произвольный);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Периоды.Произвольный = &Произвольный", "ИСТИНА");
		КонецЕсли;
		
		Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Параметры.Отбор.Вставить("Ссылка", Ссылки);
		
	ИначеЕсли Параметры.Отбор.Свойство("ПараметрыЛимитирования_ВидБюджета") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидБюджета", Параметры.Отбор.ПараметрыЛимитирования_ВидБюджета);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПараметрыЛимитирования КАК ПараметрыЛимитирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
		|		ПО ПараметрыЛимитирования.ПериодичностьЛимитирования = Периоды.Периодичность
		|			И (Периоды.Произвольный = ЛОЖЬ)
		|			И (НАЧАЛОПЕРИОДА(Периоды.ДатаНачала, ГОД) = ПараметрыЛимитирования.Период)
		|			И (ПараметрыЛимитирования.ВидБюджета = &ВидБюджета)
		|			И (ПараметрыЛимитирования.ИспользоватьЛимитирование = ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Периоды.ДатаНачала";
		
		Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Параметры.Отбор.Вставить("Ссылка", Ссылки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
#КонецОбласти

#КонецЕсли