////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУДЛЯ

// хранит исходный элемент, из которого выполнялось копирование
Перем мОбъектКопирования;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ

// Процедура выполняет копирование связной информации процесса
//
Процедура СкопироватьСвязнуюИнформациюПроцесса(Источник, Отказ = Ложь, ШапкаОшибки = "")
	
	СоответствиеЭтаповПроцесса   = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыСогласования.Ссылка,
	|	ЭтапыСогласования.ЭтоГруппа,
	|	ЭтапыСогласования.ДочернийМаршрут,
	|	ЭтапыСогласования.УсловияСогласования,
	|	ЭтапыСогласования.УровеньОрганизации,
	|	ЭтапыСогласования.ДлительностьСогласования,
	|	ЭтапыСогласования.ТипЭтапа,
	|	ЭтапыСогласования.АвтоматическоеОтклонениеДокумента,
	|	ЭтапыСогласования.Код,
	|	ЭтапыСогласования.Наименование,
	|	ЭтапыСогласования.ПорядковыйНомер
	|ИЗ
	|	Справочник.ЭтапыСогласования КАК ЭтапыСогласования
	|ГДЕ
	|	ЭтапыСогласования.Владелец = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Объект = Справочники.ЭтапыСогласования.СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(Объект, Выборка,"Код, Наименование");
		Иначе
			Объект = Справочники.ЭтапыСогласования.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Выборка, ,"ЭтоГруппа, УсловияСогласования, ДочернийМаршрут");
		КонецЕсли;
		
		Объект.Владелец = Ссылка;
		
		Попытка
			Объект.Записать();
			
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, ШапкаОшибки);
			Возврат;
			
		КонецПопытки; 
		
		СоответствиеЭтаповПроцесса.Вставить(Выборка.Ссылка, Объект.Ссылка);
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из СоответствиеЭтаповПроцесса Цикл
		
		Объект       = КлючИЗначение.Значение.ПолучитьОбъект();
		ЭтапИсточник = КлючИЗначение.Ключ;
		
		Если Не ЭтапИсточник.Родитель.Пустая() Тогда
			Объект.Родитель = СоответствиеЭтаповПроцесса[ЭтапИсточник.Родитель];
		КонецЕсли;
		
		Если Не Объект.ЭтоГруппа Тогда
			
			Объект.Утверждающие.Загрузить(ЭтапИсточник.Утверждающие.Выгрузить());
			
			Для каждого СтрокаЭтапыПредшественники Из ЭтапИсточник.ЭтапыПредшественники Цикл
				
				Если Не СтрокаЭтапыПредшественники.Этап.Пустая() Тогда
					Объект.ЭтапыПредшественники.Добавить().Этап = СоответствиеЭтаповПроцесса[СтрокаЭтапыПредшественники.Этап];
				КонецЕсли;
				
			КонецЦикла;
			
			УсловияСогласованияИсточник = ЭтапИсточник.УсловияСогласования.Получить();
			
			Если ЗначениеЗаполнено(УсловияСогласованияИсточник) Тогда
				УсловияСогласования = УсловияСогласованияИсточник.Скопировать();
				РекурсивныйПереносСтрок(УсловияСогласования, СоответствиеЭтаповПроцесса);
				Объект.УсловияСогласования = Новый ХранилищеЗначения(УсловияСогласования);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Объект.Записать();
			
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, ШапкаОшибки);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивныйПереносСтрок(Строки, СоответствиеЭтаповПроцесса)
	
	Для Каждого Строка Из Строки.Строки Цикл
		
		Если ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ЭтапыСогласования") Тогда
			Строка.Значение = СоответствиеЭтаповПроцесса[Строка.Значение];
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			РекурсивныйПереносСтрок(Строка, СоответствиеЭтаповПроцесса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаОшибки = "Маршрут согласования: """ + ЭтотОбъект + """ не может быть записан:";
	
	Если Не мОбъектКопирования = Неопределено Тогда
		Если мОбъектКопирования.СогласованиеДляЗаявки = СогласованиеДляЗаявки Тогда
			СкопироватьСвязнуюИнформациюПроцесса(мОбъектКопирования, Отказ, ШапкаОшибки);
		Иначе
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Изменен вид документа для согласования. Этапы согласования перенесены не будут");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостроениеГрафов() Экспорт
	
	ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
	ТаблицаИсходныхДанных.Колонки.Добавить("IDЭтапа");
	ТаблицаИсходныхДанных.Колонки.Добавить("Ссылка");
	ТаблицаИсходныхДанных.Колонки.Добавить("УсловияСогласования");
	
	
	ТаблицаГрафа = Новый ТаблицаЗначений;
	
	ТаблицаГрафа.Колонки.Добавить("IDЭтапа");
	ТаблицаГрафа.Колонки.Добавить("ЭтапСогласования");
	ТаблицаГрафа.Колонки.Добавить("ТипДеления");
	ТаблицаГрафа.Колонки.Добавить("IDЭтапаНачала");
	ТаблицаГрафа.Колонки.Добавить("IDЭтапаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыСогласования.Ссылка,
	|	ЭтапыСогласования.УсловияСогласования
	|ИЗ
	|	Справочник.ЭтапыСогласования КАК ЭтапыСогласования
	|ГДЕ
	|	ЭтапыСогласования.Владелец = &МаршрутСогласования";
	
	Запрос.УстановитьПараметр("МаршрутСогласования", Ссылка);
	
	ВЫборка = Запрос.Выполнить().Выбрать();
	
	ID = 0;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
		НоваяСтрока.IDЭтапа = ID;
		НоваяСтрока.Ссылка    = Выборка.Ссылка;
		НоваяСтрока.УсловияСогласования = Выборка.УсловияСогласования.Получить();
		ID = ID + 1;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаИсходныхДанных Цикл
		
		НоваяСтрока = ТаблицаГрафа.Добавить();
		НоваяСтрока.IDЭтапа = Строка.IDЭтапа;
		НоваяСтрока.ЭтапСогласования = Строка.Ссылка;
		
		Строка.УсловияСогласования.НайтиСтроки("УсловиеДействие", Перечисления.ДействияЭтапа.ПерейтиКЭтапу, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЭтапыСогласования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ Справочник.ЭтапыСогласования
	|ГДЕ Владелец = &МаршрутСогласования";
	Запрос.УстановитьПараметр("МаршрутСогласования", Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции