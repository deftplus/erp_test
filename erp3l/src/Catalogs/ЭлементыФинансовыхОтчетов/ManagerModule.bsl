
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает текст ячейки таблицы настроек
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, где отображена настройка ячеек.
//  Адрес - Строка - Адрес структуры настроек.
//
Процедура УстановитьТекстЯчейки(Форма, Адрес) Экспорт
	
	УстановитьВспомогательныйТекст = Ложь;
	Если Форма.Параметры.Свойство("ПроверятьВидТаблицы") Тогда
		ВидТаблицы = Неопределено;
		Форма.Параметры.Свойство("ВидТаблицы", ВидТаблицы);
		Если ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
			УстановитьВспомогательныйТекст = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьВызовСервера;
	ТекущаяОбласть = Форма.ПредставлениеОтчета.Область(Адрес);
	
	Если Не УстановитьВспомогательныйТекст Тогда
		Расшифровка = ТекущаяОбласть.Расшифровка;
	КонецЕсли;

	Если УстановитьВспомогательныйТекст Тогда
		
		ТекущаяОбласть.Текст = НСтр("ru = '<значение показателя отчета>';
									|en = '<report indicator value>'");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Расшифровка.ЭлементОтчета)
		И НЕ ЗначениеЗаполнено(Расшифровка.ВидЭлемента) Тогда
		
		ТекущаяОбласть.Текст = НСтр("ru = '<выберите тип ячейки>';
									|en = '<select a cell type>'");
		
	Иначе
		
		ТекущаяОбласть.Текст = Строка(Расшифровка.ВидЭлемента);
		
		Если Расшифровка.ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
			
			Если Расшифровка.ВидЭлемента <> ВидЭлемента("ВсеПоказателиБюджетов") Тогда
				ПоказательБюджета = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета,
					"ПоказательБюджетов");
				ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 ""%2""';
						|en = '%1 ""%2""'"),
					ТекущаяОбласть.Текст,
					ПоказательБюджета);
			КонецЕсли;
			
			Показатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета,
				"ВыводимыеПоказатели");
			ТипПоказателя = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета,
				"ТипЗначенияПоказателя");
			ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 (%2, 3)';
						|en = '%1 (%2, 3)'"),
					ТекущаяОбласть.Текст,
					Показатель,
					ТипПоказателя);
			
			ПериодСмещения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
			ЕстьНастройки = ФинансоваяОтчетностьВызовСервера.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
			Если ЕстьНастройки = Истина
				ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС
					+ НСтр("ru = '<установлены настройки>';
							|en = '<settings are set>'");
			КонецЕсли;
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов") Тогда
			
			Если Расшифровка.ВидЭлемента <> ВидЭлемента("ВсеСтатьиБюджетов") Тогда
				СтатьяБюджета = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "СтатьяБюджетов");
				ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 ""%2""';
						|en = '%1 ""%2""'"),
					ТекущаяОбласть.Текст,
					СтатьяБюджета);
			КонецЕсли;
			
			Показатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета,
				"ВыводимыеПоказатели");
			ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 (%2)';
						|en = '%1 (%2)'"),
					ТекущаяОбласть.Текст,
					Показатель);
			
			Если Форма.ИспользоватьДляВводаПлана Тогда
				ФормулаАвтозаполнения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета,
					"Формула");
				Если ЗначениеЗаполнено(ФормулаАвтозаполнения) Тогда
					ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС
						+ НСтр("ru = '<настроено автозаполнение>';
								|en = '<autofilling is configured>'");
				КонецЕсли;
			Иначе
				ПериодСмещения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
				ЕстьНастройки = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
				Если ЕстьНастройки = Истина
					ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
					ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС
						+ НСтр("ru = '<установлены настройки>';
								|en = '<settings are set>'");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("НефинансовыйПоказатель") Тогда
			
			НефинансовыйПоказатель = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета,
				"НефинансовыйПоказатель");
			ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 ""%2""';
						|en = '%1 ""%2""'"),
					ТекущаяОбласть.Текст,
					НефинансовыйПоказатель);
			
			ПериодСмещения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
			ЕстьНастройки = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
			Если ЕстьНастройки = Истина
				ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС
					+ НСтр("ru = '<установлены настройки>';
							|en = '<settings are set>'");
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
			
			ВидФормулы = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ФормулаПоГруппе");
			ТекущаяОбласть.Текст = НСтр("ru = 'Формула по группе (%1)';
										|en = 'Group formula (%1)'");
			ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекущаяОбласть.Текст, ВидФормулы);
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("Группа")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("Измерение")
			Тогда
			
			ТекущаяОбласть.Текст = "";
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			
			ТекущаяОбласть.Текст = НСтр("ru = 'Итог';
										|en = 'Total'");
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("РедактируемоеЗначение") Тогда
			
			ТекущаяОбласть.Текст = ПолучитьИзВременногоХранилища(Расшифровка.ЭлементОтчета).НаименованиеДляПечати;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
			
			ТекущаяОбласть.Текст = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "НаименованиеДляПечати");
			
		Иначе
			
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "Формула")
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Функция выводит настройку сложной таблицы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, где располагается настройка ячеек.
//  ДеревоТекущейТаблицы  - ДеревоЗначений - Дерево элементов, отображаемое в таблице настроек.
//
// Возвращаемое значение:
//   Структура - структура размеров.
//
Функция ВывестиТаблицуНастройкиСложнойТаблицы(Форма, ДеревоТекущейТаблицы) Экспорт
	
	ГлубинаОбъединения = БюджетнаяОтчетностьРасчетКэшаСервер.РассчитатьГлубинуУровней(ДеревоТекущейТаблицы);
	
	Если Форма.ЭтоПростаяТаблица Тогда
		ПерваяСтрока = 2;
	Иначе
		ПерваяСтрока = 4;
	КонецЕсли;
	
	Форма.ПерваяСтрока = ПерваяСтрока;
	Форма.ПредставлениеОтчета.Область(,1,,1).ШиринаКолонки = 3;
	
	ДеревоКолонокТаблицы = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(ДеревоТекущейТаблицы,
		"ВидЭлемента", ВидЭлемента("Колонки"));
	ВысотаШапки = БюджетнаяОтчетностьВыводСервер.ГлубинаДерева(ДеревоКолонокТаблицы.Строки);
	ШиринаШапки = ВывестиДеревоВПоказатели(Форма, ПерваяСтрока, ДеревоКолонокТаблицы.Строки, 0, ВысотаШапки, 2 + ГлубинаОбъединения);
	
	мШиринаМакета = ШиринаШапки;
	мВысотаШапки = ВысотаШапки;
	
	ОбластьШапка = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки, 2 + ГлубинаОбъединения - 1); // ОбластьЯчеекТабличногоДокумента 
	ОбластьШапка.Объединить();
	ОбластьШапка.ШиринаКолонки = 30;
	ОбластьШапка.Текст = "";
	Оформить(ОбластьШапка, "ЗаголовокТаблицы");
	
	Область = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки, 2 + ГлубинаОбъединения -1 + ШиринаШапки);
	Оформить(Область, "Шапка");
	
	ЭлементыТаблицы = ДанныеФормыВЗначение(Форма.ЭлементыТаблицы, Тип("ТаблицаЗначений")); // ТаблицаЗначений
	ЭлементыТаблицы.Индексы.Добавить("Строка, Колонка");
	
	ВсегоСтрок = 0;
	ДеревоСтрокТаблицы = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(ДеревоТекущейТаблицы, "ВидЭлемента", ВидЭлемента("Строки"));
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ЭлементыТаблицы",				ЭлементыТаблицы);
	ПараметрыВывода.Вставить("ДеревоКолонок",				ДеревоКолонокТаблицы.Строки);
	ПараметрыВывода.Вставить("ПерваяСтрока",				ПерваяСтрока + ВысотаШапки);
	ПараметрыВывода.Вставить("ГлубинаОбъединения",			ГлубинаОбъединения);
	
	ВывестиДеревоВСтроки(Форма,
			ДеревоСтрокТаблицы.Строки,
			ПараметрыВывода,
			ВсегоСтрок);
	
	мВысотаМакета = ВысотаШапки + ВсегоСтрок;
	
	// обведем всю таблицу
	Область = Форма.ПредставлениеОтчета.Область(
		ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки + ВсегоСтрок, 2 + ГлубинаОбъединения - 1 + ШиринаШапки); // ОбластьЯчеекТабличногоДокумента
	Оформить(Область, "Шапка");
	
	Возврат Новый Структура("мШиринаМакета, мВысотаМакета, мВысотаШапки", мШиринаМакета, мВысотаМакета, мВысотаШапки);
	
КонецФункции

// Вызывается из обработчика события создания формы на сервере.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Создаваемая форма.
//
// Возвращаемое значение:
//   См. ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета
//
Функция ФормаПриСозданииНаСервере(Форма) Экспорт
	Перем ДанныеОбъекта;
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда
		Возврат Форма.РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Форма.АдресЭлементаВХранилище = Форма.Параметры.АдресЭлементаВХранилище;
	Записывать = НЕ ЗначениеЗаполнено(Форма.АдресЭлементаВХранилище);
	Форма.Элементы.ФормаЗаписать.Видимость   = Записывать;
	Форма.Элементы.ФормаПеречитать.Видимость = Записывать;
	Если Форма.Элементы.Найти("ФормаСкопировать") <> Неопределено Тогда
		Форма.Элементы.ФормаСкопировать.Видимость               = Записывать;
	КонецЕсли;
	Если Форма.Элементы.Найти("ФормаУстановитьПометкуУдаления") <> Неопределено Тогда
		Форма.Элементы.ФормаУстановитьПометкуУдаления.Видимость = Записывать;
	КонецЕсли;
	
	Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость                = Записывать;
	Форма.Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию        = Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.Видимость         = НЕ Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.КнопкаПоУмолчанию = НЕ Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.Доступность       = НЕ Форма.ТолькоПросмотр;
	Если Не Записывать Тогда
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Заголовок = НСтр("ru = 'Завершить редактирование';
																|en = 'Finish editing'");
	КонецЕсли;
	
	Если Не Записывать Тогда
		
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Форма.АдресЭлементаВХранилище);
		ТаблицыЭлемента = "ОперандыФормулы, РеквизитыВидаЭлемента, ЭлементыТаблицы, ДополнительныеПоля,
		                  |ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений";
		ЗаполнитьЗначенияСвойств(Форма.Объект, ДанныеОбъекта,,ТаблицыЭлемента);
		СтруктураТаблиц = Новый Структура(ТаблицыЭлемента);
		
		Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
			
			Если КлючИЗначение.Ключ = "ОформляемыеСтроки"
				ИЛИ КлючИЗначение.Ключ = "ОформляемыеКолонки" Тогда
				Форма.Объект[КлючИЗначение.Ключ].Очистить();
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеОбъекта[КлючИЗначение.Ключ]) = Тип("ТаблицаЗначений") Тогда
				Форма.Объект[КлючИЗначение.Ключ].Загрузить(ДанныеОбъекта[КлючИЗначение.Ключ]);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДанныеОбъекта = Форма.РеквизитФормыВЗначение("Объект");
		
	КонецЕсли;
	
	РеквизитыВидаЭлемента = Новый Структура; 
	Для Каждого ДополнительныйРеквизит Из Форма.Объект.РеквизитыВидаЭлемента Цикл
		РеквизитыВидаЭлемента.Вставить(ДополнительныйРеквизит.Реквизит.ИмяПредопределенныхДанных, ДополнительныйРеквизит.Значение);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Форма, РеквизитыВидаЭлемента);
	
	Реквизиты = Форма.ПолучитьРеквизиты();
	ЕстьКомпоновщикОтбора = Ложь;
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = "Компоновщик" Тогда
			ЕстьКомпоновщикОтбора = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКомпоновщикОтбора Тогда
		УстановитьНастройкиОтбора(Форма, Форма.Компоновщик, ДанныеОбъекта.ВидЭлемента, ДанныеОбъекта.ДополнительныйОтбор);
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Вызывается перед записью объекта в форме
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, в которой происходит запись. Содержит в том числе:
//  	* Компоновщик - КомпоновщикНастроекКомпоновкиДанных - 
//  Объект - СправочникОбъект.ЭлементыФинансовыхОтчетов - Записываемый объект.
//  Отказ  - Булево - Признак программной обработки.
//  ДополнительныйРежим  - ПеречислениеСсылка.ДополнительныеРежимыЭлементовОтчетов, Неопределено - признак дополнительного режима формы.
//
Процедура ФормаПередЗаписьюНаСервере(Форма, Объект, Отказ, ДополнительныйРежим = Неопределено) Экспорт
	
	ДополнительныеРеквизиты = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(Объект.ВидЭлемента, Объект, ДополнительныйРежим).Реквизиты;
	Объект.РеквизитыВидаЭлемента.Очистить();
	
	Для Каждого Реквизит Из ДополнительныеРеквизиты Цикл
		ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
													Объект, Реквизит.Ключ, Форма[Реквизит.Ключ])
	КонецЦикла;
	
	Объект.ЕстьНастройки = Ложь;
	Форма.Объект.ЕстьНастройки = Ложь;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "Компоновщик" Тогда
			
			Настройки = Форма.Компоновщик.ПолучитьНастройки();
			Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование Тогда
					Объект.ЕстьНастройки = Истина;
					Форма.Объект.ЕстьНастройки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Объект.ДополнительныйОтбор = Новый ХранилищеЗначения(Настройки);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма.АдресЭлементаВХранилище) Тогда
		Отказ = Истина;
		ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Объект, Форма.АдресЭлементаВХранилище);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки поле отбора в форме
//
// Параметры:
//  Реквизиты - Массив - Массив реквизитов формы.
//  КомпоновщикПриемник - КомпоновщикНастроекКомпоновкиДанных - Поле компоновщика формы в которое устанавливается отбор.
//  ВидЭлемента  - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента финансового отчета.
//  ДополнительныйОтбор  - ХранилищеЗначения - Сохраненные настройки отбора.
//
Процедура УстановитьНастройкиОтбора(Реквизиты, КомпоновщикПриемник = Неопределено, ВидЭлемента, ДополнительныйОтбор) Экспорт
	
	#Область ОпределениеДоступныхПолей
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		ПоляОтбора = Новый Структура();
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.СтатьяБюджетов);
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.ПоказательБюджетов);
			
		Иначе
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.НефинансовыйПоказатель);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Ключ = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Выборка.Ссылка);
			ПоляОтбора.Вставить(Ключ, Выборка.Ссылка)
		КонецЦикла;
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		ПоляОтбора = Новый Структура();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АналитикиСтатейБюджетов.Ссылка,
		|	АналитикиСтатейБюджетов.ИмяПредопределенныхДанных
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
		|ГДЕ
		|	НЕ АналитикиСтатейБюджетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	АналитикиСтатейБюджетов.Наименование";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Ключ = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Выборка.Ссылка);
			ПоляОтбора.Вставить(Ключ, Выборка.Ссылка)
		КонецЦикла;
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		И Реквизиты.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистраБухгалтерии Тогда
		ПоляОтбора = Новый Структура(Реквизиты.ИмяИзмерения);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		И Реквизиты.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Субконто Тогда
		ПоляОтбора = Новый Структура("Субконто1", Реквизиты.ВидСубконто);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		ПоляОтбора = Новый Структура("Счет", Реквизиты.СчетПланаСчетов);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора, Реквизиты.ТипИтога);
	Иначе
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДополнениеОтборов
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		Если Реквизиты.ИспользоватьФильтрПоОрганизации Тогда
			ПоляОтбора.Вставить("Организация");
		КонецЕсли;
	
		Если Реквизиты.ИспользоватьФильтрПоПодразделению Тогда
			ПоляОтбора.Вставить("Подразделение");
		КонецЕсли;
		
		Если Реквизиты.ИспользоватьФильтрПоСценарию Тогда
			ПоляОтбора.Вставить("Сценарий");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		РеквизитыНФП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.НефинансовыйПоказатель, "ПоОрганизациям, ПоСценариям, ПоПодразделениям");
		Если Реквизиты.ИспользоватьФильтрПоОрганизации
			И РеквизитыНФП.ПоОрганизациям Тогда
			ПоляОтбора.Вставить("Организация");
		КонецЕсли;
	
		Если Реквизиты.ИспользоватьФильтрПоПодразделению
			И РеквизитыНФП.ПоПодразделениям Тогда
			ПоляОтбора.Вставить("Подразделение");
		КонецЕсли;
		
		Если Реквизиты.ИспользоватьФильтрПоСценарию
			И РеквизитыНФП.ПоСценариям Тогда
			ПоляОтбора.Вставить("Сценарий");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если СхемаНастройки = Неопределено Тогда
		СхемаНастройки = СхемаОтбораИзмерения(ПоляОтбора);
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаНастройки.Схема, Реквизиты.УникальныйИдентификатор);
	
	ТребуетсяЗагрузкаНастроекВКомпоновщик = Ложь;
	Если КомпоновщикПриемник = Неопределено Тогда
		КомпоновщикПриемник = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СхемаНастройки.Схема);
		
		ТребуетсяЗагрузкаНастроекВКомпоновщик = Истина;
	КонецЕсли;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикПриемник.Инициализировать(ИсточникДоступныхНастроек);
	
	Если ТребуетсяЗагрузкаНастроекВКомпоновщик Тогда
		КомпоновщикПриемник.ЗагрузитьНастройки(СхемаНастройки.Настройки);
	КонецЕсли;
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Если ТипЗнч(ДополнительныйОтбор) = Тип("ХранилищеЗначения") Тогда
			НастройкиПоказателя = ДополнительныйОтбор.Получить();
		Иначе
			НастройкиПоказателя = ДополнительныйОтбор;
		КонецЕсли;
		Если НастройкиПоказателя <> Неопределено Тогда
			КомпоновщикПриемник.ЗагрузитьНастройки(НастройкиПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикПриемник.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Измерения = Новый Структура("Сценарий,Организация,Подразделение,НаправлениеДеятельности");
	Для Каждого Поле Из ПоляОтбора Цикл
		Если Измерения.Свойство(Поле.Ключ)
			И ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикПриемник.Настройки.Отбор, Поле.Ключ) = Неопределено Тогда
			Элемент = ФинансоваяОтчетностьСервер.НовыйОтбор(КомпоновщикПриемник.Настройки.Отбор, Поле.Ключ);
			Элемент.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СписокКУдалению = Новый Массив;
	БюджетнаяОтчетностьВыводСервер.ПолучитьНастраиваемыеЭлементыОтбора(КомпоновщикПриемник.Настройки.Отбор, СписокКУдалению, "");
	Для Каждого ЭлементКУдалению Из СписокКУдалению Цикл
		КомпоновщикПриемник.Настройки.Отбор.Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	#Область УдалениеНеиспользуемыхЭлементов
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если НЕ Реквизиты.ИспользоватьФильтрПоОрганизации Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Организация");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
	
		Если НЕ Реквизиты.ИспользоватьФильтрПоПодразделению Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Подразделение");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Реквизиты.ИспользоватьФильтрПоСценарию Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Сценарий");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	КомпоновщикПриемник.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Процедура сохраняет настроенную структуру вида отчета.
//
// Параметры:
//  ВидОтчета - СправочникСсылка.ВидыФинансовыхОтчетов, СправочникСсылка.ВидыБюджетов - Ссылка на элемент справочника,
//  					структуру которого сохраняем.
//  ЭлементыВидаОтчета - ДеревоЗначений - Дерево элементов вида отчета или вида бюджета.
//  ПометкаУдаления - Булево - Признак пометки удаления.
//
Процедура ЗаписатьСтруктуруВидаОтчета(ВидОтчета, ЭлементыВидаОтчета, ПометкаУдаления) Экспорт
	
	ИспользуемыеЭлементыВидаОтчета = Новый СписокЗначений;
	ПараметрыЗаписиВСтруктуру = ПолучитьПараметрыЗаписиВСтруктуруОтчета();
	ПараметрыЗаписиВСтруктуру.ВидОтчета       = ВидОтчета;
	ПараметрыЗаписиВСтруктуру.ПометкаУдаления = ПометкаУдаления;
	ЗаполнитьИзмеренияСИзменениямиВИсточникахЗаполнения(ЭлементыВидаОтчета, ПараметрыЗаписиВСтруктуру.ИзмеренияКПерезаписи);
	
	ОбойтиЗаписатьСтруктуруВидаОтчета(ЭлементыВидаОтчета, ПараметрыЗаписиВСтруктуру, ИспользуемыеЭлементыВидаОтчета);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетов.Ссылка КАК Ссылка,
	|	ЭлементыФинансовыхОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
	|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка В (&Ссылка)";

	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Ссылка", ИспользуемыеЭлементыВидаОтчета);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект <> Неопределено Тогда
			Попытка
				Объект.Удалить();
			Исключение
				КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
					ИмяСобытияЖурнала = НСтр("ru = 'Запись вида бюджета';
											|en = 'Save budget profile'", КодЯзыка);
					ТекстОшибки = НСтр("ru = 'При записи вида бюджета %1 не удалось удалить элемент финансового отчета: %2 по причине: %3';
										|en = 'Cannot delete financial report item: %2 while saving the budget profile %1. Reason: %3'",
						КодЯзыка);
				Иначе
					ИмяСобытияЖурнала = НСтр("ru = 'Запись вида финансового отчета';
											|en = 'Save financial report type'", КодЯзыка);
					ТекстОшибки = НСтр("ru = 'При записи вида финансового отчета %1 не удалось удалить элемент финансового отчета: %2 по причине: %3';
										|en = 'Cannot delete financial report item: %2 while saving the financial report type %1. Reason: %3'",
						КодЯзыка);
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидОтчета, Выборка.Наименование,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала,
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.ЭлементыФинансовыхОтчетов,
						Выборка.Ссылка,
						ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//++ НЕ УТКА
#Область МеждународнаяОтчетность

// Формирует и настраивает схему компоновки данных для получения значений показателя финансовой отчетности.
// Параметры:
//  Показатель - ДеревоЗначений, СтрокаДереваЗначений - описание:
//  это результат запроса по макету СКД Справочник.ВидыФинансовыхОтчетов.ДеревоЭлементовОтчета.
//  	* ЕстьНастройки - Булево -
//  	* ДополнительныйОтбор - ХранилищеЗначения -
//  	* Комментарий - Строка -
//  	* ОбратныйЗнак - Булево -
//  	* СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//  	* ЭлементОтчетаСвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//  	* НаименованиеДляПечати - Строка -
//  	* ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
//  	* ВидОтчета - СправочникСсылка.ВидыФинансовыхОтчетов, СправочникСсылка.ВидыБюджетов -
//  	* Код - Число -
//  	* Наименование - Строка -
//  	* Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//  	* ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//  	* Примечание - Строка -
//  Измерения - СписокЗначений - Список измерения для текущего положения показателя в дереве отчета, если есть.
//  Субконто - Структура - Описание вида субконто для текущего положения показателя в дереве отчета. Описание:
//  	* Значение - Структура - содержит:
//  		** Вид - Произвольный -
//  		** ЕстьНастройки - Булево -
//  		** Наименование - Строка -
//  		** Отбор - ХранилищеЗначения - содержит в себе структуру со значением типа ОтборКомпоновкиДанных
//  Ресурс - Строка - Имя ресурса бухгалтерии из которого получать значение показателя.
//
// Возвращаемое значение:
//   Структура - Поля структуры:
//     *Схема - СхемаКомпоновкиДанных - схема получения значений показателя отчета
//     *Настройки - НастройкиКомпоновкиДанных - настройки схемы получения значений показателя отчета.
//
Функция СхемаПоказателя(Показатель, Измерения = Неопределено, Субконто = Неопределено, Ресурс = "Сумма") Экспорт
	
	Если Показатель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		СхемаПоказателя = СхемаМонетарногоПоказателя(Показатель, Измерения, Субконто, Ресурс);
	ИначеЕсли Показатель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		СхемаПоказателя = СхемаПроизводногоПоказателя(Показатель, Измерения, Субконто);
	Иначе
		СхемаПоказателя = СхемаНемонетарногоПоказателя(Показатель, Измерения);
	КонецЕсли;
	Возврат СхемаПоказателя;

КонецФункции

#КонецОбласти
//-- НЕ УТКА
#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Или Не Параметры.Свойство("ВидЭлемента") Тогда
		ВызватьИсключение НСтр("ru = 'Содержимое служебного справочника ""Элементы финансовых отчетов"" 
									|редактируется в справочниках-владельцах 
									|""Виды бюджетов"" и ""Виды финансовых отчетов"".';
									|en = 'To edit content of the ""Financial report items"" service catalog 
									|, use 
									|""Budget profiles"" or ""Financial report types"" owner catalogs.'");
	КонецЕсли;
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйРежим = Неопределено;
	Параметры.Свойство("ДополнительныйРежимФормы", ДополнительныйРежим);
	
	ОткрытиеФормыЭлементаБюджетногоОтчета = Параметры.Свойство("МодельБюджетирования");
	
	Если Параметры.Свойство("ВидЭлемента") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(
			Параметры.ВидЭлемента,
			Параметры.АдресЭлементаВХранилище,
			ДополнительныйРежим,
			ОткрытиеФормыЭлементаБюджетногоОтчета).ИмяФормы;
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(
			Параметры.Ключ.ВидЭлемента,
			Параметры.Ключ,
			ДополнительныйРежим,
			ОткрытиеФормыЭлементаБюджетногоОтчета).ИмяФормы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция СхемаОтбораИзмерения(СтруктураИменИзмерений)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ФинОтчеты.НоваяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКД);
	
	ИмяИзмерения = "";
	ДобавлятьСуффикс = Ложь;
	Для Каждого КлючИЗначение Из СтруктураИменИзмерений Цикл
		
		ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", ",
			|");
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
			
			ИмяПараметраВидаАналитики = "ВидАналитики" + КлючИЗначение.Ключ;
			
			ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
			ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "СтатьяБюджетов.КоличествоИспользуемыхАналитик";
			ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "СтатьяБюджетов.ВидАналитики";
			ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
			ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
			
			ВыражениеАналитики = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
			
			ИмяИзмерения = ИмяИзмерения + "(" + ВыражениеАналитики + ")" + ?(ДобавлятьСуффикс, ".*", "") + " КАК " + КлючИЗначение.Ключ;
			
			Параметр = СхемаКД.Параметры.Добавить();
			Параметр.Имя = ИмяПараметраВидаАналитики;
			Параметр.Значение = КлючИЗначение.Значение;
			Параметр.ВключатьВДоступныеПоля = Ложь;
			Параметр.ОграничениеИспользования = Истина;
			
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,КлючИЗначение.Значение.Наименование);
			ПолеНабора.ТипЗначения = КлючИЗначение.Значение.ТипЗначения;
			
		Иначе
			
			КоллекцияОбъектовМД = Метаданные.РегистрыНакопления.ОборотыБюджетов.Измерения; // КоллекцияОбъектовМетаданных -
			Измерение = КоллекцияОбъектовМД.Найти(КлючИЗначение.Ключ);
			Заголовок = КлючИЗначение.Ключ;
			Если Измерение <> Неопределено Тогда
				Заголовок = Измерение.Синоним;
			КонецЕсли;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,Заголовок);
			ИмяИзмерения = ИмяИзмерения + КлючИЗначение.Ключ + ?(ДобавлятьСуффикс, ".*", "") + " КАК " + КлючИЗначение.Ключ;
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.КоличествоОборот,
	|	ОборотыБюджетовОбороты.СуммаУпрОборот,
	|	ОборотыБюджетовОбороты.СуммаРеглОборот
	|ИЗ
	|	&ТаблицаИсточника КАК ОборотыБюджетовОбороты";
	ТаблицаИсточника = "РегистрНакопления.ОборотыБюджетов.Обороты(, , , %1)";
	Если СтруктураИменИзмерений.Количество() Тогда
		ТаблицаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТаблицаИсточника, "{" + ИмяИзмерения + "}");
	Иначе
		ТаблицаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТаблицаИсточника, "");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточника", ТаблицаИсточника);
	
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос = ТекстЗапроса;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаОтбораПоказателя(СтруктураИменИзмерений, ТипИтога = Неопределено)
	
	Если ТипИтога = Неопределено Тогда
		ТипИтога = ПредопределенноеЗначение("Перечисление.ТипыИтогов.Сальдо");
	КонецЕсли;
	ЭтоОборот = СтрНайти(Строка(ТипИтога), "Сальдо") = 0;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ФинОтчеты.НоваяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКД);
	
	ИмяИзмерения = "";
	ОтборПостроителя = "";
	РегламентированныйУчет = Ложь;
	Для Каждого КлючИЗначение Из СтруктураИменИзмерений Цикл
		
		ИмяИзмерения 		= ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
		ОтборПостроителя 	= ОтборПостроителя + ?(ПустаяСтрока(ОтборПостроителя), "", "," + Символы.ПС);
		
		Если ТипЗнч(КлючИЗначение.Значение) = РеглУчетКлиентСервер.ТипПланСчетов()
			//++ НЕ УТКА
			ИЛИ ТипЗнч(КлючИЗначение.Значение) =  МеждународныйУчетКлиентСервер.ТипПланСчетов()
			//-- НЕ УТКА
			Тогда
			
			СчетПланаСчетов = КлючИЗначение.Значение;
			Если СчетПланаСчетов.Валютный Тогда
				ИмяИзмерения = ИмяИзмерения + "(Валюта).* КАК Валюта";
			КонецЕсли;
			Сч = 1;
			Для Каждого СубконтоСчета Из СчетПланаСчетов.ВидыСубконто Цикл
				ИмяСубконто = "Субконто" + Строка(Сч);
				ЗаголовокСубконто = СубконтоСчета.ВидСубконто.Наименование;
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,ИмяСубконто,,ЗаголовокСубконто);
				ПолеНабора.ТипЗначения = СубконтоСчета.ВидСубконто.ТипЗначения;
				ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
				ИмяИзмерения = ИмяИзмерения + "("+ИмяСубконто + ").* КАК " + ИмяСубконто;
				ОтборПостроителя = ОтборПостроителя + ?(ПустаяСтрока(ОтборПостроителя), "", "," + Символы.ПС);
				ОтборПостроителя = ОтборПостроителя + "ДанныеРегистра."+ИмяСубконто + ".*";
				Сч = Сч + 1;
			КонецЦикла;
			
			Если ЭтоОборот Тогда
				ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
				ИмяИзмерения = ИмяИзмерения + "(ВалютаКор).* КАК ВалютаКор";
				ЗаголовокНабора = НСтр("ru = 'Кор. валюта';
										|en = 'Cor. currency'");
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,"ВалютаКор",,ЗаголовокНабора);
				ОтборПоКорСчету = "{(КорСчет).* КАК КорСчет}";
				ЗаголовокПоля = НСтр("ru = 'Кор. счет';
									|en = 'Corr.account'");
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,"КорСчет",,ЗаголовокПоля);
				Для Сч = 1 По 3 Цикл
					ИмяСубконто = "Субконто" + Строка(Сч);
					ИмяКорСубконто = "Кор" + ИмяСубконто;
					ЗаголовокПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Кор. Субконто%1';
							|en = 'Corr. Extra dimension%1'"),
						Сч);
					ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,ИмяКорСубконто,,ЗаголовокПоля);
					ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
					ИмяИзмерения = ИмяИзмерения + "("+ИмяКорСубконто + ").* КАК " + ИмяКорСубконто;
					ОтборПостроителя = ОтборПостроителя + ?(ПустаяСтрока(ОтборПостроителя), "", "," + Символы.ПС);
					ОтборПостроителя = ОтборПостроителя + "ДанныеРегистра."+ИмяКорСубконто + ".*";
				КонецЦикла;
			КонецЕсли;
			
			Если ТипЗнч(СчетПланаСчетов) = РеглУчетКлиентСервер.ТипПланСчетов() Тогда
				РегламентированныйУчет = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = РеглУчетКлиентСервер.ТипВидСубконто()
			//++ НЕ УТКА
			ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные")
			//-- НЕ УТКА
			Тогда
			
			ОтборПоВидуСубконто = "{(&ВидСубконто)}";
			Параметр = СхемаКД.Параметры.Добавить();
			Параметр.Имя = "ВидСубконто";
			Параметр.Значение = КлючИЗначение.Значение;
			Параметр.ВключатьВДоступныеПоля = Ложь;
			Параметр.ОграничениеИспользования = Истина;
			
			ЗаголовокПоля = КлючИЗначение.Значение.Наименование;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,
				КлючИЗначение.Ключ,,
				ЗаголовокПоля,
				КлючИЗначение.Значение.ТипЗначения);
			ИмяИзмерения = ИмяИзмерения + "("+КлючИЗначение.Ключ + ").* КАК " + КлючИЗначение.Ключ;
			
			Если ТипЗнч(КлючИЗначение.Значение) = РеглУчетКлиентСервер.ТипВидСубконто() Тогда
				РегламентированныйУчет = Истина;
			КонецЕсли;
			
		Иначе
			
			КоллекцияОбъектовМД = Метаданные.РегистрыНакопления.ОборотыБюджетов.Измерения; // КоллекцияОбъектовМетаданных -
			Измерение = КоллекцияОбъектовМД.Найти(КлючИЗначение.Ключ);
			Заголовок = КлючИЗначение.Ключ;
			Если Измерение <> Неопределено Тогда
				Заголовок = Измерение.Синоним;
			КонецЕсли;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,Заголовок);
			ИмяИзмерения = "("+КлючИЗначение.Ключ + ").* КАК " + КлючИЗначение.Ключ;
			
		КонецЕсли;
	КонецЦикла;
	ИмяИзмерения = ?(ПустаяСтрока(ИмяИзмерения),"","{" + ИмяИзмерения + "}");
	ОтборПостроителя = ?(ПустаяСтрока(ОтборПостроителя),"","{ГДЕ" + Символы.ПС + ОтборПостроителя + "}");

	Источник = РеглУчетКлиентСервер.ИмяПланаСчетов();
	//++ НЕ УТКА
	Если НЕ РегламентированныйУчет Тогда
		Источник =  МеждународныйУчетКлиентСервер.ИмяПланаСчетов();
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ЭтоОборот Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеРегистра.Субконто1,
		|	ДанныеРегистра.Субконто2,
		|	ДанныеРегистра.Субконто3,
		|	ДанныеРегистра.КорСчет,
		|	ДанныеРегистра.КорСубконто1,
		|	ДанныеРегистра.КорСубконто2,
		|	ДанныеРегистра.КорСубконто3
		|ИЗ
		|	&ТаблицаИсточника КАК ДанныеРегистра";
		ТаблицаИсточника = СтрШаблон("РегистрБухгалтерии.%1.Обороты(, , , , , %2, %3, )",
				Источник, ИмяИзмерения, ОтборПоКорСчету);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточника", ТаблицаИсточника);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеРегистра.Субконто1,
		|	ДанныеРегистра.Субконто2,
		|	ДанныеРегистра.Субконто3,
		|	ДанныеРегистра.СуммаОстаток КАК Значение
		|ИЗ
		|	&ТаблицаИсточника КАК ДанныеРегистра";
		ТаблицаИсточника = СтрШаблон("РегистрБухгалтерии.%1.Остатки(, , %2, %3)",
				Источник, ОтборПоВидуСубконто, ИмяИзмерения);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточника", ТаблицаИсточника);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ОтборПостроителя;
	
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос = ТекстЗапроса;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция ПолучитьВыборкуАналитикЭлемента(Ссылка)
	
	ИмяТаблицы = "";
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
		ИмяТаблицы = "СтатьиБюджетов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
		ИмяТаблицы = "ПоказателиБюджетов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		ИмяТаблицы = "НефинансовыеПоказателиБюджетов";
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ШаблонТекстаПодзапроса =
	"			ВЫБРАТЬ
	|				&ПолеВидаАналитики
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник";
	ТекстыПодзапроса = Новый Массив;
	РазделительПодзапроса = "
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	ТекстВыборкаВидовАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстВыборкаВидовАналитик = ТекстВыборкаВидовАналитик + ?(ТекстВыборкаВидовАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Справочник.ВидАналитики%1 КАК ВидАналитики%1",
				НомерАналитики);
		
		ТекстПодзапроса = СтрЗаменить(ШаблонТекстаПодзапроса, "&ПолеВидаАналитики", "Справочник.ВидАналитики" + НомерАналитики);
		ТекстыПодзапроса.Добавить(ТекстПодзапроса);
	КонецЦикла;
	ТекстПодзапроса = СокрЛП(СтрСоединить(ТекстыПодзапроса, РазделительПодзапроса));
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстВыборкаВидовАналитик
	|ПОМЕСТИТЬ ТаблицаВидовАналитик
	|ИЗ
	|	&Справочник_ИмяТаблицы КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Справочник_ИмяТаблицы", "Справочник." + ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкаВидовАналитик", ТекстВыборкаВидовАналитик);
	
	ТекстЗапроса = ТекстЗапроса + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ "ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка,
	|	АналитикиСтатейБюджетов.ИмяПредопределенныхДанных
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Ссылка В
	|			(&ТекстПодзапроса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикиСтатейБюджетов.Наименование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПодзапроса", ТекстПодзапроса);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ЕстьПериодВРодителях(Знач СтрокаДерева, Периодичность)
	
	Пока СтрокаДерева <> Неопределено
		И СтрокаДерева.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Строки
		И СтрокаДерева.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = Неопределено;
			Если ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					СтрокаДерева.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭлементОтчета) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					СтрокаДерева.ЭлементОтчета, "ТипИзмерения");
			Иначе
				Если ТипЗнч(СтрокаДерева.СтатьяПоказательТипИзмерения) = Тип("ПеречислениеСсылка.Периодичность") Тогда
					ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
						СтрокаДерева.АдресСтруктурыЭлемента, "Периодичность");
				ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭлементОтчета) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
						СтрокаДерева.ЭлементОтчета, "Периодичность");
				Иначе
					Периодичность = СтрокаДерева.СтатьяПоказательТипИзмерения
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДерева = СтрокаДерева.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПериодВПодчиненных(Знач СтрокаДерева, Периодичность)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если ПодчиненнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = Неопределено;
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.АдресСтруктурыЭлемента) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					ПодчиненнаяСтрока.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ЭлементОтчета) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					ПодчиненнаяСтрока.ЭлементОтчета, "ТипИзмерения");
			Иначе
				Если ТипЗнч(ПодчиненнаяСтрока.СтатьяПоказательТипИзмерения) = Тип("ПеречислениеСсылка.Периодичность") Тогда
					ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Если ЗначениеЗаполнено(ПодчиненнаяСтрока.АдресСтруктурыЭлемента) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
						ПодчиненнаяСтрока.АдресСтруктурыЭлемента, "Периодичность");
				ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ЭлементОтчета) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
						ПодчиненнаяСтрока.ЭлементОтчета, "Периодичность");
				Иначе
					Периодичность = ПодчиненнаяСтрока.СтатьяПоказательТипИзмерения
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьПериодВПодчиненных(ПодчиненнаяСтрока, Периодичность) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Если Сервер Тогда

Функция ЭлементРазвернутПоПериоду(Параметры, ПериодичностьГруппировки = Неопределено) Экспорт
	
	ДеревоЭлементов = ПолучитьИзВременногоХранилища(Параметры.АдресЭлементовОтчета);
	Если ЗначениеЗаполнено(Параметры.АдресТаблицыЭлементов) Тогда
		ТаблицаЭлементов = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыЭлементов); // см. БюджетнаяОтчетностьРасчетКэшаСервер.НовыйТаблицаЭлементов
	Иначе
		ТаблицаЭлементов = Неопределено;
	КонецЕсли;
	
	Если ТаблицаЭлементов = Неопределено Тогда
		
		СтрокаДерева = ДеревоЭлементов.Строки.Найти(Параметры.АдресРедактируемогоЭлемента, "АдресСтруктурыЭлемента", Истина);
		КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
			Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		ИсточникПодчиненных = Неопределено;
		Если КорневойЭлемент <> Неопределено Тогда
			ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(КорневойЭлемент,
				"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
		КонецЕсли;
		КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
			Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		Если КорневойЭлемент <> Неопределено Тогда
			ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(КорневойЭлемент,
				"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
		КонецЕсли;
		
		ЕстьПериод = ЕстьПериодВРодителях(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ?(ИсточникПодчиненных = Неопределено, Ложь, ЕстьПериодВПодчиненных(ИсточникПодчиненных, ПериодичностьГруппировки));
		
	Иначе
		
		ЯчейкаМатрицы = ТаблицаЭлементов.Найти(Параметры.АдресРедактируемогоЭлемента, "Элемент");
		
		СтрокаДерева = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Строка, "АдресСтруктурыЭлемента", Истина);
		КолонкаДерева = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Колонка, "АдресСтруктурыЭлемента", Истина);
		
		ЕстьПериод = ЕстьПериодВРодителях(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВРодителях(КолонкаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(КолонкаДерева, ПериодичностьГруппировки);
		
	КонецЕсли;
	
	Возврат ЕстьПериод;
	
КонецФункции

#КонецЕсли

Функция РазобратьИмяОперандаНаСоставляющие(ИмяОперанда) Экспорт
	
	ПозицияРазделителя = СтрНайти(ИмяОперанда, ";");
	Если ПозицияРазделителя Тогда
		Строка = Лев(ИмяОперанда, ПозицияРазделителя - 1);
		Колонка = Сред(ИмяОперанда, ПозицияРазделителя + 1);
		Строка = СокрЛ(Строка);
		Колонка = СокрЛ(Колонка);
	Иначе
		Строка = СокрЛ(ИмяОперанда);
		Колонка = "";
	КонецЕсли;
	
	СтрокаФиксированная = БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Строка, "$");
	Если СтрокаФиксированная Тогда
		Строка = Сред(Строка, 2);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Колонка) Тогда
		КолонкаФиксированная = СтрокаФиксированная;
	Иначе
		КолонкаФиксированная = БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Колонка, "$");
		Если КолонкаФиксированная Тогда
			Колонка = Сред(Колонка, 2);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Строка", Строка);
	Результат.Вставить("Колонка", Колонка);
	Результат.Вставить("СтрокаФиксированная", СтрокаФиксированная);
	Результат.Вставить("КолонкаФиксированная", КолонкаФиксированная);
	
	Возврат Результат;
	
КонецФункции

#Область ВыводДереваНастройкиЯчеек


// Выводит ячейки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения -
// 	Группировка - СтрокаДереваЗначений -:
// 	 *НаименованиеДляПечати - Строка -
// 	 *АдресСтруктурыЭлемента - Строка - 
// 	ЭлементыТаблицы - ТаблицаЗначений -:
// 	 *Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка -
// 	 *Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка -
// 	 *Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка -
// 	ДеревоСтрок - КоллекцияСтрокДереваЗначений -:
// 	 *НаименованиеДляПечати - Строка -
// 	 *АдресСтруктурыЭлемента - Строка - 
// 	НомерСтроки - Число -
// 	НомерПредыдущейКолонки - Число -
// 	Глубина - Число -
// Возвращаемое значение:
// 	Число - Количество выведенных элементов.
Функция ВывестиЯчейки(Форма, Группировка, ЭлементыТаблицы,
						ДеревоСтрок, НомерСтроки, НомерПредыдущейКолонки = 3, Знач Глубина = 0)
	
	
	Элементов = 0;
	ЭтоВидОтчета = Ложь;
	ДопРежимФормы = Неопределено;
	Если Форма.Параметры.Свойство("ДополнительныйРежимФормы", ДопРежимФормы) Тогда
		ЭтоВидОтчета = ДопРежимФормы = Перечисления.ДополнительныеРежимыЭлементовОтчетов.ВидОтчета;
	КонецЕсли;
	
	Для Каждого СтрокаПоказателя Из ДеревоСтрок Цикл
		
		НомерКолонки = НомерПредыдущейКолонки + Элементов;
		
		ПодчиненныхЭлементов = ВывестиЯчейки(Форма, Группировка, ЭлементыТаблицы,
											СтрокаПоказателя.Строки, НомерСтроки, НомерКолонки, Глубина);
		
		Если ПодчиненныхЭлементов Тогда
			Элементов = Элементов + ПодчиненныхЭлементов;
			Продолжить; // расшифровку установили в рекурсивном вызове
		Иначе
			Элементов = Элементов + 1;
		КонецЕсли;
		
		// установка расшифровки области
		Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		
		СтруктураРасшифровки = Новый Структура("Строка, Колонка, ВидЭлемента, ЭлементОтчета, ЭтоСвязанный");
		СтруктураРасшифровки.ЭтоСвязанный = Ложь;

		СтруктураРасшифровки.Строка = Новый Структура("Наименование, ЭлементОтчета", 
										Группировка.НаименованиеДляПечати, Группировка.АдресСтруктурыЭлемента);
		СтруктураРасшифровки.Колонка = Новый Структура("Наименование, ЭлементОтчета",
										СтрокаПоказателя.НаименованиеДляПечати, СтрокаПоказателя.АдресСтруктурыЭлемента);
		
		ЭтоПредопределеннаяФормула = Ложь;
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресСтруктурыЭлемента);
		Если ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе")
			ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Группа")
			ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			ЭлементФормулы = СтрокаПоказателя.АдресСтруктурыЭлемента;
			ЭтоПредопределеннаяФормула = Истина;
		Иначе
			ДанныеЭлемента = ПолучитьИзВременногоХранилища(Группировка.АдресСтруктурыЭлемента);
			Если ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе")
				ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Группа")
				//ИЛИ (ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Измерение") И ЭтоВидОтчета)
				ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
				ЭлементФормулы = Группировка.АдресСтруктурыЭлемента;
				ЭтоПредопределеннаяФормула = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьЭлементПоПересечениюСтрокКолонок = Истина;
		ВидТаблицы = Неопределено;
		Если Форма.Параметры.Свойство("ПроверятьВидТаблицы") Тогда
			Форма.Параметры.Свойство("ВидТаблицы", ВидТаблицы);
			Если ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
				ИЛИ ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
				ВыводитьЭлементПоПересечениюСтрокКолонок = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыводитьЭлементПоПересечениюСтрокКолонок Тогда
			
			Если Не ЭтоПредопределеннаяФормула Тогда
				
				СтруктураПоиска = Новый Структура("Строка, Колонка");
				СтруктураПоиска.Строка = Группировка.АдресСтруктурыЭлемента;
				СтруктураПоиска.Колонка = СтрокаПоказателя.АдресСтруктурыЭлемента;
				
				СтрокиЭлемента = ЭлементыТаблицы.НайтиСтроки(СтруктураПоиска);
				Если СтрокиЭлемента.Количество() Тогда
					СтрокаЭлемента = СтрокиЭлемента[0];
					Если ТипЗнч(СтрокаЭлемента.Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов")
						И ЗначениеЗаполнено(СтрокаЭлемента.Элемент) Тогда
						СтрокаЭлемента.Элемент = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
									СтрокаЭлемента.Элемент, 
									Форма.ИдентификаторГлавногоХранилища);
					КонецЕсли;
					ДанныеЭлемента = ПолучитьИзВременногоХранилища(СтрокаЭлемента.Элемент);
					СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
					СтруктураРасшифровки.ЭлементОтчета = СтрокаЭлемента.Элемент;
				КонецЕсли;
				
			Иначе
				
				СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
				СтруктураРасшифровки.ЭлементОтчета = ЭлементФормулы;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЭтоВидОтчета И ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Измерение") Тогда
			СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
			СтруктураРасшифровки.ЭлементОтчета = Неопределено;
		КонецЕсли;
		
		Область.Расшифровка = СтруктураРасшифровки;
		УстановитьТекстЯчейки(Форма, Область.Имя);
		Оформить(Область, "Ячейка");
		
	КонецЦикла;
	
	Возврат Элементов;
	
КонецФункции

Функция ВывестиДеревоВПоказатели(Форма, ПерваяСтрока, Строки, Знач Глубина, ГлубинаВсего, Знач НомерПредыдущейКолонки = 3)
	
	Элементов = 0;
	
	Для Каждого СтрокаПоказателя Из Строки Цикл
		
		НомерКолонки = НомерПредыдущейКолонки + Элементов;
		
		Выводить = Истина;
		Если СтрокаПоказателя.ВидЭлемента = ВидЭлемента("Группа") Тогда
			Выводить = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
						СтрокаПоказателя.АдресСтруктурыЭлемента, "ВыводитьЗаголовокЭлемента") = Истина;
		КонецЕсли;
		
		НоваяГлубина = Глубина;
		Если Выводить Тогда
		
			НомерСтроки = ПерваяСтрока + Глубина;
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки); // ОбластьЯчеекТабличногоДокумента
			Область.Текст = СтрокаПоказателя.НаименованиеДляПечати;
			Область.Расшифровка = СтрокаПоказателя.АдресСтруктурыЭлемента;
			Область.ШиринаКолонки = 15;
			
			НоваяГлубина = Глубина + 1;
			
		КонецЕсли;
		
		ПодчиненныхЭлементов = ВывестиДеревоВПоказатели(Форма,
					ПерваяСтрока,
					СтрокаПоказателя.Строки,
					НоваяГлубина,
					ГлубинаВсего,
					НомерКолонки);
		
		Если ПодчиненныхЭлементов Тогда
			Элементов = Элементов + ПодчиненныхЭлементов;
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + ПодчиненныхЭлементов - 1); // ОбластьЯчеекТабличногоДокумента
		Иначе
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, ПерваяСтрока + ГлубинаВсего); // ОбластьЯчеекТабличногоДокумента
			Элементов = Элементов + 1;
		КонецЕсли;
		
		Если Выводить Тогда
			
			Область.Объединить();
			Оформить(Область, "ШапкаЯчейки");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементов;
	
КонецФункции

Процедура Оформить(Область, Режим)
	
	ЖирнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ТонкаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	Если Режим = "Строка" Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь);
		Область.Обвести(ЖирнаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "СтрокаОбъединенная" Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь);
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "СтрокаИтог" Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.Обвести(ЖирнаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "ШапкаЯчейки" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
	ИначеЕсли Режим = "ЗаголовокТаблицы" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
	ИначеЕсли Режим = "Шапка" Тогда
		Область.Обвести(ЖирнаяЛиния, ЖирнаяЛиния, ЖирнаяЛиния, ЖирнаяЛиния);
	ИначеЕсли Режим = "Ячейка" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 8);
	ИначеЕсли Режим = "ЯчейкаИтог" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоследующаяСтрокаОбъединенаСТекущей(СтрокаПоказателя)
	
	Если СтрокаПоказателя.Строки.Количество() = 1 И
		СтрокаПоказателя.Строки[0].ВыводитьВместеСРодительским Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВывестиДеревоВСтроки(Форма, ДеревоСтрок, ПараметрыВывода, ВсегоСтрок,
							Знач Глубина = 0, Знач НомерКолонки = 0)
	
	ЭлементыТаблицы = ПараметрыВывода.ЭлементыТаблицы;
	ДеревоКолонок = ПараметрыВывода.ДеревоКолонок;
	ПерваяСтрока = ПараметрыВывода.ПерваяСтрока;
	ГлубинаОбъединения = ПараметрыВывода.ГлубинаОбъединения;
	
	Начало = ПерваяСтрока + ВсегоСтрок + 1;
	
	БылиЭлементыДляВывода = Ложь;
	Для Каждого СтрокаПоказателя Из ДеревоСтрок Цикл
		
		Выводить = Истина;
		Если СтрокаПоказателя.ВидЭлемента = ВидЭлемента("Группа") Тогда
			Выводить = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					СтрокаПоказателя.АдресСтруктурыЭлемента, "ВыводитьЗаголовокЭлемента");
		КонецЕсли;
		
		НоваяГлубина = Глубина;
		Если Выводить Тогда
			БылиЭлементыДляВывода = Истина;
			
			Если СтрокаПоказателя.ВыводитьВместеСРодительским = Истина Тогда
				НомерКолонкиТекущий = НомерКолонки + 1;
				РежимОформления = "СтрокаОбъединенная";
			Иначе
				НомерКолонкиТекущий = 0;
				ВсегоСтрок = ВсегоСтрок + 1;
				РежимОформления = "Строка";
			КонецЕсли;
			НомерСтроки 	= ПерваяСтрока + ВсегоСтрок;
			
			ПоследующаяСтрокаОбъединена = ПоследующаяСтрокаОбъединенаСТекущей(СтрокаПоказателя);
			Если ПоследующаяСтрокаОбъединена Тогда
				КонецКолонки = 2 + НомерКолонкиТекущий;
			Иначе
				КонецКолонки = 2 + ГлубинаОбъединения - 1;
			КонецЕсли;
			
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, 2 + НомерКолонкиТекущий, НомерСтроки, КонецКолонки); // ОбластьЯчеекТабличногоДокумента
			Область.Объединить();
			Область.Текст = СтрокаПоказателя.НаименованиеДляПечати;
			Область.Расшифровка = СтрокаПоказателя.АдресСтруктурыЭлемента;
			
			Если СтрокаПоказателя.ВыводитьВместеСРодительским = Ложь Тогда
				Область.Отступ 	= Глубина * 2;
			КонецЕсли;
			
			Оформить(Область, РежимОформления);
			
			Если Не ПоследующаяСтрокаОбъединена Тогда
				ВывестиЯчейки(Форма, СтрокаПоказателя, ЭлементыТаблицы, ДеревоКолонок, НомерСтроки, 3 + ГлубинаОбъединения - 1);
			КонецЕсли;
			
			НоваяГлубина = Глубина + 1;
		КонецЕсли;
		
		ВывестиДеревоВСтроки(Форма,
				СтрокаПоказателя.Строки,
				ПараметрыВывода,
				ВсегоСтрок,
				НоваяГлубина,
				НомерКолонкиТекущий);
		
	КонецЦикла;
	
	Конец = ПерваяСтрока + ВсегоСтрок;
	
	Если Глубина > 0 И Начало <= Конец И БылиЭлементыДляВывода Тогда
	
		Форма.ПредставлениеОтчета.Область(Начало, , Конец).Сгруппировать(Глубина);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат Перечисления.ВидыЭлементовФинансовогоОтчета[ИмяВидаЭлемента];
	
КонецФункции

#КонецОбласти

#Область НастройкаДополнительныхПолей


// Заполняет представление доп. полей
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура -
// 	НадписьДополнительныхПолей - ПолеФормы, ГруппаФормы, КомандаФормы, ТаблицаФормы - 
Процедура ЗаполнитьПредставлениеДополнительныхПолей(Объект, НадписьДополнительныхПолей) Экспорт
	
	МассивПолей = Объект.ДополнительныеПоля.Выгрузить(,"Наименование").ВыгрузитьКолонку("Наименование");
	Если МассивПолей.Количество() Тогда
		Представление = СтрСоединить(МассивПолей, ", ");
		ТекстЗаголовка = НСтр("ru = 'Дополнительные поля: %1';
								|en = 'Additional fields: %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Представление);
		НадписьДополнительныхПолей.Заголовок = ТекстЗаголовка;
	Иначе
		ТекстЗаголовка = НСтр("ru = '<настроить отображение дополнительных полей>';
								|en = '<configure additional field display>'");
		НадписьДополнительныхПолей.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВидаОтчета

// Рекурсивно записывает структуру вида финансового отчета из переданного дерева в подчиненный справочник ЭлементыФинансовыхОтчетов.
//
// Параметры
//  ЭлементыВидаОтчета	- ДеревоЗначений - структура (состав и порядок) вида отчета
//  ПараметрыЗаписиВСтруктуру - Структура
//  * ВидОтчета 		- СправочникСсылка.ВидыБюджетов, СправочникСсылка.ВидыФинансовыхОтчетов - владелец элементов видов отчетов
//  * ПометкаУдаления	- Булево - Флаг пометки удаления вида отчета
//  * ИзмеренияКПерезаписи - Массив - Массив уже существующих элементов-измерений, которые необходимо обновить для
//  									актуализации источников заполнения
//  ИспользуемыеЭлементыВидаОтчета - Массив - массив элементов вида отчета
//  Родитель  			- СправочникСсылка.ЭлементыФинансовыхОтчетов - родитель текущего элемента
//  ДопПорядок  		- Число - номер по порядку начиная с самого верхнего элемента дерева в направлении сверху\вниз и слева\направо
//  Кэш					- Неопределено
//  					- ТаблицаЗначений - кэш свойств элементов отчета.
//
Процедура ОбойтиЗаписатьСтруктуруВидаОтчета(ЭлементыВидаОтчета, ПараметрыЗаписиВСтруктуру, ИспользуемыеЭлементыВидаОтчета,
											Родитель = Неопределено, ДопПорядок = 0, Кэш = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		Элементы = ЭлементыВидаОтчета.Строки[0].Строки;
	Иначе
		Элементы = ЭлементыВидаОтчета.Строки;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		СсылкаНового = ВнестиИзмененияВОбъект(Элемент, Родитель, ПараметрыЗаписиВСтруктуру, ДопПорядок, ИспользуемыеЭлементыВидаОтчета, Кэш);
		ОбойтиЗаписатьСтруктуруВидаОтчета(Элемент, ПараметрыЗаписиВСтруктуру, ИспользуемыеЭлементыВидаОтчета, СсылкаНового, ДопПорядок, Кэш);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыЗаписиВСтруктуруОтчета()
	Параметры = Новый Структура;
	Параметры.Вставить("ВидОтчета", Неопределено);
	Параметры.Вставить("ПометкаУдаления", Ложь);
	Параметры.Вставить("ИзмеренияКПерезаписи", Новый Массив);
	
	Возврат Параметры;
КонецФункции

// Заполняет массив ссылками на элементы финансовых отчетов - измерения, для которых были изменены источники заполнения.
// В массиве находятся только не измененные элементы финансовых отчетов (АдресСтруктурыЭлемента = пустая строка).
// 
// Параметры
//  Элемент - ДеревоЗначений - дерево значений элементов отчета
//  		- СтрокаДереваЗначений - строка дерева значений - элементов отчета
//  ИзмененияИсточников - Массив - заполняемый массив элементов СправочникСсылка.ЭлементыФинансовыхОтчетов
//  Кэш - ТаблицаЗначений - см. описание ОбойтиЗаписатьСтруктуруВидаОтчета.
//
Процедура ЗаполнитьИзмеренияСИзменениямиВИсточникахЗаполнения(Знач Элемент, ИзмененияИсточников, Кэш = Неопределено)
	
	Если ТипЗнч(Элемент) = Тип("ДеревоЗначений") Тогда
		
		Строка = Элемент.Строки[0];
		
	Иначе
		
		Строка = Элемент;
		
		Если Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			И ПустаяСтрока(Строка.АдресСтруктурыЭлемента)
			И ЗначениеЗаполнено(Строка.ЭлементОтчета) Тогда
			
			НужноЗаполнениеИсточников = Ложь;
			ЕстьИзмененныеИсточники = Ложь;
			ЭтоЗаполнение = Ложь;
			ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
						Строка.ЭлементОтчета, "ТипИзмерения");
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				НужноЗаполнениеИсточников = Истина;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
							Строка.ЭлементОтчета, "РазрешитьРедактирование") = Истина Тогда
					
					НужноЗаполнениеИсточников = Истина;
					ЭтоЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НужноЗаполнениеИсточников Тогда
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийЭлемента(Кэш,
					Строка, ЭтоЗаполнение);
				ЗаписанныеИсточники = Новый Массив;
				Для каждого СтрокаИсточника Из СписокДоступныхЭлементов Цикл
					Если ТипЗнч(СтрокаИсточника.Элемент) = Тип("Строка") Тогда
						ЕстьИзмененныеИсточники = Истина;
						Прервать;
					Иначе
						ЗаписанныеИсточники.Добавить(СтрокаИсточника.Элемент);
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьИзмененныеИсточники Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Источники.Источник КАК Источник
						|ИЗ
						|	Справочник.ЭлементыФинансовыхОтчетов.ИсточникиЗначений КАК Источники
						|ГДЕ
						|	Источники.Ссылка = &Измерение
						|	И НЕ Источники.Источник В (&ЗаписанныеИсточники)";
					Запрос.УстановитьПараметр("Измерение", Строка.ЭлементОтчета);
					Запрос.УстановитьПараметр("ЗаписанныеИсточники", ЗаписанныеИсточники);
					ЕстьИзмененныеИсточники = НЕ Запрос.Выполнить().Пустой();
					
				КонецЕсли;
			КонецЕсли;
			Если ЕстьИзмененныеИсточники Тогда
				Если ИзмененияИсточников.Найти(Строка.ЭлементОтчета) = Неопределено Тогда
					ИзмененияИсточников.Добавить(Строка.ЭлементОтчета);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиДерева = Строка.Строки;
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		ЗаполнитьИзмеренияСИзменениямиВИсточникахЗаполнения(СтрокаДерева, ИзмененияИсточников, Кэш);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбъектЭлемента(ОписаниеЭлемента, ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента) Тогда
		ОбъектЭлемента = ОписаниеЭлемента.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектЭлемента = Неопределено Тогда
		ОбъектЭлемента = Справочники.ЭлементыФинансовыхОтчетов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(ОписаниеЭлемента) Тогда
			ОбъектЭлемента.УстановитьСсылкуНового(ОписаниеЭлемента);
		ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.Ссылка) Тогда
			ОбъектЭлемента.УстановитьСсылкуНового(ДанныеОбъекта.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектЭлемента;
	
КонецФункции

Процедура ЗаполнитьОбъектПоДаннымВременногоХранилища(Объект, ДанныеОбъекта, Код, Владелец, Родитель)
	
	Объект.Код = Код;
	Объект.Владелец = Владелец;
	Объект.Родитель = Родитель;
	
	Если ДанныеОбъекта.Свойство("Родитель") Тогда
		Суффикс = ", Родитель";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта, , 
		"Код, Владелец" + Суффикс + ", РеквизитыВидаЭлемента, ОперандыФормулы, ЭлементыТаблицы,
		|ДополнительныеПоля, ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений");
		
	Объект.РеквизитыВидаЭлемента.Загрузить(ДанныеОбъекта.РеквизитыВидаЭлемента);
	Объект.ОперандыФормулы.Загрузить(ДанныеОбъекта.ОперандыФормулы);
	Объект.ЭлементыТаблицы.Загрузить(ДанныеОбъекта.ЭлементыТаблицы);
	Объект.ДополнительныеПоля.Загрузить(ДанныеОбъекта.ДополнительныеПоля);
	Объект.ЭлементыОформления.Загрузить(ДанныеОбъекта.ЭлементыОформления);
	Объект.ОформляемыеСтроки.Загрузить(ДанныеОбъекта.ОформляемыеСтроки);
	Объект.ОформляемыеКолонки.Загрузить(ДанныеОбъекта.ОформляемыеКолонки);
	Объект.РасшифровкаПолейОтбораЭО.Загрузить(ДанныеОбъекта.РасшифровкаПолейОтбораЭО);
	Объект.ИсточникиЗначений.Загрузить(ДанныеОбъекта.ИсточникиЗначений);
	
	Если Объект.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы") Тогда
		
		СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					Объект,
					"СтрокаЯчейки");
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
			СсылкаНаЭлемент = ПолучитьИзВременногоХранилища(
							СсылкаНаЭлемент); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
			Если СсылкаНаЭлемент <> Неопределено Тогда
				СсылкаНаЭлемент = СсылкаНаЭлемент.Ссылка;
			КонецЕсли;
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
						Объект,
						"СтрокаЯчейки",
						СсылкаНаЭлемент);
		КонецЕсли;
		
		СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
					Объект,
					"КолонкаЯчейки");
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
			СсылкаНаЭлемент = ПолучитьИзВременногоХранилища(
								СсылкаНаЭлемент); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
			Если СсылкаНаЭлемент <> Неопределено Тогда
				СсылкаНаЭлемент = СсылкаНаЭлемент.Ссылка;
			КонецЕсли;
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
						Объект,
						"КолонкаЯчейки",
						СсылкаНаЭлемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Значение поля элемента кэша
// 
// Параметры:
// 	Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	ИмяПоля - Строка -
// 	Кэш - Неопределено, ТаблицаЗначений - содержит:
// 	 * Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	ВидОтчета - Неопределено - Описание
// Возвращаемое значение:
// 	Произвольный -
Функция ЗначениеПоляЭлементаИзКэша(Элемент, ИмяПоля, Кэш, ВидОтчета = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = НовыйКэшЭлементовФинансовыхОтчетов(ВидОтчета, Элемент);
	КонецЕсли;
	
	НайденнаяСтрока = Кэш.Найти(Элемент, "Ссылка");
	Если НайденнаяСтрока = Неопределено Тогда
		// вновь записанный элемент
		Кэш = Неопределено;
		Возврат ЗначениеПоляЭлементаИзКэша(Элемент, ИмяПоля, Кэш, ВидОтчета);
	КонецЕсли;
	Возврат НайденнаяСтрока[ИмяПоля];
	
КонецФункции

// Возвращает кэшированную таблицу элементов
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИсточникиЗначений - ТаблицаЗначений - описание:
// 		** Источник - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** ДобавляемыеЗначенияДокумента - Булево -
// * РасшифровкаПолейОтбораЭО - ТаблицаЗначений - описание:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** КлючЭлементаОформления - УникальныйИдентификатор -
// 		** ИмяПоляОтбора - Строка -
// 		** ИмяРесурса - Строка -
// * ОформляемыеКолонки - ТаблицаЗначений - описание:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** КлючЭлементаОформления - УникальныйИдентификатор -
// * ОформляемыеСтроки - ТаблицаЗначений - описание:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** КлючЭлементаОформления - УникальныйИдентификатор -
// * ЭлементыОформления - ТаблицаЗначений - описание:
// 		** Оформление - ХранилищеЗначения -
// 		** Условие - ХранилищеЗначения -
// 		** ТипОформляемойОбласти - ПеречислениеСсылка.ТипыОформляемыхОбластейБюджетныхОтчетов -
// 		** КлючЭлементаОформления - УникальныйИдентификатор - 
// * ДополнительныеПоля - ТаблицаЗначений - описание:
// 		** Реквизит - Строка -
// 		** Наименование - Строка -
// 		** ВыводитьЗаголовок - Булево -
// 		** ВОтдельнойКолонке - Булево -
// * ЭлементыТаблицы - ТаблицаЗначений - описание:
// 		** Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ОперандыФормулы - ТаблицаЗначений - описание:
// 		** Идентификатор - Строка -
// 		** Операнд - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * РеквизитыВидаЭлемента - ТаблицаЗначений - описание:
// 		** Реквизит - ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов -
// 		** Значение - Характеристика.РеквизитыЭлементовФинансовыхОтчетов -
// * СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ЗначениеАналитики -Характеристика.АналитикиСтатейБюджетов -
// * ЕстьНастройки - Булево -
// * ДополнительныйОтбор - ХранилищеЗначения -
// * Комментарий - Строка -
// * ОбратныйЗнак - Булево -
// * НаименованиеДляПечати - Строка -
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * Код - Число -
// * Наименование - Строка -
// * Владелец - СправочникСсылка.ВидыФинансовыхОтчетов, СправочникСсылка.ВидыБюджетов -
// * Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
Функция НовыйКэшЭлементовФинансовыхОтчетов(ВидОтчета, Элемент) Экспорт
	
	Запрос = Новый Запрос;
	Если ВидОтчета = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Владелец В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ЭлементыФинансовыхОтчетов.Владелец
		|			ИЗ
		|				Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|			ГДЕ
		|				ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка)";
		Запрос.УстановитьПараметр("Ссылка", Элемент);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	КонецЕсли;
	Кэш = Запрос.Выполнить().Выгрузить();
	Кэш.Индексы.Добавить("Ссылка");
	
	Возврат Кэш;
	
КонецФункции

// Обновляет значение кэша
//
// Параметры:
// 	СсылкаНаЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	Кэш - см. НовыйКэшЭлементовФинансовыхОтчетов
// 	СтруктураЭлемента - Неопределено, СтрокаТаблицыЗначений -
//
Процедура ОбновитьЗначениеКэша(СсылкаНаЭлемент, Кэш, СтруктураЭлемента = Неопределено)
	НайденнаяСтрока = Кэш.Найти(СсылкаНаЭлемент, "Ссылка");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = Кэш.Добавить();
		НайденнаяСтрока.Ссылка = СсылкаНаЭлемент;
	КонецЕсли;
	Если СтруктураЭлемента = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|ГДЕ
			|	ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлемент);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			СтруктураЭлемента = Результат[0];
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураЭлемента = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтруктураЭлемента);
	КонецЕсли;
КонецПроцедуры

Функция ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(СсылкаНаЭлемент, АдресСтруктурыЭлемента, 
															ДопПорядок, ВидОтчета, Родитель,
															ИспользуемыеЭлементыВидаОтчета)
	
	Если Не ПустаяСтрока(АдресСтруктурыЭлемента) Тогда
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(
						АдресСтруктурыЭлемента); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
		Если СсылкаНаЭлемент = Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеЭлемента.Ссылка) Тогда
				СсылкаНаЭлемент = ДанныеЭлемента.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(
						ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
							СсылкаНаЭлемент)); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
	КонецЕсли;
	
	// получение объекта для записи и определение ссылки
	ОбъектЭлемента = ПолучитьОбъектЭлемента(СсылкаНаЭлемент, ДанныеЭлемента);
	Если ОбъектЭлемента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбъектЭлемента.ЭтоНовый()
		И (ДанныеЭлемента.ОперандыФормулы.Количество()
			ИЛИ ДанныеЭлемента.ЭлементыТаблицы.Количество()) Тогда
		
		ОбъектЭлемента.Владелец = ВидОтчета;
		ОбъектЭлемента.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
		ОбъектЭлемента.РеквизитыВидаЭлемента.Загрузить(ДанныеЭлемента.РеквизитыВидаЭлемента);
		ОбъектЭлемента.Записать();
		
	КонецЕсли;
	
	// запись данных из табличных частей
	Для Каждого Операнд Из ДанныеЭлемента.ОперандыФормулы Цикл
		Если ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
			НовыйОперанд = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Операнд.Операнд,
					Операнд.АдресСтруктурыЭлемента,
					ДопПорядок,
					ВидОтчета,
					ОбъектЭлемента.Ссылка,
					ИспользуемыеЭлементыВидаОтчета);
			Операнд.Операнд = НовыйОперанд;
		КонецЕсли;
		ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ЭлементыТаблицы Цикл
		
		СтруктураКолонок = Новый Структура("Строка, Колонка");
		
		Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
			
			Если ТипЗнч(ЭлементТаблицы[КлючИЗначение.Ключ]) = Тип("Строка") Тогда
				
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы[КлючИЗначение.Ключ]); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
				Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
					ЭлементТаблицы[КлючИЗначение.Ключ] = Неопределено;
				Иначе
					ЭлементТаблицы[КлючИЗначение.Ключ] = ДанныеЭлементаТаблицы.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭлементТаблицы.Строка)
			И ЗначениеЗаполнено(ЭлементТаблицы.Колонка) Тогда
			
			Если ТипЗнч(ЭлементТаблицы.Элемент) = Тип("Строка") Тогда
			
				НовыйЭлемент = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Неопределено,
						ЭлементТаблицы.Элемент,
						ДопПорядок,
						ВидОтчета,
						ОбъектЭлемента.Ссылка,
						ИспользуемыеЭлементыВидаОтчета);
				ЭлементТаблицы.Элемент = НовыйЭлемент;
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ОформляемыеСтроки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			Если ЗначениеЗаполнено(ЭлементТаблицы.ЭлементОтчета) Тогда
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(
					ЭлементТаблицы.ЭлементОтчета); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
			Иначе
				ДанныеЭлементаТаблицы = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ОформляемыеКолонки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			Если ЗначениеЗаполнено(ЭлементТаблицы.ЭлементОтчета) Тогда
				ДанныеЭлементаТаблицы =
					ПолучитьИзВременногоХранилища(
						ЭлементТаблицы.ЭлементОтчета); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
			Иначе
				ДанныеЭлементаТаблицы = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.РасшифровкаПолейОтбораЭО Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			ДанныеЭлементаТаблицы =
				ПолучитьИзВременногоХранилища(
						ЭлементТаблицы.ЭлементОтчета); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоСтрок = ДанныеЭлемента.ЭлементыТаблицы.Количество();
	Для Сч = 1 По ВсегоСтрок Цикл
		
		ЭлементТаблицы = ДанныеЭлемента.ЭлементыТаблицы[ВсегоСтрок - Сч];
		Если Не ЗначениеЗаполнено(ЭлементТаблицы.Строка)
			ИЛИ Не ЗначениеЗаполнено(ЭлементТаблицы.Колонка)
			ИЛИ Не ЗначениеЗаполнено(ЭлементТаблицы.Элемент) Тогда
			
			ДанныеЭлемента.ЭлементыТаблицы.Удалить(ЭлементТаблицы);
			Продолжить;
			
		КонецЕсли;
		
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Строка);
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Колонка);
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Элемент);
		Операнды = ЭлементТаблицы.Элемент.ОперандыФормулы;
		Для Каждого Операнд Из Операнды Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
		КонецЦикла;
		
	КонецЦикла;
	
	// запись данных объекта
	ЗаполнитьОбъектПоДаннымВременногоХранилища(ОбъектЭлемента, ДанныеЭлемента, ДопПорядок, ВидОтчета, Родитель);
	
	ОбъектЭлемента.Записать();
	
	Если ЗначениеЗаполнено(АдресСтруктурыЭлемента) Тогда
		// Поместим элемент в хранилище, для последующего использования по ссылкам на хранилище.
		ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(ОбъектЭлемента, АдресСтруктурыЭлемента);
	КонецЕсли;
	
	Возврат ОбъектЭлемента.Ссылка;
	
КонецФункции

// Внсение изменений в объект/
// 
// Параметры:
// 	Элемент - СтрокаДереваЗначений -
// 	Родитель - Неопределено, СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	ПараметрыЗаписиВСтруктуру - Структура -:
// * ИзмеренияКПерезаписи - Массив -
// * ПометкаУдаления - Булево -
// * ВидОтчета - Неопределено -
// 	ДопПорядок - Число -
// 	ИспользуемыеЭлементыВидаОтчета - СписокЗначений -
// 	Кэш - см. НовыйКэшЭлементовФинансовыхОтчетов
// Возвращаемое значение:
// 	Неопределено, СправочникСсылка.ЭлементыФинансовыхОтчетов - Описание
Функция ВнестиИзмененияВОбъект(Элемент, Родитель, ПараметрыЗаписиВСтруктуру, ДопПорядок, ИспользуемыеЭлементыВидаОтчета, Кэш)
	
	ПометкаУдаления = ПараметрыЗаписиВСтруктуру.ПометкаУдаления;
	ВидОтчета = ПараметрыЗаписиВСтруктуру.ВидОтчета;
	ИзмеренияКПерезаписи = ПараметрыЗаписиВСтруктуру.ИзмеренияКПерезаписи;
	
	ДопПорядок = ДопПорядок + 1;
	
	Если ПустаяСтрока(Элемент.АдресСтруктурыЭлемента)
		И Не Элемент.ЭлементОтчета.Пустая()
		И ИзмеренияКПерезаписи.Найти(Элемент.ЭлементОтчета) = Неопределено
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "Код", Кэш, ВидОтчета) = ДопПорядок
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "Родитель", Кэш, ВидОтчета) = Родитель 
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ПометкаУдаления", Кэш, ВидОтчета) = ПометкаУдаления Тогда
		
		// запись данных из табличных частей
		Операнды = ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ОперандыФормулы", Кэш, ВидОтчета);
		Для Каждого Операнд Из Операнды Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
		КонецЦикла;
		ЭлементыТаблицы = ЗначениеПоляЭлементаИзКэша(
			Элемент.ЭлементОтчета,
			"ЭлементыТаблицы",
			Кэш,
			ВидОтчета); // см. БюджетнаяОтчетностьРасчетКэшаСервер.НовыйТаблицаЭлементов 
			
		Для Каждого ЭлементТаблицы Из ЭлементыТаблицы Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Строка);
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Колонка);
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Элемент);
			Операнды = ЗначениеПоляЭлементаИзКэша(ЭлементТаблицы.Элемент, "ОперандыФормулы", Кэш, ВидОтчета);
			Для Каждого Операнд Из Операнды Цикл
				ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
			КонецЦикла;
		КонецЦикла;
		
		ИспользуемыеЭлементыВидаОтчета.Добавить(Элемент.ЭлементОтчета);
		
		Возврат Элемент.ЭлементОтчета;
		
	КонецЕсли;
	
	// если новый элемент - сохраним данные строки во временном хранилище
	ДанныеЭлемента = Элемент.АдресСтруктурыЭлемента;
	
	ИспользуетсяХранилищеФормы = Истина;
	УИД = Новый УникальныйИдентификатор;
	Если Не ЗначениеЗаполнено(Элемент.ЭлементОтчета) 
		И Не ЗначениеЗаполнено(ДанныеЭлемента) Тогда
		//++ НЕ УТКА
		Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыФинансовыхОтчетов") Тогда
			ДанныеЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		КонецЕсли;
		//-- НЕ УТКА
		Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
			ДанныеЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		КонецЕсли;
		ИспользуетсяХранилищеФормы = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеЭлемента)
	   И Не ИзмеренияКПерезаписи.Найти(Элемент.ЭлементОтчета) = Неопределено Тогда
		ДанныеЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		ИспользуетсяХранилищеФормы = Ложь;
	КонецЕсли;
	
	СтруктураЭлемента = Неопределено;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") И ДанныеЭлемента <> "" Тогда
		
		СтруктураЭлемента = ПолучитьИзВременногоХранилища(ДанныеЭлемента);
		Если СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
						ДанныеЭлемента,
						"ВыводитьВместеСРодительским",
						Элемент.ВыводитьВместеСРодительским);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") И ДанныеЭлемента <> "" Тогда
		
		НужноЗаполнениеИсточников = Ложь; ЭтоЗаполнение = Ложь;
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "ТипИзмерения");
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				НужноЗаполнениеИсточников = Истина;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "РазрешитьРедактирование") = Истина Тогда
					НужноЗаполнениеИсточников = Истина;
					ЭтоЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноЗаполнениеИсточников Тогда
			
			СтруктураЭлемента = ПолучитьИзВременногоХранилища(
								ДанныеЭлемента); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
			
			Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "ВыбранныеИсточникиЗначений") = Истина Тогда
				
				// 1. Проверим выбранные источники
				Если СтруктураЭлемента.ИсточникиЗначений.Количество() Тогда
					
					СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийЭлемента(Кэш, Элемент, ЭтоЗаполнение);
					НаУдаление = Новый Массив;
					
					Для Каждого СтрокаИсточника Из СтруктураЭлемента.ИсточникиЗначений Цикл
						Если ТипЗнч(СтрокаИсточника.Источник) = Тип("Строка") Тогда
							// 1.1. Попробуем найти по адресу
							Если СписокДоступныхЭлементов.Найти(СтрокаИсточника.Источник) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							// 1.2. Если не найдено - то по ссылке из хранилища
							СтруктураИсточника = 
								ПолучитьИзВременногоХранилища(
								СтрокаИсточника.Источник); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
							Если ЗначениеЗаполнено(СтруктураИсточника.Ссылка) Тогда
								Если СписокДоступныхЭлементов.Найти(СтруктураИсточника.Ссылка) <> Неопределено Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если ТипЗнч(СтрокаИсточника.Источник) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
							Если СписокДоступныхЭлементов.Найти(СтрокаИсточника.Источник) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						НаУдаление.Добавить(СтрокаИсточника);
					КонецЦикла;
					
					Для Каждого ЭлементМассива Из НаУдаление Цикл
						СтруктураЭлемента.ИсточникиЗначений.Удалить(ЭлементМассива);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				// 2. Просто заполним доступные источники
				СтруктураЭлемента.ИсточникиЗначений.Очистить();
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийПоУмолчанию(Кэш, Элемент, , ЭтоЗаполнение);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокДоступныхЭлементов, СтруктураЭлемента.ИсточникиЗначений);
				
			КонецЕсли;
			
			// 3. Для расширяемых измерений дополним источники
			Если ЭтоЗаполнение Тогда
				НайденныеСтроки = СтруктураЭлемента.ИсточникиЗначений.НайтиСтроки(Новый Структура("ДобавляемыеЗначенияДокумента", Истина));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					СтруктураЭлемента.ИсточникиЗначений.Удалить(НайденнаяСтрока);
				КонецЦикла;
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийПоУмолчанию(Кэш, Элемент); 
				Для Каждого СтрокаДоступныхЭлементов Из СписокДоступныхЭлементов Цикл
					Если СтрокаДоступныхЭлементов.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
						НоваяСтрока = СтруктураЭлемента.ИсточникиЗначений.Добавить();
						НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Источник;
						НоваяСтрока.ДобавляемыеЗначенияДокумента = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// 4. Проверим, если источник еще не записан - преобразуем источник в ссылку
			Для Каждого СтрокаИсточника Из СтруктураЭлемента.ИсточникиЗначений Цикл
				
				Если ТипЗнч(СтрокаИсточника.Источник) = Тип("Строка") Тогда
					СтруктураИсточника = 
						ПолучитьИзВременногоХранилища(
							СтрокаИсточника.Источник); // см. ФинансоваяОтчетностьВызовСервера.ДанныеЭлементаОтчета
					Если Не ЗначениеЗаполнено(СтруктураИсточника.Ссылка) Тогда
						СтруктураИсточника.Ссылка = Справочники.ЭлементыФинансовыхОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор);
					КонецЕсли;
					
					ПоместитьВоВременноеХранилище(СтруктураИсточника, СтрокаИсточника.Источник);
					СтрокаИсточника.Источник = СтруктураИсточника.Ссылка;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаНаЭлемент = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Элемент.ЭлементОтчета,
				ДанныеЭлемента, ДопПорядок, ВидОтчета,
				Родитель, ИспользуемыеЭлементыВидаОтчета);
	
	Если ТипЗнч(Кэш) = Тип("ТаблицаЗначений") Тогда
		ОбновитьЗначениеКэша(СсылкаНаЭлемент, Кэш, СтруктураЭлемента);
	КонецЕсли;
	
	Если СсылкаНаЭлемент = Неопределено Тогда
		Элемент.ЭлементОтчета = СсылкаНаЭлемент;
	ИначеЕсли Не ЗначениеЗаполнено(Элемент.ЭлементОтчета) Тогда
		Элемент.ЭлементОтчета = СсылкаНаЭлемент;
	КонецЕсли;
	Если Не ИспользуетсяХранилищеФормы Тогда
		УдалитьИзВременногоХранилища(ДанныеЭлемента);
	КонецЕсли;
	Элемент.АдресСтруктурыЭлемента = "";
	ИспользуемыеЭлементыВидаОтчета.Добавить(Элемент.ЭлементОтчета);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область МеждународнаяОтчетность

Функция СхемаМонетарногоПоказателя(Показатель, Измерения = Неопределено, Субконто = Неопределено, Ресурс = "Сумма")
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Источник = "Международный";
	Если ТипЗнч(Показатель.СчетПланаСчетов) = РеглУчетКлиентСервер.ТипПланСчетов() Тогда
		Источник = РеглУчетКлиентСервер.ИмяПланаСчетов();
	КонецЕсли;
	
	ИмяТипИтога = ОбщегоНазначения.ИмяЗначенияПеречисления(Показатель.ТипИтога);
	
	ЭтоОстаток = Показатель.ТипИтога = Перечисления.ТипыИтогов.Сальдо
			ИЛИ Показатель.ТипИтога = Перечисления.ТипыИтогов.СальдоДт
			ИЛИ Показатель.ТипИтога = Перечисления.ТипыИтогов.СальдоКт;
	СуффиксРесурса = СтрЗаменить(ИмяТипИтога,"Сальдо","Остаток");
	
	ВыраженияНачальныйОстаток = Новый Соответствие();
	ВыраженияКонечныйОстаток = Новый Соответствие();
	ВыраженияОборот = Новый Соответствие();
	
	Если Ресурс = "Сумма" Тогда
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "СуммаНачальныйОстаток");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "СуммаНачальныйОстатокДт");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "СуммаНачальныйОстатокКт");
		
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "СуммаКонечныйОстаток");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "СуммаКонечныйОстатокДт");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "СуммаКонечныйОстатокКт");
		
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.Оборот, "СуммаОборот");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотДт, "СуммаОборотДт");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотКт, "СуммаОборотКт");
		
	ИначеЕсли Ресурс = "СуммаПредставления" Тогда
		
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "СуммаПредставленияНачальныйОстаток");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "СуммаПредставленияНачальныйОстатокДт");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "СуммаПредставленияНачальныйОстатокКт");
		
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "СуммаПредставленияКонечныйОстаток");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "СуммаПредставленияКонечныйОстатокДт");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "СуммаПредставленияКонечныйОстатокКт");
		
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.Оборот, "СуммаПредставленияОборот");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотДт, "СуммаПредставленияОборотДт");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотКт, "СуммаПредставленияОборотКт");
		
	ИначеЕсли Ресурс = "ВалютнаяСумма" Тогда
		
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "ВалютнаяСуммаНачальныйОстаток");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "ВалютнаяСуммаНачальныйОстатокДт");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "ВалютнаяСуммаНачальныйОстатокКт");
		
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "ВалютнаяСуммаКонечныйОстаток");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "ВалютнаяСуммаКонечныйОстатокДт");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "ВалютнаяСуммаКонечныйОстатокКт");
		
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.Оборот, "ВалютнаяСуммаОборот");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотДт, "ВалютнаяСуммаОборотДт");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотКт, "ВалютнаяСуммаОборотКт");
	ИначеЕсли Ресурс = "Количество" Тогда

		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "КоличествоНачальныйОстаток");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "КоличествоНачальныйОстатокДт");
		ВыраженияНачальныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "КоличествоНачальныйОстатокКт");
		
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.Сальдо, "КоличествоКонечныйОстаток");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоДт, "КоличествоКонечныйОстатокДт");
		ВыраженияКонечныйОстаток.Вставить(Перечисления.ТипыИтогов.СальдоКт, "КоличествоКонечныйОстатокКт");
		
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.Оборот, "КоличествоОборот");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотДт, "КоличествоОборотДт");
		ВыраженияОборот.Вставить(Перечисления.ТипыИтогов.ОборотКт, "КоличествоОборотКт");
	
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не определено выражение получение ресурса ""%1""';
										|en = 'Expression of the ""%1"" resource receiving is not defined'"));
	КонецЕсли;
	
	Если ЭтоОстаток Тогда
		СхемаКД = ПолучитьМакет("МонетарныйПоказательОстаток");
		ТекстЗапроса = СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаНачальныйОстаток", ВыраженияНачальныйОстаток[Показатель.ТипИтога]);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаКонечныйОстаток", ВыраженияКонечныйОстаток[Показатель.ТипИтога]);
		Если Показатель.НачальноеСальдо Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолеОстатка", "temp");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Значение", "ПолеОстатка");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "temp", "Значение");
		КонецЕсли;
	Иначе
		СхемаКД = ПолучитьМакет("МонетарныйПоказательОборот");
		ТекстЗапроса = СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаОборот", ВыраженияОборот[Показатель.ТипИтога]);
	КонецЕсли;
	
	ДобавитьПоляИзмерений(ТекстЗапроса, Измерения);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Международный", Источник);
	СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос = ТекстЗапроса;
	
	ДобавитьПоляИзмерений(СхемаКД.НастройкиПоУмолчанию, Измерения);

	СписокВидовСубконто = Новый СписокЗначений;
	НомерСубконто = 1;
	Если Субконто <> Неопределено Тогда
		Для каждого СубконтоСчета Из Субконто Цикл
			ТекущееСубконто = СубконтоСчета.Значение; // см. СхемаПоказателя.Субконто
			
			Если Источник = "Международный" Тогда
				Если ТипЗнч(ТекущееСубконто.Вид) <> МеждународныйУчетКлиентСервер.ТипВидСубконто() Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ТекущееСубконто.Вид) <> РеглУчетКлиентСервер.ТипВидСубконто() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СписокВидовСубконто.Добавить(ТекущееСубконто.Вид);
			Если ТекущееСубконто.ЕстьНастройки Тогда
				НастройкиОтбораСубконто = ТекущееСубконто.Отбор.Получить();
				МеждународнаяОтчетностьСервер.ЗаменитьИмяСубконтоВОтборе(НастройкиОтбораСубконто.Отбор, СубконтоСчета.Ключ);
				ФинОтчеты.СкопироватьОтбор(НастройкиОтбораСубконто.Отбор,СхемаКД.НастройкиПоУмолчанию.Отбор);
			КонецЕсли; 
			
			Поле = "ТаблицаРегистра.Субконто" + НомерСубконто; 
			СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос = СтрЗаменить(СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос, "&Субконто" + НомерСубконто, Поле + " КАК " + СубконтоСчета.Ключ);
			ВычисляемоеСубконто = СхемаКД.ВычисляемыеПоля.Добавить();
			ВычисляемоеСубконто.ПутьКДанным = СубконтоСчета.Ключ;
			ВычисляемоеСубконто.Выражение = СтрШаблон("Выбор Когда %1 Есть NULL Или Представление(%1) ="""" Тогда Неопределено Иначе %1 Конец", СубконтоСчета.Ключ);
			ФинОтчеты.НовоеПолеВыбора(СхемаКД.НастройкиПоУмолчанию,СубконтоСчета.Ключ, ТекущееСубконто.Наименование);
			
			НомерСубконто = НомерСубконто + 1;
		КонецЦикла;
		ФинОтчеты.УстановитьПараметрКомпоновки(СхемаКД.НастройкиПоУмолчанию,"ВидСубконтоОборота",СписокВидовСубконто);
	КонецЕсли;
	
	Если ЭтоОстаток Тогда
		РольОстатка = ФинОтчеты.НоваяРольПоляНабораДанных();
		РольОстатка.ГруппаОстатка = "Остаток";
		РольОстатка.Остаток = Истина;
		РольОстатка.ПолеСчета = "Счет";
		Если Показатель.НачальноеСальдо Тогда
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "Значение", РольОстатка);
			
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "ПолеОстатка", РольОстатка);
			
		Иначе
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "Значение", РольОстатка);
			
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "ПолеОстатка", РольОстатка);
			
		КонецЕсли;
	Иначе
		ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "Значение");
	КонецЕсли;
	
	ФинОтчеты.УстановитьОтбор(СхемаКД.НастройкиПоУмолчанию.Отбор, "Счет", Показатель.СчетПланаСчетов);
	
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД, Ложь);
	Если Показатель.ЕстьНастройки Тогда
		НастройкиОтбораПоказателя = Показатель.ДополнительныйОтбор.Получить();
		Если НастройкиОтбораПоказателя <> Неопределено Тогда
			
			ОтборПоказателя = ПереименоватьСубконтоИзДопОтбора(НастройкиОтбораПоказателя.Отбор, Показатель, СписокВидовСубконто); 
			ФинОтчеты.СкопироватьОтбор(ОтборПоказателя, Компоновщик.Настройки.Отбор);
		КонецЕсли;
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "ЭлементОтчета", Показатель.ЭлементОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "ОбратныйЗнак" , Показатель.ОбратныйЗнак);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "КодСтроки"    , Показатель.КодСтрокиОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "Примечание"   , Показатель.Примечание);
	
	Если ЗначениеЗаполнено(СписокВидовСубконто) Тогда
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки,"ВидСубконтоОборота", СписокВидовСубконто);
	КонецЕсли;
	
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаНемонетарногоПоказателя(Показатель, Измерения = Неопределено, Отбор = Неопределено)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ПолучитьМакет("НемонетарныйПоказатель");
	ТекстЗапроса = СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос;
	ДобавитьПоляИзмерений(ТекстЗапроса, Измерения);
	
	СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос = ТекстЗапроса;
	
	ДобавитьПоляИзмерений(СхемаКД.НастройкиПоУмолчанию, Измерения);
	
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "Показатель", Показатель.НемонетарныйПоказатель);
	
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаПроизводногоПоказателя(Показатель, Измерения = Неопределено, Субконто = Неопределено, Отбор = Неопределено)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ПолучитьМакет("ПроизводныйПоказатель");
	ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ОперандыФормулы = Показатель.ЭлементОтчета.ОперандыФормулы;
	Если Показатель.ЭтоСвязанный Тогда
		ОперандыФормулы = Показатель.СвязанныйЭлемент.ОперандыФормулы;
	КонецЕсли;
	Для Каждого Операнд Из ОперандыФормулы Цикл
		ФинОтчеты.НовоеПолеНабора(СхемаКД.НаборыДанных.ЗначенияОперандов, Операнд["Идентификатор"],,, ТипЧисло);
	КонецЦикла;
	Для Каждого Измерение Из Измерения Цикл
		ФинОтчеты.НовоеПолеНабора(СхемаКД.НаборыДанных.ЗначенияОперандов, Измерение.Значение);
		ФинОтчеты.НовоеПолеВыбора(СхемаКД.НастройкиПоУмолчанию,Измерение.Значение);
	КонецЦикла;
	
	Если Субконто <> Неопределено Тогда
		Для каждого СубконтоСчета Из Субконто Цикл
			ФинОтчеты.НовоеПолеНабора(СхемаКД.НаборыДанных.ЗначенияОперандов, СубконтоСчета.Ключ);
			ФинОтчеты.НовоеПолеВыбора(СхемаКД.НастройкиПоУмолчанию, СубконтоСчета.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ПолеЗначения = СхемаКД.ВычисляемыеПоля[0];
	Если НЕ ПустаяСтрока(Показатель.Формула) Тогда
		ПолеЗначения.Выражение = "(" + Показатель.Формула + ") * ВЫБОР КОГДА &ОбратныйЗнак = ИСТИНА ТОГДА -1 ИНАЧЕ 1 КОНЕЦ";
	КонецЕсли;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	
	СхемаПоказателя = Новый Структура("Схема, Настройки", СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Процедура ДобавитьПоляИзмерений(ТекстНабор, Измерения)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	ЭтоТекстЗапроса = ТипЗнч(ТекстНабор) = Тип("Строка");
	Для Каждого Измерение Из Измерения Цикл
		Если ЭтоТекстЗапроса Тогда
			Поле = "ТаблицаРегистра." + Измерение.Значение;
			ТекстНабор = СтрЗаменить(ТекстНабор, "&" + Измерение.Значение, Поле);
		Иначе
			ФинОтчеты.НовоеПолеВыбора(ТекстНабор, Измерение.Значение, Измерение.Представление);
			Если Измерение.Отбор <> Неопределено Тогда
				ФинОтчеты.СкопироватьОтбор(Измерение.Отбор, ТекстНабор.Отбор, Истина);
			КонецЕсли;
			Если СтрНайти(Измерение.Значение,"Субконто")  > 0 Тогда
				ФинОтчеты.НовоеПолеВыбора(ТекстНабор, "ВидСубконто", "ВидСубконто");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПереименоватьСубконтоИзДопОтбора(Настройка, Показатель, СписокВидовСубконто, ВидыСубконтоСчета = Неопределено)  Экспорт
	
	НоваяНастройка = Новый ОтборКомпоновкиДанных;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(Настройка, НоваяНастройка);
	Если СписокВидовСубконто = Неопределено Тогда
		СписокВидовСубконто = Новый СписокЗначений;
	КонецЕсли;
	Если ВидыСубконтоСчета = Неопределено Тогда
		ВидыСубконтоСчета = Показатель.СчетПланаСчетов.ВидыСубконто;
	КонецЕсли;
	
	Для каждого НастройкаОтбора Из Настройка.Элементы Цикл
		
		Если ТипЗнч(НастройкаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НастройкаОтбора = ПереименоватьСубконтоИзДопОтбора(НастройкаОтбора, Показатель, СписокВидовСубконто, ВидыСубконтоСчета);
		ИначеЕсли СтрНайти(НастройкаОтбора.ЛевоеЗначение, "Субконто") <> 0 Тогда
			
			Для НомерСубконто = 1 По Мин(МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто(), 
				ВидыСубконтоСчета.Количество()) Цикл
				Если СтрНайти(НастройкаОтбора.ЛевоеЗначение, "Субконто" + НомерСубконто) <> 0 Тогда
					ВидСубконто = ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто;
					СубконтоВПараметре = СписокВидовСубконто.НайтиПоЗначению(ВидСубконто);
					Если СубконтоВПараметре <> Неопределено Тогда
						НомерСубконтоОтбора = СписокВидовСубконто.Индекс(СубконтоВПараметре)+1;
					Иначе
						СписокВидовСубконто.Добавить(ВидСубконто);
						НомерСубконтоОтбора = СписокВидовСубконто.Количество();
					КонецЕсли;
					
					Если НомерСубконто <> НомерСубконтоОтбора Тогда
						ТекущийОтбор = НоваяНастройка.Элементы[Настройка.Элементы.Индекс(НастройкаОтбора)];
						ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(НастройкаОтбора.ЛевоеЗначение, "Субконто"+НомерСубконто, "Субконто"+НомерСубконтоОтбора));
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат НоваяНастройка;
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ЭлементыФинансовыхОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.5.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7c8ec390-5e9f-4e3b-ab01-1d6b6fe96373");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ЭлементыФинансовыхОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Замена идентификаторов периодов и параметров в текстовых полях в справочнике ""Элементы финансовых отчетов""';
									|en = 'Replace periods IDs and parameters in the text fields of the ""Financial statement items"" directory'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЭкземплярБюджета.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Отчеты.БюджетныйОтчет.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ВидыБюджетов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов.ПолноеИмя());
	//++ НЕ УТКА
	Блокируемые.Добавить(Метаданные.Документы.ЭкземплярФинансовогоОтчета.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Отчеты.МеждународныйОтчет.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ВидыФинансовыхОтчетов.ПолноеИмя());
	//-- НЕ УТКА
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьЭлементыНачальнымиДанными";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

#Область Обработчики_2_5_3

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НачалоПериодаГруппировки"));
	Реквизиты.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.КонецПериодаГруппировки"));
	Реквизиты.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВерхняяГраницаДанных"));
	Реквизиты.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НижняяГраницаДанных"));
	Реквизиты.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Формула"));
	Реквизиты.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Текст"));
	
	РеквизитыФункцииИтог = Новый Массив;
	РеквизитыФункцииИтог.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Формула"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Реквизиты", Реквизиты);
	Запрос.УстановитьПараметр("РеквизитыФункцииИтог", РеквизитыФункцииИтог);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеквизитыВидаЭлемента.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыВидаЭлемента
		|ГДЕ
		|	РеквизитыВидаЭлемента.Реквизит В (&Реквизиты)
		|	И НЕ РеквизитыВидаЭлемента.Ссылка.УдалитьНеТребуетсяПриведениеСтрокВПараметры
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РеквизитыВидаЭлемента.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыВидаЭлемента
		|ГДЕ
		|	РеквизитыВидаЭлемента.Реквизит В (&РеквизитыФункцииИтог)
		|	И НЕ РеквизитыВидаЭлемента.Ссылка.УдалитьНеТребуетсяПриведениеПараметровВФункцииИтог
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетовЭлементыОформления.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.ЭлементыОформления КАК ЭлементыФинансовыхОтчетовЭлементыОформления
		|ГДЕ
		|	НЕ ЭлементыФинансовыхОтчетовЭлементыОформления.Ссылка.УдалитьНеТребуетсяПриведениеСтрокВПараметры";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИдентификаторыВидовАналитикЗаполнены = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Представление,
	|	АналитикиСтатейБюджетов.Идентификатор
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";
	
	ПараметрыВидовАналитик = Новый Соответствие();
	ПараметрыЗаменыВФункцииИтог = Новый Соответствие();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			ИдентификаторыВидовАналитикЗаполнены = Ложь;
		КонецЕсли;
		ЧтоМенять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"[%1]",
			Выборка.Представление);
		НаЧтоМенять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"[%1]",
			Выборка.Идентификатор);
		ПараметрыВидовАналитик.Вставить(ЧтоМенять, НаЧтоМенять);
		ПараметрыЗаменыВФункцииИтог.Вставить(ВРег(Выборка.Представление), Выборка.Идентификатор);
	КонецЦикла;
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.Периодичность.ЗначенияПеречисления Цикл
		ПараметрыЗаменыВФункцииИтог.Вставить(ВРег(ЗначениеПеречисления.Представление()), ЗначениеПеречисления.Имя);
	КонецЦикла;
	
	Если НЕ ИдентификаторыВидовАналитикЗаполнены Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	РеквизитыУказаниеПериодов = Новый Массив;
	РеквизитыУказаниеПериодов.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НачалоПериодаГруппировки"));
	РеквизитыУказаниеПериодов.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.КонецПериодаГруппировки"));
	РеквизитыУказаниеПериодов.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВерхняяГраницаДанных"));
	РеквизитыУказаниеПериодов.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НижняяГраницаДанных"));
	РеквизитыУказаниеПериодов.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Формула"));
	
	РеквизитФормула = ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Формула");
	
	РеквизитыТекстовыеПеременные = Новый Массив;
	РеквизитыТекстовыеПеременные.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Текст"));
	
	ПеременныеПериодов = БюджетнаяОтчетностьКлиентСервер.ПеременныеПериодовБюджетирования();
	ПеременныеТекстовФинОтчетов = ФинансоваяОтчетностьКлиентСервер.ПеременныеФинансовыхОтчетов();
	ПеременныеТекстовБюджетирования = БюджетнаяОтчетностьКлиентСервер.ПеременныеБюджетныхОтчетов();
	
	ПолноеИмяОбъекта = "Справочник.ЭлементыФинансовыхОтчетов";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
			Иначе
				
				// Указываем строки замены в коде, т.к. представление может измениться.
				Для Каждого СтрокаТаблицы Из СправочникОбъект.РеквизитыВидаЭлемента Цикл
					Если РеквизитыУказаниеПериодов.Найти(СтрокаТаблицы.Реквизит) <> Неопределено Тогда
						СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Начало периода данных]", ПеременныеПериодов.НачалоПериодаДанных.Имя);
						СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Конец периода данных]", ПеременныеПериодов.КонецПериодаДанных.Имя);
						СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Период группировки]", ПеременныеПериодов.ПериодГруппировки.Имя);
						СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Граница факт.данных]", ПеременныеПериодов.ГраницаФактДанных.Имя);
					КонецЕсли;
					Если РеквизитыТекстовыеПеременные.Найти(СтрокаТаблицы.Реквизит) <> Неопределено Тогда
						Если ТипЗнч(СправочникОбъект.Владелец) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
							
							ВидОтчета = ПеременныеТекстовБюджетирования.ВидОтчета;
							ТекущаяДатаИВремя = ПеременныеТекстовБюджетирования.ТекущаяДатаИВремя;
							ПериодОтчетности = ПеременныеТекстовБюджетирования.ПериодОтчетности;
							КонечнаяДатаПериодаОтчета = ПеременныеТекстовБюджетирования.КонечнаяДатаПериодаОтчета;
							Организация = ПеременныеТекстовБюджетирования.Организация;
							Подразделение = ПеременныеТекстовБюджетирования.Подразделение;
							Сценарий = ПеременныеТекстовБюджетирования.Сценарий;
							СтатусДокумента = ПеременныеТекстовБюджетирования.СтатусДокумента;
							Ответственный = ПеременныеТекстовБюджетирования.Ответственный;
							//++ НЕ УТКА
							Утверждающий = ПеременныеТекстовБюджетирования.Утверждающий;
							//-- НЕ УТКА
							
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Вид отчета]",  ВидОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Report kind]", ВидОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Текущая дата и время]", ТекущаяДатаИВремя.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Current date and time]", ТекущаяДатаИВремя.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Период отчетности]", ПериодОтчетности.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Reporting period]", ПериодОтчетности.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Конечная дата периода отчета]", КонечнаяДатаПериодаОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[End date of report period]", КонечнаяДатаПериодаОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Company]", Организация.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Department]", Подразделение.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Scenario]", Сценарий.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Статус документа]", СтатусДокумента.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Document status]", СтатусДокумента.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Responsible person]", Ответственный.Имя);
							//++ НЕ УТКА
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Approver]", Утверждающий.Имя);
							//-- НЕ УТКА
							
							Для Каждого КлючИЗначение Из ПараметрыВидовАналитик Цикл
								СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, КлючИЗначение.Ключ, КлючИЗначение.Значение);
							КонецЦикла;
						Иначе
							
							КомплектОтчетов = ПеременныеТекстовФинОтчетов.КомплектОтчетов; // см. ФинансоваяОтчетностьКлиентСервер.НовыйСтруктураПеременнойФинансовыхОтчетов
							ВидОтчета = ПеременныеТекстовФинОтчетов.ВидОтчета; // см. ФинансоваяОтчетностьКлиентСервер.НовыйСтруктураПеременнойФинансовыхОтчетов
							ТекущаяДатаИВремя = ПеременныеТекстовФинОтчетов.ТекущаяДатаИВремя; // см. ФинансоваяОтчетностьКлиентСервер.НовыйСтруктураПеременнойФинансовыхОтчетов
							ПериодОтчетности = ПеременныеТекстовФинОтчетов.ПериодОтчетности; // см. ФинансоваяОтчетностьКлиентСервер.НовыйСтруктураПеременнойФинансовыхОтчетов
							КонечнаяДатаПериодаОтчета = ПеременныеТекстовФинОтчетов.КонечнаяДатаПериодаОтчета; // см. ФинансоваяОтчетностьКлиентСервер.НовыйСтруктураПеременнойФинансовыхОтчетов
							Организация = ПеременныеТекстовФинОтчетов.Организация; // см. ФинансоваяОтчетностьКлиентСервер.НовыйСтруктураПеременнойФинансовыхОтчетов
							
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Комплект отчетов]", КомплектОтчетов.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Report set]", КомплектОтчетов.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Вид отчета]", ВидОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Report kind]", ВидОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Текущая дата и время]", ТекущаяДатаИВремя.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Current date and time]", ТекущаяДатаИВремя.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Период отчетности]", ПериодОтчетности.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Reporting period]", ПериодОтчетности.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Конечная дата периода отчета]", КонечнаяДатаПериодаОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[End date of report period]", КонечнаяДатаПериодаОтчета.Имя);
							СтрокаТаблицы.Значение = СтрЗаменить(СтрокаТаблицы.Значение, "[Company]", Организация.Имя);
						КонецЕсли;
					КонецЕсли;
					Если СтрокаТаблицы.Реквизит = РеквизитФормула Тогда
						ВыполнитьПроверкуИПреобразованиеВыраженияВФункцииИтог(СтрокаТаблицы, ПараметрыЗаменыВФункцииИтог);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаТаблицы Из СправочникОбъект.ЭлементыОформления Цикл
					ТаблицаПараметровОформления = СтрокаТаблицы.Оформление.Получить();
					Для Каждого СтрокаПараметраОформления Из ТаблицаПараметровОформления Цикл
						Параметр = СтрокаПараметраОформления.Параметр;
						Если СтрНачинаетсяС(Параметр, "Цвет фона")
							ИЛИ СтрНачинаетсяС(Параметр, "Background color") Тогда
							СтрокаПараметраОформления.Параметр = "ЦветФона";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Цвет текста")
							ИЛИ СтрНачинаетсяС(Параметр, "Text color") Тогда
							СтрокаПараметраОформления.Параметр = "ЦветТекста";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Цвет границы")
							ИЛИ СтрНачинаетсяС(Параметр, "Border color") Тогда
							СтрокаПараметраОформления.Параметр = "ЦветГраницы";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Шрифт")
							ИЛИ СтрНачинаетсяС(Параметр, "Font") Тогда
							СтрокаПараметраОформления.Параметр = "Шрифт";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Горизонтальное положение")
							ИЛИ СтрНачинаетсяС(Параметр, "Horizontal position") Тогда
							СтрокаПараметраОформления.Параметр = "ГоризонтальноеПоложение";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Вертикальное положение")
							ИЛИ СтрНачинаетсяС(Параметр, "Vertical position") Тогда
							СтрокаПараметраОформления.Параметр = "ВертикальноеПоложение";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Ориентация текста")
							ИЛИ СтрНачинаетсяС(Параметр, "Text orientation") Тогда
							СтрокаПараметраОформления.Параметр = "ОриентацияТекста";
						ИначеЕсли СтрНачинаетсяС(Параметр, "Формат")
							ИЛИ СтрНачинаетсяС(Параметр, "Format") Тогда
							СтрокаПараметраОформления.Параметр = "Формат";
						КонецЕсли;
					КонецЦикла;
					СтрокаТаблицы.Оформление = Новый ХранилищеЗначения(ТаблицаПараметровОформления);
				КонецЦикла;
				
				СправочникОбъект.УдалитьНеТребуетсяПриведениеСтрокВПараметры = Истина;
				СправочникОбъект.УдалитьНеТребуетсяПриведениеПараметровВФункцииИтог = Истина;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ВыполнитьПроверкуИПреобразованиеВыраженияВФункцииИтог(СтрокаФормулы, ПараметрыЗамены)
	ПриведенноеЗначениеФормулы = ВРег(СтрокаФормулы.Значение);
	ИсходноеЗначениеФормулы = СтрокаФормулы.Значение;
	
	Если СтрНайти(ПриведенноеЗначениеФормулы, "ИТОГ(") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(ПриведенноеЗначениеФормулы);
	
	ЧастиФормулы = Новый ТаблицаЗначений;
	ЧастиФормулы.Колонки.Добавить("ЧастьФормулы", Новый ОписаниеТипов("Строка"));
	ЧастиФормулы.Колонки.Добавить("СодержитФункциюИтог", Новый ОписаниеТипов("Булево"));
	
	ПродолжатьАнализФормулы = Истина;
	НомерПредыдущейЗакрывающейПозицииИтог = 0;
	Пока ПродолжатьАнализФормулы Цикл
		НомерОткрывающейПозицииИтог = СтрНайти(ПриведенноеЗначениеФормулы,
				"ИТОГ(", НаправлениеПоиска.СНачала, 
				?(НомерПредыдущейЗакрывающейПозицииИтог = 0, 1, НомерПредыдущейЗакрывающейПозицииИтог));
		Если НомерОткрывающейПозицииИтог = 0 Тогда
			// Остаток формулы
			СтрокаЧастиФормулы = ЧастиФормулы.Добавить();
			СтрокаЧастиФормулы.ЧастьФормулы = Сред(ИсходноеЗначениеФормулы, НомерПредыдущейЗакрывающейПозицииИтог + 1);
			СтрокаЧастиФормулы.СодержитФункциюИтог = Ложь;
			ПродолжатьАнализФормулы = Ложь;
			
			Прервать;
			
		Иначе
			
			Если НомерОткрывающейПозицииИтог <> 1 Тогда
				КоличествоСимволов = НомерОткрывающейПозицииИтог - (НомерПредыдущейЗакрывающейПозицииИтог + 1);
				СтрокаЧастиФормулы = ЧастиФормулы.Добавить();
				СтрокаЧастиФормулы.ЧастьФормулы = Сред(ИсходноеЗначениеФормулы, НомерПредыдущейЗакрывающейПозицииИтог + 1, КоличествоСимволов);
			КонецЕсли;
			
			НомерЗакрывающейПозицииИтог = НайтиПозициюЗакрывающейСкобкиФункцииИтог(ПриведенноеЗначениеФормулы, НомерОткрывающейПозицииИтог);
			Если НомерЗакрывающейПозицииИтог = 0 Тогда
				// Ошибка парсинга
				СтрокаЧастиФормулы = ЧастиФормулы.Добавить();
				СтрокаЧастиФормулы.ЧастьФормулы = Сред(ИсходноеЗначениеФормулы, НомерОткрывающейПозицииИтог);
				СтрокаЧастиФормулы.СодержитФункциюИтог = Ложь;
				ПродолжатьАнализФормулы = Ложь;
				Возврат;
			Иначе
				КоличествоСимволов = НомерЗакрывающейПозицииИтог - НомерОткрывающейПозицииИтог + 1;
				СтрокаЧастиФормулы = ЧастиФормулы.Добавить();
				СтрокаЧастиФормулы.ЧастьФормулы = Сред(ИсходноеЗначениеФормулы, НомерОткрывающейПозицииИтог, КоличествоСимволов);
				СтрокаЧастиФормулы.СодержитФункциюИтог = Истина;
				
				НомерПредыдущейЗакрывающейПозицииИтог = НомерЗакрывающейПозицииИтог;
				Если НомерЗакрывающейПозицииИтог = ДлинаСтроки Тогда
					ПродолжатьАнализФормулы = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЧастиФормулы Из ЧастиФормулы Цикл
		Если НЕ СтрокаЧастиФормулы.СодержитФункциюИтог Тогда
			Продолжить;
		КонецЕсли;
		ПозицияКонец = СтрНайти(СтрокаЧастиФормулы.ЧастьФормулы, """", НаправлениеПоиска.СКонца);
		Если ПозицияКонец = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПозицияНачало = СтрНайти(СтрокаЧастиФормулы.ЧастьФормулы, """", НаправлениеПоиска.СКонца, ПозицияКонец - 1);
		СтрокаДоИзмерений = Сред(СтрокаЧастиФормулы.ЧастьФормулы, 1, ПозицияНачало - 1);
		ПеречисленияИзмерений = Сред(СтрокаЧастиФормулы.ЧастьФормулы,
				ПозицияНачало + 1,
				ПозицияКонец - ПозицияНачало - 1);
		СтрокаПослеИзмерений = Сред(СтрокаЧастиФормулы.ЧастьФормулы, ПозицияКонец + 1);
		МассивИзмерений = СтрРазделить(ПеречисленияИзмерений, ",", Ложь);
		ИзмеренияВИдентификаторах = Новый Массив;
		Для Каждого СтрокаИзмерения Из МассивИзмерений Цикл
			Идентификатор = ПараметрыЗамены.Получить(ВРег(СокрЛП(СтрокаИзмерения)));
			Если Идентификатор = Неопределено Тогда
				ИзмеренияВИдентификаторах.Добавить(СтрокаИзмерения);
			Иначе
				ИзмеренияВИдентификаторах.Добавить(Идентификатор);
			КонецЕсли;
		КонецЦикла;
		НоваяЧастьФормулы = СтрокаДоИзмерений + """"
			+ СтрСоединить(ИзмеренияВИдентификаторах, ", ") + """" + СтрокаПослеИзмерений;
		СтрокаЧастиФормулы.ЧастьФормулы = НоваяЧастьФормулы;
	КонецЦикла;
	
	ИтоговаяФормула = "";
	Для Каждого СтрокаЧастиФормулы Из ЧастиФормулы Цикл
		ИтоговаяФормула = ИтоговаяФормула + СтрокаЧастиФормулы.ЧастьФормулы;
	КонецЦикла;
	
	СтрокаФормулы.Значение = ИтоговаяФормула;
КонецПроцедуры

Функция НайтиПозициюЗакрывающейСкобкиФункцииИтог(ПриведенноеЗначениеФормулы, НомерОткрывающейПозицииИтог)
	
	ПозицияЗакрывающейСкобки = 0;
	ИмяФункции = "ИТОГ(";
	ДлинаФункции = СтрДлина(ИмяФункции);
	ДлинаВсейФормулы = СтрДлина(ПриведенноеЗначениеФормулы);
	СчетчикСкобок = 1; // В имени функции.
	ТегНачалаОперанда = "[";
	ТегОкончанияОперанда = "]";
	
	ПредыдущаяПозицияОкончанияПоиска = НомерОткрывающейПозицииИтог + ДлинаФункции;
	
	ОсуществлятьПоиск = Истина;
	Пока ОсуществлятьПоиск Цикл
		БлижайшийОперанд = СтрНайти(ПриведенноеЗначениеФормулы, ТегНачалаОперанда, НаправлениеПоиска.СНачала, ПредыдущаяПозицияОкончанияПоиска);
		БлижайшаяОткрывающаяСкобка = СтрНайти(ПриведенноеЗначениеФормулы, "(", НаправлениеПоиска.СНачала, ПредыдущаяПозицияОкончанияПоиска);
		БлижайшаяЗакрывающаяСкобка = СтрНайти(ПриведенноеЗначениеФормулы, ")", НаправлениеПоиска.СНачала, ПредыдущаяПозицияОкончанияПоиска);
		
		Если БлижайшийОперанд <> 0
			И (БлижайшийОперанд < БлижайшаяОткрывающаяСкобка ИЛИ БлижайшаяОткрывающаяСкобка = 0)
			И (БлижайшийОперанд < БлижайшаяЗакрывающаяСкобка ИЛИ БлижайшаяЗакрывающаяСкобка = 0) Тогда
			
			// Исключается текст всего операнда.
			ПозицияЗакрытияОперанда = СтрНайти(ПриведенноеЗначениеФормулы, ТегОкончанияОперанда, НаправлениеПоиска.СНачала, БлижайшийОперанд);
			Если ПозицияЗакрытияОперанда = 0 Тогда
				// Ошибка парсинга.
				Возврат 0;
			Иначе
				ПредыдущаяПозицияОкончанияПоиска = ПозицияЗакрытияОперанда;
				Если ПредыдущаяПозицияОкончанияПоиска = ДлинаВсейФормулы Тогда
					// Ошибка парсинга.
					Возврат 0;
				Иначе
					ПредыдущаяПозицияОкончанияПоиска = ПредыдущаяПозицияОкончанияПоиска + 1;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли БлижайшаяОткрывающаяСкобка <> 0
			И (БлижайшаяОткрывающаяСкобка < БлижайшийОперанд ИЛИ БлижайшийОперанд = 0)
			И (БлижайшаяОткрывающаяСкобка < БлижайшаяЗакрывающаяСкобка ИЛИ БлижайшаяЗакрывающаяСкобка = 0) Тогда
			
			СчетчикСкобок = СчетчикСкобок + 1;
			ПредыдущаяПозицияОкончанияПоиска = БлижайшаяОткрывающаяСкобка;
			Если ПредыдущаяПозицияОкончанияПоиска = ДлинаВсейФормулы Тогда
					// Ошибка парсинга.
				Возврат 0;
			Иначе
				ПредыдущаяПозицияОкончанияПоиска = ПредыдущаяПозицияОкончанияПоиска + 1;
			КонецЕсли;
			
		ИначеЕсли БлижайшаяЗакрывающаяСкобка <> 0
			И (БлижайшаяЗакрывающаяСкобка < БлижайшийОперанд ИЛИ БлижайшийОперанд = 0)
			И (БлижайшаяЗакрывающаяСкобка < БлижайшаяОткрывающаяСкобка ИЛИ БлижайшаяОткрывающаяСкобка = 0) Тогда
			
			СчетчикСкобок = СчетчикСкобок - 1;
			Если СчетчикСкобок = 0 Тогда
				ОсуществлятьПоиск = Ложь;
				ПозицияЗакрывающейСкобки = БлижайшаяЗакрывающаяСкобка;
				Прервать;
			Иначе
				
				ПредыдущаяПозицияОкончанияПоиска = БлижайшаяЗакрывающаяСкобка;
				Если ПредыдущаяПозицияОкончанияПоиска = ДлинаВсейФормулы Тогда
					// Ошибка парсинга.
					Возврат 0;
				Иначе
					ПредыдущаяПозицияОкончанияПоиска = ПредыдущаяПозицияОкончанияПоиска + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Ошибка парсинга.
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПозицияЗакрывающейСкобки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
