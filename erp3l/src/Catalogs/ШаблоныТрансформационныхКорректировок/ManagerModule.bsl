#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ЗаполнитьРеквизитыПоРодителю(Объект) Экспорт
	
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект, "ВидОперации", 						Справочники.ВидыОпераций.УчетныеОперации);
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект, "ДействиеВСледующемПериоде", 			Перечисления.ДействияКорректировкиВСледующемПериоде.СтандартныйАлгоритмПовтора);
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект, "РасчетДатыОтраженияВУчете", 			Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода);
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект, "ДвиженияПоРегиструБухгалтерии", 		Истина);
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект, "КорректировкиЗначенийПоказателей",	Истина);
 	
	ТекПланыСчетов=Справочники.ПланыСчетовБД.Выбрать(,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если ТекПланыСчетов.Следующий() Тогда
		
		ТекПланСчетов=ТекПланыСчетов.Ссылка;
		
		МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(ТекПланСчетов);
			
		Если МассивРегистров.Количество()>0 Тогда
			
			ТекРегистрБухгалтерии=МассивРегистров[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект,"ПланСчетов");
	
	Если ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		
		ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект,"РегистрБухгалтерии");
		
	Иначе
		
		Объект.ПланСчетов=ТекПланСчетов;
		Объект.РегистрБухгалтерии=ТекРегистрБухгалтерии;
		
	КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьДатуПоСпособуРасчета(ПериодОтчета, СпособРасчетаДаты, УточнениеСпособаОпределенияДаты)
	
	КонтекстОтчета = Новый Структура;
	КонтекстОтчета.Вставить("ПериодОтчета", ПериодОтчета);
	
	СтрокаПараметр = Новый Структура;
	СтрокаПараметр.Вставить("СпособВычисленияПараметра",	СпособРасчетаДаты);
	СтрокаПараметр.Вставить("УточнениеСпособаОпределения",	УточнениеСпособаОпределенияДаты);
	СтрокаПараметр.Вставить("ИзКонтекста",					Истина);
	СтрокаПараметр.Вставить("ЗначениеИзКонтекста",			);
	СтрокаПараметр.Вставить("ЗначениеДляПроверки",			);
	
	ДанныеРасчета = УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(КонтекстОтчета, СтрокаПараметр);
	
	Возврат ДанныеРасчета.Значение;
	
КонецФункции

Функция ПолучитьДатуНачалаСледущегоПериода(ПериодОтчета)
	Возврат НачалоДня(ОбщегоНазначенияУХ.ДобавитьДень(ПериодОтчета.ДатаОкончания, 1));
КонецФункции

Функция ТребуетсяУточнениеСпособа(СпособРасчета) Экспорт

	Возврат
	(СпособРасчета = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом)	
	Или (СпособРасчета = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом)
	Или (СпособРасчета = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом)
	Или (СпособРасчета = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом)

КонецФункции

Функция ПолучитьКоэффициентПовтора(ДействиеВСледующемПериоде) Экспорт

	Если ДействиеВСледующемПериоде = Перечисления.ДействияКорректировкиВСледующемПериоде.Сторнировать Тогда
		Возврат -1;
	ИначеЕсли ДействиеВСледующемПериоде = Перечисления.ДействияКорректировкиВСледующемПериоде.Повторять Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли