
&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ВидОперации.ТолькоПросмотр			= ЗначениеЗаполнено(Объект.Родитель.ВидОперации);
	Элементы.ПланСчетов.ТолькоПросмотр			= ЗначениеЗаполнено(Объект.Родитель.ПланСчетов);
	Элементы.РегистрБухгалтерии.ТолькоПросмотр	= ЗначениеЗаполнено(Объект.Родитель.РегистрБухгалтерии);
	
	Если Объект.ДляОнлайнПроводок Тогда
		
		Элементы.ГруппаНастройкаДвижений.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ДокументБД.Видимость=Истина;
		Элементы.ГруппаКорректировки.Видимость=Ложь;

	Иначе
		
		Элементы.ГруппаНастройкаДвижений.ТекущаяСтраница=Элементы.ГруппаШаблоныФормул;
		Элементы.ГруппаНастройкаДвижений.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		Элементы.ДокументБД.Видимость=Ложь;
		Элементы.ГруппаКорректировки.Видимость=Истина;
		
	КонецЕсли;	
	
	Если Элементы.ФормаОтключитьВключить.Пометка Тогда
		
		Элементы.ФормаОтключитьВключить.ЦветТекста=Новый Цвет(255,0,0);
		Элементы.ФормаОтключитьВключить.Шрифт=Новый Шрифт(Элементы.ФормаОтключитьВключить.Шрифт, , , Истина);
		Элементы.ФормаОтключитьВключить.Заголовок=НСтр("ru = 'Отключен'");
		
	Иначе
		
		Элементы.ФормаОтключитьВключить.ЦветТекста=Новый Цвет(77,77,77);
		Элементы.ФормаОтключитьВключить.Шрифт=Новый Шрифт(Элементы.ФормаОтключитьВключить.Шрифт, , , Ложь);
		Элементы.ФормаОтключитьВключить.Заголовок=НСтр("ru = 'Отключить'");
		
	КонецЕсли;
																
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ОбновитьРегистрБухгалтерии();
	
КонецПроцедуры

// Определяет наличие в базе данных шаблона корректировки
// с наименованием ИмяВход.
&НаСервереБезКонтекста
Функция СуществуетШаблонСИменем(ИмяВход)
	РезультатФункции = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ШаблоныТрансформационныхКорректировок.Ссылка КАК Ссылка,
		|	ШаблоныТрансформационныхКорректировок.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ШаблоныТрансформационныхКорректировок КАК ШаблоныТрансформационныхКорректировок
		|ГДЕ
		|	ШаблоныТрансформационныхКорректировок.Наименование = &Наименование
		|	И НЕ ШаблоныТрансформационныхКорректировок.ПометкаУдаления";
	Запрос.УстановитьПараметр("Наименование", ИмяВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Возвращает наименование с суффиксом " (копия)". Если элемент с таким наименованием
// уже существует, будет добавлять до тех пока не получит свободное наименование.
&НаСервереБезКонтекста
Функция СформироватьНаименованиеКопия(ИсходноеНаименование)
	
	РезультатФункции = ИсходноеНаименование + НСтр("ru = ' (копия)'");
	Счетчик = 0;			// Защита от бесконечного цикла.
	Пока (СуществуетШаблонСИменем(РезультатФункции)) И (Счетчик < 100) Цикл
		
		Счетчик = Счетчик + 1;
		
		РезультатФункции = ИсходноеНаименование + СтрШаблон(Нстр("ru = ' (копия %1)'"),Счетчик);
		
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	
	Если Параметры.Ключ.Пустая() И (Не ЗначениеЗаполнено(ЗначениеКопирования)) Тогда
		
		Справочники.ШаблоныТрансформационныхКорректировок.ЗаполнитьРеквизитыПоРодителю(Объект);

	КонецЕсли;
	Если (НЕ ЗначениеЗаполнено(Объект.Ссылка)) И (ЗначениеЗаполнено(ЗначениеКопирования)) Тогда
		Объект.Наименование = СформироватьНаименованиеКопия(Объект.Наименование);
		СправочникОбъект = РеквизитФормыВЗначение("Объект"); 
		СправочникОбъект.УстановитьНовыйКод();
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		Записать();
		
		ПодчиненныеСущности = Новый Массив;
		ПодчиненныеСущности.Добавить("ГруппыРаскрытия");
		ПодчиненныеСущности.Добавить("ПоказателиОтчетов");
		ПодчиненныеСущности.Добавить("ШаблоныПроводок");
		ПодчиненныеСущности.Добавить("ПравилаОбработки");
		ПодчиненныеСущности.Добавить("ПравилаПроверки");
		
		ПараметрыКопирования = Новый ФиксированныйМассив(ПодчиненныеСущности);
		
		УправлениеОтчетамиУХ.СкопироватьПодчиненныеОбъекты(Объект.Ссылка, ЗначениеКопирования, ПараметрыКопирования, Отказ);
		ЗначениеКопирования = Неопределено;	
	Иначе
		
	КонецЕсли;
	
	Элементы.ФормаОтключитьВключить.Пометка=?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Отключен,Ложь);
	
	ПолучитьПравилоОбработки(Объект.Ссылка);
	ОбновитьРегистрБухгалтерии();
	ОбновитьТаблицуШаблонов();
	ЗаполнитьДеревоПараметровОтбораБД();
	
	ДляОнлайнПроводок=?(Объект.ДляОнлайнПроводок,1,0);
	СпособКорректировки=?(Объект.КорректировкиЗначенийПоказателей,1,0);
	
	УстановитьОтборШаблоновПроводок(Объект.Ссылка);
	
	ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
	
	УстановитьВидимость();
	
	Если ЗначениеЗаполнено(Объект.ДокументБД) Тогда
		
		ОпределитьТекущуюСтраницуПроводок();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущуюСтраницуПроводок()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШаблоныПроводок.Ссылка) КАК КоличествоШаблонов
	|ИЗ
	|	Справочник.ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если Результат.КоличествоШаблонов>=ШаблоныФормул.Количество() Тогда
		
		Элементы.ГруппаНастройкаДвижений.ТекущаяСтраница=Элементы.ГруппаШаблоныПроводок;
		
	Иначе
		
		Элементы.ГруппаНастройкаДвижений.ТекущаяСтраница=Элементы.ГруппаШаблоныФормул;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьТекущуюСтраницуПроводок()

&НаСервере
Процедура ЗаполнитьДеревоПараметровОтбораБД()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументБД) Тогда
		
		Элементы.ДекорацияОтбор.Видимость=Ложь;
		Возврат;
		
	КонецЕсли;
	
	ПриИзмененииДокументаБД();
	
	Если Объект.ТаблицаПараметровОтбораБД.Количество()=0 Тогда
		
		Элементы.ДекорацияОтбор.Видимость=Ложь;	
		Возврат;
		
	КонецЕсли;
	
	ИсточникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	
	ИсточникОбъект.ПодготовитьДеревоПолейБД();
	ИсточникОбъект.ДеревоПолейБД.Колонки.Добавить("СпособВычисленияПараметра");
	ИсточникОбъект.ДеревоПолейБД.Колонки.Добавить("УточнениеСпособаОпределения");
	ИсточникОбъект.ДеревоПолейБД.Колонки.Добавить("ЕстьОтбор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	
	Для Каждого Колонка ИЗ ИсточникОбъект.ДеревоПолейБД.Колонки Цикл
		
		ТаблицаПолей.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
		
	КонецЦикла;	

	НоваяСтрока=ИсточникОбъект.ДеревоПолейБД.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,мТаблицаПоказателейБД[0]);
		
	ИсточникОбъект.мТаблицаПоказателейБД=РеквизитФормыВЗначение("мТаблицаПоказателейБД");
	ИсточникОбъект.мТаблицаПроизводныхБД=РеквизитФормыВЗначение("мТаблицаПроизводныхБД");	
	
	Объект.ТаблицаПараметровОтбораБД.Сортировать("ИдентификаторРодителя,ИдентификаторСтроки");
	
	Для Каждого Строка ИЗ Объект.ТаблицаПараметровОтбораБД Цикл
		
		СтрПоле=ИсточникОбъект.ОпределитьРабочуюСтроку("ПолеБД",Строка.ПолеБД);
			
		Если СтрПоле=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрПоле,Строка);			
		СтрПоле.УточнениеСпособаОпределения=УправлениеОтчетамиУХ.ПолучитьУточнениеСпособаОпределения(Строка.ПолеБД,Строка.ИмяПараметра,Объект.УточненияСпособовОпределения); 
		
		СтрПоле.ЕстьОтбор=Истина;
		
		НоваяСтрока=ТаблицаПолей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоле);
		
	КонецЦикла;
	
	Для Каждого СтрПоле ИЗ ТаблицаПолей Цикл
		
		СтрДерева=ИсточникОбъект.ДеревоПолейБД.Строки.Найти(СтрПоле.ПолеБД,"ПолеБД",Истина);
		ЗаполнитьЗначенияСвойств(СтрДерева,СтрПоле);
		
	КонецЦикла;

	ДеревоПараметровОтбораБД.ПолучитьЭлементы().Очистить();
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(ИсточникОбъект.мТаблицаПроизводныхБД,мТаблицаПроизводныхБД);
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(ИсточникОбъект.ДеревоПолейБД,ДеревоПараметровОтбораБД);
	
	ИсточникОбъект=Неопределено;
	
	Элементы.ДекорацияОтбор.Заголовок=Объект.ПредставлениеОтбора;
	Элементы.ДекорацияОтбор.Видимость=(НЕ ПустаяСтрока(Объект.ПредставлениеОтбора));
	
КонецПроцедуры // ЗаполнитьДеревоПараметровОтбораБД()

&НаСервере
Процедура ПолучитьПравилоОбработки(Ссылка)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();	
	
	Если Результат.Следующий() Тогда
		
		ПравилоОбработки=Результат.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПравилоОбработки() 
 
&НаСервере
Процедура ОбновитьРегистрБухгалтерии()
	
	МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(Объект.ПланСчетов);	
	Элементы.РегистрБухгалтерии.СписокВыбора.Очистить();
	
	Для Каждого Регистр ИЗ МассивРегистров Цикл
		
		Элементы.РегистрБухгалтерии.СписокВыбора.Добавить(Регистр);
		
	КонецЦикла;
	
	Если Элементы.РегистрБухгалтерии.СписокВыбора.Количество()>0 Тогда
		
		Если НЕ Объект.РегистрБухгалтерии=Элементы.РегистрБухгалтерии.СписокВыбора[0].Значение Тогда	
			
			Объект.РегистрБухгалтерии=Элементы.РегистрБухгалтерии.СписокВыбора[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.РегистрБухгалтерии.Видимость=(НЕ Элементы.РегистрБухгалтерии.СписокВыбора.Количество()=1);
	ОбновитьРесурсыРегистра();
		
КонецПроцедуры // ОбновитьРегистрБухгалтерии()

&НаСервере
Процедура УстановитьОтборШаблоновПроводок(Знач ШаблонКорректировки)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ШаблоныПроводок, "Владелец", ШаблонКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеШаблона_Завершение(Результат, Параметры) Экспорт
	// Обработка выбора пользователя.
	РазрешатьДобавление = Истина;
    Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи шаблона корректировки %Ссылка% возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Объект.Ссылка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РазрешатьДобавление = Ложь;
		КонецПопытки;
    ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе       
		ТекстСообщения = НСтр("ru = 'Выбран неизвестный вариант: %ВыбранноеЗначение%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранноеЗначение%", Строка(Результат));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	// Добавление строк.
	Если (РазрешатьДобавление) И (ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		ШаблоныФормул.Добавить();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Операция сопоставления отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПроводки()
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументБД",			Объект.ДокументБД);
	СтруктураПараметров.Вставить("ПланСчетов",			Объект.ПланСчетов);
	СтруктураПараметров.Вставить("ШаблонКорректировки",	Объект.Ссылка);
	СтруктураПараметров.Вставить("РегистрБухгалтерии",	Объект.РегистрБухгалтерии);
	
	СтрИмяФормы="Обработка.НастройкиФормированияПроводокПоДокументам.Форма.ФормаНастройкиПроводки";
	ОткрытьФорму(СтрИмяФормы,СтруктураПараметров);
		
КонецПроцедуры // ОткрытьФормуНастройкиПроводки() 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ДвиженияПоРегиструБухгалтерии	= (СпособКорректировки=0);
	Объект.КорректировкиЗначенийПоказателей	= (СпособКорректировки=1);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		УправлениеОтчетамиУХ.ПроверитьНаличиеЭлементовНастройки(ТекущийОбъект.Ссылка,Новый Структура("ПравилоОбработки,ПравилоПроверки"),Отказ);
		
		Если НЕ ЗначениеЗаполнено(ПравилоОбработки) Тогда
			
			ПолучитьПравилоОбработки(ТекущийОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда	
		
		ОбновитьПорядковыеНомераПроводок(Отказ);
		
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядковыеНомераПроводок(Отказ)
	
	ТекТаблицаШаблонов=РеквизитФормыВЗначение("ШаблоныФормул");
	
	Индекс=1;
	
	Для Каждого Строка ИЗ ТекТаблицаШаблонов Цикл
		
		Строка.ПорядковыйНомер=Индекс;
		Индекс=Индекс+1;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекТаблицаШаблонов.Ссылка,
	|	ТекТаблицаШаблонов.ПорядковыйНомер
	|ПОМЕСТИТЬ ТабНомера
	|ИЗ
	|	&ТекТаблицаШаблонов КАК ТекТаблицаШаблонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.ПорядковыйНомер
	|ПОМЕСТИТЬ НомераПоказателей
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераПоказателей.Ссылка,
	|	ТабНомера.ПорядковыйНомер
	|ИЗ
	|	ТабНомера КАК ТабНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераПоказателей КАК НомераПоказателей
	|		ПО ТабНомера.Ссылка = НомераПоказателей.Ссылка
	|			И ТабНомера.ПорядковыйНомер <> НомераПоказателей.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекТаблицаШаблонов",ТекТаблицаШаблонов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПорядковыйНомер=Результат.ПорядковыйНомер;
		
		Попытка
			СправочникОбъект.ОбменДанными.Загрузка=Истина;
			СправочникОбъект.Записать();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось обновить порядковый номер проводки %1: %2'"), 
				СправочникОбъект, ОписаниеОшибки()),Отказ,,СтатусСообщения.Внимание);
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПорядковыеНомераПроводок()


&НаКлиенте
Процедура ШаблоныПроводокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтрИмяФормы="Обработка.НастройкиФормированияПроводокПоДокументам.Форма.ФормаНастройкиПроводки";
	ОткрытьФорму(СтрИмяФормы,Новый Структура("Ключ",Элементы.ШаблоныПроводок.ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ПравилоОбработки);
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВСледующемПериодеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаДатыСторнированияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура СвязанныеДокументы1ДокументБДПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДокументБДПриИзменении(Элемент)
	
	ПриИзмененииДокументаБД();
	РазвернутьСтрокуОтбора();
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДокументаБД()
	
	мТаблицаПоказателейБД.Очистить();
	мТаблицаПроизводныхБД.Очистить();
	
	СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
	СтрокаПоказателей.ПолеБД         	= "Регистратор";
	СтрокаПоказателей.НаименованиеБД 	= Нстр("ru = 'Регистратор'");
	СтрокаПоказателей.Регистратор       = Истина;
	СтрокаПоказателей.Балансовый 		= Истина;
	СтрокаПоказателей.Порядок			= -1;
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, "Документ."+Объект.ДокументБД.Наименование,ТипБД,ТипБД);
	
	ДеревоПараметровОтбораБДСервер=РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	ДеревоПараметровОтбораБДСервер.Строки.Очистить();
	
	ТекущаяСтрока=ДеревоПараметровОтбораБДСервер.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока,мТаблицаПоказателейБД[0]);
	
	НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
	
	ЗначениеВРеквизитФормы(ДеревоПараметровОтбораБДСервер,"ДеревоПараметровОтбораБД");
	
	УстановитьВидимость();
		
КонецПроцедуры // ПриИзмененииДокументаБД() 

&НаКлиенте
Процедура ОтключитьВключить(Команда)
	
	Элементы.ФормаОтключитьВключить.Пометка=Не Элементы.ФормаОтключитьВключить.Пометка;
	Объект.Отключен=Элементы.ФормаОтключитьВключить.Пометка;
	
	Модифицированность=Истина;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанШаблонКорректировки",Объект.ДокументБД);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПередРазворачиванием(Элемент, Строка, Отказ)
	
	ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если (НЕ (СтрокаРазворота.ТипМетаДанных="Справочник" 
		ИЛИ СтрокаРазворота.ТипМетаДанных="Документ"
		ИЛИ СтрокаРазворота.ТипМетаДанных="ПланВидовХарактеристик"
		ИЛИ СтрокаРазворота.ТипЗначения.Количество()>1)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
		
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	ОбновитьТаблицыОбъекта(ДанныеОбъекта.РабочийОбъектАдрес);
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПередРазворачиваниемСтрокиДереваПолейИсточника()

&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	Истина);
	
	СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
	
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("Измерение",					Истина);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаСервере
Функция ПоместитьРабочийОбъект()
	
	РабочийОбъект=Новый Структура;
	РабочийОбъект.Вставить("мТаблицаПоказателейБД",РеквизитФормыВЗначение("мТаблицаПоказателейБД"));
	РабочийОбъект.Вставить("мТаблицаПроизводныхБД",РеквизитФормыВЗначение("мТаблицаПроизводныхБД"));
	
	Возврат ПоместитьВоВременноеХранилище(РабочийОбъект,ЭтаФорма.УникальныйИдентификатор);	
		
КонецФункции // ПоместитьРабочийОбъект()

&НаКлиенте
Функция СформироватьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		ПоместитьРабочийОбъект());
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	ЭтаФорма.УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТипБД",						ТипБД);
	ДанныеОбъекта.Вставить("ТипБДПриемник",				ТипБД);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("Отказ",						ЛОЖЬ);
	ДанныеОбъекта.Вставить("Использование77",			Ложь);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			Истина);
	ДанныеОбъекта.Вставить("СпособПолучения",			);
	ДанныеОбъекта.Вставить("СпособИспользования",		);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаСервере
Процедура ОбновитьТаблицыОбъекта(РабочийОбъектАдрес)
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	ЗначениеВРеквизитФормы(ДанныеОбъекта.мТаблицаПоказателейБД,"мТаблицаПоказателейБД");
	ЗначениеВРеквизитФормы(ДанныеОбъекта.мТаблицаПроизводныхБД,"мТаблицаПроизводныхБД");
	
КонецПроцедуры // ОбновитьТаблицыОбъекта()

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя="СпособВычисленияПараметра" Тогда
		
		ТекСписокВыбора = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.СпособВычисленияПараметра.СписокВыбора;
		ТекСписокВыбора.Очистить();
		
		Если Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения.Количество()>0 Тогда 
			
			ДанныеОбъекта=Новый Структура;
			ДанныеОбъекта.Вставить("ИмяПараметра",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
			ДанныеОбъекта.Вставить("ТипДанныхПоля",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
			ДанныеОбъекта.Вставить("ТипЗначения",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
			ДанныеОбъекта.Вставить("ВнутренниеДанные",	Истина);
			
			СписокСпособовВычисления=ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта);
			
			Для Каждого СпособОпределения ИЗ СписокСпособовВычисления Цикл
				ТекСписокВыбора.Добавить(СпособОпределения.Значение, СпособОпределения.Представление);
			КонецЦикла;
							
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта)
	
	СписокВыбора=Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,Нстр("ru = 'Фиксированное значение'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению,Нстр("ru = 'Не равно фиксированному значению'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений,Нстр("ru = 'Список фиксированных значений'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений,Нстр("ru = 'Не в списке фиксированных значений'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии,Нстр("ru = 'Список с учетом иерархии'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии,Нстр("ru = 'Не в списке с учетом иерархии'"));
	
	Если ДанныеОбъекта.ТипЗначения[0].Значение="Дата" 
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Дата")
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение="Число"
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Число") Тогда
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Больше,Нстр("ru = 'Больше'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно,Нстр("ru = 'Больше или равно'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Меньше,Нстр("ru = 'Меньше'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно,Нстр("ru = 'Меньше или равно'"));
		
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЗначения.Количество()>1 Тогда
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения,Нстр("ru = 'Тип значения равен'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений,Нстр("ru = 'Тип значения в списке'"));
		
	КонецЕсли;
			
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется,Нстр("ru = 'Отбор не производится'"));
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокВозможныхСпособовВычисленияПараметра()

&НаКлиенте
Процедура ДеревоПараметровОтбораБДСпособВычисленияПараметраПриИзменении(Элемент)
	
	ПолучитьУстановитьОграничениеТипа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУстановитьОграничениеТипа()
	
	СтрПоле=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если СтрПоле.ТипЗначения.Количество()>0 Тогда
		
		ДанныеОбъекта=Новый Структура;
		ДанныеОбъекта.Вставить("ИмяПараметра",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
		ДанныеОбъекта.Вставить("ТипДанныхПоля",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
		ДанныеОбъекта.Вставить("ТипЗначения",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
		ДанныеОбъекта.Вставить("СпособВычисленияПараметра",	Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВычисленияПараметра);
		
		ДанныеДляОграничения=ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта);
		
		Для Каждого СтрОграничение ИЗ ДанныеДляОграничения Цикл
			
			УстановитьОграничениеТипа(СтрОграничение);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ПолучитьУстановитьОграничениеТипа()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта)
	
	ИмяПараметра=ДанныеОбъекта.ИмяПараметра;
	СпособВычисленияПараметра=ДанныеОбъекта.СпособВычисленияПараметра;
	МассивОграничений=Новый Массив;
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипЗначения[0].Значение));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипДанныхПоля[0].Значение));
		
	ИначеЕсли  СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),ДанныеОбъекта.ТипДанныхПоля[0].Значение));
		
	Иначе
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки","УточнениеСпособаОпределения"));
		
	КонецЕсли;
	
	Возврат МассивОграничений;
	
КонецФункции // ПолучитьДанныеДляОграниченияТипа()

&НаКлиенте
Процедура УстановитьОграничениеТипа(ДанныеДляОграничения)
		
	ЭлементУправления = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы[ДанныеДляОграничения.ИмяКолонки];
	
	Если ДанныеДляОграничения.Свойство("ТипЗначения") Тогда
		
		Если НЕ ТипЗнч(ДанныеДляОграничения.ТипЗначения)=Тип("Массив") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипЗначения);
			
		Иначе
			
			Массив=ДанныеДляОграничения.ТипЗначения;
			
		КонецЕсли;
		
		ЭлементУправления.Доступность = Истина;
		ЭлементУправления.ТолькоПросмотр=Ложь;
		ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(Массив);
		
		Если Массив.Найти(ТипЗнч(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]))=Неопределено Тогда
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки] = ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
			
		КонецЕсли;
		
		Если ДанныеДляОграничения.Свойство("ТипДанныхСписка") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипДанныхСписка);
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки].ТипЗначения=Новый ОписаниеТипов(Массив);

						
		КонецЕсли;
		
	Иначе
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]=Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОграничениеТипа()

&НаКлиенте
Процедура ДеревоПараметровОтбораБДУточнениеСпособаОпределенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("ВнутренниеДанные",Истина);
		ДанныеОбъекта.Вставить("СпособПолучения");
			
		НастройкаПараметровОтбораУХ.ОбработатьВыборЗначенияПараметра(ТекДанные, ЭтаФорма, ДанныеОбъекта, Элемент, СтандартнаяОбработка);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	ТекущиеДанные.ЕстьОтбор=(НЕ ТекущиеДанные.УточнениеСпособаОпределения=Неопределено);
	
	ОбновитьПредставлениеОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеОтбора()
	
	ДеревоПараметровСервер=РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	МассивОтбор=ДеревоПараметровСервер.Строки.НайтиСтроки(Новый Структура("ЕстьОтбор",Истина),Истина);

	ТекстПредставления="";
	
	Для Каждого Строка ИЗ МассивОтбор Цикл
		
		ТекстПредставления=СтрШаблон(Нстр("ru = '%1 И %2'"), ТекстПредставления, УправлениеОтчетамиУХ.ПолучитьПредставлениеОтбора(Строка));
		
	КонецЦикла;
	
	Объект.ПредставлениеОтбора=Сред(ТекстПредставления,4);	
	
	Элементы.ДекорацияОтбор.Заголовок=Объект.ПредставлениеОтбора;
	Элементы.ДекорацияОтбор.Видимость=(НЕ ПустаяСтрока(Объект.ПредставлениеОтбора));
		
КонецПроцедуры // ОбновитьПредставлениеОтбора() 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДеревоПараметровСервер=РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");	
	МассивОтбор=ДеревоПараметровСервер.Строки.НайтиСтроки(Новый Структура("ЕстьОтбор",Истина),Истина);
	
	Если МассивОтбор.Количество()=0 Тогда
		
		ТекущийОбъект.УстановленДополнительныйОтбор=Ложь;
		ТекущийОбъект.ПредставлениеОтбора="";
		
		Возврат;
		
	КонецЕсли;
				
	ИсточникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	ИсточникОбъект.ПодготовитьДеревоПараметровОтбораБД();
	
	Для Каждого Строка ИЗ МассивОтбор Цикл
		
		НоваяСтрока=ИсточникОбъект.ДеревоПараметровОтбораБД.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	
	ИсточникОбъект.мТаблицаПоказателейБД				= РеквизитФормыВЗначение("мТаблицаПоказателейБД");
	ИсточникОбъект.мТаблицаПроизводныхБД				= РеквизитФормыВЗначение("мТаблицаПроизводныхБД");
	
	ТекущийОбъект.ТекстОтбора = УправлениеОтчетамиУХ.СформироватьТекстОтбора(ИсточникОбъект.ДеревоПараметровОтбораБД);
	
	ТекущийОбъект.ТаблицаПараметровОтбораБД.Загрузить(ИсточникОбъект.ПреобразоватьДеревоПараметровВТаблицу());
	ТекущийОбъект.УточненияСпособовОпределения.Загрузить(ИсточникОбъект.УточненияСпособовОпределения.Выгрузить());
	
	ТекущийОбъект.УстановленДополнительныйОтбор=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		
		Сообщить(Нстр("ru = 'Не выбран план счетов для шаблона корректировки.'"));
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;

	Если ЗначениеЗаполнено(Объект.Ссылка) И (НЕ Модифицированность) Тогда
		
		ОткрытьФормуНастройкиПроводки();
		
	иначе
		
		СтруктураПараметров = Новый Структура;
        ТекстВопроса = НСтр("ru = 'Шаблон корректировки еще не записан. Записать?'");
        Режим = РежимДиалогаВопрос.ДаНет;
        Оповещение = Новый ОписаниеОповещения("ДобавлениеШаблона_Завершение", ЭтаФорма, СтруктураПараметров);
        ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ЗаписанШаблонПроводки" Тогда
		
		Элементы.ШаблоныПроводок.Обновить();
		
	ИначеЕсли ТипЗнч(Параметр)=Тип("Структура") И Параметр.Свойство("ТекстПроцедуры") Тогда
		
		СтрДанные=ШаблоныФормул.НайтиСтроки(Новый Структура("Ссылка",Параметр.ПотребительРасчета));
		
		Если СтрДанные.Количество()>0 Тогда
			
			СтрДанные[0].Процедура				=Параметр.ТекстПроцедуры;
			СтрДанные[0].ПроцедураРедактирования=Параметр.ПроцедураРедактирования;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьСтрокуОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокуОтбора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументБД) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Элемент ИЗ ДеревоПараметровОтбораБД.ПолучитьЭлементы() Цикл
		
		Элементы.ДеревоПараметровОтбораБД.Развернуть(Элемент.ПолучитьИдентификатор())
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныФормулПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		ТекущиеДанные=Элементы.ШаблоныФормул.ТекущиеДанные;
		
		Если Не (ЗначениеЗаполнено(ТекущиеДанные.СчетДт) 
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.СчетКт)) Тогда
			
			Сообщить(Нстр("ru = 'Не указан счета проводки.'"));
			Отказ=Истина;
			
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РесурсРегистра) Тогда
			
			Сообщить(Нстр("ru = 'Не указан счет ресурс проводки.'"));
			Отказ=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ШаблоныФормулПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элементы.ШаблоныФормул.ТекущиеДанные.Ссылка) Тогда
		
		ПометитьПроводкуНаУдаление(Элементы.ШаблоныФормул.ТекущиеДанные.ПолучитьИдентификатор(),Отказ);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ШаблоныФормулПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		
		ИзменитьПоказательШаблона(Элементы.ШаблоныФормул.ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ШаблоныФормулВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ПроцедураРасчета" И (Не Элементы.ШаблоныФормул.ТекущиеДанные=Неопределено) Тогда
		
		СтандартнаяОбработка=Ложь;
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("НазначениеРасчетов",	ПравилоОбработки);
		СтруктураПараметров.Вставить("ПотребительРасчета",	Элементы.ШаблоныФормул.ТекущиеДанные.Ссылка);
		СтруктураПараметров.Вставить("СпособИспользования",	ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
		
		ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФормулРасчета",СтруктураПараметров);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ШаблоныФормулПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		
		Сообщить(Нстр("ru = 'Не выбран план счетов для шаблона корректировки.'"));
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;

	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		СтруктураПараметров = Новый Структура;
        ТекстВопроса = НСтр("ru = 'Шаблон корректировки еще не записан. Записать?'");
        Режим = РежимДиалогаВопрос.ДаНет;
        Оповещение = Новый ОписаниеОповещения("ДобавлениеШаблона_Завершение", ЭтаФорма, СтруктураПараметров);
        ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПометитьПроводкуНаУдаление(ИдентификаторСтроки,Отказ)
	
	СтрокаДанные=ШаблоныФормул.НайтиПоИдентификатору(ИдентификаторСтроки);
	СправочникОбъект=СтрокаДанные.Ссылка.ПолучитьОбъект();
	
	СправочникОбъект.ПометкаУдаления=Истина;
	
	Попытка
		СправочникОбъект.Записать();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось пометить на удаление проводку %1: %2'"), 
			СправочникОбъект.Код, ОписаниеОшибки()),Отказ,,СтатусСообщения.Внимание);
	КонецПопытки;
		
КонецПроцедуры // ПометитьПроводкуНаУдаление()

&НаСервере
Процедура ИзменитьПоказательШаблона(ИдентификаторСтроки)
	
	СтрокаДанные=ШаблоныФормул.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Ссылка",СтрокаДанные.Ссылка);
	СтруктураПараметров.Вставить("Владелец",Объект.Ссылка);
	СтруктураПараметров.Вставить("СчетБД",СтрокаДанные.СчетДт);
	СтруктураПараметров.Вставить("КоррСчетБД",СтрокаДанные.СчетКт);
	СтруктураПараметров.Вставить("РесурсРегистра",СтрокаДанные.РесурсРегистра);

	Справочники.ПоказателиОтчетов.ИзменитьОбъектПоПараметрам(СтруктураПараметров);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанные.Ссылка) Тогда
		
		СтрокаДанные.Ссылка=СтруктураПараметров.Ссылка;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПоказательШаблона() 

&НаКлиенте
Процедура ШаблоныФормулПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не ЗначениеЗаполнено(Элементы.ШаблоныФормул.ТекущиеДанные.РесурсРегистра) Тогда
		
		Элементы.ШаблоныФормул.ТекущиеДанные.РесурсРегистра=Элементы.РесурсРегистра.СписокВыбора[0].Значение
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРесурсыРегистра()
	
	Элементы.РесурсРегистра.СписокВыбора.Очистить();
	
	Для Каждого СтрРесурс Из Объект.РегистрБухгалтерии.Ресурсы Цикл
		
		Элементы.РесурсРегистра.СписокВыбора.Добавить(СтрРесурс.Имя,СтрРесурс.Синоним,СтрРесурс.Балансовый);
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьРесурсыРегистра()

&НаСервере
Процедура ОбновитьТаблицуШаблонов()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.СчетБД КАК СчетДт,
	|	ПоказателиОтчетов.КоррСчетБД КАК СчетКт,
	|	ПоказателиОтчетов.Отключен,
	|	ПоказателиОтчетов.РесурсРегистра,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПоказателиОтчетов.ПорядковыйНомер,
	|	ПроцедурыРасчетов.Процедура КАК Процедура
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО (ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки)
	|			И ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
	|ГДЕ
	|	ПоказателиОтчетов.Предназначение = &Предназначение
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Предназначение",Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	
	ШаблоныФормул.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ШаблоныФормул.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.ПроцедураРедактирования=НоваяСтрока.Процедура;
		
	КонецЦикла;
	
	 ЗаполнитьПроцедурыРедактирования();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
КонецПроцедуры // ОбновитьТаблицуШаблонов()

&НаСервере
Процедура ЗаполнитьПроцедурыРедактирования()
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы,
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.КодПоказательОтбор
	|ПОМЕСТИТЬ ИсточникиДанных
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	|	И РеквизитыИсточниковДанныхДляФормул.СпособИспользования = &СпособИспользования";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	Запрос.Выполнить();
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникиДанных.КодИсточника,
	|	ИсточникиДанных.ПоказательТекущегоОтчета,
	|	ИсточникиДанных.ЕстьНестандартныеОтборы,
	|	ИсточникиДанных.КодУпрощеннойФормулы,
	|	ИсточникиДанных.КодПоказательОтбор
	|ИЗ
	|	ИсточникиДанных КАК ИсточникиДанных
	|ГДЕ
	|	ИсточникиДанных.ПотребительРасчета = &ПотребительРасчета";
	
		
	Для Каждого Строка ИЗ ШаблоныФормул Цикл
		
		ТекстПроцедуры=Строка.Процедура;
		
		Если Строка.ПроизвольныйКод Тогда
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		Иначе
			
			Запрос.УстановитьПараметр("ПотребительРасчета",Строка.Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
									
				ТекстОперанда=Результат.КодУпрощеннойФормулы;					
				ТекстПроцедуры=СтрЗаменить(ТекстПроцедуры,"["+СокрЛП(Результат.КодИсточника)+"]",ТекстОперанда);
				
			КонецЦикла;
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьПроцедурыРедактирования()

&НаКлиенте
Процедура ОтключенПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ШаблоныФормул.ТекущиеДанные.Ссылка) Тогда
		
		Отказ=Ложь;
		
		ОтключитьВключитьШаблон(Элементы.ШаблоныФормул.ТекущиеДанные.ПолучитьИдентификатор(),Отказ);
		
		Если Отказ Тогда
			
			Элементы.ШаблоныФормул.ТекущиеДанные.Отключен=(НЕ Элементы.ШаблоныФормул.ТекущиеДанные.Отключен);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьШаблон(ИдентификаторСтроки,Отказ)
	
	СтрокаДанные=ШаблоныФормул.НайтиПоИдентификатору(ИдентификаторСтроки);
	СправочникОбъект=СтрокаДанные.Ссылка.ПолучитьОбъект();
	
	СправочникОбъект.Отключен=СтрокаДанные.Отключен;
	СправочникОбъект.ОбменДанными.Загрузка=Истина;
	
	Попытка
		
		СправочникОбъект.Записать();
		
		Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
			
			УправлениеОтчетамиУХ.ОчиститьЗаписиРегистраПараметрическихНастроек(ПравилоОбработки);
			
		КонецЕсли;		
			
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось отключить / включить проводку %1: %2'"), 
			СправочникОбъект.Код, ОписаниеОшибки()),Отказ,,СтатусСообщения.Внимание);
	КонецПопытки;
		
КонецПроцедуры // ПометитьПроводкуНаУдаление()

&НаКлиенте
Процедура ДляОнлайнПроводокПриИзменении(Элемент)
	
	Объект.ДляОнлайнПроводок=(ДляОнлайнПроводок=1);
	
	Если Объект.ДляОнлайнПроводок Тогда
		
		ПриИзмененииПредназначенияШаблона();
		
	Иначе
		
		УстановитьВидимость();
				
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПредназначенияШаблона()
	
	Объект.ДвиженияПоРегиструБухгалтерии=Истина;
	Объект.КорректировкиЗначенийПоказателей=Ложь;
	Объект.ВидОперации=Справочники.ВидыОпераций.УчетныеОперации;
	Объект.ДействиеВСледующемПериоде=Перечисления.ДействияКорректировкиВСледующемПериоде.ПустаяСсылка();

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииПредназначенияШаблона() 

&НаКлиенте
Процедура СпособКорректировкиПриИзменении(Элемент)
	
	Объект.ДвиженияПоРегиструБухгалтерии	=(СпособКорректировки=0);
	Объект.КорректировкиЗначенийПоказателей	=(СпособКорректировки=1);
	
КонецПроцедуры



 
 

