
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	ЭтоТекущаяБД = Объект.Владелец = Справочники.ТипыБазДанных.ТекущаяИБ;
	
	ОбщегоНазначенияУХ.ЗаполнитьДеревоТЧ(Объект,ТабличныеЧасти);
		
	Если Объект.Согласуется Тогда	
		ОбновитьСписокРеквизитовСогласования();	
	КонецЕсли;
	
	ОбновитьДоступностьЭлементов();	
		  
	ОбновитьСписокРеквизитовОрганизация();
	ОбновитьСписокРеквизитовПроект();
	
	УправлениеФормой_ДополнительныеЯзыки();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если (ИмяСобытия = "ЗагрузитьГрафикИзТабличногоДокумента") И (Источник = ЭтаФорма) Тогда
		ЗаписатьНаименования(Параметр, Объект.Наименование);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьМатрицуПолномочийСправочник(Команда)
	Если Не Модифицированность Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВерсияОрганизационнойСтруктуры", Неопределено);
		СтруктураПараметров.Вставить("ОбъектБД", Объект.Ссылка);
		Имя = "Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий";
		ОткрытьФорму(Имя, СтруктураПараметров);
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВерсияОрганизационнойСтруктуры", Неопределено);
		СтруктураПараметров.Вставить("ОбъектБД", Объект.Ссылка);
		ТекстВопроса = НСтр("ru = 'Элемент %Наименование% не был записан. Продолжить с сохранением?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Наименование%", Строка(Объект.Наименование));
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗаписиЗавершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизиты(Команда)
	
	ОбновитьРеквизитыПоМетаданным();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникБД(Команда)
	
	ОткрытьФорму("Справочник."+Объект.Наименование+".ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМатрицуПолномочийНСИ(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда	
		 ЭтаФорма.Записать();	
	КонецЕсли;	
	
	
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий", Новый Структура("ВерсияОрганизационнойСтруктуры,ОбъектБД,ЭтоНастройкиЦНСИ", Неопределено,Объект.Ссылка,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТранслитомНезаполненные(Команда)
	ЗаполнитьТранслитомНезаполненныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДоступныеФормыСхемРеквизитов(Команда)
	СтруктураПараметров = Новый Структура;
	СписокФорм = Новый СписокЗначений;
	Для Каждого ТекДоступныеФормыСхемРеквизитов Из Объект.ДоступныеФормыСхемРеквизитов Цикл
		СписокФорм.Добавить(ТекДоступныеФормыСхемРеквизитов.ИмяДоступнойФормы);
	КонецЦикла;	
	СтруктураПараметров.Вставить("СписокДоступныхФормСхемРеквизитов", СписокФорм);
	СтруктураПараметров.Вставить("ОбъектБД", Объект.Ссылка);
	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыборДоступныхФормСхемыРеквизитов_Завершение", ЭтотОбъект);
	РасширениеПроцессыИСогласованиеКлиентУХ.ОткрытьФормуДоступныхСхемРеквизитов(СтруктураПараметров, ЭтаФорма, ОписаниеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТранслитПриИзменении(Элемент)
	Элементы.ЗаполнитьТранслитомНезаполненные.Доступность = Объект.ИспользоватьТранслит;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНаименования(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОткрытияФормыЗагрузки();
	ОткрытьФорму("Обработка.ЗагрузкаГрафикаФИ.Форма.Форма", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтроируемыйПриИзменении(Элемент)
	
	Элементы.ОткрытьМатрицуПолномочийЗаявкиЦНСИ.Видимость	=Объект.Контролируемый;
	Элементы.ГруппаРеквизитыСогласования.Видимость			=Объект.Согласуется;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияНаУтвержденииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияУтвержденНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияОтклоненНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.РеквизитСостоянияСтрока) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ОткрытьФорму(Объект.РеквизитСостоянияСтрока+".ФормаВыбора",,Элемент);
				
КонецПроцедуры // ВыбратьЗначениеСостояния()

&НаКлиенте
Процедура СогласуетсяПриИзменении(Элемент)
	
	Элементы.ГруппаРеквизитыСогласования.Видимость			=Объект.Согласуется;
	
	Если Объект.Согласуется Тогда	
		ОбновитьСписокРеквизитовСогласования();	
	КонецЕсли;
	
	ОбновитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСостоянияПриИзменении(Элемент)
	
	ОбновитьЗначениеТипаСостояния();

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияЧерновикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="РеквизитыТипДанных" Тогда
		
		ДанныеОбъекта=Новый Структура;
		ДанныеОбъекта.Вставить("ИмяОбъекта",СтрШаблон(Нстр("ru = 'справочник %1'"),Объект.Синоним));
		ДанныеОбъекта.Вставить("ТекстПоля",СтрШаблон(Нстр("ru = ' реквизит %1'"),Элементы.Реквизиты.ТекущиеДанные.Имя));
		ДанныеОбъекта.Вставить("ТипДанных",Элементы.Реквизиты.ТекущиеДанные.ТипДанных);	
		
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраТипаЗначений",ДанныеОбъекта);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ТабличныеЧастиТипДанных" И ЗначениеЗаполнено(Элементы.ТабличныеЧасти.ТекущиеДанные.ТипДанных) Тогда
		
		ДанныеОбъекта=Новый Структура;
		ДанныеОбъекта.Вставить("ИмяОбъекта",СтрШаблон(Нстр("ru = 'справочник %1, табличная часть %2'"),Объект.Синоним,Элементы.ТабличныеЧасти.ТекущиеДанные.ПолучитьРодителя().Синоним));
		ДанныеОбъекта.Вставить("ТекстПоля",СтрШаблон(Нстр("ru = ' реквизит %1'"),Элементы.ТабличныеЧасти.ТекущиеДанные.Имя));
		ДанныеОбъекта.Вставить("ТипДанных",Элементы.ТабличныеЧасти.ТекущиеДанные.ТипДанных);	
		
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраТипаЗначений",ДанныеОбъекта);		
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере 
Процедура ОбновитьДоступностьЭлементов()
	
	
	Элементы.ГруппаИерархия.Видимость=Объект.ИерархическийСправочник;	
	Элементы.ГруппаЦентрализованный.Доступность=Не Объект.ЦентрализованныйКлассификатор;
	Элементы.РеквизитыИспользоватьДляСогласования.Видимость	=Объект.Согласуется;
	Элементы.ГруппаРеквизитыСогласования.Видимость			=Объект.Согласуется;
	
	//Элементы только текущей ИБ
	Элементы.ГруппаПризнакиСинхронизации.Видимость = ЭтоТекущаяБД;
	Элементы.Согласуется.Видимость = ЭтоТекущаяБД;
	
	Если ЭтоТекущаяБД Тогда
		
		Элементы.СоздаватьПриНеудачномПоискеПриИмпорте.Заголовок=НСтр("ru = 'Создавать при неудачном поиске при импорте'");
		Элементы.ОбновлятьРеквизитыПриИмпорте.Заголовок=НСтр("ru = 'Обновлять реквизиты при импорте'");
		
	Иначе
		
		Элементы.СоздаватьПриНеудачномПоискеПриИмпорте.Заголовок=НСтр("ru = 'Создавать при неудачном поиске при экспорте'");
		Элементы.ОбновлятьРеквизитыПриИмпорте.Заголовок=НСтр("ru = 'Обновлять реквизиты при экспорте'")
		
	КонецЕсли;
	
	Элементы.ГруппаРазделениеПоОрганизациям.Видимость=ЭтоТекущаяБД;
			
	//Элементы ЦНСИ
	Элементы.ЦентрализованныйКлассификатор.Доступность 		= Объект.ЕстьРеквизитыНСИ;
	Элементы.ГруппаКонтролируемый.Доступность 				= Объект.ЕстьРеквизитНСИ_НеАктивный;
	Элементы.ОткрытьМатрицуПолномочийЗаявкиЦНСИ.Видимость	= Объект.Контролируемый;
		 
	
	Если Объект.Наименование = "Проекты" ИЛИ Объект.Наименование = "ДоговорыКонтрагентов" Тогда 
		Элементы.Согласуется.Доступность = Ложь;  
		Элементы.ГруппаРеквизитыСогласования.ТолькоПросмотр = Истина;	
	КонецЕсли;

	Элементы.ГруппаСогласование.Видимость = Объект.Согласуется;
	
	Элементы.ФормаОткрытьСправочникБД.Видимость=ЭтоТекущаяБД;
	// Видимость надписи Отсутствует в конфигурации.
	Элементы.ОтсутствуетВКонфигурацииНадпись.Видимость = Объект.ОтсутствуетВКонфигурации;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРеквизитовСогласования()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя");
	ТаблицаРеквизитов.Колонки.Добавить("Синоним");
	ТаблицаРеквизитов.Колонки.Добавить("Вес",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	
	Для Каждого Строка ИЗ Объект.Реквизиты Цикл
		
		Если НЕ (СтрНайти(Строка.ТипДанных,"Справочник.")>0 ИЛИ СтрНайти(Строка.ТипДанных,"Перечисление.")>0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		НоваяСтрока.Вес=?(СтрНайти(Строка.Имя,"Состоян")>0,1,0);
		
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Вес Убыв");
		
КонецПроцедуры // ОбновитьСписокРеквизитовСогласования() 

&НаСервере
Процедура ОбновитьСписокРеквизитовОрганизация()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя");
	ТаблицаРеквизитов.Колонки.Добавить("Синоним");
	
	Для Каждого Строка ИЗ Объект.Реквизиты Цикл
		
		Если НЕ СтрНайти(Строка.ТипДанных,"Справочник.Организации")>0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	Элементы.РеквизитРазделенияПоОрганизациям.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаРеквизитов Цикл
		
		Элементы.РеквизитРазделенияПоОрганизациям.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		
	КонецЦикла;		
	
КонецПроцедуры // ОбновитьСписокРеквизитовСогласования() 

&НаСервере
Процедура ОбновитьСписокРеквизитовПроект()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя");
	ТаблицаРеквизитов.Колонки.Добавить("Синоним");
	
	Для Каждого Строка ИЗ Объект.Реквизиты Цикл
		
		Если НЕ СтрНайти(Строка.ТипДанных,"Справочник.Проекты")>0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	Элементы.РеквизитРазделенияПоПроектам.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаРеквизитов Цикл
		
		Элементы.РеквизитРазделенияПоПроектам.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоМетаданным()
	
	СправочникОбъект=РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ЗаполнитьРеквизитыОбъекта();
	ЗначениеВРеквизитФормы(СправочникОбъект,"Объект");
	
	ОбновитьСписокРеквизитовСогласования();
	
КонецПроцедуры // ОбновитьРеквизитыПоМетаданным() 

&НаКлиенте
Процедура ЦентрализованныйКлассификаторПриИзменении(Элемент)

	Если Объект.ЦентрализованныйКлассификатор Тогда
			
		Режим = РежимДиалогаВопрос.ДаНет;

		Ответ = Неопределено;

		Оповещение = Новый ОписаниеОповещения("ЦентрализованныйКлассификаторПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Для централизованных классификаторов недоступно автоматическое создание новых элементов 
                                  |и изменение реквизитов существующих при импорте данных из внешних БД.Сделать справочник централизованным?'"), Режим, 0);
	    Возврат;
				
	Иначе	
		
		Элементы.ГруппаЦентрализованный.Доступность = Не Объект.ЦентрализованныйКлассификатор;
		Объект.Контролируемый = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаКонтролируемый.Доступность = Объект.ЦентрализованныйКлассификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрализованныйКлассификаторПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ= РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Объект.ЦентрализованныйКлассификатор = Ложь;
        Возврат;
    КонецЕсли;	 
    
    Элементы.ГруппаЦентрализованный.Доступность = Не Объект.ЦентрализованныйКлассификатор;    
    ИзменитьПризнакиСинхронизации();
    
    Элементы.ГруппаКонтролируемый.Доступность = Объект.ЦентрализованныйКлассификатор;

КонецПроцедуры
 
&НаСервере
Процедура ИзменитьПризнакиСинхронизации()
	
	Объект.СоздаватьПриНеудачномПоискеПриИмпорте=Ложь;
	 
	Объект.ОбновлятьРеквизитыПриИмпорте=Ложь;	
	 
КонецПроцедуры	

&НаКлиенте
Процедура ПодтверждениеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			ЭтаФорма.Записать();
			Имя = "Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий";
			ОткрытьФорму(Имя, ДополнительныеПараметры);
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи элемента произошли ошибки: %ОписаниеОшибки%. Открытие матрицы полномочий отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе       
		// Пользователь отказался.
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеЗаписиЗавершение()

&НаСервере
Процедура  ОбновитьЗначениеТипаСостояния()
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.РеквизитСостоянияСтрока = "Перечисление."+Строка(Объект.РеквизитСостояния);   
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоступныхФормСхемыРеквизитов_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Объект.ДоступныеФормыСхемРеквизитов.Очистить();
		Для Каждого ТекВыбранноеЗначение Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.ДоступныеФормыСхемРеквизитов.Добавить();
			НоваяСтрока.ИмяДоступнойФормы = СокрЛП(ТекВыбранноеЗначение.Значение);
		КонецЦикла;	
	Иначе
		// Ничего не выбрано.
	КонецЕсли;
КонецПроцедуры		// ВыборДоступныхФормСхемыРеквизитов_Завершение()

&НаСервере
Процедура УправлениеФормой_ДополнительныеЯзыки()
	
	ДопЯзыки = ДополнительныеЯзыкиПовтИспУХ.ПолучитьКодыЯзыков();
	
	Если ДопЯзыки.Количество() = 0 Тогда
		Элементы.ГруппаДополнительныеЯзыки.Видимость = Ложь;
		Возврат;	
	КонецЕсли;
	
	ТипМД = Неопределено;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		ТипМД = Метаданные.НайтиПоПолномуИмени("Справочник." + Объект.Наименование);
	КонецЕсли;
	
	Если ТипМД = Неопределено Тогда
		Элементы.ГруппаДополнительныеЯзыки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТабМД = ДополнительныеЯзыкиУХ.ПолучитьИспользованиеДопЯзыков(ТипМД.ПолноеИмя());
	
	СтрокаМД = ТабМД.Найти(ТипМД.ПолноеИмя(), "Наименование");
	ЕстьМД = (СтрокаМД <> Неопределено);
	
	Если Не ЕстьМД 
		Или (Не ЗначениеЗаполнено(СтрокаМД.Наименование1) 
		И Не ЗначениеЗаполнено(СтрокаМД.Наименование2)) Тогда
		Элементы.ЗаполнитьТранслитомНезаполненные.Видимость = Ложь;		
		Возврат;
	КонецЕсли;
		
	ТекстПодключения = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СтрокаМД.Наименование1) 
		Или Не ЗначениеЗаполнено(СтрокаМД.Наименование2) Тогда
		
		ТекстПодключения.Добавить(НСтр("ru = 'Не корректно добавлен справочник в подсистему <Дополнительные языки>'"));
		
	Иначе 
		Элементы.ЗагрузитьНаименования.Доступность = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаМД.ПолученияПолей) 
		Или Не ЗначениеЗаполнено(СтрокаМД.Представления) Тогда
		
		ТекстПодключения.Добавить(НСтр("ru = 'Для языкового представления указажите справочник в подписках представления'"));
		
	Иначе 
		
		ТекстПодключения.Добавить(НСтр("ru = 'Для справочника добавлено языковое представление'"));			
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаМД.ЗаполнитьПередЗаписью)  Тогда
		
		ТекстПодключения.Добавить(НСтр("ru = 'Для транслитерация укажите справочник в соответствующей подписке'"));
		
	Иначе 
		
		ТекстПодключения.Добавить(НСтр("ru = 'Для справочника доступна транслитерация'"));
		Элементы.ИспользоватьТранслит.Доступность = Истина;
		
	КонецЕсли;
	
	Элементы.ОписаниеПодключенияЯзыков.Заголовок = НСтр("ru = 'Справочник добавлен в подсистему <Дополнительные языки>'");
	Элементы.ОписаниеПодключенияЯзыков.Подсказка = СтрСоединить(ТекстПодключения, Символы.ПС);
	
	Элементы.ЗаполнитьТранслитомНезаполненные.Доступность = Объект.ИспользоватьТранслит;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТранслитомНезаполненныеНаСервере()
	
	Выборка = Справочники[Объект.Наименование].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Выборка.ПолучитьОбъект(), Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияФормыЗагрузки()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	т.Наименование КАК Наименование,
	|	т.Наименование1 КАК Наименование1,
	|	т.Наименование2 КАК Наименование2
	|ИЗ
	|	Справочник.ОсновныеСредства КАК т
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.Наименование1,
	|	т.Наименование");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеСредства", Объект.Наименование);
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	ПараметрыГрафика = Новый Структура("Ссылка");
		
	ЗаполнитьЗначенияСвойств(ПараметрыГрафика, Объект);
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("АдресТаблицыГрафика", 		ПоместитьВоВременноеХранилище(Таб, УникальныйИдентификатор));
	ПараметрыФормы.Вставить("Заголовок", 				Команды.Найти("ЗагрузитьНаименования").Заголовок);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗаписать", 	НСтр("ru = 'Записать'"));
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьНаименования(АдресТаблицы, НаименованиеСправочника)

	ТабНаименования = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Для каждого СтрокаТаб Из ТабНаименования.График Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаб.Наименование1) И Не ЗначениеЗаполнено(СтрокаТаб.Наименование1) Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылка = Справочники[НаименованиеСправочника].НайтиПоНаименованию(СтрокаТаб.Наименование);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		Если Не ЗначениеЗаполнено(Объект.Наименование1) Тогда
			Объект.Наименование1 = СтрокаТаб.Наименование1;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Наименование2) Тогда
			Объект.Наименование2 = СтрокаТаб.Наименование2;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Истина, Ложь);	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

