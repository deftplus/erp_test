
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем ЗначениеПараметра;
	
	Если (Параметры.Свойство("Узел", ЗначениеПараметра)
		И ЗначениеЗаполнено(ЗначениеПараметра))
		Или (Параметры.Свойство("ОбъектЭксплуатации", ЗначениеПараметра)
			И ЗначениеЗаполнено(ЗначениеПараметра))Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОбъектыЭксплуатации.Класс
			|ИЗ
			|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
			|ГДЕ
			|	ОбъектыЭксплуатации.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УзлыОбъектовЭксплуатации.Класс
			|ИЗ
			|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
			|ГДЕ
			|	УзлыОбъектовЭксплуатации.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ЗначениеПараметра);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.Отбор.Вставить("Владелец", Выборка.Класс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыРемонтов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8d92bbc-9050-44b3-82d0-13cec9963840");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыРемонтов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник ""Виды ремонтов"":
	|- заполняет новый реквизит ""Единица измерения длительности""
	|- пересчитывает длительность ремонта в целую величину';
	|en = 'Updates the ""R&M types"" catalog:
	|- populates a new ""Duration unit of measure"" attribute
	|- recalculates the duration of R&M into an integer value'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыРемонтов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыРемонтов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыРемонтов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ВидыРемонтов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРемонтов.Ссылка
	|ИЗ
	|	Справочник.ВидыРемонтов КАК ВидыРемонтов
	|ГДЕ
	|	ВидыРемонтов.ЕдиницаИзмеренияДлительности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
	|		ИЛИ ВидыРемонтов.УдалитьДлительность <> 0
	|			И ВидыРемонтов.Длительность = 0";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ВидыРемонтов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыРемонтов - 
			
			Если ОбновляемыйОбъект.Длительность = 0 
				И ОбновляемыйОбъект.УдалитьДлительность <> 0 Тогда
			
				Если ОбновляемыйОбъект.УдалитьДлительность >= 1 Тогда
					ОбновляемыйОбъект.Длительность = Цел(ОбновляемыйОбъект.УдалитьДлительность);
					Если Цел(ОбновляемыйОбъект.УдалитьДлительность) <> ОбновляемыйОбъект.УдалитьДлительность Тогда
						ОбновляемыйОбъект.Длительность = ОбновляемыйОбъект.Длительность + 1;
					КонецЕсли;
				Иначе
					ОбновляемыйОбъект.ЕдиницаИзмеренияДлительности = Перечисления.ЕдиницыИзмеренияВремени.Час;
					ОбновляемыйОбъект.Длительность = Цел(24 * ОбновляемыйОбъект.УдалитьДлительность);
				КонецЕсли;
				ОбновляемыйОбъект.УдалитьДлительность = 0;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбновляемыйОбъект.ЕдиницаИзмеренияДлительности) Тогда
				ОбновляемыйОбъект.ЕдиницаИзмеренияДлительности = Перечисления.ЕдиницыИзмеренияВремени.День;
			КонецЕсли;
			
			Если ОбновляемыйОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбновляемыйОбъект.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
 	ВнеоборотныеАктивыСлужебный.ПроверитьВыполнениеОбработчика(
 		ПроблемныхОбъектов, 
 		ОбъектовОбработано, 
 		ПолноеИмяОбъекта);
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
