#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
	
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПриоритетыПлатежей.Ссылка КАК Ссылка,
	|	ПриоритетыПлатежей.ПометкаУдаления КАК ПометкаУдаления,
	|	ПриоритетыПлатежей.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПриоритетыПлатежей.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.ПриоритетыПлатежей КАК ПриоритетыПлатежей
	|ГДЕ
	|	НЕ ПриоритетыПлатежей.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
		
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует пустую структуру данных для получения приоритета платежа.
Функция СформироватьСтруктуруДанныхПолученияПриоритетаПлатежа() Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Организация",		 КэшируемыеПроцедурыОПК.ПустаяОрганизация());
	РезультатФункции.Вставить("ЦФО",				 КэшируемыеПроцедурыОПК.ПустойЦФО());
	РезультатФункции.Вставить("ДоговорКонтрагента",	 КэшируемыеПроцедурыОПК.ПустойДоговор());
	РезультатФункции.Вставить("МассивСтатей",		 Новый Массив);
	Возврат РезультатФункции;
КонецФункции // СформироватьСтруктуруДанныхПолученияПриоритетаПлатежа()

// Возвращает приоритет текущей заявки по ее реквизитам.
Функция ПолучитьПриоритетПлатежа(СтруктураДанныхВход) Экспорт
	// Инициализация.
	РезультатФункции = Справочники.ПриоритетыПлатежей.ПустаяСсылка();
	ПриоритетыОпераций = Новый ТаблицаЗначений;
	Организация			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Организация", КэшируемыеПроцедурыОПК.ПустаяОрганизация());
	ЦФО					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ЦФО", КэшируемыеПроцедурыОПК.ПустойЦФО());
	ДоговорКонтрагента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ДоговорКонтрагента", КэшируемыеПроцедурыОПК.ПустойДоговор());
	МассивСтатей		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "МассивСтатей", Новый Массив);
	ПриоритетыОпераций.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("СправочникСсылка.ПриоритетыПлатежей"));
	ПриоритетыОпераций.Колонки.Добавить("Рейтинг", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	// Добавим приоритет Организации.
	Если ЗначениеЗаполнено(Организация) Тогда
		ПриоритетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПриоритетПлатежа");
		ДобавитьПриоритетОперации(ПриоритетыОпераций, ПриоритетОрганизации);
	Иначе
		// Пустая организация. Не добавляем приоритет.
	КонецЕсли;
	// Добавим приоритет ЦФО.
	Если ЗначениеЗаполнено(ЦФО) Тогда
		ПриоритетЦФО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЦФО, "ПриоритетПлатежа");
		ДобавитьПриоритетОперации(ПриоритетыОпераций, ПриоритетЦФО);
	Иначе
		// Пустое ЦФО. Не добавляем приоритет.
	КонецЕсли;
	// Добавим приоритет Договора.
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПриоритетДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ПриоритетПлатежа");
		ДобавитьПриоритетОперации(ПриоритетыОпераций, ПриоритетДоговора);
	Иначе
		// Договор не задан.
	КонецЕсли;
	// Добавим приоритет Статей бюджета.
	Для Каждого ТекМассивСтатей ИЗ МассивСтатей Цикл
		Если ЗначениеЗаполнено(ТекМассивСтатей) Тогда
			ПриоритетСтатьи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекМассивСтатей, "Приоритет");
			ДобавитьПриоритетОперации(ПриоритетыОпераций, ПриоритетСтатьи);
		Иначе
			// Пустая статья.
		КонецЕсли;
	КонецЦикла;
	// Проанализируем полученную таблицу приоритетов.
	Если ПриоритетыОпераций.Количество() > 0 Тогда
		// Получим приоритет из реквизитов документа.
		ПриоритетыОпераций.Сортировать("Рейтинг Убыв");
		МаксимальныйПриоритет = ПриоритетыОпераций[0];
		РезультатФункции = МаксимальныйПриоритет.Приоритет;
	Иначе
		// Выставим минимальный доступный приоритет.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриоритетыПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПриоритетыПлатежей КАК ПриоритетыПлатежей
		|ГДЕ
		|	НЕ ПриоритетыПлатежей.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетыПлатежей.РеквизитДопУпорядочивания";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выгрузка = РезультатЗапроса.Выгрузить();
			ПерваяСтрока = Выгрузка[0];					// Минимальный из доступных приоритетов.
			РезультатФункции = ПерваяСтрока.Ссылка;
		Иначе
			РезультатФункции = Справочники.ПриоритетыПлатежей.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции // ПолучитьПриоритетПлатежа()

// Процедура определяет минимально требуемый приоритет заявки исходя из ее реквизитов (Организация, ЦФО, Договор и статьей бюджета) и заполняет список возможных значений приоритета
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма документа заявки
//  ИмяЭлементПриоритет - Строка - Имя элемента Приоритет (необязательный)
//  РеквизитыДокумента  - неопределено - коллекция реквизитов документа
//
Процедура ОпределитьПриоритетОперации(Форма, ИмяЭлементПриоритет = неопределено, РеквизитыДокумента = неопределено) Экспорт
	
	//
	Объект = Форма.Объект;
	
	//
	Если ИмяЭлементПриоритет = неопределено Тогда
		ЭлементПриоритет = Форма.Элементы.Приоритет;
	Иначе
		ЭлементПриоритет = Форма.Элементы.Найти(ИмяЭлементПриоритет);
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	//
	Если РеквизитыДокумента = неопределено Тогда
		Инфо = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	Иначе
		Инфо = РеквизитыДокумента;
	КонецЕсли;
	
	//
	Запрос.УстановитьПараметр("Организация",	ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.Организация));
	Запрос.УстановитьПараметр("ЦФО",			ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ЦФО));
	Запрос.УстановитьПараметр("Договор",		ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорКонтрагента));
	Запрос.УстановитьПараметр("СписокСтатей",	ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.СтатьяБюджета));
	
	//
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриоритетыПлатежей.Ссылка КАК Ссылка,
	|	ПриоритетыПлатежей.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ПОМЕСТИТЬ ВТ_Приоритеты
	|ИЗ
	|	Справочник.ПриоритетыПлатежей КАК ПриоритетыПлатежей
	|ГДЕ
	|	ПриоритетыПлатежей.Ссылка В
	|			(ВЫБРАТЬ
	|				Организации.ПриоритетПлатежа КАК ПриоритетПлатежа
	|			ИЗ
	|				Справочник.Организации КАК Организации
	|			ГДЕ
	|				Организации.Ссылка В (&Организация, &ЦФО)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ДоговорыКонтрагентов.ПриоритетПлатежа
	|			ИЗ
	|				Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ГДЕ
	|				ДоговорыКонтрагентов.Ссылка = &Договор
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				СтатьиДвиженияДенежныхСредств.Приоритет
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				СтатьиДвиженияДенежныхСредств.Ссылка В (&СписокСтатей))
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыПлатежей.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПриоритетыПлатежей.Ссылка КАК Приоритет
	|ИЗ
	|	ВТ_Приоритеты КАК ВТ_Приоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПриоритетыПлатежей КАК ПриоритетыПлатежей
	|		ПО (ВТ_Приоритеты.РеквизитДопУпорядочивания <= ПриоритетыПлатежей.РеквизитДопУпорядочивания
	|				ИЛИ ВТ_Приоритеты.РеквизитДопУпорядочивания ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриоритетыПлатежей.РеквизитДопУпорядочивания,
	|	ПриоритетыПлатежей.Ссылка
	|ИЗ
	|	Справочник.ПриоритетыПлатежей КАК ПриоритетыПлатежей
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Приоритеты КАК ВТ_Приоритеты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВТ_Приоритеты.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритеты.Ссылка КАК Приоритет,
	|	ВТ_Приоритеты.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	ВТ_Приоритеты КАК ВТ_Приоритеты";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Список выбора
	ЭлементПриоритет.СписокВыбора.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку("Приоритет"));
	
	// Текущее значение приритета
	Выборка = Результат[2].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Объект.Приоритет) Тогда
			//
			ТекущийПриоритет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Приоритет, "РеквизитДопУпорядочивания");
			Если ТекущийПриоритет < Выборка.РеквизитДопУпорядочивания Тогда
				Объект.Приоритет = Выборка.Приоритет;
			КонецЕсли;
		Иначе
			Объект.Приоритет = Выборка.Приоритет;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПриоритетОперации(ТаблицаПриоритетов, Приоритет)
	
	Если ЗначениеЗаполнено(Приоритет) Тогда
		НовыйПриоритет = ТаблицаПриоритетов.Добавить();
		НовыйПриоритет.Приоритет = Приоритет;
		НовыйПриоритет.Рейтинг = НовыйПриоритет.Приоритет.РеквизитДопУпорядочивания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли