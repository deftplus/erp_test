#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Проверяет уникальность наименования НаименованиеВход расширенной адресации 
// согласования для объекта ВладелецВход. 
Функция ВернутьУникальноеНаименование(НаименованиеВход, ВладелецВход)
	РезультатФункции = НаименованиеВход;
	// Проверим существование элемента с таким же наименованием.
	НаименованиеРабочее = СокрЛП(НаименованиеВход);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РасширеннаяАдресацияСогласования.Ссылка КАК Ссылка,
		|	РасширеннаяАдресацияСогласования.Наименование КАК Наименование,
		|	РасширеннаяАдресацияСогласования.Владелец КАК Владелец
		|ИЗ
		|	Справочник.РасширеннаяАдресацияСогласования КАК РасширеннаяАдресацияСогласования
		|ГДЕ
		|	НЕ РасширеннаяАдресацияСогласования.ПометкаУдаления
		|	И РасширеннаяАдресацияСогласования.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ВладелецВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивНаименований = Выгрузка.ВыгрузитьКолонку("Наименование");
	МассивНаименований = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНаименований);
	МассивНаименований = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивНаименований);
	Для Каждого ТекМассивНаименований Из МассивНаименований Цикл
		ТекМассивНаименований = СокрЛП(ТекМассивНаименований);
	КонецЦикла;	
	Если МассивНаименований.Найти(НаименованиеРабочее) <> Неопределено Тогда
		// Такое наименование уже есть в базе. Добавим суффикс с номером.
		ПозицияРазделителя = СтрНайти(НаименованиеРабочее, "_", НаправлениеПоиска.СКонца);
		ОсновноеНаименование = НаименованиеРабочее;
		Если ПозицияРазделителя = 0 Тогда
			// Нет разделителя. Первый элемент. Берём в качестве основное наименование всё =наименование целиком.
			ОсновноеНаименование = НаименованиеРабочее;
		Иначе
			// Есть разделитель. Выделим основную часть..
			ДлинаНаименования = СтрДлина(НаименованиеРабочее); 
			Суффикс = Прав(НаименованиеРабочее, ДлинаНаименования - ПозицияРазделителя);
			ОсновноеНаименование = Лев(НаименованиеРабочее, ДлинаНаименования - СтрДлина(Суффикс) - 1);
		КонецЕсли;
		ДлинаОсновноеНаименование = СтрДлина(ОсновноеНаименование);
		// Определим максимальный существующий номер.
		МаксимальныйНомер = 1;
		Для Каждого ТекМассивНаименований Из МассивНаименований Цикл
			Если СтрНачинаетсяС(ТекМассивНаименований, ОсновноеНаименование) Тогда
				ТекСуффикс = Прав(ТекМассивНаименований, СтрДлина(ТекМассивНаименований) - ДлинаОсновноеНаименование - 1);
				ТекНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекСуффикс);
				Если ТекНомер <> Неопределено Тогда
					// Преобразование прошло успешно. Сравним полученный номер с максмальным.
					Если ТекНомер > МаксимальныйНомер Тогда
						МаксимальныйНомер = ТекНомер;
					Иначе
						// Не максимальный элемент. Выполняем поиск далее.
					КонецЕсли;
				Иначе
					// Преобразование не удалось. Выполняем поиск далее.
				КонецЕсли;
			Иначе
				// Неподходящее наименование. Продолжаем поиск далее.
			КонецЕсли;
		КонецЦикла;	
		// Увеличим номер на 1 и сформируем итоговый вариант.
		НовыйНомер = МаксимальныйНомер + 1;
		РезультатФункции = ОсновноеНаименование + "_" + Строка(НовыйНомер);
	Иначе
		// Наименование уникально. Запишем его.
		РезультатФункции = НаименованиеРабочее;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		 // ВернутьУникальноеНаименование()

// Возвращаает новое автоматически сгенерированное наименование для справочника 
// расширенной адресации согласования по структуре данных СтруктураДанныхВход.
Функция СгенерироватьНовоеНаименование(СтруктураДанныхВход) Экспорт 
	// Инициализация.
	РезультатФункции = "";
	Владелец							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Владелец", Справочники.СправочникиБД.ПустаяСсылка());
	ВидРасширеннойАдресацииСогласования	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ВидРасширеннойАдресацииСогласования", Справочники.РасширеннаяАдресацияСогласования.ПустаяСсылка());
	РеквизитПользователя				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "РеквизитПользователя", "");
	АдресацияРуководителю				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "АдресацияРуководителю", Ложь);
	УровеньРуководителя					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "УровеньРуководителя	", 0);
	РольАдресации						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "РольАдресации", Справочники.РолиКонтактныхЛиц.ПустаяСсылка());
	РеквизитОбъектаРолевойАдресации		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "РеквизитОбъектаРолевойАдресации", "");
	ФиксированныйОбъектАдресации		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ФиксированныйОбъектАдресации", Неопределено);
	// Добавление вида расширенной адресации.
	РезультатФункции = РезультатФункции + Строка(ВидРасширеннойАдресацииСогласования);
	// Добавление реквизитов расширенной адресации.
	Если ВидРасширеннойАдресацииСогласования = Перечисления.ВидыРасширеннойАдресацииСогласования.ПользовательИзРеквизита Тогда
		// Пользователь из реквизита.
		Если ЗначениеЗаполнено(РеквизитПользователя) Тогда
			РезультатФункции = РезультатФункции + " - ";
			РезультатФункции = РезультатФункции + Строка(РеквизитПользователя);
			Если АдресацияРуководителю Тогда
				РезультатФункции = РезультатФункции + ", ";
				ТекстАдресацииРуководителю = НСтр("ru = 'руководитель уровня %Уровень%'");
				ТекстАдресацииРуководителю = СтрЗаменить(ТекстАдресацииРуководителю, "%Уровень%", Строка(УровеньРуководителя));
				РезультатФункции = РезультатФункции + ТекстАдресацииРуководителю;
			Иначе
				// Не добавляем информацию о руководителе.
			КонецЕсли;
		Иначе
			// Реквизит пользователя не задан.
		КонецЕсли;
	ИначеЕсли ВидРасширеннойАдресацииСогласования = Перечисления.ВидыРасширеннойАдресацииСогласования.РольПоРеквизиту Тогда
		// Роль по реквизиту.
		Если (ЗначениеЗаполнено(РольАдресации)) И (ЗначениеЗаполнено(РеквизитОбъектаРолевойАдресации)) Тогда
			РезультатФункции = РезультатФункции + " - ";
			НовыйТекстАдресации = НСтр("ru = 'Роль %Роль% из реквизита %Реквизит%'");
			НовыйТекстАдресации = СтрЗаменить(НовыйТекстАдресации, "%Роль%", Строка(РольАдресации));
			НовыйТекстАдресации = СтрЗаменить(НовыйТекстАдресации, "%Реквизит%", Строка(РеквизитОбъектаРолевойАдресации));
			РезультатФункции = РезультатФункции + НовыйТекстАдресации;
		Иначе
			// Нет данных о ролевой адресации.
		КонецЕсли;
	ИначеЕсли ВидРасширеннойАдресацииСогласования = Перечисления.ВидыРасширеннойАдресацииСогласования.РольПоФиксированномуОбъекту Тогда
		// Роль по фиксированному объекту.
		Если (ЗначениеЗаполнено(РольАдресации)) И (ЗначениеЗаполнено(ФиксированныйОбъектАдресации)) Тогда
			РезультатФункции = РезультатФункции + " - ";
			НовыйТекстАдресации = НСтр("ru = 'Роль %Роль% по объекту %ОбъектАдресации%'");
			НовыйТекстАдресации = СтрЗаменить(НовыйТекстАдресации, "%Роль%", Строка(РольАдресации));
			НовыйТекстАдресации = СтрЗаменить(НовыйТекстАдресации, "%ОбъектАдресации%", Строка(ФиксированныйОбъектАдресации));
			РезультатФункции = РезультатФункции + НовыйТекстАдресации;
		Иначе
			// Нет данных о ролевой адресации.
		КонецЕсли;
	ИначеЕсли ВидРасширеннойАдресацииСогласования = Перечисления.ВидыРасширеннойАдресацииСогласования.ИнициаторПроцесса Тогда
		// Инициатор процесса.
		Если АдресацияРуководителю Тогда
			РезультатФункции = РезультатФункции + ", ";
			ТекстАдресацииРуководителю = НСтр("ru = 'руководитель уровня %Уровень%'");
			ТекстАдресацииРуководителю = СтрЗаменить(ТекстАдресацииРуководителю, "%Уровень%", Строка(УровеньРуководителя));
			РезультатФункции = РезультатФункции + ТекстАдресацииРуководителю;
		Иначе
			// Не добавляем информацию о руководителе.
		КонецЕсли;
	ИначеЕсли ВидРасширеннойАдресацииСогласования = Перечисления.ВидыРасширеннойАдресацииСогласования.ПроизвольныйКод Тогда
		// Произвольный код. Не добавляем дополнительное описание.
	Иначе
		// Неизвестный вариант. Не добавляем дополнительное описание.
	КонецЕсли;
	РезультатФункции = ВернутьУникальноеНаименование(РезультатФункции, Владелец);
	Возврат РезультатФункции;
КонецФункции		 // СгенерироватьНовоеНаименование()	

#КонецЕсли