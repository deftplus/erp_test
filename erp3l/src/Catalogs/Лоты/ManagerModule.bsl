#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Возвращает метод оценки для лота, согласно способу закупки СпособВыбораПоставщикаВход.	
Функция ПолучитьМетодОценкиПоСпособуВыбораПоставщика(СпособВыбораПоставщикаВход) Экспорт
	РезультатФункции = Перечисления.МетодыОценкиПредложенийПоставщиков.ПустаяСсылка();
	// Массив способов по ценам.
	МассивПоЦенам = Новый Массив;
	МассивПоЦенам.Добавить(Перечисления.СпособыВыбораПоставщика.ЗапросКотировок);
	МассивПоЦенам.Добавить(Перечисления.СпособыВыбораПоставщика.Аукцион);
	МассивПоЦенам.Добавить(Перечисления.СпособыВыбораПоставщика.АукционУМсп);
	МассивПоЦенам.Добавить(Перечисления.СпособыВыбораПоставщика.ЗапросКотировокУМсп);
	// Массив способов по критериям.
	МассивПоКритериям = Новый Массив;
	МассивПоКритериям.Добавить(Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика);
	МассивПоКритериям.Добавить(Перечисления.СпособыВыбораПоставщика.Конкурс);
	МассивПоКритериям.Добавить(Перечисления.СпособыВыбораПоставщика.ЗапросПредложений);
	МассивПоКритериям.Добавить(Перечисления.СпособыВыбораПоставщика.КонкурентныеПереговоры);
	МассивПоКритериям.Добавить(Перечисления.СпособыВыбораПоставщика.КонкурсУМсп);
	МассивПоКритериям.Добавить(Перечисления.СпособыВыбораПоставщика.ЗапросПредложенийУМсп);
	// Выбор метода оценки по способу выбора.
	Если МассивПоЦенам.Найти(СпособВыбораПоставщикаВход) <> Неопределено Тогда
		РезультатФункции = Перечисления.МетодыОценкиПредложенийПоставщиков.ПоЦенам;
	ИначеЕсли МассивПоКритериям.Найти(СпособВыбораПоставщикаВход) <> Неопределено Тогда
		РезультатФункции = Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный способ выбора поставщика ""%СпособВыбора%"". Не удалось получить метод оценки.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособВыбора%", Строка(СпособВыбораПоставщикаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Перечисления.МетодыОценкиПредложенийПоставщиков.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМетодОценкиПоСпособуВыбораПоставщика()

// Возвращает соответствие с именами реквизитов лота,
// с префиксом "Удален", которые перенесены в закупочную
// процедуру, и которые должны быть заполнены в ней.
//
Функция ПолучитьРеквизитыЛотаПеремещенныеВЗакупочнуюПроцедуру() Экспорт
	Возврат
		ЦентрализованныеЗакупкиУХ.ПолучитьТекстовыйМакетКакСоответствие(
			Справочники.Лоты.ПолучитьМакет(
				"РеквизитыПеремещенныеИзЛотаВЗакупочнуюПроцедуру"));
КонецФункции

// Возвращает соответствие с именами реквизитов лота,
// с префиксом "Удален", которые перенесены в строку
// плана закупок, и которые должны быть заполнены в ней.
//
Функция ПолучитьРеквизитыЛотаПеремещенныеВСтрокуПлана() Экспорт
	Возврат
		ЦентрализованныеЗакупкиУХ.ПолучитьТекстовыйМакетКакСоответствие(
			Справочники.Лоты.ПолучитьМакет(
				"РеквизитыПеремещенныеИзЛотаВСтрокуПланаЗакупки"));
КонецФункции

// Для лота с методом выбора поставщиков по критериям
// возвращает список выбранных поставщиков.
// Места расставляет в порядке убывания значений оценки.
//
Функция ПолучитьВыбранныхПоставщиков(Лот, ПротоколВыбораВход = Неопределено) Экспорт
	ТЗПоставщиков = Новый ТаблицаЗначений;
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТиповКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ОписаниеТиповПредложениеПоставщика = Новый ОписаниеТипов("ДокументСсылка.ПредложениеПоставщика");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ТЗПоставщиков.Колонки.Добавить("Место",					 ОписаниеТиповЧисло);
	ТЗПоставщиков.Колонки.Добавить("Поставщик",				 ОписаниеТиповКонтрагенты);
	ТЗПоставщиков.Колонки.Добавить("ПредложениеПоставщика",	 ОписаниеТиповПредложениеПоставщика);
	ТЗПоставщиков.Колонки.Добавить("Победитель",			 ОписаниеТиповБулево);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЗначенияКритериевОценки.Значение) КАК Значение,
	|	ЗначенияКритериевОценки.ЭтапОценки КАК ЭтапОценки,
	|	ЗначенияКритериевОценки.Критерий КАК Критерий
	|ПОМЕСТИТЬ МаксимальныеЗначения
	|ИЗ
	|	РегистрСведений.ЗначенияКритериевОценки КАК ЗначенияКритериевОценки
	|ГДЕ
	|	ЗначенияКритериевОценки.Владелец = &Лот
	|	И НЕ ЗначенияКритериевОценки.НеЗаполнен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияКритериевОценки.Критерий,
	|	ЗначенияКритериевОценки.ЭтапОценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияКритериевОценки.ОбъектОценки КАК ОбъектОценки,
	|	СУММА(ВЫБОР
	|			КОГДА ЗначенияКритериевОценки.НеЗаполнен
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НастройкиПроцессаВыбораКритерииОценки.НеИспользоватьПреобразованиеВБаллы
	|						ТОГДА ВЫБОР
	|								КОГДА МаксимальныеЗначения.Значение ЕСТЬ NULL
	|									ТОГДА 0
	|								ИНАЧЕ ВЫБОР
	|										КОГДА МаксимальныеЗначения.Значение - ЕСТЬNULL(НастройкиПроцессаВыбораКритерииОценки.МинимальноеЗначение, 0) = 0
	|											ТОГДА 0
	|										ИНАЧЕ (ЗначенияКритериевОценки.Значение - ЕСТЬNULL(НастройкиПроцессаВыбораКритерииОценки.МинимальноеЗначение, 0)) / (МаксимальныеЗначения.Значение - ЕСТЬNULL(НастройкиПроцессаВыбораКритерииОценки.МинимальноеЗначение, 0))
	|									КОНЕЦ
	|							КОНЕЦ * ЗначенияКритериевОценки.Вес
	|					ИНАЧЕ ЗначенияКритериевОценки.БалльноеЗначение / 5 * ЗначенияКритериевОценки.Вес
	|				КОНЕЦ
	|		КОНЕЦ) КАК Оценка
	|ПОМЕСТИТЬ ЗначенияКритериев
	|ИЗ
	|	РегистрСведений.ЗначенияКритериевОценки КАК ЗначенияКритериевОценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиПроцессаВыбора.КритерииОценки КАК НастройкиПроцессаВыбораКритерииОценки
	|		ПО (НастройкиПроцессаВыбораКритерииОценки.Ссылка = &НастройкаПроцессаВыбора)
	|			И ЗначенияКритериевОценки.Критерий = НастройкиПроцессаВыбораКритерииОценки.КритерийОценки
	|			И ЗначенияКритериевОценки.ЭтапОценки = НастройкиПроцессаВыбораКритерииОценки.ЭтапВыбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеЗначения КАК МаксимальныеЗначения
	|		ПО ЗначенияКритериевОценки.ЭтапОценки = МаксимальныеЗначения.ЭтапОценки
	|			И ЗначенияКритериевОценки.Критерий = МаксимальныеЗначения.Критерий
	|ГДЕ
	|	ЗначенияКритериевОценки.Владелец = &Лот
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияКритериевОценки.ОбъектОценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыВыбора.Объект КАК ПредложениеПоставщика,
	|	ОбъектыВыбора.Объект.Контрагент КАК Поставщик,
	|	ЗначенияКритериев.Оценка КАК ИнтегральнаяОценка,
	|	ОбъектыВыбора.Выбран КАК Победитель
	|ИЗ
	|	РегистрСведений.ОбъектыВыбора КАК ОбъектыВыбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияКритериев КАК ЗначенияКритериев
	|		ПО ОбъектыВыбора.Объект = ЗначенияКритериев.ОбъектОценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереторжкаЗакупок.СрезПоследних КАК ПереторжкаЗакупокСрезПоследних
	|		ПО ОбъектыВыбора.Объект.Лот.ЗакупочнаяПроцедура = ПереторжкаЗакупокСрезПоследних.ЗакупочнаяПроцедура
	|ГДЕ
	|	ОбъектыВыбора.Владелец = &Лот
	|	И ВЫБОР
	|			КОГДА &ПротоколВыбора ССЫЛКА Документ.ПротоколВыбораПобедителей
	|				ТОГДА ОбъектыВыбора.Объект.НомерПереторжки = ВЫРАЗИТЬ(&ПротоколВыбора КАК Документ.ПротоколВыбораПобедителей).НомерПереторжки
	|			ИНАЧЕ ОбъектыВыбора.Объект.НомерПереторжки = ЕСТЬNULL(ПереторжкаЗакупокСрезПоследних.НомерПереторжки, 0)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнтегральнаяОценка УБЫВ";
	НастройкаПроцесса = ВыборОбъектовУХ.НастройкаПроцессаВыбораВладельца(Лот);
	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.УстановитьПараметр("НастройкаПроцессаВыбора", НастройкаПроцесса);
	Если ПротоколВыбораВход <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПротоколВыбора", ПротоколВыбораВход);
	Иначе
		Запрос.УстановитьПараметр("ПротоколВыбора", Документы.ПротоколВыбораПобедителей.ПустаяСсылка());
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Место = 1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТЗПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Место = Место;
		Место = Место + 1;
	КонецЦикла;
	Возврат ТЗПоставщиков;
КонецФункции

// Создает лот на основании строки плана закупок
//  и включить в закупочную процедуру.
//
// Параметры:
//  ЗакупочнаяПроцедура	 - СправочникСсылка.ЗакупочныеПроцедуры
//		- закупочная процедура, которой будет принадлежать лот.
//  СтрокаПланаЗакупок - ДокументСсылка.СтрокаПланаЗакупок
//		- строка для заполнения лота.
// 
// Возвращаемое значение:
//   СправочникСсылка.Лоты - созданный и не записанный лот.
//
Функция СоздатьПоСтрокеПланаЗакупок(
						ЗакупочнаяПроцедура,
						СтрокаПланаЗакупок) Экспорт
	ЛотОбъект = Справочники.Лоты.СоздатьЭлемент();
	ЛотОбъект.Владелец = ЗакупочнаяПроцедура;
	ЛотОбъект.Заполнить(СтрокаПланаЗакупок);
	ЛотОбъект.Записать();
	Возврат ЛотОбъект.Ссылка;
КонецФункции

// Возвращает лот связанный со строкой плана закупок.
//
Функция ПолучитьПоСтрокеПланаЗакупок(СтрокаПланаЗакупок) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("СтрокаПланаЗакупок", СтрокаПланаЗакупок);
	Отбор.Вставить("ПометкаУдаления", Ложь);
	мЛоты = ЦентрализованныеЗакупкиУХ.ПолучитьСправочникПоОтбору(
		"Лоты",
		Отбор);
	Если мЛоты.Количество() > 0 Тогда
		Возврат мЛоты[0];
	КонецЕсли;
	Возврат Справочники.Лоты.ПустаяСсылка();
КонецФункции

Функция ОрганизацияДляЗаключенияДоговораЛота(Лот) Экспорт
	Если ЗначениеЗаполнено(Лот) Тогда
		Если ЗначениеЗаполнено(Лот.ОрганизацияДляЗаключенияДоговора) Тогда
			Возврат
				Лот.ОрганизацияДляЗаключенияДоговора;
		ИначеЕсли ЗначениеЗаполнено(Лот.СтрокаПланаЗакупок) Тогда
			Возврат
				Лот.СтрокаПланаЗакупок.ОрганизацияДляЗаключенияДоговора;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
КонецФункции

// Возвращает соответствие или структуру имен реквизитов 
// совпадающих в закупке и лоте, и на основании, которых
// заполняется лот по данным закупки. Значение соответствия
// всегда Истина.
//
Функция ПолучитьРеквизитыШаблонаЛотаВСтруктуре() Экспорт
	МакетРеквизиты = Справочники.Лоты.ПолучитьМакет("РеквизитыШаблонаЛота");
	РезультатФункции = ЦентрализованныеЗакупкиУХ.ПолучитьТекстовыйМакетКакСтруктуру(МакетРеквизиты);
	Возврат РезультатФункции;
КонецФункции

// Возвращает заполненное соответствие имен реквизитов
// совпадающих в закупке и лоте для заполнения лота.
//
Функция ПолучитьШаблонЛота(ЗакупочнаяПроцедура) Экспорт
	ШаблонЛота = Справочники.Лоты.ПолучитьРеквизитыШаблонаЛотаВСтруктуре();
	ЗаполнитьЗначенияСвойств(ШаблонЛота, ЗакупочнаяПроцедура);
	Возврат ШаблонЛота;
КонецФункции

// Определяет, что лот принадлежит к закупочной процедуре
// которая должна проводиться в соотвествтии с ФЗ-223.
//
Функция ЭтоФЗ223(ЛотОбъект) Экспорт
	Возврат Справочники.ЗакупочныеПроцедуры.ЭтоФЗ223(ЛотОбъект.Владелец);
КонецФункции

// Проверяет, что строка плана закупок пригодна для создания лота.
//
Функция СтрокаПланаПригоднаДляСозданияЛота(СтрокаПланаСсылка, ПричиныОтказа) Экспорт
	Если ПричиныОтказа = Неопределено Тогда
		ПричиныОтказа = Новый Массив;
	КонецЕсли;
	Если НЕ СтрокаПланаСсылка.Проведен Тогда
		НоваяПричина = НСтр("ru = 'Строка %СтрокаПланаСсылка% не проведена.'");
		НоваяПричина = СтрЗаменить(НоваяПричина, "%СтрокаПланаСсылка%", Строка(СтрокаПланаСсылка));
		ПричиныОтказа.Добавить(НоваяПричина);
	ИначеЕсли НЕ ЦентрализованныеЗакупкиУХ.СтрокаПланаЗакупокСвободна(СтрокаПланаСсылка) Тогда
		НоваяПричина = НСтр("ru = 'Для строки плана закупки %СтрокаПланаСсылка% уже введен лот.'");
		НоваяПричина = СтрЗаменить(НоваяПричина, "%СтрокаПланаСсылка%", Строка(СтрокаПланаСсылка));
		ПричиныОтказа.Добавить(НоваяПричина);
	КонецЕсли;
	Если НЕ Документы.СтрокаПланаЗакупок.ЭтоАктуальнаяВерсия(СтрокаПланаСсылка) Тогда
		ПричиныОтказа.Добавить(СтрШаблон(
			НСтр("ru='Строка плана закупки %1 не актуальна!'"),
			СтрокаПланаСсылка));
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(СтрокаПланаСсылка) Тогда
		ПричиныОтказа.Добавить(
			НСтр("ru='Строка плана закупки не утверждена!'"));
		Возврат Ложь;
	КонецЕсли;
	МассивОшибок = Новый Массив;
	Если Документы.СтрокаПланаЗакупок.ТребуетсяЗаполнитьОбязательныеРеквизитыОбоснованияНМЦ(
			СтрокаПланаСсылка, 
			МассивОшибок) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПричиныОтказа,
			МассивОшибок);
	КонецЕсли;	
	Возврат ПричиныОтказа.Количество() = 0;
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ОрганизацияДляЗаключенияДоговора)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом
	
#КонецЕсли