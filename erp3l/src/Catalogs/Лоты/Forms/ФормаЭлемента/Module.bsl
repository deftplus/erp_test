
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Скрыт Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрокаЗапретОткрытияПредопределенного();
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	Если ЭтоВнешнийПользователь Тогда		
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = СтрокаЗапретОткрыватьВнешнемуПоставщику();
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;             
	СтруктураРеквизитовШаблона = Справочники.Лоты.ПолучитьРеквизитыШаблонаЛотаВСтруктуре();
	СтруктураЦветФона = Новый Структура("ЦветФона", WebЦвета.Роса);
	ЦентрализованныеЗакупкиВызовСервераУХ.ВыделитьЭлементыФормы(
		ЭтаФорма, СтруктураРеквизитовШаблона, СтруктураЦветФона);
	#Область УниверсальныеПроцессыСогласование
	АккредитацияПоставщиковУХ.ИнициализироватьПодсистемуСогласованияПоВнешнемуПоставщику(ЭтаФорма);
	#КонецОбласти
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ИменаКлючевыхПолей = ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейКроссТаблицыПотребностей();

	Если Объект.ВидЗакупки = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда
		НастроитьКроссТаблицуЗонтичнойЗакупки();
		УстановитьВидимостьСуммыЗонтичнойЗакупки();		
	КонецЕсли;
	
	КонтенкстКроссТаблицы = ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
		"ПериодыЗакупок", "ПотребностиВНоменклатуреПоПериодам",	
		"ПотребностиВНоменклатуреПоПериодам", ИменаКлючевыхПолей);
	
	ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
		ЭтаФорма, "ПараметрыКроссТаблицыПотребностей", КонтенкстКроссТаблицы);
		
	флЭкстреннаяЗакупка = Объект.ЗакупочнаяПроцедура.ЭкстреннаяЗакупка;
	флРазделятьНоменклатуруПоКатегорийнымМенеджерам = Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить();
	ОчиститьСвязиНомеклатуры();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьМестаПоставки();
	Элементы.ПотребностиВНоменклатуреПоПериодам.ИзменятьСоставСтрок = РазрешенВводНоменклатуры(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОшибкиПользователю = ПроверкаЗаполненияПередЗаписьюНаКлиенте();
	Если ОшибкиПользователю <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
			ОшибкиПользователю, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПодготовитьЗаполнитьТаблицуИзКроссТаблицы(
		ПотребностиВНоменклатуреПоПериодам,
		ТекущийОбъект.Номенклатура,
		ЭтаФорма.ПериодыЗакупок,
		ТекущийОбъект.ЦенаВключаетНДС);
	Если Объект.ВидЗакупки = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда	
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПодготовитьЗаполнитьТаблицуИзКроссТаблицы(
		РаспределениеНоменклатураПриЗонтичнойЗакупке,
		ТекущийОбъект.УсловияРаспределенияЗонтичнойЗакупки,
		ЭтаФорма.ПериодыЗакупок,
		ТекущийОбъект.ЦенаВключаетНДС,
		Истина);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписанЛот", Объект.Владелец, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	#Область УниверсальныеПроцессыСогласование
	Если ИмяСобытия = "ОбъектСогласован"
				ИЛИ ИмяСобытия = "ОбъектОтклонен"
				ИЛИ ИмяСобытия = "МаршрутИнициализирован"
				ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора);
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура КурсВалютыПриИзменении(Элемент)
	РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаКурсаПриИзменении(Элемент)
	РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗакупокПриИзменении(Элемент)
	ПериодЗакупокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МетодОценкиПредложенийПоставщиковПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ТребуетсяКвалификационныйОтборПриИзмененииНаСервере()
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиноеМестоПоставкиПриИзменении(Элемент)
	УстановитьВидимостьМестаПоставки();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаяЗакупкаПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура СуммаЛотаПриИзменении(Элемент)
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтСуммыЛотаОбеспеченияЗаявкиПриИзменении(Элемент)
	РассчитатьВеличинуОбеспеченияЗаявки(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтСуммыЗаявкиОбеспеченияДоговораПриИзменении(Элемент)
	РассчитатьВеличинуОбеспеченияДоговора(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеДоговораПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеЗаявкиПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ПреференцииДляКонтрагентовПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеВозвратаАвансаПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСостояниеКвалификацииПоставщиков(Команда)
	Отбор_ = Новый Структура("Лот", Объект.Ссылка);
	ПараметрыОтчета = Новый Структура("Отбор, СформироватьПриОткрытии", Отбор_, Истина);
	ОткрытьФорму("Отчет.СостояниеКвалификации.ФормаОбъекта", ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура УсловиеОплатыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения(
				"ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
			СтрокаВопросЗаполнитьУсловияОплаты(),
			РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияАккредитованныхПоставщиковОТоргахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КвалификацииУчастниковПоЛотуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДату(Команда)
	РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурса(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаКурса) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрокаНеУказанаДатаКурса();
		Сообщение.Поле = "ДатаКурса";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(
		Объект, 
		СтрокаВведитеУИДЛота());
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ТоргиНеПоЦенеПриИзменении(Элемент)
	УстановитьВидимостьУсловийАукциона();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьИзЗакупочнойПроцедуры(Команда)
	КомандаЗаполнитьИзЗакупочнойПроцедурыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьИзСтрокиПланаЗакупок(Команда)
	КомандаЗаполнитьИзСтрокиПланаЗакупокНаСервере();
	ЗаполнитьРаспределениеЗонтичныхЗакупок();
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ РазрешенВводНоменклатуры(ЭтаФорма) Тогда
		Отказ = Истина;
	Иначе
		// Разрешаем вводить номенклатуру.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	ВалютаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредметДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НовыйПредмет = "";
	НовыйПредмет = НовыйПредмет + НСтр("ru = 'Закупка: '");
	Для Каждого ТекПотребностиВНоменклатуреПоПериодам Из ПотребностиВНоменклатуреПоПериодам Цикл
		ТекНоменклатура		 = ТекПотребностиВНоменклатуреПоПериодам.Номенклатура;
		ТекКоличество		 = ТекПотребностиВНоменклатуреПоПериодам.Количество;
		ТекЕдиницаИзмерения	 = ТекПотребностиВНоменклатуреПоПериодам.ЕдиницаИзмерения;
		ПредставлениеНоменклатуры = НСтр("ru = '-%Номенклатура%, %Количество% %ЕдиницаИзмерения%'");
		ПредставлениеНоменклатуры = СтрЗаменить(ПредставлениеНоменклатуры, "%Номенклатура%", Строка(ТекНоменклатура));
		ПредставлениеНоменклатуры = СтрЗаменить(ПредставлениеНоменклатуры, "%Количество%", Строка(ТекКоличество));
		ПредставлениеНоменклатуры = СтрЗаменить(ПредставлениеНоменклатуры, "%ЕдиницаИзмерения%", Строка(ТекЕдиницаИзмерения));
		НовыйПредмет = НовыйПредмет + ПредставлениеНоменклатуры;
		НовыйПредмет = НовыйПредмет + "; ";
	КонецЦикла;	
	Объект.ПредметДоговора = НовыйПредмет;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура УстановитьВидимостьМестаПоставки()
	Элементы.МестоПоставки1.Видимость = Объект.ЕдиноеМестоПоставки;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТЧНоменклатура(Команда)
	Элементы.ГруппаТЧНоменклатура.Видимость = НЕ Элементы.ГруппаТЧНоменклатура.Видимость;
	Элементы.ФормаПоказатьТЧНоменклатура.Видимость = Элементы.ГруппаТЧНоменклатура.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУсловияОплатыПоУсловиюОплаты()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.УсловияОплаты = НадписьЭтапыОплатаДляСоглашений(Объект.Соглашение);
	Иначе
		Объект.УсловияОплаты = "";
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru = 'Оплата: Любая';
							|en = 'Payment: Any'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru = 'Оплата платежной картой';
							|en = 'Payment by payment card'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru = 'Взаимозачет';
							|en = 'Offsetting'");
	Иначе
		Представление = НСтр("ru = '%ФормаОплаты% оплата';
							|en = '%ФормаОплаты% payment'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция НадписьЭтапыОплатаДляСоглашений(Соглашение) Экспорт
	
	
	ФормаОплаты            = Соглашение.ФормаОплаты;
	ЭтапыГрафикаОплаты     = Соглашение.ЭтапыГрафикаОплаты;
	КоличествоЭтаповОплаты = ЭтапыГрафикаОплаты.Количество();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты));
	
	ТекстЭтаповОплаты = "";
	Если КоличествоЭтаповОплаты = 0 Тогда
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапы не указаны';
																|en = 'steps are not set'"), , ));
		
	ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
		
		МассивСтрок.Добавить(" ");
		Для Сч=1 По КоличествоЭтаповОплаты Цикл
			СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
			ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2% %3 дн';
					|en = '%1 %2% (%3 days)'"),
				ПредставлениеВариантаОплаты(СтрокаОплаты.ВариантОплаты),
				СтрокаОплаты.ПроцентПлатежа, СтрокаОплаты.Сдвиг);
			МассивСтрок.Добавить(ТекстЭтаповОплаты);
			МассивСтрок.Добавить(", ");
		КонецЦикла;
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
	Иначе
		
		ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			КоличествоЭтаповОплаты,
			НСтр("ru = 'этапы';
				|en = 'stages'"), НСтр("ru = 'этапа';
									|en = 'stage'"), НСтр("ru = 'этапов';
														|en = 'steps'"), НСтр("ru = 'м';
																				|en = 'm'"));
			
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'в';
									|en = 'in'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
		
	КонецЕсли;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
	Возврат ТекстНадписи;
	
КонецФункции

&НаСервере
Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	Представление = "";
	
	Если ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
		Представление = НСтр("ru = 'Предоплата';
							|en = 'Prepayment'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
		Представление = НСтр("ru = 'Аванс';
							|en = 'Advance'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитСдвиг")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитСдвиг") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции


&НаКлиенте
Процедура ОбработатьПодтверждениеЗаполненияУсловий(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьУсловияОплатыПоУсловиюОплаты();
КонецПроцедуры

// Проверяем целостность лота с точки зрения пользовательской логики.
// Клиентский вариант.
//
// Возвращает:
//	тип устанавливается из функции
//		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю().
//	Если Неопределено - то ошибок нет.
//	Иначе занчение можно передать в функцию
//			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю().
//
&НаКлиенте
Функция ПроверкаЗаполненияПередЗаписьюНаКлиенте()
	ОшибкиПользователю = Неопределено;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ХарактеристикиЗаполненыКорректно(
		ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		"Характеристика",
		"ХарактеристикиИспользуются",
		ОшибкиПользователю);
	Возврат ОшибкиПользователю;
КонецФункции

// Обновляет на форме флаги закупки по организации.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФлагиОрганизации(Форма)
	СтруктураФлагов = ПолучитьСтруктуруФлаговОрганизации(Форма.Объект.ОрганизацияДляЗаключенияДоговора);
	Форма.флФЗ223 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураФлагов, "ФЗ223", Ложь);
КонецПроцедуры		// ОбновитьФлагиОрганизации()

&НаКлиенте
Процедура ОбработкаВыбораПотребностей(АдресТаблицыПотребности, ФормаВыбора) Экспорт
	Если ТипЗнч(АдресТаблицыПотребности) = Тип("Строка") Тогда
		РезультатОбработкиВыбора = ОбработкаВыбораПотребностейНаСервере(АдресТаблицыПотребности, "ВыбранныеПотребностиВНоменклатуре");
		ПараметрыКроссТаблицы = ЭтаФорма.ПараметрыКроссТаблицыПотребностей;
		ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный варинт таблицы расшифровки: %АдресТаблицы%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АдресТаблицы%", Строка(АдресТаблицыПотребности));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеИзменениеТоварнойКатегории_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПотребностиВНоменклатуреПоПериодам.Очистить();
		НоваяТоварнаяКатегория = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ТоварнаяКатегория", ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка"));
		Объект.ТоварнаяКатегория = НоваяТоварнаяКатегория;
		Модифицированность = Истина;
    Иначе
		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоварнойКатегории_Завершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		Если ПотребностиВНоменклатуреПоПериодам.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварнаяКатегория", ЗначениеВыбора.Значение);
			ТекстВопроса = НСтр("ru = 'Данные в табличной части потребности будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеИзменениеТоварнойКатегории_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			Объект.ТоварнаяКатегория = ЗначениеВыбора.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		// Ничего не выбрано.
	КонецЕсли;	
КонецПроцедуры		// ВыборТоварнойКатегории_Завершение()


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере

// Определяет, разрешено ли на форме Форма вводить номенклатуру.
&НаКлиентеНаСервереБезКонтекста
Функция РазрешенВводНоменклатуры(Форма)
	РезультатФункции = (Форма.флЭкстреннаяЗакупка) И (НЕ Форма.флФЗ223);
	Возврат РезультатФункции;
КонецФункции		 // РазрешенВводНоменклатуры()

&НаСервере
Процедура УстановитьОформлениеФормы()
	ЦентрализованныеЗакупкиУХ.УстановитьПараметрВыбораПериодичностьЗакупок(Элементы.ПериодЗакупок);
	УстановитьЗаголовокФормы();
	УстановитьВидимостьОрганизацииДляЗаключенияДоговора();
	УстановитьВидимостьВкладкиУсловия();	
	УстановитьОформлениеЭлементовЕИС();
	УстановитьОформлениеЭлементовОбеспечения();
	ЗаполненаСПЗ = ЗначениеЗаполнено(Объект.СтрокаПланаЗакупок);
	Элементы.ФормаКомандаЗаполнитьИзСтрокиПланаЗакупок.Видимость = ЗаполненаСПЗ;
	Элементы.ПотребностиВНоменклатуреПоПериодам.ТолькоПросмотр = Не РазрешенВводНоменклатуры(ЭтаФорма);
	Элементы.ДекорацияНадписьФЗ223.Видимость = ЭтаФорма.флФЗ223;
	Элементы.ГруппаТоварнаяКатегория.Видимость = флРазделятьНоменклатуруПоКатегорийнымМенеджерам;
	ПравилаРаспределенияЗонтичнойЗакупкиПриИзмененииНаСервере();
	Элементы.КоличествоПобедителейЗонтичнойЗакупки.МаксимальноеЗначение = МаксимальноеЗначениеКоличестваПобедителей();
	Элементы.СоздатьСоглашениеПоЗакупочнойПроцедуре.Видимость = Не ЗначениеЗаполнено(Объект.Соглашение);   
	Элементы.КурсВалюты.Видимость = Объект.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.ГруппаСуммаВВалюте.Видимость = Объект.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	Заголовок_ = СокрЛП(Объект.Наименование);
	Если ПустаяСтрока(Заголовок_) Тогда
		Заголовок_ = НСтр("ru = 'новый'");
	КонецЕсли;
	Заголовок_ = СтрокаПрефиксЗаголовкаФормыЛота() + Заголовок_;
	ЭтаФорма.Заголовок = Заголовок_;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОрганизацииДляЗаключенияДоговора()
	флСовместнаяЗакупка = ЗначениеЗаполнено(Объект.Владелец)
			И Объект.Владелец.СовместнаяЗакупка;
	Элементы.ОрганизацияДляЗаключенияДоговора.Видимость = флСовместнаяЗакупка;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВкладкиУсловия()
	СпособВыбораПоставщика = Объект.Владелец.СпособВыбораПоставщика;
	// Элементы аукциона
	ЭтоАукцион = Перечисления.СпособыВыбораПоставщика.ЭтоАукцион(СпособВыбораПоставщика);
	Элементы.ГруппаУсловияАукциона.Видимость = ЭтоАукцион;
	Если ЭтоАукцион Тогда
		УстановитьВидимостьУсловийАукциона();
	КонецЕсли;
	флЗакупкаУЕдинственногоПоставщика =
		(СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика);
	Элементы.МетодОценкиПредложенийПоставщиков.Видимость = НЕ флЗакупкаУЕдинственногоПоставщика;
	Элементы.ВидЗакупки.Видимость =	НЕ флЗакупкаУЕдинственногоПоставщика;
	Элементы.КоличествоПобедителейЗонтичнойЗакупки.Видимость = НЕ флЗакупкаУЕдинственногоПоставщика;	
	Элементы.ВидЗакупкиОсновнаяВкладка.Видимость =	НЕ флЗакупкаУЕдинственногоПоставщика;
	Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Видимость = НЕ флЗакупкаУЕдинственногоПоставщика;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУсловийАукциона()
	флНеПоЦене = Объект.ТоргиНеПоЦене;
	Элементы.ШагИзмененияЦены.Видимость = НЕ флНеПоЦене;
	Элементы.РазрешаетсяИзменятьЦеныВПроцессеТоргов.Видимость = НЕ флНеПоЦене;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементовОбеспечения()
	Элементы.ФормаОбеспеченияЗаявки.Видимость = Объект.ОбеспечениеЗаявки;
	Элементы.ГруппаВеличинаОбеспеченияЗаявки.Видимость = Объект.ОбеспечениеЗаявки;
	Элементы.ФормаОбеспеченияДоговора.Видимость = Объект.ОбеспечениеДоговора;
	Элементы.ГруппаВеличинаОбеспеченияДоговора.Видимость = Объект.ОбеспечениеДоговора;
	Элементы.ФормаВозвратаАванса.Видимость = Объект.ОбеспечениеВозвратаАванса;
	Элементы.ГруппаВеличинаВозвратаАванса.Видимость = Объект.ОбеспечениеВозвратаАванса;
	Элементы.ВеличинаПреференцийДляКонтрагентов.Видимость = Объект.ПреференцииДляКонтрагентов;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементовЕИС()
	Элементы.ГруппаЕИС.Видимость = 
		Справочники.Лоты.ЭтоФЗ223(Объект);
КонецПроцедуры

&НаСервере
Функция ПолучитьЛотОбъектИзРеквизитаФормы(КонтекстСохранения)
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПоместитьЛотОбъектВРеквизитФормы(ЛотОбъект, КонтекстСохранения)
	ЗначениеВРеквизитФормы(ЛотОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере()
	Объект.ДатаКурса = ТекущаяДатаСеанса();
	Объект.ДатаКурса = ТекущаяДатаСеанса();
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Объект.СуммаВВалютеРегламентированногоУчета = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(
			Объект.СуммаЛота,
			Объект.ВалютаДокумента,
			ВалютаРеглУчета, 
		    Объект.КурсВалюты,
			1, 
		    1,
			1);	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере()
	КурсИСумма = ЦентрализованныеЗакупкиВызовСервераУХ.ПересчитатьСуммуВВалютуРеглУчетаНаДату(
		Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.СуммаЛота);
	Объект.СуммаВВалютеРегламентированногоУчета = КурсИСумма.СуммаВРублях;
	Объект.КурсВалюты = КурсИСумма.Курс;
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьИзЗакупочнойПроцедурыНаСервере()
	КонтекстОперации = Неопределено;
	ЛотОбъект = ПолучитьЛотОбъектИзРеквизитаФормы(
		КонтекстОперации);
	ЛотОбъект.ЗаполнитьИзЗакупочнойПроцедуры(
		ЛотОбъект.Владелец);
	ПерезаполнитьДанныеПоСоглашению();	
	ПоместитьЛотОбъектВРеквизитФормы(
		ЛотОбъект, 
		КонтекстОперации);
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьИзСтрокиПланаЗакупокНаСервере()
	КонтекстОперации = Неопределено;
	ЛотОбъект = ПолучитьЛотОбъектИзРеквизитаФормы(
		КонтекстОперации);
	ЛотОбъект.ЗаполнитьИзСтрокиПланаЗакупок(
		ЛотОбъект.СтрокаПланаЗакупок);
	ПоместитьЛотОбъектВРеквизитФормы(
		ЛотОбъект, 
		КонтекстОперации);
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьДанныеПоСоглашению()
	
	Попытка
		Соглашение = Объект.Соглашение.ПолучитьОбъект();
		СтароеНаименование = Соглашение.Наименование;
		ЗаполнитьЗначенияСвойств(Соглашение,ОбщегоНазначенияУХ.ПолучитьРеквизитОбъекта(Объект.ЗакупочнаяПроцедура,"Соглашение"));
		Соглашение.Наименование = СтароеНаименование;
		Соглашение.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		Соглашение.Записать();
		Объект.УсловиеОплаты = НадписьЭтапыОплатаДляСоглашений(Соглашение);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Ошибка = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Невозможно создать новое соглашение по лоту по причине ""%Ошибка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ошибка%", Строка(Ошибка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецПопытки;	
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаТЧУсловийНоменклатурыПоПериодам(
									ТЧНоменклатура,
									ПериодыЗакупок,
									ИменаКлючевыхПолейКроссТаблицы)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.Менеджер КАК Менеджер,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ТЧНоменклатура.Организация КАК Организация,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.Приоритет КАК Приоритет,
		|	ТЧНоменклатура.Проект КАК Проект,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ТЧНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧНоменклатура.МестоПобедителя КАК МестоПобедителя,
		|	ТЧНоменклатура.Процент КАК Процент		
		|ПОМЕСТИТЬ ТЧНоменклатура
		|ИЗ
		|	&ПараметрТЧНоменклатура КАК ТЧНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.Менеджер КАК Менеджер,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ТЧНоменклатура.МестоПобедителя КАК МестоПобедителя,
		|	ТЧНоменклатура.Процент КАК Процент,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТЧНоменклатура.Организация КАК Организация,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.Приоритет КАК Приоритет,
		|	ТЧНоменклатура.Проект КАК Проект,
		|	ТЧНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	0 КАК НомерСтроки
		|ИЗ
		|	ТЧНоменклатура КАК ТЧНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТЧНоменклатура.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)";
	Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО "
		+ ИменаКлючевыхПолейКроссТаблицы;
	Запрос.УстановитьПараметр("ТаблицаПериодов",
		ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр("ПараметрТЧНоменклатура",
		ТЧНоменклатура.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаТЧНоменклатурыПоПериодам(
									ТЧНоменклатура,
									ПериодыЗакупок,
									ИменаКлючевыхПолейКроссТаблицы)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.Менеджер КАК Менеджер,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ТЧНоменклатура.Организация КАК Организация,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.Приоритет КАК Приоритет,
		|	ТЧНоменклатура.Проект КАК Проект,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ТЧНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем
		|ПОМЕСТИТЬ ТЧНоменклатура
		|ИЗ
		|	&ПараметрТЧНоменклатура КАК ТЧНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.Менеджер КАК Менеджер,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТЧНоменклатура.Организация КАК Организация,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.Приоритет КАК Приоритет,
		|	ТЧНоменклатура.Проект КАК Проект,
		|	ТЧНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	0 КАК НомерСтроки
		|ИЗ
		|	ТЧНоменклатура КАК ТЧНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТЧНоменклатура.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)";
	Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО "
		+ ИменаКлючевыхПолейКроссТаблицы;
	Запрос.УстановитьПараметр("ТаблицаПериодов",
		ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр("ПараметрТЧНоменклатура",
		ТЧНоменклатура.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВеличинуОбеспеченияДоговора(Объект)
	Объект.ВеличинаОбеспеченияДоговора = Объект.СуммаЛота * 
		Объект.ПроцентОтСуммыЗаявкиОбеспеченияДоговора / 100;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВеличинуОбеспеченияЗаявки(Объект)
	Объект.ВеличинаОбеспеченияЗаявки = Объект.СуммаЛота *
		Объект.ПроцентОтСуммыЛотаОбеспеченияЗаявки / 100;
КонецПроцедуры

&НаСервере
Процедура ПериодЗакупокПриИзмененииНаСервере()
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииНаСервере()
	флВыполненПересчет = 
		ЦентрализованныеЗакупкиУХ.ТиповойОбработчикПриИзмененииВалютыДокумента(
			ЭтаФорма,
			ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	Если флВыполненПересчет Тогда
		ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру, содержащую настройки закупки по организации ОрганизацияВход.
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруФлаговОрганизации(ОрганизацияВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ФЗ223", ОрганизацияВход.ЗакупкаПоФЗ223);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСтруктуруФлаговОрганизации()

// Возвращает структуру, содержащую по периоду ПериодВход период начала,
// период окончания, периодичность.
&НаСервереБезКонтекста
Функция ПолучитьДанныеПериода(ПериодВход)
	РезультатФункции = Новый Структура;
	ДатаНачала		 = ПериодВход.ДатаНачала;
	ДатаОкончания	 = ПериодВход.ДатаОкончания;
	Периодичность = ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();
	ПериодНачала	 = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(ДатаНачала, Периодичность);
	ПериодОкончания	 = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(ДатаОкончания, Периодичность);
	РезультатФункции.Вставить("ДатаНачала",			 ДатаНачала);
	РезультатФункции.Вставить("ДатаОкончания",		 ДатаОкончания);
	РезультатФункции.Вставить("ПериодНачала",		 ПериодНачала);
	РезультатФункции.Вставить("ПериодОкончания",	 ПериодОкончания);
	РезультатФункции.Вставить("Периодичность",		 Периодичность);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьДанныеПериода()

// Получаем значения ключевых измерений регистра
//  потребностей в номенклатуре и по ним заполняем
//  значения в строках таблицы. Если такие ключевые
//  значения в кросс-таблице уже есть, то записываем
//  кол-во и сумму сверху если нет, то добавляем
//  новую строку кросс-таблицы.
//
// Параметры:
//  АдресТаблицыПотребности - Строка - адрес таблицы значений
//		во временном хранилище.
//
// Возвращает:
//	Булево - есть ошибки.
//
&НаСервере
Функция ОбработкаВыбораПотребностейНаСервере(АдресТаблицыПотребности, ИмяТаблицыНаФормеПобора)
	ТаблицаПотребностей = ПолучитьИзВременногоХранилища(АдресТаблицыПотребности);
	Если ТаблицаПотребностей = Неопределено	ИЛИ ТаблицаПотребностей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		// Заполним соответствие идентификаторов периодов.
		СверткаПериоды = ТаблицаПотребностей.ВыгрузитьКолонку("ПериодПотребности");
		СверткаПериоды = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СверткаПериоды);
		СоответствиеПериод = Новый Соответствие;
		Для Каждого ТекСверткаПериоды Из СверткаПериоды Цикл
			СтруктураПоискаПериод = Новый Структура;
			СтруктураПоискаПериод.Вставить("Период", ТекСверткаПериоды);
			НайденныеСтроки = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(СтруктураПоискаПериод);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				СоответствиеПериод.Вставить(ТекСверткаПериоды, ТекНайденныеСтроки.ИмяКолонки);
			КонецЦикла;	
		КонецЦикла;	
		// Добавим недостающие строки при необходимости.
		СверткаПотребностиИзмерения = ТаблицаПотребностей.Скопировать();
		СтрокаИзмерения = "Характеристика, Цена, Коэффициент, СтавкаНДС, ЕдиницаИзмерения, Менеджер, ДоговорСПокупателем, Приоритет, МестоПоставки, Проект, Организация, Номенклатура";
		СверткаПотребностиИзмерения.Свернуть(СтрокаИзмерения);
		Для Каждого ТекСверткаПотребностиИзмерения Из СверткаПотребностиИзмерения Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Характеристика", ТекСверткаПотребностиИзмерения.Характеристика);
			СтруктураПоиска.Вставить("Цена", ТекСверткаПотребностиИзмерения.Цена);
			СтруктураПоиска.Вставить("Коэффициент", ТекСверткаПотребностиИзмерения.Коэффициент);
			СтруктураПоиска.Вставить("СтавкаНДС", ТекСверткаПотребностиИзмерения.СтавкаНДС);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ТекСверткаПотребностиИзмерения.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("Менеджер", ТекСверткаПотребностиИзмерения.Менеджер);
			СтруктураПоиска.Вставить("ДоговорСПокупателем", ТекСверткаПотребностиИзмерения.ДоговорСПокупателем);
			СтруктураПоиска.Вставить("Приоритет", ТекСверткаПотребностиИзмерения.Приоритет);
			СтруктураПоиска.Вставить("МестоПоставки", ТекСверткаПотребностиИзмерения.МестоПоставки);
			СтруктураПоиска.Вставить("Проект", ТекСверткаПотребностиИзмерения.Проект);
			СтруктураПоиска.Вставить("Организация", ТекСверткаПотребностиИзмерения.Организация);
			СтруктураПоиска.Вставить("Номенклатура", ТекСверткаПотребностиИзмерения.Номенклатура);
			НайденныеСтроки = ПотребностиВНоменклатуреПоПериодам.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ПотребностиВНоменклатуреПоПериодам.Добавить();
				НоваяСтрока.Характеристика		 = ТекСверткаПотребностиИзмерения.Характеристика;
				НоваяСтрока.Цена				 = ТекСверткаПотребностиИзмерения.Цена;
				НоваяСтрока.Коэффициент			 = ТекСверткаПотребностиИзмерения.Коэффициент;
				НоваяСтрока.СтавкаНДС			 = ТекСверткаПотребностиИзмерения.СтавкаНДС;
				НоваяСтрока.ЕдиницаИзмерения	 = ТекСверткаПотребностиИзмерения.ЕдиницаИзмерения;
				НоваяСтрока.Менеджер			 = ТекСверткаПотребностиИзмерения.Менеджер;
				НоваяСтрока.ДоговорСПокупателем	 = ТекСверткаПотребностиИзмерения.ДоговорСПокупателем;
				НоваяСтрока.Приоритет			 = ТекСверткаПотребностиИзмерения.Приоритет;
				НоваяСтрока.МестоПоставки		 = ТекСверткаПотребностиИзмерения.МестоПоставки;
				НоваяСтрока.Проект				 = ТекСверткаПотребностиИзмерения.Проект;
				НоваяСтрока.Организация			 = ТекСверткаПотребностиИзмерения.Организация;
				НоваяСтрока.Номенклатура		 = ТекСверткаПотребностиИзмерения.Номенклатура;
				ХарактеристикиИспользуются = 
					УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ХарактеристикиИспользуются(НоваяСтрока.Номенклатура);
				НоваяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
			Иначе
				// Строка уже есть. Не добавляем.
			КонецЕсли;
		КонецЦикла;
		// Разместим количество и сумму в строках.
		Для Каждого ТекТаблицаПотребностей Из ТаблицаПотребностей Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Характеристика", ТекТаблицаПотребностей.Характеристика);
			СтруктураПоиска.Вставить("Цена", ТекТаблицаПотребностей.Цена);
			СтруктураПоиска.Вставить("Коэффициент", ТекТаблицаПотребностей.Коэффициент);
			СтруктураПоиска.Вставить("СтавкаНДС", ТекТаблицаПотребностей.СтавкаНДС);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ТекТаблицаПотребностей.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("Менеджер", ТекТаблицаПотребностей.Менеджер);
			СтруктураПоиска.Вставить("ДоговорСПокупателем", ТекТаблицаПотребностей.ДоговорСПокупателем);
			СтруктураПоиска.Вставить("Приоритет", ТекТаблицаПотребностей.Приоритет);
			СтруктураПоиска.Вставить("МестоПоставки", ТекТаблицаПотребностей.МестоПоставки);
			СтруктураПоиска.Вставить("Проект", ТекТаблицаПотребностей.Проект);
			СтруктураПоиска.Вставить("Организация", ТекТаблицаПотребностей.Организация);
			СтруктураПоиска.Вставить("Номенклатура", ТекТаблицаПотребностей.Номенклатура);
			НайденныеСтроки = ПотребностиВНоменклатуреПоПериодам.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекПериод = ТекТаблицаПотребностей.ПериодПотребности;
				ИдентификаторПериода = СоответствиеПериод.Получить(ТекПериод);
				Если ЗначениеЗаполнено(ИдентификаторПериода) Тогда
					ИмяКолонкиСумма = "Сумма_" + ИдентификаторПериода;
					ТекНайденныеСтроки[ИмяКолонкиСумма] = НоваяСтрока[ИмяКолонкиСумма] + ТекТаблицаПотребностей.Сумма;
					ИмяКолонкиКоличество = "Количество_" + ИдентификаторПериода;
					ТекНайденныеСтроки[ИмяКолонкиКоличество] = НоваяСтрока[ИмяКолонкиКоличество] + ТекТаблицаПотребностей.Количество;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось получить идентификатор периода %Период%. Строка пропущена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(ТекПериод));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
				// Постобработка строки.
				ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
					Объект.ЦенаВключаетНДС, ЭтаФорма.ПериодыЗакупок, ТекНайденныеСтроки);
			КонецЦикла;	
		КонецЦикла;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'При добавлении строк из подбора возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

// Возвращает массив товарных категорий, сопоставленных менеджеру ПользовательВход
// в организации ОрганизацияВход.
&НаСервереБезКонтекста
Функция ПолучитьМассивКатегорий(ПользовательВход, ОрганизацияВход)
	РезультатФункции = РегистрыСведений.ПолномочияКатегорийныхМенеджеров.ПолучитьТоварныеКатегорииПоМенеджеру(ПользовательВход, ОрганизацияВход);
	Возврат РезультатФункции;
КонецФункции

// Убирает связи параметров выбора по товарной категории для номенклатуры, если не включена
// опция Разделять по категорийным менеджерам.
&НаСервере
Процедура ОчиститьСвязиНомеклатуры()
	Если НЕ флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		// Уберём связь по товарной категории в номенклатуре.
		НовыеСвязи = Новый Массив;
		Для Каждого ТекСвязиПараметровВыбора Из Элементы.ПотребностиВНоменклатуреПоПериодамНоменклатура.СвязиПараметровВыбора Цикл
			Если ТекСвязиПараметровВыбора.Имя <> "Отбор.ТоварнаяКатегория" Тогда
				НовыеСвязи.Добавить(ТекСвязиПараметровВыбора);
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;	
		ФиксСвязи = Новый ФиксированныйМассив(НовыеСвязи);
		Элементы.ПотребностиВНоменклатуреПоПериодамНоменклатура.СвязиПараметровВыбора = ФиксСвязи;
	Иначе
		// Оставляем связи по товарной категории.
	КонецЕсли;
КонецПроцедуры		// ОчиститьСвязиНомеклатуры()

#КонецОбласти


#Область ВнешнийИнтерфейсДляРаботыКроссТаблицыПотребностей


&НаСервере
Процедура ЗаполнитьОбъектДляКроссТаблицыПотребностей(Контекст, ОбъектДляЗаполнения) Экспорт
	ОбъектДляЗаполнения.Периодичность =	ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();								
	ЗаполнитьЗначенияСвойств(ОбъектДляЗаполнения, Объект);
	ДатаНачалаОкончанияПоставка = Документы.СтрокаПланаЗакупок.ДатыПериодаНачалаОкончанияПоставки(Объект.СтрокаПланаЗакупок);
	Если ДатаНачалаОкончанияПоставка = Неопределено Тогда
		ОбъектДляЗаполнения.ДатаНачала = Объект.ПериодЗакупок.ДатаНачала;
		ОбъектДляЗаполнения.ДатаОкончания = Объект.ПериодЗакупок.ДатаОкончания;
	Иначе	
		ОбъектДляЗаполнения.ДатаНачала = НачалоГода(ДатаНачалаОкончанияПоставка.ДатаНачала);
		ОбъектДляЗаполнения.ДатаОкончания = КонецГода(ДатаНачалаОкончанияПоставка.ДатаОкончания); 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = Объект.ДатаНачалаПериодаПоставки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКроссТаблицы(Контекст) Экспорт

КонецПроцедуры

&НаСервере
Процедура СкопироватьВКроссТаблицу(Контекст) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.ПериодЗакупок) Тогда
		Возврат;
	КонеЦЕсли;
	Если Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы = "РаспределениеНоменклатураПриЗонтичнойЗакупке" Тогда
		Номенклатура = "УсловияРаспределенияЗонтичнойЗакупки";
		РезультатЗапроса = ПолучитьРезультатЗапросаТЧУсловийНоменклатурыПоПериодам(
		Объект[Номенклатура],
		ЭтаФорма[Контекст.ИмяТаблицыПериодов],
		Контекст.ИменаКлючевыхПолейКроссТаблицы);		
	Иначе
		Номенклатура = "Номенклатура";
		ПотребностиВНоменклатуреПоПериодам.Очистить();
		РезультатЗапроса = ПолучитьРезультатЗапросаТЧНоменклатурыПоПериодам(
		Объект[Номенклатура],
		ЭтаФорма[Контекст.ИмяТаблицыПериодов],
		Контекст.ИменаКлючевыхПолейКроссТаблицы);		
	КонецЕсли;	

	Если Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы = "РаспределениеНоменклатураПриЗонтичнойЗакупке" Тогда
		ДозаполнитьТаблицуЗонтичныхЗакупок(
		РезультатЗапроса);		
	Иначе	
		ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		РезультатЗапроса);  
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ДозаполнитьТаблицуЗонтичныхЗакупок(РезультатЗапроса)
	ЦентрализованныеЗакупкиУХ.ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		РаспределениеНоменклатураПриЗонтичнойЗакупке,
		РезультатЗапроса,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы+",МестоПобедителя", Истина);
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьИтоговыеПоказателиКроссТаблицы(
		РаспределениеНоменклатураПриЗонтичнойЗакупке,
		ЭтаФорма.ПериодыЗакупок,
		Объект.ЦенаВключаетНДС);	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличества(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииКоличестваКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(
		Элементы.ПотребностиВНоменклатуреПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦены(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииЦеныКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(
		Элементы.ПотребностиВНоменклатуреПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииСуммыКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	СтрокаТоваров = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
	Если СтрокаТоваров <> Неопределено
		 И СтрокаТоваров.ЭтоКатегорияНоменклатуры Тогда
		ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(
			Элементы.ПотребностиВНоменклатуреПоПериодам);
		ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
	

#КонецОбласти

&НаКлиенте
Функция СтрокаВопросУкажитеКатегориюЗакупки()
	Возврат НСтр("ru='Укажите категорию закупки для исключения из годового объема!'");
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ()
	Элементы.КатегорияЗакупкиДляИсключенияИзГОЗ.Видимость = Объект.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
КонецПроцедуры

#Область РаботаСКроссТаблицейПотребностей


&НаСервере
Процедура ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(РезультатЗапроса)
	ЦентрализованныеЗакупкиУХ.ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		ПотребностиВНоменклатуреПоПериодам,
		РезультатЗапроса,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы);
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьИтоговыеПоказателиКроссТаблицы(
		ПотребностиВНоменклатуреПоПериодам,
		ЭтаФорма.ПериодыЗакупок,
		Объект.ЦенаВключаетНДС);	
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуДокументаИзКроссТаблицы(Форма)
	Форма.ИтогоСуммаПоНоменклатуре =
		Форма.ПотребностиВНоменклатуреПоПериодам.Итог("Сумма");
	Форма.Объект.СуммаЛота = Форма.ИтогоСуммаПоНоменклатуре;
	Форма.Объект.СуммаНДС =
		Форма.ПотребностиВНоменклатуреПоПериодам.Итог("СуммаНДС");
	РассчитатьВеличинуОбеспеченияЗаявки(Форма.Объект);
	РассчитатьВеличинуОбеспеченияДоговора(Форма.Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамНоменклатураПриИзменении(Элемент)
	ПараметрыКроссТаблицы = ЭтаФорма.ПараметрыКроссТаблицыПотребностей;
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикНоменклатураПриИзменении(ЭтаФорма, ПараметрыКроссТаблицы);
	// Подменяем товарную категорию из шапки.
	Если флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		ТекДанные = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
				КатегорияШапки = Объект.ТоварнаяКатегория;
				Если ЗначениеЗаполнено(КатегорияШапки) Тогда
					ТекстСообщения = НСтр("ru = 'На закладке ""Основные сведения"" выбрана товарная категория ""%ТоварнаяКатегория%"". Значение заменено.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварнаяКатегория%", Строка(КатегорияШапки));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);					
					ТекДанные.Номенклатура = КатегорияШапки;
				Иначе
					// Товарная категория не выбрана. Ограничение не требуется.
				КонецЕсли;
			Иначе
				// Это номенклатура. Ограничение не требуется.
			КонецЕсли;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Не используем товарные категории.
	КонецЕсли;
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамХарактеристикаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикХарактеристикаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры
	
&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамЕдиницаИзмеренияПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЕдиницаИзмеренияПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамЦенаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЦенаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамСтавкаНДСПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикСтавкаНДСПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры
	
&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма, 
		"ПотребностиВНоменклатуреПоПериодам");
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПослеУдаления(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма,
		"ПотребностиВНоменклатуреПоПериодам");
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(Элемент)
	
	АктивныеПериоды = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(Новый Структура("Активная", Истина));
	Если АктивныеПериоды.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоПоКолонке = "";
	ИтогоПоСтроке = СтрокаШаблонВсегоПоСтрокеПотребности();
		
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%Валюта%", Строка(Объект.ВалютаДокумента));
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%СуммаПоСтроке%", Формат(ТекущиеДанные.Сумма, "ЧДЦ=2; ЧН=0,00"));
	
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		Для каждого Период Из АктивныеПериоды Цикл
			Если Элемент.ТекущийЭлемент.Имя = "ПотребностиВНоменклатуреПоПериодамЦена_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "ПотребностиВНоменклатуреПоПериодамКоличество_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "ПотребностиВНоменклатуреПоПериодамСумма_"+Период.ИмяКолонки Тогда
				
				СуммаПоКолонке = ЭтаФорма["ПотребностиВНоменклатуреПоПериодамСумма_"+ Период.ИмяКолонки];
				ИтогоПоКолонке = СтрокаШаблонВсегоЗаПериодПоПотребностям();
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%ПериодЗаголовок%", Период.Заголовок);
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%СуммаПоКолонке%", Формат(СуммаПоКолонке, "ЧДЦ=2; ЧН=0,00"));
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%Валюта%", Строка(Объект.ВалютаДокумента));
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИтогоПоСтрокеКолонке = ИтогоПоСтроке + " " + ИтогоПоКолонке;
	УстановитьОформлениеПодвала();
КонецПроцедуры
&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ГруппаНоменклатура.ТолькоПросмотр = Истина
			И Поле.Имя = "ПотребностиВНоменклатуреПоПериодамНоменклатура" Тогда
		ЦентрализованныеЗакупкиКлиентУХ.ОткрытьФормуНоменклатурыСтрокиКроссТаблицы(
			ПотребностиВНоменклатуреПоПериодам,
			ВыбраннаяСтрока,
			ЭтаФорма);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область Локализация


&НаСервереБезКонтекста
Функция СтрокаЗапретОткрытияПредопределенного()
	Возврат НСтр("ru='Невозможно открыть для редактирования предопределенный элемент!'");
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаЗапретОткрыватьВнешнемуПоставщику()
	Возврат НСтр("ru='Запрещено открывать лот внешнему поставщику. Воспользуйтесь реквизитами разделов ""Лоты"" и ""Выигранные лоты""'");
КонецФункции

&НаКлиенте
Функция СтрокаЗапретУдаленияТребованийОрганизации()
	Возврат НСтр("ru='Нельзя удалить требование установленное учетной политикой организации!'");
КонецФункции

&НаКлиенте
Функция СтрокаВопросЗаполнитьУсловияОплаты()
	Возврат НСтр("ru='Заполнить поле ""Условия оплаты текстовое описание"" по данным условия оплаты?'");
КонецФункции

&НаКлиенте
Функция СтрокаНеУказанаДатаКурса()
	Возврат НСтр("ru='Не указана дата курса!'");
КонецФункции

&НаКлиенте
Функция СтрокаВведитеУИДЛота()
	Возврат НСтр("ru='Введите УИД лота'");
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаПрефиксЗаголовкаФормыЛота()
	Возврат НСтр("ru='Лот: '");
КонецФункции

&НаКлиенте
Функция СтрокаШаблонВсегоПоСтрокеПотребности()
	Возврат НСтр("ru='Всего по строке: %СуммаПоСтроке% %Валюта%.'");
КонецФункции

&НаКлиенте
Функция СтрокаШаблонВсегоЗаПериодПоПотребностям()
	Возврат НСтр("ru='Всего за период %ПериодЗаголовок%: %СуммаПоКолонке% %Валюта%'");
КонецФункции


#КонецОбласти


#Область ШаблоныЗаполнения


// Получает структуру шаблона по текущему объекту.
&НаСервере
Функция ВернутьСтруктураДанныхОбъектаШаблона()
	ОбъектШаблона = РеквизитФормыВЗначение("Объект");
	СтруктураДанныхОбъекта = УправлениеШаблонамиЗаполненияУХ.СтруктураДанныхОбъектаШаблонаПоОбъекту(ОбъектШаблона);
	Возврат СтруктураДанныхОбъекта;
КонецФункции

// Выполняет заполнение реквизитов формы по шаблону заполнения ШаблонВход.
&НаСервере
Процедура ЗаполнитьФормуПоШаблону(ШаблонВход)
	КонтекстСохранения = Неопределено;
    ОбъектШаблона = ПолучитьЛотОбъектИзРеквизитаФормы(КонтекстСохранения);
    ЗаполненныйОбъект = УправлениеШаблонамиЗаполненияУХ.ЗаполнитьИзШаблона(ШаблонВход, ОбъектШаблона);
    ПоместитьЛотОбъектВРеквизитФормы(ЗаполненныйОбъект, КонтекстСохранения);
КонецПроцедуры

// Возвращает организацию для заключения договора закупочной процедуры,
// к которой привязан лот ЛотВход.
&НаСервереБезКонтекста
Функция ПолучитьОрганизациюЗакупочнойПроцедурыЛота(ЛотВход)
	РезультатФункции = УправлениеШаблонамиЗаполненияУХ.ПолучитьОрганизациюЗакупочнойПроцедурыЛота(ЛотВход);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОрганизациюЗакупочнойПроцедурыЛота()

&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)
	ОрганизацияЗакупочнойПроцедуры = ПолучитьОрганизациюЗакупочнойПроцедурыЛота(Объект.Ссылка);
	СтруктураДанныхОбъектаШаблона = ВернутьСтруктураДанныхОбъектаШаблона();	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", СтруктураДанныхОбъектаШаблона.Назначение);
	ПараметрыФормы.Вставить("АналитикаОтбора", ОрганизацияЗакупочнойПроцедуры);
	ПараметрыФормы.Вставить("ИмяОбъекта", СтруктураДанныхОбъектаШаблона.ИмяОбъекта);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ШаблоныЗаполнения.ФормаВыбора", ПараметрыФормы, ЭтаФорма);		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВШаблон(Команда)
	УправлениеШаблонамиЗаполненияКлиентУХ.СохранитьВШаблон(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ШаблоныЗаполнения") Тогда
		ЗаполнитьФормуПоШаблону(ВыбранноеЗначение);
		УправлениеШаблонамиЗаполненияКлиентУХ.ПослеЗаполненияПоШаблону(ЭтаФорма, ВыбранноеЗначение);
		ЗаголовокПредупреждения = НСтр("ru = 'Заполнение'");
		ТекстПредупреждения = НСтр("ru = 'Текущий объект заполнен по шаблону %ШаблонЗаполнения%'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ШаблонЗаполнения%", Строка(ВыбранноеЗначение));
		ПоказатьОповещениеПользователя(ЗаголовокПредупреждения, , ТекстПредупреждения, БиблиотекаКартинок.Успешно32);
	Иначе
	// Не выбран шаблон. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область УниверсальныеПроцессыСогласование

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиенте
Процедура ОрганизацияДляЗаключенияДоговораПриИзменении(Элемент)
	ОбновитьФлагиОрганизации(ЭтаФорма);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПодборПотребностей(Команда)
	СтруктураДанныхПериода = ПолучитьДанныеПериода(Объект.ПериодЗакупок);
	ПериодНачала	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхПериода, "ПериодНачала", Объект.ПериодЗакупок);
	ПериодОкончания	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхПериода, "ПериодОкончания", Объект.ПериодЗакупок);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Инновационный",						Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	ПараметрыФормы.Вставить("ПериодНачала",							ПериодНачала);
	ПараметрыФормы.Вставить("ПериодОкончания",						ПериодОкончания);
	ПараметрыФормы.Вставить("ОрганизацияДляЗаключенияДоговора",		Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыФормы.Вставить("МестоПоставки",						Объект.МестоПоставки);
	ПараметрыФормы.Вставить("ФиксироватьМестоПоставки",				Объект.ЕдиноеМестоПоставки);
	СтрокаФормы = "Обработка.ПодборПотребностейИзПлана.Форма";
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(СтрокаФормы, ПараметрыФормы, Элементы.ПотребностиВНоменклатуреПоПериодам, , , ,	, РежимОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если РазрешенВводНоменклатуры(ЭтаФорма) Тогда
		ОбработкаВыбораПотребностей(ВыбранноеЗначение, Элемент);
	Иначе
		// Разрешаем вводить номенклатуру.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТоварнуюКатегорию(Команда)
	МассивНоменклатура = Новый Массив;
	Для Каждого ТекПотребностиВНоменклатуреПоПериодам Из ПотребностиВНоменклатуреПоПериодам Цикл
		МассивНоменклатура.Добавить(ТекПотребностиВНоменклатуреПоПериодам.Номенклатура);
	КонецЦикла;
	МассивНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНоменклатура);
	МассивНоменклатура = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивНоменклатура);
	НоваяТоварнаяКатегория = ЦентрализованныеЗакупкиВызовСервераУХ.ВернутьТоварнуюКатегорию(МассивНоменклатура);
	Объект.ТоварнаяКатегория = НоваяТоварнаяКатегория;
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекПользователь = ПользователиКлиент.ТекущийПользователь();
	МассивКатегорий = ПолучитьМассивКатегорий(ТекПользователь, Объект.ОрганизацияДляЗаключенияДоговора);
	Если МассивКатегорий.Количество() > 0 Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивКатегорий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТоварнойКатегории_Завершение", ЭтаФорма);
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных товарных категорий по оргазации ""%Организация%"" для текущего пользователя. Уточните матрицу категорийных менеджеров.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Объект.ОрганизацияДляЗаключенияДоговора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидЗакупкиПриИзменении(Элемент)
	ЗаполнитьРаспределениеЗонтичныхЗакупок();
КонецПроцедуры

&НаСервере
Функция ВозможностьЗонтичнойЗакупки()
	Если ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ЗакупочнаяПроцедура,"МинимальноеКоличествоЗаявок") > 1 
		  И МаксимальноеЗначениеКоличестваПобедителей()>=2 Тогда
		  Возврат Истина;
	  Иначе 
		  Возврат Ложь;
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура НастроитьКроссТаблицуЗонтичнойЗакупки()
		ИменаКлючевыхПолей = ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейКроссТаблицыПотребностей();
		
		КонтенкстКроссТаблицы = ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
		"ПериодыЗакупок", "ПотребностиВНоменклатуреПоПериодам",	
		"НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставки", ИменаКлючевыхПолей);
		
		ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
		ЭтаФорма, "ПараметрыКроссТаблицыПотребностей", КонтенкстКроссТаблицы);
		
		
		Для Каждого Элемент Из Элементы.НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставкиГруппаРеквизитов.ПодчиненныеЭлементы Цикл
			Элементы[Элемент.Имя].Группировка = ГруппировкаКолонок.Горизонтальная;	
		КонецЦикла;	
		
		КонтенкстКроссТаблицы = ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
		"ПериодыЗакупок", "РаспределениеНоменклатураПриЗонтичнойЗакупке",	
		"РаспределениеНоменклатураПриЗонтичнойЗакупке", ИменаКлючевыхПолей);
		Структура = Новый Структура();
		Структура.Вставить("Заголовок","Распределение (%)");
		Структура.Вставить("ПрефиксРеквизитаКолонки","Процент_");
		Структура.Вставить("СоздаватьЭлемент",Истина);
		КЧ = Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный);
		ОписаниеЧисла = Новый ОписаниеТипов("Число", КЧ);		
		Структура.Вставить("ТипЭлемента",ОписаниеЧисла);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПриИзменении","ОбработчикПриИзмененииПроцента");

		Структура.Вставить("СтруктураДействий",СтруктураДействий);
		
		КонтенкстКроссТаблицы.ПараметрыВывода.Поля.Добавить(Структура);
		
		ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
		ЭтаФорма, "ПараметрыКроссТаблицыПотребностей", КонтенкстКроссТаблицы);
		
		Для Каждого Элемент Из Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеГруппаРеквизитов.ПодчиненныеЭлементы Цикл
			Элементы[Элемент.Имя].Группировка = ГруппировкаКолонок.Горизонтальная;	
		КонецЦикла;	
		
		Элементы.КоличествоПобедителейЗонтичнойЗакупки.Видимость = Истина;
		Элементы.КоличествоПобедителейЗонтичнойЗакупки.Доступность = Истина;
		Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Видимость = Истина;
		Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Доступность = Истина;
		
		Элементы.НастройкаЗакупки.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриИзмененииПроцента(Элемент)
	ТекущаяСтрока = Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупке.ТекущиеДанные;
	ИсходныеДанные = Элементы.НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставки.ТекущиеДанные;
	ИмяКолонки = Сред(Элемент.Имя,СтрНайти(Элемент.Имя,"Процент"));
	Процент = ТекущаяСтрока[ИмяКолонки];
	
	Для Каждого Период ИЗ ЭтаФорма.ПериодыЗакупок Цикл
		Если ТекущаяСтрока["Процент_"+Период.ИмяКолонки] > 0 Тогда
			ТекущаяСтрока["Процент_"+Период.ИмяКолонки] = Процент;
			ТекущаяСтрока["Сумма_"+Период.ИмяКолонки] = ИсходныеДанные["Сумма_"+Период.ИмяКолонки]*0.01*Процент;
			ОписаниеКолонки = ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьОписаниеКолонкиКроссТаблицы("Сумма_"+Период.ИмяКолонки);
		КонецЕсли;	 
	КонецЦикла;	
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьСуммуСтрокиКолонкиОтЦеныИКоличества(
	ТекущаяСтрока,
	ОписаниеКолонки.УИДПериода,
	Объект.ЦенаВключаетНДС);
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПриИзмененииКоличестваСуммыСтроки(
	Объект.ЦенаВключаетНДС,
	ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИмяТаблицыПериодов], 
	ТекущаяСтрока);					
	УстановитьОформлениеПодвала();	
	
КонецПроцедуры

&НаСервере
Функция ВидЗакупкиОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Если ВыбранноеЗначение = Перечисления.ВидЛотовойЗакупки.Зонтичная И ВозможностьЗонтичнойЗакупки() Тогда
		НастроитьКроссТаблицуЗонтичнойЗакупки();
		Объект.КоличествоПобедителейЗонтичнойЗакупки = 2;
	ИначеЕсли ВыбранноеЗначение = Перечисления.ВидЛотовойЗакупки.Зонтичная И НЕ ВозможностьЗонтичнойЗакупки() Тогда
	Возврат Ложь;
	Иначе
		Элементы.НастройкаЗакупки.Видимость = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупки.Доступность = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупки.Видимость = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Доступность = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Видимость = Ложь;
	КонецЕсли;	
	Возврат Истина;	
КонецФункции

&НаКлиенте
Процедура ВидЗакупкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КорректноеЗначение = ВидЗакупкиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Если НЕ КорректноеЗначение Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Данный вид закупки не доступен для этого лота. Значение отменено.'");
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Объект.ВидЗакупки";
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПравилаРаспределенияЗонтичнойЗакупкиПриИзмененииНаСервере()
	Если Объект.ВидЗакупки = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда
		РаспределениеПоНоменклатура = Объект.Номенклатура.Выгрузить().Скопировать();
		РаспределениеПоНоменклатура.Свернуть("ЕдиницаИзмерения,Номенклатура,Цена,Коэффициент,Менеджер,СтавкаНДС,Характеристика,Организация,Проект,Приоритет","Количество,Сумма");
		УсловияРаспределения.Загрузить(РаспределениеПоНоменклатура);
	Иначе
		Элементы.НастройкаЗакупки.Видимость = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупки.Доступность = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Доступность = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупки.Видимость = Ложь;
		Элементы.КоличествоПобедителейЗонтичнойЗакупкиОсновнаяФорма.Видимость = Ложь;
		Элементы.УсловияРаспределения.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруКоличестваРаспределения()
	Колонки = ПотребностиВНоменклатуреПоПериодам.Выгрузить().Колонки;
	Структура = Новый Структура;
	Для Каждого Значения из Колонки Цикл
		Если СтрНайти(Значения.Имя,"Количество_") > 0 Тогда
			Структура.Вставить(Значения.Имя);
		КонецЕсли;	
	КонецЦикла;	
	Возврат Структура;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСуммаРаспределения()
	Колонки = ПотребностиВНоменклатуреПоПериодам.Выгрузить().Колонки;
	Структура = Новый Структура;
	Для Каждого Значения из Колонки Цикл
		Если СтрНайти(Значения.Имя,"Сумма_") > 0 Тогда
			Структура.Вставить(Значения.Имя);
		КонецЕсли;	
	КонецЦикла;	
	Возврат Структура;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПроцентРаспределения()
	Колонки = РаспределениеНоменклатураПриЗонтичнойЗакупке.Выгрузить().Колонки;
	Структура = Новый Структура;
	Для Каждого Значения из Колонки Цикл
		Если СтрНайти(Значения.Имя,"Процент_") > 0 Тогда
			Структура.Вставить(Значения.Имя);
		КонецЕсли;	
	КонецЦикла;	
	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПервоначальноСтрокуОбщегоРаспределения(СтруктураКоличестваОбщее, СтрокаТЧ)
	Для Каждого Строка Из СтруктураКоличестваОбщее Цикл
			СтруктураКоличестваОбщее[Строка.Ключ] = СтрокаТЧ[Строка.Ключ];
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервоначальноСтрокуРаспределения(Структура, СтруктураКоличестваОбщее)
	Для Каждого Строка Из Структура Цикл
			Структура[Строка.Ключ] = СтруктураКоличестваОбщее[Строка.Ключ];
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбщееКоличество(СтруктураКоличествоОбщее,СтруктураКоличества)
	Для Каждого Строка Из СтруктураКоличествоОбщее Цикл
			СтруктураКоличествоОбщее[Строка.Ключ] = СтруктураКоличествоОбщее[Строка.Ключ] - СтруктураКоличества[Строка.Ключ];
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоСтруктуры(Структура, КоличествоПобедителей)
	Для Каждого Строка Из Структура Цикл
		Если Строка.Значение <> 0 Тогда
			Структура[Строка.Ключ] = Структура[Строка.Ключ]/КоличествоПобедителей;
			Структура[Строка.Ключ] = ?(Цел(Структура[Строка.Ключ]) <> Структура[Строка.Ключ], Цел(Структура[Строка.Ключ])+1, Структура[Строка.Ключ]);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбщийПроцент(СтруктураПроцентОбщий, СтруктураПроцент)
	Для Каждого Строка Из СтруктураПроцентОбщий Цикл
		Если СтруктураПроцентОбщий[Строка.Ключ] <> Неопределено Тогда
			СтруктураПроцентОбщий[Строка.Ключ] = СтруктураПроцентОбщий[Строка.Ключ] - СтруктураПроцент[Строка.Ключ];
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуКоличестваПоСтруктуре(ДобСтр,СтруктураКоличества, ЭтоНоменклатура)
	Для Каждого Строка Из СтруктураКоличества Цикл
			ДобСтр[Строка.Ключ] = СтруктураКоличества[Строка.Ключ];
			Если ЭтоНоменклатура Тогда
				ОписаниеКолонки = ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьОписаниеКолонкиКроссТаблицы(Строка.Ключ);
			Иначе
				КолонкаСумма = СтрЗаменить(Строка.Ключ,"Процент","Сумма");
				ДобСтр[КолонкаСумма] = ДобСтр[КолонкаСумма] * 0.01 * ДобСтр[Строка.Ключ]; 
				ОписаниеКолонки = ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьОписаниеКолонкиКроссТаблицы(КолонкаСумма);
			КонецЕсли;	
			ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьСуммуСтрокиКолонкиОтЦеныИКоличества(
			ДобСтр,
			ОписаниеКолонки.УИДПериода,
			Объект.ЦенаВключаетНДС);
			ЦентрализованныеЗакупкиКлиентСерверУХ.ПриИзмененииКоличестваСуммыСтроки(
			Объект.ЦенаВключаетНДС,
			ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИмяТаблицыПериодов], 
			ДобСтр);					
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтогСтрокиРаспределения(ДобСтр,СтруктураКоличества,СтруктураСумма)
	Количество = 0;
	Сумма = 0;
	Для Каждого Строка Из СтруктураКоличества Цикл
		Количество = ДобСтр[Строка.Ключ] + Количество;
	КонецЦикла;
	Для Каждого Строка Из СтруктураСумма Цикл
		Сумма = ДобСтр[Строка.Ключ] + Сумма;
	КонецЦикла;
	ДобСтр.Количество = Количество;	
	ДобСтр.Сумма = Сумма;
КонецПроцедуры

&НаСервере
Функция ЗонтичнаяЗакупка()
	Возврат Объект.ВидЗакупки = Перечисления.ВидЛотовойЗакупки.Зонтичная;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьРаспределениеЗонтичныхЗакупок() 
	Если Не ЗонтичнаяЗакупка() Тогда
		Возврат;
	КонецЕсли;	
	Объект.УсловияРаспределенияЗонтичнойЗакупки.Очистить();
	РаспределениеНоменклатураПриЗонтичнойЗакупке.Очистить();
	КолСтрок = 0;
	Для Каждого СтрокаТЧ Из ПотребностиВНоменклатуреПоПериодам  Цикл
		КоличествоНоменклатуры = 0; 
		Количество = 0;
		КоличествоПобедителей = Объект.КоличествоПобедителейЗонтичнойЗакупки;
		КолСтрок=0;
		СуммаКатегории = 0;
		Сумма = 0;
		СтруктураКоличества = ПолучитьСтруктуруКоличестваРаспределения();
		СтруктураКоличестваОбщее = ПолучитьСтруктуруКоличестваРаспределения();
		
		СтруктураСумма = ПолучитьСтруктуруСуммаРаспределения();
		СтруктураСуммаОбщее = ПолучитьСтруктуруСуммаРаспределения();
		
		СтруктураПроцент = ПолучитьСтруктуруПроцентРаспределения();
		СтруктураПроцентОбщее = ПолучитьСтруктуруПроцентРаспределения();
		
		ЗаполнитьПервоначальноСтрокуОбщегоРаспределения(СтруктураКоличестваОбщее, СтрокаТЧ);
		ЗаполнитьПервоначальноСтрокуОбщегоРаспределения(СтруктураСуммаОбщее, СтрокаТЧ);
		Если Не ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда				
			Для Каждого Период ИЗ ЭтаФорма.ПериодыЗакупок Цикл
				Если СтрокаТЧ["Сумма_"+Период.ИмяКолонки] > 0 Тогда
					СтруктураПроцентОбщее["Процент_"+Период.ИмяКолонки] = 100;
				Иначе
					СтруктураПроцентОбщее["Процент_"+Период.ИмяКолонки] = 0;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;
		Пока КолСтрок < Объект.КоличествоПобедителейЗонтичнойЗакупки Цикл
			Если ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда				
				ЗаполнитьПервоначальноСтрокуРаспределения(СтруктураКоличества, СтруктураКоличестваОбщее);
				ДобСтр = РаспределениеНоменклатураПриЗонтичнойЗакупке.Добавить();
				ДобСтр.МестоПобедителя = КолСтрок + 1;
				ИзменитьКоличествоСтруктуры(СтруктураКоличества, КоличествоПобедителей);
				ЗаполнитьЗначенияСвойств(ДобСтр,СтрокаТЧ);
				ЗаполнитьСтрокуКоличестваПоСтруктуре(ДобСтр,СтруктураКоличества,Истина);
				ИзменитьОбщееКоличество(СтруктураКоличестваОбщее,СтруктураКоличества);
				ЗаполнитьИтогСтрокиРаспределения(ДобСтр,СтруктураКоличества,СтруктураСумма);
			Иначе
				ЗаполнитьПервоначальноСтрокуРаспределения(СтруктураПроцент, СтруктураПроцентОбщее);
				ДобСтр = РаспределениеНоменклатураПриЗонтичнойЗакупке.Добавить();
				ДобСтр.МестоПобедителя = КолСтрок + 1;
				ЗаполнитьЗначенияСвойств(ДобСтр,СтрокаТЧ);
				ИзменитьКоличествоСтруктуры(СтруктураПроцент, КоличествоПобедителей);
				ИзменитьОбщийПроцент(СтруктураПроцентОбщее,СтруктураПроцент);
				ЗаполнитьСтрокуКоличестваПоСтруктуре(ДобСтр,СтруктураПроцент, Ложь);
			КонецЕсли;
			КолСтрок = КолСтрок+1;
			КоличествоПобедителей = КоличествоПобедителей - 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	
	
&НаСервере
Функция   МаксимальноеЗначениеКоличестваПобедителей()
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура",ПотребностиВНоменклатуреПоПериодам.Выгрузить());
	Запрос.Текст="ВЫБРАТЬ
	             |	ТЧНоменклатура.Количество КАК Количество,
	             |	ТЧНоменклатура.Номенклатура КАК Номенклатура,
	             |	ТЧНоменклатура.Сумма КАК Сумма
	             |ПОМЕСТИТЬ ВТ
	             |ИЗ
	             |	&Номенклатура КАК ТЧНоменклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МИНИМУМ(ВТ.Количество) КАК Количество
	             |ИЗ
	             |	ВТ КАК ВТ
	             |ГДЕ
	             |	ТИПЗНАЧЕНИЯ(ВТ.Номенклатура) = ТИП(Справочник.Номенклатура)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МИНИМУМ(ВТ.Сумма) КАК Сумма
	             |ИЗ
	             |	ВТ КАК ВТ
	             |ГДЕ
	             |	НЕ ТИПЗНАЧЕНИЯ(ВТ.Номенклатура) = ТИП(Справочник.Номенклатура)";
	КоличествоПоНоменклатуре = -1;
	СуммаПоНоменклатуре = -1;
	Результат = Запрос.ВыполнитьПакет(); 
	Если Результат[1].Пустой() = Ложь Тогда
		КоличествоПоНоменклатуре =  ?(Результат[1].Выгрузить()[0].Количество = NULL,-1,Результат[1].Выгрузить()[0].Количество);
	КонецЕсли;
	Если Результат[2].Пустой() = Ложь Тогда
		СуммаПоНоменклатуре =  ?(Результат[2].Выгрузить()[0].Сумма = NULL,-1,Результат[2].Выгрузить()[0].Сумма);
	КонецЕсли;
	Если КоличествоПоНоменклатуре = -1 Тогда КоличествоПоНоменклатуре = СуммаПоНоменклатуре; КонецЕсли;
	Если СуммаПоНоменклатуре = -1 Тогда СуммаПоНоменклатуре = КоличествоПоНоменклатуре; КонецЕсли;
	Возврат Мин(КоличествоПоНоменклатуре, СуммаПоНоменклатуре);	

КонецФункции

&НаКлиенте
Процедура КоличествоПобедителейЗонтичнойЗакупкиПриИзмененииНаСервере()
	ЗаполнитьРаспределениеЗонтичныхЗакупок();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПобедителейЗонтичнойЗакупкиПриИзменении(Элемент)
	КоличествоПобедителейЗонтичнойЗакупкиПриИзмененииНаСервере();
	ПравилаРаспределенияЗонтичнойЗакупкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставкиПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Отбор=Новый Структура();
		Отбор.Вставить("ЕдиницаИзмерения",ТекущиеДанные.ЕдиницаИзмерения);
		Отбор.Вставить("Менеджер",ТекущиеДанные.Менеджер);
		Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
		Отбор.Вставить("Организация",ТекущиеДанные.Организация);
		Отбор.Вставить("Приоритет",ТекущиеДанные.Приоритет);
		Отбор.Вставить("СтавкаНДС",ТекущиеДанные.СтавкаНДС);
		Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
		Отбор.Вставить("Цена",ТекущиеДанные.Цена);
		Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупке.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		РассчитатьИтогПодвалаРаспределения(Отбор);
		Для Каждого Период Из ЭтаФорма.ПериодыЗакупок Цикл
			Если ТекущиеДанные.ЭтоКатегорияНоменклатуры Тогда
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].Видимость = Истина;	
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].Видимость = Ложь;
				Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество.Видимость = Ложь;
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].Доступность = ТекущиеДанные["Сумма_"+Период.ИмяКолонки] > 0; 
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].ЦветТекста = WebЦвета.ЗеленыйЛес;
			Иначе
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].Видимость = Ложь;	
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].Видимость = Истина;	
				Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество.Видимость = Истина;
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].Доступность = ТекущиеДанные["Количество_"+Период.ИмяКолонки] > 0; 
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].ЦветТекста = WebЦвета.ЗеленыйЛес;
			КонецЕсли;	
		КонецЦикла	
	КонецЕсли;
	УстановитьОформлениеПодвала(); 
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОформлениеПодвала()
	ТекущиеДанные=Элементы.НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	Отбор=Новый Структура();
	Отбор.Вставить("ЕдиницаИзмерения",ТекущиеДанные.ЕдиницаИзмерения);
	Отбор.Вставить("Менеджер",ТекущиеДанные.Менеджер);
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Организация",ТекущиеДанные.Организация);
	Отбор.Вставить("Приоритет",ТекущиеДанные.Приоритет);
	Отбор.Вставить("СтавкаНДС",ТекущиеДанные.СтавкаНДС);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("Цена",ТекущиеДанные.Цена);
	СтрокиРаспределения = РаспределениеНоменклатураПриЗонтичнойЗакупке.НайтиСтроки(Отбор);
	Для Каждого Период Из ЭтаФорма.ПериодыЗакупок Цикл
		Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].ЦветТекстаПодвала = WebЦвета.Черный;
		Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].ЦветТекстаПодвала = WebЦвета.Черный;
	КонецЦикла;	
	Для Каждого Период Из ЭтаФорма.ПериодыЗакупок Цикл
		Количество = 0;
		Процент = 0; 
		Для Каждого Стр ИЗ СтрокиРаспределения Цикл
			Количество = Количество + Стр["Количество_"+Период.ИмяКолонки];
			Процент = Процент + Стр["Процент_"+Период.ИмяКолонки];
		КонецЦикла;	
		Если (Процент <> 100 И Количество = 0)
			ИЛИ Количество <> Элементы.НоменклатураДляРаспределенияНоменклатурыЗонтичнойПоставки.ТекущиеДанные["Количество_"+Период.ИмяКолонки]
			Тогда
			Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].ЦветТекстаПодвала = WebЦвета.Красный;
			Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].ЦветТекстаПодвала = WebЦвета.Красный;
		Иначе	
			Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеПроцент_"+Период.ИмяКолонки].ЦветТекстаПодвала = WebЦвета.Черный;
			Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеКоличество_"+Период.ИмяКолонки].ЦветТекстаПодвала = WebЦвета.Черный;
		КонецЕсли;
	КонецЦикла;
	Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупке.Обновить();
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогПодвалаРаспределения(Отбор)
		Строки = ПолучитьСтрокуКоличестваИтоги();
		ИтогДляРаспределения = РаспределениеНоменклатураПриЗонтичнойЗакупке.Выгрузить(,"ЕдиницаИзмерения,Номенклатура,Цена,Коэффициент,Менеджер,СтавкаНДС,Характеристика,Организация,Проект,Приоритет,Количество,Сумма,"+Сред(Строки,2));
		ИтогДляРаспределения = ИтогДляРаспределения.Скопировать(Отбор);
		ИтогДляРаспределения.Свернуть("ЕдиницаИзмерения,Номенклатура,Цена,Коэффициент,Менеджер,СтавкаНДС,Характеристика,Организация,Проект,Приоритет","Количество,Сумма,"+Сред(Строки,2));
		Итог = ИтогДляРаспределения[0];
		Потребности = ПотребностиВНоменклатуреПоПериодам.Выгрузить().Скопировать(Отбор)[0];
		Для Каждого Колонка Из ИтогДляРаспределения.Колонки Цикл
			Если СтрНайти(Колонка.Имя, "Сумма") Или СтрНайти(Колонка.Имя,"Процент") Тогда
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупке"+Колонка.Имя].ТекстПодвала = ?(Итог[Колонка.Имя] = 0,"",Итог[Колонка.Имя]);
			ИначеЕсли СтрНайти(Колонка.Имя,"Количество_") Тогда
				Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупке"+Колонка.Имя].ТекстПодвала =  Потребности[Колонка.Имя]
				- Итог[Колонка.Имя];
			КонецЕсли;	
		КонецЦикла;	
		Для Каждого Строка ИЗ РаспределениеНоменклатураПриЗонтичнойЗакупке Цикл
			Количество = 0;
			Для Каждого Колонка Из ИтогДляРаспределения.Колонки Цикл
				Если СтрНайти(Колонка.Имя, "Количество_") Тогда
					Количество = Количество + Строка[Колонка.Имя];		
				КонецЕсли;
			КонецЦикла;
			Строка.Количество = Количество;
		КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуКоличестваИтоги()
	Реквизиты = ЭтаФорма.ПолучитьРеквизиты("РаспределениеНоменклатураПриЗонтичнойЗакупке");
	Строки = "";
	Для Каждого Колонка ИЗ Реквизиты Цикл
		Если СтрНайти(Колонка.Имя, "Количество_") > 0 ИЛИ СтрНайти(Колонка.Имя,"Сумма_") > 0 ИЛИ СтрНайти(Колонка.Имя,"Процент_") > 0 Тогда
			Строки = Строки +","+ Колонка.Имя;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Строки;
КонецФункции	

&НаКлиенте
Процедура РаспределениеНоменклатураПриЗонтичнойЗакупкеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупке.ТекущиеДанные;
	Отбор=Новый Структура();
	Отбор.Вставить("ЕдиницаИзмерения",ТекущиеДанные.ЕдиницаИзмерения);
	Отбор.Вставить("Менеджер",ТекущиеДанные.Менеджер);
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Организация",ТекущиеДанные.Организация);
	Отбор.Вставить("Приоритет",ТекущиеДанные.Приоритет);
	Отбор.Вставить("СтавкаНДС",ТекущиеДанные.СтавкаНДС);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("Цена",ТекущиеДанные.Цена);
	РассчитатьИтогПодвалаРаспределения(Отбор);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСуммыЗонтичнойЗакупки()
	Для Каждого Период Из ЭтаФорма.ПериодыЗакупок Цикл
			Элементы["РаспределениеНоменклатураПриЗонтичнойЗакупкеСумма_"+Период.ИмяКолонки].Видимость = Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеВидимостьСуммыЗонтичнойЗакупки.Пометка;	
			Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеСумма.Видимость = Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеВидимостьСуммыЗонтичнойЗакупки.Пометка;
	КонецЦикла	
КонецПроцедуры	

&НаКлиенте
Процедура ВидимостьСуммыЗонтичнойЗакупки(Команда) 
	Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеВидимостьСуммыЗонтичнойЗакупки.Пометка = НЕ Элементы.РаспределениеНоменклатураПриЗонтичнойЗакупкеВидимостьСуммыЗонтичнойЗакупки.Пометка;
	УстановитьВидимостьСуммыЗонтичнойЗакупки();
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения(
				"ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Заполнить поле ""Условия оплаты текстовое описание"" по данным соглашения поставщика?'"),
			РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьОтборСоглашения();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСоглашения()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация",Объект.ОрганизацияДляЗаключенияДоговора));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер",Справочники.Партнеры.НеизвестныйПартнер));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валюта",объект.ВалютаДокумента));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС",Объект.ЦенаВключаетНДС));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ИспользуютсяДоговорыКонтрагентов",Истина));	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КонтролироватьЦеныЗакупки",Объект.ЗапретПревышенияНМЦ));
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.РегистрироватьЦеныПоставщика",Истина));
	КонецЕсли;
	
	Элементы.Соглашение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеСоздание(Элемент, СтандартнаяОбработка)
	УстановитьОтборСоглашения();
КонецПроцедуры

&НаСервере
Процедура СоздатьСоглашениеПоЗакупочнойПроцедуреНаСервере()
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗакупочнаяПроцедура,"Соглашение")) Тогда 
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Не заполнено условие договора в закупочной процедуре'");
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СоглашениеИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗакупочнаяПроцедура,"Соглашение");
	
	Попытка
		НовоеСоглашение = СоглашениеИсточник.Скопировать();
		НовоеСоглашение.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		НовоеСоглашение.КонтролироватьЦеныЗакупки = Объект.ЗапретПревышенияНМЦ;
		НовоеСоглашение.РегистрироватьЦеныПоставщика = Истина;
		НовоеСоглашение.Наименование = "Условие оплаты по Лоту " + СокрЛП(Объект.Наименование);
		Новоесоглашение.Записать();
		Объект.УсловияОплаты = НадписьЭтапыОплатаДляСоглашений(НовоеСоглашение);
		Объект.Соглашение = НовоеСоглашение.Ссылка;
		Элементы.СоздатьСоглашениеПоЗакупочнойПроцедуре.Видимость = Ложь;
		Модифицированность = Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Ошибка = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Невозможно создать новое соглашение по лоту по причине ""%Ошибка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ошибка%", Строка(Ошибка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоглашениеПоЗакупочнойПроцедуре(Команда)
	СоздатьСоглашениеПоЗакупочнойПроцедуреНаСервере();		
КонецПроцедуры

&НаСервере
Процедура ЗапретПревышенияНМЦПриИзмененииНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Соглашение = Объект.Соглашение.ПолучитьОбъект();
		Соглашение.КонтролироватьЦеныЗакупки = Объект.ЗапретПревышенияНМЦ;
		Соглашение.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Ошибка = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Ошибка изменения условия для договора ""%Ошибка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ошибка%", Строка(Ошибка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
	КонецПопытки;		
КонецПроцедуры

&НаКлиенте
Процедура ЗапретПревышенияНМЦПриИзменении(Элемент)
	ЗапретПревышенияНМЦПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Соглашение = Объект.Соглашение.ПолучитьОбъект();
		Соглашение.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		Соглашение.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Ошибка = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Ошибка изменения условия для договора ""%Ошибка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ошибка%", Строка(Ошибка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииНаСервере();
КонецПроцедуры
