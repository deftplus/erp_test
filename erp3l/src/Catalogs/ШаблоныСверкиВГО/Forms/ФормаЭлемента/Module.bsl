#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЭтаФорма.ТолькоПросмотр = НЕ Справочники.ШаблоныСверкиВГО.МожноРедактироватьОбъект(ТекущийОбъект);
	Элементы.НастройкиСверкиВГО.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	ЗаполнитьДопРеквизитыТехническихСчетовНаСервере();
	УстановитьСпособЗаполненияСубконтоПустыхСчетовНаСервере();
	УстановитьОтборыНастроекСверки();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// скопируем групы аналитик ВГО подчиненные исходному шаблону
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыАналитикСверкиВГО.Ссылка
			|ИЗ
			|	Справочник.ГруппыАналитикСверкиВГО КАК ГруппыАналитикСверкиВГО
			|ГДЕ
			|	НЕ ГруппыАналитикСверкиВГО.ПометкаУдаления
			|	И ГруппыАналитикСверкиВГО.Владелец = &ВладелецИсходный";

		Запрос.УстановитьПараметр("ВладелецИсходный", ЗначениеКопирования);
		Результат = Запрос.Выполнить();
		
		ВыборкаГруппАналитик = Результат.Выбрать();
		Пока ВыборкаГруппАналитик.Следующий() Цикл
			ДобОбъект =  ВыборкаГруппАналитик.Ссылка.Скопировать();
			ДобОбъект.Владелец = ТекущийОбъект.Ссылка;
			ДобОбъект.Записать();
		КонецЦикла;
		
		ЗначениеКопирования = Неопределено;
		
		ПолеКомпоновкиВладелец = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора = Неопределено;
		Для Каждого ЭлементОтбора_ ИЗ НастройкиСверкиВГО.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора_) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора_.ЛевоеЗначение = ПолеКомпоновкиВладелец
				И ЭлементОтбора_.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЭлементОтбора_.Использование
				И ЭлементОтбора_.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
				ЭлементОтбора = ЭлементОтбора_;
				Прервать;
			КонецЕсли;
		КонецЦИкла;
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = НастройкиСверкиВГО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиВладелец;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
		ЭлементОтбора.ПравоеЗначение = ТекущийОбъект.Ссылка;
		Элементы.НастройкиСверкиВГО.Доступность = Истина;
		Элементы.НастройкиСверкиВГО.Обновить();	
	КонецЕсли;
	
	УстановитьОтборыНастроекСверки();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьОтборыНастроекСверки();
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура НастройкиРазделовСверкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ШаблонСверкиВГО = Объект.Ссылка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьСебестоимостьПоВидуВыручкиПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура БезТрансляцииПриИзменении(Элемент)
	Элементы.ГруппаЭлементыНастройкиТрансляции.Видимость = НЕ Объект.БезТрансляции;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	Элементы.НормыПрибылиДляВидовАналитик.Видимость 		= Объект.ОпределятьСебестоимостьПоВидуВыручки;
	Элементы.ГруппаЭлементыНастройкиТрансляции.Видимость	= НЕ Объект.БезТрансляции;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыНаСервере

&НаСервере
Процедура УстановитьОтборыНастроекСверки()
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗначениеОтбора = Объект.Ссылка;
		флДоступность = Истина;
	Иначе
		ЗначениеОтбора = Справочники.ШаблоныСверкиВГО.ПустаяСсылка();
		флДоступность = Ложь;
	КонецЕсли;
	ЭлементОтбора = ТиповыеОтчеты_УправляемыйРежимУХ.УстановитьОтбор(НормыПрибылиДляВидовАналитик.Отбор, Новый ПолеКомпоновкиДанных("ШаблонСверки"), ВидСравненияКомпоновкиДанных.Равно, ЗначениеОтбора);
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Элементы.НастройкиСверкиВГО.Доступность = флДоступность;
	
	ЭлементОтбора = ТиповыеОтчеты_УправляемыйРежимУХ.УстановитьОтбор(НастройкиСверкиВГО.Отбор, Новый ПолеКомпоновкиДанных("Владелец"), ВидСравненияКомпоновкиДанных.Равно, ЗначениеОтбора);
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Элементы.НастройкиСверкиВГО.Доступность = флДоступность;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	// НастройкиСверкиВГО
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НастройкиСверкиВГО");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Ссылка", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	// Субконто
	Для НомерСубконто = 1 По 3 Цикл

		// Видимость СпособЗаполненияСубконто, ЗначениеЗаполненияСубконто
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТехническиеСчетаСпособЗаполненияСубконто" + НомерСубконто);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТехническиеСчетаЗначениеЗаполненияСубконто" + НомерСубконто);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.ИспользоватьСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.НеРавно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// Доступность СпособаЗаполнения
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТехническиеСчетаСпособЗаполненияСубконто" + НомерСубконто);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.ДоступностьСпособаЗаполненияСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.НеРавно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
		
		// Выделение не заполненного СпособЗаполненияСубконто
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТехническиеСчетаСпособЗаполненияСубконто" + НомерСубконто);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.ИспользоватьСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.СпособЗаполненияСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
		// Видимость ЗначениеЗаполненияСубконто
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТехническиеСчетаЗначениеЗаполненияСубконто" + НомерСубконто);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.СпособЗаполненияСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.НеРавно,
			Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '---'"));
		
		// Выделение не заполненного ЗначениеЗаполненияСубконто для способа заполнения "Фиксированное значение".
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТехническиеСчетаЗначениеЗаполненияСубконто" + НомерСубконто);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.СпособЗаполненияСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТехническиеСчета.ЗначениеЗаполненияСубконто" + НомерСубконто, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти


#Область РаботаСТаблицейСчетов

&НаСервере
Процедура ЗаполнитьДопРеквизитыТехническихСчетовНаСервере()
	Для Каждого Строка_ Из Объект.ТехническиеСчета Цикл
		ЗаполнитьДопРеквизитыСтрокиТехническихСчетовНаСервере(Строка_);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопРеквизитыСтрокиТехническихСчетовНаСервере(Строка_)
	МаксНомерИспользуемогоСубконто = 0;
	Если ЗначениеЗаполнено(Строка_.Счет) Тогда
		
		Для Каждого ВидСубконтоСчета Из Строка_.Счет.ВидыСубконто Цикл
			НомерСубконто = ВидСубконтоСчета.Номер;
			Если 1 < НомерСубконто И НомерСубконто > 3 Тогда
				Продолжить;
			КонецЕсли;
			Если МаксНомерИспользуемогоСубконто < НомерСубконто Тогда
				МаксНомерИспользуемогоСубконто = НомерСубконто;
			КонецЕсли;
			
			Строка_["ВидСубконто" + НомерСубконто] = ВидСубконтоСчета.ВидСубконтоСсылка;
			Строка_["ИспользоватьСубконто" + НомерСубконто] = Истина;
			Строка_["НаименованиеВидаСубконто" + НомерСубконто] = СокрЛП(ВидСубконтоСчета.ВидСубконто);
			
			мСпособыЗаполнения = ПолучитьСпособыЗаполненияСубконтоПоТипуЗначения(ВидСубконтоСчета.ВидСубконтоСсылка);
			Строка_["ДоступностьСпособаЗаполненияСубконто" + НомерСубконто] = (мСпособыЗаполнения.Количество() > 1);
		КонецЦикла;
	КонецЕсли;
	// Обнулим реквизиты неиспользуемых субконто
	Для НомерСубконто = МаксНомерИспользуемогоСубконто+1 По 3 Цикл
		Строка_["ВидСубконто" + НомерСубконто] = Неопределено;
		Строка_["ИспользоватьСубконто" + НомерСубконто] = Ложь;
		Строка_["СпособЗаполненияСубконто" + НомерСубконто] = Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение;
		Строка_["ЗначениеЗаполненияСубконто" + НомерСубконто] = Неопределено;
		Строка_["ДоступностьСпособаЗаполненияСубконто" + НомерСубконто] = Ложь;
		Строка_["НаименованиеВидаСубконто" + НомерСубконто] = "";
	КонецЦикла;
	
	Строка_.СтарыйСчет = Строка_.Счет;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТехническихСчетовНаСервере(ТекущаяСтрока)
	Строка_ = Объект.ТехническиеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Строка_ = Неопределено ИЛИ Строка_.Счет = Строка_.СтарыйСчет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДопРеквизитыСтрокиТехническихСчетовНаСервере(Строка_);
	
	УстановитьСпособЗаполненияСубконтоСтрокиНаСервере(Строка_);
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособЗаполненияСубконтоСтрокиНаСервере(Строка_)
	Для НомерСубконто = 1 По 3 Цикл
		УстановитьСпособЗаполненияСубконтоПоУмолчаниюНаСервере(Строка_, НомерСубконто);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособЗаполненияСубконтоПустыхСчетовНаСервере()
	Для Каждого Строка_ Из Объект.ТехническиеСчета Цикл
		Если НЕ ЗначениеЗаполнено(Строка_.Счет) Тогда
			УстановитьСпособЗаполненияСубконтоСтрокиНаСервере(Строка_);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Пытаемся подобрать по типу субконто значение реквизита "СпособЗаполненияСубконто".
// Устанавливаем тип реквизита "ЗначениеЗаполненияСубконто" по типу субконто.
&НаСервере
Процедура УстановитьСпособЗаполненияСубконтоПоУмолчаниюНаСервере(Строка_, НомерСубконто)
	ВидСубконто = Строка_["ВидСубконто" + НомерСубконто];
	Если ЗначениеЗаполнено(ВидСубконто) Тогда
		ТипЗначения = ВидСубконто.ТипЗначения;
		
		мСпособыЗаполнения = ПолучитьСпособыЗаполненияСубконтоПоТипуЗначения(ВидСубконто);
		Строка_["СпособЗаполненияСубконто" + НомерСубконто] = мСпособыЗаполнения[0];
		Если Строка_["СпособЗаполненияСубконто" + НомерСубконто] = Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение Тогда 
			Строка_["ЗначениеЗаполненияСубконто" + НомерСубконто] = ТипЗначения.ПривестиЗначение(Строка_["ЗначениеЗаполненияСубконто" + НомерСубконто]); 
		Иначе
			Строка_["ЗначениеЗаполненияСубконто" + НомерСубконто] = Неопределено;
		КонецЕсли;
		
	Иначе
		Строка_["СпособЗаполненияСубконто" + НомерСубконто] = Неопределено;
		Строка_["ЗначениеЗаполненияСубконто" + НомерСубконто] = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособыЗаполненияСубконтоПоТипуЗначения(ВидСубконто)
	мСпособыЗаполненияСубконто = Новый Массив;
	
	Если ЗначениеЗаполнено(ВидСубконто) Тогда
		ТипЗначения = ВидСубконто.ТипЗначения;
		
		Если ТипЗначения <> Неопределено Тогда
			Если ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) ИЛИ
				 ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				 
				мСпособыЗаполненияСубконто.Добавить(
					Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ОрганизацияДебитор);
				мСпособыЗаполненияСубконто.Добавить(
					Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ОрганизацияКредитор);
				
			ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.РазделыСверкиВГО")) Тогда
				мСпособыЗаполненияСубконто.Добавить(
					Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.РазделСверки);
					
			ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.Валюты")) Тогда
				мСпособыЗаполненияСубконто.Добавить(
					Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
		
		мСпособыЗаполненияСубконто.Добавить(
				Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение);
	КонецЕсли;
	
	Возврат мСпособыЗаполненияСубконто;
КонецФункции

&НаКлиенте
Процедура ТехническиеСчетаСчетПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТехническиеСчета.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСтрокуТехническихСчетовНаСервере(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТехническиеСчетаСпособЗаполненияСубконтоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТехническиеСчета.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСубконто = НомерСубконтоПоИмениРеквизита(Элемент.Имя);
	ТехническиеСчетаСпособЗаполненияСубконтоПриИзмененииНаСервере(ТекущаяСтрока, НомерСубконто);
КонецПроцедуры

&НаСервере
Процедура ТехническиеСчетаСпособЗаполненияСубконтоПриИзмененииНаСервере(ТекущаяСтрока, НомерСубконто)
	Строка_ = Объект.ТехническиеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Строка_ = Неопределено ИЛИ Строка_.Счет = Строка_.СтарыйСчет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСпособЗаполненияСубконтоПоУмолчаниюНаСервере(Строка_, НомерСубконто);
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция НомерСубконтоПоИмениРеквизита(Имя)
	Возврат Число(Прав(Имя, 1));
КонецФункции
	
&НаКлиенте
Процедура ТехническиеСчетаСпособЗаполненияСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТехническиеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСубконто = НомерСубконтоПоИмениРеквизита(Элемент.Имя);
	Если НомерСубконто < 1 ИЛИ НомерСубконто > 3 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(
		ПолучитьСпособыЗаполненияСубконтоПоТипуЗначения(
			ТекущиеДанные["ВидСубконто" + НомерСубконто]));
КонецПроцедуры
	
&НаКлиенте
Процедура ТехническиеСчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТехническиеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерСубконто = 1 По 3 Цикл
		Если ТекущиеДанные["СпособЗаполненияСубконто" + НомерСубконто] = 
				ПредопределенноеЗначение(
					"Перечисление.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение") Тогда
				
			Элементы["ТехническиеСчетаЗначениеЗаполненияСубконто" + НомерСубконто].ПодсказкаВвода
				= ТекущиеДанные["НаименованиеВидаСубконто" + НомерСубконто];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
