
&НаКлиенте
Перем ОтветНаВопрос;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.ЗначенияЗаполнения.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(Объект,Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОписаниеОбъектаТек) И (НЕ ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных)) Тогда
		
		Объект.ИмяОбъектаМетаданных=Объект.ОписаниеОбъектаТек.Наименование;
		
	КонецЕсли;
	
	Элементы.ТипОбъектаКонсолидации.Доступность=Не Объект.ТолькоВидыСубконто;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	
	Если ЗначениеЗаполнено(Параметры.РабочийОбъектАдрес) Тогда
		РабочийОбъектАдрес=Параметры.РабочийОбъектАдрес;
		РабочийОбъект=ПолучитьРабочийОбъект();
	Иначе
		РабочийОбъект=РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Если РабочийОбъект.ЭтоНовый() Тогда
		
		Если Объект.Владелец.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO
			И (Не ЗначениеЗаполнено(Объект.ОписаниеОбъектаВИБ)) Тогда
			РабочийОбъект.ТипОбъектаВИБ="ТаблицаADO";
			РабочийОбъект.ОписаниеОбъектаВИБ=Справочники.ТаблицыADO.ПустаяСсылка();
			Объект.ТипОбъектаВИБ="ТаблицаADO";
			Объект.ОписаниеОбъектаВИБ=Справочники.ТаблицыADO.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипОбъектаКонсолидации) И ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) Тогда
			
			ОпределитьТаблицуАналитики(РабочийОбъект);
			
		ИначеЕсли ЗначениеЗаполнено(РабочийОбъект.ТипОбъектаВИБ) 
			И ЗначениеЗаполнено(РабочийОбъект.ОписаниеОбъектаВИБ)
			И (НЕ РабочийОбъект.ТипОбъектаВИБ="ТаблицаADO") Тогда
			
			ПодобратьОбъектТекущейИБ(РабочийОбъект);
			
		КонецЕсли;
		
	Иначе
		
		ОпределитьТаблицуАналитики(РабочийОбъект);
		ТекВозможностьИерархии=ОпределитьВозможностьИерархии();
		
	КонецЕсли;
		
	ОписаниеТиповДокументБД					= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ДокументыБД");
	ОписаниеТиповСправочникБД				= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СправочникиБД");
	ОписаниеТиповПеречислениеБД				= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПеречисленияБД");
	ОписаниеТиповТаблицаADO					= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ТаблицыADO");
	ОписаниеТиповПланСчетовБД				= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПланыСчетовБД");
	ОписаниеТиповПланВидовХарактеристикБД	= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПланыВидовХарактеристикБД");
	
	Если Объект.ТипОбъектаВИБ="Справочник" Тогда
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповСправочникБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="Документ" Тогда
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповДокументБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="Перечисление" Тогда
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповПеречислениеБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="ТаблицаADO" Тогда
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповТаблицаADO;
	ИначеЕсли Объект.ТипОбъектаВИБ="ПланСчетов" Тогда
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповПланСчетовБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="ПланВидовХарактеристик" Тогда
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповПланВидовХарактеристикБД;
	Иначе
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=Новый ОписаниеТипов;
	КонецЕсли;
	
	СписокТиповОбъектов=Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаСоответствияРодитель) Тогда
		
		СписокТиповОбъектов.Добавить("Справочник","Справочник");
		СписокТиповОбъектов.Добавить("Перечисление","Перечисление");
		СписокТиповОбъектов.Добавить("ПланСчетов",Нстр("ru = 'План счетов'"));
		СписокТиповОбъектов.Добавить("ПланВидовХарактеристик",Нстр("ru = 'План видов характеристик'"));
		
		Для Каждого Элемент ИЗ СписокТиповОбъектов Цикл
			
			Элементы.ТипОбъектаВИБ.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
			Элементы.ТипОбъектаКонсолидации.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
			
		КонецЦикла;
		
		Элементы.ТипОбъектаКонсолидации.СписокВыбора.Добавить("ВидСубконто",Нстр("ru = 'Вид субконто'"));
		
	Иначе
		
		СписокТиповОбъектов.Добавить("РегистрСведений",Нстр("ru = 'Регистр сведений'"));
		СписокТиповОбъектов.Добавить("ТабличнаяЧасть",Нстр("ru = 'Табличная часть'"));
		
		Для Каждого Элемент ИЗ СписокТиповОбъектов Цикл
			
			Элементы.ТипОбъектаВИБ.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
			Элементы.ТипОбъектаКонсолидации.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	СписокОбъектовКонсолидации=ПолучитьСписокДляВыбораОбъектаКонсолидации(Объект.ТипОбъектаКонсолидации);
	
	Элементы.ИмяОбъектаМетаданных.СписокВыбора.Очистить();
	
	Для Каждого ТекОбъект ИЗ СписокОбъектовКонсолидации Цикл
		
		Элементы.ИмяОбъектаМетаданных.СписокВыбора.Добавить(ТекОбъект.Значение,ТекОбъект.Представление);
		
	КонецЦикла;
	
	Если Параметры.ЗначенияЗаполнения.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(РабочийОбъект,Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	Если РабочийОбъект.СинхронизацияПоGUID Тогда
		
		ЗаполнитьТаблицуНастроекСоответствия();
		СинхронизацияПоGUID=1;
		
	Иначе
			
		РабочийОбъект.мТаблицаСоответствия=РабочийОбъект.ТаблицаСоответствияВИБ.Получить();
		
		Если ТипЗнч(РабочийОбъект.мТаблицаСоответствия)=Тип("ДеревоЗначений") Тогда
			
			Если РабочийОбъект.мТаблицаСоответствия.Колонки.Найти("Ключевой")=Неопределено Тогда
				
				РабочийОбъект.мТаблицаСоответствия.Колонки.Добавить("Ключевой",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
				
			КонецЕсли;
				
			МассивКлючевых=РабочийОбъект.мТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("НеИспользоватьДляСинхронизации,Сопоставлено",Ложь,Истина),Истина);
			
			Для Каждого Строка ИЗ МассивКлючевых Цикл
				
				Строка.Ключевой=Истина;
				
			КонецЦикла;	
			
			ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.мТаблицаСоответствия,ТаблицаСоответствия);
			
		КонецЕсли;
		
		Если НЕ ЗаполнениеПоУмолчанию Тогда
			
			ВосстановитьНастройкиОперанда(РабочийОбъект);
			
			РабочийОбъект.ЗаполнитьСписокПолей();
			
			Использование77=РабочийОбъект.Использование77();
			Элементы.ГруппаПоддержкаИерархии.Видимость=ОпределитьВозможностьИерархии();
			
			СоответствиеПеречислений=РабочийОбъект.СоответствиеПеречислений();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяПлатформа1С8=ИспользуетсяПлатформа1С8(Объект.Владелец);

	УстановитьВидимость();
	
	ПоместитьРабочийОбъект(РабочийОбъект);
		
	Если Объект.ТипОбъектаВИБ = "ТаблицаADO" Тогда
		Элементы.ТипОбъектаВИБ.СписокВыбора.Очистить();
		Элементы.ТипОбъектаВИБ.СписокВыбора.Добавить("ТаблицаADO", "Таблица");
		Элементы.ТипОбъектаВИБ.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ВыбранаГруппаСправочника" Тогда
		
		Объект.КорневойКаталог=Параметр;
		
	ИначеЕсли ИмяСобытия="ИзмененаПроцедураПередЗаписьюОбъекта" Тогда
		
		Объект.ПроцедураПередЗаписью=Параметр;
		УстановитьВидимость();
		
	ИначеЕсли ИмяСобытия="ИзмененаНастройкаСоответствияТЧ" И Параметр.НастройкаСоответствияРодитель=Объект.Ссылка Тогда
		
		ОбновитьТаблицуСвязанныхНастроек(Параметр.АдресТаблицыСоответствия);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.СинхронизацияПоGUID = (СинхронизацияПоGUID = 1);
	
	Если ОтветНаВопрос = Неопределено Тогда
		
		ТекстОшибки = ПроверитьСоответствиеРазмерности();
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ПараметрыЗаписи.Вставить("ПродолжитьЗапись", ПустаяСтрока(ТекстОшибки));
			
			СтруктураПараметров = Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи);
			ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("Подключаемый_Записать", ЭтотОбъект, СтруктураПараметров);
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1
			|При обмене данными с использованием таких ключевых полей
			|в случае, когда фактическая длина значения поля источника больше максимальной длины поля приемника,
			|будут создаваться дубли элементов.
			|Продолжить запись?'"), ТекстОшибки);
			
			Отказ = Истина;			
			
			ПоказатьВопрос(ОписаниеОповещениеЗапись, ТекстОшибки, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		
		Если ЗначениеЗаполнено(Объект.ТипОбъектаВИБ) И ЗначениеЗаполнено(Объект.ОписаниеОбъектаВИБ) Тогда
			Элементы.ГруппаОписаниеОбъектаВИБ.Доступность = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипОбъектаКонсолидации) 
			И ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных)
			И (НЕ ЗаполнениеПоУмолчанию) Тогда
			
			Элементы.ГруппаПриемникТипВид.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РазвернутьСтроки();
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		ТекстПредупреждения = Нстр("ru = 'Настройка соответствия была изменена. Все изменения будут потеряны.'") ;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ОтветНаВопрос = Неопределено Тогда
			
			Отказ = Истина;
			
			ДопПараметры = Новый Структура("ЗакрытьФорму", Истина);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_Записать", ЭтотОбъект, ДопПараметры);
			ТекстВопроса = Нстр("ru = 'Настройка соответствия была изменена. Записать?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПолучитьРабочийОбъект(ТекущийОбъект);
	
	Если СинхронизацияПоGUID=0 Тогда
	
		ТекущийОбъект.мТабличноеПолеИзмеренийБД=РеквизитФормыВЗначение("ТабличноеПолеИзмеренийБД");
		ТекущийОбъект.мТаблицаСоответствия=РеквизитФормыВЗначение("ТаблицаСоответствия");
		ТекущийОбъект.СинхронизацияПоGUID=Ложь;
		
		ТекущийОбъект.СохранитьНастройкиОперанда();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.СинхронизацияПоGUID Тогда
		СохранитьНастройкиСинхронизацииПоGUID();
	Иначе	
		ТекущийОбъект.мМодифицированность=Ложь;
		ПоместитьРабочийОбъект(ТекущийОбъект);	
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ПриИзмененииОписанияОбъектаВИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьДляСинхронизации(Команда)
	
	Для Каждого Строка ИЗ Элементы.ТаблицаСоответствия.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока=ТаблицаСоответствия.НайтиПоИдентификатору(Строка);	
		ТекущаяСтрока.НеИспользоватьДляСинхронизации=Истина;
		ТекущаяСтрока.Ключевой=Ложь;
		  
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПередЗаписью(Команда)
	
	ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.Форма.ФормаПроцедурыПередЗаписью",
		Новый Структура("ПроцедураПередЗаписью, ТаблицаАналитики", Объект.ПроцедураПередЗаписью, ТаблицаАналитики));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуСвязанныхОбъектов(Команда)
		
	Если Не Параметры.Ключ.Пустая() И Не Модифицированность Тогда
		ОткрытьФормуСвязанных();
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ОткрытьФормуСвязанных");
	ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("Подключаемый_Записать", ЭтотОбъект, ДопПараметры);
	ТекстВопроса = НСтр("ru = 'Объект еще не записан. Записать?'");
	
	ПоказатьВопрос(ОписаниеОповещениеЗапись, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляСинхронизации(Команда)
	
	Для Каждого Строка ИЗ Элементы.ТаблицаСоответствия.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока=ТаблицаСоответствия.НайтиПоИдентификатору(Строка);
		
		Если ТекущаяСтрока.ОписаниеПримитивногоТипаПриемник="Строка(0,Переменная)" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.НеИспользоватьДляСинхронизации=Ложь;
		ТекущаяСтрока.Ключевой=Истина;
		  
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектВнешнейИБ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ОбъектВнешнейИБ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбъекта=ПолучитьДанныеОбъектаВИБ(Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ПолучитьИдентификатор());
	
	Если ТипЗнч(ДанныеОбъекта)=Тип("Структура") Тогда
		
		ОткрытьФорму("ОбщаяФорма.ОтображениеЭлементаWS_Управляемая", Новый Структура("Расшифровка, ИспользуемаяИБ", ДанныеОбъекта, Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ИспользуемаяИБ));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ЗаполнитьАвтоматическиНаСервере();
	РазвернутьСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымВИБ(Команда)
	
	Если ПроверитьВозможностьДобавленияОбъектов() Тогда
		
		ЗаполнитьПоДаннымВИБНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСоответствияКнопкаРазъединить(Команда)
	
	Для Каждого Строка ИЗ Элементы.ТаблицаСоответствия.ВыделенныеСтроки Цикл
		
		 СтрокаСоответствия=ТаблицаСоответствия.НайтиПоИдентификатору(Строка);	
		
		  ОтменитьУстановкуСоответствияВИБ(СтрокаСоответствия);
		  СтрокаСоответствия.СпособЗаполнения="";
		  
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СинхронизацияПоGUIDПриИзменении(Элемент)
	
	Если СинхронизацияПоGUID=0 Тогда
		
		ОписаниеОбъектаВИБПриИзменении(Неопределено);
		
	Иначе
		
		ЗаполнитьТаблицуНастроекСоответствия();
		
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемаяИБПриИзменении(Элемент)
	
	УстановитьОтборВИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОбъектаВИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеОписанийОбъектовВИБ(Объект.ТипОбъектаВИБ,Объект.Владелец);
	
КонецПроцедуры

&НаКлиенте
Процедура КорневойКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора",Истина);
	СтруктураПараметров.Вставить("ТаблицаАналитики",ТаблицаАналитики);
	
	Если ВидИерархииКонсолидация=ПредопределенноеЗначение("Перечисление.ВидИерархии.ИерархияГруппИЭлементов") Тогда
		СтруктураПараметров.Вставить("Отбор",Новый Структура("ЭтоГруппа",Истина));
	КонецЕсли;
	
	Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		СтруктураПараметров.Отбор.Вставить("Владелец",Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КорневойКаталог) Тогда	
		
		СтруктураПараметров.Вставить("ТекущаяСтрока",Объект.КорневойКаталог);
		
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораГруппыСправочника",СтруктураПараметров,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаМетаданныхПриИзменении(Элемент)
	
	ПриИзмененииОбъектаМетаданных();
	РазвернутьСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаКонсолидацииПриИзменении(Элемент)
	
	ПриИзмененииТипаОбъектаКонсолидации();
	РазвернутьСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОбъектаВИБПриИзменении(Элемент)
	
	ПриИзмененииОписанияОбъектаВИБ();
	РазвернутьСтроки();
		
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаВИБПриИзменении(Элемент)
	
	Если Объект.ТипОбъектаВИБ="Справочник" Тогда
		Объект.ОписаниеОбъектаВИБ=ПредопределенноеЗначение("Справочник.СправочникиБД.ПустаяСсылка");
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповСправочникБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="Документ" Тогда
		Объект.ОписаниеОбъектаВИБ=ПредопределенноеЗначение("Справочник.ДокументыБД.ПустаяСсылка");
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповДокументБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="Перечисление" Тогда
		Объект.ОписаниеОбъектаВИБ=ПредопределенноеЗначение("Справочник.ПеречисленияБД.ПустаяСсылка");
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповПеречислениеБД;
	ИначеЕсли Объект.ТипОбъектаВИБ="ТаблицаADO" Тогда
		Объект.ОписаниеОбъектаВИБ=ПредопределенноеЗначение("Справочник.ТаблицыADO.ПустаяСсылка");
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповТаблицаADO;
	ИначеЕсли Объект.ТипОбъектаВИБ="ПланСчетов" Тогда
		Объект.ОписаниеОбъектаВИБ=ПредопределенноеЗначение("Справочник.ПланыСчетовБД.ПустаяСсылка");
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповПланСчетовБД;	
	ИначеЕсли Объект.ТипОбъектаВИБ="ПланВидовХарактеристик" Тогда
		Объект.ОписаниеОбъектаВИБ=ПредопределенноеЗначение("Справочник.ПланыВидовХарактеристикБД.ПустаяСсылка");
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=ОписаниеТиповПланСчетовБД;
	Иначе
		Объект.ОписаниеОбъектаВИБ=Неопределено;
		Элементы.ОписаниеОбъектаВИБ.ДоступныеТипы=Новый ОписаниеТипов;
	КонецЕсли;
	
	Если Не (Объект.ТипОбъектаВИБ="Справочник" ИЛИ Объект.ТипОбъектаВИБ="ПланВидовХарактеристик") Тогда
		
		СинхронизацияПоGUID=0;
		
	КонецЕсли;
	
	ПриИзмененииОписанияОбъектаВИБ();
	РазвернутьСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблиц

&НаКлиенте
Процедура ТабличноеПолеИзмеренийВИБНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеПеретаскивания=Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение);
	ДанныеРодителя=ДанныеПеретаскивания.ПолучитьРодителя();
	
	Если ПустаяСтрока(ДанныеРодителя) ИЛИ ДанныеПеретаскивания.ТипЗначения.Количество()>1 
		ИЛИ ПустаяСтрока(ДанныеПеретаскивания.АналитикаБД) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	Иначе
						
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Перемещение;
		
		ПараметрыПеретаскивания.Значение=СформироватьСтруктуруСтрокиВИБ(ДанныеПеретаскивания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Элемент.ТекущиеДанные.АналитикаБД) Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка=Неопределено Тогда
		Возврат;
	КонецЕсли;
				
	Модифицированность=Истина;
	СтандартнаяОбработка=Ложь;
	
	СтрокаВИБ=ПараметрыПеретаскивания.Значение;
	
	СтрокаСоответствия=Элемент.ДанныеСтроки(Строка);
	
	ОбновитьНастройкуСоответствия(СтрокаСоответствия,СтрокаВИБ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияКлючевойПриИзменении(Элемент)
	
	Элементы.ТаблицаСоответствия.ТекущиеДанные.НеИспользоватьДляСинхронизации=НЕ Элементы.ТаблицаСоответствия.ТекущиеДанные.Ключевой;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияСпособЗаполненияПриИзменении(Элемент)
	
	 ОтменитьУстановкуСоответствияВИБ(Элементы.ТаблицаСоответствия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ=Не ПроверитьВозможностьДобавленияОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияОбъектовЭлементТекущейИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтруктураПараметров=Новый Структура("ТекущаяСтрока,РежимВыбора",Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ОбъектТекущейИБ,Истина);
	
	Если Объект.ТипОбъектаКонсолидации="ВидСубконто" И ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		СтруктураПараметров.Вставить("Отбор",Новый Структура("Владелец",Объект.ИмяОбъектаМетаданных));
		ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора",СтруктураПараметров,Элемент);
		
	Иначе
		
		ОткрытьФорму(ТаблицаАналитики+".ФормаВыбора",СтруктураПараметров,Элемент);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ИспользуемаяИБ=ИспользуемаяИБ;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеИзмеренийВИБПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если (НЕ (СтрокаРазворота.ТипМетаДанных="Справочник" ИЛИ СтрокаРазворота.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ СтрокаРазворота.ТипМетаДанных="Документ" ИЛИ СтрокаРазворота.ТипМетаДанных="ТаблицаADO" ИЛИ СтрокаРазворота.ТипЗначения.Количество()>1)) ИЛИ Использование77 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].НаименованиеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
	
	СтруктураСтрока=СформироватьСтруктуруСтрокиВИБ(СтрокаРазворота);
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(СтруктураСтрока,Отказ);
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	
	ЕстьПримитивныеСсылочные=(СтруктураСтрока.СтрокиКДобавлениюПримитивные.Количество()>0 И СтруктураСтрока.СтрокиКДобавлениюСсылочные.Количество()>0);
	
	Если СтруктураСтрока.СтрокиКДобавлениюПримитивные.Количество()>0 Тогда 
		
		Если ЕстьПримитивныеСсылочные Тогда
			
			ОбъектДобавления=СтрокаРазворота.ПолучитьЭлементы().Добавить();
			ОбъектДобавления.НаименованиеБД=Нстр("ru = 'Примитивные типы'");
			
		Иначе
			
			ОбъектДобавления=СтрокаРазворота;
			
		КонецЕсли;
		
		Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлениюПримитивные Цикл
			
			НоваяСтрока=ОбъектДобавления.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураСтрока.СтрокиКДобавлениюСсылочные.Количество()>0 Тогда
		
		Если ЕстьПримитивныеСсылочные Тогда
			
			ОбъектДобавления=СтрокаРазворота.ПолучитьЭлементы().Добавить();
			ОбъектДобавления.НаименованиеБД=Нстр("ru = 'Ссылочные типы'");
			
		Иначе
			
			ОбъектДобавления=СтрокаРазворота;
			
		КонецЕсли;
		
		Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлениюСсылочные Цикл
			
			НоваяСтрока=ОбъектДобавления.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
			
			Если СтрокаКДобавлению.СтрокиКДобавлениюСсылочные.Количество()>0
				ИЛИ СтрокаКДобавлению.СтрокиКДобавлениюПримитивные.Количество() Тогда
				
				ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем ВыбранноеЗначение;
		
	Если Поле.Имя="ТаблицаСоответствияНастройкаСоответствия" И ЗначениеЗаполнено(Элементы.ТаблицаСоответствия.ТекущиеДанные.НастройкаСоответствия) Тогда
		
		ПоказатьЗначение(,Элементы.ТаблицаСоответствия.ТекущиеДанные.НастройкаСоответствия);
		
	ИначеЕсли Поле.Имя="ТаблицаСоответствияПсевдонимВИБ" И Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение") Тогда
		
		СтандартнаяОбработка=Ложь;
		КодАналитики=Элементы.ТаблицаСоответствия.ТекущиеДанные.АналитикаКонсолидации;
		СтрокаДанныхПоля=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолей","Поле",КодАналитики);
		
		Если СтрокаДанныхПоля.ТипДанныхПоля.Количество()=0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСерверУХ.ПримитивныйТипСтрока(СтрокаДанныхПоля.ТипДанныхПоля[0].Значение) Тогда
			
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(СтрокаДанныхПоля.ТаблицаАналитики);
			
			ТекТипЗначения=ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов);
			
			ОписаниеОповещенияПослеВводаФиксированногоЗначения = Новый ОписаниеОповещения("ПослеВводаФиксированногоЗначения",ЭтаФорма);
			
			ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов));	
			
		Иначе  
			
			Если СтрокаДанныхПоля.ТипДанныхПоля.Количество()>0 Тогда
				
				ОписаниеТипов=Новый ОписаниеТипов(СтрокаДанныхПоля.ТипДанныхПоля.ВыгрузитьЗначения());
				
				ОписаниеОповещенияПослеВводаФиксированногоЗначения = Новый ОписаниеОповещения("ПослеВводаФиксированногоЗначения",ЭтаФорма);
				ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОписаниеТипов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияОбъектовНаименованиеЭлементаВнешнейИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПараметров=ПолучитьДанныеСправочникаВнешнейИБ();
	
	СтруктураПараметров.Вставить("Код","{#@UUID@#}"+Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ОбъектВнешнейИБ);		
    Оповещение = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаВыбораЗначенийВИБ", 
					СтруктураПараметров,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодобратьОбъектТекущейИБ(РабочийОбъект)
	
	Если РабочийОбъект.ТипОбъектаВИБ="Справочник" Тогда
		
		СправочникОписание="СправочникиБД";
		
	ИначеЕсли РабочийОбъект.ТипОбъектаВИБ="Перечисление" Тогда
		
		СправочникОписание="ПеречисленияБД"; 
		
	ИначеЕсли РабочийОбъект.ТипОбъектаВИБ="ПланВидовХарактеристик" Тогда
		
		СправочникОписание="ПланыВидовХарактеристикБД";
		
	ИначеЕсли РабочийОбъект.ТипОбъектаВИБ="ПланСчетов" Тогда
		
		СправочникОписание="ПланыСчетовБД";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СправочникиБД.Ссылка КАК Ссылка,
	|	СправочникиБД.Наименование КАК Наименование
	|ИЗ
	|	Справочник."+СправочникОписание+" КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|	И СправочникиБД.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование",РабочийОбъект.ОписаниеОбъектаВИБ.Наименование);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		РабочийОбъект.ТипОбъектаКонсолидации=РабочийОбъект.ТипОбъектаВИБ;
		Объект.ТипОбъектаКонсолидации=РабочийОбъект.ТипОбъектаВИБ;
		
		ЗаполнитьСписокОбъектовКонсолидации();
		
		РабочийОбъект.ИмяОбъектаМетаданных=Результат.Наименование;
		Объект.ИмяОбъектаМетаданных=Результат.Наименование;
		
		РабочийОбъект.ОписаниеОбъектаТек=Результат.Ссылка;
		Объект.ОписаниеОбъектаТек=Результат.Ссылка;
		
		ЗаполнитьПоУмолчанию(РабочийОбъект);
		
		Если НЕ РабочийОбъект.ТипОбъектаВИБ="Перечисление" Тогда
			
			ЗаполнитьПоляСоответствийСервере(РабочийОбъект);
			
		КонецЕсли;
		
		ОпределитьТаблицуАналитики(РабочийОбъект);
		
		ЗаполнениеПоУмолчанию=Истина;
		
	КонецЕсли;
			
КонецПроцедуры // ПодобратьОбъектТекущейИБ() 

&НаСервере
Функция ИспользуетсяПлатформа1С8(ТипБД) Экспорт
	
	ВерсияПлатформы=ТипБД.ВерсияПлатформы;
	
	Возврат ЗначениеЗаполнено(ВерсияПлатформы) И НЕ (ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO ИЛИ ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);
		
КонецФункции // ИспользуетсяПлатформа1С8()

&НаСервере
Процедура УстановитьВидимость()
		
	Элементы.ТаблицаСоответствияНастройкаСоответствия.Видимость				= НЕ СоответствиеПеречислений;
	Элементы.ТаблицаСоответствияКлючевой.Видимость							= НЕ (СоответствиеПеречислений ИЛИ ЗначениеЗаполнено(Объект.НастройкаСоответствияРодитель));
	Элементы.ТаблицаСоответствияОписаниеПримитивногоТипаПриемник.Видимость	= НЕ СоответствиеПеречислений;
	
	Элементы.ТабличноеПолеИзмеренийБД.Видимость		=(СинхронизацияПоGUID=0);
	Элементы.ТаблицаСоответствия.Видимость			=(СинхронизацияПоGUID=0);
	Элементы.СоответствиеАналитикСправка.Видимость	=(СинхронизацияПоGUID=0);
	Элементы.ГруппаПоддержкаИерархии.Видимость		=(СинхронизацияПоGUID=0);
	Элементы.ПроцедураПередЗаписью.Видимость		=(СинхронизацияПоGUID=0);
	
	Элементы.ИспользуемаяИБ.Видимость	=(СинхронизацияПоGUID=1);
	Элементы.ГруппаТЧ.Видимость			=(СинхронизацияПоGUID=1);
	
	Элементы.СинхронизацияПоGUID.Видимость=((Объект.ТипОбъектаВИБ="Справочник" ИЛИ Объект.ТипОбъектаВИБ="ПланВидовХарактеристик") И ИспользуетсяПлатформа1С8);
	
	Элементы.КорневойКаталог.Видимость			= ИерархияКонсолидация;
	Элементы.ГруппаНастройкаИерархии.Видимость	= ТекВозможностьИерархии;
	
	Элементы.ПроцедураПередЗаписью.Видимость=((Объект.ТипОбъектаКонсолидации="Справочник" ИЛИ Объект.ТипОбъектаКонсолидации="ПланВидовХарактеристик") И СинхронизацияПоGUID=0);
	
	Элементы.ПроцедураПередЗаписью.Картинка=?(ЗначениеЗаполнено(Объект.ПроцедураПередЗаписью),БиблиотекаКартинок.Процедура,БиблиотекаКартинок.Пустая);
	
	Элементы.ГруппаОписаниеОбъектаВИБ.Доступность	= Не ЗначениеЗаполнено(Объект.НастройкаСоответствияРодитель);
	Элементы.ГруппаПриемникТипВид.Доступность		= Не ЗначениеЗаполнено(Объект.НастройкаСоответствияРодитель);
	
	Элементы.НастройкаСоответствияРодитель.Видимость=ЗначениеЗаполнено(Объект.НастройкаСоответствияРодитель);
	
	Элементы.ОткрытьНастройкуСвязанныхОбъектов.Видимость=(Объект.ТипОбъектаВИБ="Справочник" И Объект.ТипОбъектаКонсолидации="Справочник") И (НЕ (ЗначениеЗаполнено(Объект.НастройкаСоответствияРодитель) ИЛИ СинхронизацияПоGUID=1));
	
	Элементы.ОбновитьДанные.Видимость=ЗначениеЗаполнено(Объект.ОписаниеОбъектаВИБ) И ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) И (НЕ Объект.СинхронизацияПоGUID);
	
КонецПроцедуры // УстановитьВидимость() 

&НаСервере
Функция ПолучитьРабочийОбъект(РабочийОбъект = Неопределено)
	
	Если РабочийОбъект = Неопределено Тогда
		РабочийОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета = РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();
		
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьРабочийОбъект()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект)
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
				
КонецПроцедуры // ПолучитьРабочийОбъект()

&НаСервере
Процедура ОбновитьОбъектВХранилище()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьОбъектВХранилище()

&НаСервере
Функция ОпределитьВозможностьИерархии()
	
	СтруктураИерархия=ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьДанныеПоИерархии(Объект);
	
	ВидИерархииКонсолидация=СтруктураИерархия.ИерархияКонсолидации;
	ИерархияКонсолидация=(НЕ СтруктураИерархия.ИерархияКонсолидации=Перечисления.ВидИерархии.НетИерархии);
	
	Возврат (НЕ (СтруктураИерархия.ИерархияВИБ=Перечисления.ВидИерархии.НетИерархии ИЛИ СтруктураИерархия.ИерархияКонсолидации=Перечисления.ВидИерархии.НетИерархии));
				
КонецФункции // ОпределитьВозможностьИерархии()

&НаСервере
Процедура ОбновитьДеревоИзмерений(РабочийОбъект)
	
	Если НЕ ЗначениеЗаполнено(РабочийОбъект.ОписаниеОбъектаВИБ) Тогда
		
		РабочийОбъект.мТаблицаПоказателейБД.Очистить();
		РабочийОбъект.мТаблицаПроизводныхБД.Очистить();
		
		ТабличноеПолеИзмеренийБД.ПолучитьЭлементы().Очистить();
		
	Иначе
		
		Если (НЕ (РабочийОбъект.ТипОбъектаВИБ="Перечисление" ИЛИ РабочийОбъект.ТипОбъектаВИБ="ПланСчетов")) И РабочийОбъект.ОписаниеОбъектаВИБ.Реквизиты.Количество()=0 Тогда
			
			ОбъектНСИ=РабочийОбъект.ОписаниеОбъектаВИБ.ПолучитьОбъект();
			ОбъектНСИ.ЗаполнитьРеквизитыОбъекта();
			ОбъектНСИ.Записать();
			
		КонецЕсли;
		
		РабочийОбъект.ЗаполнитьРеквизитыОбъектаВИБ();	
		РабочийОбъект.ЗаполнитьСписокПолей();
		
	КонецЕсли;
	
	СформироватьТаблицуСоответствия(РабочийОбъект);	
	
КонецПроцедуры // 

&НаСервере
Процедура ВосстановитьНастройкиОперанда(РабочийОбъект)
	
	Если РабочийОбъект.ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(РабочийОбъект.ОписаниеОбъектаВИБ)
			ИЛИ ЗначениеЗаполнено(РабочийОбъект.ИмяОбъектаМетаДанных) Тогда
			
			ОбновитьДеревоИзмерений(РабочийОбъект);
				
		КонецЕсли;
			
		Возврат;
		
	КонецЕсли;
	
	СтруктураЗначенийИнтерфейс = РабочийОбъект.НастройкиОперандаИнтерфейс.Получить();
	
	Если ТипЗнч(СтруктураЗначенийИнтерфейс) <> Тип("Структура") Тогда
		ОбновитьДеревоИзмерений(РабочийОбъект);
		Возврат;
	КонецЕсли;
		
	Если СтруктураЗначенийИнтерфейс.Свойство("ТабличноеПолеИзмеренийБД") И ТипЗнч(СтруктураЗначенийИнтерфейс.ТабличноеПолеИзмеренийБД)=Тип("ДеревоЗначений") Тогда
		
		ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(СтруктураЗначенийИнтерфейс.ТабличноеПолеИзмеренийБД,ТабличноеПолеИзмеренийБД);
		
	Иначе
		
		ОбновитьДеревоИзмерений(РабочийОбъект);
		
	КонецЕсли;
		
КонецПроцедуры // ВосстановитьНастройкиОперанда()

&НаСервере
Функция ПолучитьСписокДляВыбораОбъектаКонсолидации(ТипОбъектаКонсолидации)
	
	Если Не ЗначениеЗаполнено(ТипОбъектаКонсолидации) Тогда
		
		Возврат Новый СписокЗначений;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		
		Если ТипОбъектаКонсолидации="Справочник" Тогда
			
			Для Каждого Справочник из Метаданные.Справочники Цикл
				
				Если Справочник.Имя="ПроизвольныйКлассификаторУХ" Тогда
					Продолжить;
				КонецЕсли;
				
				СписокЗначений.Добавить(Справочник.Имя, ОбщегоНазначенияУХ.ПолучитьСинонимПоля(Справочник.Имя));
				
			КонецЦикла;
			
		ИначеЕсли ТипОбъектаКонсолидации="Документ" Тогда
			
			СписокЗначений.Добавить("ЗаявкаНаРасходованиеДенежныхСредств", Нстр("ru = 'Заявка на расходование денежных средств'"));
			СписокЗначений.Добавить("ПлатежноеПоручениеИсходящее", Нстр("ru = 'Исходящее платежное поручение'"));
			
		ИначеЕсли ТипОбъектаКонсолидации="ПланСчетов" Тогда
			
			Для Каждого ПланСчетов ИЗ Метаданные.ПланыСчетов Цикл
				
				СписокЗначений.Добавить(ПланСчетов.Имя, ПланСчетов.Синоним);

			КонецЦикла;	
			
		ИначеЕсли ТипОбъектаКонсолидации="Перечисление" Тогда
			
			Для Каждого Перечисление из Метаданные.Перечисления Цикл
								
				СписокЗначений.Добавить(Перечисление.Имя, ОбщегоНазначенияУХ.ПолучитьСинонимПоля(Перечисление.Имя));
				
			КонецЦикла;
			
		ИначеЕсли ТипОбъектаКонсолидации="РегистрСведений" Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РегистрыСведенийБД.Наименование КАК Наименование,
			|	РегистрыСведенийБД.Синоним КАК Синоним
			|ИЗ
			|	Справочник.РегистрыСведенийБД КАК РегистрыСведенийБД
			|ГДЕ
			|	РегистрыСведенийБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл	
									
				СписокЗначений.Добавить(Результат.Наименование,Результат.Синоним);
				
			КонецЦикла;
			
		ИначеЕсли ТипОбъектаКонсолидации="ПланВидовХарактеристик" Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ПланыВидовХарактеристикБД.Наименование КАК Наименование,
			|	ПланыВидовХарактеристикБД.Синоним КАК Синоним
			|ИЗ
			|	Справочник.ПланыВидовХарактеристикБД КАК ПланыВидовХарактеристикБД
			|ГДЕ
			|	ПланыВидовХарактеристикБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл	
									
				СписокЗначений.Добавить(Результат.Наименование,Результат.Синоним);
				
			КонецЦикла;
			
		ИначеЕсли ТипОбъектаКонсолидации="ТабличнаяЧасть" Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ТабличныеЧастиБД.Наименование КАК Наименование,
			|	ТабличныеЧастиБД.Синоним КАК Синоним
			|ИЗ
			|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
			|ГДЕ
			|	ТабличныеЧастиБД.Владелец = &Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
			Запрос.УстановитьПараметр("Владелец",Объект.НастройкаСоответствияРодитель.ОписаниеОбъектаТек);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл	
									
				СписокЗначений.Добавить(Результат.Наименование,Результат.Синоним);
				
			КонецЦикла;
			
		Иначе
					
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ВидыСубконто.Ссылка,
			|	ВидыСубконто.Наименование КАК Наименование,
			|	ВидыСубконто.ТипЗначения КАК ТипЗначенияАналитики
			|ИЗ
			|	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконто
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл	
									
				СписокЗначений.Добавить(Результат.Ссылка, Результат.Наименование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат СписокЗначений;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСписокДляВыбораОбъектаКонсолидации()

&НаСервере
Процедура ПриИзмененииОбъектаМетаданных()
	
	ОпределитьТаблицуАналитики();
		
	Если СинхронизацияПоGUID=1 Тогда
		
		НастройкаСоответствияОбъектов.Очистить();
		
	Иначе
		
		ОбработатьВыборОбъектаСоответствия();
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПотребителяРасчета()

&НаСервере
Процедура ОпределитьТаблицуАналитики(РабочийОбъект=Неопределено)
	
	Если Объект.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТаблицаАналитики=Метаданные.НайтиПоТипу(Объект.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		ТаблицаАналитики=Объект.ТипОбъектаКонсолидации+"."+Объект.ИмяОбъектаМетаданных;
		
		Если НЕ ЗначениеЗаполнено(Объект.ОписаниеОбъектаТек) Тогда
			
			Объект.ОписаниеОбъектаТек=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,Объект.ТипОбъектаКонсолидации,Объект.ИмяОбъектаМетаданных,Справочники.ТипыБазДанных.ТекущаяИБ,Ложь);
			
			Если НЕ РабочийОбъект=Неопределено Тогда
				
				РабочийОбъект.ОписаниеОбъектаТек=Объект.ОписаниеОбъектаТек;
				
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ОпределитьТаблицуАналитики()

&НаСервере
Процедура ПриИзмененииОписанияОбъектаВИБ()
	
	Если СинхронизацияПоGUID=1 Тогда
		
		НастройкаСоответствияОбъектов.Очистить();
		Возврат;
		
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
		
	Если НЕ ЗначениеЗаполнено(Объект.ОписаниеОбъектаВИБ) Тогда
		
		РабочийОбъект.мТаблицаПоказателейБД.Очистить();
		РабочийОбъект.мТаблицаПроизводныхБД.Очистить();
		
		ТабличноеПолеИзмеренийБД.ПолучитьЭлементы().Очистить();
	
	Иначе
		
		Если (НЕ РабочийОбъект.ТипОбъектаВИБ="ПланСчетов") И РабочийОбъект.ОписаниеОбъектаВИБ.Реквизиты.Количество()=0 Тогда
			
			ОбъектНСИ=РабочийОбъект.ОписаниеОбъектаВИБ.ПолучитьОбъект();
			ОбъектНСИ.ЗаполнитьРеквизитыОбъекта();
			ОбъектНСИ.Записать();
			
		КонецЕсли;
		
		РабочийОбъект.ЗаполнитьРеквизитыОбъектаВИБ();
		
	КонецЕсли;
	
	ТекВозможностьИерархии=ОпределитьВозможностьИерархии();
	
	Если НЕ ТекВозможностьИерархии Тогда
		РабочийОбъект.ПоддерживатьИерархиюВИБ=Ложь;
	КонецЕсли;
	
	РабочийОбъект.ЗаполнитьСписокПолей();
		
	СоответствиеПеречислений=РабочийОбъект.СоответствиеПеречислений();
	
	УстановитьВидимость();
		
	СформироватьТаблицуСоответствия(РабочийОбъект);
    ПоместитьРабочийОбъект(РабочийОбъект);
			
КонецПроцедуры // ПриИзмененииОписанияОбъектаВИБ() 

&НаСервере
Процедура СформироватьТаблицуСоответствия(РабочийОбъект) 
	
	ЗаполнятьПримитивные=((Объект.ТипОбъектаВИБ="Перечисление" и Объект.ТипОбъектаКонсолидации="Перечисление") ИЛИ (Объект.ТипОбъектаВИБ="ПланСчетов" и Объект.ТипОбъектаКонсолидации="ПланСчетов"));
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.СформироватьТаблицуСоответствияБД(ЗаполнятьПримитивные),ТаблицаСоответствия);
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ЗаполнитьДеревоПоОбъектуВИБ(),ТабличноеПолеИзмеренийБД);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтроки()
	
	Если СинхронизацияПоGUID=1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого Строка Из ТабличноеПолеИзмеренийБД.ПолучитьЭлементы()  Цикл
		Элементы.ТабличноеПолеИзмеренийБД.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаСоответствия.ПолучитьЭлементы()  Цикл
		Элементы.ТаблицаСоответствия.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтроки()

&НаСервере
Процедура ПриИзмененииТипаОбъектаКонсолидации()
	
	Если Объект.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		Объект.ИмяОбъектаМетаданных=ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка");
		
	Иначе
		
		Объект.ИмяОбъектаМетаданных="";
		
	КонецЕсли;
	
	ЗаполнитьСписокОбъектовКонсолидации();
			
	Если СинхронизацияПоGUID=1 Тогда
		
		НастройкаСоответствияОбъектов.Очистить();
		УстановитьВидимость();
		
	Иначе
		
		ОбработатьВыборОбъектаСоответствия();
		
	КонецЕсли;	
			
КонецПроцедуры // ПриИзмененииТипаОбъектаКонсолидации()

&НаСервере
Процедура ЗаполнитьСписокОбъектовКонсолидации()
	
	СписокОбъектовКонсолидации=ПолучитьСписокДляВыбораОбъектаКонсолидации(Объект.ТипОбъектаКонсолидации);
	
	Элементы.ИмяОбъектаМетаданных.СписокВыбора.Очистить();
	
	Для Каждого ТекОбъект ИЗ СписокОбъектовКонсолидации Цикл
		
		Элементы.ИмяОбъектаМетаданных.СписокВыбора.Добавить(ТекОбъект.Значение,ТекОбъект.Представление);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокОбъектовКонсолидации() 

&НаСервере
Процедура ОбработатьВыборОбъектаСоответствия()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ЗаполнитьПоУмолчанию(РабочийОбъект);
	
	УстановитьВидимость();
	
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // ОбработатьВыборОбъектаСоответствия()

&НаСервере
Процедура ЗаполнитьПоУмолчанию(РабочийОбъект)
	
	РабочийОбъект.ЗаполнитьСписокПолей();
	
	Если РабочийОбъект.ТипОбъектаВИБ="Перечисление" Тогда
		
		РабочийОбъект.ЗаполнитьРеквизитыОбъектаВИБ();
		
	КонецЕсли;
	
	СформироватьТаблицуСоответствия(РабочийОбъект);
	
	ТекВозможностьИерархии=ОпределитьВозможностьИерархии();
	
	Если НЕ ТекВозможностьИерархии Тогда
		РабочийОбъект.ПоддерживатьИерархиюВИБ=Ложь;
	КонецЕсли;
	
	СоответствиеПеречислений=РабочийОбъект.СоответствиеПеречислений();	
	
КонецПроцедуры // ЗаполнитьПоУмолчанию() 

&НаСервере
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(Строка, Отказ) 
		
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	РабочийОбъект.ПередРазворачиваниемСтрокиРеквизитовАналитикиУправляемыйРежим(Строка, Отказ);
		
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаСервереБезКонтекста
Функция ПолучитьНастройкуСоответствия(ТипБД,ТекущаяСтрокаАналитики)
	
	Перем ТекСоединениеВИБ;
	
	Попытка
		СправочникКонсолидации = ?(ТекущаяСтрокаАналитики.СправочникКонсолидации="ПроизвольныйКлассификаторУХ" И ЗначениеЗаполнено(ТекущаяСтрокаАналитики.ВидСубконто), ТекущаяСтрокаАналитики.ВидСубконто, ТекущаяСтрокаАналитики.СправочникКонсолидации);
	Исключение
		СправочникКонсолидации = ТекущаяСтрокаАналитики.СправочникКонсолидации;
	КонецПопытки; // Заглушка для старых версий настроек, у которых отсутствовало поле ВидСубконто.
	
	СправочникБД          = ТекущаяСтрокаАналитики.СправочникБД;
		
	ТекНастройкаСоответствия=УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД,ТекущаяСтрокаАналитики.ТипМетаДанных);
	
	Если ТекНастройкаСоответствия=Неопределено Тогда
		
		ОписаниеОбъекта=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(ТекСоединениеВИБ,ТекущаяСтрокаАналитики.ТипМетаДанных,ТекущаяСтрокаАналитики.СправочникБД,ТипБД);
		
		СтруктураСоответствие=Новый Структура;
		СтруктураСоответствие.Вставить("ОписаниеОбъектаВИБ",ОписаниеОбъекта);
		СтруктураСоответствие.Вставить("Владелец",ТипБД);
		СтруктураСоответствие.Вставить("ТипОбъектаВИБ",ТекущаяСтрокаАналитики.ТипМетаДанных);						
		СтруктураСоответствие.Вставить("ТипОбъектаКонсолидации",ТекущаяСтрокаАналитики.ТипОбъектаКонсолидации);
		СтруктураСоответствие.Вставить("ИмяОбъектаМетаданных",СправочникКонсолидации);
							
		Возврат(СтруктураСоответствие);
		
	Иначе
		
		Возврат ТекНастройкаСоответствия;
		
	КонецЕсли;
		
КонецФункции // ПолучитьНастройкуСоответствия()

&НаСервереБезКонтекста
Функция ПолучитьСуществующееСоответствие(ТипБД,ИмяОбъектаМетаданных,СправочникБД,ТипМетаДанных);
	
	Возврат УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ТипБД,ИмяОбъектаМетаданных,СправочникБД,ТипМетаДанных);

КонецФункции //

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеОписанийОбъектовВИБ(ТипОбъектаВИБ,ТипБД)
	
	Кэш = РаботаСОбъектамиМетаданныхУХ.НовыйКэшОбновленияМетаданных();
	
	Запрос=Новый Запрос;
	
	Если ТипОбъектаВИБ="Справочник" Тогда
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникиБД.Ссылка
		|ИЗ
		|	Справочник.СправочникиБД КАК СправочникиБД
		|ГДЕ
		|	СправочникиБД.Владелец = &ТипБД";
					 
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Результат=Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ОбщегоНазначенияУХ.ЗаполнитьСписокСправочниковБД(ТипБД,,Кэш);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаВИБ="ПланВидовХарактеристик" Тогда
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыВидовХарактеристикБД.Ссылка
		|ИЗ
		|	Справочник.ПланыВидовХарактеристикБД КАК ПланыВидовХарактеристикБД
		|ГДЕ
		|	ПланыВидовХарактеристикБД.Владелец = &ТипБД";
					 
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Результат=Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ОбщегоНазначенияУХ.ЗаполнитьСписокПлановВидовХарактеристикБД(ТипБД,,Кэш);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаВИБ="Перечисление" Тогда
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПеречисленияБД.Ссылка
		|ИЗ
		|	Справочник.ПеречисленияБД КАК ПеречисленияБД
		|ГДЕ
		|	ПеречисленияБД.Владелец = &ТипБД";
					 
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Результат=Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ОбщегоНазначенияУХ.ЗаполнитьСписокПеречисленийБД(ТипБД,,Кэш);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаВИБ="Документ" Тогда
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыБД.Ссылка
		|ИЗ
		|	Справочник.ДокументыБД КАК ДокументыБД
		|ГДЕ
		|	ДокументыБД.Владелец = &ТипБД";
					 
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Результат=Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ОбщегоНазначенияУХ.ЗаполнитьСписокДокументовБД(ТипБД,,Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьНаличиеОписанийОбъектовВИБ() 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
&НаКлиенте
Функция СформироватьСтруктуруСтрокиВИБ(ДанныеСтрокиАналитики)
	
	СтрокаВИБ=Новый Структура;
	СтрокаВИБ.Вставить("АналитикаБД",				ДанныеСтрокиАналитики.АналитикаБД);
	СтрокаВИБ.Вставить("ИспользуетсяВСопоставлении",ДанныеСтрокиАналитики.ИспользуетсяВСопоставлении);
	СтрокаВИБ.Вставить("НаименованиеБД",			ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаВИБ.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
	СтрокаВИБ.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);
	СтрокаВИБ.Вставить("ПримитивныйТип",			ДанныеСтрокиАналитики.ПримитивныйТип);
	СтрокаВИБ.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаВИБ.Вставить("ИспользованиеВИБ",					ДанныеСтрокиАналитики.ИспользованиеВИБ);
	СтрокаВИБ.Вставить("ОписаниеПримитивногоТипаИсточник",	ДанныеСтрокиАналитики.ОписаниеПримитивногоТипаИсточник);
	
	Возврат СтрокаВИБ;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка, ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлениюСсылочные Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлениюСсылочные.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

&НаКлиенте
Процедура ОтменитьУстановкуСоответствияВИБ(ТекущаяСтрока)
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока.АналитикаБД) Тогда
		
		Модифицированность=Истина;
		
		ТекСтрокаВИБ=ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(ТабличноеПолеИзмеренийБД.ПолучитьЭлементы(),ТекущаяСтрока.АналитикаБД,"АналитикаБД");
		ТекСтрокаВИБ.ИспользуетсяВСопоставлении=Ложь;
	
		ТекущаяСтрока.АналитикаБД           			= Неопределено;
		ТекущаяСтрока.ПсевдонимБД           			= Неопределено;
		ТекущаяСтрока.Сопоставлено          			= Ложь;
		ТекущаяСтрока.СправочникБД          			= "";
		ТекущаяСтрока.ПолеЗапроса           			= "";
		ТекущаяСтрока.ТипМетаДанных         			= "";
		ТекущаяСтрока.НастройкаСоответствия				= "";
		ТекущаяСтрока.НеИспользоватьДляСинхронизации 	= Ложь;
		ТекущаяСтрока.Ключевой						 	= Ложь;
		
		УстановитьФлагДляРодителя(ТекущаяСтрока);
		
		Если СоответствиеПеречислений() Тогда
			
			РодительСтроки=ТекущаяСтрока.ПолучитьРодителя();	
			
			ЧислоСтрок=0;
			
			Для Каждого Строка ИЗ РодительСтроки.ПолучитьЭлементы() Цикл
				
				Если Строка.АналитикаКонсолидации=ТекущаяСтрока.АналитикаКонсолидации Тогда
					
					ЧислоСтрок=ЧислоСтрок+1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЧислоСтрок>1 Тогда
				
				РодительСтроки.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
							
	КонецЕсли;
	
	ТекущаяСтрока.ПсевдонимБД="";
	ТекущаяСтрока.НеИспользоватьДляСинхронизации 	= Ложь;
	ТекущаяСтрока.ФиксированноеЗначение="";
			
КонецПроцедуры // ОтменитьУстановкуСоответствияВИБ()

&НаКлиенте
Процедура КоманднаяПанельСоответствияКнопкаСопоставитьАналитики(Команда)
	
	ТекущаяСтрокаАналитики = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если НЕ (ТекущаяСтрокаАналитики=Неопределено ИЛИ ЗначениеЗаполнено(ТекущаяСтрокаАналитики.СправочникБД)) Тогда
				
		ОбновитьНастройкуСоответствия(ТекущаяСтрокаАналитики,СформироватьСтруктуруСтрокиВИБ(Элементы.ТабличноеПолеИзмеренийБД.ТекущиеДанные))
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоответствиеПеречислений() 
	
	 Возврат Объект.ТипОбъектаВИБ="Перечисление" И СтрНайти(ТаблицаАналитики,"Перечисление.")>0;
	
КонецФункции // СоответствиеПеречислений()

&НаКлиенте
Процедура ОбновитьНастройкуСоответствия(Знач СтрокаСоответствия,СтрокаВИБ)
	
	Если НЕ (ЗначениеЗаполнено(СтрокаВИБ.АналитикаБД) И ЗначениеЗаполнено(СтрокаСоответствия.АналитикаКонсолидации) И (СтрокаСоответствия.ПримитивныйТип ИЛИ ЗначениеЗаполнено(СтрокаСоответствия.ТипОбъектаКонсолидации))) Тогда 
		Возврат;
	КонецЕсли;
	
	НесоответствиеРазмерности="";
	
	Если СтрокаСоответствия.ПримитивныйТип Тогда
		
		Если НЕ СтрокаВИБ.ПримитивныйТип Тогда
			
			Сообщить(Нстр("ru = 'Несоответствие типов.'"),СтатусСообщения.Внимание);
			
			Возврат;
			
		КонецЕсли;
		
		ТекстПроверки=ОбщегоНазначенияУХ.ПроверитьВозможностьУстановкиСоответствия(СтрокаВИБ.ОписаниеПримитивногоТипаИсточник,СтрокаСоответствия.ОписаниеПримитивногоТипаПриемник);
		
		Если Не ПустаяСтрока(ТекстПроверки) Тогда
			
			Если ТекстПроверки=Нстр("ru = 'Несовпадение типов.'") Тогда 
				
				ПоказатьПредупреждение(,ТекстПроверки);
				Возврат;
				
			Иначе
				
				НесоответствиеРазмерности=СтрокаВИБ.ОписаниеПримитивногоТипаИсточник+" <-> "+СтрокаСоответствия.ОписаниеПримитивногоТипаПриемник;
				ТекстПроверки=ТекстПроверки+"
				|"+НесоответствиеРазмерности;
				
				ПоказатьПредупреждение(,ТекстПроверки);
				
			КонецЕсли;
			
		КонецЕсли;
				
	Иначе
		
		Если СтрокаВИБ.ПримитивныйТип И (НЕ Объект.ТипОбъектаВИБ="ТаблицаADO") Тогда
			
			Сообщить(Нстр("ru = 'Несоответствие типов.'"),СтатусСообщения.Внимание);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоответствиеПеречислений() Тогда
		
		РодительСтроки=СтрокаСоответствия.ПолучитьРодителя();
				
		Если ЗначениеЗаполнено(СтрокаСоответствия.АналитикаБД) Тогда 
			
			ИндексСтроки=РодительСтроки.ПолучитьЭлементы().Индекс(СтрокаСоответствия);
			НоваяСтрока=РодительСтроки.ПолучитьЭлементы().Вставить(ИндексСтроки+1);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСоответствия);
			
			СтрокаСоответствия=НоваяСтрока;
			
		КонецЕсли;
	
	КонецЕсли;	
		
	ЗаполнитьЗначенияСвойств(СтрокаСоответствия,СтрокаВИБ,,"ПримитивныйТип");	
	СтрокаСоответствия.ПсевдонимБД = СтрокаВИБ.НаименованиеБД;
	
	Если НЕ (СтрокаСоответствия.ПримитивныйТип ИЛИ (СтрокаВИБ.ПримитивныйТип И (НЕ Объект.ТипОбъектаВИБ="ТаблицаADO"))) Тогда
		
		СтруктураСправочник=Новый Структура;
		СтруктураСправочник.Вставить("АналитикаБД",СтрокаСоответствия.АналитикаБД);
		СтруктураСправочник.Вставить("СправочникКонсолидации",СтрокаСоответствия.СправочникКонсолидации);
		СтруктураСправочник.Вставить("ТипОбъектаКонсолидации",СтрокаСоответствия.ТипОбъектаКонсолидации);
		СтруктураСправочник.Вставить("ВидСубконто",СтрокаСоответствия.ВидСубконто);
		
		Если Объект.ТипОбъектаВИБ="ТаблицаADO" Тогда
			
			Если СтрокаВИБ.ПримитивныйТип Тогда
				
				ОписаниеОбъектаВИБНаименование = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ОписаниеОбъектаВИБ, "Наименование");
				
				СтрокаСоответствия.СправочникБД="({["+ОписаниеОбъектаВИБНаименование+"]})";
				СтрокаСоответствия.ТипМетаДанных="ТаблицаADO";
				СтрокаСоответствия.ПримитивныйТип=Ложь;
				СтрокаСоответствия.АналитикаБД="["+ОписаниеОбъектаВИБНаименование+"]";
				
			КонецЕсли;
					
			СтруктураСправочник.Вставить("СправочникБД",УправлениеОтчетамиКлиентУХ.ПолучитьИмяСвязаннойТаблицы(СтрокаСоответствия.СправочникБД));
			
		Иначе
			
			СтруктураСправочник.Вставить("СправочникБД",СтрокаСоответствия.СправочникБД);
			
		КонецЕсли;
		
		СтруктураСправочник.Вставить("ТипМетаДанных",СтрокаСоответствия.ТипМетаДанных);
		
		ТекНастройкаСоответствия=ПолучитьНастройкуСоответствия(Объект.Владелец,СтруктураСправочник);
		
		Если ТекНастройкаСоответствия=Неопределено Тогда
			
			Сообщить(СтрШаблон(Нстр("ru = 'Не обнаружена настройка соответствия для объектов:
			|%1 -> %2'"), 
			?(СтрокаСоответствия.ВидСубконто=Неопределено,СтрокаСоответствия.СправочникКонсолидации,СтрокаСоответствия.ВидСубконто), 
			СтрокаСоответствия.СправочникБД),СтатусСообщения.Внимание);
			
			ОтменитьУстановкуСоответствияВИБ(СтрокаСоответствия);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекНастройкаСоответствия)=Тип("Структура") Тогда // Возвращены данные для создания нового объекта
			
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",ТекНастройкаСоответствия);
			ДопПараметры = Новый Структура("СтрокаВИБ, СтрокаСоответствия, СтруктураСправочник, ТекНастройкаСоответствия", 
											СтрокаВИБ, СтрокаСоответствия, СтруктураСправочник, ТекНастройкаСоответствия);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьСоотвествие", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.ФормаОбъекта", 
							ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
            Возврат;
			
		Иначе
			
			СтрокаСоответствия.НастройкаСоответствия=ТекНастройкаСоответствия;
			СтрокаСоответствия.НеиспользоватьДляСинхронизации	= Истина;
			СтрокаСоответствия.Ключевой							= Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрокаВИБ=ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(ТабличноеПолеИзмеренийБД.ПолучитьЭлементы(),СтрокаВИБ.АналитикаБД,"АналитикаБД");
	ТекСтрокаВИБ.ИспользуетсяВСопоставлении=Истина;
	
	СтрокаСоответствия.НесоответствиеРазмерности=НесоответствиеРазмерности;
	
	ОбновитьНастройкуСоответствияФрагмент(СтрокаВИБ, СтрокаСоответствия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьСоотвествие(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаВИБ = ДополнительныеПараметры.СтрокаВИБ;
    СтрокаСоответствия = ДополнительныеПараметры.СтрокаСоответствия;
    СтруктураСправочник = ДополнительныеПараметры.СтруктураСправочник;
    ТекНастройкаСоответствия = ДополнительныеПараметры.ТекНастройкаСоответствия;
        
    НоваяНастройкаСоответствия=ПолучитьСуществующееСоответствие(Объект.Владелец,ТекНастройкаСоответствия.ИмяОбъектаМетаданных,СтруктураСправочник.СправочникБД,СтруктураСправочник.ТипМетаДанных);
    
    Если НоваяНастройкаСоответствия=Неопределено Тогда
        
        Сообщить(СтрШаблон(Нстр("ru = 'Не обнаружена настройка соответствия для объектов:
        |%1 -> %2'"), 
        ?(СтрокаСоответствия.ВидСубконто=Неопределено,СтрокаСоответствия.СправочникКонсолидации,СтрокаСоответствия.ВидСубконто), 
        СтрокаСоответствия.СправочникБД),СтатусСообщения.Внимание);
        
        ОтменитьУстановкуСоответствияВИБ(СтрокаСоответствия);
        Возврат;
        
    Иначе
        
        СтрокаСоответствия.НастройкаСоответствия=НоваяНастройкаСоответствия;
        СтрокаСоответствия.НеиспользоватьДляСинхронизации	= Истина;
		СтрокаСоответствия.Ключевой							= Ложь;
        
    КонецЕсли;
    
    
    ОбновитьНастройкуСоответствияФрагмент(СтрокаВИБ, СтрокаСоответствия);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкуСоответствияФрагмент(Знач СтрокаВИБ, Знач СтрокаСоответствия)
    
    СтрокаСоответствия.Сопоставлено = Истина;
	СтрокаСоответствия.НеИспользоватьДляСинхронизации=Истина;
	СтрокаСоответствия.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
    УстановитьФлагДляРодителя(СтрокаСоответствия,СтрокаВИБ);
	
КонецПроцедуры // ОбновитьНастройкуСоответствия()

&НаКлиенте
Процедура УстановитьФлагДляРодителя(СтрокаСоответствия,СтрокаВИБ=Неопределено)
	
	СтрокаРодитель=СтрокаСоответствия.ПолучитьРодителя();

	Если НЕ СтрокаРодитель=Неопределено И СтрокаРодитель.АналитикаКонсолидации=СтрокаСоответствия.АналитикаКонсолидации Тогда
			
		Индекс=0;
		
		Если НЕ СтрокаВИБ=Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРодитель,СтрокаВИБ);
		КонецЕсли;
		
		Для Каждого Строка ИЗ СтрокаРодитель.ПолучитьЭлементы() Цикл
			
			Если Строка.Сопоставлено Тогда
				
				Индекс=Индекс+1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаРодитель.Сопоставлено=(Индекс>1);
		
		Если НЕ СтрокаРодитель.Сопоставлено Тогда
			
			ОтменитьУстановкуСоответствияВИБ(СтрокаРодитель);
			
		ИначеЕсли НЕ СтрокаРодитель.Ключевой Тогда
			
			СтрокаРодитель.НеИспользоватьДляСинхронизации=Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьФлагДляРодителя() 
	
&НаКлиенте
Процедура НаименованиеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ДанныеОбъектаВИБ=Результат;
    
    Если ТипЗнч(ДанныеОбъектаВИБ)=Тип("СписокЗначений") Тогда
        
        Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.ОбъектВнешнейИБ 				= СтрЗаменить(ДанныеОбъектаВИБ[0].Значение,"{#@UUID@#}","");
        Элементы.НастройкаСоответствияОбъектов.ТекущиеДанные.НаименованиеОбъектаВнешнейИБ 	= ДанныеОбъектаВИБ[0].Представление;
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоматическиНаСервере()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ЗаполнитьПоляСоответствийСервере(РабочийОбъект);
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСоответствийСервере(РабочийОбъект);
	
	ТекТаблицаСоответствия=РабочийОбъект.СформироватьТаблицуСоответствияБД(Истина);
	
	ТекТабличноеПолеИзмеренийБД=РеквизитФормыВЗначение("ТабличноеПолеИзмеренийБД");
	
	МассивСопоставлено=ТекТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("Сопоставлено",Истина),Истина);
	
	Для Каждого СтрокаСоответствия ИЗ МассивСопоставлено Цикл
		
		Если СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрБД=ТекТабличноеПолеИзмеренийБД.Строки.НайтиСтроки(Новый Структура("АналитикаБД",СтрокаСоответствия.АналитикаБД),Истина);
		
		Если СтрБД.Количество()>0 Тогда
			
			СтрБД[0].ИспользуетсяВСопоставлении=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекТабличноеПолеИзмеренийБД,"ТабличноеПолеИзмеренийБД");	
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(ТекТаблицаСоответствия,ТаблицаСоответствия);
	
	
КонецПроцедуры // ЗаполнитьПоУмолчаниюНаСервере() 

&НаСервере
Процедура ЗаполнитьПоДаннымВИБНаСервере()
	
	База = РасширениеИнтеграцииУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);
	
	Если База=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСправочниикаВИБ=РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьТаблицуИдентификаторовОбъектовБД(База,Объект.ТипОбъектаВИБ+"."+Объект.ОписаниеОбъектаВИБ.Наименование);
		
	ТекТаблицаСинхронизации=РеквизитФормыВЗначение("НастройкаСоответствияОбъектов");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекТаблицаСинхронизации.ОбъектТекущейИБ,
	|	ТекТаблицаСинхронизации.ОбъектВнешнейИБ,
	|	ТекТаблицаСинхронизации.НаименованиеОбъектаВнешнейИБ,
	|	ТекТаблицаСинхронизации.ИспользуемаяИБ
	|ПОМЕСТИТЬ ТекТаблицаСинхронизации
	|ИЗ
	|	&ТекТаблицаСинхронизации КАК ТекТаблицаСинхронизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекТаблицаСинхронизации.ОбъектВнешнейИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСправочникаВИБ.ОбъектВнешнейИБ,
	|	ТаблицаСправочникаВИБ.НаименованиеОбъектаВнешнейИБ
	|ПОМЕСТИТЬ ТаблицаСправочникаВИБ
	|ИЗ
	|	&ТаблицаСправочникаВИБ КАК ТаблицаСправочникаВИБ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаСправочникаВИБ.ОбъектВнешнейИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекТаблицаСинхронизации.ОбъектТекущейИБ,
	|	ТекТаблицаСинхронизации.ОбъектВнешнейИБ,
	|	ТекТаблицаСинхронизации.НаименованиеОбъектаВнешнейИБ КАК НаименованиеОбъектаВнешнейИБ,
	|	ТекТаблицаСинхронизации.ИспользуемаяИБ
	|ИЗ
	|	ТекТаблицаСинхронизации КАК ТекТаблицаСинхронизации
	|ГДЕ
	|	ТекТаблицаСинхронизации.ИспользуемаяИБ <> &ИспользуемаяИБ
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА НЕ ТекТаблицаСинхронизации.ОбъектТекущейИБ ЕСТЬ NULL ТОГДА ТекТаблицаСинхронизации.ОбъектТекущейИБ
	|		ИНАЧЕ ВЫБОР КОГДА НЕ СправочникТекущейИБ.Ссылка Есть NULL Тогда СправочникТекущейИБ.Ссылка 
	|		ИНАЧЕ ЗНАЧЕНИЕ("+ТаблицаАналитики+".ПустаяСсылка)
	|КОНЕЦ
	|КОНЕЦ КАК ОбъектТекущейИБ,
	|	ТаблицаСправочникаВИБ.ОбъектВнешнейИБ,
	|	ТаблицаСправочникаВИБ.НаименованиеОбъектаВнешнейИБ,
	|	&ИспользуемаяИБ
	|ИЗ
	|	ТаблицаСправочникаВИБ КАК ТаблицаСправочникаВИБ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекТаблицаСинхронизации КАК ТекТаблицаСинхронизации
	|		ПО ТаблицаСправочникаВИБ.ОбъектВнешнейИБ = ТекТаблицаСинхронизации.ОбъектВнешнейИБ
	|			И (ТекТаблицаСинхронизации.ИспользуемаяИБ = &ИспользуемаяИБ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ "+ТаблицаАналитики+" КАК СправочникТекущейИБ
	|		ПО ТаблицаСправочникаВИБ.НаименованиеОбъектаВнешнейИБ = СправочникТекущейИБ.Наименование";
	
	Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И (СправочникТекущейИБ.Владелец = &ВидСубконто)";
		
		Запрос.УстановитьПараметр("ВидСубконто",Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;

	Запрос.Текст=Запрос.Текст+"	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеОбъектаВнешнейИБ";
	
	Запрос.УстановитьПараметр("ТекТаблицаСинхронизации",ТекТаблицаСинхронизации);
	Запрос.УстановитьПараметр("ТаблицаСправочникаВИБ",	ТаблицаСправочниикаВИБ);
	Запрос.УстановитьПараметр("ИспользуемаяИБ",			ИспользуемаяИБ);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"НастройкаСоответствияОбъектов");
		
КонецПроцедуры
				
&НаСервере
Функция ПолучитьДанныеСправочникаВнешнейИБ()
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Использование77",			Ложь);
	СтруктураПараметров.Вставить("КодНеИспользуется",		Ложь);
	СтруктураПараметров.Вставить("ТипБД",					Объект.Владелец);
	СтруктураПараметров.Вставить("ВнешняяИнформационнаяБаза",ИспользуемаяИБ);
	СтруктураПараметров.Вставить("ТипМетаДанных",			"Справочник");
	СтруктураПараметров.Вставить("СправочникБД",			Объект.ОписаниеОбъектаВИБ.Наименование);
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьДанныеСправочникаВнешнейИБ() 				

&НаКлиенте
Процедура УстановитьОтборВИБ()
	
	СтруктураОтбор=Новый ФиксированнаяСтруктура("ИспользуемаяИБ",ИспользуемаяИБ);
	Элементы.НастройкаСоответствияОбъектов.ОтборСтрок=СтруктураОтбор;
	
КонецПроцедуры // УстановитьОтборВИБ()

&НаСервере
Процедура ЗаполнитьТаблицуНастроекСоответствия()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.НаименованиеОбъектаВнешнейИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
	|ГДЕ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия = &НастройкаСоответствия";
	
	Запрос.УстановитьПараметр("НастройкаСоответствия",Объект.Ссылка);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"НастройкаСоответствияОбъектов");
	
	Если НастройкаСоответствияОбъектов.Количество()>0 Тогда
		
		ИспользуемаяИБ=НастройкаСоответствияОбъектов[0].ИспользуемаяИБ;
		СтруктураОтбор=Новый ФиксированнаяСтруктура("ИспользуемаяИБ",ИспользуемаяИБ);
		Элементы.НастройкаСоответствияОбъектов.ОтборСтрок=СтруктураОтбор;
		
	КонецЕсли;
				
КонецПроцедуры // ЗаполнитьТаблицуНастроекСоответствия()

&НаСервере
Функция ПроверитьСоответствиеРазмерности()
	
	мТаблицаСоответствия=РеквизитФормыВЗначение("ТаблицаСоответствия");	
	УстановленныеСоответствия=мТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("Сопоставлено,НеИспользоватьДляСинхронизации,ПримитивныйТип",Истина,Ложь,Истина),Истина);
	
	ТекстОшибки="";
	
	Для Каждого Строка ИЗ УстановленныеСоответствия Цикл
		
		Если ЗначениеЗаполнено(Строка.НесоответствиеРазмерности) Тогда
			
			ТекстОшибки=Строка.ПсевдонимКонсолидации+" - "+Строка.ПсевдонимБД+": "+Строка.НесоответствиеРазмерности;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		Возврат СтрШаблон(Нстр("ru = 'Обнаружено несоответствие размерности ключевых полей
		|%1'"), ТекстОшибки);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
		
КонецФункции // ПроверитьНастройкиСоответствия() 

&НаСервере
Процедура СохранитьНастройкиСинхронизацииПоGUID()
	
	НаборЗаписей=РегистрыСведений.СоответствиеОбъектовТекущейИВнешнихИБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаСоответствия.Установить(Объект.Ссылка);
	НовТаблицаСинхронизации=НаборЗаписей.ВыгрузитьКолонки();
	
	ИмяОбъектаВнешнейИБ=Объект.ОписаниеОбъектаВИБ.Наименование;
		
	Для Каждого Строка ИЗ НастройкаСоответствияОбъектов Цикл
		
		Если ЗначениеЗаполнено(Строка.ОбъектТекущейИБ) И ЗначениеЗаполнено(Строка.ОбъектВнешнейИБ) Тогда
			
			НоваяСтрока=НовТаблицаСинхронизации.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.GUIDОбъектаТекущейИБ=XMLString(Строка.ОбъектТекущейИБ);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НовТаблицаСинхронизации.ОбъектТекущейИБ КАК ОбъектТекущейИБ,
	|	НовТаблицаСинхронизации.ОбъектВнешнейИБ КАК ОбъектВнешнейИБ,
	|	НовТаблицаСинхронизации.ИспользуемаяИБ КАК ИспользуемаяИБ,
	|	НовТаблицаСинхронизации.НаименованиеОбъектаВнешнейИБ КАК НаименованиеОбъектаВнешнейИБ,
	|	НовТаблицаСинхронизации.GUIDОбъектаТекущейИБ КАК GUIDОбъектаТекущейИБ
	|ПОМЕСТИТЬ НовТаблицаСинхронизации
	|ИЗ
	|	&НовТаблицаСинхронизации КАК НовТаблицаСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовТаблицаСинхронизации.ОбъектТекущейИБ КАК ОбъектТекущейИБ,
	|	НовТаблицаСинхронизации.ОбъектВнешнейИБ КАК ОбъектВнешнейИБ,
	|	НовТаблицаСинхронизации.ИспользуемаяИБ КАК ИспользуемаяИБ,
	|	НовТаблицаСинхронизации.НаименованиеОбъектаВнешнейИБ КАК НаименованиеОбъектаВнешнейИБ,
	|	НовТаблицаСинхронизации.GUIDОбъектаТекущейИБ КАК GUIDОбъектаТекущейИБ,
	|	ЕСТЬNULL(ТекДанныеСинхронизации.Выгружено, ЛОЖЬ) КАК Выгружено
	|ИЗ
	|	НовТаблицаСинхронизации КАК НовТаблицаСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК ТекДанныеСинхронизации
	|		ПО НовТаблицаСинхронизации.ОбъектТекущейИБ = ТекДанныеСинхронизации.ОбъектТекущейИБ
	|			И НовТаблицаСинхронизации.ОбъектВнешнейИБ = ТекДанныеСинхронизации.ОбъектВнешнейИБ
	|			И НовТаблицаСинхронизации.ИспользуемаяИБ = ТекДанныеСинхронизации.ИспользуемаяИБ
	|			И (ТекДанныеСинхронизации.НастройкаСоответствия = &НастройкаСоответствия)";
	
	Запрос.УстановитьПараметр("НовТаблицаСинхронизации",НовТаблицаСинхронизации);
	Запрос.УстановитьПараметр("НастройкаСоответствия",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.НастройкаСоответствия=Объект.Ссылка;
		НоваяСтрока.НастройкаСоответствияНаименование=Объект.Наименование;
		НоваяСтрока.ТипОбъектаТекущейИБ=Объект.ТипОбъектаКонсолидации;
		НоваяСтрока.ТипОбъектаВнешнейИБ=Объект.ТипОбъектаВИБ;
		НоваяСтрока.ИмяОбъектаТекущейИБ=Объект.ИмяОбъектаМетаданных;
		НоваяСтрока.ИмяОбъектаВнешнейИБ=ИмяОбъектаВнешнейИБ;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // СохранитьНастройкиСинхронизацииПоGUID()

&НаКлиенте
Функция ПроверитьВозможностьДобавленияОбъектов()
	
	Если НЕ ЗначениеЗаполнено(ИспользуемаяИБ) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Не указана внешняя информационная база.'"),60);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОписаниеОбъектаВИБ) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Не указан справочник внешней информационной базы.'"),60);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) Тогда
		
		ПоказатьПредупреждение(,Нстр("ru = 'Не указан вид объекта текущей информационной базы.'"),60);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции // ПроверитьВозможностьДобавленияОбъектов() 

&НаСервере
Функция ПолучитьДанныеОбъектаВИБ(ИндексСтроки)
	
	ТекущиеДанные=НастройкаСоответствияОбъектов.НайтиПоИдентификатору(ИндексСтроки);
	
	СтрокаGUID=ТекущиеДанные.ОбъектВнешнейИБ;
	
	ТекСоединениеВИБ = РасширениеИнтеграцииУХ.ПолучитьСоединение(ТекущиеДанные.ИспользуемаяИБ, 1);
		
	Если ТекСоединениеВИБ=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектСсылкаВИБ=РасширениеИнтеграцииУХ.ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,Объект.ТипОбъектаВИБ,Объект.ОписаниеОбъектаВИБ.Наименование,СтрокаGUID);
	
	ТипЗначения = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ОбъектСсылкаВИБ).TypeName;
	СтруктураОбъекта=Новый Структура("ТипЗначения, Значение", ТипЗначения, РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ОбъектСсылкаВИБ));
	
	Возврат СтруктураОбъекта;
			
КонецФункции // ПолучитьДанныеОбъектаВИБ()

&НаКлиенте
Процедура ПослеВводаФиксированногоЗначения(ВыбранноеЗначение, Параметры) Экспорт
	
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение=ВыбранноеЗначение;
	ПредставлениеАналитики=Строка(ВыбранноеЗначение);
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ПсевдонимБД=ПредставлениеАналитики;
	Элементы.ТаблицаСоответствия.ТекущиеДанные.Сопоставлено=Истина;
	Элементы.ТаблицаСоответствия.ТекущиеДанные.НеИспользоватьДляСинхронизации=Истина;
		
	Модифицированность=Истина;
		
КонецПроцедуры // ПослеВводаФиксированногоЗначения()

&НаСервереБезКонтекста
Функция НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес, ИмяТаблицыОбъекта, КолонкаТаблицыОбъекта, ИскомоеЗначение)
	
	РабочийОбъект=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	
	СтрокаТаблицы=РабочийОбъект[ИмяТаблицыОбъекта].Найти(ИскомоеЗначение,КолонкаТаблицыОбъекта);
	
	Если СтрокаТаблицы=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		СтруктураСтрока=Новый Структура;
		
		Для Каждого Колонка ИЗ РабочийОбъект[ИмяТаблицыОбъекта].Колонки Цикл
			
			СтруктураСтрока.Вставить(Колонка.Имя,СтрокаТаблицы[Колонка.Имя]);
			
		КонецЦикла;
		
		Возврат СтруктураСтрока;
		
	КонецЕсли;
				
КонецФункции // НайтиСтрокуТаблицыОбъекта()

&НаСервере
Процедура ОбновитьТаблицуСвязанныхНастроек(АдресТаблицыСоответствия);
	
	ТаблицаСоответствияНов=ПолучитьИзВременногоХранилища(АдресТаблицыСоответствия);
	
	Объект.СоответствияСвязанныхОбъектов.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаСоответствияНов Цикл
		
		НоваяСтрока=Объект.СоответствияСвязанныхОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	
КонецПРоцедуры // ОбновитьТаблицуСвязанныхНастроек() 

&НаСервере
Функция ПолучитьСтруктуруНастроекСвязанныхОбъектов()
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("АдресТекТаблицыСоответствия",		ПоместитьВоВременноеХранилище(Объект.СоответствияСвязанныхОбъектов.Выгрузить(),ЭтаФорма.УникальныйИдентификатор));
	СтруктураПараметров.Вставить("ИдентификаторРодителя",			ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("НастройкаСоответствияРодитель",	Объект.Ссылка);
	СтруктураПараметров.Вставить("ОписаниеОбъектаВИБ",				Объект.ОписаниеОбъектаВИБ);
	СтруктураПараметров.Вставить("ОписаниеОбъектаТек",				Объект.ОписаниеОбъектаТек);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруНастроекСвязанныхОбъектов() 

&НаКлиенте
Процедура ОткрытьФормуСвязанных()

	ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.Форма.ФормаСвязанныеОбъекты",
			ПолучитьСтруктуруНастроекСвязанныхОбъектов(), ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Записать(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Записан = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОтветНаВопрос = Истина;
		Записан = ЭтотОбъект.Записать();
		ОтветНаВопрос = Неопределено;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Записан И ДополнительныеПараметры.Свойство("ОткрытьФормуСвязанных") Тогда
		ОткрытьФормуСвязанных();
	КонецЕсли;
	
	Если (Записан Или Результат = КодВозвратаДиалога.Нет) 
		И ДополнительныеПараметры.Свойство("ЗакрытьФорму") Тогда
		
		ОтветНаВопрос = Истина;
		ЭтотОбъект.Закрыть();
		ОтветНаВопрос = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

