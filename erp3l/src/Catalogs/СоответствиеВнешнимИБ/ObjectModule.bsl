
Перем ТаблицаРеквизитовКонсолидации;
Перем ТаблицаРеквизитовВИБ;
Перем ТекТаблицаСинхронизации;
Перем База;

////////////////////////////////////////////////////////////////////

Перем мТаблицаСоответствия Экспорт;
Перем мТаблицаПоказателейБД Экспорт;         // Список аналитик плана счетов внешней информационной базы.
Перем мТаблицаПроизводныхБД Экспорт;         // Список полей, являющихся производными от основных аналитик
Перем Используется77; // Признак использования обращения к ВИБ на платформе 7.7
Перем ТекСоединениеВИБ;

// Описания типов
Перем мОписаниеТиповСтрока Экспорт;
Перем мОписаниеТиповБулево Экспорт;
Перем мОписаниеТиповТЗ Экспорт;
Перем мОписаниеТиповСписокЗначений Экспорт;
Перем мТаблицаВозможныхПолей Экспорт;
Перем мМодифицированность Экспорт;
Перем мТабличноеПолеИзмеренийБД Экспорт;

Перем МассивОбновленных Экспорт; // Используется для предотвращения зацикливания при каскадном обновлении настроек соответствия
Перем ТаблицаПереходов; // Используется для предотвращения зацикливания при каскадном разыменовании реквизитов

Перем АдресХранилищаПеременныхДляРасчета Экспорт;

Функция Использование77(ОбновитьИспользование=Ложь) Экспорт
	
	Если Используется77 = Неопределено ИЛИ ОбновитьИспользование Тогда
		
		Используется77=(Владелец.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);
	КонецЕсли;
	
	Возврат Используется77;
	
КонецФункции

Функция СоответствиеПеречислений() Экспорт
	
	ТекТаблицаАналитики=ОпределитьТаблицуАналитики(ЭтотОбъект);
	
	Возврат ТипОбъектаВИБ="Перечисление" И СтрНайти(ТекТаблицаАналитики,"Перечисление.")>0;
	
КонецФункции // СоответствиеПеречислений() 

Функция ЗаполнитьДеревоПоОбъектуВИБ() Экспорт
	
	Если ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.РегистрыСведенийБД") Тогда
		
		Возврат ЗаполнитьДеревоПоРегиструВИБ();
		
	КонецЕсли;
	
	ЛокальноеДерево = Новый ДеревоЗначений;
	ЛокальноеДерево.Колонки.Добавить("НаименованиеБД"		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("АналитикаБД"			, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("СправочникБД"   		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипМетаДанных" 		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипЗначения"			, мОписаниеТиповСписокЗначений);
	ЛокальноеДерево.Колонки.Добавить("ИспользуетсяВСопоставлении", мОписаниеТиповБулево);
	ЛокальноеДерево.Колонки.Добавить("ПримитивныйТип", 		мОписаниеТиповБулево);
	ЛокальноеДерево.Колонки.Добавить("ОписаниеПримитивногоТипаИсточник", мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ИспользованиеВИБ",    ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	
	ТаблицаВИБ=мТаблицаПоказателейБД.Скопировать();
	СписокПримитивных 	= ТаблицаВИБ.НайтиСтроки(Новый Структура("ПримитивныйТип", Истина));
	СписокСсылочных 	= ТаблицаВИБ.НайтиСтроки(Новый Структура("ПримитивныйТип", Ложь));
	
	ПримитивныеСсылочные=(СписокПримитивных.Количество()>0 И СписокСсылочных.Количество()>0);
	
	Если СписокПримитивных.Количество()>0 Тогда
		
		Если ПримитивныеСсылочные Тогда 
			
			ОбъектДобавления= ЛокальноеДерево.Строки.Добавить();
			ОбъектДобавления.НаименованиеБД = ?(СоответствиеПеречислений(),Нстр("ru = 'Значения перечисления'"),Нстр("ru = 'Примитивные реквизиты'"));
			
		Иначе
			
			ОбъектДобавления=ЛокальноеДерево;
			
		КонецЕсли;
		
		Инд = 0;
		Для Каждого Элемент Из СписокПримитивных Цикл
			
			Соответствие = мТаблицаСоответствия.Строки.Найти(Элемент.НаименованиеБД, "ПсевдонимБД",Истина);
			ЕстьСоответствие = Истина;
			Если Соответствие = Неопределено Тогда
				ЕстьСоответствие = Ложь;
			Иначе
				ЕстьСоответствие = НЕ ПустаяСтрока(Соответствие.ПсевдонимКонсолидации);
			КонецЕсли;
			
			Если Не ЕстьСоответствие Тогда
				Инд = Инд + 1;
			КонецЕсли;
			
			ТекущаяСтрока                            	= ОбъектДобавления.Строки.Добавить();
			ТекущаяСтрока.НаименованиеБД            	= Элемент.НаименованиеБД;
			ТекущаяСтрока.СправочникБД              	= Элемент.СправочникБД;
			ТекущаяСтрока.ТипМетаДанных              	= Элемент.ТипМетаДанных;
			ТекущаяСтрока.АналитикаБД               	= Элемент.ПолеБД;
			ТекущаяСтрока.ТипЗначения				 	= Элемент.ТипЗначения;
			ТекущаяСтрока.ИспользуетсяВСопоставлении 	= ЕстьСоответствие;
			ТекущаяСтрока.ПримитивныйТип			 	= Истина;
			ТекущаяСтрока.ОписаниеПримитивногоТипаИсточник=Элемент.ОписаниеПримитивногоТипаИсточник;
			ТекущаяСтрока.ИспользованиеВИБ           	= Элемент.Использование;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если Использование77()
		ИЛИ ТипОбъектаВИБ="Перечисление" 
		ИЛИ ТипОбъектаВИБ="ПланСчетов" Тогда // Синхронизация по ссылочным типам поддерживается только для платформ 8.х
		
		Возврат ЛокальноеДерево;

	КонецЕсли;	
		
	Если СписокСсылочных.Количество()>0 Тогда
		
		Если ПримитивныеСсылочные Тогда 
			
			ОбъектДобавления = ЛокальноеДерево.Строки.Добавить();
			ОбъектДобавления.НаименованиеБД = Нстр("ru = 'Ссылочные реквизиты'");
			
		Иначе
			
			ОбъектДобавления=ЛокальноеДерево;
			
		КонецЕсли;
		
		Инд = 0;
		Для Каждого Элемент Из СписокСсылочных Цикл
			
			Соответствие = мТаблицаСоответствия.Строки.Найти(Элемент.НаименованиеБД, "ПсевдонимБД",Истина);
			ЕстьСоответствие = Истина;
			Если Соответствие = Неопределено Тогда
				ЕстьСоответствие = Ложь;
			Иначе
				ЕстьСоответствие = НЕ ПустаяСтрока(Соответствие.ПсевдонимКонсолидации);
			КонецЕсли;
			
			Если Не ЕстьСоответствие Тогда
				Инд = Инд + 1;
			КонецЕсли;
			
			ТекущаяСтрока                            	= ОбъектДобавления.Строки.Добавить();
			ТекущаяСтрока.НаименованиеБД            	= Элемент.НаименованиеБД;
			ТекущаяСтрока.СправочникБД              	= Элемент.СправочникБД;
			ТекущаяСтрока.ТипМетаДанных              	= Элемент.ТипМетаДанных;
			ТекущаяСтрока.АналитикаБД               	= Элемент.ПолеБД;
			ТекущаяСтрока.ТипЗначения				 	= Элемент.ТипЗначения;
			ТекущаяСтрока.ИспользуетсяВСопоставлении 	= ЕстьСоответствие;
			ТекущаяСтрока.ПримитивныйТип			 	= Ложь;
			ТекущаяСтрока.ИспользованиеВИБ           	= Элемент.Использование;
			
			// Добавим строку для раскпытия данных составного типа
			
			Если ТекущаяСтрока.ТипЗначения.Количество()>1 Тогда 
								
				НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Возврат ЛокальноеДерево;
	
КонецФункции // ЗаполнитьДеревоПоРегиструНакопления()

Процедура ДобавитьСтрокиРеквизитов(ТаблицаВИБ,СтрокаДерева,ТипПоля)
		
	СписокПримитивных = ТаблицаВИБ.НайтиСтроки(Новый Структура("ПримитивныйТип,ТипПоля", Истина,ТипПоля));
	СписокСсылочных = ТаблицаВИБ.НайтиСтроки(Новый Структура("ПримитивныйТип,ТипПоля", Ложь,ТипПоля));
		
	ПримитивныеСсылочные=(СписокПримитивных.Количество()>0 И СписокСсылочных.Количество()>0);
			
	Если СписокПримитивных.Количество()>0 Тогда
		
		Если ПримитивныеСсылочные Тогда
			
			ОбъектДобавления = СтрокаДерева.Строки.Добавить();
			ОбъектДобавления.НаименованиеБД = Нстр("ru = 'Примитивные реквизиты'");
						
		Иначе
			
			ОбъектДобавления=СтрокаДерева;
			
		КонецЕсли;
		
		Инд = 0;
		Для Каждого Элемент Из СписокПримитивных Цикл
			
			Соответствие = мТаблицаСоответствия.Строки.Найти(Элемент.НаименованиеБД, "ПсевдонимБД",Истина);
			ЕстьСоответствие = Истина;
			Если Соответствие = Неопределено Тогда
				ЕстьСоответствие = Ложь;
			Иначе
				ЕстьСоответствие = НЕ ПустаяСтрока(Соответствие.ПсевдонимКонсолидации);
			КонецЕсли;
			
			Если Не ЕстьСоответствие Тогда
				Инд = Инд + 1;
			КонецЕсли;
			
			ТекущаяСтрока                            	= ОбъектДобавления.Строки.Добавить();
			ТекущаяСтрока.НаименованиеБД            	= Элемент.НаименованиеБД;
			ТекущаяСтрока.СправочникБД              	= Элемент.СправочникБД;
			ТекущаяСтрока.ТипМетаДанных              	= Элемент.ТипМетаДанных;
			ТекущаяСтрока.АналитикаБД               	= Элемент.ПолеБД;
			ТекущаяСтрока.ТипЗначения				 	= Элемент.ТипЗначения;
			ТекущаяСтрока.ИспользуетсяВСопоставлении 	= ЕстьСоответствие;
			ТекущаяСтрока.ПримитивныйТип			 	= Истина;
			ТекущаяСтрока.ОписаниеПримитивногоТипаИсточник=Элемент.ОписаниеПримитивногоТипаИсточник;
			ТекущаяСтрока.ИспользованиеВИБ           	= Элемент.Использование;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если СписокСсылочных.Количество()>0 Тогда
		
		Если ПримитивныеСсылочные Тогда
			
			ОбъектДобавления = СтрокаДерева.Строки.Добавить();
			ОбъектДобавления.НаименованиеБД = Нстр("ru = 'Ссылочные реквизиты'");
			
		Иначе
			
			ОбъектДобавления=СтрокаДерева;
			
		КонецЕсли;
		
		Инд = 0;
		Для Каждого Элемент Из СписокСсылочных Цикл
			
			Если ТипПоля="Измерение" И ЗначениеЗаполнено(ИзмерениеРегистраВИБ) И Элемент.ПолеБД=ИзмерениеРегистраВИБ Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Соответствие = мТаблицаСоответствия.Строки.Найти(Элемент.НаименованиеБД, "ПсевдонимБД",Истина);
			ЕстьСоответствие = Истина;
			Если Соответствие = Неопределено Тогда
				ЕстьСоответствие = Ложь;
			Иначе
				ЕстьСоответствие = НЕ ПустаяСтрока(Соответствие.ПсевдонимКонсолидации);
			КонецЕсли;
			
			Если Не ЕстьСоответствие Тогда
				Инд = Инд + 1;
			КонецЕсли;
			
			ТекущаяСтрока                           	= ОбъектДобавления.Строки.Добавить();
			ТекущаяСтрока.НаименованиеБД            	= Элемент.НаименованиеБД;
			ТекущаяСтрока.СправочникБД              	= Элемент.СправочникБД;
			ТекущаяСтрока.ТипМетаДанных             	= Элемент.ТипМетаДанных;
			ТекущаяСтрока.АналитикаБД               	= Элемент.ПолеБД;
			ТекущаяСтрока.ТипЗначения				 	= Элемент.ТипЗначения;
			ТекущаяСтрока.ИспользуетсяВСопоставлении 	= ЕстьСоответствие;
			ТекущаяСтрока.ПримитивныйТип			 	= Ложь;
			ТекущаяСтрока.ИспользованиеВИБ           	= Элемент.Использование;
						
			Если ТекущаяСтрока.ТипЗначения.Количество()>1 Тогда 
				
				// Добавим строку для раскрытия данных составного типа
				
				НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры // ДобавитьСтрокиРеквизитов() 

Функция ЗаполнитьДеревоПоРегиструВИБ() Экспорт
	
	ЛокальноеДерево = Новый ДеревоЗначений;
	ЛокальноеДерево.Колонки.Добавить("НаименованиеБД"		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("АналитикаБД"			, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("СправочникБД"   		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипМетаДанных" 		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипЗначения"			, мОписаниеТиповСписокЗначений);
	ЛокальноеДерево.Колонки.Добавить("ИспользуетсяВСопоставлении", мОписаниеТиповБулево);
	ЛокальноеДерево.Колонки.Добавить("ПримитивныйТип", 		мОписаниеТиповБулево);
	ЛокальноеДерево.Колонки.Добавить("ОписаниеПримитивногоТипаИсточник", мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ИспользованиеВИБ",    ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	
	ТаблицаВИБ=мТаблицаПоказателейБД.Скопировать();
	
	СтрокаИзмерения=ЛокальноеДерево.Строки.Добавить();
	СтрокаИзмерения.НаименованиеБД=Нстр("ru = 'Измерения'");
	ДобавитьСтрокиРеквизитов(ТаблицаВИБ,СтрокаИзмерения,"Измерение");
	
	СтрокаРесурс=ЛокальноеДерево.Строки.Добавить();
	СтрокаРесурс.НаименованиеБД=Нстр("ru = 'Ресурсы'");
	ДобавитьСтрокиРеквизитов(ТаблицаВИБ,СтрокаРесурс,"Ресурс");
	
	СтрокаРеквизит=ЛокальноеДерево.Строки.Добавить();
	СтрокаРеквизит.НаименованиеБД=Нстр("ru = 'Реквизиты'");
	ДобавитьСтрокиРеквизитов(ТаблицаВИБ,СтрокаРеквизит,"Реквизит");
		
	Возврат ЛокальноеДерево;
	
КонецФункции // ЗаполнитьДеревоПоРегиструВИБ()

Процедура ЗаполнитьСписокПолей() Экспорт
							
	ОписаниеОбъектаНов=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,ТипОбъектаКонсолидации,ИмяОбъектаМетаданных,Справочники.ТипыБазДанных.ТекущаяИБ,Ложь);	
	
	Если НЕ ОписаниеОбъектаНов=ОписаниеОбъектаТек Тогда
		
		ОписаниеОбъектаТек=ОписаниеОбъектаНов;
		
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.РегистрыСведенийБД") 
		ИЛИ ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.ТабличныеЧастиБД")
		ИЛИ ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.ПланыВидовХарактеристикБД")
		ИЛИ ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.СправочникиБД") Тогда
		
		мТаблицаВозможныхПолей=ЗаполнитьСписокПолейПоОписанию();
		
	Иначе
		
		мТаблицаВозможныхПолей=Справочники.СоответствиеВнешнимИБ.ЗаполнитьСписокПолей(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных,Использование77(),ТипОбъектаВИБ);
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСписокПолей()

Функция ЗаполнитьСписокПолейПоОписанию()
	
	мТаблицаВозможныхПолей=Новый ТаблицаЗначений;
	мТаблицаВозможныхПолей.Колонки.Добавить("Поле");
	мТаблицаВозможныхПолей.Колонки.Добавить("Синоним");
	мТаблицаВозможныхПолей.Колонки.Добавить("ТипДанныхПоля",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	мТаблицаВозможныхПолей.Колонки.Добавить("ПримитивныйТип",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево()); 
	мТаблицаВозможныхПолей.Колонки.Добавить("ТипОбъектаКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	мТаблицаВозможныхПолей.Колонки.Добавить("ОписаниеПримитивногоТипаПриемник",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	мТаблицаВозможныхПолей.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	мТаблицаВозможныхПолей.Колонки.Добавить("ТипПоля",   		мОписаниеТиповСтрока);

	мТаблицаВозможныхПолей.Колонки.Добавить("Использование",    ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(155, ДопустимаяДлина.Переменная);
	мТаблицаВозможныхПолей.Колонки.Добавить("ИмяОбъектаМетаданных",Новый ОписаниеТипов(Массив, , КвалификаторСтроки));
	
	ТекТаблицаОписания=мТаблицаПоказателейБД.СкопироватьКолонки();
	
	Если ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.РегистрыСведенийБД") Тогда
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаТек.Измерения Цикл
			
			СтрокаПоказателей                 	= ТекТаблицаОписания.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.Измерение         = Истина;
			СтрокаПоказателей.ТипПоля			= "Измерение";
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаТек.Ресурсы Цикл
			
			СтрокаПоказателей                 	= ТекТаблицаОписания.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.ТипПоля			= "Ресурс";
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаТек.Реквизиты Цикл
			
			СтрокаПоказателей                 	= ТекТаблицаОписания.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.ТипПоля			= "Реквизит";
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
				
	Иначе
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаТек.Реквизиты Цикл
			
			СтрокаПоказателей                 					= ТекТаблицаОписания.Добавить();
			СтрокаПоказателей.ПолеБД         					= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 					= СтрИзмерение.Синоним;
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТекТаблицаОписания Цикл
		
		НоваяСтрока=мТаблицаВозможныхПолей.Добавить();
		НоваяСтрока.Поле=Строка.ПолеБД;
		НоваяСтрока.Синоним=Строка.НаименованиеБД;
		НоваяСтрока.ТипДанныхПоля=Строка.ТипЗначения;
		НоваяСтрока.ПримитивныйТип=Строка.ПримитивныйТип;
		НоваяСтрока.ТипОбъектаКонсолидации=Строка.ТипМетаДанных;
		НоваяСтрока.ТипПоля=Строка.ТипПоля;
		НоваяСтрока.ОписаниеПримитивногоТипаПриемник=Строка.ОписаниеПримитивногоТипаИсточник;
		НоваяСтрока.ИмяОбъектаМетаданных=Строка.СправочникБД;
		
		Если НЕ НоваяСтрока.ПримитивныйТип И НоваяСтрока.ТипДанныхПоля.Количество()=1 Тогда
			
			НоваяСтрока.ТаблицаАналитики=НоваяСтрока.ТипДанныхПоля[0].Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат мТаблицаВозможныхПолей; 
				
КонецФункции // ЗаполнитьСписокПолейПоОписанию() 

// Функция определяет сопоставленные на данный момент аналитики консолидации и внешней информационной базы,
// определяет идентичные по названию аналитики и пытается их сопоставить.
// Параметры:
//  СводнаяТаблицаПоказателей - ТаблицаЗначений, Ссылка на ТаблицуСоответствий, в которой хранятся текущие сопоставления.
//                              Если Неопределено, таблица создается заново, иначе используются существующие данные.
//  Общий          - Булево, определяет, будет ли обновляться таблица для всех аналитик(Истина) или только для конкретного счета(Ложь).
//  Дебетовый      - Булево, определяет, аналитику какого счета обновлять. Используется, только если параметр Общий = Ложь.
Функция СформироватьТаблицуСоответствияБД(ЗаполнятьПримитивные=Ложь) Экспорт
	
	Если мТаблицаПоказателейБД.Количество()=0 Тогда
		
		ЗаполнитьРеквизитыОбъектаВИБ();
		
	КонецЕсли;
	
	ИнициализироватьТаблицуСоответствия();
	
	Если ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.РегистрыСведенийБД") Тогда
		
		Возврат СформироватьТаблицуСоответствияБДПоРегистру();
		
	КонецЕсли;
		
	ТаблицаВИБ = мТаблицаПоказателейБД.Скопировать();		
				
	///////////////////////////////////////////////////////////////////////////////
	// Получим настройки сопоставления для примитивных типов
	
	МассивПримитивные=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ПримитивныйТип",Истина));
	МассивСсылочные=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ПримитивныйТип",Ложь));

	ПримитивныеСсылочные=(МассивПримитивные.Количество()>0 И МассивСсылочные.Количество()>0);
	
	Если МассивПримитивные.Количество()>0 Тогда
		
		Если ПримитивныеСсылочные Тогда
			
			ОбъектДобавления=мТаблицаСоответствия.Строки.Добавить();
			ОбъектДобавления.ПсевдонимКонсолидации=?(СоответствиеПеречислений(),Нстр("ru = 'Значения перечисления'"),Нстр("ru = 'Примитивные реквизиты'"));
			
		Иначе
			
			ОбъектДобавления=мТаблицаСоответствия;
			
		КонецЕсли;
		
		Для Каждого СтрРеквизит ИЗ МассивПримитивные Цикл
			
			НоваяСтрока=ОбъектДобавления.Строки.Добавить();
			НоваяСтрока.АналитикаКонсолидации			=СтрРеквизит.Поле;
			НоваяСтрока.ПсевдонимКонсолидации			=СтрРеквизит.Синоним;
			НоваяСтрока.ИспользованиеКонсолидация		=СтрРеквизит.Использование;
			НоваяСтрока.ОписаниеПримитивногоТипаПриемник=СтрРеквизит.ОписаниеПримитивногоТипаПриемник;
			НоваяСтрока.ПримитивныйТип=Истина;
			
			Если ТипОбъектаКонсолидации="ПланСчетов" Тогда
				
				ПолеДляПоиска="Код";
				
			ИначеЕсли ТипОбъектаКонсолидации="Перечисление" Тогда
				
				ПолеДляПоиска=СтрРеквизит.Поле;
				
			Иначе
				
				Если СтрРеквизит.Поле="Код" Тогда
					Продолжить;
				ИначеЕсли СтрРеквизит.Поле="КодДляСинхронизации" Тогда
					ПолеДляПоиска="Код";
				Иначе
					ПолеДляПоиска=СтрРеквизит.Поле;
				КонецЕсли;				
				
			КонецЕсли;
				
			Если ЗаполнятьПримитивные Тогда
				
				СтрРеквизитыВИБ=ТаблицаВИБ.НайтиСтроки(Новый Структура("ПолеБД,ПримитивныйТип",ПолеДляПоиска,Истина));
				
				Если СтрРеквизитыВИБ.Количество()>0 Тогда
					
					Если ПустаяСтрока(ОбщегоНазначенияУХ.ПроверитьВозможностьУстановкиСоответствия(СтрРеквизитыВИБ[0].ОписаниеПримитивногоТипаИсточник,НоваяСтрока.ОписаниеПримитивногоТипаПриемник)) Тогда
						
						НоваяСтрока.АналитикаБД=СтрРеквизитыВИБ[0].ПолеБД;
						НоваяСтрока.ПсевдонимБД=СтрРеквизитыВИБ[0].НаименованиеБД;
						НоваяСтрока.ИспользованиеВИБ=СтрРеквизитыВИБ[0].Использование;
						НоваяСтрока.Сопоставлено=Истина;
						НоваяСтрока.НеИспользоватьДляСинхронизации=Истина;
						НоваяСтрока.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектДобавления.Строки.Сортировать("АналитикаКонсолидации Возр");
		
	КонецЕсли;
		
	Если Использование77() 
		ИЛИ ТипОбъектаКонсолидации="Перечисление" 
		ИЛИ ТипОбъектаКонсолидации="ПланСчетов"
		ИЛИ МассивСсылочные.Количество()=0 Тогда 
		
		Возврат мТаблицаСоответствия;
		
	КонецЕсли;
	
	Если ПримитивныеСсылочные Тогда
		
		ОбъектДобавления=мТаблицаСоответствия.Строки.Добавить();
		ОбъектДобавления.ПсевдонимКонсолидации=Нстр("ru = 'Ссылочные реквизиты'");
		
	Иначе
		
		ОбъектДобавления=мТаблицаСоответствия;
		
	КонецЕсли;
			
	// Получим текущие настройки соответствия объектов
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабНастройкиСоответствия.ИмяОбъектаМетаданных,
	|	ТабНастройкиСоответствия.ТипОбъектаКонсолидации
	|ПОМЕСТИТЬ ТабНастройкиСоответствия
	|ИЗ
	|	&ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	|ГДЕ
	|	(НЕ ТабНастройкиСоответствия.ПримитивныйТип)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНастройкиСоответствия.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|	ТабНастройкиСоответствия.ТипОбъектаКонсолидации,
	|	СоответствиеВнешнимИБ.Ссылка КАК НастройкаСоответствия,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК ИмяОбъектаВнешнейИБ
	|ИЗ
	|	ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО ТабНастройкиСоответствия.ИмяОбъектаМетаданных = СоответствиеВнешнимИБ.ИмяОбъектаМетаданных
	|			И ТабНастройкиСоответствия.ТипОбъектаКонсолидации = СоответствиеВнешнимИБ.ТипОбъектаКонсолидации
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяОбъектаМетаданных";
	
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("ТабНастройкиСоответствия",мТаблицаВозможныхПолей);
		
	Выгрузка = Запрос.Выполнить().Выбрать();
	
	Пока Выгрузка.Следующий() Цикл
		
		ОбъектКонсолидации = мТаблицаВозможныхПолей.Найти(Выгрузка.ИмяОбъектаМетаДанных,"ИмяОбъектаМетаДанных");
				
		Если ОбъектКонсолидации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы      = мТаблицаСоответствия.Строки.Найти(ОбъектКонсолидации.Поле, "АналитикаКонсолидации",Истина);
		
		ОбъектыВИБ         = ТаблицаВИБ.НайтиСтроки(Новый Структура("СправочникБД", Выгрузка.ИмяОбъектаВнешнейИБ));
		
		Если ОбъектыВИБ.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Элемент = ОбъектыВИБ[0];
		
		Если СтрокаТаблицы=Неопределено Тогда
			
			СтрокаТаблицы                               = ОбъектДобавления.Строки.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации         = ОбъектКонсолидации.Поле;
			СтрокаТаблицы.ПсевдонимКонсолидации         = ОбъектКонсолидации.Синоним;
			СтрокаТаблицы.ИспользованиеКонсолидация     = ОбъектКонсолидации.Использование;
			СтрокаТаблицы.ИспользованиеВИБ			    = Элемент.Использование;

			СтрокаТаблицы.АналитикаБД                  = Элемент.ПолеБД;
			СтрокаТаблицы.ПсевдонимБД                  = Элемент.НаименованиеБД;
			СтрокаТаблицы.СправочникБД                 = Элемент.СправочникБД;
			СтрокаТаблицы.ТипМетаДанных              	= Элемент.ТипМетаДанных;
			
			Если ОбъектКонсолидации.ТипОбъектаКонсолидации="ВидСубконто" Тогда
				
				СтрокаТаблицы.ВидСубконто                   = ОбъектКонсолидации.ИмяОбъектаМетаданных;
				
			Иначе
				
				СтрокаТаблицы.СправочникКонсолидации        = ОбъектКонсолидации.ИмяОбъектаМетаданных;
				СтрокаТаблицы.ТипОбъектаКонсолидации		= ОбъектКонсолидации.ТипОбъектаКонсолидации;
				
			КонецЕсли;
			
			СтрокаТаблицы.ПримитивныйТип                = ЛОЖЬ;
			СтрокаТаблицы.Сопоставлено                  = Истина;
			СтрокаТаблицы.НастройкаСоответствия			= Выгрузка.НастройкаСоответствия;
			СтрокаТаблицы.ПолеЗапроса                   = Элемент.ПолеЗапроса;
			СтрокаТаблицы.НеИспользоватьДляСинхронизации= Истина;
			СтрокаТаблицы.Ключевой						= Ложь;
			СтрокаТаблицы.СпособЗаполнения				= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
			
		Иначе
			
			Если ПустаяСтрока(СтрокаТаблицы.АналитикаБД) Тогда
				
				СтрокаТаблицы.АналитикаБД                    	= Элемент.ПолеБД;
				СтрокаТаблицы.ПсевдонимБД                    	= Элемент.НаименованиеБД;
				СтрокаТаблицы.СправочникБД                   	= Элемент.СправочникБД;
				СтрокаТаблицы.ИспользованиеВИБ			      	= Элемент.Использование;
				СтрокаТаблицы.ТипМетаДанных                	  	= Элемент.ТипМетаДанных;
				СтрокаТаблицы.ПримитивныйТип                  	= ЛОЖЬ;
				СтрокаТаблицы.Дебетовый                       	= Элемент.Дебетовый; 
				СтрокаТаблицы.Сопоставлено                    	= Истина;
				СтрокаТаблицы.НастройкаСоответствия			  	= Выгрузка.НастройкаСоответствия;
				СтрокаТаблицы.НеИспользоватьДляСинхронизации  	= Истина;
				СтрокаТаблицы.Ключевой							= Ложь;
				СтрокаТаблицы.СпособЗаполнения					= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Поле Из МассивСсылочные Цикл
		
		Если мТаблицаСоответствия.Строки.Найти(Поле.Поле, "АналитикаКонсолидации",Истина)=Неопределено Тогда
			
			СтрокаТаблицы                       = ОбъектДобавления.Строки.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации = Поле.Поле;
			
			Если Поле.ТипДанныхПоля.Количество()=1 Тогда
				
				СтрокаТаблицы.ПсевдонимКонсолидации = Поле.Синоним;
				СтрокаТаблицы.ИспользованиеКонсолидация = Поле.Использование;
				
				Если Поле.ТипОбъектаКонсолидации="ВидСубконто" Тогда
					
					СтрокаТаблицы.ВидСубконто                   = Поле.ИмяОбъектаМетаданных;
					
				Иначе
					
					СтрокаТаблицы.СправочникКонсолидации        = Поле.ИмяОбъектаМетаданных;
					СтрокаТаблицы.ТипОбъектаКонсолидации		= Поле.ТипОбъектаКонсолидации;
					
				КонецЕсли;
				
				СтрокаТаблицы.Сопоставлено          = Ложь;
				СтрокаТаблицы.ПримитивныйТип        = ЛОЖЬ;
				
			Иначе
				
				СтрокаТаблицы.ПсевдонимКонсолидации=Поле.Синоним;
				
				Для Каждого СтрТип ИЗ Поле.ТипДанныхПоля Цикл
					
					ТаблицаАналитики=?(ТипЗнч(СтрТип.Значение)=Тип("Строка"),СтрТип.Значение,Метаданные.НайтиПоТипу(СтрТип.Значение).ПолноеИмя());
					ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
					
					Если ДанныеСинхронизации.Количество()=2 Тогда
						
						СтрокаТип=СтрокаТаблицы.Строки.Добавить();
						
						СтрокаТип.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
						СтрокаТип.СправочникКонсолидации=ДанныеСинхронизации[1];
						
						СтрокаТип.АналитикаКонсолидации = Поле.Поле;
						СтрокаТип.ПсевдонимКонсолидации = Поле.Синоним+" ("+СтрокаТип.СправочникКонсолидации+")";
						
						СтрокаТип.ИспользованиеКонсолидация = Поле.Использование;
						
						СтрокаТип.Сопоставлено          = Ложь;
						СтрокаТип.ПримитивныйТип        = ЛОЖЬ;
					
					ИначеЕсли ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрТип.Значение) Тогда
						
						СтрокаТип=СтрокаТаблицы.Строки.Добавить();
						СтрокаТип.АналитикаКонсолидации 	= Поле.Поле;
						СтрокаТип.ПсевдонимКонсолидации 	= Поле.Синоним+" ("+СтрТип.Значение+")";
						СтрокаТип.ПримитивныйТип        	= Истина;
						СтрокаТип.ИспользованиеКонсолидация = Поле.Использование;
						СтрокаТип.ОписаниеПримитивногоТипаПриемник=СтрТип.Значение;
				
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектДобавления.Строки.Сортировать("АналитикаКонсолидации Возр");
	
	Возврат мТаблицаСоответствия;
	
КонецФункции

Процедура ДобавитьСтрокиСоответствияРегистр(ТаблицаВИБ,СтрокаРодитель,ТипПоля)
	
	///////////////////////////////////////////////////////////////////////////////
	// Получим настройки сопоставления для примитивных типов
	
	МассивПримитивные=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ПримитивныйТип,ТипПоля",Истина,ТипПоля));
	МассивСсылочные=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ПримитивныйТип,ТипПоля",Ложь,ТипПоля));
	
	ПримитивныеСсылочные=(МассивПримитивные.Количество()>0 И МассивСсылочные.Количество()>0);
	
	Если МассивПримитивные.Количество()>0 Тогда
		
		Если ПримитивныеСсылочные Тогда
			
			ОбъектДобавления=СтрокаРодитель.Строки.Добавить();
			ОбъектДобавления.ПсевдонимКонсолидации=Нстр("ru = 'Примитивные реквизиты'");
			
		Иначе
			
			ОбъектДобавления=СтрокаРодитель;
			
		КонецЕсли;
		
		Для Каждого СтрРеквизит ИЗ МассивПримитивные Цикл
			
			НоваяСтрока=ОбъектДобавления.Строки.Добавить();
			НоваяСтрока.АналитикаКонсолидации			=СтрРеквизит.Поле;
			НоваяСтрока.ПсевдонимКонсолидации			=СтрРеквизит.Синоним;
			НоваяСтрока.ИспользованиеКонсолидация		=СтрРеквизит.Использование;
			НоваяСтрока.ОписаниеПримитивногоТипаПриемник=СтрРеквизит.ОписаниеПримитивногоТипаПриемник;
			НоваяСтрока.ПримитивныйТип=Истина;
				
			Если СтрРеквизит.Поле="Код" Тогда
				Продолжить;
			ИначеЕсли СтрРеквизит.Поле="КодДляСинхронизации" Тогда
				ПолеДляПоиска="Код";
			Иначе
				ПолеДляПоиска=СтрРеквизит.Поле;
			КонецЕсли;				
			
			СтрРеквизитыВИБ=ТаблицаВИБ.НайтиСтроки(Новый Структура("ПолеБД,ПримитивныйТип",ПолеДляПоиска,Истина));
			
			Если СтрРеквизитыВИБ.Количество()>0 Тогда
				
				Если ПустаяСтрока(ОбщегоНазначенияУХ.ПроверитьВозможностьУстановкиСоответствия(СтрРеквизитыВИБ[0].ОписаниеПримитивногоТипаИсточник,НоваяСтрока.ОписаниеПримитивногоТипаПриемник)) Тогда
					
					НоваяСтрока.АналитикаБД=СтрРеквизитыВИБ[0].ПолеБД;
					НоваяСтрока.ПсевдонимБД=СтрРеквизитыВИБ[0].НаименованиеБД;
					НоваяСтрока.ИспользованиеВИБ=СтрРеквизитыВИБ[0].Использование;
					НоваяСтрока.Сопоставлено=Истина;
					НоваяСтрока.НеИспользоватьДляСинхронизации=Истина;
					НоваяСтрока.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектДобавления.Строки.Сортировать("АналитикаКонсолидации Возр");
		
	КонецЕсли;
		
	Если МассивСсылочные.Количество()=0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если ПримитивныеСсылочные Тогда
		
		ОбъектДобавления=СтрокаРодитель.Строки.Добавить();
		ОбъектДобавления.ПсевдонимКонсолидации=Нстр("ru = 'Ссылочные реквизиты'");
		
	Иначе
		
		ОбъектДобавления=СтрокаРодитель;
		
	КонецЕсли;
	
	// Получим текущие настройки соответствия объектов
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабНастройкиСоответствия.ИмяОбъектаМетаданных,
	|	ТабНастройкиСоответствия.ТипОбъектаКонсолидации
	|ПОМЕСТИТЬ ТабНастройкиСоответствия
	|ИЗ
	|	&ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	|ГДЕ
	|	(НЕ ТабНастройкиСоответствия.ПримитивныйТип) И ТабНастройкиСоответствия.ТипПоля=&ТипПоля";
	
	Если ТипПоля="Измерение" И ЗначениеЗаполнено(ИзмерениеРегистраТек)Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И (НЕ ТабНастройкиСоответствия.Поле=&ИзмерениеРегистраТек)";
		
		Запрос.УстановитьПараметр("ИзмерениеРегистраТек",ИзмерениеРегистраТек);
		
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНастройкиСоответствия.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|	ТабНастройкиСоответствия.ТипОбъектаКонсолидации,
	|	СоответствиеВнешнимИБ.Ссылка КАК НастройкаСоответствия,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК ИмяОбъектаВнешнейИБ
	|ИЗ
	|	ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО ТабНастройкиСоответствия.ИмяОбъектаМетаданных = СоответствиеВнешнимИБ.ИмяОбъектаМетаданных
	|			И ТабНастройкиСоответствия.ТипОбъектаКонсолидации = СоответствиеВнешнимИБ.ТипОбъектаКонсолидации
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяОбъектаМетаданных";
	
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("ТабНастройкиСоответствия",	мТаблицаВозможныхПолей);
	Запрос.УстановитьПараметр("ТипПоля",					ТипПоля);
	
	Выгрузка = Запрос.Выполнить().Выбрать();
	
	Пока Выгрузка.Следующий() Цикл
		
		ОбъектКонсолидации = мТаблицаВозможныхПолей.Найти(Выгрузка.ИмяОбъектаМетаДанных,"ИмяОбъектаМетаДанных");
				
		Если ОбъектКонсолидации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы      = мТаблицаСоответствия.Строки.Найти(ОбъектКонсолидации.Поле, "АналитикаКонсолидации",Истина);
		
		ОбъектыВИБ         = ТаблицаВИБ.НайтиСтроки(Новый Структура("СправочникБД", Выгрузка.ИмяОбъектаВнешнейИБ));
		
		Если ОбъектыВИБ.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Элемент = ОбъектыВИБ[0];
		
		Если СтрокаТаблицы=Неопределено Тогда
			
			СтрокаТаблицы                               = ОбъектДобавления.Строки.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации         = ОбъектКонсолидации.Поле;
			СтрокаТаблицы.ПсевдонимКонсолидации         = ОбъектКонсолидации.Синоним;
			СтрокаТаблицы.ИспользованиеКонсолидация     = ОбъектКонсолидации.Использование;
			СтрокаТаблицы.ИспользованиеВИБ			    = Элемент.Использование;

			СтрокаТаблицы.АналитикаБД                  	= Элемент.ПолеБД;
			СтрокаТаблицы.ПсевдонимБД                  	= Элемент.НаименованиеБД;
			СтрокаТаблицы.СправочникБД                 	= Элемент.СправочникБД;
			СтрокаТаблицы.ТипМетаДанных              	= Элемент.ТипМетаДанных;
			
			Если ОбъектКонсолидации.ТипОбъектаКонсолидации="ВидСубконто" Тогда
				
				СтрокаТаблицы.ВидСубконто                   = ОбъектКонсолидации.ИмяОбъектаМетаданных;
				
			Иначе
				
				СтрокаТаблицы.СправочникКонсолидации        = ОбъектКонсолидации.ИмяОбъектаМетаданных;
				СтрокаТаблицы.ТипОбъектаКонсолидации		= ОбъектКонсолидации.ТипОбъектаКонсолидации;
				
			КонецЕсли;
			
			СтрокаТаблицы.ПримитивныйТип                = ЛОЖЬ;
			СтрокаТаблицы.Сопоставлено                  = Истина;
			СтрокаТаблицы.НастройкаСоответствия			= Выгрузка.НастройкаСоответствия;
			СтрокаТаблицы.ПолеЗапроса                   = Элемент.ПолеЗапроса;
			СтрокаТаблицы.НеИспользоватьДляСинхронизации= Истина;
			СтрокаТаблицы.Ключевой						= Ложь;
			СтрокаТаблицы.СпособЗаполнения				= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
			
		Иначе
			
			Если ПустаяСтрока(СтрокаТаблицы.АналитикаБД) Тогда
				
				СтрокаТаблицы.АналитикаБД                    	= Элемент.ПолеБД;
				СтрокаТаблицы.ПсевдонимБД                    	= Элемент.НаименованиеБД;
				СтрокаТаблицы.СправочникБД                   	= Элемент.СправочникБД;
				СтрокаТаблицы.ИспользованиеВИБ			      	= Элемент.Использование;
				СтрокаТаблицы.ТипМетаДанных                	  	= Элемент.ТипМетаДанных;
				СтрокаТаблицы.ПримитивныйТип                  	= ЛОЖЬ;
				СтрокаТаблицы.Дебетовый                       	= Элемент.Дебетовый; 
				СтрокаТаблицы.Сопоставлено                    	= Истина;
				СтрокаТаблицы.НастройкаСоответствия			  	= Выгрузка.НастройкаСоответствия;
				СтрокаТаблицы.НеИспользоватьДляСинхронизации  	= Истина;
				СтрокаТаблицы.Ключевой							= Ложь;
				СтрокаТаблицы.СпособЗаполнения					= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Поле Из МассивСсылочные Цикл
		
		Если ТипПоля="Измерение" И ЗначениеЗаполнено(ИзмерениеРегистраВИБ) И Поле.Поле=ИзмерениеРегистраВИБ Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если мТаблицаСоответствия.Строки.Найти(Поле.Поле, "АналитикаКонсолидации",Истина)=Неопределено Тогда
			
			СтрокаТаблицы                       = ОбъектДобавления.Строки.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации = Поле.Поле;
			
			Если Поле.ТипДанныхПоля.Количество()=1 Тогда
				
				СтрокаТаблицы.ПсевдонимКонсолидации = Поле.Синоним;
				СтрокаТаблицы.ИспользованиеКонсолидация = Поле.Использование;
				
				Если Поле.ТипОбъектаКонсолидации="ВидСубконто" Тогда
					
					СтрокаТаблицы.ВидСубконто                   = Поле.ИмяОбъектаМетаданных;
					
				Иначе
					
					СтрокаТаблицы.СправочникКонсолидации        = Поле.ИмяОбъектаМетаданных;
					СтрокаТаблицы.ТипОбъектаКонсолидации		= Поле.ТипОбъектаКонсолидации;
					
				КонецЕсли;
				
				СтрокаТаблицы.Сопоставлено          = Ложь;
				СтрокаТаблицы.ПримитивныйТип        = ЛОЖЬ;
				
			Иначе
				
				СтрокаТаблицы.ПсевдонимКонсолидации=Поле.Синоним;
				
				Для Каждого СтрТип ИЗ Поле.ТипДанныхПоля Цикл
					
					ТаблицаАналитики=?(ТипЗнч(СтрТип.Значение)=Тип("Строка"),СтрТип.Значение,Метаданные.НайтиПоТипу(СтрТип.Значение).ПолноеИмя());
					ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
					
					Если ДанныеСинхронизации.Количество()=2 Тогда
						
						СтрокаТип=СтрокаТаблицы.Строки.Добавить();
						
						СтрокаТип.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
						СтрокаТип.СправочникКонсолидации=ДанныеСинхронизации[1];
						
						СтрокаТип.АналитикаКонсолидации = Поле.Поле;
						СтрокаТип.ПсевдонимКонсолидации = Поле.Синоним+" ("+СтрокаТип.СправочникКонсолидации+")";
						
						СтрокаТип.ИспользованиеКонсолидация = Поле.Использование;
						
						СтрокаТип.Сопоставлено          = Ложь;
						СтрокаТип.ПримитивныйТип        = ЛОЖЬ;
						
					ИначеЕсли ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрТип.Значение) Тогда
						
						СтрокаТип=СтрокаТаблицы.Строки.Добавить();
						СтрокаТип.АналитикаКонсолидации 	= Поле.Поле;
						СтрокаТип.ПсевдонимКонсолидации 	= Поле.Синоним+" ("+СтрТип.Значение+")";
						СтрокаТип.ПримитивныйТип        	= Истина;
						СтрокаТип.ИспользованиеКонсолидация = Поле.Использование;
						СтрокаТип.ОписаниеПримитивногоТипаПриемник=СтрТип.Значение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектДобавления.Строки.Сортировать("АналитикаКонсолидации Возр");	
	
КонецПроцедуры // ДобавитьСтрокиСоответствияРегистр() 

Функция СформироватьТаблицуСоответствияБДПоРегистру() Экспорт
				
	ТаблицаВИБ = мТаблицаПоказателейБД.Скопировать();
	
	СтрокаИзмерения=мТаблицаСоответствия.Строки.Добавить();
	СтрокаИзмерения.ПсевдонимКонсолидации=Нстр("ru = 'Измерения'");
	ДобавитьСтрокиСоответствияРегистр(ТаблицаВИБ,СтрокаИзмерения,"Измерение");
	
	СтрокаРесурс=мТаблицаСоответствия.Строки.Добавить();
	СтрокаРесурс.ПсевдонимКонсолидации=Нстр("ru = 'Ресурсы'");
	ДобавитьСтрокиСоответствияРегистр(ТаблицаВИБ,СтрокаРесурс,"Ресурс");
	
	СтрокаРеквизит=мТаблицаСоответствия.Строки.Добавить();
	СтрокаРеквизит.ПсевдонимКонсолидации=Нстр("ru = 'Реквизиты'");
	ДобавитьСтрокиСоответствияРегистр(ТаблицаВИБ,СтрокаРеквизит,"Реквизит");			
		
	Возврат мТаблицаСоответствия;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОбъектаВИБ() Экспорт
		
	мТаблицаПоказателейБД.Очистить();
	мТаблицаПроизводныхБД.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОбъектаВИБ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.ПеречисленияБД") Тогда
		
		ТекТаблицаАналитики=ОпределитьТаблицуАналитики(ЭтотОбъект);
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление.")>0 Тогда
			
			Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаВИБ.Реквизиты Цикл
				
				СтрокаПоказателей                 					= мТаблицаПоказателейБД.Добавить();
				СтрокаПоказателей.ПолеБД         					= СтрИзмерение.Имя;
				СтрокаПоказателей.НаименованиеБД 					= СтрИзмерение.Синоним;
				СтрокаПоказателей.ПримитивныйТип  = Истина;
				СтрокаПоказателей.ТипМетаДанных    = "Простой";
				
				СписокТипов=Новый СписокЗначений;
				СписокТипов.Добавить(Тип("Строка"));
				
				СтрокаПоказателей.ТипЗначения=СписокТипов;	
				
			КонецЦикла;
			
		Иначе
			
			СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         = "Наименование";
			СтрокаПоказателей.НаименованиеБД = Нстр("ru = 'Наименование'");
			СтрокаПоказателей.ПримитивныйТип  = Истина;
			СтрокаПоказателей.ТипМетаДанных    = "Простой";
			
			СписокТипов=Новый СписокЗначений;
			СписокТипов.Добавить(Тип("Строка"));
			
			СтрокаПоказателей.ТипЗначения=СписокТипов;
			
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.ПланыСчетовБД") Тогда
		
		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         = "Код";
		СтрокаПоказателей.НаименованиеБД = Нстр("ru = 'Код'");
		СтрокаПоказателей.ПримитивныйТип  = Истина;
		СтрокаПоказателей.ТипМетаДанных    = "Простой";
		СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник="Строка("+ОписаниеОбъектаВИБ.ДлинаКода+")";
				
		СписокТипов=Новый СписокЗначений;
		СписокТипов.Добавить(Тип("Строка"));
		
		СтрокаПоказателей.ТипЗначения=СписокТипов;

	ИначеЕсли ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.ТаблицыADO") Тогда
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаВИБ.Реквизиты Цикл
			
			ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(СтрИзмерение.ТипЗначения);
			
			Если ПримитивныйТип=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;

			СписокТипов=Новый СписокЗначений;
			СписокТипов.Добавить(ПримитивныйТип);
			
			СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();	
			СтрокаПоказателей.ПолеБД         = "["+СтрИзмерение.Имя+"]";
			СтрокаПоказателей.ТипМетаДанных   = "Простой";
			СтрокаПоказателей.ТипЗначения	  = СписокТипов;
            СтрокаПоказателей.ПримитивныйТип  = Истина;

			СтрокаСсылка=ОписаниеОбъектаВИБ.СвязанныеТаблицы.Найти(СтрИзмерение.Имя,"ПолеТекущейТаблицы");
						
			Если СтрокаСсылка=Неопределено Тогда
				
				СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя;
				
			Иначе
				
				СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+": "+СтрокаСсылка.ПолеСвязаннойТаблицы+")";
				
				СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();	
				СтрокаПоказателей.ПолеБД         = "["+СтрокаСсылка.СвязаннаяТаблица+"]";
				СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+")";
				СтрокаПоказателей.ТипМетаДанных   = "ТаблицаADO";
				СтрокаПоказателей.ПримитивныйТип  = Ложь;
				СтрокаПоказателей.СправочникБД   = "({["+СтрокаСсылка.СвязаннаяТаблица+"]}{["+ОписаниеОбъектаВИБ.Наименование+"].["+СтрИзмерение.Имя+"]=["+СтрокаСсылка.СвязаннаяТаблица+"].["+СтрокаСсылка.ПолеСвязаннойТаблицы+"]})";
				
				СписокТипов=Новый СписокЗначений;
				
				СписокТипов.Добавить("ТаблицаADO."+СтрокаСсылка.СвязаннаяТаблица);
				СтрокаПоказателей.ТипЗначения	  = СписокТипов;
				
			КонецЕсли;	
				
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.РегистрыСведенийБД") Тогда
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаВИБ.Измерения Цикл
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.Измерение         = Истина;
			СтрокаПоказателей.ТипПоля			= "Измерение";
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаВИБ.Ресурсы Цикл
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.ТипПоля			= "Ресурс";
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаВИБ.Реквизиты Цикл
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.ТипПоля			= "Реквизит";
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
				
	Иначе
		
		Для Каждого СтрИзмерение ИЗ ОписаниеОбъектаВИБ.Реквизиты Цикл
			
			СтрокаПоказателей                 					= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         					= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 					= СтрИзмерение.Синоним;
			
			СтрокаПоказателей.ОписаниеПримитивногоТипаИсточник	= ?(ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрИзмерение.ТипДанных),?(ЗначениеЗаполнено(СтрИзмерение.ОписаниеПримитивногоТипа),СтрИзмерение.ОписаниеПримитивногоТипа,СтрИзмерение.ТипДанных),"");
			
			Если ТипОбъектаВИБ="Справочник" Тогда
				СтрокаПоказателей.Использование=СтрИзмерение.Использование;
			КонецЕсли;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипОбъектаВИБ="Справочник" И ОписаниеОбъектаВИБ.Владельцы.Количество()>0 Тогда
						
		Для Каждого ТекВладелец ИЗ ОписаниеОбъектаВИБ.Владельцы Цикл 
			
			СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         = "Владелец";
			СтрокаПоказателей.НаименованиеБД = СтрШаблон(Нстр("ru = 'Владелец (%1)'"), ТекВладелец.Синоним);
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, ТекВладелец.ТипДанных);
							
		КонецЦикла;
		
	КонецЕсли;
	
	мТаблицаПоказателейБД.Сортировать("ПримитивныйТип Убыв, ПолеБД Возр");
	
КонецПроцедуры

// Процедура определяет и заполняет типы реквизитов объекта метаданных ВИБ.
//
Процедура ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, ОписаниеТиповВИБ) Экспорт
	
	Если СтрДлина(ОписаниеТиповВИБ)=0 Тогда
		СтрокаПоказателей.ТипМетаДанных = "НеПоддерживается";
		Возврат;
	КонецЕсли;
	
	МассивТиповВИБ = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ОписаниеТиповВИБ,";");
	СписокТипов=Новый СписокЗначений;
	
	Если МассивТиповВИБ.Количество() > 1 Тогда
		
		Для Каждого Тип ИЗ МассивТиповВИБ Цикл
			
			СписокТипов.Добавить(Тип);
			
		КонецЦикла;
		 		
	Иначе
		
		ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(МассивТиповВИБ[0]);
		
		Если ПримитивныйТип = Неопределено Тогда
			
			ОбъектВИБ = МассивТиповВИБ[0];
			
			СписокТипов.Добавить(ОбъектВИБ);
			
			СтрокаПоказателей.ТипМетаДанных    = ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,ОбъектВИБ);
			СтрокаПоказателей.СправочникБД    = СтрЗаменить(ОбъектВИБ,СтрокаПоказателей.ТипМетаДанных+".","");
			СтрокаПоказателей.ПримитивныйТип=Ложь;
	
		Иначе
			
			СписокТипов.Добавить(ПримитивныйТип);
			СтрокаПоказателей.ТипМетаДанных    = "Простой";
			СтрокаПоказателей.ПримитивныйТип=Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Использование77() И НЕ СтрокаПоказателей.ПримитивныйТип Тогда
		мТаблицаПоказателейБД.Удалить(СтрокаПоказателей);
	Иначе	
		СтрокаПоказателей.ТипЗначения=СписокТипов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиОперанда() Экспорт
			
	ТаблицаСоответствияВИБ=Новый ХранилищеЗначения(мТаблицаСоответствия);
	
	СтруктураЗначенийИнтерфейс=Новый Структура;	
	СтруктураЗначенийИнтерфейс.Вставить("мТаблицаПоказателейБД",мТаблицаПоказателейБД);
	СтруктураЗначенийИнтерфейс.Вставить("мТаблицаПроизводныхБД",мТаблицаПроизводныхБД);
	СтруктураЗначенийИнтерфейс.Вставить("ТабличноеПолеИзмеренийБД",мТабличноеПолеИзмеренийБД);
		
	НастройкиОперандаИнтерфейс = Новый ХранилищеЗначения(СтруктураЗначенийИнтерфейс, Новый СжатиеДанных());

	СоответствиеРеквизитов.Очистить();
	СоответствиеЗначенийПеречислений.Очистить();
	
	УстановленныеСоответствия=мТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("Сопоставлено",Истина),Истина);
	
	Для Каждого СтрСоответствие ИЗ УстановленныеСоответствия Цикл
		
		Если СоответствиеПеречислений() Тогда
			
			НоваяСтрока=СоответствиеЗначенийПеречислений.Добавить();
			
			НоваяСтрока.ЗначениеВнешнейИБ		= СтрСоответствие.АналитикаБД;
			НоваяСтрока.ПредставлениеВнешнейИБ	= СтрСоответствие.ПсевдонимБД;
			НоваяСтрока.ЗначениеТекущейИБ		= СтрСоответствие.АналитикаКонсолидации;
			НоваяСтрока.ПредставлениеТекущейИБ	= СтрСоответствие.ПсевдонимКонсолидации;
			
		Иначе
			
			Если СтрСоответствие.Строки.Количество()>1 И (НЕ ТипОбъектаВИБ="ТаблицаADO") Тогда
				
				НоваяСтрока=СоответствиеРеквизитов.Добавить();
				НоваяСтрока.РеквизитОбъектаКонсолидации=СтрСоответствие.АналитикаКонсолидации;
				НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрСоответствие.АналитикаБД+".Ссылка";
				НоваяСтрока.ИспользованиеКонсолидация=СтрСоответствие.ИспользованиеКонсолидация;
				НоваяСтрока.ИспользованиеВИБ=СтрСоответствие.ИспользованиеВИБ;
				НоваяСтрока.ПримитивныйТип=Истина;
				НоваяСтрока.СпособЗаполнения=СтрСоответствие.СпособЗаполнения;
				НоваяСтрока.ФиксированноеЗначение=СтрСоответствие.ФиксированноеЗначение;
				
				СтрТаблицаАналитики="";
				
				Для Каждого Строка ИЗ СтрСоответствие.Строки Цикл
					
					Если ЗначениеЗаполнено(Строка.НастройкаСоответствия) Тогда
						
						СтрТаблицаАналитики=СтрТаблицаАналитики+";"+ОпределитьТаблицуАналитики(Строка.НастройкаСоответствия);
						
					КонецЕсли;
					
				КонецЦикла;
				
				НоваяСтрока.ТаблицаАналитики=Сред(СтрТаблицаАналитики,2);
				
			Иначе
				
				НоваяСтрока=СоответствиеРеквизитов.Добавить();
				НоваяСтрока.РеквизитОбъектаКонсолидации=СтрСоответствие.АналитикаКонсолидации;
				НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрСоответствие.АналитикаБД;
				НоваяСтрока.НастройкаСоответствия=СтрСоответствие.НастройкаСоответствия;
				НоваяСтрока.НеИспользоватьДляСинхронизации=СтрСоответствие.НеИспользоватьДляСинхронизации;
				НоваяСтрока.ИспользованиеКонсолидация=СтрСоответствие.ИспользованиеКонсолидация;
				НоваяСтрока.ИспользованиеВИБ=СтрСоответствие.ИспользованиеВИБ;
				НоваяСтрока.ПримитивныйТип=СтрСоответствие.ПримитивныйТип;
				НоваяСтрока.ТаблицаАналитикиВИБ=СтрСоответствие.СправочникБД;
				НоваяСтрока.СпособЗаполнения=СтрСоответствие.СпособЗаполнения;
				НоваяСтрока.ФиксированноеЗначение=СтрСоответствие.ФиксированноеЗначение;
				
				Если НоваяСтрока.ПримитивныйТип Тогда
					
					НоваяСтрока.ТаблицаАналитики=ОпределитьТаблицуАналитики(ЭтотОбъект);
					
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоответствиеПеречислений() Тогда
		
		НоваяСтрока=СоответствиеРеквизитов.Добавить();
		НоваяСтрока.РеквизитОбъектаВнешнейИБ	=	"Наименование";
		НоваяСтрока.РеквизитОбъектаКонсолидации	=	"Наименование";
		НоваяСтрока.ПримитивныйТип				= 	Истина;
		НоваяСтрока.ТаблицаАналитики			=   ОпределитьТаблицуАналитики(ЭтотОбъект);
		
	КонецЕсли;	
		
КонецПроцедуры // СохранитьНастройкиОперанда

//////////////////////////////////////////////////////////////////////////////////////////

Функция ОпределитьТаблицуАналитики(НастройкаСоответствия)
	
	Если ПустаяСтрока(НастройкаСоответствия.ИмяОбъектаМетаданных) Тогда
		
		Возврат "";
	
	ИначеЕсли НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		Возврат Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		Возврат НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
		
КонецФункции // ОпределитьТаблицуАналитики

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА.
//

// Процедура - обработчик события "ПередЗаписью" объекта.
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если ПустаяСтрока(ИмяОбъектаМетаДанных) Тогда
		СообщениеОбОшибке = СтрШаблон(Нстр("ru = '%1Не заполнено поле Имя объекта метаданных%2'"), СообщениеОбОшибке, Символы.ПС);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОбъектаВИБ) Тогда
		СообщениеОбОшибке = СтрШаблон(Нстр("ru = '%1Не заполнено описание объекта внешней информационной базы%2'"), СообщениеОбОшибке, 
			Символы.ПС);
	КонецЕсли;
	
	Если НЕ СинхронизацияПоGUID Тогда
		
		Если СоответствиеРеквизитов.Количество()=0 Тогда 
			СообщениеОбОшибке = СтрШаблон(Нстр("ru = '%1Не указаны поля соответствия реквизитов текущей и внешней информационной базы%2'"), 
			СообщениеОбОшибке, Символы.ПС);
		КонецЕсли;
		
		Если НЕ (ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.ТабличныеЧастиБД") ИЛИ ТипЗнч(ОписаниеОбъектаТек)=Тип("СправочникСсылка.РегистрыСведенийБД")) Тогда
			
			Если СоответствиеРеквизитов.НайтиСтроки(Новый Структура("НеИспользоватьДляСинхронизации",Ложь)).Количество()=0 Тогда
				СообщениеОбОшибке = СтрШаблон(Нстр("ru = '%1Не выбрано ни одного ключевого поля для синхронизации%2'"), 
				СообщениеОбОшибке, Символы.ПС);	
			ИначеЕсли СоответствиеРеквизитов.НайтиСтроки(Новый Структура("НеИспользоватьДляСинхронизации,ПримитивныйТип",Ложь,Истина)).Количество()=0 Тогда
				СообщениеОбОшибке = СтрШаблон(Нстр("ru = '%1Необходимо указать хотя бы одно ключевое поле примитивного типа%2'"), 
				СообщениеОбОшибке, Символы.ПС);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(СообщениеОбОшибке) > 10 Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверим на существование аналогичных соответствий
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СоответствиеВнешнимИБ.Ссылка,
	             |	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации,
	             |	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных,
	             |	СоответствиеВнешнимИБ.ТипОбъектаВИБ,
	             |	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК НаименованиеБД
	             |ИЗ
	             |	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	             |ГДЕ
	             |	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
	             |	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ = &ОписаниеОбъектаВИБ
	             |	И СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации
	             |	И СоответствиеВнешнимИБ.ТипОбъектаВИБ = &ТипОбъектаВИБ
	             |	И СоответствиеВнешнимИБ.Владелец = &Владелец
	             |	И (НЕ СоответствиеВнешнимИБ.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
	Запрос.УстановитьПараметр("ОписаниеОбъектаВИБ",ОписаниеОбъектаВИБ);
	Запрос.УстановитьПараметр("ТипОбъектаКонсолидации",ТипОбъектаКонсолидации);
	Запрос.УстановитьПараметр("ТипОбъектаВИБ",ТипОбъектаВИБ);
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		ТекстСообщения=СтрШаблон(Нстр("ru = 'Для типа информационной базы %1 уже существует настройка соответствия
		|%2.%3 -> %4.%5
		|Запись текущей настройки отменена.'"), Владелец, Результат.ТипОбъектаКонсолидации, 
		Результат.ИмяОбъектаМетаданных, Результат.ТипОбъектаВИБ, Результат.НаименованиеБД);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Внимание);
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		
		Если ТипОбъектаВИБ="ТаблицаADO" Тогда
			
			Наименование=ТипОбъектаКонсолидации+"."+ИмяОбъектаМетаданных+" -> "+ТипОбъектаВИБ+"."+ОписаниеОбъектаВИБ.Имя;
			
		Иначе
			
			Наименование=ТипОбъектаКонсолидации+"."+ИмяОбъектаМетаданных+" -> "+ТипОбъектаВИБ+"."+ОписаниеОбъектаВИБ.Наименование;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ ЭтоНовый() Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.ТипБД = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Владелец);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
							
			УправлениеОтчетамиУХ.ОчиститьЗаписиРегистраПараметрическихНастроек(Результат.Ссылка);
						
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОбъектаВИБ="ТаблицаADO" Тогда
		РасширениеИнтеграцииУХ.ADO_СформироватьРезультирующиеСтрокиПолейДляИмпорта(Ссылка);
	Иначе
		РасширениеИнтеграцииУХ.СформироватьРезультирующиеСтрокиПолейДляИмпорта(Ссылка);
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ИсточникиДанныхДляРасчетов.ТипБД = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Владелец);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			УправлениеОтчетамиУХ.ОчиститьЗаписиРегистраПараметрическихНастроек(Результат.НазначениеРасчетов);
			
		КонецЦикла;
				
	КонецЕсли;
				
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДокументыБД") Тогда
		
		Владелец = ДанныеЗаполнения.Владелец;
		ТипОбъектаВИБ="Документ";
		ОписаниеОбъектаВИБ = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПеречисленияБД") Тогда
		
		ТипОбъектаВИБ="Перечисление";
		Владелец = ДанныеЗаполнения.Владелец;
		ОписаниеОбъектаВИБ = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СправочникиБД") Тогда
		
		ТипОбъектаВИБ="Справочник";
		Владелец = ДанныеЗаполнения.Владелец;
		ОписаниеОбъектаВИБ = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПланыСчетовБД") Тогда
		
		ТипОбъектаВИБ="ПланСчетов";
		Владелец = ДанныеЗаполнения.Владелец;
		ОписаниеОбъектаВИБ = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПланыВидовХарактеристикБД") Тогда
		
		ТипОбъектаВИБ="ПланВидовХарактеристик";
		Владелец = ДанныеЗаполнения.Владелец;
		ОписаниеОбъектаВИБ = ДанныеЗаполнения.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАЗЫМЕНОВАНИЯ РЕКВИЗИТОВ ОБЪЕКТОВ В УПРАВЛЯЕМОМ РЕЖИМЕ

Процедура ДобавитьСтрокуПодчиненнойАналитикиУправляемый(Строка,Реквизит,ПоказателиБДТек,РежимОтбора=Ложь)
	
	ИмяПоля=?(Строка.АналитикаБД="",ПоказателиБДТек.ПолеБД,Строка.АналитикаБД);
	
	СтрокаПоказателей=мТаблицаПроизводныхБД.Найти(ИмяПоля+"."+Реквизит.Имя,"ПолеБД");
	
	Если СтрокаПоказателей=Неопределено Тогда
		
		СтрокаПоказателей                 = мТаблицаПроизводныхБД.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПоказателей,ПоказателиБДТек,,"ТипМетаДанных");
		
		СтрокаПоказателей.ПолеБД         = ИмяПоля+"."+Реквизит.Имя;
		СтрокаПоказателей.НаименованиеБД = Реквизит.Синоним;
		СтрокаПоказателей.ТипЗначения     = Реквизит.ТипДанных;
		
		ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, Реквизит.ТипДанных);
		
	КонецЕсли;
		
	НоваяСтрока = СформироватьСтруктуруСтрокиВИБСервер(СтрокаПоказателей);
	НоваяСтрока.АналитикаБД = СтрокаПоказателей.ПолеБД;
	
	Если СтрокаПоказателей.ПримитивныйТип Тогда 
		Строка.СтрокиКДобавлениюПримитивные.Добавить(НоваяСтрока);
	Иначе
		Строка.СтрокиКДобавлениюСсылочные.Добавить(НоваяСтрока);
	КонецЕсли;
		
	// Добавляем строку для возможного раскрытия по реквизитам объекта
	
	Если (НоваяСтрока.ТипМетаДанных="Справочник" ИЛИ НоваяСтрока.ТипМетаДанных="Документ" ИЛИ НоваяСтрока.ТипМетаДанных="ПланВидовХарактеристик")
		И НЕ (Использование77() ИЛИ ТолькоПримитивныеРеквизиты(НоваяСтрока)) Тогда 
		
		// Добавим строку для дальнейшего раскрытия
		
		НоваяСтрока.СтрокиКДобавлениюСсылочные.Добавить(СформироватьСтруктуруСтрокиВИБСервер());
				
	КонецЕсли;
	
КонецПроцедуры //  ДобавитьСтрокуПодчиненнойАналитики()

Процедура ОбработатьСтрокуПоТипуМетаданныхВИБУправляемый(ТекТипМетаданных,Строка,ПоказателиБДТек,РежимОтбора) Экспорт
	
	Для Каждого Реквизит Из ТекТипМетаДанных.Реквизиты Цикл
		
		Если СтрНайти(Реквизит.Имя,"НСИ_")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуПодчиненнойАналитикиУправляемый(Строка,Реквизит,ПоказателиБДТек,РежимОтбора);
		
	КонецЦикла;
	
	Если Строка.ТипМетаДанных="Справочник" И ТекТипМетаДанных.Владельцы.Количество()>0 Тогда
		
		НоваяСтрока=СформироватьСтруктуруСтрокиВИБСервер();
		НоваяСтрока.НаименованиеБД  = Нстр("ru = 'Владелец'");
		Строка.СтрокиКДобавлениюСсылочные.Добавить(НоваяСтрока);
				
		Для Каждого ТекВладелец ИЗ ТекТипМетаДанных.Владельцы Цикл 
			
			СтрокаВладелец=СформироватьСтруктуруСтрокиВИБСервер();
			
			СтрокаВладелец.НаименованиеБД = ТекВладелец.Имя;
			СтрокаВладелец.ТипЗначения     = ТекВладелец.ТипДанных;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаВладелец,ТекВладелец.ТипДанных);

			СтрокаВладелец.АналитикаБД              = Строка.АналитикаБД+".Владелец";
			
			Если  НайтиСтрокуДанныхВИБПоПолю(Строка.АналитикаБД+".Владелец")=Неопределено Тогда
				
				СтрокаПоказателей                 = мТаблицаПроизводныхБД.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПоказателей,СтрокаВладелец);
				
				СтрокаПоказателей.ПолеБД         = Строка.АналитикаБД+".Владелец";
				СтрокаПоказателей.НаименованиеБД = ТекВладелец.Имя;
				
			КонецЕсли;
			
			СтрокаВладелец.СтрокиКДобавлениюСсылочные.Добавить(СформироватьСтруктуруСтрокиВИБСервер());

			НоваяСтрока.СтрокиКДобавлениюСсылочные.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтрокаВладелец));
							
		КонецЦикла;
		
	КонецЕсли;
	 	
КонецПроцедуры // ОбработатьСтрокуПоТипуМетаданныхВИБ()

Процедура ОбработатьСтрокуПоТипуМетаданныхADO(ТекТипМетаданных,Строка,ПоказателиБДТек,РежимОтбора) Экспорт
	
	Для Каждого СтрИзмерение Из ТекТипМетаДанных.Реквизиты Цикл
		
		СтрокаПоказателей=мТаблицаПроизводныхБД.Найти("["+ТекТипМетаДанных.Наименование+"].["+СтрИзмерение.Имя+"]","ПолеБД");
		
		Если СтрокаПоказателей=Неопределено Тогда
			
			ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(СтрИзмерение.ТипЗначения);
			
			Если ПримитивныйТип=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СписокТипов=Новый СписокЗначений;
			СписокТипов.Добавить(ПримитивныйТип);
			
			СтрокаПоказателей                 = мТаблицаПроизводныхБД.Добавить();
			СтрокаПоказателей.ПолеБД         = "["+ТекТипМетаДанных.Наименование+"].["+СтрИзмерение.Имя+"]";
  			СтрокаПоказателей.ТипМетаДанных   = "Простой";
			СтрокаПоказателей.ТипЗначения	  = СписокТипов;
			СтрокаПоказателей.ПримитивныйТип  = Истина;
						
			//////////////////////////////////////////////////////////////////////////////////////////
			// Проверяем на наличие связей
			
			СтрокаСсылка=ТекТипМетаДанных.СвязанныеТаблицы.Найти(СтрИзмерение.Имя,"ПолеТекущейТаблицы");
			
			Если СтрокаСсылка=Неопределено Тогда
				
				СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя;
				НоваяСтрока = СформироватьСтруктуруСтрокиВИБСервер(СтрокаПоказателей);
				НоваяСтрока.АналитикаБД = СтрокаПоказателей.ПолеБД;
				Строка.СтрокиКДобавлениюПримитивные.Добавить(НоваяСтрока);
				
			Иначе
				
				СтрокаПодчиненные=мТаблицаПроизводныхБД.Найти("["+СтрокаСсылка.СвязаннаяТаблица+"]","ПолеБД");
				
				Если СтрокаПодчиненные=Неопределено Тогда
					
					СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+": "+СтрокаСсылка.ПолеСвязаннойТаблицы+")";
					НоваяСтрока = СформироватьСтруктуруСтрокиВИБСервер(СтрокаПоказателей);
					НоваяСтрока.АналитикаБД = СтрокаПоказателей.ПолеБД;
					Строка.СтрокиКДобавлениюПримитивные.Добавить(НоваяСтрока);

					СтрокаПодчиненные                 = мТаблицаПроизводныхБД.Добавить();	
					СтрокаПодчиненные.ПолеБД         = "["+СтрокаСсылка.СвязаннаяТаблица+"]";
					СтрокаПодчиненные.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+")";
					СтрокаПодчиненные.ТипМетаДанных   = "ТаблицаADO";
					СтрокаПодчиненные.ПримитивныйТип  = Ложь;
					СтрокаПодчиненные.СправочникБД   = ПоказателиБДТек.СправочникБД+"({["+СтрокаСсылка.СвязаннаяТаблица+"]}{["+ТекТипМетаДанных.Наименование+"].["+СтрИзмерение.Имя+"]=["+СтрокаСсылка.СвязаннаяТаблица+"].["+СтрокаСсылка.ПолеСвязаннойТаблицы+"]})";
					
					СписокТипов=Новый СписокЗначений;
					
					СписокТипов.Добавить("ТаблицаADO."+СтрокаСсылка.СвязаннаяТаблица);
					СтрокаПодчиненные.ТипЗначения	  = СписокТипов;
					
				КонецЕсли;
				
				НоваяСтрока = СформироватьСтруктуруСтрокиВИБСервер(СтрокаПодчиненные);
				НоваяСтрока.АналитикаБД = СтрокаПодчиненные.ПолеБД;
				Строка.СтрокиКДобавлениюСсылочные.Добавить(НоваяСтрока);
				НоваяСтрока.СтрокиКДобавлениюСсылочные.Добавить(СформироватьСтруктуруСтрокиВИБСервер());
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры // ОбработатьСтрокуПоТипуМетаданныхADO()

Процедура ПередРазворачиваниемСтрокиРеквизитовАналитикиУправляемыйРежим(Строка, Отказ,РежимОтбора=Ложь) Экспорт 
	
	Строка.Вставить("СтрокиКДобавлениюПримитивные",Новый Массив);
	Строка.Вставить("СтрокиКДобавлениюСсылочные",Новый Массив);
	
	ПоказателиБДТек=НайтиСтрокуДанныхВИБПоПолю(Строка.АналитикаБД);
	
	Если ПоказателиБДТек=Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Если Строка.ТипЗначения.Количество()=1 Тогда
		
		СтруктураТипа=ОбщегоНазначенияУХ.ПолучитьДанныеТипа(Строка.ТипЗначения[0].Значение);
		ОписаниеТипа=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(ТекСоединениеВИБ,СтруктураТипа.ТипМетаДанных,СтруктураТипа.СправочникБД,Владелец);
		
		Если СтруктураТипа.ТипМетаДанных="ТаблицаADO" Тогда
			
			ОбработатьСтрокуПоТипуМетаданныхADO(ОписаниеТипа,Строка,ПоказателиБДТек,РежимОтбора);
			
		Иначе
			
			ОбработатьСтрокуПоТипуМетаданныхВИБУправляемый(ОписаниеТипа,Строка,ПоказателиБДТек,РежимОтбора);
		
		КонецЕсли;
					
	ИначеЕсли Строка.ТипЗначения.Количество()>1 Тогда
		
		Для Каждого СтрТип ИЗ Строка.ТипЗначения Цикл
			
			ЕстьПримитивныеРеквизиты=Ложь;
			
			Тип=СтрТип.Значение;
			
			ТекСписокТипов=Новый СписокЗначений;
			ТекСписокТипов.Добавить(Тип);
			
			ТекущаяСтрока                  	= СформироватьСтруктуруСтрокиВИБСервер();
			ТекущаяСтрока.ТипМетаДанных		= ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,Тип);
			
			Если ОбщегоНазначенияУХ.ПримитивныйТипСтрока(Тип) Тогда
				ЕстьПримитивныеРеквизиты=Истина;
				ТекущаяСтрока.ОписаниеПримитивногоТипаИсточник=Тип;
				ТекущаяСтрока.ПримитивныйТип=Истина;
			КонецЕсли;
			
			ТекущаяСтрока.НаименованиеБД   	= Тип;
			ТекущаяСтрока.АналитикаБД		= Строка.АналитикаБД;
			ТекущаяСтрока.СправочникБД     	= СтрЗаменить(Тип,ТекущаяСтрока.ТипМетаДанных+".","");
			
			ТекущаяСтрока.ТипЗначения    	= ТекСписокТипов;
			
			Если НЕ (ТекущаяСтрока.ТипМетаДанных="НеПоддерживается" ИЛИ ТолькоПримитивныеРеквизиты(ТекущаяСтрока)) Тогда
				
				ТекущаяСтрока.СтрокиКДобавлениюСсылочные.Добавить(СформироватьСтруктуруСтрокиВИБСервер());
				
			КонецЕсли;
			
			Если ЕстьПримитивныеРеквизиты Тогда
				Строка.СтрокиКДобавлениюПримитивные.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ТекущаяСтрока));
			Иначе
				Строка.СтрокиКДобавлениюСсылочные.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ТекущаяСтрока));
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

Функция ТолькоПримитивныеРеквизиты(СтрокаМетаданных)
	
	Если СтрокаМетаданных.ТипЗначения.Количество()>1 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Если СтрокаМетаданных.ТипМетаДанных="Перечисление" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ОписаниеОбъекта=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,СтрокаМетаданных.ТипМетаДанных,СтрокаМетаданных.СправочникБД,Владелец);
	
	Для Каждого Реквизит ИЗ ОписаниеОбъекта.Реквизиты Цикл
		
		Если НЕ ОбщегоНазначенияУХ.ПримитивныйТипСтрока(Реквизит.ТипДанных) Тогда
			
			Возврат Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции  // ТолькоПримитивныеРеквизиты()

Функция СформироватьСтруктуруСтрокиВИБСервер(ДанныеСтрокиАналитики=Неопределено)
	
	СтрокаВИБ=Новый Структура;
	СтрокаВИБ.Вставить("АналитикаБД",				);
	СтрокаВИБ.Вставить("ИспользуетсяВСопоставлении",);
	СтрокаВИБ.Вставить("НаименованиеБД",			);
	СтрокаВИБ.Вставить("СправочникБД",				);
	СтрокаВИБ.Вставить("ТипЗначения",				);
	СтрокаВИБ.Вставить("ТипМетаДанных",				);
	СтрокаВИБ.Вставить("СпособВычисления",			);
	СтрокаВИБ.Вставить("ПримитивныйТип",			);
	СтрокаВИБ.Вставить("ОписаниеПримитивногоТипаИсточник",);
	СтрокаВИБ.Вставить("СтрокиКДобавлениюПримитивные",Новый Массив);
	СтрокаВИБ.Вставить("СтрокиКДобавлениюСсылочные",Новый Массив);
	
	Если ЗначениеЗаполнено(ДанныеСтрокиАналитики) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаВИБ,ДанныеСтрокиАналитики);
	КонецЕсли;
	
	Возврат СтрокаВИБ;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБСервер()

Функция НайтиСтрокуДанныхВИБПоПолю(ПолеБД) Экспорт;
	
	Если СтрНайти(ПолеБД,".")>0 Тогда
		Возврат мТаблицаПроизводныхБД.Найти(ПолеБД,"ПолеБД");
	Иначе
	    Возврат мТаблицаПоказателейБД.Найти(ПолеБД,"ПолеБД");
	КонецЕсли;
	
КонецФункции // НайтиСтрокуДанныхВИБПоПолю()

Функция ИнициализироватьТаблицуСоответствия() Экспорт
	
	мТаблицаСоответствия = Новый ДеревоЗначений;
	мТаблицаСоответствия.Колонки.Добавить("АналитикаКонсолидации",мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("АналитикаБД", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("ПсевдонимКонсолидации", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("ПсевдонимБД", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("СправочникБД", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("ТипМетаДанных", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("ТипОбъектаКонсолидации", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("СправочникКонсолидации", мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("ИспользованиеКонсолидация", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	мТаблицаСоответствия.Колонки.Добавить("ИспользованиеВИБ", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	
	мТаблицаСоответствия.Колонки.Добавить("НастройкаСоответствия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	мТаблицаСоответствия.Колонки.Добавить("СпособЗаполнения", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыЗаполненияПолейИсточника"));
	мТаблицаСоответствия.Колонки.Добавить("ФиксированноеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
                                                                                                      
	мТаблицаСоответствия.Колонки.Добавить("ПримитивныйТип",                	мОписаниеТиповБулево);
	мТаблицаСоответствия.Колонки.Добавить("ОписаниеПримитивногоТипаПриемник",мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("Сопоставлено",                  	мОписаниеТиповБулево);
	мТаблицаСоответствия.Колонки.Добавить("НеИспользоватьДляСинхронизации",	мОписаниеТиповБулево);
	мТаблицаСоответствия.Колонки.Добавить("Ключевой",						мОписаниеТиповБулево);
	мТаблицаСоответствия.Колонки.Добавить("ПолеЗапроса",               	   	мОписаниеТиповСтрока);
	мТаблицаСоответствия.Колонки.Добавить("ВидСубконто", 				   	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
		
КонецФункции // ИнициализироватьТаблицуСоответствия()

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры сохранения и восстановления данных для расчетов между серверными вызовами

Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета=Неопределено) Экспорт
	
	Если ПеременныеДляРасчета=Неопределено Тогда
		ПеременныеДляРасчета=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
	КонецЕсли;
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка");
		
	КонецЕсли;
			
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()


Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
		
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("Ссылка",Ссылка);
	СтруктураПеременных.Вставить("РеквизитыОбъекта",ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект));
	СтруктураПеременных.Вставить("ПроцедураСозданияОбъекта","Справочники.СоответствиеВнешнимИБ.СоздатьЭлемент()");
	СтруктураПеременных.Вставить("мТаблицаСоответствия",мТаблицаСоответствия);
	СтруктураПеременных.Вставить("мТаблицаПоказателейБД",мТаблицаПоказателейБД);
	СтруктураПеременных.Вставить("мТаблицаПроизводныхБД",мТаблицаПроизводныхБД);
	СтруктураПеременных.Вставить("мОписаниеТиповСтрока",мОписаниеТиповСтрока);
	СтруктураПеременных.Вставить("мОписаниеТиповБулево",мОписаниеТиповБулево);
	СтруктураПеременных.Вставить("мОписаниеТиповТЗ",мОписаниеТиповТЗ);
	СтруктураПеременных.Вставить("мОписаниеТиповСписокЗначений",мОписаниеТиповСписокЗначений);
	СтруктураПеременных.Вставить("мТаблицаВозможныхПолей",мТаблицаВозможныхПолей);
	СтруктураПеременных.Вставить("мМодифицированность",мМодифицированность);
	СтруктураПеременных.Вставить("мТабличноеПолеИзмеренийБД",мТабличноеПолеИзмеренийБД);
	СтруктураПеременных.Вставить("МассивОбновленных",МассивОбновленных);
	
	Возврат СтруктураПеременных;
	
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

///////////////////////////////////////////////////////////////////////////////////////////////////////

мОписаниеТиповСтрока=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500);
мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
мОписаниеТиповТЗ=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ();
мОписаниеТиповСписокЗначений=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений();


мТаблицаПоказателейБД         = Новый ТаблицаЗначений;
мТаблицаПоказателейБД.Колонки.Добавить("ПолеБД",          	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("НаименованиеБД", 	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТипЗначения",		мОписаниеТиповСписокЗначений);
мТаблицаПоказателейБД.Колонки.Добавить("ТипМетаДанных",    	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТипДанныхПоля",		мОписаниеТиповСписокЗначений);
мТаблицаПоказателейБД.Колонки.Добавить("ПримитивныйТип",   	мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("Измерение",   		мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("ТипПоля",   		мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ОписаниеПримитивногоТипаИсточник",  мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("СправочникБД",    	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ПолеЗапроса",      	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("Использование",    	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));

мТаблицаПроизводныхБД=мТаблицаПоказателейБД.СкопироватьКолонки();
 