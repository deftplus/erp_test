#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ОбновитьПометкуУдаленияДляПодчиненных;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ПометкаУдаления=Ссылка.ПометкаУдаления Тогда
		 ОбновитьПометкуУдаленияДляПодчиненных=Истина;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И (НЕ Ссылка.ПометкаУдаления) И (НЕ Владелец.ПометкаУдаления) И Справочники.ВидыОтчетов.ЕстьЗаписиПоЭлементуСтруктуры(Ссылка) Тогда
		
		ТекстОшибки=Справочники.ВидыОтчетов.ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры(Ссылка);
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			СтрокаШаблона = НСтр("ru = 'Вид отчета %1, колонка %2: установка пометки на удаление отменена.
			|%3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Ссылка.Владелец, Ссылка, ТекстОшибки), Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Истина;			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Код) Тогда
		Сообщить(НСтр("ru = 'Не задан код элемента!'"), СтатусСообщения.Важное);
		Отказ = Истина;
	ИначеЕсли НЕ УправлениеОтчетамиУХ.СтрокаМожетИспользоватьсяВКачествеКода(Код) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Неверно задан код! Первым символом кода должна быть буква. Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).'; en = 'Invalid code! The first code character must be a letter. Each of the following characters can be a letter, number, or underscore (_).'"),Отказ,,СтатусСообщения.Важное);
	Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	КОЛИЧЕСТВО(КолонкиОтчетов.Ссылка) КАК Кол
			|ИЗ
			|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
			|ГДЕ
			|	КолонкиОтчетов.Владелец = &Владелец
			|	И (НЕ КолонкиОтчетов.ПометкаУдаления)
			|	И КолонкиОтчетов.Код = &Код");
			Если НЕ ЭтоНовый() Тогда
				Запрос.Текст = Запрос.Текст + "
				| И КолонкиОтчетов.Ссылка <> &ТекущийЭлемент";
				Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);
			КонецЕсли;						 
			Запрос.УстановитьПараметр("Владелец", Владелец);
			Запрос.УстановитьПараметр("Код", Код);
			ВыборкаИзРезультата = Запрос.Выполнить().Выбрать();
			ВыборкаИзРезультата.Следующий();
			Если ВыборкаИзРезультата.Получить(0) <> 0 Тогда
				Сообщить(НСтр("ru = 'Элемент с таким кодом уже определен!'"), СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;

	КонецЕсли;
	Если ПорядковыйНомер = 0 Тогда
		Сообщить(НСтр("ru = 'Не задан порядковый номер элемента!'"), СтатусСообщения.Важное);
		Отказ = Истина;
	Иначе
		ОтключитьКонтрольУникальностиПорядковогоНомера = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Дополнительныесвойства, "ОтключитьКонтрольУникальностиПорядковогоНомера", Ложь);
		Если НЕ ОтключитьКонтрольУникальностиПорядковогоНомера Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	КОЛИЧЕСТВО(КолонкиОтчетов.Ссылка) КАК Кол
			                      |ИЗ
			                      |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
			                      |ГДЕ
			                      |	КолонкиОтчетов.Владелец = &Владелец
			                      |	И НЕ КолонкиОтчетов.ПометкаУдаления
			                      |	И КолонкиОтчетов.ПорядковыйНомер = &ПорядковыйНомер");
			Запрос.УстановитьПараметр("Владелец", Владелец);
			Запрос.УстановитьПараметр("ПорядковыйНомер", ПорядковыйНомер);
			Если НЕ ЭтоНовый() Тогда
				Запрос.Текст = Запрос.Текст + "
				| И КолонкиОтчетов.Ссылка <> &ТекущийЭлемент";
				Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);
			КонецЕсли;						 
			ВыборкаИзРезультата = Запрос.Выполнить().Выбрать();
			ВыборкаИзРезультата.Следующий();    
			Если ВыборкаИзРезультата.Получить(0) <> 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось записать колонку отчета %Ссылка% - колонка с порядковым номером %ПорядковыйНомер% уже определена'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПорядковыйНомер%", Строка(ПорядковыйНомер));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
		Иначе
			// Проверка отключена. Не выполняем.
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если НЕ ЗначениеЗаполнено(ТипЗначения) Тогда
			
			ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
			
		КонецЕсли;
		
		Код = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СокрЛП(Код));	
		ОбновитьРеквизитыПоказателей(ПолучитьПоказателиДляИзменения());
		НормализованныйКод=СокрЛП(Код);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыПоказателей(ТаблицаПоказателей)
	
	Для Каждого СтрПоказатель Из ТаблицаПоказателей Цикл
		
		ТекОбъект=СтрПоказатель.Ссылка.ПолучитьОбъект();
				
		Если ЗначениеЗаполнено(ВидИтогаПоСчету) Тогда
			
			ТекОбъект.ВидИтогаПоСчету=ВидИтогаПоСчету;
			
		КонецЕсли;
				
		Попытка
			
			ТекОбъект.Записать();
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось обновить реквизиты показателя %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
						
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьРеквизитыПоказателей()

// Процедура - обработчик события объекта "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(КолонкиОтчетов.ПорядковыйНомер) + 1 КАК Поле1
	                      |ИЗ
	                      |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	                      |ГДЕ
	                      |	(НЕ КолонкиОтчетов.ПометкаУдаления)
	                      |	И КолонкиОтчетов.Владелец = &ВладелецКолонки");
	Запрос.УстановитьПараметр("ПризнакПометкиУдаления", Ложь);
	Запрос.УстановитьПараметр("ВладелецКолонки", Владелец);
	ПорядковыйНомер = Запрос.Выполнить().Выгрузить().Получить(0).Получить(0);
	
КонецПроцедуры

// Процедура генерирует код перемещаемого элемента (группы) справочника,
// а также код расположенного рядом элемента при интерактивном перемещении
// элемента в форме списка справочника.
// Записывает переставляемые элементы с измененными кодами.
// В случае сдвига группы элементов также изменяет коды вложенных в группу
// элементов.
//
// Параметры
//  Направление  – число – напрвление сдвига элемента,
//                 принимает значения:
//                      1 - при сдвиге вниз;
//                     -1 - при сдвиге вверх.
//
Процедура ИзменитьПорядковыйНомер(Направление) Экспорт

	#Если Клиент Тогда
	
	ТекущийНомер    = ПорядковыйНомер;

	СписокКодов   = Новый СписокЗначений;

	КолонкиОтчетов  = Справочники.КолонкиОтчетов;
	ВыборкаСтроки = КолонкиОтчетов.Выбрать(Родитель, Владелец, , "ПорядковыйНомер Убыв");

	Пока ВыборкаСтроки.Следующий() Цикл
		СписокКодов.Добавить(ВыборкаСтроки.ПорядковыйНомер);
	КонецЦикла;

	Если СписокКодов.Количество() < 2  Тогда
		// На данном уровне имеется только один элемент или группа справочника.
		// Игнорируем действие пользователя.

		Возврат;
	КонецЕсли; 

	ПорядковыйНомер = СписокКодов.Индекс(СписокКодов.НайтиПоЗначению(ТекущийНомер));

	Если (ПорядковыйНомер = 0) И (Направление < 0) Тогда

		// Попытка перемещения первого по порядку элемента вверх.
		ИндексЭлементаЗамены = СписокКодов.Количество() - 1;
	
	ИначеЕсли (ПорядковыйНомер = СписокКодов.Количество() - 1) И (Направление > 0) Тогда

		// Попытка перемещения последнего по порядку элемента вниз.
		ИндексЭлементаЗамены = 0;

	Иначе

		// в иных случаях
		ИндексЭлементаЗамены = ПорядковыйНомер + Направление;

	КонецЕсли;

	КодЭлементаЗамены     = СписокКодов.Получить(ИндексЭлементаЗамены).Значение;
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И (НЕ КолонкиОтчетов.ПометкаУдаления)
	|	И КолонкиОтчетов.ПорядковыйНомер = &ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("ПорядковыйНомер",КодЭлементаЗамены);

	Результат=Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		
		Попытка
			
			// Открываем транзакцию
			НачатьТранзакцию();
			
			// Промежуточная запись текущего элемента с уникальным кодом
			ЭтотОбъект.ПорядковыйНомер=10000000;
			ЭтотОбъект.Записать();
						
			// записываем соседний элемент с кодом текущего
			ЭлементЗамены= Результат.Ссылка.ПолучитьОбъект();
			ПредыдущийКод=КодЭлементаЗамены;
			ЭлементЗамены.ПорядковыйНомер = ТекущийНомер;
			ЭлементЗамены.Записать();
			
			// записываем текущий элемент с кодом соседнего
			ЭтотОбъект.ПорядковыйНомер = ПредыдущийКод;
			ЭтотОбъект.Записать();
			
			// Завершаем транзакцию
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось записать элемент справочника:
			|%1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда			
				ПоказатьПредупреждение(, СтрШаблон(СтрокаШаблона, ОписаниеОшибки()));
			КонецЕсли;
			
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры // ИзменитьКод()

Процедура ПриЗаписи(Отказ)
	
	Если ОбновитьПометкуУдаленияДляПодчиненных Тогда
		
		ОбщегоНазначенияУХ.ПометитьСправочникПоРеквизиту("ПоказателиОтчетов","Колонка",Ссылка,ПометкаУдаления,Отказ);
		
		Если (Не Отказ) И ПометкаУдаления Тогда
			
			ОбщегоНазначенияУХ.УдалитьИнформациюОКоординатах(Ссылка,Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ
		И ОбщегоНазначения.ПодсистемаСуществует("ПодсистемыУХ.РасчетПоказателей") Тогда
		МодульУправлениеРасчетомПоказателей = ОбщегоНазначения.ОбщийМодуль("УправлениеРасчетомПоказателей");
		МодульУправлениеРасчетомПоказателей.ОчиститьСтруктуруРасчетаПоказателейПоПравилуРасчета(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоказателиДляИзменения(ТекстВопроса="") Экспорт
	
	Если (Не ЭтоНовый()) И ЗначениеЗаполнено(ВидИтогаПоСчету)  Тогда
		
		// Проверим соответствие групп раскпытий показателей строки группе раскрытия самой строки.
		Запрос=Новый Запрос;
		
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Колонка = &Колонка
		|	И НЕ ПоказателиОтчетов.ПометкаУдаления
		|	И ПоказателиОтчетов.ВидИтогаПоСчету <> &ВидИтогаПоСчету";
		
		Запрос.УстановитьПараметр("ВидИтогаПоСчету", ВидИтогаПоСчету);
											
		Запрос.УстановитьПараметр("Колонка",Ссылка);
		
		Результат=Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество()>0 Тогда
			
			СтрокаШаблона = НСтр("ru = 'Для всех показателей данной строки будет
			|установлен признак остатка/оборота по счету %1
			|Продолжить?'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ТекстВопроса = СтрШаблон(СтрокаШаблона, ВидИтогаПоСчету);
			КонецЕсли;
			
		Иначе
			ТекстВопроса = "";
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
		
КонецФункции // ПолучитьПоказателиДляИзменения()

ОбновитьПометкуУдаленияДляПодчиненных=Ложь;

#КонецЕсли
