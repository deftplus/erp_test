#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполнитьПереходНаПараметр;

#КонецОбласти

#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЗакупкаПоФЗ223.ТолькоПросмотр = ЗначениеЗаполнено(Параметры.Ключ);
	
	// Условное оформление
	УстановитьУсловноеОформление();
	
	Данные = Объект.Ссылка.ХранилищеДереваУсловий.Получить();
	Если ТипЗнч(Данные) = Тип("ДеревоЗначений") Тогда
		
		Если Данные.Колонки.Найти("Терминатор") = неопределено Тогда
			Данные.Колонки.Добавить("Терминатор", ОбщегоНазначения.ОписаниеТипаСтрока(1));
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(Данные, "ДеревоУсловий");
	Иначе
		Дерево = РеквизитФормыВЗначение("ДеревоУсловий");
		Строка = Дерево.Строки.Добавить();
		Строка.ЭтоКорень = Истина;
		ЗначениеВРеквизитФормы(Дерево, "ДеревоУсловий");
	КонецЕсли;
	
	//
	СформироватьСтруктуруДереваРасшифровки();
	
	//
	Если Параметры.Свойство("УИДУсловия") Тогда
		Элементы.ДеревоУсловий.ТекущаяСтрока = ПолучитьИдентификаторСтрокиПОУИДУсловия(Параметры.УИДУсловия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьРежимРасширенныхНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ХранилищеДереваУсловий = Новый ХранилищеЗначения(РеквизитФормыВЗначение("ДеревоУсловий"));
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//
	ИдентификаторыСОшибками = Новый Массив;
	СтруктураПоиска = Новый Структура("Использовать", Истина);
	ПараметрыСОшибками = Объект.ПараметрыЗакупки.НайтиСтроки(СтруктураПоиска);
	// Удаляем из массива строки с заполненными значениями
	Поз = 0;
	Пока Поз < ПараметрыСОшибками.Количество() Цикл
		Если ЗначениеЗаполнено(ПараметрыСОшибками[Поз].Значение) Тогда
			ПараметрыСОшибками.Удалить(Поз);
			Продолжить;
		КонецЕсли;
		Поз = Поз + 1;
	КонецЦикла;
	
	Отказ = ПараметрыСОшибками.Количество() > 0;
	Элементы.ГруппаОшибки.Видимость = Отказ;
	Если Отказ Тогда
		ШаблонСообщения = НСтр("ru = 'Не заполнен параметр %1 в условии %2'");
		Ошибки.Очистить();
		Для Каждого ПараметрЗакупки Из ПараметрыСОшибками Цикл
			Строка = Ошибки.Добавить();
			Строка.Параметр = ПараметрЗакупки.Свойство;
			Строка.ИД = ПараметрЗакупки.ИД;
			//ИдентификаторСтроки = ПолучитьИдентификаторСтрокиПоИД(Строка.ИД);
			Строка.ИдентификаторСтроки = ПереборДереваСПоискомПоИД(ДеревоУсловий.ПолучитьЭлементы(), ПараметрЗакупки.ИД);
			Строка.Описание = СтрШаблон(ШаблонСообщения, ПараметрЗакупки.Свойство, Строка.ИдентификаторСтроки);
		КонецЦикла;
		
		Ошибки.Сортировать("ИдентификаторСтроки, Параметр");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗакупкаПоФЗ223ПриИзменении(Элемент)
	СформироватьСтруктуруДереваРасшифровки();
	РазвернутьВсеСтрокиДерева();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьРежимРасширенныхНастроек(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВключитьРежимРасширенныхНастроекЗавершение", ЭтаФорма),
		НСтр("ru = 'После включения режима расширенных настроек будут доступны дополнительные реквизиты для проверки в дереве условий. 
		|
		|Внимание: После записи положения отменить режим расширенных настроек будет невозможно.
		|
		|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоУсловий

&НаКлиенте
Процедура ДеревоУсловийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		СтрокаДерева = ДеревоУсловий.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Если СтрокаДерева.ПолучитьРодителя() = неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПередУдалением(Элемент, Отказ)
	
	СтрокаДерева = ДеревоУсловий.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если СтрокаДерева.ПолучитьРодителя() = неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТД = Элементы.ДеревоУсловий.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТД.ИД = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПриАктивизацииСтроки(Элемент)
	
	ТД = Элемент.ТекущиеДанные;
	
	// Заполняем ИД для новой строки
	Если НЕ ЗначениеЗаполнено(ТД.ИД) И ТД.ПолучитьРодителя() <> неопределено Тогда
		ТД.ИД = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ЗаполнитьДеревоРасшифровки();
	
	//
	Если ЗначениеЗаполнено(ВыполнитьПереходНаПараметр) Тогда
		ВыполнитьПереходНаПараметр(ВыполнитьПереходНаПараметр);
		ВыполнитьПереходНаПараметр = неопределено; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийВидСравненияПриИзменении(Элемент)
	
	ТД = Элементы.ДеревоУсловий.ТекущиеДанные;
	
	ЭтоСравнениеСоСписком = ТД.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.ВСписке") 
		ИЛИ ТД.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеВСписке");
	ЭтоПроверкаЗаполнения = ТД.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.Заполнено")
		ИЛИ ТД.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеЗаполнено");
	ЗначениеСписок = ТипЗнч(ТД.Значение) = Тип("СписокЗначений");
	
	//
	Если ЭтоСравнениеСоСписком И НЕ ЗначениеСписок Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ТипЗначения = ТД.ТипЗначения;
		Если ЗначениеЗаполнено(ТД.Значение) Тогда
			СписокЗначений.Добавить(ТД.Значение);
		КонецЕсли;
		ТД.Значение = СписокЗначений;
	ИначеЕсли НЕ ЭтоСравнениеСоСписком И ЗначениеСписок Тогда
		Если ТД.Значение.Количество() > 0 Тогда
			ТД.Значение = ТД.Значение[0].Значение;
		Иначе
			ТД.Значение = ТД.ТипЗначения.ПривестиЗначение();
		КонецЕсли;
	ИначеЕсли ЭтоПроверкаЗаполнения Тогда
		ТД.Значение = ТД.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийРеквизитПриИзменении(Элемент)
	
	ТД = Элементы.ДеревоУсловий.ТекущиеДанные;
	ТД.ТипЗначения = ПолучитьТипЗначения(ТД.Реквизит);
	ТД.Значение = ТД.ТипЗначения.ПривестиЗначение(ТД.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПараметров

&НаКлиенте
Процедура ДеревоПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоПараметровПараметр" Тогда
		Строка = ДеревоПараметров.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если НЕ Строка.ЭтоГруппа И Строка.Использовать Тогда
			Строка.ЗапретИзменения = НЕ Строка.ЗапретИзменения;
			ВычислитьИндексКартинкиСтроки(Строка);
			
			ТДУсловия = Элементы.ДеревоУсловий.ТекущиеДанные;
			ТД = Элементы.ДеревоПараметров.ТекущиеДанные;
			
			ЗаписатьИзменениеРеквизитаРасшифровкиNT(ТДУсловия.ИД, ТД);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровИспользоватьПриИзменении(Элемент)
	
	ТД = Элементы.ДеревоПараметров.ТекущиеДанные;
	Если НЕ ТД.Использовать Тогда
		ТД.Значение = ТД.УнаследованноеЗначение;
		ТД.ЗапретИзменения = ТД.УнаследованныйЗапретИзменения;
	КонецЕсли;
	
	ВычислитьИндексКартинкиСтроки(ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровПриИзменении(Элемент)
	
	ТДУсловия = Элементы.ДеревоУсловий.ТекущиеДанные;
	ТД = Элементы.ДеревоПараметров.ТекущиеДанные;
	
	ЗаписатьИзменениеРеквизитаРасшифровкиNT(ТДУсловия.ИД, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровЗначениеПриИзменении(Элемент)
	
	ТД = Элементы.ДеревоПараметров.ТекущиеДанные;
	Если НЕ ТД.Использовать Тогда
		ТД.Использовать = Истина;
		ДеревоПараметровИспользоватьПриИзменении(Элементы.ДеревоПараметровИспользовать);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПараметров

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиНаУсловиеПараметр(ТД.ИД, ТД.Параметр);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьДеревоРасшифровки()
	
	ТД = Элементы.ДеревоУсловий.ТекущиеДанные;
	
	ПараметрыСтроки = ПолучитьПараметрыСтроки(ТД.ИД);
	УнаследованныеЗначения = ПолучитьУнаследованныеЗначения(ТД);
	
	Группы = ДеревоПараметров.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из Группы Цикл
		
		Если НЕ Объект.Субъекты223ФЗ И СтрокаДерева.ИспользуетсяТолькоДля223ФЗ Тогда
			Продолжить;
		КонецЕсли;
		
		СоставГруппы = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ЭлементГруппы Из СоставГруппы Цикл
			
			Параметр = ПараметрыСтроки[ЭлементГруппы.Параметр];
			
			УнаследованноеЗначение = УнаследованныеЗначения[ЭлементГруппы.Параметр];
			Если УнаследованноеЗначение = неопределено Тогда
				ЭлементГруппы.УнаследованноеЗначение = ЭлементГруппы.ТипЗначения.ПривестиЗначение();
			Иначе
				ЭлементГруппы.УнаследованноеЗначение = УнаследованноеЗначение.Значение;
				ЭлементГруппы.УнаследованныйЗапретИзменения = УнаследованноеЗначение.ЗапретИзменения;
			КонецЕсли;
			
			Если Параметр = неопределено ИЛИ НЕ Параметр.Использовать Тогда
				ЭлементГруппы.Использовать = Ложь;
				ЭлементГруппы.ЗапретИзменения = ЭлементГруппы.УнаследованныйЗапретИзменения;
				ЭлементГруппы.Значение = ЭлементГруппы.УнаследованноеЗначение;
			Иначе
				ЗаполнитьЗначенияСвойств(ЭлементГруппы, Параметр, "Значение, Использовать, ЗапретИзменения");
			КонецЕсли;
			
			ВычислитьИндексКартинкиСтроки(ЭлементГруппы);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУнаследованныеЗначения(ТД)
	
	Результат = Новый Соответствие;
	
	Если ТД = неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проход по дереву снизу вверх
	Родитель = ТД.ПолучитьРодителя();
	Пока Родитель <> неопределено Цикл
		
		ПараметрыСтроки = ПолучитьПараметрыСтроки(Родитель.ИД);
		
		Для Каждого Параметр Из ПараметрыСтроки Цикл
			
			// Если значение установлено на более низком уровне, то продолжаем
			Если Результат[Параметр.Ключ] <> неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Параметр.Значение.Использовать = Истина Тогда
				Результат.Вставить(Параметр.Ключ, Новый Структура("Свойство, Значение, ЗапретИзменения", 
					Параметр.Ключ, Параметр.Значение.Значение, Параметр.Значение.ЗапретИзменения));
			КонецЕсли;
			
		КонецЦикла;
		
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруДереваРасшифровки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субъекты223ФЗ", Объект.Субъекты223ФЗ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыЗакупки.Ссылка КАК Параметр,
	|	ПараметрыЗакупки.ЭтоГруппа КАК ЭтоГруппа,
	|	ПараметрыЗакупки.ТипЗначения КАК ТипЗначения,
	|	ВТ_Расшифровка.Значение КАК Значение,
	|	ВТ_Расшифровка.Значение КАК УнаследованноеЗначение,
	|	ВТ_Расшифровка.Использовать КАК Использовать,
	|	ВТ_Расшифровка.ЗапретИзменения КАК ЗапретИзменения,
	|	ВТ_Расшифровка.ЗапретИзменения КАК УнаследованныйЗапретИзменения,
	|	"""" КАК Терминатор,
	|	2 КАК ИндексКартинки,
	|	ПараметрыЗакупки.ИспользуетсяТолькоДля223ФЗ КАК ИспользуетсяТолькоДля223ФЗ
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗакупки КАК ПараметрыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПараметрыЗакупки.Свойство КАК Свойство,
	|			ПараметрыЗакупки.Значение КАК Значение,
	|			ПараметрыЗакупки.Использовать КАК Использовать,
	|			ПараметрыЗакупки.ЗапретИзменения КАК ЗапретИзменения
	|		ИЗ
	|			Справочник.ПоложениеОЗакупках.ПараметрыЗакупки КАК ПараметрыЗакупки
	|		ГДЕ
	|			ПараметрыЗакупки.Ссылка = ЗНАЧЕНИЕ(Справочник.ПоложениеОЗакупках.ПустаяСсылка)) КАК ВТ_Расшифровка
	|		ПО (ВТ_Расшифровка.Свойство = ПараметрыЗакупки.Ссылка)
	|ГДЕ
	|	НЕ ПараметрыЗакупки.ЭтоГруппа
	|	И ПараметрыЗакупки.ПометкаУдаления = ЛОЖЬ
	|	И (&Субъекты223ФЗ = ИСТИНА ИЛИ ПараметрыЗакупки.ИспользуетсяТолькоДля223ФЗ = ЛОЖЬ) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыЗакупки.Код
	|ИТОГИ
	|	МАКСИМУМ(ИндексКартинки)
	|ПО
	|	Параметр ТОЛЬКО ИЕРАРХИЯ";
	Результат = Запрос.Выполнить();
	Дерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПараметров");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменениеРеквизитаРасшифровкиNT(ИД, Строка)
	
	СтруктураПоиска = Новый Структура("ИД, Свойство", ИД, Строка.Параметр);
	Строки = Объект.ПараметрыЗакупки.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() = 0 Тогда
		СтрокаРасшифровки = Объект.ПараметрыЗакупки.Добавить();
		СтрокаРасшифровки.ИД = ИД;
		СтрокаРасшифровки.Свойство = Строка.Параметр;
	Иначе
		СтрокаРасшифровки = Строки[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Строка, "Значение, Использовать, ЗапретИзменения");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ДеревоУсловий

	// "Параметры по умолчанию" для корня
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоУсловийРеквизит");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоУсловий.ЭтоКорень", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Параметры по умолчанию>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серебряный);

	// Для корня не видны колонки видСравнения и Значение
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоУсловийВидСравнения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоУсловийЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоУсловий.ЭтоКорень", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Значение недоступно, если вид сравнения Заполнено или НеЗаполнено
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоУсловийЗначение");
	
	СписокПроверкиЗаполнения = Новый СписокЗначений;
	СписокПроверкиЗаполнения.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	СписокПроверкиЗаполнения.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоУсловий.ВидСравнения", ВидСравненияКомпоновкиДанных.ВСписке, СписокПроверкиЗаполнения);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти 
	
#Область ДеревоПараметров
	// Шрифт групп строк
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПараметровПараметр");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоПараметров.ЭтоГруппа", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт("Шрифт диалогов и меню", 12, Истина));
	
	// Только просмотр строк групп
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПараметровИспользовать");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПараметровПараметр");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПараметровЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоПараметров.ЭтоГруппа", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Серый шрифт для неиспользуемых значений
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПараметровЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоПараметров.Использовать", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серебряный);
	
	// Отметка незаполненого включить
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПараметровЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоПараметров.Использовать", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоПараметров.Значение", ВидСравненияКомпоновкиДанных.НеРавно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоПараметров.Значение", ВидСравненияКомпоновкиДанных.НеЗаполнено, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВычислитьИндексКартинкиСтроки(Строка)
	
	Если Строка.ЭтоГруппа Тогда
		Строка.ИндексКартинки = 2;
		Возврат;
	КонецЕсли;
	
	Строка.ИндексКартинки = ?(Строка.ЗапретИзменения, 0, 1);
	Если НЕ Строка.Использовать Тогда
		Строка.ИндексКартинки = Строка.ИндексКартинки + 3;
	КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыСтроки(ИД)
	
	Результат = Новый Соответствие;
	
	ПараметрыСтроки = Объект.ПараметрыЗакупки.НайтиСтроки(Новый Структура("ИД", ИД));
	Для Каждого ПараметрСтроки Из ПараметрыСтроки Цикл
		Результат.Вставить(ПараметрСтроки.Свойство, ПараметрСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЗначения(РеквизитЗакупки) 
	
	Возврат РеквизитЗакупки.ТипЗначения;
	
КонецФункции

&НаКлиенте
Процедура ВключитьРежимРасширенныхНастроекЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасширенныеНастройки =  Истина;
	
	НастроитьРежимРасширенныхНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРежимРасширенныхНастроек()
	
	Элементы.КнопкаВключитьРежимРасширенныхНастроек.Пометка = Объект.РасширенныеНастройки;
	Элементы.КнопкаВключитьРежимРасширенныхНастроек.Доступность = НЕ Объект.РасширенныеНастройки;
	
	Если Объект.РасширенныеНастройки Тогда
		// все настройки
		Элементы.ДеревоУсловийРеквизит.РежимВыбораИзСписка = Ложь;
		Элементы.ДеревоУсловийРеквизит.СписокВыбора.Очистить();
	Иначе
		// Только часть
		Элементы.ДеревоУсловийРеквизит.СписокВыбора.Очистить();
		Элементы.ДеревоУсловийРеквизит.СписокВыбора.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЗакупки.Номенклатура"));
		Элементы.ДеревоУсловийРеквизит.СписокВыбора.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЗакупки.ТоварнаяКатегория"));
		Элементы.ДеревоУсловийРеквизит.СписокВыбора.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЗакупки.ОКПД2"));
		Элементы.ДеревоУсловийРеквизит.СписокВыбора.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.РеквизитыЗакупки.Приоритет"));
		Элементы.ДеревоУсловийРеквизит.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторСтрокиПОУИДУсловия(УИДУсловия)
	
	Возврат ИдентификаторСтрокиПоУИД(ДеревоУсловий.ПолучитьЭлементы(), УИДУсловия);
	
КонецФункции

&НаСервере
Функция ИдентификаторСтрокиПоУИД(ЭлементыДерева, УИДУсловия)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ИД = УИДУсловия Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		Иначе
			Результат = ИдентификаторСтрокиПоУИД(ЭлементДерева.ПолучитьЭлементы(), УИДУсловия);
			Если Результат <> неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()
	
	Для Каждого Строка Из ДеревоПараметров.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПараметров.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаУсловиеПараметр(ИД, Параметр)
	
 	//ИдентификаторСтроки = ПолучитьИдентификаторСтрокиПоИД(ИД);
 	ИдентификаторСтроки = ПереборДереваСПоискомПоИД(ДеревоУсловий.ПолучитьЭлементы(), ИД);
	Если ИдентификаторСтроки <> неопределено Тогда
		
		Если Элементы.ДеревоУсловий.ТекущаяСтрока = ИдентификаторСтроки Тогда
			ВыполнитьПереходНаПараметр(Параметр);
		Иначе
			ВыполнитьПереходНаПараметр = Параметр;
			Элементы.ДеревоУсловий.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходНаПараметр(Параметр) 
	
	Для Каждого Уровень1 Из ДеревоПараметров.ПолучитьЭлементы() Цикл
		Для Каждого Уровень2 Из Уровень1.ПолучитьЭлементы() Цикл
			Если Уровень2.Параметр = Параметр Тогда
				Элементы.ДеревоПараметров.ТекущаяСтрока = Уровень2.ПолучитьИдентификатор();
				Элементы.ДеревоПараметров.ТекущийЭлемент = Элементы.ДеревоПараметровЗначение;
				Возврат ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПереборДереваСПоискомПоИД(СтрокиДерева, ИД)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИД = ИД Тогда
			Возврат СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
		Результат = ПереборДереваСПоискомПоИД(СтрокаДерева.ПолучитьЭлементы(), ИД);
		Если Результат <> неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
