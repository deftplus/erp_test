

&НаСервере
Процедура УстановитьВидимость(ВидимыеЭлементы)
		
	ВсеЭлементы = Новый Массив;
	ВсеЭлементы.Добавить("ГруппаПоказатель");
	ВсеЭлементы.Добавить("ГруппаКод");
	ВсеЭлементы.Добавить("ГруппаОтборы");

	ВсеЭлементы.Добавить("ГруппаТипБД");
	ВсеЭлементы.Добавить("ГруппаНазначение");
	ВсеЭлементы.Добавить("ДанныеРегистрБухгалтерии");
	ВсеЭлементы.Добавить("ВнутренниеДанныеУпрощенно");
	ВсеЭлементы.Добавить("ВнутренниеДанныеГруппаРаскрытия");
	ВсеЭлементы.Добавить("ДанныеРегистрНакопления");
	ВсеЭлементы.Добавить("ДанныеРегистрСведений");
	ВсеЭлементы.Добавить("ДанныеОбъектБД");
	ВсеЭлементы.Добавить("ГруппаРеквизитОбъектаБД");
	ВсеЭлементы.Добавить("ВидСреза");
	ВсеЭлементы.Добавить("ВнешниеДанныеADO");
	ВсеЭлементы.Добавить("ГруппаТипЗначенияВручную");
	ВсеЭлементы.Добавить("ГруппаМногопериодныйКонтекст");
	ВсеЭлементы.Добавить("ПроизвольныйЗапросКБД");
	ВсеЭлементы.Добавить("СоответствиеАналитик");	

	ВсеЭлементы.Добавить("ТаблицаСоответствияПолеБД");
	ВсеЭлементы.Добавить("ТаблицаСоответствияПсевдонимБД");
	ВсеЭлементы.Добавить("ТаблицаСоответствияПсевдонимКонсолидации");
	ВсеЭлементы.Добавить("ТаблицаСоответствияНастройкаСоответствия");
	ВсеЭлементы.Добавить("ТаблицаСоответствияВидАналитики");
	ВсеЭлементы.Добавить("ПолеСоответствия");
	ВсеЭлементы.Добавить("ГруппаАналитическиеОтчеты");
	
	ВсеЭлементы.Добавить("ДобавитьГруппуИ");
	ВсеЭлементы.Добавить("ДобавитьГруппуИЛИ");
	ВсеЭлементы.Добавить("ДобавитьГруппуНЕ");
	
	ВсеЭлементы.Добавить("ФормаРаспространитьОтборы");
	ВсеЭлементы.Добавить("ЗначениеДляПроверки");
	ВсеЭлементы.Добавить("ФормаИспользоватьШаблон");
	ВсеЭлементы.Добавить("Родитель");
	ВсеЭлементы.Добавить("ТипБД");
	ВсеЭлементы.Добавить("ФормаСоздатьШаблон");
	ВсеЭлементы.Добавить("СтраницаПоляШаблона");
	ВсеЭлементы.Добавить("СтраницаСопоставление");
	
	ВсеЭлементы.Добавить("ГруппаНазначение");
	ВсеЭлементы.Добавить("ГруппаСпособПолучения");
	ВсеЭлементы.Добавить("ГруппаТрансляцияРегистров");
	ВсеЭлементы.Добавить("ГруппаСоответствиеСчетов");

	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		Видимость = ?(ВидимыеЭлементы.Получить(Элемент) = Неопределено,Ложь,ВидимыеЭлементы.Получить(Элемент));
		
		Если НЕ Элементы[Элемент].Видимость = Видимость Тогда
			Элементы[Элемент].Видимость = Видимость;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры


// Устанавливает фон для поля редактирования запроса источника данных в зависимости от 
// возвможности редактирования этого поля.
&НаСервере
Процедура УстановитьФонРедактированияЗапроса()
	Если Элементы.ТекстЗапросаФорма.ТолькоПросмотр Тогда
		Элементы.ТекстЗапросаФорма.ЦветФона = Новый Цвет(242, 242, 242);
	Иначе
		Элементы.ТекстЗапросаФорма.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДляОбразцовогоИсточника(ВидимыеЭлементы)
	
	ВидимыеЭлементы.Вставить("ГруппаНазначение",Ложь);
	ВидимыеЭлементы.Вставить("ФормаРаспространитьОтборы",Ложь);
	ВидимыеЭлементы.Вставить("ТипБД",Ложь);
	ВидимыеЭлементы.Вставить("СтраницаСопоставление",Ложь);
	ВидимыеЭлементы.Вставить("СоответствиеАналитик", Истина);
	ВидимыеЭлементы.Вставить("ЗначениеДляПроверки", Ложь);
	ВидимыеЭлементы.Вставить("ФормаИспользоватьШаблон", Ложь);
	ВидимыеЭлементы.Вставить("ФормаСоздатьШаблон", Ложь);
	ВидимыеЭлементы.Вставить("Родитель", Истина);
	ВидимыеЭлементы.Вставить("СтраницаПоляШаблона", Истина);
	ВидимыеЭлементы.Вставить("СтраницаСопоставление", Ложь);

	Элементы.ГруппаСопоставления.ТекущаяСтраница=Элементы.ГруппаСопоставления.ПодчиненныеЭлементы.СтраницаОтборы;
	
КонецПроцедуры // УстановитьВидимостьДляОбразцовогоИсточника() 

&НаСервере
Процедура УстановитьВидимостьПоСпособуИспользования(ВидимыеЭлементы)
	
	ВидимыеЭлементы.Вставить("ФормаИспользоватьШаблон", Истина);
	ВидимыеЭлементы.Вставить("Родитель", Ложь);
	ВидимыеЭлементы.Вставить("ФормаСоздатьШаблон", Не (ЗначениеЗаполнено(Объект.ИсточникШаблон) ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета));
	ВидимыеЭлементы.Вставить("СтраницаПоляШаблона", Ложь);
	ВидимыеЭлементы.Вставить("СтраницаСопоставление", Истина);
	ВидимыеЭлементы.Вставить("ЗначениеДляПроверки", Истина);

	
	Если Объект.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляПримечаний Тогда
		
		ВидимыеЭлементы.Вставить("ГруппаПоказатель", Истина);
		
	ИначеЕсли Объект.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
		И (Не СтрокаТипПотребительРасчета="РазделыСверкиВГО") Тогда
		
		ВидимыеЭлементы.Вставить("ТипБД", Истина);
		ВидимыеЭлементы.Вставить("ГруппаТипБД", Истина);
		ВидимыеЭлементы.Вставить("СоответствиеАналитик", Истина);
		ВидимыеЭлементы.Вставить("ГруппаАналитическиеОтчеты", Истина);
						
	Иначе
		
		//ВидимыеЭлементы.Вставить("ГруппаПоказатель", Истина);
		ВидимыеЭлементы.Вставить("ГруппаКод", Истина);
		ВидимыеЭлементы.Вставить("СоответствиеАналитик", Истина);
		
		Если Объект.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляКонтрольныхСоотношений Тогда
			
			Элементы.ПотребительРасчета.Заголовок = "Соотношение";


		ИначеЕсли Объект.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД Тогда
			
			Если СтрокаТипПотребительРасчета="СправочникиБД" Тогда
				
				Элементы.ПотребительРасчета.Заголовок = "Справочник";
				
			ИначеЕсли СтрокаТипПотребительРасчета="ДокументыБД" Тогда
				
				Элементы.ПотребительРасчета.Заголовок = "Документ";
				
			ИначеЕсли СтрокаТипПотребительРасчета="ТабличныеЧастиБД" Тогда
				
				Элементы.ПотребительРасчета.Заголовок = "ТабличнаяЧасть";
				
			КонецЕсли;
			
			Элементы.НазначениеРасчетов.Заголовок = НСтр("ru = 'Правило'");
			
		Иначе
			
			Элементы.ПотребительРасчета.Заголовок = НСтр("ru = 'Показатель'");
			Элементы.НазначениеРасчетов.Заголовок = НСтр("ru = 'Правило'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
		И (Не СтрокаТипПотребительРасчета="РазделыСверкиВГО") Тогда
		
		ВидимыеЭлементы.Вставить("ТаблицаСоответствияВидАналитики", Ложь);
		ВидимыеЭлементы.Вставить("ТаблицаСоответствияПсевдонимКонсолидации", Ложь);
		ВидимыеЭлементы.Вставить("ТаблицаСоответствияПсевдонимБД", Истина);
		
	Иначе
		
		Если ВнутренниеДанные И (НЕ ДляЭкспортаДанных) Тогда
			ВидимыеЭлементы.Вставить("ТаблицаСоответствияВидАналитики", Истина);
		Иначе
			ВидимыеЭлементы.Вставить("ТаблицаСоответствияНастройкаСоответствия", Истина);
			ВидимыеЭлементы.Вставить("ПолеСоответствия", Истина);
		КонецЕсли;
		
		ВидимыеЭлементы.Вставить("ТаблицаСоответствияПсевдонимКонсолидации", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьПоСпособуИспользования() 

&НаСервере
Процедура ВидимостьДоступность()
	
	Если ЗначениеЗаполнено(Объект.СпособПолучения) Тогда
		Если Использование77(Истина) Тогда
			Если Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
					 ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
					 ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
					 ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
					 ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
				Объект.СпособПолучения = Неопределено;
				Сообщить(НСтр("ru = 'Изменен тип платформы. Выберите снова вид подключения'"));
			КонецЕсли;
		Иначе
			Если Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		 	ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
				Объект.СпособПолучения = Неопределено;
				Сообщить(НСтр("ru = 'Изменен тип платформы. Выберите снова вид подключения'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВнутренниеДанные = ВнутренниеДанные(Истина);
		
	ВидимыеЭлементы = Новый Соответствие;
	ВидимыеЭлементы.Вставить("ТаблицаСоответствияПолеБД", Истина);
	ВидимыеЭлементы.Вставить("ГруппаОтборы",Истина);
	ВидимыеЭлементы.Вставить("ДобавитьГруппуИ", Истина);
	ВидимыеЭлементы.Вставить("ДобавитьГруппуИЛИ", Истина);
	ВидимыеЭлементы.Вставить("ДобавитьГруппуНЕ", Истина);
	
	Элементы.ГруппаШаблон.Видимость=(ИдентификацияПродуктаУХКлиентСервер.ВерсияУправлениеХолдингом()="3.2"); 
	
	Если Объект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные Тогда
		
		УстановитьВидимостьДляОбразцовогоИсточника(ВидимыеЭлементы);

	Иначе
		
		УстановитьВидимостьПоСпособуИспользования(ВидимыеЭлементы);
						
	КонецЕсли;
	
	Если ТипЗнч(Объект.НазначениеРасчетов)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
		
		ВидимыеЭлементы.Вставить("ГруппаНазначение", Ложь);
		ВидимыеЭлементы.Вставить("ФормаИспользоватьШаблон", Ложь);

		Элементы.ГруппаСпособПолучения.Видимость=Ложь;
		Элементы.ГруппаСоответствиеСчетов.Видимость=Ложь;
		Элементы.ГруппаОтборы.Видимость=Ложь;
		Элементы.ПанельПравила.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		Элементы.ФормаПроверитьОперанд.Видимость=Ложь;
		Элементы.ФормаРаспространитьОтборы.Видимость=Ложь;
		
		Элементы.ГруппаНазначение.ТолькоПросмотр		= Истина;
		Элементы.ГруппаСпособПолучения.ТолькоПросмотр	= Истина;

	ИначеЕсли ТипЗнч(Объект.ПотребительРасчета)=Тип("СправочникСсылка.СоответствияСчетовДляТрансляции") Тогда
		
		ВидимыеЭлементы.Вставить("ГруппаНазначение", Ложь);
		ВидимыеЭлементы.Вставить("ГруппаСпособПолучения", Ложь);
		Элементы.ГруппаНаименование.Видимость=Ложь;
		ВидимыеЭлементы.Вставить("ФормаИспользоватьШаблон", Ложь);
		
		Если ЗначениеЗаполнено(Объект.ИсточникШаблон) Тогда // Трансляция из регистров
			
			ВидимыеЭлементы.Вставить("ГруппаТрансляцияРегистров",Истина);
			Элементы.ИсточникШаблон.Видимость=Ложь;
				
		Иначе
			
			ВидимыеЭлементы.Вставить("ГруппаСоответствиеСчетов",Истина);
			Элементы.ИсточникШаблон.Видимость=Ложь;
			
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ОбъектУчета) Тогда
		
		ВидимыеЭлементы.Вставить("ГруппаНазначение",Ложь);
		ВидимыеЭлементы.Вставить("ГруппаСпособПолучения",Истина);
		ВидимыеЭлементы.Вставить("ГруппаСоответствиеСчетов",Ложь);

		
	Иначе

		
		ВидимыеЭлементы.Вставить("ГруппаНазначение",Истина);
		ВидимыеЭлементы.Вставить("ГруппаСпособПолучения",Истина);
		ВидимыеЭлементы.Вставить("ГруппаСоответствиеСчетов",Ложь);
		
		Элементы.ИсточникШаблон.Видимость=ЗначениеЗаполнено(Объект.ИсточникШаблон);
				
	КонецЕсли;

			
	
	Если Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии 
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		ВидимыеЭлементы.Вставить("ДанныеРегистрБухгалтерии", Истина);
				
		Элементы.Счет.Доступность  = ЗначениеЗаполнено(ПланСчетов);
		Элементы.РесурсРегистра.Доступность = Элементы.РесурсРегистра.СписокВыбора.Количество() > 1;
		Элементы.ВидИтога.Доступность = Элементы.ВидИтога.СписокВыбора.Количество() > 1;
		Элементы.ДтКт.Доступность = Элементы.ДтКт.СписокВыбора.Количество() > 0;
		
		Элементы.КоррСчет.Видимость = Объект.ВидИтога = "Оборот" ИЛИ Объект.ВидИтога = "КорДО";
		Элементы.ДтКт.Видимость = НЕ (Использование77() И Объект.ВидИтога="КорДО" ИЛИ Элементы.ДтКт.СписокВыбора.Количество() = 0);
		
		ОбработатьПолеВыбораПланаСчетов();
		
	ИначеЕсли Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		ВидимыеЭлементы.Вставить("ДанныеРегистрНакопления", Истина);
		
	ИначеЕсли Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		ВидимыеЭлементы.Вставить("ДанныеРегистрСведений", Истина);
		Если ТипЗнч(Объект.РегистрБД) = Тип("СправочникСсылка.РегистрыСведенийБД") И Объект.РегистрБД.Периодический Тогда
			ВидимыеЭлементы.Вставить("ВидСреза", Истина);
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		ВидимыеЭлементы.Вставить("ВнешниеДанныеADO", Истина);
		ВидимыеЭлементы.Вставить("ТипЗначения", Истина);
		ВидимыеЭлементы.Вставить("ДобавитьГруппуИ", Ложь);
		ВидимыеЭлементы.Вставить("ДобавитьГруппуИЛИ", Ложь);
		ВидимыеЭлементы.Вставить("ДобавитьГруппуНЕ", Ложь);
				
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		ВидимыеЭлементы.Вставить("ВнутренниеДанныеУпрощенно", Истина);
		Элементы.ВидОтчетаОтбор.Заголовок = НСтр("ru = 'Вид отчета'");
		Элементы.ПоказательОтбор.Заголовок = НСтр("ru = 'Показатель'");
		
		ВидимыеЭлементы.Вставить("ФормаРаспространитьОтборы", Истина);
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		ВидимыеЭлементы.Вставить("ВнутренниеДанныеГруппаРаскрытия", Истина);
		Элементы.ВидОтчетаОтбор.Заголовок = НСтр("ru = 'Вид отчета'");
		Элементы.ПоказательОтбор.Заголовок = НСтр("ru = 'Показатель'");
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		
		ВидимыеЭлементы.Вставить("ВнутренниеДанныеУпрощенно", Истина);
		Элементы.ВидОтчетаОтбор.Заголовок = НСтр("ru = 'Шаблон корректировки'");
		Элементы.ПоказательОтбор.Заголовок = НСтр("ru = 'Проводка'");		
				
	ИначеЕсли Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		ВидимыеЭлементы.Вставить("ПроизвольныйЗапросКБД", Истина);		
		ВидимыеЭлементы.Вставить("ТипЗначения", Истина);
		
	ИначеЕсли Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
		
		ВидимыеЭлементы.Вставить("ДанныеОбъектБД", Истина);
		ВидимыеЭлементы.Вставить("ГруппаКод",Ложь);
		
		Элементы.СпособПолучения.Доступность=НЕ(ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ИсходныйОбъектБД",Объект.НазначениеРасчетов) И ЗначениеЗаполнено(Объект.НазначениеРасчетов.ИсходныйОбъектБД));
		Элементы.ОбъектБД.ТолькоПросмотр	= НЕ Элементы.СпособПолучения.Доступность;
		Элементы.ГруппаОтборы.Видимость		= Элементы.СпособПолучения.Доступность;
				
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД Тогда
		
		ВидимыеЭлементы.Вставить("ГруппаРеквизитОбъектаБД", Истина);
		ВидимыеЭлементы.Вставить("ГруппаКод",	Ложь);
		ВидимыеЭлементы.Вставить("ГруппаОтборы",Ложь);
		
	КонецЕсли;
	
	Если РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет()
		И Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		ВидимыеЭлементы.Вставить("ГруппаМногопериодныйКонтекст", Истина);
		
	КонецЕсли;		
	
	ТолькоПросмотр = Не Справочники.ИсточникиДанныхДляРасчетов.РедактированиеНазначенияРасчетов(Объект.НазначениеРасчетов);
	
	Если Объект.ПотребительРасчета = Неопределено ИЛИ СтрокаТипПотребительРасчета="ШаблоныУниверсальныхПроцессов" Тогда
		ВидимыеЭлементы.Вставить("ГруппаПоказатель", Истина);
		Элементы.ГруппаПоказатель.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// Значения параметров для источника данных условного перехода задаются в форме настройке условного перехода.
	Элементы.УточнениеСпособаОпределения.Видимость = (СтрокаТипПотребительРасчета <> "ШаблоныУниверсальныхПроцессов");
	
	Элементы.СтраницаОтборыШаблон.Видимость=ЗначениеЗаполнено(Объект.ИсточникШаблон);
	
	Элементы.РедактироватьТекстЗапроса.Доступность=(Не ЗначениеЗаполнено(Объект.ИсточникШаблон));
	Элементы.КонструкторЗапроса.Доступность=Элементы.РедактироватьТекстЗапроса.Доступность;

	Элементы.РесурсРегистраБД.Видимость=НЕ ЗначениеЗаполнено(Объект.ОбъектУчета);
	Элементы.ВидИтогаБД.Видимость=Элементы.РесурсРегистраБД.Видимость;
	
	УстановитьВидимость(ВидимыеЭлементы);

	// Цвет фона редактирования запроса.
	УстановитьФонРедактированияЗапроса();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТНЫЕ СЕРВЕРНЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ОпределитьСпособИспользования(РабочийОбъект)
	
	Если ЗначениеЗаполнено(РабочийОбъект.СпособИспользования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаТипПотребительРасчета="РазделыСверкиВГО" Тогда
		
		РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляСверкиВГО;
		
	ИначеЕсли СтрокаТипНазначениеРасчетов="ПравилаПроверки" Тогда
		
		РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляКонтрольныхСоотношений;
		
	ИначеЕсли СтрокаТипНазначениеРасчетов="ПроизвольныеОтчеты" Тогда
		
		РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов;
		
	ИначеЕсли СтрокаТипНазначениеРасчетов="ПравилаЗаполненияОбъектовБД" Тогда
		
		РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД;
		
		Если ЗначениеЗаполнено(РабочийОбъект.НазначениеРасчетов.ИсходныйОбъектБД) Тогда
			
			Если РабочийОбъект.НазначениеРасчетов.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
				
				РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы;
				
			Иначе
				
				РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы;
				
			КонецЕсли;
			
			РабочийОбъект.ОбъектБД=РабочийОбъект.НазначениеРасчетов.ИсходныйОбъектБД;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(РабочийОбъект.НазначениеРасчетов.Владелец) Тогда
			РабочийОбъект.ТипБДПриемник = РабочийОбъект.НазначениеРасчетов.Владелец.Владелец;
			Объект.ТипБДПриемник = РабочийОбъект.ТипБДПриемник;
		Иначе
			РабочийОбъект.ТипБДПриемник = Справочники.ТипыБазДанных.ТекущаяИБ;
			Объект.ТипБДПриемник = Справочники.ТипыБазДанных.ТекущаяИБ;
		КонецЕсли;
		
	Иначе
		
		РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьСпособИспользования() 

&НаСервере
Процедура УстановитьТолькоПросмотрПоШаблону(ПоляШаблона)
	
	Если ПоляШаблона=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Поле ИЗ ПоляШаблона Цикл
		
		Элементы[Поле].ТолькоПросмотр=Истина;
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьТолькоПросмотрПоШаблону()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РабочийОбъектАдрес=Параметры.РабочийОбъектАдрес;
	РабочийОбъект=ПолучитьРабочийОбъект();	
	Если РабочийОбъект.ЭтоНовый() Тогда
		
		Если РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные Тогда
			
			НоваяСтрока=РабочийОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсПриемник="СуммаВВалютеУчета";
			
			НоваяСтрока=РабочийОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсПриемник="СуммаВВалюте";
			
			НоваяСтрока=РабочийОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсПриемник="Количество";
			
		КонецЕсли;
		
		Если Параметры.ЗначениеКопирования=Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка() Тогда
			
			Если ЗначениеЗаполнено(Параметры.АдресПараметровШаблона) Тогда
				
				РабочийОбъект.СоздатьШаблонПоПараметрам(Параметры.АдресПараметровШаблона);
				ПоместитьДанныеОбъектаВРеквизитыФормы(РабочийОбъект);
				УстановитьТолькоПросмотрПоШаблону(РабочийОбъект.ПоляШаблона);

			ИначеЕсли Параметры.ЗначенияЗаполнения.Количество()=0 Тогда
				
				РабочийОбъект.НазначениеРасчетов=Параметры.НазначениеРасчетов;
				РабочийОбъект.ПотребительРасчета=Параметры.ПотребительРасчета;
				РабочийОбъект.СпособИспользования=Параметры.СпособИспользования;
				
				Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ТипБД",РабочийОбъект.НазначениеРасчетов) Тогда
					РабочийОбъект.ТипБД=РабочийОбъект.НазначениеРасчетов.ТипБД;
					Объект.ТипБД=РабочийОбъект.ТипБД;
				КонецЕсли;
				
			Иначе
				
				РабочийОбъект.ПодготовитьОбъектПоИсточнику(Параметры.ЗначенияЗаполнения);
				ПоместитьДанныеОбъектаВРеквизитыФормы(РабочийОбъект);
				УстановитьТолькоПросмотрПоШаблону(РабочийОбъект.ПоляШаблона);
				
			КонецЕсли;
			
			ОпределитьСтрокиТипов(РабочийОбъект);
			ОпределитьСпособИспользования(РабочийОбъект);
						
		Иначе
			
			РабочийОбъект.ЗначениеКопирования=Параметры.ЗначениеКопирования;
			ОпределитьСтрокиТипов(РабочийОбъект);
			
		КонецЕсли;			
		
		Если РабочийОбъект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
			РабочийОбъект.ТолькоАналитическиеЗначения = Истина;
		КонецЕсли;
		
	Иначе
		
		КодУпрощеннойФормулы=ОбщегоНазначенияУХ.ПрочитатьКодУпрощеннойФормулы(РабочийОбъект.Ссылка);
		ОпределитьСтрокиТипов(РабочийОбъект);
		
		РабочийОбъект.ОпределитьПоляШаблона();
		УстановитьТолькоПросмотрПоШаблону(РабочийОбъект.ПоляШаблона); 
		
	КонецЕсли;
	
	Если РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета
		ИЛИ РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляПримечаний Тогда
		
		Если ЗначениеЗаполнено(РабочийОбъект.ПотребительРасчета) Тогда
			ВидОтчета = РабочийОбъект.ПотребительРасчета.Владелец;
		Иначе
			ВидОтчета = Справочники.ВидыОтчетов.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД Тогда
		
		Если СтрокаТипПотребительРасчета="ПоказателиОбъектовБД"
			ИЛИ СтрокаТипПотребительРасчета="ТабличныеЧастиБД" Тогда
			
			ОбъектБДПриемник=РабочийОбъект.ПотребительРасчета.Владелец;
						
		Иначе
			
			ОбъектБДПриемник=РабочийОбъект.ПотребительРасчета;
			
		КонецЕсли;
			
		ДляЭкспортаДанных=НЕ Объект.ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ;
				
	КонецЕсли;
	
	ПараметрыКорректировки=РабочийОбъект.ПараметрыКорректировки();
	
	ДляФормированияКорректировок=ПараметрыКорректировки.Корректировка;
	ДокументБД=ПараметрыКорректировки.ДокументБД;
						
	Если НЕ (РабочийОбъект.ЭтоНовый() И Параметры.ЗначениеКопирования=Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка()) Тогда
		
		ВосстановитьНастройкиОперанда(РабочийОбъект);
		
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.АдресПараметровШаблона) Тогда
		
		РабочийОбъект.ЗаполнитьНачальныеНастройки();
		РабочийОбъект.СформироватьТаблицуСоответствияБД();
		
	КонецЕсли;
		
	ВнутренниеДанные=РабочийОбъект.ВнутренниеДанные();
	
	ТекстЗапросаФорма=РабочийОбъект.ТекстЗапросаМодуля;
	
	Если РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		ВидОтчетаОтбор = РабочийОбъект.ПоказательОтбор.Владелец;
	ИначеЕсли РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		ВидОтчетаОтбор=РабочийОбъект.ГруппаРаскрытияОтбор.Владелец;
	КонецЕсли;
		
	Элементы.РегистрБухгалтерииБД.ДоступныеТипы = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.РегистрыБухгалтерииБД");
	Элементы.РегистрНакопленияБД.ДоступныеТипы = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.РегистрыНакопленияБД");
	Элементы.РегистрСведенийБД.ДоступныеТипы = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.РегистрыСведенийБД");
		
	Если Не ЗначениеЗаполнено(РабочийОбъект.СпособПолучения) Тогда
		РабочийОбъект.СпособПолучения=Объект.СпособПолучения;
	КонецЕсли;
		
	ДанныеАналитики=РабочийОбъект.ДанныеАналитики;
		
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	СформироватьСписокВозможныхСпособовЗаполнения(РабочийОбъект.СпособИспользования);
	СформироватьСписокВозможныхСпособовПолучения();
	
	Элементы.ТекстЗапросаФорма.ТолькоПросмотр=Истина;
	Элементы.РедактироватьТекстЗапроса.Пометка = Ложь;
	Элементы.ФормаИспользоватьШаблон.Пометка=ЗначениеЗаполнено(Объект.ИсточникШаблон);
		
	УстановитьВидимостьСервер();
	
	Если ТипЗнч(Объект.НазначениеРасчетов)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
		
		Элементы.ГруппаНазначение.Видимость=Ложь;
		Элементы.ГруппаСпособПолучения.Видимость=Ложь;
		Элементы.ГруппаСоответствиеСчетов.Видимость=Ложь;
		Элементы.ГруппаОтборы.Видимость=Ложь;
		Элементы.ПанельПравила.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		Элементы.ФормаПроверитьОперанд.Видимость=Ложь;
		Элементы.ФормаРаспространитьОтборы.Видимость=Ложь;
		
		Элементы.ГруппаНазначение.ТолькоПросмотр		= Истина;
		Элементы.ГруппаСпособПолучения.ТолькоПросмотр	= Истина;

	ИначеЕсли Объект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД Тогда
		
		Элементы.ГруппаСоответствиеСчетов.Видимость=Ложь;
		
	Иначе
		
		СоответствиеСчетов=СтрокаТипНазначениеРасчетов="ПравилаОбработки" И ЗначениеЗаполнено(Объект.НазначениеРасчетов.НаправлениеТрансляции);
				
	КонецЕсли;
	
	Если СоответствиеСчетов Тогда
		
		Если Объект.НазначениеРасчетов.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии Тогда
			
			ЗаполнитьДанныеПоСоответствиюСчетов();
			
		Иначе
			
			СчетИсточник=?(ЗначениеЗаполнено(Объект.ПоказательОтбор.СчетБД),Объект.ПоказательОтбор.СчетБД,Объект.Счет);
			
			Если СтрокаТипПотребительРасчета="СоответствияСчетовДляТрансляции" Тогда
				
				СчетПриемник=Объект.ПотребительРасчета.СчетПриемник;
				
			Иначе
				
				СчетПриемник=Объект.ПотребительРасчета.СчетБД;
				
			КонецЕсли;
			
			ПланСчетовИсточник=СчетИсточник.Владелец;
			ПланСчетовПриемник=СчетПриемник.Владелец;
			
			Для Каждого СтрПараметр ИЗ ТабПравилаВычисленияПараметров Цикл
				
				Если СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета
					ИЛИ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета
					ИЛИ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия
					ИЛИ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
					ИЛИ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета
					ИЛИ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НоваяСтрока=ТабПравилаВычисленияПараметровСоответствие.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПараметр);
				
			КонецЦикла;
			
			Элементы.КоррСчетИсточник.Видимость=НЕ Объект.НазначениеРасчетов.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO
		И (Объект.ТипБД.ВИБПоУмолчанию.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.MSAccess 
		ИЛИ Объект.ТипБД.ВИБПоУмолчанию.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS) Тогда
		
		Если ЗначениеЗаполнено(Объект.НазначениеРасчетов) Тогда
			ИмяПоВидуОтчета = УправлениеОтчетамиУХ.ПолучитьИмяФайлаПоВидуОтчета(Объект.НазначениеРасчетов.Владелец);
		Иначе
			ИмяПоВидуОтчета = "";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяПоВидуОтчета) Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ТаблицыADO.ИмяФайла
			|ИЗ
			|	Справочник.ТаблицыADO КАК ТаблицыADO
			|ГДЕ
			|	ТаблицыADO.Владелец = &ТипБД
			|	И ТаблицыADO.ИмяФайла ПОДОБНО &ИмяФайла";
			
			Запрос.УстановитьПараметр("ТипБД",Объект.ТипБД);
			Запрос.УстановитьПараметр("ИмяФайла",ИмяПоВидуОтчета+"%");
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Если СтрНайти(Результат.ИмяФайла,ИмяПоВидуОтчета+".")>0 Тогда
					
					ИмяФайла=Результат.ИмяФайла;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтбор=Новый ФиксированнаяСтруктура("АналитикаОтчета",Ложь);
	Элементы.ТаблицаСоответствия.ОтборСтрок=СтруктураОтбор;
	
	СоответствиеГруппыУсловияСервер=Новый Соответствие;
	СоответствиеГруппыУсловияСервер.Вставить(Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ,"ГруппаУсловийИ");
	СоответствиеГруппыУсловияСервер.Вставить(Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ,"ГруппаУсловийИЛИ");
	СоответствиеГруппыУсловияСервер.Вставить(Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ,"ГруппаУсловийНЕ");
	
	СоответствиеГруппыУсловия=Новый ФиксированноеСоответствие(СоответствиеГруппыУсловияСервер);
	
	КодСтар=СокрЛП(Объект.Код);
	КодУпрощеннойФормулыСтар=СокрЛП(КодУпрощеннойФормулы);
	
	ПроизвольныйЗапрос = (Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос);
	
КонецПроцедуры  

Процедура ЗаполнитьДанныеПоСоответствиюСчетов()
		
	ДанныеНастройки=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПотребительРасчета,"Владелец,СчетПриемник,ОбъектУчетаИсточник,ОбъектНастройки,КоррОбъектУчетаИсточник,КоррОбъектНастройки");
	СчетПриемник=				ДанныеНастройки.СчетПриемник;
	ОбъектУчетаИсточник			= ДанныеНастройки.ОбъектУчетаИсточник;
	КоррОбъектНастройки			= ДанныеНастройки.КоррОбъектУчетаИсточник;
	ОбъектНастройки				= ДанныеНастройки.ОбъектНастройки;
	КоррОбъектНастройки			= ДанныеНастройки.КоррОбъектНастройки;
	ШаблонТрансляции			= ДанныеНастройки.Владелец;
	
	Если ЗначениеЗаполнено(Объект.ИсточникШаблон) Тогда
		
		ДанныеШаблона=Обработки.УстановкаСоответствияСчетов.ПолучитьДанныеШаблона(ШаблонТрансляции);
		
		ПризнакиУчета=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ДанныеШаблона.ПланСчетовПриемник.ПризнакиУчета);
		
		Для Каждого СтрРесурс ИЗ ДанныеШаблона.РегистрБухгалтерииПриемник.Ресурсы Цикл
			
			Если ПустаяСтрока(СтрРесурс.ПризнакУчета) ИЛИ СтрНайти(СчетПриемник.ПризнакиУчета,СтрРесурс.ПризнакУчета)>0 Тогда
				
				Элементы.РесурсПриемникТрансляция.СписокВыбора.Добавить(СтрРесурс.Имя,СтрРесурс.Синоним);
				
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЕсли; 
	
	Элементы.ОбъектНастройки.Видимость=ЗначениеЗаполнено(ОбъектНастройки);
	
	Элементы.КоррОбъектУчетаИсточник.Видимость=ЗначениеЗаполнено(КоррОбъектНастройки);
	Элементы.КоррОбъектНастройки.Видимость=ЗначениеЗаполнено(КоррОбъектНастройки);
	
	Элементы.СтраницаОтборыШаблон.Видимость=Ложь;
		
КонецПроцедуры // ЗаполнитьДанныеПоСоответствиюСчетов()
	

&НаСервере
Процедура ОпределитьСтрокиТипов(РабочийОбъект)
		
	СтрокаТипНазначениеРасчетов=ОбщегоНазначенияУХ.ПолучитьИмяОбъектаМетаданных(РабочийОбъект.НазначениеРасчетов);
	СтрокаТипПотребительРасчета=ОбщегоНазначенияУХ.ПолучитьИмяОбъектаМетаданных(РабочийОбъект.ПотребительРасчета);
	
КонецПроцедуры // ОпределитьСтрокиТипов() 

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета=РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();
	
	РабочийОбъект.ДеревоПолейБД						= РеквизитФормыВЗначение("ДеревоПолейБД");
	РабочийОбъект.ДеревоПараметровОтбораБД			= РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	РабочийОбъект.ТаблицаСоответствияБД				= РеквизитФормыВЗначение("ТаблицаСоответствияБД");
	
	РабочийОбъект.КодУпрощеннойФормулы=КодУпрощеннойФормулы;
	
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьРабочийОбъект()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект,СохранятьНастройки=Ложь)
	
	Если СохранятьНастройки Тогда
		
		ДеревоПолейБДСтар=РеквизитФормыВЗначение("ДеревоПолейБД");
		
	КонецЕсли;
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
	Если СохранятьНастройки Тогда
		
		Если ИзмененыПоляИсточника(ДеревоПолейБДСтар,РабочийОбъект.ДеревоПолейБД) Тогда
			
			ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПолейБД,			ДеревоПолейБД);
			ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПараметровОтбораБД,	ДеревоПараметровОтбораБД);
			ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(РабочийОбъект.ТаблицаСоответствияБД,	ТаблицаСоответствияБД);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПолейБД,			ДеревоПолейБД);
		ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПараметровОтбораБД,	ДеревоПараметровОтбораБД);
		ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(РабочийОбъект.ТаблицаСоответствияБД,	ТаблицаСоответствияБД);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
				
КонецПроцедуры // ПолучитьРабочийОбъект()

&НаСервере
Функция ИзмененыПоляИсточника(ДеревоПолейБДСтар,ДеревоПолейБДНов)
	
	Если ДеревоПолейБДСтар.Строки.Количество()=0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Для Каждого СтрокаКорень ИЗ ДеревоПолейБДСтар.Строки Цикл
		
		Для Каждого СтрокаСтар ИЗ СтрокаКорень.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСтар.ПолеБД) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МассивНов=ДеревоПолейБДНов.Строки.НайтиСтроки(Новый Структура("ПолеБД",СтрокаСтар.ПолеБД),Истина);
			
			Если МассивНов.Количество()=0 Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			СтрокаНов=МассивНов[0];
			
			Для Каждого Элемент ИЗ СтрокаСтар.ТипЗначения Цикл
				
				Если СтрокаНов.ТипЗначения.НайтиПоЗначению(Элемент.Значение)=Неопределено Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
					
КонецФункции // ИзмененыПоляИсточника() 
	
&НаСервере
Процедура ОбновитьОбъектВХранилище()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьОбъектВХранилище()

&НаСервере
Функция ВыполнитьПроверкуОперанда()
	
	ТабличныйДокумент=Новый ТабличныйДокумент;
	
	Попытка
		
		Записать();
		
		РезультатЗапроса = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Неопределено,Объект.Ссылка,Истина); 
		
		Если РезультатЗапроса=Неопределено ИЛИ РезультатЗапроса.Колонки.Количество()=0 Тогда
			
			Возврат ТабличныйДокумент;
			
		КонецЕсли;
		
		ПостроительОтчета=Новый ПостроительОтчета;	
		ИсточникДанных=Новый ОписаниеИсточникаДанных(РезультатЗапроса);
		
		ПостроительОтчета.ИсточникДанных=ИсточникДанных;
		ПостроительОтчета.Вывести(ТабличныйДокумент);
		
		Возврат ТабличныйДокумент; 
		
	Исключение
		
		Возврат ТабличныйДокумент; 
		
	КонецПопытки;	
		
КонецФункции // ВыполнитьПроверкуОперанда() 

&НаСервере
Процедура ВосстановитьНастройкиОперанда(РабочийОбъект)
	
	РабочийОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
	ПоместитьДанныеОбъектаВРеквизитыФормы(РабочийОбъект);
	
	Если ЗначениеЗаполнено(РабочийОбъект.ИсточникШаблон) Тогда
		
		РабочийОбъект.ПодготовитьДанныеИнтерфейсаПоШаблону();
		ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПараметровОтбораБДШаблон,ДеревоПараметровОтбораБДШаблон);
		УстановитьТолькоПросмотрПоШаблону(РабочийОбъект.ПоляШаблона);

	КонецЕсли;	
						
КонецПроцедуры // ВосстановитьНастройкиОперанда()

&НаСервере
Процедура ПоместитьДанныеОбъектаВРеквизитыФормы(РабочийОбъект)
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПолейБД,ДеревоПолейБД);
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПараметровОтбораБД,ДеревоПараметровОтбораБД);
    ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(РабочийОбъект.ТаблицаСоответствияБД,ТаблицаСоответствияБД);
	
	ПланСчетов=РабочийОбъект.ПланСчетовБД;
	
	Если РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистра.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтога.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт,Элементы.ДтКт.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсИсточникТрансляция.СписокВыбора);
		
	ИначеЕсли РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтогаБД.СписокВыбора);	
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистраБД.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсИсточникТрансляция.СписокВыбора);
		
	ИначеЕсли РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистраСведений.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсИсточникТрансляция.СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры // ПоместитьДанныеОбъектаВРеквизитыФормы()

&НаСервере
Процедура ПриИзмененииСпособаИспользования()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ЗаполнитьНачальныеНастройки();
	ПоместитьРабочийОбъект(РабочийОбъект);
		
	УстановитьВидимостьСервер();
	СформироватьСписокВозможныхСпособовПолучения();
	
КонецПроцедуры 

&НаСервере
Функция Использование77(ОбновитьИспользование=Ложь)
	
	Если Использование77 = Неопределено ИЛИ ОбновитьИспользование Тогда
		
		Использование77=(Объект.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);
		
	КонецЕсли;
	
	Возврат Использование77;
	
КонецФункции

&НаСервере
Функция ВнешнееСоединение(ОбновитьДанные = Ложь)
	
	Если ВнешнееСоединение=Неопределено ИЛИ ОбновитьДанные Тогда 
		
		ВнешнееСоединение= (Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПараметрическаяНастройка
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ Объект.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO);
		
	КонецЕсли;
	
	Возврат ВнешнееСоединение
	
КонецФункции //

&НаСервере
Функция ВнутренниеДанные(ОбновитьДанные = Ложь) Экспорт
	
	Если ВнутренниеДанные=Неопределено ИЛИ ОбновитьДанные Тогда
		
		ВнутренниеДанные = (Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД);
		
	КонецЕсли;
	
	Возврат ВнутренниеДанные;
		
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСервер()
	
	ВидимостьДоступность();
			
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ПриИзмененииПотребителяРасчета()
	
	РабочийОбъект = ПолучитьРабочийОбъект();
	РабочийОбъект.ПравилаИспользованияПолейЗапроса.Очистить();
	
	РабочийОбъект.ЗаполнитьНачальныеНастройки();	
	РабочийОбъект.СформироватьТаблицуСоответствияБД();
	
	Если РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета
		ИЛИ  РабочийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляПримечаний Тогда
	
		ВидОтчета = РабочийОбъект.ПотребительРасчета.Владелец;
				
	КонецЕсли;
	
	ОпределитьСтрокиТипов(РабочийОбъект);
	СформироватьСписокВозможныхСпособовПолучения();
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	УстановитьВидимостьСервер();
		
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииПоказателяОтбор()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииПоказателяОтбор();	
	КодУпрощеннойФормулы=РабочийОбъект.КодУпрощеннойФормулы;
 
	ПоместитьРабочийОбъект(РабочийОбъект);	
	// Проверим, что вид отчета выбранного показателя совпадает с видом отчета на форме.
	Если ЗначениеЗаполнено(Объект.ПоказательОтбор) Тогда
		ВидОтчетаПоказателя = Объект.ПоказательОтбор.Владелец;
		Если ВидОтчетаПоказателя <> ВидОтчета Тогда
			ВидОтчетаОтбор = ВидОтчетаПоказателя;
			ПриИзмененииВидаОтчетаОтбор();
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;	
	Иначе
		// Пустой показатель. Не осуществляем проверку.
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииВидаОтчетаОтбор()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ВидОтчетаОтбор=ВидОтчетаОтбор;
	РабочийОбъект.ПриИзмененииВидаОтчетаОтбор();
	
	ПоместитьРабочийОбъект(РабочийОбъект);	
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииРесурсаСчета()

	РабочийОбъект=ПолучитьРабочийОбъект();
	
	РабочийОбъект.УстановитьВозможностьДтКт();
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт, Элементы.ДтКт.СписокВыбора);
	
	Элементы.ДтКт.Видимость=Элементы.ДтКт.СписокВыбора.Количество()>0;
	
	ПоместитьРабочийОбъект(РабочийОбъект);	
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииВидаИтога()
			
	Если НЕ (Объект.ВидИтога = "Оборот" ИЛИ Объект.ВидИтога = "КорДО") Тогда
		
		Если ЗначениеЗаполнено(Объект.КоррСчет) Тогда
			
			Объект.КоррСчет="";
			ПриИзмененииСчета(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.УстановитьВозможностьДтКт();
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт,Элементы.ДтКт.СписокВыбора);	
	
	УстановитьВидимостьСервер();
				
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииНазначенияРасчетов()
	
	ОпределитьСтрокиТипов(Объект);
	
	Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ТипБД",Объект.НазначениеРасчетов) Тогда
		Объект.ТипБД=Объект.НазначениеРасчетов.ТипБД;
		СформироватьСписокВозможныхСпособовПолучения();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииСпособаПолучения()
	
	ВнутренниеДанные=ВнутренниеДанные(Истина);
	
	ПроизвольныйЗапрос=(Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
						ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос);
	
	Если ВнутренниеДанные Тогда
		
		Объект.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
		
	Иначе
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ТипБД",Объект.НазначениеРасчетов) Тогда
			Объект.ТипБД=Объект.НазначениеРасчетов.ТипБД;
		КонецЕсли;

	КонецЕсли;
	
	Объект.ПравилаВычисленияПараметровЗапроса.Очистить();
	Объект.ПравилаИспользованияПолейЗапроса.Очистить();
	Объект.ТекстЗапросаМодуля="";
	ТабПравилаВычисленияПараметров.Очистить();
	ДеревоПолейБД.ПолучитьЭлементы().Очистить();
	ДеревоПараметровОтбораБД.ПолучитьЭлементы().Очистить();
	Объект.ОсновнаяТаблицаРегистра=Ложь;
	
	Если Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		Если ЗначениеЗаполнено(Объект.ПотребительРасчета) 
			И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Предназначение",Объект.ПотребительРасчета) И Объект.ПотребительРасчета.Предназначение=ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость")
			И Объект.ПотребительРасчета.СчетБД.Владелец.Владелец=Объект.НазначениеРасчетов.ТипБД Тогда
			
			ЗаполнитьИсточникДляОстатковИОборотов();
			Возврат;
		
		ИначеЕсли ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("РегистрБухгалтерииПоУмолчанию",Объект.НазначениеРасчетов)
			И ЗначениеЗаполнено(Объект.НазначениеРасчетов.РегистрБухгалтерииПоУмолчанию) 
			И Объект.НазначениеРасчетов.РегистрБухгалтерииПоУмолчанию.Владелец=Объект.ТипБД Тогда
			
			Объект.РегистрБД=Объект.НазначениеРасчетов.РегистрБухгалтерииПоУмолчанию;
			Объект.РесурсРегистра=Объект.НазначениеРасчетов.РесурсРегистраПоУмолчанию;
			Объект.ПланСчетовБД=Объект.НазначениеРасчетов.ПланСчетовПоУмолчанию;
			ПриИзмененииРегистраБухгалтерии();
			
			Возврат;
			
		Иначе
			
			Объект.РегистрБД=Справочники.РегистрыБухгалтерииБД.ПустаяСсылка();
			Объект.ПланСчетовБД=Справочники.ПланыСчетовБД.ПустаяСсылка();
			
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		Объект.РегистрБД=Справочники.РегистрыНакопленияБД.ПустаяСсылка();
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		Объект.РегистрБД=Справочники.РегистрыСведенийБД.ПустаяСсылка();
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		
		ВидОтчетаОтбор=Объект.ПоказательОтбор.Владелец;
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		ВидОтчетаОтбор=Объект.ГруппаРаскрытияОтбор.Владелец;
		Объект.ТолькоАналитическиеЗначения = Истина;
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники Тогда
		
		Объект.ОбъектБД=Справочники.СправочникиБД.ПустаяСсылка();
		
	ИначеЕсли Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		Объект.ОбъектБД=Справочники.ДокументыБД.ПустаяСсылка();
						
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.мТаблицаПоказателейБД.Очистить();
	РабочийОбъект.ЗаполнитьНачальныеНастройки();
		
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	Если ПроизвольныйЗапрос Тогда
		ОбработатьИзменениеТекстаПроизвольногоЗапроса(Ложь);
	КонецЕсли;
		
	УстановитьВидимостьСервер();
	
КонецПроцедуры // ПриИзмененииСпособаПолучения()

&НаСервере
Процедура ПриИзмененииРегистраНакопления()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииРегистраБД(Истина);
	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтогаБД.СписокВыбора);	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистраБД.СписокВыбора);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);

	
	УстановитьВидимостьСервер();
	
	ПоместитьРабочийОбъект(РабочийОбъект);
				
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРегистраСведений(РабочийОбъект)
	
	РабочийОбъект.ПриИзмененииРегистраБД(Ложь);	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистраСведений.СписокВыбора); 
	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРегистраБухгалтерии()
		
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииРегистраБухгалтерии();
	
	ПланСчетов=РабочийОбъект.ПланСчетовБД; 
	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистра.СписокВыбора);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтога.СписокВыбора);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт,Элементы.ДтКт.СписокВыбора);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
	
	УстановитьВидимостьСервер();
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ПриИзмененииРегистраБухгалтерии()

&НаСервере
Процедура ОбработатьПолеВыбораПланаСчетов()
	
	Элементы.ПланСчетовБД.СписокВыбора.Очистить();
	МассивПлановСчетов=УправлениеОтчетамиУХ.ПолучитьМассивПлановСчетов(Объект.РегистрБД);
	
	Для Каждого Элемент ИЗ МассивПлановСчетов Цикл
		
		Элементы.ПланСчетовБД.СписокВыбора.Добавить(Элемент);
		
	КонецЦикла;
	
	Элементы.ПланСчетовБД.Видимость=(Элементы.ПланСчетовБД.СписокВыбора.Количество()>1);
	
КонецПроцедуры // ОбработатьПолеВыбораПланаСчетов() 
	
	

&НаСервере
Процедура ПриИзмененииОбъектаБД()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииОбъектаБД();
	
	УстановитьВидимостьСервер();	
	ПоместитьРабочийОбъект(РабочийОбъект);
					
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникДляОстатковИОборотов()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если РабочийОбъект.ЗаполнитьИсточникДляОстатковИОборотов() Тогда
		
		ПланСчетов=РабочийОбъект.ПланСчетов;
		
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистра.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтога.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт,Элементы.ДтКт.СписокВыбора);
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
				
		УстановитьВидимостьСервер();
		
		ПоместитьРабочийОбъект(РабочийОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьИсточникДляОстатковИОборотов() 
 
&НаСервере
Процедура ПриИзмененииСчета(Дебетовый)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииСчета(Дебетовый);
	
	Если Дебетовый Тогда
		
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтога.СписокВыбора);
		
	КонецЕсли;
	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистра.СписокВыбора);	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт,Элементы.ДтКт.СписокВыбора);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
		
	КодУпрощеннойФормулы=РабочийОбъект.КодУпрощеннойФормулы;	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	УстановитьВидимостьСервер();
		
КонецПроцедуры // ПриИзмененииСчета
 
&НаСервере
Процедура ИзменитьРегистрСведенийВИБ()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	ПриИзмененииРегистраСведений(РабочийОбъект);
	
	Если РабочийОбъект.РегистрБД.Периодический=Истина Тогда
		
		Элементы.ВидСреза.Видимость=Истина;
		
		Если Не ЗначениеЗаполнено(РабочийОбъект.ВидСреза) Тогда
			
			Объект.ВидСреза="СрезПоследних";
			
		КонецЕсли;		
		
	Иначе
		
		Элементы.ВидСреза.Видимость=Ложь;
		Объект.ВидСреза="";
		
	КонецЕсли;
	
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // ИзменитьРеквизитБухгалтерии()

&НаСервере
Процедура ИзменитьТаблицуADO()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииТаблицыADO();
	
	ПоместитьРабочийОбъект(РабочийОбъект);
			
КонецПроцедуры // ИзменитьРеквизитБухгалтерии()


&НаСервере
Процедура СформироватьСписокВозможныхСпособовПолучения()
	
	ТекСпособПолучения=Объект.СпособПолучения;
	
	СписокСпособов=Новый СписокЗначений;
	СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета, НСтр("ru = 'Показатель отчета текущей ИБ'"));
		
	Если Метаданные.РегистрыНакопления.Количество()>0 Тогда
		СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления, НСтр("ru = 'Регистр накопления текущей ИБ'"));
	КонецЕсли;
	
	Если Метаданные.РегистрыБухгалтерии.Количество()>0 Тогда					
		СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии, НСтр("ru = 'Регистр бухгалтерии текущей ИБ'"));
	КонецЕсли;
		
	Если Метаданные.РегистрыСведений.Количество()>0 Тогда
		СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений, НСтр("ru = 'Регистр сведений текущей ИБ'"));
	КонецЕсли;
	
	СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос, НСтр("ru = 'Произвольный запрос к текущей ИБ'"));
	
	#Область УХ
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Если НЕ СтрокаТипПотребительРасчета="ПоказателиОтчетов" Тогда
			СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия, НСтр("ru = 'Показатели группы раскрытия текущей ИБ'"));
		КонецЕсли;
			
		Если СтрокаТипПотребительРасчета="ДокументыБД" ИЛИ СтрокаТипПотребительРасчета="ТабличныеЧастиБД" Тогда
			СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы, НСтр("ru = 'Документ текущей ИБ'"));
		ИначеЕсли НЕ ДляФормированияКорректировок Тогда
			СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники, НСтр("ru = 'Справочник текущей ИБ'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипБД.ВИБПоУмолчанию) Тогда
			
			Если Использование77() Тогда
				
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов, Строка(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов));	
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр, Строка(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр));
				
			ИначеЕсли Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
				
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO, Строка(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO));	
				
			Иначе
				
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии, НСтр("ru = 'Регистр бухгалтерии внешней ИБ'"));
				
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления, НСтр("ru = 'Регистр накопления внешней ИБ'"));
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений,   НСтр("ru = 'Регистр сведений внешней ИБ'"));	
				
				Если СтрокаТипПотребительРасчета="ДокументыБД" Тогда
					СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы,		НСтр("ru = 'Документ внешней ИБ'"));
				Иначе
					СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники,	НСтр("ru = 'Справочник внешней ИБ'"));
				КонецЕсли;
				
				СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос, НСтр("ru = 'Произвольный запрос к внешней ИБ'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТипПотребительРасчета="ПоказателиОбъектовБД"
			И Объект.НазначениеРасчетов.ПоОбъектуБД=0 Тогда
			
			СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД, НСтр("ru = 'Показатель объекта БД'"));
			
		КонецЕсли;	
		
	КонецЕсли;
	
	#КонецОбласти
	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(СписокСпособов,Элементы.СпособПолучения.СписокВыбора);
		
	Если СписокСпособов.НайтиПоЗначению(ТекСпособПолучения)<>Неопределено Тогда
		
		Объект.СпособПолучения=ТекСпособПолучения;
				
	ИначеЕсли НЕ ДляФормированияКорректировок Тогда
	
		Объект.СпособПолучения=СписокСпособов[0].Значение;
		
	КонецЕсли;
			
КонецПроцедуры // СформироватьСписокВозможныхСпособовПолучения()


&НаСервере
Процедура СформироватьСписокВозможныхСпособовЗаполнения(СпособИспользования)
	
	Элементы.ТаблицаСоответствияСпособЗаполнения.СписокВыбора.Добавить(Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы);
	Элементы.ТаблицаСоответствияСпособЗаполнения.СписокВыбора.Добавить(Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение);

	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета И 
		НЕ ДляФормированияКорректировок Тогда
		
		Элементы.ТаблицаСоответствияСпособЗаполнения.СписокВыбора.Добавить(Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки);
		
		Если ТипЗнч(Объект.НазначениеРасчетов.Владелец)=Тип("СправочникСсылка.ВидыОтчетов")
			ИЛИ ТипЗнч(Объект.НазначениеРасчетов.Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
			
			Элементы.ТаблицаСоответствияСпособЗаполнения.СписокВыбора.Добавить(Перечисления.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииТипаВИБ()
	
	СформироватьСписокВозможныхСпособовПолучения();
	
КонецПроцедуры // ПриИзмененииТипаВИБ()
 
&НаСервере
Процедура ЗаполнитьТаблицуВычисленияПараметров()

	Объект.ПравилаВычисленияПараметровЗапроса.Очистить();
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ЗаполнитьПараметрыОперанда();	
	
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // ЗаполнитьТаблицуВычисленияПараметров()
 
&НаСервере
Процедура ОбработатьИзменениеТекстаПроизвольногоЗапроса(СохранятьНастройки)
	
	РабочийОбъект = ПолучитьРабочийОбъект();
	
	Если РабочийОбъект.ОбработатьИзменениеТекстаЗапроса(ТекстЗапросаФорма) Тогда
		
		РабочийОбъект.ТаблицаСоответствияБД = РабочийОбъект.СформироватьТаблицуСоответствияБД();
		РабочийОбъект.ДеревоПолейБД = РабочийОбъект.ЗаполнитьДеревоЗначенийБД();
		
		Если СохранятьНастройки Тогда
			// Если структура полей или отборов изменилась, обновим данные на форме
			СтрокиДереваРО = РабочийОбъект.ДеревоПолейБД.Строки;
			СтрокиДерева = ДеревоПолейБД.ПолучитьЭлементы();
			Если НЕ ОбщегоНазначения.КоллекцииИдентичны(СтрокиДереваРО,СтрокиДерева,"НаименованиеБД") Тогда
				СохранятьНастройки = Ложь;
			Иначе
				
				Для Сч = 0 По СтрокиДереваРО.Количество()-1 Цикл
					Если НЕ ОбщегоНазначения.КоллекцииИдентичны(
						СтрокиДереваРО.Получить(Сч).Строки,СтрокиДерева.Получить(Сч).ПолучитьЭлементы(),"НаименованиеБД,ПолеБД") Тогда
						СохранятьНастройки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Объект.ТекстЗапросаМодуля = РабочийОбъект.ТекстЗапросаМодуля;
		
		Если Не СохранятьНастройки Тогда
			РабочийОбъект.МассивСохраняемыхПараметров.Очистить();
		КонецЕсли;
		
		РабочийОбъект.ЗаполнитьПараметрыОперанда();	
		ПоместитьРабочийОбъект(РабочийОбъект, СохранятьНастройки);
		
		Элементы.ТекстЗапросаФорма.ТолькоПросмотр = Истина;
		Элементы.РедактироватьТекстЗапроса.Заголовок = Нстр("ru = 'Редактировать текст'");
	
	Иначе
		
		Элементы.РедактироватьТекстЗапроса.Пометка = Истина;
		Элементы.ТекстЗапросаФорма.ТолькоПросмотр = Ложь;
		Элементы.РедактироватьТекстЗапроса.Заголовок = Нстр("ru = 'Закончить редактирование'");
		
	КонецЕсли;	
	
	// Цвет фона редактирования запроса.
	УстановитьФонРедактированияЗапроса();
	
КонецПроцедуры // ОбработатьИзменениеТекстаПроизвольногоЗапроса() 

&НаСервере
Процедура ОбработатьИзменениеТекстаУпрощеннойФормулы()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если РабочийОбъект.ОбработатьКодУпрощеннойФормулы() Тогда
				
		Если РабочийОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			ВидОтчетаОтбор=РабочийОбъект.ВидОтчетаОтбор;
			
		Иначе
			
			ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.РесурсРегистра.СписокВыбора);
			ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокВидИтога,Элементы.ВидИтога.СписокВыбора);
			ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокДтКт,Элементы.ДтКт.СписокВыбора);
			ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(РабочийОбъект.СписокРесурсовРегистра,Элементы.ТаблицаРесурсовРесурсИсточник.СписокВыбора);
			
			ПланСчетов=РабочийОбъект.ПланСчетов;		
			
		КонецЕсли;
				
		КодУпрощеннойФормулы=РабочийОбъект.КодУпрощеннойФормулы;
		
		ПоместитьРабочийОбъект(РабочийОбъект);
		
		УстановитьВидимостьСервер();
		
	КонецЕсли;
		
КонецПроцедуры // ОбработатьИзменениеТекстаУпрощеннойФормулы()

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеОписанийРегистров(ТипБД,ИмяСправочника)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОписаниеРегистров.Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК ОписаниеРегистров
	|ГДЕ
	|	ОписаниеРегистров.Владелец = &ТипБД";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		РаботаСОбъектамиМетаданныхУХ.ЗаполнитьСписокРегистровБД(ТипБД,,Истина,Истина,Истина);
		
	КонецЕсли;
				 	
КонецПроцедуры // ПроверитьНаличиеОписанийРегистров()

&НаСервереБезКонтекста
Функция ПроверитьНаличиеТаблицADO(ТипБД) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипБД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицыADO.Ссылка
	|ИЗ
	|	Справочник.ТаблицыADO КАК ТаблицыADO
	|ГДЕ
	|	ТаблицыADO.Владелец = &ТипБД";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Справочники.ТаблицыADO.ОбновитьТаблицыADO(ТипБД);
		Возврат ПроверитьНаличиеТаблицADO(ТипБД);
		
	КонецЕсли;
	
КонецФункции // ПроверитьНаличиеТаблицADO()
 

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛНЯЕМЫЕ НА СЕРВЕРЕ БЕЗ ПЕРЕДАЧИ КОНТЕКСТА ФОРМЫ

&НаСервереБезКонтекста
Функция ПолучитьНастройкуСоответствия(ТекущаяСтрокаАналитики)
	
	Перем ТекСоединениеВИБ;
	
	ТипОбъектаКонсолидации="";
	ИмяОбъектаМетаДанных="";
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Проверим список существующих настроек соответствия
	
	ТаблицаСоответствий=РаботаСПолямиАналитикиУХ.ПолучитьТаблицуСинхронизированныхОбъектов(ТекущаяСтрокаАналитики.ТипДанныхПоля);
	
	Для Каждого СтрокаСоответствие ИЗ ТаблицаСоответствий Цикл
		
		Если (СтрокаСоответствие.ТипОбъектаКонсолидации="ВидСубконто" И СтрокаСоответствие.ИмяОбъектаМетаданных=ТекущаяСтрокаАналитики.ВидАналитики) Тогда
			
			Возврат СтрокаСоответствие.Ссылка;
			
		Иначе 
			
			ТаблицаАналитики=СтрокаСоответствие.ТипОбъектаКонсолидации+"."+СтрокаСоответствие.ИмяОбъектаМетаданных;
			
			Если НЕ ТекущаяСтрокаАналитики.ТипЗначенияКонсолидация.НайтиПоЗначению(ТаблицаАналитики)=Неопределено Тогда
				
				Возврат СтрокаСоответствие.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
				
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	Если ТекущаяСтрокаАналитики.СправочникКонсолидации="ПроизвольныйКлассификаторУХ" Тогда
		
		ТипОбъектаКонсолидации="ВидСубконто";
		ИмяОбъектаМетаДанных=ТекущаяСтрокаАналитики.ВидАналитики;
		
	ИначеЕсли ТекущаяСтрокаАналитики.АналитикаОтчета Тогда
		
		ИмяОбъектаМетаДанных=ТекущаяСтрокаАналитики.СправочникКонсолидации;
		ТипОбъектаКонсолидации="Справочник";
				
	Иначе
		
		СтрРаскрытие=НайтиСтрокуТаблицыОбъекта(ТекущаяСтрокаАналитики.РабочийОбъектАдрес,"мТаблицаВозможныхПолей","Поле",ТекущаяСтрокаАналитики.АналитикаКонсолидации);
		
		Если НЕ СтрРаскрытие=Неопределено Тогда	
			
			Если СтрРаскрытие.ТипЗначения.Количество()=1 Тогда
				
				ДанныеТипа=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрРаскрытие.ТипЗначения[0].Значение,".");
				
				Если ДанныеТипа.Количество()=2 Тогда
					
					ТипОбъектаКонсолидации=ДанныеТипа[0];
					ИмяОбъектаМетаДанных=ДанныеТипа[1];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТекущаяСтрокаАналитики.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаАналитики.СправочникБД) Тогда
			СправочникБД=ТекущаяСтрокаАналитики.ТаблицаADO;
			ТипМетаДанных="ТаблицаADO";
		Иначе
			СправочникБД = УправлениеОтчетамиУХ.ПолучитьИмяСвязаннойТаблицы(ТекущаяСтрокаАналитики.СправочникБД);
			ТипМетаДанных=ТекущаяСтрокаАналитики.ТипМетаДанных;
		КонецЕсли;
			
	Иначе
		
		СправочникБД = ТекущаяСтрокаАналитики.СправочникБД;
		ТипМетаДанных=ТекущаяСтрокаАналитики.ТипМетаДанных;
		
	КонецЕсли;
		
	ТекНастройкаСоответствия=УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ТекущаяСтрокаАналитики.ТипБД,ИмяОбъектаМетаДанных,СправочникБД,ТипМетаДанных,,,ТипОбъектаКонсолидации);
	
	Если ТекНастройкаСоответствия=Неопределено Тогда
		
		ОписаниеОбъекта=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(ТекСоединениеВИБ,ТипМетаДанных,СправочникБД,ТекущаяСтрокаАналитики.ТипБД);
		
		СтруктураСоответствие=Новый Структура;
		СтруктураСоответствие.Вставить("ОписаниеОбъектаВИБ",ОписаниеОбъекта);
		СтруктураСоответствие.Вставить("Владелец",ТекущаяСтрокаАналитики.ТипБД);
		СтруктураСоответствие.Вставить("ТипОбъектаВИБ",ТипМетаДанных);
									
		Если ТекущаяСтрокаАналитики.СправочникКонсолидации="ПроизвольныйКлассификаторУХ" Тогда
			
			СтруктураСоответствие.Вставить("ТипОбъектаКонсолидации","ВидСубконто");
			СтруктураСоответствие.Вставить("ИмяОбъектаМетаданных",ТекущаяСтрокаАналитики.ВидАналитики);
			СтруктураСоответствие.Вставить("ТолькоВидыСубконто",Истина);
		
		Иначе
			
			СтруктураСоответствие.Вставить("ТипОбъектаКонсолидации",ТипОбъектаКонсолидации);
			СтруктураСоответствие.Вставить("ИмяОбъектаМетаданных",ИмяОбъектаМетаДанных);
			
		КонецЕсли;
				
		Возврат(СтруктураСоответствие);
		
	Иначе
		
		Возврат ТекНастройкаСоответствия;
		
	КонецЕсли;
		
КонецФункции // ПолучитьНастройкуСоответствия()

&НаСервереБезКонтекста
Функция ПолучитьНастройкуСоответствияЭкспорт(ТекущаяСтрокаАналитики)
	
	Перем ТекСоединениеВИБ;
	
	ТипОбъектаКонсолидации=ТекущаяСтрокаАналитики.ТипМетаДанныхИсточник;
	ИмяОбъектаМетаДанных=ТекущаяСтрокаАналитики.СправочникКонсолидации;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Проверим список существующих настроек соответствия
	
	ТаблицаСоответствий=РаботаСПолямиАналитикиУХ.ПолучитьТаблицуСинхронизированныхОбъектов(ТекущаяСтрокаАналитики.ТипДанныхПоля);
	
	Для Каждого СтрокаСоответствие ИЗ ТаблицаСоответствий Цикл
		
		Если СтрокаСоответствие.ТипОбъектаКонсолидации=ТекущаяСтрокаАналитики.ТипМетаДанныхИсточник 
			И СтрокаСоответствие.ИмяОбъектаМетаданных=ТекущаяСтрокаАналитики.СправочникКонсолидации  Тогда
			
			Возврат СтрокаСоответствие.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
							
	СправочникБД = ТекущаяСтрокаАналитики.СправочникБД;
	ТипМетаДанных=ТекущаяСтрокаАналитики.ТипМетаДанныхПриемник;
				
	ТекНастройкаСоответствия=УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ТекущаяСтрокаАналитики.ТипБД,ИмяОбъектаМетаДанных,СправочникБД,ТипМетаДанных,,,ТипОбъектаКонсолидации);
	
	Если ТекНастройкаСоответствия=Неопределено Тогда
		
		ОписаниеОбъекта=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(ТекСоединениеВИБ,ТипМетаДанных,СправочникБД,ТекущаяСтрокаАналитики.ТипБД);
		
		СтруктураСоответствие=Новый Структура;
		СтруктураСоответствие.Вставить("ОписаниеОбъектаВИБ",ОписаниеОбъекта);
		СтруктураСоответствие.Вставить("Владелец",ТекущаяСтрокаАналитики.ТипБД);
		СтруктураСоответствие.Вставить("ТипОбъектаВИБ",ТипМетаДанных);
									
		Если ТекущаяСтрокаАналитики.СправочникКонсолидации="ПроизвольныйКлассификаторУХ" Тогда
			
			СтруктураСоответствие.Вставить("ТипОбъектаКонсолидации","ВидСубконто");
			СтруктураСоответствие.Вставить("ИмяОбъектаМетаданных",ТекущаяСтрокаАналитики.ВидАналитики);
			СтруктураСоответствие.Вставить("ТолькоВидыСубконто",Истина);
		
		Иначе
			
			СтруктураСоответствие.Вставить("ТипОбъектаКонсолидации",ТипОбъектаКонсолидации);
			СтруктураСоответствие.Вставить("ИмяОбъектаМетаданных",ИмяОбъектаМетаДанных);
			
		КонецЕсли;
				
		Возврат(СтруктураСоответствие);
		
	Иначе
		
		Возврат ТекНастройкаСоответствия;
		
	КонецЕсли;
		
КонецФункции // ПолучитьНастройкуСоответствия()

&НаСервереБезКонтекста
Функция ПолучитьСуществующееСоответствие(ТипБД,ИмяОбъектаМетаданных,СправочникБД,ТипМетаДанных);
	
	Возврат УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ТипБД,ИмяОбъектаМетаданных,СправочникБД,ТипМетаДанных);

КонецФункции // 	

&НаСервереБезКонтекста
Функция НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,ИмяТаблицыОбъекта,КолонкаТаблицыОбъекта,ИскомоеЗначение)
	
	РабочийОбъект=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	
	СтрокаТаблицы=РабочийОбъект[ИмяТаблицыОбъекта].Найти(ИскомоеЗначение,КолонкаТаблицыОбъекта);
	
	Если СтрокаТаблицы=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		СтруктураСтрока=Новый Структура;
		
		Для Каждого Колонка ИЗ РабочийОбъект[ИмяТаблицыОбъекта].Колонки Цикл
			
			СтруктураСтрока.Вставить(Колонка.Имя,СтрокаТаблицы[Колонка.Имя]);
			
		КонецЦикла;
		
		Возврат СтруктураСтрока;
		
	КонецЕсли;
				
КонецФункции // НайтиСтрокуТаблицыОбъекта()

&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()
 
&НаСервереБезКонтекста
Функция ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта)
	
	Возврат РаботаСПолямиАналитикиУХ.ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта);
		
КонецФункции // ПолучитьСписокВозможныхСпособовВычисленияПараметра() 

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта)
	
	Возврат РаботаСПолямиАналитикиУХ.ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта);
			
КонецФункции // ПолучитьДанныеДляОграниченияТипа()
 
&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияИсточника(ТипДанных)
	
	ТипЗначения=ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(ТипДанных);
	
	Возврат ТипЗначения;
	
КонецФункции // ПолучитьТипЗначенияИсточника()

	
///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НА КЛИЕНТЕ

&НаКлиенте
Процедура СпособИспользованияПриИзменении(Элемент)
	
	ПриИзмененииСпособаИспользования();
			
КонецПроцедуры


&НаКлиенте
Процедура КоманднаяПанельСоответствияКнопкаСопоставитьАналитики(Команда)
	
	ТекущаяСтрокаАналитики = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТекущаяСтрокаАналитики = Неопределено ИЛИ ЗначениеЗаполнено(ТекущаяСтрокаАналитики.СправочникБД) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИсточника = Элементы.ДеревоПолейБД.ТекущиеДанные;
	
	Если ДанныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСоздать(СформироватьСтруктуруСтрокиБД(ДанныеИсточника), ТекущаяСтрокаАналитики);
				
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	ДанныеСтрокиАналитики.ИспользуетсяВСопоставлении);
	
	Если Объект.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеADO") Тогда
		
		СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.ТаблицаADO);
		СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
		
	Иначе
		
		СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
		СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
		
	КонецЕсли;
	
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);
	СтрокаБД.Вставить("ТаблицаADO",					ДанныеСтрокиАналитики.ТаблицаADO);
	СтрокаБД.Вставить("Измерение",					ДанныеСтрокиАналитики.Измерение);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Функция СформироватьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		РабочийОбъектАдрес);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	ЭтаФорма.УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТипБД",						Объект.ТипБД);
	ДанныеОбъекта.Вставить("ТипБДПриемник",				Объект.ТипБДПриемник);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("Отказ",						ЛОЖЬ);
	ДанныеОбъекта.Вставить("Использование77",			Использование77);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			ВнутренниеДанные);
	ДанныеОбъекта.Вставить("СпособПолучения",			Объект.СпособПолучения);
	ДанныеОбъекта.Вставить("СпособИспользования",		Объект.СпособИспользования);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура КоманднаяПанельСоответствияКнопкаРазъединить(Команда)
	
	СоответствиеУдалить();

КонецПроцедуры

&НаКлиенте
Процедура ПотребительРасчетаПриИзменении(Элемент)
	
	ПриИзмененииПотребителяРасчета();
	
КонецПроцедуры

&НаКлиенте                                                                          
Процедура НазначениеРасчетовПриИзменении(Элемент)
	
	ПриИзмененииНазначенияРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПолученияПриИзменении(Элемент)
	
	ПриИзмененииСпособаПолучения();
	
КонецПроцедуры

&НаКлиенте                                                   
Процедура ПотребительРасчетаПримечанияПриИзменении(Элемент)
	
	ПриИзмененииПотребителяРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеРасчетовПримечанияПриИзменении(Элемент)
	
	ПриИзмененииНазначенияРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипБДПриИзменении(Элемент)
	
	ПриИзмененииТипаВИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииБДПриИзменении(Элемент)
	
	ПриИзмененииРегистраБухгалтерии();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	
	ПриИзмененииСчета(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсРегистраПриИзменении(Элемент)
	
	ПриИзмененииРесурсаСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КоррСчетПриИзменении(Элемент)
	
	ПриИзмененииСчета(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаОтборПриИзменении(Элемент)
	
	ПриИзмененииВидаОтчетаОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательОтборПриИзменении(Элемент)
	
	ПриИзмененииПоказателяОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрНакопленияБДПриИзменении(Элемент)
	
	ПриИзмененииРегистраНакопления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИтогаПриИзменении(Элемент)
	
	ПриИзмененииВидаИтога();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолейИПараметровОтбораБДНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ИндексСтроки=ПараметрыПеретаскивания.Значение;
	ДанныеПеретаскивания=Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение);
	ДанныеРодителя=ДанныеПеретаскивания.ПолучитьРодителя();
	
	Если ПустаяСтрока(ДанныеРодителя) ИЛИ ДанныеПеретаскивания.ТипЗначения.Количество()>1 Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	Иначе
						
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Перемещение;
		
		ПараметрыПеретаскивания.Значение=СформироватьСтруктуруСтрокиБД(ДанныеПеретаскивания);
		ПараметрыПеретаскивания.Значение.Вставить("ИндексСтроки",ИндексСтроки);
		
	КонецЕсли;
	
КонецПроцедуры                   

&НаКлиенте
Процедура ТаблицаСоответствияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Элемент.ТекущиеДанные.ПолеБД) Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка=Неопределено И (НЕ (Объект.СпособИспользования=ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов")
			ИЛИ СтрокаТипПотребительРасчета="РазделыСверкиВГО"
			ИЛИ СтрокаТипПотребительРасчета="ШаблоныУниверсальныхПроцессов")) Тогда
						
		Возврат;
					
	Иначе
		
		ДанныеПриемника=Элемент.ДанныеСтроки(Строка);
		
	КонецЕсли;
	
	СоответствиеСоздать(ПараметрыПеретаскивания.Значение, ДанныеПриемника);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементКоллекции(Коллекция,Значение,ИмяРеквизита)
	
	Для Каждого Элемент ИЗ Коллекция Цикл 
		
		Если Элемент[ИмяРеквизита]=Значение Тогда
			
			Возврат Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции // НайтиЭлементКоллекции() 

&НаКлиенте
Процедура ОбновитьНастройкуСоответствияВИБ(СтрокаСоответствия,СтрокаВИБ)
	
	Если НЕ (СтрокаВИБ.ТипМетаДанных="Справочник" 
		ИЛИ СтрокаВИБ.ТипМетаДанных="Перечисление"
		ИЛИ СтрокаВИБ.ТипМетаДанных="Документ"
		ИЛИ СтрокаВИБ.ТипМетаДанных="ТаблицаADO"
		ИЛИ СтрокаВИБ.ТипМетаДанных="ПланСчетов"
		ИЛИ СтрокаВИБ.ТипМетаДанных="ПланВидовХарактеристик"
		ИЛИ СтрокаВИБ.ТипМетаДанных="Простой") Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникДляОтчетов=(Объект.СпособИспользования=ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов"));
	ТаблицаADO=(Объект.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеADO"));
	
	Если ИсточникДляОтчетов Тогда
		
		Если НЕ СтрокаВИБ.ТипМетаДанных="Простой" Тогда
					
			Если Объект.ТолькоПримитивныеТипы ИЛИ ПустаяСтрока(СтрокаВИБ.СправочникБД) Тогда
				
				Возврат;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ПолеБД",СтрокаВИБ.ПолеБД)).Количество()=0 Тогда
			
			РабочаяСтрока=ТаблицаСоответствияБД.Добавить();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
				
	Иначе
		
		СтрКонсолидации=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолей","Поле",СтрокаСоответствия.АналитикаКонсолидации);
		
		Если НЕ СтрокаСоответствия.АналитикаКонсолидации="Значение" Тогда
			
			Если СтрокаВИБ.ТипМетаДанных="Простой" Тогда
				
				Если НЕ (ТаблицаADO ИЛИ ВозможнаУстановкаСоответствия(СтрКонсолидации,СтрокаВИБ)) Тогда
					
					Сообщить(НСтр("ru = 'Несовпадение типов аналитик.'"), СтатусСообщения.Информация);
					Возврат;
					
				КонецЕсли;
				
			Иначе
				
				Если ПустаяСтрока(СтрокаВИБ.СправочникБД) Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РабочаяСтрока=СтрокаСоответствия;
		
	КонецЕсли;
				
	ЗаполнитьЗначенияСвойств(РабочаяСтрока,СтрокаВИБ,,"ВидАналитики");
	
	Если ИсточникДляОтчетов Тогда
		РабочаяСтрока.ПсевдонимБД=СтрЗаменить(СтрокаВИБ.ПолеБД,".","");
	Иначе
		РабочаяСтрока.ПсевдонимБД = СтрокаВИБ.НаименованиеБД;
	КонецЕсли;
	
	Если РабочаяСтрока.АналитикаКонсолидации="Значение" Тогда
		
		Объект.ТипЗначения=ПолучитьТипЗначенияИсточника(СтрокаВИБ.ТипЗначения[0].Значение);
		
	ИначеЕсли ТаблицаADO Тогда
		
		РабочаяСтрока.ПолеБД=СтрокаВИБ.ТаблицаADO;
		
	КонецЕсли;
	
	Если (НЕ (РабочаяСтрока.АналитикаКонсолидации="Значение" ИЛИ Объект.ТолькоПримитивныеТипы))
		И (ТаблицаADO ИЛИ (НЕ СтрокаВИБ.ТипМетаДанных="Простой")) Тогда
				
		СтруктураСправочник=Новый Структура;
		СтруктураСправочник.Вставить("ПолеБД",				РабочаяСтрока.ПолеБД);
		
		Если ТипЗнч(РабочаяСтрока.ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные")
			И ЗначениеЗаполнено(РабочаяСтрока.ВидАналитики) Тогда
			СтруктураСправочник.Вставить("СправочникКонсолидации",	"ПроизвольныйКлассификаторУХ");
		Иначе
			СтруктураСправочник.Вставить("СправочникКонсолидации",	РабочаяСтрока.СправочникКонсолидации);
		КонецЕсли;
		
		СтруктураСправочник.Вставить("ВидАналитики",			РабочаяСтрока.ВидАналитики);
		СтруктураСправочник.Вставить("СправочникБД",			РабочаяСтрока.СправочникБД);
		СтруктураСправочник.Вставить("ТипМетаДанных",			РабочаяСтрока.ТипМетаДанных);
		СтруктураСправочник.Вставить("ТипБД",					Объект.ТипБД);
		СтруктураСправочник.Вставить("СпособПолучения",			Объект.СпособПолучения);
		СтруктураСправочник.Вставить("ТаблицаADO",				Объект.ТаблицаADO);
		СтруктураСправочник.Вставить("ТипЗначения",				СтрокаВИБ.ТипЗначения);
		СтруктураСправочник.Вставить("РабочийОбъектАдрес",		РабочийОбъектАдрес);
		СтруктураСправочник.Вставить("АналитикаОтчета",			РабочаяСтрока.АналитикаОтчета);
		СтруктураСправочник.Вставить("АналитикаКонсолидации",	РабочаяСтрока.АналитикаКонсолидации);
		СтруктураСправочник.Вставить("ТипДанныхПоля",			СтрокаВИБ.ТипДанныхПоля);
		СтруктураСправочник.Вставить("ТипЗначенияКонсолидация",	?(ЗначениеЗаполнено(СтрКонсолидации),СтрКонсолидации.ТипЗначения,Новый СписокЗначений));

		ТекНастройкаСоответствия=ПолучитьНастройкуСоответствия(СтруктураСправочник);
		
		Если ТекНастройкаСоответствия=Неопределено Тогда
			
			Если НЕ СтрокаВИБ.ТипМетаДанных="Простой" Тогда
				
				СтрокаШаблона = НСтр("ru = 'Не обнаружена настройка соответствия для объектов:
				|%1 -> %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					Сообщить(СтрШаблон(СтрокаШаблона, 
						?(РабочаяСтрока.ВидАналитики = Неопределено, РабочаяСтрока.СправочникКонсолидации, РабочаяСтрока.ВидАналитики), 
						РабочаяСтрока.СправочникБД), СтатусСообщения.Внимание);
				КонецЕсли;
				
				ОтменитьУстановкуСоответствияБД(РабочаяСтрока);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекНастройкаСоответствия)=Тип("Структура") Тогда // Возвращены данные для создания нового объекта
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("ТекНастройкаСоответствия",ТекНастройкаСоответствия);
			СтруктураПараметров.Вставить("РабочаяСтрока",РабочаяСтрока);
			СтруктураПараметров.Вставить("СтрокаВИБ",СтрокаВИБ);

			ОписаниеОповещения=Новый ОписаниеОповещения("СозданиеНастройкиСоответствияВИБЗавершение",ЭтотОбъект,СтруктураПараметров);
			ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",ТекНастройкаСоответствия),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			
			Возврат;
			
		Иначе
			
			РабочаяСтрока.НастройкаСоответствия=ТекНастройкаСоответствия;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РабочаяСтрока.Сопоставлено 		= Истина;
	
	Если НЕ СтрокаВИБ.Свойство("КонтекстОтчета") Тогда
		
		РабочаяСтрока.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкуСоответствия()

&НаКлиенте
Процедура СозданиеНастройкиСоответствияВИБЗавершение(РезультатОткрытия,ДополнительныеПараметры) Экспорт
	
	ТекНастройкаСоответствия= ДополнительныеПараметры.ТекНастройкаСоответствия;
	РабочаяСтрока			= ДополнительныеПараметры.РабочаяСтрока;
	СтрокаВИБ				= ДополнительныеПараметры.СтрокаВИБ;	
	
	НоваяНастройкаСоответствия=ПолучитьСуществующееСоответствие(Объект.ТипБД,ТекНастройкаСоответствия.ИмяОбъектаМетаданных,ТекНастройкаСоответствия.ОписаниеОбъектаВИБ,ТекНастройкаСоответствия.ТипОбъектаВИБ);
	
	Если НоваяНастройкаСоответствия=Неопределено Тогда
		
		Если НЕ СтрокаВИБ.ТипМетаДанных="Простой" Тогда
			
			СтрокаШаблона = НСтр("ru = 'Не обнаружена настройка соответствия для объектов:
			|%1 -> %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				Сообщить(СтрШаблон(СтрокаШаблона, 
				?(РабочаяСтрока.ВидАналитики = Неопределено, РабочаяСтрока.СправочникКонсолидации, РабочаяСтрока.ВидАналитики), 
				РабочаяСтрока.СправочникБД), СтатусСообщения.Внимание);
			КонецЕсли;
			
			ОтменитьУстановкуСоответствияБД(РабочаяСтрока);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		РабочаяСтрока.НастройкаСоответствия=НоваяНастройкаСоответствия;
		СтрокаВИБ.Вставить("ОбновитьНастройкиСоответствия");
		
		РабочаяСтрока.Сопоставлено 		= Истина;
		
		Если НЕ СтрокаВИБ.Свойство("КонтекстОтчета") Тогда
			
			РабочаяСтрока.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
			
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры // СозданиеНастройкиСоответствияВИБЗавершение() 

&НаКлиенте
Процедура ОбновитьНастройкуСоответствияЭкспорт(СтрокаСоответствия,СтрокаВИБ)
	
	Если НЕ (СтрокаВИБ.ТипМетаДанных="Справочник" 
		ИЛИ СтрокаВИБ.ТипМетаДанных="Перечисление"
		ИЛИ СтрокаВИБ.ТипМетаДанных="Документ"
		ИЛИ СтрокаВИБ.ТипМетаДанных="ТаблицаADO"
		ИЛИ СтрокаВИБ.ТипМетаДанных="ПланСчетов"
		ИЛИ СтрокаВИБ.ТипМетаДанных="ПланВидовХарактеристик"
		ИЛИ СтрокаВИБ.ТипМетаДанных="Простой") Тогда
		Возврат;
	КонецЕсли;
	
	СтрКонсолидации=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолей","Поле",СтрокаСоответствия.АналитикаКонсолидации);
	
	Если НЕ СтрокаСоответствия.АналитикаКонсолидации="Значение" Тогда
		
		Если СтрокаВИБ.ТипМетаДанных="Простой" Тогда
			
			Если НЕ ВозможнаУстановкаСоответствия(СтрКонсолидации,СтрокаВИБ) Тогда
				
				Сообщить(НСтр("ru = 'Несовпадение типов аналитик.'"), СтатусСообщения.Информация);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(СтрокаВИБ.СправочникБД) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
					
	РабочаяСтрока=СтрокаСоответствия;	
	
	ЗаполнитьЗначенияСвойств(РабочаяСтрока,СтрокаВИБ,,"ВидАналитики");
	
	РабочаяСтрока.ПсевдонимБД = СтрокаВИБ.НаименованиеБД;
	
	Если РабочаяСтрока.АналитикаКонсолидации="Значение" Тогда
		
		Объект.ТипЗначения=ПолучитьТипЗначенияИсточника(СтрокаВИБ.ТипЗначения[0].Значение);
				
	КонецЕсли;
	
	Если (НЕ (СтрокаСоответствия.АналитикаКонсолидации="Значение" ИЛИ Объект.ТолькоПримитивныеТипы))
		И (НЕ СтрокаВИБ.ТипМетаДанных="Простой") Тогда
		
		ДанныеСтрокиПриемника=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолей","РеквизитОбъекта",СтрокаСоответствия.РеквизитОбъекта);
		
		СтруктураСправочник=Новый Структура;
		СтруктураСправочник.Вставить("ПолеБД",					РабочаяСтрока.ПолеБД);
		СтруктураСправочник.Вставить("СправочникКонсолидации",	РабочаяСтрока.СправочникБД);		
		СтруктураСправочник.Вставить("ВидАналитики",			РабочаяСтрока.ВидАналитики);
		СтруктураСправочник.Вставить("СправочникБД",			РабочаяСтрока.СправочникКонсолидации);
		СтруктураСправочник.Вставить("ТипМетаДанныхИсточник",	СтрокаВИБ.ТипМетаДанных);
		СтруктураСправочник.Вставить("ТипМетаДанныхПриемник",	ДанныеСтрокиПриемника.ТипМетаДанных);
		СтруктураСправочник.Вставить("ТипБД",					Объект.ТипБДПриемник);
		СтруктураСправочник.Вставить("ТипЗначения",				СтрокаВИБ.ТипЗначения);
		СтруктураСправочник.Вставить("РабочийОбъектАдрес",		РабочийОбъектАдрес);
		СтруктураСправочник.Вставить("АналитикаОтчета",			РабочаяСтрока.АналитикаОтчета);
		СтруктураСправочник.Вставить("АналитикаКонсолидации",	РабочаяСтрока.АналитикаКонсолидации);
		СтруктураСправочник.Вставить("ТипДанныхПоля",			СтрокаВИБ.ТипДанныхПоля);
		
		
		ТекНастройкаСоответствия=ПолучитьНастройкуСоответствияЭкспорт(СтруктураСправочник);
		
		Если ТекНастройкаСоответствия=Неопределено Тогда
			
			Если НЕ СтрокаВИБ.ТипМетаДанных="Простой" Тогда
				
				СтрокаШаблона = НСтр("ru = 'Не обнаружена настройка соответствия для объектов:
				|%1 -> %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					Сообщить(СтрШаблон(СтрокаШаблона, РабочаяСтрока.СправочникБД, РабочаяСтрока.СправочникКонсолидации), СтатусСообщения.Внимание);
				КонецЕсли;
								
				ОтменитьУстановкуСоответствияБД(РабочаяСтрока);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекНастройкаСоответствия)=Тип("Структура") Тогда // Возвращены данные для создания нового объекта
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("ТекНастройкаСоответствия",ТекНастройкаСоответствия);
			СтруктураПараметров.Вставить("РабочаяСтрока",РабочаяСтрока);
			СтруктураПараметров.Вставить("СтрокаВИБ",СтрокаВИБ);

			ОписаниеОповещения=Новый ОписаниеОповещения("СозданиеНастройкиСоответствияЭкспортЗавершение",ЭтотОбъект,СтруктураПараметров);
			ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",ТекНастройкаСоответствия),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		Иначе
			
			РабочаяСтрока.НастройкаСоответствия=ТекНастройкаСоответствия;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РабочаяСтрока.Сопоставлено 		= Истина;
	
	Если НЕ СтрокаВИБ.Свойство("КонтекстОтчета") Тогда
		
		РабочаяСтрока.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкуСоответствия()

&НаКлиенте
Процедура СозданиеНастройкиСоответствияЭкспортЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	ТекНастройкаСоответствия= ДополнительныеПараметры.ТекНастройкаСоответствия;
	РабочаяСтрока			= ДополнительныеПараметры.РабочаяСтрока;
	СтрокаВИБ				= ДополнительныеПараметры.СтрокаВИБ;
	
	НоваяНастройкаСоответствия=ПолучитьСуществующееСоответствие(Объект.ТипБДПриемник,ТекНастройкаСоответствия.ИмяОбъектаМетаданных,ТекНастройкаСоответствия.ОписаниеОбъектаВИБ,ТекНастройкаСоответствия.ТипОбъектаВИБ);
	
	Если НоваяНастройкаСоответствия=Неопределено Тогда
		
		Если НЕ СтрокаВИБ.ТипМетаДанных="Простой" Тогда
			
			СтрокаШаблона = НСтр("ru = 'Не обнаружена настройка соответствия для объектов:
			|%1 -> %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				Сообщить(СтрШаблон(СтрокаШаблона, РабочаяСтрока.СправочникБД, РабочаяСтрока.СправочникКонсолидации), СтатусСообщения.Внимание);
			КонецЕсли;
						
			ОтменитьУстановкуСоответствияБД(РабочаяСтрока);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		РабочаяСтрока.НастройкаСоответствия=НоваяНастройкаСоответствия;
		СтрокаВИБ.Вставить("ОбновитьНастройкиСоответствия");
		
		РабочаяСтрока.Сопоставлено 		= Истина;
		
		Если НЕ СтрокаВИБ.Свойство("КонтекстОтчета") Тогда
			
			РабочаяСтрока.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // СозданиеНастройкиСоответствияЭкспортЗавершение() 

&НаКлиенте
Функция ВозможнаУстановкаСоответствия(СтрКонсолидации,СтрРегистр)
			
	Если ЗначениеЗаполнено(СтрКонсолидации.ВидАналитики) И СтрКонсолидации.ВидАналитики=СтрРегистр.ВидАналитики Тогда
		
		Возврат Истина;
		
	Иначе
		
		Для Каждого СтрТип ИЗ СтрКонсолидации.ТипЗначения Цикл
			
			Если НЕ СтрРегистр.ТипЗначения.НайтиПоЗначению(СтрТип.Значение)=Неопределено Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
				
	КонецЕсли;
			
КонецФункции // ВозможнаУстановкаСоответствия()

&НаКлиенте
Процедура ОбновитьНастройкуСоответствияТек(СтрокаСоответствия,СтрокаИсточника)
		
	ИсточникДляОтчетов=(Объект.СпособИспользования=ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов"));
	
	Если ИсточникДляОтчетов Тогда
		
		Если ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ПолеБД,АналитикаОтчета",СтрокаИсточника.ПолеБД,Ложь)).Количество()=0 Тогда
			
			РабочаяСтрока=ТаблицаСоответствияБД.Добавить();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
				
	Иначе
		
		Если НЕ СтрокаСоответствия.АналитикаКонсолидации="Значение"
			И НЕ СтрокаСоответствия.АналитикаКонсолидации="Период" Тогда
			
			СтрКонсолидации=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолей","Поле",СтрокаСоответствия.АналитикаКонсолидации);
			
			Если НЕ ВозможнаУстановкаСоответствия(СтрКонсолидации,СтрокаИсточника) Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Несовпадение типов аналитик.'"),30);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		РабочаяСтрока=СтрокаСоответствия;
		
	КонецЕсли;
		
	РабочаяСтрока.ПолеБД=СтрокаИсточника.ПолеБД;
	
	Если РабочаяСтрока.АналитикаКонсолидации="Значение" Тогда
			
		Объект.ТипЗначения = ПолучитьТипЗначенияИсточника(СтрокаИсточника.ТипДанныхПоля[0].Значение);
		
	ИначеЕсли РабочаяСтрока.АналитикаКонсолидации="Период" Тогда
		
		Объект.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейОтчетов.Дата");
		
	КонецЕсли;
	
	Если ИсточникДляОтчетов Тогда
		
		РабочаяСтрока.ПсевдонимБД=ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СтрокаИсточника.НаименованиеБД);
		
	Иначе
		
		РабочаяСтрока.ПсевдонимБД=СтрокаИсточника.НаименованиеБД;
		
	КонецЕсли;
		
	РабочаяСтрока.Сопоставлено		= Истина;
	
	Если НЕ СтрокаИсточника.Свойство("КонтекстОтчета") Тогда
		
		РабочаяСтрока.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкуСоответствияТек()

&НаКлиенте
Процедура ОтменитьУстановкуСоответствияБД(ТекущаяСтрока)
	
	Если НЕ (ПустаяСтрока(ТекущаяСтрока.ПолеБД) И ПустаяСтрока(ТекущаяСтрока.НастройкаСоответствия)) Тогда
		
		Модифицированность=Истина;
		
		ТекущаяСтрока.ПолеБД              	 	= Неопределено;
		ТекущаяСтрока.ПсевдонимБД               = Неопределено;
		ТекущаяСтрока.Сопоставлено              = Ложь;
		ТекущаяСтрока.СправочникБД              = "";
		ТекущаяСтрока.ПолеЗапроса               = "";
		ТекущаяСтрока.ТипМетаДанных             = "";
		ТекущаяСтрока.НастройкаСоответствия		= "";
		ТекущаяСтрока.ФиксированноеЗначение		= "";
		
	КонецЕсли;
		
КонецПроцедуры // ОтменитьУстановкуСоответствияБД()
 
&НаКлиенте
Процедура ДеревоПолейИПараметровОтбораБДПередРазворачиванием(Элемент, Строка, Отказ)
	
	ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если (НЕ (СтрокаРазворота.ТипМетаДанных="Справочник" 
		ИЛИ СтрокаРазворота.ТипМетаДанных="Документ"
		ИЛИ СтрокаРазворота.ТипМетаДанных="ПланВидовХарактеристик"
		ИЛИ СтрокаРазворота.ТипМетаДанных="ТаблицаADO" 
		ИЛИ СтрокаРазворота.ТипЗначения.Количество()>1)) ИЛИ Использование77 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
		
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	РабочийОбъектАдрес=ДанныеОбъекта.РабочийОбъектАдрес;
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПередРазворачиваниемСтрокиДереваПолейИсточника() 

// Изменяет возможность редактирования текста запроса источника данных в значение 
// ПометкаВход. Когда ПометкаВход не задана - изменяет на противоложное текущему значению.
&НаКлиенте
Процедура ИзменитьПометкуРедактированияТекстаЗапроса(ПометкаВход = Неопределено)
	
	КнопкаРедактирование=Элементы.РедактироватьТекстЗапроса;
	Если ПометкаВход = Неопределено Тогда
		КнопкаРедактирование.Пометка = НЕ КнопкаРедактирование.Пометка;
	Иначе
		КнопкаРедактирование.Пометка = ПометкаВход;
	КонецЕсли;
	
	Если КнопкаРедактирование.Пометка Тогда
		
		Элементы.ТекстЗапросаФорма.ТолькоПросмотр=Ложь;
		Элементы.РедактироватьТекстЗапроса.Заголовок=Нстр("ru = 'Закончить редактирование'");
		
	Иначе
		
		ОбработатьИзменениеТекстаПроизвольногоЗапроса(Истина);
			
	КонецЕсли;
	// Цвет фона редактирования запроса.
	УстановитьФонРедактированияЗапроса();
	
КонецПроцедуры                                       

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки 

&НаКлиенте
Процедура КоманднаяПанельПараметрыЗаполнить(Команда)
	
	Если ТабПравилаВычисленияПараметров.Количество()>0  Тогда
		
		ОчиститьТаблицу = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("КоманднаяПанельПараметрыЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Таблица параметров будет очищена.
									|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;		
		
	КонецЕсли;
	
	ЗаполнитьТаблицуВычисленияПараметров();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПараметрыЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОчиститьТаблицу = РезультатВопроса=КодВозвратаДиалога.Да;
    
    Если Не ОчиститьТаблицу Тогда
        Возврат;	
    КонецЕсли;		
        
    ЗаполнитьТаблицуВычисленияПараметров();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипа(ДанныеДляОграничения)
		
	ЭлементУправления = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы[ДанныеДляОграничения.ИмяКолонки];
	
	Если ДанныеДляОграничения.Свойство("ТипЗначения") Тогда
		
		Если НЕ ТипЗнч(ДанныеДляОграничения.ТипЗначения)=Тип("Массив") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипЗначения);
			
		Иначе
			
			Массив=ДанныеДляОграничения.ТипЗначения;
			
		КонецЕсли;
		
		ЭлементУправления.Доступность = Истина;
		ЭлементУправления.ТолькоПросмотр=Ложь;
		ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(Массив);
		
		Если Массив.Найти(ТипЗнч(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]))=Неопределено Тогда
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки] = ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
			
		КонецЕсли;
		
		Если ДанныеДляОграничения.Свойство("ТипДанныхСписка") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипДанныхСписка);
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки].ТипЗначения=Новый ОписаниеТипов(Массив);

						
		КонецЕсли;
		
	Иначе
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]=Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОграничениеТипа()

&НаКлиенте
Процедура ТабПравилаВычисленияПараметровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура УточнениеСпособаОпределенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ТекДанные = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДанныеОбъекта = СформироватьДанныеОбъекта();
		НастройкаПараметровОтбораУХ.ОбработатьВыборЗначенияПараметра(ТекДанные, ЭтаФорма, ДанныеОбъекта, Элемент, СтандартнаяОбработка);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДляПроверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекЗначениеПоля=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ЗначениеДляПроверки;
	ТекИмяПараметра=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД;
	ТекСпособВычисления=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВычисленияПараметра;
	
	Если Элемент.ОграничениеТипа.Типы().Количество()>0 И Элемент.ОграничениеТипа.Типы()[0]=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
		
		Если НЕ ВнутренниеДанные Тогда
			
			#Если ВебКлиент Тогда
				СпособФормат = ПолучитьXMLСтрока(ТекСпособВычисления);
			#Иначе	
				СпособФормат = XMLСтрока(ТекСпособВычисления);
			#КонецЕсли			
			ТекПоле = НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес, "мТаблицаВидовАналитикВидаОтчета", "КодАналитики", СпособФормат);
			
		Иначе	
			
			ТекПоле=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолейОтбор","Поле",ТекИмяПараметра);
		
		КонецЕсли;
		
		Если Не ТекПоле=Неопределено Тогда
						
			СтандартнаяОбработка=Ложь;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", ТекПоле.ВидАналитики));
			
			Если ЗначениеЗаполнено(ТекЗначениеПоля) Тогда
				СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
			КонецЕсли;
			
			ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", СтруктураПараметров, Элемент);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекЗначениеПоля)=Тип("СписокЗначений") Тогда
				
		СтрАналитика=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолейОтбор","Поле",ТекИмяПараметра);
		
		Если НЕ СтрАналитика=Неопределено Тогда
			
			ТипСписка=СтрАналитика.ТипДанныхПоля[0].Значение;
			
		Иначе
			
			СтрокаЗначения = НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мСоответствиеИзмеренийСпособовИТипов","ИмяИзмерения",ТекИмяПараметра);	
			ТипСписка=СтрокаЗначения.ТипДанных;
			
		КонецЕсли;
		
		Массив = Новый Массив;
		Массив.Добавить(ТипСписка);	
		
		ТекЗначениеПоля.ТипЗначения=Новый ОписаниеТипов(Массив);
		
	ИначеЕсли ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ПериметрОтчета")
		ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеПериметрОтчета") Тогда
		
		СтандартнаяОбработка = Ложь;
		КонсолидирующаяОрганизация = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения;
		СтруктураПараметров = Новый Структура;		
		СтруктураПараметров.Вставить("ТекущаяСтрока", КонсолидирующаяОрганизация);
		ОткрытьФорму("Справочник.Организации.ФормаВыбора", СтруктураПараметров, Элемент);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьXMLСтрока(ЗначениеИсточник)
	Возврат XMLСтрока(ЗначениеИсточник);
КонецФункции

&НаКлиенте
Процедура ПроверитьОперанд(Команда)
	
	РезультатПроверки=ВыполнитьПроверкуОперанда();
	РезультатПроверки.Показать();
	
КонецПроцедуры
 
&НаКлиенте
Процедура РегистрНакопленияБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеОписанийРегистров(Объект.ТипБД,"РегистрыНакопленияБД");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеОписанийРегистров(Объект.ТипБД,"РегистрыБухгалтерииБД");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ИзмененаРасчетЗначенияПараметра" И ТипЗнч(Параметр)=Тип("Структура") Тогда
		
		Если Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные <> Неопределено Тогда
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТекстМодуля=Параметр.ТекстПроцедуры;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="ИзмененОтборПоПериметру" И ТипЗнч(Параметр)=Тип("СписокЗначений") Тогда
		
		Если Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные <> Неопределено Тогда
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения=Параметр;
		КонецЕсли;
		
	ИначеЕсли (ИмяСобытия="ИзмененОтборЗаписейADO" ИЛИ ИмяСобытия="ИзмененИнтервалОтбораПериода") И ТипЗнч(Параметр)=Тип("СписокЗначений") Тогда
		
		Если Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные <> Неопределено Тогда
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения=Параметр;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="ВыборПоляИзКонтекста" И ТипЗнч(Параметр)=Тип("Структура") Тогда

		Если Элементы.ТаблицаСоответствия.ТекущиеДанные <> Неопределено Тогда
			СоответствиеСоздать(Параметр,Элементы.ТаблицаСоответствия.ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="ЗаписанаНастройкаСоответствия" И ТипЗнч(Параметр)=Тип("Структура") И Параметр.ТипБД=Объект.ТипБД Тогда
		
		Если Элементы.ДеревоПолейБД.ТекущиеДанные <> Неопределено Тогда
			СтрокаВИБ=Элементы.ДеревоПолейБД.ТекущиеДанные;
			СтрокаВИБ.ТипДанныхПоля=РаботаСПолямиАналитикиУХ.ПолучитьСписокНастроекСоответствийИсточник(Объект.ТипБД,СтрокаВИБ.ТипМетаДанных,СтрокаВИБ.СправочникБД);
		КонецЕсли;		
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаADOНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПроверитьНаличиеТаблицADO(Объект.ТипБД) Тогда
		
		Сообщить(НСтр("ru = 'Нет данных по таблицам из внешнего подключения '")+Объект.ТипБД);
		СтандартнаяОбработка=Ложь;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаADOПриИзменении(Элемент)
	
 	ИзменитьТаблицуADO();	
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеОписанийРегистров(Объект.ТипБД,"РегистрыСведенийБД");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБДПриИзменении(Элемент)
	
	ИзменитьРегистрСведенийВИБ();	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТекстЗапроса(Команда)
	ИзменитьПометкуРедактированияТекстаЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапроса(ТекстЗапроса,ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТекстЗапроса=Неопределено ИЛИ Элементы.РедактироватьТекстЗапроса.Пометка=Ложь) Тогда
		
		ТекстЗапросаФорма=ТекстЗапроса;
		Модифицированность=Истина;
		
	КонецЕсли; 
	
КонецПроцедуры
 

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
		
	Если Объект.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
		
		КонструкторЗапроса = Новый КонструкторЗапроса;

		Попытка
			
			Если ТекстЗапросаФорма <> "" Тогда
				КонструкторЗапроса.Текст = ТекстЗапросаФорма;
			КонецЕсли;
			// При необходимости включим режим редактирования.
			НеВключенРежимРедатирования = ((Элементы.ТекстЗапросаФорма.ТолькоПросмотр) И (НЕ Элементы.РедактироватьТекстЗапроса.Пометка));
			Если НеВключенРежимРедатирования Тогда
				ИзменитьПометкуРедактированияТекстаЗапроса(Истина);
			Иначе
				// Уже установлено редактирование, не изменяем.
			КонецЕсли;
			
			ОписаниеОповещения=Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапроса",ЭтотОбъект);
			КонструкторЗапроса.Показать(ОписаниеОповещения);
			
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			База2                    	= ОбщегоНазначенияУХ.ПолучитьСоединениеСВИБПоУмолчанию(Объект.ТипБД, 0);	
			КонструкторЗапроса      	= База2.NewObject("КонструкторЗапроса");
			КонструкторЗапроса.AutoAppendPresentations=False;
			
			Попытка
				
				Если ТекстЗапросаФорма <> "" Тогда		
					КонструкторЗапроса.Text = ТекстЗапросаФорма;
				КонецЕсли;
				// При необходимости включим режим редактирования.
				НеВключенРежимРедатирования = ((Элементы.ТекстЗапросаФорма.ТолькоПросмотр) И (НЕ Элементы.РедактироватьТекстЗапроса.Пометка));
				Если НеВключенРежимРедатирования Тогда
					ИзменитьПометкуРедактированияТекстаЗапроса(Истина);
				Иначе
					// Уже установлено редактирование, не изменяем.
				КонецЕсли;
				Если КонструкторЗапроса.DoModal() И Элементы.РедактироватьТекстЗапроса.Пометка=Истина Тогда
					ТекстЗапросаФорма=КонструкторЗапроса.Text;
				КонецЕсли;
				
			Исключение
				ПоказатьПредупреждение(,ОписаниеОшибки());
			КонецПопытки;
			
		#Иначе		
			ПоказатьПредупреждение(,НСтр("ru='Конструктор запроса можно открыть только в режиме толстого клиента (обычное приложение). В остальных режимах редактирование текста запроса возможно только в поле формы.'"));		
		#КонецЕсли
		
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СписокРесурсовРегистра=СписокРесурсовРегистра;
	ТекущийОбъект.АдресХранилищаПеременныхДляРасчета=РабочийОбъектАдрес;
	ТекущийОбъект.ВосстановитьПеременныеДляРасчета();	
	
	ТекущийОбъект.ТаблицаСоответствияБД				= РеквизитФормыВЗначение("ТаблицаСоответствияБД");
	ТекущийОбъект.ДеревоПолейБД						= РеквизитФормыВЗначение("ДеревоПолейБД");
	ТекущийОбъект.ДеревоПараметровОтбораБД			= РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
		
	ТекущийОбъект.мМодифицированность =  Истина;
	
	Если ТекущийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
		ИЛИ ТекущийОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляПримечаний
		ИЛИ (НЕ ЗначениеЗаполнено(ТекущийОбъект.Код)) Тогда
		ТекущийОбъект.СформироватьКодОперанда(Истина);
	КонецЕсли;
	
	ТекущийОбъект.СохранитьНастройкиОперанда();
	
	ИсточникДляПоказателяОСВ=ТипЗнч(ТекущийОбъект.ПотребительРасчета)=Тип("СправочникСсылка.ПоказателиОтчетов") И (ТекущийОбъект.ПотребительРасчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость 
			И (ЗначениеЗаполнено(ТекущийОбъект.Счет) ИЛИ ЗначениеЗаполнено(ТекущийОбъект.ПоказательОтбор.СчетБД)));
	
КонецПроцедуры
		
&НаСервереБезКонтекста
Процедура ОбновитьНастройкиИсточниковДляСчета(ИсточникДанных)
	
	УправлениеОтчетамиУХ.ОбновитьАналогичныеИсточникиДляСчетаБУ(ИсточникДанных);
	
КонецПроцедуры // ОбновитьНастройкиИсточниковДляСчета()

&НаСервереБезКонтекста
Функция ОбновитьИсточникиДанныхДляПроводки(ИсточникДанных)
	
	Возврат УправлениеОтчетамиУХ.ОбновитьНастройкиДляСтороныПроводки(ИсточникДанных);
	
КонецФункции // ОбновитьНастройкиИсточниковДляСчета()

&НаСервере
Функция ПолучитьПараметрыФормыВыбора(КодАналитики)
	
	СтруктураПараметров=Новый Структура;
	СтруктураОтбора=Новый Структура;
	
	ЭлементПВХ=ЭтаФорма["ВидАналитики" + Прав(КодАналитики.Имя, 1)];	
	СтруктураОтбора.Вставить("Владелец",ЭлементПВХ);
	
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьПараметрыФормыВыбора()

&НаСервере
Функция СтрокаГруппыУсловий(СпособВычисленияПараметра)
	
	 Возврат (НЕ СоответствиеГруппыУсловия.Получить(СпособВычисленияПараметра)=Неопределено);
	 	
КонецФункции // СтрокаГруппыУсловий() 
	


&НаКлиенте
Процедура КодУпрощеннойФормулыПриИзменении(Элемент)
	
	ОбработатьИзменениеТекстаУпрощеннойФормулы();
	
КонецПроцедуры	

&НаКлиенте
Функция ПодготовитьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("Ссылка",					Объект.Ссылка);
	ДанныеОбъекта.Вставить("Код",						СокрЛП(Объект.Код));
	ДанныеОбъекта.Вставить("КодСтар",					СокрЛП(КодСтар));
	ДанныеОбъекта.Вставить("КодУпрощеннойФормулы",		СокрЛП(КодУпрощеннойФормулы));
	ДанныеОбъекта.Вставить("КодУпрощеннойФормулыСтар",	СокрЛП(КодУпрощеннойФормулыСтар));
	ДанныеОбъекта.Вставить("ПотребительРасчета",		Объект.ПотребительРасчета);
	ДанныеОбъекта.Вставить("НазначениеРасчетов",		Объект.НазначениеРасчетов);
	ДанныеОбъекта.Вставить("Счет",						Объект.Счет);
	ДанныеОбъекта.Вставить("КоррСчет",					Объект.КоррСчет);
	ДанныеОбъекта.Вставить("ДополнительноеПредставление",Объект.ДополнительноеПредставление);
	ДанныеОбъекта.Вставить("ТрансляцияДебет",			Объект.ТрансляцияДебет);
	ДанныеОбъекта.Вставить("ТрансляцияКредит",			Объект.ТрансляцияКредит);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПодготовитьДанныеОбъекта() 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДанныеОбъекта = ПодготовитьДанныеОбъекта();
	
	Оповестить("ЗаписанИсточникДанных", ДанныеОбъекта);
	
	Если ДанныеОбъекта.ТрансляцияДебет ИЛИ ДанныеОбъекта.ТрансляцияДебет Тогда 
	    Оповестить("ЗаписаноПравилоНастройкиТрансляции",ДанныеОбъекта);
	ИначеЕсли Объект.ЕстьНестандартныеОтборы Тогда
		Оповестить("ЗаписанИсточникДанныхСНестандартнымиОтборами",ДанныеОбъекта);
	КонецЕсли;
	
	Если ИсточникДляПоказателяОСВ Тогда
		
		Если Параметры.ДляВсехИсточниковПоСчету Тогда 
			
			ОбновитьНастройкиИсточниковДляСчета(Объект.Ссылка);
			
		Иначе
			
			Ответ = Неопределено;
			
			ТекстВопроса = НСтр("ru = 'Распространить настройки сопоставления аналитик и отборов
							|на все показатели, относящиеся к данному счету?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
		
		КонецЕсли;
		
	ИначеЕсли Объект.ТрансляцияДебет ИЛИ Объект.ТрансляцияКредит Тогда
		
		ДанныеКонтрИсточника = ОбновитьИсточникиДанныхДляПроводки(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда				
        ОбновитьНастройкиИсточниковДляСчета(Объект.Ссылка);				
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТолькоПримитивныеТипыПриИзменении(Элемент)
	
	Если Объект.ТолькоПримитивныеТипы Тогда
		
		МассивСоответствия=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Ложь));
		
		Для Каждого Строка ИЗ МассивСоответствия Цикл
			
			Если Не Строка.ТипМетаДанных="Простой" Тогда
				
				ОтменитьУстановкуСоответствияБД(Строка);
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСоздать(СтрокаИсточника, СтрокаПриемника)
	
	Модифицированность = Истина;
	
	Если ДляЭкспортаДанных Тогда
		
		ОбновитьНастройкуСоответствияЭкспорт(СтрокаПриемника, СтрокаИсточника);
		
		Если СтрокаИсточника.Свойство("ОбновитьНастройкиСоответствия") Тогда
			
			СтрокаВИБ=ДеревоПолейБД.НайтиПоИдентификатору(СтрокаИсточника.ИндексСтроки);
			СтрокаВИБ.ТипДанныхПоля=РаботаСПолямиАналитикиУХ.ПолучитьСписокНастроекСоответствийПриемник(Объект.ТипБДПриемник,СтрокаВИБ.ТипМетаДанных,СтрокаВИБ.СправочникБД);
			
		КонецЕсли;
	
	ИначеЕсли ВнутренниеДанные ИЛИ СтрокаИсточника.Свойство("КонтекстОтчета") Тогда
		
		ОбновитьНастройкуСоответствияТек(СтрокаПриемника, СтрокаИсточника);

	Иначе
		
		ОбновитьНастройкуСоответствияВИБ(СтрокаПриемника, СтрокаИсточника);
		
		Если СтрокаИсточника.Свойство("ОбновитьНастройкиСоответствия") Тогда
			
			СтрокаВИБ=ДеревоПолейБД.НайтиПоИдентификатору(СтрокаИсточника.ИндексСтроки);
			СтрокаВИБ.ТипДанныхПоля=РаботаСПолямиАналитикиУХ.ПолучитьСписокНастроекСоответствийИсточник(Объект.ТипБД,СтрокаВИБ.ТипМетаДанных,СтрокаВИБ.СправочникБД);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеУдалить()
	
	ТекущиеДанные = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьУстановкуСоответствияБД(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПередУдалением(Элемент, Отказ)
	
	Если НЕ Объект.СпособИспользования=ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов") Тогда
		
		Отказ = Истина;	
		СоответствиеУдалить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияСпособЗаполненияПриИзменении(Элемент)
	
	СоответствиеУдалить();
	Элементы.ТаблицаСоответствия.ЗакончитьРедактированиеСтроки(Ложь);
	
	Если Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.РучнойВвод") Тогда
		
		Элементы.ТаблицаСоответствия.ТекущиеДанные.Сопоставлено=Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем ВыбранноеЗначение;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаСоответствия.ТекущиеДанные.АналитикаКонсолидации) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Поле.Имя="ТаблицаСоответствияПолеБД" ИЛИ Поле.Имя="ТаблицаСоответствияПсевдонимБД" Тогда
		
		СтандартнаяОбработка=Ложь;
		
		Если Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки") Тогда
			
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораПоляОбъекта",Новый Структура("ВидОтчета,ПотребительРасчета",ВидОтчета,Объект.ПотребительРасчета));
			
		ИначеЕсли Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение") Тогда
	
			КодАналитики=Элементы.ТаблицаСоответствия.ТекущиеДанные.АналитикаКонсолидации;
			СтрокаДанныхПоля=НайтиСтрокуТаблицыОбъекта(РабочийОбъектАдрес,"мТаблицаВозможныхПолей","Поле",КодАналитики);
			ОписаниеОповещенияПослеВводаФиксированногоЗначения = Новый ОписаниеОповещения("ПослеВводаФиксированногоЗначения",ЭтаФорма);
			
			Если СтрокаДанныхПоля = Неопределено И КодАналитики = "Значение" Тогда
				
				МассивТипов=Новый Массив;
				МассивТипов.Добавить("Число");
				 
				ТекТипЗначения=ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов);				
				 
				ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов));
				
			ИначеЕсли СтрокаДанныхПоля = Неопределено И КодАналитики = "Период" Тогда
				
				МассивТипов=Новый Массив;
				МассивТипов.Добавить("Дата");
				 
				ТекТипЗначения=ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов);
				 
				ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов));
			
			ИначеЕсли ОбщегоНазначенияКлиентСерверУХ.ПримитивныйТипСтрока(СтрокаДанныхПоля.ТаблицаАналитики) Тогда
				
				 МассивТипов=Новый Массив;
				 МассивТипов.Добавить(СтрокаДанныхПоля.ТаблицаАналитики);
				 
				 ТекТипЗначения=ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов);
			 
				 ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОбщегоНазначенияКлиентСерверУХ.ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТипов));
				 
			 ИначеЕсли КодАналитики="АналитикаВалюта" Тогда
				 
				СтруктураПараметров=Новый Структура;
				СтруктураПараметров.Вставить("ТекущаяСтрока", Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение);
				СтруктураПараметров.Вставить("РежимВыбора",Истина);
				
				ОткрытьФорму("Справочник.Валюты.ФормаВыбора",СтруктураПараметров,ЭтаФорма);	
			
			ИначеЕсли ЗначениеЗаполнено(ДанныеАналитики) И ЗначениеЗаполнено(СтрокаДанныхПоля.ВидАналитики) Тогда
				
				ТекВидАналитики=?(ДанныеАналитики.Свойство(КодАналитики),ДанныеАналитики[КодАналитики],ДанныеАналитики["ВидАналитики" + Прав(КодАналитики, 1)]);
				
				Если ТекВидАналитики.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
					
					СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",Элементы.ТаблицаСоответствия.ТекущиеДанные.ВидАналитики));
					
				ИначеЕсли ТекВидАналитики.Свойство("Владелец") Тогда
					
					СтрокаВладелец=ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(ТаблицаСоответствияБД,ТекВидАналитики.Владелец,"АналитикаКонсолидации");
					
					Если НЕ СтрокаВладелец=Неопределено И ЗначениеЗаполнено(СтрокаВладелец.ФиксированноеЗначение) Тогда
						
						СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",СтрокаВладелец.ФиксированноеЗначение));
						
					КонецЕсли;
					
				ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.СчетаБД"
					ИЛИ ТекВидАналитики.ТаблицаАналитики="Справочник.КорреспонденцииВГО" Тогда
					
					СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",ПланСчетов));
					
				ИначеЕсли ТекВидАналитики.ТипЗначения.Типы().Количество()>1 Тогда
					
					ВыбранноеЗначение=Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение;
					ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ТекВидАналитики.ТипЗначения);
					Возврат;
					
				Иначе
					
					СтруктураПараметров=Новый Структура;
					
				КонецЕсли;
				
				СтруктураПараметров.Вставить("ТекущаяСтрока", Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение);
				СтруктураПараметров.Вставить("РежимВыбора",Истина);
				
				ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаВыбора",СтруктураПараметров,ЭтаФорма);		
				
			Иначе  
				
				Если СтрокаДанныхПоля.ТипДанныхПоля.Количество()>0 Тогда
										
					ОписаниеТипов=Новый ОписаниеТипов(СтрокаДанныхПоля.ТипДанныхПоля.ВыгрузитьЗначения());
					
					ОписаниеОповещенияПослеВводаФиксированногоЗначения = Новый ОписаниеОповещения("ПослеВводаФиксированногоЗначения",ЭтаФорма);
					ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОписаниеТипов);
					
				КонецЕсли;
								
			КонецЕсли;
			
		ИначеЕсли Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных") Тогда	
			
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("НазначениеРасчетов",Объект.НазначениеРасчетов);
			СтруктураОтбора.Вставить("ПотребительРасчета",Объект.ПотребительРасчета);
			СтруктураОтбора.Вставить("СпособИспользования",Объект.СпособИспользования);
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("ТекущаяСтрока", Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение);
			СтруктураПараметров.Вставить("РежимВыбора",Истина);
			
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				СтруктураПараметров.Вставить("ИсходныйИсточник",Объект.Ссылка);
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
			
			ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора",СтруктураПараметров,ЭтаФорма);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаФиксированногоЗначения(ВыбранноеЗначение,Параметры) Экспорт
	
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение=ВыбранноеЗначение;
	ПредставлениеАналитики=Строка(ВыбранноеЗначение);
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ПолеБД=ПредставлениеАналитики;
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ПсевдонимБД=ПредставлениеАналитики;
	Элементы.ТаблицаСоответствия.ТекущиеДанные.Сопоставлено=Истина;
	
	Модифицированность=Истина;
		
КонецПроцедуры // ПослеВводаФиксированногоЗначения()
	
	


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы= "Справочник.ПоказателиОтчетов.Форма.ФормаВыбора"
		И РежимРаспространенияОтборов Тогда
		
		МассивПоказателей=Новый Массив;
		
		Для Каждого СтрПоказатель ИЗ ВыбранноеЗначение Цикл
			
			Если СтрПоказатель.Ссылка=Объект.ПотребительРасчета Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МассивПоказателей.Добавить(СтрПоказатель.Ссылка);
			
		КонецЦикла;
		
		Если МассивПоказателей.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивОбработанныхИсточников=РаспространитьОтборыНаСервере(Новый ФиксированныйМассив(МассивПоказателей));
		
		Для Каждого СтрИсточник ИЗ МассивОбработанныхИсточников Цикл
			
			Оповестить("ЗаписанИсточникДанных",СтрИсточник);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов") Тогда
	
		
		Если (НЕ Элементы.ТаблицаСоответствия.ТекущиеДанные=Неопределено)
			И Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных") Тогда
			
			Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение=ВыбранноеЗначение;
			ПредставлениеАналитики=Строка(ВыбранноеЗначение);
			Элементы.ТаблицаСоответствия.ТекущиеДанные.ПолеБД=ПредставлениеАналитики;
			Элементы.ТаблицаСоответствия.ТекущиеДанные.ПсевдонимБД=ПредставлениеАналитики;
			Элементы.ТаблицаСоответствия.ТекущиеДанные.Сопоставлено=Истина;
			
		Иначе
			
			Объект.ИсточникШаблон=ВыбранноеЗначение;
			ИсточникШаблонПриИзмененииНаСервере();
			
		КонецЕсли;
			
		Модифицированность=Истина;
		
	ИначеЕсли НЕ Элементы.ТаблицаСоответствия.ТекущиеДанные=Неопределено Тогда
		
		Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение=ВыбранноеЗначение;
		ПредставлениеАналитики=Строка(ВыбранноеЗначение);
		Элементы.ТаблицаСоответствия.ТекущиеДанные.ПолеБД=ПредставлениеАналитики;
		Элементы.ТаблицаСоответствия.ТекущиеДанные.ПсевдонимБД=ПредставлениеАналитики;
		Элементы.ТаблицаСоответствия.ТекущиеДанные.Сопоставлено=Истина;
		
		Модифицированность=Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказательОтбор1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	КодУпрощеннойФормулы=ТекущийОбъект.КодУпрощеннойФормулы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненнуюСтрокуУсловия(СтрПоле)
	
	СтрокаУсловие=СтрПоле.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаУсловие,СтрПоле);
		
	Если (СтрокаУсловие.ТипМетаДанных="Справочник" ИЛИ СтрокаУсловие.ТипМетаДанных="Документ" ИЛИ СтрокаУсловие.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ СтрокаУсловие.ТипЗначения.Количество()>1) И НЕ Использование77 Тогда 
		// Добавим строку для дальнейшего раскрытия
		
		НоваяСтрока=СтрокаУсловие.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
				
КонецПроцедуры // ДобавитьСтрокуУсловия() 

&НаКлиенте
Процедура ДеревоПолейИПараметровОтбораБДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя="ПолеСоответствия" И НЕ ВнутренниеДанные Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("Отбор",Новый Структура("Владелец",Объект.ТипБД));
		СтруктураПараметров.Вставить("ТипОбъектаВИБ",Элементы.ДеревоПолейБД.ТекущиеДанные.ТипМетаДанных);
		СтруктураПараметров.Вставить("НаименованиеОбъектаВИБ",Элементы.ДеревоПолейБД.ТекущиеДанные.СправочникБД);
		
		ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.ФормаСписка",СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовуюСтрокуУсловия()
	
	ТекСтрокаОтбор=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если ТекСтрокаОтбор=Неопределено Тогда
		
		НоваяСтрока=ДеревоПараметровОтбораБД.ПолучитьЭлементы().Добавить();
	
	ИначеЕсли НЕ СоответствиеГруппыУсловия.Получить(ТекСтрокаОтбор.СпособВычисленияПараметра)=Неопределено Тогда
		
		НоваяСтрока=ТекСтрокаОтбор.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли ТекСтрокаОтбор.ПолучитьРодителя()=Неопределено Тогда
		
		НоваяСтрока=ДеревоПараметровОтбораБД.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока=ТекСтрокаОтбор.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		
	КонецЕсли;

	Возврат НоваяСтрока; 
		
КонецФункции // 

&НаКлиенте
Процедура ДобавитьЭлементУсловия(Команда)
	
	ДанныеПоля=Элементы.ДеревоПолейБД.ТекущиеДанные;
	
	Если Не ПроверитьВозможностьОтбора(ДанныеПоля) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьСтрокуУсловия(ДанныеПоля);
			
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОтбора(ДанныеПоля)
	
	Если ДанныеПоля=Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Выберите поле источника для отбора.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ПроизвольныйЗапрос И ДанныеПоля.Измерение Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Критерии отбора полей произвольного запроса должны быть указаны в тексте запроса'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ДанныеПоля.ТипЗначения.Количество()>1 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Поле имеет составной тип. Выберите тип данных для отбора на следующем уровне иерархии.'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ДанныеПоля.ТипЗначения.Количество()=0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось определить тип данных поля для отбора.'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции // ПроверитьВозможностьОтбора() 

&НаКлиенте
Процедура ДобавитьСтрокуУсловия(ДанныеПоля)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
		
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеПоля);
	
	Если ДанныеПоля.ТипДанныхПоля.Количество()>0 Тогда
		НоваяСтрока.НастройкаСоответствия=ДанныеПоля.ТипДанныхПоля[0].Значение;
	КонецЕсли;
	
	Модифицированность=Истина;
		
КонецПроцедуры // ДобавитьСтрокуУсловия() 

&НаКлиенте
Процедура ДобавитьГруппуИ(Команда)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	НоваяСтрока.СпособВычисленияПараметра=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ГруппаИ");
	НоваяСтрока.НаименованиеБД="Группа И";
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуИЛИ(Команда)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	НоваяСтрока.СпособВычисленияПараметра=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ГруппаИЛИ");
	НоваяСтрока.НаименованиеБД="Группа ИЛИ";

		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуНЕ(Команда)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	НоваяСтрока.СпособВычисленияПараметра=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ГруппаНЕ");
	НоваяСтрока.НаименованиеБД="Группа НЕ";
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не ПроверитьВозможностьОтбора(ПараметрыПеретаскивания.Значение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеПоля=ПараметрыПеретаскивания.Значение;
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеПоля);
	
	Если ДанныеПоля.ТипДанныхПоля.Количество()>0 Тогда
		НоваяСтрока.НастройкаСоответствия=ДанныеПоля.ТипДанныхПоля[0].Значение;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВычисленияПараметраПриИзменении(Элемент)
	
	ПолучитьУстановитьОграничениеТипа();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУстановитьОграничениеТипа()
	
	СтрПоле=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если СтрПоле.ТипЗначения.Количество()>0 И СоответствиеГруппыУсловия.Получить(СтрПоле.СпособВычисленияПараметра)=Неопределено Тогда
		
		ДанныеОбъекта=СформироватьДанныеОбъекта();
		ДанныеОбъекта.Вставить("ИмяПараметра",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
		ДанныеОбъекта.Вставить("ТипДанныхПоля",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
		ДанныеОбъекта.Вставить("ТипЗначения",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
		ДанныеОбъекта.Вставить("СпособВычисленияПараметра",	Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВычисленияПараметра);
		
		ДанныеДляОграничения=ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта);
		
		Если ДанныеДляОграничения.Количество()>0 Тогда
			
			Для Каждого СтрОграничение ИЗ ДанныеДляОграничения Цикл
				
				УстановитьОграничениеТипа(СтрОграничение);
				
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения) Тогда
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения=Неопределено;
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ЗначениеДляПроверки=Неопределено;
			
			Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.УточнениеСпособаОпределения.ОграничениеТипа	= Новый ОписаниеТипов("Неопределено");
			Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.ЗначениеДляПроверки.ОграничениеТипа			= Новый ОписаниеТипов("Неопределено");

			
		КонецЕсли;
		
 	КонецЕсли;
		
КонецПроцедуры // ПолучитьУстановитьОграничениеТипа() 

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя="СпособВычисленияПараметра" Тогда
		
		ТекСписокВыбора = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.СпособВычисленияПараметра.СписокВыбора;
		ТекСписокВыбора.Очистить();
		
		Если Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения.Количество()>0 Тогда 
			
			ДанныеОбъекта=СформироватьДанныеОбъекта();
			ДанныеОбъекта.Вставить("ИмяПараметра",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
			ДанныеОбъекта.Вставить("ТипДанныхПоля",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
			ДанныеОбъекта.Вставить("ТипЗначения",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
			ДанныеОбъекта.Вставить("ВнутренниеДанные",	ВнутренниеДанные);
			
			СписокСпособовВычисления=ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта);
			
			Для Каждого СпособОпределения ИЗ СписокСпособовВычисления Цикл
				ТекСписокВыбора.Добавить(СпособОпределения.Значение, СпособОпределения.Представление);
			КонецЦикла;
			
		Иначе
			
			ТекСписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение"), Нстр("ru = 'Функция на встроенном языке (значение)'"));
			ТекСписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений"), Нстр("ru = 'Функция на встроенном языке (список значений)'"));
				
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя="УточнениеСпособаОпределения" ИЛИ Элемент.ТекущийЭлемент.Имя="ЗначениеДляПроверки" Тогда
		
		ПолучитьУстановитьОграничениеТипа();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРаскрытияПриИзменении(Элемент)
	
	ГруппаРаскрытияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГруппаРаскрытияПриИзмененииНаСервере()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПриИзмененииГруппыРаскрытияОтбор();
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребительРасчета1ПриИзменении(Элемент)
	
	ПриИзмененииПотребителяРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектБДПриИзменении(Элемент)
	
	ПриИзмененииОбъектаБД();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьБДПриИзменении(Элемент)
	
	ПриИзмененииОбъектаБД();
		
КонецПроцедуры

&НаКлиенте
Процедура РаспространитьОтборы(Команда)
	
	РежимРаспространенияОтборов=Истина;
	
	ОткрытьФорму("Справочник.ПоказателиОтчетов.Форма.ФормаВыбора",Новый Структура("Отбор,ВозвращатьКод,МножественныйВыбор",Новый Структура("Владелец",ВидОтчета),Ложь,Истина),ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Функция РаспространитьОтборыНаСервере(МассивПоказателей)
	
	Записать();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПолеБД,
	|		НаименованиеБД,
	|		СпособВычисленияПараметра,
	|		ЗначениеДляПроверки,
	|		ТипРасчета,
	|		Реквизит,
	|		СмещениеПериода,
	|		НастройкаСоответствия,
	|		ТаблицаАналитикиВИБ,
	|		ТекстМодуля,
	|		ИдентификаторСтроки,
	|		ИдентификаторРодителя,
	|		ИмяПараметра
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПолеБД,
	|		Значение,
	|		Представление,
	|		Пометка,
	|		Тип
	|	) КАК УточненияСпособовОпределения
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	ДанныеОтборов=Запрос.Выполнить().Выгрузить();
	
		
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета В(&МассивПоказателей)";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",Объект.НазначениеРасчетов);
	Запрос.УстановитьПараметр("МассивПоказателей",МассивПоказателей);
	
	МассивИсточников=Новый Массив;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ИсточникОбъект=Результат.Ссылка.ПолучитьОбъект();
		
		ДанныеОбъекта=Новый Структура;
		ДанныеОбъекта.Вставить("Ссылка",					ИсточникОбъект.Ссылка);
		ДанныеОбъекта.Вставить("КодСтар",					СокрЛП(ИсточникОбъект.Код));
		ДанныеОбъекта.Вставить("КодУпрощеннойФормулыСтар",	СокрЛП(ОбщегоНазначенияУХ.ПрочитатьКодУпрощеннойФормулы(ИсточникОбъект.Ссылка)));
		ДанныеОбъекта.Вставить("ПотребительРасчета",		ИсточникОбъект.ПотребительРасчета);
		ДанныеОбъекта.Вставить("НазначениеРасчетов",		ИсточникОбъект.НазначениеРасчетов);
		
		ИсточникОбъект.ТаблицаПараметровОтбораБД.Загрузить(ДанныеОтборов[0].ТаблицаПараметровОтбораБД);
		ИсточникОбъект.УточненияСпособовОпределения.Загрузить(ДанныеОтборов[0].УточненияСпособовОпределения);
		
		ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
		
		Попытка
			
			ИсточникОбъект.Записать();
			ДанныеОбъекта.Вставить("Код",					СокрЛП(ИсточникОбъект.Код));
			ДанныеОбъекта.Вставить("КодУпрощеннойФормулы",	СокрЛП(ИсточникОбъект.КодУпрощеннойФормулы));
			МассивИсточников.Добавить(ДанныеОбъекта);
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось изменить параметры отбора источника данных %1 для показателя %2
			|%3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИсточникОбъект.Код, ИсточникОбъект.ПоказательОтбор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецЕсли;
						
		КонецПопытки;
		
	КонецЦикла;
	
	РежимРаспространенияОтборов=Ложь;
	
	Возврат МассивИсточников;
	
КонецФункции

&НаКлиенте
Процедура КоррСчетИсточникПриИзменении(Элемент)
	
	Объект.ВидИтога=?(Использование77,"КорДО","Оборот");
	ПриИзмененииСчета(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяНастройкаПриИзменении(Элемент)
	
//	Элементы.ГруппаНазначение.Видимость		= РасширеннаяНастройка;
	Элементы.ГруппаСпособПолучения.Видимость= РасширеннаяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательОбъектаБДПриИзменении(Элемент)
	
	Объект.ОбъектБД=Объект.ПоказательОбъектаБД;
	ПриИзмененииОбъектаБД();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияНастройкаСоответствияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеЗаполнено(Объект.ТипБДПриемник) Тогда
		
		СоответствиеВладелец=?(Объект.ТипБДПриемник=ПредопределенноеЗначение("Справочник.ТипыБазДанных.ТекущаяИБ"),Объект.ТипБД,Объект.ТипБДПриемник);
		
	Иначе
		
		СоответствиеВладелец=Объект.ТипБД;
		
	КонецЕсли;
			
	ОткрытьФорму("Справочник.СоответствиеВнешнимИБ.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец",СоответствиеВладелец)),Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаОтборГруппаРаскрытияПриИзменении(Элемент)
	
	Объект.ГруппаРаскрытияОтбор="";
	ГруппаРаскрытияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПередУдалением(Элемент, Отказ)
	
	Отказ=(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД="ДатаНач" 
		ИЛИ Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД="ДатаКон")
		И (НЕ Объект.ОсновнаяТаблицаРегистра); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДляПроверкиПриИзменении(Элемент)
	
	Если СтрокаТипПотребительРасчета="ШаблоныУниверсальныхПроцессов" Тогда
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ЗначениеДляПроверки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеСервер()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.СформироватьКодОперанда();
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ОбновитьНаименованиеСервер()

&НаКлиенте
Процедура ОбновитьНаименование(Команда)
	
	ОбновитьНаименованиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Элемент ИЗ ДеревоПолейБД.ПолучитьЭлементы() Цикл
		
		Если НЕ Элемент.ПолеБД="Регистратор" Тогда
			
			Если НЕ Элементы.ДеревоПолейБД.Развернут(Элемент.ПолучитьИдентификатор()) Тогда
				
				Элементы.ДеревоПолейБД.Развернуть(Элемент.ПолучитьИдентификатор());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ДляФормированияКорректировок И (НЕ ЗначениеЗаполнено(Объект.СпособПолучения)) Тогда
		
		Объект.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии");
		ПриИзмененииСпособаПолучения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаРегистраПриИзменении(Элемент)
	
	ПриИзмененииРегистраНакопления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
				
		ИзменитьПометкуРедактированияТекстаЗапроса();
		Записать();
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Элементы.РедактироватьТекстЗапроса.Пометка И Модифицированность Тогда
		
		Отказ=Истина;
		
		Оповещение = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект,Новый Структура("Отказ",Отказ));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Текст произвольного запроса был изменен. Перед записью необходимо выйти из режима редактирования. Сохранить запрос и продолжить запись?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УточнениеСпособаОпределенияОчистка(Элемент, СтандартнаяОбработка)
	
//	Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВыбора="";
//	Элементы.ДеревоПараметровОтбораБД.ЗакончитьРедактированиеСтроки(Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИтогаБДПриИзменении(Элемент)
	
	Для Каждого ЭлементОтбора Из ДеревоПараметровОтбораБД.ПолучитьЭлементы() Цикл
		Если ЭлементОтбора.ПолеБД = "ДатаНач" Тогда
			ЭлементОтбора.СпособВычисленияПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета");
			ЭлементОтбора.УточнениеСпособаОпределения = Неопределено;
		ИначеЕсли ЭлементОтбора.ПолеБД = "ДатаКон" Тогда
			ЭлементОтбора.СпособВычисленияПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета");
			ЭлементОтбора.УточнениеСпособаОпределения = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМногопериодныйКонтекстПриИзменении(Элемент)
	ИспользоватьМногопериодныйКонтекстПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИспользоватьМногопериодныйКонтекстПриИзмененииНаСервере()	
	ОбработатьИзменениеТекстаПроизвольногоЗапроса(Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШаблон(Команда)
	
	Элементы.ФормаИспользоватьШаблон.Пометка=НЕ Элементы.ФормаИспользоватьШаблон.Пометка;
	
	Если Элементы.ФормаИспользоватьШаблон.Пометка Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТипБД",Объект.ТипБД);
		СтруктураПараметров.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ПроизвольныеДанные"));
		
		ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора",Новый Структура("Отбор",СтруктураПараметров),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Объект.ИсточникШаблон="";
		РазблокироватьПоляШаблона();
		УстановитьВидимостьСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьПоляШаблона()
	
	ПоляШаблона=Новый Массив;
	ПоляШаблона.Добавить("ТипБД");
	ПоляШаблона.Добавить("СпособПолучения");
	ПоляШаблона.Добавить("РегистрБухгалтерииБД");
	ПоляШаблона.Добавить("РегистрНакопленияБД");
	ПоляШаблона.Добавить("ОсновнаяТаблицаРегистра");
	ПоляШаблона.Добавить("РегистрСведенийБД");
	ПоляШаблона.Добавить("ОбъектБД");
	ПоляШаблона.Добавить("ТабличнаяЧастьБД");		
	ПоляШаблона.Добавить("Счет");
	ПоляШаблона.Добавить("РесурсРегистра");
	ПоляШаблона.Добавить("РесурсРегистраБД");
	ПоляШаблона.Добавить("РесурсРегистраСведений");
	ПоляШаблона.Добавить("ТекстЗапросаФорма");
	
	ПоляШаблона.Добавить("КоррСчет");
	ПоляШаблона.Добавить("ВидИтога");
	
	Для Каждого Элемент ИЗ ПоляШаблона Цикл
		
		Элементы[Элемент].ТолькоПросмотр=Ложь;
		
	КонецЦикла;	
	
КонецПроцедуры // РазблокироватьПоляШаблона() 

&НаСервере
Процедура ИсточникШаблонПриИзмененииНаСервере()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ЗаполнитьПоШаблонуИсточнику();
	ПоместитьДанныеОбъектаВРеквизитыФормы(РабочийОбъект);
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(РабочийОбъект.ДеревоПараметровОтбораБДШаблон,ДеревоПараметровОтбораБДШаблон);
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	УстановитьТолькоПросмотрПоШаблону(РабочийОбъект.ПоляШаблона);
	УстановитьВидимостьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникШаблонПриИзменении(Элемент)
	ИсточникШаблонПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресПараметровДляШаблона()
	
	Записать();
	МассивСпособовВнеКонтекста=Справочники.ИсточникиДанныхДляРасчетов.ПолучитьМассивСпособовВычисленияВнеКонтекста();
	
	ТаблицаПараметровОтбораБД=Объект.ТаблицаПараметровОтбораБД.Выгрузить();
	УточненияСпособовОпределения=Объект.УточненияСпособовОпределения.Выгрузить();
	
	ТаблицаПараметровШаблон=ТаблицаПараметровОтбораБД.СкопироватьКолонки();
	УточненияСпособовОпределенияШаблон=УточненияСпособовОпределения.СкопироватьКолонки();
	
	Для Каждого Строка ИЗ ТаблицаПараметровОтбораБД Цикл
		
		Если МассивСпособовВнеКонтекста.Найти(Строка.СпособВычисленияПараметра)=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаПараметровШаблон.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		УточненияСпособов=УточненияСпособовОпределения.НайтиСтроки(Новый Структура("ПолеБД,ИмяПараметра",Строка.ПолеБД,Строка.ИмяПараметра));
		
		Для Каждого СтрокаУточнения ИЗ УточненияСпособов Цикл
			
			НовоеУточнение=УточненияСпособовОпределенияШаблон.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеУточнение,СтрокаУточнения);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.Счет) И (Не ЗначениеЗаполнено(Объект.КоррСчет)) Тогда
			
			ОчиститьПризнакДтКт(ТаблицаПараметровШаблон);
			ОчиститьПризнакДтКт(УточненияСпособовОпределенияШаблон);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекТаблицаСоответствияБД=РеквизитФормыВЗначение("ТаблицаСоответствияБД");
	
	ТаблицаСоответствияШаблон=ТекТаблицаСоответствияБД.СкопироватьКолонки();
	
	Для Каждого Строка ИЗ ТекТаблицаСоответствияБД Цикл
		
		Если Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
			
			НоваяСтрока=ТаблицаСоответствияШаблон.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка,,"АналитикаКонсолидации,ПсевдонимКонсолидации,АналитикаОтчета");
			НоваяСтрока.ПсевдонимКонсолидации=Строка(Строка.ВидАналитики);
			НоваяСтрока.АналитикаКонсолидации=ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(НоваяСтрока.ПсевдонимКонсолидации);
			
		КонецЕсли;
		
	КонецЦикла;

	СтруктураШаблона=Новый Структура;
	СтруктураШаблона.Вставить("ТипБД",					Объект.ТипБД);
	СтруктураШаблона.Вставить("Наименование",			Объект.Наименование);
	СтруктураШаблона.Вставить("СпособПолучения",		Объект.СпособПолучения);
	СтруктураШаблона.Вставить("СпособИспользования",	Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные);
	СтруктураШаблона.Вставить("ТекстЗапросаМодуля",		Объект.ТекстЗапросаМодуля);
	СтруктураШаблона.Вставить("РегистрБД",				Объект.РегистрБД);
	СтруктураШаблона.Вставить("ПланСчетовБД",			Объект.ПланСчетовБД);
	СтруктураШаблона.Вставить("Счет",					Объект.Счет);
	СтруктураШаблона.Вставить("КоррСчет",				Объект.КоррСчет);
	СтруктураШаблона.Вставить("ВидИтога",				Объект.ВидИтога);
	СтруктураШаблона.Вставить("РесурсРегистра",			Объект.РесурсРегистра);
	СтруктураШаблона.Вставить("ВидСреза",				Объект.ВидСреза);
	СтруктураШаблона.Вставить("ДтКт",					Объект.ДтКт);

	СтруктураШаблона.Вставить("ТаблицаПараметровШаблон",ТаблицаПараметровШаблон);
	СтруктураШаблона.Вставить("УточненияСпособовОпределенияШаблон",УточненияСпособовОпределенияШаблон);
	СтруктураШаблона.Вставить("ТаблицаСоответствияБД",ТаблицаСоответствияШаблон);

	Возврат ПоместитьВоВременноеХранилище(СтруктураШаблона,ЭтаФорма.УникальныйИдентификатор);

КонецФункции // ПолучитьАдресПараметровДляШаблона()

&НаСервере
Процедура ОчиститьПризнакДтКт(ТаблицаПараметров)
	
	Для Каждого Строка ИЗ ТаблицаПараметров Цикл
		
		Строка.ПолеБД=СтрЗаменить(Строка.ПолеБД,"Дт","");
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьПризнакДтКт() 

&НаКлиенте
Процедура СоздатьШаблон(Команда)
	
	АдресПараметровШаблона=ПолучитьАдресПараметровДляШаблона();
	ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта",Новый Структура("АдресПараметровШаблона",АдресПараметровШаблона));
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПолеШаблона(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСопоставлениеПоляШаблона(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаПолейШаблона.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьУстановкуСоответствияБД(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПолеРесурса(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПолейШаблонаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПолейШаблонаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка=Неопределено Тогда
						
		Возврат;
					
	Иначе
		
		ДанныеПриемника=Элемент.ДанныеСтроки(Строка);
		
	КонецЕсли;
	
	СоответствиеШаблонаСоздать(ПараметрыПеретаскивания.Значение, ДанныеПриемника);
	
КонецПроцедуры 

&НаКлиенте
Процедура СоответствиеШаблонаСоздать(СтрокаИсточника, СтрокаПриемника)
	
	Модифицированность = Истина;
	
	Если ВнутренниеДанные Тогда
		
		ОбновитьНастройкуСоответствияТек(СтрокаПриемника, СтрокаИсточника);

	Иначе
		
		ОбновитьНастройкуСоответствияВИБ(СтрокаПриемника, СтрокаИсточника);
		
		Если СтрокаИсточника.Свойство("ОбновитьНастройкиСоответствия") Тогда
			
			СтрокаВИБ=ДеревоПолейБД.НайтиПоИдентификатору(СтрокаИсточника.ИндексСтроки);
			СтрокаВИБ.ТипДанныхПоля=РаботаСПолямиАналитикиУХ.ПолучитьСписокНастроекСоответствийИсточник(Объект.ТипБД,СтрокаВИБ.ТипМетаДанных,СтрокаВИБ.СправочникБД);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПолейШаблонаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкуПоляШаблонаТек(СтрокаСоответствия,СтрокаИсточника)
		
	Если НЕ ВозможнаУстановкаСоответствия(СтрокаСоответствия,СтрокаИсточника) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Несовпадение типов аналитик.'"),30);
		Возврат;
	КонецЕсли;
				
	СтрокаСоответствия.ПолеБД=СтрокаИсточника.ПолеБД;		
	СтрокаСоответствия.ПсевдонимБД=СтрокаИсточника.НаименованиеБД;	
	СтрокаСоответствия.Сопоставлено = Истина;	
	СтрокаСоответствия.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
			
КонецПроцедуры // ОбновитьНастройкуСоответствияТек()

&НаСервере
Процедура ДобавитьСтрокуВозможныхПолей(ИдентификаторСтроки)

	ТекущиеДанные=ТаблицаСоответствияБД.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ДобавитьСтрокуВозможныхПолей(ТекущиеДанные.ВидАналитики);
	РабочийОбъект.СформироватьТаблицуСоответствияБД();
	
	СтрокаСоответствия=РабочийОбъект.ТаблицаСоответствияБД.Найти(ТекущиеДанные.ВидАналитики,"ВидАналитики");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные,СтрокаСоответствия);
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияБДВидАналитикиПриИзменении(Элемент)
	
	//УдалитьСопоставлениеПоляШаблона();
	ДобавитьСтрокуВозможныхПолей(Элементы.ТаблицаПолейШаблона.ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРесурсовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элементы.ТаблицаРесурсов.ТекущиеДанные.Коэффициент=1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовБДПриИзменении(Элемент)
	
	ПриИзмененииПланаСчетов();
		
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииПланаСчетов()
	
	ПланСчетов=Объект.ПланСчетовБД;
	ПриИзмененииСчета(Истина);
	ПриИзмененииСчета(Ложь);
	
КонецПроцедуры // ПриИзмененииПланаСчетов()

&НаКлиенте
Процедура СоответствиеРесурсовДляТрансляцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
 	Если НоваяСтрока Тогда
		
		Элементы.СоответствиеРесурсовДляТрансляции.ТекущиеДанные.Коэффициент=1;
		
	КонецЕсли;

КонецПроцедуры







