
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мСоответствиеИзмеренийСпособовИТипов Экспорт;

Перем мТаблицаВидовАналитикПоказателя Экспорт; // Список видов аналитик показателя
Перем мТаблицаВидовАналитикПоказателяОтбор Экспорт; // Список видов аналитик показателя для отбора

Перем мТаблицаВидовАналитикВидаОтчета Экспорт; // Список видов аналитик отчета - владельца показателя
Перем мТаблицаВидовАналитикВидаОтчетаОтбор Экспорт; // Список видов аналитик вида отчета для отбора

Перем мТаблицаВозможныхПолейОтбор Экспорт; // Таблица полей запроса для синхронизации аналитик - данные запроса
Перем мТаблицаВозможныхПолей Экспорт; // Таблица полей запроса для синхронизации аналитик - данные из контекста документа
Перем мСоответствиеРеквизитовАналитики Экспорт; // Соответствие, в котором хранятся аналитики соответствия.

Перем мТаблицаПоказателейБД Экспорт;         // Список аналитик выбранного объекта информационной базы.
Перем мТаблицаПроизводныхБД Экспорт;         // Список полей, являющихся производными от основных аналитик

Перем ТекСоединениеВИБ Экспорт; // Текущее соединение с внешней информационной базой

Перем Используется77; // Признак использования обращения к ВИБ на платформе 7.7
Перем мПерезаписыватьКод Экспорт;

Перем ЕстьПроверка Экспорт;                     // Указывает, что механизмы операнда отрабатывают в режиме проверки.
Перем мТабПравилаВычисленияПараметров Экспорт;
Перем СтруктураРеквизитовИзмеренийБД Экспорт; // Структура отборов по реквизитам для аналитик ВИБ.
Перем СтруктураРеквизитовИзмеренийТек Экспорт; // Структура отборов по реквизитам для регистров текущей ИБ.

Перем ТаблицаСоответствияБД Экспорт;
Перем СписокРесурсовРегистра Экспорт;

// Описания типов
Перем мОписаниеТиповСтрока Экспорт;
Перем мОписаниеТиповБулево Экспорт;
Перем мОписаниеТиповТЗ Экспорт;
Перем мОписаниеТиповСписокЗначений Экспорт;

// Данные для интерфейса
Перем мМодифицированность Экспорт;

Перем ДеревоПолейБД Экспорт;
Перем ДеревоПараметровОтбораБД Экспорт;

Перем РазделениеПоНоменклатуре Экспорт;

Перем ИмпортКазначейства Экспорт; // Определяет, что операнд был вызван из механизмов импорта казначейских документов

// Переменные для возврата в форму элемента
Перем ВидОтчетаОтбор Экспорт;
Перем СписокВидИтога Экспорт;
Перем СписокДтКт Экспорт;

Перем КодУпрощеннойФормулы Экспорт;
Перем ГрупповоеРедактирование Экспорт;

Перем ИсходнаяИнициализацияОбъекта; // Используется при восстановлении настроек сопоставления по правилам использования полей запроса
Перем ЗаполнитьТаблицуСоответствияПоУмолчанию Экспорт;
Перем ЗаполнитьТаблицуОтбораПоУмолчанию Экспорт;
Перем ЗначениеКопирования Экспорт;

Перем МассивПоказателей Экспорт;
Перем ДанныеАналитики Экспорт;

Перем МассивСохраняемыхПараметров Экспорт;

Перем АдресХранилищаПеременныхДляРасчета Экспорт;
Перем ПоляШаблона Экспорт;
Перем ДеревоПараметровОтбораБДШаблон Экспорт;
Перем ТаблицаСоответствияБДШаблон Экспорт;

Функция Использование77(ОбновитьИспользование=Ложь) Экспорт
	
	Если Используется77 = Неопределено ИЛИ ОбновитьИспользование Тогда
		
		Используется77=(ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);
	КонецЕсли;
	Возврат Используется77;
	
КонецФункции

Функция ВнутренниеДанные() Экспорт
	
	Возврат (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД
	ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПустаяСсылка());
		
КонецФункции

Функция ОпределитьРабочийТипБД() Экспорт
	
	Если ВнутренниеДанные() Тогда
		
		Возврат Справочники.ТипыБазДанных.ТекущаяИБ;
		
	Иначе
		
		Возврат ТипБД;
		
	КонецЕсли;
		
КонецФункции // ОпределитьРабочийТипБД() 

Процедура ПолучитьСоединениеВИБ(СпособПодключения) Экспорт
	
	ТекСоединениеВИБ = РасширениеИнтеграцииУХ.ПолучитьСоединение(ТипБД.ВИБПоУмолчанию, СпособПодключения);
			
КонецПроцедуры // ПолучитьСоединениеВИБ() 

Функция ПроизвестиСинтаксическийКонтрольМодуляШаблона(МодульДляПроверки, ОписаниеОшибки) Экспорт
	
	ДокНО = Документы.НастраиваемыйОтчет.СоздатьДокумент();
	Возврат ДокНО.ПроверитьМодуль(МодульДляпроверки, ОписаниеОшибки);
	
КонецФункции

Функция ПроверитьАналогичныйКодПоказателя(ПроектКода,ВыдаватьПредупреждение=Ложь)
	
	Если НЕ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДлинаКодаПоказателя=Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Наименование
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Код = &Код";
	
	Запрос.УстановитьПараметр("Владелец",ПотребительРасчета.Владелец);
	Запрос.УстановитьПараметр("Код",ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(ПроектКода,ДлинаКодаПоказателя));
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если ВыдаватьПредупреждение Тогда
			
			СтрокаШаблона = НСтр("ru = 'Код источника данных для расчетов %1 совпадает с кодом показателя %2.
			|Измените код источника данных для расчетов.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(ПроектКода), Результат.Наименование),,, СтатусСообщения.Внимание);
			КонецЕсли;
						
			Возврат Ложь;
			
		Иначе
			
			ПроектКода=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(СокрЛП(ПроектКода),ДлинаКодаПоказателя,"ПоказателиОтчетов",ПотребительРасчета.Владелец);
			
			Возврат Истина;
			
		КонецЕсли;
		
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции // ПроверитьАналогичныйКодПоказателя()

Функция ПроверитьКодПоНазначениюРасчетов(ПроектКода,ВыдаватьПредупреждение=Ложь)
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
		ИЛИ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляОбратногоРаспределения
		ИЛИ ПолучитьТипПотребителяСтрока()="ШаблоныУниверсальныхПроцессов" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.Ссылка
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	             |	И ИсточникиДанныхДляРасчетов.Код = &Код
	             |	И (НЕ ИсточникиДанныхДляРасчетов.Ссылка = &Ссылка)
	             |	И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	Запрос.УстановитьПараметр("Код",ПроектКода);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("СпособИспользования",СпособИспользования);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если ВыдаватьПредупреждение Тогда
			
			ТекстНазначение="";
			
			Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляКонтрольныхСоотношений Тогда
				
				ТекстНазначение=НСтр("ru = 'Для правила проверки '");
				
			ИначеЕсли СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляПараметрическихУсловий Тогда
				
				ТекстНазначение=НСтр("ru = 'Для параметрического условия '");
				
			ИначеЕсли СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляРучныхКорректировок Тогда
				
				ТекстНазначение=НСтр("ru = 'Для шаблона корректировки '");
				
			Иначе
				
				ТекстНазначение=НСтр("ru = 'Для правила обработки '");
				
			КонецЕсли;
			
			СтрокаШаблона = НСтр("ru = '%1 уже существует источник данных для расчетов с кодом %2.
			|Измените код текущего источника данных.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекстНазначение, СокрЛП(ПроектКода)),,, СтатусСообщения.Внимание);
			КонецЕсли;
									
		КонецЕсли;
		
		Возврат Ложь;
				
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьКодПоНазначениюРасчетов() 

// Процедура устанавливает код операнду на основании префикса.
//
// Параметры
//  Префикс        - Строка, префикс, который будет записан перед числовой частью. 
//
Процедура СформироватьВозможныйКодОперанда(ПроектКода) Экспорт
	
	ДлинаКода=Метаданные().ДлинаКода;
	ПроектКода=Лев(ПроектКода,ДлинаКода);
		
	Если ПроверитьКодПоНазначениюРасчетов(ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(ПроектКода,ДлинаКода),Ложь) Тогда
		Код = ПроектКода;
		Возврат;
	Иначе		
		Код=Справочники.ИсточникиДанныхДляРасчетов.ПолучитьВозможныйКодИсточникаДанных(СокрЛП(ПроектКода), НазначениеРасчетов);		
		Возврат;
	КонецЕсли;
				
КонецПроцедуры

// Процедура формирует код нового операнда.
Процедура СформироватьКодОперанда(ОбновитьКод=Ложь,ОбновитьНаименование=Истина) Экспорт
	
	Если Не (ЭтоНовый() ИЛИ ОбновитьКод ИЛИ ОбновитьНаименование) Тогда
		Возврат;
	КонецЕсли;
	
	ВнешниеДанные=Не ВнутренниеДанные();
	
	ОбновитьНаименование=Не (ЗначениеЗаполнено(Наименование) И СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов);
	
	ТекКод = "";
    ТекНаименование = "";
	
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
	 Если ТипБД = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если НЕ ЗначениеЗаполнено(Счет) Тогда
		 
		 ТекНаименование=""+РегистрБД.Наименование+" - "+ПотребительРасчета.Наименование;
		 ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		 
	 Иначе
		 
		 ТекНаименование = ?(ВнешниеДанные,"ВИБ_","")+"РБ" + ?(СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов, "77", "") + "_"+РесурсРегистра+"_";
		 
		 ТекНаименование=СтрШаблон(Нстр("ru = '%1, счет %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, Счет);
		 ТекКод="Счет_"+Счет+"_";
		 
		 Если ВидИтога = "НачальныйОстаток#" ИЛИ ВидИтога = "СН#" Тогда
			 ТекНаименование=СтрШаблон(Нстр("ru = '%1 начальный остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, ДтКт);
			 ТекКод=ТекКод+"СН"+?(ДтКт="Дт","Д","К");
		 ИначеЕсли ВидИтога = "НачальныйРазвернутыйОстаток#" ИЛИ ВидИтога = "СН#РС" Тогда
			 ТекНаименование=СтрШаблон(Нстр("ru = '%1 развернутый начальный остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
			                 	ДтКт);
			 ТекКод=ТекКод+"СН"+?(ДтКт="Дт","Д","К")+"РС";
		 ИначеЕсли ВидИтога = "КонечныйОстаток#" ИЛИ ВидИтога = "СК#" Тогда
			 ТекНаименование=СтрШаблон(Нстр("ru = '%1 конечный остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, ДтКт);
			 ТекКод=ТекКод+"СК"+?(ДтКт="Дт","Д","К");
		 ИначеЕсли ВидИтога = "КонечныйРазвернутыйОстаток#" ИЛИ ВидИтога = "СК#РС" Тогда
			 ТекНаименование=СтрШаблон(Нстр("ru = '%1 конечный развернутый остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
			                 	ДтКт);
			 ТекКод=ТекКод+"СК"+?(ДтКт="Дт","Д","К")+"РС";
		 ИначеЕсли ВидИтога = "Оборот#" ИЛИ ВидИтога = "#О" Тогда
			 ТекНаименование=СтрШаблон(Нстр("ru = '%1 оборот (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, ДтКт);
			 ТекКод=ТекКод+?(ДтКт="Дт","Д","К")+"О";	
		 ИначеЕсли ВидИтога = "Оборот" ИЛИ ВидИтога = "КорДО" Тогда
			 ТекНаименование=СтрШаблон(Нстр("ru = '%1 корреспондирующий оборот , коррсчет %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
			                 	КоррСчет);
			 ТекКод=ТекКод+"ОБ_"+КоррСчет;
		 КонецЕсли;
		 
	 КонецЕсли;
	 
		 		 
 ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		ТекКод = ТекКод + ?(ВнешниеДанные,"ВИБ_","")+"РН_";
		ТекКод = ТекКод + ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(РегистрБД.Наименование,9)
				 + "_" + ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(РесурсРегистра,9);
		ТекКод = ТекКод + "_" + Лев(ВидИтога, 1);
		
		ТекНаименование = ?(ВнешниеДанные,"ВИБ_","")+"РН_" + РегистрБД.Наименование + "_" + РесурсРегистра + "(" + ВидИтога + ")";
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		ТекКод = ТекКод + ?(ВнешниеДанные,"ВИБ_","")+"РС_";
		ТекКод = ТекКод + ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(РегистрБД.Наименование,9)
				 + "_" + ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(РесурсРегистра,9);
		ТекКод = ТекКод + "_" + Лев(ВидИтога, 1);
		
		ТекНаименование = ?(ВнешниеДанные,"ВИБ_","")+"РС_" + РегистрБД.Наименование + "_" + РесурсРегистра + "(" + ВидСреза + ")";
						 
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
		
		ТекНаименование=Нстр("ru = 'Произвольный запрос к ВИБ'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД Тогда
			
			ОбъектШапка=?(ТипЗнч(ПотребительРасчета)=Тип("СправочникСсылка.ТабличныеЧастиБД"),ПотребительРасчета.Владелец,ПотребительРасчета);
			ОбъектТЧ=?(ТипЗнч(ПотребительРасчета)=Тип("СправочникСсылка.ТабличныеЧастиБД"),ПотребительРасчета,"");
			
			ТекНаименование=СтрШаблон(Нстр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбъектШапка);
			
			Если ЗначениеЗаполнено(ОбъектТЧ) Тогда
				
				ТекНаименование=ТекНаименование+", "+СтрШаблон(Нстр("ru = 'ТЧ %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбъектТЧ);
				
			КонецЕсли;
			
		Иначе
			
			СтрАналитика=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаКонсолидации","Значение"));
			
			ТекНаименование=СтрШаблон(Нстр("ru = 'ADO: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ТаблицаADO.Наименование);
			
			Если СтрАналитика.Количество()>0 Тогда 
				
				ТекНаименование=СтрШаблон(Нстр("ru = '%1, поле %2%3%4'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
				СтрАналитика[0].ПсевдонимБД);	
			КонецЕсли;
			
		КонецЕсли;
		
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
			
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		ТекНаименование=Нстр("ru = 'Произвольный запрос к текущей ИБ'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда
		
		ТекНаименование=Нстр("ru = 'Параметрический запрос к значениям показателей'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		Если ПоказательОтбор.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость
			И (Не ПотребительРасчета.Владелец=ПоказательОтбор.Владелец) Тогда
			
			СтрокаШаблона = Нстр("ru = 'ОСВ_%1, счет %2 %3'");
			
			ТекНаименование = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ТекНаименование = СтрШаблон(СтрокаШаблона, СокрЛП(ПоказательОтбор.Владелец.Наименование), ПоказательОтбор.СчетБД, XMLСтрока(ПоказательОтбор.ВидИтогаПоСчету));
			КонецЕсли;
						
			СтрокаШаблона = Нстр("ru = 'ОСВ_%1_%2_%3'");
			
			ТекНаименование = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ТекНаименование = СтрШаблон(СтрокаШаблона, СокрЛП(ПоказательОтбор.Владелец.Код), ПоказательОтбор.СчетБД, XMLСтрока(ПоказательОтбор.ВидИтогаПоСчету));
			КонецЕсли;
						
		Иначе
			
			ТекНаименование=СокрЛП(ПоказательОтбор.Владелец.Наименование)+"_"+ПоказательОтбор.Наименование;
			ТекКод=СокрЛП(ПоказательОтбор.Владелец.Код)+"_"+СокрЛП(ПоказательОтбор.Код);
			
		КонецЕсли;
					
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		
		ТекНаименование=СокрЛП(ПоказательОтбор.Владелец.Наименование)+"_"+ПоказательОтбор.Наименование;
		ТекКод=СформироватьКодУпрощеннойФормулы();
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		ТекНаименование=СокрЛП(ГруппаРаскрытияОтбор.Владелец.Наименование)+"_"+ГруппаРаскрытияОтбор.Наименование;
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
		
		СтрокаШаблона = Нстр("ru = ', табличная часть %1'");
		
		ТабличнаяЧастьБДНаименование = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТабличнаяЧастьБДНаименование = СтрШаблон(СтрокаШаблона, ТабличнаяЧастьБД.Наименование);
		КонецЕсли;
		
		ТекНаименование=СтрШаблон(Нстр("ru = 'Справочник %1%2'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбъектБД.Наименование, ?(ЗначениеЗаполнено(ТабличнаяЧастьБД), ТабличнаяЧастьБДНаименование,""));
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
		
		СтрокаШаблона = Нстр("ru = ', табличная часть %1'");
		
		ТабличнаяЧастьБДНаименование = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТабличнаяЧастьБДНаименование = СтрШаблон(СтрокаШаблона, ТабличнаяЧастьБД.Наименование);
		КонецЕсли;
		
		ТекНаименование=СтрШаблон(Нстр("ru = 'Документ %1%2'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбъектБД.Наименование, ?(ЗначениеЗаполнено(ТабличнаяЧастьБД), ТабличнаяЧастьБДНаименование,""));
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники Тогда
		
		СтрокаШаблона = Нстр("ru = ', табличная часть %1'");
		
		ТабличнаяЧастьБДНаименование = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТабличнаяЧастьБДНаименование = СтрШаблон(СтрокаШаблона, ТабличнаяЧастьБД.Наименование);
		КонецЕсли;
		
		ТекНаименование=СтрШаблон(Нстр("ru = 'База %1, справочник %2%3'", ОбщегоНазначения.КодОсновногоЯзыка()), ТипБД, ОбъектБД.Наименование, 
		                	?(ЗначениеЗаполнено(ТабличнаяЧастьБД), ТабличнаяЧастьБДНаименование,""));
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		СтрокаШаблона = Нстр("ru = ', табличная часть %1'");
		
		ТабличнаяЧастьБДНаименование = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТабличнаяЧастьБДНаименование = СтрШаблон(СтрокаШаблона, ТабличнаяЧастьБД.Наименование);
		КонецЕсли;
		
		ТекНаименование=СтрШаблон(Нстр("ru = 'База %1, документ %2%3'", ОбщегоНазначения.КодОсновногоЯзыка()), ТипБД, ОбъектБД.Наименование, 
		                	?(ЗначениеЗаполнено(ТабличнаяЧастьБД), ТабличнаяЧастьБДНаименование,""));
		ТекКод=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекНаименование,50);
		
	КонецЕсли;
	
	ТекКод = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СокрЛП(ТекКод));
	
	Если ПустаяСтрока(Код) ИЛИ ОбновитьКод Тогда
		СформироватьВозможныйКодОперанда(ТекКод);
	КонецЕсли;

	Если ПустаяСтрока(Наименование) ИЛИ ОбновитьНаименование Тогда
		Наименование = ТекНаименование;
	КонецЕсли;
		
КонецПроцедуры

// Процедура формирует код нового операнда.
Процедура СформироватьНаименованиеОперанда(ОбновитьНаименование=Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Наименование) И (НЕ ОбновитьНаименование) Тогда
		Возврат;
	КонецЕсли;
	
    ТекНаименование = "";
	ВнешниеДанные=НЕ ВнутренниеДанные();
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		
		Наименование=Строка(ОбъектУчета);
		Возврат;
		
	КонецЕсли;
	
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		Если ТипБД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			
			ТекНаименование=""+РегистрБД.Наименование+" - "+ПотребительРасчета.Наименование;
			
		Иначе	
			
			ТекНаименование = ?(ВнешниеДанные,"ВИБ_","")+"РБ_" + ?(СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов, "77", "") + "_"+РесурсРегистра+"_";
			
			Если ВидИтога = "НачальныйОстаток" ИЛИ ВидИтога = "СН#" Тогда
				ТекНаименование=СтрШаблон(Нстр("ru = '%1начальный остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, ДтКт);
			ИначеЕсли ВидИтога = "НачальныйРазвернутыйОстаток" ИЛИ ВидИтога = "СН#РС" Тогда
				ТекНаименование=СтрШаблон(Нстр("ru = '%1развернутый начальный остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
				                	ДтКт);
			ИначеЕсли ВидИтога = "КонечныйОстаток" ИЛИ ВидИтога = "СК#" Тогда
				ТекНаименование=СтрШаблон(Нстр("ru = '%1конечный остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, ДтКт);
			ИначеЕсли ВидИтога = "КонечныйРазвернутыйОстаток" ИЛИ ВидИтога = "СК#РС" Тогда
				ТекНаименование=СтрШаблон(Нстр("ru = '%1конечный развернутый остаток (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
				                	ДтКт);
			ИначеЕсли ВидИтога = "Оборот#" ИЛИ ВидИтога = "#О" Тогда
				ТекНаименование=СтрШаблон(Нстр("ru = '%1оборот (%2)'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, ДтКт);
			ИначеЕсли ВидИтога = "Оборот" ИЛИ ВидИтога = "КорДО" Тогда
				ТекНаименование=СтрШаблон(Нстр("ru = '%1корреспондирующий оборот '", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование);	
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(КоррСчет) Тогда
				ТекНаименование = СтрШаблон(Нстр("ru = '%1между счетами № %2 и № %3'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, 
				                  	СокрЛП(Счет), СокрЛП(КоррСчет));
			Иначе
				ТекНаименование = СтрШаблон(Нстр("ru = '%1 по счету № %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекНаименование, Счет);
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
			
		ТекНаименование = ?(ВнешниеДанные,"ВИБ_","")+"РН_" + РегистрБД.Наименование + "_" + РесурсРегистра + "(" + ВидИтога + ")";
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
			
		ТекНаименование = ?(ВнешниеДанные,"ВИБ_","")+"РС_" + РегистрБД.Наименование + "_" + РесурсРегистра + "(" + ВидСреза + ")";
					 
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
		
		ТекНаименование=Нстр("ru = 'Произвольный запрос к ВИБ'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		ТекНаименование=Нстр("ru = 'Произвольный запрос к текущей ИБ'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда
		
		ТекНаименование=Нстр("ru = 'Параметрический запрос к значениям показателей'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		
		ТекНаименование=?(ПустаяСтрока(СокрЛП(ПоказательОтбор.Владелец.ПолноеНаименование)),СокрЛП(ПоказательОтбор.Владелец.Наименование),(СокрЛП(ПоказательОтбор.Владелец.ПолноеНаименование)))+"_"+ПоказательОтбор.Наименование;	
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		ТекНаименование=СокрЛП(ГруппаРаскрытияОтбор.Владелец.Наименование)+"_"+ГруппаРаскрытияОтбор.Наименование;	
		
	Иначе
		
		ТекНаименование=Нстр("ru = 'Не указан способ заполнения'");
		
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) ИЛИ ОбновитьНаименование Тогда
		Наименование = ТекНаименование;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры предварительной настройки исходных данных объекта

Процедура ЗаполнитьСписокПолейОтбор() Экспорт;
	
	мТаблицаВозможныхПолейОтбор.Очистить();
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		Если ПустаяСтрока(ТекстЗапросаМодуля) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Попытка
		
		Запрос=Новый Запрос(ТекстЗапросаМодуля);
		
		НовыеПараметры = Запрос.НайтиПараметры();
		
		Для каждого ПараметрЗапроса Из НовыеПараметры Цикл
			
			ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
			ПолеАналитика.Поле=ПараметрЗапроса.Имя;
			ПолеАналитика.Синоним=ПараметрЗапроса.Имя;
			
			СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,ПараметрЗапроса.ТипЗначения,ОпределитьРабочийТипБД(),Ложь);
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика,СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
									
		КонецЦикла;
		
	Исключение
		
		КонецПопытки;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		Для Каждого СтрПоказатель ИЗ мТаблицаПоказателейБД Цикл
			
			ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
			ПолеАналитика.Поле=СтрПоказатель.ПолеБД;
			ПолеАналитика.Синоним=СтрПоказатель.НаименованиеБД;
			
			Если ЗначениеЗаполнено(СтрПоказатель.ВидАналитики) Тогда
				
				ТекСписокТипов=Новый СписокЗначений;
				
				СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,СтрПоказатель.ВидАналитики.ТипЗначения,ОпределитьРабочийТипБД(),Ложь);
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
								
			Иначе
				
				ПолеАналитика.ТипДанныхПоля=СтрПоказатель.ТипДанныхПоля;
				ПолеАналитика.ТипЗначения=СтрПоказатель.ТипЗначения;
				
			КонецЕсли;
			
			ПолеАналитика.ВидАналитики=СтрПоказатель.ВидАналитики;
			ПолеАналитика.НаименованиеАналитики=СтрПоказатель.НаименованиеБД;
			ПолеАналитика.ТаблицаАналитики=?(ПолеАналитика.ТипДанныхПоля[0].Значение = Тип("Строка"), "", Метаданные.НайтиПоТипу(ПолеАналитика.ТипДанныхПоля[0].Значение).ПолноеИмя());
			
		КонецЦикла
				
	Иначе
		
		ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
		ПолеАналитика.Поле="Версия.Валюта";
		ПолеАналитика.НаименованиеАналитики="Валюта";
		ПолеАналитика.Синоним=Нстр("ru = 'Валюта отчета'");
		ПолеАналитика.ТаблицаАналитики="Справочник.Валюты";
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Валюты",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.АналитикаОтчета=Истина;
		
		ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
		ПолеАналитика.Поле="Версия.Организация";
		ПолеАналитика.НаименованиеАналитики="Организация";
		ПолеАналитика.Синоним=Нстр("ru = 'Организационная единица отчета'");
		ПолеАналитика.ТаблицаАналитики="Справочник.Организации";
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Организации",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.АналитикаОтчета=Истина;
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("РазделениеПоПроектам",ПоказательОтбор.Владелец) И ПоказательОтбор.Владелец.РазделениеПоПроектам Тогда
			
			ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
			ПолеАналитика.Поле="Версия.Проект";
			ПолеАналитика.НаименованиеАналитики="Проект";
			ПолеАналитика.Синоним=Нстр("ru = 'Проект отчета'");
			ПолеАналитика.ТаблицаАналитики="Справочник.Проекты";
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Проекты",Справочники.ТипыБазДанных.ТекущаяИБ);
			ПолеАналитика.АналитикаОтчета=Истина;
			
		КонецЕсли;
			
		ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
		ПолеАналитика.Поле="Версия.Сценарий";
		ПолеАналитика.НаименованиеАналитики="Сценарий";
		ПолеАналитика.Синоним=Нстр("ru = 'Сценарий отчета'");
		ПолеАналитика.ТаблицаАналитики="Справочник.Сценарии";
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Сценарии",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.АналитикаОтчета=Истина;
		
		ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
		ПолеАналитика.Поле="Версия.ПериодОтчета";
		ПолеАналитика.НаименованиеАналитики="Период";
		ПолеАналитика.Синоним=Нстр("ru = 'Период отчета'");
		ПолеАналитика.ТаблицаАналитики="Справочник.Периоды";
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Периоды",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.АналитикаОтчета=Истина;

		Если мТаблицаВидовАналитикВидаОтчетаОтбор=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого АналитикаПоказателя ИЗ мТаблицаВидовАналитикВидаОтчетаОтбор Цикл
			
			ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
			ПолеАналитика.Поле=АналитикаПоказателя.КодАналитики;
			ПолеАналитика.Синоним=АналитикаПоказателя.ПредставлениеАналитики;
			
			СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,АналитикаПоказателя.ТипЗначенияАналитики,ОпределитьРабочийТипБД(),Ложь);
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
			
			ПолеАналитика.ВидАналитики=АналитикаПоказателя.ВидАналитики;
			ПолеАналитика.НаименованиеАналитики=АналитикаПоказателя.НаименованиеАналитики;
			ПолеАналитика.ТаблицаАналитики=АналитикаПоказателя.ТаблицаАналитики;
			
			ПолеАналитика.АналитикаОтчета=Истина;
			
		КонецЦикла;
		
		Для Каждого АналитикаПоказателя ИЗ мТаблицаВидовАналитикПоказателяОтбор Цикл
						
			ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
			ПолеАналитика.Поле=АналитикаПоказателя.КодАналитики;
			ПолеАналитика.Синоним=АналитикаПоказателя.ПредставлениеАналитики;
			
			СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,АналитикаПоказателя.ТипЗначенияАналитики,ОпределитьРабочийТипБД(),Ложь);
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
			
			ПолеАналитика.ВидАналитики=АналитикаПоказателя.ВидАналитики;
			ПолеАналитика.НаименованиеАналитики=АналитикаПоказателя.НаименованиеАналитики;
			ПолеАналитика.ТаблицаАналитики=АналитикаПоказателя.ТаблицаАналитики;
			
		КонецЦикла;
		
		ПолеАналитика=мТаблицаВозможныхПолейОтбор.Добавить();
		ПолеАналитика.Поле="Версия.ВидОперации";
		ПолеАналитика.НаименованиеАналитики="ВидыОпераций";
		ПолеАналитика.Синоним=Нстр("ru = 'Вид операции'");
		ПолеАналитика.ТаблицаАналитики="Справочник.ВидыОпераций";
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.ВидыОпераций",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.АналитикаОтчета=Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокПолейОтбор()

Процедура ЗаполнитьСписокПолей() Экспорт;
	
	мТаблицаВозможныхПолей.Очистить();
	
	Если ПолучитьТипПотребителяСтрока()="ШаблоныУниверсальныхПроцессов" Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если ДляТрансляции() Тогда
		
		ДобавитьПоляИзмерений(ПотребительРасчета.Владелец.РегистрБухгалтерииПриемник,ПотребительРасчета.СчетПриемник);
		
	ИначеЕсли ДляТрансформационныхКорректировок()Тогда
		
		ДобавитьПоляИзмерений(ПотребительРасчета.Владелец.РегистрБухгалтерии,ПотребительРасчета.СчетБД,ПотребительРасчета.КоррСчетБД,"Аналитика_");
		
	КонецЕсли;
	
	ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
	ПолеАналитика.Поле="Версия.Валюта";
	ПолеАналитика.НаименованиеАналитики="Валюты";
	ПолеАналитика.Синоним=Нстр("ru = 'Валюта отчета'");
	ПолеАналитика.АналитикаОтчета=Истина;
	ПолеАналитика.ТаблицаАналитики="Справочник.Валюты";
	ПолеАналитика.ИмяОбъектаМетаданных="Валюты";
	ПолеАналитика.ТипОбъектаКонсолидации="Справочник";
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Валюты",Справочники.ТипыБазДанных.ТекущаяИБ);
	
	ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
	ПолеАналитика.Поле="Версия.Организация";
	ПолеАналитика.НаименованиеАналитики="Организации";
	ПолеАналитика.Синоним=Нстр("ru = 'Организационная единица отчета'");
	ПолеАналитика.АналитикаОтчета=Истина;
	ПолеАналитика.ТаблицаАналитики="Справочник.Организации";
	ПолеАналитика.ИмяОбъектаМетаданных="Организации";
	ПолеАналитика.ТипОбъектаКонсолидации="Справочник";
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Организации",Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если (ПотребительРасчета <> Неопределено) 
		И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("РазделениеПоПроектам",ПотребительРасчета.Владелец) 
		И ПотребительРасчета.Владелец.РазделениеПоПроектам Тогда
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле="Версия.Проект";
		ПолеАналитика.НаименованиеАналитики="Проекты";
		ПолеАналитика.Синоним=Нстр("ru = 'Проект отчета'");
		ПолеАналитика.АналитикаОтчета=Истина;
		ПолеАналитика.ТаблицаАналитики="Справочник.Проекты";
		ПолеАналитика.ИмяОбъектаМетаданных="Проекты";
		ПолеАналитика.ТипОбъектаКонсолидации="Справочник";
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Проекты",Справочники.ТипыБазДанных.ТекущаяИБ);
		
	КонецЕсли;
	
	ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
	ПолеАналитика.Поле="Версия.Сценарий";
	ПолеАналитика.НаименованиеАналитики="Сценарии";
	ПолеАналитика.Синоним=Нстр("ru = 'Сценарий отчета'");
	ПолеАналитика.АналитикаОтчета=Истина;
	ПолеАналитика.ТаблицаАналитики="Справочник.Сценарии";
	ПолеАналитика.ИмяОбъектаМетаданных="Сценарии";
	ПолеАналитика.ТипОбъектаКонсолидации="Справочник";
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Сценарии",Справочники.ТипыБазДанных.ТекущаяИБ);
	
	ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
	ПолеАналитика.Поле="Версия.ПериодОтчета";
	ПолеАналитика.НаименованиеАналитики="Периоды";
	ПолеАналитика.Синоним=Нстр("ru = 'Период отчета'");
	ПолеАналитика.АналитикаОтчета=Истина;
	ПолеАналитика.ТаблицаАналитики="Справочник.Периоды";
	ПолеАналитика.ИмяОбъектаМетаданных="Периоды";
	ПолеАналитика.ТипОбъектаКонсолидации="Справочник";
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Периоды",Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если мТаблицаВидовАналитикВидаОтчета=Неопределено ИЛИ мТаблицаВидовАналитикПоказателя=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АналитикаПоказателя ИЗ мТаблицаВидовАналитикВидаОтчета Цикл
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=АналитикаПоказателя.КодАналитики;
		ПолеАналитика.Синоним=АналитикаПоказателя.ПредставлениеАналитики;
		ПолеАналитика.ВидАналитики=АналитикаПоказателя.ВидАналитики;
		ПолеАналитика.НаименованиеАналитики=АналитикаПоказателя.НаименованиеАналитики;
		ПолеАналитика.АналитикаОтчета=Истина;
		ПолеАналитика.ТаблицаАналитики=АналитикаПоказателя.ТаблицаАналитики;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,АналитикаПоказателя.ТипЗначенияАналитики,ОпределитьРабочийТипБД(),Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ,ТипБДПриемник);
		
		Если АналитикаПоказателя.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			ПолеАналитика.ИмяОбъектаМетаданных=АналитикаПоказателя.ВидАналитики;
			ПолеАналитика.ТипОбъектаКонсолидации="ВидСубконто";
		Иначе
			ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(АналитикаПоказателя.ТаблицаАналитики,".");
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого АналитикаПоказателя ИЗ мТаблицаВидовАналитикПоказателя Цикл
			
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=АналитикаПоказателя.КодАналитики;
		ПолеАналитика.Синоним=АналитикаПоказателя.ПредставлениеАналитики;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,АналитикаПоказателя.ТипЗначенияАналитики,ОпределитьРабочийТипБД(),Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика,СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ,ТипБДПриемник);
		
		ПолеАналитика.ВидАналитики=АналитикаПоказателя.ВидАналитики;
		ПолеАналитика.НаименованиеАналитики=АналитикаПоказателя.НаименованиеАналитики;
		ПолеАналитика.ТаблицаАналитики=АналитикаПоказателя.ТаблицаАналитики;
		
		Если АналитикаПоказателя.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			ПолеАналитика.ИмяОбъектаМетаданных=АналитикаПоказателя.ВидАналитики;
			ПолеАналитика.ТипОбъектаКонсолидации="ВидСубконто";
			
		Иначе
			
			ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(АналитикаПоказателя.ТаблицаАналитики,".");
			
			Если ДанныеСинхронизации.Количество()=2 Тогда 
				
				ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
				
			Иначе
				
				ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьСписокПолей()

Процедура ДобавитьСтрокуВозможныхПолей(ВидАналитики) Экспорт
	
	Если НЕ мТаблицаВозможныхПолей.Найти(ВидАналитики,"ВидАналитики")=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаименованиеАналитики		= Строка(ВидАналитики);
	ТекВидАналитики				= ВидАналитики;
	ПредставлениеАналитики		= НаименованиеАналитики; 
	
	ТипЗначенияАналитики		= ТекВидАналитики.ТипЗначения;
	ТипДанныхАналитики			= ТипЗначенияАналитики.Типы()[0];
	КодАналитики				= ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(НаименованиеАналитики);
	ТаблицаАналитики			= ?(ТипДанныхАналитики = Тип("Строка"), "", Метаданные.НайтиПоТипу(ТипДанныхАналитики).ПолноеИмя());
	
	ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
	ПолеАналитика.Поле=КодАналитики;
	ПолеАналитика.Синоним=ПредставлениеАналитики;
	
	СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,ТипЗначенияАналитики,ОпределитьРабочийТипБД(),Ложь);
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика,СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ,ТипБДПриемник);
	
	ПолеАналитика.ВидАналитики=ТекВидАналитики;
	ПолеАналитика.НаименованиеАналитики=НаименованиеАналитики;
	ПолеАналитика.ТаблицаАналитики=ТаблицаАналитики;
	
	Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		ПолеАналитика.ИмяОбъектаМетаданных=ТекВидАналитики;
		ПолеАналитика.ТипОбъектаКонсолидации="ВидСубконто";
		
	Иначе
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВозможныхПолей(ВидАналитики) 

Процедура ЗаполнитьСоответствиеСпособовИТиповКонтекст()
	
	Если НЕ мТаблицаВидовАналитикВидаОтчета=Неопределено Тогда
		
		Инд=1;

		Для Каждого АналитикаОтчета ИЗ мТаблицаВидовАналитикВидаОтчета Цикл
			
			НоваяСтрока = мСоответствиеИзмеренийСпособовИТипов.Добавить();
			НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов["Аналитика" + Инд];
			НоваяСтрока.ТипДанных  = АналитикаОтчета.ТипДанныхАналитики;
			НоваяСтрока.ТипРасчета = "ПоКоду";
			НоваяСтрока.ПредставлениеСпособа=СтрШаблон(Нстр("ru = 'Аналитика отчета%1: %2'"), Инд, АналитикаОтчета.НаименованиеАналитики);
			НоваяСтрока.НаименованиеАналитики=АналитикаОтчета.НаименованиеАналитики;
			НоваяСтрока.ИзКонтекста=Истина;
			НоваяСтрока.ИмяИзмерения = "Аналитика" + Инд;
			НоваяСтрока.ВидАналитики=АналитикаОтчета.ВидАналитики;
			НоваяСтрока.ТаблицаАналитики=АналитикаОтчета.ТаблицаАналитики;
			
			Инд=Инд+1;
			
		КонецЦикла;
		
	КонецЕсли;
		
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Организации");
	НоваяСтрока.НаименованиеАналитики="Организации";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	НоваяСтрока.ИмяИзмерения 	 = "Версия.Организация";
	НоваяСтрока.ИзКонтекста 	 = Истина;
	НоваяСтрока.ИзмерениеРегистра= Истина;
	НоваяСтрока.ТаблицаАналитики= "Справочник.Организации";
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Периоды");
	НоваяСтрока.НаименованиеАналитики="Периоды";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	НоваяСтрока.ИмяИзмерения 	 = "Версия.ПериодОтчета";
	НоваяСтрока.ИзКонтекста 	 = Истина;
	НоваяСтрока.ИзмерениеРегистра= Истина;
	НоваяСтрока.ТаблицаАналитики= "Справочник.Периоды";
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Сценарии");
	НоваяСтрока.НаименованиеАналитики="Сценарии";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	НоваяСтрока.ИмяИзмерения 	 = "Версия.Сценарий";
	НоваяСтрока.ИзКонтекста 	 = Истина;
	НоваяСтрока.ИзмерениеРегистра= Истина;
	НоваяСтрока.ТаблицаАналитики= "Справочник.Сценарии";
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "ПериодыНачало";
	НоваяСтрока.ИзКонтекста		 = Истина;
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
		
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "ПериодыКонец";
	НоваяСтрока.ИзКонтекста		 = Истина;
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	
	Если ДляТрансляции()  Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (ПотребительРасчета <> Неопределено) 
		И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("РазделениеПоПроектам",ПотребительРасчета.Владелец) 
		И ПотребительРасчета.Владелец.РазделениеПоПроектам Тогда
		
		НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
		НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета;
		НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Проекты");
		НоваяСтрока.НаименованиеАналитики="Проекты";
		НоваяСтрока.ТипРасчета       = "ПоКоду";
		НоваяСтрока.ИмяИзмерения 	 = "Версия.Проект";
		НоваяСтрока.ИзКонтекста 	 = Истина;
		НоваяСтрока.ИзмерениеРегистра= Истина;
		НоваяСтрока.ТаблицаАналитики= "Справочник.Проекты";
		
		НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
		НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия;
		НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Проекты");
		НоваяСтрока.НаименованиеАналитики="Проекты";
		НоваяСтрока.ТипРасчета       = "ПоКоду";
		НоваяСтрока.ИмяИзмерения 	 = "Версия.Проект";
		НоваяСтрока.ИзКонтекста 	 = Истина;
		НоваяСтрока.ИзмерениеРегистра= Истина;
		НоваяСтрока.ТаблицаАналитики= "Справочник.Проекты";
		
	КонецЕсли;	
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета;
	НоваяСтрока.НаименованиеАналитики="Организации";
	НоваяСтрока.ИмяИзмерения 	 = "Версия.Организация";
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Организации");
	НоваяСтрока.ТипРасчета       = "ПоКонсолидирующейОрганизации";
	НоваяСтрока.ИзКонтекста		 = Истина;
	
	НоваяСтрока.ЕстьУточнение    = Истина;
	НоваяСтрока.ТипДанныхУточнение= Тип("СправочникСсылка.Организации");
	
	НоваяСтрока.ТаблицаАналитики= "Справочник.Организации";
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета;
	НоваяСтрока.НаименованиеАналитики="Организации";
	НоваяСтрока.ИмяИзмерения 	 = "Версия.Организация";
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Организации");
	НоваяСтрока.ТипРасчета       = "ПоКонсолидирующейОрганизации";
	НоваяСтрока.ИзКонтекста		 = Истина;
	
	НоваяСтрока.ЕстьУточнение    = Истина;
	НоваяСтрока.ТипДанныхУточнение= Тип("СправочникСсылка.Организации");
	
	НоваяСтрока.ТаблицаАналитики= "Справочник.Организации";
		
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.СценарийФакта;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Сценарии");
	НоваяСтрока.НаименованиеАналитики="Сценарии";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	НоваяСтрока.ИмяИзмерения 	 = "Версия.Сценарий";
	НоваяСтрока.ИзКонтекста 	 = Истина;
	НоваяСтрока.ИзмерениеРегистра= Истина;
	НоваяСтрока.ТаблицаАналитики = "Справочник.Сценарии";
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "ПериодыНачало";
	НоваяСтрока.ИзКонтекста		 = Истина;
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	
	НоваяСтрока.ЕстьУточнение    	= Истина;	
	НоваяСтрока.ТипДанныхУточнение	= Тип("ПеречислениеСсылка.Периодичность");
		
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "ПериодыКонец";
	НоваяСтрока.ИзКонтекста		 = Истина;
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	
	НоваяСтрока.ЕстьУточнение    	= Истина;	
	НоваяСтрока.ТипДанныхУточнение	= Тип("ПеречислениеСсылка.Периодичность");
					
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "ГодНачало";
	НоваяСтрока.ИзКонтекста		 = Истина;
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "ГодКонец";
	НоваяСтрока.ИзКонтекста		 = Истина;
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
		
	НоваяСтрока                  	= мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления 	= Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета;
	НоваяСтрока.ТипДанных        	= Тип("СправочникСсылка.Валюты");
	НоваяСтрока.НаименованиеАналитики="Валюты";
	НоваяСтрока.ТипРасчета       	= "ПоКоду";
	НоваяСтрока.ИмяИзмерения 	 	= "Версия.Валюта";
	НоваяСтрока.ИзКонтекста 	 	= Истина;
	НоваяСтрока.ИзмерениеРегистра	= Истина;
	НоваяСтрока.ТаблицаАналитики	= "Справочник.Валюты";

		
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.Булево;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.Строка;
	НоваяСтрока.ТипДанных        = Тип("Строка");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.Число;
	НоваяСтрока.ТипДанных        = Тип("Число");	
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.Дата;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипРасчета       = "ПериодыНачалоСдвиг";
	
	НоваяСтрока.ЕстьУточнение    	= Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Число");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипРасчета       = "ПериодыКонецСдвиг";
	
	НоваяСтрока.ЕстьУточнение    	= Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Число");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипРасчета       = "ГодНачалоСдвиг";
	
	НоваяСтрока.ЕстьУточнение    	= Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Число");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом;
	НоваяСтрока.ТипДанных        = Тип("Дата");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипРасчета       = "ГодКонецСдвиг";
	
	НоваяСтрока.ЕстьУточнение    	= Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Число");
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
		
		НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
		НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов;
		НоваяСтрока.ТипДанных        = Тип("Дата");
		НоваяСтрока.ТипРасчета       = "ПериодыИнтервал";
		НоваяСтрока.ИзКонтекста		 = Ложь;
		НоваяСтрока.ЕстьУточнение    = Истина;
		
	КонецЕсли;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ИмяИзмерения 	 = "ПериодОтчета";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	
	НоваяСтрока.ЕстьУточнение    	= Истина;	
	НоваяСтрока.ТипДанныхУточнение	= Тип("Число");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ИмяИзмерения 	 = "ПериодОтчета";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	
	НоваяСтрока.ЕстьУточнение    	= Истина;	
	НоваяСтрока.ТипДанныхУточнение	= Тип("ПеречислениеСсылка.Периодичность");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ИмяИзмерения 	 = "ПериодОтчета";
	НоваяСтрока.ТипРасчета       = "ПоКоду";
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом;
	НоваяСтрока.ТипДанных        = Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ТипДанныхПроверка= Тип("СправочникСсылка.Периоды");
	НоваяСтрока.ИмяИзмерения 	 = "ПериодОтчета";
	НоваяСтрока.ТипРасчета       = "ПоКоду";	
	НоваяСтрока.ЕстьУточнение    	= Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Число");
	
КонецПроцедуры // ЗаполнитьСоответствиеСпособовИТиповКонтекст()

Функция ДляТрансляции()
	
	Если ПотребительРасчета=Неопределено Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат ТипЗнч(ПотребительРасчета)=Тип("СправочникСсылка.СоответствияСчетовДляТрансляции");
		
	КонецЕсли;
		
КонецФункции // ДляТрансляции()

Функция ДляТрансформационныхКорректировок()
	
	Если ПотребительРасчета=Неопределено Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат ТипЗнч(ПотребительРасчета.Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок");
		
	КонецЕсли;
		
КонецФункции // ДляТрансформационныхКорректировок()

Функция ПараметрыКорректировки() Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ПотребительРасчета) И ТипЗнч(ПотребительРасчета)=Тип("СправочникСсылка.ПоказателиОтчетов"))  Тогда
		
		Возврат Новый Структура("Корректировка,ДокументБД",Ложь,Неопределено);
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОтчетов.Владелец ССЫЛКА Справочник.ШаблоныТрансформационныхКорректировок КАК Корректировка,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.Владелец ССЫЛКА Справочник.ШаблоныТрансформационныхКорректировок
		|			ТОГДА ВЫРАЗИТЬ(ПоказателиОтчетов.Владелец КАК Справочник.ШаблоныТрансформационныхКорректировок).ДокументБД
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументБД
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ПотребительРасчета);
		
		Результат=Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		
		Возврат Новый Структура("Корректировка,ДокументБД",Результат.Корректировка,Результат.ДокументБД);
		
	КонецЕсли;
		
КонецФункции // ПараметрыКорректировки()



// Процедура для каждого элемента перечисления добавляет запись в таблицу значений
// мСоотвествиеСпособовИТипов, помещая туда тип данных значения параметра в колонку
// ТипДанных, тип расчета (простой, по коду или периоды) в колонку ТипРасчета и
// собственно сам элемент перечисления в колонку СпособВычисления.
//
Процедура ЗаполнитьСоответствиеСпособовИТипов() Экспорт
	
	Если мСоответствиеИзмеренийСпособовИТипов.Количество() > 0 Тогда
		мСоответствиеИзмеренийСпособовИТипов.Очистить();
	КонецЕсли;
	
	// Для каждой найденной аналитики отчета добавляем запись в таблицу значений 
	// мСоотвествиеСпособовИТипов.
	
	Если НЕ ПолучитьТипПотребителяСтрока()="ШаблоныУниверсальныхПроцессов" Тогда
		
		ЗаполнитьСоответствиеСпособовИТиповКонтекст()

	КонецЕсли;	
				
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();	
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение;
	НоваяСтрока.ТипДанных        = Тип("Строка");
	НоваяСтрока.ТипРасчета       = "Функция";
	НоваяСтрока.ЕстьУточнение    = Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Строка");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();	
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений;
	НоваяСтрока.ТипДанных        = Тип("Строка");
	НоваяСтрока.ТипРасчета       = "Функция";	
	НоваяСтрока.ЕстьУточнение    = Истина;
	НоваяСтрока.ТипДанныхУточнение	= Тип("Строка");
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.Больше;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.Меньше;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
	
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно;
	НоваяСтрока.ТипДанных        = Тип("Булево");
	НоваяСтрока.ТипРасчета       = "Простой";
	НоваяСтрока.ЕстьУточнение    = Истина;
		
	НоваяСтрока                  = мСоответствиеИзмеренийСпособовИТипов.Добавить();	
	НоваяСтрока.СпособВычисления = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется;
	НоваяСтрока.ТипРасчета       = "НеИспользуется";
	
	
	// Заполним типы данных для проверки (типы, которые будут иметь параметры после их вычисления)
	// В общем случае совпадают с типом данных уточнения, кроме явно определенных выше случаев.
	Для Каждого Строка ИЗ  мСоответствиеИзмеренийСпособовИТипов Цикл
		
		Если Строка.ТипДанныхПроверка=Неопределено Тогда
			
			Строка.ТипДанныхПроверка=Строка.ТипДанных;
			
		КонецЕсли;
		
		Если Строка.ТипДанныхУточнение=Неопределено Тогда
			
			Строка.ТипДанныхУточнение=Строка.ТипДанных;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним пользовательские представления способов вычисления параметров
	
	Для Каждого Способ ИЗ мСоответствиеИзмеренийСпособовИТипов Цикл
		
		Если Способ.ПредставлениеСпособа=Неопределено Тогда
			
			Способ.ПредставлениеСпособа=Строка(Способ.СпособВычисления);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГраницуОтбораПоДате(ИмяГраницы,ПредставлениеГраницы)
	
	Если НЕ ПроверитьНеобходимостьИзмененияПараметра(ИмяГраницы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВнеКонтекста=ПолучитьТипПотребителяСтрока()="ШаблоныУниверсальныхПроцессов";
	
	СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Найти(ИмяГраницы,"ПолеБД");
	
	Если СтрокаПараметр=Неопределено Тогда
		
		СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
		СтрокаПараметр.ПолеБД=ИмяГраницы;
		СтрокаПараметр.НаименованиеБД=ПредставлениеГраницы;
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПараметр,"Дата",ТипБД)
		
	КонецЕсли;
	
	Если ВнеКонтекста Тогда
		
		СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		СтрокаПараметр.ЗначениеДляПроверки=?(ИмяГраницы="ДатаНач",НачалоМесяца(ТекущаяДата()),КонецМесяца(ТекущаяДата()));
		
	Иначе
		
		СтрокаПараметр.СпособВычисленияПараметра=?(ИмяГраницы="ДатаНач",Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета,Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета);
		СтрокаПараметр.ЗначениеДляПроверки=Справочники.Периоды.ПустаяСсылка();
		
	КонецЕсли;	
	
	
КонецПроцедуры // ДобавитьГраницуОтбораПоДате() 

Процедура ОчиститьПараметрыВыборочно()
	
	Если МассивСохраняемыхПараметров.Количество()=0 Тогда
		
		ДеревоПараметровОтбораБД.Строки.Очистить();
		Возврат;
		
	КонецЕсли;
	
	МассивКУдалению=Новый Массив;
	
	Для Каждого Строка ИЗ ДеревоПараметровОтбораБД.Строки Цикл
		
		Если МассивСохраняемыхПараметров.Найти(Строка.ПолеБД) = Неопределено Тогда
			
			ДеревоПараметровОтбораБД.Строки.Удалить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьПараметрыВыборочно()

Функция ПроверитьНеобходимостьИзмененияПараметра(ПолеБД)
	
	Возврат МассивСохраняемыхПараметров=Неопределено
		ИЛИ МассивСохраняемыхПараметров.Найти(ПолеБД)=Неопределено;
	
КонецФункции // ПроверитьНеобходимостьИзмененияПараметра()

// Заполнение таблицы "ТабПравилаВычисленияПараметров" значениями по умолчанию,
// полученными из текста запроса или измерений регистра "ЗначенияПоказателейОтчетов"
//
Процедура ЗаполнитьПараметрыОперанда() Экспорт
	
	Если ДеревоПараметровОтбораБД=Неопределено Тогда
		
		ПодготовитьДеревоПараметровОтбораБД();
		
	КонецЕсли;   
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные Тогда
			
		Возврат;
		
	КонецЕсли;
	
	мСоответствиеИзмеренийСпособовИТипов.Сортировать("ИзмерениеРегистра Убыв, ИзКонтекста Убыв");	
	
	Если МассивСохраняемыхПараметров=Неопределено Тогда
		
		ДеревоПараметровОтбораБД.Строки.Очистить();
		
	Иначе
		
		ОчиститьПараметрыВыборочно();
		
	КонецЕсли;
	
	ПараметрыКорректировки=ПараметрыКорректировки();
	
	Если (НЕ мТаблицаПоказателейБД.Найти(Истина,"Регистратор")=Неопределено)
		И ПараметрыКорректировки.Корректировка
		И ЗначениеЗаполнено(ПараметрыКорректировки.ДокументБД)
		И ВнутренниеДанные() Тогда
		
		СтрПоле=ДеревоПолейБД.Строки.Найти("Регистратор","ПолеБД",Истина);	
		СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);
		СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИсходныйДокумент;
		
	КонецЕсли;	
		
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO 
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		СписокПолей=Новый СписокЗначений;
		
		СопоставленныеСтроки=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Истина));
		
		Для Каждого СтрСоответствия ИЗ СопоставленныеСтроки Цикл
			
			// Добавляем отбор по сопоставленным аналитикам.
			
			Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос И (СтрСоответствия.Измерение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПроверитьНеобходимостьИзмененияПараметра(СтрСоответствия.ПолеБД) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ИмяИзмерения",СтрСоответствия.АналитикаКонсолидации);
			СтруктураПоиска.Вставить("ИзКонтекста",Истина);
			
			СписокПолей.Добавить(СтрСоответствия.ПолеБД);
			
			МассивСпособРасчеты=мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
			
			СтрПоле			= ДеревоПолейБД.Строки.Найти(СтрСоответствия.ПолеБД,"ПолеБД",Истина);
			СтрокаПараметр	= ДеревоПараметровОтбораБД.Строки.Найти(СтрСоответствия.ПолеБД,"ПолеБД");			
			Если СтрокаПараметр=Неопределено
				И СтрПоле <> Неопределено Тогда					
				СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);				
			КонецЕсли;
			
			СтрокаПараметр.НастройкаСоответствия=СтрСоответствия.НастройкаСоответствия;
			
			Если МассивСпособРасчеты.Количество()>0 Тогда
				
				СтрокаПараметр.СпособВычисленияПараметра=МассивСпособРасчеты[0].СпособВычисления;
				СтрокаПараметр.ЗначениеДляПроверки=Новый (МассивСпособРасчеты[0].ТипДанныхПроверка);
				СтрокаПараметр.ТипРасчета=МассивСпособРасчеты[0].ТипРасчета;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// Добавляем отборы по периодам
		
		Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений Тогда
			
			Если РегистрБД.Периодический=Истина Тогда
				
				ДобавитьГраницуОтбораПоДате("ДатаНач",Нстр("ru = 'Дата среза'"));
								
			КонецЕсли;
			
		ИначеЕсли НЕ (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос 
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники) Тогда 
			
			ДобавитьГраницуОтбораПоДате("ДатаНач",Нстр("ru = 'Дата начала отбора данных'"));
			ДобавитьГраницуОтбораПоДате("ДатаКон",Нстр("ru = 'Дата окончания отбора данных'"));
						
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД Тогда
		
		СписокПолей=Новый СписокЗначений;
		
		// Добавляем отбор по сопоставленным аналитикам.
		МассивСоответствие=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Истина));
		
		Для Каждого СтрСоответствия ИЗ МассивСоответствие Цикл
			
			Если НЕ ПроверитьНеобходимостьИзмененияПараметра(СтрСоответствия.ПолеБД) Тогда
				
				Продолжить;
				
			КонецЕсли;
				
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ИмяИзмерения",СтрСоответствия.АналитикаКонсолидации);
			СтруктураПоиска.Вставить("ИзКонтекста",Истина);
			
			СписокПолей.Добавить(СтрСоответствия.ПолеБД);
			
			МассивСпособРасчеты=мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСпособРасчеты.Количество()=0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрПоле			= ДеревоПолейБД.Строки.Найти(СтрСоответствия.ПолеБД,"ПолеБД",Истина);
			СтрокаПараметр	= ДеревоПараметровОтбораБД.Строки.Найти(СтрСоответствия.ПолеБД,"ПолеБД"); 			
			Если СтрокаПараметр=Неопределено Тогда
				
				Если  СтрПоле <> Неопределено Тогда					
					СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
						
			Если МассивСпособРасчеты.Количество()>0 Тогда
				
				СтрокаПараметр.СпособВычисленияПараметра=МассивСпособРасчеты[0].СпособВычисления;
				СтрокаПараметр.ЗначениеДляПроверки=Новый (МассивСпособРасчеты[0].ТипДанныхПроверка);
				СтрокаПараметр.ТипРасчета=МассивСпособРасчеты[0].ТипРасчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
			
			// Добавляем отборы по периодам
			
			ДобавитьГраницуОтбораПоДате("ДатаНач",Нстр("ru = 'Дата начала отбора данных'"));
			ДобавитьГраницуОтбораПоДате("ДатаКон",Нстр("ru = 'Дата окончания отбора данных'"));
			
		ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
			
			Если РегистрБД.Периодический=Истина Тогда
				
				ДобавитьГраницуОтбораПоДате("ДатаНач",Нстр("ru = 'Дата среза'"));
				
			КонецЕсли;
			
		КонецЕсли;
				
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		СписокПолей=Новый СписокЗначений;
		МассивСоответствие=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Истина));
		
		Для Каждого СтрСоответствия ИЗ МассивСоответствие Цикл
			
			Если НЕ ПроверитьНеобходимостьИзмененияПараметра(СтрСоответствия.ПолеБД) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Добавляем отбор по сопоставленным аналитикам.
				
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ИмяИзмерения",СтрСоответствия.АналитикаКонсолидации);
			СтруктураПоиска.Вставить("ИзКонтекста",Истина);
			
			СписокПолей.Добавить(СтрСоответствия.ПолеБД);
			
			МассивСпособРасчеты=мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
			
			СтрПоле			= ДеревоПолейБД.Строки.Найти(СтрСоответствия.ПолеБД,"ПолеБД",Истина);
			СтрокаПараметр	= ДеревоПараметровОтбораБД.Строки.Найти(СтрСоответствия.ПолеБД,"ПолеБД",Истина);			
			Если СтрокаПараметр=Неопределено
				И СтрПоле <> Неопределено Тогда					
				СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);
			КонецЕсли;
						
			Если МассивСпособРасчеты.Количество()>0 Тогда
				
				СтрокаПараметр.СпособВычисленияПараметра=МассивСпособРасчеты[0].СпособВычисления;
				СтрокаПараметр.ЗначениеДляПроверки=Новый (МассивСпособРасчеты[0].ТипДанныхПроверка);
				СтрокаПараметр.ТипРасчета=МассивСпособРасчеты[0].ТипРасчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрОтбор Из мТаблицаВозможныхПолейОтбор Цикл
			
			Если НЕ ПроверитьНеобходимостьИзмененияПараметра(СтрОтбор.Поле) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрПоле 		= ДеревоПолейБД.Строки.Найти(СтрОтбор.Поле,"ПолеБД",Истина);
			СтрокаПараметр 	= ДеревоПараметровОтбораБД.Строки.Найти(СтрОтбор.Поле,"ПолеБД",Истина);			
			Если СтрокаПараметр = Неопределено
				И СтрПоле <> Неопределено Тогда
				СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);
			КонецЕсли;
	
		КонецЦикла; 
																		
	КонецЕсли;
	
	МассивПолейКонтекст=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ВозможенОтборИзКонтекста,Сопоставлено",Истина,Истина));
	
	Для Каждого СтрКонтекст ИЗ МассивПолейКонтекст Цикл
		
		МассивСпособРасчеты=мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(новый Структура("ТаблицаАналитики,ИзКонтекста",СтрКонтекст.ТаблицаАналитики,Истина));
		
		Если МассивСпособРасчеты.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрПоле			= ДеревоПолейБД.Строки.Найти(СтрКонтекст.ПолеБД,"ПолеБД",Истина);
		СтрокаПараметр	= ДеревоПараметровОтбораБД.Строки.Найти(СтрКонтекст.ПолеБД,"ПолеБД");		
		Если СтрокаПараметр=Неопределено
			И СтрПоле <> Неопределено Тогда				
			СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);		
		КонецЕсли;
		
		СтрокаПараметр.СпособВычисленияПараметра=МассивСпособРасчеты[0].СпособВычисления;
		СтрокаПараметр.ЗначениеДляПроверки=Новый (МассивСпособРасчеты[0].ТипДанныхПроверка);
		СтрокаПараметр.ТипРасчета=МассивСпособРасчеты[0].ТипРасчета;
		
	КонецЦикла;

	
КонецПроцедуры // ЗаполнитьПараметрыОперанда()

Процедура УстановитьОтбор(ПолеБД,СпособВычисленияПараметра,УточнениеСпособаОпределения=Неопределено,ЗначениеДляПроверки=Неопределено) Экспорт
	
	СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Найти(ПолеБД,"ПолеБД",Истина);
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
		
		Если НЕ СтрокаПараметр=Неопределено Тогда
			
			СтрокаРодитель=СтрокаПараметр.Родитель;
			
			Если СтрокаРодитель=Неопределено Тогда
				
				ДеревоПараметровОтбораБД.Строки.Удалить(СтрокаПараметр);
				
			Иначе
				
				СтрокаРодитель.Строки.Удалить(СтрокаПараметр);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПолеБД="ДатаНач" Тогда
		
		Если СтрокаПараметр=Неопределено Тогда
			
			СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
			СтрокаПараметр.ПолеБД="ДатаНач";
			СтрокаПараметр.НаименованиеБД=Нстр("ru = 'Дата начала отбора данных'");
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПараметр,"Дата",ТипБД)
			
		КонецЕсли;
		
	ИначеЕсли ПолеБД="ДатаКон" Тогда
		
		Если СтрокаПараметр=Неопределено Тогда
			
			СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
			СтрокаПараметр.ПолеБД="ДатаКон";
			СтрокаПараметр.НаименованиеБД=Нстр("ru = 'Дата окончания отбора данных'");
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПараметр,"Дата",ТипБД)
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаПараметр=Неопределено Тогда
			
			СтрПоле=ОпределитьРабочуюСтроку("ПолеБД",ПолеБД);	
			СтрокаПараметр=ДеревоПараметровОтбораБД.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметр,СтрПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПараметр.СпособВычисленияПараметра	= СпособВычисленияПараметра;
	СтрокаПараметр.УточнениеСпособаОпределения	= УточнениеСпособаОпределения;
	СтрокаПараметр.ЗначениеДляПроверки			= ЗначениеДляПроверки;
	
КонецПроцедуры // УстановитьОтбор()

Процедура УстановитьСоответствие(ПолеБД,АналитикаКонсолидации,НастройкаСоответствия=Неопределено) Экспорт
	
	СтрокаСоответствия=ТаблицаСоответствияБД.Найти(ПолеБД,"ПолеБД");
	
	Если СтрокаСоответствия=Неопределено Тогда
		
		СтрокаСоответствия=ТаблицаСоответствияБД.Добавить();
				
	КонецЕсли;
	
	СтрПолеПриемника=мТаблицаВозможныхПолей.Найти(АналитикаКонсолидации,"Поле");
	
	СтрокаСоответствия.АналитикаКонсолидации 	= СтрПолеПриемника.Поле;
	СтрокаСоответствия.ПсевдонимКонсолидации 	= СтрПолеПриемника.Синоним;
	СтрокаСоответствия.АналитикаОтчета			= СтрПолеПриемника.АналитикаОтчета;
	СтрокаСоответствия.ВидАналитики				= СтрПолеПриемника.ВидАналитики;

	СтрПолеИсточника=ОпределитьРабочуюСтроку("ПолеБД",ПолеБД);
	
	ЗаполнитьЗначенияСвойств(СтрокаСоответствия,СтрПолеИсточника,,"ВидАналитики");
	СтрокаСоответствия.ПсевдонимБД=СтрПолеИсточника.НаименованиеБД;
	СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	СтрокаСоответствия.Сопоставлено=Истина;
	
	СтрокаСоответствия.НастройкаСоответствия=НастройкаСоответствия;		
					
КонецПроцедуры // УстановитьСоответствие()
 
Функция СформироватьПсевдоним(знач Поле)
	
	ПозТчк = СтрНайти(Поле,".");
	
	Если ПозТчк = 0 Тогда
		Возврат Поле;
	КонецЕсли;
	
	ТекСтр = "";
	Поле = Прав(Поле, СтрДлина(Поле) - ПозТчк);
	ПозТчк = СтрНайти(Поле,".");
	
	Пока ПозТчк <> 0 Цикл
		ТекСтр = ТекСтр + Лев(Поле, ПозТчк-1);
		Поле = Прав(Поле, СтрДлина(Поле) - ПозТчк);
		ПозТчк = СтрНайти(Поле, ".");
	КонецЦикла;
	
	ТекСтр = ТекСтр + Поле;
	Возврат ТекСтр;
	
КонецФункции



// Заполнение таблицы "ПравилаИспользованияПолейЗапроса" значениями по умолчанию,
// полученными из текста запроса или измерений регистра "ЗначенияПоказателейОтчетов"
//
Процедура ЗаполнитьАналитикуОперанда() Экспорт
	
	ТекПравилаИспользованияПолей=ПравилаИспользованияПолейЗапроса.ВыгрузитьКолонки();
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ФункцияНаВстроенномЯзыке И (НЕ ИсточникЯвляетсяСинтетическим) Тогда // Считаем, что в процедуре заполняются все необходимые аналитики
		
		Для Каждого СтрАналитика ИЗ мТаблицаВидовАналитикПоказателя Цикл
			
			НоваяСтрока=ТекПравилаИспользованияПолей.Добавить();
				
			НоваяСтрока.АналитикаОперанда=СтрАналитика.ВидАналитики;
			НоваяСтрока.КодАналитики=СтрАналитика.КодАналитики;
				
		КонецЦикла;
		
	ИначеЕсли СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
		
		Для Каждого СтрПоле ИЗ мТаблицаВозможныхПолейОтбор Цикл
			
			НоваяСтрока=ТекПравилаИспользованияПолей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоле);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрАналитика ИЗ мТаблицаВидовАналитикПоказателя Цикл
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ВидАналитики",СтрАналитика.ВидАналитики);		
			
			МассивСтрок=мТаблицаВозможныхПолейОтбор.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество()>0 Тогда
				
				МассивПравил=ПравилаИспользованияПолейЗапроса.НайтиСтроки(Новый Структура("Поле,Синоним",МассивСтрок[0].Поле,МассивСтрок[0].Синоним));
				НоваяСтрока=ТекПравилаИспользованияПолей.Добавить();
				
				Если МассивПравил.Количество()>0 Тогда
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивПравил[0]);
					
				Иначе
					
					НоваяСтрока.АналитикаОперанда=СтрАналитика.ВидАналитики;
					НоваяСтрока.КодАналитики=СтрАналитика.КодАналитики;
					
					НоваяСтрока.Поле=МассивСтрок[0].Поле;
					НоваяСтрока.Синоним=МассивСтрок[0].Синоним;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	ПравилаИспользованияПолейЗапроса.Очистить();
	ПравилаИспользованияПолейЗапроса.Загрузить(ТекПравилаИспользованияПолей);
	
КонецПроцедуры // ЗаполнитьАналитикуОперанда()

Процедура ЗаполнитьНастройкиИмпортаОбъектовПоУмолчанию() Экспорт
	
	Запрос=Новый Запрос;
	
	СтрокаТипПотребительРасчета=ПолучитьТипПотребителяСтрока();
	
	Если СтрокаТипПотребительРасчета="ДокументыБД" Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	ДокументыБД.Ссылка КАК ОбъектБД,
		 |	НЕОПРЕДЕЛЕНО КАК ТабличнаяЧастьБД
		|ИЗ
		|	Справочник.ДокументыБД КАК ДокументыБД
		|ГДЕ
		|	ДокументыБД.Владелец = &ТипБД
		|	И ДокументыБД.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Запрос.УстановитьПараметр("Наименование",ПотребительРасчета.Наименование);
		
		Если Не ЗначениеЗаполнено(СпособПолучения) Тогда
			СпособПолучения=?(ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ,Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы,Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы);
		КонецЕсли;
		
	ИначеЕсли СтрокаТипПотребительРасчета="СправочникиБД" Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	СправочникиБД.Ссылка КАК ОбъектБД,
		|	НЕОПРЕДЕЛЕНО КАК ТабличнаяЧастьБД
		|ИЗ
		|	Справочник.СправочникиБД КАК СправочникиБД
		|ГДЕ
		|	СправочникиБД.Владелец = &ТипБД
		|	И СправочникиБД.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Запрос.УстановитьПараметр("Наименование",ПотребительРасчета.Наименование);
		
		Если Не ЗначениеЗаполнено(СпособПолучения) Тогда
			СпособПолучения=?(ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ,Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники,Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники);
		КонецЕсли;
		
	ИначеЕсли СтрокаТипПотребительРасчета="ТабличныеЧастиБД" Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	ТабличныеЧастиБД.Владелец КАК ОбъектБД,
		|	ТабличныеЧастиБД.Ссылка КАК ТабличнаяЧастьБД
		|ИЗ
		|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
		|ГДЕ
		|	ТабличныеЧастиБД.Владелец.Наименование = &НаименованиеОбъекта
		|	И ТабличныеЧастиБД.Владелец.Владелец = &ТипБД
		|	И ТабличныеЧастиБД.Наименование = &НаименованиеТЧ";
		
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		Запрос.УстановитьПараметр("НаименованиеТЧ",ПотребительРасчета.Наименование);
		Запрос.УстановитьПараметр("НаименованиеОбъекта",ПотребительРасчета.Владелец.Наименование);
		
		Если Не ЗначениеЗаполнено(СпособПолучения) Тогда
		
			Если ТипЗнч(ПотребительРасчета.Владелец)=Тип("СправочникСсылка.ДокументыБД") Тогда  
				
				СпособПолучения=?(ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ,Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы,Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы);
				
			ИначеЕсли ТипЗнч(ПотребительРасчета.Владелец)=Тип("СправочникСсылка.СправочникиБД") Тогда
				
				СпособПолучения=?(ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ,Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники,Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		
		Результат=Запрос.Выполнить().Выбрать();	
		
		Если Результат.Следующий() Тогда
			
			ОбъектБД=Результат.ОбъектБД;
			ТабличнаяЧастьБД=Результат.ТабличнаяЧастьБД;
			
		Иначе
			
			ОбъектБД="";
			ТабличнаяЧастьБД="";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииОбъектаБД();
	
КонецПроцедуры // ЗаполнитьНастройкиИмпортаОбъектовПоУмолчанию() 

Процедура ЗаполнитьТаблицыАналитикОтбор()
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов 
			И (НЕ ПолучитьТипПотребителяСтрока()="ПроизвольныеОтчеты") Тогда
			
			мТаблицаВидовАналитикПоказателяОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.ГруппаРаскрытия,,Истина,ПоказательОтбор);	
			мТаблицаВидовАналитикВидаОтчетаОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.Владелец);
			
		Иначе
			
			мТаблицаВидовАналитикПоказателяОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.ГруппаРаскрытия);	
			мТаблицаВидовАналитикВидаОтчетаОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
				
		мТаблицаВидовАналитикПоказателяОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.ГруппаРаскрытия);	
		мТаблицаВидовАналитикВидаОтчетаОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.Владелец);
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		мТаблицаВидовАналитикПоказателяОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ГруппаРаскрытияОтбор,,Истина);	
		мТаблицаВидовАналитикВидаОтчетаОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ГруппаРаскрытияОтбор.Владелец);
						
	Иначе
		
		мТаблицаВидовАналитикПоказателяОтбор=Новый ТаблицаЗначений;	
		мТаблицаВидовАналитикВидаОтчетаОтбор=Новый ТаблицаЗначений;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьТаблицыАналитикОтбор()

Процедура ЗаполнитьАналитикиПоГруппеРаскрытия()
	
	Если ОбщегоНазначенияУХ.ЕстьТабличнаяЧастьОбъекта("Аналитики",ПотребительРасчета.ГруппаРаскрытия) Тогда
		
		мТаблицаВидовАналитикПоказателя=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитикПоТЧ(ПотребительРасчета.ГруппаРаскрытия);
		ДанныеАналитики=ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытияТЧ(,ПотребительРасчета.ГруппаРаскрытия);
		мТаблицаВидовАналитикВидаОтчета=Новый ТаблицаЗначений;
		
	Иначе
		
		мТаблицаВидовАналитикПоказателя=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПотребительРасчета.ГруппаРаскрытия);
		мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПотребительРасчета.Владелец);
		ДанныеАналитики = ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытия(,ПотребительРасчета.ГруппаРаскрытия);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАналитикиПоГруппеРаскрытия()

Процедура ДобавитьПоляИзмерений(РегистрБухгалтерии,СчетБД,КоррСчетБД=Неопределено,ПрефиксПоля="")
	
	ТаблицаИзмерений=РаботаСПолямиАналитикиУХ.ЗаполнитьИзмеренияПроводки(,РегистрБухгалтерии,СчетБД,КоррСчетБД);
	
	Для Каждого СтрРеквизит ИЗ ТаблицаИзмерений Цикл
		
		Если СтрРеквизит.Имя="ПланСчетов" ИЛИ СтрРеквизит.Имя="ПланСчетовБД" Тогда
			
			Продолжить;
			
		КонецЕсли;		
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=ПрефиксПоля+СтрРеквизит.Имя;
		ПолеАналитика.НаименованиеАналитики=СтрРеквизит.Синоним;
		ПолеАналитика.Синоним=СтрРеквизит.Синоним;
		ПолеАналитика.АналитикаОтчета=Ложь;
		ПолеАналитика.РеквизитОбъекта=СтрРеквизит.Имя;
		ПолеАналитика.Порядок=СтрРеквизит.Порядок-2;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрРеквизит.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		
		Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
			
			ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;
		
		ПолеАналитика.ВидАналитики=СтрРеквизит.ВидАналитики;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПоляИзмерений() 

Процедура ЗаполнитьПоляПоРеквизитамПоказателяОбъектаБД()
	
	ИндексАналитики=0;
	
	Если НЕ ПотребительРасчета.ДляЗаполненияШапки Тогда
		
		Для Каждого РеквизитСинхронизации ИЗ НазначениеРасчетов.РеквизитыШапкиДляСинхронизацииТЧ Цикл
			
			ИндексАналитики=ИндексАналитики+1;
			
			ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
			ПолеАналитика.Поле="Аналитика"+ИндексАналитики;
			ПолеАналитика.НаименованиеАналитики=РеквизитСинхронизации.Синоним;
			ПолеАналитика.Синоним=РеквизитСинхронизации.Синоним;
			ПолеАналитика.АналитикаОтчета=Ложь;
			ПолеАналитика.РеквизитОбъекта=РеквизитСинхронизации.Имя;
			
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, РеквизитСинхронизации.ТипДанных,НазначениеРасчетов.Владелец.Владелец);
			
			Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
				
				ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
				
			КонецЕсли;
			
			ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
			
			Если ДанныеСинхронизации.Количество()=2 Тогда 
				
				ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
				
			Иначе
				
				ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПотребительРасчета.ТабличнаяЧастьБД) ИЛИ ПотребительРасчета.ДляЗаполненияШапки Тогда
		
		Для Каждого СтрРеквизит ИЗ ПотребительРасчета.Реквизиты Цикл
			
			Если СтрРеквизит.Имя="Ссылка"
				ИЛИ СтрРеквизит.Имя="НомерСтроки"
				ИЛИ СтрРеквизит.Имя="Номер"
				ИЛИ СтрРеквизит.Имя="Наименование" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПотребительРасчета.ДляЗаполненияШапки Тогда
				
				ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
				ПолеАналитика.Поле=СтрРеквизит.Имя;
				ПолеАналитика.НаименованиеАналитики=СтрРеквизит.Синоним;
				ПолеАналитика.Синоним=СтрРеквизит.Синоним;
				ПолеАналитика.АналитикаОтчета=Ложь;
				ПолеАналитика.РеквизитОбъекта=СтрРеквизит.Имя;
				
			Иначе	
				
				ИндексАналитики=ИндексАналитики+1;
				
				ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
				ПолеАналитика.Поле="Аналитика"+ИндексАналитики;
				ПолеАналитика.НаименованиеАналитики=СтрРеквизит.Синоним;
				ПолеАналитика.Синоним=СтрРеквизит.Синоним;
				ПолеАналитика.АналитикаОтчета=Ложь;
				ПолеАналитика.РеквизитОбъекта=СтрРеквизит.Имя;
				
			КонецЕсли;
			
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрРеквизит.ТипДанных,НазначениеРасчетов.Владелец.Владелец);
			
			Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
				
				ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
				
			КонецЕсли;
			
			ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
			
			Если ДанныеСинхронизации.Количество()=2 Тогда 
				
				ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
				
			Иначе
				
				ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляПоРеквизитамШапки()

Процедура ЗаполнитьПоляПоРеквизитамОбъектаБД()
	
	ИндексАналитики=0;
	
	Для Каждого СтрРеквизит ИЗ ПотребительРасчета.Реквизиты Цикл
		
		Если СтрРеквизит.Имя="Ссылка"
			ИЛИ СтрРеквизит.Имя="НомерСтроки"
			ИЛИ СтрРеквизит.Имя="Номер"
			ИЛИ СтрРеквизит.Имя="Наименование" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=СтрРеквизит.Имя;
		ПолеАналитика.НаименованиеАналитики=СтрРеквизит.Синоним;
		ПолеАналитика.Синоним=СтрРеквизит.Синоним;
		ПолеАналитика.АналитикаОтчета=Ложь;
		ПолеАналитика.РеквизитОбъекта=СтрРеквизит.Имя;
		Если ЗначениеЗаполнено(НазначениеРасчетов.Владелец) Тогда
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрРеквизит.ТипДанных, НазначениеРасчетов.Владелец.Владелец);
		Иначе
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрРеквизит.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		КонецЕсли;
		
		Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
			
			ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьПоляПоРеквизитамТабличнойЧастиБД()

Процедура ЗаполнитьПоляПоИзмерениямРегистраБД()
	
	Для Каждого СтрИзмерение ИЗ ПотребительРасчета.Измерения Цикл
		
		Если СтрИзмерение.Имя="ПланСчетов" ИЛИ СтрИзмерение.Имя="ПланСчетовБД" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=СтрИзмерение.Имя;
		ПолеАналитика.НаименованиеАналитики=СтрИзмерение.Синоним;
		ПолеАналитика.Синоним=СтрИзмерение.Синоним;
		ПолеАналитика.АналитикаОтчета=Ложь;
		ПолеАналитика.РеквизитОбъекта=СтрИзмерение.Имя;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрИзмерение.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
				
		Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
			
			ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоляПоИзмерениямРегистраБД()


Процедура ЗаполнитьПоляПроводки()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПоказателиОтчетов.Владелец КАК Справочник.ШаблоныТрансформационныхКорректировок) КАК ШаблонКорректировки,
	|	ПоказателиОтчетов.ШаблонПроводки КАК ШаблонПроводки
	|ПОМЕСТИТЬ ДанныеПроводки
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШаблонКорректировки,
	|	ШаблонПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныТрансформационныхКорректировок.РегистрБухгалтерии КАК РегистрБухгалтерии,
	|	ШаблоныПроводок.СчетДт КАК СчетДт,
	|	ШаблоныПроводок.СчетКт КАК СчетКт
	|ИЗ
	|	ДанныеПроводки КАК ДанныеПроводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныПроводок КАК ШаблоныПроводок
	|		ПО ДанныеПроводки.ШаблонПроводки = ШаблоныПроводок.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныТрансформационныхКорректировок КАК ШаблоныТрансформационныхКорректировок
	|		ПО ДанныеПроводки.ШаблонКорректировки = ШаблоныТрансформационныхКорректировок.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ПотребительРасчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьПоляРеквизитовПроводки(Результат.РегистрБухгалтерии,Результат.СчетДт,Результат.СчетКт);
	ТаблицаПолей.Колонки.Добавить("КодАналитики");
	
	ОбновитьНомераАналитик(ТаблицаПолей);
	
	Для Каждого Поле ИЗ ТаблицаПолей Цикл
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле					= Поле.КодАналитики;
		ПолеАналитика.НаименованиеАналитики	= Поле.Синоним;
		ПолеАналитика.Синоним				= Поле.Синоним;
		ПолеАналитика.АналитикаОтчета		= Ложь;
		ПолеАналитика.РеквизитОбъекта		= Поле.Имя;
		ПолеАналитика.ВидАналитики			= Поле.ВидАналитики;
		ПолеАналитика.Порядок				= Поле.Порядок;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, Поле.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
				
		Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
			
			ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;	
		
	КонецЦикла
		
КонецПроцедуры // ЗаполнитьПоляПроводки()

	
Процедура ОбновитьНомераАналитик(ТаблицаПолей)
	
	ЧислоАналитикДт=0;
	ЧислоАналитикКт=0;
	
	МассивАналитикиДт=ТаблицаПолей.НайтиСтроки(Новый Структура("ТипПоля,ДтКт","Субконто","Дт"));
	
	Для Каждого Строка ИЗ МассивАналитикиДт Цикл
		
		ЧислоАналитикДт=ЧислоАналитикДт+1;
		Строка.КодАналитики="Аналитика"+ЧислоАналитикДт;
		
	КонецЦикла;
	
	МассивАналитикиКт=ТаблицаПолей.НайтиСтроки(Новый Структура("ТипПоля,ДтКт","Субконто","Кт"));
	
	Для Каждого Строка ИЗ МассивАналитикиКт Цикл
		
		ЧислоАналитикКт=ЧислоАналитикКт+1;
		Строка.КодАналитики="Аналитика"+(ЧислоАналитикДт+ЧислоАналитикКт);
		
	КонецЦикла;	
	
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		Если НЕ Строка.ТипПоля="Субконто" Тогда
			
			Строка.КодАналитики="Аналитика_"+Строка.Имя;
			
		КонецЕсли;
		
	КонецЦикла;		
	
КонецПроцедуры // ОбновитьНомераАналитик()


Процедура ЗаполнитьПоляПоРеквизитамОписанияОбъектаБД()
	
	мТаблицаВидовАналитикПоказателя=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Неопределено);
	мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Неопределено);
	
	мТаблицаВозможныхПолей.Очистить();
	ТипПотребителяСтрока=ПолучитьТипПотребителяСтрока();
	
	Если ТипПотребителяСтрока="ПоказателиОбъектовБД" Тогда 
		
		ЗаполнитьПоляПоРеквизитамПоказателяОбъектаБД();
		
	ИначеЕсли ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO
		И ТипПотребителяСтрока="ТабличныеЧастиБД" Тогда
		
		ЗаполнитьПоляДляИмпортаТЧ_ADO();
				
	Иначе
		
		ЗаполнитьПоляПоРеквизитамОбъектаБД();	
				
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
			
			ЗаполнитьНастройкиИмпортаОбъектовПоУмолчанию();
			
		Иначе
			
			ПриИзмененииОбъектаБД();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСоответствиеСпособовИТипов();	
	
КонецПроцедуры // ЗаполнитьПоляПоРеквизитамОбъектаБД()

Процедура ЗаполнитьАналитикиПоПравиламИспользования()
	
	Для Каждого Строка ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.АналитикаОперанда) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьСтрокуВозможныхПолей(Строка.АналитикаОперанда);
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьАналитикиПоПравиламИспользования() 

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если (НЕ ЗначениеЗаполнено(СпособИспользования)) Тогда
		Возврат;
	КонецЕсли;
	
	мТаблицаВозможныхПолей.Очистить();	
	ЗаполнитьТаблицыАналитикОтбор();
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные Тогда
		
		ЗаполнитьАналитикиПоПравиламИспользования();
		Возврат;
		
	ИначеЕсли ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ГруппаРаскрытия",ПотребительРасчета) Тогда
		
		ЗаполнитьАналитикиПоГруппеРаскрытия();
						
	ИначеЕсли ОбщегоНазначенияУХ.ЕстьТабличнаяЧастьОбъекта("Измерения",ПотребительРасчета) Тогда
		
		ЗаполнитьПоляПоИзмерениямРегистраБД();
		Возврат;
		
	ИначеЕсли ОбщегоНазначенияУХ.ЕстьТабличнаяЧастьОбъекта("Реквизиты",ПотребительРасчета) Тогда
		
		ЗаполнитьПоляПоРеквизитамОписанияОбъектаБД();		
		Возврат;
				
	Иначе	
		
		мТаблицаВидовАналитикПоказателя=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Неопределено);
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Владелец",НазначениеРасчетов)
			И ЗначениеЗаполнено(НазначениеРасчетов.Владелец) Тогда
			
			мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(НазначениеРасчетов.Владелец);
			
		Иначе
			
			мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСписокПолейОтбор();
	ЗаполнитьСписокПолей();
	
	ЗаполнитьСоответствиеСпособовИТипов();
	
	Если Ссылка.Пустая()
		И РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет()
		И СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		ИспользоватьМногопериодныйКонтекст = Истина;
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Заполняет таблицы правил определения параметров и полей значениями по умолчанию
//
Процедура ЗаполнитьПоУмолчанию() Экспорт
	
	ЗаполнитьПараметрыОперанда();
	ЗаполнитьАналитикуОперанда();
	
КонецПроцедуры // ЗаполнитьПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
//  СЛУЖЕБНЫЕ ФУНКЦИИ

Функция ЗаменитьСимвол(знач СтрокаЗамены, ЗаменяемыйСимвол, Замена) Экспорт
	ТекСтрока = СтрокаЗамены;
	ПозСимвол = СтрНайти(ТекСтрока, ЗаменяемыйСимвол);
	Пока ПозСимвол <> 0 Цикл
		ТекСтрока = Лев(ТекСтрока, ПозСимвол - 1) + Замена + Сред(ТекСтрока, ПозСимвол + 1);
		ПозСимвол = СтрНайти(ТекСтрока, ЗаменяемыйСимвол);
	КонецЦикла;
	Возврат ТекСтрока;
КонецФункции

///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)
	
		Если ОбменДанными.Загрузка ИЛИ ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если ПометкаУдаления Тогда
		
		Если Константы.ПроверятьУтверждениеНастроекОтчетов.Получить()
			И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Утверждено",НазначениеРасчетов) 
			И НазначениеРасчетов.Утверждено Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Для установки пометки удаления необходимо снять признак утверждения у владельца операнда.'"), Отказ,,СтатусСообщения.Внимание);
			
			Отказ=Истина;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Ссылка.ПометкаУдаления Тогда
		
		Возврат;
		
	КонецЕсли;	
		
	Если (мПерезаписыватьКод ИЛИ (ЭтоНовый() И ПустаяСтрока(Код))) И НЕ Отказ Тогда
		
		Код = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СокрЛП(Код));
		
	КонецЕсли;
	
	Если ПустаяСтрока(Код) Тогда
		Код = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СокрЛП(Наименование));
	КонецЕсли;
		
	Отказ=НЕ ПроверитьКодПоНазначениюРасчетов(Код,Ложь);
		
	Если Отказ Тогда 
		
		СформироватьВозможныйКодОперанда(Код);
		Отказ=НЕ ПроверитьКодПоНазначениюРасчетов(Код,Истина);

		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КодУпрощеннойФормулы=СформироватьКодУпрощеннойФормулы();
	
	ОпределитьВидИтогаОСВ();
	
	Если ПустаяСтрока(Наименование) И (Не ОбменДанными.Загрузка) Тогда
		
		СформироватьНаименованиеОперанда(Истина);
		
		Если ПустаяСтрока(Наименование) Тогда
			
			Сообщить(НСтр("ru = 'Не заполнено поле ""Описание"".'"), СтатусСообщения.Важное);
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета Тогда
		
		// Проверка на рекурсивное вложение дополнения аналитик
		ПроверитьРекурсивноеВложениеДополненияАналитик(Отказ);
		
		// Установим значение поля "ДатаКон" для регистров накопления
		Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
			ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			ЭлементОтбораДатаНач = ТаблицаПараметровОтбораБД.Найти("ДатаНач","ПолеБД");
			ЭлементОтбораДатаКон = ТаблицаПараметровОтбораБД.Найти("ДатаКон","ПолеБД");
			
			Если ЗначениеЗаполнено(ЭлементОтбораДатаНач) И ЗначениеЗаполнено(ЭлементОтбораДатаКон) Тогда 
				
				Если ВидИтога = "НачальныйОстаток"
					ИЛИ ВидИтога = "НачальныйОстаток#"
					ИЛИ ВидИтога = "НачальныйРазвернутыйОстаток#" Тогда
					
					ЗаполнитьЗначенияСвойств(ЭлементОтбораДатаКон,ЭлементОтбораДатаНач,
					"ЗначениеДляПроверки,ТипРасчета,ТекстМодуля,СмещениеПериода,ИдентификаторРодителя");
					
					ЭлементОтбораДатаКон.СпособВычисленияПараметра = ПолучитьСпособВычисленияПоСвязаннойДате(ЭлементОтбораДатаНач.СпособВычисленияПараметра,"ДатаНач");
					
					ЭлементОтбораДатаНач = УточненияСпособовОпределения.Найти("ДатаНач","ПолеБД");
					Если ЭлементОтбораДатаНач <> Неопределено Тогда
						ЭлементОтбораДатаКон = УточненияСпособовОпределения.Найти("ДатаКон","ПолеБД");
						Если ЭлементОтбораДатаКон = Неопределено Тогда
							ЭлементОтбораДатаКон = УточненияСпособовОпределения.Добавить();
							ЭлементОтбораДатаКон.ПолеБД = "ДатаКон";
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(ЭлементОтбораДатаКон,ЭлементОтбораДатаНач,,"ПолеБД");
					КонецЕсли; 			
					
				ИначеЕсли ВидИтога = "КонечныйОстаток"
					ИЛИ ВидИтога = "КонечныйОстаток#"
					ИЛИ ВидИтога = "КонечныйРазвернутыйОстаток#" Тогда
					
					ЗаполнитьЗначенияСвойств(ЭлементОтбораДатаНач,ЭлементОтбораДатаКон,
					"ЗначениеДляПроверки,ТипРасчета,ТекстМодуля,СмещениеПериода,ИдентификаторРодителя");
					
					ЭлементОтбораДатаНач.СпособВычисленияПараметра = ПолучитьСпособВычисленияПоСвязаннойДате(ЭлементОтбораДатаКон.СпособВычисленияПараметра,"ДатаКон");
					
					ЭлементОтбораДатаКон = УточненияСпособовОпределения.Найти("ДатаКон","ПолеБД");
					Если ЭлементОтбораДатаКон <> Неопределено Тогда
						ЭлементОтбораДатаНач = УточненияСпособовОпределения.Найти("ДатаНач","ПолеБД");
						Если ЭлементОтбораДатаНач = Неопределено Тогда
							ЭлементОтбораДатаНач = УточненияСпособовОпределения.Добавить();
							ЭлементОтбораДатаНач.ПолеБД = "ДатаНач";
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(ЭлементОтбораДатаНач,ЭлементОтбораДатаКон,,"ПолеБД");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// Снимем флаг многопериодного контекста для произволных запросов, если необходимо
	Если НЕ (РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет()
		И СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос) Тогда
		ИспользоватьМногопериодныйКонтекст = Ложь;
	КонецЕсли;
	
	// Установим тип аналитик в таблице отборов
	Для Каждого СтрОтбор ИЗ ТаблицаПараметровОтбораБД Цикл		
		Если Лев(СтрОтбор.ПолеБД, 9) = "Аналитика" Тогда
			СтрокаВозможногоОтбора = мТаблицаВозможныхПолейОтбор.Найти(Лев(СтрОтбор.ПолеБД, 10), "Поле");
			Если СтрокаВозможногоОтбора <> Неопределено Тогда
				СтрОтбор.ТипЗначенияАналитики = СтрокаВозможногоОтбора.ТаблицаАналитики;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;


КонецПроцедуры

Процедура ОпределитьРодителяПоСчету()
	
	ПроектГруппы=Счет.Владелец.Наименование+" ("+ТипБД+")";
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ЭтоГруппа
	|	И ИсточникиДанныхДляРасчетов.ТипБД = &ТипБД
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования
	|	И ИсточникиДанныхДляРасчетов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные);
	Запрос.УстановитьПараметр("Наименование",ПроектГруппы);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Родитель=Результат.Ссылка;
		
	Иначе
		
		ОбъектГруппа=Справочники.ИсточникиДанныхДляРасчетов.СоздатьГруппу();
		ОбъектГруппа.ТипБД=ТипБД;
		ОбъектГруппа.СпособИспользования=СпособИспользования;
		ОбъектГруппа.Наименование=ПроектГруппы;
		ОбъектГруппа.УстановитьНовыйКод();
		ОбъектГруппа.Записать();
		
		Родитель=ОбъектГруппа.Ссылка;
		
	КонецЕсли;	
	
КонецПроцедуры // ОпределитьРодителяПоСчету()

Процедура ПроверитьРекурсивноеВложениеДополненияАналитик(Отказ)	
	
	МассивДругихИсточников = Новый Массив;
	Для Каждого СтрПравило Из ПравилаИспользованияПолейЗапроса Цикл
		Если СтрПравило.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных Тогда
			МассивДругихИсточников.Добавить(СтрПравило.ФиксированноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДругихИсточников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
		|ГДЕ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка В (&МассивДругихИсточников)
		|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных)";
	Запрос.УстановитьПараметр("МассивДругихИсточников", МассивДругихИсточников);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Источник данных используемый для дополнения аналитик не может содержать способ заполнения аналитик ""Поле другого источника"".'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьСпособВычисленияПоСвязаннойДате(СпособВычисленияПараметра,ТипДаты)
	
	Если ТипДаты = "ДатаНач" Тогда
		Если СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом;
		КонецЕсли;
	КонецЕсли;
	Если ТипДаты = "ДатаКон" Тогда
		Если СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода;
		ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
			Возврат Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособВычисленияПараметра;
	
КонецФункции

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ВНЕШНИМИ ИБ

Функция ПроверитьСтандартныеОтборыПоказательОтчета() Экспорт
	
	ИспользуютсяСтандартныеОтборы=Ложь;
	
	ЕстьОрганизация=Ложь;
	ЕстьВалюта=Ложь;
	ЕстьСценарий=Ложь;
	ЕстьПериодОтчета=Ложь;
	ЕстьПроект=Ложь;
	РазделениеПоПроектам=ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("РазделениеПоПроектам",ПотребительРасчета.Владелец) И ПотребительРасчета.Владелец.РазделениеПоПроектам;
	
	МассивДополнительныхОтборов=Новый Массив;
	
	СтруктураОтбор=Новый Структура;
	СтруктураОтбор.Вставить("ИспользуютсяСтандартныеОтборы"	,Ложь);
	СтруктураОтбор.Вставить("ЕстьНестандартныеОтборы"		,Ложь);
	
	Для Каждого СтрПараметр ИЗ ТаблицаПараметровОтбораБД Цикл
		
		Если (СтрПараметр.ПолеБД="Версия.Организация" И СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета) Тогда
			ЕстьОрганизация=Истина;
		ИначеЕсли (СтрПараметр.ПолеБД="Версия.Проект" И СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета) Тогда
			ЕстьПроект=Истина;
		ИначеЕсли(СтрПараметр.ПолеБД="Версия.Валюта" И СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета) Тогда
			ЕстьВалюта=Истина;
		ИначеЕсли (СтрПараметр.ПолеБД="Версия.Сценарий" И СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета) Тогда
			ЕстьСценарий=Истина;
		ИначеЕсли СтрПараметр.ПолеБД="Версия.ПериодОтчета" Тогда
			
			Если СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
				
				ЕстьПериодОтчета=Истина;
				
			ИначеЕсли  СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
				
				СтрУтверждение=ДеревоПараметровОтбораБД.Строки.Найти(СтрПараметр.ПолеБД,"ПолеБД");	
				СтруктураОтбор.Вставить("СдвигПериодов",СтрУтверждение.УточнениеСпособаОпределения);
				
			КонецЕсли;
			
		ИначеЕсли Не СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			МассивДополнительныхОтборов.Добавить(СтрПараметр.ПолеБД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПотребительРасчета) Тогда
		
		Если мТаблицаВидовАналитикВидаОтчета = Неопределено Тогда
			
			Если Не СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляКонтрольныхСоотношений Тогда
				мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПотребительРасчета.Владелец);
			Иначе
				мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(НазначениеРасчетов.Владелец);
			КонецЕсли;
			
		КонецЕсли;
		
		Если мТаблицаВидовАналитикВидаОтчета.Количество()=0 Тогда
			
			ЕстьНестандартныеОтборы=(МассивДополнительныхОтборов.Количество()>0);
			ИспользуютсяСтандартныеОтборы=(ЕстьОрганизация И ЕстьВалюта И ЕстьСценарий И ЕстьПериодОтчета И ?(РазделениеПоПроектам,ЕстьПроект,Истина));
			
		Иначе
			
			ЕстьАналитикиВидаОтчета=Истина;
			ЕстьНестандартныеОтборы=Ложь;
			
			Для Каждого СтрАналитика ИЗ мТаблицаВидовАналитикВидаОтчета Цикл
				
				ТекПараметр=ТаблицаПараметровОтбораБД.Найти(СтрАналитика.КодАналитики,"ПолеБД");
				
				Если ТекПараметр=Неопределено ИЛИ (НЕ ТекПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов[СтрАналитика.КодАналитики]) Тогда
					
					ЕстьАналитикиВидаОтчета=Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ИмяПараметра ИЗ МассивДополнительныхОтборов Цикл
				
				Если мТаблицаВидовАналитикВидаОтчета.Найти(ИмяПараметра,"КодАналитики")=Неопределено Тогда
					
					ЕстьНестандартныеОтборы=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ИспользуютсяСтандартныеОтборы=(ЕстьОрганизация И ЕстьВалюта И ЕстьСценарий И ЕстьПериодОтчета И ЕстьАналитикиВидаОтчета И ?(РазделениеПоПроектам,ЕстьПроект,Истина));
			
		КонецЕсли;
		
	Иначе
		
		ИспользуютсяСтандартныеОтборы=(ЕстьОрганизация И ЕстьВалюта И ЕстьСценарий И ЕстьПериодОтчета И ?(РазделениеПоПроектам,ЕстьПроект,Истина));
		
	КонецЕсли;
	
	СтруктураОтбор.Вставить("ИспользуютсяСтандартныеОтборы"	,ИспользуютсяСтандартныеОтборы);
	СтруктураОтбор.Вставить("ЕстьНестандартныеОтборы"		,ЕстьНестандартныеОтборы);
	
	Возврат СтруктураОтбор; 	
	
КонецФункции // ПроверитьСтандартныеОтборыПоказательОтчета()

Функция ПроверитьСтандартныеОтборыРегистрБухгалтерии()
	
	ИспользуютсяСтандартныеОтборы=Истина;
	
	ЕстьОрганизация=Ложь;
	ЕстьВалюта=Ложь;
	ЕстьСценарий=Ложь;
	
	СдвигПериодовДатаНач=0;
	СдвигПериодовДатаКон=0;
	
	СтруктураОтбор=Новый Структура;
	
	Для Каждого СтрПараметр ИЗ ТаблицаПараметровОтбораБД Цикл
		
		Если СтрПараметр.ПолеБД="ПланСчетов" ИЛИ СтрПараметр.ПолеБД="ПланСчетовБД" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(СтрПараметр.ПолеБД,".")>0 
			И (НЕ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется) Тогда
			
			ИспользуютсяСтандартныеОтборы=Ложь;
			
		КонецЕсли;
		
		Если СтрПараметр.ПолеБД="ДатаНач" Тогда
			
			Если СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
				
				СтрУтверждение=УточненияСпособовОпределения.Найти(СтрПараметр.ПолеБД,"ПолеБД");	
				СдвигПериодовДатаНач=СтрУтверждение.Значение;
				ИспользуютсяСтандартныеОтборы=Ложь;
				
			ИначеЕсли НЕ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
				
				ИспользуютсяСтандартныеОтборы=Ложь;
				
			КонецЕсли;
			
		ИначеЕсли СтрПараметр.ПолеБД="ДатаКон" Тогда
			
			Если СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
				
				СтрУтверждение=УточненияСпособовОпределения.Найти(СтрПараметр.ПолеБД,"ПолеБД");	
				СдвигПериодовДатаКон=СтрУтверждение.Значение;
				ИспользуютсяСтандартныеОтборы=Ложь;
				
			ИначеЕсли НЕ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
				
				ИспользуютсяСтандартныеОтборы=Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеПоля=НайтиСтрокуДанныхБДПоПолю(СтрПараметр.ПолеБД);
			
			Если ДанныеПоля=Неопределено Тогда
				
				ИспользуютсяСтандартныеОтборы=Ложь;
				
			ИначеЕсли ДанныеПоля.Балансовый И (НЕ ДанныеПоля.НеЯвляетсяРазделителемДанных) Тогда
				
				Если НЕ ОбщегоНазначенияУХ.ОтборПоАналитикамЭкземпляраОтчета(СтрПараметр.СпособВычисленияПараметра) Тогда
					
					ИспользуютсяСтандартныеОтборы=Ложь;
					
				КонецЕсли;
								
			ИначеЕсли НЕ СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
				
				ИспользуютсяСтандартныеОтборы=Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОтбор.Вставить("ИспользуютсяСтандартныеОтборы",ИспользуютсяСтандартныеОтборы);
	
	Если СдвигПериодовДатаНач=СдвигПериодовДатаКон И (НЕ СдвигПериодовДатаНач=0) Тогда
		
		СтруктураОтбор.Вставить("СдвигПериодов",СдвигПериодовДатаНач);
		
	КонецЕсли;
	
	СтруктураОтбор.Вставить("ЕстьНестандартныеОтборы",Не ИспользуютсяСтандартныеОтборы);
	
	Возврат СтруктураОтбор;
			
КонецФункции // ПроверитьСтандартныеОтборыРегистрБухгалтерии()

Функция СформироватьКодУпрощеннойФормулы() Экспорт
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД Тогда
		
		ПоказательТекущегоОтчета=Истина;
		КодУпрощеннойФормулы="["+СокрЛП(Код)+"]";

		Возврат КодУпрощеннойФормулы;
	
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета И ЗначениеЗаполнено(ПотребительРасчета) Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидОтчетаОтбор) Тогда
			
			ВидОтчетаОтбор=ПоказательОтбор.Владелец;
			
		КонецЕсли;
		
		СтруктураОтбор=ПроверитьСтандартныеОтборыПоказательОтчета();
		ЕстьНестандартныеОтборы=СтруктураОтбор.ЕстьНестандартныеОтборы;
		ТекстАналитики=ПолучитьТекстАналитик(СтруктураОтбор);
		
		Если ПоказательОтбор.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость
			И (Не ПотребительРасчета.Владелец=ПоказательОтбор.Владелец) Тогда
			
			ТекстВидаИтога=XMLString(ВидИтогаОСВ);
			
			КодУпрощеннойФормулы=ТекстВидаИтога+СокрЛП(ПоказательОтбор.СчетБД.Код)+?(ТекстВидаИтога="ОБ",","+СокрЛП(ПоказательОтбор.КоррСчетБД.Код),"");
			
			Если (НЕ ПустаяСтрока(ТекстАналитики)) ИЛИ СтруктураОтбор.Свойство("СдвигПериодов") Тогда
				
				КодУпрощеннойФормулы=КодУпрощеннойФормулы+"("+?(СтруктураОтбор.Свойство("СдвигПериодов"),СтруктураОтбор.СдвигПериодов,ТекстАналитики);
				
				Если СтруктураОтбор.Свойство("СдвигПериодов") И (НЕ ПустаяСтрока(ТекстАналитики)) Тогда
					
					КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+ТекстАналитики;
					
				КонецЕсли;
				
				КодУпрощеннойФормулы=КодУпрощеннойФормулы+")";
				
			КонецЕсли;				
			
			КодУпрощеннойФормулы=КодУпрощеннойФормулы+?((СтруктураОтбор.ИспользуютсяСтандартныеОтборы ИЛИ СтруктураОтбор.Свойство("СдвигПериодов")) И (НЕ СтруктураОтбор.ЕстьНестандартныеОтборы) ,"","#");
			
		Иначе
			
			СоответствиеАдресов=ОбщегоНазначенияУХ.ПолучитьАдресаЭлементовСтруктуры(ВидОтчетаОтбор,Перечисления.ЭлементыСтруктурыОтчета.Показатель,ПоказательОтбор);
			
			АдресПоказателяОтбор=?(СоответствиеАдресов.Количество()>0,СоответствиеАдресов[ПоказательОтбор],"");
			
			Если ПустаяСтрока(АдресПоказателяОтбор) Тогда
				
				КодУпрощеннойФормулы="["+СокрЛП(Код)+"]";
				
			Иначе
				
				КодУпрощеннойФормулы=?(ПоказательОтбор.Владелец=ПотребительРасчета.Владелец,"",СокрЛП(ПоказательОтбор.Владелец.Код))+"{"+АдресПоказателяОтбор;
				
				Если СтруктураОтбор.Свойство("СдвигПериодов") Тогда
					КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+СтруктураОтбор.СдвигПериодов;
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекстАналитики) Тогда
					
					КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+ТекстАналитики;
					
				КонецЕсли;
				
				КодУпрощеннойФормулы=КодУпрощеннойФормулы+"}"+?((СтруктураОтбор.ИспользуютсяСтандартныеОтборы ИЛИ СтруктураОтбор.Свойство("СдвигПериодов")) И (НЕ СтруктураОтбор.ЕстьНестандартныеОтборы) ,"","#");
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		
		СтруктураОтбор=ПроверитьСтандартныеОтборыПоказательОтчета();
		ЕстьНестандартныеОтборы=СтруктураОтбор.ЕстьНестандартныеОтборы;
		
		КодУпрощеннойФормулы=СокрЛП(ПоказательОтбор.Код);
		
		Если СтруктураОтбор.Свойство("СдвигПериодов") Тогда
			КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+СтруктураОтбор.СдвигПериодов;
		КонецЕсли;
		
		ТекстАналитики=ПолучитьТекстАналитик(СтруктураОтбор);
		
		Если Не ПустаяСтрока(ТекстАналитики) Тогда
			
			КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+ТекстАналитики;
			
		КонецЕсли;
		
		КодУпрощеннойФормулы="["+КодУпрощеннойФормулы+"]"+?((СтруктураОтбор.ИспользуютсяСтандартныеОтборы ИЛИ СтруктураОтбор.Свойство("СдвигПериодов")) И (НЕ СтруктураОтбор.ЕстьНестандартныеОтборы) ,"","#");
	
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии 
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		СтруктураОтбор=ПроверитьСтандартныеОтборыРегистрБухгалтерии();
		ЕстьНестандартныеОтборы=НЕ СтруктураОтбор.ИспользуютсяСтандартныеОтборы;
		
		ТекстВидаИтога=ОбщегоНазначенияУХ.ПолучитьТекстВидаИтогаДляФормулы(ВидИтога,ДтКт);
				
		ТекстАналитики=ПолучитьТекстАналитик(СтруктураОтбор);
				
		КодУпрощеннойФормулы=ТекстВидаИтога+СокрЛП(Счет.Код)+?(ТекстВидаИтога="ОБ",","+СокрЛП(КоррСчет.Код),"");
		
		Если (НЕ ПустаяСтрока(ТекстАналитики)) ИЛИ СтруктураОтбор.Свойство("СдвигПериодов") Тогда
			
			КодУпрощеннойФормулы=КодУпрощеннойФормулы+"("+?(СтруктураОтбор.Свойство("СдвигПериодов"),СтруктураОтбор.СдвигПериодов,ТекстАналитики);
			
			Если СтруктураОтбор.Свойство("СдвигПериодов") И (НЕ ПустаяСтрока(ТекстАналитики)) Тогда
				
				КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+ТекстАналитики;
				
			КонецЕсли;
			
			КодУпрощеннойФормулы=КодУпрощеннойФормулы+")";
			
		КонецЕсли;				
		
		КодУпрощеннойФормулы=КодУпрощеннойФормулы+?((СтруктураОтбор.ИспользуютсяСтандартныеОтборы ИЛИ СтруктураОтбор.Свойство("СдвигПериодов")) И (НЕ СтруктураОтбор.ЕстьНестандартныеОтборы) ,"","#");
		
	Иначе
		
		КодУпрощеннойФормулы="["+СокрЛП(Код)+"]";
		
	КонецЕсли;
	
	Если (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки)
		И (СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета 
		ИЛИ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляКонтрольныхСоотношений)
		И ((СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляКонтрольныхСоотношений И ПотребительРасчета.Владелец.Владелец = ПоказательОтбор.Владелец)
		ИЛИ ПотребительРасчета.Владелец=ПоказательОтбор.Владелец) Тогда
		
		ПоказательТекущегоОтчета=СтруктураОтбор.ИспользуютсяСтандартныеОтборы;
		ЕстьНестандартныеОтборы=СтруктураОтбор.ЕстьНестандартныеОтборы;
		
	Иначе
		
		ПоказательТекущегоОтчета=Ложь
		
	КонецЕсли;
	
	Если СтрНайти(КодУпрощеннойФормулы,"#")>0 Тогда
		
		КодУпрощеннойФормулы=ОбщегоНазначенияУХ.ПолучитьВозможныйКодУпрощеннойФормулы(КодУпрощеннойФормулы,Ссылка,НазначениеРасчетов,ПотребительРасчета);
			
	КонецЕсли;
		
	Возврат КодУпрощеннойФормулы;
			
КонецФункции // СформироватьКодУпрощеннойФормулы()


Функция ПолучитьТекстАналитик(СтруктураОтбор) Экспорт
	
	ТекстАналитики="";
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Если Лев(СтрПоле.Поле,9)="Аналитика" И (НЕ Сред(СтрПоле.Поле,10,1)="_") Тогда
			
			ТекстАналитики=ТекстАналитики+",А"+Сред(СтрПоле.Поле,10,1);
			
			Если СтрНайти(СтрПоле.Поле,".")>0 Тогда
				
				СтруктураОтбор.Вставить("ИспользуютсяСтандартныеОтборы",Ложь);
				
			КонецЕсли;
			
		ИначеЕсли Лев(СтрПоле.Поле,8)="Субконто" Тогда
			
			Если Лев(СтрПоле.Поле,10)="СубконтоКт" Тогда
					
				ТекстАналитики=ТекстАналитики+",КС"+Сред(СтрПоле.Поле,11,1);
				
			ИначеЕсли Лев(СтрПоле.Поле,10)="СубконтоДт" Тогда
					
				ТекстАналитики=ТекстАналитики+",С"+Сред(СтрПоле.Поле,11,1);
				
			Иначе
				
				ТекстАналитики=ТекстАналитики+",С"+Сред(СтрПоле.Поле,9,1);
				
			КонецЕсли;
			
			Если СтрНайти(СтрПоле.Поле,".")>0 Тогда
				
				СтруктураОтбор.Вставить("ИспользуютсяСтандартныеОтборы",Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сред(ТекстАналитики,2);
	
КонецФункции // ПолучитьТекстАналитик()

///////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подготовки таблиц параметров по настройкам операнда
//

Функция ВернутьСоставПериметра(ВладелецПериметра=Неопределено,СоставПериметра=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставПериметраСостав.Организация
	|ИЗ
	|	Справочник.СоставПериметра.Состав КАК СоставПериметраСостав";
	
	Если ЗначениеЗаполнено(СоставПериметра) Тогда
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ СоставПериметраСостав.Ссылка=&СоставПериметра";
		
		Запрос.УстановитьПараметр("СоставПериметра",СоставПериметра);
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|ГДЕ
		|	СоставПериметраСостав.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				СоставПериметра.Ссылка
		|			ИЗ
		|				Справочник.СоставПериметра КАК СоставПериметра";
		
		Если ЗначениеЗаполнено(ВладелецПериметра) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|			ГДЕ
			|				СоставПериметра.Периметр = &ВладелецПериметра";
			
			Запрос.УстановитьПараметр("ВладелецПериметра",ВладелецПериметра);
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+")";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|И (НЕ СоставПериметраСостав.Организация.ТипОрганизации=&Элиминирующая)";
	
	Запрос.УстановитьПараметр("Элиминирующая",Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции // ВернутьСоставПериметра()


// Функция определяет, нужен ли в имени измерения или субконто  постфиксДт/Кт
//  Параметры:
//  - ЗаписьВИБ    - Строка, Наименование измерения или реквизита регистра бухгалтерии.
//  Возвращаемое значение:
//   Модифицированное имя измерения или регистра бухгалтерии.
Функция ДобавитьКСубконтоПризнакДтКт(ЗаписьВИБ) Экспорт
	
	ПолеБД = ЗаписьВИБ.ПолеБД;
	
	Если (НЕ (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии))
		ИЛИ ТрансляцияДебет
		ИЛИ ТрансляцияКредит Тогда
		
		Возврат ПолеБД;
		
	КонецЕсли;
	
	Если НЕ ИтогЕстьОборотПоСчетам() Тогда
		
		ПолеБД=СтрЗаменить(ПолеБД,?(ЗаписьВИБ.Дебетовый, "Дт", "Кт"),"");
		Возврат ПолеБД;
		
	Иначе
		
		Если ЗаписьВИБ.Измерение 
			И (НЕ ЗаписьВИБ.Балансовый)
			И СтрНайти(ПолеБД,"Дт")=0
			И СтрНайти(ПолеБД,"Кт")=0 Тогда
			
			Возврат ПолеБД+"Дт";
			
		Иначе
			
			Возврат ПолеБД;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ИтогЕстьОборотПоСчетам() Экспорт;
	
	Возврат НЕ ПустаяСтрока(КоррСчет);
	
КонецФункции

Функция ПроверитьВедениеУчетаПоРесурсуБД(ЭлементЗначения)
	
	Если НЕ (СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Использование77() Тогда
		
		ТипРесурса="";
		
		Если РесурсРегистра="С" Тогда
			ТипРесурса="Суммовой";
		ИначеЕсли РесурсРегистра="К" Тогда
			ТипРесурса="Количественный";
		ИначеЕсли РесурсРегистра="В" Тогда
			ТипРесурса="Валютный";
		КонецЕсли;
		
		ТекПризнакУчета=ЭлементЗначения.ПризнакиУчетаСубконто.НайтиПоЗначению(ТипРесурса);
		
	ИначеЕсли ЭлементЗначения.Измерение ИЛИ ЭлементЗначения.Регистратор Тогда
		
		Возврат Истина;
		
	Иначе
		
		СтрРесурс=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");
		
		Если СтрРесурс=Неопределено Тогда
			
			Возврат ложь;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтрРесурс.ПризнакУчетаСубконто) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекПризнакУчета=ЭлементЗначения.ПризнакиУчетаСубконто.НайтиПоЗначению(СтрРесурс.ПризнакУчетаСубконто);
		
	КонецЕсли;
	
	Если ТекПризнакУчета=Неопределено Тогда
		
		Возврат ложь;
		
	ИначеЕсли НЕ ТекПризнакУчета.Пометка Тогда 
		
		// Для данного вида субконто не ведется учет по выбранному ресурсу
			
		ИмяПризнакаУчета=ТекПризнакУчета.Представление;
		
		СтрокаШаблона = НСтр("ru = 'Счет: %1, %2
		|Учет по признаку %3 не ведется. Разворот по этой аналитике отменен.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			Если СтрНайти(ЭлементЗначения.ПолеБД, "Кт") > 0 тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(КоррСчет), ЭлементЗначения.НаименованиеБД, ИмяПризнакаУчета));
			Иначе
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(Счет), ЭлементЗначения.НаименованиеБД, ИмяПризнакаУчета));
			КонецЕсли;
		КонецЕсли;
				
		Возврат Ложь;
		
	Иначе	
		
		// Выбранный ресурс разворачивается по данному виду субконто
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции // ПроверитьВедениеУчетаПоРесурсу

// Функция возвращает таблицу сопоставления реквизитов для указанных аналитик консолидации
// и внешней информационной базы.
//  Параметры:
//   АналитикаКонсолидации - Строка, ПланВидовХарактеристикСсылка: ВидыСубконто - аналитика консолидации.
//   ПолеБД   - Строка, аналитика внешней информационной базы.
//
Функция ПолучитьТекущийСписокСопоставления(СтруктураОтбора) Экспорт
	
	ТекущееСоответствие = ТаблицаСоответствияБД.НайтиСтроки(СтруктураОтбора);
	
	Если ТекущееСоответствие.Количество() = 0 ИЛИ (НЕ ТекущееСоответствие[0].Сопоставлено) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат ТекущееСоответствие[0].НастройкаСоответствия;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиСтрокуДанныхБДПоПолю(ПолеБД) Экспорт;
	
	СтрПоле=мТаблицаПоказателейБД.Найти(ПолеБД,"ПолеБД");
	
	Если СтрПоле=Неопределено И СтрНайти(ПолеБД,".")>0 Тогда
		
		Возврат мТаблицаПроизводныхБД.Найти(ПолеБД,"ПолеБД");
		
	Иначе
		
		Возврат СтрПоле;
		
	КонецЕсли;
		
КонецФункции // НайтиСтрокуДанныхБДПоПолю()

Процедура ОпределитьТипЗначенияИсточника()
	
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		СтрРесурс=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");	
		ТипЗначения=ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоСтроке(СтрРесурс.ТипДанных);
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		ТипЗначения = ПоказательОтбор.ТипЗначения;
		
	Иначе
		
		МассивСопоставлено=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаКонсолидации",Истина,"Значение"));
		
		Если МассивСопоставлено.Количество()>0 Тогда
			
			СтрПоле=НайтиСтрокуДанныхБДПоПолю(МассивСопоставлено[0].ПолеБД);
			
			Если СтрПоле = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить тип значения поля источника!'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ТипЗначения=ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(СтрПоле.ТипЗначения[0].Значение);
			
		Иначе
			
			ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
			
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры // ОпределитьТипЗначенияИсточника()

Процедура ПодготовитьТаблицуПолейДляРегистраВИБ() Экспорт
	
	Оборот=Ложь;
	
	ВыбратьПоле  = "";
	ИзПоле       = "";
	// Способ получения операнда - Внешние данные регистр бухгалтерии.
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		Если НЕ ЗначениеЗаполнено(РегистрБД) Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не выбран регистр бухгалтерии'"));
			Возврат ;
		КонецЕсли;
				
		ПравилаИспользованияПолейЗапроса.Очистить();
		
		Если Использование77() Тогда
			
			СтрокаСоответствия         = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    = СтрЗаменить(ВидИтога,"#",ДтКт)+"_"+РесурсРегистра;
			СтрокаСоответствия.Синоним = "Значение";
			СтрокаСоответствия.КодАналитики="Значение";
			
			ИмяРесурса=СтрокаСоответствия.Поле;
			
			Если НЕ ВидИтога="КорДО" Тогда
				КоррСчет="";
			КонецЕсли;
			
			Оборот=(ВидИтога="КорДО" ИЛИ ВидИтога="#О"); 
			
		Иначе
			
			Если (ТрансляцияДебет ИЛИ ТрансляцияКредит ИЛИ ИтогЕстьОборотПоСчетам()) Тогда
				
				ДанныеРесурса=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");
				
				Если ДанныеРесурса.Балансовый Тогда
					
					ИмяРесурса=РесурсРегистра;
					
				Иначе
					
					Если ИтогЕстьОборотПоСчетам() Тогда 
						
						ИмяРесурса=РесурсРегистра+ДтКт;
						
					Иначе
						
						ИмяРесурса=РесурсРегистра+?(ТрансляцияДебет,"Дт","Кт");
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ВидИтога="Оборот" Тогда
				
				КоррСчет="";
				
				Если ДтКт="СВ" Тогда
					
					ИмяРесурса=РесурсРегистра+СтрЗаменить(ВидИтога,"#","");
					
				Иначе
					
					ИмяРесурса=РесурсРегистра+СтрЗаменить(ВидИтога,"#",ДтКт);
					
				КонецЕсли;
				
			Иначе
				
				ТекРесурс=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");
				
				Если ТекРесурс=Неопределено ИЛИ ТекРесурс.Балансовый Тогда
					ИмяРесурса=РесурсРегистра+"Оборот";
				Иначе
					ИмяРесурса=РесурсРегистра+"Оборот"+ДтКт;
				КонецЕсли;
				
			КонецЕсли;
			
			Оборот=(ВидИтога="Оборот" ИЛИ ВидИтога="Оборот#");
			
			СтрокаСоответствия         = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    = ИмяРесурса;
			СтрокаСоответствия.Синоним = СтрЗаменить(ИмяРесурса,".","");
			СтрокаСоответствия.КодАналитики="Значение";
				
		КонецЕсли;
		
		// Способ получения операнда - регистр накопления внешней информационной базы.
	Иначе
		
		ПравилаИспользованияПолейЗапроса.Очистить();
		
		Если ОсновнаяТаблицаРегистра Тогда
			
			СтрокаСоответствия = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    = "Значение";
			СтрокаСоответствия.Синоним = "Значение";
			СтрокаСоответствия.КодАналитики="Значение";
			Оборот = Ложь;
		
		ИначеЕсли НЕ (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники) Тогда
			
			Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений Тогда
				
				Поле = РесурсРегистра;
				
			Иначе
				
				Поле = РесурсРегистра + ВидИтога;
				
			КонецЕсли;
			
			СтрокаСоответствия = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    = Поле;
			СтрокаСоответствия.Синоним = СтрЗаменить(Поле,".","");
			СтрокаСоответствия.КодАналитики="Значение";
			Оборот = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСоответствий=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Ложь));
	
	Для Каждого СтрокаСоответствия Из МассивСоответствий Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаСоответствия) Тогда
			
			СтрокаТаблицы= ПравилаИспользованияПолейЗапроса.Добавить();
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				СтрокаТаблицы.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			СтрокаТаблицы.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
			СтрокаТаблицы.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
			
			Если СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				
				СтрокаТаблицы.Поле=СтрокаСоответствия.ПолеБД;
				СтрокаТаблицы.Синоним=СтрокаСоответствия.ПсевдонимБД;
				
			Иначе
				
				СтрокаТаблицы.ФиксированноеЗначение=СтрокаСоответствия.ФиксированноеЗначение;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
			
		ЭлементЗначения = НайтиСтрокуДанныхБДПоПолю(СтрокаСоответствия.ПолеБД);
		
		Если НЕ ЭлементЗначения = Неопределено Тогда
			
			Если ЭлементЗначения.ТолькоОбороты И НЕ Оборот Тогда
								
				Продолжить; // Раскрытие по оборотным субконто при получении остатка не используется.
				
			КонецЕсли;
			
			Если НЕ ПроверитьВедениеУчетаПоРесурсуБД(ЭлементЗначения) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаТаблицы         = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаТаблицы.Поле    = ДобавитьКСубконтоПризнакДтКт(ЭлементЗначения);
			
			Если НЕ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
				
				Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
					СтрокаТаблицы.Синоним  = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СтрокаСоответствия.ПсевдонимБД);
				Иначе
					СтрокаТаблицы.Синоним=СтрЗаменить(?(ИмпортКазначейства,СтрокаСоответствия.ПсевдонимБД,СтрокаТаблицы.Поле),".","");
				КонецЕсли;
				
			Иначе
								
				СтрокаТаблицы.Синоним = СтрЗаменить(СтрокаТаблицы.Поле,".","")+"vzv"+ПолучитьИдентификаторСубконто77(СтрокаСоответствия.ПсевдонимБД);
				
			КонецЕсли;
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				СтрокаТаблицы.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			СтрокаТаблицы.КодАналитики			=СтрокаСоответствия.АналитикаКонсолидации;
			СтрокаТаблицы.НастройкаСоответствия	=СтрокаСоответствия.НастройкаСоответствия;
			СтрокаТаблицы.СпособЗаполнения		=СтрокаСоответствия.СпособЗаполнения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПринудительноеЗаполнениеАналитик();
					
КонецПроцедуры // ПодготовитьТаблицыДляРегистраВИБ()

Процедура УстановитьПринудительноеЗаполнениеАналитик()
	
	МассивНеСопоставлено=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Ложь,Ложь));
	
	Для Каждого СтрокаСоответствия Из МассивНеСопоставлено Цикл
		
		Если СтрНайти(СтрокаСоответствия.АналитикаКонсолидации,"Аналитика")=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
		Если СтрАналитикаОперанда=Неопределено ИЛИ (Не ЗначениеЗаполнено(СтрАналитикаОперанда.ВидАналитики)) Тогда
			
			Продолжить;
			
		КонецЕсли;
						
		СтрокаТаблицы					= ПравилаИспользованияПолейЗапроса.Добавить();
	
		СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение;
		СтрокаТаблицы.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
		СтрокаТаблицы.КодАналитики		= СтрокаСоответствия.АналитикаКонсолидации;
							
		СтрокаТаблицы.ФиксированноеЗначение=СтрокаТаблицы.АналитикаОперанда.ТипЗначения.ПривестиЗначение();
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьПринудительноеЗаполнениеАналитик()

Процедура ПроверитьУстановитьПринудительноеЗаполнение()
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Строка ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Если СтрНайти(Строка.КодАналитики,"Аналитика")=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.СпособЗаполнения) Тогда
			
			Строка.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение;					
			Строка.ФиксированноеЗначение=Строка.АналитикаОперанда.ТипЗначения.ПривестиЗначение();
		
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Поле) Тогда 
			
			Если Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы
				ИЛИ Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				
				Строка.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение;					
				Строка.ФиксированноеЗначение=Строка.АналитикаОперанда.ТипЗначения.ПривестиЗначение();
				
			ИначеЕсли Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных
				И (Не ЗначениеЗаполнено(Строка.ФиксированноеЗначение)) Тогда
				
				Строка.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение;					
				Строка.ФиксированноеЗначение=Строка.АналитикаОперанда.ТипЗначения.ПривестиЗначение();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры // ПроверитьУстановитьПринудительноеЗаполнение()
	
	
	
	

//////////////////////////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТЕКУЩЕЙ ИБ

Процедура ЗаполнитьАналитикуПоказателяТек() Экспорт
	
	мТаблицаПоказателейБД.Очистить();
	
	Для Каждого СтрПоле ИЗ мТаблицаВозможныхПолейОтбор Цикл
						
		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();		
		СтрокаПоказателей.Измерение       = Истина;
		СтрокаПоказателей.ПолеБД         = СтрПоле.Поле;
		СтрокаПоказателей.НаименованиеБД = СтрПоле.Синоним;
		СтрокаПоказателей.ВидАналитики    = СтрПоле.ВидАналитики;
		СтрокаПоказателей.ТипДанныхПоля   = СтрПоле.ТипДанныхПоля;
		СтрокаПоказателей.ТипЗначения	  = СтрПоле.ТипЗначения;
		СтрокаПоказателей.ТолькоОбороты   = Истина;
		СтрокаПоказателей.Балансовый      = СтрПоле.АналитикаОтчета;
		СтрокаПоказателей.ТипМетаДанных   = ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,СтрПоле.ТаблицаАналитики);
			
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуПоказателяТек()

Процедура ЗаполнитьАналитикуЗапросаТек() Экспорт
		
	мТаблицаПоказателейБД.Очистить();
	
	Запрос      	= Новый Запрос; 
	Запрос.Текст 	= ТекстЗапросаМодуля;
	НовыеПараметры  = Запрос.НайтиПараметры();
	
	Для каждого ПараметрЗапроса Из НовыеПараметры Цикл
		
		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         = ПараметрЗапроса.Имя;
		СтрокаПоказателей.НаименованиеБД = ПараметрЗапроса.Имя;
		СтрокаПоказателей.Измерение       = Ложь;
		СтрокаПоказателей.Балансовый      =Истина;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,ПараметрЗапроса.ТипЗначения,ОпределитьРабочийТипБД(),Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ,ТипБДПриемник);
		
		Если ПараметрЗапроса.Имя="Регистратор" Тогда
			
			СтрокаПоказателей.Регистратор=Истина;
			
		КонецЕсли;
				
	КонецЦикла;
	
	// Определим поля запроса
	ПостроительЗапроса= Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст=ТекстЗапросаМодуля;
	
	ПостроительЗапроса.FillSettings();
	
	Для Каждого Поле ИЗ ПостроительЗапроса.SelectedFields Цикл
		
		ПолеЗапроса=ПостроительЗапроса.AvailableFields[Поле.Name];
		
		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         = ПолеЗапроса.Name;
		СтрокаПоказателей.НаименованиеБД = ПолеЗапроса.Presentation;
		СтрокаПоказателей.Измерение       = Истина;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,ПолеЗапроса.ТипЗначения,ОпределитьРабочийТипБД(),Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ,ТипБДПриемник);
			
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуЗапросаТек()

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// Заполнение деревьев соответствия
             
Функция ЗаполнитьДеревоЗначенийБД() Экспорт
		
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		Возврат ЗаполнитьДеревоПоРегиструБухгалтерииБД();
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД Тогда
		  
		  Возврат ЗаполнитьДеревоПоРегиструНакопленияБД();
		
	  ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		  ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		  ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		  ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД Тогда
		  
		  Возврат ЗаполнитьДеревоПоОбъектуБД();
		  
	Иначе	  
		  
		Возврат ЗаполнитьДеревоПоПроизвольномуЗапросуБД();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокТиповСтрока(ТипСтрока)
	
	СписокТипов=Новый СписокЗначений();
	СписокТипов.Добавить(ТипСтрока);
	
	Возврат СписокТипов;
		
КонецФункции // ПолучитьСписокТиповСтрока() 

Функция ЗаполнитьДеревоПоРегиструБухгалтерииБД() Экспорт
	
	ПодготовитьДеревоПолейБД();
	
	СписокРегистраторов=мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Регистратор", Истина));
	
	Если СписокРегистраторов.Количество()>0 Тогда
		
		ТекущаяСтрока = ДеревоПолейБД.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СписокРегистраторов[0]);
		НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
		
	КонецЕсли;
	
	СписокИзмерений = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
	
	СтрокаИзмерений = ДеревоПолейБД.Строки.Добавить();
	СтрокаИзмерений.НаименованиеБД = Нстр("ru = 'Измерения регистра'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокИзмерений Цикл 
		
		Если Элемент.ПолеБД="ПланСчетов" ИЛИ Элемент.ПолеБД="ПланСчетовБД" Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекущаяСтрока = СтрокаИзмерений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);		
		Инд=Инд+1;
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик") И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаИзмерений.НаименованиеБД = СтрокаИзмерений.НаименованиеБД + "(" + Инд +")";
	
	СписокИзмерений = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение, Дебетовый", Ложь, Истина));
	
	Если СписокИзмерений.Количество()>0 Тогда
		
		СтрокаАналитикОсновногоСчета                 = ДеревоПолейБД.Строки.Добавить();
		СтрокаАналитикОсновногоСчета.НаименованиеБД = Нстр("ru = 'Аналитика основного счета'");
		
		Инд = 0;
		
		Для Каждого Элемент Из СписокИзмерений Цикл
			
			ТекущаяСтрока = СтрокаАналитикОсновногоСчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
			
			Инд=Инд+1;
			
			Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
				// Добавим строку для дальнейшего раскрытия
				
				НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаАналитикОсновногоСчета.НаименованиеБД = СтрокаАналитикОсновногоСчета.НаименованиеБД + "(" + Инд +")";
		
	КонецЕсли;
	
	СписокИзмерений = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение, Дебетовый,Регистратор", Ложь, Ложь,Ложь));
	
	Если СписокИзмерений.Количество()>0 Тогда
		
		СтрокаАналитикКорреспондирующегоСчета                = ДеревоПолейБД.Строки.Добавить();
		СтрокаАналитикКорреспондирующегоСчета.НаименованиеБД = Нстр("ru = 'Аналитика корреспондирующего счета'");
		
		Инд = 0;
		
		Для Каждого Элемент Из СписокИзмерений Цикл
			
			ТекущаяСтрока                           = СтрокаАналитикКорреспондирующегоСчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
			
			Инд=Инд+1;
			
			Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
				// Добавим строку для дальнейшего раскрытия
				
				НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаАналитикКорреспондирующегоСчета.НаименованиеБД = СтрокаАналитикКорреспондирующегоСчета.НаименованиеБД + "(" + Инд +")";
		
	КонецЕсли;
	
	Возврат ДеревоПолейБД;
	
КонецФункции // ЗаполнитьДеревоПоРегиструБухгалтерии()

Функция ЗаполнитьДеревоПоОбъектуБД() Экспорт
	
	ПодготовитьДеревоПолейБД();
		
	ТаблицаВИБ=мТаблицаПоказателейБД.Скопировать();
		
	Для Каждого Элемент Из мТаблицаПоказателейБД Цикл
			
		Если Элемент.ПолеБД="Ссылка" 
			И СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД
			И (Не ЗначениеЗаполнено(ТабличнаяЧастьБД)) Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		ТекущаяСтрока = ДеревоПолейБД.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		ТекущаяСтрока.Картинка=1;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			ТекущаяСтрока.Картинка=0;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ДеревоПолейБД;
	
КонецФункции // ЗаполнитьДеревоПоРегиструНакопления() 

Функция ЗаполнитьДеревоПоРегиструНакопленияБД() Экспорт
	
	Если ЗначениеЗаполнено(КоррРегистрБД) Тогда
		
		Возврат ЗаполнитьДеревоПоКорреспонденцииФинасовыхРегистров();
		
	КонецЕсли;
	
	ПодготовитьДеревоПолейБД();
		
	ТаблицаВИБ=мТаблицаПоказателейБД.Скопировать();
	
	Если ОсновнаяТаблицаРегистра Тогда
		
		СписокРегистраторов = ТаблицаВИБ.НайтиСтроки(Новый Структура("Регистратор", Истина));
		
		ТекущаяСтрока = ДеревоПолейБД.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СписокРегистраторов[0]);
		
		НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
		
	КонецЕсли;	
		
	СписокИзмерений = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение", Истина));
	
	СтрокаИзмерений = ДеревоПолейБД.Строки.Добавить();
	СтрокаИзмерений.НаименованиеБД = Нстр("ru = 'Измерения регистра'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокИзмерений Цикл
				
		ТекущаяСтрока = СтрокаИзмерений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
			
	КонецЦикла;
	
	СтрокаИзмерений.НаименованиеБД = СтрокаИзмерений.НаименованиеБД + "(" + Инд +")";
	СтрокаИзмерений.Строки.Сортировать("ПолеБД Возр");
	
	Если ОсновнаяТаблицаРегистра Тогда
		
		СписокРеквизитов = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение,Регистратор", Ложь,Ложь));
		
		СтрокаРеквизитов = ДеревоПолейБД.Строки.Добавить();
		СтрокаРеквизитов.НаименованиеБД = Нстр("ru = 'Реквизиты регистра'");
		
		Инд = 0;
		
		Для Каждого Элемент Из СписокРеквизитов Цикл
			
			ТекущаяСтрока = СтрокаРеквизитов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
			
			Инд=Инд+1;
			
			// Добавляем строку для возможного раскрытия по реквизитам объекта
			
			Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
				// Добавим строку для дальнейшего раскрытия
				
				НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаРеквизитов.НаименованиеБД = СтрокаРеквизитов.НаименованиеБД + "(" + Инд +")";
		СтрокаРеквизитов.Строки.Сортировать("ПолеБД Возр");
		
	КонецЕсли;

	
	Возврат ДеревоПолейБД;
	
КонецФункции // ЗаполнитьДеревоПоРегиструНакопления()

Функция ЗаполнитьДеревоПоКорреспонденцииФинасовыхРегистров() Экспорт
		
	ПодготовитьДеревоПолейБД();
		
	ТаблицаВИБ=мТаблицаПоказателейБД.Скопировать(); 
	
	СписокРегистраторов = ТаблицаВИБ.НайтиСтроки(Новый Структура("Регистратор", Истина));
	
	ТекущаяСтрока = ДеревоПолейБД.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СписокРегистраторов[0]);
	
	НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
	
	// Измерения основного регистра
	
	ДанныеРегистраДт=ДеревоПолейБД.Строки.Добавить();
	ДанныеРегистраДт.НаименованиеБД=РегистрБД.Синоним;
		
	СписокИзмерений = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение,Дебетовый", Истина,Истина));
	
	СтрокаИзмерений = ДанныеРегистраДт.Строки.Добавить();
	СтрокаИзмерений.НаименованиеБД = Нстр("ru = 'Измерения регистра'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокИзмерений Цикл
				
		ТекущаяСтрока = СтрокаИзмерений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
			
	КонецЦикла;
	
	СтрокаИзмерений.НаименованиеБД = СтрокаИзмерений.НаименованиеБД + "(" + Инд +")";
	СтрокаИзмерений.Строки.Сортировать("ПолеБД Возр");
	
	СписокРеквизитов = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение,Регистратор,Дебетовый", Ложь,Ложь,Истина));
	
	СтрокаРеквизитов = ДанныеРегистраДт.Строки.Добавить();
	СтрокаРеквизитов.НаименованиеБД = Нстр("ru = 'Реквизиты регистра'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокРеквизитов Цикл
		
		ТекущаяСтрока = СтрокаРеквизитов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаРеквизитов.НаименованиеБД = СтрокаРеквизитов.НаименованиеБД + "(" + Инд +")";
	СтрокаРеквизитов.Строки.Сортировать("ПолеБД Возр");
	
	// Измерения корреспондирующего регистра
	
	ДанныеРегистраКт=ДеревоПолейБД.Строки.Добавить();
	ДанныеРегистраКт.НаименованиеБД=КоррРегистрБД.Синоним;
		
	СписокИзмерений = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение,Дебетовый", Истина,Ложь));
	
	СтрокаИзмерений = ДанныеРегистраКт.Строки.Добавить();
	СтрокаИзмерений.НаименованиеБД = Нстр("ru = 'Измерения регистра'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокИзмерений Цикл
				
		ТекущаяСтрока = СтрокаИзмерений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
			
	КонецЦикла;
	
	СтрокаИзмерений.НаименованиеБД = СтрокаИзмерений.НаименованиеБД + "(" + Инд +")";
	СтрокаИзмерений.Строки.Сортировать("ПолеБД Возр");
	
	СписокРеквизитов = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение,Регистратор,Дебетовый", Ложь,Ложь,Ложь));
	
	СтрокаРеквизитов = ДанныеРегистраКт.Строки.Добавить();
	СтрокаРеквизитов.НаименованиеБД = Нстр("ru = 'Реквизиты регистра'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокРеквизитов Цикл
		
		ТекущаяСтрока = СтрокаРеквизитов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) И НЕ Использование77() Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаРеквизитов.НаименованиеБД = СтрокаРеквизитов.НаименованиеБД + "(" + Инд +")";
	СтрокаРеквизитов.Строки.Сортировать("ПолеБД Возр");
	
	Возврат ДеревоПолейБД;
	
КонецФункции // ЗаполнитьДеревоПоКорреспонденцииФинасовыхРегистров()

Функция ЗаполнитьДеревоПоПроизвольномуЗапросуБД() Экспорт
	
	ПодготовитьДеревоПолейБД();
		
	СтрокаПараметров                 = ДеревоПолейБД.Строки.Добавить();
	СтрокаПараметров.НаименованиеБД = Нстр("ru = 'Параметры запроса'");
	
	СписокПараметров = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Ложь));
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокПараметров Цикл
				
		ТекущаяСтрока = СтрокаПараметров.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
		
	КонецЦикла;
	
	СтрокаПараметров.НаименованиеБД = СтрокаПараметров.НаименованиеБД + "(" + Инд +")";
	
	СписокИзмерений =  мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
	
	СтрокаИзмерений = ДеревоПолейБД.Строки.Добавить();
	СтрокаИзмерений.НаименованиеБД = Нстр("ru = 'Поля источника данных'");
	
	Инд = 0;
	
	Для Каждого Элемент Из СписокИзмерений Цикл
				
		ТекущаяСтрока = СтрокаИзмерений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		Инд=Инд+1;
					
	КонецЦикла;
	
	СтрокаИзмерений.НаименованиеБД = СтрокаИзмерений.НаименованиеБД + "(" + Инд +")";
	
	Возврат ДеревоПолейБД;
	
КонецФункции // ЗаполнитьДеревоПоПроизвольномуЗапросу()

Процедура ПодобратьСоответствиеПоТаблицеШаблона(Поле,СтрокаТаблицы)
	
	Если ТаблицаСоответствияБДШаблон=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ВидАналитики) Тогда
		
		СтрокаШаблон=ТаблицаСоответствияБДШаблон.Найти(СтрокаТаблицы.ВидАналитики,"ВидАналитики");
		
		Если НЕ СтрокаШаблон=Неопределено Тогда
			
			СтрокаТаблицы.ПолеБД			= СтрокаШаблон.ПолеБД;
			СтрокаТаблицы.ПсевдонимБД		= СтрокаШаблон.ПсевдонимБД;
			СтрокаТаблицы.Сопоставлено		= Истина;
			СтрокаТаблицы.СпособЗаполнения 	= СтрокаШаблон.СпособЗаполнения;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаТаблицы.ТаблицаАналитики) Тогда
				
		СтрокаШаблон=ТаблицаСоответствияБДШаблон.Найти(СтрокаТаблицы.ТаблицаАналитики,"ТаблицаАналитики");
		
		Если НЕ СтрокаШаблон=Неопределено Тогда
			
			СтрокаТаблицы.ПолеБД			= СтрокаШаблон.ПолеБД;
			СтрокаТаблицы.ПсевдонимБД		= СтрокаШаблон.ПсевдонимБД;
			СтрокаТаблицы.Сопоставлено		= Истина;
			СтрокаТаблицы.СпособЗаполнения 	= СтрокаШаблон.СпособЗаполнения;
						
		КонецЕсли;
				
	КонецЕсли;
					
КонецПроцедуры // ПодобратьСоответствиеПоТаблицеШаблона()

Процедура ПодобратьСоответствиеПоТаблицеПоказателейБД(Поле,СтрокаТаблицы)
	
	Если ЗначениеЗаполнено(Поле.ВидАналитики) Тогда // Ищем по виду субконто
		
		СтрПоказатель=мТаблицаПоказателейБД.Найти(Поле.ВидАналитики,"ВидАналитики");
		
		Если (НЕ СтрПоказатель=Неопределено)
			И (СтрПоказатель.Балансовый ИЛИ (НЕ Поле.АналитикаОтчета)) Тогда
			
			СтрокаТаблицы.ПолеБД			= СтрПоказатель.ПолеБД;
			СтрокаТаблицы.ПсевдонимБД		= СтрПоказатель.НаименованиеБД;
			СтрокаТаблицы.Сопоставлено		= Истина;
			
			Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
				СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрТип ИЗ Поле.ТипДанныхПоля Цикл
		
		ИскомыйТип=СтрТип.Значение;
		ТипНайден=Ложь;
		
		Для Каждого СтрПоказатель ИЗ мТаблицаПоказателейБД Цикл
			
			Если (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
				И СтрПоказатель.Измерение=Поле.АналитикаОтчета)
				ИЛИ (Поле.АналитикаОтчета И (НЕ СтрПоказатель.Балансовый))  
				ИЛИ (НЕ ТаблицаСоответствияБД.Найти(СтрПоказатель.ПолеБД,"ПолеБД")=Неопределено) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ СтрПоказатель.ТипДанныхПоля.НайтиПоЗначению(ИскомыйТип)=Неопределено Тогда
				
				СтрокаТаблицы.ПолеБД			= СтрПоказатель.ПолеБД;
				СтрокаТаблицы.ПсевдонимБД		= СтрПоказатель.НаименованиеБД;
				СтрокаТаблицы.Сопоставлено		= Истина;
				
				Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
					СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
				КонецЕсли;
				
				ТипНайден=Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПодобратьСоответствиеПоТаблицеПоказателейБД()

Функция СформироватьТаблицуСоответствияТек() Экспорт
	
	Если ЗначениеИсточникаОпределяетсяВручную() Тогда	
				
		МассивЗначений = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("ТипМетаДанных","Простой"));		
		
		НоваяСтрока = ТаблицаСоответствияБД.Добавить();
		НоваяСтрока.АналитикаКонсолидации = "Значение";
		НоваяСтрока.ПсевдонимКонсолидации = "Значение";
		
		Если ЗначениеЗаполнено(ПотребительРасчета) И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ТипЗначения",ПотребительРасчета) Тогда			
			ОжидаемыйТип = ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(ПотребительРасчета.ТипЗначения).Типы()[0];			
		Иначе 			
			ОжидаемыйТип = Тип("Число");			
		КонецЕсли;

		Для Каждого СтрЗначение ИЗ МассивЗначений Цикл
			
			Если СтрЗначение.ТипЗначения[0].Значение=ОжидаемыйТип Тогда
				
				НоваяСтрока.ПолеБД         		= СтрЗначение.ПолеБД;
				НоваяСтрока.ПсевдонимБД    		= СтрЗначение.НаименованиеБД;
				НоваяСтрока.ТипМетаДанных  		= СтрЗначение.ТипМетаДанных;			
				НоваяСтрока.Измерение      		= Ложь;
				НоваяСтрока.Дебетовый      		= Ложь;
				НоваяСтрока.Сопоставлено  		= Истина;
				НоваяСтрока.ПолеЗапроса     	= СтрЗначение.ПолеЗапроса;
				НоваяСтрока.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
				
				ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(ОжидаемыйТип);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИспользоватьМногопериодныйКонтекст Тогда
		
			НоваяСтрока = ТаблицаСоответствияБД.Добавить();
			НоваяСтрока.АналитикаКонсолидации 	= "Период";
			НоваяСтрока.ПсевдонимКонсолидации 	= "Период";
			
			Для Каждого СтрЗначение ИЗ МассивЗначений Цикл
			
				Если СтрЗначение.Измерение И 
					СтрЗначение.ТипЗначения[0].Значение = Тип("Дата") Тогда
					
					НоваяСтрока.ПолеБД         		= СтрЗначение.ПолеБД;
					НоваяСтрока.ПсевдонимБД    		= СтрЗначение.НаименованиеБД;
					НоваяСтрока.ТипМетаДанных  		= СтрЗначение.ТипМетаДанных;			
					НоваяСтрока.Измерение      		= Ложь;
					НоваяСтрока.Дебетовый      		= Ложь;
					НоваяСтрока.Сопоставлено  		= Истина;
					НоваяСтрока.ПолеЗапроса     	= СтрЗначение.ПолеЗапроса;
					НоваяСтрока.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					
					ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(ОжидаемыйТип);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
	
	КонецЕсли;
	
	Для Каждого Поле Из мТаблицаВозможныхПолей Цикл
		
		СтрокаТаблицы                       = ТаблицаСоответствияБД.Добавить();
		СтрокаТаблицы.АналитикаКонсолидации = Поле.Поле;
		СтрокаТаблицы.ПсевдонимКонсолидации = Поле.Синоним;
		СтрокаТаблицы.АналитикаОтчета		= Поле.АналитикаОтчета;
		СтрокаТаблицы.ВидАналитики			= Поле.ВидАналитики;
		СтрокаТаблицы.ТаблицаАналитики		= Поле.ТаблицаАналитики;
		СтрокаТаблицы.Порядок				= Поле.Порядок;
		
		ПодобратьСоответствиеПоТаблицеШаблона(Поле,СтрокаТаблицы);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПолеБД) Тогда
			
			ПодобратьСоответствиеПоТаблицеПоказателейБД(Поле,СтрокаТаблицы);
			
		КонецЕсли;
											
	КонецЦикла;
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
		
		Если мТаблицаПоказателейБД.Количество()>1 Тогда
			
			Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				
				Для Каждого СтрПоказатель ИЗ мТаблицаПоказателейБД Цикл
					
					Если СтрПоказатель.Измерение Тогда
						
						НоваяСтрока=ТаблицаСоответствияБД.Добавить();
						НоваяСтрока.ПолеБД=СтрПоказатель.ПолеБД;
						НоваяСтрока.ПсевдонимБД=СтрПоказатель.НаименованиеБД;
						НоваяСтрока.Сопоставлено=Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДляТрансляции() И (НЕ ЗначениеЗаполнено(ИсточникШаблон)) Тогда
		
		ЗаполнитьСоответствияИзмеренийПоУмолчанию(ТаблицаСоответствияБД);
		
		СтрокаВалюта=ТаблицаСоответствияБД.Найти(ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты,"ВидАналитики");
		
		Если НЕ СтрокаВалюта=Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаВалюта.ПолеБД) Тогда
				
				МассивИзмерений=мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение,СправочникБД",Истина,"Валюты"));
				
				Если МассивИзмерений.Количество()>0 Тогда
					
					СтрокаВалюта.ПолеБД		= МассивИзмерений[0].ПолеБД;
					СтрокаВалюта.ПсевдонимБД		= МассивИзмерений[0].НаименованиеБД;
					СтрокаВалюта.Сопоставлено		= Истина;						
					СтрокаВалюта.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					
				КонецЕсли;
		
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ТаблицаСоответствияБД.Сортировать("Порядок, АналитикаКонсолидации");
	
	Возврат ТаблицаСоответствияБД;
					
КонецФункции // СформироватьТаблицуСоответствияТек()

Процедура ЗаполнитьСоответствияИзмеренийПоУмолчанию(ТаблицаСоответствияБД)
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле КАК Поле,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Синоним КАК Синоним,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.АналитикаОперанда КАК АналитикаОперанда,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики КАК КодАналитики,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия КАК НастройкаСоответствия,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.РеквизитАналитики КАК РеквизитАналитики,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ТаблицаАналитики КАК ТаблицаАналитики,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения КАК СпособЗаполнения,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ФиксированноеЗначение КАК ФиксированноеЗначение,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.РеквизитОбъекта КАК РеквизитОбъекта
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов = &НазначениеРасчетов";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПотребительРасчета.Владелец);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.КодАналитики="Значение" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрПоле=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаКонсолидации,АналитикаОтчета",Результат.КодАналитики,Ложь));
		
		Если СтрПоле.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаСоответствия=СтрПоле[0];
		
		СтрокаСоответствия.НастройкаСоответствия=Результат.НастройкаСоответствия;
		СтрокаСоответствия.РеквизитОбъекта=Результат.РеквизитОбъекта;
		СтрокаСоответствия.ВидАналитики=Результат.АналитикаОперанда;
		СтрокаСоответствия.СпособЗаполнения=Результат.СпособЗаполнения;
		СтрокаСоответствия.ФиксированноеЗначение=Результат.ФиксированноеЗначение;
		СтрокаСоответствия.Сопоставлено=Истина;
		СтрокаСоответствия.ПсевдонимБД=Результат.Синоним;
	
		Если НЕ ЗначениеЗаполнено(СтрокаСоответствия.ПолеБД) Тогда
			
			СтрокаСоответствия.ПолеБД=Результат.Поле;
			
			Если СтрНайти(Результат.Поле,".")>0 Тогда
				
				ОпределитьРабочуюСтроку("ПолеБД",Результат.Поле);
					
			КонецЕсли;
				
		КонецЕсли;
		
		СтрокаСоответствия.ВозможенОтборИзКонтекста=(Результат.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы
					И (НЕ СтрНайти(СтрокаСоответствия.ПолеБД,".")>0));
				
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствияИзмеренийПоУмолчанию() 

Функция ПодготовитьДеревоСоответствияДляЗаполнения() Экспорт
	
	Если ЗначениеИсточникаОпределяетсяВручную() Тогда
		
		НоваяСтрока=ТаблицаСоответствияБД.Добавить();
		НоваяСтрока.АналитикаКонсолидации="Значение";
		НоваяСтрока.ПсевдонимКонсолидации="Значение";
		
		Если ИспользоватьМногопериодныйКонтекст Тогда 
			НоваяСтрока = ТаблицаСоответствияБД.Добавить();
			НоваяСтрока.АналитикаКонсолидации = "Период";
			НоваяСтрока.ПсевдонимКонсолидации = "Период";
		КонецЕсли;
				
	КонецЕсли;
	
	Для Каждого Поле Из мТаблицаВозможныхПолей Цикл
		
		Если ТаблицаСоответствияБД.Найти(Поле.Поле, "АналитикаКонсолидации")=Неопределено Тогда
			
			СтрокаТаблицы                       = ТаблицаСоответствияБД.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации = Поле.Поле;
			СтрокаТаблицы.ПсевдонимКонсолидации = Поле.Синоним;
			СтрокаТаблицы.СправочникКонсолидации= ?(Поле.ТаблицаАналитики="Простой","Простой",Поле.СправочникБД);
			СтрокаТаблицы.Сопоставлено          = Ложь;
			СтрокаТаблицы.АналитикаОтчета       = Поле.АналитикаОтчета;
			СтрокаТаблицы.ВидАналитики          = Поле.ВидАналитики;
			СтрокаТаблицы.РеквизитОбъекта       = Поле.РеквизитОбъекта;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
		
		Если мТаблицаПоказателейБД.Количество()>1 Тогда
			
			Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				
				Для Каждого СтрПоказатель ИЗ мТаблицаПоказателейБД Цикл
					
					Если СтрПоказатель.Измерение Тогда
						
						НоваяСтрока=ТаблицаСоответствияБД.Добавить();
						НоваяСтрока.ПолеБД=СтрПоказатель.ПолеБД;
						НоваяСтрока.ПсевдонимБД=СтрПоказатель.НаименованиеБД;
						НоваяСтрока.Сопоставлено=Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаСоответствияБД.Сортировать("АналитикаОтчета Убыв");
	
	Возврат ТаблицаСоответствияБД;
	
КонецФункции // ПодготовитьДеревоСоответствияДляЗаполнения() 

Функция СформироватьТаблицуСоответствияБД() Экспорт
	
	ПодготовитьТаблицуСоответствия();
	
	Если ИсходнаяИнициализацияОбъекта И (НЕ ЗаполнитьТаблицуСоответствияПоУмолчанию) Тогда
		
		Возврат ПодготовитьДеревоСоответствияДляЗаполнения();
		
	ИначеЕсли ЗначениеЗаполнено(ТипБДПриемник) И (НЕ ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ) Тогда
			
		Возврат СформироватьТаблицуСоответствияДляЭкспорта();	
	
	ИначеЕсли ВнутренниеДанные() Тогда
		
		Возврат СформироватьТаблицуСоответствияТек();
		
	Иначе
		
		Возврат СформироватьТаблицуСоответствияВИБ();
		
	КонецЕсли;
		
КонецФункции // СформироватьТаблицуСоответствияБД() 
	
	
Функция ЗначениеИсточникаОпределяетсяВручную() Экспорт
	
	Возврат ((СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники)
		И (НЕ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов)
		И (НЕ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД)
		И (НЕ ГрупповоеРедактирование));
		
КонецФункции // ЗначениеИсточникаОпределяетсяВручную()

// Функция определяет сопоставленные на данный момент аналитики консолидации и внешней информационной базы,
// определяет идентичные по названию аналитики и пытается их сопоставить.
// Параметры:
//  СводнаяТаблицаПоказателей - ТаблицаЗначений, Ссылка на ТаблицуСоответствий, в которой хранятся текущие сопоставления.
//                              Если Неопределено, таблица создается заново, иначе используются существующие данные.
//  Общий          - Булево, определяет, будет ли обновляться таблица для всех аналитик(Истина) или только для конкретного счета(Ложь).
//  Дебетовый      - Булево, определяет, аналитику какого счета обновлять. Используется, только если параметр Общий = Ложь.
Функция СформироватьТаблицуСоответствияВИБ() Экспорт
		
	Если ЗначениеИсточникаОпределяетсяВручную() Тогда
		
		НоваяСтрока=ТаблицаСоответствияБД.Добавить();
		НоваяСтрока.АналитикаКонсолидации="Значение";
		НоваяСтрока.ПсевдонимКонсолидации="Значение";
		
		МассивЗначений=мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("ТипМетаДанных","Простой"));
		
		Если ЗначениеЗаполнено(ПотребительРасчета) И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ТипЗначения",ПотребительРасчета) Тогда
			
			ОжидаемыйТип=ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(ПотребительРасчета.ТипЗначения).Типы()[0];
			
		Иначе
			
			ОжидаемыйТип=Тип("Число");
			
		КонецЕсли;
		
		Для Каждого СтрЗначение ИЗ МассивЗначений Цикл
			
			Если СтрЗначение.ТипЗначения[0].Значение=ОжидаемыйТип Тогда
				
				НоваяСтрока.ПолеБД         	= СтрЗначение.ПолеБД;
				НоваяСтрока.ПсевдонимБД    	= СтрЗначение.НаименованиеБД;
				НоваяСтрока.ТипМетаДанных  	= СтрЗначение.ТипМетаДанных;			
				НоваяСтрока.Измерение      	= Ложь;
				НоваяСтрока.Дебетовый      	= Ложь;
				НоваяСтрока.Сопоставлено  	= Истина;
				НоваяСтрока.ПолеЗапроса     = СтрЗначение.ПолеЗапроса;
				НоваяСтрока.СпособЗаполнения= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
				
				ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(ОжидаемыйТип);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим текущие настройки соответствия объектов
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТабНастройкиСоответствия.ИмяОбъектаМетаданных,
	             |	ТабНастройкиСоответствия.ТипОбъектаКонсолидации,
	             |	ТабНастройкиСоответствия.АналитикаОтчета,
	             |	ТабНастройкиСоответствия.ВидАналитики
	             |ПОМЕСТИТЬ ТабНастройкиСоответствия
	             |ИЗ
	             |	&ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТабНастройкиСоответствия.ИмяОбъектаМетаданных,
	             |	ТабНастройкиСоответствия.ТипОбъектаКонсолидации,
	             |	ТабНастройкиСоответствия.АналитикаОтчета,
	             |	СоответствиеВнешнимИБ.Ссылка КАК НастройкаСоответствия,
	             |	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК ИмяОбъектаВнешнейИБ,
	             |	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ
	             |ИЗ
	             |	ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	             |		ПО (ТабНастройкиСоответствия.ИмяОбъектаМетаданных = СоответствиеВнешнимИБ.ИмяОбъектаМетаданных
	             |					И ТабНастройкиСоответствия.ТипОбъектаКонсолидации = СоответствиеВнешнимИБ.ТипОбъектаКонсолидации
	             |				ИЛИ ТабНастройкиСоответствия.ВидАналитики = СоответствиеВнешнимИБ.ИмяОбъектаМетаданных)
	             |ГДЕ
	             |	СоответствиеВнешнимИБ.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",ТипБД);
	Запрос.УстановитьПараметр("ТабНастройкиСоответствия",мТаблицаВозможныхПолей);
	
	Выгрузка = Запрос.Выполнить().Выбрать();
	
	Пока Выгрузка.Следующий() Цикл
		
		ВозможныеОбъекты=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ИмяОбъектаМетаДанных",Выгрузка.ИмяОбъектаМетаДанных));
		
		Если ВозможныеОбъекты.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого ОбъектКонсолидации ИЗ ВозможныеОбъекты Цикл
			
			СтрокаТаблицы=Неопределено;
			
			ВозможныеСтроки      = ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаКонсолидации,АналитикаОтчета",ОбъектКонсолидации.Поле, ОбъектКонсолидации.АналитикаОтчета));
			
			Если ВозможныеСтроки.Количество()>0 Тогда
				
				СтрокаТаблицы=ВозможныеСтроки[0];
				
			КонецЕсли;
			
			Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
				
				Если Выгрузка.ОписаниеОбъектаВИБ=ТаблицаADO Тогда
					
					Элемент=мТаблицаПоказателейБД.СкопироватьКолонки().Добавить();
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				ОбъектыВИБ         = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("СправочникБД", Выгрузка.ИмяОбъектаВнешнейИБ));
				
				Если ОбъектыВИБ.Количество()=0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Элемент=Неопределено;
				
				Для Каждого ТекЭлемент ИЗ ОбъектыВИБ Цикл
					
					Если (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
						ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
						ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
						ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
						ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
						ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
						ИЛИ ТекЭлемент.Измерение=ОбъектКонсолидации.АналитикаОтчета)		
						И (ТекЭлемент.Балансовый ИЛИ (НЕ ОбъектКонсолидации.АналитикаОтчета))  Тогда
						
						Элемент=ТекЭлемент;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Элемент=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы=Неопределено Тогда
				
				СтрокаТаблицы                               = ТаблицаСоответствияБД.Добавить();
				СтрокаТаблицы.АналитикаКонсолидации         = ОбъектКонсолидации.Поле;
				СтрокаТаблицы.ПсевдонимКонсолидации         = ОбъектКонсолидации.Синоним;
				СтрокаТаблицы.ПолеБД	               		= Элемент.ПолеБД;
				СтрокаТаблицы.ПсевдонимБД                  	= Элемент.НаименованиеБД;
				СтрокаТаблицы.СправочникБД                 	= Элемент.СправочникБД;
				СтрокаТаблицы.ТипМетаДанных              	= Элемент.ТипМетаДанных;
				СтрокаТаблицы.СправочникКонсолидации        = СтрЗаменить(ОбъектКонсолидации.ТаблицаАналитики,"Справочник.","");			
				СтрокаТаблицы.Измерение                     = Элемент.Измерение;
				СтрокаТаблицы.Дебетовый                     = Элемент.Дебетовый;
				СтрокаТаблицы.Сопоставлено                  = Истина;
				СтрокаТаблицы.АналитикаОтчета               = ОбъектКонсолидации.АналитикаОтчета;
				
				Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
					СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
				КонецЕсли;
				
				СтрокаТаблицы.ВидАналитики                  = ОбъектКонсолидации.ВидАналитики;
				СтрокаТаблицы.ТаблицаАналитики              = ОбъектКонсолидации.ТаблицаАналитики;
				СтрокаТаблицы.НастройкаСоответствия			= Выгрузка.НастройкаСоответствия;
				СтрокаТаблицы.ПолеЗапроса                   = Элемент.ПолеЗапроса;
				
			Иначе
				
				Если ПустаяСтрока(СтрокаТаблицы.ПолеБД) Тогда
					
					СтрокаТаблицы.ПолеБД	            	= Элемент.ПолеБД;
					СтрокаТаблицы.ПсевдонимБД               = Элемент.НаименованиеБД;
					СтрокаТаблицы.СправочникБД              = Элемент.СправочникБД;
					СтрокаТаблицы.ТипМетаДанных             = Элемент.ТипМетаДанных;
					СтрокаТаблицы.Измерение                 = Элемент.Измерение;
					СтрокаТаблицы.Дебетовый                 = Элемент.Дебетовый;
					СтрокаТаблицы.Сопоставлено              = Истина;
					
					Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
						СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					КонецЕсли;
					
					СтрокаТаблицы.НастройкаСоответствия		= Выгрузка.НастройкаСоответствия;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Поле Из мТаблицаВозможныхПолей Цикл
		
		Если ТаблицаСоответствияБД.Найти(Поле.Поле, "АналитикаКонсолидации")=Неопределено Тогда
			
			СтрокаТаблицы                       = ТаблицаСоответствияБД.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации = Поле.Поле;
			СтрокаТаблицы.ПсевдонимКонсолидации = Поле.Синоним;
			
			СтрокаТаблицы.СправочникКонсолидации= Поле.ИмяОбъектаМетаданных;
			СтрокаТаблицы.ТипМетаДанных			= Поле.ТипМетаДанных;
			
			Если Поле.ТипМетаДанных="Простой" Тогда
				
				СтрокаИсточник=мТаблицаПоказателейБД.Найти(Поле.Поле,"ПолеБД");
				
				Если ВозможнаУстановкаСоответствия(Поле,СтрокаИсточник) Тогда
					
					СтрокаТаблицы.СправочникБД              = СтрокаИсточник.СправочникБД;
					СтрокаТаблицы.ПолеБД					= СтрокаИсточник.ПолеБД;
					СтрокаТаблицы.ПсевдонимБД               = СтрокаИсточник.НаименованиеБД;
					СтрокаТаблицы.Измерение                 = СтрокаИсточник.Измерение;
					СтрокаТаблицы.Дебетовый                 = СтрокаИсточник.Дебетовый;
					СтрокаТаблицы.СпособЗаполнения			= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					СтрокаТаблицы.Сопоставлено              = Истина;
					
				Иначе
					
					СтрокаТаблицы.Сопоставлено          = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы.АналитикаОтчета       = Поле.АналитикаОтчета;
			СтрокаТаблицы.ВидАналитики          = Поле.ВидАналитики;
			СтрокаТаблицы.ТаблицаАналитики      = Поле.ТаблицаАналитики;
			
			Если Поле.Поле="НомерДляПоиска"
				ИЛИ Поле.Поле="ДатаДляПоиска"
				ИЛИ Поле.Поле="КодДляПоиска"
				ИЛИ Поле.Поле="НаименованиеДляПоиска" Тогда
				
				СтрокаТаблицы.НомерПоля=1;
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЦикла;
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
		
		Если мТаблицаПоказателейБД.Количество()>1 Тогда
			
			Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
				
				ЗапросСинхронизация=Новый Запрос;
				ЗапросСинхронизация.Текст="ВЫБРАТЬ
				|	ТаблицаВИБ.НаименованиеБД,
				|	ТаблицаВИБ.СправочникБД,
				|	ТаблицаВИБ.ТипМетаДанных,
				|	ТаблицаВИБ.ПолеЗапроса,
				|	ТаблицаВИБ.ПолеБД
				|ПОМЕСТИТЬ ТекТаблицаВИБ
				|ИЗ
				|	&ТаблицаВИБ КАК ТаблицаВИБ
				|ГДЕ
				|	ТаблицаВИБ.Измерение = ИСТИНА
				|	И (НЕ ТаблицаВИБ.ТипМетаДанных = """")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТекТаблицаВИБ.НаименованиеБД,
				|	ТекТаблицаВИБ.СправочникБД,
				|	ТекТаблицаВИБ.ТипМетаДанных,
				|	ТекТаблицаВИБ.ПолеЗапроса,
				|	ТекТаблицаВИБ.ПолеБД,
				|	НастройкиСоответствия.Ссылка КАК НастройкаСоответствия
				|ИЗ
				|	ТекТаблицаВИБ КАК ТекТаблицаВИБ
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			СоответствиеВнешнимИБ.Ссылка КАК Ссылка,
				|			СоответствиеВнешнимИБ.ТипОбъектаВИБ КАК ТипМетаДанных,
				|			СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК СправочникБД
				|		ИЗ
				|			Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
				|		ГДЕ
				|			СоответствиеВнешнимИБ.Владелец = &ТипБД) КАК НастройкиСоответствия
				|		ПО ТекТаблицаВИБ.ТипМетаДанных = НастройкиСоответствия.ТипМетаДанных
				|			И ТекТаблицаВИБ.СправочникБД = НастройкиСоответствия.СправочникБД";
				
				ЗапросСинхронизация.УстановитьПараметр("ТипБД",ТипБД);
				ЗапросСинхронизация.УстановитьПараметр("ТаблицаВИБ",мТаблицаПоказателейБД);
				
				ПоляЗапроса=ЗапросСинхронизация.Выполнить().Выбрать();
				
				Пока ПоляЗапроса.Следующий() Цикл
					
					Если НЕ ТаблицаСоответствияБД.Найти(ПоляЗапроса.ПолеБД,"ПолеБД")=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицы                               = ТаблицаСоответствияБД.Добавить();
					СтрокаТаблицы.ПолеБД                  		= ПоляЗапроса.ПолеБД;
					СтрокаТаблицы.ПсевдонимБД                  	= ПоляЗапроса.НаименованиеБД;
					СтрокаТаблицы.СправочникБД                 	= ПоляЗапроса.СправочникБД;
					СтрокаТаблицы.ТипМетаДанных              	= ПоляЗапроса.ТипМетаДанных;			
					СтрокаТаблицы.Измерение                     = Истина;
					СтрокаТаблицы.Дебетовый                     = Ложь;
					СтрокаТаблицы.Сопоставлено                  = Истина;
					СтрокаТаблицы.АналитикаОтчета               = Ложь;
					
					Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
						СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					КонецЕсли;
					
					СтрокаТаблицы.ПолеЗапроса                   = ПоляЗапроса.ПолеЗапроса;
					
					Если ЗначениеЗаполнено(ПоляЗапроса.НастройкаСоответствия) ИЛИ ПоляЗапроса.ТипМетаДанных="Простой" Тогда 
						СтрокаТаблицы.НастройкаСоответствия			= ПоляЗапроса.НастройкаСоответствия;
						СтрокаТаблицы.Сопоставлено=Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы = ТаблицаСоответствияБД.Добавить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДляТрансляции() Тогда
		
		ЗаполнитьСоответствияИзмеренийПоУмолчанию(ТаблицаСоответствияБД);
		
	КонецЕсли;
	
	ТаблицаСоответствияБД.Сортировать("АналитикаКонсолидации Возр");
	
	Возврат ТаблицаСоответствияБД;
	
КонецФункции

// Функция определяет сопоставленные на данный момент аналитики консолидации и внешней информационной базы,
// определяет идентичные по названию аналитики и пытается их сопоставить.
// Параметры:
//  СводнаяТаблицаПоказателей - ТаблицаЗначений, Ссылка на ТаблицуСоответствий, в которой хранятся текущие сопоставления.
//                              Если Неопределено, таблица создается заново, иначе используются существующие данные.
//  Общий          - Булево, определяет, будет ли обновляться таблица для всех аналитик(Истина) или только для конкретного счета(Ложь).
//  Дебетовый      - Булево, определяет, аналитику какого счета обновлять. Используется, только если параметр Общий = Ложь.
Функция СформироватьТаблицуСоответствияДляЭкспорта() Экспорт
		
	Если ЗначениеИсточникаОпределяетсяВручную() Тогда
		
		НоваяСтрока=ТаблицаСоответствияБД.Добавить();
		НоваяСтрока.АналитикаКонсолидации="Значение";
		НоваяСтрока.ПсевдонимКонсолидации="Значение";
		
		МассивЗначений=мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("ТипМетаДанных","Простой"));
		
		Если ЗначениеЗаполнено(ПотребительРасчета) И ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ТипЗначения",ПотребительРасчета) Тогда
			
			ОжидаемыйТип=ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(ПотребительРасчета.ТипЗначения).Типы()[0];
			
		Иначе
			
			ОжидаемыйТип=Тип("Число");
			
		КонецЕсли;
		
		Для Каждого СтрЗначение ИЗ МассивЗначений Цикл
			
			Если СтрЗначение.ТипЗначения[0].Значение=ОжидаемыйТип Тогда
				
				НоваяСтрока.ПолеБД         	= СтрЗначение.ПолеБД;
				НоваяСтрока.ПсевдонимБД    	= СтрЗначение.НаименованиеБД;
				НоваяСтрока.ТипМетаДанных  	= СтрЗначение.ТипМетаДанных;			
				НоваяСтрока.Измерение      	= Ложь;
				НоваяСтрока.Дебетовый      	= Ложь;
				НоваяСтрока.Сопоставлено  	= Истина;
				НоваяСтрока.ПолеЗапроса     = СтрЗначение.ПолеЗапроса;
				НоваяСтрока.СпособЗаполнения= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
				
				ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(ОжидаемыйТип);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим текущие настройки соответствия объектов
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабНастройкиСоответствия.ИмяОбъектаМетаданных,
	|	ТабНастройкиСоответствия.ТипОбъектаКонсолидации,
	|	ТабНастройкиСоответствия.АналитикаОтчета,
	|	ТабНастройкиСоответствия.ВидАналитики
	|ПОМЕСТИТЬ ТабНастройкиСоответствия
	|ИЗ
	|	&ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНастройкиСоответствия.ИмяОбъектаМетаданных,
	|	ТабНастройкиСоответствия.ТипОбъектаКонсолидации,
	|	ТабНастройкиСоответствия.АналитикаОтчета,
	|	СоответствиеВнешнимИБ.Ссылка КАК НастройкаСоответствия,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК ИмяОбъектаВнешнейИБ,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ
	|ИЗ
	|	ТабНастройкиСоответствия КАК ТабНастройкиСоответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО (ТабНастройкиСоответствия.ИмяОбъектаМетаданных = СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование
	|					И ТабНастройкиСоответствия.ТипОбъектаКонсолидации = СоответствиеВнешнимИБ.ТипОбъектаВИБ
	|				ИЛИ ТабНастройкиСоответствия.ВидАналитики = СоответствиеВнешнимИБ.ИмяОбъектаМетаданных)
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",ТипБДПриемник);
	Запрос.УстановитьПараметр("ТабНастройкиСоответствия",мТаблицаВозможныхПолей);
	
	Выгрузка = Запрос.Выполнить().Выбрать();
	
	Пока Выгрузка.Следующий() Цикл
		
		ВозможныеОбъекты=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ИмяОбъектаМетаДанных",Выгрузка.ИмяОбъектаВнешнейИБ));
		
		Если ВозможныеОбъекты.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого ОбъектКонсолидации ИЗ ВозможныеОбъекты Цикл
			
			СтрокаТаблицы=Неопределено;
			
			ВозможныеСтроки      = ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаКонсолидации,АналитикаОтчета",ОбъектКонсолидации.Поле, ОбъектКонсолидации.АналитикаОтчета));
			
			Если ВозможныеСтроки.Количество()>0 Тогда
				
				СтрокаТаблицы=ВозможныеСтроки[0];
				
			КонецЕсли;
							
				ОбъектыВИБ = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("СправочникБД", Выгрузка.ИмяОбъектаМетаданных));
				
				Если ОбъектыВИБ.Количество()=0 Тогда
					
					Продолжить;
					
				Иначе
					
					Элемент=ОбъектыВИБ[0];
					
				КонецЕсли;
							
				Если Элемент=Неопределено Тогда
					Продолжить;
				КонецЕсли;
							
			Если СтрокаТаблицы=Неопределено Тогда
				
				СтрокаТаблицы                               = ТаблицаСоответствияБД.Добавить();
				СтрокаТаблицы.АналитикаКонсолидации         = ОбъектКонсолидации.Поле;
				СтрокаТаблицы.ПсевдонимКонсолидации         = ОбъектКонсолидации.Синоним;
				СтрокаТаблицы.ПолеБД	               		= Элемент.ПолеБД;
				СтрокаТаблицы.ПсевдонимБД                  	= Элемент.НаименованиеБД;
				СтрокаТаблицы.СправочникБД                 	= Элемент.СправочникБД;
				СтрокаТаблицы.ТипМетаДанных              	= Элемент.ТипМетаДанных;
				СтрокаТаблицы.СправочникКонсолидации        = СтрЗаменить(ОбъектКонсолидации.ТаблицаАналитики,"Справочник.","");			
				СтрокаТаблицы.Измерение                     = Элемент.Измерение;
				СтрокаТаблицы.Дебетовый                     = Элемент.Дебетовый;
				СтрокаТаблицы.Сопоставлено                  = Истина;
				СтрокаТаблицы.АналитикаОтчета               = ОбъектКонсолидации.АналитикаОтчета;
				СтрокаТаблицы.РеквизитОбъекта				= ОбъектКонсолидации.РеквизитОбъекта;
				
				Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
					СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
				КонецЕсли;
				
				СтрокаТаблицы.ВидАналитики                  = ОбъектКонсолидации.ВидАналитики;
				СтрокаТаблицы.НастройкаСоответствия			= Выгрузка.НастройкаСоответствия;
				СтрокаТаблицы.ПолеЗапроса                   = Элемент.ПолеЗапроса;
				
			Иначе
				
				Если ПустаяСтрока(СтрокаТаблицы.ПолеБД) Тогда
					
					СтрокаТаблицы.ПолеБД	            	= Элемент.ПолеБД;
					СтрокаТаблицы.ПсевдонимБД               = Элемент.НаименованиеБД;
					СтрокаТаблицы.СправочникБД              = Элемент.СправочникБД;
					СтрокаТаблицы.ТипМетаДанных             = Элемент.ТипМетаДанных;
					СтрокаТаблицы.Измерение                 = Элемент.Измерение;
					СтрокаТаблицы.Дебетовый                 = Элемент.Дебетовый;
					СтрокаТаблицы.Сопоставлено              = Истина;
					
					Если НЕ СтрокаТаблицы.АналитикаОтчета Тогда
						СтрокаТаблицы.СпособЗаполнения	= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					КонецЕсли;
					
					СтрокаТаблицы.НастройкаСоответствия		= Выгрузка.НастройкаСоответствия;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Поле Из мТаблицаВозможныхПолей Цикл
		
		Если ТаблицаСоответствияБД.Найти(Поле.Поле, "АналитикаКонсолидации")=Неопределено Тогда
			
			СтрокаТаблицы                       = ТаблицаСоответствияБД.Добавить();
			СтрокаТаблицы.АналитикаКонсолидации = Поле.Поле;
			СтрокаТаблицы.ПсевдонимКонсолидации = Поле.Синоним;
			СтрокаТаблицы.РеквизитОбъекта		= Поле.РеквизитОбъекта;
			
			СтрокаТаблицы.СправочникКонсолидации= Поле.ИмяОбъектаМетаданных;
			СтрокаТаблицы.ТипМетаДанных			= Поле.ТипМетаДанных;
			
			Если Поле.ТипМетаДанных="Простой" Тогда
				
				СтрокаИсточник=мТаблицаПоказателейБД.Найти(Поле.Поле,"ПолеБД");
				
				Если ВозможнаУстановкаСоответствия(Поле,СтрокаИсточник) Тогда
					
					СтрокаТаблицы.СправочникБД              = СтрокаИсточник.СправочникБД;
					СтрокаТаблицы.ПолеБД					= СтрокаИсточник.ПолеБД;
					СтрокаТаблицы.ПсевдонимБД               = СтрокаИсточник.НаименованиеБД;
					СтрокаТаблицы.Измерение                 = СтрокаИсточник.Измерение;
					СтрокаТаблицы.Дебетовый                 = СтрокаИсточник.Дебетовый;
					СтрокаТаблицы.СпособЗаполнения			= Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
					СтрокаТаблицы.Сопоставлено              = Истина;
					
				Иначе
					
					СтрокаТаблицы.Сопоставлено          = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы.АналитикаОтчета       = Поле.АналитикаОтчета;
			СтрокаТаблицы.ВидАналитики          = Поле.ВидАналитики;
			
			Если Поле.Поле="НомерДляПоиска"
				ИЛИ Поле.Поле="ДатаДляПоиска"
				ИЛИ Поле.Поле="КодДляПоиска"
				ИЛИ Поле.Поле="НаименованиеДляПоиска" Тогда
				
				СтрокаТаблицы.НомерПоля=1;
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЦикла;
		
	ТаблицаСоответствияБД.Сортировать("АналитикаКонсолидации Возр");
	
	Возврат ТаблицаСоответствияБД;
	
КонецФункции

Функция ВозможнаУстановкаСоответствия(СтрКонсолидации,СтрРегистр)
	
	Если СтрКонсолидации=Неопределено ИЛИ СтрРегистр=Неопределено Тогда
		
		Возврат Ложь;
	
	ИначеЕсли ЗначениеЗаполнено(СтрКонсолидации.ВидАналитики) И СтрКонсолидации.ВидАналитики=СтрРегистр.ВидАналитики Тогда
		
		Возврат Истина;
		
	Иначе
		
		Для Каждого СтрТип ИЗ СтрКонсолидации.ТипЗначения Цикл
			
			Если НЕ СтрРегистр.ТипЗначения.НайтиПоЗначению(СтрТип.Значение)=Неопределено Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
			
КонецФункции // ВозможнаУстановкаСоответствия()

Функция ПодготовитьТаблицуСоответствия()
	
	ТаблицаСоответствияБД = Новый ТаблицаЗначений;
	ТаблицаСоответствияБД.Колонки.Добавить("АналитикаКонсолидации",			мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("ПолеБД", 						мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("НомерПоля", 					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(4));
	ТаблицаСоответствияБД.Колонки.Добавить("ПсевдонимКонсолидации", 		мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("ПсевдонимБД", 					мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("СправочникБД", 					мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("ОписаниеОбъектаВИБ", 			);
	ТаблицаСоответствияБД.Колонки.Добавить("ТипМетаДанных", 				мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("СправочникКонсолидации", 		мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("РеквизитОбъекта", 				мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("ВозможенОтборИзКонтекста",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТаблицаСоответствияБД.Колонки.Добавить("СпособЗаполнения", 				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыЗаполненияПолейИсточника"));
	ТаблицаСоответствияБД.Колонки.Добавить("ФиксированноеЗначение",);
	ТаблицаСоответствияБД.Колонки.Добавить("НастройкаСоответствия", 		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	
	ТаблицаСоответствияБД.Колонки.Добавить("Измерение",                     мОписаниеТиповБулево);
	ТаблицаСоответствияБД.Колонки.Добавить("Дебетовый",                     мОписаниеТиповБулево);
	ТаблицаСоответствияБД.Колонки.Добавить("Сопоставлено",                  мОписаниеТиповБулево);
	ТаблицаСоответствияБД.Колонки.Добавить("АналитикаОтчета",               мОписаниеТиповБулево);
	ТаблицаСоответствияБД.Колонки.Добавить("ПолеЗапроса",               	мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("ТаблицаАналитики",              мОписаниеТиповСтрока);
	ТаблицаСоответствияБД.Колонки.Добавить("ВидАналитики", 					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	ТаблицаСоответствияБД.Колонки.Добавить("Порядок", 						ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	
	
КонецФункции // ИнициализироватьТаблицуСоответствия()

Процедура ПодготовитьДеревоПолейБД() Экспорт
	
	ДеревоПолейБД = Новый ДеревоЗначений;
	ДеревоПолейБД.Колонки.Добавить("НаименованиеБД"			, мОписаниеТиповСтрока);
	ДеревоПолейБД.Колонки.Добавить("ПолеБД"					, мОписаниеТиповСтрока);
	ДеревоПолейБД.Колонки.Добавить("СправочникБД" 			, мОписаниеТиповСтрока);
	ДеревоПолейБД.Колонки.Добавить("ТипМетаДанных" 			, мОписаниеТиповСтрока);
	ДеревоПолейБД.Колонки.Добавить("ТаблицаADO" 			, мОписаниеТиповСтрока);
	ДеревоПолейБД.Колонки.Добавить("ИспользуетсяВСопоставлении", мОписаниеТиповБулево);
	ДеревоПолейБД.Колонки.Добавить("ТипЗначения"			, мОписаниеТиповСписокЗначений);
	ДеревоПолейБД.Колонки.Добавить("ТипДанныхПоля"			, мОписаниеТиповСписокЗначений);
	ДеревоПолейБД.Колонки.Добавить("ВидАналитики"			, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	ДеревоПолейБД.Колонки.Добавить("ПолеЗапроса"			,мОписаниеТиповСтрока);
	ДеревоПолейБД.Колонки.Добавить("Измерение"				,мОписаниеТиповБулево);
	ДеревоПолейБД.Колонки.Добавить("Картинка"				,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));

		
КонецПроцедуры // ПодготовитьДеревоУстановкиСоответствийИОтборов()

Процедура ПодготовитьДеревоПараметровОтбораБД() Экспорт
	
	ДеревоПараметровОтбораБД = Новый ДеревоЗначений;
	ДеревоПараметровОтбораБД.Колонки.Добавить("НаименованиеБД"			, мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ПолеБД"					, мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("СправочникБД" 			, мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТипМетаДанных" 			, мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТипЗначения"				, мОписаниеТиповСписокЗначений);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТипДанныхПоля"			, мОписаниеТиповСписокЗначений);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТаблицаADO" 				, мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ВидАналитики"			, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	ДеревоПараметровОтбораБД.Колонки.Добавить("СпособВычисленияПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыВычисленияПараметровОперандов"));
	ДеревоПараметровОтбораБД.Колонки.Добавить("УточнениеСпособаОпределения");
	ДеревоПараметровОтбораБД.Колонки.Добавить("ЗначениеДляПроверки");
	ДеревоПараметровОтбораБД.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТекстМодуля"			,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТаблицаАналитикиВИБ"	,мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ТипРасчета"			,мОписаниеТиповСтрока);
	ДеревоПараметровОтбораБД.Колонки.Добавить("ИдентификаторСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(9));
	ДеревоПараметровОтбораБД.Колонки.Добавить("ИдентификаторРодителя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(9));
	ДеревоПараметровОтбораБД.Колонки.Добавить("ИмяПараметра",мОписаниеТиповСтрока);
		
КонецПроцедуры // ПодготовитьДеревоУстановкиСоответствийИОтборов()

Функция ПолучитьРодителяДляСопоставления(СводнаяТаблицаПоказателей,АналитикаОтчета)
	
	Если АналитикаОтчета Тогда

		ТекстРеквизита=?(СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляТрансформационныхКорректировок,"Реквизиты корректировки","Реквизиты отчета");
		
		СтрокаДобавления=СводнаяТаблицаПоказателей.Строки.Найти(ТекстРеквизита,"ПсевдонимКонсолидации");
		
		Если СтрокаДобавления=Неопределено Тогда
			
			СтрокаДобавления=СводнаяТаблицаПоказателей.Строки.Добавить();
			СтрокаДобавления.ПсевдонимКонсолидации=ТекстРеквизита;
			
		КонецЕсли;
		
	Иначе
		
		Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
			
			СтрокаДобавления=СводнаяТаблицаПоказателей.Строки.Найти(Нстр("ru = 'Поля источника данных'"),"ПсевдонимКонсолидации");
			
			Если СтрокаДобавления=Неопределено Тогда
				
				СтрокаДобавления=СводнаяТаблицаПоказателей.Строки.Добавить();
				СтрокаДобавления.ПсевдонимКонсолидации=Нстр("ru = 'Поля источника данных'");
				
			КонецЕсли;
						
		Иначе	
			
			ТекстАналитики=?(СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляТрансформационныхКорректировок,"АналитикаПроводки","Аналитика показателя");
			
			СтрокаДобавления=СводнаяТаблицаПоказателей.Найти(ТекстАналитики,"ПсевдонимКонсолидации");
			
			Если СтрокаДобавления=Неопределено Тогда
				
				СтрокаДобавления=СводнаяТаблицаПоказателей.Добавить();
				СтрокаДобавления.ПсевдонимКонсолидации=ТекстАналитики;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтрокаДобавления;
	
КонецФункции // ПолучитьРодителяДляСопоставления() 

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПодготовитьТаблицуИспользованияПолейВнутр() Экспорт
	
	ПравилаИспользованияПолейЗапроса.Очистить();
	Оборот=Ложь;
	
	// Определим тип результирующего значения операнда
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки Тогда
		
		ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		ТипЗначения=ПоказательОтбор.ТипЗначения;
		
		Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
			ИЛИ ПотребительРасчета.Метаданные().Имя="ШаблоныУниверсальныхПроцессов" Тогда
			
			СтрокаСоответствия = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    		= СокрЛП(ПоказательОтбор.Код);
			СтрокаСоответствия.Синоним 		= СтрШаблон(Нстр("ru = 'Показатель: %1'"), ПоказательОтбор.Наименование);
			СтрокаСоответствия.КодАналитики	= "Значение";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		Если ОсновнаяТаблицаРегистра Тогда
			
			СтрокаСоответствия = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    = "Значение";
			СтрокаСоответствия.Синоним = "Значение";
			СтрокаСоответствия.КодАналитики="Значение";
			Оборот = Ложь;
			
		Иначе
			
			Поле = РесурсРегистра + ВидИтога;
			
			СтрокаСоответствия = ПравилаИспользованияПолейЗапроса.Добавить();
			СтрокаСоответствия.Поле    = Поле;
			СтрокаСоответствия.Синоним = НСтр("ru = 'Значение'");
			СтрокаСоответствия.КодАналитики="Значение";
			Оборот = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		Поле = РесурсРегистра;
		
		СтрокаСоответствия = ПравилаИспользованияПолейЗапроса.Добавить();
		СтрокаСоответствия.Поле    = Поле;
		СтрокаСоответствия.Синоним = НСтр("ru = 'Значение'");
		СтрокаСоответствия.КодАналитики="Значение";
		Оборот = Ложь;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		Если (ТрансляцияДебет ИЛИ ТрансляцияКредит ИЛИ ИтогЕстьОборотПоСчетам()) И ЗначениеЗаполнено(РесурсРегистра) Тогда
			
			ДанныеРесурса=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");
			
			Если ДанныеРесурса.Балансовый Тогда
				
				ИмяРесурса=РесурсРегистра;
				
			Иначе
				
				ИмяРесурса=РесурсРегистра+?(ТрансляцияДебет,"Дт","Кт");
				
			КонецЕсли;
			
		ИначеЕсли НЕ ВидИтога="Оборот" Тогда
			
			КоррСчетТекущейИБ="";
			
			Если ДтКт="СВ" Тогда
				
				ИмяРесурса=РесурсРегистра+СтрЗаменить(ВидИтога,"#","");
				
			Иначе
				
				ИмяРесурса=РесурсРегистра+СтрЗаменить(ВидИтога,"#",ДтКт);
				
			КонецЕсли;
			
		Иначе
			
			ТекРесурс=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");
			
			Если ТекРесурс.Балансовый Тогда
				ИмяРесурса=РесурсРегистра+"Оборот";
			Иначе
				ИмяРесурса=РесурсРегистра+"Оборот"+ДтКт;
			КонецЕсли;			
						
		КонецЕсли;
		
		Оборот=(ВидИтога="Оборот" ИЛИ ВидИтога="Оборот#");
		
		СтрокаСоответствия         = ПравилаИспользованияПолейЗапроса.Добавить();
		СтрокаСоответствия.Поле    = ИмяРесурса;
		СтрокаСоответствия.Синоним = "Значение";
		СтрокаСоответствия.КодАналитики="Значение";
				
	КонецЕсли;
	
	МассивСопоставлено=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Ложь));
	
	Для Каждого СтрокаСоответствия Из МассивСопоставлено Цикл
			
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаСоответствия) Тогда
			
			СтрокаТаблицы= ПравилаИспользованияПолейЗапроса.Добавить();
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				СтрокаТаблицы.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			СтрокаТаблицы.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
			СтрокаТаблицы.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
			СтрокаТаблицы.НастройкаСоответствия=СтрокаСоответствия.НастройкаСоответствия;
			СтрокаТаблицы.РеквизитОбъекта=СтрокаСоответствия.РеквизитОбъекта;
			
			Если СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				
				СтрокаТаблицы.Поле=СтрокаСоответствия.ПолеБД;
				СтрокаТаблицы.Синоним=СтрокаСоответствия.ПсевдонимБД;
				
			Иначе
				
				СтрокаТаблицы.ФиксированноеЗначение=СтрокаСоответствия.ФиксированноеЗначение;
				
			КонецЕсли;
					
			Продолжить;
			
		КонецЕсли;
				
		Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			ЭлементЗначения = НайтиСтрокуДанныхБДПоПолю(СтрокаСоответствия.ПолеБД);
			
			Если ЭлементЗначения = Неопределено ИЛИ (ЭлементЗначения.ТолькоОбороты И НЕ Оборот) Тогда
				
				Продолжить; // Раскрытие по оборотным субконто при получении остатка не используется.
				
			КонецЕсли;
			
			Если НЕ ПроверитьВедениеУчетаПоРесурсуБД(ЭлементЗначения) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока         = ПравилаИспользованияПолейЗапроса.Добавить();
			НоваяСтрока.Поле    = ДобавитьКСубконтоПризнакДтКт(ЭлементЗначения);
			
			НоваяСтрока.АналитикаОперанда=СтрокаСоответствия.ВидАналитики;
			
			Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
				НоваяСтрока.Синоним=СтрЗаменить(СтрокаСоответствия.ПсевдонимБД,".","");
				НоваяСтрока.КодАналитики=НоваяСтрока.Синоним;
			Иначе		
				НоваяСтрока.Синоним=СтрЗаменить(СтрокаСоответствия.ПолеБД,".","");
			КонецЕсли;
			
			НоваяСтрока.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
			НоваяСтрока.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
			НоваяСтрока.НастройкаСоответствия=СтрокаСоответствия.НастройкаСоответствия;
			НоваяСтрока.РеквизитОбъекта=СтрокаСоответствия.РеквизитОбъекта;
			НоваяСтрока.ТаблицаАналитики=СтрокаСоответствия.ТаблицаАналитики;
			
		Иначе
			
			НоваяСтрока=ПравилаИспользованияПолейЗапроса.Добавить();
			НоваяСтрока.Поле=СтрокаСоответствия.ПолеБД;
			НоваяСтрока.АналитикаОперанда=СтрокаСоответствия.ВидАналитики;
			НоваяСтрока.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
			НоваяСтрока.НастройкаСоответствия=СтрокаСоответствия.НастройкаСоответствия;
			НоваяСтрока.РеквизитОбъекта=СтрокаСоответствия.РеквизитОбъекта;
			НоваяСтрока.ТаблицаАналитики=СтрокаСоответствия.ТаблицаАналитики;
			
			Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
				НоваяСтрока.Синоним=СтрЗаменить(СтрокаСоответствия.ПсевдонимБД,".","");
				НоваяСтрока.КодАналитики=НоваяСтрока.Синоним;
			Иначе		
				НоваяСтрока.Синоним=СтрЗаменить(СтрокаСоответствия.ПолеБД,".","");
				НоваяСтрока.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПринудительноеЗаполнениеАналитик();
	
КонецПроцедуры // ПодготовитьТаблицыДляРегистраТек() 

Процедура ЗаполнитьМассивСохраняемыхПараметров(мТаблицаПоказателейБД_Стар)
	
	МассивПараметровСтар=мТаблицаПоказателейБД_Стар.НайтиСтроки(Новый Структура("Измерение",Ложь));
	
	Для Каждого СтрокаПараметр ИЗ МассивПараметровСтар Цикл
		
		ПараметрНов=мТаблицаПоказателейБД.Найти(СтрокаПараметр.ПолеБД,"ПолеБД");
		
		Если ПараметрНов=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Элемент ИЗ СтрокаПараметр.ТипЗначения Цикл
			
			Если НЕ ПараметрНов.ТипЗначения.НайтиПоЗначению(Элемент.Значение)=Неопределено Тогда
				
				МассивСохраняемыхПараметров.Добавить(СтрокаПараметр.ПолеБД);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМассивСохраняемыхПараметров()

Функция ОбработатьИзменениеТекстаЗапроса(ТекстЗапросаФорма) Экспорт
	
	Если ПустаяСтрока(ТекстЗапросаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мТаблицаПоказателейБД_Стар=мТаблицаПоказателейБД.Скопировать();
	МассивСохраняемыхПараметров=Новый Массив;
	
	Если ВнутренниеДанные() Тогда
		
		ПостроительПроверка=Новый ПостроительЗапроса;
		
		Попытка
			
			ПостроительПроверка.Текст = ТекстЗапросаФорма;
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(),,,СтатусСообщения.Внимание);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстЗапросаМодуля=ПостроительПроверка.Текст;
		ЗаполнитьАналитикуЗапросаТек();
		ЗаполнитьСписокПолейОтбор();
				
	Иначе
		
		ТекСоединениеВИБ            = ОбщегоНазначенияУХ.ПолучитьСоединениеСВИБПоУмолчанию(ТипБД, 1);
		
		Если ТекСоединениеВИБ = Неопределено Тогда
			
			Возврат Ложь;
		
		КонецЕсли;

		ОписаниеЗапроса=РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьСтруктуруОписанияПроизвольногоЗапросаБД(ТекСоединениеВИБ,ТекстЗапросаФорма);
		
		Если ОписаниеЗапроса.Свойство("ОписаниеОшибки") Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеЗапроса.ОписаниеОшибки,,,СтатусСообщения.Внимание);
			Возврат Ложь;
			
		Иначе
			
			ТекстЗапросаМодуля=ТекстЗапросаФорма;
			ЗаполнитьАналитикуЗапросаВИБ(ОписаниеЗапроса);
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗаполнитьМассивСохраняемыхПараметров(мТаблицаПоказателейБД_Стар);
	
	Возврат Истина;
	
КонецФункции // ОбработатьИзменениеТекстаЗапроса()

Процедура ОпределитьРесурсРегистра(НастройкиОперанда)
		
	Если НЕ ЗначениеЗаполнено(РесурсРегистра) Тогда
		
		Если НастройкиОперанда.Свойство("РесурсРегистра") И Не ПустаяСтрока(НастройкиОперанда.РесурсРегистра) Тогда
			
			РесурсРегистра=НастройкиОперанда.РесурсРегистра;
			
		Иначе // Подставим по умолчанию
			
			Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
				
				Если ПустаяСтрока(Ресурс.ПризнакУчета) Тогда
					
					РесурсРегистра=Ресурс.Имя;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры  // ОпределитьРесурсРегистра() 
	

Функция ЗаполнитьПоУпрощенномуПредставлениюДанныеРегистраБухгалтерии(НастройкиОперанда,ФормироватьКод=Истина) Экспорт
	
	СпособПолучения=НастройкиОперанда.СпособПолучения;
	СпособИспользования=НастройкиОперанда.СпособИспользования;
	ТипБД=НастройкиОперанда.ТипБД;
		
	Если НЕ ЗначениеЗаполнено(РегистрБД) Тогда
		
		Если НЕ ЗначениеЗаполнено(НастройкиОперанда.РегистрБД) Тогда
			
			СтрокаШаблона = НСтр("ru = '%1: не удалось определить регистр бухгалтерии для источника.
			|Проверьте настройки правила расчета.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КодУпрощеннойФормулы),,, СтатусСообщения.Информация);
			КонецЕсли;

			Возврат Ложь;
			
		Иначе
			
			ПланСчетовБД=НастройкиОперанда.ПланСчетовБД;
			РегистрБД=НастройкиОперанда.РегистрБД;
			ЗаполнитьПланСчетовБД();
			
			ОпределитьРесурсРегистра(НастройкиОперанда);
			
			ПодготовитьТаблицыСопоставленийИОтборов();
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьПланСчетовБД();
		ОпределитьРесурсРегистра(НастройкиОперанда);
		
	КонецЕсли;
				
	Если НЕ ЗначениеЗаполнено(ПланСчетовБД) Тогда
		
		СтрокаШаблона = НСтр("ru = '%1: не указан план счетов регистра бухгалтерии
		|%1.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, РегистрБД),,, СтатусСообщения.Информация);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ВидИтога=НастройкиОперанда.ВидИтога;
	ДтКт=НастройкиОперанда.ДтКт;
				
	Счет=НастройкиОперанда.Счет;
	ПриИзмененииСчета(Истина);
	
	ЕстьКорреспонденция=Ложь;
	
	Если НастройкиОперанда.ВидИтога = "Оборот" ИЛИ НастройкиОперанда.ВидИтога = "КорДО" Тогда
		
		КоррСчет=НастройкиОперанда.КоррСчет;
		ПриИзмененииСчета(Ложь);
		ЕстьКорреспонденция=Истина;
					
	КонецЕсли;
	
	/// Обработаем сдвиг периодов, если он указан
	
	Если НЕ НастройкиОперанда.СдвигПериодов = 0 Тогда
		
		СтрДатаНачала=ДеревоПараметровОтбораБД.Строки.Найти("ДатаНач","ПолеБД");
		СтрДатаНачала.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом;
		СтрДатаНачала.УточнениеСпособаОпределения=НастройкиОперанда.СдвигПериодов;
		
		СтрДатаОкончания=ДеревоПараметровОтбораБД.Строки.Найти("ДатаКон","ПолеБД");
		СтрДатаОкончания.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом;
		СтрДатаОкончания.УточнениеСпособаОпределения=НастройкиОперанда.СдвигПериодов;
		
	Иначе
		
		СтрДатаНачала=ДеревоПараметровОтбораБД.Строки.Найти("ДатаНач","ПолеБД");
		СтрДатаНачала.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета;
		СтрДатаНачала.УточнениеСпособаОпределения=Неопределено;
		
		СтрДатаОкончания=ДеревоПараметровОтбораБД.Строки.Найти("ДатаКон","ПолеБД");
		СтрДатаОкончания.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета;
		СтрДатаОкончания.УточнениеСпособаОпределения=Неопределено;
		
	КонецЕсли;
	
	// Уберем лишние соответствия, если набор субконто для сопоставления задан явно С1, С2 и т.д.
	
	Если Не ПустаяСтрока(НастройкиОперанда.ТекстАналитик) Тогда
		
		МассивАналитикТекст=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(НастройкиОперанда.ТекстАналитик,",");
		МассивАналитик=Новый Массив;
				
		Для Каждого СтрАналитика ИЗ МассивАналитикТекст Цикл
			
			Если Лев(СокрЛП(СтрАналитика),1)="С" Тогда
				
				СтрАналитика=СтрЗаменить(СтрАналитика,"С",?(ЕстьКорреспонденция,"СубконтоДт","Субконто"));
				МассивАналитик.Добавить(СтрАналитика);
				
				Если мТаблицаПоказателейБД.Найти(СтрАналитика,"ПолеБД")=Неопределено Тогда
					
					СтрокаШаблона = НСтр("ru = 'Для указанного счета не найдено субконто %1'");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитика, "СубконтоДт", НСтр("ru = 'СубконтоДт'"));
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитикаЛокализация, "Субконто", НСтр("ru = 'Субконто'"));
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрАналитикаЛокализация),,, СтатусСообщения.Информация);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ПолеБД,Сопоставлено",СтрАналитика,Истина)).Количество()=0 Тогда
					
					СтрокаШаблона = НСтр("ru = 'Не удалось определить соответствие для %1'");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитика, "СубконтоДт", НСтр("ru = 'СубконтоДт'"));
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитикаЛокализация, "Субконто", НСтр("ru = 'Субконто'"));
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрАналитикаЛокализация),,, СтатусСообщения.Информация);
					КонецЕсли;
										
				КонецЕсли;
				
			ИначеЕсли Лев(СокрЛП(СтрАналитика),2)="КС" Тогда
				
				СтрАналитика=СтрЗаменить(СтрАналитика,"КС","СубконтоКт");
				МассивАналитик.Добавить(СтрАналитика);
				
				Если мТаблицаПоказателейБД.Найти(СтрАналитика,"ПолеБД")=Неопределено Тогда
					
					СтрокаШаблона = НСтр("ru = 'Для указанного корр. счета не найдено субконто %1'");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитика, "СубконтоКт", "Субконто");
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитикаЛокализация, "Субконто", НСтр("ru = 'Субконто'"));
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрАналитикаЛокализация),,, СтатусСообщения.Информация);
					КонецЕсли;
										
				КонецЕсли;
				
				Если ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ПолеБД,Сопоставлено",СтрАналитика,Истина)).Количество()=0 Тогда
					
					СтрокаШаблона = НСтр("ru = 'Не удалось определить соответствие для %1'");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитика, "СубконтоКт", НСтр("ru = 'СубконтоКт'"));
						СтрАналитикаЛокализация = СтрЗаменить(СтрАналитикаЛокализация, "Субконто", НСтр("ru = 'Субконто'"));
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрАналитикаЛокализация),,, СтатусСообщения.Информация);
					КонецЕсли;
										
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивСоответствия=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаОтчета,Сопоставлено",Ложь,Истина));
		
		Для Каждого СтрСоответствия ИЗ МассивСоответствия Цикл
			
			Если СтрНайти(СтрСоответствия.ПолеБД,"Субконто")>0 И МассивАналитик.Найти(СтрСоответствия.ПолеБД)=Неопределено Тогда
				
				СтрСоответствия.ПолеБД                  = Неопределено;
				СтрСоответствия.ПсевдонимБД                  = Неопределено;
				СтрСоответствия.Сопоставлено                 = Ложь;
				СтрСоответствия.СправочникБД                 = "";
				СтрСоответствия.ПолеЗапроса                  = "";
				СтрСоответствия.ТипМетаДанных                = "";
				СтрСоответствия.НастройкаСоответствия		 = "";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ОбновитьКодУпрощеннойФормулы();
	
	Если ФормироватьКод Тогда
		СформироватьКодОперанда(Истина,Ложь);
	КонецЕсли;
	
	Возврат Истина;
				
КонецФункции // ЗаполнитьПоУпрощенномуПредставлениюДанныеРегистраБухгалтерии()

Функция ЗаполнитьПоУпрощенномуПредставлениюДанныеПоказателяОтчета(НастройкиОперанда,ФормироватьКод=Истина) Экспорт
	
	СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета;
	СпособИспользования=НастройкиОперанда.СпособИспользования;
	ВидОтчетаОтбор=НастройкиОперанда.ВидОтчетаОтбор;
	ПоказательОтбор=НастройкиОперанда.ПоказательОтбор;
	
	ПодготовитьТаблицыСопоставленийИОтборов();
			
	/// Обработаем сдвиг периодов, если он указан
	
	Если НЕ НастройкиОперанда.СдвигПериодов = 0 Тогда
		
		СтрДатаНачала=ДеревоПараметровОтбораБД.Строки.Найти("Версия.ПериодОтчета","ПолеБД");
		СтрДатаНачала.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом;
		СтрДатаНачала.УточнениеСпособаОпределения=НастройкиОперанда.СдвигПериодов;
		
	Иначе
		
		СтрДатаНачала=ДеревоПараметровОтбораБД.Строки.Найти("Версия.ПериодОтчета","ПолеБД");
		СтрДатаНачала.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета;
		СтрДатаНачала.УточнениеСпособаОпределения=Неопределено;
					
	КонецЕсли;
	
	// Уберем лишние соответствия, если набор аналитик для сопоставления задан явно А1, А2 и т.д.
	
	Если Не ПустаяСтрока(НастройкиОперанда.ТекстАналитик) Тогда
		
		МассивАналитикТекст=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(НастройкиОперанда.ТекстАналитик,",");
		МассивАналитик=Новый Массив;
		
		Для Каждого СтрАналитика ИЗ МассивАналитикТекст Цикл
			
			СтрАналитика=СтрЗаменить(СтрАналитика,"А","Аналитика");
			МассивАналитик.Добавить(СтрАналитика);
			
			Если мТаблицаПоказателейБД.Найти(СтрАналитика,"ПолеБД")=Неопределено Тогда
				
				СтрокаШаблона = НСтр("ru = 'Для указанного показателя не найдена аналитика %1'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					СтрАналитикаЛокализация = СтрЗаменить(СтрАналитика, "Аналитика", НСтр("ru = 'Аналитика'"));
										
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрАналитикаЛокализация),,, СтатусСообщения.Информация);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ПолеБД,Сопоставлено",СтрАналитика,Истина)).Количество()=0 Тогда
				
				СтрокаШаблона = НСтр("ru = 'Не удалось определить соответствие для %1'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					СтрАналитикаЛокализация = СтрЗаменить(СтрАналитика, "Аналитика", НСтр("ru = 'Аналитика'"));
					
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрАналитикаЛокализация),,, СтатусСообщения.Информация);
				КонецЕсли;
								
			КонецЕсли;
				
		КонецЦикла;
		
		МассивСоответствия=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаОтчета,Сопоставлено",Ложь,Истина));
		
		Для Каждого СтрСоответствия ИЗ МассивСоответствия Цикл
			
			Если СтрНайти(СтрСоответствия.ПолеБД,"Аналитика")>0 И МассивАналитик.Найти(СтрСоответствия.ПолеБД)=Неопределено Тогда
				
				СтрСоответствия.ПолеБД                  = Неопределено;
				СтрСоответствия.ПсевдонимБД                  = Неопределено;
				СтрСоответствия.Сопоставлено                 = Ложь;
				СтрСоответствия.СправочникБД                 = "";
				СтрСоответствия.ПолеЗапроса                  = "";
				СтрСоответствия.ТипМетаДанных                = "";
				СтрСоответствия.НастройкаСоответствия		 = "";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ОбновитьКодУпрощеннойФормулы();
	
	Если ФормироватьКод Тогда
		СформироватьКодОперанда(Истина,Ложь);
	КонецЕсли;

	Возврат Истина;	
	
КонецФункции // ЗаполнитьПоУпрощенномуПредставлениюДанныеПоказателяОтчета() 

Функция ОбработатьКодУпрощеннойФормулы() Экспорт
	
	Если ПустаяСтрока(КодУпрощеннойФормулы) ИЛИ СтрНайти(КодУпрощеннойФормулы,"!")>0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодУпрощеннойФормулы=ВРЕГ(КодУпрощеннойФормулы);
	
	РезультатРазбора=ОбщегоНазначенияУХ.ПолучитьРезультатРазбораТекстаФормулы(КодУпрощеннойФормулы,
								НазначениеРасчетов,
								ПотребительРасчета,
								СпособИспользования,
								ТипБД,
								?(ЗначениеЗаполнено(РегистрБД),РегистрБД,Неопределено));							
								
	Если НЕ (РезультатРазбора.Количество()=2) Тогда
		
		СтрокаШаблона = НСтр("ru = '%1: не удалось определить тип источника данных.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КодУпрощеннойФормулы),,, СтатусСообщения.Внимание);
		КонецЕсли;
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение ИЗ РезультатРазбора Цикл
		
		Если КлючИЗначение.Ключ="ТолькоСуммирование" Тогда
			
			Продолжить;
			
		Иначе
			
			НастройкиОперанда=КлючИЗначение.Значение;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкиОперанда.Свойство("Ссылка") И НастройкиОперанда.Ссылка=Ссылка Тогда
		
		ПодготовитьТаблицыСопоставленийИОтборов();
		Возврат Истина;
	
	ИначеЕсли НЕ ТипЗнч(НастройкиОперанда)=Тип("Структура") Тогда
		
		СтрокаШаблона = НСтр("ru = '%1: не удалось определить тип источника данных.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КодУпрощеннойФормулы),,, СтатусСообщения.Внимание);
		КонецЕсли;
			
		Возврат Ложь;
			
	КонецЕсли;
	
	Если НастройкиОперанда.Свойство("Ссылка") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,НастройкиОперанда.Ссылка,,"Владелец,ВерсияДанных,Ссылка,Предопределенный");
		ПодготовитьТаблицыСопоставленийИОтборов();
		Возврат Истина;
	
	ИначеЕсли НастройкиОперанда.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		Возврат ЗаполнитьПоУпрощенномуПредставлениюДанныеПоказателяОтчета(НастройкиОперанда);
		
	Иначе
		
		Возврат ЗаполнитьПоУпрощенномуПредставлениюДанныеРегистраБухгалтерии(НастройкиОперанда);
		
	КонецЕсли;
					
КонецФункции // ОбработатьКодУпрощеннойФормулы()

Функция ЗаполнитьИсточникДляОстатковИОборотов() Экспорт
	
	Если НЕ (ПотребительРасчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость
		И ПотребительРасчета.Владелец.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ВидОтчета=ПотребительРасчета.Владелец;
		
	РегистрБД=ВидОтчета.РегистрБухгалтерии;
	
	Если НЕ ЗначениеЗаполнено(РегистрБД) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТипБД=РегистрБД.Владелец;
	
	Если ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии;
		
	ИначеЕсли ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов;
		
	Иначе
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии;
		
	КонецЕсли;
	
	ПриИзмененииРегистраБухгалтерии();
	
	Счет=ПотребительРасчета.СчетБД;
	ПриИзмененииСчета(Истина);
	
	РесурсРегистра=ПотребительРасчета.РесурсРегистра;
	
	ЗаполнитьРеквизитыДляИтога(ПотребительРасчета.ВидИтогаПоСчету);
	
	ОбновитьКодУпрощеннойФормулы();
	СформироватьКодОперанда(Истина,Ложь);
	
	Возврат Истина;
		
КонецФункции // ЗаполнитьИсточникДляОстатковИОборотов()\

Процедура ЗаполнитьРеквизитыДляИтога(ВидИтогаПоСчету) Экспорт
	
	Если ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД Тогда
		
		Если Использование77() Тогда
			
			ВидИтога="СН#";
			ДтКт="Д";
			
		Иначе
			
			ВидИтога="НачальныйОстаток#";
			ДтКт="Дт";
			
		КонецЕсли;
		
	ИначеЕсли ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК Тогда
		
		Если Использование77() Тогда
			
			ВидИтога="СН#";
			ДтКт="К";
			
		Иначе
			
			ВидИтога="НачальныйОстаток#";
			ДтКт="Кт";
			
		КонецЕсли;
		
	ИначеЕсли ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО Тогда
		
		Если Использование77() Тогда
			
			ВидИтога="#О";
			ДтКт="Д";
			
		Иначе
			
			ВидИтога="Оборот#";
			ДтКт="Дт";
			
		КонецЕсли;
		
	ИначеЕсли ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО Тогда
		
		Если Использование77() Тогда
			
			ВидИтога="#О";
			ДтКт="К";
			
		Иначе
			
			ВидИтога="Оборот#";
			ДтКт="Кт";
			
		КонецЕсли;
		
	ИначеЕсли ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД Тогда
		
		Если Использование77() Тогда
			
			ВидИтога="СК#";
			ДтКт="Д";
			
		Иначе
			
			ВидИтога="КонечныйОстаток#";
			ДтКт="Дт";
			
		КонецЕсли;
		
	ИначеЕсли ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК Тогда
		
		Если Использование77() Тогда
			
			ВидИтога="СК#";
			ДтКт="К";
			
		Иначе
			
			ВидИтога="КонечныйОстаток#";
			ДтКт="Кт";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыДляИтога()

Процедура ОпределитьВидИтогаОСВ()
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		ВидИтогаОСВ=ПоказательОтбор.ВидИтогаПоСчету;
	
	ИначеЕсли (ВидИтога="СН#" И ДтКт="Д") ИЛИ (ВидИтога="НачальныйОстаток#" И ДтКт="Дт") Тогда
		
		ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СНД;
		
	ИначеЕсли (ВидИтога="СН#" И ДтКт="К") ИЛИ (ВидИтога="НачальныйОстаток#" И ДтКт="Кт") Тогда
		
		ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СНК;
		
	ИначеЕсли (ВидИтога="#О" И ДтКт="Д") ИЛИ (ВидИтога="Оборот#" И ДтКт="Дт") Тогда
		
		ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.ДО;
		
	ИначеЕсли (ВидИтога="#О" И ДтКт="К") ИЛИ (ВидИтога="Оборот#" И ДтКт="Кт") Тогда
		
		ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.КО;
		
	ИначеЕсли (ВидИтога="СК#" И ДтКт="Д") ИЛИ (ВидИтога="КонечныйОстаток#" И ДтКт="Дт") Тогда
		
		ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СКД;
		
	ИначеЕсли (ВидИтога="СК#" И ДтКт="К") ИЛИ (ВидИтога="КонечныйОстаток#" И ДтКт="Кт") Тогда
		
		ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СКК;
		
	Иначе
		
		ВидИтогаОСВ="";
				
	КонецЕсли;
			
КонецПроцедуры // ОпределитьВидИтогаОСВ() 

Процедура ПриИзмененииРегистраБухгалтерии() Экспорт
	
	Счет    = "";
	КоррСчет = "";
	РесурсРегистра="";
	ВидИтога="";
	ДтКт="";
	
	Если НЕ ЗначениеЗаполнено(РегистрБД.ПланСчетов) Тогда
		
		РегистрОбъект=РегистрБД.ПолучитьОбъект();
		РегистрОбъект.ЗаполнитьРеквизитыОбъекта();
		РегистрОбъект.Записать();
		
		Если НЕ ЗначениеЗаполнено(РегистрБД.ПланСчетов) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
			
	ПланСчетовБД=РегистрБД.ПланСчетов;
	ЗаполнитьПоказателиБД();
	ОбновитьТаблицуВычисленияПараметров();
		
КонецПроцедуры // ПриИзмененииРегистраБухгалтерии()

Процедура ЗаполнитьПоказателиБД() Экспорт
	
	ЗаполнитьИзмеренияРегистраБД(СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
							  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
							  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
	
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
	 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
	 
	 	ЗаполнитьАналитикуСчетаБД();	
		ЗаполнитьСписокРесурсов();
		ЗаполнитьСписокВидовИтога();
		
		ЗаполнитьАналитикуСчетаБД(Ложь);
		
	КонецЕсли;
	
	ДеревоПолейБД			= ЗаполнитьДеревоЗначенийБД();
	ТаблицаСоответствияБД 	= СформироватьТаблицуСоответствияБД();
		
КонецПроцедуры

Процедура ЗаполнитьСписокРесурсов() Экспорт
	
	СписокРесурсовРегистра=Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	Если Использование77() Тогда
		
		СписокРесурсовРегистра.Добавить("С",НСтр("ru = 'Сумма'"));
		
		Если СтрНайти(Счет.ПризнакиУчета,"Валютный")>0 Тогда
			СписокРесурсовРегистра.Добавить("В",Нстр("ru = 'Валютная сумма'"));
		КонецЕсли;
		
		Если СтрНайти(Счет.ПризнакиУчета,"Количественный")>0 Тогда
			СписокРесурсовРегистра.Добавить("К",НСтр("ru = 'Количество'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КоррСчет) Тогда
						
			Если СтрНайти(КоррСчет.ПризнакиУчета,"Валютный")>0 И СписокРесурсовРегистра.НайтиПоЗначению("В")=Неопределено Тогда
				СписокРесурсовРегистра.Добавить("В",Нстр("ru = 'Валютная сумма'"));
			КонецЕсли;
			
			Если СтрНайти(КоррСчет.ПризнакиУчета,"Количественный")>0  И СписокРесурсовРегистра.НайтиПоЗначению("К")=Неопределено Тогда
				СписокРесурсовРегистра.Добавить("К",НСтр("ru = 'Количество'"));
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПризнакиУчета=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПланСчетовБД.ПризнакиУчета);
		
		Для Каждого СтрРесурс ИЗ РегистрБД.Ресурсы Цикл
			
			Если ПустаяСтрока(СтрРесурс.ПризнакУчета) ИЛИ СтрНайти(Счет.ПризнакиУчета,СтрРесурс.ПризнакУчета)>0
				ИЛИ СтрНайти(КоррСчет.ПризнакиУчета,СтрРесурс.ПризнакУчета)>0 Тогда
				
				СписокРесурсовРегистра.Добавить(СтрРесурс.Имя,СтрРесурс.Синоним);
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;	
			
	Если СписокРесурсовРегистра.НайтиПоЗначению(РесурсРегистра)=Неопределено Тогда
		РесурсРегистра=СписокРесурсовРегистра[0].Значение;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокРесурсов()

Процедура ЗаполнитьСписокВидовИтога() Экспорт
		
	СписокВидИтога=Новый СписокЗначений;
	
	ЕстьРазворотПоСубконто=Не (мТаблицаПоказателейБД.Найти("Субконто1","ПолеБД")=Неопределено 
		И мТаблицаПоказателейБД.Найти("СубконтоДт1","ПолеБД")=Неопределено
		И мТаблицаПоказателейБД.Найти("СубконтоКт1","ПолеБД")=Неопределено);
		
	Если Использование77() Тогда
		
		СписокВидИтога.Добавить("СН#",Нстр("ru = 'Сальдо начальное'"));
		
		Если ЕстьРазворотПоСубконто Тогда
			СписокВидИтога.Добавить("СН#РС",Нстр("ru = 'Сальдо начальное (развернутое по субконто)'"));
		КонецЕсли;
		
		СписокВидИтога.Добавить("СК#",Нстр("ru = 'Сальдо конечное'"));
		
		Если ЕстьРазворотПоСубконто Тогда
			СписокВидИтога.Добавить("СК#РС",Нстр("ru = 'Сальдо конечное (развернутое по субконто)'"));
		КонецЕсли;
		
		СписокВидИтога.Добавить("#О",Нстр("ru = 'Оборот по счету'"));
		СписокВидИтога.Добавить("КорДО",Нстр("ru = 'Оборот в корреспонденции'"));
		
	Иначе
		
		СписокВидИтога.Добавить("НачальныйОстаток#",Нстр("ru = 'Сальдо начальное'"));
		
		Если ЕстьРазворотПоСубконто Тогда
			СписокВидИтога.Добавить("НачальныйРазвернутыйОстаток#",Нстр("ru = 'Сальдо начальное (развернутое по субконто)'"));
		КонецЕсли;
		
		СписокВидИтога.Добавить("КонечныйОстаток#",Нстр("ru = 'Сальдо конечное'"));
		
		Если ЕстьРазворотПоСубконто Тогда
			СписокВидИтога.Добавить("КонечныйРазвернутыйОстаток#",Нстр("ru = 'Сальдо конечное (развернутое по субконто)'"));
		КонецЕсли;
		
		СписокВидИтога.Добавить("Оборот#",Нстр("ru = 'Оборот по счету'"));
		
		Если РегистрБД.Корреспонденция Тогда
			
			СписокВидИтога.Добавить("Оборот",Нстр("ru = 'Оборот в корреспонденции'"));
			
		КонецЕсли;
		
	КонецЕсли;		
		
	Если СписокВидИтога.НайтиПоЗначению(ВидИтога)=Неопределено Тогда	
		ВидИтога=СписокВидИтога[0].Значение;
	КонецЕсли;
	
	УстановитьВозможностьДтКт();
			
КонецПроцедуры //

Процедура УстановитьВозможностьДтКт() Экспорт
		
	СписокДтКт=Новый СписокЗначений;
	
	Если Использование77() Тогда
		
		Если ВидИтога="#О" ИЛИ Счет.Вид=Перечисления.ВидыСчетовБД.АктивноПассивный Тогда	
			СписокДтКт.Добавить("Д","Дт");
			СписокДтКт.Добавить("К","Кт");
			
			Если СтрНайти(ВидИтога,"РС")=0 Тогда 		
				СписокДтКт.Добавить("СВ",Нстр("ru = 'Дт - Кт'"));	
			КонецЕсли;
								
			Если СписокДтКт.НайтиПоЗначению(ДтКт)=Неопределено И ПустаяСтрока(ДтКт) Тогда
				ДтКт="Д";
			КонецЕсли;
			
		Иначе
			
			СписокДтКт.Добавить("Д","Дт");
			СписокДтКт.Добавить("К","Кт");
			
			Если ПустаяСтрока(ДтКт) Тогда
				
				Если Счет.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда	
					ДтКт="К";
				Иначе
					ДтКт="Д";
				КонецЕсли
				
			КонецЕсли;
				
		КонецЕсли;	
		
	Иначе
		
		Если ВидИтога="Оборот" Тогда
			
			ТекРесурс=РегистрБД.Ресурсы.Найти(РесурсРегистра,"Имя");
			
			Если НЕ (ТекРесурс=Неопределено ИЛИ ТекРесурс.Балансовый) Тогда
				
				СписокДтКт.Добавить("Дт","Дт");
				СписокДтКт.Добавить("Кт","Кт");
				
				Если СписокДтКт.НайтиПоЗначению(ДтКт)=Неопределено Тогда
					ДтКт="Дт";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВидИтога="Оборот#" ИЛИ Счет.Вид=Перечисления.ВидыСчетовБД.АктивноПассивный Тогда	
			
			СписокДтКт.Добавить("Дт","Дт");
			СписокДтКт.Добавить("Кт","Кт");
			
			Если СтрНайти(ВидИтога,"Развернутый")=0 Тогда		
				СписокДтКт.Добавить("СВ",Нстр("ru = 'Дт - Кт'"));	
			КонецЕсли;
						
			Если СписокДтКт.НайтиПоЗначению(ДтКт)=Неопределено Тогда
				ДтКт="Дт";
			КонецЕсли;
			
		Иначе
			
			СписокДтКт.Добавить("Дт","Дт");
			СписокДтКт.Добавить("Кт","Кт");
			
			Если ПустаяСтрока(ДтКт) Тогда
				
				Если Счет.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда	
					ДтКт="Кт";
				Иначе
					ДтКт="Дт";
				КонецЕсли
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры //

Процедура ПриИзмененииСчета(Дебетовый) Экспорт
		
	УдалитьАналитикуПоСчету(Дебетовый);
	
	Если НЕ Дебетовый Тогда
				
		ЗаполнитьИзмеренияРегистраБД(Истина);
		
	КонецЕсли;
	
	ЗаполнитьАналитикуСчетаБД(Дебетовый);
	
	Если Дебетовый Тогда
		
		ЗаполнитьСписокВидовИтога();
		
	КонецЕсли;
	
	ЗаполнитьСписокРесурсов();		
	УстановитьВозможностьДтКт();	
	
	ДеревоПолейБД			= ЗаполнитьДеревоЗначенийБД();
	ТаблицаСоответствияБД 	= СформироватьТаблицуСоответствияБД();
	
	ОбновитьТаблицуВычисленияПараметров();	
	ОбновитьКодУпрощеннойФормулы();
					
КонецПроцедуры // ПриИзмененииСчета

Процедура ОбновитьКодУпрощеннойФормулы() Экспорт

	Если ИсходнаяИнициализацияОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	мМодифицированность =  Истина;				
	СохранитьНастройкиОперанда();	
	КодУпрощеннойФормулы=СформироватьКодУпрощеннойФормулы();

КонецПроцедуры // ОбновитьКодУпрощеннойФормулы() 

Процедура ОбновитьТаблицуВычисленияПараметров() Экспорт
	
	ЗаполнитьПараметрыОперанда();
		
КонецПроцедуры // ОбновитьТаблицуВычисленияПараметров()

Процедура ПриИзмененииРегистраБД(РегистрНакопления=Истина) Экспорт
	
	Если РегистрБД.Измерения.Количество()=0 Тогда
		
		РегистрОбъект=РегистрБД.ПолучитьОбъект();
		РегистрОбъект.ЗаполнитьРеквизитыОбъекта();
		РегистрОбъект.Записать();
		
	КонецЕсли;
	
	ЗаполнитьПоказателиБД();
	
	Если РегистрНакопления Тогда
		ЗаполнитьСписокВидовИтогаРегистраБД();
		ЗаполнитьЗначенияРесурсовРегистраБД();
	Иначе
		ЗаполнитьЗначенияРесурсовРегистраСведенийБД();
	КонецЕсли;
	
	ОбновитьТаблицуВычисленияПараметров();
				
КонецПроцедуры

Процедура ПриИзмененииОбъектаБД() Экспорт
	
	РабочийОбъект=?(ЗначениеЗаполнено(ТабличнаяЧастьБД),ТабличнаяЧастьБД,ОбъектБД);
	
	мТаблицаПоказателейБД.Очистить();
	мТаблицаПроизводныхБД.Очистить();
	
	Если ЗначениеЗаполнено(РабочийОбъект) Тогда
		
		Для Каждого СтрРеквизит ИЗ РабочийОбъект.Реквизиты Цикл
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
			СтрокаПоказателей.Измерение       	= Истина;
			СтрокаПоказателей.Балансовый		= Истина;
			
			Если СтрРеквизит.Имя="Ссылка" Тогда
				
				Если ТипЗнч(РабочийОбъект)=Тип("СправочникСсылка.ДокументыБД") ИЛИ ТипЗнч(РабочийОбъект)=Тип("СправочникСсылка.СправочникиБД") Тогда
					
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,?(ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.СправочникиБД"),"Справочник","Документ")+"."+ОбъектБД.Наименование,ТипБД,ТипБДПриемник);
					
				ИначеЕсли ТипЗнч(РабочийОбъект)=Тип("СправочникСсылка.ТабличныеЧастиБД") ИЛИ ТипЗнч(РабочийОбъект)=Тип("СправочникСсылка.ПоказателиОбъектовБД") Тогда
					
					ОписаниеОбъектаБД=РабочийОбъект.Владелец;
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,?(ТипЗнч(ОписаниеОбъектаБД)=Тип("СправочникСсылка.СправочникиБД"),"Справочник","Документ")+"."+ОписаниеОбъектаБД.Наименование,ТипБД,ТипБДПриемник);
					
				КонецЕсли;
				
			Иначе
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	ТаблицаСоответствияБД		= СформироватьТаблицуСоответствияБД();
	ДеревоПолейБД				= ЗаполнитьДеревоЗначенийБД();
	
	Если ДеревоПолейБД.Строки.Количество()=1 Тогда
		
		ДеревоПолейБД.Строки[0].Строки.Сортировать("ПолеБД Возр");
		
	КонецЕсли;
	
	ОбновитьТаблицуВычисленияПараметров();
	
КонецПроцедуры // ПриИзмененииОбъектаБД() 

Процедура ПриИзмененииТаблицыADO() Экспорт
	
	Если ЗначениеЗаполнено(ТаблицаADO) Тогда
		
		Если ТаблицаADO.Реквизиты.Количество()=0 Тогда
			
			ТаблицаОбъект=ТаблицаADO.ПолучитьОбъект();
			ТаблицаОбъект.ЗаполнитьРеквизитыОбъекта();
			ТаблицаОбъект.Записать();
			
		КонецЕсли;
		
		ЗаполнитьПоляТаблицыADO();
		
	КонецЕсли;
	
	ТаблицаСоответствияБД		= СформироватьТаблицуСоответствияБД();
	ДеревоПолейБД	= ЗаполнитьДеревоПоОбъектуВИБ();
	
	ОбновитьТаблицуВычисленияПараметров();
	
КонецПроцедуры // ПриИзмененииТаблицыADO() 

Процедура ЗаполнитьСписокВидовИтогаРегистраБД() Экспорт
		
	СписокВидИтога=Новый СписокЗначений;
	
	Если (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления)
		И РегистрБД.ВидРегистра = "Остатки" Тогда
		
		Если НЕ ОсновнаяТаблицаРегистра Тогда
			
			СписокВидИтога.Добавить("НачальныйОстаток", Нстр("ru = 'Начальный Остаток'"));
			СписокВидИтога.Добавить("КонечныйОстаток", Нстр("ru = 'Конечный Остаток'"));
			
		КонецЕсли;
		
		СписокВидИтога.Добавить("Приход", НСтр("ru = 'Приход'"));
		СписокВидИтога.Добавить("Расход", НСтр("ru = 'Расход'"));
		
	КонецЕсли;
	
	Если НЕ ОсновнаяТаблицаРегистра Тогда
		
		СписокВидИтога.Добавить("Оборот", НСтр("ru = 'Оборот'"));
		
	КонецЕсли;
	
	Если СписокВидИтога.Количество()>0 И СписокВидИтога.НайтиПоЗначению(ВидИтога)=Неопределено  Тогда
		
		ВидИтога= СписокВидИтога[0].Значение;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСписокВидовИтогаРегистра()

Процедура ЗаполнитьЗначенияРесурсовРегистраБД() Экспорт
		
	СписокРесурсовРегистра=Новый СписокЗначений;
	
	Для Каждого СтрРесурс ИЗ РегистрБД.Ресурсы Цикл
				
		СписокРесурсовРегистра.Добавить(СтрРесурс.Имя,СтрРесурс.Синоним);
		
	КонецЦикла;
		
	Если СписокРесурсовРегистра.Количество()>0 Тогда
		
		Если СписокРесурсовРегистра.НайтиПоЗначению(РесурсРегистра)=Неопределено Тогда
			РесурсРегистра=СписокРесурсовРегистра[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьЗначенияРесурсовРегистраСведенийБД() Экспорт
		
	СписокРесурсовРегистра=Новый СписокЗначений;
	
	Для Каждого СтрРесурс ИЗ РегистрБД.Ресурсы Цикл
		
		Если ОбщегоНазначенияУХ.ПримитивныйТипСтрока(СтрРесурс.ТипДанных) Тогда
			СписокРесурсовРегистра.Добавить(СтрРесурс.Имя,СтрРесурс.Синоним);
		КонецЕсли;
		
	КонецЦикла;
			
	Если СписокРесурсовРегистра.Количество()>0 Тогда
		
		Если СписокРесурсовРегистра.НайтиПоЗначению(РесурсРегистра)=Неопределено Тогда
			РесурсРегистра=СписокРесурсовРегистра[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриИзмененииВидаОтчетаОтбор() Экспорт
	
	мТаблицаВидовАналитикВидаОтчетаОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ВидОтчетаОтбор);
	мТаблицаВидовАналитикПоказателяОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ПоказательОтбор.ГруппаРаскрытия);

	ЗаполнитьСписокПолейОтбор();
	
КонецПроцедуры // ПриИзмененииВидаОтчетаОтбор()

Процедура ПриИзмененииПоказателяОтбор() Экспорт
		
	ЗаполнитьНачальныеНастройки();
	ЗаполнитьАналитикуПоказателяТек();
		
	ТаблицаСоответствияБД		= СформироватьТаблицуСоответствияБД();
	ДеревоПолейБД	= ЗаполнитьДеревоЗначенийБД();
	ОбновитьТаблицуВычисленияПараметров();
	
	ВидИтогаОСВ=ПоказательОтбор.ВидИтогаПоСчету;
	
	ОбновитьКодУпрощеннойФормулы();
	
КонецПроцедуры // ПриИзмененииПотребителяРасчета()

Процедура ПриИзмененииГруппыРаскрытияОтбор() Экспорт
		
	мТаблицаВидовАналитикПоказателяОтбор=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ГруппаРаскрытияОтбор,,Истина);
	ЗаполнитьСписокПолейОтбор();
	ЗаполнитьАналитикуПоказателяТек();
		
	ТаблицаСоответствияБД		= СформироватьТаблицуСоответствияБД();
	ДеревоПолейБД	= ЗаполнитьДеревоЗначенийБД();
	ОбновитьТаблицуВычисленияПараметров();
		
КонецПроцедуры // ПриИзмененииПотребителяРасчета()

//////////////////////////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВНЕШНИМИ ИБ

// Процедура удаляет из таблицы соответствия и таблицы параметров отбора записи по аналитикам счета.
// Параметр:
//  Дебетовый      - Булево, определяет вид счета, аналитики по которому будут удалены.
//
Процедура УдалитьАналитикуПоСчету(Дебетовый) Экспорт
	
	// Удаление из таблицы показателей ВИБ.
	СписокУдаляемыхЭлементов = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение, Дебетовый", Ложь, Дебетовый));
	Для Каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		мТаблицаПоказателейБД.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление из таблицы соответстия ВИБ.
	
	Если ТаблицаСоответствияБД.Количество()>0 Тогда 
		
		СписокУдаляемыхЭлементов = ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Измерение, Дебетовый", Ложь, Дебетовый));
		Для Каждого ТекущаяСтрока Из СписокУдаляемыхЭлементов Цикл
			
			Если НЕ ПустаяСтрока(ТекущаяСтрока.ПолеБД) Тогда
				
				Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
					И ТекущаяСтрока.Родитель.ПсевдонимКонсолидации=Нстр("ru = 'Поля источника данных'") Тогда
					
					ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
					
				Иначе
					
					ТекущаяСтрока.ПолеБД                  = Неопределено;
					ТекущаяСтрока.ПсевдонимБД                  = Неопределено;
					ТекущаяСтрока.Сопоставлено                  = Ложь;
					ТекущаяСтрока.СправочникБД                 = "";
					ТекущаяСтрока.ПолеЗапроса                   = "";
					ТекущаяСтрока.ТипМетаДанных                 = "";
					ТекущаяСтрока.НастройкаСоответствия			= "";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура добавляет в таблицу значений мТаблицаПоказателейБД данные по измерениям
// выбранного регистра бухгалтерии.
//
Процедура ЗаполнитьИзмеренияРегистраБД(РегистрБухгалтерии = Истина) Экспорт
	
	Если ЗначениеЗаполнено(КоррРегистрБД) Тогда
		
		ЗаполнитьПоКорреспонденцииФинансовыхРегистров();
		Возврат;
		
	КонецЕсли;
	
	Если РегистрБухгалтерии Тогда
		
		УдаляемыеСтроки = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
		
		Для Каждого Элемент Из УдаляемыеСтроки Цикл
			мТаблицаПоказателейБД.Удалить(Элемент);
		КонецЦикла;
		
	Иначе 
		
		мТаблицаПоказателейБД.Очистить();
		мТаблицаПроизводныхБД.Очистить();
		
	КонецЕсли;
	
	Если мТаблицаПоказателейБД.Колонки.Найти("НеЯвляетсяРазделителемДанных")=Неопределено Тогда
		 мТаблицаПоказателейБД.Колонки.Добавить("НеЯвляетсяРазделителемДанных",мОписаниеТиповБулево);
	КонецЕсли;
	 
	Если (РегистрБухгалтерии И (ТрансляцияДебет ИЛИ ТрансляцияКредит ИЛИ ИтогЕстьОборотПоСчетам())) ИЛИ ОсновнаяТаблицаРегистра Тогда
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= "Регистратор";
		СтрокаПоказателей.НаименованиеБД 	= "Регистратор";
		СтрокаПоказателей.Регистратор       = Истина;
		СтрокаПоказателей.Балансовый 		= Истина;
		СтрокаПоказателей.НеЯвляетсяРазделителемДанных 	= Истина;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, РегистрБД.Регистраторы,ТипБД,ТипБДПриемник);
		
	КонецЕсли; 
	
	Для Каждого СтрИзмерение ИЗ РегистрБД.Измерения Цикл
		
		Если РегистрБухгалтерии Тогда
						
			Если СтрИзмерение.Балансовый ИЛИ (НЕ ИтогЕстьОборотПоСчетам()) Тогда
				
				СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
				СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
				СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
				СтрокаПоказателей.Измерение       	= Истина;
				СтрокаПоказателей.Балансовый 					= СтрИзмерение.Балансовый;
				СтрокаПоказателей.НеЯвляетсяРазделителемДанных 	= СтрИзмерение.НеЯвляетсяРазделителемДанных;
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
				
			Иначе
				
				СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
				СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя+"Дт";
				СтрокаПоказателей.НаименованиеБД 	= СтрШаблон(Нстр("ru = '%1 (дт.)'"), СтрИзмерение.Синоним);
				СтрокаПоказателей.Измерение       	= Истина;
				СтрокаПоказателей.Балансовый 					= СтрИзмерение.Балансовый;
				СтрокаПоказателей.НеЯвляетсяРазделителемДанных 	= СтрИзмерение.НеЯвляетсяРазделителемДанных;
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
				
				СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
				СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя+"Кт";
				СтрокаПоказателей.НаименованиеБД 	= СтрШаблон(Нстр("ru = '%1 (кт.)'"), СтрИзмерение.Синоним);
				СтрокаПоказателей.Измерение       	= Истина;
				СтрокаПоказателей.Балансовый 					= СтрИзмерение.Балансовый;
				СтрокаПоказателей.НеЯвляетсяРазделителемДанных 	= СтрИзмерение.НеЯвляетсяРазделителемДанных;
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.Измерение       	= Истина;
			СтрокаПоказателей.Балансовый = Истина;
			
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ОсновнаяТаблицаРегистра Тогда
		
		Для Каждого СтрРеквизит ИЗ РегистрБД.Реквизиты Цикл
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
			СтрокаПоказателей.Измерение       	= Ложь;
			СтрокаПоказателей.Балансовый = Ложь;
			
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры  

Процедура ЗаполнитьПоКорреспонденцииФинансовыхРегистров()
	
	мТаблицаПоказателейБД.Очистить();
	мТаблицаПроизводныхБД.Очистить();
			
	Если мТаблицаПоказателейБД.Колонки.Найти("НеЯвляетсяРазделителемДанных")=Неопределено Тогда
		 мТаблицаПоказателейБД.Колонки.Добавить("НеЯвляетсяРазделителемДанных",мОписаниеТиповБулево);
	КонецЕсли;
	
	ИмяРегистраДт=РегистрБД.Наименование;
	ИмяРегистраКт=КоррРегистрБД.Наименование;
	
	СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
	СтрокаПоказателей.ПолеБД         	= "Регистратор";
	СтрокаПоказателей.НаименованиеБД 	= "Регистратор";
	СтрокаПоказателей.Регистратор       = Истина;
	СтрокаПоказателей.Балансовый 		= Истина;
	СтрокаПоказателей.НеЯвляетсяРазделителемДанных 	= Истина;
		
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, РегистрБД.Регистраторы,ТипБД,ТипБДПриемник);
	
	Для Каждого СтрИзмерение ИЗ РегистрБД.Измерения Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним+ "( дт.)";
		СтрокаПоказателей.Измерение       	= Истина;
		СтрокаПоказателей.Балансовый 		= Истина;
		СтрокаПоказателей.Дебетовый			= Истина;
			
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;	
		
	Для Каждого СтрРеквизит ИЗ РегистрБД.Реквизиты Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним+ "( дт.)";
		СтрокаПоказателей.Измерение       	= Ложь;
		СтрокаПоказателей.Балансовый 		= Ложь;
		СтрокаПоказателей.Дебетовый			= Истина;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;
	
	Для Каждого СтрИзмерение ИЗ КоррРегистрБД.Измерения Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= ИмяРегистраКт+"."+СтрИзмерение.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним+ "( кт.)";
		СтрокаПоказателей.Измерение       	= Истина;
		СтрокаПоказателей.Балансовый 		= Истина;
		СтрокаПоказателей.Дебетовый			= Ложь;
			
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;	
		
	Для Каждого СтрРеквизит ИЗ КоррРегистрБД.Реквизиты Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= ИмяРегистраКт+"."+СтрРеквизит.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним+ "( кт.)";
		СтрокаПоказателей.Измерение       	= Ложь;
		СтрокаПоказателей.Балансовый 		= Ложь;
		СтрокаПоказателей.Дебетовый			= Ложь;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьПоКорреспонденцииФинансовыхРегистров()

Процедура ЗаполнитьПоляТаблицыADO() Экспорт
	
	//мТаблицаПоказателейБД.Очистить();
	//мТаблицаПроизводныхБД.Очистить();
	//
	//Для Каждого СтрИзмерение ИЗ ТаблицаADO.Реквизиты Цикл
	//	
	//	ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(СтрИзмерение.ТипЗначения);
	//	
	//	Если ПримитивныйТип=Неопределено Тогда
	//		
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	СписокТипов=Новый СписокЗначений;
	//	СписокТипов.Добавить(ПримитивныйТип);
	//	
	//	СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();	
	//	СтрокаПоказателей.ПолеБД         = "["+СтрИзмерение.Имя+"]";
	//	СтрокаПоказателей.ТипМетаДанных   = "Простой";
	//	СтрокаПоказателей.ТипЗначения	  = СписокТипов;
	//	
	//	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипЗначения,ТипБД);
	//	
	//	СтрокаСсылка=ТаблицаADO.СвязанныеТаблицы.Найти(СтрИзмерение.Имя,"ПолеТекущейТаблицы");
	//	
	//	Если СтрокаСсылка=Неопределено Тогда
	//		
	//		СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя;
	//		
	//	Иначе
	//		
	//		СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+": "+СтрокаСсылка.ПолеСвязаннойТаблицы+")";
	//		
	//		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();	
	//		СтрокаПоказателей.ПолеБД         = "["+СтрокаСсылка.СвязаннаяТаблица+"]";
	//		СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+")";
	//		СтрокаПоказателей.ТипМетаДанных   = "ТаблицаADO";
	//		СтрокаПоказателей.Измерение=Истина;
	//		СтрокаПоказателей.СправочникБД   = "({["+СтрокаСсылка.СвязаннаяТаблица+"]}{["+ТаблицаADO.Имя+"].["+СтрИзмерение.Имя+"]=["+СтрокаСсылка.СвязаннаяТаблица+"].["+СтрокаСсылка.ПолеСвязаннойТаблицы+"]})";
	//		
	//		СписокТипов=Новый СписокЗначений;
	//		
	//		СписокТипов.Добавить("ТаблицаADO."+СтрокаСсылка.СвязаннаяТаблица);
	//		СтрокаПоказателей.ТипЗначения	  = СписокТипов;
	//		
	//	КонецЕсли;	
	//	
	//КонецЦикла;
	
	//////////////////////////////////////////////////////
	
	мТаблицаПоказателейБД.Очистить();
	мТаблицаПроизводныхБД.Очистить();
	
	Для Каждого СтрИзмерение ИЗ ТаблицаADO.Реквизиты Цикл
		
		ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(СтрИзмерение.ТипЗначения);
		
		Если ПримитивныйТип=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокТипов=Новый СписокЗначений;
		СписокТипов.Добавить(ПримитивныйТип);
		
		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();	
		СтрокаПоказателей.ПолеБД         = "["+СтрИзмерение.Имя+"]";
		СтрокаПоказателей.ТипМетаДанных   = "Простой";
		СтрокаПоказателей.ТипЗначения	  = СписокТипов;
		
		СтрокаСсылка=ТаблицаADO.СвязанныеТаблицы.Найти(СтрИзмерение.Имя,"ПолеТекущейТаблицы");
		
		Если СтрокаСсылка=Неопределено Тогда
			
			СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя;
			
		Иначе
			
			СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+": "+СтрокаСсылка.ПолеСвязаннойТаблицы+")";
			
			СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();	
			СтрокаПоказателей.ПолеБД         = "["+СтрокаСсылка.СвязаннаяТаблица+"]";
			СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+")";
			СтрокаПоказателей.ТипМетаДанных   = "ТаблицаADO";
			СтрокаПоказателей.Измерение=Истина;
			СтрокаПоказателей.СправочникБД   = "({["+СтрокаСсылка.СвязаннаяТаблица+"]}{["+ТаблицаADO.Наименование+"].["+СтрИзмерение.Имя+"]=["+СтрокаСсылка.СвязаннаяТаблица+"].["+СтрокаСсылка.ПолеСвязаннойТаблицы+"]})";
			
			СписокТипов=Новый СписокЗначений;
			
			СписокТипов.Добавить("ТаблицаADO."+СтрокаСсылка.СвязаннаяТаблица);
			СтрокаПоказателей.ТипЗначения	  = СписокТипов;
			
		КонецЕсли;	
		
	КонецЦикла;

	
	
	
	//////////////////////////////////////////////////////
		
КонецПроцедуры // ЗаполнитьПоляТаблицыADO()

Процедура ЗаполнитьПоляДляИмпортаТЧ_ADO()
		
	Для Каждого РеквизитСинхронизации ИЗ НазначениеРасчетов.РеквизитыШапкиДляСинхронизацииТЧ Цикл
				
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=РеквизитСинхронизации.Имя;
		ПолеАналитика.НаименованиеАналитики=РеквизитСинхронизации.Синоним;
		ПолеАналитика.Синоним=РеквизитСинхронизации.Синоним;
		ПолеАналитика.АналитикаОтчета=Ложь;
		ПолеАналитика.РеквизитОбъекта=РеквизитСинхронизации.Имя;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, РеквизитСинхронизации.ТипДанных,НазначениеРасчетов.Владелец.Владелец);
		
		Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
			
			ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрРеквизит ИЗ ПотребительРасчета.Реквизиты Цикл
		
		Если СтрРеквизит.Имя="Ссылка"
			ИЛИ СтрРеквизит.Имя="НомерСтроки"
			ИЛИ СтрРеквизит.Имя="Номер"
			ИЛИ СтрРеквизит.Имя="Наименование" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолеАналитика=мТаблицаВозможныхПолей.Добавить();
		ПолеАналитика.Поле=СтрРеквизит.Имя;
		ПолеАналитика.НаименованиеАналитики=СтрРеквизит.Синоним;
		ПолеАналитика.Синоним=СтрРеквизит.Синоним;
		ПолеАналитика.АналитикаОтчета=Ложь;
		ПолеАналитика.РеквизитОбъекта=СтрРеквизит.Имя;
		Если ЗначениеЗаполнено(НазначениеРасчетов.Владелец) Тогда
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрРеквизит.ТипДанных, НазначениеРасчетов.Владелец.Владелец);
		Иначе
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрРеквизит.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		КонецЕсли;
		
		Если ПолеАналитика.ТипЗначения.Количество()>0 Тогда
			
			ПолеАналитика.ТаблицаАналитики=ПолеАналитика.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
		ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеАналитика.ТаблицаАналитики,".");
		
		Если ДанныеСинхронизации.Количество()=2 Тогда 
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			ПолеАналитика.ИмяОбъектаМетаданных=ДанныеСинхронизации[1];
			
		Иначе
			
			ПолеАналитика.ТипОбъектаКонсолидации=ДанныеСинхронизации[0];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоляДляИмпортаТЧ_ADO()

Функция ЗаполнитьДеревоПоОбъектуВИБ() Экспорт
	
	ЛокальноеДерево = Новый ДеревоЗначений;
	ЛокальноеДерево.Колонки.Добавить("НаименованиеБД"		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ПолеБД"			, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("СправочникБД"   		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипМетаДанных" 		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипЗначения"			, мОписаниеТиповСписокЗначений);
	ЛокальноеДерево.Колонки.Добавить("ТипДанныхПоля"		, мОписаниеТиповСписокЗначений);
	ЛокальноеДерево.Колонки.Добавить("ИспользуетсяВСопоставлении", мОписаниеТиповБулево);
	ЛокальноеДерево.Колонки.Добавить("ПримитивныйТип", 		мОписаниеТиповБулево);
	ЛокальноеДерево.Колонки.Добавить("ВидАналитики"			, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	
	ТаблицаВИБ=мТаблицаПоказателейБД.Скопировать();
	
	СтрокаПримитивных = ЛокальноеДерево.Строки.Добавить();
	СтрокаПримитивных.НаименованиеБД = Нстр("ru = 'Поля таблицы'");
	
	СписокПримитивных = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение", Ложь));
	
	Инд = 0;
	Для Каждого Элемент Из СписокПримитивных Цикл
		
		Соответствие = ТаблицаСоответствияБД.Найти(Элемент.НаименованиеБД, "ПсевдонимБД");
		ЕстьСоответствие = Истина;
		Если Соответствие = Неопределено Тогда
			ЕстьСоответствие = Ложь;
		Иначе
			ЕстьСоответствие = НЕ ПустаяСтрока(Соответствие.ПсевдонимКонсолидации);
		КонецЕсли;
		
		Если Не ЕстьСоответствие Тогда
			Инд = Инд + 1;
		КонецЕсли;
		
		ТекущаяСтрока                            = СтрокаПримитивных.Строки.Добавить();
		ТекущаяСтрока.НаименованиеБД            = Элемент.НаименованиеБД;
		ТекущаяСтрока.СправочникБД              = Элемент.СправочникБД;
		ТекущаяСтрока.ТипМетаДанных              = Элемент.ТипМетаДанных;
		ТекущаяСтрока.ПолеБД               = Элемент.ПолеБД;
		ТекущаяСтрока.ТипЗначения				 = Элемент.ТипЗначения;
		ТекущаяСтрока.ИспользуетсяВСопоставлении = ЕстьСоответствие;
		ТекущаяСтрока.ПримитивныйТип			 = Истина;
					
	КонецЦикла;
	
	СтрокаПримитивных.НаименованиеБД = СтрокаПримитивных.НаименованиеБД + "(" + Инд +")";
	
	СтрокаСсылочных = ЛокальноеДерево.Строки.Добавить();
	СтрокаСсылочных.НаименованиеБД = Нстр("ru = 'Связанные поля'");
	
	СписокСсылочных = ТаблицаВИБ.НайтиСтроки(Новый Структура("Измерение", Истина));
		
	Инд = 0;
	Для Каждого Элемент Из СписокСсылочных Цикл
		
		Соответствие = ТаблицаСоответствияБД.Найти(Элемент.НаименованиеБД, "ПсевдонимБД");
		ЕстьСоответствие = Истина;
		Если Соответствие = Неопределено Тогда
			ЕстьСоответствие = Ложь;
		Иначе
			ЕстьСоответствие = НЕ ПустаяСтрока(Соответствие.ПсевдонимКонсолидации);
		КонецЕсли;
		
		Если Не ЕстьСоответствие Тогда
			Инд = Инд + 1;
		КонецЕсли;
		
		ТекущаяСтрока                            = СтрокаСсылочных.Строки.Добавить();
		ТекущаяСтрока.НаименованиеБД            = Элемент.НаименованиеБД;
		ТекущаяСтрока.СправочникБД              = Элемент.СправочникБД;
		ТекущаяСтрока.ТипМетаДанных              = Элемент.ТипМетаДанных;
		ТекущаяСтрока.ПолеБД               = Элемент.ПолеБД;
		ТекущаяСтрока.ТипЗначения				 = Элемент.ТипЗначения;
		ТекущаяСтрока.ИспользуетсяВСопоставлении = ЕстьСоответствие;
		ТекущаяСтрока.ПримитивныйТип			 = Ложь;
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
					
		НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
						
	КонецЦикла;
	
	СтрокаСсылочных.НаименованиеБД = СтрокаСсылочных.НаименованиеБД + "(" + Инд +")";
	
	Возврат ЛокальноеДерево;
	
КонецФункции // ЗаполнитьДеревоПоРегиструНакопления()

Процедура ЗаполнитьРеквизитыСправочникаВИБ() Экспорт
		
	мТаблицаПоказателейБД.Очистить();
	мТаблицаПроизводныхБД.Очистить();
	
	Для Каждого СтрИзмерение ИЗ НастройкаСоответствия.ОписаниеОбъектаВИБ.Реквизиты Цикл
		
		
		СтрокаПоказателей                 = мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         = СтрИзмерение.Имя;
		СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Синоним;
		СтрокаПоказателей.Измерение       = Истина;	
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет в таблицу значений мТаблицаПоказателейБД данные по видам аналитики
// выбранного счета из плана счетов регистра бухгалтерии ВИБ.
// Параметр:
//  Дебетовый      - Булево, определяет, заполняются ли данные для дебетового или 
//                   кредитового счета.
//
Процедура ЗаполнитьАналитикуСчетаБД(Дебетовый = Истина) Экспорт
	
	Если (Не Дебетовый И ПустаяСтрока(КоррСчет)) ИЛИ (ПустаяСтрока(Счет)) Тогда
		Возврат;
	КонецЕсли;
	
	мТаблицаПроизводныхБД.Очистить();
	
	УдаляемыеСтроки = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение, Дебетовый,Регистратор", Ложь, Дебетовый,Ложь));
	Для Каждого Элемент Из УдаляемыеСтроки Цикл
		мТаблицаПоказателейБД.Удалить(Элемент);
	КонецЦикла;
	
	ТекСчет = ?(Дебетовый, Счет, КоррСчет);
	
	Если ТекСчет.ВидыСубконто.Количество()=0 Тогда
		ЕстьРазворотПоСубконто=Ложь;
		Возврат;
	Иначе
		ЕстьРазворотПоСубконто=Истина;
	КонецЕсли;
	
	ПризнакиУчетаСубконто=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПланСчетовБД.ПризнакиУчетаСубконто,";");
	
	Для Каждого Строка ИЗ мТаблицаПоказателейБД Цикл
		
		Если СтрНайти(Строка.ПолеБД,"Субконто")>0 Тогда
			
			Если ТрансляцияДебет И СтрНайти(Строка.ПолеБД,"Дт")=0 Тогда
				
				Строка.ПолеБД=СтрЗаменить(Строка.ПолеБД,"Субконто","СубконтоДт");
				
			ИначеЕсли ТрансляцияКредит И СтрНайти(Строка.ПолеБД,"Кт")=0 Тогда
				
				Строка.ПолеБД=СтрЗаменить(Строка.ПолеБД,"Субконто","СубконтоКт");
				
			ИначеЕсли ИтогЕстьОборотПоСчетам() Тогда
				
				Если СтрНайти(Строка.ПолеБД,"Дт")=0 И СтрНайти(Строка.ПолеБД,"Кт")=0 Тогда
					
					Строка.ПолеБД=СтрЗаменить(Строка.ПолеБД,"Субконто","Субконто"+?(Дебетовый,"Кт","Дт"));
					
				КонецЕсли;
				
			Иначе
				
				Если СтрНайти(Строка.ПолеБД,"Дт")=0 ИЛИ СтрНайти(Строка.ПолеБД,"Кт")=0 Тогда
					
					Строка.ПолеБД=СтрЗаменить(Строка.ПолеБД,"Субконто"+?(Дебетовый,"Кт","Дт"),"Субконто");
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;	
		
	КонецЦикла;
					
	Для Каждого ВидСубконто Из ТекСчет.ВидыСубконто Цикл
		
		СтрокаПоказателей                  = мТаблицаПоказателейБД.Добавить();
		
		Если ТрансляцияДебет Тогда
			
			Если Дебетовый Тогда
				
				СтрокаПоказателей.ПолеБД          = "СубконтоДт" + ВидСубконто.Номер;
				
			Иначе
				
				СтрокаПоказателей.ПолеБД          = "СубконтоКт" + ВидСубконто.Номер;
				
			КонецЕсли;
			
		ИначеЕсли ТрансляцияКредит Тогда
			
			Если Дебетовый Тогда
				
				СтрокаПоказателей.ПолеБД          = "СубконтоКт" + ВидСубконто.Номер;
				
			Иначе
				
				СтрокаПоказателей.ПолеБД          = "СубконтоДт" + ВидСубконто.Номер;
				
			КонецЕсли;
		
		ИначеЕсли ИтогЕстьОборотПоСчетам() Тогда
			
			СтрокаПоказателей.ПолеБД          = "Субконто"+?(Дебетовый,"Дт","Кт") + ВидСубконто.Номер;
			
		Иначе
			
			СтрокаПоказателей.ПолеБД          = "Субконто"+ ВидСубконто.Номер;
			
		КонецЕсли;
		
		Если СтрНайти(СтрокаПоказателей.ПолеБД,"СубконтоДт")>0 Тогда
			
			СтрокаПоказателей.НаименованиеБД  = СтрЗаменить(СтрокаПоказателей.ПолеБД,"СубконтоДт", Нстр("ru = 'Субконто'"))+": "+ВидСубконто.ВидСубконто;
			
		ИначеЕсли СтрНайти(СтрокаПоказателей.ПолеБД,"СубконтоКт")>0 Тогда
			
			СтрокаПоказателей.НаименованиеБД  = СтрЗаменить(СтрокаПоказателей.ПолеБД,"СубконтоКт", Нстр("ru = 'Корр. субконто'"))+": "+ВидСубконто.ВидСубконто;
			
		Иначе
			
			СтрокаПоказателей.НаименованиеБД  = СтрокаПоказателей.ПолеБД+": "+ВидСубконто.ВидСубконто;
			
		КонецЕсли;
		
		СтрокаПоказателей.Дебетовый       = Дебетовый;
		СтрокаПоказателей.ТолькоОбороты   = ВидСубконто.ТолькоОбороты;
		СтрокаПоказателей.Измерение       = Ложь;
		
		ТекПризнакиУчетаСубконто=Новый СписокЗначений;
		
		Для Каждого ПризнакУчетаСубконто ИЗ ПризнакиУчетаСубконто Цикл
			
			ТекПризнакиУчетаСубконто.Добавить(ПризнакУчетаСубконто,ПризнакУчетаСубконто, СтрНайти(ВидСубконто.ПризнакиУчетаСубконто,ПризнакУчетаСубконто)>0);
			
		КонецЦикла;
		
		СтрокаПоказателей.ПризнакиУчетаСубконто=ТекПризнакиУчетаСубконто;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, ВидСубконто.ТипДанных,ТипБД,ТипБДПриемник);
				
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьИдентификаторСубконто77(ПсевдонимБД)
	
	МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПсевдонимБД,": ");
	Возврат МассивПутей[МассивПутей.Количество()-1];
				
КонецФункции // ПолучитьСинонимПоля77() 

// Процедура добавляет в таблицу значений мТаблицаПоказателейБД данные по видам аналитики
// полей запроса
//
Процедура ЗаполнитьАналитикуЗапросаВИБ(ОписаниеЗапроса) Экспорт
			
	мТаблицаПоказателейБД.Очистить();

	Для каждого ПараметрЗапроса Из ОписаниеЗапроса.МассивПараметров Цикл

		СтрокаПоказателей = мТаблицаПоказателейБД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоказателей,ПараметрЗапроса);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, ПараметрЗапроса.ТекТипЗначения,ОпределитьРабочийТипБД(),ТипБДПриемник);
						
	КонецЦикла;
	
	Для Каждого Поле ИЗ ОписаниеЗапроса.МассивПолей Цикл

		СтрокаПоказателей = мТаблицаПоказателейБД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоказателей,Поле);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, Поле.ТекТипЗначения,ОпределитьРабочийТипБД(),ТипБДПриемник);
				
	КонецЦикла;
	
КонецПроцедуры


Процедура ПодготовитьСтрокуОтбораВИБ(СтрокаТаблицы) Экспорт
    
    Если ВнутренниеДанные()
        ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется
        ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ
        ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ
        ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда
        
        Возврат;
        
    КонецЕсли;
    
    ТекПараметрВИБ=НайтиСтрокуДанныхБДПоПолю(СтрокаТаблицы.ПолеБД);
    
    Если ТекПараметрВИБ=Неопределено Тогда
        
        Возврат;
        
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НастройкаСоответствия) Тогда
        
        СтрСоответствие=ТаблицаСоответствияБД.Найти(СтрокаТаблицы.ПолеБД,"ПолеБД");
        
        Если Не (СтрСоответствие=Неопределено ИЛИ СтрСоответствие.ТипМетаДанных="Перечисление") Тогда
            
            СтрокаТаблицы.НастройкаСоответствия=СтрСоответствие.НастройкаСоответствия;
            
        КонецЕсли;
        
    КонецЕсли;
    
    Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
        
        СтрокаТаблицы.ТаблицаАналитикиВИБ=?(ПустаяСтрока(ТекПараметрВИБ.СправочникБД),"({["+ТаблицаADO.Имя+"]})",ТекПараметрВИБ.СправочникБД);
        СтрокаТаблицы.ИмяПараметра=СтрокаТаблицы.ПолеБД;
        
    ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ТипМетаданных) И ЗначениеЗаполнено(СтрокаТаблицы.СправочникБД) Тогда
        
        СтрокаТаблицы.ТаблицаАналитикиВИБ=СтрокаТаблицы.ТипМетаданных+"."+СтрокаТаблицы.СправочникБД;
        
    Иначе
        
        СтрокаТаблицы.ТаблицаАналитикиВИБ=ТекПараметрВИБ.ТипМетаданных+"."+ТекПараметрВИБ.СправочникБД;
        
    КонецЕсли;
    
КонецПроцедуры // ПодготовитьСтрокуОтбораВИБ()


// Процедура подготавливает реквизиты операнда для записи в случае использования обращения к внешнему
// источнику через произвольный запрос
//
Процедура ПодготовитьТаблицыДляПроизвольногоЗапросаВИБ() Экспорт
	
	Если УправлениеОтчетамиУХ.ЕстьСинхронизацияПоРеквизитам(ПравилаИспользованияПолейЗапроса) Тогда // Произвольный запрос к внешней ИБ предыдущих редакций
		Возврат;
	КонецЕсли;
	
	ПравилаИспользованияПолейЗапроса.Очистить();
	
	МассивСопоставлено=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Ложь));
	
	Для Каждого СтрокаСоответствия ИЗ МассивСопоставлено Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаСоответствия) Тогда
			
			СтрокаТаблицы= ПравилаИспользованияПолейЗапроса.Добавить();
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				СтрокаТаблицы.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			СтрокаТаблицы.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
			СтрокаТаблицы.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
			
			Если СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				
				СтрокаТаблицы.Поле=СтрокаСоответствия.ПолеБД;
				СтрокаТаблицы.Синоним=СтрокаСоответствия.ПсевдонимБД;
				
			Иначе
				
				СтрокаТаблицы.ФиксированноеЗначение=СтрокаСоответствия.ФиксированноеЗначение;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
			
		НоваяСтрока					= ПравилаИспользованияПолейЗапроса.Добавить();
		НоваяСтрока.Поле			= СтрокаСоответствия.ПолеБД;
		НоваяСтрока.Синоним			= СтрокаСоответствия.ПсевдонимБД;
		НоваяСтрока.СпособЗаполнения= СтрокаСоответствия.СпособЗаполнения;
		
		Если СтрокаСоответствия.АналитикаКонсолидации="Значение" Тогда
			
			НоваяСтрока.КодАналитики="Значение";
			
		КонецЕсли;
		
		Если НЕ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				НоваяСтрока.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			НоваяСтрока.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
							
		КонецЕсли;
		
		НоваяСтрока.НастройкаСоответствия=СтрокаСоответствия.НастройкаСоответствия;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицыДляПроизвольногоЗапросаВИБ()

Процедура ПодготовитьТаблицуПолейДляЗапросаADO()
	
	ПравилаИспользованияПолейЗапроса.Очистить();
	
	МассивСопоставлено=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Ложь));
	
	Для Каждого СтрокаСоответствия ИЗ МассивСопоставлено Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаСоответствия) Тогда
			
			СтрокаТаблицы= ПравилаИспользованияПолейЗапроса.Добавить();
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				СтрокаТаблицы.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			СтрокаТаблицы.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
			СтрокаТаблицы.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
			
			Если СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				
				СтрокаТаблицы.Поле=СтрокаСоответствия.ПолеБД;
				СтрокаТаблицы.Синоним=СтрокаСоответствия.ПсевдонимБД;
				
			Иначе
				
				СтрокаТаблицы.ФиксированноеЗначение=СтрокаСоответствия.ФиксированноеЗначение;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
			
		НоваяСтрока=ПравилаИспользованияПолейЗапроса.Добавить();
						
		НоваяСтрока.Поле=СтрокаСоответствия.ПолеБД;
		
		ТекТаблицаАналитикиВИБ=?(ПустаяСтрока(СтрокаСоответствия.СправочникБД),"({["+ТаблицаADO.Имя+"]})",СтрокаСоответствия.СправочникБД);
		
		НоваяСтрока.ТаблицаАналитикиВИБ=ТекТаблицаАналитикиВИБ;
					
		НоваяСтрока.Синоним=СтрокаСоответствия.ПсевдонимБД;
		
		Если СтрокаСоответствия.АналитикаКонсолидации="Значение" Тогда
			
			НоваяСтрока.КодАналитики="Значение";
			
		КонецЕсли;
		
		Если НЕ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
			
			СтрАналитикаОперанда=мТаблицаВозможныхПолей.Найти(СтрокаСоответствия.АналитикаКонсолидации,"Поле");
			
			Если НЕ СтрАналитикаОперанда=Неопределено Тогда
				НоваяСтрока.АналитикаОперанда = СтрАналитикаОперанда.ВидАналитики;
			КонецЕсли;
			
			НоваяСтрока.КодАналитики=СтрокаСоответствия.АналитикаКонсолидации;
							
		КонецЕсли;
		
		НоваяСтрока.НастройкаСоответствия=СтрокаСоответствия.НастройкаСоответствия;
		НоваяСтрока.СпособЗаполнения=СтрокаСоответствия.СпособЗаполнения;
				
	КонецЦикла;
		
КонецПроцедуры // ПодготовитьТаблицуПолейДляЗапросаADO()
Функция СформироватьОбщийЗапросКРегиструНакопленияБД() Экспорт
	
	// Формирование текста запроса для измерений регистра накоплений.
	Измерения    = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
	ТекстЗапроса = "";
	ГдеЗапрос    = "";
		
	Для Каждого Ресурс Из СписокРесурсовРегистра Цикл
		ТекстЗапроса = ТекстЗапроса 
					   + ?(РегистрБД.ВидРегистра = "Остатки", Ресурс.Значение + "НачальныйОстаток КАК "+Ресурс.Значение+"НачальныйОстаток, " 
					   + Ресурс.Значение + "КонечныйОстаток КАК "+ Ресурс.Значение + "КонечныйОстаток, "
					   + Ресурс.Значение + "Приход КАК "+ Ресурс.Значение + "Приход, "
					   + Ресурс.Значение + "Расход КАК "+ Ресурс.Значение + "Расход, ", "") 
					   
					   + Ресурс.Значение + "Оборот КАК "+ Ресурс.Значение + "Оборот, ";
	КонецЦикла;
	
	
	Для Каждого Элемент Из Измерения Цикл
			
		ТекстЗапроса = ТекстЗапроса + Элемент.ПолеБД + ".* КАК "+Элемент.ПолеБД +", ";
		ГдеЗапрос    = ГдеЗапрос + "("+Элемент.ПолеБД + ").*, ";
			
	КонецЦикла;
			
	Если СтрДлина(ТекстЗапроса) > 2 Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2);
	КонецЕсли;
	
	Если СтрДлина(ГдеЗапрос) > 2 Тогда
		ГдеЗапрос = " {" + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
	КонецЕсли;
	

	ТекстЗапроса = "ВЫБРАТЬ 1 КАК ФиктивноеПоле {ВЫБРАТЬ " 
				   + ТекстЗапроса 
				   + "} ИЗ РегистрНакопления." + РегистрБД.Наименование
				   + ?(РегистрБД.ВидРегистра = "Остатки"
				   	   , ".ОстаткиИОбороты({&ДатаНач}, {&ДатаКон}, , ,"
					   , ".Обороты({&ДатаНач}, {&ДатаКон}, ,") + ТекстОтбора + ГдеЗапрос + ")";
				   
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьЗапросКТаблицеВнутреннегоРегистраБД()
	
	ТекстЗапроса = "";
	ГдеЗапрос    = "";
	
		
	//Для Каждого Ресурс Из СписокРесурсовРегистра Цикл
	//	
	//	ТекстЗапроса = ТекстЗапроса 					   
	//	+ "(СУММА("+ Ресурс.Значение + ")) КАК "+ Ресурс.Значение + ", ";
	//	
	//КонецЦикла;
	
	Для Каждого СтрПоле Из мТаблицаПоказателейБД Цикл
			
		ТекстЗапроса = ТекстЗапроса + СтрПоле.ПолеБД + ".* КАК "+СтрПоле.ПолеБД +", ";
		ГдеЗапрос    = ГдеЗапрос + "("+СтрПоле.ПолеБД + ").*, ";
			
	КонецЦикла;
			
	Если СтрДлина(ТекстЗапроса) > 2 Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2);
	КонецЕсли;
	
	Если СтрДлина(ГдеЗапрос) > 2 Тогда
		ГдеЗапрос = " {ГДЕ " + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
	КонецЕсли;
	

	ТекстЗапроса = "ВЫБРАТЬ СУММА("+РесурсРегистра+") КАК Значение
				|{ВЫБРАТЬ
				|(СУММА("+РесурсРегистра+")) КАК Значение,"
				   + ТекстЗапроса 
				   + "} ИЗ РегистрНакопления." + РегистрБД.Наименование+ "
				   |ГДЕ "+?(РегистрБД.ВидРегистра="Остатки","ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления."+ВидИтога+") И ","")+ТекстОтбора + ГдеЗапрос ;
				   
	Возврат ТекстЗапроса;
		
	
КонецФункции // СформироватьЗапросКТаблицеВнутреннегоРегистраБД()

Функция СформироватьЗапросКТаблицеВнешнегоРегистраБД()
	
	ТекстЗапроса = "";
	ГдеЗапрос    = "";
	ТекстГруппировка="";
	ПоляВложенногоЗапроса="";
	
	// Формируем вложенный запрос к основной таблице регистра с группировкой по выбранным полям.
	
	Если РегистрБД.ВидРегистра="Остатки" ТОГДА
		
		РабочийТекстОтбора="ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления."+ВидИтога+")"+?(СтрДлина(ТекстОтбора)>0," И "+ТекстОтбора,"");
		
	Иначе
		
		РабочийТекстОтбора=ТекстОтбора;
		
	КонецЕсли;
	
	МассивСоответствий=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено,АналитикаОтчета",Истина,Ложь));
	
	Для Каждого Строка ИЗ МассивСоответствий Цикл
		
		Если ЗначениеЗаполнено(Строка.ПолеБД) И Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
			
			ПоляВложенногоЗапроса=ПоляВложенногоЗапроса+",
			|"+Строка.ПолеБД+" КАК "+Строка.АналитикаКонсолидации;
			
			ТекстГруппировка=ТекстГруппировка+",
			|"+Строка.ПолеБД;
			
			ТекстЗапроса=ТекстЗапроса+",ТаблицаРегистра."+Строка.АналитикаКонсолидации+".* КАК "+Строка.АналитикаКонсолидации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляВложенногоЗапроса=ПоляВложенногоЗапроса+",
	|СУММА("+РесурсРегистра+") КАК Значение";
			
	ТекстВложенногоЗапроса="ВЫБРАТЬ "+Сред(ПоляВложенногоЗапроса,2)+"
	|ИЗ РегистрНакопления." + РегистрБД.Наименование;
	
	Если СтрДлина(РабочийТекстОтбора)>0 Тогда
		
		ТекстВложенногоЗапроса=ТекстВложенногоЗапроса+"
		|ГДЕ "+РабочийТекстОтбора;
		
	КонецЕсли;
	
	Если СтрДлина(ТекстГруппировка)>0 Тогда
		
		ТекстВложенногоЗапроса=ТекстВложенногоЗапроса+"
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2);
		
	КонецЕсли;
	
	ТекстЗапроса="ВЫБРАТЬ 1 КАК ПолеОсновнойТаблицыРегистраУХ
	|{ВЫБРАТЬ Значение"+ ?(СтрДлина(ТекстЗапроса)>0,","+Сред(ТекстЗапроса,2),"") + "}
	|ИЗ ("+ТекстВложенногоЗапроса+") КАК ТаблицаРегистра";
	
	Возврат ТекстЗапроса;	
	
КонецФункции // СформироватьЗапросКТаблицеВнутреннегоРегистраБД()

Функция СформироватьОбщийЗапросКРегиструСведенийБД() Экспорт
	
	// Формирование текста запроса для измерений регистра накоплений.
	Измерения    = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
	ТекстЗапроса = "";
	ГдеЗапрос    = "";
				
	Для Каждого Элемент Из Измерения Цикл
			
		ТекстЗапроса = ТекстЗапроса +"," + Элемент.ПолеБД + ".* КАК "+ Элемент.ПолеБД;
		ГдеЗапрос    = ГдеЗапрос + "("+Элемент.ПолеБД+")" + ".*, ";
			
	КонецЦикла;
	
	Для Каждого Ресурс Из СписокРесурсовРегистра Цикл
		ТекстЗапроса = ТекстЗапроса +","+ Ресурс.Значение; 
	КонецЦикла;
	
	ТекстЗапроса=Сред(ТекстЗапроса,2);
			
	Если РегистрБД.Периодический И (НЕ ПустаяСтрока(ВидСреза)) Тогда
		
		Если СтрДлина(ГдеЗапрос) > 2 Тогда
			ГдеЗапрос = " {" + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ 1 КАК ФиктивноеПоле {ВЫБРАТЬ "+ ТекстЗапроса + "} ИЗ РегистрСведений." + РегистрБД.Наименование+"."+ВидСреза+"({&ДатаНач},"+ТекстОтбора + ГдеЗапрос + ")";
		
	Иначе
		
		Если СтрДлина(ТекстОтбора)>0 Тогда
			
			ТекстЗапросПараметры=" ГДЕ "+ТекстОтбора;
			
		КонецЕсли;
			
		Если СтрДлина(ГдеЗапрос) > 2 Тогда
			
			ГдеЗапрос = " {ГДЕ " + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
			
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ 1 КАК ФиктивноеПоле {ВЫБРАТЬ "+ ТекстЗапроса + "} ИЗ РегистрСведений." + РегистрБД.Наименование+ТекстЗапросПараметры+ГдеЗапрос;
		
	КонецЕсли;	
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьОбщийЗапросКСправочникуБД() Экспорт
	
	ТекстЗапроса = "";
	ГдеЗапрос    = "";
	
	Для Каждого СтрРеквизит ИЗ мТаблицаПоказателейБД Цикл
		
		ТекстЗапроса = ТекстЗапроса +","+ СтрРеквизит.ПолеБД +?(СтрРеквизит.ТипМетаДанных="Простой"," КАК ", ".* КАК ")+СтрРеквизит.ПолеБД;
		ГдеЗапрос    = ГдеЗапрос +","+ "("+СтрРеквизит.ПолеБД+")" + ?(СтрРеквизит.ТипМетаДанных="Простой","", ".*");
		
	КонецЦикла;		
		
	ТекстЗапроса = "ВЫБРАТЬ 1 КАК ФиктивноеПоле {ВЫБРАТЬ "+ Сред(ТекстЗапроса,2) + "} 
	|ИЗ Справочник." + ОбъектБД.Наименование+?(ЗначениеЗаполнено(ТабличнаяЧастьБД),"."+ТабличнаяЧастьБД.Имя,"")+?(СтрДлина(ТекстОтбора)>0," ГДЕ "+ТекстОтбора,"")+" {ГДЕ " + Сред(ГдеЗапрос,2) + "}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьОбщийЗапросКДокументуБД() Экспорт
	
	ТекстЗапроса = "";
	ГдеЗапрос    = "";
	
	Для Каждого СтрРеквизит ИЗ мТаблицаПоказателейБД Цикл
		
		ТекстЗапроса = ТекстЗапроса + СтрРеквизит.ПолеБД +?(СтрРеквизит.ТипМетаДанных="Простой",", ", ".*, ");
		ГдеЗапрос    = ГдеЗапрос + "("+СтрРеквизит.ПолеБД+")" + ?(СтрРеквизит.ТипМетаДанных="Простой",", ", ".*, ");
		
	КонецЦикла;
	
	Если СтрДлина(ТекстЗапроса) > 2 Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2);
	КонецЕсли;
	
	ТекстЗапросПараметры=" ГДЕ Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	
	Если СтрДлина(ТекстОтбора)>0 Тогда
		
		ТекстЗапросПараметры=ТекстЗапросПараметры+" И "+ТекстОтбора;
		
	КонецЕсли;
	
	Если СтрДлина(ГдеЗапрос) > 2 Тогда
		
		ГдеЗапрос = " {ГДЕ " + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ 1 КАК ФиктивноеПоле {ВЫБРАТЬ "+ ТекстЗапроса + "} 
	|ИЗ Документ." + ОбъектБД.Наименование+?(ЗначениеЗаполнено(ТабличнаяЧастьБД),"."+ТабличнаяЧастьБД.Имя,"")+ТекстЗапросПараметры+ГдеЗапрос;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьОбщийЗапросКРегиструБухгалтерииБД() Экспорт
	
	ГдеЗапрос    = "";
	
	Если ЗначениеЗаполнено(КоррСчет) И ВидИтога="Оборот" Тогда
		
		ТекстЗапроса = "СчетДт.* КАК СчетДт,
		|СчетКт.* КАК СчетКт,";
		
	Иначе
		
		ТекстЗапроса = "Счет.* КАК Счет,";
		
	КонецЕсли;
	
	ДополнениеКода=?(СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии,"",".Код");
	
	// Формирование текста запроса для измерений регистра бухгалтерии.
	Измерения    = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
	
	Для Каждого Элемент Из Измерения Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + Элемент.ПолеБД + ".* КАК " + Элемент.ПолеБД + ", ";
		ГдеЗапрос    = ГдеЗапрос + "
		|(" + Элемент.ПолеБД + ").*, ";
		
	КонецЦикла;
	
	// Формирование текста запроса для аналитик счета.
	Для Инд = 1 По ПланСчетовБД.МаксимальноеКоличествоСубконто Цикл
		Если ВидИтога="Оборот" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|СубконтоДт" + Инд + ".* КАК СубконтоДт" + Инд + ", 
			|СубконтоКт" + Инд + ".* КАК СубконтоКт" + Инд + ",";
			ГдеЗапрос    = ГдеЗапрос + "
			|(СубконтоДт" + Инд + ").*,
			|(СубконтоКт" + Инд + ").*, ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|Субконто" + Инд + ".* КАК Субконто" + Инд + ", ";
			ГдеЗапрос    = ГдеЗапрос + "
			|(Субконто" + Инд + ").*, ";
		КонецЕсли;
	КонецЦикла;
	
	ТекстРесурсы="";
	ТекстЗапроса = "ВЫБРАТЬ 1 КАК ФиктивноеПоле {ВЫБРАТЬ "+ТекстЗапроса;
	
	Если НЕ ВидИтога="Оборот" Тогда
		
		Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
			
			ТекстРесурсы=ТекстРесурсы+",
			|"+Ресурс.Имя+"НачальныйОстаток КАК "+Ресурс.Имя+"НачальныйОстаток ,
			|"+Ресурс.Имя+"НачальныйОстатокДт КАК "+Ресурс.Имя+"НачальныйОстатокДт,
			|"+Ресурс.Имя+"НачальныйОстатокКт КАК "+Ресурс.Имя+"НачальныйОстатокКт,
			|"+Ресурс.Имя+"НачальныйРазвернутыйОстатокДт КАК "+Ресурс.Имя+"НачальныйРазвернутыйОстатокДт,
			|"+Ресурс.Имя+"НачальныйРазвернутыйОстатокКт КАК "+Ресурс.Имя+"НачальныйРазвернутыйОстатокКт,
			|"+Ресурс.Имя+"КонечныйОстаток КАК "+Ресурс.Имя+"КонечныйОстаток,
			|"+Ресурс.Имя+"КонечныйОстатокДт КАК "+Ресурс.Имя+"КонечныйОстатокДт,
			|"+Ресурс.Имя+"КонечныйОстатокКт КАК "+Ресурс.Имя+"КонечныйОстатокКт,
			|"+Ресурс.Имя+"КонечныйРазвернутыйОстатокДт КАК "+Ресурс.Имя+"КонечныйРазвернутыйОстатокДт,
			|"+Ресурс.Имя+"КонечныйРазвернутыйОстатокКт КАК "+Ресурс.Имя+"КонечныйРазвернутыйОстатокКт,
			|"+Ресурс.Имя+"Оборот КАК "+Ресурс.Имя+"Оборот,
			|"+Ресурс.Имя+"ОборотДт КАК "+Ресурс.Имя+"ОборотДт,
			|"+Ресурс.Имя+"ОборотКт КАК "+Ресурс.Имя+"ОборотКт";
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+Сред(ТекстРесурсы,2)+"} ИЗ
		|РегистрБухгалтерии."+ РегистрБД.Наименование + ".ОстаткиИОбороты({&ДатаНач}, {&ДатаКон}, , , Счет"+ДополнениеКода+" В (&Счет)"+?(ПланСчетовБД.МаксимальноеКоличествоСубконто>0,", ","")+",";
		
	Иначе
		
		Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
			
			Если Ресурс.Балансовый Тогда
				ТекстРесурсы=ТекстРесурсы+",
				|"+Ресурс.Имя+"Оборот КАК "+Ресурс.Имя+"Оборот";
			Иначе
				ТекстРесурсы=ТекстРесурсы+",
				|"+Ресурс.Имя+"ОборотДт КАК "+Ресурс.Имя+"ОборотДт,
				|"+Ресурс.Имя+"ОборотКт КАК "+Ресурс.Имя+"ОборотКт";
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+Сред(ТекстРесурсы,2)+"} ИЗ  
		|РегистрБухгалтерии."+ РегистрБД.Наименование + ".ОборотыДтКт({&ДатаНач}, {&ДатаКон}, ,СчетДт"+ДополнениеКода+" В (&СчетДт)"+
			?(ПланСчетовБД.МаксимальноеКоличествоСубконто>0,", ","")+",СчетКт"+ДополнениеКода+" В (&СчетКт)"+
			?(ПланСчетовБД.МаксимальноеКоличествоСубконто>0,", ","")+",";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+ТекстОтбора;
	
	Если СтрДлина(ГдеЗапрос) > 1 Тогда
		ТекстЗапроса = ТекстЗапроса + " {" + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ")";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьОбщийЗапросКДвижениямССубконтоБД() Экспорт
	
	ДополнениеКода=?(СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии,"",".Код");
	
	ГдеЗапрос    = "(Регистратор).*,";
	ТекстЗапроса = "ВЫБРАТЬ Период,Регистратор,СчетДт,СчетКт {ВЫБРАТЬ Период,Регистратор.*,СчетДт.*,СчетКт.*,";
				
	// Формирование текста запроса для измерений регистра бухгалтерии.

	Для Каждого Элемент Из РегистрБД.Измерения Цикл
		
		Если НЕ Элемент.Балансовый Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|" + Элемент.Имя + "Дт.*, 
			|" + Элемент.Имя + "Кт.*, ";
			ГдеЗапрос    = ГдеЗапрос + "
			|(" + Элемент.Имя + "Дт).*,
			|(" + Элемент.Имя + "Кт).*, ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|" + Элемент.Имя + ".*, ";
			ГдеЗапрос    = ГдеЗапрос + "
			|(" + Элемент.Имя + ").*, ";
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование текста запроса для аналитик счета.
	Для Инд = 1 По ПланСчетовБД.МаксимальноеКоличествоСубконто Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|СубконтоДт" + Инд + ".*, 
		|СубконтоКт" + Инд + ".*,";
		ГдеЗапрос    = ГдеЗапрос + "
		|(СубконтоДт" + Инд + ").*,
		|(СубконтоКт" + Инд + ").*, ";
		
	КонецЦикла;
	
	ТекстРесурсы="";
	
	Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
		
		Если Ресурс.Балансовый Тогда
			ТекстРесурсы=ТекстРесурсы+",
			|"+Ресурс.Имя;
		Иначе
			ТекстРесурсы=ТекстРесурсы+",
			|"+Ресурс.Имя+"Дт,
			|"+Ресурс.Имя+"Кт";
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+Сред(ТекстРесурсы,2)+"} ИЗ  
	|РегистрБухгалтерии."+ РегистрБД.Наименование + ".ДвиженияССубконто({&ДатаНач}, {&ДатаКон}";
	
	Если ТрансляцияКредит Тогда
		
		ТекстЗапроса=ТекстЗапроса+",Активность=Истина И СчетКт"+ДополнениеКода+" В (&СчетДт)";
		
		Если ЗначениеЗаполнено(КоррСчет) Тогда
			
			ТекстЗапроса=ТекстЗапроса+" И СчетДт"+ДополнениеКода+" В (&СчетКт)";
			
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+",Активность=Истина И СчетДт"+ДополнениеКода+" В (&СчетДт)";
		
		Если ЗначениеЗаполнено(КоррСчет) Тогда
			
			ТекстЗапроса=ТекстЗапроса+" И СчетКт"+ДополнениеКода+" В (&СчетКт)";
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбора) Тогда
		
		ТекстЗапроса=ТекстЗапроса+" И "+ТекстОтбора;
		
	КонецЕсли;
	
	Если СтрДлина(ГдеЗапрос) > 1 Тогда
		ТекстЗапроса = ТекстЗапроса + " {" + Лев(ГдеЗапрос, СтрДлина(ГдеЗапрос) - 2) + "}";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ")";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВернутьТекстВнутреннегоЗапроса(ТекущаяСтрока, ИмяТаблицыРодителя)
	
	ТекстЗапроса = "LEFT JOIN [" + ТекущаяСтрока.ИмяТаблицы + "]";
	Для Каждого ВнутренниеЗапросы Из ТекущаяСтрока.Строки Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ВернутьТекстВнутреннегоЗапроса(ВнутренниеЗапросы, ТекущаяСтрока.ИмяТаблицы);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ON [" + ИмяТаблицыРодителя+ "].[" + ТекущаяСтрока.ПолеСвязаннойТаблицы + "]=[" + ТекущаяСтрока.ИмяТаблицы + "].["+ ТекущаяСтрока.ПолеТаблицы +"]";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоГруппеРаскрытия()
	
	АналитикВидаОтчета=мТаблицаВидовАналитикВидаОтчетаОтбор.Количество();
	АналитикГруппыРаскрытия=ГруппаРаскрытияОтбор.ЧислоАналитик;
	
	ЕстьПоляАналитик=Ложь;
	ЕстьОтборПоАналитике=Ложь;
	
	ТекстЗапросаАналитика =
	"ВЫБРАТЬ
	|ТаблицаАналитика.Показатель";
	ТекстЗапросаСинтетика =
	"ВЫБРАТЬ
	|ТаблицаСинтетика.Показатель";
	СписокКодовПоказателей=Новый СписокЗначений;
	
	ТекстГруппировкаСинтетика="ТаблицаСинтетика.Показатель";
	ТекстГруппировкаАналитика="ТаблицаАналитика.Показатель";
	ТекстГруппировкаИтог="";
	ТекстСуммаИтог="";
	ТекстУсловиеИтог="";
	ТекстЗапросИтог="";
	ТекстЗапросСвод="";
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходноеПоле=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.Поле,".")[0];
		
		ПолеАналитики=мТаблицаВозможныхПолейОтбор.Найти(ИсходноеПоле,"Поле");
		
		Если НЕ (ПолеАналитики=Неопределено 
			ИЛИ ПолеАналитики.АналитикаОтчета) Тогда
			
			Если ПолеАналитики.ТаблицаАналитики="Простой" Тогда
				
				СписокКодовПоказателей.Добавить(СтрПоле.Поле,СтрПоле.КодАналитики);
				
				ТекстСуммаИтог=ТекстСуммаИтог+",
				|СУММА("+СтрПоле.КодАналитики+") КАК "+СтрПоле.КодАналитики;
				
				ТекстУсловиеИтог=ТекстУсловиеИтог+" ИЛИ 
				|СУММА("+СтрПоле.КодАналитики+")<>0";
				
				ТекстЗапросСвод=ТекстЗапросСвод+",
				|ВЫБОР КОГДА ТаблицаЗначенийПоказателей.Показатель=&"+СтрПоле.Поле+" ТОГДА ТаблицаЗначенийПоказателей.Значение ИНАЧЕ 0 Конец КАК "+СтрПоле.КодАналитики;
				
			Иначе
				
				ТекстЗапросаАналитика=ТекстЗапросаАналитика+",
				|ТаблицаАналитика."+СтрПоле.Поле+" КАК "+СтрПоле.КодАналитики;
				
				ТекстГруппировкаАналитика=ТекстГруппировкаАналитика+",ТаблицаАналитика."+СтрПоле.Поле;
				
				ТекстЗапросаСинтетика=ТекстЗапросаСинтетика+",
				|Неопределено КАК "+СтрПоле.КодАналитики;
				
				ЕстьПоляАналитик=Истина;
				
			КонецЕсли;
			
		Иначе
			
			ТекстЗапросаСинтетика=ТекстЗапросаСинтетика+",
			|Неопределено КАК "+СтрПоле.КодАналитики;
		
			ТекстЗапросаАналитика=ТекстЗапросаАналитика+",
			|ТаблицаАналитика."+СтрПоле.Поле+" КАК "+СтрПоле.КодАналитики;
			ТекстГруппировкаАналитика=ТекстГруппировкаАналитика+",ТаблицаАналитика."+СтрПоле.Поле;
				
		КонецЕсли;
		
		Если ПолеАналитики=Неопределено ИЛИ (НЕ ПолеАналитики.ТаблицаАналитики="Простой") Тогда
			
			ТекстЗапросСвод=ТекстЗапросСвод+",
			|ТаблицаЗначенийПоказателей."+СтрПоле.КодАналитики+" КАК "+СтрПоле.КодАналитики;
			
			ТекстГруппировкаИтог=ТекстГруппировкаИтог+",
			|ТаблицаЗначенийСвод."+СтрПоле.КодАналитики;
			
			ТекстЗапросИтог=ТекстЗапросИтог+",
			|ТаблицаЗначенийСвод."+СтрПоле.КодАналитики;
	
		КонецЕсли;
						 
	 КонецЦикла;
	 
	 Для Каждого СтрПоле ИЗ ТаблицаПараметровОтбораБД Цикл
		 
		ИсходноеПоле=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.ПолеБД,".")[0];
		
		ПолеАналитики=мТаблицаВозможныхПолейОтбор.Найти(ИсходноеПоле,"Поле");
		
		Если НЕ (ПолеАналитики=Неопределено 
			ИЛИ ПолеАналитики.АналитикаОтчета 
			ИЛИ ПолеАналитики.ТаблицаАналитики="Простой") Тогда 
					
			 ЕстьОтборПоАналитике=Истина;
			 Прервать;
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 ИмяТаблицыСинтетики=?(АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+АналитикВидаОтчета);
	 
	 Если АналитикГруппыРаскрытия=0 И ГруппаРаскрытияОтбор.Валютная Тогда
		 
		 ИмяТаблицыАналитики=?(АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовВалютные","ЗначенияПоказателейОтчетов"+АналитикВидаОтчета);
		 
	 Иначе
		 
		 ИмяТаблицыАналитики="ЗначенияПоказателейОтчетов"+(АналитикВидаОтчета+АналитикГруппыРаскрытия);
		 
	 КонецЕсли;
	 
	 ТекстВыборкиРегистры="";
	 
	 Если НЕ (ЕстьОтборПоАналитике ИЛИ ТолькоАналитическиеЗначения) Тогда // Получаем данные из таблицы синтетики
		 
		 ТекстВыборкиРегистры=ТекстЗапросаСинтетика+",
		 |ИСТИНА КАК ИтогПоПоказателю,
		 |СУММА(ТаблицаСинтетика.Значение) КАК Значение
		 |ИЗ РегистрСведений."+ИмяТаблицыСинтетики+" КАК ТаблицаСинтетика
		 |ГДЕ ТаблицаСинтетика.Показатель В(&СписокПоказателей)"+?(ПустаяСтрока(ТекстОтбора),""," И "+ТекстОтбора)+"
		 |{Где Версия.Активность КАК Активность}
		 |СГРУППИРОВАТЬ ПО "+ТекстГруппировкаСинтетика;
		 
		 Если ЕстьПоляАналитик Тогда
			 
			 ТекстВыборкиРегистры=ТекстВыборкиРегистры+"
			 |ОБЪЕДИНИТЬ ВСЕ
			 |"+ТекстЗапросаАналитика+",
			 |ЛОЖЬ КАК ИтогПоПоказателю,
			 |СУММА(ТаблицаАналитика.Значение) КАК Значение
			 |ИЗ РегистрСведений."+ИмяТаблицыАналитики+" КАК ТаблицаАналитика
			 |ГДЕ ТаблицаАналитика.Показатель В(&СписокПоказателей)"+?(ПустаяСтрока(ТекстОтбора),""," И "+ТекстОтбора)+"
			 |{Где Версия.Активность КАК Активность}
			 |СГРУППИРОВАТЬ ПО "+ТекстГруппировкаАналитика;
			 
		 КонецЕсли;
		 
	 Иначе
		 
		 ТекстВыборкиРегистры=ТекстЗапросаАналитика+",
		 |ЛОЖЬ КАК ИтогПоПоказателю,
		 |СУММА(ТаблицаАналитика.Значение) КАК Значение
		 |ИЗ РегистрСведений."+ИмяТаблицыАналитики+" КАК ТаблицаАналитика
		 |ГДЕ ТаблицаАналитика.Показатель В(&СписокПоказателей)"+?(ПустаяСтрока(ТекстОтбора),""," И "+ТекстОтбора)+"
		 |{Где Версия.Активность КАК Активность}
		 |СГРУППИРОВАТЬ ПО "+ТекстГруппировкаАналитика;
		 
	 КонецЕсли;
	 
	 ТекстЗапросСвод="ВЫБРАТЬ "+Сред(ТекстЗапросСвод,2)+",ИтогПоПоказателю
	 |ИЗ ("+ТекстВыборкиРегистры+") КАК ТаблицаЗначенийПоказателей";
	 
	 ТекстЗапросИтог="ВЫБРАТЬ "+Сред(ТекстЗапросИтог,2)+ТекстСуммаИтог+",ИтогПоПоказателю
	 |ИЗ ("+ТекстЗапросСвод+") КАК ТаблицаЗначенийСвод
	 |СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировкаИтог,2)+",ИтогПоПоказателю
	 |ИМЕЮЩИЕ "+Сред(ТекстУсловиеИтог,5);
	 
	 Возврат ТекстЗапросИтог;
		
КонецФункции // СформироватьТекстЗапросаПоГруппеРаскрытия() 

Функция РаспарситьПутьВМассив(Знач ИмяБазы)
	
	ПозСтрока_ЛеваяСкобка = СтрНайти(ИмяБазы, "<");
	
	Если ПозСтрока_ЛеваяСкобка = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТаблицы = Сред(ИмяБазы, 2, ПозСтрока_ЛеваяСкобка - 2);
	ИмяБазы = Сред(ИмяБазы, ПозСтрока_ЛеваяСкобка);
	
	ПозСтрока_ПраваяСкобка = СтрНайти(ИмяБазы, ">");	
	Если ПозСтрока_ПраваяСкобка = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолеСвязаннойТаблицы = Сред(ИмяБазы, 2, ПозСтрока_ПраваяСкобка - 2);
	ИмяБазы = Сред(ИмяБазы, ПозСтрока_ПраваяСкобка + 1);
	
	ПозСтрока_ЛеваяСкобка = СтрНайти(ИмяБазы, "<");
	ПозСтрока_ПраваяСкобка = СтрНайти(ИмяБазы, ">");
	Если ПозСтрока_ЛеваяСкобка = 0 ИЛИ ПозСтрока_ПраваяСкобка = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолеТаблицы = Сред(ИмяБазы, ПозСтрока_ЛеваяСкобка + 1, ПозСтрока_ПраваяСкобка - 2);
	
	Возврат Новый Структура("ИмяТаблицы, ПолеСвязаннойТаблицы, ПолеТаблицы", ИмяТаблицы, ПолеСвязаннойТаблицы, ПолеТаблицы);
		
КонецФункции

Процедура СформироватьТекстЗапросаКБД() Экспорт
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		ЗаполнитьПланСчетовБД();
		
		Если ТрансляцияДебет 
			ИЛИ ТрансляцияКредит
			ИЛИ ИтогЕстьОборотПоСчетам() Тогда
			
			ТекстЗапросаМодуля=СформироватьОбщийЗапросКДвижениямССубконтоБД();
			
		Иначе
			
			ТекстЗапросаМодуля=СформироватьОбщийЗапросКРегиструБухгалтерииБД();
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления Тогда
		
		Если ОсновнаяТаблицаРегистра Тогда
			
			ТекстЗапросаМодуля=СформироватьЗапросКТаблицеВнешнегоРегистраБД();
			
		Иначе
			
			ТекстЗапросаМодуля=СформироватьОбщийЗапросКРегиструНакопленияБД();
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		Если ОсновнаяТаблицаРегистра Тогда
			
			ТекстЗапросаМодуля=СформироватьЗапросКТаблицеВнутреннегоРегистраБД();
			
		Иначе
			
			ТекстЗапросаМодуля=СформироватьОбщийЗапросКРегиструНакопленияБД();
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		ТекстЗапросаМодуля=СформироватьОбщийЗапросКРегиструСведенийБД();
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		ТекстЗапросаМодуля = СтрЗаменить(ВидИтога,"#",ДтКт) + "_" + РесурсРегистра;
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
		
		ТекстЗапросаМодуля = РегистрБД.Наименование + Символы.ПС + РесурсРегистра + Символы.ПС + ВидИтога;
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		ТекстЗапросаМодуля = СформироватьТекстЗапросаПоГруппеРаскрытия();
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
		
		ТекстЗапросаМодуля=СформироватьОбщийЗапросКСправочникуБД();
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
		
		ТекстЗапросаМодуля=СформироватьОбщийЗапросКДокументуБД();
			
	ИначеЕсли НЕ (СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ФункцияНаВстроенномЯзыке) Тогда
		
		ТекстЗапросаМодуля=ТекстОтбора;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекстЗапроса() 

Функция ПреобразоватьДеревоПараметровВТаблицу() Экспорт
	
	Таблица=Новый ТаблицаЗначений;
	
	УточненияСпособовОпределенияКопия = УточненияСпособовОпределения.Выгрузить();
		
	УточненияСпособовОпределения.Очистить();
	
	Для Каждого Колонка ИЗ ДеревоПараметровОтбораБД.Колонки Цикл
		
		Таблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
		
	КонецЦикла;	
		
	СпособыВычисленияДляПустых = Новый Массив;
	СпособыВычисленияДляПустых.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
	СпособыВычисленияДляПустых.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению);
				
	Для Каждого Строка ИЗ ДеревоПараметровОтбораБД.Строки Цикл
		
		ПодготовитьСтрокуОтбораВИБ(Строка);
		
		НоваяСтрока=Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		МассивОпределения=мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(Новый Структура("СпособВычисления",Строка.СпособВычисленияПараметра));
		
		Если МассивОпределения.Количество()>0 Тогда
			
			НоваяСтрока.ТипРасчета=МассивОпределения[0].ТипРасчета;
			
		КонецЕсли;
		
		Если ПустаяСтрока(НоваяСтрока.ИмяПараметра)
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
			ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда 
			
			НоваяСтрока.ИмяПараметра=Строка.ПолеБД;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеСпособаОпределения) 
			Или (СпособыВычисленияДляПустых.Найти(Строка.СпособВычисленияПараметра) <> Неопределено) Тогда
			
			ДобавитьСтрокиУточненияОпределения(Строка);
			
		КонецЕсли;
		
		Если Строка.УточнениеСпособаОпределения = Неопределено 
			И Строка.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПустаяСсылка() Тогда
			
			УточнениеИсточник = УточненияСпособовОпределенияКопия.Найти(Строка.ПолеБД, "ПолеБД");
			
			Если УточнениеИсточник <> Неопределено тогда 
				НовоеУточнение = УточненияСпособовОпределения.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеУточнение, УточнениеИсточник);
			КонецЕсли;
			
			ПараметрОтбораИсточник = ТаблицаПараметровОтбораБД.Найти(Строка.ПолеБД, "ПолеБД");
			СтрокаТаблицы = Таблица.Найти(Строка.ПолеБД, "ПолеБД");
			
			Если ПараметрОтбораИсточник <> Неопределено И СтрокаТаблицы <> Неопределено тогда
				СтрокаТаблицы.СпособВычисленияПараметра = ПараметрОтбораИсточник.СпособВычисленияПараметра;
				СтрокаТаблицы.УточнениеСпособаОпределения = ?(УточнениеИсточник <> Неопределено, УточнениеИсточник.Значение, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
							
		НоваяСтрока.ИдентификаторСтроки=Таблица.Индекс(НоваяСтрока)+1;
		
		ДобавитьПодчиненныеСтрокиДерева(Таблица,Строка.Строки,НоваяСтрока.ИдентификаторСтроки);
		
	КонецЦикла; 
	
	// Добавляем при необходимости предопределенные отборы по измерению плана счетов.
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		И ЗначениеЗаполнено(РегистрБД) Тогда
		
		Если (НЕ РегистрБД.Измерения.Найти("ПланСчетов")=Неопределено) Тогда
			
			ДобавитьОтборИзмерениеПланСчетов(Таблица,"ПланСчетов",ПланСчетовБД.Наименование);
						
		ИначеЕсли (НЕ РегистрБД.Измерения.Найти("ПланСчетовБД")=Неопределено) Тогда
			
			ДобавитьОтборИзмерениеПланСчетов(Таблица,"ПланСчетовБД",ПланСчетовБД.Наименование);
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		И ЗначениеЗаполнено(РегистрБД) Тогда
		
		Если (НЕ РегистрБД.Измерения.Найти("ПланСчетов")=Неопределено) Тогда
			
			ДобавитьОтборИзмерениеПланСчетов(Таблица,"ПланСчетов",ПланСчетовБД);
						
		ИначеЕсли (НЕ РегистрБД.Измерения.Найти("ПланСчетовБД")=Неопределено) Тогда
			
			ДобавитьОтборИзмерениеПланСчетов(Таблица,"ПланСчетовБД",ПланСчетовБД);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Таблица;
			
КонецФункции // ПреобразоватьДеревоВТаблицуЗначений() 

Процедура ДобавитьОтборИзмерениеПланСчетов(Таблица,ИмяИзмерения,ЗначениеОтбора) Экспорт
	
	Если НЕ Таблица.Найти(ИмяИзмерения,"ПолеБД")=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяИзмерения="ПланСчетов" Тогда
		
		Если ТипЗнч(ЗначениеОтбора)=Тип("Строка") Тогда
			
			НоваяСтрока=Таблица.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Таблица.Индекс(НоваяСтрока)+1;
			НоваяСтрока.ИмяПараметра="ПланСчетов";
			НоваяСтрока.НаименованиеБД="План счетов";
			НоваяСтрока.ПолеБД="ПланСчетов";
			НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			НоваяСтрока.ТаблицаАналитикиВИБ="Справочник.ПланыСчетовМеждународногоУчета";
						
			НоваяСтрока.ТипРасчета="Простой";
						
			СтрокаУточнение=УточненияСпособовОпределения.Добавить();
			СтрокаУточнение.Значение=ЗначениеОтбора;
			СтрокаУточнение.ИмяПараметра="ПланСчетов";
			СтрокаУточнение.ПолеБД="ПланСчетов";
			СтрокаУточнение.Представление=ЗначениеОтбора;
			СтрокаУточнение.Тип="СписокЗначений";
			
		Иначе 
			
			НоваяСтрока=Таблица.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Таблица.Индекс(НоваяСтрока)+1;
			НоваяСтрока.ИмяПараметра="ПланСчетов";
			НоваяСтрока.НаименованиеБД="План счетов";
			НоваяСтрока.ПолеБД="ПланСчетов";
			НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			
			НоваяСтрока.ТипРасчета="Простой";
									
			СтрокаУточнение=УточненияСпособовОпределения.Добавить();
			СтрокаУточнение.Значение=ЗначениеОтбора;
			СтрокаУточнение.ИмяПараметра="ПланСчетов";
			СтрокаУточнение.ПолеБД="ПланСчетов";
			СтрокаУточнение.Тип="Справочник.ПланыСчетовМеждународногоУчета";
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ЗначениеОтбора)=Тип("Строка") Тогда
			
			НоваяСтрока=Таблица.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Таблица.Индекс(НоваяСтрока)+1;
			НоваяСтрока.ИмяПараметра="ПланСчетовБД";
			НоваяСтрока.НаименованиеБД="План счетов";
			НоваяСтрока.ПолеБД="ПланСчетовБД";
			НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			НоваяСтрока.ТаблицаАналитикиВИБ="Справочник.ПланыСчетовБД";
						
			НоваяСтрока.ТипРасчета="Простой";
						
			СтрокаУточнение=УточненияСпособовОпределения.Добавить();
			СтрокаУточнение.Значение=ЗначениеОтбора;
			СтрокаУточнение.ИмяПараметра="ПланСчетовБД";
			СтрокаУточнение.ПолеБД="ПланСчетовБД";
			СтрокаУточнение.Представление=ЗначениеОтбора;
			СтрокаУточнение.Тип="СписокЗначений";
			
		Иначе
			
			НоваяСтрока=Таблица.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Таблица.Индекс(НоваяСтрока)+1;
			НоваяСтрока.ИмяПараметра="ПланСчетовБД";
			НоваяСтрока.НаименованиеБД="План счетов БД";
			НоваяСтрока.ПолеБД="ПланСчетовБД";
			НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			
			НоваяСтрока.ТипРасчета="Простой";
						
			СтрокаУточнение=УточненияСпособовОпределения.Добавить();
			СтрокаУточнение.Значение=ЗначениеОтбора;
			СтрокаУточнение.ИмяПараметра="ПланСчетовБД";
			СтрокаУточнение.ПолеБД="ПланСчетовБД";
			СтрокаУточнение.Тип="Справочник.ПланыСчетовБД";
			
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры // ДобавитьОтборИзмерениеПланСчетов() 

Процедура ДобавитьПодчиненныеСтрокиДерева(Таблица,КоллекцияСтрок,ЗНАЧ ИдентификаторРодителя)
	
	СпособыВычисленияДляПустых = Новый Массив;
	СпособыВычисленияДляПустых.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
	СпособыВычисленияДляПустых.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению);
		
	Для Каждого Строка ИЗ КоллекцияСтрок Цикл
		
		ПодготовитьСтрокуОтбораВИБ(Строка);
		
		НоваяСтрока=Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		МассивОпределения=мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(Новый Структура("СпособВычисления",Строка.СпособВычисленияПараметра));
		
		Если МассивОпределения.Количество()>0 Тогда
			
			НоваяСтрока.ТипРасчета=МассивОпределения[0].ТипРасчета;
			
		КонецЕсли;	
		
		Если ПустаяСтрока(НоваяСтрока.ИмяПараметра) Тогда 
			НоваяСтрока.ИмяПараметра=Строка.ПолеБД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеСпособаОпределения)
			Или (СпособыВычисленияДляПустых.Найти(Строка.СпособВычисленияПараметра) <> Неопределено) Тогда
			
			ДобавитьСтрокиУточненияОпределения(Строка);
			
		КонецЕсли;
		
		НоваяСтрока.ИдентификаторСтроки=Таблица.Индекс(НоваяСтрока)+1;
		НОваяСтрока.ИдентификаторРодителя=ИдентификаторРодителя;
		
		ДобавитьПодчиненныеСтрокиДерева(Таблица,Строка.Строки,НоваяСтрока.ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПодчиненныеСтрокиДерева()

Процедура ДобавитьСтрокиУточненияОпределения(Строка)
	
	Если ТипЗнч(Строка.УточнениеСпособаОпределения)=Тип("СписокЗначений") Тогда
		
		Для Каждого Элемент ИЗ Строка.УточнениеСпособаОпределения Цикл
			
			НоваяСтрока=УточненияСпособовОпределения.Добавить();
			
			НоваяСтрока.ПолеБД		=Строка.ПолеБД;
			НоваяСтрока.ИмяПараметра=Строка.ИмяПараметра;
			
			НоваяСтрока.Значение=Элемент.Значение;
			НоваяСтрока.Представление=Элемент.Представление;
			НоваяСтрока.Пометка=Элемент.Пометка;
			НоваяСтрока.Тип="СписокЗначений";
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Строка.УточнениеСпособаОпределения)=Тип("Массив") Тогда
		
		Для Каждого Элемент ИЗ Строка.УточнениеСпособаОпределения Цикл
			
			НоваяСтрока=УточненияСпособовОпределения.Добавить();
			
			НоваяСтрока.ПолеБД=Строка.ПолеБД;
			НоваяСтрока.ИмяПараметра=Строка.ИмяПараметра;
			
			НоваяСтрока.Значение=Элемент;
			НоваяСтрока.Тип="Массив";
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Строка.УточнениеСпособаОпределения)=Тип("Структура") Тогда
		
		Для Каждого КлючИЗначение ИЗ Строка.УточнениеСпособаОпределения Цикл
			
			НоваяСтрока=УточненияСпособовОпределения.Добавить();
			
			НоваяСтрока.ПолеБД=Строка.ПолеБД;
			НоваяСтрока.ИмяПараметра=Строка.ИмяПараметра;
			
			НоваяСтрока.Значение=КлючИЗначение.Значение;
			НоваяСтрока.Представление=КлючИЗначение.Ключ;
			НоваяСтрока.Тип="Структура";
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока=УточненияСпособовОпределения.Добавить();
		
		НоваяСтрока.ПолеБД=Строка.ПолеБД;
		НоваяСтрока.ИмяПараметра=Строка.ИмяПараметра;
		
		Если НЕ Строка.УточнениеСпособаОпределения=Неопределено Тогда	
			
			НоваяСтрока.Значение=Строка.УточнениеСпособаОпределения;
			НоваяСтрока.Тип=ОбщегоНазначенияУХ.ПолучитьТипСтрокой(ТипЗнч(Строка.УточнениеСпособаОпределения));
			
		ИначеЕсли Строка.ТипЗначения.Количество()>0 Тогда
			
			 НоваяСтрока.Тип=Строка.ТипЗначения[0].Значение;
			                                    
		КонецЕсли;
			
	КонецЕсли;
 	
КонецПроцедуры // ДобавитьСтрокиУточненияОпределения() 

Процедура ПодготовитьТекстОтбора() Экспорт
	
	Если ТрансляцияДебет Тогда
		
		ПостфиксДтКт="Дт";
		
	ИначеЕсли ТрансляцияКредит Тогда
		
		ПостфиксДтКт="Кт";
		
	Иначе
		
		ПостфиксДтКт="";
		
	КонецЕсли;
	
	ТекстОтбора=УправлениеОтчетамиУХ.СформироватьТекстОтбора(ДеревоПараметровОтбораБД,ПостфиксДтКт,ОсновнаяТаблицаРегистра,,мТаблицаПоказателейБД);
	
КонецПроцедуры // ПодготовитьТекстОтбора() 

Процедура СохранитьНастройкиОперанда() Экспорт
	
	Если НЕ (мМодифицированность ИЛИ ЕстьПроверка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		СформироватьКодОперанда(Истина)
	КонецЕсли;
		
	ОпределитьТипЗначенияИсточника();
	
	Если ДеревоПараметровОтбораБД.Колонки.Найти("ИмяПараметра")=Неопределено Тогда
		ДеревоПараметровОтбораБД.Колонки.Добавить("ИмяПараметра",мОписаниеТиповСтрока);
	КонецЕсли;
				
	ПодготовитьТекстОтбора();
	ТаблицаПараметровОтбораБД.Загрузить(ПреобразоватьДеревоПараметровВТаблицу());
	
	ПредставлениеОтбора			= УправлениеОтчетамиУХ.СформироватьПредставлениеОтбора(ДеревоПараметровОтбораБД);
	ПредставлениеСопоставления	= УправлениеОтчетамиУХ.СформироватьПредставлениеСопоставления(ТаблицаСоответствияБД);
	
	ДополнительноеПредставление="";
	
	Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные Тогда
		
		ДополнительноеПредставление=ПредставлениеОтбора;
		
	Иначе
		
		Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
			
			ДополнительноеПредставление=СтрШаблон(Нстр("ru = 'Ист: %1%2'"), ПредставлениеОтбора, Символы.ПС);
			
		КонецЕсли;
		
		
		Если Не ПустаяСтрока(ПредставлениеСопоставления) Тогда
			
			ДополнительноеПредставление=ДополнительноеПредставление+СтрШаблон(Нстр("ru = 'Пр: %1'"),ПредставлениеСопоставления);
			
		КонецЕсли;
		
	КонецЕсли;

	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ФункцияНаВстроенномЯзыке Тогда
		
		ЗаполнитьАналитикуОперанда();
		Модифицированность=Истина;
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		  ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		  ПодготовитьТаблицуПолейДляРегистраВИБ();
			
	ИначеЕсли ВнутренниеДанные() Тогда
		
		ПодготовитьТаблицуИспользованияПолейВнутр();
						
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
		
		ПодготовитьДанныеДляЗаписиВнешнийЗапрос();
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		ПодготовитьДанныеДляЗаписиТаблицыADO();
		
	КонецЕсли;
	
	СформироватьТекстЗапросаКБД();
	ПроверитьУстановитьПринудительноеЗаполнение();
	
	Если ЗначениеЗаполнено(ОбъектБД) И (НЕ ПотребительРасчета.Метаданные().Имя="ШаблоныУниверсальныхПроцессов") Тогда
		
		ДобавитьПолеСинхронизации("Ссылка",		"ИсходныйОбъектСсылка");
		ДобавитьПолеСинхронизации("Дата",		"ИсходныйОбъектДата");
		ДобавитьПолеСинхронизации("Номер",		"ИсходныйОбъектНомер");
		ДобавитьПолеСинхронизации("Код",		"ИсходныйОбъектКод");
		ДобавитьПолеСинхронизации("Наименование","ИсходныйОбъектНаименование");
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройкиОперанда
		
Процедура ДобавитьПолеСинхронизации(ИмяПоля,Синоним)
	
	Если ЗначениеЗаполнено(ТабличнаяЧастьБД) Тогда
		
		ПолеБД="Ссылка."+ИмяПоля;
		
	Иначе
		
		ПолеБД=ИмяПоля;
		
	КонецЕсли;
	
	Если ОбъектБД.Реквизиты.Найти(ИмяПоля,"Имя")=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПравилаИспользованияПолейЗапроса.Найти(Синоним,"Синоним")=Неопределено Тогда
		
		НоваяСтрока=ПравилаИспользованияПолейЗапроса.Добавить();
		НоваяСтрока.Поле=ПолеБД;
		НоваяСтрока.Синоним=Синоним;
		НоваяСтрока.КодАналитики=Синоним;
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьПолеСинхронизации()
				

// Процедура подготавливает реквизиты операнда для записи в случае использования обращения к внешнему
// источнику через произвольный запрос
//
Процедура ПодготовитьДанныеДляЗаписиВнешнийЗапрос()
	
	ПодготовитьТаблицыДляПроизвольногоЗапросаВИБ();
		
КонецПроцедуры // ПодготовитьДанныеДляЗаписиРегистрБухгалтерии()

// Процедура подготавливает реквизиты операнда для записи в случае использования обращения к внешнему
// источнику через подключение по ADO
//
Процедура ПодготовитьДанныеДляЗаписиТаблицыADO()
	
	ПодготовитьТаблицуПолейДляЗапросаADO();
		
КонецПроцедуры // ПодготовитьДанныеДляЗаписиРегистрБухгалтерии()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ЭтоГруппа ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.РеквизитыИсточниковДанныхДляФормул.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсточникДанных.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()>0 Тогда
		
		ПредыдущиеДанные=НаборЗаписей[0];
		
		Если НЕ (ПредыдущиеДанные.ПоказательТекущегоОтчета=ПоказательТекущегоОтчета И ПредыдущиеДанные.ЕстьНестандартныеОтборы=ЕстьНестандартныеОтборы) Тогда
			
			УправлениеОтчетамиУХ.ОбновитьСвойстваПроцедурыРасчетов(НазначениеРасчетов,ПотребительРасчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	
	НоваяСтрока=НаборЗаписей.Добавить();
	НоваяСтрока.НазначениеРасчетов		= НазначениеРасчетов;
	НоваяСтрока.ПотребительРасчета		= ПотребительРасчета;
	НоваяСтрока.СпособПолучения			= СпособПолучения;
	НоваяСтрока.СпособИспользования		= СпособИспользования;
	НоваяСтрока.ИсточникДанных			= Ссылка;
	НоваяСтрока.КодИсточника			= СокрЛП(Код);
	НоваяСтрока.КодУпрощеннойФормулы	= СокрЛП(КодУпрощеннойФормулы);
	НоваяСтрока.КодПоказательОтбор		= СокрЛП(ПоказательОтбор.Код);
	НоваяСтрока.ЕстьНестандартныеОтборы	= ЕстьНестандартныеОтборы;
	НоваяСтрока.ПоказательТекущегоОтчета= ПоказательТекущегоОтчета;
	НоваяСтрока.ВидОтчета				= ?(ПолучитьТипПотребителяСтрока()="ПоказателиОтчетов",ПотребительРасчета.Владелец,Справочники.ВидыОтчетов.ПустаяСсылка());
	НоваяСтрока.ВидОтчетаОтбор			= ВидОтчетаОтбор;
	НоваяСтрока.ПоказательОтбор			= ПоказательОтбор;
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		СтрокаПериод=УточненияСпособовОпределения.Найти("Версия.ПериодОтчета","ПолеБД");
		
		Если НЕ СтрокаПериод=Неопределено Тогда
			
			НоваяСтрока.СдвигПериодов=СтрокаПериод.Значение;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	НаборЗаписей.Записать(Истина);
	
	УправлениеОтчетамиУХ.ОбновитьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета);
	
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		И ЗначениеЗаполнено(ПоказательОтбор)
		И ЗначениеЗаполнено(НазначениеРасчетов) Тогда
		
		НаборЗаписей=РегистрыСведений.ТаблицаЗависимостейПоказателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПоказательОтчета.Установить(ПоказательОтбор);
		НаборЗаписей.Отбор.НазначениеРасчетов.Установить(НазначениеРасчетов);
		
		ТекТаблицаЗависимостей=УправлениеОтчетамиУХ.ПолучитьТаблицуЗависимыхПоказателей(ПоказательОтбор,НазначениеРасчетов);
		
		Для Каждого Строка ИЗ ТекТаблицаЗависимостей Цикл
			
			НоваяСтрока=НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.ПоказательОтчета=ПоказательОтбор;
			НоваяСтрока.НазначениеРасчетов=НазначениеРасчетов;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
	Если (НЕ ЭтоНовый()) 
		И ЗначениеЗаполнено(НазначениеРасчетов) 
		И ТипЗнч(НазначениеРасчетов.Владелец)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
		
		Обработки.КорректировкиЗначенийПоказателей.УстановитьПризнакИзмененияШаблона(НазначениеРасчетов.Владелец);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипПотребителяСтрока()
	
	Возврат ОбщегоНазначенияУХ.ПолучитьИмяОбъектаМетаданных(ПотребительРасчета);
	
КонецФункции // ПолучитьТипПотребителяСтрока() 

Функция СравнитьТипыАналитик(ВидАналитики1,ВидАналитики2)
			
	Если ВидАналитики1=ВидАналитики2 Тогда
		
		Возврат Истина;
		
	ИначеЕсли НЕ (ВидАналитики1.ПроизвольныйКласификаторУХ ИЛИ ВидАналитики2.ПроизвольныйКласификаторУХ) Тогда
		
		Для Каждого Тип ИЗ ВидАналитики1.ТипЗначения.Типы() Цикл
			
			Если ВидАналитики2.ТипЗначения.СодержитТип(Тип) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
			
КонецФункции // ВозможнаУстановкаСоответствия()

Процедура СформироватьДеревоПараметровОтбораБД()
	
	Если ДеревоПараметровОтбораБД=Неопределено Тогда
		
		ПодготовитьДеревоПараметровОтбораБД();

	КонецЕсли;
	
	 ТаблицаПараметровОтбораБД.Сортировать("ИдентификаторРодителя,ИдентификаторСтроки");
	 ДеревоПараметровОтбораБД.Строки.Очистить();
	 	 
	 Для Каждого Строка ИЗ ТаблицаПараметровОтбораБД Цикл
		 
		 Если Строка.ПолеБД="ПланСчетов" ИЛИ Строка.ПолеБД="ПланСчетовБД" Тогда
			 
			 Продолжить;
			 
		 КонецЕсли;
		 
		 Если Строка.ИдентификаторРодителя=0 Тогда
			 
			 НоваяСтрока=ДеревоПараметровОтбораБД.Строки.Добавить();
			 
		 Иначе
			 
			 СтрокаРодитель=ДеревоПараметровОтбораБД.Строки.Найти(Строка.ИдентификаторРодителя,"ИдентификаторСтроки",Истина);
			 НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			 
		 КонецЕсли;
		 
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		 
		 СтрокаПараметр=мТабПравилаВычисленияПараметров.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаПараметр,Строка);
		 
		 Если ЗначениеЗаполнено(Строка.ПолеБД) Тогда
			 
			 Если Строка.ПолеБД="ДатаНач" ИЛИ Строка.ПолеБД="ДатаКон" Тогда
				 
				 СтрПоле=ОпределитьРабочуюСтроку("ПолеБД",Строка.ПолеБД);
				 
				 Если НЕ СтрПоле=Неопределено Тогда
					 
					 НоваяСтрока.ТипЗначения	= СтрПоле.ТипЗначения;
					 НоваяСтрока.ТипДанныхПоля	= СтрПоле.ТипДанныхПоля;
					 НоваяСтрока.СправочникБД	= СтрПоле.СправочникБД;
					 НоваяСтрока.ТипМетаДанных	= СтрПоле.ТипМетаДанных;
					 
				 Иначе
					 
					 РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(НоваяСтрока,"Дата",ТипБД)
	 
				 КонецЕсли;
				 
				 НоваяСтрока.УточнениеСпособаОпределения=УправлениеОтчетамиУХ.ПолучитьУточнениеСпособаОпределения(Строка.ПолеБД,Строка.ИмяПараметра,УточненияСпособовОпределения); 
				 СтрокаПараметр.УточнениеСпособаОпределения=НоваяСтрока.УточнениеСпособаОпределения;
				 
			 Иначе	 
				 
				 СтрПоле=ОпределитьРабочуюСтроку("ПолеБД",Строка.ПолеБД);
				 
				 Если СтрПоле=Неопределено Тогда
					 Продолжить;
				 КонецЕсли;
				 
				 НоваяСтрока.ТипЗначения	= СтрПоле.ТипЗначения;
				 НоваяСтрока.ТипДанныхПоля	= СтрПоле.ТипДанныхПоля;
				 НоваяСтрока.СправочникБД	= СтрПоле.СправочникБД;
				 НоваяСтрока.ТипМетаДанных	= СтрПоле.ТипМетаДанных;
				 
				 НоваяСтрока.УточнениеСпособаОпределения=УправлениеОтчетамиУХ.ПолучитьУточнениеСпособаОпределения(Строка.ПолеБД,Строка.ИмяПараметра,УточненияСпособовОпределения); 
				 СтрокаПараметр.УточнениеСпособаОпределения=НоваяСтрока.УточнениеСпособаОпределения;
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 
	 КонецЦикла;
		
 КонецПроцедуры // СформироватьДеревоПараметровОтбораБД()
 
Процедура ЗаполнитьПланСчетовБД()
	 
	Если НЕ ЗначениеЗаполнено(ПланСчетовБД) Тогда
		
		ПланСчетовБД=РегистрБД.ПланСчетов;
		
	КонецЕсли;
	 
КонецПроцедуры // ЗаполнитьПланСчетовБД() 
 

Процедура ПодготовитьТаблицыСопоставленийИОтборов() Экспорт
	
	ИсходнаяИнициализацияОбъекта=(НЕ ЭтоНовый()) ИЛИ ЗначениеЗаполнено(ЗначениеКопирования);
	
	ТекПравилаИспользованияПолей=ПравилаИспользованияПолейЗапроса.Выгрузить();
	
	ПодготовитьДеревоПараметровОтбораБД();
	ЗаполнитьНачальныеНастройки();
		
	Если СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		 ПриИзмененииТаблицыADO();
		 
	 ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр 
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		 
		 ПриИзмененииРегистраБД(Истина);
		 
	 ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		 
		 ПриИзмененииРегистраБД(Ложь);
		 	 
	 ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		 
		 ЗаполнитьПланСчетовБД();
		 ЗаполнитьПоказателиБД();
		 
		 Если ЗначениеЗаполнено(Счет) Тогда
			 
			 ПриИзмененииСчета(Истина);
			 
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(КоррСчет) Тогда
			 
			 ПриИзмененииСчета(Ложь);
			 
		 КонецЕсли;
		 
	 ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		 
		 Если ОбработатьИзменениеТекстаЗапроса(ТекстЗапросаМодуля) Тогда
			 
			 ТаблицаСоответствияБД=СформироватьТаблицуСоответствияБД();
			 ДеревоПолейБД=ЗаполнитьДеревоЗначенийБД();
			 
		 Иначе
			 
			 ПодготовитьТаблицуСоответствия();
			 ПодготовитьДеревоПолейБД();
	 
		 КонецЕсли;
		 
	 ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		 
		 ВидОтчетаОтбор=ПоказательОтбор.Владелец;
		 ПриИзмененииВидаОтчетаОтбор();
		 ПриИзмененииПоказателяОтбор();
		 
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		 
		 ПриИзмененииГруппыРаскрытияОтбор();
		 
	 ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы 
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		 ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		 
		 ПриИзмененииОбъектаБД();
		 
	 КонецЕсли;
	 	 
	ПравилаИспользованияПолейЗапроса.Загрузить(ТекПравилаИспользованияПолей);
	 
	 Для Каждого СтрПоле ИЗ ПравилаИспользованияПолейЗапроса Цикл
		 
		 Если (СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
			 ИЛИ ПолучитьТипПотребителяСтрока()="ШаблоныУниверсальныхПроцессов")
			 И (Не (ПолучитьТипПотребителяСтрока()="РазделыСверкиВГО" ИЛИ СтрПоле.КодАналитики="Значение")) Тогда
			 
			 СтрокаСоответствия=ТаблицаСоответствияБД.Найти(СтрПоле.Поле,"ПолеБД");
			 
			 Если СтрокаСоответствия=Неопределено Тогда
				 
				 СтрокаСоответствия=ТаблицаСоответствияБД.Добавить();
			 	
			 КонецЕсли; 
			 
		 Иначе
			 
			 СтрокаСоответствия=ТаблицаСоответствияБД.Найти(СтрПоле.КодАналитики,"АналитикаКонсолидации");
			 
			 Если СтрокаСоответствия=Неопределено
				 ИЛИ (НЕ СравнитьТипыАналитик(СтрокаСоответствия.ВидАналитики,СтрПоле.АналитикаОперанда)) Тогда
				 
				 Продолжить;
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(СтрПоле.Поле) Тогда
			 
			 СтрокаНастройки=ОпределитьРабочуюСтроку("ПолеБД",СтрПоле.Поле);
			 
			 Если СтрокаНастройки=Неопределено Тогда
				 
				 Если Не ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
					 
					 Продолжить;
					 
				 КонецЕсли;
				 
			 Иначе
				 
				 СтрокаНастройки.ИспользуетсяВСопоставлении=Истина;
				 
				 ЗаполнитьЗначенияСвойств(СтрокаСоответствия,СтрокаНастройки,,"ВидАналитики");
				 
				 Если СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов Тогда
					 
					 СтрокаСоответствия.ПсевдонимБД=СтрПоле.Синоним;
					 
				 Иначе
					 
					 СтрокаСоответствия.ПсевдонимБД=СтрокаНастройки.НаименованиеБД;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
		ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
			 
			СтрокаСоответствия.СправочникБД=СтрПоле.ТаблицаАналитикиВИБ; 
			
			Если ЗначениеЗаполнено(СтрокаСоответствия.СправочникБД) Тогда
				
				СтрокаСоответствия.ТипМетаДанных="ТаблицаADO";
				
			КонецЕсли;	
			 	 
		 КонецЕсли;
		 
		 ЗаполнитьЗначенияСвойств(СтрокаСоответствия,СтрПоле,,"РеквизитОбъекта");
		 СтрокаСоответствия.Сопоставлено=Истина;
		 
		 Если СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение
			 ИЛИ СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных Тогда
			 
			 ПредставлениеАналитики=Строка(СтрПоле.ФиксированноеЗначение);
			 СтрокаСоответствия.ПолеБД=ПредставлениеАналитики;
			 СтрокаСоответствия.ПсевдонимБД=ПредставлениеАналитики;
			 
		 ИначеЕсли СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
			 
			 СтрокаСоответствия.ПсевдонимБД=СтрПоле.Поле;
			 СтрокаСоответствия.ПолеБД=СтрПоле.Поле;
			 		 
		 КонецЕсли;
			 	 		 
	 КонецЦикла;
	 
	 Если ТаблицаПараметровОтбораБД.Количество()=0 Тогда
		 ИсходнаяИнициализацияОбъекта=Ложь;
		 Возврат;
	 КонецЕсли;
	 
	 СформироватьДеревоПараметровОтбораБД();
	 	 
	 ТаблицаСоответствияБД.Сортировать("АналитикаКонсолидации Возр");
	 
	 ИсходнаяИнициализацияОбъекта=Ложь;
	 
КонецПроцедуры // ПодготовитьТаблицыСопоставленийИОтборов()
  
Функция ОпределитьРабочуюСтроку(ИмяПоля,ЗначениеПоля) Экспорт
	 		 
	СтрПоле=ДеревоПолейБД.Строки.Найти(ЗначениеПоля,ИмяПоля,Истина);
	
	Если СтрПоле=Неопределено Тогда
		
		Если СтрНайти(ЗначениеПоля,".")=0 Тогда 
			
			Возврат Неопределено;
			
		Иначе
			
			Возврат ПолучитьРазыменованноеПоле(ДеревоПолейБД.Строки,ИмяПоля,ЗначениеПоля,1);
			
		КонецЕсли;
		
	Иначе
		
		Возврат СтрПоле;
		
	КонецЕсли;
		 
КонецФункции // ОпределитьРабочуюСтроку()

Функция ПолучитьРазыменованноеПоле(КоллекцияСтрок,ИмяПоля,ЗначениеПоля,ЧислоШагов)
	
	МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ЗначениеПоля,".");
	
	Если МассивПутей[0]="Версия" И ЧислоШагов=1 Тогда
		
		ЧислоШагов=ЧислоШагов+1;

	ИначеЕсли ЗначениеЗаполнено(КоррРегистрБД) И МассивПутей[0]=КоррРегистрБД.Наименование И ЧислоШагов=1 Тогда
		
		ЧислоШагов=ЧислоШагов+1;
		
	КонецЕсли;	
	
	ТекущийПуть="";
	
	Для Индекс=1 ПО ЧислоШагов Цикл
		
		ТекущийПуть=ТекущийПуть+"."+МассивПутей[Индекс-1];
		
	КонецЦикла;
	
	ТекущийПуть=Сред(ТекущийПуть,2);
	
	СтрокаРодитель=КоллекцияСтрок.Найти(ТекущийПуть,ИмяПоля,Истина);
	
	Если СтрокаРодитель=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
				
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРодитель);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	АдресХранилищаПеременныхДляРасчета=ДанныеОбъекта.РабочийОбъектАдрес;
	
	ВосстановитьПеременныеДляРасчета();
	
	СтрокаРодитель.Строки.Очистить();
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрПоле=СтрокаРодитель.Строки.Найти(ЗначениеПоля,ИмяПоля,Истина);
	
	Если НЕ СтрПоле=Неопределено Тогда
		
		Возврат СтрПоле;
		
	ИначеЕсли СтрокаРодитель.Строки.Количество()=1 И СтрокаРодитель.Строки[0].ПолеБД=ТекущийПуть Тогда
		
		Возврат ПолучитьРазыменованноеПолеРекурсивно(СтрокаРодитель.Строки[0],ИмяПоля,ЗначениеПоля,ЧислоШагов);
		
	ИначеЕсли СтрокаРодитель.Строки.Количество()>1 Тогда
		
		Для Каждого Строка ИЗ СтрокаРодитель.Строки Цикл
			
			Если Строка.ТипМетаДанных="Простой" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекущееПоле= ПолучитьРазыменованноеПолеРекурсивно(Строка,ИмяПоля,ЗначениеПоля,ЧислоШагов);
			
			Если НЕ ТекущееПоле=Неопределено Тогда
				
				Возврат ТекущееПоле;
				
			КонецЕсли;
			
		КонецЦикла;	
		
	ИначеЕсли МассивПутей.Количество()>=ЧислоШагов+1 Тогда
		
		Возврат ПолучитьРазыменованноеПолеРекурсивно(СтрокаРодитель,ИмяПоля,ЗначениеПоля,ЧислоШагов+1);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьРазыменованноеПоле()

Функция ПолучитьРазыменованноеПолеРекурсивно(СтрокаРодитель,ИмяПоля,ЗначениеПоля,ЧислоШагов)
	
	МассивПутейИсх=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ЗначениеПоля,".");
	МассивПутейТек=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаРодитель.ПолеБД,".");
	
	Если МассивПутейТек.Количество()>=МассивПутейИсх.Количество() И СтрНайти(СтрокаРодитель.ПолеБД,ЗначениеПоля)=0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если МассивПутейИсх[0]="Версия" И ЧислоШагов=1 Тогда
		
		ЧислоШагов=ЧислоШагов+1;
		
	КонецЕсли;	
	
	Если ЧислоШагов > МассивПутейТек.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТекущийПуть="";
	ТекущийПутьТек="";
	
	Для Индекс=1 ПО ЧислоШагов Цикл
		
		ТекущийПуть=ТекущийПуть+"."+МассивПутейИсх[Индекс-1];
		ТекущийПутьТек=ТекущийПутьТек+"."+МассивПутейТек[Индекс-1];
		
	КонецЦикла;
	
	ТекущийПуть=Сред(ТекущийПуть,2);
	ТекущийПутьТек=Сред(ТекущийПутьТек,2);
	
	Если СтрНайти(ТекущийПуть,ТекущийПутьТек)=0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРодитель);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	АдресХранилищаПеременныхДляРасчета=ДанныеОбъекта.РабочийОбъектАдрес;
	
	ВосстановитьПеременныеДляРасчета();
	
	СтрокаРодитель.Строки.Очистить();
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрПоле=СтрокаРодитель.Строки.Найти(ЗначениеПоля,ИмяПоля,Истина);
	
	Если НЕ СтрПоле=Неопределено Тогда
		
		Возврат СтрПоле;
		
	ИначеЕсли СтрокаРодитель.Строки.Количество()=0 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли СтрокаРодитель.Строки.Количество()=1 И СтрокаРодитель.Строки[0].ПолеБД=ТекущийПуть Тогда
		
		Возврат ПолучитьРазыменованноеПолеРекурсивно(СтрокаРодитель.Строки[0],ИмяПоля,ЗначениеПоля,ЧислоШагов+1);
		
	ИначеЕсли СтрокаРодитель.Строки.Количество()>1 И МассивПутейИсх.Количество()>=ЧислоШагов+1  Тогда
		
		Для Каждого Строка ИЗ СтрокаРодитель.Строки Цикл 
			
			Если Строка.ТипМетаДанных="Простой" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекущееПоле= ПолучитьРазыменованноеПолеРекурсивно(Строка,ИмяПоля,ЗначениеПоля,ЧислоШагов+1);
			
			Если НЕ ТекущееПоле=Неопределено Тогда
				
				Возврат ТекущееПоле;
				
			КонецЕсли;
			
		КонецЦикла;	
		
	ИначеЕсли МассивПутейИсх.Количество()>=ЧислоШагов+1 Тогда
		
		Возврат ПолучитьРазыменованноеПолеРекурсивно(СтрокаРодитель,ИмяПоля,ЗначениеПоля,ЧислоШагов+1);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьРазыменованноеПоле()

Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

Функция СформироватьДанныеОбъекта() Экспорт
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		ПоместитьВоВременноеХранилище(ПодготовитьСтруктуруПеременныхДляРасчета()));
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	Новый УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			ТекСоединениеВИБ);
	ДанныеОбъекта.Вставить("СпособПолучения",			СпособПолучения);
	ДанныеОбъекта.Вставить("СпособИспользования",		СпособИспользования);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			ВнутренниеДанные());
	ДанныеОбъекта.Вставить("ТипБД",						ТипБД);
	ДанныеОбъекта.Вставить("ТипБДПриемник",				ТипБДПриемник);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики) Экспорт
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	ДанныеСтрокиАналитики.ИспользуетсяВСопоставлении);
	
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.ТаблицаADO);
		СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
		
	Иначе
		
		СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
		СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
		
	КонецЕсли;
	
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);
	СтрокаБД.Вставить("ТаблицаADO",					ДанныеСтрокиАналитики.ТаблицаADO);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиБД()

//////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры сохранения и восстановления данных для расчетов между серверными вызовами

Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета=Неопределено) Экспорт
	
	Если ПеременныеДляРасчета=Неопределено Тогда
		
		Если ПустаяСтрока(АдресХранилищаПеременныхДляРасчета) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПеременныеДляРасчета=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
		
	КонецЕсли;
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка");
		
	КонецЕсли;
			
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
		
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("Ссылка",Ссылка);
	СтруктураПеременных.Вставить("РеквизитыОбъекта",ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект));
	СтруктураПеременных.Вставить("ПроцедураСозданияОбъекта","Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент()");
	СтруктураПеременных.Вставить("мСоответствиеИзмеренийСпособовИТипов",мСоответствиеИзмеренийСпособовИТипов);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикПоказателя",мТаблицаВидовАналитикПоказателя);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикПоказателяОтбор",мТаблицаВидовАналитикПоказателяОтбор);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикВидаОтчета",мТаблицаВидовАналитикВидаОтчета);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикВидаОтчетаОтбор",мТаблицаВидовАналитикВидаОтчетаОтбор);
	СтруктураПеременных.Вставить("мТаблицаВозможныхПолейОтбор",мТаблицаВозможныхПолейОтбор);
	СтруктураПеременных.Вставить("мТаблицаВозможныхПолей",мТаблицаВозможныхПолей);
	СтруктураПеременных.Вставить("мСоответствиеРеквизитовАналитики",мСоответствиеРеквизитовАналитики);
	СтруктураПеременных.Вставить("мТаблицаПоказателейБД",мТаблицаПоказателейБД);
	СтруктураПеременных.Вставить("мТаблицаПроизводныхБД",мТаблицаПроизводныхБД);
	СтруктураПеременных.Вставить("ТекСоединениеВИБ",ТекСоединениеВИБ);
	СтруктураПеременных.Вставить("мПерезаписыватьКод",мПерезаписыватьКод);
	СтруктураПеременных.Вставить("ЕстьПроверка",ЕстьПроверка);
	СтруктураПеременных.Вставить("СтруктураРеквизитовИзмеренийБД",СтруктураРеквизитовИзмеренийБД);
	СтруктураПеременных.Вставить("СтруктураРеквизитовИзмеренийТек",СтруктураРеквизитовИзмеренийТек);
	СтруктураПеременных.Вставить("ТаблицаСоответствияБД",ТаблицаСоответствияБД);
	СтруктураПеременных.Вставить("СписокРесурсовРегистра",СписокРесурсовРегистра);
	СтруктураПеременных.Вставить("мОписаниеТиповСтрока",мОписаниеТиповСтрока);
	СтруктураПеременных.Вставить("мОписаниеТиповБулево",мОписаниеТиповБулево);
	СтруктураПеременных.Вставить("мОписаниеТиповТЗ",мОписаниеТиповТЗ);
	СтруктураПеременных.Вставить("мОписаниеТиповСписокЗначений",мОписаниеТиповСписокЗначений);
	СтруктураПеременных.Вставить("мМодифицированность",мМодифицированность);
	СтруктураПеременных.Вставить("ДеревоПолейБД",ДеревоПолейБД);
	СтруктураПеременных.Вставить("РазделениеПоНоменклатуре",РазделениеПоНоменклатуре);
	СтруктураПеременных.Вставить("ИмпортКазначейства",ИмпортКазначейства);
	СтруктураПеременных.Вставить("ВидОтчетаОтбор",ВидОтчетаОтбор);
	СтруктураПеременных.Вставить("СписокВидИтога",СписокВидИтога);
	СтруктураПеременных.Вставить("СписокДтКт",СписокДтКт);
	СтруктураПеременных.Вставить("КодУпрощеннойФормулы",КодУпрощеннойФормулы);
	СтруктураПеременных.Вставить("ГрупповоеРедактирование",ГрупповоеРедактирование);
	СтруктураПеременных.Вставить("ДанныеАналитики",ДанныеАналитики);
	
	Возврат СтруктураПеременных;
	
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗначениеКопирования=ОбъектКопирования.Ссылка;
	
КонецПроцедуры

Процедура ПодготовитьОбъектПоИсточнику(ДанныеЗаполнения) Экспорт
	
	ПоляШаблона=Новый Массив;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(НазначениеРасчетов) Тогда
		
		ТипБД=?(ЗначениеЗаполнено(НазначениеРасчетов.ТипБД),НазначениеРасчетов.ТипБД,Справочники.ТипыБазДанных.ТекущаяИБ);
		
	КонецЕсли;
	
	ОбъектИсточник=Неопределено;
	
	ОбработатьПредзаполненныеРеквизиты();
	ОпределитьПоляШаблона();
	
КонецПроцедуры // 

Процедура УстановитьОбъектИсточник(ТекущийОбъект)
	
	Если НЕ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектИсточник=ТекущийОбъект;
	
КонецПроцедуры // УстановитьОбъектИсточник() 

Процедура ОбработатьПредзаполненныеРеквизиты() Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		ЗаполнитьПоИсточникуСчетБД();
		УстановитьОбъектИсточник(Счет);
		
	ИначеЕсли ТипЗнч(РегистрБД)=Тип("СправочникСсылка.РегистрыБухгалтерииБД") Тогда
		
		ЗаполнитьПоИсточникуРегистрБухгалтерии();
		УстановитьОбъектИсточник(РегистрБД);
		
	ИначеЕсли ТипЗнч(РегистрБД)=Тип("СправочникСсылка.РегистрыНакопленияБД") Тогда
		
		 ЗаполнитьПоИсточникуРегистрНакопления();
		 УстановитьОбъектИсточник(РегистрБД);
		
	ИначеЕсли ТипЗнч(РегистрБД)=Тип("СправочникСсылка.РегистрыСведенийБД") Тогда
		
		ЗаполнитьПоИсточникуРегистрСведений();
		УстановитьОбъектИсточник(РегистрБД);
		
	КонецЕсли;
		
КонецПроцедуры // ОбработатьПредзаполненныеРеквизиты()

Процедура ОпределитьПоляШаблона() Экспорт
	
	Если ОбъектИсточник=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПоляШаблона=Новый Массив;
	ПоляШаблона.Добавить("ТипБД");
	ПоляШаблона.Добавить("СпособПолучения");
	ПоляШаблона.Добавить("РегистрБухгалтерииБД");
	ПоляШаблона.Добавить("РегистрНакопленияБД");
	ПоляШаблона.Добавить("ОсновнаяТаблицаРегистра");
	ПоляШаблона.Добавить("РегистрСведенийБД");
	ПоляШаблона.Добавить("ОбъектБД");
	ПоляШаблона.Добавить("ТабличнаяЧастьБД");
	
	Если ТипЗнч(ОбъектИсточник)=Тип("СправочникСсылка.СчетаБД") Тогда
		
		ПоляШаблона.Добавить("Счет");
		
		Если ЗначениеЗаполнено(КоррСчет) Тогда	
			ПоляШаблона.Добавить("КоррСчет");
			ПоляШаблона.Добавить("ВидИтога");
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ОпределитьПоляШаблона()

Процедура ЗаполнитьПоИсточникуРегистрНакопления() Экспорт
	
	ТипБД=РегистрБД.Владелец;
	
	Если ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления;
		
	Иначе
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления;
		
	КонецЕсли;
	
	ПриИзмененииРегистраБД();
				
КонецПроцедуры // ЗаполнитьПоИсточникуРегистрБухгалтерии()

Процедура ЗаполнитьПоИсточникуРегистрСведений()
	
	ТипБД=РегистрБД.Владелец;
	
	Если ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений;
		
	Иначе
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений;
		
	КонецЕсли;
		
	ПриИзмененииРегистраБД(Ложь);
				
КонецПроцедуры // ЗаполнитьПоИсточникуРегистрБухгалтерии()
	
Процедура ЗаполнитьПоИсточникуРегистрБухгалтерии()
	
	ТипБД=РегистрБД.Владелец;
	
	Если ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии;
		
	Иначе
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии;
		
	КонецЕсли;
		
	ПриИзмененииРегистраБухгалтерии();
				
КонецПроцедуры // ЗаполнитьПоИсточникуРегистрБухгалтерии() 

Процедура ЗаполнитьПоИсточникуСчетБД()
		
	ПланСчетовБД=Счет.Владелец;
	ТипБД=ПланСчетовБД.Владелец;
	СчетИсточник=Счет;
	КоррСчетИсточник=КоррСчет;
	
	Если ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии;
		
	Иначе
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии;
		
	КонецЕсли;
	
	МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(ПланСчетовБД);
	
	Если МассивРегистров.Количество()>0 Тогда
		
		РегистрБД=МассивРегистров[0];
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
	ПриИзмененииРегистраБухгалтерии();
	
	Счет=СчетИсточник;
	ПриИзмененииСчета(Истина);
	
	Если ЗначениеЗаполнено(КоррСчетИсточник) Тогда
		
		КоррСчет=КоррСчетИсточник;
		ПриИзмененииСчета(Ложь);
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПоИсточникуСчетБД()

Процедура ПодготовитьДанныеИнтерфейсаПоШаблону(ОбъектШаблон=Неопределено) Экспорт

	Если ОбъектШаблон=Неопределено Тогда
		
		ОбъектШаблон=ИсточникШаблон.ПолучитьОбъект();
		ОбъектШаблон.ПодготовитьТаблицыСопоставленийИОтборов();
		ДеревоПараметровОтбораБДШаблон=ОбъектШаблон.ДеревоПараметровОтбораБД;
		
	КонецЕсли;
	
	ПоляШаблона=Новый Массив;
	ПоляШаблона.Добавить("ТипБД");
	ПоляШаблона.Добавить("СпособПолучения");
	ПоляШаблона.Добавить("РегистрБухгалтерииБД");
	ПоляШаблона.Добавить("РегистрНакопленияБД");
	ПоляШаблона.Добавить("ОсновнаяТаблицаРегистра");
	ПоляШаблона.Добавить("РегистрСведенийБД");
	ПоляШаблона.Добавить("ОбъектБД");
	ПоляШаблона.Добавить("ТабличнаяЧастьБД");		
	ПоляШаблона.Добавить("Счет");
	ПоляШаблона.Добавить("РесурсРегистра");
	ПоляШаблона.Добавить("РесурсРегистраБД");
	ПоляШаблона.Добавить("РесурсРегистраСведений");
	ПоляШаблона.Добавить("ТекстЗапросаФорма");
	
	Если ЗначениеЗаполнено(ОбъектШаблон.КоррСчет) Тогда	
		ПоляШаблона.Добавить("КоррСчет");
		ПоляШаблона.Добавить("ВидИтога");
	КонецЕсли;
	
КонецПроцедуры // 

Процедура ЗаполнитьПоШаблонуИсточнику() Экспорт
	
	ОбъектШаблон=ИсточникШаблон.ПолучитьОбъект();
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ОбъектШаблон,"ТипБД,СпособПолучения,ТекстЗапросаМодуля,РегистрБД,ОсновнаяТаблицаРегистра,Счет,КоррСчет");
	
	ОбъектШаблон.ПодготовитьТаблицыСопоставленийИОтборов();
	ТаблицаСоответствияБДШаблон=ОбъектШаблон.ТаблицаСоответствияБД;
	
	ОбработатьПредзаполненныеРеквизиты();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ОбъектШаблон,"ВидИтога,РесурсРегистра,ВидСреза,ДтКт");
	
	Если ОбъектШаблон.СоответствиеРесурсовДляТрансляции.Количество()>0 Тогда
		
		СоответствиеРесурсовДляТрансляции.Загрузить(ОбъектШаблон.СоответствиеРесурсовДляТрансляции.Выгрузить());
		
	КонецЕсли;
	
	мМодифицированность=Истина;
	
	ПодготовитьДанныеИнтерфейсаПоШаблону(ОбъектШаблон);
	
КонецПроцедуры // ЗаполнитьПоШаблонуИсточнику() 

Процедура ЗаполнитьПоСоответствиюСчетов() Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.ОбъектУчетаИсточник.РегистрБД КАК РегистрБД,
	|	СоответствияСчетовДляТрансляции.КоррОбъектУчетаИсточник.РегистрБД КАК КоррРегистрБД,
	|	СоответствияСчетовДляТрансляции.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|ГДЕ
	|	СоответствияСчетовДляТрансляции.Ссылка = &СоответствиеСчетов";
	
	Запрос.УстановитьПараметр("СоответствиеСчетов",ПотребительРасчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ИсточникШаблон				= Результат.ОбъектУчетаИсточник;
	КоррРегистрБД				= Результат.КоррРегистрБД;
	ЗаполнитьПоШаблонуИсточнику();
		
КонецПроцедуры // ЗаполнитьПоСоответствиюСчетов()

Процедура СоздатьШаблонПоПараметрам(АдресПараметровШаблона) Экспорт
	
	ПараметрыШаблона=ПолучитьИзВременногоХранилища(АдресПараметровШаблона);
	СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПараметрыШаблона,"Наименование,ТипБД,СпособПолучения,ТекстЗапросаМодуля,РегистрБД,Счет,КоррСчет");
	ОбработатьПредзаполненныеРеквизиты();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПараметрыШаблона,"ВидИтога,РесурсРегистра,ВидСреза,ДтКт");
	ОпределитьПоляШаблона();
	
	ТаблицаПараметровОтбораБД.Загрузить(ПараметрыШаблона.ТаблицаПараметровШаблон);
	УточненияСпособовОпределения.Загрузить(ПараметрыШаблона.УточненияСпособовОпределенияШаблон);
	
	СформироватьДеревоПараметровОтбораБД();
	ТаблицаСоответствияБД=ПараметрыШаблона.ТаблицаСоответствияБД;
	
КонецПроцедуры // СоздатьШаблонПоПараметрам()

//////////////////////////////////////////////////////////////////////////////////////////////////

МассивБулево=Новый Массив;
МассивБулево.Добавить(Тип("Булево"));

мОписаниеТиповСтрока=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500);
мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
мОписаниеТиповТЗ=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ();
мОписаниеТиповСписокЗначений=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений();

мСоответствиеИзмеренийСпособовИТипов = Новый ТаблицаЗначений;
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("СпособВычисления");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ТипДанных");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ТипДанныхУточнение");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ТипДанныхПроверка");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ТипРасчета");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ИмяИзмерения");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("НаименованиеАналитики");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ИзКонтекста", Новый ОписаниеТипов(МассивБулево));
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ИзмерениеРегистра", Новый ОписаниеТипов(МассивБулево));
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ПредставлениеСпособа");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ЕстьУточнение",Новый ОписаниеТипов(МассивБулево));
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ВидАналитики");
мСоответствиеИзмеренийСпособовИТипов.Колонки.Добавить("ТаблицаАналитики",мОписаниеТиповСтрока);

мТаблицаВозможныхПолейОтбор=Новый ТаблицаЗначений;
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("Поле");
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("Синоним");
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("ТипДанныхПоля",мОписаниеТиповСписокЗначений);
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("ТипЗначения",	мОписаниеТиповСписокЗначений);
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("ТипМетаДанных",мОписаниеТиповСтрока);
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("СправочникБД",мОписаниеТиповСтрока);
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("АналитикаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("ВидАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("НаименованиеАналитики",мОписаниеТиповСтрока);
мТаблицаВозможныхПолейОтбор.Колонки.Добавить("ТаблицаАналитики",мОписаниеТиповСтрока);

мТаблицаВозможныхПолей=мТаблицаВозможныхПолейОтбор.СкопироватьКолонки();
мТаблицаВозможныхПолей.Колонки.Добавить("ТипОбъектаКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
мТаблицаВозможныхПолей.Колонки.Добавить("РеквизитОбъекта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
мТаблицаВозможныхПолей.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));


Массив = Новый Массив; 
Массив.Добавить(Тип("Строка"));
Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
КвалификаторСтроки = Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная);
мТаблицаВозможныхПолей.Колонки.Добавить("ИмяОбъектаМетаданных",Новый ОписаниеТипов(Массив, , КвалификаторСтроки));

мПерезаписыватьКод=Ложь;

мТаблицаПоказателейБД         = Новый ТаблицаЗначений;
мТаблицаПоказателейБД.Колонки.Добавить("ПолеБД",          	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("НаименованиеБД",  	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТипЗначения",		мОписаниеТиповСписокЗначений);
мТаблицаПоказателейБД.Колонки.Добавить("ТипМетаДанных",    	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТипДанныхПоля",		мОписаниеТиповСписокЗначений);
мТаблицаПоказателейБД.Колонки.Добавить("ТолькоОбороты",    	мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("ВидАналитики", 		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
мТаблицаПоказателейБД.Колонки.Добавить("ПризнакиУчетаСубконто",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
мТаблицаПоказателейБД.Колонки.Добавить("Измерение",        	мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("Регистратор",       мОписаниеТиповБулево);

мТаблицаПоказателейБД.Колонки.Добавить("Дебетовый",        	мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("СправочникБД",    	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("Балансовый",       	мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("НеЯвляетсяРазделителемДанных",мОписаниеТиповБулево);
мТаблицаПоказателейБД.Колонки.Добавить("ПолеЗапроса",      	мОписаниеТиповСтрока);

мТаблицаПроизводныхБД		= мТаблицаПоказателейБД.СкопироватьКолонки();

мТабПравилаВычисленияПараметров=Новый ТаблицаЗначений;
мТабПравилаВычисленияПараметров.Колонки.Добавить("ПолеБД",мОписаниеТиповСтрока);
мТабПравилаВычисленияПараметров.Колонки.Добавить("НаименованиеБД",мОписаниеТиповСтрока);
мТабПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",мОписаниеТиповСтрока);
мТабПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра");
мТабПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
мТабПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеДляПроверки");
мТабПравилаВычисленияПараметров.Колонки.Добавить("ТекстМодуля");
мТабПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия");
мТабПравилаВычисленияПараметров.Колонки.Добавить("ТаблицаАналитикиВИБ");

ИмпортКазначейства=Ложь;
мМодифицированность=Истина;
ЕстьПроверка=Ложь;

ГрупповоеРедактирование=Ложь;

ИсходнаяИнициализацияОбъекта=Ложь;
НеЗаполнятьДеревоПолей=Ложь;

ЗаполнитьТаблицуСоответствияПоУмолчанию	= Ложь;
ЗаполнитьТаблицуОтбораПоУмолчанию		= Ложь;

#КонецЕсли



