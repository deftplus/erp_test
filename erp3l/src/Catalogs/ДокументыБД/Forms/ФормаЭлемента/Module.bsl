&НаКлиенте
Перем ВыполняетсяЗакрытие;

// Проверяет, есть ли у объекта реквизит с типом СтрокаТипВход.
&НаКлиенте
Функция ЕстьРеквизитСТипом(СтрокаТипВход)
	РезультатФункции = Ложь;
	Для Каждого ТекРеквизиты Из Объект.Реквизиты Цикл
		Если ТекРеквизиты.ТипДанных = СтрокаТипВход Тогда
			РезультатФункции = Истина;
			Прервать;			// Значение найдено.
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ЕстьРеквизитСТипом()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");

	ЗаполнитьДеревоТЧ();	
	
	Элементы.РеквизитыИспользоватьДляСогласования.Видимость	=Объект.Согласуется;
	Элементы.ГруппаРеквизитыСогласования.Видимость			=Объект.Согласуется;
	Элементы.ГруппаНастройкиЗначенийПоУмолчанию.Видимость	=Объект.ИспользуетсяВНастройкахРеглмента;
	Элементы.ГруппаУправлениеПроцессом.Видимость			=Объект.ИспользуетсяВПроцессе;
	
	ОбновитьСписокРеквизитов();
		
	Элементы.ИспользуетсяВПроцессе.Доступность = ПроверитьРеквизитыПроцесса();
	Элементы.ГруппаУправлениеПроцессом.Видимость			=Объект.ИспользуетсяВПроцессе;
    Элементы.РеквизитШаблонаДокумета.Доступность=Объект.ИспользоватьШаблоны;
	
	ОбновитьСписокРеквизитовОрганизация();
	ОбновитьСписокРеквизитовПроект();
	
	ОбновитьСписокВыбораРеквизитаБД(Элементы.РеквизитКонтрагент, 			"Справочник.Контрагенты", 			"Контрагент");
	ОбновитьСписокВыбораРеквизитаБД(Элементы.РеквизитДоговорКонтрагента,	"Справочник.ДоговорыКонтрагентов",	"ДоговорКонтрагента");
	ОбновитьСписокВыбораРеквизитаБД(Элементы.РеквизитСуммыДокумента, 		"Число", 							"СуммаДокумента");
		
	УстановитьДоступностьЭлементов();
		
КонецПроцедуры

Функция ПроверитьРеквизитыПроцесса()
	
	   СправочникОбъект = РеквизитФормыВЗначение("Объект");
	   Если СправочникОбъект.Реквизиты.Найти("Сценарий")<>Неопределено и
		   СправочникОбъект.Реквизиты.Найти("Организация")<>Неопределено и
		   СправочникОбъект.Реквизиты.Найти("ПериодОтчета")<>Неопределено  Тогда
		   Возврат Истина;
	   КонецЕсли;
	   Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Если Объект.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		МассивНаименованийСтандартныхОбъектов = Новый Массив;
		
		МассивНаименованийСтандартныхОбъектов.Добавить("ЗаявкаНаИзменениеНСИ"); 
		МассивНаименованийСтандартныхОбъектов.Добавить("ЗаявкаНаРасход");
		МассивНаименованийСтандартныхОбъектов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		МассивНаименованийСтандартныхОбъектов.Добавить("ОжидаемоеПоступлениеДенежныхСредств");
		МассивНаименованийСтандартныхОбъектов.Добавить("НастраиваемыйОтчет");
		МассивНаименованийСтандартныхОбъектов.Добавить("ПланируемыйДоход");
		МассивНаименованийСтандартныхОбъектов.Добавить("ОперативныйПлан");
		МассивНаименованийСтандартныхОбъектов.Добавить("РакурсДанных");
		МассивНаименованийСтандартныхОбъектов.Добавить("РеестрПлатежей");
		МассивНаименованийСтандартныхОбъектов.Добавить("СогласованиеОбластиДанных");
		ЭтоСтандартныйОбъект = (МассивНаименованийСтандартныхОбъектов.Найти(Объект.Наименование) <> Неопределено);
		Если ЭтоСтандартныйОбъект Тогда		
			Элементы.ИспользуетсяВПроцессе.Доступность = Ложь;
			Элементы.Согласуется.Доступность = Ложь; 
			Элементы.ИспользуетсяВНастройкахРеглмента.Доступность = Ложь;
			Элементы.ГруппаШаблоны.Доступность = Ложь;  
			Элементы.ГруппаРеквизитыСогласования.ТолькоПросмотр = Истина;
			Элементы.ГруппаРеквизитыНастроекРегламента.Доступность = Ложь;
			
		КонецЕсли;
		
		Если Объект.Наименование = "СогласованиеОбластиДанных" Тогда
			
			Элементы.ГруппаПолномочия.Доступность = Ложь;
			
		КонецЕсли;	 
		
	КонецЕсли;
	
	Элементы.ГруппаНастройкиСогласования.Видимость = Объект.Согласуется;
	// Видимость надписи Отсутствует в конфигурации.
	Элементы.ОтсутствуетВКонфигурацииНадпись.Видимость = Объект.ОтсутствуетВКонфигурации;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоТЧ()

	ОбщегоНазначенияУХ.ЗаполнитьДеревоТЧ(Объект,ТабличныеЧасти);
		
КонецПроцедуры // ЗаполнитьДеревоТЧ() 

&НаКлиенте
Процедура СогласуетсяПриИзменении(Элемент)
	
	Элементы.РеквизитыИспользоватьДляСогласования.Видимость	=Объект.Согласуется;
	Элементы.ГруппаРеквизитыСогласования.Видимость			=Объект.Согласуется;
	
	ОбновитьСписокРеквизитов();
	УстановитьДоступностьЭлементов();
	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРеквизитов()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя");
	ТаблицаРеквизитов.Колонки.Добавить("Синоним");
	ТаблицаРеквизитов.Колонки.Добавить("Вес",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	
	Для Каждого Строка ИЗ Объект.Реквизиты Цикл
		
		Если НЕ (СтрНайти(Строка.ТипДанных,"Справочник.")>0 ИЛИ СтрНайти(Строка.ТипДанных,"Перечисление.")>0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		НоваяСтрока.Вес=?(СтрНайти(Строка.Имя,"Состоян")>0,1,0);
		
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Вес Убыв");
	
	Элементы.РеквизитДляАналитики1УП.СписокВыбора.Очистить();
	Элементы.РеквизитДляАналитики2УП.СписокВыбора.Очистить();
	Элементы.РеквизитДляАналитики3УП.СписокВыбора.Очистить();
	Элементы.РеквизитШаблонаДокумета.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаРеквизитов Цикл
	
		Элементы.РеквизитДляАналитики1УП.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		Элементы.РеквизитДляАналитики2УП.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		Элементы.РеквизитДляАналитики3УП.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		Элементы.РеквизитШаблонаДокумета.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьСписокРеквизитовСогласования() 

&НаСервере
Процедура ОбновитьСписокРеквизитовОрганизация()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя");
	ТаблицаРеквизитов.Колонки.Добавить("Синоним");
	
	Для Каждого Строка ИЗ Объект.Реквизиты Цикл
		
		Если НЕ СтрНайти(Строка.ТипДанных,"Справочник.Организации")>0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	Элементы.РеквизитРазделенияПоОрганизациям.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаРеквизитов Цикл
		
		Элементы.РеквизитРазделенияПоОрганизациям.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		
	КонецЦикла;	
		
КонецПроцедуры // ОбновитьСписокРеквизитовСогласования() 

&НаСервере
Процедура ОбновитьСписокРеквизитовПроект()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя");
	ТаблицаРеквизитов.Колонки.Добавить("Синоним");
	
	Для Каждого Строка ИЗ Объект.Реквизиты Цикл
		
		Если НЕ СтрНайти(Строка.ТипДанных,"Справочник.Проекты")>0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	Элементы.РеквизитРазделенияПоПроектам.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаРеквизитов Цикл
		
		Элементы.РеквизитРазделенияПоПроектам.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		
	КонецЦикла;	
	
	//Если ТаблицаРеквизитов.Количество() =0 Тогда
	//	 Элементы.РазделятьПоПроектам.Доступность = Ложь;
	//	 РазделятьПоПроектам = Ложь;
	// КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораРеквизитаБД(ЭлементФормы, ИмяМетаданных, ИмяРеквизита)
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Для каждого ТекРеквизит Из Справочники.ДокументыБД.ПолучитьРеквизитыПоТипу(Объект, ИмяМетаданных, ИмяРеквизита) Цикл	
		ЭлементФормы.СписокВыбора.Добавить(ТекРеквизит.Значение, ТекРеквизит.Представление, ТекРеквизит.Пометка);	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияНаУтвержденииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияУтвержденНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияОтклоненНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ОбновитьЗначениеТипаСостояния();
	
	Если НЕ ЗначениеЗаполнено(Объект.РеквизитСостоянияСтрока) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ОткрытьФорму(Объект.РеквизитСостоянияСтрока + ".ФормаВыбора", , Элемент);
				
КонецПроцедуры // ВыбратьЗначениеСостояния()

&НаСервере
Процедура ОбновитьРеквизитыПоМетаданным()
	
	СправочникОбъект=РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ЗаполнитьРеквизитыОбъекта();
	ЗначениеВРеквизитФормы(СправочникОбъект,"Объект");
	
	ОбновитьСписокРеквизитов();
	
	Элементы.ИспользуетсяВПроцессе.Доступность = ПроверитьРеквизитыПроцесса();
	
КонецПроцедуры // ОбновитьРеквизитыПоМетаданным() 

&НаКлиенте
Процедура ОбновитьРеквизиты(Команда)
	
	ОбновитьРеквизитыПоМетаданным();
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВПроцессеПриИзменении(Элемент)
	
	Элементы.ГруппаУправлениеПроцессом.Видимость			=Объект.ИспользуетсяВПроцессе;
    	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШаблоныПриИзменении(Элемент)
	
	Элементы.РеквизитШаблонаДокумета.Доступность=Объект.ИспользоватьШаблоны;
	 
 КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВНастройкахРеглментаПриИзменении(Элемент)
	
	Элементы.ГруппаНастройкиЗначенийПоУмолчанию.Видимость			=Объект.ИспользуетсяВНастройкахРеглмента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			ЭтаФорма.Записать();
			РасширениеБизнесЛогикиУХКлиент.ОткрытьФормаУправленияМатрицейПолномочий(ДополнительныеПараметры);		
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи элемента произошли ошибки: %ОписаниеОшибки%. Открытие матрицы полномочий отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе       
		// Пользователь отказался.
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеЗаписиЗавершение()

&НаКлиенте
Процедура ОткрытьМатрицуПолномочий(Команда)
	Если Не Модифицированность Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВерсияОрганизационнойСтруктуры", Неопределено);
		СтруктураПараметров.Вставить("ОбъектБД", Объект.Ссылка);
		РасширениеБизнесЛогикиУХКлиент.ОткрытьФормаУправленияМатрицейПолномочий(СтруктураПараметров);
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВерсияОрганизационнойСтруктуры", Неопределено);
		СтруктураПараметров.Вставить("ОбъектБД", Объект.Ссылка);
		ТекстВопроса = НСтр("ru = 'Элемент %Наименование% не был записан. Продолжить с сохранением?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Наименование%", Строка(Объект.Наименование));
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗаписиЗавершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
КонецПроцедуры
	
Процедура  ОбновитьЗначениеТипаСостояния()
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.РеквизитСостоянияСтрока = "Перечисление."+Строка(Объект.РеквизитСостояния);   
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСостоянияПриИзменении(Элемент)
	
	ОбновитьЗначениеТипаСостояния();

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеРеквизитаСостоянияЧерновикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьЗначениеСостояния(Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененоОписаниеДокументаБД",Новый Структура("ДокументБД,ТипБД",Объект.Наименование,Объект.Владелец));
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="РеквизитыТипДанных" Тогда
		
		ДанныеОбъекта=Новый Структура;
		
		СтрокаШаблона = Нстр("ru = 'документ %1'");
		
		ИмяОбъекта = Объект.Синоним;
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ИмяОбъекта = СтрШаблон(СтрокаШаблона, Объект.Синоним);
		КонецЕсли;
		
		СтрокаШаблона = Нстр("ru = ' реквизит %1'");
		
		ТекстПоля = Элементы.Реквизиты.ТекущиеДанные.Имя;
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстПоля = СтрШаблон(СтрокаШаблона, Элементы.Реквизиты.ТекущиеДанные.Имя);
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("ИмяОбъекта", ИмяОбъекта);
		ДанныеОбъекта.Вставить("ТекстПоля", ТекстПоля);
		ДанныеОбъекта.Вставить("ТипДанных",Элементы.Реквизиты.ТекущиеДанные.ТипДанных);	
		
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраТипаЗначений",ДанныеОбъекта);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ТабличныеЧастиТипДанных" И ЗначениеЗаполнено(Элементы.ТабличныеЧасти.ТекущиеДанные.ТипДанных) Тогда
		
		ДанныеОбъекта=Новый Структура;
		
		СтрокаШаблона = Нстр("ru = 'документ %1, табличная часть %2'");
		
		ИмяОбъекта = Объект.Синоним + ", " + Элементы.ТабличныеЧасти.ТекущиеДанные.ПолучитьРодителя().Синоним;
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ИмяОбъекта = СтрШаблон(СтрокаШаблона, Объект.Синоним, Элементы.ТабличныеЧасти.ТекущиеДанные.ПолучитьРодителя().Синоним);
		КонецЕсли;
		
		СтрокаШаблона = Нстр("ru = ' реквизит %1'");
		
		ТекстПоля = Элементы.ТабличныеЧасти.ТекущиеДанные.Имя;
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстПоля = СтрШаблон(СтрокаШаблона, Элементы.ТабличныеЧасти.ТекущиеДанные.Имя);
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("ИмяОбъекта", ИмяОбъекта);
		ДанныеОбъекта.Вставить("ТекстПоля", ТекстПоля);
		ДанныеОбъекта.Вставить("ТипДанных", Элементы.ТабличныеЧасти.ТекущиеДанные.ТипДанных);	
		
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраТипаЗначений", ДанныеОбъекта);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоступныхФормСхемыРеквизитов_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Объект.ДоступныеФормыСхемРеквизитов.Очистить();
		Для Каждого ТекВыбранноеЗначение Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.ДоступныеФормыСхемРеквизитов.Добавить();
			НоваяСтрока.ИмяДоступнойФормы = СокрЛП(ТекВыбранноеЗначение.Значение);
		КонецЦикла;	
	Иначе
		// Ничего не выбрано.
	КонецЕсли;
КонецПроцедуры		// ВыборДоступныхФормСхемыРеквизитов_Завершение()

&НаКлиенте
Процедура ОткрытьДоступныеФормыСхемРеквизитов(Команда)
	СтруктураПараметров = Новый Структура;
	СписокФорм = Новый СписокЗначений;
	Для Каждого ТекДоступныеФормыСхемРеквизитов Из Объект.ДоступныеФормыСхемРеквизитов Цикл
		СписокФорм.Добавить(ТекДоступныеФормыСхемРеквизитов.ИмяДоступнойФормы);
	КонецЦикла;	
	СтруктураПараметров.Вставить("СписокДоступныхФормСхемРеквизитов", СписокФорм);
	СтруктураПараметров.Вставить("ОбъектБД", Объект.Ссылка);
	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыборДоступныхФормСхемыРеквизитов_Завершение", ЭтотОбъект);
	РасширениеПроцессыИСогласованиеКлиентУХ.ОткрытьФормуДоступныхСхемРеквизитов(СтруктураПараметров, ЭтаФорма, ОписаниеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписи_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	Иначе
		// Пользователь отказался от закрытия.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Проверка заполнения реквизита разделения организации.
	Если СокрЛП(Объект.РеквизитРазделенияПоОрганизациям) = "" Тогда
		Если ЕстьРеквизитСТипом("Справочник.Организации") Тогда
			Если НЕ ВыполняетсяЗакрытие Тогда
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'В объекте не заполнен Реквизит для разделения по организациям. Продолжить запись?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗаписи_Завершение", ЭтаФорма);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			Иначе
				// Продолжаем закрытие.
			КонецЕсли;
		Иначе
			// Нет такого реквизита. Подтверждение не требуется.
		КонецЕсли;
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;
