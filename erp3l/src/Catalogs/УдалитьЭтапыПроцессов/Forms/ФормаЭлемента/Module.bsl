
//	ПРОЦЕДУРЫ, ВЫЗЫВАЕМЫЕ ТОЛЬКО ИЗ ОБРАБОТЧИКОВ СОБЫТИЙ ФОРМЫ

&НаСервереБезКонтекста
Функция НовыйКомпоновщикНастроекОтбораОрганизационныхЕдиниц(СписокКомпоновщикиНастроек, АдресСКД)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
	СписокКомпоновщикиНастроек.Добавить(КомпоновщикНастроек);
	Возврат КомпоновщикНастроек;
	
КонецФункции

&НаСервере
Функция ЗаполнитьАдресСКД()
	
	Если ПустаяСтрока(АдресСКД) Тогда
		АдресСКД = ПоместитьВоВременноеХранилище(Справочники.УдалитьЭтапыПроцессов.ПолучитьМакет("ОтборОрганизационныхЕдиниц"), УникальныйИдентификатор);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыИзОбъекта(ЗначениеКопирования)
	
	Если НЕ ЗаполнитьАдресСКД() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОЕ Из РеквизитФормыВЗначение("Объект").ОрганизационныеЕдиницыОтбор Цикл
		
		СтрокаТЧ = ОрганизационныеЕдиницыОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаОЕ,, "Отбор");
		СтрокаТЧ.ТипОрганизационнойЕдиницы = СтрокаТЧ.ОрганизационнаяЕдиница.ТипОрганизации;
		СтрокаТЧ.КартинкаСтрок = ОрганизацииКлиентСерверУХ.ПолучитьКартинкуСтрокПоТипуОрганизации(СтрокаТЧ.ТипОрганизационнойЕдиницы);
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда 
			ХранилищеИсточник = ЗначениеКопирования.ОрганизационныеЕдиницыОтбор[СтрокаОЕ.НомерСтроки - 1].Отбор.Получить();
		Иначе
			ХранилищеИсточник = СтрокаОЕ.Отбор.Получить();
		КонецЕсли;
		
		СкопироватьОтбор(ХранилищеИсточник, НовыйКомпоновщикНастроекОтбораОрганизационныхЕдиниц(СписокКомпоновщикиНастроек, АдресСКД).Настройки.Отбор);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаОтбора(ЭлементыОтбора, ГруппаИЛИ = ЛОЖЬ, ПараметрыЗапроса)
	
	ОператорыВидыСравнений = Новый Соответствие;
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Больше,				"%П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии,				"%П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВСписке,				"%П1% В(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,		"%П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Заполнено,				"НЕ %П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеВИерархии,			"НЕ %П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке,				"НЕ %П1% В(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии,	"НЕ %П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеЗаполнено,			"%П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеРавно,				"%П1% <> %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеСодержит,			"НЕ %П1% ПОДОБНО %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Равно,					"%П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Содержит,				"%П1% ПОДОБНО %П2%");
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	ПоляСтруктурыКД = Новый Соответствие;
	Для Каждого Поле Из СКД.НаборыДанных[0].Поля Цикл
		ПоляСтруктурыКД.Вставить(Новый ПолеКомпоновкиДанных(Поле.ПутьКДанным), Поле);
	КонецЦикла;
	
	Текст = "";
	ОператорГруппы = ?(ГруппаИЛИ, " ИЛИ ", " И ");
	
	Для Каждого Элемент Из ЭлементыОтбора Цикл
		
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекстЭлемента = ПолучитьТекстЗапросаОтбора(Элемент.Элементы, Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли, ПараметрыЗапроса);
			Если НЕ ПустаяСтрока(ТекстЭлемента) Тогда
				ТекстЭлемента = ?(Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе, "НЕ ", "") + "(" + ТекстЭлемента + ")";
			КонецЕсли;
		Иначе
			ОператорСравнения = ОператорыВидыСравнений.Получить(Элемент.ВидСравнения);
			Если НЕ ОператорСравнения = Неопределено Тогда
				П1 = ПоляСтруктурыКД.Получить(Элемент.ЛевоеЗначение).ПутьКДанным;
				ИмяПараметра = Справочники.УдалитьЭтапыПроцессов.ПолучитьУникальноеИмяПараметраПоПутиКДанным(П1);
				ТекстЭлемента = СтрЗаменить(ОператорСравнения, "%П1%", "Т." + П1);
				ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "%П2%", "&" + ИмяПараметра);
				Если Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
					П2 = ПоляСтруктурыКД.Получить(Элемент.ЛевоеЗначение).ТипЗначения.ПривестиЗначение(Неопределено);
				Иначе
					П2 = Элемент.ПравоеЗначение;
				КонецЕсли;
				ПараметрыЗапроса.Вставить(ИмяПараметра, П2);
			Иначе
				ТекстЭлемент = "";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЭлемента) Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст), "", ОператорГруппы) + ТекстЭлемента;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Текст) Тогда 
		Текст = "ИСТИНА";
	ИначеЕсли ГруппаИЛИ Тогда
		Текст = "(" + Текст + ")";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции


Функция ПриВыбореВидаДокумента(ВыбранноеЗначение)
	
	
		Возврат ВыбранноеЗначение.ИспользуетсяВПроцессе;
	
	
КонецФункции


//	ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ПроверитьВозможностьЗаписи(ТолькоПросмотр, Ложь);
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьРеквизитыФормыИзОбъекта(Параметры.ЗначениеКопирования);
		Иначе
			ЗаполнитьАдресСКД();
		КонецЕсли;
		
		Объект.ТипОрганизацийЭтапа=Перечисления.ТипыОрганизационныхЕдиниц.Обычная;
		Объект.КритерийУтвержденияЭтапа=Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыВсеЭкземплярыОтчетовЭтапа;
		
	КонецЕсли;
	
	ВидДокументаЭкземпляр=Перечисления.ВидыДокументовЭтапа.ЭкземплярыОтчетов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Индекс = 0 По ОрганизационныеЕдиницыОтбор.Количество()-1 Цикл
		
		ОрганизационныеЕдиницыОтбор[Индекс].Отбор = СписокКомпоновщикиНастроек.Получить(Индекс).Значение.Настройки.Отбор;
		ОрганизационныеЕдиницыОтбор[Индекс].ИндексКомпоновщикаНастроек = Индекс;
		ОграничитьВыборТипаОрганизационнойЕдиницыОтбора(ОрганизационныеЕдиницыОтбор[Индекс].Отбор);
		
	КонецЦикла;
	
	ДобавитьЕдинственнуюСтрокуОтбораОрганизационныхЕдиниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма И ИмяСобытия = "ДобавлениеНовойСтрокиОтбораОрганизационныхЕдиниц" Тогда
		
		Параметр.Строка.Отбор = НовыйКомпоновщикНастроекОтбораОрганизационныхЕдиниц(СписокКомпоновщикиНастроек, АдресСКД).Настройки.Отбор;
		Параметр.Строка.ИндексКомпоновщикаНастроек = СписокКомпоновщикиНастроек.Количество() - 1;
		ОграничитьВыборТипаОрганизационнойЕдиницыОтбора(Параметр.Строка.Отбор);
		ЗаполнитьОбязательныйЭлементОтбора(Параметр.Строка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
		СкопироватьОтбор(Параметр.Строка.Отбор, СписокКомпоновщикиНастроек.Получить(Параметр.Строка.ИндексКомпоновщикаНастроек).Значение.Настройки.Отбор);
		
	ИначеЕсли ИмяСобытия="ВыбраныВидыДокументов" И Параметр.Количество()>0 Тогда
		
		ВидДокумента=?(ТипЗнч(Параметр[0])=Тип("СправочникСсылка.ПакетыПравилИмпортаТаблиц"),ПредопределенноеЗначение("Перечисление.ВидыДокументовЭтапа.ДокументыПараллельногоУчета"),ПредопределенноеЗначение("Перечисление.ВидыДокументовЭтапа.ЭкземплярыОтчетов"));
		
		Для Каждого СтрДокумент ИЗ Параметр Цикл
			
			Если Объект.ФормируемыеДокументы.НайтиСтроки(Новый Структура("ШаблонДокумента",СтрДокумент)).Количество()=0 Тогда
				
				НоваяСтрока=Объект.ФормируемыеДокументы.Добавить();
				НоваяСтрока.ДокументБД=СтрДокумент;
				ОпределитьТипКолонки(СтрДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРеквизитыФормыИзОбъекта(?(Параметры.Свойство("ЗначениеКопирования"), Параметры.ЗначениеКопирования, Неопределено));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОрганизационныеЕдиницыОтбор.Очистить();
	ТекущийОбъект.ОрганизационныеЕдиницыПараметрыОтбора.Очистить();
	Для Каждого СтрокаТЧ ИЗ ОрганизационныеЕдиницыОтбор Цикл
		
		СтрокаОЕ = ТекущийОбъект.ОрганизационныеЕдиницыОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОЕ, СтрокаТЧ,, "Отбор");
		
		Отбор = СписокКомпоновщикиНастроек.Получить(СтрокаТЧ.ИндексКомпоновщикаНастроек).Значение.Настройки.Отбор;
		
		СтрокаОЕ.Отбор = Новый ХранилищеЗначения(Отбор);
		СтрокаОЕ.ОтборПредставление = Строка(Отбор);
		
		ПараметрыЗапроса = Новый Структура;
		СтрокаОЕ.ОтборТекстЗапроса = ПолучитьТекстЗапросаОтбора(Отбор.Элементы,, ПараметрыЗапроса);
		
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ПараметрЗапроса.Значение Цикл
					НовыйПараметр = ТекущийОбъект.ОрганизационныеЕдиницыПараметрыОтбора.Добавить();
					НовыйПараметр.Имя = ПараметрЗапроса.Ключ;
					НовыйПараметр.Значение = ЭлементСписка.Значение;
				КонецЦикла;
			Иначе
				НовыйПараметр = ТекущийОбъект.ОрганизационныеЕдиницыПараметрыОтбора.Добавить();
				НовыйПараметр.Имя = ПараметрЗапроса.Ключ;
				НовыйПараметр.Значение = ПараметрЗапроса.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//	КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура РедактироватьСписокРассылки(Команда)
	
	ЭтаФорма.Записать();
	
КонецПроцедуры

//	ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПолучитьТипОрганизационнойЕдиницы(ОрганизационнаяЕдиница)
	
	Возврат ОрганизационнаяЕдиница.ТипОрганизации;
	
КонецФункции

//	ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ТипОрганизационнойЕдиницыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ТипОрганизацийЭтапа = ВыбранноеЗначение Тогда
		
		УдаляемыеСтрокиОтбора = Новый Массив;
		Для Каждого Строка Из ОрганизационныеЕдиницыОтбор Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ТипОрганизационнойЕдиницы) ИЛИ Строка.ТипОрганизационнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
				Продолжить;
			Иначе
				УдаляемыеСтрокиОтбора.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
				
		ИзменяемыеСтрокиОтбора = Новый Массив;
		Если Объект.ТипОрганизацийЭтапа = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
			Для Каждого Строка Из ОрганизационныеЕдиницыОтбор Цикл
				Если НЕ ЗначениеЗаполнено(Строка.ОрганизационнаяЕдиница) И НЕ Строка.ИспользоватьИерархию Тогда
					ИзменяемыеСтрокиОтбора.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УдаляемыеСтрокиОтбора.Количество() ИЛИ ИзменяемыеСтрокиОтбора.Количество() Тогда
			
			ТекстВопроса = "";
			Если УдаляемыеСтрокиОтбора.Количество() Тогда
				ТекстВопроса = "Строки организационных единицы с типом """ + Объект.ТипОрганизацийЭтапа + """ будут удалены.";
			КонецЕсли;
			
			Если ИзменяемыеСтрокиОтбора.Количество() Тогда 
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ВК) + "У строк с не выбранной организационной единицей будет включено ""Использовать иерархию"".";
			КонецЕсли;
			
			Для Каждого Строка Из УдаляемыеСтрокиОтбора Цикл
				ОрганизационныеЕдиницыОтбор.Удалить(Строка);
			КонецЦикла;
			
			Для Каждого Строка Из ИзменяемыеСтрокиОтбора Цикл
				Строка.ИспользоватьИерархию = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтандартнаяОбработка Тогда
			
			Для Каждого Строка Из ОрганизационныеЕдиницыОтбор Цикл
				ОграничитьВыборТипаОрганизационнойЕдиницыОтбора(Строка.Отбор, ВыбранноеЗначение, Истина);
			КонецЦикла;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ОбработатьДобавлениеНовойСтрокиОтбораОрганизационныхЕдиниц(Элемент.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыОтборПослеУдаления(Элемент)
	
	ДобавитьЕдинственнуюСтрокуОтбораОрганизационныхЕдиниц();
	Элементы.ОрганизационныеЕдиницыОтбор.ТекущаяСтрока = ОрганизационныеЕдиницыОтбор[0].ПолучитьИдентификатор(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыОтборОрганизационнаяЕдиницаПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ТекущиеДанные.ТипОрганизационнойЕдиницы = ПолучитьТипОрганизационнойЕдиницы(ТекущиеДанные.ОрганизационнаяЕдиница);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипОрганизационнойЕдиницы) Тогда
		
		Если НЕ ТекущиеДанные.ТипОрганизационнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
	
			Если ТекущиеДанные.ИспользоватьИерархию Тогда
				ТекущиеДанные.ИспользоватьИерархию = Ложь;
			КонецЕсли;
			
			Пока ТекущиеДанные.Отбор.Элементы.Количество() Цикл
				ТекущиеДанные.Отбор.Элементы.Удалить(ТекущиеДанные.Отбор.Элементы[0]);
			КонецЦикла;
		
		КонецЕсли;
		
	Иначе
		
		Если НЕ Объект.ТипОрганизацийЭтапа = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
			ТекущиеДанные.ИспользоватьИерархию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.КартинкаСтрок = РаботаСДиалогамиУХ.ПолучитьКартинкуСтрокПоТипуОрганизации(ТекущиеДанные.ТипОрганизационнойЕдиницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыОтборОрганизационнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если ЗначениеЗаполнено(Объект.ТипОрганизацийЭтапа) Тогда
	
		Если Объект.ТипОрганизацийЭтапа = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
			
			Отбор = Новый Структура("ТипОрганизации", Объект.ТипОрганизацийЭтапа);
			
		Иначе
			
			Отбор = Новый Структура("ТипОрганизации", Новый Массив);
			Отбор.ТипОрганизации.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая"));
			Отбор.ТипОрганизации.Добавить(Объект.ТипОрганизацийЭтапа);
			
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Организации.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыОтборОтборПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОрганизационныеЕдиницыОтбор.ТекущиеДанные;
	
	ДобавитьОбязательныйЭлементОтбора(ТекущиеДанные.Отбор);
	СкопироватьОтбор(ТекущиеДанные.Отбор, СписокКомпоновщикиНастроек.Получить(ТекущиеДанные.ИндексКомпоновщикаНастроек).Значение.Настройки.Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыОтборОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОрганизационныеЕдиницыОтбор.ТекущиеДанные;
	ТекущиеДанные.Отбор = СписокКомпоновщикиНастроек.Получить(ТекущиеДанные.ИндексКомпоновщикаНастроек).Значение.Настройки.Отбор;
	
КонецПроцедуры

// ПРОЦЕДУРЫ, ОБСЛУЖИВАЮЩИЕ ПОВЕДЕНИЕ ОТБОРА ОРГАНИЗАЦИОННЫХ ЕДИНИЦ

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьОтбор(Источник, Приемник)
	
	Приемник.Элементы.Очистить();
	
	Для Каждого ЭлементИсточник Из Источник.Элементы Цикл
		НовыйЭлемент = Приемник.Элементы.Добавить(ТипЗнч(ЭлементИсточник));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник, );
		Если Тип(НовыйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтбор(ЭлементИсточник, НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеНовойСтрокиОтбораОрганизационныхЕдиниц(Строка)
	
	Строка.КартинкаСтрок = 10;
	Оповестить("ДобавлениеНовойСтрокиОтбораОрганизационныхЕдиниц", Новый Структура("Строка", Строка), ЭтаФорма);
	
	Если Объект.ТипОрганизацийЭтапа = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
		Если ОрганизационныеЕдиницыОтбор.Количество() = 1 Тогда
			Строка.ИспользоватьИерархию = Истина;
		КонецЕсли;
	Иначе
		Строка.ИспользоватьИерархию = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбязательныйЭлементОтбора(Отбор)
	
	Нашли = Ложь;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если Тип(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОрганизационнойЕдиницы") Тогда
				ЗаполнитьОбязательныйЭлементОтбора(Элемент);
				Нашли = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		ЗаполнитьОбязательныйЭлементОтбора(Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")))
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьОбязательныйЭлементОтбора(ЭлементОтбора)
	
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОрганизационнойЕдиницы");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Объект.ТипОрганизацийЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеОтбораПоОрганизационнойЕдинице(Элементы, ТипОрганизационныхЕдиницЭтапа)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Тип(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ИзменитьЗначениеОтбораПоОрганизационнойЕдинице(Элемент.Элементы, ТипОрганизационныхЕдиницЭтапа);
		ИначеЕсли Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОрганизационнойЕдиницы") И ЗначениеЗаполнено(Элемент.ПравоеЗначение) Тогда
			Элемент.ПравоеЗначение = ТипОрганизационныхЕдиницЭтапа;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьВыборТипаОрганизационнойЕдиницыОтбора(Отбор, ТипОрганизационныхЕдиницЭтапа = Неопределено, ИзменятьТекущий = Ложь)
	
	Если ТипОрганизационныхЕдиницЭтапа = Неопределено Тогда
		ТипОрганизационныхЕдиницЭтапа = Объект.ТипОрганизацийЭтапа;
	КонецЕсли;
	
	ДоступныйЭлементОтбора = Отбор.ДоступныеПоляОтбора.Элементы.Найти("ТипОрганизационнойЕдиницы");
	ДоступныйЭлементОтбора.ДоступныеВидыСравнения.Очистить();
	ДоступныйЭлементОтбора.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ДоступныйЭлементОтбора.ДоступныеЗначения = Новый СписокЗначений;
	ДоступныйЭлементОтбора.ДоступныеЗначения.Добавить(ТипОрганизационныхЕдиницЭтапа);
	
	Если ИзменятьТекущий Тогда
		ИзменитьЗначениеОтбораПоОрганизационнойЕдинице(Отбор.Элементы, ТипОрганизационныхЕдиницЭтапа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЕдинственнуюСтрокуОтбораОрганизационныхЕдиниц()
	
	Если ОрганизационныеЕдиницыОтбор.Количество() = 0 Тогда 
		ОбработатьДобавлениеНовойСтрокиОтбораОрганизационныхЕдиниц(ОрганизационныеЕдиницыОтбор.Добавить());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВидовДокументов(Команда)
	
	МассивДокументов=Новый Массив;
	
	Для Каждого Строка ИЗ Объект.ФормируемыеДокументы Цикл
		
		МассивДокументов.Добавить(Строка.ШаблонДокумента);
		
	КонецЦикла;
		
	ОткрытьФорму("ОбщаяФорма.ПодборВидовФормируемыхДокументов",Новый Структура("МассивДокументов",МассивДокументов));
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Элементы.ФормируемыеДокументы.ТекущиеДанные.ШаблонДокумента)=Тип("СправочникСсылка.ДокументыБД") Тогда
		
		СтандартнаяОбработка=Ложь;
		ОткрытьФорму("Справочник.ДокументыБД.ФормаВыбора",Новый Структура("Отбор",Новый Структура("ИспользуетсяВПроцессе",Истина)),Элемент);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОпределитьТипКолонки(Значение)
	
	   ТекущийОбъект=Метаданные.Документы.Найти(Значение.Наименование);
	   ТекРеквизит=Значение.РеквизитШаблонаДокумета;
	   
	   Если ТекущийОбъект=Неопределено Тогда
		   
		   Возврат;
		 		   
	   ИначеЕсли ТекРеквизит="" Тогда	  
		   
		   Элементы.ФормируемыеДокументы.ПодчиненныеЭлементы.ШаблонДокумента.ОграничениеТипа=Метаданные.Справочники.ДокументыБД.СтандартныеРеквизиты.Ссылка.Тип;
		   
	   Иначе	   
		   
		   Элементы.ФормируемыеДокументы.ПодчиненныеЭлементы.ШаблонДокумента.ОграничениеТипа=ТекущийОбъект.Реквизиты[ТекРеквизит].Тип;	   
		   Элементы.ФормируемыеДокументы.ПодчиненныеЭлементы.ШаблонДокумента.ВыбиратьТип=(ТекущийОбъект.Реквизиты[ТекРеквизит].Тип.Типы().Количество()>1);
 
	   КонецЕсли;
	   
 КонецПроцедуры


&НаКлиенте
Процедура ФормируемыеДокументыПриИзменении(Элемент)
	
	Если  Элемент.ТекущийЭлемент.Имя="ВидДокумента" Тогда 
		
		ОпределитьТипКолонки(Элементы.ФормируемыеДокументы.ТекущиеДанные.ДокументБД);
		
	КонецЕсли;

КонецПроцедуры
