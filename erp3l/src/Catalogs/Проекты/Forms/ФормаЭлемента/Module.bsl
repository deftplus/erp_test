#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаУправленческогоУчета=Константы.ВалютаУправленческогоУчета.Получить();
	
	
	ОбновитьСведенияОЛимитах();
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьАтрибутыПроекта();
		ПрочитатьСтадиюЭтапа();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация=Константы.ОсновнаяОрганизацияДляПроектов.Получить(); 
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
				
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Для Каждого Строка ИЗ АтрибутыПроектов Цикл
		
		Если Строка.ДлительностьДней<0 Тогда
			
			СтрокаШаблона = Нстр("ru = 'Для сценария %1 установлена отрицательная продолжительность проекта.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				ПоказатьПредупреждение(, СтрШаблон(СтрокаШаблона, Строка.Сценарий));
			КонецЕсли;
			
			Отказ=Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьАтрибутыПроекта();
	ОбновитьСведенияОЛимитах();
	ОбновитьАтрибутыПроекта();
	ЗаписатьСтадиюЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененПроект",Новый Структура("Проект",Объект.Ссылка));
	
	Если ОтображатьСписок=0 Тогда
		
		Для Каждого Строка ИЗ КлючевыеПоказатели.ПолучитьЭлементы() Цикл
			
			Элементы.КлючевыеПоказатели.Развернуть(Строка.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьКлючевыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия="ИзмененДокументТранзакции" И Параметр.Проект = Объект.Ссылка Тогда
		ОбновитьСведенияОЛимитах();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияРодительНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		ПоказатьЗначение(, Объект.Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ОпределитьПроектЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	ОпределитьПроектЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийСравнениеПриИзменении(Элемент)

	ОбновитьОтображениеКлючевыхРеквизитов();
		
КонецПроцедуры

&НаКлиенте
Процедура СценарийБазисПриИзменении(Элемент)
	
	ОбновитьОтображениеКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСписокПриИзменении(Элемент)
	
	Элементы.ГруппаОтображение.ТекущаяСтраница=?(ОтображатьСписок=1,Элементы.ГруппаСписок,Элементы.ГруппаСравнение);
	
	Если ОтображатьСписок=0 Тогда
		
		ОбновитьОтображениеКлючевыхРеквизитов();
		
		Для Каждого Строка ИЗ КлючевыеПоказатели.ПолучитьЭлементы() Цикл
			
			Элементы.КлючевыеПоказатели.Развернуть(Строка.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеПриИзменении(Элемент)
	
	КлючевыеПоказателиПриИзменении("Сравнение",Элементы.КлючевыеПоказатели.ТекущаяСтрока);	
		
КонецПроцедуры

&НаКлиенте
Процедура БазисПриИзменении(Элемент)
	
	 КлючевыеПоказателиПриИзменении("Базис",Элементы.КлючевыеПоказатели.ТекущаяСтрока);
	
 КонецПроцедуры

&НаКлиенте
Процедура АтрибутыПроектовПриИзменении(Элемент)
	
	СтрДанные=Элементы.АтрибутыПроектов.ТекущиеДанные;
	
	СтрДанные.ИтогоЧистыйДенежныйПоток	= СтрДанные.ИтогоПоступленияБДДС	- СтрДанные.ИтогоСписанияБДДС;
	СтрДанные.ИтогоПрибыльУбыток		= СтрДанные.ИтогоДоходыБДР			- СтрДанные.ИтогоРасходыБДР;
	СтрДанные.ИтогоМатериальныйБаланс	= СтрДанные.ИтогоПоступленияРесурсы	- СтрДанные.ИтогоСписанияРесурсы;
	
	СтрДанные.ДлительностьДней=(СтрДанные.ДатаОкончания-СтрДанные.ДатаНачала)/86400+1;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КлючевыеПоказатели

&НаКлиенте
Процедура КлючевыеПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КлючевыеПоказателиПриИзменении(ИмяЭлемента,ИдентификаторСтроки)
	
	СтрДаннные=КлючевыеПоказатели.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	РассчитатьДанныеСтрокиПоказателей(ИдентификаторСтроки);
	ОбновитьАтрибутПроекта(ИмяЭлемента,ИдентификаторСтроки);
	
	Если СтрДаннные.ИмяРеквизита="ДатаНачала" ИЛИ СтрДаннные.ИмяРеквизита="ДатаОкончания" Тогда 
		
		ПересчитатьДлительностьДней();
		
	ИначеЕсли СтрДаннные.ИмяРеквизита="ИтогоСписанияБДДС"
		ИЛИ СтрДаннные.ИмяРеквизита="ИтогоРасходыБДР"
		ИЛИ СтрДаннные.ИмяРеквизита="ИтогоСписанияРесурсы"
		ИЛИ СтрДаннные.ИмяРеквизита="ИтогоПоступленияБДДС"
		ИЛИ СтрДаннные.ИмяРеквизита="ИтогоДоходыБДР"
		ИЛИ СтрДаннные.ИмяРеквизита="ИтогоПоступленияРесурсы" Тогда
		
		РассчитатьИтоговыйПоказательБюджета(СтрДаннные.ИмяРеквизита,ИмяЭлемента);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеПоказателиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Элемент.Имя = "Базис" ИЛИ Элемент.Имя  = "Сравнение" Тогда
	
		ТекДанные = Элементы.КлючевыеПоказатели.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура("ИмяЭлемента, ТекСтрока, ЭтоДата", Элемент.Имя, Элементы.КлючевыеПоказатели.ТекущаяСтрока, ТекДанные.ЭтоДата);
		Делегат = Новый ОписаниеОповещения("ОбработатьВводЗначенияКлючевогоПоказателя", ЭтаФорма, ДопПараметры);
		Если ТекДанные.ЭтоДата Тогда
			ПоказатьВводДаты(Делегат, ТекДанные[Элемент.Имя],, ЧастиДаты.Дата);
		Иначе
			ПоказатьВводЧисла(Делегат, ТекДанные[Элемент.Имя],, 15, 2);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АктуализироватьПоказатели(Команда)
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Для нового объекта не определены движения. Расчет показателей эффективности невозможен.'"));
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	РассчитатьПоказателиЭффективности();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьЭкземплярыОтчетов(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Для нового объекта не определены движения. Актуализация экземпляров отчетов невозможна.'"));
		Возврат;
		
	КонецЕсли;
	
	Записать();	
	АктуализироватьЭкземплярыОтчетовНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСведенияОЛимитах()
	
	Если Объект.Ссылка.Пустая() Тогда
		ЕстьПревышениеЛимитов = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Проведен
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проект = &Проект
		|	И ЗаявкаНаРасходованиеДенежныхСредств.ЕстьПревышениеЛимитов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаРасход.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасход КАК ЗаявкаНаРасход
		|ГДЕ
		|	ЗаявкаНаРасход.Проведен
		|	И ЗаявкаНаРасход.Проект = &Проект
		|	И ЗаявкаНаРасход.ЕстьПревышениеЛимитов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланируемыйДоход.Ссылка
		|ИЗ
		|	Документ.ПланируемыйДоход КАК ПланируемыйДоход
		|ГДЕ
		|	ПланируемыйДоход.Проведен
		|	И ПланируемыйДоход.Проект = &Проект
		|	И ПланируемыйДоход.ЕстьПревышениеЛимитов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОперативныйПланПоБюджетамОбороты.ДокументПланирования
		|ИЗ
		|	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(, , Период, Проект = &Проект) КАК ОперативныйПланПоБюджетамОбороты
		|ГДЕ
		|	ВЫРАЗИТЬ(ОперативныйПланПоБюджетамОбороты.ДокументПланирования КАК Документ.ОперативныйПлан).ЕстьПревышениеЛимитов = ИСТИНА";
		Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
		ЕстьПревышениеЛимитов = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Элементы.ГруппаЕстьПревышениеЛимитов.Видимость = ЕстьПревышениеЛимитов;
	Элементы.ГруппаНетПревышенияЛимитов.Видимость = Не ЕстьПревышениеЛимитов;
	
КонецПроцедуры // ОбновитьТаблицуТранзакций()

&НаСервере
Процедура ОбновитьАтрибутыПроекта()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	АтрибутыПроектов.Сценарий,
	|	АтрибутыПроектов.ДатаНачала,
	|	АтрибутыПроектов.ДатаОкончания,
	|	АтрибутыПроектов.ДлительностьДней,
	|	АтрибутыПроектов.NPV,
	|	АтрибутыПроектов.IRR,
	|	АтрибутыПроектов.ОценкаПроекта,
	|	АтрибутыПроектов.ИтогоСписанияБДДС,
	|	АтрибутыПроектов.ИтогоРасходыБДР,
	|	АтрибутыПроектов.ИтогоСписанияРесурсы,
	|	АтрибутыПроектов.ПроцентЗавершения,
	|	АтрибутыПроектов.PBP,
	|	АтрибутыПроектов.FCF,
	|	АтрибутыПроектов.PI,
	|	АтрибутыПроектов.ИтогоПоступленияБДДС,
	|	АтрибутыПроектов.ИтогоДоходыБДР,
	|	АтрибутыПроектов.ИтогоПоступленияРесурсы,
	|	АтрибутыПроектов.ИтогоЧистыйДенежныйПоток,
	|	АтрибутыПроектов.ИтогоПрибыльУбыток,
	|	АтрибутыПроектов.ИтогоМатериальныйБаланс,
	|	АтрибутыПроектов.СтавкаДисконтирования
	|ИЗ
	|	РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
	|ГДЕ
	|	АтрибутыПроектов.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	АтрибутыПроектов.Очистить();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=АтрибутыПроектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СценарийБазис) Тогда
		
		СценарийБазис=Справочники.Сценарии.Факт;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СценарийСравнение) Тогда
		
		СценарийСравнение=Справочники.Сценарии.План;
		
	КонецЕсли;
	
	ОбновитьОтображениеКлючевыхРеквизитов();
	
КонецПроцедуры // ОбновитьАтрибутыПроекта() 

&НаСервере
Процедура ЗаписатьАтрибутыПроекта()
	
	 НаборЗаписей=РегистрыСведений.АтрибутыПроектов.СоздатьНаборЗаписей();
	 НаборЗаписей.Отбор.Проект.Установить(Объект.Ссылка);
	 
	 Для Каждого Строка Из АтрибутыПроектов Цикл
		 
		 НоваяСтрока=НаборЗаписей.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		 НоваяСтрока.Проект=Объект.Ссылка;
		 
	 КонецЦикла;
	 
	 НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ЗаписатьАтрибутыПроекта() 

&НаСервере
Процедура РассчитатьДанныеСтрокиПоказателей(ИдентификаторСтроки)
	
	СтрокаТаблицы=КлючевыеПоказатели.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаТаблицы.ТолькоФакт Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.РассчитыватьОтклонение Тогда
		
		Если СтрокаТаблицы.ЭтоДата Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Базис) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сравнение) Тогда
				СтрокаТаблицы.Отклонение = 0;
			Иначе
				СтрокаТаблицы.Отклонение = (НачалоДня(СтрокаТаблицы.Сравнение)-НачалоДня(СтрокаТаблицы.Базис))/(86400);
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Отклонение = СтрокаТаблицы.Сравнение-СтрокаТаблицы.Базис;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаТаблицы.РассчитыватьПроценты Тогда
		
		СтрокаТаблицы.ПроцентОтклонения = ?(СтрокаТаблицы.Базис=0,0,СтрокаТаблицы.Отклонение /СтрокаТаблицы.Базис)*100;
		СтрокаТаблицы.ПроцентВыполнения = ?(СтрокаТаблицы.Базис=0,0,СтрокаТаблицы.Сравнение /СтрокаТаблицы.Базис)*100;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьКлючевойПоказатель(Коллекция, Имя, Наименование, ТолькоФакт=Ложь, РассчитыватьОтклонение=Истина, РассчитыватьПроценты=Истина, ЭтоДата=Ложь,ВозможноРедактирование=Истина)
	
	НоваяСтрока = Коллекция.ПолучитьЭлементы().Добавить();
	НоваяСтрока.НаименованиеПоказателя = Наименование; // для отображения пользователю
	НоваяСтрока.ИмяРеквизита = Имя; // имя в в регистре
	НоваяСтрока.ТолькоФакт = ТолькоФакт;
	НоваяСтрока.РассчитыватьОтклонение = РассчитыватьОтклонение;
	НоваяСтрока.РассчитыватьПроценты = РассчитыватьПроценты;
	НоваяСтрока.ЭтоДата = ЭтоДата;
	НоваяСтрока.ВозможноРедактирование=ВозможноРедактирование;
	
	ЗаполнитьАтрибутыПроекта(НоваяСтрока);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция ДобавитьПоказательЭффективности(ТЗ, Имя, Наименование)
	
	НоваяСтрока = ТЗ.Добавить();
	НоваяСтрока.НаименованиеПоказателя = Наименование; // для отображения пользователю
	НоваяСтрока.ИмяРеквизита = Имя; // имя в в регистре
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАтрибутыПроекта(Строка)
	
	ДанныеБазис=АтрибутыПроектов.НайтиСтроки(Новый Структура("Сценарий",СценарийБазис));
	
	Если ДанныеБазис.Количество()=0 Тогда
		
		НоваяСтрока=АтрибутыПроектов.Добавить();
		НоваяСтрока.Сценарий=СценарийБазис;
		Строка.Базис=НоваяСтрока[Строка.ИмяРеквизита];
		
	Иначе
		
		Строка.Базис=ДанныеБазис[0][Строка.ИмяРеквизита];
		
	КонецЕсли;
	
	ДанныеСравнение=АтрибутыПроектов.НайтиСтроки(Новый Структура("Сценарий",СценарийСравнение));
	
	Если ДанныеСравнение.Количество()=0 Тогда
		
		НоваяСтрока=АтрибутыПроектов.Добавить();
		НоваяСтрока.Сценарий=СценарийСравнение;
		Строка.Сравнение=НоваяСтрока[Строка.ИмяРеквизита];
		
	Иначе
		
		Строка.Сравнение=ДанныеСравнение[0][Строка.ИмяРеквизита];
		
	КонецЕсли;
	
	РассчитатьДанныеСтрокиПоказателей(Строка.ПолучитьИдентификатор());
		
КонецПроцедуры // ЗаполнитьАтрибутыПроекта() 

&НаСервере
Процедура ПрочитатьСтадиюЭтапа()
	
	СтадияПроекта = Справочники.Проекты.СтадияЭтапа(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтадиюЭтапа()
	
	Справочники.Проекты.ЗаписатьСтадиюЭтапа(Объект.Ссылка, СтадияПроекта);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКлючевыхРеквизитов()
	
	КлючевыеПоказатели.ПолучитьЭлементы().Очистить();
	
	СтрокаДанные=ДобавитьКлючевойПоказатель(КлючевыеПоказатели, "ДлительностьДней", Нстр("ru = 'Длительность дней'"),,,,,Ложь);	
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ДатаНачала", 				Нстр("ru = 'Дата начала'"),,,Ложь,Истина);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ДатаОкончания", 			Нстр("ru = 'Дата окончания'"),,,Ложь,Истина);
		
	ДобавитьКлючевойПоказатель(КлючевыеПоказатели, "ПроцентЗавершения", 		Нстр("ru = 'Процент завершения (экспертно)'"), Истина, Ложь, Ложь);
	
	СтрокаДанные=ДобавитьКлючевойПоказатель(КлючевыеПоказатели, "ИтогоЧистыйДенежныйПоток", 	Нстр("ru = 'Чистый денежный поток'"),,,,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ИтогоПоступленияБДДС", 		Нстр("ru = 'Поступления БДДС'"));
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ИтогоСписанияБДДС", 		Нстр("ru = 'Списания БДДС'"));
		
	СтрокаДанные=ДобавитьКлючевойПоказатель(КлючевыеПоказатели, "СтавкаДисконтирования", Нстр("ru = 'Ставка дисконтирования, %'"));
	ДобавитьКлючевойПоказатель(СтрокаДанные, "NPV", Нстр("ru = 'Чистая приведенная стоимость денежных потоков (NPV)'"),,, Ложь,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "IRR", Нстр("ru = 'Внутренняя ставка доходности (IRR)'"),,, Ложь,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "PBP", Нстр("ru = 'Срок окупаемости проекта (PBP)'"),,, Ложь,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "FCF", Нстр("ru = 'Свободный денежный поток (FCF)'"),,, Ложь,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "PI", Нстр("ru = 'Индекс прибыльности (PI)'"),,, Ложь,,Ложь);
	
	СтрокаДанные=ДобавитьКлючевойПоказатель(КлючевыеПоказатели, "ИтогоПрибыльУбыток", 		Нстр("ru = 'Прибыль / убыток'"),,,,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ИтогоДоходыБДР", 			Нстр("ru = 'Доходы БДР'"));
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ИтогоРасходыБДР", 			Нстр("ru = 'Расходы БДР'"));
	
	СтрокаДанные=ДобавитьКлючевойПоказатель(КлючевыеПоказатели, "ИтогоМатериальныйБаланс", 	Нстр("ru = 'Материальный баланс'"),,,,,Ложь);
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ИтогоПоступленияРесурсы", 	Нстр("ru = 'Стоимость поступивших ресурсов'"));
	ДобавитьКлючевойПоказатель(СтрокаДанные, "ИтогоСписанияРесурсы", 		Нстр("ru = 'Стоимость списанных ресурсов'"));
	
	Элементы.Сравнение.Заголовок	= СценарийСравнение.Наименование;
	Элементы.Базис.Заголовок		= СценарийБазис.Наименование;			
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеСтрокиЭффективности(Строка, ДанныеЗаполнения)
	
	ИмяПоказателя = Строка.ИмяРеквизита;
	
	Строка.Факт = ?(Строка.ЭтоДата, Дата(ДанныеЗаполнения["Факт"+ИмяПоказателя]),Число(ДанныеЗаполнения["Факт"+ИмяПоказателя])); // заполняем у всех
	
	Если НЕ Строка.ТолькоФакт Тогда // Сравнение, Отклонение
		Строка.Сравнение = ?(Строка.ЭтоДата, Дата(ДанныеЗаполнения["Сравнение"+ИмяПоказателя]),Число(ДанныеЗаполнения["Сравнение"+ИмяПоказателя]));
	КонецЕсли;
	
	РассчитатьДанныеСтрокиПоказателей(Строка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКлючевыеПоказатели()
	
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДлительностьДней()
	
	мСтрокаДлительностьДней = ПолучитьСтрокуКлючевогоПоказателя("ДлительностьДней");
	мСтрокаНачало 			= ПолучитьСтрокуКлючевогоПоказателя("ДатаНачала");
	мСтрокаКонец 			= ПолучитьСтрокуКлючевогоПоказателя("ДатаОкончания");
	
	Если мСтрокаКонец.Сравнение = Неопределено ИЛИ мСтрокаНачало.Сравнение = Неопределено Тогда
		мСтрокаДлительностьДней.Сравнение = 0;
	Иначе
		мСтрокаДлительностьДней.Сравнение = (НачалоДня(мСтрокаКонец.Сравнение)-НачалоДня(мСтрокаНачало.Сравнение))/86400 + 1;
	КонецЕсли;
	
	Если мСтрокаКонец.Базис = Неопределено ИЛИ мСтрокаНачало.Базис = Неопределено Тогда
		мСтрокаДлительностьДней.Базис = 0;
	Иначе
		мСтрокаДлительностьДней.Базис = (НачалоДня(мСтрокаКонец.Базис)-НачалоДня(мСтрокаНачало.Базис))/86400 + 1;
	КонецЕсли;
	
	РассчитатьДанныеСтрокиПоказателей(	мСтрокаДлительностьДней.ПолучитьИдентификатор());
	ОбновитьАтрибутПроекта("Базис",		мСтрокаДлительностьДней.ПолучитьИдентификатор());
	ОбновитьАтрибутПроекта("Сравнение",	мСтрокаДлительностьДней.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуКлючевогоПоказателя(ИмяРеквизита)
	
	Возврат ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(КлючевыеПоказатели.ПолучитьЭлементы(),ИмяРеквизита,"ИмяРеквизита")
		
КонецФункции // ПолучитьСтрокуКлючевогоПоказателя() 

&НаСервере
Процедура РассчитатьИтоговыйПоказательБюджета(ИмяРеквизита,ИмяЭлемента)
	
	Если ИмяРеквизита="ИтогоСписанияБДДС"
		ИЛИ ИмяРеквизита="ИтогоПоступленияБДДС" Тогда
		
		СтрокаИтог=ПолучитьСтрокуКлючевогоПоказателя("ИтогоЧистыйДенежныйПоток");
		СтрокаИтог[ИмяЭлемента]=ПолучитьСтрокуКлючевогоПоказателя("ИтогоПоступленияБДДС")[ИмяЭлемента]-ПолучитьСтрокуКлючевогоПоказателя("ИтогоСписанияБДДС")[ИмяЭлемента];
		
	ИначеЕсли ИмяРеквизита="ИтогоРасходыБДР"
		ИЛИ ИмяРеквизита="ИтогоДоходыБДР" Тогда
		
		СтрокаИтог=ПолучитьСтрокуКлючевогоПоказателя("ИтогоПрибыльУбыток");
		СтрокаИтог[ИмяЭлемента]=ПолучитьСтрокуКлючевогоПоказателя("ИтогоДоходыБДР")[ИмяЭлемента]-ПолучитьСтрокуКлючевогоПоказателя("ИтогоРасходыБДР")[ИмяЭлемента];
		
	ИначеЕсли ИмяРеквизита="ИтогоСписанияРесурсы"
		ИЛИ ИмяРеквизита="ИтогоПоступленияРесурсы" Тогда
		
		СтрокаИтог=ПолучитьСтрокуКлючевогоПоказателя("ИтогоМатериальныйБаланс");
		СтрокаИтог[ИмяЭлемента]=ПолучитьСтрокуКлючевогоПоказателя("ИтогоПоступленияРесурсы")[ИмяЭлемента]-ПолучитьСтрокуКлючевогоПоказателя("ИтогоСписанияРесурсы")[ИмяЭлемента];
		
	КонецЕсли;
	
	РассчитатьДанныеСтрокиПоказателей(СтрокаИтог.ПолучитьИдентификатор());
	ОбновитьАтрибутПроекта(ИмяЭлемента,СтрокаИтог.ПолучитьИдентификатор());
	
КонецПроцедуры // РассчитатьИтоговыйПоказательБюджета() 
	
&НаСервере
Процедура ОбновитьАтрибутПроекта(ИмяЭлемента,ИдентификаторСтроки)
	
	СтрДаннные=КлючевыеПоказатели.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаАтрибут=АтрибутыПроектов.НайтиСтроки(Новый Структура("Сценарий",?(ИмяЭлемента="Базис",СценарийБазис,СценарийСравнение)));
	
	СтрокаАтрибут[0][СтрДаннные.ИмяРеквизита]=СтрДаннные[ИмяЭлемента];
		
КонецПроцедуры  // ОбновитьАтрибутПроекта()

&НаСервере
Процедура РассчитатьПоказателиЭффективности()
	
	ДвиженияБюджетированиеУХ.РассчитатьПоказателиЭффективностиПоПроекту(Объект.Ссылка);
	ОбновитьАтрибутыПроекта();
	
КонецПроцедуры // АктуализироватьДанныеПоПроекту()

&НаСервере
Процедура РазделИнвестиционнойПрограммыПриИзмененииНаСервере()
	
	РассчитатьПоказателиЭффективности();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводЗначенияКлючевогоПоказателя(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;

	СтрокаТЗ = КлючевыеПоказатели.НайтиПоИдентификатору(ДопПараметры.ТекСтрока);
	
	СтрокаТЗ[ДопПараметры.ИмяЭлемента] = Значение;
	
	КлючевыеПоказателиПриИзменении(ДопПараметры.ИмяЭлемента,ДопПараметры.ТекСтрока);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЭкземплярыОтчетовНаСервере()
	
	ДвиженияБюджетированиеУХ.АктуализироватьДанныеПоПроекту(Справочники.Сценарии.План,Объект.Ссылка);
	ДвиженияБюджетированиеУХ.АктуализироватьДанныеПоПроекту(Справочники.Сценарии.Факт,Объект.Ссылка);
	ОбновитьАтрибутыПроекта();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ПроектЭтапа.Видимость=Не Объект.Проект;	
	Элементы.СтадияПроекта.Видимость = НЕ Объект.Проект;
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ОпределитьПроектЭтапа()
	
	Если Объект.Проект Тогда
		
		Объект.ПроектЭтапа=Объект.Проект;
			
	ИначеЕсли НЕ Объект.Проект Тогда
		
		ТекущийРодитель=Объект.Родитель;
		
		Пока Истина Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущийРодитель) Тогда
				
				Объект.ПроектЭтапа=Справочники.Проекты.ПустаяСсылка();
				Прервать;
			
			ИначеЕсли ТекущийРодитель.Проект Тогда
				
				Объект.ПроектЭтапа= ТекущийРодитель;
				Прервать;
				
			Иначе
				
				ТекущийРодитель=ТекущийРодитель.Родитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОпределитьПроектЭтапа() 

#КонецОбласти

#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
		
КонецФункции

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Изменение состояния возможно только после записи данных.
				|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);	

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяОрганизацияПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Форма)

	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное)
	 ИЛИ Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование Тогда
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти
