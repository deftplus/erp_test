#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Параметры.Вставить("ШаблонПроцесса",Параметры.Ключ);						
					
			ВыбраннаяФорма = "Отчет.СетеваяДиаграммаШаблонаУниверсальногоПроцесса.ФормаОбъекта";
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

	
#Область ПрограммныйИнтерфейс

Функция СформироватьДеревоКонтекстаПроцесса(ШаблонПроцесса, ДеревоОтборов, СоставДерева, ТаблицаДоступныхПараметров = Неопределено) Экспорт
	
	Если СоставДерева.Свойство("Реквизиты") Тогда
		//1.Рисуем ветку параметров текущего процесса
		ПараметрыПроцесса = ШаблонПроцесса.ПараметрыПроцесса.Выгрузить();
		Если ПараметрыПроцесса.Количество() > 0 Тогда
			СтрокаПараметров = ДеревоОтборов.Строки.Добавить();
			СтрокаПараметров.Элемент				 = Нстр("ru = 'Реквизиты процесса'");
			СтрокаПараметров.ИндексКартинки			 = 0;	
			СтрокаПараметров.ТипПоля				 = "Группа";
			СтрокаПараметров.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		Для Каждого СтрПараметр ИЗ ПараметрыПроцесса Цикл
			
			СтрокаПоказателей = СтрокаПараметров.Строки.Добавить();
			СтрокаПоказателей.Элемент				 = СтрПараметр.ИмяПараметра;
			СтрокаПоказателей.ИндексКартинки		 = 3;
			СтрокаПоказателей.ПолныйПуть			 = "Параметры."+СтрПараметр.КодПараметра; 
			СтрокаПоказателей.ТипПоля				 = "Параметры";
			СтрокаПоказателей.ТипЗначения.Добавить(СтрПараметр.ТипЗначенияПараметраСтрока);   
			СтрокаПоказателей.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);

			Если ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка)=Тип("СправочникСсылка.ДокументыБД") ИЛИ ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка)=Тип("СправочникСсылка.СправочникиБД") Тогда
				
				СтрокаПоказателей.ПолеБД         	= СтрПараметр.ТипЗначенияПараметраСсылка.Наименование;
				СтрокаПоказателей.НаименованиеБД 	= СтрПараметр.ТипЗначенияПараметраСсылка.Синоним;
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,?(ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка)=Тип("СправочникСсылка.СправочникиБД"),"Справочник","Документ")+"."+СтрПараметр.ТипЗначенияПараметраСсылка.Наименование,Справочники.ТипыБазДанных.ТекущаяИБ);
				
				Если (СтрокаПоказателей.ТипМетаДанных="Справочник" ИЛИ СтрокаПоказателей.ТипМетаДанных="Документ" ИЛИ СтрокаПоказателей.ТипЗначения.Количество()>1)  Тогда 
					// Добавим строку для дальнейшего раскрытия
					НоваяСтрока = СтрокаПоказателей.Строки.Добавить();
					НоваяСтрока.ИндексКартинки		 = 3;	
					НоваяСтрока.ТипПоля				 = "Параметры";
					НоваяСтрока.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СоставДерева.Свойство("Функции") Тогда
		//2.Рисуем ветку доступных функций условных переходов
		СтрокаФункций = ДеревоОтборов.Строки.Добавить();
		СтрокаФункций.Элемент				 = Нстр("ru = 'Доступные функции'");
		СтрокаФункций.ИндексКартинки		 = 0;
		СтрокаФункций.ТипПоля				 = "Группа";
		СтрокаФункций.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
		
		МакетОпределения = Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьМакет("МакетДоступныхФункцийИПроцедур");		
		Для НомСтр = 2 По МакетОпределения.ВысотаТаблицы Цикл
			
			Если СтрНайти(СокрЛП(МакетОпределения.Область(НомСтр, 1).Текст),"#")=0 Тогда
				НовСтр = СтрокаФункций.Строки.Добавить();
				НовСтр.Элемент				 = МакетОпределения.Область(НомСтр, 1).Текст+"()";
				НовСтр.ИндексКартинки		 = 2;
				НовСтр.Описание				 = МакетОпределения.Область(НомСтр, 2).Текст;
				НовСтр.ТипПоля				 = "Функция";
				НовСтр.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
			ИначеЕсли  СокрЛП(МакетОпределения.Область(НомСтр, 1).Текст)="#ВозвращаемыйПараметр" Тогда
				СтрокаРесурс = НовСтр.Строки.Добавить();
				СтрокаРесурс.Элемент				 = МакетОпределения.Область(НомСтр, 4).Текст;
				СтрокаРесурс.ИндексКартинки			 = 4;
				СтрокаРесурс.Описание				 = МакетОпределения.Область(НомСтр, 5).Текст;
				СтрокаРесурс.ТипЗначения.Добавить(МакетОпределения.Область(НомСтр, 5).Текст);
				СтрокаРесурс.ПолныйПуть				 = "f()."+НовСтр.Элемент+"."+СтрокаРесурс.Элемент;
				СтрокаРесурс.ТипПоля				 = "ПолеРесурса";
				СтрокаРесурс.ИдентификаторОтбора	 = НовСтр.ИдентификаторОтбора;
			ИначеЕсли  СокрЛП(МакетОпределения.Область(НомСтр, 1).Текст)="#Параметр" Тогда
	
				Если НЕ ТаблицаДоступныхПараметров = Неопределено Тогда
					 Нп = ТаблицаДоступныхПараметров.Добавить();
					 Нп.ИмяПараметра		 = МакетОпределения.Область(НомСтр, 4).Текст;
					 Нп.ТипОтбораПараметра	 = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
					 Нп.ТипЗначения.Добавить((МакетОпределения.Область(НомСтр, 5).Текст));
					 Нп.Потребитель			 = НовСтр.Элемент;
					 Нп.ИдентификаторОтбора	 = НовСтр.ИдентификаторОтбора;
				 КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		СтрокаФункций.Строки.Сортировать("Элемент");
		
	КонецЕсли;
	
	Если СоставДерева.Свойство("Источники") Тогда
		//4.Рисуем ветку доступных источников данных условных переходов
		СтрокаИсточников = ДеревоОтборов.Строки.Добавить();
		СтрокаИсточников.Элемент				 = Нстр("ru = 'Доступные источники'");
		СтрокаИсточников.ИндексКартинки			 = 0;
		СтрокаИсточников.ТипПоля				 = "Группа";
		СтрокаИсточников.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ИсточникиДанныхДляРасчетов.Код КАК Код,
		               |	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
		               |	ИсточникиДанныхДляРасчетов.Наименование КАК Наименование,
		               |	ИсточникиДанныхДляРасчетов.ТипЗначения КАК ТипЗначения
		               |ИЗ
		               |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		               |ГДЕ
		               |	ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
		               |	И ИсточникиДанныхДляРасчетов.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ПотребительРасчета",ШаблонПроцесса);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НовСтр = СтрокаИсточников.Строки.Добавить();
			НовСтр.Элемент				 = Выборка.Наименование;
			НовСтр.ИндексКартинки		 = 1;
			НовСтр.ТипПоля				 = "Источник";
			НовСтр.ИсточникСсылка		 = Выборка.Ссылка;
			НовСтр.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
			НовСтр.ИсточникСсылка		 = Выборка.Ссылка;
			ТабПолей = Выборка.Ссылка.ПравилаИспользованияПолейЗапроса.Выгрузить();
			Для каждого Поле Из ТабПолей Цикл
				СтрокаРесурс = Новстр.Строки.Добавить();
				СтрокаРесурс.Элемент				 = Поле.Синоним;
				СтрокаРесурс.ТипЗначения.Добавить(Выборка.ТипЗначения);
				СтрокаРесурс.ПолныйПуть				 = "Источники." + Выборка.Наименование + "." + Строка(Поле.Поле);
				СтрокаРесурс.ИндексКартинки			 = 4;
				СтрокаРесурс.ТипПоля				 = "ПолеРесурса";
				СтрокаРесурс.ИдентификаторОтбора	 = НовСтр.ИдентификаторОтбора;
				СтрокаРесурс.ИсточникСсылка			 = Выборка.Ссылка;
			КонецЦикла;
			
			ТаблицаПараметровОтбораБД = Выборка.Ссылка.ТаблицаПараметровОтбораБД.Выгрузить();
			Если НЕ ТаблицаДоступныхПараметров = Неопределено Тогда
				Для Каждого Поле Из ТаблицаПараметровОтбораБД Цикл					
					
					Нп = ТаблицаДоступныхПараметров.Добавить();
					Нп.КодПараметра = Поле.ИмяПараметра;
					Нп.ИмяПараметра = Поле.НаименованиеБД;
					
					Если НЕ Поле.ЗначениеДляПроверки = Неопределено  Тогда 
			
						Нп.ТипЗначения.Добавить(ОбщегоНазначенияУХ.ПолучитьСтроковоеПредставлениеТипа(ТипЗнч(Поле.ЗначениеДляПроверки)));

					КонецЕсли;		
					
					Нп.ТипОтбораПараметра	 = Поле.СпособВычисленияПараметра;
					Нп.Потребитель			 = НовСтр.Элемент;
					Нп.ИсточникСсылка		 = Выборка.Ссылка;
					Нп.ИдентификаторОтбора	 = НовСтр.ИдентификаторОтбора;
					
				КонецЦикла;			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоставДерева.Свойство("СистемныеПоля") Тогда
		 //5.Рисуем ветку доступных системных полей
		СтрокаПолей = ДеревоОтборов.Строки.Добавить();
		СтрокаПолей.Элемент				 = Нстр("ru = 'Служебные поля'");
		СтрокаПолей.ИндексКартинки		 = 0;
		СтрокаПолей.ТипПоля				 = "Группа";
		СтрокаПолей.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);

		НовСтр = СтрокаПолей.Строки.Добавить();
		НовСтр.Элемент				 = Нстр("ru = 'Текущий пользователь'");
		НовСтр.ИндексКартинки		 = 3;
		НовСтр.ТипПоля				 = "Параметры";
        НовСтр.ПолныйПуть			 = "Параметры.ТекущийПользователь"; 
	    НовСтр.ТипЗначения.Добавить("Пользователи"); 
		НовСтр.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
		// Добавим строку для дальнейшего раскрытия
		НоваяСтрока = НовСтр.Строки.Добавить();
		НоваяСтрока.ИндексКартинки		 = 3;	
		НоваяСтрока.ТипПоля				 = "Параметры";
		НоваяСтрока.ИдентификаторОтбора	 = НовСтр.ИдентификаторОтбора;
		
		НовСтр = СтрокаПолей.Строки.Добавить();
		НовСтр.Элемент				 = Нстр("ru = 'Текущая дата'");
		НовСтр.ИндексКартинки		 = 3;
		НовСтр.ТипПоля				 = "Параметры";
        НовСтр.ПолныйПуть			 = "Параметры.ТекущаяДата"; 
	    НовСтр.ТипЗначения.Добавить("Дата"); 
		НовСтр.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);

		НовСтр = СтрокаПолей.Строки.Добавить();
		НовСтр.Элемент				 = Нстр("ru = 'Текущий этап'");
		НовСтр.ИндексКартинки		 = 3;
		НовСтр.ТипПоля				 = "Параметры";
        НовСтр.ПолныйПуть			 = "Параметры.ТекущийЭтап"; 
	    НовСтр.ТипЗначения.Добавить("ЭтапыУниверсальныхПроцессов"); 
		НовСтр.ИдентификаторОтбора	 = Строка(Новый УникальныйИдентификатор);
		// Добавим строку для дальнейшего раскрытия
		НоваяСтрока = НовСтр.Строки.Добавить();
		НоваяСтрока.ИндексКартинки	 = 3;	
		НоваяСтрока.ТипПоля			 = "Параметры";
		НовСтр.ПолеБД				 = "ЭтапыУниверсальныхПроцессов";
		НовСтр.НаименованиеБД		 = Нстр("ru = 'Этапы процессов'");
		НовСтр.ИдентификаторОтбора	 = НовСтр.ИдентификаторОтбора;
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(НовСтр, "Справочник.ЭтапыУниверсальныхПроцессов", Справочники.ТипыБазДанных.ТекущаяИБ);

	КонецЕсли;
	
	Возврат ДеревоОтборов;
	
КонецФункции 	

// Заполняет табличную часть с именем ЗаполнитьТабЧастьЭтапа в этапе
// универсального процесса ЗаполнитьТабЧастьЭтапа данными из таблицы 
// ИсходнаяТаблицаВход.
Процедура ЗаполнитьТабЧастьЭтапа(ЭтапПриемникВход, ИмяТабличнойЧастиВход, ИсходнаяТаблицаВход)
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапПриемникВход, ИмяТабличнойЧастиВход) Тогда
		ТабличнаяЧастьЭтапа = ЭтапПриемникВход[ИмяТабличнойЧастиВход];
		Для Каждого ТекИсходнаяТаблицаВход Из ИсходнаяТаблицаВход Цикл
			НоваяСтрока = ТабличнаяЧастьЭтапа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекИсходнаяТаблицаВход);
		КонецЦикла;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Табличная часть %ИмяТабличнойЧасти% в этапе %Этап% не найдена. Заполнение не было произведено.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", Строка(ИмяТабличнойЧастиВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПриемникВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьТабЧастьЭтапа()

// Процедура выполняет копирование связанной информации процесса
//
Процедура СкопироватьСвязаннуюИнформациюПроцесса(Источник, Приемник) Экспорт
	
	СоответствиеЭтаповПроцесса   = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка,
	|	ЭтапыУниверсальныхПроцессов.ЭтоГруппа КАК ЭтоГруппа,
	|	ЭтапыУниверсальныхПроцессов.ДочернийМаршрут КАК ДочернийМаршрут,
	|	ЭтапыУниверсальныхПроцессов.УсловияСогласования КАК УсловияСогласования,
	|	ЭтапыУниверсальныхПроцессов.УровеньОрганизации КАК УровеньОрганизации,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьСогласования КАК ДлительностьСогласования,
	|	ЭтапыУниверсальныхПроцессов.ТипЭтапа КАК ТипЭтапа,
	|	ЭтапыУниверсальныхПроцессов.АвтоматическоеОтклонениеДокумента КАК АвтоматическоеОтклонениеДокумента,
	|	ЭтапыУниверсальныхПроцессов.Код КАК Код,
	|	ЭтапыУниверсальныхПроцессов.Наименование КАК Наименование,
	|	ЭтапыУниверсальныхПроцессов.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ЭтапыУниверсальныхПроцессов.ДоступныеПараметры.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Пользователь КАК Пользователь,
	|		Организация КАК Организация
	|	) КАК ДоступныеПараметры,
	|	ЭтапыУниверсальныхПроцессов.ЗначенияУсловийОтборов.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЗначениеУсловия КАК ЗначениеУсловия
	|	) КАК ЗначенияУсловийОтборов,
	|	ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДокументБД КАК ДокументБД,
	|		ШаблонДокумента КАК ШаблонДокумента,
	|		НеИспользоватьМногопоточность КАК НеИспользоватьМногопоточность,
	|		УдалитьОбязательный КАК Обязательный,
	|		Контрольный КАК Контрольный,
	|		ВидДокумента КАК ВидДокумента,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3
	|	) КАК ФормируемыеДокументы,
	|	ЭтапыУниверсальныхПроцессов.Утверждающие.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Пользователь КАК Пользователь,
	|		Организация КАК Организация
	|	) КАК Утверждающие,
	|	ЭтапыУниверсальныхПроцессов.ЗначенияПараметров.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяПараметра КАК ИмяПараметра,
	|		ЗначениеПараметра КАК ЗначениеПараметра,
	|		Потребитель КАК Потребитель,
	|		ТипЗначения КАК ТипЗначения,
	|		ТипОтбораПараметра КАК ТипОтбораПараметра,
	|		ПараметрОбъекта КАК ПараметрОбъекта,
	|		ИмяПараметраДоТочки КАК ИмяПараметраДоТочки,
	|		ХранилищеСписка КАК ХранилищеСписка,
	|		КодПараметра КАК КодПараметра
	|	) КАК ЗначенияПараметров,
	|	ЭтапыУниверсальныхПроцессов.УсловныйПереход КАК УсловныйПереход,
	|	ЭтапыУниверсальныхПроцессов.АвтоматическоеСогласованиеДокумента КАК АвтоматическоеСогласованиеДокумента,
	|	ЭтапыУниверсальныхПроцессов.УтверждающиеИмеютПравоРедактирования КАК УтверждающиеИмеютПравоРедактирования,
	|	ЭтапыУниверсальныхПроцессов.ДинамическийЭтап КАК ДинамическийЭтап,
	|	ЭтапыУниверсальныхПроцессов.ТипОрганизацийЭтапа КАК ТипОрганизацийЭтапа,
	|	ЭтапыУниверсальныхПроцессов.КритерийУтвержденияЭтапа КАК КритерийУтвержденияЭтапа,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьПлановая КАК ДлительностьПлановая,
	|	ЭтапыУниверсальныхПроцессов.ПроцедураПроцесса КАК ПроцедураПроцесса,
	|	ЭтапыУниверсальныхПроцессов.СтатусСогласованияОбъекта КАК СтатусСогласованияОбъекта,
	|	ЭтапыУниверсальныхПроцессов.РучноеУтверждениеЭтапа КАК РучноеУтверждениеЭтапа,
	|	ЭтапыУниверсальныхПроцессов.СхемаДоступностиРеквизитов КАК СхемаДоступностиРеквизитов,
	|	ЭтапыУниверсальныхПроцессов.ЗаголовокОповещения КАК ЗаголовокОповещения,
	|	ЭтапыУниверсальныхПроцессов.Автоутверждение КАК Автоутверждение,
	|	ЭтапыУниверсальныхПроцессов.АвтоматическиеДействия КАК АвтоматическиеДействия,
	|	ЭтапыУниверсальныхПроцессов.РасписаниеАвтоматическогоВыполнения КАК РасписаниеАвтоматическогоВыполнения,
	|	ЭтапыУниверсальныхПроцессов.ДействиеПоРасписанию КАК ДействиеПоРасписанию
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец = &Источник
	|	И ЭтапыУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ";

	
	Запрос.УстановитьПараметр("Источник", Источник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			НовыйЭтап = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(НовыйЭтап, Выборка,"Код, Наименование");
		Иначе
			НовыйЭтап = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйЭтап, Выборка, ,"ЭтоГруппа, УсловияСогласования, ДочернийМаршрут");
			ЗаполнитьТабЧастьЭтапа(НовыйЭтап, "ДоступныеПараметры",		 Выборка.ДоступныеПараметры.Выгрузить());
			ЗаполнитьТабЧастьЭтапа(НовыйЭтап, "ЗначенияУсловийОтборов",	 Выборка.ЗначенияУсловийОтборов.Выгрузить());
			ЗаполнитьТабЧастьЭтапа(НовыйЭтап, "ФормируемыеДокументы",	 Выборка.ФормируемыеДокументы.Выгрузить());
			ЗаполнитьТабЧастьЭтапа(НовыйЭтап, "Утверждающие",			 Выборка.Утверждающие.Выгрузить());
			ЗаполнитьТабЧастьЭтапа(НовыйЭтап, "ЗначенияПараметров",		 Выборка.ЗначенияПараметров.Выгрузить());
		КонецЕсли;
		
		НовыйЭтап.Владелец = Приемник;
		
		Попытка
			
			НовыйЭтап.ОбменДанными.Загрузка=Истина;
			НовыйЭтап.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось создать этап процесса %НаименованиеЭтапа% : %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеЭтапа%", Строка(Выборка.Наименование));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
			
		КонецПопытки; 
		
		СоответствиеЭтаповПроцесса.Вставить(Выборка.Ссылка, НовыйЭтап.Ссылка);
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из СоответствиеЭтаповПроцесса Цикл
		
		НовыйЭтап    = КлючИЗначение.Значение.ПолучитьОбъект();
		ЭтапИсточник = КлючИЗначение.Ключ;
		
		Если Не ЭтапИсточник.Родитель.Пустая() Тогда
			НовыйЭтап.Родитель = СоответствиеЭтаповПроцесса[ЭтапИсточник.Родитель];
		КонецЕсли;
		
		Если Не НовыйЭтап.ЭтоГруппа Тогда
			
			НовыйЭтап.Утверждающие.Загрузить(ЭтапИсточник.Утверждающие.Выгрузить());
			НовыйЭтап.ЗначенияУсловийОтборов.Загрузить(ЭтапИсточник.ЗначенияУсловийОтборов.Выгрузить());
			
			Для каждого СтрокаЭтапыПредшественники Из ЭтапИсточник.ЭтапыПредшественники Цикл
				
				Если Не СтрокаЭтапыПредшественники.Этап.Пустая() Тогда
					НовыйЭтап.ЭтапыПредшественники.Добавить().Этап = СоответствиеЭтаповПроцесса[СтрокаЭтапыПредшественники.Этап];
				КонецЕсли;
				
			КонецЦикла;
			
			УсловияСогласованияИсточник = ЭтапИсточник.УсловияСогласования.Получить();
			
			Если ЗначениеЗаполнено(УсловияСогласованияИсточник) Тогда
				УсловияСогласования = УсловияСогласованияИсточник.Скопировать();
				РекурсивныйПереносСтрок(УсловияСогласования, СоответствиеЭтаповПроцесса);
				НовыйЭтап.УсловияСогласования = Новый ХранилищеЗначения(УсловияСогласования);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			НовыйЭтап.Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось создать загрузить данные по этапу процесса %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, НовыйЭтап.Наименование, ОписаниеОшибки()));
			КонецЕсли;
		
			Возврат;	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РекурсивныйПереносСтрок(Строки, СоответствиеЭтаповПроцесса)
	
	Для Каждого Строка Из Строки.Строки Цикл
		
		Если ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
			Строка.Значение = СоответствиеЭтаповПроцесса[Строка.Значение];
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			РекурсивныйПереносСтрок(Строка, СоответствиеЭтаповПроцесса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли





