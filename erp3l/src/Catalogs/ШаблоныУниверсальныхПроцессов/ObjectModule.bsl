#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУДЛЯ

// хранит исходный элемент, из которого выполнялось копирование
Перем мОбъектКопирования;
Перем СтруктураРеквизитов Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ

// Процедура выполняет копирование связной информации процесса
//
Процедура СкопироватьСвязнуюИнформациюПроцесса(Источник, Отказ = Ложь, ШапкаОшибки = "")
	
	СоответствиеЭтаповПроцесса   = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ЭтапыУниверсальныхПроцессов.ЭтоГруппа,
	|	ЭтапыУниверсальныхПроцессов.ДочернийМаршрут,
	|	ЭтапыУниверсальныхПроцессов.УсловияСогласования,
	|	ЭтапыУниверсальныхПроцессов.УровеньОрганизации,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьСогласования,
	|	ЭтапыУниверсальныхПроцессов.ТипЭтапа,
	|	ЭтапыУниверсальныхПроцессов.АвтоматическоеОтклонениеДокумента,
	|	ЭтапыУниверсальныхПроцессов.Код,
	|	ЭтапыУниверсальныхПроцессов.Наименование,
	|	ЭтапыУниверсальныхПроцессов.ПорядковыйНомер
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Объект = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(Объект, Выборка,"Код, Наименование");
		Иначе
			Объект = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Выборка, ,"ЭтоГруппа, УсловияСогласования, ДочернийМаршрут");
		КонецЕсли;
		
		Объект.Владелец = Ссылка;
		
		Попытка
			Объект.Записать();
			
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, ШапкаОшибки);
			Возврат;
			
		КонецПопытки; 
		
		СоответствиеЭтаповПроцесса.Вставить(Выборка.Ссылка, Объект.Ссылка);
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из СоответствиеЭтаповПроцесса Цикл
		
		Объект       = КлючИЗначение.Значение.ПолучитьОбъект();
		ЭтапИсточник = КлючИЗначение.Ключ;
		
		Если Не ЭтапИсточник.Родитель.Пустая() Тогда
			Объект.Родитель = СоответствиеЭтаповПроцесса[ЭтапИсточник.Родитель];
		КонецЕсли;
		
		Если Не Объект.ЭтоГруппа Тогда
			
			Объект.Утверждающие.Загрузить(ЭтапИсточник.Утверждающие.Выгрузить());
			
			Для каждого СтрокаЭтапыПредшественники Из ЭтапИсточник.ЭтапыПредшественники Цикл
				
				Если Не СтрокаЭтапыПредшественники.Этап.Пустая() Тогда
					Объект.ЭтапыПредшественники.Добавить().Этап = СоответствиеЭтаповПроцесса[СтрокаЭтапыПредшественники.Этап];
				КонецЕсли;
				
			КонецЦикла;
			
			УсловияСогласованияИсточник = ЭтапИсточник.УсловияСогласования.Получить();
			
			Если ЗначениеЗаполнено(УсловияСогласованияИсточник) Тогда
				УсловияСогласования = УсловияСогласованияИсточник.Скопировать();
				РекурсивныйПереносСтрок(УсловияСогласования, СоответствиеЭтаповПроцесса);
				Объект.УсловияСогласования = Новый ХранилищеЗначения(УсловияСогласования);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Объект.Записать();
			
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, ШапкаОшибки);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивныйПереносСтрок(Строки, СоответствиеЭтаповПроцесса)
	
	Для Каждого Строка Из Строки.Строки Цикл
		
		Если ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
			Строка.Значение = СоответствиеЭтаповПроцесса[Строка.Значение];
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			РекурсивныйПереносСтрок(Строка, СоответствиеЭтаповПроцесса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаШаблона = Нстр("ru = 'Шаблон процесса: ""%1"" не может быть записан:'");
	
	Если Не ПустаяСтрока(СтрокаШаблона) тогда		
		ШапкаОшибки = СтрШаблон(СтрокаШаблона, ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мОбъектКопирования) Тогда
		мОбъектКопирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ЗначениеКопирования", Неопределено);
	Иначе
		// Объект установлен ранее.
	КонецЕсли;
	Если мОбъектКопирования <> Неопределено Тогда
		СкопироватьСвязнуюИнформациюПроцесса(мОбъектКопирования, Отказ, ШапкаОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостроениеГрафов() Экспорт
	
	ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
	ТаблицаИсходныхДанных.Колонки.Добавить("IDЭтапа");
	ТаблицаИсходныхДанных.Колонки.Добавить("Ссылка");
	ТаблицаИсходныхДанных.Колонки.Добавить("УсловияСогласования");
	
	
	ТаблицаГрафа = Новый ТаблицаЗначений;
	
	ТаблицаГрафа.Колонки.Добавить("IDЭтапа");
	ТаблицаГрафа.Колонки.Добавить("ЭтапСогласования");
	ТаблицаГрафа.Колонки.Добавить("ТипДеления");
	ТаблицаГрафа.Колонки.Добавить("IDЭтапаНачала");
	ТаблицаГрафа.Колонки.Добавить("IDЭтапаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ЭтапыУниверсальныхПроцессов.УсловияСогласования
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец = &МаршрутСогласования";
	
	Запрос.УстановитьПараметр("МаршрутСогласования", Ссылка);
	
	ВЫборка = Запрос.Выполнить().Выбрать();
	
	ID = 0;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
		НоваяСтрока.IDЭтапа = ID;
		НоваяСтрока.Ссылка    = Выборка.Ссылка;
		НоваяСтрока.УсловияСогласования = Выборка.УсловияСогласования.Получить();
		ID = ID + 1;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаИсходныхДанных Цикл
		
		НоваяСтрока = ТаблицаГрафа.Добавить();
		НоваяСтрока.IDЭтапа = Строка.IDЭтапа;
		НоваяСтрока.ЭтапСогласования = Строка.Ссылка;
		
		Строка.УсловияСогласования.НайтиСтроки("УсловиеДействие", Перечисления.ДействияЭтапа.ПерейтиКЭтапу, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЭтапыУниверсальныхПроцессов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ Справочник.ЭтапыУниверсальныхПроцессов
	|ГДЕ Владелец = &МаршрутСогласования";
	Запрос.УстановитьПараметр("МаршрутСогласования", Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьСвязаннаяВерсияРегламента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныУниверсальныхПроцессов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &СвязанныйРегламент
	|	И ШаблоныУниверсальныхПроцессов.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("СвязанныйРегламент", СвязанныйРегламент);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Если Запрос.Выполнить().Выгрузить().Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение Тогда
		НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования;
	КонецЕсли;	
		
	//Если есть  настроенные этапы процесса, то изменять режим процесса и объект согласования нельзя 
	Если ЕстьЭтапы() Тогда
		ШапкаОшибкиОшибкиИзмененияКлючевыхРеквизитов = Нстр("ru = 'Существуют не помеченные на удаление этапы процесса.'");
		ОбщегоНазначенияУХ.ПроверитьНеИзменяемыеРеквизиты(ЭтотОбъект, Отказ, ШапкаОшибкиОшибкиИзмененияКлючевыхРеквизитов);
	КонецЕсли;
	
	Если  НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
		
		Если Ссылка.ПометкаУдаления И НЕ ПометкаУдаления И НЕ ЗначениеЗаполнено(СвязанныйРегламент) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Пометку удаления снять не возможно. Создайте новый шаблон'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
				
		Если НЕ ПометкаУдаления И НЕ ЗначениеЗаполнено(СвязанныйРегламент) Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Необходимо выбрать версию регламента'"));
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
					
		Если ЗначениеЗаполнено(СвязанныйРегламент) И ЕстьСвязаннаяВерсияРегламента() Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Версия регламента уже связана с другим процессом!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		КлючевойПараметр = ПараметрыПроцесса.Найти("УправлениеОтчетнымПериодом","КодПараметра");
		Если КлючевойПараметр =Неопределено Тогда
			 НП = ПараметрыПроцесса.Добавить();
			 НП.ИмяПараметра = Нстр("ru = 'Управление отчетным периодом'");
			 НП.КодПараметра = "УправлениеОтчетнымПериодом";
             НП.Предопределенный = Истина;
			 НП.Ключевой = Истина;
			 НП.ТипЗначенияПараметраСсылка = Справочники.ДокументыБД.НайтиПоНаименованию("УправлениеПериодомСценария",,,Справочники.ТипыБазДанных.ТекущаяИБ);
			 НП.ЭтоПростойТип = Ложь;
			 //НП.ЗначениеПоУмолчанию = Истина;	 
		 КонецЕсли;

	ИначеЕсли  НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования Тогда
	
		КлючевойПараметр = ПараметрыПроцесса.Найти("СогласуемыйОбъект","КодПараметра");
		Если КлючевойПараметр =Неопределено Тогда
			 НП = ПараметрыПроцесса.Добавить();
			 НП.ИмяПараметра = Нстр("ru = 'Согласуемый объект'");
			 НП.КодПараметра = "СогласуемыйОбъект";
             НП.Предопределенный = Истина;
			 НП.Ключевой = Истина;
			 НП.ТипЗначенияПараметраСсылка = ТипОбъектаСогласования;
			 НП.ЭтоПростойТип = Ложь;
			 //НП.ЗначениеПоУмолчанию = Истина;
		 Иначе	 
			 
			 НП = КлючевойПараметр;
   			 НП.ТипЗначенияПараметраСсылка = ТипОбъектаСогласования;
			 НП.ЭтоПростойТип = Ложь;

		 КонецЕсли;
		
	КонецЕсли;
		
	КлючевойПараметр = ПараметрыПроцесса.Найти("ИнициаторПроцесса","КодПараметра");
	ТипСправочникПользователи = Справочники.СправочникиБД.НайтиПоНаименованию("Пользователи", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	Если КлючевойПараметр = Неопределено Тогда
		Если НЕ ЭтоГруппа Тогда
			НП = ПараметрыПроцесса.Добавить();
			НП.ИмяПараметра = Нстр("ru = 'Инициатор процесса'");
			НП.КодПараметра = "ИнициаторПроцесса";
			НП.Предопределенный = Истина;
			НП.Ключевой = Ложь;
			НП.ТипЗначенияПараметраСсылка = ТипСправочникПользователи;
			НП.ЭтоПростойТип = Ложь;
		Иначе
			// Нет параметров у группы шаблонов. Не добавляем.
		КонецЕсли;
	Иначе	 
		
		НП = КлючевойПараметр;
		НП.ТипЗначенияПараметраСсылка = ТипСправочникПользователи;
		НП.ЭтоПростойТип = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеИзменяемыеРеквизиты() Экспорт
	
	НеИзменяемыеРеквизиты = Новый Структура;
	Если ЭтоНовый() Тогда
		Возврат НеИзменяемыеРеквизиты;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	НеИзменяемыеРеквизиты.Вставить("НазначениеПроцесса");
    НеИзменяемыеРеквизиты.Вставить("ТипОбъектаСогласования");

	Возврат НеИзменяемыеРеквизиты;
	
КонецФункции

Функция ЕстьЭтапы()
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	ЭтапыУниверсальныхПроцессов.Владелец
	                 |ИЗ
	                 |	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	                 |ГДЕ
	                 |	ЭтапыУниверсальныхПроцессов.ПометкаУдаления = Ложь
	                 |	И ЭтапыУниверсальныхПроцессов.Владелец = &Владелец";
	  
	  Запрос.УстановитьПараметр("Владелец",Ссылка);
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Пока Выборка.Следующий() Цикл  
	  	   Возврат Истина;	  
	  КонецЦикла;
	  
	  Возврат Ложь;	  
КонецФункции	

Процедура ПриКопировании(ОбъектКопирования)
	ДополнительныеСвойства.Вставить("ЗначениеКопирования", ОбъектКопирования.Ссылка);
КонецПроцедуры


СтруктураРеквизитов = Новый Структура();
СтруктураРеквизитов.Вставить("НазначениеПроцесса", Нстр("ru = 'Режим процесса'"));
СтруктураРеквизитов.Вставить("ТипОбъектаСогласования", Нстр("ru = 'Согласуемый объект'"));

#КонецЕсли