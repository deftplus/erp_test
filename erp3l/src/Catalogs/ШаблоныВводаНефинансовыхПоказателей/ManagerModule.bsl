#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки.
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт
	
	ЕстьСсылки = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(Параметры.Объект);
	
	//++ НЕ УТКА
	Если Не ЕстьСсылки Тогда
		ЕстьСсылки = ПроверитьИспользованиеОбъектаВНастройкахДействияЭтаповПодготовкиБюджетов(Параметры.Объект);
	КонецЕсли;
	//-- НЕ УТКА
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);
	
КонецПроцедуры

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - имена блокируемых реквизитов:
//		* БлокируемыйРеквизит - Строка - Имя блокируемого реквизита.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ТипФормыВводаПоказателей");
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонИспользуетсяВДокументах(Знач Шаблон, Знач ДокументИсключение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументИсключение) Тогда
		ДокументИсключение = Документы.УстановкаЗначенийНефинансовыхПоказателей.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДокументУстановкаЗначений.Ссылка
	                      |ИЗ
	                      |	Документ.УстановкаЗначенийНефинансовыхПоказателей КАК ДокументУстановкаЗначений
	                      |ГДЕ
	                      |	ДокументУстановкаЗначений.ШаблонВвода = &ШаблонВвода
	                      |	И НЕ ДокументУстановкаЗначений.Ссылка = &Исключение");
	
	Запрос.УстановитьПараметр("ШаблонВвода", Шаблон);
	Запрос.УстановитьПараметр("Исключение", ДокументИсключение);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция определяет шаблон ввода для выбранного нефинансового показателя.
//
// Возвращает шаблон ввода нефинансового показателя, если найден один шаблон.
// Возвращает Неопределено, если шаблон не найден или шаблонов больше одного.
//
// Параметры:
//  Показатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель
//
// Возвращаемое значение:
//	СправочникСсылка.ШаблоныВводаНефинансовыхПоказателей - Найденный шаблон ввода.
//
Функция ШаблонВводаПоУмолчанию(Показатель) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ПоказателиШаблона.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныВводаНефинансовыхПоказателей.ПоказателиШаблона КАК ПоказателиШаблона
	|ГДЕ
	|	НЕ ПоказателиШаблона.Ссылка.ПометкаУдаления
	|	И ПоказателиШаблона.Показатель = &Показатель
	|");
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ШаблоныВводаНефинансовыхПоказателей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.196";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1f964a16-2d86-43da-a6a2-1cf4239e9458");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ШаблоныВводаНефинансовыхПоказателей.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Переносит хранение схем и настроек компоновки из двойного хранилища значения в одинарное.';
									|en = 'Transfers the storage of composition schemas and settings from the double value storage to the single one.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ШаблоныВводаНефинансовыхПоказателей";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШаблоныВводаНефинансовыхПоказателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныВводаНефинансовыхПоказателей КАК ШаблоныВводаНефинансовыхПоказателей
	|";
	
	ДанныеДляОбработки = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТЧ Из СправочникОбъект.ПоказателиШаблона Цикл
			Схема = СтрокаТЧ.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если Схема <> Неопределено И ТипЗнч(Схема) = Тип("ХранилищеЗначения") Тогда
				ДанныеДляОбработки.Добавить(Выборка.Ссылка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеДляОбработки);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДанных.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = СтрокаДанных.Ссылка.ПолучитьОбъект();

			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаДанных.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из СправочникОбъект.ПоказателиШаблона Цикл
				
				Схема = СтрокаТЧ.ХранилищеСхемыКомпоновкиДанных.Получить();
				Если Схема <> Неопределено И ТипЗнч(Схема) = Тип("ХранилищеЗначения") Тогда
					Схема = Схема.Получить();
					Если ТипЗнч(Схема) = Тип("СхемаКомпоновкиДанных") Тогда
						СтрокаТЧ.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
					КонецЕсли;
				КонецЕсли;
				
				Настройки = СтрокаТЧ.ХранилищеНастроекКомпоновкиДанных.Получить();
				Если Настройки <> Неопределено И ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
					Настройки = Настройки.Получить();
					Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
						СтрокаТЧ.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаДанных.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), СтрокаДанных.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

Функция ПроверитьИспользованиеОбъектаВНастройкахДействияЭтаповПодготовкиБюджетов(Ссылка)
	
	ЕстьСсылки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка,
	|	ЭтапыПодготовкиБюджетов.НастройкаДействия
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Действие = ЗНАЧЕНИЕ(Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкаДействия = Выборка.НастройкаДействия.Получить();
		Если ТипЗнч(НастройкаДействия) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("Имя, Значение","ШаблонВвода", Ссылка);
		Строки = НастройкаДействия.НайтиСтроки(ПараметрыПоиска);
		Если Строки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ЕстьСсылки = Истина;
		
	КонецЦикла;
	
	Возврат ЕстьСсылки;
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти

#КонецЕсли