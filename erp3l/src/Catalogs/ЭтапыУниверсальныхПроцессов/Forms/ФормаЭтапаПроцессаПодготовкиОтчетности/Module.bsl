&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияУсловийСогласования();
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьРеквизитыФормыИзОбъекта(Параметры.ЗначениеКопирования);
		Иначе
			ЗаполнитьАдресСКД();
		КонецЕсли;
		Объект.КритерийУтвержденияЭтапа=Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыВсеЭкземплярыОтчетовЭтапа;
		
	КонецЕсли;
	
	ВидДокументаЭкземпляр=Перечисления.ВидыДокументовЭтапа.ЭкземплярыОтчетов;
	
	//СписокВыбораДействий.Очистить();
	//СписокВыбораУсловий.Очистить();
	//СписокВыбораДействий.Добавить(Перечисления.ДействияЭтапа.ПерейтиКЭтапу);
	//
	//Если НЕ Параметры.Ключ.Пустая() Тогда // Если этап уже сохранялся, то прочитаем настройки перехода из реквизита.
	//	
	//	ТекОбъект = РеквизитФормыВЗначение("Объект");
	//	СохраненныеУсловия = ТекОбъект.УсловияСогласования.Получить();
	//	Если СохраненныеУсловия <> Неопределено Тогда
	//		
	//		ЗначениеВРеквизитФормы(СохраненныеУсловия, "ТабличноеПолеПерехода");
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	
	СвязанныйРегламент = Объект.Владелец.СвязанныйРегламент;
	
	ПолучитьОргЕдиницыТекущейВерсии();
	// Считаем расписание.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Расписание = Объект.Ссылка.РасписаниеАвтоматическогоВыполнения.Получить();
		ПредставлениеРасписания = Строка(Расписание);
		АдресХранилищаРасписания = ПоместитьВоВременноеХранилище(Расписание, ЭтаФорма.УникальныйИдентификатор);
	Иначе                      
		ПредставлениеРасписания = "";
		АдресХранилищаРасписания = "";
	КонецЕсли;
	УчетПоСценариям = Константы.УчетПоСценариям.Получить();
	// Выведем вероятные ошибки по этапу.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТаблицаОшибок = МодульУправленияПроцессамиУХ.ПолучитьТаблицуОшибокЭтапа(Объект.Ссылка);
		Для Каждого ТекТаблицаОшибок Из ТаблицаОшибок Цикл
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекТаблицаОшибок.ТекстовоеОписание);
		КонецЦикла;
	Иначе
		// Новый этап. Не выводим ошибки.
	КонецЕсли;
	// Отображение элементов формы.
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ИнициализацияУсловийСогласования()
	
	Если НЕ Параметры.Ключ.Пустая() Тогда // Если этап уже сохранялся, то прочитаем настройки перехода из реквизита.
		
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		СохраненныеУсловия = ТекОбъект.УсловияСогласования.Получить();
		// Проверим наличие необходимых колонок в дереве.
		Если ТипЗнч(СохраненныеУсловия) = Тип("ДеревоЗначений") Тогда
			Если СохраненныеУсловия.Колонки.Найти("ИмяТипа") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("ИмяТипа");
			Иначе
				// Колонка ИмяТипа уже присутствует.
			КонецЕсли;
			Если СохраненныеУсловия.Колонки.Найти("ИдентификаторПерехода") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("ИдентификаторПерехода");
			Иначе
				// Колонка ИдентификаторПерехода уже присутствует.
			КонецЕсли;
			Если СохраненныеУсловия.Колонки.Найти("ИсточникСсылка") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("ИсточникСсылка");
			Иначе
				// Колонка ИдентификаторПерехода уже присутствует.
			КонецЕсли;
			Если СохраненныеУсловия.Колонки.Найти("Значение") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("Значение");
			Иначе
				// Колонка ИдентификаторПерехода уже присутствует.
			КонецЕсли;
		Иначе
			// Не требуется проверка.
		КонецЕсли;
		// Считаем дерево.
		Если СохраненныеУсловия <> Неопределено Тогда
			
			ЗначениеВРеквизитФормы(СохраненныеУсловия, "ТабличноеПолеПерехода");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокВыбораДействий.Очистить();
	СписокВыбораУсловий.Очистить();
	СписокВыбораДействий.Добавить(Перечисления.ДействияЭтапа.ПерейтиКЭтапу);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма И ИмяСобытия = "ДобавлениеНовойСтрокиОтбораОрганизационныхЕдиниц" Тогда
		
		Параметр.Строка.Отбор = НовыйКомпоновщикНастроекОтбораОрганизационныхЕдиниц(СписокКомпоновщикиНастроек, АдресСКД).Настройки.Отбор;
		Параметр.Строка.ИндексКомпоновщикаНастроек = СписокКомпоновщикиНастроек.Количество() - 1;
		ЗаполнитьОбязательныйЭлементОтбора(Параметр.Строка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
		СкопироватьОтбор(Параметр.Строка.Отбор, СписокКомпоновщикиНастроек.Получить(Параметр.Строка.ИндексКомпоновщикаНастроек).Значение.Настройки.Отбор);
		
	ИначеЕсли ИмяСобытия="ВыбраныВидыДокументов" И Параметр.Количество()>0 Тогда
		
		ВидДокумента=?(ТипЗнч(Параметр[0])=Тип("СправочникСсылка.ПакетыПравилИмпортаТаблиц"),ПредопределенноеЗначение("Перечисление.ВидыДокументовЭтапа.ДокументыПараллельногоУчета"),ПредопределенноеЗначение("Перечисление.ВидыДокументовЭтапа.ЭкземплярыОтчетов"));
		
		Для Каждого СтрДокумент ИЗ Параметр Цикл
			
			Если Объект.ФормируемыеДокументы.НайтиСтроки(Новый Структура("ШаблонДокумента",СтрДокумент)).Количество()=0 Тогда
				
				НоваяСтрока=Объект.ФормируемыеДокументы.Добавить();
				НоваяСтрока.ДокументБД=СтрДокумент;
				ОпределитьТипКолонки(СтрДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРеквизитыФормыИзОбъекта(?(Параметры.Свойство("ЗначениеКопирования"), Параметры.ЗначениеКопирования, Неопределено));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.УсловияСогласования = Новый ХранилищеЗначения(РеквизитФормыВЗначение("ТабличноеПолеПерехода"));
	
    ТекущийОбъект.ОрганизационныеЕдиницыОтбор_ = ЗначениеВСтрокуВнутр(ОрганизационныеЕдиницыОтборСКД.ПолучитьНастройки());
	Для Каждого Стр Из ТекущийОбъект.ФормируемыеДокументы Цикл
		
		Если ТипЗнч(Стр.ШаблонДокумента) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
			 //Отказ = Истина;
		КонецЕсли;	
				
	КонецЦикла;	
	// Сохранение расписания.
	Если СокрЛП(АдресХранилищаРасписания) = "" Тогда
		// Расписание не заполнено. Запишем пустое.
		ТекущийОбъект.РасписаниеАвтоматическогоВыполнения = Новый ХранилищеЗначения(Новый РасписаниеРегламентногоЗадания);
	Иначе	
		Расписание = ПолучитьИзВременногоХранилища(АдресХранилищаРасписания);
		ТекущийОбъект.РасписаниеАвтоматическогоВыполнения = Новый ХранилищеЗначения(Расписание);
	КонецЕсли;
	// Проверка на противоречивые отборы организаций.
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	СтрокаОтбор = ТекущийОбъект.ОрганизационныеЕдиницыОтбор_;
	ПолучитьОргЕдиницыТекущейВерсии(ТаблицаОрганизаций, СтрокаОтбор, ТекущийОбъект);
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'В этапе %Этап% установлены противоречивые отборы. Сохранение отменено.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Объект.Ссылка));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.ЭтапыУниверсальныхПроцессов.ОбновитьЭтапыПредшественники(ТекущийОбъект.Ссылка, ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТабличноеПолеПерехода")));
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ПолучитьОргЕдиницыТекущейВерсии(ТаблицаОрганизаций);

	Справочники.ЭтапыУниверсальныхПроцессов.ОбновитьРегистрЭтапыОрганизаций(ТекущийОбъект.Владелец.СвязанныйРегламент,ТекущийОбъект.Ссылка,ТаблицаОрганизаций);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьОтчет", , Объект.Владелец);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОткрытьНастройкуУсловногоПерехода(Команда)
	
	Перем АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто, ОбычныйЭтап,АдресТаблицаДоступныхПараметров;
	СохранитьТаблицыВоВременномХранилище(АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто, ОбычныйЭтап);
	ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.Форма.ФормаНастройкиУсловногоПерехода"
				, Новый Структура("АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто, ОбычныйЭтап, СписокВыбораУсловий, СписокВыбораДействий, ШаблонПроцесса"
									, АдресДеревоОтборов
									, АдресТабличноеПолеПереходов
									, АдресКэшВидовСубконто
									, ОбычныйЭтап
									, СписокВыбораУсловий
									, СписокВыбораДействий
									, ОБъект.Владелец)
				, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМатрицуПолномочий(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда	
		 ЭтаФорма.Записать();	
	КонецЕсли;	
	
	ПараметрыФормы = ПолучитьСтруктуруОткрытияМатрицыПолномочий();
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилаЗаполнения(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда	
		 ЭтаФорма.Записать();	
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ВерсияОрганизационнойСтруктуры,ЭтапПроцесса", СвязанныйРегламент,Объект.Ссылка);
	ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормируемыеДокументыПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ФормируемыеДокументыДокументБД" Тогда 
		ТекущиеДанные = Элементы.ФормируемыеДокументы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОпределитьТипКолонки(ТекущиеДанные.ДокументБД);
		Иначе
			// Строка не выбрана.
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВосстановитьНастройкиТаблицыИзВременногоХранилища(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТипу(Команда)
	
	ЗаполнитьПоТипуСервер();
	 
КонецПроцедуры

&НаКлиенте
Процедура ТипОрганизационнойЕдиницыПриИзменении(Элемент)
	
	ПолучитьОргЕдиницыТекущейВерсии()
	
КонецПроцедуры

&НаКлиенте
Процедура КритерийУтвержденияЭтапаПриИзменении(Элемент)
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры

#КонецОбласти


&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьОтбор(Источник, Приемник)
	
	Приемник.Элементы.Очистить();
	
	Для Каждого ЭлементИсточник Из Источник.Элементы Цикл
		НовыйЭлемент = Приемник.Элементы.Добавить(ТипЗнч(ЭлементИсточник));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник, );
		Если Тип(НовыйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтбор(ЭлементИсточник, НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на элемент справочника Документы БД по наименованию
// документа НаименованиеДокументаВход. Когда не найдено - будет возвращена
// пустая ссылка.
&НаСервереБезКонтекста
Функция НайтиДокументБд(НаименованиеДокументаВход)
	РезультатФункции = Справочники.ДокументыБД.ПустаяСсылка();
	НайденноеЗначение = Справочники.ДокументыБД.НайтиПоНаименованию(НаименованиеДокументаВход);
	Если НайденноеЗначение <> Неопределено Тогда
		РезультатФункции = НайденноеЗначение;
	Иначе
		РезультатФункции = Справочники.ДокументыБД.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// НайтиДокументБд()

&НаКлиенте
Процедура ДобавитьОбязательныйЭлементОтбора(Отбор)
	
	Нашли = Ложь;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если Тип(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОрганизационнойЕдиницы") Тогда
				ЗаполнитьОбязательныйЭлементОтбора(Элемент);
				Нашли = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		ЗаполнитьОбязательныйЭлементОтбора(Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")))
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьОбязательныйЭлементОтбора(ЭлементОтбора)
	
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОрганизационнойЕдиницы");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Объект.ТипОрганизацийЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеОтбораПоОрганизационнойЕдинице(Элементы, ТипОрганизационныхЕдиницЭтапа)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Тип(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ИзменитьЗначениеОтбораПоОрганизационнойЕдинице(Элемент.Элементы, ТипОрганизационныхЕдиницЭтапа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборВидовДокументов(Команда)
	
	МассивДокументов=Новый Массив;
	
	Для Каждого Строка ИЗ Объект.ФормируемыеДокументы Цикл
		
		МассивДокументов.Добавить(Строка.ШаблонДокумента);
		
	КонецЦикла;
		
	ОткрытьФорму("ОбщаяФорма.ПодборВидовФормируемыхДокументов",Новый Структура("МассивДокументов",МассивДокументов));
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипКолонки(Значение)
	
	   ТекущийОбъект=Метаданные.Документы.Найти(Значение.Наименование);
	   ТекРеквизит=Значение.РеквизитШаблонаДокумета;
	   
	   Если ТекущийОбъект=Неопределено Тогда
		   Возврат; 		   
	   ИначеЕсли ТекРеквизит="" Тогда	  
		   Элементы.ФормируемыеДокументы.ПодчиненныеЭлементы.ФормируемыеДокументыШаблонДокумента.ОграничениеТипа=Метаданные.Справочники.ДокументыБД.СтандартныеРеквизиты.Ссылка.Тип;   
	   Иначе	   
		   Элементы.ФормируемыеДокументы.ПодчиненныеЭлементы.ФормируемыеДокументыШаблонДокумента.ОграничениеТипа=ТекущийОбъект.Реквизиты[ТекРеквизит].Тип;	   
		   Элементы.ФормируемыеДокументы.ПодчиненныеЭлементы.ФормируемыеДокументыШаблонДокумента.ВыбиратьТип=(ТекущийОбъект.Реквизиты[ТекРеквизит].Тип.Типы().Количество()>1);
	   КонецЕсли;
	   
 КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицыВоВременномХранилище(АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто, ОбычныйЭтап)
	
	АдресДеревоОтборов          = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ДеревоОтборов"), УникальныйИдентификатор);
	АдресТабличноеПолеПереходов = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТабличноеПолеПерехода"), УникальныйИдентификатор);
	АдресКэшВидовСубконто       = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("КэшВидовСубконто"), УникальныйИдентификатор);
	ОбычныйЭтап = Истина;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиТаблицыИзВременногоХранилища(АдресХранилища)
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ДеревоПереходов = ПолучитьИзВременногоХранилища(АдресХранилища);
		УдалитьИзВременногоХранилища(АдресХранилища);
	ИначеЕсли ТипЗнч(АдресХранилища) = Тип("Структура") Тогда
		АдресПереходов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресХранилища, "АдресПереходов", "");
		Если ЭтоАдресВременногоХранилища(АдресПереходов) Тогда
			ДеревоПереходов = ПолучитьИзВременногоХранилища(АдресПереходов);
		Иначе
			ДеревоПереходов = Неопределено;
		КонецЕсли;
	Иначе
		ДеревоПереходов = Неопределено;
	КонецЕсли;
	
	Если ДеревоПереходов <> Неопределено Тогда
		МассивУсловий = ДеревоПереходов.Строки.НайтиСтроки(Новый Структура("ЯвляетсяУсловием", 1), Истина);
		
		Объект.ЗначенияУсловийОтборов.Очистить();
		
		Для Каждого СтрУсловие ИЗ МассивУсловий Цикл
			
			Если ЗначениеЗаполнено(СтрУсловие.ЗначениеОтбора) Тогда
				
				Если ТипЗнч(СтрУсловие.ЗначениеОтбора)=Тип("СписокЗначений") Тогда
					
					Для Каждого УсловиеОтбора ИЗ СтрУсловие.ЗначениеОтбора Цикл
						
						ДобавитьЗначениеУсловия(УсловиеОтбора.Значение);
						
					КонецЦикла;
					
				Иначе
					
					ДобавитьЗначениеУсловия(СтрУсловие.ЗначениеОтбора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоПереходов, "ТабличноеПолеПерехода");
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить дерево переходов'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначениеУсловия(ЗначениеУсловия)
	
	Если (НЕ ЗначениеЗаполнено(ЗначениеУсловия)) ИЛИ ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(ЗначениеУсловия))Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока=Объект.ЗначенияУсловийОтборов.Добавить();
	НоваяСтрока.ЗначениеУсловия=ЗначениеУсловия;
	
КонецПроцедуры // ДобавитьЗначениеУсловия()

&НаСервере
Процедура ПолучитьОргЕдиницыТекущейВерсии(ТаблицаОрганизаций = Неопределено, СтрокаОтборВход = "", ОбъектОбработки = Неопределено)
	Если ОбъектОбработки = Неопределено Тогда
		РабочийОбъект = Объект;
	Иначе
		РабочийОбъект = ОбъектОбработки;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ВложенныйЗапрос1.ОрганизационнаяЕдиницаРодитель) > 0
	|			ТОГДА ""K""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВложенныйЗапрос.ОрганизационнаяЕдиница.ЭлиминирующаяОрганизация
	|					ТОГДА ""Э""
	|				ИНАЧЕ ""О""
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипОрганизационнойЕдиницы,
	|	ВложенныйЗапрос.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы
	|ПОМЕСТИТЬ ТабОрганизацийЭтапа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|		ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК ОрганизационнаяЕдиницаРодитель,
	|		ЕСТЬNULL(ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ВидОрганизационнойЕдиницы, ЗНАЧЕНИЕ(Справочник.ВидыОрганизационныхЕдиниц.ПустаяСсылка)) КАК ВидОрганизационнойЕдиницы
	|	ИЗ
	|		Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|			ПО ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка
	|				И ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|	ГДЕ
	|		ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &ВерсияРегламента) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|			ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК ОрганизационнаяЕдиницаРодитель
	|		ИЗ
	|			Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|		ГДЕ
	|			ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &ВерсияРегламента) КАК ВложенныйЗапрос1
	|		ПО ВложенныйЗапрос.ОрганизационнаяЕдиница = ВложенныйЗапрос1.ОрганизационнаяЕдиницаРодитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница,
	|	ВложенныйЗапрос.ВидОрганизационнойЕдиницы,
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница.ЭлиминирующаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ВложенныйЗапрос.ТипОрганизационнойЕдиницы КАК ТипОрганизационнойЕдиницы,
	|	ВложенныйЗапрос.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабОрганизацийЭтапа.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|		ТабОрганизацийЭтапа.ТипОрганизационнойЕдиницы КАК ТипОрганизационнойЕдиницы,
	|		ТабОрганизацийЭтапа.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы
	|	ИЗ
	|		ТабОрганизацийЭтапа КАК ТабОрганизацийЭтапа
	|	ГДЕ
	|		ТабОрганизацийЭтапа.ТипОрганизационнойЕдиницы В(&ТипОрг)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабОрганизацийЭтапа";
	
	СписокТиповОрганизаций = Новый СписокЗначений;
	Если РабочийОбъект.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
		СписокТиповОрганизаций.Добавить("О");
	ИначеЕсли РабочийОбъект.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая Тогда
		СписокТиповОрганизаций.Добавить("K");
	ИначеЕсли РабочийОбъект.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая Тогда	
		СписокТиповОрганизаций.Добавить("Э");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВерсияРегламента", РабочийОбъект.Владелец.СвязанныйРегламент);
	Запрос.УстановитьПараметр("ТипОрг", СписокТиповОрганизаций);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СхемаКомпоновкиДанных=Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьМакет("ОтборОрганизационныхЕдиниц");	
	
	Если СтрДлина(РабочийОбъект.ОрганизационныеЕдиницыОтбор_) > 10 Тогда
		Если СокрЛП(СтрокаОтборВход) = "" Тогда
			СохраненныеОтборы = ЗначениеИЗСтрокиВнутр(РабочийОбъект.ОрганизационныеЕдиницыОтбор_);
		Иначе
			СохраненныеОтборы = ЗначениеИЗСтрокиВнутр(СтрокаОтборВход);
		КонецЕсли;
	Иначе
		СохраненныеОтборы = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;	
	
	мНаборДанных=СхемаКомпоновкиДанных.НаборыДанных[0];
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	СохраненныеОтборы.Структура.Очистить();
	Группировка_ = СохраненныеОтборы.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка_.Использование = ИСТИНА;
	
	ПолеКонтрагент = Группировка_.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКонтрагент.Использование = ИСТИНА;
	ПолеКонтрагент.Поле = Новый ПолеКомпоновкиДанных("ОрганизационнаяЕдиница");
	//
	//ПолеВидОрганизационнойЕдиницы = Группировка_.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//ПолеВидОрганизационнойЕдиницы.Использование = ИСТИНА;
	//ПолеВидОрганизационнойЕдиницы.Поле = Новый ПолеКомпоновкиДанных("ВидОрганизационнойЕдиницы");
	
	ОрганизационныеЕдиницыОтборСКД.ЗагрузитьНастройки(СохраненныеОтборы);
	ОрганизационныеЕдиницыОтборСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));

	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные",Результат);
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,ОрганизационныеЕдиницыОтборСКД.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Если ТаблицаОрганизаций = Неопределено Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаОрганизаций);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
  	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТипуСервер()
		
	Объект.ОрганизационныеЕдиницыОтбор.Очистить();
	Для Каждого ОргА Из Элементы.ОрганизационныеЕдиницыОтборОрганизационнаяЕдиница.СписокВыбора Цикл
		
		Нстр =  Объект.ОрганизационныеЕдиницыОтбор.Добавить();
		Нстр.ОрганизационнаяЕдиница =  ОргА.Значение;
			
    КонецЦикла;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НовыйКомпоновщикНастроекОтбораОрганизационныхЕдиниц(СписокКомпоновщикиНастроек, АдресСКД)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
	СписокКомпоновщикиНастроек.Добавить(КомпоновщикНастроек);
	Возврат КомпоновщикНастроек;
	
КонецФункции

&НаСервере
Функция ЗаполнитьАдресСКД()
	
	Если ПустаяСтрока(АдресСКД) Тогда
		АдресСКД = ПоместитьВоВременноеХранилище(Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьМакет("ОтборОрганизационныхЕдиниц"), УникальныйИдентификатор);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыИзОбъекта(ЗначениеКопирования)
	
	Если НЕ ЗаполнитьАдресСКД() Тогда
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаОтбора(ЭлементыОтбора, ГруппаИЛИ = ЛОЖЬ, ПараметрыЗапроса)
	
	ОператорыВидыСравнений = Новый Соответствие;
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Больше,				"%П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии,				"%П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВСписке,				"%П1% В(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,		"%П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Заполнено,				"НЕ %П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеВИерархии,			"НЕ %П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке,				"НЕ %П1% В(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии,	"НЕ %П1% В ИЕРАРХИИ(%П2%)");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеЗаполнено,			"%П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеРавно,				"%П1% <> %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеСодержит,			"НЕ %П1% ПОДОБНО %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Равно,					"%П1% = %П2%");
	ОператорыВидыСравнений.Вставить(ВидСравненияКомпоновкиДанных.Содержит,				"%П1% ПОДОБНО %П2%");
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	ПоляСтруктурыКД = Новый Соответствие;
	Для Каждого Поле Из СКД.НаборыДанных[0].Поля Цикл
		ПоляСтруктурыКД.Вставить(Новый ПолеКомпоновкиДанных(Поле.ПутьКДанным), Поле);
	КонецЦикла;
	
	Текст = "";
	ОператорГруппы = ?(ГруппаИЛИ, " ИЛИ ", " И ");
	
	Для Каждого Элемент Из ЭлементыОтбора Цикл
		
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекстЭлемента = ПолучитьТекстЗапросаОтбора(Элемент.Элементы, Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли, ПараметрыЗапроса);
			Если НЕ ПустаяСтрока(ТекстЭлемента) Тогда
				ТекстЭлемента = ?(Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе, "НЕ ", "") + "(" + ТекстЭлемента + ")";
			КонецЕсли;
		Иначе
			ОператорСравнения = ОператорыВидыСравнений.Получить(Элемент.ВидСравнения);
			Если НЕ ОператорСравнения = Неопределено Тогда
				П1 = ПоляСтруктурыКД.Получить(Элемент.ЛевоеЗначение).ПутьКДанным;
				ИмяПараметра = Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьУникальноеИмяПараметраПоПутиКДанным(П1);
				ТекстЭлемента = СтрЗаменить(ОператорСравнения, "%П1%", "Т." + П1);
				ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "%П2%", "&" + ИмяПараметра);
				Если Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
					П2 = ПоляСтруктурыКД.Получить(Элемент.ЛевоеЗначение).ТипЗначения.ПривестиЗначение(Неопределено);
				Иначе
					П2 = Элемент.ПравоеЗначение;
				КонецЕсли;
				ПараметрыЗапроса.Вставить(ИмяПараметра, П2);
			Иначе
				ТекстЭлемент = "";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЭлемента) Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст), "", ОператорГруппы) + ТекстЭлемента;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Текст) Тогда 
		Текст = "ИСТИНА";
	ИначеЕсли ГруппаИЛИ Тогда
		Текст = "(" + Текст + ")";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСписокРассылки_Заверешение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Записать();
	Иначе
		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокРассылки(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Требуется сохранить объект. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("РедактироватьСписокРассылки_Заверешение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру параметров для открытия формы матрицы полномочий.
&НаСервере
Функция ПолучитьСтруктуруОткрытияМатрицыПолномочий()
	РезультатФункции = Новый Структура;
	ОбъектБдНастраиваемыйОтчет = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	РезультатФункции.Вставить("ОбъектБД", ОбъектБдНастраиваемыйОтчет);
	РезультатФункции.Вставить("ВерсияОрганизационнойСтруктуры", СвязанныйРегламент);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтруктуруОткрытияМатрицыПолномочий()

// Управление дооступностью элементов на форме Форма.
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	// Отображение колонки "Контрольные".
	КритерийУтверждения = Форма.Объект.КритерийУтвержденияЭтапа;
	ЭтоКритерийПоЗаполненным = (КритерийУтверждения = ПредопределенноеЗначение("Перечисление.КритерииУтвержденияЭтапаПроцесса.УтвержденыЗаполненныеЭкземплярыОтчетов"));
	ЭтоКритерийПоКонтрольным = (КритерийУтверждения = ПредопределенноеЗначение("Перечисление.КритерииУтвержденияЭтапаПроцесса.УтвержденыКонтрольныеЭкземплярыОтчетов"));
	ТребуютсяКонтрольные = (ЭтоКритерийПоЗаполненным ИЛИ ЭтоКритерийПоКонтрольным);
	Форма.Элементы.ФормируемыеДокументыКонтрольный.Видимость = ТребуютсяКонтрольные;
КонецПроцедуры		// УправлениеДоступностью()

&НаКлиенте
Процедура РедактированиеРасписания_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		АдресХранилищаРасписания = ПоместитьВоВременноеХранилище(ВыбранноеЗначение, ЭтаФорма.УникальныйИдентификатор);
		ПредставлениеРасписания = Строка(ВыбранноеЗначение);
	Иначе
		// Значение не выбрано. Не изменяем расписание.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписание(Команда)
	Если НЕ ЗначениеЗаполнено(АдресХранилищаРасписания) Тогда
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Новый РасписаниеРегламентногоЗадания);
	Иначе
		Расписание = ПолучитьИзВременногоХранилища(АдресХранилищаРасписания);
		Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		Иначе
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписания_Завершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ФормируемыеДокументыДокументБДПриИзменении(Элемент)
	// Предупредим об изменении сценарии МСФО для документа Трансформационная корректировка, если флаг УчетПоСценариям не взведён.
	ТекДанные = Элементы.ФормируемыеДокументы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДокументБдКоррекировка = НайтиДокументБд("ТрансформационнаяКорректировка");
		Если ЗначениеЗаполнено(ДокументБдКоррекировка) Тогда
			Если (ТекДанные.ДокументБд = ДокументБдКоррекировка) И (Не УчетПоСценариям) Тогда
				ТекстСообщения = НСтр("ru = 'В системе не включен учёт по сценариям. Сценарий документа Трансформационная корректировка будет изменён.'");
				ПоказатьПредупреждение(, ТекстСообщения);
			Иначе
				// Проверка пройдена.
			КонецЕсли;
		Иначе
			// Документ БД не найден. Пропускаем проверку.
		КонецЕсли;
	Иначе
		// Строка не выбрана.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Записать();
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ПередЗакрытием_Завершение()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Проверим на запущенные процессы.
	МассивЗапущенныйхПроцессов = УправлениеПроцессамиСогласованияУХ.ПолучитьМассивЗапущенныхПроцессов(Объект.Владелец);
	КоличествоПроцессов = МассивЗапущенныйхПроцессов.Количество();
	Если КоличествоПроцессов > 0 Тогда
		Если НЕ ВыполняетсяЗакрытие Тогда
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'По шаблону %Шаблон% запущены процессы (%Количество%). Изменение этапа может вызвать нарушение их работы. Продолжить сохранение?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Шаблон%", Строка(Объект.Владелец));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Количество%", Строка(КоличествоПроцессов));
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытием_Завершение", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			// Можно закрывать.
		КонецЕсли;
	Иначе
		// Нет запущенных процессов. Не предупреждаем пользователя.
	КонецЕсли;
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;
