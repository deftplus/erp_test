&НаКлиенте 
Перем МожноЗакрывать;
&НаКлиенте 
Перем ИсточникПеретаскивания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ПанельФормы.ТекущаяСтраница = ?(Параметры.ОбычныйЭтап, Элементы.ОбычныйЭтап, Элементы.УсловныйПереход);
	
	Если Параметры.ОбычныйЭтап Тогда
		Заголовок = Нстр("ru = 'Список этапов-последователей'");
	Иначе
		Заголовок = Нстр("ru = 'Настройка перехода по условию'");
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресТабличноеПолеПереходов) Тогда
		// Считаем дерево из временного хранилища.
		Вн_ТабличноеПолеПереходов = ПолучитьИзВременногоХранилища(Параметры.АдресТабличноеПолеПереходов);
		// Добавим дополнительные колонки.
		Вн_ТабличноеПолеПереходов.Колонки.Добавить("ОтображениеДействияТекст", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
		ОписаниеТиповСтрока200 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200);
		ОписаниеТиповСтрока36 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(36);
		ОписаниеТиповИсточникДанных = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ИсточникиДанныхДляРасчетов");
		ПроверитьДобавитьКолонкуВДерево(Вн_ТабличноеПолеПереходов, "ИмяТипа", ОписаниеТиповСтрока200);
		ПроверитьДобавитьКолонкуВДерево(Вн_ТабличноеПолеПереходов, "ИдентификаторПерехода", ОписаниеТиповСтрока36);
		ПроверитьДобавитьКолонкуВДерево(Вн_ТабличноеПолеПереходов, "ИдентификаторОтбора", ОписаниеТиповСтрока36);
		ПроверитьДобавитьКолонкуВДерево(Вн_ТабличноеПолеПереходов, "ИсточникСсылка", ОписаниеТиповИсточникДанных);
		// Разместим дерево на форме.
		ЗначениеВРеквизитФормы(Вн_ТабличноеПолеПереходов, "ТабличноеПолеПерехода");
	Иначе
		Отказ  = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресКэшВидовСубконто) Тогда
		ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(Параметры.АдресКэшВидовСубконто), "КэшВидовСубконто");
	КонецЕсли;
	
	СписокВозможныхДействий.Добавить(Перечисления.ДействияЭтапа.УтвердитьОтчет, "2");
	СписокВозможныхДействий.Добавить(Перечисления.ДействияЭтапа.ВернутьИсполнителю, "3");
	СписокВозможныхДействий.Добавить(Перечисления.ДействияЭтапа.ПерейтиКЭтапу, "1");
	
	ПараметрическоеУсловие = Перечисления.УсловияЭтапа.ПараметрическоеУсловие;
	
	Параметры.Свойство("СписокВыбораУсловий" , СписокВыбораУсловий);
	Параметры.Свойство("СписокВыбораДействий", СписокВыбораДействий);
	Параметры.Свойство("ШаблонПроцесса" , ШаблонПроцесса);
	
	НоваяСтрока = ТаблицаВозможныхВыборов.Добавить();
	
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.Равно);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.Больше);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.Меньше);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.ВИерархии);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.НеВИерархии);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии);
	НоваяСтрока.СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	
	ОбновитьДеревоОтборов();
	
	Если Параметры.Свойство("АдресТаблицаДоступныхПараметров") Тогда
		ТаблицаСохраненныхДоступныхПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицаДоступныхПараметров);
		Если ТаблицаСохраненныхДоступныхПараметров <> Неопределено Тогда
			ТаблицаСвертка = ТаблицаДоступныхПараметров.Выгрузить();
			ТаблицаСвертка.Свернуть("ИмяПараметра,Потребитель,ИсточникСсылка");
			Для Каждого ТекТаблицаСвертка из ТаблицаСвертка Цикл
				ТекИмяПараметра	 = ТекТаблицаСвертка.ИмяПараметра;
				ТекПотребитель	 = ТекТаблицаСвертка.Потребитель;
				ТекИсточник		 = ТекТаблицаСвертка.ИсточникСсылка;
				ВосстановитьСохраненныеЗначенияПараметров(ТаблицаСохраненныхДоступныхПараметров, ТекИмяПараметра, ТекПотребитель, ТекИсточник);
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
	//Обработка условия для этапа -  цикла
	Если Параметры.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока Тогда
		Элементы.ТабличноеПолеПереходаДобавить.Видимость = Ложь;
		Элементы.ТабличноеПолеПереходаГруппаВыбор.Видимость = Ложь;
		Элементы.ТабличноеПолеПереходаСкопировать.Видимость = Ложь;
		Элементы.ТабличноеПолеПереходаСкопировать_КМ.Видимость = Ложь;
		Элементы.ТабличноеПолеПереходаПереместитьВверх_КМ.Видимость = Ложь;
		Элементы.ТабличноеПолеПереходаПереместитьВниз_КМ.Видимость = Ложь;
		
		Если Вн_ТабличноеПолеПереходов.Строки.Количество() = 0 Тогда
			НоваяСтрока = ТабличноеПолеПерехода.ПолучитьЭлементы().Добавить();		
			НоваяСтрока.ЯвляетсяУсловием = Истина;
			НоваяСтрока.ОбработкаУсловия = 6;
			СтрокаИстина = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаИстина.ЯвляетсяУсловием = Истина;
			СтрокаИстина.ОбработкаУсловия = 7;
			СтрокаЛожь = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаЛожь.ЯвляетсяУсловием = Истина;
			СтрокаЛожь.ОбработкаУсловия = 2;
		КонецЕсли;
	КонецЕсли;
	СвязатьДеревоОтборовСПереходами(ТабличноеПолеПерехода);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Настройка_ОтображатьВариантыОтборов = Настройки["ОтображатьВариантыОтборов"];
	Если Настройка_ОтображатьВариантыОтборов <> Неопределено  Тогда
		УправлениеВидимостьюВариантовОтбора(Настройка_ОтображатьВариантыОтборов);
	Иначе
		УправлениеВидимостьюВариантовОтбора(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтображениеДействияДляСтрокиДерева(ТабличноеПолеПерехода);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТабличноеПолеПереходаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТС = Элемент.ТекущаяСтрока;
	ДанныеСтроки = Элемент.ДанныеСтроки(ТС);
	
	Если Копирование Тогда
		Если ДанныеСтроки.ЯвляетсяУсловием 
			И (ДанныеСтроки.ОбработкаУсловия = 1 ИЛИ ДанныеСтроки.ОбработкаУсловия = 2 ИЛИ ДанныеСтроки.ОбработкаУсловия = 5) Тогда
			Возврат;
		КонецЕсли;
		
		ТекРодитель = ДанныеСтроки.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			ТекРодитель = ТабличноеПолеПерехода;
		КонецЕсли;
		
		СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
		Индекс = СтрокиРодителя.Индекс(ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтрокиРодителя.Вставить(Индекс), ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаУсловиеДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТабличноеПолеПерехода.ДанныеСтроки(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
	Если ТекущиеДанные.ЯвляетсяУсловием Тогда
		ДанныеВыбора = СписокВыбораУсловий;
	Иначе
		ДанныеВыбора = СписокВыбораДействий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаУсловиеДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТабличноеПолеПерехода.ДанныеСтроки(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
	ТекущиеДанные.Значение = ВидСравнения.Равно;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаПередУдалением(Элемент, Отказ)
	
	ТС = Элементы.ТабличноеПолеПерехода.ТекущаяСтрока;	
	Если ТС <> Неопределено Тогда
		
		ДанныеСтроки = ТабличноеПолеПерехода.НайтиПоИдентификатору(ТС);
		Если ДанныеСтроки.ЯвляетсяУсловием
		   И ДанныеСтроки.ОбработкаУсловия <> 0 
		   И ДанныеСтроки.ОбработкаУсловия <> 3 
		   И ДанныеСтроки.ОбработкаУсловия <> 4 Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Неопределено Тогда 
		ПолеИмя = ""; 
	Иначе 
		ПолеИмя = Поле.Имя;
	КонецЕсли;
	
	Если (ПолеИмя <> "ТабличноеПолеПереходаУсловиеДействия") И (ПолеИмя <> "ТабличноеПолеПереходаОтображениеДействияТекст") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
		
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте                    
Процедура ТабличноеПолеПереходаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Строка <> Неопределено Тогда
		ТаблицаЗначенияПеретаскивания = ПараметрыПеретаскивания.Значение;
		Если ТаблицаЗначенияПеретаскивания.Количество() > 0 Тогда
			ПерваяСтрокаТаблицы = ТаблицаЗначенияПеретаскивания[0];
			ТекущаяСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(Строка); 
			Если ТипЗнч(ПерваяСтрокаТаблицы) = Тип("Число") Тогда
				ПерваяСтрокаТаблицы = ТабличноеПолеПерехода.НайтиПоИдентификатору(ПерваяСтрокаТаблицы);
			Иначе
				// Строка установлена корректно.
			КонецЕсли;
			Если ПроверитьПеретаскиваниеУсловия(ТекущаяСтрока, ПерваяСтрокаТаблицы) Тогда
				Если ИсточникПеретаскивания = ПредставлениеДеревоОтборов() Тогда
					// Перетаскивание из дерева отборов.
					ТекущаяСтрока.Значение				 = ВидСравнения.Равно;
					ТекущаяСтрока.УсловиеДействие		 = ПерваяСтрокаТаблицы.ПолныйПуть;
					ТекущаяСтрока.ИдентификаторОтбора	 = ПерваяСтрокаТаблицы.ИдентификаторОтбора;
					ТекущаяСтрока.ИдентификаторПерехода	 = Строка(Новый УникальныйИдентификатор);
					Если Лев(ПерваяСтрокаТаблицы.ПолныйПуть, 10) = "Источники." Тогда
						ТекущаяСтрока.ИмяТипа			 = "Неопределено";
						ПривестиЗначениеКТипу(Строка, Тип("Неопределено"));		
					Иначе
						ТекущаяСтрока.ИмяТипа			 = Строка(ПерваяСтрокаТаблицы.ТипЗначения[0]);
						ПривестиЗначениеКТипу(Строка, ПерваяСтрокаТаблицы.ТипЗначения);
					КонецЕсли;
					НовыйИсточникДанных = ПолучитьИсточникДанныхСтрокиОтбора(ПерваяСтрокаТаблицы);
					ТекущаяСтрока.ИсточникСсылка = НовыйИсточникДанных;
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ИдентификаторОтбора", ТекущаяСтрока.ИдентификаторОтбора);
					СтруктураПоиска.Вставить("ИдентификаторПерехода", ТекущаяСтрока.ИдентификаторПерехода);
					СтруктураПоиска.Вставить("ИсточникСсылка", ТекущаяСтрока.ИсточникСсылка);
					НайденныеСтрокиДоступныеПараметры = ТаблицаДоступныхПараметров.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтрокиДоступныеПараметры.Количество() > 0 Тогда
						Для Каждого ТекНайденныеСтрокиДоступныеПараметры Из НайденныеСтрокиДоступныеПараметры Цикл
							
						КонецЦикла;	
					Иначе
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("ИдентификаторОтбора", ТекущаяСтрока.ИдентификаторОтбора);
						СтруктураПоиска.Вставить("ИсточникСсылка", ТекущаяСтрока.ИсточникСсылка);
						НайденныеСтрокиИсходные = ТаблицаИсходныхПараметров.НайтиСтроки(СтруктураПоиска);
						Для Каждого ТекНайденныеСтрокиИсходные Из НайденныеСтрокиИсходные Цикл
							НоваяСтрока = ТаблицаДоступныхПараметров.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденныеСтрокиИсходные);
							НоваяСтрока.ИдентификаторПерехода = ТекущаяСтрока.ИдентификаторПерехода;
						КонецЦикла;	
					КонецЕсли;
				ИначеЕсли ИсточникПеретаскивания = ПредставлениеТаблицаПереходов() Тогда
					// Перетаскивание внутри таблицы переходов.
					ТекЯвляетсяУсловием = ТекущаяСтрока.ЯвляетсяУсловием;
					ЭтоСтрокаУсловия = (ТекЯвляетсяУсловием = 1);
					ТекОбработкаУсловия = ТекущаяСтрока.ОбработкаУсловия;
					ЭтоСтрокаВыбор = (ТекущаяСтрока.ОбработкаУсловия = 3);
					ЭтоСтрокаЕсли = (ТекущаяСтрока.ОбработкаУсловия = 0);
					Если (ЭтоСтрокаУсловия) И (НЕ ЭтоСтрокаВыбор) И (НЕ ЭтоСтрокаЕсли) Тогда
						НоваяСтрока = ТекущаяСтрока.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрокаТаблицы);
					Иначе
						ТекстСообщения = НСтр("ru = 'Разрешено переносить действия только в существующие условия'");
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					КонецЕсли;
				Иначе
					// Неизвестный вариант. Пропускаем.					
				КонецЕсли;
			Иначе
				// Не все условия выполнены. Перетаскивание невозможно.
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить выбранное значение. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		НоваяСтрока = ВставитьУсловие();
		Строка_НоваяСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(НоваяСтрока);
		Строка_НоваяСтрока.УсловиеДействие	 = ПараметрыПеретаскивания.Значение[0].Условие;
		Строка_НоваяСтрока.ИмяТипа			 = Строка(ПараметрыПеретаскивания.Значение[0].ТипЗначения[0]);
		Строка_НоваяСтрока.Значение			 = ВидСравнения.Равно;
		ПривестиЗначениеКТипу(НоваяСтрока,ПараметрыПеретаскивания.Значение[0].ТипЗначения);
	КонецЕсли;
	// Обновление данных.
	ТекДанные = Элементы.ТабличноеПолеПерехода.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОбновитьТаблицуПараметров(ТекДанные.ИдентификаторОтбора, ТекДанные.ИдентификаторПерехода);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИсточникПеретаскивания = "";	                                                                                                                     
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда      
		ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);

		Если ТекущаяСтрока.ИндексКартинки = 2 ИЛИ ТекущаяСтрока.ИндексКартинки = 1 ИЛИ СокрЛП(ТекущаяСтрока.ТипПоля = "Группа") Тогда
			Выполнение = Ложь;
		КонецЕсли;                                                             
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		ИсточникПеретаскивания = ПредставлениеДеревоОтборов();
	Иначе
		Выполнение = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПерехода_ОбычныйЭтапПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	НоваяСтрока = ТабличноеПолеПерехода.ПолучитьЭлементы().Добавить();
	НоваяСтрока.УсловиеДействие = ПредопределенноеЗначение("Перечисление.ДействияЭтапа.ПерейтиКЭтапу");
	Элементы.ТабличноеПолеПерехода.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	Если Копирование Тогда
		
		ДанныеСтроки = ТабличноеПолеПерехода.НайтиПоИдентификатору(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
	КонецЕсли;
	
	УстановитьОтображениеДействия(НоваяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПерехода_ОбычныйЭтапЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ШаблонПроцесса));
	ПараметрыФормы.Вставить("ЗапретитьИзменениеШаблона", Истина);
	ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбор(Команда)
	
	ВставитьВыбор(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	// Добавление строки действия.
	НоваяСтрока = Неопределено;
	Если Элементы.ТабличноеПолеПерехода.ТекущаяСтрока = Неопределено Тогда
		НоваяСтрока = ТабличноеПолеПерехода.ПолучитьЭлементы().Добавить();
	Иначе
		ТС = Элементы.ТабличноеПолеПерехода.ДанныеСтроки(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
		Если ТС.ЯвляетсяУсловием Тогда
			Если ТС.ОбработкаУсловия = 0 ИЛИ ТС.ОбработкаУсловия = 3 Тогда
				НоваяСтрока = Неопределено;
				ТекстСообщения = НСтр("ru = 'Действия разрешено размещать только в ветвях условий. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				НоваяСтрока = ТС.ПолучитьЭлементы().Вставить(0);
			КонецЕсли;
		Иначе
			Родитель = ТС.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				Родитель = ТабличноеПолеПерехода;
			Иначе
				// Родитель уже задан.
			КонецЕсли;
			СтрокиРодителя = Родитель.ПолучитьЭлементы();
			Индекс = СтрокиРодителя.Индекс(ТС);
			НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
		КонецЕсли;
	КонецЕсли;
	// Заполнение строки действия.
	Если НоваяСтрока <> Неопределено Тогда
		НоваяСтрока.ЯвляетсяУсловием = Ложь;
		НоваяСтрока.УсловиеДействие  = ПредопределенноеЗначение("Перечисление.ДействияЭтапа.ПерейтиКЭтапу");
		Элементы.ТабличноеПолеПерехода.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		УстановитьОтображениеДействия(НоваяСтрока.ПолучитьИдентификатор());
	Иначе
		// Строка не создана. Пропускаем.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловие(Команда)
	
	Если Элементы.ТабличноеПолеПерехода.ТекущаяСтрока = Неопределено Тогда
		ВставитьУсловие();
	Иначе
		ТекущаяСтрока = Элементы.ТабличноеПолеПерехода.ДанныеСтроки(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
		Если ТекущаяСтрока.ЯвляетсяУсловием Тогда
			ВставитьУсловие(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
		Иначе
			РодительТекСтроки = ТекущаяСтрока.ПолучитьРодителя();
			Если РодительТекСтроки <> Неопределено Тогда
				ВставитьУсловие(РодительТекСтроки.ПолучитьИдентификатор());
			Иначе
				ВставитьУсловие();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловиеВыбора(Команда)
	
	ТС = Элементы.ТабличноеПолеПерехода.ТекущаяСтрока;
	
	Если ТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ТабличноеПолеПерехода.ДанныеСтроки(ТС);
	Если НЕ ДанныеСтроки.ЯвляетсяУсловием Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьУсловиеВыбора(ТС);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТС = Элементы.ТабличноеПолеПерехода.ТекущаяСтрока;
	Если ТС <> Неопределено Тогда
		ДанныеСтроки = ТабличноеПолеПерехода.НайтиПоИдентификатору(ТС);
		Если ДанныеСтроки.ЯвляетсяУсловием
		   И (ДанныеСтроки.ОбработкаУсловия = 1
		      ИЛИ ДанныеСтроки.ОбработкаУсловия = 2
			  ИЛИ ДанныеСтроки.ОбработкаУсловия = 5) Тогда
				Возврат;
		КонецЕсли;
		
		Попытка
			Родитель = ДанныеСтроки.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				Родитель = ТабличноеПолеПерехода;
			КонецЕсли;
			СтрокиРодителя = Родитель.ПолучитьЭлементы();
			Индекс         = СтрокиРодителя.Индекс(ДанныеСтроки);
			СтрокиРодителя.Сдвинуть(Индекс, -1);
		Исключение
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТС = Элементы.ТабличноеПолеПерехода.ТекущаяСтрока;
	ДанныеСтроки = ТабличноеПолеПерехода.НайтиПоИдентификатору(ТС);
	
	Если ДанныеСтроки.ЯвляетсяУсловием 
	   И (ДанныеСтроки.ОбработкаУсловия = 1
	 ИЛИ ДанныеСтроки.ОбработкаУсловия = 2
	 ИЛИ ДанныеСтроки.ОбработкаУсловия = 5) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Родитель = ДанныеСтроки.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			СтрокиРодителя = ТабличноеПолеПерехода.ПолучитьЭлементы();
		Иначе
			СтрокиРодителя = Родитель.ПолучитьЭлементы();
		КонецЕсли;
		
		Индекс = СтрокиРодителя.Индекс(ДанныеСтроки);
		СтрокиРодителя.Сдвинуть(Индекс, 1);
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьУсловия(Команда)
	
	УправлениеВидимостьюВариантовОтбора(НЕ ОтображатьВариантыОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Если ВладелецФормы <> Неопределено Тогда
		МожноЗакрывать = Истина;
		СтруктураДанныхНастроек = СохранитьНастройкиВХранилище(ВладелецФормы.УникальныйИдентификатор);
		ОповеститьОВыборе(СтруктураДанныхНастроек);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить владельца текущей формы. Данные не были сохранены.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхПараметровПараметрОбъектаПриИзменении(Элемент)
	
	Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные.ЗначениеПараметра = Неопределено;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИсточник(Команда)
	
	ТекущийИсточник = Элементы.ДеревоОтборов.ТекущиеДанные.ИсточникСсылка;
	Если ЗначениеЗаполнено(ТекущийИсточник) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередУдалениемИсточникаЗавершение",ЭтаФорма);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Пометить на удаление выбранный источник данных?'"), РежимДиалогаВопрос.ДаНет);
		
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИсточникДанных(Команда)
	
	СтруктураПараметров = Новый Структура;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПотребительРасчета",ШаблонПроцесса);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	Оповещение = Новый ОписаниеОповещения("ПолучениеНовогоИсточника", ЭтаФорма);		
	ФормаИД = ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаЭлемента",СтруктураПараметров 
	,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсточникДанных(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Элементы.ДеревоОтборов.ТекущиеДанные.ИсточникСсылка);
	Оповещение = Новый ОписаниеОповещения("ПолучениеНовогоИсточника", ЭтаФорма);		
	ФормаИД = ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаЭлемента",СтруктураПараметров 
	,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРеквизитаОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекДанные = Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Потребитель", ТекДанные.Потребитель);
	СтруктураПоиска.Вставить("ИмяПараметра", ТекДанные.ИмяПараметра);
	СтруктураПоиска.Вставить("ИдентификаторПерехода", ТекДанные.ИдентификаторПерехода);
	НайденныеСтроки = ТаблицаДоступныхПараметров.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущаяСтрока = НайденныеСтроки[0];	
		ТекДанные.ЗначениеПараметра 			= Результат.Поле;	
		ТекущаяСтрока.ЗначениеПараметра 		= Результат.Поле;
		ТекущаяСтрока.ПараметрОбъекта 			= Истина;
		ТекущаяСтрока.ИдентификаторПерехода	 	= ТекДанные.ИдентификаторПерехода;	

	Иначе
		ТекстСообщения = НСтр("ru = 'Параметр %Параметр% не найден. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Параметр%", Строка(ТекДанные.ИмяПараметра));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ИдентификаторПерехода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторПерехода", "");
	ТекДанные = Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Потребитель", ТекДанные.Потребитель);
	СтруктураПоиска.Вставить("ИмяПараметра", ТекДанные.ИмяПараметра);
	СтруктураПоиска.Вставить("ИдентификаторОтбора", ТекДанные.ИдентификаторОтбора);     	
	СтруктураПоиска.Вставить("ИдентификаторПерехода", ИдентификаторПерехода);
	НайденныеСтроки = ТаблицаДоступныхПараметров.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущаяСтрока = НайденныеСтроки[0];    
		ТекДанные.ЗначениеПараметра = Результат;
		ТекущаяСтрока.ЗначениеПараметра		 = Результат;
		ТекущаяСтрока.ПараметрОбъекта		 = Ложь;
		ТекущаяСтрока.ИдентификаторПерехода	 = ИдентификаторПерехода;
	Иначе
		НоваяСтрока = ТаблицаДоступныхПараметров.Добавить();    
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
		ТекДанные.ЗначениеПараметра = Результат;
		НоваяСтрока.ЗначениеПараметра		 = Результат;
		НоваяСтрока.ПараметрОбъекта			 = Ложь;
		НоваяСтрока.ИдентификаторПерехода	 = ИдентификаторПерехода;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ.
//

// Возвращает Имя типа для значения ЗначениеВход.
&НаСервереБезКонтекста
Функция НайтиТип(ЗначениеВход)
	РезультатФункции = "";
	Попытка
		НовыйТип = ТипЗнч(ЗначениеВход);
		Если ТипЗнч(ЗначениеВход) = Тип("СписокЗначений") Тогда
			МассивТиповСписка = ЗначениеВход.ТипЗначения.Типы();
			Для Каждого ТекМассивТиповСписка Из МассивТиповСписка Цикл
				РезультатФункции = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекМассивТиповСписка);
			КонецЦикла;	
		Иначе
			РезультатФункции = ОбщегоНазначения.СтроковоеПредставлениеТипа(НовыйТип);
		КонецЕсли;
		
		РезультатФункции = СтрЗаменить(РезультатФункции, "СправочникСсылка", "Справочник");
		РезультатФункции = СтрЗаменить(РезультатФункции, "ДокументСсылка", "Документ");
		РезультатФункции = СтрЗаменить(РезультатФункции, "ПеречислениеСсылка", "Перечисление");
		РезультатФункции = СтрЗаменить(РезультатФункции, "ПланВидовХарактеристикСсылка", "ПланВидовХарактеристик");
        РезультатФункции = СтрЗаменить(РезультатФункции, "ПланСчетовСсылка", "ПланСчетов");
		
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении типа для %Значение% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(ЗначениеВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = "";
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// НайтиТип()

// Рекурсивно выполняет поиск условия СтрокаПереходовВход в узле УзелВход,
// записывая найденный идентификатор отбора в РезультатИзм. Параметр 
// ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаСервере
Процедура ВыполнитьПоискОтборовУсловия(УзелВход, СтрокаПереходовВход, РезультатИзм, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;   
	
	УсловиеДействие = СтрокаПереходовВход.УсловиеДействие;
	Если ТипЗнч(УсловиеДействие) = Тип("Строка") Тогда    
		ИскомыйЭлемент = "";
		Если ЗначениеЗаполнено(СтрокаПереходовВход.ИсточникСсылка) Тогда
			ИскомыйЭлемент = СтрокаПереходовВход.ИсточникСсылка;
			ВариантПоиска = "Источник";
		ИначеЕсли Лев(УсловиеДействие, 4) = "f()." Тогда			
			ПозицияТочки = СтрНайти(УсловиеДействие, ".", , 5);
			Если ПозицияТочки > 6 Тогда
				НаименованиеФункции = Сред(УсловиеДействие, 5, ПозицияТочки - 7);
				ИскомыйЭлемент = НаименованиеФункции + "()";
				ВариантПоиска = "Функция";
			Иначе
				// Окончание функции не найдено. Пропускаем.
			КонецЕсли;
		Иначе
			// Неизвестный вариант. Пропускаем.
		КонецЕсли;
		
		Для Каждого ТекЭлементы Из УзелВход.ПолучитьЭлементы() Цикл
			Если ВариантПоиска = "Источник" Тогда
				Если ТекЭлементы.ИсточникСсылка = ИскомыйЭлемент Тогда
					РезультатИзм = ТекЭлементы.ИдентификаторОтбора;
					Прервать;
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			ИначеЕсли (ВариантПоиска = "Функция") И (СокрЛП(ТекЭлементы.ТипПоля) = "Функция") Тогда	
				Если СокрЛП(ТекЭлементы.Элемент) = ИскомыйЭлемент Тогда
					РезультатИзм = ТекЭлементы.ИдентификаторОтбора;
					Прервать;
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
			ВыполнитьПоискОтборовУсловия(ТекЭлементы, СтрокаПереходовВход, РезультатИзм, ГлубинаРекурсииВход + 1);
		КонецЦикла;	
	ИначеЕсли ТипЗнч(УсловиеДействие) = Тип("ПеречислениеСсылка.ДействияЭтапа") Тогда 	
		// Действие. Пропускаем.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант ""%Параметр%"" задания функции отбора'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Параметр%", Строка(УсловиеДействие));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ВыполнитьПоискОтборовУсловия()

// Возвращает идентификатор отбора условия по строке СтрокаПереходовВход.
&НаСервере
Функция ВернутьИдентификаторОтбораУсловия(СтрокаПереходовВход)
	РезультатФункции = "";
	ВыполнитьПоискОтборовУсловия(ДеревоОтборов, СтрокаПереходовВход, РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ВернутьИдентификаторОтбораУсловия()

// Рекурсиво расставляет в узле дерева переходов УзелВход соответсвенные идентификаторы
// отборов. Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаСервере
Процедура СвязатьДеревоОтборовСПереходами(УзелВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекЭлементы Из УзелВход.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(ТекЭлементы.УсловиеДействие) Тогда
			НовыйИдентификаторОтбора = ВернутьИдентификаторОтбораУсловия(ТекЭлементы);
			ТекЭлементы.ИдентификаторОтбора = НовыйИдентификаторОтбора;
		Иначе
			// Пропускаем строку.
		КонецЕсли;
		СвязатьДеревоОтборовСПереходами(ТекЭлементы, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// СвязатьДеревоОтборовСПереходами()

// Проверяет существование в дереве ДеревоВход колонки с имененем ИмяКолонкиВход.
// В случае отсутствия добавляет колонку, устанавливая тип ОписаниеТиповВход.
&НаСервере
Процедура ПроверитьДобавитьКолонкуВДерево(ДеревоВход, ИмяКолонкиВход, ОписаниеТиповВход = Неопределено)
	Если ДеревоВход.Колонки.Найти(ИмяКолонкиВход) = Неопределено Тогда
		Если ОписаниеТиповВход <> Неопределено Тогда
			ДеревоВход.Колонки.Добавить(ИмяКолонкиВход, ОписаниеТиповВход);
		Иначе
			ДеревоВход.Колонки.Добавить(ИмяКолонкиВход);
		КонецЕсли;
	Иначе
		// Колонка уже размещена в дереве. Не добавляем.
	КонецЕсли;	
КонецПроцедуры		// ПроверитьДобавитьКолонкуВДерево()

// Переносит в таблицу доступных параметров на форме значениня параметров
// из сохранённой таблицы параметров ТаблицаСохраненныхДоступныхПараметровВход, 
// отбирая их по измерениям ИмяПараметраВход, ПотребительВход, ИсточникВход.
&НаСервере
Процедура ВосстановитьСохраненныеЗначенияПараметров(ТаблицаСохраненныхДоступныхПараметровВход, ИмяПараметраВход, ПотребительВход, ИсточникВход)
	// Подготовим новую таблицу.
	НоваяТаблицаДоступныхПараметров = ТаблицаДоступныхПараметров.Выгрузить();
	НоваяТаблицаДоступныхПараметров.Очистить();
	// Удалим существующие строки с параметром.
	СтруктураДанныхСтроки = Новый Структура;
	Для Каждого ТекТаблицаДоступныхПараметров Из ТаблицаДоступныхПараметров Цикл
		СовпадаетИмяПараметра = (ТекТаблицаДоступныхПараметров.ИмяПараметра = ИмяПараметраВход);
		СовпадаетПотребитель = (ТекТаблицаДоступныхПараметров.Потребитель = ПотребительВход);
		СовпадаетИсточник = (ТекТаблицаДоступныхПараметров.ИсточникСсылка = ИсточникВход);
		Если НЕ (СовпадаетИмяПараметра И СовпадаетПотребитель И СовпадаетИсточник) Тогда
			НоваяСтрока = НоваяТаблицаДоступныхПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаДоступныхПараметров);
		Иначе
			СтруктураДанныхСтроки.Вставить("ИдентификаторОтбора", ТекТаблицаДоступныхПараметров.ИдентификаторОтбора);
			СтруктураДанныхСтроки.Вставить("ТипЗначения", ТекТаблицаДоступныхПараметров.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	// Добавим новые строки с параметром.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяПараметра", ИмяПараметраВход);
	СтруктураПоиска.Вставить("Потребитель", ПотребительВход);
	СтруктураПоиска.Вставить("ИсточникСсылка", ИсточникВход);
	НайденныеСтроки = ТаблицаСохраненныхДоступныхПараметровВход.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		НоваяСтрока = НоваяТаблицаДоступныхПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденныеСтроки);
		НовыйИдентификаторОтбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "ИдентификаторОтбора", "");
		НовыйТипЗначения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "ТипЗначения", Новый СписокЗначений);
		НоваяСтрока.ИдентификаторОтбора	 = НовыйИдентификаторОтбора;
		НоваяСтрока.ТипЗначения			 = НовыйТипЗначения;
	КонецЦикла;	
	// Загрузим готовую таблицу назад.
	ТаблицаДоступныхПараметров.Загрузить(НоваяТаблицаДоступныхПараметров);
КонецПроцедуры		// ВосстановитьСохраненныеЗначенияПараметров()

// Рекурсивно осуществляет поиск идентификатора ИдентификаторОтбораВход
// в узле дерева УзелВход, записывая итоговый результат в МассивРезультатИзм.
// Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаКлиенте
Процедура ВыполнитьПоискОтборовПоИдентификатору(УзелВход, ИдентификаторОтбораВход, МассивРезультатИзм, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекЭлементы Из УзелВход.ПолучитьЭлементы() Цикл
		Если ИдентификаторОтбораВход = ТекЭлементы.ИдентификаторОтбора Тогда
			МассивРезультатИзм.Добавить(ТекЭлементы);
			Прервать;
		Иначе
			ВыполнитьПоискОтборовПоИдентификатору(ТекЭлементы, ИдентификаторОтбораВход, МассивРезультатИзм, ГлубинаРекурсииВход + 1);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры		// ВыполнитьПоискОтборовПоИдентификатору()

// Возвращает массив строк дерева отборов по идентификатору ИдентификаторОтбораВход.
&НаКлиенте
Функция ПолучитьМассивОтборовПоИдентификатору(ИдентификаторОтбораВход)
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(ИдентификаторОтбораВход) Тогда
		ВыполнитьПоискОтборовПоИдентификатору(ДеревоОтборов, ИдентификаторОтбораВход, РезультатФункции);
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивОтборовПоИдентификатору()

// Возвращает ссылку на источник данных по строке дерева отборовСтрокаДереваОтборовВход,
// содержащую ресурс этого источника.
&НаКлиенте
Функция ПолучитьИсточникДанныхСтрокиОтбора(СтрокаДереваОтборовВход)
	ПустойИсточник = ПредопределенноеЗначение("Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка");
	РезультатФункции = ПустойИсточник;
	Если ЗначениеЗаполнено(СтрокаДереваОтборовВход.ИсточникСсылка) Тогда
		РезультатФункции = СтрокаДереваОтборовВход.ИсточникСсылка;
	Иначе
		Если Лев(СтрокаДереваОтборовВход.ПолныйПуть, 10) = "Источники." Тогда
			РодительИсточника = СтрокаДереваОтборовВход.ПолучитьРодителя();
			Если РодительИсточника <> Неопределено Тогда
				РезультатФункции = РодительИсточника.ИсточникСсылка;
			Иначе
				РезультатФункции = ПустойИсточник;		// Не удалось получить родителя.
			КонецЕсли;
		Иначе
			РезультатФункции = ПустойИсточник;		// Не источник данных.
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьИсточникДанныхСтрокиОтбора()

// Возвращает текстовое представление источника перетаскиваняи дерева отборов.
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДеревоОтборов()
	РезультатФункции = "ДеревоОтборов";
	Возврат РезультатФункции;
КонецФункции		 // ПредставлениеДеревоОтборов()

// Возвращает текстовое представление источника перетаскиваняи таблицы переходов.
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТаблицаПереходов()
	РезультатФункции = "ТаблицаПереходов";
	Возврат РезультатФункции;
КонецФункции		 // ПредставлениеТаблицаПереходов()

&НаКлиенте
Процедура УстановитьОтображениеДействия(ИдентификаторСтроки)
	
	ТекущаяСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока.ЯвляетсяУсловием Тогда
		Если ТекущаяСтрока.ОбработкаУсловия = 0 Тогда
			ТекущаяСтрока.ОтображениеДействия = 0;
			ТекущаяСтрока.ОтображениеДействияТекст = ?(ТекущаяСтрока.УсловиеДействие = ПараметрическоеУсловие, Нстр("ru = 'Если выполняются'"), "Если");
		ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 1 Тогда
			ТекущаяСтрока.ОтображениеДействия = 4;
			ТекущаяСтрока.ОтображениеДействияТекст = "Тогда";
		ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 2 Тогда
			ТекущаяСтрока.ОтображениеДействия = 5;
			ТекущаяСтрока.ОтображениеДействияТекст = "Иначе";
		ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 3 Тогда
			ТекущаяСтрока.ОтображениеДействия = 6;
			ТекущаяСтрока.ОтображениеДействияТекст = "Выбор";
		ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 4 Тогда
			ТекущаяСтрока.ОтображениеДействияТекст = ?(ТекущаяСтрока.УсловиеДействие = ПараметрическоеУсловие, Нстр("ru = 'Когда выполняются'"), "Когда");
			ТекущаяСтрока.ОтображениеДействия = 7;
		ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 5 Тогда
			ТекущаяСтрока.ОтображениеДействияТекст = "Иначе";
			ТекущаяСтрока.ОтображениеДействия = 8;
		ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 6 Тогда
			ТекущаяСтрока.ОтображениеДействияТекст = "Пока";
			ТекущаяСтрока.ОтображениеДействия = 0;
	    ИначеЕсли ТекущаяСтрока.ОбработкаУсловия = 7 Тогда
			ТекущаяСтрока.ОтображениеДействияТекст = "Цикл";
			ТекущаяСтрока.ОтображениеДействия = 0;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ОтображениеДействияТекст = Нстр("ru = 'Выполнить действие: '");
		РезультатПоиска = СписокВозможныхДействий.НайтиПоЗначению(ТекущаяСтрока.УсловиеДействие);
		Если РезультатПоиска <> Неопределено Тогда
			ТекущаяСтрока.ОтображениеДействия = Число(РезультатПоиска.Представление);
		Иначе
			ТекущаяСтрока.ОтображениеДействия = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеДействияДляСтрокиДерева(ТекущийЭлемент)
	
	ЭлементыДерева = ТекущийЭлемент.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		УстановитьОтображениеДействия(ЭлементДерева.ПолучитьИдентификатор());
		УстановитьОтображениеДействияДляСтрокиДерева(ЭлементДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиЗначениеКТипу(ИдентификаторСтроки,ИмяТипа)
	
	ТекущиеДанные = Неопределено;
	Если ТипЗнч(ИдентификаторСтроки) = Тип("Число") Тогда
		ТекущиеДанные = ТабличноеПолеПерехода.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		ТекущиеДанные = ИдентификаторСтроки;
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТабличноеПолеПереходаЗначениеОтбора.ВыбиратьТип = Ложь;
		Если ТекущиеДанные.ЯвляетсяУсловием = 0 Тогда	
			ОписаниеТипов          = Новый ОписаниеТипов("СправочникСсылка.ЭтапыУниверсальныхПроцессов");
			ТекЗначение            = ТекущиеДанные.Значение;
			ТекущиеДанные.Значение = ОписаниеТипов.ПривестиЗначение(ТекЗначение);	
		Иначе
			Если ИмяТипа <> Тип("Неопределено")  Тогда	 //Простой тип
				Если ИмяТипа[0].Значение = Тип("Число") 
					ИЛИ ИмяТипа[0].Значение = Тип("Строка") 
						ИЛИ ИмяТипа[0].Значение = Тип("Дата") 
						   ИЛИ ИмяТипа[0].Значение = Тип("Булево") Тогда
					ОписаниеТипов = Новый ОписаниеТипов(Строка(ИмяТипа[0].Значение));
					
				ИначеЕсли ИмяТипа[0].Значение <> "Неопределено" Тогда
														
					ИмяТипаИсхСтрока 	= Строка(ИмяТипа[0].Значение);
					ПерваяТочка 		= СтрНайти(ИмяТипаИсхСтрока,".");
					
					Если ЗначениеЗаполнено(ИмяТипаИсхСтрока) И ПерваяТочка>0 Тогда 
						ИмяТипаСтрокаНов = Лев(ИмяТипаИсхСтрока,ПерваяТочка-1)+"Ссылка"+Сред(ИмяТипаИсхСтрока,ПерваяТочка,СтрДлина(ИмяТипаИсхСтрока));
						ИмяТипаСтрокаНов = СтрЗаменить(ИмяТипаСтрокаНов, "СсылкаСсылка", "Ссылка");
						ОписаниеТипов = Новый ОписаниеТипов(ИмяТипаСтрокаНов);	
					Иначе
						ОписаниеТипов = Новый ОписаниеТипов("Неопределено");	
					КонецЕсли;
					
				Иначе
					ОписаниеТипов = Новый ОписаниеТипов("Неопределено");					
				КонецЕсли;
			Иначе
				ОписаниеТипов = Новый ОписаниеТипов("Неопределено");	
			КонецЕсли;
		КонецЕсли;
	
		ТекСпособСравнения = ТекущиеДанные.Значение;
		ЭтоСравнениеВСписке				 = (ТекСпособСравнения = ВидСравнения.ВСписке);
		ЭтоСравнениеНеВСписке			 = (ТекСпособСравнения = ВидСравнения.НеВСписке);
		ЭтоСравнениеВСпискеПоИерархии	 = (ТекСпособСравнения = ВидСравнения.ВСпискеПоИерархии);
		ЭтоСравнениеНеВСпискеПоИерархии	 = (ТекСпособСравнения = ВидСравнения.НеВСпискеПоИерархии);
		ЭтоСравнениеСоСписком = (ЭтоСравнениеВСписке ИЛИ ЭтоСравнениеНеВСписке ИЛИ ЭтоСравнениеВСпискеПоИерархии ИЛИ ЭтоСравнениеНеВСпискеПоИерархии);
		Если ЭтоСравнениеСоСписком Тогда
			
			ОписаниеСписок = Новый ОписаниеТипов("СписокЗначений");
			ТекЗначение = ОписаниеСписок.ПривестиЗначение(ТекущиеДанные.ЗначениеОтбора);
			ТекущиеДанные.ЗначениеОтбора = ТекЗначение;
			ТекущиеДанные.ЗначениеОтбора.ТипЗначения = ОписаниеТипов;
			
		Иначе
			Если ИмяТипа <> Тип("Неопределено") Тогда
				Если ЗначениеЗаполнено(ИмяТипа[0].Значение) Тогда
					ТекЗначение = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.ЗначениеОтбора);
					ТекущиеДанные.ЗначениеОтбора = ТекЗначение;
					
					Если ИмяТипа.Количество() > 1 тогда
						ТекущиеДанные.ЗначениеОтбора = Неопределено;
						Элементы.ТабличноеПолеПереходаЗначениеОтбора.ВыбиратьТип = Истина;
					КонецЕсли;
					
					МассивТипов = Новый Массив;
					
					Для Каждого ТипЗначения Из ИмяТипа Цикл
						
						Если ТипЗнч(ТипЗначения.Значение) = Тип("Строка") тогда
							ИмяТипаИсхСтрока = СокрЛП(ТипЗначения.Значение);
							ПерваяТочка = СтрНайти(ИмяТипаИсхСтрока, ".");
							
							Если ЗначениеЗаполнено(ИмяТипаИсхСтрока) И ПерваяТочка > 0 Тогда 
								ИмяТипаСтрокаНов = Лев(ИмяТипаИсхСтрока, ПерваяТочка - 1) + "Ссылка" + Сред(ИмяТипаИсхСтрока, ПерваяТочка, СтрДлина(ИмяТипаИсхСтрока));
								ИмяТипаСтрокаНов = СтрЗаменить(ИмяТипаСтрокаНов, "СсылкаСсылка", "Ссылка");
								МассивТипов.Добавить(Тип(ИмяТипаСтрокаНов));
							КонецЕсли;
						ИначеЕсли ТипЗнч(ТипЗначения.Значение) = Тип("Тип") тогда
							МассивТипов.Добавить(ТипЗначения.Значение);
						КонецЕсли;
						
					КонецЦикла;
					
					Элементы.ТабличноеПолеПереходаЗначениеОтбора.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
										
				Иначе
					Элементы.ТабличноеПолеПереходаЗначениеОтбора.ВыбиратьТип = Истина;
				КонецЕсли;
			Иначе
				ТекущиеДанные.ЗначениеОтбора = Неопределено;
				Элементы.ТабличноеПолеПереходаЗначениеОтбора.ВыбиратьТип = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиВХранилище(ИдентификаторФормыВладельца)
	
	Вн_ТабличноеПолеПерехода = РеквизитФормыВЗначение("ТабличноеПолеПерехода");
	Вн_ТабличноеПолеПерехода.Колонки.Удалить("ОтображениеДействияТекст");
	ПереходыТаблица = РеквизитФормыВЗначение("ТабличноеПолеПерехода");
	ПараметрыТаблица = РеквизитФормыВЗначение("ТаблицаДоступныхПараметров");
	АдресПереходов = ПоместитьВоВременноеХранилище(ПереходыТаблица, ИдентификаторФормыВладельца);
	АдресПараметров = ПоместитьВоВременноеХранилище(ПараметрыТаблица, ИдентификаторФормыВладельца);
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("АдресПереходов", АдресПереходов);
	СтруктураВозврата.Вставить("АдресПараметров", АдресПараметров);

	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюВариантовОтбора(ВидимостьВариантов)
	
	ОтображатьВариантыОтборов = ВидимостьВариантов;
	Элементы.ТабличноеПолеПереходаОтобразитьУсловия.Пометка = ОтображатьВариантыОтборов;
	Элементы.ДеревоОтборов.Видимость = ОтображатьВариантыОтборов;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСтрокуВыбора(ИдентификаторСтроки)
	ТекСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекСтрока.ЯвляетсяУсловием И ТекСтрока.ОбработкаУсловия = 3 Тогда
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
	РодительСтроки = ТекСтрока.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОпределитьСтрокуВыбора(РодительСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВставитьУсловие(ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		НоваяСтрока = ТабличноеПолеПерехода.ПолучитьЭлементы().Добавить();
	Иначе
		ТекСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекСтрока = Неопределено Тогда
			НоваяСтрока = ТабличноеПолеПерехода.ПолучитьЭлементы().Добавить();
		Иначе
			Если ТекСтрока.ЯвляетсяУсловием Тогда
				Если ТекСтрока.ОбработкаУсловия = 0 ИЛИ ТекСтрока.ОбработкаУсловия = 3 Тогда
					ТекРодитель = ТекСтрока.ПолучитьРодителя();
					
					Если ТекРодитель = Неопределено Тогда
						ТекРодитель = ТабличноеПолеПерехода;
					КонецЕсли;
					СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
					Индекс = СтрокиРодителя.Индекс(ТекСтрока);
					НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
				Иначе
					НоваяСтрока = ТекСтрока.ПолучитьЭлементы().Вставить(0);
				КонецЕсли;
			Иначе
				
				ТекРодитель = ТекСтрока.ПолучитьРодителя();
				Если ТекРодитель = Неопределено Тогда
					ТекРодитель = ТабличноеПолеПерехода;
				КонецЕсли;
				
				СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
				Индекс = СтрокиРодителя.Индекс(ТекСтрока);
				НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.ЯвляетсяУсловием = Истина;
	НоваяСтрока.ОбработкаУсловия = 0;
	СтрокаИстина = НоваяСтрока.ПолучитьЭлементы().Добавить();
	СтрокаИстина.ЯвляетсяУсловием = Истина;
	СтрокаИстина.ОбработкаУсловия = 1;
	СтрокаЛожь = НоваяСтрока.ПолучитьЭлементы().Добавить();
	СтрокаЛожь.ЯвляетсяУсловием = Истина;
	СтрокаЛожь.ОбработкаУсловия = 2;
	
	УстановитьОтображениеДействия(НоваяСтрока.ПолучитьИдентификатор());
	УстановитьОтображениеДействия(СтрокаИстина.ПолучитьИдентификатор());
	УстановитьОтображениеДействия(СтрокаЛожь.ПолучитьИдентификатор());
	
	Элементы.ТабличноеПолеПерехода.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ВставитьВыбор(ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		НоваяСтрока = ТабличноеПолеПерехода.ПолучитьЭлементы().Добавить();
	Иначе
		
		ТекСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекСтрока.ЯвляетсяУсловием Тогда
			Если ТекСтрока.ОбработкаУсловия = 0 ИЛИ ТекСтрока.ОбработкаУсловия = 3 Тогда
				ТекРодитель = ТекСтрока.ПолучитьРодителя();
				Если ТекРодитель = Неопределено Тогда
					ТекРодитель = ТабличноеПолеПерехода;
				КонецЕсли;
				СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
				Индекс = СтрокиРодителя.Индекс(ТекСтрока);
				НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
			Иначе
				НоваяСтрока = ТекСтрока.ПолучитьЭлементы().Вставить(0);
			КонецЕсли;
		Иначе
			
			ТекРодитель = ТекСтрока.ПолучитьРодителя();
			Если ТекРодитель = Неопределено Тогда
				ТекРодитель = ТабличноеПолеПерехода;
			КонецЕсли;
			
			СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
			Индекс = СтрокиРодителя.Индекс(ТекСтрока);
			НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
			
		КонецЕсли;
		
	КонецЕсли;
	// Строка "Выбор".
	НоваяСтрока.ЯвляетсяУсловием = Истина;
	НоваяСтрока.ОбработкаУсловия = 3;
	УстановитьОтображениеДействия(НоваяСтрока.ПолучитьИдентификатор());
	// Строка "Когда".
	СтрокаКогда = НоваяСтрока.ПолучитьЭлементы().Добавить();
	СтрокаКогда.ЯвляетсяУсловием = Истина;
	СтрокаКогда.ОбработкаУсловия = 4;
	УстановитьОтображениеДействия(СтрокаКогда.ПолучитьИдентификатор());
	// Строка "Иначе".
	СтрокаИначе = НоваяСтрока.ПолучитьЭлементы().Добавить();
	СтрокаИначе.ЯвляетсяУсловием = Истина;
	СтрокаИначе.ОбработкаУсловия = 5;
	УстановитьОтображениеДействия(СтрокаИначе.ПолучитьИдентификатор());
	
	Элементы.ТабличноеПолеПерехода.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	Элементы.ТабличноеПолеПерехода.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Функция ВставитьУсловиеВыбора(ИдентификаторСтроки)
	
	ТекСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекСтрока.ОбработкаУсловия = 3 Тогда
		НоваяСтрока = ТекСтрока.ПолучитьЭлементы().Вставить(0);
	ИначеЕсли ТекСтрока.ОбработкаУсловия = 4 Тогда
		ТекРодитель = ТекСтрока.ПолучитьРодителя();
		
		Если ТекРодитель = Неопределено Тогда
			ТекРодитель = ТабличноеПолеПерехода;
		КонецЕсли;
		СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
		Индекс   = СтрокиРодителя.Индекс(ТекСтрока);
		НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
		
	ИначеЕсли ТекСтрока.ОбработкаУсловия = 5 Тогда
		
		ТекРодитель = ТекСтрока.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			ТекРодитель = ТабличноеПолеПерехода;
		КонецЕсли;
		
		СтрокиРодителя = ТекРодитель.ПолучитьЭлементы();
		Индекс   = СтрокиРодителя.Индекс(ТекСтрока);
		НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока.ЯвляетсяУсловием = Истина;
	НоваяСтрока.ОбработкаУсловия = 4;
	НоваяСтрока.ИдентификаторПерехода = Строка(Новый УникальныйИдентификатор);
	УстановитьОтображениеДействия(НоваяСтрока.ПолучитьИдентификатор());
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтборовПередРазворачиванием(Элемент, Строка, Отказ)
	
	ПередРазворачиваниемСтрокиДереваПолейОтборов(Элемент, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередРазворачиваниемСтрокиДереваПолейОтборов(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если СтрокаРазворота.ТипПоля <> "Параметры"  Тогда
		 Возврат;
	КонецЕсли;
		
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
			
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);

	ПередРазворачиваниемСтрокиРеквизитовАналитики(СтруктураСтрока);	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	
	Для Каждого СтрокаКДобавлению ИЗ ДеревоОтборовКэш.ПолучитьЭлементы() Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.ПолучитьЭлементы().Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению.ПолучитьЭлементы(),НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПередРазворачиваниемСтрокиДереваПолейИсточника() 
 
&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ПолныйПуть",				    ДанныеСтрокиАналитики.ПолныйПуть);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.ПолучитьЭлементы().Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению.ПолучитьЭлементы(),НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки 

&НаСервере
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(СтруктураСтрока) 
	
    МассивОбъектовБД = Новый Массив;
	
	Для Каждого СтрТип Из СтруктураСтрока.ТипЗначения Цикл 
		
		Если СтрНайти(СтрТип.Значение,"Справочник.")>0 Тогда
			
			ОбъектИмя = СтрЗАменить(СтрТип.Значение,"Справочник.","");
			ОбъектБД = Справочники.СправочникиБД.НайтиПоНаименованию(ОбъектИмя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		ИначеЕсли СтрНайти(СтрТип.Значение,"Документ.")>0 Тогда
			
			ОбъектИмя = СтрЗАменить(СтрТип.Значение,"Документ.","");
			ОбъектБД = Справочники.ДокументыБД.НайтиПоНаименованию(ОбъектИмя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
				
		ИначеЕсли СтрНайти(СтрТип.Значение,"Перечисление.")>0 Тогда
			
			ОбъектИмя = СтрЗАменить(СтрТип.Значение,"Перечисление.","");
			ОбъектБД = Справочники.ПеречисленияБД.НайтиПоНаименованию(ОбъектИмя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
				
		ИначеЕсли СтрНайти(СтрТип.Значение,"ПланСчетов.")>0 Тогда
			
			ОбъектИмя = СтрЗАменить(СтрТип.Значение,"ПланСчетов.","");
			ОбъектБД = Справочники.ПланыСчетовБД.НайтиПоНаименованию(ОбъектИмя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		КонецЕсли;
		
		МассивОбъектовБД.Добавить(ОбъектБД);	
		
	Конеццикла;	
	
	
	Если  ОбъектБД = Неопределено Тогда
	      Возврат;
	КонецЕсли;

	СтрокиКДобавлению = "";
	ДеревоОтборов_ = РеквизитФормыВЗначение("ДеревоОтборовКэш");
	ДеревоОтборов_.Строки.Очистить();
	
			  
	Для Каждого ОбъектБД Из МассивОбъектовБД Цикл 
		Для Каждого СтрРеквизит ИЗ ОбъектБД.Реквизиты Цикл
			
			СтрокаПоказателей                 	= ДеревоОтборов_.Строки.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
			СтрокаПоказателей.ТипПоля 	= "Параметры";
			СтрокаПоказателей.Элемент = СтрРеквизит.Синоним;
			СтрокаПоказателей.ПолныйПуть = СтруктураСтрока.ПолныйПуть+"."+СтрРеквизит.Имя;
			СтрокаПоказателей.ИндексКартинки =10;
			
			Если СтрРеквизит.Имя="Ссылка" Тогда
				
				Если ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.ДокументыБД") ИЛИ ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.СправочникиБД") Тогда
					
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,?(ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.СправочникиБД"),"Справочник","Документ")+"."+ОбъектБД.Наименование,Справочники.ТипыБазДанных.ТекущаяИБ);
					
				КонецЕсли;
				
			Иначе
								
				Если ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.ДокументыБД") ИЛИ ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.СправочникиБД") Тогда
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных, Справочники.ТипыБазДанных.ТекущаяИБ);
				Иначе
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, "", Справочники.ТипыБазДанных.ТекущаяИБ);
				КонецЕсли;
								
			КонецЕсли;
			
			Если (СтрокаПоказателей.ТипМетаДанных="Справочник" ИЛИ СтрокаПоказателей.ТипМетаДанных="Документ" ИЛИ СтрокаПоказателей.ТипЗначения.Количество()>1)  Тогда 
				// Добавим строку для дальнейшего раскрытия
				
				НоваяСтрока=СтрокаПоказателей.Строки.Добавить();
				НоваяСтрока.ИндексКартинки =10;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		ОписаниеТиповТабличныеЧастиБД = Новый ОписаниеТипов("СправочникСсылка.ТабличныеЧастиБД");
		
		ТабличныеЧасти = Новый ДеревоЗначений();
		ТабличныеЧасти.Колонки.Добавить("Имя", ОписаниеТиповСтрока);
		ТабличныеЧасти.Колонки.Добавить("Синоним", ОписаниеТиповСтрока);
		ТабличныеЧасти.Колонки.Добавить("ТипДанных", ОписаниеТиповСтрока);
		ТабличныеЧасти.Колонки.Добавить("Ссылка", ОписаниеТиповТабличныеЧастиБД);
		
		ЗаполнитьДеревоТЧ(ОбъектБД, ТабличныеЧасти);
		ДополнительныеРеквизиты = ТабличныеЧасти.Строки.Найти("ДополнительныеРеквизиты");
		
		//Дополнительные реквизиты
		Если ДополнительныеРеквизиты <> Неопределено тогда
			
			ЗапросПоДопРеквизитамИСведениям = Новый Запрос("ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Наименование = &Наименование");
			
			ЗапросПоДопРеквизитамИСведениям.УстановитьПараметр("Наименование", Строка(ОбъектБД));
			ВыборкаПоДопРеквизитамИСведениям = ЗапросПоДопРеквизитамИСведениям.Выполнить().Выбрать();
			
			Пока ВыборкаПоДопРеквизитамИСведениям.Следующий() Цикл
				
				СвойствоДопРеквизита = ВыборкаПоДопРеквизитамИСведениям.Свойство;
				ИмяДопРеквизита = СвойствоДопРеквизита.ИдентификаторДляФормул;
				
				СтрокаПоказателей = ДеревоОтборов_.Строки.Добавить();
				СтрокаПоказателей.ПолеБД = ИмяДопРеквизита;
				СтрокаПоказателей.НаименованиеБД = ИмяДопРеквизита;
				СтрокаПоказателей.ТипПоля = "Параметры";
				СтрокаПоказателей.Элемент = ИмяДопРеквизита;
				СтрокаПоказателей.ПолныйПуть = СтруктураСтрока.ПолныйПуть + "." + ИмяДопРеквизита;
				СтрокаПоказателей.ИндексКартинки = 10;
				
				СтрокаТипов = "";
				
				Для Каждого ТипСвойства Из СвойствоДопРеквизита.ТипЗначения.Типы() Цикл				
					ИмяТипаСвойства = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипСвойства);
					ИмяТипаСвойства = СтрЗаменить(ИмяТипаСвойства, "Ссылка.", ".");
					
					СтрокаТипов = ?(СтрокаТипов = "", ИмяТипаСвойства, СтрокаТипов + ";" + ИмяТипаСвойства);
				КонецЦикла;
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрокаТипов, Справочники.ТипыБазДанных.ТекущаяИБ);
				
			КонецЦикла;
		КонецЕсли;
		
		//Дополнительные сведения
		ЗапросПоДопРеквизитамИСведениям = Новый Запрос("ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = &Ссылка");
		
		ЗапросПоДопРеквизитамИСведениям.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию(ОбъектБД, Истина));
		ВыборкаПоДопРеквизитамИСведениям = ЗапросПоДопРеквизитамИСведениям.Выполнить().Выбрать();
		
		Пока ВыборкаПоДопРеквизитамИСведениям.Следующий() Цикл
			
			СвойствоДопРеквизита = ВыборкаПоДопРеквизитамИСведениям.Свойство;
			ИмяДопРеквизита = СвойствоДопРеквизита.ИдентификаторДляФормул;
			
			СтрокаПоказателей = ДеревоОтборов_.Строки.Добавить();
			СтрокаПоказателей.ПолеБД = ИмяДопРеквизита;
			СтрокаПоказателей.НаименованиеБД = ИмяДопРеквизита;
			СтрокаПоказателей.ТипПоля = "Параметры";
			СтрокаПоказателей.Элемент = ИмяДопРеквизита;
			СтрокаПоказателей.ПолныйПуть = СтруктураСтрока.ПолныйПуть + "." + ИмяДопРеквизита;
			СтрокаПоказателей.ИндексКартинки = 10;
			
			СтрокаТипов = "";
			
			Для Каждого ТипСвойства Из СвойствоДопРеквизита.ТипЗначения.Типы() Цикл				
				ИмяТипаСвойства = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипСвойства);
				ИмяТипаСвойства = СтрЗаменить(ИмяТипаСвойства, "Ссылка.", ".");
				
				СтрокаТипов = ?(СтрокаТипов = "", ИмяТипаСвойства, СтрокаТипов + ";" + ИмяТипаСвойства);
			КонецЦикла;
			
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрокаТипов, Справочники.ТипыБазДанных.ТекущаяИБ);
			
		КонецЦикла;
				
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ДеревоОтборов_,"ДеревоОтборовКэш");
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

Процедура ЗаполнитьДеревоТЧ(Объект,ТабличныеЧасти) 
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабличныеЧастиБД.Имя,
	|	ТабличныеЧастиБД.Синоним,
	|	ТабличныеЧастиБД.Реквизиты.(
	|		Синоним,
	|		ТипДанных,
	|		Имя
	|	) КАК Реквизиты,
	|	ТабличныеЧастиБД.Ссылка
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	ТабличныеЧастиБД.Владелец = &Владелец
	|	И НЕ ТабличныеЧастиБД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаТЧ = ТабличныеЧасти.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Результат);
		
		РеквизитыТЧ = Результат.Реквизиты.Выбрать();
		
		Пока РеквизитыТЧ.Следующий() Цикл
			
			СтрокаРеквизит = СтрокаТЧ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизит, РеквизитыТЧ);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВернутьДеревоТЧ()

&НаКлиенте
Процедура ТабличноеПолеПереходаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТабличноеПолеПерехода.ДанныеСтроки(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока);
	Если ТипЗнч(ТекущиеДанные.УсловиеДействие) = Тип("ПеречислениеСсылка.ДействияЭтапа") Тогда
		ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Владелец, ПометкаУдаления", ШаблонПроцесса, Ложь)), Элемент);
	Иначе
		Для Каждого СтрокаСоставаВыбора Из ТаблицаВозможныхВыборов Цикл
			//Если СтрокаСоставаВыбора.ТипУсловия.НайтиПоЗначению(ТекущиеДанные.УсловиеДействие) <> Неопределено Тогда
				ДанныеВыбора = СтрокаСоставаВыбора.СписокВыбора;
				Возврат;
			//КонецЕсли;
		КонецЦикла;
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ВидСравнения.Равно);
		Если ТекущиеДанные.УсловиеДействие <> ПараметрическоеУсловие Тогда
			ДанныеВыбора.Добавить(ВидСравнения.НеРавно);
			ДанныеВыбора.Добавить(ВидСравнения.ВСписке);
			ДанныеВыбора.Добавить(ВидСравнения.НеВСписке);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

// Отображает в таблице значений параметров параметры, заданные идентификаторами
// ИдентификаторОтбораВход, ИдентификаторПереходаВход.
&НаКлиенте
Процедура ОбновитьТаблицуПараметров(ИдентификаторОтбораВход, ИдентификаторПереходаВход)
	ТаблицаДоступныхПараметровКеш.Очистить();
	МассивОтборов = ПолучитьМассивОтборовПоИдентификатору(ИдентификаторОтбораВход);
	Для Каждого текПараметр Из МассивОтборов Цикл
		ТекИсточник = текПараметр.ИсточникСсылка;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Потребитель", текПараметр.Элемент);
		Если ЗначениеЗаполнено(ТекИсточник) Тогда
			СтруктураПоиска.Вставить("ИсточникСсылка", ТекИсточник);
		Иначе
			// Источник не задан. Не требуется отбор.
		КонецЕсли;
		СтруктураПоиска.Вставить("ИдентификаторОтбора", ИдентификаторОтбораВход);
		СтруктураПоиска.Вставить("ИдентификаторПерехода", ИдентификаторПереходаВход);
		НайденныеСтроки = ТаблицаДоступныхПараметров.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			НовыйПараметр = ТаблицаДоступныхПараметровКеш.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекНайденныеСтроки);						
			НовыйПараметр.ИдентификаторПерехода	 = ИдентификаторПереходаВход;
			НовыйПараметр.ИмяПараметра			 = ТекНайденныеСтроки.ИмяПараметра;
			НовыйПараметр.ИсточникСсылка		 = ТекИсточник;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры		// ОбновитьТаблицуПараметров()

&НаКлиенте
Процедура ТаблицаДоступныхПараметровПриИзменении(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяПараметра", ТекДанные.ИмяПараметра);
	СтруктураПоиска.Вставить("Потребитель", ТекДанные.Потребитель);
	СтруктураПоиска.Вставить("ИдентификаторПерехода", ТекДанные.ИдентификаторПерехода);
	дПараметры = ТаблицаДоступныхПараметров.НайтиСтроки(СтруктураПоиска);
	Если дПараметры.Количество() > 0 Тогда
		ПерваяСтрока = дПараметры[0];
		ПерваяСтрока.ЗначениеПараметра	 = ТекДанные.ЗначениеПараметра;
		ПерваяСтрока.ТипОтбораПараметра	 = ТекДанные.ТипОтбораПараметра;	
		ПерваяСтрока.ПараметрОбъекта     = ТекДанные.ПараметрОбъекта;
	Иначе
		НоваяСтрока = ТаблицаДоступныхПараметров.Добавить();
		НоваяСтрока.ЗначениеПараметра		 = ТекДанные.ЗначениеПараметра;
		НоваяСтрока.ТипОтбораПараметра		 = ТекДанные.ТипОтбораПараметра;	
		НоваяСтрока.ИдентификаторПерехода	 = ТекДанные.ИдентификаторПерехода;	
		ПерваяСтрока.ПараметрОбъекта    	 = ТекДанные.ПараметрОбъекта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииЯчейки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.ДеревоОтборовУдалитьИсточник.Доступность = Элемент.ТекущиеДанные.ТипПоля = "Источник";
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПолучениеНовогоИсточника(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"),БиблиотекаКартинок.ДлительнаяОперация48);
	ОбновитьДеревоОтборов();
	ЭлементыДерева = ДеревоОтборов.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
        Элементы.ДеревоОтборов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
    КонецЦикла;

КонецПроцедуры

// Переносит параметры из таблицы доступных параметров в таблицу исходных параметров.
&НаСервере
Процедура ПеренестиТаблицуИсходныхПараметров()
	ВыгрузкаПараметров = ТаблицаДоступныхПараметров.Выгрузить();
	СверткаПараметров = ВыгрузкаПараметров.Скопировать();
	СверткаПараметров.Свернуть("ИмяПараметра, Потребитель, ТипЗначения, ТипОтбораПараметра, ПараметрОбъекта, КодПараметра, ИдентификаторПерехода, ИсточникСсылка, ИдентификаторОтбора");
	ТаблицаИсходныхПараметров.Загрузить(СверткаПараметров);
КонецПроцедуры		// ПеренестиТаблицуИсходныхПараметров()

&НаСервере
Процедура ОбновитьДеревоОтборов()
	
	ЗначенияПарамтеровУстановленные = РеквизитформыВЗначение("ТаблицаДоступныхПараметров").Скопировать();
	ТаблицаДоступныхПараметров.Очистить();
	
	СтруктураВеток = Новый Структура("Реквизиты,Функции,Источники");
	ДеревоОтборов_ = РеквизитФормыВЗначение("ДеревоОтборов");	
    ДеревоОтборов_.Строки.Очистить();	
	ДеревоОтборов_ = Справочники.ШаблоныУниверсальныхПроцессов.СформироватьДеревоКонтекстаПроцесса(ШаблонПроцесса, ДеревоОтборов_, СтруктураВеток, ТаблицаДоступныхПараметров);
	ПеренестиТаблицуИсходныхПараметров();
	ЗначениеВРеквизитФормы(ДеревоОтборов_,"ДеревоОтборов");

	Для Каждого Стр Из ТаблицаДоступныхПараметров Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КодПараметра",		 Стр.КодПараметра);
		СтруктураПоиска.Вставить("Потребитель",			 Стр.Потребитель);
		СтруктураПоиска.Вставить("ТипОтбораПараметра",	 Стр.ТипОтбораПараметра);
		нПараметр = ЗначенияПарамтеровУстановленные.НайтиСтроки(СтруктураПоиска);
		Если нПараметр.Количество() = 1 Тогда
			
			Стр.ЗначениеПараметра 	=  нПараметр[0].ЗначениеПараметра;
			Стр.ПараметрОбъекта 	=  нПараметр[0].ПараметрОбъекта;
			
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхПараметровЗначениеПараметраНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого кПар из КэшПараметров Цикл
		Элемент.СписокВыбора.Добавить(кПар.Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаЗначениеПриИзменении(Элемент)
	ТекДанные = Элементы.ТабличноеПолеПерехода.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СписокТипов = Новый СписокЗначений;
		НовоеИмяТипа = СокрЛП(ТекДанные.ИмяТипа);
		Если НовоеИмяТипа = "" Тогда
			НовоеИмяТипа = НайтиТип(ТекДанные.ЗначениеОтбора);
		Иначе
			// Значение установлено.
		КонецЕсли;
		СписокТипов.Добавить(НовоеИмяТипа);
		ПривестиЗначениеКТипу(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока, СписокТипов);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаДоступныхПараметровЗначениеПараметра" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТипОтбораПараметра = Элемент.ТекущиеДанные.ТипОтбораПараметра;
		Если ТипОтбораПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеИспользуется") ИЛИ
			  ТипОтбораПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение") ИЛИ
			      ТипОтбораПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений") Тогда
			
			Возврат;
			
		КонецЕсли;	
				
		Если  Элемент.ТекущиеДанные.ПараметрОбъекта  Тогда
			ТекДанные = Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные;
			Если ТекДанные.ТипЗначения.Количество() > 0 Тогда
				ПараметрыФормыВыбораРеквизитов = ПодготовитьПарамтерыФормыВыбораРеквизитов(ТекДанные.ТипЗначения[0].Значение);
				Оповещение = Новый ОписаниеОповещения("ВыборРеквизитаОкончание", ЭтаФорма);
				ОткрытьФорму("РегистрСведений.НастройкиОповещений.Форма.ФормаВыбораРеквизитов", ПараметрыФормыВыбораРеквизитов, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить тип значения для параметра %ИмяПараметра%. Возможно, не задан способ получения значения отбора.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(ТекДанные.ИмяПараметра));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе	
			
			Если Элемент.ТекущиеДанные.ТипОтбораПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений") ИЛИ
				Элемент.ТекущиеДанные.ТипОтбораПараметра = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений") Тогда
				
				Оповещение = Новый ОписаниеОповещения("ВыборРеквизитаОкончание", ЭтаФорма);
				ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.Форма.ФормаВыбораИзСписка",
				ПодготовитьПарамтерыФормыСпискаЗначений() 
				, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
				
			Иначе
				ТекДанные = Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные;
				Если ТекДанные.ТипЗначения.Количество() > 0 Тогда
					Тип = ТекДанные.ТипЗначения[0].Значение; 
					Значение = ТекДанные.ЗначениеПараметра;
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ИдентификаторПерехода", ТекДанные.ИдентификаторПерехода);
					Оповещение = Новый ОписаниеОповещения("ВыборЗначенияОкончание", ЭтаФорма, ДополнительныеПараметры);
					ПоказатьВводЗначения(Оповещение, Значение, "", Тип);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось получить тип значения для параметра %ИмяПараметра%. Возможно, не задан способ получения значения отбора.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(ТекДанные.ИмяПараметра));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;	
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПарамтерыФормыВыбораРеквизитов(ОграничениеТипа)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначениеОповещения",Справочники.КатегорииСобытийОповещений.СобытияСогласования);
	СтруктураПараметров.Вставить("ТипОбъектаОповещения",ШаблонПроцесса.ТипОбъектаСогласования);
	СтруктураПараметров.Вставить("ОграничениеТипа",ОграничениеТипа);
	
	Возврат СтруктураПараметров; 
		
КонецФункции	

Функция ПодготовитьПарамтерыФормыСпискаЗначений()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначениеОповещения",Справочники.КатегорииСобытийОповещений.СобытияСогласования);
	СтруктураПараметров.Вставить("ТипОбъектаОповещения",ШаблонПроцесса.ТипОбъектаСогласования);
	СтруктураПараметров.Вставить("ОграничениеТипа","");
	
	Возврат СтруктураПараметров; 
		
КонецФункции	

Процедура ПометитьТекущийИсточникНаУдаление(ТекущийИсточник)
	
	оИсточник = ТекущийИсточник.ПолучитьОбъект();
	оИсточник.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВопросПередУдалениемИсточникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущийИсточник = Элементы.ДеревоОтборов.ТекущиеДанные.ИсточникСсылка;
		ПометитьТекущийИсточникНаУдаление(ТекущийИсточник);
		ОбновитьДеревоОтборов();
		ЭлементыДерева = ДеревоОтборов.ПолучитьЭлементы();
		
		Для каждого ЭлементДерева Из ЭлементыДерева Цикл
			Элементы.ДеревоОтборов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ДеревоОтборов.ТекущиеДанные.ИндексКартинки = 1 Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", Элементы.ДеревоОтборов.ТекущиеДанные.ИсточникСсылка);
		Оповещение = Новый ОписаниеОповещения("ПолучениеНовогоИсточника", ЭтаФорма);		
		ФормаИД = ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаЭлемента",СтруктураПараметров 
		,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;
	        
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПерехода_ОбычныйЭтапЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		// Убедимся, что выбран этап того же шаблона, что и на форме.
		Если ЗначениеЗаполнено(ШаблонПроцесса) Тогда
			ШаблонВыбранногоЭтапа = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
			Если ШаблонВыбранногоЭтапа <> ШаблонПроцесса Тогда
				ТекстСообщения = НСтр("ru = 'В выбранном этапе (%Этап%) шаблон процесса (%ШаблонЭтапа%) отличается от исходного (%ИсходныйШаблон%). Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ВыбранноеЗначение));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШаблонЭтапа%", Строка(ШаблонВыбранногоЭтапа));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИсходныйШаблон%", Строка(ШаблонПроцесса));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				// Шаблоны совпадают. Проверка успешна.
			КонецЕсли;
		Иначе
			// Нет шаблона. Не проверяем корректность.
		КонецЕсли;
		// Запретим выбор помеченного на удаление этапа.
		ЭтапПомеченНаУдаление = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ПометкаУдаления");
		Если ЭтапПомеченНаУдаление Тогда
			ТекстСообщения = НСтр("ru = 'Выбранный этап (%Этап%) помечен на удаление. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ВыбранноеЗначение));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			Возврат;
		Иначе
			// Этап не помечен на удаление. Выполняем далее.
		КонецЕсли;
	Иначе
		// Выбран не этап шаблона. Не осуществляем проверку.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если (НЕ ЗавершениеРаботы) И (ЭтаФорма.Модифицированность) И (МожноЗакрывать <> Истина) Тогда
		Отказ = Истина; 
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		// Изменений нет. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПередЗакрытиемЗавершение(Результат, Параметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Если ВладелецФормы <> Неопределено Тогда
			МожноЗакрывать = Истина; 
			ОповеститьОВыборе(СохранитьНастройкиВХранилище(ВладелецФормы.УникальныйИдентификатор));
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить владельца текущей формы. Данные не были сохранены.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 	
		МожноЗакрывать = Истина; 
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда 		
		// Пользователь отказался закрывать форму.
	Иначе
		// Неизвестный вариант. Ничего не делаем.
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЭлементУсловия(Команда)
	ТекДанныеИсточник = Элементы.ДеревоОтборов.ТекущиеДанные;
	Если ТекДанныеИсточник <> Неопределено Тогда
		ТекДанныеПриемник = Элементы.ТабличноеПолеПерехода.ТекущиеДанные;
		Если ТекДанныеПриемник <> Неопределено Тогда
			Если ПроверитьПеретаскиваниеУсловия(ТекДанныеПриемник, ТекДанныеИсточник) Тогда
				ТекДанныеПриемник.Значение       		 = ВидСравнения.Равно;
				ТекДанныеПриемник.УсловиеДействие		 = ТекДанныеИсточник.ПолныйПуть;
				ТекДанныеПриемник.ИмяТипа				 = Строка(ТекДанныеИсточник.ТипЗначения[0]);
				ТекДанныеПриемник.ИдентификаторОтбора	 = ТекДанныеИсточник.ИдентификаторОтбора;
				НовыйИсточникДанных = ПолучитьИсточникДанныхСтрокиОтбора(ТекДанныеИсточник);
				ТекДанныеПриемник.ИсточникСсылка = НовыйИсточникДанных;
				ПривестиЗначениеКТипу(ТекДанныеПриемник, ТекДанныеИсточник.ТипЗначения);
			Иначе
				//  Не все условия выполнены. Перетаскивание невозможно.
			КонецЕсли;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаЗначениеОтбораОчистка(Элемент, СтандартнаяОбработка)
	// Очистим доступные типы, предоставим пользователю выбрать тип самостоятельно.
	ТекДанные = Элементы.ТабличноеПолеПерехода.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СписокТипов = Новый СписокЗначений;
		НовоеИмяТипа = "";
		СписокТипов.Добавить(НовоеИмяТипа);
		ПривестиЗначениеКТипу(Элементы.ТабличноеПолеПерехода.ТекущаяСтрока, СписокТипов);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Проверяет возможность перетащить строку с идентификатором ИдентификаторСтрокиИсточникВход
// в строку дерева СтрокаТаблицыПриемникВход. Вовзращает успешность проверки.
&НаКлиенте
Функция ПроверитьПеретаскиваниеУсловия(СтрокаИсточникВход, СтрокаТаблицыПриемникВход)
	РезультатФункции = Истина;
	Если ТипЗнч(СтрокаТаблицыПриемникВход) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если ИсточникПеретаскивания = ПредставлениеДеревоОтборов() Тогда 
			Если (СтрокаТаблицыПриемникВход.Свойство("ПолныйПуть")) И (СтрокаТаблицыПриемникВход.Свойство("ТипЗначения")) И (СтрокаТаблицыПриемникВход.Свойство("ТипПоля")) Тогда
				ТипПоляТек = СокрЛП(СтрокаТаблицыПриемникВход.ТипПоля);
				Если (ТипПоляТек <> "Группа") И (ТипПоляТек <> "Функция") И (ТипПоляТек <> "Источник") Тогда
					ДействиеПриемник = СтрокаИсточникВход.ОтображениеДействияТекст;
					ЭтоСтрокаУсловиеПриемник = ((ДействиеПриемник = "Когда") ИЛИ (ДействиеПриемник = "Если") ИЛИ (ДействиеПриемник = "Пока"));
					ЭтоСтрокаРесурсИсточник = ((ТипПоляТек = "ПолеРесурса") ИЛИ (ТипПоляТек = "Параметры"));
					ПереносРесурсаВнеУсловия = ((ЭтоСтрокаРесурсИсточник) И (НЕ ЭтоСтрокаУсловиеПриемник));
					Если НЕ ПереносРесурсаВнеУсловия Тогда
						РезультатФункции = Истина;
					Иначе
						ТекстСообщения = НСтр("ru = 'Ресурсы разрешено переносить только в строки условий. Операция отменена.'");
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						РезультатФункции = Ложь;
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'Выбор групп запрещён. Операция отменена.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					РезультатФункции = Ложь;
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить параметры источника данных. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Ложь;
			КонецЕсли;
		ИначеЕсли ИсточникПеретаскивания = ПредставлениеТаблицаПереходов() Тогда  
			
		Иначе
			
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПроверитьПеретаскиваниеУсловия()

&НаКлиенте
Процедура ТабличноеПолеПереходаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ТабличноеПолеПерехода.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОбновитьТаблицуПараметров(ТекДанные.ИдентификаторОтбора, ТекДанные.ИдентификаторПерехода);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПереходаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИсточникПеретаскивания = "";
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда      
		ТекущаяСтрока = ТабличноеПолеПерехода.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
		Если ТекущаяСтрока.ОтображениеДействия = 1 Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
			ИсточникПеретаскивания = ПредставлениеТаблицаПереходов();
		Иначе
			Выполнение = Ложь;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	Иначе       
		Выполнение = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры