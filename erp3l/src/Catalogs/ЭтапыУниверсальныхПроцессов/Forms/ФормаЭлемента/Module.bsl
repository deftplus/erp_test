&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияУсловийСогласования();
	УправлениеДоступностью();
	
	Если Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
		ЗаполнитьДоступныеПоляШаблонаОповещения();
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда	
		ДеревоОтборов_ = РеквизитФормыВЗначение("ДеревоОтборов");
		ДеревоОтборов_=Справочники.ШаблоныУниверсальныхПроцессов.СформироватьДеревоКонтекстаПроцесса(Объект.Владелец,ДеревоОтборов_,Новый Структура("Реквизиты,Функции,СистемныеПоля"));
		ЗначениеВРеквизитФормы(ДеревоОтборов_,"ДеревоОтборов");
		ПолеТекстовогоДокументаПроцедура.УстановитьТекст(Объект.ПроцедураПроцесса);
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта Тогда	
		ДеревоОтборов_ = РеквизитФормыВЗначение("ДеревоОтборов");
		ДеревоОтборов_=Справочники.ШаблоныУниверсальныхПроцессов.СформироватьДеревоКонтекстаПроцесса(Объект.Владелец,ДеревоОтборов_,Новый Структура("Реквизиты"));
		Для Каждого дПарамтер Из  ДеревоОтборов_.Строки[0].Строки Цикл
			нПараметр = КэшПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(нПараметр,дПарамтер);
		КонецЦикла;
		
		ЗаполнитьПараметрыЭкспорта();
	КонецЕсли;
	СогласуемыйОбъект = Объект.Владелец.ТипОбъектаСогласования;

	ПрочитатьШаблонОповещения();
	// Для этапов с ответственными добавим пустую строчку ответственных, если таблица пустая.
	Если МодульУправленияПроцессамиУХ.ЭтапСОтветственными(Объект.Ссылка) Тогда
		Если Объект.Утверждающие.Количество() = 0 Тогда
			НоваяСтрокаОтветственные = Объект.Утверждающие.Добавить();
		Иначе	
			// Уже есть ответственные.
		КонецЕсли;
	Иначе
		// Это не этап с ответственными. Не проверяем заполнение табличной части.
	КонецЕсли;
	// Выведем вероятные ошибки по этапу.
	Если (ЗначениеЗаполнено(Объект.Ссылка)) И (НЕ Параметры.ТихийРежим) Тогда
		ТаблицаОшибок = МодульУправленияПроцессамиУХ.ПолучитьТаблицуОшибокЭтапа(Объект.Ссылка);
		Для Каждого ТекТаблицаОшибок Из ТаблицаОшибок Цикл
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекТаблицаОшибок.ТекстовоеОписание);
		КонецЦикла;
	Иначе
		// Новый этап. Не выводим ошибки.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.УсловияСогласования = Новый ХранилищеЗначения(РеквизитФормыВЗначение("ТабличноеПолеПерехода"));
	ТекущийОбъект.ПроцедураПроцесса = ПолеТекстовогоДокументаПроцедура.ПолучитьТекст();
	
	
	Если ТекущийОбъект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта Тогда
		ТекущийОбъект.ЗначенияПараметров.Очистить();
		Для Каждого тСтр Из ТаблицаДоступныхПараметровКеш Цикл
			нПараметр = ТекущийОбъект.ЗначенияПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(нПараметр,тСтр);	
		КонецЦикла;
	КонецЕсли;
	ЗаписатьШаблонОповещения(); 	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.ЭтапыУниверсальныхПроцессов.ОбновитьЭтапыПредшественники(ТекущийОбъект.Ссылка, ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТабличноеПолеПерехода")));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьОтчет", , Объект.Владелец);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВосстановитьНастройкиТаблицыИзВременногоХранилища(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаписатьШаблонОповещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныОповещений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныОповещений КАК ШаблоныОповещений
	|ГДЕ
	|	ШаблоныОповещений.ЭтапПроцесса = &ЭтапПроцесса";
	
	Запрос.УстановитьПараметр("ЭтапПроцесса",Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекущийШаблон = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийШаблон = Выборка.Ссылка;
		
	КонецЦикла;
	
	Если  ТекущийШаблон = Неопределено Тогда
		ТекущийШаблон = Справочники.ШаблоныОповещений.СоздатьЭлемент();
	Иначе   
		ТекущийШаблон = ТекущийШаблон.ПолучитьОбъект();
	КонецЕсли;
	
	ТекущийШаблон.ЭтапПроцесса = Объект.Ссылка;
	ТекущийШаблон.ДатаИзменения = ТекущаяДата();
	ТекстHTML = "";
	ШаблонОповещения.ПолучитьHTML(ТекстHTML,Новый Структура());
	ТекстHTML = СтрЗаменить(ТекстHTML, "body{margin:0;padding:8px;}", "body{margin:0;padding:8px;font-size:11pt;font-family:sans-serif;}");		// Установим шрифт и размер по умолчанию.
	ТекущийШаблон.Шаблон = Новый ХранилищеЗначения(ТекстHTML);
	ТекущийШаблон.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьШаблонОповещения()
	
	   Запрос = Новый Запрос;
	   Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	ШаблоныОповещений.Ссылка КАК Ссылка
	   |ИЗ
	   |	Справочник.ШаблоныОповещений КАК ШаблоныОповещений
	   |ГДЕ
	   |	ШаблоныОповещений.ЭтапПроцесса = &ЭтапПроцесса";
	   
	   Запрос.УстановитьПараметр("ЭтапПроцесса",Объект.Ссылка);
	   
	   Результат = Запрос.Выполнить();
	   Выборка = Результат.Выбрать();
	   
	   ТекущийШаблон = Неопределено;
	   
	   Пока Выборка.Следующий() Цикл
	   
	   	    ТекущийШаблон = Выборка.Ссылка;
	   
	   КонецЦикла;
	   	
	   Если  НЕ ТекущийШаблон = Неопределено Тогда
		   ШаблонОповещения.УстановитьHTML(ТекущийШаблон.Шаблон.Получить(),Новый Структура());
	   КонецЕсли;
	  	   
	   
КонецПроцедуры
   

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипЭтапаПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуУсловногоПерехода(Команда)
	
	Перем АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто,АдресТаблицаДоступныхПараметров, ОбычныйЭтап;
	СохранитьТаблицыВоВременномХранилище(АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто,АдресТаблицаДоступныхПараметров, ОбычныйЭтап);
	СтруктураПараметровФормы = Новый Структура;
	СтруктураПараметровФормы.Вставить("АдресДеревоОтборов", АдресДеревоОтборов);
	СтруктураПараметровФормы.Вставить("АдресТабличноеПолеПереходов", АдресТабличноеПолеПереходов); 
	СтруктураПараметровФормы.Вставить("АдресКэшВидовСубконто", АдресКэшВидовСубконто); 
	СтруктураПараметровФормы.Вставить("ОбычныйЭтап", ОбычныйЭтап); 
	СтруктураПараметровФормы.Вставить("СписокВыбораУсловий", СписокВыбораУсловий); 
	СтруктураПараметровФормы.Вставить("СписокВыбораДействий", СписокВыбораДействий); 
	СтруктураПараметровФормы.Вставить("ШаблонПроцесса", ОБъект.Владелец);
	СтруктураПараметровФормы.Вставить("ТипЭтапа", ОБъект.ТипЭтапа);
	СтруктураПараметровФормы.Вставить("АдресТаблицаДоступныхПараметров", АдресТаблицаДоступныхПараметров);
	ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.Форма.ФормаНастройкиУсловногоПерехода", СтруктураПараметровФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьРазвернутьНажатие(Элемент)
	
	Если Элемент.Картинка = БиблиотекаКартинок.СтрелкаВлевоКрасная Тогда
		Элементы.ГруппаДоступныеПоля.Видимость = Истина;
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправоКрасная;	
	Иначе	
		Элементы.ГруппаДоступныеПоля.Видимость = Ложь;
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВлевоКрасная;
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьРазвернуть1Нажатие(Элемент)
	
	Если Элемент.Картинка = БиблиотекаКартинок.СтрелкаВлевоКрасная Тогда
		Элементы.ГруппаДеревоОтборов.Видимость = Истина;
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправоКрасная;	
	Иначе	
		Элементы.ГруппаДеревоОтборов.Видимость = Ложь;
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВлевоКрасная;
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекСтр = Элементы.ДеревоОтборов.ТекущаяСтрока;
	Если НЕ ТекСтр = Неопределено Тогда
		СтрокаОтбора = ДеревоОтборов.НайтиПоИдентификатору(ТекСтр);
		Если СтрокаОтбора.ТипПоля = "Группа" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ("<%"+Строка(СтрокаОтбора.ПолныйПуть)+"%>");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДоступныеПараметры(Команда)
	
	Элементы.ПолеТекстовогоДокументаПроцедураКонтекстноеМенюПоказатьДоступныеПараметры.Пометка = НЕ Элементы.ПолеТекстовогоДокументаПроцедураКонтекстноеМенюПоказатьДоступныеПараметры.Пометка;
	Элементы.ГруппаПараметры.Видимость = Элементы.ПолеТекстовогоДокументаПроцедураКонтекстноеМенюПоказатьДоступныеПараметры.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПроцедуруЭтапа(Команда)
	
	Элементы.ФормаРедактироватьПроцедуруЭтапа.Пометка = НЕ  Элементы.ФормаРедактироватьПроцедуруЭтапа.Пометка;
	Элементы.ГруппаЭтапов.Видимость = НЕ Элементы.ФормаРедактироватьПроцедуруЭтапа.Пометка;
	Элементы.ГруппаПроцедура.Видимость = Элементы.ФормаРедактироватьПроцедуруЭтапа.Пометка;	
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДоступныхПараметровЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если   Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные.ТипОтбораПараметра = "Значение" Тогда
		Тип = Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные.ТипЗначения[0].Значение; 
		Если СтрНайти(Тип,"Справочник")>0 И  СтрНайти(Тип,"СправочникСсылка")=0 Тогда
			Тип = СтрЗАменить(Тип,"Справочник","СправочникСсылка");
		КонецЕсли;
		Если НЕ Тип = "Произвольный" Тогда
			Элемент.ОграничениеТипа = Новый ОписаниеТипов (Тип);
			
		КонецЕсли;
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.СписокВыбора.Очистить();
	Иначе	
		Элемент.ОграничениеТипа = Новый ОписаниеТипов ("Строка");
		Элемент.РежимВыбораИзСписка = Истина;		
		Элемент.СписокВыбора.Очистить();
		Для Каждого кПар из КэшПараметров Цикл
			Элемент.СписокВыбора.Добавить(кПар.Элемент);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхПараметровЗначениеПараметраНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого кПар из КэшПараметров Цикл
		Элемент.СписокВыбора.Добавить(кПар.Элемент);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область ВспомогательныеПроцедуры                                       

&НаСервере
Процедура ДобавитьЗначениеУсловия(ЗначениеУсловия)
	
	Если (НЕ ЗначениеЗаполнено(ЗначениеУсловия)) ИЛИ ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(ЗначениеУсловия))Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока=Объект.ЗначенияУсловийОтборов.Добавить();
	НоваяСтрока.ЗначениеУсловия=ЗначениеУсловия;
	
КонецПроцедуры // ДобавитьЗначениеУсловия()

&НаСервере
Процедура ВосстановитьНастройкиТаблицыИзВременногоХранилища(АдресХранилища)
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ДеревоПереходов=ПолучитьИзВременногоХранилища(АдресХранилища);			
		УдалитьИзВременногоХранилища(АдресХранилища);
	Иначе			
		
		Если АдресХранилища.Свойство("АдресТекстаПроцедуры") Тогда
			 ПолеТекстовогоДокументаПроцедура = ПолучитьИзВременногоХранилища(АдресХранилища.АдресТекстаПроцедуры);
			 Объект.ЗначенияПараметров.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища.АдресПараметров));
			 Возврат;
		КонецЕсли;

		ДеревоПереходов = ПолучитьИзВременногоХранилища(АдресХранилища.АдресПереходов);
		Объект.ЗначенияПараметров.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища.АдресПараметров));
	КонецЕсли;
		
	МассивУсловий=ДеревоПереходов.Строки.НайтиСтроки(Новый Структура("ЯвляетсяУсловием",1),Истина);	
	Объект.ЗначенияУсловийОтборов.Очистить();
	
	Для Каждого СтрУсловие ИЗ МассивУсловий Цикл
		
		Если ЗначениеЗаполнено(СтрУсловие.ЗначениеОтбора) Тогда
			
			Если ТипЗнч(СтрУсловие.ЗначениеОтбора)=Тип("СписокЗначений") Тогда
				
				Для Каждого УсловиеОтбора ИЗ СтрУсловие.ЗначениеОтбора Цикл
					
					ДобавитьЗначениеУсловия(УсловиеОтбора.Значение);
					
				КонецЦикла;
				
			Иначе
				
				ДобавитьЗначениеУсловия(СтрУсловие.ЗначениеОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПереходов, "ТабличноеПолеПерехода");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицыВоВременномХранилище(АдресДеревоОтборов, АдресТабличноеПолеПереходов, АдресКэшВидовСубконто,АдресТаблицаДоступныхПараметров, ОбычныйЭтап)
	
	АдресДеревоОтборов          = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ДеревоОтборов"), УникальныйИдентификатор);
	АдресТабличноеПолеПереходов = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТабличноеПолеПерехода"), УникальныйИдентификатор);
	АдресКэшВидовСубконто       = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("КэшВидовСубконто"), УникальныйИдентификатор);
	АдресТаблицаДоступныхПараметров = ПоместитьВоВременноеХранилище(Объект.ЗначенияПараметров.Выгрузить(),УникальныйИдентификатор);
	МассивТиповОбычногоЭтапа = Новый Массив;
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта);
	МассивТиповОбычногоЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоИмпорта);
	ОбычныйЭтап = (МассивТиповОбычногоЭтапа.Найти(Объект.ТипЭтапа) <> Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПанелей()
	
	Если Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут Тогда
		ТекущаяСтраница = Элементы.ДочернийПроцесс;
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
		ТекущаяСтраница = Элементы.ЭтапСогласования;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
		ТекущаяСтраница = Элементы.УсловныйПереход;
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение Тогда
		ТекущаяСтраница = Элементы.АвтоЭтап_Отклонение;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение Тогда
		ТекущаяСтраница = Элементы.АвтоЭтап_Согласование;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда		
		ТекущаяСтраница = Элементы.ЭтапОбработка;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
		ТекущаяСтраница = Элементы.ЭтапОповещение;		
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока Тогда
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
		ТекущаяСтраница = Элементы.ЦиклСУсловием;			
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза Тогда
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
		ТекущаяСтраница = Элементы.Пауза;		
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоИмпорта Тогда
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
		ТекущаяСтраница = Элементы.ИмпортИзВИБ;
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта Тогда
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
		ТекущаяСтраница = Элементы.ЭкспортВВИБ;		
	ИначеЕсли Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
		ТекущаяСтраница = Элементы.РучнойПереход;
	Иначе
		Элементы.ФормаРедактироватьПроцедуруЭтапа.Доступность = Ложь;
		ТекущаяСтраница = Элементы.ЭтапНеЗадан;
	КонецЕсли;
	
	Если Элементы.ПанельНастроек.ТекущаяСтраница  <> ТекущаяСтраница Тогда
		Элементы.ПанельНастроек.ТекущаяСтраница = ТекущаяСтраница;
	Иначе
		// Данная страница уже выбрана.
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияУсловийСогласования()
	
	Если НЕ Параметры.Ключ.Пустая() Тогда // Если этап уже сохранялся, то прочитаем настройки перехода из реквизита.
		
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		СохраненныеУсловия = ТекОбъект.УсловияСогласования.Получить();
		// Проверим наличие необходимых колонок в дереве.
		Если ТипЗнч(СохраненныеУсловия) = Тип("ДеревоЗначений") Тогда
			Если СохраненныеУсловия.Колонки.Найти("ИмяТипа") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("ИмяТипа");
			Иначе
				// Колонка ИмяТипа уже присутствует.
			КонецЕсли;
			Если СохраненныеУсловия.Колонки.Найти("ИдентификаторПерехода") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("ИдентификаторПерехода");
			Иначе
				// Колонка ИдентификаторПерехода уже присутствует.
			КонецЕсли;
			Если СохраненныеУсловия.Колонки.Найти("ИсточникСсылка") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("ИсточникСсылка");
			Иначе
				// Колонка ИдентификаторПерехода уже присутствует.
			КонецЕсли;
			Если СохраненныеУсловия.Колонки.Найти("Значение") = Неопределено Тогда
				СохраненныеУсловия.Колонки.Добавить("Значение");
			Иначе
				// Колонка ИдентификаторПерехода уже присутствует.
			КонецЕсли;
		Иначе
			// Не требуется проверка.
		КонецЕсли;
		// Считаем дерево.
		Если СохраненныеУсловия <> Неопределено Тогда
			
			ЗначениеВРеквизитФормы(СохраненныеУсловия, "ТабличноеПолеПерехода");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокВыбораДействий.Очистить();
	СписокВыбораУсловий.Очистить();
	СписокВыбораДействий.Добавить(Перечисления.ДействияЭтапа.ПерейтиКЭтапу);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЭкспорта()
	
	ТаблицаДоступныхПараметровКеш_ = РеквизитФормыВЗначение("ТаблицаДоступныхПараметровКеш");
	
	нПараметр = ТаблицаДоступныхПараметровКеш_.Добавить();
	нПараметр.ИмяПараметра = Нстр("ru = 'Объект ссылка'");
	нПараметр.Потребитель = "ЭтапЭкспорта"; 
	
	нПараметр = ТаблицаДоступныхПараметровКеш_.Добавить();
	нПараметр.ИмяПараметра = Нстр("ru = 'Документ БД'");
	нПараметр.Потребитель = "ЭтапЭкспорта";
	нПараметр.ТипЗначения.Добавить(Новый ОписаниеТипов("СправочникСсылка.ДокументыБД"));	 
	нПараметр.ТипОтбораПараметра = "Значение";
	
	нПараметр = ТаблицаДоступныхПараметровКеш_.Добавить();
	нПараметр.ИмяПараметра = Нстр("ru = 'Тип ВИБ'");
	нПараметр.Потребитель = "ЭтапЭкспорта";
	нПараметр.ТипЗначения.Добавить(Новый ОписаниеТипов("СправочникСсылка.ТипыБазДанных"));
	нПараметр.ТипОтбораПараметра = "Значение";
	
	нПараметр = ТаблицаДоступныхПараметровКеш_.Добавить();
	нПараметр.ИмяПараметра = Нстр("ru = 'Организация'");
	нПараметр.Потребитель = "ЭтапЭкспорта";
	нПараметр.ТипЗначения.Добавить(Новый ОписаниеТипов("СправочникСсылка.Организации"));	 
	нПараметр.ТипОтбораПараметра = "Значение";
	
	нПараметр = ТаблицаДоступныхПараметровКеш_.Добавить();
	нПараметр.ИмяПараметра = Нстр("ru = 'Сценарий'");
	нПараметр.Потребитель = "ЭтапЭкспорта";
	нПараметр.ТипЗначения.Добавить(Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	нПараметр.ТипОтбораПараметра = "Значение";
	
	 
	Если Объект.ЗначенияПараметров.Количество() > 0 Тогда	
		Для Каждого Стр Из ТаблицаДоступныхПараметровКеш_ Цикл
			ЗначениеСохраненное =  Объект.ЗначенияПараметров.НайтиСтроки(Новый Структура("ИмяПараметра",Стр.ИмяПараметра));	
			Если ЗначениеСохраненное.Количество()=1 Тогда
				 Стр.ЗначениеПараметра = ЗначениеСохраненное[0].ЗначениеПараметра;
				 Стр.ТипОтбораПараметра = ЗначениеСохраненное[0].ТипОтбораПараметра;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДоступныхПараметровКеш_,"ТаблицаДоступныхПараметровКеш");
	
КонецПроцедуры

// Заполняет доступные поля шаблона оповещения для этапа Оповещение.
&НаСервере
Процедура ЗаполнитьДоступныеПоляШаблонаОповещения()
	// Инициализация.
	КатегорияСобытияПроцесса = Справочники.КатегорииСобытийОповещений.СобытияВыполненияПроцесса;
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	// Определение типа объекта оповещения.
	Если ЗначениеЗаполнено(Объект.Ссылка.Владелец) Тогда
		ТипОбъектаСогласования = Объект.Ссылка.Владелец.ТипОбъектаСогласования;
		Если ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
			ТипОбъектаОповещения = ТипОбъектаСогласования;
		Иначе
			ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("ЭтапыУниверсальныхПроцессов", , , ТекИБ);	
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить шаблон процесса для этапа %Этап%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Объект.Ссылка));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("ЭтапыУниверсальныхПроцессов", , , ТекИБ);	
	КонецЕсли;
	// Получение метаданных объекта оповещения.
	ОбъектШаблона = МодульУправленияОповещениямиУХ.ВернутьОбъектШаблона(ТипОбъектаОповещения, КатегорияСобытияПроцесса);
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбъектШаблона);	
	Если МетаданныеОбъекта <> Неопределено Тогда
		// Заполнение компоновщика доступных полей.
		МакетСКД = МодульУправленияОповещениямиУХ.ПолучитьСхемуСКДДляПодстановкиВШаблоне(ТипОбъектаОповещения, Объект.Владелец, КатегорияСобытияПроцесса);
		АдресХранилищаИсточника = ПоместитьВоВременноеХранилище(МакетСКД, УникальныйИдентификатор);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаИсточника));
	Иначе
		// Не удалось получить метаданные. Пропускаем заполнение доступных полей.
	КонецЕсли;		
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаСервере
Процедура УправлениеДоступностью()
	// Запретим перезаписывать предопределённые системные шаблоны процессов.
	Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ШаблоныУниверсальныхПроцессов.Автоутверждение") Тогда
		ТекстСообщения = НСтр("ru = 'Шаблон процесса %Шаблон% является системным. Редактирование вручную запрещено.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(Объект.Владелец));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЭтаФорма.ТолькоПросмотр = Истина;
	Иначе
		// Проверка пройдена.
	КонецЕсли;	
	УстановитьВидимостьПанелей();
	// Вывод предупреждения об отключенном регл задании ОбработкаЭтаповПроцессов.
	ЭтоЭтапСогласования	 = (Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
	ЭтоЭтапОбработка	 = (Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
	ЭтоЭтапПауза		 = (Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
	ЭтоЭтапЦиклПока		 = (Объект.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
	Элементы.ГруппаПредупреждениеОтключенногоРеглЗадания.Видимость = Ложь;
	Если ЭтоЭтапСогласования ИЛИ ЭтоЭтапОбработка ИЛИ ЭтоЭтапПауза ИЛИ ЭтоЭтапЦиклПока Тогда
		Если (Объект.АвтоматическоеУтверждение) ИЛИ (ЭтоЭтапПауза И Объект.ДлительностьСогласования <> 0) Тогда
			СтруктураРегламентногоЗадания = МодульРегламентныхЗаданийУХ.ПолучитьСтруктуруДанныхРегламентногоЗадания("ОбработкаЭтаповПроцессов");
			Если НЕ СтруктураРегламентногоЗадания.Использование Тогда
				Элементы.ГруппаПредупреждениеОтключенногоРеглЗадания.Видимость = Истина;
				ИдентификаторЗаданияОбработкаЭтапов = СтруктураРегламентногоЗадания.ИдентификаторЗадания;
			Иначе
				Элементы.ГруппаПредупреждениеОтключенногоРеглЗадания.Видимость = Ложь;
				ИдентификаторЗаданияОбработкаЭтапов = "";
			КонецЕсли;
		Иначе
			// Нет таймаута для данного этапа.
		КонецЕсли;
	Иначе
		// Не проверяем для остальных этапов.
	КонецЕсли;
	// Для этапа Обработка скроем закладку Ответственные, если не установлен флажок Ручное утверждение.
	Если ЭтоЭтапОбработка Тогда
		Элементы.ОтветственныеГруппа.Видимость = Объект.РучноеУтверждениеЭтапа;
	Иначе
		Элементы.ОтветственныеГруппа.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру данных по этапу ЭтапВход.
&НаСервереБезКонтекста
Функция СтруктураДанныхЭтапа(ЭтапВход)
	РезультатФункции = Новый Структура;
	РезультатФункции = Справочники.ЭтапыУниверсальныхПроцессов.СтруктураДанныхЭтапа(ЭтапВход);
	Возврат РезультатФункции;	
КонецФункции		// СтруктураДанныхЭтапа()	

// Отображает нужную форму для выбора ответственного по способу адресации СпособАдресацииВход,
// привязанной к элементу ЭлементПользовательВход.
&НаКлиенте
Процедура ВыборОтветственного(СпособАдресацииВход, ЭлементПользовательВход)
	Если СпособАдресацииВход = ПредопределенноеЗначение("Перечисление.СпособыАдресацииСогласования.Пользователь") Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбора", , ЭлементПользовательВход);
	ИначеЕсли СпособАдресацииВход = ПредопределенноеЗначение("Перечисление.СпособыАдресацииСогласования.Роль") Тогда
		ОткрытьФорму("Справочник.РолиКонтактныхЛиц.ФормаВыбора", , ЭлементПользовательВход);
	ИначеЕсли СпособАдресацииВход = ПредопределенноеЗначение("Перечисление.СпособыАдресацииСогласования.РасширеннаяАдресация") Тогда
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СтруктураДанныхЭтапа = СтруктураДанныхЭтапа(Объект.Ссылка);
			ТипОбъектаСогласования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхЭтапа, "ТипОбъектаСогласования", Неопределено);
			Если ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Владелец", ТипОбъектаСогласования);
				ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
			Иначе
				// Не удалось получить тип объекта согласования.
			КонецЕсли;
		Иначе
			// Новый элемент. Не накладываем отбор по владельцу.
		КонецЕсли;
		ОткрытьФорму("Справочник.РасширеннаяАдресацияСогласования.ФормаВыбора", ПараметрыФормы, ЭлементПользовательВход);
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный способ адресации согласования ""%СпособАдресации%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособАдресации%", Строка(СпособАдресацииВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ВыборОтветственного()

#КонецОбласти

#Область ФункцииРаботыСДеревомКонтескта

&НаКлиенте
Процедура ДеревоОтборовПередРазворачиванием(Элемент, Строка, Отказ)
	
	ПередРазворачиваниемСтрокиДереваПолейОтборов(Элемент, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередРазворачиваниемСтрокиДереваПолейОтборов(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если СтрокаРазворота.ТипПоля <> "Параметры"  Тогда
		 Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
		
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);

	ПередРазворачиваниемСтрокиРеквизитовАналитики(СтруктураСтрока);	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	
	Для Каждого СтрокаКДобавлению ИЗ ДеревоОтборовКэш.ПолучитьЭлементы() Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.ПолучитьЭлементы().Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению.ПолучитьЭлементы(),НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПередРазворачиваниемСтрокиДереваПолейИсточника() 
 
&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ПолныйПуть",				    ДанныеСтрокиАналитики.ПолныйПуть);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.ПолучитьЭлементы().Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению.ПолучитьЭлементы(),НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки 

&НаСервере
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(СтруктураСтрока) 
	
	Если  СтруктураСтрока.ТипМетаДанных = "Справочник" Тогда
		ОбъектБД = Справочники.СправочникиБД.НайтиПоНаименованию(СтруктураСтрока.СправочникБД,,,Справочники.ТипыБазДанных.ТекущаяИБ);	
	ИначеЕсли СтруктураСтрока.ТипМетаДанных = "Документ" Тогда
		ОбъектБД = Справочники.ДокументыБД.НайтиПоНаименованию(СтруктураСтрока.СправочникБД,,,Справочники.ТипыБазДанных.ТекущаяИБ);		
	КонецЕсли;
	
	Если  ОбъектБД = Неопределено Тогда
	      Возврат;
	КонецЕсли;

	СтрокиКДобавлению = "";
	ДеревоОтборов_ = РеквизитФормыВЗначение("ДеревоОтборовКэш");
	ДеревоОтборов_.Строки.Очистить();
	
			  
	Для Каждого СтрРеквизит ИЗ ОбъектБД.Реквизиты Цикл
			
			СтрокаПоказателей                 	= ДеревоОтборов_.Строки.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
			СтрокаПоказателей.Элемент = СтрРеквизит.Синоним;
			СтрокаПоказателей.ПолныйПуть = СтруктураСтрока.ПолныйПуть+"."+СтрРеквизит.Имя;
			СтрокаПоказателей.ИндексКартинки =10;
			
			Если СтрРеквизит.Имя="Ссылка" Тогда
				
				Если ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.ДокументыБД") ИЛИ ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.СправочникиБД") Тогда
					
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,?(ТипЗнч(ОбъектБД)=Тип("СправочникСсылка.СправочникиБД"),"Справочник","Документ")+"."+ОбъектБД.Наименование,Справочники.ТипыБазДанных.ТекущаяИБ);
					
				КонецЕсли;
				
			Иначе
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,Справочники.ТипыБазДанных.ТекущаяИБ);
				
			КонецЕсли;
			
			Если (СтрокаПоказателей.ТипМетаДанных="Справочник" ИЛИ СтрокаПоказателей.ТипМетаДанных="Документ" ИЛИ СтрокаПоказателей.ТипЗначения.Количество()>1)  Тогда 
				// Добавим строку для дальнейшего раскрытия
				
				НоваяСтрока=СтрокаПоказателей.Строки.Добавить();
				НоваяСтрока.ИндексКартинки =10;
				
			КонецЕсли;
		
		КонецЦикла;	
        ЗначениеВРеквизитФормы(ДеревоОтборов_,"ДеревоОтборовКэш");
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаКлиенте
Процедура ДеревоОтборовОбработкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекСтр = Элементы.ДеревоОтборовОбработка.ТекущаяСтрока;
	Если НЕ ТекСтр = Неопределено Тогда
		СтрокаОтбора = ДеревоОтборов.НайтиПоИдентификатору(ТекСтр);
		Если СтрокаОтбора.ТипПоля = "ПолеРесурса" Тогда
			СтандартнаяОбработка = Ложь;            
			Возврат;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СтрокаОтбора.ТипПоля = "Функция" Тогда
		ПараметрыПеретаскивания.Значение = ((СтрокаОтбора.Элемент));
	Иначе	
		ПараметрыПеретаскивания.Значение = ("<%"+(СтрокаОтбора.ПолныйПуть)+"%>");
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРедактированиеПроцедуры(Команда)
	
	Перем АдресДеревоОтборов, АдресТекстПроцедуры, АдресКэшВидовСубконто,АдресТаблицаДоступныхПараметров, ОбычныйЭтап;
	
	СохранитьТаблицыВоВременномХранилище(АдресДеревоОтборов, АдресТекстПроцедуры, АдресКэшВидовСубконто,АдресТаблицаДоступныхПараметров, ОбычныйЭтап);
	АдресТекстПроцедуры         = ПоместитьВоВременноеХранилище(ПолеТекстовогоДокументаПроцедура, УникальныйИдентификатор);
	
	ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.Форма.ФормаРедактированияТекстаПроцедуры"
	, Новый Структура(" АдресТекстПроцедуры,СписокВыбораУсловий, СписокВыбораДействий, ШаблонПроцесса,ТипЭтапа,АдресТаблицаДоступныхПараметров"
	,АдресТекстПроцедуры
	, СписокВыбораУсловий
	, СписокВыбораДействий
	, ОБъект.Владелец
	, ОБъект.ТипЭтапа
	, АдресТаблицаДоступныхПараметров)
	, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхПараметровКешТипОтбораПараметраПриИзменении(Элемент)
	Если  Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные.ТипОтбораПараметра = "Значение" Тогда
		Тип = Элементы.ТаблицаДоступныхПараметров.ТекущиеДанные.ТипЗначения[0].Значение; 
		Если СтрНайти(Тип,"Справочник")>0 И СтрНайти(Тип,"СправочникСсылка")=0 Тогда
			Тип = СтрЗАменить(Тип,"Справочник","СправочникСсылка");
		КонецЕсли;
		Если НЕ Тип = "Произвольный" Тогда
			Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.ОграничениеТипа = Новый ОписаниеТипов (Тип);
		КонецЕсли;
		
		Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.РежимВыбораИзСписка = Ложь;
        Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.СписокВыбора.Очистить();

	Иначе	
		Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.ОграничениеТипа = Новый ОписаниеТипов ("Строка");
		Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.РежимВыбораИзСписка = Истина;
        Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.СписокВыбора.Очистить();
		Для Каждого кПар из КэшПараметров Цикл
			Элементы.ТаблицаДоступныхПараметровКешЗначениеПараметра.СписокВыбора.Добавить(кПар.Элемент);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Возвращает строку для вызова формы выбора статуса утвеждения по согласуемому 
// объекту СогласуемыйОбъектВход.
Функция ПолучитьСтрокуФормыВыбораСтатусаУтвеждения(СогласуемыйОбъектВход)
	РезультатФункции = "";
	СогласуетсяСправочник = ТипЗнч(СогласуемыйОбъектВход) = Тип("СправочникСсылка.СправочникиБД");
	СогласуетсяДокумент = ТипЗнч(СогласуемыйОбъектВход) = Тип("СправочникСсылка.ДокументыБД");
	Если СогласуетсяСправочник ИЛИ СогласуетсяДокумент Тогда
		РеквизитСостояния = СогласуемыйОбъектВход.РеквизитСостояния;		
		НаименованиеСсылки = РеквизитСостояния.Наименование;
		РезультатФункции = "";
		Если ЗначениеЗаполнено(НаименованиеСсылки) Тогда
			Если ТипЗнч(РеквизитСостояния) = Тип("СправочникСсылка.СправочникиБД") Тогда
				РезультатФункции = "Справочник." + НаименованиеСсылки + ".ФормаВыбора";
			ИначеЕсли ТипЗнч(РеквизитСостояния) = Тип("СправочникСсылка.ПеречисленияБД") Тогда	
				РезультатФункции = "Перечисление." + НаименованиеСсылки + ".ФормаВыбора";
			Иначе
				РезультатФункции = "";
			КонецЕсли;
		Иначе
			РезультатФункции = "";
		КонецЕсли;
	Иначе
		РезультатФункции = "";			
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПорядокДоступныеПоляПорядкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекСтр = Элементы.КомпоновщикНастроекНастройкиПорядокДоступныеПоляПорядка.ТекущаяСтрока;
	Если НЕ ТекСтр = Неопределено Тогда
		СтрокаОтбора = КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройкиПорядокДоступныеПоляПорядка.ТекущаяСтрока);
		Если СтрокаОтбора.Папка Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ПолучитьИмяПоляВШаблоне(Строка(СтрокаОтбора.Поле));

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяПоляВШаблоне(ИмяПоля)
	
	Возврат "[Параметр." + ИмяПоля + "]";
	
КонецФункции

&НаКлиенте
Процедура СтатусСогласованияПриУтвержденииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СогласуемыйОбъект) Тогда
		СтрокаФормы = ПолучитьСтрокуФормыВыбораСтатусаУтвеждения(СогласуемыйОбъект);
		Если ЗначениеЗаполнено(СтрокаФормы) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(СтрокаФормы, , Элементы.СтатусСогласованияПриУтверждении);
		Иначе
			// Выполняем стандартный вызов всех возможных вариантов.
		КонецЕсли;
	Иначе
		// Выполняем стандартный вызов всех возможных вариантов.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованияОбъектаОбработкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СогласуемыйОбъект) Тогда
		СтрокаФормы = ПолучитьСтрокуФормыВыбораСтатусаУтвеждения(СогласуемыйОбъект);
		Если ЗначениеЗаполнено(СтрокаФормы) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(СтрокаФормы, , Элементы.СтатусСогласованияОбъектаОбработка);
		Иначе
			// Выполняем стандартный вызов всех возможных вариантов.
		КонецЕсли;
	Иначе
		// Выполняем стандартный вызов всех возможных вариантов.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованияПриУтвержденииМаршрутаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СогласуемыйОбъект) Тогда
		СтрокаФормы = ПолучитьСтрокуФормыВыбораСтатусаУтвеждения(СогласуемыйОбъект);
		Если ЗначениеЗаполнено(СтрокаФормы) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(СтрокаФормы, , Элементы.СтатусСогласованияПриУтвержденииМаршрута);
		Иначе
			// Выполняем стандартный вызов всех возможных вариантов.
		КонецЕсли;
	Иначе
		// Выполняем стандартный вызов всех возможных вариантов.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованияПриОтклоненииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СогласуемыйОбъект) Тогда
		СтрокаФормы = ПолучитьСтрокуФормыВыбораСтатусаУтвеждения(СогласуемыйОбъект);
		Если ЗначениеЗаполнено(СтрокаФормы) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(СтрокаФормы, , Элементы.СтатусСогласованияПриУтвержденииМаршрута);
		Иначе
			// Выполняем стандартный вызов всех возможных вариантов.
		КонецЕсли;
	Иначе
		// Выполняем стандартный вызов всех возможных вариантов.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованияОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СогласуемыйОбъект) Тогда
		СтрокаФормы = ПолучитьСтрокуФормыВыбораСтатусаУтвеждения(СогласуемыйОбъект);
		Если ЗначениеЗаполнено(СтрокаФормы) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(СтрокаФормы, , Элементы.СтатусСогласованияОбъектаРучнойЭтап);
		Иначе
			// Выполняем стандартный вызов всех возможных вариантов.
		КонецЕсли;
	Иначе
		// Выполняем стандартный вызов всех возможных вариантов.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданиеОбработкаЭтапов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "Изменить");
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторЗаданияОбработкаЭтапов);
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура РучноеУтверждениеЭтапаПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Запретим перезаписывать предопределённые системные шаблоны процессов.
	Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ШаблоныУниверсальныхПроцессов.Автоутверждение") Тогда
		ТекстСообщения = НСтр("ru = 'Шаблон процесса %Шаблон% является системным. Редактирование вручную запрещено.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(Объект.Владелец));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;     
	Иначе
		// Проверка пройдена.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УтверждающиеПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Утверждающие.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		СпособАдресации = ТекДанные.СпособАдресации;
		ВыборОтветственного(СпособАдресации, Элементы.УтверждающиеПользователь);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УтверждающиеСпособАдресацииПриИзменении(Элемент)
	ТекДанные = Элементы.Утверждающие.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Пользователь = Неопределено;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Утверждающие2СпособАдресацииПриИзменении(Элемент)
	ТекДанные = Элементы.Утверждающие2.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Пользователь = Неопределено;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Утверждающие2ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Утверждающие2.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		СпособАдресации = ТекДанные.СпособАдресации;
		ВыборОтветственного(СпособАдресации, Элементы.Утверждающие2Пользователь);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Утверждающие1СпособАдресацииПриИзменении(Элемент)
	ТекДанные = Элементы.Утверждающие1.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Пользователь = Неопределено;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УтверждающиеПользователь3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Утверждающие1.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		СпособАдресации = ТекДанные.СпособАдресации;
		ВыборОтветственного(СпособАдресации, Элементы.УтверждающиеПользователь3);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресатыСпособАдресацииПриИзменении(Элемент)
	ТекДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Пользователь = Неопределено;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УтверждающиеПользователь1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		СпособАдресации = ТекДанные.СпособАдресации;
		ВыборОтветственного(СпособАдресации, Элементы.УтверждающиеПользователь1);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;
