#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ОбновитьЭтапыПредшественники(Ссылка, АдресТабличноеПолеПереходов) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресТабличноеПолеПереходов) Тогда
		ТабличноеПолеПерехода = ПолучитьИзВременногоХранилища(АдресТабличноеПолеПереходов);
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники
	|ГДЕ Этап = &Этап";
	Запрос.УстановитьПараметр("Этап", Ссылка);
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	МассивЭтаповПоследователей = Новый Массив;
	
	ВернутьРекурсивноВсеСсылкиНаЭтапы(МассивЭтаповПоследователей, ТабличноеПолеПерехода.Строки);
	
	Для Каждого Строка ИЗ ТаблицаПоказателей Цикл
		ЗаписьМассива = МассивЭтаповПоследователей.Найти(Строка.Ссылка);
		Если ЗаписьМассива = Неопределено Тогда
			ТекОбъект = Строка.Ссылка.ПолучитьОбъект();
			УдаляемыеСтроки = ТекОбъект.ЭтапыПредшественники.НайтиСтроки(Новый Структура("Этап", Ссылка));
			Для Каждого Строка Из УдаляемыеСтроки Цикл
				ТекОбъект.ЭтапыПредшественники.Удалить(Строка);
			КонецЦикла;
			ТекОбъект.ОповещатьОбИзменении = Ложь;
			ТекОбъект.Записать();
		Иначе
			МассивЭтаповПоследователей.Удалить(ЗаписьМассива);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из МассивЭтаповПоследователей Цикл
		ТекОбъект = Элемент.ПолучитьОбъект();
		ТекОБъект.ЭтапыПредшественники.Добавить().Этап = Ссылка;
		ТекОбъект.ОповещатьОбИзменении = Ложь;
		ТекОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВернутьРекурсивноВсеСсылкиНаЭтапы(Массив, Строки)
	
	Для Каждого Строка ИЗ Строки Цикл
		Если НЕ Строка.ЯвляетсяУсловием Тогда
			Если Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу Тогда
				Если ЗначениеЗаполнено(Строка.Значение) Тогда
					Если Массив.Найти(Строка.Значение) = Неопределено Тогда
						Массив.Добавить(Строка.Значение);
					КонеЦЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Строка_Условия Из Строка.Строки Цикл
				ВернутьРекурсивноВсеСсылкиНаЭтапы(Массив, Строка_Условия.Строки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Определяет строку формы для открытия по типу этапа ТипЭтапаВход.
Функция ОпределитьФормуДляЭтапа(ТипЭтапаВход)
	РезультатФункции = "ФормаЭлемента";
	Если НЕ ТипЭтапаВход = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		РезультатФункции = "ФормаЭлемента";
	Иначе
		РезультатФункции = "ФормаЭтапаПроцессаПодготовкиОтчетности";
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ОпределитьФормуДляЭтапа()

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ВыбраннаяФорма = "ФормаЭлемента";
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) И ВидФормы ="ФормаОбъекта"  Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ОпределитьФормуДляЭтапа(Параметры.Ключ.ТипЭтапа);
		
	Иначе
		
		// Новый этап		
		// Проверим на копирование.
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			ИсходныйЭтап = Параметры.ЗначениеКопирования;
			Если (ЗначениеЗаполнено(ИсходныйЭтап)) И (ТипЗнч(ИсходныйЭтап) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов")) Тогда
				СтандартнаяОбработка = Ложь;
				ИсходныйТипЭтапа = ИсходныйЭтап.ТипЭтапа;
				ВыбраннаяФорма = ОпределитьФормуДляЭтапа(ИсходныйТипЭтапа);
			Иначе
				// Неизвестный вариант копирования.
			КонецЕсли;
		Иначе
			// Не копирование
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьРегистрЭтапыОрганизаций(Версия, Этап, ТабОрганизаций) Экспорт
	
	Попытка
		НаборЗаписей = РегистрыСведений.ОрганизационныеЕдиницыЭтаповПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияРегламентаПодготовкиОтчетности.Установить(Версия);		
		НаборЗаписей.Отбор.ЭтапПроцесса.Установить(Этап);
		
		Для Каждого Элемент Из ТабОрганизаций Цикл
			нЗапись = НаборЗаписей.Добавить();
			нЗапись.ВерсияРегламентаПодготовкиОтчетности	 = Версия;
			нЗапись.ОрганизационнаяЕдиница					 = Элемент.ОрганизационнаяЕдиница;
			нЗапись.ЭтапПроцесса							 = Этап;	   
		КонецЦикла;	   
		
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи организаций этапа %Этап% регламента %Версия% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Этап));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Версия%", Строка(Версия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	   
КонецПроцедуры	

// Возвращает структуру значений реквизитов этапа процесса ЭтапВход.
Функция СтруктураДанныхЭтапа(ЭтапВход) Экспорт 
	РезультатФункции = Новый Структура;
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить(ЭтапВход);
	СоответствиеДанных = СоответствиеДанныхЭтапов(МассивЭтапов);
	НайденнаяСтруктура = СоответствиеДанных.Получить(ЭтапВход);
	Если НайденнаяСтруктура <> Неопределено Тогда
		РезультатФункции = НайденнаяСтруктура;
	Иначе
		РезультатФункции = Новый Структура;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// СтруктураДанныхЭтапа()

// Возвращает соответствие даныых этапов из массива текущих этапов 
// МассивЭтаповВход.
Функция СоответствиеДанныхЭтапов(МассивЭтаповВход) Экспорт
	РезультатФункции = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка,
		|	ЭтапыУниверсальныхПроцессов.Владелец КАК Владелец,
		|	ЭтапыУниверсальныхПроцессов.ОбязательныйКомментарийПриСогласовании КАК ОбязательныйКомментарийПриСогласовании,
		|	ЭтапыУниверсальныхПроцессов.ОбязательныйКомментарийПриОтклонении КАК ОбязательныйКомментарийПриОтклонении,
		|	ЭтапыУниверсальныхПроцессов.Владелец.ТипОбъектаСогласования КАК ТипОбъектаСогласования
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка В(&ЭтапыВход)";
	Запрос.УстановитьПараметр("ЭтапыВход", МассивЭтаповВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекЭтап = ВыборкаДетальныеЗаписи.Ссылка;
		СтруктураДанныхЭтапа = Новый Структура;
		ОбщегоНазначенияУХ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, ВыборкаДетальныеЗаписи, СтруктураДанныхЭтапа);
		РезультатФункции.Вставить(ТекЭтап, СтруктураДанныхЭтапа);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// СоответствиеДанныхЭтапов()

// Функция получает уникальное имя параметра по пути к данным
//
Функция ПолучитьУникальноеИмяПараметраПоПутиКДанным(ПутьКДанным) Экспорт
	
	Возврат "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + "__" + СтрЗаменить(ПутьКДанным, ".", "_");
	
КонецФункции		// ПолучитьУникальноеИмяПараметраПоПутиКДанным()

// Функция получает уникальное имя параметра по уникальному имени параметра
//
Функция ПолучитьУникальноеИмяПараметраПоУникальномуИмениПараметра(ИмяПараметра) Экспорт
	
	Возврат ПолучитьУникальноеИмяПараметраПоПутиКДанным(Сред(ИмяПараметра, СтрНайти(ИмяПараметра, "__") + 1));
	
КонецФункции		// ПолучитьУникальноеИмяПараметраПоУникальномуИмениПараметра()

#КонецЕсли
