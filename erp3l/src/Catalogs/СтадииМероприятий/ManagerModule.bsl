#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Возвращает таблицу знчений с действиями по риску для риска РискВход.
Функция ПолучитьДействияРеакцииПоРиску(РискВход) Экспорт 
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РискиСтадии.Ссылка КАК Риск,
		|	РискиСтадии.Стадия КАК Стадия,
		|	РискиСтадии.ИтогВыполнения КАК ИтогВыполнения
		|ИЗ
		|	Справочник.Риски.Стадии КАК РискиСтадии
		|ГДЕ
		|	РискиСтадии.Ссылка = &Ссылка
		|	И НЕ РискиСтадии.Стадия.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", РискВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьДействияРеакцииПоРиску()

// Возвращает соответствие предопределённых стадий мероприятий наименованиям 
// дат закупочной процедуры.
Функция СформироватьСоответствиеДатЗакупочнойПроцедурыСтадиямМероприятиям() Экспорт
	РезультатФункции = Новый Соответствие;
	Попытка
		// Получим массив предопределённых стадий для проверки существования.
		МассивНаименованийСтадий = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтадииМероприятий.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	СтадииМероприятий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтадииМероприятий КАК СтадииМероприятий
		|ГДЕ
		|	НЕ СтадииМероприятий.ПометкаУдаления
		|	И СтадииМероприятий.Предопределенный";
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивНаименованийСтадий.Добавить(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных);
		КонецЦикла;
		МакетНастройки = Справочники.СтадииМероприятий.ПолучитьМакет("ПоставляемыеНастройкиДатЗакупочныхПроцедур");
		Для Счетчик = 2 По МакетНастройки.ВысотаТаблицы Цикл
			ОбластьДатаЗакупочнойПроцедуры = МакетНастройки.Область(Счетчик, 1);
			ТекстДатаЗакупочнойПроцедуры = СокрЛП(ОбластьДатаЗакупочнойПроцедуры.Текст);
			ОбластьСтадияМероприятия = МакетНастройки.Область(Счетчик, 2);
			ТекстСтадияМероприятия = СокрЛП(ОбластьСтадияМероприятия.Текст);
			ЕстьПредпределеннаяСтадия = (МассивНаименованийСтадий.Найти(ТекстСтадияМероприятия) <> Неопределено);
			Если ЕстьПредпределеннаяСтадия Тогда
				СтадияСсылка = Справочники.СтадииМероприятий[ТекстСтадияМероприятия];
				РезультатФункции.Вставить(СтадияСсылка, ТекстДатаЗакупочнойПроцедуры);
			Иначе
				// Пропускаем.
			КонецЕсли;	
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении соответствия дат закупочной процедуры и стадий мероприятия произошла ошибка: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;	
КонецФункции		// СформироватьСоответствиеСтадийДатамЗакупочнойПроцедуры()

// Возвращает массив структур, содержащих данные по вложенным файлам для стадии
// мероприятия СтадияВход.
Функция ВернутьМассивДанныхВложенийСтадии(СтадияВход, ТолькоОбязательныеВход = Ложь) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтадииМероприятийТипыИтоговыхДокументов.Ссылка КАК Ссылка,
		|	СтадииМероприятийТипыИтоговыхДокументов.ПредставлениеДокумента КАК ПредставлениеДокумента,
		|	СтадииМероприятийТипыИтоговыхДокументов.ТипИтоговогоДокумента КАК ТипИтоговогоДокумента,
		|	СтадииМероприятийТипыИтоговыхДокументов.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	СтадииМероприятийТипыИтоговыхДокументов.Обязательный КАК Обязательный
		|ИЗ
		|	Справочник.СтадииМероприятий.ТипыИтоговыхДокументов КАК СтадииМероприятийТипыИтоговыхДокументов
		|ГДЕ
		|	СтадииМероприятийТипыИтоговыхДокументов.Ссылка = &Ссылка
		|	И НЕ СтадииМероприятийТипыИтоговыхДокументов.Ссылка.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ТолькоОбязательные
		|				ТОГДА СтадииМероприятийТипыИтоговыхДокументов.Обязательный
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", СтадияВход);
	Запрос.УстановитьПараметр("ТолькоОбязательные", ТолькоОбязательныеВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураРезультат = Новый Структура;
		СтруктураРезультат.Вставить("ПредставлениеДокумента",	 ВыборкаДетальныеЗаписи.ПредставлениеДокумента);
		СтруктураРезультат.Вставить("ТипИтоговогоДокумента",	 ВыборкаДетальныеЗаписи.ТипИтоговогоДокумента);
		СтруктураРезультат.Вставить("ИдентификаторДокумента",	 ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
		СтруктураРезультат.Вставить("Обязательный",				 ВыборкаДетальныеЗаписи.Обязательный);
		РезультатФункции.Добавить(СтруктураРезультат);
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивДанныхВложенийСтадии()	

// Возвращает предопределенные стадии, связанные с квалификационным отбором.
Функция ВернутьСтадииКвалификационногоОтбора() Экспорт
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Аукцион_НачалоКвалификационногоОтбора);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_НачалоКвалификационногоОтбора);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_НачалоКвалификационногоОтбора);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоКвалификационногоОтбора);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоКвалификационногоОтбора);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Конкурс_НачалоКвалификационногоОтбора);
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтадииКвалификационногоОтбора() 

// Возвращает предопределенные стадии, связанные с переторжкой.
Функция ВернутьСтадииПереторжка() Экспорт
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Аукцион_Переторжка);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_Переторжка);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_Переторжка);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_Переторжка);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_Переторжка);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Конкурс_Переторжка);
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтадииКвалификационногоОтбора() 

// Возвращает предопределенные стадии, связанные с официальным объявлением закупки.
Функция ВернутьСтадииОфициальноеОбъявлениеЗакупки() Экспорт
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Аукцион_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗакупкаУЕдинственногоПоставщика_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Конкурс_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Аукцион_МСП_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_МСП_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_МСП_ОфициальноеОбъявлениеЗакупки);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Конкурс_МСП_ОфициальноеОбъявлениеЗакупки);
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтадииОфициальноеОбъявлениеЗакупки() 

// Возвращает предопределенные стадии, связанные с подготовкой к закупочной процедуре.
Функция ВернутьСтадииНачалоПодготовкиЗакупкиКПубликации() Экспорт
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Аукцион_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗакупкаУЕдинственногоПоставщика_РегистрацияПредложенияПоставщика);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Конкурс_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Аукцион_МСП_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_МСП_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_МСП_НачалоПодготовкиЗакупкиКПубликации);
	РезультатФункции.Добавить(Справочники.СтадииМероприятий.Конкурс_МСП_НачалоПодготовкиЗакупкиКПубликации);
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтадииНачалоПодготовкиЗакупкиКПубликации() 

Функция ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Экспорт
	РезультатФункции = "ПодготовкаКЗакупочнойПроцедуре";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_ПодготовкаКЗакупочнойПроцедуре()

Функция ВидДаты_ОфициальноеОбъявлениеЗакупки() Экспорт
	РезультатФункции = "ОфициальноеОбъявлениеЗакупки";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_ОфициальноеОбъявлениеЗакупки()

Функция ВидДаты_КвалификационныйОтбор() Экспорт
	РезультатФункции = "КвалификационныйОтбор";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_КвалификационныйОтбор()

Функция ВидДаты_НачалоПриемаЗаявок() Экспорт
	РезультатФункции = "НачалоПриемаЗаявок";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_НачалоПриемаЗаявок()

Функция ВидДаты_РазъясненияПоЗакупке() Экспорт
	РезультатФункции = "РазъясненияПоЗакупке";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_РазъясненияПоЗакупке()

Функция ВидДаты_ОкончаниеПриемаЗаявок() Экспорт
	РезультатФункции = "ОкончаниеПриемаЗаявок";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_ОкончаниеПриемаЗаявок()

Функция ВидДаты_ВскрытиеЗаявок() Экспорт
	РезультатФункции = "ВскрытиеЗаявок";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_ВскрытиеЗаявок()

Функция ВидДаты_РассмотрениеЗаявок() Экспорт
	РезультатФункции = "РассмотрениеЗаявок";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_РассмотрениеЗаявок()

Функция ВидДаты_ПодведениеИтогов() Экспорт
	РезультатФункции = "ПодведениеИтогов";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_ПодведениеИтогов()

Функция ВидДаты_ОглашениеРезультатов() Экспорт
	РезультатФункции = "ОглашениеРезультатов";
	Возврат РезультатФункции;
КонецФункции		// ВидДаты_ОглашениеРезультатов()

// Возвращает стадию, соответсвующей способу выбора поставщика 
// СпособВыбораПоставщикаВход и виду даты ВидДатыВход.
Функция ВернутьСтадиюДатыЗакупочнойПроцедуры(СпособВыбораПоставщикаВход, ВидДатыВход) Экспорт
	РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Возврат РезультатФункции;
	КонецЕсли;	
	Аукцион = "Перечисление.СпособыВыбораПоставщика.Аукцион";
	Конкурс = "Перечисление.СпособыВыбораПоставщика.Конкурс";
	ЗапросКотировок = "Перечисление.СпособыВыбораПоставщика.ЗапросКотировок";
	ЗапросПредложений = "Перечисление.СпособыВыбораПоставщика.ЗапросПредложений";
	КвалификационныйОтбор = "Перечисление.СпособыВыбораПоставщика.КвалификационныйОтбор";
	КонкурентныеПереговоры = "Перечисление.СпособыВыбораПоставщика.КонкурентныеПереговоры";
	ЗакупкаУЕдинственногоПоставщика = "Перечисление.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика";
	Если СпособВыбораПоставщикаВход = ПредопределенноеЗначение(Аукцион) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_НачалоПодготовкиЗакупкиКПубликации;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_КвалификационныйОтбор() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_НачалоКвалификационногоОтбора;
		ИначеЕсли ВидДатыВход = ВидДаты_НачалоПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_НачалоПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РазъясненияПоЗакупке() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_НачалоПредоставленияРазъяснений;	
		ИначеЕсли ВидДатыВход = ВидДаты_ОкончаниеПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_ОкончаниеПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ВскрытиеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_ВскрытиеЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РассмотрениеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_ОкончаниеРассмотренияЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Аукцион_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщикаВход = ПредопределенноеЗначение(Конкурс) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_НачалоПодготовкиЗакупкиКПубликации;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_КвалификационныйОтбор() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_НачалоКвалификационногоОтбора;
		ИначеЕсли ВидДатыВход = ВидДаты_НачалоПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_НачалоПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РазъясненияПоЗакупке() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_НачалоПредоставленияРазъяснений;	
		ИначеЕсли ВидДатыВход = ВидДаты_ОкончаниеПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_ОкончаниеПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ВскрытиеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_ВскрытиеЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РассмотрениеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_ОкончаниеРассмотренияЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.Конкурс_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщикаВход = ПредопределенноеЗначение(ЗапросКотировок) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_НачалоПодготовкиЗакупкиКПубликации;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_КвалификационныйОтбор() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_НачалоКвалификационногоОтбора;
		ИначеЕсли ВидДатыВход = ВидДаты_НачалоПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_НачалоПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РазъясненияПоЗакупке() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_НачалоПредоставленияРазъяснений;	
		ИначеЕсли ВидДатыВход = ВидДаты_ОкончаниеПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_ОкончаниеПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ВскрытиеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_ВскрытиеЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РассмотрениеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_ОкончаниеРассмотренияЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросКотировок_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщикаВход = ПредопределенноеЗначение(ЗапросПредложений) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПодготовкиЗакупкиКПубликации;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_КвалификационныйОтбор() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоКвалификационногоОтбора;
		ИначеЕсли ВидДатыВход = ВидДаты_НачалоПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РазъясненияПоЗакупке() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПредоставленияРазъяснений;	
		ИначеЕсли ВидДатыВход = ВидДаты_ОкончаниеПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_ОкончаниеПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ВскрытиеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_ВскрытиеЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РассмотрениеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_ОкончаниеРассмотренияЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗапросПредложений_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщикаВход = ПредопределенноеЗначение(КвалификационныйОтбор) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоПодготовкиЗакупкиКПубликации;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_КвалификационныйОтбор() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоКвалификационногоОтбора;
		ИначеЕсли ВидДатыВход = ВидДаты_НачалоПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РазъясненияПоЗакупке() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоПредоставленияРазъяснений;	
		ИначеЕсли ВидДатыВход = ВидДаты_ОкончаниеПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_ОкончаниеПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ВскрытиеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_ВскрытиеЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РассмотрениеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_ОкончаниеРассмотренияЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КвалификационныйОтбор_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщикаВход = ПредопределенноеЗначение(КонкурентныеПереговоры) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоПодготовкиЗакупкиКПубликации;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_КвалификационныйОтбор() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоКвалификационногоОтбора;
		ИначеЕсли ВидДатыВход = ВидДаты_НачалоПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РазъясненияПоЗакупке() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоПредоставленияРазъяснений;	
		ИначеЕсли ВидДатыВход = ВидДаты_ОкончаниеПриемаЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОкончаниеПриемаЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ВскрытиеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ВскрытиеЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_РассмотрениеЗаявок() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОкончаниеРассмотренияЗаявок;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщикаВход = ПредопределенноеЗначение(ЗакупкаУЕдинственногоПоставщика) Тогда
		Если ВидДатыВход = ВидДаты_ПодготовкаКЗакупочнойПроцедуре() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗакупкаУЕдинственногоПоставщика_ОглашениеРезультатов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОфициальноеОбъявлениеЗакупки() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗакупкаУЕдинственногоПоставщика_ОфициальноеОбъявлениеЗакупки;
		ИначеЕсли ВидДатыВход = ВидДаты_ПодведениеИтогов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗакупкаУЕдинственногоПоставщика_ПодведениеИтогов;
		ИначеЕсли ВидДатыВход = ВидДаты_ОглашениеРезультатов() Тогда
			РезультатФункции = Справочники.СтадииМероприятий.ЗакупкаУЕдинственногоПоставщика_ОглашениеРезультатов;			
		Иначе
			РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатФункции = Справочники.СтадииМероприятий.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтадиюДатыЗакупочнойПроцедуры()

// Определяет принадлежность стадии СтадияВход к стадиям квалификационного отбора.
Функция ЭтоСтадияКвалификационногоОтбора(СтадияВход) Экспорт
	РезультатФункции = Ложь;
	МассивИсключаемыхСтадий = ВернутьСтадииКвалификационногоОтбора();
	НайденноеЗначение = МассивИсключаемыхСтадий.Найти(СтадияВход);
	РезультатФункции = (НайденноеЗначение <> Неопределено);
	Возврат РезультатФункции;
КонецФункции		// ЭтоСтадияКвалификационногоОтбора()

// Определяет принадлежность стадии СтадияВход к стадиям переторжки.
Функция ЭтоСтадияПереторжка(СтадияВход) Экспорт
	РезультатФункции = Ложь;
	МассивИсключаемыхСтадий = ВернутьСтадииПереторжка();
	НайденноеЗначение = МассивИсключаемыхСтадий.Найти(СтадияВход);
	РезультатФункции = (НайденноеЗначение <> Неопределено);
	Возврат РезультатФункции;
КонецФункции		// ЭтоСтадияПереторжка()

#КонецЕсли