#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем Используется77; // Признак использования обращения к ВИБ на платформе 7.7
Перем мПланСчетов Экспорт;
Перем мДеревоСчетов Экспорт;
Перем ТекСоединениеВИБ Экспорт; // Текущее соединение с внешней информационной базой
Перем ПланСчетовБД Экспорт;
Перем ТекущаяИБ Экспорт;
Перем мОписаниеТиповСтрока;
Перем мОписаниеТиповБулево;
Перем мОписаниеТиповТЗ;
Перем мОписаниеТиповСписокЗначений;
Перем СписокРеквизитовДляМСФО;

Процедура ЗаполнитьРеквизитыОбъекта(Кэш = Неопределено, ЕстьИзменения = Истина) Экспорт
	
	Если Не ПроверитьНаименование() Тогда	
		Возврат;		
	КонецЕсли;
	
	ТекущаяИБ = (Владелец = Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если Не ТекущаяИБ Тогда
		
		Если ТекСоединениеВИБ=Неопределено Тогда
			
			ТекСоединениеВИБ = ОбщегоНазначенияУХ.ПолучитьСоединениеСВИБПоУмолчанию(Владелец, 1);
			
			Если ТекСоединениеВИБ = Неопределено Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекСоединениеВИБ=Обработки.РаботаСМетаданнымиУХ.Создать();
		
	КонецЕсли;
		
	СтруктураОписания = РаботаСОбъектамиМетаданныхУХ.ПолучитьСтруктуруОписанияПланаСчетовБД(
		Наименование,ПланСчетовМетаданные, ТекСоединениеВИБ, Использование77(), Кэш);
	
	Если СтруктураОписания.Свойство("ТекстОшибки") Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтруктураОписания.ТекстОшибки, Истина,, СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	РаботаСОбъектамиМетаданныхУХ.ЗаполнитьИзмененныеРеквизиты(ЭтотОбъект, СтруктураОписания,"Реквизиты", ЕстьИзменения);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ЭтотОбъект.МетаданныеТекущейИБ, ТекущаяИБ, ЕстьИзменения);
		
	Если ЗначениеЗаполнено(ВидыСубконто) Тогда
		
		НовыеВидыСубконтоОписание = ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(ТекСоединениеВИБ, "ПланВидовХарактеристик",
			ВидыСубконто, Владелец, Ложь);
			
		ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ЭтотОбъект.ВидыСубконтоОписание, 
			НовыеВидыСубконтоОписание, ЕстьИзменения);	

		КонецЕсли;
		
	РаботаСОбъектамиМетаданныхУХ.ЗагрузитьИзмененнуюТабЧасть(Реквизиты, СтруктураОписания.Реквизиты, ЕстьИзменения);
	
	Если ЕстьИзменения Тогда
		Записать();
		ЕстьИзменения = Ложь;
	КонецЕсли;	
	
	ЗаполнитьПланСчетов();
			
КонецПроцедуры // ЗаполнитьРеквизитыОбъекта()

Процедура ЗаполнитьТаблицуСчетов(СчетБД=Неопределено)
	
	мПланСчетов                    = Новый ТаблицаЗначений;
	мПланСчетов.Колонки.Добавить("Код", 						мОписаниеТиповСтрока);
	мПланСчетов.Колонки.Добавить("Наименование", 				мОписаниеТиповСтрока);
	мПланСчетов.Колонки.Добавить("Родитель", 					мОписаниеТиповСтрока);
	мПланСчетов.Колонки.Добавить("Забалансовый", 				мОписаниеТиповБулево);
	мПланСчетов.Колонки.Добавить("ПересчитыватьВалютнуюСумму", 	мОписаниеТиповБулево);
	мПланСчетов.Колонки.Добавить("ПометкаУдаления", 			мОписаниеТиповБулево);
	мПланСчетов.Колонки.Добавить("РодительЗапретитьИспользоватьВПроводках");
	мПланСчетов.Колонки.Добавить("ЗапретитьИспользоватьВПроводках");
	мПланСчетов.Колонки.Добавить("Вид", 						);
	мПланСчетов.Колонки.Добавить("ВидСтрока", 					);
	мПланСчетов.Колонки.Добавить("СчетСсылка");
	мПланСчетов.Колонки.Добавить("СчетИсточник");
	мПланСчетов.Колонки.Добавить("РодительСсылка");
	мПланСчетов.Колонки.Добавить("РазделПланаСчетов");
	мПланСчетов.Колонки.Добавить("ВидОтложенногоНалога");
	мПланСчетов.Колонки.Добавить("ВидКурса");
	мПланСчетов.Колонки.Добавить("ПризнакиУчета");
	мПланСчетов.Колонки.Добавить("ВидыСубконто");
	мПланСчетов.Колонки.Добавить("Наименование1");
	мПланСчетов.Колонки.Добавить("Наименование2");
	
	ТаблицаСубконто=Новый ТаблицаЗначений;
	ТаблицаСубконто.Колонки.Добавить("Номер");
	ТаблицаСубконто.Колонки.Добавить("ВидСубконто");
	ТаблицаСубконто.Колонки.Добавить("ВидСубконтоСсылка");
	ТаблицаСубконто.Колонки.Добавить("ТолькоОбороты");
	ТаблицаСубконто.Колонки.Добавить("ТолькоСальдо");
	ТаблицаСубконто.Колонки.Добавить("ПризнакиУчетаСубконто");
	ТаблицаСубконто.Колонки.Добавить("ТипДанных");
	
	Если Использование77() Тогда
		
		ПланСчетовБД.ВыбратьСчета();
		
		Пока ПланСчетовБД.ПолучитьСчет() = 1 Цикл
			
			СтрокаПланаСчетов = мПланСчетов.Добавить();
			СтрокаПланаСчетов.Код = СокрЛП(ПланСчетовБД.Код);
			СтрокаПланаСчетов.Наименование 	 = ПланСчетовБД.Наименование;
			СтрокаПланаСчетов.Родитель 		 = ПланСчетовБД.Родитель().Код;
			СтрокаПланаСчетов.Забалансовый   = (ПланСчетовБД.Забалансовый=1);
			
			ПризнакиУчетаСчета="";
			
			Если ПланСчетовБД.Валютный=1 Тогда
				ПризнакиУчетаСчета=ПризнакиУчетаСчета+";"+"Валютный";
			КонецЕсли;
			
			Если ПланСчетовБД.Количественный=1 Тогда
				ПризнакиУчетаСчета=ПризнакиУчетаСчета+";"+"Количественный";
			КонецЕсли;
			
			СтрокаПланаСчетов.ПризнакиУчета=Сред(ПризнакиУчетаСчета,2);
			
			Активность=ПланСчетовБД.Активный;
			
			Если Активность=1 Тогда
				СтрокаПланаСчетов.ВидСтрока="Активный";
			ИначеЕсли Активность=2 Тогда
				СтрокаПланаСчетов.ВидСтрока="Пассивный";
			ИначеЕсли Активность=3 Тогда
				СтрокаПланаСчетов.ВидСтрока="АктивноПассивный";
			КонецЕсли;		
			
			ТекТаблицаСубконто=ТаблицаСубконто.СкопироватьКолонки();	
			
			Для Инд = 1  По ПланСчетовБД.КоличествоСубконто() Цикл
				
				ТекПризнакиУчетаСубконто="";
				
				НоваяСтрока=ТекТаблицаСубконто.Добавить();
				НоваяСтрока.Номер=Инд;
				НоваяСтрока.ВидСубконто=ПланСчетовБД.SubcontoKind(Инд).Identifier();
				НоваяСтрока.ТолькоОбороты=(ПланСчетовБД.ТолькоОбороты(Инд)=1);
				
				Если (ПланСчетовБД.УчетПоСумме(Инд)=1) Тогда
					ТекПризнакиУчетаСубконто=ТекПризнакиУчетаСубконто+";"+"Суммовой";
				КонецЕсли;
				
				Если (ПланСчетовБД.УчетПоКоличеству(Инд)=1) Тогда
					ТекПризнакиУчетаСубконто=ТекПризнакиУчетаСубконто+";"+"Количественный";
				КонецЕсли;
				
				Если (ПланСчетовБД.УчетПоВалютнойСумме(Инд)=1) Тогда
					ТекПризнакиУчетаСубконто=ТекПризнакиУчетаСубконто+";"+"Валютный";
				КонецЕсли;
				
				НоваяСтрока.ПризнакиУчетаСубконто=Сред(ТекПризнакиУчетаСубконто,2);
				НоваяСтрока.ТипДанных=ПланСчетовБД.SubcontoKind(Инд).SubcontoType();		
				
			КонецЦикла;
			
			СтрокаПланаСчетов.ВидыСубконто=ТекТаблицаСубконто;
			
		КонецЦикла;
		
	Иначе
		
		МассивПризнаковУчета=?(ПустаяСтрока(ПризнакиУчета),Новый Массив,ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПризнакиУчета,";"));
		МассивПризнаковУчетаСубконто=?(ПустаяСтрока(ПризнакиУчетаСубконто),Новый Массив,ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПризнакиУчетаСубконто,";"));
		
		ТекстЗапроса="ВЫБРАТЬ ПланСчетов_МД.Код КАК Код, 
		|ПланСчетов_МД.Наименование КАК Наименование,
		|ПланСчетов_МД.ПометкаУдаления КАК ПометкаУдаления,
		|ПланСчетов_МД.Родитель.Код КАК Родитель,";
		
		Для Каждого Элемент ИЗ СписокРеквизитовДляМСФО Цикл
			
			Если НЕ ПланСчетовБД.Реквизиты.Найти(Элемент.Значение)=Неопределено Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|ПланСчетов_МД."+Элемент.Значение+",";
				
				Элемент.Пометка=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПланСчетовБД.Реквизиты.Найти("ЗапретитьИспользоватьВПроводках")=Неопределено Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			|ПланСчетов_МД.ЗапретитьИспользоватьВПроводках,
			|ПланСчетов_МД.Родитель.ЗапретитьИспользоватьВПроводках КАК РодительЗапретитьИспользоватьВПроводках,";
			
		КонецЕсли;
			
		Если ТекущаяИБ Тогда
			
			Запрос = Новый Запрос;
			ТекстЗапроса=ТекстЗапроса+"
			|ПланСчетов_МД.Ссылка КАК СчетСсылка,
			|ПланСчетов_МД.Ссылка.Родитель КАК РодительСсылка,";
			
			Если НЕ ПланСчетовБД.Реквизиты.Найти("СчетИсточник")=Неопределено Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|ПланСчетов_МД.СчетИсточник КАК СчетИсточник,";
				
			КонецЕсли;
				
		Иначе
			
			Запрос = ТекСоединениеВИБ.NewObject("Запрос");
						
		КонецЕсли;
		
		Для Каждого ПризнакУчета ИЗ МассивПризнаковУчета Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|ПланСчетов_МД."+ПризнакУчета+",";
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"	
		|ВЫБОР
		|КОГДА ПланСчетов_МД.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	ТОГДА 1
		|КОГДА ПланСчетов_МД.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	ТОГДА 2
		|ИНАЧЕ 3
		|КОНЕЦ КАК Активность,";
		
		Если НЕ ПланСчетовБД.ExtDimensionTypes=Неопределено Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			| ПланСчетов_МД.ВидыСубконто.(
			|   НомерСтроки КАК Номер,
			|	ВидСубконто.Представление КАК ВидСубконто,";
			
			Если ТекущаяИБ Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|	ВидСубконто.Ссылка КАК ВидСубконтоСсылка,";
			КонецЕсли;
			
			ТекстЗапроса=ТекстЗапроса+"
			|   ТолькоОбороты КАК ТолькоОбороты,";
			
			Для Каждого ПризнакУчетаСубконто ИЗ МассивПризнаковУчетаСубконто Цикл
				
				Если Не ПустаяСтрока(ПризнакУчетаСубконто) Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|"+ПризнакУчетаСубконто+" КАК "+ПризнакУчетаСубконто+",";
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстЗапроса=ТекстЗапроса+"
			|ВидСубконто.ТипЗначения КАК ТипЗначения	
			|   ) КАК ВидыСубконто,";
			
		КонецЕсли;
		
		НаименованиеПС = Наименование;
		ОтборПланСчетов = Неопределено;
		Если ЗначениеЗаполнено(СчетБД) Тогда
			МетаданныеПС = СчетБД.Метаданные();
			НаименованиеПС = МетаданныеПС.Имя;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПланСчетов", МетаданныеПС) Тогда
			    ОтборПланСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетБД, "ПланСчетов");
				Запрос.УстановитьПараметр("ОтборПланСчетов", ОтборПланСчетов);
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|ПланСчетов_МД.Забалансовый КАК Забалансовый
		| ИЗ ПланСчетов." + НаименованиеПС + " КАК ПланСчетов_МД";
		
		Если НЕ СчетБД=Неопределено Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			|ГДЕ ПланСчетов_МД.Ссылка=&СчетБД";
			Запрос.УстановитьПараметр("СчетБД",СчетБД);
			
			Если ОтборПланСчетов <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|И ПланСчетов_МД.ПланСчетов = &ОтборПланСчетов";
			КонецЕсли;
			
		КонецЕсли;		
		
		ТекстЗапроса=ТекстЗапроса+"
		| УПОРЯДОЧИТЬ ПО ПланСчетов_МД.Код";
		
		Запрос.Текст=ТекстЗапроса;
		
		ТаблицаБД = Запрос.Execute().Unload();
		
		Для Каждого СтрокаБД Из ТаблицаБД Цикл
			
			СтрокаПланаСчетов               = мПланСчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаПланаСчетов,СтрокаБД,,"Код");
			СтрокаПланаСчетов.Код=СокрЛП(СтрокаБД.Код);
			
			Если СтрокаБД.Активность=1 Тогда
				СтрокаПланаСчетов.ВидСтрока="Активный";
			ИначеЕсли СтрокаБД.Активность=2 Тогда
				СтрокаПланаСчетов.ВидСтрока="Пассивный";
			ИначеЕсли СтрокаБД.Активность=3 Тогда
				СтрокаПланаСчетов.ВидСтрока="АктивноПассивный";
			КонецЕсли;
			
			ПризнакиУчетаСчета="";
			
			Для Каждого ПризнакУчета ИЗ МассивПризнаковУчета Цикл
				
				Если СтрокаБД[ПризнакУчета]=Истина Тогда
					
					ПризнакиУчетаСчета=ПризнакиУчетаСчета+";"+ПризнакУчета;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаПланаСчетов.ПризнакиУчета=Сред(ПризнакиУчетаСчета,2);
			ТекТаблицаСубконто=ТаблицаСубконто.СкопироватьКолонки();
			
			Если НЕ ПланСчетовБД.ExtDimensionTypes=Неопределено Тогда
				
				ВидыСубконтоБД = СтрокаБД.ВидыСубконто.Скопировать();
				ВидыСубконтоБД.Сортировать("Номер Возр");
				
				Для Каждого СтрВидСубконто ИЗ ВидыСубконтоБД Цикл
					
					НоваяСтрока=ТекТаблицаСубконто.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрВидСубконто);					
					ТекПризнакиУчетаСубконто="";
					
					Для Каждого ПризнакУчетаСубконто ИЗ МассивПризнаковУчетаСубконто Цикл
						
						Если СтрВидСубконто[ПризнакУчетаСубконто]=Истина Тогда
							
							Если ПризнакУчетаСубконто="ТолькоСальдо" Тогда
								
								НоваяСтрока.ТолькоСальдо=Истина;
								
							Иначе								
								
								ТекПризнакиУчетаСубконто=ТекПризнакиУчетаСубконто+";"+ПризнакУчетаСубконто;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НоваяСтрока.ПризнакиУчетаСубконто=Сред(ТекПризнакиУчетаСубконто,2);
					
					Если СтрВидСубконто.ТипЗначения <> NULL Тогда// для счетов, имеющих субконто
						НоваяСтрока.ТипДанных = ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ,СтрВидСубконто.ТипЗначения,Владелец);					
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаПланаСчетов.ВидыСубконто=ТекТаблицаСубконто;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьТаблицуСчетов()

Процедура ЗаполнитьПланСчетов(СчетБД=Неопределено,РеквизитПланСчетов="") Экспорт
	
	Если мПланСчетов=Неопределено ИЛИ мПланСчетов.Количество()=0 Тогда
		
		ЗаполнитьТаблицуСчетов(СчетБД);
		
	ИначеЕсли (НЕ ПланСчетовБД=Неопределено) Тогда
		
		Для Каждого Элемент ИЗ СписокРеквизитовДляМСФО Цикл
			
			Если НЕ ПланСчетовБД.Реквизиты.Найти(Элемент.Значение)=Неопределено Тогда
								
				Элемент.Пометка=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ЗаполнитьДеревоСчетов();
	
	Если НЕ (СчетБД=Неопределено ИЛИ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СчетаБД.Ссылка КАК СчетБД
		|ИЗ
		|	Справочник.СчетаБД КАК СчетаБД
		|ГДЕ
		|	СчетаБД.СчетСсылка = &СчетБД";
		
		Запрос.УстановитьПараметр("СчетБД",СчетБД);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			УправлениеОтчетамиУХ.ОбновитьСтруктуруОСВПриИзмененииСчета(Ссылка,Результат.СчетБД,Ложь);
			Справочники.СоответствияСчетовДляТрансляции.ОбновитьАналитикуСоответствия(Результат.СчетБД);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненноеЗначение(Значение, ЗначениеПоУмолчанию)
	Возврат ?(Значение <> Неопределено, Значение, ЗначениеПоУмолчанию);
КонецФункции	

Функция ОбновитьСчет(СтрокаСчет, Родитель, ВерхнийУровень, ДопСвойства = Неопределено, МассивСчетов)
	
	ЕстьИзменения = Ложь;
	
	СчетОбъект = ВернутьСчетОбъект(СтрокаСчет.Код, СтрокаСчет.СчетСсылка, ЕстьИзменения);
	
	Если ЗначениеЗаполнено(ДопСвойства) Тогда
		Для каждого Свойства Из ДопСвойства Цикл
			СчетОбъект.ДополнительныеСвойства.Вставить(Свойства.Ключ, Свойства.Значение);
		КонецЦикла;
	КонецЕсли;
		
	СчетИсточник = ЗаполненноеЗначение(СтрокаСчет.СчетИсточник, Справочники.СчетаБД.ПустаяСсылка());
	
	РеквизитыСчета = Новый Структура;
	РеквизитыСчета.Вставить("Код", СокрЛП(СтрокаСчет.Код));
	РеквизитыСчета.Вставить("Наименование", СтрокаСчет.Наименование);
	РеквизитыСчета.Вставить("ПометкаУдаления", СтрокаСчет.ПометкаУдаления);
	РеквизитыСчета.Вставить("Вид", Перечисления.ВидыСчетовБД[СтрокаСчет.ВидСтрока]);
	РеквизитыСчета.Вставить("Владелец", ЭтотОбъект.Ссылка);
	РеквизитыСчета.Вставить("Родитель", Родитель);
	РеквизитыСчета.Вставить("Забалансовый", СтрокаСчет.Забалансовый);
	РеквизитыСчета.Вставить("ПризнакиУчета", СтрокаСчет.ПризнакиУчета);
	РеквизитыСчета.Вставить("СчетСсылка", СтрокаСчет.СчетСсылка);
	РеквизитыСчета.Вставить("СчетИсточник", СчетИсточник);
	
	Для Каждого Элемент ИЗ СписокРеквизитовДляМСФО Цикл
		
		Если Не Элемент.Пометка Тогда
			
			РеквизитыСчета.Вставить(Элемент.Значение, СчетОбъект[Элемент.Значение]);
				
		ИначеЕсли Элемент.Значение="ВидКурса" Тогда
			
			ВидКурса = ЗаполненноеЗначение(СтрокаСчет.ВидКурса, Перечисления.ВидыКурсовДляСчетов.ПустаяСсылка());
			РеквизитыСчета.Вставить("ВидКурса", ВидКурса);
			
		ИначеЕсли Элемент.Значение="РазделПланаСчетов" Тогда 
			
			РазделПланаСчетов = ЗаполненноеЗначение(СтрокаСчет.РазделПланаСчетов, Справочники.РазделыПланаСчетов.ПустаяСсылка());
			РеквизитыСчета.Вставить("РазделПланаСчетов", РазделПланаСчетов);
						
		ИначеЕсли Элемент.Значение="ПересчитыватьВалютнуюСумму" Тогда
			
			РеквизитыСчета.Вставить("ПересчитыватьВалютнуюСумму", СтрокаСчет.ПересчитыватьВалютнуюСумму);
			
		ИначеЕсли Элемент.Значение="ВидОтложенногоНалога" И ВерхнийУровень Тогда
			
			ВидОтложенногоНалога = ЗаполненноеЗначение(СтрокаСчет.ВидОтложенногоНалога, Справочники.ВидыВременныхРазниц.ПустаяСсылка());
			РеквизитыСчета.Вставить("ВидОтложенногоНалога", ВидОтложенногоНалога);
			
		Иначе
			
			РеквизитыСчета.Вставить(Элемент.Значение, СтрокаСчет[Элемент.Значение]);
					
		КонецЕсли;
		
	КонецЦикла;

	Если СтрокаСчет.ВидыСубконто <> Неопределено Тогда 				
		
		ТабВидыСубконто = СтрокаСчет.ВидыСубконто.Скопировать();
		Для каждого Строка Из ТабВидыСубконто Цикл
			Строка.ТолькоСальдо = ЗаполненноеЗначение(Строка.ТолькоСальдо, Ложь); // Неопределено, а должно быть Ложь
		КонецЦикла;
		
		РаботаСОбъектамиМетаданныхУХ.ЗагрузитьИзмененнуюТабЧасть(СчетОбъект.ВидыСубконто, ТабВидыСубконто, ЕстьИзменения);
		
	КонецЕсли;
	
	РаботаСОбъектамиМетаданныхУХ.ЗаполнитьИзмененныеРеквизиты(СчетОбъект, РеквизитыСчета,, ЕстьИзменения);
	
	Если СчетОбъект.РазделПланаСчетов.Пустая() 
		И СчетОбъект.Владелец = УчетМСФОПовтИспУХ.ПолучитьПланСчетовПоИмениРБ("Хозрасчетный") Тогда
	
		РазделПС = Справочники.СчетаБД.КатегорияСчетаРСБУ(СчетОбъект.Код);
		Если ЗначениеЗаполнено(РазделПС) Тогда
			ЕстьИзменения = Истина;
			СчетОбъект.РазделПланаСчетов = РазделПС;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ЗаписатьСчет(СчетОбъект);
	КонецЕсли;

	МассивСчетов.Добавить(
		Новый Структура("Ссылка, ГруппирующийСчет", СчетОбъект.Ссылка, СчетОбъект.ГруппирующийСчет));

	
	Возврат СчетОбъект;
	
КонецФункции	

Процедура ЗаполнитьДеревоСчетов() 
	
	НачатьТранзакцию();
	
	МассивСчетов = Новый Массив;
	МассивГрупповыхСчетов = Новый Массив;
	
	МассивУровень = мПланСчетов.НайтиСтроки(Новый Структура("Родитель",""));
	
	Если МассивУровень.Количество() = 0 Тогда
		
		Для Каждого СтрокаСчет ИЗ мПланСчетов Цикл
				
			ТекущийРодитель = ВернутьСчетОбъект(СтрокаСчет.Родитель, СтрокаСчет.РодительСсылка);
			
			Если ТекущийРодитель <> Неопределено Тогда
				
				СчетОбъект = ОбновитьСчет(СтрокаСчет, ТекущийРодитель.Ссылка, Истина,, МассивСчетов);
				
				ЗапретитьИспользоватьВПроводках=?(ТипЗнч(СтрокаСчет.РодительЗапретитьИспользоватьВПроводках)=Тип("Булево"),СтрокаСчет.РодительЗапретитьИспользоватьВПроводках,Истина);
				
				Если НЕ ТекущийРодитель.ГруппирующийСчет=ЗапретитьИспользоватьВПроводках Тогда
					
					ТекущийРодитель.ГруппирующийСчет = ЗапретитьИспользоватьВПроводках;
					ЗаписатьСчет(ТекущийРодитель, Истина);
					
				КонецЕсли;
				
				Если ТекущийРодитель.ГруппирующийСчет Тогда
					
					МассивГрупповыхСчетов.Добавить(ТекущийРодитель.Ссылка);
					
				КонецЕсли;
				
				ДобавитьСубсчета(СтрокаСчет, СчетОбъект, МассивСчетов, МассивГрупповыхСчетов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаСчет ИЗ МассивУровень Цикл
			
			СчетРодитель = Справочники.СчетаБД.ПустаяСсылка();
			
			СчетОбъект = ОбновитьСчет(СтрокаСчет, СчетРодитель, Истина,, МассивСчетов);				
			ДобавитьСубсчета(СтрокаСчет, СчетОбъект, МассивСчетов, МассивГрупповыхСчетов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТрансляционныйРезервУХ.ОбновитьКоэффициентТР(Ссылка, Ложь);
	
	Для каждого Счет Из МассивСчетов Цикл
		// счет перестал быть групповым
		Если Счет.ГруппирующийСчет И МассивГрупповыхСчетов.Найти(Счет.Ссылка) = Неопределено Тогда
			СчетОбъект = Счет.Ссылка.ПолучитьОбъект();
			СчетОбъект.ГруппирующийСчет = Ложь;
			ЗаписатьСчет(СчетОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ВернутьСчетОбъект(КодСчета, СсылкаДляПоиска=Неопределено, ЕстьИзменения = Ложь)
	
	СчетОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаДляПоиска) Тогда
		
		СчетСсылка = Справочники.СчетаБД.НайтиПоРеквизиту("СчетСсылка", СсылкаДляПоиска,, Ссылка);
		
	Иначе
		
		СчетСсылка = Справочники.СчетаБД.НайтиПоКоду(КодСчета,,, Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетСсылка) Тогда
		
		СчетОбъект = СчетСсылка.ПолучитьОбъект();
		
	Иначе
		
		СчетОбъект = Справочники.СчетаБД.СоздатьЭлемент();
		СчетОбъект.Владелец = Ссылка;
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Возврат СчетОбъект;
	
КонецФункции // ВернутьСчетОбъект() 

Процедура ЗаписатьСчет(СчетОбъект, РежимЗагрузки = Ложь)
	Если РежимЗагрузки Тогда
		СчетОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;	
	СчетОбъект.ЗаписьИзФормы = Ложь;
	СчетОбъект.ИзмененСчетСсылка=Истина;
	СчетОбъект.Записать();
КонецПроцедуры

Процедура ДобавитьСубсчета(СтрокаРодитель, ТекущийРодитель, МассивСчетов, МассивГрупповыхСчетов)
	
	МассивУровень = мПланСчетов.НайтиСтроки(Новый Структура("Родитель", СтрокаРодитель.Код));
	ДопСвойстваСчета = Новый Структура("НеОбновлятьТР", Истина);
	
	Для Каждого СтрокаСчет ИЗ МассивУровень Цикл
		
		СчетОбъект = ОбновитьСчет(СтрокаСчет, ТекущийРодитель.Ссылка, Ложь, ДопСвойстваСчета, МассивСчетов);
		
		ЗапретитьИспользоватьВПроводках=?(ТипЗнч(СтрокаСчет.РодительЗапретитьИспользоватьВПроводках)=Тип("Булево"),СтрокаСчет.РодительЗапретитьИспользоватьВПроводках,Истина);
		
		Если НЕ ТекущийРодитель.ГруппирующийСчет=ЗапретитьИспользоватьВПроводках Тогда
			
			ТекущийРодитель.ГруппирующийСчет = ЗапретитьИспользоватьВПроводках;
			ЗаписатьСчет(ТекущийРодитель, Истина);
			
		КонецЕсли;
		
		Если ТекущийРодитель.ГруппирующийСчет Тогда
			
			МассивГрупповыхСчетов.Добавить(ТекущийРодитель.Ссылка);
			
		КонецЕсли;
		
		ДобавитьСубсчета(СтрокаСчет, СчетОбъект, МассивСчетов, МассивГрупповыхСчетов);
		
	КонецЦикла;	
	
	Если МассивУровень.Количество() > 0 Тогда	
		
		ДанныеРодителя=мПланСчетов.Найти(СтрокаРодитель.Код,"Код");
		ЗапретитьИспользоватьВПроводках=?(ТипЗнч(ДанныеРодителя.ЗапретитьИспользоватьВПроводках)=Тип("Булево"),ДанныеРодителя.ЗапретитьИспользоватьВПроводках,Истина);
		
		Если НЕ ТекущийРодитель.ГруппирующийСчет=ЗапретитьИспользоватьВПроводках Тогда
			
			ТекущийРодитель.ГруппирующийСчет = ЗапретитьИспользоватьВПроводках;
			ЗаписатьСчет(ТекущийРодитель, Истина);
			
		КонецЕсли;
		
		Если ТекущийРодитель.ГруппирующийСчет Тогда
			
			МассивГрупповыхСчетов.Добавить(ТекущийРодитель.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

Функция ПроверитьНаименование()
	
	ЕстьОшибки=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Для обрабатываемого плана счетов информационной базы не указано наименование.'"),ЕстьОшибки,,СтатусСообщения.Внимание);
		
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
			
КонецФункции // ПроверитьНаименование()

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьНаименование() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СчетТР", Ссылка.СчетТР);
	
	Если ПланСчетовМСФО Тогда
		
		ПланСчетовМетаданные="МСФО";
		
	КонецЕсли;
			
КонецПроцедуры 
	
Функция Использование77() Экспорт
		
	Если Используется77 = Неопределено Тогда
		Используется77 = (Владелец.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);	
	КонецЕсли;
	
	Возврат Используется77;
	
КонецФункции

Процедура ПриЗаписи(Отказ)
	
	Перем СчетТРДоЗаписи;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновитьТР") И ДополнительныеСвойства.ОбновитьТР = Истина Тогда
		ТрансляционныйРезервУХ.ОбновитьКоэффициентТР(Ссылка, Отказ);
	ИначеЕсли ДополнительныеСвойства.Свойство("СчетТР", СчетТРДоЗаписи) И (СчетТРДоЗаписи <> СчетТР) Тогда
		ТрансляционныйРезервУХ.ОбновитьКоэффициентТР(Ссылка, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчетаОСВ) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтчетаОСВ,"ИспользоватьПоУмолчанию") Тогда
		
		СправочникОбъект=ВидОтчетаОСВ.ПолучитьОбъект();
		СправочникОбъект.ИспользоватьПоУмолчанию=Истина;
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		
		Попытка
			
			СправочникОбъект.Записать();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось установить признак ""является основным для плана счетов"" %1 у вида отчета %2: %3'"), 
				Ссылка, ВидОтчетаОСВ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),Отказ,,СтатусСообщения.Важное);
			
		КонецПопытки;

		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.ПланСчетов = &ПланСчетов
		|	И ВидыОтчетов.ИспользоватьПоУмолчанию
		|	И НЕ ВидыОтчетов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ПланСчетов",				Ссылка);
		Запрос.УстановитьПараметр("Ссылка",					ВидОтчетаОСВ);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ИспользоватьПоУмолчанию=Ложь;
			
			СправочникОбъект.ОбменДанными.Загрузка=Истина;
			
			Попытка
				
				СправочникОбъект.Записать();
				
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось снять признак ""является основным для плана счетов"" %1 у вида отчета %2: %3'"), 
					Ссылка, Результат.Ссылка, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),Отказ,,СтатусСообщения.Важное);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

мОписаниеТиповСтрока=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150);
мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
мОписаниеТиповТЗ=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ();
мОписаниеТиповСписокЗначений=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений();

СписокРеквизитовДляМСФО=Новый СписокЗначений;
СписокРеквизитовДляМСФО.Добавить("РазделПланаСчетов");
СписокРеквизитовДляМСФО.Добавить("ВидКурса");
СписокРеквизитовДляМСФО.Добавить("ПересчитыватьВалютнуюСумму");
СписокРеквизитовДляМСФО.Добавить("ВидОтложенногоНалога");
СписокРеквизитовДляМСФО.Добавить("Наименование1");
СписокРеквизитовДляМСФО.Добавить("Наименование2");

#КонецЕсли