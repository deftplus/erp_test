#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует компоновщик настроек компоновки данных,
// по данным источника получения данных хозяйственной операции.
//
// Параметры:
//	Форма - Форма - форма объекта.
//	ХозяйственнаяОперация - СправочникСсылка.НастройкиХозяйственныхОпераций - хозяйственная операция,
//							определяющая источник получения данных.
//
Процедура ИнициализироватьКомпоновщик(Форма, ХозяйственнаяОперация) Экспорт

	Форма.АдресСхемыКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанных(Форма, ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Форма.АдресСхемыКомпоновкиДанных) Тогда
		Форма.Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.АдресСхемыКомпоновкиДанных));
	КонецЕсли;

КонецПроцедуры

// Загружает настройки в компоновщик настроек.
//
// Параметры:
//	Форма - Форма - форма объекта.
//	Настройки - НастройкиКомпоновкиДанных - загружаемые настройки.
//
Процедура ЗагрузитьНастройки(Форма, Настройки) Экспорт

	Если Настройки <> Неопределено Тогда
		Форма.Компоновщик.ЗагрузитьНастройки(Настройки);
	КонецЕсли;

КонецПроцедуры

// Записывает информацию о дополнительном отборе, установленном в объекте.
// Вызывается в событиях "ПередЗаписьюНаСервере" в формах справочника.
//
// Параметры:
//	Форма - Форма - форма объекта.
//	Объект - СправочникОбъект.ШаблоныПроводокДляМеждународногоУчета - записываемый объект.  
//
Процедура ЗаписатьДополнительныйОтбор(Форма, Объект) Экспорт

	Объект.ДополнительныйОтбор = Новый ХранилищеЗначения(Форма.Компоновщик.ПолучитьНастройки());
	Объект.ПредставлениеОтбора = Строка(Форма.Компоновщик.Настройки.Отбор);

КонецПроцедуры

// Формирует индекс картинки для объекта справочника.
//
// Параметры:
//	ШаблонПроводки - СправочникОбъект.ШаблоныПроводокДляМеждународногоУчета - шаблон проводки.
//
// Возвращаемое значение:
//	Число - индекс картинки.
//
Функция ИндексКартинки(ШаблонПроводки) Экспорт

	Если ШаблонПроводки.ЭтоГруппаШаблонов Тогда
		Если ШаблонПроводки.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все Тогда
			Результат = 0;
		Иначе
			Результат = 1;
		КонецЕсли;
	Иначе
		Результат = 2;
	КонецЕсли;
	
	Если ШаблонПроводки.ПометкаУдаления Тогда
		Результат = Результат + 3
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоГруппаШаблонов = Ложь;
		ШаблонПроводки = Неопределено;
		Если Параметры.Свойство("Ключ", ШаблонПроводки) И ЗначениеЗаполнено(ШаблонПроводки)
			ИЛИ Параметры.Свойство("ЗначениеКопирования", ШаблонПроводки) И ЗначениеЗаполнено(ШаблонПроводки) Тогда
			ЭтоГруппаШаблонов = МеждународнаяОтчетностьВызовСервера.ЭтоГруппаШаблонов(ШаблонПроводки);
		ИначеЕсли Параметры.Свойство("ДополнительныеПараметры") Тогда
			Если Параметры.ДополнительныеПараметры.Свойство("ЭтоГруппаШаблонов") Тогда
				ЭтоГруппаШаблонов = Параметры.ДополнительныеПараметры.ЭтоГруппаШаблонов;
			КонецЕсли;
		КонецЕсли;
		
		ВыбраннаяФорма = "Справочник.ШаблоныПроводокДляМеждународногоУчета.Форма." + ?(ЭтоГруппаШаблонов, "ФормаГруппы", "ФормаЭлемента");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСхемуКомпоновкиДанных(Форма, ХозяйственнаяОперация)

	АдресСКД = Неопределено;
	СхемаКомпоновкиДанных = ИсточникиДанныхПовтИсп.СхемаПолученияДанных(ХозяйственнаяОперация);
	Если СхемаКомпоновкиДанных <> Неопределено Тогда
		АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат АдресСКД;

КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ШаблоныПроводокДляМеждународногоУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8f03d6e4-0af4-430e-b890-e9def3991160");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ШаблоныПроводокДляМеждународногоУчета.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Конвертирует выражения заполнения субконто в новый формат.
	|Заполняет реквизит ""План счетов"".';
	|en = 'Converts extra dimension population expressions to a new format.
	|Populates the ""Chart of accounts"" attribute.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьВидыКонтактнойИнформацииУТ";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

#Область Обработчики_2_5_5

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ШаблоныПроводокДляМеждународногоУчета";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныПроводокДляМеждународногоУчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводокДляМеждународногоУчета
	|ГДЕ
	|	НЕ ШаблоныПроводокДляМеждународногоУчета.УдалитьПереходНаНовыеФормулыВыполнен
	|	ИЛИ ШаблоныПроводокДляМеждународногоУчета.ПланСчетов = ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ШаблоныПроводокДляМеждународногоУчета";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПланСчетовПоУмолчанию = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			Иначе
				
				ОбъектИзменен = Ложь;
			
				ОбработатьИзменениеВыраженийЗаполненияСубконто(СправочникОбъект, ОбъектИзменен);
				
				Если Не ЗначениеЗаполнено(СправочникОбъект.ПланСчетов) Тогда
					СправочникОбъект.ПланСчетов = ПланСчетовПоУмолчанию;
				КонецЕсли;
				
				Если СправочникОбъект.Модифицированность() Или ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


// Выполняет обработку изменений выражений заполнения аналитик (перевод формул на новый формат).
// 
// Параметры:
// 	СправочникОбъект - СправочникОбъект.ШаблоныПроводокДляМеждународногоУчета - Обрабатываемый объект.
// 	ОбъектИзменен - Булево - Флаг изменения объекта.
//
Процедура ОбработатьИзменениеВыраженийЗаполненияСубконто(СправочникОбъект, ОбъектИзменен)
	
	Если НЕ СправочникОбъект.УдалитьПереходНаНовыеФормулыВыполнен Тогда
		ВыраженияДляОбработки = Новый Соответствие;
		ИсходныеВыражения = Новый Массив;
		Для Каждого СтрокаТЧ Из СправочникОбъект.НастройкиЗаполненияСубконто Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Выражение)
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.ВыражениеИсторияПереходаНаНовыеФормулы) Тогда
				ИндексСтроки = СправочникОбъект.НастройкиЗаполненияСубконто.Индекс(СтрокаТЧ);
				ВыраженияДляОбработки.Вставить(ИндексСтроки, СтрокаТЧ.Выражение);
				Если ИсходныеВыражения.Найти(СтрокаТЧ.Выражение) = Неопределено Тогда
					ИсходныеВыражения.Добавить(СтрокаТЧ.Выражение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВыраженияДляОбработки.Количество() = 0 Тогда
			
			СхемаПолученияДанных = ИсточникиДанныхПовтИсп.СхемаПолученияДанных(СправочникОбъект.Операция);
			
			
			РезультатПреобразований = РаботаСФормулами.ПреобразоватьВФорматИдентификаторовОперандыФормулыСКД(ИсходныеВыражения,
				СхемаПолученияДанных);
				
			Если РезультатПреобразований.ЕстьОшибки Тогда
				ТекстОшибок = "";
				Для Каждого КлючИЗначение Из РезультатПреобразований.СообщенияОшибокПреобразования Цикл
					ТекстОшибок = ТекстОшибок + ?(ТекстОшибок = "", "", " / " + Символы.ПС) + КлючИЗначение.Значение;
				КонецЦикла;
				СправочникОбъект.УдалитьЕстьОшибкиПереходаНаНовыйФорматФормул = Истина;
				ИмяСобытияОшибкиЖР = НСтр("ru = 'Перевод формул и выражение в новый формат';
											|en = 'Conversion of formulas and expression to a new format'");
				ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиЖР,
					УровеньЖурналаРегистрации.Ошибка,
					СправочникОбъект.Метаданные(),
					СправочникОбъект.Ссылка,
					ТекстОшибок);
				// Переход на новый формат формул не гарантируется, т.к. выражения могут содержать ошибки.
				// Отказа от транзакции не происходит.
			КонецЕсли;
			
			ПреобразованныеВыражения = РезультатПреобразований.ПреобразованныеВыражения;
			Для каждого ИндексСтрокиИВыражение Из ВыраженияДляОбработки Цикл
				ИндексСтроки = ИндексСтрокиИВыражение.Ключ;
				СтрокаТЧ = СправочникОбъект.НастройкиЗаполненияСубконто[ИндексСтроки];
				
				ИсходноеВыражение = ИндексСтрокиИВыражение.Значение;
				ВыражениеЗамены = ПреобразованныеВыражения.Получить(ИсходноеВыражение);
				Если ЗначениеЗаполнено(ВыражениеЗамены) Тогда
					СтрокаТЧ.Выражение = ВыражениеЗамены;
				КонецЕсли;
				СтрокаТЧ.ВыражениеИсторияПереходаНаНовыеФормулы = ИсходноеВыражение;
			КонецЦикла;
			
		КонецЕсли;
		
		СправочникОбъект.УдалитьПереходНаНовыеФормулыВыполнен = Истина;
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
