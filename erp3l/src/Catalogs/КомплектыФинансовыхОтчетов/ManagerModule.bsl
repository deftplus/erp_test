#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.КомплектыФинансовыхОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1758a4ed-dbe0-4f3f-89d9-f96396bc9b64");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КомплектыФинансовыхОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет табличную часть ""Планы счетов"".';
									|en = 'Populates the ""Charts of accounts"" table.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КомплектыФинансовыхОтчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.КомплектыФинансовыхОтчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.КомплектыФинансовыхОтчетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КомплектыФинансовыхОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КомплектыФинансовыхОтчетов КАК КомплектыФинансовыхОтчетов
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.КомплектыФинансовыхОтчетов.ПланыСчетов КАК КомплектыФинансовыхОтчетовПланСчетов
	|		ГДЕ
	|			КомплектыФинансовыхОтчетовПланСчетов.Ссылка = КомплектыФинансовыхОтчетов.Ссылка)");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Элемент Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			Ссылка = Элемент.Ссылка;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Ссылка.ПолучитьОбъект(); //- СправочникОбъект.КомплектыФинансовыхОтчетов - 
			
			Если Объект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
			Иначе
				Если Не Объект.ЭтоГруппа И Не Объект.ПланыСчетов.Количество() Тогда
					Если Объект.УдалитьВидПоказателей = Перечисления.УдалитьВидыПоказателейОтчетности.Международные Тогда
						Объект.ПланыСчетов.Добавить().ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.Международный;
					//++ Локализация
					ИначеЕсли Объект.УдалитьВидПоказателей = Перечисления.УдалитьВидыПоказателейОтчетности.Регламентированные Тогда
						Объект.ПланыСчетов.Добавить().ПланСчетов = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("ПланСчетов.Хозрасчетный");
					ИначеЕсли Объект.УдалитьВидПоказателей = Перечисления.УдалитьВидыПоказателейОтчетности.МеждународныеИРегламентированные Тогда
						Объект.ПланыСчетов.Добавить().ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.Международный;
						Объект.ПланыСчетов.Добавить().ПланСчетов = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("ПланСчетов.Хозрасчетный");
					//-- Локализация
					КонецЕсли;
				КонецЕсли;
				
				Если Объект.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
