
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МАКСИМУМ(СтрокиОтчетов.ПорядковыйНомер) КАК ПорядковыйНомер
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &ВидОтчета
		|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
		|	И СтрокиОтчетов.Родитель = &Родитель");
		Запрос.УстановитьПараметр("ВидОтчета", Объект.Владелец);
		Запрос.УстановитьПараметр("Родитель", Объект.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.ПорядковыйНомер = ?(Выборка.Получить(0) = Null, 0, Выборка.Получить(0)) + 1;
		Иначе
			Объект.ПорядковыйНомер = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
	Если Объект.Владелец.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		ПланСчетов=Объект.Владелец.ПланСчетов;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПроверитьНаличиеПротоколов();
		
	Иначе
		
		Элементы.ФормаПротоколы.Видимость=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеПротоколов()
	
	ЕстьПротоколы=Справочники.ПротоколируемыеСобытия.ЕстьПротоколыПоОбъекту(Объект.Ссылка);
	
	Если ЕстьПротоколы>0 Тогда
		
		Элементы.ФормаПротоколы.Видимость=Истина;
		
		Если ЕстьПротоколы=3 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.ВниманиеКрасный;
			
		ИначеЕсли ЕстьПротоколы=2 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.НастройкаЭлементовОтчетов_32;
			
		Иначе
			
			Элементы.ФормаПротоколы.Картинка=Новый Картинка;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ФормаПротоколы.Видимость=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьНаличиеПротоколов() 

&НаСервере
Процедура ПриИзмененииСчетаБД()
	
	Объект.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСчета(Объект.Владелец,Объект.СчетБД);
	
	Если ЗначениеЗаполнено(Объект.ГруппаРаскрытия) Тогда
		
		Объект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
	Иначе
		
		Объект.ВидИтога="";
		
	КонецЕсли;
		
	Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	
	Если Объект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Активный  Тогда
		Объект.ВидПоказателя=Перечисления.ВидыПоказателей.Активный;
	ИначеЕсли Объект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда
		Объект.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование=СокрЛП(Объект.СчетБД.Код)+" "+Объект.СчетБД.Наименование;;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Код) Тогда
		Объект.Код="Счет_"+СтрЗаменить(СокрЛП(Объект.СчетБД.Код),".","_");
	КонецЕсли;
		
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииСчетаБД()

&НаСервере
Функция ПроизвольныеДанные() Экспорт
	
	Возврат Объект.Предназначение.Пустая() ИЛИ Объект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	ЕстьВидимостьИтога = (НЕ Объект.ГруппаРаскрытия = Справочники.ГруппыРаскрытия.ПустаяСсылка()) 
				И (Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число ИЛИ Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Дата);
	
	Элементы.ВидИтога.Видимость        = ЕстьВидимостьИтога;
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
	
		ПоказательБюджета=Истина;
		Элементы.СчетБД.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Истина;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Объект.Владелец.РазделениеПоПроектам;
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
	
		ПоказательБюджета=Истина;
		Элементы.СчетБД.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Истина;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Объект.Владелец.РазделениеПоПроектам;
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда 
	
		ПоказательБюджета=Истина;
		Элементы.СчетБД.Видимость=Истина;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Ложь
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда 
	
		ПоказательБюджета=Истина;
		Элементы.СчетБД.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Истина;
		Элементы.РазделениеПоПроектам.Видимость=Объект.Владелец.РазделениеПоПроектам;
		
	Иначе
		
		ПоказательБюджета=Ложь;
		Элементы.СчетБД.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Ложь;
		
	КонецЕсли;
	
	ПоказательБюджета= ПоказательБюджета И (ЗначениеЗаполнено(Объект.СчетБД) ИЛИ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) ИЛИ ЗначениеЗаполнено(Объект.СтатьяДоходовИРасходов) ИЛИ ЗначениеЗаполнено(Объект.СтатьяДвиженияРесурсов));
	
	Элементы.Внутригрупповой.Видимость = УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(Объект.ГруппаРаскрытия);
		
	Элементы.НеМасштабируется.Доступность         = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		
	Элементы.ГруппаРаскрытия.ТолькоПросмотр = ПоказательБюджета;
	Элементы.ВидИтога.ТолькоПросмотр 		= ПоказательБюджета;
	Элементы.ВидПоказателя.ТолькоПросмотр	= ПоказательБюджета;
	Элементы.ТипЗначения.ТолькоПросмотр		= ПоказательБюджета;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРаскрытияПриИзменении(Элемент)
	
	Если Объект.ГруппаРаскрытия.Пустая() Тогда
		
		Объект.ВидИтога = ПредопределенноеЗначение("Перечисление.ВидыИтоговПоказателя.ПустаяСсылка");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПриходРасход) И Объект.ВидПоказателя=ПредопределенноеЗначение("Перечисление.ВидыДанныхПоказателейОтчетов.ДвиженияДенежныхСредств") Тогда
		Сообщить(Нстр("ru = 'Не указано направление движения (приход/расход)'"), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;

	УстановитьВидимость();

	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоказателяНаСервере()
	
	Если НЕ Объект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные Тогда
				
		Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
				
		Если Не Объект.ГруппаРаскрытия.Предназначение=Объект.Предназначение Тогда
			
			Объект.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход;
			Объект.ГруппаРаскрытия=Неопределено;
			
		КонецЕсли;
				
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРаскрытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПроизвольныеДанные() Тогда
		
		Возврат;
		
	Иначе
		
		СтандартнаяОбработка=Ложь;
		ОткрытьФорму("Справочник.ГруппыРаскрытия.ФормаВыбора"
						, Новый Структура("Отбор", Новый Структура("Владелец, Предназначение"
																	, Объект.Владелец
																	, Объект.Предназначение))
						, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		Объект.Наименование = УправлениеОтчетамиУХ.НаименованиеПоКоду(Объект.Код);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБДПриИзменении(Элемент)
	
	ПриИзмененииСчетаБД();
		
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатьи()
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда	
		
		РабочаяСтатья=Объект.СтатьяДвиженияДенежныхСредств;
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда	
		
		РабочаяСтатья=Объект.СтатьяДвиженияРесурсов;
		
	Иначе
		
		РабочаяСтатья=Объект.СтатьяДоходовИРасходов;
		
	КонецЕсли;
	
	Объект.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(Объект.Владелец,РабочаяСтатья,Объект.РазделениеПоПроектам);
				
	Если ЗначениеЗаполнено(Объект.ГруппаРаскрытия) Тогда
		
		Объект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
	Иначе
		
		Объект.ВидИтога="";
		
	КонецЕсли;
		
	Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование=РабочаяСтатья.Наименование;;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Код) Тогда
		Объект.Код=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Объект.Наименование);
	КонецЕсли;
	
	Объект.ПриходРасход=РабочаяСтатья.ПриходРасход;
		
	УстановитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовИРасходовПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредназначениеПриИзменении(Элемент)
	
	ОбработатьИзменениеПоказателяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияРесурсовПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделениеПоПроектамПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСтатьиБюджета(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора",			Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",	Истина);
	СтруктураПараметров.Вставить("Предназначение",		Объект.Предназначение);
	СтруктураПараметров.Вставить("СтрокаОтчета",		Объект.Ссылка);
	СтруктураПараметров.Вставить("СправочникСтруктуры",	"СтрокиОтчетов");
	СтруктураПараметров.Вставить("СтатьяБюджета",		Объект[Элемент.Имя]);
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Стр = "ОбщаяФорма.ФормаВыбораСтатьиБюджета";
		ОткрытьФорму(Стр, СтруктураПараметров, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли
		
КонецПроцедуры // НачалоВыбораСтатьиБюджета() 

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи=Новый Структура("Закрыть");
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗакрытьПослеЗаписи=ПараметрыЗаписи.Свойство("Закрыть");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		АдресПараметровРеструктуризации=ПолучитьПараметрыРеструктуризации(Отказ);
		
		Если АдресПараметровРеструктуризации=Неопределено Тогда
			Возврат;
		КонецЕсли;	

		
		Если ЕстьЗаписиДанных(АдресПараметровРеструктуризации) Тогда
			
			Отказ=Истина;
			ОписаниеОповещения=Новый ОписаниеОповещения("ПодтверждениеРеструктуризацииЗавершение",ЭтотОбъект,ПараметрыЗаписи);
			ОткрытьФорму("Обработка.РеструктуризацияДанных.Форма",Новый Структура("АдресПараметровРеструктуризации,",АдресПараметровРеструктуризации),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе	
			
			ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи);
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьЗаписиДанных(АдресПараметровРеструктуризации)
	
	ПараметрыРеструкутризации = ПолучитьИзвременногоХранилища(АдресПараметровРеструктуризации);
	Если ПараметрыРеструкутризации.Свойство("ЕстьЗаписиПоЭлементуСтруктуры") И ПараметрыРеструкутризации.ЕстьЗаписиПоЭлементуСтруктуры Тогда
		 Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПодтверждениеРеструктуризацииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия=Неопределено Тогда
		
		ВыполнитьЗаписьОбъекта(РезультатЗакрытия,ДополнительныеПараметры);
				
	КонецЕсли;
		
КонецПроцедуры // ПодтверждениеРеструктуризацииЗавершение()
#Область ЗаписьОбъекта

&НаКлиенте
Процедура ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписьНовогоОбъекта=Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи) Тогда
		
		Модифицированность=Ложь;
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы)=Тип("ТаблицаФормы") Тогда
			
			ЭтаФорма.ВладелецФормы.Обновить();
			
		КонецЕсли;
		
		ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
				
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗаписьОбъекта()
	
&НаСервере
Функция ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресПараметровРеструктуризации=АдресПараметровРеструктуризации;
	
	Отказ=Ложь;
	
	НачатьТранзакцию();
	
	ПередЗаписьюОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		РабочийОбъект.Записать();
		
		ПриЗаписиОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

		ПослеЗаписиОбъектаСервер(РабочийОбъект,ПараметрыЗаписи);
						
		ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
		
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьОбъектВФорме()

&НаСервере
Процедура ПередЗаписьюОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры // ПередЗаписьюОбъектаКлиент() 

&НаСервере
Процедура ПриЗаписиОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	
КонецПроцедуры // ПриЗаписиОбъектаСервер()

&НаСервере
Процедура ПослеЗаписиОбъектаСервер(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("Закрыть") Тогда
		
		ПроверитьНаличиеПротоколов();
		
	КонецЕсли;	
	
КонецПроцедуры // ПослеЗаписиОбъектаСервер()

&НаКлиенте
Процедура ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи)
	
	Если ЗакрытьПослеЗаписи И ЭтотОбъект.Открыта() Тогда
		
		Закрыть();
		
	КонецЕсли;	
		
КонецПроцедуры // ПослеЗаписиОбъектаКлиент()

#КонецОбласти

&НаСервере
Функция ПолучитьПараметрыРеструктуризации(Отказ)
	
	ИзмененныйОбъект=РеквизитФормыВЗначение("Объект");
				
	ПараметрыРеструктуризации=Справочники.ГруппыРаскрытия.ПроверитьНеобходимостьРеструктуризацииДанныхЭлементСтруктуры(ИзмененныйОбъект,Объект.Ссылка);
	
	Если НЕ ПараметрыРеструктуризации=Неопределено Тогда
		
		Возврат ПоместитьВоВременноеХранилище(ПараметрыРеструктуризации,ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьПараметрыРеструктуризации()


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СвойстваСтрокиИзменены");
	
	Если ЗакрытьПослеЗаписи Тогда
		
		ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Протоколы(Команда)
	
	ОткрытьФорму("Справочник.ПротоколируемыеСобытия.ФормаСписка",Новый Структура("Отбор",Новый Структура("Объект",Объект.Ссылка)));
	
КонецПроцедуры

