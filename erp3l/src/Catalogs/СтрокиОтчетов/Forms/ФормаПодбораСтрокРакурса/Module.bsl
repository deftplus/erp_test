
&НаКлиенте
Перем ВыбранныеСтроки;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Ракурс = Параметры.Ракурс;

	УстановитьУОСписка();
	
	ВыбранныеСтрокиПараметр.ЗагрузитьЗначения(Параметры.СписокСтрок.ВыгрузитьЗначения());
	
	ВидОтчета = Параметры.ВидОтчета;
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(СтрокиСписок.Отбор,"Владелец",ВидОтчета,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбранныеСтроки = ВыбранныеСтрокиПараметр.ВыгрузитьЗначения();

	СтрокиСписок.Параметры.УстановитьЗначениеПараметра("ВыбранныеПоказатели",ВыбранныеСтроки);
  	СтрокиСписок.Параметры.УстановитьЗначениеПараметра("ТекущаяОбласть",Ракурс);

			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура ПометитьПодчиненныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		ВыделенныеСДочерними = Новый Массив;
		ПолучитьСписокСДочерними(ДополнительныеПараметры.ВыделенныеСтроки,ВыделенныеСДочерними);
		УстановитьПометкуСтрок(ВыделенныеСДочерними,ДополнительныеПараметры.Пометка);
	Иначе	
		УстановитьПометкуСтрок(ДополнительныеПараметры.ВыделенныеСтроки,ДополнительныеПараметры.Пометка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть(ВыбранныеСтроки);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();		
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Пометить(Команда)
	
	ВыделенныеСтроки = Новый Массив();
	
	//Если Элементы.ГруппаСтраницы.ТекущаяСтраница.имя = "Макет" Тогда
		
		Для Инд = 2 по ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл						
			ВыделенныеСтроки.Добавить(ПолеТабличногоДокументаМакет.Область(Инд,2,Инд,2).Расшифровка);								
		КонецЦикла;	  
		
	//КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;			
	ВыделенныеСДочерними = Новый Массив;
	ПолучитьСписокСДочерними(ВыделенныеСтроки,ВыделенныеСДочерними);
	УстановитьПометкуСтрок(ВыделенныеСДочерними,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	ВыделенныеСтроки = Новый Массив();
	
	//Если Элементы.ГруппаСтраницы.ТекущаяСтраница.имя = "Макет" Тогда
			Для Инд = 2 по ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл						
				ВыделенныеСтроки.Добавить(ПолеТабличногоДокументаМакет.Область(Инд,2,Инд,2).Расшифровка);								
			КонецЦикла;	  
	//КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	ВыделенныеСДочерними = Новый Массив;
	ПолучитьСписокСДочерними(ВыделенныеСтроки,ВыделенныеСДочерними);
	УстановитьПометкуСтрок(ВыделенныеСДочерними,Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолетабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ВыделенныеСтроки = Новый Массив();
	
	Если Область.Лево = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Если Область.Расшифровка =1 ИЛИ Область.Расшифровка =0 Тогда
			
			Если  Область.Расшифровка =1 Тогда 
				Пометка = 0;
			Иначе	
				Пометка = 1;
			КонецЕсли;	
			
			ОбластьРасшифровкиСтроки = ПолеТабличногоДокументаМакет.Область(Область.Верх,2,Область.Верх,2).Расшифровка;
			ВыделенныеСтроки.Добавить(ОбластьРасшифровкиСтроки);       			
			
			ЭтаФорма.Модифицированность = Истина;
			
			ВыделенныеСДочерними = Новый Массив;
			ПолучитьСписокСДочерними(ВыделенныеСтроки,ВыделенныеСДочерними);
			УстановитьПометкуСтрок(ВыделенныеСДочерними,Пометка);

					
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыделенныеСтроки = Новый Массив();
	
	Если Поле.Имя = "СтрокиСписокИспользованТекущей" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.ИспользованДругими И ЗначениеЗаполнено(Ракурс) Тогда
			 Возврат;
		КонецЕсли;	
		
		ЭтаФорма.Модифицированность = Истина;
		
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
		
		мИндекс = ВыбранныеСтроки.Найти(ВыбраннаяСтрока);
		Если мИндекс=Неопределено Тогда
			Пометка = Истина;
		Иначе    
			Пометка = Ложь;
		КонецЕсли;
				
		ВыделенныеСДочерними = Новый Массив;
		ПолучитьСписокСДочерними(ВыделенныеСтроки,ВыделенныеСДочерними);
		УстановитьПометкуСтрок(ВыделенныеСДочерними,Пометка);

		
	КонецЕсли;	
				
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГруппировки(Команда)
	
	Элементы.ФормаПоказатьГруппировки.Пометка = Не Элементы.ФормаПоказатьГруппировки.Пометка;
	Элементы.ПолетабличногоДокументаМакет.ОтображатьЗаголовки =  Элементы.ФормаПоказатьГруппировки.Пометка;
	Элементы.ПолетабличногоДокументаМакет.ОтображатьГруппировки =  Элементы.ФормаПоказатьГруппировки.Пометка;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДеревоСтрок()
		
	ПолеТабличногоДокументаМакет.Очистить();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |	СтрокиОтчетов.Ссылка КАК Строка,
	             |	СтрокиОтчетов.Код,
	             |	НастройкиСоставаОбластейВидовОтчетов.КлючОбласти КАК Ракурс,
	             |	СтрокиОтчетов.ГруппаРаскрытия,
				 |	ЛОЖЬ КАК ЕстьПодчиненные,
				 |	ВЫБОР
				 |		КОГДА СтрокиОтчетов.Ссылка В (&ВыбранныеСтроки)
				 |			ТОГДА ИСТИНА
				 |		ИНАЧЕ ЛОЖЬ
				 |	КОНЕЦ КАК ИспользованТекущей,
	             |	ВЫБОР
	             |		КОГДА втИспользованныеНеТекущейОбластью.СтрокаОтчета ЕСТЬ НЕ NULL 
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК ИспользованДругими,
	             |	СтрокиОтчетов.Предназначение
	             |ИЗ
	             |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСоставаОбластейВидовОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
	             |		ПО СтрокиОтчетов.Ссылка = НастройкиСоставаОбластейВидовОтчетов.СтрокаОтчета
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСоставаОбластейВидовОтчетов КАК втИспользованныеНеТекущейОбластью
	             |		ПО СтрокиОтчетов.Ссылка = втИспользованныеНеТекущейОбластью.СтрокаОтчета
	             |			И (НЕ втИспользованныеНеТекущейОбластью.КлючОбласти.Ссылка = &ТекущаяОбласть)
	             |ГДЕ
	             |	СтрокиОтчетов.Владелец = &ВидОтчета
	             |	И НЕ СтрокиОтчетов.ПометкаУдаления
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПорядковыйНомер ИЕРАРХИЯ";
				 
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ТекущаяОбласть",Ракурс);
	Запрос.УстановитьПараметр("ВыбранныеСтроки",ВыбранныеСтрокиПараметр);

	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	ТекущаяСтрокаДерева=Неопределено;
	
	
	РабочийМакет = Справочники.СтрокиОтчетов.ПолучитьМакет("МакетСтрокиРакурса"); 
	ОбластьШапка = РабочийМакет.ПолучитьОбласть("Шапка");
	ОбластьМакетСтроки = РабочийМакет.ПолучитьОбласть("МакетСтроки");
	ОбластьМакетСтрокиНедоступный = РабочийМакет.ПолучитьОбласть("МакетСтрокиНедоступный");
	ПолеТабличногоДокументаМакет.Вывести(ОбластьШапка);

 	Результат=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПолеТабличногоДокументаМакет.НачатьАвтогруппировкуСтрок();
	
	ВывестиДерево(Результат.Строки,ОбластьМакетСтроки,ОбластьМакетСтрокиНедоступный);
	
	ПолеТабличногоДокументаМакет.ЗакончитьАвтогруппировкуСтрок();
	
	ПолеТабличногоДокументаМакет.ФиксацияСверху = 1;
	ПолеТабличногоДокументаМакет.ФиксацияСлева = 1;
	
	ДеревоСтрокАдрес = ПоместитьВоВременноеХранилище(Результат,ЭтаФорма.УникальныйИдентификатор);
			
КонецПроцедуры // ЗаполнитьДеревоСтрок()

&НаСервере
Процедура ВывестиДерево(Строки,ОПдоступный,ОПНедоступный)

	Для Каждого ТекСтрока ИЗ Строки Цикл
		
		Если Не ЗначениеЗАполнено(Ракурс) Тогда
			 ТекСтрока.ИспользованДругими = Ложь; 
		КонецЕсли;	
		
		Если ТекСтрока.ИспользованДругими Тогда 		
			ОП = ОПНЕдоступный;	
		Иначе			
			ОП = ОПдоступный;
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(ОП.Параметры,ТекСтрока);
			
		ПолеТабличногоДокументаМакет.Вывести(ОП,ТекСтрока.Уровень());
		ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,2).имя = ТекСтрока.Строка.УникальныйИдентификатор();
		ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,2).Отступ = ТекСтрока.Уровень()*2;
		ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,2).Расшифровка = ТекСтрока.Строка;
		
				
		Если ТекСтрока.Строки.Количество() >0  Тогда
			
			 ТекСтрока.ЕстьПодчиненные = Истина;
			 ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,2).Шрифт = 
			 Новый Шрифт(ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,2).Шрифт,,,Истина);
		КонецЕсли;	
		
		Если  НЕ ТекСтрока.ИспользованДругими Тогда
			Если НЕ ТекСтрока.ИспользованТекущей Тогда	
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Картинка = БиблиотекаКартинок.ФлагНеВыбран;	
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Расшифровка = 0;
			Иначе	
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Картинка = БиблиотекаКартинок.ФлагВыбран;
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Расшифровка = 1;
			КонецЕсли;	
		КонецЕсли;	

		ВывестиДерево(ТекСтрока.Строки,ОПдоступный,ОПНедоступный);
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция ЕстьДочерниеЭлементы(ВыделенныеСтроки)

	ЕстьДочерние = Ложь;
		       
	ДеревоСтрок = ПолучитьИзВременногоХранилища(ДеревоСтрокАдрес);
	
	Для Каждого СтрокаСсылка Из ВыделенныеСтроки Цикл
		
		Если ДеревоСтрок.Строки.НайтиСтроки(Новый Структура("Строка,ЕстьПодчиненные",СтрокаСсылка,Истина),Истина).Количество()>0 Тогда
			 Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ЕстьДочерние; 
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокСДочерними(ВыделенныеСтроки,ВыделенныеСДочерними)
	       	
	ДеревоСтрок = ПолучитьИзВременногоХранилища(ДеревоСтрокАдрес);

	Для Каждого СтрокаСсылка Из ВыделенныеСтроки Цикл
		
		Если СтрокаСсылка = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаСсылка) = Тип("СправочникСсылка.СтрокиОтчетов")  Тогда	
			ВыделенныеСДочерними.Добавить(СтрокаСсылка);
			Вложенные = ДеревоСтрок.Строки.НайтиСтроки(Новый Структура("Строка",СтрокаСсылка),Истина);
            ПолучитьСписокСДочерними(Вложенные[0].Строки,ВыделенныеСДочерними)	
		Иначе
			ВыделенныеСДочерними.Добавить(СтрокаСсылка.Строка);
			Вложенные = ДеревоСтрок.Строки.НайтиСтроки(Новый Структура("Строка",СтрокаСсылка.Строка),Истина);
            ПолучитьСписокСДочерними(Вложенные[0].Строки,ВыделенныеСДочерними)
	    КонецЕсли;						
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуСтрок(ВыделенныеСтроки,Пометка)


	Если Пометка Тогда
		
		Для Каждого Стр Из ВыделенныеСтроки Цикл
			//Для макета
    		НужнаяОбласть = ПолеТабличногоДокументаМакет.Области.Найти(Стр.УникальныйИдентификатор());			
			Если ПолеТабличногоДокументаМакет.Область(НужнаяОбласть.Верх,1,НужнаяОбласть.Верх,1).Расшифровка =Неопределено  Тогда
				 Продолжить;
			КонецЕсли;	
			ПолеТабличногоДокументаМакет.Область(НужнаяОбласть.Верх,1,НужнаяОбласть.Верх,1).Расшифровка =1;
			ПолеТабличногоДокументаМакет.Область(НужнаяОбласть.Верх,1,НужнаяОбласть.Верх,1).Картинка = БиблиотекаКартинок.ФлагВыбран;
			
			//Для динамического списка
			мИндекс = ВыбранныеСтроки.Найти(Стр);
			Если мИндекс=Неопределено Тогда 
				ВыбранныеСтроки.Добавить(Стр);
			КонецЕсли;	
		КонецЦикла;	
		
	Иначе	
		
		Для Каждого Стр Из ВыделенныеСтроки Цикл		
			//Для макета
			НужнаяОбласть = ПолеТабличногоДокументаМакет.Области.Найти(Стр.УникальныйИдентификатор());			
			Если ПолеТабличногоДокументаМакет.Область(НужнаяОбласть.Верх,1,НужнаяОбласть.Верх,1).Расшифровка =Неопределено  Тогда
				 Продолжить;
			КонецЕсли;				
			ПолеТабличногоДокументаМакет.Область(НужнаяОбласть.Верх,1,НужнаяОбласть.Верх,1).Расшифровка =0;
			ПолеТабличногоДокументаМакет.Область(НужнаяОбласть.Верх,1,НужнаяОбласть.Верх,1).Картинка = БиблиотекаКартинок.ФлагНЕВыбран;
			
			//Для динамического списка
			мИндекс = ВыбранныеСтроки.Найти(Стр);
			Если НЕ мИндекс=Неопределено Тогда 
				ВыбранныеСтроки.Удалить(мИндекс);
			КонецЕсли;		
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокиСписок.Параметры.УстановитьЗначениеПараметра("ВыбранныеПоказатели",ВыбранныеСтроки);

	
КонецПроцедуры	
	
&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ВыбранныеСтроки = Новый Массив();

	СтрокиСписок.Параметры.УстановитьЗначениеПараметра("ВыбранныеПоказатели",ВыбранныеСтроки);
  	СтрокиСписок.Параметры.УстановитьЗначениеПараметра("ТекущаяОбласть",Ракурс);

	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(СтрокиСписок.Отбор,"Владелец",ВидОтчета,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУОСписка()
	
	Если  ЗначениеЗАполнено(Ракурс) Тогда
		
		УсловноеОформление.Элементы.Очистить();
		//Если строки выбраны другими ракурсами, подсветим серым. 
		ЭУО = УсловноеОформление.Элементы.Добавить();
		ЭУО_Оформление = ЭУО.Оформление.Элементы.Найти("ЦветТекста");
		ЭУО_Оформление.Значение = Новый Цвет(192,192,192);
		ЭУО_Оформление.Использование = Истина;
		
		ЭУО_Отбор = ЭУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭУО_Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭУО_Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтрокиСписок.ИспользованДругими");
		ЭУО_Отбор.ПравоеЗначение = Истина;	
		ЭУО_Отбор.Использование = Истина;
		
		Для каждого ПП Из Элементы.СтрокиСписок.ПодчиненныеЭлементы Цикл	
			ЭУО_Поле = ЭУО.Поля.Элементы.Добавить();
			ЭУО_Поле.Использование = Истина;
			ЭУО_Поле.Поле = Новый ПолеКомпоновкиДанных(ПП.Имя);	
		КонецЦикла; 
		
		//Если строки выбраны другими ракурсами, поле флажка недоступно.	
		ЭУО = УсловноеОформление.Элементы.Добавить();
		ЭУО_Оформление = ЭУО.Оформление.Элементы.Найти("Отображать");
		ЭУО_Оформление.Значение = Ложь;
		ЭУО_Оформление.Использование = Истина;
		
		ЭУО_Отбор = ЭУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭУО_Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭУО_Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтрокиСписок.ИспользованДругими");
		ЭУО_Отбор.ПравоеЗначение = Истина;	
		ЭУО_Отбор.Использование = Истина;
		
		ЭУО_Поле = ЭУО.Поля.Элементы.Добавить();
		ЭУО_Поле.Использование = Истина;
		ЭУО_Поле.Поле = Новый ПолеКомпоновкиДанных("СтрокиСписокИспользованТекущей");
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура Применить(Команда)
	
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть(ВыбранныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.ФормаПоказатьГруппировки.Доступность = ТекущаяСтраница.Имя = "Макет";
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		
				
		Если ЭтаФорма.Модифицированность Тогда
			
			Отказ = Истина;
		    СтандартнаяОбработка = Ложь;

			Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение",ЭтаФорма);
			ПоказатьВопрос(Оповещение, Нстр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);	

			
		КонецЕсли;	
		
	КонецЕсли;	
	
	
КонецПроцедуры



	