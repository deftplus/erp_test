
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мОснование;
Перем ОбновитьПометкуУдаленияДляПодчиненных;
Перем ОсвобождатьНомера Экспорт;

Перем АдресПараметровРеструктуризации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если ЭтоГруппа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПометкаУдаления=Ссылка.ПометкаУдаления Тогда
		
		ОбновитьПометкуУдаленияДляПодчиненных=Истина;
		
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПометкаУдаления И (НЕ Ссылка.ПометкаУдаления) И (НЕ Владелец.ПометкаУдаления) И Справочники.ВидыОтчетов.ЕстьЗаписиПоЭлементуСтруктуры(Ссылка) Тогда
		
		ТекстОшибки=Справочники.ВидыОтчетов.ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры(Ссылка);
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			СтрокаШаблона = Нстр("ru = 'Вид отчета %1, строка %2: установка пометки на удаление отменена.
			|%3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Ссылка.Владелец, Ссылка, ТекстОшибки), Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПометкаУдаления=Ссылка.ПометкаУдаления Тогда
		
		ОбновитьПометкуУдаленияДляПодчиненных=Истина;
		
	КонецЕсли;
	
	Если ОбменДанными.Загрузка ИЛИ ПометкаУдаления Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(мОснование) = Тип("СправочникСсылка.СтрокиОтчетов")
	   И мОснование.Владелец <> Владелец
	   И ЗначениеЗаполнено(ГруппаРаскрытия) Тогда
		ГруппаРаскрытия = Справочники.ГруппыРаскрытия.НайтиПоКоду(ГруппаРаскрытия.Код, , , Владелец);
	КонецЕсли;
	
	Если Владелец.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость И ЗначениеЗаполнено(СчетБД) Тогда
		
		Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
		
	КонецЕсли;
	
	Если ВнутриГрупповой Тогда
		Если НЕ (УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(ГруппаРаскрытия)
			ИЛИ СпособОбработки = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение) Тогда
			#Если Клиент Тогда
				
				СтрокаШаблона = Нстр("ru = 'Строке: %1 не установлен признак ""Внутригрупповой"".
				|Нельзя установить признак ""Внутригрупповой"" вычисляемой строке"
				+ ", для которой не определено раскрытие по аналитике ""Организации"".'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда				
					Сообщить(СтрШаблон(СтрокаШаблона, Наименование));
				КонецЕсли;
				
			#КонецЕсли
			Внутригрупповой = Ложь;
		КонецЕсли;
	КонецЕсли;
			
	Если ПустаяСтрока(Код) Тогда
		Сообщить(Нстр("ru = 'Не задан код элемента!'"), СтатусСообщения.Важное);
		Отказ = Истина;
	ИначеЕсли НЕ УправлениеОтчетамиУХ.СтрокаМожетИспользоватьсяВКачествеКода(Код) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Неверно задан код! Первым символом кода должна быть буква. Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).'; en = 'Invalid code! The first code character must be a letter. Each of the following characters can be a letter, number, or underscore (_).'"),Отказ,,СтатусСообщения.Важное);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КОЛИЧЕСТВО(СтрокиОтчетов.Ссылка) КАК Кол
		                      |ИЗ
		                      |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		                      |ГДЕ
		                      |	СтрокиОтчетов.Владелец = &Владелец
		                      |	И (НЕ СтрокиОтчетов.ПометкаУдаления)
		                      |	И СтрокиОтчетов.Код = &Код");
		Если НЕ ЭтоНовый() Тогда
			Запрос.Текст = Запрос.Текст + "
				| И СтрокиОтчетов.Ссылка <> &ТекущийЭлемент";
			Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);
		КонецЕсли;						 
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Код", Код);
		ВыборкаИзРезультата = Запрос.Выполнить().Выбрать();
		ВыборкаИзРезультата.Следующий();
		Если ВыборкаИзРезультата.Получить(0) <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Строка отчета с кодом ""%Код%"" уже определена. Запись отменена'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", СокрЛП(Код));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПорядковыйНомер = 0 Тогда
		Сообщить(НСтр("ru = 'Не задан порядковый номер элемента!'"), СтатусСообщения.Важное);
		Отказ = Истина;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СтрокиОтчетов.Ссылка) КАК Кол
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &Владелец
		|	И СтрокиОтчетов.Родитель = &Родитель
		|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
		|	И СтрокиОтчетов.ПорядковыйНомер = &ПорядковыйНомер");
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("ПорядковыйНомер", ПорядковыйНомер);
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Если НЕ ЭтоНовый() Тогда
			Запрос.Текст = Запрос.Текст + "
				| И СтрокиОтчетов.Ссылка <> &ТекущийЭлемент";
			Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);
		КонецЕсли;						 
		ВыборкаИзРезультата = Запрос.Выполнить().Выбрать();
		ВыборкаИзРезультата.Следующий();
		
		Если ВыборкаИзРезультата.Получить(0) <> 0 Тогда
							
			Справочники.ВидыОтчетов.ОсвободитьНомераСтрок(Владелец,Родитель,Ссылка,ПорядковыйНомер,1);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств
		ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов 
		ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов  Тогда
		
		Отказ=НЕ Справочники.ВидыОтчетов.ПроверитьСтрокуПоказательБюджета(ЭтотОбъект);
		
	КонецЕсли;
			
	Если Не Отказ Тогда
		
		Код = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СокрЛП(Код));	

		НормализованныйКод=СокрЛП(Код);
		
	КонецЕсли;
	
	Если НЕ (Отказ ИЛИ АдресПараметровРеструктуризации=Неопределено) Тогда
			
		Отказ = НЕ Справочники.ВидыОтчетов.ВыполнитьДействияПоРеструктуризации(АдресПараметровРеструктуризации);
			
	КонецЕсли;
	
	// Запомним значения контролируемых реквизитов до записи
	Если НЕ ЭтоНовый() И НЕ Отказ Тогда
		
		КонтролируемыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, "ГруппаРаскрытия,ВидПоказателя,Предназначение,ПриходРасход,СтатьяДвиженияДенежныхСредств,СтатьяДоходовИРасходов,СтатьяДвиженияРесурсов,ОценкаПоложительногоОтклонения,СчетБД");
		ДополнительныеСвойства.Вставить("КонтролируемыеЗначения", КонтролируемыеЗначения);
		
	КонецЕсли;		
	
КонецПроцедуры

// Процедура генерирует код перемещаемого элемента (группы) справочника,
// а также код расположенного рядом элемента при интерактивном перемещении
// элемента в форме списка справочника.
// Записывает переставляемые элементы с измененными кодами.
// В случае сдвига группы элементов также изменяет коды вложенных в группу
// элементов.
//
// Параметры
//  Направление  – число – напрвление сдвига элемента,
//                 принимает значения:
//                      1 - при сдвиге вниз;
//                     -1 - при сдвиге вверх.
//
Процедура ИзменитьПорядковыйНомер(Направление) Экспорт

	#Если Клиент Тогда
	
	ТекущийНомер    = ПорядковыйНомер;

	СписокКодов   = Новый СписокЗначений;

	СтрокиОтчетов  = Справочники.СтрокиОтчетов;
	ВыборкаСтроки = СтрокиОтчетов.Выбрать(Родитель, Владелец, , "ПорядковыйНомер Убыв");

	Пока ВыборкаСтроки.Следующий() Цикл
		СписокКодов.Добавить(ВыборкаСтроки.ПорядковыйНомер);
	КонецЦикла;

	Если СписокКодов.Количество() < 2  Тогда
		// На данном уровне имеется только один элемент или группа справочника.
		// Игнорируем действие пользователя.

		Возврат;
	КонецЕсли; 

	ПорядковыйНомер = СписокКодов.Индекс(СписокКодов.НайтиПоЗначению(ТекущийНомер));

	Если (ПорядковыйНомер = 0) И (Направление < 0) Тогда

		// Попытка перемещения первого по порядку элемента вверх.
		ИндексЭлементаЗамены = СписокКодов.Количество() - 1;
	
	ИначеЕсли (ПорядковыйНомер = СписокКодов.Количество() - 1) И (Направление > 0) Тогда

		// Попытка перемещения последнего по порядку элемента вниз.
		ИндексЭлементаЗамены = 0;

	Иначе

		// в иных случаях
		ИндексЭлементаЗамены = ПорядковыйНомер + Направление;

	КонецЕсли;

	КодЭлементаЗамены     = СписокКодов.Получить(ИндексЭлементаЗамены).Значение;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И СтрокиОтчетов.Родитель = &Родитель
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|	И СтрокиОтчетов.ПорядковыйНомер = &ПорядковыйНомер";
				 
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("Родитель",Родитель);
	Запрос.УстановитьПараметр("ПорядковыйНомер",КодЭлементаЗамены);

	Результат=Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		
		Попытка
			
			// Открываем транзакцию
			НачатьТранзакцию();
			
			// Промежуточная запись текущего элемента с уникальным кодом
			ЭтотОбъект.ПорядковыйНомер=10000000;
			ЭтотОбъект.Записать();
						
			// записываем соседний элемент с кодом текущего
			ЭлементЗамены= Результат.Ссылка.ПолучитьОбъект();
			ПредыдущийКод=КодЭлементаЗамены;
			ЭлементЗамены.ПорядковыйНомер = ТекущийНомер;
			ЭлементЗамены.Записать();
			
			// записываем текущий элемент с кодом соседнего
			ЭтотОбъект.ПорядковыйНомер = ПредыдущийКод;
			ЭтотОбъект.Записать();
			
			// Завершаем транзакцию
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось записать элемент справочника:
			|%1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ПоказатьПредупреждение(, СтрШаблон(СтрокаШаблона, ОписаниеОшибки()));
			КонецЕсли;
						
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры // ИзменитьКод()

Процедура ПриКопировании(ОбъектКопирования)
	
	мОснование = ОбъектКопирования;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ОбновитьРеквизитыПоказателей(Отказ);
	Если ОбновитьПометкуУдаленияДляПодчиненных Тогда
		
		ОбщегоНазначенияУХ.ПометитьСправочникПоРеквизиту("ПоказателиОтчетов","Строка",Ссылка,ПометкаУдаления,Отказ);
		
		Если (Не Отказ) И ПометкаУдаления Тогда
			
			ОбщегоНазначенияУХ.УдалитьИнформациюОКоординатах(Ссылка,Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ
		И ОбщегоНазначения.ПодсистемаСуществует("ПодсистемыУХ.РасчетПоказателей") Тогда
		МодульУправлениеРасчетомПоказателей = ОбщегоНазначения.ОбщийМодуль("УправлениеРасчетомПоказателей");
		МодульУправлениеРасчетомПоказателей.ОчиститьСтруктуруРасчетаПоказателейПоПравилуРасчета(Ссылка);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьРеквизитыПоказателей(Отказ)
	
	Если Отказ Или НЕ ДополнительныеСвойства.Свойство("КонтролируемыеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	КонтролируемыеЗначения = ДополнительныеСвойства.КонтролируемыеЗначения;
	Для Каждого СтрПоказатель Из ПолучитьПоказателиДляИзменения() Цикл
		
		ТекОбъект = СтрПоказатель.Ссылка.ПолучитьОбъект();
		
		Если ГруппаРаскрытия <> КонтролируемыеЗначения.ГруппаРаскрытия Тогда
			
			// Группа раскрытия новая или изменилась
			Если НЕ ТекОбъект.ГруппаРаскрытия = ГруппаРаскрытия Тогда				
				
				Если ГруппаРаскрытия.Валютная Тогда
					
					Если ТекОбъект.ЧисловойПоказатель И (НЕ ТекОбъект.НеФинансовый) Тогда
						
						ТекОбъект.ПересчитыватьВалютнуюСумму = Истина;
						
					КонецЕсли;
					
				Иначе
					
					ТекОбъект.ПересчитыватьВалютнуюСумму = Ложь;
										
				КонецЕсли;
				
				ТекОбъект.ГруппаРаскрытия = ГруппаРаскрытия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидПоказателя <> КонтролируемыеЗначения.ВидПоказателя Тогда
			
			ТекОбъект.ВидПоказателя = ВидПоказателя;
			
		КонецЕсли;

		// Реквизиты бюджетирования
		ПредназначениеДвижениеДенежныхСредств	 = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
		ПредназначениеДоходыИРасходы			 = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
		ПредназначениеДвижениеРесурсов			 = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
		СтрокаСЛимитами = (ПредназначениеДвижениеДенежныхСредств ИЛИ ПредназначениеДоходыИРасходы ИЛИ ПредназначениеДвижениеРесурсов); 
		СтрокаСоСчетом = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость);
		Если (СтрокаСЛимитами ИЛИ СтрокаСоСчетом) Тогда

			Если ПриходРасход <> КонтролируемыеЗначения.ПриходРасход Тогда					
				ТекОбъект.ПриходРасход = ПриходРасход;					
			КонецЕсли;
			
			ТекОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			
			ТекОбъект.СтатьяДоходовИРасходов = СтатьяДоходовИРасходов;
			
			ТекОбъект.СтатьяДвиженияРесурсов = СтатьяДвиженияРесурсов;
			
			Если СтрокаСоСчетом Тогда
				ТекОбъект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
				ТекОбъект.СчетБД = СчетБД;
			КонецЕсли;
			
			// Очистим статьи бюджета, когда задано новое предназначение.
			Если ТекОбъект.Предназначение <> Предназначение Тогда
				Если Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
					ТекОбъект.СтатьяДоходовИРасходов = "";
					ТекОбъект.СтатьяДвиженияРесурсов = "";
				ИначеЕсли Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
					ТекОбъект.СтатьяДвиженияДенежныхСредств = "";
					ТекОбъект.СтатьяДвиженияРесурсов = "";
				ИначеЕсли Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
					ТекОбъект.СтатьяДвиженияДенежныхСредств = "";
					ТекОбъект.СтатьяДоходовИРасходов = "";
				Иначе
					ТекОбъект.СтатьяДвиженияДенежныхСредств = "";
					ТекОбъект.СтатьяДоходовИРасходов = "";
					ТекОбъект.СтатьяДвиженияРесурсов = "";
				КонецЕсли;
			КонецЕсли;
			
			// Зададим новое предназначение.
			Если Предназначение <> КонтролируемыеЗначения.Предназначение Тогда
				ТекОбъект.Предназначение = Предназначение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОценкаПоложительногоОтклонения <> КонтролируемыеЗначения.ОценкаПоложительногоОтклонения Тогда
			
			ТекОбъект.ОценкаПоложительногоОтклонения=ОценкаПоложительногоОтклонения;
			
		КонецЕсли;
		
		Если СчетБД <> КонтролируемыеЗначения.СчетБД Тогда
			
			ТекОбъект.СчетБД = СчетБД;
			
		КонецЕсли;
		
		ТекОбъект.РазделениеПоПроектам=РазделениеПоПроектам;
		
		Попытка
			
			ТекОбъект.Записать();			
			
		Исключение

			СтрокаШаблона = Нстр("ru = 'Не удалось обновить реквизиты показателя %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат;
						
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьРеквизитыПоказателей() 

Функция ПолучитьПоказателиДляИзменения()
	
	// Проверим соответствие групп раскрытий показателей строки группе раскрытия самой строки.	
	
	КонтролируемыеЗначения 	= ДополнительныеСвойства.КонтролируемыеЗначения; 	
	ТекстУсловие 			= "";	
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Строка = &Строка
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
		
	Если ГруппаРаскрытия <> КонтролируемыеЗначения.ГруппаРаскрытия Тогда
		
		ТекстУсловие = " ИЛИ ПоказателиОтчетов.ГруппаРаскрытия <> &ГруппаРаскрытия";
		Запрос.УстановитьПараметр("ГруппаРаскрытия",ГруппаРаскрытия);
		
	КонецЕсли;	
		
	Если ВидПоказателя <> КонтролируемыеЗначения.ВидПоказателя Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.ВидПоказателя <> &ВидПоказателя";
		Запрос.УстановитьПараметр("ВидПоказателя",ВидПоказателя);
		
	КонецЕсли;
		
	Если Предназначение <> КонтролируемыеЗначения.Предназначение Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.Предназначение <> &Предназначение";
		Запрос.УстановитьПараметр("Предназначение",Предназначение);
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.РазделениеПоПроектам <> &РазделениеПоПроектам";
		Запрос.УстановитьПараметр("РазделениеПоПроектам",РазделениеПоПроектам);

	КонецЕсли;
		
	Если ПриходРасход <> КонтролируемыеЗначения.ПриходРасход Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.ПриходРасход <> &ПриходРасход";
		Запрос.УстановитьПараметр("ПриходРасход",ПриходРасход);
		
	КонецЕсли;
		
	Если СтатьяДвиженияДенежныхСредств <> КонтролируемыеЗначения.СтатьяДвиженияДенежныхСредств Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств <> &СтатьяДвиженияДенежныхСредств";
		Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств",СтатьяДвиженияДенежныхСредств);
					
	КонецЕсли;
		
	Если СтатьяДоходовИРасходов <> КонтролируемыеЗначения.СтатьяДоходовИРасходов Тогда
		
		ТекстУсловие=ТекстУсловие + " ИЛИ ПоказателиОтчетов.СтатьяДоходовИРасходов <> &СтатьяДоходовИРасходов";
		Запрос.УстановитьПараметр("СтатьяДоходовИРасходов",СтатьяДоходовИРасходов);
					
	КонецЕсли;
		
	Если СтатьяДвиженияРесурсов <> КонтролируемыеЗначения.СтатьяДвиженияРесурсов Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.СтатьяДвиженияРесурсов <> &СтатьяДвиженияРесурсов";
		Запрос.УстановитьПараметр("СтатьяДвиженияРесурсов",СтатьяДвиженияРесурсов);
		
	КонецЕсли;
		
	Если ОценкаПоложительногоОтклонения <> КонтролируемыеЗначения.ОценкаПоложительногоОтклонения Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.ОценкаПоложительногоОтклонения <> &ОценкаПоложительногоОтклонения";
		Запрос.УстановитьПараметр("ОценкаПоложительногоОтклонения",ОценкаПоложительногоОтклонения);
					
	КонецЕсли;
		
	Если СчетБД <> КонтролируемыеЗначения.СчетБД Тогда
		
		ТекстУсловие = ТекстУсловие + " ИЛИ ПоказателиОтчетов.СчетБД <> &СчетБД";
		Запрос.УстановитьПараметр("СчетБД",СчетБД);
					
	КонецЕсли;
	
	Если Запрос.Параметры.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И ("+Сред(ТекстУсловие,5)+")";
		
	Запрос.УстановитьПараметр("Строка",Ссылка);
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции  

ОбновитьПометкуУдаленияДляПодчиненных=Ложь;
ОсвобождатьНомера=Ложь;

#КонецЕсли

