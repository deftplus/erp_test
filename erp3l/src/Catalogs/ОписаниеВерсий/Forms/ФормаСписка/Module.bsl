
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Список.УсловноеОформление.Элементы.Очистить();
	
	Параметры.Свойство("РежимФормы", РежимФормы);
	
	//	РежимФормы = 1;    //Форма списка
	//	РежимФормы = 2;    //Из многопериодного бланка
	//	РежимФормы = 3;    //Из сводной таблицы
	Если РежимФормы = 2 ИЛИ РежимФормы = 3 тогда
		
		Параметры.Свойство("ТекущийБланк", ТекущийБланк);
				
		Если Параметры.Свойство("ЭкземплярОтчета", ЭкземплярОтчета) тогда
			ВалютаОтображения = ЭкземплярОтчета.ОсновнаяВалюта;
		КонецЕсли;
		
		Параметры.Свойство("ПериодОтчета", ПериодОтчета);
		Параметры.Свойство("ПериодОкончания", ПериодОкончания);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("Сценарий", Сценарий);
		Параметры.Свойство("Проект", Проект);
		
		Если РежимФормы = 2 тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ОписаниеВерсий.Ссылка КАК Ссылка,
			|	ОписаниеВерсий.ВидОтчета КАК ВидОтчета,
			|	ВЫБОР
			|		КОГДА НЕ ОписаниеВерсий.ЭкземплярОтчета = ОписаниеВерсий.Регистратор
			|				ИЛИ ОписаниеВерсий.РучнаяОперация = 2
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УдалениеЗапрещено,
			|	ОписаниеВерсий.Код КАК Код,
			|	ОписаниеВерсий.Дата КАК Дата,
			|	ОписаниеВерсий.Автор КАК Автор,
			|	ОписаниеВерсий.ВерсияХранимогоФайла КАК ВерсияХранимогоФайла,
			|	ОписаниеВерсий.Комментарий КАК Комментарий,
			|	ОписаниеВерсий.Организация КАК Организация,
			|	ОписаниеВерсий.Аналитика1 КАК Аналитика1,
			|	ОписаниеВерсий.Аналитика2 КАК Аналитика2,
			|	ОписаниеВерсий.Аналитика3 КАК Аналитика3,
			|	ОписаниеВерсий.Аналитика4 КАК Аналитика4,
			|	ОписаниеВерсий.Аналитика5 КАК Аналитика5,
			|	ОписаниеВерсий.Аналитика6 КАК Аналитика6,
			|	ОписаниеВерсий.Регистратор КАК Регистратор,
			|	ОписаниеВерсий.ЭкземплярОтчета КАК ЭкземплярОтчета,
			|	ОписаниеВерсий.УправлениеПериодом КАК УправлениеПериодом,
			|	ОписаниеВерсий.УправлениеПериодом.Сценарий КАК Сценарий,
			|	ОписаниеВерсий.Проект КАК Проект		
			|ИЗ
			|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
			|ГДЕ
			|	ОписаниеВерсий.ЧерноваяВерсия = ЛОЖЬ
			|	//И ОписаниеВерсий.ВидОтчета = &ВидОтчета
			|	И ОписаниеВерсий.ПометкаУдаления = ЛОЖЬ
			|	И ОписаниеВерсий.УправлениеПериодом.Сценарий = &Сценарий
			|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценария.ДатаНачала >= &ДатаНачала
			|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания <= &ДатаОкончания
			|	//И ОписаниеВерсий.Организация 	= &Организация
			|	//И ОписаниеВерсий.Проект 		= &Проект
			|	//И ОписаниеВерсий.Аналитика1 	= &Аналитика1
			|	//И ОписаниеВерсий.Аналитика2 	= &Аналитика2
			|	//И ОписаниеВерсий.Аналитика3 	= &Аналитика3
			|	//И ОписаниеВерсий.Аналитика4 	= &Аналитика4
			|	//И ОписаниеВерсий.Аналитика5 	= &Аналитика5
			|	//И ОписаниеВерсий.Аналитика6 	= &Аналитика6
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//И ОписаниеВерсий.ВидОтчета = &ВидОтчета", "И ОписаниеВерсий.ВидОтчета = &ВидОтчета");
						
			КоманднаяПанель.ПодчиненныеЭлементы.СписокОткрытьВерсию.Видимость = Истина;
			КоманднаяПанель.ПодчиненныеЭлементы.СписокСравнитьВерсии.Видимость = Истина;
			
			Элементы.Список.ПодчиненныеЭлементы.ГруппаРегистратор.Видимость = Истина;
				
			ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
			
			ОтборУсловногоОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УдалениеЗапрещено");
			ОтборУсловногоОформления.ПравоеЗначение = Истина;
			ОтборУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборУсловногоОформления.Использование = Истина;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НедоступныеДанныеУХЦвет);
					
		ИначеЕсли РежимФормы = 3 тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ОписаниеВерсий.Ссылка КАК Ссылка,
			|	ОписаниеВерсий.ВидОтчета КАК ВидОтчета,
			|	ЛОЖЬ КАК УдалениеЗапрещено,
			|	ОписаниеВерсий.Код КАК Код,
			|	ОписаниеВерсий.Дата КАК Дата,
			|	ОписаниеВерсий.Автор КАК Автор,
			|	ОписаниеВерсий.ВерсияХранимогоФайла КАК ВерсияХранимогоФайла,
			|	ОписаниеВерсий.Комментарий КАК Комментарий,
			|	ОписаниеВерсий.Организация КАК Организация,
			|	ОписаниеВерсий.Аналитика1 КАК Аналитика1,
			|	ОписаниеВерсий.Аналитика2 КАК Аналитика2,
			|	ОписаниеВерсий.Аналитика3 КАК Аналитика3,
			|	ОписаниеВерсий.Аналитика4 КАК Аналитика4,
			|	ОписаниеВерсий.Аналитика5 КАК Аналитика5,
			|	ОписаниеВерсий.Аналитика6 КАК Аналитика6,
			|	ОписаниеВерсий.Регистратор КАК Регистратор,
			|	ОписаниеВерсий.ЭкземплярОтчета КАК ЭкземплярОтчета,
			|	ОписаниеВерсий.УправлениеПериодом КАК УправлениеПериодом,
			|	ОписаниеВерсий.УправлениеПериодом.Сценарий КАК Сценарий,
			|	ОписаниеВерсий.Проект КАК Проект		
			|ИЗ
			|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
			|ГДЕ
			|	ОписаниеВерсий.ЧерноваяВерсия = ЛОЖЬ
			|	И ОписаниеВерсий.ВидОтчета В (&ВидОтчета)
			|	И ОписаниеВерсий.ПометкаУдаления = ЛОЖЬ
			|	И ОписаниеВерсий.УправлениеПериодом.Сценарий = &Сценарий
			|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценария.ДатаНачала >= &ДатаНачала
			|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания <= &ДатаОкончания
			|	//И ОписаниеВерсий.Организация 	= &Организация
			|	//И ОписаниеВерсий.Проект 		= &Проект
			|	//И ОписаниеВерсий.Аналитика1 	= &Аналитика1
			|	//И ОписаниеВерсий.Аналитика2 	= &Аналитика2
			|	//И ОписаниеВерсий.Аналитика3 	= &Аналитика3
			|	//И ОписаниеВерсий.Аналитика4 	= &Аналитика4
			|	//И ОписаниеВерсий.Аналитика5 	= &Аналитика5
			|	//И ОписаниеВерсий.Аналитика6 	= &Аналитика6
			|";
			
			КоманднаяПанель.ПодчиненныеЭлементы.СписокОткрытьВерсию.Видимость = Ложь;
			КоманднаяПанель.ПодчиненныеЭлементы.СписокСравнитьВерсии.Видимость = Ложь;
			
			Элементы.Список.ПодчиненныеЭлементы.ГруппаРегистратор.Видимость = Ложь;
			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Параметры.Проект) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//И ОписаниеВерсий.Проект", "И ОписаниеВерсий.Проект");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//И ОписаниеВерсий.Организация", "И ОписаниеВерсий.Организация");
		КонецЕсли;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Параметры["Аналитика" + Инд]) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//И ОписаниеВерсий.Аналитика" + Инд, "И ОписаниеВерсий.Аналитика" + Инд);	
			КонецЕсли;			
		КонецЦикла;
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();		
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
		
		Список.Параметры.УстановитьЗначениеПараметра("Сценарий", Параметры.Сценарий);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(Параметры.ПериодОтчета.ДатаНачала));
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(Параметры.ПериодОкончания.ДатаОкончания));
		
		Если РежимФормы = 2 ИЛИ РежимФормы = 3 тогда
			Список.Параметры.УстановитьЗначениеПараметра("ВидОтчета", Параметры.ВидОтчета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Проект) Тогда
			Список.Параметры.УстановитьЗначениеПараметра("Проект", Параметры.Проект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Список.Параметры.УстановитьЗначениеПараметра("Организация", Параметры.Организация);
		КонецЕсли;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Параметры["Аналитика" + Инд]) Тогда
				Список.Параметры.УстановитьЗначениеПараметра("Аналитика" + Инд, Параметры["Аналитика" + Инд]);	
			КонецЕсли;			
		КонецЦикла;
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаКоманднаяПанельГруппаРедактирование.Видимость = Ложь;
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаКоманднаяПанельГруппаНастройки.ПодчиненныеЭлементы.ФормаКоманднаяПанельКнопкаНастройкаСписка.Видимость = Ложь;
		
		КоманднаяПанель.ПодчиненныеЭлементы.СписокСвернутьДоВерсии.Видимость = Истина;
		КоманднаяПанель.ПодчиненныеЭлементы.СписокУдалитьВерсии.Видимость = Истина;
				
		Элементы.Список.ИзменятьСоставСтрок = Ложь;
		Элементы.Список.ИзменятьПорядокСтрок = Ложь;
				
		Элементы.Список.ПодчиненныеЭлементы.ГруппаКод.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаСценарий.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаОрганизация.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаВидОтчета.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаПроект.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика1.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика2.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика3.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика4.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика5.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика6.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаДата.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАвтор.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаКомментарий.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаСсылка.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаУдалениеЗапрещено.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаВерсияХранимогоФайла.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаЭкземплярОтчета.Видимость = Ложь;
				
		Элементы.Список.ПодчиненныеЭлементы.Код.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.УправлениеПериодом.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.УправлениеПериодомСценарий.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Организация.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ВидОтчета.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Проект.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика1.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика2.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика3.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика4.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика5.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика6.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Дата.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Автор.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Комментарий.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ЭкземплярОтчета.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Ссылка.Видимость = Ложь;
				
	Иначе
		
		РежимФормы = 1;    //Форма списка
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();		
		СвойстваСписка.ТекстЗапроса = Список.ТекстЗапроса;		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаКоманднаяПанельГруппаРедактирование.Видимость = Истина;
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаКоманднаяПанельГруппаНастройки.ПодчиненныеЭлементы.ФормаКоманднаяПанельКнопкаНастройкаСписка.Видимость = Истина;
		
		КоманднаяПанель.ПодчиненныеЭлементы.СписокОткрытьВерсию.Видимость = Ложь;
		КоманднаяПанель.ПодчиненныеЭлементы.СписокСравнитьВерсии.Видимость = Ложь;
		КоманднаяПанель.ПодчиненныеЭлементы.СписокСвернутьДоВерсии.Видимость = Ложь;
		КоманднаяПанель.ПодчиненныеЭлементы.СписокУдалитьВерсии.Видимость = Ложь;
				
		Элементы.Список.ИзменятьСоставСтрок = Истина;
		Элементы.Список.ИзменятьПорядокСтрок = Истина;
				
		Элементы.Список.ПодчиненныеЭлементы.Код.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.УправлениеПериодом.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.УправлениеПериодомСценарий.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Организация.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ВидОтчета.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Проект.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика1.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика2.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика3.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика4.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика5.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Аналитика6.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Дата.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Автор.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Комментарий.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.ЭкземплярОтчета.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Ссылка.Видимость = Истина;
		
		Элементы.Список.ПодчиненныеЭлементы.ГруппаКод.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаСценарий.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаОрганизация.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаВидОтчета.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаПроект.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика1.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика2.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика3.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика4.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика5.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАналитика6.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаДата.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаАвтор.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаКомментарий.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаРегистратор.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаСсылка.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаУдалениеЗапрещено.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаВерсияХранимогоФайла.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.ГруппаЭкземплярОтчета.Видимость = Ложь;
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ОтборКомпоновкиДанных = Неопределено;
	ПорядокКомпоновкиДанных = Неопределено;
	СтруктураНастроекКомпоновкиДанных = Неопределено;
	
	Для Каждого ЭлементПользовательскойНастройки Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных") тогда
			ОтборКомпоновкиДанных = ЭлементПользовательскойНастройки;
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ПорядокКомпоновкиДанных") тогда
			ПорядокКомпоновкиДанных = ЭлементПользовательскойНастройки;
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("СтруктураНастроекКомпоновкиДанных") тогда
			СтруктураНастроекКомпоновкиДанных = ЭлементПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьДатаНачала = Ложь;
	ЕстьДатаОкончания = Ложь;
	ПолеСценарий = Новый ПолеКомпоновкиДанных("Сценарий");
	ПолеОрганизация = Новый ПолеКомпоновкиДанных("Организация");
	ПолеВидОтчета = Новый ПолеКомпоновкиДанных("ВидОтчета");
	ПолеДатаНачала = Новый ПолеКомпоновкиДанных("ДатаНачала");
	ПолеДатаОкончания = Новый ПолеКомпоновкиДанных("ДатаОкончания");
			
	Если РежимФормы = 2 ИЛИ РежимФормы = 3 тогда
		
		ОтборКомпоновкиДанных.Элементы.Очистить();
		ПорядокКомпоновкиДанных.Элементы.Очистить();
		СтруктураНастроекКомпоновкиДанных.Структура.Очистить();
		
		УстановитьГруппировкиСписка(СтруктураНастроекКомпоновкиДанных);
		
		НовоеПолеКодпорядок = ПорядокКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементпорядкаКомпоновкиДанных"));
		НовоеПолеКодпорядок.Поле = Новый ПолеКомпоновкиДанных("Код");
		НовоеПолеКодпорядок.Использование = Истина;
		НовоеПолеКодпорядок.ТипУпорядочивания = НаправлениесортировкиКомпоновкиДанных.Убыв;
		НовоеПолеКодпорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
				
	ИначеЕсли РежимФормы = 1 тогда
		
		ЕстьСценарий = Ложь;
		ЕстьОрганизация = Ложь;
		ЕстьВидОтчета = Ложь;
						
		Для каждого ЭлементОтбора Из ОтборКомпоновкиДанных.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеСценарий тогда
				ЕстьСценарий = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация тогда
				ЕстьОрганизация = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеВидОтчета тогда
				ЕстьВидОтчета = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеДатаНачала тогда
				ЕстьДатаНачала = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеДатаОкончания тогда
				ЕстьДатаОкончания = Истина;			
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьВидОтчета тогда
			НовыйЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = ПолеВидОтчета;
			НовыйЭлементОтбора.ПравоеЗначение = Справочники.ВидыОтчетов.ПустаяСсылка();
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Ложь;
			НовыйЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЕсли;
		
		Если Не ЕстьОрганизация тогда
			НовыйЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = ПолеОрганизация;
			НовыйЭлементОтбора.ПравоеЗначение = Справочники.Организации.ПустаяСсылка();
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Ложь;
			НовыйЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЕсли;
		
		Если Не ЕстьСценарий тогда
			НовыйЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = ПолеСценарий;
			НовыйЭлементОтбора.ПравоеЗначение = Справочники.Сценарии.ПустаяСсылка();
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Ложь;
			НовыйЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЕсли;
				
		Если Не ЕстьДатаНачала тогда
			НовыйЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = ПолеДатаНачала;
			НовыйЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			НовыйЭлементОтбора.Использование = Ложь;
			НовыйЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЕстьДатаНачала = Истина;
		КонецЕсли;
		
		Если Не ЕстьДатаОкончания тогда
			НовыйЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = ПолеДатаОкончания;
			НовыйЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			НовыйЭлементОтбора.Использование = Ложь;
			НовыйЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЕстьДатаОкончания = Истина;
		КонецЕсли;
				
		ЕстьКодПорядок = Ложь;
		ПолеНастройкиКодПорядок = Новый ПолеКомпоновкиДанных("Код");
		ПолеКодПорядок = Неопределено;
		
		Для Каждого ЭлементПорядка Из ПорядокКомпоновкиДанных.Элементы Цикл
			Если ЭлементПорядка.Поле = ПолеНастройкиКодПорядок тогда
				ЕстьКодПорядок = Истина;
				ПолеКодПорядок = ЭлементПорядка;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьКодПорядок тогда
			НовоеПолеКодпорядок = ПорядокКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементпорядкаКомпоновкиДанных"));
			НовоеПолеКодпорядок.Поле = ПолеНастройкиКодПорядок;
			НовоеПолеКодпорядок.Использование = Истина;
			НовоеПолеКодпорядок.ТипУпорядочивания = НаправлениесортировкиКомпоновкиДанных.Убыв;
			НовоеПолеКодпорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		Иначе
			ПолеКодПорядок.Использование = Истина;
			ПолеКодПорядок.ТипУпорядочивания = НаправлениесортировкиКомпоновкиДанных.Убыв;
		КонецЕсли;
				
	КонецЕсли;
		
	Для Каждого ЭлементОтбора Из Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(ЭлементОтбора);
	КонецЦикла;
	
	ГлавнаяГруппаОтборов = ЭтаФорма.Элементы.Добавить("ГлавнаяГруппаОтборов", Тип("ГруппаФормы"), Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки);
	ГлавнаяГруппаОтборов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГлавнаяГруппаОтборов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГлавнаяГруппаОтборов.ОтображатьЗаголовок = Ложь;
	ГлавнаяГруппаОтборов.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ГруппаОтборовЛевая = ЭтаФорма.Элементы.Добавить("ГруппаОтборовЛевая", Тип("ГруппаФормы"), ГлавнаяГруппаОтборов);
	ГруппаОтборовЛевая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтборовЛевая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОтборовЛевая.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаОтборовЛевая.ОтображатьЗаголовок 	= Ложь;
	ГруппаОтборовЛевая.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ГруппаОтборовЛеваяДекорации = ЭтаФорма.Элементы.Добавить("ГруппаОтборовЛеваяДекорации", Тип("ГруппаФормы"), ГруппаОтборовЛевая);
	ГруппаОтборовЛеваяДекорации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтборовЛеваяДекорации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОтборовЛеваяДекорации.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаОтборовЛеваяДекорации.ОтображатьЗаголовок 	= Ложь;
	ГруппаОтборовЛеваяДекорации.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОтборовЛеваяДекорации.РастягиватьПоВертикали = Истина;
	ГруппаОтборовЛеваяДекорации.РастягиватьПоГоризонтали = Ложь;
	ГруппаОтборовЛеваяДекорации.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОтборовЛеваяДекорации.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОтборовЛеваяДекорации.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Двойной;
	
	ГруппаОтборовЛеваяЗначения = ЭтаФорма.Элементы.Добавить("ГруппаОтборовЛеваяЗначения", Тип("ГруппаФормы"), ГруппаОтборовЛевая);
	ГруппаОтборовЛеваяЗначения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтборовЛеваяЗначения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОтборовЛеваяЗначения.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаОтборовЛеваяЗначения.ОтображатьЗаголовок 	= Ложь;
	ГруппаОтборовЛеваяЗначения.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОтборовЛеваяЗначения.РастягиватьПоГоризонтали = Истина;
	
	ГруппаОтборовПравая = ЭтаФорма.Элементы.Добавить("ГруппаОтборовПравая", Тип("ГруппаФормы"), ГлавнаяГруппаОтборов);
	ГруппаОтборовПравая.Вид	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтборовПравая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОтборовПравая.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаОтборовПравая.ОтображатьЗаголовок	= Ложь;
	ГруппаОтборовПравая.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ГруппаОтборовПраваяДекорации = ЭтаФорма.Элементы.Добавить("ГруппаОтборовПраваяДекорации", Тип("ГруппаФормы"), ГруппаОтборовПравая);
	ГруппаОтборовПраваяДекорации.Вид	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтборовПраваяДекорации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОтборовПраваяДекорации.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаОтборовПраваяДекорации.ОтображатьЗаголовок	= Ложь;
	ГруппаОтборовПраваяДекорации.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОтборовПраваяДекорации.РастягиватьПоВертикали = Истина;
	ГруппаОтборовПраваяДекорации.РастягиватьПоГоризонтали = Ложь;
	ГруппаОтборовПраваяДекорации.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОтборовПраваяДекорации.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОтборовПраваяДекорации.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Двойной;
	
	ГруппаОтборовПраваяЗначения = ЭтаФорма.Элементы.Добавить("ГруппаОтборовПраваяЗначения", Тип("ГруппаФормы"), ГруппаОтборовПравая);
	ГруппаОтборовПраваяЗначения.Вид	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтборовПраваяЗначения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОтборовПраваяЗначения.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаОтборовПраваяЗначения.ОтображатьЗаголовок	= Ложь;
	ГруппаОтборовПраваяЗначения.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОтборовПраваяЗначения.РастягиватьПоГоризонтали = Истина;
	
	ГруппаОтборовЛевоПравоДекорации = ГруппаОтборовЛеваяДекорации;
	ГруппаОтборовЛевоПравоЗначения = ГруппаОтборовЛеваяЗначения;
	
	ИндексЭлементаОтбора = 0;
	ИндексЭлементаДатаНачала = 0;
	ИндексЭлементаДатаОкончания = 0;
	
	ВыведенВидОтчета = Ложь;
	ВыведенСценарий = Ложь;
	ВыведенаОрганизация = Ложь;
	
	Для каждого ЭлементОтбора Из ОтборКомпоновкиДанных.Элементы Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементОтбора.ЛевоеЗначение) тогда
			ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеДатаНачала тогда		
			ИндексЭлементаДатаНачала = ИндексЭлементаОтбора;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеДатаОкончания тогда		
			ИндексЭлементаДатаОкончания = ИндексЭлементаОтбора;
		ИначеЕсли НЕ (ВыведенВидОтчета И ВыведенСценарий И ВыведенаОрганизация) тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеВидОтчета И ВыведенВидОтчета тогда
				ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
				Продолжить;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеСценарий И ВыведенСценарий тогда
				ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
				Продолжить;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация И ВыведенаОрганизация тогда
				ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
				Продолжить;
			КонецЕсли;
			
			ДоступноеПолеОтбора = Список.Отбор.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
			
			ГруппаЭлементаОтбора = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора, Тип("ГруппаФормы"), ГруппаОтборовЛевоПравоЗначения);
			ГруппаЭлементаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЭлементаОтбора.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаЭлементаОтбора.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементаОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
			
			ЭлементДекорация = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора + "НадписьИспользование", Тип("ДекорацияФормы"), ГруппаОтборовЛевоПравоДекорации);			
			Если ДоступноеПолеОтбора <> неопределено тогда
				ЭлементДекорация.Заголовок = ДоступноеПолеОтбора.Заголовок;
			Иначе
				ЭлементДекорация.Заголовок = ЭлементОтбора.ЛевоеЗначение;
			КонецЕсли;
			ЭлементДекорация.Заголовок = СтрЗаменить(ЭлементДекорация.Заголовок, "Аналитика", "Аналитика ");
			Если Прав(СокрЛП(ЭлементДекорация.Заголовок), 1) <> ":" тогда
				ЭлементДекорация.Заголовок = ЭлементДекорация.Заголовок + ":";
			КонецЕсли;
			ЭлементДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			ЭлементДекорация.РастягиватьПоГоризонтали = Ложь;
			ЭлементДекорация.РастягиватьПоВертикали = Ложь;
						
			ЭлементИспользование = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора + "Использование", Тип("ПолеФормы"), ГруппаЭлементаОтбора);
			ЭлементИспользование.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементИспользование.ПутьКДанным = "Список.КомпоновщикНастроек.ПользовательскиеНастройки[0][" + ИндексЭлементаОтбора + "].Использование";
			ЭлементИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
						
			ЭлементВидСравнения = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора + "ВидСравненияЭлементаОтбора", Тип("ПолеФормы"), ГруппаЭлементаОтбора);
			ЭлементВидСравнения.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементВидСравнения.ПутьКДанным = "Список.КомпоновщикНастроек.ПользовательскиеНастройки[0][" + ИндексЭлементаОтбора + "].ВидСравнения";
			ЭлементВидСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементВидСравнения.АвтоМаксимальнаяШирина = Ложь;
			ЭлементВидСравнения.РастягиватьПоГоризонтали = Ложь;
			ЭлементВидСравнения.РежимВыбораИзСписка = Истина;
			
			Если ДоступноеПолеОтбора <> Неопределено тогда				
				Для Каждого ДоступныйВидСравнения Из ДоступноеПолеОтбора.ДоступныеВидыСравнения Цикл					
					ЭлементВидСравнения.СписокВыбора.Добавить(ДоступныйВидСравнения.Значение);
				КонецЦикла;
			Иначе				
				ТипЗначенияОтбора = ТипЗнч(Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаОтбора].ПравоеЗначение);
				
				Если ТипЗначенияОтбора = Тип("Строка") тогда
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Больше);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);					
				ИначеЕсли ТипЗначенияОтбора = Тип("Число") ИЛИ ТипЗначенияОтбора = Тип("Дата") ИЛИ ТипЗначенияОтбора = Тип("СтандартнаяДатаНачала") тогда
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Больше);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
				ИначеЕсли ТипЗначенияОтбора = Тип("Булево") тогда
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
				ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") тогда
					ЭлементВидСравнения.РежимВыбораИзСписка = Ложь;
					ЭлементВидСравнения.СписокВыбора.Очистить();
				Иначе
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
					ЭлементВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
				КонецЕсли;	
			КонецЕсли;
			
			ЭлементВидСравнения.УстановитьДействие("ПриИзменении", "ВидСравненияПриИзменении");

			ЭлементЗначение = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора + "Значение", Тип("ПолеФормы"), ГруппаЭлементаОтбора);
			ЭлементЗначение.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементЗначение.ПутьКДанным = "Список.КомпоновщикНастроек.ПользовательскиеНастройки[0][" + ИндексЭлементаОтбора + "].Значение";			
			ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			
			Если ДоступноеПолеОтбора <> Неопределено тогда
				Если ДоступноеПолеОтбора.ТипЗначения.Типы().Количество() > 1 тогда
					ЭлементЗначение.ОграничениеТипа = ДоступноеПолеОтбора.ТипЗначения;
					ЭлементЗначение.ВыбиратьТип = Истина;
				Иначе
					ЭлементЗначение.ВыбиратьТип = Ложь;
				КонецЕсли;
			Иначе
				ЭлементЗначение.ВыбиратьТип = Истина;
			КонецЕсли;
			
			ЭлементЗначение.АвтоМаксимальнаяШирина = Истина;
			ЭлементЗначение.РастягиватьПоГоризонтали = Истина;
			ЭлементЗначение.УстановитьДействие("НачалоВыбора", "ЗначениеОтбораНачалоВыбора");
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеВидОтчета тогда
				ВыведенВидОтчета = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеСценарий тогда
				ВыведенСценарий = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация тогда
				ВыведенаОрганизация = Истина;
			КонецЕсли;
												
			Если ГруппаОтборовЛевоПравоЗначения = ГруппаОтборовЛеваяЗначения Тогда				
				ГруппаОтборовЛевоПравоДекорации = ГруппаОтборовПраваяДекорации;
				ГруппаОтборовЛевоПравоЗначения = ГруппаОтборовПраваяЗначения;
			Иначе
				ГруппаОтборовЛевоПравоДекорации = ГруппаОтборовЛеваяДекорации;
				ГруппаОтборовЛевоПравоЗначения = ГруппаОтборовЛеваяЗначения;
			КонецЕсли;
		КонецЕсли;
				
		ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
				
	КонецЦикла;
	
	Если ЕстьДатаНачала И ЕстьДатаОкончания тогда
		
		ГруппаПериода = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора, Тип("ГруппаФормы"), ГруппаОтборовЛевоПравоЗначения);
		ГруппаПериода.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПериода.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаПериода.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ГруппаПериода.ОтображатьЗаголовок = Ложь;
		ГруппаПериода.РастягиватьПоГоризонтали = Истина;
		ГруппаПериода.Отображение = ОтображениеОбычнойГруппы.Нет;
						
		ЭлементДекорация = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаДатаНачала + "НадписьДатаНачала", Тип("ДекорацияФормы"), ГруппаОтборовЛевоПравоДекорации);
		ЭлементДекорация.Заголовок = "Период с:";
		ЭлементДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементДекорация.РастягиватьПоГоризонтали = Ложь;
		ЭлементДекорация.РастягиватьПоВертикали = Ложь;
		
		ЭлементИспользование = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаОтбора + "Использование", Тип("ПолеФормы"), ГруппаПериода);
		ЭлементИспользование.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементИспользование.ПутьКДанным = "ИспользоватьПериод";
		ЭлементИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементИспользование.УстановитьДействие("ПриИзменении", "ИспользоватьПериодПриИзменении");
		
		ЭлементЗначение = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаДатаНачала + "Значение", Тип("ПолеФормы"), ГруппаПериода);
		ЭлементЗначение.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементЗначение.ПутьКДанным = "ПериодОтчета";
		ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементЗначение.ВыбиратьТип = Ложь;
		ЭлементЗначение.КнопкаВыбора = Ложь;
		ЭлементЗначение.КнопкаВыпадающегоСписка = Ложь;
		ЭлементЗначение.КнопкаОткрытия = Истина;
		ЭлементЗначение.ТолькоПросмотр = Истина;
		ЭлементЗначение.Доступность = Истина;
		ЭлементЗначение.АвтоМаксимальнаяШирина = Истина;
		ЭлементЗначение.РастягиватьПоГоризонтали = Истина;
						
		ЭлементДекорация = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаДатаОкончания + "НадписьДатаОкончания", Тип("ДекорацияФормы"), ГруппаПериода);
		ЭлементДекорация.Заголовок = "по:";
		ЭлементДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементДекорация.РастягиватьПоГоризонтали = Ложь;
		ЭлементДекорация.РастягиватьПоВертикали = Ложь;
		
		ЭлементЗначение = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаДатаОкончания + "Значение", Тип("ПолеФормы"), ГруппаПериода);
		ЭлементЗначение.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементЗначение.ПутьКДанным = "ПериодОкончания";
		ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементЗначение.ВыбиратьТип = Ложь;
		ЭлементЗначение.КнопкаВыбора = Ложь;
		ЭлементЗначение.КнопкаВыпадающегоСписка = Ложь;
		ЭлементЗначение.КнопкаОткрытия = Истина;
		ЭлементЗначение.ТолькоПросмотр = Истина;
		ЭлементЗначение.Доступность = Истина;
		ЭлементЗначение.АвтоМаксимальнаяШирина = Истина;
		ЭлементЗначение.РастягиватьПоГоризонтали = Истина;
				
		ЭлементКнопка = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ИндексЭлементаДатаОкончания + "КнопкаИзменитьПериод", Тип("КнопкаФормы"), ГруппаПериода);
	    ЭлементКнопка.ИмяКоманды = "ИзменитьПериод";
		ЭлементКнопка.Отображение = ОтображениеКнопки.Картинка;
		
		ТекущаяПериодичность = Перечисления.Периодичность.День;	
		ПериодОтчета = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаНачала].ПравоеЗначение;
		ПериодОтчетаЗаполнен = ЗначениеЗаполнено(ПериодОтчета);
		ПериодОкончания = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаОкончания].ПравоеЗначение;
		ПериодОкончанияЗаполнен = ЗначениеЗаполнено(ПериодОкончания);
				
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаНачала].Использование = ПериодОтчетаЗаполнен;
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаОкончания].Использование = ПериодОкончанияЗаполнен;
		
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПериодПриИзменении(Элемент)
	
	ИспользоватьДатуНачала = ЗначениеЗаполнено(Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаНачала].ПравоеЗначение);	
	ИспользоватьДатуОкончания = ЗначениеЗаполнено(Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаОкончания].ПравоеЗначение);
		
	Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаНачала].Использование = ИспользоватьПериод И ИспользоватьДатуНачала;	
	Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаОкончания].Использование = ИспользоватьПериод И ИспользоватьДатуОкончания;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИндексОтбора = Число(СтрЗаменить(СтрЗаменить(Элемент.Имя, "Значение", ""), "КомпоновщикНастроекПользовательскиеНастройкиЭлемент", ""));
	ВидСравненияЗначение = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ВидСравнения;
	
	Если ВидСравненияЗначение = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ВидСравненияЗначение = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ВидСравненияЗначение = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ВидСравненияЗначение = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				
		ЭлементВидСравнения = Элементы[СтрЗаменить(Элемент.Имя, "Значение", "ВидСравненияЭлементаОтбора")];
		ВидСравненияПриИзменении(ЭлементВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПриИзменении(Элемент)
		
	ПредставлениеОтбора = Элемент.ТекстРедактирования;                                   
	
	Если ПредставлениеОтбора = "В группе" тогда
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли ПредставлениеОтбора = "Не в группе" тогда
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии;
	ИначеЕсли ПредставлениеОтбора = "В группе из списка" тогда
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли ПредставлениеОтбора = "Не в группе из списка" тогда
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	ИначеЕсли ПредставлениеОтбора = "Соответствует шаблону" тогда
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Подобно;
	ИначеЕсли ПредставлениеОтбора = "Не соответствует шаблону" тогда
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеПодобно;
	Иначе
		ЗначениеОтбора = ВидСравненияКомпоновкиДанных[СтрЗаменить(ПредставлениеОтбора, " ", "")];
	КонецЕсли;
	
	ЭлементОтбора = Элементы[СтрЗаменить(Элемент.Имя, "ВидСравненияЭлементаОтбора", "Значение")];
	ЭлементОтбора.Видимость = НЕ (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ИндексОтбора = Число(СтрЗаменить(СтрЗаменить(Элемент.Имя, "ВидСравненияЭлементаОтбора", ""), "КомпоновщикНастроекПользовательскиеНастройкиЭлемент", ""));
	ПолеОтбора = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ЛевоеЗначение;
	
	ДоступноеПолеОтбора = Список.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора);
	Если ДоступноеПолеОтбора = неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение;
	
	Если ТипЗнч(ТекущийОтбор) = Тип("СписокЗначений") тогда
		ОписаниеТиповОтбора = ДоступноеПолеОтбора.ТипЗначения;
	Иначе
		МассивДобавляемыхТипов = Новый Массив();
		МассивДобавляемыхТипов.Добавить(ТипЗнч(ТекущийОтбор));
		ОписаниеТиповОтбора = Новый ОписаниеТипов(ДоступноеПолеОтбора.ТипЗначения, МассивДобавляемыхТипов);
	КонецЕсли;
	
	Если ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Равно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеРавно
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Больше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Подобно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеПодобно
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НачинаетсяС ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеНачинаетсяС
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Содержит ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		
		ЭлементОтбора.ОграничениеТипа = ОписаниеТиповОтбора;
		
		Если ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Равно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеРавно
			ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Больше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
			ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
			ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Подобно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеПодобно
			ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НачинаетсяС ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеНачинаетсяС
			ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Содержит ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеСодержит тогда
			
			ЭлементОтбора.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ИначеЕсли ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			ЭлементОтбора.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийОтбор) = Тип("СписокЗначений") И ТекущийОтбор.Количество()>0 Тогда 
			ПервыйЭлементСписка = ТекущийОтбор[0].Значение;
			
			Если ОписаниеТиповОтбора.СодержитТип(ТипЗнч(ПервыйЭлементСписка)) Тогда
				Если (НЕ ЭтоГруппаСправочника(ПервыйЭлементСписка) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Равно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеРавно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Больше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Подобно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеПодобно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НачинаетсяС ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеНачинаетсяС
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Содержит ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеСодержит))
					ИЛИ (ЭтоГруппаСправочника(ПервыйЭлементСписка) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии)) тогда
					
					Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение = ПервыйЭлементСписка;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекущийОтбор) И ОписаниеТиповОтбора.СодержитТип(ТипЗнч(ТекущийОтбор)) Тогда
			Если (НЕ ЭтоГруппаСправочника(ТекущийОтбор) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Равно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеРавно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Больше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Подобно ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеПодобно
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НачинаетсяС ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеНачинаетсяС
															ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.Содержит ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеСодержит))
				ИЛИ (ЭтоГруппаСправочника(ТекущийОтбор) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии)) тогда
				
				Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение = ТекущийОтбор;
			Иначе
				Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение = ЭлементОтбора.ОграничениеТипа.ПривестиЗначение();
			КонецЕсли;
		Иначе	
			Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение = ЭлементОтбора.ОграничениеТипа.ПривестиЗначение();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		ЭлементОтбора.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение = ЭлементОтбора.ОграничениеТипа.ПривестиЗначение();
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение.ТипЗначения = ОписаниеТиповОтбора;
		
		Если ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСписке тогда
			ЭлементОтбора.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ИначеЕсли ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ЭлементОтбора.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийОтбор) = Тип("СписокЗначений") И ТекущийОтбор.Количество() > 0 Тогда
			ПервыйЭлементСписка = ТекущийОтбор[0].Значение;
			
			Если (НЕ ЭтоГруппаСправочника(ПервыйЭлементСписка) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСписке))
				ИЛИ (ЭтоГруппаСправочника(ПервыйЭлементСписка) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) тогда
				
				МассивДобавляемыхТипов = Новый Массив();
				МассивДобавляемыхТипов.Добавить(ТипЗнч(ПервыйЭлементСписка));
				Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов(МассивДобавляемыхТипов);
				
				Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение.ЗагрузитьЗначения(ТекущийОтбор.ВыгрузитьЗначения());
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекущийОтбор) И ОписаниеТиповОтбора.СодержитТип(ТипЗнч(ТекущийОтбор)) Тогда
			Если (НЕ ЭтоГруппаСправочника(ТекущийОтбор) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСписке))
				ИЛИ (ЭтоГруппаСправочника(ТекущийОтбор) И (ЗначениеОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ЗначениеОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) тогда
				
				Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение.Очистить();
				Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение.Добавить(ТекущийОтбор);
			КонецЕсли;
		Иначе
			Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексОтбора].ПравоеЗначение.Очистить();
		КонецЕсли;		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоГруппаСправочника(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("Число") ИЛИ ТипЗнч(Элемент) = Тип("Строка") ИЛИ ТипЗнч(Элемент) = Тип("Булево")
		ИЛИ ТипЗнч(Элемент) = Тип("Дата") ИЛИ ТипЗнч(Элемент) = Тип("СтандартнаяДатаНачала") ИЛИ ТипЗнч(Элемент) = Тип("СписокЗначений") тогда
		
		Возврат Ложь;
	Иначе
		Возврат Элемент.ЭтоГруппа;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьГруппировкиСписка(СтруктураНастроекКомпоновкиДанных)
		
	ТаблицаВидовОтчета = ПолучитьТаблицуДинамическогоСписка();
		
	Если ТаблицаВидовОтчета.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкаВидОтчета = Ложь;
	ГруппировкаУправлениеПериодом = Ложь;
	ГруппировкаОрганизация = Ложь;
	
	ТаблицаВидовОтчета.Свернуть("ВидОтчета, УправлениеПериодом, Организация");
	ТаблицаВидовОтчета.Сортировать("ВидОтчета, УправлениеПериодом, Организация");
	
	ЗначениеВидОтчета = ТаблицаВидовОтчета[0].ВидОтчета;
	ЗначениеУправлениеПериодом = ТаблицаВидовОтчета[0].УправлениеПериодом;
	ЗначениеОрганизация = ТаблицаВидовОтчета[0].Организация;
	
	Для Каждого СтрокаКомбинация Из ТаблицаВидовОтчета Цикл
		
		Если ГруппировкаВидОтчета И ГруппировкаУправлениеПериодом И ГруппировкаОрганизация тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаКомбинация.ВидОтчета <> ЗначениеВидОтчета тогда
			ЗначениеВидОтчета = СтрокаКомбинация.ВидОтчета;
			ЗначениеУправлениеПериодом = СтрокаКомбинация.УправлениеПериодом;
			ЗначениеОрганизация = СтрокаКомбинация.Организация;
			ГруппировкаВидОтчета = Истина;
		ИначеЕсли СтрокаКомбинация.УправлениеПериодом <> ЗначениеУправлениеПериодом тогда
			ЗначениеУправлениеПериодом = СтрокаКомбинация.УправлениеПериодом;
			ЗначениеОрганизация = СтрокаКомбинация.Организация;
			ГруппировкаУправлениеПериодом = Истина;	
		ИначеЕсли СтрокаКомбинация.Организация <> ЗначениеОрганизация тогда
			ЗначениеОрганизация = СтрокаКомбинация.Организация;
			ГруппировкаОрганизация = Истина;
		КонецЕсли;
	
	КонецЦикла;
		
	Если ГруппировкаВидОтчета тогда
		ЭлементГруппировки = СтруктураНастроекКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ЭлементГруппировки.Использование = Истина;
		ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		ЭлементГруппировки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				
		ПолеГруппировки = ЭлементГруппировки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ВидОтчета");
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировки.НачалоПериода = Дата(1,1,1);
		ПолеГруппировки.КонецПериода = Дата(1,1,1);
		ПолеГруппировки.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	КонецЕсли;
	
	Если ГруппировкаУправлениеПериодом тогда
		ЭлементГруппировки = СтруктураНастроекКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ЭлементГруппировки.Использование = Истина;
		ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		ЭлементГруппировки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				
		ПолеГруппировки = ЭлементГруппировки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("УправлениеПериодом");
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировки.НачалоПериода = Дата(1,1,1);
		ПолеГруппировки.КонецПериода = Дата(1,1,1);
		ПолеГруппировки.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	КонецЕсли;
			
	Если ГруппировкаОрганизация тогда	
		ЭлементГруппировки = СтруктураНастроекКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ЭлементГруппировки.Использование = Истина;
		ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		ЭлементГруппировки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				
		ПолеГруппировки = ЭлементГруппировки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Организация");
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;		
		ПолеГруппировки.НачалоПериода = Дата(1,1,1);
		ПолеГруппировки.КонецПериода = Дата(1,1,1);
		ПолеГруппировки.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;		
	КонецЕсли;
	
	Для Каждого СтруктураГруппировка Из СтруктураНастроекКомпоновкиДанных.Структура Цикл
		Если СтруктураГруппировка.ПоляГруппировки.Элементы.Количество() > 0 тогда
			ЭлементГруппировка = СписокГруппировок.Добавить(Строка(СтруктураГруппировка.ПоляГруппировки.Элементы[0].Поле));
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВерсиюДокумента()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СозданаВФормеГрупповогоРедактирования", Истина);
	СтруктураПараметров.Вставить("ВозможноРедактирование", Ложь);
	СтруктураПараметров.Вставить("СрезПоВерсиям", Истина);
	СтруктураПараметров.Вставить("ВалютаОтображения", ВалютаОтображения);
	СтруктураПараметров.Вставить("мТекущаяВалюта", ВалютаОтображения);
	
	СписокВерсийДоТекущей = Новый СписокЗначений;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		
		СписокВерсий = Новый СписокЗначений;
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные.Свойство("ГруппировкаСтроки") тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Группа не может быть открыта. Выберите версию.'"),,,СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		СписокВерсий.Добавить(ТекущиеДанные.Ссылка);
		ТекущаяВерсияКод = ТекущиеДанные.Код;
				
		СтруктураПараметров.Вставить("СписокВерсий", СписокВерсий);
				
		ДополнитьСписокВерсийДоТекущей(ТекущиеДанные, СписокВерсийДоТекущей);
						
		Если РежимФормы = 2 Тогда
			СтруктураПараметров.Вставить("Бланк", ТекущийБланк);	   		
			СтруктураПараметров.Вставить("ЭкземплярОтчета", ЭкземплярОтчета);	
			СтруктураПараметров.Вставить("СписокВерсий", СписокВерсийДоТекущей);
			СтруктураПараметров.Вставить("СтруктураНастроекАналитическогоБланкаАдрес", ВладелецФормы.СтруктураНастроекАналитическогоБланкаАдрес);
						
			ИмяФормыБланка = "Обработка.АналитическийБланк.Форма.ФормаОтчета";
			ОткрытьФорму(ИмяФормыБланка, СтруктураПараметров,, ТекущаяВерсияКод,,,, РежимОткрытияОкнаФормы.Независимый);
		ИначеЕсли РежимФормы = 3 Тогда
			//Для сводной таблицы				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокВерсийДоТекущейДвойной(ТекущиеДанныеСписок, СписокВерсийДоТекущей, СписокВерсийДоТекущей2, Отказ)
		
	ТаблицаСписка = ПолучитьТаблицуДинамическогоСписка();
	
	СтруктураОпределенияГруппировок = Новый Структура();
	
	Для Каждого ПолеГруппировки Из СписокГруппировок Цикл
		ИмяПоляГруппировки = ПолеГруппировки.Значение;
		СтруктураОпределенияГруппировок.Вставить(ИмяПоляГруппировки, ТекущиеДанныеСписок[0].Значение[ИмяПоляГруппировки]);
		
		Если ТекущиеДанныеСписок[0].Значение[ИмяПоляГруппировки] <> ТекущиеДанныеСписок[1].Значение[ИмяПоляГруппировки] тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Версии для сравнения должны принадлежать одной группе'"),,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
		
	ТекущаяВерсияКод = ТекущиеДанныеСписок[0].Значение.Код;
	ТекущаяВерсияКод2 = ТекущиеДанныеСписок[1].Значение.Код;
	
	Если СтруктураОпределенияГруппировок.Количество() > 0 тогда
		МассивСтрокГрупировки = ТаблицаСписка.НайтиСтроки(СтруктураОпределенияГруппировок);
		Для Каждого СтрВерсия Из МассивСтрокГрупировки Цикл
			Если Не ЗначениеЗаполнено(СтрВерсия.Код) тогда
				Продолжить;
			КонецЕсли;
			Если СтрВерсия.Код <= ТекущаяВерсияКод Тогда
				СписокВерсийДоТекущей.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;
			Если СтрВерсия.Код <= ТекущаяВерсияКод2 Тогда
				СписокВерсийДоТекущей2.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;
		Конеццикла;
	Иначе
		Для Каждого СтрВерсия Из ТаблицаСписка Цикл
			Если Не ЗначениеЗаполнено(СтрВерсия.Код) тогда
				Продолжить;
			КонецЕсли;
			Если СтрВерсия.Код <= ТекущаяВерсияКод Тогда
				СписокВерсийДоТекущей.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;
			Если СтрВерсия.Код <= ТекущаяВерсияКод2 Тогда
				СписокВерсийДоТекущей2.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;
		Конеццикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокВерсийДоТекущей(ТекущиеДанные, СписокВерсийДоТекущей)
		
	ТаблицаСписка = ПолучитьТаблицуДинамическогоСписка();
	
	СтруктураОпределенияГруппировок = Новый Структура();
	
	Для Каждого ПолеГруппировки Из СписокГруппировок Цикл
		СтруктураОпределенияГруппировок.Вставить(ПолеГруппировки.Значение, ТекущиеДанные[ПолеГруппировки.Значение]);
	КонецЦикла;
	
	ТекущаяВерсияКод = ТекущиеДанные.Код;
	
	Если СтруктураОпределенияГруппировок.Количество() > 0 тогда
		МассивСтрокГрупировки = ТаблицаСписка.НайтиСтроки(СтруктураОпределенияГруппировок);
		Для Каждого СтрВерсия Из МассивСтрокГрупировки Цикл
			Если Не ЗначениеЗаполнено(СтрВерсия.Код) тогда
				Продолжить;
			КонецЕсли;
			Если СтрВерсия.Код <= ТекущаяВерсияКод Тогда
				СписокВерсийДоТекущей.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;				
		Конеццикла;
	Иначе	
		Для Каждого СтрВерсия Из ТаблицаСписка Цикл
			Если Не ЗначениеЗаполнено(СтрВерсия.Код) тогда
				Продолжить;
			КонецЕсли;
			Если СтрВерсия.Код <= ТекущаяВерсияКод Тогда
				СписокВерсийДоТекущей.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;				
		Конеццикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокВерсийПослеТекущей(ТекущиеДанные, СписокВерсийДоТекущей)
		
	ТаблицаСписка = ПолучитьТаблицуДинамическогоСписка();
	
	СтруктураОпределенияГруппировок = Новый Структура();
	
	Для Каждого ПолеГруппировки Из СписокГруппировок Цикл
		СтруктураОпределенияГруппировок.Вставить(ПолеГруппировки.Значение, ТекущиеДанные[ПолеГруппировки.Значение]);
	КонецЦикла;
	
	ТекущаяВерсияКод = ТекущиеДанные.Код;
	
	Если СтруктураОпределенияГруппировок.Количество() > 0 тогда
		МассивСтрокГрупировки = ТаблицаСписка.НайтиСтроки(СтруктураОпределенияГруппировок);
		Для Каждого СтрВерсия Из МассивСтрокГрупировки Цикл
			Если Не ЗначениеЗаполнено(СтрВерсия.Код) тогда
				Продолжить;
			КонецЕсли;
			Если СтрВерсия.Код >= ТекущаяВерсияКод Тогда
				СписокВерсийДоТекущей.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;				
		Конеццикла;
	Иначе	
		Для Каждого СтрВерсия Из ТаблицаСписка Цикл
			Если Не ЗначениеЗаполнено(СтрВерсия.Код) тогда
				Продолжить;
			КонецЕсли;
			Если СтрВерсия.Код >= ТекущаяВерсияКод Тогда
				СписокВерсийДоТекущей.Добавить(СтрВерсия.Ссылка);
			КонецЕсли;				
		Конеццикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция КоличествоЭлементовДинамическогоСписка()
		
	ТаблицаСписка = ПолучитьТаблицуДинамическогоСписка();
	
	Возврат ТаблицаСписка.Количество();
		
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДинамическогоСписка()
	
	СхемаКомпоновкиДанных = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСписка = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаСписка;
		
КонецФункции

&НаКлиенте
Процедура ОткрытьВерсию(Команда)
	
	ОткрытьВерсиюДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВерсии(Команда)
	
	СравнитьДвеВерсииДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДвеВерсииДокумента()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СозданаВФормеГрупповогоРедактирования", Истина);
	СтруктураПараметров.Вставить("ВозможноРедактирование", Ложь);
	СтруктураПараметров.Вставить("СрезПоВерсиям", Истина);
	СтруктураПараметров.Вставить("ВалютаОтображения", ВалютаОтображения);
	СтруктураПараметров.Вставить("мТекущаяВалюта", ВалютаОтображения);
	
	СписокВерсийДоТекущей1 = Новый СписокЗначений;
	СписокВерсийДоТекущей2 = Новый СписокЗначений;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 2 Тогда
		
		СписокВерсий = Новый СписокЗначений;
		СписокВерсийКод	= Новый СписокЗначений;
		ТекущиеДанныеСписок = Новый СписокЗначений;
		
		ТекущаяСтрокаСписка = Элементы.Список.ТекущаяСтрока;
		
		НомераВыделенныхСтрок = Новый СписокЗначений;
		Для Каждого ВыделеннаяСтрока ИЗ Элементы.Список.ВыделенныеСтроки Цикл
			НомераВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
		КонецЦикла;
		
		Если НомераВыделенныхСтрок.Количество() = 2 И НомераВыделенныхСтрок[0].Значение = ТекущаяСтрокаСписка тогда
			НомераВыделенныхСтрок.Сдвинуть(0, 1);
		КонецЕсли;
				
		Для Каждого ВыделеннаяСтрока ИЗ НомераВыделенныхСтрок Цикл			
			Элементы.Список.ТекущаяСтрока = ВыделеннаяСтрока.Значение;
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
			
			Если ТекущиеДанные.Свойство("ГруппировкаСтроки") тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Группа не может участвовать в сравнении'"),,,СтатусСообщения.Внимание);
				
				Элементы.Список.ВыделенныеСтроки.Очистить();
				Для Каждого ВыделеннаяСтрока ИЗ НомераВыделенныхСтрок Цикл
					Элементы.Список.ВыделенныеСтроки.Добавить(ВыделеннаяСтрока.Значение);
				КонецЦикла;
				
				Возврат;	
			КонецЕсли;
			
			СписокВерсий.Добавить(ТекущиеДанные.Ссылка);
			СписокВерсийКод.Добавить(ТекущиеДанные.Код);
			ТекущиеДанныеСписок.Добавить(ТекущиеДанные);
		КонецЦикла;
				
		СтруктураПараметров.Вставить("СписокВерсий", СписокВерсий);
						
		ТекущаяВерсияКод1 = СписокВерсийКод[0].Значение;
		ТекущаяВерсияКод2 = СписокВерсийКод[1].Значение;
		
		Отказ = Ложь;
		ДополнитьСписокВерсийДоТекущейДвойной(ТекущиеДанныеСписок, СписокВерсийДоТекущей1, СписокВерсийДоТекущей2, Отказ);
				
		Элементы.Список.ТекущаяСтрока = ТекущаяСтрокаСписка;
		
		Элементы.Список.ВыделенныеСтроки.Очистить();
		Для Каждого ВыделеннаяСтрока ИЗ НомераВыделенныхСтрок Цикл
			Элементы.Список.ВыделенныеСтроки.Добавить(ВыделеннаяСтрока.Значение);
		КонецЦикла;
		
		Если Отказ тогда
			Возврат;
		КонецЕсли;
		
		Если РежимФормы = 2 Тогда
			ПараметрыБазовойВерсии = Новый Структура;
			ПараметрыБазовойВерсии.Вставить("ПериодОтчета", ПериодОтчета);
			ПараметрыБазовойВерсии.Вставить("ПериодОкончания", ПериодОкончания);
			ПараметрыБазовойВерсии.Вставить("Сценарий", Сценарий);
			ПараметрыБазовойВерсии.Вставить("Организация", Организация);
			ПараметрыБазовойВерсии.Вставить("Проект", Проект);
			ПараметрыБазовойВерсии.Вставить("СписокВерсий", СписокВерсийДоТекущей1);
			ПараметрыБазовойВерсии.Вставить("Валюта", ВалютаОтображения);
			
			СтруктураПараметров.Вставить("Бланк", ТекущийБланк);	   		
			СтруктураПараметров.Вставить("ЭкземплярОтчета", ЭкземплярОтчета);	
			СтруктураПараметров.Вставить("СписокВерсий", СписокВерсийДоТекущей2);
			СтруктураПараметров.Вставить("ПараметрыБазовойВерсии", ПараметрыБазовойВерсии);
			СтруктураПараметров.Вставить("СтруктураНастроекАналитическогоБланкаАдрес", ВладелецФормы.СтруктураНастроекАналитическогоБланкаАдрес);
						
			ИмяФормыБланка = "Обработка.АналитическийБланк.Форма.ФормаОтчета";			
			ОткрытьФорму(ИмяФормыБланка, СтруктураПараметров,, Строка(ТекущаяВерсияКод1) + "VS" + Строка(ТекущаяВерсияКод2),,,, РежимОткрытияОкнаФормы.Независимый);
		ИначеЕсли РежимФормы = 3 Тогда
			//Для сводной таблицы	
		КонецЕсли;
		
	Иначе	
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Необходимо выделить две версии'"),,,СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДоВерсии(Команда)
	
	Если НЕ Элементы.Список.ВыделенныеСтроки.Количество()=1 Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'В качестве границы свертки данных необходимо выбрать одну версию.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ГруппировкаСтроки") тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Группа не может быть свернута. Выберите версию.'"),,,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.УдалениеЗапрещено Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Свертка возможна только до версий, созданных через экземпляр отчета.'"));
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("СвернутьДоВерсииЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, СтрШаблон(Нстр("ru = 'Версии экземпляра отчета будут свернуты до версии %1. Вы уверены?'"), 
		ТекущиеДанные.Ссылка), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СвернутьДоВерсииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
     
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
	ЭтаФорма.Модифицированность = Истина;
	
	СтруктураДанных = Новый Структура;
    СтруктураДанных.Вставить("ВерсияДляСвертки", ТекущиеДанные.Ссылка);
	
	Если ЗначениеЗаполнено(ЭкземплярОтчета) тогда
    	СтруктураДанных.Вставить("ЭкземплярОтчета", ЭкземплярОтчета);
	ИначеЕсли ТекущиеДанные.СвойСтво("ЭкземплярОтчета") тогда
		СтруктураДанных.Вставить("ЭкземплярОтчета", ТекущиеДанные.ЭкземплярОтчета);
	КонецЕсли;
    
    Оповестить("СвернутьВерсии", СтруктураДанных);
    
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНепосредственно(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтрокиСписка = Новый СписокЗначений;
	Для Каждого ВыделеннаяСтрока ИЗ Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеСтрокиСписка.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	ВерсииКУдалению = Новый Массив;
	НомераВерсий = "";
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтрокиСписка Цикл
		Элементы.Список.ТекущаяСтрока = ВыделеннаяСтрока.Значение;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ВерсииКУдалению.Добавить(ТекущиеДанные.Ссылка);
		НомераВерсий = НомераВерсий + ТекущиеДанные.Код + "; ";
	КонецЦикла;
	
	Элементы.Список.ВыделенныеСтроки.Очистить();	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтрокиСписка Цикл
		Элементы.Список.ВыделенныеСтроки.Добавить(ВыделеннаяСтрока.Значение);
	КонецЦикла;
	
	ТекстВопроса = "";
	Если ВыделенныеСтрокиСписка.Количество() = 1 тогда
		ТекстВопроса = "Вы хотите удалить версию";
	Иначе
		ТекстВопроса = "Вы хотите удалить версии:";
	КонецЕсли;
					
	Оповещение = Новый ОписаниеОповещения("ВыполнитьУдалениеНепосредственно", ЭтотОбъект, Новый Структура("ВерсииКУдалению", ВерсииКУдалению));
	ПоказатьВопрос(Оповещение, СтрШаблон(Нстр("ru = '%1 %2. Вы уверены?'"), ТекстВопроса, 
		Сред(НомераВерсий, 1, СтрДлина(НомераВерсий) - 2)), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдалениеНепосредственно(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьВерсииНепосредственно(ДополнительныеПараметры.ВерсииКУдалению);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВерсииНепосредственно(МассивВерсий)
		
	Для Каждого ВерсияСсылка Из МассивВерсий Цикл
		Попытка
			ВерсияСсылка.ПолучитьОбъект().Удалить();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось удалить версию № %1 от %2. Автор: %3'"), 
				Формат(ВерсияСсылка.Код, "ЧДЦ=0; ЧН=-; ЧГ=3,0"), Формат(ВерсияСсылка.Дата, "ДФ=dd.MM.yyyy"), ВерсияСсылка.Автор));
		КонецПопытки;
	КонецЦикла;
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВерсии(Команда)
			
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Нет выделенных версий документа'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтрокиСписка = Новый СписокЗначений;
	Для Каждого ВыделеннаяСтрока ИЗ Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеСтрокиСписка.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Отказ = Ложь;
	УдалятьДоВерсии = 0;
	УдалятьДоВерсииСсылка = Неопределено;
	РодительскаяГруппировкаСтроки = неопределено;
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтрокиСписка Цикл
		Элементы.Список.ТекущаяСтрока = ВыделеннаяСтрока.Значение;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("ГруппировкаСтроки") тогда			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Удалить элемент %1 невозможно'"), Строка(ТекущиеДанные.ГруппировкаСтроки)));
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("РодительскаяГруппировкаСтроки") тогда
			Если РодительскаяГруппировкаСтроки <> неопределено И РодительскаяГруппировкаСтроки <> ТекущиеДанные.РодительскаяГруппировкаСтроки тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Удалять элементы в разных группах одновременно нельзя'"));
				Отказ = Истина;
			КонецЕсли;
			РодительскаяГруппировкаСтроки = ТекущиеДанные.РодительскаяГруппировкаСтроки;
		КонецЕсли;
		
		Если Отказ тогда
			Элементы.Список.ВыделенныеСтроки.Очистить();	
			Для Каждого ВерсияДляВыделения ИЗ ВыделенныеСтрокиСписка Цикл
				Элементы.Список.ВыделенныеСтроки.Добавить(ВерсияДляВыделения.Значение);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.Код > УдалятьДоВерсии тогда 
			УдалятьДоВерсии = ТекущиеДанные.Код;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтрокиСписка Цикл
		Элементы.Список.ТекущаяСтрока = ВыделеннаяСтрока.Значение;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ТекущиеДанные.Код <= УдалятьДоВерсии тогда 
			УдалятьДоВерсии = ТекущиеДанные.Код;
			УдалятьДоВерсииСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	СписокВерсийПослеТекущей = Новый СписокЗначений();
	
	Элементы.Список.ТекущаяСтрока = УдалятьДоВерсииСсылка;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ДополнитьСписокВерсийПослеТекущей(ТекущиеДанные, СписокВерсийПослеТекущей);
	
	Элементы.Список.ВыделенныеСтроки.Очистить();	
	Для Каждого ВерсияДляВыделения ИЗ СписокВерсийПослеТекущей Цикл
		Элементы.Список.ВыделенныеСтроки.Добавить(ВерсияДляВыделения.Значение);
	КонецЦикла;
	
	Если УдалятьДоВерсии > 0 Тогда
				
		ПодготовитьДанныеДляУдаления(ТекущиеДанные, УдалятьДоВерсии);
		
		Если ТаблицаУдаляемыхВерсий.Количество() = КоличествоЭлементовДинамическогоСписка() Тогда
			Оповещение = Новый ОписаниеОповещения("ПродолжитьУдалениеВерсий", ЭтотОбъект);		
			ПоказатьВопрос(Оповещение, Нстр("ru = 'Будут удалены все версии документа. Вы уверены?'"), РежимДиалогаВопрос.ДаНет);
			
			Возврат;
		КонецЕсли;
		
		ПродолжитьУдалениеВерсий(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляУдаления(ТекущиеДанные, УдалятьДоВерсии)
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ЭкземплярОтчета) тогда
		Запрос.УстановитьПараметр("ЭкземплярОтчета", ЭкземплярОтчета);
		
		ТекстУсловия = "
	|	И ОписаниеВерсий.ЭкземплярОтчета = &ЭкземплярОтчета
	|	И (ОписаниеВерсий.Регистратор = &ЭкземплярОтчета
	|			ИЛИ ОписаниеВерсий.РучнаяОперация < 2)";
	Иначе
		
		ТекстУсловия = "";
		Если ЗначениеЗаполнено(ТекущиеДанные.Организация) тогда
			Запрос.УстановитьПараметр("Организация", ТекущиеДанные.Организация);
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.Организация = &Организация";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидОтчета) тогда
			Запрос.УстановитьПараметр("ВидОтчета", ТекущиеДанные.ВидОтчета);
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.ВидОтчета = &ВидОтчета";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.УправлениеПериодом) тогда
			Запрос.УстановитьПараметр("УправлениеПериодом", ТекущиеДанные.УправлениеПериодом);
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.УправлениеПериодом = &УправлениеПериодом";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Сценарий) тогда
			Запрос.УстановитьПараметр("Сценарий", ТекущиеДанные.Сценарий);
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.УправлениеПериодом.Сценарий = &Сценарий";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Проект) тогда
			Запрос.УстановитьПараметр("Проект", ТекущиеДанные.Проект);
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.Проект = &Проект";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПериодОтчета) тогда
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПериодОтчета.ДатаНачала));
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценария.ДатаНачала >= &ДатаНачала";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПериодОкончания) тогда
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодОкончания.ДатаОкончания));
			ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания <= &ДатаОкончания";
		КонецЕсли;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(ТекущиеДанные["Аналитика" + Инд]) Тогда
				Запрос.УстановитьПараметр("Аналитика" + Инд, ТекущиеДанные["Аналитика" + Инд]);
				ТекстУсловия = ТекстУсловия + "
	|	И ОписаниеВерсий.Аналитика" + Инд + " = &Аналитика" + Инд;	
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОписаниеВерсий.Ссылка КАК Ссылка,
	|	ОписаниеВерсий.Код КАК Код,
	|	ОписаниеВерсий.Дата КАК Дата,
	|	ОписаниеВерсий.Автор КАК Автор
	|ИЗ
	|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
	|ГДЕ
	|	ОписаниеВерсий.ЧерноваяВерсия = ЛОЖЬ" + ТекстУсловия + "
	|	И ОписаниеВерсий.Код >= &УдалятьДоВерсии"; 
		
	Запрос.УстановитьПараметр("УдалятьДоВерсии", УдалятьДоВерсии);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ТаблицаУдаляемыхВерсий");
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУдалениеВерсий(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		ТаблицаУдаляемыхВерсий.Очистить();
		Возврат;
	КонецЕсли;
	
	НомераВерсий = "";
	Для Каждого УдаляемаяВерсия Из ТаблицаУдаляемыхВерсий Цикл
		НомераВерсий = НомераВерсий + УдаляемаяВерсия.Код + "; ";
	КонецЦикла;
	
	ТекстВопроса = "";
	Если ТаблицаУдаляемыхВерсий.Количество() = 1 тогда
		ТекстВопроса = "Вы хотите удалить версию";
	Иначе
		ТекстВопроса = "Вы хотите удалить версии:";
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ВыполнитьУдалениеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, СтрШаблон(Нстр("ru = '%1 %2. Вы уверены?'"), ТекстВопроса,
		Сред(НомераВерсий, 1, СтрДлина(НомераВерсий) - 2)), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        УдалитьВыбранныеВерсии();
		
		ЭтаФорма.Модифицированность = Истина;
		Оповестить("Обработать удаление версий", ЭкземплярОтчета);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныеВерсии()
			
	Для Каждого Строка Из ТаблицаУдаляемыхВерсий Цикл
		Попытка
			Строка.Ссылка.ПолучитьОбъект().Удалить();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось удалить версию № %1 от %2. Автор: %3'"), 
				Формат(Строка.Код, "ЧДЦ=0; ЧН=-; ЧГ=3,0"), Формат(Строка.Дата, "ДФ=dd.MM.yyyy"), Строка.Автор));
		КонецПопытки;
	КонецЦикла;	
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
		
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодОтчета, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодОкончания) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодОкончания, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаОкончания	 = ПустаяДата;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		РезультатДатаНачала = РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания = РезультатВыбора.ДатаОкончания;
		
		Если ЗначениеЗаполнено(РезультатДатаНачала) И ЗначениеЗаполнено(РезультатДатаОкончания) Тогда
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
		КонецЕсли;
		
		ИспользоватьДатуНачала = ЗначениеЗаполнено(РезультатДатаНачала);
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаНачала].ПравоеЗначение = РезультатДатаНачала;
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаНачала].Использование = ИспользоватьДатуНачала;
		ПериодОтчета = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ТекущаяПериодичность);
		
		ИспользоватьДатуОкончания = ЗначениеЗаполнено(РезультатДатаОкончания);
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаОкончания].ПравоеЗначение = РезультатДатаОкончания;
		Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[ИндексЭлементаДатаОкончания].Использование = ИспользоватьДатуОкончания;
		ПериодОкончания = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ТекущаяПериодичность);
		
		ИспользоватьПериод = (ИспользоватьДатуНачала ИЛИ ИспользоватьДатуОкончания);
		
	ИначеЕсли РезультатВыбора <> неопределено тогда
		
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияПоВерсиям(Команда)
		
	ВыделенныеСтрокиСписка = Новый СписокЗначений;
	Для Каждого ВыделеннаяСтрока ИЗ Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеСтрокиСписка.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	СписокВерсий = Новый СписокЗначений();
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтрокиСписка Цикл
		Элементы.Список.ТекущаяСтрока = ВыделеннаяСтрока.Значение;
		СписокВерсий.Добавить(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЦикла;
	
	Элементы.Список.ВыделенныеСтроки.Очистить();	
	Для Каждого ВерсияДляВыделения ИЗ ВыделенныеСтрокиСписка Цикл
		Элементы.Список.ВыделенныеСтроки.Добавить(ВерсияДляВыделения.Значение);
	КонецЦикла;
	
	Если СписокВерсий.Количество() > 0 тогда
		ОткрытьФорму("Отчет.ДвиженияНастраиваемойОтчетности.Форма", 
			Новый Структура("Документ, СписокОбъектов", СписокВерсий[0].Значение, СписокВерсий),
			ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
      Закрыть(Новый Структура("Модифицированность",ЭтаФорма.Модифицированность));

КонецПроцедуры
