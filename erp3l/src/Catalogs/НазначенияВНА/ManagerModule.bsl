
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Установить видимость элементов формы по таблице
// описания реквизитов объекта ВНА.
//
Процедура НастроитьЭлементыФормыПоНазначениюВНА(Элементы, ТаблицаРеквизитов) Экспорт
					
	Для Каждого СтрокаРеквизита Из ТаблицаРеквизитов Цикл
		
		Элемент = Элементы.Найти(СокрЛП(СтрокаРеквизита.ИмяРеквизита));
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Контекст = Новый Структура("Видимость,ОбязателенДляЗаполнения");
		ЗаполнитьЗначенияСвойств(Контекст, СтрокаРеквизита);
		Элемент.Видимость = ?(Контекст.Видимость = Неопределено, Истина, Контекст.Видимость);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииНазначенияВНА(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	КлассВНА = Перечисления.КлассыВНА.ПолучитьКлассВНАПоСправочнику(Объект.Ссылка.Метаданные());
	
	ТекущийВид = Объект.НазначениеВНА;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() 
		И Не ЗначениеЗаполнено(Объект.НазначениеВНА)
		И (КлассВНА = Перечисления.КлассыВНА.ОсновноеСредство) Тогда
		ТекущийВид = Объект.Класс;//в ЕРП для ОС видимость брать из класса ОЭ
	КонецЕсли;

	УстановитьСвойстваЭлементовПоНазначениюВНАНаСервере(Элементы, ТекущийВид, КлассВНА);
	
КонецПроцедуры

// Вызывается из модуля формы элемента ВНА при изменении
//  реквизита НазначениеВНА для изменения отображения элементов.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - элементы формы для установки
//		свойств.
//  НазначениеВНА - СправочникСсылка.НазначениеВНА - значение
//		по настройкам которого будет установлены свойства
//		элементов формы.
//  КлассВНАПоУмолчанию - ПеречислениеСсылка.КлассВНА - класс
//		описывающий объект ВНА для обработки случая, когда
//		аргумен НазначениеВНА не заполнен.
//
Процедура УстановитьСвойстваЭлементовПоНазначениюВНАНаСервере(Элементы, НазначениеВНА, КлассВНАПоУмолчанию) Экспорт
	
	Если ЗначениеЗаполнено(НазначениеВНА) Тогда
		
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда //скроем все УХ
			
			ТаблицаРеквизитов = ЭлементыФормыВНАДляУправленияВидимостью(КлассВНАПоУмолчанию);
			Справочники.НазначенияВНА.НастроитьЭлементыФормыПоНазначениюВНА(Элементы, ТаблицаРеквизитов);
			
		КонецЕсли;
		
		ТаблицаРеквизитов = НазначениеВНА.РеквизитыДляКонтроля;
		
	Иначе
		// Таблица реквизитов по умолчанию для ОС
		ТаблицаРеквизитов = ЭлементыФормыВНАДляУправленияВидимостью(КлассВНАПоУмолчанию);
	КонецЕсли;
	
	Справочники.НазначенияВНА.НастроитьЭлементыФормыПоНазначениюВНА(Элементы, ТаблицаРеквизитов);
	
КонецПроцедуры

// Возвращает метаданные справочника объекта ВНА по его классу.
//
Функция МетаданныеСправочникаПоКлассуВНА(КлассВНА) Экспорт
	Если КлассВНА = Перечисления.КлассыВНА.ОсновноеСредство Тогда
		Возврат ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуОС().Метаданные();
	ИначеЕсли КлассВНА = Перечисления.КлассыВНА.НематериальныйАктив Тогда
		Возврат Метаданные.Справочники.НематериальныеАктивы;
	ИначеЕсли КлассВНА = Перечисления.КлассыВНА.НезавершенноеСтроительство Тогда
		Возврат Метаданные.Справочники.ОбъектыСтроительства;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает описание реквизитов объекта ВНА
// по его классу для управления видимостью
//
// Параметры:
//	КлассВНА - ПеречислениеСсылка.КлассыВНА.
//
// Возвращаемое значение:
//	Структура - поля:
//		МетаданныеСправочника - ОбъектМетаданных: Справочник -
//			метаданные справочника хранящего элементы ВНА даннго класса.
//		ЭлементыОтображения - Структура - имена элементов формы
//			элемента целевого справочника.
//		НеУчитыватьРеквизиты - Соответствие - имена реквизитов
//			справочника, которые не участвуют в управлени видимостью.
//
Функция ОписаниеКлассаВНАДляУправленияВидимостью(КлассВНА) Экспорт
	ОписаниеКлассаВНА = Новый Структура;
	
	// Объект метаданных справочника хранящего
	// элементы указанного класса.
	ОписаниеКлассаВНА.Вставить("МетаданныеСправочника",
		МетаданныеСправочникаПоКлассуВНА(КлассВНА));
	
	// Элементы формы справочника для управления видимостью.
	ОписаниеКлассаВНА.Вставить("ЭлементыОтображения",
		Новый Соответствие);
	
	// Служебные, не используемые, предназначенные для удаления, булевы признаки
	// или любые другие не предназначенные для интерактивной настройки пользователем.
	// Соответствие для ускорения поиска по имени реквизита.
	ОписаниеКлассаВНА.Вставить("НеУчитыватьРеквизиты",
		Новый Соответствие);
		
	Если КлассВНА = Перечисления.КлассыВНА.ОсновноеСредство Тогда
		
		// Реквизиты формы скрыты по умолчанию.
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("РемонтныйЦикл", 		НСтр("ru = 'Ремонтный цикл'")			);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Страхование", 			НСтр("ru = 'Страхование'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КомпонентыВНА", 		НСтр("ru = 'Компоненты ВНА'")			);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КадастровыйНомер", 		НСтр("ru = 'Кадастровый номер'")		);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КадастроваяСтоимость", 	НСтр("ru = 'Кадастровая стоимость'")	);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("ОбщаяПлощадь", 			НСтр("ru = 'Общая площадь'")			);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Этажность", 			НСтр("ru = 'Этажность'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("ПраваСобственности", 	НСтр("ru = 'Права собственности'")		);
        ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Модель", 				НСтр("ru = 'Модель'")					);
        ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("СерийныйНомер", 		НСтр("ru = 'Серийный номер'")			);
        ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Состояние", 			НСтр("ru = 'Состояние'")				);
		
	ИначеЕсли КлассВНА = Перечисления.КлассыВНА.НематериальныйАктив Тогда
		
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("СерийныйНомер", 		НСтр("ru = 'Серийный номер'")			);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Состояние", 			НСтр("ru = 'Состояние'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("ПраваСобственности", 	НСтр("ru = 'Права собственности'")		);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Страхование", 			НСтр("ru = 'Страхование'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КомпонентыВНА", 		НСтр("ru = 'Компоненты ВНА'")			);
		
	ИначеЕсли КлассВНА = Перечисления.КлассыВНА.НезавершенноеСтроительство Тогда
		
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Страхование", 			НСтр("ru = 'Страхование'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КомпонентыВНА", 		НСтр("ru = 'Компоненты ВНА'")			);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КадастровыйНомер", 		НСтр("ru = 'Кадастровый номер'")		);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("КадастроваяСтоимость", 	НСтр("ru = 'Кадастровая стоимость'")	);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("ОбщаяПлощадь", 			НСтр("ru = 'Общая площадь'")			);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Этажность", 			НСтр("ru = 'Этажность'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("Состояние", 			НСтр("ru = 'Состояние'")				);
		ОписаниеКлассаВНА.ЭлементыОтображения.Вставить("ПраваСобственности", 	НСтр("ru = 'Права собственности'")		);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный класс ВНА для управления видимостью!'");
	КонецЕсли;
	
	Возврат ОписаниеКлассаВНА;
КонецФункции

// Возвращает таблицу описания реквизитов объекта ВНА
// по его классу для управления видимостью.
//
// Возвращаемое значение:
//	ТаблицаЗначений - описание реквизитов справочника ВНА.
//
Функция ЭлементыФормыВНАДляУправленияВидимостью(КлассВНА) Экспорт
	ОписаниеКлассаВНА = ОписаниеКлассаВНАДляУправленияВидимостью(КлассВНА);
	Возврат ПолучитьТаблицуРеквизитовСправочникаДляУправленияВидимостью(
					ОписаниеКлассаВНА);
КонецФункции

Процедура ЗаписатьНаборЗаписей(Форма, ИмяРеквизитаНаборЗаписей, Отбор, Отказ = Ложь, Знач ПредставлениеРеквизита = Неопределено) Экспорт
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
    нз = Форма.РеквизитФормыВЗначение(ИмяРеквизитаНаборЗаписей);
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если Не нз.Отбор[ЭлементОтбора.Ключ].Использование Тогда
			нз.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Запись Из нз Цикл
		
		Для каждого ЭлементОтбора Из Отбор Цикл		
			Запись[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение;		
		КонецЦикла;
        
	КонецЦикла;
	
	Попытка
		нз.Записать();
	Исключение
		
		ПредставлениеРеквизита = ?(ПредставлениеРеквизита = Неопределено, ИмяРеквизитаНаборЗаписей, ПредставлениеРеквизита);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(НСтр("ru = 'Не удалось обновить связанную информацию <%1>'"), ПредставлениеРеквизита), Отказ);
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;    

КонецПроцедуры

Процедура ПодготовитьНаборЗаписей(Форма, ИмяРеквизитаНаборЗаписей, Отбор) Экспорт

	нз = Форма.РеквизитФормыВЗначение(ИмяРеквизитаНаборЗаписей);
	
	Для каждого ЭлементОтбора Из Отбор Цикл	
		нз.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);	
	КонецЦикла;	
	
	нз.Прочитать();
	Форма.ЗначениеВРеквизитФормы(нз, ИмяРеквизитаНаборЗаписей);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВНА(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ПраваДоступаМСФО() Тогда
		
		ДатаCведений = Неопределено;//для ОС есть реквизит, для остальных явно
		КлассВНА = Перечисления.КлассыВНА.ПолучитьКлассВНАПоСправочнику(Объект.Ссылка.Метаданные());
		Если КлассВНА <> Перечисления.КлассыВНА.ОсновноеСредство Тогда
			ДатаCведений = ТекущаяДата();
		КонецЕсли;
		
		МСФОВНАВызовСервераУХ.ОбновитьПараметрыМСФО(Форма, ДатаCведений);
		
		ПриИзмененииНазначенияВНА(Форма);
		
		Если Не Объект.Ссылка.Пустая() Тогда
			
			Справочники.НазначенияВНА.ПодготовитьНаборЗаписей(Форма, "ДоговорыЗалога", 	Новый Структура("ОбъектЗалога", Объект.Ссылка));
			Справочники.НазначенияВНА.ПодготовитьНаборЗаписей(Форма, "КомпонентыВНА", 	Новый Структура("БазовыйВНА", 	Объект.Ссылка));
			
		КонецЕсли;
		
		МСФОКлиентСерверУХ.ОбновитьЗаголовкиГруппВНА(Форма);		
		МСФОКлиентСерверУХ.УправлениеФормойВНА(Форма);
		
	Иначе
		
		Элементы.ГруппаМСФО.Видимость = Ложь;
		Если Элементы.Найти("ГруппаМСФОУправление") <> Неопределено Тогда
			Элементы.ГруппаМСФОУправление.Видимость = Ложь;//для ОС
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиНаСервереВНА(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Не ПраваДоступаМСФО() Тогда
		Возврат;	
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	// Перед записью параметров очистим параметры учета по умолчанию, если выбран вариант учета Трансляция.
	ЭтоТрансляция = (Форма.ВариантУчетаВНА = 0);
	Если ЭтоТрансляция Тогда			
		Форма.ПараметрыУчетаМСФО = Справочники.ГруппыВНАМСФО.ПустаяСсылка();
	Иначе
		// В противном случае записываем параметры учета в исходном виде.
	КонецЕсли;
	
	Справочники.ГруппыВНАМСФО.СохранитьПараметрыПоУмолчаниюВНА(ТекущийОбъект.Ссылка, Форма.ПараметрыУчетаМСФО);
	
	Для каждого стр Из Форма.ДоговорыЗалога Цикл	
		Если стр.Количество = 0 Тогда
			стр.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
	Справочники.НазначенияВНА.ЗаписатьНаборЗаписей(Форма, "ДоговорыЗалога", 	
		Новый Структура("ОбъектЗалога", ТекущийОбъект.Ссылка), Отказ, НСтр("ru = 'Договоры залога'"));
	Справочники.НазначенияВНА.ЗаписатьНаборЗаписей(Форма, "КомпонентыВНА",
		Новый Структура("БазовыйВНА", ТекущийОбъект.Ссылка), Отказ, НСтр("ru = 'Компоненты ВНА'"));
	
КонецПроцедуры

Функция ПраваДоступаМСФО() Экспорт
	Возврат ПравоДоступа("Редактирование", Метаданные.Справочники.ГруппыВНАМСФО);
КонецФункции

#КонецОбласти

#Область Служебные

Функция ПолучитьТаблицуРеквизитовСправочникаДляУправленияВидимостью(ОписаниеКлассаВНА)
	// Описание формата возвращаемой таблицы реквизитов
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	
	// Значения заполняемые по-умолчанию в строку каждого из реквизитов
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ИмяРеквизита", "");
	ЗначенияПоУмолчанию.Вставить("Синоним", "");
	ЗначенияПоУмолчанию.Вставить("Видимость", Ложь);
	
	ДобавитьЭлементыФормыСправочника(
		Таблица,
		ЗначенияПоУмолчанию,
		ОписаниеКлассаВНА.ЭлементыОтображения);
	
	Возврат Таблица;
КонецФункции

// Получение таблицы реквизитов из описания метаданных
//
Процедура ЗаполнитьТаблицуРеквизитовПоМетаданным(Таблица,
								ОписаниеКлассаВНА, ЗначенияПоУмолчанию)
	Для Каждого Реквизит Из ОписаниеКлассаВНА.МетаданныеСправочника.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если ОписаниеКлассаВНА.НеУчитыватьРеквизиты.Получить(
								ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеКлассаВНА.ЭлементыОтображения.Получить(
								ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
		СтрокаРеквизита.ИмяРеквизита = ИмяРеквизита;
		// Реквизиты объекта по умолчанию показываем.
		СтрокаРеквизита.Видимость = Истина;
	КонецЦикла;
КонецПроцедуры

// Добавить элементы формы к таблице реквизитов
//
Процедура ДобавитьЭлементыФормыСправочника(Таблица, ЗначенияПоУмолчанию, ЭлементыОтображения)
	Для каждого ЭлементОтображения Из ЭлементыОтображения Цикл
		СтрокаРеквизита = Таблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		
		СтрокаРеквизита.ИмяРеквизита = ЭлементОтображения.Ключ;
		СтрокаРеквизита.Синоним = ЭлементОтображения.Значение;
		// Реквизиты формы по умолчанию скрываем.
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьТипыВНА() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НематериальныеАктивы.НазначениеВНА КАК НазначениеВНА,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НематериальныйАктив) КАК КлассВНА
	|ПОМЕСТИТЬ НазначенияВНАнесгруппированные
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.НазначениеВНА <> &НазначениеВНА
	|	И НематериальныеАктивы.НазначениеВНА.КлассВНА = &КлассВНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыСтроительства.НазначениеВНА,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.НазначениеВНА <> &НазначениеВНА
	|	И ОбъектыСтроительства.НазначениеВНА.КлассВНА = &КлассВНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеСредства.НазначениеВНА,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыВНА.ОсновноеСредство)
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.НазначениеВНА <> &НазначениеВНА
	|	И ОсновныеСредства.НазначениеВНА.КлассВНА = &КлассВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначенияВНАнесгруппированные.НазначениеВНА КАК НазначениеВНА,
	|	МАКСИМУМ(НазначенияВНАнесгруппированные.КлассВНА) КАК КлассВНА
	|ИЗ
	|	НазначенияВНАнесгруппированные КАК НазначенияВНАнесгруппированные
	|
	|СГРУППИРОВАТЬ ПО
	|	НазначенияВНАнесгруппированные.НазначениеВНА";
	
	
	ИмяСправочника = ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуОС().Метаданные().Имя();
	Если ИмяСправочника <> "ОсновныеСредства" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеСредства", ИмяСправочника);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КлассВНА", Перечисления.КлассыВНА.ПустаяСсылка());
	Запрос.УстановитьПараметр("НазначениеВНА", Справочники.НазначенияВНА.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НазначениеВНАОбъект = ВыборкаДетальныеЗаписи.НазначениеВНА.ПолучитьОбъект();
		НазначениеВНАОбъект.КлассВНА = ВыборкаДетальныеЗаписи.КлассВНА;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НазначениеВНАОбъект);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли