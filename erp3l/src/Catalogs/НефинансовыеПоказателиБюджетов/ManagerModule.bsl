#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - имена блокируемых реквизитов:
//		* БлокируемыйРеквизит - Строка - Имя блокируемого реквизита.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Результат.Добавить("ВидАналитики" + НомерАналитики);
	КонецЦикла;
	Результат.Добавить("ВидПоказателя");
	Результат.Добавить("УстанавливатьЗначениеНаКаждыйПериод");
	Результат.Добавить("ЗагружатьИзДругихПодсистем");
	Результат.Добавить("ПоОрганизациям");
	Результат.Добавить("ПоПериодам");
	Результат.Добавить("ПоСценариям");
	Результат.Добавить("ПоПодразделениям");
	Результат.Добавить("Периодичность");
	Результат.Добавить("ПериодичностьПодпериодов");
	
	Возврат Результат;
	
КонецФункции

// Возвращает предопределенную схему получения данных
//
// Параметры:
//	ИмяМакета - Строка - имя макета, из которого необходимо получить описание и схему.
//	РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования
//
// Возвращаемое значение:
//	СхемаКомпоновкиДанных - схема получения данных.
//
Функция ПредопределеннаяСхемаПолученияДанных(ИмяМакета, РежимПолученияДанных = Неопределено) Экспорт
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	
	Если (ИмяМакета = "ЦеныНоменклатуры" И ИспользуетсяЦенообразование25) Тогда
		ИмяМакетаНовое = "ЦеныНоменклатуры2_5";
	ИначеЕсли (ИмяМакета = "ЦеныНоменклатуры2_5" И Не ИспользуетсяЦенообразование25) Тогда
		ИмяМакетаНовое = "ЦеныНоменклатуры";
	Иначе
		ИмяМакетаНовое = ИмяМакета;
	КонецЕсли;
	
	СхемаПолученияДанных = Справочники.НефинансовыеПоказателиБюджетов.ПолучитьМакет(ИмяМакетаНовое);
	
	Если РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
		Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
			Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
				Набор.Запрос = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписейВоВсемЗапросе(Набор.Запрос, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат  СхемаПолученияДанных;
	
КонецФункции

// Возвращает таблицу нефинансовых показателей с учетом отбора компоновки данных
//
// Параметры:
// 	 ОтборКомпоновкиДанны - НастройкиКомпоновкиДанных - Настройки компоновки данных, содержащие отбор.
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица нефинансовых показателей:
//		* НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель.
//		* ПолеВалютыАналитики - Строка - Источник заполнения валюты.
//		* ПолеЕдиницыИзмеренияАналитики - Строка - Источник заполнения единицы измерения.
//
Функция НефинансовыеПоказателиСУчетомОтбора(ОтборКомпоновкиДанны) Экспорт
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефинансовыеПоказатели.Ссылка КАК НефинансовыйПоказатель,
	|	НефинансовыеПоказатели.АналитикаВалюты.ЗаполнениеВалюты КАК ПолеВалютыАналитики,
	|	НефинансовыеПоказатели.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК ПолеЕдиницыИзмеренияАналитики,
	|	*
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказатели
	|ГДЕ
	|	НЕ НефинансовыеПоказатели.ПометкаУдаления
	|	И НЕ НефинансовыеПоказатели.ЭтоГруппа
	|";
	НаборДанныхСценарии.АвтоЗаполнениеДоступныхПолей = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	Для каждого Элемент Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если Элемент.Папка Тогда
			Продолжить;
		КонецЕсли;
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, Элемент.Поле);
	КонецЦикла;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанны);
	
	Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	
	Для каждого Макет Из Метаданные.Справочники.НефинансовыеПоказателиБюджетов.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если (Макет.Имя = "ЦеныНоменклатуры" И ИспользуетсяЦенообразование25) 
				Или (Макет.Имя = "ЦеныНоменклатуры2_5" И Не ИспользуетсяЦенообразование25) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТ
	Отчеты.ЗначенияНефинансовыхПоказателей.ДобавитьКомандуОтчета(КомандыОтчетов);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ НЕ УТ
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НефинансовыеПоказателиБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.5.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9ccaff93-0185-455f-96d4-965995e7adbe");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НефинансовыеПоказателиБюджетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Конвертирует выражения заполнения аналитик в новый формат';
									|en = 'Converts dimension population expressions to a new format'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьВидыКонтактнойИнформацииУТ";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

#Область Обработчики_2_5_5

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.НефинансовыеПоказателиБюджетов";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НефинансовыеПоказателиБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
	|ГДЕ
	|	НЕ НефинансовыеПоказателиБюджетов.ЭтоГруппа
	|		И 
	|	(НЕ НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики1 ПОДОБНО """"
	|		И НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики1ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики2 ПОДОБНО """"
	|		И НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики2ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики3 ПОДОБНО """"
	|		И НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики3ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики4 ПОДОБНО """"
	|		И НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики4ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики5 ПОДОБНО """"
	|		И НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики5ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики6 ПОДОБНО """"
	|		И НефинансовыеПоказателиБюджетов.ВыражениеЗаполненияАналитики6ИсторияПереходаНаНовыеФормулы ПОДОБНО """")";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.НефинансовыеПоказателиБюджетов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			Иначе
				
				ОбъектИзменен = Ложь;
			
				ОбработатьИзменениеВыраженийЗаполненияАналитик(СправочникОбъект, ОбъектИзменен);
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


// Преобразует выражение аналитики в новый формат.
// 
// Параметры:
// 	СправочникОбъект - СправочникОбъект.НефинансовыеПоказателиБюджетов - Изменяемый элемент.
// 	ОбъектИзменен - Булево - Флаг изменения объекта.
Процедура ОбработатьИзменениеВыраженийЗаполненияАналитик(СправочникОбъект, ОбъектИзменен)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВыраженияДляОбработки = Новый Соответствие;
	ИсходныеВыражения = Новый Массив;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИмяРеквизита = "ВыражениеЗаполненияАналитики" + НомерАналитики;
		ИмяРеквизитаИстория = "ВыражениеЗаполненияАналитики" + НомерАналитики + "ИсторияПереходаНаНовыеФормулы";
		Если НЕ ЗначениеЗаполнено(СправочникОбъект[ИмяРеквизитаИстория])
			И ЗначениеЗаполнено(СправочникОбъект[ИмяРеквизита]) Тогда
			Выражение = СправочникОбъект[ИмяРеквизита];
			ВыраженияДляОбработки.Вставить(ИмяРеквизита, Выражение);
			Если ИсходныеВыражения.Найти(Выражение) = Неопределено Тогда
				ИсходныеВыражения.Добавить(Выражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыраженияДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.СхемаКомпоновкиДанных) Тогда
		СхемаПолученияДанных = ПредопределеннаяСхемаПолученияДанных(СправочникОбъект.СхемаКомпоновкиДанных);
	Иначе
		СхемаПолученияДанных = СправочникОбъект.ХранилищеСхемыКомпоновкиДанных.Получить();
		Если ТипЗнч(СхемаПолученияДанных) = Тип("ХранилищеЗначения") Тогда
			СхемаПолученияДанных = СхемаПолученияДанных.Получить();
		КонецЕсли;
	КонецЕсли;
	
	РезультатПреобразований = РаботаСФормулами.ПреобразоватьВФорматИдентификаторовОперандыФормулыСКД(ИсходныеВыражения,
		СхемаПолученияДанных);
		
	Если РезультатПреобразований.ЕстьОшибки Тогда
		ТекстОшибок = "";
		Для Каждого КлючИЗначение Из РезультатПреобразований.СообщенияОшибокПреобразования Цикл
			ТекстОшибок = ТекстОшибок + ?(ТекстОшибок = "", "", " / " + Символы.ПС) + КлючИЗначение.Значение;
		КонецЦикла;
		СправочникОбъект.УдалитьЕстьОшибкиПереходаНаНовыйФорматФормул = Истина;
		ИмяСобытияОшибкиЖР = НСтр("ru = 'Перевод формул и выражение в новый формат';
									|en = 'Conversion of formulas and expression to a new format'");
		ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиЖР,
			УровеньЖурналаРегистрации.Ошибка,
			СправочникОбъект.Метаданные(),
			СправочникОбъект.Ссылка,
			ТекстОшибок);
		// Переход на новый формат формул не гарантируется, т.к. выражения могут содержать ошибки.
		// Отказа от транзакции не происходит.
		
		ОбъектИзменен = Истина;
	КонецЕсли;
	
	ПреобразованныеВыражения = РезультатПреобразований.ПреобразованныеВыражения;
	Для каждого ИмяРеквизитаИИсходноеВыражение Из ВыраженияДляОбработки Цикл
		ИмяРеквизита = ИмяРеквизитаИИсходноеВыражение.Ключ;
		ИмяРеквизитаИстория = ИмяРеквизита + "ИсторияПереходаНаНовыеФормулы";
		ИсходноеВыражение = ИмяРеквизитаИИсходноеВыражение.Значение;
		ВыражениеЗамены = ПреобразованныеВыражения.Получить(ИсходноеВыражение);
		Если ЗначениеЗаполнено(ВыражениеЗамены) Тогда
			СправочникОбъект[ИмяРеквизита] = ВыражениеЗамены;
		КонецЕсли;
		СправочникОбъект[ИмяРеквизитаИстория] = ИсходноеВыражение;
		
		ОбъектИзменен = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

#КонецЕсли
