
#Область УниверсальныеПроцессыСогласование

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВосстановитьНастройкиФормы();
	
	ТипОбъектаСогласованияПриИзмененииНаСервере();
	
	#Область УниверсальныеПроцессыСогласование
		ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТипОбъектаСогласования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка."+ИмяСправочника);
	
	ОбновитьСтатусыСтрокПланЗакупок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	
	ОбновитьСтатусыСтрокПланЗакупок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьСтатусыСтрокПланЗакупок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииНаСервере();
	ОбновитьСтатусыСтрокПланЗакупок();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяСправочникаПриИзменении(Элемент)
	
	Элементы.ТипОбъектаСогласования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка."+ИмяСправочника);
	Объект.ТипОбъектаСогласования=Неопределено;
	Объект.ОбъектыКСогласованию.Очистить();
	УстановитьВидимость();
	
	СохранитьНастройкиФормы();

КонецПроцедуры

// Определяет наличие в базе метаданных для ИмяСправочникаВход ИмяТипаВход
&НаСервереБезКонтекста
Функция ЕстьМетаданныеОбъекта(ИмяСправочникаВход, ИмяТипаВход)
	РезультатФункции = Ложь;
	Если СокрЛП(ИмяСправочникаВход) = "СправочникиБД" Тогда
		РезультатФункции = (Метаданные.Справочники.Найти(ИмяТипаВход) <> Неопределено);
	ИначеЕсли СокрЛП(ИмяСправочникаВход) = "ДокументыБД" Тогда
		РезультатФункции = (Метаданные.Документы.Найти(ИмяТипаВход) <> Неопределено);
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает описание описание типов для установки ограничений.
&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповОграничения(ИмяСправочникаВход, ИмяТипаВход)
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(ИмяСправочникаВход) И ЗначениеЗаполнено(ИмяТипаВход) Тогда
		Если ЕстьМетаданныеОбъекта(ИмяСправочникаВход, ИмяТипаВход) Тогда
			МассивТипов = Новый Массив;
			Если СокрЛП(ИмяСправочникаВход) = "СправочникиБД" Тогда
				НовыйТип = Тип("СправочникСсылка." + ИмяТипаВход);
				МассивТипов.Добавить(НовыйТип);
			ИначеЕсли СокрЛП(ИмяСправочникаВход) = "ДокументыБД" Тогда
				НовыйТип = Тип("ДокументСсылка." + ИмяТипаВход);
				МассивТипов.Добавить(НовыйТип);
			Иначе
				РезультатФункции = Неопределено;		// Не справочник и не документ.
			КонецЕсли;
			Если МассивТипов.Количество() > 0 Тогда
				РезультатФункции = Новый ОписаниеТипов(МассивТипов);
			Иначе
				РезультатФункции = Неопределено;		// Не удалось найти нужный тип.
			КонецЕсли;
		Иначе
			РезультатФункции = Неопределено;			// Такого объекта в базе нет.
		КонецЕсли;
	Иначе
		РезультатФункции = Неопределено;				// Переданы пустые значения.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ТипОбъектаСогласованияПриИзменении(Элемент)
		
	ТипОбъектаСогласованияПриИзмененииНаСервере();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыКСогласованию

&НаКлиенте
Процедура ОбъектыКСогласованиюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Строка(Объект.ТипОбъектаСогласования)="" Тогда
		Сообщить(НСтр("ru = 'Не выбран тип объекта согласования'"));
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКСогласованиюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если СтруктураИспользуемыхРеквизитов.СуммаДокумента=Истина Тогда
		Объект.СуммаРеестра=Объект.ОбъектыКСогласованию.Итог("СуммаДокумента");
	КонецЕсли;
	
	ОбновитьДанныеСтроки(Элементы.ОбъектыКСогласованию.ТекущаяСтрока);
	ОбновитьСтатусыСтрокПланЗакупок();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКСогласованиюПослеУдаления(Элемент)
	
	Если СтруктураИспользуемыхРеквизитов.СуммаДокумента=Истина Тогда
		Объект.СуммаРеестра=Объект.ОбъектыКСогласованию.Итог("СуммаДокумента");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеестр(Команда)
	
	Если Строка(Объект.ТипОбъектаСогласования)="" Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаполнитьРеестрНаСервере();
	ОбновитьСтатусыСтрокПланЗакупок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеестрНаСервере()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СогласуемыеОбъекты.Ссылка КАК СогласуемыйОбъект";
	
	Для Каждого КлючИЗначение ИЗ СтруктураИспользуемыхРеквизитов Цикл
		
		Если КлючИЗначение.Значение=Истина Тогда 
			
			Запрос.Текст=Запрос.Текст+",
			|"+КлючИЗначение.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	"+?(ИмяСправочника="СправочникиБД","Справочник","Документ")+"."+Объект.ТипОбъектаСогласования.Наименование+" КАК СогласуемыеОбъекты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
	|	ПО СогласуемыеОбъекты.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|ГДЕ 
	|	ЕСТЬNULL(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта, &СтатусЧерновик) В (&СтатусЧерновик, &СтатусОтклонен)";
	Запрос.УстановитьПараметр("СтатусЧерновик",Объект.ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияЧерновик);
	Запрос.УстановитьПараметр("СтатусОтклонен",Объект.ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияОтклонен);
	
	ТекстОтбор="";
	
	Если СтруктураИспользуемыхРеквизитов.Организация=Истина Тогда
		
		ТекстОтбор=ТекстОтбор + Символы.ПС +" И СогласуемыеОбъекты.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		Запрос.Текст=Запрос.Текст+ ТекстОтбор;
		
	КонецЕсли;
	
	Объект.ОбъектыКСогласованию.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если СтруктураИспользуемыхРеквизитов.СуммаДокумента=Истина Тогда
		Объект.СуммаРеестра=Объект.ОбъектыКСогласованию.Итог("СуммаДокумента");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтроки(НомерСтроки)
	
	СтрокаДокумент=Объект.ОбъектыКСогласованию.НайтиПоИдентификатору(НомерСтроки);
	Если Не  СтрокаДокумент.СогласуемыйОбъект = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДокумент,СтрокаДокумент.СогласуемыйОбъект);
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьДанныеСтроки() 

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()
	
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяТипа(Синоним)	
	Если НЕ ЗначениеЗаполнено(Синоним) Тогда
		Возврат Неопределено;
	Иначе	
		Возврат Синоним.Наименование;
	КонецЕсли; 
КонецФункции
	
&НаСервере
Процедура ТипОбъектаСогласованияПриИзмененииНаСервере()
	Если ТипЗнч(Объект.ТипОбъектаСогласования)=Тип("СправочникСсылка.СправочникиБД") Тогда
		
		ИмяСправочника="СправочникиБД";
		
	ИначеЕсли ТипЗнч(Объект.ТипОбъектаСогласования)=Тип("СправочникСсылка.ДокументыБД") Тогда
		
		ИмяСправочника="ДокументыБД";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСправочника) Тогда
		
		ИмяСправочника="ДокументыБД";
		
	КонецЕсли;
	
	СтруктураИспользуемыхРеквизитов=Новый Структура("Организация,Контрагент,Дата,СуммаДокумента,ВалютаДокумента");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипОбъектаСогласования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Реквизит ИЗ Объект.ТипОбъектаСогласования.Реквизиты Цикл
		
		Если Реквизит.Имя="Организация"
			ИЛИ Реквизит.Имя="Контрагент"
			ИЛИ Реквизит.Имя="Дата"
			ИЛИ Реквизит.Имя="СуммаДокумента"
			ИЛИ Реквизит.Имя="ВалютаДокумента" Тогда
			
			СтруктураИспользуемыхРеквизитов.Вставить(Реквизит.Имя,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не (СтруктураИспользуемыхРеквизитов.Организация = Истина) тогда
		Объект.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураИспользуемыхРеквизитов=Новый ФиксированнаяСтруктура(СтруктураИспользуемыхРеквизитов);
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	УстановитьВидимость();
	// Установим ограничение типа для поля СогласуемыйДокумент табличной части ОбъектыКСогласованию.
	ИмяТипа = ПолучитьИмяТипа(Объект.ТипОбъектаСогласования);
	НовоеОписаниеТипов = ПолучитьОписаниеТиповОграничения(ИмяСправочника, ИмяТипа);
	Если НовоеОписаниеТипов <> Неопределено Тогда
		Элементы.ДокументыКСогласованиюСогласуемыйДокумент.ОграничениеТипа = НовоеОписаниеТипов;
	Иначе	
		// Не удалось получить описание типов. Пропускаем.
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Для Каждого КлючИЗначение ИЗ СтруктураИспользуемыхРеквизитов Цикл
		
		Элементы[КлючИЗначение.Ключ].Видимость=(КлючИЗначение.Значение=Истина);
		
		Если КлючИЗначение.Ключ="СуммаДокумента" Тогда
			
			Элементы.СуммаРеестра.Видимость=(КлючИЗначение.Значение=Истина);
	
		КонецЕсли;		
		
	КонецЦикла;
				
КонецПроцедуры // УстановитьВидимость()

#КонецОбласти

#Область ОбщиеКомандыСогласования

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
		
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаСогласования) тогда
		Возврат;
	КонецЕсли;
		
	ИмяФормыВыбора = "";
	
	Если ТипЗнч(Объект.ТипОбъектаСогласования) = Тип("СправочникСсылка.СправочникиБД") тогда
		ИмяФормыВыбора = "Справочник.";	
	ИначеЕсли ТипЗнч(Объект.ТипОбъектаСогласования) = Тип("СправочникСсылка.ДокументыБД") тогда
		ИмяФормыВыбора = "Документ.";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФормыВыбора) тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, МножественныйВыбор, ЗакрыватьПриВыборе", 
		Истина, Истина, Ложь);
		
	ОткрытьФорму(ИмяФормыВыбора + ПолучитьИмяТипа(Объект.ТипОбъектаСогласования) + ".ФормаВыбора", 
		ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяТипаОбъекта = "";
	
	Если ТипЗнч(Объект.ТипОбъектаСогласования) = Тип("СправочникСсылка.СправочникиБД") тогда
		ИмяТипаОбъекта = "СправочникСсылка.";	
	ИначеЕсли ТипЗнч(Объект.ТипОбъектаСогласования) = Тип("СправочникСсылка.ДокументыБД") тогда
		ИмяТипаОбъекта = "ДокументСсылка.";
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") тогда
		
		СтруктураОтбора = Новый Структура("СогласуемыйОбъект");
		
		Для Каждого СогласуемыйОбъект Из ВыбранноеЗначение Цикл
			
			Если ТипЗнч(СогласуемыйОбъект) <> Тип(ИмяТипаОбъекта + ПолучитьИмяТипа(Объект.ТипОбъектаСогласования)) тогда
				Продолжить;
			КонецЕсли;
						
			СтруктураОтбора.Вставить("СогласуемыйОбъект", СогласуемыйОбъект);
			
			Если Объект.ОбъектыКСогласованию.НайтиСтроки(СтруктураОтбора).Количество() = 0 тогда
				
				НоваяСтрока = Объект.ОбъектыКСогласованию.Добавить();
				НоваяСтрока.СогласуемыйОбъект = СогласуемыйОбъект;
				ОбновитьДанныеСтроки(НоваяСтрока.ПолучитьИдентификатор());
				ОбновитьСтатусыСтрокПланЗакупок();
				
				ЭтаФорма.Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	КлючОбъекта = "<FN>" + ЭтаФорма.ИмяФормы + "</FN>";
	КлючОбъекта = СтрЗаменить(КлючОбъекта, " ", "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВК, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВТаб, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.НПП, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПС, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПФ, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.Таб, "");
	
	ТекущийПользователь = ПользователиУХ.АвторизованныйПользователь();
	КлючНастроек = "<User>" + Строка(ТекущийПользователь) + "</User><UserGUID>" + ТекущийПользователь.УникальныйИдентификатор() + "</UserGUID>";
	КлючНастроек = СтрЗаменить(КлючНастроек, " ", "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВК, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВТаб, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.НПП, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПС, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПФ, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.Таб, "");
	
	СтруктураНастроек = Новый Структура("ИмяСправочника, ТипОбъектаСогласования, Организация");
		
	Для Каждого ЭлементНастроек Из СтруктураНастроек Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ЭлементНастроек.Ключ) тогда
			СтруктураНастроек.Вставить(ЭлементНастроек.Ключ, ЭтаФорма[ЭлементНастроек.Ключ]);
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма.Объект, ЭлементНастроек.Ключ) тогда
			СтруктураНастроек.Вставить(ЭлементНастроек.Ключ, ЭтаФорма.Объект[ЭлементНастроек.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	ХранилищаНастроек.Общие.Сохранить(КлючОбъекта, КлючНастроек, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	КлючОбъекта = "<FN>" + ЭтаФорма.ИмяФормы + "</FN>";
	КлючОбъекта = СтрЗаменить(КлючОбъекта, " ", "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВК, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВТаб, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.НПП, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПС, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПФ, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.Таб, "");
	
	ТекущийПользователь = ПользователиУХ.АвторизованныйПользователь();
	КлючНастроек = "<User>" + Строка(ТекущийПользователь) + "</User><UserGUID>" + ТекущийПользователь.УникальныйИдентификатор() + "</UserGUID>";
	КлючНастроек = СтрЗаменить(КлючНастроек, " ", "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВК, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВТаб, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.НПП, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПС, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПФ, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.Таб, "");
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	
	ХранилищаНастроек.Общие.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек);
	
	СтруктураНастроек = ОписаниеНастроек.ДополнительныеСвойства;
		
	Для Каждого ЭлементНастроек Из СтруктураНастроек Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ЭлементНастроек.Ключ) тогда
			
			Если Не ЗначениеЗаполнено(ЭтаФорма[ЭлементНастроек.Ключ]) тогда
				ЭтаФорма[ЭлементНастроек.Ключ] = СтруктураНастроек[ЭлементНастроек.Ключ];
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма.Объект, ЭлементНастроек.Ключ) тогда
			
			Если Не ЗначениеЗаполнено(ЭтаФорма.Объект[ЭлементНастроек.Ключ]) тогда
				ЭтаФорма.Объект[ЭлементНастроек.Ключ] = СтруктураНастроек[ЭлементНастроек.Ключ];
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

// Обновляет колонку Статус табличных частей Строки плана и Строки в валюте
// на форме.
&НаКлиенте
Процедура ОбновитьСтатусыСтрокПланЗакупок()
	
	// Для строк плана закупок получим соответствие статусов.
	МассивОбъектовКСогласованию = ВернутьМассивСтрокДокумента();
	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовСтрокПланаЗакупок(МассивОбъектовКСогласованию);
	
	// Заполним статусы в табличных частых на форме.
	СтатусЧерновик = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Черновик");
	
	Для Каждого ТекСтрокиОбъектыКСогласованию Из Объект.ОбъектыКСогласованию Цикл
		
		СогласуемыйОбъект = ТекСтрокиОбъектыКСогласованию.СогласуемыйОбъект;
		НовыйСтатус = СоответствиеСтатусов.Получить(СогласуемыйОбъект);
		
		Если НовыйСтатус <> Неопределено Тогда
			ТекСтрокиОбъектыКСогласованию.Статус = НовыйСтатус; 
		Иначе
			ТекСтрокиОбъектыКСогласованию.Статус = СтатусЧерновик;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры		// ОбновитьСтатусыСтрокПланЗакупок()

// Возвращает строки плана закупок, включённые в текущую программу. Параметры 
// ВключатьСтрокиРеглВход и ВключатьСтрокиВалютныеВход регулируют включение
// строк в валюте документа и в иной валюте соответственно. Параметр СверткаВход
// определяет необходимость свёртки полученного массива.
&НаКлиенте
Функция ВернутьМассивСтрокДокумента()
	
	РезультатФункции = Новый Массив;
	
	Для Каждого ТекСтрокиОбъектыКСогласованию Из Объект.ОбъектыКСогласованию Цикл
		РезультатФункции.Добавить(ТекСтрокиОбъектыКСогласованию.СогласуемыйОбъект);
	КонецЦикла;	
	
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	
	Возврат РезультатФункции;
	
КонецФункции		 // ВернутьМассивСтрокДокумента()

// Возвращает соответствие статусов строк планов закупок из МассивСтрокПланаВход.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеСтатусовСтрокПланаЗакупок(МассивОбъектовКСогласованию)
	
	РезультатФункции = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеОбъекта,
		|	РегистрСостоянийОбъектовСрезПоследних.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект В (&МассивСсылок)) КАК РегистрСостоянийОбъектовСрезПоследних";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектовКСогласованию);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекОбъект = ВыборкаДетальныеЗаписи.Объект;
		ТекСтатус = ВыборкаДетальныеЗаписи.СостояниеОбъекта;
		РезультатФункции.Вставить(ТекОбъект, ТекСтатус);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции		 // ПолучитьСоответствиеСтатусовСтрокПланаЗакупок()

#КонецОбласти

