#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТ
	Отчеты.РезультатРаботыПравилПолученияФактическихДанных.ДобавитьКомандуОтчетаПоПоказателюБюджетов(КомандыОтчетов);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3817ab2f-9759-4510-8ba4-0067181cb8fb");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Конвертирует выражения заполнения аналитик в новый формат.
	|Заполняет реквизит ""План счетов международного учета"".';
	|en = 'Converts dimension population expressions to a new format.
	|Populates the ""Financial accounting charts of accounts"" attribute"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПолноеИмя());
	//++ НЕ УТКА
	Читаемые.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя());
	//-- НЕ УТКА
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьВидыКонтактнойИнформацииУТ";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

#Область Обработчики_2_5_5

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ПравилаПолученияФактаПоПоказателямБюджетов";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПолученияФактаПоПоказателямБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоПоказателямБюджетов КАК ПравилаПолученияФактаПоПоказателямБюджетов
	|ГДЕ
	|	(НЕ ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики1 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики1ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики2 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики2ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики3 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики3ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики4 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики4ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики5 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики5ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	|	ИЛИ (НЕ ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики6 ПОДОБНО """"
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.ВыражениеЗаполненияАналитики6ИсторияПереходаНаНовыеФормулы ПОДОБНО """")
	//++ НЕ УТКА
	|	ИЛИ (ПравилаПолученияФактаПоПоказателямБюджетов.ПланСчетовМеждународногоУчета = ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)
	|		И ПравилаПолученияФактаПоПоказателямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет))
	//-- НЕ УТКА
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ПравилаПолученияФактаПоПоказателямБюджетов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	//++ НЕ УТКА
	ПланСчетовПоУмолчанию = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	//-- НЕ УТКА
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект(); //- СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов - 
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			Иначе
				
				ОбъектИзменен = Ложь;
			
				ОбработатьИзменениеВыраженийЗаполненияАналитик(СправочникОбъект, ОбъектИзменен);
				
				//++ НЕ УТКА
				Если Не ЗначениеЗаполнено(СправочникОбъект.ПланСчетовМеждународногоУчета)
					И СправочникОбъект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
						СправочникОбъект.ПланСчетовМеждународногоУчета = ПланСчетовПоУмолчанию;
				КонецЕсли;
				//-- НЕ УТКА
				
				Если СправочникОбъект.Модифицированность() Или ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


// Выполняет обработку изменений выражений заполнения аналитик (перевод формул на новый формат).
// 
// Параметры:
// 	СправочникОбъект - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов - Обрабатываемый объект.
// 	ОбъектИзменен - Булево - Флаг изменения объекта.
//
Процедура ОбработатьИзменениеВыраженийЗаполненияАналитик(СправочникОбъект, ОбъектИзменен)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВыраженияДляОбработки = Новый Соответствие;
	ИсходныеВыражения = Новый Массив;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИмяРеквизита = "ВыражениеЗаполненияАналитики" + НомерАналитики;
		ИмяРеквизитаИстория = "ВыражениеЗаполненияАналитики" + НомерАналитики + "ИсторияПереходаНаНовыеФормулы";
		Если НЕ ЗначениеЗаполнено(СправочникОбъект[ИмяРеквизитаИстория])
			И ЗначениеЗаполнено(СправочникОбъект[ИмяРеквизита]) Тогда
			Выражение = СправочникОбъект[ИмяРеквизита];
			ВыраженияДляОбработки.Вставить(ИмяРеквизита, Выражение);
			Если ИсходныеВыражения.Найти(Выражение) = Неопределено Тогда
				ИсходныеВыражения.Добавить(Выражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыраженияДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СхемаПолученияДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(СправочникОбъект.Ссылка);
	
	
	РезультатПреобразований = РаботаСФормулами.ПреобразоватьВФорматИдентификаторовОперандыФормулыСКД(ИсходныеВыражения,
		СхемаПолученияДанных);
		
	Если РезультатПреобразований.ЕстьОшибки Тогда
		ТекстОшибок = "";
		Для Каждого КлючИЗначение Из РезультатПреобразований.СообщенияОшибокПреобразования Цикл
			ТекстОшибок = ТекстОшибок + ?(ТекстОшибок = "", "", " / " + Символы.ПС) + КлючИЗначение.Значение;
		КонецЦикла;
		СправочникОбъект.УдалитьЕстьОшибкиПереходаНаНовыйФорматФормул = Истина;
		ИмяСобытияОшибкиЖР = НСтр("ru = 'Перевод формул и выражение в новый формат';
									|en = 'Conversion of formulas and expression to a new format'");
		ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиЖР,
			УровеньЖурналаРегистрации.Ошибка,
			СправочникОбъект.Метаданные(),
			СправочникОбъект.Ссылка,
			ТекстОшибок);
		// Переход на новый формат формул не гарантируется, т.к. выражения могут содержать ошибки.
		// Отказа от транзакции не происходит.
		ОбъектИзменен = Истина;
	КонецЕсли;
	
	ПреобразованныеВыражения = РезультатПреобразований.ПреобразованныеВыражения;
	Для каждого ИмяРеквизитаИИсходноеВыражение Из ВыраженияДляОбработки Цикл
		ИмяРеквизита = ИмяРеквизитаИИсходноеВыражение.Ключ;
		ИмяРеквизитаИстория = ИмяРеквизита + "ИсторияПереходаНаНовыеФормулы";
		ИсходноеВыражение = ИмяРеквизитаИИсходноеВыражение.Значение;
		ВыражениеЗамены = ПреобразованныеВыражения.Получить(ИсходноеВыражение);
		Если ЗначениеЗаполнено(ВыражениеЗамены) Тогда
			СправочникОбъект[ИмяРеквизита] = ВыражениеЗамены;
		КонецЕсли;
		СправочникОбъект[ИмяРеквизитаИстория] = ИсходноеВыражение;
		
		ОбъектИзменен = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

#КонецЕсли
