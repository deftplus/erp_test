
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ТекОтбор;
	
	Параметры.Свойство("Отбор", ТекОтбор);
	
	Если ТипЗнч(ТекОтбор)=Тип("Структура") И ТекОтбор.Свойство("Владелец") Тогда
		
		ВидОтчета = ТекОтбор.Владелец;
		КодВидаОтчета=СокрЛП(ВидОтчета.Код);
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		
		ИсточникДанных=Параметры.ИсточникДанных;
		ВидОтчета=ИсточникДанных.ПоказательОтбор.Владелец;
		КодВидаОтчета=СокрЛП(ВидОтчета.Код);
		
	ИначеЕсли Не ПустаяСтрока(Параметры.КодВидаОтчета) Тогда
		
		ВидОтчета=Справочники.ВидыОтчетов.НайтиПоКоду(Параметры.КодВидаОтчета);
		КодВидаОтчета=СокрЛП(ВидОтчета.Код);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
		
		ВидОтчета     = Параметры.ТекущаяСтрока.Владелец;
		КодВидаОтчета = СокрЛП(ВидОтчета.Код);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		
		ВидОтчета=Справочники.ВидыОтчетов.ПустаяСсылка();
		
	КонецЕсли;
		
	ВозвращатьКод=Параметры.ВозвращатьКод;
	ВозвращатьАдреса=Параметры.ВозвращатьАдреса;
	ТолькоБланкОтображенияПоУмолчанию=Параметры.ТолькоБланкОтображенияПоУмолчанию;
	МножественныйВыбор=Параметры.МножественныйВыбор;
	
	Если ТолькоБланкОтображенияПоУмолчанию Тогда
		Элементы.ФормаВыбратьИзБланка.Видимость=Ложь;
		Элементы.БланкОтчета.Видимость=Ложь;
	КонецЕсли;
			
	ДлинаКодаПоказателя = Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода;
		
	ЗаполнитьТаблицуПоказателейИБланковОтчетов();
	
	Если НЕ ЗначениеЗаполнено(БланкОтчета) И ТолькоБланкОтображенияПоУмолчанию Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не указан бланк отображения по умолчанию для вида отчета %1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета),,, СтатусСообщения.Внимание);
		КонецЕсли;
	
		Отказ=Истина;
		
	КонецЕсли;
	
	КодПоказателя="";
	
	Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
		КодПоказателя=СокрЛП(Параметры.ТекущаяСтрока.Код);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		КодПоказателя=СокрЛП(Параметры.ИсточникДанных.ПоказательОтбор.Код);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КодПоказателя) Тогда
		
		ОбластьПоказателя=ПолеБланкаОтчета.Области.Найти(КодПоказателя);
		
		Если Не ОбластьПоказателя = Неопределено Тогда
			
			ОбластьПоказателя.ЦветФона=Новый Цвет(83,106,194);
			Элементы.ПолеБланкаОтчета.ТекущаяОбласть=ОбластьПоказателя;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(Параметры.АдресЯчейки) Тогда
		
		АдресЯчейки  =СтрЗаменить(Параметры.АдресЯчейки,"С","R");
		АдресЯчейки  =СтрЗаменить(АдресЯчейки,"К","C");
		
		Попытка
			ТекОбласть=ПолеБланкаОтчета.ПолучитьОбласть(АдресЯчейки+":"+АдресЯчейки);
		Исключение
			ТекОбласть=Неопределено;
		КонецПопытки;
		
		Если (Не ТекОбласть=Неопределено) И ТекОбласть.Области.Количество()>0 Тогда
			
			ОбластьПоказателя=ПолеБланкаОтчета.Области.Найти(ТекОбласть.Области[0].Имя);
			
			ОбластьПоказателя.ЦветФона=Новый Цвет(83,106,194);
			Элементы.ПолеБланкаОтчета.ТекущаяОбласть=ОбластьПоказателя;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(РежимВыбораПоказателя)) И ЗначениеЗаполнено(БланкОтчета) Тогда
		РежимВыбораПоказателя="БланкЭкземпляра";
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ЗаполнитьТабДокВыборПоказателя();
	КонецЕсли;
	
	УстановитьВидимость();
					
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		
		Если ТипЗнч(ВидОтчета)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
			
			Предназначение=ВидОтчета.Предназначение;
			
		Иначе
			
			Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		Элементы.ВидИтогаПоСчету.Видимость	= Истина;
		Элементы.СчетБД.Видимость			= Истина;
		Элементы.КоррСчетБД.Видимость		= Ложь;
		Элементы.РесурсРегистра.Видимость	= Ложь;
		
	ИначеЕсли Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки Тогда
		
		Элементы.ВидИтогаПоСчету.Видимость		 = Ложь;
		Элементы.СчетБД.Видимость				 = Истина;
		Элементы.КоррСчетБД.Видимость			 = Истина;
		Элементы.РесурсРегистра.Видимость		 = Истина;
		Элементы.ФормаВыбратьИзБланка.Видимость	 = Ложь;
		Элементы.ФормаВыбратьИзБланка.Пометка	 = Истина;
		
	Иначе
		
		Элементы.ВидИтогаПоСчету.Видимость	 = Ложь;
		Элементы.СчетБД.Видимость			 = Ложь;
		Элементы.КоррСчетБД.Видимость		 = Ложь;
		Элементы.РесурсРегистра.Видимость	 = Ложь;
		
	КонецЕсли;
	
	// Проверим доступность режима выбора из бланка экземпляра.
	СписокВыбораРежима = Элементы.РежимВыбораПоказателя.СписокВыбора;
	ДоступенРежимБланкаЭкземпляра = (СписокВыбораРежима.НайтиПоЗначению(РежимБланкЭкземпляра_Представление()) <> Неопределено);
	ВыбранРежимБланкаЭкземпляра = (РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление());
	Если (НЕ ДоступенРежимБланкаЭкземпляра) И (ВыбранРежимБланкаЭкземпляра) Тогда
		РежимВыбораПоказателя = РежимМакетСтруктуры_Представление();
	Иначе
		// Оставляем текущее значение.
	КонецЕсли;
	Элементы.РежимВыбораПоказателя.Доступность = НЕ ВидОтчета.Пустая();
	// Смена страницы в зависимости от выбранного режима.
	Если РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление() Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ГрафическоеОтображение;
	ИначеЕсли РежимВыбораПоказателя = РежимМакетСтруктуры_Представление() Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаМакетСтруктуры;
	ИначеЕсли РежимВыбораПоказателя = РежимСписокПоказателей_Представление() Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаСоставПоказателей;
	Иначе
		ДоступныйБланк = ВыбратьДоступныйБланк(ВидОтчета);
		Если ЗначениеЗаполнено(ДоступныйБланк) Тогда
			РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление();
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ГрафическоеОтображение;
		Иначе
			РежимВыбораПоказателя = РежимМакетСтруктуры_Представление();
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаМакетСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Список.ИзменятьСоставСтрок = НЕ ВидОтчета.Пустая();
	// Отображение пустой страницы, если вид отчёта пуст.
	Если ВидОтчета.Пустая() Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаИнформационнаяНадпись;		
	Иначе
		// Вид отчёта заполнен. Оставляем предыдущую страницу.
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура УстановитьОтборПоВладельцу()
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ВидОтчета);
	
	ПолеВладелец = Новый ПолеКомпоновкиДанных("Владелец");
	
	НайденОтбор = Ложь;
	Для Каждого Элемент Из Список.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеВладелец Тогда
			
			Если ИспользованиеОтбора Тогда
				Элемент.Использование = Истина;
				Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Элемент.ПравоеЗначение     = ВидОтчета;
			Иначе
				Элемент.Использование = Ложь;
			КонецЕсли;
			
			НайденОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденОтбор И ИспользованиеОтбора Тогда
		НовыйОтбор = Список.Отбор.Элементы.ДОбавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование  = Истина;
		НовыйОтбор.ЛевоеЗначение  = ПолеВладелец;
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ВидОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборПоВладельцу();
	УстановитьВидимость();
	ЗаполнитьСписокРежимовВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	УстановитьОтборПоВладельцу();	
	ЗаполнитьТаблицуПоказателейИБланковОтчетов();
	ЗаполнитьСписокРежимовВыбора();
	ЗаполнитьТабДокВыборПоказателя();
	
КонецПроцедуры

&НаКлиенте
Процедура БланкОтчетаПриИзменении(Элемент)
	
	ВывестиТабличныйДокументБланкаОтчета()
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеБланкаОтчетаПриАктивизацииОбласти(Элемент)
	
	ТекОбласть = Элементы.ПолеБланкаОтчета.ТекущаяОбласть;
	НайденныеСтроки = ТЗ_Показатели.НайтиСтроки(Новый Структура("Код", ТекОбласть.Имя));
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		РаскрытиеПоАналитике = НайденныеСтроки[0].ТекстАналитики;
	Иначе
		РаскрытиеПоАналитике = "";
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеБланкаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ДобавитьОперанды();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
//

Функция ВернутьВыбранныеОбласти(РежимВыбораПоказателя)
	
	Если РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление() тогда
		ТекущийБланк = Элементы.ПолеБланкаОтчета;
		ОбластьЯчеек = ПолеБланкаОтчета;
	ИначеЕсли РежимВыбораПоказателя = РежимМакетСтруктуры_Представление() Тогда
		ТекущийБланк = Элементы.ТабДокВыборПоказателя;
		ОбластьЯчеек = ТабДокВыборПоказателя;
	КонецЕсли;
	
	Если ТекущийБланк.ТекущаяОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Массив = Новый Массив;
	Для Каждого Область Из ТекущийБланк.ПолучитьВыделенныеОбласти() Цикл
		
		Для Верх = Область.Верх По Область.Низ Цикл
			Для Лево = ОБласть.Лево По Область.Право Цикл
				ПерваяОбласть = ОбластьЯчеек.Область(Верх, Лево);
				Если ПерваяОбласть.Лево <> Лево
					ИЛИ ПерваяОбласть.Верх <> Верх Тогда
						Продолжить;
				КонецЕсли;
					
				Массив.Добавить(ПерваяОбласть.Имя);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

	Возврат Массив;
КонецФункции


// Процедура добавляет операнд для выбранного показателя.
// Параметр:
//  ЧтоДобавлять   - Число, определяет каким способом будут добавлены операнды.
//                   0 - добавляются операнды, на основании выбранных ячеек
//                   1 - добавляются операнды, содержащиеся в строке выбранной ячейки
//                   2 - добавляются операнды, содержащиеся в колонке выбранной ячейки
//
&НаКлиенте
Процедура ДобавитьОперанды()
	
	Перем МассивПоказателей;
	
	Если ТЗ_Показатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	Если РежимВыбораПоказателя = РежимСписокПоказателей_Представление() Тогда
		
		Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
			
			Для Каждого Строка ИЗ Элементы.Список.ВыделенныеСтроки Цикл
				
				ТекЗначение = ТЗ_Показатели.НайтиСтроки(Новый Структура("Ссылка", Строка));
				
				Если ТекЗначение.Количество() = 0 Тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Помеченный на удаление показатель не может быть выбран!'"));
					Продолжить;
				КонецЕсли;
				
				Если ВозвращатьАдреса Тогда
					
					Если ТекЗначение.Количество() <> 0 Тогда
						
						МассивПоказателей.Добавить(ТекЗначение[0].Код);
						
					КонецЕсли
					
				Иначе
					
					МассивПоказателей.Добавить(ТекЗначение[0]);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление() 
		ИЛИ РежимВыбораПоказателя = РежимМакетСтруктуры_Представление() Тогда
		
		МассивОбластей = ВернутьВыбранныеОбласти(РежимВыбораПоказателя);
		
		Если РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление() тогда
			ОбластьЯчеек = ПолеБланкаОтчета;
		ИначеЕсли РежимВыбораПоказателя = РежимМакетСтруктуры_Представление() Тогда
			ОбластьЯчеек = ТабДокВыборПоказателя;
		КонецЕсли;
		
		Если МассивОбластей = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Элемент Из МассивОбластей Цикл
			
			ТекЗначение = ТЗ_Показатели.НайтиСтроки(Новый Структура("Код", Элемент));
			
			Если ТекЗначение.Количество() <> 0 Тогда
				
				Если ВозвращатьАдреса Тогда
					
					ТекОбласть=ОбластьЯчеек.Области.Найти(Элемент);
					МассивПоказателей.Добавить("С"+Формат(ТекОбласть.Верх,"ЧГ=")+"К"+Формат(ТекОбласть.Лево,"ЧГ="));
					
				Иначе
					
					МассивПоказателей.Добавить(ТекЗначение[0]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
	Иначе
		МассивПоказателей = Новый Массив;
	КонецЕсли;
			
	Если ВозвращатьАдреса Тогда
		
		ПараметрОповещения = Новый Структура("ВидОтчета, КодВидаОтчета,МассивПоказателей", ВидОтчета, КодВидаОтчета, МассивПоказателей);
		
		Если ВладелецФормы.ИмяФормы = "Справочник.БланкиОтчетов.Форма.ФормаМакета" Тогда
			
			Оповестить(ИмяФормы, ПараметрОповещения, ВладелецФормы);
			
		Иначе
			Оповестить("ВыбраныАдресаПоказателей", ПараметрОповещения);
		КонецЕсли;
		
		Закрыть();
		
	ИначеЕсли ЗначениеЗаполнено(МассивПоказателей) Тогда
		
		Если ВозвращатьКод Тогда
			
			СписокКодов=Новый СписокЗначений;
			
			Для Каждого СтрКод ИЗ МассивПоказателей Цикл
				
				СписокКодов.Добавить("Показатели."+СокрЛП(СтрКод.Код), "ЗначениеПоказателя(""" + СокрЛП(СтрКод.Код) + """, """ + СокрЛП(КодВидаОтчета) + """)");
				
			КонецЦикла;
	
			ОповеститьОВыборе(Новый Структура("ВидОтчета,МассивПоказателей",ВидОтчета,СписокКодов));
	
		Иначе
				
			Если МножественныйВыбор Тогда				
				Для Каждого ЭлементМассиваПоказателей Из МассивПоказателей Цикл
					ОповеститьОВыборе(ЭлементМассиваПоказателей.Ссылка);
				КонецЦикла;
			ИначеЕсли МассивПоказателей.Количество() = 1 Тогда
				ОповеститьОВыборе(МассивПоказателей[0].Ссылка);
			Иначе
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Должен быть выбран один показатель'"));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимВыбораПоказателя <> РежимСписокПоказателей_Представление() Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Выбранной области не удалось сопоставить показатель.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоказателейИБланковОтчетов()
	
	Если НЕ (ЗначениеЗаполнено(ВидОтчета) И ТипЗнч(ВидОтчета)=Тип("СправочникСсылка.ВидыОтчетов")) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Строка КАК Строка,
	|	ПоказателиОтчетов.Колонка КАК Колонка,
	|	ПоказателиОтчетов.Строка.Код КАК СтрокаКод,
	|	ПоказателиОтчетов.Колонка.Код КАК КолонкаКод,
	|	ПоказателиОтчетов.Код КАК Код,
	|	ГруппыРаскрытия.ВидАналитики1.Представление КАК Аналитика1,
	|	ГруппыРаскрытия.ВидАналитики2.Представление КАК Аналитика2,
	|	ГруппыРаскрытия.ВидАналитики3.Представление КАК Аналитика3,
	|	ГруппыРаскрытия.ВидАналитики4.Представление КАК Аналитика4,
	|	ГруппыРаскрытия.ВидАналитики5.Представление КАК Аналитика5,
	|	ГруппыРаскрытия.ВидАналитики6.Представление КАК Аналитика6,
	|	ГруппыРаскрытия.ЧислоАналитик
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|		ПО ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	
	ТЗ = РеквизитФормыВЗначение("ТЗ_Показатели");
	ТЗ.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "Код");
		НоваяСтрока.Код = СокрЛП(Выборка.Код);
		Если НЕ ЗначениеЗаполнено(Выборка.ЧислоАналитик) Тогда
			ТекстАналитики = Нстр("ru = 'Не содержит раскрытия по аналитике'");
		Иначе
			ТекстАналитики = Нстр("ru = 'Раскрытие: '");
			Для Инд = 1 По Выборка.ЧислоАналитик Цикл
				ТекстАналитики = ТекстАналитики + Нстр("ru = 'Аналитика '") + Инд + ":" + Выборка["Аналитика" + Инд] + " ";
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.ТекстАналитики = ТекстАналитики;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗ, "ТЗ_Показатели");
	
	БланкОтчетаПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, ВидОтчета);
	
	Если НЕ ТолькоБланкОтображенияПоУмолчанию Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА БланкиОтчетов.Ссылка = &ПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоУмолчанию
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоУмолчанию УБЫВ";
		Запрос.УстановитьПараметр("ВидОтчета"  , ВидОтчета);
		Запрос.УстановитьПараметр("ПоУмолчанию", БланкОтчетаПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Элементы.БланкОтчета.СписокВыбора.Очистить();
		
		ЕстьРабочиеБланки=Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПоУмолчанию Тогда
				Элементы.БланкОтчета.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Представление, , БиблиотекаКартинок.БланкиОтчетов);
			Иначе
				Элементы.БланкОтчета.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	БланкОтчета = БланкОтчетаПоУмолчанию;
	КодВидаОтчета=СокрЛП(ВидОтчета.Код);
	ВывестиТабличныйДокументБланкаОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТабличныйДокументБланкаОтчета()
	
	ПолеБланкаОтчета.Очистить();
	
	Если ЗначениеЗаполнено(БланкОтчета) Тогда
		
		МакетОтчета=БланкОтчета.Макет.Получить();
		
		Если НЕ МакетОтчета=Неопределено Тогда
			
			ЕстьРабочиеБланки=Истина;
			ПолеБланкаОтчета.Вывести(МакетОтчета);
			
		Иначе
			
			ЕстьРабочиеБланки=Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ЕстьРабочиеБланки=Ложь;
		
	КонецЕсли;
	
	Элементы.ФормаВыбратьИзБланка.Пометка=ЕстьРабочиеБланки;
	УстановитьВидимость();	
		
КонецПроцедуры

// Выводит табличный документ с колонками и строками для выбора показателя.
&НаСервере
Процедура ЗаполнитьТабДокВыборПоказателя()
			
	Колонки = СформироватьТаблицуКолонокБланка(ВидОтчета);
	ЗначениеВРеквизитФормы(Колонки, "тКолонки");	
	ВывестиДеревоСтруктурыСтрок(ВидОтчета, Колонки);
	
КонецПроцедуры		// ЗаполнитьТабДокВыборПоказателя()

&НаСервере
Процедура ВывестиДеревоСтруктурыСтрок(ВидОтчетаВход, ТаблицаКолонокВход = Неопределено) Экспорт
	
	РезультатФункции 		= Новый ДеревоЗначений;
			
	РезультатФункции.Колонки.Добавить("Строка");
	РезультатФункции.Колонки.Добавить("ПорядковыйНомер",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	РезультатФункции.Колонки.Добавить("СтрокаНаименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	РезультатФункции.Колонки.Добавить("СтрокаКод");
	РезультатФункции.Колонки.Добавить("СтрокаГруппаРаскрытия");
	РезультатФункции.Колонки.Добавить("АналитикаВалюта");
	РезультатФункции.Колонки.Добавить("СтрокаПометкаНаУдаление");
	
	РезультатФункции.Колонки.Добавить("СчетБД");
	РезультатФункции.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	РезультатФункции.Колонки.Добавить("СтатьяДоходовИРасходов");
	РезультатФункции.Колонки.Добавить("СтатьяДвиженияРесурсов");
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.Код КАК СтркаКод,
	|	СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втМакетСтрок
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И СтрокиОтчетов.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка КАК Ссылка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втМакетКолонок
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Колонка КАК Колонка,
	|	ПоказателиОтчетов.Строка КАК Строка
	|ПОМЕСТИТЬ втПоказатели
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.ПометкаУдаления = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМакетКолонок.Ссылка КАК КолонкаСсылка,
	|	втМакетКолонок.ПорядковыйНомер КАК КолонкаПорядковыйНомер,
	|	втМакетСтрок.Ссылка КАК СтрокаСсылка,
	|	втМакетСтрок.СтркаКод КАК СтрокаКод,
	|	втМакетСтрок.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	втМакетСтрок.ПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер
	|ПОМЕСТИТЬ втМакет
	|ИЗ
	|	втМакетСтрок КАК втМакетСтрок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМакетКолонок КАК втМакетКолонок
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМакет.КолонкаСсылка КАК КолонкаСсылка,
	|	втМакет.КолонкаПорядковыйНомер КАК КолонкаПорядковыйНомер,
	|	втМакет.СтрокаСсылка КАК СтрокаСсылка,
	|	втМакет.СтрокаКод КАК СтрокаКод,
	|	втМакет.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	втМакет.СтрокаКолонкаПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер,
	|	втПоказатели.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМакетСКолонками
	|ИЗ
	|	втМакет КАК втМакет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	|		ПО втМакет.СтрокаСсылка = втПоказатели.Строка
	|			И втМакет.КолонкаСсылка = втПоказатели.Колонка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НПП,
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.Код КАК СтрокаКод, 
	|	МАКСИМУМ(СтрокиОтчетов.Ссылка) КАК Строка,
	|	СтрокиОтчетов.Наименование КАК СтрокаНаименование,
	|	СтрокиОтчетов.ГруппаРаскрытия КАК СтрокаГруппаРаскрытия,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт КАК АналитикаВалюта,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	|	МАКСИМУМ(СтрокиОтчетов.СчетБД) КАК СчетБД,
	|	МАКСИМУМ(СтрокиОтчетов.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	МАКСИМУМ(СтрокиОтчетов.СтатьяДоходовИРасходов) КАК СтатьяДоходовИРасходов,
	|	МАКСИМУМ(СтрокиОтчетов.СтатьяДвиженияРесурсов) КАК СтатьяДвиженияРесурсов,
	|	МАКСИМУМ(СтрокиОтчетов.ПометкаУдаления) КАК СтрокаПометкаНаУдаление,
	|	СтрокиОтчетов.Родитель КАК Родитель
	|ИЗ
	|	втМакетСКолонками КАК втМакетСКолонками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|		ПО втМакетСКолонками.СтрокаСсылка = СтрокиОтчетов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиОтчетов.Ссылка,
	|	СтрокиОтчетов.Код,
	|	СтрокиОтчетов.ГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер,
	|	СтрокиОтчетов.Родитель,
	|	втМакетСКолонками.КолонкаПорядковыйНомер,
	|	СтрокиОтчетов.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер ИЕРАРХИЯ,
	|	втМакетСКолонками.КолонкаПорядковыйНомер";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИндексКолонки = 1;
	
	Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
		
		Нполе = СхемаЗапроса.ПакетЗапросов[4].Операторы[0].ВыбираемыеПоля.Добавить("ВЫБОР КОГДА ВтМакет.КолонкаСсылка = &Парам_"+СокрЛП(СтрКолонка.Код)+
		" ТОГДА """" КОНЕЦ ");
		
		Запрос.УстановитьПараметр("Парам_"+СокрЛП(СтрКолонка.Код),СтрКолонка.Ссылка);
		СхемаЗапроса.ПакетЗапросов[4].Колонки[СхемаЗапроса.ПакетЗапросов[4].Колонки.Количество()-1].Псевдоним = СокрЛП(СтрКолонка.Код);
		
		Нполе = СхемаЗапроса.ПакетЗапросов[5].Операторы[0].ВыбираемыеПоля.Добавить("МАКСИМУМ("+СокрЛП(СтрКолонка.Код)+") ");
		СхемаЗапроса.ПакетЗапросов[5].Колонки[СхемаЗапроса.ПакетЗапросов[5].Колонки.Количество()-1].Псевдоним = "Колонка"+ИндексКолонки;//СокрЛП(СтрКолонка.Код);
		
		РезультатФункции.Колонки.Добавить("Колонка"+ИндексКолонки,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));	
		
		СтрКолонка.тИмя = СокрЛП("Колонка"+ИндексКолонки);
		
		ИндексКолонки = ИндексКолонки+1;
		
	КонецЦикла;	
	
	Запрос.Текст =  СхемаЗапроса.ПолучитьТекстЗапроса();	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
		
	РезультатПакет 			= Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	РезультатПоказатели     = РезультатПакет[2].Выгрузить();
	РезультатПоказатели.Индексы.Добавить("Строка,Колонка");
		
	Результат=РезультатПакет[5].Выбрать();
	
	ТабДокВыборПоказателя.Очистить();
	СтруктураШаблонов = ПодготовитьМакетШаблоновВывода();
	
	ТабДокВыборПоказателя.Вывести(СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонЗаголовка.ПолучитьОбласть("ШаблонВыводаЗаголовка"));
	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	
	СоответствиеСтрок=Новый Соответствие;
	СоответствиеРодителей=Новый Соответствие;
	
	ДеревоНастройкиСервер_Строки = РезультатФункции.Строки.Добавить();
	ДеревоНастройкиСервер_Строки.Строка 			= Нстр("ru = 'Выбранные строки'");
	ДеревоНастройкиСервер_Строки.СтрокаНаименование = Нстр("ru = 'Строки/Колонки'");	
	
	//Предварительный вывод в дерево значений
	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда     //Поменялась строка
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда   //Не было такой строки
				
				Если Результат.Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда   //Строка первого уровня
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер_Строки.Строки.Добавить();
					
				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];   //ищем был ли уже такой родитель выведен
					
					Если СтрокаРодитель=Неопределено Тогда
						
						СтрокаРодитель=РезультатФункции.Строки.Найти(Результат.Родитель, "Строка", Истина);
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);
						
						ТабДокВыборПоказателя.НачатьГруппуСтрок();
						
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат); //Выводим строку и значения колонок показателей по ней
				
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);	
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ДеревоНастройкиСервер_Строки.Строки.Количество()>0 Тогда
		
		ПодготовитьТаблицыПоДеревуРекурсивноПоказатели(ДеревоНастройкиСервер_Строки, СтруктураШаблонов, ТаблицаКолонокВход, РезультатПоказатели);
		
	КонецЕсли;
	
	ТабДокВыборПоказателя.ФиксацияСлева = 1;
	ТабДокВыборПоказателя.ФиксацияСверху = 1;
		
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуКолонокБланка(ВидОтчетаВход) Экспорт
	
	РезультатФункции = Новый ТаблицаЗначений;
	ЗапросКолонки = Новый Запрос;
	ЗапросКолонки.Текст = 
	"ВЫБРАТЬ
	|	КолонкиОтчетов.Код КАК Код,
	|	КолонкиОтчетов.Представление КАК Представление,
	|	КолонкиОтчетов.Ссылка КАК Ссылка,
	|	КолонкиОтчетов.Представление КАК тИмя,
	|	КолонкиОтчетов.ПометкаУдаления КАК КолонкаПометкаНаУдаление
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолонкиОтчетов.ПорядковыйНомер";
	
	ЗапросКолонки.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
		
	РезультатФункции = ЗапросКолонки.Выполнить().Выгрузить();
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПодготовитьМакетШаблоновВывода()
	
	Возврат РасширениеБизнесЛогикиУХ.ПодготовитьМакетШаблоновВывода(тКолонки);
	
КонецФункции
 
&НаСервере
Процедура ПодготовитьТаблицыПоДеревуРекурсивноПоказатели(тДеревоВыбранныхСтрок,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели)
	
	Для Каждого Стр Из тДеревоВыбранныхСтрок.Строки Цикл	
		
		Если Не Стр.Строка =  Нстр("ru = 'Выбранные строки'") Тогда			
			
			ВывестиСтрокуВТабличныйДокумент(Стр,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели);
			
			Если Стр.Уровень()>0 Тогда 
				
				ТабДокВыборПоказателя.НачатьГруппуСтрок(Стр.СтрокаКод);
				
			КонецЕсли;
			
		КонецЕсли;					
		
		ПодготовитьТаблицыПоДеревуРекурсивноПоказатели(Стр,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели);		
		Если Стр.Уровень()>0 Тогда 
			Попытка
				ТабДокВыборПоказателя.ЗакончитьГруппуСтрок() 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуВТабличныйДокумент(СтрокаВыборки = Неопределено,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели = Неопределено);
	
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтрокиИтог;
	ОбластьШаблонСторокиИтог                     	= ПолеТабличногоДокументаМакетШаблонСтрокиИтог.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	ПолеТабличногоДокументаМакетШаблонСтроки	 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтроки;
	ОбластьШаблонСтороки	                     	= ПолеТабличногоДокументаМакетШаблонСтроки.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	Если СтрокаВыборки = Неопределено Тогда //Выводим служебную группирующую строку
				
		ТабДокВыборПоказателя.Вывести(ОбластьШаблонСторокиИтог);
		
	Иначе	
		
		Если СтрокаВыборки.Строки.Количество() = 0 Тогда
			ТабДокВыборПоказателя.Вывести(ОбластьШаблонСтороки);
		Иначе
			ТабДокВыборПоказателя.Вывести(ОбластьШаблонСторокиИтог);
		КонецЕсли;	
		
		//Выводим колонки реквизитов строки
		ВывестиРеквизитыСтрок(СтрокаВыборки);
		
		НачальныйИндексКолонокПоказателей = 2;
		
		Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
			
			тПоказатель = РезультатПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаВыборки.Строка,СтрКолонка.Ссылка));
			
			Если тПоказатель.Количество() > 0 Тогда
								
				ТабДокВыборПоказателя.Область(ТабДокВыборПоказателя.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ТабДокВыборПоказателя.ВысотаТаблицы,НачальныйИндексКолонокПоказателей).Текст 		= "■";
				ТабДокВыборПоказателя.Область(ТабДокВыборПоказателя.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ТабДокВыборПоказателя.ВысотаТаблицы,НачальныйИндексКолонокПоказателей).Имя = СокрЛП(тПоказатель[0].Ссылка.Код);
				
			КонецЕсли;	
			
			НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
			
		КонецЦикла;	
		
		//Выводим свойста показателей если выбрали
		
		НачальныйИндексКолонокПоказателей = 1;
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВывестиРеквизитыСтрок(СтрокаВыборки)
	
	//Выводим колонки реквизитов строки		
	тЯчейка = ТабДокВыборПоказателя.Область(ТабДокВыборПоказателя.ВысотаТаблицы, 1, ТабДокВыборПоказателя.ВысотаТаблицы, 1);
	
	тЯчейка.Текст = СтрокаВыборки.СтрокаНаименование;	
	тЯчейка.Отступ = (СтрокаВыборки.Уровень()-1)*2;
	
	Если СтрокаВыборки.СтрокаПометкаНаУдаление Тогда
		тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,,,,Истина);
		тЯчейка.ЦветТекста      = Новый Цвет(255,0,0);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает текстовое представление режима выбора показателя из бланка экземпляра.
&НаКлиентеНаСервереБезКонтекста
Функция РежимБланкЭкземпляра_Представление()
	РезультатФункции = "БланкЭкземпляра";
	Возврат РезультатФункции;
КонецФункции		// РежимБланкЭкземпляра_Представление()

// Возвращает текстовое представление режима выбора показателя из макета структуры отчёта.
&НаКлиентеНаСервереБезКонтекста
Функция РежимМакетСтруктуры_Представление()
	РезультатФункции = "МакетСтруктуры";
	Возврат РезультатФункции;
КонецФункции		// РежимМакетСтруктуры_Представление()

// Возвращает текстовое представление режима выбора показателя из списка показателей отчёта.
&НаКлиентеНаСервереБезКонтекста
Функция РежимСписокПоказателей_Представление()
	РезультатФункции = "СписокПоказателей";
	Возврат РезультатФункции;
КонецФункции		// РежимСписокПоказателей_Представление()

// Возвращает заполненный бланк отчета для вида отчета ВидОтчетаВход. Когда получить
// бланк не удалось, возвращает пустую ссылку.
&НаСервереБезКонтекста
Функция ВыбратьДоступныйБланк(ВидОтчетаВход)
	РезультатФункции = Справочники.БланкиОтчетов.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Владелец КАК Владелец
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	НЕ БланкиОтчетов.ПометкаУдаления
		|	И БланкиОтчетов.Владелец = &Владелец
		|	И БланкиОтчетов.РежимБланка = 0";
	Запрос.УстановитьПараметр("Владелец", ВидОтчетаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекБланк = ВыборкаДетальныеЗаписи.Ссылка;
		МакетОтчета = ТекБланк.Макет.Получить();
		Если МакетОтчета <> Неопределено Тогда
			Если (МакетОтчета.ВысотаТаблицы > 0) ИЛИ (МакетОтчета.ШиринаТаблицы > 0) Тогда
				РезультатФункции = ТекБланк; 
			Иначе
				// Пустой бланк.
			КонецЕсли;
		Иначе
			// Макет не задан. Пропускаем бланк.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ВыбратьДоступныйБланк()

// Переключает режим выбора показателя и отрисовывает элементы формы в соответствие 
// с выбранным режимом.
&НаКлиенте
Процедура ПереключитьРежимВыбора()
	УстановитьВидимость();	
КонецПроцедуры		// ПереключитьРежимВыбора()

// Устанавливает в список выбора режимов выбора показателя доступные режимы.
&НаКлиенте
Процедура ЗаполнитьСписокРежимовВыбора()
	Элементы.РежимВыбораПоказателя.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ДоступныйБланк = ВыбратьДоступныйБланк(ВидОтчета);
		Если ЗначениеЗаполнено(ДоступныйБланк) Тогда
			Элементы.РежимВыбораПоказателя.СписокВыбора.Добавить("БланкЭкземпляра", НСтр("ru = 'Бланк экземпляра'"));
		Иначе
			// Не удалось получить доступный бланк - режим Бланк экземпляра не добавляем в список доступных.
		КонецЕсли;	
	Иначе
		// Пустой вид отчета.
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Элементы.РежимВыбораПоказателя.СписокВыбора.Добавить("МакетСтруктуры", НСтр("ru = 'Макет структуры'"));
	КонецЕсли;
	
	Элементы.РежимВыбораПоказателя.СписокВыбора.Добавить("СписокПоказателей", НСтр("ru = 'Список показателей'"));
	УстановитьВидимость();
КонецПроцедуры		// ЗаполнитьСпискРежимовВыбора()
	
&НаКлиенте
Процедура ВыбратьИзБланка(Команда)
	
	Элементы.ФормаВыбратьИзБланка.Пометка = НЕ Элементы.ФормаВыбратьИзБланка.Пометка;
	
	Если Элементы.ФормаВыбратьИзБланка.Пометка Тогда
		
		ЗаполнитьТаблицуПоказателейИБланковОтчетов();
		
		Если НЕ ЕстьРабочиеБланки Тогда
			Сообщить(Нстр("ru = 'Не обнаружены рабочие бланки для отображения показателей.'"));
		КонецЕсли;
		
	Иначе
		
		УстановитьВидимость();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементы(Команда)
	Если РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление() Тогда
		ДобавитьОперанды();
	ИначеЕсли РежимВыбораПоказателя = РежимМакетСтруктуры_Представление() Тогда		
		ДобавитьОперанды();
	ИначеЕсли РежимВыбораПоказателя = РежимСписокПоказателей_Представление() Тогда
		ДобавитьОперанды();
	ИначеЕсли СокрЛП(РежимВыбораПоказателя) Тогда
		ТекстСообщения = НСтр("ru = 'Режим выбора показателя не заполнен. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный режим выбора показателя %Режим%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Режим%", Строка(РежимВыбораПоказателя));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ДобавитьОперанды();	
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораПоказателяПриИзменении(Элемент)
	ПереключитьРежимВыбора();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если НЕ ЗначениеЗаполнено(РежимВыбораПоказателя) Тогда
		ДоступныйБланк = ВыбратьДоступныйБланк(ВидОтчета);
		Если ЗначениеЗаполнено(ДоступныйБланк) Тогда
			РежимВыбораПоказателя = РежимБланкЭкземпляра_Представление();
		Иначе
			РежимВыбораПоказателя = РежимМакетСтруктуры_Представление();
		КонецЕсли;
	Иначе
		// Режим будет загружен из настроек пользователя.
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТабДокВыборПоказателяВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьОперанды();
	
КонецПроцедуры
