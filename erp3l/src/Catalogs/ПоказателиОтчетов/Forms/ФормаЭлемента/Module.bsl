
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ХранилищеСоответствий= Новый Структура("КурсНаМоментНачисления, ЗначениеУказанноеВДокументе", Перечисления.ВидыКурсов.КурсНаМоментНачисления,Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе);
	
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
		
		ПланСчетов=Объект.Владелец.ПланСчетов;
		
		Если Параметры.Ключ.Пустая() Тогда
			
			Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
			Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки;
			
		КонецЕсли;
		
		Элементы.Основная.Видимость=Ложь;
		Элементы.ТрансформационныеКорректировки.Видимость=Истина;
		
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок = Нстр("ru = 'Шаблон трансформационной проводки'");
		ОбновитьТекстАналитик();
		
		ОбновитьСписокРесурсов();
		
	Иначе
		
		Если Объект.Владелец.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
			
			ПланСчетов=Объект.Владелец.ПланСчетов;
			
			НовыйСписокВидИтога = Справочники.ВидыОтчетов.ПолучитьСписокИспользуемыхИтогов(Объект.Владелец);
			ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(НовыйСписокВидИтога, Элементы.ВидИтогаПоСчету.СписокВыбора);
						
		КонецЕсли;
		
	КонецЕсли;
	     
	УстановитьВидимость();
	УправлениеДоступностьюПараметровМультивалютности();
	
	Элементы.КоэффициентТР.Видимость = Объект.КоэффициентТР <> 0;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		ПроверитьНаличиеПротоколов();	
	Иначе	
		 Элементы.ФормаПротоколы.Видимость=Ложь;			
	КонецЕсли;
	
	ПриИзмененииТипаЗначения();
	
КонецПроцедуры


&НаСервере
Процедура ПроверитьНаличиеПротоколов()
	
	ЕстьПротоколы=Справочники.ПротоколируемыеСобытия.ЕстьПротоколыПоОбъекту(Объект.Ссылка);
	
	Если ЕстьПротоколы>0 Тогда
		
		Элементы.ФормаПротоколы.Видимость=Истина;
		
		Если ЕстьПротоколы=3 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.ВниманиеКрасный;
			
		ИначеЕсли ЕстьПротоколы=2 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.НастройкаЭлементовОтчетов_32;
			
		Иначе
			
			Элементы.ФормаПротоколы.Картинка=Новый Картинка;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ФормаПротоколы.Видимость=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьНаличиеПротоколов() 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗакрытьПослеЗаписи=ПараметрыЗаписи.Свойство("Закрыть");
	
	Если Объект.Предназначение=ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СчетБД) Тогда
			
			Сообщить(Нстр("ru = 'Не указан счет дебета проводки.'"));
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.КоррСчетБД) Тогда
			
			Сообщить(Нстр("ru = 'Не указан счет кредита проводки.'"));
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.РесурсРегистра) Тогда
			
			Сообщить(Нстр("ru = 'Не указан ресурс проводки.'"));
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьНовогоОбъекта=Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		АдресПараметровРеструктуризации=ПолучитьПараметрыРеструктуризации(Отказ);
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если АдресПараметровРеструктуризации=Неопределено Тогда
			Возврат;
		КонецЕсли;	

		
		Если  ЕстьЗаписиДанных(АдресПараметровРеструктуризации)  Тогда
			
			Отказ=Истина;
			ОписаниеОповещения=Новый ОписаниеОповещения("ПодтверждениеРеструктуризацииЗавершение",ЭтотОбъект,ПараметрыЗаписи);
			ОткрытьФорму("Обработка.РеструктуризацияДанных.Форма",Новый Структура("АдресПараметровРеструктуризации,",АдресПараметровРеструктуризации),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе	
			
			ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи);
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьЗаписиДанных(АдресПараметровРеструктуризации)
	
	ПараметрыРеструкутризации = ПолучитьИзвременногоХранилища(АдресПараметровРеструктуризации);
	Если ПараметрыРеструкутризации.Свойство("ЕстьЗаписиПоЭлементуСтруктуры") И ПараметрыРеструкутризации.ЕстьЗаписиПоЭлементуСтруктуры Тогда
		 Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

&НаСервере
Функция ПолучитьПараметрыРеструктуризации(Отказ)
	
	ИзмененныйОбъект=РеквизитФормыВЗначение("Объект");
				
	ПараметрыРеструктуризации=Справочники.ГруппыРаскрытия.ПроверитьНеобходимостьРеструктуризацииДанныхЭлементСтруктуры(ИзмененныйОбъект,Объект.Ссылка);
	
	Если НЕ ПараметрыРеструктуризации=Неопределено Тогда
		
		Возврат ПоместитьВоВременноеХранилище(ПараметрыРеструктуризации,ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьПараметрыРеструктуризации()


&НаКлиенте
Процедура ПодтверждениеРеструктуризацииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия=Неопределено Тогда
		
		ВыполнитьЗаписьОбъекта(РезультатЗакрытия,ДополнительныеПараметры);
				
	КонецЕсли;
		
КонецПроцедуры // ПодтверждениеРеструктуризацииЗавершение()

#Область ЗаписьОбъекта

&НаКлиенте
Процедура ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи) Тогда
		
		Модифицированность=Ложь;
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы)=Тип("ТаблицаФормы") Тогда
			
			ЭтаФорма.ВладелецФормы.Обновить();
			
		КонецЕсли;
		
		ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
				
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗаписьОбъекта()
	
&НаСервере
Функция ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресПараметровРеструктуризации=АдресПараметровРеструктуризации;
	
	Отказ=Ложь;
	
	НачатьТранзакцию();
	
	ПередЗаписьюОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		РабочийОбъект.Записать();
		
		ПриЗаписиОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

		ПослеЗаписиОбъектаСервер(РабочийОбъект,ПараметрыЗаписи);
		
		ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");	
		
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьОбъектВФорме()

&НаСервере
Процедура ПередЗаписьюОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры // ПередЗаписьюОбъектаКлиент() 

&НаСервере
Процедура ПриЗаписиОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	
КонецПроцедуры // ПриЗаписиОбъектаСервер()

&НаСервере
Процедура ПослеЗаписиОбъектаСервер(ТекущийОбъект, ПараметрыЗаписи)
		
	Если Не ПараметрыЗаписи.Свойство("Закрыть") Тогда
		
		ПроверитьНаличиеПротоколов();
		
	КонецЕсли;
			
КонецПроцедуры // ПослеЗаписиОбъектаСервер()

&НаКлиенте
Процедура ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи)
	
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("Ссылка", Объект.Ссылка);
	СтруктураОповещения.Вставить("ТипЗначения", Объект.ТипЗначения);
	СтруктураОповещения.Вставить("Код", СокрЛП(Объект.Код));
	Оповестить("Справочник.ПоказателиОтчетов.ПослеЗаписи", СтруктураОповещения, ЭтаФорма);
	
	Если ЗаписьНовогоОбъекта Тогда
		
		Оповестить("ЗаписанНовыйПоказательОтчета");
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") И ЭтотОбъект.Открыта() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписиОбъектаКлиент()

#КонецОбласти

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РасширениеБизнесЛогикиУХ.ВыполнитьРеструктуризациюБланков(ТекущийОбъект.Ссылка,"");

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Процедура УстановитьНаименованиеПоказателяПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.Строка) И ЗначениеЗаполнено(Объект.Колонка) Тогда
		
		Объект.Наименование = Объект.Строка.Наименование + " " + нрег(Объект.Колонка.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
// Процедура - обработчик события "ПриИзменении" в: Поле ввода "Строка";
// Поле ввода "Колонка"; Поле ввода "Суффикс";
Процедура СтрокаКолонкаСуффиксПриИзменении()
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		УстановитьНаименованиеПоказателяПоУмолчанию();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Строка) 
	   И НЕ ЗначениеЗаполнено(Объект.Колонка) 
	   И НЕ УправлениеОтчетамиУХ.СтрокаМожетИспользоватьсяВКачествеКода(Объект.Строка.Код) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Код = СокрЛП(Объект.Строка.Код) + ?(ПустаяСтрока(Объект.Колонка.Код), "", "_") + СокрЛП(Объект.Колонка.Код) + ?(ПустаяСтрока(Объект.СуффиксКода), "", "_") + СокрЛП(Объект.СуффиксКода);
	
	Если Объект.Строка.Пустая() И НЕ ОБъект.Колонка.Пустая() Тогда
		
		Если Объект.ТипЗначения.Пустая() Тогда
			ОБъект.ТипЗначения = ОБъект.Колонка.ТипЗначения;
		КонецЕсли;
		
	ИначеЕсли НЕ Объект.Строка.Пустая() Тогда
		
		Объект.ТипЗначения = Объект.Строка.ТипЗначения;
		
	КонецЕсли;
	
	ДанныеИзСтроки = "";
	ДанныеИзКолонки = "";
	
	Если ПустаяСтрока(Объект.Наименование) И Объект.Строка.Пустая() И Объект.Колонка.Пустая() Тогда
		
		Объект.Наименование = УправлениеОтчетамиУХ.НаименованиеПоКоду(Объект.Код);
		
	КонецЕсли;
	
	Если НЕ Объект.Строка.ГруппаРаскрытия.Пустая() Тогда
		ДанныеИзСтроки = ДанныеИзСтроки + ", ГруппаРаскрытия";
	КонецЕсли;
	
	Если НЕ Объект.Строка.ВидПоказателя.Пустая() Тогда
		ДанныеИзСтроки = ДанныеИзСтроки + ", ВидПоказателя";
	КонецЕсли;
	
	Если НЕ Объект.Строка.Предназначение.Пустая() Тогда
		ДанныеИзСтроки = ДанныеИзСтроки + ", Предназначение";
	КонецЕсли;
		
	Если НЕ Объект.Строка.СчетБД.Пустая() Тогда
		ДанныеИзСтроки = ДанныеИзСтроки + ", СчетБД";
	КонецЕсли;
		
	Если НЕ Объект.Колонка.ВидИтогаПоСчету.Пустая() Тогда
		 ДанныеИзКолонки = ДанныеИзКолонки + ", ВидИтогаПоСчету";
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Если НЕ Объект.Строка.ПриходРасход.Пустая() Тогда
			ДанныеИзСтроки = ДанныеИзСтроки + ", ПриходРасход";
		КонецЕсли;
		
		Если НЕ Объект.Строка.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			ДанныеИзСтроки = ДанныеИзСтроки + ", СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Строка.СтатьяДоходовИРасходов) Тогда
			ДанныеИзСтроки = ДанныеИзСтроки + ", СтатьяДоходовИРасходов";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Строка.СтатьяДвиженияРесурсов) Тогда
			ДанныеИзСтроки = ДанныеИзСтроки + ", СтатьяДвиженияРесурсов";
		КонецЕсли;
		
		Если НЕ Объект.Строка.ОценкаПоложительногоОтклонения.Пустая() Тогда
			ДанныеИзСтроки = ДанныеИзСтроки + ", ОценкаПоложительногоОтклонения";
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ДанныеИзСтроки) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Объект.Строка, Сред(ДанныеИзСтроки,3));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеИзКолонки) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Объект.Колонка, Сред(ДанныеИзКолонки,3));
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" в: Поле ввода "СуффиксКода"
//
&НаКлиенте
Процедура СуффиксКодаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Строка) 
	   И НЕ ЗначениеЗаполнено(Объект.Колонка) 
	   И НЕ УправлениеОтчетамиУХ.СтрокаМожетИспользоватьсяВКачествеКода(Текст) Тогда
	   
	    ПоказатьПредупреждение(, Нстр("ru = 'Неверно задан суффикс!'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "НеФинансовый"
//
&НаКлиенте
Процедура НеФинансовыйПриИзменении(Элемент)
	
	УправлениеДоступностьюПараметровМультивалютности();
	
	Если Объект.НеФинансовый Тогда
		
		Объект.Валютный = Ложь;
		
	КонецЕсли;
		
	УстановитьВидимость();
	
КонецПроцедуры

//&НаКлиенте
//Процедура КонтролироватьЛимитыПриИзменении(Элемент)
//	Если ЗначениеЗаполнено(Объект.Строка) Тогда
//		ПриИзмененииКонтролироватьЛимиты();
//	Иначе
//		// Пустая строка. Не изменяем данные.
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтролироватьЛимиты1ПриИзменении(Элемент)
//	Если ЗначениеЗаполнено(Объект.Строка) Тогда
//		ПриИзмененииКонтролироватьЛимиты();
//	Иначе
//		// Пустая строка. Не изменяем данные.
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтролироватьЛимиты2ПриИзменении(Элемент)
//	Если ЗначениеЗаполнено(Объект.Строка) Тогда
//		ПриИзмененииКонтролироватьЛимиты();
//	Иначе
//		// Пустая строка. Не изменяем данные.
//	КонецЕсли;
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
	
		ПоказательБюджета=Истина;
		Элементы.ГруппаОстаткиОбороты.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Истина;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Объект.Владелец.РазделениеПоПроектам;
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
	
		ПоказательБюджета=Истина;
		Элементы.ГруппаОстаткиОбороты.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Истина;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Объект.Владелец.РазделениеПоПроектам;
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда 
	
		ПоказательБюджета=Истина;
		Элементы.ГруппаОстаткиОбороты.Видимость=Истина;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Ложь;
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда 
	
		ПоказательБюджета=Истина;
		Элементы.ГруппаОстаткиОбороты.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Истина;
		Элементы.РазделениеПоПроектам.Видимость=Объект.Владелец.РазделениеПоПроектам;
		
	Иначе
		
		ПоказательБюджета=Ложь;
		Элементы.ГруппаОстаткиОбороты.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДР.Видимость=Ложь;
		Элементы.ГруппаСтатьяБДДС.Видимость=Ложь;
		Элементы.ГруппаСтатьяРесурсы.Видимость=Ложь;
		Элементы.РазделениеПоПроектам.Видимость=Ложь;
		
	КонецЕсли;
	
	ПоказательБюджета= ПоказательБюджета И (ЗначениеЗаполнено(Объект.СчетБД) ИЛИ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) ИЛИ ЗначениеЗаполнено(Объект.СтатьяДоходовИРасходов) ИЛИ ЗначениеЗаполнено(Объект.СтатьяДвиженияРесурсов));
	
	Элементы.Бюджетирование.Видимость		= НЕ Объект.Проверочный;
	Элементы.КонвертацияВалют.Видимость  	= НЕ Объект.Проверочный;
	Элементы.ФинансовыеРеквизиты.Видимость  = НЕ Объект.Проверочный;
	Элементы.ГруппаПроверка.Видимость		= Объект.Проверочный;
	
	УстановленаПустаяГруппаРаскрытия = (Объект.ГруппаРаскрытия = Справочники.ГруппыРаскрытия.ПустаяСсылка());
	ТипЗначенияПоказателяЧисло = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	ТипЗначенияПоказателяДата = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата);	
	//ЕстьВидимостьИтога = (НЕ УстановленаПустаяГруппаРаскрытия) И (ТипЗначенияПоказателяЧисло ИЛИ ТипЗначенияПоказателяДата);
	
	//Элементы.ВидИтога.Видимость						 = ЕстьВидимостьИтога;

	Элементы.Внутригрупповой.Видимость = УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(Объект.ГруппаРаскрытия);
	
	Элементы.СчетБД.ТолькоПросмотр 				= ЗначениеЗаполнено(ОБъект.Строка.СчетБД);

	
	//Элементы.РазделениеПоПроектам.ТолькоПросмотр=(Объект.Предназначение=Объект.Строка.Предназначение);
	
	Элементы.СтатьяНаправлениеБДДС.ТолькоПросмотр	=(Объект.Строка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	Элементы.СтатьяНаправлениеБДР.ТолькоПросмотр	=(Объект.Строка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
	Элементы.СтатьяНаправлениеРесурсы.ТолькоПросмотр=(Объект.Строка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
	
	// Изменим доступность в зависимости от типы показателя.
	Если ЗначениеЗаполнено(Объект.ТипПоказателя) Тогда
		Элементы.ВидИтога.ТолькоПросмотр				 = Истина;
		Элементы.ВидКурса.ТолькоПросмотр				 = Истина;
		Элементы.ВидПоказателя.ТолькоПросмотр			 = Истина;
		Элементы.ДействияПриАктуализации.ТолькоПросмотр	 = Истина;
		Элементы.НеМасштабируется.Доступность         	 = Ложь;
		Элементы.НеФинансовый.Доступность            	 = Ложь;
		Элементы.ПересчитыватьВалютнуюСумму.Доступность	 = Ложь;
		Элементы.ТипЗначения.ТолькоПросмотр				 = Истина;
	Иначе
		Элементы.ВидИтога.ТолькоПросмотр				 = Ложь;
		Элементы.ВидКурса.ТолькоПросмотр				 = Ложь;
		Элементы.ВидПоказателя.ТолькоПросмотр			 = Ложь;
		Элементы.ДействияПриАктуализации.ТолькоПросмотр	 = Ложь;
		Элементы.НеМасштабируется.Доступность         	 = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		Элементы.НеФинансовый.Доступность            	 = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		
		Элементы.ПересчитыватьВалютнуюСумму.Доступность	 = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число 
															И ЗначениеЗаполнено(Объект.ГруппаРаскрытия) 
															И (НЕ Объект.НеФинансовый) 
															И Объект.ГруппаРаскрытия.Валютная);
															
		Элементы.ТипЗначения.ТолькоПросмотр				 = ПоказательБюджета;
	КонецЕсли;
КонецПроцедуры

// Регулирует доступность элементов управления формы, связанных с
// реквизитами мультивалютности.
//
&НаСервере
Процедура УправлениеДоступностьюПараметровМультивалютности()
	
	Элементы.КонвертацияВалют.Видимость = НЕ Объект.НеФинансовый;
	
	Если Объект.ВидКурса=Перечисления.ВидыКурсов.КурсНаМоментНачисления Тогда
		Элементы.ПанельСвязанныеПоказатели.ТекущаяСтраница=Элементы.ОпределяющийДатуПоказатель;
	ИначеЕсли Объект.ВидКурса=Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе Тогда
		Элементы.ПанельСвязанныеПоказатели.ТекущаяСтраница=Элементы.ОпределяющиеКурсыПоказатели;
	Иначе
		Элементы.ПанельСвязанныеПоказатели.ТекущаяСтраница=Элементы.ПрочиеКурсы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКурсаПриИзменении(Элемент)
	
	УправлениеДоступностьюПараметровМультивалютности();
	
КонецПроцедуры                              


&НаСервере
Процедура ОбновитьСписокРесурсов()
	
	ЗначениеРесурсаТек=Объект.РесурсРегистра;
	
	Элементы.РесурсРегистра.СписокВыбора.Очистить();
	Элементы.РесурсРегистра.СписокВыбора.Добавить("Сумма");
	
	Если СтрНайти(Объект.СчетБД.ПризнакиУчета,"Количественный")>0
		ИЛИ СтрНайти(Объект.КоррСчетБД.ПризнакиУчета,"Количественный")>0 Тогда
		
		Элементы.РесурсРегистра.СписокВыбора.Добавить("Количество");
		
	КонецЕсли;
	
	Если Элементы.РесурсРегистра.СписокВыбора.НайтиПоЗначению(ЗначениеРесурсаТек)=Неопределено Тогда
		Объект.РесурсРегистра="Сумма";
	КонецЕсли;

КонецПроцедуры // ОбновитьСписокРесурсов()

&НаСервере
Процедура СформироватьКодШаблонаПроводки()
	
	ПроектКода=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(СокрЛП(ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление("Дт"+СокрЛП(Объект.СчетБД.Код)+"_Кт"+СокрЛП(Объект.СчетБД.Код)+"_"+Объект.РесурсРегистра)),Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода,"ШаблоныПроводок",Объект.Владелец);
	
	Если Не ПроектКода=СокрЛП(Объект.Код) Тогда
		
		Объект.Код=ПроектКода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстАналитик()
	
	Для Индекс=1 ПО 3 Цикл
		
		Если Индекс<=Объект.ГруппаРаскрытия.ЧислоАналитикДт Тогда
			
			Элементы["ВидАналитикиДт"+Индекс].Заголовок=Объект.ГруппаРаскрытия["ВидАналитики"+Индекс];
			
		Иначе
			
			Элементы["ВидАналитикиДт"+Индекс].Заголовок="";
			
		КонецЕсли;
		
		Если Индекс<=Объект.ГруппаРаскрытия.ЧислоАналитикКт Тогда
			
			Элементы["ВидАналитикиКт"+Индекс].Заголовок=Объект.ГруппаРаскрытия["ВидАналитики"+(Индекс+Объект.ГруппаРаскрытия.ЧислоАналитикДт)];
			
		Иначе	
			
			Элементы["ВидАналитикиКт"+Индекс].Заголовок="";
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьТекстАналитик() 


&НаСервере
Процедура ПриИзмененииСчетаБД()
	
	
	Если ЗначениеЗаполнено(Объект.ГруппаРаскрытия) Тогда
		
		Объект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
	Иначе
		
		Объект.ВидИтога="";
		
	КонецЕсли;
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки Тогда
		
		СформироватьКодШаблонаПроводки();
		ОбновитьТекстАналитик();
		
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			
			СтрокаШаблона = Нстр("ru = 'Счет Дт:%1 - Счет Кт:%2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				Объект.Наименование = СтрШаблон(СтрокаШаблона, Объект.СчетБД.Код, Объект.КоррСчетБД.Код);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Активный  Тогда
			Объект.ВидПоказателя=Перечисления.ВидыПоказателей.Активный;
		ИначеЕсли Объект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда
			Объект.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный;
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование=Объект.СчетБД.Наименование;
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.Код) Тогда
			Объект.Код=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Объект.Наименование,,"СтрокиОтчетов",Объект.Владелец);
		КонецЕсли;
		
		ОпределитьВидКурсаПоказателя();
				
	КонецЕсли;
	
	ОбновитьТекстАналитик();
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииСчетаБД()

&НаСервере
Процедура ОпределитьВидКурсаПоказателя()
	
	Объект.ВидКурса=Справочники.ВидыОтчетов.ОпределитьВидКурсаПоказателя(Объект.СчетБД,Объект.ВидИтогаПоСчету);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидКурса) Тогда
		
		Объект.НеФинансовый=Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ОпределитьВидКурсаПоказателя() 

&НаСервере
Процедура ПриИзмененииВидаИтогаПоСчету()
	
	ОпределитьВидКурсаПоказателя();
	
КонецПроцедуры // ПриИзмененииВидаИтогаПоСчету() 

&НаСервере
Процедура ПриИзмененииТипаПоказателя()
	Если ЗначениеЗаполнено(Объект.ТипПоказателя) Тогда
		СтруктураДанныхТипа = Справочники.ТипыПоказателей.ПолучитьСтруктуруДанныхТипаПоказателя(Объект.ТипПоказателя);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхТипа);
		ПриИзмененииТипаЗначения();
	Иначе
		// Тип показателя очищен. Не изменяем реквизиты показателя.
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структура данных строки отчета СтрокаВход.
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхСтрокиОтчета(СтрокаВход) 
	РезультатФункции = Справочники.СтрокиОтчетов.ПолучитьСтруктуруДанныхСтрокиОтчета(СтрокаВход);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтруктуруДанныхСтрокиОтчета()

&НаКлиенте
Процедура НаименованиеПоУмолчанию(Команда)
	
	УстановитьНаименованиеПоказателяПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокуКолонку()
	
	ПоследняяСтрока  = Объект.Строка;
	ПоследняяКолонка = Объект.Колонка;
	
КонецПроцедуры


&НаКлиенте
Процедура СтрокаПриИзменении(Элемент)
	
	//Если (ЗначениеЗаполнено(Объект.Строка)) И (Объект.КонтролироватьЛимиты) Тогда
	Если ЗначениеЗаполнено(Объект.Строка) Тогда	
		ПриИзмененииКонтролироватьЛимиты();
	Иначе
		// Пустая строка. Не изменяем данные.
	КонецЕсли;
	СтрокаКолонкаСуффиксПриИзменении();
	
КонецПроцедуры


&НаКлиенте
Процедура КолонкаПриИзменении(Элемент)
	
	СтрокаКолонкаСуффиксПриИзменении();
	
КонецПроцедуры


&НаКлиенте
Процедура СуффиксКодаПриИзменении(Элемент)
	СтрокаКолонкаСуффиксПриИзменении();
КонецПроцедуры


&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	ПриИзмененииТипаЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаЗначения()
	
	Если НЕ Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
		Объект.Валютный = Ложь;
		Объект.ПересчитыватьВалютнуюСумму=Ложь;	
	КонецЕсли;
	
	Если Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		 Элементы.ВидИтога.ПодсказкаВвода =  Нстр("ru = 'Сумма (итог по умлчанию)'");
	ИначеЕсли Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	
		 Элементы.ВидИтога.ПодсказкаВвода =  Нстр("ru = 'Максимум (итог по умлчанию)'");
	ИначеЕсли Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда	
		 Элементы.ВидИтога.ПодсказкаВвода =  Нстр("ru = 'Максимум (итог по умлчанию)'");
	ИначеЕсли Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда	
	     Элементы.ВидИтога.ПодсказкаВвода =  Нстр("ru = 'Итог по группе не рассчитывается (итог по умлчанию)'");
	КонецЕсли;	
		
	УстановитьВидимость();
	
КонецПроцедуры // 


&НаКлиенте
Процедура СчетБДПриИзменении(Элемент)
	
	ПриИзмененииСчетаБД();
	
КонецПроцедуры


&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ПриИзмененииСчетаБД();
		
КонецПроцедуры


&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	ПриИзмененииСчетаБД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйПриИзменении(Элемент)
	
	Если Объект.Проверочный Тогда
		
		Объект.НеМасштабируется	= Истина;
		Объект.НеФинансовый		= Истина;
		Объект.ВнутриГрупповой	= Ложь;
		Объект.Оборотный		= Ложь;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаРаскрытияОчистка(Элемент, СтандартнаяОбработка)	
	
	Объект.Валютный = Ложь;
	Объект.ПересчитыватьВалютнуюСумму=Ложь;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИтогаПоСчетуПриИзменении(Элемент)
	
	ПриИзмененииВидаИтогаПоСчету();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатьи()
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда	
		
		РабочаяСтатья=Объект.СтатьяДвиженияДенежныхСредств;
		РеквизитСтатья="СтатьяДвиженияДенежныхСредств";
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда	
		
		РабочаяСтатья=Объект.СтатьяДвиженияРесурсов;
		РеквизитСтатья="СтатьяДвиженияРесурсов";
		
	Иначе
		
		РабочаяСтатья=Объект.СтатьяДоходовИРасходов;
		РеквизитСтатья="СтатьяДоходовИРасходов";
		
	КонецЕсли;
	
	
	Объект.ПриходРасход=РабочаяСтатья.ПриходРасход;
	
	//ПоказательОбъект = РеквизитФормыВЗначение("Объект");
	//ТекстОшибки = "";
	//РазрешеноВыставлятьЛимит = Справочники.ВидыОтчетов.ПроверитьУникальностьКонтроляЛимитов(ПоказательОбъект, ТекстОшибки);
	//Если РазрешеноВыставлятьЛимит Тогда
	//	Объект.КонтролироватьЛимиты = Истина
	//Иначе
	//	Объект.КонтролироватьЛимиты = Ложь;
	//	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
	//		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	//	Иначе
	//		// Не отображаем сообщение об ошибке.
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ГруппаРаскрытия) Тогда
		
		Объект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
	Иначе
		
		Объект.ВидИтога="";
		
	КонецЕсли;
		
	Объект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование=РабочаяСтатья.Наименование;;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Код) Тогда
		Объект.Код=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Объект.Наименование);
	КонецЕсли;
		
	УстановитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовИРасходовПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры


&НаКлиенте
Процедура ПредназначениеПриИзменении(Элемент)
	
	ПредназначениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредназначениеПриИзмененииНаСервере()
	
	Если НЕ Объект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные Тогда
				
		Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
		Если Не Объект.ГруппаРаскрытия.Предназначение=Объект.Предназначение Тогда
			
			Объект.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход;
			Объект.ГруппаРаскрытия=Неопределено;
			
		КонецЕсли;
				
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияРесурсовПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры


&НаКлиенте
Процедура РазделениеПоПроектамПриИзменении(Элемент)
	
	ПриИзмененииСтатьи();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСтатьиБюджета(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора",			Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",	Истина);
	СтруктураПараметров.Вставить("Предназначение",		Объект.Предназначение);
	СтруктураПараметров.Вставить("ПоказательОтчета",	Объект.Ссылка);
	СтруктураПараметров.Вставить("СправочникСтруктуры",	"ПоказателиОтчетов");
	СтруктураПараметров.Вставить("СтатьяБюджета",		Объект[Элемент.Имя]);
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Стр = "ОбщаяФорма.ФормаВыбораСтатьиБюджета";
		ОткрытьФорму(Стр, СтруктураПараметров, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли
		
КонецПроцедуры // НачалоВыбораСтатьиБюджета()


&НаКлиенте
Процедура ГруппаРаскрытияПриИзменении(Элемент)
	
	ПриИзмененииГруппыРаскрытия();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГруппыРаскрытия()
	
	Если ЗначениеЗаполнено(Объект.ГруппаРаскрытия) Тогда
		
		РеквизитыРаскрытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГруппаРаскрытия,"Валютная,АналитикаВГО");
		
		ЧисловойПоказатель = (Объект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		Объект.Валютный=((НЕ Объект.НеФинансовый) И ЧисловойПоказатель И РеквизитыРаскрытия.Валютная);
		

		
		Если РеквизитыРаскрытия.АналитикаВГО > 0 Тогда
			
			Объект.ВнутриГрупповой=Истина;
			
		КонецЕсли;
		
	Иначе
		// Нет данных о реквизитах группы раскрытия.
	КонецЕсли;

	Если НЕ Объект.Валютный Тогда
		Объект.ПересчитыватьВалютнуюСумму=Ложь;
	Иначе
		Объект.ПересчитыватьВалютнуюСумму=Истина;
	КонецЕсли;

	УстановитьВидимость();	
	
КонецПроцедуры // ПриИзмененииГруппыРаскрытия()

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи=Новый Структура("Закрыть");
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ЗаписанаГруппаРаскрытия" 
		И Параметр.ГруппаРаскрытия=Объект.ГруппаРаскрытия Тогда
		
		ПриИзмененииГруппыРаскрытия();
		
	ИначеЕсли СокрЛП(ИмяСобытия) = "ОбновитьТипПоказателя" Тогда
		ПриИзмененииТипаПоказателя();
	Иначе
		// Неизвестное событие. Ничего не делаем.
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Процедура Протоколы(Команда)
	
	ОткрытьФорму("Справочник.ПротоколируемыеСобытия.ФормаСписка",Новый Структура("Отбор",Новый Структура("Объект",Объект.Ссылка)));
	
КонецПроцедуры


&НаКлиенте
Процедура ТипПоказателяПриИзменении(Элемент)
	ПриИзмененииТипаПоказателя();
КонецПроцедуры


&НаКлиенте
Процедура ТипПоказателяОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииТипаПоказателя();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтролироватьЛимиты()
	
	СправочникБДР="Справочник.СтатьиДоходовИРасходов.ПустаяСсылка";
	СправочникРесурсы="Справочник.СтатьиДвиженияРесурсов.ПустаяСсылка";
	
	// Получение данных из строки отчета.
	СтруктураДанныхСтроки = ПолучитьСтруктуруДанныхСтрокиОтчета(Объект.Строка);
	НоваяСтатьяДвиженияДенежныхСредств	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "СтатьяДвиженияДенежныхСредств", ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка"));
	НоваяСтатьяДоходовИРасходов			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "СтатьяДоходовИРасходов", ПредопределенноеЗначение(СправочникБДР));
	НоваяСтатьяДвиженияРесурсов			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "СтатьяДвиженияРесурсов", ПредопределенноеЗначение(СправочникРесурсы));
	НовыйПриходРасход					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "ПриходРасход", ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.ПустаяСсылка"));
	НоваяГруппаРаскрытия				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхСтроки, "ГруппаРаскрытия", ПредопределенноеЗначение("Справочник.ГруппыРаскрытия.ПустаяСсылка"));
	// Выставление Полученных реквизитов.
	
	Объект.СтатьяДвиженияДенежныхСредств	 = НоваяСтатьяДвиженияДенежныхСредств;
	Объект.СтатьяДоходовИРасходов			 = НоваяСтатьяДоходовИРасходов;
	Объект.СтатьяДвиженияРесурсов			 = НоваяСтатьяДвиженияРесурсов;
	
	Объект.ГруппаРаскрытия						 = НоваяГруппаРаскрытия;
	ПриИзмененииСтатьи();
	ПриИзмененииГруппыРаскрытия();
КонецПроцедуры		// ПриИзмененииКонтролироватьЛимиты()
