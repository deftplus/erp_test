#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПерезаписыватьКод Экспорт;
Перем ОбновитьПометкуУдаленияДляПодчиненных;
Перем ОбновитьАналитикуИсточниковДанных;

Перем АдресПараметровРеструктуризации Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПередЗаписью".
//

Процедура ПолучитьКодПроводки() Экспорт
	
	ДлинаКодаПоказателя = Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода;
	КодПроводки = "Дт" + СокрЛП(СчетБД.Код) + "_Кт" + СокрЛП(КоррСчетБД.Код) + "_" + РесурсРегистра;
	АлфавитноЦифровоеПредставление = СокрЛП(ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(КодПроводки));
	Код = ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(АлфавитноЦифровоеПредставление, ДлинаКодаПоказателя, "ПоказателиОтчетов", Владелец);	
	
КонецПроцедуры // 

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		ОбновитьПометкуУдаленияДляПодчиненных = Истина;
	КонецЕсли;
	
	Если ПометкаУдаления И ТипЗнч(Владелец)=Тип("СправочникСсылка.ВидыОтчетов") И (НЕ Ссылка.ПометкаУдаления) И (НЕ Владелец.ПометкаУдаления) И Справочники.ВидыОтчетов.ЕстьЗаписиПоЭлементуСтруктуры(Ссылка) Тогда
		
		ТекстОшибки=Справочники.ВидыОтчетов.ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры(Ссылка);
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			СтрокаШаблона = Нстр("ru = 'Вид отчета %1, показатель %2: установка пометки на удаление отменена.
			|%3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Ссылка.Владелец, Ссылка, ТекстОшибки), Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки
		И ЭтоНовый()
		И ПустаяСтрока(Код) Тогда
		
		ПолучитьКодПроводки();
		
	ИначеЕсли (мПерезаписыватьКод ИЛИ (ЭтоНовый() И ПустаяСтрока(Код))) И НЕ Отказ Тогда 
		
		ТекКод = СокрЛП(Строка.Код) + ?(ПустаяСтрока(Колонка.Код), "", "_") + СокрЛП(Колонка.Код) + ?(ПустаяСтрока(СуффиксКода), "", "_") + СокрЛП(СуффиксКода);
		Код = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СокрЛП(ТекКод));
		
	КонецЕсли;
	
	Если ВнутриГрупповой Тогда
		
		Если НЕ (УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(ГруппаРаскрытия)
			ИЛИ СпособОбработки = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение) Тогда
			
			СтрокаШаблона = Нстр("ru = 'Показателю: %1 не установлен признак ""Внутригрупповой"".
			|Нельзя установить признак ""Внутригрупповой"" вычисляемому показателю"
			+ ", для которого не определено раскрытие по аналитике ""Организации"".'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Наименование),,, СтатусСообщения.Внимание);
			КонецЕсли;
						
			Внутригрупповой = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Владелец)=Тип("СправочникСсылка.ВидыОтчетов") 
		И Владелец.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость 
		И ЗначениеЗаполнено(СчетБД) 
		И ЗначениеЗаполнено(ВидИтогаПоСчету) Тогда
		
		Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
		
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И (НЕ Внутригрупповой И Ссылка.ВнутриГрупповой) Тогда
		РегистрыСведений.СоответствиеВнутригрупповыхПоказателей.ОчиститьСоответствияВГОДляПоказателей(Ссылка);
	КонецЕсли;
	
	ЧисловойПоказатель = ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	
	Валютный=ГруппаРаскрытия.Валютная И ЧисловойПоказатель И (НЕ НеФинансовый);
	
	Если ЭтоНовый() И Валютный Тогда
		
		ПересчитыватьВалютнуюСумму=Истина;
		
	КонецЕсли;
	
	Если ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		
		НеФинансовый = Истина;
		
		Если ТипЗначения=перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
			ВидИтога     = Перечисления.ВидыИтоговПоказателя.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЗначения) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не указан тип значения!'"), Отказ,, СтатусСообщения.Важное);
	КонецЕсли;
	
	Если ВидПоказателя=Перечисления.ВидыДанныхПоказателейОтчетов.ДвиженияДенежныхСредств И (НЕ ЗначениеЗаполнено(ПриходРасход)) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не указано направление движения (приход/расход)'"), Отказ,, СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ УправлениеОтчетамиУХ.СтрокаМожетИспользоватьсяВКачествеКода(Код) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Неверно задан код! Первым символом кода должна быть буква. Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).'; en = 'Invalid code! The first code character must be a letter. Each of the following characters can be a letter, number, or underscore (_).'"),Отказ,,СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ НеФинансовый 
		И ЗначениеЗаполнено(СвязанныйПоказатель) 
		И ЗначениеЗаполнено(СвязанныйПоказатель.ТипЗначения) 
		И СвязанныйПоказатель.ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Неверно заполнено значение поля ""Связанный показатель""!'"), Отказ,, СтатусСообщения.Важное);
		
	КонецЕсли;
	
	Если НЕ ЭтоНовый() 
		И ЗначениеЗаполнено(ТипЗначения) 
		И ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоказателиОтчетов.Ссылка
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.СвязанныйПоказатель = &СвязанныйПоказатель
		|	И ПоказателиОтчетов.ВидКурса = &ВидКурса");
		
		Запрос.УстановитьПараметр("СвязанныйПоказатель", Ссылка);
		Запрос.УстановитьПараметр("ВидКурса", Перечисления.ВидыКурсов.КурсНаМоментНачисления);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			
			СтрокаШаблона = Нстр("ru = 'В ИБ присутствуют показатели, для которых текущий показатель указан в качестве ""связанного"".
			|Для текущего показателя не может быть установлен тип ""%1""!'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТипЗначения), Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПоказателиОтчетов.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Код = &ТекущийКод
		|	И ПоказателиОтчетов.Владелец = &ТекущийВладелец");
		
		Запрос.УстановитьПараметр("ТекущийКод", Код);
		Запрос.УстановитьПараметр("ТекущийВладелец", Владелец);
		
		Если НЕ ЭтоНовый() Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И ПоказателиОтчетов.Ссылка <> &ТекущаяСсылка";
			Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Получить(0) > 0 Тогда
			
			СтрокаШаблона = Нстр("ru = 'Показатель с кодом ""%1"" уже определен для текущего вида отчета!'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(Код)), Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТипЗнч(Владелец)=Тип("СправочникСсылка.ВидыОтчетов")
			И (Не ПометкаУдаления) Тогда
			//Проверим, что нет неудаленного показателя с такой же строкой и колонкой
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ПоказателиОтчетов.Ссылка) КАК Ссылка
			|ИЗ
			|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
			|ГДЕ
			|	ПоказателиОтчетов.Строка = &ТекущаяСтрока
			|	И ПоказателиОтчетов.Колонка = &ТекущаяКолонка
			|	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ");
			
			Запрос.УстановитьПараметр("ТекущаяСтрока", Строка);
			Запрос.УстановитьПараметр("ТекущаяКолонка", Колонка);
			
			Если НЕ ЭтоНовый() Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	И ПоказателиОтчетов.Ссылка <> &ТекущаяСсылка";
				Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);
				
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			Если Выборка.Получить(0) > 0 Тогда
				
				СтрокаШаблона = Нстр("ru = 'Показатель со строкой  ""%1"" и колонкой  ""%2"" уже определен для текущего вида отчета!'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Строка(Строка),Строка(Колонка)), Отказ,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		// Проверим лимитрующие реквизиты.
		РезультатПроверки = ПроверитьЛимитирующиеРеквизитыПоказателя();
		Если НЕ РезультатПроверки Тогда
			Отказ = Истина;
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
		
	КонецЕсли;
	
	//// Проверим Счет БД.
	//РезультатПроверки = ПроверитьПравильностьСчетов();
	//Если НЕ РезультатПроверки Тогда
	//	ТекстСообщения = НСтр("ru = 'Счет БД (%СчетПоказателя%) в показателе ""%Показатель%"" отличается от счета БД (%СчетСтроки%) в строке ""%Строка%"". Запись показателя отменена.'");
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетПоказателя%", Строка(СчетБД));
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Ссылка));
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетСтроки%", Строка(Строка.СчетБД));
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Строка%", Строка(Строка));
	//	ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	//	Отказ = Истина;
	//Иначе
	//	// Проверка пройдена успешно.
	//КонецЕсли;
	
	Если (Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств
		ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов 
		ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов) Тогда		
		
		РезультатПроверки = Справочники.ВидыОтчетов.ПроверитьСтрокуПоказательБюджета(ЭтотОбъект);
		Если НЕ РезультатПроверки Тогда
			Отказ = Истина;
		Иначе
			// Проверка пройдена.
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.Владелец = &Владелец
	|	И ГруппыРаскрытия.Код = &Код");
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Код", Код);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		
		СтрокаШаблона = Нстр("ru = 'Невозможно записать показатель с кодом ""%1"": для текущего вида отчета существует группа аналитик с таким кодом!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(Код)), Отказ,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ВнутриГрупповой Тогда
		
		Если ГруппаРаскрытия=Справочники.ГруппыРаскрытия.ПустаяСсылка() Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Для показателей, относящихся к внутригрупповым операциям, необходимо указать группу аналитик.'"), Отказ,, СтатусСообщения.Важное);
			
		Иначе
			
			ЕстьРаскрытиеПоОрганизациям=Ложь;
			
			Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				Если ЗначениеЗаполнено(Владелец["ВидАналитики"+Инд]) Тогда
					
					Продолжить;
					
				ИначеЕсли ЗначениеЗаполнено(ГруппаРаскрытия["ВидАналитики"+Инд]) 
					И (ГруппаРаскрытия["ВидАналитики"+Инд].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации")
					ИЛИ ГруппаРаскрытия["ВидАналитики"+Инд].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Контрагенты")) Тогда
					
					ЕстьРаскрытиеПоОрганизациям=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьРаскрытиеПоОрганизациям Тогда
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Показатели, относящиеся к внутригрупповым операциям, должны иметь раскрытие по организациям.'"), Отказ,, СтатусСообщения.Важное);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) И Валютный И НЕ (ГруппаРаскрытия.Валютная=Истина ИЛИ Владелец.НеФормироватьАналитическиеРаскрытия) Тогда
		
		ВалютнаяГруппа=Справочники.ГруппыРаскрытия.ПолучитьГруппуРаскрытияВалюта(Ссылка);
		
		Если НЕ ЗначениеЗаполнено(ВалютнаяГруппа) Тогда
			
			Валютный=Ложь;
			ПересчитыватьВалютнуюСумму=Ложь;
			
		Иначе
			
			ГруппаРаскрытия=ВалютнаяГруппа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если НЕ АдресПараметровРеструктуризации=Неопределено Тогда 
			
			Отказ = НЕ Справочники.ВидыОтчетов.ВыполнитьДействияПоРеструктуризации(АдресПараметровРеструктуризации);
			
		ИначеЕсли ЗначениеЗаполнено(Ссылка) Тогда
			
			Если НЕ Ссылка.ТипЗначения=ТипЗначения Тогда
				
				УправлениеОтчетамиУХ.ОбновитьТипыЗначенийОперандов(Ссылка);
				Справочники.ВидыОтчетов.ИзменитьТипЗначенияЯчеекПоказателя(Ссылка,ТипЗначения,Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ Отказ) Тогда 	
		НормализованныйКод=СокрЛП(Код);
	КонецЕсли;
						
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбновитьПометкуУдаленияДляПодчиненных Тогда
												
		Если Не Отказ Тогда
			
			МассивРеквизитов=Новый Массив;
			МассивРеквизитов.Добавить("ПотребительРасчета");
			МассивРеквизитов.Добавить("ПоказательОтбор");
							
			ОбщегоНазначенияУХ.ПометитьСправочникПоРеквизиту("ИсточникиДанныхДляРасчетов",МассивРеквизитов,Ссылка,ПометкаУдаления,Отказ);
            ОбщегоНазначенияУХ.ПометитьСправочникПоРеквизитуТЧ("ИсточникиДанныхДляРасчетов","ПравилаВычисленияПараметровЗапроса","ЗначениеДляПроверки",Ссылка,ПометкаУдаления,Отказ);
		
		КонецЕсли;
						
		Если (Не Отказ) И ПометкаУдаления Тогда
			ОбработатьПравилаОбработки(Отказ);
		КонецЕсли;
		
		Если (Не Отказ) И ПометкаУдаления Тогда
			
			ОбщегоНазначенияУХ.УдалитьИнформациюОКоординатах(Ссылка,Отказ);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если (Не Отказ) И ОбновитьАналитикуИсточниковДанных Тогда
		
		Справочники.ИсточникиДанныхДляРасчетов.ОбновитьАналитикиИсточниковДанных(,Ссылка,Отказ);
		
	КонецЕсли;
	
	Если Не Отказ
		И ОбщегоНазначения.ПодсистемаСуществует("ПодсистемыУХ.РасчетПоказателей") Тогда
		МодульУправлениеРасчетомПоказателей = ОбщегоНазначения.ОбщийМодуль("УправлениеРасчетомПоказателей");
		МодульУправлениеРасчетомПоказателей.ОчиститьСтруктуруРасчетаПоказателейПоПравилуРасчета(Ссылка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьПравилаОбработки(Отказ)
	
	УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(,Ссылка);
			
КонецПроцедуры // ОбработатьПравилаОбработки() 

// Проверяет правильность заполнения лимитирующих реквизитов, заданных в
// структуре ДанныеЛимитированияПоказателяВход.
Функция ПроверитьЛимитирующиеРеквизитыПоказателя()
	СтруктураДанных = Справочники.ПоказателиОтчетов.СформироватьСтруктуруДанныхЛимитированияПоказателя();
	СтруктураДанных.Вставить("Предназначение",					 Предназначение);
	СтруктураДанных.Вставить("СтатьяДвиженияДенежныхСредств",	 СтатьяДвиженияДенежныхСредств);
	СтруктураДанных.Вставить("СтатьяДоходовИРасходов",			 СтатьяДоходовИРасходов);
	СтруктураДанных.Вставить("СтатьяДвиженияРесурсов",			 СтатьяДвиженияРесурсов);
	СтруктураДанных.Вставить("Показатель",						 Ссылка);
	РезультатФункции = Справочники.ПоказателиОтчетов.ПроверитьЛимитирующиеРеквизитыПоказателя(СтруктураДанных);
	Возврат РезультатФункции;
КонецФункции		// ПроверитьЛимитирующиеРеквизитыПоказателя()

// Проверяет правильность заполнения реквизита Счет БД.
Функция ПроверитьПравильностьСчетов()
	РезультатФункции = Истина;
	Если Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		Если ЗначениеЗаполнено(СчетБД) Тогда
			СчетСтроки = Строка.СчетБД;
			РезультатФункции = (СчетБД = СчетСтроки);
		Иначе
			РезультатФункции = Истина;			// Показатель без счета. Проверка не требуется.
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПроверитьПравильностьСчетов()

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНАЯ ПРОГРАММА

мПерезаписыватьКод = Ложь;
ОбновитьПометкуУдаленияДляПодчиненных = Ложь;
ОбновитьАналитикуИсточниковДанных = Ложь;

#КонецЕсли



