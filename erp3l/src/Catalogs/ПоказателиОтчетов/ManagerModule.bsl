
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьНаименованиеПоказателя(ПоказательОбъект)
	
	ТекстНаименования = НСтр("ru = 'Дт: %1, Кт: %2.'");
	ТекстНаименования = СтрШаблон(ТекстНаименования,
		                        ПоказательОбъект.СчетБД,
		                        ПоказательОбъект.КоррСчетБД);
								
	Если ЗначениеЗаполнено(ПоказательОбъект.РесурсРегистра) Тогда
		
		ТекстНаименования=ТекстНаименования+", "+ПоказательОбъект.РесурсРегистра;
		
	КонецЕсли;
	
	Возврат ТекстНаименования;
		
КонецФункции // ОбновитьНаименованиеПоказателя() 

Процедура ИзменитьОбъектПоПараметрам(СтруктураПараметров,Отказ=Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда
		
		ПоказательОбъект=Справочники.ПоказателиОтчетов.СоздатьЭлемент();
		ПоказательОбъект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		ПоказательОбъект.ЧисловойПоказатель=Истина;
		ЗаполнитьЗначенияСвойств(ПоказательОбъект,СтруктураПараметров,,"Ссылка");
		
		Если СтруктураПараметров.Свойство("КоррСчетБД") Тогда
			
			ПоказательОбъект.Предназначение	= Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки;
			ПоказательОбъект.Наименование=ПолучитьНаименованиеПоказателя(ПоказательОбъект);
								
		ИначеЕсли СтруктураПараметров.Свойство("СчетБД") Тогда
			
			ПоказательОбъект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
			ПоказательОбъект.Код			= ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(СокрЛП(ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(""+ПоказательОбъект.ВидИтогаПоСчету+СокрЛП(ПоказательОбъект.СчетБД.Код))),Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода,"ПоказателиОтчетов",ПоказательОбъект.Владелец);
			ПоказательОбъект.Наименование	= ""+ПоказательОбъект.ВидИтогаПоСчету+ПоказательОбъект.СчетБД.Код;
	
		Иначе
			
			ПоказательОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
			
		КонецЕсли;
	
	Иначе
		
		ИзмененПоказатель=Ложь;
		ПоказательОбъект=СтруктураПараметров.Ссылка.ПолучитьОбъект();
		
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров Цикл
			
			Если НЕ ПоказательОбъект[КлючИЗначение.Ключ]=КлючИЗначение.Значение Тогда
				
				ПоказательОбъект[КлючИЗначение.Ключ]=КлючИЗначение.Значение;
				ИзмененПоказатель=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоказательОбъект.Предназначение	= Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки Тогда
			
			ТекстНаименования=ПолучитьНаименованиеПоказателя(ПоказательОбъект);
			
			Если НЕ ПоказательОбъект.Наименование=ТекстНаименования Тогда
				
				ПоказательОбъект.Наименование=ТекстНаименования;
				ИзмененПоказатель=Истина;

			КонецЕсли;		
				
		КонецЕсли;

		Если НЕ ИзмененПоказатель Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СчетБД") Тогда
		
		ПоказательОбъект.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСчета(ПоказательОбъект.Владелец,
						ПоказательОбъект.СчетБД,
						?(СтруктураПараметров.Свойство("КоррсчетБД"),		ПоказательОбъект.КоррСчетБД,Неопределено),
						?(СтруктураПараметров.Свойство("ВидИтогаПоСчету"),	ПоказательОбъект.ВидИтогаПоСчету,Неопределено));
			
	КонецЕсли;
	
	Попытка
		
		ПоказательОбъект.ПолучитьКодПроводки();		
		
		ПоказательОбъект.ОбменДанными.Загрузка=Истина;
		ПоказательОбъект.Записать();
		СтруктураПараметров.Вставить("Ссылка",ПоказательОбъект.Ссылка);
		
	Исключение
		
		СтрокаШаблона = Нстр("ru = 'Не удалось обработать показатель %1: %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ПоказательОбъект.Наименование, ОписаниеОшибки()), Отказ,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецПопытки;
		
КонецПроцедуры // ИзменитьОбъектПоПараметрам()

// Сравнивает значения Реквизит1Вход и Реквизит2Вход. В случае их различия -
// устанавливает параметр ЕстьРазличияИзм в истина. В противном случае -
// оставляет параметр в исходном виде.
Процедура СравнитьРеквизиты(Реквизит1Вход, Реквизит2Вход, ЕстьРазличияИзм)
	Если Реквизит1Вход <> Реквизит2Вход Тогда
		ЕстьРазличияИзм = Истина;
	Иначе
		// Выполняем проверку далее.
	КонецЕсли;
КонецПроцедуры		// СравнитьРеквизиты()

// Формирует и возвращает пустую структуру данных лимитрования показателя.
Функция СформироватьСтруктуруДанныхЛимитированияПоказателя() Экспорт
	
	СправочникБДР="СтатьиДоходовИРасходов";
	СправочникРесурсы="СтатьиДвиженияРесурсов";
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Предназначение",					 Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПустаяСсылка());
	РезультатФункции.Вставить("СтатьяДвиженияДенежныхСредств",	 Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	РезультатФункции.Вставить("СтатьяДоходовИРасходов",			 Справочники[СправочникБДР].ПустаяСсылка());
	РезультатФункции.Вставить("СтатьяДвиженияРесурсов",			 Справочники[СправочникРесурсы].ПустаяСсылка());
	РезультатФункции.Вставить("Показатель",						 Справочники.ПоказателиОтчетов.ПустаяСсылка());
	Возврат РезультатФункции;
КонецФункции		// СформироватьСтруктуруДанныхЛимитированияПоказателя()

// Проверяет правильность заполнения лимитирующих реквизитов, заданных в
// структуре ДанныеЛимитированияПоказателяВход.
Функция ПроверитьЛимитирующиеРеквизитыПоказателя(ДанныеЛимитированияПоказателяВход) Экспорт
	
	СправочникБДР="СтатьиДоходовИРасходов";
	СправочникРесурсы="СтатьиДвиженияРесурсов";
	
	// Инициализация.
	РезультатФункции = Истина;
	Предназначение					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛимитированияПоказателяВход, "Предназначение", Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПустаяСсылка());
	СтатьяДвиженияДенежныхСредств	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛимитированияПоказателяВход, "СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	СтатьяДоходовИРасходов			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛимитированияПоказателяВход, "СтатьяДоходовИРасходов", Справочники[СправочникБДР].ПустаяСсылка());
	СтатьяДвиженияРесурсов			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛимитированияПоказателяВход, "СтатьяДвиженияРесурсов", Справочники[СправочникРесурсы].ПустаяСсылка());
	Показатель						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛимитированияПоказателяВход, "Показатель", Справочники.ПоказателиОтчетов.ПустаяСсылка());
	ПредназначениеБюджетДвиженияДенежныхСредств	 = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	ПредназначениеБюджетДоходовИРасходов		 = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
	ПредназначениеБюджетДвиженияРесурсов		 = (Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
	ЗаполненаСтатьяДвиженияДенежныхСредств	 = ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств);
	ЗаполненаСтатьяДоходовИРасходов			 = ЗначениеЗаполнено(СтатьяДоходовИРасходов);
	ЗаполненаСтатьяДвиженияРесурсов			 = ЗначениеЗаполнено(СтатьяДвиженияРесурсов);
	// Проверка корректности Статьи ДДС.
	Если ЗаполненаСтатьяДвиженияДенежныхСредств Тогда
		ЗаполнениеКорректно = ((ПредназначениеБюджетДвиженияДенежныхСредств) И (НЕ ЗаполненаСтатьяДоходовИРасходов) И (НЕ ЗаполненаСтатьяДвиженияРесурсов));
		Если НЕ ЗаполнениеКорректно Тогда
			ТекстСообщения = НСтр("ru = 'В показателе ""%Показатель%"" неверно заполнены реквизиты по бюджету движения денежных средств'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		Иначе
			// Проверка пройдена успешно. Продолжаем.
		КонецЕсли;
	Иначе
		// Нет статьи ДДС. Пропускаем проверку.
	КонецЕсли;
	// Проверка корректности Статьи БДР.
	Если ЗаполненаСтатьяДоходовИРасходов Тогда
		ЗаполнениеКорректно = ((ПредназначениеБюджетДоходовИРасходов) И (НЕ ЗаполненаСтатьяДвиженияДенежныхСредств) И (НЕ ЗаполненаСтатьяДвиженияРесурсов));
		Если НЕ ЗаполнениеКорректно Тогда
			ТекстСообщения = НСтр("ru = 'В показателе ""%Показатель%"" неверно заполнены реквизиты по бюджету доходов и расходов'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		Иначе
			// Проверка пройдена успешно. Продолжаем.
		КонецЕсли;
	Иначе
		// Нет статьи БДР. Пропускаем проверку.
	КонецЕсли;
	// Проверка корректности Статьи ресурсов.
	Если ЗаполненаСтатьяДвиженияРесурсов Тогда
		ЗаполнениеКорректно = ((ПредназначениеБюджетДвиженияРесурсов) И (НЕ ЗаполненаСтатьяДвиженияДенежныхСредств) И (НЕ ЗаполненаСтатьяДоходовИРасходов));
		Если НЕ ЗаполнениеКорректно Тогда
			ТекстСообщения = НСтр("ru = 'В показателе ""%Показатель%"" неверно заполнены реквизиты по бюджету движения ресурсов'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		Иначе
			// Проверка пройдена успешно. Продолжаем.
		КонецЕсли;
	Иначе
		// Нет статьи ДДС. Пропускаем проверку.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПроверитьЛимитирующиеРеквизитыПоказателя()

#КонецЕсли

