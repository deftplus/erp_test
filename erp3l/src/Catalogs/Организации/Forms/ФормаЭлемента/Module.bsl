#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("ВидОрганизации") Тогда
		ВидОрганизации = Параметры.ЗначенияЗаполнения.ВидОрганизации;
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И НЕ Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ЮридическоеЛицо";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе ВызватьИсключение НСтр("ru = 'Невозможно определить вид организации. Обратитесь к администратору.';
								|en = 'Cannot determine company kind. Please contact the administrator.'");
	КонецЕсли;
	
	ЗаполнитьРеквизитГоловнаяОрганизация();
	ОткрытаФормаВыбораДаты = Ложь;

	УправлениеФормойНаСервере();
	
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ГоловныеОрганизацииОбособленногоПодразделения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	АдресЛоготипа 			= ?(Объект.ФайлЛоготип.Пустая(), 			"", НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор));
	АдресФаксимильнойПечати = ?(Объект.ФайлФаксимильнаяПечать.Пустая(), "", НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор));
	
	БазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	Элементы.ГруппаПраваяСторонаЮрЛицаКоды.Видимость = Не БазоваяВерсия;
	Элементы.ПраваяСторонаИндивидуальногоПредпринимателяЗаголовкиЗначения.Видимость = Не БазоваяВерсия;
	
	УправленческаяОрганизация = Объект.Ссылка = Справочники.Организации.УправленческаяОрганизация;
	Элементы.ВидОрганизации.Видимость = Не УправленческаяОрганизация;
	Если УправленческаяОрганизация Тогда
		Элементы.ВалютаРегламентированногоУчета.Заголовок = НСтр("ru = 'Базовая валюта';
																|en = 'Base currency'");
	КонецЕсли;
	
	Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Организации) Тогда
		Элементы.ФормаСкопировать.Видимость = Не БазоваяВерсия;
	КонецЕсли;
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") И НЕ ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ЭлементСписка = Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОрганизации.СписокВыбора.Удалить(ЭлементСписка);	
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ОтложеннаяИнициализация", Истина);
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ОрганизацииЛокализация.ПриСозданииНаСервереФормаЭлемента(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	ПриСозданииЧтенииНаСервере();
	// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	#Область УХ_Обработчики
	ПриСозданииНаСервереУХ(Отказ, СтандартнаяОбработка);
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ВыбранноеЗначение;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор)
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор)
			
		КонецЕсли;
		
	КонецЕсли;

	ОрганизацииКлиентЛокализация.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#Область УХ_Встраивание
	Если Объект.ЮрФизЛицо.Пустая() Тогда//обход ошибки при незаполненном "ЮрФизЛицо"
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОрганизацииЛокализация.ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если ОткрытаФормаВыбораДаты Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОрганизацииКлиентЛокализация.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОрганизацииЛокализация.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	#Область УХ_Встраивание
	// Проверка заполнения суммы малых закупок.
	Если (Объект.ЗакупкаПоФЗ223) И (НЕ ЗначениеЗаполнено(СуммаМалыхЗакупокУХ)) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Для организации с закупкой по ФЗ-223 требуется указание суммы малой закупки. Запись отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УправлениеФормойНаСервере();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Модифицированность = Истина;
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
			Объект.ФайлЛоготип = СсылкаНаФайл;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор);
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Модифицированность = Истина;
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Объект.ФайлФаксимильнаяПечать = СсылкаНаФайл;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если СтрНайти(ИмяСобытия, "Запись_") > 0 Тогда
		Если ЗначениеЗаполнено(Параметр) И ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("Организация") 
				И (Параметр.Организация = Объект.Ссылка 
					ИЛИ Параметр.Организация = Объект.ГоловнаяОрганизация) Тогда
					ДоступныеРегистры = ДоступныеРегистрыНалоговУчетныхПолитик();
					МассивСтрок = СтрРазделить(ИмяСобытия, "_", Ложь);
					Если МассивСтрок.Количество() > 1 Тогда
						ИмяРегистра = МассивСтрок[1];
						Если ДоступныеРегистры.Найти(ИмяРегистра) <> Неопределено Тогда
							ЗаполнитьОписаниеДействующихПараметров(ИмяРегистра);
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьНастроекНалоговУчетныхПолитик" Тогда
		
		ЗаполнитьОписаниеДействующихПараметров();
		
	КонецЕсли;
	
	ОрганизацииКлиентЛокализация.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
	ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;

	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОрганизацииКлиентЛокализация.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОткрытаФормаВыбораДаты Тогда
		Отказ = Истина;
	КонецЕсли;
	ОрганизацииКлиентЛокализация.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОрганизацииКлиентЛокализация.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОрганизацииКлиентЛокализация.ОкончаниеВводаТекста_Организации(Элемент,
		Текст,
		ДанныеВыбора,
		Параметры,
		СтандартнаяОбработка,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	
	ОрганизацииКлиентЛокализация.ПриИзмененииРеквизита(
		Элемент,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОрганизацииКлиентЛокализация.ОбработкаНавигационнойСсылкиФормы_Организации(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиУчетаНДСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиУчетаНДС" Тогда
		ОрганизацииКлиентЛокализация.ПроверитьЧтоЭтоНеНовыйЭлемент(ЭтотОбъект,
			НСтр("ru = 'Настройки учета НДС';
				|en = 'VAT accounting settings'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиУчетаНДСОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", ЭтотОбъект)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиУчетаНДСОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиУчетаНДС.ФормаЗаписи",
		Новый Структура("Организация", ЭтотОбъект.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент, СтандартнаяОбработка)
	ОрганизацииКлиентЛокализация.Нажатие_Организации(Элемент,
		СтандартнаяОбработка,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОрганизацииКлиентЛокализация.НачалоВыбора_Организации(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
	Если ИмяЭлемента = "НаименованиеСокращенное" Тогда
		НаименованиеСокращенноеПриИзменении(Элементы.НаименованиеСокращенное);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
		
	ОрганизацииЛокализация.ПриОкончанииИзмененияРеквизита(ИмяЭлемента, ЭтаФорма, ПараметрыОбработки);
	Если ЗначениеЗаполнено(ПараметрыОбработки) 
		И ПараметрыОбработки.Свойство("ИмяПроцедуры")
		И ПараметрыОбработки.ИмяПроцедуры = "УправлениеФормойНаСервере" Тогда
		
		УправлениеФормойНаСервере();
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	ИзменитьВидОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

// Параметры:
// 	Элемент - ПолеФормы -
// 	ДанныеВыбора - Произвольный - 
// 	СтандартнаяОбработка - Булево - 
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Вид = ПредопределенноеЗначение(
			"Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации") Тогда
			ПараметрыОткрытия.Вставить("РазрешитьВводАдресаВСвободнойФорме", Ложь);
			ПараметрыОткрытия.Вставить("Страна", Объект.СтранаРегистрации);
		КонецЕсли;
		Если (ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации")
			Или ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации")
			Или ДанныеСтроки.Вид = ПредопределенноеЗначение(
			"Справочник.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения")) Тогда
			ПараметрыОткрытия.Вставить("Страна", Объект.СтранаРегистрации);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

// Параметры:
// 	Элемент - ПолеФормы -
// 	СтандартнаяОбработка - Булево - 
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы -
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры


// Параметры:
// 	Элемент - ПолеФормы -
// 	ВыбранноеЗначение - Произвольный -
// 	СтандартнаяОбработка - Булево -
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи") Тогда
		
		// Отключение отображения какого-то вида КИ пока в БСП не поддерживается, поэтому пока реализуем это самостоятельно.
		НаименованиеВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации,
			"Наименование");
		
		Для Каждого ГруппаЭлементаКонтактнойИнформации Из ЭтотОбъект.Элементы.ГруппаКонтактнаяИнформация.ПодчиненныеЭлементы Цикл
			Если СтрСравнить(ГруппаЭлементаКонтактнойИнформации.Заголовок, НаименованиеВида) = 0 Тогда
				ГруппаЭлементаКонтактнойИнформации.Видимость = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если Найти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".';
													|en = 'Cannot Be in the prefix organization use character ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПараметрыОрганизацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения
		И ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		И Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		
		КонтактнаяИнформацияПриСменеСтраницы();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОрганизацииКлиентЛокализация.ПроверитьИНН(Текст, Объект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#Область УниверсальныеОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	ОрганизацииКлиентЛокализация.ВыполнитьКомандуЛокализации(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ОрганизацииЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	Если ЗначениеЗаполнено(ПараметрыОбработки) И ПараметрыОбработки.Свойство("ИмяПроцедуры") Тогда
		Если ПараметрыОбработки.ИмяПроцедуры = "КонтактнаяИнформацияПриСменеСтраницы" Тогда
			КонтактнаяИнформацияПриСменеСтраницы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура ОткрытьУчетнаяПолитикаФинансовогоУчетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьУчетнаяПолитикаФинансовогоУчета" Тогда
		ОрганизацииКлиентЛокализация.ПроверитьЧтоЭтоНеНовыйЭлемент(ЭтотОбъект,
			НСтр("ru = 'Учетная политика финансового учета';
				|en = 'Financial accounting policy'"),
			Новый ОписаниеОповещения("ОткрытьУчетнаяПолитикаФинансовогоУчетаОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", ЭтотОбъект)));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчетнаяПолитикаФинансовогоУчетаОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаФинансовогоУчета.ФормаЗаписи",
		Новый Структура("Организация", ЭтотОбъект.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъект(Команда)
	ПараметрыЗаписи = Новый Структура("НеЗакрыватьФорму", Истина);
	ЭтотОбъект.Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?';
							|en = 'To select an image, save the object. Save it?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеЛоготипаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеЛоготипаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()
    
    УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлЛоготип);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутствует изображение для редактирования';
								|en = 'No image for editing'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготипа = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеЛоготипа(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимиле(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?';
							|en = 'To select an image, save the object. Save it?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимилеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимилеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеФаксимилеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеФрагмент()
    
    Перем ИдентификаторФайла;
    
    УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимиле(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлФаксимильнаяПечать);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутствует изображение для редактирования';
								|en = 'No image for editing'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимиле(Команда)
	
	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресФаксимильнойПечати = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеФаксимиле(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры // ФаксимилеИзПрисоединенныхФайлов()

&НаКлиенте
Процедура ПомощникРаботыФаксимильнойПечати(Команда)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Как создать факсимильную подпись и печать?';
																				|en = 'How to create facsimile signature and stamp?'"));
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Организации", "НапечататьПомощникРаботыФаксимильнойПечати", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплату(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к предварительному просмотру счета на оплату доступен только после записи данных.
		|Данные будут записаны.';
		|en = 'Data is not recorded yet.
		|You can preview the commercial invoice only after the data is recorded.
		|Data will be recorded.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПредварительныйПросмотрСчетаНаОплатуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
		
	КонецЕсли;
	
	ПредварительныйПросмотрСчетаНаОплатуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЭлементЗаписан = Записать();
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
    ПредварительныйПросмотрСчетаНаОплатуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуФрагмент()
    
    Перем ПараметрКоманды, СтруктураДополнительныхПараметров;
    
    ПараметрКоманды = Новый Массив;
    ПараметрКоманды.Добавить(Объект.Ссылка);
    
    СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Предварительный просмотр печатной формы ""Счет на оплату"".';
																				|en = 'Preview of ""Commercial invoice"" print form.'"));
    УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьСчетовНаОплату", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыФормыРазблокировки = Новый Структура;
		ПараметрыФормыРазблокировки.Вставить("ОбособленноеПодразделение", Объект.ОбособленноеПодразделение);

		ОткрытьФорму("Справочник.Организации.Форма.РазблокированиеРеквизитов", ПараметрыФормыРазблокировки,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГоловнаяОрганизация);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГоловнаяОрганизация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбособленноеПодразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФИОФизическогоЛица(ИндивидуальныйПредприниматель)
	
	Возврат ФизическиеЛицаУТ.ФамилияИмяОтчество(ИндивидуальныйПредприниматель);
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма, ?(ЗначениеЗаполнено(ФИОИндивидуальногоПредпринимателя),ФИОИндивидуальногоПредпринимателя,СтруктураНаименования.Наименование));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ООО';
																	|en = 'LLC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Общество с ограниченной ответственностью';
															|en = 'Limited liability company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ООО';
														|en = 'LLC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ОАО';
																			|en = 'JSC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Открытое акционерное общество';
															|en = 'Open Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ОАО';
														|en = 'JSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ЗАО';
																			|en = 'CJSC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Закрытое акционерное общество';
															|en = 'Closed Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ЗАО';
														|en = 'CJSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ИП';
																			|en = 'IE'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Индивидуальный предприниматель';
															|en = 'Individual entrepreneur'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ИП';
														|en = 'IE'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Общество с ограниченной ответственностью';
																			|en = 'Limited liability company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Общество с ограниченной ответственностью';
															|en = 'Limited liability company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ООО';
														|en = 'LLC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Открытое акционерное общество';
																			|en = 'Open Joint-Stock Company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Открытое акционерное общество';
															|en = 'Open Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ОАО';
														|en = 'JSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Закрытое акционерное общество';
																			|en = 'Closed Joint-Stock Company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Закрытое акционерное общество';
															|en = 'Closed Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ЗАО';
														|en = 'CJSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Индивидуальный предприниматель';
																			|en = 'Individual entrepreneur'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Индивидуальный предприниматель';
															|en = 'Individual entrepreneur'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ИП';
														|en = 'IE'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаВидОрганизации",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Стройснаб ООО';
													|en = 'for example, LIGHT LLC'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ООО ""Стройснаб""';
																|en = 'for example, LIGHT LLC'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Общество с ограниченной ответственностью Стройснаб';
															|en = 'for example, LIGHT Limited Liability Company'");
		Элементы.ВалютаРегламентированногоУчета.Видимость = Истина;
		
	ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Филиал ТД (Тамбов)';
													|en = 'for example, trading house Branch office (Tambov)'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ТД Филиал (Тамбов)';
																|en = 'for example, trading house Branch office (Tambov)'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Торговый дом ""Комплексный"" - обособленное подразделение';
															|en = 'for example, All-Inclusive Shopping Center - branch office'");
		Элементы.ВалютаРегламентированногоУчета.Видимость = Ложь;
		
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Иванова Наталья Игнатьевна';
													|en = 'for example, Jane Olsen'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ИП Иванова Наталья Игнатьевна';
																|en = 'for example, IE Jane Olsen'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Индивидуальный предприниматель Иванова Наталья Игнатьевна';
															|en = 'for example, Individual entrepreneur Olsen'");
		Элементы.ВалютаРегламентированногоУчета.Видимость = Истина;
		
	КонецЕсли;
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение" И
																					ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")));
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ГруппаИндивидуальныйПредприниматель",
				"Видимость", 
				ВидОрганизации = "ИндивидуальныйПредприниматель");
		

	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Заголовок", НСтр("ru = 'Учетная политика';
																						|en = 'Accounting policy'"));
	КонецЕсли;
	
	ОрганизацииЛокализация.УправлениеФормойНаСервере(ЭтаФорма);
	
	#Область УХ_Обработчики
	УправлениеФормойУХ(ЭтаФорма);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидОрганизацииНаСервере()
	
	Объект.ВалютаРегламентированногоУчета = Справочники.Валюты.ПустаяСсылка();
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		Объект.ОбособленноеПодразделение = Ложь;

		Объект.ГоловнаяОрганизация = Объект.Ссылка;
		Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
		Объект.ЦифровойИндексОбособленногоПодразделения = "";
		Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
		Объект.ОбособленноеПодразделение = Ложь;

		Объект.ГоловнаяОрганизация = Объект.Ссылка;
		Объект.ЦифровойИндексОбособленногоПодразделения = "";
		Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;

	ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		Объект.ОбособленноеПодразделение = Истина;
		Объект.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		ВызватьИсключение Нстр("ru = 'Произошла ошибка при изменении типа организации. Обратитесь к администратору.';
								|en = 'An error occurred when changing the company type. Please contact the administrator.'");
	КонецЕсли;
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("ВидОрганизации", Неопределено);
	Модифицированность = Истина;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимиле = Ложь)
	
	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимиле = ЭтоРаботаСФаксимиле;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()
	
	ПараметрыВыбораКартинки = Новый Структура;
	ПараметрыВыбораКартинки.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыбораКартинки.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыВыбораКартинки.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыВыбораКартинки, ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаОбъекта)
		И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(ЭтаФорма.Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутствует изображение для просмотра';
								|en = 'No preview image'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?';
							|en = 'To select an image, save the object. Save it?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла, ИмяРеквизитаОбъекта;
    
    Если РаботаСЛоготипом Тогда
        
        ИмяРеквизитаОбъекта = "ФайлЛоготип";
        
    ИначеЕсли РаботаСФаксимиле Тогда
        
        ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
        
        ПросмотретьПрисоединенныйФайл();
        
    ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        ИдентификаторФайла = Новый УникальныйИдентификатор;
        
        РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
        
    КонецЕсли;

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Заполнение описания параметров организации

&НаСервере
Функция ГоловныеОрганизацииОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитГоловнаяОрганизация()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				И Организации.ОбособленноеПодразделение
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	ДанныеГоловнаяОрганизация = Запрос.Выполнить().Выбрать();
	Пока ДанныеГоловнаяОрганизация.Следующий() Цикл
		ГоловнаяОрганизация = ДанныеГоловнаяОрганизация.ГоловнаяОрганизация;	
	КонецЦикла;
	
КонецПроцедуры


// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	ЗаполнитьОписаниеДействующихПараметров();
	ОрганизацииЛокализация.ПриСозданииЧтенииНаСервере(ЭтаФорма);
КонецПроцедуры

// Конец  Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП

&НаСервере
Процедура ЗаполнитьОписаниеДействующихПараметров(ИмяРегистра = "")
	СоответствиеЭлементов = Справочники.Организации.СоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик();
	НастройкиНалоговУчетныхПолитик.УправлениеВидимостьюЭлементовУчетныхПолитик(ЭтотОбъект, СоответствиеЭлементов, Объект.Ссылка);
	НастройкиНалоговУчетныхПолитик.ЗаполнитьОписаниеДействующихПараметров(ЭтотОбъект, Объект.Ссылка, ИмяРегистра);
	ОрганизацииЛокализация.УчетнаяПолитикаПриИзмененииСервер(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Функция ДоступныеРегистрыНалоговУчетныхПолитик()
	МассивРегистров = Новый Массив();
	МассивРегистров.Добавить("УчетнаяПолитикаФинансовогоУчета");
	МассивРегистров.Добавить("НастройкиУчетаНДС");
	ОрганизацииКлиентЛокализация.ДоступныеРегистрыНалоговУчетныхПолитик(МассивРегистров);
	Возврат МассивРегистров;
КонецФункции

#КонецОбласти

#Область УХ_Обработчики

#Область УХ_ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервереУХ(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() И Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		Объект.ИспользоватьВРегламентированномУчете = Истина;//по умолчанию считаем что создавалось функционалом УП
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);		
		ИзменитьВидОрганизацииНаСервере();
		
	КонецЕсли;
	 
	ОбщегоНазначенияСерверУХ.ПоддержкаМультиязычностиУправлениеФормой(Элементы);
	УстановитьЗаголовокГруппыПараметрыПоУмолчаниюУХ(ЭтаФорма);
	
	Если Константы.ИспользоватьПрефиксыУХ.Получить() Тогда
		
		Элементы.ПрефиксУХ.Видимость = Истина;		
		Элементы.Префикс.Видимость = Ложь;
				
	КонецЕсли;
	
	ВидДеятельностиИКУХ = РасчетыПоКорпоративнымНалогам.ПолучитьВидДеятельностиИК(Объект);
	// Отображение суммы малых закупок.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СуммаМалыхЗакупокУХ = РегистрыСведений.МалыеЗакупки.ПолучитьСуммуМалыхЗакупок(Объект.Ссылка);
	Иначе
		СуммаМалыхЗакупокУХ = 0;
	КонецЕсли;
	
	УправлениеФормой_РеквизитыУП(ЭтотОбъект);//только ЕРПУХ - скрыть ВидОрганизации по условию

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиУХ(ПараметрыЗаписи)
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойУХ(Форма) Экспорт
	
	ОрганизацииКлиентСерверУХ.ЗаполнитьТипОрганизацииПоРеквизитам(Форма, "ВидОрганизации");
	ОрганизацииКлиентСерверУХ.УправлениеФормой_ТипОрганизации(Форма.Объект);
	
	ОрганизацииКлиентСерверУХ.УправлениеФормой_РеквизитыУХ(Форма);
	УправлениеФормой_РеквизитыУП(Форма);
	ОрганизацииКлиентСерверУХ.УправлениеФормой_УправлениеАктивами(Форма);
	ОрганизацииКлиентСерверУХ.УправлениеФормой_КИК(Форма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой_РеквизитыУП(Форма) Экспорт

	Объект = Форма.Объект;
    Элементы = Форма.Элементы;

	ЭтоРезидент = Объект.ИспользоватьВРегламентированномУчете Или Объект.ИностранныйНалоговыйРезидент;
	
	Элементы.ЛокализацияГруппаРегистрационныеДанные.Видимость = ЭтоРезидент;
	Элементы.ГруппаСтраницОсновныхКодов.Видимость = ЭтоРезидент;
	
	Элементы.ГруппаКонтактнаяИнформация.Видимость = ЭтоРезидент;
	Элементы.ГруппаУчетнаяПолитикаИДругиеНастройки.Видимость = ЭтоРезидент;
	Элементы.ЛокализацияГруппаЗарплатаИКадры.Видимость = ЭтоРезидент;
	Элементы.НастройкаЛоготипаДляПечати.Видимость = ЭтоРезидент;
			
	#Область УХ_Встраивание
	Если Форма.Элементы.Найти("ВидОрганизации") <> Неопределено Тогда
		ЭтоРегл = Форма.Объект.ИспользоватьВРегламентированномУчете Или Форма.Объект.ИностранныйНалоговыйРезидент;
		Форма.Элементы.ВидОрганизации.Видимость = ЭтоРегл;//не актуально для ЦФО и подобных
	КонецЕсли;
	#КонецОбласти
		
КонецПроцедуры

#КонецОбласти

#Область УХ_ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МодельУчетаМСФОУХПриИзменении(Элемент)
			
	УправлениеФормойУХ(ЭтаФорма);
	УстановитьЗаголовокГруппыПараметрыПоУмолчаниюУХ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОрганизацииПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура РегламентированнаяОрганизацияУХПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлиминирующаяОрганизацияУХПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовокГруппыПараметрыПоУмолчаниюУХ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УставныйКапиталПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.УставныйКапитал.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВалютаНоминала.Пустая() Тогда	
		ТекущаяСтрока.ВалютаНоминала = Объект.ФункциональнаяВалюта;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДивидендыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Дивиденды.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Валюта = Объект.ФункциональнаяВалюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУставногоКапиталаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйНалоговыйРезидентУХПриИзменении(Элемент)
	
	Если Объект.ИностранныйНалоговыйРезидент И Объект.ИспользоватьВРегламентированномУчете Тогда
		Объект.ИспользоватьВРегламентированномУчете = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаПоФЗ223ПриИзменении(Элемент)
	ОрганизацииКлиентСерверУХ.УправлениеФормой_РеквизитыУХ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТипОрганизацииУХПриИзменении(Элемент)
	
	ОрганизацииКлиентСерверУХ.ЗаполнитьРеквизитыПоТипуОрганизации(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовокГруппыПараметрыПоУмолчаниюУХ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппыПараметрыПоУмолчаниюУХ(Форма)

	Объект = Форма.Объект;	
	
	Если Объект.ЭлиминирующаяОрганизация Тогда		
		ПредставлениеПараметровУХ = НСтр("ru = 'Параметры по умолчанию: Элиминирующая организация'");
	Иначе
		ПредставлениеПараметровУХ = НСтр("ru = 'Параметры по умолчанию'");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ПараметрыПоУмолчаниюУХ", ПредставлениеПараметровУХ);
	
	ПараметрыУПМСФО = ПараметрыУПМСФО(Объект.Ссылка);
	
	Для каждого ЗначениеПоля Из ПараметрыУПМСФО Цикл
		
		ПолеУП = Форма.Элементы.Найти(ЗначениеПоля.Ключ);
		
		Если ЗначениеПоля.Ключ = "УчетныеПолитикиМСФО" Тогда
			Форма.УчетныеПолитикиМСФО = Новый ФиксированныйМассив(ЗначениеПоля.Значение);
			Продолжить;
		ИначеЕсли ПолеУП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПолеУП) = Тип("ГруппаФормы") Тогда
			ПолеУП.Заголовок = ЗначениеПоля.Значение;
			ПолеУП.Видимость = Истина;
		Иначе	
		    Форма[ЗначениеПоля.Ключ] = ЗначениеПоля.Значение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыУПМСФО(Организация)
	
	УПМСФО = НСтр("ru = 'Учетные политики МСФО для организации не заданы'"); 

	ИменаУП = "УчетнаяПолитика, ПрименяетсяС, Сценарий, 
				|УчетнаяПолитика.ПланСчетовУчета КАК ПланСчетовУчета,
				|УчетнаяПолитика.ВалютаУчета КАК ВалютаУчета,
				|УчетнаяПолитика.ВалютаУчетаДоп КАК ВалютаУчетаДоп,
				|УчетнаяПолитика.ШаблонТрансляции КАК ШаблонТрансляции,
				|ВЫБОР
				|	КОГДА УчетнаяПолитика.ШаблонТрансляции.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии)
				|		ТОГДА ЗНАЧЕНИЕ(Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки)
				|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МоделиУчетаМСФО.ТрансформационныйУчетКорректировки)
				|	КОНЕЦ КАК МодельУчетаМСФО,
				|УчетнаяПолитика.СпособТрансляции КАК СпособТрансляции";
	
	Таб = Документы.УчетнаяПолитикаМСФО.ЗначенияУП(ИменаУП, Организация, ТекущаяДата());
	Если Таб.Количество() = 0 Или Не ЗначениеЗаполнено(Таб[0].УчетнаяПолитика) Тогда
		ГруппаУП1 = НСтр("ru = 'Учетная политика МСФО - не указана учетная политика'");
		УПМСФО1 = НСтр("ru = 'Выбрать учетную политику для организации'");
		Возврат Новый Структура("ГруппаУП1, УПМСФО1", ГруппаУП1, Новый ФорматированнаяСтрока(УПМСФО1,,,, "УстановитьУП"));
	КонецЕсли;
	
	УчетныеПолитикиМСФО = Новый Массив;
	Результат = Новый Соответствие;
	Для каждого ТекущаяУП Из Таб Цикл
		
		НомерУП = Таб.Индекс(ТекущаяУП) + 1;
		
		ПрименяетсяС = Формат(ТекущаяУП.ПрименяетсяС, "ДЛФ=D");
		
		ГруппаУП = НСтр("ru = 'Учетная политика <%1> действует с %2 (сценарий <%3>)'");
		
		УПМСФО = Новый Массив;
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'Учетная политика: '"), 			ТекущаяУП.УчетнаяПолитика);
		УПМСФО.Добавить(" (");
		УПМСФО.Добавить(Новый ФорматированнаяСтрока("Установить новую", ,  , , "УстановитьУП"));
		УПМСФО.Добавить(", ");
		УПМСФО.Добавить(Новый ФорматированнаяСтрока("История", ,  , , "ИсторияУП"));
		УПМСФО.Добавить(")");
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'План счетов учета: '"), 			ТекущаяУП.ПланСчетовУчета);
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'Валюта учета: '"), 				ТекущаяУП.ВалютаУчета);
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'Дополнительная валюта учета: '"),	ТекущаяУП.ВалютаУчетаДоп);
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'Шаблон трансляции: '"), 			ТекущаяУП.ШаблонТрансляции);
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'Модель учета: '"), 				ТекущаяУП.МодельУчетаМСФО, Ложь);
		ДобавитьФорматСсылки(УПМСФО, НСтр("ru = 'Способ трансляции: '"),			ТекущаяУП.СпособТрансляции, Ложь);
	
		Результат.Вставить("ГруппаУП" + НомерУП, СтрШаблон(ГруппаУП, ТекущаяУП.УчетнаяПолитика, ПрименяетсяС, ТекущаяУП.Сценарий));
		Результат.Вставить("УПМСФО" + НомерУП, Новый ФорматированнаяСтрока(УПМСФО));
		
		ПараметрыУП = Новый Структура("Сценарий, УчетнаяПолитика", ТекущаяУП.Сценарий, ТекущаяУП.УчетнаяПолитика);
		УчетныеПолитикиМСФО.Добавить(ПараметрыУП);
		
	КонецЦикла;
	
	Результат.Вставить("УчетныеПолитикиМСФО", УчетныеПолитикиМСФО);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьФорматСсылки(УПМСФО, ЗаголовокСсылки = Неопределено, ЗначениеСсылки = Неопределено, 
							ДобавитьСсылку = Истина, ПереносСтроки = Истина)

	Если ЗаголовокСсылки <> Неопределено Тогда
		УПМСФО.Добавить(?(ПереносСтроки И УПМСФО.Количество(), Символы.ПС, "") + ЗаголовокСсылки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСсылки) Тогда
		СсылкаФ = ?(ДобавитьСсылку, ПолучитьНавигационнуюСсылку(ЗначениеСсылки), Неопределено);
		УПМСФО.Добавить(Новый ФорматированнаяСтрока(Строка(ЗначениеСсылки), ,  , , СсылкаФ));
	ИначеЕсли ЗаголовокСсылки <> Неопределено Тогда
		УПМСФО.Добавить(НСтр("ru = '<Не установлено>'"));
	КонецЕсли;
	
	Возврат УПМСФО;

КонецФункции

&НаКлиенте
Процедура УПМСФО1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаСсылкиУП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УПМСФО2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаСсылкиУП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСсылкиУП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "e1cib/data/") Тогда
		Возврат;
	КонецЕсли; 
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УстановитьУП" Тогда
		
		СтандартнаяОбработка = Ложь;
		НомерУП = Число(Сред(Элемент.Имя, СтрДлина(Элемент.Имя)));
		Если УчетныеПолитикиМСФО = Неопределено Тогда
			ПараметрыУП = Новый Структура("Сценарий, УчетнаяПолитика", 
					ПредопределенноеЗначение("Справочник.Сценарии.Факт"));
		Иначе	
			ПараметрыУП = УчетныеПолитикиМСФО.Получить(НомерУП-1); 
		КонецЕсли;
		
		ЗначенияЗаполненияУП = Новый Структура("Сценарий,Период,Организация,УчетнаяПолитика",
						ПараметрыУП.Сценарий, ТекущаяДата(), Объект.Ссылка, ПараметрыУП.УчетнаяПолитика);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполненияУП);
		ОткрытьФорму("РегистрСведений.УчетныеПолитикиМСФО.ФормаЗаписи", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИсторияУП" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура("Организация", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.УчетныеПолитикиМСФО.ФормаСписка", Новый Структура("Отбор", Отбор));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

#КонецОбласти

#Область УХ_ТолькоДляЕРП

&НаКлиенте
Процедура УправлениеФормой(ЭтаФорма = Неопределено)
	
	УправлениеФормойНаСервере();//вызовет УправлениеФормойУХ
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОрганизации()
	ИзменитьВидОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИностраннаяСтруктураБезОбразованияЮрЛицаПриИзменении(Элемент)
	УправлениеФормойУХ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АудитПриИзменении(Элемент)
	УправлениеФормойУХ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиИКПриИзменении(Элемент)
	Объект.ЭтоБанк 				= (ВидДеятельностиИКУХ = 1);
	Объект.ЭтоСтраховаяКомпания	= (ВидДеятельностиИКУХ = 2);
	Объект.ЭтоНКО 					= (ВидДеятельностиИКУХ = 3);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
