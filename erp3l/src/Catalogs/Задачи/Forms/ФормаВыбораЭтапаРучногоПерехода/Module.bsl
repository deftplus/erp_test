// Управляет доступностью элементов формы.
&НаСервере
Процедура УправлениеДоступностью()
	РазрешеноЗавершатьЗадачи = Справочники.Задачи.РазрешеноЗавершатьЗадачи(СписокЗадач, ТекПользователь);
	ЗаполненЭтапПерехода = ЗначениеЗаполнено(ЭтапРучногоПерехода);
	Элементы.ВыбратьЭтап.Доступность = РазрешеноЗавершатьЗадачи И ЗаполненЭтапПерехода;
	Элементы.Комментарий.Доступность = РазрешеноЗавершатьЗадачи И ЗаполненЭтапПерехода;
КонецПроцедуры

// Серверная обертка команды ВыполнитьЗадачи. Возвращает успешность выполнения операции.
&НаСервере
Функция ВыполнитьЗадачи_Сервер(ВыбранныйЭтап, КомментарийВход = "")
	РезультатФункции = Ложь;
	НачатьТранзакцию();
	Попытка
		Для Каждого ТекСписокЗадач Из СписокЗадач Цикл
			МодульРегламентныхЗаданийУХ.ВыполнитьЗадачуРучногоПерехода(ТекСписокЗадач.Значение, ВыбранныйЭтап, КомментарийВход, ТекПользователь);
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время выполнения задач возникли ошибки: %ОписаниеОшибки%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	РезультатФункции = Истина;
	Возврат РезультатФункции;
КонецФункции

// Считывает текущий этап из базы и записывает его в соответственное поле формы.
&НаСервере
Процедура УстановитьТекущийЭтап()
	СтруктураСогласованияСтроки = МодульСогласованияДокументовУХ.ПолучитьСтруктуруСогласованияСтроки(СписокЗадач, ТекПользователь);
	ЭтапРучногоПерехода = СтруктураСогласованияСтроки.ЭтапПроцесса;
	ДокументПроцесса = СтруктураСогласованияСтроки.ДокументПроцесса;
КонецПроцедуры

// Заполняет список этапов перехода для выбора пользователя.
&НаСервере
Процедура ЗаполнитьСписокЭтапов()
	СписокЭтаповПерехода.Очистить();
	Если ЗначениеЗаполнено(ЭтапРучногоПерехода) Тогда
		СписокЭтаповРезультат = МодульСогласованияДокументовУХ.ПолучитьЭтапыВыбораРучногоПерехода(ЭтапРучногоПерехода);
		СписокЭтаповПерехода = СписокЭтаповРезультат;
	Иначе
		// Нет этапа ручного перехода. Невозможно получить этапы для выбора.
	КонецЕсли;
КонецПроцедуры

// Выполняет чтение из базы необходимой информации и записывает её в поля формы.
&НаСервере
Процедура СчитатьДанныеИзБД()
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	УстановитьТекущийЭтап();
	ЗаполнитьСписокЭтапов();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("СписокЗадач", СписокЗадач);
	ИдентификаторЭлемента = "";
	СчитатьДанныеИзБД();    	
	Параметры.Свойство("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Если ЗначениеЗаполнено(ИдентификаторЭлемента) Тогда
		УникальныйИдентификаторЭтапа = Новый УникальныйИдентификатор(ИдентификаторЭлемента);
		СсылкаНаЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьСсылку(УникальныйИдентификаторЭтапа);
	Иначе
		// Идентификатор не передан.
	КонецЕсли;
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭтап(Команда)
	ТекДанные = Элементы.СписокЭтаповПерехода.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ВыбранныйЭтап = ТекДанные.Значение;
		Если ВыполнитьЗадачи_Сервер(ВыбранныйЭтап, Комментарий) Тогда
			Оповестить("ОбновитьМоиЗадачиИОповещения");
			Оповестить("СостояниеЗаявкиПриИзменении");
			ЭтаФорма.Закрыть();
		Иначе
			УправлениеДоступностью();			// Не удалось завершить задачи. Убедимся, что эта операция всё ещё доступна.
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать этап для дальнейшего перехода'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	СчитатьДанныеИзБД();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Спозиционируемся на переданном этапе.
	Если ЗначениеЗаполнено(СсылкаНаЭтап) Тогда
		ЭлементЭтапа = СписокЭтаповПерехода.НайтиПоЗначению(СсылкаНаЭтап);
		Если ЭлементЭтапа <> Неопределено Тогда
			ИндексЭлемента = СписокЭтаповПерехода.Индекс(ЭлементЭтапа);
			Элементы.СписокЭтаповПерехода.ТекущаяСтрока = ИндексЭлемента;
		Иначе
			// Такой этап в списке не найден. Оставляем позиционирование прежним.
		КонецЕсли;
	Иначе
		// Не удалось получить этап.
	КонецЕсли;
КонецПроцедуры
