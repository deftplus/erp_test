// Возвращает таблицу параметров задач в приске СписокЗадачВход
Функция ПолучитьТаблицуПараметровЗадач(СписокЗадачВход) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессов.ВидДействия,
		|	ОтложеннаяОбработкаЭтаповПроцессов.Задача,
		|	ОтложеннаяОбработкаЭтаповПроцессов.ВремяНачалаЗадания,
		|	ОтложеннаяОбработкаЭтаповПроцессов.ВремяЗавершенияЗадания,
		|	ОтложеннаяОбработкаЭтаповПроцессов.Выполнено,
		|	ОтложеннаяОбработкаЭтаповПроцессов.Ответственный,
		|	ОтложеннаяОбработкаЭтаповПроцессов.ЭтапПроцесса,
		|	ОтложеннаяОбработкаЭтаповПроцессов.Задача.СвязанныйОбъект КАК СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ОтложеннаяОбработкаЭтаповПроцессов
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессов.Задача В(&Задача)";
	Запрос.УстановитьПараметр("Задача", СписокЗадачВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Определяет выполнена ли задача в строке таблицы параметров задачи 
// СтрокаТаблицыПараметровВход;
Функция ЗадачаВСтрокеВыполнена(СтрокаТаблицыПараметровВход)
	РезультатФункции = (СтрокаТаблицыПараметровВход.Выполнено) ИЛИ (ЗначениеЗаполнено(СтрокаТаблицыПараметровВход.ВремяЗавершенияЗадания));
	Возврат РезультатФункции;
КонецФункции		// ЗадачаВСтрокеВыполнена

// Определяет, все ли переданные задачи в СписокЗадачВход не выполнены.
Функция ЗадачиНеВыполнены(СписокЗадачВход) Экспорт
	РезультатФункции = Истина;
	ТаблицаПараметров = ПолучитьТаблицуПараметровЗадач(СписокЗадачВход);
	Если ТаблицаПараметров.Количество() = 0 Тогда
		РезультатФункции = Ложь;
	Иначе	
		Для Каждого ТекТаблицаПараметров Из ТаблицаПараметров Цикл
			ЗадачаВыполнена = ЗадачаВСтрокеВыполнена(ТекТаблицаПараметров);
			Если ЗадачаВыполнена Тогда
				РезультатФункции = Ложь;
			Иначе
				// Условия выполнены. Продолжаем поиск.
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЗадачиНеВыполнены

// Определяет, разрешено ли пользователю ПользовательВход завершать
// задачи в списке СписокЗадачВход.
Функция РазрешеноЗавершатьЗадачи(СписокЗадачВход, ПользовательВход) Экспорт
	РезультатФункции = Истина;
	ТаблицаПараметров = ПолучитьТаблицуПараметровЗадач(СписокЗадачВход);
	ЕстьТекущийПользователь = Ложь;
	Для Каждого ТекТаблицаПараметров Из ТаблицаПараметров Цикл
		ЗадачаВыполнена = ЗадачаВСтрокеВыполнена(ТекТаблицаПараметров);
		Если ЗадачаВыполнена Тогда
			РезультатФункции = Ложь;
		Иначе
			// Условия выполнены. Продолжаем поиск.
		КонецЕсли;
		Если ТекТаблицаПараметров.Ответственный = ПользовательВход Тогда
			// Пользователь найден.
			ЕстьТекущийПользователь = Истина;
		Иначе
			// Пользователь не найден, проверим заместителей.
			СписокЗамещаемых = Новый СписокЗначений;
			МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(ПользовательВход, СписокЗамещаемых);
			ОтветственныеЗамещаемыеТекущегоПользователя = (СписокЗамещаемых.НайтиПоЗначению(ТекТаблицаПараметров.Ответственный) <> Неопределено);
			Если ОтветственныеЗамещаемыеТекущегоПользователя Тогда
				ЕстьТекущийПользователь = Истина;
			Иначе
				// Данный пользователь не совпадает. Выполняем далее.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьТекущийПользователь Тогда
		РезультатФункции = Ложь;
	Иначе
		// Текущий пользователь есть в списке ответственных. Не изменяем результат.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РазрешеноЗавершатьЗадачи

// Возвращает массив, содержащий все связанные объекты по списку задач СписокЗадачВход.
Функция ПолучитьМассивСвязанныхОбъектовЗадач(СписокЗадачВход) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Задачи.СвязанныйОбъект
	|ИЗ
	|	Справочник.Задачи КАК Задачи
	|ГДЕ
	|	Задачи.Ссылка В(&Задачи)
	|	И Задачи.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Задачи", СписокЗадачВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("СвязанныйОбъект");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивСвязанныхОбъектовЗадач

// Возвращает массив задач текущего пользователя по объекту согласования СсылкаВход.
Функция ПолучитьЗадачиПользователяПоОбъекту(СсылкаВход) Экспорт
	РезультатФункции = Новый Массив;
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	СписокЗамещаемых = Новый СписокЗначений;
	МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(ТекПользователь, СписокЗамещаемых);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних(
	|			,
	|			Выполнено = ЛОЖЬ
	|				И Ответственный В (&СписокЗамещаемых)
	|				И ДокументПроцесса.КлючевойОбъектПроцесса В (&КлючевойОбъект)) КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних(
	|			,
	|			Выполнено = ЛОЖЬ
	|				И Ответственный = &ТекущийПользователь
	|				И ДокументПроцесса.КлючевойОбъектПроцесса В (&КлючевойОбъект)) КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних";
	Запрос.УстановитьПараметр("КлючевойОбъект", СсылкаВход);
	Запрос.УстановитьПараметр("СписокЗамещаемых", СписокЗамещаемых);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("Задача");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьЗадачиПользователяПоОбъекту

// Возвращает массив задач, привязанных к объекту СсылкаВход.
Функция ПолучитьВсеЗадачиПоОбъекту(СсылкаВход) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка,
		|	Задачи.СвязанныйОбъект КАК СвязанныйОбъект
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	НЕ Задачи.ПометкаУдаления
		|	И Задачи.СвязанныйОбъект = &СвязанныйОбъект";
	Запрос.УстановитьПараметр("СвязанныйОбъект", СсылкаВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("Ссылка");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьВсеЗадачиПоОбъекту
