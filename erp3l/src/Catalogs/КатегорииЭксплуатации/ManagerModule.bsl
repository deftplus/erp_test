
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив из Строка - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ИмущественныйУчет");
	Результат.Добавить("ИнвентарныйУчет");
	Результат.Добавить("УчетПоФизЛицам");
	Результат.Добавить("СрокЭксплуатации");
	Результат.Добавить("УчитыватьВВидеГрупповогоОС");
	Результат.Добавить("СпособПогашенияСтоимостиБУ");
	Результат.Добавить("СпособПогашенияСтоимостиНУ");

	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ

#Область Прочее

// Заполняет реквизиты параметров настройки счетов учета расходов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет служебные реквизиты в таблице на основании выбранной категории эксплуатации.
//
// Параметры:
// 	ТаблицаФормы - ДанныеФормыКоллекция - Таблица формы для которой заполняются признаки.
//
Процедура ЗаполнитьПризнакиКатегорииЭксплуатации(ТаблицаФормы) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки - 1 КАК ИндексСтроки,
	|	ЕСТЬNULL(Таблица.КатегорияЭксплуатации.ИнвентарныйУчет, ЛОЖЬ) КАК ИнвентарныйУчет,
	|	ЕСТЬNULL(Таблица.КатегорияЭксплуатации.УчетПоФизЛицам, ЛОЖЬ) КАК УчетПоФизЛицам,
	|	ЕСТЬNULL(Таблица.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ) КАК УчитыватьВВидеГрупповогоОС,
	|	ЕСТЬNULL(Таблица.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ, ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПриПередаче)) КАК СпособПогашенияСтоимостиБУ,
	|	ЕСТЬNULL(Таблица.КатегорияЭксплуатации.СрокЭксплуатации, 0) КАК СрокЭксплуатации
	|ИЗ
	|	Таблица КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаФормы.Выгрузить(,"НомерСтроки, КатегорияЭксплуатации"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.ИндексСтроки], Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти
	
//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.КатегорииЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.273";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("54fe52ac-403f-42dd-836f-52e861f1be56");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КатегорииЭксплуатации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник ""Категории эксплуатации"":
	|- заполняет новый реквизит ""Способ определения срока использования""
	|- заполняет новый реквизит ""Имущественный учет""
	|- заполняет новый реквизит ""Учет по физ. лицам""';
	|en = 'Updates the ""Operation category"" catalog:
	|- fills in the new ""Method for use period determination"" attribute
	|- fills in the new ""Property accounting"" attribute
	|- fills in the new ""Accounting by individuals"" attribute'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КатегорииЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.КатегорииЭксплуатации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.КатегорииЭксплуатации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.КатегорииЭксплуатации";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	//++ НЕ УТ
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КатегорииЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.КатегорииЭксплуатации КАК КатегорииЭксплуатации
	|ГДЕ
	|	НЕ КатегорииЭксплуатации.УчитыватьНаработку
	|		И КатегорииЭксплуатации.СпособПогашенияСтоимостиБУ = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоНаработке)
	|	
	|	ИЛИ НЕ КатегорииЭксплуатации.РеквизитыОбновлены258";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	//-- НЕ УТ
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.КатегорииЭксплуатации";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.КатегорииЭксплуатации - 
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			//++ НЕ УТ
			
			Если НЕ СправочникОбъект.УчитыватьНаработку
				И СправочникОбъект.СпособПогашенияСтоимостиБУ = Перечисления.СпособыПогашенияСтоимостиТМЦ.ПоНаработке Тогда
				СправочникОбъект.УчитыватьНаработку = Истина;
			КонецЕсли;
			
			Если НЕ СправочникОбъект.РеквизитыОбновлены258 Тогда
				СправочникОбъект.ИмущественныйУчет = Истина;
				СправочникОбъект.УчетПоФизЛицам = Истина;
				СправочникОбъект.РеквизитыОбновлены258 = Истина;
			КонецЕсли;
			
			//-- НЕ УТ
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
