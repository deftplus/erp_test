
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПланыСчетов") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыФинансовыхОтчетов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ВидыФинансовыхОтчетов.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.ВидыФинансовыхОтчетов КАК ВидыФинансовыхОтчетов
		|ГДЕ
		|	ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ВидыФинансовыхОтчетов.ПланыСчетов КАК ТаблицаПланыСчетов
		|		ГДЕ
		|			ВидыФинансовыхОтчетов.Ссылка = ТаблицаПланыСчетов.Ссылка
		|			И ТаблицаПланыСчетов.ПланСчетов В (&ПланыСчетов))
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ВидыФинансовыхОтчетов.ПланыСчетов КАК ТаблицаПланыСчетов
		|		ГДЕ
		|			ВидыФинансовыхОтчетов.Ссылка = ТаблицаПланыСчетов.Ссылка
		|			И НЕ ТаблицаПланыСчетов.ПланСчетов В (&ПланыСчетов))
		|	И &Отбор
		|	И &СтрокаПоиска
		|";
		Запрос.УстановитьПараметр("ПланыСчетов", Параметры.ПланыСчетов);
		
		МассивСтрокиОтбора = Новый Массив;
		МассивСтрокиОтбора.Добавить("ИСТИНА");
		Если Параметры.Свойство("Отбор") Тогда
			Для каждого КлючИЗначение Из Параметры.Отбор Цикл
				МассивСтрокиОтбора.Добавить(СтрШаблон("ТаблицаПланыСчетов.Ссылка.%1 = &%1", КлючИЗначение.Ключ));
				Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", СтрСоединить(МассивСтрокиОтбора, Символы.ПС + "И" + " "));
		
		Если Параметры.Свойство("СтрокаПоиска") Тогда
			УсловиеСтрокаПоиска = "ВидыФинансовыхОтчетов.Наименование ПОДОБНО &СтрокаПоиска";
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
		Иначе
			УсловиеСтрокаПоиска = "ИСТИНА";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаПоиска", УсловиеСтрокаПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыФинансовыхОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("feaa25d4-a3da-4bbd-8cc4-bc53848f1132");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыФинансовыхОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Замена старого реквизита ""Суммы в тысячах"" на ""Кратность сумм"".
	|Заполняет табличную часть ""Планы счетов"".';
	|en = 'Replacing the old attribute ""Amounts in thousands"" with ""Multiplier of amounts"".
	|Populates the ""Chart of accounts"" table.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыФинансовыхОтчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыФинансовыхОтчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыФинансовыхОтчетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыФинансовыхОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыФинансовыхОтчетов КАК ВидыФинансовыхОтчетов
	|ГДЕ
	|	(ВидыФинансовыхОтчетов.ЗаголовокКодаСтроки = """"
	|			И ВидыФинансовыхОтчетов.ЗаголовокПримечания = """"
	|			И ВидыФинансовыхОтчетов.ЯзыкОтчета = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыФинансовыхОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыФинансовыхОтчетов КАК ВидыФинансовыхОтчетов
	|ГДЕ
	|	НЕ ВидыФинансовыхОтчетов.ЭтоГруппа
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ВидыФинансовыхОтчетов.ПланыСчетов КАК ВидыФинансовыхОтчетовПланСчетов
	|				ГДЕ
	|					ВидыФинансовыхОтчетовПланСчетов.Ссылка = ВидыФинансовыхОтчетов.Ссылка)");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	                
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ВидыФинансовыхОтчетов";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект(); //- СправочникОбъект.ВидыФинансовыхОтчетов - 
			
			Если Объект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Иначе
				Объект.ЗаголовокКодаСтроки = "Код";
				Объект.ЗаголовокПримечания = "Примечание";
				Объект.ЯзыкОтчета = "ru";
				
				Если Не Объект.ЭтоГруппа И Не Объект.ПланыСчетов.Количество() Тогда
					Если Объект.УдалитьВидПоказателей = Перечисления.УдалитьВидыПоказателейОтчетности.Международные Тогда
						Объект.ПланыСчетов.Добавить().ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.Международный;
					//++ Локализация
					ИначеЕсли Объект.УдалитьВидПоказателей = Перечисления.УдалитьВидыПоказателейОтчетности.Регламентированные Тогда
						Объект.ПланыСчетов.Добавить().ПланСчетов = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("ПланСчетов.Хозрасчетный");
					ИначеЕсли Объект.УдалитьВидПоказателей = Перечисления.УдалитьВидыПоказателейОтчетности.МеждународныеИРегламентированные Тогда
						Объект.ПланыСчетов.Добавить().ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.Международный;
						Объект.ПланыСчетов.Добавить().ПланСчетов = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("ПланСчетов.Хозрасчетный");
					//-- Локализация
					КонецЕсли;
				КонецЕсли;
				
				Если Объект.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
