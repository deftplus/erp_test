
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ВладелецОбъектов", ВладелецОбъектов) Тогда
		Если ПустаяСтрока(Объект.ИмяТипаВладельца) Тогда
			Объект.ИмяТипаВладельца = XMLТипЗнч(ВладелецОбъектов).ИмяТипа;
		КонецЕсли;
		Если ПустаяСтрока(Объект.СинонимВладельца) Тогда
			ОБъект.СинонимВладельца = Строка(ТипЗнч(ВладелецОбъектов));
			Элементы.ВладелецВыбора.Заголовок = Объект.СинонимВладельца;
		КонецЕсли;
		Если ПустаяСтрока(Объект.ИмяТипаОбъекта) Тогда
			Объект.ИмяТипаОбъекта = ВыборОбъектовУХ.ИмяТипаОбъектаВыбораПоВладельцу(
				ТипЗнч(ВладелецОбъектов), 0);
		КонецЕсли;
		Если ПустаяСтрока(Объект.СинонимОбъекта) Тогда
			Объект.СинонимОбъекта = Строка(Тип(ОБъект.ИмяТипаОбъекта));
		КонеЦЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьЭкспертнуюКомиссию_Сервер();
	Иначе
		// Для существующих настроек не перезаполняем экспертную комиссию.
	КонецЕсли;
	УстановитьПараметрыСпискаЭкспертов();
	УстановитьУсловноеОформление();	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элементы.ЭкспертыКритерия.Видимость = Элементы.ПоказыватьЭкспертовПоКритериям.Пометка;
	
	Элементы.КритерииОценкиЗаполнитьПредопределеннымиКритериями.Видимость = Объект.ИмяТипаОбъекта = "ДокументСсылка.ПредложениеПоставщика";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборКритериевОценкиПоТекущемуЭтапу();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЗаполнитьФункциональныеНаправленияОценочнойКомиссии();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПараметрыСпискаЭкспертов();
	ЗаполнитьФункциональныеНаправленияОценочнойКомиссии();
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ЭтапыВыбораПриИзменении(Элемент)
	ОбработатьИзменениеСпискаЭтапов();
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыВыбораПриАктивизацииСтроки(Элемент)
	УстановитьОтборКритериевОценкиПоТекущемуЭтапу();
	ТекДанные = Элементы.ЭтапыВыбора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		УстановитьТекстПодвала(ТекДанные.Этап);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыВыбораПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ЭтапыВыбора.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ЭтапОценкиКУдалению = Неопределено;
	Иначе
		ЭтапОценкиКУдалению = ТекДанные.Этап;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыВыбораПослеУдаления(Элемент)
	Если ЗначениеЗаполнено(ЭтапОценкиКУдалению) Тогда
		Если ЭтапОценкиКУдалению = ПредопределенноеЗначение("Справочник.ЭтапыОценки.ПоследующаяОценка") Тогда
			Объект.ПоследующаяОценка = Ложь;
		КонецЕсли;
		
		Счетчик=Объект.КритерииОценки.Количество() - 1;
		Пока Счетчик >=0 Цикл
		   Строка_ = Объект.КритерииОценки[Счетчик];
		   Если Строка_.ЭтапВыбора = ЭтапОценкиКУдалению Тогда
		      Объект.КритерииОценки.Удалить(Строка_);
		   КонецЕсли;
		   Счетчик = Счетчик - 1;
		КонецЦикла;
		
		ЭтапОценкиКУдалению = Неопределено;
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиПриИзменении(Элемент)
	ТекДанные = Элементы.ЭтапыВыбора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекКритерий = Элементы.КритерииОценки.ТекущиеДанные;
		Если ТекКритерий <> Неопределено Тогда
			ТекКритерий.ЭтапВыбора = ТекДанные.Этап;
		КонецЕсли;
	КонецЕсли;
	Если Элементы.КритерииОценки.ТекущиеДанные <> Неопределено Тогда
		ПересчитатьВеса(ТекКритерий.ЭтапВыбора);
		УстановитьТекстПодвала(ТекКритерий.ЭтапВыбора);
	Иначе 
		УстановитьТекстПодвала();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиПриАктивизацииСтроки(Элемент)
	УстановитьПараметрыСпискаЭкспертов();
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочнаяКомиссияПриИзменении(Элемент)
	Элементы.ЭкспертыКритерия.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспертыЭтаповПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиКритерийОценкиПриИзменении(Элемент)
	УстановитьПараметрыСпискаЭкспертов();
	УстановитьВесКритерияПоУмолчанию();
	Элементы.ЭкспертыЭтапов.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочнаяКомиссияСотрудникПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЗакупочнаяКомиссия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонеЦЕсли;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПолучитьДанныеФизЛица(ТекущиеДанные.Сотрудник));
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора);
	Если Объект.ЭтапыВыбора.Количество() > 0 Тогда
		Элементы.ЭтапыВыбора.ТекущаяСтрока = 0;
		УстановитьОтборКритериевОценкиПоТекущемуЭтапу();
	Иначе
		// Не требуется позицинироваться на этапе, т.к. таблица этапов пуста.
	КонецЕсли;
	УстановитьПараметрыСпискаЭкспертов();
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиКритерийОценкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяТипаОбъекта", Объект.ИмяТипаОбъекта);
	СтруктураПараметров.Вставить("ЗапретитьИзмененияТипаОбъекта", Истина);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИспользуетсяДляКвалификацииПоставщиков", Ложь);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.КритерииВыбора.ФормаВыбора", СтруктураПараметров, Элементы.КритерииОценкиКритерийОценки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭкспертнуюКомиссию(Команда)
	ЗаполнитьЭкспертнуюКомиссию_Сервер();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура УстановитьОтборКритериевОценкиПоТекущемуЭтапу()
	ТекДанные = Элементы.ЭтапыВыбора.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Отбор = Новый Структура("ЭтапВыбора", Неопределено);
		Элементы.КритерииОценки.ТолькоПросмотр = Истина;
	Иначе
		Отбор = Новый Структура("ЭтапВыбора", ТекДанные.Этап);
		Элементы.КритерииОценки.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТекДанные.Этап);
	КонецЕсли;
	
	Элементы.КритерииОценки.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

// Устанавливает в текущей строке критериев оценки по критерию из текущей строки.
&НаКлиенте
Процедура УстановитьВесКритерияПоУмолчанию()
	ТекДанные = Элементы.КритерииОценки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		КритерийРабочий = ТекДанные.КритерийОценки;
		СтруктураРезультат = ПолучитьДанныеКритерияВыбораПоУмолчанию(КритерийРабочий);
		ТекДанные.Вес					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРезультат, "Вес", 0);
		ТекДанные.МинимальноеЗначение	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРезультат, "МинимальноеЗначение", 0);
		ТекДанные.МаксимальноеЗначение	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРезультат, "МаксимальноеЗначение", 0);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// УстановитьВесКритерияПоУмолчанию()


#КонецОбласти

#Область ШаблоныЗаполнения


// Получает структуру шаблона по текущему объекту.
&НаСервере
Функция ВернутьСтруктураДанныхОбъектаШаблона()
	ОбъектШаблона = РеквизитФормыВЗначение("Объект");
	СтруктураДанныхОбъекта = УправлениеШаблонамиЗаполненияУХ.СтруктураДанныхОбъектаШаблонаПоОбъекту(ОбъектШаблона);
	Возврат СтруктураДанныхОбъекта;
КонецФункции

// Выполняет заполнение реквизитов формы по шаблону заполнения ШаблонВход.
&НаСервере
Процедура ЗаполнитьФормуПоШаблону(ШаблонВход)
	ОбъектШаблона = РеквизитФормыВЗначение("Объект");
	ЗаполненныйОбъект = УправлениеШаблонамиЗаполненияУХ.ЗаполнитьИзШаблона(ШаблонВход, ОбъектШаблона);
	ЗначениеВРеквизитФормы(ЗаполненныйОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)
	СтруктураДанныхОбъектаШаблона = ВернутьСтруктураДанныхОбъектаШаблона();	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", СтруктураДанныхОбъектаШаблона.Назначение);
	ПараметрыФормы.Вставить("ИмяОбъекта", СтруктураДанныхОбъектаШаблона.ИмяОбъекта);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ШаблоныЗаполнения.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВШаблон(Команда)
	УправлениеШаблонамиЗаполненияКлиентУХ.СохранитьВШаблон(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ШаблоныЗаполнения") Тогда
		ЗаполнитьФормуПоШаблону(ВыбранноеЗначение);
		УправлениеШаблонамиЗаполненияКлиентУХ.ПослеЗаполненияПоШаблону(ЭтаФорма, ВыбранноеЗначение);
		ЗаголовокПредупреждения = НСтр("ru = 'Заполнение'");
		ТекстПредупреждения = НСтр("ru = 'Текущий объект заполнен по шаблону %ШаблонЗаполнения%'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ШаблонЗаполнения%", Строка(ВыбранноеЗначение));
		ПоказатьОповещениеПользователя(ЗаголовокПредупреждения, , ТекстПредупреждения, БиблиотекаКартинок.Успешно32);
	Иначе
	// Не выбран шаблон. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ОбработатьИзменениеСпискаЭтапов()
	мПоследующаяОценка = Объект.ЭтапыВыбора.НайтиСтроки(Новый Структура("Этап", Справочники.ЭтапыОценки.ПоследующаяОценка));
	Если мПоследующаяОценка.Количество() > 0 Тогда
		Объект.ПоследующаяОценка = Истина;
		// Всегда внизу
		Объект.ЭтапыВыбора.Сдвинуть(Объект.ЭтапыВыбора.Индекс(мПоследующаяОценка[0]), Объект.ЭтапыВыбора.Количество() - мПоследующаяОценка[0].НомерСтроки);
		
	Иначе
		Объект.ПоследующаяОценка = Ложь;
	КонецЕсли;
	
	мЭтапов = Объект.ЭтапыВыбора.Выгрузить(,"Этап").ВыгрузитьКолонку("Этап");
	Элементы.КритерииОценкиЭтапВыбора.СписокВыбора.ЗагрузитьЗначения(мЭтапов);
КонецПроцедуры


&НаСервере
Процедура УстановитьПараметрыСпискаЭкспертов()
	
	ТекСтрока = Элементы.КритерииОценки.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		ФункцНаправление = Справочники.ФункциональныеНаправления.ПустаяСсылка();
	иначе
		ТекДанные = Объект.КритерииОценки.НайтиПоИдентификатору(ТекСтрока);
		ТекКритерий = ТекДанные.КритерийОценки;
		Если ЗначениеЗаполнено(ТекКритерий) Тогда
			ФункцНаправление = ТекКритерий.ФункциональноеНаправление;
		Иначе
			ФункцНаправление = Справочники.ФункциональныеНаправления.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	//ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(ЭкспертыКритерия, "Владелец", ВладелецОбъектовВыбора, Истина);
	ЭкспертыКритерия.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ФункцНаправление) Тогда
		//ЭкспертыКритерия.Параметры.УстановитьЗначениеПараметра("ФункциональноеНаправление", ФункцНаправление);
		ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(ЭкспертыКритерия, "ФункциональноеНаправление", ФункцНаправление, Истина);
	Иначе
		ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(ЭкспертыКритерия, "ФункциональноеНаправление", ФункцНаправление, Ложь);
	КонецЕсли;
	
	ЭкспертыЭтапов.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциональныеНаправленияОценочнойКомиссии()
	Для Каждого СтрокаЭксперта Из Объект.ОценочнаяКомиссия Цикл
		ЗаполнитьЗначенияСвойств(СтрокаЭксперта, ПолучитьДанныеФизЛица(СтрокаЭксперта.Сотрудник));
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФизЛица(ФизическоеЛицо)
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("ФункциональноеНаправление", Справочники.ФункциональныеНаправления.ПустаяСсылка());
	ДанныеСотрудника.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФункциональныеНаправленияФизическихЛиц.ФункциональноеНаправление КАК ФункциональноеНаправление
		|ИЗ
		|	РегистрСведений.ФункциональныеНаправленияФизическихЛиц КАК ФункциональныеНаправленияФизическихЛиц
		|ГДЕ
		|	ФункциональныеНаправленияФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	мРезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДетальныеЗаписи = мРезультатЗапроса[0].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеСотрудника.ФункциональноеНаправление = ВыборкаДетальныеЗаписи.ФункциональноеНаправление;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = мРезультатЗапроса[1].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеСотрудника.Пользователь = ВыборкаДетальныеЗаписи.Пользователь;
	КонецЕсли;
	
	Возврат ДанныеСотрудника;
КонецФункции

// Возвращает структуру данных весов по критерию выбора КритерийВход.
&НаСервереБезКонтекста
Функция ПолучитьДанныеКритерияВыбораПоУмолчанию(КритерийВход)
	РезультатФункции = Справочники.КритерииВыбора.ПолучитьДанныеКритерияВыбораПоУмолчанию(КритерийВход);
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьДанныеКритерияВыбораПоУмолчанию()

// Выполняет заполнение экспертной комиссии по данным закупочной процедуры.
&НаСервере
Процедура ЗаполнитьЭкспертнуюКомиссию_Сервер()
	Если ТипЗнч(ВладелецОбъектов) = Тип("СправочникСсылка.Лоты") Тогда
		ТекЗакупка = ВладелецОбъектов.Владелец;
		Приказ = ТекЗакупка.ПриказОНазначенииЗакупочнойКомиссии;
		Если ЗначениеЗаполнено(Приказ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия.Сотрудник КАК Сотрудник,
			|	ЕСТЬNULL(ФункциональныеНаправленияФизическихЛиц.ФункциональноеНаправление, ЗНАЧЕНИЕ(Справочник.ФункциональныеНаправления.ПустаяСсылка)) КАК ФункциональноеНаправление,
			|	ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь
			|ИЗ
			|	Документ.ПриказОНазначенииЗакупочнойКомиссии.ЗакупочнаяКомиссия КАК ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФункциональныеНаправленияФизическихЛиц КАК ФункциональныеНаправленияФизическихЛиц
			|		ПО ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия.Сотрудник = ФункциональныеНаправленияФизическихЛиц.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия.Сотрудник = Пользователи.ФизическоеЛицо
			|ГДЕ
			|	ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Приказ);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Объект.ОценочнаяКомиссия.Очистить();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрока = Объект.ОценочнаяКомиссия.Добавить();
					НоваяСтрока.Сотрудник					 = ВыборкаДетальныеЗаписи.Сотрудник;
					НоваяСтрока.ФункциональноеНаправление	 = ВыборкаДетальныеЗаписи.ФункциональноеНаправление;
					НоваяСтрока.Пользователь				 = ВыборкаДетальныеЗаписи.Пользователь;
					НоваяСтрока.ЗакрываетЭтапОценки			 = Ложь;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'В закупочной процедуре ""%ЗакупочнаяПроцедура%"" не заполнен приказ о назначении закупочной комиссии. Заполнение экспертов отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗакупочнаяПроцедура%", Строка(ТекЗакупка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Неизвестный вариант владельца. Пропускаем заполнение.
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьЭкспортнуюКомиссию_Сервер()

&НаСервере
Процедура ПересчитатьВеса(ЭтапВыбора)
	ФиксированныйВес = 0;
	КолвоКритериев = 0 ;
	ВесОбщий = 1;
	КоличествоКритерий = 0;
	Для Каждого Строка Из Объект.КритерииОценки Цикл
		Если НЕ Строка.ЭтапВыбора = ЭтапВыбора Тогда Продолжить; КонецЕсли;
		КоличествоКритерий = КоличествоКритерий	+ 1;
		Если Строка.ФиксироватьВес Тогда
			ФиксированныйВес = ФиксированныйВес + Строка.Вес;
		Иначе
			КолвоКритериев = КолвоКритериев +1;
		КонецЕсли;
	КонецЦикла;
	КолвоКритериевОбщее = КолВоКритериев;
	ВесОбщий = ВесОбщий - ФиксированныйВес;
	НомерСтроки = 0 ;
	Если ВесОбщий > 0 И КолвоКритериев > 0 Тогда
		НомерСтроки = НомерСтроки+1;
		Вес = Окр(ВесОбщий/КолвоКритериев,5);
		Для Каждого Строка Из Объект.КритерииОценки Цикл
			Если НЕ Строка.ЭтапВыбора = ЭтапВыбора Тогда Продолжить; КонецЕсли;
			Если КолвоКритериев = 0 Тогда Прервать; КонецЕсли;
			Если Строка.ФиксироватьВес И ВесОбщий >= 0 Тогда
				Продолжить;
			КонецЕсли;	
			Если НомерСтроки - 1 = КоличествоКритерий ИЛИ КолвоКритериев = 1 Тогда
				Строка.Вес = ВесОбщий;
			Иначе
				Строка.Вес = Вес;
			КонецЕсли;
			ВесОбщий = ВесОбщий - Вес;
			КолвоКритериев = КолвоКритериев - 1;
		КонецЦикла	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиВесПриИзменении(Элемент)
	Элементы.КритерииОценки.ТекущиеДанные.ФиксироватьВес = Истина;
	ПересчитатьВеса(Элементы.КритерииОценки.ТекущиеДанные.ЭтапВыбора);
	УстановитьТекстПодвала(Элементы.КритерииОценки.ТекущиеДанные.ЭтапВыбора);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПодвала(ЭтапВыбора = Неопределено)
	ВесИтог = 0; 
	Объект.КритерииОценки.Итог("Вес");
	Для Каждого Строка Из Объект.КритерииОценки Цикл
		Если НЕ Строка.ЭтапВыбора = ЭтапВыбора Тогда Продолжить; КонецЕсли;
		ВесИтог = ВесИтог + Строка.Вес;
	КонецЦикла;
	Элементы.КритерииОценкиВес.ТекстПодвала = ВесИтог;
	Если ВесИтог <> 1 Тогда
		Элементы.КритерииОценкиВес.ЦветТекстаПодвала = WebЦвета.Красный;
	Иначе 
		Элементы.КритерииОценкиВес.ЦветТекстаПодвала = WebЦвета.Черный;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиПослеУдаления(Элемент)
	Если  Элемент.ТекущиеДанные <> Неопределено Тогда
		ПересчитатьВеса(Элемент.ТекущиеДанные.ЭтапВыбора);
		УстановитьТекстПодвала(Элемент.ТекущиеДанные.ЭтапВыбора);
	Иначе 
		УстановитьТекстПодвала();
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЭкспертовПоКритериям(Команда)
	Элементы.ПоказыватьЭкспертовПоКритериям.Пометка = НЕ Элементы.ПоказыватьЭкспертовПоКритериям.Пометка;
	Элементы.ЭкспертыКритерия.Видимость = Элементы.ПоказыватьЭкспертовПоКритериям.Пометка;
КонецПроцедуры


&НаКлиенте
Процедура КритерииОценкиДо0ПриИзменении(Элемент)
	СтрокаТабличнойЧасти=Элементы.КритерииОценки.ТекущиеДанные;
	СтрокаТабличнойЧасти.От1=СтрокаТабличнойЧасти.До0;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиДо1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти=Элементы.КритерииОценки.ТекущиеДанные;
	СтрокаТабличнойЧасти.От2=СтрокаТабличнойЧасти.До1;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиДо2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти=Элементы.КритерииОценки.ТекущиеДанные;
	СтрокаТабличнойЧасти.От3=СтрокаТабличнойЧасти.До2;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиДо3ПриИзменении(Элемент)
	СтрокаТабличнойЧасти=Элементы.КритерииОценки.ТекущиеДанные;
	СтрокаТабличнойЧасти.От4=СтрокаТабличнойЧасти.До3;
КонецПроцедуры

&НаКлиенте
Процедура КритерииОценкиДо4ПриИзменении(Элемент)
	СтрокаТабличнойЧасти=Элементы.КритерииОценки.ТекущиеДанные;
	СтрокаТабличнойЧасти.От5=СтрокаТабличнойЧасти.До4;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредопределеннымиКритериямиНаСервере(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.ЭтапыВыбора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПерезаполнитьРасчетнымиКритериями(ТекДанные.Этап);
		УстановитьТекстПодвала(ТекДанные.Этап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредопределеннымиКритериями(Команда)
	Если Объект.КритерииОценки.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения(
				"ЗаполнитьПредопределеннымиКритериямиНаСервере", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
			"Дозаполнить таблицу предопределенными расчетными критериями",
			РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЗаполнитьПредопределеннымиКритериямиНаСервере(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

Процедура ПерезаполнитьРасчетнымиКритериями(ТекущийЭтап) 
	
	Объект.ИспользоватьРасчетныеЗначенияИсточникаДанных = Истина;
	
	ДобавленныйКритерий = Объект.КритерииОценки.Добавить();
	ДобавленныйКритерий.ЭтапВыбора = ТекущийЭтап;
	ДобавленныйКритерий.КритерийОценки = ПредопределенноеЗначение("Справочник.КритерииВыбора.ПроцентПоЦенеПредложений");
	ДобавленныйКритерий.РассчитатьЗначение = Истина;
	ДобавленныйКритерий.ИсточникДанных = ПредопределенноеЗначение("Справочник.ИсточникиДанныхДляРасчетов.ПроцентОтМаксимальнойЦены");
	ДобавленныйКритерий.От0 = 0;
	ДобавленныйКритерий.До0 = 2;
	ДобавленныйКритерий.От1 = 2;
	ДобавленныйКритерий.До1 = 5;
	ДобавленныйКритерий.От2 = 5;
	ДобавленныйКритерий.До2 = 7;
	ДобавленныйКритерий.От3 = 7;
	ДобавленныйКритерий.До3 = 10;
	ДобавленныйКритерий.От4 = 10;
	ДобавленныйКритерий.До4 = 15;
	ДобавленныйКритерий.От5 = 15;
	ДобавленныйКритерий.До5 = 100;
	
	ДобавленныйКритерий = Объект.КритерииОценки.Добавить();
	ДобавленныйКритерий.ЭтапВыбора = ТекущийЭтап;
	ДобавленныйКритерий.КритерийОценки = ПредопределенноеЗначение("Справочник.КритерииВыбора.ЦенаПоПредложению");
	ДобавленныйКритерий.РассчитатьЗначение = Истина;
	ДобавленныйКритерий.НеИспользоватьПреобразованиеВБаллы = Истина;
	ДобавленныйКритерий.ИсточникДанных = ПредопределенноеЗначение("Справочник.ИсточникиДанныхДляРасчетов.ЦенаПоПредложению");
	
	ДобавленныйКритерий = Объект.КритерииОценки.Добавить();
	ДобавленныйКритерий.ЭтапВыбора = ТекущийЭтап;
	ДобавленныйКритерий.КритерийОценки = ПредопределенноеЗначение("Справочник.КритерииВыбора.СрокПоставки");
	ДобавленныйКритерий.РассчитатьЗначение = Истина;
	ДобавленныйКритерий.ИсточникДанных = ПредопределенноеЗначение("Справочник.ИсточникиДанныхДляРасчетов.СрокПоставки");
	ДобавленныйКритерий.От0 = 100;
	ДобавленныйКритерий.До0 = 50;
	ДобавленныйКритерий.От1 = 50;
	ДобавленныйКритерий.До1 = 10;
	ДобавленныйКритерий.От2 = 10;
	ДобавленныйКритерий.До2 = 6;
	ДобавленныйКритерий.От3 = 6;
	ДобавленныйКритерий.До3 = 4;
	ДобавленныйКритерий.От4 = 4;
	ДобавленныйКритерий.До4 = 3;
	ДобавленныйКритерий.От5 = 3;
	ДобавленныйКритерий.До5 = 0;
	
	ПересчитатьВеса(ТекущийЭтап);
	
Конецпроцедуры
#КонецОбласти
