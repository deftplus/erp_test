
&НаКлиенте
Процедура ОбновитьСписокТЧ(Команда)
	
	ОбновитьСписокТЧНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТЧНаСервере()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабличныеЧастиБД.Ссылка
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	ТабличныеЧастиБД.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Объект.ИсточникиДляЗаполненияТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧасть",Результат.Ссылка)).Количество()=0 Тогда
			
			НоваяСтрока=Объект.ИсточникиДляЗаполненияТЧ.Добавить();
			НоваяСтрока.ТабличнаяЧасть=Результат.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ТипБДПриемник = Объект.Владелец.Владелец;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Работа с правилами заполнения объектов возможна только из формы описания объекта.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Информация);
		Возврат;
		
	КонецЕсли;	
	
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.ДокументыБД") Тогда
		
		Элементы.Владелец.Заголовок="Документ";
		
	Иначе
		
		Элементы.Владелец.Заголовок="Справочник";
		
	КонецЕсли;
	
	СформироватьЗаголовокКомандыИсточникШапка();
	
	ПроверитьНаличиеПоказателейОбъектовБД();
	
	ОбновитьСписокТЧНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(Объект.ТипБД) Тогда
			
			Если Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
				
				Объект.ПоОбъектуБД=0;
				
			Иначе
				
				Объект.ПоОбъектуБД=1;
				
			КонецЕсли;
			
		Иначе
			
			Объект.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
			Объект.ПоОбъектуБД=1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТипЗнч(Параметры.ЗначенияЗаполнения)=Тип("Структура")
		И Параметры.ЗначенияЗаполнения.Свойство("ИсходныйОбъектБД")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ИсходныйОбъектБД)
		И Параметры.ЗначенияЗаполнения.ИсходныйОбъектБД.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ)
		ИЛИ 
		(Объект.ПоОбъектуБД=1 
			И ЗначениеЗаполнено(Объект.ИсходныйОбъектБД) 
			И Объект.ИсходныйОбъектБД.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ) Тогда
		
		ПоОбъектуТекущейИБ=Истина;
		
		Если Объект.ПоОбъектуБД=0 Тогда
			
			Объект.ПоОбъектуБД=1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьТаблицуШаблонов();
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерииПоУмолчанию) Тогда
		ОбновитьСписокРесурсовРегистра();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокКомандыИсточникШапка()
	
	Если ЗначениеЗаполнено(Объект.ИсточникДляЗаполненияШапки) Тогда
		
		Элементы.ОткрытьИсточникШапки.Заголовок=Строка(Объект.ИсточникДляЗаполненияШапки);
		
	Иначе
		
		Элементы.ОткрытьИсточникШапки.Заголовок=НСтр("ru = 'Не указан.'");
		
	КонецЕсли;	
	
КонецПроцедуры // СформироватьЗаголовокКомандыИсточникШапка()

&НаСервере
Процедура ОбновитьТаблицуШаблонов()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОбъектовБД.Ссылка,
	|	ПоказателиОбъектовБД.ТабличнаяЧастьБД,
	|	ПроцедурыРасчетов.Процедура КАК Процедура
	|ИЗ
	|	Справочник.ПоказателиОбъектовБД КАК ПоказателиОбъектовБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО (ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки)
	|			И ПоказателиОбъектовБД.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
	|ГДЕ
	|	ПоказателиОбъектовБД.Владелец = &Владелец
	|	И НЕ ПоказателиОбъектовБД.ПометкаУдаления
	|	И НЕ ПоказателиОбъектовБД.ДляЗаполненияШапки";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",Объект.Ссылка);
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	ТаблицаПоказателейРасчета.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаПоказателейРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.ПроцедураРедактирования=НоваяСтрока.Процедура;
		
	КонецЦикла;
	
	 ЗаполнитьПроцедурыРедактирования();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
КонецПроцедуры // ОбновитьТаблицуШаблонов()

&НаСервере
Процедура ЗаполнитьПроцедурыРедактирования()
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы,
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.КодПоказательОтбор
	|ПОМЕСТИТЬ ИсточникиДанных
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	|	И РеквизитыИсточниковДанныхДляФормул.СпособИспользования = &СпособИспользования";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",Объект.Ссылка);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД);
	Запрос.Выполнить();
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникиДанных.КодИсточника,
	|	ИсточникиДанных.ПоказательТекущегоОтчета,
	|	ИсточникиДанных.ЕстьНестандартныеОтборы,
	|	ИсточникиДанных.КодУпрощеннойФормулы,
	|	ИсточникиДанных.КодПоказательОтбор
	|ИЗ
	|	ИсточникиДанных КАК ИсточникиДанных
	|ГДЕ
	|	ИсточникиДанных.ПотребительРасчета = &ПотребительРасчета";
	
		
	Для Каждого Строка ИЗ ТаблицаПоказателейРасчета Цикл
		
		ТекстПроцедуры=Строка.Процедура;
		
		Если Строка.ПроизвольныйКод Тогда
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		Иначе
			
			Запрос.УстановитьПараметр("ПотребительРасчета",Строка.Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
									
				ТекстОперанда=Результат.КодУпрощеннойФормулы;					
				ТекстПроцедуры=СтрЗаменить(ТекстПроцедуры,"["+СокрЛП(Результат.КодИсточника)+"]",ТекстОперанда);
				
			КонецЦикла;
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьПроцедурыРедактирования()

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
		
		Элементы.ГруппаСинхронизация.Видимость=Истина;
		Элементы.ПоОбъектуБД.Видимость=Ложь;
		Элементы.ИсходныйОбъект.Видимость=Ложь;
		Элементы.СпособыЗаполненияПоказателейОбъектов.Видимость=Ложь;
		Элементы.ГруппаИсточникиТЧ.Видимость=Истина;
		
	Иначе
		
		Элементы.ПоОбъектуБД.Видимость=Истина;	
		Элементы.ГруппаСинхронизация.Видимость					=(Не Объект.ПроизвольныйКод) И (Объект.ПоОбъектуБД=0);
		Элементы.ГруппаИсточникиТЧ.Видимость					=(Не Объект.ПроизвольныйКод) И (Объект.ПоОбъектуБД=1);
		Элементы.СпособыЗаполненияПоказателейОбъектов.Видимость	=(Не Объект.ПроизвольныйКод) И (Объект.ПоОбъектуБД=0);
		Элементы.ИсходныйОбъект.Видимость						=(Объект.ПоОбъектуБД=1) И (НЕ Объект.ПроизвольныйКод);
		
	КонецЕсли;
	
	Элементы.СтраницаПроизвольныйКод.Видимость				=(Объект.ПроизвольныйКод) ИЛИ (Объект.ПроизвольныйКодПослеЗаполнения);
	
	Элементы.ТипБД.Доступность			=(ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ);
	Элементы.ПроизвольныйКодПослеЗаполнения.Видимость=(Не Объект.ПроизвольныйКод);
				
КонецПроцедуры // ОбновитьВидимостьГруппыРеквизиты() 

&НаКлиенте
Процедура ИсточникиДляЗаполненияТЧИсточникДанныхПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ИсточникиДляЗаполненияТЧ.ТекущиеДанные.ИсточникДанных) Тогда
		
		Элементы.ИсточникиДляЗаполненияТЧ.ТекущиеДанные.Используется=Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРеквизитовИсходногоОбъекта(Команда)
	
	СписокРеквизитов=Новый СписокЗначений;
	
	Для Каждого Строка ИЗ Объект.РеквизитыДляРучногоЗаполнения Цикл
		
		СписокРеквизитов.Добавить(Строка.Имя);
		
	КонецЦикла;
	
	ОткрытьФорму("Справочник.ПравилаЗаполненияОбъектовБД.Форма.ФормаПодбораРеквизитов",Новый Структура("ДокументБД,СписокРеквизитов",Объект.ИсходныйОбъектБД,СписокРеквизитов));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНабораРеквизитовДляСинхронизации(МассивРеквизитов)
	
	СохраненныеРеквизиты=Объект.РеквизитыШапкиДляСинхронизацииТЧ.Выгрузить();
	
	НомерПоследнейАналитики=0;
		
	Для Каждого Строка ИЗ СохраненныеРеквизиты Цикл
		
		Если Строка.НомерАналитики>НомерПоследнейАналитики Тогда
			
			НомерПоследнейАналитики=Строка.НомерАналитики;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.РеквизитыШапкиДляСинхронизацииТЧ.Очистить();
	
	Для Каждого Элемент ИЗ МассивРеквизитов Цикл
		
		НоваяСтрока=Объект.РеквизитыШапкиДляСинхронизацииТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент.Значение);
		
		ОбщегоНазначенияУХ.ОпределитьНомерАналитики(НоваяСтрока,СохраненныеРеквизиты,НомерПоследнейАналитики);
		
	КонецЦикла;
	
	Объект.РеквизитыШапкиДляСинхронизацииТЧ.Сортировать("НомерАналитики");
	
КонецПроцедуры // ОбработатьИзменениеНабораРеквизитовДляСинхронизации()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия="ИзмененСписокИспользуемыхРеквизитовИсходногоОбъекта" Тогда
			
		Объект.РеквизитыДляРучногоЗаполнения.Очистить();
		
		Для Каждого Элемент ИЗ Параметр Цикл
			
			НоваяСтрока=Объект.РеквизитыДляРучногоЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент.Значение);
			
		КонецЦикла;
		
		Записать();
		
	ИначеЕсли ИмяСобытия="ИзмененСписокИспользуемыхРеквизитовТекущегоОбъекта" Тогда
		
		ОбработатьИзменениеНабораРеквизитовДляСинхронизации(Параметр);
		Записать();
		
	ИначеЕсли ИмяСобытия="ЗаписанИсточникДанных" И Параметр.НазначениеРасчетов=Объект.Ссылка Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ИсточникиДляЗаполненияТЧ"
			И (НЕ Элементы.ИсточникиДляЗаполненияТЧ.ТекущиеДанные=Неопределено) Тогда
			
			Элементы.ИсточникиДляЗаполненияТЧ.ТекущиеДанные.ИсточникДанных=Параметр.Ссылка;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметр)=Тип("Структура") И Параметр.Свойство("ТекстПроцедуры") Тогда
		
		СтрДанные=ТаблицаПоказателейРасчета.НайтиСтроки(Новый Структура("Ссылка",Параметр.ПотребительРасчета));
		
		Если СтрДанные.Количество()>0 Тогда
			
			СтрДанные[0].Процедура				=Параметр.ТекстПроцедуры;
			СтрДанные[0].ПроцедураРедактирования=Параметр.ПроцедураРедактирования;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоказательШапки(ОбъектБД)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОбъектовБД.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОбъектовБД КАК ПоказателиОбъектовБД
	|ГДЕ
	|	НЕ ПоказателиОбъектовБД.ПометкаУдаления
	|	И ПоказателиОбъектовБД.Владелец = &ОбъектБД
	|	И ПоказателиОбъектовБД.ДляЗаполненияШапки";
	
	Запрос.УстановитьПараметр("ОбъектБД",ОбъектБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьИсточникДляЗаполненияШапки()

&НаКлиенте
Процедура ИсточникиДляЗаполненияТЧИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Требуется записать текущий элемент. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		СтандартнаяОбработка = Ложь;
	Иначе
		// Выполняем далее.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйОбъектПриИзменении(Элемент)
	
	ОбновитьИсточникиДанныхОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсточникиДанныхОбъекта()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ИсточникДляЗаполненияШапки=ПолучитьИсточникДанныхПоОбъекту(Объект.Владелец);
		СформироватьЗаголовокКомандыИсточникШапка();	
		
		Для Каждого Строка ИЗ Объект.ИсточникиДляЗаполненияТЧ Цикл
			
			Строка.ИсточникДанных=ПолучитьИсточникДанныхПоОбъекту(Строка.ТабличнаяЧасть);
			
			Если НЕ ЗначениеЗаполнено(Строка.ИсточникДанных) Тогда
				
				Строка.Используется=Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииИсходногоОбъекта()

&НаСервере
Функция ПолучитьИсточникДанныхПоОбъекту(ПотребительРасчета)
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.ОбъектБД = &ОбъектБД
	|	И ИсточникиДанныхДляРасчетов.ТипБД = &ТипБД";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",Объект.Ссылка);
	Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
	Запрос.УстановитьПараметр("ОбъектБД",Объект.ИсходныйОбъектБД);
	Запрос.УстановитьПараметр("ТипБД",Объект.ТипБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции // ПолучитьИсточникДанныхПоОбъекту() 

&НаКлиенте
Процедура ОткрытьСписокРеквизитовТекущегоОбъекта(Команда)
	
	СписокРеквизитов=Новый СписокЗначений;
	
	Для Каждого Строка ИЗ Объект.РеквизитыШапкиДляСинхронизацииТЧ Цикл
		
		СписокРеквизитов.Добавить(Строка.Имя);
		
	КонецЦикла;
	
	ОткрытьФорму("Справочник.ПравилаЗаполненияОбъектовБД.Форма.ФормаПодбораРеквизитов",Новый Структура("ДокументБД,СписокРеквизитов,ТекущийОбъект",Объект.Владелец,СписокРеквизитов,Истина));	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейРасчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
			
	Если Поле.Имя="ПроцедураРедактирования" И (Не Элементы.ТаблицаПоказателейРасчета.ТекущиеДанные=Неопределено) Тогда
		
		СтандартнаяОбработка=Ложь;
		
		Если Модифицированность Тогда
			
			Записать();
			
		КонецЕсли;
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("НазначениеРасчетов",	Объект.Ссылка);
		СтруктураПараметров.Вставить("ПотребительРасчета",	Элементы.ТаблицаПоказателейРасчета.ТекущиеДанные.Ссылка);
		СтруктураПараметров.Вставить("СпособИспользования",	ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД"));
		
		ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФормулРасчета",СтруктураПараметров);
		
	КонецЕсли;
		
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ТекущийОбъект.Ссылка,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоОбъектуБДПриИзменении(Элемент)
	
	Если Объект.ПоОбъектуБД=0 Тогда
		
		Объект.ИсходныйОбъектБД="";
		
		ПроверитьНаличиеПоказателейОбъектовБД();
		ЭтаФорма.ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеПоказателейОбъектовБД()
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОбъектовБД.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОбъектовБД КАК ПоказателиОбъектовБД
	|ГДЕ
	|	ПоказателиОбъектовБД.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбщегоНазначенияУХ.ПодготовитьПоказателиДляЗаполненияОбъектов(Объект.Владелец);
		ОбновитьТаблицуШаблонов();
		
	КонецЕсли;
			
КонецПроцедуры // ПроверитьНаличиеПоказателейОбъектовБД() 

&НаКлиенте
Процедура ПланСчетовПоУмолчаниюПриИзменении(Элемент)
	
	ПриИзмененииПланаСчетов();	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПланаСчетов()
	
	МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(Объект.ПланСчетовПоУмолчанию);
	
	Если МассивРегистров.Количество()>0 Тогда
		
		Объект.РегистрБухгалтерииПоУмолчанию=МассивРегистров[0];
		ОбновитьСписокРесурсовРегистра();
		
	Иначе
		
		Объект.РегистрБухгалтерииПоУмолчанию="";
		Элементы.РесурсРегистраПоУмолчанию.СписокВыбора.Очистить();
		
	КонецЕсли;	
	
КонецПроцедуры // ПриИзмененииПланаСчетов()

&НаСервере
Процедура ОбновитьСписокРесурсовРегистра()
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрБухгалтерииПоУмолчанию) Тогда
		
		Объект.РесурсРегистраПоУмолчанию="";
		Возврат;
		
	КонецЕсли;
	
	ТекЗначениеРесурса=Объект.РесурсРегистраПоУмолчанию;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБДРесурсы.Имя КАК Имя,
	|	РегистрыБухгалтерииБДРесурсы.Синоним
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД.Ресурсы КАК РегистрыБухгалтерииБДРесурсы
	|ГДЕ
	|	РегистрыБухгалтерииБДРесурсы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрыБухгалтерииБДРесурсы.ПризнакУчета";
	
	Запрос.УстановитьПараметр("Ссылка",Объект.РегистрБухгалтерииПоУмолчанию);
	
	Элементы.РесурсРегистраПоУмолчанию.СписокВыбора.Очистить();
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		РегистрОбъект=Объект.РегистрБухгалтерииПоУмолчанию.ПолучитьОбъект();
		РегистрОбъект.ЗаполнитьРеквизитыОбъекта();
		РегистрОбъект.Записать();
		
		Для Каждого Ресурс ИЗ РегистрОбъект.Ресурсы Цикл
			
			Элементы.РесурсРегистраПоУмолчанию.СписокВыбора.Добавить(Ресурс.Имя,Ресурс.Синоним);
			
		КонецЦикла;
		
	Иначе
		
		ДанныеРесурсов=Результат.Выбрать();
		
		Пока ДанныеРесурсов.Следующий() Цикл
			
			Элементы.РесурсРегистраПоУмолчанию.СписокВыбора.Добавить(ДанныеРесурсов.Имя,ДанныеРесурсов.Синоним);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Элементы.РесурсРегистраПоУмолчанию.СписокВыбора.НайтиПоЗначению(ТекЗначениеРесурса)=Неопределено Тогда
		
		Объект.РесурсРегистраПоУмолчанию=ТекЗначениеРесурса;
		
	Иначе
		
		Объект.РесурсРегистраПоУмолчанию=Элементы.РесурсРегистраПоУмолчанию.СписокВыбора[0].Значение;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПолучитьСписокРесурсовРегистра()

&НаКлиенте
Процедура РегистрБухгалтерииПоУмолчаниюПриИзменении(Элемент)
	
	ОбновитьСписокРесурсовРегистра();
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПоОбъектуТекущейИБ Тогда 
		
		Объект.ПоОбъектуБД=1;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроизвольныйКодПриИзменении(Элемент)
	
	Если Объект.ПроизвольныйКодПослеЗаполнения Тогда
		
		Объект.ПроизвольныйКодПослеЗаполнения=Ложь;
		
	КонецЕсли;
			
	УстановитьВидимость();
	
	Если ПустаяСтрока(Объект.ПроцедураЗаполнения) Тогда
		
		Объект.ПроцедураЗаполнения="
		|// Если предполагается заполнение объекта на основании исходного документа, в процедуре
		|// необходимо использовать две зарезервированные переменные:
		|// ИсходныйОбъектСсылка: ссылка на исходный документ базы данных
		|// ДокументОбъект: заполняемый объект.";
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроизвольныйКодПослеЗаполненияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры


&НаСервере
Функция ПроверитьПроизвольныйКодНаСервере()
	
	Если ПустаяСтрока(Объект.ПроцедураЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		ИсходныйОбъект=Документы[Объект.ИсходныйОбъектБД.Наименование].СоздатьДокумент();
		ИсходныйОбъект.Дата=ТекущаяДата();
		
		ИсходныйОбъектСсылка=ИсходныйОбъект.Ссылка;
		ДокументОбъект=Документы[Объект.Владелец.Наименование].СоздатьДокумент();
		ДокументОбъект.Дата=ТекущаяДата();
		
		Попытка
			
			Выполнить (Объект.ПроцедураЗаполнения);
			Возврат Истина;
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Информация);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		ТекСоединениеВИБ = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ТипБДПриемник.ВИБПоУмолчанию, 1);
				
		Если ТекСоединениеВИБ=Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ДокументОбъект=ТекСоединениеВИБ.Документы[Объект.Владелец.Наименование].СоздатьДокумент();
		ДокументОбъект.Дата=ТекущаяДата();
		
		Попытка
			
			Выполнить (Объект.ПроцедураЗаполнения);
			Возврат Истина;
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Информация);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьПроизвольныйКодНаСервере() 


&НаКлиенте
Процедура ПроверитьПроизвольныйКод(Команда)
	
	Если НЕ ПроверитьПроизвольныйКодНаСервере() Тогда
		
		Сообщить(Нстр("ru = 'Обнаружены ошибки.'"));
		
	Иначе
		
		Сообщить(Нстр("ru = 'Проверка успешно пройдена.'"));
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПоказателиБД(Команда)
	
	ОбновитьПоказателиБДСервер();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиБДСервер()
	
	ОбщегоНазначенияУХ.ПодготовитьПоказателиДляЗаполненияОбъектов(Объект.Владелец);
	ОбновитьТаблицуШаблонов();
	
КонецПроцедуры // ОбновитьПоказателиБДСервер()


&НаКлиенте
Процедура СоздатьПоказатьИсточникДанных(СтруктураПараметров)
	
	Если Объект.ПоОбъектуБД=1 И (НЕ ЗначениеЗаполнено(Объект.ИсходныйОбъектБД)) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан исходный объект'"));
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Объект еще не записан. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ЗаписьПередСозданиемИсточникаЗавершение",ЭтаФорма,СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 30);
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьИсточникДанныхДляЗаполнения(СтруктураПараметров);	
	
КонецПроцедуры // СоздатьПоказатьИсточникДанных()

&НаКлиенте
Процедура ОткрытьИсточникШапки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИсточникДляЗаполненияШапки) Тогда
					
		СтруктураПараметров=Новый Структура("ОбъектБД,ТабличнаяЧастьБД",Объект.Владелец,Неопределено);
		СоздатьПоказатьИсточникДанных(СтруктураПараметров);
						
	Иначе
		
		ПоказатьЗначение(,Объект.ИсточникДляЗаполненияШапки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПередСозданиемИсточникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записать();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			СоздатьИсточникДанныхДляЗаполнения(ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсточникДанныхДляЗаполнения(СтруктураПараметров)
		
	ИсточникСсылка=СоздатьИсточникДанных(Объект.Ссылка,?(СтруктураПараметров.ТабличнаяЧастьБД=Неопределено,СтруктураПараметров.ОбъектБД,СтруктураПараметров.ТабличнаяЧастьБД),Объект.ИсходныйОбъектБД,ТипБДПриемник);
	
	Если ИсточникСсылка=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТабличнаяЧастьБД=Неопределено Тогда
		
		Объект.ИсточникДляЗаполненияШапки=ИсточникСсылка;
		СформироватьЗаголовокКомандыИсточникШапка();
		
	Иначе
		
		СтрИсточникТЧ=Объект.ИсточникиДляЗаполненияТЧ.НайтиСтроки(Новый Структура("ТабличнаяЧасть",СтруктураПараметров.ТабличнаяЧастьБД));
		СтрИсточникТЧ[0].ИсточникДанных=ИсточникСсылка;
		СтрИсточникТЧ[0].Используется=Истина;
		
	КонецЕсли;
	
	Записать();
	ПоказатьЗначение(,ИсточникСсылка);
		
КонецПроцедуры // СоздатьИсточникДанныхДляЗаполнения(СтруктураПараметров)

&НаСервереБезКонтекста
Функция СоздатьИсточникДанных(НазначениеРасчетов,ПотребительРасчета,ИсходныйОбъектБД,ТипБДПриемник)
	
	СправочникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	СправочникОбъект.НазначениеРасчетов=НазначениеРасчетов;
	СправочникОбъект.ПотребительРасчета=ПотребительРасчета;
	СправочникОбъект.ОбъектБД=ИсходныйОбъектБД;
	СправочникОбъект.ТипБДПриемник=ТипБДПриемник;
	СправочникОбъект.ТипБД=НазначениеРасчетов.ТипБД;

	Если ЗначениеЗаполнено(ИсходныйОбъектБД) Тогда
		
		Если ТипЗнч(ИсходныйОбъектБД)=Тип("СправочникСсылка.СправочникиБД") Тогда
		
			Если ИсходныйОбъектБД.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
				
				СправочникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники;
				
			Иначе
				
				СправочникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники;
				
			КонецЕсли;
			
		Иначе
			
			Если ИсходныйОбъектБД.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
				
				СправочникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы;
				
			Иначе
				
				СправочникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы;
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СправочникОбъект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
		
		СправочникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO;
		
	КонецЕсли;
	
	СправочникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();			
	СправочникОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД;
	СправочникОбъект.мМодифицированность=Истина;
	СправочникОбъект.СохранитьНастройкиОперанда();
	
	Попытка
		
		СправочникОбъект.Записать();
		Возврат СправочникОбъект.Ссылка;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // СоздатьИсточникДанных() 

&НаКлиенте
Процедура ИсточникиДляЗаполненияТЧВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ИсточникиДляЗаполненияТЧИсточникДанных" Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ТекущийИсточник=Элементы.ИсточникиДляЗаполненияТЧ.ТекущиеДанные.ИсточникДанных;
		
		Если НЕ ЗначениеЗаполнено(ТекущийИсточник) Тогда
			
			СтруктураПараметров=Новый Структура("ОбъектБД,ТабличнаяЧастьБД",Объект.Владелец,Элементы.ИсточникиДляЗаполненияТЧ.ТекущиеДанные.ТабличнаяЧасть);
			СоздатьПоказатьИсточникДанных(СтруктураПараметров);
			
		Иначе
			
			ПоказатьЗначение(,ТекущийИсточник);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипБДПриИзменении(Элемент)
	
	ПриИзмененииТипаБД();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаБД()
	
	Если Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда

		Объект.ПоОбъектуБД=0;
		Объект.ИсходныйОбъектБД=Неопределено;
		
	КонецЕсли;	
		
	ОбновитьИсточникиДанныхОбъекта();
		
КонецПроцедуры // ПриИзмененииТипаБД() 









