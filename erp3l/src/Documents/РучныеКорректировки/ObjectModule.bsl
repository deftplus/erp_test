
Перем ТекТаблицаЗаписи Экспорт;
Перем ВремТаблицаЗаписей Экспорт;

// Переменные, предназначеннные для программного заполнения таблиц сверки и элиминации ВГО
Перем СтруктураСверки Экспорт;
Перем СписокОрганизаций;

Перем КэшГруппРаскрытия Экспорт;

Перем мСоответствиеНаборовЗаписей; 	// Соответстие, ключом которого является имя таблицы регистра, а значением - структура, содержащая
								 	// соответствующий набор записей
									
Перем АдресХранилищаПеременныхДляРасчета Экспорт;



Функция ВернутьДанныеПоКоличествуАналитик(ВидОтчета,Показатель) Экспорт
	
	Если КэшГруппРаскрытия = Неопределено Тогда
		
		КэшГруппРаскрытия = Новый ТаблицаЗначений;
		КэшГруппРаскрытия.Колонки.Добавить("ВидОтчета", Новый ОписаниеТипов("СправочникСсылка.ВидыОтчетов"));
		КэшГруппРаскрытия.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
				
		КэшГруппРаскрытия.Колонки.Добавить("ЧислоАналитикВидаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
		КэшГруппРаскрытия.Колонки.Добавить("ЧислоАналитикПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
		
		КэшГруппРаскрытия.Индексы.Добавить("ВидОтчета,Показатель");
		
	КонецЕсли;
	
	МассивДанных=КэшГруппРаскрытия.НайтиСтроки(Новый Структура("ВидОтчета,Показатель",ВидОтчета,Показатель));
	
	Если МассивДанных.Количество()>0 Тогда
		
		Возврат МассивДанных[0];
		
	Иначе
		
		НоваяСтрока=КэшГруппРаскрытия.Добавить();
		НоваяСтрока.ВидОтчета=ВидОтчета;
		НоваяСтрока.Показатель=Показатель;
		НоваяСтрока.ЧислоАналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
		НоваяСтрока.ЧислоАналитикПоказателя=?(ЗначениеЗаполнено(Показатель.ГруппаРаскрытия),Показатель.ГруппаРаскрытия.ЧислоАналитик,0);
		
		Возврат НоваяСтрока;
		
	КонецЕсли;
			
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		
		УправлениеОтчетамиУХ.ОчиститьЗначенияПоказателейОтчетов(Ссылка,Отказ);							
		Возврат	
		
	ИначеЕсли РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		
		УправлениеОтчетамиУХ.ОчиститьЗначенияПоказателейОтчетов(Ссылка,Отказ);
		
	КонецЕсли;
				
	ШапкаОшибки = "Документ """ + ЭтотОбъект + """ не может быть проведен:";
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(" - не заполнен реквизит ""Сценарий""!", Отказ, ШапкаОшибки); 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодОтчета) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(" - не заполнен реквизит ""ПериодОтчета""!", Отказ, ШапкаОшибки); 
	КонецЕсли;
	
	ТекТабОперации=РедактируемыеЗаписи.Выгрузить().СкопироватьКолонки();
	
	Для Каждого Операция Из Операции Цикл
		
		ТекТабОперации.Очистить();
		
		ЗаписиОперации = РедактируемыеЗаписи.НайтиСтроки(Новый Структура("НомерОперации", Операция.НомерОперации));
		
		Для Каждого СтрОперации ИЗ ЗаписиОперации Цикл
			
			НоваяСтрока=ТекТабОперации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОперации);
			
		КонецЦикла;
		
		ТекстОшибки=ПроверитьОперацию(Операция, ТекТабОперации,Отказ);
		Если Отказ=Истина Тогда
			#Если Клиент Тогда
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			#КонецЕсли
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Процедура - обработчик события объекта "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	АктивностьДвижений = ПолучитьАктивностьДвижений(ЭтотОбъект.Операции, ПометкаУдаления);
	
	Для Каждого СтрОперация ИЗ Операции Цикл	
		
		МеткаВерсии = "РК" + Номер + "-" + Формат(СтрОперация.НомерОперации, "ЧЦ=3; ЧВН=");
		
		Отбор = Новый Структура("НомерОперации", СтрОперация.НомерОперации);
		
		Обработки.КорректировкиЗначенийПоказателей.СформироватьКорректировкиЗначенийПоказателей(
			ЭтотОбъект, Записи.Выгрузить(Отбор), МеткаВерсии, РежимПроведения, Отказ, АктивностьДвижений);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьАктивностьДвижений(Операции, ПометкаУдаленияДокумента)
    
   	ТабЭкземплярОтчета = Записи.Выгрузить(, "ЭкземплярОтчета");
	ТабЭкземплярОтчета.Свернуть("ЭкземплярОтчета");

    Контекст = Новый Структура("ПометкаУдаления,Состояние", ПометкаУдаленияДокумента, Неопределено);
	
	АктивностьДвижений = Истина;
	
    Для Каждого СтрокаТаб Из ТабЭкземплярОтчета.ВыгрузитьКолонку("ЭкземплярОтчета") Цикл
        
        Контекст.Состояние = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(СтрокаТаб);
        Если Не УправлениеОтчетамиУХ.ПолучитьПризнакАктивностиДвижений(Контекст) Тогда
            АктивностьДвижений = Ложь;
			Прервать;
        КонецЕсли;
        
    КонецЦикла;

	Возврат АктивностьДвижений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьЭкземплярОтчетаПоСтроке(СтрокаЗаписи,ПоВидуОтчета=Ложь) Экспорт
	
	ЗапросОтчеты=Новый Запрос;
	ЗапросОтчеты.Текст="ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК ЭкземплярОтчета
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.Проект = &Проект
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета";
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
		
		ЗапросОтчеты.Текст=ЗапросОтчеты.Текст+"
		|	И НастраиваемыйОтчет.ОсновнаяВалюта = &Валюта";
		
		ЗапросОтчеты.УстановитьПараметр("Валюта",ОсновнаяВалюта);
		
	КонецЕсли;	
		
	ЗапросОтчеты.УстановитьПараметр("Проект",СтрокаЗаписи.Проект);	
	ЗапросОтчеты.УстановитьПараметр("Организация",СтрокаЗаписи.Организация);
	ЗапросОтчеты.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
	ЗапросОтчеты.УстановитьПараметр("Сценарий",Сценарий);
	ЗапросОтчеты.УстановитьПараметр("ВидОтчета",?(НЕ ПоВидуОтчета,СтрокаЗаписи.Показатель.Владелец,СтрокаЗаписи.ВидОтчета));
	
	ТекОтчет=ЗапросОтчеты.Выполнить().Выбрать();
	Если ТекОтчет.Следующий() Тогда
		СтрокаЗаписи.ЭкземплярОтчета=ТекОтчет.ЭкземплярОтчета;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЭкземплярОтчетаПоСтроке()

Функция ПолучитьЭкземплярОтчета(Организация,ВидОтчета,СценарийОтчета,ПроверятьНаличие=Истина,СоздаватьНовые=Истина,Комментарий="",Проект=Неопределено) Экспорт 
	
	Возврат Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(Организация,ПериодОтчета,СценарийОтчета,ВидОтчета,ОсновнаяВалюта,ПроверятьНаличие,СоздаватьНовые,Комментарий,Проект);
	
КонецФункции // ПолучитьЭкземплярОтчета() 

Функция ПроверитьОперацию(Операция, ЗаписиОперации,Отказ=Ложь) Экспорт 
	
	Если Операция.Элиминация Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОшибки = "";
	Если Операция.Сбалансированная Тогда
		МассивСумм=Новый Массив;
		МассивСумм.Добавить(ЗаписиОперации);
		Если Обработки.КорректировкиЗначенийПоказателей.ПолучитьСуммуБаланса(Операция, МассивСумм).Значение <> 0 Тогда
			ТекстОшибки = ТекстОшибки + "Операция "+Операция.НомерОперации+": для сбалансированных операций сумма по всем записям операции должна быть равна нулю!" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	МассивОбработанных=Новый Массив;
	МассивЗаблокированных=Новый Массив;
	
	Для Каждого Запись Из ЗаписиОперации Цикл
		Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
			ТекстОшибки = ТекстОшибки + "Операция "+Операция.НомерОперации+": в строке " + (ЗаписиОперации.Индекс(Запись) + 1) + " не указана организационная единица!" + Символы.ПС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Запись.ЭкземплярОтчета) Тогда
			ТекстОшибки = ТекстОшибки + "Операция "+Операция.НомерОперации+": в строке " + (ЗаписиОперации.Индекс(Запись) + 1) + " не указан экземпляр отчета" + Символы.ПС;
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(Запись.ЭкземплярОтчета) Тогда
			
			ТекстБлокировки = "Операция "+Операция.НомерОперации+": в строке " + (ЗаписиОперации.Индекс(Запись) + 1) + "
			|указан "+Запись.ЭкземплярОтчета+", который в настоящий момент редактируется.
			|Запрещено вводить ручные корректировки
			|экземпляра отчета в случае, когда он редактируется в основной форме."+ Символы.ПС;
			
			Если МассивОбработанных.Найти(Запись.ЭкземплярОтчета)=Неопределено Тогда
				
				ДокументОбъект=Запись.ЭкземплярОтчета.ПолучитьОбъект();
				МассивОбработанных.Добавить(Запись.ЭкземплярОтчета);
				
				Попытка
					
					ДокументОбъект.Заблокировать();
					ДокументОбъект.Разблокировать();
					
				Исключение				
					
					ТекстОшибки = ТекстОшибки + ТекстБлокировки;
					МассивЗаблокированных.Добавить(Запись.ЭкземплярОтчета);
					
				КонецПопытки;
				
			ИначеЕсли НЕ МассивЗаблокированных.Найти(Запись.ЭкземплярОтчета)=Неопределено Тогда
				
				ТекстОшибки = ТекстОшибки + ТекстБлокировки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Запись.Показатель) Тогда
			ТекстОшибки = ТекстОшибки + "Операция "+Операция.НомерОперации+": в строке " + (ЗаписиОперации.Индекс(Запись) + 1) + " не выбран показатель!" + Символы.ПС;
		КонецЕсли;
		
		МассивДублей=Новый Массив;
		
		СтруктураОтбора = Новый Структура("Организация, Показатель,Проект", Запись.Организация, Запись.Показатель,Запись.Проект);
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураОтбора.Вставить("Аналитика" + Инд, Запись["Аналитика" + Инд]);
		КонецЦикла;
		
		СтруктураОтбора.Вставить("АналитикаВалюта", Запись["АналитикаВалюта"]);

		Если НЕ ЗаписиОперации.Колонки.Найти("Валюта")=Неопределено Тогда
			СтруктураОтбора.Вставить("Валюта", Запись.Валюта);
		КонецЕсли;
		
		Если ЗаписиОперации.НайтиСтроки(СтруктураОтбора).Количество() > 1 И МассивДублей.Найти(Запись)=Неопределено Тогда
			
			ТекстОшибки = ТекстОшибки + "Операция "+Операция.НомерОперации+" содержит корректировки с одинаковыми измерениями:"+Символы.ПС;
			
			Для Каждого ЭлементОтбора ИЗ СтруктураОтбора Цикл
				
				Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
					
					ТекстОшибки=ТекстОшибки+ЭлементОтбора.Ключ+": "+ЭлементОтбора.Значение+Символы.ПС;
					
				КонецЕсли;
				
			КонецЦикла;
			
			МассивДублей.Добавить(Запись);
			
		КонецЕсли;
		
	Конеццикла;
	Если ТекстОшибки <> "" Тогда
		Отказ=Истина;
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ЭтоРедактируемаяЗапись(СтрокаТабЧастиЗаписи) Экспорт
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("НомерОперации", СтрокаТабЧастиЗаписи.НомерОперации);
	СтруктураПоиска.Вставить("ЭкземплярОтчета", СтрокаТабЧастиЗаписи.ЭкземплярОтчета);
	СтруктураПоиска.Вставить("Показатель", СтрокаТабЧастиЗаписи.Показатель);
//	СтруктураПоиска.Вставить("Сумма", СтрокаТабЧастиЗаписи.Сумма);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл		
		СтруктураПоиска.Вставить("Аналитика" + Инд, СтрокаТабЧастиЗаписи["Аналитика" + Инд]);			
	КонецЦикла;
	
	Возврат РедактируемыеЗаписи.НайтиСтроки(СтруктураПоиска).Количество() = 1;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, НЕОБХОДИМЫЕ ДЛЯ РЕАЛИЗАЦИИ WEB-ИНТЕРФЕЙСА

Функция ПолучитьЗаписиОперации(НомерОперации) Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Тип("Булево");
	ТипСтрока = Тип("Строка");
	ТипДата = Тип("Дата");
	ТипЧисло = Тип("Число");
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	Для Каждого Рекв Из Метаданные.Документы.РучныеКорректировки.ТабличныеЧасти.РедактируемыеЗаписи.Реквизиты Цикл
		РеквТип = Рекв.Тип;
		ТаблицаЗаписей.Колонки.Добавить(Рекв.Имя, РеквТип);
		ПрисутствуютСсылочныеТипы = Ложь;
		Для Каждого РеквТипыТип Из РеквТип.Типы() Цикл
			Если РеквТипыТип <> ТипБулево И РеквТипыТип <> ТипСтрока И РеквТипыТип <> ТипЧисло И РеквТипыТип <> ТипДата Тогда
				ПрисутствуютСсылочныеТипы = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПрисутствуютСсылочныеТипы Тогда
			ТаблицаЗаписей.Колонки.Добавить(Рекв.Имя + "Представление", ОписаниеТиповСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ИскомыеЗаписи = РедактируемыеЗаписи.НайтиСтроки(Новый Структура("НомерОперации", НомерОперации));
	Для Каждого ИскомаяЗапись Из ИскомыеЗаписи Цикл
		НовСтр = ТаблицаЗаписей.Добавить();
		Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
			Если Метаданные.Документы.РучныеКорректировки.ТабличныеЧасти.РедактируемыеЗаписи.Реквизиты.Найти(Колонка.Имя) = Неопределено Тогда
				ЗначениеПредположительноСсылочногоПоля = ИскомаяЗапись[Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - СтрДлина("Представление"))];
				ТипЗнчЗначенияСсылочногоПоля = ТипЗнч(ЗначениеПредположительноСсылочногоПоля);
				Если ТипЗнчЗначенияСсылочногоПоля = ТипБулево ИЛИ ТипЗнчЗначенияСсылочногоПоля = ТипСтрока
					ИЛИ ТипЗнчЗначенияСсылочногоПоля = ТипДата ИЛИ ТипЗнчЗначенияСсылочногоПоля = ТипЧисло ИЛИ ТипЗнчЗначенияСсылочногоПоля = Неопределено Тогда
					НовСтр[Колонка.Имя] = ЗначениеПредположительноСсылочногоПоля;
				Иначе
					НовСтр[Колонка.Имя] = Строка(ЗначениеПредположительноСсылочногоПоля);
				КонецЕсли;
			Иначе
				НовСтр[Колонка.Имя] = ИскомаяЗапись[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЗаписей;
	
КонецФункции

Функция ПолучитьПустуюОперацию() Экспорт
	
	ПустаяОперация = Новый Структура;
	Для Каждого Рекв Из Метаданные.Документы.РучныеКорректировки.ТабличныеЧасти.Операции.Реквизиты Цикл
		Если Рекв.Имя <> "НомерОперации" Тогда
			ПустаяОперация.Вставить(Рекв.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат ПустаяОперация;
	
КонецФункции

Функция ПолучитьПустуюТаблицуЗаписейОперации() Экспорт
	
	ПустаяТаблицаЗаписей = новый ТаблицаЗначений;
	Для Каждого Рекв Из Метаданные.Документы.РучныеКорректировки.ТабличныеЧасти.РедактируемыеЗаписи.Реквизиты Цикл
		ПустаяТаблицаЗаписей.Колонки.Добавить(Рекв.Имя, Рекв.Тип);
	КонецЦикла;
	Возврат ПустаяТаблицаЗаписей;
	
Конецфункции

Функция РедактироватьОперацию(НомерОперации, Знач РеквизитыОперации, РедактируемыеЗаписиОперации) Экспорт
	
	Если ТипЗнч(РеквизитыОперации)=Тип("Структура") Тогда
		РеквизитыОперации.Вставить("НомерОперации",НомерОперации);
	КонецЕсли;
	
	Для Каждого Запись Из РедактируемыеЗаписиОперации Цикл
		Запись.НомерОперации = НомерОперации;
	КонецЦикла;
	
	РезультатПроверки = ПроверитьОперацию(РеквизитыОперации, РедактируемыеЗаписиОперации);
	Если РезультатПроверки <> "" Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Операция = Операции.Найти(НомерОперации, "НомерОперации");
	ЗаполнитьЗначенияСвойств(Операция, РеквизитыОперации);
	
	МассивОперации=Новый Массив;
	МассивОперации.Добавить(РедактируемыеЗаписиОперации);
	
	Операция.Значение = Обработки.КорректировкиЗначенийПоказателей.ПолучитьСуммуБаланса(РеквизитыОперации, МассивОперации).Значение;
	
	СтрОтбора = Новый Структура("НомерОперации", НомерОперации);
	СтарыеЗаписиОперации = Записи.НайтиСтроки(СтрОтбора);
	Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
		Записи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	СтрОтбора = Новый Структура("НомерОперации", Операция.НомерОперации);
	СтарыеЗаписиОперации = РедактируемыеЗаписи.НайтиСтроки(СтрОтбора);
	Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
		РедактируемыеЗаписи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(РедактируемыеЗаписиОперации,РедактируемыеЗаписи);
	
	ПараметрыОбработки=Новый Структура;
	ПараметрыОбработки.Вставить("ДокументОбъект",		ЭтотОбъект);
	ПараметрыОбработки.Вставить("НомерОперации",		Операция.НомерОперации);
	ПараметрыОбработки.Вставить("ТаблицаСтрок",			Неопределено);
	ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
	ПараметрыОбработки.Вставить("Сбалансированная",		Операция.Сбалансированная);
	ПараметрыОбработки.Вставить("Трансформационная",	Ложь);
	ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);
	
	ТабЗаписиТек=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
	
	Если ТабЗаписиТек.Количество()>0 Тогда
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТабЗаписиТек,Записи);
		
	КонецЕсли;
		
	Возврат "";
	
КонецФункции

Функция ДобавитьОперацию(РеквизитыОперации, РедактируемыеЗаписиОперации) Экспорт
	
	Для НомерОперации = 1 По 9999 Цикл
		Если Операции.Найти(НомерОперации, "НомерОперации") = Неопределено Тогда
			Операция = Операции.Добавить();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Операция, РеквизитыОперации);
	Операция.НомерОперации = НомерОперации;
	
	МассивОперации=Новый Массив;
	МассивОперации.Добавить(РедактируемыеЗаписиОперации);
	
	Операция.Значение = Обработки.КорректировкиЗначенийПоказателей.ПолучитьСуммуБаланса(РеквизитыОперации, МассивОперации).Значение;
	
	Для Каждого Запись Из РедактируемыеЗаписиОперации Цикл
		НоваяЗапись = РедактируемыеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		НоваяЗапись.НомерОперации = НомерОперации;
	КонецЦикла;
	
	ПараметрыОбработки=Новый Структура;
	ПараметрыОбработки.Вставить("ДокументОбъект",		ЭтотОбъект);
	ПараметрыОбработки.Вставить("НомерОперации",		Операция.НомерОперации);
	ПараметрыОбработки.Вставить("ТаблицаСтрок",			Неопределено);
	ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
	ПараметрыОбработки.Вставить("Сбалансированная",		Операция.Сбалансированная);
	ПараметрыОбработки.Вставить("Трансформационная",	Ложь);
	ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);
	
	ТабЗаписиТек=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
	
	Если ТабЗаписиТек.Количество()>0 Тогда
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТабЗаписиТек,Записи);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура УдалитьОперацию(НомерОперации) Экспорт
	
	УдаляемаяОперация = Операции.Найти(НомерОперации, "НомерОперации");
	Если УдаляемаяОперация <> Неопределено Тогда
		Операции.Удалить(УдаляемаяОперация);
	КонецЕсли;
	
	УдаляемыеЗаписи = Записи.НайтиСтроки(Новый Структура("НомерОперации", НомерОперации));
	Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
		Записи.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
	УдаляемыеЗаписи = РедактируемыеЗаписи.НайтиСтроки(Новый Структура("НомерОперации", НомерОперации));
	Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
		РедактируемыеЗаписи.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
КонецПроцедуры

//////////////// Процедуры автоматической элиминации ///////////////////////////////////////////////////
//

// Подготавливает исходную таблицу для сверки
//
Процедура ЗаполнитьТаблицуСверки() Экспорт
	
	Если НЕ ТипЗнч(СтруктураСверки)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательБазис,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательБазис.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение.ГруппаРаскрытия КАК ГруппаРаскрытияСоответствие,
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаБазис,
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаСравнение,
	|	СоответствиеВнутригрупповыхПоказателей.СоответствиеАналитик,
	|	ЭкземплярУрегулирование.Ссылка КАК ЭкземплярОтчетаУрегулирование
	|ИЗ
	|	РегистрСведений.СоответствиеВнутригрупповыхПоказателей КАК СоответствиеВнутригрупповыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НастраиваемыйОтчет.Ссылка КАК Ссылка,
	|			НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета
	|		ИЗ
	|			Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ГДЕ
	|			НастраиваемыйОтчет.Организация = &Организация
	|			И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|			И НастраиваемыйОтчет.Сценарий = &СценарийУрегулирование) КАК ЭкземплярУрегулирование
	|		ПО СоответствиеВнутригрупповыхПоказателей.ВидОтчетаСравнение = ЭкземплярУрегулирование.ВидОтчета";
	
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("СценарийУрегулирование",СценарийДляНеурегулированныхОтклонений);
	
	ТабРезультат=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрСоотвествие ИЗ ТабРезультат Цикл
		
		// Определяем номер аналитики с типом "Организации" для первого и второго показателей
		
		НомерИсходной=0;
		НомерСоответствие=0;
		
		АналитикОтчетаБазис=0;
		АналитикОтчетаСравнение=0;
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(СтрСоотвествие.ВидОтчетаБазис["ВидАналитики"+Инд]) Тогда
				
				АналитикОтчетаБазис=АналитикОтчетаБазис+1;
				Продолжить;
				
			ИначеЕсли ЗначениеЗаполнено(СтрСоотвествие.ГруппаРаскрытия["ВидАналитики"+Инд]) И СтрСоотвествие.ГруппаРаскрытия["ВидАналитики"+Инд].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации") Тогда
				
				НомерИсходной=Инд;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(СтрСоотвествие.ВидОтчетаСравнение["ВидАналитики"+Инд]) Тогда
				
				АналитикОтчетаСравнение=АналитикОтчетаСравнение+1;
				Продолжить;
				
			ИначеЕсли ЗначениеЗаполнено(СтрСоотвествие.ГруппаРаскрытияСоответствие["ВидАналитики"+Инд]) И СтрСоотвествие.ГруппаРаскрытияСоответствие["ВидАналитики"+Инд].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации") Тогда
				
				НомерСоответствие=Инд;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МаксНомерАналитик=Макс(НомерИсходной,СтрСоотвествие.ГруппаРаскрытия.ЧислоАналитик);
		
		Запрос.Текст="ВЫБРАТЬ
		|	СравнениеГруппировка.ОрганизацияБазис,
		|	ЭкземплярыОтчетов.ЭкземплярОтчета КАК ЭкземплярОтчетаБазис,
		|	СравнениеГруппировка.ОрганизацияСравнение,
		|	ЭкземплярыСравнение.ЭкземплярОтчета КАК ЭкземплярОтчетаСравнение,
		|	СравнениеГруппировка.ЗначениеБазис,
		|	СравнениеГруппировка.ЗначениеСравнение,
		|	СуществующиеЭлиминации.ОрганизацияБазис КАК СуществующаяЭлиминация
		|ИЗ
		|	(ВЫБРАТЬ
		|		СравнениеПоказателей.ОрганизацияБазис КАК ОрганизацияБазис,
		|		СравнениеПоказателей.ОрганизацияСравнение КАК ОрганизацияСравнение,
		|		СУММА(СравнениеПоказателей.ЗначениеБазис) КАК ЗначениеБазис,
		|		СУММА(СравнениеПоказателей.ЗначениеСравнение) КАК ЗначениеСравнение
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВерсииЗначенийПоказателей.Организация КАК ОрганизацияБазис,
		|			ЗначенияПоказателейОтчетов.Аналитика"+НомерИсходной+" КАК ОрганизацияСравнение,
		|			ЗначенияПоказателейОтчетов.Значение КАК ЗначениеБазис,
		|			0 КАК ЗначениеСравнение
		|		ИЗ
		|			РегистрСведений.ЗначенияПоказателейОтчетов"+МаксНомерАналитик+" КАК ЗначенияПоказателейОтчетов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей 
		|			ПО ЗначенияПоказателейОтчетов.Версия=ВерсииЗначенийПоказателей.Ссылка 
		|		ГДЕ
		|			ЗначенияПоказателейОтчетов.Показатель = &ПоказательБазис";
		
		Если СтруктураСверки.Свойство("ОрганизацияБазис") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Организация=&ОрганизацияБазис";
			
			Запрос.УстановитьПараметр("ОрганизацияБазис",СтруктураСверки.ОрганизацияБазис);
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Организация.ТипОрганизации=&ТипОрганизацийДляСверки
			|И ВерсииЗначенийПоказателей.Организация В(&СоставПериметра)";
			
			Запрос.УстановитьПараметр("ТипОрганизацийДляСверки",ТипОрганизацийДляСверки);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Валюта=&Валюта";
			
		КонецЕсли;	
		
		Если СтруктураСверки.Свойство("ОрганизацияСравнение")  Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ЗначенияПоказателейОтчетов.Аналитика"+НомерИсходной+"=&ОрганизацияСравнение";
			
			Запрос.УстановитьПараметр("ОрганизацияСравнение",СтруктураСверки.ОрганизацияСравнение);
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И ((НЕ ЗначенияПоказателейОтчетов.Аналитика"+НомерИсходной+"=Неопределено) И ЗначенияПоказателейОтчетов.Аналитика"+НомерИсходной+".ТипОрганизации=&ТипОрганизацийДляСверки)
			|И ЗначенияПоказателейОтчетов.Аналитика"+НомерИсходной+" В(&СоставПериметра)";
			
			Запрос.УстановитьПараметр("ТипОрганизацийДляСверки",ТипОрганизацийДляСверки);
			
		КонецЕсли;
		
		МаксНомерАналитик=Макс(НомерСоответствие,СтрСоотвествие.ГруппаРаскрытияСоответствие.ЧислоАналитик);
		
		Запрос.Текст=Запрос.Текст+"
		|			И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|			И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
		|			И ВерсииЗначенийПоказателей.Регистратор <> &ТекущийДокумент
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗначенияПоказателейОтчетов.Аналитика"+НомерСоответствие+",
		|			ВерсииЗначенийПоказателей.Организация,
		|			0,
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИЗ
		|			РегистрСведений.ЗначенияПоказателейОтчетов"+МаксНомерАналитик+" КАК ЗначенияПоказателейОтчетов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей 
		|			ПО ЗначенияПоказателейОтчетов.Версия=ВерсииЗначенийПоказателей.Ссылка
		|		ГДЕ
		|			ЗначенияПоказателейОтчетов.Показатель = &ПоказательСравнение";
		
		Если СтруктураСверки.Свойство("ОрганизацияСравнение") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Организация=&ОрганизацияСравнение";
			
			Запрос.УстановитьПараметр("ОрганизацияСравнение",СтруктураСверки.ОрганизацияСравнение);
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Организация.ТипОрганизации=&ТипОрганизацийДляСверки
			|И ВерсииЗначенийПоказателей.Организация В(&СоставПериметра)";
			
			Запрос.УстановитьПараметр("ТипОрганизацийДляСверки",ТипОрганизацийДляСверки);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Валюта=&Валюта";
			
		КонецЕсли;
		
		Если СтруктураСверки.Свойство("ОрганизацияБазис") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ЗначенияПоказателейОтчетов.Аналитика"+НомерСоответствие+"=&ОрганизацияБазис";
			
			Запрос.УстановитьПараметр("ОрганизацияБазис",СтруктураСверки.ОрганизацияБазис);
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И ((НЕ ЗначенияПоказателейОтчетов.Аналитика"+НомерСоответствие+"=Неопределено) И ЗначенияПоказателейОтчетов.Аналитика"+НомерСоответствие+".ТипОрганизации=&ТипОрганизацийДляСверки)
			|И ЗначенияПоказателейОтчетов.Аналитика"+НомерСоответствие+" В(&СоставПериметра)";
			
			Запрос.УстановитьПараметр("ТипОрганизацийДляСверки",ТипОрганизацийДляСверки);
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|			И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|			И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
		|			И ВерсииЗначенийПоказателей.Регистратор <> &ТекущийДокумент) КАК СравнениеПоказателей
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СравнениеПоказателей.ОрганизацияБазис,
		|		СравнениеПоказателей.ОрганизацияСравнение) КАК СравнениеГруппировка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Ссылка КАК ЭкземплярОтчета,
		|			Организация КАК Организация
		|		ИЗ  Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ГДЕ
		|			НастраиваемыйОтчет.ВидОтчета = &ВидОтчетаБазис
		|			И НастраиваемыйОтчет.Сценарий = &Сценарий
		|			И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета) КАК ЭкземплярыОтчетов
		|		ПО СравнениеГруппировка.ОрганизацияБазис = ЭкземплярыОтчетов.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Ссылка КАК ЭкземплярОтчета,
		|			Организация КАК Организация
		|		ИЗ  Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ГДЕ
		|			НастраиваемыйОтчет.ВидОтчета = &ВидОтчетаСравнение
		|			И НастраиваемыйОтчет.Сценарий = &Сценарий
		|			И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета) КАК ЭкземплярыСравнение
		|		ПО СравнениеГруппировка.ОрганизацияСравнение = ЭкземплярыСравнение.Организация	
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучныеКорректировкиДанныеЭлиминации.ОрганизацияБазис,
		|	РучныеКорректировкиДанныеЭлиминации.ОрганизацияСравнение
		|ИЗ
		|	Документ.РучныеКорректировки.ДанныеЭлиминации КАК РучныеКорректировкиДанныеЭлиминации
		|ГДЕ
		|	РучныеКорректировкиДанныеЭлиминации.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РучныеКорректировкиОперации.Ссылка
		|			ИЗ
		|				Документ.РучныеКорректировки.Операции КАК РучныеКорректировкиОперации
		|			ГДЕ
		|				РучныеКорректировкиОперации.Элиминация
		|				И (НЕ РучныеКорректировкиОперации.Ссылка = &ТекущийДокумент)
		|				И РучныеКорректировкиОперации.Ссылка.ПериодОтчета = &ПериодОтчета
		|				И РучныеКорректировкиОперации.Ссылка.Сценарий = &Сценарий
		|				И РучныеКорректировкиОперации.Ссылка.ОсновнаяВалюта = &Валюта
		|				И РучныеКорректировкиОперации.Ссылка.Организация = &Организация)
		|	И РучныеКорректировкиДанныеЭлиминации.ПоказательБазис = &ПоказательБазис
		|	И РучныеКорректировкиДанныеЭлиминации.ПоказательСравнение = &ПоказательСравнение) КАК СуществующиеЭлиминации
		| ПО СравнениеГруппировка.ОрганизацияБазис=СуществующиеЭлиминации.ОрганизацияБазис
		|И	СравнениеГруппировка.ОрганизацияСравнение=СуществующиеЭлиминации.ОрганизацияСравнение";
		
		Запрос.УстановитьПараметр("ПоказательБазис",СтрСоотвествие.ПоказательБазис);
		Запрос.УстановитьПараметр("ПоказательСравнение",СтрСоотвествие.ПоказательСравнение);
		
		Запрос.УстановитьПараметр("ВидОтчетаБазис",СтрСоотвествие.ВидОтчетаБазис);
		Запрос.УстановитьПараметр("ВидОтчетаСравнение",СтрСоотвествие.ВидОтчетаСравнение);
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.УстановитьПараметр("Сценарий",Сценарий);
		Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
		Запрос.УстановитьПараметр("Валюта",ОсновнаяВалюта);
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Запрос.УстановитьПараметр("СоставПериметра",СтруктураСверки.СписокОрганизаций);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если НЕ (Результат.СуществующаяЭлиминация = NULL) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока=СтруктураСверки.ЗаписиСверкаВГО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			
			НоваяСтрока.ПоказательБазис=СтрСоотвествие.ПоказательБазис;
			НоваяСтрока.ПоказательСравнение=СтрСоотвествие.ПоказательСравнение;
			
			НоваяСтрока.ГруппаРаскрытияБазис=СтрСоотвествие.ГруппаРаскрытия;
			НоваяСтрока.ГруппаРаскрытияСравнение=СтрСоотвествие.ГруппаРаскрытияСоответствие;
			
			НоваяСтрока.АналитикОтчетаБазис=АналитикОтчетаБазис;
			НоваяСтрока.АналитикОтчетаСравнение=АналитикОтчетаСравнение;
			
			НоваяСтрока.ТабСоответствияАналитик.Добавить(СтрСоотвествие.СоответствиеАналитик.Получить());
			
			НоваяСтрока.АналитикаВГОБазис=НомерИсходной;
			НоваяСтрока.АналитикаВГОСравнение=НомерСоответствие;
			
			РассчитатьСтрокуСверки(НоваяСтрока,СтруктураСверки.ОтноситьНаНеурегулированныеАвтоматически);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьТаблицуСверки()

Процедура РассчитатьСтрокуСверки(СтрокаЭлиминации,ОтноситьНаНеурегулированные=Ложь) Экспорт
	
	Если НЕ ОтноситьНаНеурегулированные Тогда
		
		СтрокаЭлиминации.ОтклонениеАбс=СтрокаЭлиминации.ЗначениеБазис-СтрокаЭлиминации.ЗначениеСравнение;
		СтрокаЭлиминации.ОтклонениеПослеУрегулированияАбс=СтрокаЭлиминации.ЗначениеБазис-(СтрокаЭлиминации.Урегулирование+СтрокаЭлиминации.ЗначениеСравнение);
		
		СтрокаЭлиминации.ОтклонениеОтн=?(СтрокаЭлиминации.ЗначениеБазис=0,1,(СтрокаЭлиминации.ЗначениеБазис-СтрокаЭлиминации.ЗначениеСравнение)/СтрокаЭлиминации.ЗначениеБазис)*100;
		Если СтрокаЭлиминации.ЗначениеБазис <> 0 Тогда
			СтрокаЭлиминации.ОтклонениеПослеУрегулированияОтн = (СтрокаЭлиминации.ЗначениеБазис-(СтрокаЭлиминации.Урегулирование+СтрокаЭлиминации.ЗначениеСравнение)) * 100 /СтрокаЭлиминации.ЗначениеБазис;
		Иначе
			Если СтрокаЭлиминации.Урегулирование+СтрокаЭлиминации.ЗначениеСравнение = 0 Тогда
				СтрокаЭлиминации.ОтклонениеПослеУрегулированияОтн = 0;
			Иначе
				СтрокаЭлиминации.ОтклонениеПослеУрегулированияОтн = 100;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СтрокаЭлиминации.ОтклонениеАбс=СтрокаЭлиминации.ЗначениеБазис-СтрокаЭлиминации.ЗначениеСравнение;
		СтрокаЭлиминации.ОтнесеноНаСценарийДляНеурегулированных=СтрокаЭлиминации.ЗначениеБазис-(СтрокаЭлиминации.Урегулирование+СтрокаЭлиминации.ЗначениеСравнение);
		СтрокаЭлиминации.ОтклонениеПослеУрегулированияАбс=0;
		
		СтрокаЭлиминации.ОтклонениеОтн=?(СтрокаЭлиминации.ЗначениеБазис=0,1,(СтрокаЭлиминации.ЗначениеБазис-СтрокаЭлиминации.ЗначениеСравнение)/СтрокаЭлиминации.ЗначениеБазис)*100;
		СтрокаЭлиминации.ОтклонениеПослеУрегулированияОтн=0;
		
	КонецЕсли;	
	
КонецПроцедуры // РассчитатьСтрокуСверки()

Функция ПроверитьВозможностьУрегулированияПоАналитике(СтрокаЭлиминации) Экспорт
	
	ГруппаРаскрытияБазис=СтрокаЭлиминации.ГруппаРаскрытияБазис;
	ГруппаРаскрытияСравнение=СтрокаЭлиминации.ГруппаРаскрытияСравнение;
	
	Если НЕ ЗначениеЗаполнено(ГруппаРаскрытияБазис) Тогда
		
		#Если клиент Тогда
			Сообщить(СокрЛП(Ссылка)+": не указана группа аналитик для показателя "+СокрЛП(СтрокаЭлиминации.ПоказательБазис));
		#КонецЕсли
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаРаскрытияСравнение) Тогда
		
		#Если клиент Тогда
			Сообщить(СокрЛП(Ссылка)+": не указана группа аналитик для показателя "+СокрЛП(СтрокаЭлиминации.ПоказательСравнение));
		#КонецЕсли
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаРаскрытияБазис["ВидАналитики"+Строка(СтрокаЭлиминации.АналитикОтчетаБазис+1)]) 
		И ГруппаРаскрытияБазис["ВидАналитики"+Строка(СтрокаЭлиминации.АналитикОтчетаБазис+1)].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации")
		И (НЕ ЗначениеЗаполнено(ГруппаРаскрытияБазис["ВидАналитики"+Строка(СтрокаЭлиминации.АналитикОтчетаБазис+2)]))
		И ЗначениеЗаполнено(ГруппаРаскрытияСравнение["ВидАналитики"+Строка(СтрокаЭлиминации.АналитикОтчетаСравнение+1)]) 
		И ГруппаРаскрытияСравнение["ВидАналитики"+Строка(СтрокаЭлиминации.АналитикОтчетаСравнение+1)].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации")
		И (НЕ ЗначениеЗаполнено(ГруппаРаскрытияСравнение["ВидАналитики"+Строка(СтрокаЭлиминации.АналитикОтчетаСравнение+2)])) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ПроверитьВозможностьУрегулированияПоАналитике()

// Подготавливает исходную таблицу для элиминации
//
Процедура ЗаполнитьТаблицуЭлиминации() Экспорт
	
	Если НЕ ТипЗнч(СтруктураСверки)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСверки ИЗ СтруктураСверки.ЗаписиСверкаВГО Цикл
		
		Если Окр(СтрокаСверки.ОтклонениеАбс,0)<>0 И НЕ Окр(СтрокаСверки.ОтклонениеПослеУрегулированияАбс,0)=0 Тогда
			
			Продолжить;
			
		КонецЕсли;		
		
		НоваяСтрока=СтруктураСверки.ЗаписиЭлиминации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСверки);
		
		ТабЭлиминации=ПолучитьТаблицыЭлиминации(СтрокаСверки,ОсновнаяВалюта,ПериодОтчета,Сценарий);
		
		Если ТипЗнч(ТабЭлиминации)=Тип("СписокЗначений") Тогда
			
			Если НЕ ТабЭлиминации.Количество()=2 Тогда
				
				Продолжить;
				
			Иначе
				
				НоваяСтрока.ТабЭлиминации=ТабЭлиминации;
				НоваяСтрока.ЭлиминационнаяПоправка=ТабЭлиминации[0].Значение.Итог("Элиминация");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуЭлиминации()


Функция ПолучитьТаблицуУрегулированияПоАналитике(СтрокаЭлиминации,ВалютаОтчета,ПериодОтчета,Сценарий) Экспорт
	
	Запрос=Новый Запрос;
	
	ТекстАналитикБазис="";
	ТекстГруппировкиСравнение="";
	ТекстАналитикСравнение="";
	
	Если СтрокаЭлиминации.ТабСоответствияАналитик.Количество()>0 И ТипЗнч(СтрокаЭлиминации.ТабСоответствияАналитик[0].Значение)=Тип("ТаблицаЗначений") Тогда
		
		ТабАналитики=СтрокаЭлиминации.ТабСоответствияАналитик[0].Значение;
		
		Для Каждого СтрСоответствие ИЗ ТабАналитики Цикл
			
			Если СтрСоответствие.КодАналитикиБазис="Аналитика"+СтрокаЭлиминации.АналитикаВГОБазис
				ИЛИ СтрСоответствие.КодАналитикиСравнение="Аналитика"+СтрокаЭлиминации.АналитикаВГОСравнение Тогда
				
				// по внутригрупповой аналитике не разделяем
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстАналитикБазис=ТекстАналитикБазис+",
			|##."+СтрСоответствие.КодАналитикиБазис;
			
			ТекстАналитикСравнение=ТекстАналитикСравнение+",
			|##."+СтрСоответствие.КодАналитикиСравнение+" КАК "+СтрСоответствие.КодАналитикиСравнение;
			
			ТекстГруппировкиСравнение=ТекстГруппировкиСравнение+",
			|##."+СтрСоответствие.КодАналитикиСравнение;
			
		КонецЦикла;
		
		ТекстАналитикБазис=Сред(ТекстАналитикБазис,2);
		ТекстАналитикСравнение=Сред(ТекстАналитикСравнение,2);
		ТекстГруппировкиСравнение=Сред(ТекстГруппировкиСравнение,2);
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ";
	Если СтрДлина(ТекстАналитикСравнение)>0 Тогда
		Запрос.Текст=Запрос.Текст+"
		|"+СтрЗаменить(ТекстАналитикСравнение,"##","ТабСравнения")+",";
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"
	|СУММА(ЗначениеБазис) КАК ЗначениеБазис,
	|СУММА(ЗначениеСравнение) КАК ЗначениеСравнение
	|ИЗ
	|( ";	
	
	Текст = "ВЫБРАТЬ";
	
	Если СтрДлина(ТекстАналитикСравнение)>0 Тогда
		Текст = Текст+"
		|"+СтрЗаменить(ТекстАналитикСравнение,"##","ЗначенияПоказателейОтчетов")+",";
	КонецЕсли;
	
	МаксНомерАналитикиСравнение=Макс(СтрокаЭлиминации.ГруппаРаскрытияСравнение.ЧислоАналитик,СтрокаЭлиминации.АналитикаВГОСравнение);
	МаксНомерАналитикиБазис=Макс(СтрокаЭлиминации.ГруппаРаскрытияБазис.ЧислоАналитик,СтрокаЭлиминации.АналитикаВГОБазис);
	
	Текст=Текст+"
	|0 КАК ЗначениеБазис,
	|ЗначенияПоказателейОтчетов.Значение КАК ЗначениеСравнение
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов"+МаксНомерАналитикиСравнение+" КАК ЗначенияПоказателейОтчетов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ПО ЗначенияПоказателейОтчетов.Версия=ВерсииЗначенийПоказателей.Ссылка 
	|ГДЕ
	|	ЗначенияПоказателейОтчетов.Показатель = &ПоказательСравнение
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.Организация = &ОрганизацияСравнение
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Регистратор <> &ТекущийДокумент
	|	И ЗначенияПоказателейОтчетов.Аналитика"+СтрокаЭлиминации.АналитикаВГОСравнение+" = &ОрганизацияБазис
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ";
	Если СтрДлина(ТекстАналитикБазис)>0 Тогда
		Текст=Текст+"
		|"+СтрЗаменить(ТекстАналитикБазис,"##","ЗначенияПоказателейОтчетов")+",";
	КонецЕсли;
	Текст=Текст+"
	|ЗначенияПоказателейОтчетов.Значение КАК ЗначениеБазис,
	|0 КАК ЗначениеСравнение
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов"+МаксНомерАналитикиБазис+" КАК ЗначенияПоказателейОтчетов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ПО ЗначенияПоказателейОтчетов.Версия=ВерсииЗначенийПоказателей.Ссылка
	|ГДЕ
	|	ЗначенияПоказателейОтчетов.Показатель = &ПоказательБазис
	|	И ВерсииЗначенийПоказателей.Регистратор <> &ТекущийДокумент
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.Организация = &ОрганизацияБазис
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ЗначенияПоказателейОтчетов.Аналитика"+СтрокаЭлиминации.АналитикаВГОБазис+" = &ОрганизацияСравнение";
	Запрос.Текст = Запрос.Текст + Текст + ") КАК ТабСравнения";
	
	Если СтрДлина(ТекстГруппировкиСравнение)>0 тогда
		
		Запрос.Текст=Запрос.Текст+"
		
		|  СГРУППИРОВАТЬ ПО
		|"+СтрЗаменить(ТекстГруппировкиСравнение,"##","ТабСравнения");
	Иначе
		Запрос.Текст="ВЫБРАТЬ ЗначениеБазис, ЗначениеСравнение ИЗ (" +  Запрос.Текст + ") КАК ВнТаблица
		| ГДЕ ЗначениеБазис ЕСТЬ НЕ NULL И ЗначениеСравнение ЕСТЬ НЕ NULL";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПоказательБазис",СтрокаЭлиминации.ПоказательБазис);
	Запрос.УстановитьПараметр("ПоказательСравнение",СтрокаЭлиминации.ПоказательСравнение);
	Запрос.УстановитьПараметр("Валюта",ВалютаОтчета);
	Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("ОрганизацияБазис",СтрокаЭлиминации.ОрганизацияБазис);
	Запрос.УстановитьПараметр("ОрганизацияСравнение",СтрокаЭлиминации.ОрганизацияСравнение);
	Запрос.УстановитьПараметр("ТекущийДокумент",Ссылка);
	
	Результат=Запрос.Выполнить().Выгрузить();
	Запрос.Текст = Текст;
	
	Результат.Колонки.Добавить("Расхождение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	Результат.Колонки.Добавить("Урегулирование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	Результат.Колонки.Добавить("РасхождениеПослеУрегулирования",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	Результат.Колонки.Добавить("КодАналитикиВГО",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	
	Для Каждого СтрСравнение ИЗ Результат Цикл
		
		СтрСравнение.Расхождение=СтрСравнение.ЗначениеБазис-СтрСравнение.ЗначениеСравнение;
		СтрСравнение.Урегулирование=СтрСравнение.Расхождение;
		СтрСравнение.РасхождениеПослеУрегулирования=0;
		СтрСравнение.КодАналитикиВГО=СтрокаЭлиминации.АналитикаВГОСравнение;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуУрегулированияПоАналитике();

Функция ПолучитьТаблицыЭлиминации(СтрокаЭлиминации,ВалютаОтчета,ПериодОтчета,Сценарий) Экспорт
	
	ТабЭлиминацииБазис=Новый ТаблицаЗначений;
	ТабЭлиминацииСравнение=Новый ТаблицаЗначений;
	
	ТекстАналитикБазис="";
	ТекстГруппировкиБазис="";
	ТекстГруппировкиСравнение="";
	ТекстАналитикСравнение="";
	
	Если СтрокаЭлиминации.ТабСоответствияАналитик.Количество()>0 И ТипЗнч(СтрокаЭлиминации.ТабСоответствияАналитик[0].Значение)=Тип("ТаблицаЗначений") Тогда
		
		ТабАналитики=СтрокаЭлиминации.ТабСоответствияАналитик[0].Значение;
		
		Для Каждого СтрСоответствие ИЗ ТабАналитики Цикл
			
			Если СтрСоответствие.КодАналитикиБазис="Аналитика"+СтрокаЭлиминации.АналитикаВГОБазис
				ИЛИ СтрСоответствие.КодАналитикиСравнение="Аналитика"+СтрокаЭлиминации.АналитикаВГОСравнение Тогда
				
				// по внутригрупповой аналитике не разделяем
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстАналитикБазис=ТекстАналитикБазис+",
			|##."+СтрСоответствие.КодАналитикиБазис;
			
			ТекстАналитикСравнение=ТекстАналитикСравнение+",
			|##."+СтрСоответствие.КодАналитикиСравнение+" КАК "+СтрСоответствие.КодАналитикиСравнение;
			
			ТекстГруппировкиБазис=ТекстГруппировкиБазис+",
			|##."+СтрСоответствие.КодАналитикиБазис;
			
			ТекстГруппировкиСравнение=ТекстГруппировкиСравнение+",
			|##."+СтрСоответствие.КодАналитикиСравнение;
			
		КонецЦикла;
		
		ТекстАналитикБазис=Сред(ТекстАналитикБазис,2);
		ТекстАналитикСравнение=Сред(ТекстАналитикСравнение,2);
		ТекстГруппировкиСравнение=Сред(ТекстГруппировкиСравнение,2);
		ТекстГруппировкиБазис=Сред(ТекстГруппировкиБазис,2);
		
	КонецЕсли;
	
	Если СтрокаЭлиминации.ОтклонениеАбс=0 Тогда // По умолчанию элиминируем полные значения показателей
		
		Запрос=Новый Запрос;
		
		// Готовим таблицу элиминации для базисного показателя
		
		Запрос.Текст="ВЫБРАТЬ";
		Если СтрДлина(ТекстАналитикБазис)>0 Тогда
			Запрос.Текст=Запрос.Текст+"
			|"+СтрЗаменить(ТекстАналитикБазис,"##","ЗначенияПоказателейОтчетов")+",";
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОтчетов"+СтрокаЭлиминации.ГруппаРаскрытияБазис.ЧислоАналитик+" КАК ЗначенияПоказателейОтчетов
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ПО ЗначенияПоказателейОтчетов.Версия=ВерсииЗначенийПоказателей.Ссылка
		|ГДЕ
		|	ЗначенияПоказателейОтчетов.Показатель = &Показатель
		|	И ВерсииЗначенийПоказателей.Регистратор <> &ТекущийДокумент
		|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
		|	И ВерсииЗначенийПоказателей.Организация = &ОрганизацияБазис
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
		|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|	И ЗначенияПоказателейОтчетов.Аналитика"+СтрокаЭлиминации.АналитикаВГОБазис+" = &ОрганизацияСравнение";
		
		Если СтрДлина(ТекстГруппировкиБазис)>0 Тогда
			Запрос.Текст=Запрос.Текст+"
			
			|  СГРУППИРОВАТЬ ПО
			|"+СтрЗаменить(ТекстГруппировкиБазис,"##","ЗначенияПоказателейОтчетов");
			
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Показатель",СтрокаЭлиминации.ПоказательБазис);
		Запрос.УстановитьПараметр("Валюта",ВалютаОтчета);
		Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
		Запрос.УстановитьПараметр("Сценарий",Сценарий);
		Запрос.УстановитьПараметр("ОрганизацияБазис",СтрокаЭлиминации.ОрганизацияБазис);
		Запрос.УстановитьПараметр("ОрганизацияСравнение",СтрокаЭлиминации.ОрганизацияСравнение);
		Запрос.УстановитьПараметр("ТекущийДокумент",Ссылка);
		
		ТабЭлиминацииБазис=Запрос.Выполнить().Выгрузить();
		
		// Готовим таблицу элиминации для показателя сравнения	
		Запрос.Текст="ВЫБРАТЬ";
		Если СтрДлина(ТекстАналитикСравнение)>0 Тогда
			Запрос.Текст=Запрос.Текст+"
			|"+СтрЗаменить(ТекстАналитикСравнение,"##","ЗначенияПоказателейОтчетов")+",";
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОтчетов"+СтрокаЭлиминации.ГруппаРаскрытияСравнение.ЧислоАналитик+" КАК ЗначенияПоказателейОтчетов
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ПО ЗначенияПоказателейОтчетов.Версия=ВерсииЗначенийПоказателей.Ссылка
		|ГДЕ
		|	ЗначенияПоказателейОтчетов.Показатель = &Показатель
		|	И ВерсииЗначенийПоказателей.Регистратор <> &ТекущийДокумент
		|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
		|	И ВерсииЗначенийПоказателей.Организация = &ОрганизацияСравнение
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
		|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|	И ЗначенияПоказателейОтчетов.Аналитика"+СтрокаЭлиминации.АналитикаВГОСравнение+" = &ОрганизацияБазис";
		
		Если СтрДлина(ТекстГруппировкиСравнение)>0 Тогда
			Запрос.Текст=Запрос.Текст+"
			
			|  СГРУППИРОВАТЬ ПО
			|"+СтрЗаменить(ТекстГруппировкиСравнение,"##","ЗначенияПоказателейОтчетов");
			
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Показатель",СтрокаЭлиминации.ПоказательСравнение);
		Запрос.УстановитьПараметр("Валюта",ВалютаОтчета);
		Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
		Запрос.УстановитьПараметр("Сценарий",Сценарий);
		Запрос.УстановитьПараметр("ОрганизацияБазис",СтрокаЭлиминации.ОрганизацияБазис);
		Запрос.УстановитьПараметр("ОрганизацияСравнение",СтрокаЭлиминации.ОрганизацияСравнение);
		Запрос.УстановитьПараметр("ТекущийДокумент",Ссылка);
		
		ТабЭлиминацииСравнение=Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли СтрокаЭлиминации.ОтклонениеПослеУрегулированияАбс=0 Тогда
		
		Если СтрДлина(ТекстАналитикБазис)=0 Тогда // Не было урегулирования по аналитикам, кроме аналитики ВГО
			
			ТабЭлиминацииБазис.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
			
			СтрокаБазис=ТабЭлиминацииБазис.Добавить();
			СтрокаБазис.Значение=Мин((СтрокаЭлиминации.ЗначениеСравнение+СтрокаЭлиминации.Урегулирование),СтрокаЭлиминации.ЗначениеБазис);
			
			ТабЭлиминацииСравнение.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
			
			СтрокаСравнение=ТабЭлиминацииСравнение.Добавить();
			СтрокаСравнение.Значение=Мин((СтрокаЭлиминации.ЗначениеСравнение+СтрокаЭлиминации.Урегулирование),СтрокаЭлиминации.ЗначениеБазис);
			
		Иначе
			
			Если СтрокаЭлиминации.ТабУрегулированиеАналитик.Количество()>0 Тогда
				
				ТабУрегулирования=СтрокаЭлиминации.ТабУрегулированиеАналитик[0].Значение;
				
				ТабАналитики=СтрокаЭлиминации.ТабСоответствияАналитик[0].Значение;
				
				Для Каждого СтрокаСоответствие ИЗ ТабАналитики Цикл
					
					ТабЭлиминацииБазис.Колонки.Добавить(СтрокаСоответствие.КодАналитикиБазис);
					ТабЭлиминацииСравнение.Колонки.Добавить(СтрокаСоответствие.КодАналитикиСравнение);
					
				КонецЦикла;
				
				ТабЭлиминацииБазис.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
				ТабЭлиминацииСравнение.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
				
				Для Каждого СтрУрегулирование ИЗ ТабУрегулирования Цикл
					
					СтрокаБазис=ТабЭлиминацииБазис.Добавить();
					СтрокаСравнение=ТабЭлиминацииСравнение.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаСравнение,СтрУрегулирование);
					СтрокаСравнение.Значение=Мин((СтрУрегулирование.ЗначениеСравнение+СтрУрегулирование.Урегулирование),СтрУрегулирование.ЗначениеБазис);
					
					// Элиминация по базисному показателю идет по той же аналитике, что и по показателю сравнения
					Для Каждого СтрокаСоответствие ИЗ ТабАналитики Цикл
						
						СтрокаБазис[СтрокаСоответствие.КодАналитикиБазис]=СтрокаСравнение[СтрокаСоответствие.КодАналитикиСравнение];
						
					КонецЦикла;
					
					СтрокаБазис.Значение=СтрокаСравнение.Значение
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	КонецЕсли;
	
	ТабЭлиминацииБазис.Колонки.Добавить("Элиминация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТабЭлиминацииБазис.Колонки.Добавить("ЗначениеПослеЭлиминации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрБазис ИЗ ТабЭлиминацииБазис Цикл
		
		СтрБазис.Элиминация=СтрБазис.Значение;
		СтрБазис.ЗначениеПослеЭлиминации=0;
		
	КонецЦикла;
	
	ТабЭлиминацииСравнение.Колонки.Добавить("Элиминация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТабЭлиминацииСравнение.Колонки.Добавить("ЗначениеПослеЭлиминации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрСравнение ИЗ ТабЭлиминацииСравнение Цикл
		
		СтрСравнение.Элиминация=СтрСравнение.Значение;
		СтрСравнение.ЗначениеПослеЭлиминации=0;
		
	КонецЦикла;
	
	СписокТаблиц=Новый СписокЗначений;
	СписокТаблиц.Вставить(0,ТабЭлиминацииБазис);
	СписокТаблиц.Вставить(1,ТабЭлиминацииСравнение);
	
	Возврат СписокТаблиц;
	
КонецФункции // ПолучитьТаблицыЭлиминации()

Функция РассчитатьРучнуюОперацию(СтрОперация)
	
	ПредвТаблицаРедактируемыеЗаписи=ТекТаблицаЗаписи.СкопироватьКолонки();
	
	СтруктураОтбора=Новый Структура("НомерОперации", СтрОперация.НомерОперации);
	ЗаписиОперации=РедактируемыеЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Запись ИЗ ЗаписиОперации Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.Показатель) Тогда
			#Если Клиент Тогда
				Сообщить(СокрЛП(Ссылка)+" некорректно указаны показатели отчетов. Расчет не выполнен.");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;
		
		Если Запись.РасчетПоФормуле И (НЕ ЗначениеЗаполнено(Запись.Процедура)) Тогда
			#Если Клиент Тогда
				Сообщить(СокрЛП(Ссылка)+" не указана процедура расчета. Расчет не выполнен.");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим наличие экземпляров отчетов и, при необходимости, создадим их
		
		Если Не ЗначениеЗаполнено(Запись.ЭкземплярОтчета) Тогда
			
			ТекКомментарий="Отчет создан при автоматическом расчете ручной корректировки "+СокрЛП(Ссылка);
			НовыйЭкземплярОтчета=ПолучитьЭкземплярОтчета(Организация,Запись.Показатель.Владелец,Сценарий,Истина,Истина,ТекКомментарий,Проект);
			
			Если НовыйЭкземплярОтчета=Неопределено Тогда
				
				#Если Клиент Тогда
					Сообщить(СокрЛП(Ссылка)+" не получены экземпляры отчетов для корректировки. Расчет не выполнен.");
				#КонецЕсли
				Возврат Ложь;
				
			Иначе
				
				Запись.ЭкземплярОтчета=НовыйЭкземплярОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока=ПредвТаблицаРедактируемыеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Запись);
		
	КонецЦикла;
	
	ПараметрыОбработки=Новый Структура;
	ПараметрыОбработки.Вставить("ДокументОбъект",		ЭтотОбъект);
	ПараметрыОбработки.Вставить("НомерОперации",		СтрОперация.НомерОперации);
	ПараметрыОбработки.Вставить("ТаблицаСтрок",			ПредвТаблицаРедактируемыеЗаписи);
	ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
	ПараметрыОбработки.Вставить("Сбалансированная",		СтрОперация.Сбалансированная);
	ПараметрыОбработки.Вставить("Трансформационная",	Ложь);
	ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);
	
	ПредвТаблицаЗаписи=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
	
	РезультатПроверки = ПроверитьОперацию(СтрОперация, ПредвТаблицаРедактируемыеЗаписи);
	
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		
		#Если Клиент Тогда
			Сообщить(СокрЛП(Ссылка)+" ошибки при выполнении расчета: "+Символы.ПС);
			Для НомСтр = 1 По СтрЧислоСтрок(РезультатПроверки) Цикл
				Сообщить(СтрПолучитьСтроку(РезультатПроверки, НомСтр), СтатусСообщения.Важное);
			КонецЦикла;
		#КонецЕсли
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого СтараяЗаписьОперации Из ЗаписиОперации Цикл
		РедактируемыеЗаписи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ПредвТаблицаРедактируемыеЗаписи,РедактируемыеЗаписи);
	
	Если ПредвТаблицаЗаписи.Количество()>0 Тогда
		
		СтарыеЗаписиОперации = Записи.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
			Записи.Удалить(СтараяЗаписьОперации);
		КонецЦикла;
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ПредвТаблицаЗаписи,Записи);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РассчитатьРучнуюОперацию()

Функция СохранитьИзмененияЭлиминации(Операция) Экспорт
	
	Если (НЕ ЗначениеЗаполнено(СценарийДляНеурегулированныхОтклонений)) И СтруктураСверки.ЗаписиСверкаВГО.Итог("ОтклонениеПослеУрегулированияАбс")<>0 Тогда
		
		#Если Клиент Тогда
			Сообщить(СокрЛП(Ссылка)+": не указан сценарий для отнесения неурегулированных отклонений.",СтатусСообщения.Важное);
		#КонецЕсли
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЕстьОшибки=Ложь;
	
	ТекТаблицаЗаписи.Очистить();
	
	// Проверим существование необходимых экземпляров отчетов и, при необходимости, создадим их
	Для Каждого СтрСверка ИЗ СтруктураСверки.ЗаписиСверкаВГО Цикл
		
		Если СтрСверка.Урегулирование<>0 И (НЕ ЗначениеЗаполнено(СтрСверка.ЭкземплярОтчетаСравнение)) Тогда
			
			ТекКомментарий="Отчет создан для урегулировании внутригрупповых операций.";
			НовыйЭкземплярОтчета=ПолучитьЭкземплярОтчета(Организация,СтрСверка.ПоказательСравнение.Владелец,Сценарий,Истина,Истина,ТекКомментарий,Проект);
			
			Если НовыйЭкземплярОтчета=Неопределено Тогда
				
				#Если Клиент Тогда
					Сообщить(СокрЛП(Ссылка)+": показатель (сравнение): "+СокрЛП(СтрСверка.ПоказательСравнение)+", Организация: "+СокрЛП(СтрСверка.ОрганизацияСравнение)+"
					|не получен экземпляр отчета для урегулирования.");
				#КонецЕсли
				
				ЕстьОшибки=Истина;
				
			Иначе
				
				СтрСверка.ЭкземплярОтчетаСравнение=НовыйЭкземплярОтчета;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если СтрСверка.ОтнесеноНаСценарийДляНеурегулированных<>0 И (НЕ ЗначениеЗаполнено(СтрСверка.ЭкземплярОтчетаЭлиминацияНеурегулированных)) Тогда
			
			ТекКомментарий="Отчет создан для отнесения неурегулированных отклонений.";
			НовыйЭкземплярОтчета=ПолучитьЭкземплярОтчета(Организация,СтрСверка.ПоказательСравнение.Владелец,СценарийДляНеурегулированныхОтклонений,Истина,Истина,ТекКомментарий,Проект);
			
			Если НовыйЭкземплярОтчета=Неопределено Тогда
				
				#Если Клиент Тогда
					Сообщить(СокрЛП(Ссылка)+": показатель (сравнение): "+СокрЛП(СтрСверка.ПоказательСравнение)+", Организация: "+СокрЛП(СтрСверка.ОрганизацияСравнение)+"
					|не получен экземпляр отчета для отнесения неурегулированных отклонений.");
				#КонецЕсли
				
				ЕстьОшибки=Истина;
				
			Иначе
				
				СтрСверка.ЭкземплярОтчетаЭлиминацияНеурегулированных=НовыйЭкземплярОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрЭлиминация ИЗ СтруктураСверки.ЗаписиЭлиминации Цикл
		
		Если СтрЭлиминация.ЭлиминационнаяПоправка<>0 И (НЕ ЗначениеЗаполнено(СтрЭлиминация.ЭкземплярОтчетаЭлиминацияБазис)) Тогда
			
			ТекКомментарий="Отчет создан для элиминационных поправок.";
			НовыйЭкземплярОтчета=ПолучитьЭкземплярОтчета(Организация,СтрЭлиминация.ПоказательБазис.Владелец,Сценарий,Истина,Истина,ТекКомментарий,Проект);
			
			Если НовыйЭкземплярОтчета=Неопределено Тогда
				
				#Если Клиент Тогда
					Сообщить(СокрЛП(Ссылка)+": показатель (базис): "+СокрЛП(СтрЭлиминация.ПоказательБазис)+", Организация: "+СокрЛП(СтрЭлиминация.ОрганизацияБазис)+"
					|не получен экземпляр отчета для элиминации.");
				#КонецЕсли
				
				ЕстьОшибки=Истина;
				
			Иначе
				
				СтрЭлиминация.ЭкземплярОтчетаЭлиминацияБазис=НовыйЭкземплярОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрЭлиминация.ЭлиминационнаяПоправка<>0 И (НЕ ЗначениеЗаполнено(СтрЭлиминация.ЭкземплярОтчетаЭлиминацияСравнение)) Тогда
			
			ТекКомментарий="Отчет создан для элиминационных поправок.";
			НовыйЭкземплярОтчета=ПолучитьЭкземплярОтчета(Организация,СтрЭлиминация.ПоказательСравнение.Владелец,Сценарий,Истина,Истина,ТекКомментарий,Проект);
			
			Если НовыйЭкземплярОтчета=Неопределено Тогда
				
				#Если Клиент Тогда
					Сообщить(СокрЛП(Ссылка)+": показатель (базис): "+СокрЛП(СтрЭлиминация.ПоказательСравнение)+", Организация: "+СокрЛП(СтрЭлиминация.ОрганизацияСравнение)+"
					|не получен экземпляр отчета для элиминации.");
				#КонецЕсли
				
				ЕстьОшибки=Истина;
				
			Иначе
				
				СтрЭлиминация.ЭкземплярОтчетаЭлиминацияСравнение=НовыйЭкземплярОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Создаем корректирующие записи для урегулирования
	
	Для Каждого СтрСверкаВГОУХ ИЗ СтруктураСверки.ЗаписиСверкаВГО Цикл
		
		Если СтрСверкаВГОУХ.Урегулирование=0 И СтрСверкаВГОУХ.ОтнесеноНаСценарийДляНеурегулированных=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрСверкаВГОУХ.Урегулирование<>0 И (НЕ СтрСверкаВГОУХ.УрегулированоПоАналитике) Тогда
			
			#Если Клиент Тогда
				Сообщить(СокрЛП(Ссылка)+": показатель (сравнение): "+СокрЛП(СтрСверкаВГОУХ.ПоказательСравнение)+", Организация: "+СокрЛП(СтрСверкаВГОУХ.ОрганизацияСравнение)+"
				|нет урегулирования по аналитике");
			#КонецЕсли
			
			ЕстьОшибки=Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрСверкаВГОУХ.ТабУрегулированиеАналитик.Количество()>0 И ТипЗнч(СтрСверкаВГОУХ.ТабУрегулированиеАналитик[0].Значение)=Тип("ТаблицаЗначений") Тогда
			
			Для Каждого СтрокаУрегулирование ИЗ СтрСверкаВГОУХ.ТабУрегулированиеАналитик[0].Значение Цикл
				
				НоваяСтрока=ТекТаблицаЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаУрегулирование);
				
				НоваяСтрока.ЭкземплярОтчета=СтрСверкаВГОУХ.ЭкземплярОтчетаСравнение;
				НоваяСтрока.Организация=СтрСверкаВГОУХ.ОрганизацияСравнение;
				НоваяСтрока.Показатель=СтрСверкаВГОУХ.ПоказательСравнение;
				НоваяСтрока.НомерОперации=Операция.НомерОперации;
				НоваяСтрока.Значение=СтрокаУрегулирование.Урегулирование;
				НоваяСтрока.Раскрытие=Истина;
				
				НоваяСтрока["Аналитика"+СтрокаУрегулирование.КодАналитикиВГО]=СтрСверкаВГОУХ.ОрганизацияБазис;
				
				// Относим неурегулированные отклонения на отдельный сценарий
				Если Окр(СтрСверкаВГОУХ.ОтнесеноНаСценарийДляНеурегулированных,0)<>0 Тогда
					
					НоваяСтрока=ТекТаблицаЗаписи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаУрегулирование);
					
					НоваяСтрока.ЭкземплярОтчета=СтрСверкаВГОУХ.ЭкземплярОтчетаЭлиминацияНеурегулированных;
					НоваяСтрока.Организация=Организация;
					НоваяСтрока.Показатель=СтрСверкаВГОУХ.ПоказательСравнение;
					НоваяСтрока.НомерОперации=Операция.НомерОперации;
					НоваяСтрока.Значение=СтрокаУрегулирование.РасхождениеПослеУрегулирования;
					НоваяСтрока.Раскрытие=Истина;
					
					НоваяСтрока["Аналитика"+СтрокаУрегулирование.КодАналитикиВГО]=СтрСверкаВГОУХ.ОрганизацияБазис;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрСверкаВГОУХ.АналитикаВГОСравнение=0 Тогда
				
				#Если Клиент Тогда
					Сообщить(СокрЛП(Ссылка)+": показатель (сравнение): "+СокрЛП(СтрСверкаВГОУХ.ПоказательСравнение)+", Организация: "+СокрЛП(СтрСверкаВГОУХ.ОрганизацияСравнение)+"
					|не найдена аналитика внутригрупповых операций");
				#КонецЕсли
				
				ЕстьОшибки=Истина;
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока=ТекТаблицаЗаписи.Добавить();
			
			НоваяСтрока.ЭкземплярОтчета=СтрСверкаВГОУХ.ЭкземплярОтчетаСравнение;
			НоваяСтрока.Организация=СтрСверкаВГОУХ.ОрганизацияСравнение;
			НоваяСтрока.Показатель=СтрСверкаВГОУХ.ПоказательСравнение;
			НоваяСтрока.НомерОперации=Операция.НомерОперации;
			НоваяСтрока.Значение=СтрСверкаВГОУХ.Урегулирование;
			НоваяСтрока.Раскрытие=Истина;
			
			НоваяСтрока["Аналитика"+СтрСверкаВГОУХ.АналитикаВГОСравнение]=СтрСверкаВГОУХ.ОрганизацияБазис;
			
			Если СтрСверкаВГОУХ.ОтнесеноНаСценарийДляНеурегулированных<>0 Тогда
				
				НоваяСтрока=ТекТаблицаЗаписи.Добавить();
				
				НоваяСтрока.ЭкземплярОтчета=СтрСверкаВГОУХ.ЭкземплярОтчетаЭлиминацияНеурегулированных;
				НоваяСтрока.Организация=Организация;
				НоваяСтрока.Показатель=СтрСверкаВГОУХ.ПоказательСравнение;
				НоваяСтрока.НомерОперации=Операция.НомерОперации;
				НоваяСтрока.Значение=СтрСверкаВГОУХ.ОтнесеноНаСценарийДляНеурегулированных;
				НоваяСтрока.Раскрытие=Истина;
				
				НоваяСтрока["Аналитика"+СтрСверкаВГОУХ.АналитикаВГОСравнение]=СтрСверкаВГОУХ.ОрганизацияБазис;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Создаем корректирующие записи для элиминации
	
	Для Каждого СтрЭлиминация ИЗ СтруктураСверки.ЗаписиЭлиминации Цикл
		
		Если СтрЭлиминация.ЭлиминационнаяПоправка=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ СтрЭлиминация.ТабЭлиминации.Количество()=2 Тогда
			
			#Если Клиент Тогда
				Сообщить(СокрЛП(Ссылка)+": строка "+СтрЭлиминация.НомерСтроки+": не сформированы элиминационные таблицы.",СтатусСообщения.Важное);
			#КонецЕсли
			
			ЕстьОшибки=Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		ТабЭлиминацииБазис=СтрЭлиминация.ТабЭлиминации[0].Значение;
		
		Если ТабЭлиминацииБазис.Количество()=0 Тогда
			
			#Если Клиент Тогда
				Сообщить(СокрЛП(Ссылка)+": строка "+СтрЭлиминация.НомерСтроки+": не заполнена элиминационная таблица для базисного показателя.",СтатусСообщения.Важное);	
			#КонецЕсли
			
			ЕстьОшибки=Истина;
			
		КонецЕсли;
		
		ТабЭлиминацииСравнение=СтрЭлиминация.ТабЭлиминации[1].Значение;
		
		Если ТабЭлиминацииСравнение.Количество()=0 Тогда
			
			#Если Клиент Тогда
				Сообщить(СокрЛП(Ссылка)+": строка "+СтрЭлиминация.НомерСтроки+": не заполнена элиминационная таблица для сравниваемого показателя.",СтатусСообщения.Важное);
			#КонецЕсли	
			
			ЕстьОшибки=Истина;
			
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого СтрокаЭлиминацииБазис ИЗ ТабЭлиминацииБазис Цикл
			
			НоваяСтрока=ТекТаблицаЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЭлиминацииБазис);
			
			НоваяСтрока.ЭкземплярОтчета=СтрЭлиминация.ЭкземплярОтчетаЭлиминацияБазис;
			НоваяСтрока.Организация=Организация;
			НоваяСтрока.Показатель=СтрЭлиминация.ПоказательБазис;
			НоваяСтрока.НомерОперации=Операция.НомерОперации;
			НоваяСтрока.Значение=СтрокаЭлиминацииБазис.Элиминация*(-1);
			НоваяСтрока.Раскрытие=Истина;
			
			НоваяСтрока["Аналитика"+СтрЭлиминация.АналитикаВГОБазис]=СтрЭлиминация.ОрганизацияСравнение;
			
		КонецЦикла;
		
		Для Каждого СтрокаЭлиминацииСравнение ИЗ ТабЭлиминацииСравнение Цикл
			
			НоваяСтрока=ТекТаблицаЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЭлиминацииСравнение);
			
			НоваяСтрока.ЭкземплярОтчета=СтрЭлиминация.ЭкземплярОтчетаЭлиминацияСравнение;
			НоваяСтрока.Организация=Организация;
			НоваяСтрока.Показатель=СтрЭлиминация.ПоказательСравнение;
			НоваяСтрока.НомерОперации=Операция.НомерОперации;
			НоваяСтрока.Значение=СтрокаЭлиминацииСравнение.Элиминация*(-1);
			НоваяСтрока.Раскрытие=Истина;
			
			НоваяСтрока["Аналитика"+СтрЭлиминация.АналитикаВГОСравнение]=СтрЭлиминация.ОрганизацияБазис;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИсхЗаписи = РедактируемыеЗаписи;
	СтрОтбора = Новый Структура("НомерОперации", Операция.НомерОперации);
	СтарыеЗаписиОперации = ИсхЗаписи.НайтиСтроки(СтрОтбора);
	Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
		ИсхЗаписи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	Для Каждого Запись Из ТекТаблицаЗаписи Цикл
		ТекЗапись = ИсхЗаписи.Добавить();
		ТекЗапись.НомерОперации = Операция.НомерОперации;
		ЗаполнитьЗначенияСвойств(ТекЗапись, Запись);
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если НЕ ЗначениеЗаполнено(Запись["Аналитика"+Инд]) Тогда
				
				ТекЗапись["Аналитика"+Инд]=Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИсхЗаписи = ДанныеЭлиминации;
	СтрОтбора = Новый Структура("НомерОперации", Операция.НомерОперации);
	СтарыеЗаписиОперации = ИсхЗаписи.НайтиСтроки(СтрОтбора);
	Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
		ИсхЗаписи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	Для Каждого СтрСверка ИЗ СтруктураСверки.ЗаписиСверкаВГО Цикл
		
		// Добавим данные по урегулированию
		
		ТекЗапись = ИсхЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(ТекЗапись, СтрСверка);
		ТекЗапись.ТабУрегулированияАналитик=Новый ХранилищеЗначения(СтрСверка.ТабУрегулированиеАналитик);
		
		ТекЗапись.НомерОперации = Операция.НомерОперации;
		
		// Добавим данные по элиминации (если проводилась)
		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("ОрганизацияБазис",СтрСверка.ОрганизацияБазис);
		СтруктураПоиска.Вставить("ОрганизацияСравнение",СтрСверка.ОрганизацияСравнение);
		
		СтруктураПоиска.Вставить("ПоказательБазис",СтрСверка.ПоказательБазис);
		СтруктураПоиска.Вставить("ПоказательСравнение",СтрСверка.ПоказательСравнение);
		
		МассивЭлиминация=СтруктураСверки.ЗаписиЭлиминации.НайтиСтроки(СтруктураПоиска);
		
		Если МассивЭлиминация.Количество()>0 Тогда
			
			ЗаполнитьЗначенияСвойств(ТекЗапись, МассивЭлиминация[0],"ЭкземплярОтчетаЭлиминацияБазис,ЭкземплярОтчетаЭлиминацияСравнение,ЭлиминационнаяПоправка");
			ТекЗапись.ТабЭлиминации=Новый ХранилищеЗначения(МассивЭлиминация[0].ТабЭлиминации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекТаблицаЗаписи.Очистить();
	
	Возврат Истина;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры сохранения и восстановления данных для расчетов между серверными вызовами

Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета=Неопределено) Экспорт
	
	Если ПеременныеДляРасчета=Неопределено Тогда
		ПеременныеДляРасчета=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
	КонецЕсли;
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка");
		
		Записи.Загрузить(ПеременныеДляРасчета.ТаблицаЗаписи);
		РедактируемыеЗаписи.Загрузить(ПеременныеДляРасчета.ТаблицаРедактируемыеЗаписи);
		ДанныеЭлиминации.Загрузить(ПеременныеДляРасчета.ТаблицаДанныеЭлиминации);
		
	КонецЕсли;
				
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
		
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("Регистратор",	Ссылка);
	СтруктураПеременных.Вставить("Ссылка",		Ссылка);
	СтруктураПеременных.Вставить("РеквизитыОбъекта",ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект));
	СтруктураПеременных.Вставить("ПроцедураСозданияОбъекта","Документы.РучныеКорректировки.СоздатьДокумент()");
	СтруктураПеременных.Вставить("ТекТаблицаЗаписи",ТекТаблицаЗаписи);
	СтруктураПеременных.Вставить("ВремТаблицаЗаписей",ВремТаблицаЗаписей);
	СтруктураПеременных.Вставить("СтруктураСверки",СтруктураСверки);
	СтруктураПеременных.Вставить("СписокОрганизаций",СписокОрганизаций);
	СтруктураПеременных.Вставить("КэшГруппРаскрытия",КэшГруппРаскрытия);
	СтруктураПеременных.Вставить("мСоответствиеНаборовЗаписей",мСоответствиеНаборовЗаписей);
	СтруктураПеременных.Вставить("ТаблицаЗаписи",Записи.Выгрузить());
	СтруктураПеременных.Вставить("ТаблицаРедактируемыеЗаписи",РедактируемыеЗаписи.Выгрузить());
	СтруктураПеременных.Вставить("ТаблицаДанныеЭлиминации",ДанныеЭлиминации.Выгрузить());
	
	Возврат СтруктураПеременных;
	
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УправлениеОтчетамиУХ.ОчиститьЗначенияПоказателейОтчетов(Ссылка,Отказ);
	
КонецПроцедуры



ТекТаблицаЗаписи=РедактируемыеЗаписи.ВыгрузитьКолонки();
ВремТаблицаЗаписей=Записи.ВыгрузитьКолонки();
