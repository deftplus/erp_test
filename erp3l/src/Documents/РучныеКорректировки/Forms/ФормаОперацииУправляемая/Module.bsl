
////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛНЯЕМЫЕ НА СЕРВЕРЕ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокОрганизаций=ОбщегоНазначенияУХ.ПолучитьСписокОрганизацийКорректировки(Параметры.Сценарий, Параметры.ПериодОтчета, Параметры.Организация);
	
	Наименование = Параметры.Наименование;
	Сбалансированная = Параметры.Сбалансированная;
	Комментарий = Параметры.Комментарий;
	ШаблонДокумента=Параметры.ШаблонДокумента;
	РабочийОбъектАдрес=Параметры.РабочийОбъектАдрес;
	ИдентификаторРодителя=Параметры.ИдентификаторРодителя;
	
	Если ЗначениеЗаполнено(ШаблонДокумента) Тогда
		
		ШаблонДокументаГруппа=ШаблонДокумента.ЭтоГруппа;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Проект) Тогда
		
		НовыеПараметры = Новый Массив();
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.РазделениеПоПроектам",Истина));
		Элементы.ЗаписиРучныеВидОтчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
		ЕстьРазделениеПоПроектамРучные=Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ЗаписиОперации)=Тип("Массив") Тогда
		ТекТаблицаЗаписей=ПроцедурыПреобразованияДанныхУХ.ПолучитьТаблицуИзМассиваСтруктур(Параметры.ЗаписиОперации);
		ОбновитьТаблицыФормы(ТекТаблицаЗаписей);
	КонецЕсли;
	
	Элементы.Сбалансированная.Доступность=НЕ Константы.ВсегдаКонтролироватьБалансРучныхОпераций.Получить();
	УстановитьНеобходимостьБалансировки();
		
	УстановитьВидимость();
	ПроверитьНаличиеВалютныхПоказателей();
	УстановитьЗаголовок();
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(РабочийОбъектАдрес);
		
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьСправочникОбъект()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект)
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ИдентификаторРодителя);
					
КонецПроцедуры // ПолучитьСправочникОбъект()

&НаСервере
Процедура ОбновитьОбъектВХранилище()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ИдентификаторРодителя);
	
КонецПроцедуры // ОбновитьОбъектВХранилище()


&НаСервере
Процедура УстановитьЗаголовок()
	
	Заголовок = НСтр("ru = 'Организация: '") + СокрЛП(Параметры.Организация);
	
	Если ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Заголовок = Заголовок + НСтр("ru = ', вид операции: '") + ШаблонДокумента.Наименование;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗаголовок()

&НаСервере
Процедура УстановитьВидимость()
		
	Элементы.ЗаписиРучные.ПодчиненныеЭлементы.ЗаписиРучныеВидПоказателя.Видимость=Сбалансированная;
	Элементы.ЗаписиРучные.ПодчиненныеЭлементы.ЗаписиРучныеДебет.Видимость=Сбалансированная;
	Элементы.ЗаписиРучные.ПодчиненныеЭлементы.ЗаписиРучныеКредит.Видимость=Сбалансированная;
	
КонецПроцедуры // УстановитьВидимость() 

&НаСервере
Процедура УстановитьНеобходимостьБалансировки()
	
	Если Элементы.Сбалансированная.Доступность Тогда // Флаг балансировки выставляют пользователи сами
		Возврат;
	КонецЕсли;
	
	ЕстьБалансируемыеПоказатели=Ложь;
	
	Для Каждого Строка ИЗ ЗаписиРучные Цикл
		Если ЗначениеЗаполнено(Строка.ВидПоказателя) Тогда
			ЕстьБалансируемыеПоказатели=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
			
	Если НЕ ЕстьБалансируемыеПоказатели=Сбалансированная Тогда
		Сбалансированная=ЕстьБалансируемыеПоказатели;
		ПриИзмененииПризнакаБалансировки();
	КонецЕсли
	
КонецПроцедуры // ПроверитьВидыПоказателей()

&НаСервере
Процедура ПриИзмененииПризнакаБалансировки()
	
	Если Сбалансированная Тогда
		
		МассивРучные=ЗаписиРучные.НайтиСтроки(Новый Структура("ВидПоказателя",Перечисления.ВидыПоказателей.ПустаяСсылка()));
		
		Для Каждого Строка ИЗ МассивРучные Цикл
			
			ЗаписиРучные.Удалить(Строка);
			
		КонецЦикла;
				
	КонецЕсли;
	
	УстановитьНадписьСуммаБаланса();
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииПризнакаБалансировки() 

&НаСервере
Процедура ОбновитьТаблицыФормы(ТекТаблицаЗаписей)
	
	ЗаписиРучные.Очистить();
		
	Для Каждого ЗаписьОперации Из ТекТаблицаЗаписей Цикл
					
		НовСтр = ЗаписиРучные.Добавить();
						
		ЗаполнитьЗначенияСвойств(НовСтр, ЗаписьОперации);
		ПривестиЗначенияАналитик(НовСтр);
		
		НовСтр.РазделениеПоПроектам=НовСтр.ВидОтчета.РазделениеПоПроектам;
		
		Если НовСтр.РазделениеПоПроектам Тогда
			
			ЕстьРазделениеПоПроектамРучные=Истина;
			
		КонецЕсли;		
				
	КонецЦикла;
		
	УстановитьНадписьСуммаБаланса();
		
КонецПроцедуры // ОбновитьТаблицыФормы()

&НаСервере
Процедура УстановитьНадписьСуммаБаланса()
	
	ТекМассивЗаписей=Новый Массив;
	ТекМассивЗаписей.Добавить(ЗаписиРучные);
		
	Если Сбалансированная Тогда
		
		СтруктураСумм=Обработки.КорректировкиЗначенийПоказателей.ПолучитьСуммуБаланса(Новый Структура("Сбалансированная",Сбалансированная), ТекМассивЗаписей);
		
		Элементы.НадписьСуммаБаланса.Заголовок="Сумма активных показателей: "+СтруктураСумм.Дебет+", сумма пассивных показателей: "+СтруктураСумм.Кредит+". Баланс операции:"+СтруктураСумм.Значение; 
		
	Иначе
		
		Элементы.НадписьСуммаБаланса.Заголовок = "Сумма операции: " +Обработки.КорректировкиЗначенийПоказателей.ПолучитьСуммуБаланса(Новый Структура("Сбалансированная",Сбалансированная), ТекМассивЗаписей).Значение + " " + Параметры.Валюта;
		
	КонецЕсли;
	
КонецПроцедуры

// Последовательно устанавливает тип для колонок АналитикаN табличного поля Записи.
//
&НаСервере
Процедура ПривестиЗначенияАналитик(ТекущиеДанные)
		
	Для Инд = ТекущиеДанные.АналитикВидаОтчета+1 По ТекущиеДанные.АналитикПоказателяОтчета Цикл
		
		ТекАналитика=ТекущиеДанные["ВидАналитики" + Инд];
		ТекущиеДанные["Аналитика" + Инд] = ?(ЗначениеЗаполнено(ТекАналитика), ТекАналитика.ТипЗначения.ПривестиЗначение(ТекущиеДанные["Аналитика" + Инд]), Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры // ПривестиЗначенияАналитик()

&НаСервере
Функция ПолучитьЭкземплярОтчетаПоПараметрам(ВидОтчета,Организация,Проект)
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("АналитикВидаОтчета",ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета));
	СтруктураДанных.Вставить("РазделениеПоПроектам",ВидОтчета.РазделениеПоПроектам);
    СтруктураДанных.Вставить("ЭкземплярОтчета",Неопределено);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ЗапросОтчеты=Новый Запрос;
		ЗапросОтчеты.Текст="ВЫБРАТЬ
		|	НастраиваемыйОтчет.Ссылка КАК ЭкземплярОтчета
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НастраиваемыйОтчет.Организация = &Организация
		|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
		|	И НастраиваемыйОтчет.Сценарий = &Сценарий
		|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
		|	И НастраиваемыйОтчет.ОсновнаяВалюта = &Валюта";
		
		Если СтруктураДанных.РазделениеПоПроектам Тогда
			
			ЗапросОтчеты.Текст=ЗапросОтчеты.Текст+"
			|	И НастраиваемыйОтчет.Проект = &Проект";	
			ЗапросОтчеты.УстановитьПараметр("Проект",Проект);
			
		КонецЕсли;

		ЗапросОтчеты.УстановитьПараметр("Организация",	Организация);
		ЗапросОтчеты.УстановитьПараметр("ПериодОтчета",	Параметры.ПериодОтчета);
		ЗапросОтчеты.УстановитьПараметр("Сценарий",		Параметры.Сценарий);
		ЗапросОтчеты.УстановитьПараметр("ВидОтчета",	ВидОтчета);
		ЗапросОтчеты.УстановитьПараметр("Валюта",		Параметры.Валюта);
		
		ТекОтчет=ЗапросОтчеты.Выполнить().Выбрать();
		Если ТекОтчет.Следующий() Тогда
			СтруктураДанных.Вставить("ЭкземплярОтчета",ТекОтчет.ЭкземплярОтчета);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьЭкземплярОтчетаПоПараметрам()

&НаСервере
Процедура ПолучитьДанныеПоСтроке(ИдентификаторСтроки)
	
	ДанныеСтроки=ЗаписиРучные.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Запрос=Новый Запрос;
	
	ЕстьОтборПоАналитикам=Ложь;
	АналитикПоказателяОтчета=0;
	ТекстУсловие="";
		
	ЗапросГруппаРаскрытия=Новый Запрос;
	ЗапросГруппаРаскрытия.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.ВидПоказателя,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|				ИЛИ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1
	|	КОНЕЦ КАК ВидАналитики1,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|				ИЛИ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2
	|	КОНЕЦ КАК ВидАналитики2,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|				ИЛИ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3
	|	КОНЕЦ КАК ВидАналитики3,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|				ИЛИ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4
	|	КОНЕЦ КАК ВидАналитики4,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|				ИЛИ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5
	|	КОНЕЦ КАК ВидАналитики5,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|				ИЛИ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6
	|	КОНЕЦ КАК ВидАналитики6,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидКурса
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Ссылка";
	
	ЗапросГруппаРаскрытия.УстановитьПараметр("Ссылка",ДанныеСтроки.Показатель);
	
	Результат=ЗапросГруппаРаскрытия.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,Результат);
				
		Для Индекс=ДанныеСтроки.АналитикВидаОтчета+1 ПО ЧислоДопАналитик Цикл
			
			ДанныеСтроки["ВидАналитики"+Индекс]=Результат["ВидАналитики"+Индекс];
			
			ТекАналитика=Результат["ВидАналитики"+Индекс];
			ДанныеСтроки["Аналитика" + Индекс] = ?(ЗначениеЗаполнено(ТекАналитика), ТекАналитика.ТипЗначения.ПривестиЗначение(ДанныеСтроки["Аналитика" + Индекс]), Неопределено);
			
			Если НЕ Результат["ВидАналитики"+Индекс]=Неопределено Тогда
				
				АналитикПоказателяОтчета=Индекс;
				
				ТекстУсловие=ТекстУсловие+"
				|И ЗначенияПоказателейОтчетов.Аналитика"+Индекс+"=&Аналитика"+Индекс;
				
				Запрос.УстановитьПараметр("Аналитика"+Индекс,ДанныеСтроки["Аналитика"+Индекс]);
				
				Если ЗначениеЗаполнено(ДанныеСтроки["Аналитика"+Индекс]) Тогда
					
					ЕстьОтборПоАналитикам=Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОтборПоАналитикам Тогда
			
			ТаблицаРегистра="ЗначенияПоказателейОтчетов"+АналитикПоказателяОтчета;
			
		Иначе
			
			ТаблицаРегистра=?(ДанныеСтроки.АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+ДанныеСтроки.АналитикВидаОтчета);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеСтроки.ВидПоказателя="";
		ТаблицаРегистра=?(ДанныеСтроки.АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+ДанныеСтроки.АналитикВидаОтчета);
		
	КонецЕсли;
	
	Если ДанныеСтроки.РаспределятьПоАналитикам Тогда
		ЕстьОтборПоАналитикам=Ложь;
		ТаблицаРегистра=?(ДанныеСтроки.АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+ДанныеСтроки.АналитикВидаОтчета);
	КонецЕсли;
	
	ДанныеСтроки.АналитикПоказателяОтчета=АналитикПоказателяОтчета;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЭкземплярОтчета) Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение
		|ИЗ
		|	РегистрСведений."+ТаблицаРегистра+" КАК ЗначенияПоказателейОтчетов
		|ГДЕ
		|	ЗначенияПоказателейОтчетов.Версия.ЭкземплярОтчета = &ЭкземплярОтчета
		|	И (НЕ ЗначенияПоказателейОтчетов.Версия.Регистратор = &ДокументСсылка)
		|	И ЗначенияПоказателейОтчетов.Показатель = &Показатель";
		
		Запрос.УстановитьПараметр("ЭкземплярОтчета",ДанныеСтроки.ЭкземплярОтчета);
		Запрос.УстановитьПараметр("ДокументСсылка",Параметры.ДокументСсылка);
		Запрос.УстановитьПараметр("Показатель",ДанныеСтроки.Показатель);
		
		Если ЕстьОтборПоАналитикам Тогда
			
			Запрос.Текст=Запрос.Текст+ТекстУсловие;
			
		КонецЕсли;
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ДанныеСтроки.НачОстаток=Результат.Значение;
		Иначе
			ДанныеСтроки.НачОстаток=0;
		КонецЕсли;
		
	Иначе
		
		ДанныеСтроки.НачОстаток=0;
		
	КонецЕсли;
	
	ПроверитьНаличиеВалютныхПоказателей();
	
КонецПроцедуры // ПолучитьДанныеПоСтроке()

&НаСервере
Процедура ПроверитьНаличиеВалютныхПоказателей()
	
	Элементы.ЗаписиРучныеАналитикаВалюта.Видимость	= (НЕ ЗаписиРучные.НайтиСтроки(Новый Структура("Валютный",Истина)).Количество()=0);
	Элементы.ЗаписиРучныеЗначениеВалюта.Видимость	= (НЕ ЗаписиРучные.НайтиСтроки(Новый Структура("ПересчитыватьВалютнуюСумму",Истина)).Количество()=0);
	
	Если Элементы.ЗаписиРучныеЗначениеВалюта.Видимость И СоответствиеВидовКурса=Неопределено Тогда
		
		ЗначениеВРеквизитФормы(УправлениеРабочимиПроцессамиУХ.ПолучитьТаблицуКурсов(Параметры.Сценарий,Параметры.ПериодОтчета),"ПериодическиеКурсы");
		
		ВидыКурсов=Новый Соответствие;
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПериода,				"КурсНаКонецПериода");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПредыдущегоПериода,	"КурсНаКонецПредыдущегоПериода");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаНачалоПериода,			"КурсНаНачалоПериода");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериод,			"СреднийКурсЗаПериод");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО,		"СреднийКурсЗаПериодМСФО");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод,	"СреднийКурсЗаПредыдущийПериод");
		
		СоответствиеВидовКурса=Новый ФиксированноеСоответствие(ВидыКурсов);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьВалюта()

&НаКлиенте
Функция ПересчитатьИзВалютыВВалюту(Значение,ИсходнаяВалюта,НоваяВалюта,ВидКурса)
	
	МассивКурсовИсходный=ПериодическиеКурсы.НайтиСтроки(Новый Структура("Валюта",ИсходнаяВалюта));
	
	Если МассивКурсовИсходный.Количество()=0 ИЛИ МассивКурсовИсходный[0][СоответствиеВидовКурса[ВидКурса]]=0 Тогда
		
		Сообщить("Не задан курс "+ВидКурса+" для валюты "+ИсходнаяВалюта);
		Возврат 0;
		
	КонецЕсли;
	
	МассивКурсовНовый=ПериодическиеКурсы.НайтиСтроки(Новый Структура("Валюта",НоваяВалюта));
	
	Если МассивКурсовНовый.Количество()=0 ИЛИ МассивКурсовНовый[0][СоответствиеВидовКурса[ВидКурса]]=0 Тогда
		
		Сообщить("Не задан курс "+ВидКурса+" для валюты "+НоваяВалюта);
		Возврат 0;
		
	КонецЕсли;
	
	КурсИсходный=МассивКурсовИсходный[0][СоответствиеВидовКурса[ВидКурса]];
	КурсНовый=МассивКурсовНовый[0][СоответствиеВидовКурса[ВидКурса]];
	
	КратностьИсходная=?(МассивКурсовИсходный[0].Кратность=0,1,МассивКурсовИсходный[0].Кратность);
	КратностьНовая=?(МассивКурсовНовый[0].Кратность=0,1,МассивКурсовНовый[0].Кратность);
	
	Возврат Значение * (КурсИсходный * КратностьНовая) / (КурсНовый * КратностьИсходная);
		
КонецФункции // ПересчитатьИзВалютыВВалюту()

&НаСервере
Процедура ОбновитьАналитикиВидаОтчета(ИдентификаторСтроки)
	
	ТекущиеДанные=ЗаписиРучные.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Для Инд=1 по ТекущиеДанные.АналитикВидаОтчета Цикл
		ТекущиеДанные["Аналитика"+Инд]=ТекущиеДанные.ЭкземплярОтчета["Аналитика"+Инд];
	КонецЦикла;
		
КонецПроцедуры // ОбновитьАналитикиВидаОтчета()

&НаСервере
Функция СформироватьПредвТаблицуРедактируемыхЗаписей(РабочийДокумент=Неопределено)
	
	Если РабочийДокумент=Неопределено Тогда
		РабочийОбъект=ПолучитьРабочийОбъект();
	Иначе
		РабочийОбъект=РабочийДокумент;
	КонецЕсли;
	
	РабочийОбъект.ТекТаблицаЗаписи.Очистить();
	
	Для Каждого Запись Из ЗаписиРучные Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.Показатель) Тогда
			Сообщить("В строке "+(ЗаписиРучные.Индекс(Запись)+1)+" таблицы ручных корректировок не указан показатель.",СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(Запись.ЭкземплярОтчета) Тогда
						
			ТекКомментарий="Отчет создан при формировании ручной корректировки.";
			НовыйЭкземплярОтчета=РабочийОбъект.ПолучитьЭкземплярОтчета(Запись.Организация,Запись.ВидОтчета,Параметры.Сценарий,Истина,Истина,ТекКомментарий,Запись.Проект);
			
			Если НовыйЭкземплярОтчета=Неопределено Тогда
				
				Сообщить("В строке "+ЗаписиРучные.Индекс(Запись)+" таблицы ручных корректировок не указан экземпляр отчета.",СтатусСообщения.Внимание);
				Возврат Ложь;
								
			Иначе
				
				Запись.ЭкземплярОтчета=НовыйЭкземплярОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
				
		ТекЗапись = РабочийОбъект.ТекТаблицаЗаписи.Добавить();
		ТекЗапись.НомерОперации = Параметры.НомерОперации;
		ЗаполнитьЗначенияСвойств(ТекЗапись, Запись);
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если НЕ ЗначениеЗаполнено(Запись["Аналитика"+Инд]) Тогда
				
				ТекЗапись["Аналитика"+Инд]=Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЕстьРаскрытие=Ложь;
		ТекЗапись.РаспределятьПоАналитикам=Запись.РаспределятьПоАналитикам;
		
		Если НЕ ТекЗапись.РаспределятьПоАналитикам Тогда
			
			Для Индекс=(Запись.АналитикВидаОтчета+1) ПО Запись.АналитикПоказателяОтчета Цикл
				
				Если ЗначениеЗаполнено(Запись["Аналитика"+Индекс]) Тогда 
					
					ЕстьРаскрытие=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Запись.АналитикаВалюта) Тогда
				
				ЕстьРаскрытие=Истина;
									
			КонецЕсли;
			
		КонецЕсли;
		
		ТекЗапись.Раскрытие=ЕстьРаскрытие;
		
	КонецЦикла;
	
	Если РабочийДокумент=Неопределено Тогда
		
		ПоместитьРабочийОбъект(РабочийОбъект);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СформироватьПредвТаблицуРедактируемыхЗаписей()

// Проверяет правильность задания реквизитов операции и сохраняет
// эти реквизиты в форме-владельце.
//
&НаСервере
Функция СохранитьИзменения()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ИсхЗаписи = РабочийОбъект.РедактируемыеЗаписи;
	
	Если НЕ (РасчетВыполнен ИЛИ СформироватьПредвТаблицуРедактируемыхЗаписей(РабочийОбъект)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураОперации=Новый Структура;
	СтруктураОперации.Вставить("Наименование",Наименование);
	СтруктураОперации.Вставить("Сбалансированная",Сбалансированная);
	СтруктураОперации.Вставить("Комментарий",Комментарий);
	СтруктураОперации.Вставить("Элиминация",Ложь);
	СтруктураОперации.Вставить("НомерОперации",Параметры.НомерОперации);
	СтруктураОперации.Вставить("ИдентификаторРодителя",ИдентификаторРодителя);
		
	РезультатПроверки = РабочийОбъект.ПроверитьОперацию(СтруктураОперации, РабочийОбъект.ТекТаблицаЗаписи);
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		Для НомСтр = 1 По СтрЧислоСтрок(РезультатПроверки) Цикл
			Сообщить(СтрПолучитьСтроку(РезультатПроверки, НомСтр), СтатусСообщения.Важное);
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
		
	ТекМассивЗаписей=Новый Массив;
	ТекМассивЗаписей.Добавить(РабочийОбъект.ТекТаблицаЗаписи);
	
	СтруктураОперации.Вставить("Значение",Обработки.КорректировкиЗначенийПоказателей.ПолучитьСуммуБаланса(Новый Структура("Сбалансированная",Сбалансированная), ТекМассивЗаписей).Значение);
	
	ИсхЗаписи = РабочийОбъект.РедактируемыеЗаписи;
	СтрОтбора = Новый Структура("НомерОперации", Параметры.НомерОперации);
	СтарыеЗаписиОперации = ИсхЗаписи.НайтиСтроки(СтрОтбора);
	Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
		ИсхЗаписи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(РабочийОбъект.ТекТаблицаЗаписи,ИсхЗаписи);
	
	Если НЕ РасчетВыполнен Тогда
		
		ПараметрыОбработки=Новый Структура;
		ПараметрыОбработки.Вставить("ДокументОбъект",		РабочийОбъект);
		ПараметрыОбработки.Вставить("НомерОперации",		Параметры.НомерОперации);
		ПараметрыОбработки.Вставить("ТаблицаСтрок",			Неопределено);
		ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
		ПараметрыОбработки.Вставить("Сбалансированная",		Сбалансированная);
		ПараметрыОбработки.Вставить("Трансформационная",	Ложь);
		ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);	
		
		РабочийОбъект.ВремТаблицаЗаписей=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
		РасчетВыполнен=Истина;
		
	КонецЕсли;
	
	СтрОтбора = Новый Структура("НомерОперации", Параметры.НомерОперации);
	СтарыеЗаписиОперации = РабочийОбъект.Записи.НайтиСтроки(СтрОтбора);
	Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
		РабочийОбъект.Записи.Удалить(СтараяЗаписьОперации);
	КонецЦикла;
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(РабочийОбъект.ВремТаблицаЗаписей,РабочийОбъект.Записи);
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	Возврат СтруктураОперации;
	
КонецФункции

&НаКлиенте
Процедура СбалансированнаяПриИзменении(Элемент)
		
	СбалансированнаяПриИзмененииЗавершение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СбалансированнаяПриИзмененииЗавершение(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
        
    Если Сбалансированная Тогда
		
		Отбор = Новый Структура("ВидПоказателя", ПредопределенноеЗначение("Перечисление.ВидыПоказателей.ПустаяСсылка"));
        МассивРучные = ЗаписиРучные.НайтиСтроки(Отбор);
		
		ДопПараметры = Новый Структура("МассивРучные", МассивРучные);
		Оповещение = Новый ОписаниеОповещения("СбалансированнаяПриИзмененииОбновитьБалансированная", ЭтотОбъект, ДопПараметры);
        ПоказатьВопрос(Оповещение, "Строки операции с показателями, для которых не установлен вид, будут удалены.
            						|Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
        
    КонецЕсли;
    
    ПриИзмененииПризнакаБалансировки();
	
КонецПроцедуры

&НаКлиенте
Процедура СбалансированнаяПриИзмененииОбновитьБалансированная(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивРучные = ДополнительныеПараметры.МассивРучные;   
    
    Если МассивРучные.Количество()>0  
        И РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        
        Сбалансированная = Ложь;
        
    КонецЕсли;    
    
    ПриИзмененииПризнакаБалансировки();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокОрганизаций));
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеВидОтчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаОтчета(Истина);	
		
КонецПроцедуры
 
 &НаКлиенте
Процедура ПриИзмененииВидаОтчета(РучноеЗаполнение)
	
	ТекущиеДанные=Элементы.ЗаписиРучные.ТекущиеДанные;
		
	ДанныеПоВидуОтчета=ПолучитьЭкземплярОтчетаПоПараметрам(ТекущиеДанные.ВидОтчета,ТекущиеДанные.Организация,ТекущиеДанные.Проект);
	
	ТекущиеДанные.ЭкземплярОтчета=ДанныеПоВидуОтчета.ЭкземплярОтчета;
	ТекущиеДанные.Показатель="";
	ТекущиеДанные.ВидПоказателя="";
	
	Если РучноеЗаполнение Тогда
		
		Для Инд=1 По ЧислоДопАналитик Цикл
			ТекущиеДанные["Аналитика"+Инд]=Неопределено;
			ТекущиеДанные["ВидАналитики"+Инд]=Неопределено;
		КонецЦикла;
		
		ТекущиеДанные.АналитикПоказателяОтчета=0;
		ТекущиеДанные.РаспределятьПоАналитикам=Истина;
		ТекущиеДанные.АналитикВидаОтчета=ДанныеПоВидуОтчета.АналитикВидаОтчета;
		
		ТекущиеДанные.НачОстаток=0;
		ТекущиеДанные.КонОстаток=ТекущиеДанные.Значение*ПолучитьЗнакЗаписи(ТекущиеДанные);
		
		ТекущиеДанные.РазделениеПоПроектам=ДанныеПоВидуОтчета.РазделениеПоПроектам;
		
		Если Не ТекущиеДанные.РазделениеПоПроектам Тогда
			
			ТекущиеДанные.Проект="";
			
		КонецЕсли;
		
		ЕстьРазделениеПоПроектамРучные=ЗаписиРучные.НайтиСтроки(Новый Структура("РазделениеПоПроектам",Истина)).Количество()>0;
		
	КонецЕсли;
		
КонецПроцедуры // ПриИзмененииВидаОтчета()

&НаКлиенте
Процедура ПриИзмененииОрганизацииПроекта(РучноеЗаполнение)
	
	ТекущиеДанные=Элементы.ЗаписиРучные.ТекущиеДанные;
		
	ДанныеПоВидуОтчета=ПолучитьЭкземплярОтчетаПоПараметрам(ТекущиеДанные.ВидОтчета,ТекущиеДанные.Организация,ТекущиеДанные.Проект);
	
	ТекущиеДанные.ЭкземплярОтчета=ДанныеПоВидуОтчета.ЭкземплярОтчета;
	
КонецПроцедуры // ПриИзмененииОрганизации()

&НаКлиенте
Функция ПолучитьЗнакЗаписи(Запись)
	
	Если НЕ Сбалансированная Тогда
		Возврат 1;	
	ИначеЕсли Запись.ВидПоказателя=ПредопределенноеЗначение("Перечисление.ВидыПоказателей.Активный") И Запись.Дебет Тогда
		Возврат 1;
	ИначеЕсли Запись.ВидПоказателя=ПредопределенноеЗначение("Перечисление.ВидыПоказателей.Активный") И Запись.Кредит Тогда
		Возврат -1;
	ИначеЕсли Запись.ВидПоказателя=ПредопределенноеЗначение("Перечисление.ВидыПоказателей.Пассивный") И Запись.Кредит Тогда
		Возврат 1;
	ИначеЕсли Запись.ВидПоказателя=ПредопределенноеЗначение("Перечисление.ВидыПоказателей.Пассивный") И Запись.Дебет Тогда
		Возврат -1;
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции // ПолучитьЗнакЗаписи()

&НаКлиенте
Процедура ЗаписиРучныеОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииПроекта(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоСтроке()
	
	ТекущиеДанные=Элементы.ЗаписиРучные.ТекущиеДанные;
	
	ПолучитьДанныеПоСтроке(ТекущиеДанные.ПолучитьИдентификатор());
			
	ТекущиеДанные.КонОстаток=ТекущиеДанные.НачОстаток+ТекущиеДанные.Значение*ПолучитьЗнакЗаписи(ТекущиеДанные);
		
КонецПроцедуры // ОбновитьДанныеПоСтроке() 

&НаКлиенте
Процедура ЗаписиРучныеПоказательПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеРаспределятьПоАналитикамПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ЗаписиРучные.ТекущиеДанные;
	
	Если ТекущиеДанные.РаспределятьПоАналитикам Тогда
		
		Для Индекс=ТекущиеДанные.АналитикВидаОтчета+1 ПО ЧислоДопАналитик Цикл
			
			ТекущиеДанные["Аналитика"+Индекс]=Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
				
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеАналитика1ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеАналитика2ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеАналитика3ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеАналитика4ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеАналитика5ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РасчетВыполнен=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ЗаписиРучные.ТекущиеДанные;
	ТекущиеДанные.КонОстаток=ТекущиеДанные.НачОстаток+ТекущиеДанные.Значение*ПолучитьЗнакЗаписи(ТекущиеДанные);
	ОбновитьДанныеПоВалюте(Элементы.ЗаписиРучные.ТекущаяСтрока,"Значение");
	УстановитьНадписьСуммаБаланса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеДебетПриИзменении(Элемент)
	
	УстановитьНадписьСуммаБаланса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеКредитПриИзменении(Элемент)
	
	УстановитьНадписьСуммаБаланса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеЭкземплярОтчетаПриИзменении(Элемент)
	
	Если Элементы.ЗаписиРучные.ТекущиеДанные.АналитикВидаОтчета>0 Тогда
		ОбновитьАналитикиВидаОтчета(Элементы.ЗаписиРучные.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеОперации(Команда)
	
	СтруктураОперации=СохранитьИзменения();
	
	Если НЕ ТипЗнч(СтруктураОперации)=Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураОперации.Вставить("РасчетВыполнен",РасчетВыполнен);
	СтруктураОперации.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	
	Оповестить("ИзмененыДанныеРучнойКорректировки",СтруктураОперации);
	Закрыть();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЕстьИзменениеКлючевыхПараметров=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗаписиРучные.ТекущиеДанные.Организация) И СписокОрганизаций.Количество()=1 Тогда
		
		Элементы.ЗаписиРучные.ТекущиеДанные.Организация=СписокОрганизаций[0].Значение;
		ЕстьИзменениеКлючевыхПараметров=Истина;
				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗаписиРучные.ТекущиеДанные.Проект) И ЗначениеЗаполнено(Параметры.Проект) Тогда
		
		Элементы.ЗаписиРучные.ТекущиеДанные.Проект=Параметры.Проект;
		ЕстьИзменениеКлючевыхПараметров=Истина;
		
	КонецЕсли;

	Если ЕстьИзменениеКлючевыхПараметров Тогда
		
		ПриИзмененииОрганизацииПроекта(Истина);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбора(ИдентификаторСтроки)
	
	Если ИдентификаторСтроки=Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРеквизит = ОбщегоНазначенияКлиентСерверУХ.ПолучитьРеквизитФормыПоПути(ЭтаФорма, ТекущийЭлемент.ПутьКДанным);
	
	ТекущиеДанные = ТаблицаРеквизит.НайтиПоИдентификатору(ИдентификаторСтроки);
		
	ШаблонИмениРеквизита = "Аналитика"  + "%1";
	
	ШаблонИмениЭлемента = "Аналитика"  + "%1";
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
		ДанныеАналитики = ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытия(ТекущиеДанные.Показатель);
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Индекс= 1 По 4 Цикл
		
		ИмяЭлемента		= СтрШаблон(ШаблонИмениЭлемента, Индекс);
		ИмяРеквизита	= СтрШаблон(ШаблонИмениРеквизита, Индекс);
		
		ИмяЭлементаВидАналитики = "ВидАналитики" + Индекс;
		Элемент=Элементы[ИмяЭлемента];
			
		ТекВидАналитики = ДанныеАналитики[ИмяЭлементаВидАналитики];
		
		Если Не ЗначениеЗаполнено(ТекВидАналитики.ВидАналитики) Тогда
			
			Продолжить;
			
		ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			СвязиПараметровВыбора = Новый Массив;
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + ТекущийЭлемент.Имя + ".ТекущиеДанные."+ИмяЭлементаВидАналитики));
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
		ИначеЕсли ТекВидАналитики.Свойство("ТипыВладельцев") Тогда
			
			ПолеВладельца="";
			
			Для Каждого КлючИЗначение ИЗ ДанныеАналитики Цикл // Ищем поле субконто с тем же типом, что и владелец
				
				Если СтрНайти(КлючИЗначение.Ключ,"Валют")>0 Тогда
					
					Продолжить;
				
				ИначеЕсли Не ЗначениеЗаполнено(КлючИЗначение.Значение.ВидАналитики) Тогда
					
					Продолжить;
					
				ИначеЕсли НЕ ТекВидАналитики.ТипыВладельцев.НайтиПоЗначению(КлючИЗначение.Значение.Тип)=Неопределено Тогда
					
					ПолеВладельца = "Элементы." + ТекущийЭлемент.Имя + ".ТекущиеДанные.Аналитика"+Сред(КлючИЗначение.Ключ,13);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
						
			Если НЕ ПустаяСтрока(ПолеВладельца) Тогда
				
				СвязиПараметровВыбора = Новый Массив;
				СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПолеВладельца));
				Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
				
			КонецЕсли;
			
		Иначе
			
			СвязиПараметровВыбора = Новый Массив;
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры // УстановитьСвязиПараметровВыбора() 

&НаКлиенте
Процедура ЗаписиРучныеПередНачаломИзменения(Элемент, Отказ)
	
	Если Лев(Элемент.ТекущийЭлемент.Имя,9)="Аналитика"  Тогда
		
		Если Элементы.ЗаписиРучные.ТекущиеДанные.РаспределятьПоАналитикам
			ИЛИ (НЕ ЗначениеЗаполнено(Элементы.ЗаписиРучные.ТекущиеДанные["ВидАналитики"+СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"Аналитика","")])) Тогда
			
			Отказ=Истина;
			
		Иначе
			
			УстановитьСвязиПараметровВыбора(Элементы.ЗаписиРучные.ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиРучныеПроектПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииПроекта(Истина);
	
КонецПроцедуры

&НаСервере
Процедура АналитикаВалютаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура АналитикаВалютаПриИзменении(Элемент)
	
	ОбновитьДанныеПоВалюте(Элементы.ЗаписиРучные.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоВалюте(ИдентификаторСтроки,ИмяПоля="")
	
	ДанныеСтроки=ЗаписиРучные.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ДанныеСтроки.ПересчитыватьВалютнуюСумму Тогда
		
		ДанныеСтроки.ЗначениеВалюта=0;
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидКурса) Тогда
		
		ПоказатьПредупреждение(,"Не задан вид курса для показателя "+ДанныеСтроки.Показатель);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПоля) Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЗначениеВалюта) Тогда
			
			ДанныеСтроки.Значение=ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ЗначениеВалюта,ДанныеСтроки.АналитикаВалюта,Параметры.Валюта,ДанныеСтроки.ВидКурса);
			ДанныеСтроки.КонОстаток=ДанныеСтроки.НачОстаток+ДанныеСтроки.Значение*ПолучитьЗнакЗаписи(ДанныеСтроки);
			УстановитьНадписьСуммаБаланса();
			
		Иначе
			
			ДанныеСтроки.ЗначениеВалюта=ПересчитатьИзВалютыВВалюту(ДанныеСтроки.Значение,Параметры.Валюта,ДанныеСтроки.АналитикаВалюта,ДанныеСтроки.ВидКурса);
			
		КонецЕсли;
		
	ИначеЕсли ИмяПоля="ЗначениеВалюта" Тогда
		
		ДанныеСтроки.Значение=ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ЗначениеВалюта,ДанныеСтроки.АналитикаВалюта,Параметры.Валюта,ДанныеСтроки.ВидКурса);
		ДанныеСтроки.КонОстаток=ДанныеСтроки.НачОстаток+ДанныеСтроки.Значение*ПолучитьЗнакЗаписи(ДанныеСтроки);
		УстановитьНадписьСуммаБаланса();
		
	Иначе
		
		ДанныеСтроки.ЗначениеВалюта=ПересчитатьИзВалютыВВалюту(ДанныеСтроки.Значение,Параметры.Валюта,ДанныеСтроки.АналитикаВалюта,ДанныеСтроки.ВидКурса);
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьДанныеПоВалюте()

&НаКлиенте
Процедура ЗаписиРучныеЗначениеВалютаПриИзменении(Элемент)
	
	ОбновитьДанныеПоВалюте(Элементы.ЗаписиРучные.ТекущаяСтрока,"ЗначениеВалюта");
	
КонецПроцедуры


&НаКлиенте
Процедура Аналитика5ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры


&НаКлиенте
Процедура Аналитика6ПриИзменении(Элемент)
	
	ОбновитьДанныеПоСтроке();
	
КонецПроцедуры
 
