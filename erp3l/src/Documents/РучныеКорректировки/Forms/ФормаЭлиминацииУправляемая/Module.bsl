
///////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛНЯЕМЫЕ НА СЕРВЕРЕ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокОрганизаций=ОбщегоНазначенияУХ.ПолучитьСписокОрганизацийКорректировки(Параметры.Сценарий, Параметры.ПериодОтчета, Параметры.Организация);
	
	Наименование = Параметры.Наименование;
	Сбалансированная = Параметры.Сбалансированная;
	Комментарий = Параметры.Комментарий;
	РабочийОбъектАдрес=Параметры.РабочийОбъектАдрес;
	Организация=Параметры.Организация;
	ТипОрганизацийДляСверки=Параметры.ТипОрганизацийДляСверки;
	СценарийДляНеурегулированныхОтклонений=Параметры.СценарийДляНеурегулированныхОтклонений;
	ИдентификаторРодителя=Параметры.ИдентификаторРодителя;
		
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ЗаписиОперации = РабочийОбъект.ДанныеЭлиминации.НайтиСтроки(Новый Структура("НомерОперации", Параметры.НомерОперации));
	
	ТабЗаписиЭлиминации=РеквизитФормыВЗначение("ЗаписиЭлиминации");
	ТабЗаписиСверкаВГО=РеквизитФормыВЗначение("ЗаписиСверкаВГО");
	
	Для Каждого ЗаписьОперации Из ЗаписиОперации Цикл
		
		Если НЕ ЗаписьОперации.ЭлиминационнаяПоправка=0 Тогда
			
			НовСтр = ТабЗаписиЭлиминации.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ЗаписьОперации);
			
			НовСтр.ТабУрегулированиеАналитик=ЗаписьОперации.ТабУрегулированияАналитик.Получить();
			НовСтр.ТабЭлиминации=ЗаписьОперации.ТабЭлиминации.Получить();
			
			НовСтр.УрегулированоПоАналитике=Истина; 
			
		КонецЕсли;
		
		НовСтрВГО = ТабЗаписиСверкаВГО.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрВГО, ЗаписьОперации);
		НовСтрВГО.ТабУрегулированиеАналитик=ЗаписьОперации.ТабУрегулированияАналитик.Получить();		
		НовСтрВГО.УрегулированоПоАналитике=Истина; 
		
	КонецЦикла;
	
	ОбновитьДанныеАналитик(ТабЗаписиЭлиминации,Ложь);
	ОбновитьДанныеАналитик(ТабЗаписиСверкаВГО);
	
	ЗначениеВРеквизитФормы(ПолучитьТаблицуЭлиминацииДляКлиента(ТабЗаписиЭлиминации),"ЗаписиЭлиминации");
	ЗначениеВРеквизитФормы(ПолучитьТаблицуСверкиДляКлиента(ТабЗаписиСверкаВГО),"ЗаписиСверкаВГО");
	
	Элементы.ЗаписиСверкаВГОКоманднаяПанель.ПодчиненныеЭлементы.АвтоматическоеУрегулирование.ПодчиненныеЭлементы.ЗаписиСверкаВГООтнестиНаНеурегулированные.Пометка=ОтноситьНаНеурегулированныеАвтоматически;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(РабочийОбъектАдрес);
		
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьСправочникОбъект()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект)
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ИдентификаторРодителя);
					
КонецПроцедуры // ПолучитьСправочникОбъект()

&НаСервере
Процедура ОбновитьОбъектВХранилище()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ИдентификаторРодителя);
	
КонецПроцедуры // ОбновитьОбъектВХранилище()


&НаСервере
Функция ПолучитьТаблицуСверкиДляКлиента(ТаблицаСверки)
	
	Для Каждого Строка ИЗ ТаблицаСверки Цикл
		Строка.ТабУрегулированиеАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокТаблицДляКлиента(Строка.ТабУрегулированиеАналитик);
		Строка.ТабСоответствияАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокТаблицДляКлиента(Строка.ТабСоответствияАналитик);
	КонецЦикла;
	
	Возврат ТаблицаСверки;
	
КонецФункции // ПолучитьТаблицуСверкиДляКлиента()

&НаСервере
Функция ПолучитьТаблицуСверкиДляСервера(ТаблицаСверки)
	
	Для Каждого Строка ИЗ ТаблицаСверки Цикл
		Строка.ТабУрегулированиеАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокМассивовДляСервера(Строка.ТабУрегулированиеАналитик);
		Строка.ТабСоответствияАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокМассивовДляСервера(Строка.ТабСоответствияАналитик);
	КонецЦикла;
	
	Возврат ТаблицаСверки; 
	
КонецФункции // ПолучитьТаблицуСверкиДляСервера()

&НаСервере
Функция ПолучитьТаблицуЭлиминацииДляКлиента(ТаблицаЭлиминации)
	
	Для Каждого Строка ИЗ ТаблицаЭлиминации Цикл
		Строка.ТабУрегулированиеАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокТаблицДляКлиента(Строка.ТабУрегулированиеАналитик);
		Строка.ТабСоответствияАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокТаблицДляКлиента(Строка.ТабСоответствияАналитик);
		Строка.ТабЭлиминации=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокТаблицДляКлиента(Строка.ТабЭлиминации);
	КонецЦикла;
	
	Возврат ТаблицаЭлиминации;
			
КонецФункции // ПолучитьТаблицуСверкиДляКлиента()

&НаСервере
Функция ПолучитьТаблицуЭлиминацииДляСервера(ТаблицаЭлиминации)
	
	Для Каждого Строка ИЗ ТаблицаЭлиминации Цикл
		Строка.ТабУрегулированиеАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокМассивовДляСервера(Строка.ТабУрегулированиеАналитик);
		Строка.ТабСоответствияАналитик=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокМассивовДляСервера(Строка.ТабСоответствияАналитик);
		Строка.ТабЭлиминации=ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокМассивовДляСервера(Строка.ТабЭлиминации);
	КонецЦикла;
	
	Возврат ТаблицаЭлиминации; 
		
КонецФункции // ПолучитьТаблицуСверкиДляСервера()


&НаСервере
Процедура ОбновитьДанныеАналитик(ИсходнаяТаблица,ПересчитыватьСтроку=Истина)
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПоказательБазис,
	|ПоказательСравнение
    |ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ИсходнаяТаблица);
	Запрос.Выполнить();

	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательБазис,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательБазис.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение.ГруппаРаскрытия КАК ГруппаРаскрытияСоответствие,
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаБазис,
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаСравнение,
	|	СоответствиеВнутригрупповыхПоказателей.СоответствиеАналитик
	|ИЗ
	|	РегистрСведений.СоответствиеВнутригрупповыхПоказателей КАК СоответствиеВнутригрупповыхПоказателей
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВТ
	|  ПО СоответствиеВнутригрупповыхПоказателей.ПоказательБазис=ВТ.ПоказательБазис
	| И  СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение=ВТ.ПоказательСравнение";
	
	ТабСоответствие=Запрос.Выполнить().Выгрузить();
	
	Индекс=1;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Для Каждого Строка ИЗ ИсходнаяТаблица Цикл
		
		Строка.НомерСтроки=Индекс;
		Индекс=Индекс+1;
		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("ПоказательБазис",Строка.ПоказательБазис);
		СтруктураПоиска.Вставить("ПоказательСравнение",Строка.ПоказательСравнение);
		
		СтрСоотвествие=ТабСоответствие.НайтиСтроки(СтруктураПоиска)[0];
			
		АналитикаВГОБазис=0;
		АналитикаВГОСравнение=0;
		
		АналитикОтчетаБазис=0;
		АналитикОтчетаСравнение=0;
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(СтрСоотвествие.ВидОтчетаБазис["ВидАналитики"+Инд]) Тогда
				
				АналитикОтчетаБазис=АналитикОтчетаБазис+1;
				Продолжить;
				
			ИначеЕсли ЗначениеЗаполнено(СтрСоотвествие.ГруппаРаскрытия["ВидАналитики"+Инд]) И СтрСоотвествие.ГруппаРаскрытия["ВидАналитики"+Инд].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации") Тогда
				
				АналитикаВГОБазис=Инд;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(СтрСоотвествие.ВидОтчетаСравнение["ВидАналитики"+Инд]) Тогда
				
				АналитикОтчетаСравнение=АналитикОтчетаСравнение+1;
				Продолжить;
				
			ИначеЕсли ЗначениеЗаполнено(СтрСоотвествие.ГруппаРаскрытияСоответствие["ВидАналитики"+Инд]) И СтрСоотвествие.ГруппаРаскрытияСоответствие["ВидАналитики"+Инд].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.Организации") Тогда
				
				АналитикаВГОСравнение=Инд;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
			Строка.ГруппаРаскрытияБазис=СтрСоотвествие.ГруппаРаскрытия;
			Строка.ГруппаРаскрытияСравнение=СтрСоотвествие.ГруппаРаскрытияСоответствие;
			
			Строка.АналитикОтчетаБазис=АналитикОтчетаБазис;
			Строка.АналитикОтчетаСравнение=АналитикОтчетаСравнение;
			
			Строка.ТабСоответствияАналитик.Добавить(СтрСоотвествие.СоответствиеАналитик.Получить());
			
			Строка.АналитикаВГОБазис=АналитикаВГОБазис;
			Строка.АналитикаВГОСравнение=АналитикаВГОСравнение;
			
			Если ПересчитыватьСтроку Тогда
				РабочийОбъект.РассчитатьСтрокуСверки(Строка,ОтноситьНаНеурегулированныеАвтоматически);
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ОбновитьНомераАналитик()

&НаСервере
// Формирует структуру реквизитов операции для передачи в модуль документа
//
Процедура СформироватьСтруктуруОперации(РабочийОбъект)
		
	СтруктураОперации=Новый Структура;
	СтруктураОперации.Вставить("ЗаписиСверкаВГО",					ПолучитьТаблицуСверкиДляСервера(РеквизитФормыВЗначение("ЗаписиСверкаВГО")));
	СтруктураОперации.Вставить("ЗаписиЭлиминации",					ПолучитьТаблицуЭлиминацииДляСервера(РеквизитФормыВЗначение("ЗаписиЭлиминации")));
	СтруктураОперации.Вставить("СписокОрганизаций",					СписокОрганизаций);
	СтруктураОперации.Вставить("ОтноситьНаНеурегулированныеАвтоматически",ОтноситьНаНеурегулированныеАвтоматически);
	
	Если ОтборОрганизацияБазис И ЗначениеЗаполнено(ОрганизацияБазис) Тогда
		СтруктураОперации.Вставить("ОрганизацияБазис",				ОрганизацияБазис);
	КонецЕсли;
	
	Если ОтборОрганизацияСравнение И ЗначениеЗаполнено(ОрганизацияСравнение) Тогда
		СтруктураОперации.Вставить("ОрганизацияСравнение",			ОрганизацияСравнение);
	КонецЕсли;

	СтруктураОперации.Вставить("ПроцентАвтоматическогоУрегулирования",ПроцентАвтоматическогоУрегулирования);
		
	РабочийОбъект.СтруктураСверки=СтруктураОперации;
	
КонецПроцедуры // СформироватьСтруктуруОперации()

&НаСервере
Функция СохранитьИзмененияЭлиминации()
	
	Если (НЕ ЗначениеЗаполнено(Организация)) И ЗаписиЭлиминации.Итог("ЭлиминационнаяПоправка")<>0 Тогда
		Сообщить("Не указана элиминирующая организация.",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	СформироватьСтруктуруОперации(РабочийОбъект);
	
	СтруктураОперации=Новый Структура;
	СтруктураОперации.Вставить("Наименование",Наименование);
	СтруктураОперации.Вставить("Сбалансированная",Параметры.Сбалансированная);
	СтруктураОперации.Вставить("Комментарий",Комментарий);
	СтруктураОперации.Вставить("Элиминация",Истина);
	СтруктураОперации.Вставить("НомерОперации",Параметры.НомерОперации);
	
	РасчетВыполнен=РабочийОбъект.СохранитьИзмененияЭлиминации(СтруктураОперации);
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	СтруктураОперации.Вставить("РасчетВыполнен",РасчетВыполнен);
	СтруктураОперации.Вставить("ИдентификаторРодителя",ИдентификаторРодителя);
	СтруктураОперации.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураОперации.Вставить("ТипОрганизацийДляСверки",ТипОрганизацийДляСверки);
	СтруктураОперации.Вставить("СценарийДляНеурегулированныхОтклонений",СценарийДляНеурегулированныхОтклонений);
	
	Возврат СтруктураОперации;
		
КонецФункции //

// Обновляет таблицы операции после их пересчета в модуле документа
//
&НаСервере
Процедура ОбновитьТаблицыОперации(РабочийОбъект)
	
	Если ТипЗнч(РабочийОбъект.СтруктураСверки)=Тип("Структура") Тогда
		
		ЗначениеВРеквизитФормы(ПолучитьТаблицуСверкиДляКлиента(РабочийОбъект.СтруктураСверки.ЗаписиСверкаВГО),"ЗаписиСверкаВГО");
		ЗначениеВРеквизитФормы(ПолучитьТаблицуЭлиминацииДляКлиента(РабочийОбъект.СтруктураСверки.ЗаписиЭлиминации),"ЗаписиЭлиминации");
			
	КонецЕсли;
			
КонецПроцедуры // ОбновитьРеквизитыОперации()

&НаСервере
Процедура ЗаполнитьТаблицыСверкиИЭлиминации()
	
	ЗаписиСверкаВГО.Очистить();
	ЗаписиЭлиминации.Очистить();
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	СформироватьСтруктуруОперации(РабочийОбъект);	
	РабочийОбъект.ТипОрганизацийДляСверки=ТипОрганизацийДляСверки;
	
	РабочийОбъект.ЗаполнитьТаблицуСверки();
	ОбновитьТаблицыОперации(РабочийОбъект);

	ПоместитьРабочийОбъект(РабочийОбъект);	
	
КонецПроцедуры // ЗаполнитьТаблицыСверкиИЭлиминации()

&НаСервере
Процедура ЗаполнитьДанныеЭлиминацииСервер()
	
	ЗаписиЭлиминации.Очистить();
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	СформироватьСтруктуруОперации(РабочийОбъект);
	РабочийОбъект.ЗаполнитьТаблицуЭлиминации();
	
	ОбновитьТаблицыОперации(РабочийОбъект);

	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // ЗаполнитьТаблицыСверкиИЭлиминации() 

&НаСервере
Процедура УрегулироватьРасхожденияАвтоматически()
	
	ТабЗаписиСверкаВГО=ПолучитьТаблицуСверкиДляСервера(РеквизитФормыВЗначение("ЗаписиСверкаВГО"));
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Для Каждого Строка ИЗ ТабЗаписиСверкаВГО Цикл
		
		Если ?(Строка.ОтклонениеОтн>0,Строка.ОтклонениеОтн,Строка.ОтклонениеОтн*(-1))<=ПроцентАвтоматическогоУрегулирования Тогда
			
			Если Строка.ТабСоответствияАналитик.Количество()>0 И ТипЗнч(Строка.ТабСоответствияАналитик[0].Значение)=Тип("ТаблицаЗначений") Тогда
				
				ТабУрегулирования=РабочийОбъект.ПолучитьТаблицуУрегулированияПоАналитике(Строка,Параметры.Валюта,Параметры.ПериодОтчета,Параметры.Сценарий);
				Строка.Урегулирование=ТабУрегулирования.Итог("Урегулирование");
				Строка.ТабУрегулированиеАналитик.Очистить();
				Строка.ТабУрегулированиеАналитик.Добавить(ТабУрегулирования);
				
				Строка.УрегулированоПоАналитике=Истина;
				
				РабочийОбъект.РассчитатьСтрокуСверки(Строка,ОтноситьНаНеурегулированныеАвтоматически);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ПолучитьТаблицуСверкиДляКлиента(ТабЗаписиСверкаВГО),"ЗаписиСверкаВГО");
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // УрегулироватьРасхожденияАвтоматически()

&НаСервере
Процедура ДосписатьАвтоматически()
	
	ТабЗаписиСверкаВГО=ПолучитьТаблицуСверкиДляСервера(РеквизитФормыВЗначение("ЗаписиСверкаВГО"));
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Для Каждого Строка ИЗ ТабЗаписиСверкаВГО Цикл
		
		РабочийОбъект.РассчитатьСтрокуСверки(Строка,Истина);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ПолучитьТаблицуСверкиДляКлиента(ТабЗаписиСверкаВГО),"ЗаписиСверкаВГО");
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // ДосписатьАвтоматически() 

&НаСервере
Процедура ОбновитьДанныеУрегулирования(ДанныеУрегулирования,ДанныеСтроки)
	
	РабочийОбъектАдрес=ДанныеУрегулирования.РабочийОбъектАдрес;
	
	ТабУрегулированиеАналитики=ПроцедурыПреобразованияДанныхУХ.ПолучитьТаблицуИзМассиваСтруктур(ДанныеУрегулирования.ТабУрегулированиеАналитики);

	ДанныеСтроки.Вставить("Урегулирование",ТабУрегулированиеАналитики.Итог("Урегулирование"));
	
	ТекСписокУрегулирования=Новый СписокЗначений;
	ТекСписокУрегулирования.Добавить(ТабУрегулированиеАналитики);	
	ДанныеСтроки.Вставить("ТабУрегулированиеАналитик",ТекСписокУрегулирования);
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.РассчитатьСтрокуСверки(ДанныеСтроки,ОтноситьНаНеурегулированныеАвтоматически);
	
	ДанныеСтроки.Вставить("УрегулированоПоАналитике",Истина);
	ДанныеСтроки.Вставить("ТабУрегулированиеАналитик",ПроцедурыПреобразованияДанныхУХ.ПреобразоватьСписокТаблицДляКлиента(ДанныеСтроки.ТабУрегулированиеАналитик));

	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ОбновитьДанныеУрегулирования() 

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛНЯЕМЫЕ НА КЛИЕНТЕ

&НаКлиенте
Процедура ЗаписиСверкаВГОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаново(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТипОрганизацийДляСверки) Тогда
		
		ПоказатьПредупреждение(, "Не указан тип организаций для сверки.");
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицыСверкиИЭлиминации();
		
КонецПроцедуры

&НаКлиенте
Процедура УрегулироватьАвтоматически(Команда)
	
	УрегулироватьРасхожденияАвтоматически();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтнестиНаНеурегулированные(Команда)
	
	ТекПометка=Элементы.ЗаписиСверкаВГОКоманднаяПанель.ПодчиненныеЭлементы.АвтоматическоеУрегулирование.ПодчиненныеЭлементы.ЗаписиСверкаВГООтнестиНаНеурегулированные.Пометка;
	
	Если НЕ ТекПометка Тогда
		
		ДосписатьАвтоматически();
		
	КонецЕсли;
	
	Элементы.ЗаписиСверкаВГОКоманднаяПанель.ПодчиненныеЭлементы.АвтоматическоеУрегулирование.ПодчиненныеЭлементы.ЗаписиСверкаВГООтнестиНаНеурегулированные.Пометка=НЕ ТекПометка;
	
	ОтноситьНаНеурегулированныеАвтоматически=ТекПометка;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярОтчетаБазис(Команда)
	
	Если Элементы.ЗаписиСверкаВГО.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", Новый Структура("Ключ,ТолькоПросмотр", Элементы.ЗаписиСверкаВГО.ТекущиеДанные.ЭкземплярОтчетаБазис,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярОтчетаСравнение(Команда)
	
	Если Элементы.ЗаписиСверкаВГО.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", Новый Структура("Ключ,ТолькоПросмотр", Элементы.ЗаписиСверкаВГО.ТекущиеДанные.ЭкземплярОтчетаСравнение,Истина));
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСтрокиСверки()
	
	ТекущиеДанные=Элементы.ЗаписиСверкаВГО.ТекущиеДанные;
	
	СтруктураСтрока=Новый Структура;
	СтруктураСтрока.Вставить("ОрганизацияБазис",ТекущиеДанные.ОрганизацияБазис);
	СтруктураСтрока.Вставить("ОрганизацияСравнение",ТекущиеДанные.ОрганизацияСравнение);
    СтруктураСтрока.Вставить("ЭкземплярОтчетаБазис",ТекущиеДанные.ЭкземплярОтчетаБазис);
	СтруктураСтрока.Вставить("ЭкземплярОтчетаСравнение",ТекущиеДанные.ЭкземплярОтчетаСравнение);
	СтруктураСтрока.Вставить("ПоказательСравнение",ТекущиеДанные.ПоказательСравнение);
	СтруктураСтрока.Вставить("ЗначениеБазис",ТекущиеДанные.ЗначениеБазис);
	СтруктураСтрока.Вставить("ЗначениеСравнение",ТекущиеДанные.ЗначениеСравнение);
	СтруктураСтрока.Вставить("ОтклонениеАбс",ТекущиеДанные.ОтклонениеАбс);
	СтруктураСтрока.Вставить("ОтклонениеОтн",ТекущиеДанные.ОтклонениеОтн);
	СтруктураСтрока.Вставить("Урегулирование",ТекущиеДанные.Урегулирование);
	СтруктураСтрока.Вставить("ОтнесеноНаСценарийДляНеурегулированных",ТекущиеДанные.ОтнесеноНаСценарийДляНеурегулированных);
	СтруктураСтрока.Вставить("ОтклонениеПослеУрегулированияАбс",ТекущиеДанные.ОтклонениеПослеУрегулированияАбс);
	СтруктураСтрока.Вставить("ОтклонениеПослеУрегулированияОтн",ТекущиеДанные.ОтклонениеПослеУрегулированияОтн);
	СтруктураСтрока.Вставить("ГруппаРаскрытияБазис",ТекущиеДанные.ГруппаРаскрытияБазис);
	СтруктураСтрока.Вставить("ГруппаРаскрытияСравнение",ТекущиеДанные.ГруппаРаскрытияСравнение);
	СтруктураСтрока.Вставить("ТабУрегулированиеАналитик",ТекущиеДанные.ТабУрегулированиеАналитик);
	СтруктураСтрока.Вставить("УрегулированоПоАналитике",ТекущиеДанные.УрегулированоПоАналитике);
	СтруктураСтрока.Вставить("АналитикаВГОБазис",ТекущиеДанные.АналитикаВГОБазис);
	СтруктураСтрока.Вставить("АналитикаВГОСравнение",ТекущиеДанные.АналитикаВГОСравнение);
	СтруктураСтрока.Вставить("ЭкземплярОтчетаЭлиминацияНеурегулированных",ТекущиеДанные.ЭкземплярОтчетаЭлиминацияНеурегулированных);
	СтруктураСтрока.Вставить("ТабСоответствияАналитик",ТекущиеДанные.ТабСоответствияАналитик);
	
	Возврат СтруктураСтрока;
		
КонецФункции // ДанныеСтрокиСверки()

&НаКлиенте
Функция ДанныеСтрокиЭлиминации()
	
	ТекущиеДанные=Элементы.ЗаписиЭлиминации.ТекущиеДанные;
	
	СтруктураСтрока=Новый Структура;
	СтруктураСтрока.Вставить("ОрганизацияБазис",ТекущиеДанные.ОрганизацияБазис);
	СтруктураСтрока.Вставить("ОрганизацияСравнение",ТекущиеДанные.ОрганизацияСравнение);
    СтруктураСтрока.Вставить("ЭкземплярОтчетаБазис",ТекущиеДанные.ЭкземплярОтчетаБазис);
	СтруктураСтрока.Вставить("ЭкземплярОтчетаСравнение",ТекущиеДанные.ЭкземплярОтчетаСравнение);
	СтруктураСтрока.Вставить("ПоказательСравнение",ТекущиеДанные.ПоказательСравнение);
	СтруктураСтрока.Вставить("ЗначениеБазис",ТекущиеДанные.ЗначениеБазис);
	СтруктураСтрока.Вставить("ЗначениеСравнение",ТекущиеДанные.ЗначениеСравнение);
	СтруктураСтрока.Вставить("ОтклонениеАбс",ТекущиеДанные.ОтклонениеАбс);
	СтруктураСтрока.Вставить("ОтклонениеОтн",ТекущиеДанные.ОтклонениеОтн);
	СтруктураСтрока.Вставить("Урегулирование",ТекущиеДанные.Урегулирование);
	СтруктураСтрока.Вставить("ОтнесеноНаСценарийДляНеурегулированных",ТекущиеДанные.ОтнесеноНаСценарийДляНеурегулированных);
	СтруктураСтрока.Вставить("ОтклонениеПослеУрегулированияАбс",ТекущиеДанные.ОтклонениеПослеУрегулированияАбс);
	СтруктураСтрока.Вставить("ОтклонениеПослеУрегулированияОтн",ТекущиеДанные.ОтклонениеПослеУрегулированияОтн);
	СтруктураСтрока.Вставить("ГруппаРаскрытияБазис",ТекущиеДанные.ГруппаРаскрытияБазис);
	СтруктураСтрока.Вставить("ГруппаРаскрытияСравнение",ТекущиеДанные.ГруппаРаскрытияСравнение);
	СтруктураСтрока.Вставить("ТабУрегулированиеАналитик",ТекущиеДанные.ТабУрегулированиеАналитик);
	СтруктураСтрока.Вставить("УрегулированоПоАналитике",ТекущиеДанные.УрегулированоПоАналитике);
	СтруктураСтрока.Вставить("АналитикаВГОБазис",ТекущиеДанные.АналитикаВГОБазис);
	СтруктураСтрока.Вставить("АналитикаВГОСравнение",ТекущиеДанные.АналитикаВГОСравнение);
	СтруктураСтрока.Вставить("ЭкземплярОтчетаЭлиминацияБазис",ТекущиеДанные.ЭкземплярОтчетаЭлиминацияБазис);
	СтруктураСтрока.Вставить("ЭкземплярОтчетаЭлиминацияСравнение",ТекущиеДанные.ЭкземплярОтчетаЭлиминацияСравнение);
	СтруктураСтрока.Вставить("ТабСоответствияАналитик",ТекущиеДанные.ТабСоответствияАналитик);
	СтруктураСтрока.Вставить("ЭлиминационнаяПоправка",ТекущиеДанные.ЭлиминационнаяПоправка);
	СтруктураСтрока.Вставить("СуществуютЭлиминации",ТекущиеДанные.СуществуютЭлиминации);
	СтруктураСтрока.Вставить("ТабЭлиминации",ТекущиеДанные.ТабЭлиминации);
	
	Возврат СтруктураСтрока;
		
КонецФункции // ДанныеСтрокиСверки()

&НаКлиенте
Процедура Урегулировать(Команда)
	
	Если Элементы.ЗаписиСверкаВГО.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиСтруктура=ДанныеСтрокиСверки();
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВалютаОтчета",Параметры.Валюта);
	СтруктураПараметров.Вставить("ПериодОтчета",Параметры.ПериодОтчета);
	СтруктураПараметров.Вставить("Сценарий",Параметры.Сценарий);
	СтруктураПараметров.Вставить("Урегулирование",Истина);
	СтруктураПараметров.Вставить("Элиминация",Ложь);
	СтруктураПараметров.Вставить("СтрокаЭлиминации",ДанныеСтрокиСтруктура);
	СтруктураПараметров.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураПараметров.Вставить("ИдентификаторРодителя",ИдентификаторРодителя);
		
	Если Элементы.ЗаписиСверкаВГО.ТекущиеДанные.ТабУрегулированиеАналитик.Количество()>0 Тогда
		
		СтруктураПараметров.Вставить("ТабличноеПолеСравнение",Элементы.ЗаписиСверкаВГО.ТекущиеДанные.ТабУрегулированиеАналитик[0].Значение);
		
	КонецЕсли;
	
	РезультатУрегулирования = Неопределено;

	
	ОткрытьФорму("Документ.РучныеКорректировки.Форма.ФормаУрегулированиеУправляемая",СтруктураПараметров,,,,, Новый ОписаниеОповещения("УрегулироватьЗавершение", ЭтотОбъект, Новый Структура("ДанныеСтрокиСтруктура", ДанныеСтрокиСтруктура)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УрегулироватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ДанныеСтрокиСтруктура = ДополнительныеПараметры.ДанныеСтрокиСтруктура;
    
    
    РезультатУрегулирования=Результат;
    
    Если ТипЗнч(РезультатУрегулирования)=Тип("Структура") Тогда
        
        ОбновитьДанныеУрегулирования(РезультатУрегулирования,ДанныеСтрокиСтруктура);
        ЗаполнитьЗначенияСвойств(Элементы.ЗаписиСверкаВГО.ТекущиеДанные,ДанныеСтрокиСтруктура);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписиЭлиминацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеЭлиминации(Команда)
	
	ЗаполнитьДанныеЭлиминацииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярОтчетаБазисЭлиминация(Команда)
	
	Если Элементы.ЗаписиЭлиминации.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", Новый Структура("Ключ,ТолькоПросмотр", Элементы.ЗаписиЭлиминации.ТекущиеДанные.ЭкземплярОтчетаБазис,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярОтчетаСравнениеЭлиминация(Команда)
	
	Если Элементы.ЗаписиЭлиминации.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", Новый Структура("Ключ,ТолькоПросмотр", Элементы.ЗаписиЭлиминации.ТекущиеДанные.ЭкземплярОтчетаСравнение,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЭлиминационнуюПоправку()
	
	Если Элементы.ЗаписиЭлиминации.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиСтруктура=ДанныеСтрокиЭлиминации();
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВалютаОтчета",Параметры.Валюта);
	СтруктураПараметров.Вставить("ПериодОтчета",Параметры.ПериодОтчета);
	СтруктураПараметров.Вставить("Сценарий",Параметры.Сценарий);
	СтруктураПараметров.Вставить("Урегулирование",Ложь);
	СтруктураПараметров.Вставить("Элиминация",Истина);
	СтруктураПараметров.Вставить("СтрокаЭлиминации",ДанныеСтрокиСтруктура);
	СтруктураПараметров.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
		
	РезультатЭлиминации = Неопределено;

		
	ОткрытьФорму("Документ.РучныеКорректировки.Форма.ФормаУрегулированиеУправляемая",СтруктураПараметров,,,,, Новый ОписаниеОповещения("ВвестиЭлиминационнуюПоправкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЭлиминационнуюПоправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатЭлиминации=Результат;
    
    Если ТипЗнч(РезультатЭлиминации)=Тип("Структура") Тогда
        
        Элементы.ЗаписиЭлиминации.ТекущиеДанные.ТабЭлиминации=РезультатЭлиминации.ТабЭлиминации;
        Элементы.ЗаписиЭлиминации.ТекущиеДанные.ЭлиминационнаяПоправка=РезультатЭлиминации.ЭлиминационнаяПоправка;
        
        РабочийОбъектАдрес=РезультатЭлиминации.РабочийОбъектАдрес;
        
    КонецЕсли;

КонецПроцедуры // ВвестиЭлиминационнуюПоправку() 

&НаКлиенте
Процедура Элиминировать(Команда)
	
	ВвестиЭлиминационнуюПоправку();
	 	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения=Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,"Сохранить изменения?",РежимДиалогаВопрос.ДаНетОтмена,60);
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
		
			
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		
		СохраненныеДанные=СохранитьИзмененияЭлиминации();
		
		Если СохраненныеДанные.РасчетВыполнен Тогда
			
			Модифицированность=Ложь;
			
			Оповестить("ИзмененыДанныеРучнойКорректировки",СохраненныеДанные);
			Закрыть();
			
		КонецЕсли;
	
	ИначеЕсли РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		
		Модифицированность=Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ВопросСохранитьИзмененияЗавершение() 

&НаКлиенте
Процедура СохранитьДанныеОперации(Команда)
	
	СохраненныеДанные=СохранитьИзмененияЭлиминации();
	
	Если НЕ СохраненныеДанные.РасчетВыполнен Тогда
		Возврат;
	КонецЕсли;
		
	Оповестить("ИзмененыДанныеРучнойКорректировки",СохраненныеДанные);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБазисНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТипОрганизацийДляСверки) Тогда
		
		ПоказатьПредупреждение(, "Не указан тип организаций для сверки.");
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", 			СписокОрганизаций);
	СтруктураОтбора.Вставить("ТипОрганизации",	ТипОрганизацийДляСверки);
	
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСравнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТипОрганизацийДляСверки) Тогда
		
		ПоказатьПредупреждение(, "Не указан тип организаций для сверки.");
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка",			СписокОрганизаций);
	СтруктураОтбора.Вставить("ТипОрганизации",	ТипОрганизацийДляСверки);
	
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

