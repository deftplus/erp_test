
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьРеквизитыФормыИзЗакупки();

	НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОформлениеФормы();
КонецПроцедуры


#КонецОбласти



#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(
		Объект,
		НСтр("ru='Введите УИД протокола рассмотрения заявок'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДелегатОбновитьСтроку = Новый ОписаниеОповещения("УстановитьКомментарий", ЭтаФорма);
	ПоказатьВводСтроки(ДелегатОбновитьСтроку, Объект.Комментарий, "Комментарий",, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочнаяПроцедураПриИзменении(Элемент)
	ЗакупочнаяПроцедураПриИзмененииНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВскрытияКонвертовПриИзменении(Элемент)
	ПротоколВскрытияКонвертовПриИзмененииНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПоставщиковПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоставщикиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПредложенияПоставщиковПредложениеПоставщика"
			ИЛИ Поле.Имя = "ПредложенияПоставщиковПредложениеПоставщикаКонтрагент" Тогда
		ТекДанные = Элементы.ПредложенияПоставщиков.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьПредложениеПоставщика(ТекДанные.ПредложениеПоставщика);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПоставщиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаполнениеПредложений_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЗаполнитьТаблицуПредложенийПоставщиков();
    Иначе
		// Пользователь отказался.
	КонецЕсли;	
КонецПроцедуры		// ПодтверждениеЗаполнениеПредложений_Завершение()

&НаКлиенте
Процедура ЗаполнитьПредложенияПоставщиков(Команда)
	Если Объект.ПредложенияПоставщиков.Количество() = 0 Тогда
		ЗаполнитьТаблицуПредложенийПоставщиков();
	Иначе
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'В таблице найдены предложения поставщиков. Заполненные данные будут очищены. Прододлжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗаполнениеПредложений_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте

&НаКлиенте
Процедура ОткрытьПредложениеПоставщика(ПредложениеПоставщика) Экспорт
	Если ЗначениеЗаполнено(ПредложениеПоставщика) Тогда
		ДопПараметры = Новый Структура("Ключ", ПредложениеПоставщика);
		ОткрытьФорму("Документ.ПредложениеПоставщика.ФормаОбъекта", ДопПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарий(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ОБъект.Комментарий = СокрЛП(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПричинуОтказа(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ПричинаПризнанияТорговНесостоявшимися = СокрЛП(Результат);
	Иначе
		Объект.ТоргиСостоялись = Истина;
	КонецЕсли;
	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеФормы()
	Элементы.РезультатРаботыКомиссии.Видимость = НЕ Объект.Отменен;
	Элементы.ПричинаОтмены.Видимость = Объект.Отменен;
	Элементы.ГруппаЕИС.Видимость = ЭтоФЗ223;
	Элементы.ПротоколВскрытияКонвертов.Видимость = ЭтоКонкурс;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Функция ТекущееПредложениеПоставщика()
	ПредложениеПоставщика = Документы.ПредложениеПоставщика.ПустаяСсылка();
	ТекСтрока = Элементы.ПредложенияПоставщиков.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		СтрокаТЧ = Объект.ПредложенияПоставщиков.НайтиПоИдентификатору(ТекСтрока);
		Если СтрокаТЧ <> Неопределено Тогда
			ПредложениеПоставщика = СтрокаТЧ.ПредложениеПоставщика;
		КонецЕсли;
	КонецЕсли;
	Возврат ПредложениеПоставщика;
КонецФункции

&НаСервере
Процедура УстановитьТекущееПредложениеПоставщика(ПредложениеПоставщика)
	мСтрокиПредложения = Объект.ПредложенияПоставщиков.НайтиСтроки(
		Новый Структура("ПредложениеПоставщика", ПредложениеПоставщика));
	ТекСтрока = Неопределено;
	Если мСтрокиПредложения.Количество() > 0 Тогда
		ТекСтрока = мСтрокиПредложения[0].ПолучитьИдентификатор()
	ИначеЕсли Объект.ПредложенияПоставщиков.Количество() > 0 Тогда
		ТекСтрока = Объект.ПредложенияПоставщиков[0].ПолучитьИдентификатор();
	КонецЕсли;
	Элементы.ПредложенияПоставщиков.ТекущаяСтрока = ТекСтрока;
КонецПроцедуры

// Заполням ТЧ ПредложенияПоставщиков.
//
&НаСервере
Процедура ЗаполнитьТаблицуПредложенийПоставщиков()
	Объект.ПредложенияПоставщиков.Очистить();
	Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		ТекущееПредложение = ТекущееПредложениеПоставщика();
		мПредложений = Документы.ПредложениеПоставщика.ПолучитьПроведенныеПоЗакупке(Объект.ЗакупочнаяПроцедура);
		Для Каждого ПредложениеПоставщика Из мПредложений Цикл
			Документы.ПротоколРассмотренияЗаявок.ДобавитьСтрокуПредложенияПоставщика(
			Объект.ПредложенияПоставщиков,
			ПредложениеПоставщика);
		КонецЦикла;
		УстановитьТекущееПредложениеПоставщика(ТекущееПредложение);
	Иначе
		// Не перезаполняем.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПротоколВскрытияКонвертовПриИзмененииНаСервере()
	СтараяПроцедура = Объект.ЗакупочнаяПроцедура;
	Если ЗначениеЗаполнено(Объект.ПротоколВскрытияКонвертов) Тогда
		Объект.ЗакупочнаяПроцедура = Объект.ПротоколВскрытияКонвертов.ЗакупочнаяПроцедура;
	иначе
		Объект.ЗакупочнаяПроцедура = Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
	КонецЕсли;
	Если СтараяПроцедура <> Объект.ЗакупочнаяПроцедура Тогда
		УстановитьРеквизитыФормыИзЗакупки();
		ЗаполнитьТаблицуПредложенийПоставщиков();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыФормыИзЗакупки()
	Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		ТекЗакупочнаяПроцедура = Объект.ЗакупочнаяПроцедура;
		СпособВыбораПоставщика =
			ТекЗакупочнаяПроцедура.СпособВыбораПоставщика;
		ЭтоКонкурс = (СпособВыбораПоставщика 
			= Перечисления.СпособыВыбораПоставщика.Конкурс);
		ЭтоФЗ223 = Справочники.ЗакупочныеПроцедуры.ЭтоФЗ223(
			Объект.ЗакупочнаяПроцедура);
	Иначе
		СпособВыбораПоставщика =
			Перечисления.СпособыВыбораПоставщика.ПустаяСсылка();
		ЭтоФЗ223 = Ложь;
		ЭтоКонкурс = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗакупочнаяПроцедураПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЗакупочнаяПроцедура", Объект.ЗакупочнаяПроцедура);
		Отбор.Вставить("ПометкаУдаления", Ложь);
		НайденныеДокументы = ЦентрализованныеЗакупкиУХ.ПолучитьДокументыПоОтбору("ПротоколВскрытияКонвертов", Отбор);
		Если НайденныеДокументы.Количество() > 0 Тогда
			НовыйПротокол = НайденныеДокументы[0];
		Иначе
			НовыйПротокол = Документы.ПротоколВскрытияКонвертов.ПустаяСсылка();
		КонецЕсли;
		Объект.ПротоколВскрытияКонвертов = НовыйПротокол;
	Иначе
		Объект.ПротоколВскрытияКонвертов = Документы.ПротоколВскрытияКонвертов.ПустаяСсылка();
	КонецЕсли;
	УстановитьРеквизитыФормыИзЗакупки();
	ЗаполнитьТаблицуПредложенийПоставщиков();
КонецПроцедуры

#КонецОбласти


#Область УниверсальныеПроцессыСогласование

&НаСервере
Процедура ОпределитьСостояниеОбъекта()
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
КонецПроцедуры

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаПриИзменении_Подключаемый()
	НовоеЗначениеСтатуса = РеквизитСтатусОбъекта(ЭтаФорма);
	ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатуса);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

#КонецОбласти
