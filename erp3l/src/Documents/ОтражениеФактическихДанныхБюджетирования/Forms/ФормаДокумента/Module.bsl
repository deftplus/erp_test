#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийДокументПланирования;
&НаКлиенте
Перем ТекущаяПлатежнаяПозиция;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета;
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение.БюджетДвиженияДенежныхСредств);
	ПериодичностьБДДС	= ПараметрыОП.ПериодичностьОперативногоПланирования;
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение.БюджетДоходовИРасходов);
	ПериодичностьБДР	= ПараметрыОП.ПериодичностьОперативногоПланирования;
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение.БюджетДвиженияРесурсов);
	ПериодичностьРесурсы	= ПараметрыОП.ПериодичностьОперативногоПланирования;
	
	ОбновитьИмяОбъектаМетаданных();
	
	Если ЗначениеЗаполнено(Объект.ИспользуемаяИБ) Тогда
		ТипБД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИспользуемаяИБ, "ТипБД");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипБД) Тогда
		ТипБД = Справочники.ТипыБазДанных.ТекущаяИБ;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УстановитьПризнакВеденияРасчетовПоЗаказам();
	КонецЕсли;
	УстановитьЗначенияОтбораСтатей(ЭтотОбъект);
	Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
	
	УправлениеФормой(ЭтотОбъект);

	УстановитьСписокВыбораСценариев();
	
	ИнициализироватьТаблицыБюджеты();
	
	//
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.НеОбработана);
	Состояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей);
	Состояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.НаИсполнении);
	
	ФормыУХКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТабБюджетДвиженияДенежныхСредствДокументПланирования,
		"Отбор.СостояниеИсполнения", Новый ФиксированныйМассив(Состояния));
	
	// Сохраняем типы документов для которых возможно указание платежной позиции
	ДокументыСПлатежнойПозицией = Новый ФиксированныйМассив(Метаданные.ОпределяемыеТипы.ДокументыПлатежнойПозиции.Тип.Типы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОпределитьКонтролируемыеПериоды();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИнициализироватьТаблицыБюджеты();
	УстановитьЗначенияОтбораСтатей(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
    	ОбновитьЭлементыДополнительныхРеквизитов();
    	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	ИнформационнаяБазаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументБДПриИзменении(Элемент)
	
	ДокументБДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ОпределитьПараметрыЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОпределитьПараметрыЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОпределитьКонтролируемыеПериоды();
		
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПриИзмененииСуммыДокумента(Истина,Истина,Истина);
	ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДокументБД) Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФорму("Документ."+ИмяОбъектаМетаданных+".ФормаВыбора",,Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораКонтрагентаНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйДокументПриИзменении(Элемент)
	
	ИсходныйДокументПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВоВзаиморасчетахПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходРасходПриИзменении(Элемент)
	
	ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПриИзменении(Элемент)
	
	ПравилоЗаполненияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Взаиморасчеты

&НаКлиенте
Процедура ВзаиморасчетыПриИзменении(Элемент)
	ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТабДвиженияДенежныхСредств

&НаКлиенте
Процедура ТабДвиженияДенежныхСредствСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ОбработатьИзменениеСтатьи(ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствПередНачаломИзменения(Элемент, Отказ)
	
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
	
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элемент.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ТабБюджетДвиженияДенежныхСредствСтатьяДвиженияДенежныхСредств));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДвиженияДенежныхСредствСуммаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.БюджетДвиженияДенежныхСредств.Итог("Сумма");
	ФактБюджетаСуммаПриИзменении(ЭтотОбъект, "БюджетДвиженияДенежныхСредств", Элементы.ТабБюджетДвиженияДенежныхСредств.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствПриИзменении(Элемент)
	//ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствЦФОПриИзменении(Элемент)
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элементы.ТабБюджетДвиженияДенежныхСредств.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ТабБюджетДвиженияДенежныхСредствСтатьяДвиженияДенежныхСредств));
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствСуммаВзаиморасчетовПриИзменении(Элемент)
	ФактБюджетаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, "БюджетДвиженияДенежныхСредств", Элементы.ТабБюджетДвиженияДенежныхСредств.Имя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.ТабБюджетДвиженияДенежныхСредств.ТекущиеДанные;
	ФактБюджетовДоговорКонтрагентаПриИзмененииНаСервере("БюджетДвиженияДенежныхСредств", СтрокаПлатеж.ПолучитьИдентификатор());
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ФактПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаФакт = Элемент.ТекущиеДанные;
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(СтрокаФакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФактБюджетаКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, "БюджетДвиженияДенежныхСредств", Элементы.ТабБюджетДвиженияДенежныхСредств.Имя, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствКурсВзаиморасчетовПриИзменении(Элемент)
	ФактБюджетаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, "БюджетДвиженияДенежныхСредств", Элементы.ТабБюджетДвиженияДенежныхСредств.Имя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекущийДокументПланирования = Элемент.ТекущиеДанные.ДокументПланирования;
		ТекущаяПлатежнаяПозиция = Элемент.ТекущиеДанные.ИдентификаторПозиции;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТабБюджетДвиженияДенежныхСредств.ТекущиеДанные;
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокументаПланирования = ТипЗнч(ТекущиеДанные.ДокументПланирования);
	ЕстьПлатежнаяПозиция = ДокументыСПлатежнойПозицией.Найти(ТипДокументаПланирования) <> неопределено;
	Если ЕстьПлатежнаяПозиция И ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		Отбор = Новый Структура("ЗаявкаНаОперацию", ТекущиеДанные.ДокументПланирования);
		ДопПараметры = Новый Структура("Отбор", Отбор);
		ИмяФормыПодбораЗаявок = "Обработка.РаботаСЗаявкамиНаОперации.Форма.ФормаПодбораЗаявок";
		ОткрытьФорму(ИмяФормыПодбораЗаявок, ДопПараметры, Элемент, , , , 
			Новый ОписаниеОповещения("ДокументПланированияПриИзмененииЗавершение", ЭтотОбъект));
	Иначе
		// Произошла очистка или выбран тип документа планирования без платежной позиции
		ТекущиеДанные.ИдентификаторПозиции = неопределено;
		ТекущийДокументПланирования = ТекущиеДанные.ДокументПланирования;
		ТекущаяПлатежнаяПозиция = ТекущиеДанные.ИдентификаторПозиции;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПланированияПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = неопределено Тогда
		РезультатОбработки = Новый Структура;
		РезультатОбработки.Вставить("ДокументПланирования", ТекущийДокументПланирования);
		РезультатОбработки.Вставить("ИдентификаторПозиции", ТекущаяПлатежнаяПозиция);
	Иначе
		РезультатОбработки = Результат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ТабБюджетДвиженияДенежныхСредствДокументПланированияОбработкаВыбора(
		Элементы.ТабБюджетДвиженияДенежныхСредствДокументПланирования, РезультатОбработки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТабДоходыИРасходы

&НаКлиенте
Процедура ТабДоходыИРасходыСтатьяДоходовИРасходовПриИзменении(Элемент)
	
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ОбработатьИзменениеСтатьи(ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовПередНачаломИзменения(Элемент, Отказ)
	
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
	
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элемент.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ТабБюджетДоходовИРасходовСтатьяДоходовИРасходов));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДоходыИРасходыСуммаПриИзменении(Элемент)
	
	ТД = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	Если ТД <> неопределено Тогда
		ПриИзмененииСуммыБДР(ТД);
	КонецЕсли;
	
	ФактБюджетаСуммаПриИзменении(ЭтотОбъект, "БюджетДоходовИРасходов", Элементы.ТабБюджетДоходовИРасходов.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовСуммаНДСПриИзменении(Элемент)
	
	ТД = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	Если ТД <> неопределено Тогда
		ПриИзмененииСуммыНДСБДР(ТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовСуммаБезНДСПриИзменении(Элемент)
	
	ТД = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	Если ТД <> неопределено Тогда
		ПриИзмененииСуммыБезНДСБДР(ТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовПриИзменении(Элемент)
	ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовЦФОПриИзменении(Элемент)
	
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ТабБюджетДоходовИРасходовСтатьяДоходовИРасходов));

КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТД = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	Если ТД <> неопределено Тогда
		ПриИзмененииСуммыВзаиморасчетовБДР(ТД);
	КонецЕсли;
	
	ФактБюджетаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, "БюджетДоходовИРасходов", Элементы.ТабБюджетДоходовИРасходов.Имя, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовСуммаВзаиморасчетовНДСПриИзменении(Элемент)
	
	ТД = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	Если ТД <> неопределено Тогда
		ПриИзмененииСуммыВзаиморасчетовНДСБДР(ТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовСуммаВзаиморасчетовБезНДСПриИзменении(Элемент)
	
	ТД = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	Если ТД <> неопределено Тогда
		ПриИзмененииСуммыВзаиморасчетовБезНДСБДР(ТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.ТабБюджетДоходовИРасходов.ТекущиеДанные;
	ФактБюджетовДоговорКонтрагентаПриИзмененииНаСервере("БюджетДоходовИРасходов", СтрокаПлатеж.ПолучитьИдентификатор());
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФактБюджетаКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, "БюджетДоходовИРасходов", Элементы.ТабБюджетДоходовИРасходов.Имя, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДоходовИРасходовКурсВзаиморасчетовПриИзменении(Элемент)
	ФактБюджетаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, "БюджетДоходовИРасходов", Элементы.ТабБюджетДоходовИРасходов.Имя, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТабТабДвиженияРесурсов

&НаКлиенте
Процедура ТабДвиженияРесурсовСтатьяДвиженияРесурсовПриИзменении(Элемент)
	
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ОбработатьИзменениеСтатьи(ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовПередНачаломИзменения(Элемент, Отказ)
	
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
	
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элемент.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ТабБюджетДвиженияРесурсовСтатьяДвиженияРесурсов));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовПриИзменении(Элемент)
	ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабДвиженияРесурсовСуммаПриИзменении(Элемент)
	
	Объект.СуммаДокумента= Объект.БюджетДвиженияРесурсов.Итог("Сумма");
	ФактБюджетаСуммаПриИзменении(ЭтотОбъект, "БюджетДвиженияРесурсов", Элементы.ТабБюджетДвиженияРесурсов.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовЦФОПриИзменении(Элемент)
	
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элементы.ТабБюджетДвиженияРесурсов.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ТабБюджетДвиженияРесурсовСтатьяДвиженияРесурсов));

КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияДенежныхСредствДокументПланированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ТабБюджетДвиженияДенежныхСредств.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		// Исключительная ситуация.
		Возврат;
	КонецЕсли;
	
	ТекДанные.ДокументПланирования = ВыбранноеЗначение.ДокументПланирования;
	ТекДанные.ИдентификаторПозиции = ВыбранноеЗначение.ИдентификаторПозиции;
	
	ТекущийДокументПланирования = ТекДанные.ДокументПланирования;
	ТекущаяПлатежнаяПозиция = ТекДанные.ИдентификаторПозиции;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовСуммаВзаиморасчетовПриИзменении(Элемент)
	ФактБюджетаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, "БюджетДвиженияРесурсов", Элементы.ТабБюджетДвиженияРесурсов.Имя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.ТабБюджетДвиженияРесурсов.ТекущиеДанные;
	ФактБюджетовДоговорКонтрагентаПриИзмененииНаСервере("БюджетДвиженияРесурсов", СтрокаПлатеж.ПолучитьИдентификатор());
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФактБюджетаКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, "БюджетДвиженияРесурсов", Элементы.ТабБюджетДвиженияРесурсов.Имя, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТабБюджетДвиженияРесурсовКурсВзаиморасчетовПриИзменении(Элемент)
	ФактБюджетаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, "БюджетДвиженияРесурсов", Элементы.ТабБюджетДвиженияРесурсов.Имя, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будет выполнено заполнение по данным исходного документа. Изменения будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИзменение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтвердитьИзменениеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные документа скорректированы и соответствуют данным исходного документа?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриИзмененииСуммыБДР(ТД)
	
	ТД.СуммаБезНДС = ТД.Сумма - ТД.СуммаНДС;
	РассчитатьИтог();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыНДСБДР(ТД)
	
	ТД.СуммаБезНДС = ТД.Сумма - ТД.СуммаНДС;
	РассчитатьИтог();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыБезНДСБДР(ТД)
	
	ТД.СуммаНДС = ТД.Сумма - ТД.СуммаБезНДС;
	РассчитатьИтог();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтог()
	Объект.СуммаДокумента=Объект.БюджетДоходовИРасходов.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыВзаиморасчетовБДР(ТД)
	
	ТД.СуммаВзаиморасчетовБезНДС = ТД.СуммаВзаиморасчетов - ТД.СуммаВзаиморасчетовНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыВзаиморасчетовНДСБДР(ТД)
	
	ТД.СуммаВзаиморасчетовБезНДС = ТД.СуммаВзаиморасчетов - ТД.СуммаВзаиморасчетовНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыВзаиморасчетовБезНДСБДР(ТД)
	
	ТД.СуммаВзаиморасчетовНДС = ТД.СуммаВзаиморасчетов - ТД.СуммаВзаиморасчетовБезНДС;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицыБюджеты()
	
	ИнициализироватьДвиженияОперации(Объект.БюджетДвиженияДенежныхСредств, Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств, Ложь);
	ИнициализироватьДвиженияОперации(Объект.БюджетДоходовИРасходов, Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов, Ложь);
	ИнициализироватьДвиженияОперации(Объект.БюджетДвиженияРесурсов, Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов, Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораСценариев()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сценарии.Ссылка
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	НЕ Сценарии.Ссылка В (ЗНАЧЕНИЕ(Справочник.Сценарии.План), ЗНАЧЕНИЕ(Справочник.Сценарии.Резерв))
	|	И НЕ Сценарии.ПометкаУдаления";
	
	ДоступныеСценарии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.Сценарий.СписокВыбора.ЗагрузитьЗначения(ДоступныеСценарии);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьКонтролируемыеПериоды()
	Документы.ОтражениеФактическихДанныхБюджетирования.ОпределитьКонтролируемыеПериоды(ЭтотОбъект.Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтатьи(ВидБюджета)
	
	ОбработатьИзменениеСтатьиНаСервере(ВидБюджета, ТекущийЭлемент.ТекущаяСтрока);
			
КонецПроцедуры // ОбработатьИзменениеСтатьи()

&НаСервере
Процедура ОбработатьИзменениеСтатьиНаСервере(ВидБюджета, Строка)
	
	ИмяТаблицы = ВстраиваниеОПККлиентСерверПереопределяемый.ИмяТаблицыБюджета(ВидБюджета);
	Таблица = Объект[ИмяТаблицы];

	//
	Если Таблица.Количество()=1 Тогда
		
		Таблица[0].Сумма=Объект.СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнформационнаяБазаПриИзмененииНаСервере()
	
	Если Объект.ИспользуемаяИБ = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ Тогда
		ТипБД = Справочники.ТипыБазДанных.ТекущаяИБ;
	Иначе
		ТипБД = Объект.ИспользуемаяИБ.ТипБД;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументБДПриИзмененииНаСервере()
	
	ИмяОбъектаМетаданных = Объект.ДокументБД.Наименование;
	Объект.ИсходныйДокумент = "";
	ОпределитьПараметрыЗаполнения();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыЗаполнения()
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обработки, "ГенерацияОбъектовБД") Тогда
		Обработка = Обработки["ГенерацияОбъектовБД"];
		МассивПараметров = Обработка.ПолучитьПараметрыДляЗаполненияОбъектовБДПоИсходному(
			Объект.ДокументБД, Объект.Организация, Объект.Сценарий, Справочники.ТипыБазДанных.ТекущаяИБ, "ОтражениеФактическихДанныхБюджетирования");
		ПараметрыЗаполнения = ?(МассивПараметров.Количество() = 0,Неопределено,МассивПараметров[0]);
	КонецЕсли;
	
	Если НЕ ПараметрыЗаполнения = Неопределено Тогда
		Объект.ПравилоЗаполнения = ПараметрыЗаполнения.ПравилоЗаполнения;
		Объект.ИспользуемаяИБ = ПараметрыЗаполнения.ИспользуемаяИБ;
	Иначе
		Объект.ПравилоЗаполнения = "";
		Объект.ИспользуемаяИБ = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
		
КонецПроцедуры // ОпределитьПараметрыЗаполнения()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоБДДС	= Объект.БюджетДвиженияДенежныхСредств.Количество() > 0;
	
	Элементы.Сделка.Видимость = Форма.ВестиРасчетыПоЗаказам;
	
	//
	ПравилоЗаполнено = ЗначениеЗаполнено(Объект.ПравилоЗаполнения);
	Элементы.ЦФО.Видимость = ПравилоЗаполнено;
	Элементы.Проект.Видимость = ПравилоЗаполнено;
	Элементы.ДоговорКонтрагента.Видимость = ПравилоЗаполнено;
	Элементы.Сделка.Видимость = ПравилоЗаполнено;
	Элементы.ИнформационнаяБаза.Доступность = ПравилоЗаполнено;
	
	//
	ИсходныйДокументЗаполнен = ЗначениеЗаполнено(Объект.ИсходныйДокумент);
	Если ИсходныйДокументЗаполнен Тогда
		Элементы.Заполнить.Видимость = Объект.Скорректирован;
	Иначе
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Скорректирован Тогда
		
		Если Объект.ТребуетсяКорректировка Тогда
			Шаблон = НСтр("ru = 'Этот документ был скорректирован %1 пользователем %2. Исходный документ изменен. Требуется внести ручные корректировки в документ.'");
			Картинка = БиблиотекаКартинок.СообщениеОшибка;
		Иначе
			Шаблон = НСтр("ru = 'Этот документ был скорректирован %1 пользователем %2.'");
			Картинка = БиблиотекаКартинок.ВниманиеЕстьСсылки;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(Шаблон, Объект.ДатаКорректировки, Объект.Пользователь);
		
		Элементы.ИнформацияСообщение.Заголовок = ТекстСообщения;
		Элементы.ИнформацияКартинка.Картинка = Картинка;
		
	КонецЕсли;
	
	Элементы.ИнформацияГруппа.Видимость = Объект.Скорректирован;
	Элементы.КнопкаПодтвердитьИзменения.Видимость = Объект.ТребуетсяКорректировка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыДокумента(БДДС,БДР,Ресурсы)
	
	Если БДДС И Объект.БюджетДвиженияДенежныхСредств.Количество()=1 Тогда
		
		Объект.БюджетДвиженияДенежныхСредств[0].Сумма=Объект.СуммаДокумента;
		
	КонецЕсли;
	
	Если БДР И Объект.БюджетДоходовИРасходов.Количество()=1 Тогда
		
		Объект.БюджетДоходовИРасходов[0].Сумма=Объект.СуммаДокумента;
		
	КонецЕсли;
	
	Если Ресурсы И Объект.БюджетДвиженияРесурсов.Количество()=1 Тогда
		
		Объект.БюджетДвиженияРесурсов[0].Сумма=Объект.СуммаДокумента;
		
	КонецЕсли;
		
		
КонецПроцедуры // ПриИзмененииСуммыДокумента() 

&НаСервере
Процедура ПриИзмененииДоговораКонтрагентаНаСервере()
	
	УстановитьПризнакВеденияРасчетовПоЗаказам();	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ПриИзмененииДоговораКонтрагента()

&НаСервере
Процедура ИсходныйДокументПриИзмененииНаСервере()
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоИсходномуДокументу();
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ОбновитьИмяОбъектаМетаданных();
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПравилоЗаполненияПриИзмененииНаСервере()
	
	ТипБД=Объект.ПравилоЗаполнения.ТипБД;
	УправлениеФормой(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакВеденияРасчетовПоЗаказам()
	
	ВестиРасчетыПоЗаказам = ВстраиваниеОПКПереопределяемый.ВестиРасчетыПоЗаказам(Объект.ДоговорКонтрагента);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияОтбораСтатей(Форма)
	
	Объект = Форма.Объект;
	Список = Форма.ЗначенияВыбораПриходРасход;
	
	//
	Список.Очистить();
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.ПустаяСсылка"));
	Если ЗначениеЗаполнено(Объект.ПриходРасход) Тогда
		Список.Добавить(Объект.ПриходРасход);
	Иначе
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход"));
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	//
	УстановитьУсловноеОформление();
	
	// Данные для создания полей Аналитика* для элементов Статьи бюджетов
	АСБ = АналитикиСтатейБюджетовУХ;
	
	МассивОписанийСтатей = Новый Массив;
	
	// БДДС
	АСБ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей, 
		"БюджетДвиженияДенежныхСредств",  "ТабБюджетДвиженияДенежныхСредств",
		"СтатьяДвиженияДенежныхСредств", "ТабБюджетДвиженияДенежныхСредствСтатьяДвиженияДенежныхСредств",
		"Аналитика%1", "АналитикаБДДС%1",
		ФормыУХ.РазместитьПередЭлементомСтрокой(Элементы.ТабБюджетДвиженияДенежныхСредствСумма));
	
	// БДР
	АСБ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей, 
		"БюджетДоходовИРасходов",  "ТабБюджетДоходовИРасходов",
		"СтатьяДоходовИРасходов", "ТабБюджетДоходовИРасходовСтатьяДоходовИРасходов",
		"Аналитика%1", "АналитикаБДР%1",
		ФормыУХ.РазместитьПередЭлементомСтрокой(Элементы.ТабБюджетДоходовИРасходовСумма));
	
	// Закупки
	АСБ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей, 
		"БюджетДвиженияРесурсов",  "ТабБюджетДвиженияРесурсов",
		"СтатьяДвиженияРесурсов", "ТабБюджетДвиженияРесурсовСтатьяДвиженияРесурсов",
		"Аналитика%1", "АналитикаРесурсы%1",
		ФормыУХ.РазместитьПередЭлементомСтрокой(Элементы.ТабБюджетДвиженияРесурсовСумма));
	
	// Создать элементы формы для статей бюджетов и их аналитик
	Если МассивОписанийСтатей.Количество() > 0 Тогда
		ПараметрыЭлементов = ПолучитьПараметрыЭлементов();
		АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(ЭтотОбъект, МассивОписанийСтатей, ПараметрыЭлементов);
	КонецЕсли;
	
	// Курс
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЭлементов()
	
	ПараметрыЭлементов = ФормыУХ.ПолучитьПараметрыЭлементовПоУмолчанию();
	ПараметрыЭлементов.ГруппаВ.ОтображатьЗаголовок  = Ложь;
	ПараметрыЭлементов.ГруппаГ.ОтображатьЗаголовок  = Ложь;
	
	Возврат ПараметрыЭлементов;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДвиженияОперации(ТабличнаяЧасть, Знач ВидБюджета, Знач ДобавлятьНовуюСтроку = Истина) Экспорт
	
	// Если Табличная часть пустая - нет смысла что-либо предпринимать.
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Если ДобавлятьНовуюСтроку Тогда
			ТабличнаяЧасть.Добавить();
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ПараметрыБюджета = ВстраиваниеОПККлиентСерверПереопределяемый.ПараметрыБюджета(ВидБюджета);
	ИмяКолонкиСтатья = ПараметрыБюджета.КолонкаСтатья;
	ПереченьСтатей = ТабличнаяЧасть.Выгрузить(,ИмяКолонкиСтатья).ВыгрузитьКолонку(ИмяКолонкиСтатья);
	
	НастройкиСтатей = АналитикиСтатейБюджетовУХВызовСервера.ВидыАналитикСтатей(ПереченьСтатей);	
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		
		СтатьяБюджета = ТекСтрока[ИмяКолонкиСтатья];
		
		Если Не ЗначениеЗаполнено(СтатьяБюджета) Тогда
			Для Индекс = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
				ТекСтрока["ВидАналитики" + Индекс] = Неопределено;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		НастройкиСтатьи = НастройкиСтатей.Найти(СтатьяБюджета, "СтатьяБюджета");
		Если НастройкиСтатьи <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, НастройкиСтатьи);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИмяОбъектаМетаданных()
	Если ЗначениеЗаполнено(Объект.ДокументБД) Тогда
		ИмяОбъектаМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументБД, "Наименование");
	Иначе
		ИмяОбъектаМетаданных = "";
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПроверитьИзменениеКлючевыхРеквизитов(Элемент)
	
	Если Объект.Скорректирован Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеЭлементы = Новый Структура;
	КлючевыеЭлементы.Вставить("Взаиморасчеты");
	КлючевыеЭлементы.Вставить("ТабБюджетДвиженияДенежныхСредств");
	КлючевыеЭлементы.Вставить("ТабБюджетДоходовИРасходов");
	КлючевыеЭлементы.Вставить("ТабБюджетДвиженияРесурсов");
	КлючевыеЭлементы.Вставить("ПриходРасход");
	КлючевыеЭлементы.Вставить("СуммаДокумента");
	КлючевыеЭлементы.Вставить("ВалютаДокумента");
	
	Если КлючевыеЭлементы.Свойство(Элемент.Имя) Тогда
		
		Объект.ДатаКорректировки = ОбщегоНазначенияКлиент.ДатаСеанса();
		Объект.Пользователь = ПользователиКлиент.АвторизованныйПользователь();
		Объект.Скорректирован = Истина;
		
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.Скорректирован = Ложь;
	Объект.ТребуетсяКорректировка = Ложь;
	
	ИсходныйДокументПриИзмененииНаСервере();
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактБюджетаСуммаВзаиморасчетовПриИзменении(Форма, ИмяТаблицы, ИмяЭлемента, Элемент) Экспорт
	
	СтрокаФакт = ТекущиеДанныеФактБюджета(Форма, ИмяТаблицы, ИмяЭлемента);
	ЗаполнитьПустыеКурсыВалют(Форма, СтрокаФакт);
	
	Если СтрокаФакт.СуммаВзаиморасчетов <> 0 И Форма.КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаФакт.Сумма * Форма.КурсДокумента / Форма.КратностьДокумента;
		СтрокаФакт.КурсВзаиморасчетов = СуммаРуб / СтрокаФакт.СуммаВзаиморасчетов * СтрокаФакт.КратностьВзаиморасчетов;
	КонецЕсли;
	
	ЗаполнитьЗначенияТекущиеДанныеФакт(Форма, СтрокаФакт, ИмяТаблицы, ИмяЭлемента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеДанныеФактБюджета(Форма, ИмяТаблицы, ИмяЭлемента, ИдСтроки = -1) Экспорт
	
	ФактБюджета = Форма.Объект[ИмяТаблицы];
	
	#Если Клиент Или ВебКлиент Тогда
		Если ИдСтроки = -1 Тогда
			Результат = Форма.Элементы[ИмяЭлемента].ТекущиеДанные;
		Иначе
			Результат = ФактБюджета.НайтиПоИдентификатору(ИдСтроки);
		КонецЕсли;
	#Иначе
		Результат = ФактБюджета.НайтиПоИдентификатору(ИдСтроки);
	#КонецЕсли
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма)
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Объект.БюджетДвиженияДенежныхСредств);
	ТабличныеЧасти.Добавить(Объект.БюджетДоходовИРасходов);
	ТабличныеЧасти.Добавить(Объект.БюджетДвиженияРесурсов);
	
	// Собрать список договоров и получить их значения
	Договоры = Новый Массив;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Договоры, 
			ТабличнаяЧасть.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента"), Истина);
	КонецЦикла;
	
	СвойстваДоговоров = ВстраиваниеОПКПереопределяемый.ПараметрыРасчетовДоговоров(Договоры);
		
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаФакт Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(СтрокаФакт.ДоговорКонтрагента) Тогда
				СвойстваДоговора = СвойстваДоговоров[СтрокаФакт.ДоговорКонтрагента];
				СтрокаФакт.ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
				СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = 
					СвойстваДоговора.РасчетыВУсловныхЕдиницах ИЛИ СвойстваДоговора.РасчетыВУсловныхЕдиницахВалюта;
				
				Форма.ЕстьРасчетыВУсловныхЕдиницах = 
					Форма.ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
			Иначе
				СтрокаФакт.ВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
				СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для каждого СтрокаФакт Из ТабличнаяЧасть Цикл
				ЗаполнитьНадписиВРасшифровке(СтрокаФакт);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	Если СтрокаПлатеж.Свойство("НадписьКурс") Тогда
		СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
		СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактБюджетаКурсВзаиморасчетовПриИзменении(Форма, ИмяТаблицы, ИмяЭлемента, Элемент)
	
	СтрокаФакт = ТекущиеДанныеФактБюджета(Форма, ИмяТаблицы, ИмяЭлемента);
	РассчитатьСуммуВзаиморасчетов(Форма, СтрокаФакт);
	ЗаполнитьЗначенияТекущиеДанныеФакт(Форма, СтрокаФакт, ИмяТаблицы, ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактБюджетаКурсВзаиморасчетовНачалоВыбора(Форма, ИмяТаблицы, ИмяЭлемента, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаФакт = ТекущиеДанныеФактБюджета(Форма, ИмяТаблицы, ИмяЭлемента);
	Если НЕ ЗначениеЗаполнено(СтрокаФакт.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, СтрокаФакт);
	ПараметрыДокумента.Дата = Форма.Объект.Дата;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаФакт);
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ДополнительныеПараметры.Вставить("ИмяТаблицы",   ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИмяЭлемента",  ИмяЭлемента);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФактБюджетаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактБюджетаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаФакт = ДополнительныеПараметры.СтрокаПлатеж;
	Форма      = ДополнительныеПараметры.Форма;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаФакт.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаФакт.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Форма, СтрокаФакт);
	ЗаполнитьЗначенияТекущиеДанныеФакт(Форма, СтрокаФакт, ДополнительныеПараметры.ИмяТаблицы, ДополнительныеПараметры.ИмяЭлемента);
	
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(Форма, СтрокаФакт) Экспорт
	
	ЗаполнитьПустыеКурсыВалют(Форма, СтрокаФакт);
	СтрокаФакт.СуммаВзаиморасчетов = ВстраиваниеОПККлиентСерверПереопределяемый.ПересчитатьИзВалютыВВалюту(
		СтрокаФакт.Сумма,
		Форма.Объект.ВалютаДокумента, СтрокаФакт.ВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаФакт.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаФакт.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПустыеКурсыВалют(Форма, СтрокаФакт) Экспорт
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаФакт <> Неопределено Тогда
		СтрокаФакт.КурсВзаиморасчетов      = ?(НЕ ЗначениеЗаполнено(СтрокаФакт.КурсВзаиморасчетов), 1, СтрокаФакт.КурсВзаиморасчетов);
		СтрокаФакт.КратностьВзаиморасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаФакт.КратностьВзаиморасчетов), 1, СтрокаФакт.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияТекущиеДанныеФакт(Форма, НовыеДанныеСтроки, ИмяТаблицы, ИмяЭлемента, ИдСтроки = -1, ЗаполнятьСуммуДокумента = Истина) Экспорт
	
	Если НовыеДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФактБюджета = Форма.Объект[ИмяТаблицы];
	
	#Если Клиент Или ВебКлиент Тогда
		Если ИдСтроки = -1 Тогда
			ТекущиеДанные = Форма.Элементы[ИмяЭлемента].ТекущиеДанные;
		Иначе
			ТекущиеДанные = ФактБюджета.НайтиПоИдентификатору(ИдСтроки);
		КонецЕсли;
	#Иначе
		ТекущиеДанные = ФактБюджета.НайтиПоИдентификатору(ИдСтроки);
	#КонецЕсли
	
	Если ТекущиеДанные <> НовыеДанныеСтроки Тогда
		// Если переданная коллекция отличается от текущей строкой табличного поля,
		// то переносим данные из нее в текущую строку.
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, НовыеДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФактБюджетаСуммаПриИзменении(Форма, ИмяТаблицы, ИмяЭлемента, ИдСтроки = -1) Экспорт
	
	СтрокаФакт = ТекущиеДанныеФактБюджета(Форма, ИмяТаблицы, ИмяЭлемента, ИдСтроки);
	РассчитатьСуммуВзаиморасчетов(Форма, СтрокаФакт);
	ЗаполнитьЗначенияТекущиеДанныеФакт(Форма, СтрокаФакт, ИмяТаблицы, ИмяЭлемента, ИдСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ФактБюджетовДоговорКонтрагентаПриИзмененииНаСервере(ИмяТЧ, ИдСтроки)
	
	//
	ТабличнаяЧасть = Объект[ИмяТЧ];
	СтрокаФакт = ТабличнаяЧасть.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаФакт = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаФакт.ДоговорКонтрагента) Тогда
		СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		СтрокаФакт.ВалютаВзаиморасчетов		= Справочники.Валюты.ПустаяСсылка();
		СтрокаФакт.КурсВзаиморасчетов		= 1;
		СтрокаФакт.КратностьВзаиморасчетов	= 1;
		СтрокаФакт.СуммаВзаиморасчетов		= СтрокаФакт.Сумма;
		Возврат;
	КонецЕсли;
	
	ЭтоБДДС = ИмяТЧ = "БюджетДвиженияДенежныхСредств";
	ЭтоБДР = ИмяТЧ = "БюджетДоходовИРасходов";
	ЭтоБЗ  = ИмяТЧ = "БюджетДвиженияРесурсов";
	
	СвойстваДоговора = ВстраиваниеОПКПереопределяемый.ПолучитьПараметрыПланированияПоДоговору(СтрокаФакт.ДоговорКонтрагента, ЭтоБДДС);
	
	СтрокаФакт.ВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
	
	СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах
		ИЛИ СвойстваДоговора.РасчетыВУсловныхЕдиницахВалюта;
	
	ЭтотОбъект.ЕстьРасчетыВУсловныхЕдиницах = ЭтотОбъект.ЕстьРасчетыВУсловныхЕдиницах
		ИЛИ СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	Если СтрокаФакт.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, Объект.Дата);
		СтрокаФакт.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СтрокаФакт.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	КонецЕсли;
	
	//
	Если ЭтоБДДС И НЕ ЗначениеЗаполнено(СтрокаФакт.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаФакт.СтатьяДвиженияДенежныхСредств = СвойстваДоговора.СтатьяБюджета;
		ЗаполнитьЗначенияСвойств(СтрокаФакт, СвойстваДоговора, "Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6");
	ИначеЕсли ЭтоБДР И НЕ ЗначениеЗаполнено(СтрокаФакт.СтатьяДоходовИРасходов) Тогда
		СтрокаФакт.СтатьяДоходовИРасходов = СвойстваДоговора.СтатьяБюджета;
		ЗаполнитьЗначенияСвойств(СтрокаФакт, СвойстваДоговора, "Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6");
	ИначеЕсли ЭтоБЗ И НЕ ЗначениеЗаполнено(СтрокаФакт.СтатьяДвиженияРесурсов) Тогда
		СтрокаФакт.СтатьяДвиженияРесурсов = СвойстваДоговора.СтатьяБюджета;
		ЗаполнитьЗначенияСвойств(СтрокаФакт, СвойстваДоговора, "Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаФакт.ЦФО) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаФакт, СвойстваДоговора, "ЦФО, Проект");
	КонецЕсли;
	
	Если ЭтотОбъект.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаФакт Из ТабличнаяЧасть Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаФакт);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеФактБюджетов();
	
	// ИдентификаторПозиции заполнен
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствИдентификаторПозиции.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	
		"Объект.БюджетДвиженияДенежныхСредств.ИдентификаторПозиции",ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	
		"Объект.БюджетДвиженияДенежныхСредств.ТолькоИзменитьСостояниеПозиции",ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Указан'"));
	
	// ИдентификаторПозиции заполнен
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствИдентификаторПозиции.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	
		"Объект.БюджетДвиженияДенежныхСредств.ИдентификаторПозиции",ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	
		"Объект.БюджетДвиженияДенежныхСредств.ТолькоИзменитьСостояниеПозиции",ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Указан, только изменение состояния позиции'"));
	
	// ИдентификаторПозиции заполнен
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствИдентификаторПозиции.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	
		"Объект.БюджетДвиженияДенежныхСредств.ИдентификаторПозиции",ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = ''"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФактБюджетов()
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствНадписьКурс.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствНадписьСуммаВал.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствКурсВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствСуммаВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствВалютаВзаиморасчетов.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовНадписьКурс.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовНадписьСуммаВал.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовКурсВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовСуммаВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовВалютаВзаиморасчетов.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовСуммаВзаиморасчетовНДС.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовСуммаВзаиморасчетовБезНДС.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовНадписьКурс.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовНадписьСуммаВал.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовКурсВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовСуммаВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовВалютаВзаиморасчетов.Имя);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов БДДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствКурсВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствСуммаВзаиморасчетов.Имя);
	
	ГруппаИЛИ = ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.БюджетДвиженияДенежныхСредств.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.БюджетДвиженияДенежныхСредств.ВалютаВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, 
		Новый ПолеКомпоновкиДанных("Объект.ВалютаДокумента"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов БДР
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовКурсВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовСуммаВзаиморасчетов.Имя);
	
	ГруппаИЛИ = ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.БюджетДоходовИРасходов.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.БюджетДоходовИРасходов.ВалютаВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, 
		Новый ПолеКомпоновкиДанных("Объект.ВалютаДокумента"));
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов Бюджет Закупок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовКурсВзаиморасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовСуммаВзаиморасчетов.Имя);
	
	ГруппаИЛИ = ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.БюджетДвиженияРесурсов.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.БюджетДвиженияРесурсов.ВалютаВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, 
		Новый ПолеКомпоновкиДанных("Объект.ВалютаДокумента"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаДоговорКонтрагента БДДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияДенежныхСредствДоговорКонтрагента.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.БюджетДвиженияДенежныхСредств.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента БДР
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДоходовИРасходовДоговорКонтрагента.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.БюджетДоходовИРасходов.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента Бюджет закупок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ТабБюджетДвиженияРесурсовДоговорКонтрагента.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.БюджетДвиженияРесурсов.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИзменениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПодтвердитьКорректировкуНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьКорректировкуНаСервере()
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПодтвердитьИзменения();
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		ПроверитьИзменениеКлючевыхРеквизитов(Элемент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
