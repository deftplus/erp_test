#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
	Перем ТаблицаБДДС Экспорт;
	Перем ТаблицаБДР Экспорт;
	Перем ТаблицаРесурсы Экспорт;
#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПоИсходномуДокументу() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсходныйДокумент = ТипЗнч(ИсходныйДокумент);
	
	ЗаполнитьРеквизитыИБИсходногоДокумента();
	ИсходныйДокументОбъекта=ИсходныйДокумент;
	
	Если ЗначениеЗаполнено(ПравилоЗаполнения) Тогда
		
		ЭтотОбъект.БюджетДвиженияДенежныхСредств.Очистить();
		ЭтотОбъект.БюджетДоходовИРасходов.Очистить();
		ЭтотОбъект.БюджетДвиженияРесурсов.Очистить();
		ЭтотОбъект.Взаиморасчеты.Очистить();
		
		ОбработкаОбъект=Обработки["ГенерацияОбъектовБД"].Создать();
		ОбработкаОбъект.ПравилоЗаполнения		= ПравилоЗаполнения;
		ОбработкаОбъект.ИспользуемаяИБ			= ИспользуемаяИБ;
		ОбработкаОбъект.ДокументОбъект			= ЭтотОбъект;
		ОбработкаОбъект.ИсходныйОбъектСсылка 	= ИсходныйДокумент; 
		
		ОбработкаОбъект.ОбработатьОбъектыБД();
		
	Иначе
		
		Если ЗаполнениеОФД.ВыполнитьЗаполнение(ИсходныйДокумент, ЭтотОбъект) Тогда
			// Документ заполнен в функции
		ИначеЕсли ВстраиваниеОПКПереопределяемый.ЭтоЗаявкаНаОперацию(ИсходныйДокумент) Тогда
			ЭтотОбъект.БюджетДвиженияДенежныхСредств.Очистить();
			ЭтотОбъект.БюджетДоходовИРасходов.Очистить();
			ЭтотОбъект.БюджетДвиженияРесурсов.Очистить();
			ЭтотОбъект.Взаиморасчеты.Очистить();
			
			ЗаполнитьПоДокументуПланирования();
		ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОтражениеФактическихДанныхБюджетирования") Тогда
			ЭтотОбъект.БюджетДвиженияДенежныхСредств.Очистить();
			ЭтотОбъект.БюджетДоходовИРасходов.Очистить();
			ЭтотОбъект.БюджетДвиженияРесурсов.Очистить();
			ЭтотОбъект.Взаиморасчеты.Очистить();
			
			ЗаполнитьПоОФД();
		Иначе
			ЭтотОбъект.БюджетДвиженияДенежныхСредств.Очистить();
			ЭтотОбъект.БюджетДоходовИРасходов.Очистить();
			ЭтотОбъект.БюджетДвиженияРесурсов.Очистить();
			ЭтотОбъект.Взаиморасчеты.Очистить();
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,"Номер,Ссылка,ПометкаУдаления,Проведен");
		КонецЕсли;
		
	КонецЕсли;
	
	ИсходныйДокумент = ИсходныйДокументОбъекта;	
	
КонецПроцедуры // ЗаполнитьПоИсходномуДокументу()

Процедура ПодтвердитьИзменения() Экспорт
	
	Если ТребуетсяКорректировка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяКорректировка = Ложь;
	ДатаКорректировки = ТекущаяДатаСеанса();
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗаполнениеОФД.ВыполнитьЗаполнение(ИсходныйДокумент, ЭтотОбъект, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполнитьПоИсходномуДокументу = Истина;
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ИсходныйДокумент") Тогда
			
			ТипИсходногоДокумента = ТипЗнч(ДанныеЗаполнения.ИсходныйДокумент);
			Если ТипИсходногоДокумента = КэшируемыеПроцедурыОПК.ТипЗаявкаНаОплату()
				ИЛИ ТипИсходногоДокумента = КэшируемыеПроцедурыОПК.ТипПланируемоеПоступление() Тогда
				
				ЗаполнитьПоПозицииЗаявки(ЭтотОбъект, ДанныеЗаполнения.ИсходныйДокумент);
				ЗаполнитьПоИсходномуДокументу = Ложь;
			Иначе
				ИсходныйДокумент = ДанныеЗаполнения.ИсходныйДокумент;
			КонецЕсли;
			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипДанныхЗаполнения) Тогда
		ИсходныйДокумент = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("УникальныйИдентификатор") Тогда
		// Это позиция заявки.
		ЗаполнитьПоПозицииЗаявки(ЭтотОбъект, ДанныеЗаполнения);
		ЗаполнитьПоИсходномуДокументу = Ложь;
	КонецЕсли;
	
	Если ЗаполнитьПоИсходномуДокументу И ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		ЗаполнитьПоИсходномуДокументу();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВстраиваниеОФД.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Не ЗначениеЗаполнено(ЦФО) Тогда
		ЦФО = Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Сценарий = Справочники.Сценарии.Факт;
	КонецЕсли;
	
	ПредставлениеДляВнешнегоПоставщика = Строка(ИсходныйДокумент);
	
	ТабличныеЧасти = Новый Структура;
	// Ключ структуры - имя бюджета, значение - ссылка на соответствующую табличную часть.
	ТабличныеЧасти.Вставить("БюджетДоходовИРасходов", БюджетДоходовИРасходов);
	ТабличныеЧасти.Вставить("БюджетДвиженияДенежныхСредств", БюджетДвиженияДенежныхСредств);
	ТабличныеЧасти.Вставить("БюджетДвиженияРесурсов", БюджетДвиженияРесурсов);
	
	РеквизитыДляЗаполнения = Новый Массив;
	РеквизитыДляЗаполнения.Добавить("ДоговорКонтрагента");
	РеквизитыДляЗаполнения.Добавить("ЦФО");
	РеквизитыДляЗаполнения.Добавить("Проект");
	
	Для Каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		// Заполним пустые реквизиты
		Для Каждого ТекСтрокаТЧ Из ТекТабличнаяЧасть.Значение Цикл
			Для Каждого ТекРеквизит Из РеквизитыДляЗаполнения Цикл
				Если Не ЗначениеЗаполнено(ТекСтрокаТЧ[ТекРеквизит]) Тогда
					ТекСтрокаТЧ[ТекРеквизит] = ЭтотОбъект[ТекРеквизит];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;	
	
	Документы.ОтражениеФактическихДанныхБюджетирования.ОпределитьКонтролируемыеПериоды(ЭтотОбъект);
	
	ЭтоБДДС		= (БюджетДвиженияДенежныхСредств.Количество() > 0);
	ЭтоБДР		= (БюджетДоходовИРасходов.Количество() > 0);
	ЭтоРесурсы	= (БюджетДвиженияРесурсов.Количество() > 0);
	
	ПроведениеСерверОПК.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтражениеФактическихДанныхБюджетирования.ИсходныйДокумент
		|ИЗ
		|	Документ.ОтражениеФактическихДанныхБюджетирования КАК ОтражениеФактическихДанныхБюджетирования
		|ГДЕ
		|	ОтражениеФактическихДанныхБюджетирования.Проведен
		|	И ОтражениеФактическихДанныхБюджетирования.Ссылка <> &Ссылка
		|	И ОтражениеФактическихДанныхБюджетирования.ИсходныйДокумент = &ИсходныйДокумент";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			ШаблонТекстаОбОшибке = НСтр("ru = 'На основании документа %1 уже создан документ ""Отражение фактических данных"". Проведение отменено.'");
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонТекстаОбОшибке,ИсходныйДокумент),Ссылка,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//
	Если Скорректирован = Ложь Тогда
		ДатаКорректировки = '00010101000000';
		Пользователь = неопределено;
		ТребуетсяКорректировка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВстраиваниеОФД.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверОПК.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ОтражениеФактическихДанныхБюджетирования.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// 
	КонтрольЛимитовУХ.ВыполнитьПроверкуНаличияПериодов(Ссылка, ДополнительныеСвойства, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка наборов записей
	ПроведениеСерверОПК.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по регистрам
	ВстраиваниеОФД.ОтразитьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	Документы.ОтражениеФактическихДанныхБюджетирования.ОтразитьФактПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	КонтрольЛимитовУХ.ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеСерверОПК.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ВстраиваниеОФД.ВыполнитьДополнительныеДействия(ЭтотОбъект, Отказ, РежимПроведения);
	
	ПроведениеСерверОПК.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуПланирования()
	
	Если НЕ ВстраиваниеОПКПереопределяемый.ЭтоЗаявкаНаОперацию(ИсходныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант документа планирования для заполнения: %Транзакция%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Транзакция%", Строка(ИсходныйДокумент));
		ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//
	ТипЗаявки = ТипЗнч(ИсходныйДокумент);
	Реквизиты = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗаявки);
	ОбъектМетаданных = ИсходныйДокумент.Метаданные();
	
	Поля = Новый Структура;
	Поля.Вставить("Организация", Реквизиты.Организация);
	Поля.Вставить("Контрагент", Реквизиты.Контрагент);
	Поля.Вставить("ВалютаДокумента", Реквизиты.ВалютаДокумента);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодОтчета", ОбъектМетаданных) Тогда
		Поля.Вставить("ПериодОтчета", "Документ.ПериодОтчета");
	Иначе
		Поля.Вставить("ПериодОтчета", "ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЦеннаяБумага", ОбъектМетаданных) Тогда
		Поля.Вставить("ЦеннаяБумага", "Документ.ЦеннаяБумага");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ОбъектРасчетов", ОбъектМетаданных) Тогда
		Поля.Вставить("ЦеннаяБумага", "ВЫРАЗИТЬ(Документ.ОбъектРасчетов КАК Справочник.ЦенныеБумаги)");
	Иначе
		Поля.Вставить("ЦеннаяБумага", "ЗНАЧЕНИЕ(Справочник.ЦенныеБумаги.ПустаяСсылка)");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОбъектРасчетов", ОбъектМетаданных) Тогда
		Поля.Вставить("ОбъектРасчетов", "Документ.ОбъектРасчетов");
	Иначе
		Поля.Вставить("ОбъектРасчетов", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	Поля.Вставить("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Поля.Вставить("ПриходРасход", Реквизиты.ПриходРасход);
	Поля.Вставить("Предназначение", Реквизиты.ВидБюджета);
	Поля.Вставить("ПланируемаяДатаОперации", Реквизиты.ПланируемаяДатаОперации);
	Поля.Вставить("ДокументПланирования");
	Поля.Вставить("ЦФО", Реквизиты.ЦФО);
	Поля.Вставить("Проект", Реквизиты.Проект);
	Поля.Вставить("ДатаИсходногоДокумента", "Документ.Дата");
	Поля.Вставить("НомерИсходногоДокумента", "Документ.Номер");
	Поля.Вставить("ПредставлениеИсходногоДокумента", "Документ.Представление");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ИсходныйДокумент);
	Запрос.Текст = ЗаявкиНаОперации.ТекстЗапросаПоПолямДокументаЗаявка(ТипЗаявки, Поля);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Результат.ПериодОтчета) Тогда
			ПериодОтчета = Результат.ПериодОтчета;
		Иначе
			ПериодОтчета = КонтрольЛимитовУХ.ПолучитьПериодКонтроля(
				Результат.Предназначение, Результат.ПланируемаяДатаОперации);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		
		ТабОстаткиПоДокументу = ВернутьТекущиеОстаткиПоДокументуПланирования(
			ИсходныйДокумент, Результат.Предназначение, Результат.ПриходРасход);
		Если ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБДДС(Результат.Предназначение)  Тогда
			ПериодБДДС				= ПериодОтчета;
			ЗаполнитьДвиженияДокумента(ТабОстаткиПоДокументу, БюджетДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");
		ИначеЕсли ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБДР(Результат.Предназначение) Тогда
			ПериодБДР				= ПериодОтчета;
			ЗаполнитьДвиженияДокумента(ТабОстаткиПоДокументу, БюджетДоходовИРасходов,"СтатьяДоходовИРасходов");
		ИначеЕсли ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБюджетДвиженияРесурсов(Результат.Предназначение) Тогда
			ПериодРесурсы			= ПериодОтчета;
			ЗаполнитьДвиженияДокумента(ТабОстаткиПоДокументу, БюджетДвиженияРесурсов,"СтатьяДвиженияРесурсов");
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры // ЗаполнитьПоДокументуПланирования()

Процедура ЗаполнитьПоПозицииЗаявки(Источник, ДанныеЗаполнения)
	
	ТекстОшибки="";
	
	Запрос = Новый Запрос;		
	
	Запросы = Новый Массив;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("УникальныйИдентификатор") Тогда
		Запрос.УстановитьПараметр("ИдентификаторПозиции", ДанныеЗаполнения);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
		|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
		|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)) КАК СостояниеИсполнения,
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеСогласования,
		|	РазмещениеЗаявок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РазмещениеЗаявок.Сумма КАК Сумма,
		|	РазмещениеЗаявок.КурсПлатежа КАК КурсПлатежа,
		|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаОплаты,
		|	РазмещениеЗаявок.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВТ_Позиции
		|ИЗ
		|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
		|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
		|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = РегистрСостоянийОбъектовСрезПоследних.Объект
		|ГДЕ
		|	РазмещениеЗаявок.ИдентификаторПозиции = &ИдентификаторПозиции
		|	И ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)";
		
		
	Иначе
		Запрос.УстановитьПараметр("ИсходныйДокумент", ДанныеЗаполнения);
		Если ТипЗнч(ДанныеЗаполнения) = КэшируемыеПроцедурыОПК.ТипПланируемоеПоступление() Тогда
			Запрос.УстановитьПараметр("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.Приход);
		Иначе
			Запрос.УстановитьПараметр("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.Расход);
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
		|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
		|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)) КАК СостояниеИсполнения,
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеСогласования,
		|	РазмещениеЗаявок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РазмещениеЗаявок.Сумма КАК Сумма,
		|	РазмещениеЗаявок.КурсПлатежа КАК КурсПлатежа,
		|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаОплаты,
		|	РазмещениеЗаявок.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВТ_Позиции
		|ИЗ
		|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
		|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
		|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = РегистрСостоянийОбъектовСрезПоследних.Объект
		|ГДЕ
		|	РазмещениеЗаявок.ЗаявкаНаОперацию = &ИсходныйДокумент
		|	И РазмещениеЗаявок.ПриходРасход = &ПриходРасход
		|	И ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)";
		
	КонецЕсли;
	
	Запросы.Добавить(ТекстЗапроса);
	
	//
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_Позиции.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	МАКСИМУМ(РазмещениеЗаявок.БанковскийСчетКасса) КАК БанковскийСчетКасса,
	|	РазмещениеЗаявок.ДатаИсполнения КАК Дата,
	|	СУММА(РазмещениеЗаявок.Сумма) КАК СуммаДокумента,
	|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаДокумента,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РазмещениеЗаявок.Проведен КАК Проведен
	|ИЗ
	|	ВТ_Позиции КАК ВТ_Позиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ПО (РазмещениеЗаявок.ЗаявкаНаОперацию = ВТ_Позиции.ЗаявкаНаОперацию)
	|			И (РазмещениеЗаявок.ИдентификаторПозиции = ВТ_Позиции.ИдентификаторПозиции)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаявок.Проведен,
	|	РазмещениеЗаявок.ПриходРасход,
	|	РазмещениеЗаявок.Организация,
	|	РазмещениеЗаявок.ДатаИсполнения,
	|	РазмещениеЗаявок.ВалютаОплаты,
	|	РазмещениеЗаявок.Контрагент,
	|	РазмещениеЗаявок.ДоговорКонтрагента,
	|	ВТ_Позиции.ЗаявкаНаОперацию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ДвиженияБюджетированияПоПозициям.ЦФО КАК ЦФО,
	|	ДвиженияБюджетированияПоПозициям.Проект КАК Проект,
	|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДвиженияБюджетированияПоПозициям.Аналитика1 КАК Аналитика1,
	|	ДвиженияБюджетированияПоПозициям.Аналитика2 КАК Аналитика2,
	|	ДвиженияБюджетированияПоПозициям.Аналитика3 КАК Аналитика3,
	|	ДвиженияБюджетированияПоПозициям.Аналитика4 КАК Аналитика4,
	|	ДвиженияБюджетированияПоПозициям.Аналитика5 КАК Аналитика5,
	|	ДвиженияБюджетированияПоПозициям.Аналитика6 КАК Аналитика6,
	|	ДвиженияБюджетированияПоПозициям.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Позиции.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ДвиженияБюджетированияПоПозициям.Сумма) КАК СуммаВзаиморасчетов,
	|	СУММА(ДвиженияБюджетированияПоПозициям.Сумма * ВТ_Позиции.КурсПлатежа) КАК Сумма,
	|	СУММА(ДвиженияБюджетированияПоПозициям.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ВТ_Позиции КАК ВТ_Позиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|		ПО (ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию = ВТ_Позиции.ЗаявкаНаОперацию)
	|			И (ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции = ВТ_Позиции.ИдентификаторПозиции)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Позиции.ВалютаВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.ЦФО,
	|	ДвиженияБюджетированияПоПозициям.Проект,
	|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств,
	|	ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию,
	|	ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции,
	|	ДвиженияБюджетированияПоПозициям.Аналитика1,
	|	ДвиженияБюджетированияПоПозициям.Аналитика2,
	|	ДвиженияБюджетированияПоПозициям.Аналитика3,
	|	ДвиженияБюджетированияПоПозициям.Аналитика4,
	|	ДвиженияБюджетированияПоПозициям.Аналитика5,
	|	ДвиженияБюджетированияПоПозициям.Аналитика6,
	|	ДвиженияБюджетированияПоПозициям.СтавкаНДС";
	Запросы.Добавить(ТекстЗапроса);
	
	//
	Запрос.Текст = СтрСоединить(Запросы, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеШапка = МассивРезультатов[1].Выбрать();
	ДанныеРасшифровка = МассивРезультатов[2].Выбрать();
	
	Если ДанныеШапка.Следующий() Тогда
		
		Если НЕ ДанныеШапка.Проведен Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Создание ОФД возможно только на основании проведенных документов.'");
		КонецЕсли;
		
		ТекстОшибки = Сред(ТекстОшибки, 2);
		
	Иначе 		
		ТекстОшибки = НСтр("ru = 'Не найдены данные по данной позиции оплаты.'")
	КонецЕсли;
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ВызватьИсключение ТекстОшибки;
		Возврат;
		
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Источник, ДанныеШапка);
	
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		ИсходныйДокумент = ДанныеШапка.ДокументПланирования;
		ЗаполнитьРеквизитыИБИсходногоДокумента();
	КонецЕсли;
	
	Пока ДанныеРасшифровка.Следующий() Цикл
		НоваяСтрока = Источник.БюджетДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРасшифровка);
	КонецЦикла;
	
	Если Источник.БюджетДвиженияДенежныхСредств.Количество() > 0 Тогда
		ПоследняяСтрока = Источник.БюджетДвиженияДенежныхСредств[Источник.БюджетДвиженияДенежныхСредств.Количество() - 1];
		РасхождениеСумм = Источник.СуммаДокумента - Источник.БюджетДвиженияДенежныхСредств.Итог("Сумма");
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма + РасхождениеСумм;
	КонецЕсли;	
	
	// Взаиморасчеты
	ОтражатьВоВзаиморасчетах = ЗначениеЗаполнено(ДанныеШапка.ДоговорКонтрагента);
	Если ОтражатьВоВзаиморасчетах Тогда
		
		Если ДанныеШапка.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			НаправлениеВзаиморасчетов = Перечисления.НаправлениеДвиженияВзаиморасчетов.УменьшениеЗадолженности;
		Иначе
			НаправлениеВзаиморасчетов = Перечисления.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности;
		КонецЕсли;
		
		ТМП = МассивРезультатов[2].Выгрузить();
		ТаблицаСтатей = ТМП.Скопировать(, "СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов, СуммаВзаиморасчетов");
		ТаблицаСтатей.Свернуть("СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов", "СуммаВзаиморасчетов");
		
		Для Каждого СтрокаСтатья Из ТаблицаСтатей Цикл
			
			Строка = Взаиморасчеты.Добавить();
			Строка.СтатьяБюджета = СтрокаСтатья.СтатьяДвиженияДенежныхСредств;
			Строка.ДоговорКонтрагента = ДанныеШапка.ДоговорКонтрагента;
			Строка.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
			Строка.СуммаВзаиморасчетов = СтрокаСтатья.СуммаВзаиморасчетов;
			Строка.ВалютаВзаиморасчетов = СтрокаСтатья.ВалютаВзаиморасчетов;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияДокумента(ТабОстаткиПоДокументу,ТаблицаДвижений,КолонкаСтатья)
	
	ТаблицаДвижений.Очистить();
	
	Для Каждого Строка Из ТабОстаткиПоДокументу Цикл
		
		НоваяСтрока=ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока[КолонкаСтатья]=Строка.СтатьяБюджета;
		НоваяСтрока.ДокументПланирования=ИсходныйДокумент;
		
	КонецЦикла;
	
	СуммаДокумента=ТаблицаДвижений.Итог("Сумма");
		
КонецПроцедуры // ЗаполнитьДвиженияДокумента() 

Процедура ЗаполнитьРеквизитыИБИсходногоДокумента()
	
	ИмяОбъектаМетаданных=ИсходныйДокумент.Метаданные().Имя;
	
	Если (НЕ ЗначениеЗаполнено(ИспользуемаяИБ)) ИЛИ ИспользуемаяИБ = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ Тогда
		
		ТипБД = Справочники.ТипыБазДанных.ТекущаяИБ;
		
	Иначе
		
		ТипБД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИспользуемаяИБ, "ТипБД");
		
	КонецЕсли;
	
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию(ИмяОбъектаМетаданных,Истина,,ТипБД);	
	
КонецПроцедуры

Функция ВернутьТекущиеОстаткиПоДокументуПланирования(ДокументПланирования, Предназначение, ПриходРасход = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предназначение", Предназначение);
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);
	Запрос.УстановитьПараметр("ПриходРасход",	ПриходРасход);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперативныйПланПоБюджетамОбороты.Организация КАК Организация,
	|	ОперативныйПланПоБюджетамОбороты.Контрагент КАК Контрагент,
	|	ОперативныйПланПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОперативныйПланПоБюджетамОбороты.ЦФО КАК ЦФО,
	|	ОперативныйПланПоБюджетамОбороты.Проект КАК Проект,
	|	ОперативныйПланПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ОперативныйПланПоБюджетамОбороты.Проект КАК Проект1,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
	|	ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот КАК Сумма,
	|	ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот КАК СуммаУпр,
	|	ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот КАК СуммаВзаиморасчетов,
	|	ОперативныйПланПоБюджетамОбороты.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			Предназначение = &Предназначение
	|				И ДокументПланирования = &ДокументПланирования
	|				И (&ПриходРасход = НЕОПРЕДЕЛЕНО
	|					ИЛИ ПриходРасход = &ПриходРасход)) КАК ОперативныйПланПоБюджетамОбороты";
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ОперативныйПлан") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявленоОборот", "ЗарезервированоОборот");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьПоОФД()
	
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ИсходныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Организация КАК Организация,
	|	Документ.Контрагент КАК Контрагент,
	|	Документ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Документ.Проект КАК Проект,
	|	Документ.ИспользуемаяИБ КАК ИспользуемаяИБ,
	|	Документ.Сценарий КАК Сценарий,
	|	Документ.ВалютаДокумента КАК ВалютаДокумента,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	Документ.ПриходРасход КАК ПриходРасход,
	|	Документ.ПериодБДДС КАК ПериодБДДС,
	|	Документ.ПериодБДР КАК ПериодБДР,
	|	Документ.ПериодРесурсы КАК ПериодРесурсы,
	|	Документ.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	Документ.ОтражатьВоВзаиморасчетах КАК ОтражатьВоВзаиморасчетах,
	|	Документ.НаправлениеВзаиморасчетов КАК НаправлениеВзаиморасчетов,
	|	Документ.ЦФО КАК ЦФО,
	|	Документ.Номер КАК НомерИсходногоДокумента,
	|	Документ.Дата КАК ДатаИсходногоДокумента,
	|	Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Документ.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Документ.ЭтоБДДС КАК ЭтоБДДС,
	|	Документ.ЭтоБДР КАК ЭтоБДР,
	|	Документ.ЭтоРесурсы КАК ЭтоРесурсы
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Взаиморасчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Взаиморасчеты.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	Взаиморасчеты.СтатьяБюджета КАК СтатьяБюджета,
	|	Взаиморасчеты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	-Взаиморасчеты.СуммаВзаиморасчетов КАК Поле1,
	|	Взаиморасчеты.НаправлениеВзаиморасчетов КАК НаправлениеВзаиморасчетов
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.Взаиморасчеты КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Бюджет.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Бюджет.Аналитика1 КАК Аналитика1,
	|	Бюджет.Аналитика2 КАК Аналитика2,
	|	Бюджет.Аналитика3 КАК Аналитика3,
	|	Бюджет.Аналитика4 КАК Аналитика4,
	|	Бюджет.Аналитика5 КАК Аналитика5,
	|	Бюджет.Аналитика6 КАК Аналитика6,
	|	-Бюджет.Сумма КАК Сумма,
	|	Бюджет.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Бюджет.ЦФО КАК ЦФО,
	|	Бюджет.Проект КАК Проект,
	|	Бюджет.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	Бюджет.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Бюджет.СтавкаНДС КАК СтавкаНДС,
	|	-Бюджет.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Бюджет.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Бюджет.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	-Бюджет.СуммаНДС КАК СуммаНДС,
	|	Бюджет.ПриходРасход КАК ПриходРасход,
	|	Бюджет.БанковскийСчетКасса КАК БанковскийСчетКасса
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК Бюджет
	|ГДЕ
	|	Бюджет.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Бюджет.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	Бюджет.Аналитика1 КАК Аналитика1,
	|	Бюджет.Аналитика2 КАК Аналитика2,
	|	Бюджет.Аналитика3 КАК Аналитика3,
	|	Бюджет.Аналитика4 КАК Аналитика4,
	|	Бюджет.Аналитика5 КАК Аналитика5,
	|	Бюджет.Аналитика6 КАК Аналитика6,
	|	-Бюджет.Сумма КАК Сумма,
	|	Бюджет.ДокументПланирования КАК ДокументПланирования,
	|	Бюджет.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Бюджет.ЦФО КАК ЦФО,
	|	Бюджет.Проект КАК Проект,
	|	-Бюджет.СуммаНДС КАК СуммаНДС,
	|	-Бюджет.СуммаБезНДС КАК СуммаБезНДС,
	|	Бюджет.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	-Бюджет.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	-Бюджет.СуммаВзаиморасчетовНДС КАК СуммаВзаиморасчетовНДС,
	|	-Бюджет.СуммаВзаиморасчетовБезНДС КАК СуммаВзаиморасчетовБезНДС,
	|	Бюджет.ПриходРасход КАК ПриходРасход,
	|	Бюджет.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Бюджет.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДоходовИРасходов КАК Бюджет
	|ГДЕ
	|	Бюджет.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Бюджет.СтатьяДвиженияРесурсов КАК СтатьяДвиженияРесурсов,
	|	Бюджет.Аналитика1 КАК Аналитика1,
	|	Бюджет.Аналитика2 КАК Аналитика2,
	|	Бюджет.Аналитика3 КАК Аналитика3,
	|	Бюджет.Аналитика4 КАК Аналитика4,
	|	Бюджет.Аналитика5 КАК Аналитика5,
	|	Бюджет.Аналитика6 КАК Аналитика6,
	|	-Бюджет.Сумма КАК Сумма,
	|	Бюджет.Количество КАК Количество,
	|	Бюджет.ДокументПланирования КАК ДокументПланирования,
	|	Бюджет.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Бюджет.ЦФО КАК ЦФО,
	|	Бюджет.Проект КАК Проект,
	|	Бюджет.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	-Бюджет.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	-Бюджет.СуммаВзаиморасчетовНДС КАК СуммаВзаиморасчетовНДС,
	|	-Бюджет.СуммаВзаиморасчетовБезНДС КАК СуммаВзаиморасчетовБезНДС,
	|	-Бюджет.СуммаНДС КАК СуммаНДС,
	|	-Бюджет.СуммаБезНДС КАК СуммаБезНДС,
	|	Бюджет.ПриходРасход КАК ПриходРасход,
	|	Бюджет.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Бюджет.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияРесурсов КАК Бюджет
	|ГДЕ
	|	Бюджет.Ссылка = &Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат[0].Выгрузить()[0]);
	Взаиморасчеты.Загрузить(Результат[1].Выгрузить());
	БюджетДвиженияДенежныхСредств.Загрузить(Результат[2].Выгрузить());
	БюджетДоходовИРасходов.Загрузить(Результат[3].Выгрузить());
	БюджетДвиженияРесурсов.Загрузить(Результат[4].Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
