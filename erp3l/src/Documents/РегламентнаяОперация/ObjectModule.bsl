#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВремОрганизация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	Если ЗначениеЗаполнено(ВремОрганизация) И Не Организация = ВремОрганизация Тогда
		
		Организация = ВремОрганизация;
		
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		ЗначениеИзСтруктуры = Неопределено;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация", ЗначениеИзСтруктуры) Тогда
			
			Организация = ЗначениеИзСтруктуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Организация.Пустая() Тогда
		
		// Проверяем наличие проведенных регл. операций в этом месяце по выбранной организации.
		ПроверитьДублиДокументов(Отказ);
		
		ПроверитьЗаполнениеРегистрацииВНалоговыхОрганах(Отказ);
		
		ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		ПроверитьДоступностьРегламентнойОперации(ГоловнаяОрганизация, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПодготовитьДанныеДляФормированияЗаданияКЗакрытиюМесяцаПередЗаписью();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей Тогда
		ПроведениеДокументов.ОчиститьДвиженияДокумента(ЭтотОбъект, "Хозрасчетный");
	КонецЕсли;
	
	Документы.РегламентнаяОперация.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(
		СтрШаблон(НСтр("ru = 'Регламентная операция по закрытию месяца.%1';
						|en = 'Period-end operation for month-end closing.%1'"), СокрЛП(ТипОперации)), ТипОперации);
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ);
	
	МенеджерВременныхТаблицДляОтраженияВРеглУчете = Неопределено;
	ВыполнитьРегламентнуюОперацию(МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ);
	ДополнитьВременныеТаблицы(МенеджерВременныхТаблицДляОтраженияВРеглУчете);
	
	ОперацииКОтражениюВРеглУчете = Новый Массив;
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей);
	ОперацииКОтражениюВРеглУчете.Добавить(Перечисления.ТипыРегламентныхОпераций.РеклассификацияДолгосрочныхАктивовОбязательств);
	
	ДополнительныеСвойства.Вставить("НеРегистрироватьКОтражениюВРеглУчете",
		ОперацииКОтражениюВРеглУчете.Найти(ТипОперации) = Неопределено);
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	Если Не Отказ
		И (ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей
			ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РеклассификацияДолгосрочныхАктивовОбязательств) Тогда
		РеквизитыДокумента = Новый Структура("Ссылка,Дата,Организация", Ссылка, Дата, Организация);
		РеглУчетПроведениеСервер.ОтразитьДокумент(РеквизитыДокумента,, МенеджерВременныхТаблицДляОтраженияВРеглУчете,, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ);
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	Если Не ДополнительныеСвойства.Свойство("ОчисткаДляПоследующегоПроведения") 
		ИЛИ НЕ ДополнительныеСвойства.ОчисткаДляПоследующегоПроведения Тогда
		
		ВнеоборотныеАктивы.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект, ДополнительныеСвойства.ДанныеТаблиц);
		СформироватьЗаданияКРасчетуНалоговПриОтменеПроведения();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок)
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Отказ               = Отказ ИЛИ УчетнаяПолитикаСуществует(ГоловнаяОрганизация);
	СтруктураШапки      = Новый Структура();
	
	Если Отказ Тогда
		Возврат СтруктураШапки;
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(НалоговыйУчет.ВсяОрганизация(Организация));
	
	СтруктураШапки.Вставить("НачДата",                 НачалоМесяца(Дата));
	СтруктураШапки.Вставить("КонДата",                 КонецМесяца(Дата));
	СтруктураШапки.Вставить("НачГраница",              Новый Граница(СтруктураШапки.НачДата, ВидГраницы.Исключая));
	СтруктураШапки.Вставить("КонГраница",              Новый Граница(СтруктураШапки.КонДата, ВидГраницы.Включая));
	СтруктураШапки.Вставить("НачГода",                 НачалоГода(Дата));
	СтруктураШапки.Вставить("Организация",             Организация);
	СтруктураШапки.Вставить("СписокОрганизаций",       СписокОрганизаций);
	СтруктураШапки.Вставить("Ссылка",                  Ссылка);
	СтруктураШапки.Вставить("Дата",                    Дата);
	СтруктураШапки.Вставить("Номер",                   Номер);
	СтруктураШапки.Вставить("ТипОперации",             ТипОперации);
	СтруктураШапки.Вставить("Заголовок",               Заголовок);
	СтруктураШапки.Вставить("ГоловноеПодразделение",   ГоловнаяОрганизация);
	СтруктураШапки.Вставить("Предприниматель",         (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	
	Возврат СтруктураШапки;
	
КонецФункции

Процедура ПроверитьДоступностьРегламентнойОперации(ОрганизацияДляУчетнойПолитики, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим наличие учетной политики
	Если Не УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 на %2 не заполнена учетная политика.';
				|en = 'Accounting policy is not filled in for company %1 as of %2.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
			
	КонецЕсли;
	
	// Проверим выполнение условия для операций регл. учета
	ОперацииРеглУчета = Новый Массив;
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности);
	ОперацииРеглУчета.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
	
	Если ОперацииРеглУчета.Найти(ТипОперации) <> Неопределено
		И (Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") ИЛИ Дата < Константы.ДатаНачалаВеденияРеглУчета.Получить()) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнение операции %1 не доступно на %2.';
				|en = 'Cannot perform the %1 operation on %2.'"),
			ТипОперации,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ТипОперации", "Объект", Отказ);
		
	КонецЕсли;
		
	// Проверим выполнение условия для признания расходов УСН
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН
		И Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецМесяца(Дата)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 не доступно признание расходов на %2.';
				|en = 'Cannot recognize expenses for %1 company as of %2.'"),
			Организация,
			Формат(КонецМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
	// Проверим выполнение условия для расчета налога УСН
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН
		И Не УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецМесяца(Дата)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 не доступен расчет налога УСН на %2.';
				|en = 'STS tax calculation is not available for the %1 company as of %2.'"),
			Организация,
			Формат(КонецМесяца(Дата), "ДФ='MMMM yyyy'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяПолитикаСуществует(ОрганизацияДляУчетнойПолитики)
	
	Существует = УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка);
	Отказ      = Не Существует;
	
	Если Не Существует Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 на %2 не заполнена учетная политика.';
				|en = 'Accounting policy is not filled in for company %1 as of %2.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ВыполнитьРегламентнуюОперацию(МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		
		// Доли списания косвенных расходов
		РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Ложь, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество);
		РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
		РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
		РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
	
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора Тогда
		
		РасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц Тогда
		
		РасчетКурсовыхРазницРегл(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов Тогда
		
		// Списание нормируемых расходов, закрытие счета НРМ
		СписаниеКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата Тогда
		
		// Закрытие счетов 90-91
		ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
		// Округление сумм НДС до полных рублей № 248-ФЗ от 23.07.2013
		ОкруглениеСуммНДС(СтруктураШапкиДокумента);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда
		
		// Списание убытков прошлых лет
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ);		
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		// Расчет налога на прибыль
		ВыполнитьРасчетНалогаНаПрибыльСЗамеромВремени(СтруктураШапкиДокумента, Отказ);
	
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога Тогда
		
		// Расчет отложенного налога (балансовым методом)
		ВыполнитьРасчетОтложенногоНалога(СтруктураШапкиДокумента, Отказ);
	
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН Тогда
		
		// Признание расходов при УСН
		ВыполнитьПризнаниеРасходовПриУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
		
		// Расчет налога при УСН
		ВыполнитьРасчетНалогаПриУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		// Операции закрытия года
		ЗакрытиеГода(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей Тогда
		
		ВнеоборотныеАктивыЛокализация.ПризнаниеВНУАрендныхПлатежей(
			СтруктураШапкиДокумента, МенеджерВременныхТаблицДляОтраженияВРеглУчете, Движения, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности Тогда
		
		РасчетКурсовыхРазницФО(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РеклассификацияДолгосрочныхАктивовОбязательств Тогда
		
		РеклассификацияДолгосрочныхАктивовОбязательств(СтруктураШапкиДокумента, МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляФормированияЗаданияКЗакрытиюМесяцаПередЗаписью()
	
	ДополнительныеСвойства.Вставить("ДанныеТаблиц",
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		ИмяТаблицы = "РегламентнаяОперацияРасчетНалогаНаИмуществоИзменение";
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		ИмяТаблицы = "РегламентнаяОперацияРасчетЗемельногоНалогаИзменение";
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		ИмяТаблицы = "РегламентнаяОперацияРасчетТранспортногоНалогаИзменение";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаПередЗаписью.Дата, МЕСЯЦ) КАК Период,
	|	ТаблицаПередЗаписью.Организация КАК Организация,
	|	ИСТИНА                   КАК ОтражатьВРеглУчете,
	|	ЛОЖЬ                     КАК ОтражатьВУпрУчете,
	|	&Ссылка КАК Документ
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ТаблицаПередЗаписью
	|ГДЕ
	|	ТаблицаПередЗаписью.Ссылка = &Ссылка
	|	И ТаблицаПередЗаписью.Проведен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДополнительныеСвойства.ДанныеТаблиц.Вставить(ИмяТаблицы, Выборка.Количество > 0);
	
КонецПроцедуры

#Область СервисныеПроцедуры

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если проведение документа вызывается из механизма расчета партий, то установим служебное доп. свойство в движениях документа.
	// Это нужно для того, чтобы при восстановлении движений документа не изменялся регистр заданий к расчету.
	Если ДополнительныеСвойства.Свойство(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта()) Тогда
		Для Каждого ТекущийНабор Из Движения Цикл
			ТекущийНабор.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если СвойстваДокумента.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ОтменаПроведения    = СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	
	// Установим свойств набора записей РБ
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("РассчитатьСуммыУУ", Истина);
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц
		ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("РассчитатьСуммыФО", Истина);
	КонецЕсли;
	
	ДляПоследующегоПроведения = Ложь;
	ДополнительныеСвойства.Свойство("ОчисткаДляПоследующегоПроведения", ДляПоследующегоПроведения);
	
	ОперацииОтносящиесяКФинРезультату = Новый Массив;
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности);
	ОперацииОтносящиесяКФинРезультату.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
	Если Не Отказ И (ОперацииОтносящиесяКФинРезультату.Найти(ТипОперации) = Неопределено ИЛИ ОтменаПроведения)
		И ДляПоследующегоПроведения <> Истина Тогда
		Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("ПроверкаИзмененияРегистра", Истина);
	КонецЕсли;
	
	// Если перепроводим документ методом РассчитатьРегламентныеОперации (см. модуль менеджера),
	// то для операции признания расходов по УСН ставим специальные отметки для регистров УСН:
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН И ОтменаПроведения Тогда
		
		УчетУСНПСНСервер.УстановитьСлужебноеСвойствоДляРегистровУСН(Движения);
		
		Если ДляПоследующегоПроведения <> Истина Тогда
			
			Параметры = Новый Структура("НачДата, КонДата, Организация, ТипОперации", НачалоМесяца(Дата), КонецМесяца(Дата), Организация, ТипОперации);
			УчетУСНПСНСервер.ОчиститьДвиженияРегистровУСНЗаУказанныйПериод(Параметры);
			УчетУСНПСНСервер.ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Дата, Организация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОтменаПроведения Тогда
		ПроведениеДокументов.ОчиститьДвиженияДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДублиДокументов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериодаПериода
	|	И ДанныеДокумента.Ссылка.ТипОперации = &ТипОперации
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.Организация = &Организация");
	
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериодаПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Ссылка",              Ссылка);
	Запрос.УстановитьПараметр("ТипОперации",         ТипОперации);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ШаблонТекста = НСтр("ru = 'За %1 уже есть проведенный документ ""Регламентная операция - %2"" для организации %3';
							|en = 'There is posted document ""Period-end operation - %2"" for the %3 company for %1'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				Формат(Дата, "ДФ='ММММ гггг ""г.""'"),
				ТипОперации,
				Выборка.Организация);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Дата", "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаданияКРасчетуНалоговПриОтменеПроведения()

	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.ПериодРасчетаНалогаНаИмущество(Организация, Дата);
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество);
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.ПериодРасчетаЗемельногоНалога(Организация, Дата);
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога);
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.ПериодРасчетаТранспортногоНалога(Организация, Дата);
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога);
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУАрендныхПлатежей Тогда
		
		ПериодРасчета = ВнеоборотныеАктивыЛокализация.СледующийПериодПризнанияВНУАрендныхПлатежей(Организация, НачалоМесяца(Дата));
		Если ПериодРасчета <> Неопределено Тогда
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
				ПериодРасчета, Ссылка, Организация, Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеАрендныхПлатежей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыРасчета = Новый Структура("СписокОшибок", Новый Массив);
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	ТаблицыНачислениеНалога = РасчетИмущественныхНалогов.ПодготовитьТаблицыРасчетНалога(
								ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов, 
								Отказ,
								ДополнительныеПараметрыРасчета);
	
	ДополнительныеСвойства.Вставить("СписокОшибок", ДополнительныеПараметрыРасчета.СписокОшибок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетИмущественныхНалогов.СформироватьДвиженияРасчетНалога(
		ТаблицыНачислениеНалога,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		Движения,
		Отказ);
		
	УчетУСНПСНСервер.СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
		ТаблицыНачислениеНалога.ТаблицаРасходыНаПлатон,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		ЭтотОбъект,
		Отказ);
	
	ДополнительныеСвойства.Вставить("КоличествоОбработанныхДанных", ТаблицыНачислениеНалога.ТаблицаСправкиРасчета.Количество());
	
КонецПроцедуры
	
Процедура РасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетТорговогоСбора(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ГоловноеПодразделение <> СтруктураШапкиДокумента.Организация Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицыНачислениеСбора = ТорговыйСборПереопределяемый.ПодготовитьТаблицыРасчета(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетТорговогоСбора, Отказ);
	
	Если Отказ ИЛИ ТаблицыНачислениеСбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ТорговыйСборПереопределяемый.СформироватьДвиженияРасчета(
		ТаблицыНачислениеСбора,
		Движения,
		Отказ);
	
КонецПроцедуры

// Расчет долей списания косвенных расходов

Процедура РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, ТранспортныеРасходы, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеРасчетаДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Период = СтруктураШапкиДокумента.КонДата;
	
	ДолиСписанияКосвенныхРасходов = Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	РасчетНормированияРасходов = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	
	РассчетныеДоли = НалоговыйУчет.ДолиСписанияРасходов(Период, Организация, РасчетНормированияРасходов, ТранспортныеРасходы);
	ЗаполнитьЗначенияСвойств(ДолиСписанияКосвенныхРасходов.Добавить(), РассчетныеДоли);
	
	Если ТранспортныеРасходы Тогда
		СтруктураШапкиДокумента.Вставить("ДоляСписанияТранспортныхРасходов", РассчетныеДоли.ДоляТранспортныхРасходов);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ДолиСписанияКосвенныхРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей, 
		"ДолиСписанияКосвенныхРасходов",
		Истина,
		"Организация, Период",
		"ДоляРасходовНаРекламу, ДоляРасходовНаДобровольноеСтрахованиеЖизни, ДоляРасходовНаДобровольноеМедицинскоеСтрахование, ДоляПредставительскихРасходов, ДоляЕНВД, ДоляТранспортныхРасходов, ДоляРасходовНаВозмещениеПроцентовРаботникам, ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев, ДоляРезервовПоСомнительнымДолгамНУ");
	
	Для каждого СтрокаДолиСписания Из Движения.ДолиСписанияКосвенныхРасходов Цикл
		СтрокаДолиСписания.НовыйАлгоритмСписания = Истина;
	КонецЦикла;
	
	Если Не ТранспортныеРасходы Тогда
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			РасчетНормированияРасходов,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей,
			"РасчетНормированияРасходов",
			Истина,
			"Организация, ВидОперации, СуммаБазы",
			"РасходыМесяц, РазницыМесяц, ЗатратыГод, РасходыГод, РазницыГод");
	КонецЕсли;
	
КонецПроцедуры

// Переоценка валютных средств

Процедура РасчетКурсовыхРазницРегл(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.РасчетКурсовыхРазниц(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

Процедура РасчетКурсовыхРазницФО(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.РасчетКурсовыхРазницФО(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

// Определение финансового результата

Процедура ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91[0];
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ПроводкиЗакрытиеСчета90 = ЗакрытиеМесяца.ПроводкиЗакрытиеСчета90(Реквизиты.Период, Реквизиты.Организация);
	
	ПроводкиЗакрытиеСчета91 = ЗакрытиеМесяца.ПодготовитьТаблицыЗакрытиеСчета91(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91,
		СтруктураШапкиДокумента.СписокОрганизаций, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(
		Движения,
		ПроводкиЗакрытиеСчета90,
		Реквизиты.Период,
		Реквизиты.Организация);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(
		Движения,
		ПроводкиЗакрытиеСчета91,
		Реквизиты.Период,
		Реквизиты.Организация);
	
КонецПроцедуры

Процедура ОкруглениеСуммНДС(СтруктураШапкиДокумента)
	
	Если УчетНДС.ПолучитьПорядокОкругленияНДС(СтруктураШапкиДокумента.Дата) <> 2 
		ИЛИ Месяц(СтруктураШапкиДокумента.Дата) <> Месяц(КонецКвартала(СтруктураШапкиДокумента.Дата)) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыОкругленияНДС(СтруктураШапкиДокумента);
	
	ЗакрытиеМесяца.СформироватьДвиженияПоОкруглениюНДС(
		ПараметрыПроведения.ТаблицаРеквизитыОкруглениеНДС,
		СтруктураШапкиДокумента.СписокОрганизаций, Движения);
	
КонецПроцедуры	

Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыСписаниеУбытков(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаУбытков = ЗакрытиеМесяца.ПодготовитьТаблицуУбытков(ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков,
		ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Движения, Отказ);
	
	// ПЕРЕНОС УБЫТКА НА БУДУЩЕЕ
	
	Если КонецГода(СтруктураШапкиДокумента.КонДата) <> СтруктураШапкиДокумента.КонДата Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеЗакрытияГода(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗакрытия = ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода;
	ТаблицаДвижений = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие99Реформация(ТаблицаЗакрытия, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяца.СформироватьДвиженияПереносУбыткаНаБудущее(
		ТаблицаДвижений,
		ТаблицаЗакрытия,
		Движения,
		Отказ);
	
КонецПроцедуры // СписаниеУбытковПрошлыхЛет()

Процедура СписаниеКосвенныхРасходов(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = ЗакрытиеМесяца.КонтекстСписаниеКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаДанных = НалоговыйУчет.ПолучитьРасчетСписанияКосвенныхРасходов(ПараметрыПроведения, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияСписаниеКосвенныхРасходов(ТаблицаДанных, ПараметрыПроведения, Движения, Отказ);
	
КонецПроцедуры // СписаниеКосвенныхРасходов()

// Расчет налога на прибыль (ПБУ 18/02)

Процедура ВыполнитьРасчетНалогаНаПрибыльСЗамеромВремени(СтруктураШапкиДокумента, Отказ)
	
	КоличествоОбрабатываемыхДанных = 0;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РегламентированныйУчет.РасчетНалогаНаПрибыль");
	
	ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, КоличествоОбрабатываемыхДанных);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбрабатываемыхДанных);
	
КонецПроцедуры

Процедура ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, КоличествоОбрабатываемыхДанных)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеРасчетаНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Период         = ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].Период;
	Организации    = СтруктураШапкиДокумента.СписокОрганизаций;
	
	КонтекстРасчета = РасчетНалогаНаПрибыль.НовыйКонтекстРасчета(
						СтруктураШапкиДокумента.Организация,
						СтруктураШапкиДокумента.КонДата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ПараметрыПБУ18 = УчетнаяПолитика.ПараметрыПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаДолейБазыНалогаНаПрибыль = НалоговыйУчетОбособленныхПодразделений.ПодготовитьТаблицуРасчетДолейБазыНалогаНаПрибыль(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		Организации);
	
	// Проводки по начислению налога на прибыль
	СуммыНалога = РасчетНалогаНаПрибыль.НачислитьНалогНаПрибыль(
		Движения,
		КонтекстРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		ТаблицаДолейБазыНалогаНаПрибыль);
	
	ОбщаяСуммаНалога = СуммыНалога.Проводки;
	
	Если ТаблицаДолейБазыНалогаНаПрибыль <> Неопределено Тогда
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			ТаблицаДолейБазыНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетДолейБазыНалогаНаПрибыль",
			Истина,
			"Организация, РегистрацияВНалоговомОргане, ДоляНалоговойБазы",
			"РасходыПоОплатеТруда,СреднесписочнаяЧисленность,СтоимостьАмортизируемогоИмущества,СтоимостьОСПрошлыхМесяцев,СтоимостьОССледующегоМесяца");
		
	КонецЕсли;
	
	// РАСЧЕТ НАЛОГА В СООТВЕТСТВИИ С ПБУ 18
	
	// При балансовом методе расчет выполняется в ходе отдельной регламентной операции - РасчетОтложенногоНалога
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
		// Средняя ставка налога на прибыль за месяц (имеет смысл, если налог уплачивается по разным ставкам).
		ПрименяютсяРазныеСтавкиНалогаНаПрибыль = 
			(ТаблицаДолейБазыНалогаНаПрибыль <> Неопределено                         // Налог уплачивается в разные регионы
			И ПолучитьФункциональнуюОпцию("ПрименяютсяРазныеСтавкиНалогаНаПрибыль"));// И пользователь установил, что в разных регионах могут быть разные ставки
		
		НалоговаяБазаОбщая = 0;
		
		Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
			// В случае признания убытков расчетная ставка определяется по предыдущему месяцу
			Если ОбщаяСуммаНалога = 0 Тогда
				НалоговаяБазаЗаМесяц = 0;
				РасчетнаяСтавкаНалогаЗаМесяц = НалоговыйУчетОбособленныхПодразделений.ПолучитьРасчетнуюСтавкуНалогаНаПрибыль(
						Организация, 
						НачалоМесяца(Период)-1);
			Иначе  
					// В случае признания прибыли расчетная ставка текущего месяца определяется по формуле:
				    // налог на прибыль НУ / прибыль по данным БУ , все показатели по данным текущего месяца.

				НалоговаяБазаЗаМесяц = РасчетНалогаНаПрибыль.НалоговаяБаза(     
						НачалоМесяца(Период), 
						КонецМесяца(Период), 
						Организация);
				НалоговаяБазаЗаГод = РасчетНалогаНаПрибыль.НалоговаяБаза(
						НачалоГода(Период), 
						КонецМесяца(Период), 
						Организация);
				// Если в прошлом периоде по итогам с начала года был убыток, а в текущем - прибыль,
				// то налог на прибыль по данным НУ, рассчитанный на текущий месяц, соответствует налогу на прибыль за год,
				// следовательно база берется за год.
				НалоговаяБазаОбщая = ?(НалоговаяБазаЗаГод < НалоговаяБазаЗаМесяц,НалоговаяБазаЗаГод,НалоговаяБазаЗаМесяц);  	
				РасчетнаяСтавкаНалогаЗаМесяц = ?(НалоговаяБазаОбщая = 0, 0, ОбщаяСуммаНалога / НалоговаяБазаОбщая);
				
			КонецЕсли;
			
			// Эта ставка далее 
			// 1. используется в РассчитатьОНО_ОНА() и РассчитатьОНАПоУбыткамТекущегоПериода().
			СтруктураШапкиДокумента.Вставить("СтавкаНалогаНаПрибыль", РасчетнаяСтавкаНалогаЗаМесяц);
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].СтавкаНалогаНаПрибыль = РасчетнаяСтавкаНалогаЗаМесяц;
			// 2. записывается в справку-расчет
			РасчетСреднейСтавки = НалоговыйУчет.ПодготовитьТаблицуРасчетСтавокНалогаНаПрибыль(Отказ);
			СтрокаРасчета = РасчетСреднейСтавки.Добавить();
			СтрокаРасчета.Ставка      = РасчетнаяСтавкаНалогаЗаМесяц * 100;
			СтрокаРасчета.СуммаНалога = ОбщаяСуммаНалога;
			СтрокаРасчета.СуммаБазы   = НалоговаяБазаОбщая;
			
		КонецЕсли;
		
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
		// Проводки по начислению условного дохода (расхода) по налогу на прибыль
	
		// Налог на прибыль
		ТаблицаРасчетНалогаНаПрибыль = РасчетНалогаНаПрибыль.ПодготовитьТаблицуРасчетНалогаНаПрибыль(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ);
		
		// Постоянные разницы
		СтруктураТаблицПостоянныхРазниц = РасчетНалогаНаПрибыль.ПодготовитьТаблицуРасчетПостоянныхРазниц(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций,
			Отказ,
			КоличествоОбрабатываемыхДанных);
			
		ТаблицаРасчетПостоянныхРазниц                           = СтруктураТаблицПостоянныхРазниц.ТаблицаРасчетПостоянныхРазниц;
		ТаблицаПостоянныхРазницВОценкеАктивовИОбязательств      = СтруктураТаблицПостоянныхРазниц.ТаблицаРазницВОценкеАктивовИОбязательств;
		ТаблицаСтоимостиПостоянныхНалоговыхАктивовИОбязательств = СтруктураТаблицПостоянныхРазниц.ТаблицаСтоимостиНалоговыхАктивовИОбязательств;
		
		// Временные разницы
		СтруктураТаблицВременныхРазниц = РасчетНалогаНаПрибыль.РассчитатьВременныеРазницы(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ,
			КоличествоОбрабатываемыхДанных);
			
		ТаблицаРасчетВременныхРазниц                           = СтруктураТаблицВременныхРазниц.ТаблицаРасчетВременныхРазниц;
		ТаблицаВременныхРазницВОценкеАктивовИОбязательств      = СтруктураТаблицВременныхРазниц.ТаблицаРазницВОценкеАктивовИОбязательств;
		ТаблицаСтоимостиВременныхНалоговыхАктивовИОбязательств = СтруктураТаблицВременныхРазниц.ТаблицаСтоимостиНалоговыхАктивовИОбязательств;
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаПостоянныхРазницВОценкеАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетРазницВОценкеАктивовИОбязательств");
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаСтоимостиПостоянныхНалоговыхАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетСтоимостиНалоговыхАктивовИОбязательств");
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаВременныхРазницВОценкеАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетРазницВОценкеАктивовИОбязательств");
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения, 
			ТаблицаСтоимостиВременныхНалоговыхАктивовИОбязательств, 
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетСтоимостиНалоговыхАктивовИОбязательств");
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетВременныхРазниц,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
			
		РасчетНалогаНаПрибыль.ДобавитьПроводкуСписанияОтклоненийПриОкругленииНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц,
			ТаблицаРасчетВременныхРазниц,
			ТаблицаРасчетНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			ОбщаяСуммаНалога, 
			Движения, 
			Отказ);
		
		// Справки расчеты по распределению налога между налоговыми органами
		
		Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
			
			ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
				Движения,
				РасчетСреднейСтавки,
				ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
				"РасчетСтавкиНалогаНаПрибыльЗаМесяц",
				Истина,
				"Организация,Ставка,СуммаНалога,СуммаБазы",
				"");
			
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		НалоговыйУчетОбособленныхПодразделений.ПроведениеПересчетаОНАиОНОКаждыйМесяц(СтруктураШапкиДокумента, Движения, Отказ);
		
	КонецЕсли;
	
	Для каждого Проводка Из Движения.Хозрасчетный Цикл
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Проводка.Организация);
			Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Проводка.Организация);;
			Проводка.ВалютнаяСуммаКт = Проводка.Сумма;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРегистрацииВНалоговыхОрганах(Отказ)
	
	Если ТипОперации <> Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.РегистрацияВНалоговомОргане КАК НалоговыйОрган
	|ПОМЕСТИТЬ РегистрацииВНалоговыхОрганах
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|	И НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Ссылка = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Родитель = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Родитель.Родитель = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрации.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО (Подразделения.Родитель.Родитель.Родитель = Регистрации.Подразделение)
	|ГДЕ
	|	Регистрации.Организация В(&СписокОрганизаций)
	|	И НЕ Подразделения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговыхОрганах.Организация,
	|	РегистрацииВНалоговыхОрганах.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	РегистрацииВНалоговыхОрганах.НалоговыйОрган
	|ИЗ
	|	РегистрацииВНалоговыхОрганах КАК РегистрацииВНалоговыхОрганах
	|ГДЕ
	|	(РегистрацииВНалоговыхОрганах.НалоговыйОрган ЕСТЬ NULL 
	|			ИЛИ РегистрацииВНалоговыхОрганах.НалоговыйОрган = 
	|									ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", НалоговыйУчет.ВсяОрганизация(Организация));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = НСтр("ru = 'Для %Организация% %ОбособленноеПодразделение% не указана регистрация в налоговом органе.';
								|en = 'Registration with tax authority is not specified for %Организация% %ОбособленноеПодразделение%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", Выборка.Организация);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОбособленноеПодразделение%", 
					?(Выборка.ОбособленноеПодразделение, НСтр("ru = '(обособленное подразделение)';
																|en = '(branch office)'"), ""));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Организация", "Объект", Отказ);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет налога на прибыль';
											|en = 'Corporate profit tax calculation'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Закрытие года

Процедура ЗакрытиеГода(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьДанныеЗакрытияГода(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеПеречетаОНАиОНО(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Хозрасчетный.Модифицированность() Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	ПроведениеРеформацииБаланса(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Ложь;
	Движения.Хозрасчетный.Записать(Ложь);
	
	ТаблицаПрочиеРасходы = ПараметрыПроведения.ТаблицаПрочиеРасходы;
	
	Если Не ТаблицаПрочиеРасходы.Количество() = 0 Тогда
		ОбщегоНазначенияУТ.ДобавитьИдентификаторыВТаблицуЗначений(ТаблицаПрочиеРасходы);
		Движения.ПрочиеРасходы.Загрузить(ТаблицаПрочиеРасходы);
		Движения.ПрочиеРасходы.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроведениеПеречетаОНАиОНО(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ)
	
	Если НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(
			СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация) <> 
		Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
		// При балансовом методе оценка отложенного налога выполняется по ставке следующего налогового периода,
		// поэтому пересчет при реформации баланса не требуется.
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаОНАОНО = ЗакрытиеМесяца.ПодготовитьТаблицуПересчетОНАиОНО(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		СтруктураШапкиДокумента.СписокОрганизаций,
		Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ТаблицаОНАОНО,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		"РасчетСтоимостиНалоговыхАктивовИОбязательствПослеИзмененияСтавкиНалогаНаПрибыль");
	
	ЗакрытиеМесяца.СформироватьДвиженияуПересчетОНАиОНО(
		ТаблицаОНАОНО,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Движения,
		Отказ);
	
КонецПроцедуры

Процедура ПроведениеРеформацииБаланса(ПараметрыПроведения, СтруктураШапкиДокумента, Отказ)
	
	ТаблицаЗакрытия = ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода;
	ТаблицыДвижений = Новый Массив;
	
	// Подготовка проведения по данным информационноя базы
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие99Реформация(ТаблицаЗакрытия, Отказ));
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие90БУ(ТаблицаЗакрытия, Отказ));
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие91БУ(ТаблицаЗакрытия, Отказ));
	
	// Закрытие счетов в НУ
	ТаблицыДвижений.Добавить(ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытиеСчетаНЕ(ТаблицаЗакрытия, Отказ));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений
	Для Каждого ТаблицаДвижений Из ТаблицыДвижений Цикл
		
		ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(
			ТаблицаДвижений,
			ТаблицаЗакрытия,
			Движения,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#Область УСН

// Признание расходов
Процедура ВыполнитьПризнаниеРасходовПриУСН(СтруктураШапкиДокумента, Отказ)
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		УчетУСНПСНСервер.ПризнатьРасходы(СтруктураШапкиДокумента, Движения);
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование КУДиР.Признание расходов.';
										|en = 'LIE generation. Expense recognition.'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УчетУСНПСНСервер.ОтразитьРасходыКУДиР(СтруктураШапкиДокумента, Движения, Отказ);
	
	МенеджерВТ = ПроведениеДокументов.МенеджерВременныхТаблицКонтроля(ЭтотОбъект);
	Если Не Отказ Тогда
		Для каждого НаборЗаписей Из Движения Цикл
			Если НаборЗаписей.Количество() Тогда
				ПроведениеДокументов.УстановитьДопСвойстваРегистра(НаборЗаписей, ЭтотОбъект, МенеджерВТ);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Расчет налога
Процедура ВыполнитьРасчетНалогаПриУСН(СтруктураШапкиДокумента, Отказ)
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата) Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаУСН(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстРасчета = УчетУСНПСНСервер.НовыйКонтекстРасчетаНалога(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "УчетПоУСН.РасчетНалогаПриУСН";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ДанныеРасчета = УчетУСНПСНСервер.ПодготовитьРасчетНалога(КонтекстРасчета);
		
	КоличествоОбработанныхДанных = ДанныеРасчета.ТаблицаПрочиеАктивыПассивы.Количество()
		+ ДанныеРасчета.ТаблицаПроводок.Количество() + ДанныеРасчета.ТаблицаСправкиРасчета.Количество()
		+ ДанныеРасчета.ТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы.Количество();
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетУСНПСНСервер.СформироватьДвиженияНачислениеНалогаУСН(
		ДанныеРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыНалогУСН,
		Движения,
		Отказ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхДанных);
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьРасчетОтложенногоНалога(СтруктураШапкиДокумента, Отказ)

	// ОТЛОЖЕННЫЙ НАЛОГ НА ПРИБЫЛЬ
		
	// Инициализация
	
	// Основной алгоритм расчета опирается на оценку отложенных налогов на начало периода,
	// выполненную предыдущими регламентными операциями и записанную в служебные регистры.
	// Если в служебных регистрах такая информация отсутствует, то требуется ее записать - инициализировать расчет.
	// Такое может быть при первом выполнении после изменения учетной политики, а также, если по каким-то причинам
	// регламентные операции за отдельные месяцы были пропущены.
	//
	// После инициализации выполняется оценка на отчетную дату (конец периода) в общем порядке,
	// обращающаяся к только что записанным данным.
	//
	// Алгоритм инициализации отличается от общего алгоритма (на отчетную дату) следующими моментами:
	// - ставка налога может определяться исходя из соотношения фактически отраженных сумм на счетах 09 и 77
	//   и временных разниц;
	// - при инициализации не формируются проводки, поэтому погрешности округления нивелируются так,
	//   чтобы общая сумма по виду отложенных активов или обязательств точно соответствовала суммам на счетах;
	// - записи о временных разницах и суммах отложенного налога, которые заведомо не соответствуют друг-другу игнорируются.
	
	НалогНаПрибыльБухгалтерскийУчет.ИнициализироватьРасчетОтложенногоНалога(
		Движения,
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация);
		
	ИменаРегистровИнициализации = Новый Массив;
	ИменаРегистровИнициализации.Добавить("РасчетОтложенногоНалога");
	ИменаРегистровИнициализации.Добавить("ПримененныеСтавкиОтложенногоНалога");
	
	ИнициализированныеРегистры = Новый Массив;
	
	Для Каждого ИмяРегистра Из ИменаРегистровИнициализации Цикл
		
		НаборЗаписей = Движения[ИмяРегистра];
		Если Не НаборЗаписей.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		ИнициализированныеРегистры.Добавить(НаборЗаписей);
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
	// Основные действия
	НалогНаПрибыльБухгалтерскийУчет.ОтразитьПоследствияНачисленияНалога(
		Движения,
		СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Ссылка);
		
	Для Каждого НаборЗаписей Из ИнициализированныеРегистры Цикл
		
		Если Не НаборЗаписей.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		// Запишем принудительно в режиме дополнения, чтобы не потерять ранее записанные записи.
		НаборЗаписей.Записать(Ложь);
		НаборЗаписей.Записывать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

#Область РеклассификацияДолгосрочныхАктивовОбязательств

Процедура РеклассификацияДолгосрочныхАктивовОбязательств(СтруктураШапкиДокумента, МенеджерВременныхТаблицДляОтраженияВРеглУчете, Отказ)
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета",
		Организация,
		СтруктураШапкиДокумента.КонДата);
	
	Если ПараметрыУчетнойПолитики = Неопределено
		ИЛИ НЕ ПараметрыУчетнойПолитики.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
		Возврат;
	КонецЕсли;

	Если МенеджерВременныхТаблицДляОтраженияВРеглУчете = Неопределено Тогда
		МенеджерВременныхТаблицДляОтраженияВРеглУчете = Новый МенеджерВременныхТаблиц;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРеклассификация();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДляОтраженияВРеглУчете;
	Запрос.УстановитьПараметр("НачПериода", ДобавитьМесяц(СтруктураШапкиДокумента.НачДата, ПараметрыУчетнойПолитики.ДлительностьОперационногоЦикла));
	Запрос.УстановитьПараметр("КонПериода", ДобавитьМесяц(СтруктураШапкиДокумента.КонДата, ПараметрыУчетнойПолитики.ДлительностьОперационногоЦикла));
	Запрос.УстановитьПараметр("НачТекПериода", СтруктураШапкиДокумента.НачДата);
	Запрос.УстановитьПараметр("КонТекПериода", СтруктураШапкиДокумента.КонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.КонГраница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДлительностьЦикла", ПараметрыУчетнойПолитики.ДлительностьОперационногоЦикла);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаРеклассификация()
	
	ТекстыЗапроса = Новый Массив;
	
#Область ДоговорыАренды

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Ссылка,
	|	ДоговорыАренды.Контрагент КАК Контрагент,
	|	ДоговорыАренды.ВалютаВзаиморасчетов КАК Валюта,
	|	ДоговорыАренды.ГруппаФинансовогоУчета,
	|	ДоговорыАренды.НаправлениеДеятельности,
	|	ДоговорыАренды.Подразделение
	|ПОМЕСТИТЬ втДоговорыАренды
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	ДоговорыАренды.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор,
	|	МАКСИМУМ(УсловияДоговоровАренды.Период) КАК Период
	|ПОМЕСТИТЬ втУсловияДоговоровАренды
	|ИЗ
	|	(ВЫБРАТЬ
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор КАК Договор,
	|		МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(УсловияДоговоровАрендыНеДействует.Период, ДЕНЬ, -1), &КонПериода)) КАК Период
	|	ИЗ
	|		РегистрСведений.УсловияДоговоровАренды.СрезПоследних(&НачТекПериода, Договор В
	|			(ВЫБРАТЬ
	|				втДоговоры.Ссылка
	|			ИЗ
	|				втДоговорыАренды КАК втДоговоры)) КАК УсловияДоговоровАренды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|			ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|			И УсловияДоговоровАрендыНеДействует.Период >= &НачТекПериода
	|			И УсловияДоговоровАрендыНеДействует.Период <= &КонТекПериода
	|			И УсловияДоговоровАрендыНеДействует.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Закрыт)
	|			И УсловияДоговоровАрендыНеДействует.Активность
	|	ГДЕ
	|		УсловияДоговоровАренды.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|	СГРУППИРОВАТЬ ПО
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор КАК Договор,
	|		МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(УсловияДоговоровАрендыНеДействует.Период, ДЕНЬ, -1), &КонПериода))
	|	ИЗ
	|		РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|			ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|			И УсловияДоговоровАрендыНеДействует.Период > УсловияДоговоровАренды.Период
	|			И УсловияДоговоровАрендыНеДействует.Период <= &КонТекПериода
	|			И УсловияДоговоровАрендыНеДействует.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Закрыт)
	|			И УсловияДоговоровАрендыНеДействует.Активность
	|	ГДЕ
	|		УсловияДоговоровАренды.Период МЕЖДУ &НачТекПериода И &КонТекПериода
	|		И УсловияДоговоровАренды.Договор В
	|			(ВЫБРАТЬ
	|				втДоговоры.Ссылка
	|			ИЗ
	|				втДоговорыАренды КАК втДоговоры)
	|		И УсловияДоговоровАренды.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|		И УсловияДоговоровАренды.Активность
	|	СГРУППИРОВАТЬ ПО
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор) КАК УсловияДоговоровАренды
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора,
	|	Договор";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти

#Область вт_ЗадолженностьПоКредитамИДепозитам
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
	|	ДоговорыКредитовИДепозитов.Контрагент КАК Контрагент,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов КАК Валюта,
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора,
	|	ДоговорыКредитовИДепозитов.ГруппаФинансовогоУчета,
	|	ДоговорыКредитовИДепозитов.НаправлениеДеятельности,
	|	ДоговорыКредитовИДепозитов.Подразделение,
	|	ДоговорыКредитовИДепозитов.ТипДоговора,
	|	ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента
	|
	|ПОМЕСТИТЬ вт_ДоговорыКредитовИДепозитовВыданные
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|ГДЕ
	|	ДоговорыКредитовИДепозитов.Организация = &Организация
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора В
	|	(ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит),
	|		ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный),
	|		ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм))
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.Договор КАК Договор,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.ТипСуммы КАК ТипСуммы,
	|	ВЫБОР
	|		КОГДА Расчеты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА Расчеты.СуммаПриход
	|		ИНАЧЕ Расчеты.СуммаРасход
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ вт_ПоступлениеСредств
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Обороты(, &КонГраница,, Договор В
	|		(ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			вт_ДоговорыКредитовИДепозитовВыданные КАК Т)) КАК Расчеты
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Расчеты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА Расчеты.СуммаПриход
	|		ИНАЧЕ Расчеты.СуммаРасход
	|	КОНЕЦ > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор,
	|	Валюта,
	|	ТипСуммы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_ДоговорыКредитовИДепозитовВыданные.Ссылка КАК Договор,
	|	вт_ДоговорыКредитовИДепозитовВыданные.Контрагент КАК Контрагент,
	|	вт_ДоговорыКредитовИДепозитовВыданные.Валюта,
	|	вт_ДоговорыКредитовИДепозитовВыданные.ХарактерДоговора,
	|	вт_ДоговорыКредитовИДепозитовВыданные.ГруппаФинансовогоУчета,
	|	вт_ДоговорыКредитовИДепозитовВыданные.НаправлениеДеятельности,
	|	вт_ДоговорыКредитовИДепозитовВыданные.Подразделение,
	|	вт_ДоговорыКредитовИДепозитовВыданные.ТипДоговора,
	|	вт_ДоговорыКредитовИДепозитовВыданные.БанковскийСчетКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) КАК ТипСуммы,
	|	График.Период КАК ДатаВозникновенияЗадолженности,
	|	ВЫБОР
	|		КОГДА График.СуммаИтог - График.Сумма - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0) < 0
	|			ТОГДА График.СуммаИтог - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0)
	|		ИНАЧЕ График.Сумма
	|	КОНЕЦ КАК СуммаЗадолженности
	|ПОМЕСТИТЬ вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ДоговорыКредитовИДепозитовВыданные КАК вт_ДоговорыКредитовИДепозитовВыданные
	|		ПО График.ВариантГрафика.Владелец = вт_ДоговорыКредитовИДепозитовВыданные.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПоступлениеСредств КАК вт_ПоступлениеСредств
	|		ПО вт_ПоступлениеСредств.Договор = вт_ДоговорыКредитовИДепозитовВыданные.Ссылка
	|		И вт_ПоступлениеСредств.Валюта = вт_ДоговорыКредитовИДепозитовВыданные.Валюта
	|		И вт_ПоступлениеСредств.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|ГДЕ
	|	График.Период МЕЖДУ &НачПериода И &КонПериода
	|	И График.ВариантГрафика.Используется
	|	И НЕ График.ВариантГрафика.ПометкаУдаления
	|	И (График.ВариантГрафика.ДатаПервогоТранша <= &КонТекПериода)
	|	И График.Сумма > 0
	|	И График.СуммаИтог - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ДоговорыКредитовИДепозитовВыданные
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПоступлениеСредств";
	#Область УХ_ГрафикиФИ
	ВстраиваниеУХ.РегламентнаяОперация_ДоработатьЗапрос(ТекстЗапроса);			
	#КонецОбласти
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти

#Область КурсыВалют

	// Получим курсы валют на каждую дату платежа
	// по валюте взаиморасчетов и валюте регламентированного учета.
	ТекстЗапросаКурсыВалют =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.ДатаВозникновенияЗадолженности КАК Период,
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.Валюта КАК Валюта
	|ПОМЕСТИТЬ вт_ПериодыВалют
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.ДатаВозникновенияЗадолженности,
	|	&ВалютаРеглУчета
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.ДатаВозникновенияЗадолженности,
	|	&ВалютаУпрУчета
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУсловияДоговоровАренды.Период,
	|	втДоговоры.Валюта
	|ИЗ
	|	втДоговорыАренды КАК втДоговоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|		ПО втДоговоры.ссылка = втУсловияДоговоровАренды.Договор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУсловияДоговоровАренды.Период,
	|	&ВалютаУпрУчета
	|ИЗ
	|	втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУсловияДоговоровАренды.Период,
	|	&ВалютаРеглУчета
	|ИЗ
	|	втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ПериодыВалют.Период КАК Период,
	|	вт_ПериодыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ вт_ПериодыКурсов
	|ИЗ
	|	вт_ПериодыВалют КАК вт_ПериодыВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО вт_ПериодыВалют.Валюта = КурсыВалют.Валюта
	|			И КурсыВалют.БазоваяВалюта = &ВалютаРеглУчета
	|			И вт_ПериодыВалют.Период >= КурсыВалют.Период
	|СГРУППИРОВАТЬ ПО
	|	вт_ПериодыВалют.Период,
	|	вт_ПериодыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	ПериодКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ПериодыКурсов.Период КАК Период,
	|	вт_ПериодыКурсов.Валюта КАК Валюта,
	|	КурсыВалют.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ вт_КурсыВалют
	|ИЗ
	|	вт_ПериодыКурсов КАК вт_ПериодыКурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО вт_ПериодыКурсов.Валюта = КурсыВалют.Валюта
	|			И КурсыВалют.БазоваяВалюта = &ВалютаРеглУчета
	|			И вт_ПериодыКурсов.ПериодКурса = КурсыВалют.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПериодыВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПериодыКурсов";
	
	ТекстыЗапроса.Добавить(ТекстЗапросаКурсыВалют);
	
#КонецОбласти

#Область РасчетыПоКредитамИДепозитам

	ТекстЗапроса = "ВЫБРАТЬ
	|	Расчеты.Контрагент КАК Контрагент,
	|	Расчеты.Договор КАК Договор,
	|	Расчеты.ХарактерДоговора КАК ХарактерДоговора,
	|	Расчеты.ТипДоговора КАК ТипДоговора,
	|	Расчеты.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.Подразделение КАК Подразделение,
	|	Расчеты.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Расчеты.ТипСуммы КАК ТипСуммы,
	|	ВЫБОР
	|		КОГДА Расчеты.Валюта = &ВалютаРеглУчета
	|			ТОГДА Расчеты.СуммаЗадолженности
	|		КОГДА КурсыВалют.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА КурсыВалютРегл.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаЗадолженности
	|				* ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 0)
	|				/ ЕСТЬNULL(КурсыВалютРегл.КурсЧислитель, 0) * ЕСТЬNULL(КурсыВалютРегл.КурсЗнаменатель, 0) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Расчеты.Валюта = &ВалютаУпрУчета
	|			ТОГДА Расчеты.СуммаЗадолженности
	|		КОГДА КурсыВалют.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА КурсыВалютРегл.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаЗадолженности
	|				* ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 0)
	|				/ ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель, 0) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель, 0) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	Расчеты.СуммаЗадолженности,
	|	Расчеты.Валюта
	|
	|ПОМЕСТИТЬ вт_РеклассификацияРасчетыПоФинИнструментам
	|
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалют
	|		ПО Расчеты.Валюта = КурсыВалют.Валюта
	|		И Расчеты.ДатаВозникновенияЗадолженности = КурсыВалют.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалютРегл
	|		ПО &ВалютаРеглУчета = КурсыВалютРегл.Валюта
	|		И Расчеты.ДатаВозникновенияЗадолженности = КурсыВалютРегл.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалютУпр
	|		ПО &ВалютаУпрУчета = КурсыВалютУпр.Валюта
	|		И Расчеты.ДатаВозникновенияЗадолженности = КурсыВалютУпр.Период
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти

#Область РасчетыПоАренде

	ТекстЗапроса = "ВЫБРАТЬ
	|	График.Договор КАК Договор,
	|	СУММА(График.Проценты) КАК Сумма
	|ПОМЕСТИТЬ втПроценты
	|ИЗ
	|	втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикНачисленияПроцентовПоАренде КАК График
	|		ПО График.АктуальныеУсловияДоговора = втУсловияДоговоровАренды.АктуальныеУсловияДоговора
	|		И График.Договор = втУсловияДоговоровАренды.Договор
	|		И График.Дата >= &НачПериода
	|		И График.Дата <= втУсловияДоговоровАренды.Период
	|		И График.Проценты <> 0
	|		И График.Активность
	|СГРУППИРОВАТЬ ПО
	|	График.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.Договор КАК Договор,
	|	СУММА(График.УслугаПоАренде - График.УслугаПоАрендеНДС) КАК УслугаПоАренде
	|ПОМЕСТИТЬ втУслугиПоАренде
	|ИЗ
	|	втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатУслугПоАренде КАК График
	|		ПО График.АктуальныеУсловияДоговора = втУсловияДоговоровАренды.АктуальныеУсловияДоговора
	|		И График.Договор = втУсловияДоговоровАренды.Договор
	|		И График.Дата >= &НачПериода
	|		И График.Дата <= втУсловияДоговоровАренды.Период
	|		И График.УслугаПоАренде <> 0
	|		И График.Активность
	|СГРУППИРОВАТЬ ПО
	|	График.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоговоры.Ссылка КАК Договор,
	|	втДоговоры.Контрагент КАК Контрагент,
	|	втДоговоры.Валюта КАК Валюта,
	|	втДоговоры.ГруппаФинансовогоУчета,
	|	втДоговоры.НаправлениеДеятельности,
	|	втДоговоры.Подразделение,
	|	ЕСТЬNULL(втУслугиПоАренде.УслугаПоАренде, 0) - ЕСТЬNULL(втПроценты.Сумма, 0) КАК Сумма,
	|	ВЫБОР
	|		КОГДА втДоговоры.Валюта = &ВалютаРеглУчета
	|			ТОГДА ЕСТЬNULL(втУслугиПоАренде.УслугаПоАренде, 0) - ЕСТЬNULL(втПроценты.Сумма, 0)
	|		КОГДА КурсыВалют.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА КурсыВалютРегл.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(втУслугиПоАренде.УслугаПоАренде, 0) - ЕСТЬNULL(втПроценты.Сумма, 0)) *
	|			ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 0) /
	|			ЕСТЬNULL(КурсыВалютРегл.КурсЧислитель, 0) * ЕСТЬNULL(КурсыВалютРегл.КурсЗнаменатель, 0) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА втДоговоры.Валюта = &ВалютаУпрУчета
	|			ТОГДА ЕСТЬNULL(втУслугиПоАренде.УслугаПоАренде, 0) - ЕСТЬNULL(втПроценты.Сумма, 0)
	|		КОГДА КурсыВалют.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА КурсыВалютУпр.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(втУслугиПоАренде.УслугаПоАренде, 0) - ЕСТЬNULL(втПроценты.Сумма, 0)) *
	|			ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 0) /
	|			ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель, 0) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель, 0) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаУпр
	|ПОМЕСТИТЬ вт_РеклассификацияРасчетыПоАренде
	|ИЗ
	|	втДоговорыАренды КАК втДоговоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроценты КАК втПроценты
	|		ПО втДоговоры.Ссылка = втПроценты.Договор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУслугиПоАренде КАК втУслугиПоАренде
	|		ПО втДоговоры.Ссылка = втУслугиПоАренде.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|		ПО втДоговоры.ссылка = втУсловияДоговоровАренды.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалют
	|		ПО втДоговоры.Валюта = КурсыВалют.Валюта
	|		И втУсловияДоговоровАренды.Период = КурсыВалют.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалютРегл
	|		ПО &ВалютаРеглУчета = КурсыВалютРегл.Валюта
	|		И втУсловияДоговоровАренды.Период = КурсыВалютРегл.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалютУпр
	|		ПО &ВалютаУпрУчета = КурсыВалютУпр.Валюта
	|		И втУсловияДоговоровАренды.Период = КурсыВалютУпр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДоговорыАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втУсловияДоговоровАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПроценты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втУслугиПоАренде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_КурсыВалют";

	ТекстыЗапроса.Добавить(ТекстЗапроса);

#КонецОбласти
	
#Область АналитикаУчета
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ вт_АналитикаУчета
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти
	
#Область РасчетыСКлиентами
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	Расчеты.Валюта КАК Валюта,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	Расчеты.ДолгРеглОстаток КАК ДолгРегл,
	|	Расчеты.ДолгУпрОстаток КАК ДолгУпр,
	|	Расчеты.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
	|	Расчеты.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
	|	Расчеты.ДолгОстаток КАК Долг,
	|	Расчеты.ПредоплатаОстаток КАК Предоплата
	|ПОМЕСТИТЬ вт_РеклассификацияРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			&КонГраница,
	|			АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						Т.КлючАналитики
	|					ИЗ
	|						вт_АналитикаУчета КАК Т)
	|				И (ДатаПлановогоПогашения МЕЖДУ &НачПериода И &КонПериода)) КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Расчеты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка";

	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти
	
#Область РасчетыСПоставщиками
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	Расчеты.Валюта КАК Валюта,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ИЛИ ОбъектыРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями КАК ЭтоВозврат,
	|	Расчеты.ДолгРеглОстаток КАК ДолгРегл,
	|	Расчеты.ДолгУпрОстаток КАК ДолгУпр,
	|	Расчеты.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
	|	Расчеты.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
	|	Расчеты.ДолгОстаток КАК Долг,
	|	Расчеты.ПредоплатаОстаток КАК Предоплата
	|ПОМЕСТИТЬ вт_РеклассификацияРасчетыСПоставщиками
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|			&КонГраница,
	|			АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						Т.КлючАналитики
	|					ИЗ
	|						вт_АналитикаУчета КАК Т)
	|				И (ДатаПлановогоПогашения МЕЖДУ &НачПериода И &КонПериода)) КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Расчеты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка";

	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти
	
#Область РасчетыПоДисконтированию
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	Расчеты.Валюта КАК Валюта,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	Расчеты.ДолгОстаток * ДанныеДисконта.СуммаДисконтированияОстаток
	|		* РАЗНОСТЬДАТ(Расчеты.ДатаВозникновения, Расчеты.ДатаПлановогоПогашения, ДЕНЬ)
	|		/ СУММА(РАЗНОСТЬДАТ(РасчетыСводно.ДатаВозникновения, РасчетыСводно.ДатаПлановогоПогашения, ДЕНЬ)
	|		* РасчетыСводно.ДолгОстаток) КАК Долг,
	|	Расчеты.ДолгРеглОстаток * ДанныеДисконта.СуммаДисконтированияРеглОстаток
	|		* РАЗНОСТЬДАТ(Расчеты.ДатаВозникновения, Расчеты.ДатаПлановогоПогашения, ДЕНЬ)
	|		/ СУММА(РАЗНОСТЬДАТ(РасчетыСводно.ДатаВозникновения, РасчетыСводно.ДатаПлановогоПогашения, ДЕНЬ)
	|		* РасчетыСводно.ДолгРеглОстаток) КАК ДолгРегл,
	|	Расчеты.ДолгУпрОстаток * ДанныеДисконта.СуммаДисконтированияУпрОстаток
	|		* РАЗНОСТЬДАТ(Расчеты.ДатаВозникновения, Расчеты.ДатаПлановогоПогашения, ДЕНЬ)
	|		/ СУММА(РАЗНОСТЬДАТ(РасчетыСводно.ДатаВозникновения, РасчетыСводно.ДатаПлановогоПогашения, ДЕНЬ)
	|		* РасчетыСводно.ДолгУпрОстаток) КАК ДолгУпр
	|
	|ПОМЕСТИТЬ вт_РеклассификацияРасчетыПоДисконтированию
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&КонГраница, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ Т.КлючАналитики ИЗ вт_АналитикаУчета КАК Т) 
	|		И ДатаПлановогоПогашения МЕЖДУ &НачПериода И &КонПериода) КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПроцентныеРасходыДисконтирования.Остатки(&КонГраница,
	|		АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Т.КлючАналитики ИЗ вт_АналитикаУчета КАК Т)) КАК ДанныеДисконта
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = ДанныеДисконта.АналитикаУчетаПоПартнерам
	|			И Расчеты.Валюта = ДанныеДисконта.Валюта
	|			И Расчеты.ОбъектРасчетов = ДанныеДисконта.ОбъектРасчетов
	|			И Расчеты.РасчетныйДокумент = ДанныеДисконта.РасчетныйДокумент
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Расчеты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&КонГраница,
	|		АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Т.КлючАналитики ИЗ вт_АналитикаУчета КАК Т)) КАК РасчетыСводно
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = РасчетыСводно.АналитикаУчетаПоПартнерам
	|			И Расчеты.ОбъектРасчетов = РасчетыСводно.ОбъектРасчетов
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыРасчетов.Организация,
	|	Расчеты.Валюта,
	|	ОбъектыРасчетов.Подразделение,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|
	|	Расчеты.ДолгРеглОстаток,
	|	ДанныеДисконта.СуммаДисконтированияРеглОстаток,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДолгУпрОстаток,
	|	ДанныеДисконта.СуммаДисконтированияУпрОстаток,
	|	Расчеты.ДолгОстаток,
	|	ДанныеДисконта.СуммаДисконтированияОстаток";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
#КонецОбласти
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ДополнитьВременныеТаблицы(МенеджерВременныхТаблицДляОтраженияВРеглУчете)
	
	Если МенеджерВременныхТаблицДляОтраженияВРеглУчете <> Неопределено Тогда
		
		ТекстыЗапроса = Новый Массив;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("ВтКорректировкаАмортизации") = Неопределено Тогда
			ТекстыЗапроса.Добавить(ВнеоборотныеАктивыЛокализация.ТекстЗапросаПустаяВременнаяТаблицаКорректировкаАмортизации());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("ВтРасходыПоАренднымПлатежам") = Неопределено Тогда
			ТекстыЗапроса.Добавить(ВнеоборотныеАктивыЛокализация.ТекстЗапросаПустаяВременнаяТаблицаРасходыПоАренднымПлатежам());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("вт_РеклассификацияРасчетыПоФинИнструментам") = Неопределено Тогда
			ТекстыЗапроса.Добавить(Документы.РегламентнаяОперация.ТекстЗапросаПустаяВременнаяТаблицаРеклассификацияРасчетыПоФинИнструментам());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("вт_РеклассификацияРасчетыСКлиентами") = Неопределено Тогда
			ТекстыЗапроса.Добавить(Документы.РегламентнаяОперация.ТекстЗапросаПустаяВременнаяТаблицаРеклассификацияРасчетыСКлиентами());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("вт_РеклассификацияРасчетыСПоставщиками") = Неопределено Тогда
			ТекстыЗапроса.Добавить(Документы.РегламентнаяОперация.ТекстЗапросаПустаяВременнаяТаблицаРеклассификацияРасчетыСПоставщиками());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("вт_РеклассификацияРасчетыПоАренде") = Неопределено Тогда
			ТекстыЗапроса.Добавить(Документы.РегламентнаяОперация.ТекстЗапросаПустаяВременнаяТаблицаРеклассификацияРасчетыПоАренде());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("вт_РеклассификацияРасчетыПоДисконтированию") = Неопределено Тогда
			ТекстыЗапроса.Добавить(Документы.РегламентнаяОперация.ТекстЗапросаПустаяВременнаяТаблицаРеклассификацияРасчетыПоДисконтированию());
		КонецЕсли;
		
		Если МенеджерВременныхТаблицДляОтраженияВРеглУчете.Таблицы.Найти("КосвенныеРасходы") = Неопределено Тогда
			ТекстыЗапроса.Добавить(Документы.РегламентнаяОперация.ТекстЗапросаПустаяВременнаяТаблицаКосвенныхРасходов());
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДляОтраженияВРеглУчете;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Запрос.Выполнить();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
