
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Элементы.ГруппаПанельОтправки.Видимость = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	УстановитьФункциональныеОпцииФормы();

	Если Объект.Ссылка.Пустая() Тогда
	
		ПриЧтенииСозданииНаСервере();
	
	КонецЕсли; 
	
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// ++ НЕ УТ
	Если НЕ Объект.Ссылка.Пустая() Тогда
		СтруктураРеквизитовВыгрузки = Объект.Ссылка.ПолучитьОбъект().СтруктураРеквизитовВыгрузки.Получить();
	КонецЕсли;
		
	Если СтруктураРеквизитовВыгрузки = Неопределено Тогда
		СтруктураРеквизитовВыгрузки = Параметры.ЗначениеКопирования.СтруктураРеквизитовВыгрузки.Получить();
		Если СтруктураРеквизитовВыгрузки = Неопределено Тогда
			СтруктураРеквизитовВыгрузки = ОбновитьДанныеРеквизитовВыгрузки();
		КонецЕсли;
	КонецЕсли;
	
	Документы.ЗаявлениеОВвозеТоваров.ОбновитьСтруктуруРеквизитовВыгрузки(СтруктураРеквизитовВыгрузки);
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РегламентированныйОтчет) Тогда
		Если Не ЗначениеЗаполнено(ОтчетностьВФТС) ИЛИ (ЗначениеЗаполнено(ОтчетностьВФТС) И ОтчетностьВФТС.ПолучитьОбъект() = Неопределено) Тогда
			ОтчетностьВФТС = Неопределено;
			ОпределитьСсылкуНаСуществующийОтчетВФТС();
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	// -- НЕ УТ
	
	ИспользоватьНоменклатуруПартнеров = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	ИспользоватьАкцизыПриИзмененииСервер();
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.СтруктураРеквизитовВыгрузки = Новый ХранилищеЗначения(СтруктураРеквизитовВыгрузки);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УчетНДСУП.УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(
		Объект.Ссылка,
		Элементы.СостояниеОплатыПоСчетуФактуре);
		
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УправлениеФормой(ЭтаФорма);
	
	Оповестить("Запись_ЗаявлениеОВвозеТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОВыборе(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	// ++ НЕ УТ
	Если "СозданОтчетВФТС" = ИмяСобытия И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ЗаявлениеОВвозе = Неопределено;
		Параметр.Свойство("ЗаявлениеОВвозе", ЗаявлениеОВвозе);
		Если ЗаявлениеОВвозе = Объект.Ссылка Тогда
			ОтчетностьВФТС = Параметр.ОтчетВФТС;
			Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Статформа в ФТС';
															|en = 'Statistical form in FCS'");
		КонецЕсли;
		
	КонецЕсли;
	// -- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КоличествоСтрок = Объект.Товары.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		Индекс = КоличествоСтрок - ОбратныйИндекс;
		
		Если Объект.Товары[Индекс].ДокументПоступления = ТекущиеДанные.ДокументПоступления Тогда
			Объект.Товары.Удалить(Объект.Товары.Индекс(Объект.Товары[Индекс]));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыДокументПоступления Тогда
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьДокумент(ДанныеСтроки.ДокументПоступления, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговаяБазаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.НалоговаяБазаНДС,
		УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ТекущиеДанные.СтавкаНДС),
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.НалоговаяБазаНДС,
		УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ТекущиеДанные.СтавкаНДС),
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговаяБазаАкцизыПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуАкцизов(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыТвердаяСтавкаАкцизаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуАкцизов(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАдвалорнаяСтавкаАкцизаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуАкцизов(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПоступленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// ++ НЕ УТ
&НаСервере
Функция ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор, ТолькоПроверка = Ложь)
	
	Возврат Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор, Объект, ТолькоПроверка);
	
КонецФункции

&НаКлиенте
Процедура СохранитьВыгружаемыеДанные(ВыгружаемыеДанные)
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		Попытка
			
			ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			
		Исключение
			
			ЗаписатьОшибкуВЖурнал(НСтр("ru = 'Сохранение файла выгрузки заявления о ввозе';
										|en = 'Save the import application export file'"), 
								  ИнформацияОбОшибке());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось записать файл %1!
									| Возможно, недостаточно места на диске или диск защищен от записи.';
									|en = 'Cannot save file %1.
									|There may not be enough space on the disk or the disk is write protected.'"),
								ФайлВыгрузки.ИмяФайлаВыгрузки));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурнал(Описание, ИнформацияОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(Описание,
							 УровеньЖурналаРегистрации.Ошибка,,,
							 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
							 
КонецПроцедуры

// -- НЕ УТ

&НаСервере
Процедура РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	// Рассчитаем по фактурной стоимости налоговую базу в рублях на дату принятия на учет.
	Если ДанныеОбъекта.Валюта <> ДанныеОбъекта.ВалютаРегламентированногоУчета Тогда
		СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ДанныеОбъекта.Валюта, СтрокаТабличнойЧасти.ДатаПринятияНаУчет, ДанныеОбъекта.ВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость * (СтруктураКурса.КурсЧислитель/СтруктураКурса.КурсЗнаменатель);
	Иначе
		СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость;
	КонецЕсли; 
	
	// Рассчитаем по налоговой базе и ставке сумму НДС
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.НалоговаяБазаНДС,
		УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС),
		Ложь);

	// Рассчитаем по налоговой базе в рублях статистическую стоимость в долларах на дату принятия на учет.
	Если ДанныеОбъекта.ВалютаДолларыСША <> Справочники.Валюты.ПустаяСсылка() Тогда
		СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ДанныеОбъекта.ВалютаДолларыСША, СтрокаТабличнойЧасти.ДатаПринятияНаУчет, ДанныеОбъекта.ВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.СтатСтоимостьДолларыСША = СтрокаТабличнойЧасти.НалоговаяБазаНДС * (СтруктураКурса.КурсЗнаменатель/СтруктураКурса.КурсЧислитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРеквизитыПечатиНаСервере(ВыбранноеЗначение)

	СтруктураРеквизитовПечати = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаРеквизитовПечати);
	Объект.УчастникиСделки.Загрузить(СтруктураРеквизитовПечати.УчастникиСделки);
	Объект.Спецификации.Загрузить(СтруктураРеквизитовПечати.Спецификации);
	Объект.СведенияОДокументах.Загрузить(СтруктураРеквизитовПечати.СведенияОДокументах);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесНеттоКгПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ЕдиницыРазличаются Тогда
		ТекущиеДанные.КоличествоПоТНВЭД = ТекущиеДанные.ВесНеттоКг;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ДобавитьСтроки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущийДокумент", ТекущаяСтрока.ДокументПоступления);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("МассивВыбранныхДокументов", ДокументыПартий());

	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаВыбораОснования", ПараметрыФормы, ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявлениеОВвозе(Команда)
	
	// ++ НЕ УТ
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
		
	ВыгружаемыеДанные = ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор);
	
	Если НЕ ВыгружаемыеДанные = Неопределено Тогда
		
		СохранитьВыгружаемыеДанные(ВыгружаемыеДанные);
		
	КонецЕсли;
	// -- НЕ УТ
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОплатыПоСчетуФактуре(Команда)
	
	УчетНДСУПКлиент.ОткрытьФормуСостоянияОплатыНДСПоСчетуФактуре(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРеквизитыПечати" Тогда
		ОбработкаВыбораРеквизитыПечатиНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаВыбораОснования" Тогда
		ОбработкаВыбораДобавитьСтрокиИзДокументаПартии(ВыбранноеЗначение);
	КонецЕсли;
	
	УчетНДСУПКлиент.ОбработкаИзмененияСостоянияОплатыНДСПоСчетуФактуре(
		ИсточникВыбора,
		ВыбранноеЗначение,
		Элементы.СостояниеОплатыПоСчетуФактуре);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);
	
	// ++ НЕ УТ
	СтруктураРеквизитовВыгрузки = ОбновитьДанныеРеквизитовВыгрузки();
	// -- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораОрганизацииКонтрагента("Организация", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораОрганизацииКонтрагента("Контрагент", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораОрганизацииКонтрагента("Договор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаВзаиморасчетов,Номер,Дата");
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.Номер) Тогда
		Объект.НомерДоговора = РеквизитыДоговора.Номер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.Дата) Тогда
		Объект.ДатаДоговора = РеквизитыДоговора.Дата;
	КонецЕсли;
	
	Если Объект.Валюта <> РеквизитыДоговора.ВалютаВзаиморасчетов Тогда
		
		Объект.Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
		НаименованиеВалютыДокумента = Объект.Валюта.Наименование;
		УправлениеФормой(ЭтаФорма);
		
		ДанныеОбъекта = Новый Структура(
			"ВалютаРегламентированногоУчета, ВалютаДолларыСША, Валюта",
			ВалютаРегламентированногоУчета, ВалютаДолларыСША, Объект.Валюта);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИспользоватьАкцизыПриИзменении(Элемент)
	
	ИспользоватьАкцизыПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьАкцизыПриИзмененииСервер()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	
	ТоварыКодТНВЭДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКодТНВЭДПриИзмененииНаСервере()
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	// ++ НЕ УТ
	СтруктураРеквизитовВыгрузки = ОбновитьДанныеРеквизитовВыгрузки();
	// -- НЕ УТ

КонецПроцедуры

#КонецОбласти

#Область ГиперссылкиПодвалаФормы

&НаКлиенте
Процедура РеквизитыПечатиНажатие(Элемент)
	
	АдресХранилищаДопРеквизиты = ПоместитьДопРеквизитыВоВременноеХранилищеНаСервере();
	
	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",             ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация",                Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",                 Объект.Контрагент);
	ПараметрыФормы.Вставить("Договор",                    Объект.Договор);
	ПараметрыФормы.Вставить("НомерДоговора",              Объект.НомерДоговора);
	ПараметрыФормы.Вставить("ДатаДоговора",               Объект.ДатаДоговора);
	ПараметрыФормы.Вставить("ОтветственноеЛицо",          Объект.ОтветственноеЛицо);
	ПараметрыФормы.Вставить("ДатаОтправки",               Объект.ДатаОтправки);
	ПараметрыФормы.Вставить("АдресХранилищаДопРеквизиты", АдресХранилищаДопРеквизиты);

	ОписаниеОповещения = Новый ОписаниеОповещения("ДопРеквизитыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаВыгрузки2015Кв1", ПараметрыФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДопРеквизитыВоВременноеХранилищеНаСервере()

	КолонкиДокументовПоставки = "ДокументПоступления, ВидТранспорта, ДатаПринятияНаУчет, НомерСчетаФактуры, ДатаСчетаФактуры, СерияНомерТСД, ДатаТСД";
	ДокументыПоступления = Объект.Товары.Выгрузить(, КолонкиДокументовПоставки);
	ДокументыПоступления.Свернуть(КолонкиДокументовПоставки);
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("Спецификации",                Объект.Спецификации.Выгрузить());
	СтруктураДопРеквизитов.Вставить("УчастникиСделки",             Объект.УчастникиСделки.Выгрузить());
	СтруктураДопРеквизитов.Вставить("СведенияОДокументах",         Объект.СведенияОДокументах.Выгрузить());
	СтруктураДопРеквизитов.Вставить("ДатаОтправки",                Объект.ДатаОтправки);
	СтруктураДопРеквизитов.Вставить("ДокументыПоступления",        ДокументыПоступления);
	СтруктураДопРеквизитов.Вставить("СтруктураРеквизитовВыгрузки", СтруктураРеквизитовВыгрузки);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДопРеквизитов, УникальныйИдентификатор);

КонецФункции

#КонецОбласти

#Область ОтправкаВФНС

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	// ++ НЕ УТ
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	// ++ НЕ УТ
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ПараметрыВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СтруктураРеквизитовВыгрузки = Результат;
		
		Модифицированность = Истина;
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПолучитьРеквизитыПечатиИзВременногоХранилища(Результат);
		
		Модифицированность = Истина;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыПечатиИзВременногоХранилища(АдресВременногоХранилища)
	
	СтруктураДопРеквизитов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	СтруктураРеквизитовВыгрузки = СтруктураДопРеквизитов.СтруктураРеквизитовВыгрузки;
	Объект.Спецификации.Загрузить(СтруктураДопРеквизитов.Спецификации);
	Объект.УчастникиСделки.Загрузить(СтруктураДопРеквизитов.УчастникиСделки);
	Объект.СведенияОДокументах.Загрузить(СтруктураДопРеквизитов.СведенияОДокументах);
	Объект.Договор           = СтруктураДопРеквизитов.Договор;
	Объект.НомерДоговора     = СтруктураДопРеквизитов.НомерДоговора;
	Объект.ДатаДоговора      = СтруктураДопРеквизитов.ДатаДоговора;
	Объект.ОтветственноеЛицо = СтруктураДопРеквизитов.ОтветственноеЛицо;
	Объект.ДатаОтправки      = СтруктураДопРеквизитов.ДатаОтправки;
	
	Для каждого Строка Из Объект.Товары Цикл
		Для каждого СтрокаДопРеквизиты Из СтруктураДопРеквизитов.ДокументыПоступления Цикл
			Если Строка.ДокументПоступления = СтрокаДопРеквизиты.ДокументПоступления Тогда
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДопРеквизиты);
				Строка.КодВидаТранспорта = Лев(Строка.ВидТранспорта, 2);
				
				Если Строка.ДатаПринятияНаУчет = СтрокаДопРеквизиты.ДатаПринятияНаУчет Тогда
					
					ДанныеСтрокиТаблицы = Новый Структура(
						"ДатаПринятияНаУчет, ФактурнаяСтоимость, НалоговаяБазаНДС, СтавкаНДС, 
						|СуммаНДС, СтатСтоимостьДолларыСША");
					ДанныеОбъекта = Новый Структура(
						"ВалютаРегламентированногоУчета, ВалютаДолларыСША, Валюта",
						ВалютаРегламентированногоУчета, ВалютаДолларыСША, Строка.Валюта);
						
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Строка);
					РасчитатьСуммыВТабличнойЧастиНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
					ЗаполнитьЗначенияСвойств(Строка, ДанныеСтрокиТаблицы);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// ++ НЕ УТ
&НаСервере
Функция ОбновитьДанныеРеквизитовВыгрузки()
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
				
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	
	СтрокаСведений = "ИННЮЛ, ИННФЛ, КППЮЛ, НаимЮЛПол, ФИО, КодНО, ФИОРук, ФИОБух, ФИОУпПред, ИННРук, ИННБух, ИННУпПред";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Объект.Организация,
		?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата, ТекущаяДатаСеанса()),
		СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(СведенияОбОрганизации) Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
	
	ФИОПодп1Титул = СведенияОбОрганизации.ФИОРук;
	ФИОПодп2Титул = СведенияОбОрганизации.ФИОБух;
		
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикКПП", 	СведенияОбОрганизации.КППЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикИННФЛ", СведенияОбОрганизации.ИННФЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикНаимЮЛ",СведенияОбОрганизации.НаимЮЛПол);
	ПараметрыВыгрузки.Вставить("НалогоплательщикФИО", 	СведенияОбОрганизации.ФИО);
	
	ПараметрыВыгрузки.Вставить("КодИФНС", СведенияОбОрганизации.КодНО);
	
	ДанныеПредставителя = ПолучитьСведенияОПредставителе(СведенияОбОрганизации.КодНО);
	
	ПараметрыВыгрузки.Вставить("ПрОтпр", Число(ДанныеПредставителя.ТипПредставителя));
	
	ОтправительЯвляетсяЮЛ = Истина;
	
	Если ДанныеПредставителя.ТипПредставителя = "1" Тогда
		
		ФИОПодп1Титул = СведенияОбОрганизации.ФИОРук;
		ФИОПодп2Титул = СведенияОбОрганизации.ФИОБух;
		
	Иначе
		
		ФИОПодп1Титул = СведенияОбОрганизации.ФИОУпПред;
		
	КонецЕсли;
	
	НаимОтпр 		= "";
	ИННЮЛОтпр		= "";
	КППОтпр         = "";

	ИННФЛОтпр       = "";

	ФамилияФЛОтпр   = "";
	ИмяФЛОтпр       = "";
	ОтчествоФЛОтпр  = "";

	ПрПодп1         = 0;
	ИННФЛПодп1      = СведенияОбОрганизации.ИННРук;
	ДолжностьПодп1  = "";
	
	ФамилияПодп1    = "";
	ИмяПодп1        = "";
	ОтчествоПодп1   = "";

	НаимДовПодп1    = "";
	НомерДовПодп1   = "";
	ДатаДовПодп1    = "";
	
	ПрПодп2         = 0;
    ИННФЛПодп2      = СведенияОбОрганизации.ИННБух;;
	ДолжностьПодп2  = "";
	
	ФамилияПодп2    = "";
	ИмяПодп2        = "";
	ОтчествоПодп2   = "";
	
	НаимДовПодп2    = "";
	НомерДовПодп2   = "";
	ДатаДовПодп2    = "";

	ПрКурьер        = 0;
	ИННФЛКурьер		= ИННФЛПодп1;

	ФамилияКурьер   = "";
	ИмяКурьер       = "";
	ОтчествоКурьер  = "";
	
	НаимДовКурьер   = "";
	НомерДовКурьер  = "";
	ДатаДовКурьер   = "";

	Если ДанныеПредставителя.ТипПредставителя = "1" Тогда

		Если НЕ ЭтоПБОЮЛ Тогда
			
			ОтправительЯвляетсяЮЛ = Истина;
			
			НаимОтпр 		= СведенияОбОрганизации.НаимЮЛПол;
			ИННЮЛОтпр		= СведенияОбОрганизации.ИННЮЛ;
			КППОтпр         = СведенияОбОрганизации.КППЮЛ;
			
			ПрПодп1 = 2;
			
			ФИОПодп1        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;
			
			ПрПодп2 = 2;
			
			ФИОПодп2        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;
			
			ПрКурьер = 2;

			ФамилияКурьер   = ФИОПодп1.Фамилия;
			ИмяКурьер       = ФИОПодп1.Имя;
			ОтчествоКурьер  = ФИОПодп1.Отчество;
			
		Иначе
			
			ОтправительЯвляетсяЮЛ = Ложь;
			
			ИННФЛОтпр       = СведенияОбОрганизации.ИННФЛ;
			
			ФИОотправителя   = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияФЛОтпр    = ФИОотправителя.Фамилия;
			ИмяФЛОтпр        = ФИОотправителя.Имя;
			ОтчествоФЛОтпр   = ФИОотправителя.Отчество;

			ПрПодп1 = 1;
			ФИОПодп1        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;
			
			ПрКурьер = 1;
			
			ФамилияКурьер   = ФИОотправителя.Фамилия;
			ИмяКурьер       = ФИОотправителя.Имя;
			ОтчествоКурьер  = ФИОотправителя.Отчество;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеПредставителя.флПредставительЮрЛицо Тогда

			ОтправительЯвляетсяЮЛ = Истина;
			
			ПредставительСсылка = ДанныеПредставителя.ПредставительСсылка;
			НаимОтпр 		    = СокрЛП(ПредставительСсылка);
			ИННЮЛОтпр		    = ПредставительСсылка.ИНН;
			КППОтпр             = ПредставительСсылка.КПП;	
			
			ПрПодп1 = 3;
			ФИОПодп1        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;

			ФИОПодп2        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;

			ПрКурьер 		= 3;

			ФамилияКурьер   = ФИОПодп1.Фамилия;
			ИмяКурьер       = ФИОПодп1.Имя;
			ОтчествоКурьер  = ФИОПодп1.Отчество;
			
		Иначе
			
			ОтправительЯвляетсяЮЛ = Ложь;
			
			ИННФЛОтпр        = СведенияОбОрганизации.ИННУпПред;
			
			ФИОотправителя   = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияФЛОтпр    = ФИОотправителя.Фамилия;
			ИмяФЛОтпр        = ФИОотправителя.Имя;
			ОтчествоФЛОтпр   = ФИОотправителя.Отчество;
			
			ПрПодп1 		= 3;
			ФамилияПодп1    = ФИОотправителя.Фамилия;
			ИмяПодп1        = ФИОотправителя.Имя;
			ОтчествоПодп1   = ФИОотправителя.Отчество;
			
			ФИОПодп2        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;
			
			ПрКурьер = 3;
			
			ФамилияКурьер   = ФИОотправителя.Фамилия;
			ИмяКурьер       = ФИОотправителя.Имя;
			ОтчествоКурьер  = ФИОотправителя.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОтправительЯвляетсяЮЛ", ОтправительЯвляетсяЮЛ);
	
	ПараметрыВыгрузки.Вставить("НаимОтпр", 		НаимОтпр);
	ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		ИННЮЛОтпр);
	ПараметрыВыгрузки.Вставить("КППОтпр",       КППОтпр);

	ПараметрыВыгрузки.Вставить("ИННФЛОтпр",     ИННФЛОтпр);

	ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр", ФамилияФЛОтпр);
	ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",     ИмяФЛОтпр);
	ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр",ОтчествоФЛОтпр);
	
	Если ТипЗнч(СтруктураРеквизитовВыгрузки) = Тип("Структура") Тогда
		
		ПараметрыВыгрузки.Вставить("ИмпортерСовпадаетСОтправителем",
			СтруктураРеквизитовВыгрузки.ИмпортерСовпадаетСОтправителем);
		
		ПараметрыВыгрузки.Вставить("ИмпортерЯвляетсяЮЛ", СтруктураРеквизитовВыгрузки.ИмпортерЯвляетсяЮЛ);
		
		ПараметрыВыгрузки.Вставить("НаимИмпорт",  СтруктураРеквизитовВыгрузки.НаимИмпорт);
		ПараметрыВыгрузки.Вставить("ИННЮЛИмпорт", СтруктураРеквизитовВыгрузки.ИННЮЛИмпорт);
		ПараметрыВыгрузки.Вставить("КППИмпорт",   СтруктураРеквизитовВыгрузки.КППИмпорт);
		
		ПараметрыВыгрузки.Вставить("ИННФЛИмпорт",      СтруктураРеквизитовВыгрузки.ИННФЛИмпорт);
		ПараметрыВыгрузки.Вставить("ФамилияФЛИмпорт",  СтруктураРеквизитовВыгрузки.ФамилияФЛИмпорт);
		ПараметрыВыгрузки.Вставить("ИмяФЛИмпорт",      СтруктураРеквизитовВыгрузки.ИмяФЛИмпорт);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛИмпорт", СтруктураРеквизитовВыгрузки.ОтчествоФЛИмпорт);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИмпортерСовпадаетСОтправителем", Истина);
		
		ПараметрыВыгрузки.Вставить("ИмпортерЯвляетсяЮЛ", Истина);
		
		ПараметрыВыгрузки.Вставить("НаимИмпорт",  "");
		ПараметрыВыгрузки.Вставить("ИННЮЛИмпорт", "");
		ПараметрыВыгрузки.Вставить("КППИмпорт",   "");
		
		ПараметрыВыгрузки.Вставить("ИННФЛИмпорт",      "");
		ПараметрыВыгрузки.Вставить("ФамилияФЛИмпорт",  "");
		ПараметрыВыгрузки.Вставить("ИмяФЛИмпорт",      "");
		ПараметрыВыгрузки.Вставить("ОтчествоФЛИмпорт", "");
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп1",       ПрПодп1);
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",    ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1",ДолжностьПодп1);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", ОтчествоПодп1);

	ПараметрыВыгрузки.Вставить("НаимДовПодп1",  НаимДовПодп1);
	ПараметрыВыгрузки.Вставить("НомерДовПодп1", НомерДовПодп1);
	ПараметрыВыгрузки.Вставить("ДатаДовПодп1",  ДатаДовПодп1);
	
	ПараметрыВыгрузки.Вставить("ПрПодп2",       ПрПодп2);
	ПараметрыВыгрузки.Вставить("ИННФЛПодп2",    ИННФЛПодп2);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп2",ДолжностьПодп2);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп2",  ФамилияПодп2);
	ПараметрыВыгрузки.Вставить("ИмяПодп2",      ИмяПодп2);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп2", ОтчествоПодп2);

	ПараметрыВыгрузки.Вставить("НаимДовПодп2",  НаимДовПодп2);
	ПараметрыВыгрузки.Вставить("НомерДовПодп2", НомерДовПодп2);
	ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  ДатаДовПодп2);
	
	ПараметрыВыгрузки.Вставить("ОтправленПочтой", Ложь);
	ПараметрыВыгрузки.Вставить("ПрКурьер",      ПрКурьер);
	ПараметрыВыгрузки.Вставить("ИННФЛКурьер",   ИННФЛКурьер);
	                 
	ПараметрыВыгрузки.Вставить("ФамилияКурьер", ФамилияКурьер);
	ПараметрыВыгрузки.Вставить("ИмяКурьер",     ИмяКурьер);
	ПараметрыВыгрузки.Вставить("ОтчествоКурьер",ОтчествоКурьер);
	
	ПараметрыВыгрузки.Вставить("НаимДовКурьер",  НаимДовКурьер);
	ПараметрыВыгрузки.Вставить("НомерДовКурьер", НомерДовКурьер);
	ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  ДатаДовКурьер);
	
	ПараметрыВыгрузки.Вставить("ФИОУпПред", СведенияОбОрганизации.ФИОУпПред);
	ПараметрыВыгрузки.Вставить("ИННУпПред", СведенияОбОрганизации.ИННУпПред);
	
	ПараметрыВыгрузки.Вставить("ФИОРук",    СведенияОбОрганизации.ФИОРук);
    	
	Возврат ПараметрыВыгрузки;	
	
КонецФункции

// -- НЕ УТ

&НаСервере
Функция ПолучитьСведенияОПредставителе(КодИФНС) Экспорт
	
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ТипПредставителя = "1";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Код,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.Представитель,
	|	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Код = &Код
	|	И РегистрацииВНалоговомОргане.Владелец = &Владелец");
	
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		
		ТипПредставителя = "2";
		
		Если НЕ ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			
			флПредставительЮрЛицо = Истина;
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
			ПредставительСсылка = Выборка.Представитель;
			
		Иначе
			
			флПредставительЮрЛицо = Ложь;
			ПредставительСсылка = Выборка.Представитель;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
			
		КонецЕсли;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ТипПредставителя",      ТипПредставителя);
	Структура.Вставить("флПредставительЮрЛицо", флПредставительЮрЛицо);
	Структура.Вставить("ФИОПредставителя",      ФИОПредставителя);
	Структура.Вставить("ПредставительСсылка",   ПредставительСсылка);
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПредставительЯвляетсяФизЛицом(Представитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Представитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		Возврат Представитель.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		Возврат ТипЗнч(Представитель) = Тип("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодачаСтатформыВФТС

&НаКлиенте
Процедура СоздатьСтатформуВФТСНажатие(Элемент)
	
	// ++ НЕ УТ
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтчетностьВФТС) Тогда
		Попытка
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоМесяца(Объект.Дата));
			ПараметрыФормы.Вставить("мСохраненныйДок",          Неопределено);
			ПараметрыФормы.Вставить("мСкопированаФорма",        Неопределено);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецМесяца(Объект.Дата));
			ПараметрыФормы.Вставить("мПериодичность",           ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
			ПараметрыФормы.Вставить("Организация",              Объект.Организация);
			ПараметрыФормы.Вставить("мВыбраннаяФорма",          "ФормаОтчетаПоЗаявлениюОВвозеТоваров");
			ПараметрыФормы.Вставить("ЗаявлениеОВвозеТоваров",   Объект.Ссылка);
			ПараметрыФормы.Вставить("НужноОповещатьОСоздании");
			
			ОткрытьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаОтчетаПоЗаявлениюОВвозеТоваров", ПараметрыФормы);
			
		Исключение
			
			ЗаписатьОшибкуВЖурнал(НСтр("ru = 'Открытие статформы перемещения товаров';
										|en = 'Open statistical form for goods transfer'"), 
								  ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось открыть форму отчета ""Статистическая форма учета перемещения товаров"".';
																	|en = 'Cannot open the ""Statistical form of goods transfer accounting"" report form.'"));
			
		КонецПопытки;
	Иначе
		ПоказатьЗначение(,ОтчетностьВФТС);
	КонецЕсли;
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

// ++ НЕ УТ
&НаСервере
Процедура ОпределитьСсылкуНаСуществующийОтчетВФТС()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтчетностьВФТС = Неопределено;
		Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Сдать в ФТС';
														|en = 'Pass to FCS'");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОтчетности", Перечисления.ВидыОтчетности.РегламентированнаяОтчетность);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка,
	               |	РегламентированныйОтчет.ДанныеОтчета
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ВидОтчетности = &ВидОтчетности
	               |	И РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС""";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого Стр Из Результат Цикл
		ДанныеОтчета = Стр.ДанныеОтчета.Получить();
		
		Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") ИЛИ НЕ ДанныеОтчета.Свойство("ЗаявлениеОВвозеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеОтчета.ЗаявлениеОВвозеТоваров.Ссылка = Объект.Ссылка Тогда
			ОтчетностьВФТС = Стр.Ссылка;
			Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Статформа в ФТС';
															|en = 'Statistical form in FCS'");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// -- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// НомерСчетаФактуры
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерСчетаФактуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерСчетаФактуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Номер';
																|en = 'Number'"));

	// ДатаСчетаФактуры
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДатаСчетаФактуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДатаСчетаФактуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Дата';
																|en = 'Date'"));

	// отметка незаполненного "количество по ТН ВЭД"
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПоТНВЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоПоТНВЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕдиницыРазличаются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// КоличествоПоТНВЭД 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПоТНВЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕдиницыРазличаются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не заполняется>';
																|en = '<not filled in>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// КодТНВЭДЕдиницаИзмерения 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭДЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕдиницыРазличаются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элементы.ТоварыГруппаАкцизы.Видимость = Объект.ИспользоватьАкцизы;
	
	// ГруппаАкцизы 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыГруппаАкцизы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИспользоватьАкцизы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры	
	
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсегоНДС = Окр(Объект.Товары.Итог("СуммаНДС"));

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	ПараметрыФО.Вставить("Период", Объект.Дата);
	
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	Килограммы = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаДолларыСША = Справочники.Валюты.НайтиПоКоду("840");
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	НаименованиеВалютыРегУчета = ВалютаРегламентированногоУчета.Наименование;
	Элементы.ТоварыНалоговаяБазаНДС.Заголовок    = НСтр("ru = 'База НДС';
														|en = 'VAT base'")              + ", " + НаименованиеВалютыРегУчета;
	Элементы.ТоварыСуммаНДС.Заголовок            = НСтр("ru = 'НДС';
														|en = 'VAT'")                   + ", " + НаименованиеВалютыРегУчета;
	Элементы.ТоварыТвердаяСтавкаАкциза.Заголовок = НСтр("ru = 'Твердая ставка акциза';
														|en = 'Fixed excise duty'") + ", " + НаименованиеВалютыРегУчета;
	Элементы.ТоварыСуммаАкциза.Заголовок         = НСтр("ru = 'Сумма акциза';
														|en = 'Excise amount'")          + ", " + НаименованиеВалютыРегУчета;
	
	УчетНДСУП.УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(
		Объект.Ссылка,
		Элементы.СостояниеОплатыПоСчетуФактуре);

	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Если ПустаяСтрока(Строка.Товар) Тогда
			Строка.Товар = 	"" + Строка.Номенклатура
							+ ?(ЗначениеЗаполнено(Строка.Характеристика), ", " + Строка.Характеристика, "")
							+ ?(ЗначениеЗаполнено(Строка.Серия), ", " + Строка.Серия, "");
		КонецЕсли;
		
		ЕдиницаТНВЭД = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Строка.КодТНВЭД, "ЕдиницаИзмерения");
		Если ЕдиницаТНВЭД = Форма.Килограммы Тогда
			Строка.КоличествоПоТНВЭД = Строка.ВесНеттоКг;
		ИначеЕсли ЕдиницаТНВЭД = Строка.ЕдиницаИзмерения Тогда
			Строка.КоличествоПоТНВЭД = Строка.Количество;
		КонецЕсли;
		Строка.ЕдиницыРазличаются = ЕдиницаТНВЭД <> Форма.Килограммы;
		
		Если Не Объект.ИспользоватьАкцизы И Строка.НалоговаяБазаАкцизы <> 0 Тогда
			Строка.НалоговаяБазаАкцизы = 0;
			Строка.СуммаАкциза = 0;
			Строка.ТвердаяСтавкаАкциза = 0;
			Строка.АдвалорнаяСтавкаАкциза = 0;
		ИначеЕсли Объект.ИспользоватьАкцизы И Строка.НалоговаяБазаАкцизы = 0 Тогда
			Строка.НалоговаяБазаАкцизы = Строка.НалоговаяБазаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДокументыПартий()
	
	ТаблицаТовары = Объект.Товары.Выгрузить(, "ДокументПоступления");
	ТаблицаТовары.Свернуть("ДокументПоступления");
	Возврат ТаблицаТовары.ВыгрузитьКолонку("ДокументПоступления");
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораДобавитьСтрокиИзДокументаПартии(МассивДокументов)
	
	Для каждого ЭлементМассива Из МассивДокументов Цикл
		ТаблицаТовары = Документы.ЗаявлениеОВвозеТоваров.ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(ЭлементМассива.Ссылка);
		
		Для каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
			Если СтрокаТаблицыТовары.НалоговаяБазаНДС <> 0 Тогда
				СтрокаТаблицыТовары.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
					СтрокаТаблицыТовары.НалоговаяБазаНДС,
					УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТаблицыТовары.СтавкаНДС),
					Ложь);
			КонецЕсли;
				
			Если Не Объект.ИспользоватьАкцизы Тогда
				СтрокаТаблицыТовары.НалоговаяБазаАкцизы = 0;
			КонецЕсли;
				
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			
			ДанныеОбъекта = Новый Структура(
				"ВалютаРегламентированногоУчета, ВалютаДолларыСША, Валюта",
				ВалютаРегламентированногоУчета, ВалютаДолларыСША, СтрокаТаблицыТовары.Валюта);
			РасчитатьСуммыВТабличнойЧастиНаСервере(НоваяСтрока, ДанныеОбъекта);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Договор = ЭлементМассива.Ссылка.Договор;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.Валюта = ЭлементМассива.Валюта;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуАкцизов(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаАкциза = ТекущаяСтрока.НалоговаяБазаАкцизы * ТекущаяСтрока.ТвердаяСтавкаАкциза 
									+ ТекущаяСтрока.НалоговаяБазаАкцизы * ТекущаяСтрока.АдвалорнаяСтавкаАкциза / 100;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Ссылка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОрганизацииКонтрагента(ИмяРеквизита, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект[ИмяРеквизита] Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура("ИмяРеквизита, ВыбранноеЗначение", ИмяРеквизита, ВыбранноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить?';
							|en = 'Tabular section of the document will be cleared. Continue? '");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = ДополнительныеПараметры.ВыбранноеЗначение;
		Объект.Товары.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	// ++ НЕ УТ
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	ОчиститьСообщения();
	ВыгружаемыеДанные = ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор, Истина);
	
	Если НЕ ВыгружаемыеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибок не обнаружено!';
									|en = 'No errors detected.'"));
		
	КонецЕсли;
	// -- НЕ УТ
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаУчетаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЗапасовОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗакупкаПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	// ++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	// ++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	// ++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	// ++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#КонецОбласти
