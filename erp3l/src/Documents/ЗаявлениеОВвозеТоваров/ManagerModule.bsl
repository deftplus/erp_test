#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- НЕ УТ
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетНДС");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозе(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПартииНДСКРаспределению(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоНДС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(Документ, Запрос, ТекстыЗапроса, Регистры);
		
		//++ НЕ УТ
		ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
		//-- НЕ УТ
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
КонецПроцедуры

// Добавляет команду создания документа "Заявление о ввозе товаров из ЕАЭС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявлениеОВвозеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаявлениеОВвозеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Формирует представление заявления о ввозе товаров из стран ЕАЭС с учетом состояния проведения и даты подтверждения оплаты.
//
// Параметры:
//  Номер - Строка - Номер заявления о ввозе;
//  Дата - Дата - Дата заявления о ввозе;
//  Проведен - Булево - Состояние проведения заявления о ввозе.
//  ДатаПодтвержденияОплаты - Дата - Дата подтверждения оплаты по заявлению от ФНС.
//
// Возвращаемое значение:
//	Строка - Представление заявления о ввозе.
//
Функция ПредставлениеЗаявленияОВвозеТоваров(Номер, Дата, Проведен, ДатаПодтвержденияОплаты) Экспорт
	
	ДанныеШапки = Новый Структура();
	ДанныеШапки.Вставить("Номер", Номер);
	ДанныеШапки.Вставить("Дата", Дата);
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить(ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеШапки, НСтр("ru = 'Заявление о ввозе товаров';
																											|en = 'Application for goods import'")));
	Если ЗначениеЗаполнено(ДатаПодтвержденияОплаты) Тогда
		МассивПодстрок.Добавить(СтрШаблон(НСтр("ru = '(подтверждено %1 г.)';
												|en = '(confirmed %1)'"), Формат(ДатаПодтвержденияОплаты, "ДЛФ=D")));
	КонецЕсли;
	Если Не Проведен Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(не проведено)';
									|en = '(not posted)'"));
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПодстрок, " ");
	
	Возврат Представление;
	
КонецФункции

// Функция находит заявления о ввозе товаров заданного документа-основания.
//
// Параметры:
//	ДокументОснование - ДокументСсылка - Документ, для которого необходимо найти заявление о ввозе товаров.
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется заявление о ввозе товаров.
//	Проведен - Булево - Признак того, что необходимо получить проведенные документы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных заявлений о ввозе товаров.
//
Функция ЗаявленияОВвозеТоваровПоОснованию(ДокументОснование, Организация = Неопределено, Проведен = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка                                  КАК Ссылка,
	|	Операция.Проведен                                КАК Проведен,
	|	Операция.Номер                                   КАК Номер,
	|	Операция.Дата                                    КАК Дата,
	|	Операция.Организация                             КАК Организация,
	|	Операция.Контрагент                              КАК Контрагент,
	|	ЕСТЬNULL(ПолученоПодтверждение.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПодтвержденияОплаты,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ЗаявлениеОВвозеТоваровТовары.Ссылка = Операция.Ссылка
	|		И Операция.ПометкаУдаления = ЛОЖЬ
	|		И (Операция.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПолученоПодтверждение
	|	ПО 
	|		Операция.Ссылка = ПолученоПодтверждение.СчетФактура
	|		И ПолученоПодтверждение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = &ДокументОснование
	|";
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПометкаУдаления = ЛОЖЬ", "Проведен");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация",       Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗаявлений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаявлений;
	
КонецФункции

// Процедура формирует таблицу остатков товаров к оформлению заявлений о ввозе товаров по документу поступления.
//
// Параметры:
//	ДокументПоступления - ДокументСсылка.ПриобретениеТоваровУслуг - Документ поступления, по которому
//						  будут определены остатки товаров к оформлению заявлений о ввозе товаров
//	ЗаполнениеНаОсновании - Булево, признак того, что документ введен на основании приобретения товаров  услуг.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица остатокв товаров для оформления заявлений.
//
Функция ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(ДокументПоступления, ЗаполнениеНаОсновании = Ложь) Экспорт
	
	ОперацииРаздельнойЗакупки = Новый Массив;
	ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
	ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ОперацииРаздельнойЗакупки.Найти(ДокументПоступления.ХозяйственнаяОперация) <> Неопределено Тогда
		
		ИспользуетсяДокументПоступлениеТоваров = Истина;
		
	Иначе
		ИспользуетсяДокументПоступлениеТоваров = Ложь;
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе();
		
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("ДатаПринятияНаУчет", ДокументПоступления.Дата);
	Запрос.УстановитьПараметр("ДолларСША", Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидТранспорта", ОпределитьВидТранспортаПоСтатистике(ДокументПоступления));
	Запрос.УстановитьПараметр("ЗаполнениеНаОсновании", ЗаполнениеНаОсновании);
	Запрос.УстановитьПараметр("ИспользуетсяДокументПоступлениеТоваров", ИспользуетсяДокументПоступлениеТоваров);
	Запрос.УстановитьПараметр("БазоваяВалюта",ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "Организация")));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Заявление о ввозе товаров';
										|en = 'Application for goods import'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов';
										|en = 'Application for goods import and payment of indirect taxes'");
	КомандаПечати.Обработчик     = "УчетНДСРФКлиент.ПечатьЗаявлениеОВвозеТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка,СписокДокументов";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Статистическая форма учета перемещения товаров';
										|en = 'Statistical goods transfer form'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Статистическая форма учета перемещения товаров';
										|en = 'Statistical goods transfer form'");
	КомандаПечати.Обработчик     = "УчетНДСРФКлиент.ПечатьСтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   ОбъектыПечати         - Список значений  - значение - ссылка на объект
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОВвозеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаявлениеОВвозеТоваров", 
			НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов';
				|en = 'Application for goods import and payment of indirect taxes'"),
			ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтатистическаяФормаУчетаПеремещенияТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СтатистическаяФормаУчетаПеремещенияТоваров", 
			НСтр("ru = 'Статистическая форма учета перемещения товаров';
				|en = 'Statistical goods transfer form'"),
			ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

//Возвращает количество счетов-фактур к оформлению.
//
// Параметры:
//	Параметры - структура:
//	* МассивОрганизаций - Массив - массив организаций.
//	* КонецПериода - Дата - ограничение сверху на дату документа приобретения.
//	* БезОграниченияПериода - Булево - не ограничивать по дате документа приобретения
//
// Возвращаемое значение:
//	Число - количество счетов-фактур к оформлению.
//
Функция ЕстьСчетаФактурыКОформлению(Параметры) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументПриобретениеТоваровУслуг.Ссылка) КАК КоличествоДокументовКОформлению
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки КАК ТоварыКОформлениюЗаявленийОВвозеОстатки
	|		ПО ДокументПриобретениеТоваровУслуг.Ссылка = ТоварыКОформлениюЗаявленийОВвозеОстатки.ДокументПоступления
	|ГДЕ
	|	&УсловиеОтбораОрганизации
	|	И &УсловиеОтбораПериода";
	
	Если ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		УсловиеОтбораОрганизации = "ДокументПриобретениеТоваровУслуг.Организация В (&МассивОрганизаций)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораОрганизации", УсловиеОтбораОрганизации);
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораОрганизации", "ИСТИНА");
	КонецЕсли;
	
	Если Параметры.Свойство("БезОграниченияПериода") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораПериода", "ИСТИНА");
	Иначе
		УсловиеОтбораПериода = "ДокументПриобретениеТоваровУслуг.Дата <= &КонецПериода";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораПериода", УсловиеОтбораПериода);
		Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ Выборка.КоличествоДокументовКОформлению = NULL Тогда
		Возврат Выборка.КоличествоДокументовКОформлению;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

//++ НЕ УТ

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//	Объект		- ДокументОбъект.ЗаявленеиеОВвозеТоваров (или ДокументСсылка.ЗаявлениеОВвозеТоваров)
//				  Ссылка на выгружаемый документ.
//
// Возвращаемое значение:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище (кроме режима только проверки документа).
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор, Объект, ТолькоПроверка = Ложь) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru = 'Документ не записан. Выгрузка прервана!';
													|en = 'Document is not saved. Export is canceled. '"), НСтр("ru = 'Документ не записан. Проверка прервана!';
																											|en = 'Document is not saved. Check is canceled.'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	СтруктураРеквизитовВыгрузки = Объект.Ссылка.ПолучитьОбъект().СтруктураРеквизитовВыгрузки.Получить();
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ДанныеДокумента = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов);
	
	Если Объект.Дата >= '20150101' Тогда
			ОбновитьСтруктуруРеквизитовВыгрузки(СтруктураРеквизитовВыгрузки);
			СодержаниеВыгрузки = ЭлектронноеПредставление2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	Иначе
		СодержаниеВыгрузки = ЭлектронноеПредставление(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	КонецЕсли;
	
	Если СодержаниеВыгрузки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru = 'Выгрузка прервана!';
													|en = 'Export is canceled.'"), НСтр("ru = 'В ходе проверки были найдены ошибки, препятствующие выгрузке.';
																						|en = 'Errors that prevent from export were found during check.'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		Если НЕ ТолькоПроверка Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		Если НЕ ТолькоПроверка Тогда
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//	Объект		- ДокументОбъект.ЗаявленеиеОВвозеТоваров (или ДокументСсылка.ЗаявлениеОВвозеТоваров)
//				  Ссылка на выгружаемый документ.
//
// Возвращаемое значение:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище (кроме режима только проверки документа).
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьУчетПеремещенияТоваров(УникальныйИдентификатор, Объект, ТолькоПроверка = Ложь) Экспорт
	
	Если ТолькоПроверка = Неопределено Тогда
		ТолькоПроверка = Ложь;
	КонецЕсли;
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru = 'Документ не записан. Выгрузка прервана!';
													|en = 'Document is not saved. Export is canceled. '"), НСтр("ru = 'Документ не записан. Проверка прервана!';
																											|en = 'Document is not saved. Check is canceled.'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ДанныеДокумента = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов);
	
	СодержаниеВыгрузки = УчетПеремещенияТоваровЭлектронноеПредставление(ДанныеДокумента);
	
	Если СодержаниеВыгрузки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru = 'Выгрузка прервана!';
													|en = 'Export is canceled.'"), НСтр("ru = 'В ходе проверки были найдены ошибки, препятствующие выгрузке.';
																						|en = 'Errors that prevent from export were found during check.'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
		
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		Если НЕ ТолькоПроверка Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		Если НЕ ТолькоПроверка Тогда
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ПроведениеПоРеглУчету

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	#Область ТекстЗаявлениеНДСКОплате
	ТекстЗаявлениеНДСКОплате = 
	"ВЫБРАТЬ // Заявление НДС к оплате ПО рег. НДСПредъявленный <Дт 19.10, 19.07 :: Кт 68.42> @НДСпредъявленный
	|
	|	Операция.Ссылка             КАК Ссылка,
	|	Операция.Дата               КАК Период,
	|	Операция.Организация        КАК Организация,
	|	НЕОПРЕДЕЛЕНО                КАК ИдентификаторСтроки,
	|
	|	СУММА(НДСПредъявленный.НДС) КАК Сумма,
	|	СУММА(НДСПредъявленный.НДСУпр) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаДт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаДт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеДт,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Операция.Контрагент        КАК СубконтоДт1,
	|	Операция.Ссылка            КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО               КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	&ВалютаРеглУчета                                          КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)    КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате) КАК СчетКт,
	|	Операция.Контрагент                  КАК СубконтоКт1,
	|	Операция.Договор                     КАК СубконтоКт2,
	|	Операция.Ссылка                      КАК СубконтоКт3,
	|	
	|	СУММА(НДСПредъявленный.НДС) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Заявление НДС к оплате"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Операция.Ссылка
	|		И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВводСобственныхСредств КАК ВводСобственныхСредств
	|	ПО ДокументыКОтражению.Ссылка = ВводСобственныхСредств.Ссылка
	|		И НДСПредъявленный.СчетФактура = ВводСобственныхСредств.СчетФактура
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.Договор,
	|	Операция.Ссылка,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности),
	|	НДСПредъявленный.ВидЦенности
	|";
	#КонецОбласти
	
	#Область ТекстНДСВСтоимость
	ТекстНДСВСтоимость = 
	"ВЫБРАТЬ  // Включение НДС В стоимость ПО рег. НДСПредъявленный <Дт 41 :: Кт 19.10> @НДСпредъявленный
	|
	|	Операция.Ссылка                         КАК Ссылка,
	|	Операция.Дата                           КАК Период,
	|	Операция.Организация                    КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК ИдентификаторСтроки,
	|
	|	СУММА(Строки.СуммаНДС)                  КАК Сумма,
	|	СУММА(НДСПредъявленный.НДСУпр)          КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе) КАК ВидСчетаДт,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Строки.ВидЗапасов.ГруппаФинансовогоУчета
	|	ИНАЧЕ
	|		Строки.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК АналитикаУчетаДт,
	|	ПриобретениеТоваровУслуг.Склад КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ПриобретениеТоваровУслуг.Склад.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.Номенклатура КАК СубконтоДт1,
	|	ПриобретениеТоваровУслуг.Склад КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаКт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаКт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеКт,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Операция.Контрагент                  КАК СубконтоКт1,
	|	Операция.Ссылка                      КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО                         КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Включение НДС в стоимость"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО Строки.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Строки.Ссылка
	|		И НДСПредъявленный.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВводСобственныхСредств КАК ВводСобственныхСредств
	|	ПО ДокументыКОтражению.Ссылка = ВводСобственныхСредств.Ссылка
	|		И НДСПредъявленный.СчетФактура = ВводСобственныхСредств.СчетФактура
	|	
	|ГДЕ
	|	НЕ ПриобретениеТоваровУслуг.Склад.ЦеховаяКладовая
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.Ссылка,
	|	Строки.Номенклатура,
	|	Строки.ВидЗапасов,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности),
	|	НДСПредъявленный.ВидЦенности,
	|	ПриобретениеТоваровУслуг.Склад
	|";
	#КонецОбласти
	
	#Область ТекстНДСВСтоимостьСкладПроизводства
	ТекстНДСВСтоимостьСкладПроизводства = 
	"ВЫБРАТЬ  // Включение НДС В стоимость ПО рег. НДСПредъявленный на производственном складе <Дт 20 :: Кт 19.10> @НДСпредъявленный
	|
	|	Операция.Ссылка                         КАК Ссылка,
	|	Операция.Дата                           КАК Период,
	|	Операция.Организация                    КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК ИдентификаторСтроки,
	|
	|	СУММА(Строки.СуммаНДС)                  КАК Сумма,
	|	СУММА(НДСПредъявленный.НДСУпр)          КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Производство) КАК ВидСчетаДт,
	|	Строки.ВидЗапасов.ГруппаПродукции КАК АналитикаУчетаДт,
	|	ПриобретениеТоваровУслуг.Склад.Подразделение КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ПриобретениеТоваровУслуг.Склад.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.МатериальныеЗатраты) КАК СубконтоДт1,
	|	Строки.Номенклатура КАК СубконтоДт2,
	|	Строки.ВидЗапасов.ГруппаПродукции КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаКт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаКт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеКт,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Операция.Контрагент                  КАК СубконтоКт1,
	|	Операция.Ссылка                      КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО                         КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Включение НДС в стоимость"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО Строки.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Строки.Ссылка
	|		И НДСПредъявленный.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВводСобственныхСредств КАК ВводСобственныхСредств
	|	ПО ДокументыКОтражению.Ссылка = ВводСобственныхСредств.Ссылка
	|		И НДСПредъявленный.СчетФактура = ВводСобственныхСредств.СчетФактура
	|	
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Склад.ЦеховаяКладовая
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.Ссылка,
	|	Строки.Номенклатура,
	|	Строки.ВидЗапасов,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности),
	|	НДСПредъявленный.ВидЦенности,
	|	ПриобретениеТоваровУслуг.Склад
	|";
	#КонецОбласти
	
	ТекстыОтражения = Новый Массив;
	ТекстыОтражения.Добавить(ТекстЗаявлениеНДСКОплате);
	ТекстыОтражения.Добавить(ТекстНДСВСтоимость);
	ТекстыОтражения.Добавить(ТекстНДСВСтоимостьСкладПроизводства);
	
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//		Строка - Текст запроса
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаявлениеОВвозеТоваров";
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.Валюта,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	ЗаявлениеОВвозеТоваров.РучнаяКорректировкаЖурналаСФ,
	|	ЗаявлениеОВвозеТоваров.Номер                    КАК Номер,
	|	ЗаявлениеОВвозеТоваров.Договор                  КАК Договор,
	|	ЗаявлениеОВвозеТоваров.Ответственный            КАК Ответственный,
	|	ЗаявлениеОВвозеТоваров.Подразделение            КАК Подразделение,
	|	ЗаявлениеОВвозеТоваров.Комментарий              КАК Комментарий,
	|	ЗаявлениеОВвозеТоваров.ПометкаУдаления          КАК ПометкаУдаления,
	|	ЗаявлениеОВвозеТоваров.Проведен                 КАК Проведен,
	|	ЗаявлениеОВвозеТоваров.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Дата);
	Запрос.УстановитьПараметр("КодВидаОперации", 			"19"); // "19 Ввоз товаров из Евразийского экономического союза"
	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр("НомерНаПечать",       	       ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер,Истина));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",         Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.ЗакупкаВСтранахЕАЭС);
	
	Запрос.УстановитьПараметр("СуммаНДС",                      ДокументСсылка.Товары.Итог("СуммаНДС"));
	Запрос.УстановитьПараметр("НалоговаяБазаНДС",              ДокументСсылка.Товары.Итог("НалоговаяБазаНДС"));
	Запрос.УстановитьПараметр("РучнаяКорректировкаЖурналаСФ",  Реквизиты.РучнаяКорректировкаЖурналаСФ);
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru = 'По договору ""%Договор%""';
									|en = 'Under the ""%Договор%"" contract'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	&ПустоеНазначение КАК Назначение,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры.МестоХранения КАК МестоХранения
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаТовары.АналитикаУчетаНоменклатуры.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.Характеристика = Аналитика.Характеристика
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.Серия = Аналитика.Серия
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.МестоХранения = Аналитика.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = Аналитика.Назначение
	//++ НЕ УТ
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	//-- НЕ УТ
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|	И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Процедура ИнициализироватьКурсыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Запрос.Параметры.Организация),
		Константы.ВалютаУправленческогоУчета.Получить(),
		Запрос.Параметры.Период,
		Запрос.Параметры.Организация);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозе(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюЗаявленийОВвозе";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки           КАК НомерСтроки,
	|	&Период                                            КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления   КАК ДокументПоступления,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура          КАК Номенклатура,
	|	ЗаявлениеОВвозеТоваровТовары.Характеристика        КАК Характеристика,
	|	ЗаявлениеОВвозеТоваровТовары.Серия                 КАК Серия,
	|	ЗаявлениеОВвозеТоваровТовары.Склад                 КАК Склад,
	|	ЗаявлениеОВвозеТоваровТовары.Количество            КАК КОформлению,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость    КАК ФактурнаяСтоимость
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Товары"" 											КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО										КАК Поставщик,
	|	ДанныеДокумента.Контрагент							КАК Контрагент,
	|	ТаблицаДокумента.СтавкаНДС 							КАК СтавкаНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)	КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТоварыПоступления"" 								КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер					КАК Поставщик,
	|	ДанныеДокументаПоступления.Контрагент				КАК Контрагент,
	|	МИНИМУМ(ТаблицаДокументаПоступления.СтавкаНДС)		КАК СтавкаНДС,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность	КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ГФУ.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ТаблицаДокументаПоступления.Ссылка
	|		И ТаблицаДокумента.Номенклатура = ТаблицаДокументаПоступления.Номенклатура
	|		И ТаблицаДокумента.Характеристика = ТаблицаДокументаПоступления.Характеристика
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ДанныеДокументаПоступления.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ТаблицаДокумента.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК ГФУ
	|		ПО СпрНоменклатура.ГруппаФинансовогоУчета = ГФУ.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер,
	|	ДанныеДокументаПоступления.Контрагент,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность,
	|	ЕСТЬNULL(ГФУ.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокументаПоступления.СтавкаНДС) = 1
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата							КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ДанныеДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ДокументПоступления				КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.Ссылка 							КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр 
	|						* ТоварыДокумента.СуммаНДС) КАК Стоимость,
	|	0										 		КАК СтоимостьБезНДС,
	|	0										 		КАК СтоимостьРегл,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)										КАК НДСРегл,
	|	ТоварыДокумента.Подразделение					КАК ПодразделениеРасходов,
	|	0												КАК ПостояннаяРазница,
	|	0												КАК ВременнаяРазница
	|
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ПартионныйУчетВерсии21
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ТоварыДокумента.ДокументПоступления,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий,
	|	ТоварыДокумента.Подразделение
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииНДСКРаспределению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииНДСКРаспределению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	ДанныеДокумента.Контрагент КАК Поставщик,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз) КАК ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС,
	|
	|	0                        КАК СтоимостьРегл,
	|	ТоварыДокумента.СуммаНДС КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		ИНАЧЕ 0 КОНЕЦ        КАК НДСУпр,
	|	
	|	ТоварыДокумента.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И ТоварыДокумента.СуммаНДС <> 0
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период													КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)					КАК ВидДвижения,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ                                                   КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ 													КАК РазделУчета,
	|	ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов) КАК ВидЗапасов,
	|	ДанныеДокумента.Организация												КАК Организация,
	|
	//	партионный учет версии 2.2
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК Партия,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПриобретениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПриобретениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПриобретениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПриобретениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаФинансовогоУчета,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПриобретениеТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаСтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода) КОНЕЦ КАК ТипЗаписи,
	|
	|	0																		КАК Количество,
	|	0																		КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС)		КАК ДопРасходы,
	|	0																		КАК СтоимостьБезНДС,
	|	0																		КАК ДопРасходыБезНДС,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций
	|	 И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК ДопРасходыУпр,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСУпр,
	|
	|	СУММА(ВЫБОР КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК ДопРасходыРегл,
	|	0																		КАК ПостояннаяРазница,
	|	0																		КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)		КАК ХозяйственнаяОперация,
	|	ТоварыДокумента.Подразделение											КАК Подразделение,
	|	ТоварыДокумента.ДокументПоступления										КАК ДокументИсточник,
	|	
	|	ТоварыДокумента.ИдентификаторСтроки                                     КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                                         КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
	|	ПО 
	|		ТоварыПоступления.Ссылка = ТоварыДокумента.ДокументПоступления
	|		И ВЫБОР 
	|			КОГДА ТоварыПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТоварыПоступления.ИдентификаторСтроки = ТоварыДокумента.ИдентификаторСтроки
	|			ИНАЧЕ
	|				ТоварыПоступления.АналитикаУчетаНоменклатуры = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ПО
	|		ТоварыДокумента.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартийПоступления
	|	ПО ТаблицаАналитикУчетаПартийПоступления.НомерСтроки 	   = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартийПоступления.ИмяТабличнойЧасти = ""ТоварыПоступления""
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО ТоварыДокумента.АналитикаУчетаНоменклатуры.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И ТоварыДокумента.АналитикаУчетаНоменклатуры.Характеристика = АналитикаБезНазначения.Характеристика
	|		И ТоварыДокумента.АналитикаУчетаНоменклатуры.Серия = АналитикаБезНазначения.Серия
	|		И ТоварыДокумента.АналитикаУчетаНоменклатуры.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	//++ НЕ УТ 
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	//-- НЕ УТ
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.СуммаНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов),
	|	ДанныеДокумента.Организация,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПриобретениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПриобретениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПриобретениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПриобретениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПриобретениеТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаСтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода) КОНЕЦ,
	|	ТоварыДокумента.Подразделение,
	|	ТоварыДокумента.ДокументПоступления,
	|	ТоварыДокумента.ИдентификаторСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                               КАК ВидДвижения,
	|	ДанныеДокумента.Организация                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)               КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)            КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы) КАК Статья,
	|	ДанныеДокумента.Организация                                          КАК Аналитика,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента 
	|					* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";

	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Операция.Дата                                              КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС) КАК ХозяйственнаяОперация,
	|	Операция.Организация                                       КАК Организация,
	|	ПриобретениеТоваровУслугТовары.Подразделение                КАК Подразделение,
	|	ПриобретениеТоваровУслуг.Менеджер                           КАК Менеджер,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры                 КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад                                      КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов                      КАК ТипЗапасов,
	|	ТоварыДокумента.ВидЗапасов                                  КАК ВидЗапасов,
	|	ПриобретениеТоваровУслуг.Партнер                            КАК Партнер,
	|	ПриобретениеТоваровУслуг.Контрагент                         КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Соглашение                         КАК Соглашение,
	|	ПриобретениеТоваровУслуг.Договор                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиНоменклатуры,
	|	ПриобретениеТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	0                                                          КАК Количество,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Сумма,
	|	0                                                          КАК СуммаБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаРегл,
	|	0                                                          КАК СуммаРеглБезНДС,
	|	0                                                          КАК СуммаСкидки,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Стоимость,
	|	0                                                          КАК СтоимостьБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СтоимостьРегл,
	|	0                                                          КАК ДопРасходы,
	|	0                                                          КАК ДопРасходыБезНДС,
	|
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаДокумента,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеДокумента,
	|	0                                                          КАК СуммаБезНДСВВалютеДокумента,
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаВзаиморасчетов,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                          КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ                                                      КАК ИсточникГФУНоменклатуры,
	|	ПриобретениеТоваровУслугТовары.ОбъектРасчетов              КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО ПриобретениеТоваровУслугТовары.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|		ПО ТоварыДокумента.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|		И ВЫБОР 
	|			КОГДА ПриобретениеТоваровУслугТовары.ИдентификаторСтроки <> """" ТОГДА
	|				ТоварыДокумента.ИдентификаторСтроки = ПриобретениеТоваровУслугТовары.ИдентификаторСтроки
	|			ИНАЧЕ
	|				ТоварыДокумента.АналитикаУчетаНоменклатуры = ПриобретениеТоваровУслугТовары.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ТоварыДокумента.Ссылка = Операция.Ссылка
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО             КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&Договор                 КАК Договор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ДанныеДокумента.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоМестХранения = 1
	|			ТОГДА ДанныеДокумента.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Ответственный           КАК Ответственный,
	|	&Комментарий             КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	&СуммаДокумента          КАК Сумма,
	//++ НЕ УТ
	|	ВЫБОР
	|		КОГДА &РучнаяКорректировкаЖурналаСФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК Статус,
	//-- НЕ УТ
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&Период                  КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента,
	|	&Период                  КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО             КАК Приоритет
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаВтНДСПоЗаявлениюОВвозе(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтНДСПоЗаявлениюОВвозе";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяРегистра, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ИнициализироватьКурсыВалют(Запрос);
	УчетНДСУПСлужебный.УстановитьПараметрТипыНалогообложенияНДСПоступления(Запрос);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаНДСПоНаправлениямДеятельности", УчетНДСУП.НастройкиУчета().ДатаНачалаУчетаНДСПоНаправлениямДеятельности);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	Операция.Дата КАК Период,
	|	Операция.Организация  КАК Организация,
	|	&Ссылка КАК СчетФактура,
	|	Операция.Контрагент  КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС  КАК СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА Операция.Дата >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности ТОГДА
	|		Строки.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	0 КАК СуммаБезНДС,
	|	Строки.СуммаНДС КАК НДС,
	|	ВЫБОР 
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА Строки.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСУпр,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеНДСНалоговымАгентом) КАК НастройкаХозяйственнойОперации
	|ПОМЕСТИТЬ ВтНДСПоЗаявлениюОВвозе
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтНДСПоЗаявлениюОВвозе", ТекстыЗапроса) Тогда
		ТекстЗапросаВтНДСПоЗаявлениюОВвозе(Запрос, ТекстыЗапроса)
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	НДСПоЗаявлениюОВвозе.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НДСПоЗаявлениюОВвозе.Период КАК Период,
	|	НДСПоЗаявлениюОВвозе.Организация КАК Организация,
	|	НДСПоЗаявлениюОВвозе.СчетФактура КАК СчетФактура,
	|	НДСПоЗаявлениюОВвозе.Поставщик КАК Поставщик,
	|	НДСПоЗаявлениюОВвозе.ВидЦенности КАК ВидЦенности,
	|	НДСПоЗаявлениюОВвозе.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА НДСПоЗаявлениюОВвозе.ВидДеятельностиНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	ИНАЧЕ
	|		НДСПоЗаявлениюОВвозе.ВидДеятельностиНДС
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО КАК РеализацияЭкспорт,
	|	НДСПоЗаявлениюОВвозе.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НДСПоЗаявлениюОВвозе.СуммаБезНДС КАК СуммаБезНДС,
	|	НДСПоЗаявлениюОВвозе.НДС КАК НДС,
	|	НДСПоЗаявлениюОВвозе.НДСУпр КАК НДСУпр,
	|	НЕОПРЕДЕЛЕНО КАК Событие,
	|	НЕОПРЕДЕЛЕНО КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ КАК РегламентнаяОперация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	НДСПоЗаявлениюОВвозе.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	НДСПоЗаявлениюОВвозе.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтНДСПоЗаявлениюОВвозе КАК НДСПоЗаявлениюОВвозе
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПоЗаявлениюОВвозе.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	НДСПоЗаявлениюОВвозе.Период КАК Период,
	|	НДСПоЗаявлениюОВвозе.Организация КАК Организация,
	|	НДСПоЗаявлениюОВвозе.СчетФактура КАК СчетФактура,
	|	НДСПоЗаявлениюОВвозе.Поставщик КАК Поставщик,
	|	НДСПоЗаявлениюОВвозе.ВидЦенности КАК ВидЦенности,
	|	НДСПоЗаявлениюОВвозе.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА НДСПоЗаявлениюОВвозе.ВидДеятельностиНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	ИНАЧЕ
	|		НДСПоЗаявлениюОВвозе.ВидДеятельностиНДС
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО КАК РеализацияЭкспорт,
	|	НДСПоЗаявлениюОВвозе.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НДСПоЗаявлениюОВвозе.СуммаБезНДС КАК СуммаБезНДС,
	|	НДСПоЗаявлениюОВвозе.НДС КАК НДС,
	|	НДСПоЗаявлениюОВвозе.НДСУпр КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость) КАК Событие,
	|	НДСПоЗаявлениюОВвозе.ВидДеятельностиНДС КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ КАК РегламентнаяОперация,
	|	НДСПоЗаявлениюОВвозе.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	НДСПоЗаявлениюОВвозе.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтНДСПоЗаявлениюОВвозе КАК НДСПоЗаявлениюОВвозе
	|ГДЕ
	|	НДСПоЗаявлениюОВвозе.ВидДеятельностиНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоНДС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоНДС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтНДСПоЗаявлениюОВвозе", ТекстыЗапроса) Тогда
		ТекстЗапросаВтНДСПоЗаявлениюОВвозе(Запрос, ТекстыЗапроса)
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДСПоЗаявлениюОВвозе.Регистратор КАК Регистратор,
	|	НДСПоЗаявлениюОВвозе.Период КАК Период,
	|	НДСПоЗаявлениюОВвозе.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейДвиженийПоНДС.Исходящий) КАК ТипЗаписи,
	|	НДСПоЗаявлениюОВвозе.Поставщик КАК Контрагент,
	|	НДСПоЗаявлениюОВвозе.СчетФактура КАК СчетФактура,
	|	НДСПоЗаявлениюОВвозе.СтавкаНДС КАК СтавкаНДС,
	|	НДСПоЗаявлениюОВвозе.ВидЦенности КАК ВидЦенности,
	|	НДСПоЗаявлениюОВвозе.СуммаБезНДС КАК СуммаБезНДС,
	|	НДСПоЗаявлениюОВвозе.НДС КАК НДС,
	|	НДСПоЗаявлениюОВвозе.НДСУпр КАК НДСУпр,
	|	ЛОЖЬ КАК РегламентнаяОперация,
	|	НДСПоЗаявлениюОВвозе.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	НДСПоЗаявлениюОВвозе.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	ЛОЖЬ КАК Сторно
	|ИЗ
	|	ВтНДСПоЗаявлениюОВвозе КАК НДСПоЗаявлениюОВвозе";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе(ЗаполнениеНаОсновании = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	ЕСТЬNULL(Товары.Назначение.ВидДеятельностиНДС, 
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДС,
	|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.НомерГТД КАК НомерТД,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументПоступления
	|	И НЕ &ИспользуетсяДокументПоступлениеТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугВидыЗапасов.Ссылка,
	|	ПриобретениеТоваровУслугВидыЗапасов.НомерСтроки,
	|	ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура,
	|	NULL,
	|	ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика,
	|	ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.Серия,
	|	ВЫБОР
	|		КОГДА ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|			ТОГДА ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС, 
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)),
	|	ПриобретениеТоваровУслугВидыЗапасов.НомерГТД.СтранаПроисхождения,
	|	ПриобретениеТоваровУслугВидыЗапасов.НомерГТД,
	|	ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ПриобретениеТоваровУслугВидыЗапасов.ВидЗапасов,
	|	ПриобретениеТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.Подразделение,
	|	ПриобретениеТоваровУслугВидыЗапасов.ИдентификаторСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК ПриобретениеТоваровУслугВидыЗапасов
	|ГДЕ
	|	&ИспользуетсяДокументПоступлениеТоваров
	|	И ПриобретениеТоваровУслугВидыЗапасов.Ссылка = &ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.КОформлениюОстаток  КАК КОформлению
	|ПОМЕСТИТЬ ОстаткиКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКОформлению
	|ГДЕ
	|	ТоварыКОформлению.КОформлениюОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.НомерСтроки,
	|	ТоварыКОформлению.ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура,
	|	СпрНоменклатура.ЕдиницаИзмерения,
	|	СпрНоменклатура.КодТНВЭД,
	|	СпрНоменклатура.ТипНоменклатуры,
	|	СпрНоменклатура.СтавкаНДС,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.ФактурнаяСтоимость,
	|	ТоварыКОформлению.КОформлению,
	|	ТоварыКОформлению.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе КАК ТоварыКОформлению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыКОформлению.Номенклатура = СпрНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиКОформлению КАК ОстаткиКОформлению
	|	ПО
	|		ТоварыКОформлению.ДокументПоступления = ОстаткиКОформлению.ДокументПоступления
	|		И ТоварыКОформлению.Номенклатура = ОстаткиКОформлению.Номенклатура
	|		И ТоварыКОформлению.Характеристика = ОстаткиКОформлению.Характеристика
	|		И ТоварыКОформлению.Серия = ОстаткиКОформлению.Серия
	|		И ТоварыКОформлению.Склад = ОстаткиКОформлению.Склад
	|ГДЕ
	|	ТоварыКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И (НЕ &ЗаполнениеНаОсновании 
	|		ИЛИ НЕ ОстаткиКОформлению.ДокументПоступления ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.КодТНВЭД            КАК КодТНВЭД,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ТоварыКОформлению.КОформлению         КАК Количество,
	|	ТоварыКОформлению.ФактурнаяСтоимость  КАК ФактурнаяСтоимость,
	|	Суммы.БазаНДСРегл                     КАК НалоговаяБазаНДС,
	|	ТоварыКОформлению.СтавкаНДС           КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА НЕ КурсВалютыДолларСША.КурсЧислитель ЕСТЬ NULL 
	|			ТОГДА Суммы.БазаНДСРегл / (КурсВалютыДолларСША.КурсЧислитель / КурсВалютыДолларСША.КурсЗнаменатель)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатСтоимостьДолларыСША,
	|	&ТекстЗапросаВес * ТоварыКОформлению.КОформлению 	 КАК ВесНеттоКг,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения = ТоварыКОформлению.ЕдиницаИзмерения
	|			ТОГДА 1
	|		КОГДА ТоварыКОформлению.ЕдиницаИзмерения.ЕдиницаИзмерения = ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения
	|				И ТоварыКОформлению.ЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА ТоварыКОформлению.ЕдиницаИзмерения.Числитель / ТоварыКОформлению.ЕдиницаИзмерения.Знаменатель
	|		КОГДА ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.Числитель = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.ТипИзмеряемойВеличины
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|					ТОГДА &ТекстЗапросаВес
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|					ТОГДА &ТекстЗапросаОбъем
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|					ТОГДА &ТекстЗапросаПлощадь
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|					ТОГДА &ТекстЗапросаДлина
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|					ТОГДА &ТекстЗапросаКоличествоШтук
	|				ИНАЧЕ 0
	|			КОНЕЦ * ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.Знаменатель / ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.Числитель 
	|	КОНЕЦ * ТоварыКОформлению.КОформлению КАК КоличествоПоТНВЭД,
	|	Суммы.БазаНДСРегл                КАК НалоговаяБазаАкцизы,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.СтранаПроисхождения, Операция.Контрагент.СтранаРегистрации) КАК СтранаПроисхождения,
	|	ПриобретениеТоваровУслугТовары.НомерТД КАК НомерТД,
	|
	|	Операция.Валюта                  КАК Валюта,
	|	Операция.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	Операция.ДатаВходящегоДокумента  КАК ДатаТСД,
	|	Операция.Договор                 КАК Договор,
	|	ВЫБОР 
	|		КОГДА ПриобретениеТоваровУслугТовары.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			ТОГДА ПриобретениеТоваровУслугТовары.ВидДеятельностиНДС
	|		ИНАЧЕ Операция.ЗакупкаПодДеятельность
	|	КОНЕЦ КАК ЗакупкаПодДеятельность,
	|
	|	ПриобретениеТоваровУслугТовары.НоменклатураПартнера     КАК НоменклатураПартнера,
	|	ПриобретениеТоваровУслугТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПриобретениеТоваровУслугТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ПриобретениеТоваровУслугТовары.Подразделение              КАК Подразделение,
	|	ПриобретениеТоваровУслугТовары.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|
	|	&ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	&ВидТранспорта      КАК ВидТранспорта
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Операция
	|		ПО ТоварыКОформлению.ДокументПоступления = Операция.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ТоварыКОформлению.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ТоварыКОформлению.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ТоварыКОформлению.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|			И ТоварыКОформлению.Серия = ПриобретениеТоваровУслугТовары.Серия
	|			И ТоварыКОформлению.Склад = ПриобретениеТоваровУслугТовары.Склад
	|			И ТоварыКОформлению.ИдентификаторСтроки = ПриобретениеТоваровУслугТовары.ИдентификаторСтроки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|		ПО Суммы.Регистратор = Операция.Ссылка
	|			И Суммы.ИдентификаторСтроки = ПриобретениеТоваровУслугТовары.ИдентификаторСтроки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, Валюта = &ДолларСША И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыДолларСША
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И ТоварыКОформлению.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъем", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПлощадь", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаПлощадьУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДлина", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаДлинаУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоличествоШтук", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                                             КАК Ссылка,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))                  КАК МестоХранения,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))                  КАК КоличествоМестХранения
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаТовары
	|		ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	&Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Период КАК Период,
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки КАК КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки КАК ИндексСтроки,
	|	ЖурналУчетаСчетовФактур.Сторно КАК Сторно,
	|	ЖурналУчетаСчетовФактур.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйПокупателю КАК СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.СчетФактураПолученныйОтПродавца КАК СчетФактураПолученныйОтПродавца,
	|	ЖурналУчетаСчетовФактур.ИсправлениеСобственнойОшибки КАК ИсправлениеСобственнойОшибки,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.Продавец КАК Продавец,
	|	ЖурналУчетаСчетовФактур.КППКонтрагента КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактур.Посредник КАК Посредник,
	|	ЖурналУчетаСчетовФактур.УдалитьСчетФактураВыданныйПокупателю КАК УдалитьСчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.Субкомиссионер КАК Субкомиссионер,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыПродавца КАК НомерСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреКомиссия КАК СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСКомиссия КАК СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеКомиссия КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеКомиссия КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.КодВидаОперацииКомиссия КАК КодВидаОперацииКомиссия,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыПродавца КАК ДатаСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.ИННКонтрагента КАК ИННКонтрагента,
	|	ЖурналУчетаСчетовФактур.ИННПродавца КАК ИННПродавца,
	|	ЖурналУчетаСчетовФактур.КПППродавца КАК КПППродавца,
	|	ЖурналУчетаСчетовФактур.ИННСубкомиссионера КАК ИННСубкомиссионера,
	|	ЖурналУчетаСчетовФактур.КППСубкомиссионера КАК КППСубкомиссионера
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Регистратор = &Ссылка
	|	И &РучнаяКорректировкаЖурналаСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.НомерОтметкиОРегистрации, """") КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, &Период) КАК ДатаСчетаФактуры,
	|	""19"" КАК КодВидаОперации,
	|	2 КАК КодВидаСделки,
	|	1 КАК КодСпособаПолучения,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	&НалоговаяБазаНДС КАК СуммаПоСчетуФактуре,
	|	&СуммаНДС КАК СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура = &Ссылка
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|	И НЕ &РучнаяКорректировкаЖурналаСФ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устарела. Следует использовать УчетНДСУП.СформироватьДвиженияВРегистры().
//
// Процедура формирования движений по регистру "Товары к оформлению заявлений о ввозе".
//
// Параметры:
//	ДополнительныеСвойства - Структура, перечень таблиц значений для записи в регистры
//	Движения - Коллекция движений документа
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьТоварыКОформлениюЗаявленийОВвозеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТоварыКОформлениюЗаявленийОВвозе = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров;
	
	Если Отказ ИЛИ ТаблицаТоварыКОформлениюЗаявленийОВвозе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКОформлениюЗаявленийОВвозе = Движения.ТоварыКОформлениюЗаявленийОВвозе;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Записывать = Истина;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Загрузить(ТаблицаТоварыКОформлениюЗаявленийОВвозе);
	
КонецПроцедуры

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                      КАК Период,
	|	&Организация                 КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ЗаявлениеОВвозеТоваров";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	ЗначенияПараметров.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

// Переформировывает движения в ЖурналУчетаСчетовФактур без перепроведения документа.
// Формирует задание на отражение в книге покупок.
// Сбрасывает статус отражения в регл. учете.
//
// Параметры:
//	МассивДокументов - Массив - Документы, движения которых необходимо актуализировать.
//	ПризнакОтменаПроведения - Булево - Признак, что переформировать движения необходимо по причине отмены проведения документа.
//
Процедура СформироватьДвиженияВЖурналУчетаСчетовФактур(МассивРегистраторов, ПризнакОтменаПроведения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявления.Ссылка КАК СчетФактура,
	|	Заявления.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеОплатыВБюджет.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|	ДанныеОплатыВБюджет.ДатаПодтвержденияОплаты КАК ДатаОтражения
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ДанныеОплатыВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Заявления
	|		ПО ДанныеОплатыВБюджет.СчетФактура = Заявления.Ссылка
	|ГДЕ
	|	ДанныеОплатыВБюджет.СчетФактура В(&МассивРегистраторов)
	|	И ДанныеОплатыВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|	И Заявления.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявления.Ссылка,
	|	Заявления.Организация,
	|	НАЧАЛОПЕРИОДА(ЖурналУчетаСчетовФактур.ДатаСчетаФактуры, МЕСЯЦ),
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Заявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ЖурналУчетаСчетовФактур.СчетФактура = Заявления.Ссылка
	|ГДЕ
	|	Заявления.Ссылка В(&МассивРегистраторов)
	|	И Заявления.Проведен
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	МассивСчетовФактур = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналУчетаСчетовФактур.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			//++ НЕ УТ
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВРеглУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			//-- НЕ УТ
			//++ НЕ УТКА
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВМеждународномУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Международный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			//-- НЕ УТКА
			
			Блокировка.Заблокировать();
			
			Движения = Новый Структура;
			
			ЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			ЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("ЖурналУчетаСчетовФактур", ЖурналУчетаСчетовФактур);
			
			//++ НЕ УТ
			ОтражениеДокументовВРеглУчете = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
			ОтражениеДокументовВРеглУчете.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("ОтражениеДокументовВРеглУчете", ОтражениеДокументовВРеглУчете);
			
			Хозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			Хозрасчетный.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("Хозрасчетный", Хозрасчетный);
			//-- НЕ УТ
			
			//++ НЕ УТКА
			ОтражениеДокументовВМеждународномУчете = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			ОтражениеДокументовВМеждународномУчете.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("ОтражениеДокументовВМеждународномУчете", ОтражениеДокументовВМеждународномУчете);
			
			Международный = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
			Международный.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("Международный", Международный);
			//-- НЕ УТКА
			
			Регистры = Новый Структура;
			Регистры.Вставить("ЖурналУчетаСчетовФактур");
			//++ НЕ УТ
			Регистры.Вставить("ОтражениеДокументовВРеглУчете");
			//-- НЕ УТ
			//++ НЕ УТКА
			Регистры.Вставить("ОтражениеДокументовВМеждународномУчете");
			//-- НЕ УТКА
			
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Выборка.СчетФактура, Регистры);
			УчетНДСУП.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Ложь);
			
			ВыборкаДатыОтражения = Выборка.Выбрать();
			РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаДатыОтражения);
			
			//++ НЕ УТ
			ТаблицаВыборочнойРегистрации = РеглУчетПроведениеСервер.ТаблицаВыборочнойРегистрацииКОтражению();
			ВыборкаДатыОтражения = Выборка.Выбрать();
			Пока ВыборкаДатыОтражения.Следующий() Цикл
				РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
					ТаблицаВыборочнойРегистрации,
					ВыборкаДатыОтражения.Организация,
					ВыборкаДатыОтражения.ДатаОтражения);
			КонецЦикла;
			Если ЗначениеЗаполнено(ТаблицаВыборочнойРегистрации) Тогда
				ТаблицыДляДвижений.Вставить("ТаблицаВыборочнойРегистрацииКОтражению", ТаблицаВыборочнойРегистрации);
			КонецЕсли;
			
			РеглУчетПроведениеСервер.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Ложь);
			//-- НЕ УТ
			
			//++ НЕ УТКА
			МеждународныйУчетПроведениеСервер.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Ложь);
			//-- НЕ УТКА
			
			Для каждого Движение Из Движения Цикл
				Движение.Значение.Записать();
			КонецЦикла;
			
			//++ НЕ УТКА
			Документ = Новый Структура("Ссылка, Движения", Выборка.СчетФактура, Движения);
			МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(Документ, Новый Структура, Движения, Ложь);
			//-- НЕ УТКА
			
			МассивСчетовФактур.Добавить(Выборка.СчетФактура);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить отражение в учете НДС документа ""%1"" по причине: %2';
						|en = 'Cannot record VAT document ""%1"" in accounting due to: %2'"),
					Выборка.СчетФактура,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	ДополнительныеПараметры.Добавить("КоэффициентПересчетаВВалютуУпр");
	ДополнительныеПараметры.Добавить("КоэффициентПересчетаВВалютуРегл");
	
	Если Запрос <> Неопределено Тогда
		ИнициализироватьКурсыВалют(Запрос);
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтТаблицаАналитикУчетаПартий");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область ВнешнееПоступление_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 					КАК Период,
	|	ТаблицаДокумента.Ссылка 				КАК Ссылка,
	|	ТаблицаВидыЗапасов.ДокументПоступления	КАК ДокументИсточник,
	|	ПриобретениеТоваровУслуг.Дата			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 							КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 										  КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 						  КАК АналитикаУчетаНоменклатуры,
	|	ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТаблицаВидыЗапасов.ВидЗапасов) КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ДокументПоступления 								  КАК Партия,
	|	ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС			  КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО									  					  КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий 	КАК АналитикаУчетаПартий,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 														КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО 					КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 	КАК Контрагент,
	|	ТаблицаВидыЗапасов.СтавкаНДС 	КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ПриобретениеТоваровУслуг.Сделка			КАК Сделка,
	|	ПриобретениеТоваровУслуг.Подразделение 	КАК Подразделение,
	|	ПриобретениеТоваровУслуг.Менеджер 		КАК Менеджер,
	|
	// Количественные и суммовые показатели
	|	0 										КАК Количество,
	|	НЕОПРЕДЕЛЕНО 							КАК ИдентификаторСтроки,
	|	0 										КАК Стоимость,
	|	0 										КАК СтоимостьБезНДС,
	|	0 										КАК СтоимостьРегл,
	|	ВЫБОР КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|		ТОГДА 0 
	|		ИНАЧЕ ТаблицаВидыЗапасов.СуммаНДС
	|	КОНЕЦ	 								КАК НДСРегл,
	|	0 										КАК СтоимостьУпр,
	|	ВЫБОР КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|		ТОГДА 0 
	|		ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТаблицаВидыЗапасов.СуммаНДС
	|	КОНЕЦ	 								КАК НДСУпр,
	|	0 										КАК СтоимостьЗабалансовая,
	|	0 										КАК СтоимостьЗабалансоваяРегл,
	|	&КоэффициентПересчетаВВалютуУпр * ТаблицаВидыЗапасов.СуммаНДС			КАК ДопРасходы,
	|	0										КАК ДопРасходыБезНДС,
	|	ВЫБОР КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА &КоэффициентПересчетаВВалютуРегл * ТаблицаВидыЗапасов.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ									КАК ДопРасходыРегл,
	|	ВЫБОР КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА &КоэффициентПересчетаВВалютуУпр * ТаблицаВидыЗапасов.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ									КАК ДопРасходыУпр,
	|	0 										КАК ПостояннаяРазница,
	|	0 										КАК ВременнаяРазница,
	|	0										КАК КорСтоимость,
	|
	// Прочие поля
	|	(ВЫБОР
	|		КОГДА ПриобретениеТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС) КОНЕЦ) КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки   						 КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации               					 КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
	|		ПО ТоварыПоступления.Ссылка = ТаблицаВидыЗапасов.ДокументПоступления
	|		И ВЫБОР КОГДА ТоварыПоступления.ИдентификаторСтроки <> """"
	|			ТОГДА ТоварыПоступления.ИдентификаторСтроки = ТаблицаВидыЗапасов.ИдентификаторСтроки
	|			ИНАЧЕ ТоварыПоступления.АналитикаУчетаНоменклатуры = ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		  КОНЕЦ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ТаблицаДокумента
	|		ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ПО ТаблицаВидыЗапасов.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартийПоступления
	|		ПО ТаблицаАналитикУчетаПартийПоступления.НомерСтроки 	   = ТаблицаВидыЗапасов.НомерСтроки
	|		 И ТаблицаАналитикУчетаПартийПоступления.ИмяТабличнойЧасти = ""ТоварыПоступления""
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТаблицаВидыЗапасов.НомерСтроки
	|		 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.СуммаНДС <> 0";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти

	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПечати

Функция ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПартнеров", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров"));
	Запрос.УстановитьПараметр("ПервичноеЗаявление", НСтр("ru = 'первичное заявление';
														|en = 'primary application'"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументСсылка,
	|	Реквизиты.Номер КАК НомерЗаяв,
	|	Реквизиты.Дата КАК ДатаДокНП,
	|	Реквизиты.Дата КАК Дата,
	|	ДЕНЬ(Реквизиты.Дата) КАК Число,
	|	МЕСЯЦ(Реквизиты.Дата) КАК Месяц,
	|	ГОД(Реквизиты.Дата) КАК Год,
	|	НЕОПРЕДЕЛЕНО КАК СтрВсего,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.НаименованиеПолное = """"
	|			ТОГДА Реквизиты.Контрагент.Наименование
	|		ИНАЧЕ Реквизиты.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПродавецНаимОрг,
	|	Реквизиты.Контрагент.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	Реквизиты.Контрагент.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	Реквизиты.НомерДоговора КАК НомерДог,
	|	Реквизиты.ДатаДоговора КАК ДатаДог,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ИННОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК НаимОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныОрг1,
	|	НЕОПРЕДЕЛЕНО КАК МестоНахождОрг_1,
	|	ЛОЖЬ КАК КомиссионерБайконур,
	|	НЕОПРЕДЕЛЕНО КАК НомКонтр_2,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр_2,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК РеквизитыПосредник,
	|	ЛОЖЬ КАК ПрЛизинг,
	|	ЛОЖЬ КАК ПрДавСырья,
	|	ЛОЖЬ КАК ПрПродФЛ,
	|	Реквизиты.Организация.ИНН КАК ПокупательИНН,
	|	Реквизиты.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО ПокупательНаимОрг,
	|	""643"" КАК КодСтраныПокупатель,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	Реквизиты.Проведен,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Договор,
	|	Реквизиты.Валюта,
	|	Реквизиты.Ответственный,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.Валюта.Код,
	|	НЕОПРЕДЕЛЕНО КАК ФИОРук,
	|	НЕОПРЕДЕЛЕНО КАК ФИОБух,
	|	Реквизиты.Дата КАК ДатаПодписиРук,
	|	Реквизиты.Дата КАК ДатаПодписиБух,
	|	&ПервичноеЗаявление КАК ПричинаЗаявления,
	|	"""" КАК НомерОтметки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтметки,
	|	0 КАК ИзмениеЦеныМесяц,
	|	0 КАК ИзмениеЦеныГод,
	|	Реквизиты.ИспользоватьАкцизы КАК ИспользоватьАкцизы
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спецификации.НомерСпецификации КАК Номер,
	|	Спецификации.ДатаСпецификации КАК Дата,
	|	Спецификации.НомерСтроки КАК НомерСтроки,
	|	Спецификации.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаСпецификацииКонтрагента = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК П000010000101,
	|	ВЫБОР
	|		КОГДА &ИспользоватьНоменклатуруПартнеров И
	|				Товары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) ТОГДА
	|			Товары.НоменклатураПартнера.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА Товары.Номенклатура.Наименование
	|				ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК П000010000102,
	|	Товары.КодТНВЭД.Код КАК П000010000103,
	|	Товары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Товары.Количество КАК П000010000105,
	|	Товары.ФактурнаяСтоимость КАК П000010000106,
	|	Товары.СерияНомерТСД КАК П000010000109,
	|	Товары.ДатаТСД КАК ДатаТСД,
	|	Товары.НомерСчетаФактуры КАК П000010000111,
	|	Товары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	Товары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	Товары.НалоговаяБазаАкцизы КАК П000010000114,
	|	Товары.НалоговаяБазаНДС КАК П000010000115,
	|	Товары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	Товары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	Товары.СтавкаНДС КАК П000010000118,
	|	Товары.СуммаАкциза КАК П000010000119,
	|	Товары.СуммаНДС КАК П000010000120,
	|	Товары.Валюта КАК Валюта,
	|	Товары.Валюта.Код КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	Товары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиСделки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комитент)
	|			ТОГДА ""0""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Доверитель)
	|			ТОГДА ""1""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Принципал)
	|			ТОГДА ""2""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Продавец)
	|			ТОГДА ""6""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА ""7""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ТипПрод_Пр,
	|	УчастникиСделки.РольПродавца КАК ТипПродавца,
	|	ВЫБОР
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комиссионер)
	|			ТОГДА ""3""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Поверенный)
	|			ТОГДА ""4""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Агент)
	|			ТОГДА ""5""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА ""7""
	|		ИНАЧЕ ""3""
	|	КОНЕЦ КАК ТипПок_Пр,
	|	УчастникиСделки.РольПокупателя КАК ТипПокупателя,
	|	УчастникиСделки.Продавец,
	|	УчастникиСделки.Продавец.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	УчастникиСделки.Продавец.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	УчастникиСделки.Покупатель,
	|	УчастникиСделки.Покупатель.СтранаРегистрации.Код КАК КодСтраныПокупатель,
	|	УчастникиСделки.Покупатель.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПокупатель,
	|	УчастникиСделки.НомерДоговора КАК НомерДог,
	|	УчастникиСделки.ДатаДоговора КАК ДатаДог,
	|	УчастникиСделки.НомерСпецификации,
	|	УчастникиСделки.ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	УчастникиСделки.Ссылка КАК ДокументСсылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерЗаяв,
	|	НЕОПРЕДЕЛЕНО КАК Число,
	|	НЕОПРЕДЕЛЕНО КАК Месяц,
	|	НЕОПРЕДЕЛЕНО КАК Год
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК УчастникиСделки
	|ГДЕ
	|	УчастникиСделки.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТаблицаУчастникиСделки = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	
	ПервыйДокумент = Истина;
	
	// Объявление таблиц
	
	ТаблицаСпецификацииДляВыгрузки = Новый ТаблицаЗначений;
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Номер");
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Дата");
	
	ТЗСпецификации07           = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	ТЗСпецификацииРаздел3      = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	ТаблСпецификацииПриложение = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	
	ТТД = Новый ТаблицаЗначений;
	ТТД.Колонки.Добавить("Номер");
	ТТД.Колонки.Добавить("Дата");
	
	МассивТиповПродавцов = Новый Массив();
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Доверитель);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Комитент);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Принципал);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Продавец);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20150101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2012кв3");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2015кв1");
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		
		// Структуры для выгрузки
		
		РеквизитыРаздел1 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); 
		РеквизитыРаздел2 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр");
		РеквизитыРаздел3 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр,ТипПрод_3,
			|ТипПродавца,ПродавецИНН_КПП,ПродавецНаимОрг,КодСтраныПродавец,
			|ПродавецМестоНахожд,ПродавецАдрес,ПродавецБайконур,НомерДог,ДатаДог,
			|НомерСпецификации,ДатаСпецификации,ТипПок_3,ТипПокупателя,ПокупательИНН_КПП,
			|ПокупательНаимОрг,КодСтраныПокупатель,ПокупательМестоНахожд,ПокупательАдрес,
			|ПокупательБайконур,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух"); 
		РеквизитыПриложение = Новый Структура("НомерЗаяв,Число,Месяц,Год");
		
		ТаблицаСпецификацииДляВыгрузки.Очистить();
		ТЗСпецификации07.Очистить();
		ТЗСпецификацииРаздел3.Очистить();
		ТаблСпецификацииПриложение.Очистить();

		НомераСпецификаций = "";
		ДатыСпецификаций = "";
		
		ПечататьРаздел3 = Ложь;
		
		// Раздел 1
		
		Если НЕ ЗначениеЗаполнено(СтрокаШапки.Организация) 
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаШапки.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сведения о покупателе-имортере
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
		
		РеквизитыРаздел1.ФИОРук = Руководители.РуководительПредставление;
		РеквизитыРаздел1.ФИОБух = Руководители.ГлавныйБухгалтерПредставление;
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Организация, СтрокаШапки.Дата);
		
		РеквизитыРаздел1.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
			РеквизитыРаздел1.КодСтраныПокупатель,
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			
		РеквизитыРаздел1.ПокупательИНН_КПП = РеквизитыРаздел1.ПокупательИНН
			+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ РеквизитыРаздел1.ПокупательКПП = "", "", "/" + РеквизитыРаздел1.ПокупательКПП);
		
		Если СведенияОПокупателе.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			РеквизитыРаздел1.ПокупательНаимОрг = СведенияОПокупателе.ФИОФизлица;
		Иначе
			РеквизитыРаздел1.ПокупательНаимОрг = СведенияОПокупателе.НаименованиеДляПечатныхФорм;
		КонецЕсли; 
			
		РеквизитыРаздел1.НомерЗаяв = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыРаздел1.НомерЗаяв, Истина, Ложь);
		
		// Адрес покупателя для выгрузки
		РеквизитыРаздел1.Вставить("ПокупательАдрес", 
			ПолучитьАдресВВидеСоответствия(СтрокаШапки.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата));
			
		// Адрес продавца для выгрузки
		РеквизитыРаздел1.Вставить("ПродавецАдрес", ПустойРоссийскийАдрес());
		// Адрес комиссионера для выгрузки
		РеквизитыРаздел1.Вставить("КомиссионерАдрес", ПустойРоссийскийАдрес());
		
		// Если сделка осуществляется через третьих лиц необходимо определить
		// первоначального продавца товаров (продавца, комитента, доверителя или принципала),
		// заполнить раздел 3 либо Приложение к Заявлению.
		
		НайденныеСтрокиУчастникиСделки = ТаблицаУчастникиСделки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиУчастникиСделки.Количество() > 0 Тогда
			
			СтрокаУчастникиСделки = Неопределено;
			
			Для Каждого СтрокаТаблицыУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				Если МассивТиповПродавцов.Найти(СтрокаТаблицыУчастникиСделки.ТипПродавца) <> Неопределено Тогда
					СтрокаУчастникиСделки = СтрокаТаблицыУчастникиСделки;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Если СтрокаУчастникиСделки <> Неопределено Тогда
				
				РеквизитыРаздел1.КодСтраныПродавец = СтрокаУчастникиСделки.КодСтраныПродавец;
				
				СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				
				РеквизитыРаздел1.ПродавецНаимОрг = СведенияОПродавце.НаименованиеДляПечатныхФорм;
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				РеквизитыРаздел1.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
				
				РеквизитыРаздел1.НомерДог          = СтрокаУчастникиСделки.НомерДог;
				РеквизитыРаздел1.ДатаДог           = СтрокаУчастникиСделки.ДатаДог;
				РеквизитыРаздел1.НомерСпецификации = СтрокаУчастникиСделки.НомерСпецификации;
				РеквизитыРаздел1.ДатаСпецификации  = Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДЛФ=D");
				
				Если ЗначениеЗаполнено(СтрокаУчастникиСделки.НомерСпецификации) 
					И ЗначениеЗаполнено(СтрокаУчастникиСделки.ДатаСпецификации) Тогда
					СтрокаСпецификации = ТаблицаСпецификацииДляВыгрузки.Добавить();
					СтрокаСпецификации.Номер = СтрокаУчастникиСделки.НомерСпецификации;
					СтрокаСпецификации.Дата =  Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДЛФ=D");
				КонецЕсли;
				
				АдресПродавца = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
				РеквизитыРаздел1.ПродавецАдрес = АдресПродавца;
				
				Если НайденныеСтрокиУчастникиСделки.Количество() = 1 Тогда
					
					ПечататьРаздел3 = Истина;
					РеквизитыРаздел1.СтрВсего = 3; // Если строка одна
					
					// Раздел 3
					ЗаполнитьЗначенияСвойств(РеквизитыРаздел3, РеквизитыРаздел1, 
						"НомерЗаяв,Число,Месяц,Год,СтрВсего,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух");
					
					РеквизитыРаздел3.ТипПрод_3 = СтрокаУчастникиСделки.ТипПрод_Пр;
					РеквизитыРаздел3.ТипПок_3  = СтрокаУчастникиСделки.ТипПок_Пр;
					
					РеквизитыРаздел3.ТипПродавца   = СтрокаУчастникиСделки.ТипПродавца;
					РеквизитыРаздел3.ТипПокупателя = СтрокаУчастникиСделки.ТипПокупателя;
										
					РеквизитыРаздел3.ПродавецБайконур   = СтрокаУчастникиСделки.ПродавецБайконур;
					РеквизитыРаздел3.ПокупательБайконур = СтрокаУчастникиСделки.ПокупательБайконур;
					
					Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
							+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
					Иначе
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					РеквизитыРаздел3.ПродавецНаимОрг     = СведенияОПродавце.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПродавец   = СтрокаУчастникиСделки.КодСтраныПродавец; 
					РеквизитыРаздел3.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
						СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
						
					СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
						СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
						
					Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.ИНН 
							+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
					Иначе
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					
					РеквизитыРаздел3.ПокупательНаимОрг     = СведенияОПокупателе.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПокупатель   = СтрокаУчастникиСделки.КодСтраныПокупатель;
					РеквизитыРаздел3.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
						СтрокаУчастникиСделки.КодСтраныПокупатель, СведенияОПокупателе.ЮридическийАдрес);
					
					РеквизитыРаздел3.НомерДог          = СтрокаУчастникиСделки.НомерДог;
					РеквизитыРаздел3.ДатаДог           = СтрокаУчастникиСделки.ДатаДог;
					РеквизитыРаздел3.НомерСпецификации = СтрокаУчастникиСделки.НомерСпецификации;
					РеквизитыРаздел3.ДатаСпецификации  = СтрокаУчастникиСделки.ДатаСпецификации;
					
					РеквизитыРаздел3.ПродавецАдрес   = АдресПродавца;
					РеквизитыРаздел3.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(
						СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
					ТЗСпецификацииРаздел3 = ТаблицаСпецификацииДляВыгрузки;
					
				Иначе
					РеквизитыРаздел1.СтрВсего = 2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			РеквизитыРаздел1.СтрВсего = 2;
		КонецЕсли;
		
		
		// Сведения о контрагенте
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Контрагент, СтрокаШапки.Дата);
		МестонахождениеКонтрагента = СформироватьПредставлениеМестонахожденияКонтрагента(
			СтрокаШапки.КодСтраныПродавец, 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "ЮридическийАдрес,"));
		Если СведенияОКонтрагенте.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			ИНН_КППКонтрагента = СведенияОКонтрагенте.ИНН
				+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОКонтрагенте.КПП = "", "", "/" + СведенияОКонтрагенте.КПП);
		Иначе
			ИНН_КППКонтрагента = СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации;
		КонецЕсли;
		
		ТаблицаСпецификацииДляВыгрузкиВременная = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
		
		Пока ТаблицаСпецификацииКонтрагента.НайтиСледующий(СтруктураПоиска) Цикл
			НомераСпецификаций = НомераСпецификаций + ?(НомераСпецификаций = "", "", ", ") + ТаблицаСпецификацииКонтрагента.Номер;
			ДатыСпецификаций   = ДатыСпецификаций + ?(ДатыСпецификаций = "", "", ", ") + Формат(ТаблицаСпецификацииКонтрагента.Дата, "ДЛФ=D");
			НоваяСтрокаСпецификаций = ТаблицаСпецификацииДляВыгрузкиВременная.Добавить();
			НоваяСтрокаСпецификаций.Дата = Формат(ТаблицаСпецификацииКонтрагента.Дата, "ДЛФ=D");
			НоваяСтрокаСпецификаций.Номер = ТаблицаСпецификацииКонтрагента.Номер;
		КонецЦикла;
			
		Если СтрокаУчастникиСделки <> Неопределено Тогда
			
			// Контрагент не является продавцом, сведения о нем указываем в строках 06, 07 Заявления.
			
			РеквизитыРаздел1.КодСтраныОрг1        = СтрокаШапки.КодСтраныПродавец;
			РеквизитыРаздел1.НаимОрг_1            = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			РеквизитыРаздел1.ИННОрг_1             = ИНН_КППКонтрагента;
			РеквизитыРаздел1.МестоНахождОрг_1     = МестонахождениеКонтрагента;
			РеквизитыРаздел1.НомКонтр_2           = СтрокаШапки.НомерДог;
			РеквизитыРаздел1.ДатаКонтр_2          = СтрокаШапки.ДатаДог;
			РеквизитыРаздел1.НомерСпецификации_07 = НомераСпецификаций;
			РеквизитыРаздел1.ДатаСпецификации_07  = ДатыСпецификаций;
			
			РеквизитыРаздел1.РеквизитыПосредник = СведенияОКонтрагенте.ПолноеНаименование + ", " + МестонахождениеКонтрагента;
			РеквизитыРаздел1.КомиссионерАдрес   = ПолучитьАдресВВидеСоответствия(
				СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);

			ТЗСпецификации07 = ТаблицаСпецификацииДляВыгрузкиВременная;
			
		Иначе
			
			// Контрагент является продавцом, сведения о нем указываем в строках 01, 03 Заявления.
			
			РеквизитыРаздел1.ПродавецМестоНахожд = МестонахождениеКонтрагента;
			РеквизитыРаздел1.ПродавецИНН_КПП     = ИНН_КППКонтрагента;
			РеквизитыРаздел1.ПродавецНаимОрг     = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			РеквизитыРаздел1.НомерСпецификации   = НомераСпецификаций;
			РеквизитыРаздел1.ДатаСпецификации    = ДатыСпецификаций;
			РеквизитыРаздел1.ПродавецАдрес       = ПолучитьАдресВВидеСоответствия(
				СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);

			ТаблицаСпецификацииДляВыгрузки = ТаблицаСпецификацииДляВыгрузкиВременная;
			
		КонецЕсли;
		
		// Вывод на печать
		
		ШапкаРаздел1 = Макет.ПолучитьОбласть("Шапка");
		ШапкаРаздел1.Параметры.Заполнить(РеквизитыРаздел1);
		ТабДокумент.Вывести(ШапкаРаздел1);
		
		// Товары
		
		ТекущийНомерСтраницы = 1;
		ЗаголовокТаблицыТоваров = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
		ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
		
		ТаблицаТоварыРаздел1 = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
		
		ТТД.Очистить();
		
		МногострочнаяЧасть = Макет.ПолучитьОбласть("ТаблицаТовары");
		ПодвалТаблицаТовары = Макет.ПолучитьОбласть("ПодвалТаблицаТовары");
		
		МассивОбластейДляПроверкиВывода = Новый Массив;
		
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		БазоваяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СтрокаШапки.Организация);
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			Для каждого СтрокаТоваров Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаТоваровДляВыгрузки = ТаблицаТоварыРаздел1.Добавить();
				
				СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтрокаТоваров.Валюта, СтрокаТоваров.ДатаПринятияНаУчет, БазоваяВалюта);
			
				СтрокаТоваров.П000010000108 = СтруктураКурса.КурсЧислитель;
				СтрокаТоваров.П000010000125 = СтруктураКурса.КурсЗнаменатель;
				СтрокаТоваров.П000010000110 = Формат(СтрокаТоваров.ДатаТСД, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000112 = Формат(СтрокаТоваров.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000113 = Формат(СтрокаТоваров.ДатаПринятияНаУчет, "ДФ=dd.MM.yyyy");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваровДляВыгрузки, СтрокаТоваров);
				
				НоваяСтрокаДокументы = ТТД.Добавить();
				НоваяСтрокаДокументы.Номер = СтрокаТоваров.П000010000109;
				НоваяСтрокаДокументы.Дата = СтрокаТоваров.П000010000110;
				
				МногострочнаяЧасть.Параметры.Заполнить(СтрокаТоваров);
				
				Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
					МногострочнаяЧасть.Параметры.П000010000114 = "--";
					МногострочнаяЧасть.Параметры.П000010000116 = "--";
					МногострочнаяЧасть.Параметры.П000010000117 = "--";
					МногострочнаяЧасть.Параметры.П000010000119 = "--";
				КонецЕсли;
				
				МассивОбластейДляПроверкиВывода.Очистить();
				МассивОбластейДляПроверкиВывода.Добавить(МногострочнаяЧасть);
				МассивОбластейДляПроверкиВывода.Добавить(ПодвалТаблицаТовары);
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
					ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
				КонецЕсли;
				
				ТабДокумент.Вывести(МногострочнаяЧасть);
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыРаздел1.Вставить("П000010000114", ТаблицаТоварыРаздел1.Итог("П000010000114"));
		РеквизитыРаздел1.Вставить("П000010000115", ТаблицаТоварыРаздел1.Итог("П000010000115"));
		
		// Итоговые суммы налогов подлежат округлению до целых рублей
		РеквизитыРаздел1.Вставить("П000010000119", Окр(ТаблицаТоварыРаздел1.Итог("П000010000119")));
		РеквизитыРаздел1.Вставить("П000010000120", Окр(ТаблицаТоварыРаздел1.Итог("П000010000120")));
		
		ПодвалТаблицаТовары.Параметры.П000010000114 = РеквизитыРаздел1.П000010000114;
		ПодвалТаблицаТовары.Параметры.П000010000115 = РеквизитыРаздел1.П000010000115;
		ПодвалТаблицаТовары.Параметры.П000010000119 = РеквизитыРаздел1.П000010000119;
		ПодвалТаблицаТовары.Параметры.П000010000120 = РеквизитыРаздел1.П000010000120;
		
		ТабДокумент.Вывести(ПодвалТаблицаТовары);
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(РеквизитыРаздел1);
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Подвал);
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент,
			МассивОбластейДляПроверкиВывода) Тогда
			
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		КонецЕсли;

		ТабДокумент.Вывести(Подвал);
		
		// Раздел 2
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ЗаполнитьЗначенияСвойств(РеквизитыРаздел2, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего");
		
		ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		РеквизитыРаздел2.Стр = ТекущийНомерСтраницы;
			
		ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел2");
		ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел2);
		ТабДокумент.Вывести(ОсновнаяЧасть);
		
		// Раздел 3
		
		Если ПечататьРаздел3 Тогда
		
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
			РеквизитыРаздел3.Стр = ТекущийНомерСтраницы;
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел3");
			ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел3);
			ТабДокумент.Вывести(ОсновнаяЧасть);
		
		КонецЕсли; 
		
		// Приложение
		
		ТаблицаДляВыгрузкиПриложение = ТаблицаУчастникиСделки.СкопироватьКолонки(); // Таблица для выгрузки
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПродавецАдрес");
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПокупательАдрес");
		
		Если НайденныеСтрокиУчастникиСделки.Количество() > 1 Тогда
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Приложение");
			
			Для каждого СтрокаУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СведенияОПродавце   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				СтрокаУчастникиСделки.ПродавецНаимОрг     = СведенияОПродавце.ПолноеНаименование;
				СтрокаУчастникиСделки.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
				
				Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
				Иначе
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				СтрокаУчастникиСделки.ПокупательНаимОрг     = СведенияОПокупателе.ПолноеНаименование;
				СтрокаУчастникиСделки.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПокупатель, СведенияОПокупателе.ЮридическийАдрес);
				
				ЗаполнитьЗначенияСвойств(СтрокаУчастникиСделки, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год");
				
				Если ЗначениеЗаполнено(СтрокаУчастникиСделки.НомерСпецификации)
					И ЗначениеЗаполнено(СтрокаУчастникиСделки.ДатаСпецификации) Тогда
					СтрокаСпецификацииПриложение = ТаблСпецификацииПриложение.Добавить();
					СтрокаСпецификацииПриложение.Номер = СтрокаУчастникиСделки.НомерСпецификации;
					СтрокаСпецификацииПриложение.Дата  =  СтрокаУчастникиСделки.ДатаСпецификации;
	 			КонецЕсли;
				
				СтрокаВыгрузки = ТаблицаДляВыгрузкиПриложение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВыгрузки, СтрокаУчастникиСделки);
				
				// Адрес продавца в Приложении для выгрузки
				СтрокаВыгрузки.ПродавецАдрес = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				// Адрес покупателя в Приложении для выгрузки
				СтрокаВыгрузки.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				ОсновнаяЧасть.Параметры.Заполнить(СтрокаВыгрузки);
				ТабДокумент.Вывести(ОсновнаяЧасть);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВыпискиБанка = Новый ТаблицаЗначений;
	ТаблицаСведенияОЗачете = Новый ТаблицаЗначений;
	
	Если ТаблицаТоварыРаздел1 <> Неопределено Тогда
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаПринятияНаУчет");
		
		ТаблицаТоварыРаздел1.Колонки.Удалить("П000010000104");
		ТаблицаТоварыРаздел1.Колонки.ЕдиницаИзмеренияКод.Имя = "П000010000104";
	КонецЕсли;
	
	Если ТаблицаДляВыгрузкиПриложение <> Неопределено Тогда
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ДокументСсылка");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Покупатель");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Продавец");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПродавца");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПокупателя");
	КонецЕсли;
	
	КоличествоСтраниц = ТабДокумент.КоличествоСтраниц();
	ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего");
	Пока ОбластьКоличествоСтраниц <> Неопределено Цикл
		ОбластьКоличествоСтраниц.Текст = КоличествоСтраниц;
		ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего", ОбластьКоличествоСтраниц)
	КонецЦикла;
	
	Возврат Новый Структура(
		"РеквизитыРаздел1,ТаблицаРаздел1,РеквизитыРаздел2,РеквизитыРаздел3,ТаблицаПриложение,
		|ТЗСпецификации,ТЗСпецификации07,ТЗСпецификацииРаздел3,ТаблСпецПрил3,
		|ТТД,ТаблицаВыпискиБанка,ТаблицаСведенияОЗачете,ТабДокумент",
		РеквизитыРаздел1, ТаблицаТоварыРаздел1, РеквизитыРаздел2, РеквизитыРаздел3, ТаблицаДляВыгрузкиПриложение, 
		ТаблицаСпецификацииДляВыгрузки, ТЗСпецификации07, ТЗСпецификацииРаздел3, ТаблСпецификацииПриложение, 
		ТТД, ТаблицаВыпискиБанка, ТаблицаСведенияОЗачете, ТабДокумент);
		
КонецФункции

Функция ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов)

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПартнеров", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК СистемныйНомер,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ3,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ4,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ3,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ4,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК ОтправительКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательКоды,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдрес,
	|	НЕОПРЕДЕЛЕНО КАК ОргТелефонИсп,
	|	ЗаявлениеОВвозеТоваров.Валюта КАК ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Валюта.Код КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаявлениеОВвозеТоваров.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ОргИсполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОргДолжностьИсп,
	|	НЕОПРЕДЕЛЕНО КАК ОргАдресЭлПочты,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК ТоргующаяСтранаКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК ТоргующаяСтранаНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК СтранаОтправленияКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК СтранаОтправленияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаКод,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрРеквизиты,
	|	""ИМ"" КАК НаправлениеПеремещения,
	|	""ИМ"" КАК НапрПеремещения,
	|	""РОССИЯ"" КАК СтранаНазначенияНаименование,
	|	""RU"" КАК СтранаНазначенияКод,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдресСоответствие,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Валюта= ЗаявлениеОВвозеТоваров.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Валюта.Наименование
	|	КОНЕЦ КАК КодВалютыЦеныТовара,
	|	"""" КАК ИмяКлючевогоУзлаСодержательнойЧасти,
	|	"""" КАК ИмяФайла,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KZ""
	|			ТОГДА ""РК""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""BY""
	|			ТОГДА ""РБ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""AM""
	|			ТОГДА ""АМ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KG""
	|			ТОГДА ""КГ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтранаОтправления,
	|	""РФ"" КАК СтранаНазначения,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ЮридическоеФизическоеЛицо КАК ОтправительЮридическоеФизическоеЛицо,
	|	ЗаявлениеОВвозеТоваров.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОВвозеТоваров.Организация.ОГРН КАК ОГРН,
	|	"""" КАК Отправитель_ФормаСобственности,
	|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеОКОПФ КАК Получатель_ФормаСобственности
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ИспользоватьНоменклатуруПартнеров И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.Код, """") КАК КодТовара,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК ЦенаТовараВыбВал,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД КАК СерияНомерТСД,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД КАК ДатаТСД,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Номер,СчетФактураПолученныйНА.Ссылка.Номер) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата,СчетФактураПолученныйНА.Ссылка.Дата) КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.Наименование,
	|			ПриобретениеТоваровУслуг.Контрагент.СтранаРегистрации.Наименование) КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.КодАльфа2,
	|			ПриобретениеТоваровУслуг.Контрагент.СтранаРегистрации.КодАльфа2) КАК СтранаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта КАК КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КоличествоПоТНВЭД
	|	КОНЕЦ КАК ЕдИзмТовараКво,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдИзмТовараКратко,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдИзмТовараКод,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """") КАК НомерТаможеннойДекларации,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|			ПО ПриобретениеТоваровУслуг.Ссылка = СчетФактураПолученный.ДокументОснование
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйНА
	|			ПО ПриобретениеТоваровУслуг.Ссылка = СчетФактураПолученныйНА.ДокументОснование
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ЗаявлениеОВвозеТоваровТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ЗаявлениеОВвозеТоваровТовары.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|			И ЗаявлениеОВвозеТоваровТовары.Серия = ПриобретениеТоваровУслугТовары.Серия
	|			И ЗаявлениеОВвозеТоваровТовары.Склад = ПриобретениеТоваровУслугТовары.Склад
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозе.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозе.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ПО ЗаявлениеОВвозе.ДокументПоступления = ШтрихкодыУпаковок.Ссылка
	|			И ЗаявлениеОВвозе.Номенклатура = ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура
	|ГДЕ
	|	ЗаявлениеОВвозе.Ссылка В(&МассивДокументов)
	|	И НЕ ШтрихкодыУпаковок.ШтрихкодУпаковки ЕСТЬ NULL";
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Наименование КАК Наименование,
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Номер КАК Номер,
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.СведенияОДокументах КАК ЗаявлениеОВвозеТоваровСведенияОДокументах
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Ссылка В(&МассивДокументов)";
	
	СведенияОДокументах = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СтатистическаяФормаУчетаПеремещенияТоваров";
	
	ПервыйДокумент = Истина;
	
	СписокВидовТранспорта = Новый СписокЗначений;
	ЗаполнитьСписокВыбораВидовТранспорта(СписокВидовТранспорта);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Правила891 = Ложь;
		
		Если СтрокаШапки.Дата < '20160101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2011Кв1");
		ИначеЕсли СтрокаШапки.Дата < '20200701' Тогда 
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2016Кв1");
		Иначе 
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2020Кв1");
			Правила891 = Истина;
		КонецЕсли;
		
		ОсновнаяЧасть1      = Макет.ПолучитьОбласть("ОсновнаяЧасть1");
		МногострочнаяЧасть1 = Макет.ПолучитьОбласть("МногострочнаяЧасть1");
		МногострочнаяЧасть2 = Макет.ПолучитьОбласть("МногострочнаяЧасть2");
		ОсновнаяЧасть2      = Макет.ПолучитьОбласть("ОсновнаяЧасть2");
		ОсновнаяЧасть3      = Макет.ПолучитьОбласть("ОсновнаяЧасть3");
		
		РеквизитыШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); // Структура для выгрузки
		РеквизитыШапка.СистемныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапка.СистемныйНомер, Истина, Ложь);
		
		Если ЗначениеЗаполнено(РеквизитыШапка.Организация) И ЗначениеЗаполнено(РеквизитыШапка.Контрагент) Тогда
			
			СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Контрагент, РеквизитыШапка.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Организация, РеквизитыШапка.Дата);
			
			РеквизитыШапка.ПолучательРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,СтранаРегистрации,ЮридическийАдрес,");
			РеквизитыШапка.ПолучательКоды = РеквизитыШапка.ПокупательИНН + ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП);
			
			РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
			РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
			
			РеквизитыШапка.ОргПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргТелефонИсп = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргАдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, СтрокаШапки.Дата);
			
			// Отправитель
			
			РеквизитыШапка.ОтправительРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ОтправительНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,");
		
			РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
			РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
			РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			РеквизитыШапка.Вставить("ОтправительРА_УНН", "");
			РеквизитыШапка.Вставить("ОтправительРА_Соц", "");
			РеквизитыШапка.Вставить("ОтправительКодКГ", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", "");
		
			Если РеквизитыШапка.СтранаОтправления = "РБ" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "РК" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительРК_БИН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "АМ" Тогда
				РеквизитыШапка.Вставить("ОтправительРА_УНН", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "КГ" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительКГ_ИНН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			КонецЕсли;
			
			ОтправительАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтправительСтранаКод", РеквизитыШапка.ТоргующаяСтранаКод);
			РеквизитыШапка.Вставить("ОтправительСтранаНаименование", РеквизитыШапка.ТоргующаяСтранаНаименование);
			РеквизитыШапка.Вставить("ОтправительИндекс", ОтправительАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтправительНаселенныйПункт", ОтправительАдрес.Получить("НаселенныйПункт"));
			Если ПустаяСтрока(РеквизитыШапка.ОтправительНаселенныйПункт) Тогда
				РеквизитыШапка.ОтправительНаселенныйПункт = ОтправительАдрес.Получить("Город");
			КонецЕсли;
			
			// Дата выдачи документа, удостоверяющего личность отправителя
			РеквизитыШапка.Вставить("Отправитель_ДатаДокСтр", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокКод", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокНаим", "");
			РеквизитыШапка.Вставить("Отправитель_СерДок", "");
			РеквизитыШапка.Вставить("Отправитель_НомДок", "");
			РеквизитыШапка.Вставить("Отправитель_ДатаДок", "");
			РеквизитыШапка.Вставить("Отправитель_ОргДок", "");
			
			РеквизитыШапка.Вставить("Отправитель_Тел", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Факс", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Телекс", "");
			РеквизитыШапка.Вставить("Отправитель_Почта", СведенияОПродавце.ЭлектроннаяПочта);
			
			// В документе "Заявление о ввозе товаров" получателем всегда является РФ, а отправителем иностранное государство,
			// поэтому данные реквизиты передаются пустыми.
			
			РеквизитыШапка.Вставить("ПолучательРА_УНН", "");
			РеквизитыШапка.Вставить("ПолучательРА_Соц", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ИНН", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ОКПО", "");
			РеквизитыШапка.Вставить("ПолучательКодКГ", ""); 
			РеквизитыШапка.Вставить("ОтправительРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтправительРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтправительОбласть", ОтправительАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтправительУлицаНомерДома", 
				"" + ОтправительАдрес.Получить("Улица") + ", " + ОтправительАдрес.Получить("Дом") + ", " 
				+ ОтправительАдрес.Получить("Корпус") + ", " + ОтправительАдрес.Получить("Квартира"));
				
			// Получатель
			
			ПолучательНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ПолучательАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаименование", ПолучательНаименование);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасВидДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДокумента", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНомерДок", "");
			// Серия документа,удостоверяющего личность физ лица - составителя статистики
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасСерДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасОрг", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУр", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрКоды", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРеквизиты", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрУлицаНомерДома", ПолучательАдрес.Получить("Улица") 
				+ ", " 
				+ ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
				
			Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Получатель физ лицо
				
				Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				
					ДанныеДокумента = ПолучитьДокФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель, РеквизитыШапка.Дата);
					
					Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
						
						РеквизитыШапка.ОтвЛицоФинУрПасВидДок 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ВидДокумента, "КодМВД");
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДок 		= ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента = ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасНаименование 	= ДанныеДокумента.Представление;
						РеквизитыШапка.ОтвЛицоФинУрПасНомерДок 		= ДанныеДокумента.Номер;
						РеквизитыШапка.ОтвЛицоФинУрПасСерДок        = ДанныеДокумента.Серия;
						РеквизитыШапка.ОтвЛицоФинУрПасОрг           = ДанныеДокумента.КемВыдан;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				
			ИначеЕсли РеквизитыШапка.ОбособленноеПодразделение Тогда
				
				// Получатель обособленное подразделение
				
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрПодОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрПодУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			Иначе	
				
				// Получатель юридическое лицо
				
				РеквизитыШапка.ОтвЛицоФинУр = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
				
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ПолучательИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ПолучательКоды", РеквизитыШапка.ПолучательКоды);
			РеквизитыШапка.Вставить("ПолучательНаименование", ПолучательНаименование);
			РеквизитыШапка.Вставить("ПолучательНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ПолучательОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ПолучательРБ_УНП", "");
			РеквизитыШапка.Вставить("ПолучательРК_БИН", "");
			РеквизитыШапка.Вставить("ПолучательРК_ИИН", "");
			РеквизитыШапка.Вставить("ПолучательРФ_ИНН", РеквизитыШапка.ПокупательИНН);
			РеквизитыШапка.Вставить("ПолучательРФ_КПП", РеквизитыШапка.ПокупательКПП);
			РеквизитыШапка.Вставить("ПолучательРФ_ОГРН", РеквизитыШапка.ОГРН);
			РеквизитыШапка.Вставить("ПолучательРеквизиты", РеквизитыШапка.ПолучательРеквизиты);
			РеквизитыШапка.Вставить("ПолучательСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ПолучательСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ПолучательУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			Если Правила891 Тогда
				ПочтовыйАдресОрганизации = СтрШаблон("%1, %2", РеквизитыШапка.СтранаНазначенияНаименование, РеквизитыШапка.ОргПочтовыйАдрес);
			Иначе
				ПочтовыйАдресОрганизации = СтрШаблон("643, %1", РеквизитыШапка.ОргПочтовыйАдрес);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				РеквизитыШапка.ОргИсполнитель = РеквизитыШапка.ИндивидуальныйПредприниматель;
				РеквизитыШапка.ОргДолжностьИсп = НСтр("ru = 'Индивидуальный предприниматель';
														|en = 'Individual entrepreneur'"); 
				ФИО = ПолучитьФИОФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель);
			Иначе
				Руководители                   = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
				РеквизитыШапка.ОргИсполнитель  = Руководители.РуководительПредставление;
				РеквизитыШапка.ОргДолжностьИсп = Руководители.РуководительДолжностьПредставление;
				ФИО = Руководители.РуководительФИО;
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ОргИмяИсп",      ФИО.Имя);
			РеквизитыШапка.Вставить("ОргФамилияИсп",  ФИО.Фамилия);
			РеквизитыШапка.Вставить("ОргОтчествоИсп", ФИО.Отчество);
			
			РеквизитыШапка.Вставить("ОргТелефонИсп",  РеквизитыШапка.ОргТелефонИсп);
			
			РеквизитыШапка.Вставить("ОргИндекс", 			ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОргНаселенныйПункт", 	ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОргОбласть", 			ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОргУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			РеквизитыШапка.Вставить("ОргАдресЭлПочты", 			РеквизитыШапка.ОргАдресЭлПочты);
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 		ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("ОргСтранаКод", 			РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОргСтранаНаименование", 	РеквизитыШапка.СтранаНазначенияНаименование);
			
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 			ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("мАдресвФорматеДляВыгрузки", 	ПочтовыйАдресОрганизации);
			
			РеквизитыШапка.Вставить("Получатель_ДатаДокСтр", РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ВидДокКод",  РеквизитыШапка.ОтвЛицоФинУрПасВидДок);
			РеквизитыШапка.Вставить("Получатель_ВидДокНаим", РеквизитыШапка.ОтвЛицоФинУрПасНаименование);
			РеквизитыШапка.Вставить("Получатель_СерДок",     РеквизитыШапка.ОтвЛицоФинУрПасСерДок);
			РеквизитыШапка.Вставить("Получатель_НомДок",     РеквизитыШапка.ОтвЛицоФинУрПасНомерДок);
			РеквизитыШапка.Вставить("Получатель_ДатаДок",    РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ОргДок",     РеквизитыШапка.ПолучательНаименование);
			
			РеквизитыШапка.Вставить("Получатель_Тел",    РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Факс",   РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Телекс", "");
			РеквизитыШапка.Вставить("Получатель_Почта",  РеквизитыШапка.ОргАдресЭлПочты);
			
			// Реквизиты подписи - сокращенное наименование организации-покупателя.
			РеквизитыШапка.Вставить("ПолнСокрНаим", СведенияОПокупателе.СокращенноеНаименование);
			
			// Реквизиты подписи - ИНН/КПП/ОГРН организации-покупателя.
			ИННКППОГРН = РеквизитыШапка.ПокупательИНН 
				+ ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП)
				+ "/" + РеквизитыШапка.ОГРН;
			
			РеквизитыШапка.Вставить("ИннКппОгрн", ИННКППОГРН);
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		ОбщаяЦенаТоваров = 0;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.КодВидаТранспорта) Тогда
					
					РеквизитыШапка.ВидТранспортаКод = СтрокаТовары.КодВидаТранспорта;
					ВидТранспорта = СписокВидовТранспорта.НайтиПоЗначению(СтрокаТовары.КодВидаТранспорта);
					
					Если ВидТранспорта <> Неопределено Тогда
						РеквизитыШапка.ВидТранспортаНаименование = Сред(ВидТранспорта, 6);
					КонецЕсли;
					
				КонецЕсли;
				
				ОтчетныйПериод = СтрокаТовары.ОтчетныйПериод;
				
				ОбщаяЦенаТоваров = ОбщаяЦенаТоваров + СтрокаТовары.ЦенаТовараВыбВал;
				
			КонецЦикла;
			
		КонецЕсли;

		// Графа 7 - общая стоимость
		РеквизитыШапка.Вставить("ОбщаяЦенаТоваров", ОбщаяЦенаТоваров);
		
		ОсновнаяЧасть1.Параметры.Заполнить(РеквизитыШапка);
		ТабДокумент.Вывести(ОсновнаяЧасть1);
		
		ТаблицаДокументы = Новый ТаблицаЗначений; // Таблица для выгрузки
		ТаблицаДокументы.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
		НоваяСтрокаВыгрузки.НаименованиеДокумента = "Договор";
		НоваяСтрокаВыгрузки.НомерДокумента = РеквизитыШапка.НомерДоговора;
		НоваяСтрокаВыгрузки.ДатаДокумента = РеквизитыШапка.ДатаДоговора;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			// Реквизиты сопроводительных документов и счетов-фактур
			
			Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТовары.СерияНомерТСД) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-проформа (проформа-инвойс)';
																	|en = 'Proforma invoice (proforma invoice)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.СерияНомерТСД;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаТСД;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.НомерСчетаФактуры) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-фактура (инвойс)';
																	|en = 'Tax invoice'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.НомерСчетаФактуры;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаСчетаФактуры;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НайденныеСтрокиСведенияОДокументах = СведенияОДокументах.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиСведенияОДокументах.Количество() > 0 Тогда
				
				Для Каждого СтрокаТаблицы Из НайденныеСтрокиСведенияОДокументах Цикл
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = СтрокаТаблицы.Наименование;
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТаблицы.Номер;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТаблицы.Дата;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаДокументы.Свернуть("НаименованиеДокумента,НомерДокумента,ДатаДокумента");
			
			Для каждого СтрокаДокумента Из ТаблицаДокументы Цикл
			
				МногострочнаяЧасть1.Параметры.Документы = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 № %2 от %3 г.';
							|en = '%1 No. %2 of %3'"),
						СтрокаДокумента.НаименованиеДокумента,
						СтрокаДокумента.НомерДокумента, 
						Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
						
				ТабДокумент.Вывести(МногострочнаяЧасть1);
			
			КонецЦикла; 
			
			ТабДокумент.Вывести(ОсновнаяЧасть2);
			
			ТаблицаТоварыДляВыгрузки = ТаблицаТовары.СкопироватьКолонки();   // Таблица для выгрузки
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("КодТО");              // Код таможенного органа
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДатаРегистрацииСтр"); // Дата таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("НомерДок");           // Номер таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДекларацияНом");      // Порядковый номер строки в декларации
			
			
			ОбщаяЦенаТоваров = 0;
			
			Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаВыгрузки = ТаблицаТоварыДляВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыгрузки, СтрокаТовары);
				ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаТовары, НоваяСтрокаВыгрузки);
				ЗаполнитьСведенияОПроизводителе(СтрокаТовары, НоваяСтрокаВыгрузки, Правила891, РеквизитыШапка.Дата);
				ЗаполнитьСведенияОМаркируемыхТоварах(СтрокаТовары, НоваяСтрокаВыгрузки, Правила891, ШтрихкодыУпаковок);
				
				МногострочнаяЧасть2.Параметры.Заполнить(НоваяСтрокаВыгрузки);
				ТабДокумент.Вывести(МногострочнаяЧасть2);
				
				НоваяСтрокаВыгрузки.ЕдИзмТовараКратко = ВРег(СтрокаТовары.ЕдИзмТовараКратко);
				
			КонецЦикла;
			
		Иначе
			ТабДокумент.Вывести(МногострочнаяЧасть2);
		КонецЕсли;
		
		// Подвал
	
		РеквизитыШапка.Вставить("ДатаЗаполнения", Формат(РеквизитыШапка.Дата, "ДФ=yyyy-MM-dd"));
		
		РеквизитыШапка.ДатаЗаполненияД1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		РеквизитыШапка.ДатаЗаполненияД2 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияД", Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 2));
		
		РеквизитыШапка.ДатаЗаполненияМ1 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ДатаЗаполненияМ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияМ", Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 2));

		РеквизитыШапка.ДатаЗаполненияГ1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ДатаЗаполненияГ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ДатаЗаполненияГ3 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ДатаЗаполненияГ4 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияГ", Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""));
		
		РеквизитыШапка.ОтчетныйМесяцМ1 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ОтчетныйМесяцМ2 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцМ", Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 2));
		
		РеквизитыШапка.ОтчетныйМесяцГ1 = Лев(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ОтчетныйМесяцГ2 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ОтчетныйМесяцГ3 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ОтчетныйМесяцГ4 = Прав(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцГ", Формат(ОтчетныйПериод, "ДФ=""гггг"""));
		РеквизитыШапка.Вставить("ОтчетныйМесяц",  Формат(ОтчетныйПериод, "ДФ=yyyy-MM")); 
		РеквизитыШапка.Вставить("УникальныйИД",   РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
		
		ОсновнаяЧасть3.Параметры.Заполнить(РеквизитыШапка);
		
		ТабДокумент.Вывести(ОсновнаяЧасть3);
		
	КонецЦикла;
	
	Если ТаблицаТоварыДляВыгрузки <> Неопределено Тогда
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ОтчетныйПериод");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("СерияНомерТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСтроки");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("КодВидаТранспорта");
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("РеквизитыШапка",           РеквизитыШапка);
	Структура.Вставить("ТаблицаДокументы",         ТаблицаДокументы);
	Структура.Вставить("ТаблицаТоварыДляВыгрузки", ТаблицаТоварыДляВыгрузки);
	Структура.Вставить("ТабДокумент",              ТабДокумент);
	
	Возврат Структура;
	
КонецФункции

Функция ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПолучитьАдресВВидеСоответствия(СсылкаНаОбъект, ВидКонтактнойИнформации, Дата = '00010101')
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,
		,
		ВидКонтактнойИнформации,
		Дата);
	
	ЗначениеКонтактнойИнформации = "";
	ПредставлениеКонтактнойИнформации = "";
	ЗначениеJSON = "";
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		ПредставлениеКонтактнойИнформации = КонтактнаяИнформация[0].Представление;
		ЗначениеJSON = КонтактнаяИнформация[0].Значение;
	КонецЕсли;
	
	РоссийскийАдрес = ПустойРоссийскийАдрес();
	
	Если СтрНайти(ЗначениеКонтактнойИнформации, "АдресРФ") > 0 Тогда
		СформироватьАдрес(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	Иначе
		СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ЗначениеJSON, ПредставлениеКонтактнойИнформации, РоссийскийАдрес);
	КонецЕсли;
	
	ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес);
	
	Возврат РоссийскийАдрес;

КонецФункции

Функция ПустойРоссийскийАдрес()

	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        );
	РоссийскийАдрес.Вставить("Регион",          );
	РоссийскийАдрес.Вставить("КодРегиона",      );
	РоссийскийАдрес.Вставить("Район",           );
	РоссийскийАдрес.Вставить("Город",           );
	РоссийскийАдрес.Вставить("НаселенныйПункт", );
	РоссийскийАдрес.Вставить("Улица",           );
	РоссийскийАдрес.Вставить("Дом",             );
	РоссийскийАдрес.Вставить("Корпус",          );
	РоссийскийАдрес.Вставить("Квартира",        );
	
	Возврат РоссийскийАдрес;

КонецФункции

Процедура СформироватьАдрес(КонтактнаяИнформация, РоссийскийАдрес)
	
	СтруктураАдресаЗаписи = РаботаСАдресами.СведенияОбАдресе(КонтактнаяИнформация);
	
	СокращенияОбъектовАдресацииАдресаРФ = РаботаСАдресами.СокращенияОбъектовАдресацииАдресаРФ();
	
	Корпуса = "";
	ПредставлениеКорпуса = "";
	
	Если СтруктураАдресаЗаписи.Свойство("Корпуса", Корпуса) Тогда
		
		Для Индекс = 0 По Корпуса.Количество() - 1 Цикл
			
			Корпус = Корпуса[Индекс];
			
			ПредставлениеКорпуса = ПредставлениеКорпуса
			+ СокрЛП(?(Корпус.Свойство("ТипКорпуса") И Индекс > 0,
			НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Корпус.ТипКорпуса)]), ""))
			+ " "
			+ СокрЛП(?(Корпус.Свойство("Номер"), Корпус.Номер, ""))
			+ " ";
			
		КонецЦикла;
		
	КонецЕсли;	
	
	СтруктураАдресаЗаписи.Вставить("Корпус", СокрЛП(ПредставлениеКорпуса));
	
	Помещения = "";
	ПредставлениеПомещения = "";
	
	Если СтруктураАдресаЗаписи.Свойство("Помещения", Помещения) Тогда
		
		Для Индекс = 0 По Помещения.Количество() - 1 Цикл
			
			Помещение = Помещения[Индекс];
			
			ПредставлениеПомещения = ПредставлениеПомещения
			+ СокрЛП(?(Помещение.Свойство("ТипПомещения") И Индекс > 0,
			НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Помещение.ТипПомещения)]), ""))
			+ " "
			+ СокрЛП(?(Помещение.Свойство("Номер"), Помещение.Номер, ""))
			+ " ";
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураАдресаЗаписи.Вставить("Квартира", СокрЛП(ПредставлениеПомещения));
	
	СтруктураАдресаЗаписи.Вставить("Дом",
		?(СтруктураАдресаЗаписи.Свойство("Здание")
		И СтруктураАдресаЗаписи.Здание.Свойство("Номер"), 
		СокрЛП(СтруктураАдресаЗаписи.Здание.Номер), ""));
	
	СтруктураАдресаЗаписи.Вставить("ТипДома",
		?(СтруктураАдресаЗаписи.Свойство("Здание")
		И СтруктураАдресаЗаписи.Здание.Свойство("ТипЗдания"), 
		СокрЛП(СтруктураАдресаЗаписи.Здание.ТипЗдания), "Дом"));
	
	СтруктураАдресаЗаписи.Вставить("ТипКорпуса",
		?(СтруктураАдресаЗаписи.Свойство("Корпуса")
		И СтруктураАдресаЗаписи.Корпуса.Количество() > 0
		И СтруктураАдресаЗаписи.Корпуса[0].Свойство("ТипКорпуса"), 
		СокрЛП(СтруктураАдресаЗаписи.Корпуса[0].ТипКорпуса),
		"Корпус"));	  
	
	СтруктураАдресаЗаписи.Вставить("ТипКвартиры",
		?(СтруктураАдресаЗаписи.Свойство("Помещения")
		И СтруктураАдресаЗаписи.Помещения.Количество() > 0
		И СтруктураАдресаЗаписи.Помещения[0].Свойство("ТипПомещения"), 
		СокрЛП(СтруктураАдресаЗаписи.Помещения[0].ТипПомещения),
		"Квартира"));	  
	      	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		
		РоссийскийАдрес[Элемент.Ключ] = "";
		
	КонецЦикла;
	
	Для Каждого ЗаписьАдреса Из СтруктураАдресаЗаписи Цикл
		
		ПредставлениеСтр = СокрЛП(ЗаписьАдреса.Ключ);
		ЗначениеСтр		 = СокрЛП(ЗаписьАдреса.Значение);
		
		Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие")
			И ЗначениеЗаполнено(ПредставлениеСтр)
			И НЕ РоссийскийАдрес.Получить(ПредставлениеСтр) = Неопределено Тогда
			
			ПредставлениеСтрСокращение = "";
			
			Если СтруктураАдресаЗаписи.Свойство(ПредставлениеСтр + "Сокращение", ПредставлениеСтрСокращение) Тогда
				
				ЗначениеСтр = ЗначениеСтр + " " + СокрЛП(ПредставлениеСтрСокращение);
				
			КонецЕсли;	
			
			РоссийскийАдрес[ПредставлениеСтр] = СокрЛП(ЗначениеСтр);
			          			
			Если ПредставлениеСтр = "НаселенныйПункт"
			   И СтруктураАдресаЗаписи.Свойство("Территория")
			   И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Территория) Тогда
				
				РоссийскийАдрес[ПредставлениеСтр]
					= СокрЛП(РоссийскийАдрес[ПредставлениеСтр]
					+ " " + СокрЛП(СтруктураАдресаЗаписи.Территория)
					+ " " + СокрЛП(СтруктураАдресаЗаписи.ТерриторияСокращение));
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(РоссийскийАдрес) = Тип("Структура")
			И ЗначениеЗаполнено(ПредставлениеСтр)
			И РоссийскийАдрес.Свойство(ПредставлениеСтр) Тогда
			
			ПредставлениеСтрСокращение = "";
			
			Если СтруктураАдресаЗаписи.Свойство(ПредставлениеСтр + "Сокращение", ПредставлениеСтрСокращение) Тогда
				
				ЗначениеСтр = ЗначениеСтр + " " + СокрЛП(ПредставлениеСтрСокращение);
				
			КонецЕсли;	
			            			
			РоссийскийАдрес[ПредставлениеСтр] = СокрЛП(ЗначениеСтр);
			
			Если ПредставлениеСтр = "НаселенныйПункт"
			   И СтруктураАдресаЗаписи.Свойство("Территория")
			   И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Территория) Тогда
				
				РоссийскийАдрес[ПредставлениеСтр]
					= СокрЛП(РоссийскийАдрес[ПредставлениеСтр]
					+ " " + СокрЛП(СтруктураАдресаЗаписи.ТерриторияСокращение)
					+ " " + СокрЛП(СтруктураАдресаЗаписи.Территория));
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес)

	Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") Тогда
		
		Город           = РоссийскийАдрес.Получить("Город");
		НаселенныйПункт = РоссийскийАдрес.Получить("НаселенныйПункт");
		Регион          = РоссийскийАдрес.Получить("Регион");
		
		Если НЕ ПустаяСтрока(Город) Тогда
			
			НаселенныйПункт = Город + ?(НЕ ПустаяСтрока(НаселенныйПункт), ", " + НаселенныйПункт, "");
			РоссийскийАдрес.Вставить("НаселенныйПункт", НаселенныйПункт);
			
		ИначеЕсли НЕ ПустаяСтрока(Регион) И ПустаяСтрока(НаселенныйПункт) Тогда
			
			РоссийскийАдрес.Вставить("НаселенныйПункт", Регион);
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ЗначениеКонтактнойИнформации, ПредставлениеКонтактнойИнформации, РоссийскийАдрес)
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;

	Если ПредставлениеКонтактнойИнформации = "" Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыПервойЗапятой = СтрНайти(ПредставлениеКонтактнойИнформации, ",");
	
	Если КоординатыПервойЗапятой > 0 Тогда
		Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") = 10 Тогда
			// Для иностранного адреса представление может содержать наименование страны
			ПредставлениеКонтактнойИнформации = СокрЛП(Сред(ПредставлениеКонтактнойИнформации, КоординатыПервойЗапятой + 1));
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") <> 9 Тогда 
		
		ПредставлениеКонтактнойИнформации = РаботаСАдресами.СведенияОбАдресе(ЗначениеКонтактнойИнформации);
		
		РоссийскийАдрес.Вставить("Индекс",          ПредставлениеКонтактнойИнформации.Индекс);
		РоссийскийАдрес.Вставить("Регион",          ПредставлениеКонтактнойИнформации.Регион);
		РоссийскийАдрес.Вставить("Район",           ПредставлениеКонтактнойИнформации.Район);
		РоссийскийАдрес.Вставить("Город",           ПредставлениеКонтактнойИнформации.Город);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеКонтактнойИнформации.НаселенныйПункт);
		РоссийскийАдрес.Вставить("Улица",           ПредставлениеКонтактнойИнформации.Улица);
		
		РоссийскийАдрес.Вставить("Дом",
			?(ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Здание.Номер), 
			ПредставлениеКонтактнойИнформации.Здание.Номер, ""));
			
		Если ПредставлениеКонтактнойИнформации.Корпуса.Количество() <> 0
			И ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Корпуса[0].Номер) Тогда
			РоссийскийАдрес.Вставить("Корпус", ПредставлениеКонтактнойИнформации.Корпуса[0].Номер);
		КонецЕсли;
		
		Если ПредставлениеКонтактнойИнформации.Помещения.Количество() <> 0
			И ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Помещения[0].Номер) Тогда
			РоссийскийАдрес.Вставить("Квартира", ПредставлениеКонтактнойИнформации.Помещения[0].Номер);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РоссийскийАдрес = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(ПредставлениеКонтактнойИнформации);
	
КонецПроцедуры

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона)
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых)
	 
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = СтрНайти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	Регион = "";
	
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
			Регион = ПолучитьНазваниеРегионаПоКоду(Регион);
		КонецЕсли;
	КонецЕсли;
	
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",			СоставляющиеАдреса[1]);
	РоссийскийАдрес.Вставить("Регион",          Регион);
	РоссийскийАдрес.Вставить("КодРегиона",      СоставляющиеАдреса[2]);
	РоссийскийАдрес.Вставить("Район",           СоставляющиеАдреса[3]);
	РоссийскийАдрес.Вставить("Город",           СоставляющиеАдреса[4]);
	РоссийскийАдрес.Вставить("НаселенныйПункт", СоставляющиеАдреса[5]);
	РоссийскийАдрес.Вставить("Улица",           СоставляющиеАдреса[6]);
	РоссийскийАдрес.Вставить("Дом",             СоставляющиеАдреса[7]);
	РоссийскийАдрес.Вставить("Корпус",          СоставляющиеАдреса[8]);
	РоссийскийАдрес.Вставить("Квартира",        СоставляющиеАдреса[9]);
	
	Возврат РоссийскийАдрес;
	
КонецФункции

Функция СформироватьПредставлениеМестонахожденияКонтрагента(КодСтраны, ПредставлениеКонтактнойИнформации)
	
	Если КодСтраны = "643" Тогда
		ПредставлениеМестонахождения = КодСтраны + ", " + ПредставлениеКонтактнойИнформации;
	Иначе
		Страна = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		Если Страна.Пустая() Тогда
			Возврат ", " + ПредставлениеКонтактнойИнформации;
		КонецЕсли;
		НаименованиеСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Страна, "Наименование");
		Если СтрНачинаетсяС(ПредставлениеКонтактнойИнформации, НаименованиеСтраны) Тогда
			ПредставлениеМестонахождения = СтрЗаменить(ПредставлениеКонтактнойИнформации, НаименованиеСтраны, КодСтраны);
		Иначе
			ПредставлениеМестонахождения = КодСтраны + ", " + ПредставлениеКонтактнойИнформации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеМестонахождения;
	
КонецФункции

Процедура ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаДокумента, СтрокаВыгрузки)
	
	// Получим из номера таможенной декларации
	//   КодТО              - Код таможенного органа
	//   ДатаРегистрацииСтр - Дата таможенной декларации
	//   НомерДок           - Номер таможенной декларации
	//   ДекларацияНом      - Порядковый номер строки в декларации.
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НомерТаможеннойДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДокумента.НомерТаможеннойДекларации, "/");
		
	Если МассивСлов.Количество() < 3
		ИЛИ МассивСлов.Количество() > 4 Тогда
		// Регистрационный номер таможенной декларации введен не корректно.
		Возврат;
	КонецЕсли;
	
	СтрокаВыгрузки.КодТО    = МассивСлов[0];
	ДатаРегистрацииСтр      = МассивСлов[1];
	СтрокаВыгрузки.НомерДок = МассивСлов[2];
	
	Если СтрДлина(ДатаРегистрацииСтр) = 6 Тогда
		Число = Лев(ДатаРегистрацииСтр, 2);
		Месяц = Сред(ДатаРегистрацииСтр, 3, 2);
		Год   = Прав(ДатаРегистрацииСтр, 2);
		СтрокаВыгрузки.ДатаРегистрацииСтр = "20" + Год + "-" + Месяц  + "-" + Число;
	Иначе
		СтрокаВыгрузки.ДатаРегистрацииСтр = "0001-01-01";
	КонецЕсли; 
	
	Если МассивСлов.Количество() = 4 Тогда
		// Регистрационный номер таможенной декларации содержит порядковый номер строки в декларации.
		ТипЧисло = Новый ОписаниеТипов("Число");
		СтрокаВыгрузки.ДекларацияНом = ТипЧисло.ПривестиЗначение(МассивСлов[3]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПроизводителе(СтрокаДокумента, СтрокаВыгрузки, Правила891, Дата)
	
	Если Не Правила891 Или Не ЗначениеЗаполнено(СтрокаДокумента.Производитель) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПроизводителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаДокумента.Производитель, Дата);
	РеквизитыПроизводителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
		СведенияОПроизводителе, "ПолноеНаименование,ИНН,КПП,ОГРН");
		
	СтрокаВыгрузки.НаименованиеТовара = СтрШаблон("%1, производитель: %2",
		СтрокаВыгрузки.НаименованиеТовара, РеквизитыПроизводителя);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОМаркируемыхТоварах(СтрокаДокумента, СтрокаВыгрузки, Правила891, ШтрихкодыУпаковок)
	
	Если Не Правила891 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура("ДокументСсылка,Номенклатура",
		СтрокаДокумента.ДокументСсылка, СтрокаДокумента.Номенклатура);
	НайденныеСтрокиТовары = ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);

	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		ШтрихкодыУпаковок = "";
		Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			Если ЗначениеЗаполнено(ШтрихкодыУпаковок) Тогда
				ШтрихкодыУпаковок = СтрШаблон("%1, %2", ШтрихкодыУпаковок, СтрокаТовары.ШтрихкодУпаковки);
			Иначе
				ШтрихкодыУпаковок = СтрокаТовары.ШтрихкодУпаковки;
			КонецЕсли; 
		КонецЦикла;
	
		Если ЗначениеЗаполнено(ШтрихкодыУпаковок) Тогда
			СтрокаВыгрузки.НаименованиеТовара = СтрШаблон("%1, %2",
				СтрокаВыгрузки.НаименованиеТовара, ШтрихкодыУпаковок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ++ НЕ УТ
#Область ВыгрузкаВЭлектронномВиде

Процедура ОбновитьСтруктуруРеквизитовВыгрузки(СтруктураРеквизитовВыгрузки) Экспорт
	
	Если Тип(СтруктураРеквизитовВыгрузки) = Тип("Структура") Тогда
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ИмпортерСовпадаетСОтправителем") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ИмпортерСовпадаетСОтправителем", Ложь);
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ИмпортерЯвляетсяЮЛ") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ИмпортерЯвляетсяЮЛ", Истина);
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("КтоИмпортирует") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("КтоИмпортирует", 1);
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("НаимИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("НаимИмпорт",  "");
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ИННЮЛИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ИННЮЛИмпорт", "");
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("КППИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("КППИмпорт",   "");
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ИННФЛИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ИННФЛИмпорт",      "");
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ФамилияФЛИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ФамилияФЛИмпорт",  "");
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ИмяФЛИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ИмяФЛИмпорт",      "");
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовВыгрузки.Свойство("ОтчествоФЛИмпорт") Тогда
			СтруктураРеквизитовВыгрузки.Вставить("ОтчествоФЛИмпорт", "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", ПараметрыВыгрузки.ИмяФайлаСхемы);
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция УчетПеремещенияТоваровЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			УчетПеремещенияТоваровЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист Из СтрокаДерева.Строки Цикл
				УчетПеремещенияТоваровЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЭлектронноеПредставление(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	Если ПараметрыВыгрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	ЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ ПроверитьДанные(СтруктураВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ЭлектронноеПредставление2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	Если ПараметрыВыгрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки) Тогда	
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	ЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ ПроверитьДанные(СтруктураВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ВыгрузкаВозможна(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	СтатусПроверки = Истина;
	
	КодыГосударствЧленовЕАЭС = Новый Массив;
	КодыГосударствЧленовЕАЭС.Добавить("051"); // Армения
	КодыГосударствЧленовЕАЭС.Добавить("112"); // Беларусь
	КодыГосударствЧленовЕАЭС.Добавить("398"); // Казахстан
	КодыГосударствЧленовЕАЭС.Добавить("417"); // Киргизия
	КодыГосударствЧленовЕАЭС.Добавить("643"); // Россия
	
	ПроверитьВозможностьВыгрузки_ПараметрыВыгрузки(СтатусПроверки, ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	ПроверитьВозможностьВыгрузки_Раздел1(СтатусПроверки, ПараметрыВыгрузки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Раздел3(СтатусПроверки, ДанныеДокумента, КодыГосударствЧленовЕАЭС);
	
	ПроверитьВозможностьВыгрузки_Приложение(СтатусПроверки, ДанныеДокумента, КодыГосударствЧленовЕАЭС);
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция КодПричиныВозникновенияЗаявления(ПредставлениеПричины)
	
	КодПричины = "0"; // Недопустимый код для обработки ошибочного ввода
	
	Если НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'первичное заявление';
													|en = 'primary application'") Тогда
		КодПричины = "1";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'взамен ранее представленного';
														|en = 'instead of the previously submitted'") Тогда
		КодПричины = "4";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'корректировка ранее представленного при увеличении цены';
														|en = 'adjustment of previously submitted in case of price increase'") Тогда
		КодПричины = "5";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'взамен ранее представленного при частичном возврате товара';
														|en = 'instead of the goods previously submitted on partial return'") Тогда
		КодПричины = "6";
	КонецЕсли;
	
	Возврат КодПричины;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_ПараметрыВыгрузки(СтатусПроверки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	Раздел1 = ДанныеДокумента.РеквизитыРаздел1;
	
	КодПричины = КодПричиныВозникновенияЗаявления(СокрЛП(Раздел1.ПричинаЗаявления));
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПричинаЗаявления) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не указана причина возникновения заявления.';
								|en = 'Reason for application incurrence is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(КодПричины, "1,4,5,6") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Указана неверная причина возникновения заявления.';
								|en = 'Incorrect application reason is specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КодПричины = "4" ИЛИ КодПричины = "5" ИЛИ КодПричины = "6" Тогда
		Если НЕ ЗначениеЗаполнено(Раздел1.НомерОтметки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указан номер отметки о регистрации в налоговом органе ранее представленного заявления.';
									|en = 'Number of the note confirming registration with the tax authority of the previously submitted application is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаОтметки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указана дата отметки о регистрации в налоговом органе ранее представленного заявления.';
									|en = 'Date of the note of registration with the tax authority of the previously submitted application is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодПричины = "5" Тогда
			Если НЕ ЗначениеЗаполнено(Раздел1.ИзмениеЦеныМесяц) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не указан месяц, в котором участниками договора (контракта) увеличена цена.';
										|en = 'Month in which contract parties increased the price is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Раздел1.ИзмениеЦеныГод) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не указан год, в котором участниками договора (контракта) увеличена цена.';
										|en = 'Year in which contract parties increased the price is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	КодИФНС               = СтруктураРеквизитовВыгрузки.КодИФНС;
	ОтправительЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	
	НаимОтпр      = СтруктураРеквизитовВыгрузки.НаимОтпр;
	ИННЮЛОтпр     = СтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	КППОтпр       = СтруктураРеквизитовВыгрузки.КППОтпр;
	ФамилияФЛОтпр = СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр;
	ИмяФЛОтпр     = СтруктураРеквизитовВыгрузки.ИмяФЛОтпр;
	
	ИмпортерСовпадаетСОтправителем = СтруктураРеквизитовВыгрузки.ИмпортерСовпадаетСОтправителем;
	
	ИмпортерЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ИмпортерЯвляетсяЮЛ;
	
	НаимИмпорт  = СтруктураРеквизитовВыгрузки.НаимИмпорт;
	ИННЮЛИмпорт = СтруктураРеквизитовВыгрузки.ИННЮЛИмпорт;
	КППИмпорт   = СтруктураРеквизитовВыгрузки.КППИмпорт;
	
	ИННФЛИмпорт      = СтруктураРеквизитовВыгрузки.ИННФЛИмпорт;
	ФамилияФЛИмпорт  = СтруктураРеквизитовВыгрузки.ФамилияФЛИмпорт;
	ИмяФЛИмпорт      = СтруктураРеквизитовВыгрузки.ИмяФЛИмпорт;
	ОтчествоФЛИмпорт = СтруктураРеквизитовВыгрузки.ОтчествоФЛИмпорт;
	
	ПрПодп       = СтруктураРеквизитовВыгрузки.ПрПодп1;
	ФамилияПодп  = СтруктураРеквизитовВыгрузки.ФамилияПодп1;
	ИмяПодп      = СтруктураРеквизитовВыгрузки.ИмяПодп1;
	НаимДовПодп  = СтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп = СтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп  = СтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнен код налогового органа. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
								|en = 'Tax authority code is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(КодИФНС))<> 4 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Неверно заполнен код налогового органа. Требуется заполнить 4 символами в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
								|en = 'Tax authority code is populated incorrectly. It should be populated with 4 characters in form ""Export parameters"" called from command menu of the report.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ОтправительЯвляетсяЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(НаимОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнено наименование организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Shipping company name is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИННЮЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнен ИНН организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Shipping company TIN is not populated. It should be populated in form ""Export parameters"" called from the report command menu.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КППОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнен КПП организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Shipping company CRTR is not specified. It should be populated in form ""Export parameters"" called from command menu of a report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправительЯвляетсяЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ФамилияФЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена фамилия отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Sender''s last name is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяФЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнено имя отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Sender name is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИмпортерСовпадаетСОтправителем Тогда
		
		Если ИмпортерЯвляетсяЮЛ Тогда
			Если НЕ ЗначениеЗаполнено(НаимИмпорт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено наименование организации импортера. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню документа.';
										|en = 'Importer company name is blank. Fill it in the ""Export parameters"" form from the document command menu.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИННЮЛИмпорт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнен ИНН организации импортера. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню документа.';
										|en = 'Importer company TIN is blank. Fill it in the ""Export parameters"" form from the document command menu.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КППИмпорт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнен КПП организации импортера. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню документа.';
										|en = 'Importer company CRTR is blank. Fill it in the ""Export parameters"" form from the document command menu.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ФамилияФЛИмпорт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнена фамилия импортера. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню документа.';
										|en = 'Importer last name is blank. Fill it in the ""Export parameters"" form from the document command menu.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИмяФЛИмпорт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено имя импортера. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню документа.';
										|en = 'Importer first name is blank. Fill it in the ""Export parameters"" form from the document command menu.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИННФЛИмпорт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнен ИНН импортера. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню документа.';
										|en = 'Importer TIN is blank. Fill it in the ""Export parameters"" form from the document command menu.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФамилияПодп) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнена фамилия подписанта. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
								|en = 'Signer''s last name is not populated. It should be populated in form ""Export parameters"" called from the report command menu.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПодп) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено имя подписанта. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
								|en = 'Signer name is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПрПодп = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнено наименование документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Name of the document which confirms representative authority is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НомерДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнен номер документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Number of the document which confirms representative authority is not populated. It should be populated in form ""Export parameters"" called from command menu of the report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.';
									|en = 'Date of document which confirms representative authority is not populated. It should be populated in form ""Export parameters"" called from command menu of a report.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Приложение(СтатусПроверки, ДанныеДокумента, КодыГосударствЧленовЕАЭС)
	
	Приложение = ДанныеДокумента.ТаблицаПриложение;
	
	Если Приложение = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено приложение.';
								|en = 'Appendix is required.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
				
		// Продавец.
		Если НЕ ЗначениеЗаполнено(Лист.ТипПрод_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан тип продавца.';
									|en = 'Seller type is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задано полное наименование (ФИО) продавца.';
									|en = 'Seller''s full name is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан код страны продавца.';
									|en = 'Seller country code is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан адрес местонахождения (жительства) продавца.';
									|en = 'Seller''s location (residence) address is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Лист.ТипПок_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан тип покупателя.';
									|en = 'Customer type is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задано полное наименование (ФИО) покупателя.';
									|en = 'Customer''s full name is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан код страны покупателя.';
									|en = 'Customer country code is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		Иначе
			Если НЕ ЗначениеЗаполнено(Лист.ПокупательИНН_КПП)
				И КодыГосударствЧленовЕАЭС.Найти(СокрЛП(Лист.КодСтраныПокупатель)) <> Неопределено Тогда
								
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'В приложении не задан идентификационный код (номер) покупателя из государства-члена ЕАЭС.';
										|en = 'The appendix does not contain the ID code (ID) of the buyer from the EEU member state.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
				
			КонецЕсли;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Лист.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан адрес местонахождения (жительства) покупателя.';
									|en = 'Customer''s location (residence) address is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Лист.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задан номер договора (контракта).';
									|en = 'Contract number is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В приложении не задана дата договора (контракта).';
									|en = 'Contract date is not specified in the application.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Раздел1(СтатусПроверки, ПараметрыВыгрузки, ДанныеДокумента)
	
	Раздел1 = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3 = ДанныеДокумента.РеквизитыРаздел3;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан номер заявления.';
								|en = 'Application number is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата формирования файла выгрузки не может быть раньше 01.07.2010.';
								|en = 'Date of export file generation cannot be earlier than 07/01/2010.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Продавец.
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задано полное наименование (ФИО) продавца.';
								|en = 'Seller''s full name is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПродавец) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан код страны продавца.';
								|en = 'Seller country code is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан адрес местонахождения (жительства) продавца.';
								|en = 'Seller''s location (residence) address is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Покупатель.
	
	ДлинаИНН = СтрДлина(Раздел1.ПокупательИНН);
	Если ДлинаИНН = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан ИНН покупателя.';
								|en = 'Customer TIN is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 неверно задан ИНН покупателя.';
								|en = 'Customer TIN in section 1 is invalid.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задано полное наименование (ФИО) покупателя.';
								|en = 'Customer''s full name is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан код страны покупателя.';
								|en = 'Customer country code is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан адрес местонахождения (жительства) покупателя.';
								|en = 'Customer''s location (residence) address is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о контракте.
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан номер договора (контракта) строки 05.';
								|en = 'Contract number of line 1 is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задана дата договора (контракта) строки 05.';
								|en = 'Contract date of line 1 is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ЕстьДоговорЛизинга И ЕстьДоговорПереработки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья.';
								|en = 'Flags of conclusion of lease agreement and provided materials processing contract cannot be specified in section 1 simultaneously.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о комиссионере (посреднике).
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В разделе 1 не задано полное наименование (ФИО) покупателя.';
								|en = 'Customer''s full name is not specified in section 1.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	                                      	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
	ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НаимОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 1 не задано полное наименование (ФИО) посредника.';
									|en = 'Intermediary''s full name is not specified in section 1.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан код страны посредника.';
									|en = 'Intermediary country code is not specified in section 1.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан адрес местонахождения (жительства) посредника.';
									|en = 'Intermediary''s location (residence) address is not specified in section 1.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 1 не задан номер договора (контракта) посредника.';
									|en = 'Intermediary contract number is not specified in section 1.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 1 не задана дата договора (контракта) посредника.';
									|en = 'Intermediary contract date is not specified in section 1.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Раздел3(СтатусПроверки, ДанныеДокумента, КодыГосударствЧленовЕАЭС)
	
	Раздел3 = ДанныеДокумента.РеквизитыРаздел3;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг)
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг)
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд)
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог)
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
		
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан тип продавца.';
									|en = 'Seller type is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИдентификаторПродавца = СокрЛП(Раздел3.ПродавецИНН_КПП);
		Если НЕ ЗначениеЗаполнено(ИдентификаторПродавца) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан идентификационный код (номер) продавца.';
									|en = 'Identification code (number) of seller is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ИдентификаторПродавца) < 8 ИЛИ СтрДлина(ИдентификаторПродавца) > 14 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 неверно задан идентификационный код (номер) продавца.';
									|en = 'Identification code (number) of seller in section 3 is invalid.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задано полное наименование (ФИО) продавца.';
									|en = 'Seller''s full name is not specified in section 3. '");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан код страны продавца.';
									|en = 'Seller country code is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан адрес местонахождения (жительства) продавца.';
									|en = 'Seller''s location (residence) address is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан тип покупателя.';
									|en = 'Customer type is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задано полное наименование (ФИО) покупателя.';
									|en = 'Customer''s full name is not specified in section 3. '");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан код страны покупателя.';
									|en = 'Customer country code is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		Иначе
			Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
				И КодыГосударствЧленовЕАЭС.Найти(СокрЛП(Раздел3.КодСтраныПокупатель)) <> Неопределено Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан идентификационный код (номер) покупателя из государства-члена ЕАЭС.';
										|en = 'Section 3 does not contain the ID code (ID) of the buyer from the EEU member state.'");
				Сообщение.Сообщить();
				
				СтатусПроверки = Ложь;
				
			КонецЕсли;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан адрес местонахождения (жительства) покупателя.';
									|en = 'Customer''s location (residence) address is not specified in section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задан номер договора (контракта) в строке 12.';
									|en = 'Contract number is not specified in line 12, section 3.  '");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'В разделе 3 не задана дата договора (контракта) в строке 12.';
									|en = 'Contract date is not specified in line 12, section 3.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	СтатусПроверки = Истина;
	
	// Проверка сведений о файле выгрузки.
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата формирования файла выгрузки не может быть раньше 01.07.2010.';
								|en = 'Date of export file generation cannot be earlier than 07/01/2010.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	Раздел1    = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3    = ДанныеДокумента.РеквизитыРаздел3;
	Приложение = ДанныеДокумента.ТаблицаПриложение;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задан номер заявления.';
								|en = 'Application number is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИННКПП = Раздел1.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПродавца = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца = СокрЛП(ИННКПП);
		КПППродавца = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПокупателя = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя = СокрЛП(ИННКПП);
		КПППокупателя = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ИННОрг_1;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННКомиссионера = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КППКомиссионера = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННКомиссионера = СокрЛП(ИННКПП);
		КППКомиссионера = "";
	КонецЕсли;
	
	// Раздел 1. Продавец.
		
	Если Раздел1.КодСтраныПродавец = "112" ИЛИ Раздел1.КодСтраныПродавец = "398" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.';
									|en = 'UNP|TIN|TRN(BIN|IIN) of the seller is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если Раздел1.КодСтраныПродавец = "643" ИЛИ Раздел1.ПродавецБайконур Тогда
		ДлинаИНН = СтрДлина(ИННПродавца);
		
		Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН продавца.';
									|en = 'Seller TIN is invalid.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППродавца);
			Если ДлинаКПП = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не задан КПП продавца.';
										|en = 'Seller CRTR is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан КПП продавца.';
										|en = 'Seller CRTR is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) продавца.';
								|en = 'Seller location (residence) is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Покупатель.
	
	Если Раздел1.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел1.ПокупательБайконур) Тогда
		ДлинаИНН = СтрДлина(ИННПокупателя);
		
		Если ДлинаИНН = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан ИНН покупателя.';
									|en = 'Customer TIN is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН покупателя.';
									|en = 'Customer TIN is invalid.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППокупателя);
			Если ДлинаКПП = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не задан КПП продавца.';
										|en = 'Seller CRTR is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан КПП продавца.';
										|en = 'Seller CRTR is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).';
								|en = 'Full name of the customer company (IE full name) is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задан код страны организации-покупателя.';
								|en = 'Code of customer company country is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ(Раздел1.КодСтраныПокупатель = "643" ИЛИ Раздел1.КодСтраныПокупатель = "398") Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код страны организации-покупателя должен быть 398 или 643.';
								|en = 'Customer country code should be 398 or 643.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) покупателя.';
								|en = 'Customer location (residence) is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о контракте.

	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задан номер договора(контракта).';
								|en = 'Contract number is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не задана дата договора(контракта).';
								|en = 'Contract date is not specified.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;

	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ЕстьДоговорЛизинга И ЕстьДоговорПереработки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья.';
								|en = 'Flags of making a lease agreement and a contract of provided materials processing cannot be specified at the same time.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о комиссионере (посреднике).
	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
							ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) И СтрНайти("112,398,643", Раздел1.КодСтраныОрг1) <> 0 Тогда
			Если ПустаяСтрока(ИННКомиссионера) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не задан УНП|ИНН|РНН(БИН|ИИН) организации.';
										|en = 'UNP|TIN|TRN(BIN|IIN) of the company is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Раздел1.КодСтраныОрг1 = "643" ИЛИ Раздел1.КомиссионерБайконур Тогда	
			ДлинаИНН = СтрДлина(ИННКомиссионера);
			
			Если ДлинаИНН = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не задан ИНН покупателя.';
										|en = 'Customer TIN is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН покупателя.';
										|en = 'Customer TIN is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КППКомиссионера);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не задан КПП продавца.';
											|en = 'Seller CRTR is not specified.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Неверно задан КПП продавца.';
											|en = 'Seller CRTR is invalid.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан код страны организации.';
									|en = 'Code of the company country is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) организации.';
									|en = 'Company location (residence) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан номер договора(контракта).';
									|en = 'Contract number is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задана дата договора(контракта).';
									|en = 'Contract date is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента);

	// Проверка раздела 3.
		
	ИННКПП = Раздел3.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПродавца_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца_Раздел3 = СокрЛП(ИННКПП);
		КПППродавца_Раздел3 = "";
	КонецЕсли;
	
	ИННКПП = Раздел3.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПокупателя_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя_Раздел3 = СокрЛП(ИННКПП);
		КПППокупателя_Раздел3 = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
	 
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан тип организации-продавца.';
									|en = 'Seller company type is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ИННПродавца_Раздел3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.';
									|en = 'UNP|TIN|TRN(BIN|IIN) of the seller is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.ПродавецБайконур Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН продавца.';
										|en = 'Seller TIN is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Раздел3);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не задан КПП продавца.';
											|en = 'Seller CRTR is not specified.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Неверно задан КПП продавца.';
											|en = 'Seller CRTR is invalid.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(ИННПродавца_Раздел3) < 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Неверно задан УНП|ИНН|РНН(БИН|ИИН) продавца.';
									|en = 'Seller UNP|TIN|TRN(BIN|IIN) is specified incorrectly.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан код страны организации-продавца.';
									|en = 'Code of seller company country is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		Иначе
			Если НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,398,643") Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Код страны организации-продавца должен быть 398, 112 или 643.';
										|en = 'Seller company code should be 398, 112 or 643.'");
				Сообщение.Сообщить();
			Иначе
				Если (Раздел1.КодСтраныПокупатель = "643") И НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,398") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Код страны организации-продавца должен быть 112 или 398.';
											|en = 'Seller country code should be 112 or 398.'");
					Сообщение.Сообщить();
				ИначеЕсли (Раздел1.КодСтраныПокупатель = "398") И НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,643") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Код страны организации-продавца должен быть 112 или 643.';
											|en = 'Seller company code should be 112 or 643.'");
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).';
									|en = 'Full name of seller company (IE full name) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) продавца.';
									|en = 'Seller location (residence) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан тип организации-покупателя.';
									|en = 'Customer company type is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Раздел3.КодСтраныПокупатель = "643" ИЛИ Раздел3.КодСтраныПокупатель = "112" ИЛИ Раздел3.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Раздел3) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.';
									|en = 'UNP|TIN|TRN(BIN|IIN) of the customer is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел3.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН покупателя.';
										|en = 'Customer TIN is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Раздел3);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не задан КПП покупателя.';
											|en = 'Customer CRTR is not specified.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Неверно задан КПП покупателя.';
											|en = 'Customer CRTR is invalid.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
    		Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).';
									|en = 'Full name of the customer company (IE full name) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан код страны организации-покупателя.';
									|en = 'Code of customer company country is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) покупателя.';
									|en = 'Customer location (residence) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан номер договора(контракта).';
									|en = 'Contract number is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задана дата договора(контракта) в строке 12.';
									|en = 'Contract date in line 12 is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Проверка приложений.
	Для Каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
		
		ИННКПП = Лист.ПродавецИНН_КПП;
											 
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = СтрНайти(ИННКПП, "/");
			ИННПродавца_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППродавца_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПродавца_Приложение = СокрЛП(ИННКПП);
			КПППродавца_Приложение = "";
		КонецЕсли;
		
		ИННКПП = Лист.ПокупательИНН_КПП;
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = СтрНайти(ИННКПП, "/");
			ИННПокупателя_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППокупателя_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПокупателя_Приложение = СокрЛП(ИННКПП);
			КПППокупателя_Приложение = "";
		КонецЕсли;
		
		// Продавец.
		Если НЕ ЗначениеЗаполнено(Лист.ТипПрод_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан тип организации-продавца.';
									|en = 'Seller company type is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Лист.КодСтраныПродавец = "643" ИЛИ Лист.КодСтраныПродавец = "112" ИЛИ Лист.КодСтраныПродавец = "398") И ПустаяСтрока(ИННПродавца_Приложение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.';
									|en = 'UNP|TIN|TRN(BIN|IIN) of the seller is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Лист.КодСтраныПродавец = "643" ИЛИ Лист.ПродавецБайконур Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН продавца.';
										|en = 'Seller TIN is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Приложение);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не задан КПП продавца.';
											|en = 'Seller CRTR is not specified.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Неверно задан КПП продавца.';
											|en = 'Seller CRTR is invalid.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Задан код страны организации-продавца.';
									|en = 'Country code of the seller company is specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).';
									|en = 'Full name of seller company (IE full name) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) продавца.';
									|en = 'Seller location (residence) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Лист.ТипПок_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан тип организации-покупателя.';
									|en = 'Customer company type is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Лист.КодСтраныПокупатель = "643" ИЛИ Лист.КодСтраныПокупатель = "112" ИЛИ Лист.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Приложение) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.';
									|en = 'UNP|TIN|TRN(BIN|IIN) of the customer is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Лист.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Лист.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Неверно задан ИНН покупателя.';
										|en = 'Customer TIN is invalid.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Приложение);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не задан КПП покупателя.';
											|en = 'Customer CRTR is not specified.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Неверно задан КПП покупателя.';
											|en = 'Customer CRTR is invalid.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).';
									|en = 'Full name of the customer company (IE full name) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан код страны организации-покупателя.';
									|en = 'Code of customer company country is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Лист.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задано местонахождение (место жительства) покупателя.';
									|en = 'Customer location (residence) is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Лист.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан номер договора(контракта).';
									|en = 'Contract number is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задана дата договора(контракта).';
									|en = 'Contract date is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
			
	// Проверка заполненности параметров выгрузки, задаваемых на форме выгрузки.
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		КодИФНС = СтруктураРеквизитовВыгрузки.КодИФНС;
	Иначе
		КодИФНС = "";
	КонецЕсли;
	
	ОтправительЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	ИННЮЛОтпр             = СтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	ИННФЛОтпр             = СтруктураРеквизитовВыгрузки.ИННФЛОтпр;
	ПрПодп1               = СтруктураРеквизитовВыгрузки.ПрПодп1;
	НаимДовПодп1          = СтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп1         = СтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп1          = СтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	ОтправленПочтой       = СтруктураРеквизитовВыгрузки.ОтправленПочтой;
	ПрКурьер              = СтруктураРеквизитовВыгрузки.ПрКурьер;
	НаимДовКурьер         = СтруктураРеквизитовВыгрузки.НаимДовКурьер;
	НомерДовКурьер        = СтруктураРеквизитовВыгрузки.НомерДовКурьер;
	ДатаДовКурьер         = СтруктураРеквизитовВыгрузки.ДатаДовКурьер;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнен код налогового органа! Необходимо заполнить в форме настроек параметров выгрузки.';
								|en = 'Tax authority code is not populated. It should be populated in export parameter settings.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННЮЛОтпр)) ИЛИ (НЕ ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННФЛОтпр)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнен ИНН отправителя! Необходимо заполнить в форме настроек параметров выгрузки.';
								|en = 'Sender TIN is not populated. It should be populated in the form of export parameter settings.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли; 

	Если ПрПодп1 = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(НомерДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовПодп1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнены сведения о доверенности подписанта 1! Необходимо заполнить в форме настроек параметров выгрузки.';
									|en = 'Information about signer''s letter of authority 1 is not populated. It should be populated in form of export parameter settings.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправленПочтой И ПрКурьер = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(НомерДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовКурьер) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнены сведения о доверенности курьера!. Необходимо заполнить в форме настроек параметров выгрузки.';
									|en = 'Information about courier''s letter of authority is not populated. It should be populated in the form of export parameter settings.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	
	Если ТаблицаРаздел1 = Неопределено Тогда
		СтатусПроверки = Ложь;
		Возврат;
	КонецЕсли;
	
	ЧислоВыгружаемыхТоваров = 0;
	НомСтроки = 1;
	
	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ТаблицаРаздел1 = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнена таблица с товарами.';
								|en = 'Table with goods is empty.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		СтрокаЗаполнена = Ложь;
		
		Для Инд = 2 По 13 Цикл
			Если ЗначениеЗаполнено(СтрТабл["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		СтруктураСтавок = Новый Структура;
		СтруктураСтавок.Вставить("Ст16", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%"), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст17", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%"), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст18", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%"), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст21", "");
		
		СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
		ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
		ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
		
		СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%"), ",", "."), "%", "");
		СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%"), ",", "."), "%", "");
		СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%"), ",", "."), "%", "");
		
		СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0", СтАкцизТверд);
		СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0", СтАкцизАдвал);
		СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0", СтНДС);
		
		// Значение единицы измерения дополнительной величины налоговой базы.
		ЗначениеКоличТов = СтрТабл.П000010000105;
		ЗначениеНБАкциз = СтрТабл.П000010000114;
		ЗаполнятьЕдИзмТовНБАкц = (ЗначениеКоличТов <> ЗначениеНБАкциз)
		                       И (ЗначениеКоличТов <>0)
		                       И НЕ (ПрОсвАкциз = 3 ИЛИ ПрОсвАкциз = 4);
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнено наименование товара.';
									|en = 'Goods name is not populated. '");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ТНВЭД = СтрТабл.П000010000103;
		Если (ПрОсвАкциз <> 4)	
		 ИЛИ (ПрОсвНДС = 2)
		 ИЛИ (ПрОсвНДС = 1 И СтНДС = 10) Тогда
			Если ПустаяСтрока(ТНВЭД) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнен код ТН ВЭД.';
										|en = 'FEACN code is not filled in.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Единица измерения.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(СтрТабл.П000010000105)) Тогда
			Если ПустаяСтрока(СтрТабл.П000010000104) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнена единица измерения товара.';
										|en = 'Goods unit of measure is not populated.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Количество товара.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(СтрТабл.П000010000104)) Тогда
			Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000105) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не указано количество товара.';
										|en = 'Goods quantity is not specified.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтоимостьТовара = СтрТабл.П000010000106;
		Если НЕ ЗначениеЗаполнено(СтоимостьТовара) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена стоимость товара.';
									|en = 'Goods cost is not populated. '");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодВалюты = СтрТабл.П000010000107;
		Если ПустаяСтрока(КодВалюты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указана валюта товара.';
									|en = 'Goods currency is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КурсВалюты = СтрТабл.П000010000108;
		
		БазаВалюты = 0;
				
		Если НЕ ЗначениеЗаполнено(КурсВалюты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указан курс валюты товара.';
									|en = 'Goods exchange rate is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли КодВалюты = "643" Тогда 
			Если КурсВалюты <> 1 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Для валюты с кодом 643 (Российский рубль) курс валюты должен равняться 1.';
										|en = 'Exchange rate should be 1 for the currency with code 643 (Russian ruble). '");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Транспортный (товаросопроводительный) документ.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000109) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указаны серия, номер транспортного документа.';
									|en = 'Series and number of the transport document are not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000110) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указана дата транспортного документа.';
									|en = 'Transport document date is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Счет-фактура.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000111) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указан номер счета-фактуры.';
									|en = 'Tax invoice number is not specified'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000112) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указана дата счета-фактуры.';
									|en = 'Tax invoice date is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Дата принятия на учет товара.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000113) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата принятия товара на учет.';
									|en = 'Date of goods receiving for accounting is not populated.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
				
		НалоговаяБазаНДС = СтрТабл.П000010000115;
		Если НалоговаяБазаНДС <= 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена налоговая база (НДС).';
									|en = 'Tax base (VAT) is not populated. '");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
						
		Если ПрОсвНДС = 1 И СтНДС <> "10" И СтНДС <> "18" И СтНДС <> "20" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Неверно задана ставка НДС.';
									|en = 'VAT rate is specified incorrectly.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
						
		Если ПрОсвНДС = 1 И СтрТабл.П000010000120 <= 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задана сумма НДС.';
									|en = 'VAT amount is not specified.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В таблице не указан ни один товар.';
								|en = 'No goods are specified in the table.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненЛистРазделаПриложение(ЛистРаздела)
	
	Результат = ЗначениеЗаполнено(ЛистРаздела.ТипПрод_Пр)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.КодСтраныПродавец)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ТипПок_Пр)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.КодСтраныПокупатель)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.НомерДог)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ДатаДог)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.НомерСпецификации)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ДатаСпецификации);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовВыгрузки.Количество() = 0 Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
		
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыРаздел1.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ТекущаяДатаСеанса());
	
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		ПараметрыВыгрузки.Вставить("КодИФНС", СтруктураРеквизитовВыгрузки.КодИФНС);
	КонецЕсли;
		
	ПараметрыВыгрузки.Вставить("ПрОтпр", Строка(СтруктураРеквизитовВыгрузки.ПрОтпр));

	ПараметрыВыгрузки.Вставить("ПрОтпр", Формат(СтруктураРеквизитовВыгрузки.ПрОтпр, ""));
															  	
	Если СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		 СтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		 СтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",        СтруктураРеквизитовВыгрузки.КППОтпр);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",      СтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр",  СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",      СтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр", СтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
		
	КонецЕсли;

	Если СтруктураРеквизитовВыгрузки.ПрОтпр = 1 Тогда
		
		ПараметрыВыгрузки.Вставить("ПрПодп1", Формат(СтруктураРеквизитовВыгрузки.ПрПодп1, ""));
		
		Если НЕ ПустаяСтрока(СтруктураРеквизитовВыгрузки.ФамилияПодп2 + СтруктураРеквизитовВыгрузки.ИмяПодп2 + СтруктураРеквизитовВыгрузки.ОтчествоПодп2) Тогда
			
			ПараметрыВыгрузки.Вставить("ПрПодп2", "4");
			ПараметрыВыгрузки.Вставить("ИННФЛПодп2",     СтруктураРеквизитовВыгрузки.ИННФЛПодп2);
			ПараметрыВыгрузки.Вставить("ДолжностьПодп2", СтруктураРеквизитовВыгрузки.ДолжностьПодп2);
			
			ПараметрыВыгрузки.Вставить("ФамилияПодп2",  СтруктураРеквизитовВыгрузки.ФамилияПодп2);
			ПараметрыВыгрузки.Вставить("ИмяПодп2",      СтруктураРеквизитовВыгрузки.ИмяПодп2);
			ПараметрыВыгрузки.Вставить("ОтчествоПодп2", СтруктураРеквизитовВыгрузки.ОтчествоПодп2);
			
			Если СтруктураРеквизитовВыгрузки.Свойство("НаимДовПодп2") Тогда
				
				ПараметрыВыгрузки.Вставить("НаимДовПодп2",  СтруктураРеквизитовВыгрузки.НаимДовПодп2);
				ПараметрыВыгрузки.Вставить("НомерДовПодп2", СтруктураРеквизитовВыгрузки.НомерДовПодп2);
				ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп2, "ДФ=дд.ММ.гггг"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда
		
		ПараметрыВыгрузки.Вставить("НаимДовПодп1",		СтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп1",		СтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп1",		Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));
		
	КонецЕсли;
															  	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",     СтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1", СтруктураРеквизитовВыгрузки.ДолжностьПодп1);
															  	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  СтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      СтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", СтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	Если НЕ СтруктураРеквизитовВыгрузки.ОтправленПочтой Тогда
		
		ПараметрыВыгрузки.Вставить("ПрКурьер",       Формат(СтруктураРеквизитовВыгрузки.ПрКурьер, ""));
		ПараметрыВыгрузки.Вставить("ИННФЛКурьер",    СтруктураРеквизитовВыгрузки.ИННФЛКурьер);
		
		ПараметрыВыгрузки.Вставить("ФамилияКурьер",  СтруктураРеквизитовВыгрузки.ФамилияКурьер);
		ПараметрыВыгрузки.Вставить("ИмяКурьер",      СтруктураРеквизитовВыгрузки.ИмяКурьер);
		ПараметрыВыгрузки.Вставить("ОтчествоКурьер", СтруктураРеквизитовВыгрузки.ОтчествоКурьер);
		
		Если СтруктураРеквизитовВыгрузки.ПрКурьер = 3 Тогда
			
			ПараметрыВыгрузки.Вставить("НаимДовКурьер",  СтруктураРеквизитовВыгрузки.НаимДовКурьер);
			ПараметрыВыгрузки.Вставить("НомерДовКурьер", СтруктураРеквизитовВыгрузки.НомерДовКурьер);
			ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовКурьер, "ДФ=дд.ММ.гггг"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_06_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьСтруктуруПараметров2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовВыгрузки.Количество() = 0 Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
		
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыРаздел1.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ДанныеДокумента.РеквизитыРаздел1.ДатаДокНП, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		ПараметрыВыгрузки.Вставить("КодНО", СтруктураРеквизитовВыгрузки.КодИФНС);
	КонецЕсли;
																	  	
	Если СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		 СтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		 СтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",        СтруктураРеквизитовВыгрузки.КППОтпр);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",      СтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр",  СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",      СтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр", СтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовВыгрузки.ИмпортерСовпадаетСОтправителем Тогда
		
		Если СтруктураРеквизитовВыгрузки.ИмпортерЯвляетсяЮЛ Тогда
			
			ПараметрыВыгрузки.Вставить("НаимИмп",  СтруктураРеквизитовВыгрузки.НаимИмпорт);
			ПараметрыВыгрузки.Вставить("ИННЮЛИмп", СтруктураРеквизитовВыгрузки.ИННЮЛИмпорт);
			ПараметрыВыгрузки.Вставить("КППИмп",   СтруктураРеквизитовВыгрузки.КППИмпорт);
			
		Иначе
			
			ПараметрыВыгрузки.Вставить("ИННФЛИмп",      СтруктураРеквизитовВыгрузки.ИННФЛИмпорт);
			ПараметрыВыгрузки.Вставить("ФамилияФЛИмп",  СтруктураРеквизитовВыгрузки.ФамилияФЛИмпорт);
			ПараметрыВыгрузки.Вставить("ИмяФЛИмп",      СтруктураРеквизитовВыгрузки.ИмяФЛИмпорт);
			ПараметрыВыгрузки.Вставить("ОтчествоФЛИмп", СтруктураРеквизитовВыгрузки.ОтчествоФЛИмпорт);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", Формат(СтруктураРеквизитовВыгрузки.ПрПодп1, ""));
	
	Если СтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда

		ПараметрыВыгрузки.Вставить("НаимДовПодп",  СтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп", СтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));

	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп",     СтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп", СтруктураРеквизитовВыгрузки.ДолжностьПодп1);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп",  СтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп",      СтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп", СтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_08_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл2015Кв1(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(Дата)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если Дата >= '20150101' Тогда
		Макет = Отчеты.РегламентированныйОтчетЗаявлениеОВвозеТоваров.ПолучитьМакет("СхемаВыгрузки508");
	Иначе
		Макет = Отчеты.РегламентированныйОтчетЗаявлениеОВвозеТоваров.ПолучитьМакет("СтруктураXML506");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				
				Если Уровень <> 0 Тогда
					
					Для Инд = 1 По НомСтр - 2 Цикл
						
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						
						Если Узел <> Неопределено Тогда
							
							РодительскийУзел = Узел;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки, ДанныеДокумента)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр Из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СформироватьИдФайл(ПараметрыВыгрузки)
			
	ИдентОтпр = "";
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

Функция СформироватьИдФайл2015Кв1(ПараметрыВыгрузки)
	
	ИдентОтпр = "";
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодНО
				+ "_" + ПараметрыВыгрузки.КодНО
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел);
		
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				
				Узел.Строки.Удалить(ТекСтр);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		
		Если ДанныеДокумента.Свойство(Узел.Раздел) Тогда
			ПоказателиРаздела = ДанныеДокумента[Узел.Раздел];
		Иначе
			ПоказателиРаздела = ДанныеДокумента.РеквизитыШапка;
		КонецЕсли;
				
		Для Каждого Эл Из ПоказателиРаздела Цикл
			
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УсловиеВыполнено(ПараметрыВыгрузки, Условие)
	
	Попытка
		
		РезультатВычисленияВыражения = ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(Условие, "&", "Параметры."), ПараметрыВыгрузки);
		
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось вычислить выражение-условие: %1!';
																							|en = 'Cannot calculate condition expression: %1.'"), Условие);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось вычислить выражение-условие: %1!';
																						|en = 'Cannot calculate condition expression: %1.'"), Условие);
			
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, ДанныеДокумента);
				
				Если ДанныеДокумента.РеквизитыРаздел1.Дата >= '20150101' Тогда
					
					ЗаполнитьСодержательнуюЧасть2015Кв1(Стр, ДанныеДокумента);
					
				Иначе
					
					ЗаполнитьСодержательнуюЧасть(Стр, ДанныеДокумента);
					
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, ДанныеДокумента);
				
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
					
				Иначе
					
					Стр.Значение = "";
					
				КонецЕсли;
				
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
					
				КонецЕсли;
				
			Иначе
				
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
		
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
		
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Формирование XML: Длина значения показателя ""%1"" меньше минимально возможной (%2 < %3)';
																							|en = 'XML generation: Length of the ""%1"" indicator value is less than the minimum possible length (%2 < %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МинРазмерность);
			Сообщение.Сообщить();
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Формирование XML: Длина значения показателя ""%1"" больше максимально возможной (%2 > %3)';
																							|en = 'XML generation: Length of the ""%1"" indicator value is more than the maximum possible length (%2 > %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МаксРазмерность);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3        = ДанныеДокумента.РеквизитыРаздел3;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	Приложение     = ДанныеДокумента.ТаблицаПриложение;
	Сведения       = ДанныеДокумента.ТаблицаВыпискиБанка;
	Зачет          = ДанныеДокумента.ТаблицаСведенияОЗачете;

	
	Узел_СвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_СвЗвл, ДанныеДокумента);
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаДокНП", Формат(Раздел1.Дата, "ДФ=дд.ММ.гггг"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрЛизинг", ?(НЕ Раздел1.ПрЛизинг, "0", "1"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрДавСырья", ?(НЕ Раздел1.ПрДавСырья, "0", "1"));
	
	Узел_СвКонтракт1 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт1");
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КПППродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).КПП);
	
	КодКЛАДРПродР1 = КодКЛАДРПоАдресу(Раздел1.ПродавецАдрес);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КодКЛАДРПродР1", КодКЛАДРПродР1);
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КПППокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).КПП);
	
	КодКЛАДРПокР1 = КодКЛАДРПоАдресу(Раздел1.ПокупательАдрес);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КодКЛАДРПокР1", КодКЛАДРПокР1);
	
	Узел_СвКонтр1 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт1, "СвКонтр1");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(Узел_СвКонтр1, ШаблонУзелСвСпециф);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	УзелСвКонтрКомисс = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтрКомисс");
	Если Раздел1.КомиссионерБайконур Тогда	
		УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "ПрБкнрОрг", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "ИдНомОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "КППОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).КПП);
	
	КодКЛАДРОрг = КодКЛАДРПоАдресу(Раздел1.КомиссионерАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "КодКЛАДРОрг", КодКЛАДРОрг);
	
	УзелСвКонтракт2 = ПолучитьПодчиненныйЭлемент(УзелСвКонтрКомисс, "СвКонтракт2");
	
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации07.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации07[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтракт2, ШаблонУзелСвСпециф);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	ШаблонУзелСвТовар = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			УзелСвТовар = СкопироватьУзел(Узел_СвЗвл, ШаблонУзелСвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(СтрТабл, УзелСвТовар);
			
			УстановитьЗначениеЭлемента(УзелСвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			ИмяСлужебногоПоля = "П000010000122";
			
			Если НЕ ТаблицаРаздел1.Колонки.Найти(ИмяСлужебногоПоля) = Неопределено И СокрЛП(СтрТабл[ИмяСлужебногоПоля]) <> "" Тогда
				ИмяПоляЕдИзм = ИмяСлужебногоПоля;
			Иначе
				ИмяПоляЕдИзм = "П000010000104";
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТов", СокрЛП(СтрТабл[ИмяПоляЕдИзм]));
			
			КодВалюты = СокрЛП(СтрТабл.П000010000107);
			БазаВалюты = 0;
			Если НЕ ТаблицаРаздел1.Колонки.Найти("П000010000125") = Неопределено Тогда
				БазаВалюты = СтрТабл.П000010000125;
			КонецЕсли;
			Если КодВалюты = "643" ИЛИ БазаВалюты = 0 Тогда
				БазаВалюты = 1;
			КонецЕсли;
			УстановитьЗначениеЭлемента(УзелСвТовар, "БазаВал", БазаВалюты);
			
			СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", "");
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			УстановитьЗначениеЭлемента(УзелСвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			УстановитьЗначениеЭлемента(УзелСвТовар, "ПрОсвНДС",   ПрОсвНДС);
			УстановитьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТовНБАкц", "");
			
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И СтАкцизТверд <> "0"));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);
			
			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				УстановитьЗначениеЭлемента(УзелСвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				УстановитьЗначениеЭлемента(УзелСвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			УстановитьЗначениеЭлемента(УзелСвТовар, "СтНДС", ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ШаблонУзелСвТСД = ПолучитьПодчиненныйЭлемент(УзелСвТовар, "СвТСД");
						
			ТТДНомер = ВРЕГ(СокрЛП(СтрТабл.П000010000109));
			ТТДДата = СтрТабл.П000010000110;
				
			Если НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
				
			УзелСвТСД = СкопироватьУзел(УзелСвТовар, ШаблонУзелСвТСД);
			УстановитьЗначениеЭлемента(УзелСвТСД, "СерНомТСД", ТТДНомер);
			УстановитьЗначениеЭлемента(УзелСвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгрузка раздела 3.
	УзелСвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, УзелСвКонтракт3, ДанныеДокумента);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ТипПродР3", Раздел3.ТипПрод_3);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ТипПокР3", Раздел3.ТипПок_3);
			
	Если НЕ Раздел3.ПродавецБайконур = Неопределено
	   И Раздел3.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПродР3", "1");
	КонецЕсли;
	Если НЕ Раздел3.ПокупательБайконур = Неопределено
	   И Раздел3.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПокР3", "1");
	КонецЕсли;
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КПППродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).КПП);
	
	КодКЛАДРПродР3 = КодКЛАДРПоАдресу(Раздел3.ПродавецАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КодКЛАДРПродР3", КодКЛАДРПродР3);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КПППокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).КПП);
	
	КодКЛАДРПокР3 = КодКЛАДРПоАдресу(Раздел3.ПокупательАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КодКЛАДРПокР3", КодКЛАДРПокР3);
	
	УзелСвКонтрР3 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт3, "СвКонтрР3");
	ПрототипУзла_УзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификацииРаздел3.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификацииРаздел3[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_УзелСвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	// Выгружаем сведения о выписках раздела "Сведения"
	
	НомерБанкаПП = 0;
	ЧислоВыгруженныхСтрок = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	
	Для Каждого ДанныеЛиста Из Сведения Цикл
		
		ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСвПлДок, ДанныеДокумента);
		
		ШаблонУзелСвВыпБанк = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвВыпБанк");
			
		УзелСвВыпБанк = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвВыпБанк);
		ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвВыпБанк);
		УстановитьЗначениеЭлемента(УзелСвВыпБанк, "НомВыпПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			УстановитьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгружаем сведения раздела "Зачет"
	
	ЧислоВыгруженныхСтрок = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	
	Для Каждого ДанныеЛиста Из Зачет Цикл
		
		ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСвПлДок, ДанныеДокумента);
		
		ШаблонУзелСвЗачет = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвЗачет");
		
		УзелСвЗачет = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвЗачет);
		ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвЗачет);
		УстановитьЗначениеЭлемента(УзелСвЗачет, "НомПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			УстановитьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгружаем приложения.
	НомерПриложения = 0;
	
	ШаблонУзелСвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		УзелСвКонтрПр = СкопироватьУзел(УзелРодитель, ШаблонУзелСвКонтрПр);
		ЗаполнитьДаннымиУзел(ЛистПриложения, УзелСвКонтрПр, ДанныеДокумента);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ТипПродП", ЛистПриложения.ТипПрод_Пр);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ТипПокП", ЛистПриложения.ТипПок_Пр);
		
		Если НЕ ПустаяСтрока(ЛистПриложения.ПродавецБайконур) Тогда
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПродП", "1");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЛистПриложения.ПокупательБайконур) Тогда
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПокП", "1");
		КонецЕсли;
		
		КодКЛАДРПродП = КодКЛАДРПоАдресу(ЛистПриложения.ПродавецАдрес);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КодКЛАДРПродП", КодКЛАДРПродП);
		
		КодКЛАДРПокП = КодКЛАДРПоАдресу(ЛистПриложения.ПокупательАдрес);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КодКЛАДРПокП", КодКЛАДРПокП);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПродП", РазделитьИННКПП(ЛистПриложения.ПродавецИНН_КПП).ИНН);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КПППродП",   РазделитьИННКПП(ЛистПриложения.ПродавецИНН_КПП).КПП);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПокП",  РазделитьИННКПП(ЛистПриложения.ПокупательИНН_КПП).ИНН);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КПППокП",    РазделитьИННКПП(ЛистПриложения.ПокупательИНН_КПП).КПП);
		
		УзелСвКонтрП = ПолучитьПодчиненныйЭлемент(УзелСвКонтрПр, "СвКонтрП");
		ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрП, "СвСпециф");
		
		Для Сч = 1 По ДанныеДокумента.ТаблСпецПрил3.Количество() Цикл
		
			Строка = ДанныеДокумента.ТаблСпецПрил3[Сч - 1];
		
			УзелСвСпециф = СкопироватьУзел(УзелСвКонтрП, ШаблонУзелСвСпециф);
			УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
			УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть2015Кв1(УзелРодитель, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3        = ДанныеДокумента.РеквизитыРаздел3;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	Приложение     = ДанныеДокумента.ТаблицаПриложение;
	
	Узел_СвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_СвЗвл, ДанныеДокумента);
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаДокНП", Формат(Раздел1.Дата, "ДФ=дд.ММ.гггг"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрЛизинг", ?(НЕ Раздел1.ПрЛизинг, "0", "1"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрДавСырья", ?(НЕ Раздел1.ПрДавСырья, "0", "1"));
	
	КодПричины = КодПричиныВозникновенияЗаявления(СокрЛП(Раздел1.ПричинаЗаявления));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПВДок", КодПричины);
	
	Если КодПричины = "4" ИЛИ КодПричины = "6" Тогда
		УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомОтм", СокрЛП(Раздел1.НомерОтметки));
		УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаОтм", Раздел1.ДатаОтметки);
	КонецЕсли;
	
	Узел_СвКонтракт1 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт1");
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПродР1", СокрЛП(Раздел1.ПродавецИНН_КПП));
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрПродФЛ", ?(Раздел1.ПрПродФЛ, "1", "0"));
		
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПокР1", СокрЛП(Раздел1.ПокупательИНН));
	
	Узел_СвКонтр1 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт1, "СвКонтр1");
	ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф",  СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	Узел_СвКонтрКомисс = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтрКомисс");
	УстановитьЗначениеЭлемента(Узел_СвКонтрКомисс, "ИдНомОрг", СокрЛП(Раздел1.ИННОрг_1));
	
	Узел_СвКонтракт2 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрКомисс, "СвКонтракт2");
	
	ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации07.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации07[Сч - 1];
				
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф",  СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	ПрототипУзла_СвТовар = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			Узел_СвТовар = НовыйУзелИзПрототипа(ПрототипУзла_СвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(СтрТабл, Узел_СвТовар);
			
			УстановитьЗначениеЭлемента(Узел_СвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			ИмяСлужебногоПоля = "П000010000122";
			
			Если НЕ ТаблицаРаздел1.Колонки.Найти(ИмяСлужебногоПоля) = Неопределено И СокрЛП(СтрТабл[ИмяСлужебногоПоля]) <> "" Тогда
				ИмяПоляЕдИзм = ИмяСлужебногоПоля;
			Иначе
				ИмяПоляЕдИзм = "П000010000104";
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ЕдИзмТов", СокрЛП(СтрТабл[ИмяПоляЕдИзм]));
			
			КодВалюты = СокрЛП(СтрТабл.П000010000107);
			БазаВалюты = 0;
			Если НЕ ТаблицаРаздел1.Колонки.Найти("П000010000125") = Неопределено Тогда
				БазаВалюты = СтрТабл.П000010000125;
			КонецЕсли;
			Если КодВалюты = "643" ИЛИ БазаВалюты = 0 Тогда
				БазаВалюты = 1;
			КонецЕсли;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "БазаВал", БазаВалюты);
			
			СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", "");
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ПрОсвНДС",   ПрОсвНДС);
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ЕдИзмТовНБАкц", "");
			
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И СтАкцизТверд <> "0"));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);
			
			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				УстановитьЗначениеЭлемента(Узел_СвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				УстановитьЗначениеЭлемента(Узел_СвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "СтНДС", ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ПрототипУзла_СвТСД = ПолучитьПодчиненныйЭлемент(Узел_СвТовар, "СвТСД");
						
			ТТДНомер = ВРЕГ(СокрЛП(СтрТабл.П000010000109));
			ТТДДата = СтрТабл.П000010000110;
				
			Если НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
				
			Узел_СвТСД = НовыйУзелИзПрототипа(ПрототипУзла_СвТСД);
			УстановитьЗначениеЭлемента(Узел_СвТСД, "СерНомТСД", ТТДНомер);
			УстановитьЗначениеЭлемента(Узел_СвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгрузка раздела 3.
	Узел_СвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СвКонтракт3, ДанныеДокумента);
	
	Узел_СвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СвКонтракт3, ДанныеДокумента);
		
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ТипПродР3", Раздел3.ТипПрод_3);
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ТипПокР3", Раздел3.ТипПок_3);
			
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ИдНомПродР3", СокрЛП(Раздел3.ПродавецИНН_КПП));
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ИдНомПокР3", СокрЛП(Раздел3.ПокупательИНН_КПП));
	
	Узел_СвКонтрР3 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт3, "СвКонтрР3");
	ПрототипУзла_УзелСвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификацииРаздел3.Количество() Цикл
						
		Строка = ДанныеДокумента.ТЗСпецификацииРаздел3[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_УзелСвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	Если КодПричины = "5" Тогда
		Узел_СвПредДок = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвПредДок");
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "НомОтм", СокрЛП(Раздел1.НомерОтметки));
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "ДатаОтм", Раздел1.ДатаОтметки);
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "МесУвелЦены", "--" + Формат(Раздел1.ИзмениеЦеныМесяц, "ЧЦ=2; ЧН=; ЧВН="));
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "ГодУвелЦены", Формат(Раздел1.ИзмениеЦеныГод, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=0"));
	КонецЕсли;
	
	// Выгружаем приложения.
	НомерПриложения = 0;
	
	ПрототипУзла_СвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		Узел_СвКонтрПр = НовыйУзелИзПрототипа(ПрототипУзла_СвКонтрПр);
		ЗаполнитьДаннымиУзел(ЛистПриложения, Узел_СвКонтрПр, ДанныеДокумента);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ТипПродП", ЛистПриложения.ТипПрод_Пр);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ТипПокП", ЛистПриложения.ТипПок_Пр);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ИдНомПродП", СокрЛП(ЛистПриложения.ПродавецИНН_КПП));
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ИдНомПокП",  СокрЛП(ЛистПриложения.ПокупательИНН_КПП));
		
		Узел_СвКонтрП = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрПр, "СвКонтрП");
		ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрП, "СвСпециф");
		                                              		
		Для Сч = 1 По ДанныеДокумента.ТаблСпецПрил3.Количество() Цикл
		
			Строка = ДанныеДокумента.ТаблСпецПрил3[Сч - 1];
						
			Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
		КонецЦикла;
		
		Если НЕ УзелПуст(Узел_СвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АнализироватьПоляСтавки(СтруктураСтавок)

	СтруктураСтавокМодиф = Новый Структура;
	
	Если СтруктураСтавок.Ст18 = "Льгота"
	 ИЛИ СтруктураСтавок.Ст18 = "Без НДС" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель1", 2);
	Иначе
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", ?(СтруктураСтавок.Ст18 = "", 0,
													 ?(СтруктураСтавок.Ст18 = "10/110", 10,
													   ?(СтруктураСтавок.Ст18 = "18/118", 18,
													     ?(СтруктураСтавок.Ст18 = "20/120", 20,
													       Число(СтруктураСтавок.Ст18))))));
		СтруктураСтавокМодиф.Вставить("Переключатель1", 1);
	КонецЕсли;
	
	Если СтруктураСтавок.Ст16 = "" И СтруктураСтавок.Ст17 = "" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза",0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	ИначеЕсли СтруктураСтавок.Ст16 = "Льгота" И Число(СтруктураСтавок.Ст17) = 0 Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли СтруктураСтавок.Ст16 = "-" И СтруктураСтавок.Ст17 = "-" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		
		Если СтруктураСтавок.Ст21 = " " Тогда
			СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
		Иначе
			СтруктураСтавокМодиф.Вставить("Переключатель3", 3);
		КонецЕсли;
		
	ИначеЕсли СтруктураСтавок.Ст16 = "0" И СтруктураСтавок.Ст17 = "0" Тогда
		
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
	
	ИначеЕсли СтруктураСтавок.Ст17 = "Льгота" И СтруктураСтавок.Ст16 = "0" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли ?(СтруктураСтавок.Ст17 = "", "0", СтруктураСтавок.Ст17) = "0"  Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст16 = "", "0", СтруктураСтавок.Ст16));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	Иначе 
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст17 = "", "0", СтруктураСтавок.Ст17));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	КонецЕсли;
	
	Возврат СтруктураСтавокМодиф

КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[СтрЗаменить(Стр.Ключ, "_", "")], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[СтрЗаменить(Стр.Ключ, "_", "")]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция РазделитьИННКПП(ИННКПП)
	
	ИНН = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, СтрНайти(ИННКПП, "/") - 1), ИННКПП));
	КПП = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, СтрНайти(ИННКПП, "/") + 1), ""));	
	
	Возврат Новый Структура("ИНН, КПП", ИНН, КПП);
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	
	Для Каждого Стр Из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;

КонецФункции

Функция КодКЛАДРПоАдресу(Адрес)
	
	КодКЛАДР = "";
	
	Если АдресЗаполненПоКладр(Адрес) Тогда
		
		СтруктураАдреса = Новый Структура;
		
		АдресВXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес, , РегламентированнаяОтчетность.ВидКонтактнойИнформации("ЮрАдресКонтрагента"));
		
		СтруктураАдреса.Вставить("Адрес", АдресВXML);
		СтруктураАдреса.Вставить("ФорматАдреса", "КЛАДР");
		
		Адреса = Новый Массив;
		
		Адреса.Добавить(СтруктураАдреса);
		
		РезультатПроверки = АдресныйКлассификатор.ПроверитьАдреса(Адреса);
		
		Если РезультатПроверки.Количество() > 0
		   И РезультатПроверки[0].Варианты.Количество() > 0 Тогда
		   
		   	КодКЛАДР = Формат(РезультатПроверки[0].Варианты[0].КодКЛАДР, "ЧГ=0");
			
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат КодКЛАДР;
	
КонецФункции

Функция АдресЗаполненПоКладр(Адрес)
	
	Результат = Адрес <> Неопределено
			  И (НЕ ПустаяСтрока(Адрес["Индекс"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Регион"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Район"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Город"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["НаселенныйПункт"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Улица"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Дом"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Корпус"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Квартира"]));
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0);
	
КонецФункции

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		
	ИначеЕсли Узел.Формат = "gYear" Тогда
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если Стр.Код = КодЭлемента Тогда
			
			Возврат Стр;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр Из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция УчетПеремещенияТоваровЭлектронноеПредставление(ДанныеДокумента)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = УчетПеремещенияТоваровСформироватьСтруктуруПараметров(ДанныеДокумента);
	
	СтруктураВыгрузки = УчетПеремещенияТоваровИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыШапка.Дата);
	Если СтруктураВыгрузки = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ УчетПеремещенияТоваровПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, СтруктураВыгрузки) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УчетПеремещенияТоваровЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ УчетПеремещенияТоваровПроверитьДанные(СтруктураВыгрузки) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Текст = УчетПеремещенияТоваровВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИмяФайла;
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "UTF8";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция УчетПеремещенияТоваровИзвлечьСтруктуруXML(ДатаЗаполнения)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ДатаЗаполнения >= '20200701' Тогда
		Макет = Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.ПолучитьМакет("СхемаВыгрузкиXML2020Кв1");
	ИначеЕсли ДатаЗаполнения >= '20160101' Тогда
		Макет = Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.ПолучитьМакет("СхемаВыгрузкиXML2016Кв1");
	ИначеЕсли ДатаЗаполнения >= '20150701' Тогда
		Макет = Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.ПолучитьМакет("СхемаВыгрузкиXML2015Кв2");
	Иначе
		Макет = Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.ПолучитьМакет("СхемаВыгрузкиXML2011Кв1");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Видимость = Макет.Область(НомСтр, 0, НомСтр, 0).Видимость;
			Если Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция УчетПеремещенияТоваровПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если НЕ ПараметрыВыгрузки.Свойство("НапрПеремещения") ИЛИ НЕ (ПараметрыВыгрузки.НапрПеремещения = "ИМ" ИЛИ ПараметрыВыгрузки.НапрПеремещения = "ЭК") Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не заданы основные реквизиты формы и направление перемещения товаров!';
								|en = 'Default form attributes and goods transfer direction are not specified.'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;

	Если НЕ ПараметрыВыгрузки.Свойство("мАдресвФорматеДляВыгрузки") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.мАдресвФорматеДляВыгрузки) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не задан почтовый адрес организации!';
								|en = 'Company postal address is not specified.'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
									
	Если НЕ ПараметрыВыгрузки.Свойство("ОргИсполнитель") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической формы!';
								|en = 'Full name of official responsible for statistical form submission is not specified.'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ОргДолжностьИсп") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не указана должность лица, ответственного за предоставление статистической формы!';
								|en = 'Position of the official responsible for statistical form submission is not specified.'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ОргТелефонИсп") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не указан телефон должностного лица, ответственного за предоставление статистической формы!';
								|en = 'Phone number of the official responsible for statistical form submission is not specified.'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
		
	Возврат СтатусПроверки;
	
КонецФункции

Процедура УчетПеремещенияТоваровЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки, ДанныеДокумента)
	
	УчетПеремещенияТоваровОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	Если ПараметрыВыгрузки.Дата >= '20150701' Тогда
	
		Отсечь_SupplementaryQuantity(ДеревоВыгрузки);
	
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Дата >= '20160101' Тогда
	
		Отсечь_DTNumber(ДеревоВыгрузки);
	
	КонецЕсли;
	
	УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УчетПеремещенияТоваровОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел);
		
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				
				Узел.Строки.Удалить(ТекСтр);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УчетПеремещенияТоваровОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УчетПеремещенияТоваровОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ТипЗнч(НомерСтроки) = Тип("Число") И ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			Если ПараметрыВыгрузки.Свойство(Сред(Стр.ЗначениеПоУмолчанию, 2)) Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многострочность Тогда 
				КоличествоСтрок = УчетПеремещенияТоваровОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					Если НомСтр = 1 Тогда
						НовыйУзел = Стр;
					Иначе	
						НовыйУзел = СкопироватьУзел(Узел, Стр);
					КонецЕсли; 
					УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УчетПеремещенияТоваровЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		
		ДлинаЗначения = СтрДлина(Стр.Значение);
		
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			
			СтатусПроверки = Ложь;
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Длина значения показателя ""%1"" меньше минимально возможной (%2 < %3)';
																							|en = 'Length of the ""%1"" indicator value is below minimum (%2 < %3) '"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МинРазмерность);
			
			Сообщение.Сообщить();

		КонецЕсли;

		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			
			СтатусПроверки = Ложь;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Длина значения показателя ""%1"" больше максимально возможной (%2 > %3)';
																							|en = 'Length of the ""%1"" indicator value exceeds maximum (%2 > %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МаксРазмерность);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
				
	Возврат СтатусПроверки;
	
КонецФункции

Функция УчетПеремещенияТоваровПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция УчетПеремещенияТоваровПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если НЕ УчетПеремещенияТоваровЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		СтатусПроверки = (УчетПеремещенияТоваровПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция УчетПеремещенияТоваровВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	УчетПеремещенияТоваровЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция УчетПеремещенияТоваровСформироватьИмяФайла()
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = "Export_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_HHmmss") + ".xml";
	
	Возврат  ИмяФайлаXML;
	
КонецФункции

Функция УчетПеремещенияТоваровСформироватьСтруктуруПараметров(ДанныеДокумента)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Для Каждого Реквизит Из ДанныеДокумента.РеквизитыШапка Цикл
		ПараметрыВыгрузки.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("СистемныйНомер", СокрЛП(ДанныеДокумента.РеквизитыШапка.СистемныйНомер));
	
	УникальныйИД = СокрЛП(ДанныеДокумента.РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
	ПараметрыВыгрузки.Вставить("УникальныйИД", СокрЛП(УникальныйИД));

	ОтчетныйМесяц  = ДанныеДокумента.РеквизитыШапка.ОтчетныйМесяц;
									   
	ДатаЗаполнения = Формат(ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ2
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ3
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ4
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияМ1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияМ2
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияД1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияД2, "ДФ=yyyy-MM-dd");
						  
	ПараметрыВыгрузки.Вставить("ОтчетныйМесяц", СокрЛП(ОтчетныйМесяц));
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", СокрЛП(ДатаЗаполнения));
	
	ПараметрыВыгрузки.Вставить("ВидТранспортаКод", СокрЛП(ДанныеДокумента.РеквизитыШапка.ВидТранспортаКод));
	ПараметрыВыгрузки.Вставить("ТоргующаяСтранаКод", СокрЛП(ДанныеДокумента.РеквизитыШапка.ТоргующаяСтранаКод));
	ПараметрыВыгрузки.Вставить("ТоргующаяСтранаНаименование", СокрЛП(ДанныеДокумента.РеквизитыШапка.ТоргующаяСтранаНаименование));
	
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргИсполнитель));
	ОргФИОИсп = РегламентированнаяОтчетность.РазложитьФИО(ДанныеДокумента.РеквизитыШапка.ОргИсполнитель);
	
	ПараметрыВыгрузки.Вставить("ОргФамилияИсп", СокрЛП(ОргФИОИсп.Фамилия));
	ПараметрыВыгрузки.Вставить("ОргИмяИсп", СокрЛП(ОргФИОИсп.Имя));
	ПараметрыВыгрузки.Вставить("ОргОтчествоИсп", СокрЛП(ОргФИОИсп.Отчество));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргТелефонИсп));
	ПараметрыВыгрузки.Вставить("ОргАдресЭлПочты", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргАдресЭлПочты));
	
	Если ДанныеДокумента.РеквизитыШапка.Свойство("ОтвЛицоФинУрПасДатаДок") Тогда
		ПараметрыВыгрузки.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат(ДанныеДокумента.РеквизитыШапка.ОтвЛицоФинУрПасДатаДок, "ДФ=yyyy-MM-dd"));
	Иначе
		ПараметрыВыгрузки.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат('00010101', "ДФ=yyyy-MM-dd"));
	КонецЕсли;
	 
	ПараметрыВыгрузки.Вставить("ИмяФайла", УчетПеремещенияТоваровСформироватьИмяФайла());
	
	Если ДанныеДокумента.РеквизитыШапка.Дата >= '20200701' Тогда
		
		ПараметрыВыгрузки.Вставить("xmlns2", "urn:customs.ru:Information:CustomsDocuments:StaticForm:5.16.0");
		ПараметрыВыгрузки.Вставить("xmlns3", "urn:customs.ru:RUSCommonAggregateTypes:5.16.0");
		ПараметрыВыгрузки.Вставить("xmlns", "urn:customs.ru:CommonAggregateTypes:5.10.0");
		
	ИначеЕсли ДанныеДокумента.РеквизитыШапка.Дата >= '20160101' Тогда
		
		ПараметрыВыгрузки.Вставить("xmlns2", "urn:customs.ru:Information:CustomsDocuments:StaticForm:5.14.3");
		ПараметрыВыгрузки.Вставить("xmlns3", "urn:customs.ru:RUSCommonAggregateTypes:5.14.3");
		ПараметрыВыгрузки.Вставить("xmlns", "urn:customs.ru:CommonAggregateTypes:5.10.0");
		
	ИначеЕсли ДанныеДокумента.РеквизитыШапка.Дата >= '20150701' Тогда
		
		ПараметрыВыгрузки.Вставить("xmlns2", "urn:customs.ru:Information:CustomsDocuments:StaticForm:5.8.0");
		ПараметрыВыгрузки.Вставить("xmlns", "urn:customs.ru:CommonAggregateTypes:5.8.0");
		
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Documents");
	
	Если НЕ ДанныеДокумента.ТаблицаТоварыДляВыгрузки = Неопределено Тогда
		
		Для НСтр = 1 По ДанныеДокумента.ТаблицаТоварыДляВыгрузки.Количество() Цикл
			
			ТекСтрокаТаблицы = ДанныеДокумента.ТаблицаТоварыДляВыгрузки[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=0");
			
			Для Каждого Колонка Из ДанныеДокумента.ТаблицаТоварыДляВыгрузки.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
				
				ПараметрыВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ДанныеДокумента.ТаблицаДокументы = Неопределено Тогда
		
		Для НСтр = 1 По ДанныеДокумента.ТаблицаДокументы.Количество() Цикл
			
			ТекСтрокаТаблицы = ДанныеДокумента.ТаблицаДокументы[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=0");
			
			Для Каждого Колонка Из ДанныеДокумента.ТаблицаДокументы.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
				
				ПараметрыВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				
				Если ИмяКолонки = "НаименованиеДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокВыбор_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, ЗначениеПоказателя);
					
				ИначеЕсли ИмяКолонки = "НомерДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокНомер_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, ЗначениеПоказателя);
					
				ИначеЕсли ИмяКолонки = "ДатаДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокДатаФормат_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеДокумента.РеквизитыШапка.Дата >= '20150701' Тогда
		
		ЕстьДокументы = (ДанныеДокумента.РеквизитыШапка.Количество() >= 1);
		
		ПараметрыВыгрузки.Вставить("ЕстьДокументы", ЕстьДокументы);
		
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыШапка.Организация) Тогда
			
			СтрокаСведений = "ИННЮЛ,КППЮЛ,ОГРН,НаимЮЛПол,НаимЮЛСокр";
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ДанныеДокумента.РеквизитыШапка.Организация, ДанныеДокумента.РеквизитыШапка.Дата, СтрокаСведений);
			
			ПараметрыВыгрузки.Вставить("ИННЗаяв",   СведенияОбОрганизации.ИННЮЛ);
			ПараметрыВыгрузки.Вставить("КППЗаяв",   СведенияОбОрганизации.КППЮЛ);
			ПараметрыВыгрузки.Вставить("ОГРНЗаяв",  СведенияОбОрганизации.ОГРН);
			ПараметрыВыгрузки.Вставить("ОргЗаяв",   СведенияОбОрганизации.НаимЮЛПол);
			ПараметрыВыгрузки.Вставить("ОргЗаявКр", СведенияОбОрганизации.НаимЮЛСокр);
						
		Иначе 
			
			СтрокаСведений = "ИННФЛ,ФИО,ОГРН";
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ДанныеДокумента.РеквизитыШапка.Организация, ДанныеДокумента.РеквизитыШапка.Дата, СтрокаСведений);
			
			ПараметрыВыгрузки.Вставить("ИННЗаяв",   СведенияОбОрганизации.ИННФЛ);
			ПараметрыВыгрузки.Вставить("КППЗаяв",   "");
			ПараметрыВыгрузки.Вставить("ОГРНЗаяв",  СведенияОбОрганизации.ОГРН);
			ПараметрыВыгрузки.Вставить("ОргЗаяв",   СведенияОбОрганизации.ФИО);
			ПараметрыВыгрузки.Вставить("ОргЗаявКр", СведенияОбОрганизации.ФИО);
					
		КонецЕсли;
		
		Если ДанныеДокумента.РеквизитыШапка.Свойство("Отправитель_ДатаДокСтр")
		   И ЗначениеЗаполнено(ДанныеДокумента.РеквизитыШапка.Отправитель_ДатаДокСтр) Тогда 
			ПараметрыВыгрузки.Вставить("Отправитель_ДатаДокСтр", Формат(ДанныеДокумента.РеквизитыШапка.Отправитель_ДатаДокСтр,"ДФ=yyyy-MM-dd"));
		Иначе
			ПараметрыВыгрузки.Вставить("Отправитель_ДатаДокСтр", "");
		КонецЕсли;
		
		Если ДанныеДокумента.РеквизитыШапка.Свойство("Получатель_ДатаДокСтр")
		   И ЗначениеЗаполнено(ДанныеДокумента.РеквизитыШапка.Получатель_ДатаДокСтр) Тогда 
			ПараметрыВыгрузки.Вставить("Получатель_ДатаДокСтр", Формат(ДанныеДокумента.РеквизитыШапка.Получатель_ДатаДокСтр,"ДФ=yyyy-MM-dd"));
		Иначе
			ПараметрыВыгрузки.Вставить("Получатель_ДатаДокСтр", "");
		КонецЕсли;
		
		Если ДанныеДокумента.РеквизитыШапка.Свойство("Отправитель_ФормаСобственности")
		   И ЗначениеЗаполнено(ДанныеДокумента.РеквизитыШапка.Отправитель_ФормаСобственности) Тогда 
			ПараметрыВыгрузки.Вставить("Отправитель_Форма", ДанныеДокумента.РеквизитыШапка.Отправитель_ФормаСобственности);
		Иначе
			ПараметрыВыгрузки.Вставить("Отправитель_Форма", "");
		КонецЕсли;
		
		Если ДанныеДокумента.РеквизитыШапка.Свойство("Получатель_ФормаСобственности")
		   И ЗначениеЗаполнено(ДанныеДокумента.РеквизитыШапка.Получатель_ФормаСобственности) Тогда 
			ПараметрыВыгрузки.Вставить("Получатель_Форма", ДанныеДокумента.РеквизитыШапка.Получатель_ФормаСобственности);
			ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_Форма", ДанныеДокумента.РеквизитыШапка.Получатель_ФормаСобственности);
		Иначе
			ПараметрыВыгрузки.Вставить("Получатель_Форма", "");
			ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_Форма", "");
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Отправитель_ОПИндекс", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПНазвание", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПНаселенныйПункт", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПОбласть", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПСтранаКод", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПСтранаНаименование", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПУлицаНомерДома", "");
	ПараметрыВыгрузки.Вставить("Отправитель_ОПНСА", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПИндекс", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПНазвание", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПНаселенныйПункт", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПНСА", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПОбласть", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПСтранаКод", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПСтранаНаименование", "");
	ПараметрыВыгрузки.Вставить("Получатель_ОПУлицаНомерДома", "");
	ПараметрыВыгрузки.Вставить("НСАНиз", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПИндекс", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПНазвание", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПНаселенныйПункт", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПНСА", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПОбласть", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПСтранаКод", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПСтранаНаименование", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_ОПУлицаНомерДома", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_Тел", "");
	ПараметрыВыгрузки.Вставить("ОтвЛицоФинУр_Почта", "");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура Отсечь_SupplementaryQuantity(ДеревоВыгрузки)
	
	Попытка
		
		Товары = ДеревоВыгрузки.Строки[0].Строки;
		
		ДляПроверки = Товары.НайтиСтроки(Новый Структура("Код", "SupplementaryQuantity"), Истина);
		
		Для Каждого Стр Из ДляПроверки Цикл
			
			Элт = Стр.Строки.НайтиСтроки(Новый Структура("Код", "GoodsQuantity"));
			
			Если ТипЗнч(Элт) = Тип("Массив") И Элт.Количество() = 1 Тогда
				
				Если Элт[0].Значение = "0" Тогда 
					
					Стр.Родитель.Строки.Удалить(Стр);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка формирования электронного представления заявления о ввозе';
										|en = 'An error occurred when generating the electronic presentation of import application'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура Отсечь_DTNumber(ДеревоВыгрузки)
	
	Попытка
		
		Товары = ДеревоВыгрузки.Строки[0].Строки;
		
		ДляПроверки = Товары.НайтиСтроки(Новый Структура("Код", "DTNumber"), Истина);
		
		Для Каждого Стр Из ДляПроверки Цикл
			
			Элт = Стр.Строки.НайтиСтроки(Новый Структура("Код", "CustomsCode"));
			
			Если ТипЗнч(Элт) = Тип("Массив") И Элт.Количество() = 1 Тогда
				
				Если Элт[0].Значение = Неопределено Или Элт[0].Значение = "" Тогда 
					
					Стр.Родитель.Строки.Удалить(Стр);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка формирования электронного представления заявления о ввозе';
										|en = 'An error occurred when generating the electronic presentation of import application'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
// -- НЕ УТ

#Область ФормированиеГиперссылкиВЖурналеЗакупок

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПравоНаЧтениеПоступленийТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе)
		И ЕстьПравоНаЧтениеПоступленийТоваровУслуг) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций",?(ЗначениеЗаполнено(Параметры.Организация), 
											ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.Организация),
											Неопределено));
	Параметры.Вставить("БезОграниченияПериода");
	
	ТекстГиперссылки = НСтр("ru = 'Заявления о ввозе';
							|en = 'Import application'");
	
	Если ЕстьСчетаФактурыКОформлению(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыЗаявленияОВвозеТоваров());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыЗаявленияОВвозеТоваров());
	КонецЕсли;
	
КонецФункции

Функция ИмяФормыЗаявленияОВвозеТоваров() Экспорт
	
	Возврат "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто";
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокЗначений)

	СписокЗначений.Очистить();
	СписокЗначений.Добавить("10", НСтр("ru = '10 - Морской/речной транспорт';
										|en = '10 - Sea/river transport'"));
	СписокЗначений.Добавить("20", НСтр("ru = '20 - Железнодорожный транспорт';
										|en = '20 - Railroad transport'"));
	СписокЗначений.Добавить("30", НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32';
										|en = '30 - Road transport, except for vehicles specified by codes 31, 32'"));
	СписокЗначений.Добавить("31", НСтр("ru = '31 - Состав транспортных средств (тягач с полуприцепом или прицепом)';
										|en = '31 - Combination of vehicles (tractor unit with semi-trailer or trailer)'"));
	СписокЗначений.Добавить("32", НСтр("ru = '32 - Состав транспортных средств (тягач с полуприцепом(-ами) или прицепом(-ами))';
										|en = '32 - Combination of vehicles (tractor unit with semi-trailer(s) or trailer(s))'"));
	СписокЗначений.Добавить("40", НСтр("ru = '40 - Воздушный транспорт';
										|en = '40 - Air transport'"));
	СписокЗначений.Добавить("50", НСтр("ru = '50 - Почтовое отправление';
										|en = '50 - Mailing'"));
	СписокЗначений.Добавить("71", НСтр("ru = '71 - Трубопроводный транспорт';
										|en = '71 - Pipeline transport'"));
	СписокЗначений.Добавить("72", НСтр("ru = '72 - Линии электропередачи';
										|en = '72 - Power lines'"));
	СписокЗначений.Добавить("80", НСтр("ru = '80 - Внутренний водный транспорт';
										|en = '80 - Inland water transport'"));
	СписокЗначений.Добавить("90", НСтр("ru = '90 - Транспортное средство, перемещающееся в качестве товара своим ходом';
										|en = '90 - Vehicle that moves as a commodity under its own power'"));
	СписокЗначений.Добавить("99", НСтр("ru = '99 - Прочее';
										|en = '99 - Other'"));
	
КонецПроцедуры

Функция ОпределитьВидТранспортаПоСтатистике(ДокументПоступления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата КАК Период,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Контрагент = &Контрагент
		|	И ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	2
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	3
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&АвтодорожныйТранспорт,
		|	NULL,
		|	4
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подзапрос.ВидТранспорта КАК ВидТранспорта
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.ВидТранспорта КАК ВидТранспорта,
		|		СУММА(1) КАК ЧастотаИспользования,
		|		ВТ_Документы.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_Документы.ВидТранспорта,
		|		ВТ_Документы.Приоритет) КАК Подзапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подзапрос.Приоритет,
		|	Подзапрос.ЧастотаИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Контрагент", ДокументПоступления.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументПоступления.Организация);
	Запрос.УстановитьПараметр("АвтодорожныйТранспорт", 
			НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32';
				|en = '30 - Road transport, except for vehicles specified by codes 31, 32'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ВидТранспорта;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.1.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("90ba7e74-2ed2-4054-8c77-064baee74aac");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявлениеОВвозеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Ставка НДС""';
									|en = 'Fills in ""VAT rate"" attribute'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ЗаявлениеОВвозеТоваров";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|			ГДЕ
	|				ЗаявлениеОВвозеТоваров.Ссылка = ЗаявлениеОВвозеТоваровТовары.Ссылка
	|				И ЗаявлениеОВвозеТоваровТовары.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
	|				И ЗаявлениеОВвозеТоваровТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))";
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаявлениеОВвозеТоваров";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				МассивТЧ = Новый Массив();
				МассивТЧ.Добавить("Товары");
				
				УчетНДСЛокализация.ЗаполнитьКолонкуТЧСтавкаНДС(ДокументОбъект, МассивТЧ, ОбъектИзменен);
				
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
