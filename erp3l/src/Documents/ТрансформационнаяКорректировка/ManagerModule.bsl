#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
// Вычисляет сумму баланса.
//
Функция ПолучитьСуммуБаланса(Сбалансированная, МассивЗаписей,ПроверятьЗнак=Истина) Экспорт
	
	СтруктураСумм=Новый Структура("Дебет,Кредит,Сумма",0,0,0);
	
	Если Сбалансированная Тогда
		
		Для Каждого ТекЗаписи ИЗ МассивЗаписей Цикл
			
			Для Каждого Запись Из ТекЗаписи Цикл
				
				Если Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Активный Тогда
					СтруктураСумм.Дебет=СтруктураСумм.Дебет+Запись.Сумма*?(ПроверятьЗнак,ПолучитьЗнакЗаписи(Запись),1);
				ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный Тогда
					СтруктураСумм.Кредит=СтруктураСумм.Кредит+Запись.Сумма*?(ПроверятьЗнак,ПолучитьЗнакЗаписи(Запись),1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтруктураСумм.Сумма=СтруктураСумм.Дебет-СтруктураСумм.Кредит;
		
	Иначе
		
		Для Каждого ТекЗаписи ИЗ МассивЗаписей Цикл
			
			СтруктураСумм.Сумма=СтруктураСумм.Сумма+ТекЗаписи.Итог("Сумма");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураСумм;
	
КонецФункции

Функция ПолучитьЗнакЗаписи(Запись,Сбалансированная=Истина) Экспорт
	
	Если НЕ Сбалансированная Тогда
		Возврат 1;	
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Активный И Запись.Дебет Тогда
		Возврат 1;
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Активный И Запись.Кредит Тогда
		Возврат -1;
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный И Запись.Кредит Тогда
		Возврат 1;
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный И Запись.Дебет Тогда
		Возврат -1;
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции // ПолучитьЗнакЗаписи()

// Возвращает список трансформационных корректировок созданных документом
//
// Параметры:
//  ИсходныйДокумент  - Документ - документ, создавший трансформационную корректировку
//	Отбор - Если Неопределено, тогда отбор не устанавливается.
//		Если Структура, то элементы - это значения реквизитов трансформационная корректировка для отбора.
// Возвращаемое значение:
//   Массив   - массив трансформационных корректировок
//
Функция ПолучитьТрансКорр(ИсходныйДокумент, Отбор = Неопределено) Экспорт
	Перем мТрансКорр;
	
	мТрансКорр = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТрансформационнаяКорректировка.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
		|ГДЕ
		|	ТрансформационнаяКорректировка.ИсходныйДокумент = &ИсходныйДокумент";
		
	Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
	
	Если ТипЗнч(Отбор) = Тип("Структура") ИЛИ ТипЗнч(Отбор) = Тип("ФиксированнаяСтруктура") Тогда
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Запрос.Текст = Запрос.Текст + Символы.ПС +
				"	И ТрансформационнаяКорректировка." + ЭлементОтбора.Ключ + " = &" + ЭлементОтбора.Ключ;
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	ТЗ_ = РезультатЗапроса.Выгрузить();

	мТрансКорр = ТЗ_.ВыгрузитьКолонку("Ссылка");	
	
	Возврат мТрансКорр;

КонецФункции // ПолучитьТрансКорр()

// Очищает данные подчиненных подчиненных корректировок
Процедура ОчиститьКорректировки(ДокументИсточник, Отбор = Неопределено) Экспорт

	МассивКорректировок = Документы.ТрансформационнаяКорректировка.ПолучитьТрансКорр(ДокументИсточник, Отбор);
	
	Для каждого КоррективрокаСсылка Из МассивКорректировок Цикл
		
		ОбъектКорректировка = КоррективрокаСсылка.ПолучитьОбъект();
		Если ОбъектКорректировка.ПометкаУдаления Тогда
			ОбъектКорректировка.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		// Заполняем трансформационную корректировку
		ОбработкаКорректировка = Обработки.КорректировкиЗначенийПоказателей.Создать();
		ЗаполнитьЗначенияСвойств(ОбработкаКорректировка, ОбъектКорректировка);
		
		ОбработкаКорректировка.ДокументОбъект = ОбъектКорректировка;
		
		ОбъектКорректировка.Проводки.Очистить();	
		ОбработкаКорректировка.ИнициализироватьКонтекст();
		ОбработкаКорректировка.ИнициализироватьТаблицыЗаписей();	
		ОбработкаКорректировка.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на документ Трансформационная корректировка по указанным реквизитам. Когда 
// документ не найден возвращает пустую ссылку.
Функция ПолучитьЭкземплярТрансформационнойКорректировки(ПериодВход, СценарийВход, ОрганизацияВход, ШаблонКорректировкиВход, ОсновнаяВалютаВход = Неопределено) Экспорт
	РезультатФункции = Документы.ТрансформационнаяКорректировка.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТрансформационнаяКорректировка.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
		|ГДЕ
		|	НЕ ТрансформационнаяКорректировка.ПометкаУдаления
		|	И ТрансформационнаяКорректировка.ПериодОтчета = &ПериодОтчета
		|	И ТрансформационнаяКорректировка.Сценарий = &Сценарий
		|	И ВЫБОР
		|			КОГДА &ОсновнаяВалюта <> НЕОПРЕДЕЛЕНО
		|				ТОГДА ТрансформационнаяКорректировка.ОсновнаяВалюта = &ОсновнаяВалюта
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ТрансформационнаяКорректировка.Организация = &Организация
		|	И ТрансформационнаяКорректировка.ШаблонКорректировки = &ШаблонКорректировки";
	Запрос.УстановитьПараметр("Организация", ОрганизацияВход);
	Запрос.УстановитьПараметр("ОсновнаяВалюта", ОсновнаяВалютаВход);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	Запрос.УстановитьПараметр("ШаблонКорректировки", ШаблонКорректировкиВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьЭкземплярТрансформационнойКорректировки()

#КонецЕсли
