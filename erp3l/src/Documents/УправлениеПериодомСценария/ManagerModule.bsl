
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Обработчики

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
		
	Поля.Добавить("ТекущаяПериодичность");
	Поля.Добавить("Сценарий");
	Поля.Добавить("ПериодСценария");
	Поля.Добавить("ПериодСценарияОкончание");
		
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Данные.ПериодСценария <> Данные.ПериодСценарияОкончание Тогда	
		Шаблон = НСтр("ru = '%1 - %2 (Периодичность: %3) <%4>'");		
		Представление = СтрШаблон(Шаблон, Данные.ПериодСценария, Данные.ПериодСценарияОкончание, Данные.ТекущаяПериодичность, Данные.Сценарий);
	Иначе 
		Шаблон = НСтр("ru = '%1 (Периодичность: %2) <%3>'");
		Представление = СтрШаблон(Шаблон, Данные.ПериодСценария, Данные.ТекущаяПериодичность, Данные.Сценарий);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти	
	
Функция ПолучитьПодчиненныеПериоды(Сценарий,ПериодСценария,ПериодСценарияОкончание,ВозвращатьСписок=Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка КАК ПериодКурса
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ  ";
	
	Запрос.Текст=Запрос.Текст+"	
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала >= &ДатаНачала
	|	И Периоды.ДатаОкончания <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала",		ПериодСценария.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ПериодСценарияОкончание.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность",	ПериодСценария.Периодичность);
	
	
	Запрос.Текст=Запрос.Текст+"
	|Упорядочить ПО Периоды.ДатаНачала";
	
	Если НЕ ВозвращатьСписок Тогда
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		СписокПериодов=Новый СписокЗначений;
		СписокПериодов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодКурса"));
		
		Возврат СписокПериодов;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьПодчиненныеПериоды()

Функция ЗапуститьПроцесс(УправлениеПериодом, ВыводитьСообщения = Истина, ЕстьОшибкиНастройки = Ложь) Экспорт

	ЕстьОшибкиНастройки = Ложь;
	ТаблицаВыверки = УправлениеОтчетамиУХ.ПолучитьТаблицуПолномочий(
													УправлениеПериодом.ПериодСценария, 
													УправлениеПериодом.Сценарий, 
													УправлениеПериодом.ВерсияОрганизационнойСтруктуры
													,			// Запрос										
													,			// Этап процесса
													,			// Организация
													,			// Профиль организаций
													,			// Вид отчета
													,			// Вид отчета этап
													,	ЕстьОшибкиНастройки
												);
	
	Если ЕстьОшибкиНастройки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УправлениеПериодом.ЗапускатьПроцесс = Истина;
	
	ДокументЗаписан = Истина;	
	Попытка	
		УправлениеПериодом.Записать();	
	Исключение
		ДокументЗаписан = Ложь;
		Если ВыводитьСообщения Тогда
			
			СтрокаШаблона = Нстр("ru = 'Не удалось запустить процесс: %1'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОписаниеОшибки()));
			КонецЕсли;
			
		КонецЕсли;
	КонецПопытки;
	
	ФормироватьОтчеты = Ложь;
	
	Если НЕ ДокументЗаписан Тогда
				
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось запустить процесс'"));		
		КонецЕсли;
		
		УправлениеПериодом.ЗапускатьПроцесс = Ложь;
		
	КонецЕсли;
	
	Возврат ДокументЗаписан;

КонецФункции

Функция СоздатьУправлениеПериодом(Сценарий, ПериодСценария, Регламент, ЗапуститьПроцесс = Истина, ЗаполнитьПериодическиеКурсыДляНового = Истина) Экспорт

	УправлениеПериодом = УправлениеРабочимиПроцессамиУХ.ПолучитьДокументУправленияПериодомСценария(Сценарий, ПериодСценария);
	
	Если ЗначениеЗаполнено(УправлениеПериодом) Тогда
				
		Если УправлениеПериодом.ЗапускатьПроцесс Или Не ЗапуститьПроцесс Тогда
			
			Если ЗначениеЗаполнено(Регламент) И (УправлениеПериодом.ВерсияОрганизационнойСтруктуры <> Регламент) Тогда
				
				ОбъектУправлениеПериодом = УправлениеПериодом.ПолучитьОбъект();
				ОбъектУправлениеПериодом.ВерсияОрганизационнойСтруктуры = Регламент;
				ОбъектУправлениеПериодом.Записать();
				
			КонецЕсли;		
			
			Возврат УправлениеПериодом;
			
		КонецЕсли;
		
		ОбъектУправлениеПериодом = УправлениеПериодом.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Регламент) И (УправлениеПериодом.ВерсияОрганизационнойСтруктуры <> Регламент) Тогда
			ОбъектУправлениеПериодом.ВерсияОрганизационнойСтруктуры = Регламент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектУправлениеПериодом.ДатаНачалаПроцесса) Тогда
			ОбъектУправлениеПериодом.ДатаНачалаПроцесса = ТекущаяДата();	
		КонецЕсли;
		
		РезультатЗапуска = ЗапуститьПроцесс(ОбъектУправлениеПериодом, Истина);
				
		Возврат УправлениеПериодом;
		
	КонецЕсли;
	
	УправлениеПериодом = УправлениеРабочимиПроцессамиУХ.ОпределитьДокументУправленияПериодомСценария(Сценарий, ПериодСценария, Неопределено, , Регламент);
	Если Не ЗначениеЗаполнено(УправлениеПериодом) Тогда
		Возврат Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполнитьПериодическиеКурсыДляНового Тогда
	
		Отказ = Ложь;
		РегистрыСведений.ПериодическиеКурсы.ОбновитьПериодическиеКурсы(ПериодСценария, Сценарий, ПериодСценария, Отказ);
	
	КонецЕсли;
	
	Если ЗапуститьПроцесс Тогда
		РезультатЗапуска = ЗапуститьПроцесс(УправлениеПериодом, Истина);	
	КонецЕсли;
	
	Возврат УправлениеПериодом;

КонецФункции

Функция ПроверитьВозможностьИзмененияПериодаСценария(ТекДокумент,ОписаниеОшибки) Экспорт 
	
	//Проверяем наличие документов экземпляр отчета
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ЗначенияСтатусовПоказателейСинтетика.Показатель
	//|ИЗ
	//|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	//|ГДЕ
	//|	ЗначенияСтатусовПоказателейСинтетика.Сценарий = &Сценарий
	//|	И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета.ДатаНачала >= &ПериодОтчетаДатаНачала
	//|	И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета.ДатаОкончания <= &ПериодОтчетаДатаОкончания
	//|	И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета.Периодичность = &Периодичность
	//|	И ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3";
	//
	//Запрос.УстановитьПараметр("ПериодОтчетаДатаНачала",ТекДокумент.ПериодСценария.ДатаНачала);
	//Запрос.УстановитьПараметр("ПериодОтчетаДатаОкончания",ТекДокумент.ПериодСценарияОкончание.ДатаОкончания);
	//Запрос.УстановитьПараметр("Периодичность",ТекДокумент.ПериодСценария.Периодичность);
	//Запрос.УстановитьПараметр("Сценарий",ТекДокумент.Сценарий);

	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();

	//Пока Выборка.Следующий() Цикл
	//	
	//	ОписаниеОшибки = СтрШаблон("%1 не может быть записан: существуют утвержденные показатели отчетов, относящиеся к текущему периоду и сценарию.",
	//	                     "" + ТекДокумент + " ",);
	//	Возврат Ложь;	  
	//КонецЦикла;
	
	
	//Проверим, есть ли запущенный процесс
	тПроцессЗапущен = Ложь;
	Если ТекДокумент.ЗапускатьПроцесс Тогда
		РазрешитьЗапускПроцесса = Истина;		
		РасширениеБизнесЛогикиУХ.УправлениеПериодом_ПроцессЗапущен(ТекДокумент,тПроцессЗапущен);
		Если тПроцессЗапущен Тогда
			
			СтрокаШаблона = Нстр("ru = '%1 не может быть записан: необходимо остановить процесс подготвки отчетности'");
			
			ОписаниеОшибки = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ОписаниеОшибки = СтрШаблон(СтрокаШаблона, ТекДокумент);
			КонецЕсли;
			
			РазрешитьЗапускПроцесса =  Ложь;	 	
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;

	Возврат Истина;
	 
 КонецФункции

Процедура ОчиститьБлокировкуПериодов(ТекДокумент) Экспорт
	 
	 //Очищаем данные текущего документа
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	СтатусыПериодовСценариев.Сценарии,
	 |	СтатусыПериодовСценариев.Периоды,
	 |	СтатусыПериодовСценариев.Организации,
	 |	СтатусыПериодовСценариев.УдалитьПроекты,
	 |	СтатусыПериодовСценариев.СтатусПоказателя,
	 |	СтатусыПериодовСценариев.СтатусБлокировки,
	 |	СтатусыПериодовСценариев.ДатаЗакрытияПериода,
	 |	СтатусыПериодовСценариев.ВерсияРегламента,
	 |	СтатусыПериодовСценариев.УправлениеПериодомСценария
	 |ИЗ
	 |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	 |ГДЕ
	 |	СтатусыПериодовСценариев.УправлениеПериодомСценария = &Ссылка";
	 
	 Запрос.УстановитьПараметр("Ссылка",ТекДокумент.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 Менеджер = РегистрыСведений.СтатусыПериодовСценариев.СоздатьМенеджерЗаписи();
		 ЗаполнитьЗначенияСвойств(Менеджер,Выборка);		
		 Менеджер.Прочитать();
		 Менеджер.Удалить();	
	 КонецЦикла;
	 
	 
КонецПроцедуры

Процедура СоздатьНедостающиеЭкземплярыПоРакурсам(ТекДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.ВидОтчета,
		|	ВерсииЗначенийПоказателей.Организация,
		|	ВерсииЗначенийПоказателей.Проект
		|ПОМЕСТИТЬ ВТ_ВидыОтчетов
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ПериодОтчетаДатаНачала
		|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ПериодОтчетаДатаОкончания
		|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &Периодичность
		|	И ВерсииЗначенийПоказателей.ВидОтчета.ОбъектДляСогласованияЗначений = &ОбъектДляСогласованияЗначений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ВидыОтчетов.ВидОтчета,
		|	СтатусыПериодовСценариев.Периоды КАК Период,
		|	СтатусыПериодовСценариев.Сценарии КАК Сценарий,
		|	СтатусыПериодовСценариев.Организации КАК Организация,
		|	ОбластиДанныхВидовОтчетов.Ссылка КАК Ракурс,
		|	ВТ_ВидыОтчетов.Проект
		|ПОМЕСТИТЬ ВТ_ДанныеРакурсов
		|ИЗ
		|	ВТ_ВидыОтчетов КАК ВТ_ВидыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		|		ПО (СтатусыПериодовСценариев.Сценарии = &Сценарий)
		|			И ВТ_ВидыОтчетов.Организация = СтатусыПериодовСценариев.Организации
		|			И (СтатусыПериодовСценариев.Периоды.ДатаНачала >= &ПериодОтчетаДатаНачала)
		|			И (СтатусыПериодовСценариев.Периоды.ДатаОкончания <= &ПериодОтчетаДатаОкончания)
		|			И (СтатусыПериодовСценариев.Периоды.Периодичность = &Периодичность)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиДанныхВидовОтчетов КАК ОбластиДанныхВидовОтчетов
		|		ПО ВТ_ВидыОтчетов.ВидОтчета = ОбластиДанныхВидовОтчетов.Владелец
		|			И (ОбластиДанныхВидовОтчетов.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	НЕ СтатусыПериодовСценариев.Организации = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеРакурсов.ВидОтчета,
		|	ВТ_ДанныеРакурсов.Период,
		|	ВТ_ДанныеРакурсов.Сценарий,
		|	ВТ_ДанныеРакурсов.Организация,
		|	ВТ_ДанныеРакурсов.Проект
		|ИЗ
		|	ВТ_ДанныеРакурсов КАК ВТ_ДанныеРакурсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ПО (НастраиваемыйОтчет.ВидОтчета = ВТ_ДанныеРакурсов.ВидОтчета)
		|			И (НастраиваемыйОтчет.Сценарий = ВТ_ДанныеРакурсов.Сценарий)
		|			И (НастраиваемыйОтчет.Организация = ВТ_ДанныеРакурсов.Организация)
		|			И (НастраиваемыйОтчет.ПериодОтчета = ВТ_ДанныеРакурсов.Период)
		|ГДЕ
		|	НастраиваемыйОтчет.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ОбъектДляСогласованияЗначений",	 Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.ЭкземплярОтчета);
	Запрос.УстановитьПараметр("Периодичность",					 ТекДокумент.ТекущаяПериодичность);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаНачала",			 ТекДокумент.ПериодСценария.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаОкончания",		 ТекДокумент.ПериодСценария.ДатаОкончания);
	Запрос.УстановитьПараметр("Сценарий",						 ТекДокумент.Сценарий);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСсылка = Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(ВыборкаДетальныеЗаписи.Организация, ВыборкаДетальныеЗаписи.Период,	ВыборкаДетальныеЗаписи.Сценарий, ВыборкаДетальныеЗаписи.ВидОтчета, , Истина, Истина, , ВыборкаДетальныеЗаписи.Проект);
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьРегламентЗакрытияПериода(ТекДокумент) Экспорт 

	
	//Разблокируем  периоды... 
	тПериодыОрганизацииПолныйСрез = УправлениеОтчетамиУХ.ПолучитьАналитикиТекущегоГоризонта(ТекДокумент,ТекДокумент.ПериодСценария
	,ТекДокумент.ПериодСценарияОкончание,ТекДокумент.Сценарий,ТекДокумент.ВерсияОрганизационнойСтруктуры);	
	
	Для Каждого Стр Из тПериодыОрганизацииПолныйСрез Цикл	
		Стр.СтатусБлокировки = 0;	
	КонецЦикла;	
		
	НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарии.Установить(ТекДокумент.Сценарий);
	
	ТЗПериодов = тПериодыОрганизацииПолныйСрез.Скопировать();
	ТЗПериодов.Свернуть("Периоды");
	
	Для Каждого ПериодСценарияСтрока ИЗ ТЗПериодов Цикл	
		НаборЗаписей.Отбор.Периоды.Установить(ПериодСценарияСтрока.Периоды);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(тПериодыОрганизацииПолныйСрез.Скопировать(Новый Структура("Периоды",ПериодСценарияСтрока.Периоды)));
		НаборЗаписей.Записать(Истина);			
	КонецЦикла;

	//Для УХ дополнительно утверждаем показатели отчетов и пишем лимимты.
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ВыполнитьРегламентЗакрытияПериода(ТекДокумент);
	
	//Блокируем  периоды... 
	тПериодыОрганизацииПолныйСрез = УправлениеОтчетамиУХ.ПолучитьАналитикиТекущегоГоризонта(ТекДокумент,ТекДокумент.ПериодСценария
	,ТекДокумент.ПериодСценарияОкончание,ТекДокумент.Сценарий,ТекДокумент.ВерсияОрганизационнойСтруктуры);	
	
	Для Каждого Стр Из тПериодыОрганизацииПолныйСрез Цикл	
		Стр.СтатусБлокировки = 1;	
	КонецЦикла;	
		
	НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарии.Установить(ТекДокумент.Сценарий);
	
	ТЗПериодов = тПериодыОрганизацииПолныйСрез.Скопировать();
	ТЗПериодов.Свернуть("Периоды");
	
	Для Каждого ПериодСценарияСтрока ИЗ ТЗПериодов Цикл	
		НаборЗаписей.Отбор.Периоды.Установить(ПериодСценарияСтрока.Периоды);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(тПериодыОрганизацииПолныйСрез.Скопировать(Новый Структура("Периоды",ПериодСценарияСтрока.Периоды)));
		НаборЗаписей.Записать(Истина);			
	КонецЦикла;

	
	 
КонецПроцедуры

Процедура ЗаполнитьПериодическиеКурсыПоУмолчанию(Объект) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПериодическиеКурсы.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод
	|ИЗ
	|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
	|ГДЕ
	|	ПериодическиеКурсы.Сценарий = &Сценарий
	|	И ПериодическиеКурсы.ПериодКурса = &ПериодКурса";
	
	Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	Запрос.УстановитьПараметр("ПериодКурса",Объект.ПериодСценария);
	
	Результат=Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПодпериодов = ПолучитьПодчиненныеПериоды(Объект.Сценарий,Объект.ПериодСценария,Объект.ПериодСценарияОкончание);
	
	Для Каждого СтрПериод Из ТаблицаПодпериодов Цикл
		
		ТаблицаКурсов = ОбщегоНазначенияСерверУХ.ЗаполнитьПериодическиеКурсыВалют(СтрПериод.ПериодКурса, Объект.Сценарий, Объект.ПериодСценарияОкончание);
		
		НаборЗаписей=РегистрыСведений.ПериодическиеКурсы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Объект.Сценарий);
		НаборЗаписей.Отбор.ПериодКурса.Установить(СтрПериод.ПериодКурса);
		
		Для Каждого Элемент ИЗ ТаблицаКурсов Цикл
			
			ТекСтрока = НаборЗаписей.Добавить();
			ТекСтрока.Валюта    	= Элемент.Валюта;
			ТекСтрока.Кратность 	= Элемент.Кратность;
			Текстрока.ПериодКурса	= СтрПериод.ПериодКурса;
			Текстрока.Сценарий		= Объект.Сценарий;
			
			ТекСтрока.СреднийКурсЗаПериод				= Элемент.СреднийКурсЗаПериод;
			ТекСтрока.СреднийКурсЗаПериодМСФО			= Элемент.СреднийКурсЗаПериодМСФО;	
			ТекСтрока.КурсНаНачалоПериода				= Элемент.КурсНаНачалоПериода;	
			ТекСтрока.КурсНаКонецПериода				= Элемент.КурсНаКонецПериода;	
			ТекСтрока.КурсНаКонецПредыдущегоПериода		= Элемент.КурсНаКонецПредыдущегоПериода;	
			ТекСтрока.СреднийКурсЗаПредыдущийПериод		= Элемент.СреднийКурсЗаПредыдущийПериод;
			ТекСтрока.СреднийКурсЗаПериодЦБ				= Элемент.СреднийКурсЗаПериодЦБ;
			ТекСтрока.СреднийКурсЗаПредыдущийПериодЦБ	= Элемент.СреднийКурсЗаПредыдущийПериодЦБ;			
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПериодическиеКурсыПоУмолчанию() 

#КонецЕсли