#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Таблица = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыВидовОтчетов);
	ВидыОтчетов.Загрузить(Таблица);
	УдалитьИзВременногоХранилища(Параметры.АдресТаблицыВидовОтчетов);
	
	Элементы.ДекорацияПредупреждение.Видимость = Параметры.ЕстьСвязанныйШаблон;	
	ГруппаВидовОтчетов = Параметры.ГруппаВидовОтчетов;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СохранитьДанные(Команда)
	
	Результат = ДанныеЗакрытия();
	Если НЕ Результат.Успех Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки,,"ВидыОтчетов");
		Возврат;
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ДанныеЗакрытия()
	
	Таблица = РеквизитФормыВЗначение("ВидыОтчетов");
	
	Результат = ПроверитьЗаполнениеВидовОтчетов(Таблица);
	Если НЕ Результат.Успех Тогда
		Возврат Результат;
	КонецЕсли;

	Адрес = ПоместитьВоВременноеХранилище(Таблица, Новый УникальныйИдентификатор);
	Результат = Новый Структура("Успех, АдресТаблицыВидовОтчетов", Истина, Адрес);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеВидовОтчетов(Таблица)
	
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, "");
	
	Таблица.Свернуть("ВидОтчета");
	
	Если НЕ ЗначениеЗаполнено(Таблица) Тогда
		Результат.ТекстОшибки = Нстр("ru = 'Не заполнены виды отчетов'");
		Возврат Результат;
	КонецЕсли;	
	
	Для каждого Строка Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ВидОтчета) Тогда
			Результат.ТекстОшибки = Нстр("ru = 'Не заполнен вид отчета в строке'");
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ГруппаВидовОтчетов) Тогда
		ТекстОшибки = "";
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.Ссылка В ИЕРАРХИИ (&ГруппаВидовОтчетов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПринадлежитГруппе
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Ссылка В(&ВидыОтчета)"
		);
		Запрос.УстановитьПараметр("ГруппаВидовОтчетов", ГруппаВидовОтчетов);
		Запрос.УстановитьПараметр("ВидыОтчета", Таблица.ВыгрузитьКолонку("ВидОтчета"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ПринадлежитГруппе Тогда
				
				СтрокаШаблона = Нстр("ru = 'Вид отчета %1 не принадлежит группе видов отчетов из регламента: %2'");
				
				СтрокаОшибки = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					СтрокаОшибки = СтрШаблон(СтрокаШаблона, Строка(Выборка.ВидОтчета), Строка(ГруппаВидовОтчетов));	
				КонецЕсли;
				
				ТекстОшибки = ТекстОшибки + ?(ТекстОшибки <> "", Символы.ПС, "") + СтрокаОшибки;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Результат.ТекстОшибки = ТекстОшибки;
			Возврат Результат;
		КонецЕсли;	
	КонецЕсли;	
	
	Результат.Успех = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЭлементовФормы
&НаКлиенте
Процедура ВидыОтчетовВидОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	Если ЗначениеЗаполнено(ГруппаВидовОтчетов) Тогда
		ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение = ГруппаВидовОтчетов;
		ЭлементОтбора.Использование = Истина;	
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МожетИспользоватьсяДляУстановкиЛимитов");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;	
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;	
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОткрытьФорму("Справочник.ВидыОтчетов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры
#КонецОбласти