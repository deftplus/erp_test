
// Возвращает родителя периода отчета ПериодВход с периодичностью, заданной
// в списке СписокПериодичностиВход.
&НаСервереБезКонтекста
Функция ПолучитьРодителяСПериодичностью(ПериодВход, СписокПериодичностиВход, МассивПериодовВход)
	РезультатФункции = Справочники.Периоды.ПустаяСсылка();
	ТекПериод = ПериодВход;
	Пока ЗначениеЗаполнено(ТекПериод.Родитель) Цикл
		НовыйРодитель = ТекПериод.Родитель;
		ПериодичностьРодителя = НовыйРодитель.Периодичность;
		Если СписокПериодичностиВход.НайтиПоЗначению(ПериодичностьРодителя) <> Неопределено Тогда
			Если МассивПериодовВход.Найти(НовыйРодитель) <> Неопределено Тогда
				РезультатФункции = НовыйРодитель;
				Прервать;			// Значение найдено.
			Иначе
				ТекПериод = НовыйРодитель;
			КонецЕсли;
		Иначе
			ТекПериод = НовыйРодитель;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает копию таблицы ТаблицаПериодовВход с добавленной колонкой РодительПериода,
// в которой указан период следующего уровня иерархии из списка СписокПериодичностиВход.
&НаСервереБезКонтекста
Функция ДополнитьРодителейПериодов(ТаблицаПериодовВход, СписокПериодичностиВход)
	РезультатФункции = ТаблицаПериодовВход.Скопировать();
	РезультатФункции.Колонки.Добавить("РодительПериода");
	МассивПериодов = ТаблицаПериодовВход.ВыгрузитьКолонку("ПериодОтчета");
	МассивПериодов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПериодов);
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		НовыйРодитель = ПолучитьРодителяСПериодичностью(ТекРезультатФункции.ПериодОтчета, СписокПериодичностиВход, МассивПериодов);
		ТекРезультатФункции.РодительПериода = НовыйРодитель;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу периодов сценариев, отобраные по горизонту от 
// ДатаНачалаВход и ДатаОкончанияВход, сформированную для периодичностей 
// из списка СписокПериодичностиВход.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуПериодов(ДатаНачалаВход, ДатаОкончанияВход, СписокПериодичностиВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВсеПериоды
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|	И Периоды.ДатаОкончания <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И Периоды.Периодичность В(&Периодичность)
	|	И НЕ Периоды.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сценарии.Ссылка КАК Сценарий,
	|	ВТ_ВсеПериоды.Ссылка КАК ПериодОтчета
	|ПОМЕСТИТЬ ВТ_ВсеСценарии
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии,
	|	ВТ_ВсеПериоды КАК ВТ_ВсеПериоды
	|ГДЕ
	|	НЕ Сценарии.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УправлениеПериодомСценария.Сценарий КАК Сценарии,
	|	ВТ_ВсеПериоды.Ссылка КАК Периоды,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УправлениеПериодомСценария.ПериодЗакрыт
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтатусБлокировки
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеПериоды КАК ВТ_ВсеПериоды
	|		ПО УправлениеПериодомСценария.ПериодСценария.Периодичность = ВТ_ВсеПериоды.Ссылка.Периодичность
	|			И (НАЧАЛОПЕРИОДА(УправлениеПериодомСценария.ПериодСценария.ДатаНачала, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ВТ_ВсеПериоды.Ссылка.ДатаНачала, ДЕНЬ))
	|			И (КОНЕЦПЕРИОДА(УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания, ДЕНЬ) >= КОНЕЦПЕРИОДА(ВТ_ВсеПериоды.Ссылка.ДатаОкончания, ДЕНЬ))
	|ГДЕ
	|	НЕ УправлениеПериодомСценария.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	УправлениеПериодомСценария.Сценарий,
	|	ВТ_ВсеПериоды.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ВсеСценарии.Сценарий КАК Сценарий,
	|	ЕСТЬNULL(ВТ_ДанныеДокументов.СтатусБлокировки, -1) КАК СтатусБлокировки,
	|	ВТ_ВсеСценарии.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ВсеСценарии.Сценарий.Периодичность КАК Периодичность
	|ИЗ
	|	ВТ_ВсеСценарии КАК ВТ_ВсеСценарии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	|		ПО ВТ_ВсеСценарии.Сценарий = ВТ_ДанныеДокументов.Сценарии
	|			И ВТ_ВсеСценарии.ПериодОтчета = ВТ_ДанныеДокументов.Периоды";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаВход);	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияВход);	
	Запрос.УстановитьПараметр("Периодичность", СписокПериодичностиВход);	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	РезультатФункции = ДополнитьРодителейПериодов(РезультатФункции, СписокПериодичностиВход);
	Возврат РезультатФункции;
КонецФункции

// Заполняет таблицу периодичностей значениями по умолчанию.
&НаСервере
Процедура ЗаполнитьПериодичностиПоУмолчанию()
	ПериодичностьКонстанты = Константы.ПериодичностьБюджетирования.Получить();
	Если ЗначениеЗаполнено(ПериодичностьКонстанты) Тогда
		НоваяСтрока = СоставПериодичностей.Добавить();
		НоваяСтрока.Использование	 = Истина;
		НоваяСтрока.Периодичность	 = ПериодичностьКонстанты;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периодичность.Ссылка,
		|	Периодичность.Порядок
		|ПОМЕСТИТЬ ВТ_ВсеПериодичности
		|ИЗ
		|	Перечисление.Периодичность КАК Периодичность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатусыПериодовСценариев.Периоды.Периодичность КАК Периодичность
		|ПОМЕСТИТЬ ВТ_ПериодичностиДокументов
		|ИЗ
		|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		|ГДЕ
		|	СтатусыПериодовСценариев.Периоды.ДатаНачала >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
		|	И СтатусыПериодовСценариев.Периоды.ДатаОкончания <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеПериодичности.Ссылка КАК Периодичность,
		|	ВТ_ВсеПериодичности.Порядок КАК Порядок,
		|	ВЫБОР
		|		КОГДА ВТ_ПериодыДокумента.Периодичность ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использование
		|ИЗ
		|	ВТ_ВсеПериодичности КАК ВТ_ВсеПериодичности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодичностиДокументов КАК ВТ_ПериодыДокумента
		|		ПО ВТ_ВсеПериодичности.Ссылка = ВТ_ПериодыДокумента.Периодичность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
		Запрос.УстановитьПараметр("ДатаНачала", ПериодОтображения.ДатаНачала);	
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодОтображения.ДатаОкончания);	
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		СоставПериодичностей.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = СоставПериодичностей.Добавить();
			НоваяСтрока.Использование	 = ВыборкаДетальныеЗаписи.Использование;
			НоваяСтрока.Периодичность	 = ВыборкаДетальныеЗаписи.Периодичность;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Преобразует таблицу выбранных периодичностей в список значений.
&НаСервере
Функция ВернутьТекущийСписокПериодичностей(ВключатьЗначенияПоУмолчаниюВход = Истина)
	РезультатФункции = Новый СписокЗначений;
	Для Каждого ТекСоставПериодичностей Из СоставПериодичностей Цикл
		Если ТекСоставПериодичностей.Использование Тогда
			РезультатФункции.Добавить(ТекСоставПериодичностей.Периодичность);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	// По умолчанию выводим строго по месяцам.
	Если ВключатьЗначенияПоУмолчаниюВход Тогда
		Если РезультатФункции.Количество() = 0 Тогда
			РезультатФункции.Добавить(Перечисления.Периодичность.Месяц);
		Иначе
			// В списке есть элементы. Не изеняем.
		КонецЕсли;
	Иначе
		// Оставляем список пустым.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает новый уникальный идентификатор, в котором символы - заменены на на _
&НаСервере
Функция СгенерироватьСтроковыйИдентификатор()
	НовыйИдентификатор = Новый УникальныйИдентификатор;
	РезультатФункции = Строка(НовыйИдентификатор);
	РезультатФункции = СтрЗаменить(РезультатФункции, "-", "_");
	Возврат РезультатФункции;
КонецФункции

// Возвращает развёрнутый массив сценариев, выбранных пользователем.
&НаСервере
Функция ПолучитьМассивВыбранныхСценариевОтбора()
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(ОтборСценарий) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сценарии.Ссылка
		|ИЗ
		|	Справочник.Сценарии КАК Сценарии
		|ГДЕ
		|	Сценарии.Ссылка В ИЕРАРХИИ(&Ссылка)";
		Запрос.УстановитьПараметр("Ссылка", ОтборСценарий);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Массив;		// Отбор не установлен. Верёнм пустой массив.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает копию таблицы, в которую добавлено и заполнено 
// поле ПредставлениеСценария. 
&НаСервере
Функция ЗаполнитьПредставлениеСценария(ТаблицаВход)
	РезультатФункции = ТаблицаВход.Скопировать();
	РезультатФункции.Колонки.Добавить("ПредставлениеСценария");
	РезультатФункции.Колонки.Добавить("ПредставлениеПериодичности");
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		ПредставлениеПериодичности = "%Периодичность%";
		Если ЗначениеЗаполнено(ТекРезультатФункции.Периодичность) Тогда
			ПредставлениеПериодичности = СтрЗаменить(ПредставлениеПериодичности, "%Периодичность%", Строка(ТекРезультатФункции.Периодичность));
		Иначе
			ПредставлениеПериодичности = СтрЗаменить(ПредставлениеПериодичности, "%Периодичность%", "-");
		КонецЕсли;
		ТекРезультатФункции.ПредставлениеПериодичности = ПредставлениеПериодичности;
		ТекРезультатФункции.ПредставлениеСценария = Строка(ТекРезультатФункции.Сценарий) + " (" + ПредставлениеПериодичности + ")";
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу, содержащую координаты ячеек, а также сопоставленные этой ячеке
// аналитики и документ управления периодом. Используются ТабличныйДокументВход и 
// ДанныеРасшифровкиВход для определения координат и ТаблицаДанныхВход для определения
// аналитик.
&НаСервере
Функция ПолучитьТаблицуКоординатРасшифровки(ТабличныйДокументВход, ТаблицаДанныхВход, ДанныеРасшифровкиВход)
	// Инициализация.
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("КолонкаДокумента");
	РезультатФункции.Колонки.Добавить("СтрокаДокумента");
	РезультатФункции.Колонки.Добавить("Сценарий");
	РезультатФункции.Колонки.Добавить("ПериодОтчета");
	РезультатФункции.Колонки.Добавить("УправлениеОтчетнымПериодом");
	МассивТиповПериоды = Новый Массив;
	МассивТиповПериоды.Добавить(Тип("СправочникСсылка.Периоды"));
	МассивТиповСценарии = Новый Массив;
	МассивТиповСценарии.Добавить(Тип("СправочникСсылка.Сценарии"));
	// Получение аналитик периодов.
	Для НомерКолонки = 1 По ТабличныйДокументВход.ШиринаТаблицы	Цикл
		Для НомерСтроки = 1 По ТабличныйДокументВход.ВысотаТаблицы Цикл
			// Получение рашифровки ячейки.
			ТекОбласть = ТабличныйДокументВход.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ТекРасшифровка = ТекОбласть.Расшифровка;
			Если ТекРасшифровка <> Неопределено Тогда
				// Извлечение аналитик из рашифровки.
				СтруктураРасшифровки = Расшифровка_Сервер(ТекРасшифровка);
				ЗаполненСценарий = ЗначениеЗаполнено(СтруктураРасшифровки.Сценарий);
				ЗаполненПериодОтчета = ЗначениеЗаполнено(СтруктураРасшифровки.ПериодОтчета);
				// Добавление новой строки в таблицу.
				Если ЗаполненСценарий И ЗаполненПериодОтчета Тогда
					НоваяСтрока = РезультатФункции.Добавить();
					НоваяСтрока.КолонкаДокумента = НомерКолонки;
					НоваяСтрока.СтрокаДокумента = НомерСтроки;
					НоваяСтрока.Сценарий = СтруктураРасшифровки.Сценарий;
					НоваяСтрока.ПериодОтчета = СтруктураРасшифровки.ПериодОтчета;
				Иначе
					Продолжить;				// Не все необходимые аналитики заполнены.
				КонецЕсли;
			Иначе
				Продолжить;					// Нет расшифровки.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Получение таблицы документов по периодам.
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ПериодОтчета", Новый ОписаниеТипов(МассивТиповПериоды));
	ТаблицаПериодов.Колонки.Добавить("Сценарий", Новый ОписаниеТипов(МассивТиповСценарии));
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ПериодОтчета	 = ТекРезультатФункции.ПериодОтчета;
		НоваяСтрока.Сценарий		 = ТекРезультатФункции.Сценарий;
	КонецЦикла;
	ТаблицаДокументов = УправлениеОтчетамиУХ.ПолучитьТаблицуДокументовПоТаблицеПериодов(ТаблицаПериодов);
	// Заполнение документов в результирующей таблице.
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПериодСценария", ТекРезультатФункции.ПериодОтчета);
		СтруктураПоиска.Вставить("Сценарий", ТекРезультатФункции.Сценарий);
		НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 1 Тогда
			ПерваяСтрокаДокументы = НайденныеСтроки[0];
			ТекРезультатФункции.УправлениеОтчетнымПериодом = ПерваяСтрокаДокументы.Ссылка;
		Иначе
			ТекРезультатФункции.УправлениеОтчетнымПериодом = Документы.УправлениеПериодомСценария.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру, содерщую верх, низ, лево, право области в таблице координат  ТаблицаКоординатВход, 
//в которой действует данный документ ДокументСсылкаВход.
&НаСервере
Функция ПолучитьСтруктуруКоординатОбъединенияПоДокументу(ДокументСсылкаВход, ТаблицаКоординатВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Верх", -1);
	РезультатФункции.Вставить("Низ", -1);
	РезультатФункции.Вставить("Лево", -1);
	РезультатФункции.Вставить("Право", -1);
	// Отбор строк с текущим документом.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("УправлениеОтчетнымПериодом", ДокументСсылкаВход);
	НайденныеСтроки = ТаблицаКоординатВход.НайтиСтроки(СтруктураПоиска);
	// Поиск максимальных и минимальных значений номеров строк и колонок.
	МинКолонка = 999999;
	МаксКолонка = -1;
	МинСтрока = 999999;
	МаксСтрока = -1;
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		Если ТекНайденныеСтроки.КолонкаДокумента > МаксКолонка Тогда
			МаксКолонка = ТекНайденныеСтроки.КолонкаДокумента;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
		Если ТекНайденныеСтроки.КолонкаДокумента < МинКолонка Тогда
			МинКолонка = ТекНайденныеСтроки.КолонкаДокумента;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
		Если ТекНайденныеСтроки.СтрокаДокумента > МаксСтрока Тогда
			МаксСтрока = ТекНайденныеСтроки.СтрокаДокумента;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
		Если ТекНайденныеСтроки.СтрокаДокумента < МинСтрока Тогда
			МинСтрока = ТекНайденныеСтроки.СтрокаДокумента;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	// Возврат результирующих значений.
	Если (МинКолонка <> 999999) И (МаксКолонка <> -1) И (МинСтрока <> 999999) И (МаксСтрока <> -1) Тогда
		РезультатФункции.Вставить("Верх", МинСтрока);
		РезультатФункции.Вставить("Низ", МаксСтрока);
		РезультатФункции.Вставить("Лево", МинКолонка);
		РезультатФункции.Вставить("Право", МаксКолонка);
	Иначе
		РезультатФункции.Вставить("Верх", -1);
		РезультатФункции.Вставить("Низ", -1);
		РезультатФункции.Вставить("Лево", -1);
		РезультатФункции.Вставить("Право", -1);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Объединяет ячейки в ТабличныйДокументВход, в которых действует один документ управление
// отчетным периодом, основываясь на данных ТаблицаДанныхВход и расшифровке ДанныеРасшифровкиВход.
&НаСервере
Функция ОбъединитьЯчейкиПериодов(ТабличныйДокументВход, ТаблицаДанныхВход, ДанныеРасшифровкиВход)
	РезультатФункции = ТабличныйДокументВход;   
	СписокПериодичностей = ВернутьТекущийСписокПериодичностей();
	Если СписокПериодичностей.Количество() = 1 Тогда
		ТаблицаКоординатРасшифровки = ПолучитьТаблицуКоординатРасшифровки(ТабличныйДокументВход, ТаблицаДанныхВход, ДанныеРасшифровкиВход);
		МассивДокументов = ТаблицаКоординатРасшифровки.ВыгрузитьКолонку("УправлениеОтчетнымПериодом");
		МассивДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДокументов);
		МассивДокументов = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивДокументов);
		Для Каждого ТекМассивДокументов Из МассивДокументов Цикл
			Если ТекМассивДокументов.ПериодСценария <> ТекМассивДокументов.ПериодСценарияОкончание Тогда
				СтруктураКоординат = ПолучитьСтруктуруКоординатОбъединенияПоДокументу(ТекМассивДокументов, ТаблицаКоординатРасшифровки);
				ЛевоОбъединения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураКоординат, "Лево", -1); 
				ПравоОбъединения	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураКоординат, "Право", -1); 
				ВерхОбъединения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураКоординат, "Верх", -1); 
				НизОбъединения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураКоординат, "Низ", -1); 
				Если (ЛевоОбъединения - 1) И (ПравоОбъединения <> -1) И (ВерхОбъединения <> -1) И (НизОбъединения <> -1) Тогда
					РезультатФункции.Область(ВерхОбъединения, ЛевоОбъединения, НизОбъединения, ПравоОбъединения).Объединить();
				Иначе
					// Не все координаты получены корректно. Не объединяем.
				КонецЕсли;
			Иначе
				Продолжить;		// Один период. Не требуется объединение ячеек.
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Несколько периодов. Не объединяем, чтобы не вносить путаницы.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Выводит таблицу ТаблицаВход в табличный документ на форме, используя СКД. 
&НаСервере
Процедура ВывестиТабДокПериодов(ТаблицаВход)
     ДанныеРасшифровки = Неопределено;
     КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
     МакетДокумента = Документы.УправлениеПериодомСценария.ПолучитьМакет("Макет");
     КомпоновщикПериоды= Новый КомпоновщикНастроекКомпоновкиДанных;
     КомпоновщикПериоды.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетДокумента));
     КомпоновщикПериоды.ЗагрузитьНастройки(МакетДокумента.НастройкиПоУмолчанию);
	 Если ЗначениеЗаполнено(ОтборСценарий) Тогда
		 ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикПериоды, "Сценарий", ОтборСценарий, ВидСравненияКомпоновкиДанных.ВИерархии);
	 Иначе
		 ТиповыеОтчетыУХ.УдалитьОтбор(КомпоновщикПериоды, "Сценарий");
	 КонецЕсли;
     МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетДокумента, КомпоновщикПериоды.ПолучитьНастройки(), ДанныеРасшифровки);
     ВнешниеДанные = Новый Структура;
     ВнешниеДанные.Вставить("ТЗ_Данные", ТаблицаВход);
	 ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
     ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки, Истина);
     Результат.Очистить();
     ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
     ПроцессорВывода.УстановитьДокумент(Результат);
     ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 ДанныеРасшифровкиАдрес = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
	 Результат = ОбъединитьЯчейкиПериодов(Результат, ТаблицаВход, ДанныеРасшифровки);
	 Элементы.Результат.Доступность = Истина;
КонецПроцедуры

// Производит формирование отчета на сервере.
&НаСервере
Процедура СформироватьНаСервере()
	// Считывание настроек вывода.
	СписокПериодичностей = ВернутьТекущийСписокПериодичностей();
	ДатаНачалаПериода = ПериодОтображения.ДатаНачала;
	ДатаОкончанияПериода = ПериодОтображения.ДатаОкончания;
	// Получение исходных данных.
	ТаблицаПериодов = ПолучитьТаблицуПериодов(ДатаНачалаПериода, ДатаОкончанияПериода, СписокПериодичностей);
	ТаблицаПериодов = ЗаполнитьПредставлениеСценария(ТаблицаПериодов);
	// Вывод результата.
	ВывестиТабДокПериодов(ТаблицаПериодов);
	ОбновитьЗаголовокКомандыВыбратьПериодичность();
КонецПроцедуры

// Возвращает заголовок для команды Выбрать периодичнсть по текущему составу периодичностей.
&НаСервере
Функция СформироватьЗаголовокКомандыВыбратьПериодичность()
	РезультатФункции = "";
	СписокПериодичностей = ВернутьТекущийСписокПериодичностей();
	Для Каждого ТекСписокПериодичностей Из СписокПериодичностей Цикл
		РезультатФункции = РезультатФункции + Строка(ТекСписокПериодичностей.Значение);
		РезультатФункции = РезультатФункции + "; ";
	КонецЦикла;
	Если СтрДлина(РезультатФункции) > 2 Тогда
		РезультатФункции = Лев(РезультатФункции, СтрДлина(РезультатФункции) - 2);
	Иначе
		// Не убираем последний разделитель, т.к. строка пустая.
	КонецЕсли;
	Если СокрЛП(РезультатФункции) = "" Тогда
		РезультатФункции = НСтр("ru = 'Выбрать периодичность'");
	Иначе
		// Сформировано представление периодичностей. Оставляем.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Обновляет заголовок команды ВыбратьПериодичность, согласно текущим выбранным периодам.
&НаСервере
Функция ОбновитьЗаголовокКомандыВыбратьПериодичность()
	НовыйЗаголовокПериодичностей = СформироватьЗаголовокКомандыВыбратьПериодичность();
	Элементы.ВыбратьПериодичность.Заголовок = НовыйЗаголовокПериодичностей; 
КонецФункции

// Проверяет существование в интервале от ДатаНачалаВход до ДатаОкончанияВход периодов
// с периодичностями из массива МассивПериодичностейВход.
&НаСервереБезКонтекста
Процедура ПроверитьСуществованиеПериодов(МассивПериодичностейВход, ДатаНачалаВход, ДатаОкончанияВход)
	// Получим периодичности, по которым есть периоды в заданном интервале.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Периоды.Периодичность КАК Периодичность
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность В(&Периодичность)
		|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания <= &ДатаОкончания
		|	И НЕ Периоды.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаВход);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияВход);
	Запрос.УстановитьПараметр("Периодичность", МассивПериодичностейВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	НайденныеПериодичности = Выгрузка.ВыгрузитьКолонку("Периодичность");
	// Найдём существующие периодичности среди исходных.
	Для Каждого ТекМассивПериодичностей Из МассивПериодичностейВход Цикл
		НайденныйЭлемент = НайденныеПериодичности.Найти(ТекМассивПериодичностей);
		Если НайденныйЭлемент = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'В интервале от %ДатаНачала% до %ДатаОкончания% не найдены периоды с периодичностью %Периодичность%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаНачала%", Формат(ДатаНачалаВход, "ДФ=dd.MM.yyyy"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОкончания%", Формат(ДатаОкончанияВход, "ДФ=dd.MM.yyyy"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Периодичность%", Строка(ТекМассивПериодичностей));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			// Элемент найден. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры		// ПроверитьСуществованиеПериодов()

// Получает выбранные периодичности и проверяет существование периодов 
// с ними в заданном интервале.
&НаКлиенте
Процедура СобратьИПроверитьСуществованиеПериодов()
	МассивПериодичностей = Новый Массив;
	Для Каждого ТекСоставПериодичностей Из СоставПериодичностей Цикл
		Если ТекСоставПериодичностей.Использование Тогда
			МассивПериодичностей.Добавить(ТекСоставПериодичностей.Периодичность);
		Иначе
			// Периодичность не выбрана пользователем. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	ПроверитьСуществованиеПериодов(МассивПериодичностей, ПериодОтображения.ДатаНачала, ПериодОтображения.ДатаОкончания);
КонецПроцедуры		// СобратьИПроверитьСуществованиеПериодов()

// Вовзращает структуру, содержащую сценарий и период по расшифровке РасшифровкаВход 
// табличного документа на форме.
&НаСервере
Функция Расшифровка_Сервер(РасшифровкаВход)
	РезультатФункции = Новый Структура;
	Попытка
		Сценарий = Справочники.Сценарии.ПустаяСсылка();
		ПериодОтчета = Справочники.Периоды.ПустаяСсылка();
		ДанныеРасшифровкиКомпоновки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиАдрес);	
		РодителиРасшифровки = ДанныеРасшифровкиКомпоновки.Элементы[РасшифровкаВход].ПолучитьРодителей(); 	//Получим расшифровку заголовочных ячеек
		Для Каждого ТекРодителиРасшифровки Из РодителиРасшифровки Цикл
			ПоляРодителей = ДанныеРасшифровкиКомпоновки.Элементы[ТекРодителиРасшифровки.Идентификатор].ПолучитьПоля();	//Получим поля заголовочной ячейки
			Для Каждого ТекПоляРодителей Из ПоляРодителей Цикл									//Поиск значений необходимых полей
				Если СокрЛП(ТекПоляРодителей.Поле) = "Сценарий" Тогда
					Сценарий = ТекПоляРодителей.Значение;
				ИначеЕсли СокрЛП(ТекПоляРодителей.Поле) = "ПериодОтчета" Тогда	
					ПериодОтчета = ТекПоляРодителей.Значение;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
		РезультатФункции.Вставить("Сценарий", Сценарий);
		РезультатФункции.Вставить("ПериодОтчета", ПериодОтчета);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить расшифровку по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции.Вставить("Сценарий", Справочники.Сценарии.ПустаяСсылка());
		РезультатФункции.Вставить("ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Выводит в табличный документ на форме надпись, информирующую, что отчёт не сформирован.
&НаКлиенте
Функция ОтобразитьНадписьОтчетНеСформирован()
	Элементы.Результат.ОтображениеСостояния.Текст = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
	Элементы.Результат.ОтображениеСостояния.Видимость = Истина; 	
	Элементы.Результат.Доступность = Ложь;
КонецФункции

// Открывает существующие/создаёт новый документ Управление отчетным периодом
// по сценарию СценарийВход и периоду ПериодВход.
&НаКлиенте
Процедура ОбработатьОткрытиеУправлениеПериодом(СценарийВход, ПериодВход)
	ДокументУправлениеПериодом = УправлениеОтчетамиУХ.НайтиДокументУправлениеОтчетнымПериодом(СценарийВход, ПериодВход);
	Если ЗначениеЗаполнено(ДокументУправлениеПериодом) Тогда
		// Открытие существующего документа.
		ПоказатьЗначение(, ДокументУправлениеПериодом);
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сценарий",			 СценарийВход);
		ПараметрыФормы.Вставить("Период",			 ПериодВход);
		ПараметрыФормы.Вставить("ПериодОкончание",	 ПериодВход);
		ОткрытьФорму("Документ.УправлениеПериодомСценария.ФормаОбъекта", ПараметрыФормы); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	ПериодОтображения = РезультатВыбора;
	СобратьИПроверитьСуществованиеПериодов();
	ОтобразитьНадписьОтчетНеСформирован();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь; 
	СформироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодичность(Команда)
	СписокПериодичности = ВернутьТекущийСписокПериодичностей();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокПериодичностей", СписокПериодичности);
	ОткрытьФорму("Документ.УправлениеПериодомСценария.Форма.ФормаВыбораПериодичности", СтруктураПараметров, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СоставПериодичностей.Очистить();
	Для Каждого ТекВыбранноеЗначение Из ВыбранноеЗначение Цикл
		НоваяСтрока = СоставПериодичностей.Добавить();
		НоваяСтрока.Использование = ТекВыбранноеЗначение.Использование;
		НоваяСтрока.Периодичность = ТекВыбранноеЗначение.Периодичность;
	КонецЦикла;
	СобратьИПроверитьСуществованиеПериодов();
	ОбновитьЗаголовокКомандыВыбратьПериодичность();	
	ОтобразитьНадписьОтчетНеСформирован();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если (НЕ ЗначениеЗаполнено(ПериодОтображения.ДатаНачала)) И (НЕ ЗначениеЗаполнено(ПериодОтображения.ДатаОкончания)) Тогда
		ПериодОтображения = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);
	Иначе
		// Оставляем заполненный период.
	КонецЕсли;
	Если СоставПериодичностей.Количество() = 0 Тогда
		ЗаполнитьПериодичностиПоУмолчанию();
	Иначе
		// Оставляем состав периодичностей.
	КонецЕсли;
	СформироватьНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураРасшифровки = Расшифровка_Сервер(Расшифровка);
	ЗаполненСценарий = ЗначениеЗаполнено(СтруктураРасшифровки.Сценарий);
	ЗаполненПериод = ЗначениеЗаполнено(СтруктураРасшифровки.ПериодОтчета);
	Если (ЗаполненСценарий) И (ЗаполненПериод) Тогда
		ОбработатьОткрытиеУправлениеПериодом(СтруктураРасшифровки.Сценарий, СтруктураРасшифровки.ПериодОтчета);
	Иначе
		Если ЗаполненСценарий Тогда
			ПоказатьЗначение(, СтруктураРасшифровки.Сценарий);
		Иначе
			// Сценарий не заполнен. Не открываем его.
		КонецЕсли;
		Если ЗаполненПериод Тогда
			ПоказатьЗначение(, СтруктураРасшифровки.ПериодОтчета);
		Иначе
			// Период не заполнен. Не открываем его.
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтображенияПриИзменении(Элемент)
	ОтобразитьНадписьОтчетНеСформирован();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСценарийПриИзменении(Элемент)
	ОтобразитьНадписьОтчетНеСформирован();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = ПериодОтображения.ДатаНачала;
	Диалог.Период.ДатаОкончания = ПериодОтображения.ДатаОкончания;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтображенияДатаНачалаПриИзменении(Элемент)
	СобратьИПроверитьСуществованиеПериодов();
	ОтобразитьНадписьОтчетНеСформирован();
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтображенияДатаОкончанияПриИзменении(Элемент)
	СобратьИПроверитьСуществованиеПериодов();
	ОтобразитьНадписьОтчетНеСформирован();
КонецПроцедуры