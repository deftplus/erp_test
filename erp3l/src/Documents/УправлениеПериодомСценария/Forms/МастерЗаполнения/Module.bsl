
&НаКлиенте
Перем ЗаписьВФорме;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Ключ.Пустая() Тогда	
		Объект.ПериодСценария 				 = Параметры.Период;
		Объект.ПериодСценарияОкончание       = Параметры.ПериодОкончание;
		Объект.ТекущаяПериодичность       	 = Параметры.Период.Периодичность;
		Объект.Сценарий       				 = Параметры.Сценарий;	
	КонецЕсли;
	
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_НайтиЭкземплярПроцесса(Объект);

	ЗаполнитьНастройкуДоступностиСтраницМастера();
	
	ИнициализироватьТаблицуИзмененийКурсов();
		
	ИспользоватьУниверсальныеПроцессы = Истина;
	
	ПериодичностьЗадана = ЗначениеЗаполнено(Объект.ТекущаяПериодичность);
	ОпределитьПериодичностьСценария(НЕ ПериодичностьЗадана);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьДеревоСтраниц();
	УстановитьДоступностьКнопокПеремещения();
	КурсыИзменены = Ложь;
	ИзменитьОтображениеКнопкиЗакрытьОтчет();
	
	НачальнаяСтраница = "ОсновнаяНастройка";
	ИзменитьТекущуюСтраницуВОглавлении(НачальнаяСтраница);
	
	Строка = Оглавление.НайтиСтроки(Новый Структура("НаименованиеСтраницы", НачальнаяСтраница));
	Элементы.Оглавление.ТекущаяСтрока = Строка[0].ПолучитьИдентификатор();
	
	ЗаписьВФорме = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаВерсия" И ТипЗнч(Параметр) = Тип("СправочникСсылка.Сценарии") Тогда
				
		ИзмененКлючевойРеквизит = Истина;
		Модифицированность = Истина;
	
		ОпределитьПериодичностьСценария();
		ПериодичностьСценарияПриИзмененииСервер();
		ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте();
		УстановитьВидимость(Ложь);
		
	КонецЕсли;
	
	Если Источник = ЭтаФорма И ИмяСобытия = "ИзмененаВерсия" Тогда
		
		Объект.ВерсияОрганизационнойСтруктуры = Параметр;
		
		Попытка
			Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось сохранить изменения
			|%1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецЕсли;

		КонецПопытки;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаВерсия" И ТипЗнч(Параметр) = Тип("СправочникСсылка.ВерсииРегламентовПодготовкиОтчетности") Тогда
				
		ИзмененКлючевойРеквизит = Истина;
		Модифицированность = Истина;
	
		ОпределитьПериодичностьСценария();
		ПериодичностьСценарияПриИзмененииСервер();
		ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте();
		
		РасширеннаяНастройка = ПроверитьШаблонЗаполнен(Объект.ВерсияОрганизационнойСтруктуры);
		ЗаполнитьДеревоСтраниц();
				
		Если Объект.УстанавливатьЛимиты И Объект.ВидыОтчетовДляУстановкиЛимитов.Количество() = 0 Тогда
			ЗаполнитьВидыОтчетовДляУстановкиЛимитовПоШаблону();
		КонецЕсли;
		
		УстановитьВидимость();
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)	
	
	Объект.РасширеннаяНастройка = РасширеннаяНастройка;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПередЗакрытиемПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		
		Элементы.ПроцессЗакрытия.Видимость = Истина;
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьПериод",ИнтервалОжидания,Истина);

		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПериод()
	
	Попытка 					
		Объект.ПериодЗакрыт = Истина;
		ЗаписатьДокумент();	
	Исключение
		Объект.ПериодЗакрыт = Ложь;
	КонецПопытки;	
	
	Элементы.ПроцессЗакрытия.Видимость = Ложь;
	ОтключитьОбработчикОжидания("Подключаемый_ЗакрытьПериод");
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если КурсыИзменены Тогда
		СохранитьЗначенияКурсов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)	
	ОповеститьОбИзменении(Объект.Ссылка);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Курсы

&НаКлиенте
Процедура ТаблицаКурсов_Обновить(Команда)
	
	ОбновитьТаблицуКурсов();
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКурсов_Записать(Команда)
	
	Если КурсыИзменены Тогда
		
		СохранитьЗначенияКурсов();
		
	КонецЕсли;
	
	РежимРедактированияКурсовВалют = Не РежимРедактированияКурсовВалют;
	ИзменитьРежимРедактированияКурсов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимБезСохранения(Команда)
	
	РежимРедактированияКурсовВалют = Не РежимРедактированияКурсовВалют;
	ИзменитьРежимРедактированияКурсов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Экземпляры

&НаКлиенте
Процедура ПерейтиКУправлениюПроцессом(Команда)
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастройкаПроцесса;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПроцессом_Матрица(Команда)
	
	ПараметрыФормы = Новый Структура("ДокументУправленияПериодомСценария,РежимОткрытия,ФормироватьПриОткрытии", Объект.Ссылка,"МатрицаОтчетов",Истина);	
	РасширениеБизнесЛогикиУХКлиент.Открыть_УправлениеПроцессом_Матрица(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыверкаОтчетовПоУмолчанию(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма.Форма_Управляемая", Новый Структура("ВерсияОрганизационнойСтруктуры", Объект.ВерсияОрганизационнойСтруктуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыверкаОтчетовПоУмолчаниюИндивидуальная(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма.Форма_Управляемая", Новый Структура("ВерсияОрганизационнойСтруктуры, Период, Сценарий", Объект.ВерсияОрганизационнойСтруктуры, Объект.ПериодСценария, Объект.Сценарий));

КонецПроцедуры



&НаКлиенте
Процедура ЗапуститьПроцесс(Команда)
	ЕстьОшибкиНастройки = Ложь;
	Если НЕ ЗапуститьПроцесс_Сервер(ЕстьОшибкиНастройки) Тогда
		
		Если ЕстьОшибкиНастройки Тогда
			Оповещение = Новый ОписаниеОповещения("ЗапуститьПроцессЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, 
			НСтр("ru = 'Ошибка настройки параметров отчетов по умолчанию.
			|Открыть форму редактирования настроек?'"), 
			РежимДиалогаВопрос.ДаНет);
		Иначе
			// Процесс не удалось запустить по другой причине. Не предлагаем открыть форму настроек.
		КонецЕсли;
		Возврат;	 
		
	Иначе
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастройкаПроцесса;
		Элементы.ДатаНачалаПроцесса.Доступность = Ложь;
		Элементы.ЗапуститьПроцесс1.Доступность						 = Ложь;
		Элементы.УправлениеПроцессом_ПрекратитьПроцесс1.Доступность	 = Истина;
	КонецЕсли;
	
	//ПослеЗаписи
	ОповеститьОбИзменении(Объект.Ссылка);
		
	ЗаполнитьДеревоСтраниц();
	ИзменитьТекущуюСтраницуВОглавлении("НастройкаПроцесса");
	Оповестить("ОбновитьУправлениеПроцессомПодготовкиОтчетности");
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПроцессом_ПрекратитьПроцесс(Команда)
	
	Состояние(НСтр("ru = 'Завершение процесса'"));
	
	Объект.ЗапускатьПроцесс = Ложь;
	
	Если ИспользоватьУниверсальныеПроцессы Тогда	
		РезультатОсновки = ОстановитьУниверсальныйПроцесс(Ложь);			
		Если РезультатОсновки Тогда
			Элементы.ДатаНачалаПроцесса.Доступность = Истина;
			Элементы.ЗапуститьПроцесс1.Доступность						 = Истина;
			Элементы.УправлениеПроцессом_ПрекратитьПроцесс1.Доступность	 = Ложь;
		Иначе
			// Не удалось остановить процесс. Не изменяем доступность реквизитов.
		КонецЕсли;
	Иначе
		ЗаписатьОбъектВФорме();
	КонецЕсли;	
	
	ОбновитьОтображениеДанных();
	ЭтаФорма.Прочитать();
	ЗаполнитьДеревоСтраниц();
	ИзменитьТекущуюСтраницуВОглавлении("НастройкаПроцесса");
	Оповестить("ОбновитьУправлениеПроцессомПодготовкиОтчетности");
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДанымиПериода(Команда)
	
	ПараметрыФормы = Новый Структура("ДокументУправленияПериодомСценария,Режим", Объект.Ссылка,"ПоВидамОтчетов");
	РасширениеБизнесЛогикиУХКлиент.Открыть_УправлениеПериодами(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеПериодами(Команда)
	
	ПараметрыФормы = Новый Структура("ДокументУправленияПериодомСценария,Режим", Объект.Ссылка,"Периоды");
	РасширениеБизнесЛогикиУХКлиент.Открыть_УправлениеПериодами(ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура УдалениеВерсийДанных(Команда)
	
	ТекстВопроса=НСтр("ru = 'После удаления промежуточных версий данных
	|просмотр истории изменений будет невозможен.
	|Продолжить?'");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалениеВерсийДанныхЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеСледующегоПериода(Команда)
	
	ОткрытиеСледующегоПериодаСервер(); 		
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПериод(Команда)
	
	Если НЕ  Объект.ПериодЗакрыт Тогда	
		Оповещение = Новый ОписаниеОповещения("ОповещениеПередЗакрытиемПериода",ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'При закрытии периода будут утверждены все показатели отчетов,относящиеся к текущему периоду и сценарию. 
		|Эта процедура может занять длительное время. Вы уверены, что хотите закрыть период?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе		
		Объект.ПериодЗакрыт = НЕ Объект.ПериодЗакрыт;		
		ЗаписатьДокумент();
		РазблокироватьПериоды();
		УстановитьВидимость();
	КонецЕсли;	
					
КонецПроцедуры

// Переключает текущую страницу. Когда параметр ВпередВход
// равне Истине - переключает вперёд, в противном случае -
// переключает назад.
&НаКлиенте
Процедура ПереключитьСтраницу(ВпередВход)
	// Определим направление переключения.
	ТекущаяСтраницаИмя = Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ВпередВход Тогда
		ИмяСтраницы = ПолучитьСледующуюСтраницуОглавления(ТекущаяСтраницаИмя);		
	Иначе
		ИмяСтраницы = ПолучитьПредыдущуюСтраницуОглавления(ТекущаяСтраницаИмя);		
	КонецЕсли;
	// Выполним переключение.
	Если ИмяСтраницы <> Неопределено Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы[ИмяСтраницы];
		ИзменитьТекущуюСтраницуВОглавлении(ИмяСтраницы);
	Иначе
		// Это граничная страница. Не выполняем переключения.
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

#Область Команды_Страницы

&НаКлиенте
Процедура ПереключениеСтраницыПерезапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если НЕ ЗаписатьОбъектВФорме() Тогда
			ЗаполнитьДеревоСтраниц();
			Возврат;						// Запись не удалась.
		Иначе
			ЗаполнитьДеревоСтраниц();
		КонецЕсли;
	Иначе
		ЗаполнитьДеревоСтраниц();
		ТекущаяСтраницаИмя = Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		ИзменитьТекущуюСтраницуВОглавлении(ТекущаяСтраницаИмя);
		Возврат;				// Пользователь отказался от смены страниц и перезаписи.
	КонецЕсли;
	ПереключитьСтраницу(ДополнительныеПараметры.Вперед);
	УстановитьДоступностьКнопокПеремещения();
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	Если ТребуетсяПерезаписьФормы() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Вперед", Истина);
		ТекстВопроса = НСтр("ru = 'Для продолжения нужно сохранить объект. Сохранить?'");
		Режим = РежимДиалогаВопрос.ОКОтмена;
		Оповещение = Новый ОписаниеОповещения("ПереключениеСтраницыПерезапись_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Возврат;
	Иначе
		// Перезапись не требуется. Выполняем далее.
	КонецЕсли;
	ПереключитьСтраницу(Истина);
	
	УстановитьДоступностьКнопокПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если ТребуетсяПерезаписьФормы() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Вперед", Ложь);
		ТекстВопроса = НСтр("ru = 'Для продолжения нужно сохранить объект. Сохранить?'");
		Режим = РежимДиалогаВопрос.ОКОтмена;
		Оповещение = Новый ОписаниеОповещения("ПереключениеСтраницыПерезапись_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Возврат;
	Иначе
		// Перезапись не требуется. Выполняем далее.
	КонецЕсли;
	ПереключитьСтраницу(Ложь);
	УстановитьДоступностьКнопокПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Закрыть(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьУправлениеЛимитами(Команда)	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УОП", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.УправлениеЛимитами.Форма.ФормаОтчета", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Страницы

&НаКлиенте
Функция ОпределитьДоступностьСтраницы(ТаблицаДоступностиСтраниц, Наименование, СтруктураДоступности)
	
	ТекСтроки = ТаблицаДоступностиСтраниц.НайтиСтроки(Новый Структура("Наименование", Наименование));
	
	Если ТекСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ТекСтрока = ТекСтроки[0];
		УсловияЭтоНовый = (ТекСтрока.ЭтоНовый = 0 ИЛИ (ТекСтрока.ЭтоНовый = 2) = СтруктураДоступности.ЭтоНовый);
		УсловияОсновныеПараметры = (ТекСтрока.ЗаполненыОсновныеПараметры = 0 ИЛИ (ТекСтрока.ЗаполненыОсновныеПараметры = 2) = СтруктураДоступности.ЗаполненыОсновныеПараметры);
		УсловияЗапускПроцесса = (ТекСтрока.ПроцессЗапущен = 0 ИЛИ (ТекСтрока.ПроцессЗапущен = 2) = СтруктураДоступности.ПроцессЗапущен);
		Возврат (УсловияЭтоНовый) И (УсловияОсновныеПараметры) И (УсловияЗапускПроцесса);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоСтраниц() 
	
	СтруктураДоступности = Новый Структура("ЭтоНовый, ЗаполненыОсновныеПараметры, ПроцессЗапущен", Параметры.Ключ.Пустая(), ЗначениеЗаполнено(Объект.ДатаНачалаПроцесса), Объект.ЗапускатьПроцесс);
							
	Оглавление.Очистить();
	
	НоваяСтрока                        = Оглавление.Добавить();
	НоваяСтрока.Наименование           = НСтр("ru = 'Настройка'");
	НоваяСтрока.НаименованиеСтраницы   = "";
	НоваяСтрока.ТекущаяСтраница        = 3;
	
	СтрокаРаздела                      = Оглавление.Добавить();
	СтрокаРаздела.Наименование         = НСтр("ru = 'Основные данные периода'");
	СтрокаРаздела.НаименованиеСтраницы = "ОсновнаяНастройка";
	СтрокаРаздела.Доступность          = ОпределитьДоступностьСтраницы(ТаблицаДоступностиСтраниц, "ОсновнаяНастройка", СтруктураДоступности);
	СтрокаРаздела.ТекущаяСтраница  = 0;

	СтрокаРаздела                      = Оглавление.Добавить();
	СтрокаРаздела.Наименование         = НСтр("ru = 'Курсы валют'");
	СтрокаРаздела.НаименованиеСтраницы = "КурсыВалют";
	СтрокаРаздела.Доступность          = ОпределитьДоступностьСтраницы(ТаблицаДоступностиСтраниц, "КурсыВалют", СтруктураДоступности);
	СтрокаРаздела.ТекущаяСтраница  = ?(СтрокаРаздела.Доступность, 1, 2);
	
	СтрокаРаздела                      = Оглавление.Добавить();
	СтрокаРаздела.Наименование         = НСтр("ru = 'Выверка настройки отчетов'");
	СтрокаРаздела.НаименованиеСтраницы = "ВыверкаОтчетов";
	СтрокаРаздела.Доступность          = ОпределитьДоступностьСтраницы(ТаблицаДоступностиСтраниц, "ВыверкаОтчетов", СтруктураДоступности);
	СтрокаРаздела.ТекущаяСтраница  = ?(СтрокаРаздела.Доступность, 1, 2);
	
	НоваяСтрока                        = Оглавление.Добавить();
	НоваяСтрока.Наименование           = НСтр("ru = 'Управление'");
	НоваяСтрока.НаименованиеСтраницы   = "";
	НоваяСтрока.ТекущаяСтраница  = 3;
	
	СтрокаРаздела.ТекущаяСтраница  = ?(СтрокаРаздела.Доступность, 1, 2);
	
	Если  ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда	
		СтрокаРаздела                      = Оглавление.Добавить();
		СтрокаРаздела.Наименование         = НСтр("ru = 'Заполнение отчетов и установка лимитов'");
		СтрокаРаздела.НаименованиеСтраницы = "НастройкаПроцесса";
		СтрокаРаздела.Доступность          =  ОпределитьДоступностьСтраницы(ТаблицаДоступностиСтраниц, "НастройкаПроцесса", СтруктураДоступности);
		СтрокаРаздела.ТекущаяСтраница  = ?(СтрокаРаздела.Доступность, 1, 2);
	КонецЕсли;
	
	СтрокаРаздела                      = Оглавление.Добавить();
	СтрокаРаздела.Наименование         = НСтр("ru = 'Закрытие периода'");
	СтрокаРаздела.НаименованиеСтраницы = "ЗакрытьПериод";
	СтрокаРаздела.Доступность          = ОпределитьДоступностьСтраницы(ТаблицаДоступностиСтраниц, "ЗакрытьПериод", СтруктураДоступности);
	СтрокаРаздела.ТекущаяСтраница  = ?(СтрокаРаздела.Доступность, 1, 2);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкуДоступностиСтраницМастера()
	
	НоваяСтрока = ТаблицаДоступностиСтраниц.Добавить();
	НоваяСтрока.Наименование               = "ОсновнаяНастройка";
	НоваяСтрока.ЭтоНовый                   = 0;
	НоваяСтрока.ЗаполненыОсновныеПараметры = 0;
	НоваяСтрока.ПроцессЗапущен             = 0;
	НоваяСтрока.ИспользуетсяВМастере       = 2;
	
	НоваяСтрока = ТаблицаДоступностиСтраниц.Добавить();
	НоваяСтрока.Наименование               = "КурсыВалют";
	НоваяСтрока.ЭтоНовый                   = 0;
	НоваяСтрока.ЗаполненыОсновныеПараметры = 0;
	НоваяСтрока.ПроцессЗапущен             = 0;
	НоваяСтрока.ИспользуетсяВМастере       = 2;
	
	НоваяСтрока = ТаблицаДоступностиСтраниц.Добавить();
	НоваяСтрока.Наименование               = "НастройкаПроцесса";
	НоваяСтрока.ЭтоНовый                   = 1;
	НоваяСтрока.ЗаполненыОсновныеПараметры = 0;
	НоваяСтрока.ПроцессЗапущен             = 0;
	НоваяСтрока.ИспользуетсяВМастере       = 2;
		
	НоваяСтрока = ТаблицаДоступностиСтраниц.Добавить();
	НоваяСтрока.Наименование               = "ВыверкаОтчетов";
	НоваяСтрока.ЭтоНовый                   = 1;
	НоваяСтрока.ЗаполненыОсновныеПараметры = 2;
	НоваяСтрока.ПроцессЗапущен             = 0;
	НоваяСтрока.ИспользуетсяВМастере       = 2;
		
	НоваяСтрока = ТаблицаДоступностиСтраниц.Добавить();
	НоваяСтрока.Наименование               = "ЗакрытьПериод";
	НоваяСтрока.ЭтоНовый                   = 1;
	НоваяСтрока.ЗаполненыОсновныеПараметры = 0;
	НоваяСтрока.ПроцессЗапущен             = 0;
	НоваяСтрока.ИспользуетсяВМастере       = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость(ПроверятьПроцесс = Истина)
	
	Элементы.ГруппаПроцессНедоступен.Видимость = Ложь;
	
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ПроверитьШаблонЗаполнен(Объект.ВерсияОрганизационнойСтруктуры,РасширеннаяНастройка);
	
	Если  НЕ Объект.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП И Объект.ПериодСценария<>Объект.ПериодСценарияОкончание И РасширеннаяНастройка Тогда
		РасширеннаяНастройка = Ложь;
		Элементы.ГруппаПроцессНедоступен.Видимость = Истина;
		Элементы.Группа_УправлениеХодомПроцессаМатрица.Доступность =Ложь;	
	КонецЕсли;	
		
	флЕстьШаблонСверкиВГО = ЗначениеЗаполнено(Объект.ВерсияОрганизационнойСтруктуры) И ЗначениеЗаполнено(Объект.ВерсияОрганизационнойСтруктуры.ШаблонСверкиВГО);
	Элементы.ГруппаДатыСверкиВГО.Видимость = флЕстьШаблонСверкиВГО;
	
	Элементы.Группа_УправлениеХодомПроцессаТаблица.Видимость 	= 	РасширеннаяНастройка;	
	Элементы.Группа_УправлениеХодомПроцессаДиаграмма.Видимость	= 	РасширеннаяНастройка;
	Если НЕ РасширеннаяНастройка Тогда
		Элементы.ЗапуститьПроцесс1.Доступность	= Ложь;
		Элементы.УправлениеПроцессом_ПрекратитьПроцесс1.Доступность	= Ложь;
	Иначе
		// Не изменяем доступность команд старта процесса.
	КонецЕсли;
		
	Если РасширеннаяНастройка И ПроверятьПроцесс Тогда
		ШаблонПроцесса = Неопределено;
		РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(Объект.ВерсияОрганизационнойСтруктуры,ШаблонПроцесса);
		ПроцессЗапущен = Ложь;
		Если НЕ Объект.Ссылка.Пустая() Тогда
			РасширениеБизнесЛогикиУХ.УправлениеПериодом_ПроцессЗапущен(Объект.Ссылка, ПроцессЗапущен);
		Иначе
			ПроцессЗапущен = Ложь;
		КонецЕсли;
		Если ПроцессЗапущен Тогда
			Элементы.ДатаНачалаПроцесса.Доступность = Ложь;
			Элементы.ЗапуститьПроцесс1.Доступность						 = Ложь;
			Элементы.УправлениеПроцессом_ПрекратитьПроцесс1.Доступность	 = Истина;
		Иначе	
			Элементы.ДатаНачалаПроцесса.Доступность = Истина;
			Элементы.ЗапуститьПроцесс1.Доступность						 = Истина;
			Элементы.УправлениеПроцессом_ПрекратитьПроцесс1.Доступность	 = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОткрытьВидыОтчетовДляУстановкиЛимитов.Видимость = Объект.УстанавливатьЛимиты;
	Элементы.ГруппаМатрицаЛимитов.Видимость = Объект.УстанавливатьЛимиты;
	Элементы.ДатаНачалаПроцесса.Видимость = Объект.ВерсияОрганизационнойСтруктуры.ИспользоватьПроцесс;
	
	РежимСкользящегоПлана = Объект.Сценарий.РежимПланирования = Перечисления.РежимыПланирования.СкользящееПланирование;
	
	Элементы.Группа_УправлениеДаннымиСтартПроцесса.Видимость = Не РежимСкользящегоПлана;
	Элементы.Группа_УправлениеХодомПроцессаТаблица.Видимость = Не РежимСкользящегоПлана;
	Элементы.Группа_УправлениеХодомПроцессаДиаграмма.Видимость = Не РежимСкользящегоПлана;
	Элементы.Группа_УправлениеХодомПроцессаМатрица.Видимость = Не РежимСкользящегоПлана;
	Элементы.ГруппаМатрицаЛимитов.Видимость = Не РежимСкользящегоПлана;
	Элементы.Группа_ЗакрытиеПериода.Видимость = Не РежимСкользящегоПлана;
	
	УстановитьДоступностьПериодаРегламента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьДоступностьКнопокПеремещения();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОглавлениеПриАктивизацииСтроки(Элемент)
	
	Если ЗаписьВФорме = Истина тогда
		ЗаписьВФорме = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Оглавление.ТекущаяСтрока) = Тип("Число") Тогда
		ТекущиеДанные = Оглавление.НайтиПоИдентификатору(Элементы.Оглавление.ТекущаяСтрока);
		Если НЕ ПустаяСтрока(ТекущиеДанные.НаименованиеСтраницы) И ТекущиеДанные.Доступность Тогда
			
			Если Элементы.ОсновнаяПанель.ТекущаяСтраница <> Элементы[ТекущиеДанные.НаименованиеСтраницы] Тогда // возврат при отмене записи объекта	
				
				Если ТребуетсяПерезаписьФормы() Тогда
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НаименованиеСтраницы", ТекущиеДанные.НаименованиеСтраницы);
					ТекстВопроса = НСтр("ru = 'Для продолжения нужно сохранить объект. Сохранить?'");
					Режим = РежимДиалогаВопрос.ОКОтмена;
					Оповещение = Новый ОписаниеОповещения("ПереключениеСтраницыИзОглавленияПерезапись_Завершение", ЭтаФорма, СтруктураПараметров);
					ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
					Возврат;		
				КонецЕсли;
				
				Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы[ТекущиеДанные.НаименованиеСтраницы];
				ИзменитьТекущуюСтраницуВОглавлении(ТекущиеДанные.НаименованиеСтраницы);
				УстановитьДоступностьКнопокПеремещения();
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Нет выделенной строки.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеСтраницыИзОглавленияПерезапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если НЕ ЗаписатьОбъектВФорме() Тогда
			ЗаполнитьДеревоСтраниц();
			ТекущаяСтраницаИмя = Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			ИзменитьТекущуюСтраницуВОглавлении(ТекущаяСтраницаИмя);
			Возврат;						// Запись не удалась.
		Иначе
			ЗаполнитьДеревоСтраниц();
		КонецЕсли;
	Иначе
		ТекущаяСтраницаИмя = Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		ИзменитьТекущуюСтраницуВОглавлении(ТекущаяСтраницаИмя);
		Возврат;				// Пользователь отказался от смены страниц и перезаписи.
	КонецЕсли;
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы[ДополнительныеПараметры.НаименованиеСтраницы];
	ИзменитьТекущуюСтраницуВОглавлении(ДополнительныеПараметры.НаименованиеСтраницы);
	УстановитьДоступностьКнопокПеремещения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПериодаРегламента()
	
	ПериодичностьЗаполнена = НЕ Объект.ТекущаяПериодичность.Пустая();
	
	Элементы.ПериодСценария.Доступность = ПериодичностьЗаполнена;
	Элементы.ПериодСценарияОкончание.Доступность = ПериодичностьЗаполнена;
	Элементы.ИзменитьПериод.Доступность = ПериодичностьЗаполнена;
	Элементы.ВерсияОрганизационнойСтруктуры.Доступность = ПериодичностьЗаполнена;
	
	Элементы.ОтчетОрганизационнаяСтруктура.Видимость = НЕ Объект.ВерсияОрганизационнойСтруктуры.Пустая();
	
КонецПроцедуры

#КонецОбласти

#Область ОтображениеМастера

&НаКлиенте
Процедура УстановитьДоступностьКнопокПеремещения()
	
	ТекСтраницаПанели = Элементы.ОсновнаяПанель.ТекущаяСтраница;	
	Если ТекСтраницаПанели = Элементы.ОсновнаяНастройка Тогда
		
		Элементы.ФормаНазад.Доступность  = Ложь;
		Элементы.ФормаВперед.Доступность = Истина;
		
	ИначеЕсли ТекСтраницаПанели = Элементы.ВыверкаОтчетов И Объект.ЗапускатьПроцесс Тогда

		Элементы.ФормаНазад.Доступность  = Истина;
		Элементы.ФормаВперед.Доступность = Ложь;

	Иначе

		ТекСтрока = ТаблицаДоступностиСтраниц.НайтиСтроки(Новый Структура("Наименование", ТекСтраницаПанели.Имя));
		
		Если (ТекСтрока.Количество() = 0) ИЛИ НЕ ТекСтрока[0].ИспользуетсяВМастере Тогда
			
			Элементы.ФормаНазад.Доступность  = Ложь;
			Элементы.ФормаВперед.Доступность = Ложь;
			
		ИначеЕсли (ПолучитьСледующуюСтраницуОглавления(ТекСтраницаПанели.Имя) = Неопределено) Тогда	
			
			Элементы.ФормаНазад.Доступность  = Истина;
			Элементы.ФормаВперед.Доступность = Ложь;
						
		Иначе
			
			Элементы.ФормаНазад.Доступность  = Истина;
			Элементы.ФормаВперед.Доступность = Истина;
			
		КонецЕсли;
		
		Если ТекСтраницаПанели = Элементы.КурсыВалют Тогда			
			
			Если ТабличноеПолеРедактированияКурсов.Количество() = 0 Тогда
				РежимРедактированияКурсовВалют = Истина;
				ИзменитьРежимРедактированияКурсов();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

// Определяет требуют ли записи изменения на форме.
&НаКлиенте
Функция ТребуетсяПерезаписьФормы()
	РезультатФункции = Ложь;
	ЭтоСтраницаОсновнаяНастройка = (Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяНастройка);
	ЭтоСтраницаКурсыВалют = (Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.КурсыВалют); 
	ЕстьИзмененияВФорме = (НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность);
	РезультатФункции = (ЭтоСтраницаОсновнаяНастройка ИЛИ ЭтоСтраницаКурсыВалют) И (ЕстьИзмененияВФорме);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ЗаписатьОбъектВФорме()
	
	ЗаписьВФорме = Истина;
	
	Попытка
		РезультатЗаписи = Записать();
		ЗаписьВФорме = Ложь;
		Возврат РезультатЗаписи;
	Исключение
		ЗаписьВФорме = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСледующуюСтраницуОглавления(ИмяТекущейСтраницы)

	ТекСтрока = Оглавление.НайтиСтроки(Новый Структура("НаименованиеСтраницы", ИмяТекущейСтраницы));
	Если ТекСтрока.Количество() <> 0 Тогда
		Для Инд = Оглавление.Индекс(ТекСтрока[0]) + 1 По Оглавление.Количество() - 1 Цикл
			Если Оглавление[Инд].Доступность Тогда
				Возврат Оглавление[Инд].НаименованиеСтраницы;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция ПолучитьПредыдущуюСтраницуОглавления(ИмяТекущейСтраницы)
	ТекСтрока = Оглавление.НайтиСтроки(Новый Структура("НаименованиеСтраницы", ИмяТекущейСтраницы));
	Если ТекСтрока.Количество() <> 0 Тогда
		ИндексТекущейСтраницы = Оглавление.Индекс(ТекСтрока[0]);
		Для Инд = 1 По Оглавление.Индекс(ТекСтрока[0]) Цикл
			Если Оглавление[ИндексТекущейСтраницы - Инд].Доступность Тогда
				Возврат Оглавление[ИндексТекущейСтраницы - Инд].НаименованиеСтраницы;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область РасчетКурсов

&НаКлиенте
Процедура ИзменитьРежимРедактированияКурсов()
	
	Если РежимРедактированияКурсовВалют Тогда
		
		Элементы.ОтображениеКурсовВалют.ТекущаяСтраница = Элементы.РедактированиеКурсов;
		
	ИначеЕсли КурсыИзменены Тогда
		
		Ответ = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ИзменитьРежимРедактированияКурсовЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Курсы валют были изменены. Сохранить?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		Элементы.ОтображениеКурсовВалют.ТекущаяСтраница = Элементы.ПросмотрКурсов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРедактированияКурсовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    ИзменитьРежимРедактированияКурсовФрагмент(Ответ);
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРедактированияКурсовФрагмент(Знач Ответ)
    
    Если Ответ=КодВозвратаДиалога.Да Тогда
		
		СохранитьЗначенияКурсов();
        Элементы.ОтображениеКурсовВалют.ТекущаяСтраница = Элементы.ПросмотрКурсов;
		
    ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ИнициализироватьТаблицуИзмененийКурсов();
        Элементы.ОтображениеКурсовВалют.ТекущаяСтраница = Элементы.ПросмотрКурсов;
		
    Иначе
		
		РежимРедактированияКурсовВалют = Истина;
		
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуИзмененийКурсов()
	
	ТабличноеПолеРедактированияКурсов.Очистить();
	КурсыИзменены = Ложь;
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПериодическиеКурсы.Валюта,
	|	ПериодическиеКурсы.ПериодКурса,
	|	ПериодическиеКурсы.СреднийКурсЗаПериод,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсы.КурсНаНачалоПериода,
	|	ПериодическиеКурсы.КурсНаКонецПериода,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсы.Кратность,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодЦБ,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериодЦБ
	|ИЗ
	|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
	|ГДЕ
	|	ПериодическиеКурсы.Сценарий = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий",		Объект.Сценарий);
	
	
	Запрос.Текст=Запрос.Текст+"
	|	И ПериодическиеКурсы.ПериодКурса.Периодичность = &Периодичность
	|	И ПериодическиеКурсы.ПериодКурса.ДатаНачала >= &ДатаНачала
	|	И ПериодическиеКурсы.ПериодКурса.ДатаОкончания <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("Периодичность",	Объект.ПериодСценария.Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала",		Объект.ПериодСценария.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	Объект.ПериодСценарияОкончание.ДатаОкончания);
	
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = ТабличноеПолеРедактированияКурсов.Добавить();
		НоваяСтрока.Валюта    	= Результат.Валюта;
		НоваяСтрока.Кратность 	= Результат.Кратность;
		НоваяСтрока.ПериодКурса	= Результат.ПериодКурса;
		
		НоваяСтрока.СреднийКурсЗаПериод_ИсходноеЗначение = Результат.СреднийКурсЗаПериод;
		НоваяСтрока.СреднийКурсЗаПериод_ТекущееЗначение  = Результат.СреднийКурсЗаПериод;
		НоваяСтрока.СреднийКурсЗаПериод_АбсИзм           = 0;
		НоваяСтрока.СреднийКурсЗаПериод_ОтнИзм           = 0;
		
		НоваяСтрока.СреднийКурсЗаПериодМСФО_ИсходноеЗначение = Результат.СреднийКурсЗаПериодМСФО;
		НоваяСтрока.СреднийКурсЗаПериодМСФО_ТекущееЗначение  = Результат.СреднийКурсЗаПериодМСФО;
		НоваяСтрока.СреднийКурсЗаПериодМСФО_АбсИзм           = 0;
		НоваяСтрока.СреднийКурсЗаПериодМСФО_ОтнИзм           = 0;
		
		НоваяСтрока.КурсНаНачалоПериода_ИсходноеЗначение = Результат.КурсНаНачалоПериода;
		НоваяСтрока.КурсНаНачалоПериода_ТекущееЗначение  = Результат.КурсНаНачалоПериода;
		НоваяСтрока.КурсНаНачалоПериода_АбсИзм           = 0;
		НоваяСтрока.КурсНаНачалоПериода_ОтнИзм           = 0;
		
		НоваяСтрока.КурсНаКонецПериода_ИсходноеЗначение = Результат.КурсНаКонецПериода;
		НоваяСтрока.КурсНаКонецПериода_ТекущееЗначение  = Результат.КурсНаКонецПериода;
		НоваяСтрока.КурсНаКонецПериода_АбсИзм           = 0;
		НоваяСтрока.КурсНаКонецПериода_ОтнИзм           = 0;
		
		НоваяСтрока.СреднийКурсЗаПредыдущийПериод_ИсходноеЗначение = Результат.СреднийКурсЗаПредыдущийПериод;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериод_ТекущееЗначение  = Результат.СреднийКурсЗаПредыдущийПериод;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериод_АбсИзм           = 0;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериод_ОтнИзм           = 0;
		
		НоваяСтрока.КурсНаКонецПредыдущегоПериода_ИсходноеЗначение = Результат.КурсНаКонецПредыдущегоПериода;
		НоваяСтрока.КурсНаКонецПредыдущегоПериода_ТекущееЗначение  = Результат.КурсНаКонецПредыдущегоПериода;
		НоваяСтрока.КурсНаКонецПредыдущегоПериода_АбсИзм           = 0;
		НоваяСтрока.КурсНаКонецПредыдущегоПериода_ОтнИзм           = 0;
		
		НоваяСтрока.СреднийКурсЗаПериодЦБ_ИсходноеЗначение = Результат.СреднийКурсЗаПериодЦБ;
		НоваяСтрока.СреднийКурсЗаПериодЦБ_ТекущееЗначение  = Результат.СреднийКурсЗаПериодЦБ;
		НоваяСтрока.СреднийКурсЗаПериодЦБ_АбсИзм           = 0;
		НоваяСтрока.СреднийКурсЗаПериодЦБ_ОтнИзм           = 0;

		НоваяСтрока.СреднийКурсЗаПредыдущийПериодЦБ_ИсходноеЗначение = Результат.СреднийКурсЗаПредыдущийПериодЦБ;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериодЦБ_ТекущееЗначение  = Результат.СреднийКурсЗаПредыдущийПериодЦБ;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериодЦБ_АбсИзм           = 0;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериодЦБ_ОтнИзм           = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуКурсов()
	
	МассивПериодов = ПолучитьПодчиненныеПериоды();
	
	Для Каждого СтрПериод Из МассивПериодов Цикл
		
		ТаблицаКурсов = ОбщегоНазначенияСерверУХ.ЗаполнитьПериодическиеКурсыВалют(СтрПериод.ПериодКурса, Объект.Сценарий, Объект.ПериодСценарияОкончание);
		
		Для Каждого Элемент ИЗ ТаблицаКурсов Цикл
			
			ТекСтроки = ТабличноеПолеРедактированияКурсов.НайтиСтроки(Новый Структура("Валюта,ПериодКурса", Элемент.Валюта, СтрПериод.ПериодКурса));
			
			Если ТекСтроки.Количество() = 0 Тогда
				
				ТекСтрока = ТабличноеПолеРедактированияКурсов.Добавить();
				ТекСтрока.Валюта    	= Элемент.Валюта;
				ТекСтрока.Кратность 	= Элемент.Кратность;
				Текстрока.ПериодКурса	= СтрПериод.ПериодКурса;
				
			Иначе
				
				ТекСтрока = ТекСтроки[0];
				ТекСтрока.Кратность 	= Элемент.Кратность;
				
			КонецЕсли;
						
			ТекСтрока.СреднийКурсЗаПериод_ТекущееЗначение = Элемент.СреднийКурсЗаПериод;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "СреднийКурсЗаПериод", "_ТекущееЗначение");
			
			ТекСтрока.СреднийКурсЗаПериодМСФО_ТекущееЗначение = Элемент.СреднийКурсЗаПериодМСФО;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "СреднийКурсЗаПериодМСФО", "_ТекущееЗначение");
			
			ТекСтрока.КурсНаНачалоПериода_ТекущееЗначение = Элемент.КурсНаНачалоПериода;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "КурсНаНачалоПериода", "_ТекущееЗначение");
			
			ТекСтрока.КурсНаКонецПериода_ТекущееЗначение = Элемент.КурсНаКонецПериода;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "КурсНаКонецПериода", "_ТекущееЗначение");
			
			ТекСтрока.КурсНаКонецПредыдущегоПериода_ТекущееЗначение = Элемент.КурсНаКонецПредыдущегоПериода;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "КурсНаКонецПредыдущегоПериода", "_ТекущееЗначение");
			
			ТекСтрока.СреднийКурсЗаПредыдущийПериод_ТекущееЗначение = Элемент.СреднийКурсЗаПредыдущийПериод;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "СреднийКурсЗаПредыдущийПериод", "_ТекущееЗначение");
			
			ТекСтрока.СреднийКурсЗаПериодЦБ_ТекущееЗначение = Элемент.СреднийКурсЗаПериодЦБ;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "СреднийКурсЗаПериодЦБ", "_ТекущееЗначение");
			
			ТекСтрока.СреднийКурсЗаПредыдущийПериодЦБ_ТекущееЗначение = Элемент.СреднийКурсЗаПредыдущийПериодЦБ;
			ПересчитатьИзменяемыеРеквизиты_Сервер(ТекСтрока, "СреднийКурсЗаПредыдущийПериодЦБ", "_ТекущееЗначение");
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныеПериоды()
	
	Возврат ПериодыУХ.ПолучитьПодчиненныеПериодыТаблица(Объект.ПериодСценария, Объект.ПериодСценарияОкончание);
		
КонецФункции

&НаКлиенте
Процедура ПересчитатьИзменяемыеРеквизиты(ТекущиеДанные, ИзмененныйРеквизит, ПолеИзмененногоРеквизита)
	
	Если ПолеИзмененногоРеквизита = "_ТекущееЗначение" Тогда
		ТекущиеДанные[ИзмененныйРеквизит + "_АбсИзм"] = ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"];
		ТекущиеДанные[ИзмененныйРеквизит + "_ОтнИзм"] = ?(ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] = 0 , 0,100 * (ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"])/ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"]);
	ИначеЕсли ПолеИзмененногоРеквизита = "_АбсИзм" Тогда
		ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] = ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] + ТекущиеДанные[ИзмененныйРеквизит + "_АбсИзм"];
		ТекущиеДанные[ИзмененныйРеквизит + "_ОтнИзм"] = ?(ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] = 0 , 0,100 * (ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"])/ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"]);
	ИначеЕсли ПолеИзмененногоРеквизита = "_ОтнИзм" Тогда
		ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] = ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] + ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] * ТекущиеДанные[ИзмененныйРеквизит + "_ОтнИзм"] /100;
		ТекущиеДанные[ИзмененныйРеквизит + "_АбсИзм"] = ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"];
	КонецЕсли;
	
	ТекущиеДанные[ИзмененныйРеквизит + "_Изменен"] = Истина;
	КурсыИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИзменяемыеРеквизиты_Сервер(ТекущиеДанные, ИзмененныйРеквизит, ПолеИзмененногоРеквизита)
	
	Если ПолеИзмененногоРеквизита = "_ТекущееЗначение" Тогда
		ТекущиеДанные[ИзмененныйРеквизит + "_АбсИзм"] = ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"];
		ТекущиеДанные[ИзмененныйРеквизит + "_ОтнИзм"] = ?(ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] = 0 , 0,100 * (ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"])/ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"]);
	ИначеЕсли ПолеИзмененногоРеквизита = "_АбсИзм" Тогда
		ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] = ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] + ТекущиеДанные[ИзмененныйРеквизит + "_АбсИзм"];
		ТекущиеДанные[ИзмененныйРеквизит + "_ОтнИзм"] = ?(ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] = 0 , 0,100 * (ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"])/ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"]);
	ИначеЕсли ПолеИзмененногоРеквизита = "_ОтнИзм" Тогда
		ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] = ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] + ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"] * ТекущиеДанные[ИзмененныйРеквизит + "_ОтнИзм"] /100;
		ТекущиеДанные[ИзмененныйРеквизит + "_АбсИзм"] = ТекущиеДанные[ИзмененныйРеквизит + "_ТекущееЗначение"] - ТекущиеДанные[ИзмененныйРеквизит + "_ИсходноеЗначение"];
	КонецЕсли;
	
	ТекущиеДанные[ИзмененныйРеквизит + "_Изменен"] = Истина;
	КурсыИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененоТекущееЗначение(Элемент)
	
	ИмяКолонки = Элементы.ТаблицаРедактированияКурсов.ТекущийЭлемент.Имя;
	ПозицияПодчеркивание = СтрНайти(ИмяКолонки, "_");
	ИзмененныйРеквизит   = СтрЗаменить(Лев(ИмяКолонки, ПозицияПодчеркивание - 1), "ТаблицаРедактированияКурсов","");
	ПолеИзмененногоРеквизита = "_ТекущееЗначение";
	ТекущиеДанные = ТабличноеПолеРедактированияКурсов.НайтиПоИдентификатору(Элементы.ТаблицаРедактированияКурсов.ТекущаяСтрока);
	ПересчитатьИзменяемыеРеквизиты(ТекущиеДанные, ИзмененныйРеквизит, ПолеИзмененногоРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура АбсолютноеИзменение(Элемент)
	
	ИмяКолонки = Элементы.ТаблицаРедактированияКурсов.ТекущийЭлемент.Имя;
	ПозицияПодчеркивание = СтрНайти(ИмяКолонки, "_");
	ИзмененныйРеквизит   = СтрЗаменить(Лев(ИмяКолонки, ПозицияПодчеркивание - 1), "ТаблицаРедактированияКурсов","");
	ПолеИзмененногоРеквизита = "_АбсИзм";
	ТекущиеДанные = ТабличноеПолеРедактированияКурсов.НайтиПоИдентификатору(Элементы.ТаблицаРедактированияКурсов.ТекущаяСтрока);
	ПересчитатьИзменяемыеРеквизиты(ТекущиеДанные, ИзмененныйРеквизит, ПолеИзмененногоРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтносительноеИзменение(Элемент)
	
	ИмяКолонки = Элементы.ТаблицаРедактированияКурсов.ТекущийЭлемент.Имя;
	ПозицияПодчеркивание = СтрНайти(ИмяКолонки, "_");
	ИзмененныйРеквизит   = СтрЗаменить(Лев(ИмяКолонки, ПозицияПодчеркивание - 1), "ТаблицаРедактированияКурсов","");
	ПолеИзмененногоРеквизита = "_ОтнИзм";
	ТекущиеДанные = ТабличноеПолеРедактированияКурсов.НайтиПоИдентификатору(Элементы.ТаблицаРедактированияКурсов.ТекущаяСтрока);
	ПересчитатьИзменяемыеРеквизиты(ТекущиеДанные, ИзмененныйРеквизит, ПолеИзмененногоРеквизита);
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗначенияКурсов()
	
	Для Каждого Элемент Из ТабличноеПолеРедактированияКурсов Цикл
		
		НаборЗаписей=РегистрыСведений.ПериодическиеКурсы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Объект.Сценарий);
		НаборЗаписей.Отбор.Валюта.Установить(Элемент.Валюта);
		НаборЗаписей.Отбор.ПериодКурса.Установить(Элемент.ПериодКурса);
		
		НоваяСтрока=НаборЗаписей.Добавить();
		
		НоваяСтрока.Валюта		= Элемент.Валюта;
		НоваяСтрока.ПериодКурса	= Элемент.ПериодКурса;
		НоваяСтрока.Сценарий	= Объект.Сценарий;
		НоваяСтрока.Кратность	= Элемент.Кратность;
	
		НоваяСтрока.СреднийКурсЗаПредыдущийПериод 	= Элемент.СреднийКурсЗаПредыдущийПериод_ТекущееЗначение;
		НоваяСтрока.КурсНаКонецПредыдущегоПериода 	= Элемент.КурсНаКонецПредыдущегоПериода_ТекущееЗначение;
		НоваяСтрока.СреднийКурсЗаПериод     		= Элемент.СреднийКурсЗаПериод_ТекущееЗначение;
		НоваяСтрока.СреднийКурсЗаПериодМСФО 		= Элемент.СреднийКурсЗаПериодМСФО_ТекущееЗначение;
		НоваяСтрока.КурсНаНачалоПериода     		= Элемент.КурсНаНачалоПериода_ТекущееЗначение;
		НоваяСтрока.КурсНаКонецПериода      		= Элемент.КурсНаКонецПериода_ТекущееЗначение;
		НоваяСтрока.СреднийКурсЗаПериодЦБ      		= Элемент.СреднийКурсЗаПериодЦБ_ТекущееЗначение;
		НоваяСтрока.СреднийКурсЗаПредыдущийПериодЦБ	= Элемент.СреднийКурсЗаПредыдущийПериодЦБ_ТекущееЗначение;
		
		Попытка
			
			НаборЗаписей.Записать(Истина);
						
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось сохранить курсы валют
			|%1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТаблицаИзмененныхКурсов=ПодготовитьТаблицуИзмененийКурсов();
	
	ПересчитатьПоКурсуПоИзменениям(ТаблицаИзмененныхКурсов);
	ИнициализироватьТаблицуИзмененийКурсов();
	
	КурсыИзменены = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуИзмененийКурсов()
	
	ТаблицаОтвета = Новый ТаблицаЗначений;
	ТаблицаОтвета.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаОтвета.Колонки.Добавить("ВидКурса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКурсов"));
	ТаблицаОтвета.Колонки.Добавить("Отношение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 12 ));
	ТаблицаОтвета.Колонки.Добавить("ПериодКурса", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	
	ТаблицаОтвета.Колонки.Добавить("Кратность", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
	ТаблицаОтвета.Колонки.Добавить("Курс", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
		
	Для Каждого Элемент Из ТабличноеПолеРедактированияКурсов Цикл
		
		Если Элемент.СреднийКурсЗаПериод_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.ПериодКурса=Элемент.ПериодКурса;
			НоваяСтрока.Валюта    = Элемент.Валюта;
			НоваяСтрока.ВидКурса  = Перечисления.ВидыКурсов.СреднийКурсЗаПериод;
			НоваяСтрока.Отношение = ВернутьОтношение(Элемент.СреднийКурсЗаПериод_ТекущееЗначение, Элемент.СреднийКурсЗаПериод_ИсходноеЗначение);
			
			НоваяСтрока.Кратность=Элемент.Кратность;
			НоваяСтрока.Курс=Элемент.СреднийКурсЗаПериод_ТекущееЗначение;
			
		КонецЕсли;
		
		Если Элемент.СреднийКурсЗаПериодМСФО_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.Валюта    = Элемент.Валюта;
			НоваяСтрока.ПериодКурса=Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  = Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО;
			НоваяСтрока.Отношение = ВернутьОтношение(Элемент.СреднийКурсЗаПериодМСФО_ТекущееЗначение, Элемент.СреднийКурсЗаПериодМСФО_ИсходноеЗначение);
			
			НоваяСтрока.Кратность=Элемент.Кратность;
			НоваяСтрока.Курс=Элемент.СреднийКурсЗаПериодМСФО_ТекущееЗначение;
	
		КонецЕсли;
		
		Если Элемент.КурсНаНачалоПериода_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.Валюта    = Элемент.Валюта;
			НоваяСтрока.ПериодКурса=Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  = Перечисления.ВидыКурсов.КурсНаНачалоПериода;
			НоваяСтрока.Отношение = ВернутьОтношение(Элемент.КурсНаНачалоПериода_ТекущееЗначение, Элемент.КурсНаНачалоПериода_ИсходноеЗначение);
			
			НоваяСтрока.Кратность=Элемент.Кратность;
			НоваяСтрока.Курс=Элемент.КурсНаНачалоПериода_ТекущееЗначение;
			
		КонецЕсли;
		
		Если Элемент.КурсНаКонецПериода_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.Валюта    = Элемент.Валюта;
			НоваяСтрока.ПериодКурса=Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  = Перечисления.ВидыКурсов.КурсНаКонецПериода;
			НоваяСтрока.Отношение = ВернутьОтношение(Элемент.КурсНаКонецПериода_ТекущееЗначение, Элемент.КурсНаКонецПериода_ИсходноеЗначение);
			
			НоваяСтрока.Кратность=Элемент.Кратность;
			НоваяСтрока.Курс=Элемент.КурсНаКонецПериода_ТекущееЗначение;
	
		КонецЕсли;
		
		Если Элемент.СреднийКурсЗаПредыдущийПериод_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.Валюта    = Элемент.Валюта;
			НоваяСтрока.ПериодКурса=Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  = Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод;
			НоваяСтрока.Отношение = ВернутьОтношение(Элемент.СреднийКурсЗаПредыдущийПериод_ТекущееЗначение, Элемент.СреднийКурсЗаПредыдущийПериод_ИсходноеЗначение);
			
			НоваяСтрока.Кратность=Элемент.Кратность;
			НоваяСтрока.Курс=Элемент.СреднийКурсЗаПредыдущийПериод_ТекущееЗначение;
			
		КонецЕсли;
		
		Если Элемент.КурсНаКонецПредыдущегоПериода_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.Валюта    = Элемент.Валюта;
			НоваяСтрока.ПериодКурса=Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  = Перечисления.ВидыКурсов.КурсНаКонецПредыдущегоПериода;
			НоваяСтрока.Отношение = ВернутьОтношение(Элемент.КурсНаКонецПредыдущегоПериода_ТекущееЗначение, Элемент.КурсНаКонецПредыдущегоПериода_ИсходноеЗначение);
			
			НоваяСтрока.Кратность=Элемент.Кратность;
			НоваяСтрока.Курс=Элемент.КурсНаКонецПредыдущегоПериода_ТекущееЗначение;
			
		КонецЕсли;
		
		Если Элемент.СреднийКурсЗаПериодЦБ_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			
			НоваяСтрока.Валюта    	= Элемент.Валюта;
			НоваяСтрока.ПериодКурса	= Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  	= Перечисления.ВидыКурсов.СреднийКурсЗаПериодЦБ;
			НоваяСтрока.Отношение 	= ВернутьОтношение(Элемент.СреднийКурсЗаПериодЦБ_ТекущееЗначение, Элемент.СреднийКурсЗаПериодЦБ_ИсходноеЗначение);
			
			НоваяСтрока.Кратность	= Элемент.Кратность;
			НоваяСтрока.Курс		= Элемент.СреднийКурсЗаПериодЦБ_ТекущееЗначение;
			
		КонецЕсли;
		
		Если Элемент.СреднийКурсЗаПредыдущийПериодЦБ_Изменен Тогда
			
			НоваяСтрока = ТаблицаОтвета.Добавить();
			
			НоваяСтрока.Валюта    	= Элемент.Валюта;
			НоваяСтрока.ПериодКурса	= Элемент.ПериодКурса;
			НоваяСтрока.ВидКурса  	= Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериодЦБ;
			НоваяСтрока.Отношение 	= ВернутьОтношение(Элемент.СреднийКурсЗаПредыдущийПериодЦБ_ТекущееЗначение, Элемент.СреднийКурсЗаПредыдущийПериодЦБ_ИсходноеЗначение);
			
			НоваяСтрока.Кратность	= Элемент.Кратность;
			НоваяСтрока.Курс 		= Элемент.СреднийКурсЗаПредыдущийПериодЦБ_ТекущееЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОтвета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьОтношение(ПервыйЭлемент, ВторойЭлемент)	
	Возврат ?(ВторойЭлемент = 0, 0, ПервыйЭлемент/ВторойЭлемент);	
КонецФункции

&НаСервере
Процедура ПересчитатьПоКурсуПоИзменениям(ТаблицаИзменений)	
	УправлениеОтчетамиУХ.ПересчитатьВалютныеПоказатели(Объект.Сценарий, ТаблицаИзменений);		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКурсовПросмотр_ОбновитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        РежимРедактированияКурсовВалют = Истина;
        ИзменитьРежимРедактированияКурсов();
        ОбновитьТаблицуКурсов();
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаКлиенте
Процедура ИзменитьТекущуюСтраницуВОглавлении(ИмяСтраницы)
	
	Строка = Оглавление.НайтиСтроки(Новый Структура("ТекущаяСтраница", 0));
	
	// Сбросим признак текущей страницы.
	Если Строка[0].Доступность Тогда
		Строка[0].ТекущаяСтраница = 1;
	Иначе
		Строка[0].ТекущаяСтраница = 2;
	КонецЕсли;
	
	Строка = Оглавление.НайтиСтроки(Новый Структура("НаименованиеСтраницы", ИмяСтраницы));
	Строка[0].ТекущаяСтраница = 0;
	
	Элементы.Оглавление.ТекущаяСтрока = Строка[0].ПолучитьИдентификатор();
	
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПроцесс_Сервер(ЕстьОшибкиНастройки = Ложь)
		
	//ПередЗаписью
	Объект.РасширеннаяНастройка = РасширеннаяНастройка;
		
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РезультатЗапуска = Документы.УправлениеПериодомСценария.ЗапуститьПроцесс(ТекущийОбъект, Истина, ЕстьОшибкиНастройки);
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	
	//ПослеЗаписиНаСервере	
	Если КурсыИзменены Тогда
		СохранитьЗначенияКурсов();
	КонецЕсли;

	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Процедура УстановитьДатуНачалаПроцесса()
	
	Объект.ДатаНачалаПроцесса = Объект.ПериодСценария.ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если  РезультатВопроса = КодВозвратаДиалога.Да Тогда
    	СтруктураПараметровФормы = Новый Структура;
    	СтруктураПараметровФормы.Вставить("Период", Объект.ПериодСценария);
    	СтруктураПараметровФормы.Вставить("Сценарий", Объект.Сценарий);
    	СтруктураПараметровФормы.Вставить("ВерсияОрганизационнойСтруктуры", Объект.ВерсияОрганизационнойСтруктуры);
        ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма.Форма_Управляемая", СтруктураПараметровФормы);
    КонецЕсли;	 
        
    ЗаполнитьДеревоСтраниц();

КонецПроцедуры

&НаКлиенте
Процедура РегламентОбработкиОтчетностиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.ВерсияОрганизационнойСтруктуры.Пустая() Тогда
		ОткрытьФорму("Справочник.ВерсииРегламентовПодготовкиОтчетности.ФормаОбъекта", Новый Структура("Ключ", Объект.ВерсияОрганизационнойСтруктуры), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВерсииЭкземпляровОтчета(Сценарий,ПериодСценария)
	
	УправлениеРабочимиПроцессамиУХ.УдалитьПромежуточныеВерсииЭкземпляровОтчета(Сценарий,ПериодСценария);
	
КонецПроцедуры // УдалитьВерсииЭкземпляровОтчета() 

&НаСервере
Функция ОстановитьУниверсальныйПроцесс(ОстанавливатьОбъектВход = Истина)
	РезультатФункции = Истина;
	Если ЗначениеЗаполнено(Объект.ЭкземплярПроцесса) Тогда
		тПроцессОстановлен = Ложь;
		РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОстановитьПроцесс(Объект.ЭкземплярПроцесса, тПроцессОстановлен, ОстанавливатьОбъектВход);
		Если тПроцессОстановлен Тогда
			Сообщить(НСтр("ru = 'Процесс остановлен'")); 
			ПроцессЗапущен = Ложь;
		Иначе	
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка остановки процесса'"));
		КонецЕсли;	
		РезультатФункции = тПроцессОстановлен;
	Иначе
		РезультатФункции = Ложь;		// Экземпляр не задан.
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ОстановитьУниверсальныйПроцесс()

&НаКлиенте
Процедура ТаблицаРедактированияКурсовПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеУтверждениеОтчетовФрагмент()
    
    

КонецПроцедуры

&НаСервере
Процедура ОткрытиеСледующегоПериодаСервер() 

	РабочийОбъект = РеквизитФормывЗначение("Объект");
	РабочийОбъект.ОткрытьСледующийПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаписатьДокумент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент()
	
	Если Объект.Сценарий=ПредопределенноеЗначение("Справочник.Сценарии.Факт") Тогда
		
		ТекстОшибки=ОбработатьСтатусПериодаФакт();
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			СтрокаШаблона = Нстр("ru = 'Не удалось изменить статус периода: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекстОшибки),,, СтатусСообщения.Важное);
			КонецЕсли;
			
			ЭтаФорма.Прочитать();
			
		Иначе
			
			ИзменитьОтображениеКнопкиЗакрытьОтчет();
			
		КонецЕсли;
		
	Иначе	
		
		Если Не Записать() Тогда
			
			Если Объект.ПериодЗакрыт тогда
				СтрокаОшибки = Нстр("ru = 'Не удалось закрыть период'");
			Иначе
				СтрокаОшибки = Нстр("ru = 'Не удалось открыть период'");
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаОшибки) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрокаОшибки);
			КонецЕсли;
			
			ЭтаФорма.Прочитать();
			
		Иначе
			
			ИзменитьОтображениеКнопкиЗакрытьОтчет();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьСтатусПериодаФакт()
				
	Попытка
		
		ДокументОбъект=РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Записать(?(Объект.ПериодЗакрыт,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.ОтменаПроведения));
		ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
		
		Возврат "";
		
	Исключение
		
		Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
		
КонецФункции // ЗакрытьПериодПоФакту()

&НаКлиенте
Процедура ИзменитьОтображениеКнопкиЗакрытьОтчет()
	
	Если Объект.ПериодЗакрыт Тогда
		Элементы.ЗакрытьПроцесс.Заголовок = НСтр("ru = 'Открыть период'");
		Элементы.ЗакрытьПроцесс.Картинка  = БиблиотекаКартинок.ОтменитьЗакрытиеПроцесса;
	Иначе
		Элементы.ЗакрытьПроцесс.Заголовок = НСтр("ru = 'Закрыть период'");
		Элементы.ЗакрытьПроцесс.Картинка  = БиблиотекаКартинок.ЗакрытьПроцесс;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВерсийДанныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
        УдалитьВерсииЭкземпляровОтчета(Объект.Сценарий, Объект.ПериодСценария);        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит = Истина;
	
	ОпределитьПериодичностьСценария();
	ПериодичностьСценарияПриИзмененииСервер();
	ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте();
	УстановитьВидимость(Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьПериодичностьСценария(ОбновлятьПериодичностьВход = Истина)	
		
	Сценарий = Объект.Сценарий;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
		
		МассивПериодичностей = Новый Массив;
		
		Для Каждого СтрокаПериоды Из РегламентыПериоды Цикл
			
			Если ЗначениеЗаполнено(СтрокаПериоды.Периодичность) И СтрокаПериоды.ДействуетС <= Объект.Дата тогда				
				МассивПериодичностей.Добавить(СтрокаПериоды.Периодичность);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПериодичностей.Количество() = 1 тогда
			Объект.ТекущаяПериодичность = МассивПериодичностей[0];
		ИначеЕсли ЗначениеЗаполнено(Объект.ТекущаяПериодичность) И РегламентыПериоды.Количество() > 0
			И (МассивПериодичностей.Найти(Объект.ТекущаяПериодичность) = неопределено) тогда
			
			Объект.ТекущаяПериодичность = Перечисления.Периодичность.ПустаяСсылка();
		КонецЕсли;
		
		Элементы.ПериодичностьСценария.ПараметрыВыбора = ПолучитьДоступныеЗначения(МассивПериодичностей);
				
	Иначе 
				
		Элементы.ПериодичностьСценария.ПараметрыВыбора = ПолучитьДоступныеЗначения();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВерсияОрганизационнойСтруктурыПриИзменении(Элемент)
		
	ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте();
			
КонецПроцедуры

&НаКлиенте
Процедура ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте()
		
	РасширеннаяНастройка = ПроверитьШаблонЗаполнен(Объект.ВерсияОрганизационнойСтруктуры);
	ЗаполнитьДеревоСтраниц();
	ИзмененКлючевойРеквизит = Истина;
	
	Если Объект.УстанавливатьЛимиты И Объект.ВидыОтчетовДляУстановкиЛимитов.Количество() = 0 Тогда
		ЗаполнитьВидыОтчетовДляУстановкиЛимитовПоШаблону();
	КонецЕсли;
	
	УстановитьВидимость();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьШаблонЗаполнен(ВерсияОрганизационнойСтруктуры)
	
	РасширеннаяНастройка = Ложь;
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ПроверитьШаблонЗаполнен(ВерсияОрганизационнойСтруктуры,РасширеннаяНастройка);
    Возврат  РасширеннаяНастройка;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПериодаПоПериодичности(Периодичность)
	
	МассивПараметровОтбора = Новый Массив();
	
	Если ЗначениеЗаполнено(Периодичность) тогда
		ПараметрОтбора = Новый ПараметрВыбора("Отбор.Периодичность", Периодичность);
		МассивПараметровОтбора.Добавить(ПараметрОтбора);
		ПараметрОтбора = Новый ПараметрВыбора("Отбор.Произвольный", Ложь);
		МассивПараметровОтбора.Добавить(ПараметрОтбора);
	КонецЕсли;
	
	ФиксМассивОтбора = Новый ФиксированныйМассив(МассивПараметровОтбора);
	Элементы.ПериодСценария.ПараметрыВыбора = ФиксМассивОтбора;
	
	МассивПараметровОтбора.Очистить();
	
	Если ЗначениеЗаполнено(Периодичность) тогда
		ПараметрОтбора = Новый ПараметрВыбора("Отбор.Периодичность", Периодичность);
		МассивПараметровОтбора.Добавить(ПараметрОтбора);
		ПараметрОтбора = Новый ПараметрВыбора("Отбор.Произвольный", Ложь);
		МассивПараметровОтбора.Добавить(ПараметрОтбора);
	КонецЕсли;
	
	ФиксМассивОтбора = Новый ФиксированныйМассив(МассивПараметровОтбора);
	Элементы.ПериодСценарияОкончание.ПараметрыВыбора = ФиксМассивОтбора;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеЗначения(МассивЗначений = неопределено, УстанавливатьПустойОтбор = Ложь)
	
	НовыйМассив = Новый Массив();
	
	Если МассивЗначений = неопределено тогда
		Возврат Новый ФиксированныйМассив(НовыйМассив);
	КонецЕсли;
	
	Если МассивЗначений.Количество() > 0 ИЛИ УстанавливатьПустойОтбор тогда
		
		МассивЗнченийПараметров = Новый ФиксированныйМассив(МассивЗначений);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
		НовыйМассив.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(НовыйМассив);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура РазблокироватьПериоды()
	
	тПериодыОрганизацииПолныйСрез = УправлениеОтчетамиУХ.ПолучитьАналитикиТекущегоГоризонта(Объект.Ссылка,Объект.ПериодСценария
	,Объект.ПериодСценарияОкончание,Объект.Сценарий,Объект.ВерсияОрганизационнойСтруктуры);	
	
	Для Каждого Стр Из тПериодыОрганизацииПолныйСрез Цикл	
		Стр.СтатусБлокировки = 0;	
	КонецЦикла;	
	
	НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарии.Установить(Объект.Сценарий);
	
	ТЗПериодов = тПериодыОрганизацииПолныйСрез.Скопировать();
	ТЗПериодов.Свернуть("Периоды");
	
	Для Каждого ПериодСценарияСтрока ИЗ ТЗПериодов Цикл
		
		НаборЗаписей.Отбор.Периоды.Установить(ПериодСценарияСтрока.Периоды);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(тПериодыОрганизацииПолныйСрез.Скопировать(Новый Структура("Периоды",ПериодСценарияСтрока.Периоды)));
		НаборЗаписей.Записать(Истина);		
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьДатуОкончанияСверкиВГО(ДатаНачалаСверки, ВерсияРегламента)
	Если НЕ ЗначениеЗаполнено(ДатаНачалаСверки) ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламента) Тогда
		Возврат '00010101000000';
	КонецЕсли;
	
	ШаблонСверки = ВерсияРегламента.ШаблонСверкиВГО;
	Если НЕ ЗначениеЗаполнено(ШаблонСверки) Тогда
		Возврат '00010101000000';
	КонецЕсли;
	
	Возврат ОбщегоНазначенияУХ.ДобавитьДень(ДатаНачалаСверки, ШаблонСверки.РегламентЗавершенияСверкиОрганизации);
КонецФункции

&НаКлиенте
Процедура ДатаНачалаСверкиВГОПриИзменении(Элемент)
	Объект.ДатаОкончанияСверкиВГО = ПолучитьДатуОкончанияСверкиВГО(Объект.ДатаНачалаСверкиВГО, Объект.ВерсияОрганизационнойСтруктуры);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПроцессом_Диаграмма(Команда)
	
	ПараметрыФормы = Новый Структура("ДокументУправленияПериодомСценария,РежимОткрытия,ФормироватьПриОткрытии", Объект.Ссылка,"ДиаграммаПроцессов",Истина);	
	РасширениеБизнесЛогикиУХКлиент.Открыть_УправлениеПроцессом_Диаграмма(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеПроцессом_Таблица(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияРегламента", Объект.ВерсияОрганизационнойСтруктуры);
	ПараметрыФормы.Вставить("ПериодОтчета", Объект.ПериодСценария);
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	РасширениеБизнесЛогикиУХКлиент.Открыть_УправлениеПроцессом_Таблица(ПараметрыФормы)

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьСценарияПриИзменении(Элемент)
	
	ПериодичностьСценарияПриИзмененииСервер();
	ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте();
	УстановитьВидимость(Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ПериодичностьСценарияПриИзмененииСервер()
			
	УстановитьОтборПериодаПоПериодичности(Объект.ТекущаяПериодичность);
	
	Если ЗначениеЗаполнено(Объект.Сценарий) тогда
				
		Если Объект.Сценарий.ПериодыРегламентов.Количество() > 0 тогда
			
			ДействуетС = Объект.ПериодСценария.ДатаНачала;
			ДействуетПо = ?(ЗначениеЗаполнено(Объект.ПериодСценарияОкончание.ДатаОкончания), Объект.ПериодСценарияОкончание.ДатаОкончания, ТекущаяДата());
			
			Если Объект.Сценарий.РежимПланирования = Перечисления.РежимыПланирования.СкользящееПланирование тогда
				
				ЗапросПоРегламентам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СценарииПериодыРегламентов.Ссылка КАК Ссылка,
				|	СценарииПериодыРегламентов.Периодичность КАК Периодичность,
				|	МАКСИМУМ(СценарииПериодыРегламентов.ДействуетС) КАК ДействуетС
				|ПОМЕСТИТЬ ВТАктуальнаяПериодичность
				|ИЗ
				|	Справочник.Сценарии.ПериодыРегламентов КАК СценарииПериодыРегламентов
				|ГДЕ
				|	СценарииПериодыРегламентов.Периодичность = &Периодичность
				|	И СценарииПериодыРегламентов.Ссылка = &Ссылка
				|	И СценарииПериодыРегламентов.Ссылка.ПометкаУдаления = ЛОЖЬ
				|	И СценарииПериодыРегламентов.ДействуетС <= &ДействуетС
				|
				|СГРУППИРОВАТЬ ПО
				|	СценарииПериодыРегламентов.Ссылка,
				|	СценарииПериодыРегламентов.Периодичность
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПериодыРегламентов.Регламент КАК Регламент
				|ПОМЕСТИТЬ ВТСценарииПериодыРегламентов
				|ИЗ
				|	ВТАктуальнаяПериодичность КАК АктуальнаяПериодичность
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сценарии.ПериодыРегламентов КАК ПериодыРегламентов
				|		ПО АктуальнаяПериодичность.Ссылка = ПериодыРегламентов.Ссылка
				|			И АктуальнаяПериодичность.Периодичность = ПериодыРегламентов.Периодичность
				|			И АктуальнаяПериодичность.ДействуетС = ПериодыРегламентов.ДействуетС
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ПериодыРегламентов.Регламент
				|ИЗ
				|	Справочник.Сценарии.ПериодыРегламентов КАК ПериодыРегламентов
				|ГДЕ
				|	ПериодыРегламентов.Ссылка = &Ссылка
				|	И ПериодыРегламентов.Периодичность = &Периодичность
				|	И ПериодыРегламентов.ДействуетС > &ДействуетС
				|	И ПериодыРегламентов.ДействуетС <= &ДействуетПо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СценарииПериодыРегламентов.Регламент КАК Регламент
				|ИЗ
				|	ВТСценарииПериодыРегламентов КАК СценарииПериодыРегламентов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
				|		ПО СценарииПериодыРегламентов.Регламент = ВерсииРегламентовПодготовкиОтчетности.Ссылка
				|			И (ВерсииРегламентовПодготовкиОтчетности.ИспользоватьПроцесс = ЛОЖЬ)
				|			И (ВерсииРегламентовПодготовкиОтчетности.ПометкаУдаления = ЛОЖЬ)");
				
				ЗапросПоРегламентам.УстановитьПараметр("Периодичность", Объект.ТекущаяПериодичность);
				ЗапросПоРегламентам.УстановитьПараметр("Ссылка", Объект.Сценарий);
				ЗапросПоРегламентам.УстановитьПараметр("ДействуетС", ДействуетС);
				ЗапросПоРегламентам.УстановитьПараметр("ДействуетПо", ДействуетПо);
				
				МассивРегламентов = ЗапросПоРегламентам.Выполнить().Выгрузить().ВыгрузитьКолонку("Регламент");
								
			Иначе
				
				ЗапросПоРегламентам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СценарииПериодыРегламентов.Ссылка КАК Ссылка,
				|	СценарииПериодыРегламентов.Периодичность КАК Периодичность,
				|	МАКСИМУМ(СценарииПериодыРегламентов.ДействуетС) КАК ДействуетС
				|ПОМЕСТИТЬ ВТАктуальнаяПериодичность
				|ИЗ
				|	Справочник.Сценарии.ПериодыРегламентов КАК СценарииПериодыРегламентов
				|ГДЕ
				|	СценарииПериодыРегламентов.Периодичность = &Периодичность
				|	И СценарииПериодыРегламентов.Ссылка = &Ссылка
				|	И СценарииПериодыРегламентов.Ссылка.ПометкаУдаления = ЛОЖЬ
				|	И СценарииПериодыРегламентов.ДействуетС <= &ДействуетС
				|
				|СГРУППИРОВАТЬ ПО
				|	СценарииПериодыРегламентов.Ссылка,
				|	СценарииПериодыРегламентов.Периодичность
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПериодыРегламентов.Регламент КАК Регламент
				|ИЗ
				|	ВТАктуальнаяПериодичность КАК АктуальнаяПериодичность
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сценарии.ПериодыРегламентов КАК ПериодыРегламентов
				|		ПО АктуальнаяПериодичность.Ссылка = ПериодыРегламентов.Ссылка
				|			И АктуальнаяПериодичность.Периодичность = ПериодыРегламентов.Периодичность
				|			И АктуальнаяПериодичность.ДействуетС = ПериодыРегламентов.ДействуетС
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ПериодыРегламентов.Регламент
				|ИЗ
				|	Справочник.Сценарии.ПериодыРегламентов КАК ПериодыРегламентов
				|ГДЕ
				|	ПериодыРегламентов.Ссылка = &Ссылка
				|	И ПериодыРегламентов.Периодичность = &Периодичность
				|	И ПериодыРегламентов.ДействуетС > &ДействуетС
				|	И ПериодыРегламентов.ДействуетС <= &ДействуетПо");
				
				ЗапросПоРегламентам.УстановитьПараметр("Периодичность", Объект.ТекущаяПериодичность);
				ЗапросПоРегламентам.УстановитьПараметр("Ссылка", Объект.Сценарий);
				ЗапросПоРегламентам.УстановитьПараметр("ДействуетС", ДействуетС);
				ЗапросПоРегламентам.УстановитьПараметр("ДействуетПо", ДействуетПо);
				
				МассивРегламентов = ЗапросПоРегламентам.Выполнить().Выгрузить().ВыгрузитьКолонку("Регламент");
								
			КонецЕсли;
						
			Если ЗначениеЗаполнено(Объект.ТекущаяПериодичность) И ЗначениеЗаполнено(Объект.ПериодСценария) 
				И ЗначениеЗаполнено(Объект.ПериодСценарияОкончание) И МассивРегламентов.Количество() = 1 тогда
				
				Объект.ВерсияОрганизационнойСтруктуры = МассивРегламентов[0];
			ИначеЕсли ЗначениеЗаполнено(Объект.ВерсияОрганизационнойСтруктуры)
				И (МассивРегламентов.Найти(Объект.ВерсияОрганизационнойСтруктуры) = неопределено) тогда
				
				Объект.ВерсияОрганизационнойСтруктуры = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(Объект.ПериодСценария) ИЛИ ЗначениеЗаполнено(Объект.ПериодСценарияОкончание)) 
				И ((Объект.ТекущаяПериодичность <> Объект.ПериодСценария.Периодичность)
				ИЛИ (Объект.ТекущаяПериодичность <> Объект.ПериодСценарияОкончание.Периодичность)) Тогда
				
				Объект.ВерсияОрганизационнойСтруктуры = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
			КонецЕсли;
			
			Элементы.ВерсияОрганизационнойСтруктуры.ПараметрыВыбора = ПолучитьДоступныеЗначения(МассивРегламентов, Истина);
						
		Иначе
			
			Если Объект.Сценарий.РежимПланирования = Перечисления.РежимыПланирования.СкользящееПланирование тогда
				
				ЗапросПоРегламентам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ВерсииРегламентовПодготовкиОтчетности.Ссылка КАК Регламент
				|ИЗ
				|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
				|ГДЕ
				|	ВерсииРегламентовПодготовкиОтчетности.ИспользоватьПроцесс = ЛОЖЬ
				|	И ВерсииРегламентовПодготовкиОтчетности.ПометкаУдаления = ЛОЖЬ");
								
				МассивРегламентов = ЗапросПоРегламентам.Выполнить().Выгрузить().ВыгрузитьКолонку("Регламент");
				
				Если МассивРегламентов.Количество() = 1 тогда
					Объект.ВерсияОрганизационнойСтруктуры = МассивРегламентов[0];
				ИначеЕсли ЗначениеЗаполнено(Объект.ВерсияОрганизационнойСтруктуры)
					И (МассивРегламентов.Найти(Объект.ВерсияОрганизационнойСтруктуры) = неопределено) тогда
					
					Объект.ВерсияОрганизационнойСтруктуры = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
				КонецЕсли;
				
				Элементы.ВерсияОрганизационнойСтруктуры.ПараметрыВыбора = ПолучитьДоступныеЗначения(МассивРегламентов, Истина);
				
			Иначе
				
	        	Элементы.ВерсияОрганизационнойСтруктуры.ПараметрыВыбора = ПолучитьДоступныеЗначения();
				
			КонецЕсли;
								
		КонецЕсли;
		
	Иначе
		
		ЗапросПоРегламентам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВерсииРегламентовПодготовкиОтчетности.Ссылка КАК Регламент
			|ИЗ
			|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
			|ГДЕ
			|	ВерсииРегламентовПодготовкиОтчетности.Периодичность <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
			|	И ВерсииРегламентовПодготовкиОтчетности.Периодичность = &Периодичность
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВерсииРегламентовПодготовкиОтчетности.Ссылка
			|ИЗ
			|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
			|ГДЕ
			|	ВерсииРегламентовПодготовкиОтчетности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
			|	И &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)");
		
		ЗапросПоРегламентам.УстановитьПараметр("Периодичность", Объект.ТекущаяПериодичность);
		
		МассивРегламентов = ЗапросПоРегламентам.Выполнить().Выгрузить().ВыгрузитьКолонку("Регламент");
		
		Если МассивРегламентов.Количество() = 1 тогда
			Объект.ВерсияОрганизационнойСтруктуры = МассивРегламентов[0];
		ИначеЕсли ЗначениеЗаполнено(Объект.ВерсияОрганизационнойСтруктуры)
			И (МассивРегламентов.Найти(Объект.ВерсияОрганизационнойСтруктуры) = неопределено) тогда
			
			Объект.ВерсияОрганизационнойСтруктуры = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		КонецЕсли;
		
		Элементы.ВерсияОрганизационнойСтруктуры.ПараметрыВыбора = ПолучитьДоступныеЗначения(МассивРегламентов, Истина);
				
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ПериодСценария) ИЛИ ЗначениеЗаполнено(Объект.ПериодСценарияОкончание)) 
		И ((Объект.ТекущаяПериодичность <> Объект.ПериодСценария.Периодичность)
		ИЛИ (Объект.ТекущаяПериодичность <> Объект.ПериодСценарияОкончание.Периодичность)) Тогда
		
		Объект.ПериодСценария 			= Справочники.Периоды.ПустаяСсылка();
		Объект.ПериодСценарияОкончание 	= Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
			
	УстановитьДоступностьПериодаРегламента();
		
КонецПроцедуры
	
&НаКлиенте
Процедура УстановкаЛимитовПриИзменении(Элемент)
	
	ЗаполнитьДеревоСтраниц();
	УстановкаЛимитовПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура УстановкаЛимитовПриИзмененииСервер()
	
	Если Объект.УстанавливатьЛимиты Тогда
		ЗаполнитьВидыОтчетовДляУстановкиЛимитовПоШаблону();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОтчетовДляУстановкиЛимитовПоШаблону()
	
	СвязанныйШаблонПроцесса = Неопределено;
	ЕстьСвязанныйШаблон = РегламентыВызовСервера.ОпределитьСвязанныйШаблон(Объект.ВерсияОрганизационнойСтруктуры, СвязанныйШаблонПроцесса);
	Если ЕстьСвязанныйШаблон Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК Справочник.ВидыОтчетов) КАК ВидОтчета
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка.Владелец.СвязанныйРегламент = &Регламент
		|	И ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента ССЫЛКА Справочник.ВидыОтчетов
		|	И ВЫРАЗИТЬ(ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК Справочник.ВидыОтчетов).МожетИспользоватьсяДляУстановкиЛимитов
		|	И НЕ ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка.ПометкаУдаления"
		);
		Запрос.УстановитьПараметр("Регламент", Объект.ВерсияОрганизационнойСтруктуры);
		
		ТаблицаВидовОтчетов = Запрос.Выполнить().Выгрузить();
		Объект.ВидыОтчетовДляУстановкиЛимитов.Загрузить(ТаблицаВидовОтчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыОтчетовДляУстановкиЛимитов(Команда)
	
	ПараметрыФормы = ДанныеВидовОтчетовДляУстановкиЛимитов();
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВидыОтчетовДляУстановкиЛимитовЗавершение", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Документ.УправлениеПериодомСценария.Форма.ФормаВидыОтчетовДляУстановкиЛимитов", ПараметрыФормы, ЭтотОбъект,УникальныйИдентификатор,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВидыОтчетовДляУстановкиЛимитовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ЗаполнитьВидыОтчетовДляУстановкиЛимитов(РезультатЗакрытия.АдресТаблицыВидовОтчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеВидовОтчетовДляУстановкиЛимитов()
	
	СвязанныйШаблонПроцесса = Неопределено;
	ЕстьСвязанныйШаблон = РегламентыВызовСервера.ОпределитьСвязанныйШаблон(Объект.ВерсияОрганизационнойСтруктуры, СвязанныйШаблонПроцесса);
	ГруппаВидовОтчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияОрганизационнойСтруктуры, "ВидОтчета");
	
	Таблица = Объект.ВидыОтчетовДляУстановкиЛимитов.Выгрузить();
	Адрес = ПоместитьВоВременноеХранилище(Таблица, Новый УникальныйИдентификатор);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресТаблицыВидовОтчетов", Адрес);
	Результат.Вставить("ТолькоПросмотр", ЕстьСвязанныйШаблон);
	Результат.Вставить("ЕстьСвязанныйШаблон", ЕстьСвязанныйШаблон);
	Результат.Вставить("ГруппаВидовОтчетов", ГруппаВидовОтчетов);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыОтчетовДляУстановкиЛимитов(АдресТаблицыВидовОтчетов)

	ТаблицаВидовОтчетов = ПолучитьИзВременногоХранилища(АдресТаблицыВидовОтчетов);
	Объект.ВидыОтчетовДляУстановкиЛимитов.Загрузить(ТаблицаВидовОтчетов);
	ЭтотОбъект.Модифицированность = Истина;
	УдалитьИзВременногоХранилища(АдресТаблицыВидовОтчетов);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		ВыбраннаяПериодичность = Объект.ТекущаяПериодичность;
		РезультатДатаНачала = РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания = РезультатВыбора.ДатаОкончания;
		
		Если ЗначениеЗаполнено(РезультатДатаНачала) И ЗначениеЗаполнено(РезультатДатаОкончания) Тогда
			
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			
			Объект.ПериодСценария = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			Объект.ПериодСценарияОкончание = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);						
			
			ИзмененКлючевойРеквизит = Истина;
			Модифицированность = Истина;
			
			ПериодичностьСценарияПриИзмененииСервер();
			ВерсияОрганизационнойСтруктурыПриИзмененииНаКлиенте();
		
		КонецЕсли;
				
	ИначеЕсли РезультатВыбора <> неопределено тогда
		
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
	ПериодСценария = Объект.ПериодСценария;
	ПериодСценарияОкончание = Объект.ПериодСценарияОкончание;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		
	Если ЗначениеЗаполнено(ПериодСценария) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодСценария, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодСценарияОкончание) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодСценарияОкончание, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры




