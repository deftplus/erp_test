
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДополнительныеСвойства, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеСвойства.ДляПроведения.Ссылка);
	
	Реквизиты = МСФОУХ.РеквизитыДокумента(Запрос, "ДатаОкончания, АлгоритмРСБУ", , Отказ);
	Реквизиты.Вставить("Период", КонецДня(Реквизиты.ДатаОкончания));
	ДополнительныеСвойства.ДляПроведения.Вставить("Реквизиты", Реквизиты);
	
	Если Отказ Тогда
		Возврат ДополнительныеСвойства;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
	Запрос.УстановитьПараметр("Сценарий",		Реквизиты.Сценарий);	
	Запрос.УстановитьПараметр("Период",			КонецДня(Реквизиты.Период));	
	Запрос.УстановитьПараметр("ВидыУчета", 		ПредопределенноеЗначение("Перечисление.ВидыУчета.МСФО"));
	Запрос.УстановитьПараметр("ВсеОрганизации", Ложь);
	Запрос.УстановитьПараметр("ПланСчетовМСФО", Реквизиты.ПланСчетовМСФО);
	Запрос.УстановитьПараметр("АлгоритмРСБУ", 	Реквизиты.АлгоритмРСБУ);

	НомераТаблиц = Новый Структура;
	ТекстЗапроса = Новый Массив;
	
	Если Реквизиты.АлгоритмРСБУ Тогда
		
		ТекстЗапроса.Добавить(ТекстЗапроса_СписокВНААлгоритмНСБУ(НомераТаблиц));		
		
		Запрос.УстановитьПараметр("ВсеВНА", Ложь); //Список ВНА определяется в предыдущем запросе
				
	Иначе 
		
		Запрос.УстановитьПараметр("ВсеВНА", Истина);//список ВНА определяется остатками стоимости
		Запрос.УстановитьПараметр("ВНА", 	Неопределено);// параметр не влияет на расчет 
		
	КонецЕсли;
	
	Отчеты.ПараметрыВНА.ЗаполнитьПараметрыЗапроса(Запрос, Реквизиты.Период, Реквизиты.Ссылка, Реквизиты.АлгоритмРСБУ); 
	ТекстЗапроса.Добавить(ТекстЗапроса_втНачислено(НомераТаблиц));	
	ТекстЗапроса.Добавить(ТекстЗапроса_ПараметрыВНА(НомераТаблиц, Реквизиты.АлгоритмРСБУ));	
	ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаВНА(НомераТаблиц));	
	ТекстЗапроса.Добавить(ТекстЗапроса_СтоимостьВНАМСФО(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаОшибок(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаПроводкиВНА(НомераТаблиц));
			
	Запрос.Текст = СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	ПроведениеСерверУХ.ДополнитьТаблицамиИзПакетаЗапросов(ДополнительныеСвойства.ТаблицыДляДвижений, Запрос, НомераТаблиц);
	
КонецФункции

Функция ТекстЗапроса_СписокВНААлгоритмНСБУ(НомераТаблиц)

	НомераТаблиц.Вставить("втСписокВНА", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втСтоимость.ВНА КАК ВНА,
	|	втСтоимость.ГруппаВНА КАК ГруппаВНА,
	|	втСтоимость.СуммаВВалютеУчетаОборот КАК СуммаВВалютеУчета
	|ПОМЕСТИТЬ втСписокВНА
	|ИЗ
	|	РегистрНакопления.СтоимостьВНАМСФО.Обороты(
	|			,
	|			&Период,
	|			,
	|			Сценарий = &Сценарий
	|				И Организация = &Организация
	|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|				И ГруппаВНА.НачислятьАмортизацию) КАК втСтоимость
	|ГДЕ
	|	втСтоимость.СуммаВВалютеУчетаОборот <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА,
	|	ГруппаВНА";

КонецФункции

Функция ТекстЗапроса_втНачислено(НомераТаблиц)
	
	//Если АлгоритмРСБУ - при изменении параметров ВНА в периоде амортизация начисляется изменением параметров
	НомераТаблиц.Вставить("втНачислено", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втСтоимость.ВНА КАК ВНА,
	|	втСтоимость.ГруппаВНА КАК ГруппаВНА,
	|	СУММА(втСтоимость.АмортизацияОборот) КАК Амортизация
	|ПОМЕСТИТЬ втНачислено
	|ИЗ
	|	РегистрНакопления.СтоимостьВНАМСФО.Обороты(
	|			НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),
	|			&Период,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И Организация = &Организация
	|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|				И ГруппаВНА.НачислятьАмортизацию
	|				И &АлгоритмРСБУ) КАК втСтоимость
	|ГДЕ
	|	втСтоимость.АмортизацияОборот <> 0
	|	И втСтоимость.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	втСтоимость.ВНА,
	|	втСтоимость.ГруппаВНА
	|
	|ИМЕЮЩИЕ
	|	СУММА(втСтоимость.АмортизацияОборот) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА,
	|	ГруппаВНА";

КонецФункции

Функция ТекстЗапроса_ПараметрыВНА(НомераТаблиц, АлгоритмРСБУ = Ложь)
	
	ПоляВыбораСтрокой = 
	"ВНА,
	|ГруппаВНА,
	|ПрофильРаспределения,	
	|ВидУчета,	
	|ПервоначальнаяСтоимость,
	|Подразделение,
	|НаправлениеДеятельности,
	|АмортизацияРасчет,
	|РезервПереоценкиРасчет,
	|СчетНакопленнойАмортизации,
	|СчетНакопленнойАмортизацииСубконто1,
	|СчетНакопленнойАмортизацииСубконто2, 
	|СчетНакопленнойАмортизацииСубконто3";
	
	ЗапросПараметрыВНА = УчетМСФОПовтИспУХ.ПолучитьКэшированныйТекстЗапросаВНА(ПоляВыбораСтрокой, "втПараметрыВНА"); 
	
	ТекущийНомер = НомераТаблиц.Количество();	
	Для каждого НомерТаблицы Из ЗапросПараметрыВНА.НомераТаблиц Цикл		
		НомераТаблиц.Вставить(НомерТаблицы.Ключ, ТекущийНомер + НомерТаблицы.Значение);	
	КонецЦикла;
	
	Если АлгоритмРСБУ Тогда
		Возврат СтрЗаменить(ЗапросПараметрыВНА.Текст, "&ВНА", "ВЫБРАТЬ т.ВНА ИЗ втСписокВНА КАК т");
	Иначе	
		Возврат ЗапросПараметрыВНА.Текст;
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапроса_ТаблицаВНА(НомераТаблиц)

	НомераТаблиц.Вставить("втТаблицаВНА", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втПараметрыВНА.ВНА КАК ВНА,
	|	втПараметрыВНА.ГруппаВНА КАК ГруппаВНА,
	|	втПараметрыВНА.ПрофильРаспределения КАК ПрофильРаспределения,
	|	втПараметрыВНА.ВидУчета КАК ВидУчета,
	|	втПараметрыВНА.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	втПараметрыВНА.Подразделение КАК ПодразделениеДт,
	|	втПараметрыВНА.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	втПараметрыВНА.Подразделение КАК ПодразделениеКт,
	|	втПараметрыВНА.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	втПараметрыВНА.АмортизацияРасчет КАК АмортизацияРасчет,
	|	втПараметрыВНА.РезервПереоценкиРасчет КАК РезервПереоценкиРасчет,
	|	втПараметрыВНА.СчетНакопленнойАмортизации КАК СчетНакопленнойАмортизации,
	|	втПараметрыВНА.СчетНакопленнойАмортизацииСубконто1 КАК СчетНакопленнойАмортизацииСубконто1,
	|	втПараметрыВНА.СчетНакопленнойАмортизацииСубконто2 КАК СчетНакопленнойАмортизацииСубконто2,
	|	втПараметрыВНА.СчетНакопленнойАмортизацииСубконто3 КАК СчетНакопленнойАмортизацииСубконто3
	|ПОМЕСТИТЬ втТаблицаВНА
	|ИЗ
	|	втПараметрыВНА КАК втПараметрыВНА
	|ГДЕ
	|	НЕ втПараметрыВНА.ВНА В
	|				(ВЫБРАТЬ
	|					т.ВНА
	|				ИЗ
	|					втНачислено КАК т)";

КонецФункции

Функция ТекстЗапроса_СтоимостьВНАМСФО(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаВНА", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	т.ВНА КАК ВНА,
	|	&Организация КАК Организация,
	|	т.ГруппаВНА КАК ГруппаВНА,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОпераций.НачислениеАмортизации) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО) КАК ВидУчета,
	|	&Сценарий КАК Сценарий,
	|	0 КАК СуммаВВалютеУчета,
	|	т.АмортизацияРасчет КАК Амортизация,
	|	0 КАК Переоценка,
	|	0 КАК Обесценение,
	|	-т.РезервПереоценкиРасчет КАК РезервПереоценки,
	|	0 КАК ПереоценкаАмортизации
	|ИЗ
	|	втТаблицаВНА КАК т
	|ГДЕ
	|	т.АмортизацияРасчет <> 0";

КонецФункции

Функция ТекстЗапроса_ТаблицаПроводкиВНА(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПроводкиВНА", НомераТаблиц.Количество());
	
	Возврат 
	МСФОВНАУХ.ТекстЗапроса_НачислениеАмортизацииМСФО() 
	+ " ОБЪЕДИНИТЬ ВСЕ " 
	+ МСФОВНАУХ.ТекстЗапроса_НачислениеРезерваПереоценкиМСФО();

КонецФункции

Функция ТекстЗапроса_ТаблицаОшибок(НомераТаблиц)

	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(МСФОВНАУХ.ТекстЗапроса_ПроверкаНаБалансе(НомераТаблиц, "втТаблицаВНА"));
	ТекстЗапроса.Добавить(МСФОВНАУХ.ТекстЗапроса_ПроверкаСчетаЗатратПрофиляРаспределения(Неопределено, "втТаблицаВНА"));
		
	Возврат СтрСоединить(ТекстЗапроса, " ОБЪЕДИНИТЬ ВСЕ ");

КонецФункции

Процедура СформироватьДвижения(Движения, ДополнительныеСвойства, Отказ) Экспорт
		
	Реквизиты 				= ДополнительныеСвойства.ДляПроведения.Реквизиты;
	ТаблицаВНА 				= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВНА;
	ТаблицаПроводкиВНА 		= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПроводкиВНА;

	Если МСФОВНАУХ.ЕстьОшибкиПроведения(ДополнительныеСвойства, Отказ) Тогда
		Возврат;
	КонецЕсли;

	НастройкиОтражения = МСФОВНАУХ.ПолучитьНастройкиОтражения();	
	НастройкиОтражения.Вставить("СтоимостьВНАМСФО", Истина);	
	МСФОВНАУХ.ОтразитьДвиженияПараметровУчетаВНА(Движения, Реквизиты, ТаблицаВНА, НастройкиОтражения);
	
	ТаблицаПроводкиВНА.Колонки.Добавить("ИсточникВНА");
	ТаблицаПроводкиВНА.Колонки.Добавить("ИсточникГруппаВНА");	
	ТаблицаПроводкиВНА.ЗагрузитьКолонку(ТаблицаПроводкиВНА.ВыгрузитьКолонку("ВНА"), 		"ИсточникВНА");
	ТаблицаПроводкиВНА.ЗагрузитьКолонку(ТаблицаПроводкиВНА.ВыгрузитьКолонку("ГруппаВНА"),	"ИсточникГруппаВНА");
	
	ТаблицаПроводкиВНА.Колонки.Добавить("ИсточникВНАДт");
	ТаблицаПроводкиВНА.Колонки.Добавить("ИсточникВНАКт");
	ТаблицаПроводкиВНА.ЗаполнитьЗначения(Неопределено, 	"ИсточникВНАДт");//Субконто на стороне Дт не изменяем
	ТаблицаПроводкиВНА.ЗаполнитьЗначения(Истина, 		"ИсточникВНАКт");//Субконто на стороне Кт заменяем на ключевые ВНА
		
	МСФОВНАУХ.ОтразитьПроводкиВНА(Движения, Реквизиты, ТаблицаПроводкиВНА, Отказ, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
