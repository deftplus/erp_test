#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("КоличествоУпаковокПлан");
	Результат.Добавить("УпаковкаПлан");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("ВыпускПодДеятельность");
	
	Возврат Результат;

КонецФункции

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ДоступностьРабочихЦентров");
	МеханизмыДокумента.Добавить("Закупки");
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("ПриемВПереработку");
	МеханизмыДокумента.Добавить("ПриемНаОтветхранение");
	МеханизмыДокумента.Добавить("Продажи");
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетРабот");
	
	ЭтапПроизводства2_2Локализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		ЗаполнитьПараметрыИнициализации(Запрос);
		ЗаполнитьПараметрыРасчетаСебестоимости(Запрос, ДопПараметры);
		ЗаполнитьПараметрыИнициализацииПоСсылке(Запрос);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = ТекстыЗапросаДляФормированияДвижений(Запрос, Регистры, ДопПараметры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВыработкаСотрудников.ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСозданияНаОсновании);
	
	Команда = Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьПередачуВПроизводствоНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьВозвратИзПроизводстваНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьПередачуИзПроизводстваНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.АктВыполненныхВнутреннихРабот.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПлановаяКалькуляция2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = Документы.ПроизводственнаяОперация2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОснованииПоГруппеСкладов(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОснованииЗаказыПоставщикам(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
		
	Команда = Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Если Команда <> Неопределено Тогда
		СтатусыДокумента = Новый Массив;
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда,
															"Статус",
															СтатусыДокумента,
															ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ЭтапПроизводства2_2Локализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Этап производства".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
//Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЭтапПроизводства2_2);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства.ДобавитьКомандуКонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства(КомандыОтчетов);
	
	Отчеты.ДиагностикаЭтапаПроизводства.ДобавитьКомандуДиагностикаГрафикаЭтапаПроизводства(КомандыОтчетов);
	
	Отчеты.ДиаграммаСмежныхЭтаповПроизводства.ДобавитьКомандуСмежныеЭтапыПроизводства(КомандыОтчетов);
	
	Отчеты.ДиаграммаПроизводстваПартииЗапуска.ДобавитьКомандуГрафикПартииЗапуска(КомандыОтчетов);
	
	Отчеты.ДеревоСебестоимостиПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Отчеты.ХодВыполненияПроизводственныхОпераций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	ЭтапПроизводства2_2Локализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "ПроизводствоНаСтороне";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Новый Структура;
	
	НастройкиПроизводства = ПроизводствоСервер.ИспользованиеСерийВПроизводстве22();
	
	#Область ВыходныеИзделия
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Получатель");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ДатаПроизводства");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Отменено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Получатель";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ВыходныеИзделия";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии = "ВыходныеИзделияСерии";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = (
																ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = (
																ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства);
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");

	ПараметрыУказанияСерий.Вставить("ВыходныеИзделия", ПараметрыУказанияСерийТЧ);
	
	#КонецОбласти
	
	#Область ПобочныеИзделия
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Получатель");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ДатаПроизводства");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Отменено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Получатель";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ПобочныеИзделия";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии = "ПобочныеИзделияСерии";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = (
																ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = (
																ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства);
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	
	ПараметрыУказанияСерий.Вставить("ПобочныеИзделия", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	#Область РасходМатериаловИРабот
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "РасходМатериаловИРабот";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии  = "РасходМатериаловИРабот";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры = НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве);
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерийТЧ.ПланированиеОтбора   = Ложь;
	
	ПараметрыУказанияСерий.Вставить("РасходМатериаловИРабот", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	#Область ЭкономияМатериалов
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ЭкономияМатериалов";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии  = "ЭкономияМатериаловСерии";
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Получатель";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = (
																ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = (
																ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ВозвратМатериаловИзПроизводстваПриемка);
	
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Получатель");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ДатаОперации");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Обособить");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерийТЧ.ПланированиеОтбора   = Ложь;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.Вставить("ЭкономияМатериалов", ПараметрыУказанияСерийТЧ);
	#КонецОбласти

	#Область ОбеспечениеМатериаламиИРаботами
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары      = "ОбеспечениеМатериаламиИРаботами";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии       = "ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
		ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
		ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры;
	
	Если Объект.ПроизводствоНаСтороне Тогда
		ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	Иначе
		ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
	КонецЕсли; 
	
	ПараметрыУказанияСерийТЧ.ПараметрыЗапроса.Вставить("ПроизводствоНаСтороне", Объект.ПроизводствоНаСтороне);
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.Вставить("ОбеспечениеМатериаламиИРаботами", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на распоряжение.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		Или ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия"
		Или ПараметрыУказанияСерий.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция"
		Или ПараметрыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия();
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "ОбеспечениеМатериаламиИРаботами" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийОбеспечениеМатериаламиИРаботами();
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "РасходМатериаловИРабот" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийРасходМатериаловИРабот();
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "ЭкономияМатериалов" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийЭкономияМатериалов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Обеспечение

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания() Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "ОбеспечениеМатериаламиИРаботами";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "ОбеспечениеМатериаламиИРаботамиВариантОбеспечения";
	ЭлементыФормы.Доступно           = "ОбеспечениеМатериаламиИРаботамиДоступно";
	ЭлементыФормы.Серия              = "ОбеспечениеМатериаламиИРаботамиСерия";
	ЭлементыФормы.Обособленно        = "ОбеспечениеМатериаламиИРаботамиОбособленно";
	ЭлементыФормы.Склад              = "ОбеспечениеМатериаламиИРаботамиСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.ОбеспечениеМатериаламиИРаботами.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.ОбеспечениеМатериаламиИРаботами.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.ОбеспечениеМатериаламиИРаботами.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыМатериаловВПроизводство";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	ПараметрыВстраивания.ИмяТаблицы = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	Реквизиты.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ВЫБОР КОГДА ТабЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабЧасть.Назначение
		|			КОГДА ТабЧасть.Производится ТОГДА
		|				Реквизиты.НазначениеПолуфабрикаты
		|			ИНАЧЕ
		|				Реквизиты.НазначениеМатериалы
		|		КОНЕЦ КАК Назначение,
		|	Реквизиты.Ссылка КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОбеспечению,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОтгрузке,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	Реквизиты.Распоряжение.Приоритет КАК Приоритет,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
		|		ПО ИСТИНА";
	
	// Шаблон сериализации данных формы.
	ОбеспечениеМатериаламиИРаботами = Новый Структура();
	ОбеспечениеМатериаламиИРаботами.Вставить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Обособленно",        Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Производится",       Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ДатаОтгрузки",       Новый ОписаниеТипов("Дата"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КодСтроки",          Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));
	
	Объект = Новый Структура();
	Объект.Вставить("Подразделение",                   Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Объект.Вставить("НазначениеПолуфабрикаты",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Объект.Вставить("НазначениеМатериалы",             Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Объект.Вставить("Ссылка",                          Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Объект.Вставить("Статус",                          Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2"));
	Объект.Вставить("НеОтгружатьЧастями",              Новый ОписаниеТипов("Булево"));
	Объект.Вставить("ДатаОтгрузки",                    Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Дата",                            Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Распоряжение",                    Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Объект.Вставить("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраиванияПроизводствоНаСтороне() Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "ОбеспечениеМатериаламиИРаботами";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "ОбеспечениеМатериаламиИРаботамиВариантОбеспечения";
	ЭлементыФормы.Доступно           = "ОбеспечениеМатериаламиИРаботамиДоступно";
	ЭлементыФормы.Серия              = "ОбеспечениеМатериаламиИРаботамиСерия";
	ЭлементыФормы.Обособленно        = "ОбеспечениеМатериаламиИРаботамиОбособленно";
	ЭлементыФормы.Склад              = "ОбеспечениеМатериаламиИРаботамиСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.ОбеспечениеМатериаламиИРаботами.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.ОбеспечениеМатериаламиИРаботами.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.ОбеспечениеМатериаламиИРаботами.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыКлиентов";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	ПараметрыВстраивания.ИмяТаблицы = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ВЫБОР КОГДА ТабЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабЧасть.Назначение
		|			КОГДА ТабЧасть.Производится ТОГДА
		|				Реквизиты.НазначениеПолуфабрикаты
		|			ИНАЧЕ
		|				Реквизиты.НазначениеМатериалы
		|		КОНЕЦ КАК Назначение,
		|	Реквизиты.ЗаказПереработчику КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОбеспечению,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОтгрузке,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	Реквизиты.Распоряжение.Приоритет КАК Приоритет,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
		|		ПО ИСТИНА";
	
	// Шаблон сериализации данных формы.
	ОбеспечениеМатериаламиИРаботами = Новый Структура();
	ОбеспечениеМатериаламиИРаботами.Вставить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Обособленно",        Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Производится",       Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ДатаОтгрузки",       Новый ОписаниеТипов("Дата"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КодСтроки",          Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));
	
	Объект = Новый Структура();
	Объект.Вставить("НазначениеПолуфабрикаты",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Объект.Вставить("НазначениеМатериалы",             Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Объект.Вставить("ЗаказПереработчику",              Новый ОписаниеТипов("ДокументСсылка.ЗаказПереработчику"));
	Объект.Вставить("Ссылка",                          Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Объект.Вставить("Статус",                          Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2"));
	Объект.Вставить("НеОтгружатьЧастями",              Новый ОписаниеТипов("Булево"));
	Объект.Вставить("ДатаОтгрузки",                    Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Дата",                            Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Распоряжение",                    Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Объект.Вставить("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов = "НЕОПРЕДЕЛЕНО";
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

// Изменяет желаемые даты обеспечения этапов.
//
// Параметры:
//  Этапы - ТаблицаЗначений - содержит колонки:
//		* ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - документ, который необходимо изменить.
//		* Дата - Дата - значение, которое необходимо установить в качестве желаемой даты обеспечения.
//
// Возвращаемое значение:
// 	Число - количество обработанных документов.
//
Функция ИзменитьЖелаемыеДатыОбеспечения(Этапы) Экспорт
	
	КоличествоОбработанных = 0;
	
	Для каждого СтрокаЭтапы Из Этапы Цикл
		
		ДокументОбъект = СтрокаЭтапы.ЭтапПроизводства.ПолучитьОбъект();
		
		Попытка
			
			ДокументОбъект.Заблокировать();
			
			ДатаОтгрузки = '00010101';
			Для каждого СтрокаОбеспечение Из ДокументОбъект.ОбеспечениеМатериаламиИРаботами Цикл
				
				Если СтрокаОбеспечение.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					СтрокаОбеспечение.ДатаОтгрузки = СтрокаЭтапы.Дата;
				КонецЕсли;
				
				Если ДатаОтгрузки = '00010101' Тогда
					ДатаОтгрузки = СтрокаОбеспечение.ДатаОтгрузки;
				ИначеЕсли ДатаОтгрузки <> Неопределено
					И ДатаОтгрузки <> СтрокаОбеспечение.ДатаОтгрузки Тогда
					ДатаОтгрузки = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДокументОбъект.НеОтгружатьЧастями Тогда
				Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
					ДокументОбъект.ДатаОтгрузки = ДатаОтгрузки;
				ИначеЕсли ДатаОтгрузки = Неопределено Тогда
					ДокументОбъект.НеОтгружатьЧастями = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
			
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Перенос желаемой даты обеспечения';
							|en = 'Rescheduling requested supply date'", ОбщегоНазначения.КодОсновногоЯзыка());
					
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// Возвращает материалы и работы этапа, необходимые для его выполнения
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап, данные которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - обеспечиваемые материалы и работы.
//
Функция ОбеспечиваемыеМатериалыИРаботы(Этап) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено");
	
	Запрос.УстановитьПараметр("Ссылка", Этап);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает обеспечиваемые материалы этапа за вычетом израсходованных материалов.
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//	Разрезы - Строка - перечень полей через запятую, в разрезе которых необходимо получить остатки.
//		Допустимые значения: Характеристика, Серия. Если не передано, то данные получаются только в
//		разрезе номенклатуры.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблицы с материалами.
//
Функция ОстаткиОбеспечиваемыхМатериалов(Этап, Разрезы = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляВыбор,
	|	МАКСИМУМ(ТабличнаяЧасть.Упаковка) КАК Упаковка,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТОбеспечение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Этап
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляВыбор,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТРасход
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Этап
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляВыбор,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.Количество - ЕСТЬNULL(ВТРасход.Количество, 0) КАК Количество,
	|	ТабличнаяЧасть.Количество - ЕСТЬNULL(ВТРасход.Количество, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок
	|ИЗ
	|	ВТОбеспечение КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасход КАК ВТРасход
	|		ПО ТабличнаяЧасть.Номенклатура = ВТРасход.Номенклатура
	|			И &ТекстДополнительныеПоляСоединение
	|ГДЕ
	|	ТабличнаяЧасть.Количество - ЕСТЬNULL(ВТРасход.Количество, 0) > 0";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.Упаковка",
			"ТабличнаяЧасть.Номенклатура"));
			
	ТекстДопПоляВыбор = "";
	ТекстДопПоляГруппировка = "";
	ТекстДопПоляСоединение = "";
	
	Если ЗначениеЗаполнено(Разрезы) Тогда
		
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Разрезы, ",");
		
		Для каждого Поле Из МассивПолей Цикл
			
			Поле = СокрЛП(Поле);
			
			ТекстДопПоляВыбор = ТекстДопПоляВыбор
				+ "ТабличнаяЧасть." + Поле + " КАК " + Поле + ",";
			
			ТекстДопПоляГруппировка = ТекстДопПоляГруппировка
				+ ?(ЗначениеЗаполнено(ТекстДопПоляГруппировка), ", ", "")
				+ "ТабличнаяЧасть." + Поле;
			
			ТекстДопПоляСоединение = ТекстДопПоляСоединение
				+ " И ТабличнаяЧасть." + Поле + " = ВТРасход." + Поле;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДополнительныеПоляВыбор,", ТекстДопПоляВыбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДополнительныеПоляГруппировка", ТекстДопПоляГруппировка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстДополнительныеПоляСоединение", ТекстДопПоляСоединение);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЭтапПроизводства2_2 - документ, по которому создаются таблицы.
//  Склад - СправочникСсылка.Склады - склад, по которому создаются временные таблицы.
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ, Склад = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Подразделение КАК Подразделение,
		|	Товары.Назначение КАК Назначение,
		|	СУММА(Товары.Количество) КАК Заказано,
		|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
		|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
		|	
		|ПОМЕСТИТЬ ВТНоменклатураЗаказа
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Товары
		|	
		|ГДЕ
		|	Товары.Ссылка = &Заказ
		|		И НЕ Товары.Производится
		|		И НЕ Товары.Отменено
		|		И НЕ Товары.Ссылка.ПроизводствоНаСтороне
		|		И &Склад
		|	
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Склад,
		|	Товары.Подразделение,
		|	Товары.Назначение";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Если Склад <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "Товары.Склад В(&Склад)");
		Запрос.УстановитьПараметр("Склад", Склад);
	Иначе
		Запрос.УстановитьПараметр("Склад", Истина);
	КонецЕсли;
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСостояния

// Возвращает структуру, содержащую тексты запросов временных таблиц для расчета состояния.
//
// Возвращаемое значение:
//   - Структура - тексты запросов временных таблиц для расчета состояния.
//
Функция ВременныеТаблицыДляРасчетаСостояния() Экспорт
	
	Результат = Новый Структура();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                КАК Ссылка,
		|	Таблица.Проведен              КАК Проведен,
		|	Таблица.Статус                КАК Статус,
		|	Таблица.Распоряжение          КАК Распоряжение,
		|	Таблица.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	Таблица.МаршрутнаяКарта       КАК МаршрутнаяКарта,
		|	Таблица.Этап                  КАК Этап,
		|	
		|	ВЫБОР КОГДА Таблица.Распоряжение.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ                         КАК РассчитыватьОстаткиКЗаказу,
		|	
		|	Таблица.НазначениеМатериалы   КАК НазначениеМатериалы,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ                         КАК СтатусЗавершен
		|	
		|ПОМЕСТИТЬ ВТРеквизитыДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивСсылок)";
	
	Результат.Вставить("Реквизиты", ТекстЗапроса);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ВложенныйЗапрос.ПредшественникСтатус = &СтатусЗавершен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) = КОЛИЧЕСТВО(ВложенныйЗапрос.Предшественник)
		|			ТОГДА &ЗавершеныПредшественники
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ВложенныйЗапрос.ПредшественникСтатус = &СтатусНачат
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) > 0
		|			ТОГДА &НачатыПредшественники
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ВложенныйЗапрос.ПредшественникСтатус = &СтатусНачат
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) = 0
		|			ТОГДА &НеНачатыПредшественники
		|	КОНЕЦ КАК Состояние
		|ПОМЕСТИТЬ ВТСостоянияПредшественников
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСвязи.Этап КАК Ссылка,
		|		Предшественники.Ссылка КАК Предшественник,
		|		Предшественники.Статус КАК ПредшественникСтатус
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.Последователи КАК ТаблицаСвязи
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Предшественники
		|			ПО ТаблицаСвязи.Ссылка = Предшественники.Ссылка
		|	ГДЕ
		|		ТаблицаСвязи.Этап В(&МассивСсылок)
		|		И Предшественники.Проведен
		|		И НЕ Предшественники.Ссылка В (&МассивСсылокКОчистке)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Ссылка,
		|		Предшественники.Ссылка,
		|		Предшественники.Статус
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Таблица
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Предшественники
		|			ПО ((ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)) = Предшественники.Ссылка)
		|	ГДЕ
		|		Таблица.Ссылка В(&МассивСсылок)
		|		И (ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|		И Предшественники.Проведен
		|		И НЕ Предшественники.Ссылка В (&МассивСсылокКОчистке)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
	Результат.Вставить("СостоянияПредшественников", ТекстЗапроса);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЦепочкаЭтапов

// Возвращает цепочку этапов по партии производства.
//
// Параметры:
//  ПартияПроизводства	 - СправочникСсылка.ПартииПроизводства	 - партия производства.
//  Направление			 - НаправлениеСортировки				 - направление сортировки этапов в цепочке.
//
// Возвращаемое значение:
//  Массив - цепочка этапов
//
Функция ЦепочкаЭтапов(ПартияПроизводства, Направление = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.ПартияПроизводства = &ПартияПроизводства
	|	И НЕ Таблица.ПометкаУдаления
	|";
	
	Если Направление <> Неопределено Тогда
		ТекстСоединение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
		|		ПО Таблица.Ссылка = НормативныйГрафик.ЭтапПроизводства
		|";
		Если Направление = НаправлениеСортировки.Возр Тогда
			ТекстУпорядочивание = "УПОРЯДОЧИТЬ ПО ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска,0)";
		ИначеЕсли Направление = НаправлениеСортировки.Убыв Тогда
			ТекстУпорядочивание = "УПОРЯДОЧИТЬ ПО ЕСТЬNULL(НормативныйГрафик.ДлительностьДоВыпуска,0)";
		КонецЕсли;
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2 КАК Таблица";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстИсходнаяТаблица + ТекстСоединение);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстУпорядочивание;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Возвращает ближайших последователей
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап или список этапов.
//
// Возвращаемое значение:
//   - Массив - массив ближайших последователей.
//
Функция Последователи(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Этап КАК Последователь
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ПланироватьНеРанее В (&Ссылка)
		|	И Таблица.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Массив;
		
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
		
	КонецЕсли;
	
КонецФункции

// Возвращает ближайших предшественников
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//   - Массив - массив ближайших предшественников.
//
Функция Предшественники(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Предшественник
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап = &Ссылка
		|	И Таблица.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Массив;
		
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
		
	КонецЕсли;
	
КонецФункции

// Возвращает ближайшее окружение этапа
//
// Параметры:
//  Ссылка			 - ДокументСсылка.ЭтапПроизводства2_2 - этап
//  Предшественники	 - Массив - в параметр будут записаны предшественники.
//  Последователи	 - Массив - в параметр будут записаны последователи.
//
// Возвращаемое значение:
//   - Массив - массив ближайших смежных этапов.
//
Функция СмежныеЭтапы(Ссылка, Предшественники = Неопределено, Последователи = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Предшественники = Предшественники(Ссылка);
	
	Для каждого Элемент Из Предшественники Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Последователи = Последователи(Ссылка);
	
	Для каждого Элемент Из Последователи Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дочерние цепочки этапов
//
// Параметры:
//  ПартияПроизводства	 - СправочникСсылка.ПартииПроизводства	 - партия производства.
//
// Возвращаемое значение:
//   - Массив - все дочерние этапы.
//
Функция ДочерниеЦепочки(ПартияПроизводства)
	
	ДочерниеЦепочки = Новый Массив();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДочерниеЦепочки.ПартияПроизводства КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВтДочерниеЦепочки
	|ИЗ (
	|ВЫБРАТЬ
	|	Таблица.ЭтапПотребитель.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&МассивСсылок)
	|	И Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.ЭтапПотребитель.ПометкаУдаления
	|	И Таблица.Ссылка.ПартияПроизводства <> Таблица.ЭтапПотребитель.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка.ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.ЭтапПотребитель В(&МассивСсылок)
	|	И НЕ Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И Таблица.ЭтапПотребитель.ПартияПроизводства <> Таблица.Ссылка.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ЭтапПотребитель.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&МассивСсылок)
	|	И Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.ЭтапПотребитель.ПометкаУдаления
	|	И Таблица.Ссылка.ПартияПроизводства <> Таблица.ЭтапПотребитель.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка.ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.ЭтапПотребитель В(&МассивСсылок)
	|	И НЕ Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И Таблица.ЭтапПотребитель.ПартияПроизводства <> Таблица.Ссылка.ПартияПроизводства
	|
	|) КАК ДочерниеЦепочки
	|
	|ГДЕ
	|	НЕ ДочерниеЦепочки.ПартияПроизводства В (&МассивДочернихЦепочек)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ВтДочерниеЦепочки КАК ДочерниеЦепочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
	|		ПО ДочерниеЦепочки.ПартияПроизводства = Документ.ПартияПроизводства
	|ГДЕ
	|	НЕ Документ.ПометкаУдаления");
	
	Очередь = ЦепочкаЭтапов(ПартияПроизводства);
	
	Пока Очередь.Количество() > 0 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", Очередь);
		Запрос.УстановитьПараметр("МассивДочернихЦепочек", ДочерниеЦепочки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Очередь.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Очередь.Добавить(Выборка.Ссылка);
			ДочерниеЦепочки.Добавить(Выборка.ПартияПроизводства);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДочерниеЦепочки;
	
КонецФункции

// Возвращает всех последователей
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//   - Массив - массив всех последователей.
//
Функция ВсеПоследователи(Ссылка) Экспорт
	
	Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Распоряжение");
	
	НаправлениеОбхода = УправлениеПроизводством.НаправлениеОбходаГрафаВперед();
	
	Вершина = ГрафЦепочкиЭтапов(Идентификатор, НаправлениеОбхода).Найти(Ссылка, "Ссылка");
	
	Если Вершина <> Неопределено Тогда
		Возврат УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

// Возвращает всех предшественников
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//   - Массив - массив всех предшественников.
//
Функция ВсеПредшественники(Ссылка) Экспорт
	
	Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Распоряжение");
	
	НаправлениеОбхода = УправлениеПроизводством.НаправлениеОбходаГрафаНазад();
	
	Вершина = ГрафЦепочкиЭтапов(Идентификатор, НаправлениеОбхода).Найти(Ссылка, "Ссылка");
	
	Если Вершина <> Неопределено Тогда
		Возврат УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

// Текст запроса для создания временной таблицы ВТПоследователи.
//
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаВТПоследователи() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Этап   КАК Последователь
		|ПОМЕСТИТЬ ВТПоследователи
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Последователь";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временную таблицу ВТПоследователи.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Этапы					 - Массив					 - этапы.
//
Процедура СоздатьВТПоследователи(МенеджерВременныхТаблиц, Этапы) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаВТПоследователи());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Этапы) = Тип("Массив") Тогда
		МассивСсылок = Этапы;
	ИначеЕсли ТипЗнч(Этапы) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Этапы);
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Текст запроса для создания временной таблицы ВТПредшественники.
//
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаВТПредшественники() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Этап   КАК Ссылка,
		|	Таблица.Ссылка КАК Предшественник
		|ПОМЕСТИТЬ ВТПредшественники
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Предшественник";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временную таблицу ВТПредшественники.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Этапы					 - Массив					 - этапы.
//
Процедура СоздатьВТПредшественники(МенеджерВременныхТаблиц, Этапы) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаВТПредшественники());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Этапы) = Тип("Массив") Тогда
		МассивСсылок = Этапы;
	ИначеЕсли ТипЗнч(Этапы) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Этапы);
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает в менеджере временную таблицу ВТСвязиЭтапов.
//  Поля таблицы:
//  - Этап
//  - СледующийЭтап.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер для создания временной таблицы
//  МассивСсылок			 - Массив - этапы производства
//  ТолькоВнутренниеСвязи	 - Булево - признак, связи нужно получить в пределах одного распоряжения.
//
Процедура СоздатьВТСвязиЭтапов(МенеджерВременныхТаблиц, МассивСсылок, ТолькоВнутренниеСвязи = Ложь) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Этап,
		|	Таблица.Этап   КАК СледующийЭтап
		|ПОМЕСТИТЬ ВТСвязиЭтапов
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И Таблица.Этап.Проведен
		|	И &ОтборПоТипуСвязиПоследователи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|	И &ОтборПоТипуСвязиПоследователи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|	И &ОтборПоТипуСвязиПредшественники
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ПланироватьНеРанее В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|	И &ОтборПоТипуСвязиПредшественники
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	СледующийЭтап";
		
	Если ТолькоВнутренниеСвязи Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТипуСвязиПоследователи", 
			"Таблица.Ссылка.Распоряжение = Таблица.Этап.Распоряжение");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТипуСвязиПредшественники", 
			"ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение = Таблица.Ссылка.Распоряжение");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоТипуСвязиПоследователи", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоТипуСвязиПредшественники", "");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает в менеджере временную таблицу ВТСвязиЭтапов.
//  Поля таблицы:
//  - Этап
//  - СледующийЭтап.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер для создания временной таблицы
//  Распоряжения			 - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - распоряжение
//  ТолькоВнутренниеСвязи	 - Булево - признак, связи нужно получить в пределах одного распоряжения.
//
Процедура СоздатьВТСвязиЭтаповПоРаспоряжению(МенеджерВременныхТаблиц, Распоряжения, ТолькоВнутренниеСвязи = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Этап,
		|	Таблица.Этап   КАК СледующийЭтап
		|ПОМЕСТИТЬ ВТСвязиЭтапов
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка.Распоряжение В (&Распоряжения)
		|	И Таблица.Ссылка.Проведен
		|	И Таблица.Этап.Проведен
		|	И (&ТолькоВнутренниеСвязи И Таблица.Этап.Распоряжение = Таблица.Ссылка.Распоряжение
		|			ИЛИ НЕ &ТолькоВнутренниеСвязи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	НЕ &ТолькоВнутренниеСвязи
		|	И Таблица.Этап.Распоряжение В (&Распоряжения)
		|	И Таблица.Ссылка.Проведен
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение В (&Распоряжения)
		|	И Таблица.Проведен
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И (&ТолькоВнутренниеСвязи
		|		И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение = Таблица.Распоряжение
		|		ИЛИ НЕ &ТолькоВнутренниеСвязи)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	НЕ &ТолькоВнутренниеСвязи
		|	И Таблица.Проведен
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение В (&Распоряжения)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	СледующийЭтап");
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("ТолькоВнутренниеСвязи", ТолькоВнутренниеСвязи);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выполняет поиск циклов в цепочке этапов. В качестве идентификатора
// может быть передан заказ на производство или партия производства.
//
// Параметры:
//  Идентификатор	 - ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.ПартииПроизводства - Идентификатор цепочки.
//  ЭтапОшибка		 - ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на этап, в котором обнаружено зацикливание.
//
// Возвращаемое значение:
//   - Булево - Истина, если цикл найден.
//
Функция ЕстьЦиклыВЦепочкеЭтапов(Идентификатор, ЭтапОшибка = Неопределено) Экспорт
	
	Граф = ГрафЦепочкиЭтапов(Идентификатор);
	
	Возврат УправлениеПроизводством.ЕстьЦиклыВГрафе(Граф, ЭтапОшибка);
	
КонецФункции

// Возвращает назначения этапов
//
// Параметры:
//  МассивСсылок - Массив - массив этапов
//  РезультатВМассив - Булево - признак, результатом должен быть массив назначений.
//
// Возвращаемое значение:
//   - Массив, Соответствие - назначений этапов.
//
Функция НазначенияЭтапов(МассивСсылок, РезультатВМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Ссылка     КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Если РезультатВМассив Тогда
	
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	Иначе
		
		Результат = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Ссылка, Выборка.Назначение);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Возвращает этапы по назначению
//
// Параметры:
//  МассивСсылок - Массив - массив назначений
//  РезультатВМассив - Булево - признак, результатом должен быть массив этапов.
//
// Возвращаемое значение:
//   - Массив, Соответствие - найденные этапы.
//
Функция НайтиЭтапыПоНазначению(МассивСсылок, РезультатВМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка     КАК Ссылка,
		|	Таблица.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Назначение В (&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Если РезультатВМассив Тогда
	
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	Иначе
		
		Результат = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Назначение, Выборка.Ссылка);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;

КонецФункции

// Возвращает основное изделие цепочки этапов (определяется по первой строке).
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//
// Возвращаемое значение:
//   - Структура - номенклатура и характеристика основного изделия.
//
Функция ОсновноеИзделиеЦепочкиЭтапов(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)                          КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|			ПО Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
	|				И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)                          КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|			ПО Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
	|				И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Новый Структура("Номенклатура, Характеристика, Количество",,, 0);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список общих реквизитов цепочки этапов
//
// Параметры:
//  ВключитьРеквизитыРаспоряжения	 - Булево	 - признак, список необходимо дополнить реквизитами распоряжения.
//
// Возвращаемое значение:
//   - Массив - общие реквизиты цепочки этапов.
//
Функция ОбщиеРеквизитыЦепочкиЭтапов(ВключитьРеквизитыРаспоряжения = Ложь) Экспорт
	
	Реквизиты = Новый Массив;
	
	// общие реквизиты цепочки этапов
	Реквизиты.Добавить("Распоряжение");
	Реквизиты.Добавить("НазначениеПродукция");
	Реквизиты.Добавить("ПартияПроизводства");
	Реквизиты.Добавить("ТипПроизводственногоПроцесса");
	Реквизиты.Добавить("Спецификация");
	
	// реквизиты распоряжения
	Если ВключитьРеквизитыРаспоряжения Тогда
		
		Реквизиты.Добавить("НаправлениеДеятельности");
		Реквизиты.Добавить("ХозяйственнаяОперация");
		Реквизиты.Добавить("Партнер");
		Реквизиты.Добавить("Договор");
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает подразделение-исполнитель этапов производства
//
// Параметры:
//  МассивСсылок	 - Массив	 - список этапов производства.
//
// Возвращаемое значение:
//  Соответствие - подразделения-исполнители этапов производства.
//
Функция ПодразделенияИсполнители(МассивСсылок) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Подразделение");
	
КонецФункции

// Возвращает данные партии производства
//
// Параметры:
//  Распоряжение		 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  НазначениеПродукция	 - СправочникСсылка.Назначения			 - назначение продукции ( при обособлении по целевому назначению )
//  ПартияПроизводства	 - СправочникСсылка.ПартииПроизводства - партия производства
//
// Возвращаемое значение:
//  Структура - данные запущенной в производство партии.
//
Функция ДанныеПартииПроизводства(Распоряжение, НазначениеПродукция, ПартияПроизводства) Экспорт
	
	ДанныеПартии = Новый Структура("
		|Распоряжение,
		|НазначениеПродукция,
		|ПартияПроизводства,
		|Организация,
		|ХозяйственнаяОперация,
		|Партнер,
		|Договор,
		|НачалоПроизводства,
		|ПодразделениеДиспетчер,
		|НаправлениеДеятельности,
		|Спецификация,
		|ТипПроизводственногоПроцесса,
		|ОсновноеИзделиеНоменклатура,
		|ОсновноеИзделиеХарактеристика,
		|Номенклатура,
		|Характеристика,
		|Количество");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Распоряжение                  КАК Распоряжение,
		|	&НазначениеПродукция           КАК НазначениеПродукция,
		|	&ПартияПроизводства            КАК ПартияПроизводства,
		|
		|	Заказы.Организация             КАК Организация,
		|	Заказы.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	Заказы.Партнер                 КАК Партнер,
		|	Заказы.Договор                 КАК Договор,
		|	Заказы.НачатьНеРанее           КАК НачалоПроизводства,
		|	Заказы.Подразделение           КАК ПодразделениеДиспетчер,
		|	Заказы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|
		|	ЕСТЬNULL(Партии.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))          КАК Спецификация,
		|	ЕСТЬNULL(Партии.ТипПроцесса, ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)) КАК ТипПроизводственногоПроцесса,
		|	ЕСТЬNULL(Партии.ОсновноеИзделиеНоменклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))    КАК ОсновноеИзделиеНоменклатура,
		|	ЕСТЬNULL(Партии.ОсновноеИзделиеХарактеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ОсновноеИзделиеХарактеристика
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК Партии
		|		ПО Партии.Ссылка = &ПартияПроизводства
		|ГДЕ
		|	Заказы.Ссылка = &Распоряжение");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("НазначениеПродукция", НазначениеПродукция);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеПартии, Выборка);
	
	ДанныеПартии.Номенклатура = Выборка.ОсновноеИзделиеНоменклатура; // для совместимости механизма расчета нормативов
	ДанныеПартии.Характеристика = Выборка.ОсновноеИзделиеХарактеристика;
	ДанныеПартии.Количество = 0;
	
	Если Не ПартияПроизводства.Пустая() Тогда
		
		Если Выборка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(Изделия.Количество) КАК Количество
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Изделия
				|			ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
				|			И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
				|			И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
				|ГДЕ
				|	ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
				|	И ЭтапПроизводства.Проведен
				|	И НЕ Изделия.Отменено
				|
				|ИМЕЮЩИЕ
				|	СУММА(Изделия.Количество) > 0";
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				ДанныеПартии.Количество = Выборка.Количество;
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(ВложенныйЗапрос.КоличествоТЧ)    КАК КоличествоТЧ,
				|	СУММА(ВложенныйЗапрос.КоличествоШапка) КАК КоличествоШапка
				|ИЗ
				|	(ВЫБРАТЬ
				|		СУММА(ЕСТЬNULL(Изделия.Количество, 0))       КАК КоличествоТЧ,
				|		СУММА(ЭтапПроизводства.КоличествоУпаковокПлан
				|				* ЕСТЬNULL(&КоэффициентУпаковки, 1)) КАК КоличествоШапка
				|	ИЗ
				|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
				|				ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
				|				И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
				|				И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
				|				И НЕ Изделия.Отменено
				|	ГДЕ
				|		ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
				|		И ЭтапПроизводства.Проведен
				|		И ЭтапПроизводства.НомерСледующегоЭтапа = 0
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		СУММА(Изделия.Количество),
				|		0
				|	ИЗ
				|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
				|				ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
				|				И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
				|				И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
				|	ГДЕ
				|		ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
				|		И ЭтапПроизводства.Проведен
				|		И ЭтапПроизводства.НомерСледующегоЭтапа = 0
				|		И НЕ Изделия.Отменено) КАК ВложенныйЗапрос
				|
				|ИМЕЮЩИЕ
				|	СУММА(ВложенныйЗапрос.КоличествоТЧ) > 0
				|		ИЛИ СУММА(ВложенныйЗапрос.КоличествоШапка) > 0";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"&КоэффициентУпаковки",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЭтапПроизводства.УпаковкаПлан",
					"ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				ДанныеПартии.Количество = ?(Выборка.КоличествоТЧ <> 0,
					Выборка.КоличествоТЧ,
					Выборка.КоличествоШапка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НазначениеПродукция) Тогда
		ДанныеПартии.НаправлениеДеятельности =
			УправлениеПроизводствомПовтИсп.НаправлениеДеятельностиНазначенияПродукции(НазначениеПродукция);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеПартии);
	
КонецФункции

// Возвращает долю стоимости выходных изделий остальных этапов цепочки
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//
// Возвращаемое значение:
//  Число - доля стоимости выходных изделий остальных этапов цепочки.
//
Функция ДоляСтоимостиОстальныхЭтаповЦепочки(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ТабличнаяЧасть.ДоляСтоимости) КАК ДоляСтоимости
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|			ПО (Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И НЕ ТабличнаяЧасть.Ссылка = &Ссылка
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен)
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ТабличнаяЧасть.ДоляСтоимости) > 0 
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ДоляСтоимости;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭтапами

// Формирует этапы производства.
//
// Параметры:
//  Параметры - Структура - настройки формирования документов.
//		См. Документы.ЭтапПроизводства2_2.ПараметрыФормированияЭтапов.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат. Результатом является
//		количество записанных документов.
//
Процедура СформироватьЭтапы(Параметры, АдресХранилища) Экспорт
	
	// Формирование этапов
	КлючеваяОперация = "МежцеховоеУправление2_2.ФормированиеЭтаповПроизводства";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	РезультатФормирования = СформироватьЭтапыВнутриЗамераВремени(Параметры);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РезультатФормирования.СформированоДокументов);
	
	Если РезультатФормирования.ЕстьОшибка Тогда
		ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Дополнительные действия после формирования этапов	
	Если Параметры.РассчитатьГрафик Тогда
		
		ПараметрыПланирования = Новый Структура;
		ПараметрыПланирования.Вставить("Распоряжения", Параметры.Распоряжения);
		ПараметрыПланирования.Вставить("ЗадействоватьРезервДоступности", Параметры.ПриРасчетеГрафикаЗадействоватьРезерв);
		АдресРезультатПланирования = ПоместитьВоВременноеХранилище(Неопределено);
		
		Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикРаспоряжений(
			ПараметрыПланирования,
			АдресРезультатПланирования);
		
		РезультатПланирования = ПолучитьИзВременногоХранилища(АдресРезультатПланирования);
		Если РезультатПланирования.ЕстьОшибки Тогда
			РезультатФормирования.ЕстьОшибка = Истина;
			РезультатФормирования.ОшибкаТекст = СтрШаблон(
				НСтр("ru = 'При планировании заказа %1 возникли ошибки. Подробнее см. в рабочем месте ""Планирование графика заказа"".';
					|en = 'Errors occurred when planning order %1. For more information, see the ""Order schedule planning"" workplace.'"),
				УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(РезультатПланирования.РаспоряжениеОшибка, ""));;
			РезультатФормирования.ОшибкаСсылка = РезультатПланирования.РаспоряжениеОшибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПередатьЭтапыКВыполнению Тогда
		
		ПараметрыПередачи = Новый Структура("Распоряжения", Параметры.Распоряжения);
		АдресРезультатПередачи = ПоместитьВоВременноеХранилище(Неопределено);
		
		ПередатьЭтапыКВыполнениюОтложенно(ПараметрыПередачи, АдресРезультатПередачи);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
КонецПроцедуры

// Функция - конструктор структуры параметров формирования этапов
//
// Возвращаемое значение:
//  Структура - параметры формирования
//
Функция ПараметрыФормированияЭтапов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Распоряжения", Новый Массив);
	
	// Параметры обеспечения
	Результат.Вставить("РезервироватьМатериалы", Ложь);
	Результат.Вставить("РезервироватьПФ", Ложь);
	
	Результат.Вставить("ЗаменятьМатериалыНаАналоги", Ложь);
	Результат.Вставить("ЗаменятьПФНаАналоги", Ложь);
	
	Результат.Вставить("ИспользоватьОбособленныйЗапас", Ложь);
	Результат.Вставить("ИспользоватьНеобособленныйЗапас", Ложь);
	
	// Действия, выполняемые после формирования этапов
	Результат.Вставить("ПередатьЭтапыКВыполнению", Ложь);
	Результат.Вставить("РассчитатьГрафик", Ложь);
	Результат.Вставить("ПриРасчетеГрафикаЗадействоватьРезерв", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Помечает на удаление цепочки этапов по переданному отбору.
//
// Параметры:
//  Отбор               - ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.ПартииПроизводства - отбор
//  ВключатьПодчиненные - Булево - определяет, будут ли помечены на удаление подчиненные цепочки.
//
// Возвращаемое значение:
//  Структура - результат
//
Функция ПометитьНаУдалениеЭтапы(Отбор, ВключатьПодчиненные = Истина) Экспорт
	
	Результат = Новый Структура("КоличествоОбработано,ЕстьОшибки,ОшибкаСсылка",0,Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ПартияПроизводства КАК ПартияПроизводства
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
		|			ПО Таблица.Ссылка = НормативныйГрафик.ЭтапПроизводства
		|
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И &Отбор
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.ПартияПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	МИНИМУМ(ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска,0))
		|");
	
	УстановленыОтборы = Ложь;
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТипОтбора = ТипЗнч(Отбор);
		ДоступныеОтборы = Новый Структура;
		Если ТипОтбора = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
			ДоступныеОтборы.Вставить("Распоряжение", Отбор);
		ИначеЕсли ТипОтбора = Тип("СправочникСсылка.ПартииПроизводства") Тогда
			Если ВключатьПодчиненные Тогда
				Список = ДочерниеЦепочки(Отбор);
				Список.Добавить(Отбор);
			Иначе
				Список = Новый Массив;
				Список.Добавить(Отбор);
			КонецЕсли;
			ДоступныеОтборы.Вставить("ПартияПроизводства", Список);
		КонецЕсли;
		
		ТекстОтбора = "";
		
		Для каждого КлючЗначение Из ДоступныеОтборы Цикл
			
			ТекстОтбора = 
				ТекстОтбора
				+ ?(ПустаяСтрока(ТекстОтбора), "", " И ")
				+ " Таблица."
				+ КлючЗначение.Ключ
				+ " В(&"
				+ КлючЗначение.Ключ
				+ ")";
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
			УстановленыОтборы = Истина;
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора, "ИСТИНА"));
		
	КонецЕсли;
	Если Не УстановленыОтборы Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПартияПроизводства = Выборка.ПартияПроизводства;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
			
			Блокировка.Заблокировать();
			
			ЦепочкаЭтапов = ЦепочкаЭтапов(ПартияПроизводства, НаправлениеСортировки.Возр);
			
			Если ЦепочкаЭтапов.ВГраница() = -1 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка чтения этапов по партии производства';
										|en = 'An error occurred when reading production lot stages'");
			КонецЕсли;
			
			Для каждого СсылкаНаОбъект Из ЦепочкаЭтапов Цикл
				
				ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				
				Результат.КоличествоОбработано = Результат.КоличествоОбработано + 1;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат.ЕстьОшибки = Истина;
			Результат.ОшибкаСсылка = ПартияПроизводства;
			
			СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеПометкаНаУдалениеЭтапов();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось пометить на удаление цепочку этапов: %1 по причине: %2';
											|en = 'Cannot mark stage chain for deletion: %1. Reason: %2'"),
								ПартияПроизводства,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, ПартияПроизводства.Метаданные(), ПартияПроизводства, ТекстСообщения);
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создает новые/изменяет существующие этапы производства в рамках одной цепочки.
//
// Параметры:
//  Параметры		 - Структура					 - параметры изменения этапов:
//  					* Распоряжение               - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
//  					* ПартияПроизводства         - СправочникСсылка.ПартииПроизводства - партия производства.
//  					* ПоляПартии                 - Структура                             - описание партии производства.
//  					* Действия                   - Массив из Структура                   - список действий с этапами производства, содержит:
//  					   ** Ссылка - ДокументСсылка - 
//  					   ** Тип - Строка - 
//  					   ** ЗначенияЗаполнения - Структура - 
//  АдресХранилища	 - УникальныйИдентификатор, Строка	 - адрес во временном хранилище, по которому будет
//  	помещен результат работы процедуры - идентификатор цепочки.
//
Процедура РедактированиеЦепочкиЭтаповПроизводства(Параметры, АдресХранилища) Экспорт
	
	Распоряжение       = Параметры.Распоряжение;
	ПартияПроизводства = Параметры.ПартияПроизводства;
	ПоляПартии         = Параметры.ПоляПартии;
	Действия           = Параметры.Действия;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = 
		Параметры.ПроводитьБезКонтроляОстатковТоваровОрганизаций;
		
	УстановитьПривилегированныйРежим(Ложь);

	ЕстьОшибки = Ложь;
	ДатаДокумента = ТекущаяДатаСеанса();
	НоваяПартияЗапуска = Ложь;
	НомерПартииЗапуска = -1;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
		Блокировка.Заблокировать();
		
		Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
			ПартияПроизводства, ПоляПартии, Истина, Ложь, НоваяПартияЗапуска, НомерПартииЗапуска);
		
		Если НоваяПартияЗапуска Тогда
			НовыйНомерЭтапаВПартииЗапуска = 1;
		Иначе
			НовыйНомерЭтапаВПартииЗапуска = НовыйНомерЭтапаВПартииЗапуска(ПартияПроизводства);
		КонецЕсли;
		
		Для каждого Действие Из Действия Цикл
			
			Если Действие.Тип = "Создать" Тогда
				
				ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
				ДокументОбъект.УстановитьСсылкуНового(Действие.Ссылка);
				
				ДокументОбъект.Дата = ДатаДокумента;
				ДокументОбъект.НомерПартииЗапуска = НомерПартииЗапуска;
				ДокументОбъект.НомерЭтапаВПартииЗапуска = НовыйНомерЭтапаВПартииЗапуска;
				
				НовыйНомерЭтапаВПартииЗапуска = НовыйНомерЭтапаВПартииЗапуска + 1;
				
			ИначеЕсли Действие.Тип = "Изменить" ИЛИ Действие.Тип = "Удалить" Тогда
				
				ДокументОбъект = Действие.Ссылка.ПолучитьОбъект();
				
				Если Действие.Тип = "Удалить" Тогда
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект.Заполнить(Действие.ЗначенияЗаполнения);
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				ДокументОбъект.ОтключитьПроверкуРеквизитовЦепочкиЭтапов();
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Иначе
				ВызватьИсключение НСтр("ru = 'Найдены ошибки заполнения этапов производства';
										|en = 'There are errors in filled production stages'");
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПоляПартии.ТипПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			ПроверитьУстановитьПометкуУдаленияПартииПроизводства(ПартияПроизводства, ПоляПартии);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = ПроизводствоСервер.СобытиеРедактированиеЦепочкиЭтапов();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(Распоряжение);
	КонецЕсли;
	
	Результат = Новый Структура("ЕстьОшибки, Сообщения", ЕстьОшибки, ПолучитьСообщенияПользователю(Истина));
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Возвращает этапы по отбору
//
// Параметры:
//  Отбор			- Структура	- отбор
//  ВыбиратьПервые	- Число		- ограничение объема выборки
//
// Возвращаемое значение:
//  Массив - найденные этапы
//
Функция НайтиЭтапы(Отбор, ВыбиратьПервые = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	&Отбор");
	
	СписокТекстов = Новый Массив;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		Для каждого КлючЗначение Из Отбор Цикл
			Если ТипЗнч(КлючЗначение.Ключ) = Тип("Массив") Тогда
				ТекстОтбора = СтрШаблон("Таблица.%1 В (&%1)", КлючЗначение.Ключ);
				СписокТекстов.Добавить(ТекстОтбора);
			Иначе
				ТекстОтбора = СтрШаблон("Таблица.%1 = &%1", КлючЗначение.Ключ);
				СписокТекстов.Добавить(ТекстОтбора);
			КонецЕсли;
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст =
		СтрЗаменить(
			Запрос.Текст,
			"&Отбор",
			?(СписокТекстов.Количество() > 0, СтрСоединить(СписокТекстов, " И "), "ИСТИНА"));
	
	Если ТипЗнч(ВыбиратьПервые) = Тип("Число") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Строка(ВыбиратьПервые)); //@Query-part-1 @Query-part-2
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0)
	
КонецФункции

// Определяет необходимость установки пометки удаления партии производства
// и устанавливает ее при необходимости.
//
// Параметры:
//  ПартияПроизводства	- СправочникСсылка.ПартииПроизводства - партия производства.
//  ПоляПартии			- Структура								- описание партии производства.
//
Процедура ПроверитьУстановитьПометкуУдаленияПартииПроизводства(ПартияПроизводства, ПоляПартии) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ЭтапыЦепочки.ПометкаУдаления) КАК ПометкаУдаленияЭтапа,
	|	МИНИМУМ(ВЫРАЗИТЬ(&ПартияПроизводства КАК Справочник.ПартииПроизводства).ПометкаУдаления) КАК ПометкаУдаленияКлюча
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапыЦепочки
	|
	|ГДЕ
	|	ЭтапыЦепочки.ПартияПроизводства = &ПартияПроизводства
	|	И НЕ ЭтапыЦепочки.ТипПроизводственногоПроцесса =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	|
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(ЭтапыЦепочки.ПометкаУдаления) =
	|		МИНИМУМ(ВЫРАЗИТЬ(&ПартияПроизводства КАК Справочник.ПартииПроизводства).ПометкаУдаления)
	|");
	
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
			ПартияПроизводства,
			ПоляПартии,,
			Выборка.ПометкаУдаленияЭтапа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрафикПроизводства

// Возвращает статусы документа, находясь в которых он может быть запланирован в графике производства.
//
// Возвращаемое значение:
//  Массив - массив статусов документа.
//
Функция СтатусыЭтапМожетБытьЗапланирован() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	Возврат Результат;
	
КонецФункции

// Период выполнения этапа по графику производства
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
// Возвращаемое значение:
//   - Структура - период выполнения этапа по графику производства.
//
Функция ГрафикПроизводства(Ссылка) Экспорт
	
	Результат = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	ГрафикПроизводства = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ГрафикПроизводства(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
	
	Если ГрафикПроизводства.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(Результат, ГрафикПроизводства[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Период выполнения этапа по нормативному графику производства
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
// Возвращаемое значение:
//   - Структура - период выполнения этапа по нормативному графику производства.
//
Функция НормативныйГрафикПроизводства(Ссылка) Экспорт
	
	Результат = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	Если Ссылка.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ЭтапПроизводства КАК Этап,
		|	ИСТИНА                   КАК Рассчитан,
		|	ДОБАВИТЬКДАТЕ(Таблица.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(Таблица.ДлительностьДоЗапуска, 0))                          КАК НачалоЭтапа,
		|	ДОБАВИТЬКДАТЕ(Таблица.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(Таблица.ДлительностьДоЗапуска + Таблица.Ресурсоемкость, 0)) КАК ОкончаниеЭтапа
		|ИЗ
		|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапПроизводства = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Плановая дата поступления изделий
//
// Если график производства используется, то дата окончания этапа из графика,
//  иначе плановая дата по нормативному графику.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
// Возвращаемое значение:
//   - Дата - плановая дата поступления изделий.
//
Функция ПлановаяДатаПоступления(Ссылка) Экспорт
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		ГрафикПроизводства = ГрафикПроизводства(Ссылка);
	Иначе
		ГрафикПроизводства = НормативныйГрафикПроизводства(Ссылка);
	КонецЕсли;
	
	Возврат ПлановаяДатаПоступленияПоГрафику(ГрафикПроизводства);
	
КонецФункции

// Плановая дата поступления изделий
//
// Параметры:
//  ГрафикПроизводства - Структура - см. УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике().
//
// Возвращаемое значение:
//   - Дата - плановая дата поступления изделий.
//
Функция ПлановаяДатаПоступленияПоГрафику(ГрафикПроизводства) Экспорт
	
	Возврат НачалоДня(ГрафикПроизводства.ОкончаниеЭтапа);
	
КонецФункции

// Обновляет график движения товаров после расчета графика производства
//
// Параметры:
//  Этапы - Массив - Список этапов производства.
//
Процедура ОбновитьПланируемоеПоступлениеТоваров(Этапы) Экспорт
	
	ЛокальнаяТранзакция = НЕ ТранзакцияАктивна();
	
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ИмяРегистра = "РаспределениеЗапасовДвижения";
	
	Попытка
	
		УстановитьПривилегированныйРежим(Истина);
		
		ЗаблокироватьЭтапы(Этапы);
		
		// Выполним ответственное чтение реквизитов
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭтапПроизводства22.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства22
		|ГДЕ
		|	ЭтапПроизводства22.Ссылка В(&Этапы)
		|	И ЭтапПроизводства22.Статус = &СтатусКВыполнению
		|	И ЭтапПроизводства22.Проведен");
		
		Запрос.УстановитьПараметр("Этапы", Этапы);
		Запрос.УстановитьПараметр("СтатусКВыполнению", Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл

				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				РежимЗаписи = РежимЗаписидокумента.Проведение;
				РежимПроведения = РежимПроведенияДокумента.Неоперативный;
				ПроведениеДокументов.ПередЗаписьюДокумента(ДокументОбъект, РежимЗаписи, РежимПроведения);
				
				ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Выборка.Ссылка, ИмяРегистра);
				
				ДвиженияРегистра = ДокументОбъект.Движения[ИмяРегистра];
				ДвиженияРегистра.Записывать = Истина;
				ДвиженияРегистра.Загрузить(ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
				
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				ПроведениеДокументов.УстановитьДопСвойстваРегистра(ДвиженияРегистра, ДокументОбъект);
				
				ДокументОбъект.Движения.Записать();
				
				СостоянияДокументов.ОтразитьСостоянияДокументов(ДокументОбъект, МенеджерВременныхТаблиц);
				
				ДокументОбъект = Неопределено;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Снимает признак ручного размещения в графике производства у этапов.
//
// Параметры:
//  Этапы - Массив - массив этапов производства, для которых необходимо снять признак ручного размещения в графике.
//	КонтролироватьПараметрыРазмещения - Булево - флаг, обозначающий что при записи этапа необходимо выполнить
//		контроль изменения параметров размещения в графике и соответственно при их изменении отметить этап
//		как требующий пересчета графика.
//
Процедура ОтменитьРучноеРазмещениеЭтаповВГрафике(Этапы, КонтролироватьПараметрыРазмещения) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Этапы)
	|	И Т.РучноеРазмещениеВГрафике
	|	И Т.Проведен");
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Этап.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.РучноеРазмещениеВГрафике = Ложь;
			ДокументОбъект.ПланироватьРаботуВидовРабочихЦентров = ДокументОбъект.ВидыРабочихЦентров.Количество() > 0;
			
			Если НЕ КонтролироватьПараметрыРазмещения Тогда
				ДокументОбъект.ОтключитьКонтрольПараметровРазмещенияВГрафике();
			КонецЕсли;
			ДокументОбъект.ОтключитьОбновлениеСостоянияЗаказа();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		Исключение
		
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Отмена ручного размещения в графике';
							|en = 'Canceling manual placement in the schedule'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет график этапов по расписанию и устанавливает им способ планирования "Вручную".
//
// Параметры:
//  Расписание - ТаблицаЗначений - данные рсписания:
//		* Этап - ДокументСсылка.ЭтапПроизводства2_2.
//		* РабочийЦентр - СправочникСсылка.РабочиеЦентры.
//		* Начало - Дата.
//		* Окончание - Дата.
//
Процедура ЗаполнитьГрафикЭтаповПоДаннымРасписания(Расписание) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Расписание.Этап КАК Документ.ЭтапПроизводства2_2) КАК Этап,
		|	Расписание.РабочийЦентр КАК РабочийЦентр,
		|	Расписание.Начало КАК Начало,
		|	Расписание.Окончание КАК Окончание
		|ПОМЕСТИТЬ ВТРасписание
		|ИЗ
		|	&Расписание КАК Расписание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРасписание.Этап КАК Этап,
		|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
		|	ВТРасписание.Начало КАК Начало,
		|	ДОБАВИТЬКДАТЕ(ВТРасписание.Окончание, СЕКУНДА, -1) КАК Окончание
		|ИЗ
		|	ВТРасписание КАК ВТРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО ВТРасписание.РабочийЦентр = РабочиеЦентры.Ссылка
		|ГДЕ
		|	РабочиеЦентры.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
		|ИТОГИ
		|	МИНИМУМ(Начало),
		|	МАКСИМУМ(Окончание)
		|ПО
		|	Этап");
	
	Запрос.УстановитьПараметр("Расписание", Расписание);
	ВыборкаЭтап = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭтап.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = ВыборкаЭтап.Этап.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			// Реквизиты документа
			ДокументОбъект.ПланироватьРаботуВидовРабочихЦентров	= Ложь;
			ДокументОбъект.РучноеРазмещениеВГрафике = Истина;
			ДокументОбъект.ПланироватьНеРанее = Неопределено;
			
			// Даты графика
			График = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
			График.Рассчитан                       = Истина;
			График.НачалоЭтапа                     = ВыборкаЭтап.Начало;
			График.ОкончаниеПредварительногоБуфера = ВыборкаЭтап.Начало;
			График.НачалоЗавершающегоБуфера        = ВыборкаЭтап.Окончание;
			График.ОкончаниеЭтапа                  = ВыборкаЭтап.Окончание;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ГрафикПроизводства", График);
			
			// Плановые даты поступления
			ДатаПоступления = ПлановаяДатаПоступленияПоГрафику(График);
			
			ГрафикДоИзменения = ГрафикПроизводства(ВыборкаЭтап.Этап);
			ДатаПоступленияДоИзменения = ПлановаяДатаПоступленияПоГрафику(ГрафикДоИзменения);
			
			УправлениеПроизводством.ОбновитьПлановыеДатыПоступления(
				ДокументОбъект, ДатаПоступления, ДатаПоступленияДоИзменения);
			
			// Виды рабочих центров
			ДокументОбъект.ЗанятостьВидовРабочихЦентров.Очистить();
			
			Выборка = ВыборкаЭтап.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ГраницаПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
					Выборка.Начало,
					ВыборкаЭтап.ИнтервалПланирования);
				
				Пока ГраницаПериода <= Выборка.Окончание Цикл
					
					СледующийИнтервал = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(
						ГраницаПериода,
						ВыборкаЭтап.ИнтервалПланирования) + 1;
					
					НоваяСтрока = ДокументОбъект.ЗанятостьВидовРабочихЦентров.Добавить();
					НоваяСтрока.ВидРабочегоЦентра = Выборка.ВидРабочегоЦентра;
					НоваяСтрока.ДатаИнтервала = ГраницаПериода;
					НоваяСтрока.Количество = Мин(СледующийИнтервал, Выборка.Окончание + 1) - Макс(ГраницаПериода, Выборка.Начало);
					
					ГраницаПериода = СледующийИнтервал;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		Исключение
		
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Заполнение графика по данным расписания';
							|en = 'Filling the schedule according to the timetable data'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусДокумента

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив;
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка                КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Статус                КАК ТекущийСтатус,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	&Статус                                 КАК НовыйСтатус,
		|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                   КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен              КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
		|	ИСТИНА                                  КАК ЗаписьПроведением,
		|	ТаблицаДокументов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаДокументов.ЗаказПереработчику    КАК ЗаказПереработчику
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)");
		
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2 - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению
		И УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(ЗначениеНовогоСтатуса, ВыборкаПроверки.ТекущийСтатус) < 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. этап уже был передан к выполнению';
							|en = 'The ""%Статус%"" status of the %Документ% document is not set as the stage has already been released'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ВыборкаПроверки.Ссылка,
					"Статус",,
					Отказ); 
	
	ИначеЕсли ВыборкаПроверки.ПроизводствоНаСтороне Тогда
		Если ВыборкаПроверки.ЗаказПереработчику.Пустая() Тогда
			Если УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(
					ЗначениеНовогоСтатуса,
					Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению) > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. не оформлен заказ переработчику';
									|en = 'The ""%Статус%"" status of the %Документ% document is not set as the ""Purchase order — Subcontracting"" is not registered'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ВыборкаПроверки.Ссылка,
							"Статус",,
							Отказ);
			КонецЕсли;
		Иначе
			Если УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(
					ЗначениеНовогоСтатуса,
					Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению) < 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. на основании него оформлен заказ переработчику';
									|en = 'The ""%Статус%"" status of the %Документ% document is not set as the ""Purchase order — Subcontracting"" is not registered'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ВыборкаПроверки.Ссылка,
							"Статус",,
							Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Операции

// Возвращает статусы документа, в которых доступно выполнение производственных операций.
//
// Параметры:
//  Параметры	 - ДанныеФормыСтруктура, Структура	 - структура, содержащая параметры подразделения.
//
// Возвращаемое значение:
//  Массив - массив статусов документа.
//
Функция СтатусыДоступноВыполнениеОпераций(Параметры) Экспорт
	
	Результат = Новый Массив;
	
	Если Параметры.ИспользоватьСменныеЗадания
		ИЛИ Параметры.ИспользоватьПооперационноеПланирование Тогда
		Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	КонецЕсли;
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, требуется ли отразить выполнение операций для этапа
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
//
// Возвращаемое значение:
//   - Булево - Истина, требуется отразить выполнение операций.
//
Функция ТребуетсяОтразитьВыполнениеОпераций(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеквизитыДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
	|ГДЕ
	|	РеквизитыДокумента.Ссылка = &Ссылка
	|	И ВЫБОР
	|		КОГДА (ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ))
	|				И РеквизитыДокумента.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат))
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеУправление, ЛОЖЬ)
	|				И РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И РеквизитыДокумента.Проведен
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции

// Возвращает данные этапа для расчета очереди производственных операций.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
//
// Возвращаемое значение:
//  Структура - данные для расчета.
//
Функция ДанныеДляРасчетаОчередиОпераций(Ссылка) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РеквизитыДокумента.Ссылка                     КАК Ссылка,
	|	РеквизитыДокумента.Статус                     КАК Статус,
	|	РеквизитыДокумента.Распоряжение               КАК Распоряжение,
	|	РеквизитыДокумента.Подразделение                 КАК Подразделение,
	|	РеквизитыДокумента.Спецификация                  КАК Спецификация,
	|	РеквизитыДокумента.Этап                          КАК ЭтапСпецификации,
	|	РеквизитыДокумента.МаршрутнаяКарта            КАК МаршрутнаяКарта,
	|	РеквизитыДокумента.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|
	|	РеквизитыДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	РеквизитыДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	РеквизитыДокумента.КоличествоУпаковокПлан                           КАК КоличествоУпаковокПлан,
	|	ЕСТЬNULL(&КоэффициентУпаковки, 1)                                   КАК КоэффициентУпаковки,
	|
	|	ВЫБОР
	|		КОГДА РеквизитыДокумента.Проведен
	|			И (
	|				(ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ))
	|					И РеквизитыДокумента.Статус В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ИЛИ ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеУправление, ЛОЖЬ)
	|					И РеквизитыДокумента.Статус В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|			)
	|			И ВЫБОР
	|				КОГДА &ХранитьОперацииВРесурсныхСпецификациях
	|					ТОГДА ИСТИНА В (
	|								ВЫБРАТЬ ПЕРВЫЕ 1
	|									ИСТИНА
	|								ИЗ
	|									Справочник.ТехнологическиеОперации КАК Т
	|								ГДЕ
	|									Т.Владелец = РеквизитыДокумента.Этап И НЕ Т.ПометкаУдаления)
	|				ИНАЧЕ РеквизитыДокумента.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяРассчитать,
	|
	|	ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ) КАК ИспользоватьСменныеЗадания,
	|
	|	РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) КАК ВАрхиве
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
	|ГДЕ
	|	РеквизитыДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"РеквизитыДокумента.УпаковкаПлан",
		"РеквизитыДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях",
		ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура(
		"Ссылка,
		|Статус,
		|Распоряжение,
		|Подразделение,
		|Спецификация,
		|ЭтапСпецификации,
		|МаршрутнаяКарта,
		|КоэффициентМаршрутнойКарты,
		|Номенклатура,
		|Характеристика,
		|КоличествоУпаковокПлан,
		|КоэффициентУпаковки,
		|ТребуетсяРассчитать,
		|ИспользоватьСменныеЗадания,
		|ВАрхиве");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Представление

// Возвращает строку, формирующую представление этапа производства, для подстановки в текст запроса.
//
// Параметры:
//  СинонимТаблицыЭтапПроизводства - Строка - синоним таблицы запроса, получающей данные документа ЭтапПроизводства2_2.
//
// Возвращаемое значение:
//  Строка - строка для подстановки в текст запроса.
//
Функция ТекстЗапросаПредставлениеЭтапа(СинонимТаблицыЭтапПроизводства) Экспорт
	
	Результат = "%1.Номер + "", "" + %1.НаименованиеЭтапа";
	Результат = СтрЗаменить(Результат, "%1", СинонимТаблицыЭтапПроизводства);
	
	Возврат Результат;
	
КонецФункции

// Выполняет подстановку в текст запроса поля "Представление этапа производства"
//
// Параметры:
//  ТекстЗапроса					 - Строка	 - текст запроса
//  ИмяПоля							 - Строка	 - имя поля
//  СинонимТаблицыЭтапПроизводства	 - Строка	 - синоним таблицы запроса, получающей данные документа ЭтапПроизводства2_2
//
Процедура ВыполнитьПодстановкуПоляПредставлениеЭтапа(ТекстЗапроса, ИмяПоля, СинонимТаблицыЭтапПроизводства) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоля, Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа(СинонимТаблицыЭтапПроизводства));
	
КонецПроцедуры

// Формирует представление этапа производства по данным документа.
// Если представление необходимо получить в запросе, то следует
// воспользоваться функцией ТекстЗапросаПредставлениеЭтапа.
//
// Параметры:
//  ДанныеЭтапа - Структура - данные этапа для формирования представления:
//		* Номер - Строка
//		* НаименованиеЭтапа - Строка
//
// Возвращаемое значение:
//  Строка - представление этапа производства.
//
Функция ПредставлениеЭтапа(ДанныеЭтапа) Экспорт
	
	Если ТипЗнч(ДанныеЭтапа) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭтапа, "Номер,НаименованиеЭтапа");
	Иначе
		Реквизиты = ДанныеЭтапа;
	КонецЕсли;
	
	Возврат СтрШаблон("%1, %2", Реквизиты.Номер, Реквизиты.НаименованиеЭтапа);
	
КонецФункции

// Формирует представление основного изделия этапа.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//  Строка - представление основного изделия.
//
Функция ОсновноеИзделиеПредставление(Ссылка) Экспорт
	
	ОсновноеИзделиеПредставление = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Таблица.ПартияПроизводства.ОсновноеИзделиеНоменклатура.Наименование, """") КАК НоменклатураПредставление,
	|	ВЫБОР
	|		КОГДА Таблица.ПартияПроизводства.ОсновноеИзделиеХарактеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Таблица.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), 
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА Таблица.ПартияПроизводства.ОсновноеИзделиеХарактеристика.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ХарактеристикаПредставление
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	СУММА(Таблица.Количество) КАК Количество
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	Сумма(1) КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|			ПО (Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен)
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сумма(1) КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|			ПО (Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен)
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|) КАК Таблица
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда

		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		
		ОсновноеИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
																	Выборка.НоменклатураПредставление,
																	Выборка.ХарактеристикаПредставление);
		
		ВыборкаСтрок = Результат[1].Выбрать();
		ВыборкаСтрок.Следующий();
	
		Если ВыборкаСтрок.Количество > 1 Тогда
			
			ОсновноеИзделиеПредставление =
				ОсновноеИзделиеПредставление
				+ " "
				+ СтрШаблон(НСтр("ru = 'и еще %1 %2';
								|en = 'also in %1 %2'"), 
					Формат(ВыборкаСтрок.Количество - 1, "ЧГ="),
					ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
						НСтр("ru = 'изделие';
							|en = 'product'"),
						НСтр("ru = 'изделия';
							|en = 'products'"),
						НСтр("ru = 'изделий';
							|en = 'products'"),
						ВыборкаСтрок.Количество - 1));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновноеИзделиеПредставление;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеЗаданий

// Передает этапы к выполнению
//
// Параметры:
//  Параметры		 - Структура - параметры передачи
//  АдресХранилища	 - Строка	 - адрес хранилища, в которое будет помещен результат.
//
Процедура ПередатьЭтапыКВыполнениюОтложенно(Параметры, АдресХранилища) Экспорт
	
	Перем Распоряжения;
	
	Если НЕ Параметры.Свойство("Распоряжения", Распоряжения) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("Количество", 0);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияЭтаповПроизводства.Этап КАК Ссылка
	|ИЗ
	|	РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
	|ГДЕ
	|	СостоянияЭтаповПроизводства.Распоряжение В (&Распоряжения)
	|	И СостоянияЭтаповПроизводства.СостояниеНаМежцеховомУровне = &ГотовКВыполнению");
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("ГотовКВыполнению", Перечисления.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
				Если ДокументОбъект = Неопределено ИЛИ ДокументОбъект.Статус <> СтатусСформирован Тогда
					ВызватьИсключение НСтр("ru = 'Обрабатываемый объект не соответствует условиям отбора.';
											|en = 'Processed object does not match filter conditions.'");
				КонецЕсли;
				
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
				
				ДокументОбъект.УстановитьРежимПакетнойПередачиКВыполнению();
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеПередачаЭтаповКВыполнению();
				
				ТекстСообщения = НСтр("ru = 'Не удалось передать к выполнению этап: %Ссылка% по причине: %Причина%';
										|en = 'Cannot pass the stage for completion: %Ссылка%. Reason: %Причина%'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
				
				Продолжить;
				
			КонецПопытки;
			
			Результат.Количество = Результат.Количество + 1;
			
		КонецЦикла;
		
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжения);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование") Тогда
			
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Помечает на удаление цепочки этапов по переданному отбору.
//
// Параметры:
//  Отбор		     - Структура - структура параметров
//  АдресХранилища	 - Строка	 - адрес хранилища, в которое будет помещен результат.
//
Процедура ПометитьНаУдалениеЭтапыОтложенно(Отбор, АдресХранилища) Экспорт
	
	Если ТипЗнч(Отбор) = Тип("Массив") Тогда
		
		Результат = Новый Структура("КоличествоОбработано,ЕстьОшибки,ОшибкаСсылка",0,Ложь);
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			РезультатПорции = ПометитьНаУдалениеЭтапы(ЭлементОтбора);
			
			Результат.КоличествоОбработано = Результат.КоличествоОбработано + РезультатПорции.КоличествоОбработано;
			
			Если РезультатПорции.ЕстьОшибки Тогда
				ЗаполнитьЗначенияСвойств(Результат,РезультатПорции,,"КоличествоОбработано");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Результат = ПометитьНаУдалениеЭтапы(Отбор);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Выполняет необходимые действия по очереди заданий к обработке этапов производства.
//
// Параметры:
//  Задание				 - Структура				 - см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.НовоеЗадание()
//  ПропуститьЗадание	 - Булево					 - признак, требуется пропустить выполнение задания (возвращаемое значение).
//  ДополнительныеДанные - Структура 				 - дополнительные данные, используемые при обработке очереди
//
Процедура ОбработатьДокументОтложенно(Задание, ПропуститьЗадание = Ложь, ДополнительныеДанные = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = Задание.ЭтапПроизводства;
	
	ОшибкаУстановкиБлокировки = Ложь;
	НачатьТранзакцию();
	Попытка
		
		ОшибкаУстановкиБлокировки = Истина;
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		ОшибкаУстановкиБлокировки = Ложь;
		
		Если Задание.ЗаполнитьПоОперациям И ТребуетсяОтразитьВыполнениеОпераций(Ссылка) Тогда
			
			ОшибкаУстановкиБлокировки = Истина;
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
			ОшибкаУстановкиБлокировки = Ложь;
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.ЗаполнитьПоОперациям();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.Прочитать();
				ДокументОбъект.ТребуетсяЗаполнитьПоОперациям = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Задание.ОбновитьСостояние Тогда
			
			РегистрыСведений.СостоянияЭтаповПроизводства.ОбновитьСостояниеОпераций(Ссылка);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Если ОшибкаУстановкиБлокировки Тогда
			ПропуститьЗадание = Истина;
		КонецЕсли;
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//	 Документ           - ДокументСсылка - Документ, на основании которого осуществляется ввод
//	 Статус             - ПеречислениеСсылка - Статус документа, на основании которого осуществляется ввод
//	 ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
//	 КВыполнению        - Булево - Позволяет вводить документы в статусе КВыполнению.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ, Статус = Неопределено, ЕстьОшибкиПроведен = Ложь, КВыполнению = Ложь) Экспорт
	
	МассивДопустимыхСтатусов = ДопустимыеСтатусыВводаНаОсновании("");
	ЕстьОшибкиСтатус = МассивДопустимыхСтатусов.Найти(Статус) = Неопределено;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ, Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
КонецПроцедуры

#КонецОбласти

#Область Округление

// Возвращает параметры для округления
// 
// Возвращаемое значение:
// 	Структура - элементы содержат структуру параметров округления 
// 				см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
// 
Функция ПараметрыТЧДляОкругления() Экспорт
	
	ПараметрыТЧ = Новый Структура;
	
	ИмяТЧ = "ВыходныеИзделия";
	ИмяПоляСклад = "Получатель";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "ПобочныеИзделия";
	ИмяПоляСклад = "Получатель";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "ОбеспечениеМатериаламиИРаботами";
	ИмяПоляСклад = "Склад";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "ЭкономияМатериалов";
	ИмяПоляСклад = "Получатель";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	Возврат ПараметрыТЧ;	

КонецФункции

#КонецОбласти

#Область Печать

// Возвращает правила печати печатной формы Задания на отбор (размещение) товаров.
//
// Возвращаемое значение:
//	Массив - элементами, которого является структура (См. Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати).
//
Функция ПравилаПечатиЗаданияНаОтборРазмещение() Экспорт
	
	ПравилаПечати = Новый Массив;
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления = Истина;
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ВыходныеИзделия";
	ПравилаПечатиЗадания.ИмяПоляСклад = "Получатель";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления = Истина;
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ПобочныеИзделия";
	ПравилаПечатиЗадания.ИмяПоляСклад = "Получатель";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления = Истина;
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ЭкономияМатериалов";
	ПравилаПечатиЗадания.ИмяПоляСклад = "Получатель";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ОбеспечениеМатериаламиИРаботами";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	Возврат ПравилаПечати;
	
КонецФункции

#КонецОбласти

#Область ИзменениеПартийЭтапов

// Сокращает/увеличивает размер партии с пересчетом данных в табличных частях.
//
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  РазмерПартии - см. НовыйРазмерПартии
//  ПослеЭтапа - ДокументСсылка.ЭтапПроизводства2_2	- если значение передано, то партия
//		будет сокращена частично, после заданного этапа. Если значение не заполнено,
//		то будут сокращены все этапы партии.
//	ПересчитатьПоКоэффициенту - Булево - если Ложь, то этапы будут перезаполнены по ресурсной
//		спецификации, если Истина, то данные будут пересчитаны по коэффициенту.
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция ИзменитьРазмерПартии(ДанныеПартии, РазмерПартии, ПослеЭтапа, ПересчитатьПоКоэффициенту, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	// Выборка этапов с проверкой
	Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, ПослеЭтапа, Результат.Отказ, Результат.Сообщения);
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из Ссылки Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		// Сокращение/увеличение
		ДанныеЭтапов = ?(ПересчитатьПоКоэффициенту,
			ДанныеЭтаповДляИзмененияПартий(Ссылки, Ложь, Истина).ДанныеПересчета,
			ДанныеЭтаповДляИзмененияПартий(Ссылки, Истина, Ложь).ДанныеДополнения);
		
		Изменения = ИзменитьРазмерПартииВЭтапах(
			ДанныеПартии, РазмерПартии, Ссылки, ДанныеЭтапов, ПересчитатьПоКоэффициенту, Результат.Отказ, Результат.Сообщения);
		
		Если Результат.Отказ Тогда
			Для каждого Ссылка Из Ссылки Цикл
				РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
		Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
			Результат.ЭтапИзменен.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
			Результат.ЭтапУдален.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
			Результат.КорректировкаСоздана.Добавить(Ссылка);
		КонецЦикла;
		
		// Корректировка назначений
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РаспределениеЗапасов.Номенклатура                                        КАК Номенклатура,
			|	РаспределениеЗапасов.Характеристика                                      КАК Характеристика,
			|	РаспределениеЗапасов.Склад                                               КАК Склад,
			|	РаспределениеЗапасов.Назначение                                          КАК ИсходноеНазначение,
			|	СУММА(РаспределениеЗапасов.Свободно - РаспределениеЗапасов.НеОбеспечено) КАК Количество,
			|	СУММА(РаспределениеЗапасов.Свободно - РаспределениеЗапасов.НеОбеспечено) КАК КоличествоУпаковок
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|		ПО РаспределениеЗапасов.Назначение = Этапы.Назначение
			|ГДЕ
			|	Этапы.Ссылка В (&Ссылки)
			|	И Этапы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
			|	И РаспределениеЗапасов.Состояние В (
			|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
			|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОтложитьОбеспечение),
			|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать))
			|СГРУППИРОВАТЬ ПО
			|	РаспределениеЗапасов.Номенклатура,
			|	РаспределениеЗапасов.Характеристика,
			|	РаспределениеЗапасов.Склад,
			|	РаспределениеЗапасов.Назначение
			|ИМЕЮЩИЕ
			|	СУММА(РаспределениеЗапасов.Свободно - РаспределениеЗапасов.НеОбеспечено) > 0");
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		
		Товары = Запрос.Выполнить().Выгрузить();
		Если Товары.Количество() > 0 Тогда
			
			РеквизитыШапки = Новый Структура();
			РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
			РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
			РеквизитыШапки.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылки[0], "Организация"));
			
			ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, Товары));
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
				ДокументОбъект,
				Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументОбъект));
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Событие = НСтр("ru = 'Этап производства';
									|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
						+ НСтр("ru = 'Изменение размера партии';
								|en = 'Lot size change'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(Событие,
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Результат.КорректировкаСоздана.Добавить(ДокументОбъект.Ссылка);
		
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(ДанныеПартии.Распоряжение);
		
	Исключение
		
		Для каждого Ссылка Из Ссылки Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Изменение размера партии';
					|en = 'Lot size change'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из Ссылки Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Помечает на удаление этапы заданной партии производства.
//
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  ПослеЭтапа - ДокументСсылка.ЭтапПроизводства2_2	- если значение передано, то партия
//		будет отменена частично, после заданного этапа. Если значение не заполнено,
//		то будут отменены все этапы партии.
//	ВыходныеИзделия - ТаблицаЗначений - выходные изделия по рассчитываемой стоимости,
//		которые будут помещены в выпускающий этап партии. Параметр обязателен при передаче параметра ПослеЭтапа.
//		Состав полей аналогичен реквизитам одноименной табличной части этапа производства.
//	Серии - ТаблицаЗначений - серии выходных изделий.
//	ПараметрыВыпуска - Структура - параметры оформления промежуточного выпуска.
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
//	
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция ОтменитьПартию(ДанныеПартии, ПослеЭтапа, ВыходныеИзделия, Серии, ПараметрыВыпуска, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	// Выборка этапов с проверкой
	Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, ПослеЭтапа, Результат.Отказ, Результат.Сообщения);
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из Ссылки Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		Если НЕ ПослеЭтапа.Пустая() Тогда
			ЗаблокироватьДанныеДляРедактирования(ПослеЭтапа,, ИдентификаторФормы);
		КонецЕсли;
		
		// Пометка на удаление
		Для каждого Ссылка Из Ссылки Цикл
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			Результат.ЭтапУдален.Добавить(Ссылка);
			
		КонецЦикла;
		
		// Оформление промежуточного выпуска
		Если НЕ ПослеЭтапа.Пустая() Тогда
			
			НовыйЭтап = ОформитьПромежуточныйВыпуск(ДанныеПартии, ПослеЭтапа, ВыходныеИзделия, Серии, ПараметрыВыпуска);
			Если ПараметрыВыпуска.СоздатьЭтап Тогда
				
				Результат.ЭтапСоздан.Добавить(НовыйЭтап);
				
				// Если в этапе - точке деления был выпуск изделий промежуточного выпуска по фиксированной стоимости,
				// то необходимо отразить потребление этих изделий в "техническом" этапе для исключения
				// задвоения выпуска
				Корректировка = ОтразитьРасходПобочныхИзделийВПромежуточномВыпуске(ПослеЭтапа, НовыйЭтап, Ссылки);
				Если Корректировка <> Неопределено Тогда
					Результат.КорректировкаСоздана.Добавить(Корректировка);
				КонецЕсли;
				
			Иначе
				Результат.ЭтапИзменен.Добавить(ПослеЭтапа);
			КонецЕсли;
			
		КонецЕсли;
		
		// Корректировка назначений
		Запрос = Новый Запрос(
 			"ВЫБРАТЬ
			|	РаспределениеЗапасов.Номенклатура    КАК Номенклатура,
			|	РаспределениеЗапасов.Характеристика  КАК Характеристика,
			|	РаспределениеЗапасов.Склад           КАК Склад,
			|	РаспределениеЗапасов.Назначение      КАК ИсходноеНазначение,
			|	РаспределениеЗапасов.Запас           КАК Количество,
			|	РаспределениеЗапасов.Запас           КАК КоличествоУпаковок
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|		ПО РаспределениеЗапасов.Назначение = Этапы.Назначение
			|		 И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
			|ГДЕ
			|	Этапы.Ссылка В (&Ссылки)
			|		И РаспределениеЗапасов.Запас > 0");
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		
		Товары = Запрос.Выполнить().Выгрузить();
		Если Товары.Количество() > 0 Тогда
			
			РеквизитыШапки = Новый Структура();
			РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
			РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
			РеквизитыШапки.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылки[0], "Организация"));
			
			ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, Товары));
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
				ДокументОбъект,
				Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументОбъект));
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Событие = НСтр("ru = 'Этап производства';
									|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
						+ НСтр("ru = 'Отмена партии';
								|en = 'Lot cancellation'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(Событие,
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Результат.КорректировкаСоздана.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(ДанныеПартии.Распоряжение);
		
	Исключение
		
		Для каждого Ссылка Из Ссылки Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		Если НЕ ПослеЭтапа.Пустая() Тогда
			РазблокироватьДанныеДляРедактирования(ПослеЭтапа, ИдентификаторФормы);
		КонецЕсли;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Отмена партии';
					|en = 'Lot cancellation'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из Ссылки Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	Если НЕ ПослеЭтапа.Пустая() Тогда
		РазблокироватьДанныеДляРедактирования(ПослеЭтапа, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разделяет партию на несколько параллельных партий. Деление происходит с первого этапа.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
// 	НовыеПартии - Массив из см. НовыйРазмерПартии
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 	
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция РазделитьПартию(ДанныеПартии, НовыеПартии, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	Если НовыеПартии.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выборка этапов с проверкой
	Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Неопределено, Результат.Отказ, Результат.Сообщения);
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из Ссылки Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		Если ДанныеПартии.Спецификация.Пустая() Тогда
			
			ДанныеПересчета = ДанныеЭтаповДляИзмененияПартий(Ссылки, Ложь, Истина).ДанныеПересчета;
			
			// Изменение текущей партии (партия № 1)
			Изменения = ИзменитьРазмерПартииВЭтапах(
				ДанныеПартии, НовыеПартии[0], Ссылки, ДанныеПересчета, Истина, Результат.Отказ, Результат.Сообщения);
			
			Если Результат.Отказ Тогда
				Для каждого Ссылка Из Ссылки Цикл
					РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
				КонецЦикла;
				Возврат Результат;
			КонецЕсли;
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
				Результат.ЭтапУдален.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
			// Создание партий № 2+
			Для ИндексПартии = 1 По НовыеПартии.ВГраница() Цикл
				
				РезультатПересчета = СкопироватьПартиюИПересчитатьПоКоэффициенту(
					ДанныеПартии,
					ДанныеПересчета,
					НовыеПартии[ИндексПартии],
					ДанныеПартии);
				Для каждого Ссылка Из РезультатПересчета Цикл
					Результат.ЭтапСоздан.Добавить(Ссылка);
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			ДанныеДополнения = ДанныеЭтаповДляИзмененияПартий(Ссылки, Истина, Ложь).ДанныеДополнения;
			
			// Получение данных спецификации для партий № 2+
			ДанныеСпецификаций = Новый Соответствие;
			Для ИндексПартии = 1 По НовыеПартии.ВГраница() Цикл
				
				РазмерПартии = НовыйРазмерПартии(
					НовыеПартии[ИндексПартии].Количество,
					НовыеПартии[ИндексПартии].КоличествоУпаковок,
					НовыеПартии[ИндексПартии].Упаковка);
				
				// Получение данных спецификации
				ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
				
				ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартии,
					"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Спецификация, Номенклатура, Характеристика");
				ДанныеПоНоменклатуре.Количество = РазмерПартии.Количество;
				
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
					МенеджерВременныхТаблиц,
					ДанныеПартии.Распоряжение);
				
				ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(, МенеджерВременныхТаблиц);
				ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
				
				ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
					ДанныеПоНоменклатуре,
					ПараметрыВыборки);
				
				Справочники.РесурсныеСпецификации.ПроверитьРазмерПартии(
					ДанныеСпецификации, РазмерПартии.Количество, Результат.Отказ, Результат.Сообщения);
				Если Результат.Отказ Тогда
					Для каждого Ссылка Из Ссылки Цикл
						РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
					КонецЦикла;
					Возврат Результат;
				КонецЕсли;
				
				ДанныеСпецификаций.Вставить(ИндексПартии, ДанныеСпецификации);
				
			КонецЦикла;
			
			// Изменение текущей партии (партия № 1)
			Изменения = ИзменитьРазмерПартииВЭтапах(
				ДанныеПартии, НовыеПартии[0], Ссылки, ДанныеДополнения, Ложь, Результат.Отказ, Результат.Сообщения);
			
			Если Результат.Отказ Тогда
				Для каждого Ссылка Из Ссылки Цикл
					РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
				КонецЦикла;
				Возврат Результат;
			КонецЕсли;
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
				Результат.ЭтапУдален.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
			// Создание партий № 2+
			Для ИндексПартии = 1 По НовыеПартии.ВГраница() Цикл
				
				ДанныеСпецификации = ДанныеСпецификаций[ИндексПартии];
				
				// Дополнение данных спецификации
				ВыходныеИзделияСерии = Новый ТаблицаЗначений;
				Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ВыходныеИзделияСерии.Реквизиты Цикл
					ВыходныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
				КонецЦикла;
				ВыходныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
				ПобочныеИзделияСерии = ВыходныеИзделияСерии.СкопироватьКолонки();
				
				РаспределитьДанныеЭтаповНаДанныеСпецификации(
					ДанныеДополнения, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии);
				
				ПодготовитьДанныеСпецификацииКСозданиюЭтапов(
					ДанныеСпецификации, ДанныеПартии, Неопределено);
				
				// Создание этапов
				НовыеЭтапы = СоздатьЦепочкуЭтапов(ДанныеСпецификации, Ложь, ВыходныеИзделияСерии, ПобочныеИзделияСерии);
				
				Для каждого Ссылка Из НовыеЭтапы Цикл
					Результат.ЭтапСоздан.Добавить(Ссылка);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Изменения = ПередатьРезервы(Ссылки, Результат.ЭтапСоздан);
		Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
			Результат.ЭтапИзменен.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
			Результат.КорректировкаСоздана.Добавить(Ссылка);
		КонецЦикла;
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(ДанныеПартии.Распоряжение);
		
	Исключение
		
		Для каждого Ссылка Из Ссылки Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Деление партии';
					|en = 'Lot division'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из Ссылки Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разделяет партию на несколько параллельных партий. Деление происходит с заданного этапа.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
// 	Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап, после которого необходимо разделить партию.
//	ВыходныеИзделия - ТаблицаЗначений - выходные изделия по рассчитываемой стоимости,
//		которые будут помещены в выпускающий этап партии.
//		Состав полей аналогичен реквизитам одноименной табличной части этапа производства.
//		Так же содержит поля, характеризующие партии, обработку которых необходимо продолжить
//		(то есть сформировать новые партии производства).
//	Серии - ТаблицаЗначений - серии выходных изделий.
//	ПараметрыВыпуска - Структура - параметры оформления промежуточного выпуска.
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 	
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция РазделитьПартиюПослеЭтапа(ДанныеПартии, Этап, ВыходныеИзделия, Серии, ПараметрыВыпуска, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	// Выборка этапов с проверкой
	Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Этап, Результат.Отказ, Результат.Сообщения);
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из Ссылки Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		Если Не ПараметрыВыпуска.СоздатьЭтап Тогда
			ЗаблокироватьДанныеДляРедактирования(Этап,, ИдентификаторФормы);
		КонецЕсли;
		
		ДанныеЭтапов = Неопределено;
		Если ВыходныеИзделия.Найти(Истина, "ПродолжитьОбработку") <> Неопределено Тогда
			
			СтруктураПоиска = Новый Структура("ПродолжитьОбработку, ПродолжитьПоСпецификации", Истина, Истина);
			ПолучитьДанныеДополнения = ВыходныеИзделия.НайтиСтроки(СтруктураПоиска).Количество() <> 0;
			СтруктураПоиска.ПродолжитьПоСпецификации = Ложь;
			ПолучитьДанныеПересчета = ВыходныеИзделия.НайтиСтроки(СтруктураПоиска).Количество() <> 0;
			
			ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(Ссылки, ПолучитьДанныеДополнения, ПолучитьДанныеПересчета);
			
		КонецЕсли;
		
		// Получение и проверка данных спецификации
		ДанныеСпецификаций = Новый Соответствие;
		Для ИндексПартия = 0 По ВыходныеИзделия.Количество()-1 Цикл
			
			Партия  = ВыходныеИзделия[ИндексПартия];
			Если Партия.ПродолжитьОбработку
				И Партия.ПродолжитьПоСпецификации Тогда
				
				РазмерПартии = НовыйРазмерПартии(
					Партия.КоличествоПартии,
					Партия.КоличествоУпаковокПартии,
					Партия.УпаковкаПартии);
				
				// Получение данных спецификации
				ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
				ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартии,
					"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Номенклатура, Характеристика");
				ДанныеПоНоменклатуре.Спецификация = Партия.ПродолжитьСпецификация;
				ДанныеПоНоменклатуре.Количество = РазмерПартии.Количество;
				
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
					МенеджерВременныхТаблиц,
					ДанныеПартии.Распоряжение);
				
				ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(, МенеджерВременныхТаблиц);
				ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
				
				ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
					ДанныеПоНоменклатуре,
					ПараметрыВыборки);
				
				Справочники.РесурсныеСпецификации.ПроверитьРазмерПартии(
					ДанныеСпецификации, РазмерПартии.Количество, Результат.Отказ, Результат.Сообщения);
				Если Результат.Отказ Тогда
					Для каждого Ссылка Из Ссылки Цикл
						РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
					КонецЦикла;
					Если Не ПараметрыВыпуска.СоздатьЭтап Тогда
						РазблокироватьДанныеДляРедактирования(Этап, ИдентификаторФормы);
					КонецЕсли;
					Возврат Результат;
				КонецЕсли;
				
				ДанныеСпецификаций.Вставить(ИндексПартия, ДанныеСпецификации);
				
			КонецЕсли;
		КонецЦикла;
		
		// Создание новых цепочек этапов
		Для ИндексПартия = 0 По ВыходныеИзделия.Количество()-1 Цикл
			
			Партия  = ВыходныеИзделия[ИндексПартия];
			Если НЕ Партия.ПродолжитьОбработку Тогда
				Продолжить;
			КонецЕсли;
			
			РазмерПартии = НовыйРазмерПартии(
				Партия.КоличествоПартии,
				Партия.КоличествоУпаковокПартии,
				Партия.УпаковкаПартии);
			
			НовыеЭтапы = Неопределено;
			Если Партия.ПродолжитьПоСпецификации Тогда
				
				ДанныеСпецификации = ДанныеСпецификаций[ИндексПартия];
				
				// Удаление "лишних" этапов
				Строки = Новый Массив;
				НомераЭтапов = Новый Соответствие;
				НайденнаСтрока = ДанныеСпецификации.Этапы.Найти(Партия.ПродолжитьЭтап, "Этап");
				Если НайденнаСтрока <> Неопределено Тогда
					
					Строки.Добавить(НайденнаСтрока);
					НомераЭтапов.Вставить(НайденнаСтрока.НомерСледующегоЭтапа, 0);
					
					Для Индекс = ДанныеСпецификации.Этапы.Индекс(НайденнаСтрока)+1 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
						
						Строка = ДанныеСпецификации.Этапы[Индекс];
						Если НомераЭтапов[Строка.НомерЭтапа] <> Неопределено Тогда
							Строки.Добавить(Строка);
							НомераЭтапов.Вставить(Строка.НомерСледующегоЭтапа, 0);
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				Если Строки.Количество() <> ДанныеСпецификации.Этапы.Количество() Тогда
					ДанныеСпецификации.Этапы = ДанныеСпецификации.Этапы.Скопировать(Строки);
				КонецЕсли;
				
				// Дополнение данных спецификации
				ВыходныеИзделияСерии = Новый ТаблицаЗначений;
				Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ВыходныеИзделияСерии.Реквизиты Цикл
					ВыходныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
				КонецЦикла;
				ВыходныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
				ПобочныеИзделияСерии = ВыходныеИзделияСерии.СкопироватьКолонки();
				
				РаспределитьДанныеЭтаповНаДанныеСпецификации(
					ДанныеЭтапов.ДанныеДополнения, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии);
				
				ПодготовитьДанныеСпецификацииКСозданиюЭтапов(
					ДанныеСпецификации, ДанныеПартии, Этап);
				
				// Подмена основного изделия партии (при разборке)
				Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
					
					РеквизитыШапки = Новый Структура;
					РеквизитыШапки.Вставить("Распоряжение", ДанныеПартии.Распоряжение);
					РеквизитыШапки.Вставить("НазначениеПродукция", ДанныеПартии.НазначениеПродукция);
					РеквизитыШапки.Вставить("ТипПроизводственногоПроцесса", ДанныеСпецификации.ТипПроизводственногоПроцесса);
					РеквизитыШапки.Вставить("Спецификация", ДанныеСпецификации.Спецификация);
					
					ОсновноеИзделие = Новый Структура;
					ОсновноеИзделие.Вставить("Номенклатура", Партия.Номенклатура);
					ОсновноеИзделие.Вставить("Характеристика", Партия.Характеристика);
					
					ПоляПартии = ПоляПартии(РеквизитыШапки, ОсновноеИзделие);
					
					Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
						ДанныеСпецификации.ПартияПроизводства,
						ПоляПартии,
						Истина);
					
				КонецЕсли;
				
				// Создание этапов
				НовыеЭтапы = СоздатьЦепочкуЭтапов(ДанныеСпецификации, Ложь, ВыходныеИзделияСерии, ПобочныеИзделияСерии);
				
			Иначе
				
				ОсновноеИзделие = Новый Структура("Номенклатура, Характеристика",
					Справочники.Номенклатура.ПустаяСсылка(),
					Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
					// При разборке основным изделием новой партии станет изделие промежуточного выпуска
					ЗаполнитьЗначенияСвойств(ОсновноеИзделие, Партия);
				Иначе
					ЗаполнитьЗначенияСвойств(ОсновноеИзделие, ДанныеПартии);
				КонецЕсли;
				
				НовыеЭтапы = СкопироватьПартиюИПересчитатьПоКоэффициенту(
					ДанныеПартии,
					ДанныеЭтапов.ДанныеПересчета,
					РазмерПартии,
					ОсновноеИзделие);
				
			КонецЕсли;
			
			Для каждого Ссылка Из НовыеЭтапы Цикл
				Результат.ЭтапСоздан.Добавить(Ссылка);
			КонецЦикла;
			
			// Добавление номенклатуры промежуточного выпуска в обеспечение
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Документ.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК Документ
				|ГДЕ
				|	Документ.Ссылка В(&Ссылки)
				|	И НЕ ИСТИНА В
				|				(ВЫБРАТЬ ПЕРВЫЕ 1
				|					ИСТИНА
				|				ИЗ
				|					Документ.ЭтапПроизводства2_2.Последователи КАК Последователи
				|				ГДЕ
				|					Последователи.Этап = Документ.Ссылка)");
			Запрос.УстановитьПараметр("Ссылки", НовыеЭтапы);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				НазначениеВыпуска = Неопределено;
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить(
					"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
					ОбеспечениеПроизводстваКлиентСервер.
						ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(ДокументОбъект));
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", Партия.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", Партия.Характеристика);
				СтруктураПоиска.Вставить("Отменено", Ложь);				
				НайденныеСтроки = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() = -1 Тогда
					
					НоваяСтрока = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
					Если ДокументОбъект.НеОтгружатьЧастями Тогда
						НоваяСтрока.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
					КонецЕсли;
					НоваяСтрока.Производится = Истина;
					НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
					НоваяСтрока.Обособленно = Истина;
					НоваяСтрока.Склад = Партия.Получатель;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					НазначениеВыпуска = НоваяСтрока.Назначение;
					
				Иначе
					
					Остаток = Партия.Количество;
					Для Индекс = 0 По НайденныеСтроки.ВГраница() Цикл
						
						Строка = НайденныеСтроки[Индекс];
						Строка.Производится = Истина;
						Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
						Строка.Обособленно = Истина;
						Строка.Склад = Партия.Получатель;
						
						Если Индекс = НайденныеСтроки.ВГраница()
							И Остаток > Строка.Количество Тогда
							
							Строка.Количество = Остаток;
							СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
							
						КонецЕсли;
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
						НазначениеВыпуска = Строка.Назначение;
						
						Остаток = Остаток - Строка.Количество;
						Если Остаток <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ПровестиСПонижениемСтатуса(ДокументОбъект);
				ДокументОбъект.Разблокировать();
				
				// Установка свойств промежуточного выпуска
				Партия.Назначение = НазначениеВыпуска;
				Для каждого СтрокаСерия Из Серии.НайтиСтроки(Новый Структура("ИндексПартии", Партия.ИндексПартии)) Цикл
					СтрокаСерия.Назначение = НазначениеВыпуска;
				КонецЦикла;
				Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
					Партия.ОбработатьПоСпецификации = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Пометка на удаление
		Для каждого Ссылка Из Ссылки Цикл
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			Результат.ЭтапУдален.Добавить(Ссылка);
			
		КонецЦикла;
		
		// Оформление промежуточного выпуска
		НовыйЭтап = ОформитьПромежуточныйВыпуск(ДанныеПартии, Этап, ВыходныеИзделия, Серии, ПараметрыВыпуска);
		Если ПараметрыВыпуска.СоздатьЭтап Тогда
			
			Результат.ЭтапСоздан.Добавить(НовыйЭтап);
			
			// Если в этапе - точке деления был выпуск изделий промежуточного выпуска по фиксированной стоимости,
			// то необходимо отразить потребление этих изделий в "техническом" этапе для исключения
			// задвоения выпуска
			Корректировка = ОтразитьРасходПобочныхИзделийВПромежуточномВыпуске(Этап, НовыйЭтап, Ссылки);
			Если Корректировка <> Неопределено Тогда
				Результат.КорректировкаСоздана.Добавить(Корректировка);
			КонецЕсли;
			
		Иначе
			Результат.ЭтапИзменен.Добавить(Этап);
		КонецЕсли;
		
		// Изменение резервов
		Изменения = ПередатьРезервы(Ссылки, Результат.ЭтапСоздан);
		Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
			Результат.ЭтапИзменен.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
			Результат.КорректировкаСоздана.Добавить(Ссылка);
		КонецЦикла;
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(ДанныеПартии.Распоряжение);
		
	Исключение
		
		Для каждого Ссылка Из Ссылки Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		Если Не ПараметрыВыпуска.СоздатьЭтап Тогда
			РазблокироватьДанныеДляРедактирования(Этап, ИдентификаторФормы);
		КонецЕсли;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Деление партии';
					|en = 'Lot division'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из Ссылки Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	Если Не ПараметрыВыпуска.СоздатьЭтап Тогда
		РазблокироватьДанныеДляРедактирования(Этап, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

// Конструктор структуры, определяющей размер партии производства.
// 
// Параметры:
// 	Количество - Число - количество изделий в базовых единицах номенклатуры.
// 	КоличествоУпаковок - Число - количество изделий в упаковках.
// 	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка изделия.
// 	
// Возвращаемое значение:
// 	Структура - содержит:
// * Количество - Число - количество изделий в базовых единицах номенклатуры. 
// * КоличествоУпаковок - Число - количество изделий в упаковках. 
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка изделия.
//
Функция НовыйРазмерПартии(Количество, КоличествоУпаковок, Упаковка) Экспорт
	
	Возврат Новый Структура("Количество, КоличествоУпаковок, Упаковка",
		Количество, КоличествоУпаковок, Упаковка);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Формирует представление объекта метаданных на основном языке.
// Возвращаемое значение:
// Строка - Представление объекта метаданных на основном языке.
//
Функция ПредставлениеОбъектаНаОсновномЯзыке() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	ПредставлениеОбъекта = НСтр(
		"ru = 'Этап производства';
		|en = 'Production stage'",
		КодОсновногоЯзыка);
		
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Определяет наличие права доступа "ДиспетчированиеЭтаповПроизводства" для текущего пользователя.
//
// Возвращаемое значение:
//   - Булево - Истина, если доступно диспетчирование этапов.
//
Функция ДоступноДиспетчированиеЭтапов() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ДиспетчированиеЭтаповПроизводства);
	
КонецФункции

// Считывает данные объекта и помещает их во временные таблицы
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, ОбработкаОбъект.РедактированиеЭтаповПроизводства	 - объект, для которого необходимо прочитать данные.
//
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция ВременныеТаблицыДанныхОбъекта(Объект) Экспорт
	
	ДанныеЭтаповПроизводства = Объект.ДанныеЭтаповПроизводства();
	
	ТекстыЗапроса = Новый Массив;
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Дата КАК Дата,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ПартияПроизводства КАК ПартияПроизводства,
	|	Таблица.Распоряжение КАК Распоряжение,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ВыпускПодДеятельность КАК ВыпускПодДеятельность,
	|	Таблица.Статус КАК Статус,
	|
	|	Таблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	Таблица.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	Таблица.ЗаказПереработчику КАК ЗаказПереработчику,
	|	
	|	Таблица.ПроизводствоОднойДатой КАК ПроизводствоОднойДатой,
	|	Таблица.ДатаПроизводства КАК ДатаПроизводства,
	|	Таблица.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.РасходОднойДатой КАК РасходОднойДатой,
	|	Таблица.ДатаРасхода КАК ДатаРасхода,
	|	Таблица.ВыполнениеРаботОднойДатой КАК ВыполнениеРаботОднойДатой,
	|	Таблица.ДатаВыполненияРабот КАК ДатаВыполненияРабот,
	|
	|	Таблица.ФактическоеНачалоЭтапа КАК ФактическоеНачалоЭтапа,
	|	Таблица.ФактическоеОкончаниеЭтапа КАК ФактическоеОкончаниеЭтапа,
	|
	|	Таблица.Назначение КАК Назначение,
	|
	|	Таблица.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	Таблица.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|
	|	Таблица.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
	|
	|	&ЭтоПроверкаДокумента КАК ЭтоПроверкаДокумента
	|
	|ПОМЕСТИТЬ РеквизитыЭтапов
	|ИЗ
	|	&Реквизиты КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	Запрос.УстановитьПараметр("Реквизиты"            , ДанныеЭтаповПроизводства.Реквизиты);
	Запрос.УстановитьПараметр("ЭтоПроверкаДокумента" , ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") 
													   Или ТипЗнч(Объект) = Тип("ОбработкаОбъект.РедактированиеПоследовательностиЭтаповПроизводства"));
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧВыходныеИзделия Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.СтатьяРасходов,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.ЭтапПотребитель,
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.ДатаПроизводства,
		|	ТабличнаяЧасть.ДоляСтоимости,
		|	ТабличнаяЧасть.Произведено,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.ОбработатьПоСпецификации,
		|	ТабличнаяЧасть.Спецификация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Произведено И НЕ ТабличнаяЧасть.Отменено
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПризнакПроизведено,
		|	ТабличнаяЧасть.ОформитьОтчетДавальцу,
		|	0 КАК Цена,
		|	ТабличнаяЧасть.Сумма,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.АналитикаРасходов,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.НастройкаСчетовУчета,
		|	ТабличнаяЧасть.ИдентификаторСтроки,
		|	ТабличнаяЧасть.КодСтроки,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ ВыходныеИзделия
		|ИЗ
		|	&ВыходныеИзделия КАК ТабличнаяЧасть";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВыходныеИзделия", ДанныеЭтаповПроизводства.ВыходныеИзделия);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧПобочныеИзделия Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.СтатьяРасходов,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.ЭтапПотребитель,
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.Произведено,
		|	ТабличнаяЧасть.ДатаПроизводства,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.ОбработатьПоСпецификации,
		|	ТабличнаяЧасть.Спецификация,
		|	ТабличнаяЧасть.Цена,
		|	ТабличнаяЧасть.Сумма,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Произведено И НЕ ТабличнаяЧасть.Отменено
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПризнакПроизведено,
		|	ТабличнаяЧасть.ОформитьОтчетДавальцу,
		|	0 КАК ДоляСтоимости,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.АналитикаРасходов,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.НастройкаСчетовУчета,
		|	ТабличнаяЧасть.ИдентификаторСтроки,
		|	ТабличнаяЧасть.КодСтроки,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ ПобочныеИзделия
		|ИЗ
		|	&ПобочныеИзделия КАК ТабличнаяЧасть";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПобочныеИзделия", ДанныеЭтаповПроизводства.ПобочныеИзделия);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧОбеспечениеМатериаламиИРаботами Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.ДатаОтгрузки,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Производится,
		|	ТабличнаяЧасть.Спецификация,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.ВариантОбеспечения,
		|	ТабличнаяЧасть.Обособленно,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ ОбеспечениеМатериаламиИРаботами
		|ИЗ
		|	&ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами", ДанныеЭтаповПроизводства.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧРасходМатериаловИРабот Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.ДатаРасхода,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ РасходМатериаловИРабот
		|ИЗ
		|	&РасходМатериаловИРабот КАК ТабличнаяЧасть";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("РасходМатериаловИРабот", ДанныеЭтаповПроизводства.РасходМатериаловИРабот);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧЭкономияМатериалов Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.Обособить,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.ДатаОперации,
		|	ТабличнаяЧасть.СтатьяРасходов,
		|	ТабличнаяЧасть.АналитикаРасходов,
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.НастройкаСчетовУчета,
		|	ТабличнаяЧасть.ИдентификаторСтроки,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ ЭкономияМатериалов
		|ИЗ
		|	&ЭкономияМатериалов КАК ТабличнаяЧасть";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЭкономияМатериалов", ДанныеЭтаповПроизводства.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧТрудозатраты Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.Исполнитель,
		|	ТабличнаяЧасть.Выполнено,
		|	ТабличнаяЧасть.ДатаВыполнения,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ Трудозатраты
		|ИЗ
		|	&Трудозатраты КАК ТабличнаяЧасть";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("Трудозатраты", ДанныеЭтаповПроизводства.Трудозатраты);
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Выполняет проверку заполнения реквизитов этапа
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2, ОбработкаОбъект.РедактированиеЭтаповПроизводства	 - объект, который нужно проверить
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит временные таблицы документа
//  Отказ - Булево - присваивается Истина, если есть ошибки
//  ПроверяемыеРеквизиты - Массив - параметр обработчика ОбработкаПроверкиЗаполнения.
//
Процедура ПроверитьЗаполнениеОбъекта(Объект, МенеджерВременныхТаблиц, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоЭтапа");
	МассивНепроверяемыхРеквизитов.Добавить("ФактическоеОкончаниеЭтапа");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаПроизводства");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаРасхода");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполненияРабот");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.АналитикаРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.АналитикаАктивовПассивов");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДатаПроизводства");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделияСерии.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.АналитикаРасходов");
	
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Назначение");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.АналитикаРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.АналитикаАктивовПассивов");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ДатаПроизводства");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделияСерии.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Спецификация");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ПричинаОтмены");
	
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.ДатаРасхода");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.ДатаОперации");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.АналитикаРасходов");
	
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Исполнитель");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.ДатаВыполнения");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.ПричинаОтмены");
	
	ПроверитьРеквизитыШапки(Объект, МенеджерВременныхТаблиц, Отказ);
	
	ПроверитьВыходныеИзделия(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьОбеспечениеМатериаламиИРаботами(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьРасходМатериаловИРабот(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьЭкономияМатериалов(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьТрудозатраты(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьРавенствоПоМатериалам(Объект, МенеджерВременныхТаблиц, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Возвращает список реквизитов обязательных к заполнению в статусе "Формируется"
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2	 - объект, для которого нужно подготовить список реквизитов.
//
// Возвращаемое значение:
//   - Массив - список обязательных реквизитов в статусе "Формируется".
//
Функция СписокОбязательныхРеквизитовВСтатусеФормируется(Объект) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ Объект.ПланироватьРаботуВидовРабочихЦентров И НЕ Объект.РучноеРазмещениеВГрафике Тогда
		
		Результат.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
		
	КонецЕсли;
	
	Если Объект.ПланироватьРаботуВидовРабочихЦентров И НЕ Объект.РучноеРазмещениеВГрафике  Тогда
		
		Результат.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		Результат.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Заполняет реквизит "Цена" в побочном выпуске этапа производства
//
// Параметры:
//  Объект	 - ДокументОбъект	 - обрабатываемый документ.
//
Процедура ЗаполнитьЦеныПоВидуЦен(Объект) Экспорт
	
	Если Объект.ВидЦены.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКОбработке = Новый Массив;
	
	Для каждого Строка Из Объект.ПобочныеИзделия Цикл
		Если Строка.Произведено И НЕ Строка.Отменено Тогда
			СтрокиКОбработке.Добавить(Строка);
		КонецЕсли;
		Строка.Цена  = 0;
		Строка.Сумма = 0;
	КонецЦикла;
	
	Если СтрокиКОбработке.Количество() > 0 Тогда
	
		ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенВыпуска(
			Объект.ВидЦены,
			Объект.Валюта,
			Объект.ФактическоеНачалоЭтапа);
		
		ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			Объект.ПобочныеИзделия, // Табличная часть
			СтрокиКОбработке, // Массив строк или структура отбора
			ПараметрыЗаполнения, // Параметры заполнения
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму",
				"КоличествоУпаковок"));
				
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет, требуется ли уточнить этапы для заказов
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - Заказы на производство.
//
// Возвращаемое значение:
//  Булево - Истина - требуется уточнить этапы.
//
Функция ТребуетсяУточнитьЭтапы(Заказы) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Заказы);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение В (&МассивСсылок)
		|	И Таблица.Статус = &СтатусФормируется
		|	И Таблица.Проведен");
		
	Запрос.УстановитьПараметр("МассивСсылок",      МассивСсылок);
	Запрос.УстановитьПараметр("СтатусФормируется", Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция возвращает текст запроса для проверки оснований при вводе
// актов выполнения внутренних работ.
//
// Возвращаемое значение:
//   - Строка - текст запроса для проверки оснований.
//
Функция ТекстЗапросаПроверкиОснованийАктовРабот() Экспорт
	
	Возврат "
	// Получатели выходных изделий (этапы производства)
	|ВЫБРАТЬ
	|	Реквизиты.Организация				КАК Организация,
	|	Реквизиты.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель			КАК Подразделение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|		ПО ТаблицаТоваров.Ссылка = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&ОбъектыОснований)
	|	И ТаблицаТоваров.Произведено
	|	И НЕ ТаблицаТоваров.Отменено
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаТоваров.Получатель) = ТИП(Справочник.СтруктураПредприятия)
	|	И НЕ ТаблицаТоваров.СписатьНаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель,
	|	Реквизиты.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получатели побочных изделий (этапы производства)
	|ВЫБРАТЬ
	|	Реквизиты.Организация				КАК Организация,
	|	Реквизиты.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель			КАК Подразделение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|		ПО ТаблицаТоваров.Ссылка = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&ОбъектыОснований)
	|	И ТаблицаТоваров.Произведено
	|	И НЕ ТаблицаТоваров.Отменено
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаТоваров.Получатель) = ТИП(Справочник.СтруктураПредприятия)
	|	И НЕ ТаблицаТоваров.СписатьНаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель,
	|	Реквизиты.Организация
	|"
КонецФункции

// Подставляет в текст запроса выбираемые поля из выходных изделий
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//	ИсходныеПоля - Структура - содержит пути к полям в исходном тексте запроса в виде [ВедущаяТаблица].ИмяПоля
//		* Номенклатура - Строка - путь к полю Номенклатура
//		* Характеристика - Строка - путь к полю Характеристика
//		* Назначение - Строка - путь к полю Назначение
//		* КодСтроки - Строка - путь к полю КодСтроки
//		* ДоляСтоимости - Строка - путь к полю ДоляСтоимости
//		* Количество - Строка - путь к полю Количество.
//
// Возвращаемое значение:
//  Строка - новый текст запроса
//
Функция ПодставитьВыбираемыеПоля(ТекстЗапроса, ИсходныеПоля) Экспорт
	
	ПоляВыходныхИзделий = Новый Соответствие;
	ПоляВыходныхИзделий.Вставить("Номенклатура", "Номенклатура");
	ПоляВыходныхИзделий.Вставить("Характеристика", "Характеристика");
	ПоляВыходныхИзделий.Вставить("Назначение", "Назначение");
	ПоляВыходныхИзделий.Вставить("ДоляСтоимости", "ДоляСтоимости");
	ПоляВыходныхИзделий.Вставить("Количество", "Количество");
	ПоляВыходныхИзделий.Вставить("КодСтроки", "КодСтроки");
	
	Для Каждого КлючИЗначение Из ИсходныеПоля Цикл
		
		ПолеИзделия = ПоляВыходныхИзделий.Получить(КлючИЗначение.Ключ);
		Если ПолеИзделия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВедущаяТаблица = Лев(КлючИЗначение.Значение, СтрНайти(КлючИЗначение.Значение, ".", НаправлениеПоиска.СНачала));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, КлючИЗначение.Значение, ВедущаяТаблица + ПолеИзделия);
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Подставляет в текст запроса соединение, необходимое для получения выходных изделий.
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//  ИмяПараметра	 - Строка - имя параметра на место которого будет подставлено соединение
//  ПоляСоединений	 - Структура - содержит пути к полям в исходном запросе в виде [ВедущаяТаблица].Номенклатура. Структура содержит возможные поля, можно передавать не все поля.
//		* Распоряжение - Строка - заказ на производство, по которому необходимо получить выходные изделия
//		* Этап - Строка - этап производства, из которого требуется получить выходные изделия
//		* Номенклатура - Строка - выходное изделие
//		* Характеристика - Строка - характеристика выходного изделия
//		* Назначение - Строка - Назначение выходного изделия.
//
// Возвращаемое значение:
//  Строка - новый текст запроса
//
Функция ПодставитьСоединениеДляПолученияВыходныхИзделий(ТекстЗапроса, ИмяПараметра, ПоляСоединений) Экспорт
	
	СоединяемыеПоляЭтапа = Новый Соответствие;
	СоединяемыеПоляЭтапа.Вставить("Распоряжение", "Ссылка.Распоряжение");
	СоединяемыеПоляЭтапа.Вставить("Этап", "Ссылка");
	СоединяемыеПоляЭтапа.Вставить("Номенклатура", "Номенклатура");
	СоединяемыеПоляЭтапа.Вставить("Характеристика", "Характеристика");
	СоединяемыеПоляЭтапа.Вставить("Назначение", "Назначение");
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		Синоним = СокрЛП(СтрЗаменить(Сред(РезультатПодстановки, НачалоСинонима, НачалоПараметра - НачалоСинонима - 1), "ПО", ""));
		ПревыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
		ПодстрокаЗамены = " Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК %Синоним%";
		
		СвязьУсловий = " ПО ";
		
		Для Каждого КлючИЗначение Из ПоляСоединений Цикл
			
			СоединяемоеПоле = СоединяемыеПоляЭтапа.Получить(КлючИЗначение.Ключ);
			Если СоединяемоеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПодстрокаЗамены = ПодстрокаЗамены + СвязьУсловий + КлючИЗначение.Значение + " = " + "%Синоним%." + СоединяемоеПоле;
			СвязьУсловий = " И ";
			
		КонецЦикла;
		
		ПодстрокаЗамены = ПодстрокаЗамены + " И НЕ %Синоним%.Отменено";
		
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "%Синоним%", Синоним);
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

// Возвращает текст выборки поля ЭтапИсточник для подстановки в запрос
//
// Параметры:
//  ПутьРаспоряжение - Строка	 - путь к данным поля Распоряжение
//  ПутьЭтап		 - Строка	 - путь к данным поля Этап
//  ПутьНазначение	 - Строка	 - путь к данным поля Назначение
//
// Возвращаемое значение:
//  Строка - текст для подстановки в запрос
//
Функция ТекстЗапросаПолеЭтапИсточник(ПутьРаспоряжение, ПутьЭтап, ПутьНазначение) Экспорт
	
	ТекстЗапроса =
	"ВЫБОР
	|	КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
	|		ТОГДА
	|			&Этап
	|	КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2) = ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ КАК Документ.ЭтапПроизводства2_2).Распоряжение
	|		ТОГДА
	|			ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ КАК Документ.ЭтапПроизводства2_2)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|КОНЕЦ
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение", ПутьРаспоряжение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Этап",         ПутьЭтап);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение",   ПутьНазначение);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = Новый Структура;
	
	Реквизиты    = "ПутьКДанным, РежимИзменения";
	РежимОчищать = РежимИзмененияСвязанногоЗначения.Очищать;
	
#Область ВыходныеИзделия

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = Новый Структура(Реквизиты, "Объект.ВыходныеИзделия.Номенклатура",   РежимОчищать);
	СвязиПараметровВыбора.Характеристика          = Новый Структура(Реквизиты, "Объект.ВыходныеИзделия.Характеристика", РежимОчищать);
	СвязиПараметровВыбора.НачалоПроизводства      = "НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "ПодразделениеДиспетчер";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификацийТЧ.СвязиПараметровВыбора.Вставить("Объект.ВыходныеИзделия.Спецификация", СвязиПараметровВыбора);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = Новый Структура(Реквизиты, "Объект.ПобочныеИзделия.Номенклатура",   РежимОчищать);
	СвязиПараметровВыбора.Характеристика          = Новый Структура(Реквизиты, "Объект.ПобочныеИзделия.Характеристика", РежимОчищать);
	СвязиПараметровВыбора.НачалоПроизводства      = "НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "ПодразделениеДиспетчер";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификацийТЧ.СвязиПараметровВыбора.Вставить("Объект.ПобочныеИзделия.Спецификация", СвязиПараметровВыбора);
	
	ПараметрыВыбораСпецификаций.Вставить("ВыходныеИзделия", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область ОбеспечениеМатериаламиИРаботами

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = Новый Структура(Реквизиты, "Объект.ОбеспечениеМатериаламиИРаботами.Номенклатура", РежимОчищать);
	СвязиПараметровВыбора.Характеристика          = "Объект.ОбеспечениеМатериаламиИРаботами.Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства      = "НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "ПодразделениеДиспетчер";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификацийТЧ.СвязиПараметровВыбора.Вставить("Объект.ОбеспечениеМатериаламиИРаботами.Спецификация", СвязиПараметровВыбора);
	
	ПараметрыВыбораСпецификаций.Вставить("ОбеспечениеМатериаламиИРаботами", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
	Возврат ПараметрыВыбораСпецификаций;

КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
//
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("ВыходныеИзделия", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	
	ПараметрыРаспределенияЗатрат.ДоляСтоимостиДругихДокументовВГруппировке = ДоляСтоимостиОстальныхЭтаповЦепочки(Объект.Ссылка);
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	// шаблон для выходных изделий по рассчитываемой стоимости
	#Область ВыходныеИзделия
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ВыходныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ВыходныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	// Потребности в выпущенной продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ВыходныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ВыходныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ВыходныеИзделия.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.ВыходныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ВыходныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	#КонецОбласти
	
	// шаблон для побочных изделий по фиксированной стоимости
	#Область ПобочныеИзделия
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ПобочныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ПобочныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	// Потребности в выпущенной продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ПобочныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ПобочныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ПобочныеИзделия.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.ПобочныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ПобочныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	#КонецОбласти
	
	Возврат МакетФормы;
	
КонецФункции

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Неопределено;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	ПараметрыЗаполнения.ВыпускПродукцииИРабот = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Рассчитывает минимальную дату документа, записываемую в реестр документов
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Дата - минимальная дата документа.
//
Функция ОсновнаяЗаписьРеестраДокументов(Объект) Экспорт
	
	МаксимальнаяДата = Дата(3999,12,31,23,59,59);
	Результат = МаксимальнаяДата;
	
	СтруктураОтбора = Новый Структура("Отменено", Ложь);
	
	ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураОтбора, "ДатаПроизводства");
	Для Каждого ТекСтрока Из ТаблицаВыходныеИзделия Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаПроизводства) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.ВыпускПродукции);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	ТаблицаПобочныеИзделия = Объект.ПобочныеИзделия.Выгрузить(СтруктураОтбора, "ДатаПроизводства");
	Для Каждого ТекСтрока Из ТаблицаПобочныеИзделия Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаПроизводства) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.ВыпускПродукции);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	ТаблицаРасходМатериаловИРабот = Объект.РасходМатериаловИРабот.Выгрузить(, "ДатаРасхода");
	Для Каждого ТекСтрока Из ТаблицаРасходМатериаловИРабот Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаРасхода) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаРасхода);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	ТаблицаЭкономияМатериалов = Объект.ЭкономияМатериалов.Выгрузить(, "ДатаОперации");
	Для Каждого ТекСтрока Из ТаблицаЭкономияМатериалов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаОперации) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаОперации);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОсновнаяЗапись = Новый Структура;
	ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Объект.Дата);
	ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов", Перечисления.ХозяйственныеОперации.ВыпускПродукции);
	Возврат ОсновнаяЗапись;
	
КонецФункции

// Возвращает параметры выбора статей в документе.
// 
// Возвращаемое значение:
//  Массив, Структура - См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик(Объект) Экспорт
	
	ПараметрыВыбораСтатейИАналитик = Новый Массив;
	
#Область ВыходныеИзделия
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.ВыходныеИзделия";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = НЕ
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ВыходныеИзделияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ВыходныеИзделияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ВыходныеИзделияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("Отменено", Ложь);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
#КонецОбласти
	
#Область ПобочныеИзделия
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.ПобочныеИзделия";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = НЕ
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ПобочныеИзделияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ПобочныеИзделияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ПобочныеИзделияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("Отменено", Ложь);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
#КонецОбласти
	
#Область ЭкономияМатериалов
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.ЭкономияМатериалов";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = НЕ
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ЭкономияМатериаловСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ЭкономияМатериаловАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ЭкономияМатериаловАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
#КонецОбласти
	
	Возврат ПараметрыВыбораСтатейИАналитик;
	
КонецФункции

// Возвращает параметры настройки счетов учета в документе.
//  
// Возвращаемое значение:
//  Массив - см. НастройкаСчетовУчетаСервер.ПараметрыНастройки.
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	ПараметрыНастроек = Новый Массив;
	
#Область ВыходныеИзделия

	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ДоступностьПоОперации	= Истина;
	ПараметрыНастройки.ТипСтатьи				= "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным				= "Объект.ВыходныеИзделия";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ВыходныеИзделияПредставлениеОтраженияОперации");
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
#КонецОбласти
	
#Область ПобочныеИзделия

	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ДоступностьПоОперации	= Истина;
	ПараметрыНастройки.ТипСтатьи				= "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным				= "Объект.ПобочныеИзделия";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ПобочныеИзделияПредставлениеОтраженияОперации");
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
#КонецОбласти
	
#Область ЭкономияМатериалов

	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ДоступностьПоОперации	= Истина;
	ПараметрыНастройки.ТипСтатьи				= "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным				= "Объект.ЭкономияМатериалов";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ЭкономияМатериаловПредставлениеОтраженияОперации");
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
#КонецОбласти
	
	Возврат ПараметрыНастроек;
	
КонецФункции

// Формирует движения этапов по регистру сведений Реестр документов
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - владелец этапов, движения которых будут обновлены
//  Этапы - Массив - ссылки на этапы
//
Процедура ОбновитьРеестрДокументов(Распоряжение, Этапы) Экспорт
	
	ЗаполнитьРеестрДокументовВПакетномРежиме(Распоряжение, Этапы, Истина);
	
КонецПроцедуры

// Проверяет возможность разделить документ на две части.
// 
// Параметры:
// 	Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ.
// 	ТекстСообщения - Строка - в переменную помещается описание ошибок (при наличии).
// 
// Возвращаемое значение:
//	Булево - Истина если документ может быть разделен.
// 
Функция МожноРазделитьДокумент(Ссылка, ТекстСообщения) Экспорт
	
	Результат = Истина;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ТипПроизводственногоПроцесса, НомерСледующегоЭтапа, ПроизводствоНаСтороне, ЗаказПереработчику");
	
	Если (Реквизиты.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Реквизиты.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт)
		И Реквизиты.НомерСледующегоЭтапа = 0 Тогда
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не может быть несколько последних этапов.';
								|en = 'There cannot be more than one last stage.'");
		
	ИначеЕсли Реквизиты.ПроизводствоНаСтороне
		И НЕ Реквизиты.ЗаказПереработчику.Пустая() Тогда
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Для этапа создан заказ переработчику, действие не может быть выполнено.';
								|en = '""Purchase order — Subcontracting"" is created for the stage, action cannot be completed.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разделяет документ на две части: создает новый документ на заданное количество
// и уменьшает текущий документ на эту же величину.
// Этапы с типом производственного процесса "Без спецификаций" делятся в соотношении 50/50% (параметры
// КоличествоУпаковок и Упаковка в этом случае игнорируются).
// Данные табличных частей пересчитываются по пропорции.
// 
// Параметры:
// 	Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на разделяемый документ.
// 	КоличествоУпаковок - Число - размер нового документа. Количество должно быть меньше размера исходного документа. 
// 	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения количества.
// 	Отказ - Булево - Истина если разделение не было выполнено из-за ошибок.
//
Процедура РазделитьДокумент(Ссылка, КоличествоУпаковок, Упаковка, Отказ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		
		ТекстСообщения = "";
		Если НЕ МожноРазделитьДокумент(Ссылка, ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(Ссылка, Ложь, Истина).ДанныеПересчета;
		Этап = ДанныеЭтапов.Реквизиты[0];
		
		// Расчет коэффициентов (коэффициент 1 - для старого документа, коэффициент 2 - для нового)
		Если Этап.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			Коэффициент1 = 0.5;
			Коэффициент2 = 0.5;
		Иначе
			
			Если Этап.УпаковкаПлан = Упаковка Тогда
				Коэффициент2 = КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
			Иначе
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Этап.ПартияПроизводства, "ОсновноеИзделиеНоменклатура");
				КоэффициентНовый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Упаковка, Номенклатура);
				КоэффициентСтарый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Этап.УпаковкаПлан, Номенклатура);
				Коэффициент2 = (КоэффициентНовый / КоэффициентСтарый * КоличествоУпаковок)
					/ Этап.КоличествоУпаковокПлан;
			КонецЕсли;
			
			Если Коэффициент2 = 1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Количество в новом документе должно отличаться от количества в текущем.';
						|en = 'Quantity in a new document should differ from quantity in the current document.'"),,,, Отказ);
				ОтменитьТранзакцию();
				Возврат;
			ИначеЕсли Коэффициент2 > 1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Количество в новом документе не может быть больше количества в текущем.';
						|en = 'Quantity in a new document cannot be greater than in the current one.'"),,,, Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Коэффициент1 = 1 - Коэффициент2;
			
		КонецЕсли;
		
		// Пересчет старого документа
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент1);
		ПересчитатьДолиСтоимостиПриДеленииДокумента(ЗначенияЗаполнения, Коэффициент1);
		
		РеквизитыШапки = Новый Структура;
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", Окр(Этап.КоличествоУпаковокПлан * Коэффициент1, 3));
		РеквизитыШапки.Вставить("КоличествоУпаковокФакт", Окр(Этап.КоличествоУпаковокФакт * Коэффициент1, 3));
		РеквизитыШапки.Вставить("КоличествоУпаковокОтменено", Окр(Этап.КоличествоУпаковокОтменено * Коэффициент1, 3));
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент1, 3));
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		// Создание нового документа
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент2);
		ПересчитатьДолиСтоимостиПриДеленииДокумента(ЗначенияЗаполнения, Коэффициент2);
		
		РеквизитыШапки = Новый Структура;
		Для каждого Колонка Из ДанныеЭтапов.Реквизиты.Колонки Цикл
			Если Колонка.Имя = "Ссылка"
				ИЛИ Колонка.Имя = "Назначение"
				ИЛИ Колонка.Имя = "КоличествоУпаковокПлан"
				ИЛИ Колонка.Имя = "УпаковкаПлан"
				ИЛИ Колонка.Имя = "КоэффициентМаршрутнойКарты"
				ИЛИ Колонка.Имя = "Номер"
				ИЛИ Колонка.Имя = "НомерЭтапаВПартииЗапуска" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыШапки.Вставить(Колонка.Имя, Этап[Колонка.Имя]);
		КонецЦикла;
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", КоличествоУпаковок);
		РеквизитыШапки.Вставить("УпаковкаПлан", Упаковка);
		РеквизитыШапки.Вставить("КоличествоУпаковокФакт", Окр(Этап.КоличествоУпаковокФакт * Коэффициент2, 3));
		РеквизитыШапки.Вставить("КоличествоУпаковокОтменено", Окр(Этап.КоличествоУпаковокОтменено * Коэффициент2, 3));
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент2, 3));
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		ЗначенияЗаполнения.Вставить("Последователи",
			ДанныеЭтапов.Последователи.Скопировать(Новый Структура("ТипСвязи", ТипСвязиПоследователь()))
				.ВыгрузитьКолонку("Этап"));
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НоваяСсылка = ДокументОбъект.Ссылка;
		
		// Связь с предшественниками
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2Последователи.Ссылка
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Последователи КАК ЭтапПроизводства2_2Последователи
			|ГДЕ
			|	ЭтапПроизводства2_2Последователи.Этап = &Ссылка
			|	И ЭтапПроизводства2_2Последователи.ТипСвязи = &ТипСвязи");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ТипСвязи", ТипСвязиПоследователь());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
			ДокументОбъект.Заблокировать();
			
			НоваяСтрока = ДокументОбъект.Последователи.Добавить();
			НоваяСтрока.Этап = НоваяСсылка;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		КонецЦикла;
		
		// Корректировка выпуска под назначение и складских остатков
		ПередатьРезервы(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоваяСсылка));
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(Этап.Распоряжение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Деление документа';
							|en = 'Document splitting'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Создает новый этап на восполнение отмененного количества в заданном документе.
// 
// Параметры:
// 	Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - документ-источник данных.
// 	КоличествоУпаковок - Число - размер нового документа.
// 	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения количества.
// 
// Возвращаемое значение:
// 	Неопределено, ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на созданный документ.
//
Функция СоздатьДокументНаОтмененноеКоличество(Ссылка, КоличествоУпаковок, Упаковка) Экспорт
	
	НоваяСсылка = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(Ссылка, Ложь, Истина).ДанныеПересчета;
		
		// Снятие отмены строк
		СтруктураПоискаОтменено = Новый Структура("Отменено", Истина);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("Упаковка");
		СтруктураПоиска.Вставить("ВариантОбеспечения");
		СтруктураПоиска.Вставить("Склад");
		СтруктураПоиска.Вставить("Производится");
		СтруктураПоиска.Вставить("Спецификация");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("СтатьяКалькуляции");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
				ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Упаковка");
		СтруктураПоиска.Вставить("Получатель");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("Произведено");
		СтруктураПоиска.Вставить("СписатьНаРасходы");
		СтруктураПоиска.Вставить("СтатьяРасходов");
		СтруктураПоиска.Вставить("АналитикаРасходов");
		СтруктураПоиска.Вставить("АналитикаАктивовПассивов");
		СтруктураПоиска.Вставить("СчетУчета");
		СтруктураПоиска.Вставить("Субконто1");
		СтруктураПоиска.Вставить("Субконто2");
		СтруктураПоиска.Вставить("Субконто3");
		СтруктураПоиска.Вставить("ОформитьОтчетДавальцу");
		СтруктураПоиска.Вставить("ОбработатьПоСпецификации");
		СтруктураПоиска.Вставить("Спецификация");
		СтруктураПоиска.Вставить("ЭтапПотребитель");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
				НайденныеСтроки[0].ДоляСтоимости = НайденныеСтроки[0].ДоляСтоимости + Строка.ДоляСтоимости;
				ДанныеЭтапов.ВыходныеИзделия.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Упаковка");
		СтруктураПоиска.Вставить("Получатель");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("Произведено");
		СтруктураПоиска.Вставить("Цена");
		СтруктураПоиска.Вставить("СписатьНаРасходы");
		СтруктураПоиска.Вставить("СтатьяРасходов");
		СтруктураПоиска.Вставить("АналитикаРасходов");
		СтруктураПоиска.Вставить("АналитикаАктивовПассивов");
		СтруктураПоиска.Вставить("СтатьяКалькуляции");
		СтруктураПоиска.Вставить("СчетУчета");
		СтруктураПоиска.Вставить("Субконто1");
		СтруктураПоиска.Вставить("Субконто2");
		СтруктураПоиска.Вставить("Субконто3");
		СтруктураПоиска.Вставить("ОформитьОтчетДавальцу");
		СтруктураПоиска.Вставить("ОбработатьПоСпецификации");
		СтруктураПоиска.Вставить("Спецификация");
		СтруктураПоиска.Вставить("ЭтапПотребитель");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
				НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Сумма + Строка.Сумма;
				ДанныеЭтапов.ПобочныеИзделия.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидРабот");
		СтруктураПоиска.Вставить("СтатьяКалькуляции");
		СтруктураПоиска.Вставить("Исполнитель");
		СтруктураПоиска.Вставить("Выполнено");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.Трудозатраты.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.Трудозатраты.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				ДанныеЭтапов.Трудозатраты.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		// Расчет коэффициента
		Этап = ДанныеЭтапов.Реквизиты[0];
		Если Этап.УпаковкаПлан = Упаковка Тогда
			Коэффициент = КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
		Иначе
			Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Этап.ПартияПроизводства, "ОсновноеИзделиеНоменклатура");
			КоэффициентНовый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				Упаковка, Номенклатура);
			КоэффициентСтарый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				Этап.УпаковкаПлан, Номенклатура);
			Коэффициент = (КоэффициентНовый / КоэффициентСтарый * КоличествоУпаковок)
				/ Этап.КоличествоУпаковокПлан;
		КонецЕсли;
		
		// Заполнение долей стоимости в исходном документе
		Если Коэффициент < 1 Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА
				|ИЗ
				|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
				|ГДЕ
				|	ВыходныеИзделия.Ссылка = &Ссылка
				|	И ВыходныеИзделия.ДоляСтоимости = 0
				|	И НЕ ВыходныеИзделия.Отменено");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			 
			Если НЕ Запрос.Выполнить().Пустой() Тогда
			
				ДокументОбъект = Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				
				ПересчитатьДолиСтоимостиПриДеленииДокумента(ДокументОбъект, 1-Коэффициент);
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Создание нового документа
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент);
		ПересчитатьДолиСтоимостиПриДеленииДокумента(ЗначенияЗаполнения, Коэффициент);
		
		РеквизитыШапки = Новый Структура;
		Для каждого Колонка Из ДанныеЭтапов.Реквизиты.Колонки Цикл
			Если Колонка.Имя = "Ссылка"
				ИЛИ Колонка.Имя = "Назначение"
				ИЛИ Колонка.Имя = "КоличествоУпаковокПлан"
				ИЛИ Колонка.Имя = "УпаковкаПлан"
				ИЛИ Колонка.Имя = "КоэффициентМаршрутнойКарты"
				ИЛИ Колонка.Имя = "Номер"
				ИЛИ Колонка.Имя = "НомерЭтапаВПартииЗапуска" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыШапки.Вставить(Колонка.Имя, Этап[Колонка.Имя]);
		КонецЦикла;
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", КоличествоУпаковок);
		РеквизитыШапки.Вставить("УпаковкаПлан", Упаковка);
		РеквизитыШапки.Вставить("КоличествоУпаковокФакт", 0);
		РеквизитыШапки.Вставить("КоличествоУпаковокОтменено", 0);
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент, 3));
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		ЗначенияЗаполнения.Вставить("Последователи",
			ДанныеЭтапов.Последователи.Скопировать(Новый Структура("ТипСвязи", ТипСвязиПоследователь()))
				.ВыгрузитьКолонку("Этап"));
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НоваяСсылка = ДокументОбъект.Ссылка;
		
		// Связь с предшественниками
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2Последователи.Ссылка
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Последователи КАК ЭтапПроизводства2_2Последователи
			|ГДЕ
			|	ЭтапПроизводства2_2Последователи.Этап = &Ссылка
			|	И ЭтапПроизводства2_2Последователи.ТипСвязи = &ТипСвязи");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ТипСвязи", ТипСвязиПоследователь());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2 - 
			ДокументОбъект.Заблокировать();
			
			НоваяСтрока = ДокументОбъект.Последователи.Добавить();
			НоваяСтрока.Этап = НоваяСсылка;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		КонецЦикла;
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(Этап.Распоряжение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Деление документа';
							|en = 'Document splitting'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			Ссылка.Метаданные(),
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат НоваяСсылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыВыполненияКомандУстановкиДействий(ВсеЗаказы, КодДействия) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", ВсеЗаказы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В(&Заказы)
		|		И Заказы.ПроизводствоНаСтороне
		|		И ЕСТЬNULL(Заказы.ЗаказПереработчику.Проведен, ЛОЖЬ)
		|;
		|//////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В(&Заказы)
		|		И НЕ (Заказы.ПроизводствоНаСтороне
		|				И ЕСТЬNULL(Заказы.ЗаказПереработчику.Проведен, ЛОЖЬ))";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Результаты = Новый Массив();
	Результат = Новый Структура("Заказы,ПараметрыВстраивания",
		РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"),
		Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраиванияПроизводствоНаСтороне());
	Результаты.Добавить(Результат);
	Результат = Новый Структура("Заказы,ПараметрыВстраивания",
		РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"),
		Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраивания());
	Результаты.Добавить(Результат);
	
	ТекстыЗапроса = Новый Массив();
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" Или КодДействия = "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ" Тогда
		
		Для Каждого ТекущиеПараметры Из Результаты Цикл
			
			Заказы = ТекущиеПараметры.Заказы;
			ПараметрыВстраивания = ТекущиеПараметры.ПараметрыВстраивания;
			
			Если Заказы.Количество() > 0 Тогда
				
				Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА КАК НуженВопрос
					|ИЗ
					|	&ТаблицаПереопределяемый КАК Таблица
					|ГДЕ
					|	Таблица.Ссылка В(&Заказы)
					|		И Таблица.Проведен
					|		И &УсловиеПереопределяемый <> НЕОПРЕДЕЛЕНО
					|		И &УсловиеПереопределяемый < &ДатаОтгрузкиНовыхСтрок
					|		И ИСТИНА В(
					|			ВЫБРАТЬ ПЕРВЫЕ 1
					|				ИСТИНА КАК ЕстьЗаписи
					|			ИЗ
					|				РегистрСведений.РаспределениеЗапасов КАК ЗаписиЗаказа
					|			ГДЕ
					|				ЗаписиЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
					|					И ЗаписиЗаказа.ЗаказНаОтгрузку = Таблица.Ссылка.ЗаказПереработчику)";
				
				Текст = СтрЗаменить(Текст, "&ТаблицаПереопределяемый", ПараметрыВстраивания.ИмяОбъекта);
				Текст = СтрЗаменить(Текст, "&УсловиеПереопределяемый",
					ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов);
				ТекстыЗапроса.Добавить(Текст);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;



	
	Результат = Новый Структура();
	Результат.Вставить("НуженВопрос", Ложь);
	Результат.Вставить("ДатаОтгрузкиНовыхСтрок", Неопределено);
	Результат.Вставить("ПараметрыВыполнения", Результаты);
	Результат.Вставить("КодДействия", КодДействия);
	Результат.Вставить("СнятьФлагОтгружатьОднойДатой", Ложь);
	Результат.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Истина);
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ДатаОтгрузкиНовыхСтрок = НачалоДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ДатаОтгрузкиНовыхСтрок", ДатаОтгрузкиНовыхСтрок);
		Запрос.УстановитьПараметр("Заказы", ВсеЗаказы);
		
		Результат.НуженВопрос = Не Запрос.Выполнить().Пустой();
		Результат.ДатаОтгрузкиНовыхСтрок = ДатаОтгрузкиНовыхСтрок;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Объект - ДокументОбъект
// 	Изменения - ТаблицаЗначений
// 	Режим - Строка
// 	ПараметрыЗаполнения - Структура
// 	Параметры - см. УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса
// Возвращаемое значение:
// 	Строка - Описание
Функция ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения, Параметры) Экспорт
	
	ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузки(
		ПараметрыЗаполнения,
		Объект.НеОтгружатьЧастями,
		Объект.ДатаОтгрузки,
		Объект.ОбеспечениеМатериаламиИРаботами,
		"ДатаОтгрузки");
		
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(
			Изменения.ВыгрузитьКолонку("Строка"),
			"ДатаОтгрузки",
			Объект.НеОтгружатьЧастями,
			Объект.ДатаОтгрузки);
			
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
		ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ИзмененныеРеквизиты = "";
	
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		НовыйСтатус = Неопределено;
		// Учет ограничений указания вариантов обеспечения в этапе - если есть отгрузить, то меняется статус документа.
		Если Изменения.Количество() > 0
				И Изменения.Найти(Перечисления.ВариантыОбеспечения.Отгрузить, "ВариантОбеспечения") <> Неопределено Тогда
			Если Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
					ИЛИ Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован
					ИЛИ Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
				НовыйСтатус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
			КонецЕсли;
		// Учет ограничений указания вариантов обеспечения в этапе - если есть Резервировать, то меняется статус документа.
		ИначеЕсли Изменения.Количество() > 0
				И Изменения.Найти(Перечисления.ВариантыОбеспечения.СоСклада, "ВариантОбеспечения") <> Неопределено Тогда
			Если Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
				НовыйСтатус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НовыйСтатус <> Неопределено Тогда
			СтатусДоИзменения = Объект.Статус;
			Объект.Статус = НовыйСтатус;
			ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
				Объект,
				СтатусДоИзменения,
				Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		Объект,
		ПараметрыУказанияСерий(Объект).ОбеспечениеМатериаламиИРаботами);
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Функция ПараметрыПроверкиРеквизитов(ИмяПоля = "", ИмяПоляПроверки = "")

	Возврат Новый Структура("ИмяПоля,ИмяПоляПроверки,ШаблонСообщения", ИмяПоля, ИмяПоляПроверки, "");

КонецФункции

Процедура СообщитьОбОшибкахЗаполнения(Объект, Выборка, СписокРеквизитов, ИмяТЧ = "", Отказ = Ложь) Экспорт
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ТипЗнч(Объект) <> Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		КлючДанных = Неопределено;
		ПутьКДанным = Объект.ПутьКДаннымРеквизитаФормыРедактирования();
	Иначе
		КлючДанных = Объект;
		ПутьКДанным = "";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Для каждого ПараметрыПроверки Из СписокРеквизитов Цикл
			Если Выборка[ПараметрыПроверки.ИмяПоляПроверки] <> Истина Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяТЧ <> "" Тогда // проверка табличной части
				ИмяСписка = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
				Если ЗначениеЗаполнено(ПараметрыПроверки.ШаблонСообщения) Тогда
					Шаблон = ПараметрыПроверки.ШаблонСообщения;
					Текст = СтрШаблон(Шаблон, Формат(Выборка.НомерСтроки, "ЧГ="), ИмяСписка);
				Иначе
					Синоним = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ПараметрыПроверки.ИмяПоля].Синоним;
					Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", Синоним, Формат(Выборка.НомерСтроки, "ЧГ="), ИмяСписка);
				КонецЕсли;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ПараметрыПроверки.ИмяПоля);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных, Поле, ПутьКДанным, Отказ);
			Иначе
				Если ЗначениеЗаполнено(ПараметрыПроверки.ШаблонСообщения) Тогда
					Текст = ПараметрыПроверки.ШаблонСообщения;
				Иначе
					Синоним = МетаданныеОбъекта.Реквизиты[ПараметрыПроверки.ИмяПоля].Синоним;
					Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", Синоним);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных, ПараметрыПроверки.ИмяПоля, ПутьКДанным, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыШапки(Объект, МенеджерВременныхТаблиц, Отказ)
	
	СписокРеквизитов = Новый Массив;
	
#Область ПроизводствоНаСтороне
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ЗаказПереработчику", "ЗаказПереработчикуНеОФормлен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Проведение документа со статусом ""Начат"" или ""Завершен"" доступно только при наличии заказа переработчику.';
											|en = 'You can post a document with the Started or Completed status only if there is a ""Purchase order — Subcontracting"".'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ЗаказПереработчику", "ЗаказПереработчикуОФормлен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Проведение документа со статусом ""Формируется"" или ""Сформирован"" доступно только при отсутствии заказа переработчику.';
											|en = 'You can post a document with the Being generated or Generated status only if a ""Purchase order — Subcontracting"" is missing.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти

#Область ДатаПроизводства
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводства");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть меньше даты начала этапа.';
											|en = 'Production date cannot be less than the stage start date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть больше даты выполнения этапа.';
											|en = 'Production date cannot be greater than the stage fulfillment date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ДатаОтгрузки
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаОтгрузки", "ДатаОтгрузки");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ДатаРасхода
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасхода");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть меньше даты начала этапа.';
											|en = 'Consumption date cannot be less than the stage start date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть больше даты выполнения этапа.';
											|en = 'Consumption date cannot be greater than the stage fulfillment date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ДатаВыполненияРабот
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполненияРабот", "ДатаВыполненияРабот");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работ не может быть меньше даты начала этапа.';
											|en = 'Work execution date cannot be less than the stage start date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работ не может быть больше даты выполнения этапа.';
											|en = 'Work execution date cannot be greater than the stage fulfillment date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ФактическоеНачалоЭтапа
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ФактическоеНачалоЭтапа", "ФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Поле ""Дата начала выполнения этапа"" не заполнена.';
											|en = '""Date of production stage start"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ФактическоеОкончаниеЭтапа

	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ФактическоеОкончаниеЭтапа", "ФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Поле ""Дата завершения выполнения этапа"" не заполнена.';
											|en = '""Date of production stage end"" field is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ФактическоеОкончаниеЭтапа", "ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата начала выполнения этапа не может быть больше даты завершения этапа.';
											|en = 'Stage start date cannot be greater than the stage end date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
#КонецОбласти
	
	ТекстЗапроса = ТекстЗапросаКоличествоСтрокВТЧДляПроверкиЗаполнения(МенеджерВременныхТаблиц) + 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЗаказПереработчикуНеОформлен КАК ЗаказПереработчикуНеОформлен,
	|	ВложенныйЗапрос.ЗаказПереработчикуОформлен КАК ЗаказПереработчикуОформлен,
	|	ВложенныйЗапрос.ДатаПроизводства КАК ДатаПроизводства,
	|	ВложенныйЗапрос.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВложенныйЗапрос.ДатаРасхода КАК ДатаРасхода,
	|	ВложенныйЗапрос.ДатаВыполненияРабот КАК ДатаВыполненияРабот,
	|	ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа	КАК ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа КАК ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,	
	|	ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ФактическоеНачалоЭтапа КАК ФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ФактическоеОкончаниеЭтапа КАК ФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа КАК ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ФактическоеНачалоЭтапа = ДАТАВРЕМЯ(1,1,1)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ФактическоеОкончаниеЭтапа = ДАТАВРЕМЯ(1,1,1)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ФактическоеНачалоЭтапа > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И РеквизитыЭтапов.ФактическоеОкончаниеЭтапа <> ДАТАВРЕМЯ(1,1,1)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И РеквизитыЭтапов.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|					И (РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|						ИЛИ РеквизитыЭтапов.ПроизводствоНаСтороне
	|							И (НЕ РеквизитыЭтапов.ЭтоПроверкаДокумента 
	|								ИЛИ РеквизитыЭтапов.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка))
	|					)
	|					И (КоличествоСтрок.ВыходныеИзделия > 0 ИЛИ КоличествоСтрок.ПобочныеИзделия > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводства,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И РеквизитыЭтапов.ДатаПроизводства < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И (КоличествоСтрок.ВыходныеИзделияПроизведено > 0 ИЛИ КоличествоСтрок.ПобочныеИзделияПроизведено > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоОднойДатой 
	|					И РеквизитыЭтапов.ДатаПроизводства > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И (КоличествоСтрок.ВыходныеИзделияПроизведено > 0 ИЛИ КоличествоСтрок.ПобочныеИзделияПроизведено > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.НеОтгружатьЧастями
	|					И РеквизитыЭтапов.ДатаОтгрузки = ДАТАВРЕМЯ(1,1,1)
	|					И КоличествоСтрок.ДатаОтгрузкиОбязательна
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.РасходОднойДатой
	|					И РеквизитыЭтапов.ДатаРасхода = ДАТАВРЕМЯ(1,1,1)
	|					И (КоличествоСтрок.Расход > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасхода,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.РасходОднойДатой
	|					И РеквизитыЭтапов.ДатаРасхода < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И (КоличествоСтрок.Расход > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.РасходОднойДатой
	|					И РеквизитыЭтапов.ДатаРасхода > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И (КоличествоСтрок.Расход > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВыполнениеРаботОднойДатой
	|					И РеквизитыЭтапов.ДатаВыполненияРабот = ДАТАВРЕМЯ(1,1,1)
	|					И (КоличествоСтрок.Трудозатраты > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияРабот,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВыполнениеРаботОднойДатой
	|					И РеквизитыЭтапов.ДатаВыполненияРабот < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И (КоличествоСтрок.Трудозатраты > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВыполнениеРаботОднойДатой
	|					И РеквизитыЭтапов.ДатаВыполненияРабот > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И (КоличествоСтрок.Трудозатраты > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.ЭтоПроверкаДокумента
	|					И РеквизитыЭтапов.ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|					И (РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗаказПереработчикуНеОформлен,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.ЭтоПроверкаДокумента
	|					И НЕ РеквизитыЭтапов.ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|					И (РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗаказПереработчикуОформлен
	|	ИЗ
	|		РеквизитыЭтапов КАК РеквизитыЭтапов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрокВТЧ КАК КоличествоСтрок
	|			ПО РеквизитыЭтапов.Ссылка = КоличествоСтрок.Ссылка
	|) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.ЗаказПереработчикуНеОформлен
	|		ИЛИ ВложенныйЗапрос.ЗаказПереработчикуОформлен
	|		ИЛИ ВложенныйЗапрос.ДатаПроизводства
	|		ИЛИ ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа	
	|		ИЛИ ВложенныйЗапрос.ДатаОтгрузки
	|		ИЛИ ВложенныйЗапрос.ДатаРасхода
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияРабот
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.ФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа
	|	)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,,
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьВыходныеИзделия(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)

	ПроверятьВыходныеИзделия = МенеджерВременныхТаблиц.Таблицы.Найти("ВыходныеИзделия") <> Неопределено;
	Если Не ПроверятьВыходныеИзделия Тогда
		ОтключитьПроверкуЗаполненияТЧ("ВыходныеИзделия", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	ПроверятьПобочныеИзделия = МенеджерВременныхТаблиц.Таблицы.Найти("ПобочныеИзделия") <> Неопределено;
	Если Не ПроверятьПобочныеИзделия Тогда
		ОтключитьПроверкуЗаполненияТЧ("ПобочныеИзделия", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	Если Не ПроверятьВыходныеИзделия И Не ПроверятьПобочныеИзделия Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Получатель", "ПолучательНеЗаполнен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""%2"".';
											|en = '""Recipient"" in line %1 of list ""%2"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "ЗапрещенВыборСУчетомПоГТД_Операции");
	ПараметрыПроверки.ШаблонСообщения =
		НСтр("ru = 'В строке %1 списка ""%2"" выбрана номенклатура, для которой ведется учет по ГТД.
			|При включенной опции ""Запретить оформление операций с импортными товарами без номеров ГТД"" выбор такой номенклатуры запрещен.';
			|en = 'Items with CCD records are selected in line %1 of the %2 list. 
			|you cannot select such products while the ""Prohibit registration of operations with imported goods without CCD numbers"" option is enabled.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
		
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Получатель", "РаботыЗапрещеноВыпускатьНаСклад");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Работы можно выпустить в подразделение или списать на расходы, передача работ на склад не предусмотрена (строка %1 списка ""%2"").';
											|en = 'You can release works to business unit or write off as expenses, work transfer to warehouse is not available (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НазначениеНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Назначение"" в строке %1 списка ""%2"".';
											|en = '""Assignment"" in line %1 of list ""%2"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НазначениеСовпадаетСЭтапом");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Назначение изделия не может совпадать с назначением этапа производства (строке %1 списка ""%2"").';
											|en = 'The purpose of product cannot match with the purpose of production stage (to the %1 string of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "ДоляСтоимостиНеЗаполнена");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не удалось рассчитать долю стоимости для номенклатуры в строке %1 списка ""%2"".';
											|en = 'Cannot calculate cost share for products in line %1 of the ""%2"" list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Произведено", "ПроизведеноНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть меньше даты начала этапа (строка %1 списка ""%2"").';
											|en = 'Production date cannot be less than the stage start date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть больше даты выполнения этапа (строка %1 списка ""%2"").';
											|en = 'Production date cannot be greater than the stage fulfillment date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "СписаниеНаРасходТоваровПриПроизводствеНаСтороне");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не допускается списание товара (тары) на расходы при переработке на стороне (строка %1 списка ""%2"").';
											|en = 'Cannot write off goods (package) as expenses while processing by the third party (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
		
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ПричинаОтмены", "ПричинаОтменыНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "ПодразделениеДоговораНазначенияНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнено подразделение договора назначения (строка %1 списка ""%2"").';
											|en = 'Business unit of assignment contract is not filled in (string %1 of the list ""%2"").'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.РаботыЗапрещеноВыпускатьНаСклад,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.ПолучательНеЗаполнен,
	|	ВложенныйЗапрос.НазначениеНеЗаполнено,
	|	ВложенныйЗапрос.НазначениеСовпадаетСЭтапом,
	|	ВложенныйЗапрос.ДоляСтоимостиНеЗаполнена,
	|	ВложенныйЗапрос.ПроизведеноНеЗаполнено,
	|	ВложенныйЗапрос.ДатаПроизводстваНеЗаполнена,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ЗапрещенВыборСУчетомПоГТД_Операции,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.СписаниеНаРасходТоваровПриПроизводствеНаСтороне,
	|	ВложенныйЗапрос.ПричинаОтменыНеЗаполнена,
	|	ВложенныйЗапрос.ПодразделениеДоговораНазначенияНеЗаполнено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА &ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД
	|				И ТабличнаяЧасть.Номенклатура.ВестиУчетПоГТД
	|				И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗапрещенВыборСУчетомПоГТД_Операции,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|					И ТабличнаяЧасть.Получатель <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК РаботыЗапрещеноВыпускатьНаСклад,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Получатель В (
	|							НЕОПРЕДЕЛЕНО, 
	|							ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), 
	|							ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПолучательНеЗаполнен,
	|		ВЫБОР
	|			КОГДА (ТабличнаяЧасть.Произведено
	|						И ТабличнаяЧасть.ОбработатьПоСпецификации
	|					ИЛИ ТабличнаяЧасть.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|						И РеквизитыЭтапов.Распоряжение.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется)
	|				И ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НазначениеНеЗаполнено,
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ТабличнаяЧасть.Назначение = РеквизитыЭтапов.Назначение
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НазначениеСовпадаетСЭтапом,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДоляСтоимости = 0
	|					И РеквизитыЭтапов.СпособРаспределенияЗатратНаВыходныеИзделия В (
	// способ ""По долям стоимости"" проверяется отдельно
	|								ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости),
	|								ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоВесу),
	|								ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоОбъему))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДоляСтоимостиНеЗаполнена,
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.Произведено
	|					И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПроизведеноНеЗаполнено,
	|		ВЫБОР
	|			КОГДА (ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|					И (РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|						ИЛИ РеквизитыЭтапов.ПроизводствоНаСтороне
	|							И (НЕ РеквизитыЭтапов.ЭтоПроверкаДокумента 
	|								ИЛИ РеквизитыЭтапов.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка))
	|					)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
	|			)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаПроизводства < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.Произведено
	|					И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаПроизводства > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа 
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.Произведено
	|					И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СписатьНаРасходы	
	|					И ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И РеквизитыЭтапов.ПроизводствоНаСтороне	
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СписаниеНаРасходТоваровПриПроизводствеНаСтороне,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПричинаОтменыНеЗаполнена,
	|		ВЫБОР
	|			КОГДА НЕ &ПакетныйРежимФормированияЭтапов
	|					И РеквизитыЭтапов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|					И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|					И ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(ТабличнаяЧасть.Назначение КАК Справочник.Назначения).Заказ) <> ТИП(Документ.ЗаказДавальца)
	|					И ЕСТЬNULL(
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.Назначение КАК Справочник.Назначения).Договор.Подразделение,
	|						ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПодразделениеДоговораНазначенияНеЗаполнено
	|	ИЗ
	|		ВыходныеИзделия КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.РаботыЗапрещеноВыпускатьНаСклад
	|			ИЛИ ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПолучательНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.НазначениеНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.НазначениеСовпадаетСЭтапом
	|			ИЛИ ВложенныйЗапрос.ДоляСтоимостиНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПроизведеноНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ДатаПроизводстваНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ЗапрещенВыборСУчетомПоГТД_Операции
	|			ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа
	|			ИЛИ ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа
	|			ИЛИ ВложенныйЗапрос.СписаниеНаРасходТоваровПриПроизводствеНаСтороне
	|			ИЛИ ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПодразделениеДоговораНазначенияНеЗаполнено
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Если ПроверятьВыходныеИзделия Тогда
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПроверкаПобочногоВыпуска", Ложь);
		Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		Запрос.УстановитьПараметр("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД", ПолучитьФункциональнуюОпцию("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД"));
		Запрос.УстановитьПараметр("ПакетныйРежимФормированияЭтапов", ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные())
																	 И УправлениеПроизводством.ВыполняетсяПакетноеФормированиеЭтапов(Объект));
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Выборка = Запрос.Выполнить().Выбрать();
		СообщитьОбОшибкахЗаполнения(
			Объект,
			Выборка,
			СписокРеквизитов,
			"ВыходныеИзделия",
			Отказ);
			
	КонецЕсли;
	
	Если ПроверятьПобочныеИзделия Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВыходныеИзделия КАК ТабличнаяЧасть", "ПобочныеИзделия КАК ТабличнаяЧасть");
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПроверкаПобочногоВыпуска", Истина);
		Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		Запрос.УстановитьПараметр("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД", ПолучитьФункциональнуюОпцию("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД"));
		Запрос.УстановитьПараметр("ПакетныйРежимФормированияЭтапов", ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные())
																	 И УправлениеПроизводством.ВыполняетсяПакетноеФормированиеЭтапов(Объект));
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Выборка = Запрос.Выполнить().Выбрать();
		СообщитьОбОшибкахЗаполнения(
			Объект,
			Выборка,
			СписокРеквизитов,
			"ПобочныеИзделия",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбеспечениеМатериаламиИРаботами(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)

	ПроверятьОбеспечение = МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") <> Неопределено;
	Если Не ПроверятьОбеспечение Тогда
		ОтключитьПроверкуЗаполненияТЧ("ОбеспечениеМатериаламиИРаботами", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаОтгрузки", "ДатаОтгрузкиНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Склад", "СкладНеЗаполнен");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "ЗапрещенВыборРабот");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не допускается выбор работ при переработке на стороне (строка %1 списка ""%2"").';
											|en = 'Cannot select works while processing by the third party (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Обособленно", "ВариантОбеспеченияПФ");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Для производимых полуфабрикатов необходимо установить обособленное обеспечение (строка %1 списка ""%2"").';
											|en = 'Set the assigned supply for the manufactured semi-finished products (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузка");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов доступна только при статусах ""Начат"", ""Завершен"" (строка %1 списка ""%2"").';
											|en = 'Material shipment is available only for statuses ""Started"", ""Completed"" (%1 line of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "ВариантОбеспеченияЭтапЗавершен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В завершенном этапе для всех материалов необходимо установить действие ""Отгрузить"" или ""Отгрузить обособленно"" (строка %1 списка ""%2"").';
											|en = 'Select the Ship or Ship separately action (line %1 of the ""%2"" list) for all materials at the completed stage.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В статусе ""Начат"" и ""Завершен"" указание статьи калькуляции является обязательным (строка %1 списка ""%2"").';
											|en = 'Product cost element specification is required in the Started and Completed status (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ПричинаОтмены", "ПричинаОтменыНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	Если ТипЗнч(Объект) <> Тип("ОбработкаОбъект.РедактированиеЭтаповПроизводства") Тогда // редактирование этапов производства на стороне
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузкаЗаказНеПроведен");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов недоступна т.к. заказ переработчику не проведен (строка %1 списка ""%2"").';
												|en = 'Material shipment is not available as the ""Purchase order — Subcontracting"" is not posted (%1 line of the ""%2"" list).'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузкаНетЗаказа");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов недоступна т.к. не оформлен заказ переработчику (строка %1 списка ""%2"").';
												|en = 'Material shipment is not available as the ""Purchase order — Subcontracting"" is not registered (%1 line of the ""%2"" list).'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
	КонецЕсли; 

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.ЗапрещенВыборРабот,
	|	ВложенныйЗапрос.ДатаОтгрузкиНеЗаполнена,
	|	ВложенныйЗапрос.ВариантОбеспеченияПФ,
	|	ВложенныйЗапрос.ВариантОбеспеченияЭтапЗавершен,
	|	ВложенныйЗапрос.СкладНеЗаполнен,
	|	ВложенныйЗапрос.НедоступнаОтгрузка,
	|	ВложенныйЗапрос.НедоступнаОтгрузкаЗаказНеПроведен,
	|	ВложенныйЗапрос.НедоступнаОтгрузкаНетЗаказа,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗапрещенВыборРабот,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И ТабличнаяЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВариантОбеспеченияЭтапЗавершен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|					И НЕ РеквизитыЭтапов.НеОтгружатьЧастями
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОтгрузкиНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузка,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ЭтоПроверкаДокумента
	|					И РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И РеквизитыЭтапов.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|					И НЕ ВЫРАЗИТЬ(РеквизитыЭтапов.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузкаЗаказНеПроведен,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ЭтоПроверкаДокумента
	|					И РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И РеквизитыЭтапов.ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузкаНетЗаказа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И ТабличнаяЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СкладНеЗаполнен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Производится И НЕ ТабличнаяЧасть.Обособленно
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВариантОбеспеченияПФ,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПричинаОтменыНеЗаполнена
	|	ИЗ
	|		ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|			ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.СкладНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ДатаОтгрузкиНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ВариантОбеспеченияПФ
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузка
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузкаЗаказНеПроведен
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузкаНетЗаказа
	|			ИЛИ ВложенныйЗапрос.ЗапрещенВыборРабот
	|			ИЛИ ВложенныйЗапрос.ВариантОбеспеченияЭтапЗавершен
	|			ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ПричинаОтменыНеЗаполнена)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));

	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"ОбеспечениеМатериаламиИРаботами",
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьТрудозатраты(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)
	
	ПроверятьТрудозатраты = МенеджерВременныхТаблиц.Таблицы.Найти("Трудозатраты") <> Неопределено;
	Если Не ПроверятьТрудозатраты Тогда
		ОтключитьПроверкуЗаполненияТЧ("Трудозатраты", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Исполнитель", "ИсполнительНеЗаполнен");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Выполнено", "ВыполненоНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работы не может быть меньше даты начала этапа (строка %1 списка ""%2"").';
											|en = 'Work execution date cannot be less than the stage start date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работы не может быть больше даты выполнения этапа (строка %1 списка ""%2"").';
											|en = 'Work execution date cannot be greater than the stage fulfillment date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ПричинаОтмены", "ПричинаОтменыНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ИсполнительНеЗаполнен,
	|	ВложенныйЗапрос.ВыполненоНеЗаполнено,
	|	ВложенныйЗапрос.ДатаВыполненияНеЗаполнена,
	|	ВложенныйЗапрос.ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Выполнено И ТабличнаяЧасть.Исполнитель В (
	|													НЕОПРЕДЕЛЕНО,
	|													ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка),
	|													ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И НЕ РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИсполнительНеЗаполнен,
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.Выполнено
	|				И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыполненоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Выполнено
	|				И ТабличнаяЧасть.ДатаВыполнения = ДАТАВРЕМЯ(1,1,1)
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаВыполнения < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ) 
	|					И ТабличнаяЧасть.Выполнено
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаВыполнения > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа 
	|					И ТабличнаяЧасть.Выполнено
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПричинаОтменыНеЗаполнена
	|	ИЗ
	|		Трудозатраты КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.КоличествоНеЗаполнено
	|		ИЛИ ВложенныйЗапрос.ИсполнительНеЗаполнен
	|		ИЛИ ВложенныйЗапрос.ВыполненоНеЗаполнено
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"Трудозатраты",
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьРасходМатериаловИРабот(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)
	
	ПроверятьРасходМатериаловИРабот = МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") <> Неопределено;
	Если Не ПроверятьРасходМатериаловИРабот Тогда
		ОтключитьПроверкуЗаполненияТЧ("РасходМатериаловИРабот", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть меньше даты начала этапа (строка %1 списка ""%2"").';
											|en = 'Consumption date cannot be less than the stage start date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть больше даты выполнения этапа (строка %1 списка ""%2"").';
											|en = 'Consumption date cannot be greater than the stage fulfillment date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В статусе ""Начат"" и ""Завершен"" указание статьи калькуляции является обязательным (строка %1 списка ""%2"").';
											|en = 'Product cost element specification is required in the Started and Completed status (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.ДатаРасходаНеЗаполнена,
	|	ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаРасхода = ДАТАВРЕМЯ(1, 1, 1)
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаРасхода < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаРасхода > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено
	|	ИЗ
	|		РасходМатериаловИРабот КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|		ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки");
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"РасходМатериаловИРабот",
		Отказ);

КонецПроцедуры

Процедура ПроверитьЭкономияМатериалов(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)
	
	ПроверятьЭкономияМатериалов = МенеджерВременныхТаблиц.Таблицы.Найти("ЭкономияМатериалов") <> Неопределено;
	Если Не ПроверятьЭкономияМатериалов Тогда
		ОтключитьПроверкуЗаполненияТЧ("ЭкономияМатериалов", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;

	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Получатель", "ПолучательНеЗаполнен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""%2"".';
											|en = '""Recipient"" in line %1 of list ""%2"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Обособить", "НедопускаетсяОбособлениеТары");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не допускается обособление тары (строка %1 списка ""%2"").';
											|en = 'Cannot separate package (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаОперации", "ДатаОперацииНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Обособить", "ОбособлениеДавальческихМатериалов");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'При производстве из давальческого сырья, нельзя вернуть неизрасходованные материалы не обособленно (строка %1 списка ""%2"").';
											|en = 'Cannot return unused materials without assignment when using customer-provided materials for production (line %1 of list ""%2"").'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.ПолучательНеЗаполнен,
	|	ВложенныйЗапрос.ДатаОперацииНеЗаполнена,
	|	ВложенныйЗапрос.НедопускаетсяОбособлениеТары,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ОбособлениеДавальческихМатериалов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаОперации = ДАТАВРЕМЯ(1, 1, 1)
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОперацииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Получатель В (НЕОПРЕДЕЛЕНО,
	|						ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|						ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПолучательНеЗаполнен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					И ТабличнаяЧасть.Обособить
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедопускаетсяОбособлениеТары,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|				И НЕ ТабличнаяЧасть.Обособить
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОбособлениеДавальческихМатериалов
	|	ИЗ
	|		ЭкономияМатериалов КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПолучательНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.ДатаОперацииНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.НедопускаетсяОбособлениеТары
	|			ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ОбособлениеДавальческихМатериалов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"ЭкономияМатериалов",
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьРавенствоПоМатериалам(Объект, МенеджерВременныхТаблиц, Отказ)
	
	Если Отказ
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ЭкономияМатериалов") = Неопределено
		Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	// 0
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	РеквизитыЭтапов.Статус              КАК Статус,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Подразделение        КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Подразделение,
	|	РеквизитыЭтапов.Статус,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Подразделение        КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	РасходМатериаловИРабот КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Подразделение        КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|ПОМЕСТИТЬ Экономия
	|ИЗ
	|	ЭкономияМатериалов КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	Обеспечение.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).Представление                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(Обеспечение.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление  КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление           КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Обеспечение.Количество - (ЕСТЬNULL(Расход.Количество, 0) + ЕСТЬNULL(Экономия.Количество, 0)) КАК Количество
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеМатериаламиИРаботами КАК ИсходнаяТЧ
	|			ПО ИсходнаяТЧ.Ссылка      = Обеспечение.Ссылка
	|			 И ИсходнаяТЧ.НомерСтроки = Обеспечение.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расход КАК Расход
	|			ПО Расход.Ссылка         = Обеспечение.Ссылка
	|			 И Расход.Подразделение  = Обеспечение.Подразделение
	|			 И Расход.Номенклатура   = Обеспечение.Номенклатура
	|			 И Расход.Характеристика = Обеспечение.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Экономия КАК Экономия
	|			ПО Экономия.Ссылка         = Обеспечение.Ссылка
	|			 И Экономия.Подразделение  = Обеспечение.Подразделение
	|			 И Экономия.Номенклатура   = Обеспечение.Номенклатура
	|			 И Экономия.Характеристика = Обеспечение.Характеристика
	|ГДЕ
	|	Обеспечение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И Обеспечение.Количество > ЕСТЬNULL(Расход.Количество, 0) + ЕСТЬNULL(Экономия.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	Расход.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                  КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление   КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).Представление                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(Расход.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление    КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление        КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Расход.Количество - ЕСТЬNULL(Обеспечение.Количество, 0) КАК Количество
	|ИЗ
	|	Расход КАК Расход
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасходМатериаловИРабот КАК ИсходнаяТЧ
	|			ПО ИсходнаяТЧ.Ссылка      = Расход.Ссылка
	|			 И ИсходнаяТЧ.НомерСтроки = Расход.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|			ПО Расход.Ссылка         = Обеспечение.Ссылка
	|			 И Расход.Подразделение  = Обеспечение.Подразделение
	|			 И Расход.Номенклатура   = Обеспечение.Номенклатура
	|			 И Расход.Характеристика = Обеспечение.Характеристика
	|ГДЕ
	|	Расход.Количество > ЕСТЬNULL(Обеспечение.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5
	|ВЫБРАТЬ
	|	Экономия.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).Представление                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(Экономия.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление  КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление        КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Экономия.Количество - (ЕСТЬNULL(Обеспечение.Количество, 0) - ЕСТЬNULL(Расход.Количество, 0)) КАК Количество
	|ИЗ
	|	Экономия КАК Экономия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭкономияМатериалов КАК ИсходнаяТЧ
	|			ПО ИсходнаяТЧ.Ссылка      = Экономия.Ссылка
	|			 И ИсходнаяТЧ.НомерСтроки = Экономия.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|			ПО Экономия.Ссылка         = Обеспечение.Ссылка
	|			 И Экономия.Подразделение  = Обеспечение.Подразделение
	|			 И Экономия.Номенклатура   = Обеспечение.Номенклатура
	|			 И Экономия.Характеристика = Обеспечение.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расход КАК Расход
	|			ПО Экономия.Ссылка         = Расход.Ссылка
	|			 И Экономия.Подразделение  = Расход.Подразделение
	|			 И Экономия.Номенклатура   = Расход.Номенклатура
	|			 И Экономия.Характеристика = Расход.Характеристика
	|ГДЕ
	|	Экономия.Количество > (ЕСТЬNULL(Обеспечение.Количество, 0) - ЕСТЬNULL(Расход.Количество, 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Обеспечение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Расход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Экономия
	|;");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(ИсходнаяТЧ.Номенклатура КАК Справочник.Номенклатура)"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();
	
	Если ТипЗнч(Объект) <> Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		КлючДанных = Неопределено;
		ПутьКДанным = Объект.ПутьКДаннымРеквизитаФормыРедактирования();
	Иначе
		КлючДанных = Объект;
		ПутьКДанным = "";
	КонецЕсли;
	
	// Не указан расход материала
	Если Не Результат[3].Пустой() Тогда
		
		ШаблонСообщенияОбеспечениеБольше = НСтр("ru = 'Не указан расход материала ""%1"" в количестве %2 %3';
												|en = 'The ""%1"" material consumption in the amount of %2 %3 is not specified'");
		ШаблонСообщенияОбеспечениеБольшеРабота = НСтр("ru = 'Не указан расход работ ""%1"" в количестве %2 %3';
														|en = 'The ""%1"" work consumption in the amount of %2 %3 is not specified'");
		
		Выборка = Результат[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										Выборка.Номенклатура, 
										Выборка.Характеристика);
										
			Если ЗначениеЗаполнено(Выборка.Упаковка)
				И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
					ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
				Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
				ЕдиницаИзмерения = Выборка.Упаковка;
			Иначе
				Количество = Выборка.Количество;
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			ТекстШаблона = ?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, ШаблонСообщенияОбеспечениеБольшеРабота, ШаблонСообщенияОбеспечениеБольше);
			ТекстСообщения = СтрШаблон(ТекстШаблона, НоменклатураПредставление, Формат(Количество, "ЧН=0; ЧГ=0"), ЕдиницаИзмерения);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Расход превышает запланированное к обеспечению
	Если Не Результат[4].Пустой() Тогда
		
		ШаблонСообщенияРасходБольше = НСтр("ru = 'Количество расхода материала ""%1"" превышает доступное на %2 %3';
											|en = 'Material consumption amount ""%1"" exceeds the available one by %2 %3'");
		ШаблонСообщенияРасходБольшеРабота = НСтр("ru = 'Количество расхода работы ""%1"" превышает доступное на %2 %3';
												|en = 'Work consumption amount ""%1"" exceeds the available one by %2 %3'");
		
		Выборка = Результат[4].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										Выборка.Номенклатура, 
										Выборка.Характеристика);
										
			Если ЗначениеЗаполнено(Выборка.Упаковка)
				И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
					ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
				Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
				ЕдиницаИзмерения = Выборка.Упаковка;
			Иначе
				Количество = Выборка.Количество;
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			ТекстШаблона = ?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, ШаблонСообщенияРасходБольшеРабота, ШаблонСообщенияРасходБольше);
			ТекстСообщения = СтрШаблон(ТекстШаблона, НоменклатураПредставление, Формат(Количество, "ЧН=0; ЧГ=0"), ЕдиницаИзмерения);
								
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасходМатериаловИРабот", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Количество неизрасходованного материала превышает запланированное к обеспечению
	Если Не Результат[5].Пустой() Тогда
		
		ШаблонСообщенияЭкономия =
			НСтр("ru = 'Количество неизрасходованного материала ""%1"" превышает доступное на %2 %3';
				|en = 'Unconsumed material amount ""%1"" exceeds the available one by %2 %3'");
		
		Выборка = Результат[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										Выборка.Номенклатура, 
										Выборка.Характеристика);
										
			Если ЗначениеЗаполнено(Выборка.Упаковка)
				И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
					ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
				Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
				ЕдиницаИзмерения = Выборка.Упаковка;
			Иначе
				Количество = Выборка.Количество;
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияЭкономия,
								НоменклатураПредставление,
								Формат(Количество, "ЧН=0; ЧГ=0"),
								ЕдиницаИзмерения);
								
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭкономияМатериалов", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаКоличествоСтрокВТЧДляПроверкиЗаполнения(МенеджерВременныхТаблиц)
	
	ТекстЗапросаКоличествоСтрок = 
	"ВЫБРАТЬ
	|	РеквизитыЭтапов.Ссылка                     КАК Ссылка,
	|	КОЛИЧЕСТВО(ТВыходныеИзделия.Ссылка)        КАК ВыходныеИзделия,
	|	СУММА(ТВыходныеИзделия.ПризнакПроизведено) КАК ВыходныеИзделияПроизведено,
	|	КОЛИЧЕСТВО(ТПобочныеИзделия.Ссылка)        КАК ПобочныеИзделия,
	|	СУММА(ТПобочныеИзделия.ПризнакПроизведено) КАК ПобочныеИзделияПроизведено,
	|	КОЛИЧЕСТВО(ТОбеспечение.Ссылка)            КАК Обеспечение,
	|	МАКСИМУМ(ТОбеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)) КАК ДатаОтгрузкиОбязательна,
	|	КОЛИЧЕСТВО(ТРасход.Ссылка)                 КАК Расход,
	|	КОЛИЧЕСТВО(ТТрудозатраты.Ссылка)           КАК Трудозатраты
	|ПОМЕСТИТЬ ВТКоличествоСтрокВТЧ
	|ИЗ
	|	РеквизитыЭтапов КАК РеквизитыЭтапов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВыходныеИзделия КАК ТВыходныеИзделия ПО РеквизитыЭтапов.Ссылка = ТВыходныеИзделия.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПобочныеИзделия КАК ТПобочныеИзделия ПО РеквизитыЭтапов.Ссылка = ТПобочныеИзделия.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеМатериаламиИРаботами КАК ТОбеспечение ПО РеквизитыЭтапов.Ссылка = ТОбеспечение.Ссылка 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасходМатериаловИРабот КАК ТРасход ПО РеквизитыЭтапов.Ссылка = ТРасход.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Трудозатраты КАК ТТрудозатраты ПО РеквизитыЭтапов.Ссылка = ТТрудозатраты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыЭтапов.Ссылка
	|	
	|;
	|////////////////////////////////////////////////////////////////
	|";
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВыходныеИзделия") = Неопределено Тогда
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"КОЛИЧЕСТВО(ТВыходныеИзделия.Ссылка)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"СУММА(ТВыходныеИзделия.ПризнакПроизведено)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"ЛЕВОЕ СОЕДИНЕНИЕ ВыходныеИзделия КАК ТВыходныеИзделия ПО РеквизитыЭтапов.Ссылка = ТВыходныеИзделия.Ссылка",
			"");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ПобочныеИзделия") = Неопределено Тогда
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"КОЛИЧЕСТВО(ТПобочныеИзделия.Ссылка)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"СУММА(ТПобочныеИзделия.ПризнакПроизведено)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"ЛЕВОЕ СОЕДИНЕНИЕ ПобочныеИзделия КАК ТПобочныеИзделия ПО РеквизитыЭтапов.Ссылка = ТПобочныеИзделия.Ссылка",
			"");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") = Неопределено Тогда
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"КОЛИЧЕСТВО(ТОбеспечение.Ссылка)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеМатериаламиИРаботами КАК ТОбеспечение ПО РеквизитыЭтапов.Ссылка = ТОбеспечение.Ссылка",
			"");
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"МАКСИМУМ(ТОбеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))",
			"ЛОЖЬ");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") = Неопределено Тогда
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"КОЛИЧЕСТВО(ТРасход.Ссылка)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"ЛЕВОЕ СОЕДИНЕНИЕ РасходМатериаловИРабот КАК ТРасход ПО РеквизитыЭтапов.Ссылка = ТРасход.Ссылка",
			"");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("Трудозатраты") = Неопределено Тогда
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"КОЛИЧЕСТВО(ТТрудозатраты.Ссылка)",
			"0" );
		ТекстЗапросаКоличествоСтрок = СтрЗаменить(ТекстЗапросаКоличествоСтрок,
			"ЛЕВОЕ СОЕДИНЕНИЕ Трудозатраты КАК ТТрудозатраты ПО РеквизитыЭтапов.Ссылка = ТТрудозатраты.Ссылка",
			"");
	КонецЕсли;
	
	Возврат ТекстЗапросаКоличествоСтрок;
	
КонецФункции

Процедура ОтключитьПроверкуЗаполненияТЧ(ИмяТЧ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов)
	
	Для Каждого ПутьКРеквизиту Из ПроверяемыеРеквизиты Цикл
		Если Найти(ПутьКРеквизиту, ИмяТЧ) > 0
			И МассивНепроверяемыхРеквизитов.Найти(ПутьКРеквизиту) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ПутьКРеквизиту);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИспользованиеПартионногоУчета22(Объект, Отказ) Экспорт
	
	ДатаДокумента = Дата('00010101');
	
	Для Каждого Строка Из Объект.ВыходныеИзделия Цикл
		Если ЗначениеЗаполнено(Строка.ДатаПроизводства) И ЗначениеЗаполнено(ДатаДокумента)
			И Не Строка.Отменено Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ПобочныеИзделия Цикл
		Если ЗначениеЗаполнено(Строка.ДатаПроизводства) И ЗначениеЗаполнено(ДатаДокумента)
			И Не Строка.Отменено Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		Если ЗначениеЗаполнено(Строка.ДатаОтгрузки) И ЗначениеЗаполнено(ДатаДокумента)
			И Не Строка.Отменено Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаОтгрузки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РасходМатериаловИРабот Цикл
		Если ЗначениеЗаполнено(Строка.ДатаРасхода) И ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаРасхода);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ЭкономияМатериалов Цикл
		Если ЗначениеЗаполнено(Строка.ДатаОперации) И ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаОперации);
		КонецЕсли;
	КонецЦикла;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(Объект, ДатаДокумента, Отказ);
	
КонецПроцедуры

Функция ПроверитьПериодыОтраженияЗатрат(ПартияПроизводства, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Таблица.ДатаПроизводства,МЕСЯЦ)) КАК ДатаПроизводства
	|ПОМЕСТИТЬ МаксимальныеДатыВыпуска
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.ПартияПроизводства = &ПартияПроизводства
	|	И Таблица.Ссылка.Проведен
	|	И Таблица.Произведено
	|	И НЕ Таблица.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложеннаяТаблица.ДатаПотребления) КАК ДатаПотребления
	|ПОМЕСТИТЬ МаксимальныеДатыПотребления
	|ИЗ (
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Таблица.ДатаОтгрузки,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.ПартияПроизводства = &ПартияПроизводства
	|	И Таблица.Ссылка.Проведен
	|	И Таблица.ДатаОтгрузки <> ДАТАВРЕМЯ(1,1,1)
	|	И НЕ Таблица.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Таблица.ДатаРасхода,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.ПартияПроизводства = &ПартияПроизводства
	|	И Таблица.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Таблица.ДатаВыполнения,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.ПартияПроизводства = &ПартияПроизводства
	|	И Таблица.Ссылка.Проведен
	|	И Таблица.Выполнено
	|	И НЕ Таблица.Отменено 
	|
	|) КАК ВложеннаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыВыпуска.ДатаПроизводства КАК ДатаПроизводства,
	|	ДатыПотребления.ДатаПотребления КАК ДатаПотребления
	|ИЗ
	|	МаксимальныеДатыВыпуска КАК ДатыВыпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеДатыПотребления КАК ДатыПотребления
	|		ПО ИСТИНА
	|ГДЕ
	|	ДатыВыпуска.ДатаПроизводства < ДатыПотребления.ДатаПотребления
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.ЭтапПроизводства2_2 КАК Т
	|				ГДЕ
	|					Т.Ссылка = &ПартияПроизводства
	|					И Т.Проведен
	|					И Т.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)))
	|");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	Результат = Запрос.Выполнить();
	
	ЕстьОшибки = Не Результат.Пустой();
	Если ЕстьОшибки Тогда
		
		// Месяц потребления раньше последнего месяца производства
		ШаблонСообщения = НСтр("ru = 'В периоде %1 по этапу есть потребление матералов (работ), при этом выпуск изделий не запланирован.
		|В выпускающем этапе требуется указать выходное изделие, на которое будут отнесены затраты, или изменить плановую дату выпуска.';
		|en = 'There is material (work) consumption in the %1 period of the stage, while goods release is not planned. 
		|At the release stage, specify a finished product to which expenses will be assigned, or change the planned release date.'");
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Выборка.ДатаПотребления, НСтр("ru = 'ДФ=''MMМM yyyy''';
																						|en = 'DF=''MMMM yyyy'''")));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция ТекстЗапросаПроверитьДолиСтоимости(Объект, ПоляСвязи, ПолеГруппыЗатрат = "") Экспорт
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросовЗаказПереработчику = ТекстыЗапросовПроверкиДолиСтоимостиВЗаказеПереработчику(Объект);
	
	ТекстЗапроса = "
	|" + ?(ТекстыЗапросовЗаказПереработчику = Неопределено, "", ТекстыЗапросовЗаказПереработчику.ВременныеТаблицы) + "
	|ВЫБРАТЬ
	|	Документ.ПартияПроизводства КАК ПартияПроизводства,
	|	Таблица.Ссылка        		КАК Ссылка,
	|	Таблица.НомерСтроки    		КАК НомерСтроки,
	|	Таблица.Номенклатура   		КАК Номенклатура,
	|	Таблица.Характеристика 		КАК Характеристика,
	|	Таблица.ДоляСтоимости  		КАК ДоляСтоимости
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|       ПО Документ.Ссылка = Таблица.Ссылка
	|ГДЕ
	|	&ОтборПартияПроизводства
	|	И Документ.Проведен
	|	И Документ.Статус <> Значение(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|	И НЕ Таблица.Отменено
	|	И &ОтборСпособРаспределенияЗатрат
	|	И &ОтборТекущийДокумент
	|" + ?(ТекстыЗапросовЗаказПереработчику = Неопределено, "", ТекстыЗапросовЗаказПереработчику.Источник) + "
	|;
	|////////////////////////////////////////////////////////////////
	|" + ПроизводствоСервер.ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПоляСвязи, ПолеГруппыЗатрат) + "
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПартияПроизводства",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено, 
			"Документ.ПартияПроизводства В(&ПартияПроизводства)",
			"Документ.ПартияПроизводства В(" + ТекстыЗапросовЗаказПереработчику.ПартииПоДолямСтоимости + ")"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТекущийДокумент", 
		?(ТекстыЗапросовЗаказПереработчику = Неопределено, 
			"(ИСТИНА)", 
			"НЕ Документ.Ссылка В(" + ТекстыЗапросовЗаказПереработчику.Этапы + ")"));	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСпособРаспределенияЗатрат",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено,
			"&СпособРаспределенияЗатратНаВыходныеИзделия = Значение(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)",
			"(ИСТИНА)"));
		
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	&ОтборПартияПроизводства
	|	И Таблица.Проведен
	|	И Таблица.Статус <> Значение(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|	И Таблица.НомерСледующегоЭтапа = 0 //ЭтоВыпускающийЭтап()
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ПартияПроизводства	
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) > 1
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПартияПроизводства",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено, 
			"Таблица.ПартияПроизводства В(&ПартияПроизводства)",
			"Таблица.ПартияПроизводства В(" + ТекстыЗапросовЗаказПереработчику.Партии + ")"));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	

	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Возврат ТекстЗапроса;
	    	
КонецФункции

Функция ТекстыЗапросовПроверкиДолиСтоимостиВЗаказеПереработчику(Объект)
	
	Если ТипЗнч(Объект) <> тип("ОбработкаОбъект.РедактированиеЭтаповПроизводства") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Структура;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Распоряжение   КАК Этап,
	|	ТаблицаИсточник.НомерСтроки	   КАК НомерСтроки,
	|	ТаблицаИсточник.Номенклатура   КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика КАК Характеристика,
	|	ТаблицаИсточник.ДоляСтоимости  КАК ДоляСтоимости,
	|	ТаблицаИсточник.Отменено	   КАК Отменено
	|ПОМЕСТИТЬ ТаблицаИсточник
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|ГДЕ
	|	НЕ ТаблицаИсточник.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.ПартияПроизводства						 КАК ПартияПроизводства,
	|	Документы.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатрат
	|ПОМЕСТИТЬ ТаблицаПартии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточник КАК ТаблицаИсточник
	|		ПО Документы.Ссылка = ТаблицаИсточник.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособРаспределенияЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточник.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	ТаблицаИсточник КАК ТаблицаИсточник";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВПакете();
	ТекстыЗапросов.Вставить("ВременныеТаблицы", ТекстЗапроса);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документы.ПартияПроизводства	КАК ПартияПроизводства,
	|	НЕОПРЕДЕЛЕНО					КАК Ссылка,
	|	ТаблицаИсточник.НомерСтроки		КАК НомерСтроки,
	|	ТаблицаИсточник.Номенклатура	КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика	КАК Характеристика,
	|	ТаблицаИсточник.ДоляСтоимости	КАК ДоляСтоимости
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточник КАК ТаблицаИсточник
	|		ПО Документы.Ссылка = ТаблицаИсточник.Этап
	|ГДЕ
	|	Документы.СпособРаспределенияЗатратНаВыходныеИзделия = 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)";
	
	ТекстЗапроса = ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() + ТекстЗапроса;
	ТекстыЗапросов.Вставить("Источник", ТекстЗапроса);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Этап КАК Этап
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов";
	
	ТекстыЗапросов.Вставить("Этапы", ТекстЗапроса);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПартии.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ТаблицаПартии КАК ТаблицаПартии";
	
	ТекстыЗапросов.Вставить("Партии", ТекстЗапроса);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПартии.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ТаблицаПартии КАК ТаблицаПартии
	|ГДЕ
	|	ТаблицаПартии.СпособРаспределенияЗатрат = 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)";
	
	ТекстыЗапросов.Вставить("ПартииПоДолямСтоимости", ТекстЗапроса);
	
	
	Возврат ТекстыЗапросов;
	
КонецФункции	

#КонецОбласти

#Область Проведение

#Область Инициализация

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	Если ИмяРегистра = "РегистрНакопления.СебестоимостьТоваров"
		ИЛИ ИмяРегистра = "РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту" Тогда
		ИсточникиДанных.Вставить("РегистрНакопления.ТоварыОрганизаций");
	КонецЕсли;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ЭтапПроизводства2_2";
	СинонимТаблицыДокумента      = "ТабличнаяЧасть";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = ПереопределениеРасчетаПараметров(СинонимТаблицыДокумента + ".Ссылка");
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",             """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",      """""");
	ПереопределениеРасчетаПараметров.Вставить("ИдентификаторРаспоряжения", """""");
	ПереопределениеРасчетаПараметров.Вставить("РабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	ПереопределениеРасчетаПараметров.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям",
		Формат(ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям"), "БЛ=Ложь; БИ=Истина"));
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РаспределениеЗапасовДвижения" Тогда
		
		ТекстыЗапроса = Новый СписокЗначений();
		ОтразитьРаспределениеЗапасовДвижения(Новый Запрос(), ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = ТекстыЗапроса[0].Значение;
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Неопределено, ТекстыЗапроса, ИмяРегистра);		
		
	ИначеЕсли ИмяРегистра = "РаспоряженияНаПередачуИзПроизводства" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРаспоряженияНаПередачуИзПроизводства(Неопределено, ТекстыЗапроса, Неопределено);
		
	ИначеЕсли ИмяРегистра = "ДвиженияСерийТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвиженияСерийТоваров(Неопределено, ТекстыЗапроса, Неопределено);
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Неопределено, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Неопределено, ТекстыЗапроса));
		
	ИначеЕсли ИмяРегистра = "ВыпускПродукции" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаВыпускПродукции(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Неопределено, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТрудозатраты";
		
	ИначеЕсли ИмяРегистра = "УслугиДавальцуКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Неопределено, ТекстыЗапроса, Неопределено);
		
	ИначеЕсли ИмяРегистра = "ТоварыОрганизаций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыОрганизаций(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "ОтражениеДокументовВРеглУчете" Тогда
		
		ЭтапПроизводства2_2Локализация.ДополнитьТекстыЗапросовПроведения(Неопределено, ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = ТекстыЗапроса[ТекстыЗапроса.Количество() - 1].Значение;
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстыЗапросаДляФормированияДвижений(Запрос, Регистры = Неопределено, ДопПараметры = Неопределено)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРаспоряженияНаПередачуИзПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
		
		ЭтапПроизводства2_2Локализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры);
	
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	Возврат ТекстыЗапроса;
	
КонецФункции

// Заполняет параметры запроса, которые не зависят от конкретного экземпляра документа.
//
// Параметры:
//  Запрос - Запрос - запрос, инициализирующий данные документа.
//
Процедура ЗаполнитьПараметрыИнициализации(Запрос)
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ПустаяСсылкаНазначение",Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаРаспоряжение", Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаЭтап", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.УстановитьПараметр(
		"РабочийГрафик", 
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	Запрос.УстановитьПараметр(
		"ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", 
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр(
		"АналитическийУчетПоГруппамПродукции", 
		ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции"));
		
	Запрос.УстановитьПараметр(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭтапПроизводства2_2")));
	
КонецПроцедуры

// Заполняет параметры запроса, которые зависят от конкретного экземпляра документа.
//
// Параметры:
//  Запрос - Запрос - запрос, инициализирующий данные документа.
//
Процедура ЗаполнитьПараметрыИнициализацииПоСсылке(Запрос)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка                             КАК Ссылка,
		|	Реквизиты.Дата                               КАК Период,
		|	Реквизиты.Статус                             КАК Статус,
		|	Реквизиты.Организация                        КАК Организация,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Реквизиты.НазначениеПродукция.ВидДеятельностиНДС,ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ТОГДА Реквизиты.НазначениеПродукция.ВидДеятельностиНДС
		|		ИНАЧЕ Реквизиты.ВыпускПодДеятельность
		|	КОНЕЦ										 КАК ВыпускПодДеятельность,
		|	Реквизиты.Валюта                             КАК Валюта,
		|	Реквизиты.Назначение                         КАК Назначение,
		|	Реквизиты.НазначениеМатериалы                КАК НазначениеМатериалы,
		|	Реквизиты.ПартияПроизводства                 КАК ПартияПроизводства,
		|	Реквизиты.ПартияПроизводства.ГруппаПродукции КАК ГруппаПродукции,
		|	Реквизиты.ПартияПроизводства.ВидДеятельностиНДС КАК ВидДеятельностиНДСНЗП,
		|	Реквизиты.Спецификация                       КАК Спецификация,
		|	Реквизиты.Распоряжение                       КАК Распоряжение,
		|	Реквизиты.ФактическоеНачалоЭтапа             КАК ФактическоеНачалоЭтапа,
		|	Реквизиты.ФактическоеОкончаниеЭтапа          КАК ФактическоеОкончаниеЭтапа,
		|	Реквизиты.РучноеРазмещениеВГрафике           КАК РучноеРазмещениеВГрафике,
		|	Реквизиты.ДатаОтгрузки                       КАК ДатаОтгрузки,
		|	Реквизиты.ПроизводствоНаСтороне              КАК ПроизводствоНаСтороне,
		|	Реквизиты.Партнер                            КАК Партнер,
		|	Реквизиты.НаправлениеДеятельности            КАК НаправлениеДеятельности,
		|	Реквизиты.Номер                              КАК Номер,
		|	Реквизиты.НомерНаПечать                      КАК НомерНаПечать,
		|	Реквизиты.Ответственный                      КАК Ответственный,
		|	Реквизиты.Комментарий                        КАК Комментарий,
		|	Реквизиты.Проведен                           КАК Проведен,
		|	Реквизиты.ПометкаУдаления                    КАК ПометкаУдаления,
		|	Реквизиты.ВариантПриемкиТоваров              КАК ВариантПриемкиТоваров,
		|	Реквизиты.ЯвляетсяНазначениемПродукции       КАК ЯвляетсяНазначениемПродукции,
		|	Реквизиты.ТипПроизводственногоПроцесса       КАК ТипПроизводственногоПроцесса,
		|	Реквизиты.ОперацияКакРаспоряжениеВыработки   КАК ОперацияКакРаспоряжениеВыработки,
		|	Реквизиты.Подразделение.ИспользоватьПооперационноеУправление КАК ИспользоватьПооперационноеУправление,
		|	&ПереопределяемыеПоля
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка";
	
	
	ПереопределяемыеПоля = "";
	
	ПереопределениеРасчетаПараметров = ПереопределениеРасчетаПараметров("Реквизиты");
	Для каждого КлючИЗначение Из ПереопределениеРасчетаПараметров Цикл
		
		ПереопределяемыеПоля = ПереопределяемыеПоля
			+ ?(ЗначениеЗаполнено(ПереопределяемыеПоля), "," + Символы.ПС, "")
			+ КлючИЗначение.Значение
			+ " КАК "
			+ КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПереопределяемыеПоля", ПереопределяемыеПоля);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ПериодыДвижений.Период, МЕСЯЦ) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Дата КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаПроизводства КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|		И ТаблицаТовары.Произведено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаПроизводства КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|		И ТаблицаТовары.Произведено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаОтгрузки КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|		И ТаблицаТовары.ВариантОбеспечения В
	|			(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно))
	|		И НЕ ТаблицаТовары.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаРасхода КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаОперации КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	) КАК ПериодыДвижений
	|";
	
	МассивПериодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализацииПоПериодам(
		Запрос,
		Запрос.Параметры,
		МассивПериодов);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасчетаСебестоимости(Запрос, ДопПараметры)
	
	ДополнительныеСвойства = Неопределено;
	
	Если ДопПараметры = Неопределено Тогда
		ДополнительныеСвойства = Новый Структура;
	ИначеЕсли ДопПараметры.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда
		ДополнительныеСвойства = ?(ДополнительныеСвойства <> Неопределено,
									ДопПараметры.ДополнительныеСвойства,
									Новый Структура);
	Иначе
		ДополнительныеСвойства = ДопПараметры;
	КонецЕсли;
	
	// Если период заполнения не задан, то переформировываются все движения документа.
	// Перезапись всех движений требуется для обработчиков обновления и процедур восстановления движений.
	ПериодЗаполнения = Неопределено;
	
	// Если документ проводится интерактивно или период заполнения передан, то сохраняем движения
	// до периода заполнения, а движения с начала периода заполнения переформировываются.
	Если ДополнительныеСвойства.Свойство("ПериодПерезаписиДвижений") Тогда
		
		ПериодЗаполнения = ДополнительныеСвойства.ПериодПерезаписиДвижений;
		
		КонецПериодаСохраняемыхДвижений = НачалоМесяца(ПериодЗаполнения) - 1;
		
		РегистрыНакопления.СебестоимостьТоваров.ИнициализироватьСохранениеДвиженийДокументаЗаПериод(
			ДополнительныеСвойства, // доп. свойства документа
			, // начало периода сохраняемых движений
			КонецПериодаСохраняемыхДвижений);
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодПерезаписиДвижений", ПериодЗаполнения);
	
КонецПроцедуры

Функция ПереопределениеРасчетаПараметров(ОсновнаяТаблица)
	
	Результат = Новый Структура;
	
	ТекстПараметра = СтрЗаменить(
		"%ОсновнаяТаблица%.ЗаказПереработчику.Партнер",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("Переработчик", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Проведен
		|			ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику 
		|		ИНАЧЕ %ОсновнаяТаблица%.Ссылка
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ДокументПоступления", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Проведен
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Статус В(
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|			ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ЗаказПереработчику", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Проведен
		|			ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику.Контрагент 
		|		КОГДА НЕ %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА %ОсновнаяТаблица%.Договор.Контрагент 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("Контрагент", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Проведен
		|			ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику.Договор 
		|		КОГДА НЕ %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			ТОГДА %ОсновнаяТаблица%.Договор
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("Договор", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Проведен
		|			ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику.Партнер 
		|		КОГДА НЕ %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			ТОГДА %ОсновнаяТаблица%.Партнер
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ПартнерРеестраДокументов", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				И %ОсновнаяТаблица%.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|				И %ОсновнаяТаблица%.ЗаказПереработчику.Проведен
		|			ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику.Приоритет 
		|		ИНАЧЕ %ОсновнаяТаблица%.Распоряжение.Приоритет
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ПриоритетРеестраДокументов", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоУПереработчика)
		|		КОГДА %ОсновнаяТаблица%.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ХозяйственнаяОперация", ТекстПараметра);
	
	Результат.Вставить("ПустаяСсылкаНазначение", "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
	
	ТекстПараметра = СтрЗаменить(
		"ЕСТЬNULL(%ОсновнаяТаблица%.НазначениеМатериалы.ДвиженияПоСкладскимРегистрам, Ложь)",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ДвиженияПоСкладскимРегистрам", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"%ОсновнаяТаблица%.Распоряжение.УникальныйИдентификатор",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ИдентификаторРаспоряжения", ТекстПараметра);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)

	Если Запрос = Неопределено ИЛИ Запрос.Параметры.Свойство("КлючиАналитикиНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.МестоХранения		КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|	ТаблицаТовары.Характеристика	КАК Характеристика,
	|	ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|	ТаблицаТовары.Назначение		КАК Назначение,
	|	ТаблицаТовары.Серия				КАК Серия
	|ИЗ
	|	(
	// Обеспечение по отправителю без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Склад				КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Обеспечение по получателю без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Обеспечение по НЗП (план по материалам в НЗП)
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&Назначение						КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Расход без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Расход комиссионных товаров
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыЗапасов.ВидЗапасов.ВладелецТовара	КАК МестоХранения,
	|		Аналитика.Номенклатура					КАК Номенклатура,
	|		Аналитика.Характеристика				КАК Характеристика,
	|		&ПустаяСтатья							КАК СтатьяКалькуляции,
	|		&ПустоеНазначение						КАК Назначение,
	|		&ПустаяСерия							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ГДЕ
	|		ВидыЗапасов.Ссылка = &Ссылка
	|		И ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Экономия без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Получатель		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И НЕ ТаблицаТовары.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия без назначения по отправителю
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|			ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия без назначения по получателю
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Получатель		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И НЕ ТаблицаТовары.Получатель = ТаблицаТовары.Подразделение
	|		И НЕ ТаблицаТовары.СписатьНаРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия без назначения по отправителю
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия без назначения по получателю
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Получатель		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И НЕ ТаблицаТовары.Получатель = ТаблицаТовары.Подразделение
	|		И НЕ ТаблицаТовары.СписатьНаРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по выходным изделиям с назначением
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение	КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		&ПустаяСтатья										КАК СтатьяКалькуляции,
	|		ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот	КАК Назначение,
	|		&ПустаяСерия										КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по выходным изделиям без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		&ПустаяСерия					КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по побочным изделиям с назначением
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение	КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		&ПустаяСтатья										КАК СтатьяКалькуляции,
	|		ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот	КАК Назначение,
	|		&ПустаяСерия										КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по побочным изделиям без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		&ПустаяСерия					КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия по НЗП с назначением
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&Назначение						КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия по НЗП без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	) КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|		И ТаблицаТовары.Серия = Аналитика.Серия
	|		И ТаблицаТовары.МестоХранения = Аналитика.МестоХранения
	|		И ТаблицаТовары.Назначение = Аналитика.Назначение
	|		И ТаблицаТовары.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И (НЕ ТаблицаТовары.МестоХранения В (&ПустыеМестаХранения)
	|		ИЛИ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И НЕ (ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И ТаблицаТовары.Назначение <> &ПустоеНазначение
	|			И НЕ ТИПЗНАЧЕНИЯ(ТаблицаТовары.МестоХранения) = ТИП(Справочник.СтруктураПредприятия)
	|		)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.МестоХранения,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.СтатьяКалькуляции,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ЗапросАналитики = Новый Запрос;
	ЗапросАналитики.Текст = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ПустыеМестаХранения = Новый Массив;
	ПустыеМестаХранения.Добавить(Неопределено);
	ПустыеМестаХранения.Добавить(Справочники.Склады.ПустаяСсылка());
	ПустыеМестаХранения.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ЗапросАналитики.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитики.УстановитьПараметр("Назначение",             Запрос.Параметры.Назначение);
	ЗапросАналитики.УстановитьПараметр("ПустаяСерия",            Справочники.СерииНоменклатуры.ПустаяСсылка());
	ЗапросАналитики.УстановитьПараметр("ПустаяСтатья",           Справочники.СтатьиКалькуляции.ПустаяСсылка());
	ЗапросАналитики.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитики.УстановитьПараметр("Статус",                 Запрос.Параметры.Статус);
	ЗапросАналитики.УстановитьПараметр("ПустыеМестаХранения",    ПустыеМестаХранения);
	
	Выборка = ЗапросАналитики.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

	Запрос.УстановитьПараметр("КлючиАналитикиНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаТаблицаКоэффициентыПересчетаВалют(Запрос)
	
	ЗапросКурсов = Новый Запрос;
	ЗапросКурсов.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПроизводства.Период КАК Период
		|ПОМЕСТИТЬ втПериоды
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, ДЕНЬ) КАК Период
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
		|	ГДЕ
		|		Изделия.Ссылка = &Ссылка
		|		И Изделия.Произведено
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ЭтапПроизводства2_2ПобочныеИзделия.ДатаПроизводства, ДЕНЬ)
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ЭтапПроизводства2_2ПобочныеИзделия
		|	ГДЕ
		|		ЭтапПроизводства2_2ПобочныеИзделия.Ссылка = &Ссылка
		|		И НЕ ЭтапПроизводства2_2ПобочныеИзделия.Отменено) КАК ПериодыПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалют.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ЕСТЬNULL(КурсыВалют.БазоваяВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК БазоваяВалюта,
		|	втПериоды.Период КАК Период,
		|	МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПоследнегоКурса
		|ПОМЕСТИТЬ втДатыПоследнихКурсовВалют
		|ИЗ
		|	втПериоды КАК втПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
		|		ПО (КурсыВалют.Период <= втПериоды.Период)
		|			И (КурсыВалют.Валюта = &ВалютаРеглУчета
		|				ИЛИ КурсыВалют.Валюта = &ВалютаУпрУчета
		|				ИЛИ КурсыВалют.Валюта = &ВалютаДокумента)
		|			И (КурсыВалют.БазоваяВалюта = &ВалютаРеглУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	втПериоды.Период,
		|	ЕСТЬNULL(КурсыВалют.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
		|	ЕСТЬNULL(КурсыВалют.БазоваяВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаРеглУчета
		|				ТОГДА КурсыВалют.КурсЧислитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсРеглУчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаРеглУчета
		|				ТОГДА КурсыВалют.КурсЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КратностьРеглУчета,
		|	втДатыПоследнихКурсовВалют.Период КАК Период,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаУпрУчета
		|				ТОГДА КурсыВалют.КурсЧислитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсУпрУчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаУпрУчета
		|				ТОГДА КурсыВалют.КурсЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КратностьУпрУчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаДокумента
		|				ТОГДА КурсыВалют.КурсЧислитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсДокумента,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаДокумента
		|				ТОГДА КурсыВалют.КурсЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КратностьДокумента
		|ПОМЕСТИТЬ втКурсыВалютНаДату
		|ИЗ
		|	втДатыПоследнихКурсовВалют КАК втДатыПоследнихКурсовВалют
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
		|		ПО втДатыПоследнихКурсовВалют.ДатаПоследнегоКурса = КурсыВалют.Период
		|			И втДатыПоследнихКурсовВалют.БазоваяВалюта = КурсыВалют.БазоваяВалюта
		|			И втДатыПоследнихКурсовВалют.Валюта = КурсыВалют.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	втДатыПоследнихКурсовВалют.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКурсыВалютНаДату.Период,
		|	ВЫБОР
		|		КОГДА втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсУпрУчета = 0
		|			ТОГДА 1
		|		ИНАЧЕ втКурсыВалютНаДату.КурсДокумента * втКурсыВалютНаДату.КратностьУпрУчета / (втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсУпрУчета)
		|	КОНЕЦ КАК КоэффициентПересчетаВВалютуУпр,
		|	ВЫБОР
		|		КОГДА втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсРеглУчета = 0
		|			ТОГДА 1
		|		ИНАЧЕ втКурсыВалютНаДату.КурсДокумента * втКурсыВалютНаДату.КратностьРеглУчета / (втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсРеглУчета)
		|	КОНЕЦ КАК КоэффициентПересчетаВВалютуРегл
		|ИЗ
		|	втКурсыВалютНаДату КАК втКурсыВалютНаДату";

	ЗапросКурсов.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросКурсов.УстановитьПараметр("ВалютаДокумента", Запрос.Параметры.Валюта);
	ЗапросКурсов.УстановитьПараметр("ВалютаУпрУчета",  Константы.ВалютаУправленческогоУчета.Получить());
	ЗапросКурсов.УстановитьПараметр("ВалютаРеглУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос.Параметры.Ссылка, "Организация")));
	
	Запрос.УстановитьПараметр("ВтКоэффициентыПересчетаВалют", ЗапросКурсов.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаПустаяАналитикаУчетаПартий(Запрос)
	
	Если Не Запрос.Параметры.Свойство("АналитикаУчетаПартийТоваров") Тогда
		ОтборПоАналитикеПартии = Новый Структура("Дата, ВидЦенности", Запрос.Параметры.Период, Перечисления.ВидыЦенностей.Товары);
		Запрос.УстановитьПараметр("АналитикаУчетаПартийТоваров",
									Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(ОтборПоАналитикеПартии));
	КонецЕсли;
	
	Если Не Запрос.Параметры.Свойство("АналитикаУчетаПартийРабот") Тогда
		ОтборПоАналитикеПартии = Новый Структура("Дата, ВидЦенности", Запрос.Параметры.Период, Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Запрос.УстановитьПараметр("АналитикаУчетаПартийРабот",
									Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(ОтборПоАналитикеПартии));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовПроведения

#Область ТекстыЗапросовВременныеТаблицы

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Подразделения.ХозяйственнаяОперация	        КАК ХозяйственнаяОперация,
	|	Подразделения.Ссылка				        КАК Ссылка,
	|	Подразделения.Дата					        КАК Дата,
	|	Подразделения.Подразделение			        КАК Подразделение,
	|	МИНИМУМ(Подразделения.ДополнительнаяЗапись)	КАК ДополнительнаяЗапись
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	(
	// Основная запись реестра документов
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.ОперацияРеестраДокументов	КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка						КАК Ссылка,
	|		ТабличнаяЧасть.ДатаРеестраДокументов		КАК Дата,
	|		ТабличнаяЧасть.Подразделение				КАК Подразделение,
	|		ЛОЖЬ										КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате выпуска продукции
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаПроизводства	КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.Произведено
	|		И НЕ ТабличнаяЧасть.Отменено
	|		И НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате выпуска побочных изделий
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаПроизводства	КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.Произведено
	|		И НЕ ТабличнаяЧасть.Отменено
	|		И НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате потребления материалов
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаРасхода		КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И НЕ ТабличнаяЧасть.ДатаРасхода = ДАТАВРЕМЯ(1,1,1)
	|		И (НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаРасхода, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|			ИЛИ НЕ ДанныеДокумента.ОперацияРеестраДокументов = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате экономии материалов
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаОперации		КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И НЕ ТабличнаяЧасть.ДатаОперации = ДАТАВРЕМЯ(1,1,1)
	|		И (НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|			ИЛИ НЕ ДанныеДокумента.ОперацияРеестраДокументов = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства))
	|	) КАК Подразделения
	|
	|СГРУППИРОВАТЬ ПО
	|	Подразделения.Ссылка,
	|	Подразделения.Подразделение,
	|	Подразделения.Дата,
	|	Подразделения.ХозяйственнаяОперация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКоэффициентыПересчетаВалют";
	
	УстановитьПараметрЗапросаТаблицаКоэффициентыПересчетаВалют(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВтКоэффициентыПересчетаВалют.Период,
		|	ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр,
		|	ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл
		|ПОМЕСТИТЬ ВтКоэффициентыПересчетаВалют
		|ИЗ
		|	&ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""ВыходныеИзделия""	КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки	КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО					КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО					КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО					КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО					КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)
	|	КОНЕЦ							КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ПартионныйУчетВерсии22
	|				И ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТаблицаДокумента.КодСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ							КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаПроизводства, МЕСЯЦ)
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Отменено
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаОперации              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Организация                                 КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов             КАК АналитикаРасходов,
	|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	&ВыпускПодДеятельность                       КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДСУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаБезНДСРегл,
	|	0                                            КАК ПостояннаяРазница,
	|	0                                            КАК ВременнаяРазница,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи           КАК ИдентификаторФинЗаписи,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость) 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость) 
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию) 
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию) КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Сумма = 0
	|
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы(, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса)
	
	ИмяТаблицы = "ВтТаблицаЗаказовДавальцаПоНазначениям";
	ТекстЗапроса = ДавальческаяСхема.ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям("ЭтапПроизводства2_2");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ТекстыЗапросовВтВидыЗапасов

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра)
	
	ИмяТаблицы = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	УстановитьПараметрЗапросаПустаяАналитикаУчетаПартий(Запрос);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаЗаказовДавальцаПоНазначениям", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстыВтВидыЗапасов = Новый Массив;
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовМатериалы());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовИзделия());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыОбеспечение());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыРасход());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыВыходныеИзделия());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыПобочныеИзделия());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыДавальцуВыходныеИзделия());
	ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыДавальцуПобочныеИзделия());
	
	ТекстЗапроса = СтрСоединить(ТекстыВтВидыЗапасов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовМатериалы()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ														КАК ДополнениеДляДавальца,
	|	ВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца					КАК ВидЗапасовВладельца,
	|	ВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации	КАК РеализацияЗапасовДругойОрганизации,
	|	ВЫБОР
	// при расходе на партии производства и списании на расходы
	// комиссионные товары всегда выкупаются и списываются с пустого вида запасов.
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И (ВидыЗапасов.СписатьНаРасходы
	|				ИЛИ ВидыЗапасов.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВидыЗапасов.ВидЗапасов
	|	КОНЕЦ														КАК ВидЗапасов,
	|	ВидыЗапасов.КорВидЗапасов									КАК КорВидЗапасов,
	|	ВидыЗапасов.НомерГТД										КАК НомерГТД,
	|	ВЫБОР
	// при расходе на партии производства и списании на расходы
	// комиссионные товары всегда выкупаются и списываются аналитики комитента.
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И (ВидыЗапасов.СписатьНаРасходы
	|				ИЛИ ВидыЗапасов.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|			ТОГДА АналитикаКомитента.КлючАналитики
	|		ИНАЧЕ ВидыЗапасов.АналитикаУчетаНоменклатуры
	|	КОНЕЦ														КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	// при расходе на партии производства и списании на расходы
	// комиссионные товары всегда выкупаются и списываются с аналитики комитента.
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И (ВидыЗапасов.СписатьНаРасходы
	|				ИЛИ ВидыЗапасов.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|			ТОГДА АналитикаКомитента.КлючАналитики
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ														КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура			КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика		КАК Характеристика,
	|	ВидыЗапасов.Количество										КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ВидыЗапасов.СписатьНаРасходы								КАК СписатьНаРасходы,
	|	ВидыЗапасов.КорАналитикаУчетаНоменклатуры					КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики						КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации									КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|			И ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Подразделение
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|			И НЕ ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК Получатель,
	|	ВидыЗапасов.Подразделение									КАК Подразделение,
	|	ВидыЗапасов.СтатьяРасходов									КАК СтатьяРасходов,
	|	ВидыЗапасов.АналитикаРасходов								КАК АналитикаРасходов,
	|	ВидыЗапасов.АналитикаАктивовПассивов						КАК АналитикаАктивовПассивов,
	|	ВидыЗапасов.НастройкаСчетовУчета							КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО												КАК АналитикаУчетаПартий,
	|
	|	ВЫБОР
	// давальческие материалы и полуфабрикаты всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	// при расходе на партии производства и списании на расходы
	// комиссионные товары всегда выкупаются и списываются с раздела "Товары на складах".
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И (ВидыЗапасов.СписатьНаРасходы
	|				ИЛИ ВидыЗапасов.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	// комиссионные товары всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	// принятые на хранении с правом продажи на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	// для собственных раздел учетом учета являются производственные затраты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	КОНЕЦ														КАК РазделУчета,
	|
	|	ВЫБОР
	// при списании на расходы происходит выбытие из себестоимости товаров 
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|			ТОГДА НЕОПРЕДЕЛЕНО
	// давальческие материалы и полуфабрикаты всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	// списание собственных и комиссионных материалов на партии производства всегда в НЗП 
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
	// комиссионные товары всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	// принятые на хранении с правом продажи на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	// в остальных случаях получателем выступают производственные затраты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	КОНЕЦ														КАК КорРазделУчета,
	|
	|	0															КАК Сумма,
	|	0															КАК СуммаЗабалансовая,
	|	ВидыЗапасов.ИдентификаторСтроки								КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи						КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО												КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК КорАналитикаФинансовогоУчета
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
	|	ПО АналитикаКомитента.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаКомитента.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаКомитента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаКомитента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И АналитикаКомитента.МестоХранения = ВидыЗапасов.ВидЗапасов.ВладелецТовара
	|	И АналитикаКомитента.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ													КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО											КАК ВидЗапасовВладельца,
	|	ЛОЖЬ													КАК РеализацияЗапасовДругойОрганизации,
	|	ВидыЗапасов.ВидЗапасов									КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)				КАК НомерГТД,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры					КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики					КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура		КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
	|	ВидыЗапасов.Количество									КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация						КАК ХозяйственнаяОперация,
	|	ВидыЗапасов.СписатьНаРасходы							КАК СписатьНаРасходы,
	// Аналитика учета отходов на партиях производства (с/без назначения)
	|	КорАналитика.КлючАналитики								КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики					КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации								КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|				И ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Подразделение
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|				И НЕ ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО	
	|	КОНЕЦ													КАК Получатель,
	|	ВидыЗапасов.Подразделение								КАК Подразделение,
	|	ВидыЗапасов.СтатьяРасходов								КАК СтатьяРасходов,
	|	ВидыЗапасов.АналитикаРасходов							КАК АналитикаРасходов,
	|	ВидыЗапасов.АналитикаАктивовПассивов					КАК АналитикаАктивовПассивов,
	|	ВидыЗапасов.НастройкаСчетовУчета						КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			И ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ &АналитикаУчетаПартийТоваров
	|	КОНЕЦ													КАК АналитикаУчетаПартий,
	|
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	КОНЕЦ													КАК РазделУчета,
	|
	|	НЕОПРЕДЕЛЕНО											КАК КорРазделУчета,
	|
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА 0
	|		ИНАЧЕ ВидыЗапасов.Сумма
	|	КОНЕЦ													КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			И ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА ВидыЗапасов.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ													КАК СуммаЗабалансовая,
	|	ВидыЗапасов.ИдентификаторСтроки							КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи					КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|				И НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ВидыЗапасов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ВидыЗапасов.Период, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорАналитика.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитика.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитика.Назначение = &Назначение
	|	И КорАналитика.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитика.МестоХранения = ВидыЗапасов.Подразделение
	|	И КорАналитика.СтатьяКалькуляции = ВидыЗапасов.СтатьяКалькуляции
	|	И ВидыЗапасов.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.Подразделение
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.СтатьяКалькуляции
	|	И ВидыЗапасов.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.КодСтроки = ВидыЗапасов.КодСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|	И ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыОбеспечение()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ																КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО														КАК ВидЗапасовВладельца,
	|	ЛОЖЬ																КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО														КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО														КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО														КАК НомерГТД,
	|	ОбеспечениеРаботами.АналитикаУчетаНоменклатуры						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики								КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ОбеспечениеРаботами.Номенклатура									КАК Номенклатура,
	|	ОбеспечениеРаботами.Характеристика									КАК Характеристика,
	|	ОбеспечениеРаботами.Количество										КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)	КАК ХозяйственнаяОперация,
	|	ЛОЖЬ																КАК СписатьНаРасходы,
	|	ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры					КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики								КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ОбеспечениеРаботами.ДатаОтгрузки									КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО														КАК Получатель,
	|	ОбеспечениеРаботами.Подразделение									КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО														КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО														КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК КорРазделУчета,
	|	0																	КАК Сумма,
	|	0																	КАК СуммаЗабалансовая,
	|	""""																КАК ИдентификаторСтроки,
	|	ОбеспечениеРаботами.ИдентификаторСтроки								КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ																КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеРаботами
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ОбеспечениеРаботами.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ОбеспечениеРаботами.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ОбеспечениеРаботами.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ОбеспечениеРаботами.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ОбеспечениеРаботами.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ОбеспечениеРаботами.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ОбеспечениеРаботами.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|ГДЕ
	|	ОбеспечениеРаботами.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ОбеспечениеРаботами.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ОбеспечениеРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ОбеспечениеРаботами.Отменено
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыРасход()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ										КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК НомерГТД,
	|	РасходРабот.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	РасходРабот.Номенклатура					КАК Номенклатура,
	|	РасходРабот.Характеристика					КАК Характеристика,
	|	РасходРабот.Количество						КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)	КАК ХозяйственнаяОперация,
	|	ЛОЖЬ										КАК СписатьНаРасходы,
	|	РасходРабот.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	РасходРабот.ДатаРасхода						КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО								КАК Получатель,
	|	РасходРабот.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)		КАК РазделУчета,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)	КАК КорРазделУчета,
	|	0											КАК Сумма,
	|	0											КАК СуммаЗабалансовая,
	|	""""										КАК ИдентификаторСтроки,
	|	РасходРабот.ИдентификаторСтроки				КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК РасходРабот
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = РасходРабот.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = РасходРабот.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = РасходРабот.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = РасходРабот.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = РасходРабот.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = РасходРабот.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = РасходРабот.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = РасходРабот.КорАналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = РасходРабот.КорАналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = РасходРабот.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|ГДЕ
	|	РасходРабот.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И РасходРабот.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыВыходныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ															КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО													КАК ВидЗапасовВладельца,
	|	ЛОЖЬ															КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО													КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО													КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)						КАК НомерГТД,
	|	Работы.АналитикаУчетаНоменклатуры								КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики							КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.Номенклатура												КАК Номенклатура,
	|	Работы.Характеристика											КАК Характеристика,
	|	Работы.Количество												КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)	КАК ХозяйственнаяОперация,
	|	Работы.СписатьНаРасходы											КАК СписатьНаРасходы,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.ДатаПроизводства											КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА Работы.СписатьНаРасходы
	|				И Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Подразделение
	|		КОГДА Работы.СписатьНаРасходы
	|				И НЕ Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ															КАК Получатель,
	|	Работы.Подразделение											КАК Подразделение,
	|	Работы.СтатьяРасходов											КАК СтатьяРасходов,
	|	Работы.АналитикаРасходов										КАК АналитикаРасходов,
	|	Работы.АналитикаАктивовПассивов									КАК АналитикаАктивовПассивов,
	|	Работы.НастройкаСчетовУчета										КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ &АналитикаУчетаПартийРабот
	|	КОНЕЦ															КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО													КАК КорРазделУчета,
	|	Работы.Сумма													КАК Сумма,
	|	0																КАК СуммаЗабалансовая,
	|	Работы.ИдентификаторСтроки										КАК ИдентификаторСтроки,
	|	Работы.ИдентификаторСтроки										КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ Работы.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА Работы.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ															КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Работы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Работы.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Работы.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = Работы.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = Работы.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = Работы.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.КодСтроки = Работы.КодСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|
	|ГДЕ
	|	Работы.Ссылка = &Ссылка
	|	И Работы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Работы.Произведено
	|	И НЕ Работы.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыПобочныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ										КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	Работы.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.Номенклатура							КАК Номенклатура,
	|	Работы.Характеристика						КАК Характеристика,
	|	Работы.Количество							КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость) КАК ХозяйственнаяОперация,
	|	Работы.СписатьНаРасходы						КАК СписатьНаРасходы,
	|	КорАналитика.КлючАналитики					КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.ДатаПроизводства						КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА Работы.СписатьНаРасходы
	|				И Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Подразделение
	|		КОГДА Работы.СписатьНаРасходы
	|				И НЕ Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК Получатель,
	|	Работы.Подразделение						КАК Подразделение,
	|	Работы.СтатьяРасходов						КАК СтатьяРасходов,
	|	Работы.АналитикаРасходов					КАК АналитикаРасходов,
	|	Работы.АналитикаАктивовПассивов				КАК АналитикаАктивовПассивов,
	|	Работы.НастройкаСчетовУчета					КАК НастройкаСчетовУчета,
	|	&АналитикаУчетаПартийРабот					КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорРазделУчета,
	|	Работы.Сумма								КАК Сумма,
	|	0											КАК СуммаЗабалансовая,
	|	Работы.ИдентификаторСтроки					КАК ИдентификаторСтроки,
	|	Работы.ИдентификаторСтроки					КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ Работы.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА Работы.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Работы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Работы.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Работы.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = Работы.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = Работы.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = Работы.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорАналитика.Номенклатура = Работы.Номенклатура
	|	И КорАналитика.Характеристика = Работы.Характеристика
	|	И КорАналитика.Назначение = &Назначение
	|	И КорАналитика.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитика.МестоХранения = Работы.Подразделение
	|	И КорАналитика.СтатьяКалькуляции = Работы.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = Работы.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = Работы.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = Работы.Подразделение
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = Работы.СтатьяКалькуляции
	|
	|ГДЕ
	|	Работы.Ссылка = &Ссылка
	|	И Работы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Работы.Произведено
	|	И НЕ Работы.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыДавальцуВыходныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ИСТИНА										КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	ВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	Аналитика.КлючАналитики						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитика.Номенклатура						КАК Номенклатура,
	|	Аналитика.Характеристика					КАК Характеристика,
	|	ВидыЗапасов.Количество						КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ЛОЖЬ										КАК СписатьНаРасходы,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО								КАК Получатель,
	|	ВидыЗапасов.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ &АналитикаУчетаПартийТоваров
	|	КОНЕЦ										КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорРазделУчета,
	|	ВидыЗапасов.Сумма							КАК Сумма,
	|	0											КАК СуммаЗабалансовая,
	|	ВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
	|	ПО Изделия.Ссылка = ВидыЗапасов.Ссылка
	|	И Изделия.ИдентификаторСтроки = ВидыЗапасов.ИдентификаторСтроки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТаблицаЗаказовДавальцаПоНазначениям.Назначение = Изделия.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И Аналитика.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И Аналитика.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот
	|	И Аналитика.Серия = &ПустаяСсылкаСерия
	|	И Аналитика.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И Аналитика.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаБезНазначения.Серия = &ПустаяСсылкаСерия
	|	И АналитикаБезНазначения.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.КодСтроки = ВидыЗапасов.КодСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|	
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ВидыЗапасов.ОформитьОтчетДавальцу
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыДавальцуПобочныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ИСТИНА										КАК ДополнениеДляДавальца,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	ВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	Аналитика.КлючАналитики						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитика.Номенклатура						КАК Номенклатура,
	|	Аналитика.Характеристика					КАК Характеристика,
	|	ВидыЗапасов.Количество						КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ЛОЖЬ										КАК СписатьНаРасходы,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО								КАК Получатель,
	|	ВидыЗапасов.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаСчетовУчета,
	|	&АналитикаУчетаПартийТоваров				КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорРазделУчета,
	|	ВидыЗапасов.Сумма							КАК Сумма,
	|	0											КАК СуммаЗабалансовая,
	|	ВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
	|	ПО Изделия.Ссылка = ВидыЗапасов.Ссылка
	|	И Изделия.ИдентификаторСтроки = ВидыЗапасов.ИдентификаторСтроки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТаблицаЗаказовДавальцаПоНазначениям.Назначение = Изделия.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И Аналитика.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И Аналитика.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот
	|	И Аналитика.Серия = &ПустаяСсылкаСерия
	|	И Аналитика.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И Аналитика.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаБезНазначения.Серия = &ПустаяСсылкаСерия
	|	И АналитикаБезНазначения.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ВидыЗапасов.ОформитьОтчетДавальцу
	|";
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиДавальцуКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаЗаказовДавальцаПоНазначениям", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)							КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства									КАК Период,
	|	ТаблицаЗаказовДавальцаПоНазначениям.Договор						КАК Договор,
	|	ТаблицаЗаказовДавальцаПоНазначениям.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТабличнаяЧасть.Номенклатура										КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика									КАК Характеристика,
	|	ТабличнаяЧасть.Количество										КАК КОформлению,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)	КАК ПричинаОтмены,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС)					КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТабличнаяЧасть.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)							КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства									КАК Период,
	|	ТаблицаЗаказовДавальцаПоНазначениям.Договор						КАК Договор,
	|	ТаблицаЗаказовДавальцаПоНазначениям.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТабличнаяЧасть.Номенклатура										КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика									КАК Характеристика,
	|	ТабличнаяЧасть.Количество										КАК КОформлению,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)	КАК ПричинаОтмены,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС)					КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТабличнаяЧасть.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДоступностьВидовРабочихЦентров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|
		|	ТабличнаяЧасть.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.ДатаИнтервала     КАК ДатаИнтервала,
		|
		|	СУММА(ТабличнаяЧасть.Количество) КАК Занято,
		|
		|	ТабличнаяЧасть.ВидРабочегоЦентра.Подразделение КАК Подразделение
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЗанятостьВидовРабочихЦентров КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И &РучноеРазмещениеВГрафике
		|	
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.ВидРабочегоЦентра,
		|	ТабличнаяЧасть.ДатаИнтервала";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	// выпуск работ по расчитываемой стоимости
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаПроизводства       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	ТабличнаяЧасть.Получатель             КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура           КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика         КАК Характеристика,
	|	ТабличнаяЧасть.Назначение             КАК Назначение,
	|	ТабличнаяЧасть.Количество             КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// выпуск работ по фиксированной стоимости
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаПроизводства,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// потребление не обособленных работ
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОтгрузки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Организация,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	НЕОПРЕДЕЛЕНО,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Обособленно
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// потребление обособленных работ
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОтгрузки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Организация,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТабличнаяЧасть.Обособленно
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыпускПродукции";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Организация								КАК Организация,
	|	ТабличнаяЧасть.Подразделение				КАК Подразделение,
	|	ТабличнаяЧасть.ДатаПроизводства				КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаКонстанты.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.Ссылка.Дата >= НАЧАЛОПЕРИОДА(ТаблицаКонстанты.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка										КАК Распоряжение,
	|	ТабличнаяЧасть.КодСтроки					КАК КодСтроки,
	|	ТабличнаяЧасть.Количество					КАК Количество,
	|	ТабличнаяЧасть.СтатьяРасходов				КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов			КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТабличнаяЧасть.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО Аналитика.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И Аналитика.Характеристика = АналитикаБезНазначения.Характеристика
	|		И &ПустаяСсылкаНазначение = АналитикаБезНазначения.Назначение
	|		И Аналитика.Серия = АналитикаБезНазначения.Серия
	|		И Аналитика.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты
	|	ПО ИСТИНА
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация								КАК Организация,
	|	ТабличнаяЧасть.Подразделение				КАК Подразделение,
	|	ТабличнаяЧасть.ДатаПроизводства				КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаКонстанты.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.Ссылка.Дата >= НАЧАЛОПЕРИОДА(ТаблицаКонстанты.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка										КАК Распоряжение,
	|	ТабличнаяЧасть.КодСтроки					КАК КодСтроки,
	|	ТабличнаяЧасть.Количество					КАК Количество,
	|	ТабличнаяЧасть.СтатьяРасходов				КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов			КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТабличнаяЧасть.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО Аналитика.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И Аналитика.Характеристика = АналитикаБезНазначения.Характеристика
	|		И &ПустаяСсылкаНазначение = АналитикаБезНазначения.Назначение
	|		И Аналитика.Серия = АналитикаБезНазначения.Серия
	|		И Аналитика.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты
	|	ПО ИСТИНА
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	// Отгрузка материалов из цеховой кладовой
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОтгрузки                             КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Склад                                    КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПередачаВПроизводствоОтгрузка) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	НЕ ТабличнаяЧасть.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		ИЛИ &Период < ТабличнаяЧасть.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Склад.ЦеховаяКладовая
	|	И ТабличнаяЧасть.Склад.Подразделение = ТабличнаяЧасть.Подразделение
	|	И НЕ &ПроизводствоНаСтороне
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Производство продукции в подразделении
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Производство продукции в подразделении
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                           	КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приемка продукции в цеховую кладовую
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА &Период
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА &Период
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приемка продукции в цеховую кладовую
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА &Период
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &Период
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	&Ссылка                                                	КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА &Период
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Возврат неизрасходованных материалов в нашу кладовую
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОперации                              КАК Период,
	|	ТабличнаяЧасть.Номенклатура                              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                            КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&НазначениеМатериалы КАК Справочник.Назначения).ДвиженияПоСкладскимРегистрам И ТабличнаяЧасть.Обособить
	|			ТОГДА &НазначениеМатериалы
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Назначение,
	|	ТабличнаяЧасть.Серия                                     КАК Серия,
	|	ТабличнаяЧасть.Количество                                КАК Количество,
	|	ТабличнаяЧасть.Подразделение                             КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                                КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратМатериаловИзПроизводстваПриемка) КАК СкладскаяОперация,
	|	&Ссылка                                                КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ТабличнаяЧасть.ДатаОперации < ТабличнаяЧасть.Получатель.ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
	|	И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОперации                              КАК Период,
	|	ТабличнаяЧасть.Номенклатура                              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                            КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&НазначениеМатериалы КАК Справочник.Назначения).ДвиженияПоСкладскимРегистрам И ТабличнаяЧасть.Обособить
	|			ТОГДА &НазначениеМатериалы
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  КАК Назначение,
	|	ТабличнаяЧасть.Серия                                   КАК Серия,
	|	ТабличнаяЧасть.Количество                              КАК Количество,
	|	ТабличнаяЧасть.Подразделение                           КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                              КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратМатериаловИзПроизводстваПриемка) КАК СкладскаяОперация,
	|	&Ссылка                                                КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ТабличнаяЧасть.ДатаОперации < ТабличнаяЧасть.Получатель.ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериаловСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Получатель <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
	|	И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Расход материалов
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаРасхода                              КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	&Назначение				                                КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве) КАК СкладскаяОперация,
	|	&Ссылка                                                 КАК Документ,
	|	ИСТИНА                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)		КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации					КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ										КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД						КАК НомерГТД,
	|	ТабличнаяЧасть.Количество					КАК Количество,
	|	0											КАК КоличествоПоРНПТ,
	|	0											КАК КОформлениюСписания,
	|	0											КАК КОформлениюСписанияПоРНПТ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ &Организация
	|	КОНЕЦ										КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаНоменклатурыПоУмолчанию		КАК КорАналитикаУчетаНоменклатуры,
	|	&ВидЗапасовПоУмолчанию						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ											КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД							КАК НомерГТД,
	|	ТабличнаяЧасть.Количество						КАК Количество,
	|	ТабличнаяЧасть.КоличествоПоРНПТ					КАК КоличествоПоРНПТ,
	|	0												КАК КОформлениюСписания,
	|	0												КАК КОформлениюСписанияПоРНПТ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ &Организация
	|	КОНЕЦ											КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорВидЗапасов					КАК КорВидЗапасов,
	|	ТабличнаяЧасть.СтатьяРасходов					КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов				КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов			КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ											КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД							КАК НомерГТД,
	|	ТабличнаяЧасть.Количество						КАК Количество,
	|	ТабличнаяЧасть.КоличествоПоРНПТ					КАК КоличествоПоРНПТ,
	|	0												КАК КОформлениюСписания,
	|	0												КАК КОформлениюСписанияПоРНПТ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ &Организация
	|	КОНЕЦ											КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаНоменклатурыПоУмолчанию			КАК КорАналитикаУчетаНоменклатуры,
	|	&ВидЗапасовПоУмолчанию							КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)		КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации					КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.ВидЗапасов					КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД						КАК НомерГТД,
	|	0											КАК Количество,
	|	0											КАК КоличествоПоРНПТ,
	|	ТабличнаяЧасть.Количество					КАК КОформлениюСписания,
	|	ТабличнаяЧасть.КоличествоПоРНПТ				КАК КОформлениюСписанияПоРНПТ,
	|	&Организация								КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаНоменклатурыПоУмолчанию		КАК КорАналитикаУчетаНоменклатуры,
	|	&ВидЗапасовПоУмолчанию						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)
	|	И ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&АналитикаУчетаНоменклатурыПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ВидЗапасовПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)				КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации											КАК Период,
	|	ТабличнаяЧасть.ВидЗапасовВладельца.Организация	КАК ОрганизацияВладелец,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.ВидЗапасов												КАК ВидЗапасовПродавца,
	|	ТабличнаяЧасть.НомерГТД													КАК НомерГТД,
	|	ТабличнаяЧасть.Количество												КАК Количество,
	|	ТабличнаяЧасть.ХозяйственнаяОперация						КАК ХозяйственнаяОперация,
	|	&ВыпускПодДеятельность													КАК НалогообложениеНДС
	|ИЗ
	|	втВидыЗапасов КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|	И ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.ДатаОперации																КАК ДатаПоступления,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура	КАК Номенклатура,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Серия					КАК Серия,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Назначение		КАК Назначение,
	|	ТабличнаяЧасть.ВидЗапасов																	КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)						КАК НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|	ПО ТабличнаяЧасть.ВидЗапасов = ПоступленияТоваров.ВидЗапасов
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура = ПоступленияТоваров.Номенклатура
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Характеристика = ПоступленияТоваров.Характеристика
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Серия = ПоступленияТоваров.Серия
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Назначение = ПоступленияТоваров.Назначение
	|	И ПоступленияТоваров.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|ГДЕ
	|	ТабличнаяЧасть.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры =
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И НЕ ТабличнаяЧасть.ДополнениеДляДавальца
	|	И (ПоступленияТоваров.ВидЗапасов ЕСТЬ NULL 
	|		ИЛИ ПоступленияТоваров.ДатаПоступления < ТабличнаяЧасть.ДатаОперации)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыМатериаловВПроизводство";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Подразделение                 КАК Подразделение,
	|	ТабличнаяЧасть.Подразделение                 КАК Получатель,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ТабличнаяЧасть.Серия                         КАК Серия,
	|	ТабличнаяЧасть.Склад                         КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно ТОГДА
	|				ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	&Назначение                                  КАК Назначение,
	|	ТабличнаяЧасть.Количество                    КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                        КАК ВРезерве,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                        КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И НЕ &ПроизводствоНаСтороне
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОтгрузки                  КАК Период,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Подразделение                 КАК Подразделение,
	|	ТабличнаяЧасть.Подразделение                 КАК Получатель,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ТабличнаяЧасть.Серия                         КАК Серия,
	|	ТабличнаяЧасть.Склад                         КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	&Назначение                                  КАК Назначение,
	|	ТабличнаяЧасть.Количество                    КАК Заказано,
	|	0                                            КАК ВРезерве,
	|	ТабличнаяЧасть.Количество                    КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И НЕ &ПроизводствоНаСтороне
	|
	|	И (ТабличнаяЧасть.Склад.ЦеховаяКладовая
	|		И ТабличнаяЧасть.Склад.Подразделение = ТабличнаяЧасть.Подразделение)
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРаспоряженияНаПередачуИзПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РаспоряженияНаПередачуИзПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ТабличнаяЧасть.Подразделение                 КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                    КАК Получатель,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                    КАК Назначение,
	|	ВЫБОР
	|		КОГДА &ЯвляетсяНазначениемПродукции
	|			ТОГДА &Назначение
	|		ИНАЧЕ ТабличнаяЧасть.Назначение
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТабличнаяЧасть.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК Операция,
	|	ТабличнаяЧасть.Количество                    КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И (НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		ИЛИ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение <> ТабличнаяЧасть.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ТабличнаяЧасть.Подразделение                 КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                    КАК Получатель,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                    КАК Назначение,
	|	ВЫБОР
	|		КОГДА &ЯвляетсяНазначениемПродукции
	|			ТОГДА &Назначение
	|		ИНАЧЕ ТабличнаяЧасть.Назначение
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТабличнаяЧасть.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК Операция,
	|	ТабличнаяЧасть.Количество                    КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И (НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		ИЛИ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение <> ТабличнаяЧасть.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации                  КАК Период,
	|	ТабличнаяЧасть.Подразделение                 КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                    КАК Получатель,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Обособить ТОГДА
	|				&НазначениеМатериалы
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                                   КАК Назначение,
	|	&Назначение                                 КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТабличнаяЧасть.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства) КАК Операция,
	|	ТабличнаяЧасть.Количество                    КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И (НЕ ТабличнаяЧасть.Получатель.ЦеховаяКладовая
	|		ИЛИ ТабличнаяЧасть.Получатель.Подразделение <> ТабличнаяЧасть.Подразделение)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	ТаблицаТрудозатраты.ДатаВыполнения            КАК Период,
	|	&Организация                                  КАК Организация,
	|	&ПартияПроизводства                           КАК ПартияПроизводства,
	|	ТаблицаТрудозатраты.Ссылка                    КАК Распоряжение,
	|	ТаблицаТрудозатраты.ВидРабот                  КАК ВидРабот,
	|	ТаблицаТрудозатраты.Исполнитель               КАК Исполнитель,
	|	ТаблицаТрудозатраты.Подразделение             КАК Подразделение,
	|	ТаблицаТрудозатраты.КодСтроки                 КАК КодСтрокиРаспоряжения,
	|	ТаблицаТрудозатраты.Количество                КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТаблицаТрудозатраты
	|ГДЕ
	|	(НЕ &ИспользоватьПооперационноеУправление
	|	ИЛИ (&ИспользоватьПооперационноеУправление И НЕ &ОперацияКакРаспоряжениеВыработки)
	|	ИЛИ &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|	И ТаблицаТрудозатраты.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТаблицаТрудозатраты.Выполнено
	|	И НЕ ТаблицаТрудозатраты.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Организация                                 КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК Статья,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов      КАК Аналитика,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК Сумма
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиАктивовПассивов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	&Организация                                 КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК Статья,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов      КАК Аналитика,
	|	ТабличнаяЧасть.НастройкаСчетовУчета          КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) СуммаРегл,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииФиксированнаяСтоимость) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиАктивовПассивов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса =
	// Перемещение номенклатуры. Определяются по заполненному полю КорРазделУчета.
	// Не формируются движения, в которых совпадает аналитика отправителя и получателя.
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО											КАК ДокументДвижения,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)					КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации								КАК Период,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ													КАК АналитикаУчетаНоменклатуры,
	|	&Организация											КАК Организация,
	|	ТабличнаяЧасть.РазделУчета								КАК РазделУчета,
	|	ТабличнаяЧасть.ВидЗапасов								КАК ВидЗапасов,
	|	ТабличнаяЧасть.КорВидЗапасов							КАК КорВидЗапасов,
	|	ТабличнаяЧасть.Количество								КАК Количество,
	|	0														КАК Стоимость,
	|	0														КАК СтоимостьБезНДС,
	|	0														КАК СтоимостьРегл,
	|	0														КАК СтоимостьУпр,
	|	0														КАК СтоимостьЗабалансовая,
	|	0														КАК СтоимостьЗабалансоваяРегл,
	|	ТабличнаяЧасть.ХозяйственнаяОперация					КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ													КАК КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорРазделУчета							КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО											КАК Подразделение,
	|	ТабличнаяЧасть.КорАналитикаФинансовогоУчета				КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО											КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО											КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО											КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО											КАК Партия,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА &ПартияПроизводства
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК КорПартия,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ТабличнаяЧасть.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ВидЗапасов.ВладелецТовара) = ТИП(Справочник.Организации)
	|			ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ТабличнаяЧасть.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА АналитикаРасчетовСКомитентом.КлючАналитики
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаФинансовогоУчета,
	|	&ВыпускПодДеятельность									КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА ТабличнаяЧасть.КорАналитикаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК КорАналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА &ВидДеятельностиНДСНЗП
	|		ИНАЧЕ &ВыпускПодДеятельность
	|	КОНЕЦ													КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)	КАК ТипЗаписи,
	|	ТабличнаяЧасть.ИдентификаторСтроки						КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи				КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка					КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовСКомитентом
	|	ПО АналитикаРасчетовСКомитентом.Организация = &Организация
	|	И АналитикаРасчетовСКомитентом.Партнер = ТабличнаяЧасть.ВидЗапасов.ВладелецТовара
	|	И АналитикаРасчетовСКомитентом.Контрагент = ТабличнаяЧасть.ВидЗапасов.Контрагент
	|	И АналитикаРасчетовСКомитентом.Договор = ТабличнаяЧасть.ВидЗапасов.Договор
	|	И АналитикаРасчетовСКомитентом.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
	|	ПО АналитикаРасчетовИнтеркампани.Организация = &Организация
	|	И АналитикаРасчетовИнтеркампани.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И АналитикаРасчетовИнтеркампани.Контрагент = ТабличнаяЧасть.ВидЗапасов.Контрагент
	|	И АналитикаРасчетовИнтеркампани.Договор = ТабличнаяЧасть.ВидЗапасов.Договор
	|	И АналитикаРасчетовИнтеркампани.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ТабличнаяЧасть.ХозяйственнаяОперация
	|
	|ГДЕ
	|	(&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
	|			И ТабличнаяЧасть.ДатаОперации >= &ПериодПерезаписиДвижений)
	|	И НЕ ТабличнаяЧасть.КорРазделУчета = НЕОПРЕДЕЛЕНО
	// Исключаем движения в которых совпадают отправитель и получатель
	|	И (НЕ ТабличнаяЧасть.РазделУчета = ТабличнаяЧасть.КорРазделУчета
	|		ИЛИ НЕ ТабличнаяЧасть.ВидЗапасов = ТабличнаяЧасть.КорВидЗапасов
	|		ИЛИ НЕ (ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатуры =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры)
	|		И НЕ (НЕ ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход кор. номенклатуры, зеркальный перемещению номенклатуры.
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО											КАК ДокументДвижения,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)					КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации								КАК Период,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ													КАК АналитикаУчетаНоменклатуры,
	|	&Организация											КАК Организация,
	|	ТабличнаяЧасть.КорРазделУчета							КАК РазделУчета,
	|	ТабличнаяЧасть.КорВидЗапасов							КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидЗапасов,
	|	ТабличнаяЧасть.Количество								КАК Количество,
	|	0														КАК Стоимость,
	|	0														КАК СтоимостьБезНДС,
	|	0														КАК СтоимостьРегл,
	|	0														КАК СтоимостьУпр,
	|	0														КАК СтоимостьЗабалансовая,
	|	0														КАК СтоимостьЗабалансоваяРегл,
	|	ТабличнаяЧасть.ХозяйственнаяОперация					КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО											КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО											КАК Подразделение,
	|	ТабличнаяЧасть.КорАналитикаФинансовогоУчета				КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО											КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО											КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО											КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА &ПартияПроизводства
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК Партия,
	|	НЕОПРЕДЕЛЕНО											КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА ТабличнаяЧасть.КорАналитикаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА &ВидДеятельностиНДСНЗП
	|		ИНАЧЕ &ВыпускПодДеятельность
	|	КОНЕЦ													КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение)	КАК ТипЗаписи,
	|	ТабличнаяЧасть.ИдентификаторСтроки						КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи				КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка					КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ТабличнаяЧасть.ХозяйственнаяОперация
	|
	|ГДЕ
	|	(&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
	|			И ТабличнаяЧасть.ДатаОперации >= &ПериодПерезаписиДвижений)
	|	И НЕ ТабличнаяЧасть.КорРазделУчета = НЕОПРЕДЕЛЕНО
	// Исключаем движения в которых совпадают отправитель и получатель
	|	И (НЕ ТабличнаяЧасть.РазделУчета = ТабличнаяЧасть.КорРазделУчета
	|		ИЛИ НЕ ТабличнаяЧасть.ВидЗапасов = ТабличнаяЧасть.КорВидЗапасов
	|		ИЛИ НЕ (ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатуры =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры)
	|		И НЕ (НЕ ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Списание номенклатуры на расходы. Определяются по установленному флагу СписатьНаРасходы
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК ДокументДвижения,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)					КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации								КАК Период,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ													КАК АналитикаУчетаНоменклатуры,
	|	&Организация											КАК Организация,
	|	ТабличнаяЧасть.РазделУчета								КАК РазделУчета,
	|	ТабличнаяЧасть.ВидЗапасов								КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидЗапасов,
	|	ТабличнаяЧасть.Количество								КАК Количество,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0)  КАК ЧИСЛО(31,2)) КАК Стоимость,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0)  КАК ЧИСЛО(31,2)) КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УправленческийУчетОрганизаций
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ													КАК СтоимостьУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаЗабалансовая * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2))   КАК СтоимостьЗабалансовая,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаЗабалансовая * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2))  КАК СтоимостьЗабалансоваяРегл,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
	|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ТабличнаяЧасть.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.СтатьяРасходов.ВидЦенностиНДС В (
	|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА ТабличнаяЧасть.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
	|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ТабличнаяЧасть.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
	|						ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)
	|	КОНЕЦ													КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО											КАК КорРазделУчета,
	|	ТабличнаяЧасть.Получатель								КАК Подразделение,
	|	ТабличнаяЧасть.АналитикаФинансовогоУчета				КАК ГруппаПродукции,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
	|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК СтатьяРасходовСписания,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
	|						ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК СтатьяАктивовПассивов,
	|	ТабличнаяЧасть.АналитикаРасходов						КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов					КАК АналитикаАктивовПассивов,
	|	ТабличнаяЧасть.НастройкаСчетовУчета						КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК Партия,
	|	НЕОПРЕДЕЛЕНО											КАК КорПартия,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ВидЗапасов.ВладелецТовара) = ТИП(Справочник.Организации)
	|			ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА АналитикаРасчетовСКомитентом.КлючАналитики
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК АналитикаУчетаПартий,
	|	ТабличнаяЧасть.АналитикаФинансовогоУчета				КАК АналитикаФинансовогоУчета,
	|	&ВыпускПодДеятельность									КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаФинансовогоУчета,
	|	&ВыпускПодДеятельность									КАК КорВидДеятельностиНДС,
	|	&НаправлениеДеятельности								КАК КорНаправлениеДеятельности,
	|	(ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация В(
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КОНЕЦ) КАК ТипЗаписи,
	|	ТабличнаяЧасть.ИдентификаторСтроки						КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи				КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовСКомитентом
	|	ПО АналитикаРасчетовСКомитентом.Организация = &Организация
	|	И АналитикаРасчетовСКомитентом.Партнер = ТабличнаяЧасть.ВидЗапасов.ВладелецТовара
	|	И АналитикаРасчетовСКомитентом.Контрагент = ТабличнаяЧасть.ВидЗапасов.Контрагент
	|	И АналитикаРасчетовСКомитентом.Договор = ТабличнаяЧасть.ВидЗапасов.Договор
	|	И АналитикаРасчетовСКомитентом.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
	|	ПО АналитикаРасчетовИнтеркампани.Организация = &Организация
	|	И АналитикаРасчетовИнтеркампани.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И АналитикаРасчетовИнтеркампани.Контрагент = ТабличнаяЧасть.ВидЗапасов.Контрагент
	|	И АналитикаРасчетовИнтеркампани.Договор = ТабличнаяЧасть.ВидЗапасов.Договор
	|	И АналитикаРасчетовИнтеркампани.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	(&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
	|			И ТабличнаяЧасть.ДатаОперации >= &ПериодПерезаписиДвижений)
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход продукции. Определяется по хоз. операциям выпуска
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК ДокументДвижения,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	&Организация									КАК Организация,
	|	ТабличнаяЧасть.РазделУчета						КАК РазделУчета,
	|	ТабличнаяЧасть.ВидЗапасов						КАК ВидЗапасов,
	|	ТабличнаяЧасть.КорВидЗапасов					КАК КорВидЗапасов,
	|	ТабличнаяЧасть.Количество						КАК Количество,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))  КАК Стоимость,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))  КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31, 2)) КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УправленческийУчетОрганизаций
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СтоимостьУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаЗабалансовая * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))  КАК СтоимостьЗабалансовая,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаЗабалансовая * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31, 2)) КАК СтоимостьЗабалансоваяРегл,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.ДополнениеДляДавальца
	|			ТОГДА ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры
	|		КОГДА ТабличнаяЧасть.ДополнениеДляДавальца
	|			ТОГДА  ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО									КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО									КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО									КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО									КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО									КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК Партия,
	|	НЕОПРЕДЕЛЕНО									КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК АналитикаУчетаПартий,
	|	ТабличнаяЧасть.АналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
	|	&ВыпускПодДеятельность							КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА НЕ ВТПараметрыПартионногоУчетаДляПроведения.ФИФОСкользящаяОценка
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО									КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО									КАК КорНаправлениеДеятельности,
	|	(ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия) КОНЕЦ) КАК ТипЗаписи,
	|	ТабличнаяЧасть.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка			КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ТабличнаяЧасть.ХозяйственнаяОперация
	|
	|ГДЕ
	|	(&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
	|			И ТабличнаяЧасть.ДатаОперации >= &ПериодПерезаписиДвижений)
	|	И ТабличнаяЧасть.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход побочных изделий на партию производства
	|ВЫБРАТЬ
	|	&Ссылка											КАК ДокументДвижения,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	&Организация									КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
	|	КОНЕЦ											КАК РазделУчета,
	|	ТабличнаяЧасть.ВидЗапасов						КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК КорВидЗапасов,
	|	-ТабличнаяЧасть.Количество						КАК Количество,
	|	-ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))  КАК Стоимость,
	|	-ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))  КАК СтоимостьБезНДС,
	|	-ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31, 2)) КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УправленческийУчетОрганизаций
	|			ТОГДА -ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СтоимостьУпр,
	|	-ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаЗабалансовая * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31, 2))  КАК СтоимостьЗабалансовая,
	|	-ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаЗабалансовая * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31, 2)) КАК СтоимостьЗабалансоваяРегл,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО									КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО									КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО									КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО									КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО									КАК НастройкаСчетовУчета,
	|	&ПартияПроизводства								КАК Партия,
	|	НЕОПРЕДЕЛЕНО									КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаУчетаПартий,
	|	ТабличнаяЧасть.КорАналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
	|	&ВидДеятельностиНДСНЗП							КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаПартий,
	|	ТабличнаяЧасть.АналитикаФинансовогоУчета		КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО									КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО									КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)	КАК ТипЗаписи,
	|	НЕОПРЕДЕЛЕНО									КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииФиксированнаяСтоимость) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	И НЕ ТабличнаяЧасть.ДополнениеДляДавальца
	|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
	|		ИЛИ 
	|		&ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
	|			И ТабличнаяЧасть.ДатаОперации >= &ПериодПерезаписиДвижений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// расход комиссионного материала с товаров принятых
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО											КАК ДокументДвижения,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)					КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации								КАК Период,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ													КАК АналитикаУчетаНоменклатуры,
	|	&Организация											КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию) КАК РазделУчета,
	|	ТабличнаяЧасть.ВидЗапасов								КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидЗапасов,
	|	ТабличнаяЧасть.Количество								КАК Количество,
	|	0														КАК Стоимость,
	|	0														КАК СтоимостьБезНДС,
	|	0														КАК СтоимостьРегл,
	|	0														КАК СтоимостьУпр,
	|	0														КАК СтоимостьЗабалансовая,
	|	0														КАК СтоимостьЗабалансоваяРегл,
	|	ТабличнаяЧасть.ХозяйственнаяОперация					КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО											КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО											КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО											КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО											КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО											КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО											КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО											КАК Партия,
	|	НЕОПРЕДЕЛЕНО											КАК КорПартия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ВидЗапасов.ВладелецТовара) =
	|						ТИП(Справочник.Организации)
	|			ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
	|		ИНАЧЕ АналитикаРасчетовСКомитентом.КлючАналитики
	|	КОНЕЦ													КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО											КАК АналитикаФинансовогоУчета,
	|	&ВыпускПодДеятельность									КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО											КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО											КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)	КАК ТипЗаписи,
	|	НЕОПРЕДЕЛЕНО											КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи				КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеРасходовНаПартииПроизводства) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Период, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ТабличнаяЧасть.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ТабличнаяЧасть.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовСКомитентом
	|	ПО АналитикаРасчетовСКомитентом.Организация = &Организация
	|	И АналитикаРасчетовСКомитентом.Партнер = ТабличнаяЧасть.ВидЗапасов.ВладелецТовара
	|	И АналитикаРасчетовСКомитентом.Контрагент = ТабличнаяЧасть.ВидЗапасов.Контрагент
	|	И АналитикаРасчетовСКомитентом.Договор = ТабличнаяЧасть.ВидЗапасов.Договор
	|	И АналитикаРасчетовСКомитентом.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
	|	ПО АналитикаРасчетовИнтеркампани.Организация = &Организация
	|	И АналитикаРасчетовИнтеркампани.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И АналитикаРасчетовИнтеркампани.Контрагент = ТабличнаяЧасть.ВидЗапасов.Контрагент
	|	И АналитикаРасчетовИнтеркампани.Договор = ТабличнаяЧасть.ВидЗапасов.Договор
	|	И АналитикаРасчетовИнтеркампани.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И (ТабличнаяЧасть.СписатьНаРасходы
	|		ИЛИ ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
	|			И ТабличнаяЧасть.ДатаОперации >= &ПериодПерезаписиДвижений)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	НачалоПериода(&Период, День)            КАК Период,
	|	&ЗаказПереработчику                     КАК ЗаказКлиента,
	|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
	|	ТабличнаяЧасть.Серия                     КАК Серия,
	|	ТабличнаяЧасть.КодСтроки                 КАК КодСтроки,
	|	ТабличнаяЧасть.Склад                     КАК Склад,
	|	ТабличнаяЧасть.Количество                КАК Заказано,
	|	0                                       КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И &ПроизводствоНаСтороне
	|	И &ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОтгрузки              КАК Период,
	|	&ЗаказПереработчику                     КАК ЗаказКлиента,
	|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
	|	ТабличнаяЧасть.Серия                     КАК Серия,
	|	ТабличнаяЧасть.КодСтроки                 КАК КодСтроки,
	|	ТабличнаяЧасть.Склад                     КАК Склад,
	|	0                                       КАК Заказано,
	|	ТабличнаяЧасть.Количество                КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И &ПроизводствоНаСтороне
	|	И &ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	&ЗаказПереработчику                                               КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки                                           КАК КодСтроки,
	|	ТабличнаяЧасть.Получатель                                          КАК Склад,
	|	ВЫБОР КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТабличнаяЧасть.Количество
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТабличнаяЧасть.Количество                                          КАК Заказано
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И &ПроизводствоНаСтороне
	|	И &ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	&ЗаказПереработчику                                               КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки                                           КАК КодСтроки,
	|	ТабличнаяЧасть.Получатель                                          КАК Склад,
	|	ВЫБОР КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТабличнаяЧасть.Количество
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТабличнаяЧасть.Количество                                          КАК Заказано
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И &ПроизводствоНаСтороне
	|	И &ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаОперации									КАК Период,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ТабличнаяЧасть.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.СтатьяРасходов.ВидЦенностиНДС В (
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ТабличнаяЧасть.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
		|				КОНЕЦ
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ТабличнаяЧасть.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)
		|	КОНЕЦ																				КАК ХозяйственнаяОперация,
		|	&Организация																	КАК Организация,
		|	ТабличнаяЧасть.Получатель					КАК Подразделение,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Подразделение				КАК Склад,
		|	ТабличнаяЧасть.ВидЗапасов										КАК ВидЗапасов,
		|	ТабличнаяЧасть.ВидЗапасов.ТипЗапасов					КАК ТипЗапасов,
		|	ТабличнаяЧасть.СтатьяРасходов								КАК СтатьяДоходовРасходов,
		|	ТабличнаяЧасть.АналитикаРасходов							КАК АналитикаРасходов,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов			КАК АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.Количество										КАК Количество,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0)  КАК ЧИСЛО(31,2)) КАК Стоимость,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0)  КАК ЧИСЛО(31,2)) КАК СтоимостьБезНДС,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СтоимостьРегл,
		|	ВЫБОР
		|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
		|			ТОГДА ТабличнаяЧасть.ВидЗапасов
		|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
		|	КОНЕЦ																				КАК ИсточникГФУНоменклатуры
		|ИЗ
		|	ВтВидыЗапасов КАК ТабличнаяЧасть
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
		|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
		|
		|ГДЕ
		|	ТабличнаяЧасть.СписатьНаРасходы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОперации          КАК Период,
	|	ТабличнаяЧасть.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация                         КАК Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.АналитикаУчетаНоменклатуры.МестоХранения) = ТИП(Справочник.Склады)
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады).Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатуры.МестоХранения
	|	КОНЕЦ                                КАК Подразделение,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасовВладельца.ТипЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов.ТипЗапасов
	|	КОНЕЦ                                КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ                                КАК ВидЗапасов,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                КАК КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры.МестоХранения КАК КорСклад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.КорВидЗапасов.ТипЗапасов
	|	КОНЕЦ                                КАК КорТипЗапасов,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.КорВидЗапасов
	|	КОНЕЦ                                КАК КорВидЗапасов,
	|
	|	ТабличнаяЧасть.Количество            КАК Количество,
	|	ТабличнаяЧасть.Количество            КАК КорКоличество,
	|
	|	0                                    КАК Стоимость,
	|	0                                    КАК СтоимостьБезНДС,
	|	0                                    КАК СтоимостьРегл,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
	|	КОНЕЦ                                КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			И ТабличнаяЧасть.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТабличнаяЧасть.КорВидЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
	|	КОНЕЦ                                КАК КорИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                         КАК ДокументДвижения,
	|	НЕОПРЕДЕЛЕНО                         КАК КорОрганизация
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|ГДЕ
	|	НЕ ТабличнаяЧасть.КорРазделУчета = НЕОПРЕДЕЛЕНО
	// Исключаем движения в которых совпадают отправитель и получатель
	|	И (НЕ ТабличнаяЧасть.РазделУчета = ТабличнаяЧасть.КорРазделУчета
	|		ИЛИ НЕ ТабличнаяЧасть.ВидЗапасов = ТабличнаяЧасть.КорВидЗапасов
	|		ИЛИ НЕ (ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатуры =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры)
	|		И НЕ (НЕ ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения)
	|	)
	|	И НЕ (ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ТабличнаяЧасть.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ИдентификаторМетаданных			КАК ТипСсылки,
	|	&Организация						КАК Организация,
	|	Подразделения.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	&Партнер							КАК Партнер,
	|	НЕОПРЕДЕЛЕНО						КАК Контрагент,
	|	&Договор							КАК Договор,
	|	&НаправлениеДеятельности			КАК НаправлениеДеятельности,
	|	Подразделения.ДополнительнаяЗапись	КАК ДополнительнаяЗапись,
	|	Подразделения.Подразделение			КАК Подразделение,
	|	Подразделения.Подразделение			КАК МестоХранения,
	|	Подразделения.Дата					КАК ДатаДокументаИБ,
	|	&Ссылка								КАК Ссылка,
	|	&ИдентификаторРаспоряжения			КАК РазделительЗаписи,
	|	&Номер								КАК НомерДокументаИБ,
	|	&Статус								КАК Статус,
	|	&Ответственный						КАК Ответственный,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА (100))		КАК Дополнительно,
	|	ВЫРАЗИТЬ(&Комментарий КАК СТРОКА (100))	КАК Комментарий,
	|	&Проведен							КАК Проведен,
	|	&ПометкаУдаления					КАК ПометкаУдаления,
	|	Подразделения.Дата					КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать						КАК НомерПервичногоДокумента,
	|	0									КАК Сумма,
	|	&Валюта								КАК Валюта,
	|	ЛОЖЬ								КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО						КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО						КАК ИсправляемыйДокумент,
	|	Подразделения.Дата                  КАК ДатаОтраженияВУчете,
	|	&ПриоритетРеестраДокументов         КАК Приоритет
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОснований КАК Подразделения
	|		ПО ТабличнаяЧасть.Ссылка = Подразделения.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		// Обеспечение потребности в производстве
		"ВЫБРАТЬ
		|	&Период                                КАК Период,
		|
		|	&Распоряжение                          КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|
		|	&Спецификация                          КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|						ТОГДА ТабличнаяЧасть.Подразделение
		|					ИНАЧЕ ТабличнаяЧасть.Получатель
		|				  КОНЕЦ
		|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы        КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаАктивовПассивов,
		|
		|	0                                      КАК Требуется,
		|
		|	ВЫБОР КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)) ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Запланировано,
		|
		|	ВЫБОР
		|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению) ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК ПереданоКПроизводству,
		|
		|	ВЫБОР 
		|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|				И НЕ ТабличнаяЧасть.Произведено 
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Производится,
		|
		|	ВЫБОР 
		|		КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|					И ТабличнаяЧасть.Произведено
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|					И &ПроизводствоНаСтороне
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Произведено,
		|
		|	0                                      КАК ТребуетсяРазборка,
		|	0                                      КАК ГотовКРазборке,
		|	0                                      КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.ОбработатьПоСпецификации
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                                КАК Период,
		|	&Распоряжение                          КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|
		|	&Спецификация                          КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|						ТОГДА ТабличнаяЧасть.Подразделение
		|					ИНАЧЕ ТабличнаяЧасть.Получатель
		|				  КОНЕЦ
		|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы        КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаАктивовПассивов,
		|
		|	0                                      КАК Требуется,
		|
		|	ВЫБОР КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)) ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Запланировано,
		|
		|	ВЫБОР
		|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК ПереданоКПроизводству,
		|
		|	ВЫБОР 
		|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|				И НЕ ТабличнаяЧасть.Произведено 
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Производится,
		|
		|	ВЫБОР 
		|		КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) 
		|					И ТабличнаяЧасть.Произведено
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|					И &ПроизводствоНаСтороне
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Произведено,
		|
		|	0                                      КАК ТребуетсяРазборка,
		|	0                                      КАК ГотовКРазборке,
		|	0                                      КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.ОбработатьПоСпецификации
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Формирование потребности в обеспечении производства
		|ВЫБРАТЬ
		|	&Период                                КАК Период,
		|	&Распоряжение                          КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|
		|	ТабличнаяЧасть.Спецификация            КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА &Ссылка
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		ТабличнаяЧасть.Склад
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|		ТабличнаяЧасть.Подразделение
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|
		|   ЛОЖЬ                                    КАК СписатьНаРасходы,
		|	НЕОПРЕДЕЛЕНО                            КАК СтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                            КАК АналитикаРасходов,
		|	НЕОПРЕДЕЛЕНО                            КАК АналитикаАктивовПассивов,
		|
		|	ТабличнаяЧасть.Количество              КАК Требуется,
		|
		|	0                                      КАК Запланировано,
		|	0                                      КАК ПереданоКПроизводству,
		|	0                                      КАК Производится,
		|	0                                      КАК Произведено,
		|
		|	0                                      КАК ТребуетсяРазборка,
		|	0                                      КАК ГотовКРазборке,
		|	0                                      КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.Производится И НЕ (&ТекстЗапросаРазбираемоеИзделие)
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                              КАК Период,
		|
		|	&Распоряжение                        КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|
		|	&Спецификация                        КАК Спецификация,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Производится
		|			ТОГДА
		|				ТабличнаяЧасть.Назначение
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Назначение,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Производится
		|				И ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА
		|				&Ссылка
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ТабличнаяЧасть.Склад                                  КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)КАК Подразделение,
		|
		|   ЛОЖЬ                                                  КАК СписатьНаРасходы,
		|	НЕОПРЕДЕЛЕНО                                          КАК СтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                          КАК АналитикаРасходов,
		|	НЕОПРЕДЕЛЕНО                                          КАК АналитикаАктивовПассивов,
		|
		|	0                                    КАК Требуется,
		|	0                                    КАК Запланировано,
		|	0                                    КАК ПереданоКПроизводству,
		|	0                                    КАК Производится,
		|	0                                    КАК Произведено,
		|	0                                    КАК ТребуетсяРазборка,
		|	0                                    КАК ГотовКРазборке,
		|	ТабличнаяЧасть.Количество            КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка И (&ТекстЗапросаРазбираемоеИзделие)
		|	И ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ТабличнаяЧасть.Отменено
		|	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Формирование потребности в разборке
		|ВЫБРАТЬ
		|	&Период                              КАК Период,
		|
		|	&Распоряжение                        КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|
		|	ТабличнаяЧасть.Спецификация          КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение            КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                КАК Этап,
		|
		|	ТабличнаяЧасть.Получатель                             КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)КАК Подразделение,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы      КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаАктивовПассивов,
		|
		|	0                                    КАК Требуется,
		|
		|	0                                    КАК Запланировано,
		|	0                                    КАК ПереданоКПроизводству,
		|	0                                    КАК Производится,
		|	0                                    КАК Произведено,
		|
		|	ВЫБОР 
		|		КОГДА НЕ ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ТребуетсяРазборка,
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ГотовКРазборке,
		|
		|	0                                    КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.ОбработатьПоСпецификации
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                              КАК Период,
		|
		|	&Распоряжение                        КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|
		|	ТабличнаяЧасть.Спецификация          КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение            КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                КАК Этап,
		|
		|	ТабличнаяЧасть.Получатель                             КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)КАК Подразделение,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы      КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаАктивовПассивов,
		|
		|	0                                    КАК Требуется,
		|	0                                    КАК Запланировано,
		|	0                                    КАК ПереданоКПроизводству,
		|	0                                    КАК Производится,
		|	0                                    КАК Произведено,
		|
		|	ВЫБОР 
		|		КОГДА НЕ ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ТребуетсяРазборка,
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ГотовКРазборке,
		|
		|	0                                    КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.ОбработатьПоСпецификации
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)";
		
	// Разбираемое изделие в табличной части "Обеспечение материалами и работами" никак не идентифицировано (интерфейсное решение)
	//      - в обеспечении нет колонки <Разбираемое изделие>
	//      - в заказе на производство не указано под какое назначение приходит разбираемое изделие
	// (поиск выполняется по разбираемому изделию - основному изделию партии)
	ТекстЗапросаРазбираемоеИзделие = "
	|( ТабличнаяЧасть.Ссылка.ПартияПроизводства.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И ТабличнаяЧасть.Номенклатура   = ТабличнаяЧасть.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|	И ТабличнаяЧасть.Характеристика = ТабличнаяЧасть.Ссылка.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаРазбираемоеИзделие", ТекстЗапросаРазбираемоеИзделие);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	ВидыЗапасов.ДатаОперации				КАК Период,
	|	ВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	АналитикаКомитента.КлючАналитики		КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасов.Валюта			КАК Валюта,
	|	ВидыЗапасов.НомерГТД					КАК НомерГТД,
	|	0										КАК Количество,
	|	0										КАК СуммаВыручки,
	|	ВидыЗапасов.Количество					КАК КоличествоСписано,
	|	0										КАК КоличествоКОформлению,
	|	0										КАК КоличествоКОформлениюПоРНПТ,
	|	0										КАК СуммаВыручкиКОформлению,
	|	ВидыЗапасов.Количество					КАК КоличествоСписаноКОформлению,
	|	ВидыЗапасов.КоличествоПоРНПТ			КАК КоличествоСписаноКОформлениюПоРНПТ,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура		КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
	|	ВидыЗапасов.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	&ВыпускПодДеятельность					КАК НалогообложениеНДС,
	|	ВидыЗапасов.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка	КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
	|		ПО АналитикаКомитента.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|			И АналитикаКомитента.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|			И АналитикаКомитента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И АналитикаКомитента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			И АналитикаКомитента.МестоХранения = ВидыЗапасов.ВидЗапасов.ВладелецТовара
	|			И АналитикаКомитента.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ВидыЗапасов.ХозяйственнаяОперация
	|
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И (ВидыЗапасов.СписатьНаРасходы
	|		ИЛИ ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	// Выходные изделия
	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                               КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА ТабличнаяЧасть.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК Накладная,
	|	ЛОЖЬ                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                        КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО									КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|						И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|						И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику 
	|				ИНАЧЕ ТабличнаяЧасть.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ                                               КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                     КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                           КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                               КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
	|	КОНЕЦ                                               КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                           КАК Назначение,
	|	0                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                        КАК Серия,
	|	ТабличнаяЧасть.Количество                           КАК Количество,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Получатель) = ТИП(Справочник.Склады)
	|	И (ТабличнаяЧасть.Произведено
	|			ИЛИ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
	
	// Побочные изделия
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                               КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА ТабличнаяЧасть.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК Накладная,
	|	ЛОЖЬ                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                        КАК ИсправляемыйДокумент,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|						И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|						И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику 
	|				ИНАЧЕ ТабличнаяЧасть.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ                                               КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                     КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                           КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                               КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
	|	КОНЕЦ                                               КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                           КАК Назначение,
	|	0                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                        КАК Серия,
	|	ТабличнаяЧасть.Количество                           КАК Количество,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Получатель) = ТИП(Справочник.Склады)
	|	И (ТабличнаяЧасть.Произведено 
	|			ИЛИ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне 
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
		
	// Экономия материалов
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                               КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА ТабличнаяЧасть.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК Накладная,
	|	ЛОЖЬ                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                        КАК ИсправляемыйДокумент,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|						И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|						И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику 
	|				ИНАЧЕ ТабличнаяЧасть.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ                                               КАК Заказ,
	|	ТабличнаяЧасть.ДатаОперации                         КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                           КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                               КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
	|	КОНЕЦ                                               КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                       КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособить ТОГДА
	|			ТабличнаяЧасть.Ссылка.НазначениеМатериалы
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Назначение,
	|	0                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                        КАК Серия,
	|	ТабличнаяЧасть.Количество                           КАК Количество,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Получатель) = ТИП(Справочник.Склады)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
	
КонецПроцедуры

Процедура ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры)
	
	ТекущийОбъектМетаданных = Метаданные.Документы.ЭтапПроизводства2_2;
	
	// Передача выходных изделий в нашу кладовую
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                                        КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка                                                        КАК Накладная,
	|	ЛОЖЬ                                                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                                              КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                                  КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                                    КАК Склад,
	|	ТабличнаяЧасть.Подразделение                                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                                    КАК Назначение,
	|	ТабличнаяЧасть.СтатусУказанияСерий                                           КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Серия                                                         КАК Серия,
	|	ТабличнаяЧасть.Количество                                                    КАК Количество,
	|	ИСТИНА                                                                       КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                         КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                         КАК СверхЗаказа,
	|	ЛОЖЬ                                                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПоляСоединенияССериями = Новый Массив();
	ДополнительныеПоляСоединенияССериями.Добавить("ДатаПроизводства");
	ДополнительныеПоляСоединенияССериями.Добавить("Произведено");
	ДополнительныеПоляСоединенияССериями.Добавить("Отменено");
	ДополнительныеПоляСоединенияССериями.Добавить("Получатель");
	ДополнительныеПоляСоединенияССериями.Добавить("Подразделение");
	
	ПараметрыМодульногоПроведения = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМодульногоПроведения.ИмяТЧСерии = "ВыходныеИзделияСерии";
	ПараметрыМодульногоПроведения.СинонимТаблицыДокумента = "ТабличнаяЧасть";
	ПараметрыМодульногоПроведения.ДополнительныеПоляСоединенияССериями = ДополнительныеПоляСоединенияССериями;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовкеСНастройкойСоединенияСерий(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМодульногоПроведения);
		
	// Передача побочных изделий в нашу кладовую
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                                        КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка                                                        КАК Накладная,
	|	ЛОЖЬ                                                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                                              КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                                  КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                                    КАК Склад,
	|	ТабличнаяЧасть.Подразделение                                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                                    КАК Назначение,
	|	ТабличнаяЧасть.СтатусУказанияСерий                                           КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Серия                                                         КАК Серия,
	|	ТабличнаяЧасть.Количество                                                    КАК Количество,
	|	ИСТИНА                                                                       КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                         КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                         КАК СверхЗаказа,
	|	ЛОЖЬ                                                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПоляСоединенияССериями = Новый Массив();
	ДополнительныеПоляСоединенияССериями.Добавить("ДатаПроизводства");
	ДополнительныеПоляСоединенияССериями.Добавить("Произведено");
	ДополнительныеПоляСоединенияССериями.Добавить("Отменено");
	ДополнительныеПоляСоединенияССериями.Добавить("Получатель");
	ДополнительныеПоляСоединенияССериями.Добавить("Подразделение");
	
	ПараметрыМодульногоПроведения = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМодульногоПроведения.ИмяТЧСерии = "ПобочныеИзделияСерии";
	ПараметрыМодульногоПроведения.СинонимТаблицыДокумента = "ТабличнаяЧасть";
	ПараметрыМодульногоПроведения.ДополнительныеПоляСоединенияССериями = ДополнительныеПоляСоединенияССериями;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовкеСНастройкойСоединенияСерий(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМодульногоПроведения);
	
	// Передача неизрасходованных материалов в нашу кладовую
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                                        КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка                                                        КАК Накладная,
	|	ЛОЖЬ                                                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Заказ,
	|	ТабличнаяЧасть.ДатаОперации                                                  КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                                  КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                                    КАК Склад,
	|	ТабличнаяЧасть.Подразделение                                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                                КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособить ТОГДА
	|			ТабличнаяЧасть.Ссылка.НазначениеМатериалы
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                                        КАК Назначение,
	|	ТабличнаяЧасть.СтатусУказанияСерий                                           КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Серия                                                         КАК Серия,
	|	ТабличнаяЧасть.Количество                                                    КАК Количество,
	|	ИСТИНА                                                                       КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                         КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                         КАК СверхЗаказа,
	|	ЛОЖЬ                                                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПоляСоединенияССериями = Новый Массив();
	ДополнительныеПоляСоединенияССериями.Добавить("ДатаОперации");
	ДополнительныеПоляСоединенияССериями.Добавить("Обособить");
	ДополнительныеПоляСоединенияССериями.Добавить("Получатель");
	ДополнительныеПоляСоединенияССериями.Добавить("Подразделение");
	
	ПараметрыМодульногоПроведения = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМодульногоПроведения.ИмяТЧСерии = "ЭкономияМатериаловСерии";
	ПараметрыМодульногоПроведения.СинонимТаблицыДокумента = "ТабличнаяЧасть";
	ПараметрыМодульногоПроведения.ДополнительныеПоляСоединенияССериями = ДополнительныеПоляСоединенияССериями;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовкеСНастройкойСоединенияСерий(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМодульногоПроведения);
	
КонецПроцедуры

Процедура ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                         КАК Ссылка,
	|	ВЫБОР КОГДА ТабличнаяЧасть.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|				ТабличнаяЧасть.ДатаОтгрузки
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Ссылка.Дата
	|		КОНЕЦ                                     КАК Период,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику 
	|		ИНАЧЕ ТабличнаяЧасть.Ссылка
	|	КОНЕЦ                                         КАК Заказ,
	|	ТабличнаяЧасть.Ссылка                         КАК Накладная,
	|	ЛОЖЬ                                          КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                  КАК ИсправляемыйДокумент,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                         КАК Получатель,
	|	ТабличнаяЧасть.Склад                          КАК Склад,
	|	ТабличнаяЧасть.Номенклатура                   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТабличнаяЧасть.Серия                          КАК Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Количество                     КАК Количество,	
	|	ЛОЖЬ			                              КАК Отменено,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL            КАК ЭтоНакладная,
	|	ЛОЖЬ                                          КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                          КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Склад
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
		
КонецПроцедуры

Процедура ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                         КАК Ссылка,
	|	ТабличнаяЧасть.ДатаОтгрузки                   КАК Период,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику 
	|		ИНАЧЕ ТабличнаяЧасть.Ссылка
	|	КОНЕЦ                                         КАК Заказ,
	|	ТабличнаяЧасть.Ссылка                         КАК Накладная,
	|	ЛОЖЬ                                          КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                  КАК ИсправляемыйДокумент,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|				И ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                         КАК Получатель,
	|	ТабличнаяЧасть.Склад                          КАК Склад,
	|	ТабличнаяЧасть.Номенклатура                   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТабличнаяЧасть.Серия                          КАК Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Количество                     КАК Количество,	
	|	ЛОЖЬ			                              КАК Отменено,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL            КАК ЭтоНакладная,
	|	ЛОЖЬ                                          КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                          КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Склад
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                         КАК Ссылка,
	|	ТабличнаяЧасть.ДатаОтгрузки                   КАК Период,
	|	ТабличнаяЧасть.Ссылка                         КАК Заказ,
	|	ТабличнаяЧасть.Ссылка                         КАК Накладная,
	|	ЛОЖЬ                                          КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                  КАК ИсправляемыйДокумент,
	|	ТабличнаяЧасть.Подразделение                  КАК Получатель,
	|	ТабличнаяЧасть.Склад                          КАК Склад,
	|	ТабличнаяЧасть.Номенклатура                   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТабличнаяЧасть.Серия                          КАК Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Количество                     КАК Количество,	
	|	ЛОЖЬ                                          КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                          КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Склад
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногоОборотнаяТара))
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	Тексты = Новый СписокЗначений;
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата    КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Склад
		|			КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособленно ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Назначение
		|						КОГДА ТабличнаяЧасть.Производится ТОГДА
		|							ТабличнаяЧасть.Ссылка.НазначениеПолуфабрикаты
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|					КОНЕЦ
		|				
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|				ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	
		|	ИСТИНА                        КАК КонтрольСвободногоОстатка,
		|	ЛОЖЬ                          КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка             КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата        КАК Период,
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабличнаяЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособленно ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Назначение
		|						КОГДА ТабличнаяЧасть.Производится ТОГДА
		|							ТабличнаяЧасть.Ссылка.НазначениеПолуфабрикаты
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|					КОНЕЦ
		|				
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество         КАК Количество,
		|	ТабличнаяЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|				ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.НеОтгружатьЧастями ТОГДА
		|				ТабличнаяЧасть.Ссылка.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабличнаяЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|			ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Статус В(
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) ТОГДА
		|					
		|					ТабличнаяЧасть.ДатаПроизводства
		|					
		|			КОГДА ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению) ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|							
		|							ТабличнаяЧасть.ДатаПроизводства
		|							
		|						ИНАЧЕ
		|							
		|							ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|											И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
		|												
		|												НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
		|												
		|									ИНАЧЕ
		|										
		|										ДАТАВРЕМЯ(1,1,1)
		|										
		|								КОНЕЦ
		|						
		|					КОНЕЦ
		|			ИНАЧЕ
		|				
		|				ДАТАВРЕМЯ(1,1,1)
		|				
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		ИЛИ ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|			И ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|						
		|						ИСТИНА
		|						
		|					ИНАЧЕ
		|						
		|						НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|							И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение)
		|						
		|				КОНЕЦ КАК ДоступенДляРасхода,
		|	
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
		|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
		|		 И ГрафикПроизводства.СтатусГрафика    = 0 // рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
		|		ПО ИСТИНА
		|ГДЕ
		|		НЕ ТабличнаяЧасть.Отменено
		|			И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	0                                  КАК Количество,
		|	НЕОПРЕДЕЛЕНО                       КАК ВариантОбеспечения,
		|	НЕОПРЕДЕЛЕНО                       КАК Заказ,
		|	НЕОПРЕДЕЛЕНО                       КАК ЖелаемаяДатаОтгрузки,
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|			ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Статус В(
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) ТОГДА
		|					
		|					ТабличнаяЧасть.ДатаПроизводства
		|					
		|			КОГДА ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению) ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|							
		|							ТабличнаяЧасть.ДатаПроизводства
		|							
		|						ИНАЧЕ
		|							
		|							ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|											И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
		|												
		|												НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
		|												
		|									ИНАЧЕ
		|										
		|										ДАТАВРЕМЯ(1,1,1)
		|										
		|								КОНЕЦ
		|						
		|					КОНЕЦ
		|			ИНАЧЕ
		|				
		|				ДАТАВРЕМЯ(1,1,1)
		|				
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		ИЛИ ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|			И ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|						
		|						ИСТИНА
		|						
		|					ИНАЧЕ
		|						
		|						НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|							И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение)
		|						
		|				КОНЕЦ КАК ДоступенДляРасхода,
		|	
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
		|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
		|		 И ГрафикПроизводства.СтатусГрафика    = 0 // рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
		|		ПО ИСТИНА
		|ГДЕ
		|		НЕ ТабличнаяЧасть.Отменено
		|			И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	0                                  КАК Количество,
		|	НЕОПРЕДЕЛЕНО                       КАК ВариантОбеспечения,
		|	НЕОПРЕДЕЛЕНО                       КАК Заказ,
		|	НЕОПРЕДЕЛЕНО                       КАК ЖелаемаяДатаОтгрузки,
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата    КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Получатель     КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособить ТОГДА
		|				ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	ТабличнаяЧасть.Ссылка         КАК Заказ,
		|	ТабличнаяЧасть.ДатаОперации   КАК ДатаПоступления,
		|	ИСТИНА                        КАК ДоступенДляРасхода,
		|	ЛОЖЬ                          КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                  КАК РаспоряжениеВГрафике,
		|	0                             КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		И (НЕ ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				ИЛИ ТабличнаяЧасть.Получатель.Подразделение <> ТабличнаяЧасть.Подразделение)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка           КАК Ссылка,
		|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
		|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика   КАК Характеристика,
		|	ТабличнаяЧасть.Получатель       КАК Склад,
		|	ТабличнаяЧасть.Назначение       КАК Назначение,
		|	ТабличнаяЧасть.Количество       КАК Количество,
		|	ИСТИНА                          КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка           КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.Произведено
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И (ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка           КАК Ссылка,
		|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
		|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика   КАК Характеристика,
		|	ТабличнаяЧасть.Получатель       КАК Склад,
		|	ТабличнаяЧасть.Назначение       КАК Назначение,
		|	ТабличнаяЧасть.Количество       КАК Количество,
		|	ИСТИНА                          КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка           КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.Произведено
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И (ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.ДатаОперации   КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Получатель     КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособить ТОГДА
		|				ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	ЛОЖЬ                          КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                  КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|		И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	Если Тексты.Количество() > 0 Тогда
		ТекстыЗапроса.Добавить(
			СтрСоединить(Тексты.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()),
			"РаспределениеЗапасовДвижения");
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстыЗапросаРаспределениеЗапасовДвиженияДляОбновленияИБ() Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений();
	Регистры = Неопределено;
	
	Тексты = Новый СписокЗначений;
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата    КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Ссылка.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Подразделение
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Склад
		|			КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособленно
		|		ИЛИ ТабличнаяЧасть.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно)) ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Назначение
		|						КОГДА ТабличнаяЧасть.Производится ТОГДА
		|							ТабличнаяЧасть.Ссылка.НазначениеПолуфабрикаты
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|					КОНЕЦ
		|				
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|				ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	
		|	ИСТИНА                        КАК КонтрольСвободногоОстатка,
		|	ЛОЖЬ                          КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно))";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка             КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата        КАК Период,
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ВЫБОР КОГДА ТабличнаяЧасть.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Ссылка.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Подразделение
		|					КОНЕЦ
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособленно
		|		ИЛИ ТабличнаяЧасть.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно)) ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Назначение
		|						КОГДА ТабличнаяЧасть.Производится ТОГДА
		|							ТабличнаяЧасть.Ссылка.НазначениеПолуфабрикаты
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|					КОНЕЦ
		|				
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество         КАК Количество,
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно) ТОГДА
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|			КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно) ТОГДА
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|			КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьИзЗаказов) ТОГДА
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|			ИНАЧЕ
		|				ТабличнаяЧасть.ВариантОбеспечения
		|		КОНЕЦ КАК ВариантОбеспечения,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|				ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.НеОтгружатьЧастями ТОГДА
		|				ТабличнаяЧасть.Ссылка.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабличнаяЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И НЕ ТабличнаяЧасть.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно))";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|			ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Статус В(
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) ТОГДА
		|					
		|					ТабличнаяЧасть.ДатаПроизводства
		|					
		|			КОГДА ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению) ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|							
		|							ТабличнаяЧасть.ДатаПроизводства
		|							
		|						ИНАЧЕ
		|							
		|							ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|											И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
		|												
		|												НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
		|												
		|									ИНАЧЕ
		|										
		|										ДАТАВРЕМЯ(1,1,1)
		|										
		|								КОНЕЦ
		|						
		|					КОНЕЦ
		|			ИНАЧЕ
		|				
		|				ДАТАВРЕМЯ(1,1,1)
		|				
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		ИЛИ ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|			И ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|						
		|						ИСТИНА
		|						
		|					ИНАЧЕ
		|						
		|						НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|							И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение)
		|						
		|				КОНЕЦ КАК ДоступенДляРасхода,
		|	
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
		|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
		|		 И ГрафикПроизводства.СтатусГрафика    = 0 // рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
		|		ПО ИСТИНА
		|ГДЕ
		|		НЕ ТабличнаяЧасть.Отменено
		|			И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	0                                  КАК Количество,
		|	НЕОПРЕДЕЛЕНО                       КАК ВариантОбеспечения,
		|	НЕОПРЕДЕЛЕНО                       КАК Заказ,
		|	НЕОПРЕДЕЛЕНО                       КАК ЖелаемаяДатаОтгрузки,
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|			ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Статус В(
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) ТОГДА
		|					
		|					ТабличнаяЧасть.ДатаПроизводства
		|					
		|			КОГДА ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению) ТОГДА
		|				
		|				ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|							
		|							ТабличнаяЧасть.ДатаПроизводства
		|							
		|						ИНАЧЕ
		|							
		|							ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|											И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
		|												
		|												НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
		|												
		|									ИНАЧЕ
		|										
		|										ДАТАВРЕМЯ(1,1,1)
		|										
		|								КОНЕЦ
		|						
		|					КОНЕЦ
		|			ИНАЧЕ
		|				
		|				ДАТАВРЕМЯ(1,1,1)
		|				
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		ИЛИ ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|			И ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику.Проведен ТОГДА
		|						
		|						ИСТИНА
		|						
		|					ИНАЧЕ
		|						
		|						НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|							И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение)
		|						
		|				КОНЕЦ КАК ДоступенДляРасхода,
		|	
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
		|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
		|		 И ГрафикПроизводства.СтатусГрафика    = 0 // рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
		|		ПО ИСТИНА
		|ГДЕ
		|		НЕ ТабличнаяЧасть.Отменено
		|			И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	0                                  КАК Количество,
		|	НЕОПРЕДЕЛЕНО                       КАК ВариантОбеспечения,
		|	НЕОПРЕДЕЛЕНО                       КАК Заказ,
		|	НЕОПРЕДЕЛЕНО                       КАК ЖелаемаяДатаОтгрузки,
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата    КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Получатель     КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособить ТОГДА
		|				ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	ТабличнаяЧасть.Ссылка         КАК Заказ,
		|	ТабличнаяЧасть.ДатаОперации   КАК ДатаПоступления,
		|	ИСТИНА                        КАК ДоступенДляРасхода,
		|	ЛОЖЬ                          КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                  КАК РаспоряжениеВГрафике,
		|	0                             КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		И (НЕ ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				ИЛИ ТабличнаяЧасть.Получатель.Подразделение <>
		|					ВЫБОР КОГДА ТабличнаяЧасть.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Ссылка.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Подразделение
		|					КОНЕЦ)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка           КАК Ссылка,
		|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
		|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика   КАК Характеристика,
		|	ТабличнаяЧасть.Получатель       КАК Склад,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	ТабличнаяЧасть.Количество       КАК Количество,
		|	ИСТИНА                          КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка           КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.Произведено
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И (ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				И ТабличнаяЧасть.Получатель.Подразделение =
		|					ВЫБОР КОГДА ТабличнаяЧасть.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Ссылка.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Подразделение
		|					КОНЕЦ
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка           КАК Ссылка,
		|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
		|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика   КАК Характеристика,
		|	ТабличнаяЧасть.Получатель       КАК Склад,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	ТабличнаяЧасть.Количество       КАК Количество,
		|	ИСТИНА                          КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка           КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.Произведено
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И (ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				И ТабличнаяЧасть.Получатель.Подразделение =
		|					ВЫБОР КОГДА ТабличнаяЧасть.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Ссылка.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Подразделение
		|					КОНЕЦ
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.ДатаОперации   КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Получатель     КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособить ТОГДА
		|				ТабличнаяЧасть.Ссылка.НазначениеМатериалы
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	ЛОЖЬ                          КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                  КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|		И ТабличнаяЧасть.Получатель.Подразделение =
		|			ВЫБОР КОГДА ТабличнаяЧасть.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Ссылка.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Подразделение
		|					КОНЕЦ";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	Если Тексты.Количество() > 0 Тогда
		ТекстыЗапроса.Добавить(
			СтрСоединить(Тексты.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()),
			"РаспределениеЗапасовДвижения");
	КонецЕсли;
	
	Возврат ТекстыЗапроса;
	
КонецФункции

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтКоэффициентыПересчетаВалют");
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, "СебестоимостьТоваров");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область СписаниеНаДругиеПартии_ТоварРабота
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					 	КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры    	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов			 		 	КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС		 		КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО										КАК КорОрганизация,
	|	ТаблицаВидыЗапасов.ПартияПроизводства            	КАК КорПартия,
	|	ТаблицаВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка									КАК Сделка,
	|	ТаблицаДокумента.Подразделение             				КАК Подразделение,
	|	ТаблицаДокумента.Менеджер								КАК Менеджер,
	|	ТаблицаВидыЗапасов.ГруппаПродукции 						КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 			КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация									КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи									КАК ИдентификаторФинЗаписи,
	|	ТаблицаВидыЗапасов.НастройкаХозяйственнойОперации							КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаДругиеПартии,
		ТекстЗапроса);
		
	#КонецОбласти

	#Область ВнешнееПоступление_Услуги
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 		КАК Период,
	|	ТаблицаДокумента.Ссылка 	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО										КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ПартияПроизводства				КАК Партия,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаПартий,
	|	ТаблицаДокумента.Партнер		КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 	КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО					КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка			КАК Сделка,
	|	ТаблицаДокумента.Подразделение 	КАК Подразделение,
	|	ТаблицаДокумента.Менеджер 		КАК Менеджер,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 			КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.Стоимость                    КАК Стоимость,
	|	ТаблицаВидыЗапасов.СтоимостьБезНДС              КАК СтоимостьБезНДС,
	|	ТаблицаВидыЗапасов.СтоимостьРегл                КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.СуммаНДС
	|	КОНЕЦ                                           КАК НДСРегл,
	|	ТаблицаВидыЗапасов.СтоимостьУпр                 КАК СтоимостьУпр,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.НДСУпр
	|	КОНЕЦ                                           КАК НДСУпр,
	|	0												КАК СтоимостьЗабалансовая,
	|	0												КАК СтоимостьЗабалансоваяРегл,
	|	0 												КАК ДопРасходы,
	|	0 												КАК ДопРасходыБезНДС,
	|	0 												КАК ДопРасходыРегл,
	|	0 												КАК ДопРасходыУпр,
	|	0 												КАК ПостояннаяРазница,
	|	0 												КАК ВременнаяРазница,
	|	0												КАК КорСтоимость,
	|
	// Прочие поля
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
	|	ТаблицаВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти

	#Область ВнешнееПоступление_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 		КАК Период,
	|	ТаблицаДокумента.Ссылка 	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ПартияВыпуска					КАК Партия,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартий			КАК КорАналитикаУчетаПартий,
	|	ТаблицаДокумента.Партнер		КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 	КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО					КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка			КАК Сделка,
	|	ТаблицаДокумента.Подразделение 	КАК Подразделение,
	|	ТаблицаДокумента.Менеджер 		КАК Менеджер,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 			КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.Стоимость                    КАК Стоимость,
	|	ТаблицаВидыЗапасов.СтоимостьБезНДС              КАК СтоимостьБезНДС,
	|	ТаблицаВидыЗапасов.СтоимостьРегл                КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.СуммаНДС
	|	КОНЕЦ                                           КАК НДСРегл,
	|	ТаблицаВидыЗапасов.СтоимостьУпр                 КАК СтоимостьУпр,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.НДСУпр
	|	КОНЕЦ                                           КАК НДСУпр,
	|	0												КАК СтоимостьЗабалансовая,
	|	0												КАК СтоимостьЗабалансоваяРегл,
	|	0 												КАК ДопРасходы,
	|	0 												КАК ДопРасходыБезНДС,
	|	0 												КАК ДопРасходыРегл,
	|	0 												КАК ДопРасходыУпр,
	|	0 												КАК ПостояннаяРазница,
	|	0 												КАК ВременнаяРазница,
	|	0												КАК КорСтоимость,
	|
	// Прочие поля
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
	|	ТаблицаВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти
	
	#Область СписаниеНаРасходыАктивы_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов 					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность			КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО												КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО 												КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО		    									КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.СтатьяРасходов 			    			КАК СтатьяРасходовАктивов,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаРасходов                
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаАктивовПассивов
	|	КОНЕЦ    						  			    			КАК АналитикаРасходовАктивов,
	|	НЕОПРЕДЕЛЕНО			    								КАК КорНаправлениеДеятельности,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка									КАК Сделка,
	|	ТаблицаДокумента.Подразделение             				КАК Подразделение,
	|	ТаблицаДокумента.Менеджер								КАК Менеджер,
	|	ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			И НЕ ТаблицаВидыЗапасов.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаВидыЗапасов.ГруппаПродукции
	|		КОГДА НЕ ТаблицаВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			И НЕ ТаблицаВидыЗапасов.КорГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаВидыЗапасов.КорГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 													КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 		КАК Количество,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)	КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	 									КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи									КАК ИдентификаторФинЗаписи,
	|	ТаблицаВидыЗапасов.НастройкаХозяйственнойОперации							КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|	И ТаблицаВидыЗапасов.СписатьНаРасходы
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы,
		ТекстЗапроса);
	
	#КонецОбласти

	#Область ВнешнееПоступление_ОтрицательныеЗатраты
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 		КАК Период,
	|	ТаблицаДокумента.Ссылка 	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ТаблицаВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ПартияПроизводства				КАК Партия,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаПартий,
	|	ТаблицаДокумента.Партнер		КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 	КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО					КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка			КАК Сделка,
	|	ТаблицаДокумента.Подразделение 	КАК Подразделение,
	|	ТаблицаДокумента.Менеджер 		КАК Менеджер,
	|
	// Количественные и суммовые показатели
	|	-ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 			КАК ИдентификаторСтроки,
	|	-ТаблицаВидыЗапасов.Стоимость                   КАК Стоимость,
	|	-ТаблицаВидыЗапасов.СтоимостьБезНДС             КАК СтоимостьБезНДС,
	|	-ТаблицаВидыЗапасов.СтоимостьРегл               КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаВидыЗапасов.СуммаНДС
	|	КОНЕЦ                                           КАК НДСРегл,
	|	-ТаблицаВидыЗапасов.СтоимостьУпр                КАК СтоимостьУпр,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаВидыЗапасов.НДСУпр
	|	КОНЕЦ                                           КАК НДСУпр,
	|	0												КАК СтоимостьЗабалансовая,
	|	0												КАК СтоимостьЗабалансоваяРегл,
	|	0 												КАК ДопРасходы,
	|	0 												КАК ДопРасходыБезНДС,
	|	0 												КАК ДопРасходыРегл,
	|	0 												КАК ДопРасходыУпр,
	|	0 												КАК ПостояннаяРазница,
	|	0 												КАК ВременнаяРазница,
	|	0												КАК КорСтоимость,
	|
	// Прочие поля
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
	|	ТаблицаВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти

	#Область ВнешнееПоступление_МатериалыНаПродукцию
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 		КАК Период,
	|	ТаблицаДокумента.Ссылка 	КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ХозяйственнаяОперацияИсходная В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|			ТОГДА ТаблицаДокумента.Ссылка
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                       КАК ДокументИсточник,
	|	ТаблицаДокумента.Дата		КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ПартияПроизводства				КАК Партия,
	|	ТаблицаВидыЗапасов.КорВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	ТаблицаВидыЗапасов.КорАналитикаУчетаПартий		КАК КорАналитикаУчетаПартий,
	|	ТаблицаДокумента.Партнер		КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 	КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО					КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка			КАК Сделка,
	|	ТаблицаДокумента.Подразделение 	КАК Подразделение,
	|	ТаблицаДокумента.Менеджер 		КАК Менеджер,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 			КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.Стоимость                    КАК Стоимость,
	|	ТаблицаВидыЗапасов.СтоимостьБезНДС              КАК СтоимостьБезНДС,
	|	ТаблицаВидыЗапасов.СтоимостьРегл                КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.СуммаНДС
	|	КОНЕЦ                                           КАК НДСРегл,
	|	ТаблицаВидыЗапасов.СтоимостьУпр                 КАК СтоимостьУпр,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.НДСУпр
	|	КОНЕЦ                                           КАК НДСУпр,
	|	0												КАК СтоимостьЗабалансовая,
	|	0												КАК СтоимостьЗабалансоваяРегл,
	|	0 												КАК ДопРасходы,
	|	0 												КАК ДопРасходыБезНДС,
	|	0 												КАК ДопРасходыРегл,
	|	0 												КАК ДопРасходыУпр,
	|	0 												КАК ПостояннаяРазница,
	|	0 												КАК ВременнаяРазница,
	|	0												КАК КорСтоимость,
	|
	// Прочие поля
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторФинЗаписи,
	|	ТаблицаВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРаспределенныеВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти
	
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроведениеРегламентированныйУчет

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ЭтапПроизводства2_2Локализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//  Строка - Текст запроса ВТОтражения в регл учете
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ЭтапПроизводства2_2Локализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область ПакетноеФормированиеДвижений

Процедура ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(Параметры, Этапы, МенеджерВТСпособыПолученияМатериалов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос);
	
	// Выборка очереди обработки
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства КАК Ссылка,
		|	НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска КАК Очередь
		|ПОМЕСТИТЬ ВТОчередьОбработки
		|ИЗ
		|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|ГДЕ
		|	НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства В(&Этапы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОчередьОбработки.Ссылка КАК Ссылка,
		|	ВТОчередьОбработки.Очередь КАК Очередь
		|ИЗ
		|	ВТОчередьОбработки КАК ВТОчередьОбработки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Очередь,
		|	Ссылка";
	Запрос.УстановитьПараметр("Этапы", Этапы);
	
	ОчередьОбработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Подготовка текстов запросов
	ПорядокЗапросов = Новый Массив;
	Запрос.Текст = ТекстЗапросаДляПакетногоФормированияДвижений(Запрос, ПорядокЗапросов);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ОтразитьРаспределениеЗапасовДвижения(Новый Запрос, ТекстыЗапроса, "РаспределениеЗапасовДвижения");
	ТекстЗапросаРаспределениеЗапасовДвижения = ТекстыЗапроса[0].Значение;
	
	// Обработка документов порциями по 1000 штук
	ПорцияОбработки = Новый Массив;
	МаксИндекс = ОчередьОбработки.ВГраница();
	
	Для Индекс = 0 По МаксИндекс Цикл
		
		ПорцияОбработки.Добавить(ОчередьОбработки[Индекс]);
		
		Если Индекс = МаксИндекс ИЛИ ПорцияОбработки.Количество() = 1000 Тогда
			
			// Заполнение обеспечения
			ЗаполнитьОбеспечениеВПакетномРежиме(ПорцияОбработки, Параметры, МенеджерВТСпособыПолученияМатериалов);
			
			// Формирование движений
			Для Сч = 1 По 2 Цикл
				
				ПараметрыРаспределенияЗапасов = Неопределено;
				РаспределениеЗапасовДвижения.ПередЗаписьюПакетно(
					ПорцияОбработки, ТекстЗапросаРаспределениеЗапасовДвижения, ПараметрыРаспределенияЗапасов);
				
				Запрос.УстановитьПараметр("Этапы", ПорцияОбработки);
				УстановитьПривилегированныйРежим(Истина);
				ПакетРезультатов = Запрос.ВыполнитьПакет();
				УстановитьПривилегированныйРежим(Ложь);
				
				ДанныеДвижений = Новый Структура();
				ВерсииДанных = Неопределено;
				Для ИндексЗапрос = 0 По ПорядокЗапросов.ВГраница() Цикл
					Если ПорядокЗапросов[ИндексЗапрос] = "ВерсииДанных" Тогда
						ВерсииДанных = ПакетРезультатов[ИндексЗапрос].Выбрать();
					ИначеЕсли ПорядокЗапросов[ИндексЗапрос] <> "ВременнаяТаблица" Тогда
						Выборка = ПакетРезультатов[ИндексЗапрос].Выбрать();
						Если Выборка.Следующий() Тогда
							ДанныеДвижений.Вставить(ПорядокЗапросов[ИндексЗапрос], Выборка);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ЭтапыОтказ = СформироватьДвиженияВПакетномРежиме(
					ДанныеДвижений, ПорцияОбработки, ВерсииДанных, ПараметрыРаспределенияЗапасов);
				
				Если ЭтапыОтказ.ВГраница() <> -1 Тогда
					УстановитьЭтапамСтатусФормируется(ЭтапыОтказ);
					ПорцияОбработки = ЭтапыОтказ;
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ПорцияОбработки.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДляПакетногоФормированияДвижений(Запрос, ПорядокЗапросов)
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Этапы.Ссылка             КАК Ссылка,
		|	Этапы.ВерсияДанных       КАК ВерсияДанных,
		|	ОчередьОбработки.Очередь КАК Очередь
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОчередьОбработки КАК ОчередьОбработки
		|		ПО Этапы.Ссылка = ОчередьОбработки.Ссылка
		|ГДЕ
		|	Этапы.Ссылка В (&Этапы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Очередь,
		|	Ссылка");
	ПорядокЗапросов.Добавить("ВерсииДанных");
	
	ВременныеТаблицы = Новый Массив;
	
	СписокТекстов = ТекстыЗапросаДляФормированияДвижений(
		Запрос,
		РегистрыДляПакетногоФормированияДвижений());
	
	Для каждого Элемент Из СписокТекстов Цикл
		
		Если ПустаяСтрока(Элемент.Представление) Тогда
			ТекстЗапроса = Элемент.Значение;
		Иначе
			ТекстЗапроса = СтрШаблон("// %1%2%3", Элемент.Представление, Символы.ПС, Элемент.Значение);
		КонецЕсли;
		
		ЭтоВременнаяТаблица = СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ ") <> 0;
		
		// Адаптация текста запроса для пакетного чтения
		Если Не ЭтоВременнаяТаблица Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБРАТЬ", //@Query-part-1
				"ВЫБРАТЬ
				|	ТабличнаяЧасть.Ссылка    КАК СсылкаПакет,
				|	ОчередьОбработки.Очередь КАК Очередь,"); //@Query-part-1
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"СГРУППИРОВАТЬ ПО",
				"СГРУППИРОВАТЬ ПО
				|	ТабличнаяЧасть.Ссылка,
				|	ОчередьОбработки.Очередь,");
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"КАК ТабличнаяЧасть",
				"КАК ТабличнаяЧасть
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОчередьОбработки КАК ОчередьОбработки
				|	ПО ТабличнаяЧасть.Ссылка = ОчередьОбработки.Ссылка
				|");
			
			ТекстЗапроса = ТекстЗапроса + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	Очередь,
				|	СсылкаПакет";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ТабличнаяЧасть.Ссылка = &Ссылка",
			"ТабличнаяЧасть.Ссылка В (&Этапы)");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ТабличнаяЧасть.Ссылка В (&Ссылка)",
			"ТабличнаяЧасть.Ссылка В (&Этапы)");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"= &Ссылка",
			"В (&Этапы)");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&НакладнаяЯвляетсяРаспоряжением",
			"ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		Если ЭтоВременнаяТаблица Тогда
			ВременныеТаблицы.Добавить(Элемент.Представление);
			ПорядокЗапросов.Добавить("ВременнаяТаблица");
		Иначе
			ПорядокЗапросов.Добавить(Элемент.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		ТекстыЗапросов.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяТаблицы));
		ПорядокЗапросов.Добавить("ВременнаяТаблица");
	КонецЦикла;
	Результат = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ЗаменитьПараметрыВАдаптируемомТекстеЗапроса(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция РегистрыДляПакетногоФормированияДвижений()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЗаказыКлиентов");
	Результат.Вставить("ЗаказыМатериаловВПроизводство");
	Результат.Вставить("ЗаказыПоставщикам");
	Результат.Вставить("ДвиженияСерийТоваров");
	Результат.Вставить("РаспределениеЗапасовДвижения");
	Результат.Вставить("ОбеспечениеПроизводственныхПроцессов");
	Результат.Вставить("ТоварыКОтгрузке");
	Результат.Вставить("РеестрДокументов");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьПараметрыВАдаптируемомТекстеЗапроса(ТекстЗапроса, ОсновнаяТаблица = "ТабличнаяЧасть.Ссылка")
	
	Перем Курсор, Параметр;
	
	СтандартныеРеквизиты = Новый Структура(
		"Номер,
		|Дата,
		|Проведен,
		|ПометкаУдаления");
	РеквизитыДокумента = Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().Реквизиты;
	
	ПереопределениеРасчетаПараметров = ПереопределениеРасчетаПараметров(ОсновнаяТаблица);
	
	ПараметрыЗапроса = Новый Массив;
	Пока ПроизводствоСервер.СледующийПараметрЗапроса(ТекстЗапроса, Параметр, Курсор) Цикл
		ПараметрыЗапроса.Добавить(Параметр);
	КонецЦикла;
	ПараметрыЗапроса = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПараметрыЗапроса);
	ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(ПараметрыЗапроса);
	
	Индекс = ПараметрыЗапроса.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		Параметр = ПараметрыЗапроса[Индекс];
		
		ТекстЗамены = "";
		
		Если Параметр = "Ссылка" Тогда
			
			ТекстЗамены = ОсновнаяТаблица;
			
		ИначеЕсли Параметр = "Период" Тогда
			
			ТекстЗамены = ОсновнаяТаблица + ".Дата";
			
		ИначеЕсли РеквизитыДокумента.Найти(Параметр) <> Неопределено
			ИЛИ СтандартныеРеквизиты.Свойство(Параметр) Тогда
			
			ТекстЗамены = ОсновнаяТаблица + "." + Параметр;
			
		ИначеЕсли ПереопределениеРасчетаПараметров.Свойство(Параметр) Тогда
			
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр];
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстЗамены) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + Параметр, ТекстЗамены);
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбеспечениеВПакетномРежиме(Этапы, Параметры, МенеджерВТСпособыПолученияМатериалов)
	
	Если НЕ Параметры.РезервироватьМатериалы
		И НЕ Параметры.ЗаменятьМатериалыНаАналоги Тогда
		Возврат;
	КонецЕсли;
	
	//Выборка строк для заполнения обеспечения
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Остатки.Номенклатура    КАК Номенклатура,
		|	Остатки.Характеристика  КАК Характеристика,
		|	Остатки.Склад           КАК Склад,
		|	Остатки.Назначение      КАК Назначение,
		|	СУММА(Остатки.Свободно) КАК Количество
		|ПОМЕСТИТЬ ВТОстаткиОбособленно
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Остатки
		|ГДЕ
		|	Остатки.Состояние В(&СостоянияЗапасов)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК Этапы
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|					ПО
		|						Этапы.Ссылка = Материалы.Ссылка
		|			ГДЕ
		|				Этапы.Ссылка В (&Этапы)
		|				И НЕ Материалы.Производится
		|				И Материалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|				И Материалы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|				И Материалы.Номенклатура = Остатки.Номенклатура
		|				И Материалы.Характеристика = Остатки.Характеристика
		|				И Материалы.Склад = Остатки.Склад
		|				И ВЫБОР
		|					КОГДА Материалы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|						ТОГДА Материалы.Назначение
		|					ИНАЧЕ Материалы.Ссылка.НазначениеМатериалы
		|				КОНЕЦ = Остатки.Назначение)
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад,
		|	Остатки.Назначение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура                         КАК Номенклатура,
		|	Остатки.Характеристика                       КАК Характеристика,
		|	Остатки.Склад                                КАК Склад,
		|	СУММА(Остатки.Свободно)                      КАК Количество
		|ПОМЕСТИТЬ ВТОстаткиНеобособленно
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Остатки
		|ГДЕ
		|	Остатки.Состояние В(&СостоянияЗапасов)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК Этапы
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|					ПО
		|						Этапы.Ссылка = Материалы.Ссылка
		|			ГДЕ
		|				Этапы.Ссылка В (&Этапы)
		|				И НЕ Материалы.Производится
		|				И Материалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|				И Материалы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|				И Материалы.Номенклатура = Остатки.Номенклатура
		|				И Материалы.Характеристика = Остатки.Характеристика
		|				И Материалы.Склад = Остатки.Склад)
		|	И Остатки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Номенклатура      КАК Номенклатура,
		|	Материалы.Характеристика    КАК Характеристика,
		|	Материалы.Склад             КАК Склад,
		|	Материалы.Назначение        КАК Назначение,
		|	СУММА(Материалы.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТРезервы
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Этапы)
		|	И Материалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	И НЕ Материалы.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Материалы.Номенклатура,
		|	Материалы.Характеристика,
		|	Материалы.Склад,
		|	Материалы.Назначение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Этапы.Ссылка                                           КАК Этап,
		|	НормативныйГрафик.ДлительностьДоЗапуска                КАК ДлительностьДоЗапуска,
		|	Материалы.Подразделение                                КАК Подразделение,
		|	Материалы.НомерСтроки                                  КАК НомерСтроки,
		|	Материалы.КодСтроки                                    КАК КодСтроки,
		|	Материалы.Номенклатура                                 КАК Номенклатура,
		|	Материалы.Номенклатура.ТипНоменклатуры                 КАК ТипНоменклатуры,
		|	Материалы.Характеристика                               КАК Характеристика,
		|	Материалы.Склад                                        КАК Склад,
		|	ВЫБОР
		|		КОГДА Материалы.Обособленно
		|			ТОГДА Материалы.Назначение
		|		ИНАЧЕ Материалы.Ссылка.НазначениеМатериалы
		|	КОНЕЦ                                                  КАК Назначение,
		|	Материалы.Серия                                        КАК Серия,
		|	Материалы.ВариантОбеспечения                           КАК ВариантОбеспечения,
		|	Материалы.ДатаОтгрузки                                 КАК ДатаОтгрузки,
		|	Материалы.Количество                                   КАК Количество,
		|
		|	Этапы.Распоряжение                                     КАК ЗаказНаПроизводство,
		|	Этапы.Распоряжение.НаправлениеДеятельности             КАК НаправлениеДеятельности,
		|	Этапы.Спецификация                                     КАК Спецификация,
		|	Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Изделие,
		|	Этапы.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК ХарактеристикаИзделия,
		|
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СпособыПолученияМатериалов.ЗаменаНаАналоги, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ СпособыПолученияМатериалов.ЗаменаНаАналоги
		|	КОНЕЦ                                                  КАК ЗаменаНаАналоги,
		|	
		|	Материалы.Обособленно
		|		ИЛИ &ИспользоватьОбособленныйЗапас                 КАК Обособленно,
		|
		|	НЕ Материалы.Обособленно
		|		ИЛИ &ИспользоватьНеобособленныйЗапас
		|				И НЕ (
		|						Материалы.Номенклатура.ОбособленнаяЗакупкаПродажа
		|						ИЛИ ЕСТЬNULL(СпособыПолученияМатериалов.Обособленно, НЕОПРЕДЕЛЕНО) = ИСТИНА
		|						ИЛИ ЕСТЬNULL(МатериалыСпецификации.СпособПолученияМатериала, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно)
		|					  )                                    КАК Необособленно,
		|
		|	ЕСТЬNULL(ОстаткиОбособленно.Количество, 0)
		|		- ЕСТЬNULL(РезервыОбособленно.Количество, 0)       КАК ОстатокОбособленно,
		|
		|	ЕСТЬNULL(ОстаткиНеобособленно.Количество, 0)
		|		- ЕСТЬNULL(РезервыНеобособленно.Количество, 0)     КАК ОстатокНеобособленно
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|		ПО Материалы.Ссылка = Этапы.Ссылка
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
		|		ПО НормативныйГрафик.ЭтапПроизводства = Этапы.Ссылка
		|                                                         
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыСпецификации
		|		ПО МатериалыСпецификации.Ссылка = Этапы.Спецификация
		|			И МатериалыСпецификации.КлючСвязи = Материалы.КлючСвязиСпецификация
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыПолученияМатериалов КАК СпособыПолученияМатериалов
		|		ПО СпособыПолученияМатериалов.Распоряжение = Этапы.Распоряжение
		|			И СпособыПолученияМатериалов.Номенклатура = Материалы.Номенклатура
		|			И СпособыПолученияМатериалов.Характеристика = Материалы.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиОбособленно КАК ОстаткиОбособленно
		|		ПО ОстаткиОбособленно.Номенклатура = Материалы.Номенклатура
		|			И ОстаткиОбособленно.Характеристика = Материалы.Характеристика
		|			И ОстаткиОбособленно.Склад = Материалы.Склад
		|			И ОстаткиОбособленно.Назначение = ВЫБОР
		|													КОГДА Материалы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|														ТОГДА Материалы.Назначение
		|													ИНАЧЕ Материалы.Ссылка.НазначениеМатериалы
		|												КОНЕЦ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезервы КАК РезервыОбособленно
		|		ПО РезервыОбособленно.Номенклатура = Материалы.Номенклатура
		|			И РезервыОбособленно.Характеристика = Материалы.Характеристика
		|			И РезервыОбособленно.Склад = Материалы.Склад
		|			И РезервыОбособленно.Назначение = ВЫБОР
		|													КОГДА Материалы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|														ТОГДА Материалы.Назначение
		|													ИНАЧЕ Материалы.Ссылка.НазначениеМатериалы
		|												КОНЕЦ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНеобособленно КАК ОстаткиНеобособленно
		|		ПО ОстаткиНеобособленно.Номенклатура = Материалы.Номенклатура
		|			И ОстаткиНеобособленно.Характеристика = Материалы.Характеристика
		|			И ОстаткиНеобособленно.Склад = Материалы.Склад
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезервы КАК РезервыНеобособленно
		|		ПО РезервыНеобособленно.Номенклатура = Материалы.Номенклатура
		|			И РезервыНеобособленно.Характеристика = Материалы.Характеристика
		|			И РезервыНеобособленно.Склад = Материалы.Склад
		|			И РезервыНеобособленно.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|ГДЕ
		|	Этапы.Ссылка В(&Этапы)
		|	И НЕ Материалы.Производится
		|	И Материалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|	И Материалы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И Материалы.Количество <> 0
		|	И НЕ Материалы.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	ДлительностьДоЗапуска,
		|	Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Резервы.Номенклатура   КАК Номенклатура,
		|	Резервы.Характеристика КАК Характеристика,
		|	Резервы.Склад          КАК Склад,
		|	Резервы.Назначение     КАК Назначение,
		|	Резервы.Количество     КАК Количество
		|ИЗ
		|	ВТРезервы КАК Резервы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРезервы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОстаткиОбособленно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОстаткиНеобособленно");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТСпособыПолученияМатериалов;
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("ИспользоватьОбособленныйЗапас", Параметры.ИспользоватьОбособленныйЗапас);
	Запрос.УстановитьПараметр("ИспользоватьНеобособленныйЗапас", Параметры.ИспользоватьНеобособленныйЗапас);
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	Если НЕ Параметры.РезервироватьМатериалы Тогда
		// Если материалы не резервируются, то на аналоги заменяется количество за вычетом
		// остатка на складе и в планируемом поступлении
		Состояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаемоеПоступление);
	КонецЕсли;
	Запрос.УстановитьПараметр("СостоянияЗапасов", Состояния);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Материалы = ПакетРезультатов[3].Выгрузить();
	Если Материалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Материалы.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Материалы.Колонки.Добавить("ЗачетОбособленно", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Материалы.Колонки.Добавить("ЗачетНеобособленно", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	// Инициализация таблиц для замены на аналоги
	МатериалыЗаменить = Неопределено;
	Резервы = Неопределено;
	Если Параметры.ЗаменятьМатериалыНаАналоги Тогда
		
		МатериалыЗаменить = Материалы.СкопироватьКолонки(
			"Идентификатор, ДлительностьДоЗапуска, Этап, Номенклатура, Характеристика, Подразделение,
			|НаправлениеДеятельности, ЗаказНаПроизводство, Спецификация,
			|Изделие, ХарактеристикаИзделия, Количество");
		
		Резервы = ПакетРезультатов[4].Выгрузить();
		
	КонецЕсли;
	
	// Распределение остатков
	ПредыдущаяСтрока = Материалы[0];
	ОстаткиПоНазначениям = Новый Соответствие;
	Идентификатор = 0;
	
	Для Индекс = 0 По Материалы.Количество()-1 Цикл
		
		Строка = Материалы[Индекс];
		
		Строка.Идентификатор = Идентификатор;
		Идентификатор = Идентификатор + 1;
		
		// Наследование остатков
		Если Строка.Номенклатура = ПредыдущаяСтрока.Номенклатура
			И Строка.Характеристика = ПредыдущаяСтрока.Характеристика
			И Строка.Склад = ПредыдущаяСтрока.Склад Тогда
			
			Строка.ОстатокНеобособленно = ПредыдущаяСтрока.ОстатокНеобособленно;
			
			Если ОстаткиПоНазначениям[Строка.Назначение] <> Неопределено Тогда
				Строка.ОстатокОбособленно = ОстаткиПоНазначениям[Строка.Назначение];
			КонецЕсли;
			
		Иначе
			ОстаткиПоНазначениям = Новый Соответствие;
		КонецЕсли;
		
		// Обособленный остаток
		Если Строка.Количество > 0
			И Строка.Обособленно
			И Строка.ОстатокОбособленно > 0 Тогда
			
			Строка.ЗачетОбособленно = Мин(Строка.Количество, Строка.ОстатокОбособленно);
			Строка.Количество = Строка.Количество - Строка.ЗачетОбособленно;
			Строка.ОстатокОбособленно = Строка.ОстатокОбособленно - Строка.ЗачетОбособленно;
			
			Если ОстаткиПоНазначениям[Строка.Назначение] = Неопределено Тогда
				ОстаткиПоНазначениям.Вставить(Строка.Назначение, Строка.ОстатокОбособленно);
			Иначе
				ОстаткиПоНазначениям[Строка.Назначение] = Строка.ОстатокОбособленно;
			КонецЕсли;
			
		КонецЕсли;
		
		// Необособленный остаток
		Если Строка.Количество > 0
			И Строка.Необособленно
			И Строка.ОстатокНеобособленно > 0 Тогда
			
			Строка.ЗачетНеобособленно = Мин(Строка.Количество, Строка.ОстатокНеобособленно);
			Строка.Количество = Строка.Количество - Строка.ЗачетНеобособленно;
			Строка.ОстатокНеобособленно = Строка.ОстатокНеобособленно - Строка.ЗачетНеобособленно;
			
		КонецЕсли;
		
		// Заполнение таблиц для замены на аналоги
		Если Параметры.ЗаменятьМатериалыНаАналоги Тогда
			
			Если Строка.ЗаменаНаАналоги И Строка.Количество > 0 Тогда
				ЗаполнитьЗначенияСвойств(МатериалыЗаменить.Добавить(), Строка);
			КонецЕсли;
			
			Если Строка.ЗачетНеобособленно > 0 Тогда
				НоваяСтрока = Резервы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "Количество, Назначение");
				НоваяСтрока.Количество = Строка.ЗачетНеобособленно;
			КонецЕсли;
			
		КонецЕсли;
		
		ПредыдущаяСтрока = Строка;
		
	КонецЦикла;
	
	// Получение аналогов
	Аналоги = Неопределено;
	Если Параметры.ЗаменятьМатериалыНаАналоги
		И МатериалыЗаменить.Количество() > 0 Тогда
		
		МатериалыЗаменить.Сортировать("ДлительностьДоЗапуска, Этап");
		Аналоги = АналогиМатериалов.ПолучитьТаблицуЗаменыДляФормированияЭтапов(МатериалыЗаменить, Резервы);
		Аналоги.Сортировать("Идентификатор, Разрешение");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Аналоги);
		Аналоги.Индексы.Добавить("Идентификатор");
		
	КонецЕсли;
	
	// Запись данных в документы
	Материалы.Сортировать("ДлительностьДоЗапуска, Этап");
	СтруктураПоиска = Новый Структура("Идентификатор");
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ДокументОбъект = Неопределено;
	ДокументИзменен = Ложь;
	ПараметрыЗаполненияНазначений = Неопределено;
	
	Для Индекс = 0 По Материалы.Количество()-1 Цикл
		
		Строка = Материалы[Индекс];
		
		Если ДокументОбъект = Неопределено
			ИЛИ Строка.Этап <> ДокументОбъект.Ссылка Тогда
			
			ДокументОбъект = Строка.Этап.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументИзменен = Ложь;
			
			ПараметрыЗаполненияНазначений = ОбеспечениеПроизводстваКлиентСервер.
				ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(ДокументОбъект);
			
		КонецЕсли;
		
		ИсходнаяСтрока = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Найти(Строка.КодСтроки, "КодСтроки");
		Если ИсходнаяСтрока <> Неопределено Тогда
			
			// Резервирование материалов
			Если Параметры.РезервироватьМатериалы Тогда
				
				// Зачет обособленных остатков
				Если Строка.ЗачетОбособленно <> 0 Тогда
					
					Если ИсходнаяСтрока.Количество = Строка.ЗачетОбособленно Тогда
						СтрокаЗаполнить = ИсходнаяСтрока;
					Иначе
						
						СтрокаЗаполнить = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Вставить(
							ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Индекс(ИсходнаяСтрока));
						ЗаполнитьЗначенияСвойств(СтрокаЗаполнить, ИсходнаяСтрока,, "КодСтроки");
						СтрокаЗаполнить.Количество = Строка.ЗачетОбособленно;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаполнить, СтруктураДействий, КэшированныеЗначения);
						
						ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Строка.ЗачетОбособленно;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИсходнаяСтрока, СтруктураДействий, КэшированныеЗначения);
						
					КонецЕсли;
					
					СтрокаЗаполнить.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
					СтрокаЗаполнить.Обособленно = Истина;
					ОбеспечениеПроизводстваКлиентСервер.ЗаполнитьНазначениеОбеспеченияВСтрокеЭтапаПроизводства(
						СтрокаЗаполнить,
						ПараметрыЗаполненияНазначений);
						
					ДокументИзменен = Истина;
					
				КонецЕсли;
				
				// Зачет необособленных остатков
				Если Строка.ЗачетНеобособленно <> 0 Тогда
					
					Если ИсходнаяСтрока.Количество = Строка.ЗачетНеобособленно Тогда
						СтрокаЗаполнить = ИсходнаяСтрока;
					Иначе
						
						СтрокаЗаполнить = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Вставить(
							ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Индекс(ИсходнаяСтрока));
						ЗаполнитьЗначенияСвойств(СтрокаЗаполнить, ИсходнаяСтрока,, "КодСтроки");
						СтрокаЗаполнить.Количество = Строка.ЗачетНеобособленно;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаполнить, СтруктураДействий, КэшированныеЗначения);
						
						ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Строка.ЗачетНеобособленно;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИсходнаяСтрока, СтруктураДействий, КэшированныеЗначения);
						
					КонецЕсли;
					
					СтрокаЗаполнить.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
					СтрокаЗаполнить.Обособленно = Ложь;
					ОбеспечениеПроизводстваКлиентСервер.ЗаполнитьНазначениеОбеспеченияВСтрокеЭтапаПроизводства(
						СтрокаЗаполнить,
						ПараметрыЗаполненияНазначений);
					
					ДокументИзменен = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Зачет аналогов
			Если Аналоги <> Неопределено И Строка.Количество <> 0 Тогда
				СтруктураПоиска.Идентификатор = Строка.Идентификатор;
				СтрокиАналоги = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(Аналоги, СтруктураПоиска, Истина);
				Если СтрокиАналоги.ВГраница() <> -1 Тогда
					
					Разрешение = Неопределено;
					Для ИндексАналог = 0 По СтрокиАналоги.ВГраница() Цикл
						
						СтрокаАналог = СтрокиАналоги[ИндексАналог];
						Если Разрешение = Неопределено ИЛИ Разрешение <> СтрокаАналог.Разрешение Тогда
							ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - СтрокаАналог.КоличествоЗамены;
							Разрешение = СтрокаАналог.Разрешение;
						КонецЕсли;
						
						НоваяСтрока = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАналог, "Номенклатура, Характеристика, Склад, Количество");
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, "Подразделение, СтатьяКалькуляции");
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
						НоваяСтрока.Обособленно = Ложь; // Аналоги подбираются только в необособленном остатке
						НоваяСтрока.ВариантОбеспечения = ?(Параметры.РезервироватьМатериалы,
							Перечисления.ВариантыОбеспечения.СоСклада,
							Перечисления.ВариантыОбеспечения.Требуется);
						НоваяСтрока.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
						
					КонецЦикла;
					
					Если ИсходнаяСтрока.Количество = 0 Тогда
						ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Удалить(ИсходнаяСтрока);
					Иначе
						// При замене на аналоги исходная строка переводится в базовую ед. изм.
						ИсходнаяСтрока.КоличествоУпаковок = ИсходнаяСтрока.Количество;
						ИсходнаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;
					
					ДокументИзменен = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Индекс = Материалы.Количество()-1
			ИЛИ Материалы[Индекс+1].Этап <> ДокументОбъект.Ссылка Тогда
			
			Если ДокументИзменен Тогда
				
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
					ДокументОбъект,
					ПараметрыУказанияСерий(ДокументОбъект).ОбеспечениеМатериаламиИРаботами);
				
				ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
					ДокументОбъект, "ОбеспечениеМатериаламиИРаботами", "МаксимальныйКодСтрокиОбеспечение");
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
			ДокументОбъект.Разблокировать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДвиженияВПакетномРежиме(ДанныеДвижений, Ссылки, ВерсииДанных, ПараметрыРаспределенияЗапасов)
	
	ЭтапыОтказ = Новый Массив;
	ДвиженияПоРеестру = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей().Выгрузить();
	
	Для Индекс = 0 По Ссылки.ВГраница() Цикл
			
		ДокументСсылка = Ссылки[Индекс];
		ВерсииДанных.Следующий();
		
		ЕстьДвижения = Ложь;
		Для каждого КлючИЗначение Из ДанныеДвижений Цикл
			Если КлючИЗначение.Значение <> Неопределено
					И КлючИЗначение.Значение.СсылкаПакет = ДокументСсылка Тогда
				ЕстьДвижения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьДвижения Тогда
			Продолжить;
		КонецЕсли;
		
		ДвиженияПоРеестру.Очистить();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Если ДокументОбъект.ВерсияДанных <> ВерсииДанных.ВерсияДанных Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.УстановитьРежимПакетногоФормирования();
			ДокументОбъект.Движения.РаспределениеЗапасовДвижения.ОтключитьРасчетИтогов();
			ДокументОбъект.Движения.РаспределениеЗапасовДвижения.ВключитьБлокировкуРегистраСведенийПоНабору();
			
			ПроведениеДокументов.ПередЗаписьюДокумента(ДокументОбъект, РежимЗаписиДокумента.Проведение, Неопределено);
			
			Для каждого КлючИЗначение Из ДанныеДвижений Цикл
			
				Выборка = КлючИЗначение.Значение;
				Если Выборка = Неопределено ИЛИ Выборка.СсылкаПакет <> ДокументСсылка Тогда
					Продолжить;
				КонецЕсли;
				
				Если КлючИЗначение.Ключ = "РеестрДокументов" Тогда
					ДвиженияПоРегистру = ДвиженияПоРеестру;
				Иначе
					ДвиженияПоРегистру = ДокументОбъект.Движения[КлючИЗначение.Ключ];
					ДвиженияПоРегистру.Записывать = Истина;
				КонецЕсли;
				
				Пока Выборка.СсылкаПакет = ДокументСсылка Цикл
					
					ЗаполнитьЗначенияСвойств(ДвиженияПоРегистру.Добавить(), Выборка);
					
					Если НЕ Выборка.Следующий() Тогда
						ДанныеДвижений.Вставить(КлючИЗначение.Ключ, Неопределено);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Отказ = Ложь;
			УстановитьПривилегированныйРежим(Истина);
			
			ПроведениеДокументов.ЗаписатьДвиженияСКонтролем(ДокументОбъект, Отказ, Истина, Ложь);
			
			// Отражение в регистре сведений РеестрДокументов
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(
				Новый Структура("ТаблицаРеестрДокументов", ДвиженияПоРеестру),
				ДокументОбъект.Ссылка,
				Неопределено,
				Отказ);
			
			// Отражение в регистре сведений РаспределениеЗапасов
			РаспределениеЗапасовДвижения.ОтразитьДвиженияПриЗаписиДокументаПакетно(
				ПараметрыРаспределенияЗапасов.Запрос,
				ДокументОбъект.Ссылка,
				ПараметрыРаспределенияЗапасов);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Отказ Тогда
				Если ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
					ОтменитьТранзакцию();
					ЭтапыОтказ.Добавить(ДокументСсылка);
					Продолжить;
				Иначе
					ТекстИсключения = СтрШаблон(
						НСтр("ru = 'Не удалось провести этап № %1 от %2';
							|en = 'Cannot post stage No. %1 dated %2'"),
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер, Истина, Ложь),
						Формат(ДокументОбъект.Дата, "ДЛФ=D"));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Пакетное формирование движений';
							|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
			
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ЭтапыОтказ;

КонецФункции

Процедура УстановитьЭтапамСтатусФормируется(Этапы)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьЭтапы(Этапы);
		
		Для каждого Этап Из Этапы Цикл
			
			ДокументОбъект = Этап.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Пакетное формирование движений';
							|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеестрДокументовВПакетномРежиме(Распоряжение, Этапы, ЗамещатьЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос);
	
	ТекстыЗапроса = ТекстыЗапросаДляФормированияДвижений(Запрос, Новый Структура("РеестрДокументов"));
	
	МассивТекстов = Новый Массив;
	Для каждого Элемент Из ТекстыЗапроса Цикл
		
		ТекстЗапроса = СтрЗаменить(
			Элемент.Значение,
			"ТабличнаяЧасть.Ссылка = &Ссылка",
			"ТабличнаяЧасть.Ссылка В (&Этапы)");
		
		ЗаменитьПараметрыВАдаптируемомТекстеЗапроса(ТекстЗапроса, "ТабличнаяЧасть.Ссылка");
				
		МассивТекстов.Добавить(ТекстЗапроса);
		МассивТекстов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстов, Символы.ПС);
	Запрос.УстановитьПараметр("Этапы", Этапы);
	
	ТаблицыДляДвижений = Новый Структура("ТаблицаРеестрДокументов", Запрос.Выполнить().Выгрузить());
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеРазделителя(
		ТаблицыДляДвижений,
		Строка(Распоряжение.УникальныйИДентификатор()),
		ЗамещатьЗаписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Задание на производство
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаданиеНаПроизводство";
	КомандаПечати.Представление = НСтр("ru = 'Задание на производство';
										|en = 'Shop floor papers'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПечатьЗаданиеНаПроизводство";
	
	// Лист сопровождения партии производства
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛистСопровожденияПартииПроизводства";
	КомандаПечати.Представление = НСтр("ru = 'Лист сопровождения партии производства';
										|en = 'Accompanying sheet for production lot'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПечатьЛистСопровожденияПартииПроизводства";
	
	СтатусыДокумента = Новый Массив;
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	// Задание на размещение товаров
	КомандаПечати = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати(КомандыПечати,
																							"ЗаданиеНаРазмещение");
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
														"Статус",
														СтатусыДокумента,
														ВидСравнения.ВСписке);
	
	// Задание на отбор товаров
	КомандаПечати = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати(КомандыПечати,
																							"ЗаданиеНаОтбор");
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
														"Статус",
														СтатусыДокумента,
														ВидСравнения.ВСписке);
	
	ЭтапПроизводства2_2Локализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаданиеНаПроизводство") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЗаданиеНаПроизводство(
			МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаданиеНаПроизводство",
			НСтр("ru = 'Задание на производство';
				|en = 'Shop floor papers'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСопровожденияПартииПроизводства") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЛистСопровожденияПартииПроизводства(
			МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистСопровожденияПартииПроизводства",
			НСтр("ru = 'Лист сопровождения партии производства';
				|en = 'Accompanying sheet for production lot'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

#Область ЗаданиеНаПроизводство

Функция СформироватьПечатнуюФормуЗаданиеНаПроизводство(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭтапПроизводства2_2_ЗаданиеНаПроизводство";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЭтапПроизводства2_2.ПФ_MXL_ЗаданиеНаПроизводство");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыЗаданиеНаПроизводство(МассивОбъектов, ПараметрыПечати);
	ВыборкаДокумент = ДанныеДляПечати.ВыборкаДокумент;
	
	Пока ВыборкаДокумент.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаданиеНаПроизводствоВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаДокумент);
		
		ЗаданиеНаПроизводствоВывестиШапку(ТабличныйДокумент, Макет, ВыборкаДокумент);
		
		ЗаданиеНаПроизводствоВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати, Истина);
			
		ЗаданиеНаПроизводствоВывестиМатериалы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати);
		
		ЗаданиеНаПроизводствоВывестиВыходныеИзделия(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати);
		
		ЗаданиеНаПроизводствоВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати, Ложь);
		
		ЗаданиеНаПроизводствоВывестиОперации(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаданиеНаПроизводство(МассивОбъектов, ПараметрыПечати)
	
	ТекстыЗапросовПакета = Новый Массив;
	ИндексыРезультатов = Новый Соответствие;
	Индекс = 0;
	
	#Область ТекстЗапросаШапка
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Ссылка,
	|	ДанныеДокумента.Номер             КАК Номер,
	|	ДанныеДокумента.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|
	|	ДанныеДокумента.Распоряжение                КАК Распоряжение,
	|	ДанныеДокумента.Распоряжение.Представление  КАК ПредставлениеРаспоряжения,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.Подразделение.Представление КАК ПредставлениеПодразделения,
	|
	|	ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура                              КАК Изделие,
	|	ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика                            КАК ИзделиеХарактеристика,
	|	ЕСТЬNULL(ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура.Наименование, """") КАК ИзделиеПредставление,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                                                       КАК ИзделиеХарактеристикаПредставление,
	|
	|	ДанныеДокумента.Спецификация                                                                КАК Спецификация,
	|	ДанныеДокумента.Спецификация.Представление                                                  КАК ПредставлениеСпецификации,
	|	ДанныеДокумента.Этап                                                                        КАК ЭтапСпецификации,
	|
	|	ДанныеДокумента.Подразделение.ИспользоватьПооперационноеУправление  КАК ИспользоватьПооперационноеУправление,
	|	ДанныеДокумента.МаршрутнаяКарта                                     КАК МаршрутнаяКарта,
	|	ДанныеДокумента.КоэффициентМаршрутнойКарты                          КАК КоэффициентМаршрутнойКарты,
	|
	|	ДанныеДокумента.КоличествоУпаковокПлан     КАК Количество,
	|	ЕСТЬNULL(&КоэффициентУпаковки, 1)          КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УпаковкаПлан = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.УпаковкаПлан)
	|	КОНЕЦ                                      КАК ПредставлениеЕдиницыИзмерения,
	|
	|	ЕСТЬNULL(ГрафикПроизводства.ОкончаниеЭтапа, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлановоеОкончаниеЭтапа,
	|
	|	ДанныеДокумента.Исполнитель.Представление КАК ПредставлениеИсполнителя
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
	|		ПО ДанныеДокумента.Ссылка = ГрафикПроизводства.ЭтапПроизводства
	|			И ДанныеДокумента.Распоряжение = ГрафикПроизводства.Распоряжение
	|			И (ГрафикПроизводства.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДанныеДокумента.УпаковкаПлан",
		"ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ИндексыРезультатов.Вставить("ВыборкаДокумент", Индекс);
	Индекс = Индекс + 1;
	
	#КонецОбласти
	
	#Область ТекстЗапросаСмежныеЭтапы
	
	Если ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТСвязиЭтапов.СледующийЭтап КАК Ссылка,
		|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства,
		|	&ВТСвязиЭтаповПредставлениеЭтап КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).Подразделение КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.СледующийЭтап В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ЭтапПроизводства
		|ИТОГИ ПО
		|	Ссылка";
		
		ТекстПредставлениеЭтапа = ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.Этап");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеЭтап",
			ТекстПредставлениеЭтапа);
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПредшественники", Индекс);
		Индекс = Индекс + 1;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТСвязиЭтапов.Этап КАК Ссылка,
		|	ВТСвязиЭтапов.СледующийЭтап КАК ЭтапПроизводства,
		|	&ВТСвязиЭтаповПредставлениеСледующийЭтап КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).Подразделение КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.Этап В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ЭтапПроизводства
		|ИТОГИ ПО
		|	Ссылка";
		
		ТекстПредставлениеЭтапа = ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.СледующийЭтап");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеСледующийЭтап",
			ТекстПредставлениеЭтапа);
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПоследователи", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаМатериалы
	
	Если ЗаданиеНаПроизводствоПечататьМатериалы(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Материалы.Ссылка КАК Ссылка,
		|	Материалы.Номенклатура КАК Номенклатура,
		|	Материалы.Номенклатура.Код КАК Код,
		|	Материалы.Номенклатура.Артикул КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Материалы.Склад КАК Склад,
		|	Материалы.Склад.Представление КАК ПредставлениеСклада,
		|	ВЫБОР
		|		КОГДА Материалы.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Материалы.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Материалы.Упаковка)
		|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения,
		|	Материалы.КоличествоУпаковок КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&МассивОбъектов)
		|	И НЕ Материалы.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Материалы.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаМатериалы", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаВыходныеИзделия
	
	Если ЗаданиеНаПроизводствоПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Выпуск.Ссылка КАК Ссылка,
		|	Выпуск.Номенклатура КАК Номенклатура,
		|	Выпуск.Характеристика КАК Характеристика,
		|	Выпуск.Получатель КАК Получатель,
		|	ВЫБОР
		|		КОГДА Выпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Выпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Выпуск.Упаковка)
		|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения,		
		|	Выпуск.КоличествоУпаковок КАК Количество,
		|	Выпуск.Назначение КАК Назначение,
		|	Выпуск.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Выпуск.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТВыпуск
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Выпуск
		|ГДЕ
		|	Выпуск.Ссылка В(&МассивОбъектов)
		|	И НЕ Выпуск.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПобочныйВыпуск.Ссылка,
		|	ПобочныйВыпуск.Номенклатура,
		|	ПобочныйВыпуск.Характеристика,
		|	ПобочныйВыпуск.Получатель,
		|	ВЫБОР
		|		КОГДА ПобочныйВыпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Упаковка)
		|	КОНЕЦ,
		|	ПобочныйВыпуск.КоличествоУпаковок,
		|	ПобочныйВыпуск.Назначение,
		|	ПобочныйВыпуск.ЭтапПотребитель,
		|	ПобочныйВыпуск.НомерСтроки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныйВыпуск
		|ГДЕ
		|	ПобочныйВыпуск.Ссылка В(&МассивОбъектов)
		|	И НЕ ПобочныйВыпуск.Отменено
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Ссылка КАК Ссылка,
		|	Выпуск.Номенклатура КАК Номенклатура,
		|	Выпуск.Номенклатура.Код КАК Код,
		|	Выпуск.Номенклатура.Артикул КАК Артикул,
		|	Выпуск.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	Выпуск.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Выпуск.ЭтапПотребитель <> &ПустаяСсылкаЭтап 
		|			ТОГДА &ПредставлениеЭтапа
		|		ИНАЧЕ Выпуск.Назначение.Представление
		|	КОНЕЦ КАК ПредставлениеНазначения,
		|	Выпуск.Получатель КАК Получатель,
		|	Выпуск.Получатель.Представление КАК ПредставлениеПолучателя,
		|	Выпуск.ПредставлениеЕдиницыИзмерения КАК ПредставлениеЕдиницыИзмерения,
		|	Выпуск.Количество КАК Количество
		|ИЗ
		|	ВТВыпуск КАК Выпуск
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Выпуск.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
			
		ТекстПредставлениеЭтапа = ТекстЗапросаПредставлениеЭтапа("Выпуск.ЭтапПотребитель");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ПредставлениеЭтапа",
			ТекстПредставлениеЭтапа);
		
		Индекс = Индекс + 1;
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаВыходныеИзделия", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СборкаТекста
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	#КонецОбласти
	
	#Область ВыполнениеЗапроса
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустаяСсылкаЭтап", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	Запрос.УстановитьПараметр("РабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях", ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		СоздатьВТСвязиЭтапов(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, Ложь);
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	
	Для каждого Результат Из ИндексыРезультатов Цикл
		
		РезультатЗапроса = МассивРезультатов[Результат.Значение]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать(
			?(Результат.Ключ = "ВыборкаДокумент",
				ОбходРезультатаЗапроса.Прямой,
				ОбходРезультатаЗапроса.ПоГруппировкам));
		ДанныеДляПечати.Вставить(Результат.Ключ, Выборка);
		
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Выводит заголовок
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
//                     * Ссылка - ДокументСсылка - 
//
Процедура ЗаданиеНаПроизводствоВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаДокумент)
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	Область.Параметры.Заполнить(ВыборкаДокумент);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		Область,
		ВыборкаДокумент.Ссылка);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ЗаданиеНаПроизводствоВывестиШапку(ТабличныйДокумент, Макет, ВыборкаДокумент)
	
	ФорматнаяСтрока = УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	Область.Параметры.Заполнить(ВыборкаДокумент);
	
	Область.Параметры.ПредставлениеИзделия = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
															ВыборкаДокумент.ИзделиеПредставление, 
															ВыборкаДокумент.ИзделиеХарактеристикаПредставление);
	
	Область.Параметры.ПлановоеОкончаниеЭтапа = Формат(ВыборкаДокумент.ПлановоеОкончаниеЭтапа, ФорматнаяСтрока);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

// Выводит смежные этапы
//
// Параметры:
//  ПараметрыПечати - Структура
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
// * Ссылка - ДокументСсылка -
//  ДанныеДляПечати - Структура - содержит:
// * ВыборкаПредшественники - ВыборкаИзРезультатаЗапроса
// * ВыборкаПоследователи - ВыборкаИзРезультатаЗапроса
//  Предшественники - Булево
Процедура ЗаданиеНаПроизводствоВывестиСмежныеЭтапы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати, Предшественники)
	
	Если НЕ ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		Если Предшественники Тогда
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПредшественники;
		Иначе
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПоследователи;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокумент.Ссылка);
		Если НЕ ВыборкаЭтапы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ОбластьЗаголовок = Макет.ПолучитьОбласть("СмежныеЭтапыЗаголовок");
	
	Если Предшественники Тогда
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Принять работу';
																	|en = 'Accept the job'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Сдать работу';
																	|en = 'Pass the work'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	//
	ОбластьСтрока = Макет.ПолучитьОбласть("СмежныеЭтапыСтрока");
	
	Выборка = ВыборкаЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("СмежныеЭтапыПодвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// Выводит материалы
//
// Параметры:
//  ПараметрыПечати - Структура
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
// * Ссылка - ДокументСсылка -
//  ДанныеДляПечати - Структура - содержит:
// * ВыборкаМатериалы - ВыборкаИзРезультатаЗапроса
Процедура ЗаданиеНаПроизводствоВывестиМатериалы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати)
	
	Если НЕ ЗаданиеНаПроизводствоПечататьМатериалы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаМатериалы = ДанныеДляПечати.ВыборкаМатериалы;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокумент.Ссылка);
		Если НЕ ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицыМатериалы");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалы_СКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы_БезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалы_БезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Если ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВМатериалы(ПараметрыПечати) Тогда
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		ЗаданиеНаПроизводствоВывестиПустыеСтроки(ТабличныйДокумент, ОбластьСтрока, НомерСтроки);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыМатериалы");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// Выводит выходные изделия
//
// Параметры:
//  ПараметрыПечати - Структура
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
// * Ссылка - ДокументСсылка -
//  ДанныеДляПечати - Структура - содержит:
// * ВыборкаВыходныеИзделия - ВыборкаИзРезультатаЗапроса
Процедура ЗаданиеНаПроизводствоВывестиВыходныеИзделия(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати)
	Если НЕ ЗаданиеНаПроизводствоПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаВыходныеИзделия = ДанныеДляПечати.ВыборкаВыходныеИзделия;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокумент.Ссылка);
		Если НЕ ВыборкаВыходныеИзделия.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицыВыходныеИзделия");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделия_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделия_СКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделия_БезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделия_БезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаВыходныеИзделия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Если ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВВыходныеИзделия(ПараметрыПечати) Тогда
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		ЗаданиеНаПроизводствоВывестиПустыеСтроки(ТабличныйДокумент, ОбластьСтрока, НомерСтроки);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыВыходныеИзделия");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаданиеНаПроизводствоВывестиОперации(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент)
	
	Если НЕ ЗаданиеНаПроизводствоПечататьОперации(ПараметрыПечати)
		ИЛИ НЕ ВыборкаДокумент.ИспользоватьПооперационноеУправление Тогда
		Возврат;
	Иначе
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицыМаршрутнаяКарта");
	ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокумент);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМаршрутнаяКарта");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыМаршрутнаяКарта");
	НомерСтроки = 0;
	
	Если ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях") Тогда
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		
		ДанныеПоНоменклатуре.Номенклатура   = ВыборкаДокумент.Изделие;
		ДанныеПоНоменклатуре.Характеристика = ВыборкаДокумент.ИзделиеХарактеристика;
		ДанныеПоНоменклатуре.Спецификация   = ВыборкаДокумент.Спецификация;
		ДанныеПоНоменклатуре.Количество     = ВыборкаДокумент.Количество * ВыборкаДокумент.КоэффициентУпаковки;
		
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
			ДанныеПоНоменклатуре,
			Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных("Операции"),
			Новый Структура("Этап", ВыборкаДокумент.ЭтапСпецификации));
			
		Операции = ДанныеСпецификации.Операции;
		
	Иначе
	
		ДанныеМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
			ВыборкаДокумент.МаршрутнаяКарта,
			ВыборкаДокумент.КоэффициентМаршрутнойКарты,
			ВыборкаДокумент.Изделие,
			ВыборкаДокумент.ИзделиеХарактеристика,
			"Операции");
			
		Операции = ДанныеМаршрутнойКарты.Операции;
	
	КонецЕсли;
	
	Для каждого Операция Из Операции Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Операция);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если Операция.ВремяВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
			
			ВремяЧасы = Операция.ВремяВыполнения;
			
		Иначе
			
			ВремяСекунды = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Операция.ВремяВыполнения, Операция.ВремяВыполненияЕдИзм);
				
			ВремяЧасы = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				ВремяСекунды, Перечисления.ЕдиницыИзмеренияВремени.Час);
				
		КонецЕсли;
		
		ОбластьСтрока.Параметры.ВремяЧасы = ВремяЧасы;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыМаршрутнаяКарта");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаданиеНаПроизводствоВывестиПустыеСтроки(ТабличныйДокумент, ОбластьСтрока, НомерСтроки)
	
	Количество = НомерСтроки/5;
	
	Если НЕ Количество = Цел(Количество) Тогда
		Количество = Цел(Количество) + 1;
	КонецЕсли;
	
	Для Сч = 1 По Количество Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьСмежныеЭтапы") Тогда
		Возврат ПараметрыПечати.ПечататьСмежныеЭтапы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьСмежныеЭтапы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоПечататьМатериалы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьМатериалы") Тогда
		Возврат ПараметрыПечати.ПечататьМатериалы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьМатериалы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоПечататьВыходныеИзделия(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьВыходныеИзделия") Тогда
		Возврат ПараметрыПечати.ПечататьВыходныеИзделия;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьВыходныеИзделия");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоПечататьОперации(ПараметрыПечати)
	
	ИмяПараметра = "ПечататьОперации";
	
	Если ПараметрыПечати.Свойство(ИмяПараметра) Тогда
		Возврат ПараметрыПечати[ИмяПараметра];
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует параметр печати ""%1""';
										|en = 'The ""%1"" printing parameter is missing'"), ИмяПараметра);
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВМатериалы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ДобавлятьПустыеСтрокиВМатериалы") Тогда
		Возврат ПараметрыПечати.ДобавлятьПустыеСтрокиВМатериалы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ДобавлятьПустыеСтрокиВМатериалы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВВыходныеИзделия(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ДобавлятьПустыеСтрокиВВыходныеИзделия") Тогда
		Возврат ПараметрыПечати.ДобавлятьПустыеСтрокиВВыходныеИзделия;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения , "ДобавлятьПустыеСтрокиВВыходныеИзделия");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЛистСопровожденияПартииПроизводства

Функция СформироватьПечатнуюФормуЛистСопровожденияПартииПроизводства(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭтапПроизводства2_2_ЛистСопровожденияПартииПроизводства";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЭтапПроизводства2_2.ПФ_MXL_ЛистСопровожденияПартииПроизводства");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыЛистСопровожденияПартииПроизводства(МассивОбъектов, ПараметрыПечати);
	ВыборкаПартии = ДанныеДляПечати.ВыборкаПартии;
	
	Пока ВыборкаПартии.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЛистСопровожденияПартииПроизводстваВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаПартии);
		
		ЛистСопровожденияПартииПроизводстваВывестиШапку(ТабличныйДокумент, Макет, ВыборкаПартии);
		
		ЛистСопровожденияПартииПроизводстваВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати, Истина);
		
		ЛистСопровожденияПартииПроизводстваВывестиЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати);
		
		ЛистСопровожденияПартииПроизводстваВывестиМатериалы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати);
		
		ЛистСопровожденияПартииПроизводстваВывестиВыходныеИзделия(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати);
		
		ЛистСопровожденияПартииПроизводстваВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати, Ложь);
			
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подписи"));
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаПартии.ПартияПроизводства);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЛистСопровожденияПартииПроизводства(МассивОбъектов, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	
	#Область ЧтениеЭтапов
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапПроизводства2_2.Ссылка КАК Ссылка,
		|	ЭтапПроизводства2_2.ПартияПроизводства КАК ПартияПроизводства
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|ГДЕ
		|	ЭтапПроизводства2_2.ПартияПроизводства В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЭтапПроизводства2_2.ПартияПроизводства КАК ПартияПроизводства
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|			ГДЕ
		|				ЭтапПроизводства2_2.Ссылка В(&Ссылки))
		|	И ЭтапПроизводства2_2.Проведен";
	Запрос.УстановитьПараметр("Ссылки", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Этапы = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	#КонецОбласти
	
	ТекстыЗапросовПакета = Новый Массив;
	ИндексыРезультатов = Новый Соответствие;
	Индекс = 0;
	
	#Область ТекстЗапросаШапка
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документ.ПартияПроизводства                                                            КАК ПартияПроизводства,
	|	Документ.ПартияПроизводства.Код                                                        КАК ПартияПроизводстваКод,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура                                КАК Изделие,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.НаименованиеПолное             КАК ИзделиеНаименованиеПолное,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПартии,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика.НаименованиеПолное           КАК ХарактеристикаНаименованиеПолное,
	|	Документ.ПартияПроизводства.Спецификация                                               КАК Спецификация,
	|	Документ.ПартияПроизводства.Спецификация.Представление                                 КАК ПредставлениеСпецификации,
	|	Документ.Распоряжение.Номер                                                            КАК РаспоряжениеНомер,
	|	СУММА(ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|				И ТабличнаяЧасть.Характеристика = Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|				ТОГДА ТабличнаяЧасть.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                                                             КАК Количество,
	|	МАКСИМУМ(ЕСТЬNULL(График.ОкончаниеЭтапа, ДАТАВРЕМЯ(1,1,1)))                            КАК ПлановоеОкончание
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|			И (НЕ ТабличнаяЧасть.Отменено)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ПО Документ.Распоряжение = График.Распоряжение
	|			И Документ.Ссылка = График.ЭтапПроизводства
	|			И (График.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	Документ.Ссылка В(&Этапы)
	|	И Документ.ПартияПроизводства.ТипПроцесса В (
	|											ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства,
	|	Документ.Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.ПартияПроизводства,
	|	Документ.ПартияПроизводства.Код,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.НаименованиеПолное,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.Представление,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика.НаименованиеПолное,
	|	Документ.ПартияПроизводства.Спецификация,
	|	Документ.ПартияПроизводства.Спецификация.Представление,
	|	Документ.Распоряжение.Номер,
	|	СУММА(ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|				И ТабличнаяЧасть.Характеристика = Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|				ТОГДА ТабличнаяЧасть.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	МАКСИМУМ(ЕСТЬNULL(График.ОкончаниеЭтапа, ДАТАВРЕМЯ(1,1,1)))
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|			И (НЕ ТабличнаяЧасть.Отменено)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ПО Документ.Распоряжение = График.Распоряжение
	|			И Документ.Ссылка = График.ЭтапПроизводства
	|			И (График.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	Документ.Ссылка В(&Этапы)
	|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства,
	|	Документ.Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияПроизводства";
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ИндексыРезультатов.Вставить("ВыборкаПартии", Индекс);
	Индекс = Индекс + 1;
	
	#КонецОбласти
	
	#Область ТекстЗапросаСмежныеЭтапы
	
	Если ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства КАК ПартияПроизводства,
		|	ВТСвязиЭтапов.Этап                                                                        КАК Этап,
		|	&ВТСвязиЭтаповПредставлениеЭтап                                                           КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).Подразделение               КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.СледующийЭтап В(&Этапы)
		|	И ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|		<> ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Этап
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеЭтап",
			ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.Этап"));
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПредшественники", Индекс);
		Индекс = Индекс + 1;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства     КАК ПартияПроизводства,
		|	ВТСвязиЭтапов.СледующийЭтап                                                          КАК Этап,
		|	&ВТСвязиЭтаповПредставлениеСледующийЭтап                                             КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).Подразделение КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.Этап В(&Этапы)
		|	И ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|		<> ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Этап
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеСледующийЭтап",
			ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.СледующийЭтап"));
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПоследователи", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаЭтапы
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документ.ПартияПроизводства                                        КАК ПартияПроизводства,
	|	Документ.Ссылка                                                    КАК Этап,
	|	&ПредставлениеЭтапа                                                КАК ПредставлениеЭтапа,
	|	Документ.Подразделение                                             КАК Подразделение,
	|	Документ.Подразделение.Представление                               КАК ПредставлениеПодразделения,
	|	ЕСТЬNULL(ГрафикЭтаповПроизводства2_2.НачалоЭтапа, НЕОПРЕДЕЛЕНО)    КАК Начало,
	|	ЕСТЬNULL(ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа, НЕОПРЕДЕЛЕНО) КАК Окончание
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ПО Документ.Распоряжение = ГрафикЭтаповПроизводства2_2.Распоряжение
	|			И Документ.Ссылка = ГрафикЭтаповПроизводства2_2.ЭтапПроизводства
	|			И (ГрафикЭтаповПроизводства2_2.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	Документ.Ссылка В(&Этапы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияПроизводства,
	|	Ссылка
	|ИТОГИ ПО
	|	ПартияПроизводства";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		ТекстЗапросаПредставлениеЭтапа("Документ.Ссылка"));
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ИндексыРезультатов.Вставить("ВыборкаЭтапы", Индекс);
	Индекс = Индекс + 1;
	
	#КонецОбласти
	
	#Область ТекстЗапросаМатериалы
	
	Если ЛистСопровожденияПартииПроизводстваПечататьМатериалы(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Материалы.Ссылка.ПартияПроизводства         КАК ПартияПроизводства,
		|	Материалы.Номенклатура                      КАК Номенклатура,
		|	Материалы.Номенклатура.Код                  КАК Код,
		|	Материалы.Номенклатура.Артикул              КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Материалы.Склад                             КАК Склад,
		|	Материалы.Склад.Представление               КАК ПредставлениеСклада,
		|	ВЫБОР
		|		КОГДА Материалы.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Материалы.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Материалы.Упаковка)
		|	КОНЕЦ                                       КАК ПредставлениеЕдиницыИзмерения,
		|	Материалы.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Этапы)
		|	И НЕ Материалы.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Материалы.Ссылка,
		|	Материалы.НомерСтроки
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаМатериалы", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаВыходныеИзделия
	
	Если ЛистСопровожденияПартииПроизводстваПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Выпуск.Ссылка.ПартияПроизводства         КАК ПартияПроизводства,
		|	Выпуск.Ссылка                            КАК Ссылка,
		|	Выпуск.НомерСтроки                       КАК НомерСтроки,
		|	Выпуск.Номенклатура                      КАК Номенклатура,
		|	Выпуск.Номенклатура.Код                  КАК Код,
		|	Выпуск.Номенклатура.Артикул              КАК Артикул,
		|	Выпуск.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Выпуск.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Выпуск.Получатель                        КАК Получатель,
		|	Выпуск.Получатель.Представление          КАК ПредставлениеПолучателя,
		|	ВЫБОР
		|		КОГДА Выпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Выпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Выпуск.Упаковка)
		|	КОНЕЦ                                    КАК ПредставлениеЕдиницыИзмерения,
		|	Выпуск.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Выпуск
		|ГДЕ
		|	Выпуск.Ссылка В(&Этапы)
		|	И НЕ Выпуск.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПобочныйВыпуск.Ссылка.ПартияПроизводства         КАК ПартияПроизводства,
		|	ПобочныйВыпуск.Ссылка                            КАК Ссылка,
		|	ПобочныйВыпуск.НомерСтроки                       КАК НомерСтроки,
		|	ПобочныйВыпуск.Номенклатура                      КАК Номенклатура,
		|	ПобочныйВыпуск.Номенклатура.Код                  КАК Код,
		|	ПобочныйВыпуск.Номенклатура.Артикул              КАК Артикул,
		|	ПобочныйВыпуск.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	ПобочныйВыпуск.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	ПобочныйВыпуск.Получатель                        КАК Получатель,
		|	ПобочныйВыпуск.Получатель.Представление          КАК ПредставлениеПолучателя,
		|	ВЫБОР
		|		КОГДА ПобочныйВыпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Упаковка)
		|	КОНЕЦ                                            КАК ПредставлениеЕдиницыИзмерения,
		|	ПобочныйВыпуск.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныйВыпуск
		|ГДЕ
		|	ПобочныйВыпуск.Ссылка В(&Этапы)
		|	И НЕ ПобочныйВыпуск.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаИзделия", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СборкаТекста
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	#КонецОбласти
	
	#Область ВыполнениеЗапроса
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("РабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		СоздатьВТСвязиЭтапов(Запрос.МенеджерВременныхТаблиц, Этапы, Ложь);
	КонецЕсли;
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	Для каждого Результат Из ИндексыРезультатов Цикл
		
		РезультатЗапроса = МассивРезультатов[Результат.Значение]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать(
			?(Результат.Ключ = "ВыборкаПартии",
				ОбходРезультатаЗапроса.Прямой,
				ОбходРезультатаЗапроса.ПоГруппировкам));
		ДанныеДляПечати.Вставить(Результат.Ключ, Выборка);
		
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ЛистСопровожденияПартииПроизводстваВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаПартии)
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	Область.Параметры.Номер = СтрШаблон("%1.%2",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПартии.РаспоряжениеНомер, Истина, Истина),
		ВыборкаПартии.ПартияПроизводстваКод);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		Область,
		ВыборкаПартии.ПартияПроизводства);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиШапку(ТабличныйДокумент, Макет, ВыборкаПартии)
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(ВыборкаПартии);
	Область.Параметры.ПредставлениеИзделия = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		ВыборкаПартии.ИзделиеНаименованиеПолное,
		ВыборкаПартии.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
	Область.Параметры.ПлановоеОкончание = Формат(ВыборкаПартии.ПлановоеОкончание, "ДЛФ=D");
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиСмежныеЭтапы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати, Предшественники)
	
	Если НЕ ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		Если Предшественники Тогда
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПредшественники;
		Иначе
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПоследователи;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
		Если НЕ ВыборкаЭтапы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ОбластьЗаголовок = Макет.ПолучитьОбласть("СмежныеЭтапыЗаголовок");
	
	Если Предшественники Тогда
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Принять работу';
																	|en = 'Accept the job'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Сдать работу';
																	|en = 'Pass the work'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	//
	ОбластьСтрока = Макет.ПолучитьОбласть("СмежныеЭтапыСтрока");
	
	Выборка = ВыборкаЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("СмежныеЭтапыПодвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиЭтапы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати)
	
	ВыборкаЭтапы = ДанныеДляПечати.ВыборкаЭтапы; // РезультатЗапроса - 
		
	СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
	Если НЕ ВыборкаЭтапы.НайтиСледующий(СтруктураПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяГрафик = УправлениеПроизводством.ИспользуетсяГрафикПроизводства();
	Если ИспользуетсяГрафик Тогда
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыСГрафиком");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыСГрафиком"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
	Иначе
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыБезГрафика");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыБезГрафика"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ИспользуетсяГрафик И ЗначениеЗаполнено(Выборка.Начало) Тогда
			Если НачалоДня(Выборка.Начало) = НачалоДня(Выборка.Окончание) Тогда
				ОбластьСтрока.Параметры.СрокПроизводства = Формат(Выборка.Начало, "ДФ=dd.MM");
			Иначе
				ОбластьСтрока.Параметры.СрокПроизводства = СтрШаблон("%1 - %2",
					Формат(Выборка.Начало, "ДФ=dd.MM"),
					Формат(Выборка.Окончание, "ДФ=dd.MM"));
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТаблицыЭтапы"));
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиМатериалы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати)
	
	Если НЕ ЛистСопровожденияПартииПроизводстваПечататьМатериалы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаМатериалы = ДанныеДляПечати.ВыборкаМатериалы;
		
		СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
		Если НЕ ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыСКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалыСКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыБезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалыБезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыМатериалы");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиВыходныеИзделия(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати)
	
	Если НЕ ЛистСопровожденияПартииПроизводстваПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаИзделия = ДанныеДляПечати.ВыборкаИзделия;
		
		СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
		Если НЕ ВыборкаИзделия.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделияСКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделияСКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделияБезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделияБезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаИзделия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыВыходныеИзделия");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьСмежныеЭтапы") Тогда
		Возврат ПараметрыПечати.ПечататьСмежныеЭтапы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьСмежныеЭтапы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЛистСопровожденияПартииПроизводстваПечататьМатериалы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьМатериалы") Тогда
		Возврат ПараметрыПечати.ПечататьМатериалы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьМатериалы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЛистСопровожденияПартииПроизводстваПечататьВыходныеИзделия(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьВыходныеИзделия") Тогда
		Возврат ПараметрыПечати.ПечататьВыходныеИзделия;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьВыходныеИзделия");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Серии

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Получатель КАК Получатель,
	|	Товары.Произведено КАК Произведено,
	|	Товары.ДатаПроизводства КАК ДатаПроизводства,
	|	Товары.Количество КАК Количество,
	|	Товары.Отменено КАК Отменено,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Получатель КАК Получатель,
	|	Товары.Произведено КАК Произведено,
	|	Товары.ДатаПроизводства КАК ДатаПроизводства,
	|	Товары.Подразделение КАК Подразделение,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Получатель,
	|	Товары.Произведено,
	|	Товары.ДатаПроизводства,
	|	Товары.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Получатель КАК Получатель,
	|	Серии.Произведено КАК Произведено,
	|	Серии.ДатаПроизводства КАК ДатаПроизводства,
	|	Серии.Подразделение КАК Подразделение,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Получатель КАК Получатель,
	|	Серии.Произведено КАК Произведено,
	|	Серии.ДатаПроизводства КАК ДатаПроизводства,
	|	Серии.Подразделение КАК Подразделение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Получатель,
	|	Серии.Произведено,
	|	Серии.ДатаПроизводства,
	|	Серии.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ Товары.Произведено
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПроизводствеПродукции
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 2
	|					КОГДА НЕ ТоварыДляЗапроса.Произведено
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Получатель = ТоварыДляЗапроса.Получатель
	|			И Товары.Произведено = ТоварыДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = ТоварыДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Назначение = СерииДляЗапроса.Назначение
	|			И Товары.Получатель = СерииДляЗапроса.Получатель
	|			И Товары.Произведено = СерииДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = СерииДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = СерииДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ Склады.ЦеховаяКладовая
	|				ИЛИ Склады.Подразделение <> Товары.Подразделение
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ Товары.Произведено
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 10
	|					КОГДА НЕ ТоварыДляЗапроса.Произведено
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 8
	|					КОГДА НЕ ТоварыДляЗапроса.Произведено
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 27
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПродукцииИзПроизводства
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								КОГДА НЕ ТоварыДляЗапроса.Произведено
	|										И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|									ТОГДА 23
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							КОГДА НЕ ТоварыДляЗапроса.Произведено
	|									И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|								ТОГДА 21
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Получатель = ТоварыДляЗапроса.Получатель
	|			И Товары.Произведено = ТоварыДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = ТоварыДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Назначение = СерииДляЗапроса.Назначение
	|			И Товары.Получатель = СерииДляЗапроса.Получатель
	|			И Товары.Произведено = СерииДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = СерииДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = СерииДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Товары.Получатель = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Получатель = ПолитикиУчетаСерий.Склад
	|			И (СправочникНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	СтатусыПолучатель.СтатусУказанияСерий КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий В (13, 14, 15)
	|			ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|		КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО Товары.НомерСтроки = СтатусыОтправитель.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО Товары.НомерСтроки = СтатусыПолучатель.НомерСтроки
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ СтатусыПолучатель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий В (13, 14, 15)
	|					ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|				КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|			КОНЕЦ <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийОбеспечениеМатериаламиИРаботами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	Товары.Отменено КАК Отменено,
	|	Товары.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	// При отгрузке из нашей кладовой
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ЦеховаяКладовая
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).Подразделение = Товары.Подразделение
	|				И НЕ &ПроизводствоНаСтороне
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ЦеховаяКладовая
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).Подразделение = Товары.Подразделение
	|				И НЕ &ПроизводствоНаСтороне
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Склад = ПолитикиУчетаСерий.Склад
	|			И (СпрНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ЦеховаяКладовая
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).Подразделение = Товары.Подразделение
	|				И НЕ &ПроизводствоНаСтороне
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	СтатусыПолучатель.СтатусУказанияСерий КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО Товары.НомерСтроки = СтатусыОтправитель.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО Товары.НомерСтроки = СтатусыПолучатель.НомерСтроки
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ СтатусыПолучатель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|			КОНЕЦ <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийРасходМатериаловИРабот()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриРасходеМатериалов
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийЭкономияМатериалов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Получатель КАК Склад,
	|	Товары.Обособить КАК Обособить,
	|	Товары.ДатаОперации КАК ДатаОперации,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	Товары.Обособить КАК Обособить,
	|	Товары.ДатаОперации КАК ДатаОперации,
	|	Товары.Подразделение КАК Подразделение,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Склад,
	|	Товары.Обособить,
	|	Товары.ДатаОперации,
	|	Товары.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Получатель КАК Склад,
	|	Серии.Обособить КАК Обособить,
	|	Серии.ДатаОперации КАК ДатаОперации,
	|	Серии.Подразделение КАК Подразделение,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Склад КАК Склад,
	|	Серии.Обособить КАК Обособить,
	|	Серии.ДатаОперации КАК ДатаОперации,
	|	Серии.Подразделение КАК Подразделение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Склад,
	|	Серии.Обособить,
	|	Серии.ДатаОперации,
	|	Серии.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|			И Товары.Обособить = ТоварыДляЗапроса.Обособить
	|			И Товары.ДатаОперации = ТоварыДляЗапроса.ДатаОперации
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ Склады.ЦеховаяКладовая
	|				ИЛИ Склады.Подразделение <> Товары.Подразделение
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 8
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|			И Товары.Обособить = ТоварыДляЗапроса.Обособить
	|			И Товары.ДатаОперации = ТоварыДляЗапроса.ДатаОперации
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Склад = СерииДляЗапроса.Склад
	|			И Товары.Обособить = СерииДляЗапроса.Обособить
	|			И Товары.ДатаОперации = СерииДляЗапроса.ДатаОперации
	|			И Товары.Подразделение = СерииДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Товары.Склад = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Склад = ПолитикиУчетаСерий.Склад
	|			И (СправочникНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	СтатусыПолучатель.СтатусУказанияСерий КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий <> 0
	|			ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|		ИНАЧЕ СтатусыПолучатель.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО Товары.НомерСтроки = СтатусыОтправитель.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО Товары.НомерСтроки = СтатусыПолучатель.НомерСтроки
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ СтатусыПолучатель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий <> 0
	|					ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|				ИНАЧЕ СтатусыПолучатель.СтатусУказанияСерий
	|			КОНЕЦ <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПакетноеФормированиеЭтапов

Функция СформироватьЭтапыВнутриЗамераВремени(Параметры)
	
	РезультатФормирования = РезультатФормированияЭтапов(Параметры.Распоряжения);
	
	// Чтение потребностей к формированию этапов
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВТДанныеДляФормированияЭтапов(
		МенеджерВременныхТаблиц, Параметры.Распоряжения);
	
	ПроверитьДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, РезультатФормирования);
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
		МенеджерВременныхТаблиц, Параметры.Распоряжения);
	
	Очередь = ОчередьРаспоряженийДляФормированияЭтапов(МенеджерВременныхТаблиц);
	Если Очередь.Количество() = 0 Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	
	Изделия = ПродукцияИПолуфабрикатыДляФормированияЭтапов(МенеджерВременныхТаблиц);
	Изделия.Индексы.Добавить("Распоряжение");
	
	// Параметры разузлования
	ПараметрыРазузлования = РазузлованиеИзделий.ПараметрыРазузлования();
	ПараметрыРазузлования.ГруппироватьДанные = Истина;
	ПараметрыРазузлования.ПоляГруппировки = РазузлованиеИзделий.ПоляГруппировки("Распоряжение,НазначениеПродукция");
	ПараметрыРазузлования.РезервПФСоСклада = Параметры.РезервироватьПФ;
	ПараметрыРазузлования.РезервПФИмяПоляНазначение = "НазначениеМатериалы";
	ПараметрыРазузлования.ЗаменятьПФНаАналоги = Параметры.ЗаменятьПФНаАналоги;
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(, МенеджерВременныхТаблиц);
	
	Пока Очередь.Следующий() Цикл
		
		ПараметрыРазузлования.РезервПФТолькоОбособленно = Очередь.ПроизводствоИзДавальческогоСырья;
		
		// Чтение данных спецификаций
		РезультатРазузлования = РазузлованиеИзделий.Разузловать(
			Изделия.Скопировать(Новый Структура("Распоряжение", Очередь.Распоряжение)),
			ПараметрыРазузлования,
			ПараметрыВыборки);
		
		Если РезультатРазузлования.ЕстьОшибка Тогда
			ЗаполнитьЗначенияСвойств(РезультатФормирования, РезультатРазузлования, "ЕстьОшибка, ОшибкаТекст, ОшибкаСсылка");
			Возврат РезультатФормирования;
		КонецЕсли;
		
		ДанныеСпецификаций = РезультатРазузлования.ДанныеСпецификаций;
		ДополнитьДанныеСпецификаций(ДанныеСпецификаций, Очередь.Распоряжение);
		
		// Формирование документов
		Этапы = Новый Массив;
		Для Индекс = 0 По ДанныеСпецификаций.ВГРаница() Цикл
			
			Ссылки = СоздатьЦепочкуЭтапов(ДанныеСпецификаций[Индекс], Истина);
			
			Для каждого Ссылка Из Ссылки Цикл
				Этапы.Добавить(Ссылка);
			КонецЦикла;
			РезультатФормирования.СформированоДокументов = РезультатФормирования.СформированоДокументов + Ссылки.Количество();
			
		КонецЦикла;
		РегистрыСведений.НормативныйГрафикЭтаповПроизводства.Рассчитать(Очередь.Распоряжение);
		
		// Заполнение обеспечения и формирование движений
		ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(Параметры, Этапы, МенеджерВременныхТаблиц);
		
		// Обособление выпуска в этапах, требующих разборку
		СтрокиОбособить = Изделия.НайтиСтроки(
			Новый Структура("Распоряжение, ОбособитьПодРазобрку", Очередь.Распоряжение, Истина));
		ЭтапыОбособить = Неопределено;
		Если СтрокиОбособить.ВГраница() <> -1 Тогда
			ЭтапыОбособить = Изделия.Скопировать(СтрокиОбособить, "ЭтапИсточник").ВыгрузитьКолонку("ЭтапИсточник");
			ОбособитьВыпускПодРазборку(ЭтапыОбособить, Этапы);
		КонецЕсли;
		
		// Заполнение связанных регистров
		Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Этапы);
		КонецЕсли;
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(Этапы);
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Очередь.Распоряжение);
		Если ЭтапыОбособить <> Неопределено Тогда
			РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(ЭтапыОбособить);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФормирования;
	
КонецФункции

Функция СформироватьЭтапыПоДаннымЗаказа21(Параметры, Распоряжение, ДанныеСпецификаций) Экспорт
	
	ДополнитьДанныеСпецификаций(ДанныеСпецификаций, Распоряжение);
		
	// Формирование документов
	Этапы = Новый Массив;
	СформированоДокументов = 0;
	Для Индекс = 0 По ДанныеСпецификаций.ВГРаница() Цикл
		
		Ссылки = СоздатьЦепочкуЭтапов(ДанныеСпецификаций[Индекс], Истина);
		
		Для каждого Ссылка Из Ссылки Цикл
			Этапы.Добавить(Ссылка);
		КонецЦикла;
		СформированоДокументов = СформированоДокументов + Ссылки.Количество();
		
	КонецЦикла;
	РегистрыСведений.НормативныйГрафикЭтаповПроизводства.Рассчитать(Распоряжение);
	
	// Заполнение обеспечения и формирование движений
	ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(Параметры, Этапы, Новый МенеджерВременныхТаблиц);
	
	// Заполнение связанных регистров
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Этапы);
	КонецЕсли;
	РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(Этапы);
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжение);

	Возврат СформированоДокументов;
	
КонецФункции

Функция РезультатФормированияЭтапов(Распоряжения = Неопределено)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("ОшибкаТекст", Неопределено);
	Результат.Вставить("ОшибкаСсылка", Неопределено);
	
	Результат.Вставить("СформированоДокументов", 0);
	
	Результат.Вставить("Распоряжения", Распоряжения);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, РезультатФормирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫРАЗИТЬ(ВТПотребности.Распоряжение КАК Документ.ЗаказНаПроизводство2_2) КАК Ссылка,
	|		ВЫРАЗИТЬ(ВТПотребности.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса
	|	ИЗ
	|		ВтДанныеДляФормированияЭтапов КАК ВТПотребности
	|	ГДЕ
	|		ВТПотребности.ЭтапИсточник = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|		И ВТПотребности.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫРАЗИТЬ(ВТПотребности.ЭтапИсточник КАК Документ.ЭтапПроизводства2_2) КАК Ссылка,
	|		ВЫРАЗИТЬ(ВТПотребности.ЭтапИсточник КАК Документ.ЭтапПроизводства2_2).ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса
	|	ИЗ
	|		ВтДанныеДляФормированияЭтапов КАК ВТПотребности
	|	ГДЕ
	|		ВТПотребности.ЭтапИсточник <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|		И ВТПотребности.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|) КАК Таблица");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			Подстановка = НСтр("ru = 'производства (разборки)';
								|en = 'production (disassembly)'");
		ИначеЕсли Выборка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
			Подстановка = НСтр("ru = 'производства (ремонта)';
								|en = 'production (R&M)'");
		Иначе
			Подстановка = НСтр("ru = 'производства';
								|en = 'production'");
		КонецЕсли;
		
		ТекстШаблон = НСтр("ru = 'Для %1 изделий необходимо создать этапы вручную (см. документ № %2)';
							|en = 'For the %1 goods, create stages manually (see document No.%2)'");
		ОшибкаТекст = СтрШаблон(ТекстШаблон, Подстановка, Выборка.Ссылка);

		РезультатФормирования.ЕстьОшибка = Истина;
		РезультатФормирования.ОшибкаТекст = ОшибкаТекст;
		РезультатФормирования.ОшибкаСсылка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчередьРаспоряженийДляФормированияЭтапов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Распоряжение КАК Распоряжение,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ХозяйственнаяОперация
	|	                           = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья) КАК ПроизводствоИзДавальческогоСырья,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Приоритет.РеквизитДопУпорядочивания     КАК Приоритет1,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Подразделение.РеквизитДопУпорядочивания КАК Приоритет2,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Очередь                                 КАК Приоритет3
	|
	|ИЗ
	|	ВтДанныеДляФормированияЭтапов КАК Таблица
	|	
	|ГДЕ
	|	Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет1,
	|	Приоритет2,
	|	Приоритет3
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПродукцияИПолуфабрикатыДляФормированияЭтапов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Распоряжение,
	|	
	|	Таблица.НазначениеПродукция КАК НазначениеПродукция,
	|	Таблица.НазначениеМатериалы КАК НазначениеМатериалы,
	|	
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|
	|	Таблица.Отправитель    КАК Отправитель,
	|	Таблица.Получатель     КАК Получатель,
	|	
	|	Таблица.ЭтапИсточник   КАК ЭтапИсточник,
	|	Таблица.Назначение     КАК Назначение,
	|	
	|	Таблица.Спецификация   КАК Спецификация,
	|
	|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
	|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	Таблица.Количество     КАК Количество,
	|	
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).НачатьНеРанее           КАК ДатаЗапуска,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ДатаПотребности         КАК ДатаВыпуска,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).РазмещениеВыпуска       КАК РазмещениеВыпуска,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Подразделение           КАК ПодразделениеДиспетчер,
	|
	|	Таблица.ЭтапИсточник <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)                КАК ОбособитьПодРазобрку
	|ИЗ
	|	ВтДанныеДляФормированияЭтапов КАК Таблица
	|	
	|ГДЕ
	|	Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбособитьВыпускПодРазборку(СсылкиПотребность, СсылкиОбеспечение)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка            КАК ЭтапПотребитель,
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура      КАК Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Характеристика    КАК Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Склад             КАК Получатель,
		|	ОбеспечениеМатериаламиИРаботами.Назначение        КАК Назначение,
		|	СУММА(ОбеспечениеМатериаламиИРаботами.Количество) КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
		|ГДЕ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.ЭтапПотребитель КАК Ссылка
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&СсылкиПотребность)
		|				И Т.ОбработатьПоСпецификации
		|				И Т.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				Т.ЭтапПотребитель
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&СсылкиПотребность)
		|				И Т.ОбработатьПоСпецификации
		|				И Т.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка))
		|	И ОбеспечениеМатериаламиИРаботами.Ссылка.Проведен
		|	И ОбеспечениеМатериаламиИРаботами.Производится
		|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбеспечениеМатериаламиИРаботами.Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Назначение,
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Склад,
		|	ОбеспечениеМатериаламиИРаботами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка.Спецификация КАК Спецификация,
		|	ОбеспечениеМатериаламиИРаботами.Ссылка              КАК ЭтапПотребитель,
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура        КАК Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Характеристика      КАК Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Назначение          КАК Назначение,
		|	ОбеспечениеМатериаламиИРаботами.Склад               КАК Получатель,
		|	ОбеспечениеМатериаламиИРаботами.Количество          КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
		|ГДЕ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка В(&СсылкиОбеспечение)
		|	И ОбеспечениеМатериаламиИРаботами.Производится
		|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
		|	И ОбеспечениеМатериаламиИРаботами.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)");
	Запрос.УстановитьПараметр("СсылкиПотребность", СсылкиПотребность);
	Запрос.УстановитьПараметр("СсылкиОбеспечение", СсылкиОбеспечение);
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	ОбеспечениеСтарое = МассивРезультатов[0].Выгрузить();
	ОбеспечениеСтарое.Индексы.Добавить("ЭтапПотребитель,Номенклатура,Характеристика,Получатель,Назначение");
	СтруктураПоиска1 = Новый Структура("ЭтапПотребитель,Номенклатура,Характеристика,Получатель,Назначение");
	
	ОбеспечениеНовое = МассивРезультатов[1].Выгрузить();
	ОбеспечениеНовое.Индексы.Добавить("Спецификация,Номенклатура,Характеристика,Получатель");
	СтруктураПоиска2 = Новый Структура("Спецификация,Номенклатура,Характеристика,Получатель");
	
	СтруктураПоиска = Новый Структура("ОбработатьПоСпецификации", Истина);
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = Неопределено;
	
	Для каждого Ссылка Из СсылкиПотребность Цикл
		
		Попытка
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			Для Сч = 1 По 2 Цикл
				
				ИмяТаблицы = ?(Сч=1, "ВыходныеИзделия", "ПобочныеИзделия");
				Для каждого Строка Из ДокументОбъект[ИмяТаблицы].НайтиСтроки(СтруктураПоиска) Цикл
					
					Остаток = Строка.Количество;
					
					Если НЕ Строка.ЭтапПотребитель.Пустая() Тогда
						ЗаполнитьЗначенияСвойств(СтруктураПоиска1, Строка);
						Для каждого СтрокаОбеспечение Из ОбеспечениеСтарое.НайтиСтроки(СтруктураПоиска1) Цикл
							Зачет = Мин(Остаток, СтрокаОбеспечение.Количество);
							СтрокаОбеспечение.Количество = СтрокаОбеспечение.Количество - Зачет;
							Остаток = Остаток - Зачет;
						КонецЦикла;
					КонецЕсли;
					Если Остаток = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска2, Строка);
					Для каждого СтрокаОбеспечение Из ОбеспечениеНовое.НайтиСтроки(СтруктураПоиска2) Цикл
						
						Зачет = Мин(Остаток, СтрокаОбеспечение.Количество);
						
						Если Строка.Количество > Зачет Тогда
							НоваяСтрока = ДокументОбъект[ИмяТаблицы].Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							НоваяСтрока.Количество = Зачет;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
							Строка.Количество = Строка.Количество - Зачет;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
							
							Если ИмяТаблицы = "ВыходныеИзделия" Тогда
								ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
									НоваяСтрока, Строка, ДокументОбъект.СпособРаспределенияЗатратНаВыходныеИзделия);
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбеспечение, "Назначение, ЭтапПотребитель");
						Иначе
							ЗаполнитьЗначенияСвойств(Строка, СтрокаОбеспечение, "Назначение, ЭтапПотребитель");
						КонецЕсли;
						
						Остаток = Остаток - Зачет;
						Если Остаток = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		Исключение
			
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Формирование этапов';
							|en = 'Generate stages'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Заполняет расход по данным обеспечения
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - содержит:
//            * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//  Режим - Число - 0 => заполнение происходит только по данным обеспечения (расход предварительно очищается),
//                  1 => к расходу добавляются данные из обеспечения,
//                  2 => расход корректируется (синхронизируется) по данным обеспечения.
//
Процедура ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект, Режим = 0) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ссылка                                             КАК Ссылка,
	|	ОбеспечениеМатериаламиИРаботами.Подразделение       КАК Подразделение,
	|	ОбеспечениеМатериаламиИРаботами.НомерСтроки         КАК НомерСтроки,
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура        КАК Номенклатура,
	|	ОбеспечениеМатериаламиИРаботами.Характеристика      КАК Характеристика,
	|	ОбеспечениеМатериаламиИРаботами.Склад               КАК Склад,
	|	ОбеспечениеМатериаламиИРаботами.Серия               КАК Серия,
	|	ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	ОбеспечениеМатериаламиИРаботами.Упаковка            КАК Упаковка,
	|	ОбеспечениеМатериаламиИРаботами.Количество          КАК Количество,
	|	ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок  КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	&ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
	|ГДЕ
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ОбеспечениеМатериаламиИРаботами.Количество <> 0
	|	И ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка                                    КАК Ссылка,
	|	РасходМатериаловИРабот.Подразделение       КАК Подразделение,
	|	РасходМатериаловИРабот.НомерСтроки         КАК НомерСтроки,
	|	РасходМатериаловИРабот.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходМатериаловИРабот.Номенклатура        КАК Номенклатура,
	|	РасходМатериаловИРабот.Характеристика      КАК Характеристика,
	|	РасходМатериаловИРабот.Серия               КАК Серия,
	|	РасходМатериаловИРабот.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	РасходМатериаловИРабот.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	РасходМатериаловИРабот.Упаковка            КАК Упаковка,
	|	РасходМатериаловИРабот.ДатаРасхода         КАК ДатаРасхода,
	|	РасходМатериаловИРабот.Количество          КАК Количество,
	|	РасходМатериаловИРабот.КоличествоУпаковок  КАК КоличествоУпаковок
	|ПОМЕСТИТЬ РасходЗаполненныеСерии
	|ИЗ
	|	&РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|ГДЕ
	|	РасходМатериаловИРабот.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И РасходМатериаловИРабот.Количество <> 0
	// Выбираем только правильно заполненные серии
	|	И РасходМатериаловИРабот.СтатусУказанияСерий В (0, 2, 14)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка                           КАК Ссылка,
	|	ЭкономияМатериалов.Подразделение  КАК Подразделение,
	|	ЭкономияМатериалов.Номенклатура   КАК Номенклатура,
	|	ЭкономияМатериалов.Характеристика КАК Характеристика,
	|	ЭкономияМатериалов.Серия          КАК Серия,
	|	ЭкономияМатериалов.Количество     КАК Количество
	|ПОМЕСТИТЬ Экономия
	|ИЗ
	|	&ЭкономияМатериалов КАК ЭкономияМатериалов
	|ГДЕ
	|	ЭкономияМатериалов.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЭкономияМатериалов.Количество <> 0");
	
	Запрос.УстановитьПараметр("Ссылка"                          , Объект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение"                   , Объект.Подразделение);
	Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами" , Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить());
	Запрос.УстановитьПараметр("РасходМатериаловИРабот"          , 
		Объект.РасходМатериаловИРабот.Выгрузить(?(Режим = 0, Новый Массив, Неопределено)));
	Запрос.УстановитьПараметр("ЭкономияМатериалов"              , Объект.ЭкономияМатериалов.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если Объект.РасходОднойДатой Тогда
		ДатаОперации = Объект.ДатаРасхода;
	ИначеЕсли Объект.ФактическоеОкончаниеЭтапа <> '000101010000'
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен") Тогда
		ДатаОперации = Объект.ФактическоеОкончаниеЭтапа;
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(Объект).РасходМатериаловИРабот;
	
	Результат = РассчитатьРасходМатериалов(МенеджерВременныхТаблиц, ДатаОперации, Режим = 2);
	
	Объект.РасходМатериаловИРабот.Загрузить(Результат);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

// Заполняет неизрасходованные материалы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - содержит:
//            * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//
Процедура ЗаполнитьНеизрасходованныеМатериалы(Объект) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ссылка                                             КАК Ссылка,
	|	ОбеспечениеМатериаламиИРаботами.Подразделение       КАК Подразделение,
	|	ОбеспечениеМатериаламиИРаботами.НомерСтроки         КАК НомерСтроки,
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура        КАК Номенклатура,
	|	ОбеспечениеМатериаламиИРаботами.Характеристика      КАК Характеристика,
	|	ОбеспечениеМатериаламиИРаботами.Склад               КАК Склад,
	|	ОбеспечениеМатериаламиИРаботами.Серия               КАК Серия,
	|	ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения  КАК ВариантОбеспечения,
	|	ОбеспечениеМатериаламиИРаботами.Обособленно         КАК Обособленно,
	|	ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	ОбеспечениеМатериаламиИРаботами.Упаковка            КАК Упаковка,
	|	ОбеспечениеМатериаламиИРаботами.Количество          КАК Количество,
	|	ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	ОбеспечениеМатериаламиИРаботами.Отменено            КАК Отменено
	|	
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	&ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	РасходМатериаловИРабот.Подразделение  КАК Подразделение,
	|	РасходМатериаловИРабот.НомерСтроки    КАК НомерСтроки,
	|	РасходМатериаловИРабот.Номенклатура   КАК Номенклатура,
	|	РасходМатериаловИРабот.Характеристика КАК Характеристика,
	|	РасходМатериаловИРабот.Количество     КАК Количество
	|	
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	&РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами", Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить());
	Запрос.УстановитьПараметр("РасходМатериаловИРабот", Объект.РасходМатериаловИРабот.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если Объект.РасходОднойДатой Тогда
		ДатаОперации = Объект.ДатаРасхода;
	ИначеЕсли Объект.ФактическоеОкончаниеЭтапа <> '000101010000'
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен") Тогда
		ДатаОперации = Объект.ФактическоеОкончаниеЭтапа;
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Результат = РассчитатьЭкономиюМатериалов(МенеджерВременныхТаблиц, ДатаОперации);
	Объект.ЭкономияМатериалов.Загрузить(Результат);
	
КонецПроцедуры

Процедура УстановитьДействиеОтгрузить(Объект) Экспорт
	
	Если Объект.НеОтгружатьЧастями Тогда
		ДатаОперации = Объект.ДатаОтгрузки;
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтрокиСПустымСкладом = Новый Массив;
	
	Для каждого ДанныеСтроки Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				ИЛИ ДанныеСтроки.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.ДатаОтгрузки = ДатаОперации;
		ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		Если НЕ ДанныеСтроки.Производится
			И НЕ ЗначениеЗаполнено(ДанныеСтроки.Склад) Тогда
			// Склад может быть не заполнен если не было запланировано обеспечение
			// Нужно его заполнить значением по умолчанию.
			СтрокиСПустымСкладом.Добавить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Заполнение пустых складов
	Если СтрокиСПустымСкладом.Количество() <> 0 Тогда
		
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаМатериалов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		
		Для каждого ДанныеСтроки Из СтрокиСПустымСкладом Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаМатериалов.Добавить(), ДанныеСтроки);
		КонецЦикла;
		
		ПараметрыОбеспечения = ОбеспечениеПроизводства.ПараметрыОбеспеченияСпискаНоменклатуры(ТаблицаМатериалов);
		ПараметрыОбеспечения.Индексы.Добавить("Номенклатура,Характеристика,Подразделение");
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Подразделение");
		Для каждого ДанныеСтроки Из СтрокиСПустымСкладом Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
			СписокСтрок = ПараметрыОбеспечения.НайтиСтроки(СтруктураПоиска);
			ДанныеСтроки.Склад = СписокСтрок[0].Склад;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтменитьДействиеОтгрузить(Объект) Экспорт
	
	Для каждого ДанныеСтроки Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				И НЕ ДанныеСтроки.Отменено Тогда
			ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОтменитьДействиеРезервировать(Объект) Экспорт
	
	Для каждого ДанныеСтроки Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
				И НЕ ДанныеСтроки.Отменено Тогда
			ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьРасходМатериалов(МенеджерВременныхТаблиц, ДатаРасхода = '00010101', Синхронизировать = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обеспечение.Ссылка                КАК Ссылка,
	|	Обеспечение.Подразделение         КАК Подразделение,
	|	Обеспечение.Номенклатура          КАК Номенклатура,
	|	Обеспечение.Характеристика        КАК Характеристика,
	|	Обеспечение.Серия                 КАК Серия,
	|	Обеспечение.СтатьяКалькуляции     КАК СтатьяКалькуляции,
	|	Обеспечение.Упаковка			  КАК Упаковка,
	|	СУММА(Обеспечение.Количество)     КАК Количество
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|ГДЕ
	|	Обеспечение.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик =
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	СтатьяКалькуляции,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Экономия.Ссылка            КАК Ссылка,
	|	Экономия.Подразделение     КАК Подразделение,
	|	Экономия.Номенклатура      КАК Номенклатура,
	|	Экономия.Характеристика    КАК Характеристика,
	|	Экономия.Серия             КАК Серия,
	|	СУММА(Экономия.Количество) КАК Количество
	|ИЗ
	|	Экономия КАК Экономия
	|ГДЕ
	|	Экономия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик =
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|		
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходЗаполненныеСерии.Ссылка              КАК Ссылка,
	|	РасходЗаполненныеСерии.Подразделение       КАК Подразделение,
	|	РасходЗаполненныеСерии.НомерСтроки         КАК НомерСтроки,
	|	РасходЗаполненныеСерии.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходЗаполненныеСерии.Номенклатура        КАК Номенклатура,
	|	РасходЗаполненныеСерии.Характеристика      КАК Характеристика,
	|	РасходЗаполненныеСерии.Серия               КАК Серия,
	|	РасходЗаполненныеСерии.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	РасходЗаполненныеСерии.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	РасходЗаполненныеСерии.Упаковка            КАК Упаковка,
	|	РасходЗаполненныеСерии.ДатаРасхода         КАК ДатаРасхода,
	|	РасходЗаполненныеСерии.Количество          КАК Количество
	|ИЗ
	|	РасходЗаполненныеСерии КАК РасходЗаполненныеСерии
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходЗаполненныеСерии.Ссылка,
	|	РасходЗаполненныеСерии.НомерСтроки
	|";
	
	Результат = Запрос.ВыполнитьПакет();  
	КоличествоПакетов = Результат.Количество();
	
	ОтгруженныеМатериалы				= Результат[КоличествоПакетов - 3].Выгрузить(); // ТаблицаЗначений - 
	ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, Серия, СтатьяКалькуляции");
	ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, Серия");
	ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика");
	
	ЭкономияМатериалов					= Результат[КоличествоПакетов - 2].Выгрузить();
	РасходМатериаловИРаботКОбеспечению	= Результат[КоличествоПакетов - 1].Выгрузить();
	
	РасходМатериаловИРабот = УправлениеПроизводством.ТабличнаяЧастьДокументаЭтапПроизводства("РасходМатериаловИРабот");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(РасходМатериаловИРабот, РасходМатериаловИРаботКОбеспечению); 
	
	// Обеспечим расход в разрезе серий и статей калькуляции
	СтруктураОтбора = Новый Структура("Ссылка, Подразделение, Номенклатура, Характеристика, Серия, СтатьяКалькуляции");	
	СкорректироватьТаблицы(ОтгруженныеМатериалы, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора);
	
	// Обеспечим экономию в разрезе серий
	СтруктураОтбора = Новый Структура("Ссылка, Подразделение, Номенклатура, Характеристика, Серия");	
	СкорректироватьТаблицы(ОтгруженныеМатериалы, ЭкономияМатериалов, СтруктураОтбора);
	
	// Обеспечим остаток расхода из пустых серий
	ПоляОтбора      = "Ссылка, Подразделение, Номенклатура, Характеристика";
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	СтруктураОтбора.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СкорректироватьТаблицы(ОтгруженныеМатериалы, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора, ПоляОтбора);
	
	// Обеспечим остатки экономии без учета серий
	СтруктураОтбора = Новый Структура("Ссылка, Подразделение, Номенклатура, Характеристика");
	СкорректироватьТаблицы(ОтгруженныеМатериалы, ЭкономияМатериалов, СтруктураОтбора);
	
	Если Синхронизировать Тогда
		
		РасходМатериаловИРабот.Индексы.Добавить("НомерСтроки");
		
		// Синхронизируем расход с обеспечением
		СтруктураОтбора = Новый Структура("НомерСтроки");
		СкорректироватьТаблицы(РасходМатериаловИРабот, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора);

		// Актуализируем номера строк
		Для каждого СтрокаТаблицы Из РасходМатериаловИРабот Цикл
			СтрокаТаблицы.НомерСтроки = РасходМатериаловИРабот.Индекс(СтрокаТаблицы) + 1;
		КонецЦикла;
	
	Иначе
	
		// Обеспечим остатки расхода без учета серий
		СтруктураОтбора = Новый Структура("Ссылка, Подразделение, Номенклатура, Характеристика");
		СкорректироватьТаблицы(ОтгруженныеМатериалы, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора);
	
	КонецЕсли;
	
	// Перенесем остатки обеспечения в расход и перезаполним серии
	Для Каждого Строка Из ОтгруженныеМатериалы Цикл
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РасходМатериаловИРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ДатаРасхода = ДатаРасхода;
		НоваяСтрока.НомерСтроки = РасходМатериаловИРабот.Количество();
		
	КонецЦикла;
	
	// Пересчитаем количество упаковок в расходе
	СтруктураДейтсвий = Новый Структура;
	СтруктураДейтсвий.Вставить(
		"ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(РасходМатериаловИРабот, СтруктураДейтсвий, КэшированныеЗначения);
	
	Возврат РасходМатериаловИРабот;
	
КонецФункции

Функция РассчитатьЭкономиюМатериалов(МенеджерВременныхТаблиц, ДатаОперации = '00010101') Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Расход.Ссылка КАК Ссылка,
	|	Расход.Подразделение КАК Подразделение,
	|	Расход.Номенклатура КАК Номенклатура,
	|	Расход.Характеристика КАК Характеристика,
	|	СУММА(Расход.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаРасход
	|ИЗ
	|	Расход КАК Расход
	|ГДЕ
	|	Расход.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Расход.Количество <> 0
	|	И ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Расход.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обеспечение.Ссылка КАК Ссылка,
	|	Обеспечение.Подразделение КАК Подразделение,
	|	Обеспечение.Номенклатура КАК Номенклатура,
	|	Обеспечение.Характеристика КАК Характеристика,
	|	Обеспечение.Склад КАК Склад,
	|	Обеспечение.Упаковка КАК Упаковка,
	|	Обеспечение.Обособленно КАК Обособленно,
	|	Обеспечение.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаОбеспечение
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|ГДЕ
	|	Обеспечение.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Обеспечение.Количество <> 0
	|	И ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Обеспечение.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик =
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|	И НЕ Обеспечение.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбеспечение.Ссылка КАК Ссылка,
	|	ТаблицаОбеспечение.Подразделение КАК Подразделение,
	|	ТаблицаОбеспечение.Номенклатура КАК Номенклатура,
	|	ТаблицаОбеспечение.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаОбеспечение.Количество) - ЕСТЬNULL(МАКСИМУМ(ТаблицаРасход.Количество), 0) КАК Количество
	|ПОМЕСТИТЬ ТаблицаРаспределение
	|ИЗ
	|	ТаблицаОбеспечение КАК ТаблицаОбеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасход КАК ТаблицаРасход
	|		ПО ТаблицаОбеспечение.Ссылка = ТаблицаРасход.Ссылка
	|			И ТаблицаОбеспечение.Подразделение = ТаблицаРасход.Подразделение
	|			И ТаблицаОбеспечение.Номенклатура = ТаблицаРасход.Номенклатура
	|			И ТаблицаОбеспечение.Характеристика = ТаблицаРасход.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбеспечение.Ссылка,
	|	ТаблицаОбеспечение.Подразделение,
	|	ТаблицаОбеспечение.Номенклатура,
	|	ТаблицаОбеспечение.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОбеспечение.Количество) > ЕСТЬNULL(МАКСИМУМ(ТаблицаРасход.Количество), 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбеспечение.Ссылка КАК Ссылка,
	|	ТаблицаОбеспечение.Подразделение КАК Подразделение,
	|	ТаблицаОбеспечение.Номенклатура КАК Номенклатура,
	|	ТаблицаОбеспечение.Характеристика КАК Характеристика,
	|	ТаблицаОбеспечение.Склад КАК Получатель,
	|	ТаблицаОбеспечение.Обособленно КАК Обособить,
	|	ТаблицаОбеспечение.Упаковка КАК Упаковка,
	|	ТаблицаОбеспечение.Количество КАК Количество,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОбеспечение.Склад КАК Справочник.Склады).ЦеховаяКладовая, ЛОЖЬ) КАК ЦеховаяКладовая,
	|	&ШтучныйТоварВМерныхЕдиницах КАК ШтучныйТоварВМерныхЕдиницах,
	|	НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОбеспечение.Склад КАК Справочник.Склады).ЦеховаяКладовая, ЛОЖЬ)
	|	И &ШтучныйТоварВМерныхЕдиницах КАК НужноОкруглять
	|ИЗ
	|	&ТаблицаОбеспечение КАК ТаблицаОбеспечение
	|ГДЕ
	|	ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 
	|				 ИСТИНА
	|			  ИЗ
	|			  	 ТаблицаРаспределение КАК ТаблицаРаспределение
	|			  ГДЕ
	|				 ТаблицаРаспределение.Ссылка = ТаблицаОбеспечение.Ссылка
	|				 И ТаблицаРаспределение.Подразделение = ТаблицаОбеспечение.Подразделение
	|				 И ТаблицаРаспределение.Номенклатура = ТаблицаОбеспечение.Номенклатура
	|				 И ТаблицаРаспределение.Характеристика = ТаблицаОбеспечение.Характеристика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспределение.Ссылка КАК Ссылка,
	|	ТаблицаРаспределение.Подразделение КАК Подразделение,
	|	ТаблицаРаспределение.Номенклатура КАК Номенклатура,
	|	ТаблицаРаспределение.Характеристика КАК Характеристика,
	|	ТаблицаРаспределение.Количество КАК Количество
	|ИЗ
	|	ТаблицаРаспределение КАК ТаблицаРаспределение");
	
	ТекстИсходнаяТаблица = "ТаблицаОбеспечение КАК ТаблицаОбеспечение
						   |	%1";
	ТекстИсходнаяТаблица = СтрШаблон(ТекстИсходнаяТаблица, "//&СоединениеШтучныйТоварВМернойЕдинице");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаОбеспечение КАК ТаблицаОбеспечение", ТекстИсходнаяТаблица);
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.Упаковка = Ложь;
	ПараметрыПрименения.КоличествоУпаковок = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Запрос.Текст, "ТаблицаОбеспечение", ПараметрыПрименения);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	ПоляОтбора = "Ссылка, Подразделение, Номенклатура, Характеристика";
	
	ВГраница = МассивРезультатов.ВГраница();	
	ТаблицаОбеспечение = МассивРезультатов[ВГраница - 1].Выгрузить();
	ТаблицаОбеспечение.Индексы.Добавить(ПоляОтбора);
	ТаблицаОбеспечение.Индексы.Добавить(ПоляОтбора + ", ШтучныйТоварВМерныхЕдиницах");
	ТаблицаОбеспечение.Индексы.Добавить(ПоляОтбора + ", ШтучныйТоварВМерныхЕдиницах, ЦеховаяКладовая");
	
	ТаблицаРаспределение = МассивРезультатов[ВГраница].Выгрузить();
	
	ТаблицаЭкономия = Документы.ЭтапПроизводства2_2.ПустаяСсылка().ЭкономияМатериалов.ВыгрузитьКолонки();
	ТаблицаЭкономия.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	ТаблицаЭкономия.Колонки.Добавить("НужноОкруглять", Новый ОписаниеТипов("Булево"));
	
	КоличествоСтрок = ТаблицаРаспределение.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок Цикл
		
		СтрокаТаблицыРаспределение = ТаблицаРаспределение[ИндексСтроки];
				
		Количество = СтрокаТаблицыРаспределение.Количество;
		КоличествоЦелаяЧасть = Цел(Количество);
		КоличествоДробнаяЧасть = Количество - КоличествоЦелаяЧасть;
		
		СтруктураОтбора = Новый Структура(ПоляОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыРаспределение);
			
		// 1. КоличествоЦелаяЧасть - ЦеховаяКладовая = ЛОЖЬ И ШтучныйТоварВМерныхЕдиницах = ИСТИНА				
		Если КоличествоЦелаяЧасть > 0 Тогда
			СтруктураОтбора.Вставить("ЦеховаяКладовая", Ложь);
			СтруктураОтбора.Вставить("ШтучныйТоварВМерныхЕдиницах", Истина);
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, КоличествоЦелаяЧасть);
		КонецЕсли;

		// 2. КоличествоДробнаяЧасть - ЦеховаяКладовая = ИСТИНА И ШтучныйТоварВМерныхЕдиницах = ИСТИНА
		Если КоличествоДробнаяЧасть > 0 Тогда
			СтруктураОтбора.Вставить("ЦеховаяКладовая", Истина);
			СтруктураОтбора.Вставить("ШтучныйТоварВМерныхЕдиницах", Истина);
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, КоличествоДробнаяЧасть);
		КонецЕсли;
		
		// 3. КоличествоДробнаяЧасть - ШтучныйТоварВМерныхЕдиницах = ЛОЖЬ
		Если КоличествоДробнаяЧасть > 0 Тогда
			СтруктураОтбора.Удалить("ЦеховаяКладовая");
			СтруктураОтбора.Вставить("ШтучныйТоварВМерныхЕдиницах", Ложь);
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, КоличествоДробнаяЧасть);
		КонецЕсли;		
		
		// 4. Количество
		Количество = КоличествоЦелаяЧасть + КоличествоДробнаяЧасть;
		Если Количество > 0 Тогда
			
			Если СтруктураОтбора.Свойство("ЦеховаяКладовая") Тогда
				СтруктураОтбора.Удалить("ЦеховаяКладовая");
			КонецЕсли;
			
			СтруктураОтбора.Удалить("ШтучныйТоварВМерныхЕдиницах");
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, Количество);
					
		КонецЕсли;		
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	КолонкиГруппировок = "Ссылка, Подразделение, Номенклатура, Характеристика, Получатель, Упаковка, Обособить, НужноОкруглять";
	ПроизводствоСервер.СвернутьТаблицуЗначений(ТаблицаЭкономия, КолонкиГруппировок, "Количество", Истина);
	
	ТаблицаЭкономия.ЗаполнитьЗначения(ДатаОперации, "ДатаОперации");
	
	СтруктураДейтсвий = Новый Структура;
	СтруктураДейтсвий.Вставить(
		"ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТаблицы Из ТаблицаЭкономия Цикл
		
		Если СтрокаТаблицы.НужноОкруглять И СтрокаТаблицы.Количество <> Цел(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;	
			
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДейтсвий, КэшированныеЗначения);
			
	КонецЦикла;	
	
	ТаблицаЭкономия.Колонки.Удалить("НужноОкруглять");
	
	Возврат ТаблицаЭкономия; 

КонецФункции

#КонецОбласти

#Область Назначения

// Возврашает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура - Этап производства, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		
		ШаблонНазначения.Партнер = Объект.Партнер;
		ШаблонНазначения.Договор = Объект.Договор;
		
		ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22;
		
	КонецЕсли;
	
	ШаблонНазначения.Заказ = Объект.Ссылка;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Возвращает шаблон для подбора назначения к давальческому производству.
//
// Параметры:
// 		Объект - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура - Этап производства, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначенияПоУмолчаниюДляПобочныхИзделий(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ШаблонНазначения.Партнер = Объект.Партнер;
	ШаблонНазначения.Договор = Объект.Договор;
	
	ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#Область ПартияПроизводства

Функция ПоляПартии(РеквизитыШапки, ОсновноеИзделие) Экспорт
	
	ДанныеЗаполнения = УправлениеПроизводствомПовтИсп.ДанныеЗаполненияНовойПартииПроизводства(
		РеквизитыШапки.Распоряжение,
		РеквизитыШапки.НазначениеПродукция); // ревизиты не меняются в процессе работы, наследуются из заказа на производство
	
	ПоляПартии = Справочники.ПартииПроизводства.ОписаниеПартииПроизводства();
	
	ПоляПартии.Документ = РеквизитыШапки.Распоряжение;
	ПоляПартии.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям;
	
	ПоляПартии.ТипПроцесса = РеквизитыШапки.ТипПроизводственногоПроцесса;
	ПоляПартии.Спецификация = РеквизитыШапки.Спецификация;
	
	ПоляПартии.Организация = ДанныеЗаполнения.Организация;
	ПоляПартии.ВидДеятельностиНДС = ДанныеЗаполнения.ВидДеятельностиНДС;
	
	ПоляПартии.Назначение = ДанныеЗаполнения.Назначение;
	ПоляПартии.НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
	
	ПоляПартии.ОсновноеИзделиеНоменклатура = ОсновноеИзделие.Номенклатура;
	ПоляПартии.ОсновноеИзделиеХарактеристика = ОсновноеИзделие.Характеристика;
	
	Если НЕ (ОсновноеИзделие.Свойство("ГруппаПродукции", ПоляПартии.ГруппаПродукции)
				ИЛИ ОсновноеИзделие.Свойство("ГруппаАналитическогоУчета", ПоляПартии.ГруппаПродукции)
			) И ЗначениеЗаполнено(ОсновноеИзделие.Номенклатура)
		Тогда
		ПоляПартии.ГруппаПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновноеИзделие.Номенклатура, "ГруппаАналитическогоУчета");
	КонецЕсли;
	
	Возврат ПоляПартии;
	
КонецФункции

// Выборка этапов для изменения партии (деление, сокращение, отмена) и их проверка
Функция ЭтапыПартииДляИзменения(ПартияПроизводства, ПослеЭтапа, Отказ, СообщенияОтказ)
	
	Таблица = Неопределено;
	
	Если ЗначениеЗаполнено(ПослеЭтапа) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Проведен                 КАК Проведен,
			|	ЭтапПроизводства2_2.НомерСледующегоЭтапа = 0 КАК ЭтоПоследнийЭтап
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|ГДЕ
			|	ЭтапПроизводства2_2.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка                                        КАК Ссылка,
			|	ЭтапПроизводства2_2.Номер                                         КАК Номер,
			|	НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска         КАК ДлительностьДоЗапуска,
			|	НормативныйГрафикЭтаповПроизводства.ДлительностьДоВыпуска         КАК ДлительностьДоВыпуска,
			|	ЭтапПроизводства2_2.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) КАК ВыполнениеНачато,
			|	ЭтапПроизводства2_2.ПроизводствоНаСтороне
			|		И ЭтапПроизводства2_2.ЗаказПереработчику <>
			|			ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)        КАК СозданЗаказПереработчику
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
			|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства2_2.ПартияПроизводства = &ПартияПроизводства
			|	И ЭтапПроизводства2_2.Проведен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Последователи.Ссылка                   КАК Ссылка,
			|	Последователи.Номер                    КАК Номер,
			|	Последователи.ВыполнениеНачато         КАК ВыполнениеНачато,
			|	Последователи.СозданЗаказПереработчику КАК СозданЗаказПереработчику
			|ИЗ
			|	ВТЭтапы КАК Этап
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК Последователи
			|		ПО Этап.ДлительностьДоВыпуска > Последователи.ДлительностьДоВыпуска
			|ГДЕ
			|	Этап.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Последователи.ДлительностьДоЗапуска");
		Запрос.УстановитьПараметр("Ссылка", ПослеЭтапа);
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		Если НЕ Выборка.Проведен Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				НСтр("ru = 'Выбранный этап не проведен, действие не может быть выполнено.';
					|en = 'Selected stage is not posted, action cannot be completed.'"));
			
		ИначеЕсли Выборка.ЭтоПоследнийЭтап Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				НСтр("ru = 'Выбран последний этап партии, действие не может быть выполнено.';
					|en = 'Last lot stage is selected, action cannot be completed.'"));
				
		Иначе
			
			Таблица = МассивРезультатов[2].Выгрузить();
			
			Если Таблица.Количество() = 0 Тогда
				
				Отказ = Истина;
				СообщенияОтказ.Добавить(
					НСтр("ru = 'Отсутствуют этапы партии для выполнения действия.';
						|en = 'There are no lot stages to complete the action.'"));
				
			ИначеЕсли Таблица.Найти(Истина, "ВыполнениеНачато") <> Неопределено Тогда
				
				Отказ = Истина;
				СообщенияОтказ.Добавить(
					НСтр("ru = 'Выполнение партии после выбранного этапа начато, действие не может быть выполнено.';
						|en = 'Lot completion after selected stage is started, action cannot be completed.'"));
				
			ИначеЕсли Таблица.Найти(Истина, "СозданЗаказПереработчику") <> Неопределено Тогда
				
				Отказ = Истина;
				СообщенияОтказ.Добавить(
					СтрШаблон(
						НСтр("ru = 'Для этапа %1 создан заказ переработчику, действие не может быть выполнено.';
							|en = '""Purchase order — Subcontracting"" is created for the stage %1, action cannot be completed.'"),
						Таблица.Найти(Истина, "СозданЗаказПереработчику").Номер));
			
			Иначе
				
				Вершина = Документы.ЭтапПроизводства2_2.ГрафЦепочкиЭтапов(
					ПартияПроизводства,
					УправлениеПроизводством.НаправлениеОбходаГрафаВперед()).Найти(ПослеЭтапа, "Ссылка");
		
				Если Вершина <> Неопределено Тогда
					
					Окружение = УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
					
					Если Окружение.Количество() <> Таблица.Количество() Тогда
						Отказ = Истина;
						СообщенияОтказ.Добавить(
							НСтр("ru = 'В выбранной точке производственного процесса имеются параллельные маршруты выполнения,
								|действие не может быть выполнено.';
								|en = 'There are parallel execution routes at the selected production process point, 
								|the action cannot be completed.'"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка                                        КАК Ссылка,
			|	ЭтапПроизводства2_2.Номер                                         КАК Номер,
			|	ЭтапПроизводства2_2.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) КАК ВыполнениеНачато,
			|	ЭтапПроизводства2_2.ПроизводствоНаСтороне
			|		И ЭтапПроизводства2_2.ЗаказПереработчику <>
			|			ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)        КАК СозданЗаказПереработчику
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства2_2.ПартияПроизводства = &ПартияПроизводства
			|	И ЭтапПроизводства2_2.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	НормативныйГрафик.ДлительностьДоЗапуска");
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Если Таблица.Количество() = 0 Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				НСтр("ru = 'Отсутствуют этапы партии для выполнения действия.';
					|en = 'There are no lot stages to complete the action.'"));
			
		ИначеЕсли Таблица.Найти(Истина, "ВыполнениеНачато") <> Неопределено Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				НСтр("ru = 'Выполнение партии начато, действие не может быть выполнено.';
					|en = 'The lot completion is started, the action cannot be completed.'"));
		
		ИначеЕсли Таблица.Найти(Истина, "СозданЗаказПереработчику") <> Неопределено Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				СтрШаблон(
					НСтр("ru = 'Для этапа %1 создан заказ переработчику, действие не может быть выполнено.';
						|en = '""Purchase order — Subcontracting"" is created for the stage %1, action cannot be completed.'"),
					Таблица.Найти(Истина, "СозданЗаказПереработчику").Номер));
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(Отказ ИЛИ Таблица = Неопределено,
		Неопределено,
		Таблица.ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

// Возвращает данные этапов для изменения партий
//
// Параметры:
//  Ссылки - Массив из ДокументСсылка.ЭтапПроизводства2_2
//  ПолучитьДанныеДополнения - Булево
//  ПолучитьДанныеПересчета - Булево
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ДанныеДополнения -
//   * ДанныеПересчета - Структура - содержит:
//     ** Реквизиты - ТаблицаЗначений - содержит:
//         *** Ссылка - ДокументСсылка - 
//
Функция ДанныеЭтаповДляИзмененияПартий(Ссылки, ПолучитьДанныеДополнения, ПолучитьДанныеПересчета)
	
	// ДанныеДополнения содержат ограниченный перечень полей для дополнения данных спецификации
	// с целью сохранения важных изменений - выбранные варианты обеспечения, склады, исполнители работ и пр.
	// Индексируются по полям, по которым происходит сопоставление с данными спецификации.
	
	// ДанныеПересчета используются для пересчета данных этапов по коэффициенту (в том числе создания новых
	// документов на измененное количество). Содержат полный перечень данных документов и их ТЧ.
	// Индексируются по ссылке.
	
	// Обе коллекции содержат общие таблицы с сериями выходных и побочных изделий.
	
	Результат = Новый Структура("ДанныеДополнения, ДанныеПересчета", Неопределено, Неопределено);
	
	Если ПолучитьДанныеДополнения Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка КАК Ссылка,
			|	ЭтапПроизводства2_2.Этап КАК Этап,
			|	ЭтапПроизводства2_2.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ЭтапПроизводства2_2.НеОтгружатьЧастями КАК НеОтгружатьЧастями
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|ГДЕ
			|	ЭтапПроизводства2_2.Ссылка В(&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка.Этап КАК Этап,
			|	ОбеспечениеМатериаламиИРаботами.Подразделение КАК ПодразделениеЭтапа,
			|	ОбеспечениеМатериаламиИРаботами.Ссылка КАК Ссылка,
			|	ОбеспечениеМатериаламиИРаботами.НомерСтроки КАК НомерСтроки,
			|	ОбеспечениеМатериаламиИРаботами.КлючСвязиСпецификация КАК КлючСвязи,
			|	ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Номенклатура,
			|	ОбеспечениеМатериаламиИРаботами.Характеристика КАК Характеристика,
			|	ОбеспечениеМатериаламиИРаботами.Серия КАК Серия,
			|	ОбеспечениеМатериаламиИРаботами.Количество КАК Количество,
			|	ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения КАК ВариантОбеспечения,
			|	ОбеспечениеМатериаламиИРаботами.Обособленно КАК Обособленно,
			|	ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ОбеспечениеМатериаламиИРаботами.Склад КАК Склад,
			|	ОбеспечениеМатериаламиИРаботами.Производится КАК Производится,
			|	ОбеспечениеМатериаламиИРаботами.Спецификация КАК Спецификация,
			|	ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции КАК СтатьяКалькуляции
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|ГДЕ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка В(&Ссылки)
			|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделия.Ссылка.Этап КАК Этап,
			|	ВыходныеИзделия.Подразделение КАК ПодразделениеЭтапа,
			|	ВыходныеИзделия.Подразделение КАК Подразделение,
			|	ВыходныеИзделия.Ссылка КАК Ссылка,
			|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
			|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
			|	ВыходныеИзделия.Характеристика КАК Характеристика,
			|	ВыходныеИзделия.Получатель КАК Получатель,
			|	ВыходныеИзделия.Назначение КАК Назначение,
			|	ВыходныеИзделия.ЭтапПотребитель КАК ЭтапПотребитель,
			|	ВыходныеИзделия.Произведено КАК Произведено,
			|	ВыходныеИзделия.ДатаПроизводства КАК ДатаПроизводства,
			|	ВыходныеИзделия.Количество КАК Количество,
			|	ВыходныеИзделия.Серия КАК Серия,
			|	ВыходныеИзделия.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
			|	ВыходныеИзделия.ДоляСтоимостиНаЕдиницу КАК ДоляСтоимостиНаЕдиницу,
			|	ВыходныеИзделия.СписатьНаРасходы КАК СписатьНаРасходы,
			|	ВыходныеИзделия.СтатьяРасходов КАК СтатьяРасходов,
			|	ВыходныеИзделия.АналитикаРасходов КАК АналитикаРасходов,
			|	ВыходныеИзделия.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
			|	ВыходныеИзделия.ОформитьОтчетДавальцу КАК ОформитьОтчетДавальцу,
			|	ВыходныеИзделия.ОбработатьПоСпецификации КАК ОбработатьПоСпецификации,
			|	ВыходныеИзделия.Спецификация КАК Спецификация,
			|	ВыходныеИзделия.Ссылка.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|ГДЕ
			|	ВыходныеИзделия.Ссылка В(&Ссылки)
			|	И НЕ ВыходныеИзделия.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделияСерии.Ссылка.Этап КАК Этап,
			|	ВыходныеИзделияСерии.Ссылка КАК Ссылка,
			|	ВыходныеИзделияСерии.Подразделение КАК Подразделение,
			|	ВыходныеИзделияСерии.НомерСтроки КАК НомерСтроки,
			|	ВыходныеИзделияСерии.Номенклатура КАК Номенклатура,
			|	ВыходныеИзделияСерии.Характеристика КАК Характеристика,
			|	ВыходныеИзделияСерии.Получатель КАК Получатель,
			|	ВыходныеИзделияСерии.Назначение КАК Назначение,
			|	ВыходныеИзделияСерии.Произведено КАК Произведено,
			|	ВыходныеИзделияСерии.ДатаПроизводства КАК ДатаПроизводства,
			|	ВыходныеИзделияСерии.Количество КАК Количество,
			|	ВыходныеИзделияСерии.Серия КАК Серия
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ВыходныеИзделияСерии
			|ГДЕ
			|	ВыходныеИзделияСерии.Ссылка В(&Ссылки)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделия.Ссылка.Этап КАК Этап,
			|	ПобочныеИзделия.Подразделение КАК ПодразделениеЭтапа,
			|	ПобочныеИзделия.Подразделение КАК Подразделение,
			|	ПобочныеИзделия.Ссылка КАК Ссылка,
			|	ПобочныеИзделия.НомерСтроки КАК НомерСтроки,
			|	ПобочныеИзделия.Номенклатура КАК Номенклатура,
			|	ПобочныеИзделия.Характеристика КАК Характеристика,
			|	ПобочныеИзделия.Получатель КАК Получатель,
			|	ПобочныеИзделия.Назначение КАК Назначение,
			|	ПобочныеИзделия.ЭтапПотребитель КАК ЭтапПотребитель,
			|	ПобочныеИзделия.Произведено КАК Произведено,
			|	ПобочныеИзделия.ДатаПроизводства КАК ДатаПроизводства,
			|	ПобочныеИзделия.Количество КАК Количество,
			|	ПобочныеИзделия.Серия КАК Серия,
			|	ПобочныеИзделия.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	ПобочныеИзделия.СписатьНаРасходы КАК СписатьНаРасходы,
			|	ПобочныеИзделия.СтатьяРасходов КАК СтатьяРасходов,
			|	ПобочныеИзделия.АналитикаРасходов КАК АналитикаРасходов,
			|	ПобочныеИзделия.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
			|	ПобочныеИзделия.СтатьяКалькуляции КАК СтатьяКалькуляции,
			|	ПобочныеИзделия.ОформитьОтчетДавальцу КАК ОформитьОтчетДавальцу,
			|	ПобочныеИзделия.ОбработатьПоСпецификации КАК ОбработатьПоСпецификации,
			|	ПобочныеИзделия.Спецификация КАК Спецификация
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
			|ГДЕ
			|	ПобочныеИзделия.Ссылка В(&Ссылки)
			|	И НЕ ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА 
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Т
			|		ГДЕ
			|			Т.Ссылка = ПобочныеИзделия.Ссылка
			|			И Т.Номенклатура = ПобочныеИзделия.Номенклатура
			|			И Т.Характеристика = ПобочныеИзделия.Характеристика
			|			И Т.ЭтапПотребитель В (&Ссылки))
			|	И НЕ ПобочныеИзделия.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделияСерии.Ссылка.Этап КАК Этап,
			|	ПобочныеИзделияСерии.Ссылка КАК Ссылка,
			|	ПобочныеИзделияСерии.Подразделение КАК Подразделение,
			|	ПобочныеИзделияСерии.НомерСтроки КАК НомерСтроки,
			|	ПобочныеИзделияСерии.Номенклатура КАК Номенклатура,
			|	ПобочныеИзделияСерии.Характеристика КАК Характеристика,
			|	ПобочныеИзделияСерии.Получатель КАК Получатель,
			|	ПобочныеИзделияСерии.Назначение КАК Назначение,
			|	ПобочныеИзделияСерии.Произведено КАК Произведено,
			|	ПобочныеИзделияСерии.ДатаПроизводства КАК ДатаПроизводства,
			|	ПобочныеИзделияСерии.Количество КАК Количество,
			|	ПобочныеИзделияСерии.Серия КАК Серия
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ПобочныеИзделияСерии
			|ГДЕ
			|	ПобочныеИзделияСерии.Ссылка В(&Ссылки)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Трудозатраты.Ссылка.Этап КАК Этап,
			|	Трудозатраты.Подразделение КАК ПодразделениеЭтапа,
			|	Трудозатраты.Ссылка КАК Ссылка,
			|	Трудозатраты.НомерСтроки КАК НомерСтроки,
			|	Трудозатраты.ВидРабот КАК ВидРабот,
			|	Трудозатраты.Исполнитель КАК Исполнитель,
			|	Трудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
			|	Трудозатраты.Количество КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
			|ГДЕ
			|	Трудозатраты.Ссылка В(&Ссылки)
			|	И НЕ Трудозатраты.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки");
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		МассивРезультатов = Запрос.ВыполнитьПакет();  
		
		ДанныеДополнения = Новый Структура;
		
		Таблица = МассивРезультатов[0].Выгрузить();
		Таблица.Индексы.Добавить("Этап");
		ДанныеДополнения.Вставить("Реквизиты", Таблица);
		
		Таблица = МассивРезультатов[1].Выгрузить();
		Таблица.Индексы.Добавить("Номенклатура, Характеристика, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ОбеспечениеМатериаламиИРаботами", Таблица);
		
		Таблица = МассивРезультатов[2].Выгрузить();
		Таблица.Индексы.Добавить("Номенклатура, Характеристика, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ВыходныеИзделия", Таблица);
		
		Таблица = МассивРезультатов[3].Выгрузить();
		Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ВыходныеИзделияСерии", Таблица);
		
		Таблица = МассивРезультатов[4].Выгрузить();
		Таблица.Индексы.Добавить("Номенклатура, Характеристика, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ПобочныеИзделия", Таблица);
		
		Таблица = МассивРезультатов[5].Выгрузить();
		Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ПобочныеИзделияСерии", Таблица);
		
		Таблица = МассивРезультатов[6].Выгрузить();
		Таблица.Индексы.Добавить("ВидРабот, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("Трудозатраты", Таблица);
		
		Результат.ДанныеДополнения = ДанныеДополнения;
		
	КонецЕсли;
	
	Если ПолучитьДанныеПересчета Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства2_2.Ссылка В(&Ссылки)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НормативныйГрафик.ДлительностьДоЗапуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбеспечениеМатериаламиИРаботами.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|ГДЕ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделия.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|ГДЕ
			|	ВыходныеИзделия.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделия.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
			|ГДЕ
			|	ПобочныеИзделия.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Трудозатраты.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
			|ГДЕ
			|	Трудозатраты.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыРабочихЦентров.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ВидыРабочихЦентров
			|ГДЕ
			|	ВидыРабочихЦентров.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АльтернативныеВидыРабочихЦентров.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК АльтернативныеВидыРабочихЦентров
			|ГДЕ
			|	АльтернативныеВидыРабочихЦентров.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Последователи.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Последователи КАК Последователи
			|ГДЕ
			|	Последователи.Ссылка В (&Ссылки)";
		
		Если НЕ ПолучитьДанныеДополнения Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделияСерии.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ВыходныеИзделияСерии
			|ГДЕ
			|	ВыходныеИзделияСерии.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделияСерии.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ПобочныеИзделияСерии
			|ГДЕ
			|	ПобочныеИзделияСерии.Ссылка В (&Ссылки)";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		МассивРезультатов = Запрос.ВыполнитьПакет();  
		
		ДанныеПересчета = Новый Структура;
		ДанныеПересчета.Вставить("Реквизиты", МассивРезультатов[0].Выгрузить());
		ДанныеПересчета.Реквизиты.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ОбеспечениеМатериаламиИРаботами", МассивРезультатов[1].Выгрузить());
		ДанныеПересчета.ОбеспечениеМатериаламиИРаботами.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ВыходныеИзделия", МассивРезультатов[2].Выгрузить());
		ДанныеПересчета.ВыходныеИзделия.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ПобочныеИзделия", МассивРезультатов[3].Выгрузить());
		ДанныеПересчета.ПобочныеИзделия.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("Трудозатраты", МассивРезультатов[4].Выгрузить());
		ДанныеПересчета.Трудозатраты.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ВидыРабочихЦентров", МассивРезультатов[5].Выгрузить());
		ДанныеПересчета.ВидыРабочихЦентров.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("АльтернативныеВидыРабочихЦентров", МассивРезультатов[6].Выгрузить());
		ДанныеПересчета.АльтернативныеВидыРабочихЦентров.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("Последователи", МассивРезультатов[7].Выгрузить());
		ДанныеПересчета.Последователи.Индексы.Добавить("Ссылка");
		
		Если ПолучитьДанныеДополнения Тогда
			
			ДанныеПересчета.Вставить("ВыходныеИзделияСерии", Результат.ДанныеДополнения.ВыходныеИзделияСерии);
			ДанныеПересчета.Вставить("ПобочныеИзделияСерии", Результат.ДанныеДополнения.ПобочныеИзделияСерии);
			
		Иначе
			
			Таблица = МассивРезультатов[8].Выгрузить();
			Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
			ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
			ДанныеПересчета.Вставить("ВыходныеИзделияСерии", Таблица);
			
			Таблица = МассивРезультатов[9].Выгрузить();
			Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
			ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
			ДанныеПересчета.Вставить("ПобочныеИзделияСерии", Таблица);
			
		КонецЕсли;
		
		Результат.ДанныеПересчета = ДанныеПересчета;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьДанныеЭтаповНаДанныеСпецификации(ДанныеЭтапов, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	// Этапы
	ДанныеСпецификации.Этапы.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	ДанныеСпецификации.Этапы.Колонки.Добавить("НеОтгружатьЧастями", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
		НайденнаяСтрока = ДанныеЭтапов.Реквизиты.Найти(Строка.Этап, "Этап");
		Если НайденнаяСтрока = Неопределено Тогда
			Строка.НеОтгружатьЧастями = Истина;
		Иначе
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, "ДатаОтгрузки, НеОтгружатьЧастями");
		КонецЕсли;
	КонецЦикла;
	
	// Материалы
	ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ПодразделениеЭтапа");
	СписокКолонок = "Серия,ВариантОбеспечения,Обособленно,Склад,Производится,Спецификация,СтатьяКалькуляции"; // ДатаОтгрузки заполняется условно
	
	Пока Индекс < ДанныеСпецификации.МатериалыИУслуги.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.МатериалыИУслуги[Индекс];
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами, СтруктураПоиска, Истина);
		
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			ЗаполнитьДатуОтгрузки = НЕ ДанныеСпецификации.Этапы.Найти(СтрокаРС.Этап, "Этап").НеОтгружатьЧастями;
			
			СтрокиРазличаются = СтрокаРС.ВариантОбеспечения <> СтрокаЭ.ВариантОбеспечения
				ИЛИ СтрокаРС.Обособленно <> СтрокаЭ.Обособленно
				ИЛИ СтрокаРС.Склад <> СтрокаЭ.Склад
				ИЛИ СтрокаРС.Производится <> СтрокаЭ.Производится
				ИЛИ СтрокаРС.Спецификация <> СтрокаЭ.Спецификация
				ИЛИ СтрокаРС.СтатьяКалькуляции <> СтрокаЭ.СтатьяКалькуляции
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Серия)
				ИЛИ ЗаполнитьДатуОтгрузки И ЗначениеЗаполнено(СтрокаЭ.ДатаОтгрузки);
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
					
					НоваяСтрока = ДанныеСпецификации.МатериалыИУслуги.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					Если ЗаполнитьДатуОтгрузки Тогда
						НоваяСтрока.ДатаОтгрузки = СтрокаЭ.ДатаОтгрузки;
					КонецЕсли;
					НоваяСтрока.Количество = КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРС, СтруктураДействий, КэшированныеЗначения);
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
					Если ЗаполнитьДатуОтгрузки Тогда
						СтрокаРС.ДатаОтгрузки = СтрокаЭ.ДатаОтгрузки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	// Выходные изделия
	СтруктураПоискаСерии = Новый Структура("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	ТипыСтатья = Новый Массив;
	ТипыСтатья.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТипыСтатья.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("Получатель", Новый ОписаниеТипов(ТипыПолучатель));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов(ТипыСтатья));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("АналитикаАктивовПассивов", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("ОформитьОтчетДавальцу", Новый ОписаниеТипов("Булево"));
	
	ДанныеСпецификации.ВыходныеИзделия.ЗагрузитьКолонку(
		ДанныеСпецификации.ВыходныеИзделия.ВыгрузитьКолонку("Склад"), "Получатель");
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ПодразделениеЭтапа");
	СписокКолонок = "Получатель,Назначение,ЭтапПотребитель,Серия,ДоляСтоимостиНаЕдиницу,СписатьНаРасходы,СтатьяРасходов,АналитикаРасходов,АналитикаАктивовПассивов,ОформитьОтчетДавальцу,ОбработатьПоСпецификации,Спецификация";
	
	Пока Индекс < ДанныеСпецификации.ВыходныеИзделия.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.ВыходныеИзделия[Индекс];
		СтрокаРС.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка(); // тип статьи по умолчанию
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ВыходныеИзделия, СтруктураПоиска, Истина);
		
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			СтрокиРазличаются = СтрокаРС.Получатель <> СтрокаЭ.Получатель
				ИЛИ СтрокаРС.ОбработатьПоСпецификации <> СтрокаЭ.ОбработатьПоСпецификации
				ИЛИ СтрокаРС.Спецификация <> СтрокаЭ.Спецификация
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Назначение)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.ЭтапПотребитель)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Серия)
				ИЛИ СтрокаЭ.СписатьНаРасходы
				ИЛИ СтрокаЭ.ОформитьОтчетДавальцу;
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
				
					НоваяСтрока = ДанныеСпецификации.ВыходныеИзделия.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					НоваяСтрока.Количество = КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРС, СтруктураДействий, КэшированныеЗначения);
					
					ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
						НоваяСтрока, СтрокаРС, СтрокаЭ.СпособРаспределенияЗатратНаВыходныеИзделия);
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЭ.СтатусУказанияСерий <> 0 Тогда
				
				ОстатокСерии = КоличествоЗачет;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаЭ);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ВыходныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаС Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаС.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ВыходныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаС,, "Количество,Этап");
					НоваяСтрока.Количество = Мин(ОстатокСерии, СтрокаС.Количество);
					НоваяСтрока.Этап = СтрокаРС.Этап;
					
					СтрокаС.Количество = СтрокаС.Количество - НоваяСтрока.Количество;
					
					ОстатокСерии = ОстатокСерии - НоваяСтрока.Количество;
					Если ОстатокСерии = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Побочные изделия
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("Получатель", Новый ОписаниеТипов(ТипыПолучатель));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов(ТипыСтатья));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("АналитикаАктивовПассивов", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("ОформитьОтчетДавальцу", Новый ОписаниеТипов("Булево"));
	
	ДанныеСпецификации.ВозвратныеОтходы.ЗагрузитьКолонку(
		ДанныеСпецификации.ВозвратныеОтходы.ВыгрузитьКолонку("Склад"), "Получатель");
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ПодразделениеЭтапа");
	СписокКолонок = "Получатель,Назначение,ЭтапПотребитель,Серия,СтатьяКалькуляции,СписатьНаРасходы,СтатьяРасходов,АналитикаРасходов,АналитикаАктивовПассивов,ОформитьОтчетДавальцу,ОбработатьПоСпецификации,Спецификация";
	
	Пока Индекс < ДанныеСпецификации.ВозвратныеОтходы.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.ВозвратныеОтходы[Индекс];
		СтрокаРС.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка(); // тип статьи по умолчанию
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ПобочныеИзделия, СтруктураПоиска, Истина);
		
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			СтрокиРазличаются = СтрокаРС.Получатель <> СтрокаЭ.Получатель
				ИЛИ СтрокаРС.СтатьяКалькуляции <> СтрокаЭ.СтатьяКалькуляции
				ИЛИ СтрокаРС.ОбработатьПоСпецификации <> СтрокаЭ.ОбработатьПоСпецификации
				ИЛИ СтрокаРС.Спецификация <> СтрокаЭ.Спецификация
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Назначение)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.ЭтапПотребитель)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Серия)
				ИЛИ СтрокаЭ.СписатьНаРасходы
				ИЛИ СтрокаЭ.ОформитьОтчетДавальцу;
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
					
					НоваяСтрока = ДанныеСпецификации.ВозвратныеОтходы.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					НоваяСтрока.Количество = КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРС, СтруктураДействий, КэшированныеЗначения);
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЭ.СтатусУказанияСерий <> 0 Тогда
				
				ОстатокСерии = КоличествоЗачет;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаЭ);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ПобочныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаС Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаС.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ПобочныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаС,, "Количество, Этап");
					НоваяСтрока.Количество = Мин(ОстатокСерии, СтрокаС.Количество);
					НоваяСтрока.Этап = СтрокаРС.Этап;
					
					СтрокаС.Количество = СтрокаС.Количество - НоваяСтрока.Количество;
					
					ОстатокСерии = ОстатокСерии - НоваяСтрока.Количество;
					Если ОстатокСерии = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Трудозатраты
	ТипыИсполнитель = Новый Массив;
	ТипыИсполнитель.Добавить(Тип("СправочникСсылка.Бригады"));
	ТипыИсполнитель.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ДанныеСпецификации.Трудозатраты.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов(ТипыИсполнитель));
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("ВидРабот, ПодразделениеЭтапа");
	СписокКолонок = "Исполнитель,СтатьяКалькуляции";
		
	Пока Индекс < ДанныеСпецификации.Трудозатраты.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.Трудозатраты[Индекс];
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.Трудозатраты, СтруктураПоиска, Истина);
		
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			СтрокиРазличаются = СтрокаРС.СтатьяКалькуляции <> СтрокаЭ.СтатьяКалькуляции
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Исполнитель);
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
					
					НоваяСтрока = ДанныеСпецификации.Трудозатраты.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					НоваяСтрока.Количество = КоличествоЗачет;
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Свертка серий
	Если ВыходныеИзделияСерии.Количество() <> 0 Тогда
		
		Колонки = "";
		Для каждого Колонка Из ВыходныеИзделияСерии.Колонки Цикл
			Если Колонка.Имя <> "Количество" Тогда
				Колонки = Колонки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		Колонки = Колонки + "Этап";
		
		ВыходныеИзделияСерии.Свернуть(Колонки, "Количество");
		
	КонецЕсли;
	Если ПобочныеИзделияСерии.Количество() <> 0 Тогда
		
		Колонки = "";
		Для каждого Колонка Из ПобочныеИзделияСерии.Колонки Цикл
			Если Колонка.Имя <> "Количество" Тогда
				Колонки = Колонки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		Колонки = Колонки + "Этап";
		
		ПобочныеИзделияСерии.Свернуть(Колонки, "Количество");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменитьРазмерПартииВЭтапах(ДанныеПартии, РазмерПартии, Ссылки, ДанныеЭтапов, ПересчитатьПоКоэффициенту, Отказ, СообщенияОтказ)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	
	// Получение и проверка данных спецификации
	Если Не ПересчитатьПоКоэффициенту Тогда
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартии,
			"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Спецификация, Номенклатура, Характеристика");
		ДанныеПоНоменклатуре.Количество = РазмерПартии.Количество;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
			МенеджерВременныхТаблиц,
			ДанныеПартии.Распоряжение);
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(, МенеджерВременныхТаблиц);
		ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
		
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки);
		
		Справочники.РесурсныеСпецификации.ПроверитьРазмерПартии(
			ДанныеСпецификации, РазмерПартии.Количество, Отказ, СообщенияОтказ);
		Если Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	// При разветвлении документов будет оставлен только один документ для каждого этапа РС
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	ЭтапПроизводства.Этап       КАК Этап,
		|	ЭтапПроизводства.Ссылка     КАК Ссылка,
		|	ЭтапПроизводства.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
		|ГДЕ
		|	ЭтапПроизводства.Ссылка В (&Ссылки)
		|	И ЭтапПроизводства.Этап В
		|		(ВЫБРАТЬ
		|			Т.Этап КАК Этап
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2 КАК Т
		|		ГДЕ
		|			Т.Ссылка В (&Ссылки)
		|			И Т.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|		СГРУППИРОВАТЬ ПО
		|			Т.Этап
		|		ИМЕЮЩИЕ
		|			КОЛИЧЕСТВО(Т.Ссылка) > 1)
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|ИТОГИ ПО
		|	Этап");
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	ВыборкаСсылкиУдалить = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СсылкиУдалить = Новый Массив;
	СтруктураПоиска = Новый Структура("ЭтапПотребитель");
	Пока ВыборкаСсылкиУдалить.Следующий() Цикл
		
		Ссылка = Документы.ЭтапПроизводства2_2.ПустаяСсылка();
		Назначение = Справочники.Назначения.ПустаяСсылка();
		
		Выборка = ВыборкаСсылкиУдалить.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Ссылка.Пустая() Тогда
				Ссылка = Выборка.Ссылка; // Первый документ в выборке не удаляется
				Назначение = Выборка.Назначение;
				Продолжить;
			КонецЕсли;
			
			// Корректировка данных этапов - исключение и замена ссылок на удаляемый этап
			НайденнаяСтрока = ДанныеЭтапов.Реквизиты.Найти(Выборка.Ссылка, "Ссылка");
			Если НайденнаяСтрока <> Неопределено Тогда
				ДанныеЭтапов.Реквизиты.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
			СтруктураПоиска.ЭтапПотребитель = Выборка.Ссылка;
			Для каждого Строка Из ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
				Строка.ЭтапПотребитель = Ссылка;
				Строка.Назначение = Назначение;
			КонецЦикла;
			Для каждого Строка Из ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
				Строка.ЭтапПотребитель = Ссылка;
				Строка.Назначение = Назначение;
			КонецЦикла;
			
			// Удаление документа
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			// Обновление коллекций
			Результат.ЭтапУдален.Добавить(Выборка.Ссылка);
			СсылкиУдалить.Добавить(Выборка.Ссылка);
			Ссылки.Удалить(Ссылки.Найти(Выборка.Ссылка));
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Изменение этапов партии
	Если ПересчитатьПоКоэффициенту Тогда
		
		Для каждого Этап Из ДанныеЭтапов.Реквизиты Цикл
			
			Если Этап.КоличествоУпаковокПлан = 0 Тогда
				Коэффициент = 1;
			Иначе
				Если Этап.УпаковкаПлан = РазмерПартии.Упаковка Тогда
					Коэффициент = РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
				Иначе
					КоэффициентПартии = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
						РазмерПартии.Упаковка,
						ДанныеПартии.ОсновноеИзделиеНоменклатура);
					КоэффициентЭтапа = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
						Этап.УпаковкаПлан,
						ДанныеПартии.ОсновноеИзделиеНоменклатура);
					Коэффициент = КоэффициентПартии / КоэффициентЭтапа
						* РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
				КонецЕсли;
			КонецЕсли;
			
			ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Этап.Ссылка, Коэффициент);
			
			РеквизитыШапки = Новый Структура;
			РеквизитыШапки.Вставить("КоличествоУпаковокПлан", РазмерПартии.КоличествоУпаковок);
			РеквизитыШапки.Вставить("УпаковкаПлан", РазмерПартии.Упаковка);
			РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент, 3));
			ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
			
			ДокументОбъект = Этап.Ссылка.ПолучитьОбъект();
			
			Если СсылкиУдалить.ВГраница() <> -1
				И ДокументОбъект.Последователи.Количество() > 0 Тогда
				
				Последователи = Новый Массив;
				Для каждого Строка Из ДокументОбъект.Последователи Цикл
					Если СсылкиУдалить.Найти(Строка.Этап) = Неопределено
						И Строка.ТипСвязи = ТипСвязиПоследователь() Тогда
						Последователи.Добавить(Строка.Этап);
					КонецЕсли;
				КонецЦикла;
				
				ЗначенияЗаполнения.Вставить("Последователи", Последователи);
				
			КонецЕсли;
			
			ДокументОбъект.Заполнить(ЗначенияЗаполнения);
			
			Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			КонецЕсли;
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ПровестиСПонижениемСтатуса(ДокументОбъект);
			
			Результат.ЭтапИзменен.Добавить(Этап.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		// Дополнение данных спецификации
		ДанныеСпецификации.МатериалыИУслуги.Колонки.КлючСвязи.Имя = "КлючСвязиСпецификация";
		ДанныеСпецификации.ВидыРабочихЦентров.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		ДанныеСпецификации.ВидыРабочихЦентров.ЗаполнитьЗначения(Истина, "Использовать");
		
		// Выборка и распределение отклонений от нормативов
		ВыходныеИзделияСерии = Новый ТаблицаЗначений;
		Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ВыходныеИзделияСерии.Реквизиты Цикл
			ВыходныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		ВыходныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ПобочныеИзделияСерии = ВыходныеИзделияСерии.СкопироватьКолонки();
		
		РаспределитьДанныеЭтаповНаДанныеСпецификации(
			ДанныеЭтапов, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии);
		
		ДанныеСпецификации.ВыходныеИзделия.Колонки.ПодразделениеЭтапа.Имя = "Подразделение";
		ДанныеСпецификации.ВозвратныеОтходы.Колонки.ПодразделениеЭтапа.Имя = "Подразделение";
		
		// Связывание данных по выпуску ПФ на этапе
		СтруктураПоиска = Новый Структура("СпособПолученияМатериала, СпецификацияРемонта",
			Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе,
			Справочники.РесурсныеСпецификации.ПустаяСсылка());
		Потребности = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
		
		Если Потребности.ВГраница() <> -1 Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭтапПроизводства2_2.Этап       КАК Этап,
				|	ЭтапПроизводства2_2.Ссылка     КАК Ссылка,
				|	ЭтапПроизводства2_2.Назначение КАК Назначение
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
				|ГДЕ
				|	ЭтапПроизводства2_2.Ссылка В(&Ссылки)
				|	И НЕ ЭтапПроизводства2_2.Ссылка В (&СсылкиУдалить)";
			Запрос.УстановитьПараметр("Ссылки", Ссылки);
			Запрос.УстановитьПараметр("СсылкиУдалить", СсылкиУдалить);
			ТаблицаСоответствий = Запрос.Выполнить().Выгрузить(); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Этап");
			СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			
			Для каждого Строка Из Потребности Цикл
				
				СтрокаСсылки = ТаблицаСоответствий.Найти(Строка.Этап, "Этап");
				Если СтрокаСсылки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Остаток = Строка.Количество;
				
				СтруктураПоиска.Номенклатура = Строка.Номенклатура;
				СтруктураПоиска.Характеристика = Строка.Характеристика;
				СтруктураПоиска.Этап = Строка.ИсточникПолученияПолуфабриката;
				
				Для каждого СтрокаВыпуск Из ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска) Цикл
					
					Если СтрокаВыпуск.Количество > Остаток Тогда
						НоваяСтрока = ДанныеСпецификации.ВозвратныеОтходы.Вставить(
							ДанныеСпецификации.ВозвратныеОтходы.Индекс(СтрокаВыпуск)+1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуск);
						НоваяСтрока.Количество = Остаток;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
						
						СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - Остаток;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаВыпуск, СтруктураДействий, КэшированныеЗначения);
						
						СтрокаЗаполнить = НоваяСтрока;
					Иначе
						СтрокаЗаполнить = СтрокаВыпуск;
					КонецЕсли;
					
					СтрокаЗаполнить.Получатель = ?(Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа,
						Строка.Подразделение,
						Строка.Склад);
					СтрокаЗаполнить.Назначение = СтрокаСсылки.Назначение;
					СтрокаЗаполнить.ЭтапПотребитель = СтрокаСсылки.Ссылка;
					
					Остаток = Остаток - СтрокаЗаполнить.Количество;
					Если Остаток = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
					
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение документов
		СтруктураПоискаЭтап = Новый Структура("Этап");
		
		СтруктураДействий = Новый Структура();
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Для каждого Ссылка Из Ссылки Цикл
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
			ДанныеЭтапа = ?(ДокументОбъект.Этап.Пустая(),
				Неопределено,
				ДанныеСпецификации.Этапы.Найти(ДокументОбъект.Этап, "Этап"));
			
			Если ДанныеЭтапа = Неопределено Тогда
				
				// Этап создан вручную либо отсутствует в актуальных данных РС
				Если ДокументОбъект.КоличествоУпаковокПлан <> 0 Тогда
					
					Коэффициент = 1;
					Если ДокументОбъект.УпаковкаПлан = РазмерПартии.Упаковка Тогда
						Коэффициент = РазмерПартии.КоличествоУпаковок / ДокументОбъект.КоличествоУпаковокПлан;
					Иначе
						КоэффициентПартии = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
							РазмерПартии.Упаковка, ДанныеПартии.ОсновноеИзделиеНоменклатура);
						КоэффициентЭтапа = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
							ДокументОбъект.УпаковкаПлан, ДанныеПартии.ОсновноеИзделиеНоменклатура);
						Коэффициент = КоэффициентПартии / КоэффициентЭтапа * РазмерПартии.КоличествоУпаковок / ДокументОбъект.КоличествоУпаковокПлан;
					КонецЕсли;
					
					ДокументОбъект.Пересчитать(Коэффициент);
					
					Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
						ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
					КонецЕсли;
					
					ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
					ПровестиСПонижениемСтатуса(ДокументОбъект);
					
					Результат.ЭтапИзменен.Добавить(Ссылка);
					
				КонецЕсли;
				
			Иначе
				
				ДанныеЗаполнения = Новый Структура;
				
				РеквизитыШапки = Новый Структура;
				РеквизитыШапки.Вставить("КоличествоУпаковокПлан", РазмерПартии.КоличествоУпаковок);
				РеквизитыШапки.Вставить("УпаковкаПлан", РазмерПартии.Упаковка);
				РеквизитыШапки.Вставить("ДлительностьЭтапа", ДанныеЭтапа.ДлительностьЭтапа);
				РеквизитыШапки.Вставить("ЕдиницаИзмеренияДлительностиЭтапа", ДанныеЭтапа.ЕдиницаИзмеренияДлительностиЭтапа);
				РеквизитыШапки.Вставить("ПорядокРаботыВидовРабочихЦентров", ДанныеЭтапа.ПорядокРаботыВидовРабочихЦентров);
				РеквизитыШапки.Вставить("МаршрутнаяКарта", ДанныеЭтапа.МаршрутнаяКарта);
				РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", ДанныеЭтапа.КоэффициентМаршрутнойКарты);
				
				ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
				
				СтруктураПоискаЭтап.Этап = ДанныеЭтапа.Этап;
				
				ОбеспечениеМатериаламиИРаботами = ДанныеСпецификации.МатериалыИУслуги.Скопировать(СтруктураПоискаЭтап);
				Если ДокументОбъект.НеОтгружатьЧастями Тогда
					Для каждого Строка Из ОбеспечениеМатериаламиИРаботами Цикл
						Строка.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
					КонецЦикла;
				КонецЕсли;
				СтруктураДействий.Вставить(
					"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			 		ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(ДокументОбъект));
				ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
					ОбеспечениеМатериаламиИРаботами, СтруктураДействий, КэшированныеЗначения);
				ДанныеЗаполнения.Вставить("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами);
				
				ДанныеЗаполнения.Вставить("ВыходныеИзделия",
					ДанныеСпецификации.ВыходныеИзделия.Скопировать(СтруктураПоискаЭтап));
				
				ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии",
					ВыходныеИзделияСерии.Скопировать(СтруктураПоискаЭтап));
				
				ДанныеЗаполнения.Вставить("ПобочныеИзделия",
					ДанныеСпецификации.ВозвратныеОтходы.Скопировать(СтруктураПоискаЭтап));
				
				ДанныеЗаполнения.Вставить("ПобочныеИзделияСерии",
					ПобочныеИзделияСерии.Скопировать(СтруктураПоискаЭтап));
					
				ДанныеЗаполнения.Вставить("Трудозатраты",
					ДанныеСпецификации.Трудозатраты.Скопировать(СтруктураПоискаЭтап));
					
				ДанныеЗаполнения.Вставить("ВидыРабочихЦентров",
					ДанныеСпецификации.ВидыРабочихЦентров.Скопировать(СтруктураПоискаЭтап));
					
				ДанныеЗаполнения.Вставить("АльтернативныеВидыРабочихЦентров",
					ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.Скопировать(СтруктураПоискаЭтап));
				
				ТабличнаяЧастьПоследователи = ДокументОбъект.Последователи; // ДокументТабличнаяЧасть.ЭтапПроизводства2_2.Последователи - 
				
				Если СсылкиУдалить.ВГраница() <> -1
					И ТабличнаяЧастьПоследователи.Количество() > 0 Тогда
					
					Последователи = Новый Массив;
					Для каждого Строка Из ТабличнаяЧастьПоследователи Цикл
						Если СсылкиУдалить.Найти(Строка.Этап) = Неопределено
							И Строка.ТипСвязи = ТипСвязиПоследователь() Тогда
							Последователи.Добавить(Строка.Этап);
						КонецЕсли;
					КонецЦикла;
					
					ДанныеЗаполнения.Вставить("Последователи", Последователи);
					
				КонецЕсли;

				ДокументОбъект.Заполнить(ДанныеЗаполнения);
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ПровестиСПонижениемСтатуса(ДокументОбъект);
				
				Результат.ЭтапИзменен.Добавить(Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Передача резервов
	ВыборкаСсылкиУдалить.Сбросить();
	Пока ВыборкаСсылкиУдалить.Следующий() Цикл
		
		Отправители = Новый Массив;
		Получатель = Новый Массив;
		
		Выборка = ВыборкаСсылкиУдалить.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Получатель.ВГраница() = -1 Тогда
				Получатель.Добавить(Выборка.Ссылка); // Первый документ в выборке не удаляется
			Иначе
				Отправители.Добавить(Выборка.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Изменения = ПередатьРезервы(Отправители, Получатель);
		Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
			Результат.ЭтапИзменен.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
			Результат.КорректировкаСоздана.Добавить(Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СкопироватьПартиюИПересчитатьПоКоэффициенту(ДанныеПартии, ДанныеЭтапов, РазмерПартии, ОсновноеИзделиеНовойПартии)
	
	Результат = Новый Массив;
	
	// Генерация ссылок на этапы и назначения
	НовыеСсылки = Новый Соответствие;
	Для каждого Этап Из ДанныеЭтапов.Реквизиты Цикл
		НовыеСсылки.Вставить(
			Этап.Ссылка,
			Новый Структура("Этап, Назначение",
				Документы.ЭтапПроизводства2_2.ПолучитьСсылку(),
				Справочники.Назначения.ПолучитьСсылку()));
	КонецЦикла;
		
	// Создание партии
	НомерПартии = Документы.ЗаказНаПроизводство2_2.НомераПартийЗапуска(ДанныеПартии.Распоряжение)[ДанныеПартии.Распоряжение];
	
	ПоляПартии = ПоляПартии(ДанныеПартии, ОсновноеИзделиеНовойПартии);
	ПоляПартии.Вставить("Код", НомерПартии);
	ПартияПроизводстваНовая = Справочники.ПартииПроизводства.ПолучитьПартиюПроизводства(ПоляПартии, Ложь, Ложь);
	
	СтруктураПоискаПоследователи = Новый Структура("ТипСвязи, Ссылка", ТипСвязиПоследователь());
	СтруктураПоискаСерии = Новый Структура("Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение");
	НомерЭтапа = 1;
	
	Для каждого Этап Из ДанныеЭтапов.Реквизиты Цикл

		Если Этап.КоличествоУпаковокПлан = 0 Тогда
			Коэффициент = 1;
		Иначе
			Если Этап.УпаковкаПлан = РазмерПартии.Упаковка Тогда
				Коэффициент = РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
			Иначе
				КоэффициентПартии = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					РазмерПартии.Упаковка,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				КоэффициентЭтапа = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Этап.УпаковкаПлан,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				Коэффициент = КоэффициентПартии / КоэффициентЭтапа
					* РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Этап.Ссылка, Коэффициент);
		
		// Подготовка данных шапки
		РеквизитыШапки = Новый Структура;
		
		Для каждого Колонка Из ДанныеЭтапов.Реквизиты.Колонки Цикл
			Если Колонка.Имя = "Ссылка"
				ИЛИ Колонка.Имя = "ПартияПроизводства"
				ИЛИ Колонка.Имя = "КоличествоУпаковокПлан"
				ИЛИ Колонка.Имя = "УпаковкаПлан"
				ИЛИ Колонка.Имя = "КоэффициентМаршрутнойКарты"
				ИЛИ Колонка.Имя = "Назначение"
				ИЛИ Колонка.Имя = "Номер"
				ИЛИ Колонка.Имя = "НомерПартииЗапуска"
				ИЛИ Колонка.Имя = "НомерЭтапаВПартииЗапуска" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыШапки.Вставить(Колонка.Имя, Этап[Колонка.Имя]);
		КонецЦикла;
		
		РеквизитыШапки.Вставить("ПартияПроизводства", ПартияПроизводстваНовая);
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", РазмерПартии.КоличествоУпаковок);
		РеквизитыШапки.Вставить("УпаковкаПлан", РазмерПартии.Упаковка);
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент, 3));
		РеквизитыШапки.Вставить("Назначение", НовыеСсылки[Этап.Ссылка].Назначение);
		РеквизитыШапки.Вставить("НомерПартииЗапуска", НомерПартии);
		РеквизитыШапки.Вставить("НомерЭтапаВПартииЗапуска", НомерЭтапа);
		
		НомерЭтапа = НомерЭтапа + 1;
		
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		// Замена ссылок и назначений, указывающих на этапы внутри цепочки
		Для каждого Строка Из ЗначенияЗаполнения.ПобочныеИзделия Цикл
			Если НЕ Строка.ЭтапПотребитель.Пустая()
				И НовыеСсылки[Строка.ЭтапПотребитель] <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, Строка);
				Для каждого СтрокаСерия Из ЗначенияЗаполнения.ПобочныеИзделияСерии.НайтиСтроки(СтруктураПоискаСерии) Цикл
					СтрокаСерия.Назначение = НовыеСсылки[Строка.ЭтапПотребитель].Назначение;
				КонецЦикла;
				
				Строка.Назначение = НовыеСсылки[Строка.ЭтапПотребитель].Назначение;
				Строка.ЭтапПотребитель = НовыеСсылки[Строка.ЭтапПотребитель].Этап;
				
			КонецЕсли;
		КонецЦикла;
		
		// Последователи
		СтруктураПоискаПоследователи.Ссылка = Этап.Ссылка;
		Последователи = Новый Массив;
		Для каждого Строка Из ДанныеЭтапов.Последователи.НайтиСтроки(СтруктураПоискаПоследователи) Цикл
			Если НовыеСсылки[Строка.Этап] <> Неопределено Тогда
				Последователи.Добавить(НовыеСсылки[Строка.Этап].Этап);
			КонецЕсли;
		КонецЦикла;
		ЗначенияЗаполнения.Вставить("Последователи", Последователи);
		
		// Изменение этапов
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(НовыеСсылки[Этап.Ссылка].Этап);
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ПровестиСПонижениемСтатуса(ДокументОбъект);
		
		Результат.Добавить(НовыеСсылки[Этап.Ссылка].Этап);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент)
	
	Результат = Новый Структура;
	
	СтруктураПоиска = Новый Структура("Ссылка", Ссылка);
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоЕдиниц",
		ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	    
	// Обеспечение
	ОбеспечениеМатериаламиИРаботами = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.Скопировать(СтруктураПоиска);
	Для Индекс = -ОбеспечениеМатериаламиИРаботами.Количество()+1 По 0 Цикл
		Строка = ОбеспечениеМатериаламиИРаботами[-Индекс];
		Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * Коэффициент;
		Если Строка.КоличествоУпаковок = 0 Тогда
			ОбеспечениеМатериаламиИРаботами.Удалить(Строка);
		Иначе
			СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
			Строка.Количество = СтрокаСтруктурой.Количество;
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами);
	
	// Выходные изделия
	ВыходныеИзделия = ДанныеЭтапов.ВыходныеИзделия.Скопировать(СтруктураПоиска);
	СтрокиССериями = Новый Массив;
	Для Индекс = -ВыходныеИзделия.Количество()+1 По 0 Цикл
		Строка = ВыходныеИзделия[-Индекс];
		Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * Коэффициент;
		Если Строка.КоличествоУпаковок = 0 Тогда
			ВыходныеИзделия.Удалить(Строка);
		Иначе
			СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
			Строка.Количество = СтрокаСтруктурой.Количество;
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				СтрокиССериями.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("ВыходныеИзделия", ВыходныеИзделия);
	
	Если СтрокиССериями.ВГраница() <> -1 Тогда
		
		ВыходныеИзделияСерии = ДанныеЭтапов.ВыходныеИзделияСерии.СкопироватьКолонки(); // ТаблицаЗначений - 
		
		Аналитики = "Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение";
		СтруктураПоискаСерии = Новый Структура(Аналитики);
		Изделия = ВыходныеИзделия.Скопировать(СтрокиССериями, Аналитики + ",Количество"); // ТаблицаЗначений - 
		Изделия.Свернуть(Аналитики, "Количество");
		
		Для каждого СтрокаИзделие Из Изделия Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаИзделие);
			НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
				ДанныеЭтапов.ВыходныеИзделияСерии, СтруктураПоискаСерии, Истина);
			
			Для каждого СтрокаСерия Из НайденныеСтрокиСерии Цикл
				
				Если СтрокаСерия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ВыходныеИзделияСерии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
				НоваяСтрока.Количество = Мин(СтрокаИзделие.Количество, СтрокаСерия.Количество);
				
				СтрокаСерия.Количество = СтрокаСерия.Количество - НоваяСтрока.Количество;
				
				СтрокаИзделие.Количество = СтрокаИзделие.Количество - НоваяСтрока.Количество;
				Если СтрокаИзделие.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Результат.Вставить("ВыходныеИзделияСерии", ВыходныеИзделияСерии);
		
	КонецЕсли;
	
	// Побочные изделия
	ПобочныеИзделия = ДанныеЭтапов.ПобочныеИзделия.Скопировать(СтруктураПоиска); // ТаблицаЗначений - 
	ПобочныеИзделияСерии = ДанныеЭтапов.ПобочныеИзделияСерии.СкопироватьКолонки(); // ТаблицаЗначений - 
	СтрокиССериями = Новый Массив;
	Для Индекс = -ПобочныеИзделия.Количество()+1 По 0 Цикл
		Строка = ПобочныеИзделия[-Индекс];
		Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * Коэффициент;
		Если Строка.КоличествоУпаковок = 0 Тогда
			ПобочныеИзделия.Удалить(Строка);
		Иначе
			СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
			Строка.Количество = СтрокаСтруктурой.Количество;
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				СтрокиССериями.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиССериями.ВГраница() <> -1 Тогда
		
		Аналитики = "Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение";
		СтруктураПоискаСерии = Новый Структура(Аналитики);
		Изделия = ПобочныеИзделия.Скопировать(СтрокиССериями, Аналитики + ",Количество");
		Изделия.Свернуть(Аналитики, "Количество");
		
		Для каждого СтрокаИзделие Из Изделия Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаИзделие);
			НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
				ДанныеЭтапов.ПобочныеИзделияСерии, СтруктураПоискаСерии, Истина);
			
			Для каждого СтрокаСерия Из НайденныеСтрокиСерии Цикл
					
				Если СтрокаСерия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ПобочныеИзделияСерии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
				НоваяСтрока.Количество = Мин(СтрокаИзделие.Количество, СтрокаСерия.Количество);
				
				СтрокаСерия.Количество = СтрокаСерия.Количество - НоваяСтрока.Количество;
				
				СтрокаИзделие.Количество = СтрокаИзделие.Количество - НоваяСтрока.Количество;
				Если СтрокаИзделие.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("ПобочныеИзделия", ПобочныеИзделия);
	Результат.Вставить("ПобочныеИзделияСерии", ПобочныеИзделияСерии);
	
	// Трудозатраты
	Трудозатраты = ДанныеЭтапов.Трудозатраты.Скопировать(СтруктураПоиска);
	Для Индекс = -Трудозатраты.Количество()+1 По 0 Цикл
		Строка = Трудозатраты[-Индекс];
		Строка.Количество = Строка.Количество * Коэффициент;
		Если Строка.Количество = 0 Тогда
			Трудозатраты.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("Трудозатраты", Трудозатраты);
	
	// Виды рабочих центров
	ВидыРабочихЦентров = ДанныеЭтапов.ВидыРабочихЦентров.Скопировать(СтруктураПоиска);
	Для Индекс = -ВидыРабочихЦентров.Количество()+1 По 0 Цикл
		Строка = ВидыРабочихЦентров[-Индекс];
		Строка.ВремяРаботы = Строка.ВремяРаботы * Коэффициент;
		Если Строка.ВремяРаботы = 0 Тогда
			ВидыРабочихЦентров.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("ВидыРабочихЦентров", ВидыРабочихЦентров);
	
	// Альтернативные виды рабочих центров
	АльтернативныеВидыРабочихЦентров = ДанныеЭтапов.АльтернативныеВидыРабочихЦентров.Скопировать(СтруктураПоиска);
	Для Индекс = -АльтернативныеВидыРабочихЦентров.Количество()+1 По 0 Цикл
		Строка = АльтернативныеВидыРабочихЦентров[-Индекс];
		Строка.ВремяРаботы = Строка.ВремяРаботы * Коэффициент;
		Если Строка.ВремяРаботы = 0 Тогда
			АльтернативныеВидыРабочихЦентров.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("АльтернативныеВидыРабочихЦентров", АльтернативныеВидыРабочихЦентров);
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьДолиСтоимостиПриДеленииДокумента(ДанныеЭтапа, Коэффициент)
	
	Если ДанныеЭтапа.ВыходныеИзделия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ДоляСтоимости, Отменено", 0, Ложь);
	НайденныеСтроки = ДанныеЭтапа.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Для каждого Строка Из ДанныеЭтапа.ВыходныеИзделия Цикл
			Строка.ДоляСтоимости = Строка.ДоляСтоимости * Коэффициент;
		КонецЦикла;
		
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		
		НайденныеСтроки[0].ДоляСтоимости = Коэффициент;
		
	Иначе
		
		КоличествоИтого = 0;
		Для каждого Строка Из НайденныеСтроки Цикл
			КоличествоИтого = КоличествоИтого + Строка.Количество;
		КонецЦикла;
		Если КоличествоИтого <> 0 Тогда
			Для каждого Строка Из НайденныеСтроки Цикл
				Строка.ДоляСтоимости = Строка.Количество * Коэффициент / КоличествоИтого;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПередатьРезервы(СсылкиОтправители, СсылкиПолучатели)
	
	Результат = Новый Структура;
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	
	// Корректировка назначений
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РаспределениеЗапасов.Номенклатура                                        КАК Номенклатура,
		|	РаспределениеЗапасов.Характеристика                                      КАК Характеристика,
		|	РаспределениеЗапасов.Склад                                               КАК Склад,
		|	РаспределениеЗапасов.Назначение                                          КАК Назначение,
		|	СУММА(РаспределениеЗапасов.Свободно - РаспределениеЗапасов.НеОбеспечено) КАК Количество
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Назначение = Этапы.Назначение
		|ГДЕ
		|	Этапы.Ссылка В (&Отправители)
		|	И Этапы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|	И РаспределениеЗапасов.Состояние В (
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОтложитьОбеспечение),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать))
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеЗапасов.Номенклатура,
		|	РаспределениеЗапасов.Характеристика,
		|	РаспределениеЗапасов.Склад,
		|	РаспределениеЗапасов.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(РаспределениеЗапасов.Свободно - РаспределениеЗапасов.НеОбеспечено) > 0
		|;
		|
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеЗапасов.Номенклатура                                        КАК Номенклатура,
		|	РаспределениеЗапасов.Характеристика                                      КАК Характеристика,
		|	РаспределениеЗапасов.Склад                                               КАК Склад,
		|	РаспределениеЗапасов.Назначение                                          КАК Назначение,
		|	СУММА(РаспределениеЗапасов.НеОбеспечено - РаспределениеЗапасов.Свободно) КАК Количество
		|ПОМЕСТИТЬ Потребности
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Назначение = Этапы.Назначение
		|ГДЕ
		|	Этапы.Ссылка В (&Получатели)
		|	И РаспределениеЗапасов.Состояние В (
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОтложитьОбеспечение),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать))
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеЗапасов.Номенклатура,
		|	РаспределениеЗапасов.Характеристика,
		|	РаспределениеЗапасов.Склад,
		|	РаспределениеЗапасов.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(РаспределениеЗапасов.НеОбеспечено - РаспределениеЗапасов.Свободно) > 0
		|;
		|
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура                КАК Номенклатура,
		|	Остатки.Характеристика              КАК Характеристика,
		|	Остатки.Склад                       КАК Склад,
		|	Остатки.Назначение                  КАК ИсходноеНазначение,
		|	Остатки.Количество                  КАК Остаток,
		|	ЕСТЬNULL(Потребности.Назначение, 0) КАК НовоеНазначение,
		|	ЕСТЬNULL(Потребности.Количество, 0) КАК Потребность
		|ИЗ
		|	Остатки КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Потребности КАК Потребности
		|		ПО Потребности.Номенклатура = Остатки.Номенклатура
		|		 И Потребности.Характеристика = Остатки.Характеристика
		|		 И Потребности.Склад = Остатки.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	ИсходноеНазначение");
	Запрос.УстановитьПараметр("Отправители", СсылкиОтправители);
	Запрос.УстановитьПараметр("Получатели", СсылкиПолучатели);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Индексы.Добавить("Номенклатура, Характеристика, Склад, НовоеНазначение");
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Склад, НовоеНазначение");
	
	Если Таблица.Количество() > 0 Тогда
		
		Товары = Таблица.СкопироватьКолонки("Номенклатура, Характеристика, Склад, ИсходноеНазначение, НовоеНазначение");
		Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		Для Индекс = 0 По Таблица.Количество()-1 Цикл
			
			Строка = Таблица[Индекс];
			
			Если Строка.Остаток > 0 И Строка.Потребность > 0 Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = Мин(Строка.Остаток, Строка.Потребность);
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				
				Строка.Остаток = Строка.Остаток - НоваяСтрока.Количество;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
				Для каждого НайденнаяСтрока Из Таблица.НайтиСтроки(СтруктураПоиска) Цикл
					НайденнаяСтрока.Потребность = НайденнаяСтрока.Потребность - НоваяСтрока.Количество;
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследняяСтрока = Ложь;
			Если Индекс <> Таблица.Количество()-1 Тогда
				
				СледующаяСтрока = Таблица[Индекс+1];
				Если СледующаяСтрока.Номенклатура = Строка.Номенклатура
					И СледующаяСтрока.Характеристика = Строка.Характеристика
					И СледующаяСтрока.Склад = Строка.Склад
					И СледующаяСтрока.ИсходноеНазначение = Строка.ИсходноеНазначение Тогда
						
					СледующаяСтрока.Остаток = Строка.Остаток;
					
				Иначе
					ПоследняяСтрока = Истина;
				КонецЕсли;
			Иначе
				ПоследняяСтрока = Истина;
			КонецЕсли;
			
			Если ПоследняяСтрока И Строка.Остаток <> 0 Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НовоеНазначение");
				НоваяСтрока.Количество = Строка.Остаток;
				НоваяСтрока.КоличествоУпаковок = Строка.Остаток;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыШапки = Новый Структура();
		РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
		РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений);
		РеквизитыШапки.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкиОтправители[0], "Организация"));
		
		ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, Товары));
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ДокументОбъект,
			Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументОбъект));
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Событие = НСтр("ru = 'Этап производства';
								|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Корректировка назначений';
							|en = 'Adjust assignments'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(Событие,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Результат.КорректировкаСоздана.Добавить(ДокументОбъект.Ссылка);
	
	КонецЕсли;
	
	// Изменение назначения выпуска
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обеспечение.Ссылка            КАК Ссылка,
		|	Обеспечение.Номенклатура      КАК Номенклатура,
		|	Обеспечение.Характеристика    КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА Обеспечение.Подразделение
		|		ИНАЧЕ Обеспечение.Склад
		|	КОНЕЦ                         КАК Получатель,
		|	Обеспечение.Назначение        КАК Назначение,
		|	СУММА(Обеспечение.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТПотребность
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
		|ГДЕ
		|	Обеспечение.Ссылка В(&Получатели)
		|	И Обеспечение.Производится
		|	И НЕ Обеспечение.Отменено
		|	И Обеспечение.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Обеспечение.Ссылка,
		|	Обеспечение.Номенклатура,
		|	Обеспечение.Характеристика,
		|	ВЫБОР
		|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА Обеспечение.Подразделение
		|		ИНАЧЕ Обеспечение.Склад
		|	КОНЕЦ,
		|	Обеспечение.Назначение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Номенклатура,
		|	Характеристика,
		|	Получатель,
		|	Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура      КАК Номенклатура,
		|	ВложенныйЗапрос.Получатель        КАК Получатель,
		|	ВложенныйЗапрос.Характеристика    КАК Характеристика,
		|	ВложенныйЗапрос.Назначение        КАК Назначение,
		|	ВложенныйЗапрос.ЭтапПотребитель   КАК ЭтапПотребитель,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТВыпуск
		|ИЗ
		|	(ВЫБРАТЬ
		|		Изделия.ЭтапПотребитель КАК ЭтапПотребитель,
		|		Изделия.Номенклатура    КАК Номенклатура,
		|		Изделия.Характеристика  КАК Характеристика,
		|		Изделия.Получатель      КАК Получатель,
		|		Изделия.Назначение      КАК Назначение,
		|		Изделия.Количество      КАК Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
		|	ГДЕ
		|		Изделия.ЭтапПотребитель В(&Получатели)
		|		И Изделия.Ссылка.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Изделия.ЭтапПотребитель,
		|		Изделия.Номенклатура,
		|		Изделия.Характеристика,
		|		Изделия.Получатель,
		|		Изделия.Назначение,
		|		Изделия.Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
		|	ГДЕ
		|		Изделия.ЭтапПотребитель В(&Получатели)
		|		И Изделия.Ссылка.Проведен) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Получатель,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Назначение,
		|	ВложенныйЗапрос.ЭтапПотребитель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВложенныйЗапрос.ЭтапПотребитель,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Получатель,
		|	ВложенныйЗапрос.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПотребность.Ссылка         КАК ЭтапПотребитель,
		|	ВТПотребность.Номенклатура   КАК Номенклатура,
		|	ВТПотребность.Характеристика КАК Характеристика,
		|	ВТПотребность.Получатель     КАК Получатель,
		|	ВТПотребность.Назначение     КАК Назначение,
		|	ВТПотребность.Количество - ЕСТЬNULL(ВТВыпуск.Количество, 0) КАК Количество
		|ИЗ
		|	ВТПотребность КАК ВТПотребность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыпуск КАК ВТВыпуск
		|		ПО ВТПотребность.Ссылка = ВТВыпуск.ЭтапПотребитель
		|			И ВТПотребность.Номенклатура = ВТВыпуск.Номенклатура
		|			И ВТПотребность.Характеристика = ВТВыпуск.Характеристика
		|			И ВТПотребность.Получатель = ВТВыпуск.Получатель
		|			И ВТПотребность.Назначение = ВТВыпуск.Назначение
		|ГДЕ
		|	ВТПотребность.Количество - ЕСТЬNULL(ВТВыпуск.Количество, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Обеспечение.Ссылка            КАК ЭтапПотребитель,
		|	Обеспечение.Номенклатура      КАК Номенклатура,
		|	Обеспечение.Характеристика    КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА Обеспечение.Подразделение
		|		ИНАЧЕ Обеспечение.Склад
		|	КОНЕЦ                         КАК Получатель,
		|	Обеспечение.Назначение        КАК Назначение,
		|	СУММА(Обеспечение.Количество) КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
		|ГДЕ
		|	Обеспечение.Ссылка В(&Отправители)
		|	И Обеспечение.Производится
		|	И НЕ Обеспечение.Отменено
		|	И Обеспечение.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Обеспечение.Ссылка,
		|	Обеспечение.Номенклатура,
		|	Обеспечение.Характеристика,
		|	ВЫБОР
		|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА Обеспечение.Подразделение
		|		ИНАЧЕ Обеспечение.Склад
		|	КОНЕЦ,
		|	Обеспечение.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Изделия.Ссылка          КАК Ссылка,
		|	Изделия.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Изделия.Номенклатура    КАК Номенклатура,
		|	Изделия.Характеристика  КАК Характеристика,
		|	Изделия.Получатель      КАК Получатель,
		|	Изделия.Назначение      КАК Назначение,
		|	""ВыходныеИзделия""     КАК ИмяТЧ
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
		|ГДЕ
		|	Изделия.ЭтапПотребитель В(&Отправители)
		|	И НЕ Изделия.Произведено
		|	И Изделия.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Изделия.Ссылка,
		|	Изделия.ЭтапПотребитель,
		|	Изделия.Номенклатура,
		|	Изделия.Характеристика,
		|	Изделия.Получатель,
		|	Изделия.Назначение,
		|	""ПобочныеИзделия""
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
		|ГДЕ
		|	Изделия.ЭтапПотребитель В(&Отправители)
		|	И НЕ Изделия.Произведено
		|	И Изделия.Ссылка.Проведен
		|ИТОГИ ПО
		|	Ссылка";
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	ПотребностьПолучатели = МассивРезультатов[2].Выгрузить();
	ПотребностьПолучатели.Индексы.Добавить("Номенклатура, Характеристика");
	
	ПотребностьОтправители = МассивРезультатов[3].Выгрузить();
	ПотребностьОтправители.Индексы.Добавить("ЭтапПотребитель, Номенклатура, Характеристика, Получатель, Назначение");
	
	ВыборкаИтоги = МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПоиска1 = Новый Структура("ЭтапПотребитель, Номенклатура, Характеристика, Получатель, Назначение");
	СтруктураПоиска2 = Новый Структура("Номенклатура, Характеристика");
	СтруктураПоиска3 = Новый Структура("Номенклатура, Характеристика, Назначение, Получатель, Произведено, ДатаПроизводства, Подразделение");
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ДокументОбъект = ВыборкаИтоги.Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
		ДокументИзменен = Ложь;
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска1, Выборка);
			Для каждого Строка Из ДокументОбъект[Выборка.ИмяТЧ].НайтиСтроки(СтруктураПоиска1) Цикл
				
				Количество = Строка.Количество;
				
				Для каждого Потребность Из ПотребностьОтправители.НайтиСтроки(СтруктураПоиска1) Цикл
					
					Если Потребность = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоЗачет = Мин(Количество, Потребность.Количество);
					Потребность.Количество = Потребность.Количество - КоличествоЗачет;
					Количество = Количество - КоличествоЗачет;
					Если Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска2, Строка);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска3, Строка);
				
				Для каждого Потребность Из ПотребностьПолучатели.НайтиСтроки(СтруктураПоиска2) Цикл
					
					Если Потребность.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоЗачет = Мин(Количество, Потребность.Количество);
					
					Если КоличествоЗачет < Строка.Количество Тогда
						
						НоваяСтрока = ДокументОбъект[Выборка.ИмяТЧ].Вставить(ДокументОбъект[Выборка.ИмяТЧ].Индекс(Строка)+1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,
							"КодСтроки, Назначение, Получатель, ЭтапПотребитель, Количество, КоличествоУпаковок");
						НоваяСтрока.Количество = КоличествоЗачет;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
							
						Строка.Количество = Строка.Количество - КоличествоЗачет;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
						
						СтрокаОбособить = НоваяСтрока;
					Иначе
						СтрокаОбособить = Строка;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаОбособить, Потребность, "Назначение, Получатель, ЭтапПотребитель");
					ДокументИзменен = Истина;
					
					ОстатокСерии = КоличествоЗачет;
					
					Если Выборка.ИмяТЧ = "ВыходныеИзделия" Тогда
						ИмяТабличнойЧастиСерии = "ВыходныеИзделияСерии";
					ИначеЕсли Выборка.ИмяТЧ = "ПобочныеИзделия" Тогда
						ИмяТабличнойЧастиСерии = "ПобочныеИзделияСерии";
					КонецЕсли;
					
					Для каждого СтрокаСерии Из ДокументОбъект[ИмяТабличнойЧастиСерии].НайтиСтроки(СтруктураПоиска3) Цикл
						
						Если СтрокаСерии.Количество = ОстатокСерии Тогда
							ЗаполнитьЗначенияСвойств(СтрокаСерии, Потребность, "Назначение, Получатель");
							Прервать;
						ИначеЕсли СтрокаСерии.Количество < ОстатокСерии Тогда
							ЗаполнитьЗначенияСвойств(СтрокаСерии, Потребность, "Назначение, Получатель");
							ОстатокСерии = ОстатокСерии - СтрокаСерии.Количество;
						Иначе
							НоваяСтрока = ДокументОбъект[ИмяТабличнойЧастиСерии].Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии,, "Назначение, Получатель, Количество");
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность, "Назначение, Получатель");
							НоваяСтрока.Количество = ОстатокСерии;
							
							СтрокаСерии.Количество = СтрокаСерии.Количество - ОстатокСерии;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Потребность.Количество = Потребность.Количество - КоличествоЗачет;
					
					Количество = Количество - КоличествоЗачет;
					Если Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДокументИзменен Тогда
			
			ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
			
			Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			КонецЕсли;
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ПровестиСПонижениемСтатуса(ДокументОбъект);
				
			Результат.ЭтапИзменен.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОформитьПромежуточныйВыпуск(ДанныеПартии, Этап, ВыходныеИзделия, Серии, ПараметрыВыпуска)
	
	Результат = Неопределено;
	
	ДокументОбъект = Этап.ПолучитьОбъект();
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ПараметрыВыпуска.СоздатьЭтап Тогда
		
		// Создание "технического" этапа
		РеквизитыШапкиНовый = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
			ДанныеПартии.Распоряжение,
			ДанныеПартии.НазначениеПродукция,
			ДанныеПартии.ПартияПроизводства,
			ДанныеПартии.ТипПроизводственногоПроцесса,
			ДанныеПартии.Спецификация);
		
		РеквизитыШапкиНовый.Вставить("Подразделение", 
			?(ВыходныеИзделия.Количество() > 0, ВыходныеИзделия[0].Подразделение, Неопределено));
		РеквизитыШапкиНовый.Вставить("НаименованиеЭтапа", НСтр("ru = 'Промежуточный выпуск';
																|en = 'Intermediate release'"));
		РеквизитыШапкиНовый.Вставить("КоличествоУпаковокПлан", ДокументОбъект.КоличествоУпаковокПлан);
		РеквизитыШапкиНовый.Вставить("УпаковкаПлан", ДокументОбъект.УпаковкаПлан);
		РеквизитыШапкиНовый.Вставить("УпаковкаФакт", ДокументОбъект.УпаковкаПлан);
		РеквизитыШапкиНовый.Вставить("УпаковкаОтменено", ДокументОбъект.УпаковкаПлан);
		РеквизитыШапкиНовый.Вставить("НомерЭтапа", ДокументОбъект.НомерСледующегоЭтапа);
		РеквизитыШапкиНовый.Вставить("НомерПартииЗапуска", ДокументОбъект.НомерПартииЗапуска);
		РеквизитыШапкиНовый.Вставить("НомерЭтапаВПартииЗапуска",
			НовыйНомерЭтапаВПартииЗапуска(ДанныеПартии.ПартияПроизводства));
		РеквизитыШапкиНовый.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия",
			ПараметрыВыпуска.СпособРаспределенияЗатратНаВыходныеИзделия);
		
		Если ВыходныеИзделия.Найти(Ложь, "Произведено") = Неопределено Тогда
			РеквизитыШапкиНовый.Вставить("Статус", Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
			РеквизитыШапкиНовый.Вставить("КоличествоУпаковокФакт", ДокументОбъект.КоличествоУпаковокПлан);
			РеквизитыШапкиНовый.Вставить("ФактическоеНачалоЭтапа", ТекущаяДатаСеанса());
			РеквизитыШапкиНовый.Вставить("ФактическоеОкончаниеЭтапа", ТекущаяДатаСеанса());
			РеквизитыШапкиНовый.Вставить("ПроизводствоОднойДатой", Истина);
			РеквизитыШапкиНовый.Вставить("ДатаПроизводства", ТекущаяДатаСеанса());
		КонецЕсли;
		
		ДанныеЗаполненияНовый = Новый Структура;
		ДанныеЗаполненияНовый.Вставить("РеквизитыШапки", РеквизитыШапкиНовый);
		ДанныеЗаполненияНовый.Вставить("ВыходныеИзделия", ВыходныеИзделия);
		ДанныеЗаполненияНовый.Вставить("ВыходныеИзделияСерии", Серии);
		
		ДокументОбъектНовый = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъектНовый.Заполнить(ДанныеЗаполненияНовый);
		
		Если НЕ ДокументОбъектНовый.ПроверитьЗаполнение() Тогда
			ДокументОбъектНовый.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		
		ДокументОбъектНовый.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ПровестиСПонижениемСтатуса(ДокументОбъектНовый);
		
		Результат = ДокументОбъектНовый.Ссылка;
		
		// Подготовка данных для изменения существующего этапа
		Последователи = Новый Массив;
		Последователи.Добавить(ДокументОбъектНовый.Ссылка);
		ДанныеЗаполнения.Вставить("Последователи", Последователи);
		
	Иначе
		
		// Этап становится выпускающим
		ДокументОбъект.НомерСледующегоЭтапа = 0;
		ДокументОбъект.СпособРаспределенияЗатратНаВыходныеИзделия = 
			ПараметрыВыпуска.СпособРаспределенияЗатратНаВыходныеИзделия;
		ДокументОбъект.Последователи.Очистить();
		
		// Если в побочных изделиях есть номенклатура промежуточного выпуска,
		// то это считается задвоением строк. Побочный выпуск в этом случае сокращается.
		СтруктураПоиска1 = Новый Структура("Номенклатура, Характеристика, Произведено, Отменено");
		СтруктураПоиска2 = Новый Структура("Номенклатура, Характеристика, Назначение, Получатель, Произведено, ДатаПроизводства, Подразделение");
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Для каждого СтрокаВыходныеИзделия Из ВыходныеИзделия Цикл
			
			Остаток = СтрокаВыходныеИзделия.Количество;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска1, СтрокаВыходныеИзделия);
			Для каждого СтрокаПобочныеИзделия Из ДокументОбъект.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска1) Цикл
				
				ОстатокСерии = Мин(Остаток, СтрокаПобочныеИзделия.Количество);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска2, СтрокаПобочныеИзделия);
				Для каждого СтрокаСерии Из ДокументОбъект.ПобочныеИзделияСерии.НайтиСтроки(СтруктураПоиска2) Цикл
					Если СтрокаСерии.Количество <= ОстатокСерии Тогда
						ОстатокСерии = ОстатокСерии - СтрокаСерии.Количество;
						ДокументОбъект.ПобочныеИзделияСерии.Удалить(СтрокаСерии);
					Иначе
						СтрокаСерии.Количество = СтрокаСерии.Количество - ОстатокСерии;
						ОстатокСерии = 0;
					КонецЕсли;
					Если ОстатокСерии = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаПобочныеИзделия.Количество <= Остаток Тогда
					Остаток = Остаток - СтрокаПобочныеИзделия.Количество;
					ДокументОбъект.ПобочныеИзделия.Удалить(СтрокаПобочныеИзделия);
				Иначе
					СтрокаПобочныеИзделия.Количество = СтрокаПобочныеИзделия.Количество - Остаток;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПобочныеИзделия, СтруктураДействий, КэшированныеЗначения);
					Остаток = 0;
				КонецЕсли;
				
				Если Остаток = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Заполнение выходных изделий
		ДанныеЗаполнения.Вставить("ВыходныеИзделия", ВыходныеИзделия);
		ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии", Серии);
		
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	КонецЕсли;
	
	ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
	ПровестиСПонижениемСтатуса(ДокументОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ОтразитьРасходПобочныхИзделийВПромежуточномВыпуске(ЭтапПобочногоВыпуска, ЭтапПромежуточногоВыпуска, Ссылки)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭтапПромежуточногоВыпуска,
		"Статус, НазначениеМатериалы, Организация");
	Если ЗначенияРеквизитов.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВыходныеИзделия.Номенклатура      КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика    КАК Характеристика,
		|	СУММА(ВыходныеИзделия.Количество) КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &ЭтапПромежуточногоВыпуска
		|	И НЕ ВыходныеИзделия.Отменено
		|СГРУППИРОВАТЬ ПО
		|	ВыходныеИзделия.Номенклатура,
		|	ВыходныеИзделия.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПобочныеИзделия.Номенклатура      КАК Номенклатура,
		|	ПобочныеИзделия.Характеристика    КАК Характеристика,
		|	ПобочныеИзделия.Количество        КАК Количество,
		|	ПобочныеИзделия.Получатель        КАК Склад,
		|	ПобочныеИзделия.Назначение        КАК Назначение,
		|	ПобочныеИзделия.СтатьяКалькуляции КАК СтатьяКалькуляции
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
		|ГДЕ
		|	ПобочныеИзделия.Ссылка = &ЭтапПобочногоВыпуска
		|	И ПобочныеИзделия.Произведено
		|	И НЕ ПобочныеИзделия.Отменено
		|	И ПобочныеИзделия.ЭтапПотребитель В (&Ссылки)
		|	И ИСТИНА В (
		|		ВЫБРАТЬ
		|			ПЕРВЫЕ 1 ИСТИНА
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|		ГДЕ
		|			ВыходныеИзделия.Ссылка = &ЭтапПромежуточногоВыпуска
		|			И ВыходныеИзделия.Номенклатура = ПобочныеИзделия.Номенклатура 
		|			И ВыходныеИзделия.Характеристика = ПобочныеИзделия.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеЗапасов.Номенклатура    КАК Номенклатура,
		|	РаспределениеЗапасов.Характеристика  КАК Характеристика,
		|	РаспределениеЗапасов.Склад           КАК Склад,
		|	РаспределениеЗапасов.Назначение      КАК Назначение,
		|	РаспределениеЗапасов.Запас           КАК Количество,
		|	РаспределениеЗапасов.Запас           КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Назначение = Этапы.Назначение
		|		 И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|ГДЕ
		|	Этапы.Ссылка В (&Ссылки)
		|		И РаспределениеЗапасов.Запас > 0
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|			ГДЕ
		|				ВыходныеИзделия.Ссылка = &ЭтапПромежуточногоВыпуска
		|					И ВыходныеИзделия.Номенклатура = РаспределениеЗапасов.Номенклатура
		|					И ВыходныеИзделия.Характеристика = РаспределениеЗапасов.Характеристика)");
	Запрос.УстановитьПараметр("ЭтапПромежуточногоВыпуска", ЭтапПромежуточногоВыпуска);
	Запрос.УстановитьПараметр("ЭтапПобочногоВыпуска", ЭтапПобочногоВыпуска);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ПромежуточныйВыпуск = МассивРезультатов[0].Выгрузить();
	ПобочныйВыпуск = МассивРезультатов[1].Выгрузить();
	Остатки = МассивРезультатов[2].Выгрузить();
	
	Если ПромежуточныйВыпуск.Количество() = 0
		ИЛИ ПобочныйВыпуск.Количество() = 0
		ИЛИ Остатки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтапОбъект = ЭтапПромежуточногоВыпуска.ПолучитьОбъект();
	ЭтапОбъект.Заблокировать();
	
	ТаблицаКорректировка = Новый ТаблицаЗначений;
	ТаблицаКорректировка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКорректировка.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаКорректировка.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаКорректировка.Колонки.Добавить("ИсходноеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаКорректировка.Колонки.Добавить("НовоеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаКорректировка.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	ТаблицаКорректировка.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	СтруктураПоиска1 = Новый Структура("Номенклатура, Характеристика");
	СтруктураПоиска2 = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
	
	Для каждого СтрокаПромежуточныйВыпуск Из ПромежуточныйВыпуск Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска1, СтрокаПромежуточныйВыпуск);
		Для каждого СтрокаПобочныйВыпуск Из ПобочныйВыпуск.НайтиСтроки(СтруктураПоиска1) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска2, СтрокаПобочныйВыпуск);
			Для каждого СтрокаОстаток Из Остатки.НайтиСтроки(СтруктураПоиска2) Цикл
				
				Количество = Мин(СтрокаПромежуточныйВыпуск.Количество,
					СтрокаПобочныйВыпуск.Количество,
					СтрокаОстаток.Количество);
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПромежуточныйВыпуск.Количество = СтрокаПромежуточныйВыпуск.Количество - Количество;
				СтрокаПобочныйВыпуск.Количество = СтрокаПобочныйВыпуск.Количество - Количество;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
				
				// Обеспечение
				НоваяСтрока = ЭтапОбъект.ОбеспечениеМатериаламиИРаботами.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПобочныйВыпуск,, "Количество, Назначение");
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				НоваяСтрока.Обособленно = Истина;
				НоваяСтрока.ДатаОтгрузки = ТекущаяДатаСеанса();
				НоваяСтрока.Назначение = ЗначенияРеквизитов.НазначениеМатериалы;
				
				// Расход
				НоваяСтрока = ЭтапОбъект.РасходМатериаловИРабот.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПобочныйВыпуск,, "Количество");
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				НоваяСтрока.ДатаРасхода = ТекущаяДатаСеанса();
				
				// Корректировка
				НоваяСтрока = ТаблицаКорректировка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПобочныйВыпуск,, "Количество");
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				НоваяСтрока.ИсходноеНазначение = СтрокаПобочныйВыпуск.Назначение;
				НоваяСтрока.НовоеНазначение = ЗначенияРеквизитов.НазначениеМатериалы;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаКорректировка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись корректировки
	КорректировкаОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	
	РеквизитыШапки = Новый Структура();
	РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
	РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	РеквизитыШапки.Вставить("Организация", ЗначенияРеквизитов.Организация);
	РеквизитыШапки.Вставить("Назначение", ЗначенияРеквизитов.НазначениеМатериалы);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
	ДанныеЗаполнения.Вставить("Товары", ТаблицаКорректировка);
	
	КорректировкаОбъект.Заполнить(ДанныеЗаполнения);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		КорректировкаОбъект,
		Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(КорректировкаОбъект));
	
	КорректировкаПроведена = Ложь;
	Если КорректировкаОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			КорректировкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КорректировкаПроведена = Истина;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
				+ НСтр("ru = 'Корректировка назначений';
						|en = 'Adjust assignment'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			КорректировкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	Иначе
		КорректировкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	// Запись этапа
	Если НЕ КорректировкаПроведена
		ИЛИ НЕ ЭтапОбъект.ПроверитьЗаполнение() Тогда
		
		ЭтапОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
			ЭтапОбъект,
			ЗначенияРеквизитов.Статус);
		
	КонецЕсли;
	
	ПровестиСПонижениемСтатуса(ЭтапОбъект);
	ЭтапОбъект.Разблокировать();
	
	Возврат КорректировкаОбъект.Ссылка;
	
КонецФункции

Функция ЭтапПоШтрихкодуПартииПроизводства(ПартияПроизводства) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И Документ.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка,
		|	2
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И Документ.Проведен
		|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка,
		|	2
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И Документ.Проведен
		|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

// Проводит документ. При возникновении исключения делается попытка провести документ в статусе Формируется.
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект.ЭтапПроизводства2_2 - документ
//
Процедура ПровестиСПонижениемСтатуса(ДокументОбъект)
	
	Пока Истина Цикл
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Если ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				Продолжить;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					ДокументОбъект.Ссылка);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область ЦепочкаЭтапов

Функция СоздатьЦепочкуЭтапов(ДанныеСпецификации, ПакетныйРежим = Ложь, ВыходныеИзделияСерии = Неопределено, ПобочныеИзделияСерии = Неопределено)
	
	Результат = Новый Массив;
	
	РеквизитыШапки = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
		ДанныеСпецификации.Распоряжение,
		ДанныеСпецификации.НазначениеПродукция,
		ДанныеСпецификации.ПартияПроизводства,
		ДанныеСпецификации.ТипПроизводственногоПроцесса,
		ДанныеСпецификации.Спецификация);
	
	Для Индекс = 0 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
		
		ДанныеЭтапа = ДанныеСпецификации.Этапы[Индекс];
				
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		ДанныеЗаполнения.Вставить("ДанныеСпецификации", ДанныеСпецификации);
		ДанныеЗаполнения.Вставить("ДанныеЭтапа", ДанныеЭтапа);
		
		Если ВыходныеИзделияСерии <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии",
				ВыходныеИзделияСерии.Скопировать(Новый Структура("Этап", ДанныеЭтапа.Этап)));
		КонецЕсли;
		Если ПобочныеИзделияСерии <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ПобочныеИзделияСерии",
				ПобочныеИзделияСерии.Скопировать(Новый Структура("Этап", ДанныеЭтапа.Этап)));
		КонецЕсли;
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДанныеЭтапа.ЭтапПроизводства);
		Если ПакетныйРежим Тогда
			ДокументОбъект.УстановитьРежимПакетногоФормирования();
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ПровестиСПонижениемСтатуса(ДокументОбъект);
		
		Результат.Добавить(ДокументОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует граф цепочки этапов по идентификатору цепочки
//  в качестве идентификатора может быть передан заказ на производство
//  или партия производства.
//
// Параметры:
//  Идентификатор		 - ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.ПартииПроизводства - Идентификатор цепочки.
//  НаправлениеОбхода	 - Число - Направление обхода графа (1 - вперед, -1 - назад).
//
// Возвращаемое значение:
//  ТаблицаЗначений	 - см. описание функции Граф().
//
Функция ГрафЦепочкиЭтапов(Идентификатор, Знач НаправлениеОбхода = Неопределено) Экспорт
	
	// Схема запроса для получения связи этапов.
	// По умолчанию используется обход вперед по цепочке этапов заказа.
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Вершина,
		|	Таблица.Этап КАК СмежнаяВершина
		|ПОМЕСТИТЬ Ребра
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка.Распоряжение = &Идентификатор
		|	И Таблица.Ссылка.Проведен
		|	И Таблица.Этап.Распоряжение = &Идентификатор
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение = &Идентификатор
		|	И Таблица.Проведен
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение = &Идентификатор
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вершина
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вершины.Ссылка КАК Вершина,
		|	Ребра.СмежнаяВершина КАК СмежнаяВершина
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Вершины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Ребра КАК Ребра
		|		ПО Вершины.Ссылка = Ребра.Вершина
		|ГДЕ
		|	Вершины.Распоряжение = &Идентификатор
		|	И Вершины.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вершина");
	
	// Заменим идентификатор цепочки в зависимости от переданного параметра
	Если ТипЗнч(Идентификатор) = Тип("СправочникСсылка.ПартииПроизводства") Тогда
		
		Для каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
			Для каждого Оператор Из ПакетЗапроса.Операторы Цикл
				
				Для Индекс = 0 По Оператор.Отбор.Количество()-1 Цикл
					
					Если Найти(Оператор.Отбор[Индекс], ".Распоряжение") > 0 Тогда
						
						ТекстВыражения = СтрЗаменить(Оператор.Отбор[Индекс], 
								".Распоряжение", 
								".ПартияПроизводства");
								
						Оператор.Отбор[Индекс] = Новый ВыражениеСхемыЗапроса(ТекстВыражения);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для каждого Источник Из Оператор.Источники Цикл
					
					Для каждого Соединение Из Источник.Соединения Цикл
						
						Если Найти(Соединение.Условие, ".Распоряжение") > 0 Тогда
							
							ТекстВыражения = СтрЗаменить(Соединение.Условие, 
									".Распоряжение", 
									".ПартияПроизводства");
									
							Соединение.Условие = Новый ВыражениеСхемыЗапроса(ТекстВыражения);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// По направлению обхода настроим поля связи
	Если НаправлениеОбхода = УправлениеПроизводством.НаправлениеОбходаГрафаНазад() Тогда
		
		ПоляВершина = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("Вершина").Поля;
		ПоляСмежнаяВершина = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("СмежнаяВершина").Поля;
		
		ПоляВершина[0] = ПоляСмежнаяВершина[0];
		ПоляВершина[1] = ПоляСмежнаяВершина[1];
		
	КонецЕсли;

	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат УправлениеПроизводством.Граф(РезультатЗапроса);
	
КонецФункции

Функция ТекстЗапросаСписокДоступныхДляУдаленияЭтаповПроизводства() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.ПартияПроизводства КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ПартияПроизводства КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВТИсключаемыеЦепочки
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.ПартияПроизводства В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.ПартияПроизводства КАК ПартияПроизводства
	|			ИЗ
	|				ВТЭтапы КАК ВТЭтапы)
	|	И НЕ Т.Ссылка В (&МассивСсылок)
	|	И Т.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭтапы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы
	|ГДЕ
	|	НЕ ВТЭтапы.ПартияПроизводства В
	|				(ВЫБРАТЬ
	|					ВТИсключаемыеЦепочки.ПартияПроизводства
	|				ИЗ
	|					ВТИсключаемыеЦепочки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СхемыОбособления

Функция ПроверитьЗаполнитьНазначения(Объект, СхемаОбособленияКешированноеЗначение = Неопределено, ТолькоВРеквизитах = Ложь) Экспорт
	
	ОбновленоНазначение = Ложь;
	
	Если (СхемаОбособленияКешированноеЗначение = Неопределено
		ИЛИ Объект.Распоряжение <> СхемаОбособленияКешированноеЗначение.Распоряжение
		ИЛИ Объект.НазначениеПродукция <> СхемаОбособленияКешированноеЗначение.НазначениеПродукция) Тогда
		
		СхемаОбособления = Документы.ЗаказНаПроизводство2_2.СхемаОбособления(
										Объект.Распоряжение,
										Объект.НазначениеПродукция);
		
	Иначе
		СхемаОбособления = СхемаОбособленияКешированноеЗначение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СхемаОбособления.НазначениеМатериалы) Тогда
		НазначениеМатериалы = СхемаОбособления.НазначениеМатериалы;
	Иначе
		НазначениеМатериалы = Объект.Назначение;
	КонецЕсли;
	
	Если СхемаОбособления.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется Тогда
		НазначениеПолуфабрикаты = НазначениеМатериалы;
	Иначе
		НазначениеПолуфабрикаты = Объект.Назначение;
	КонецЕсли;
		
	Если Объект.НазначениеМатериалы <> НазначениеМатериалы Тогда
		Объект.НазначениеМатериалы = НазначениеМатериалы;
		ОбновленоНазначение = Истина;
	КонецЕсли;
	
	Если Объект.НазначениеПолуфабрикаты <> НазначениеПолуфабрикаты Тогда
		Объект.НазначениеПолуфабрикаты = НазначениеПолуфабрикаты;
		ОбновленоНазначение = Истина;
	КонецЕсли;
	
	Если ОбновленоНазначение И (НЕ ТолькоВРеквизитах) Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураДействий = Новый Структура();
		ПараметрыДействия = ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
			Объект);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства", ПараметрыДействия);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ОбеспечениеМатериаламиИРаботами, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат ОбновленоНазначение;
	
КонецФункции

#КонецОбласти

#Область КорректировкаЗаказа

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов -
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений:
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправочникСсылка.Номенклатура
//		* Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры
//		* Склад                - СправочникСсылка.Склады
//		* Серия                - СправочникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Склад");
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.Распоряжение   КАК Заказ,
		|	ТоварыКПоступлению.Номенклатура   КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Склад          КАК Склад,
		|	ТоварыКПоступлению.Серия          КАК Серия,
		|	СУММА(ТоварыКПоступлению.КОформлениюПриход
		|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Обороты(&НачПериод,&КонПериод,,
		|		Распоряжение В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.Распоряжение,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Склад,
		|	ТоварыКПоступлению.Серия");
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыМатериаловВПроизводство",
		"Распоряжение В (&МассивРаспоряжений)", Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПередачаВПереработку

Функция ТабличныеЧастиДляОформленияОтчетаПереработчика() Экспорт
	
	Результат = Новый Структура("ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами");
	
	Результат.ВыходныеИзделия =
		"ВЫБРАТЬ
		|	ВыходныеИзделияЭтапа.НомерСтроки                             КАК НомерСтроки,
		|	ВыходныеИзделияЭтапа.Ссылка                                  КАК Ссылка,
		|	ВыходныеИзделияЭтапа.КодСтроки                               КАК КодСтроки,
		|	ВыходныеИзделияЭтапа.Ссылка.НомерСледующегоЭтапа = 0         КАК ЭтоВыпускающийЭтап,
		|	ВыходныеИзделияЭтапа.Номенклатура                            КАК Номенклатура,
		|	ВыходныеИзделияЭтапа.Характеристика                          КАК Характеристика,
		|	ВыходныеИзделияЭтапа.Назначение                              КАК Назначение,
		|	ВыходныеИзделияЭтапа.Получатель                              КАК Получатель,
		|	ВыходныеИзделияЭтапа.СписатьНаРасходы                        КАК СписатьНаРасходы,
		|	ВыходныеИзделияЭтапа.СтатьяРасходов                          КАК СтатьяРасходов,
		|	ВыходныеИзделияЭтапа.АналитикаРасходов                       КАК АналитикаРасходов,
		|	ВыходныеИзделияЭтапа.АналитикаАктивовПассивов                КАК АналитикаАктивовПассивов,
		|	ВыходныеИзделияЭтапа.НастройкаСчетовУчета                    КАК НастройкаСчетовУчета,
		|	ВыходныеИзделияЭтапа.Упаковка                                КАК Упаковка,
		|	ВыходныеИзделияЭтапа.ДоляСтоимости                           КАК ДоляСтоимости,
		|	ВыходныеИзделияЭтапа.ДоляСтоимостиНаЕдиницу                  КАК ДоляСтоимостиНаЕдиницу,
		|	ВыходныеИзделияЭтапа.Количество                              КАК Количество,
		|	ВыходныеИзделияЭтапа.КоличествоУпаковок                      КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделияЭтапа
		|ГДЕ
		|	ВыходныеИзделияЭтапа.Ссылка В(&Этапы)
		|	И НЕ ВыходныеИзделияЭтапа.Отменено";
	
	ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделияЭтапа";
	ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
												|	//&СоединениеШтучныйТоварВМернойЕдинице";
	Результат.ВыходныеИзделия =
		СтрЗаменить(Результат.ВыходныеИзделия, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Результат.ВыходныеИзделия, "ВыходныеИзделияЭтапа", ПараметрыПрименения);	
	
	Результат.ПобочныеИзделия =
		"ВЫБРАТЬ
		|	ПобочныеИзделияЭтапа.НомерСтроки                             КАК НомерСтроки,
		|	ПобочныеИзделияЭтапа.Ссылка                                  КАК Ссылка,
		|	ПобочныеИзделияЭтапа.КодСтроки                               КАК КодСтроки,
		|	ПобочныеИзделияЭтапа.Ссылка.НомерСледующегоЭтапа = 0         КАК ЭтоВыпускающийЭтап,
		|	ПобочныеИзделияЭтапа.Номенклатура                            КАК Номенклатура,
		|	ПобочныеИзделияЭтапа.Характеристика                          КАК Характеристика,
		|	ПобочныеИзделияЭтапа.Назначение                              КАК Назначение,
		|	ПобочныеИзделияЭтапа.Получатель                              КАК Получатель,
		|	ПобочныеИзделияЭтапа.СписатьНаРасходы                        КАК СписатьНаРасходы,
		|	ПобочныеИзделияЭтапа.СтатьяРасходов                          КАК СтатьяРасходов,
		|	ПобочныеИзделияЭтапа.АналитикаРасходов                       КАК АналитикаРасходов,
		|	ПобочныеИзделияЭтапа.АналитикаАктивовПассивов                КАК АналитикаАктивовПассивов,
		|	ПобочныеИзделияЭтапа.НастройкаСчетовУчета                    КАК НастройкаСчетовУчета,
		|	ПобочныеИзделияЭтапа.Упаковка                                КАК Упаковка,
		|	ПобочныеИзделияЭтапа.СтатьяКалькуляции                       КАК СтатьяКалькуляции,
		|	ПобочныеИзделияЭтапа.Цена                                    КАК Цена,
		|	ПобочныеИзделияЭтапа.Количество                              КАК Количество,
		|	ПобочныеИзделияЭтапа.КоличествоУпаковок                      КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделияЭтапа
		|ГДЕ
		|	ПобочныеИзделияЭтапа.Ссылка В(&Этапы)
		|	И НЕ ПобочныеИзделияЭтапа.Отменено";
		
	ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделияЭтапа";
	ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
												|	//&СоединениеШтучныйТоварВМернойЕдинице";
	Результат.ПобочныеИзделия =
		СтрЗаменить(Результат.ПобочныеИзделия, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Результат.ПобочныеИзделия, "ПобочныеИзделияЭтапа", ПараметрыПрименения);	
	
	Результат.ОбеспечениеМатериаламиИРаботами =
		"ВЫБРАТЬ
		|	Обеспечение.НомерСтроки                КАК НомерСтроки,
		|	Обеспечение.Ссылка                     КАК Ссылка,
		|	Обеспечение.Номенклатура               КАК Номенклатура,
		|	Обеспечение.Характеристика             КАК Характеристика,
		|	
		|	ВЫБОР КОГДА Обеспечение.Обособленно ТОГДА
		|				Обеспечение.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                              КАК Назначение,
		|	
		|	Обеспечение.Упаковка                   КАК Упаковка,
		|	Обеспечение.СтатьяКалькуляции          КАК СтатьяКалькуляции,
		|	Обеспечение.Количество                 КАК Количество,
		|	Обеспечение.КоличествоУпаковок         КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
		|ГДЕ
		|	Обеспечение.Ссылка В(&Этапы)
		|	И НЕ Обеспечение.Отменено";
		
	ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение";
	ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
												|	//&СоединениеШтучныйТоварВМернойЕдинице";
	Результат.ОбеспечениеМатериаламиИРаботами =
		СтрЗаменить(
			Результат.ОбеспечениеМатериаламиИРаботами,
			ТекстИсходнаяТаблица,
			ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Результат.ОбеспечениеМатериаламиИРаботами, "Обеспечение", ПараметрыПрименения);	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЖурналДокументовПроизводства

// Возвращает таблицу используемых статусов документа учитывая зависимости от функциональных опций и иных параметров.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка().
//
Функция СтатусыДокументаИзменяемыеИзСписка() Экспорт
		
	Таблица = ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка();
	
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Возврат Таблица;
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭтапПроизводства2_2.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|ГДЕ
		|	НЕ ЭтапПроизводства2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И (ЭтапПроизводства2_2.Организация = &Организация
		|		ИЛИ &ВсеОрганизации)
		|	И (ЭтапПроизводства2_2.Подразделение = &Подразделение
		|		ИЛИ &ВсеПодразделения)";
	
	Запрос.УстановитьПараметр("ВсеОрганизации", Не ЗначениеЗаполнено(Параметры.Организация));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ВсеПодразделения", Не ЗначениеЗаполнено(Параметры.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	ТекстГиперссылки = НСтр("ru = 'Этапы производства';
							|en = 'Production stages'");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			"Документ.ЭтапПроизводства2_2.Форма.Диспетчирование");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			"Документ.ЭтапПроизводства2_2.Форма.Диспетчирование");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаТоварыДокумента(Отбор, ХозяйственнаяОперация) Экспорт

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                          КАК Распоряжение,
		|	Таблица.Номенклатура                                    КАК Номенклатура,
		|	Таблица.Характеристика                                  КАК Характеристика,
		|	ДанныеУчета.Назначение                                  КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя                       КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                                       КАК КодСтроки,
		|	ДанныеУчета.Серия                                       КАК Серия,
		|	Таблица.Количество                                      КАК Количество,
		|	Таблица.Упаковка                                        КАК Упаковка,
		|	ДАТАВРЕМЯ(1,1,1)                                        КАК ДатаОтгрузки,
		|	Таблица.Отменено                                        КАК Отменено,
		|	Таблица.СтатусУказанияСерий                             КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
		|	ЛОЖЬ                                                    КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                КАК Склад,
		|	Таблица.Цена * ЕСТЬNULL(Коэффициенты.КоэффициентПересчетаВВалютуУпр, 0) КАК Цена,
		|	Таблица.Сумма * ЕСТЬNULL(Коэффициенты.КоэффициентПересчетаВВалютуУпр, 0) КАК Сумма,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0)                    КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)                       КАК Заказано,
		|	ЛОЖЬ													КАК ПобочноеИзделие
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК Коэффициенты
		|	ПО Таблица.Ссылка.Валюта = Коэффициенты.Валюта
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И НЕ Таблица.Отменено
		|	И &Отбор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                          КАК Распоряжение,
		|	Таблица.Номенклатура                                    КАК Номенклатура,
		|	Таблица.Характеристика                                  КАК Характеристика,
		|	ДанныеУчета.Назначение                                  КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя                       КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                                       КАК КодСтроки,
		|	ДанныеУчета.Серия                                       КАК Серия,
		|	Таблица.Количество                                      КАК Количество,
		|	Таблица.Упаковка                                        КАК Упаковка,
		|	ДАТАВРЕМЯ(1,1,1)                                        КАК ДатаОтгрузки,
		|	Таблица.Отменено                                        КАК Отменено,
		|	Таблица.СтатусУказанияСерий                             КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
		|	ЛОЖЬ                                                    КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                КАК Склад,
		|	0														КАК Цена,
		|	0														КАК Сумма,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0)                    КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)                       КАК Заказано,
		|	ИСТИНА													КАК ПобочноеИзделие
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И НЕ Таблица.Отменено
		|	И &Отбор";
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ДанныеУчета.Назначение               КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя    КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОтгрузки                 КАК ДатаОтгрузки,
		|	ЛОЖЬ                                 КАК Отменено,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	Таблица.ВариантОбеспечения           КАК ВариантОбеспечения,
		|	Таблица.Обособленно                  КАК Обособленно,
		|	ЕСТЬNULL(Таблица.Ссылка.ПартияПроизводства.ГруппаПродукции,
		|				ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаПродукции,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|		И Таблица.Номенклатура   = ДанныеУчета.Номенклатура
		|		И Таблица.Характеристика = ДанныеУчета.Характеристика
		|		И Таблица.Серия          = ДанныеУчета.Серия
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И НЕ Таблица.Отменено
		|	И &Отбор";
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ДанныеУчета.Назначение               КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя    КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	ДанныеУчета.Серия                    КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОперации                 КАК ДатаОтгрузки,
		|	ЛОЖЬ                                 КАК Отменено,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
		|	ЛОЖЬ                                 КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
		|	Таблица.Получатель                   КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И &Отбор";
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Ошибка в процедуре %1. Обратитесь к администратору.';
								|en = 'Error in procedure %1. Please contact your administrator.'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ЭтапПроизводства2_2.ТекстЗапросаТоварыДокумента");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.КоличествоУпаковок = Ложь;
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(ТекстЗапроса, "Таблица", ПараметрыПрименения);
	
	ТекстОтбора = "ИСТИНА";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		Для каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция МаксимальнаяДатаВТЧ(КоллекцияСтрок, ПолеДата) Экспорт
	
	МаксимальнаяДата = '000101010000';
	
	Для каждого Строка Из КоллекцияСтрок Цикл 
		МаксимальнаяДата = Макс(МаксимальнаяДата, Строка[ПолеДата]);
	КонецЦикла;
	
	Возврат МаксимальнаяДата
	
КонецФункции

Процедура ПодготовитьДанныеСпецификацииКСозданиюЭтапов(ДанныеСпецификации, ДанныеПартии, ТочкаДеления)
	
	// Добавление полей
	ДанныеСпецификации.Вставить("Распоряжение", ДанныеПартии.Распоряжение);
	ДанныеСпецификации.Вставить("НазначениеПродукция", ДанныеПартии.НазначениеПродукция);
	ДанныеСпецификации.Вставить("ПланироватьНеРанееКодЭтапа", 0);
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	Для Сч = 1 По 2 Цикл
		
		ИмяТаблицы = ?(Сч = 1, "ВыходныеИзделия", "ВозвратныеОтходы");
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("Назначение") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("ЭтапПотребитель") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("Получатель") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить("Получатель", Новый ОписаниеТипов(ТипыПолучатель));
			ДанныеСпецификации[ИмяТаблицы].ЗагрузитьКолонку(
				ДанныеСпецификации[ИмяТаблицы].ВыгрузитьКолонку("Склад"), "Получатель");
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("КодЭтапаПолучателя") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"КодЭтапаПолучателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		КонецЕсли;
		
	КонецЦикла;
	
	// Кодирование этапов
	Если ДанныеСпецификации.Этапы.Колонки.Найти("КодЭтапа") = Неопределено Тогда
		
		ДанныеСпецификации.Этапы.Колонки.Добавить(
			"КодЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		КодЭтапа = 1;
		Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
			Строка.КодЭтапа = КодЭтапа;
			КодЭтапа = КодЭтапа + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	// Связывание данных по выпуску ПФ на этапе
	СтПоискаПФНаЭтапе = Новый Структура("СпособПолученияМатериала, СпецификацияРемонта",
		Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе,
		Справочники.РесурсныеСпецификации.ПустаяСсылка());
	СтПоискаНХЭтап = Новый Структура("Номенклатура, Характеристика, Этап");
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтПоискаПФНаЭтапе) Цикл
		
		НайденнаяСтрока = ДанныеСпецификации.Этапы.Найти(Строка.Этап, "Этап");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КодЭтапа = НайденнаяСтрока.КодЭтапа;
		Остаток = Строка.Количество;
		
		СтПоискаНХЭтап.Номенклатура = Строка.Номенклатура;
		СтПоискаНХЭтап.Характеристика = Строка.Характеристика;
		СтПоискаНХЭтап.Этап = Строка.ИсточникПолученияПолуфабриката;
		
		Для каждого СтрокаВыпуск Из ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтПоискаНХЭтап) Цикл
			
			Если СтрокаВыпуск.Количество > Остаток Тогда
				НоваяСтрока = ДанныеСпецификации.ВозвратныеОтходы.Вставить(
					ДанныеСпецификации.ВозвратныеОтходы.Индекс(СтрокаВыпуск)+1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуск);
				НоваяСтрока.Количество = Остаток;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - Остаток;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаВыпуск, СтруктураДействий, КэшированныеЗначения);
				
				СтрокаЗаполнить = НоваяСтрока;
			Иначе
				СтрокаЗаполнить = СтрокаВыпуск;
			КонецЕсли;
			
			СтрокаЗаполнить.Получатель = ?(Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа,
				Строка.Подразделение,
				Строка.Склад);
			СтрокаЗаполнить.КодЭтапаПолучателя = КодЭтапа;
			
			Остаток = Остаток - СтрокаЗаполнить.Количество;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполнение желаемой даты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", ДанныеСпецификации.Спецификация);
	Если ЗначениеЗаполнено(ТочкаДеления) Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(
			|		Этапы.Распоряжение.НачатьНеРанее,
			|		СЕКУНДА,
			|		НормативныйГрафик.ДлительностьДоЗапуска + НормативныйГрафик.Ресурсоемкость) КАК Дата
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ 
			|	Этапы.Ссылка = &Ссылка
			|	И Этапы.Спецификация <> &Спецификация";
		Запрос.УстановитьПараметр("Ссылка", ТочкаДеления);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(
			|		ДОБАВИТЬКДАТЕ(
			|			Этапы.Распоряжение.НачатьНеРанее,
			|			СЕКУНДА,
			|			НормативныйГрафик.ДлительностьДоЗапуска)) КАК Дата
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ 
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Спецификация <> &Спецификация
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(Этапы.Ссылка) > 0";
		Запрос.УстановитьПараметр("ПартияПроизводства", ДанныеПартии.ПартияПроизводства);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НачальнаяДата = Выборка.Дата;
		Если НачальнаяДата < ТекущаяДатаСеанса() Тогда
			НачальнаяДата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ДанныеСпецификации.Этапы.ЗаполнитьЗначения('00010101', "ДатаОтгрузки");
		ДанныеСпецификации.Этапы.ЗаполнитьЗначения(Истина, "НеОтгружатьЧастями");
		ДанныеСпецификации.Этапы.Сортировать("НомерЭтапа, НомерСледующегоЭтапа");
		
		СтруктураПоиска = Новый Структура("НомерЭтапа");
		Для Индекс = 0 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
			
			Этап = ДанныеСпецификации.Этапы[Индекс];
			
			Если ДанныеСпецификации.Этапы.Найти(Этап.НомерЭтапа, "НомерСледующегоЭтапа") = Неопределено Тогда
				Этап.ДатаОтгрузки = НачальнаяДата;
			КонецЕсли;
			Если ЗначениеЗаполнено(Этап.ДатаОтгрузки )
					И Этап.НомерСледующегоЭтапа <> 0 Тогда
				
				СтруктураПоиска.НомерЭтапа = Этап.НомерСледующегоЭтапа;
				Для каждого СледующийЭтап Из ДанныеСпецификации.Этапы.НайтиСтроки(СтруктураПоиска) Цикл
					Если ЗначениеЗаполнено(СледующийЭтап.ДатаОтгрузки) Тогда
						СледующийЭтап.ДатаОтгрузки = Мин(
							СледующийЭтап.ДатаОтгрузки,
							Этап.ДатаОтгрузки + Этап.ДлительностьЭтапаВСекундах);
					Иначе
						СледующийЭтап.ДатаОтгрузки =
							Этап.ДатаОтгрузки + Этап.ДлительностьЭтапаВСекундах;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнитьДанныеСпецификаций(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСпецификации),
		ДанныеПартии.Распоряжение);
	
КонецПроцедуры

// Дополняет данные спецификаций
// 
// Параметры:
//  ДанныеСпецификаций - Массив из Структура - массив из структур:
// * Этапы - ТаблицаЗначений -
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2
Процедура ДополнитьДанныеСпецификаций(ДанныеСпецификаций, Распоряжение)
	
	НомерПартииЗапуска = Документы.ЗаказНаПроизводство2_2.НомераПартийЗапуска(Распоряжение)[Распоряжение];
	СхемыОбособления = Документы.ЗаказНаПроизводство2_2.СхемыОбособленияЗаказов(Распоряжение);
	
	ЭтапыПоКодам = Новый Соответствие;
	ЗаполнитьНазначения = Новый Массив;
	ЗаполнитьПлНеРанее = Новый Массив;
	ИменаТЧ = СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы", ",");
	
	НазначениеПобочногоВыпуска = Неопределено;
	НазначениеПродукцияРазборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "НазначениеПродукция");
	
	ПартииПроизводства = Новый ТаблицаЗначений();
	ПартииПроизводства.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	ПартииПроизводства.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
	ПартииПроизводства.Колонки.Добавить("ПартияПроизводства", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
	Для каждого Реквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		ПартииПроизводства.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для каждого ДанныеСпецификации Из ДанныеСпецификаций Цикл
		
		// Добавление полей
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
		ДанныеСпецификации.Этапы.Колонки.Добавить("Распоряжение", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства");
		ДанныеСпецификации.Этапы.Колонки.Добавить("ПартияПроизводства", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
		ДанныеСпецификации.Этапы.Колонки.Добавить("ЭтапПроизводства", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
		ДанныеСпецификации.Этапы.Колонки.Добавить("Назначение", ОписаниеТипов);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НазначениеПродукция", ОписаниеТипов);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НазначениеМатериалы", ОписаниеТипов);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НазначениеПолуфабрикаты", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НомерПартииЗапуска", ОписаниеТипов);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НомерЭтапаВПартииЗапуска", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2, Дата",,, Новый КвалификаторыДаты);
		ДанныеСпецификации.Этапы.Колонки.Добавить("ПланироватьНеРанее", Новый ОписаниеТипов("Булево"));
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
		ДанныеСпецификации.Распоряжение = ОписаниеТипов.ПривестиЗначение(ДанныеСпецификации.Распоряжение);
		
		// Подготовка к созданию партии
		ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку();
		
		НоваяПартия = ПартииПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(
			НоваяПартия,
			ПоляПартии(ДанныеСпецификации, ДанныеСпецификации.ОсновноеИзделие));
		НоваяПартия.Код = НомерПартииЗапуска;
		НоваяПартия.Ссылка = ПартияПроизводства;
		
		// Заполнение этапов
		НазначениеПродукция = ДанныеСпецификации.НазначениеПродукция;
		СхемаОбособления = СхемыОбособления[Распоряжение][НазначениеПродукция];
		НомерЭтапаВПартииЗапуска = 1;
		
		ДанныеСпецификации.Вставить("ПартияПроизводства", ПартияПроизводства);
		ДанныеСпецификации.Вставить("СхемаОбособления", СхемаОбособления);
		
		Для каждого ДанныеЭтапа Из ДанныеСпецификации.Этапы Цикл
			
			ДанныеЭтапа.Распоряжение             = Распоряжение;
			ДанныеЭтапа.НазначениеПродукция      = НазначениеПродукция;
			ДанныеЭтапа.ПартияПроизводства       = ПартияПроизводства;
			ДанныеЭтапа.НомерПартииЗапуска       = НомерПартииЗапуска;
			ДанныеЭтапа.НомерЭтапаВПартииЗапуска = НомерЭтапаВПартииЗапуска;
			ДанныеЭтапа.ЭтапПроизводства         = Документы.ЭтапПроизводства2_2.ПолучитьСсылку();
			ДанныеЭтапа.Назначение               = Справочники.Назначения.ПолучитьСсылку();
			
			Документы.ЭтапПроизводства2_2.ПроверитьЗаполнитьНазначения(ДанныеЭтапа, СхемаОбособления, Истина);
			
			ЭтапыПоКодам.Вставить(ДанныеЭтапа.КодЭтапа, ДанныеЭтапа);
			НомерЭтапаВПартииЗапуска = НомерЭтапаВПартииЗапуска + 1;
			
			
		КонецЦикла;
		
		НомерПартииЗапуска = НомерПартииЗапуска + 1;
		
		// Подготовка к заполнению ссылок на этапы
		Для каждого ИмяТЧ Из ИменаТЧ Цикл
			Для каждого Строка Из ДанныеСпецификации[ИмяТЧ] Цикл
				Если ЗначениеЗаполнено(Строка.КодЭтапаПолучателя) Тогда
					ЗаполнитьНазначения.Добавить(Строка);
				ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
					Строка.Назначение = Справочники.Назначения.ПустаяСсылка();
				ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Назначение) Тогда
					
					Если ДанныеСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
						И ИмяТЧ = "ВыходныеИзделия" Тогда
						
						Строка.Назначение = НазначениеПродукцияРазборка;
						
					Иначе
						
						Если НазначениеПобочногоВыпуска = Неопределено Тогда
							// Подбор назначения для побочного выпуска
							ШаблонНазначенияДавальческогоВыпуска = Документы.ЭтапПроизводства2_2.ШаблонНазначенияПоУмолчаниюДляПобочныхИзделий(Распоряжение);
							НазначениеПобочногоВыпуска = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначенияДавальческогоВыпуска);
						КонецЕсли;
						Строка.Назначение = НазначениеПобочногоВыпуска;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если ЗначениеЗаполнено(ДанныеСпецификации.ПланироватьНеРанееКодЭтапа) Тогда
			ЗаполнитьПлНеРанее.Добавить(ДанныеСпецификации);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из ЗаполнитьНазначения Цикл
		Строка.ЭтапПотребитель = ЭтапыПоКодам[Строка.КодЭтапаПолучателя].ЭтапПроизводства;
		Строка.Назначение = ЭтапыПоКодам[Строка.КодЭтапаПолучателя].НазначениеПолуфабрикаты;
	КонецЦикла;
	Для каждого ДанныеСпецификации Из ЗаполнитьПлНеРанее Цикл
		Этап = ДанныеСпецификации.Этапы.Найти(1, "НомерЭтапа");
		Если Этап <> Неопределено Тогда
			Этап.ПланироватьНеРанее = ЭтапыПоКодам[ДанныеСпецификации.ПланироватьНеРанееКодЭтапа].ЭтапПроизводства;
		КонецЕсли;
	КонецЦикла;
	
	Справочники.ПартииПроизводства.ЗаполнитьПартиюПроизводстваВКоллекции(ПартииПроизводства, Ложь, Ложь);
	
	ЭтапПроизводства2_2Локализация.ДополнитьДанныеСпецификаций(ДанныеСпецификаций);
	
КонецПроцедуры

Процедура ЗаблокироватьЭтапы(Этапы)
	
	ЗначенияДляБлокировки = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	ЗначенияДляБлокировки.Колонки.Добавить("Ссылка", ОписаниеТипов);
	
	Для каждого Ссылка Из Этапы Цикл
		ЗначенияДляБлокировки.Добавить().Ссылка = Ссылка;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	ЭлементБлокировки.ИсточникДанных = ЗначенияДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Функция возвращает номер этапа на производство, который должен быть присвоен новому этапу.
//
// Параметры:
//  ПартияПроизводства	- ДокументСсылка.ЭтапПроизводства2_2 - идентификатор цепочки этапов.
//
// Возвращаемое значение:
//   - Число - номер этапа.
//
Функция НовыйНомерЭтапаВПартииЗапуска(ПартияПроизводства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЦепочкаЭтапов.НомерЭтапаВПартииЗапуска), 0) + 1 КАК СледующийНомерЭтапаВПартииЗапуска
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЦепочкаЭтапов
	|ГДЕ
	|	ЦепочкаЭтапов.ПартияПроизводства = &ПартияПроизводства
	|");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СледующийНомерЭтапаВПартииЗапуска;
	
КонецФункции

Функция ПараметрыРедактированияЭтапа() Экспорт
	
	ПараметрыРедактированияЭтапа = УправлениеПроизводством.ПараметрыРедактированияЭтапа("Объект");
	Возврат ПараметрыРедактированияЭтапа;
	
КонецФункции

Функция ПолучитьНормативыПоСпецификации(ПартияПроизводства, ПолучатьМатериалыПоТребованию, ОкруглятьКоличествоШтучныхТоваров, ПереченьДанных = Неопределено, Отбор = Неопределено) Экспорт
	
	ДанныеСпецификации = Неопределено;
	
	Если ПартияПроизводства.Количество > 0
		И Не ПартияПроизводства.Номенклатура.Пустая()
		И Не ПартияПроизводства.Спецификация.Пустая() Тогда
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ПартияПроизводства,
			"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Спецификация, Номенклатура, Характеристика, Количество");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
			МенеджерВременныхТаблиц,
			ПартияПроизводства.Распоряжение);
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
			ПереченьДанных,
			МенеджерВременныхТаблиц);
		
		ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
		ПараметрыВыборки.СпособРасчетаМатериалов             = ?(ПолучатьМатериалыПоТребованию,
			Перечисления.СпособыРасчетаМатериалов.МаксимальноеПотребление,
			Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление);
		ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров   = ОкруглятьКоличествоШтучныхТоваров;
		
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки,
			Отбор);
		
	КонецЕсли;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

Процедура СкорректироватьТаблицы(ТаблицаИсходная, ТаблицаКорректировки, СтруктураОтбора, ПоляОтбора = Неопределено)
	
	ТекущийИндексКорректировки      = 0;
	МаксимальныйИндексКорректировки = ТаблицаКорректировки.Количество() - 1;
	Пока МаксимальныйИндексКорректировки > -1 Цикл
		
		Корректировка = ТаблицаКорректировки[ТекущийИндексКорректировки];
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Корректировка, ПоляОтбора);
		
		ИсходныеСтроки          = ТаблицаИсходная.НайтиСтроки(СтруктураОтбора);
		МаксимальныйИндексСтрок = ИсходныеСтроки.ВГраница();
		Пока МаксимальныйИндексСтрок > -1 Цикл
			
			ИсходнаяСтрока = ИсходныеСтроки[0];
			
			Количество = Мин(ИсходнаяСтрока.Количество, Корректировка.Количество);
			
			Корректировка.Количество  = Корректировка.Количество  - Количество;
			ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Количество;
						
			Если ИсходнаяСтрока.Количество > 0 Тогда
				Прервать;	
			Иначе
				ИсходныеСтроки.Удалить(0);
				ТаблицаИсходная.Удалить(ИсходнаяСтрока);	
			КонецЕсли;
			
			Если Корректировка.Количество = 0 Тогда
				Прервать;
			КонецЕсли;	
			
			МаксимальныйИндексСтрок = МаксимальныйИндексСтрок - 1;
			
		КонецЦикла;
		
		Если Корректировка.Количество > 0 Тогда
			ТекущийИндексКорректировки = ТекущийИндексКорректировки + 1;	
		Иначе
			ТаблицаКорректировки.Удалить(Корректировка);	
		КонецЕсли;	
		
		МаксимальныйИндексКорректировки = МаксимальныйИндексКорректировки - 1;
			
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РаспределитьКоличество(ТаблицаИсточник, ТаблицаПриемник, СтруктураОтбора, Количество)
	
	НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаИсточник Из НайденныеСтроки Цикл
		
		СтрокаПриемник = ТаблицаПриемник.Добавить();		
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, "Количество");
		СтрокаПриемник.Количество = Мин(Количество, СтрокаИсточник.Количество);
				
		Количество = Количество - СтрокаПриемник.Количество;
		СтрокаИсточник.Количество = СтрокаИсточник.Количество - СтрокаПриемник.Количество;
				
		Если СтрокаИсточник.Количество = 0 Тогда
			ТаблицаИсточник.Удалить(СтрокаИсточник);	
		КонецЕсли;
						
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;			
				
	КонецЦикла;	
	
КонецПроцедуры	

Функция ИспользуетсяОтметкаВыполненныхТрудозатрат(Объект) Экспорт
	
	Если Не Объект.ОперацияКакРаспоряжениеВыработки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИспользоватьПооперационноеУправление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение,
															"ИспользоватьПооперационноеУправление");
	
	Если Не ИспользоватьПооперационноеУправление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТипСвязиПоследователь() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ТипСвязиПотребитель() Экспорт
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a405867a-8081-4f83-a8df-c19b1f206b2b");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭтапПроизводства2_2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет количество Запланирвано и Выполнено в упаковках или базовых единицах обрабатываемого изделия.
	|Заполняет новые реквизиты табличных частей ""Обеспечение"", ""Расход"", ""Экономия"", ""Выходные изделия"" и ""Побочные изделия"".
	|Заполняет новые табличные части с видами запасов
	|Заполняет реквизит ""Настройка счетов учета""';
	|en = 'Fills in quantity Planned and Executed in the packages or in the base units of workpiece.
	|Fills in new attributes of the ""Fulfillment"", ""Consumption"", ""Saving"", ""Finished products"" and ""By-products"" tables.
	|Fills in new tables with inventory owner attributes.
	|Fills in the ""Ledger account settings"" attribute'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.СгенерироватьНедостающиеКлючиАналитикиУчетаНоменклатуры";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОтражениеДокументовВМеждународномУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОтражениеДокументовВРеглУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- Локализация

#КонецОбласти

#Область СгенерироватьНедостающиеКлючиАналитикиУчетаНоменклатуры

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ЭтапПроизводства2_2.СгенерироватьНедостающиеКлючиАналитикиУчетаНоменклатуры";
	Обработчик.Версия = "2.5.7.195";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b60b2366-f2b1-444d-be1c-a3bd4088f1ac");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭтапПроизводства2_2.ЗарегистрироватьДанныеКГенерацииКлючейАналитикиУчетаНоменклатуры";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Создает недостающие ключи аналитики учета номенклатуры';
									|en = 'Creates missing item attribute keys'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОтражениеДокументовВМеждународномУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОтражениеДокументовВРеглУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- Локализация

#КонецОбласти

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ЭтапПроизводства2_2";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	#Область ТекстЗапросаДанныхКОбработке
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Ссылка
	|ИЗ
	|	(
		// Удаление назначений выходных изделий
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И (ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаТоваров.СписатьНаРасходы = ИСТИНА)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Удаление назначений побочных изделий
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И (ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаТоваров.СписатьНаРасходы = ИСТИНА)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение периода выходных изделий
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение периода побочных изделий
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение периода обеспечения
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение периода расхода
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение периода экономии
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение кор. аналитики учета номенклатуры обеспечения
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|				ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение кор. аналитики учета номенклатуры расхода
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|				ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение кор. аналитики учета номенклатуры экономии
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|				ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).Подразделение =
	|				ТаблицаТоваров.Подразделение
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение ТЧ ВидыЗапасовИзделия по ТЧ ВыходныеИзделия
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|		И НЕ ТаблицаТоваров.УдалитьВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ
	|
	// Заполнение ТЧ ВидыЗапасовИзделия по ТЧ ПобочныеИзделия
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|		И НЕ ТаблицаТоваров.УдалитьВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Перенос видов запасов обеспечения
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.УдалитьВидыЗапасовОбеспечение КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Перенос видов запасов экономии
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.УдалитьВидыЗапасовЭкономия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение видов запасов расхода
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		(
	// Необходимо израсходовать
	|		ВЫБРАТЬ
	|			ТаблицаТоваров.Ссылка												КАК Ссылка,
	|			ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			ТаблицаТоваров.Количество										КАК Количество
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|			И ТаблицаТоваров.Номенклатура.ТипНоменклатуры В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	// Подобрано видов запасов
	|		ВЫБРАТЬ
	|			ТаблицаТоваров.Ссылка												КАК Ссылка,
	|			ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			-ТаблицаТоваров.Количество										КАК Количество
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|			И ТаблицаТоваров.ХозяйственнаяОперация =
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|		) КАК ТаблицаТоваров
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаТоваров.Ссылка
	|
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаТоваров.Количество) > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение количества упаковок
	|	ВЫБРАТЬ
	|		ЭтапПроизводства2_2.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|	ГДЕ
	|		ЭтапПроизводства2_2.КоличествоУпаковокПлан = 0
	|		И ЭтапПроизводства2_2.УдалитьЗапланировано <> 0
	|		И ЭтапПроизводства2_2.ТипПроизводственногоПроцесса В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение идентификатора строки обеспечения
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.ИдентификаторСтроки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение идентификатора строки расхода
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.ИдентификаторСтроки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение идентификатора фин. записи в таблице видов запасов изделий
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|			Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.ИдентификаторФинЗаписи = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение идентификатора фин. записи в таблице видов запасов материалов
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|			Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.ИдентификаторФинЗаписи = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериаловСерии КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение подразделения в ТЧ
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И ТаблицаТоваров.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение настройки счетов учета
	|	
	|	ВЫБРАТЬ
	|		ЭтапПроизводства.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|	ГДЕ
	|		ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабЧастьЭкономияМатериалов
	|			ГДЕ
	|				ТабЧастьЭкономияМатериалов.Ссылка = ЭтапПроизводства.Ссылка
	|				И ТабЧастьЭкономияМатериалов.УдалитьСчетУчета <> &СчетУчетаПустаяСсылка
	|				И ТабЧастьЭкономияМатериалов.НастройкаСчетовУчета = &НастройкиСчетовУчетаПустаяСсылка)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабЧастьПобочныеИзделия
	|			ГДЕ
	|				ТабЧастьПобочныеИзделия.Ссылка = ЭтапПроизводства.Ссылка
	|				И ТабЧастьПобочныеИзделия.УдалитьСчетУчета <> &СчетУчетаПустаяСсылка
	|				И ТабЧастьПобочныеИзделия.НастройкаСчетовУчета = &НастройкиСчетовУчетаПустаяСсылка)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабЧастьВыходныеИзделия
	|			ГДЕ
	|				ТабЧастьВыходныеИзделия.Ссылка = ЭтапПроизводства.Ссылка
	|				И ТабЧастьВыходныеИзделия.УдалитьСчетУчета <> &СчетУчетаПустаяСсылка
	|				И ТабЧастьВыходныеИзделия.НастройкаСчетовУчета = &НастройкиСчетовУчетаПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	//
	|	ВЫБРАТЬ 1
	|
	|	) КАК ТаблицаТоваров
	|";
	
	Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"ВЫБРАТЬ 1",
						ОбеспечениеВДокументахСервер.ТекстЗапросаРегистрацииДокументовКОбработке(
							"Документ.ЭтапПроизводства2_2", "ОбеспечениеМатериаламиИРаботами"));
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("НастройкиСчетовУчетаПустаяСсылка", Справочники.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка());
	Запрос.УстановитьПараметр("СчетУчетаПустаяСсылка", РеглУчетКлиентСервер.СсылкаПланСчетов());
	КОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, КОбработке);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ЭтапПроизводства2_2;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	#Область ВспомогательныеТаблицы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапПроизводства2_2ВыходныеИзделия.Ссылка КАК Ссылка,
		|	""ВыходныеИзделия"" КАК ТабЧасть,
		|	ЭтапПроизводства2_2ВыходныеИзделия.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ЭтапПроизводства2_2ВыходныеИзделия
		|ГДЕ
		|	ЭтапПроизводства2_2ВыходныеИзделия.Ссылка В (&Ссылки)
		|	И (ЭтапПроизводства2_2ВыходныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ИЛИ ЭтапПроизводства2_2ВыходныеИзделия.СписатьНаРасходы = ИСТИНА)
		|	И ЭтапПроизводства2_2ВыходныеИзделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭтапПроизводства2_2ПобочныеИзделия.Ссылка,
		|	""ПобочныеИзделия"",
		|	ЭтапПроизводства2_2ПобочныеИзделия.НомерСтроки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ЭтапПроизводства2_2ПобочныеИзделия
		|ГДЕ
		|	ЭтапПроизводства2_2ПобочныеИзделия.Ссылка В (&Ссылки)
		|	И (ЭтапПроизводства2_2ПобочныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ИЛИ ЭтапПроизводства2_2ПобочныеИзделия.СписатьНаРасходы = ИСТИНА)
		|	И ЭтапПроизводства2_2ПобочныеИзделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ПартияПроизводства        КАК ПартияПроизводства,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Упаковка) = 1
		|			ТОГДА МИНИМУМ(ВложенныйЗапрос.Упаковка)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                     КАК Упаковка,
		|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВложенныйЗапрос.Количество)         КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Документ.ПартияПроизводства КАК ПартияПроизводства,
		|		ТабличнаяЧасть.Упаковка КАК Упаковка,
		|		ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|		ТабличнаяЧасть.Количество КАК Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Документ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|			ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|				И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|				И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|	ГДЕ
		|		Документ.ПартияПроизводства В
		|				(ВЫБРАТЬ
		|					Т.ПартияПроизводства КАК ПартияПроизводства
		|				ИЗ
		|					Документ.ЭтапПроизводства2_2 КАК Т
		|				ГДЕ
		|					Т.Ссылка В (&Ссылки)
		|					И Т.ТипПроизводственногоПроцесса В (
		|							ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)))
		|		И Документ.НомерСледующегоЭтапа = 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Документ.ПартияПроизводства,
		|		ТабличнаяЧасть.Упаковка,
		|		ТабличнаяЧасть.КоличествоУпаковок,
		|		ТабличнаяЧасть.Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Документ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|			ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|				И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|				И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|	ГДЕ
		|		Документ.ПартияПроизводства В
		|				(ВЫБРАТЬ
		|					Т.ПартияПроизводства КАК ПартияПроизводства
		|				ИЗ
		|					Документ.ЭтапПроизводства2_2 КАК Т
		|				ГДЕ
		|					Т.Ссылка В (&Ссылки)
		|					И Т.ТипПроизводственногоПроцесса В (
		|							ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)))
		|		И Документ.НомерСледующегоЭтапа = 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Документ.ПартияПроизводства,
		|		ТабличнаяЧасть.Упаковка,
		|		ТабличнаяЧасть.КоличествоУпаковок,
		|		ТабличнаяЧасть.Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Документ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|			ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|				И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|				И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|	ГДЕ
		|		Документ.ПартияПроизводства В
		|				(ВЫБРАТЬ
		|					Т.ПартияПроизводства КАК ПартияПроизводства
		|				ИЗ
		|					Документ.ЭтапПроизводства2_2 КАК Т
		|				ГДЕ
		|					Т.Ссылка В (&Ссылки)
		|					И Т.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ПартияПроизводства
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0";
	
	Запрос.УстановитьПараметр("Ссылки", ОбновляемыеДанные.ВыгрузитьКолонку("Ссылка"));
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	ТаблицаНазначений = МассивРезультатов[0].Выгрузить(); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	ТаблицаНазначений.Индексы.Добавить("Ссылка");
	
	ТаблицаИзделия = МассивРезультатов[1].Выгрузить();
	ТаблицаИзделия.Индексы.Добавить("ПартияПроизводства");
	
	#КонецОбласти
	
	#Область ТекстыЗапросаДанныеКОбработке
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ТекстЗапросаОбновляемыеДанные
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьПериодВыходныеИзделия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьПериодВыходныеИзделия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьПериодПобочныеИзделия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьПериодПобочныеИзделия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаУдалитьНазначения
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2ВыходныеИзделия.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УдалитьНазначения
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ЭтапПроизводства2_2ВыходныеИзделия
	|ГДЕ
	|	(ЭтапПроизводства2_2ВыходныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ ЭтапПроизводства2_2ВыходныеИзделия.СписатьНаРасходы = ИСТИНА)
	|	И ЭтапПроизводства2_2ВыходныеИзделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ЭтапПроизводства2_2ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбновляемыеДанные.Ссылка КАК Ссылка
	|			ИЗ
	|				ОбновляемыеДанные КАК ОбновляемыеДанные)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапПроизводства2_2ВыходныеИзделия.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2ПобочныеИзделия.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ЭтапПроизводства2_2ПобочныеИзделия
	|ГДЕ
	|	(ЭтапПроизводства2_2ПобочныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ ЭтапПроизводства2_2ПобочныеИзделия.СписатьНаРасходы = ИСТИНА)
	|	И ЭтапПроизводства2_2ПобочныеИзделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ЭтапПроизводства2_2ПобочныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбновляемыеДанные.Ссылка КАК Ссылка
	|			ИЗ
	|				ОбновляемыеДанные КАК ОбновляемыеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьПериодОбеспечения
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьПериодОбеспечения
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьПериодЭкономия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьПериодЭкономия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьПериодРасход
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьПериодРасход
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.Период = ДАТАВРЕМЯ(1,1,1)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьКорАналитикуОбеспечение
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьКорАналитикуОбеспечение
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|					ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьКорАналитикуРасход
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьКорАналитикуРасход
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|					ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьКорАналитикуЭкономия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьКорАналитикуЭкономия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|					ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|			И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).Подразделение =
	|					ТаблицаТоваров.Подразделение
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьВЗВыходныеИзделия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьВЗВыходныеИзделия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|			И НЕ ТаблицаТоваров.УдалитьВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьВЗПобочныеИзделия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьВЗПобочныеИзделия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|			И НЕ ТаблицаТоваров.УдалитьВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьВЗМатериалы
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьВЗМатериалы
	|ИЗ
	|	(
	// Перенос видов запасов обеспечения
	|	ВЫБРАТЬ
	|		ОбновляемыеДанные.Ссылка КАК Ссылка
	|	ИЗ
	|		ОбновляемыеДанные КАК ОбновляемыеДанные
	|	ГДЕ
	|		ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.УдалитьВидыЗапасовОбеспечение КАК ТаблицаТоваров
	|			ГДЕ
	|				ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|				И ТаблицаТоваров.Ссылка.Проведен
	|				И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|			)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Перенос видов запасов экономии
	|	ВЫБРАТЬ
	|		ОбновляемыеДанные.Ссылка КАК Ссылка
	|	ИЗ
	|		ОбновляемыеДанные КАК ОбновляемыеДанные
	|	ГДЕ
	|		ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.УдалитьВидыЗапасовЭкономия КАК ТаблицаТоваров
	|			ГДЕ
	|				ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|				И ТаблицаТоваров.Ссылка.Проведен
	|				И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|			)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Заполнение видов запасов расхода
	|	ВЫБРАТЬ
	|		ОбновляемыеДанные.Ссылка КАК Ссылка
	|	ИЗ
	|		(
	// Необходимо израсходовать
	|		ВЫБРАТЬ
	|			ТаблицаТоваров.Ссылка												КАК Ссылка,
	|			ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			ТаблицаТоваров.Количество										КАК Количество
	|		ИЗ
	|			ОбновляемыеДанные КАК ОбновляемыеДанные
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|			ПО ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|		
	|		ГДЕ
	|			ТаблицаТоваров.Номенклатура.ТипНоменклатуры В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	// Подобрано видов запасов
	|		ВЫБРАТЬ
	|			ТаблицаТоваров.Ссылка												КАК Ссылка,
	|			ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			-ТаблицаТоваров.Количество										КАК Количество
	|		ИЗ
	|			ОбновляемыеДанные КАК ОбновляемыеДанные
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТаблицаТоваров
	|			ПО ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|		ГДЕ
	|			ТаблицаТоваров.ХозяйственнаяОперация =
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус В(
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|		) КАК ОбновляемыеДанные
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОбновляемыеДанные.Ссылка
	|
	|	ИМЕЮЩИЕ
	|		СУММА(ОбновляемыеДанные.Количество) > 0
	|	) КАК ОбновляемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьИдентификаторСтрокиОбеспечение
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка				КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА									КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьИдентификаторСтрокиОбеспечение
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.ИдентификаторСтроки = """"
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьИдентификаторСтрокиРасход
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка				КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА									КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьИдентификаторСтрокиРасход
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.Ссылка.Проведен
	|			И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|			И ТаблицаТоваров.ИдентификаторСтроки = """"
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьИдентификаторФинЗаписиИзделия
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьИдентификаторФинЗаписиИзделия
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.ИдентификаторФинЗаписи = """"
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьИдентификаторФинЗаписиМатериалы
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Ссылка									КАК Ссылка,
	|	ОбновляемыеДанные.Ссылка.ВерсияДанных	КАК ВерсияДанных,
	|	ИСТИНА																		КАК Обработать
	|ПОМЕСТИТЬ ЗаполнитьИдентификаторФинЗаписиМатериалы
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТаблицаТоваров
	|		ГДЕ
	|			ТаблицаТоваров.Ссылка = ОбновляемыеДанные.Ссылка
	|			И ТаблицаТоваров.ИдентификаторФинЗаписи = """"
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьВариантыОбеспечения
	
	Текст = ОбеспечениеВДокументахСервер.ТекстЗапросаДокументыДляОбработкиВариантаОбеспечения(
		"Документ.ЭтапПроизводства2_2",
		"ОбеспечениеМатериаламиИРаботами");
	Текст = СтрЗаменить(
		Текст,
		"Ссылка В(&Ссылки)",
		"Ссылка В
		|	(ВЫБРАТЬ
		|		ОбновляемыеДанные.Ссылка КАК Ссылка
		|	ИЗ
		|		ОбновляемыеДанные КАК ОбновляемыеДанные)");
	ТекстыЗапроса.Добавить(Текст);
	
	#КонецОбласти
	
	#Область ТекстЗапросаЗаполнитьПодразделение
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЭтапПроизводства.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗаполнитьПодразделение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|ГДЕ
	|	ЭтапПроизводства.Ссылка В(
	|		ВЫБРАТЬ
	|			ОбновляемыеДанные.Ссылка
	|		ИЗ
	|			ОбновляемыеДанные КАК ОбновляемыеДанные)
	|	И (
	|		ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.Трудозатраты КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ЭкономияМатериаловСерии КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ИЛИ ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = ЭтапПроизводства.Ссылка
	|				И Таблица.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка");
	
	#КонецОбласти
	
	#Область ТекстЗапросаДанныеКОбработке
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка											КАК Ссылка,
	|	ЕСТЬNULL(ЗаполнитьПериодВыходныеИзделия.Обработать, ЛОЖЬ)			КАК ЗаполнитьПериодВыходныеИзделия,
	|	ЕСТЬNULL(ЗаполнитьПериодПобочныеИзделия.Обработать, ЛОЖЬ)			КАК ЗаполнитьПериодПобочныеИзделия,
	|	ЕСТЬNULL(ЗаполнитьПериодОбеспечения.Обработать, ЛОЖЬ)				КАК ЗаполнитьПериодОбеспечения,
	|	ЕСТЬNULL(ЗаполнитьПериодЭкономия.Обработать, ЛОЖЬ)					КАК ЗаполнитьПериодЭкономия,
	|	ЕСТЬNULL(ЗаполнитьПериодРасход.Обработать, ЛОЖЬ)					КАК ЗаполнитьПериодРасход,
	|	ЕСТЬNULL(ЗаполнитьКорАналитикуОбеспечение.Обработать, ЛОЖЬ)			КАК ЗаполнитьКорАналитикуОбеспечение,
	|	ЕСТЬNULL(ЗаполнитьКорАналитикуРасход.Обработать, ЛОЖЬ)				КАК ЗаполнитьКорАналитикуРасход,
	|	ЕСТЬNULL(ЗаполнитьКорАналитикуЭкономия.Обработать, ЛОЖЬ)			КАК ЗаполнитьКорАналитикуЭкономия,
	|	ЕСТЬNULL(ЗаполнитьВЗВыходныеИзделия.Обработать, ЛОЖЬ)				КАК ЗаполнитьВЗВыходныеИзделия,
	|	ЕСТЬNULL(ЗаполнитьВЗПобочныеИзделия.Обработать, ЛОЖЬ)				КАК ЗаполнитьВЗПобочныеИзделия,
	|	ЕСТЬNULL(ЗаполнитьВЗМатериалы.Обработать, ЛОЖЬ)						КАК ЗаполнитьВЗМатериалы,
	|	ЕСТЬNULL(ЗаполнитьИдентификаторСтрокиОбеспечение.Обработать, ЛОЖЬ)	КАК ЗаполнитьИдентификаторСтрокиОбеспечение,
	|	ЕСТЬNULL(ЗаполнитьИдентификаторСтрокиРасход.Обработать, ЛОЖЬ)			КАК ЗаполнитьИдентификаторСтрокиРасход,
	|	ЕСТЬNULL(ЗаполнитьИдентификаторФинЗаписиИзделия.Обработать, ЛОЖЬ)		КАК ЗаполнитьИдентификаторФинЗаписиИзделия,
	|	ЕСТЬNULL(ЗаполнитьИдентификаторФинЗаписиМатериалы.Обработать, ЛОЖЬ)	КАК ЗаполнитьИдентификаторФинЗаписиМатериалы,
	|	НЕ ЗаполнитьПодразделение.Ссылка ЕСТЬ NULL							КАК ЗаполнитьПодразделение,
	|	НЕ ДокументыДляОбработкиВариантаОбеспечения.Ссылка ЕСТЬ NULL		КАК ТребуетсяОбработкаВариантаОбеспечения,
	|	ВЫБОР
	|		КОГДА ЗаполнитьПериодВыходныеИзделия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьПериодВыходныеИзделия.ВерсияДанных
	|		КОГДА ЗаполнитьПериодПобочныеИзделия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьПериодПобочныеИзделия.ВерсияДанных
	|		КОГДА ЗаполнитьПериодОбеспечения.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьПериодОбеспечения.ВерсияДанных
	|		КОГДА ЗаполнитьПериодЭкономия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьПериодЭкономия.ВерсияДанных
	|		КОГДА ЗаполнитьПериодРасход.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьПериодРасход.ВерсияДанных
	|		КОГДА ЗаполнитьКорАналитикуОбеспечение.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьКорАналитикуОбеспечение.ВерсияДанных
	|		КОГДА ЗаполнитьКорАналитикуРасход.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьКорАналитикуРасход.ВерсияДанных
	|		КОГДА ЗаполнитьКорАналитикуЭкономия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьКорАналитикуЭкономия.ВерсияДанных
	|		КОГДА ЗаполнитьВЗВыходныеИзделия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьВЗВыходныеИзделия.ВерсияДанных
	|		КОГДА ЗаполнитьВЗПобочныеИзделия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьВЗПобочныеИзделия.ВерсияДанных
	|		КОГДА ЗаполнитьВЗМатериалы.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьВЗМатериалы.ВерсияДанных
	|		КОГДА ЗаполнитьИдентификаторФинЗаписиИзделия.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьИдентификаторФинЗаписиИзделия.ВерсияДанных
	|		КОГДА ЗаполнитьИдентификаторФинЗаписиМатериалы.ВерсияДанных ЕСТЬ НЕ NULL
	|			ТОГДА ЗаполнитьИдентификаторФинЗаписиМатериалы.ВерсияДанных
	|		ИНАЧЕ ОбновляемыеДанные.Ссылка.ВерсияДанных
	|	КОНЕЦ																КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА УдалитьНазначения.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                               КАК УдалитьНазначение,
	|	ОбновляемыеДанные.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения КАК ОсновноеИзделиеЕдиницаИзмерения
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьПериодВыходныеИзделия КАК ЗаполнитьПериодВыходныеИзделия
	|	ПО ЗаполнитьПериодВыходныеИзделия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьПериодПобочныеИзделия КАК ЗаполнитьПериодПобочныеИзделия
	|	ПО ЗаполнитьПериодПобочныеИзделия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьПериодОбеспечения КАК ЗаполнитьПериодОбеспечения
	|	ПО ЗаполнитьПериодОбеспечения.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьПериодЭкономия КАК ЗаполнитьПериодЭкономия
	|	ПО ЗаполнитьПериодЭкономия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьПериодРасход КАК ЗаполнитьПериодРасход
	|	ПО ЗаполнитьПериодРасход.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьВЗМатериалы КАК ЗаполнитьВЗМатериалы
	|	ПО ЗаполнитьВЗМатериалы.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьВЗВыходныеИзделия КАК ЗаполнитьВЗВыходныеИзделия
	|	ПО ЗаполнитьВЗВыходныеИзделия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьВЗПобочныеИзделия КАК ЗаполнитьВЗПобочныеИзделия
	|	ПО ЗаполнитьВЗПобочныеИзделия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьКорАналитикуОбеспечение КАК ЗаполнитьКорАналитикуОбеспечение
	|	ПО ЗаполнитьКорАналитикуОбеспечение.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьКорАналитикуРасход КАК ЗаполнитьКорАналитикуРасход
	|	ПО ЗаполнитьКорАналитикуРасход.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьКорАналитикуЭкономия КАК ЗаполнитьКорАналитикуЭкономия
	|	ПО ЗаполнитьКорАналитикуЭкономия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ УдалитьНазначения КАК УдалитьНазначения
	|	ПО ОбновляемыеДанные.Ссылка = УдалитьНазначения.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьИдентификаторСтрокиОбеспечение КАК ЗаполнитьИдентификаторСтрокиОбеспечение
	|	ПО ЗаполнитьИдентификаторСтрокиОбеспечение.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьИдентификаторСтрокиРасход КАК ЗаполнитьИдентификаторСтрокиРасход
	|	ПО ЗаполнитьИдентификаторСтрокиРасход.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьИдентификаторФинЗаписиИзделия КАК ЗаполнитьИдентификаторФинЗаписиИзделия
	|	ПО ЗаполнитьИдентификаторФинЗаписиИзделия.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьИдентификаторФинЗаписиМатериалы КАК ЗаполнитьИдентификаторФинЗаписиМатериалы
	|	ПО ЗаполнитьИдентификаторФинЗаписиМатериалы.Ссылка = ОбновляемыеДанные.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыДляОбработкиВариантаОбеспечения КАК ДокументыДляОбработкиВариантаОбеспечения
	|	ПО ОбновляемыеДанные.Ссылка = ДокументыДляОбработкиВариантаОбеспечения.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнитьПодразделение КАК ЗаполнитьПодразделение
	|	ПО ЗаполнитьПодразделение.Ссылка = ОбновляемыеДанные.Ссылка");
	
	#КонецОбласти
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументов.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если ВыборкаДокументов.ЗаполнитьВЗМатериалы Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыОрганизаций.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта =
				ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
					ВыборкаДокументов.Ссылка,
					ВыборкаДокументов.ВерсияДанных,
					Параметры.Очередь);
			
			Если ДанныеОбъекта = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			ТЧДляЗаполненияИдентификаторов = Новый Массив;
			
			// Порядок заполнения имеет значение:
			// - сначала заполняются основные ТЧ;
			// - потом ТЧ видов запасов.
			
			#Область ПодразделениеВТЧ
			
			Если Не ДанныеОбъекта.Подразделение.Пустая()
				И ВыборкаДокументов.ЗаполнитьПодразделение Тогда
				
				ОбъектИзменен = Истина;
				
				Для Каждого Строка Из ДанныеОбъекта.ОбеспечениеМатериаламиИРаботами Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ВыходныеИзделия Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ПобочныеИзделия Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.Трудозатраты Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.РасходМатериаловИРабот Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ЭкономияМатериалов Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ВыходныеИзделияСерии Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ПобочныеИзделияСерии Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ЭкономияМатериаловСерии Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ВидыЗапасовМатериалы Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				Для Каждого Строка Из ДанныеОбъекта.ВидыЗапасовИзделия Цикл
					Строка.Подразделение = ДанныеОбъекта.Подразделение;
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ВыходныеИзделия
			
			Если ВыборкаДокументов.ЗаполнитьВЗВыходныеИзделия
				Или ВыборкаДокументов.ЗаполнитьПериодВыходныеИзделия Тогда
				
				ОбъектИзменен = Истина;
				
				Для Каждого ТекСтрока Из ДанныеОбъекта.ВыходныеИзделия Цикл
					
					// Заполнение периода
					Если ВыборкаДокументов.ЗаполнитьПериодВыходныеИзделия Тогда
						ТекСтрока.Период = КонецМесяца(ТекСтрока.ДатаПроизводства);
					КонецЕсли;
					
					// Заполнение видов запасов
					Если ВыборкаДокументов.ЗаполнитьВЗВыходныеИзделия
						И Не ТекСтрока.УдалитьВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка() Тогда
						
						Если ТекСтрока.Произведено
							И Не ТекСтрока.Отменено Тогда 
							
							НоваяСтрока = ДанныеОбъекта.ВидыЗапасовИзделия.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
							
							НоваяСтрока.ВидЗапасов							= ТекСтрока.УдалитьВидЗапасов;
							НоваяСтрока.ДатаОперации					= ТекСтрока.ДатаПроизводства;
							НоваяСтрока.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ВыпускПродукции;
							
						КонецЕсли;
						
						ТекСтрока.УдалитьВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка();
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ПобочныеИзделия
			
			Если ВыборкаДокументов.ЗаполнитьВЗПобочныеИзделия
				Или ВыборкаДокументов.ЗаполнитьПериодПобочныеИзделия Тогда
				
				ОбъектИзменен = Истина;
				
				Для Каждого ТекСтрока Из ДанныеОбъекта.ПобочныеИзделия Цикл
					
					// Заполнение периода
					Если ВыборкаДокументов.ЗаполнитьПериодПобочныеИзделия Тогда
						ТекСтрока.Период = КонецМесяца(ТекСтрока.ДатаПроизводства);
					КонецЕсли;
					
					// Заполнение видов запасов
					Если ВыборкаДокументов.ЗаполнитьВЗПобочныеИзделия
						И Не ТекСтрока.УдалитьВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка() Тогда
						
						Если ТекСтрока.Произведено
							И Не ТекСтрока.Отменено Тогда 
							
							НоваяСтрока = ДанныеОбъекта.ВидыЗапасовИзделия.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
							
							НоваяСтрока.ВидЗапасов							= ТекСтрока.УдалитьВидЗапасов;
							НоваяСтрока.ДатаОперации					= ТекСтрока.ДатаПроизводства;
							НоваяСтрока.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
							
						КонецЕсли;
						
						ТекСтрока.УдалитьВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка();
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ОбеспечениеМатериаламиИРаботами
			
			// Заполнение кор. аналитики учета номенклатуры
			Если ВыборкаДокументов.ЗаполнитьКорАналитикуОбеспечение Тогда
				ОбъектИзменен = Истина;
				ЗаполнитьКорАналитикуУчетаНоменклатурыОбеспечения(ДанныеОбъекта);
			КонецЕсли;
			
			// Заполнение идентификатора строки
			Если ВыборкаДокументов.ЗаполнитьИдентификаторСтрокиОбеспечение Тогда
				ТЧДляЗаполненияИдентификаторов.Добавить("ОбеспечениеМатериаламиИРаботами");
			КонецЕсли;
			
			// Заполнение периода
			Если ВыборкаДокументов.ЗаполнитьПериодОбеспечения Тогда
				
				ОбъектИзменен = Истина;
				
				Для Каждого ТекСтрока Из ДанныеОбъекта.ОбеспечениеМатериаламиИРаботами Цикл
					ТекСтрока.Период = КонецМесяца(ТекСтрока.ДатаОтгрузки);
				КонецЦикла;
				
			КонецЕсли;
			
			ОбеспечениеВДокументахСервер.ОбработатьНеиспользуемыеВариантыОбеспечения(
				ДанныеОбъекта.ОбеспечениеМатериаламиИРаботами,
				ОбъектИзменен,
				ВыборкаДокументов.ТребуетсяОбработкаВариантаОбеспечения);
			
			#КонецОбласти
			
			#Область РасходМатериаловИРабот
			
			// Заполнение кор. аналитики учета номенклатуры
			Если ВыборкаДокументов.ЗаполнитьКорАналитикуРасход Тогда
				ОбъектИзменен = Истина;
				ЗаполнитьКорАналитикуУчетаНоменклатурыРасхода(ДанныеОбъекта);
			КонецЕсли;
			
			// Заполнение идентификатора строки
			Если ВыборкаДокументов.ЗаполнитьИдентификаторСтрокиРасход Тогда
				ТЧДляЗаполненияИдентификаторов.Добавить("РасходМатериаловИРабот");
			КонецЕсли;
			
			// Заполнение периода и идентификатора
			Если ВыборкаДокументов.ЗаполнитьПериодРасход Тогда
				
				ОбъектИзменен = Истина;
				
				Для Каждого ТекСтрока Из ДанныеОбъекта.РасходМатериаловИРабот Цикл
					ТекСтрока.Период = КонецМесяца(ТекСтрока.ДатаРасхода);
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ЭкономияМатериалов
			
			// Заполнение кор. аналитики учета номенклатуры
			Если ВыборкаДокументов.ЗаполнитьКорАналитикуЭкономия Тогда
				ОбъектИзменен = Истина;
				ЗаполнитьКорАналитикуУчетаНоменклатурыЭкономии(ДанныеОбъекта);
			КонецЕсли;
			
			Если ВыборкаДокументов.ЗаполнитьПериодЭкономия Тогда
				
				ОбъектИзменен = Истина;
				
				Для Каждого ТекСтрока Из ДанныеОбъекта.ЭкономияМатериалов Цикл
					
					// Заполнение периода
					Если ВыборкаДокументов.ЗаполнитьПериодЭкономия Тогда
						ТекСтрока.Период = КонецМесяца(ТекСтрока.ДатаОперации);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ВидыЗапасовИзделия
			
			// Заполнение идентификатора строки
			Если ВыборкаДокументов.ЗаполнитьВЗВыходныеИзделия
				Или ВыборкаДокументов.ЗаполнитьВЗПобочныеИзделия
				Или ВыборкаДокументов.ЗаполнитьИдентификаторФинЗаписиИзделия Тогда
				ТЧДляЗаполненияИдентификаторов.Добавить("ВидыЗапасовИзделия");
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ВидыЗапасовМатериалы
			
			// Заполнение идентификатора строки
			Если ВыборкаДокументов.ЗаполнитьВЗМатериалы
				Или ВыборкаДокументов.ЗаполнитьИдентификаторФинЗаписиМатериалы Тогда
				ТЧДляЗаполненияИдентификаторов.Добавить("ВидыЗапасовМатериалы");
			КонецЕсли;
			
			Если ВыборкаДокументов.ЗаполнитьВЗМатериалы Тогда
				
				ОбъектИзменен = Истина;
				
				ДанныеОбъекта.УдалитьВидыЗапасовОбеспечение.Очистить();
				ДанныеОбъекта.УдалитьВидыЗапасовЭкономия.Очистить();
				
				ДанныеОбъекта.ЗаполнитьВидыЗапасовМатериаловПриОбновленииИБ();
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область УдалитьНазначенияВЭтапе
			
			Если ВыборкаДокументов.УдалитьНазначение Тогда
				
				Отбор = Новый Структура("Ссылка", ВыборкаДокументов.Ссылка);
				СтрокиДляИзменения = ТаблицаНазначений.НайтиСтроки(Отбор);
				
				Для Каждого НайденнаяСтрока Из СтрокиДляИзменения Цикл
					
					СтрокаДляИзменения = ДанныеОбъекта[НайденнаяСтрока.ТабЧасть].Найти(НайденнаяСтрока.НомерСтроки, "НомерСтроки");
					СтрокаДляИзменения.Назначение = Справочники.Назначения.ПустаяСсылка();
					
					ОбъектИзменен = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область КоличествоУпаковок
			
			Если ДанныеОбъекта.КоличествоУпаковокПлан = 0
				И ДанныеОбъекта.УдалитьЗапланировано <> 0
				И (ДанныеОбъекта.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
					ИЛИ ДанныеОбъекта.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
					ИЛИ ДанныеОбъекта.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт) Тогда
				
				Изделие = ТаблицаИзделия.Найти(ДанныеОбъекта.ПартияПроизводства, "ПартияПроизводства");
				Если Изделие = Неопределено Тогда
					
					ДанныеОбъекта.КоличествоУпаковокПлан = ДанныеОбъекта.УдалитьЗапланировано;
					
					Если НЕ ДанныеОбъекта.ПроизводствоНаСтороне Тогда
						ДанныеОбъекта.КоличествоУпаковокФакт = ДанныеОбъекта.УдалитьВыполнено;
					КонецЕсли;
					
					Если НЕ ДанныеОбъекта.УдалитьЕдиницаИзмеренияПартииВыпуска.Пустая()
						И ДанныеОбъекта.УдалитьЕдиницаИзмеренияПартииВыпуска
							<> ВыборкаДокументов.ОсновноеИзделиеЕдиницаИзмерения Тогда
						ДанныеОбъекта.УпаковкаПлан = ДанныеОбъекта.УдалитьЕдиницаИзмеренияПартииВыпуска;
						ДанныеОбъекта.УпаковкаФакт = ДанныеОбъекта.УдалитьЕдиницаИзмеренияПартииВыпуска;
						ДанныеОбъекта.УпаковкаОтменено = ДанныеОбъекта.УдалитьЕдиницаИзмеренияПартииВыпуска;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(Изделие.Упаковка) Тогда
						
						ДанныеОбъекта.КоличествоУпаковокПлан = Изделие.КоличествоУпаковок;
						ДанныеОбъекта.УпаковкаПлан = Изделие.Упаковка;
						ДанныеОбъекта.УпаковкаФакт = Изделие.Упаковка;
						ДанныеОбъекта.УпаковкаОтменено = Изделие.Упаковка;
						
					Иначе
						
						ДанныеОбъекта.КоличествоУпаковокПлан = Изделие.Количество;
						
					КонецЕсли;
					
					Если НЕ ДанныеОбъекта.ПроизводствоНаСтороне Тогда
						Если ДанныеОбъекта.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
							
							ДанныеОбъекта.КоличествоУпаковокФакт = ДанныеОбъекта.КоличествоУпаковокПлан;
							
						ИначеЕсли ДанныеОбъекта.УдалитьВыполнено <> 0
							И ДанныеОбъекта.УдалитьЗапланировано <> 0 Тогда
							
							ДанныеОбъекта.КоличествоУпаковокФакт = ДанныеОбъекта.КоличествоУпаковокПлан
								* (ДанныеОбъекта.УдалитьВыполнено / ДанныеОбъекта.УдалитьЗапланировано);
							
						КонецЕсли;
					КонецЕсли;
					
					Если ДанныеОбъекта.УдалитьЗапланировано <> 0 Тогда
						ДанныеОбъекта.КоличествоНаЕдиницуПартииВыпуска = Изделие.Количество / ДанныеОбъекта.УдалитьЗапланировано;
					КонецЕсли;
					
				КонецЕсли;
				
				ОбъектИзменен = Истина;
					
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ЗаполнениеИдентификатораСтроки
			
			Если Не ТЧДляЗаполненияИдентификаторов.Количество() = 0 Тогда
				ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДанныеОбъекта, СтрСоединить(ТЧДляЗаполненияИдентификаторов, ","));
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ЗаполнениеНастроекСчетовУчета
			
			НастройкаСчетовУчетаСервер.ЗаполнитьНастройкиСчетовУчета(ДанныеОбъекта);
			
			ТЧВидыЗапасовДляЗаполненияНастроекСчетовУчета = Новый Соответствие();
			ТЧВидыЗапасовДляЗаполненияНастроекСчетовУчета.Вставить("ВидыЗапасовИзделия", "ПобочныеИзделия,ВыходныеИзделия");
			ТЧВидыЗапасовДляЗаполненияНастроекСчетовУчета.Вставить("ВидыЗапасовМатериалы", "ЭкономияМатериалов");
			НастройкаСчетовУчетаСервер.ЗаполнитьНастройкиСчетовУчетаВидыЗапасов(ДанныеОбъекта,
				ТЧВидыЗапасовДляЗаполненияНастроекСчетовУчета);
			
			#КонецОбласти
			
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбъектИзменен = Истина;
			КонецЕсли;

			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаДокументов.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаДокументов.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьКорАналитикуУчетаНоменклатурыОбеспечения(Объект)
	
	ТЧОбъекта = Объект.ОбеспечениеМатериаламиИРаботами;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура		КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика	КАК Характеристика,
	|	ТаблицаТоваров.Подразделение	КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ													КАК Серия
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	Аналитика.КлючАналитики КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|	И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|	И Аналитика.Серия = ТаблицаТоваров.Серия
	|	И Аналитика.МестоХранения = ТаблицаТоваров.Подразделение
	|	И Аналитика.Назначение = &Назначение
	|	И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",	ТЧОбъекта.Выгрузить());
	Запрос.УстановитьПараметр("Подразделение",		Объект.Подразделение);
	Запрос.УстановитьПараметр("Назначение",			Объект.Назначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧОбъекта[Выборка.НомерСтроки - 1].КорАналитикаУчетаНоменклатуры = Выборка.КорАналитикаУчетаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорАналитикуУчетаНоменклатурыРасхода(Объект)
	
	ТЧОбъекта = Объект.РасходМатериаловИРабот;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика		КАК Характеристика,
	|	ТаблицаТоваров.Подразделение		КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий В (14, 18)
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ														КАК Серия,
	|	ТаблицаТоваров.СтатьяКалькуляции	КАК СтатьяКалькуляции
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	Серия,
	|	СтатьяКалькуляции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	Аналитика.КлючАналитики КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|	И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|	И Аналитика.Серия = ТаблицаТоваров.Серия
	|	И Аналитика.МестоХранения = ТаблицаТоваров.Подразделение
	|	И Аналитика.Назначение = &Назначение
	|	И Аналитика.СтатьяКалькуляции = ТаблицаТоваров.СтатьяКалькуляции
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",	ТЧОбъекта.Выгрузить());
	Запрос.УстановитьПараметр("Назначение",			Объект.Назначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧОбъекта[Выборка.НомерСтроки - 1].КорАналитикаУчетаНоменклатуры = Выборка.КорАналитикаУчетаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорАналитикуУчетаНоменклатурыЭкономии(Объект)
	
	ТЧОбъекта = Объект.ЭкономияМатериалов;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	ТаблицаТоваров.Получатель				КАК МестоХранения,
	|	ТаблицаТоваров.Характеристика		КАК Характеристика,
	|	ТаблицаТоваров.Подразделение		КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ														КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Обособить
	|			ТОГДА &Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ														КАК Назначение
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	МестоХранения,
	|	Характеристика,
	|	Подразделение,
	|	Серия,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	Аналитика.КлючАналитики КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|	И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|	И Аналитика.Серия = ТаблицаТоваров.Серия
	|	И Аналитика.МестоХранения = ТаблицаТоваров.МестоХранения
	|	И Аналитика.Назначение = ТаблицаТоваров.Назначение
	|	И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|
	|ГДЕ
	|	ТаблицаТоваров.МестоХранения.ЦеховаяКладовая
	|	И ТаблицаТоваров.МестоХранения.Подразделение = ТаблицаТоваров.Подразделение
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",	ТЧОбъекта.Выгрузить(Новый Структура("СписатьНаРасходы", Ложь)));
	Запрос.УстановитьПараметр("Назначение",			Объект.НазначениеМатериалы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧОбъекта[Выборка.НомерСтроки - 1].КорАналитикаУчетаНоменклатуры = Выборка.КорАналитикаУчетаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКГенерацииКлючейАналитикиУчетаНоменклатуры(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ЭтапПроизводства2_2";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	#Область ТекстЗапросаДанныхКОбработке
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Ссылка
	|ИЗ
	|	(
	// Генерация кор. аналитики учета номенклатуры обеспечения
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|					ТОГДА ТаблицаТоваров.Серия
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.МестоХранения = ТаблицаТоваров.Ссылка.Подразделение
	|		И Аналитика.Назначение = ТаблицаТоваров.Ссылка.Назначение
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|			ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И Аналитика.КлючАналитики ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Генерация кор. аналитики учета номенклатуры расхода
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.СтатусУказанияСерий В (14, 18)
	|					ТОГДА ТаблицаТоваров.Серия
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.МестоХранения = ТаблицаТоваров.Ссылка.Подразделение
	|		И Аналитика.Назначение = ТаблицаТоваров.Ссылка.Назначение
	|		И Аналитика.СтатьяКалькуляции = ТаблицаТоваров.СтатьяКалькуляции
	|	
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|			ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И Аналитика.КлючАналитики ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Генерация кор. аналитики учета номенклатуры экономии
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|					ТОГДА ТаблицаТоваров.Серия
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.МестоХранения = ТаблицаТоваров.Получатель
	|		И Аналитика.Назначение =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.Обособить
	|					ТОГДА ТаблицаТоваров.Ссылка.Назначение
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|				ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).Подразделение =
	|			ТаблицаТоваров.Ссылка.Подразделение
	|		И Аналитика.КлючАналитики ЕСТЬ NULL
	|	) КАК ТаблицаТоваров
	|";
	
	#КонецОбласти
	
	КОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, КОбработке);
	
КонецПроцедуры

Процедура СгенерироватьНедостающиеКлючиАналитикиУчетаНоменклатуры(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ЭтапПроизводства2_2;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	#Область ПоляКлючей
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура      КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика    КАК Характеристика,
	|	ТаблицаТоваров.Серия             КАК Серия,
	|	ТаблицаТоваров.МестоХранения     КАК МестоХранения,
	|	ТаблицаТоваров.Назначение        КАК Назначение,
	|	ТаблицаТоваров.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ИЗ
	|	(
	// Генерация кор. аналитики учета номенклатуры обеспечения
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура         КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика       КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|				ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                               КАК Серия,
	|		ТаблицаТоваров.Ссылка.Подразделение КАК МестоХранения,
	|		ТаблицаТоваров.Ссылка.Назначение    КАК Назначение,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|					ТОГДА ТаблицаТоваров.Серия
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.МестоХранения = ТаблицаТоваров.Ссылка.Подразделение
	|		И Аналитика.Назначение = ТаблицаТоваров.Ссылка.Назначение
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка = &Ссылка
	|		И ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|			ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И Аналитика.КлючАналитики ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Генерация кор. аналитики учета номенклатуры расхода
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура         КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика       КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТаблицаТоваров.СтатусУказанияСерий В (14, 18)
	|				ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                               КАК Серия,
	|		ТаблицаТоваров.Ссылка.Подразделение КАК МестоХранения,
	|		ТаблицаТоваров.Ссылка.Назначение    КАК Назначение,
	|		ТаблицаТоваров.СтатьяКалькуляции    КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.СтатусУказанияСерий В (14, 18)
	|					ТОГДА ТаблицаТоваров.Серия
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.МестоХранения = ТаблицаТоваров.Ссылка.Подразделение
	|		И Аналитика.Назначение = ТаблицаТоваров.Ссылка.Назначение
	|		И Аналитика.СтатьяКалькуляции = ТаблицаТоваров.СтатьяКалькуляции
	|	
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка = &Ссылка
	|		И ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|			ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И Аналитика.КлючАналитики ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Генерация кор. аналитики учета номенклатуры экономии
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура   КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|				ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                         КАК Серия,
	|		ТаблицаТоваров.Получатель     КАК МестоХранения,
	|		ВЫБОР
	|			КОГДА ТаблицаТоваров.Обособить
	|				ТОГДА ТаблицаТоваров.Ссылка.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                         КАК Назначение,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель В (14, 18)
	|					ТОГДА ТаблицаТоваров.Серия
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.МестоХранения = ТаблицаТоваров.Получатель
	|		И Аналитика.Назначение =
	|			ВЫБОР
	|				КОГДА ТаблицаТоваров.Обособить
	|					ТОГДА ТаблицаТоваров.Ссылка.Назначение
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			КОНЕЦ
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка = &Ссылка
	|		И ТаблицаТоваров.Ссылка.Проведен
	|		И НЕ ТаблицаТоваров.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|		И ТаблицаТоваров.КорАналитикаУчетаНоменклатуры =
	|				ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		И ВЫРАЗИТЬ(ТаблицаТоваров.Получатель КАК Справочник.Склады).Подразделение =
	|				ТаблицаТоваров.Ссылка.Подразделение
	|		И Аналитика.КлючАналитики ЕСТЬ NULL
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.МестоХранения,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.СтатьяКалькуляции
	|";
	#КонецОбласти
	
	Для Каждого ТекущиеДанные Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущиеДанные.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Ссылка", ТекущиеДанные.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка, Истина);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТекущиеДанные.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущиеДанные.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
