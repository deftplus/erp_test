
#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаМодифицирована; // используется для отработки события изменения модифицированности формы

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтражениеВыполненного = Параметры.ОтражениеВыполненного;
	ПараметрыВстраивания = ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	// Буфер обмена
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЭтапПроизводства2_2.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Документы.ЭтапПроизводства2_2.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "РасходМатериаловИРабот_,ЭкономияМатериалов_,ВыходныеИзделия_,ПобочныеИзделия_");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьКомандВводаНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииМодифицированностиФормы", 1);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент.ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспеченияЗаказов.Форма.Форма" Тогда
		
		АдресТаблицыДвижений = ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
			ВыбранноеЗначение.КодДействия,
			ВыбранноеЗначение.АдресАналитик,
			ВыбранноеЗначение.ПараметрыЗаполнения);
			
		// Возврат управления в форму обработки состояния обеспечения.
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение.ВыполняемоеОповещение, АдресТаблицыДвижений);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РазрешениеНаЗаменуМатериалов.Форма.ПодборАналогов" Тогда
		
		ЗаменитьНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ], ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ПодборМатериаловПоСпецификации" Тогда
		
		ЗагрузитьРезультатПодбораМатериаловПоСпецификации(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПереработчику" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			Прочитать();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ИзменениеПоследовательностиЭтапов"
		И Объект.ПартияПроизводства = Параметр Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ДелениеЭтапа"
		И Объект.Ссылка = Параметр Тогда
		
		Прочитать();
		
	КонецЕсли;

	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыВстраивания = ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если НЕ Объект.РучноеРазмещениеВГрафике Тогда
		
		РедакторПроизводственногоПроцесса.СохранитьВидыРабочихЦентров(
			ВидыРабочихЦентров, 
			ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
			ТекущийОбъект.ВидыРабочихЦентров,
			ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
		
	КонецЕсли;
	
	Если ПланируетсяГрафикПроизводства И Объект.РучноеРазмещениеВГрафике Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ГрафикПроизводства", ГрафикПроизводства);
	КонецЕсли;
	
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПроизводствоНаСтороне Тогда
		// Нужно разблокировать объект
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли; 
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ЗаполнитьСостояниеВыполненияОпераций();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ОбеспечениеВДокументахСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	УстановитьВидимостьОбеспечения();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФормаМодифицирована = Неопределено;
	Подключаемый_ПриИзмененииМодифицированностиФормы();
	ОбеспечениеВДокументахКлиент.ПослеЗаписи(ЭтотОбъект, "Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов");
	
	Оповестить("Запись_ЭтапыПроизводства", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	#Область ГрафикПроизводства
	
	ОбработкаПроверкиРазмещенияЭтапаВГрафике(Отказ);
	
	Если ОтметкаПланироватьНеРанее
		И НЕ ЗначениеЗаполнено(Объект.ПланироватьНеРанее) Тогда
		
		ТекстСообщения = НСтр("ru = 'Значение ""Планировать не ранее"" не указано.';
								|en = 'The ""Plan not earlier than"" value is not specified.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Объект.Ссылка,
			"НадписьПланироватьНеРанее",
			,
			Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Выходные изделия - отмена строк
	ВыходныеИзделияСкрыватьОтмененныеСтроки =  Настройки.Получить("ВыходныеИзделияСкрыватьОтмененныеСтроки");
	
	Если ВыходныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВыходныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
	// Побочные изделия - отмена строк
	ПобочныеИзделияСкрыватьОтмененныеСтроки =  Настройки.Получить("ПобочныеИзделияСкрыватьОтмененныеСтроки");
	
	Если ПобочныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПобочныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
	// Обеспечение материалами и работами - отмена строк
	ОбеспечениеСкрыватьОтмененныеСтроки =  Настройки.Получить("ОбеспечениеСкрыватьОтмененныеСтроки");
	
	Если ОбеспечениеСкрыватьОтмененныеСтроки Тогда
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Обеспечение_СкрыватьОтмененныеСтроки.Пометка = ОбеспечениеСкрыватьОтмененныеСтроки;
	
	// Трудозатраты - отмена строк
	ТрудозатратыСкрыватьОтмененныеСтроки =  Настройки.Получить("ТрудозатратыСкрыватьОтмененныеСтроки");
	
	Если ТрудозатратыСкрыватьОтмененныеСтроки Тогда
		Элементы.Трудозатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Трудозатраты.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Трудозатраты_СкрыватьОтмененныеСтроки.Пометка = ТрудозатратыСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Объект.Спецификация.Пустая() Тогда
		Если ПоказатьНормативыМатериалы Тогда
			ПоказатьНормативыМатериалы = Ложь;
		КонецЕсли;
		Если ПоказатьНормативыТрудозатраты Тогда
			ПоказатьНормативыТрудозатраты = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокРеквизитов = "";
	
	Если ПоказатьНормативыМатериалы ИЛИ ПоказатьНормативыТрудозатраты Тогда
		Если ПоказатьНормативыМатериалы
				И Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 0
			ИЛИ ПоказатьНормативыТрудозатраты
				И Объект.Трудозатраты.Количество() > 0 Тогда
			ПоказатьНормативыПриИзмененииНаСервере();
		Иначе
			СписокРеквизитов = 
				СписокРеквизитов + ?(ЗначениеЗаполнено(СписокРеквизитов), ",", "") + "ПоказатьНормативы";
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		
		СписокРеквизитов = 
			СписокРеквизитов + ?(ЗначениеЗаполнено(СписокРеквизитов), ",", "") + "ПоказатьАналоги";
		
		ОтметитьНаличиеАналогов();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НаименованиеЭтапа");

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		Объект.ЕдиницаИзмеренияДлительностиЭтапа = ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕдиницаИзмеренияДлительностиЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуВТЧ("ОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", Объект.ДатаОтгрузки);
	Если ОтражениеВыполненного Тогда
		Объект.ДатаРасхода = Объект.ДатаОтгрузки;
		ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДатаОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоОднойДатойПриИзменении(Элемент)
	
	ПроизводствоОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзменении(Элемент)
	
	ДатаПроизводстваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходОднойДатойПриИзменении(Элемент)
	
	РасходОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	ДатаРасходаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Элемент.Валюта.ПриИзменении");
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "ПобочныеИзделия")
		Или ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "ВыходныеИзделия")  Тогда
		ВалютаПриИзмененииСервер();
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПродукцияНажатие(Элемент)
	
	ПродукцияСвернута = НЕ ПродукцияСвернута;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаВыходныеИзделия, 
		Элементы.ГиперСсылкаНадписьПродукция, 
		ПродукцияСвернута);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПобочныеИзделияНажатие(Элемент)
	
	ПобочныеИзделияСвернуты = НЕ ПобочныеИзделияСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаПобочныеИзделияСворачиваемая, 
		Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
		ПобочныеИзделияСвернуты);
		
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРасходМатериаловИРаботНажатие(Элемент)
	
	ИзрасходованныеМатериалыСвернуты = НЕ ИзрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.РасходМатериаловИРабот, 
		Элементы.ГиперСсылкаНадписьРасходМатериаловИРабот, 
		ИзрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРЭкономияМатериаловНажатие(Элемент)
	
	НеизрасходованныеМатериалыСвернуты = НЕ НеизрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов, 
		НеизрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтап(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЭтапЗавершение", ЭтотОбъект),
						НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
							|en = 'To proceed, you need to post the document. Do you want to post the document?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапФрагмент()
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.ФормаДокумента.Команда.ЗакрытьЗаказФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЭтап(Команда)
	
	Если ЗавершеноВыполнениеЭтапа Тогда
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		ОбработатьЗавершениеВыполненияЭтапа();
		
	ИначеЕсли НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		ОбработатьНачалоВыполненияЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеРаботОднойДатойПриИзменении(Элемент)
	
	ВыполнениеРаботОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыполненияРаботПриИзменении(Элемент)
	
	ДатаВыполненияРаботПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияОтгружаетсяНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияЗаказаПереработчикуНажатие(Элемент)

	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыСостояниеОбеспеченияЗаказов("СПИСОКЗАКАЗОВ");
	ПараметрыФормы.Заказы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЗаказПереработчику);
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Неопределено,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияПроблемаНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыОсновная

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТекущаяСтраница.Имя = "СтраницаОсновное" Тогда
		
		ЗаполнитьКоличествоНоменклатурыПартии();
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "КоличествоНоменклатурыПартии");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаПриИзменении(Элемент)
	
	НаименованиеЭтапаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПроизводстваПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаПроизводстваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияЭтапОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьЭтапы" Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(Объект.Распоряжение, Объект.ПартияПроизводства);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьСпецификацию"
		И ЗначениеЗаполнено(Объект.Спецификация) Тогда
		
		ПоказатьЗначение(, Объект.Спецификация)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзделиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьИзделие"
		И ЗначениеЗаполнено(ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура) Тогда
		
		ПоказатьЗначение(, ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьХарактеристикуИзделия"
		И ЗначениеЗаполнено(ДанныеПартииПроизводства.ОсновноеИзделиеХарактеристика) Тогда
		
		ПоказатьЗначение(, ДанныеПартииПроизводства.ОсновноеИзделиеХарактеристика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПроизводстваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуРучногоРедактированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПланированияПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаПланироватьНеРанееПриИзменении(Элемент)
	
	Если Не ОтметкаПланироватьНеРанее Тогда
		
		Объект.ПланироватьНеРанее = Неопределено;
		
		НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
			Объект.ПланироватьНеРанее,
			ФорматДатыГрафика);
		
	КонецЕсли;
		
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтметкаПланироватьНеРанее");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКомментарийКонвертацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Далее" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеПросмотраКомментарияКонвертации", ЭтотОбъект);
		
		Строка    = Объект.КомментарийПриКонвертации;
		Подсказка = НСтр("ru = 'Служебная информация';
						|en = 'Service information'");
		
		ПоказатьВводСтроки(Оповещение, Строка, Подсказка, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраКомментарияКонвертации(Строка, Параметры) Экспорт
	
	Если Строка = "" Тогда
		Объект.КомментарийПриКонвертации = "";
		СформироватьКомментарийКонвертации(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьГруппуКомментарийКонвертации(Элемент)
	
	Объект.КомментарийПриКонвертации = "";
	СформироватьКомментарийКонвертации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеОкончаниеЭтапаПриИзменении(Элемент)
	
	ОбработатьИзменениеДатыВыполненияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаказПереработчикуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьЗаказ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = Неопределено;
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован") Тогда
			
			ТекстВопроса = НСтр("ru = 'Для создания заказа необходимо установить статус ""К выполнению"".
										|Изменить статус этапа и создать заказ?';
										|en = 'To create an order, set the ""For release"" status.
										|Change the stage status and create an order?'");
										
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить статус и создать заказ';
																|en = 'Change status and create order'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru = 'Для создания заказа необходимо записать документ.
										|Записать документ и создать заказ?';
										|en = 'You should save the document to create an order.
										|Save the document and create an order?'");
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и создать заказ';
																|en = 'Save and create order'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			
		КонецЕсли; 
		
		Если ТекстВопроса <> Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьОбъектИСоздатьЗаказПереработчику", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Иначе
			СоздатьЗаказПереработчику();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	Если Объект.МаршрутнаяКарта.Пустая() Тогда
		
		Объект.КоэффициентМаршрутнойКарты = 0;
		
	ИначеЕсли Объект.КоэффициентМаршрутнойКарты = 0 Тогда
		
		Объект.КоэффициентМаршрутнойКарты = 1;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "МаршрутнаяКарта");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПланироватьНеРанееОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьЭтапПланироватьНеРанее" Тогда
		
		Если ЗначениеЗаполнено(Объект.ПланироватьНеРанее)
			И ТипЗнч(Объект.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			
			ПоказатьЗначение(, Объект.ПланироватьНеРанее);
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#РедактироватьЗначение" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);
		ПараметрыФормы.Вставить("ПланироватьНеРанее", Объект.ПланироватьНеРанее);
		ПараметрыФормы.Вставить("ФорматДатыГрафика", ФорматДатыГрафика);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуРедактированияПланироватьНеРанееЗавершение", 
			ЭтотОбъект);
		
		ОткрытьФорму(
				"Документ.ЭтапПроизводства2_2.Форма.РедактированиеПланироватьНеРанее", 
				ПараметрыФормы, 
				ЭтаФорма,,,, 
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПланироватьНеРанееЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		Объект.ПланироватьНеРанее = РезультатЗакрытия;
		
		НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
			Объект.ПланироватьНеРанее,
			ФорматДатыГрафика);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПланПриИзменении(Элемент)
	
	КоличествоУпаковокПланПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПланПриИзменении(Элемент)
	
	УпаковкаПланПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокФактПриИзменении(Элемент)
	
	КоличествоУпаковокФактПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаФактПриИзменении(Элемент)
	
	УпаковкаФактПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокОтмененоПриИзменении(Элемент)
	
	КоличествоУпаковокОтмененоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаОтмененоПриИзменении(Элемент)
	
	УпаковкаОтмененоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесоответствиеКоличестваВыполненоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ИзменитьКоличествоВыполнено" Тогда
		
		Объект.КоличествоУпаковокФакт = НоменклатураПартииКоличествоУпаковокФакт;
		Модифицированность = Истина;
		
		КоличествоУпаковокФактПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесоответствиеКоличестваОтмененоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ИзменитьКоличествоОтменено" Тогда
		
		Объект.КоличествоУпаковокОтменено = НоменклатураПартииКоличествоУпаковокОтменено;
		Модифицированность = Истина;
		
		КоличествоУпаковокОтмененоПриИзмененииНаСервере()
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ВыходныеИзделияСерия 
			ИЛИ Поле = Элементы.ВыходныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ВыходныеИзделия");
	КонецЕсли;
	
	Если (Поле = Элементы.ВыходныеИзделияДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ВыходныеИзделия, ЭтотОбъект);
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
				ЭтаФорма, ТекущиеДанные, "ВыходныеИзделия", НоваяСтрока, Копирование); 
	
	Если НоваяСтрока Тогда
		
		Если ОтражениеВыполненного Тогда
			ТекущиеДанные.Произведено = Истина;
		Иначе
			ТекущиеДанные.Произведено = Ложь;
		КонецЕсли;
		
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
		
		//Настройка счетов учета 
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
		КонецЕсли;
		
		Если Не Копирование Тогда
			ТекущиеДанные.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ВыходныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
		
	КонецЕсли;
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.ВыходныеИзделия, ЭтотОбъект), НоваяСтрока) Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ВыходныеИзделия", Элемент);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ВыходныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	Если ИспользоватьПлановуюСтоимость Тогда
		
		Если ТекущиеДанные.Количество > 0 Тогда
			СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
		Иначе
			СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
	
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ВыходныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ВыходныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ВыходныеИзделия);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если ТекущиеДанные.Произведено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ИзделияОтмененоПриИзменении("ВыходныеИзделия", ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработатьПоСпецификацииПриИзменении(Элемент)
	
	ОбработатьПоСпецификацииПриИзменении("ВыходныеИзделия", Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНазначениеПриИзменении(Элемент)
		
	СтруктураДействий = Новый Структура;
	
	ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
		ЭтотОбъект, СтруктураДействий);
		
	Если ЗначениеЗаполнено(СтруктураДействий) Тогда
	
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
			
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ПобочныеИзделияСерия 
			ИЛИ Поле = Элементы.ПобочныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ПобочныеИзделия");
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПобочныеИзделия, ЭтотОбъект);
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
				ЭтаФорма, ТекущиеДанные, "ПобочныеИзделия", НоваяСтрока, Копирование); 
	
	Если НоваяСтрока Тогда
		
		Если ОтражениеВыполненного Тогда
			ТекущиеДанные.Произведено = Истина;
		Иначе
			ТекущиеДанные.Произведено = Ложь;
		КонецЕсли;
		
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
		
		//Настройка счетов учета 
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
		КонецЕсли;
		
		Если Не Копирование Тогда
			ТекущиеДанные.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ПобочныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ПобочныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ПобочныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ТекущиеДанные.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПобочныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПобочныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ПобочныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ПобочныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ПобочныеИзделия);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если ТекущиеДанные.Произведено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ПобочныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ИзделияОтмененоПриИзменении("ПобочныеИзделия", ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработатьПоСпецификацииПриИзменении(Элемент)
	
	ОбработатьПоСпецификацииПриИзменении("ПобочныеИзделия", Элементы.ПобочныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНазначениеПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	
	ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
		ЭтотОбъект, СтруктураДействий);
		
	Если ЗначениеЗаполнено(СтруктураДействий) Тогда
	
		ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
			
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если ОтражениеВыполненного Тогда
			ТекущиеДанные.Выполнено = Истина;
		Иначе
			ТекущиеДанные.Выполнено = Ложь;
		КонецЕсли;
		
		Если Объект.ВыполнениеРаботОднойДатой Тогда
			ТекущиеДанные.ДатаВыполнения = Объект.ДатаВыполненияРабот;
		КонецЕсли;
		
		Если Не Копирование Тогда
			ТекущиеДанные.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		ТекущиеДанные.Исполнитель,
		ИспользоватьБригадныеНаряды);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ПоказатьНормативыТрудозатраты И ТекущиеДанные <> Неопределено Тогда
		
		МассивДанных = Новый Массив;
		ДанныеСтроки = Новый Структура("ВидРабот");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
		Нормативы = ПолучитьНормативыПриИзмененииСтрок("Трудозатраты", МассивДанных, АдресХранилищаНормативы);
		ТекущиеДанные.Норматив = Нормативы[0];
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Трудозатраты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВыполненоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ТрудозатратыВыполненоПриИзмененииНаСервере(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ТрудозатратыВыполненоПриИзмененииНаСервере(Знач Идентификатор)
	
	ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные.Выполнено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВыполнениеРаботОднойДатой Тогда
		УправлениеПроизводством.УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, Объект.ДатаВыполненияРабот);
	Иначе
		УправлениеПроизводством.УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, ДатаСобытияЗавершение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		ТекущиеДанные.Подразделение,
		ТекущиеДанные.Исполнитель,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ИсполнительПолучениеДанныхВыбора(
			ДанныеВыбора, Текст, Элементы.Трудозатраты.ТекущиеДанные.Подразделение, Объект.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ИсполнительПолучениеДанныхВыбора(
			ДанныеВыбора, Текст, Элементы.Трудозатраты.ТекущиеДанные.Подразделение, Объект.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено
		И ТекущиеДанные.Выполнено Тогда
		ТекущиеДанные.Выполнено = Ложь;
		ТрудозатратыВыполненоПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Элементы.ОбеспечениеМатериаламиИРаботами.Выбор");
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Поле = Элементы.ОбеспечениеМатериаламиИРаботамиДоступно И НЕ ТолькоПросмотр И Не ОтражениеВыполненного Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбеспечениеМатериаламиИРаботамиВыборДоступно(ТекущиеДанные);
		
	ИначеЕсли Поле = Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала И НЕ ТолькоПросмотр И Не ОтражениеВыполненного Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборАналогов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ОбеспечениеМатериаламиИРаботами, ЭтотОбъект);
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Подразделение = Объект.Подразделение;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(
		ЭтаФорма,
		ТекущиеДанные,
		НоваяСтрока,
		Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(
		Элемент, 
		КэшированныеЗначения, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		Копирование);
		
	Если НоваяСтрока Тогда
		
		СтруктураДействий = Новый Структура();
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"Доступно",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Объект.НеОтгружатьЧастями Тогда
			
			ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
			
		КонецЕсли;
		
		Если ПоказатьНормативыМатериалы Тогда
			
			МассивДанных = Новый Массив;
			ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
			Нормативы = ПолучитьНормативыПриИзмененииСтрок("ОбеспечениеМатериаламиИРаботами", МассивДанных, АдресХранилищаНормативы);
			ТекущиеДанные.Норматив = Нормативы[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПослеУдаления(Элемент)
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
			Объект.ОбеспечениеМатериаламиИРаботами,
			ДатаОтгрузкиОбязательна,
			СкладОбязателен);
			
	ОбеспечениеМатериаламиИРаботамиПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные,
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзменении(Элемент)
	
	ВариантОбеспеченияВыбранноеЗначение = ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
	Если ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуВыбораСкладаИСерий Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия());
		
		Если ПараметрыФормы <> Неопределено Тогда
			
			ПараметрыФормы.ПодборСерий = Истина;
			ПараметрыФормы.ВариантОбеспеченияПоДокументу = ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения;
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
				
		КонецЕсли;
		
	Иначе
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПриУказанииВариантаОбеспечения(
			ЭтотОбъект,
			ВариантОбеспеченияВыбранноеЗначение,
			"ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииПослеВопроса");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОбособленноПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
		ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект));
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
		
	ИначеЕсли ОтражениеВыполненного И Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ОбеспечениеМатериаламиИРаботами", Элемент.ТекстРедактирования, Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПроизводитсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	
	ТекущиеДанные.Спецификация = Неопределено;
	Если ТекущиеДанные.Производится Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			Объект,
			ТекущиеДанные,
			ПараметрыВыбораСпецификаций.ОбеспечениеМатериаламиИРаботами,
			ЭтаФорма);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
		ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект));
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("ЗаказНаПроизводство",           Объект.Распоряжение);
	ПараметрыМетода.Вставить("Подразделение",                 Объект.Подразделение);
	ПараметрыМетода.Вставить("Ссылка",                        Объект.Ссылка);
	ПараметрыМетода.Вставить("Статус",                        Объект.Статус);
	ПараметрыМетода.Вставить("НазначениеМатериалы",           Объект.НазначениеМатериалы);
	ПараметрыМетода.Вставить("ЗаказПереработчику",            Объект.ЗаказПереработчику);
	ПараметрыМетода.Вставить("ПараметрыУказанияСерий",        ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	ПараметрыМетода.Вставить("Форма",                         ЭтотОбъект);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		СтруктураДействий,
		ПараметрыМетода,
		ТекущиеДанные);
		
	ПараметрыДействия = ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
		Объект);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства", ПараметрыДействия);

	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияЗаполнитьКолонкуДоступно(
		СтруктураДействий,
		ПараметрыМетода,
		ТекущиеДанные);
		
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСпецификацияПриИзменении(
		ЭтотОбъект,
		Объект, 
		ТекущиеДанные, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
		
		
	СтруктураДействий = Новый Структура();
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		КэшированныеЗначения);
		
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииНаСервере()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									Объект.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки");
		ЗаполнитьДатуВТЧ("ОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", Объект.ДатаОтгрузки);
		
		Если ОтражениеВыполненного Тогда
			Объект.РасходОднойДатой = Объект.НеОтгружатьЧастями;
			Объект.ДатаРасхода = Объект.ДатаОтгрузки;
			ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененныеРеквизиты = "НеОтгружатьЧастями";
	Если ОтражениеВыполненного Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходОднойДатой";
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Склад);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
			ТекущиеДанные.ДатаРасхода = Объект.ДатаРасхода;
		КонецЕсли;
		Если Не Копирование Тогда
			ТекущиеДанные.Подразделение = Объект.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.РасходМатериаловИРабот, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("РасходМатериаловИРабот", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Подразделение = Объект.Подразделение;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ЭкономияМатериаловПриНачалеРедактирования(
		ЭтаФорма,
		Объект,
		ТекущиеДанные,
		НоваяСтрока,
		Копирование);
		
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
	//Настройка счетов учета 
	Если НоваяСтрока И Копирование Тогда
		НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			"ЭкономияМатериалов", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов);

КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ЭкономияМатериалов", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ЭкономияМатериалов, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ЭкономияМатериалов", Элемент.ТекстРедактирования, Элементы.ЭкономияМатериалов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ЭкономияМатериаловДействиеПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыПроизводственныйПроцесс

&НаКлиенте
Процедура ВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровПередНачаломДобавления(
		ТекущиеДанные, 
		ВидыРабочихЦентров, 
		Элементы.ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Отказ,
		Истина);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПослеУдаления(Элемент)
	
	// Нужно проверить что выбран вид РЦ
	КоллекцияОсновныхВидовРЦ = ВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из КоллекцияОсновныхВидовРЦ Цикл
		Если СтрокаОсновнойВидРЦ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияАльтернатив = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		ИспользуетсяАльтернатива = Ложь;
		Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
			Если СтрокаАльтернатива.Использовать Тогда
				ИспользуетсяАльтернатива = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИспользуетсяАльтернатива Тогда
			СтрокаОсновнойВидРЦ.Использовать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РедакторПроизводственногоПроцессаКлиент.ПриИзмененииСоставаВидовРабочихЦентров(
		ВидыРабочихЦентров, 
		Объект.ПорядокРаботыВидовРабочихЦентров,
		Истина);
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	// Это всегда установка флажка
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = ТекущиеДанные;
		КоллекцияАльтернатив = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		КоллекцияАльтернатив = РодительЭлемента.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
		Если СтрокаАльтернатива.Использовать И СтрокаАльтернатива <> ТекущиеДанные Тогда
			СтрокаАльтернатива.Использовать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РодительЭлемента.Использовать И РодительЭлемента <> ТекущиеДанные Тогда
		РодительЭлемента.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(ТекущаяСтрока);
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(ТекущаяСтрока);
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВремяРаботыПриИзменении(Элемент)
	
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровЕдиницаИзмеренияПриИзменении(Элемент)
	
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПредварительныйБуфер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗавершающийБуфер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРаботыВидовРабочихЦентровПриИзменении(Элемент)
	
	РедакторПроизводственногоПроцессаКлиент.ПорядокРаботыВидовРабочихЦентровПриИзменении(
		ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Ложь);
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыДополнительно

&НаКлиенте
Процедура ВыпускПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПроизводствоИПланирование

&НаКлиенте
Процедура Производство_ОткрытьСпецификацию(Команда)
	
	Если ЗначениеЗаполнено(Объект.Спецификация) Тогда
		ПоказатьЗначение(, Объект.Спецификация)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ПоказатьЭтапы(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(Объект.Распоряжение, Объект.ПартияПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ПерейтиКРучномуРедактированиюГрафика(Команда)
	
	ОткрытьФормуРучногоРедактированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ЗаполнитьПоОперациям(Команда)
	
	ЗаполнитьПоОперациямНаСервере();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Операция завершена';
			|en = 'Operation is complete'"),,,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ВыполнениеОпераций(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_СменныеЗадания(Команда)
	
	ОткрытьФорму(
		"Документ.СменноеЗадание.ФормаСписка",
		Новый Структура("ОтборПоЭтапу", Объект.Ссылка),
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_СтруктураЗаказа(Команда)
	
	ОткрытьФорму(
		"Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа",
		Новый Структура("Этап", Объект.Ссылка),
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ОтразитьБрак(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаписатьИОтразитьБракЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо записать документ для выполнения операции. Записать документ?';
				|en = 'You need to save the document before running the operation. Do you want to save it?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОтразитьБрак();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОтразитьБракЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ОтразитьБрак();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_Отменить(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаписатьИОтменитьПроизводствоЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо записать документ для выполнения операции. Записать документ?';
				|en = 'You need to save the document before running the operation. Do you want to save it?'"),
			РежимДиалогаВопрос.ДаНет);
		
		
		ОтменитьПроизводство();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОтменитьПроизводствоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ОтменитьПроизводство();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_СократитьУвеличить(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаписатьИСократитьУвеличитьПроизводствоЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо записать документ для выполнения операции. Записать документ?';
				|en = 'You need to save the document before running the operation. Do you want to save it?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СократитьУвеличитьПроизводство();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИСократитьУвеличитьПроизводствоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		СократитьУвеличитьПроизводство();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_СоздатьНовыйЭтап(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаписатьИСоздатьНовыйЭтапЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо записать документ для выполнения операции. Записать документ?';
				|en = 'You need to save the document before running the operation. Do you want to save it?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СоздатьНовыйЭтап();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИСоздатьНовыйЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		СоздатьНовыйЭтап();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ЗаполнитьПоСпецификации(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьВыходныеИзделия", ЭтоВыпускающийЭтап(ЭтаФорма));
	ПараметрыФормы.Вставить("ИспользоватьТрудозатраты", НЕ Объект.ПроизводствоНаСтороне);
	ПараметрыФормы.Вставить("ИспользоватьВидыРабочихЦентров",
		НЕ Объект.РучноеРазмещениеВГрафике
		И Объект.ПланироватьРаботуВидовРабочихЦентров 
		И ДоступноПланированиеПоПроизводственнымРесурсам(ЭтаФорма));
	
	ОткрытьФорму(
		"Документ.ЭтапПроизводства2_2.Форма.ПараметрыЗаполненияПоСпецификации",
		ПараметрыФормы,
		ЭтаФорма,
		Объект.Ссылка,,,
		Новый ОписаниеОповещения("Производство_ЗаполнитьПоСпецификацииЗавершение", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ЗаполнитьПоСпецификацииЗавершение(ПереченьДанных, ДополнительныеПараметры) Экспорт
	
	Если ПереченьДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииНаСервере(ПереченьДанных);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ОбеспечениеМатериаламиИРаботами 

&НаКлиенте
Процедура ИзменитьДатуОтгрузки(Команда)
	
	Если ТипЗнч(ГрафикПроизводства) = Тип("Структура")
		И ГрафикПроизводства.Свойство("НачалоЭтапа") Тогда
		
		ИзменитьДатуОтгрузкиНаСервере(ГрафикПроизводства.НачалоЭтапа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеВключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеВыключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеКОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеНеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеОтгрузить(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеРезервировать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется") Тогда
		
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
		
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.';
										|en = 'To unreserve inventory, please post the document.'"));
		
	Иначе
		
		НаличиеТоваровКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
		
		Если НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКОбособленномуОбеспечению" Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		ИначеЕсли НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКСтороннемуОбособленномуОбеспечению" Тогда
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечениюПоТекущемуЗаказу(Ложь);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется") Тогда
		
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, МинимальныйСтатус);
		
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.';
										|en = 'To reserve for assignment, post the document first.'"));
		
	Иначе
		
		НаличиеТоваровКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
		
		Если НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКОбособленномуОбеспечению" Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		ИначеЕсли НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКСтороннемуОбособленномуОбеспечению" Тогда
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечениюПоТекущемуЗаказу(Истина);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьМатериалПредыдущий(Команда)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ОбеспечениеМатериаламиИРаботами", ТекущиеДанные.НомерСтроки, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьМатериалСледующий(Команда)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ОбеспечениеМатериаламиИРаботами", ТекущиеДанные.НомерСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьПобочноеИзделиеПредыдущий(Команда)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияПобочныхИзделий Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ПобочныеИзделия", ТекущиеДанные.НомерСтроки, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьПобочноеИзделиеСледующий(Команда)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияПобочныхИзделий Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ПобочныеИзделия", ТекущиеДанные.НомерСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативыМатериалы = НЕ ПоказатьНормативыМатериалы;
	ПоказатьНормативыПриИзмененииНаСервере("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьЗапланированныеКОбеспечению(Команда)
	
	Если Не ПоказатьЗапланированныеКОбеспечению Тогда
		
		КоличествоСтрок = 0;
		ВариантыОбеспечения = ЗапланированныеВариантыКОбеспечению();
		Для каждого ТекущийВариант Из ВариантыОбеспечения Цикл
			
			МассивСтрок = 
				Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(Новый Структура("ВариантОбеспечения", ТекущийВариант.Значение));
				
			КоличествоСтрок = КоличествоСтрок + МассивСтрок.Количество();	
				
		КонецЦикла;	
		
		Если КоличествоСтрок = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запланированные к обеспечению позиции отсутствуют.';
																	|en = 'Scheduled for fulfillment positions are not available.'"));
			Возврат;
		КонецЕсли;	
						
	КонецЕсли;	
	
	ПоказатьЗапланированныеКОбеспечению = НЕ ПоказатьЗапланированныеКОбеспечению;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьЗапланированныеКОбеспечению");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьАналоги(Команда)
	
	ПоказатьАналоги = Не ПоказатьАналоги;
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьАналоги");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьАналоги(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Команда.Обеспечение_ПодобратьАналоги");

	ОткрытьПодборАналогов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаменитьАналогами(Команда)
	
	ЗаменитьНаАналоги();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
								Объект,
								Объект.ОбеспечениеМатериаламиИРаботами,
								НСтр("ru = 'Обеспечение материалами и работами';
									|en = 'Supply with materials and works'"),
								ВыделенныеСтроки) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЭтоГруппа", Ложь);
		Если ОтражениеВыполненного Тогда
			
			ПодразделениеОтбор = Неопределено;
			Для каждого Идентификатор Из ВыделенныеСтроки Цикл
				ДанныеСтроки = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор);
				Если ПодразделениеОтбор = Неопределено Тогда
					ПодразделениеОтбор = ДанныеСтроки.Подразделение;
				ИначеЕсли ПодразделениеОтбор <> ДанныеСтроки.Подразделение Тогда
					ПоказатьПредупреждение(,НСтр("ru = 'В документе выбраны строки разных подразделений. Поле ""Склад"" не может быть заполнено';
												|en = 'Rows with different business units are selected in the document. Cannot populate the ""Warehouse"" field'"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			Отбор.Вставить("Подразделение", ПодразделениеОтбор);
			Отбор.Вставить("ЦеховаяКладовая",	Истина);
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("Отбор,ВыборГруппИЭлементов", Отбор, ИспользованиеГруппИЭлементов.Элементы);
		
		ДополнительныеПараметры =  Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
		ОписаниеОповещения = Новый ОписаниеОповещения("Обеспечение_ЗаполнитьСкладВВыделенныхСтрокахЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			ЭтаФорма,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСкладВВыделенныхСтрокахЗавершение(ВыбранныйСклад, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
		
		ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
		СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьПоСпецификации(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуреКонструктор();
	ДанныеПоНоменклатуре.Количество = КоличествоПлан;
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартииПроизводства,
		"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Спецификация, Номенклатура, Характеристика");
	
	ПараметрыФормы.Вставить("ДанныеПоНоменклатуре", ДанныеПоНоменклатуре);
	ПараметрыФормы.Вставить("Этап", Объект.Этап);
	ПараметрыФормы.Вставить("ПоказыватьКоличествоПодобрано", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКолонкиКоличествоПодобрано", НСтр("ru = 'В этапе';
																		|en = 'In stage'"));
	ПараметрыФормы.Вставить("СтруктураПоискаПодобранныеМатериалы",
		Новый Структура("Номенклатура,Характеристика,Подразделение"));
	ПараметрыФормы.Вставить("АдресПодобранныеМатериалы", ПоместитьМатериалыДляПодбораПоСпецификацииВХранилище());
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ПодборМатериаловПоСпецификации",
			ПараметрыФормы,
			ЭтотОбъект, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииИзрасходованныхМатериаловНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.УказатьСерииИзрасходованныхМатериаловНажатие");
	
	ЗаполнитьПоместитьМатериалыДляУказанияСерийВХранилище(2);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьСерииИзрасходованныхМатериаловНажатиеЗавершение", ЭтаФорма);
	ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СкрыватьОтмененныеСтроки(Команда)
	
	ОбеспечениеСкрыватьОтмененныеСтроки =  Не ОбеспечениеСкрыватьОтмененныеСтроки;
	
	Если ОбеспечениеСкрыватьОтмененныеСтроки Тогда
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Обеспечение_СкрыватьОтмененныеСтроки.Пометка = ОбеспечениеСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспечения(Команда)
	
	Если Объект.РасходМатериаловИРабот.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по данным обеспечения
									|с учетом неизрасходованных материалов?';
									|en = 'Refill the table according to supply data 
									|considering unused materials?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасхода(Команда)
	
	Если Элементы.РасходМатериаловИРабот.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых необходимо заполнить дату расхода.';
									|en = 'Select the materials for which it is required to populate the consumption date.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение", ЭтотОбъект, Элементы.РасходМатериаловИРабот.ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			НачалоДняТекущаяДатаСеанса(), 
			НСтр("ru = 'Введите дату расхода материалов (работ)';
				|en = 'Enter the material (work) consumption date'"), 
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПолучитьВес(Команда)
	
	ПолучитьВес("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ДополнитьПоДаннымОбеспечения(Команда)
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(1);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериалов_СкопироватьСтроки(Команда)

	СкопироватьСтрокиТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьНеизрасходованными(Команда)
	
	ЗаполнитьНеизрасходованнымиМатериалами();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ПолучитьВес(Команда)
	
	ПолучитьВес("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьСтатьюРасходов(Команда)
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых требуется заполнить статью расходов.';
									|en = 'Select materials to fill in the expense item for.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив();
	Для каждого ИдентификаторСтроки Из Элементы.ЭкономияМатериалов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ДанныеСтроки.СписатьНаРасходы Тогда
			Продолжить;
		КонецЕсли;
		Идентификаторы.Добавить(ИдентификаторСтроки);
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'В выделенных строках отсутствуют материалы, для которых требуется заполнить статью расходов.';
									|en = 'There are no materials in the selected lines for which expense item population is required.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыКлиент.ЗаполнитьСтатьюИАналитикуВВыделенныхСтроках(ЭтотОбъект, Элементы.ЭкономияМатериаловСтатьяРасходов, Идентификаторы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДату(Команда)
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых требуется заполнить дату передачи (списания).';
									|en = 'Select the materials for which it is required to populate the transfer (write-off) date.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьДатуЗавершение", ЭтотОбъект, Элементы.ЭкономияМатериалов.ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			НачалоДняТекущаяДатаСеанса(), 
			НСтр("ru = 'Введите дату передачи (списания)';
				|en = 'Enter transfer (write-off) date'"),
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ЭкономияМатериалов");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ВыходныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыходныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Команда.ВыходныеИзделия_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Изделия по рассчитываемой стоимости';
													|en = 'Products by calculated cost'"));
	
	Если ОтражениеВыполненного Тогда
		ПодразделениеОтбор = Неопределено;
		Для каждого Идентификатор Из Элементы.ВыходныеИзделия.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Идентификатор);
			
			Если ДанныеСтроки.СписатьНаРасходы 
				Или ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодразделениеОтбор = Неопределено Тогда
				ПодразделениеОтбор = ДанныеСтроки.Подразделение;
			ИначеЕсли ПодразделениеОтбор <> ДанныеСтроки.Подразделение Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Выбраны строки с разными подразделениями. Операция не может быть выполнена.';
											|en = 'Rows with different business units are selected. Cannot perform the operation.'"));
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПодразделениеОтбор <> Неопределено Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Подразделение", ПодразделениеОтбор);
			Отбор.Вставить("ЦеховаяКладовая", Истина);
			ПараметрыТЧ.Вставить("Отбор", Отбор);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачество(Команда)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ВыходныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКачествоЗавершение", ЭтотОбъект);		
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкрыватьОтмененныеСтроки(Команда)
	
	ВыходныеИзделияСкрыватьОтмененныеСтроки =  Не ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
	Если ВыходныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВыходныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачествоОтменитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ВыходныеИзделия, ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ВыходныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
			
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ВыходныеИзделия");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьЦены(Команда)
	
	ЗаполнитьЦеныПоВидуЦен("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходыеИзделия_ЗаполнитьЦеныПоКалькуляции(Команда)

	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", 
		ОбщегоНазначенияУТКлиентСервер.Массив(ТекущиеДанные.ПолучитьИдентификатор(),
			Ложь));

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	КонецЕсли;
	ПараметрыФормы.Вставить("Назначение", ТекущиеДанные.Назначение);
	ПараметрыФормы.Вставить("Состояние", 
		ПредопределенноеЗначение("Перечисление.СостоянияРасчетаПлановойКалькуляции.Рассчитана"));
	
	ОткрытьФорму("Документ.ПлановаяКалькуляция2_2.Форма.ФормаВыбора", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("ЗавершениеВыбораПлановойКалькуляции", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПлановойКалькуляции(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПлановыеКалькуляцииИЦеныНаСервере(ДополнительныеПараметры.ИдентификаторыСтрок, 
		Результат);
		
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ПобочныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПобочныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Команда.ПобочныеИзделия_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Побочный и промежуточный выход по фиксированной стоимости';
													|en = 'Side and intermediate product at fixed cost'"));
	
	Если ОтражениеВыполненного Тогда
		
		ПодразделениеОтбор = Неопределено;
		Для каждого Идентификатор Из Элементы.ПобочныеИзделия.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект.ПобочныеИзделия.НайтиПоИдентификатору(Идентификатор);
			
			Если ДанныеСтроки.СписатьНаРасходы 
				Или ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодразделениеОтбор = Неопределено Тогда
				ПодразделениеОтбор = ДанныеСтроки.Подразделение;
			ИначеЕсли ПодразделениеОтбор <> ДанныеСтроки.Подразделение Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Выбраны строки с разными подразделениями. Операция не может быть выполнена.';
											|en = 'Rows with different business units are selected. Cannot perform the operation.'"));
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПодразделениеОтбор <> Неопределено Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Подразделение", ПодразделениеОтбор);
			Отбор.Вставить("ЦеховаяКладовая", Истина);
			ПараметрыТЧ.Вставить("Отбор", Отбор);
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачество(Команда)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ПобочныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКачествоЗавершение", ЭтотОбъект, ОписаниеОповещения);		
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьЦены(Команда)
	
	ЗаполнитьЦеныПоВидуЦен("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_СкрыватьОтмененныеСтроки(Команда)
	
	ПобочныеИзделияСкрыватьОтмененныеСтроки = Не ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
	Если ПобочныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПобочныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачествоОтменитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПобочныеИзделия, ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ПобочныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
			
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ПобочныеИзделия");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ПобочныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВидыРабочихЦентров

&НаКлиенте
Процедура КомандаДобавитьАльтернативныйВидРЦ(Команда)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ДобавитьАльтернативныйВидРЦ(
		ТекущиеДанные, 
		ВидыРабочихЦентров, 
		Элементы.ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_Трудозатраты

&НаКлиенте
Процедура Трудозатраты_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьИсполнителейВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Трудозатраты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОчиститьСообщения();
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки для заполнения исполнителей.';
									|en = 'Select lines to fill in assignees.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = Объект.Трудозатраты.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	ПодразделениеОтбор = ПерваяСтрока.Подразделение;
	ТекущийИсполнитель = ПерваяСтрока.Исполнитель;
	
	Для Индекс = 1 По ВыделенныеСтроки.ВГраница() Цикл
		
		ДанныеСтроки = Объект.Трудозатраты.НайтиПоИдентификатору(ВыделенныеСтроки[Индекс]);
		
		Если ПодразделениеОтбор <> Неопределено
			И ПодразделениеОтбор <> ДанныеСтроки.Подразделение Тогда
			ПодразделениеОтбор = Неопределено;
		КонецЕсли;
		
		Если ТекущийИсполнитель <> Неопределено
			И (ТипЗнч(ТекущийИсполнитель) <> ТипЗнч(ДанныеСтроки.Исполнитель)
				ИЛИ ТекущийИсполнитель <> ДанныеСтроки.Исполнитель) Тогда
			ТекущийИсполнитель = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		ПодразделениеОтбор,
		ТекущийИсполнитель,
		Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьСтатьюКалькуляцииВВыделенныхСтроках(Команда)
	
	ЗаполнитьСтатьюКалькуляции("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативыТрудозатраты = НЕ ПоказатьНормативыТрудозатраты;
	ПоказатьНормативыПриИзмененииНаСервере("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкрыватьОтмененныеСтроки(Команда)
	
	ТрудозатратыСкрыватьОтмененныеСтроки =  Не ТрудозатратыСкрыватьОтмененныеСтроки;
	
	Если ТрудозатратыСкрыватьОтмененныеСтроки Тогда
		Элементы.Трудозатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Трудозатраты.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Трудозатраты_СкрыватьОтмененныеСтроки.Пометка = ТрудозатратыСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Если ОтражениеВыполненного
		И НеобходимоУказатьСерииРасхода() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиИЗакрытьОтражениеВыполненногоЗавершение", ЭтаФорма);
		ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	Если ОтражениеВыполненного
		И Объект.Проведен
		И НеобходимоУказатьСерииРасхода() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументОтражениеВыполненногоЗавершение", ЭтаФорма);
		ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	Если ОтражениеВыполненного
		И НеобходимоУказатьСерииРасхода() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиДокументОтражениеВыполненногоЗавершение", ЭтаФорма);
		ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыТЧ      = ДополнительныеПараметры.ПараметрыТЧ;
	ВыделенныеСтроки = Элементы[ПараметрыТЧ.ИмяТЧФорма].ВыделенныеСтроки;
	
	ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, Получатель)
	
	ИмяТЧОбъект = ПараметрыТЧ.ИмяТЧОбъект;
	ИмяТЧФорма  = ПараметрыТЧ.ИмяТЧФорма;
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыУказанияСерий = ЭтаФорма[ЭтаФорма.ПараметрыРедактированияЭтапа.ИмяРеквизитаПараметрыУказанияСерий];
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад"                    , Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий"   , ПараметрыУказанияСерий[ИмяТЧФорма]);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТЧОбъект].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки.Получатель = Получатель;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧФорма, ВыделенныеСтроки, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоЗавершение(ТекущаяСтрока, ДополнительныеПараметры) Экспорт

	СтруктураДействий = Новый Структура;
	
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
		ТекущаяСтрока.Подразделение, СтруктураДействий, "Получатель");		
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшируемыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзменениеКачествоИОтменыСтроки(ИмяТЧ, ИдентификаторыНовойСтроки, ИдентификаторыСтаройСтроки)
	
	СтрокаТаблицы = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторыНовойСтроки);
	
	СтруктураДействий = Новый Структура;
	
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
		СтрокаТаблицы.Подразделение, СтруктураДействий, "Получатель");	
		
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшируемыеЗначения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ИдентификаторыНовойСтроки);
	МассивСтрок.Добавить(ИдентификаторыСтаройСтроки);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок);	
	
КонецПроцедуры		

&НаКлиенте
Процедура ОтразитьКоличествоФактВТЧ(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.КоличествоУпаковокФакт = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Выполнено';
																		|en = 'Completed'")),,
			"КоличествоУпаковокФакт",
			"Объект");
		Возврат;
	ИначеЕсли Объект.КоличествоУпаковокПлан = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Запланировано';
																		|en = 'Scheduled'")),,
			"КоличествоУпаковокПлан",
			"Объект");
		Возврат;
	КонецЕсли;
	
	ПодразделениеСтроки = Неопределено;
	Если Объект.Трудозатраты.Количество() <> 0
			И Не (ИспользоватьПооперационноеУправление И Объект.ОперацияКакРаспоряжениеВыработки)
			И ЕстьТрудозатратыСПустымИсполнителем(ПодразделениеСтроки) Тогда
		ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
			Объект.Организация,
			ПодразделениеСтроки,
			Объект.Исполнитель,
			Новый ОписаниеОповещения("ОтразитьКоличествоФактВТЧВыборИсполнителяЗавершение", ЭтотОбъект));
	Иначе
		ОтразитьКоличествоФактВТЧНаСервере(Неопределено);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Операция завершена';
											|en = 'Operationis complete'"),,,БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьКоличествоФактВТЧВыборИсполнителяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтразитьКоличествоФактВТЧНаСервере(Результат);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Операция завершена';
										|en = 'Operation is complete'"),,,БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьКоличествоОтмененоВТЧ(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.КоличествоУпаковокОтменено = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Отменено';
																		|en = 'Canceled'")),,
			"КоличествоУпаковокОтменено",
			"Объект");
		Возврат;
	ИначеЕсли Объект.КоличествоУпаковокПлан = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Запланировано';
																		|en = 'Scheduled'")),,
			"КоличествоУпаковокПлан",
			"Объект");
		Возврат;
	КонецЕсли;
	
	ПоказатьВводЗначения(
		Новый ОписаниеОповещения("ВыборПричиныОтменыЗавершение", ЭтотОбъект),,
		НСтр("ru = 'Причина отмены';
			|en = 'Cancellation reason'"),
		Тип("СправочникСсылка.ПричиныОтменыПроизводства"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПричиныОтменыЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	ОтразитьКоличествоОтмененоВТЧНаСервере(ПричинаОтмены);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Операция завершена';
										|en = 'Operation is complete'"),,, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьПереопределяемуюКомандуНаСервере(ДополнительныеПараметры) Экспорт
	
	СобытияФорм.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ИменаЭлементов = УправлениеПроизводством.ИменаЭлементовОбеспеченияЭтапаПроизводства();
	ИменаЭлементов.ИмяТЧ = Элементы.ОбеспечениеМатериаламиИРаботами.Имя;
	ИменаЭлементов.ДатаОтгрузки = Элементы.ДатаОтгрузки.Имя;
	ИменаЭлементов.ТЧДатаОтгрузки = Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Имя;
	ИменаЭлементов.ТЧКоличествоУпаковок = Элементы.ОбеспечениеМатериаламиИРаботамиКоличествоУпаковок.Имя;
	ИменаЭлементов.ТЧНоменклатураЕдиницаИзмерения = Элементы.ОбеспечениеМатериаламиИРаботамиНоменклатураЕдиницаИзмерения.Имя;
	ИменаЭлементов.ТЧОбособленно = Элементы.ОбеспечениеМатериаламиИРаботамиОбособленно.Имя;
	ИменаЭлементов.ТЧОтменено = Элементы.ОбеспечениеМатериаламиИРаботамиОтменено.Имя;
	ИменаЭлементов.ТЧПричинаОтмены = Элементы.ОбеспечениеМатериаламиИРаботамиПричинаОтмены.Имя;
	ИменаЭлементов.ТЧСерия = Элементы.ОбеспечениеМатериаламиИРаботамиСерия.Имя;
	ИменаЭлементов.ТЧСклад = Элементы.ОбеспечениеМатериаламиИРаботамиСклад.Имя;
	ИменаЭлементов.ТЧСпецификация = Элементы.ОбеспечениеМатериаламиИРаботамиСпецификация.Имя;
	ИменаЭлементов.ТЧСтатьяКалькуляции = Элементы.ОбеспечениеМатериаламиИРаботамиСтатьяКалькуляции.Имя;
	ИменаЭлементов.ТЧХарактеристика = Элементы.ОбеспечениеМатериаламиИРаботамиХарактеристика.Имя;
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(
		ЭтаФорма, "Объект", "ОбеспечениеМатериаламиИРаботами", ИменаЭлементов);
		
	// Нужно переопределить условное оформление поля Обособленно, установленное в УправлениеПроизводством.УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(...)
	Если ОтражениеВыполненного Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбеспечениеМатериаламиИРаботамиОбособленно.Имя);
		
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		СписокТоварИРабота = Новый СписокЗначений();
		СписокТоварИРабота.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокТоварИРабота.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбеспечениеМатериаламиИРаботами.ТипНоменклатуры");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение = СписокТоварИРабота;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
		
	КонецЕсли;
	
	УстановитьУсловноеОформлениеРасходМатериаловИРабот();
	УстановитьУсловноеОформлениеЭкономияМатериалов();
	УстановитьУсловноеОформлениеВыходныеИзделия();
	УстановитьУсловноеОформлениеТрудозатраты();
	УстановитьУсловноеОформлениеВидыРабочихЦентров();
	
	УстановитьУсловноеОформлениеПлановаяДатаПоступления();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыходныеИзделия()

	ИменаЭлементовВыходныеИзделия = Новый Структура;
	ИменаЭлементовВыходныеИзделия.Вставить("НоменклатураЕдиницаИзмерения", Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Характеристика", Элементы.ВыходныеИзделияХарактеристика.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Серия", Элементы.ВыходныеИзделияСерия.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("СтатусУказанияСерий", Элементы.ВыходныеИзделияСтатусУказанияСерий.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Назначение", Элементы.ВыходныеИзделияНазначение.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ДатаПроизводства", Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ОформитьОтчетДавальцу", Элементы.ВыходныеИзделияОформитьОтчетДавальцу.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("НаправлениеВыпуска", Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("СтатьяРасходов", Элементы.ВыходныеИзделияСтатьяРасходов.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("АналитикаРасходов", Элементы.ВыходныеИзделияАналитикаРасходов.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("АналитикаАктивовПассивов", Элементы.ВыходныеИзделияАналитикаАктивовПассивов.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ПредставлениеОтраженияОперации", Элементы.ВыходныеИзделияПредставлениеОтраженияОперации.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Произведено", Элементы.ВыходныеИзделияПроизведено.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Получатель", Элементы.ВыходныеИзделияПолучатель.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("КоличествоУпаковок", Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Отменено", Элементы.ВыходныеИзделияОтменено.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ПричинаОтмены", Элементы.ВыходныеИзделияПричинаОтмены.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Спецификация", Элементы.ВыходныеИзделияСпецификация.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ОбработатьПоСпецификации", Элементы.ВыходныеИзделияОбработатьПоСпецификации.Имя);

	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ВыходныеИзделия", ИменаЭлементовВыходныеИзделия);
		
	ИменаЭлементовПобочныеИзделия = Новый Структура;
	ИменаЭлементовПобочныеИзделия.Вставить("НоменклатураЕдиницаИзмерения", Элементы.ПобочныеИзделияНоменклатураЕдиницаИзмерения.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Характеристика", Элементы.ПобочныеИзделияХарактеристика.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Серия", Элементы.ПобочныеИзделияСерия.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("СтатусУказанияСерий", Элементы.ПобочныеИзделияСтатусУказанияСерий.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Назначение", Элементы.ПобочныеИзделияНазначение.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ДатаПроизводства", Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ОформитьОтчетДавальцу", Элементы.ПобочныеИзделияОформитьОтчетДавальцу.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("НаправлениеВыпуска", Элементы.ПобочныеИзделияНаправлениеВыпуска.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("СтатьяРасходов", Элементы.ПобочныеИзделияСтатьяРасходов.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("АналитикаРасходов", Элементы.ПобочныеИзделияАналитикаРасходов.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("АналитикаАктивовПассивов", Элементы.ПобочныеИзделияАналитикаАктивовПассивов.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ПредставлениеОтраженияОперации", Элементы.ПобочныеИзделияПредставлениеОтраженияОперации.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Произведено", Элементы.ПобочныеИзделияПроизведено.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Получатель", Элементы.ПобочныеИзделияПолучатель.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("КоличествоУпаковок", Элементы.ПобочныеИзделияКоличествоУпаковок.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Отменено", Элементы.ПобочныеИзделияОтменено.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ПричинаОтмены", Элементы.ПобочныеИзделияПричинаОтмены.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Спецификация", Элементы.ПобочныеИзделияСпецификация.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ОбработатьПоСпецификации", Элементы.ПобочныеИзделияОбработатьПоСпецификации.Имя);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия", ИменаЭлементовПобочныеИзделия);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеНазначенияВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеНазначенияПобочныхИзделийЭтапаПроизводства(
		ЭтаФорма);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(
		ЭтаФорма, "Объект", "ПобочныеИзделия");
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеСтатьиКалькуляцииЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия", "ПобочныеИзделияСтатьяКалькуляции",, Истина);
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеФиксированнойСтоимостиЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия");
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(
		ЭтаФорма, "Объект", "ВыходныеИзделия", "ВыходныеИзделияДоляСтоимости");
		
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцу(
		ЭтотОбъект, "Объект", "ВыходныеИзделия");
		
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцу(
		ЭтотОбъект, "Объект", "ПобочныеИзделия");
		
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцуОтмененныхСтрок(
		ЭтотОбъект, "Объект", "ВыходныеИзделия");
		
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцуОтмененныхСтрок(
		ЭтотОбъект, "Объект", "ПобочныеИзделия");	
	
	#Область ДатаПроизводства_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокВыходныеИзделия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ВыходныеИзделия_ПобочныеИзделия_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыходныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыходныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПобочныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

	#Область ПередачаВПереработку_ДатаПроизводства_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СозданЗаказПереработчику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ПлановаяСтоимость
	
	// Видимость полей плановой стоимости.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЦена.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПлановуюСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭкономияМатериалов()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеЭкономияМатериаловЭтапаПроизводства(
		ЭтаФорма, "Объект");
	
	УстановитьУсловноеОформлениеЭкономияМатериаловНазначение();
	
КонецПроцедуры

&НаСервере
Функция УстановитьУсловноеОформлениеЭкономияМатериаловНазначение()
	
	ЭкономияМатериаловНазначениеПредставление = "ЭкономияМатериаловНазначениеТекстНаименованиеЭтапа";
	Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		
		Если Элемент.Представление = ЭкономияМатериаловНазначениеПредставление Тогда
			
			УсловноеОформление.Элементы.Удалить(Элемент);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Вставить(0);
	Элемент.Представление = ЭкономияМатериаловНазначениеПредставление;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловНадписьНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭкономияМатериалов.Обособить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<%1>", Объект.НазначениеМатериалы));
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеРасходМатериаловИРабот()
	
	ИменаЭлементов = УправлениеПроизводством.ИменаЭлементовРасходМатериаловИРаботЭтапаПроизводства();
	ИменаЭлементов.НоменклатураЕдиницаИзмерения = Элементы.РасходМатериаловИРаботНоменклатураЕдиницаИзмерения.Имя;
	ИменаЭлементов.Характеристика               = Элементы.РасходМатериаловИРаботХарактеристика.Имя;
	ИменаЭлементов.Серия                        = Элементы.РасходМатериаловИРаботСерия.Имя;
	ИменаЭлементов.СтатьяКалькуляции            = Элементы.РасходМатериаловИРаботСтатьяКалькуляции.Имя;
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеРасходМатериаловИРаботЭтапаПроизводства(
		ЭтаФорма, "Объект", "РасходМатериаловИРабот", ИменаЭлементов);

	#Область ДатаРасхода_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасходОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокРасхода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидыРабочихЦентров()
	
	РедакторПроизводственногоПроцесса.УстановитьУсловноеОформлениеВидыРабочихЦентров(
		ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТрудозатраты()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеТрудозатраты(
		ЭтаФорма, "Объект", "Трудозатраты");
	
	#Область ДатаВыполненияРаботТаблица_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыДатаВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.Выполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ДатаВыполненияРаботПодвал_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыполненияРабот.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыполнениеРаботОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокТрудозатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПлановаяДатаПоступления()
	
	// Реквизит в шапке
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СтатусНачат();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Выходные изделия
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Побочные изделия
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если ОтражениеВыполненного Тогда
		
		Элементы.ГруппаШапкаПраво.Видимость			= Ложь;
		Элементы.Распоряжение.Видимость				= Ложь;
		
		Элементы.ВыходныеИзделияГруппаОтмена.Видимость	= Ложь;
		Элементы.ПобочныеИзделияГруппаОтмена.Видимость	= Ложь;
		
		Элементы.ВыходныеИзделия_ОтменаСтрок.Видимость	= Ложь;
		Элементы.ПобочныеИзделия_ОтменаСтрок.Видимость	= Ложь;
		
		Элементы.ГруппаДополнительно.Видимость			= Ложь;
		
		Элементы.СтраницаОбеспечениеМатериаламиИРаботами.Заголовок			= НСтр("ru = 'Материалы и работы';
																					|en = 'Materials and works'");
		
		МассивСвязиПараметров = Новый Массив;
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Подразделение", "Объект.Подразделение"));
		МассивСвязиПараметров = Новый ФиксированныйМассив(МассивСвязиПараметров);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦеховаяКладовая", Истина));
		МассивПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.ОбеспечениеМатериаламиИРаботамиСклад.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ОбеспечениеМатериаламиИРаботамиСклад.ПараметрыВыбора		= МассивПараметровВыбора;
		
		Элементы.ЭкономияМатериаловПолучатель.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ЭкономияМатериаловПолучатель.ПараметрыВыбора		= МассивПараметровВыбора;
		
		Элементы.ВыходныеИзделияПолучатель.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ВыходныеИзделияПолучатель.ПараметрыВыбора			= МассивПараметровВыбора;
		
		Элементы.ПобочныеИзделияПолучатель.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ПобочныеИзделияПолучатель.ПараметрыВыбора			= МассивПараметровВыбора;
		
	Иначе
		Элементы.УказатьСерииИзрасходованныхМатериалов.Видимость = Ложь;
	КонецЕсли;
	
	ЭтоВыпускающийЭтап = ЭтоВыпускающийЭтап(ЭтаФорма);
	Если ЭтоВыпускающийЭтап Тогда
		
		ПобочныеИзделияСвернуты = (Объект.ПобочныеИзделия.Количество() = 0);
		
		УстановитьСвойстваСворачиваемойГруппы(
			Элементы.ГруппаПобочныеИзделияСворачиваемая, 
			Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
			ПобочныеИзделияСвернуты);
			
	КонецЕсли;
	
	НеизрасходованныеМатериалыСвернуты = (Объект.ЭкономияМатериалов.Количество() = 0);
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов,
		НеизрасходованныеМатериалыСвернуты);
	
	Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = ЭтоВыпускающийЭтап;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда // СубдавальческаяСхема
		Элементы.ГруппаСпособПроизводства.Видимость = ИспользуетсяПроизводствоНаСтороне;
	Иначе
		Элементы.ГруппаСпособПроизводства.Видимость = Объект.ПроизводствоНаСтороне;
	КонецЕсли;
	
	Элементы.НазначениеПродукция.Видимость = НЕ Объект.НазначениеПродукция.Пустая();
	
	Если Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		Элементы.ВыходныеИзделияОбработатьПоСпецификации.Видимость = Ложь;
		Элементы.ВыходныеИзделияСпецификация.Видимость = Ложь;
		Элементы.ПобочныеИзделияОбработатьПоСпецификации.Видимость = Ложь;
		Элементы.ПобочныеИзделияСпецификация.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		Элементы.ГруппаВыполнение.Видимость = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиГруппаПроизводится.Видимость = Ложь;
	КонецЕсли;
	
	НадписьСпецификация = ФорматированнаяСтрокаНадписьСпецификация();
	НадписьИзделие = ФорматированнаяСтрокаНадписьИзделие();
	
	УстановитьВидимостьОбеспечения();
	
	Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала.Видимость = 
		ПравоЧтенияАналогов И ПоказатьАналоги;
		
	Элементы.ОбеспечениеМатериаламиИРаботамиГруппаАналоги.Видимость = 
		ПравоЧтенияАналогов;
	
	Элементы.НачатьЭтап.Доступность = ЕстьПравоНаИзменение;
	Элементы.ЗакрытьЭтап.Доступность = ЕстьПравоНаИзменение;
	
	Элементы.ФормаСтруктураЗаказа.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.СтруктураЗаказаНаПроизводство2_2);
	
	МассивПараметров = Новый ФиксированныйМассив(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Новый ПараметрВыбора("Номенклатура", ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура)));
	Элементы.УпаковкаПлан.ПараметрыВыбора = МассивПараметров;
	Элементы.УпаковкаФакт.ПараметрыВыбора = МассивПараметров;
	Элементы.УпаковкаОтменено.ПараметрыВыбора = МассивПараметров;
	
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(
		ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура, Элементы.УпаковкаПлан);
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(
		ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура, Элементы.УпаковкаФакт);
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(
		ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура, Элементы.УпаковкаОтменено);
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
	СформироватьКомментарийКонвертации(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при изменении реквизитов от которых зависят свойства других реквизитов, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Заголовок формы
	#Область ЗаголовокФормы
	Если СтруктураРеквизитов.Свойство("НаименованиеЭтапа") 
		ИЛИ Инициализация Тогда
		
		ЗаголовокСтроки = Новый Массив;
		
		РеквизитыПредставления = Новый Структура("Номер, НаименованиеЭтапа");
		ЗаполнитьЗначенияСвойств(РеквизитыПредставления, Объект);
		
		ПредставлениеЭтапа = ПредставлениеЭтапа(РеквизитыПредставления);
		ЗаголовокСтроки.Добавить(ПредставлениеЭтапа);
		ЗаголовокСтроки.Добавить(НСтр("ru = '(Этап производства)';
										|en = '(Production stage)'"));
		
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = СтрСоединить(ЗаголовокСтроки, " ");
		
	КонецЕсли;
	#КонецОбласти
	
	// Подразделение
	#Область Подразделение
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		Элементы.Подразделение.ТолькоПросмотр = Форма.ИспользоватьПооперационноеУправление И Форма.НачатоВыполнениеОпераций;
		
	КонецЕсли;
	#КонецОбласти
	
	// Маршрутная карта
	#Область МаршрутнаяКарта
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("МаршрутнаяКарта")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаМаршрутнаяКарта.Видимость =
			Форма.ИспользоватьПооперационноеУправление
			И Не Объект.ПроизводствоНаСтороне
			И Не Объект.ТипПроизводственногоПроцесса =
				ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций")
			И Форма.ИспользоватьМаршрутныеКарты;
		
		Если Форма.ИспользоватьПооперационноеУправление Тогда
			
			Элементы.МаршрутнаяКарта.ТолькоПросмотр = Форма.НачатоВыполнениеОпераций;
			Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр = Форма.НачатоВыполнениеОпераций
				ИЛИ Объект.МаршрутнаяКарта.Пустая();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("МаршрутнаяКарта")
		ИЛИ Инициализация Тогда
		
		Элементы.КоэффициентМаршрутнойКарты.АвтоОтметкаНезаполненного = НЕ Объект.МаршрутнаяКарта.Пустая();
		
	КонецЕсли;
	#КонецОбласти
	
	// Переработка на стороне
	#Область СпособПроизводства
	Если СтруктураРеквизитов.Свойство("СпособПроизводства") ИЛИ Инициализация Тогда
		
		Элементы.СтраницаТрудозатраты.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ВыходныеИзделияПроизведено.Видимость =
			НЕ Форма.Объект.ПроизводствоНаСтороне
			И НЕ Форма.ОтражениеВыполненного;
		Элементы.ПобочныеИзделияПроизведено.Видимость = 
			НЕ Форма.Объект.ПроизводствоНаСтороне
			И НЕ Форма.ОтражениеВыполненного;
		
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику Тогда
				
				МассивСтрок = Новый Массив;
				ПредставлениеЗаказа = СтрШаблон(НСтр("ru = 'заказ переработчику № %1 от %2';
													|en = 'Purchase order — Subcontracting No. %1, %2'"), 
											ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
													Форма.РеквизитыЗаказаПереработчика.Номер, Ложь, Истина),
											Формат(Форма.РеквизитыЗаказаПереработчика.Дата, "ДЛФ=D"));
											
				Если Форма.ПравоПросмотраЗаказаПереработчику Тогда
					СсылкаНаЗаказ = ПолучитьНавигационнуюСсылку(Форма.Объект.ЗаказПереработчику);
				Иначе
					СсылкаНаЗаказ = Неопределено;
				КонецЕсли;
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаказа,,,, СсылкаНаЗаказ));
				
				Если НЕ Форма.РеквизитыЗаказаПереработчика.Проведен Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
												НСтр("ru = 'не проведен';
													|en = 'not posted'"),, Форма.ЦветОсобогоТекста));
				КонецЕсли;
				ТекстЗаказ = Новый ФорматированнаяСтрока(МассивСтрок);
			ИначеЕсли Форма.ПравоДобавленияЗаказаПереработчику Тогда
				ТекстЗаказ = Новый ФорматированнаяСтрока(НСтр("ru = 'создать заказ переработчику';
																|en = 'create Purchase order — Subcontracting'"),,,, "#СоздатьЗаказ");
			Иначе
				ТекстЗаказ = Новый ФорматированнаяСтрока(НСтр("ru = 'нет заказа переработчику';
																|en = 'no Purchase order — Subcontracting'"));
			КонецЕсли; 
			
			Форма.НадписьЗаказПереработчику = Новый ФорматированнаяСтрока("(", ТекстЗаказ, ")");
		Иначе
			Форма.НадписьЗаказПереработчику = Новый ФорматированнаяСтрока("");
		КонецЕсли;
		
		Если Объект.ПроизводствоНаСтороне И Форма.СозданЗаказПереработчику 
			ИЛИ Форма.ИспользоватьПооперационноеУправление И Форма.НачатоВыполнениеОпераций Тогда
			
			Элементы.СпособПроизводства.ТолькоПросмотр = Истина;
		Иначе
			Элементы.СпособПроизводства.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Элементы.ПобочныеИзделия_ЗаполнитьЦены.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
	КонецЕсли;
	#КонецОбласти
	
	// График производства
	#Область ГрафикПроизводства
	
	// Параметры планирования
	Если СтруктураРеквизитов.Свойство("СпособПланирования")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаПериодПроизводства.Видимость =
			Форма.ПланируетсяГрафикПроизводства
			И НЕ Форма.ОтражениеВыполненного;
			
		Элементы.ГруппаПараметрыПланированияГрафика.Видимость =
			Форма.ПланируетсяГрафикПроизводства
			И НЕ Форма.ОтражениеВыполненного;
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			
			Элементы.ГруппаПериодПроизводства.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
			Элементы.ГруппаПараметрыПланированияГрафика.Доступность = Форма.ПравоРедактированияГрафикаПроизводства
															 И Объект.Статус <> СтатусЗавершен();
			
			Элементы.ГруппаДлительностьУББВ.Видимость = НЕ Форма.Объект.РучноеРазмещениеВГрафике
													  И НЕ Форма.Объект.ПланироватьРаботуВидовРабочихЦентров;
			Элементы.ДекорацияОтступУББВ.Видимость = Элементы.ДлительностьЭтапа.Видимость;
			
			Элементы.СпособПланированияББВ.Видимость = ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
			Элементы.ДекорацияОтступББВ.Видимость = ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
			
			Элементы.РучноеРедактированиеГрафикаПроизводства.Видимость = Форма.Объект.РучноеРазмещениеВГрафике;
		
			Элементы.ГруппаПланироватьНеРанее.Доступность = НЕ Форма.Объект.РучноеРазмещениеВГрафике
															И Объект.Статус <> СтатусНачат()
															И Объект.Статус <> СтатусЗавершен();
			
		КонецЕсли;
		
		Элементы.ГруппаПараметрыПланированияБезГрафика.Видимость =
			НЕ Форма.ПланируетсяГрафикПроизводства
			И НЕ Форма.ОтражениеВыполненного;
		Элементы.ГруппаПараметрыПланированияБезГрафика.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
		
		Элементы.СтраницаВидыРабочихЦентров.Видимость = НЕ Форма.Объект.РучноеРазмещениеВГрафике
														 И Форма.Объект.ПланироватьРаботуВидовРабочихЦентров 
														 И ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
														 
		Элементы.СтраницаВидыРабочихЦентров.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
		
	КонецЕсли;
	
	// Предварительный буфер
	Если СтруктураРеквизитов.Свойство("ПредварительныйБуфер") ИЛИ Инициализация Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
			И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Завершающий буфер
	Если СтруктураРеквизитов.Свойство("ЗавершающийБуфер") ИЛИ Инициализация Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
			И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Единица измерения длительности этапа УББВ
	Если СтруктураРеквизитов.Свойство("ЕдиницаИзмеренияДлительностиЭтапа") ИЛИ Инициализация Тогда
		
		ЕдиницаИзмеренияДень = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День");
		
		Если Форма.Объект.ЕдиницаИзмеренияДлительностиЭтапа = ЕдиницаИзмеренияДень Тогда
			ТекстПодсказки = НСтр("ru = 'При планировании используется календарь работы подразделения.';
									|en = 'Business unit calendar is used on scheduling.'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'При планировании используется расписание работы подразделения.';
									|en = 'Business unit timetable is used while planning.'");
		КонецЕсли;
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			Форма.Элементы.ЕдиницаИзмеренияДлительностиЭтапа.Подсказка = ТекстПодсказки;
		Иначе
			Форма.Элементы.ЕдиницаИзмеренияДлительностиЭтапаБезГрафика.Подсказка = ТекстПодсказки;
		КонецЕсли;
		
	КонецЕсли;
		
	// Период планирования
	Если СтруктураРеквизитов.Свойство("ГрафикПроизводства")
		ИЛИ Инициализация Тогда
		
		ТекстПериодПроизводства = "";
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			
			Если Форма.ГрафикПроизводства.Рассчитан Тогда
				
				ШаблонПериодПроизводства = НСтр("ru = 'с %1 по %2';
												|en = 'from %1 to %2'");
				
				ТекстПериодПроизводства = СтрШаблон(ШаблонПериодПроизводства,
											Формат(Форма.ГрафикПроизводства.НачалоЭтапа, Форма.ФорматДатыГрафика),
											Формат(Форма.ГрафикПроизводства.ОкончаниеЭтапа, Форма.ФорматДатыГрафика));
				
			Иначе
				
				ТекстПериодПроизводства = НСтр("ru = '<график производства не рассчитан>';
												|en = '<production schedule is not calculated>'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.НадписьПериодПроизводства = ТекстПериодПроизводства;
		
	КонецЕсли;
	
	// Планировать не ранее
	Если СтруктураРеквизитов.Свойство("ОтметкаПланироватьНеРанее")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПланирования")
		ИЛИ Инициализация Тогда
		
		Элементы.НадписьПланироватьНеРанее.Видимость = Форма.ОтметкаПланироватьНеРанее;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Обеспечение, Расход, Экономия
	#Область Обеспечение_РасходМатериаловИРабот_ЭкономияМатериалов
	
	Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот")
		ИЛИ СтруктураРеквизитов.Свойство("ЭкономияМатериалов") 
		ИЛИ Инициализация Тогда
		
		РасходМатериаловИРаботКоличество = Форма.Объект.РасходМатериаловИРабот.Количество();
		ЭкономияМатериаловКоличество = Форма.Объект.ЭкономияМатериалов.Количество();
		
		Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот") ИЛИ Инициализация Тогда
			Если РасходМатериаловИРаботКоличество > 0 Тогда
				Форма.НадписьРасходМатериаловИРабот = СтрШаблон("%1 (%2)", Элементы.РасходМатериаловИРабот.Заголовок, РасходМатериаловИРаботКоличество);
			Иначе
				Форма.НадписьРасходМатериаловИРабот = Элементы.РасходМатериаловИРабот.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ЭкономияМатериалов") ИЛИ Инициализация Тогда
			Если ЭкономияМатериаловКоличество > 0 Тогда
				Форма.НадписьЭкономияМатериалов = СтрШаблон("%1 (%2)", Элементы.ЭкономияМатериалов.Заголовок, ЭкономияМатериаловКоличество);
			Иначе
				Форма.НадписьЭкономияМатериалов = Элементы.ЭкономияМатериалов.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокРасхода = РасходМатериаловИРаботКоличество + ЭкономияМатериаловКоличество;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СпособПроизводства") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		ВидимостьЭлементов = НЕ Форма.Объект.ПроизводствоНаСтороне
							И НЕ Форма.ОтражениеВыполненного
							И (Форма.Объект.Статус = СтатусНачат() ИЛИ Форма.Объект.Статус = СтатусЗавершен());
							
		Элементы.СтраницаРасходМатериаловИРабот.Видимость = ВидимостьЭлементов;
		
	КонецЕсли;
	
	// Отгрузка одной датой и дата отгрузки
	Если СтруктураРеквизитов.Свойство("НеОтгружатьЧастями")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		// Если этап включен в заказ переработчику, 
		// то в этапе нельзя изменять режим ввода дат, 
		// т.к. он должен быть единым для всех этапов заказа.
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику И НЕ Объект.НеОтгружатьЧастями Тогда
				Элементы.НеОтгружатьЧастями.Видимость = Ложь;
			Иначе
				Элементы.НеОтгружатьЧастями.Видимость = Истина;
			КонецЕсли;
			
			Элементы.НеОтгружатьЧастями.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			Элементы.ДатаОтгрузки.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			
		КонецЕсли;
		
		Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЕстьУточненияМатериалов") ИЛИ Инициализация Тогда
		Элементы.ГруппаУточнениеМатериалов.Видимость = Форма.ЕстьУточненияМатериалов;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЕстьУточненияПобочныхИзделий") ИЛИ Инициализация Тогда
		Элементы.ГруппаУточнениеПобочныхИзделий.Видимость = Форма.ЕстьУточненияПобочныхИзделий;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НеОтгружатьЧастями")
		ИЛИ СтруктураРеквизитов.Свойство("ДатаОтгрузки")
		ИЛИ СтруктураРеквизитов.Свойство("ГрафикПроизводства")
		ИЛИ Инициализация Тогда
		
		ПеренестиДатуОтгрузки = Объект.НеОтгружатьЧастями
			И Форма.ПланируетсяГрафикПроизводства
			И ЗначениеЗаполнено(Форма.ГрафикПроизводства.НачалоЭтапа)
			И Объект.ДатаОтгрузки <> НачалоДня(Форма.ГрафикПроизводства.НачалоЭтапа);
		
		Форма.Элементы.ИзменитьДатуОтгрузки.Видимость = ПеренестиДатуОтгрузки;
		
		Если ПеренестиДатуОтгрузки Тогда
			
			Форма.Элементы.ИзменитьДатуОтгрузки.Заголовок = СтрШаблон(
				НСтр("ru = 'установить %1 (по графику)';
					|en = 'set %1 (on schedule)'"),
				Формат(Форма.ГрафикПроизводства.НачалоЭтапа, "ДЛФ=D"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РасходОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.ДатаРасхода.Видимость = Объект.РасходОднойДатой;
		Элементы.РасходМатериаловИРаботДатаРасхода.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.ЭкономияМатериаловДатаОперации.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.РасходМатериаловИРабот_ЗаполнитьДатуРасхода.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.ЭкономияМатериалов_ЗаполнитьДату.Видимость = НЕ Объект.РасходОднойДатой;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПоказатьЗапланированныеКОбеспечению") 
	 Или Инициализация Тогда
	 
		Элементы.Обеспечение_ПоказатьЗапланированныеКОбеспечению.Пометка = Форма.ПоказатьЗапланированныеКОбеспечению;
		
		Если Форма.ПоказатьЗапланированныеКОбеспечению Тогда
			
			ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока;
			Если ТекущаяСтрока <> Неопределено Тогда
				
				СтрокаТаблицы = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ТекущаяСтрока);
				ИдентификаторСтроки = Неопределено;
				Если СтрокаТаблицы = Неопределено И Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 0 Тогда
					СтрокаТаблицы = Объект.ОбеспечениеМатериаламиИРаботами[0];
					ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
				КонецЕсли;
				
				ТекущаяСтрокаУстановлена = Ложь;
				
				ВариантыОбеспечения = ЗапланированныеВариантыКОбеспечению();
				Если СтрокаТаблицы <> Неопределено
				   И ВариантыОбеспечения.НайтиПоЗначению(СтрокаТаблицы.ВариантОбеспечения) = Неопределено Тогда 
					
					Для каждого СтрокаТаблицы Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
						
						Если ВариантыОбеспечения.НайтиПоЗначению(СтрокаТаблицы.ВариантОбеспечения) = Неопределено Тогда
							Продолжить;
						КонецЕсли;	
							
						Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
						ТекущаяСтрокаУстановлена = Истина;
						Прервать;
							
					КонецЦикла;	
					
				КонецЕсли;
				
				Если Не ТекущаяСтрокаУстановлена И ИдентификаторСтроки <> Неопределено Тогда
					Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока = ИдентификаторСтроки;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
		
	#КонецОбласти
	
	// Выходные изделия
	#Область ВыходныеИзделия_ПобочныеИзделия
	
	Если СтруктураРеквизитов.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураРеквизитов.Свойство("ПобочныеИзделия") 
		ИЛИ Инициализация Тогда
		
		Форма.ВыходныеИзделияКоличество = Форма.Объект.ВыходныеИзделия.Количество();
		Форма.ПобочныеИзделияКоличество = Форма.Объект.ПобочныеИзделия.Количество();
		
		Если СтруктураРеквизитов.Свойство("ВыходныеИзделия") ИЛИ Инициализация Тогда
			Если Форма.ВыходныеИзделияКоличество > 0 Тогда
				Форма.НадписьПродукция = СтрШаблон("%1 (%2)", Элементы.ВыходныеИзделия.Заголовок, Форма.ВыходныеИзделияКоличество);
			Иначе
				Форма.НадписьПродукция = Элементы.ВыходныеИзделия.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ПобочныеИзделия") ИЛИ Инициализация Тогда
			Если Форма.ПобочныеИзделияКоличество > 0 Тогда
				Форма.НадписьПобочныеИзделия = СтрШаблон("%1 (%2)", Элементы.ПобочныеИзделия.Заголовок, Форма.ПобочныеИзделияКоличество);
			Иначе
				Форма.НадписьПобочныеИзделия = Элементы.ПобочныеИзделия.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокВыходныеИзделия = Форма.ВыходныеИзделияКоличество + Форма.ПобочныеИзделияКоличество;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЭтоВыпускающийЭтап")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаПродукция.Видимость = ЭтоВыпускающийЭтап(Форма)
			ИЛИ Форма.Объект.ВыходныеИзделия.Количество() > 0;
		Если НЕ Элементы.ГруппаПродукция.Видимость Тогда
			Элементы.ГиперСсылкаНадписьПобочныеИзделия.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// Производство одной датой и дата производства
	Если СтруктураРеквизитов.Свойство("ПроизводствоОднойДатой")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		// Если этап включен в заказ переработчику, 
		// то в этапе нельзя изменять режим ввода дат, 
		// т.к. он должен быть единым для всех этапов заказа.
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Элементы.ПроизводствоОднойДатой.Видимость = Форма.СозданЗаказПереработчику И Объект.ПроизводствоОднойДатой;
			Элементы.ДатаПроизводства.Видимость = Форма.СозданЗаказПереработчику И Объект.ПроизводствоОднойДатой;
			
			Элементы.ВыходныеИзделияДатаПроизводства.Видимость = Форма.СозданЗаказПереработчику И Не Объект.ПроизводствоОднойДатой;
			Элементы.ПобочныеИзделияДатаПроизводства.Видимость = Форма.СозданЗаказПереработчику И Не Объект.ПроизводствоОднойДатой;
			
			Элементы.ПроизводствоОднойДатой.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			Элементы.ДатаПроизводства.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			
			ДоступностьПоСтатусу = Объект.Статус = СтатусКВыполнению() Или Объект.Статус = СтатусНачат() Или Объект.Статус = СтатусЗавершен();
			Элементы.ВыходныеИзделияДатаПроизводства.ТолькоПросмотр = Не ДоступностьПоСтатусу;
			Элементы.ПобочныеИзделияДатаПроизводства.ТолькоПросмотр = Не ДоступностьПоСтатусу;
			
		Иначе
			
			НачатоПроизводство = Объект.Статус = СтатусНачат() Или Объект.Статус = СтатусЗавершен();
			
			Элементы.ПроизводствоОднойДатой.Видимость = НачатоПроизводство;
			Элементы.ДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			
			Элементы.ВыходныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			Элементы.ПобочныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Трудозатраты
	#Область Трудозатраты
	
	Если СтруктураРеквизитов.Свойство("Трудозатраты")
		ИЛИ Инициализация Тогда
		Форма.КоличествоСтрокТрудозатрат = Форма.Объект.Трудозатраты.Количество();
	КонецЕсли;
	
	// Дата выполнения работ
	Если СтруктураРеквизитов.Свойство("ВыполнениеРаботОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.ДатаВыполненияРабот.Видимость = Объект.ВыполнениеРаботОднойДатой;
		Элементы.ТрудозатратыДатаВыполнения.Видимость = Не Объект.ВыполнениеРаботОднойДатой;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		ВидимостьФакта = Не (Форма.ИспользоватьПооперационноеУправление И Объект.ОперацияКакРаспоряжениеВыработки)
		ИЛИ Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Элементы.ТрудозатратыГруппаВыполнено.Видимость   = ВидимостьФакта И НЕ Форма.ОтражениеВыполненного;
		Элементы.ТрудозатратыИсполнитель.Видимость       = ВидимостьФакта;
		Элементы.ТрудозатратыСтатьяКалькуляции.Видимость = ВидимостьФакта;
		Элементы.ГруппаДатаВыполненияРабот.Видимость     = ВидимостьФакта;
		
		Элементы.Трудозатраты_ЗаполнитьИсполнителейВВыделенныхСтроках.Видимость      = ВидимостьФакта;
		Элементы.Трудозатраты_ЗаполнитьСтатьюКалькуляцииВВыделенныхСтроках.Видимость = ВидимостьФакта;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Нормативы
	#Область Нормативы
	
	Если СтруктураРеквизитов.Свойство("ПоказатьНормативы") ИЛИ Инициализация Тогда
		
		Элементы.ОбеспечениеМатериаламиИРаботамиНорматив.Видимость = Форма.ПоказатьНормативыМатериалы;
		Элементы.Обеспечение_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативыМатериалы;
		
		Элементы.ТрудозатратыНорматив.Видимость = Форма.ПоказатьНормативыТрудозатраты;
		Элементы.Трудозатраты_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативыТрудозатраты;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Выполнение
	#Область ВыполнениеЭтапа
	
	// Группы для отражения выполнения
	Если СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаВыполнено.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ГруппаОтменено.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ГруппаНесоответствиеКоличестваВыполнено.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ГруппаНесоответствиеКоличестваОтменено.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ГруппаИзменениеПартии.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне
			И Объект.ТипПроизводственногоПроцесса
				<> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
	КонецЕсли;
	
	// Сроки выполнения
	Если СтруктураРеквизитов.Свойство("НачатоВыполнениеЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("ЗавершеноВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеНачалоЭтапа.АвтоОтметкаНезаполненного = Форма.НачатоВыполнениеЭтапа;
		Элементы.ФактическоеОкончаниеЭтапа.АвтоОтметкаНезаполненного = Форма.ЗавершеноВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Фактическое начало этапа
	Если СтруктураРеквизитов.Свойство("НачатоВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеНачалоЭтапа.ТолькоПросмотр = НЕ Форма.НачатоВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Фактическое окончание этапа
	Если СтруктураРеквизитов.Свойство("ЗавершеноВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеОкончаниеЭтапа.ТолькоПросмотр = НЕ Форма.ЗавершеноВыполнениеЭтапа;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Спецификация
	#Область Спецификация
	
	Если СтруктураРеквизитов.Свойство("Спецификация")
		ИЛИ Инициализация Тогда
			
		ВидимостьЭлементов = НЕ Форма.Объект.Спецификация.Пустая()
			И НЕ Форма.Объект.Этап.Пустая();
		Элементы.ФормаЗаполнитьПоСпецификации.Видимость        = ВидимостьЭлементов;
		Элементы.Обеспечение_ПоказатьНормативы.Видимость       = ВидимостьЭлементов;
		Элементы.Обеспечение_ПодобратьПоСпецификации.Видимость = ВидимостьЭлементов;
		Элементы.Трудозатраты_ПоказатьНормативы.Видимость      = ВидимостьЭлементов;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Работа с операциями
	#Область Операции
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("ТребуетсяЗаполнитьПоОперациям")
		ИЛИ Инициализация Тогда
		
		// видимость элементов
		ВидимостьЭлементов =
			Форма.ИспользоватьПооперационноеУправление
			И Не Форма.Объект.ПроизводствоНаСтороне
			И Не Форма.ОтражениеВыполненного;
		
		Элементы.ФормаЗаполнитьПоОперациям.Видимость     = ВидимостьЭлементов;
		Элементы.ТребуетсяЗаполнитьПоОперациям.Видимость = ВидимостьЭлементов И Форма.Объект.ТребуетсяЗаполнитьПоОперациям;
		Элементы.ФормаВыполнениеОпераций.Видимость       = ВидимостьЭлементов;
		Элементы.ФормаСменныеЗадания.Видимость           = ВидимостьЭлементов И Форма.ИспользоватьСменныеЗадания;
		
		// доступность элементов
		ПроверяемыеСтатусы = УправлениеПроизводствомКлиентСервер.СтатусыДоступноПооперационноеУправление(Форма);
		ДоступностьЭлементов = ПроверяемыеСтатусы.Найти(Форма.Объект.Статус) <> Неопределено;
		
		Элементы.ФормаЗаполнитьПоОперациям.Доступность = ДоступностьЭлементов;
		Элементы.ФормаВыполнениеОпераций.Доступность   = ДоступностьЭлементов;
		Элементы.ФормаСменныеЗадания.Доступность       = ДоступностьЭлементов;
		
		// вид группы Перейти
		КоличествоПотомков = 0;
		Для каждого Элемент Из Элементы.ФормаГруппаПерейти.ПодчиненныеЭлементы Цикл
			Если Элемент.Видимость Тогда
				КоличествоПотомков = КоличествоПотомков + 1;
			КонецЕсли;
		КонецЦикла;
		Элементы.ФормаГруппаПерейти.Вид = ?(КоличествоПотомков > 1,
			ВидГруппыФормы.Подменю,
			ВидГруппыФормы.ГруппаКнопок);
		
	КонецЕсли;
	#КонецОбласти
	
	// Группа Заполнить
	#Область Заполнить
	
	Если СтруктураРеквизитов.Свойство("Спецификация")
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		КоличествоПотомков = 0;
		Для каждого Элемент Из Элементы.ФормаГруппаЗаполнить.ПодчиненныеЭлементы Цикл
			Если Элемент.Видимость Тогда
				КоличествоПотомков = КоличествоПотомков + 1;
			КонецЕсли;
		КонецЦикла;
		Элементы.ФормаГруппаЗаполнить.Вид = ?(КоличествоПотомков > 1,
			ВидГруппыФормы.Подменю,
			ВидГруппыФормы.ГруппаКнопок);
		Если КоличествоПотомков > 1 Тогда
			Элементы.ФормаЗаполнитьПоСпецификации.Заголовок = НСтр("ru = 'По спецификации';
																	|en = 'By bill of materials'");
			Элементы.ФормаЗаполнитьПоОперациям.Заголовок = НСтр("ru = 'По операциям';
																|en = 'By operations'");
		Иначе
			Элементы.ФормаЗаполнитьПоСпецификации.Заголовок = НСтр("ru = 'Заполнить по спецификации';
																	|en = 'Fill in with BOM'");
			Элементы.ФормаЗаполнитьПоОперациям.Заголовок = НСтр("ru = 'Заполнить по операциям';
																|en = 'Fill in according to the operations'");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// ВидыРабочихЦентров
	#Область ВидыРабочихЦентров
	
	Если СтруктураРеквизитов.Свойство("ВидыРабочихЦентров")
		ИЛИ Инициализация Тогда
		
		НесколькоВидовРЦ = Форма.ВидыРабочихЦентров.ПолучитьЭлементы().Количество() > 1;
	
		Если НесколькоВидовРЦ Тогда
			Элементы.ПорядокРаботыВидовРабочихЦентров.ПодсказкаВвода = "";
		Иначе
			Элементы.ПорядокРаботыВидовРабочихЦентров.ПодсказкаВвода = НСтр("ru = '<не используется>';
																			|en = '<not used>'");
		КонецЕсли;
		
		Элементы.ПорядокРаботыВидовРабочихЦентров.Доступность = НесколькоВидовРЦ;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Аналоги
	#Область Аналоги
	
	Если СтруктураРеквизитов.Свойство("ПоказатьАналоги") ИЛИ Инициализация Тогда
		
		Элементы.Обеспечение_ПоказатьАналоги.Пометка = Форма.ПоказатьАналоги;
		Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала.Видимость = Форма.ПоказатьАналоги;
		
	КонецЕсли;	
	
	#КонецОбласти
	
	// Количество в шапке
	#Область КоличествоВШапке
	
	// Команды изменения партии
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковокФакт")
		ИЛИ Инициализация Тогда
		
		Элементы.Производство_ОтразитьБрак.Видимость = Форма.ЕстьПравоНаИзменение
			И Объект.НомерСледующегоЭтапа <> 0
			И Объект.КоличествоУпаковокФакт > 0;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковокПлан")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоУпаковокФакт")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоУпаковокОтменено")
		ИЛИ СтруктураРеквизитов.Свойство("УпаковкаПлан")
		ИЛИ СтруктураРеквизитов.Свойство("УпаковкаФакт")
		ИЛИ СтруктураРеквизитов.Свойство("УпаковкаОтменено")
		ИЛИ Инициализация Тогда
		
		Элементы.Производство_СократитьУвеличить.Видимость = Форма.ЕстьПравоНаИзменение
			И Объект.НомерСледующегоЭтапа <> 0
			И (Форма.КоличествоФакт > Форма.КоличествоПлан // увеличить
				ИЛИ (Форма.КоличествоОтменено > 0
					И Форма.КоличествоОтменено < Форма.КоличествоПлан) // сократить
			);
		
		Элементы.Производство_Отменить.Видимость = Форма.ЕстьПравоНаИзменение
			И Объект.НомерСледующегоЭтапа <> 0
			И Форма.КоличествоОтменено >= Форма.КоличествоПлан
			И Форма.КоличествоФакт = 0;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковокОтменено")
		ИЛИ СтруктураРеквизитов.Свойство("УпаковкаОтменено")
		ИЛИ Инициализация Тогда
		
		Элементы.Производство_СоздатьНовыйЭтап.Видимость = Форма.ЕстьПравоНаИзменение
			И Объект.КоличествоУпаковокОтменено > 0
			И (Объект.НомерСледующегоЭтапа <> 0
				ИЛИ Объект.ТипПроизводственногоПроцесса 
					= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
		
		Если Объект.КоличествоУпаковокОтменено > 0 Тогда
			Элементы.Производство_СоздатьНовыйЭтап.Заголовок = СтрШаблон(
				НСтр("ru = 'Создать новый этап на %1 %2';
					|en = 'Create a new stage on the %1 %2'"),
				Объект.КоличествоУпаковокОтменено,
				?(Объект.УпаковкаОтменено.Пустая(),
					Элементы.УпаковкаОтменено.ПодсказкаВвода,
					Объект.УпаковкаОтменено));
		КонецЕсли;
		
	КонецЕсли;
	
	// Подсказки о несоответствии количества
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковокФакт")
		ИЛИ СтруктураРеквизитов.Свойство("УпаковкаФакт")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоНоменклатурыПартии")
		ИЛИ Инициализация Тогда
		
		ПоказыватьПодсказку = Форма.ЕстьНоменклатураПартии
			И Форма.ЕстьПравоНаИзменение
			И НЕ Форма.ТолькоПросмотр;
		
		Элементы.НадписьНесоответствиеКоличестваВыполнено.Видимость = ПоказыватьПодсказку;
		
		Если ПоказыватьПодсказку Тогда
			
			Если Объект.КоличествоУпаковокФакт <> Форма.НоменклатураПартииКоличествоУпаковокФакт Тогда
				
				МассивСтрок = Новый Массив();
				Если Объект.ТипПроизводственногоПроцесса 
						= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
					Если Форма.НоменклатураПартииКоличествоУпаковокФакт > 0 Тогда
						МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'В списке отражен расход %1 %2';
															|en = 'The list shows the expenses %1 %2'"),
							Форма.НоменклатураПартииКоличествоУпаковокФакт,
							?(Объект.УпаковкаФакт.Пустая(),
								Элементы.УпаковкаФакт.ПодсказкаВвода, Объект.УпаковкаФакт)));
					Иначе
						МассивСтрок.Добавить(НСтр("ru = 'В списке не отражен расход';
													|en = 'The expense is not shown in the list'"));
					КонецЕсли;
				Иначе
					Если Форма.НоменклатураПартииКоличествоУпаковокФакт > 0 Тогда
						МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'В списке отражен выпуск %1 %2';
															|en = 'The list shows the release %1 %2'"),
							Форма.НоменклатураПартииКоличествоУпаковокФакт,
							?(Объект.УпаковкаФакт.Пустая(),
								Элементы.УпаковкаФакт.ПодсказкаВвода, Объект.УпаковкаФакт)));
					Иначе
						МассивСтрок.Добавить(НСтр("ru = 'В списке не отражен выпуск';
													|en = 'The release is not shown in the list'"));
					КонецЕсли;
				КонецЕсли;
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = 'изменить Выполнено';
						|en = 'change Completed'"),,,, "#ИзменитьКоличествоВыполнено"));
				
				Форма.НадписьНесоответствиеКоличестваВыполнено = Новый ФорматированнаяСтрока(МассивСтрок);
				Элементы.КартинкаЕстьНесоответствиеКоличестваВыполнено.Видимость = Истина;
				
			Иначе
				Форма.НадписьНесоответствиеКоличестваВыполнено = Новый ФорматированнаяСтрока(" ");
				Элементы.КартинкаЕстьНесоответствиеКоличестваВыполнено.Видимость = Ложь;
			КонецЕсли;
			
		Иначе
			Элементы.КартинкаЕстьНесоответствиеКоличестваВыполнено.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковокОтменено")
		ИЛИ СтруктураРеквизитов.Свойство("УпаковкаОтменено")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоНоменклатурыПартии")
		ИЛИ Инициализация Тогда
		
		ПоказыватьПодсказку = Форма.ЕстьНоменклатураПартии
			И Форма.ЕстьПравоНаИзменение
			И НЕ Форма.ТолькоПросмотр;
		
		Элементы.НадписьНесоответствиеКоличестваОтменено.Видимость = ПоказыватьПодсказку;
		
		Если ПоказыватьПодсказку Тогда
			
			Если Объект.КоличествоУпаковокОтменено <> Форма.НоменклатураПартииКоличествоУпаковокОтменено Тогда
				
				МассивСтрок = Новый Массив();
				Если Объект.ТипПроизводственногоПроцесса 
						= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
					Если Форма.НоменклатураПартииКоличествоУпаковокОтменено > 0 Тогда
						МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'В списке отменено обеспечение %1 %2';
															|en = 'Fulfillment is cancelled in the list %1 %2'"),
							Форма.НоменклатураПартииКоличествоУпаковокОтменено,
							?(Объект.УпаковкаОтменено.Пустая(),
									Элементы.УпаковкаОтменено.ПодсказкаВвода, Объект.УпаковкаОтменено)));
					Иначе
						МассивСтрок.Добавить(НСтр("ru = 'В списке не отменено обеспечение';
													|en = 'Fulfillment is not cancelled in the list'"));
					КонецЕсли;
				Иначе
					Если Форма.НоменклатураПартииКоличествоУпаковокОтменено > 0 Тогда
						МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'В списке отменен выпуск %1 %2';
															|en = 'The release is cancelled in the list %1 %2'"),
							Форма.НоменклатураПартииКоличествоУпаковокОтменено,
							?(Объект.УпаковкаОтменено.Пустая(),
									Элементы.УпаковкаОтменено.ПодсказкаВвода, Объект.УпаковкаОтменено)));
					Иначе
						МассивСтрок.Добавить(НСтр("ru = 'В списке не отменен выпуск';
													|en = 'The release is not cancelled in the list'"));
					КонецЕсли;
				КонецЕсли;
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = 'изменить Отменено';
						|en = 'change Cancelled'"),,,, "#ИзменитьКоличествоОтменено"));
				
				Форма.НадписьНесоответствиеКоличестваОтменено = Новый ФорматированнаяСтрока(МассивСтрок);
				Элементы.КартинкаЕстьНесоответствиеКоличестваОтменено.Видимость = Истина;
				
			Иначе
				Форма.НадписьНесоответствиеКоличестваОтменено = Новый ФорматированнаяСтрока(" ");
				Элементы.КартинкаЕстьНесоответствиеКоличестваОтменено.Видимость = Ложь;
			КонецЕсли;
		
		Иначе
			Элементы.КартинкаЕстьНесоответствиеКоличестваОтменено.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Команда Начать этап
	#Область НачатьЭтап
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		Элементы.НачатьЭтап.Видимость =
			Объект.Статус = СтатусСформирован()
			ИЛИ Объект.Статус = СтатусКВыполнению();
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" И ТекущиеДанные.СтатусУказанияСерий > 8 Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
		
		Если ПараметрыФормы <> Неопределено Тогда
			
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
				
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтаФорма, 
							ПараметрыУказанияСерий[ИмяТЧ], 
							Текст, 
							ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ЭкономияМатериалов" Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ПараметрыУказанияСерий.ИмяТЧТовары, ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
		
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ПараметрыУказанияСерий.ИмяТЧТовары,, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
					Объект, 
					ПараметрыУказанияСерий[ИмяТЧ], 
					ТекущиеДанныеИдентификатор, 
					ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СписокТЧ = Неопределено, ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
		УстановитьВидимостьЭлементовСерий();
	КонецЕсли; 
	
	Если СписокТЧ <> Неопределено Тогда
		МассивТЧ = СтрРазделить(СписокТЧ, ",");
		Для каждого ИмяТЧ Из МассивТЧ Цикл
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
		КонецЦикла; 
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ОбеспечениеМатериаламиИРаботамиСерия.Видимость =
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	Элементы.Обеспечение_ЗаполнитьСерииПоFEFO.Видимость =
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	Элементы.УказатьСерииИзрасходованныхМатериалов.Видимость =
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры
		И ОтражениеВыполненного;
	
	Элементы.ЭкономияМатериаловСерия.Видимость = ПараметрыУказанияСерий.ЭкономияМатериалов.ИспользоватьСерииНоменклатуры;
	Элементы.РасходМатериаловИРаботСерия.Видимость = ПараметрыУказанияСерий.РасходМатериаловИРабот.ИспользоватьСерииНоменклатуры;
	
	Элементы.ВыходныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПобочныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами);

КонецФункции

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами) Тогда
		
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		ОбновитьКолонкуДоступноСервер();
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

#Область СерииИзрасходованныхМатериалов

&НаКлиенте
Функция ПараметрыФормыРедактированияСерийРасхода()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",					Объект.Ссылка);
	ПараметрыФормы.Вставить("Подразделение",			Объект.Подразделение);
	ПараметрыФормы.Вставить("Назначение",				Объект.Назначение);
	ПараметрыФормы.Вставить("РасходОднойДатой",			Объект.РасходОднойДатой);
	ПараметрыФормы.Вставить("ДатаРасхода",				Объект.ДатаРасхода);
	ПараметрыФормы.Вставить("СостояниеСерий",			"1");
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",	ПараметрыУказанияСерий.РасходМатериаловИРабот);
	ПараметрыФормы.Вставить("АдресМатериалыДляСерий",	АдресМатериалыДляСерий);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения)
	
	ПараметрыФормы = ПараметрыФормыРедактированияСерийРасхода();
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.РедактированиеСерийВРасходе",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииИзрасходованныхМатериаловНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаСервере
Функция НеобходимоУказатьСерииРасхода()
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(2);
	
	СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 1);
	Таблица = Объект.РасходМатериаловИРабот.НайтиСтроки(СтруктураОтбора);
	
	Если Таблица.Количество() > 0 Тогда
		ПоместитьМатериалыДляУказанияСерийВХранилище();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет и помещает материалы для указания серий в хранилище
//
// Параметры:
//  Режим - см. документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения.Режим
//
&НаСервере
Процедура ЗаполнитьПоместитьМатериалыДляУказанияСерийВХранилище(Режим = 0)
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(Режим);
	ПоместитьМатериалыДляУказанияСерийВХранилище();
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьМатериалыДляУказанияСерийВХранилище()
	
	Таблица = Объект.РасходМатериаловИРабот.Выгрузить();
	Если ЭтоАдресВременногоХранилища(АдресМатериалыДляСерий) Тогда
		АдресМатериалыДляСерий = ПоместитьВоВременноеХранилище(Таблица, АдресМатериалыДляСерий);
	Иначе
		АдресМатериалыДляСерий = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища()
	
	Если ЭтоАдресВременногоХранилища(АдресМатериалыДляСерий) Тогда
		Таблица = ПолучитьИзВременногоХранилища(АдресМатериалыДляСерий);
		Объект.РасходМатериаловИРабот.Загрузить(Таблица);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументОтражениеВыполненногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьОтражениеВыполненногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОтражениеВыполненногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроизводствоИПланирование

#Область ГрафикПроизводства

&НаСервере
Функция ПараметрыФормыРучногоРазмещенияЭтапаВГрафике()
	
	Результат = УправлениеПроизводством.ПараметрыФормыРучногоРазмещенияЭтапаВГрафике(Объект, УникальныйИдентификатор);
	
	Результат.ГрафикПроизводства = ГрафикПроизводства;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГрафикПроизводства(ДанныеЗаполнения = Неопределено)
	
	ГрафикПроизводства = Неопределено;
	
	Если ПланируетсяГрафикПроизводства Тогда
		
		Если ДанныеЗаполнения = Неопределено Тогда
			ГрафикПроизводства = Документы.ЭтапПроизводства2_2.ГрафикПроизводства(Объект.Ссылка);
		Иначе
			ГрафикПроизводства = ДанныеРучноеРазмещениеВГрафике(ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПлановуюДатуПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановуюДатуПоступления()
	
	ПредыдущееЗначение = ПлановаяДатаПоступления;
	
	Если ПланируетсяГрафикПроизводства Тогда
		ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступленияПоГрафику(ГрафикПроизводства);
	Иначе
		ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьПлановыеДатыПоступления(ПлановаяДатаПоступления, ПредыдущееЗначение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеРучноеРазмещениеВГрафике(ДанныеЗаполнения)
	
	СтруктураРазмещения = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	ЗаполнитьЗначенияСвойств(СтруктураРазмещения, ДанныеЗаполнения);
	
	Возврат СтруктураРазмещения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеРучногоРазмещения(ДанныеЗаполнения = Неопределено)
	
	Объект.ЗанятостьВидовРабочихЦентров.Очистить();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ЗаполнитьГрафикПроизводства(ДанныеЗаполнения.ДанныеРучноеРазмещениеВГрафике);
		
		Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.АдресЗанятоЭтапом) Тогда
			
			ЗанятоЭтапом = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресЗанятоЭтапом);
			Объект.ЗанятостьВидовРабочихЦентров.Загрузить(ЗанятоЭтапом);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗанятоЭтапом = РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗанятоЭтапом(Объект.Ссылка);
		Объект.ЗанятостьВидовРабочихЦентров.Загрузить(ЗанятоЭтапом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПлановыеДатыПоступления(НовоеЗначение, ПредыдущееЗначение)
	
	// После ручного изменения графика, необходимо обновить плановые даты произодства
	Если ПредыдущееЗначение = Неопределено
		 ИЛИ ПредыдущееЗначение = НовоеЗначение
		 ИЛИ НЕ ПланируетсяГрафикПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводством.ОбновитьПлановыеДатыПоступления(Объект, НовоеЗначение, ПредыдущееЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеРучногоРазмещения()
	
	ЗаполнитьГрафикПроизводства();
	
	Объект.ЗанятостьВидовРабочихЦентров.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиРазмещенияЭтапаВГрафике(Отказ)
	
	Если Не ПланируетсяГрафикПроизводства ИЛИ Не Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = "СпособПланирования";
	
	УправлениеПроизводствомКлиентСервер.ПроверитьРазмещениеЭтапаВГрафике(
		ГрафикПроизводства, 
		Объект.Ссылка, 
		ПутьКДанным, 
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СпособыПланирования

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПланирования(Форма)
	
	Если НЕ Форма.ПланируетсяГрафикПроизводства Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.РучноеРазмещениеВГрафике Тогда
		
		Возврат СпособПланированияВручную();
		
	ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров 
				И ДоступноПланированиеПоПроизводственнымРесурсам(Форма) Тогда
		
		Возврат СпособПланированияПоДоступности();
		
	Иначе
		
		Возврат СпособПланированияПоОбщейДлительности();
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеСпособаПланирования(ДанныеЗаполнения = Неопределено)
	
	Объект.ПланироватьРаботуВидовРабочихЦентров = (СпособПланирования = СпособПланированияПоДоступности());
	Объект.РучноеРазмещениеВГрафике = (СпособПланирования = СпособПланированияВручную());
	
	Если Объект.РучноеРазмещениеВГрафике Тогда
		Объект.ПланироватьНеРанее = Неопределено;
		НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
			Объект.ПланироватьНеРанее,
			ФорматДатыГрафика);
		ОтметкаПланироватьНеРанее = Ложь;
		ЗаполнитьДанныеРучногоРазмещения(ДанныеЗаполнения);
	Иначе
		ОчиститьДанныеРучногоРазмещения();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПланирования, ГрафикПроизводства");
	
КонецПроцедуры

#КонецОбласти

#Область СпособыПроизводства

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПроизводства(Форма)
	
	Если Форма.Объект.ПроизводствоНаСтороне Тогда
		
		Возврат СпособПроизводстваНаСтороне();
		
	Иначе
		
		Возврат СпособПроизводстваСобственное();
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеСпособаПроизводстваНаСервере()
	
	Объект.ПроизводствоНаСтороне = (СпособПроизводства = СпособПроизводстваНаСтороне());
	
	Если Объект.ПроизводствоНаСтороне Тогда
		ПриВыбореСпособаПроизводствоНаСтороне();
	КонецЕсли;
	
	ПараметрыВстраивания = ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	ЗаполнитьСтатусыУказанияСерийСервер("ВыходныеИзделия,ПобочныеИзделия", Истина);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПроизводства");
	УстановитьВидимостьОбеспечения();
	
	УстановитьВидимостьКомандВводаНаОсновании();

КонецПроцедуры

#КонецОбласти

#Область ПроизводствоНаСтороне

&НаСервере
Процедура ЗаполнитьРеквизитыЗаказаПереработчика()
	
	СозданЗаказПереработчику = Объект.ПроизводствоНаСтороне И Не Объект.ЗаказПереработчику.Пустая();
	
	Если СозданЗаказПереработчику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЗаказПереработчику, "Номер,Дата,Проведен");
		РеквизитыЗаказаПереработчика = Новый ФиксированнаяСтруктура(РеквизитыЗаказа);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РеквизитыЗаказаПереработчика = Новый ФиксированнаяСтруктура;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектИСоздатьЗаказПереработчику(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	КонецЕсли;
	
	Если Записать() Тогда
		СоздатьЗаказПереработчику();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПереработчику()

	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

// Изменяет данные этапа которые не доступны при переработке на стороне
//
&НаСервере
Процедура ПриВыбореСпособаПроизводствоНаСтороне()

	Объект.ПланироватьРаботуВидовРабочихЦентров = Ложь;
	СпособПланирования = ПолучитьСпособПланирования(ЭтаФорма);
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ПобочныеИзделия");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
			ДанныеСтроки.Произведено = Ложь;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ОтметкаВыполнения

&НаСервере
Процедура ОбработатьНачалоВыполненияЭтапа(ИзмененныеРеквизиты = "")
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				НачатоВыполнениеЭтапа, 
				Объект.ФактическоеНачалоЭтапа);

	ДобавитьВСписокИзмененныхРеквизитов(
				ИзмененныеРеквизиты, 
				"НачатоВыполнениеЭтапа");

	Если НЕ НачатоВыполнениеЭтапа
		И ЗначениеЗаполнено(Объект.ФактическоеОкончаниеЭтапа) Тогда
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ЗавершеноВыполнениеЭтапа, 
					Объект.ФактическоеОкончаниеЭтапа);
		
		ДобавитьВСписокИзмененныхРеквизитов(
					ИзмененныеРеквизиты, 
					"ЗавершеноВыполнениеЭтапа");
		
	КонецЕсли;
	
	ОбработатьИзменениеОтметкиВыполнения(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыполненияЭтапа(ИзмененныеРеквизиты = "")
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				ЗавершеноВыполнениеЭтапа, 
				Объект.ФактическоеОкончаниеЭтапа,
				,
				Истина);
	
	ДобавитьВСписокИзмененныхРеквизитов(
				ИзмененныеРеквизиты, 
				"ЗавершеноВыполнениеЭтапа");
	
	Если ЗавершеноВыполнениеЭтапа И НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					НачатоВыполнениеЭтапа, 
					Объект.ФактическоеНачалоЭтапа);
		
		ДобавитьВСписокИзмененныхРеквизитов(
					ИзмененныеРеквизиты, 
					"НачатоВыполнениеЭтапа");
	
	КонецЕсли;
	
	ОбработатьИзменениеОтметкиВыполнения(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДатыВыполненияЭтапа()
	
	ДатаСобытияДоИзменения = ДатаСобытияЗавершение;
	ДатаСобытияЗавершение = НачалоДня(Объект.ФактическоеОкончаниеЭтапа);
	
	Если Объект.ПроизводствоОднойДатой Тогда
		
		Если Объект.ДатаПроизводства = ДатаСобытияДоИзменения Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
				Истина,
				Объект.ДатаПроизводства, ДатаСобытияЗавершение, Истина);
			
			ДатаПроизводстваПриИзмененииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ИменаТаблиц = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
		
		Для каждого ИмяТаблицы Из ИменаТаблиц Цикл
			
			ИзменитьДатуВТЧ(
				ИмяТаблицы,
				"ДатаПроизводства",
				ДатаСобытияЗавершение,
				ДатаСобытияДоИзменения,
				Истина,
				"Произведено");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РасходОднойДатой Тогда
		
		Если Объект.ДатаРасхода = ДатаСобытияДоИзменения Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
				Истина,
				Объект.ДатаРасхода, ДатаСобытияЗавершение, Истина);
			
			ДатаРасходаПриИзмененииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ИзменитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода",  ДатаСобытияЗавершение, ДатаСобытияДоИзменения);
		ИзменитьДатуВТЧ("ЭкономияМатериалов",      "ДатаОперации", ДатаСобытияЗавершение, ДатаСобытияДоИзменения);
		ИзменитьДатуВТЧ("ЭкономияМатериаловСерии", "ДатаОперации", ДатаСобытияЗавершение, ДатаСобытияДоИзменения);
		
	КонецЕсли;
	
	Если Объект.ВыполнениеРаботОднойДатой Тогда
		
		Если Объект.ДатаВыполненияРабот = ДатаСобытияДоИзменения Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
				Истина,
				Объект.ДатаВыполненияРабот, ДатаСобытияЗавершение, Истина);
			
			ДатаВыполненияРаботПриИзмененииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ИзменитьДатуВТЧ("Трудозатраты", "ДатаВыполнения", ДатаСобытияЗавершение, ДатаСобытияДоИзменения, Истина, "Выполнено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтметкиВыполнения(СписокРеквизитов = "")
	
	ДанныеЗаполнения = ДанныеЗаполненияПриИзмененииСтатуса();
	
	ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииОтметкиВыполнения(
		Объект,
		ДанныеЗаполнения);
	
	ДобавитьВСписокИзмененныхРеквизитов(
		СписокРеквизитов,
		ИзмененныеРеквизиты);
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		
		ПослеИзмененияСтатусаНаСервере(СписокРеквизитов);
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатусаНаСервере()
	
	ДанныеЗаполнения = ДанныеЗаполненияПриИзмененииСтатуса();
	
	ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
		Объект, 
		ТекущийСтатус, 
		ДанныеЗаполнения);
	
	ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты = "")
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
	
	УстановитьВидимостьЭлементовСерий();
	
	ПересчитатьКоличествоЕдиницВШапке();
	ЗаполнитьКоличествоНоменклатурыПартии();
	ДобавитьВСписокИзмененныхРеквизитов(ИзмененныеРеквизиты, "КоличествоНоменклатурыПартии");
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИзмененныеРеквизиты);

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область Состояние

&НаСервере
Процедура ЗаполнитьСостояниеВыполненияОпераций()
	
	НачатоВыполнениеОпераций = Ложь;
	
	Если ИспользоватьПооперационноеУправление
		И НЕ Объект.ПроизводствоНаСтороне
		И (НЕ Объект.МаршрутнаяКарта.Пустая()
			ИЛИ ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях")) Тогда
	
		ПроверяемыеСтатусы = УправлениеПроизводствомКлиентСервер.СтатусыДоступноПооперационноеУправление(ЭтаФорма);
		Если ПроверяемыеСтатусы.Найти(Объект.Статус) <> Неопределено Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Операции
			|ГДЕ
			|	Операции.Этап = &Этап
			|	И Операции.Проведен
			|");
			Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатоВыполнениеОпераций = НЕ Запрос.Выполнить().Пустой();
			
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоВидовРабочихЦентров(Форма)
	
	Форма.ВидыРабочихЦентровКоличество = Форма.ВидыРабочихЦентров.ПолучитьЭлементы().Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноПланированиеПоПроизводственнымРесурсам(Форма)
	
	Возврат Форма.ИспользуетсяПланированиеПоПроизводственнымРесурсам
			И НЕ Форма.Объект.ПроизводствоНаСтороне;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРучногоРедактированияГрафика()
	
	Если НЕ ПланируетсяГрафикПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОткрываемойФормы = "Документ.ЭтапПроизводства2_2.Форма.РучноеРазмещениеВГрафике";
	
	ПараметрыФормы = ПараметрыФормыРучногоРазмещенияЭтапаВГрафике();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОткрытьФормуРучногоРедактированияГрафикаЗавершение", 
				ЭтотОбъект);
	
	ОткрытьФорму(
			ИмяОткрываемойФормы, 
			ПараметрыФормы, 
			ЭтаФорма,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРучногоРедактированияГрафикаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено
		И РезультатЗакрытия.РучноеРазмещениеВГрафике Тогда
		
		СпособПланирования = СпособПланированияВручную(); 
		
		ОбработатьИзменениеСпособаПланирования(РезультатЗакрытия);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоИзделийВЭтапахПартии(ПартияПроизводства, Этап)
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоУпаковок", 0);
	Результат.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СУММА(
		|		ВЫБОР
		|			КОГДА ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|				ИЛИ ЭтапПроизводства.КоличествоУпаковокФакт + ЭтапПроизводства.КоличествоУпаковокОтменено >= ЭтапПроизводства.КоличествоУпаковокПлан
		|				ТОГДА ЭтапПроизводства.КоличествоУпаковокФакт
		|			ИНАЧЕ ЭтапПроизводства.КоличествоУпаковокПлан - ЭтапПроизводства.КоличествоУпаковокОтменено
		|		КОНЕЦ) КАК КоличествоУпаковок,
		|	СУММА(
		|		ВЫБОР
		|			КОГДА ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|				ИЛИ ЭтапПроизводства.КоличествоУпаковокФакт * ЕСТЬNULL(&КоэффициентУпаковкиФакт, 1)
		|					+ ЭтапПроизводства.КоличествоУпаковокОтменено * ЕСТЬNULL(&КоэффициентУпаковкиОтменено, 1)
		|					>= ЭтапПроизводства.КоличествоУпаковокПлан * ЕСТЬNULL(&КоэффициентУпаковкиПлан, 1)
		|				ТОГДА ЭтапПроизводства.КоличествоУпаковокФакт * ЕСТЬNULL(&КоэффициентУпаковкиФакт, 1)
		|			ИНАЧЕ ЭтапПроизводства.КоличествоУпаковокПлан * ЕСТЬNULL(&КоэффициентУпаковкиПлан, 1)
		|				- ЭтапПроизводства.КоличествоУпаковокОтменено * ЕСТЬNULL(&КоэффициентУпаковкиОтменено, 1)
		|		КОНЕЦ) КАК Количество,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ЭтапПроизводства.УпаковкаПлан = ЭтапПроизводства.УпаковкаФакт
		|						И ЭтапПроизводства.УпаковкаПлан = ЭтапПроизводства.УпаковкаОтменено) = ИСТИНА
		|			ТОГДА МИНИМУМ(ЭтапПроизводства.УпаковкаПлан)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОНЕЦ КАК Упаковка
		|		
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
		|
		|ГДЕ
		|	ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
		|	И ЭтапПроизводства.Этап = &Этап
		|	И ЭтапПроизводства.Проведен
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЭтапПроизводства.КоличествоУпаковокПлан) > 0";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковкиПлан",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЭтапПроизводства.УпаковкаПлан",
			"ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковкиФакт",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЭтапПроизводства.УпаковкаФакт",
			"ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковкиОтменено",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЭтапПроизводства.УпаковкаОтменено",
			"ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Запрос.УстановитьПараметр("Этап", Этап);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
			Результат.КоличествоУпаковок = Выборка.КоличествоУпаковок;
			Результат.Упаковка = Выборка.Упаковка;
		Иначе
			Результат.КоличествоУпаковок = Выборка.Количество;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов()
	
	Если ОбеспечениеВДокументахКлиент.НужноОбновитьДоступностьПослеЗаписи(ЭтотОбъект,
		"Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов") Тогда
			
		ОбновитьОбеспечениеПослеЗаписиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыДвиженийВХранилище()
	
	Возврат ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДоступныеОстаткиПараметрыВстраивания()
	
	ПараметрыВстраивания = Неопределено;
	Если Объект.ПроизводствоНаСтороне
			И Не Объект.ЗаказПереработчику.Пустая()
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПереработчику, "Проведен") Тогда
			
		ПараметрыВстраивания = Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраиванияПроизводствоНаСтороне();
		
	Иначе
		ПараметрыВстраивания = Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраивания();
	КонецЕсли;
	Возврат ПараметрыВстраивания;
	
КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
		КодДействия,
		АдресАналитик,
		ЭтотОбъект);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимСостоянияОбеспечения();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
	Возврат АдресТаблицыДвижений;
	
КонецФункции

&НаСервере
Функция ОбеспечениеУстановитьДействие(КодДействия)
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		// Ограничение выбора действий для производимых полуфабрикатов.
		Идентификаторы = Новый Массив();
		Для Каждого Идентификатор Из Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки Цикл
			СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор);
			Если КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" И СтрокаТовары.Производится Тогда
				Продолжить;
			КонецЕсли;
			Идентификаторы.Добавить(Идентификатор);
		КонецЦикла;
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Идентификаторы,
			Не ОтражениеВыполненного);
			
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить(
			"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект));
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор),
				СтруктураДействий,
				КэшированныеЗначения);
		КонецЦикла;
		
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
			КодДействия,
			ЭтотОбъект,
			Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки);
			
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспечения(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы, ПараметрыЗаполнения)

	СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим, ПараметрыЗаполнения);
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДокументаДляДействийОбеспечения(Форма)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.ОбеспечениеМатериаламиИРаботами);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатиеОбщий()
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ГиперссылкаСостояниеОбеспеченияНажатие(ЭтотОбъект);
	
	Если ПараметрыФормы.КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы.АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыДокумента()
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуОтгрузкиНаСервере(НоваяДата)
	
	Объект.ДатаОтгрузки = НоваяДата;
	ЗаполнитьДатуВТЧ("ОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", Объект.ДатаОтгрузки);
	
	Если ОтражениеВыполненного Тогда
		Объект.ДатаРасхода = Объект.ДатаОтгрузки;
		ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДатаОтгрузки");
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения)
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
		
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыборДоступно(ТекущиеДанные)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Неопределено);
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПослеУдаленияСервер()
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПриИзмененииНоменклатурыСервер()
	
	СтрокаТабличнойЧасти = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
	
	ОбновитьКолонкуДоступноСервер();
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПриИзмененииХарактеристикиСервер()
	
	СтрокаТабличнойЧасти = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
	
	ОбновитьКолонкуДоступноСервер();
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспечения(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеУстановитьДействиеСВопросом(КодДействия)
	
	Результат = ОбеспечениеУстановитьДействие(КодДействия);
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		Объект.ОбеспечениеМатериаламиИРаботами,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатой(
			ЭтотОбъект,
			Объект.ОбеспечениеМатериаламиИРаботами,
			Результат,
			"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбеспечениеПослеЗаписиНаСервере()
	
	ОбеспечениеВДокументахСервер.ОбновитьДоступностьПослеЗаписи(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВыбораОбеспечения(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииПослеВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерииПослеВопроса(Ответ, Параметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	
	Оповещение = ОбработатьВыборСкладаИСерииНаСервере(
		Параметры.ВыбранноеЗначение,
		Параметры.ПараметрыФормы,
		ПараметрыЗаполнения);
	
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(Параметры.ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииМодифицированностиФормы()
	
	Если ФормаМодифицирована <> Модифицированность Тогда
		
		ФормаМодифицирована = Модифицированность;
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВопроса(
		ЭтотОбъект,
		Объект.ОбеспечениеМатериаламиИРаботами,
		Результат,
		Ответ,
		"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСнятьФлагОтгружатьОднойДатой(Ответ, Результат) Экспорт
	
	ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	ИзмененныеРеквизиты = Документы.ЭтапПроизводства2_2.ПослеЗаполненияОбеспечения(
		Объект,
		Изменения,
		Режим,
		ПараметрыЗаполнения,
		ДанныеЗаполненияПриИзмененииСтатуса());
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "НеОтгружатьЧастями");
		
	СтруктураДействий = Новый Структура();
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"СкладОбязателен,ДатаОтгрузкиОбязательна",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		Объект.ОбеспечениеМатериаламиИРаботами,
		ДатаОтгрузкиОбязательна,
		СкладОбязателен);
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты);
	КонецЕсли;
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Если ОтражениеВыполненного Тогда
		
		Элементы.СтраницаОбеспечениеМатериаламиИРаботами.Заголовок			= НСтр("ru = 'Материалы и работы';
																					|en = 'Materials and works'");
		Элементы.ОбеспечениеМатериаламиИРаботамиОбеспечениеОтгрузить.Видимость                     = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиОбеспечениеРезервировать.Видимость                 = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиОбеспечениеКОбеспечению.Видимость                  = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиОбеспечениеНеОбеспечивать.Видимость                = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиДоступно.Видимость                                 = Ложь;
		Элементы.Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость                 = Ложь;
		Элементы.Обеспечение_СоздатьКорректировкуНазначенияРезервирование.Видимость                = Ложь;
		Элементы.Обеспечение_ПоказатьЗапланированныеКОбеспечению.Видимость                         = Ложь;
		Элементы.Обеспечение_ПоказатьАналоги.Видимость                                             = Ложь;
		Элементы.Обеспечение_ПодобратьАналоги.Видимость                                            = Ложь;
		Элементы.Обеспечение_ЗаменитьАналогами.Видимость                                           = Ложь;
		Элементы.Обеспечение_ЗаменитьАналогами.Видимость                                           = Ложь;
		Элементы.СтраницыГиперссылкаСостояниеОбеспечения.Видимость                                 = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечениеОтгрузить.Видимость      = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечениеРезервировать.Видимость  = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечениеКОбеспечению.Видимость   = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечениеНеОбеспечивать.Видимость = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиВариантОбеспечения.Видимость                       = Ложь;
		
	Иначе
		
		ЕстьПраво = ОбеспечениеВДокументахСервер.ЕстьПравоПросмотраГиперссылкиСостоянияОбеспечения();
		Элементы.СтраницыГиперссылкаСостояниеОбеспечения.Видимость = ЕстьПраво;
		
		Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
			Элементы.Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
			Элементы.Обеспечение_СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
		КонецЕсли;
		
	Если Объект.ПроизводствоНаСтороне
			И Не Объект.ЗаказПереработчику.Пустая()
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПереработчику, "Проведен") Тогда
		
		Элементы.СтраницыГиперссылкаСостояниеОбеспечения.ТекущаяСтраница
			= Элементы.СтраницаГиперссылкаСостояниеОбеспеченияЗаказаПереработчику;
		
	Иначе
		
		ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДатаОтгрузки.Подсказка = ОбеспечениеВДокументахСервер.ПодсказкаДатаОтгрузки();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		Режим);
		
	Если ОтражениеВыполненного Тогда
		ПараметрыФормы.Вставить("Склады", СкладыДляОтраженияВыполненного());
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция СкладыДляОтраженияВыполненного()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ЦеховаяКладовая
		|		И Склады.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Склады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Склады;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектОснования()
	
	ОбъектОснования = Объект.Ссылка;
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОбъектОснования", ОбъектОснования);
	СтруктураОтвета.Вставить("Проведен", ОбъектОснования.Проведен);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Процедура ПоказатьНормативыПриИзмененииНаСервере(СписокТЧ = Неопределено)
	
	Если (СписокТЧ = Неопределено ИЛИ Найти(СписокТЧ, "ОбеспечениеМатериаламиИРаботами") > 0) Тогда
		ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
	Если (СписокТЧ = Неопределено ИЛИ Найти(СписокТЧ, "Трудозатраты") > 0) Тогда
		ЗаполнитьНормативы("Трудозатраты");
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьНормативы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативы(ИмяТЧ, СтрокиЗаполнения = Неопределено)
	
	ТребуетсяЗаполнить = Ложь;
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		МассивСтрок = СтрокиЗаполнения;
	Иначе
		МассивСтрок = Объект[ИмяТЧ];
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		И ПоказатьНормативыМатериалы Тогда
	
		МассивДанных = Новый Массив;
		Для каждого ТекущиеДанные Из МассивСтрок Цикл
			ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТребуетсяЗаполнить = Истина;
		
	ИначеЕсли ИмяТЧ = "Трудозатраты"
		И ПоказатьНормативыТрудозатраты Тогда
		
		МассивДанных = Новый Массив;
		Для каждого ТекущиеДанные Из МассивСтрок Цикл
			ДанныеСтроки = Новый Структура("ВидРабот");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТребуетсяЗаполнить = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяЗаполнить Тогда
		
		НормативыИзХранилища = ПолучитьНормативыИзВременногоХранилища();
		
		Нормативы = ПолучитьНормативыПриИзмененииСтрок(ИмяТЧ, МассивДанных, НормативыИзХранилища);
		Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
			МассивСтрок[Сч].Норматив = Нормативы[Сч];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНормативыИзВременногоХранилища()

	Если ЭтоАдресВременногоХранилища(АдресХранилищаНормативы) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресХранилищаНормативы);
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации(Истина, Ложь, "МатериалыИУслуги,ВходящиеИзделия,Трудозатраты");
	
	Если ДанныеСпецификации <> Неопределено Тогда
		
		Таблица = ДанныеСпецификации.МатериалыИУслуги.Скопировать(, "Номенклатура,Характеристика,Упаковка,ДанныеУпаковки,КоличествоУпаковок"); // ТаблицаЗначений - 
		Таблица.Свернуть("Номенклатура,Характеристика,Упаковка,ДанныеУпаковки", "КоличествоУпаковок");
		Результат.Вставить("ОбеспечениеМатериаламиИРаботами", Таблица);
		
		Таблица = ДанныеСпецификации.Трудозатраты.Скопировать(, "ВидРабот,Количество"); // ТаблицаЗначений - 
		Таблица.Свернуть("ВидРабот", "Количество");
		Результат.Вставить("Трудозатраты", Таблица);
		
	КонецЕсли;
	
	АдресХранилищаНормативы = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНормативыПриИзмененииСтрок(Знач ИмяТЧ, Знач МассивДанных, Знач АдресИлиНормативы)
	
	Если ЭтоАдресВременногоХранилища(АдресИлиНормативы) Тогда
		НормативыИзХранилища = ПолучитьИзВременногоХранилища(АдресИлиНормативы);
	Иначе
		НормативыИзХранилища = АдресИлиНормативы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НормативыИзХранилища) И НормативыИзХранилища.Свойство(ИмяТЧ) Тогда
		Нормативы = НормативыИзХранилища[ИмяТЧ];
	Иначе
		Нормативы = Неопределено;
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		
		Результат = УправлениеПроизводством.ПолучитьНормативы(
			Нормативы,
			МассивДанных,
			СтруктураПоиска,
			Истина);
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		СтруктураПоиска = Новый Структура("ВидРабот");
		
		Результат = УправлениеПроизводством.ПолучитьНормативы(
			Нормативы,
			МассивДанных,
			СтруктураПоиска,
			Ложь);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНормативыПоСпецификации(ПолучатьМатериалыПоТребованию, ОкруглятьКоличествоШтучныхТоваров, Знач ПереченьДанных = Неопределено)
	
	ДанныеПартииПроизводстваКопия = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПартииПроизводства, Ложь);
	ДанныеПартииПроизводстваКопия.Количество = КоличествоПлан;
	
	Возврат Документы.ЭтапПроизводства2_2.ПолучитьНормативыПоСпецификации(
		ДанныеПартииПроизводстваКопия,
		ПолучатьМатериалыПоТребованию,
		ОкруглятьКоличествоШтучныхТоваров,
		ПереченьДанных,
		Новый Структура("Этап", Объект.Этап));
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"ОбеспечениеМатериаламиИРаботами", 
		НСтр("ru = 'Обеспечение';
			|en = 'Supply'"));
		
	ПараметрыПроверки.Поля.Удалить("Склад");
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект,
				Объект.ОбеспечениеМатериаламиИРаботами,
				Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
				ПараметрыПроверки,
				Неопределено,
				Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтражениеВыполненного И Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено подраделение этапа.';
								|en = 'Stage business unit is required.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыФормы = ПараметрыВыбораОбеспечения(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами;
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из
// буфера, при заполнении по спецификации. Процедура выполняет действия которые зависят от данных в строках.
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = Неопределено;
	КоллекцияСтрок = Объект[ИмяТЧ];
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла; 
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	// До момента отображения Подразделения в форме документа статус указания
	// серий перезаполняется принудительно. Впоследствии заполнение
	// Подразделения будет сделано через Структуру действий.
	ПодразделениеИзменено = Ложь; 
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если Объект.НеОтгружатьЧастями И Объект.ДатаОтгрузки <> '000101010000' Тогда
				ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЕсли;
			
			Если ТекущиеДанные.Подразделение.Пустая() Тогда
				ТекущиеДанные.Подразделение = Объект.Подразделение;
				ПодразделениеИзменено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				ИспользоватьНесколькоСкладов, 
				СкладПоУмолчанию, 
				КоллекцияСтрок);
				
		ОбновитьКолонкуДоступноСервер();
		
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
				ТекущиеДанные.ДатаРасхода = Объект.ДатаРасхода;
			КонецЕсли;
			
			Если ТекущиеДанные.Подразделение.Пустая() Тогда
				ТекущиеДанные.Подразделение = Объект.Подразделение;
				ПодразделениеИзменено = Истина;
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если НЕ ТекущиеДанные.СписатьНаРасходы Тогда
				СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
						ИспользоватьНесколькоСкладов, 
						СкладПоУмолчанию, 
						ТекущиеДанные,
						"Получатель");
			КонецЕсли;
			
			Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
				ТекущиеДанные.ДатаОперации = Объект.ДатаРасхода;
			КонецЕсли;
			
			Если ТекущиеДанные.Подразделение.Пустая() Тогда
				ТекущиеДанные.Подразделение = Объект.Подразделение;
				ПодразделениеИзменено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Для Каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если Объект.ПроизводствоОднойДатой И Объект.ДатаПроизводства <> '000101010000' Тогда
				ТекущиеДанные.ДатаПроизводства = Объект.ДатаПроизводства;
			КонецЕсли;
			
			Если ОтражениеВыполненного Тогда
				ТекущиеДанные.Произведено = Истина;
			КонецЕсли;
			
			Если ТекущиеДанные.Подразделение.Пустая() Тогда
				ТекущиеДанные.Подразделение = Объект.Подразделение;
				ПодразделениеИзменено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		Для Каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если ОтражениеВыполненного Тогда
				ТекущиеДанные.Выполнено = Истина;
			КонецЕсли;
			
			Если Объект.ВыполнениеРаботОднойДатой И Объект.ДатаВыполненияРабот <> '000101010000' Тогда
				ТекущиеДанные.ДатаВыполнения = Объект.ДатаВыполненияРабот;
			КонецЕсли;
			
			Если ТекущиеДанные.Подразделение.Пустая() Тогда
				ТекущиеДанные.Подразделение = Объект.Подразделение;
				ПодразделениеИзменено = Истина;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТЧ, МассивСтрок);
		
	Иначе
		
		Если (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
				ИЛИ ИмяТЧ = "Трудозатраты") Тогда
			ЗаполнитьНормативы(ИмяТЧ, МассивСтрок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
			ИЛИ ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ИмяТЧ = "РасходМатериаловИРабот"
			ИЛИ ИмяТЧ = "ЭкономияМатериалов")
		И (НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
			ИЛИ ПодразделениеИзменено) Тогда
		ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ);
	КонецЕсли;
	 
	Если (ИмяТЧ = "ВыходныеИзделия"
			Или ИмяТЧ = "ПобочныеИзделия"
			Или ИмяТЧ = "ЭкономияМатериалов"
			Или ИмяТЧ = "ОбеспечениеМатериаламиИРаботами")
		И Не СтруктураРанееВыполненныхДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
			
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();	
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшируемыеЗначения);
		КонецЦикла;
			
	КонецЕсли;	
	
	ИзмененныеРеквизиты = ИмяТЧ;
		
	Если (ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ИмяТЧ = "РасходМатериаловИРабот") Тогда
		
		ЗаполнитьКоличествоНоменклатурыПартии();
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",КоличествоНоменклатурыПартии";
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.ОбеспечениеМатериаламиИРаботами, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивВыделенныхСтрок);
		
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗапланированныеВариантыКОбеспечению()
	
	ВариантыОбеспечения = Новый СписокЗначений;
	ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка"));
	
	Возврат ВариантыОбеспечения;
	
КонецФункции	

#КонецОбласти

#Область УточнениеНоменклатуры

&НаСервере
Процедура ПроверитьНаличиеУточненийНоменклатуры(ИмяТЧ, Реквизит)
	
	Реквизит = Ложь;
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ИспользуетсяАвтовыбор", Истина));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если (Строка.Номенклатура.Пустая() ИЛИ Строка.Характеристика.Пустая() И Строка.ХарактеристикиИспользуются) Тогда
			
			Реквизит = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаРасхода = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет расход материалов и работ по данным обеспечения
//
// Параметры:
//  Режим - см. Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения.Режим
//
&НаСервере
Процедура ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(Режим = 0)

	Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект, Режим);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаСервере
Процедура РасходОднойДатойПриИзмененииНаСервере()

	Если Объект.РасходОднойДатой Тогда
		Объект.ДатаРасхода = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.РасходМатериаловИРабот, "ДатаРасхода"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ЭкономияМатериалов, "ДатаОперации"));
		ДатаРасходаПриИзмененииНаСервере();
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ДатаРасходаПриИзмененииНаСервере()
	
	ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
	ЗаполнитьДатуВТЧ("ЭкономияМатериалов",      "ДатаОперации", Объект.ДатаРасхода);
	ЗаполнитьДатуВТЧ("ЭкономияМатериаловСерии", "ДатаОперации", Объект.ДатаРасхода);
	
КонецПроцедуры

#КонецОбласти

#Область Экономия

&НаКлиенте
Процедура ЭкономияМатериаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеизрасходованнымиМатериалами()

	Если Объект.ЭкономияМатериалов.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть?';
							|en = 'Refill the table?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьНеизрасходованнымиМатериаламиЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНеизрасходованнымиМатериаламиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНеизрасходованнымиМатериаламиНаСервере()
	
	Документы.ЭтапПроизводства2_2.ЗаполнитьНеизрасходованныеМатериалы(Объект);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДатуЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт

	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаОперации = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловДействиеПриИзменении(СтрокаТабличнойЧасти)
	
	УправлениеПроизводствомКлиент.ЭкономияМатериаловЭтапаДействиеПриИзменении(
		СтрокаТабличнойЧасти,
		ЭтаФорма,
		Объект,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаСервере
Процедура ПроизводствоОднойДатойПриИзмененииНаСервере()

	Если Объект.ПроизводствоОднойДатой Тогда
		Объект.ДатаПроизводства = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ВыходныеИзделия, "ДатаПроизводства"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ПобочныеИзделия, "ДатаПроизводства"));
	КонецЕсли;
	ДатаПроизводстваПриИзмененииНаСервере();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПроизводствоОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПроизводстваПриИзмененииНаСервере()

	ЗаполнитьДатуВТЧ("ВыходныеИзделия",      "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ВыходныеИзделияСерии", "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ПобочныеИзделия",      "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ПобочныеИзделияСерии", "ДатаПроизводства", Объект.ДатаПроизводства);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействиеЗаполнитьДатуПроизводства(Форма, СтруктураДействий)
	
	Объект = Форма.Объект;
	
	Если Объект.Статус = СтатусНачат() ИЛИ Объект.Статус = СтатусЗавершен() Тогда
		Если Объект.ПроизводствоОднойДатой Тогда
			ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства(
				Объект.ДатаПроизводства,
				Объект.ДатаПроизводства);
			СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
		Иначе
			ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства(
				Форма.ДатаСобытияЗавершение,
				Форма.ПлановаяДатаПоступления);
			СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
		КонецЕсли;
	Иначе
		ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства();
		СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПроизводстваВСтроке(ТекущаяСтрока)
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ИмяТЧ, ВидЦен, Идентификаторы)
	
	СтрокиКОбработке = Новый Массив;
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(Идентификатор);
		Если ДанныеСтроки.Произведено Тогда
			СтрокиКОбработке.Добавить(ДанныеСтроки);
		КонецЕсли;
		ДанныеСтроки.Цена  = 0;
		ДанныеСтроки.Сумма = 0;
	КонецЦикла;
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенВыпуска(
		Объект.ВидЦены,
		Объект.Валюта,
		Объект.ФактическоеНачалоЭтапа);
	
	ЦеныЗаполнены = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		Объект[ИмяТЧ], // Табличная часть
		СтрокиКОбработке, // Массив строк или структура отбора
		ПараметрыЗаполнения, // Параметры заполнения
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму",
			"КоличествоУпаковок"));
	
	Возврат ЦеныЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПоСпецификацииПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	Если Не ТекущиеДанные.ОбработатьПоСпецификации Тогда
		ТекущиеДанные.Спецификация = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект,
		ТекущиеДанные,
		ПараметрыВыбораСпецификаций.ВыходныеИзделия,
		ЭтаФорма,
		Новый Структура("КлючПутейКДанным", "Объект."+ИмяТЧ));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделияОтмененоПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	Если ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.Произведено = Ложь;
	Иначе
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	СтараяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	НоваяСтрока = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).Вставить(ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).Индекс(СтараяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока,, "КодСтроки");
	
	ЗаполнитьЗначенияСвойств(СтараяСтрока, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы[ИмяТЧ], ЭтотОбъект));
	СтараяСтрока.Отменено = Истина;
	ИзделияОтмененоПриИзменении(ИмяТЧ, СтараяСтрока);
	
	ПослеИзменениеКачествоИОтменыСтроки(
		ИмяТЧ, НоваяСтрока.ПолучитьИдентификатор(), СтараяСтрока.ПолучитьИдентификатор());
	
	Элементы[ИмяТЧ].ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Организация)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Подразделение", Подразделение);
	ПараметрыВыбора.Вставить("Организация", Организация);
	
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Трудозатраты.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.Исполнитель = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные.Исполнитель = Результат;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнениеРаботОднойДатойПриИзмененииНаСервере()

	Если Объект.ВыполнениеРаботОднойДатой Тогда
		Объект.ДатаВыполненияРабот = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									Объект.Трудозатраты, "ДатаВыполнения");
	КонецЕсли;
	ЗаполнитьДатуВТЧ("Трудозатраты", "ДатаВыполнения", Объект.ДатаВыполненияРабот);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыполнениеРаботОднойДатой");

КонецПроцедуры

&НаСервере
Процедура ДатаВыполненияРаботПриИзмененииНаСервере()
	
	ЗаполнитьДатуВТЧ("Трудозатраты", "ДатаВыполнения", Объект.ДатаВыполненияРабот);
	
КонецПроцедуры

&НаСервере
Функция ЕстьТрудозатратыСПустымИсполнителем(ПодразделениеСтроки)
	
	Результат = Ложь;
	
	Для каждого Строка Из Объект.Трудозатраты Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Исполнитель)
				И НЕ Строка.Отменено Тогда
			
			Результат = Истина;
			
			Если ПодразделениеСтроки = Неопределено Тогда
				ПодразделениеСтроки = Строка.Подразделение;
			ИначеЕсли ПодразделениеСтроки <> Строка.Подразделение Тогда
				ПодразделениеСтроки = Неопределено;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоСтрокДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоСтрокДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	Перем СоставСтрок, ПараметрыОтбора;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,Подразделение";
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции,Подразделение";
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,Подразделение";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции,Исполнитель,Подразделение";
	КонецЕсли;
	
	ПодборТоваров = СтрНайти("ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами,РасходМатериаловИРабот,ЭкономияМатериалов", ИмяТЧ) > 0;
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если ИмяТЧ <> "ЭкономияМатериалов" И НЕ Объект.ПроизводствоНаСтороне Тогда
			МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;
		
		ПараметрыОтбора = Новый Соответствие;
		ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
		
	КонецЕсли;
	
	СтрокиИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, СоставСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокиИзБуфера) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		ТекущаяСтрока = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИзБуфера);
		
		Если ПодборТоваров Тогда 
			
			ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
					ТекущаяСтрока,
					ИмяТЧ,
					ЭтаФорма,
					СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
	
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьРеквизитов)
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ПобочныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюПобочныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;

	Форма.Элементы.Обеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.РасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.РасходМатериаловИРаботКонтекстноеМенюРасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ЭкономияМатериаловКонтекстноеМенюЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ОтметитьНаличиеАналогов()

	ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
	АналогиМатериалов.ОтметитьНаличиеАналогов(Объект[ИмяТаблицы], ПараметрыВыбораАналогов(ИмяТаблицы, 0));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборАналогов()
	
	ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
	
	Если Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку(и)';
										|en = 'Highlight the line(s)'"));
		Возврат;
	КонецЕсли;
	
	АналогиМатериаловКлиент.ОткрытьПодборАналогов(ПараметрыВыбораАналогов(ИмяТаблицы, 1), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьНаАналоги(АдресВХранилище = Неопределено)
	
	ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
	ДополнительныеПоля = "СтатьяКалькуляции, ДатаОтгрузки";
	
	Результат = ?(АдресВХранилище = Неопределено, 
		АналогиМатериалов.ВыполнитьЗаменуНаАналогиАвтоматически(Объект[ИмяТаблицы], ПараметрыВыбораАналогов(ИмяТаблицы, 2), ДополнительныеПоля, Истина),
		АналогиМатериалов.ВыполнитьЗаменуНаАналоги(Объект[ИмяТаблицы], АдресВХранилище, ДополнительныеПоля, Истина));
	
	ИндексыИзмененныхСтрок = Результат.ИндексыИзмененныхСтрок;
	ИндексыНовыхСтрок = Результат.ИндексыНовыхСтрок;
	
	Если ИндексыИзмененныхСтрок.Количество() = 0 
	   И ИндексыНовыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыНовыхСтрок = Новый Массив;
	
	Модифицированность = Истина;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТаблицы, ЭтаФорма, СтруктураДействий);
	Для каждого ИндексСтроки Из ИндексыИзмененныхСтрок Цикл
		
		СтрокаТЧ = Объект[ИмяТаблицы][ИндексСтроки];
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
		ИдентификаторыСтрок.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		
	КонецЦикла;	
	
	СтруктураДействий.Очистить();
	Для каждого ИндексСтроки Из ИндексыНовыхСтрок Цикл
		
		СтрокаТЧ = Объект[ИмяТаблицы][ИндексСтроки];
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(СтрокаТЧ, ИмяТаблицы, ЭтаФорма, СтруктураДействий);
		
		ЗаполнитьЗначенияСвойств(
			СтруктураДействий.ПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства, СтрокаТЧ, "ВариантОбеспечения");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		
		ИдентификаторыСтрок.Добавить(ИдентификаторСтроки);
		ИдентификаторыНовыхСтрок.Добавить(ИдентификаторСтроки);
		                                                  		
	КонецЦикла;
	
	НеОтгружатьЧастямиПриИзмененииНаСервере();
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТаблицы, ИдентификаторыСтрок, СтруктураДействий);
	
КонецПроцедуры


// Формирует параметры выбора аналогов
//
// Параметры:
//	ИмяТаблицы - Строка - Имя обрабатываемой таблицы
//	Режим      - Число  - 0 - показать аналоги
//                        1 - подобрать аналоги
//                        2 - заменить аналогами
// 
// Возвращаемое значение:
//  Структура - см. АналогиМатериалов.ПараметрыВыбораАналогов
//
&НаСервере
Функция ПараметрыВыбораАналогов(ИмяТаблицы, Режим)
	
	ТипИсточника = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	ПараметрыФормы = АналогиМатериалов.ПараметрыВыбораАналогов(ТипИсточника);
	
	// ПараметрыОбщие
	ПараметрыФормы.ПараметрыОбщие.ПоказатьОстатки = Истина;	
	
	// ПараметрыТоваров
	СтруктураПолей = АналогиМатериалов.СтруктураПолейТаблицыДляЗаменыНаАналоги();
	СтруктураПолей.ДополнительныеПоля.Вставить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	СтруктураПолей.ЗначенияПоУмолчанию.Вставить("Ссылка", Объект.Ссылка);
	
	ДанныеТоваров = АналогиМатериалов.ПолучитьДанныеТоваров(
		ЭтаФорма, "Объект", ИмяТаблицы, Режим, Истина, СтруктураПолей);
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.ПараметрыТоваров, ДанныеТоваров);
	
	// ПараметрыАналогов
	ТаблицаПараметров = ПараметрыФормы.ПараметрыАналогов.ТаблицаПараметров;
	
	СтрокаТаблицы = ТаблицаПараметров.Добавить();
	СтрокаТаблицы.ДатаДействияРазрешений = НачалоДняТекущаяДатаСеанса();
	СтрокаТаблицы.Ссылка = Объект.Ссылка;
	СтрокаТаблицы.Подразделение = Объект.Подразделение;
	СтрокаТаблицы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	СтрокаТаблицы.ЗаказНаПроизводство = ДанныеПартииПроизводства.Распоряжение;
	СтрокаТаблицы.Спецификация = ДанныеПартииПроизводства.Спецификация;
	СтрокаТаблицы.Этап = Объект.Этап;
	СтрокаТаблицы.Изделие = ДанныеПартииПроизводства.Номенклатура;
	СтрокаТаблицы.ХарактеристикаИзделия = ДанныеПартииПроизводства.Характеристика;
	
	ПараметрыФормы.ПараметрыАналогов.ТаблицаПараметров = 
		ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификатор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкоду(ИмяТЧ)

	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ИмяТЧ);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ИмяТЧ) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТЧ)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ЗаполнитьСтруктурыДействийДляОбработкиШтрихкодов(
			ИмяТЧ,
			ЭтаФорма,
			СтруктураДействийСДобавленнымиСтроками,
			СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий[ИмяТЧ];
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ИмяТЧ                                  = ИмяТЧ;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_" + ИмяТЧ, 0.1, Истина);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы[ИмяТЧ]["ТекущаяСтрока"] = СтруктураДействий.ТекущаяСтрока;
		
		МассивСтрок = ОбщегоНазначенияУТКлиентСервер.Массив(СтруктураДействий.ТекущаяСтрока, Ложь);
		ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействийСДобавленнымиСтроками);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	Если СтруктураПараметровДействия.ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(ИмяТЧ)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект, ИмяТЧ),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ИмяТЧ) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, ИмяТЧ);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_РасходМатериаловИРабот()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("РасходМатериаловИРабот",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_ЭкономияМатериалов()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("ЭкономияМатериалов",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(ИмяТЧ)
		
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма, ИмяТЧ);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока,ИмяТЧ", ТекущаяСтрока, ИмяТЧ)),
		УникальныйИдентификатор);
	
КонецПроцедуры

// Является описанием оповещения о закрытии, используется в процедуре ПолучитьВес
//
// Параметры:
//  РезультатВыполнения - Произвольный -
//  ДополнительныеПараметры - Структура - содержит:
//                             * ТекущаяСтрока - ДанныеФормыЭлементКоллекции - содержит:
//                                                ** КоличествоУпаковок - Число - 
//
&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ДополнительныеПараметры.ИмяТЧ, ЭтаФорма, СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДополнительныеПараметры.ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ДополнительныеПараметры.ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ЭкономияМатериалов" Тогда
			ТекущаяСтрокаИдентификатор = ДополнительныеПараметры.ТекущаяСтрока.ПолучитьИдентификатор();
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
					ДополнительныеПараметры.ИмяТЧ, 
					ТекущаяСтрокаИдентификатор, 
					КэшированныеЗначения);
		КонецЕсли; 
		
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияПоОбщейДлительности()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияПоДоступности()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияВручную()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПроизводстваСобственное()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПроизводстваНаСтороне()
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОчиститьСообщения();
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the product cost element.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураТиповЗатрат = Новый Структура;
	
	СтруктураТиповЗатрат.Вставить("ПобочныеИзделия",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы")
	);
	СтруктураТиповЗатрат.Вставить("ОбеспечениеМатериаламиИРаботами",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные")
	);
	СтруктураТиповЗатрат.Вставить("РасходМатериаловИРабот",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные")
	);
	СтруктураТиповЗатрат.Вставить("Трудозатраты",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда")
	);
										   
	ПараметрыОтбора = Новый Структура;
	
	Если СтруктураТиповЗатрат.Свойство(ИмяТЧ) Тогда
		ПараметрыОтбора.Вставить("ТипЗатрат", СтруктураТиповЗатрат[ИмяТЧ]);	
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.СтатьяКалькуляции = РезультатЗакрытия;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(ИмяТЧ)
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Табличная часть не заполнена.';
													|en = 'Table is not filled in.'"));
		Возврат;
	ИначеЕсли Элементы[ИмяТЧ].ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В табличной части отсутствуют выделенные строки.';
													|en = 'No rows are selected in the table.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы[ИмяТЧ].ВыделенныеСтроки);
	
	ОткрытьФорму("Справочник.ПричиныОтменыПроизводства.ФормаВыбора",
		,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиВыборПричиныЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиВыборПричиныЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиНаСервере(
		ПричинаОтмены,
		ДополнительныеПараметры.ВыделенныеСтроки,
		ДополнительныеПараметры.ИмяТЧ);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выделенные строки отменены';
										|en = 'Selected lines are canceled'"),,, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиНаСервере(ПричинаОтмены, ВыделенныеСтроки, ИмяТЧ)
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураДействий = Новый Структура;
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			
			Строка = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
			Строка.Произведено = Ложь;
			
			ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);
			
			ПараметрыПроверкиСерий = Новый Структура;
			ПараметрыПроверкиСерий.Вставить("Склад", Строка.Получатель);
			ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшируемыеЗначения);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			Строка = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ИдентификаторСтроки);
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
		КонецЦикла;
		
		ЗаполнитьСтатусыУказанияСерийСервер("ОбеспечениеМатериаламиИРаботами");
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
			Строка = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
			
			Если Строка.Выполнено Тогда
				Строка.Выполнено = Ложь;
				ТрудозатратыВыполненоПриИзмененииНаСервере(ИдентификаторСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьКоличествоФактВТЧНаСервере(Исполнитель)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОтразитьКоличествоФактВТЧ(Исполнитель);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьКоличествоНоменклатурыПартии();
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьКоличествоОтмененоВТЧНаСервере(ПричинаОтмены)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОтразитьКоличествоОтмененоВТЧ(ПричинаОтмены);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьКоличествоНоменклатурыПартии();
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ПереченьДанных)
	
	ПереченьДанныхРС = 
		?(ПереченьДанных.Свойство("ОбеспечениеМатериаламиИРаботами"), ",МатериалыИУслуги,ВходящиеИзделия", "")
		+ ?(ПереченьДанных.Свойство("ВыходныеИзделия"), ",ВыходныеИзделия", "")
		+ ?(ПереченьДанных.Свойство("ПобочныеИзделия"), ",ВозвратныеОтходы", "")
		+ ?(ПереченьДанных.Свойство("Трудозатраты"), ",Трудозатраты", "")
		+ ?(ПереченьДанных.Свойство("ВидыРабочихЦентров"), ",ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров,Этапы", "");
	ПереченьДанныхРС = Прав(ПереченьДанныхРС, СтрДлина(ПереченьДанныхРС)-1);
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации(Ложь, Истина, ПереченьДанныхРС);
	Если ДанныеСпецификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереченьДанных.Свойство("ОбеспечениеМатериаламиИРаботами") Тогда
		
		Объект.ОбеспечениеМатериаламиИРаботами.Очистить();
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(
			Объект.ОбеспечениеМатериаламиИРаботами,
			ДанныеСпецификации.МатериалыИУслуги,
			Новый Структура("КлючСвязиСпецификация, Подразделение", "КлючСвязи", "ПодразделениеЭтапа"));
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
			"ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ОбеспечениеМатериаламиИРаботами, СтруктураДействий, Неопределено);
		
		ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами",, СтруктураДействий);
		ПроверитьНаличиеУточненийНоменклатуры("ОбеспечениеМатериаламиИРаботами", ЕстьУточненияМатериалов);
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕстьУточненияМатериалов");
		
	КонецЕсли;
	
	Если ПереченьДанных.Свойство("ВыходныеИзделия") Тогда
		
		Объект.ВыходныеИзделия.Очистить();
		Объект.ВыходныеИзделияСерии.Очистить();
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(
			Объект.ВыходныеИзделия,
			ДанныеСпецификации.ВыходныеИзделия,
			Новый Структура("Получатель, Подразделение", "Склад", "ПодразделениеЭтапа"));
		
		ПослеИзмененияСтрокТЧПрограммноНаСервере("ВыходныеИзделия");
		
	КонецЕсли;
	
	Если ПереченьДанных.Свойство("ПобочныеИзделия") Тогда
		
		Объект.ПобочныеИзделия.Очистить();
		Объект.ПобочныеИзделияСерии.Очистить();
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(
			Объект.ПобочныеИзделия,
			ДанныеСпецификации.ВозвратныеОтходы,
			Новый Структура("Получатель, Подразделение", "Склад", "ПодразделениеЭтапа"));
		
		ПослеИзмененияСтрокТЧПрограммноНаСервере("ПобочныеИзделия");
		
	КонецЕсли;
	
	Если ПереченьДанных.Свойство("Трудозатраты") Тогда
		
		Объект.Трудозатраты.Очистить();
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(
			Объект.Трудозатраты,
			ДанныеСпецификации.Трудозатраты,
			Новый Структура("Подразделение", "ПодразделениеЭтапа"));
			
		ПослеИзмененияСтрокТЧПрограммноНаСервере("Трудозатраты");
		
	КонецЕсли;
	
	Если ПереченьДанных.Свойство("ВидыРабочихЦентров") Тогда
		
		Объект.ВидыРабочихЦентров.Очистить();
		Объект.АльтернативныеВидыРабочихЦентров.Очистить();
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(
			Объект.ВидыРабочихЦентров,
			ДанныеСпецификации.ВидыРабочихЦентров,,
			Новый Структура("Использовать", Истина));
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(
			Объект.АльтернативныеВидыРабочихЦентров,
			ДанныеСпецификации.АльтернативныеВидыРабочихЦентров);
		
		ЗаполнитьВидыРабочихЦентров();
		
		Если ДанныеСпецификации.Этапы.Количество() <> 0 Тогда
			Объект.ПорядокРаботыВидовРабочихЦентров = ДанныеСпецификации.Этапы[0].ПорядокРаботыВидовРабочихЦентров;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
	УстановитьВидимостьЭлементовСерий();
	
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(Документы.ЭтапПроизводства2_2.ПараметрыРедактированияЭтапа());
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(Объект));
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЭтапПроизводства2_2);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ОбеспечениеМатериаламиИРаботамиСпецификация, ПараметрыВыбораСпецификаций.ОбеспечениеМатериаламиИРаботами);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ВыходныеИзделияСпецификация, ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ПобочныеИзделияСпецификация, ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	
	АдресХранилищаНормативы = "";
	ДанныеПартииПроизводства = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(Объект.Распоряжение, Объект.НазначениеПродукция, Объект.ПартияПроизводства);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	
	ИспользоватьСписаниеНаРасходы = (ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
										ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
									) И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
									
	ИспользуетсяДавальческаяСхема =	ДавальческаяСхема.ИспользуетсяДавальческаяСхема(Объект.ХозяйственнаяОперация);

	
	ИспользоватьМаршрутныеКарты = ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты");
	
	ВалютаДокумента = Объект.Валюта;
	
	ЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
	ПравоДобавленияЗаказаПереработчику = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПереработчику);
	ПравоПросмотраЗаказаПереработчику  = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПереработчику);
	ПравоЧтенияАналогов = ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов")
						  И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АналогиМатериалов);
	ПравоРедактированияГрафикаПроизводства = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ГрафикЭтаповПроизводства2_2);
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	СписокРаспоряжений = Новый Массив;
	СписокРаспоряжений.Добавить(Объект.Распоряжение);
	УправлениеПроизводством.ОбновитьПризнакТребуетсяЗаполнитьПолеЭтапПотребитель(ЭтаФорма, СписокРаспоряжений);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		ШаблонНазначенияДавальческогоВыпуска = Документы.ЭтапПроизводства2_2.ШаблонНазначенияПоУмолчаниюДляПобочныхИзделий(Объект);
		НазначениеДавальческогоВыпуска = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначенияДавальческогоВыпуска);
	КонецЕсли;
	
	АктуализироватьЗаказПодДеятельность(Ложь);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЭтапПроизводства2_2.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Документы.ЭтапПроизводства2_2.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	ПересчитатьКоличествоЕдиницВШапке();
	ЗаполнитьРеквизитыПоПодразделению();
	ЗаполнитьРеквизитыПоРаспоряжению();
	ЗаполнитьКоличествоНоменклатурыПартии();
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	УстановитьИспользованиеПлановойСтоимости();
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ВыходныеИзделия);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ПобочныеИзделия);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ОбеспечениеМатериаламиИРаботами);
	
	ЗаполнитьГрафикПроизводства();
	ЗаполнитьСостояниеВыполненияОпераций();
	ЗаполнитьРеквизитыЗаказаПереработчика();
	
	ПроверитьНаличиеУточненийНоменклатуры("ОбеспечениеМатериаламиИРаботами", ЕстьУточненияМатериалов);
	ПроверитьНаличиеУточненийНоменклатуры("ПобочныеИзделия", ЕстьУточненияПобочныхИзделий);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоПодразделению(Инициализация = Истина)
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	
	ЗаполнитьЗначенияСвойств(
		ЭтаФорма,
		ПараметрыПодразделения,
		"ИспользоватьПооперационноеУправление,
		|ИспользоватьПооперационноеПланирование,
		|ИспользоватьБригадныеНаряды,
		|ИспользоватьСменныеЗадания");
	
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если НЕ Инициализация Тогда
		
		РедакторПроизводственногоПроцесса.СохранитьВидыРабочихЦентров(
					ВидыРабочихЦентров, 
					Объект.ПланироватьРаботуВидовРабочихЦентров,
					Объект.ВидыРабочихЦентров,
					Объект.АльтернативныеВидыРабочихЦентров);
		
		УправлениеДаннымиОбИзделиях.ПроверитьСоответствиеРеквизитовПодразделению(Объект, "ВидыРабочихЦентров");
		
	КонецЕсли; 
	
	ЗаполнитьВидыРабочихЦентров();
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
			
	РедакторПроизводственногоПроцесса.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоРаспоряжению()
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, "НачатьНеРанее,Подразделение");
	
	НачатьНеРанее          = РеквизитыРаспоряжения.НачатьНеРанее;
	ПодразделениеДиспетчер = РеквизитыРаспоряжения.Подразделение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	ТекущийСтатус = Объект.Статус;
	
	СпособПроизводства = ПолучитьСпособПроизводства(ЭтаФорма);
	СпособПланирования = ПолучитьСпособПланирования(ЭтаФорма);
	
	ОтметкаПланироватьНеРанее = ЗначениеЗаполнено(Объект.ПланироватьНеРанее);
	НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
		Объект.ПланироватьНеРанее,
		ФорматДатыГрафика);
	
	НачатоВыполнениеЭтапа = (ТекущийСтатус = СтатусНачат())
		ИЛИ (ТекущийСтатус = СтатусЗавершен());
	ЗавершеноВыполнениеЭтапа = (ТекущийСтатус = СтатусЗавершен());
	
	Если ЗавершеноВыполнениеЭтапа Тогда
		ДатаСобытияЗавершение = НачалоДня(Объект.ФактическоеОкончаниеЭтапа);
	Иначе
		ДатаСобытияЗавершение = Неопределено;
	КонецЕсли;
	
	ЕстьПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2);
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеПлановойСтоимости()
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
		"УчетнаяПолитикаФинансовогоУчета",
		Объект.Организация,
		Объект.Дата);
	
	Если НЕ ПараметрыУчетнойПолитики = Неопределено Тогда
		ИспользоватьПлановуюСтоимость = ПараметрыУчетнойПолитики.УчетГотовойПродукцииПоПлановойСтоимости;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(СписокТЧ = "", СтрокиЗаполнения = Неопределено)
	
	СтруктураТЧ = Новый Структура(СписокТЧ);
	ВсеТЧ = (СтруктураТЧ.Количество() = 0);
	
	Если СтруктураТЧ.Свойство("ВыходныеИзделия") ИЛИ ВсеТЧ Тогда
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(Объект.ВыходныеИзделия, СтрокиЗаполнения);
		УправлениеПроизводством.ЗаполнитьНаправлениеВыпускаВТЧ(?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ВыходныеИзделия));
		ДавальческаяСхема.ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцуВТаблице(ЭтотОбъект, Объект.ВыходныеИзделия, СтрокиЗаполнения);
		НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтаФорма, "Объект.ВыходныеИзделия");
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ПобочныеИзделия") ИЛИ ВсеТЧ Тогда
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(Объект.ПобочныеИзделия, СтрокиЗаполнения);
		УправлениеПроизводством.ЗаполнитьНаправлениеВыпускаВТЧ(?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ПобочныеИзделия));
		ДавальческаяСхема.ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцуВТаблице(ЭтотОбъект, Объект.ПобочныеИзделия, СтрокиЗаполнения);
		НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтаФорма, "Объект.ПобочныеИзделия");
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("РасходМатериаловИРабот") ИЛИ ВсеТЧ Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.РасходМатериаловИРабот,
			СтруктураДействий,
			СтрокиЗаполнения);
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ЭкономияМатериалов") ИЛИ ВсеТЧ Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ЭкономияМатериалов,
			СтруктураДействий,
			СтрокиЗаполнения);
			
		КоллекцияСтрок = ?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ЭкономияМатериалов);
		Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
			ДанныеСтроки.Действия = ?(ДанныеСтроки.СписатьНаРасходы, 
										Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, 
										Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства);
		КонецЦикла;
		
		ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.ЭкономияМатериалов, "Получатель", СтрокиЗаполнения);
		НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтаФорма, "Объект.ЭкономияМатериалов");
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ОбеспечениеМатериаламиИРаботами") ИЛИ ВсеТЧ Тогда
		
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(
			ЭтотОбъект,
			Объект.ОбеспечениеМатериаламиИРаботами,
			СтрокиЗаполнения);
		
		ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами", СтрокиЗаполнения);
		
		ЗаполнитьСлужебныеРеквизитыФормыДокумента();
		
		Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
			ОтметитьНаличиеАналогов();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("Трудозатраты") ИЛИ ВсеТЧ Тогда
		
		ЗаполнитьНормативы("Трудозатраты", СтрокиЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентров()
	
	РедакторПроизводственногоПроцесса.ЗаполнитьДеревоВидовРабочихЦентров(
		Объект.ВидыРабочихЦентров,
		Объект.АльтернативныеВидыРабочихЦентров,
		ВидыРабочихЦентров,
		Ложь);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(Идентификатор)
	
	ДанныеСтроки = ВидыРабочихЦентров.НайтиПоИдентификатору(Идентификатор);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				Неопределено, 
				Неопределено, 
				Истина, 
				ДанныеСтроки);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьКомментарийКонвертации(Форма)
	
	ВидимостьЭлемента = НЕ ПустаяСтрока(Форма.Объект.КомментарийПриКонвертации);
	
	Если ВидимостьЭлемента Тогда
		
		Форма.ТекстКомментарийКонвертации = Новый ФорматированнаяСтрока(
			Лев(Форма.Объект.КомментарийПриКонвертации, 60),
			" (",
			Новый ФорматированнаяСтрока(НСтр("ru = 'далее...';
											|en = 'next...'"),,,, "#Далее"),
			")");
			
	КонецЕсли;
	
	Форма.Элементы.ГруппаКомментарийКонвертации.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Функция ФорматированнаяСтрокаНадписьСпецификация()
	
	МассивСтрок = Новый Массив();
	
	Если НЕ Объект.Спецификация.Пустая() Тогда
		
		СтрокаСпецификация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Спецификация, "Наименование");
		
		Если СтрДлина(СтрокаСпецификация) > 71 Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Лев(СтрокаСпецификация, 68) + "...",,,,"#ОткрытьСпецификацию"));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаСпецификация,,,,"#ОткрытьСпецификацию"));
		КонецЕсли;
		
	Иначе
		МассивСтрок.Добавить("<" + НСтр("ru = 'нет спецификации';
										|en = 'no BOM'") + ">");
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства) Тогда
		МассивСтрок.Добавить("  ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'показать этапы';
																|en = 'show stages'"),,,, "#ПоказатьЭтапы"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаСервере
Функция ФорматированнаяСтрокаНадписьИзделие()
	
	МассивСтрок = Новый Массив();
	
	Если ЗначениеЗаполнено(ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура) Тогда
		
		СтрокаИзделие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура,
			"Наименование");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаИзделие,,,,"#ОткрытьИзделие"));
		
		Если ЗначениеЗаполнено(ДанныеПартииПроизводства.ОсновноеИзделиеХарактеристика) Тогда
			
			МассивСтрок.Добавить(" / ");
			СтрокаХарактеристика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеПартииПроизводства.ОсновноеИзделиеХарактеристика,
				"Наименование");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаХарактеристика,,,,"#ОткрытьХарактеристикуИзделия"));
			
		КонецЕсли;
		
	Иначе
		МассивСтрок.Добавить("<" + НСтр("ru = 'нет изделия';
										|en = 'no item'") + ">");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеЭтапа(ДанныеЭтапа)
	
	Возврат Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(ДанныеЭтапа);
	
КонецФункции

&НаСервере
Процедура АктуализироватьЗаказПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЭтапПроизводства2_2.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ВыпускПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ВыпускПодДеятельность,
		Объект.ВыпускПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Если Не ОтражениеВыполненного Тогда
			СтрокаТабличнойЧасти.Произведено = Ложь;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДавальческогоВыпуска);
		
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
		Если СтрокаТабличнойЧасти.Производится Тогда
			ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
				Объект, СтрокаТабличнойЧасти, ПараметрыВыбораСпецификаций[ИмяТЧ],ЭтаФорма);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
		КонецЕсли;
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"ДоступноВДругихСтроках",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Подразделение;
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", СкладДляСерий);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ВариантОбеспечения = Неопределено;
	Если ОтражениеВыполненного Тогда
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			СтрокаТабличнойЧасти, 
			ИмяТЧ,
			ЭтаФорма,
			Объект,
			СтруктураДействий,
			ВариантОбеспечения);
			
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
			СтрокаТабличнойЧасти.Подразделение, СтруктураДействий, "Получатель");
		ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
			ЭтотОбъект, СтруктураДействий);
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(СтруктураДействий, ЭтотОбъект, "Объект." + ИмяТЧ);
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если (ИмяТЧ = "ВыходныеИзделия" И ИспользоватьПлановуюСтоимость)
		Или ИмяТЧ = "ПобочныеИзделия" Тогда
			
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);

	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
			Объект.ОбеспечениеМатериаламиИРаботами,
			ДатаОтгрузкиОбязательна,
			СкладОбязателен);
		
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий)
				Или ПравоЧтенияАналогов И ПоказатьАналоги Тогда
					
					ОбеспечениеМатериаламиИРаботамиПриИзмененииНоменклатурыСервер();
					
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		УправлениеПроизводствомКлиент.ЭкономияМатериаловЗаполнитьПризнакОбособленно(СтрокаТабличнойЧасти, Объект.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииХарактеристики(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Если Не ОтражениеВыполненного Тогда
			СтрокаТабличнойЧасти.Произведено = Ложь;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДавальческогоВыпуска);
		
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"ДоступноВДругихСтроках",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если (ИмяТЧ = "ВыходныеИзделия" И ИспользоватьПлановуюСтоимость)
		Или ИмяТЧ = "ПобочныеИзделия" Тогда
			
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ДобавитьДействиеЗаполнитьДатуПроизводства(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
			СтрокаТабличнойЧасти.Подразделение, СтруктураДействий);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	КонецЕсли;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ИмяТЧ));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий)
				Или ПравоЧтенияАналогов И ПоказатьАналоги Тогда
					
					ОбеспечениеМатериаламиИРаботамиПриИзмененииХарактеристикиСервер();
					
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		УправлениеПроизводствомКлиент.ЭкономияМатериаловЗаполнитьПризнакОбособленно(СтрокаТабличнойЧасти, Объект.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ИмяТЧ)

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучателя(СтрокаТабличнойЧасти, ИмяТЧ)
	
	УправлениеПроизводствомКлиент.ПолучательПриИзменении(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		Объект,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтрокаТабличнойЧасти.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаНаправленияВыпускаПриИзменении(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		Объект,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СписокВыбораЭлемента = УправлениеПроизводствомКлиент.ЗаполнитьСписокВыбораНаправлениеВыпуска(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма);
	
	Если СписокВыбораЭлемента.НайтиПоЗначению(СтрокаТабличнойЧасти.НаправлениеВыпуска) = Неопределено Тогда
		СтрокаТабличнойЧасти.НаправлениеВыпуска = СписокВыбораЭлемента[0].Значение;
		ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(ИмяТЧ)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(ТипыНоменклатуры(ИмяТЧ));
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			Элементы[ИмяТЧ], 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока, 
				ИмяТЧ, 
				ЭтаФорма,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;

	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	СтараяВалюта                = ВалютаДокумента;
	НоваяВалюта                 = Объект.Валюта;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.ФактическоеНачалоЭтапа),
		Объект.ФактическоеНачалоЭтапа, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	// Пересчитаем цену
	Для Каждого ТекСтрока Из Объект.ПобочныеИзделия Цикл
		ТекСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(ТекСтрока.Цена,
			СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	КонецЦикла;

	Для Каждого ТекСтрока Из Объект.ВыходныеИзделия Цикл
		ТекСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(ТекСтрока.Цена,
			СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	КонецЦикла;
	
	// Пересчитаем сумму
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПобочныеИзделия, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ВыходныеИзделия, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧ(ИмяТЧ)
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите количество в новой строке';
													|en = 'Enter quantity in a new line'");
		ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	КонецЕсли;
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(Объект[ИмяТЧ], Элементы[ИмяТЧ], Оповещение, ПараметрыРазбиенияСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЗавершение(НоваяСтрока, ИмяТЧ) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" 
		ИЛИ ИмяТЧ = "ПобочныеИзделия" 
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" 
		ИЛИ ИмяТЧ = "Трудозатраты" 
		ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		НоваяСтрока.КодСтроки = 0;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" 
		ИЛИ ИмяТЧ = "ПобочныеИзделия" 
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		ИЛИ ИмяТЧ = "ЭкономияМатериалов"
		ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Если ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"ОбновитьКэшНоменклатура",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ТекущиеДанные, ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Если Не Объект.Подразделение.Пустая() Тогда
		
		СоставТЧ = Новый Массив;
		СоставТЧ.Добавить("ВыходныеИзделия");
		СоставТЧ.Добавить("ВыходныеИзделияСерии");
		СоставТЧ.Добавить("ПобочныеИзделия");
		СоставТЧ.Добавить("ПобочныеИзделияСерии");
		СоставТЧ.Добавить("ОбеспечениеМатериаламиИРаботами");
		СоставТЧ.Добавить("РасходМатериаловИРабот");
		СоставТЧ.Добавить("ЭкономияМатериалов");
		СоставТЧ.Добавить("ЭкономияМатериаловСерии");
		СоставТЧ.Добавить("Трудозатраты");
		
		Для Каждого ИмяТЧ Из СоставТЧ Цикл
			Для каждого Строка Из Объект[ИмяТЧ] Цикл
				Строка.Подразделение = Объект.Подразделение;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер(, Истина);
	ЗаполнитьРеквизитыПоПодразделению(Ложь);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Подразделение");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, Форма, СтруктураДействий)
	
	Объект = Форма.Объект;
	
	Если НЕ СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
		И (ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов") Тогда
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий[ИмяТЧ];
		ПараметрыПроверкиСерий.Склад = ?(ТекущаяСтрока <> Неопределено, ТекущаяСтрока.Получатель, Неопределено);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(СтруктураДействий, Форма, "Объект." + ИмяТЧ);
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Или ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
			Форма, СтруктураДействий);
			
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если (ИмяТЧ = "ВыходныеИзделия" И Форма.ИспользоватьПлановуюСтоимость)
		Или ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(Форма));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Если ТекущаяСтрока.Производится Тогда
			ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
				Объект, ТекущаяСтрока, Форма.ПараметрыВыбораСпецификаций[ИмяТЧ],Форма);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ВариантОбеспечения = Неопределено;
	Если Форма.ОтражениеВыполненного
		И ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			ИмяТЧ, 
			Форма,
			Объект,
			СтруктураДействий,
			ВариантОбеспечения);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтруктурыДействийДляОбработкиШтрихкодов(ИмяТЧ, Форма, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками)
	
	// Действия для новых строки
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			Неопределено,
			ИмяТЧ,
			Форма,
			СтруктураДействийСДобавленнымиСтроками);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействийСДобавленнымиСтроками);
	
	// Действия для измененных строк
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействийСИзмененнымиСтроками);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВыпускающийЭтап(Форма)
	
	Возврат УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(Форма.Объект);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусСформирован()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусКВыполнению()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНачат()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗавершен()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");

КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата);

	Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
		
		ДанныеСтроки[ПолеДата] = НоваяДата;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата, Знач СтараяДата = Неопределено, Знач ТолькоОтмеченные = Ложь, Знач ПолеОтметка = Неопределено)

	Если НоваяДата = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
		
		Если ТолькоОтмеченные И НЕ ДанныеСтроки[ПолеОтметка]
			ИЛИ СтараяДата <> Неопределено И СтараяДата <> ДанныеСтроки[ПолеДата] Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки[ПолеДата] = НоваяДата;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПриИзмененииСтатуса()
	
	Возврат УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(
		Объект, ПлановаяДатаПоступления);
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерии(ИмяТЧ, Элемент)

	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ], Истина);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда

		ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения); // серверный вызов

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ]);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения)

	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, Неопределено, КэшированныеЗначения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСворачиваемойГруппы(ЭлементГруппа, КартинкаГруппы, ГруппаСвернута)

	ЭлементГруппа.Видимость = НЕ ГруппаСвернута;
	
	Если ГруппаСвернута Тогда
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВСписокИзмененныхРеквизитов(ИзмененныеРеквизиты, Реквизиты)
	
	ИзмененныеРеквизиты = ИзмененныеРеквизиты + ?(ПустаяСтрока(Реквизиты),"", ",") + Реквизиты;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандВводаНаОсновании()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	
	ЕстьТоварыКОбособленномуОбеспечению = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	ЕстьТоварыКСтороннемуОбособленномуОбеспечению = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКСтороннемуОбособленномуОбеспечению(Объект.Ссылка);
	
	Если ЕстьТоварыКОбособленномуОбеспечению Тогда
		Ответ = "ЕстьТоварыКОбособленномуОбеспечению";
	ИначеЕсли ЕстьТоварыКСтороннемуОбособленномуОбеспечению Тогда
		Ответ = "ЕстьТоварыКСтороннемуОбособленномуОбеспечению";
	Иначе
		Ответ = "НетТоваровКОбособленномуОбеспечению";
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОперациямНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоОперациям();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПересчитатьКоличествоЕдиницВШапке();
	ЗаполнитьКоличествоНоменклатурыПартии();
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ОбновитьКолонкуДоступноСервер();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки =
		ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ОбновитьКолонкуДоступноСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачалоДняТекущаяДатаСеанса()
	
	#Если Сервер Тогда
	Возврат НачалоДня(ТекущаяДатаСеанса());
	#Иначе
	Возврат НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные)
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровПересчитатьВремяРаботы(
		ТекущиеДанные,
		ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Истина,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеЭтапаПриИзмененииНаСервере()
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НаименованиеЭтапа");
	
	УстановитьУсловноеОформлениеЭкономияМатериаловНазначение();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьМатериалыДляПодбораПоСпецификацииВХранилище()
	
	Таблица = Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить(,
		"Номенклатура,Характеристика,КоличествоУпаковок,Упаковка,Подразделение");
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПодбораМатериаловПоСпецификации(АдресВХранилище)
	
	МассивСтрок = Новый Массив;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
		ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого Строка Из ПолучитьИзВременногоХранилища(АдресВХранилище) Цикл
		
		НоваяСтрока = Объект.ОбеспечениеМатериаламиИРаботами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивСтрок, СтруктураДействий);
	
	ПроверитьНаличиеУточненийНоменклатуры("ОбеспечениеМатериаламиИРаботами", ЕстьУточненияМатериалов);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕстьУточненияМатериалов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматированнаяСтрокаПланироватьНеРанее(ПланироватьНеРанее, ФорматДатыГрафика)
	
	МассивСтрок = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПланироватьНеРанее) Тогда
		
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = '<указать>';
											|en = '<specify>'"),,,,"#РедактироватьЗначение"));
		
	Иначе
		
		Если ТипЗнч(ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
			Представление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(ПланироватьНеРанее);
			
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(Представление,,,,"#ОткрытьЭтапПланироватьНеРанее"));
		
		Иначе
		
			МассивСтрок.Добавить(Формат(ПланироватьНеРанее, ФорматДатыГрафика));
			
		КонецЕсли;
		
		МассивСтрок.Добавить("  ");
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'изменить';
											|en = 'change'"),,,,"#РедактироватьЗначение"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияЦенВыпуска(Форма)
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенВыпуска(
		Форма.Объект.ВидЦены,
		Форма.Объект.Валюта,
		Форма.Объект.ФактическоеНачалоЭтапа);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТЧ = "ПобочныеИзделия"
		ИЛИ (ИмяТЧ = "ВыходныеИзделия" И Форма.ИспользоватьПлановуюСтоимость) Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	ПараметрыРаспределенияЗатратСтруктура = Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)

	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы[ИмяТЧ]["ТекущаяСтрока"]);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапПотребительНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеПроизводствомКлиент.ОткрытьФормуВыбораЭтапаПотребителя(
		Объект,
		ТекущиеДанные,
		ЭтаФорма,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Строка.ЭтапПотребитель = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПоНоменклатуреКонструктор()
	
	Возврат Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	
КонецФункции

&НаКлиенте
Функция ТипыНоменклатуры(ИмяТЧ)
	
	Если ИмяТЧ = "ВыходныеИзделия" Или ИмяТЧ = "ПобочныеИзделия" Тогда
		
		МассивТиповНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь);
		
	Иначе	
		
		МассивТиповНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь);
		
		Если НЕ Объект.ПроизводствоНаСтороне Тогда
			МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат МассивТиповНоменклатуры;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьКоличествоНоменклатурыПартии()
	
	ЕстьНоменклатураПартии = Ложь;
	
	УпаковкаФактТЧ = Неопределено;
	КоличествоФактТЧ = 0;
	КоличествоУпаковокФактТЧ = 0;
	
	УпаковкаОтмененоТЧ = Неопределено;
	КоличествоОтмененоТЧ = 0;
	КоличествоУпаковокОтмененоТЧ = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
	СтруктураПоиска.Вставить("Характеристика", ДанныеПартииПроизводства.ОсновноеИзделиеХарактеристика);
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		 
		НайденныеСтроки = Объект.РасходМатериаловИРабот.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
			ЕстьНоменклатураПартии = Истина;
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоФактТЧ = 0 Тогда
					УпаковкаФактТЧ = Строка.Упаковка;
				ИначеЕсли УпаковкаФактТЧ <> Неопределено
					И УпаковкаФактТЧ <> Строка.Упаковка Тогда
					УпаковкаФактТЧ = Неопределено;
				КонецЕсли;
				
				КоличествоФактТЧ = КоличествоФактТЧ + Строка.Количество;
				КоличествоУпаковокФактТЧ = КоличествоУпаковокФактТЧ + Строка.КоличествоУпаковок;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НайденныеСтроки = Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
			ЕстьНоменклатураПартии = Истина;
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если Строка.Отменено Тогда
					
					Если КоличествоОтмененоТЧ = 0 Тогда
						УпаковкаОтмененоТЧ = Строка.Упаковка;
					ИначеЕсли УпаковкаОтмененоТЧ <> Неопределено
						И УпаковкаОтмененоТЧ <> Строка.Упаковка Тогда
						УпаковкаОтмененоТЧ = Неопределено;
					КонецЕсли;
					
					КоличествоОтмененоТЧ = КоличествоОтмененоТЧ + Строка.Количество;
					КоличествоУпаковокОтмененоТЧ = КоличествоУпаковокОтмененоТЧ + Строка.КоличествоУпаковок;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Сч = 1 По 2 Цикл
			
			НайденныеСтроки = Объект[?(Сч = 1, "ВыходныеИзделия", "ПобочныеИзделия")].НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
				ЕстьНоменклатураПартии = Истина;
				Для каждого Строка Из НайденныеСтроки Цикл

					Если Строка.Произведено Тогда
						
						Если КоличествоФактТЧ = 0 Тогда
							УпаковкаФактТЧ = Строка.Упаковка;
						ИначеЕсли УпаковкаФактТЧ <> Неопределено
							И УпаковкаФактТЧ <> Строка.Упаковка Тогда
							УпаковкаФактТЧ = Неопределено;
						КонецЕсли;
						
						КоличествоФактТЧ = КоличествоФактТЧ + Строка.Количество;
						КоличествоУпаковокФактТЧ = КоличествоУпаковокФактТЧ + Строка.КоличествоУпаковок;
						
					ИначеЕсли Строка.Отменено Тогда
						
						Если КоличествоОтмененоТЧ = 0 Тогда
							УпаковкаОтмененоТЧ = Строка.Упаковка;
						ИначеЕсли УпаковкаОтмененоТЧ <> Неопределено
							И УпаковкаОтмененоТЧ <> Строка.Упаковка Тогда
							УпаковкаОтмененоТЧ = Неопределено;
						КонецЕсли;
						
						КоличествоОтмененоТЧ = КоличествоОтмененоТЧ + Строка.Количество;
						КоличествоУпаковокОтмененоТЧ = КоличествоУпаковокОтмененоТЧ + Строка.КоличествоУпаковок;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНоменклатураПартии Тогда
		
		Если КоличествоФактТЧ = 0 Тогда
			НоменклатураПартииКоличествоУпаковокФакт = 0;
		Иначе
			
			Если УпаковкаФактТЧ = Неопределено Тогда
			
				// Пересчет через базовые единицы
				Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Объект.УпаковкаФакт,
					ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
				НоменклатураПартииКоличествоУпаковокФакт = Окр(КоличествоФактТЧ / Коэффициент, 3);
			
			ИначеЕсли УпаковкаФактТЧ <> Объект.УпаковкаФакт Тогда
			
				// Пересчет через упаковки
				КоэффициентТЧ = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					УпаковкаФактТЧ,
					ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
				КоэффициентШапки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Объект.УпаковкаФакт,
					ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
				НоменклатураПартииКоличествоУпаковокФакт =
					Окр(КоличествоУпаковокФактТЧ * КоэффициентТЧ / КоэффициентШапки, 3);
			
			Иначе
				НоменклатураПартииКоличествоУпаковокФакт = КоличествоУпаковокФактТЧ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоОтмененоТЧ = 0 Тогда
			НоменклатураПартииКоличествоУпаковокОтменено = 0;
		Иначе
			
			Если УпаковкаОтмененоТЧ = Неопределено Тогда
			
				// Пересчет через базовые единицы
				Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Объект.УпаковкаОтменено,
					ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
				НоменклатураПартииКоличествоУпаковокОтменено = Окр(КоличествоОтмененоТЧ / Коэффициент, 3);
			
			ИначеЕсли УпаковкаОтмененоТЧ <> Объект.УпаковкаОтменено Тогда
			
				// Пересчет через упаковки
				КоэффициентТЧ = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					УпаковкаОтмененоТЧ,
					ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
				КоэффициентШапки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Объект.УпаковкаОтменено,
					ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура);
				НоменклатураПартииКоличествоУпаковокОтменено =
					Окр(КоличествоУпаковокОтмененоТЧ * КоэффициентТЧ / КоэффициентШапки, 3);
			
			Иначе
				НоменклатураПартииКоличествоУпаковокОтменено = КоличествоУпаковокОтмененоТЧ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НоменклатураПартииКоличествоУпаковокФакт = 0;
		НоменклатураПартииКоличествоУпаковокОтменено = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоЕдиницВШапке(Суффикс = "")
	
	Если Суффикс = "План" Тогда
		ИмяРеквизитаКоличество         = "КоличествоПлан";
		ИмяРеквизитаКоличествоУпаковок = "КоличествоУпаковокПлан";
		ИмяРеквизитаУпаковка           = "УпаковкаПлан";
	ИначеЕсли Суффикс = "Факт" Тогда
		ИмяРеквизитаКоличество         = "КоличествоФакт";
		ИмяРеквизитаКоличествоУпаковок = "КоличествоУпаковокФакт";
		ИмяРеквизитаУпаковка           = "УпаковкаФакт";
	ИначеЕсли Суффикс = "Отменено" Тогда
		ИмяРеквизитаКоличество         = "КоличествоОтменено";
		ИмяРеквизитаКоличествоУпаковок = "КоличествоУпаковокОтменено";
		ИмяРеквизитаУпаковка           = "УпаковкаОтменено";
	Иначе
		ИмяРеквизитаКоличество         = "Количество";
		ИмяРеквизитаКоличествоУпаковок = "КоличествоУпаковок";
		ИмяРеквизитаУпаковка           = "Упаковка";
	КонецЕсли;
	
	Номенклатура = ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура;
	
	Если ПустаяСтрока(Суффикс) Тогда
		
		КоэффициентПлан = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки
			(Объект.УпаковкаПлан, Номенклатура);
		КоэффициентФакт = ?(Объект.УпаковкаФакт = Объект.УпаковкаПлан, КоэффициентПлан,
			Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				Объект.УпаковкаФакт, Номенклатура));
		КоэффициентОтменено = ?(Объект.УпаковкаОтменено = Объект.УпаковкаПлан, КоэффициентПлан,
			Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				Объект.УпаковкаОтменено, Номенклатура));
		
		КоличествоПлан = Объект.КоличествоУпаковокПлан * КоэффициентПлан;
		КоличествоФакт = Объект.КоличествоУпаковокФакт * КоэффициентФакт;
		КоличествоОтменено = Объект.КоличествоУпаковокОтменено * КоэффициентОтменено;
		
	Иначе
		
		ЭтаФорма[ИмяРеквизитаКоличество] = Объект[ИмяРеквизитаКоличествоУпаковок]
			* Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Объект[ИмяРеквизитаУпаковка], Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокПланПриИзмененииНаСервере()
	
	ПересчитатьКоличествоЕдиницВШапке("План");
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "КоличествоУпаковокПлан");
	
	АдресХранилищаНормативы = "";
	ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами");
	ЗаполнитьНормативы("Трудозатраты");
	
КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокФактПриИзмененииНаСервере()
	
	ПересчитатьКоличествоЕдиницВШапке("Факт");
	ПриИзмененииКоличестваВШапке("КоличествоУпаковокФакт");
	
КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокОтмененоПриИзмененииНаСервере()
	
	ПересчитатьКоличествоЕдиницВШапке("Отменено");
	ПриИзмененииКоличестваВШапке("КоличествоУпаковокОтменено");
	
КонецПроцедуры

&НаСервере
Процедура УпаковкаПланПриИзмененииНаСервере()
	
	ПересчитатьКоличествоЕдиницВШапке("План");
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "УпаковкаПлан");
	
	АдресХранилищаНормативы = "";
	ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами");
	ЗаполнитьНормативы("Трудозатраты");
	
КонецПроцедуры

&НаСервере
Процедура УпаковкаФактПриИзмененииНаСервере()
	
	ПересчитатьКоличествоЕдиницВШапке("Факт");
	ЗаполнитьКоличествоНоменклатурыПартии();
	ПриИзмененииКоличестваВШапке("УпаковкаФакт, КоличествоНоменклатурыПартии");
	
КонецПроцедуры

&НаСервере
Процедура УпаковкаОтмененоПриИзмененииНаСервере()
	
	ПересчитатьКоличествоЕдиницВШапке("Отменено");
	ЗаполнитьКоличествоНоменклатурыПартии();
	ПриИзмененииКоличестваВШапке("УпаковкаОтменено, КоличествоНоменклатурыПартии");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКоличестваВШапке(ИзмененныеРеквизиты)
	
	Если КоличествоФакт + КоличествоОтменено >= КоличествоПлан Тогда
		
		ЗавершеноВыполнениеЭтапа = Истина;
		ОбработатьЗавершениеВыполненияЭтапа(ИзмененныеРеквизиты);
		
	ИначеЕсли КоличествоФакт > 0 И НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		ОбработатьНачалоВыполненияЭтапа(ИзмененныеРеквизиты);
		
	ИначеЕсли ЗавершеноВыполнениеЭтапа Тогда
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		ОбработатьЗавершениеВыполненияЭтапа(ИзмененныеРеквизиты);
		
	Иначе
		
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьБрак()
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПартияПроизводства", Объект.ПартияПроизводства);
	ПараметрыФормы.Вставить("Этап", Объект.Ссылка);
	ПараметрыФормы.Вставить("Разделить", Истина);
	
	ОткрытьФорму(
		"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
		ПараметрыФормы,
		ЭтаФорма,
		Объект.ПартияПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроизводство()
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПартияПроизводства", Объект.ПартияПроизводства);
	ПараметрыФормы.Вставить("Этап", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отменить", Истина);
	
	ОткрытьФорму(
		"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
		ПараметрыФормы,
		ЭтаФорма,
		Объект.ПартияПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьУвеличитьПроизводство()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПартияПроизводства", Объект.ПартияПроизводства);
	ПараметрыФормы.Вставить("Этап", Объект.Ссылка);
	ПараметрыФормы.Вставить("СократитьУвеличить", Истина);
	
	Если Объект.Этап.Пустая() Тогда
		
		Если КоличествоФакт > КоличествоПлан Тогда
		
			// Увеличить
			ПараметрыФормы.Вставить("КоличествоУпаковок", Объект.КоличествоУпаковокФакт);
			ПараметрыФормы.Вставить("Упаковка", Объект.УпаковкаФакт);
		
		Иначе
			
			// Сократить
			Если Объект.УпаковкаПлан = Объект.УпаковкаОтменено Тогда
				ПараметрыФормы.Вставить("КоличествоУпаковок",
					Объект.КоличествоУпаковокПлан - Объект.КоличествоУпаковокОтменено);
				ПараметрыФормы.Вставить("Упаковка", Объект.УпаковкаПлан);
			Иначе
				ПараметрыФормы.Вставить("КоличествоУпаковок",
					КоличествоПлан - КоличествоОтменено);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РазмерПартии = КоличествоИзделийВЭтапахПартии(Объект.ПартияПроизводства, Объект.Этап);
		ПараметрыФормы.Вставить("КоличествоУпаковок", РазмерПартии.КоличествоУпаковок);
		ПараметрыФормы.Вставить("Упаковка", РазмерПартии.Упаковка);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
		ПараметрыФормы,
		ЭтаФорма,
		Объект.ПартияПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭтап()
	
	ОчиститьСообщения();
	
	Ссылка = СоздатьНовыйЭтапНаСервере();
	
	ПоказатьЗначение(, Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(ИмяТЧ)
	
	ОчиститьСообщения();
	
	Если Объект.ВидЦены.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Вид цены""';
								|en = '""Price type"" is not filled in'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВидЦены","Объект");
		
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстШаблона = НСтр("ru = 'В таблице ""%1"" не выбрано ни одной строки. Цены не могут быть заполнены';
							|en = 'No line is selected in the ""%1"" table. Cannot fill in prices'");
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			ЭлементУправления = НадписьПродукция;
		Иначе
			ЭлементУправления = НадписьПобочныеИзделия;
		КонецЕсли;
		
		ПоказатьПредупреждение( , СтрШаблон(ТекстШаблона, ЭлементУправления));
		
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(Строка);
		Если ДанныеСтроки.Произведено ИЛИ ДанныеСтроки.Цена <> 0 Тогда
			Идентификаторы.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенных строках отсутствуют позиции, доступные для заполнения по виду цен.';
								|en = 'There are no items available for population by a price type in the selected lines.'");
		ПоказатьПредупреждение( , ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ИмяТЧ, Объект.ВидЦены, Идентификаторы);
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановыеКалькуляцииИЦеныНаСервере(ИдентификаторыСтрок = Неопределено, Калькуляция = Неопределено)
	
	Если ИдентификаторыСтрок <> Неопределено Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
			
			СтрокаТовара = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Идентификатор);
			МассивСтрок.Добавить(СтрокаТовара);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ПлановаяКалькуляция2_2.ОписаниеПараметраЗаполненияЦенВКоллецкии();
	ПараметрыЗаполнения.ДатаДокумента = Объект.Дата;
	ПараметрыЗаполнения.ВалютаДокумента = ВалютаДокумента;
	ПараметрыЗаполнения.Калькуляция = Калькуляция;
	
	Документы.ПлановаяКалькуляция2_2.ЗаполнитьЦеныПоКалькуляцииВКоллекции(
		Объект.ВыходныеИзделия,
		МассивСтрок,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция СоздатьНовыйЭтапНаСервере()
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	НоваяСсылка = Документы.ЭтапПроизводства2_2.СоздатьДокументНаОтмененноеКоличество(
		Объект.Ссылка,
		Объект.КоличествоУпаковокОтменено,
		Объект.УпаковкаОтменено);
	
	Прочитать();
	
	Возврат НоваяСсылка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаОбъектаПоИмени(Объект, ИмяТаблицы)
	
	Если ИмяТаблицы = "ВыходныеИзделия" Тогда
		ТаблицаОбъекта = Объект.ВыходныеИзделия;
		
	ИначеЕсли ИмяТаблицы = "ВыходныеИзделияСерии" Тогда
		ТаблицаОбъекта = Объект.ВыходныеИзделияСерии;
		
	ИначеЕсли ИмяТаблицы = "ПобочныеИзделия" Тогда
		ТаблицаОбъекта = Объект.ПобочныеИзделия;
		
	ИначеЕсли ИмяТаблицы = "ПобочныеИзделияСерии" Тогда
		ТаблицаОбъекта = Объект.ПобочныеИзделия;

	ИначеЕсли ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами" Тогда
		ТаблицаОбъекта = Объект.ОбеспечениеМатериаламиИРаботами;

	ИначеЕсли ИмяТаблицы = "РасходМатериаловИРабот" Тогда
		ТаблицаОбъекта = Объект.РасходМатериаловИРабот;

	ИначеЕсли ИмяТаблицы = "ЭкономияМатериалов" Тогда
		ТаблицаОбъекта = Объект.ЭкономияМатериалов;

	ИначеЕсли ИмяТаблицы = "ЭкономияМатериаловСерии" Тогда
		ТаблицаОбъекта = Объект.ЭкономияМатериаловСерии;

	ИначеЕсли ИмяТаблицы = "Трудозатраты" Тогда
		ТаблицаОбъекта = Объект.Трудозатраты;

	ИначеЕсли ИмяТаблицы = "ВидыРабочихЦентров" Тогда
		ТаблицаОбъекта = Объект.ВидыРабочихЦентров;

	ИначеЕсли ИмяТаблицы = "АльтернативныеВидыРабочихЦентров" Тогда
		ТаблицаОбъекта = Объект.АльтернативныеВидыРабочихЦентров;

	ИначеЕсли ИмяТаблицы = "ЗанятостьВидовРабочихЦентров" Тогда
		ТаблицаОбъекта = Объект.ЗанятостьВидовРабочихЦентров;

	ИначеЕсли ИмяТаблицы = "Последователи" Тогда
		ТаблицаОбъекта = Объект.Последователи;

	ИначеЕсли ИмяТаблицы = "ВидыЗапасовИзделия" Тогда
		ТаблицаОбъекта = Объект.ВидыЗапасовИзделия;

	ИначеЕсли ИмяТаблицы = "ВидыЗапасовМатериалы" Тогда
		ТаблицаОбъекта = Объект.ВидыЗапасовМатериалы;

	Иначе
		ТаблицаОбъекта = Неопределено;

	КонецЕсли;
	
	Возврат ТаблицаОбъекта;
	
КонецФункции

#КонецОбласти

#КонецОбласти
