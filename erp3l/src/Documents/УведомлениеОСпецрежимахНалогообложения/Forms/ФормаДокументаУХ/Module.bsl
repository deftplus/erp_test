
#Область СобытияФормы

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьОЗаписиНового(Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО И Объект.ИмяФормы = "Форма2015_1" Тогда
		СтруктураПараметров = Новый Структура("Титульный, СведФЛ, СведРО, СведИО, СведУч, СведИС, СведИСУч, МногострочнаяЧасть, Автонумерация",
										РеквизитФормыВЗначение("ТитульнаяСтраница"),
										СведФЛ.Выгрузить(),//Объект.СведФЛ.Выгрузить(),
										Объект.СведРО.Выгрузить(),
										Объект.СведИО.Выгрузить(),
										Объект.СведУч.Выгрузить(),
										Объект.СведИС.Выгрузить(),
										Объект.СведИСУч.Выгрузить(),
										Объект.МногострочнаяЧасть.Выгрузить(),
										Истина);
		
		ТекущийОбъект.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Иначе
		ДанныеДопСтрокБД = Новый Структура;
		Для Каждого КЗ Из ДанныеДопСтрок Цикл 
			ДанныеДопСтрокБД.Вставить(КЗ.Ключ, ПолучитьИзВременногоХранилища(КЗ.Значение));
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура;
				
		СтруктураПараметров.Вставить("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
		СтруктураПараметров.Вставить("ДанныеДопСтрокБД", ДанныеДопСтрокБД);
		СтруктураПараметров.Вставить("ДеревоСтраниц", РеквизитФормыВЗначение("ДеревоСтраниц"));
		СтруктураПараметров.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
		СтруктураПараметров.Вставить("ДанныеУведомления", ДанныеУведомления);
		СтруктураПараметров.Вставить("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
		
		ТекущийОбъект.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Сценарий = Константы.СценарийОтчетностиКИК.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		Параметры.Свойство("Организация", Объект.Организация);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		КонецЕсли;
		Параметры.Свойство("ВидУведомления", Объект.ВидУведомления);
		Параметры.Свойство("ИмяФормы", Объект.ИмяФормы);
		Параметры.Свойство("ИмяОтчета", Объект.ИмяОтчета);
		Параметры.Свойство("Дата", Объект.Дата);
		Параметры.Свойство("ОснованиеУведомленияОбИО", Объект.ОснованиеУведомленияОбИО);
		Параметры.Свойство("НалоговыйПериод", Объект.НалоговыйПериод);
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
			Объект.НалоговыйПериод = Год(Объект.Дата);
		КонецЕсли;
		Инвестиции = Неопределено;
		Если Параметры.Свойство("Инвестиции", Инвестиции) Тогда
			ЗаполнитьИнвестицииНаСервере();
			Для Индекс = -Объект.ИностранныеИнвестиции.Количество() + 1 По 0 Цикл
			    Если Инвестиции.Найти(Объект.ИностранныеИнвестиции[-Индекс].Инвестиция) = Неопределено Тогда
			        Объект.ИностранныеИнвестиции.Удалить(-Индекс);
			    КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеСписковПриСозданииНаСервере();
	
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО И Объект.ИмяФормы = "Форма2015_1" Тогда
		Если Объект.СведИО.Количество() = 0 И Объект.СведИС.Количество() = 0 И Объект.ИностранныеИнвестиции.Количество() <> 0 Тогда
			ЗаполнитьТаблицы();
		Иначе
			СформироватьМакетНаСервере();
		КонецЕсли;
	Иначе
		ЗагрузитьТаблицуФорматов();
		Если Объект.Ссылка.Пустая() Тогда
			Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
				ЗаполнитьИнвестицииНаСервере();
			КонецЕсли;
			ЗаполнитьТаблицы();
		Иначе
			ЗагрузитьДанные(Объект.Ссылка);
			СформироватьМакетНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодписантФамилия) И НЕ ЗначениеЗаполнено(Объект.Подписант) Тогда
		Элементы.Старая.Видимость = Истина;
		Элементы.Новая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СокрЛП(Объект.ПодписантПризнак) = "1" ИЛИ СокрЛП(Объект.ПодписантПризнак) = "2"
			ИЛИ СокрЛП(Объект.ПодписантПризнак) = "3" ИЛИ СокрЛП(Объект.ПодписантПризнак) = "4" Тогда
		Подписант = Число(Объект.ПодписантПризнак);
	КонецЕсли;
	СтараяДата = Объект.Дата;
	СтараяОрганизация = Объект.Организация;
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Подписант) Тогда
		ВыбратьПодписантаСервер(Объект.Подписант);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодписанта(Команда)
	ФИОПодписанта = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьПодписантаЗавершение", ЭтотОбъект, Новый Структура("Подписант", ФИОПодписанта)), ФИОПодписанта, "Подписант", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодписантаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ФИОПодписанта = ?(Значение = Неопределено, ДополнительныеПараметры.Подписант, Значение);
	
	Если Значение <> Неопределено Тогда
		Объект.Подписант = ФИОПодписанта;
		ВыбратьПодписантаСервер(ФИОПодписанта);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУдостоверениеЛичностиФизЛица(ФизЛицо, ДатаСреза) 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыФизическихЛиц.Представление КАК Представление,
		|	ДокументыФизическихЛиц.ВидДокумента.КодМВД КАК КодВидДок,
		|	"""" + ДокументыФизическихЛиц.Серия + "" "" + ДокументыФизическихЛиц.Номер КАК СерНомДок,
		|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДатаДокДата,
		|	ДокументыФизическихЛиц.КемВыдан КАК ВыдДок
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
		|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
		|		ИЗ
		|			РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ГДЕ
		|			ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
		|			И ДокументыФизическихЛиц.Физлицо = &Физлицо
		|			И ДокументыФизическихЛиц.Период <= &ДатаСреза
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДокументыФизическихЛиц.Физлицо) КАК ДокументыСрез
		|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
		|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
		|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ВыбратьПодписантаСервер(ФИОПодписанта)
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОПодписанта);
	Объект.ПодписантФамилия = СтруктураФИО.Фамилия;
	Объект.ПодписантИмя = СтруктураФИО.Имя;
	Объект.ПодписантОтчество = СтруктураФИО.Отчество;
	
	Удостоверение = ПолучитьУдостоверениеЛичностиФизЛица(ФИОПодписанта, ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса()));
	
	Если Удостоверение <> Неопределено Тогда
		Объект.ПодписантДокумент = Удостоверение.Представление;
	Иначе
		Объект.ПодписантДокумент = "";
	КонецЕсли;
	Объект.ПодписантТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФИОПодписанта, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, , Истина);
	
	СформироватьМакетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Записать(ПараметрыЗаписи);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	ПараметрыФормы = Новый Структура("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"));
	Форма = ПолучитьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы);
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	Если Модифицированность Тогда 
		Записать();
	КонецЕсли;
	ТаблицаОшибок = ПроверитьВыгрузкуНаСервере();
	Если ТаблицаОшибок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам", Новый Структура("ТаблицаОшибок", ТаблицаОшибок), ЭтотОбъект, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомления(Команда)
	Если Объект.ВидУведомления <> ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Форма уведомления о КИК поставляется в текущем релизе в качестве демонстрации. Полноценная форма уведомления появится в следующем релизе");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстВопроса = "Уведомление изменено. Перед печатью необходимо сохранить изменения. Сохраните документ";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстВопроса);
		Возврат;
	Иначе
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = "Уведомление изменено. Перед печатью необходимо сохранить изменения. Сохраните документ";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстВопроса);
		Возврат;
	ИначеЕсли Модифицированность Тогда 
		Записать();
	КонецЕсли;
	
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО") И Объект.ИмяФормы = "Форма2015_1" Тогда
		МассивПечати = Новый Массив;
		МассивПечати.Добавить(Объект.Ссылка);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.УведомлениеОСпецрежимахНалогообложения",
			"Уведомление", МассивПечати, Неопределено);
	Иначе
		ПечатьБРО();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО()
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, , Ложь, СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
КонецПроцедуры

&НаСервере
Процедура ПечатьБРОНаСервере()
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
		СтруктураРеквизитовУведомления = Новый Структура("СписокПечатаемыхЛистов", Отчеты.РегламентированноеУведомлениеКИК.СформироватьСписокЛистов(Объект));
	Иначе
		СтруктураРеквизитовУведомления = Новый Структура("СписокПечатаемыхЛистов", Отчеты.РегламентированноеУведомлениеУ_ИО.СформироватьСписокЛистов(Объект));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФорму()
	Записать();
	Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения"));
	Возврат Документ.ПечатьСразу();
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	Записать();
	Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения"));
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

#КонецОбласти

#Область ВыводМакета

&НаСервереБезКонтекста
Процедура УстановитьРазмерность18_15ВПолях(ПредставлениеУведомления, Число18_15)
	Имена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ДоляУчастия1;ДоляУчастияИС;ДоляКосвУчастия;ДоляКосвУчастияГр;ДоляПрУчастия_1;ДоляКосвУчастия_1;ДоляПрУчастия;ДоляКосвУчастия", ";");
	Для Каждого Имя Из Имена Цикл 
		Поле = ПредставлениеУведомления.Области.Найти(Имя);
		Если Поле <> Неопределено Тогда 
			Поле.ТипЗначения = Число18_15;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокОбласти(ДанныеСтраницы)
	Результат = "";
	Если ДанныеСтраницы.Свойство("НаимОргЛат", Результат) Тогда
		Возврат Результат;
	ИначеЕсли ДанныеСтраницы.Свойство("НаимОрг", Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьСтраницы(ДанныеСтраницы)
	Результат = Неопределено;
	Если ДанныеСтраницы = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ДанныеСтраницы.Свойство("НомерКИКЧисло", Результат) Тогда
		Возврат Результат <> Неопределено;
	ИначеЕсли ДанныеСтраницы.Свойство("НомерКИК", Результат) Тогда
		Возврат Результат <> Неопределено;
	ИначеЕсли ДанныеСтраницы.Свойство("Наименование", Результат) Тогда
		Возврат Результат <> Неопределено;
	ИначеЕсли ДанныеСтраницы.Свойство("НаимОрг", Результат) Тогда
		Возврат Результат <> Неопределено;
	ИначеЕсли ДанныеСтраницы.Свойство("НомерИО", Результат) Тогда
		Возврат Результат <> Неопределено;
	ИначеЕсли ДанныеСтраницы.Свойство("НомерРосОрг", Результат) Тогда
		Возврат Результат <> Неопределено;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ВывестиДеревоСтраниц(СтрокиДерева, ИмяОтчета)
	Для каждого Строка Из СтрокиДерева Цикл
		Если Не ПустаяСтрока(Строка.ИмяМакета) Тогда
			Макет = Отчеты[ИмяОтчета].ПолучитьМакет(Строка.ИмяМакета);
			МакетОбласти = Макет.ПолучитьОбласть("ОсновнаяЧасть");
			ДанныеСтраницы = ПолучитьДанныеСтраницы(Строка);
			Если ИмяОтчета <> "РегламентированноеУведомлениеУ_ИО" И НЕ ПроверитьЗаполненностьСтраницы(ДанныеСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			Для каждого Элемент Из ДанныеСтраницы Цикл
			    Область = МакетОбласти.Области.Найти(Элемент.Ключ);
				Если Область <> Неопределено Тогда
					ЗаполнитьФорматОбласти(Область);
					Область.Значение = Элемент.Значение;
				КонецЕсли;
			КонецЦикла;
			ЗаголовокОбласти = ПолучитьЗаголовокОбласти(ДанныеСтраницы);
			
			Для каждого Область Из МакетОбласти.Области Цикл
				ТекИмяОбласти = Область.Имя + "_" + СтрЗаменить(Строка.УИД, "-", "_");
				Область.Имя = ТекИмяОбласти;
			КонецЦикла;
			ТекИмяОбласти = МакетОбласти.Область().Имя;
		    ЗаголовкиОбластей.Добавить(ТекИмяОбласти, Строка.ИДНаименования + " " + ЗаголовокОбласти);
			
			ФормаУведомления.Вывести(МакетОбласти);
			Если Строка.Многострочность Тогда
				ВывестиМногострочныеЧасти(Строка, Макет);
			КонецЕсли;
		КонецЕсли;
		ВывестиДеревоСтраниц(Строка.ПолучитьЭлементы(), ИмяОтчета);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорматОбласти(Область)
	ПоляСФорматами = ЧисловыеФорматы.НайтиСтроки(Новый Структура("Поле", Область.Имя));
	Если ПоляСФорматами.Количество() > 0 Тогда
		Знак = ?(ПоляСФорматами[0].Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
		ОТ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ПоляСФорматами[0].Всего, ПоляСФорматами[0].ПослеЗапятой, Знак));
		Область.ТипЗначения = ОТ;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеЧасти(Строка, Макет)
	Для каждого МногострочныеЧасти Из Строка.МногострочныеЧасти Цикл
		МакетОбласти = Макет.ПолучитьОбласть("Header_" + МногострочныеЧасти.Значение);
		ФормаУведомления.Вывести(МакетОбласти);
		ДанныеМногострочные = ПолучитьДанныеДопСтрокСтраницы(Строка.УИД, ДанныеУведомления, МногострочныеЧасти.Значение);
		Для каждого СтрокаМЧ Из ДанныеМногострочные Цикл
			МакетОбласти = Макет.ПолучитьОбласть("Str_" + МногострочныеЧасти.Значение);
			Для каждого Колонка Из ДанныеМногострочные.Колонки Цикл
				Область = МакетОбласти.Области.Найти(Колонка.Имя);
				Если Область <> Неопределено Тогда
					ЗаполнитьФорматОбласти(Область);
					ТекИмяОбласти = Область.Имя + "_" + СтрЗаменить(Строка.УИД, "-", "_") + "_ё" + Формат(ДанныеМногострочные.Индекс(СтрокаМЧ), "ЧН=0; ЧГ=") + "_" + МногострочныеЧасти.Значение;
					Область.Имя = ТекИмяОбласти;
					Область.Значение = СтрокаМЧ[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
			ФормаУведомления.Вывести(МакетОбласти);
		КонецЦикла;
		МакетОбласти = Макет.ПолучитьОбласть("Footer_" + МногострочныеЧасти.Значение);
		ФормаУведомления.Вывести(МакетОбласти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДопСтрокСтраницы(УИД, Данные, ИмяТЧ)
	ТаблицаДанных = ПолучитьИзВременногоХранилища(ДанныеДопСтрок[ИмяТЧ]);
	СтруктураПоиска = Новый Структура("УИД", УИД);
	Возврат ТаблицаДанных.Скопировать(СтруктураПоиска);
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтраницы(Строка)
	Если Строка.Многостраничность = Ложь Тогда
		Возврат ДанныеУведомления[Строка.ИДНаименования];
	Иначе
		СписокСтраниц = ДанныеМногостраничныхРазделов[Строка.ИДНаименования];
		Для каждого Элемент Из СписокСтраниц Цикл
			Если Элемент.Значение.УИД = Строка.УИД Тогда
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СформироватьМакетНаСервере()
	
	ФормаУведомления.Очистить();
	ЗаголовкиОбластей.Очистить();
	
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО И Объект.ИмяФормы = "Форма2015_1" Тогда
		Если ТитульнаяСтраница.Количество() = 0 Тогда
			ТС = ТитульнаяСтраница.Добавить();
			ТС.UID = Объект.Ссылка.УникальныйИдентификатор();
		Иначе
			ТС = ТитульнаяСтраница[0];
		КонецЕсли;
		ПечатныеРеквизиты = Новый Структура("ФИО, Телефон, ДатаПодписи, Представитель", Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество, Объект.ПодписантТелефон, Объект.ДатаПодписи, Объект.ПодписантПризнак);
		РасчетыПоКорпоративнымНалогам.ЗаполнитьТитульнуюСтраницу(ТС, Объект.Организация, ПечатныеРеквизиты, Объект.НомерКорректировки, Объект.НалоговыйПериод, Объект.ПодписантПризнак, Объект.РегистрацияВИФНС.Код);
		Если ЗначениеЗаполнено(Объект.ОснованиеУведомленияОбИО) Тогда
			ТС.Основание = ОснованияУведомленияОбУчастии.Получить(Объект.ОснованиеУведомленияОбИО);
		КонецЕсли;
		ВывестиМакетНаСервере(ФормаУведомления, МакетУИО2015.ПолучитьОбласть("Титульная"), ТитульнаяСтраница.Выгрузить(), ТитульнаяСтраница[0].UID, ЗаголовкиОбластей, "Титульный лист ", ЧисловыеФорматы);
		СтруктураПараметров = Новый Структура("СведФЛ, СведРО, СведИО, СведУч, СведИС, СведИСУч, МногострочнаяЧасть, Автонумерация",
									Объект.СведФЛ.Выгрузить(),
									Объект.СведРО.Выгрузить(),
									Объект.СведИО.Выгрузить(),
									Объект.СведУч.Выгрузить(),
									Объект.СведИС.Выгрузить(),
									Объект.СведИСУч.Выгрузить(),
									Объект.МногострочнаяЧасть.Выгрузить(),
									Истина);
		
		ВыводУведомленияОбИО(СтруктураПараметров);
	Иначе
		ВывестиДеревоСтраниц(ДеревоСтраниц.ПолучитьЭлементы(), Объект.ИмяОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиМакетНаСервере(ОбластьВывода, ОбластьМакета, Таблица, ИдентификаторСтраницы, ЗаголовкиОбластей, ЗаголовокОбласти = Неопределено, ЧисловыеФорматы)
	
	КодСтраницы = СтрЗаменить(ИдентификаторСтраницы, "-", "_");
	
	Если ОбластьМакета.Параметры.Количество() = 0 Тогда
		ПараметрыОтбора = Новый Структура(?(Таблица.Колонки.Найти("UID") <> Неопределено, "UID", "УИД"), ИдентификаторСтраницы);
		Данные = Таблица.НайтиСтроки(ПараметрыОтбора);
		Если Данные.Количество() > 0 Тогда
			Для каждого Область Из ОбластьМакета.Области Цикл
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Продолжить;
				КонецЕсли;
				Попытка
					Если Область.СодержитЗначение = Истина Тогда
						//На самом деле попытка нужна для проверки условия, а не для операции присваивания
						//Есть такие типы областей, где обращение к свойству "содержит значение" вызовет ошибку
						Область.Значение = Данные[0][Область.Имя];
					КонецЕсли;
				Исключение
					// Описание выше
				КонецПопытки
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПараметрыОтбора = Новый Структура("UID", ИдентификаторСтраницы);
		Данные = Таблица.НайтиСтроки(ПараметрыОтбора);
		Если Данные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Данные[0]);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Область Из ОбластьМакета.Области Цикл 
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			ОблИмя = Область.Имя;
			ПоляСФорматами = ЧисловыеФорматы.НайтиСтроки(Новый Структура("Поле", ОблИмя));
			Если ПоляСФорматами.Количество() > 0 Тогда 
				Знак = ?(ПоляСФорматами[0].Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
				ОТ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ПоляСФорматами[0].Всего, ПоляСФорматами[0].ПослеЗапятой, Знак));
				Область.ТипЗначения = ОТ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПустойГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если ЗаголовкиОбластей <> Неопределено Тогда
		
		Для каждого Область Из ОбластьМакета.Области Цикл
			ТекИмяОбласти = Область.Имя + "_" + СтрЗаменить(КодСтраницы, "-", "_");
			Область.Имя = ТекИмяОбласти;
		КонецЦикла;
		
		ТекИмяОбласти = ОбластьМакета.Область().Имя + "_" + СтрЗаменить(КодСтраницы, "-", "_");
		ОбластьМакета.Область().Имя = ТекИмяОбласти;
		
		ЗаголовкиОбластей.Добавить(ТекИмяОбласти, ЗаголовокОбласти);
	
	КонецЕсли;
	
	ОбластьВывода.Вывести(ОбластьМакета);

КонецПроцедуры

&НаСервере
Процедура ВыводУведомленияОбИО(СтруктураПараметров)
	Если СтруктураПараметров.СведФЛ.Количество() = 1 Тогда
		ТекущаяОбласть = МакетУИО2015.ПолучитьОбласть("СведФЛ");
		УстановитьРазмерность18_15ВПолях(ТекущаяОбласть, Число18_15);
		ВывестиМакетНаСервере(ФормаУведомления, ТекущаяОбласть, СтруктураПараметров.СведФЛ, СтруктураПараметров.СведФЛ[0].UID, ЗаголовкиОбластей, "Сведения о физическом лице", ЧисловыеФорматы);
	КонецЕсли;
	Для каждого Стр Из СтруктураПараметров.СведИО Цикл
		ТекущаяОбласть = МакетУИО2015.ПолучитьОбласть("СведИО");
		УстановитьРазмерность18_15ВПолях(ТекущаяОбласть, Число18_15);
		ВывестиМакетНаСервере(ФормаУведомления, ТекущаяОбласть, СтруктураПараметров.СведИО, Стр.UID, ЗаголовкиОбластей, "Лист А " + Стр.ИО_ПолноеНаименование_RUS, ЧисловыеФорматы);
		ОчиститьОбласти(ФормаУведомления, "ДобавитьСтраницу1,ДобавитьСтраницуЗначок1,УдалитьСтраницу1,УдалитьСтраницуЗначок1", Стр.UID, "ИО_Номер,ДоляУчастия1");
	КонецЦикла;
	Для каждого Стр Из СтруктураПараметров.СведРО Цикл
		ТекущаяОбласть = МакетУИО2015.ПолучитьОбласть("СведРО");
		УстановитьРазмерность18_15ВПолях(ТекущаяОбласть, Число18_15);
		ВывестиМакетНаСервере(ФормаУведомления, ТекущаяОбласть, СтруктураПараметров.СведРО, Стр.UID, ЗаголовкиОбластей, "Лист Б " + Стр.РО_ПолноеНаименование, ЧисловыеФорматы);
		ОчиститьОбласти(ФормаУведомления, "ДобавитьСтраницу2,ДобавитьСтраницуЗначок2,УдалитьСтраницу2,УдалитьСтраницуЗначок2", Стр.UID, "РО_Номер");
	КонецЦикла;
	Для каждого Стр Из СтруктураПараметров.СведИС Цикл
		ТекущаяОбласть = МакетУИО2015.ПолучитьОбласть("СведИС");
		УстановитьРазмерность18_15ВПолях(ТекущаяОбласть, Число18_15);
		ВывестиМакетНаСервере(ФормаУведомления, ТекущаяОбласть, СтруктураПараметров.СведИС, Стр.UID, ЗаголовкиОбластей, "Лист В " + Стр.ИС_ПолноеНаименование_RUS, ЧисловыеФорматы);
		ОчиститьОбласти(ФормаУведомления, "ДобавитьСтраницу4,ДобавитьСтраницуЗначок4,УдалитьСтраницу4,УдалитьСтраницуЗначок4", Стр.UID, "НомерСтруктуры");
		Строки = СтруктураПараметров.СведИСУч.НайтиСтроки(Новый Структура("UID_parent", Стр.UID));
		Для каждого Стр1 Из Строки Цикл
			ТекущаяОбластьВложенная = МакетУИО2015.ПолучитьОбласть("СведИСУч");
			ВывестиМакетНаСервере(ФормаУведомления, ТекущаяОбластьВложенная, СтруктураПараметров.СведИСУч, Стр1.UID, ЗаголовкиОбластей, "Лист В1" + Стр1.ИС_Статус_RUS, ЧисловыеФорматы);
			ОчиститьОбласти(ФормаУведомления, "ДобавитьСтраницу5,ДобавитьСтраницуЗначок5,УдалитьСтраницу5,УдалитьСтраницуЗначок5", Стр1.UID, "ДоляУчастияИС");
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Стр Из СтруктураПараметров.СведУч Цикл
		ТекущаяОбласть = МакетУИО2015.ПолучитьОбласть("СведУч");
		УстановитьРазмерность18_15ВПолях(ТекущаяОбласть, Число18_15);
		ВывестиМакетНаСервере(ФормаУведомления, ТекущаяОбласть, СтруктураПараметров.СведУч, Стр.UID, ЗаголовкиОбластей, "Лист Г " + Стр.ПолноеНаименование + "(" + Стр.НомерГруппы + ")", ЧисловыеФорматы);
		ОчиститьОбласти(ФормаУведомления, "ДобавитьСтраницу3,ДобавитьСтраницуЗначок3,УдалитьСтраницу3,УдалитьСтраницуЗначок3", Стр.UID, "НомерУчастника,ДоляКосвУчастия,ДоляКосвУчастияГр");
		Строки = СтруктураПараметров.МногострочнаяЧасть.НайтиСтроки(Новый Структура("UID", Стр.UID));
		
		ОбластьМнг = МакетУИО2015.ПолучитьОбласть("МногострочнаяЧасть");
		ОбластьДоб = МакетУИО2015.ПолучитьОбласть("ДобавлениеСтроки");
		УстановитьРазмерность18_15ВПолях(ОбластьМнг, Число18_15);
		
		Инд = 1;
		Для Каждого Стр Из Строки Цикл 
			Если Инд > 1 Тогда 
				ОбластьМнг.Области["НомерУчастника_" + (Инд - 1)].Имя = "НомерУчастника_" + Инд;
				ОбластьМнг.Области["ДоляПрУчастия_" + (Инд - 1)].Имя = "ДоляПрУчастия_" + Инд;
				ОбластьМнг.Области["ДоляКосвУчастия_" + (Инд - 1)].Имя = "ДоляКосвУчастия_" + Инд;
				ОбластьМнг.Области["УдалитьСтроку_" + (Инд - 1)].Имя = "УдалитьСтроку_" + Инд;
				ОчиститьОбласть(ФормаУведомления, "УдалитьСтроку_" + (Инд - 1));
			КонецЕсли;
			ФормаУведомления.Вывести(ОбластьМнг);
			ФормаУведомления.Области["НомерУчастника_" + Инд].Значение = Стр["НомерУчастника"];
			ФормаУведомления.Области["НомерУчастника_" + Инд].Примечание.Текст = НайтиОрганизациюПоНомеру(Стр["НомерУчастника"], СтруктураПараметров);
			ФормаУведомления.Области["ДоляПрУчастия_" + Инд].Значение = Стр["ДоляПрУчастия"];
			ФормаУведомления.Области["ДоляКосвУчастия_" + Инд].Значение = Стр["ДоляКосвУчастия"];
			
			ФормаУведомления.Области["НомерУчастника_" + Инд].Защита = Истина;
			ФормаУведомления.Области["НомерУчастника_" + Инд].ЦветФона = ЦветаСтиля.ЦветФонаПоля;
			ФормаУведомления.Области["ДоляПрУчастия_" + Инд].Защита = Истина;
			ФормаУведомления.Области["ДоляПрУчастия_" + Инд].ЦветФона = ЦветаСтиля.ЦветФонаПоля;
			ФормаУведомления.Области["ДоляКосвУчастия_" + Инд].Защита = Истина;
			ФормаУведомления.Области["ДоляКосвУчастия_" + Инд].ЦветФона = ЦветаСтиля.ЦветФонаПоля;
			
			ОчиститьОбласть(ФормаУведомления, "УдалитьСтроку_" + Инд);
			Инд = Инд + 1;
		КонецЦикла;
		
		ОчиститьОбласть(ФормаУведомления, "ДобавитьСтроку");
		ОчиститьОбласть(ФормаУведомления, "ДобавитьСтрокуЗначок");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьОбласти(ПолеТаблицы, ИменаОбластей, Знач Суффикс, СписокБлокировок)
	Суффикс = СтрЗаменить(Суффикс, "-", "_");
	Список = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИменаОбластей, ",");
	Для каждого Элемент Из Список Цикл
		ОчиститьОбласть(ПолеТаблицы, Элемент + "_" + Суффикс)
	КонецЦикла;
	Список = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СписокБлокировок, ",");
	Для каждого Элемент Из Список Цикл
		ПолеТаблицы.Области[Элемент + "_" + Суффикс].Защита = Истина;
		ПолеТаблицы.Области[Элемент + "_" + Суффикс].ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьОбласть(ПолеТаблицы, ИмяОбласти)
	Если ТипЗнч(ПолеТаблицы.Области.Найти(ИмяОбласти)) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПолеТаблицы.Области[ИмяОбласти].Очистить(Истина, Истина, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиОрганизациюПоНомеру(НомерУчастника, СтруктураПараметров)
	Попытка
		ЧисловойНомер = Число(Сред(НомерУчастника, 3));
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если Лев(НомерУчастника, 2) = "РО" Тогда
		Если СтруктураПараметров.Свойство("СведРО") Тогда
			Результат = СтруктураПараметров.СведРО.НайтиСтроки(Новый Структура("РО_Номер", ЧисловойНомер));
			Если Результат.Количество() > 0 Тогда
				Возврат Результат[0].РО_ПолноеНаименование;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Лев(НомерУчастника, 2) = "ИО" Тогда
		Результат = СтруктураПараметров.СведИО.НайтиСтроки(Новый Структура("ИО_Номер", ЧисловойНомер));
		Если Результат.Количество() > 0 Тогда
			Возврат Результат[0].ИО_ПолноеНаименование_RUS;
		КонецЕсли;
	ИначеЕсли Лев(НомерУчастника, 2) = "ИС" Тогда
		Результат = СтруктураПараметров.СведИС.НайтиСтроки(Новый Структура("НомерСтруктуры", ЧисловойНомер));
		Если Результат.Количество() > 0 Тогда
			Возврат Результат[0].ИС_ПолноеНаименование_RUS;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ЗагрузитьТаблицуФорматов()
	Если НЕ (Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО И Объект.ИмяФормы = "Форма2015_1") Тогда
		ПодменаФормы = Новый Структура("ИмяФормы, ЧисловыеФорматы", "Форма." + Объект.ИмяОтчета, ЧисловыеФорматы);
		
		ИмяМакетаАрхиваТабличныхДокументов = "ЭкранныеФормы";
		//СтруктураФормы = Новый Структура;
		ПодменаФормы.Вставить("Объект", Новый Структура("ИмяОтчета, ИмяФормы", Объект.ИмяОтчета, Объект.ИмяФормы));
		ПодменаФормы.Вставить("ИмяМакетаАрхиваТабличныхДокументов", ИмяМакетаАрхиваТабличныхДокументов);
		
		Если Объект.ИмяФормы = "Форма2021_1" Тогда
			УведомлениеОСпецрежимахНалогообложения.ЗаполнитьТаблицуФорматов(ПодменаФормы, "Форматы2019_1");
		Иначе
			УведомлениеОСпецрежимахНалогообложения.ЗаполнитьТаблицуФорматов(ПодменаФормы, "Форматы" + Сред(Объект.ИмяФормы, 6, 4) + "_1");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РедактированиеМакета

&НаКлиенте
Процедура ОбновитьДанныеПослеРедактированияФормы2015(Элемент, СтрокаГуида, ИмяПоля)
	Если ОбновитьТабличныеЧастиПослеРедактированияТаблицы(Объект.СведИО, ИмяПоля, "UID", СтрокаГуида, Элемент.ТекущаяОбласть.Значение) Тогда
		Возврат;
	КонецЕсли;
	Если ОбновитьТабличныеЧастиПослеРедактированияТаблицы(Объект.СведРО, ИмяПоля, "UID", СтрокаГуида, Элемент.ТекущаяОбласть.Значение) Тогда
		Возврат;
	КонецЕсли;
	Если ОбновитьТабличныеЧастиПослеРедактированияТаблицы(Объект.СведИС, ИмяПоля, "UID", СтрокаГуида, Элемент.ТекущаяОбласть.Значение) Тогда
		Возврат;
	КонецЕсли;
	Если ОбновитьТабличныеЧастиПослеРедактированияТаблицы(Объект.СведУч, ИмяПоля, "UID", СтрокаГуида, Элемент.ТекущаяОбласть.Значение) Тогда
		Возврат;
	КонецЕсли;
	Если ОбновитьТабличныеЧастиПослеРедактированияТаблицы(Объект.СведФЛ, ИмяПоля, "UID", СтрокаГуида, Элемент.ТекущаяОбласть.Значение) Тогда
		Возврат;
	КонецЕсли;
	Если ТитульнаяСтраница.Количество() > 0 Тогда
		Если Строка(ТитульнаяСтраница[0].UID) = СтрокаГуида Тогда
			ТитульнаяСтраница[0][ИмяПоля] = Элемент.ТекущаяОбласть.Значение;
			Если ИмяПоля = "НалПер" ИЛИ ИмяПоля = "НалоговыйПериод" Тогда 
				Объект.НалоговыйПериод = Элемент.ТекущаяОбласть.Значение;
			ИначеЕсли ИмяПоля = "Тлф" ИЛИ ИмяПоля = "ТЕЛЕФОН" Тогда
				Объект.ПодписантТелефон = Элемент.ТекущаяОбласть.Значение;
			ИначеЕсли ИмяПоля = "ПРИЗНАК_НП_ПОДВАЛ" Тогда
				Объект.ПодписантПризнак = Элемент.ТекущаяОбласть.Значение;
				Попытка
					Подписант = Число(Элемент.ТекущаяОбласть.Значение);
				Исключение
					Подписант = 0;
				КонецПопытки;
			ИначеЕсли ИмяПоля = "НаимДок" ИЛИ ИмяПоля = "ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ" Тогда
				Объект.ПодписантДокумент = Элемент.ТекущаяОбласть.Значение;
			ИначеЕсли ИмяПоля = "НомерКорректировки" Тогда
				Объект.НомерКорректировки = Элемент.ТекущаяОбласть.Значение;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Текушее поле редактирования не найдено в исходных данных");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеРедактированияМЧ(УИД, ИмяПоля, Значение, ИмяТЧ, НомерСтроки)
	ТаблицаДанных = ПолучитьИзВременногоХранилища(ДанныеДопСтрок[ИмяТЧ]);
	СтруктураПоиска = Новый Структура("УИД", УИД);
	Строки = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	Если НомерСтроки <= Строки.ВГраница() Тогда
		Попытка
			Строки[НомерСтроки][ИмяПоля] = Значение;
		Исключение
			Возврат;
		КонецПопытки;
		ПоместитьВоВременноеХранилище(ТаблицаДанных, ДанныеДопСтрок[ИмяТЧ]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеРедактирования(УИД, ИмяПоля, Значение, ИмяТЧ, НомерСтроки)
	Источник = НайтиЭлементПоУИДВДереве(ДеревоСтраниц.ПолучитьЭлементы(), УИД);
	Если ИмяТЧ <> "" Тогда
		ОбновитьДанныеПослеРедактированияМЧ(УИД, ИмяПоля, Значение, ИмяТЧ, НомерСтроки);
	ИначеЕсли Источник.Многостраничность Тогда
		Раздел = ДанныеМногостраничныхРазделов[Источник.ИДНаименования];
		Для каждого Элемент Из Раздел Цикл
			Если Элемент.Значение.УИД = УИД Тогда
				Если Элемент.Значение.Свойство(ИмяПоля) Тогда
					Элемент.Значение[ИмяПоля] = Значение;
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Раздел = ДанныеУведомления[Источник.ИДНаименования];
		Если Раздел.Свойство(ИмяПоля) Тогда
			Раздел[ИмяПоля] = Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормаУведомленияПриИзменении(Элемент)
	Если СтрДлина(Элемент.ТекущаяОбласть.Имя) < 37 Тогда
		Возврат;
	КонецЕсли;
	ПозицияНомераСтроки = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_ё");
	Если ПозицияНомераСтроки = 0 Тогда
		ПозицияНомераСтроки = СтрДлина(Элемент.ТекущаяОбласть.Имя) + 1;
		НомерСтроки = 0;
		ИмяТЧ = "";
	Иначе
		ПСтр = Сред(Элемент.ТекущаяОбласть.Имя, ПозицияНомераСтроки + 2);
		НомерСтроки = Число(Лев(Пстр, СтрНайти(ПСтр, "_") - 1));
		ИмяТЧ = Сред(Пстр, СтрНайти(ПСтр, "_") + 1);
	КонецЕсли;
	СтрокаГуида = СтрЗаменить(Сред(Элемент.ТекущаяОбласть.Имя, ПозицияНомераСтроки - 36, 36), "_", "-");
	ИмяПоля = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияНомераСтроки - 38);
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО") И Объект.ИмяФормы = "Форма2015_1" Тогда
		ОбновитьДанныеПослеРедактированияФормы2015(Элемент, СтрокаГуида, ИмяПоля);
	Иначе
		ОбновитьДанныеПослеРедактирования(Новый УникальныйИдентификатор(СтрокаГуида), ИмяПоля, Элемент.ТекущаяОбласть.Значение, ИмяТЧ, НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОбновитьТабличныеЧастиПослеРедактированияТаблицы(Таблица, ИмяПоля, ИмяГУИДА, СтрокаГуида, Значение)
	Для каждого Стр Из Таблица Цикл
		Если Строка(Стр[ИмяГУИДА]) = СтрокаГуида Тогда
			Если Стр.Свойство(ИмяПоля) Тогда
				Стр[ИмяПоля] = Значение;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ЗаголовкиОбластейПриАктивизацииСтроки(Элемент)
	Если Элементы.ЗаголовкиОбластей.ТекущиеДанные <> Неопределено Тогда
		Элементы.ФормаУведомления.ТекущаяОбласть = ФормаУведомления.Область(Элементы.ЗаголовкиОбластей.ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КомандыТабличнойЧастиФормы

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ДанныеСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.ИностранныеИнвестиции.ВыделенныеСтроки Цикл
		ДанныеСтрок.Добавить(Элементы.ИностранныеИнвестиции.ДанныеСтроки(Строка));
	КонецЦикла;
	Для Каждого Строка Из ДанныеСтрок Цикл
		Объект.ИностранныеИнвестиции.Удалить(Строка);
	КонецЦикла;
	Если ДанныеСтрок.Количество() > 0 Тогда
		УправлениеФормой();
		ЗаполнитьТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнвестиции(Команда)
	ЗаполнитьИнвестицииНаСервере();
	ЗаполнитьТаблицы();
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвестицииНаСервере()
	Объект.ИностранныеИнвестиции.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = РасчетыПоКорпоративнымНалогам.ПолучитьТекстЗапросаСтатусов(Истина);
	
	Запрос.УстановитьПараметр("Инвестор", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО Тогда
			НовСтр = Объект.ИностранныеИнвестиции.Добавить();
			//ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаДетальныеЗаписи);
			НовСтр.Инвестиция = ВыборкаДетальныеЗаписи.ОбъектИнвестирования;
			НовСтр.ИностраннаяСтруктура = ВыборкаДетальныеЗаписи.ОбъектИнвестирования.ИностраннаяСтруктураБезОбразованияЮрЛица;
			НовСтр.ДоляВладения = ВыборкаДетальныеЗаписи.ЭффективнаяДоля;
		ИначеЕсли ВыборкаДетальныеЗаписи.ЭтоКИК Тогда
			НовСтр = Объект.ИностранныеИнвестиции.Добавить();
			НовСтр.Инвестиция = ВыборкаДетальныеЗаписи.ОбъектИнвестирования;
			НовСтр.ИностраннаяСтруктура = ВыборкаДетальныеЗаписи.ОбъектИнвестирования.ИностраннаяСтруктураБезОбразованияЮрЛица;
			НовСтр.ДоляВладения = ВыборкаДетальныеЗаписи.ЭффективнаяДоля;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
		ЗаполнитьДанныеНалоговыхОсвобождений(Объект.ИностранныеИнвестиции.Выгрузить().ВыгрузитьКолонку("Инвестиция"));
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СамостоятельноеПризнаниеКонтроляСрезПоследних.ОбъектИнвестирования КАК ОбъектИнвестирования,
			|	СамостоятельноеПризнаниеКонтроляСрезПоследних.ОснованиеКонтроля КАК ОснованиеКонтроля
			|ИЗ
			|	РегистрСведений.СамостоятельноеПризнаниеКонтроля.СрезПоследних(
			|			&ДатаСреза,
			|			Инвестор = &Инвестор
			|				И ОбъектИнвестирования В (&ОбъектыИнвестирования)) КАК СамостоятельноеПризнаниеКонтроляСрезПоследних";
		
		ОбъектыИнвестирования = Объект.ИностранныеИнвестиции.Выгрузить(, "Инвестиция").ВыгрузитьКолонку("Инвестиция");
		Запрос.УстановитьПараметр("ОбъектыИнвестирования", ОбъектыИнвестирования);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ДетальныеЗаписи = РезультатЗапроса.Выгрузить();
		
		Для каждого Строка Из Объект.ИностранныеИнвестиции Цикл
			Поиск = ДетальныеЗаписи.Найти(Строка.Инвестиция);
			Если Поиск <> Неопределено Тогда 
				Строка.ОснованиеКонтроля = Поиск.ОснованиеКонтроля;
			КонецЕсли;
			Поиск = ДанныеНалоговыхОсвобожденийКИК.НайтиСтроки(Новый Структура("Инвестиция", Строка.Инвестиция));
			Для каждого СтрокаПоиска Из Поиск Цикл
				Строка[СоответствиеКодовИПолей.Получить(СтрокаПоиска.Статья)] = СтрокаПоиска.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ОснованиеУведомленияОбИОПриИзменении(Элемент)
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодписантПриИзменении(Элемент)
	Объект.ПодписантПризнак = Подписант;
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПодписантаПриИзменении(Элемент)
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВИФНСПриИзменении(Элемент)
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФормыПриИзменении(Элемент)
	ЗагрузитьТаблицуФорматов();
	ЗаполнитьТаблицы();
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыУправленияФормой

&НаКлиенте
Процедура ПриИзмененииКлючевогоРеквизита(Элемент)
	Если (СтараяДата <> Объект.Дата ИЛИ СтараяОрганизация <> Объект.Организация) И Объект.ИностранныеИнвестиции.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриИзмененииКлючевогоРеквизитаЗавершение", ЭтотОбъект), "При изменении ключевого реквизита уведомление будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКлючевогоРеквизитаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ИностранныеИнвестиции.Очистить();
		//ЗагрузитьДанные();
		//СформироватьМакетНаСервере();
		СтараяДата = Объект.Дата;
		СтараяОрганизация = Объект.Организация;
	Иначе
		Объект.Дата = СтараяДата;
		Объект.Организация = СтараяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	ЭтоУведомлениеОбИО = Объект.ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО");
	Элементы.ИностранныеИнвестицииДоляВладения.Видимость = ЭтоУведомлениеОбИО;
	Элементы.ОснованиеУведомленияОбИО.Видимость = ЭтоУведомлениеОбИО;
	Элементы.ИностранныеИнвестицииОснованиеКонтроля.Видимость = НЕ ЭтоУведомлениеОбИО;
	Элементы.НалоговыйПериод.Видимость = НЕ ЭтоУведомлениеОбИО;
	ПроверитьНаличиеИС();
	Заголовок = ?(Объект.ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО"), "Уведомление об участии в иностранных организациях", "Уведомление о КИК");
	Если Объект.Ссылка.Пустая() Тогда
		Заголовок = Заголовок + " (создание)";
	КонецЕсли;
	Элементы.ИностранныеИнвестицииКодыОсвоождений.Видимость = Объект.ВидУведомления <> ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО");
	Элементы.ИностранныеИнвестицииГруппаДаты1.Видимость = Объект.ВидУведомления <> ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО");
	Элементы.ИностранныеИнвестицииГруппаДаты2.Видимость = Объект.ВидУведомления <> ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО");
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИС()
	ЕстьИС = Ложь;
	Для каждого Стр Из Объект.ИностранныеИнвестиции Цикл
		Если Стр.Инвестиция.ИностраннаяСтруктураБезОбразованияЮрЛица Тогда
			Стр.ИностраннаяСтруктура = Истина;
			ЕстьИС = Истина;
		КонецЕсли;
	КонецЦикла;
	Элементы.ИностранныеИнвестицииГруппаИностраннаяСтруктура.Видимость = ЕстьИС И (Объект.ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО"));
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияФормы

&НаСервере
Процедура ЗаполнениеСписковПриСозданииНаСервере()
	
	Число18_15 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15, ДопустимыйЗнак.Неотрицательный));
	
	МакетУИО2015 = Отчеты.РегламентированноеУведомлениеУ_ИО.ПолучитьМакет("Форма2015_1");
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО Тогда
		Элементы.ИмяФормы.СписокВыбора.Добавить("Форма2015_1", "Приказ ФНС России от 24.04.2015 № ММВ-7-14/177@");
		Элементы.ИмяФормы.СписокВыбора.Добавить("Форма2019_1", "Приказ ФНС России от 05.07.2019 № ММВ-7-13/338@");
		Если Объект.ИмяФормы = "" Тогда
			Если Объект.Дата < Дата('20190806') Тогда
				Объект.ИмяФормы = "Форма2015_1";
			Иначе
				Объект.ИмяФормы = "Форма2019_1";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
		Элементы.ИмяФормы.СписокВыбора.Добавить("Форма2017_1", "Приказ ФНС России от 13.12.2016 № ММВ-7-13/679@");
		Элементы.ИмяФормы.СписокВыбора.Добавить("Форма2019_1", "Приказ ФНС России от 26.09.2019 № ММВ-7-13/422@");
		Элементы.ИмяФормы.СписокВыбора.Добавить("Форма2021_1", "Приказ ФНС России от 19.07.2021 № ММВ-7-13/671@");
		Если Объект.ИмяФормы = "" Тогда
			Если Объект.НалоговыйПериод >= 2022 Тогда
				Объект.ИмяФормы = "Форма2021_1";
			ИначеЕсли Объект.НалоговыйПериод >= 2019 Тогда
				Объект.ИмяФормы = "Форма2019_1";
			Иначе
				Объект.ИмяФормы = "Форма2017_1";
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
			Объект.НалоговыйПериод = Год(Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	ВидОснованияУведомленияОбУчастии = Новый Соответствие();
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.НачалоУчастия, "1");
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.ИзменениеДолиУчастия, "2");
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.ПрекращениеУчастия, "3");
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.ОснованиеВозниклоДо15052015, "4");
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.ОснованиеВозниклоС15052015По15062015, "5");
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.УточненноеУведомление, "6");
	ВидОснованияУведомленияОбУчастии.Вставить(Перечисления.ОснованияПодачиУведомленийОбИО.ИзменениеПорядкаУчастия, "7");
	ОснованияУведомленияОбУчастии = Новый ФиксированноеСоответствие(ВидОснованияУведомленияОбУчастии);
	
	нСоответствиеКодовИПолей = Новый Соответствие();
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1001, "ОсвобождениеКод1001");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1002, "ОсвобождениеКод1002");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1003, "ОсвобождениеКод1003");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1004, "ОсвобождениеКод1004");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1005, "ОсвобождениеКод1005");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1006, "ОсвобождениеКод1006");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1007, "ОсвобождениеКод1007");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1008, "ОсвобождениеКод1008");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.Код1009, "ОсвобождениеКод1009");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.ДатаФинОтчетности, "ДатаФинОтчетности");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.ДатаПрибыли, "ДатаПрибыли");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.ДатаСоставления, "ДатаСоставления");
	нСоответствиеКодовИПолей.Вставить(Справочники.СтатьиДоходовИРасходовКИК.ДатаАудита, "ДатаАудита");
	СоответствиеКодовИПолей = Новый ФиксированноеСоответствие(нСоответствиеКодовИПолей);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СсылкаНаДанные)
	СтруктураПараметров = СсылкаНаДанные.ДанныеУведомления.Получить();
	ДанныеУведомления = СтруктураПараметров.ДанныеУведомления;
	ДанныеМногостраничныхРазделов = СтруктураПараметров.ДанныеМногостраничныхРазделов;
	ЗначениеВРеквизитФормы(СтруктураПараметров.ДеревоСтраниц, "ДеревоСтраниц");
	СтруктураПараметров.Свойство("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
	
	ДанныеДопСтрокБД = СтруктураПараметров.ДанныеДопСтрокБД;
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрокСтраницы = Новый Структура;
	Для Каждого КЗ Из ДанныеДопСтрокБД Цикл 
		ДанныеДопСтрок.Вставить(КЗ.Ключ, ПоместитьВоВременноеХранилище(КЗ.Значение, Новый УникальныйИдентификатор));
		Стр = Новый Структура;
		Для Каждого Кол Из КЗ.Значение.Колонки Цикл 
			Если Кол.Имя <> "УИД" Тогда 
				Стр.Вставить(Кол.Имя);
			КонецЕсли;
		КонецЦикла;
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(Стр);
		ДанныеДопСтрокСтраницы.Вставить(КЗ.Ключ, СЗ);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДеревьевБРО

&НаСервере
Процедура СформироватьДеревоСтраниц_ИО_Форма2019()
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма2019_1_Титульная";
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		Стр001 = КорневойУровень.Добавить();
		Стр001.Наименование = "Сведения о"+символы.ПС+"физическом лице";
		Стр001.ИндексКартинки = 1;
		Стр001.ИмяМакета = "ЛистСведФЛ";
		Стр001.Многостраничность = Ложь;
		Стр001.Многострочность = Ложь;
		Стр001.УИД = Новый УникальныйИдентификатор;
		Стр001.ИДНаименования = "ЛистСведФЛ";
		Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистСведФЛ";
	КонецЕсли;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"организациях (Лист А)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистА";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистА";
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистА";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения о российских"+символы.ПС+"организациях (Лист Б)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистБ";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистБ";
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистБ";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"структурах (Лист В)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистВ";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистВ";
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистВ";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Раскрытие порядка"+символы.ПС+"косвенного участия (Лист Г)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистГ";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистГ";
	Стр001.МногострочныеЧасти.Добавить("МнгСтр");
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистГ";
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСтраниц_КИК_Форма2017()
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма2017_1_Титульная";
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		Стр001 = КорневойУровень.Добавить();
		Стр001.Наименование = "Сведения о физлице";
		Стр001.ИндексКартинки = 1;
		Стр001.ИмяМакета = "ЛистСведФЛ";
		Стр001.Многостраничность = Ложь;
		Стр001.Многострочность = Ложь;
		Стр001.УИД = Новый УникальныйИдентификатор;
		Стр001.ИДНаименования = "ЛистСведФЛ";
		Стр001.МакетыПФ = "Печать_Форма2017_1_ЛистСведФЛ";
	КонецЕсли;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"организациях (Лист А)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистА";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистА";
	Стр001.МакетыПФ = "Печать_Форма2017_1_ЛистА;Печать_Форма2017_1_ЛистА1";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"структурах (Лист Б)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистБ";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистБ";
	Стр001.МакетыПФ = "Печать_Форма2017_1_ЛистБ;Печать_Форма2017_1_ЛистБ1";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения о финансовой"+символы.ПС+"отчетности (Лист В)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистВ";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистВ";
	Стр001.МакетыПФ = "Печать_Форма2017_1_ЛистВ";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Раскрытие порядка"+символы.ПС+"участия (Лист Г)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистГ";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистГ";
	Стр001.МногострочныеЧасти.Добавить("МнгСтр");
	Стр001.МакетыПФ = "Печать_Форма2017_1_ЛистГ";
	
	СтрГ1 = Стр001.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Сведения о российской"+символы.ПС+"организации (Лист Г1)";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	
	СтрГ1 = СтрГ1.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Стр. 1";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.ИмяМакета = "ЛистГ1";
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	СтрГ1.УИД = Новый УникальныйИдентификатор;
	СтрГ1.ИДНаименования = "ЛистГ1";
	СтрГ1.МакетыПФ = "Печать_Форма2017_1_ЛистГ1";
	
	СтрГ1 = Стр001.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Сведения об иностранной"+символы.ПС+"организации (Лист Г2)";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	
	СтрГ1 = СтрГ1.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Стр. 1";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.ИмяМакета = "ЛистГ2";
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	СтрГ1.УИД = Новый УникальныйИдентификатор;
	СтрГ1.ИДНаименования = "ЛистГ2";
	СтрГ1.МакетыПФ = "Печать_Форма2017_1_ЛистГ2";
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСтраниц_КИК_Форма2019()
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная_2019";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма2019_1_Титульная";
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		Стр001 = КорневойУровень.Добавить();
		Стр001.Наименование = "Сведения о физлице";
		Стр001.ИндексКартинки = 1;
		Стр001.ИмяМакета = "ЛистСведФЛ_2019";
		Стр001.Многостраничность = Ложь;
		Стр001.Многострочность = Ложь;
		Стр001.УИД = Новый УникальныйИдентификатор;
		Стр001.ИДНаименования = "ЛистСведФЛ";
		Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистСведФЛ";
	КонецЕсли;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"организациях (Лист А)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистА_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистА";
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистА;Печать_Форма2019_1_ЛистА1";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"структурах (Лист Б)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистБ_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистБ";
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистБ;Печать_Форма2019_1_ЛистБ1";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения о финансовой"+символы.ПС+"отчетности (Лист В)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистВ_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистВ";
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистВ";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Раскрытие порядка"+символы.ПС+"участия (Лист Г)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистГ_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистГ";
	Стр001.МногострочныеЧасти.Добавить("МнгСтр");
	Стр001.МакетыПФ = "Печать_Форма2019_1_ЛистГ";
	
	СтрГ1 = Стр001.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Сведения о российской"+символы.ПС+"организации (Лист Г1)";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	
	СтрГ1 = СтрГ1.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Стр. 1";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.ИмяМакета = "ЛистГ1_2019";
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	СтрГ1.УИД = Новый УникальныйИдентификатор;
	СтрГ1.ИДНаименования = "ЛистГ1";
	СтрГ1.МакетыПФ = "Печать_Форма2019_1_ЛистГ1";
	
	СтрГ1 = Стр001.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Сведения об иностранной"+символы.ПС+"организации (Лист Г2)";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	
	СтрГ1 = СтрГ1.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Стр. 1";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.ИмяМакета = "ЛистГ2_2019";
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	СтрГ1.УИД = Новый УникальныйИдентификатор;
	СтрГ1.ИДНаименования = "ЛистГ2";
	СтрГ1.МакетыПФ = "Печать_Форма2019_1_ЛистГ2";
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСтраниц_КИК_Форма2021() Экспорт
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная_2021";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма2021_1_Титульная";
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		Стр001 = КорневойУровень.Добавить();
		Стр001.Наименование = "Сведения о физлице";
		Стр001.ИндексКартинки = 1;
		Стр001.ИмяМакета = "ЛистСведФЛ_2019";
		Стр001.Многостраничность = Ложь;
		Стр001.Многострочность = Ложь;
		Стр001.УИД = Новый УникальныйИдентификатор;
		Стр001.ИДНаименования = "ЛистСведФЛ";
		Стр001.МакетыПФ = "Печать_Форма2021_1_ЛистСведФЛ";
	КонецЕсли;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"организациях (Лист А)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистА_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистА";
	Стр001.МакетыПФ = "Печать_Форма2021_1_ЛистА;Печать_Форма2021_1_ЛистА1";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"структурах (Лист Б)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистБ_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистБ";
	Стр001.МакетыПФ = "Печать_Форма2021_1_ЛистБ;Печать_Форма2021_1_ЛистБ1";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения о финансовой"+символы.ПС+"отчетности (Лист В)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистВ_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистВ";
	Стр001.МакетыПФ = "Печать_Форма2021_1_ЛистВ";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Раскрытие порядка"+символы.ПС+"участия (Лист Г)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	
	Стр001 = Стр001.ПолучитьЭлементы().Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "ЛистГ_2019";
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "ЛистГ";
	Стр001.МногострочныеЧасти.Добавить("МнгСтр");
	Стр001.МакетыПФ = "Печать_Форма2021_1_ЛистГ";
	
	СтрГ1 = Стр001.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Сведения о российской"+символы.ПС+"организации (Лист Г1)";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	
	СтрГ1 = СтрГ1.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Стр. 1";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.ИмяМакета = "ЛистГ1_2019";
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	СтрГ1.УИД = Новый УникальныйИдентификатор;
	СтрГ1.ИДНаименования = "ЛистГ1";
	СтрГ1.МакетыПФ = "Печать_Форма2021_1_ЛистГ1";
	
	СтрГ1 = Стр001.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Сведения об иностранной"+символы.ПС+"организации (Лист Г2)";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	
	СтрГ1 = СтрГ1.ПолучитьЭлементы().Добавить();
	СтрГ1.Наименование = "Стр. 1";
	СтрГ1.ИндексКартинки = 1;
	СтрГ1.ИмяМакета = "ЛистГ2_2021";
	СтрГ1.Многостраничность = Истина;
	СтрГ1.Многострочность = Ложь;
	СтрГ1.УИД = Новый УникальныйИдентификатор;
	СтрГ1.ИДНаименования = "ЛистГ2";
	СтрГ1.МакетыПФ = "Печать_Форма2021_1_ЛистГ2";
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтраниц_КИК()
	
	Если Объект.ИмяФормы = "Форма2017_1" Тогда
		ГодПФ = "2017_1";
		ГодЛистаТ = "";
		ГодЛиста = "";
		ГодЛистаГ2 = "";
	ИначеЕсли Объект.ИмяФормы = "Форма2019_1" Тогда
		ГодПФ = "2019_1";
		ГодЛистаТ = "_2019";
		ГодЛиста = "_2019";
		ГодЛистаГ2 = "_2019";
	ИначеЕсли Объект.ИмяФормы = "Форма2021_1" Тогда
		ГодПФ = "2021_1";
		ГодЛистаТ = "_2021";
		ГодЛиста = "_2019";
		ГодЛистаГ2 = "_2021";
	Иначе
		ВызватьИсключение "Ошибка нумерации уведомления";
	КонецЕсли;
		
		
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная" + ГодЛистаТ;
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма" + ГодПФ + "_Титульная";
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		Стр001 = КорневойУровень.Добавить();
		Стр001.Наименование = "Сведения о физлице";
		Стр001.ИндексКартинки = 1;
		Стр001.ИмяМакета = "ЛистСведФЛ" + ГодЛиста;
		Стр001.Многостраничность = Ложь;
		Стр001.Многострочность = Ложь;
		Стр001.УИД = Новый УникальныйИдентификатор;
		Стр001.ИДНаименования = "ЛистСведФЛ";
		Стр001.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистСведФЛ";
	КонецЕсли;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"организациях (Лист А)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
		
	Для каждого Лист Из ЭтаФорма.ДанныеМногостраничныхРазделов.ЛистА Цикл
		Стр002 = Стр001.ПолучитьЭлементы().Добавить();
		Стр002.Наименование = "Стр. 1";
		Стр002.ИндексКартинки = 1;
		Стр002.ИмяМакета = "ЛистА" + ГодЛиста;
		Стр002.Многостраничность = Истина;
		Стр002.Многострочность = Ложь;
		Стр002.УИД = Лист.Значение.УИД;
		Стр002.ИДНаименования = "ЛистА";
		Стр002.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистА;Печать_Форма" + ГодПФ + "_ЛистА1";
	КонецЦикла;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения об иностранных"+символы.ПС+"структурах (Лист Б)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Для каждого Лист Из ЭтаФорма.ДанныеМногостраничныхРазделов.ЛистБ Цикл
		Стр002 = Стр001.ПолучитьЭлементы().Добавить();
		Стр002.Наименование = "Стр. 1";
		Стр002.ИндексКартинки = 1;
		Стр002.ИмяМакета = "ЛистБ" + ГодЛиста;
		Стр002.Многостраничность = Истина;
		Стр002.Многострочность = Ложь;
		Стр002.УИД = Лист.Значение.УИД;
		Стр002.ИДНаименования = "ЛистБ";
		Стр002.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистБ;Печать_Форма" + ГодПФ + "_ЛистБ1";
	КонецЦикла;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Сведения о финансовой"+символы.ПС+"отчетности (Лист В)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Ложь;
	
	Для каждого Лист Из ЭтаФорма.ДанныеМногостраничныхРазделов.ЛистВ Цикл
		Стр002 = Стр001.ПолучитьЭлементы().Добавить();
		Стр002.Наименование = "Стр. 1";
		Стр002.ИндексКартинки = 1;
		Стр002.ИмяМакета = "ЛистВ" + ГодЛиста;
		Стр002.Многостраничность = Истина;
		Стр002.Многострочность = Ложь;
		Стр002.УИД = Лист.Значение.УИД;
		Стр002.ИДНаименования = "ЛистВ";
		Стр002.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистВ";
	КонецЦикла;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Раскрытие порядка"+символы.ПС+"участия (Лист Г)";
	Стр001.ИндексКартинки = 1;
	Стр001.Многостраничность = Истина;
	Стр001.Многострочность = Истина;
	
	Для каждого Лист Из ЭтаФорма.ДанныеМногостраничныхРазделов.ЛистГ Цикл
		Стр002 = Стр001.ПолучитьЭлементы().Добавить();
		Стр002.Наименование = "Лист Г1. " + Лист.Значение.НаимОрг;
		Стр002.ИндексКартинки = 1;
		Стр002.ИмяМакета = "ЛистГ" + ГодЛиста;
		Стр002.Многостраничность = Истина;
		Стр002.Многострочность = Истина;
		Стр002.УИД = Лист.Значение.УИД;
		Стр002.ИДНаименования = "ЛистГ";
		Стр002.МногострочныеЧасти.Добавить("МнгСтр");
		Стр002.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистГ";
		
		СтрГ1 = Стр002.ПолучитьЭлементы().Добавить();
		СтрГ1.Наименование = "Сведения о российской"+символы.ПС+"организации (Лист Г1)";
		СтрГ1.ИндексКартинки = 1;
		СтрГ1.Многостраничность = Истина;
		СтрГ1.Многострочность = Ложь;
		
		КолличествоВДереве = 0;
		Для каждого Лист1 Из ЭтаФорма.ДанныеМногостраничныхРазделов.ЛистГ1 Цикл
			Если Лист1.Значение.УИДРодителя <> Лист.Значение.УИД Тогда
				Продолжить;
			КонецЕсли;
			СтрГ01 = СтрГ1.ПолучитьЭлементы().Добавить();
			СтрГ01.Наименование = "Лист Г1. " + Лист1.Значение.НаимОрг;
			СтрГ01.ИндексКартинки = 1;
			СтрГ01.ИмяМакета = "ЛистГ1" + ГодЛиста;
			СтрГ01.Многостраничность = Истина;
			СтрГ01.Многострочность = Ложь;
			СтрГ01.УИД = Лист1.Значение.УИД;
			СтрГ01.ИДНаименования = "ЛистГ1";
			СтрГ01.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистГ1";
			КолличествоВДереве = КолличествоВДереве + 1;
		КонецЦикла;
		Если КолличествоВДереве = 0 Тогда
			СтрГ01 = СтрГ1.ПолучитьЭлементы().Добавить();
			СтрГ01.Наименование = "Лист Г1.";
			СтрГ01.ИндексКартинки = 1;
			СтрГ01.ИмяМакета = "ЛистГ1" + ГодЛиста;
			СтрГ01.Многостраничность = Истина;
			СтрГ01.Многострочность = Ложь;
			СтрГ01.УИД = Новый УникальныйИдентификатор;
			СтрГ01.ИДНаименования = "ЛистГ1";
			СтрГ01.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистГ1";
		КонецЕсли;
		
		СтрГ1 = Стр002.ПолучитьЭлементы().Добавить();
		СтрГ1.Наименование = "Сведения об иностранной"+символы.ПС+"организации (Лист Г2)";
		СтрГ1.ИндексКартинки = 1;
		СтрГ1.Многостраничность = Истина;
		СтрГ1.Многострочность = Ложь;
		
		Для каждого Лист1 Из ЭтаФорма.ДанныеМногостраничныхРазделов.ЛистГ2 Цикл
			Если Лист1.Значение.УИДРодителя <> Лист.Значение.УИД Тогда
				Продолжить;
			КонецЕсли;
			СтрГ01 = СтрГ1.ПолучитьЭлементы().Добавить();
			СтрГ01.Наименование = "Лист Г2. " + Лист1.Значение.НаимОргЛат;
			СтрГ01.ИндексКартинки = 1;
			СтрГ01.ИмяМакета = "ЛистГ2" + ГодЛистаГ2;
			СтрГ01.Многостраничность = Истина;
			СтрГ01.Многострочность = Ложь;
			СтрГ01.УИД = Лист1.Значение.УИД;
			СтрГ01.ИДНаименования = "ЛистГ2";
			СтрГ01.МакетыПФ = "Печать_Форма" + ГодПФ + "_ЛистГ2";
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область АлгоритмЗаполнения

&НаСервере
Функция ПолучитьЦепочкиИзБазы()
	Цепочки = Новый ТаблицаЗначений;
	Цепочки.Колонки.Добавить("ОбъектИнвестирования", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Цепочки.Колонки.Добавить("ОбъектИнвестированияПоследовательности", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Цепочки.Колонки.Добавить("ИнвесторПоследовательности", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Цепочки.Колонки.Добавить("НомерПоследовательностиУчастия", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	Цепочки.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	Цепочки.Колонки.Добавить("ПрямаяДоля", ОбщегоНазначения.ОписаниеТипаЧисло(18,15));
	Цепочки.Колонки.Добавить("ЭффективнаяДоля", ОбщегоНазначения.ОписаниеТипаЧисло(18,15));
	ИностранныеИнвестиции = Объект.ИностранныеИнвестиции.Выгрузить();
	
	ТаблицаПоследовательностиВладения = РасчетДолейВладения.ПолучитьПоследовательностиНаДату(Сценарий, КонецДня(Объект.Дата), Объект.Организация);
	Для каждого Стр Из ТаблицаПоследовательностиВладения Цикл
		Если ИностранныеИнвестиции.Найти(Стр.ОбъектИнвестирования) <> Неопределено Тогда
			НоваяСтрока = Цепочки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЕсли;
	КонецЦикла;
	Возврат Цепочки;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицы()
	
	Цепочки = ПолучитьЦепочкиИзБазы();
	
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО И Объект.ИмяФормы = "Форма2015_1" Тогда
		ЛокДанныеУведомления = Новый Структура("ТитульнаяСтраница, СведФЛ, СведРО, СведИО, СведУч, СведИС, СведИСУч, МногострочнаяЧасть, Автонумерация",
									ТитульнаяСтраница.Выгрузить(), Объект.СведФЛ.Выгрузить(), Объект.СведРО.Выгрузить(), Объект.СведИО.Выгрузить(), Объект.СведУч.Выгрузить(), Объект.СведИС.Выгрузить(), Объект.СведИСУч.Выгрузить(), Объект.МногострочнаяЧасть.Выгрузить(),);
									
		СлужебныеДанныеУведомления = Новый Структура;
		СлужебныеДанныеУведомления.Вставить("Цепочки", Цепочки);
		СлужебныеДанныеУведомления.Вставить("ИностранныеИнвестиции", Объект.ИностранныеИнвестиции.Выгрузить());
		СлужебныеДанныеУведомления.Вставить("НомерКорректировки", Объект.НомерКорректировки);
		СлужебныеДанныеУведомления.Вставить("НалоговыйПериод", Объект.НалоговыйПериод);
		СлужебныеДанныеУведомления.Вставить("Признак", Объект.ПодписантПризнак);
		СлужебныеДанныеУведомления.Вставить("ОснованиеУведомленияОбИО", Объект.ОснованиеУведомленияОбИО);
		
		НумерацияПоследовательностей = РасчетыПоКорпоративнымНалогам.ЗаполнитьВыходныеФормыУведомленияОбИК(ЛокДанныеУведомления, СлужебныеДанныеУведомления, Объект.Организация, Новый Структура("ФИО, Телефон, ДатаПодписи, Представитель"), Объект.Дата, Сценарий);
		Объект.СведФЛ.Загрузить(ЛокДанныеУведомления.СведФЛ);
		Объект.СведИО.Загрузить(ЛокДанныеУведомления.СведИО);
		Объект.СведИС.Загрузить(ЛокДанныеУведомления.СведИС);
		Объект.СведИСУч.Загрузить(ЛокДанныеУведомления.СведИСУч);
		Объект.СведРО.Загрузить(ЛокДанныеУведомления.СведРО);
		Объект.СведУч.Загрузить(ЛокДанныеУведомления.СведУч);
		Объект.МногострочнаяЧасть.Загрузить(ЛокДанныеУведомления.МногострочнаяЧасть);
		РасчетыПоКорпоративнымНалогам.ОбновитьНумерациюПоследовательностей(НумерацияПоследовательностей, Объект.Организация);
	ИначеЕсли Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО И Объект.ИмяФормы = "Форма2019_1" Тогда
		СформироватьДеревоСтраниц_ИО_Форма2019();
		СтруктураФормы = Новый Структура("ДанныеУведомления, ДанныеМногостраничныхРазделов, ДанныеДопСтрок, ИдентификаторыОбычныхСтраниц, ДанныеДопСтрокСтраницы");
		СтруктураФормы.Вставить("ИмяФормы", "Отчеты.РегламентированноеУведомлениеУ_ИО");
		СтруктураФормы.Вставить("ДеревоСтраниц", ДеревоСтраниц);
		
		ИмяМакетаАрхиваТабличныхДокументов = "ЭкранныеФормы";
		СтруктураФормы.Вставить("Объект", Новый Структура("ИмяОтчета, ИмяФормы", Объект.ИмяОтчета, Объект.ИмяФормы));
		СтруктураФормы.Вставить("ИмяМакетаАрхиваТабличныхДокументов", ИмяМакетаАрхиваТабличныхДокументов);
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(СтруктураФормы);
		СтруктураФормы.Удалить("Объект");
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураФормы, , "ИмяФормы, ДеревоСтраниц");
		ЗначениеВРеквизитФормы(ДанныеФормыВЗначение(СтруктураФормы.ДеревоСтраниц, Тип("ДеревоЗначений")), "ДеревоСтраниц");
		СоответствиеИмен = ЗаполнитьСоответствиеИО();
		ЗаполнитьФормуУведомления(Цепочки, СоответствиеИмен, Ложь, "НомерИОЧисло", "ЛистА, ЛистБ, ЛистВ, ЛистГ");
		
		ЗаполнитьТитульнуюСтраницу();
		Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
			ЗаполнитьТитульнуюСтраницуФизлица();
		КонецЕсли;
	ИначеЕсли Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
		Выполнить("СформироватьДеревоСтраниц_КИК_Форма" + Сред(Объект.ИмяФормы, 6, 4) + "();");
		
		СтруктураФормы = Новый Структура("ДанныеУведомления, ДанныеМногостраничныхРазделов, ДанныеДопСтрок, ИдентификаторыОбычныхСтраниц, ДанныеДопСтрокСтраницы");
		СтруктураФормы.Вставить("ИмяФормы", "Отчеты.РегламентированноеУведомлениеКИК");
		СтруктураФормы.Вставить("ДеревоСтраниц", ДеревоСтраниц);
		
		ИмяМакетаАрхиваТабличныхДокументов = "ЭкранныеФормы";
		СтруктураФормы.Вставить("Объект", Новый Структура("ИмяОтчета, ИмяФормы", Объект.ИмяОтчета, Объект.ИмяФормы));
		СтруктураФормы.Вставить("ИмяМакетаАрхиваТабличныхДокументов", ИмяМакетаАрхиваТабличныхДокументов);
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(СтруктураФормы);
		СтруктураФормы.Удалить("Объект");
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураФормы, , "ИмяФормы, ДеревоСтраниц");
		ЗначениеВРеквизитФормы(ДанныеФормыВЗначение(СтруктураФормы.ДеревоСтраниц, Тип("ДеревоЗначений")), "ДеревоСтраниц");
		СоответствиеИмен = ЗаполнитьСоответствиеКИК();
		ЗаполнитьФормуУведомления(Цепочки, СоответствиеИмен, Истина, "НомерКИК", "ЛистА, ЛистБ, ЛистВ, ЛистГ, ЛистГ1, ЛистГ2");
		
		ЗаполнитьТитульнуюСтраницу();
		Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
			ЗаполнитьТитульнуюСтраницуФизлица();
		КонецЕсли;
	КонецЕсли;

	СформироватьМакетНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДобавитьНомерВПоследовательность(НумерацияПоследовательностей, Префикс, Инвестиция)
	Строка = НумерацияПоследовательностей.Найти(Инвестиция);
	Если Строка <> Неопределено Тогда
		Префикс = Строка.Префикс;
		Возврат Строка.НомерУчастника;
	КонецЕсли;
	НумерацияПоследовательностей.Сортировать("НомерУчастника УБЫВ");
	Для каждого Стр Из НумерацияПоследовательностей Цикл
		Если Стр.Префикс = Префикс Тогда
			НовСтрока = НумерацияПоследовательностей.Добавить();
			НовСтрока.Инвестиция = Инвестиция;
			НовСтрока.Префикс = Префикс;
			НовСтрока.НомерУчастника = Стр.НомерУчастника + 1;
			Возврат НовСтрока.НомерУчастника;
		КонецЕсли;
	КонецЦикла;
	НовСтрока = НумерацияПоследовательностей.Добавить();
	НовСтрока.Инвестиция = Инвестиция;
	НовСтрока.Префикс = Префикс;
	НовСтрока.НомерУчастника = 1;
	Возврат 1;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВидУчастия(Цепочки, Инвестиция, Организация)
	Отбор = Цепочки.Скопировать(Новый Структура("ОбъектИнвестирования", Инвестиция));
	ЕстьПрямое = Ложь;
	ЕстьКосвенное = Ложь;
	Для каждого Строка Из Отбор Цикл
		Если Строка.ИнвесторПоследовательности = Организация И Строка.ОбъектИнвестированияПоследовательности = Инвестиция Тогда
			ЕстьПрямое = Истина;
		Иначе
			ЕстьКосвенное = Истина;
		КонецЕсли;
		Если ЕстьПрямое И ЕстьКосвенное Тогда
			Возврат 3;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПрямое Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьТитульнуюСтраницу()
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИНН, КПП, ЮридическоеФизическоеЛицо, НаименованиеПолное, ИндивидуальныйПредприниматель");
	ДанныеУведомления.Титульная.ИНН = РеквизитыОрганизации.ИНН;
	ДанныеУведомления.Титульная.КПП = РеквизитыОрганизации.КПП;
	ДанныеУведомления.Титульная.КодНО = Объект.РегистрацияВИФНС.Код;
	ДанныеУведомления.Титульная.Наименование = РеквизитыОрганизации.НаименованиеПолное;
	ЮрЛицо = НЕ (РеквизитыОрганизации.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	ДанныеУведомления.Титульная.ПрНП = ?(ЮрЛицо, "1", "2");
	ДанныеУведомления.Титульная.НомерКорректировки = Объект.НомерКорректировки;
	Если НЕ ЮрЛицо Тогда
		ДанныеУведомления.Титульная.Наименование = Строка(РеквизитыОрганизации.ИндивидуальныйПредприниматель);
	КонецЕсли;
	ДанныеУведомления.Титульная.ДАТА_ПОДПИСИ = Объект.ДатаПодписи;
	ДанныеУведомления.Титульная.НаимДок = Объект.ПодписантДокумент;
	Если ДанныеУведомления.Титульная.Свойство("НалПер") Тогда
		ДанныеУведомления.Титульная.НалПер = Формат(Объект.НалоговыйПериод, "ЧГ=");
	КонецЕсли;
	//Если ДанныеУведомления.Титульная.Свойство("ФормРеорг") Тогда
	//	ДанныеУведомления.Титульная.ФормРеорг = 1;
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОснованиеУведомленияОбИО) Тогда
		ДанныеУведомления.Титульная.ОснУвед = ОснованияУведомленияОбУчастии.Получить(Объект.ОснованиеУведомленияОбИО);
	КонецЕсли;
	ДанныеУведомления.Титульная.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество;
	ДанныеУведомления.Титульная.ПРИЗНАК_НП_ПОДВАЛ = ?(ЮрЛицо, ?(Подписант = 0, "3", "4"), ?(Подписант = 0, "1", "2"));
	ДанныеУведомления.Титульная.Тлф = Объект.ПодписантТелефон;
	Если ЗначениеЗаполнено(Объект.Подписант) Тогда
		ДанныеУведомления.Титульная.ИННФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подписант, "ИНН");
		ДанныеУведомления.Титульная.ЭлАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Подписант, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, , Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитульнуюСтраницуФизлица()
	ДанныеУведомления.ЛистСведФЛ.ПрГражд = "1";
	РеквизитыФизлица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель, ИндивидуальныйПредприниматель.Фамилия, ИндивидуальныйПредприниматель.Имя, ИндивидуальныйПредприниматель.Отчество, ИндивидуальныйПредприниматель.МестоРождения, ИндивидуальныйПредприниматель.ДатаРождения");
	Если ДанныеУведомления.ЛистСведФЛ.Свойство("Фамилия") Тогда
		ДанныеУведомления.ЛистСведФЛ.Фамилия = РеквизитыФизлица.ИндивидуальныйПредпринимательФамилия;
		ДанныеУведомления.ЛистСведФЛ.Имя = РеквизитыФизлица.ИндивидуальныйПредпринимательИмя;
		ДанныеУведомления.ЛистСведФЛ.Отчество = РеквизитыФизлица.ИндивидуальныйПредпринимательОтчество;
	КонецЕсли;
	ДанныеУведомления.ЛистСведФЛ.ДатаРождДата = РеквизитыФизлица.ИндивидуальныйПредпринимательДатаРождения;
	ДанныеУведомления.ЛистСведФЛ.МестоРожд = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(РеквизитыФизлица.ИндивидуальныйПредпринимательМестоРождения);
	РеквизитыДокументаФизлица = ПолучитьУдостоверениеЛичностиФизЛица(РеквизитыФизлица.ИндивидуальныйПредприниматель, Объект.Дата);
	Если РеквизитыДокументаФизлица <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеУведомления.ЛистСведФЛ, РеквизитыДокументаФизлица);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСоответствиеИО()
	Результат = Новый Соответствие;
	ПолеСоответствияИО = Новый Структура;
	ПолеСоответствияИО.Вставить("Имя", "ЛистА");
	ПолеСоответствияИО.Вставить("ИмяОбласти", "НомерКонтрЛицЧисло");
	Результат.Вставить("ИО", ПолеСоответствияИО);
	ПолеСоответствияРО = Новый Структура;
	ПолеСоответствияРО.Вставить("Имя", "ЛистБ");
	ПолеСоответствияРО.Вставить("ИмяОбласти", "НомерРосОргЧисло");
	Результат.Вставить("РО", ПолеСоответствияРО);
	ПолеСоответствияИС = Новый Структура;
	ПолеСоответствияИС.Вставить("Имя", "ЛистВ");
	ПолеСоответствияИС.Вставить("ИмяОбласти", "НомерИСЧисло");
	Результат.Вставить("ИС", ПолеСоответствияИС);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСоответствиеКИК()
	Результат = Новый Соответствие;
	ПолеСоответствияИО = Новый Структура;
	ПолеСоответствияИО.Вставить("Имя", "ЛистА");
	ПолеСоответствияИО.Вставить("ИмяОбласти", "НомерКИКЧисло");
	Результат.Вставить("ИО", ПолеСоответствияИО);
	ПолеСоответствияИС = Новый Структура;
	ПолеСоответствияИС.Вставить("Имя", "ЛистБ");
	ПолеСоответствияИС.Вставить("ИмяОбласти", "НомерКИКЧисло");
	Результат.Вставить("ИС", ПолеСоответствияИС);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьФормуУведомления(Цепочки, СоответствиеИмен, ЭтоУведомлениеКИК, ИмяОбластиНомерЛистГ, ПереченьЛистов)

	ВидУчастия = 0;
	Если ЭтоУведомлениеКИК Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Период = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(Дата(Объект.НалоговыйПериод, 1, 1), Перечисления.Периодичность.Год);
		КэшПоказателейОтчетов = Новый ТаблицаЗначений;
		КэшПоказателейОтчетов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КэшПоказателейОтчетов.Колонки.Добавить("Аналитика1", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КэшПоказателейОтчетов.Колонки.Добавить("ИмяПоказателя");
		КэшПоказателейОтчетов.Колонки.Добавить("Значение");
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьРезультатЗапросаУведомления(Цепочки);
	
	НумерацияПоследовательностей = РезультатЗапроса[5].Выгрузить();
	КоличествоЗаписейНумерации = НумерацияПоследовательностей.Количество();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[3].Выбрать();
	
	ДатыПоследовательностей = РезультатЗапроса[13].Выгрузить();//ОпределениеДатыНачалаИОкончанияВладения(Объект.Организация, КонецДня(Объект.Дата), Сценарий);
	
	МассивЛистов = СтрРазделить(СтрЗаменить(ПереченьЛистов, " ", ""), ",");
	НеЗаполненныеРазделы = Новый Структура;
	Для каждого ЭлементМассива Из МассивЛистов Цикл
		НеЗаполненныеРазделы.Вставить(ЭлементМассива, Истина);
	КонецЦикла;
	РазделНеЗаполнен = Ложь;
	МассивИнвестиций = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ИностранныйНалоговыйРезидент И НЕ ВыборкаДетальныеЗаписи.ИностраннаяСтруктураБезОбразованияЮрЛица Тогда // Лист А
			Префикс = "ИО";
		ИначеЕсли НЕ ВыборкаДетальныеЗаписи.ИностранныйНалоговыйРезидент Тогда // Лист Б
			Префикс = "РО";
		Иначе
			Префикс = "ИС";
		КонецЕсли;
		СтруктураИмен = СоответствиеИмен.Получить(Префикс);
		Если СтруктураИмен = Неопределено Тогда
			Продолжить;
		Иначе
			Имя = СтруктураИмен.Имя;
			ИмяОбласти = СтруктураИмен.ИмяОбласти;
		КонецЕсли;
		НомерВПоследовательности = НайтиДобавитьНомерВПоследовательность(НумерацияПоследовательностей, Префикс, ВыборкаДетальныеЗаписи.Инвестиция);
		//
		Если Объект.ИностранныеИнвестиции.НайтиСтроки(Новый Структура("Инвестиция", ВыборкаДетальныеЗаписи.Инвестиция)).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Префикс = "ИО" Тогда
			ВидУчастия = ОпределитьВидУчастия(Цепочки, ВыборкаДетальныеЗаписи.Инвестиция, Объект.Организация);
			МассивИнвестиций.Добавить(ВыборкаДетальныеЗаписи.Инвестиция);
		КонецЕсли;
		НеЗаполненныеРазделы.Свойство(Имя, РазделНеЗаполнен);
		ДанныеТекущегоРаздела = ДанныеМногостраничныхРазделов[Имя][ДанныеМногостраничныхРазделов[Имя].Количество() - 1].Значение;
		УИДТекущаяСтраница = ДанныеТекущегоРаздела.УИД;
		Если НЕ РазделНеЗаполнен Тогда
			НоваяСтруктураРаздела = ДобавитьНовуюСтраницу(ВыборкаДетальныеЗаписи, ДанныеТекущегоРаздела);
			ЗаполнитьЗначенияСвойств(НоваяСтруктураРаздела, ВыборкаДетальныеЗаписи);
			ДозаполнитьДаты(НоваяСтруктураРаздела, ИмяОбласти, НомерВПоследовательности, ВидУчастия, Объект.ОснованиеУведомленияОбИО, ДатыПоследовательностей, ВыборкаДетальныеЗаписи);
			ДанныеМногостраничныхРазделов[Имя].Добавить(НоваяСтруктураРаздела);
		Иначе
			ЗаполнитьЗначенияСвойств(ДанныеТекущегоРаздела, ВыборкаДетальныеЗаписи);
			ДозаполнитьДаты(ДанныеТекущегоРаздела, ИмяОбласти, НомерВПоследовательности, ВидУчастия, Объект.ОснованиеУведомленияОбИО, ДатыПоследовательностей, ВыборкаДетальныеЗаписи);
			НеЗаполненныеРазделы.Вставить(Имя, Ложь);
		КонецЕсли;
		Если ЭтоУведомлениеКИК Тогда
			Имя = "ЛистВ";
			ИмяОбласти = "НомерКИК";
			НеЗаполненныеРазделы.Свойство(Имя, РазделНеЗаполнен);
			ДанныеТекущегоРаздела = ДанныеМногостраничныхРазделов[Имя][ДанныеМногостраничныхРазделов[Имя].Количество() - 1].Значение;
			УИДТекущаяСтраница = ДанныеТекущегоРаздела.УИД;
			Если НЕ РазделНеЗаполнен Тогда
				НоваяСтруктураРаздела = ДобавитьНовуюСтраницу(ВыборкаДетальныеЗаписи, ДанныеТекущегоРаздела);
				НоваяСтруктураРаздела[ИмяОбласти] = Префикс + "-" + Формат(НомерВПоследовательности, "ЧЦ=5; ЧВН=; ЧГ=");
				ЗаполнитьСтрокуОтчКИК(НоваяСтруктураРаздела, ВыборкаДетальныеЗаписи, Валюта, Период, КэшПоказателейОтчетов, Префикс, НомерВПоследовательности);
				ДанныеМногостраничныхРазделов[Имя].Добавить(НоваяСтруктураРаздела);
			Иначе
				ЗаполнитьЗначенияСвойств(ДанныеТекущегоРаздела, ВыборкаДетальныеЗаписи);
				ДанныеТекущегоРаздела[ИмяОбласти] = Префикс + "-" + Формат(НомерВПоследовательности, "ЧЦ=5; ЧВН=; ЧГ=");
				ЗаполнитьСтрокуОтчКИК(ДанныеТекущегоРаздела, ВыборкаДетальныеЗаписи, Валюта, Период, КэшПоказателейОтчетов, Префикс, НомерВПоследовательности);
				НеЗаполненныеРазделы.Вставить(Имя, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВыборкаИнвестиция = РезультатЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИмяОбласти = ИмяОбластиНомерЛистГ;
	ТабМногострочная = ПолучитьИзВременногоХранилища(ДанныеДопСтрок.МнгСтр); 		//
	Префикс = "";
	Пока ВыборкаИнвестиция.Следующий() Цикл
		ВыборкаПоследовательность = ВыборкаИнвестиция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		НомерВПоследовательности = НайтиДобавитьНомерВПоследовательность(НумерацияПоследовательностей, Префикс, ВыборкаИнвестиция.ОбъектИнвестирования);
		Пока ВыборкаПоследовательность.Следующий() Цикл
			Если ЭтоУведомлениеКИК И ВыборкаПоследовательность.ДоляУчКосв = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НеЗаполненныеРазделы.Свойство("ЛистГ", РазделНеЗаполнен);
			
			ДанныеТекущегоРаздела = ДанныеМногостраничныхРазделов["ЛистГ"][ДанныеМногостраничныхРазделов["ЛистГ"].Количество() - 1].Значение;
			УИДТекущаяСтраница = ДанныеТекущегоРаздела.УИД;
			
			ЗаголовокОрганизацииГ = "";
			ИмяПоляОрганизацииГ = ?(ЭтоУведомлениеКИК, "НаимОрг", "НаимОргЛат");
			ВыборкаДетальныеЗаписи = ВыборкаПоследовательность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаголовокОрганизацииГ = ВыборкаДетальныеЗаписи.НаимОргЛат;
			КонецЦикла;
			
			Если НЕ РазделНеЗаполнен Тогда
				НоваяСтруктураРаздела = ДобавитьНовуюСтраницу(ВыборкаПоследовательность, ДанныеТекущегоРаздела);
				НоваяСтруктураРаздела[ИмяОбласти] = ?(ЭтоУведомлениеКИК, Префикс + "-" + Формат(НомерВПоследовательности, "ЧЦ=5; ЧВН=; ЧГ="), НомерВПоследовательности);
				Если НоваяСтруктураРаздела.Свойство("Участие") Тогда
					НоваяСтруктураРаздела.Участие = Формат(ВидУчастия, "ЧГ=");
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтруктураРаздела, ВыборкаПоследовательность);
				НоваяСтруктураРаздела.ДоляУчКосвИт = ВыборкаИнвестиция.ДоляУчКосв;
				НоваяСтруктураРаздела.ДоляКосвПослИт = ВыборкаПоследовательность.ДоляУчКосв;
				НоваяСтруктураРаздела[ИмяПоляОрганизацииГ] = ЗаголовокОрганизацииГ;
				ДанныеМногостраничныхРазделов["ЛистГ"].Добавить(НоваяСтруктураРаздела);
			Иначе
				ЗаполнитьЗначенияСвойств(ДанныеТекущегоРаздела, ВыборкаПоследовательность);
				ДанныеТекущегоРаздела[ИмяОбласти] = ?(ЭтоУведомлениеКИК, Префикс + "-" + Формат(НомерВПоследовательности, "ЧЦ=5; ЧВН=; ЧГ="), НомерВПоследовательности);
				ДанныеТекущегоРаздела[ИмяПоляОрганизацииГ] = ЗаголовокОрганизацииГ;
				НеЗаполненныеРазделы.Вставить("ЛистГ", Ложь);
				ДанныеТекущегоРаздела.ДоляУчКосвИт = ВыборкаИнвестиция.ДоляУчКосв;
				ДанныеТекущегоРаздела.ДоляКосвПослИт = ВыборкаПоследовательность.ДоляУчКосв;
			КонецЕсли;
			ЛокальныйУИД = УИДТекущаяСтраница;
			ВыборкаДетальныеЗаписи = ВыборкаПоследовательность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			МассивПовторов = Новый Массив;
			МассивПовторов.Добавить(ВыборкаПоследовательность.ОбъектИнвестирования);
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НовСтрока = ТабМногострочная.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаДетальныеЗаписи);
				НовСтрока.УИД = ЛокальныйУИД;
				НомерВПоследовательности = НайтиДобавитьНомерВПоследовательность(НумерацияПоследовательностей, Префикс, ВыборкаДетальныеЗаписи.ОбъектИнвестированияПоследовательности);
				НовСтрока.НомерУч = Префикс + "-" + Формат(НомерВПоследовательности, "ЧЦ=5; ЧВН=; ЧГ=");
				Если ЭтоУведомлениеКИК И МассивПовторов.Найти(ВыборкаДетальныеЗаписи.ОбъектИнвестированияПоследовательности) = Неопределено И МассивИнвестиций.Найти(ВыборкаДетальныеЗаписи.ОбъектИнвестированияПоследовательности) = Неопределено Тогда
					ЗаполнитьЛистыГ12(Префикс, ЛокальныйУИД, РазделНеЗаполнен, ВыборкаДетальныеЗаписи, НеЗаполненныеРазделы, НовСтрока, НомерВПоследовательности, НовСтрока.НомерУч);
					МассивПовторов.Добавить(ВыборкаДетальныеЗаписи.ОбъектИнвестированияПоследовательности)
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(ТабМногострочная, ДанныеДопСтрок.МнгСтр);
	Если ЭтоУведомлениеКИК Тогда
		ЗаполнитьДеревоСтраниц_КИК();
	Иначе
		Для каждого КлючИЗначение Из НеЗаполненныеРазделы Цикл
			Если КлючИЗначение.Значение Тогда
				Источник = НайтиЭлементПоУИДВДереве(ДеревоСтраниц.ПолучитьЭлементы(), ДанныеМногостраничныхРазделов[КлючИЗначение.Ключ].Получить(0).Значение.УИД);
				Если Источник <> Неопределено Тогда
					Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если КоличествоЗаписейНумерации <> НумерацияПоследовательностей.Количество() Тогда
		РасчетыПоКорпоративнымНалогам.ОбновитьНумерациюПоследовательностей(НумерацияПоследовательностей, Объект.Организация);
	КонецЕсли;
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатЗапросаУведомления(Цепочки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Инвестиция КАК Инвестиция,
		|	Т.ДоляВладения КАК ДоляВладения,
		|	Т.ИнвесторЯвляетсяУчредителем КАК ИнвесторЯвляетсяУчредителем,
		|	Т.ИнвесторОсуществляетКонтроль КАК ИнвесторОсуществляетКонтроль,
		|	Т.ОснованиеКонтроля КАК ОснованиеКонтроля
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&Т КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.ЭффективнаяДоля КАК ЭффективнаяДоля,
		|	Т.ПрямаяДоля КАК ПрямаяДоля,
		|	Т.Номер КАК Номер,
		|	Т.НомерПоследовательностиУчастия КАК НомерПоследовательностиУчастия,
		|	Т.ИнвесторПоследовательности КАК ИнвесторПоследовательности,
		|	Т.ОбъектИнвестированияПоследовательности КАК ОбъектИнвестированияПоследовательности,
		|	Т.ОбъектИнвестирования КАК ОбъектИнвестирования
		|ПОМЕСТИТЬ Цепочки
		|ИЗ
		|	&Цепочки КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Цепочки.ОбъектИнвестированияПоследовательности КАК Инвестиция,
		|	МАКСИМУМ(СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля) КАК ДоляВладения,
		|	МАКСИМУМ(ТаблицаДокумента.ИнвесторЯвляетсяУчредителем) КАК ИнвесторЯвляетсяУчредителем,
		|	МАКСИМУМ(ТаблицаДокумента.ИнвесторОсуществляетКонтроль) КАК ИнвесторОсуществляетКонтроль,
		|	МАКСИМУМ(ТаблицаДокумента.ОснованиеКонтроля) КАК ОснованиеКонтроля,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Цепочки.ИнвесторПоследовательности = &Инвестор
		|				ТОГДА Цепочки.ПрямаяДоля
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПрямаяДоля
		|ПОМЕСТИТЬ Инвестиции
		|ИЗ
		|	Цепочки КАК Цепочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
		|		ПО Цепочки.ОбъектИнвестированияПоследовательности = ТаблицаДокумента.Инвестиция
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
		|				&Период,
		|				Инвестор = &Инвестор
		|					И Сценарий = &Сценарий) КАК СтатусыОбъектовИнвестированияСрезПоследних
		|		ПО Цепочки.ОбъектИнвестированияПоследовательности = СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования
		|
		|СГРУППИРОВАТЬ ПО
		|	Цепочки.ОбъектИнвестированияПоследовательности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Инвестиции.Инвестиция КАК Инвестиция,
		|	Организации.ИностранныйНалоговыйРезидент КАК ИностранныйНалоговыйРезидент,
		|	Организации.ИностраннаяСтруктураБезОбразованияЮрЛица КАК ИностраннаяСтруктураБезОбразованияЮрЛица,
		|	Организации.ДатаРегистрации КАК ДатаРегИО,
		|	Организации.СтранаРегистрации.Код КАК СтрРег,
		|	ВЫБОР
		|		КОГДА Организации.СтранаРегистрации = Организации.СтранаПостоянногоМестонахождения
		|			ТОГДА """"
		|		ИНАЧЕ Организации.СтранаПостоянногоМестонахождения.Код
		|	КОНЕЦ КАК СтрНалРез,
		|	Организации.НаименованиеИнострОрганизации КАК НаимОргЛат,
		|	Организации.КодВСтранеРегистрации КАК РегНомер,
		|	Организации.КодНалогоплательщикаИностранный КАК КодНПРег,
		|	"""" КАК КодНалРез,
		|	ОрганизацииКонтактнаяИнформация.Представление КАК АдрСтрРег,
		|	Инвестиции.ДоляВладения КАК ДоляУч,
		|	Организации.ОГРН КАК ОГРН,
		|	Организации.ИНН КАК ИННЮЛ,
		|	Организации.КПП КАК КПП,
		|	Организации.НаименованиеПолное КАК НаимОрг,
		|	Организации.ВидИностраннойСтруктуры.Порядок КАК ОргФорм,
		|	Организации.УчредительныйДокумент КАК НаимДокУчр,
		|	Организации.ДатаРегистрации КАК ДатаУчр,
		|	Организации.СтранаРегистрации.Код КАК СтранаУчрИС,
		|	ВЫБОР
		|		КОГДА Инвестиции.ИнвесторЯвляетсяУчредителем
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Учредит,
		|	ВЫБОР
		|		КОГДА Инвестиции.ИнвесторОсуществляетКонтроль
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КонтрЛиц,
		|	Организации.ДатаРегистрации КАК ДатаУчрИСДата,
		|	Инвестиции.ОснованиеКонтроля КАК ОснКонтрИО,
		|	ВЫБОР
		|		КОГДА Инвестиции.ИнвесторОсуществляетКонтроль
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК ПрСамПризн,
		|	Инвестиции.ПрямаяДоля КАК ДоляПрямУч,
		|	ВЫБОР
		|		КОГДА Инвестиции.ПрямаяДоля = Инвестиции.ДоляВладения
		|				ИЛИ Инвестиции.ПрямаяДоля = 0
		|			ТОГДА 0
		|		ИНАЧЕ Инвестиции.ДоляВладения
		|	КОНЕЦ КАК ДоляСмешУч,
		|	Инвестиции.ДоляВладения - Инвестиции.ПрямаяДоля КАК ДоляКосУч
		|ИЗ
		|	Инвестиции КАК Инвестиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Инвестиции.Инвестиция = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|		ПО Инвестиции.Инвестиция = ОрганизацииКонтактнаяИнформация.Ссылка
		|			И (ОрганизацииКонтактнаяИнформация.Вид = &ВидКонтактнойИнформации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Цепочки.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|	Цепочки.НомерПоследовательностиУчастия КАК НомерПосл,
		|	Цепочки.ОбъектИнвестированияПоследовательности КАК ОбъектИнвестированияПоследовательности,
		|	ВЫБОР
		|		КОГДА Цепочки.Номер = ВложенныйЗапрос.Номер
		|			ТОГДА Цепочки.ЭффективнаяДоля
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоляКосвПослИт,
		|	Цепочки.Номер КАК Номер,
		|	Цепочки.ПрямаяДоля КАК ДоляУчПрям,
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеИнострОрганизации = """"
		|			ТОГДА Организации.НаименованиеПолное
		|		ИНАЧЕ Организации.НаименованиеИнострОрганизации
		|	КОНЕЦ КАК НаимОргЛат,
		|	ВЫБОР
		|		КОГДА Цепочки.Номер > 1
		|			ТОГДА Цепочки.ЭффективнаяДоля
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоляУчКосв,
		|	Цепочки.ЭффективнаяДоля КАК ЭффективнаяДоля,
		|	Организации.НаименованиеПолное КАК НаимОрг,
		|	Организации.СтранаРегистрации.Код КАК СтрРег,
		|	Организации.КПП КАК КПП,
		|	Организации.ИНН КАК ИННЮЛ,
		|	Организации.ОГРН КАК ОГРН,
		|	Организации.Ссылка КАК Ссылка,
		|	""0"" КАК ПрПредДокОсв,
		|	Организации.АдресМеждународный КАК АдрСтрРег,
		|	Организации.КодНалогоплательщикаИностранный КАК КодНПРег,
		|	Организации.КодВСтранеРегистрации КАК РегНомер
		|ИЗ
		|	Цепочки КАК Цепочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Цепочки.ОбъектИнвестированияПоследовательности = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Цепочки.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|			Цепочки.НомерПоследовательностиУчастия КАК НомерПоследовательностиУчастия,
		|			МАКСИМУМ(Цепочки.Номер) КАК Номер
		|		ИЗ
		|			Цепочки КАК Цепочки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Цепочки.ОбъектИнвестирования,
		|			Цепочки.НомерПоследовательностиУчастия) КАК ВложенныйЗапрос
		|		ПО Цепочки.НомерПоследовательностиУчастия = ВложенныйЗапрос.НомерПоследовательностиУчастия
		|			И Цепочки.ОбъектИнвестирования = ВложенныйЗапрос.ОбъектИнвестирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Цепочки.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|			МАКСИМУМ(Цепочки.Номер) КАК Номер
		|		ИЗ
		|			Цепочки КАК Цепочки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Цепочки.ОбъектИнвестирования) КАК ВложенныйЗапрос1
		|		ПО Цепочки.ОбъектИнвестирования = ВложенныйЗапрос1.ОбъектИнвестирования
		|ГДЕ
		|	ВложенныйЗапрос1.Номер > 1
		|	И (ВЫБОР
		|				КОГДА Цепочки.Номер > 1
		|					ТОГДА Цепочки.ЭффективнаяДоля <> 0
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ Цепочки.ПрямаяДоля <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПосл,
		|	Номер
		|ИТОГИ
		|	СУММА(ДоляКосвПослИт),
		|	СУММА(ДоляУчКосв)
		|ПО
		|	ОбъектИнвестирования,
		|	НомерПосл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НумерацияПоследовательностейВладения.Инвестиция КАК Инвестиция,
		|	НумерацияПоследовательностейВладения.НомерУчастника КАК НомерУчастника,
		|	ВЫБОР
		|		КОГДА НумерацияПоследовательностейВладения.Инвестиция.ИностранныйНалоговыйРезидент
		|				И НумерацияПоследовательностейВладения.Инвестиция.ИностраннаяСтруктураБезОбразованияЮрЛица
		|			ТОГДА ""ИС""
		|		КОГДА НумерацияПоследовательностейВладения.Инвестиция.ИностранныйНалоговыйРезидент
		|			ТОГДА ""ИО""
		|		ИНАЧЕ ""РО""
		|	КОНЕЦ КАК Префикс
		|ИЗ
		|	РегистрСведений.НумерацияПоследовательностейВладения КАК НумерацияПоследовательностейВладения
		|ГДЕ
		|	НумерацияПоследовательностейВладения.Инвестор = &Инвестор"
		+ ";" + РасчетДолейВладения.ТекстЗапроса_ИзмененияПоследовательностей();
	
	
	Запрос.УстановитьПараметр("Т", Объект.ИностранныеИнвестиции.Выгрузить(, "Инвестиция, ДоляВладения, ИнвесторЯвляетсяУчредителем, ИнвесторОсуществляетКонтроль, ОснованиеКонтроля"));
	Запрос.УстановитьПараметр("Цепочки", 					Цепочки);
	Запрос.УстановитьПараметр("Инвестор", 					Объект.Организация);
	Запрос.УстановитьПараметр("Период", 					Объект.Дата);
	Запрос.УстановитьПараметр("Сценарий", 					Сценарий);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформации", 	ВстраиваниеУХ.ВидыКонтактнойИнформацииИО());
	Возврат Запрос.ВыполнитьПакет();
КонецФункции

&НаСервере
Процедура ЗаполнитьЛистыГ12(Префикс, ЛокальныйУИД, РазделНеЗаполнен, ВыборкаДетальныеЗаписи, НеЗаполненныеРазделы, НовСтрока, НомерВПоследовательности, НомерУч)
	НомерВЗаголовке = НомерВПоследовательности;
	Если Префикс = "РО" Тогда
		ИмяЛиста = "ЛистГ1";
		ИмяПоляПоиска = "НомерРосОрг";
		ИмяЛистаПоиска = "Сведения о российской"+символы.ПС+"организации (Лист Г1)";
	Иначе
		ИмяЛиста = "ЛистГ2";
		Если Объект.ИмяФормы = "Форма2021_1" Тогда
			ИмяПоляПоиска = "НомерКИК";
			НомерВЗаголовке = НомерУч;
		Иначе
			ИмяПоляПоиска = "НомерИО";
		КонецЕсли;
		ИмяЛистаПоиска = "Сведения об иностранной"+символы.ПС+"организации (Лист Г2)";
	КонецЕсли;
	НеЗаполненныеРазделы.Свойство(ИмяЛиста, РазделНеЗаполнен);
	ДанныеТекущегоРаздела = ДанныеМногостраничныхРазделов[ИмяЛиста][ДанныеМногостраничныхРазделов[ИмяЛиста].Количество() - 1].Значение;
	УИДТекущаяСтраница = ДанныеТекущегоРаздела.УИД;
	Если НЕ РазделНеЗаполнен Тогда
		
		НоваяСтруктураРаздела = Новый Структура;
		Для Каждого КлючИЗначение Из ДанныеТекущегоРаздела Цикл
			НоваяСтруктураРаздела.Вставить(КлючИЗначение.Ключ);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(НоваяСтруктураРаздела, ВыборкаДетальныеЗаписи);
		Источник = НайтиЭлементПоУИДВДереве(ДеревоСтраниц.ПолучитьЭлементы(), ЛокальныйУИД);
		Подраздел = Неопределено;
		Для каждого Элемент Из Источник.ПолучитьЭлементы() Цикл
			Если Элемент.Наименование = ИмяЛистаПоиска Тогда
				Подраздел = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Подраздел = Неопределено Тогда
			Подраздел = Источник.ПолучитьЭлементы().Добавить();
			Подраздел.УИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			Подраздел.Наименование = ИмяЛистаПоиска;
			Подраздел.Многостраничность = Истина;
		КонецЕсли;
		Источник = НайтиЭлементПоУИДВДереве(ДеревоСтраниц.ПолучитьЭлементы(), УИДТекущаяСтраница);
		Приемник = Подраздел.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		УИДТекущаяСтраница = Новый УникальныйИдентификатор;
		Приемник.УИД = УИДТекущаяСтраница;
		
		НоваяСтруктураРаздела.УИД = УИДТекущаяСтраница;
		НоваяСтруктураРаздела[ИмяПоляПоиска] = НомерВЗаголовке;
		НоваяСтруктураРаздела.УИДРодителя = ЛокальныйУИД;
		ДанныеМногостраничныхРазделов[ИмяЛиста].Добавить(НоваяСтруктураРаздела);
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеТекущегоРаздела, ВыборкаДетальныеЗаписи);
		ДанныеТекущегоРаздела[ИмяПоляПоиска] = НомерВЗаголовке;
		НеЗаполненныеРазделы.Вставить(ИмяЛиста, Ложь);
		ДанныеТекущегоРаздела.УИДРодителя = ЛокальныйУИД;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНалоговыхОсвобождений(Инвестиции)
	
	ДанныеНалоговыхОсвобожденийКИК.Очистить();
	
	ЗаполнитьДанныеНалоговыхОсвобожденийИзБД(Инвестиции);
	
	МассивОсвобождений = Новый Массив;
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1001);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1002);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1003);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1004);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1005);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1006);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1007);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1008);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.Код1009);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.ДатаФинОтчетности);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.ДатаПрибыли);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.ДатаСоставления);
	МассивОсвобождений.Добавить(Справочники.СтатьиДоходовИРасходовКИК.ДатаАудита);
	
	ЗаполнитьДанныеНалоговыхОсвобожденийИзЭкземпляраОтчета(МассивОсвобождений, Инвестиции);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНалоговыхОсвобожденийИзБД(Инвестиции)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.ЭтоБанк КАК ЭтоБанк,
		|	Организации.ЭтоНКО КАК ЭтоНКО,
		|	Организации.ЭтоСтраховаяКомпания КАК ЭтоСтраховаяКомпания,
		|	Организации.ЭтоМеждународныйХолдинг КАК ЭтоМеждународныйХолдинг,
		|	ЕСТЬNULL(ГеографическиеПризнакиНалоговогоОсвобожденияКИКСрезПоследних.ЧленЕврАзЭС, ЛОЖЬ) КАК ЧленЕврАзЭС
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГеографическиеПризнакиНалоговогоОсвобожденияКИК.СрезПоследних(&Период, ) КАК ГеографическиеПризнакиНалоговогоОсвобожденияКИКСрезПоследних
		|		ПО Организации.СтранаРегистрации = ГеографическиеПризнакиНалоговогоОсвобожденияКИКСрезПоследних.Страна
		|ГДЕ
		|	Организации.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Ссылка", Инвестиции);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого Инвестиция Из РезультатЗапроса Цикл
		НовСтрока = ДанныеНалоговыхОсвобожденийКИК.Добавить();
		НовСтрока.Инвестиция = Инвестиция.Ссылка;
		НовСтрока.Статья = Справочники.СтатьиДоходовИРасходовКИК.Код1001;
		НовСтрока.Значение = Инвестиция.ЭтоНКО;
		НовСтрока = ДанныеНалоговыхОсвобожденийКИК.Добавить();
		НовСтрока.Инвестиция = Инвестиция.Ссылка;
		НовСтрока.Статья = Справочники.СтатьиДоходовИРасходовКИК.Код1002;
		НовСтрока.Значение = Инвестиция.ЧленЕврАзЭС;
		НовСтрока = ДанныеНалоговыхОсвобожденийКИК.Добавить();
		НовСтрока.Инвестиция = Инвестиция.Ссылка;
		НовСтрока.Статья = Справочники.СтатьиДоходовИРасходовКИК.Код1005;
		НовСтрока.Значение = Инвестиция.ЭтоБанк ИЛИ Инвестиция.ЭтоСтраховаяКомпания;
		НовСтрока = ДанныеНалоговыхОсвобожденийКИК.Добавить();
		НовСтрока.Инвестиция = Инвестиция.Ссылка;
		НовСтрока.Статья = Справочники.СтатьиДоходовИРасходовКИК.Код1009;
		НовСтрока.Значение = Инвестиция.ЭтоМеждународныйХолдинг;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНалоговыхОсвобожденийИзЭкземпляраОтчета(МассивОсвобождений, Инвестиции)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Ссылка,
		|	ПоказателиОтчетов.Строка.ЭлементСправочникаБД КАК ЭлементСправочникаБД
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
		|	И ПоказателиОтчетов.Строка.ЭлементСправочникаБД В(&ЭлементСправочникаБД)
		|	И ПоказателиОтчетов.Владелец.Код = &Код";
	
	Запрос.УстановитьПараметр("ЭлементСправочникаБД", МассивОсвобождений);
	Запрос.УстановитьПараметр("Код", РасчетыПоКорпоративнымНалогам.ПолучитьКодСводныйРегистр());
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполняемыеПоля = РезультатЗапроса.Выгрузить();
	Таблица = ТаблицыПоказателей(ЗаполняемыеПоля.ВыгрузитьКолонку("Ссылка"), Инвестиции, Сценарий, ОбщегоНазначенияУХ.ПолучитьПериодПоДате(Дата(Объект.НалоговыйПериод, 1, 1), Перечисления.Периодичность.Год));
	
	Для каждого Элемент Из МассивОсвобождений Цикл
		Показатель = ЗаполняемыеПоля.Найти(Элемент, "ЭлементСправочникаБД");
		Если Показатель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Инвестиция Из Инвестиции Цикл
			СтрокаПоиска = Таблица.НайтиСтроки(Новый Структура("ПоказательОтчета, Аналитика1, Организация", Показатель.Ссылка, Объект.Организация, Инвестиция));
			Если СтрокаПоиска.Количество() <> 0 Тогда
				ЗаполненныеСтроки = ДанныеНалоговыхОсвобожденийКИК.НайтиСтроки(Новый Структура("Инвестиция, Статья", Инвестиция, Элемент));
				Если ЗаполненныеСтроки.Количество() <> 0 Тогда
					НовСтрока = ЗаполненныеСтроки[0];
				Иначе
					НовСтрока = ДанныеНалоговыхОсвобожденийКИК.Добавить();
					НовСтрока.Инвестиция = Инвестиция.Ссылка;
					НовСтрока.Статья = Элемент;
				КонецЕсли;
				НовСтрока.Значение = СтрокаПоиска[0].Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ТаблицыПоказателей(СписокПоказателей, Организации, Сценарий, Период)
	
	ОтборВерсий = Новый Структура("Аналитика1, Сценарий, ПериодОтчета", Объект.Организация, Сценарий, Период); 
	ОтборВерсий.Вставить("ИспользоватьОсновнуюВалюту", Истина);
	
	ОтборПоказателей = Новый Соответствие();
	ОтборПоказателей.Вставить("ПоказательОтчета", СписокПоказателей);
	ОтборПоказателей.Вставить("Версия.Аналитика1", Объект.Организация);
	
	ПоляВыборки = Новый Соответствие();
	ПоляВыборки.Вставить("ПоказательОтчета");
	ПоляВыборки.Вставить("Значение");
	ПоляВыборки.Вставить("Аналитика1");
	ПоляВыборки.Вставить("Организация");
	ПоляВыборки.Вставить("ОсновнаяВалюта", "Версия.Валюта");
	ПоляВыборки.Вставить("КодВалюты", "Версия.Валюта.Код");
	ПоляВыборки.Вставить("ЭкземплярОтчета", "Версия.ЭкземплярОтчета");
		
	ДопПараметры = Новый Структура("ПолучитьСинтетику,ПолучитьНечисловые", Ложь, Истина);
	
	Запрос = Справочники.ВидыОтчетов.ПолучитьЗапросТаблицыЗначенийПоказателей(ОтборВерсий, ОтборПоказателей,,ПоляВыборки, ДопПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Функция НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(Инвестиция, Статья)
	Поиск = Объект.ИностранныеИнвестиции.НайтиСтроки(Новый Структура("Инвестиция", Инвестиция));
	Если Поиск.Количество() = 0 Тогда
		Возврат "0";
	Иначе
		Возврат ?(Поиск[0][СоответствиеКодовИПолей.Получить(Статья)], "1", "0");
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуОтчКИК(НоваяСтрока, СтрокаТаблицы, Валюта, Период, КэшПоказателейОтчетов, Префикс, Номер)
	НоваяСтрока.НомерКИК = Префикс + "-" + Формат(Номер, "ЧЦ=5; ЧВН=; ЧГ=" );
	НоваяСтрока.ПорОпрПрКИК = ?(СтрокаТаблицы.Инвестиция.ПорядокОпределенияПрибыли = Перечисления.ВидыПорядокаОпределенияПрибыли.ПоПравилам25ГлавыНК, "2", "1");
	НоваяСтрока.Код1001 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1001);
	НоваяСтрока.Код1002 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1002);
	НоваяСтрока.Код1003 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1003);
	НоваяСтрока.Код1004 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1004);
	НоваяСтрока.Код1005 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1005);
	НоваяСтрока.Код1006 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1006);
	НоваяСтрока.Код1007 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1007);
	НоваяСтрока.Код1008 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1008);
	Если НоваяСтрока.Свойство("Код1009") Тогда
		НоваяСтрока.Код1009 = НайтиИПреобразоватьЗначенияНалоговыхОсвобождений(СтрокаТаблицы.Инвестиция, Справочники.СтатьиДоходовИРасходовКИК.Код1009);
	КонецЕсли;
	Поиск = Объект.ИностранныеИнвестиции.НайтиСтроки(Новый Структура("Инвестиция", СтрокаТаблицы.Инвестиция));
	Если Поиск.Количество() <> 0 Тогда
		НоваяСтрока.ДатаПослДнПерДата = Поиск[0][СоответствиеКодовИПолей.Получить(Справочники.СтатьиДоходовИРасходовКИК.ДатаФинОтчетности)];
		НоваяСтрока.ДатаСостФОДата = Поиск[0][СоответствиеКодовИПолей.Получить(Справочники.СтатьиДоходовИРасходовКИК.ДатаСоставления)];
		НоваяСтрока.ДатаПослДнПерГл25Дата = Поиск[0][СоответствиеКодовИПолей.Получить(Справочники.СтатьиДоходовИРасходовКИК.ДатаПрибыли)];
		НоваяСтрока.ДатаСостАудЗаклДата = Поиск[0][СоответствиеКодовИПолей.Получить(Справочники.СтатьиДоходовИРасходовКИК.ДатаАудита)];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДобавитьНовуюСтраницу(ВыборкаДетальныеЗаписи, ДанныеТекущегоРаздела)
	НоваяСтруктураРаздела = Новый Структура;
	Для Каждого КлючИЗначение Из ДанныеТекущегоРаздела Цикл
		НоваяСтруктураРаздела.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(НоваяСтруктураРаздела, ВыборкаДетальныеЗаписи);
	Источник = НайтиЭлементПоУИДВДереве(ДеревоСтраниц.ПолучитьЭлементы(), УИДТекущаяСтраница);
	Если Источник <> Неопределено Тогда 
		Родитель = Источник.ПолучитьРодителя();
		Приемник = Родитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		УИДТекущаяСтраница = Новый УникальныйИдентификатор;
		Приемник.УИД = УИДТекущаяСтраница;
		//ДобавитьПодчиненныеСтраницы(Источник, Приемник);
	Иначе
		Сообщить("Ошибка структуры документа");
	КонецЕсли;
	НоваяСтруктураРаздела.УИД = УИДТекущаяСтраница;
	Возврат НоваяСтруктураРаздела;
КонецФункции

&НаСервереБезКонтекста
Процедура ДозаполнитьДаты(ДанныеТекущегоРаздела, ИмяОбласти, НомерВПоследовательности, ВидУчастия, ОснованиеУведомленияОбИО, Даты, Выборка)
	ДанныеТекущегоРаздела[ИмяОбласти] = НомерВПоследовательности;
	Если ДанныеТекущегоРаздела.Свойство("Участие") Тогда
		ДанныеТекущегоРаздела.Участие = Формат(ВидУчастия, "ЧГ=");
	КонецЕсли;
	Если ДанныеТекущегоРаздела.Свойство("ДатаВознУч") Тогда
		ДатыИнвестиции = Даты.Скопировать(Новый Структура("ОбъектИнвестирования", Выборка.Инвестиция));
		ДатыИнвестиции.Сортировать("Период Убыв");
		Если ОснованиеУведомленияОбИО = Перечисления.ОснованияПодачиУведомленийОбИО.ОснованиеВозниклоДо15052015 Тогда
			ДанныеТекущегоРаздела.ДатаВознУч = '20150515';
		Иначе
			СтрокаПоиска = ДатыИнвестиции.Найти("Начало", "Статус");
			Если СтрокаПоиска <> Неопределено Тогда
				ДанныеТекущегоРаздела.ДатаВознУч = СтрокаПоиска.Период;
			КонецЕсли;
		КонецЕсли;
		СтрокаПоиска = ДатыИнвестиции.Найти("Прекращение", "Статус");
		Если СтрокаПоиска <> Неопределено Тогда
			ДанныеТекущегоРаздела.ДатаКонУч = СтрокаПоиска.Период;
		КонецЕсли;
		Если ДанныеТекущегоРаздела.Свойство("ДатаИзмДолиУч") Тогда 
			Если ОснованиеУведомленияОбИО = Перечисления.ОснованияПодачиУведомленийОбИО.ИзменениеПорядкаУчастия Тогда
				СтрокаПоиска = ДатыИнвестиции.Найти("Последовательность", "Статус");
				Если СтрокаПоиска <> Неопределено Тогда
					ДанныеТекущегоРаздела.ДатаИзмДолиУч = СтрокаПоиска.Период;
				КонецЕсли;
			ИначеЕсли ОснованиеУведомленияОбИО = Перечисления.ОснованияПодачиУведомленийОбИО.ИзменениеДолиУчастия Тогда
				СтрокаПоиска = ДатыИнвестиции.Найти("Изменение", "Статус");
				Если СтрокаПоиска <> Неопределено Тогда
					ДанныеТекущегоРаздела.ДатаИзмДолиУч = СтрокаПоиска.Период;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Если ДанныеТекущегоРаздела.Свойство("ДоляПрямУч") Тогда
	//	ДанныеТекущегоРаздела.ДоляПрямУч = Выборка.ДоляУч;
	//КонецЕсли;
	//Если ДанныеТекущегоРаздела.Свойство("ДоляКосУч") Тогда
	//	ДанныеТекущегоРаздела.ДоляКосУч = Выборка.ДоляУч;
	//КонецЕсли;
	//Если ДанныеТекущегоРаздела.Свойство("ДоляСмешУч") Тогда
	//	ДанныеТекущегоРаздела.ДоляСмешУч = Выборка.ДоляУч;
	//КонецЕсли;
	Если ДанныеТекущегоРаздела.Свойство("Код101") Тогда
		ДанныеТекущегоРаздела.Код101 = ?(Выборка.ДоляУч > 25, "1", "0");
		ДанныеТекущегоРаздела.Код102 = "0";//?(СтрокаТаблицы.ПолнаяДоля > 10, 1, 0);
		ДанныеТекущегоРаздела.Код103 = "0";
		ДанныеТекущегоРаздела.Код104 = "0";
		ДанныеТекущегоРаздела.Код105 = "0";
		
		ДанныеТекущегоРаздела.Код201 = ?(ВидУчастия = 1, "1", "0");
		ДанныеТекущегоРаздела.Код202 = ?(ВидУчастия = 2, "1", "0");
		ДанныеТекущегоРаздела.Код203 = ?(ВидУчастия = 3, "1", "0");
		ДанныеТекущегоРаздела.Код204 = "0";
		ДанныеТекущегоРаздела.Код205 = "";
	КонецЕсли;
	Если ДанныеТекущегоРаздела.Свойство("Код106") Тогда
		ДанныеТекущегоРаздела.Код106 = "0";
		ДанныеТекущегоРаздела.Код107 = "0";
		ДанныеТекущегоРаздела.Код108 = "0";
		ДанныеТекущегоРаздела.Код109 = "0";
		ДанныеТекущегоРаздела.Код110 = "0";
		ДанныеТекущегоРаздела.Код111 = "0";
		ДанныеТекущегоРаздела.Код112 = "0";
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЭлементПоУИДВДереве(Элементы, УИД)
	Для Каждого Элт Из Элементы Цикл 
		Рез = НайтиЭлементПоУИДВДереве(Элт.ПолучитьЭлементы(), УИД);
		Если Рез <> Неопределено Тогда 
			Возврат Рез;
		КонецЕсли;
		Если Элт.УИД = УИД Тогда 
			Возврат Элт;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти
