#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция МожноВвестиНаОснованииЗакупки(ЗакупочнаяПроцедура) Экспорт
	Возврат ЗначениеЗаполнено(ЗакупочнаяПроцедура)
		И (ЗакупочнаяПроцедура.СпособВыбораПоставщика =
			Перечисления.СпособыВыбораПоставщика.Конкурс
			ИЛИ ЗакупочнаяПроцедура.СпособВыбораПоставщика =
			Перечисления.СпособыВыбораПоставщика.КонкурсУМсп)				
			;
КонецФункции

Функция МожноВвестиНаОснованииПротоколаВскрытияКонвертов(ДокументПротокол) Экспорт
	Если НЕ ЗначениеЗаполнено(ДокументПротокол) Тогда
		Возврат Истина;
	КонецЕсли;
	ЗакупочнаяПроцедура = ДокументПротокол.ЗакупочнаяПроцедура;
	Возврат ЗначениеЗаполнено(ЗакупочнаяПроцедура)
		И (ЗакупочнаяПроцедура.СпособВыбораПоставщика
					= Перечисления.СпособыВыбораПоставщика.Конкурс);
КонецФункции
				
// Добавить строку в ТЧ "ПредложенияПоставщиков" документ ПредложениеПоставщика.
// Проверка того, что предложение поставщика уже есть в ТЧ не производится.
// Параметры:
//	ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры - закупка
//			для которого получаем требования к поставщикам.
//	ПредложенияПоставщиков - Документ.ПротоколВскрытияКонвертов.ПредложенияПоставщиков -
//			табличная часть.
//	СведенияОПредоставленныхДокументах - Документ.ПротоколВскрытияКонвертов.ПредложенияПоставщиков - 
//			табличная часть.
//  ПредложениеПоставщика - ДокументСсылка.ПредложениеПоставщика - предложение
//			поставщика для добавления.
//  ПроверятьЗаполнениеВход - указывает, нужно ли остановить заполнение, если данные уже заполнены.
//
// Возвращает:
//	Строка табличной части "ПредложенияПоставщиков" - заполненная
//			по документу предложения поставщика.
//
Функция ДобавитьСтрокуПредложенияПоставщика(
									ЗакупочнаяПроцедура,
									ПредложенияПоставщиков,
									СведенияОПредоставленныхДокументах,
									ПредложениеПоставщика,
									ПроверятьЗаполнениеВход = Истина) Экспорт
	Если НЕ ЗначениеЗаполнено(ПредложениеПоставщика) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ПредложениеПоставщика", ПредложениеПоставщика);
	мСтроки = ПредложенияПоставщиков.НайтиСтроки(СтруктураПоиска);
	Если (ПроверятьЗаполнениеВход) И (мСтроки.Количество() > 0) Тогда
		// Данные существуют. Вернём первую строку.
		ПерваяСтрока = мСтроки[0];
		Возврат ПерваяСтрока;
	Иначе
		// Нет данных. Создадим новую строку и вернём её.
		НоваяСтрока = ПредложенияПоставщиков.Добавить();
		НоваяСтрока.ПредложениеПоставщика = ПредложениеПоставщика;
		ОбновитьСведенияОПредоставленныхПоставщикомДокументах(ЗакупочнаяПроцедура, 
			СведенияОПредоставленныхДокументах, 
			ПредложениеПоставщика);
		Возврат НоваяСтрока;
	КонецЕсли;
КонецФункции

// Добавить или удалить строки в ТЧ "СведенияОПредоставленныхДокументах"
// по  требованиям к документам закупки в разрезе предложения поставщика.
//
// Параметры:
//	ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры - закупка
//			для которого получаем требования к поставщикам.
//  СведенияОПредоставленныхДокументах - ДокументСсылка.СведенияОПредоставленныхДокументах -
//			предложение поставщика для добавления.
//  ПредложениеПоставщика - ДокументСсылка.ПредложениеПоставщика -
//			предложение поставщика для отбора строк.
//
// Возвращает:
//	Строка табличной части - заполненная по документу предложения поставщика.
//
Функция ОбновитьСведенияОПредоставленныхПоставщикомДокументах(
								ЗакупочнаяПроцедура,
								СведенияОПредоставленныхДокументах,
								ПредложениеПоставщика) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакупочныеПроцедурыТребованияКСоставуДокументов.Требование КАК Требование
		|ИЗ
		|	Справочник.ЗакупочныеПроцедуры.ТребованияКСоставуДокументов КАК ЗакупочныеПроцедурыТребованияКСоставуДокументов
		|ГДЕ
		|	ЗакупочныеПроцедурыТребованияКСоставуДокументов.Ссылка = &ЗакупочнаяПроцедура";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ПредложениеПоставщика", ПредложениеПоставщика);
	СтрокиДляУдаления = СведенияОПредоставленныхДокументах.НайтиСтроки(ОтборСтрок);
	ОтборСтрок.Вставить("ТребованиеКДокументу", Неопределено);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтборСтрок.ТребованиеКДокументу = ВыборкаДетальныеЗаписи.Требование;
		мСтроки = СведенияОПредоставленныхДокументах.НайтиСтроки(ОтборСтрок);
		Если мСтроки.Количество() = 0 Тогда
			НоваяСтрока = СведенияОПредоставленныхДокументах.Добавить();
			НоваяСтрока.ПредложениеПоставщика = ПредложениеПоставщика;
			НоваяСтрока.ТребованиеКДокументу = ВыборкаДетальныеЗаписи.Требование;
		Иначе
			Для Каждого СтрокаСведений Из мСтроки Цикл
				индекс = СтрокиДляУдаления.Найти(СтрокаСведений);
				Если индекс <> Неопределено Тогда
					СтрокиДляУдаления.Удалить(индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиДляУдаления Цикл
		СведенияОПредоставленныхДокументах.Удалить(СтрокаУдалить);
	КонецЦикла;
	Возврат НоваяСтрока;
КонецФункции
				

#КонецЕсли