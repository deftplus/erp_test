
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ИмущественныеНалоги");
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

#КонецОбласти

// Возвращает необходимость указания КБК по коду вида имущества
//
// Параметры:
// 	 КодВидаИмущества - Строка  - Код вида имущества.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак необходимости указания КБК.
//
Функция ТребуетсяУказаниеКБК(КодВидаИмущества) Экспорт
	
	Результат = Ложь;
	
	Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет команду создания документа "Регистрация порядка налогообложения по налогу на имущество".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Содержит параметры документа, которые используются разными процедурами.
// 
// Возвращаемое значение:
//  Структура - Параметры документа.
//
Функция ПараметрыДокумента() Экспорт

	ДоступныеАмортизационныеГруппы = Новый Массив;
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ПустаяСсылка());
	
	ДоступныеГруппыОСДвижимогоИмущества = Новый Массив;
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.МашиныИОборудование);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ОфисноеОборудование);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ПродуктивныйСкот);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.РабочийСкот);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ТранспортныеСредства);
	
	ДоступныеГруппыОСНедвижимогоИмущества = Новый Массив;
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.Здания);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.Сооружения);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоступныеАмортизационныеГруппы", ДоступныеАмортизационныеГруппы);
	ПараметрыДокумента.Вставить("ДоступныеГруппыОСДвижимогоИмущества", ДоступныеГруппыОСДвижимогоИмущества);
	ПараметрыДокумента.Вставить("ДоступныеГруппыОСНедвижимогоИмущества", ДоступныеГруппыОСНедвижимогоИмущества);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "СпособыОтраженияРасходовПоИмущественнымНалогам" Тогда
		
		ТекстЗапроса = СпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧастьДокумента";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;

	Возврат Результат;
	
КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам(ТекстыЗапроса, Регистры);
		СпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Дата,
	|	Операция.Номер КАК Номер,
	|	Операция.ПометкаУдаления КАК ПометкаУдаления,
	|	Операция.Проведен КАК Проведен,
	|	Операция.Комментарий КАК Комментарий,
	|	Операция.Ответственный КАК Ответственный,
	|	Операция.Организация КАК Организация,
	|	Операция.ВидОбъектаНалогаНаИмущество КАК ВидОбъектаНалогаНаИмущество,
	|	Операция.ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	Операция.НалоговыйОрган КАК НалоговыйОрган,
	|	Операция.КодПоОКАТО КАК КодПоОКАТО,
	|	Операция.КодПоОКТМО КАК КодПоОКТМО,
	|	Операция.ПорядокНалогообложения КАК ПорядокНалогообложения,
	|	Операция.НалоговаяСтавка КАК НалоговаяСтавка,
	|	Операция.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	Операция.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка,
	|	Операция.КодВидаИмущества КАК КодВидаИмущества,
	|	Операция.КБК КАК КБК,
	|	Операция.НалоговаяБаза КАК НалоговаяБаза,
	|	Операция.ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД КАК ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД,
	|	Операция.ДвижимоеИмуществоПодлежащееНалогообложению КАК ДвижимоеИмуществоПодлежащееНалогообложению,
	|	Операция.УказаныСпособыОтражениеРасходов КАК УказаныСпособыОтражениеРасходов
	|ИЗ
	|	Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество КАК Операция
	|ГДЕ
	|	Операция.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество);

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТабличнаяЧастьДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	&КодПоОКТМО КАК КодПоОКТМО,
	|	&КодПоОКАТО КАК КодПоОКАТО,
	|	&ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	&НалоговыйОрган КАК НалоговыйОрган,
	|	ВЫБОР
	|		КОГДА &ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСтавкеДляДвижимогоИмущества)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсобыеЛьготыНеУстановлены)
	|		ИНАЧЕ &ПорядокНалогообложения
	|	КОНЕЦ КАК ПорядокНалогообложения,
	|	&НалоговаяСтавка КАК НалоговаяСтавка,
	|	&КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	&СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка,
	|	&КодВидаИмущества КАК КодВидаИмущества,
	|	&КБК КАК КБК,
	|	ТабличнаяЧастьДокумента.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	&НалоговаяБаза КАК НалоговаяБаза,
	|	ТабличнаяЧастьДокумента.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ТабличнаяЧастьДокумента.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ТабличнаяЧастьДокумента.КадастровыйНомер КАК КадастровыйНомер,
	|	ТабличнаяЧастьДокумента.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ТабличнаяЧастьДокумента.УсловныйНомер КАК УсловныйНомер,
	|	ТабличнаяЧастьДокумента.ДатаРегистрацииПраваСобственности КАК ДатаРегистрацииПраваСобственности,
	|	ТабличнаяЧастьДокумента.ДатаПрекращенияПраваСобственности КАК ДатаПрекращенияПраваСобственности,
	|	ТабличнаяЧастьДокумента.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ТабличнаяЧастьДокумента.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	&ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД КАК ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД,
	|	ВЫБОР
	|		КОГДА &Дата >= ДАТАВРЕМЯ(2018, 1, 1)
	|			ТОГДА &ВидОбъектаНалогаНаИмущество = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013)
	|					И &ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
	|					И &ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСтавкеДляДвижимогоИмущества)
	|		ИНАЧЕ &ВидОбъектаНалогаНаИмущество = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013)
	|				И &ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
	|	КОНЕЦ КАК ДвижимоеИмуществоПодлежащееНалогообложению
	|ИЗ
	|	Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ОС КАК ТабличнаяЧастьДокумента
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
КонецПроцедуры

Функция СпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СпособыОтраженияРасходовПоИмущественнымНалогам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	ТабличнаяЧастьДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество) КАК ВидНалога,
	|	&Организация КАК Организация,
	|	ИСТИНА КАК СпособОтраженияРасходовЗаданДокументом,
	|	&Ссылка КАК СпособОтраженияРасходов
	|ИЗ
	|	Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ОС КАК ТабличнаяЧастьДокумента
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка = &Ссылка
	|	И &УказаныСпособыОтражениеРасходов";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Дата                                   КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Дата                                   КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Дата                                   КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Дата                                   КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ИСТИНА                                  КАК ОтражатьВРеглУчете,
	|	ЛОЖЬ                                    КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство
	|ИЗ
	|	Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ОС КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации) Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.ОтражениеРасходов";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ОтражениеРасходовСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ОтражениеРасходовАналитикаРасходов");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
