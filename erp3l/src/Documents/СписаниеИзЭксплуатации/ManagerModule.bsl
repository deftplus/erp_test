#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("ТМЦВЭксплуатации");
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		ТекстЗапросаТаблицаТМЦВЭксплуатации(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		
		РеглУчетПроведениеСервер.ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Списание из эксплуатации".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеИзЭксплуатации) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СписаниеИзЭксплуатации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СписаниеИзЭксплуатации);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннееПотребление";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.СписаниеИзЭксплуатации";
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = ТМЦВЭксплуатацииПовтИсп.ВозможенУчетСерийВЭксплуатации();
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ВыбытиеТМЦИзЭксплуатации);
	
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// 
// Параметры:
//	ПараметрыУказанияСерий - см. ПараметрыУказанияСерий
//		
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|
	|	ВЫБОР
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 20
	|					ИНАЧЕ 19
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|
	|ПОМЕСТИТЬ Статусы
	|
	|ИЗ
	|	Товары КАК Товары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Серия = ТоварыДляЗапроса.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.СписаниеИзЭксплуатации";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Номер КАК Номер,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеИзЭксплуатации"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru = 'Списание из эксплуатации';
																	|en = 'Write-off from operation'"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеИзЭксплуатации);
	ЗначенияПараметровПроведения.Вставить("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.СписаниеИзЭксплуатации);
	
	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура ТекстЗапросаТаблицаТМЦВЭксплуатации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТМЦВЭксплуатации";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|
	|	&Организация                             КАК Организация,
	|	&Подразделение                           КАК Подразделение,
	|	ТабличнаяЧасть.ФизическоеЛицо            КАК ФизическоеЛицо,
	|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
	|	ТабличнаяЧасть.Серия                     КАК Серия,
	|	ТабличнаяЧасть.Партия                    КАК Партия,
	|	ТабличнаяЧасть.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ТабличнаяЧасть.ИнвентарныйНомер          КАК ИнвентарныйНомер,
	|	ТабличнаяЧасть.Количество                КАК Количество,
	|
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	&НастройкаХозяйственнойОперации          КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.ИдентификаторСтроки       КАК ИдентификаторФинЗаписи
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	ДанныеДокумента.Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Дата КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Дата КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	ТекстыОтражения = Новый Массив;

	#Область СписаниеИзЭксплуатацииЗабалансовыйУчет
	ТекстЗапроса = 
	"////////////////////////////////////////////////////////////////////////////////////////////////////
	|// Списание из эксплуатации, забалансовый учет (Дт --- :: Кт МЦ.0Х)
	|ВЫБРАТЬ
	|	
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	0 КАК Сумма,
	|	0 КАК СуммаУУ,
	|	
	|	// Дт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	// Кт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом) КАК ВидСчетаКт,
	|	Строки.Партия.КатегорияЭксплуатации КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Строки.Номенклатура КАК СубконтоКт1,
	|	Строки.Партия КАК СубконтоКт2,
	|	Строки.ФизическоеЛицо КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Списание из эксплуатации, забалансовый учет"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации КАК Операция
	|	ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК Строки
	|	ПО Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизации
	|	ПО Операция.Ссылка = УчетнаяПолитикаОрганизации.Ссылка
	|		И Операция.Организация = УчетнаяПолитикаОрганизации.Организация
	|		И НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = УчетнаяПолитикаОрганизации.ДатаОтражения
	|ГДЕ
	|	Строки.Партия.ДатаНачалаЭксплуатации >= &ДатаНачалаДействияФСБУ5
	|	И ЕСТЬNULL(УчетнаяПолитикаОрганизации.ЗабалансовыйУчетТМЦВЭксплуатации, ЛОЖЬ) = ИСТИНА
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
	#КонецОбласти

	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат "";

КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МБ8";
	КомандаПечати.Представление = НСтр("ru = 'Акт на списание (МБ-8)';
										|en = 'Statement of writing-off (No. MB-8)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Картинка = БиблиотекаКартинок.Печать;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МБ8") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"МБ8",
			НСтр("ru = 'Акт на списание (МБ-8)';
				|en = 'Statement of writing-off (No. MB-8)'"),
			ПечатьМБ8(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),,
			"Документ.СписаниеИзЭксплуатации.ПФ_MXL_МБ8");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыМБ8(МассивДокументов)
	
	#Область ТекстЗапросаДанныхПечатнойФормыМБ8
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Ссылка.Организация КАК Организация,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА Товары.Номенклатура.Артикул
	|		ИНАЧЕ Товары.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатурныйНомер,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	Товары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Товары.Партия КАК Партия,
	|	Товары.Партия.ДатаНачалаЭксплуатации КАК ДатаПередачи,
	|	Товары.Партия.СрокЭксплуатации КАК СрокСлужбы,
	|	Товары.Партия.КатегорияЭксплуатации КАК КатегорияЭксплуатации,
	|	Товары.СтатьяРасходов КАК СтатьяРасходов,
	|	Товары.АналитикаРасходов КАК АналитикаРасходов,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	НомерСтроки,
	|	Ссылка,
	|	Партия,
	|	Номенклатура,
	|	Характеристика,
	|	СтатьяРасходов,
	|	АналитикаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Организация КАК Организация,
	|	Товары.Партия КАК Партия,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))) КАК СчетУчета,
	|	ЕСТЬNULL(НастройкиПоОрганизации.ВидСчета, ЕСТЬNULL(НастройкиПоАналитике.ВидСчета, НЕОПРЕДЕЛЕНО)) = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом) КАК ЗаБаланс
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК НастройкиПоОрганизации
	|		ПО НастройкиПоОрганизации.ВидСчета В (&ВидыСчетовТМЦВЭксплуатации)
	|		И НастройкиПоОрганизации.Организация = Товары.Организация
	|		И НастройкиПоОрганизации.АналитикаУчета = Товары.КатегорияЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
	|		ПО НастройкиПоАналитике.ВидСчета В (&ВидыСчетовТМЦВЭксплуатации)
	|		И НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И НастройкиПоАналитике.АналитикаУчета = Товары.КатегорияЭксплуатации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетУчета,
	|	Номенклатура,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Партия КАК Партия,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.ЗаБаланс КАК ЗаБаланс,
	|	Хозрасчетный.Счет КАК Счет,
	|	Хозрасчетный.Счет.Забалансовый КАК Забалансовый,
	|	СУММА(Хозрасчетный.КоличествоОборотДт) КАК Передано,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК Сумма
	|ПОМЕСТИТЬ втОбороты
	|ИЗ
	|	СчетаУчета КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты() КАК Хозрасчетный
	|		ПО Товары.Организация = Хозрасчетный.Организация
	|			И Товары.СчетУчета = Хозрасчетный.Счет
	|			И Товары.Номенклатура = Хозрасчетный.Субконто1
	|			И Товары.Партия = Хозрасчетный.Субконто2
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.НомерСтроки,
	|	Товары.Партия,
	|	Товары.Номенклатура,
	|	Хозрасчетный.Счет,
	|	Хозрасчетный.Счет.Забалансовый,
	|	Товары.Характеристика,
	|	Товары.ЗаБаланс,
	|	Товары.Количество
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Партия,
	|	Номенклатура,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Партия КАК Партия,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	ЕСТЬNULL(СтоимостьБаланс.Счет, СтоимостьЗаБаланс.Счет) КАК Счет,
	|	СУММА(ЕСТЬNULL(СтоимостьБаланс.Передано, СтоимостьЗаБаланс.Передано)) КАК Передано,
	|	СУММА(ЕСТЬNULL(СтоимостьБаланс.Сумма, СтоимостьЗаБаланс.Сумма)) КАК Сумма,
	|	СтоимостьЗаБаланс.Счет КАК СчетЗаБаланс,
	|	СУММА(СтоимостьЗаБаланс.Передано) КАК ПереданоЗаБаланс,
	|	СУММА(СтоимостьЗаБаланс.Сумма) КАК СуммаЗабаланс
	|ПОМЕСТИТЬ ПервоначальнаяСтоимость
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбороты КАК СтоимостьБаланс
	|		ПО Товары.Ссылка = СтоимостьБаланс.Ссылка
	|			И Товары.Партия = СтоимостьБаланс.Партия
	|			И Товары.Номенклатура = СтоимостьБаланс.Номенклатура
	|			И НЕ СтоимостьБаланс.ЗаБаланс
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбороты КАК СтоимостьЗаБаланс
	|		ПО Товары.Ссылка = СтоимостьЗаБаланс.Ссылка
	|			И Товары.Партия = СтоимостьЗаБаланс.Партия
	|			И Товары.Номенклатура = СтоимостьЗаБаланс.Номенклатура
	|			И СтоимостьЗаБаланс.ЗаБаланс
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.НомерСтроки,
	|	Товары.Партия,
	|	Товары.Номенклатура,
	|	СтоимостьБаланс.Счет,
	|	СтоимостьЗаБаланс.Счет,
	|	Товары.Характеристика,
	|	Товары.Количество
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Амортизация.Партия КАК Партия,
	|	Амортизация.Номенклатура КАК Номенклатура,
	|	СУММА(Амортизация.Сумма) КАК Сумма
	|ПОМЕСТИТЬ Амортизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Амортизация.Партия КАК Партия,
	|		Амортизация.Номенклатура КАК Номенклатура,
	|		Амортизация.СуммаБУ КАК Сумма
	|	ИЗ
	|		Документ.ПогашениеСтоимостиТМЦВЭксплуатации.Расходы КАК Амортизация
	|	ГДЕ
	|		Амортизация.Ссылка.Проведен
	|		И (Амортизация.Партия, Амортизация.Номенклатура) В
	|			(ВЫБРАТЬ
	|				Товары.Партия,
	|				Товары.Номенклатура
	|			ИЗ
	|				Товары КАК Товары)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Амортизация.Партия КАК Партия,
	|		Амортизация.Номенклатура КАК Номенклатура,
	|		Амортизация.ПервоначальнаяСумма - Амортизация.Сумма КАК Сумма
	|	ИЗ
	|		Документ.ВводОстатков.ТМЦВЭксплуатации КАК Амортизация
	|	ГДЕ
	|		Амортизация.Ссылка.Проведен
	|		И (Амортизация.Партия, Амортизация.Номенклатура) В
	|			(ВЫБРАТЬ
	|				Товары.Партия,
	|				Товары.Номенклатура
	|			ИЗ
	|				Товары КАК Товары)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Амортизация.Партия КАК Партия,
	|		Амортизация.Номенклатура КАК Номенклатура,
	|		Амортизация.ПервоначальнаяСумма - Амортизация.Сумма КАК Сумма
	|	ИЗ
	|		Документ.ВводОстатковТМЦВЭксплуатации.ТМЦВЭксплуатации КАК Амортизация
	|	ГДЕ
	|		Амортизация.Ссылка.Проведен
	|		И (Амортизация.Партия, Амортизация.Номенклатура) В
	|			(ВЫБРАТЬ
	|				Товары.Партия,
	|				Товары.Номенклатура
	|			ИЗ
	|				Товары КАК Товары)
	|
	|	) КАК Амортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	Амортизация.Партия,
	|	Амортизация.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Организация КАК Организация,
	|	Товары.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(НастройкиПоМестуУчета.СчетУчета, ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)))) КАК СчетУчета,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕСТЬNULL(НастройкиПоМестуУчета.СчетУчета, ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))))) КАК НомерСчета
	|ИЗ
	|	Товары КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК НастройкиПоМестуУчета
	|	ПО 
	|		НастройкиПоМестуУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)
	|		И Товары.Организация = НастройкиПоМестуУчета.Организация
	|		И Товары.СтатьяРасходов.ГруппаФинансовогоУчетаРегл = НастройкиПоМестуУчета.АналитикаУчета
	|		И Товары.Подразделение = НастройкиПоМестуУчета.МестоУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК НастройкиПоОрганизации
	|	ПО 
	|		НастройкиПоОрганизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)
	|		И Товары.Организация = НастройкиПоОрганизации.Организация
	|		И Товары.СтатьяРасходов.ГруппаФинансовогоУчетаРегл = НастройкиПоОрганизации.АналитикаУчета
	|		И НастройкиПоОрганизации.МестоУчета = НЕОПРЕДЕЛЕНО
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
	|	ПО 
	|		НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)
	|		И НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И Товары.СтатьяРасходов.ГруппаФинансовогоУчетаРегл = НастройкиПоАналитике.АналитикаУчета
	|		И НастройкиПоАналитике.МестоУчета = НЕОПРЕДЕЛЕНО
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Дата КАК ДатаСоставления,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДанныеДокумента.Организация) КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДанныеДокумента.Подразделение) КАК ПредставлениеПодразделения,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДанныеДокумента.Подразделение.ТекущийРуководитель) КАК РуководительПодразделения
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НоменклатураНаименование КАК НоменклатураНаименование,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Товары.ДатаПередачи КАК ДатаВводаВЭксплуатацию,
	|	Товары.СрокСлужбы КАК СрокСлужбы,
	|	Товары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПервоначальнаяСтоимость.Передано, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ПервоначальнаяСтоимость.Сумма, 0) / ПервоначальнаяСтоимость.Передано
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПервоначальнаяСтоимость.Передано, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество * ЕСТЬNULL(ПервоначальнаяСтоимость.Сумма, 0) / ПервоначальнаяСтоимость.Передано
	|	КОНЕЦ КАК СуммаПервоначальнойСтоимости,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПервоначальнаяСтоимость.Передано, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество * ЕСТЬNULL(Амортизация.Сумма, 0) / ПервоначальнаяСтоимость.Передано
	|	КОНЕЦ КАК СуммаПогашеннойСтоимости
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
	|		ПО Товары.Ссылка = ПервоначальнаяСтоимость.Ссылка
	|			И Товары.НомерСтроки = ПервоначальнаяСтоимость.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Амортизация КАК Амортизация
	|		ПО Товары.Партия = Амортизация.Партия
	|			И Товары.Номенклатура = Амортизация.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(СуммаПервоначальнойСтоимости),
	|	СУММА(СуммаПогашеннойСтоимости)
	|ПО
	|	Ссылка";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	Запрос.УстановитьПараметр("КолонкаКодов",                    КолонкаКодов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВидыСчетовТМЦВЭксплуатации", РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.НастраиваемыеВидыСчетов("ТМЦВЭксплуатации"));
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	// Пакет запросов:
	// 		[0] - Выборка по табличным частям документов со всеми вспомогательными реквизитами
	// 		[1] - Уточнение счета учета по организации
	// 		[2] - ВСЕ счета учета
	// 		[3] - Обороты счета
	// 		[4] - Первоначальная стоимость
	// 		[5] - Амортизация
	// 		[6] - Выборка счетов учета расходов (Корр. счета)
	// 		[7] - Выборка шапкам документов
	// 		[8] - Результирующая выборка по товарам
	
	Возврат Новый Структура(
		"КоррСчета, РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПакетаЗапросов[5],
		РезультатПакетаЗапросов[6],
		РезультатПакетаЗапросов[7]);
	
КонецФункции

Функция ПечатьМБ8(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонОшибкиПустойТЧ = НСтр("ru = 'В документе %1 отсутствуют товары. Печать МБ-8 не требуется';
								|en = 'No goods in the %1 document. MB-8 print is not required'");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеИзЭксплуатации_МБ8";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеИзЭксплуатации.ПФ_MXL_МБ8");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
	ОбластьПустаяСтрокаТаблицы = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьПоследняяСтрокаТаблицы = Макет.ПолучитьОбласть("ПоследняяСтрока");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ДанныеДляПечатнойФормы = ПолучитьДанныеДляПечатнойФормыМБ8(МассивОбъектов);
	КоррСчетаПоДокументам = ДанныеДляПечатнойФормы.КоррСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокументы = ДанныеДляПечатнойФормы.РезультатПоШапке.Выбрать();
	ВыборкаСтрокиПоДокументам = ДанныеДляПечатнойФормы.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОтборПоДокументу = Новый Структура("Ссылка", ВыборкаДокументы.Ссылка);
		
		КоррСчетаПоДокументам.Сбросить();
		КоррСчета = Новый Массив;
		Если КоррСчетаПоДокументам.НайтиСледующий(ОтборПоДокументу) Тогда
			ВыборкаКоррСчета = КоррСчетаПоДокументам.Выбрать();
			Пока ВыборкаКоррСчета.Следующий() Цикл
				КоррСчета.Добавить(ВыборкаКоррСчета.НомерСчета);
			КонецЦикла;
		КонецЕсли;
		КоррСчет = СтрСоединить(КоррСчета,",");
		
		ВыборкаСтрокиПоДокументам.Сбросить();
		Если Не ВыборкаСтрокиПоДокументам.НайтиСледующий(ОтборПоДокументу) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибкиПустойТЧ,
					ВыборкаДокументы.Ссылка),
				ВыборкаДокументы.Ссылка);
			
			Продолжить;
			
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаДокументы);
		ОбластьШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументы.Номер);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаДокументы.Организация, ВыборкаДокументы.ДатаДокумента));
		ОбластьШапка.Параметры.Счет = КоррСчет;
		
		ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ВыборкаДокументы.Организация, ВыборкаДокументы.ДатаДокумента);
		ОбластьШапка.Параметры.РасшифровкаПодписиРуководителя = ОтветственныеЛица.РуководительНаименование;
		ОбластьШапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
		ОбластьШапка.Параметры.ПредставлениеГода = Формат(ВыборкаДокументы.ДатаДокумента, "ДФ=yyyy");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		ВыборкаСтроки = ВыборкаСтрокиПоДокументам.Выбрать();
		Пока ВыборкаСтроки.Следующий() Цикл
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаСтроки);
			Если ЗначениеЗаполнено(ВыборкаСтроки.ХарактеристикаНаименование) Тогда
				НоменклатураНаименование = СтрШаблон("%1 (%2)",ВыборкаСтроки.НоменклатураНаименование,ВыборкаСтроки.ХарактеристикаНаименование);
				ОбластьСтрокаТаблицы.Параметры.НоменклатураНаименование = НоменклатураНаименование;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьПоследняяСтрокаТаблицы);
		
		ОбластьИтого.Параметры.Заполнить(ВыборкаДокументы);
		ОбластьИтого.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаСтрокиПоДокументам.Количество,"Л=ru_RU",",,,,,,,,0");
		ОбластьИтого.Параметры.ИтогоСуммаПервоначальнойСтоимости = ВыборкаСтрокиПоДокументам.СуммаПервоначальнойСтоимости;
		ОбластьИтого.Параметры.ИтогоСуммаПогашеннойСтоимости = ВыборкаСтрокиПоДокументам.СуммаПогашеннойСтоимости;
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьПодвал.Параметры.ПредставлениеГода = Формат(ВыборкаДокументы.ДатаДокумента, "ДФ=yyyy");
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.Товары";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ТоварыСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ТоварыАналитикаРасходов");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.СписаниеИзЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.273";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0c4cbf9f-92e6-45b0-9bb8-075b7c820d08");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СписаниеИзЭксплуатации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Перемещение в эксплуатации"":
	|- заполняет новый реквизит ""Инв. №"" в табличной части
	|- заполняет новый реквизит ""Направление деятельности"" в табличной части
	|- заполняет реквизит ""Партия"" новой партией';
	|en = 'Updates the ""Transfers in operation"" documents:
	|- fills in the new ""Inv. No."" attribute in the table
	|- fills in the new ""Line of business"" attribute in the table
	|- fills in the ""Lot reference"" attribute with a new lot'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.СписаниеИзЭксплуатации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПартииТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.СписаниеИзЭксплуатации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.СписаниеИзЭксплуатации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииТМЦВЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.СписаниеИзЭксплуатации";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.ИнвентарныйНомер = """"
	|		И ТабличнаяЧасть.УдалитьПартияТМЦВЭксплуатации.УдалитьИнвентарныйНомер <> """"
	|
	|	ИЛИ ТабличнаяЧасть.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		И ТабличнаяЧасть.УдалитьПартияТМЦВЭксплуатации.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ИЛИ НЕ ЕСТЬNULL(ТабличнаяЧасть.Партия.Партия258, ЛОЖЬ)
	|		И ТабличнаяЧасть.УдалитьПартияТМЦВЭксплуатации <> ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.СписаниеИзЭксплуатации";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Справочник.ПартииТМЦВЭксплуатации");
	ДополнительныеПараметрыПроцедуры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроцедуры.ИмяВременнойТаблицы = "ВТЗаблокированныеДанные";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
			Параметры.Очередь, 
			ЧитаемыеДанные, 
			МенеджерВременныхТаблиц, 
			ДополнительныеПараметрыПроцедуры);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка КАК Ссылка,
	|	ТаблицаОбъекта.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВсеОбъекты
	|ИЗ
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации КАК ТаблицаОбъекта
	|		ПО (ТаблицаОбъекта.Ссылка = СсылкиДляОбработки.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаблокированныеСсылки
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = ВсеОбъекты.Ссылка)
	|ГДЕ
	|	ТабличнаяЧасть.УдалитьПартияТМЦВЭксплуатации В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.Ссылка КАК Ссылка,
	|	ВсеОбъекты.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	НЕ ВсеОбъекты.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТЗаблокированныеСсылки.Ссылка
	|				ИЗ
	|					ВТЗаблокированныеСсылки КАК ВТЗаблокированныеСсылки)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Результат = Запрос.Выполнить();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = Результат.Выбрать();
 	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.СписаниеИзЭксплуатации
			Если ДокументОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			СписокПартий = Новый Массив;
			Для Каждого ДанныеСтроки Из ДокументОбъект.Товары Цикл
				Если ЗначениеЗаполнено(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации)
					И НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
					СписокПартий.Добавить(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокПартий.Количество() <> 0 Тогда
				
				РеквизитыПартий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					СписокПартий, "УдалитьИнвентарныйНомер,НаправлениеДеятельности,НоваяПартия,Партия258");
				
				Для Каждого ДанныеСтроки Из ДокументОбъект.Товары Цикл
					
					Если ЗначениеЗаполнено(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации)
						И НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
					
						СвойстваПартии = РеквизитыПартий.Получить(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации);
					
						Если НЕ СвойстваПартии.Партия258
							И ЗначениеЗаполнено(СвойстваПартии.НоваяПартия) Тогда
							ДанныеСтроки.Партия = СвойстваПартии.НоваяПартия;
						ИначеЕсли СвойстваПартии.Партия258 Тогда
							ДанныеСтроки.Партия = ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации;
						КонецЕсли;
						
						ДанныеСтроки.ИнвентарныйНомер = СвойстваПартии.УдалитьИнвентарныйНомер;
						ДанныеСтроки.НаправлениеДеятельности = СвойстваПартии.НаправлениеДеятельности;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
 	ВнеоборотныеАктивыСлужебный.ПроверитьВыполнениеОбработчика(
 		ПроблемныхОбъектов, 
 		ОбъектовОбработано, 
 		ПолноеИмяОбъекта);
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
