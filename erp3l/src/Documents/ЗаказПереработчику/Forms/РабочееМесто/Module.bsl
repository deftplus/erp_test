
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//++ НЕ УТКА
	УстановитьУсловноеОформление();
	//-- НЕ УТКА
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьПриСозданииНаСервере();
	
	//++ НЕ УТКА
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ЗаказПереработчикуРабочееМесто", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	КонецЕсли;
	
	// Отработаем открытие формы из формы "Текущие дела"
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			ОтборМенеджер = Параметры.СтруктураБыстрогоОтбора.Менеджер;
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Приоритет") Тогда
			ОтборПриоритет = Параметры.СтруктураБыстрогоОтбора.Приоритет;
		КонецЕсли;
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапросаСписокКОформлению();
	Если ТекстЗапроса <> "" Тогда
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица = "";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Ложь;
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокКОформлению, СвойстваСписка);
		УстановитьПараметрыСпискаКОформлению();
		
	КонецЕсли;
	ПриУстановкеТекстаЗапроса();
	
	УстановитьТекущуюСтраницу();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.Менеджер.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ЗаказПереработчику));
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам");
	
	#Область СтандартныеПроцедуры
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	#КонецОбласти

	//-- НЕ УТКА
	
	#Область СтандартныеПроцедуры
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	//++ НЕ УТКА
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	//++ НЕ УТКА
	
	ДокументыВлияющиеНаГрафик = Новый Массив;
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказПереработчику");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказНаПроизводство");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЭтапыПроизводства");
	
	Если Не ДокументыВлияющиеНаГрафик.Найти(ИмяСобытия) = Неопределено Тогда
		УстановитьОтборыСпискаКОформлению();
		УстановитьПараметрыСпискаКОформлению();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Менеджер",
		ОтборМенеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборМенеджер));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Приоритет",
		ОтборПриоритет,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборПриоритет));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПереработчикПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКОформлению

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПустыеСсылки = Новый Массив();
	ПустыеСсылки.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"));
	//++ НЕ УТКА
	ПустыеСсылки.Добавить(ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"));
	//-- НЕ УТКА
	ОбеспечениеВДокументахКлиент.СписокПриИзменении(ЭтотОбъект, ПустыеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокКОформлению.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Распоряжение); 
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтгрузитьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_ОТГРУЗИТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"),
		ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КОбеспечениюЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбеспечиватьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("НеСогласован", НСтр("ru = 'Не согласован';
												|en = 'Not approved'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКИсполнению(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("КИсполнению", НСтр("ru = 'К исполнению';
												|en = 'For release'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	//++ НЕ УТКА
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.РабочееМесто.Команда.УстановитьСтатусЗакрыт");
		
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСсылки);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказов);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказПереработчику(Команда)
	
	//++ НЕ УТКА
	ИдентификаторыСтрок = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокКОформлению);
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ДанныеСтроки = Элементы.СписокКОформлению.ДанныеСтроки(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ДанныеЗаполнения = ПереработкаНаСторонеКлиент.ДанныеДляФормированияЗаказовПереработчикам(СписокСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВидимостьДоступность

&НаСервере
Процедура УстановитьВидимостьПриСозданииНаСервере()
	
	ПравоДоступаДобавление = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику);
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	
	Если Не ПравоДоступаДобавление Тогда
		Элементы.ФормаСписокГруппаСоздать.Видимость = Ложь;
		Элементы.СтраницаРаспоряженияНаОформление.Видимость = Ложь;
	ИначеЕсли ИспользоватьРасширенноеОбеспечениеПотребностей Тогда
		Элементы.СписокСоздать.Видимость = Ложь;
	Иначе
		Элементы.ФормаСписокГруппаСоздать.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Страницы.ОтображениеСтраниц =
		?(ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") И ПравоДоступаДобавление,
			ОтображениеСтраницФормы.ЗакладкиСверху,
			ОтображениеСтраницФормы.Нет);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(,МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаДействий

&НаКлиенте
Процедура ВыполнитьДействиеВСпискеЗаказовРазныхТиповЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	Иначе
		
		ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ЗагрузитьЗначения(ДополнительныеПараметры.Заказы);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам", 1, Истина);
		РезультатВыполненияДействий = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ОбеспечениеВДокументахКлиент.СообщитьОРезультатахВыполненияДействийВСпискеЗаказов(РезультатВыполненияДействий);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//++ НЕ УТКА

&НаСервере
Процедура УстановитьУсловноеОформление()

	Документы.ЗаказПереработчику.УстановитьУсловноеОформлениеСписка(Список);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"СписокКОформлениюХарактеристика",
		"СписокКОформлению.ХарактеристикиИспользуются");
																			 
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокКОформлению.ДатаРаспоряжения", Элементы.СписокКОформлениюДатаРаспоряжения.Имя);
	
	// Переработчик не указан
	#Область СписокКОформлению_Переработчик
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКОформлениюПереработчик.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКОформлению.Переработчик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	// Дата начала просрочена
	#Область СписокКОформлению_Начало
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКОформлениюНачало.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКОформлению.ДатаЗапускаПросрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборов()
	
	ПриУстановкеТекстаЗапроса();
	УстановитьПараметрыСпискаКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеТекстаЗапроса()
	
	СохранитьПараметрыОтбора();
	УстановитьОтборыСписка();
	УстановитьОтборыСпискаКОформлению();
	
КонецПроцедуры

&НаСервере
Функция ЕстьОтборПоРаспоряжению()
	
	ЕстьОтборПоРаспоряжению = Ложь;
	
	Для каждого ЭлементКоллекции Из СписокРаспоряжений Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			ЕстьОтборПоРаспоряжению = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтборПоРаспоряжению;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСписокКОформлению()

	ТекстЗапроса = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПереработкаПоГрафикуПереопределяемый.Организация КАК Организация,
		|	ПереработкаПоГрафикуПереопределяемый.Ссылка КАК Распоряжение,
		|	ПереработкаПоГрафикуПереопределяемый.Распоряжение КАК ЗаказНаПроизводство,
		|	ТИПЗНАЧЕНИЯ(ПереработкаПоГрафикуПереопределяемый.Ссылка) КАК ТипРаспоряжения,
		|	ПереработкаПоГрафикуПереопределяемый.Номер КАК НомерРаспоряжения,
		|	ПереработкаПоГрафикуПереопределяемый.Дата КАК ДатаРаспоряжения,
		|	ПереработкаПоГрафикуПереопределяемый.Подразделение КАК Подразделение,
		|	ПереработкаПоГрафикуПереопределяемый.Этап.Партнер КАК Переработчик,
		|	0 КАК КодСтрокиЭтапыГрафик,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	НЕОПРЕДЕЛЕНО КАК ВыборГруппы,
		|	ВЫБОР
		|		КОГДА &ПланируетсяГрафикПроизводства
		|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|			ТОГДА ГрафикПроизводства.НачалоЭтапа
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
		|	КОНЕЦ КАК Начало,
		|	ВЫБОР
		|		КОГДА &ПланируетсяГрафикПроизводства
		|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|			ТОГДА ГрафикПроизводства.НачалоЭтапа < &ТекущаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0)) < &ТекущаяДата
		|	КОНЕЦ ДатаЗапускаПросрочена,
		|	ПереработкаПоГрафикуПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ПереработкаПоГрафикуПереопределяемый.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
		|ПОМЕСТИТЬ ВТРаспоряжения
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ПереработкаПоГрафикуПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО (ГрафикПроизводства.ЭтапПроизводства = ПереработкаПоГрафикуПереопределяемый.Ссылка)
		|			И (ГрафикПроизводства.СтатусГрафика = &СтатусРабочийГрафик)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикПроизводства
		|		ПО ПереработкаПоГрафикуПереопределяемый.Ссылка = НормативныйГрафикПроизводства.ЭтапПроизводства
		|ГДЕ
		|	ПереработкаПоГрафикуПереопределяемый.Проведен
		|	И ПереработкаПоГрафикуПереопределяемый.ПроизводствоНаСтороне
		|	И НЕ ПереработкаПоГрафикуПереопределяемый.Статус В (
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
		|	И ПереработкаПоГрафикуПереопределяемый.ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВЫБОР
		|					КОГДА &ПланируетсяГрафикПроизводства
		|							И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|						ТОГДА ГрафикПроизводства.НачалоЭтапа
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
		|				КОНЕЦ >= &ДатаНачала)
		|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВЫБОР
		|					КОГДА &ПланируетсяГрафикПроизводства
		|							И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|						ТОГДА ГрафикПроизводства.НачалоЭтапа
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
		|				КОНЕЦ <= &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураВПроизводстве.Регистратор КАК Этап,
		|	МИНИМУМ(НоменклатураВПроизводстве.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНоменклатураВПроизводствеНомераСтрок
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК НоменклатураВПроизводстве
		|ГДЕ
		|	НоменклатураВПроизводстве.Регистратор В
		|			(ВЫБРАТЬ
		|				ВТРаспоряжения.Распоряжение КАК Регистратор
		|			ИЗ
		|				ВТРаспоряжения)
		|	И НоменклатураВПроизводстве.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураВПроизводстве.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРаспоряжения.Организация КАК Организация,
		|	ВТРаспоряжения.Распоряжение КАК Распоряжение,
		|	ВТРаспоряжения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ВТРаспоряжения.ТипРаспоряжения КАК ТипРаспоряжения,
		|	ВТРаспоряжения.НомерРаспоряжения КАК НомерРаспоряжения,
		|	ВТРаспоряжения.ДатаРаспоряжения КАК ДатаРаспоряжения,
		|	ВТРаспоряжения.Подразделение КАК Подразделение,
		|	ВТРаспоряжения.Переработчик КАК Переработчик,
		|	ВТРаспоряжения.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	НоменклатураВПроизводстве.Номенклатура КАК Номенклатура,
		|	НоменклатураВПроизводстве.Характеристика КАК Характеристика,
		|	НоменклатураВПроизводстве.Склад КАК Склад,
		|	ВТРаспоряжения.ГруппаСкладов КАК ГруппаСкладов,
		|	ВТРаспоряжения.ВыборГруппы КАК ВыборГруппы,
		|	ВТРаспоряжения.Начало КАК Начало,
		|	ВЫБОР
		|		КОГДА НоменклатураВПроизводстве.Номенклатура.ИспользованиеХарактеристик В
		|			(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВТРаспоряжения.ДатаЗапускаПросрочена КАК ДатаЗапускаПросрочена,
		|	ВТРаспоряжения.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВТРаспоряжения.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
		|ИЗ
		|	ВТРаспоряжения КАК ВТРаспоряжения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатураВПроизводствеНомераСтрок КАК ВТНоменклатураВПроизводствеНомераСтрок
		|		ПО ВТРаспоряжения.Распоряжение = ВТНоменклатураВПроизводствеНомераСтрок.Этап
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК НоменклатураВПроизводстве
		|		ПО ВТНоменклатураВПроизводствеНомераСтрок.Этап = НоменклатураВПроизводстве.Регистратор
		|			И ВТНоменклатураВПроизводствеНомераСтрок.НомерСтроки = НоменклатураВПроизводстве.НомерСтроки";
	КонецЕсли;
	
	//++ Устарело_Производство21
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") Тогда
		ТекстЗапроса = ТекстЗапроса 
		+ ?(ТекстЗапроса <> "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|","")
		+
		"ВЫБРАТЬ
		|	ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство.Организация КАК Организация,
		|	ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство КАК Распоряжение,
		|	ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ТИПЗНАЧЕНИЯ(ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство) КАК ТипРаспоряжения,
		|	ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство.Номер КАК НомерРаспоряжения,
		|	ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство.Дата КАК ДатаРаспоряжения,
		|	ЗаказЭтапы.Подразделение КАК Подразделение,
		|	ЗаказЭтапы.Партнер КАК Переработчик,
		|	ПереработкаПоГрафикуПереопределяемый.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	ПереработкаПоГрафикуПереопределяемый.Номенклатура КАК Номенклатура,
		|	ПереработкаПоГрафикуПереопределяемый.Характеристика КАК Характеристика,
		|	ПереработкаПоГрафикуПереопределяемый.Склад КАК Склад,
		|	ПереработкаПоГрафикуПереопределяемый.Склад.Родитель КАК ГруппаСкладов,
		|	ЕСТЬNULL(ПереработкаПоГрафикуПереопределяемый.Склад.Родитель.ВыборГруппы, НЕОПРЕДЕЛЕНО) КАК ВыборГруппы,
		|	ЗаказЭтапыГрафик.НачалоПредварительногоБуфера КАК Начало,
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоПродукция.Номенклатура.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) < &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДатаЗапускаПросрочена,
		|	ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка) КАК ВариантПриемкиТоваров
		|ИЗ
		|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Остатки(
		|			,
		|			(НЕ &ОтборПоРаспоряжению
		|				ИЛИ ЗаказНаПроизводство В (&СписокРаспоряжений))) КАК ПереработкаПоГрафикуПереопределяемый
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
		|		ПО (ЗаказЭтапыГрафик.Ссылка = ПереработкаПоГрафикуПереопределяемый.ЗаказНаПроизводство)
		|			И (ЗаказЭтапыГрафик.КодСтроки = ПереработкаПоГрафикуПереопределяемый.КодСтрокиЭтапыГрафик)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
		|		ПО (ЗаказЭтапы.Ссылка = ЗаказЭтапыГрафик.Ссылка)
		|			И (ЗаказЭтапы.КлючСвязи = ЗаказЭтапыГрафик.КлючСвязиЭтапы)
		|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказЭтапыГрафик.КлючСвязиПродукция)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ЗаказЭтапыГрафик.Ссылка)
		|			И (ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказЭтапыГрафик.КлючСвязиПродукция)
		|ГДЕ
		|	(&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НАЧАЛОПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) >= &ДатаНачала)
		|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) <= &ДатаОкончания)";
	КонецЕсли; 
	//-- Устарело_Производство21
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Подразделение",  ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Приоритет", ОтборПриоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПриоритет));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер", ОтборМенеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборМенеджер));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСпискаКОформлению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокКОформлению,
		"Переработчик",
		ОтборПереработчик,,, 
		ЗначениеЗаполнено(ОтборПереработчик));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокКОформлению,
		"Подразделение",
		ОтборПодразделение,,,
		ЗначениеЗаполнено(ОтборПодразделение));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаКОформлению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"СписокРаспоряжений",
		СписокРаспоряжений.ВыгрузитьЗначения());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ТекущаяДата",
		ТекущаяДатаСеанса());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ДатаНачала",
		ОтборПериод.ДатаНачала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ДатаОкончания",
		ОтборПериод.ДатаОкончания);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ОтборПоРаспоряжению",
		ЕстьОтборПоРаспоряжению());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"СтатусРабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ПланируетсяГрафикПроизводства",
		УправлениеПроизводством.ИспользуетсяГрафикПроизводства());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказа(НовыйСтатус, ИмяСтатуса)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке заказов будет установлен статус ""%ИмяСтатуса%"". Продолжить?';
						|en = 'Status ""%ИмяСтатуса%"" will be set for the orders selected in the list. Continue?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);
	ДопПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус", ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗаказаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
    НовыйСтатус = ДополнительныеПараметры.НовыйСтатус;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, НовыйСтатус);
    
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		    Элементы.Список,
		    КоличествоОбработанных,
		    ВыделенныеСтроки.Количество(),
		    ИмяСтатуса);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПереработчик,ОтборМенеджер,ОтборПериод,ОтборПодразделение,ОтборПриоритет");

	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ЗаказПереработчикуРабочееМесто", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам()
	ОбеспечениеВДокументахКлиент.ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

#КонецОбласти
