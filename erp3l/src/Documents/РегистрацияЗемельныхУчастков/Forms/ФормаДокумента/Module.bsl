#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.РегистрацияЗемельныхУчастков.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	ПараметрыВыбораСтатейИАналитик = Документы.РегистрацияЗемельныхУчастков.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		УстановитьТекстНалоговойЛьготы(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО Тогда
		ТекущийОбъект.КодПоОКТМО = КодПоОКТМОПоМестуНахожденияОрганизации;
		ТекущийОбъект.КодПоОКАТО = КодПоОКАТОПоМестуНахожденияОрганизации;
		ТекущийОбъект.НалоговыйОрган = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		ТекущийОбъект.КодПоОКТМО = КодПоОКТМОВДругомНалоговомОргане;
		ТекущийОбъект.КодПоОКАТО = КодПоОКАТОВДругомНалоговомОргане;
	Иначе
		ТекущийОбъект.НалоговыйОрган = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ВыполнитьИнициализацию();
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РегистрацияЗемельныхУчастков", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПоказыватьКодПоОКАТО = (Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Год(Объект.Дата) < 2014);
	Элементы.КодПоОКАТОВДругомНалоговомОргане.Видимость = ПоказыватьКодПоОКАТО;
	Элементы.КодПоОКАТОПоМестуНахожденияОрганизации.Видимость = ПоказыватьКодПоОКАТО;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодКатегорииЗемельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборКода("КодКатегорииЗемель", "КатегорииЗемельныхУчастков");
	
КонецПроцедуры

&НаКлиенте
Процедура КБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборКода("КБК", "КБК");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНалоговойЛьготыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыЛьготы = Новый Структура(
	"НалоговаяСтавка,
	|ВариантУменьшенияСуммыНалога,
	|ЛьготнаяСтавка,
	|ДоляНеОблагаемойНалогомПлощадиЗнаменатель,
	|ДоляНеОблагаемойНалогомПлощадиЧислитель,
	|КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395,
	|КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391,
	|НалоговаяЛьготаПоНалоговойБазе,
	|НеОблагаемаяНалогомСумма,
	|ПроцентУменьшенияСуммыНалога,
	|СнижениеНалоговойСтавки,
	|СниженнаяНалоговаяСтавка,
	|СуммаУменьшенияСуммыНалога,
	|УменьшениеНалоговойБазыНаСумму,
	|УменьшениеНалоговойБазыПоСтатье391,
	|Период");
	ЗаполнитьЗначенияСвойств(ПараметрыЛьготы, Объект);
	
	ПараметрыЛьготы.Период = Объект.Дата;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЛьготы);
	ПараметрыФормы.Вставить("ТолькоПросмотр" , ТолькоПросмотр);
	
	ОткрытьФорму("Документ.РегистрацияЗемельныхУчастков.Форма.ФормаНастройкиЛьготы", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановкаНаУчетВНалоговомОрганеПриИзменении(Элемент)
	
	УстановитьДоступностьНалоговогоОргана(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПриИзменении(Элемент)
	НалоговыйОрганПриИзмененииНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.ОС, "ОсновноеСредство", ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтражениеРасходов

&НаКлиенте
Процедура ОтражениеРасходовСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ВнеоборотныеАктивыКлиентСервер.ПараметрыПодбора(Элементы.ОСОсновноеСредство, ЭтаФорма);
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", 
					ПараметрыПодбора, Элементы.ОС,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ОбщаяСобственность
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ОбщаяСобственность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ЖилищноеСтроительство
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДатаРегистрацииПравНаОбъектНедвижимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ЖилищноеСтроительство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДатаНачалаПроектирования.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ЖилищноеСтроительство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Дата(2008, 1, 1, 0, 0, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ОтражениеРасходовПодразделение
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтражениеРасходовПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтражениеРасходов.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Местонахождение ОС>';
																|en = '<FA location>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
		
	#Область ОтражениеРасходовНаправлениеДеятельности
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтражениеРасходовНаправлениеДеятельности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтражениеРасходов.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Направление деятельности ОС>';
																|en = '<FA line of business>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВыполнитьИнициализацию();
	
	УстановитьВидимость();
	УстановитьДоступностьНалоговогоОргана(ЭтаФорма);
	УстановитьТекстНалоговойЛьготы(ЭтаФорма);
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИнициализацию()
	
	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияВыполнена = Истина;
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО Тогда
		КодПоОКТМОПоМестуНахожденияОрганизации = Объект.КодПоОКТМО;
		КодПоОКАТОПоМестуНахожденияОрганизации = Объект.КодПоОКАТО;
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		КодПоОКТМОВДругомНалоговомОргане = Объект.КодПоОКТМО;
		КодПоОКАТОВДругомНалоговомОргане = Объект.КодПоОКАТО;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ПоказыватьКодПоОКАТО = (Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Год(Объект.Дата) < 2014);
	Элементы.КодПоОКАТОПоМестуНахожденияОрганизации.Видимость = ПоказыватьКодПоОКАТО;
	Элементы.КодПоОКАТОВДругомНалоговомОргане.Видимость = ПоказыватьКодПоОКАТО;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНалоговогоОргана(Форма)
	
	Элементы = Форма.Элементы;
	
	ПостановкаНаУчетСДругимКодомПоОКАТО = (Форма.Объект.ПостановкаНаУчетВНалоговомОргане 
												= ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО"));
												
	Элементы.КодПоОКТМОПоМестуНахожденияОрганизации.Доступность = ПостановкаНаУчетСДругимКодомПоОКАТО;
	Элементы.КодПоОКАТОПоМестуНахожденияОрганизации.Доступность = ПостановкаНаУчетСДругимКодомПоОКАТО;
	
	
	ПостановкаНаУчетВДругомНалоговомОргане = (Форма.Объект.ПостановкаНаУчетВНалоговомОргане 
												= ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане"));
												
	Элементы.НалоговыйОрган.Доступность = ПостановкаНаУчетВДругомНалоговомОргане;
	Элементы.КодПоОКТМОВДругомНалоговомОргане.Доступность = ПостановкаНаУчетВДругомНалоговомОргане;
	Элементы.КодПоОКАТОВДругомНалоговомОргане.Доступность = ПостановкаНаУчетВДругомНалоговомОргане;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНалоговойЛьготы(Форма)
	
	ТекстНалоговойЛьготы = "";
	
	Если Форма.Объект.НалоговаяЛьготаПоНалоговойБазе
			= ПредопределенноеЗначение("Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияПоСтатье395") Тогда
		
		ТекстНалоговойЛьготы = НСтр("ru = 'Освобождение от налогообложения по ст. 395 НК РФ';
									|en = 'Taxation exemption in compliance with art.395 of the Tax Code of the Russian Federation'");
		
		Если НЕ ПустаяСтрока(Форма.Объект.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395) Тогда
			ШаблонТекста = НСтр("ru = '( %1 )';
								|en = '( %1 )'");
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Форма.Объект.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Объект.НалоговаяЛьготаПоНалоговойБазе
			= ПредопределенноеЗначение("Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.УменьшениеНалоговойБазы") Тогда
		
		Если Форма.Объект.УменьшениеНалоговойБазыПоСтатье391 Тогда
		
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
				+ НСтр("ru = 'Не облагаемая налогом сумма 10 000 руб., установленная ст. 391 НК РФ';
						|en = 'Amount of 10,000 rub. specified in art. 391 of the Tax Code of the Russian Federation is not subject to taxes '");
			
			Если НЕ ПустаяСтрока(Форма.Объект.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391) Тогда
				ШаблонТекста = НСтр("ru = '( %1 )';
									|en = '( %1 )'");
				ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Форма.Объект.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма.Объект.УменьшениеНалоговойБазыНаСумму Тогда
			ШаблонТекста = НСтр("ru = 'Не облагаемая налогом сумма %1 руб., установленная местным нормативным актом';
								|en = 'Nontaxable amount of %1 rub. specified in the local standard regulation'");
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Форма.Объект.НеОблагаемаяНалогомСумма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Объект.НалоговаяЛьготаПоНалоговойБазе
			= ПредопределенноеЗначение("Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияМестное") Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			+ НСтр("ru = 'Освобождение от налогообложения, установленное местным нормативным актом';
					|en = 'Taxation exemption set by the local standard regulation'");
		
	КонецЕсли;
		
		
	Если Форма.Объект.НалоговаяЛьготаПоНалоговойБазе
			= ПредопределенноеЗначение("Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеОблагаемаяНалогомПлощадь") Тогда
		
		ШаблонТекста = НСтр("ru = 'Доля не облагаемой налогом площади %1 / %2';
							|en = 'Share of the area not subject to tax %1 / %2'");
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
				Форма.Объект.ДоляНеОблагаемойНалогомПлощадиЧислитель, Форма.Объект.ДоляНеОблагаемойНалогомПлощадиЗнаменатель);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.ПроцентУменьшенияСуммыНалога) Тогда
		
		ШаблонТекста = НСтр("ru = 'Уменьшение суммы налога на %1 %2';
							|en = 'Tax amount reduction in the amount of %1 %2'");
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Форма.Объект.ПроцентУменьшенияСуммыНалога, "%");
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Форма.Объект.СуммаУменьшенияСуммыНалога) Тогда
		
		ШаблонТекста = НСтр("ru = 'Уменьшение суммы налога в размере %1 руб.';
							|en = 'Tax amount reduction in the amount of %1 rub.'");
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Форма.Объект.СуммаУменьшенияСуммыНалога);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.СниженнаяНалоговаяСтавка) Тогда
		
		ШаблонТекста = НСтр("ru = 'Снижение налоговой ставки до %1 %2';
							|en = 'Reduce tax rate to %1 %2'");
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Форма.Объект.СниженнаяНалоговаяСтавка, "%");
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = НСтр("ru = 'Не применяется';
									|en = 'Not applied'");
	КонецЕсли;
	
	Форма.ТекстНалоговойЛьготы = ТекстНалоговойЛьготы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГоловнуюОрганизацию(Форма)
	
	Форма.ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Форма.Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКода(ИмяКода, НазваниеМакета)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта", "РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "РегистрацияЗемельныхУчастков");
	ПараметрыФормы.Вставить("НазваниеМакета", НазваниеМакета);
	ПараметрыФормы.Вставить("ТекущийПериод", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийКод", Объект[ИмяКода]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКода", ИмяКода);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборКодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ИмяКода = ДополнительныеПараметры.ИмяКода;
	
	ВыбранныйКод = РезультатЗакрытия;
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект[ИмяКода] = ВыбранныйКод;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйОрганПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда 
		КодПоОКТМОВДругомНалоговомОргане = Объект.НалоговыйОрган.КодПоОКТМО;
		КодПоОКАТОВДругомНалоговомОргане = Объект.НалоговыйОрган.КодПоОКАТО;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
