#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытийОбъекта


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
	    Возврат;
	КонецЕсли;
	ПротоколируемыеСобытияУХ.Начать(Ссылка);
	Попытка
		Отказ = НЕ ЗаполнитьЗаписатьДвиженияЭлиминации();
		РасширениеПроцессыИСогласованиеУХ.ЭскалацияУтвержденияЭтапа(ЭтотОбъект, Отказ);
	Исключение
		Отказ = Истина;
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(
			"Документ.Элиминация",
			ЭтотОбъект.Метаданные(),
			ЭтотОбъект.Ссылка,
			СтрокаОшибкаПроведенияДокумента(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ПротоколОшибок = ПротоколируемыеСобытияУХ.Завершить(
		"Документ.Элиминация",
		,
		Ссылка);
	Если ЗначениеЗаполнено(ПротоколОшибок) Тогда
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(
			Ссылка,
			,
			ПротоколОшибок,
			,
			ПериодОтчета,Сценарий);
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
	    Возврат;
	КонецЕсли;
	
	Если Ссылка.ПометкаУдаления = Ложь И ПометкаУдаления = Истина Тогда
		ОчиститьДвиженияЭлиминации();
	КонеЦесли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка Тогда
	    Возврат;
	КонецЕсли;
	ОчиститьДвиженияЭлиминации();
КонецПроцедуры


#КонецОбласти

#Область ВнутреннийПрограмныйИнтерфейс

Процедура ОчиститьДвиженияЭлиминации()
	ТрансформационныеКорректировкиУХ.ОчиститьДвиженияТрансформационнойКорректировкиПоСсылке(
		Ссылка, 
		Истина);
КонецПроцедуры

// Создает и заполняет трансформационные корректировки, или обновляет
//  уже созданные.
//
// Возвращает:
//	Булево - флаг успешности формирования и заполнения документов:
//			Истина - успешно.
//			Ложь - возникли ошибки, их можно посмотреть в протоколе.
//
Функция ЗаполнитьЗаписатьДвиженияЭлиминации()

	РеквизитыУП = МСФОВызовСервераУХ.ОсновныеРеквизитыУП(ОрганизацияДляЭлиминации, Дата, Сценарий);
	
	РегистрБухгалтерии =
		Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию(
		СтрокаИмяПланСчетовМСФО(),
		Истина,
		,
		Справочники.ТипыБазДанных.ТекущаяИБ);
		
	ДокТрансКорр = ПолучитьПодготовленныйДокументДляЗаписиДвижений(
		НЕ РеквизитыУП.ФормироватьПроводкиМСФО, 
		РеквизитыУП.ПланСчетовМСФО, 
		РегистрБухгалтерии);
		
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияДвиженийДокумента();
	ЗаполнитьДвиженияЭлиминацииБухПроводок(
		ДанныеДляЗаполнения.ПроводкиДляЭлиминации, 
		ДокТрансКорр);
		
	ЗаполнитьДвиженияЭлиминацииПоказателейОтчетов(
		ДанныеДляЗаполнения.ЗаписиЭкземпляровОтчетов, 
		ДокТрансКорр);
		
	ЗаписатьДвиженияПоДокументу(ДокТрансКорр);
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДвиженияЭлиминацииБухПроводок(
							ВыборкаПроводкиДляЭлиминации, 
							ДокТрансКорр)
	Перем СтрПроводки, ТаблицаПроводки;
	ТаблицаПроводки = ДокТрансКорр.Проводки;
	Пока ВыборкаПроводкиДляЭлиминации.Следующий() Цикл
		Если ВыборкаПроводкиДляЭлиминации.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрПроводки = ТаблицаПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрПроводки, ВыборкаПроводкиДляЭлиминации);
		СтрПроводки.РесурсРегистра = "СуммаВВалютеУчета";
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПодготовленныйДокументДляЗаписиДвижений(
											ИспользуютсяТК, 
											ПланСчетовМСФО, 
											РегистрБухгалтерии)
											
	ТрансформационныеКорректировкиУХ.ОчиститьДвиженияТрансформационнойКорректировкиПоСсылке(
			Ссылка,
			Истина);
			
	мТрансКорр = Документы.ТрансформационнаяКорректировка.ПолучитьТрансКорр(
		ЭтотОбъект.Ссылка, 
		Новый Структура("Проведен", Истина));
		
	Если мТрансКорр.Количество() > 0 Тогда
		ДокТрансКорр = мТрансКорр[0].ПолучитьОбъект();
		Если ДокТрансКорр.ПометкаУдаления Тогда
			ДокТрансКорр.ПометкаУдаления = Ложь;
		КонецЕсли;
	Иначе
		ДокТрансКорр = Документы.ТрансформационнаяКорректировка.СоздатьДокумент();
	КонецЕсли;
	
	// Заполняем документ объект
	ДокТрансКорр.Дата = Дата;
	ДокТрансКорр.ДатаОтраженияВУчете = Дата;
	ДокТрансКорр.ПериодОтчета = ПериодОтчета;
	ДокТрансКорр.Сценарий = Сценарий;
	ДокТрансКорр.ВидОперации = Справочники.ВидыОпераций.ЭлиминацияВГО;
	ДокТрансКорр.ОсновнаяВалюта = ВалютаЭлиминационныхПроводок;
	ДокТрансКорр.РасчетДатыОтраженияВУчете = Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода;
	ДокТрансКорр.ПланСчетов = ПланСчетовМСФО;
	ДокТрансКорр.Организация = ОрганизацияДляЭлиминации;
	ДокТрансКорр.ДвиженияПоРегиструБухгалтерии = Не ИспользуютсяТК;
	ДокТрансКорр.КорректировкиЗначенийПоказателей = ИспользуютсяТК;
	ДокТрансКорр.РегистрБухгалтерии = РегистрБухгалтерии;
	ДокТрансКорр.ИсходныйДокумент = Ссылка;
	
	ТЧПроводки = ДокТрансКорр.Проводки;
	ТЧПроводки.Очистить();	
	ТЧПоказатели = ДокТрансКорр.ДополнительныеКорректировки;
	ТЧПоказатели.Очистить();
	
	Возврат ДокТрансКорр;
	
КонецФункции

// Заполняет табличную часть "Показатели" документа трансформационная корректировка
// из данных выборка запроса.
//
Процедура ЗаполнитьДвиженияЭлиминацииПоказателейОтчетов(
											ЗаписиЭкземпляровОтчетов,
											ДокТрансКорр)
	Перем ВидОтчета, СтрПоказатели, ЭкземплярОтчета, 
			ЭкземплярыВидовОтчетов, ТаблицаЗначенийПоказателей;
	ТаблицаЗначенийПоказателей = ДокТрансКорр.ДополнительныеКорректировки;
	// ключ - вид отчета; значение - созданный документ Настраиваемый отчет
	ЭкземплярыВидовОтчетов = Новый Соответствие; 
	Пока ЗаписиЭкземпляровОтчетов.Следующий() Цикл
		Если ЗаписиЭкземпляровОтчетов.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрПоказатели = ТаблицаЗначенийПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрПоказатели, ЗаписиЭкземпляровОтчетов);
		ВидОтчета = ЗаписиЭкземпляровОтчетов.Показатель.Владелец;
		ЭкземплярОтчета = ЭкземплярыВидовОтчетов[ВидОтчета];
		Если ЗаписиЭкземпляровОтчетов.СоздатьЭкземплярОтчета Тогда
			Если ЭкземплярОтчета = Неопределено Тогда
				ЭкземплярОтчета = 
					СоздатьНастраиваемыйОтчетДляЭлиминацииПоказателей(
						ВидОтчета);
			КонецЕсли;
			СтрПоказатели.ЭкземплярОтчета = ЭкземплярОтчета;
			ЭкземплярыВидовОтчетов[ВидОтчета] = ЭкземплярОтчета;
		ИначеЕсли ЭкземплярОтчета = Неопределено Тогда
			ЭкземплярыВидовОтчетов[ВидОтчета] = СтрПоказатели.ЭкземплярОтчета;
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаЗначенийПоказателей.Количество() > 0 Тогда
		ДокТрансКорр.КорректировкиЗначенийПоказателей = Истина;
	КонецЕсли;
КонецПроцедуры

Функция  СоздатьНастраиваемыйОтчетДляЭлиминацииПоказателей(ВидОтчета)
	Перем СтруктураРеквизитов, ДокументОбъект;
	Возврат Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(
		ОрганизацияДляЭлиминации,
		ПериодОтчета,
		Сценарий,
		ВидОтчета,
		ВалютаЭлиминационныхПроводок);
КонецФункции

Функция ПолучитьДанныеДляЗаполненияДвиженийДокумента()
	Перем Запрос, мРезультат, Результат;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкиДляЭлиминации.ЗначениеВВалютеЭлиминации КАК Значение,
		|	ПроводкиДляЭлиминации.Комментарий,
		|	ПроводкиДляЭлиминации.ПоказательОтчета,
		|	ПроводкиДляЭлиминации.Аналитика1,
		|	ПроводкиДляЭлиминации.Аналитика2,
		|	ПроводкиДляЭлиминации.Аналитика3,
		|	ПроводкиДляЭлиминации.Аналитика4,
		|	ПроводкиДляЭлиминации.Аналитика5,
		|	ПроводкиДляЭлиминации.ПоказательОтчета.Владелец КАК ВидОтчета
		|ПОМЕСТИТЬ ЭлиминацияПоказателейОтчетов
		|ИЗ
		|	РегистрСведений.ПроводкиДляЭлиминации КАК ПроводкиДляЭлиминации
		|ГДЕ
		|	ПроводкиДляЭлиминации.ДокументЭлиминации = &Ссылка
		|	И ПроводкиДляЭлиминации.ПоказательОтчета <> ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлиминацияПоказателейОтчетов.ВидОтчета КАК ВидОтчета
		|ПОМЕСТИТЬ ВидыОтчетов
		|ИЗ
		|	ЭлиминацияПоказателейОтчетов КАК ЭлиминацияПоказателейОтчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлиминацияПоказателейОтчетов.ВидОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроводкиДляЭлиминации.Организация КАК Организация,
		|	ПроводкиДляЭлиминации.ЗначениеВВалютеЭлиминации КАК Значение,
		|	ПроводкиДляЭлиминации.Комментарий,
		|	ПроводкиДляЭлиминации.СубконтоДт1,
		|	ПроводкиДляЭлиминации.СубконтоДт2,
		|	ПроводкиДляЭлиминации.СубконтоДт3,
		|	ПроводкиДляЭлиминации.СубконтоКт1,
		|	ПроводкиДляЭлиминации.СубконтоКт2,
		|	ПроводкиДляЭлиминации.СубконтоКт3,
		|	ПроводкиДляЭлиминации.СчетДт,
		|	ПроводкиДляЭлиминации.СчетКт
		|ИЗ
		|	РегистрСведений.ПроводкиДляЭлиминации КАК ПроводкиДляЭлиминации
		|ГДЕ
		|	ПроводкиДляЭлиминации.ДокументЭлиминации = &Ссылка
		|	И ПроводкиДляЭлиминации.ПоказательОтчета = ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлиминацияПоказателейОтчетов.Значение,
		|	ЭлиминацияПоказателейОтчетов.Комментарий,
		|	ЭлиминацияПоказателейОтчетов.ПоказательОтчета КАК Показатель,
		|	ЭлиминацияПоказателейОтчетов.Аналитика1,
		|	ЭлиминацияПоказателейОтчетов.Аналитика2,
		|	ЭлиминацияПоказателейОтчетов.Аналитика3,
		|	ЭлиминацияПоказателейОтчетов.Аналитика4,
		|	ЭлиминацияПоказателейОтчетов.Аналитика5,
		|	ВЫБОР
		|		КОГДА НастраиваемыйОтчет.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяССылка)
		|		ИНАЧЕ НастраиваемыйОтчет.Ссылка
		|	КОНЕЦ КАК ЭкземплярОтчета,
		|	ИСТИНА КАК Раскрытие,
		|	ВЫБОР
		|		КОГДА НастраиваемыйОтчет.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СоздатьЭкземплярОтчета
		|ИЗ
		|	ЭлиминацияПоказателейОтчетов КАК ЭлиминацияПоказателейОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОтчетов КАК ВидыОтчетов
		|			ПО (НастраиваемыйОтчет.Организация = &Организация)
		|				И (НЕ НастраиваемыйОтчет.ПометкаУдаления)
		|				И (НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария)
		|				И (НастраиваемыйОтчет.Сценарий = &Сценарий)
		|				И НастраиваемыйОтчет.ВидОтчета = ВидыОтчетов.ВидОтчета
		|		ПО ЭлиминацияПоказателейОтчетов.ВидОтчета = НастраиваемыйОтчет.ВидОтчета";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Организация", ОрганизацияДляЭлиминации);
	мРезультат = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Результат.Вставить(
		"ПроводкиДляЭлиминации", 
		мРезультат[2].Выбрать());
	Результат.Вставить(
		"ЗаписиЭкземпляровОтчетов", 
		мРезультат[3].Выбрать());
	Возврат Результат;
КонецФункции

Процедура ЗаписатьДвиженияПоДокументу(ДокТрансКорр)
	ДокТрансКорр.Записать(
		РежимЗаписиДокумента.Проведение, 
		РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры


#КонецОбласти


#Область Локализация


Функция СтрокаОшибкаПроведенияДокумента()
	Возврат НСтр("ru='Ошибка проведения документа элиминации.'");
КонецФункции

Функция СтрокаИмяПланСчетовМСФО()
	Возврат НСтр("ru='МСФО'");
КонецФункции


#КонецОбласти


#КонецЕсли
