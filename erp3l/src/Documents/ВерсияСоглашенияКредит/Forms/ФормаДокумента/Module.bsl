#Область ПеременныеФормы
&НаКлиенте
Перем ИсходнаяДатаСтроки;
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КэшируемыеЗначения = Новый Структура;
	
	ДоговорыКонтрагентовФормыУХ.ПриСозданииНаСервереВерсииСоглашения(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ФинансовыеИнструментыФормы.ПриСозданииНаСервереФормыГрафика(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ФинансовыеИнструментыФормы.ПриСозданииНаСервере_СчетаУчета(ЭтаФорма);
	
	РежимРедактирования = НЕ Объект.Проведен;
	
	ИнициализироватьИнструмент();
	ФинансовыеИнструментыФормы.ЗаполнитьСписокВыбораВерсииДляСравнения(ЭтотОбъект);
	
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьОтборСтрокГрафика(ЭтотОбъект);
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьТекстДлительность(ДлительностьТекст, Объект.ДатаНачалаДействия, Объект.ДатаОкончанияДействия);
		
	УстановитьУсловноеОформление();
	
	БюджетДвиженияДенежныхСредствИспользуется = ПолучитьФункциональнуюОпцию("БюджетДвиженияДенежныхСредствИспользуется");
	БюджетДоходовРасходовИспользуется = ПолучитьФункциональнуюОпцию("БюджетДоходовРасходовИспользуется");
	БюджетЗакупокИспользуется = ПолучитьФункциональнуюОпцию("БюджетЗакупокИспользуется");
		
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	ТекстНадписиПоручители = ТекстНадписиПоручители();
	
	УстановитьСтильПредупрежденияОНарушенииКовенантов(Элементы.ПредупреждениеОНарушенииКовенантовОсновное);
	УстановитьСтильПредупрежденияОНарушенииКовенантов(Элементы.ПредупреждениеОНарушенииКовенантовРасчеты);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
	Иначе
		// Не новый объект.
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ДоговорыКонтрагентовФормыУХ.ПриЧтенииНаСервереВерсииСоглашения(ЭтотОбъект, ТекущийОбъект);
	ПриЧтенииСозданииНаСервере();
	ТекстНадписиПредупреждениеОНарушенииКовенантов = ДоговорыКонтрагентовФормыУХ.ТекстНадписиПредупреждениеОНарушенииКовенантов(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриОткрытииВерсииСоглашения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ГосКонтракты" И Объект.Ссылка = Параметр Тогда 	
		Объект.ГосударственныйКонтракт = Источник;
		ПриИзмененииГосударственногоКонтрактаНаСервере();	
	#Область УниверсальныеПроцессыСогласование
	ИначеЕсли ИмяСобытия = "ОбъектСогласован" ИЛИ ИмяСобытия = "ОбъектОтклонен" 
		ИЛИ ИмяСобытия = "МаршрутИнициализирован" ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	#КонецОбласти	
	
	ИначеЕсли ИмяСобытия = "Запись_ВерсияФИ" Тогда
		ИнициализироватьИнструмент();
		ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиент.ОбработкаОповещенияВерсииСоглашения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.ОбработкаЗаписиНовогоВерсияСоглашения(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ДоговорыКонтрагентовФормыУХ.ОбработкаПроверкиЗаполненияНаСервереВерсияСоглашения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ДоговорыКонтрагентовФормыУХКлиент.ПередЗаписьюВерсииСоглашения(ЭтотОбъект, Отказ, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДоговорыКонтрагентовФормыУХ.ПередЗаписьюНаСервереВерсияСоглашения(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ОграниченияРамочногоСоглашения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшируемыеЗначения, "Ограничения");
	Если ЗначениеЗаполнено(ОграниченияРамочногоСоглашения) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Ограничения", ОграниченияРамочногоСоглашения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДоговорыКонтрагентовФормыУХ.ПриЗаписиНаСервереВерсияСоглашения(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоговорыКонтрагентовФормыУХ.ПослеЗаписиНаСервереВерсияСоглашения(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимРедактирования = Ложь;
	КонецЕсли;
	ИнициализироватьИнструмент();
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПослеЗаписиВерсииСоглашения(ЭтотОбъект, ПараметрыЗаписи);
	
	ФинансовыеИнструментыФормыКлиент.ПослеЗаписиВерсииСоглашения(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Результат = ДоговорыКонтрагентовФормыУХКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	Если Результат.Свойство("ОбновитьГрафикРасчетов") Тогда
		ОбновитьГрафикНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииНомераДоговора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииДатыДоговора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	СтарыйКонтрагент = Объект.Контрагент;
	
	ПартнерПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> СтарыйКонтрагент Тогда
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКонтрагентаКлиент(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКонтрагентаКлиент(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВстречныйДоговорПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВстречногоДоговора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВстречныйДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.СозданиеВстречногоДоговора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВалютыВзаиморасчетов(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияКурсаПлатежаПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСпособаОпределенияКурсаПлатежа(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСоглашенияПриИзменении(Элемент)
	
	Если Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.РамочныйДоговор") Тогда
		
		Объект.ЭтоКредитнаяЛиния = Истина;
		ЭтоКредитнаяЛинияЧисло = 1;
		
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВидаСоглашения(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПредставленияРуководителяКонтрагента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоговорыКонтрагентовФормыУХКлиент.НачалоВыбораРуководителяКонтрагента(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораОткрытие(Элемент, СтандартнаяОбработка)
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытиеФайлДоговора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораСоздание(Элемент, СтандартнаяОбработка)
	ДоговорыКонтрагентовФормыУХКлиент.СозданиеФайлаДоговора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиОбеспечениеОбязательствОрганизацииНажатие(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПерейтиОбеспечениеОбязательствОрганизации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиОбеспечениеОбязательствКонтрагентаНажатие(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПерейтиОбеспечениеОбязательствКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыданноеОбеспечениеПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОбеспечениеОбязательствОрганизации(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПолученноеОбеспечениеПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОбеспечениеОбязательствКонтрагента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФиксированныйСчетОрганизацииПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииФиксированныйСчетОрганизации(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФиксированныйСчетКонтрагентаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииФиксированныйСчетКонтрагента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодписанПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПодписан(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОпорныйГрафикПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтсчетаПроцентныхПериодовПриИзменении(Элемент)
	
	Если не Объект.ДатаОтсчетаПроцентныхПериодов = ПредопределенноеЗначение("Перечисление.ВидыДатОтсчетаПериодичности.ДатаПервогоПогашения") тогда
		Объект.ДатаОкончанияПервогоПроцентногоПериода = Неопределено;
	КонецЕсли;
	
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроцентнойСтавкиПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеИзменениямиСтавкиПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеУправлениеИзменениямиСтавкиПлавающаяПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СуммаКредитаПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыДоговора(ЭтотОбъект, Элемент);
	
	Если Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация") Тогда
		УстановитьТекстЛимит(ТекстПревышениеЛимита,Объект, КэшируемыеЗначения);
	КонецЕсли;
	
	ЗаполнитьВыборкуПогашение();
	ВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	ПриИзмененииПериодаДействияИнструмента();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	ПриИзмененииПериодаДействияИнструмента();
КонецПроцедуры

&НаКлиенте
Процедура ВыплачиватьПроцентыПериодическиПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияДляСравненияПриИзменении(Элемент)
	ЗаполнитьТаблицуИзмененийГрафика();
КонецПроцедуры

&НаКлиенте
Процедура ВыплачиватьПроцентыВДатыПогашенияТелаПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьУплатыПроцентовПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПервогоПроцентногоПериодаПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СдвигДатыУплатыПроцентовПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТочкаОтсчетаСдвигаДатыУплатыПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроцентнаяСтавкаПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИндикативнаяСтавкаПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаржаПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлавающаяСтавкаМинимумПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлавающаяСтавкаМаксимумПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СдвигДатыФиксацииСтавкиПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТочкаОтсчетаДатыФиксацииСтавкиПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БазаДляРасчетаПроцентовПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереносДатСНерабочихДнейПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменяетсяДлительностьПроцентногоПериодаПриПереносеПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СостояниеДоговораПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСостоянияДоговора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУчетаФИПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПриИзмененииПараметрыУчетаФИ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭтоКредитнаяЛинияЧислоПриИзменении(Элемент)
	
	Если ЭтоКредитнаяЛинияЧисло = 1 Тогда
		Объект.ЭтоКредитнаяЛиния = Истина;
	Иначе
		Объект.ЭтоКредитнаяЛиния = Ложь;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыйДоговорПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.БазовыйДоговор) Тогда
		БазовыйДоговорПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекстПроизводственныеКалендариНажатие(Элемент, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.ИзменитьПроизводственныеКалендари(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьНачисленияПроцентовПриИзменении(Элемент)
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоручителейЗавершение(МассивПоручителей, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МассивПоручителей) = Тип("Массив") Тогда
		Объект.Поручители.Очистить();
		ОбщегоНазначенияКлиентСерверУХ.ЗаполнитьТаблицуИзМассива(Объект.Поручители, МассивПоручителей, "Поручитель");
		ТекстНадписиПоручители = ТекстНадписиПоручители();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачислениеПроцентовНаОтчетныеДатыПриИзменении(Элемент)
	
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодичностьКовенантовПриИзменении(Элемент)
	УстановитьФильтрКовенантов(Элементы.Ковенанты, ОтборПериодичностьКовенантов);
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОНарушенииКовенантовОсновноеНажатие(Элемент, СтандартнаяОбработка)
	ПредупреждениеОНарушенииКовенантовОбработкаНажатия(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОНарушенииКовенантовРасчетыНажатие(Элемент, СтандартнаяОбработка)
	ПредупреждениеОНарушенииКовенантовОбработкаНажатия(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РежимИспользованияГрафикаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоручителиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Поручители", Объект.Поручители);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПоручителейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ВерсияСоглашенияКредит.Форма.ФормаПоручители", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ПриИзмененииЗначенияАналитикиПоУмолчаниюНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	ПриИзмененииЗначенияАналитикиПоУмолчаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОбъектОсновнойПроектПриИзменении(Элемент)
	ПриИзмененииЗначенияАналитикиПоУмолчаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПаспортСделкиПриИзменении(Элемент)
	ТребуетсяПаспортСделкиПриИзмененииНаСервере();
КонецПроцедуры  

&НаСервере
Процедура ТребуетсяПаспортСделкиПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьСвязиПараметровВыбораБанковскихСчетов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикРасчетов

&НаКлиенте
Процедура ГрафикРасчетовПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Элементы.ГрафикРасчетовКонтекстноеМенюРасшифроватьСуммуГрафика.Доступность = 
		(Элемент.ТекущийЭлемент = Элементы.ГрафикРасчетовПроцентыНачислено
		 ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрафикРасчетовПроцентыУплачено);
		
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	Элементы.ГрафикРасчетовКонтекстноеМенюОткрытьИсториюИзмененияЗначения.Доступность =
		ДоговорыКонтрагентовФормыУХКлиент.ДоступностьПоказатьИсториюИзмененияЗначения(ИмяЭлемента, ОписаниеГрафика);
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриАктивизацииЯчейкиГрафикаРасчетов(ЭтотОбъект, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ДоговорыКонтрагентовФормыУХКлиент.ПередНачаломДобавленияСтрокиГрафикаРасчетов(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПередНачаломИзменения(Элемент, Отказ)
	ДоговорыКонтрагентовФормыУХКлиент.ПередНачаломИзмененияСтрокиГрафикаРасчетов(ЭтотОбъект, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПередУдалением(Элемент, Отказ)
	ДоговорыКонтрагентовФормыУХКлиент.ПередНачаломУдаленияСтрокиГрафикаРасчетов(ЭтотОбъект, Элемент, Отказ);
	ОбновитьГрафикНаСервере();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикЛинейный

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПередУдалением(Элемент, Отказ)	
	ДоговорыКонтрагентовФормыУХКлиент.ПередУдалениемСтрокиГрафика(ЭтотОбъект, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ДоговорыКонтрагентовФормыУХКлиент.ПриНачалеРедактированияСтрокиГрафика(ЭтотОбъект, НоваяСтрока, Копирование, ИсходнаяДатаСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПодключитьОбработчикОжидания("ПриОкончанииРедактированияДетализацииГрафика", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияДетализацииГрафика()
	ОбработатьИзменениеСекцииНаСервере(Объект.ГрафикРасчетов.Индекс(Элементы.ГрафикРасчетов.ТекущиеДанные), "ОсновнойДолг");
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПередНачаломИзменения(Элемент, Отказ)
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПриАктивизацииСтроки(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриАктивизацииСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПослеУдаления(Элемент)
	ОбработатьИзменениеСекцииНаСервере(Объект.ГрафикРасчетов.Индекс(Элементы.ГрафикРасчетов.ТекущиеДанные), "ОсновнойДолг");
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйДатаПриИзменении(Элемент)	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииДатыСтрокиГрафика(ЭтотОбъект, Элемент, ИсходнаяДатаСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйСуммаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыСтрокиГрафика(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйСуммаКорректировкаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыКорректировкиСтрокиГрафика(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйОперацияГрафикаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОперацииСтрокиГрафика(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтатьяБюджета_ПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтатьиБюджета_ПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиКовенанты
&НаКлиенте
Процедура КовенантыПриИзменении(Элемент)
	КовенантыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КовенантыПриИзмененииНаСервере()
	ТекстНадписиПредупреждениеОНарушенииКовенантов = 
		ДоговорыКонтрагентовФормыУХ.ТекстНадписиПредупреждениеОНарушенииКовенантов(Объект);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСклоненияРуководительКонтрагента(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияРуководительКонтрагента(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияДолжностьРуководителяКонтрагента(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияДолжностьРуководителяКонтрагента(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияРуководитель(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияРуководитель(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияДолжностьРуководителя(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияДолжностьРуководителя(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыПроцентов(Команда)
	РассчитатьСуммыПроцентовНаСервере();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПроцентныеСтавки(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсходныеДанные", Объект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НадписьРедактироватьПроцентныеСтавкиПродолжение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РедактированиеГрафика.Форма.ФормаРедактированияПроцентныхСтавок", СтруктураПараметров, ЭтотОбъект,,,,ОписаниеОповещения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКомиссииИШтрафы(Команда)
	Элементы.ГрафикОтображатьКомиссииИШтрафы.Пометка = НЕ Элементы.ГрафикОтображатьКомиссииИШтрафы.Пометка;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНачисления(Команда)
	Элементы.ГрафикОтображатьНачисления.Пометка = НЕ Элементы.ГрафикОтображатьНачисления.Пометка;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСуммуГрафика(Команда)
	
	ФинансовыеИнструментыФормыКлиент.РасшифроватьСуммуГрафика(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВерсию(Команда)
	
	РежимРедактирования = НЕ РежимРедактирования;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФактическиеДанные(Команда)
	ОбновитьФактическиеДанныеНаСервере();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюИзмененияЗначения(Команда)
	
	ФинансовыеИнструментыФормыКлиент.ПоказатьИсториюИзмененияЗначения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДатуЗагрузкиФакта(Команда)
	Объект.ГраницаФактическихДанных = Дата(1,1,1);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВычисленияАвтоматически(Команда)
	
	Объект.АвтоматическиеВычисления = Истина;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВычисленияВручную(Команда)
	
	Объект.АвтоматическиеВычисления = Ложь;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

// Относительно ERP, заменим параметр Объект на Форма, чтобы получить доступ к ее реквизитам.
&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьНомерДатаСумма(ДанныеСтроки, Форма)
	
	Объект = Форма.Объект;
	ХарактерДоговора = Форма.ХарактерДоговора;
	
	Если Не ДанныеСтроки = Неопределено Тогда
		Если ДанныеСтроки.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыПодтверждающихДокументов.КредитныйДоговор") 
			И ХарактерДоговора = ПредопределенноеЗначение("Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм") 
			Или ДанныеСтроки.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыПодтверждающихДокументов.ДепозитныйДоговор")
			И ХарактерДоговора = ПредопределенноеЗначение("Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит") Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект, "Номер, Дата");
			ДанныеСтроки.Сумма = Объект.СуммаТраншей;
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДетализацию(Команда)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьВидимостьДетализации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоправкиВДетализацииГрафика(Команда)
	
	ОтображатьПоправки = Не Элементы.ГрафикРасчетовЛинейныйОтображатьПоправкиВДетализацииГрафика.Пометка;
	
	Элементы.ГрафикРасчетовЛинейныйОтображатьПоправкиВДетализацииГрафика.Пометка = ОтображатьПоправки;
	
	Элементы.ГрафикРасчетовЛинейныйСуммаРасчет.Видимость = ОтображатьПоправки;
	Элементы.ГрафикРасчетовЛинейныйСуммаКорректировка.Видимость = ОтображатьПоправки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьФактВГрафике(Команда)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьВидимостьКолонокФакта(ЭтотОбъект);
КонецПроцедуры

#Область КонтрольДокумента

&НаКлиенте
Процедура ВыполнитьКомандуУХ(Команда)
	
	Если Команда.Имя = "ВыполнитьКонтрольДокумента" Тогда
		ВыполнитьКонтрольДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтрольДокумента()
	ВыполнитьКонтрольДокументаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКонтрольДокумента()
	ПодключитьОбработчикОжидания("Подключаемый_КонтрольДокумента", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольДокументаНаСервере()
	КонтрольУХ.ВыполнитьИнтерактивныйКонтроль(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД =  Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонтрольУХКлиент.ПоказатьРасшифровкуКонтроля(Объект, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаПриАктивизацииЯчейки(Элемент)
	Элемент.ТекущаяСтрока = неопределено;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РассчитатьСуммыПроцентовНаСервере(ОбновлятьГрафик = Истина, Отказ = Ложь)

	ПересчетВозможен = (Объект.ВидСоглашения <> Перечисления.ВидыСоглашений.РамочныйДоговор
						И РаботаСДоговорамиКонтрагентовУХКлиентСервер.ДоступенГрафикРасчетовВерсияСоглашенияКредит(Объект.ВидДоговораУХ)
						И РаботаСДоговорамиКонтрагентовУХКлиентСервер.ПроверитьЗаполнениеУсловийФинансовогоИнструмента(ЭтотОбъект));
	
	Если Не ПересчетВозможен Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Секции = Новый Массив;
	Если Не ФинансовыеИнструментыУХ.СтрокиСекцииГрафика(Объект.ГрафикРасчетов, ОписаниеГрафика["ОсновнойДолг"]).Количество() Тогда
		Секции.Добавить("ОсновнойДолг");
	КонецЕсли;
	Секции.Добавить("Проценты");
	СтруктураДействий.Вставить("Пересчитать", Новый Структура("СекцииГрафика", Секции));
	ФинансовыеИнструментыУХ.ПересчетГрафика(Объект, 0, ОписаниеГрафика, ОперацииГрафика, СтруктураДействий, Отказ);
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	
	Если ОбновлятьГрафик тогда
		ОбновитьГрафикНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРедактироватьПроцентныеСтавкиПродолжение(Результат, Параметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		ЗагрузитьТаблицуПроцентныхСтавок(Результат);
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуПроцентныхСтавок(АдресХранилища)
	
	Объект.ПроцентныеСтавки.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));
	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыборкуПогашение()
	
	Если Не РаботаСДоговорамиКонтрагентовУХКлиентСервер.ПроверитьЗаполнениеУсловийФинансовогоИнструмента(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	ФинансовыеИнструментыУХ.ОбновитьОсновнойДолгПоДаннымОбъекта(Объект, ОписаниеГрафика,,,ОперацииГрафика);

	Если Объект.АвтоматическиеВычисления Тогда
		РассчитатьСуммыПроцентовНаСервере();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИнструмент()
		
	// Инициализируем описание для общих методов.
	КолонкиРасчет = ФинансовыеИнструментыФормы.РасчетныеКолонки(ОписаниеГрафика);
	ДоговорыКонтрагентовФормыУХ.ИнициализироватьПереченьОперацийГрафика(ЭтотОбъект);
	
	АктуальнаяВерсия = РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(Объект.ДоговорКонтрагента);
	ОбновитьВстречныеДанные();
	
	Если Объект.ЭтоКредитнаяЛиния Тогда
		ЭтоКредитнаяЛинияЧисло = 1;
	Иначе
		ЭтоКредитнаяЛинияЧисло = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И (Объект.ВидСоглашения = Перечисления.ВидыСоглашений.РамочныйДоговор
		ИЛИ Объект.ВидСоглашения = Перечисления.ВидыСоглашений.ДоговорСУсловием) Тогда
			
		КэшируемыеЗначения.Вставить("СводнаяИнформацияПоДоговору", Документы.ВерсияСоглашенияКредит.СводнаяИнформацияПоДоговору(Объект.ДоговорКонтрагента, Объект.Сумма, Объект.ВозобновляемыйЛимит));
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КэшируемыеЗначения.СводнаяИнформацияПоДоговору);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БазовыйДоговор) Тогда
		
		КэшируемыеЗначения.Вставить("Ограничения",
			Документы.ВерсияСоглашенияКредит.ПолучитьОграниченияПоРамочномуСоглашению(Объект.БазовыйДоговор, Объект.ДоговорКонтрагента, Объект.ДатаНачалаДействия));
			
		УстановитьТекстЛимит(ТекстПревышениеЛимита,Объект, КэшируемыеЗначения);
		
	КонецЕсли;
	
	УстановитьТекстОграничений(ТекстОграничений, Объект, КэшируемыеЗначения);
	Элементы.ГруппаИтогоПоДоговору.Заголовок = СтрШаблон(НСтр("ru = 'Всего по договору (на %1)'"), Формат(ТекущаяДата(),"ДЛФ=D"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ДоговорыКонтрагентовФормыУХ.ДобавитьЭлементыУсловногоОформленияГрафикРасчетов(ЭтотОбъект);	
	ФинансовыеИнструментыФормы.УстановитьУсловноеОформлениеФормыГрафика(УсловноеОформление, ОписаниеГрафика);	

КонецПроцедуры

#Область ЗагрузкаГрафика

&НаСервере
Процедура ОбновитьФактическиеДанныеНаСервере()
	
	СтруктураДействий = Новый Структура("ЗагружатьФакт");
	ОбновитьГрафикНаСервере(СтруктураДействий);
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВстречныеДанные()

	ВстречныйФинансовыйИнструмент = РегистрыСведений.СвязанныеДоговоры.ПолучитьВстречныйДоговор(Объект.ДоговорКонтрагента);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриИзмененииПериодаДействияИнструмента()
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьТекстДлительность(ДлительностьТекст, Объект.ДатаНачалаДействия, Объект.ДатаОкончанияДействия);
	ЗаполнитьВыборкуПогашение();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстОграничений(ТекстОграничений, Объект, КэшируемыеЗначения)
	
	Ограничения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшируемыеЗначения, "Ограничения");
	Если НЕ ЗначениеЗаполнено(Ограничения) Тогда
		ТекстОграничений = "";
		Возврат;
	КонецЕсли;
	
	СтрокиОграничения = Новый Массив;
	СтрокиОграничения.Добавить(НСтр("ru = 'Привлечение средств возможно:'"));
	
	// Период доступности.
	Если ЗначениеЗаполнено(Ограничения.ДатаНачалаДоступности) ИЛИ ЗначениеЗаполнено(Ограничения.ДатаОкончанияДоступности) Тогда
		СтрокиПериодДоступности = Новый Массив;
		СтрокиПериодДоступности.Добавить(НСтр("ru = ' - в период'"));
		
		Если ЗначениеЗаполнено(Ограничения.ДатаНачалаДоступности) Тогда
			СтрокиПериодДоступности.Добавить(НСтр("ru = 'с '") + Формат(Ограничения.ДатаНачалаДоступности, "ДЛФ=D"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ограничения.ДатаОкончанияДоступности) Тогда
			СтрокиПериодДоступности.Добавить(НСтр("ru = 'по '") + Формат(Ограничения.ДатаОкончанияДоступности, "ДЛФ=D"));
		КонецЕсли;
		
		СтрокиОграничения.Добавить(СтрСоединить(СтрокиПериодДоступности, " "));
	КонецЕсли;
	
	// Сумма сделки.
	Если ЗначениеЗаполнено(Ограничения.МинимальнаяСуммаСделки) ИЛИ ЗначениеЗаполнено(Ограничения.МаксимальнаяСуммаСделки) Тогда
		СтрокиСуммаСделки = Новый Массив;
		СтрокиСуммаСделки.Добавить(НСтр("ru = ' - в размере'"));
		
		Если ЗначениеЗаполнено(Ограничения.МинимальнаяСуммаСделки) Тогда
			СтрокиСуммаСделки.Добавить(НСтр("ru = 'не менее '") + Ограничения.МинимальнаяСуммаСделки + " " + Объект.ВалютаВзаиморасчетов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ограничения.МинимальнаяСуммаСделки) И ЗначениеЗаполнено(Ограничения.МаксимальнаяСуммаСделки) Тогда
			СтрокиСуммаСделки.Добавить(НСтр("ru = 'и'"));
		КонецЕсли;

		
		Если ЗначениеЗаполнено(Ограничения.МаксимальнаяСуммаСделки) Тогда
			СтрокиСуммаСделки.Добавить(НСтр("ru = 'не более '") + Ограничения.МаксимальнаяСуммаСделки  + " " + Объект.ВалютаВзаиморасчетов);
		КонецЕсли;
		
		СтрокиОграничения.Добавить(СтрСоединить(СтрокиСуммаСделки, " "));
	КонецЕсли;
	
	// Срок привлечения.
	Если ЗначениеЗаполнено(Ограничения.МинимальныйСрок) ИЛИ ЗначениеЗаполнено(Ограничения.МаксимальныйСрок) Тогда
		СтрокиСрокСделки = Новый Массив;
		СтрокиСрокСделки.Добавить(НСтр("ru = ' - на срок'"));
		
		Если ЗначениеЗаполнено(Ограничения.МинимальныйСрок) Тогда
			СтрокиСрокСделки.Добавить(НСтр("ru = 'не менее '") + Ограничения.МинимальныйСрок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ограничения.МинимальныйСрок) И ЗначениеЗаполнено(Ограничения.МаксимальныйСрок) Тогда
			СтрокиСрокСделки.Добавить(НСтр("ru = 'и'"));
		КонецЕсли;

		
		Если ЗначениеЗаполнено(Ограничения.МаксимальныйСрок) Тогда
			СтрокиСрокСделки.Добавить(НСтр("ru = 'не более '") + Ограничения.МаксимальныйСрок);
		КонецЕсли;
		
		СтрокиСрокСделки.Добавить(НСтр("ru = 'дней'"));
		
		СтрокиОграничения.Добавить(СтрСоединить(СтрокиСрокСделки, " "));
	КонецЕсли;
	
	Если СтрокиОграничения.Количество() > 1 Тогда
		ТекстОграничений = Новый ФорматированнаяСтрока(СтрСоединить(СтрокиОграничения, Символы.ПС));
	Иначе
		ТекстОграничений = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстЛимит(ТекстЛимит, Объект, КэшируемыеЗначения)
	ОбщийЛимит = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшируемыеЗначения.Ограничения,"СвободныйОстатокЛимита",0);
	ВозобновляемыйЛимит = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшируемыеЗначения.Ограничения,"ВозобновляемыйЛимит", Ложь);
	ТекстВидаЛимита = ?(ВозобновляемыйЛимит, НСтр("ru = 'возобновляемый'"), НСтр("ru = 'невозобновляемый'"));
	ОстатокЛимитаПослеПривлечения = ОбщийЛимит - Объект.Сумма;
	
	Если ОстатокЛимитаПослеПривлечения >=0 Тогда
		Текст = СтрШаблон(НСтр("ru = 'Доступно %1 %2 (%3)'"), ОстатокЛимитаПослеПривлечения, Объект.ВалютаВзаиморасчетов, ТекстВидаЛимита);
		ТекстЛимит = Новый ФорматированнаяСтрока(Текст,,WebЦвета.СинийСоСтальнымОттенком);
	Иначе
		Текст = СтрШаблон(НСтр("ru = 'Лимит превышен на %1 %2 (%3)'"), -ОстатокЛимитаПослеПривлечения, Объект.ВалютаВзаиморасчетов, ТекстВидаЛимита);
		ТекстЛимит = Новый ФорматированнаяСтрока(Текст,,WebЦвета.Кирпичный);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИзмененийГрафика()
	ФинансовыеИнструментыФормы.ПересчетТаблицыИзменений(ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСекцииНаСервере(ИндексСтроки, ИмяЭлемента);
	
	СтруктураДействий = Новый Структура;
	ИмяСекции = ФинансовыеИнструментыФормыКлиентСервер.ПолучитьИмяСекцииГрафикаПоИмениГруппы(ИмяЭлемента);
		
	Если Объект.АвтоматическиеВычисления Тогда
		СтруктураДействий.Вставить("Замкнуть", Новый Структура("СекцииГрафика", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяСекции)));
		Если ИмяСекции = "ОсновнойДолг" Тогда
			СтруктураДействий.Вставить("Пересчитать", Новый Структура("СекцииГрафика", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Проценты")));
		КонецЕсли;
	КонецЕсли;	
	ФинансовыеИнструментыУХ.ПересчетГрафика(Объект, ИндексСтроки, ОписаниеГрафика, ОперацииГрафика, СтруктураДействий);

	ДоговорыКонтрагентовФормыУХ.ОбновитьТаблицуГрафикРасчетов(ЭтотОбъект, СтруктураДействий, ОписаниеГрафика);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("ДоговорОбъект"));

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГосударственногоКонтрактаНаСервере()
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииГосударственногоКонтактаСервер(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииОрганизацииСервер(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииКонтрагентаСервер(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура БазовыйДоговорПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииБазовогоДоговораСервер(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция РеквизитыОбъекта(ПодтверждающийДокумент)
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодтверждающийДокумент, "Зашифрован, Редактирует");
	
	ФайлРедактируется = ЗначениеЗаполнено(РеквизитыОбъекта.Редактирует)
	                  И РеквизитыОбъекта.Редактирует = ТекущийПользователь;
	РеквизитыОбъекта.Вставить("ФайлРедактируется", ФайлРедактируется);
		
	Возврат РеквизитыОбъекта;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат РаботаСФайлами.ДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура ПодтверждающиеДокументыФайлНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметрыВыбораВладельца = Новый Структура("Действие", Результат.Значение);
		
		ВыборВладельцаФайлаЗавершение(Новый Структура("Значение", Объект.Ссылка), ДополнительныеПараметрыВыбораВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыборВладельцаФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыбранныйВладелецФайла = Результат.Значение;
		
		Если ДополнительныеПараметры.Действие = "ДобавлениеФайлаСДиска" Тогда
			
			ИдентификаторФайла = Новый УникальныйИдентификатор;
			ДобавляетсяФайлПодтверждающегоДокумента = Истина;
			
			РаботаСФайламиКлиент.ДобавитьФайлы(ВыбранныйВладелецФайла, ИдентификаторФайла);
			
		ИначеЕсли ДополнительныеПараметры.Действие = "ВыборИзПрисоединенныхФайлов" Тогда
			
			РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ВыбранныйВладелецФайла, Элементы.ПодтверждающиеДокументыФайл);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораПартнера()
	
	МассивПараметровВыбораПартнера = Новый Массив;
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораПартнера);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "Партнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаСчетКонтрагентаВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "БанковскийСчетКонтрагента", Объект.ХозяйственнаяОперация);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ХарактерДоговора = УправлениеДоговорамиУХВызовСервераПовтИсп.ВидДоговораБП(Объект.ВидДоговораУХ);
	
	ЗаполнитьПараметрыВыбораПартнера();
	УстановитьОграничениеТипаСтатьиДоходовРасходов();
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> СтарыйКонтрагент Тогда
		
		КонтрагентПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаСтатьиДоходовРасходов()

	Если Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ЗаемВыданный Тогда
		ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	КонецЕсли;
	
	Элементы.СтатьяДоходовРасходовКомиссии.ОграничениеТипа = ОграничениеТипа;
	Элементы.СтатьяДоходовРасходовПроцентов.ОграничениеТипа = ОграничениеТипа;
	
КонецПроцедуры


&НаСервере
Функция ТекстНадписиПоручители()
	
	ТекстПустогоЗначения = НСтр("ru = '<Значение не заполнено>'");
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока из Объект.Поручители Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Поручитель) Тогда
			МассивСтрок.Добавить(ТекСтрока.Поручитель);
		КонецЕсли;
	КонецЦикла; 
	
	Если МассивСтрок.Количество() Тогда
		Возврат СтрСоединить(МассивСтрок, ", ");
	Иначе
		Возврат ТекстПустогоЗначения;
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ОбновитьГрафикНаСервере(Знач СтруктураДействий = Неопределено)
	РассчитатьСуммыПроцентовНаСервере(Ложь);
	ДоговорыКонтрагентовФормыУХ.ОбновитьТаблицуГрафикРасчетов(ЭтотОбъект, СтруктураДействий, ОписаниеГрафика);
КонецПроцедуры


&НаКлиенте
Процедура ПредупреждениеОНарушенииКовенантовОбработкаНажатия(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Необходимо сохранить документ перед открытием отчета по ковенантам'"));
		Возврат;
	КонецЕсли;	
	
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьОтчетПоКовенантамПоКредиту(
		Объект.Ссылка, 
		Новый Структура("РеакцияБанкаНаНарушение", 
			ПредопределенноеЗначение("Перечисление.РеакцииБанковНаНарушенияКовенантов.ОтзывКредита")));
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияАналитикиПоУмолчаниюНаСервере()
	
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииЗначенияПоУмолчаниюАналитикиГрафика(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

&НаСервере
Процедура УстановитьСтильПредупрежденияОНарушенииКовенантов(Элемент)
	Элемент.Гиперссылка = Истина;
	Элемент.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	
	Шрифт = Новый Шрифт(Элемент.Шрифт,,,,
		Истина // наклонный
	);
	Элемент.Шрифт = Шрифт; 
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФильтрКовенантов(Ковенанты, ОтборПериодичностьКовенантов)
	Если ЗначениеЗаполнено(ОтборПериодичностьКовенантов) Тогда
		Ковенанты.ОтборСтрок = Новый ФиксированнаяСтруктура("Периодичность", ОтборПериодичностьКовенантов);
	Иначе
		Ковенанты.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры	


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ДоговорОбъект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ДоговорОбъект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ДоговорОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
   УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, ДоговорОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
   УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, ДоговорОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСогласования(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.Подключаемый_ВыполнитьКомандуСогласования(ЭтотОбъект, Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 

КонецПроцедуры

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиенте
Процедура ДокументОбъектОсновнойЦФОПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
	ПриИзмененииЗначенияАналитикиПоУмолчаниюНаСервере();
КонецПроцедуры


#КонецОбласти

#Область ПереносФакта
&НаКлиенте
Процедура ПеренестиФакт(Команда)	
	ДоговорыКонтрагентовФормыУХКлиент.НачатьПереносФактаВГрафик(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораДатыПереносаФакта(Дата, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Дата) Тогда
		 ПеренестиФактНаСервере(Дата);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиФактНаСервере(ДатаПереноса)
	ДоговорыКонтрагентовФормыУХ.ПеренестиФактВГрафик(ЭтотОбъект, ДатаПереноса);
КонецПроцедуры
#КонецОбласти

#Область СравнениеВерсийГрафиков
&НаКлиенте
Процедура Подключаемый_СравнитьВерсииГрафиков(Команда)	
	ПараметрыКоманды = ПараметрыКомандыСравнитьВерсииГрафиков();
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьСравнениеВерсийГрафиков(ЭтотОбъект, ПараметрыКоманды);	
КонецПроцедуры

&НаСервере
Функция ПараметрыКомандыСравнитьВерсииГрафиков()
	Возврат ДоговорыКонтрагентовФормыУХ.ПараметрыКомандыСравнитьВерсииГрафиков(ЭтотОбъект);
КонецФункции	
#КонецОбласти

#Область ЗагрузкаГрафика
&НаКлиенте
Процедура ЗагрузитьГрафик(Команда) Экспорт	
	Данные = ДанныеДляЗагрузкиГрафикаСервер();
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьЗагрузкуГрафика(ЭтотОбъект, Данные);	
КонецПроцедуры

&НаСервере
Функция ДанныеДляЗагрузкиГрафикаСервер()
	Возврат ДоговорыКонтрагентовФормыУХ.ДанныеДляЗагрузкиГрафика(ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГрафикЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено 
		ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьГрафикНаСервере(РезультатЗакрытия);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрафикНаСервере(АдресГрафика) Экспорт
	ДоговорыКонтрагентовФормыУХ.ЗагрузитьГрафик(ЭтотОбъект, АдресГрафика);	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОперацийГрафика
&НаКлиенте
Процедура НастроитьПараметрыОпераций(Команда)
	
	ПараметрыКоманды = ДанныеОткрытияПараметровОперацийГрафика();			
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьПараметрыОперацийГрафика(ЭтотОбъект, ПараметрыКоманды);	
	
КонецПроцедуры

&НаСервере
Функция ДанныеОткрытияПараметровОперацийГрафика()	
	Возврат ДоговорыКонтрагентовФормыУХ.ДанныеОткрытияПараметровОперацийГрафика(ЭтотОбъект);	
КонецФункции

&НаКлиенте
Процедура ЗавершитьНастройкуОпераций(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ЗагрузитьНастройкиОпераций(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОпераций(Адрес)	
	ДоговорыКонтрагентовФормыУХ.ЗагрузитьПараметрыОперацийГрафика(ЭтотОбъект, Адрес);
КонецПроцедуры

#КонецОбласти