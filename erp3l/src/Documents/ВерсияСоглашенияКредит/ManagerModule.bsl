Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОбработкаПолученияПредставленияВерсияСоглашения(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОбработкаПолученияПолейПредставленияВерсияСоглашения(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьВстречныйДокумент(ПриемникОбъект, Ссылка) Экспорт
	
	ДоговорИсточник = Ссылка.ДоговорКонтрагента;
	ОрганизацияПоКонтрагенту = ДоговорИсточник.Владелец.ОрганизационнаяЕдиница;
	
	КонтрагентыПоОрганизации = ИнтеграцияВИБПереопределяемыйУХ.ПолучитьКонтрагентовПоОрганизации(Ссылка.Организация);
	Если КонтрагентыПоОрганизации.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;
		
	ПриемникОбъект.Дата = Ссылка.Дата;//для номера
	ПриемникОбъект.Организация = ОрганизацияПоКонтрагенту;
	ПриемникОбъект.Контрагент = КонтрагентыПоОрганизации[0];
	ПриемникОбъект.ДоговорКонтрагента = РегистрыСведений.СвязанныеДоговоры.ПолучитьВстречныйДоговор(Ссылка.ДоговорКонтрагента);
	Если ПриемникОбъект.ЭтоНовый() Тогда
		ПриемникОбъект.УстановитьНовыйНомер();
	КонецЕсли;	
	
	РеквизитыИсключения = "Номер,Дата, Организация, Контрагент, ДоговорКонтрагента, ОперацииВыборкиГашения, ПроцентныеСтавки, График, ПроцентыРасшифровка";
	ЗаполнитьЗначенияСвойств(ПриемникОбъект, Ссылка, , РеквизитыИсключения);
	
	ПриемникОбъект.ОперацииВыборкиГашения.Загрузить(	Ссылка.ОперацииВыборкиГашения.Выгрузить());
	ПриемникОбъект.ПроцентныеСтавки.Загрузить(			Ссылка.ПроцентныеСтавки.Выгрузить());
	ПриемникОбъект.ГрафикРасчетов.Загрузить(					Ссылка.ГрафикРасчетов.Выгрузить());
	ПриемникОбъект.ПроцентыРасшифровка.Загрузить(		Ссылка.ПроцентыРасшифровка.Выгрузить());
	
КонецПроцедуры

Функция ПолучитьФактическиеДанные(Договор, ОписаниеГрафика, ОперацииГрафика) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ФактическиеДанныеПоСекциямГрафика(Договор, ОписаниеГрафика, ОперацииГрафика);	
КонецФункции

Функция ОписаниеГрафика(Знач ВидДоговораУХ = Неопределено) Экспорт
	
	Если ВидДоговораУХ = Неопределено Тогда
		ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Кредит;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	СекцияТело = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияТело.Имя = "ОсновнойДолг";
	СекцияТело.Представление = Нстр("ru = 'Основной долг'");
	СекцияТело.КолонкаПриход = "ОсновнойДолгПолучение";
	СекцияТело.КолонкаПриходДДС = Истина;
	СекцияТело.КолонкаРасход = "ОсновнойДолгВозврат";
	СекцияТело.КолонкаРасходДДС = Истина;	
	СекцияТело.КолонкаОстаток = "ОсновнойДолгОстаток";
	СекцияТело.КолонкаПриходПредставление = НСтр("ru = 'Получение'");
	СекцияТело.КолонкаРасходПредставление = НСтр("ru = 'Возврат'");
	СекцияТело.КолонкаОстатокПредставление = НСтр("ru = 'Остаток'");
	СекцияТело.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
	
	СекцияПроценты = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияПроценты.Имя = "Проценты";
	СекцияПроценты.Представление = Нстр("ru = 'Проценты'");
	СекцияПроценты.КолонкаПриход = "ПроцентыНачислено";
	СекцияПроценты.КолонкаРасход = "ПроцентыУплачено";
	СекцияПроценты.КолонкаРасходДДС = Истина;
	СекцияПроценты.КолонкаОстаток = "ПроцентыОстаток";
	СекцияПроценты.КолонкаПриходПредставление = НСтр("ru = 'Начисление'");
	СекцияПроценты.КолонкаРасходПредставление = НСтр("ru = 'Уплата'");
	СекцияПроценты.КолонкаОстатокПредставление = НСтр("ru = 'Остаток'");
	СекцияПроценты.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Проценты;
	СекцияПроценты.ЭтоРасчетнаяСекция = Истина;
	
	СекцияКомиссии = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияКомиссии.Имя = "Комиссии";
	СекцияКомиссии.Представление = Нстр("ru = 'Комиссии'");
	СекцияКомиссии.КолонкаПриход = "КомиссииНачислено";
	СекцияКомиссии.КолонкаРасход = "КомиссииУплачено";
	СекцияКомиссии.КолонкаРасходДДС = Истина;		
	СекцияКомиссии.КолонкаОстаток = "КомиссииОстаток";
	СекцияКомиссии.КолонкаПриходПредставление = НСтр("ru = 'Начисление'");
	СекцияКомиссии.КолонкаРасходПредставление = НСтр("ru = 'Уплата'");
	СекцияКомиссии.КолонкаОстатокПредставление = НСтр("ru = 'Остаток'");
	СекцияКомиссии.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Комиссии;

	СекцияШтрафы = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияШтрафы.Имя = "Штрафы";
	СекцияШтрафы.Представление = Нстр("ru = 'Штрафы'");
	СекцияШтрафы.КолонкаПриход = "ШтрафыНачислено";
	СекцияШтрафы.КолонкаРасход = "ШтрафыУплачено";
	СекцияШтрафы.КолонкаРасходДДС = Истина;	
	СекцияШтрафы.КолонкаОстаток = "ШтрафыОстаток";
	СекцияШтрафы.КолонкаПриходПредставление = НСтр("ru = 'Начисление'");
	СекцияШтрафы.КолонкаРасходПредставление = НСтр("ru = 'Уплата'");
	СекцияШтрафы.КолонкаОстатокПредставление = НСтр("ru = 'Остаток'");
	СекцияШтрафы.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Штрафы;

	Результат.Вставить(СекцияТело.Имя,        СекцияТело);
	Результат.Вставить(СекцияПроценты.Имя,    СекцияПроценты);
	Результат.Вставить(СекцияКомиссии.Имя,    СекцияКомиссии);
	Результат.Вставить(СекцияШтрафы.Имя,      СекцияШтрафы);
	
	// Заполним операции
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьОперацииВОписанииГрафика(Результат, ВидДоговораУХ);
		
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// реквизиты документа.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	Параметры = Запрос.Параметры;
	ВыполнятьБюджетирование = РаботаСДоговорамиКонтрагентовУХ.ВыполнятьБюджетирование(Параметры.РежимИспользованияГрафика);
	
	// Если в справочнике периоды нет требуемых элементов, то прекращаем собирать данные
	Если ВыполнятьБюджетирование И
		НЕ КонтрольЛимитовУХ.ПодготовитьТаблицуДатИПериодов(Запрос, ДокументСсылка, ДополнительныеСвойства) Тогда
		Возврат;
	КонецЕсли;
		
	ТекстыЗапроса = Новый СписокЗначений;
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаВерсииРасчетов(ТекстыЗапроса, ИмяТаблицыДокумента());
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаРасчетыСКонтрагентамиГрафики(ТекстыЗапроса, ИмяТаблицыДокумента());
	
	Если ВыполнятьБюджетирование Тогда
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаОперативныйПланПоБюджетам(ТекстыЗапроса, ИмяТаблицыДокумента()); 
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаВТ_ТаблицаПлановССуммамиЛимитирования(ТекстыЗапроса);
	КонецЕсли;
	
	ДобавитьТекстЗапросаНапоминанияПользователюОПроверкеКовенантов(ТекстыЗапроса);

	ПроведениеСерверУХ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	Если ВыполнятьБюджетирование Тогда
		РаботаСДоговорамиКонтрагентовУХ.ПодготовитьТаблицуЛимитовПоБюджетам(Запрос, ДополнительныеСвойства.ТаблицыДляДвижений);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьОграниченияПоРамочномуСоглашению(Знач РамочноеСоглашение, Знач ТекущаяСделка = Неопределено, Знач Дата = '00010101') Экспорт
	
	Если Дата = Дата(1,1,1) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.ДатаНачалаДоступности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДоступности,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.ДатаОкончанияДоступности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияДоступности,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.ДатаНачалаДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.ДатаОкончанияДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияДействия,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.МинимальныйСрок, 0) КАК МинимальныйСрок,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.МаксимальныйСрок, 0) КАК МаксимальныйСрок,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.МинимальнаяСуммаСделки, 0) КАК МинимальнаяСуммаСделки,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.МаксимальнаяСуммаСделки, 0) КАК МаксимальнаяСуммаСделки,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.Сумма, 0) КАК ОбщийЛимит,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика.ВозобновляемыйЛимит, ЛОЖЬ) КАК ВозобновляемыйЛимит
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(&ДатаОтбора, ПредметГрафика = &РамочноеСоглашение) КАК ВерсииРасчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕстьNULL(СУММА(-РасчетыПоФинансовымИнструментамГрафикиОстаткиИОбороты.СуммаКонечныйОстаток), 0) КАК ИтогоЗадолженность,
	|	ЕстьNULL(СУММА(РасчетыПоФинансовымИнструментамГрафикиОстаткиИОбороты.СуммаРасход), 0) КАК ИтогоВыборка	
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			,
	|			ПредметГрафика.БазовыйДоговор = &РамочноеСоглашение
	|				И ПредметГрафика <> &ТекущаяСделка) КАК ВерсииРасчетовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики.ОстаткиИОбороты(, &ДатаОтбора, , , ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)) КАК РасчетыПоФинансовымИнструментамГрафикиОстаткиИОбороты
	|		ПО ВерсииРасчетовСрезПоследних.ПредметГрафика = РасчетыПоФинансовымИнструментамГрафикиОстаткиИОбороты.ПредметГрафика
	|			И ВерсииРасчетовСрезПоследних.ВерсияГрафика = РасчетыПоФинансовымИнструментамГрафикиОстаткиИОбороты.ВерсияГрафика";

	Запрос.УстановитьПараметр("ДатаОтбора", Дата);
	Запрос.УстановитьПараметр("РамочноеСоглашение", РамочноеСоглашение);
	Запрос.УстановитьПараметр("ТекущаяСделка", ТекущаяСделка);

	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ПараметрыДоговора = ПакетРезультатов[ПакетРезультатов.Количество() - 2].Выгрузить();
	ИсполнениеДоговора = ПакетРезультатов[ПакетРезультатов.Количество() - 1].Выгрузить();
	
	Если ПараметрыДоговора.Количество() Тогда
		
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ПараметрыДоговора[0]);
		Если ИсполнениеДоговора.Количество() Тогда
			ДанныеОбИсполнении = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ИсполнениеДоговора[0]);
			СвободныйОстатокЛимита = Результат.ОбщийЛимит - ?(Результат.ВозобновляемыйЛимит, ДанныеОбИсполнении.ИтогоЗадолженность, ДанныеОбИсполнении.ИтогоВыборка);
			Результат.Вставить("СвободныйОстатокЛимита", СвободныйОстатокЛимита);
		Иначе
			// Нет других сделок кроме текущей.
			Результат.Вставить("СвободныйОстатокЛимита", Результат.ОбщийЛимит);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		
		Возврат Новый Структура;
		
	КонецЕсли;

КонецФункции

Функция СводнаяИнформацияПоДоговору(ФинансовыйИнструмент, Знач Лимит, Знач ВозобновляемыйЛимит, Знач Дата = Неопределено) Экспорт
	
	Результат = Новый Структура("ИтогоВыбрано,ИтогоОсновнойДолг,СвободныйОстатокЛимита",0,0,0);
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФинансовыйИнструмент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКонтрагентамиФактОстаткиИОбороты.СуммаПриход, 0) КАК СуммаПриход,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиФактОстаткиИОбороты.СуммаРасход, 0) КАК СуммаРасход,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиФактОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиФакт.ОстаткиИОбороты(
	|			,
	|			&Дата,
	|			Период,
	|			,
	|			ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)
	|				И ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						ДоговорыКонтрагентов.Ссылка КАК ФинансовыйИнструмент
	|					ИЗ
	|						Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|					ГДЕ
	|						ДоговорыКонтрагентов.БазовыйДоговор = &ФинансовыйИнструмент
	|			
	|					ОБЪЕДИНИТЬ ВСЕ
	|			
	|					ВЫБРАТЬ
	|						&ФинансовыйИнструмент)) КАК РасчетыСКонтрагентамиФактОстаткиИОбороты";
	

	Запрос.УстановитьПараметр("ФинансовыйИнструмент", ФинансовыйИнструмент);
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ИтогоВыбрано = Выборка.СуммаРасход;
		Результат.ИтогоОсновнойДолг = -Выборка.СуммаКонечныйОстаток;
		Результат.СвободныйОстатокЛимита = ?(ВозобновляемыйЛимит, Лимит - Результат.ИтогоОсновнойДолг, Лимит - Результат.ИтогоВыбрано);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставленияКолонокГрафика() Экспорт
	
	ПредставленияКолонок = Новый Структура;
	
	ПредставленияКолонок.Вставить("Дата",					НСтр("ru = 'Дата'"));
	ПредставленияКолонок.Вставить("ОсновнойДолгПолучение",	НСтр("ru = 'Получение кредита'"));
	ПредставленияКолонок.Вставить("ОсновнойДолгВозврат",	НСтр("ru = 'Возврат кредита'"));
	ПредставленияКолонок.Вставить("ПроцентыНачислено",		НСтр("ru = 'Начисление процентов'"));
	ПредставленияКолонок.Вставить("ПроцентыУплачено",		НСтр("ru = 'Уплата процентов'"));
	ПредставленияКолонок.Вставить("КомиссииНачислено",		НСтр("ru = 'Начисление комиссий'"));
	ПредставленияКолонок.Вставить("КомиссииУплачено",		НСтр("ru = 'Уплата комиссий'"));
	ПредставленияКолонок.Вставить("ШтрафыНачислено",		НСтр("ru = 'Начисление штрафов'"));
	ПредставленияКолонок.Вставить("ШтрафыУплачено", 		НСтр("ru = 'Уплата штрафов'"));
	
	Возврат ПредставленияКолонок;
	
КонецФункции

Функция ВычисляемыеРеквизитыДоговора(ВерсияСоглашения) Экспорт
	
	Результат = Новый Структура;
	
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьВычисляемыеРеквизитыДоговора(Результат, ВерсияСоглашения);
	
	Результат.Вставить("ЗапретПлатежаВПрочихВалютах", Истина);
	
	Если ВерсияСоглашения.ВыданноеОбеспечение ИЛИ ВерсияСоглашения.ПолученноеОбеспечение Тогда
		Обеспеченность = Перечисления.ОбеспеченностьДоговоров.Обеспечен;
	Иначе
		Обеспеченность = Перечисления.ОбеспеченностьДоговоров.НеОбеспечен;
	КонецЕсли;
	
	Результат.Вставить("Обеспеченность", Обеспеченность);
	
	Результат.Вставить("СпособФормированияПлатежей", Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей);
	
	ДоговорыКонтрагентовВстраиваниеУХ.ЗаполнитьВычисляемыеРеквизитыДоговора(Результат, ВерсияСоглашения);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТабличныхЧастейДокумента() Экспорт
	
	ОписаниеТабличныхЧастей = РаботаСДоговорамиКонтрагентовУХ.НовыйОписаниеТабличныхЧастейДокумента();
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроцентныеСтавки", Истина);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "Проценты", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ГрафикРасчетов", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "Ковенанты", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроизводственныеКалендари", Истина);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПараметрыОпераций", Истина);
	
	Возврат ОписаниеТабличныхЧастей;	
КонецФункции

Функция ИменаКлючевыхРеквизитов() Экспорт
	
	Результат = РаботаСДоговорамиКонтрагентовУХКлиентСервер.НовыйИменаКлючевыхРеквизитов();
	Результат.ДатаНачалаДействия = "ДатаНачалаДействия";
	Результат.ДатаОкончанияДействия = "ДатаОкончанияДействия";
	Результат.Сумма = "Сумма";
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПереченьОперацийГрафиков(ОперацииГрафика, ОписаниеГрафика, ДокументОбъект) Экспорт
	
	РаботаСДоговорамиКонтрагентовУХ.ДополнитьПереченьОперацийГрафиков(ОперацииГрафика, ОписаниеГрафика, ДокументОбъект);
	
КонецПроцедуры

Функция КовенантыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВерсияСоглашенияКредитКовенанты.Ковенант КАК Ковенант,
	|	ВерсияСоглашенияКредитКовенанты.Периодичность КАК Периодичность,
	|	ВерсияСоглашенияКредитКовенанты.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит.Ковенанты КАК ВерсияСоглашенияКредитКовенанты
	|ГДЕ
	|	ВерсияСоглашенияКредитКовенанты.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаКовенантов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКовенантов;
	
КонецФункции	

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура ЗаполнитьНачислениеПроцентовНаКрайниеДатыИВидДнейСдвигаУплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсияСоглашенияКредит.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияСоглашенияКредит
	|ГДЕ
	|	ВерсияСоглашенияКредит.НачислениеПроцентовНаКрайниеДаты = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияПроцентовНаГраницыПериодов.ПустаяСсылка)
	|	ИЛИ ВерсияСоглашенияКредит.ВидДнейСдвигаУплаты = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКоличестваДнейВПериоде.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(Объект.НачислениеПроцентовНаКрайниеДаты) Тогда
			Объект.НачислениеПроцентовНаКрайниеДаты = Перечисления.СпособыНачисленияПроцентовНаГраницыПериодов.НачислятьПроцентыНаПоследнийДень;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидДнейСдвигаУплаты) Тогда
			Объект.ВидДнейСдвигаУплаты = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрольНаличияПериодов
	
// Функция возвращает текст запроса, который формирует временную таблицу запроса ВТ_ДатыОпераций с колонками
//   Дата 		- Дата - Дата операции по документу
//	 ВидБюджета - ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета - Вид бюджета, по которому будет операция
// Текст запроса уникален для каждого вида документа
//
Функция ТексЗапроса_ДатыОперацийДокумента() экспорт
	
	Возврат РаботаСДоговорамиКонтрагентовУХ.ТекстЗапросаДатыОперацийДокумента(ИмяТаблицыДокумента());
	
КонецФункции

#КонецОбласти 

#Область ИсточникиДляКонтроляДокумента

Функция ИсточникиДокумента(Объект, ДопПараметры = неопределено) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект, ДопПараметры));
		
	//// 2. Планы по взаиморасчетам с контрагентом
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоКонтрагенту, 
	//	Источник_ВзаиморасчетыПоКонтрагенту(Объект));
		
	Возврат Источники;
	
КонецФункции

Функция Источник_БюджетныеЛимитыРезервы(Объект, ДопПараметры) Экспорт
	
	// Доп.параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 				Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 			Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 			НЕ ЗначениеЗаполнено(Объект.Ссылка));
	ДопПараметры.Вставить("ДатаКонтроляЛимита", Объект.Дата);
	
	Если Объект.РежимИспользованияГрафика = Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций Тогда
		ДанныеДляПроверки = ПланыДокумента(Объект);
	Иначе
		ДанныеДляПроверки = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	КонецЕсли;
	
	//
	ДанныеДляПроверки.Колонки.Сумма.Имя = "Заявлено";
	ДанныеДляПроверки.Колонки.Добавить("Лимит", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Зарезервировано", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Исполнено", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.ЗаполнитьЗначения(Объект.Дата, "Период");
	
	//
	Источник = Новый Структура;
	Источник.Вставить("Параметры",		ДопПараметры);
	Источник.Вставить("ПланыДокумента", ДанныеДляПроверки);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоКонтрагенту(Объект)
	
	// Если незаполнен контрагент, то контроль не выполняется
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	// Если роль определить не удалось, то контроль не выполняется
	РольКонтрагента = РольПоВидуДоговораУХ()[Объект.ВидДоговораУХ];
	Если РольКонтрагента = неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	//
	Результат = Новый Структура;
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Контрагент", Объект.Контрагент);
	Результат.Вставить("СуммаПлатежа", Объект.Сумма);
	Результат.Вставить("Валюта", Объект.ВалютаВзаиморасчетов);
	Результат.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат Результат;
	
КонецФункции

Функция РольПоВидуДоговораУХ()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем, Перечисления.РолиКонтрагентов.Покупатели);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.Импорт, Перечисления.РолиКонтрагентов.Поставщики);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВерсияСоглашенияКредит") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	ПредопределенныеДанные = Новый Структура(
		"Период, Организация, Контрагент, ДоговорКонтрагента", 
		ДанныеОбъекта.Дата, ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДоговорКонтрагента
	);
	
	//
	РеквизитыСтроки = "СтатьяБюджета, Валюта, ЦФО, Проект,"+АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	Для Каждого Строка Из ДанныеОбъекта.ГрафикРасчетов Цикл
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Предназначение = ПланыВидовХарактеристик.ВидыБюджетов.Предназначение(Строка.ВидБюджета);
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, Строка.Дата);
		
		СтрокаПлана = ТаблицаПланов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, ПредопределенныеДанные);
		ЗаполнитьЗначенияСвойств(СтрокаПлана, Строка, РеквизитыСтроки);
		
		СтрокаПлана.Сумма = Строка.Сумма;
		СтрокаПлана.ПериодОтчета =  ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Строка.Дата, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
		СтрокаПлана.ВидБюджета = Строка.ВидБюджета;
		СтрокаПлана.Предназначение = Предназначение;
		СтрокаПлана.ПриходРасход = Строка.НаправлениеДвижения;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЦФО) Тогда
			СтрокаПлана.ЦФО = ДанныеОбъекта.ОсновнойЦФО;
			СтрокаПлана.Проект = ДанныеОбъекта.ОсновнойПроект;
		КонецЕсли;
		
		Если Строка.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
			СтрокаПлана.ДокументРезервирования = ДанныеОбъекта.ИсточникЛимитовБДДС;
		Иначе
			СтрокаПлана.ДокументРезервирования = ДанныеОбъекта.ИсточникЛимитовИсполнение;
		КонецЕсли;
		СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
		
	КонецЦикла;
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК Ссылка,
	|	ВерсияСоглашенияКоммерческийДоговор.Дата КАК Дата,
	|	ВерсияСоглашенияКоммерческийДоговор.Организация КАК Организация,
	|	ВерсияСоглашенияКоммерческийДоговор.Контрагент КАК Контрагент,
	|	ВерсияСоглашенияКоммерческийДоговор.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВерсияСоглашенияКоммерческийДоговор.ОсновнойЦФО КАК ОсновнойЦФО,
	|	ВерсияСоглашенияКоммерческийДоговор.ОсновнойПроект КАК ОсновнойПроект,
	|	ВерсияСоглашенияКоммерческийДоговор.ИсточникЛимитовБДДС КАК ИсточникЛимитовБДДС,
	|	ВерсияСоглашенияКоммерческийДоговор.ИсточникЛимитовИсполнение КАК ИсточникЛимитовИсполнение,
	|	ВерсияСоглашенияКоммерческийДоговор.ГрафикРасчетов.(
	|		Дата КАК Дата,
	|		Валюта КАК Валюта,
	|		ВидБюджета КАК ВидБюджета,
	|		СтатьяБюджета КАК СтатьяБюджета,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6,
	|		ЦФО КАК ЦФО,
	|		Проект КАК Проект,
	|		Сумма КАК Сумма,
	|		НаправлениеДвижения КАК НаправлениеДвижения
	|	) КАК ГрафикРасчетов
	|ИЗ
	|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
	|ГДЕ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ГрафикРасчетов");
		Результат.ГрафикРасчетов = Выборка.ГрафикРасчетов.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяТаблицыДокумента()
	Возврат "Документ.ВерсияСоглашенияКредит";
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка) Экспорт
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Ссылка,
		|	Реквизиты.Дата КАК Дата,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	6 КАК ЗаполненностьДоговораЗаявки,
		|	НЕОПРЕДЕЛЕНО КАК ДокументПланирования,
		|	Реквизиты.ДатаОтсчетаПроверкиКовенантов КАК ДатаОтсчетаПроверкиКовенантов,
		|	Реквизиты.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	Реквизиты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	Реквизиты.Ответственный КАК Ответственный,
		|	Реквизиты.РежимИспользованияГрафика КАК РежимИспользованияГрафика
		|ИЗ
		|	Документ.ВерсияСоглашенияКредит КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
		
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		Запрос.УстановитьПараметр(ТекРеквизит.Ключ, ТекРеквизит.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаНапоминанияПользователюОПроверкеКовенантов(ТекстыЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	ВерсияСоглашенияКредитКовенанты.Ковенант КАК Ковенант,
	|	ВерсияСоглашенияКредитКовенанты.Периодичность КАК Периодичность,
	|	&ДатаОтсчетаПроверкиКовенантов КАК ДатаОтсчетаПроверкиКовенантов,
	|	&Организация,
	|	&Контрагент КАК Контрагент,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&Дата КАК ДатаНачалаДействияВерсии,
	|	&Ссылка КАК Документ,
	|	&Ссылка КАК ВерсияСоглашения,
	|	&Ответственный КАК Ответственный,
	|	&ДатаНачалаДействия КАК ДатаНачалаДействияДоговора,
	|	&ДатаОкончанияДействия КАК ДатаОкончанияДействияДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиКовенантов.НеПроверялся) КАК СтатусПроверки
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит.Ковенанты КАК ВерсияСоглашенияКредитКовенанты
	|ГДЕ
	|	ВерсияСоглашенияКредитКовенанты.Ссылка = &Ссылка
	|	И ВерсияСоглашенияКредитКовенанты.Периодичность <> ЗНАЧЕНИЕ(Перечисление.ПериодичностьКовенантов.Непериодический)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "НапоминанияКовенантов");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
