
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидОперации = Параметры.ВидОперации;
	
	ВидыОпераций = Перечисления.ВидыОперацийВзаимозачетаЗадолженности;
	ИспользоватьШаблон = ЗначениеЗаполнено(ВидОперации);
		
	Если ИспользоватьШаблон Тогда
		
		ТипыРасчетов = Новый Соответствие;
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносАвансаКлиентаОрганизацияКонтрагент,    0);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносАвансаКлиентаМеждуКонтрагентами,       0);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносАвансаКлиентаМеждуОрганизациями,       0);
		
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносДолгаКлиентаОрганизацияКонтрагент,     1);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносДолгаКлиентаМеждуКонтрагентами,        1);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносДолгаКлиентаМеждуОрганизациями,        1);
		
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносАвансаПоставщикуОрганизацияКонтрагент, 2);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносАвансаПоставщикуМеждуКонтрагентами,    2);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносАвансаПоставщикуМеждуОрганизациями,    2);
		
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносДолгаПоставщикуОрганизацияКонтрагент,  3);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносДолгаПоставщикуМеждуКонтрагентами,     3);
		ТипыРасчетов.Вставить(ВидыОпераций.ПереносДолгаПоставщикуМеждуОрганизациями,     3);
		
		ТипыРасчетов.Вставить(ВидыОпераций.Бартер,                                       4);
		ТипыРасчетов.Вставить(ВидыОпераций.Произвольный,                                 5);
		
		ТипРасчетов = ТипыРасчетов[ВидОперации];
		
		ВариантыУчастия = Новый Соответствие;
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносАвансаКлиентаОрганизацияКонтрагент,    0);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносАвансаКлиентаМеждуКонтрагентами,       1);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносАвансаКлиентаМеждуОрганизациями,       2);
		
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносАвансаПоставщикуОрганизацияКонтрагент, 0);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносАвансаПоставщикуМеждуКонтрагентами,    1);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносАвансаПоставщикуМеждуОрганизациями,    2);
		
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносДолгаКлиентаОрганизацияКонтрагент,     0);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносДолгаКлиентаМеждуКонтрагентами,        1);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносДолгаКлиентаМеждуОрганизациями,        2);
		
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносДолгаПоставщикуОрганизацияКонтрагент,  0);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносДолгаПоставщикуМеждуКонтрагентами,     1);
		ВариантыУчастия.Вставить(ВидыОпераций.ПереносДолгаПоставщикуМеждуОрганизациями,     2);
		
		ВариантУчастия = ВариантыУчастия[ВидОперации];
		
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ВыполняетсяЗакрытие И Модифицированность И НЕ СохранитьПараметры Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть';
												|en = 'Close'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать';
													|en = 'Do not close'"));
		
		Отказ = Истина;
		
		Оповещение   = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Настройка не будет изменена. Закрыть форму без сохранения результата?';
							|en = 'Setting will not be changed. Close the form without saving the result?'");
		
		ПоказатьВопрос(Оповещение,ТекстВопроса, СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Закрыть" Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьШаблонПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетовПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	Если ИспользоватьШаблон Тогда
		
		Если ТипРасчетов = 0 Тогда // ПереносАвансаКлиента
			Если ВариантУчастия = 0 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент");
			ИначеЕсли ВариантУчастия = 1 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами");
			Иначе
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями");
			КонецЕсли;
			
		ИначеЕсли ТипРасчетов = 1 Тогда // ПереносДолгаКлиента
			Если ВариантУчастия = 0 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент");
			ИначеЕсли ВариантУчастия = 1 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами");
			Иначе
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями");
			КонецЕсли;
			
		ИначеЕсли ТипРасчетов = 2 Тогда //ПереносАвансаПоставщику
			Если ВариантУчастия = 0 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент");
			ИначеЕсли ВариантУчастия = 1 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами");
			Иначе
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями");
			КонецЕсли;
			
		ИначеЕсли ТипРасчетов = 3 Тогда //ПереносДолгаПоставщику
			Если ВариантУчастия = 0 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент");
			ИначеЕсли ВариантУчастия = 1 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами");
			Иначе
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями");
			КонецЕсли;
			
		ИначеЕсли ТипРасчетов = 4 Тогда //Бартер
			ВидОперации = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер");
		Иначе //Произвольный
			ВидОперации = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный");
		КонецЕсли;
		
	Иначе
		
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный");
		
	КонецЕсли;
	
	СохранитьПараметры = Истина;
	
	Закрыть(ВидОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ПараметрыШаблона.Доступность    = ИспользоватьШаблон;
	Элементы.ДекорацияПояснение.Доступность  = ИспользоватьШаблон;
	
	ЭтоБартер = (ТипРасчетов = 4);
	ЭтоПроизвольный = (ТипРасчетов = 5);
	
	Элементы.ВРамкахКонтрагента.Видимость = НЕ ЭтоБартер И НЕ ЭтоПроизвольный;
	Элементы.МеждуКонтрагентами.Видимость = НЕ ЭтоБартер И НЕ ЭтоПроизвольный;
	Элементы.МеждуОрганизациями.Видимость = НЕ ЭтоБартер И НЕ ЭтоПроизвольный И ИспользоватьНесколькоОрганизаций;
	Элементы.ДекорацияВРамкахКонтрагента.Видимость = ЭтоБартер;
	Элементы.ДекорацияПроизвольный.Видимость = ЭтоПроизвольный;
	
	Если ТипРасчетов = 0 Тогда // ПереносАвансаКлиента
		Если ВариантУчастия = 0 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос аванса клиента на другой объект расчетов.';
														|en = 'Transfer of customer advance to another AP/AR object.'");
		ИначеЕсли ВариантУчастия = 1 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос аванса от клиента на другого контрагента.';
														|en = 'Transfer of customer advance to another counterparty.'");
		ИначеЕсли ВариантУчастия = 2 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос аванса клиента между двумя организациями.';
														|en = 'Transfer of customer advance between two companies.'");
		КонецЕсли;
		
	ИначеЕсли ТипРасчетов = 1 Тогда // ПереносДолгаКлиента
		Если ВариантУчастия = 0 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос долга клиента на другой объект расчетов.';
														|en = 'Transfer of customer''s debt to another AP/AR object.'");
		ИначеЕсли ВариантУчастия = 1 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос долга клиента на другого контрагента.';
														|en = 'Transfer of debt owed by customer to another counterparty.'");
		ИначеЕсли ВариантУчастия = 2 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос долга клиента между двумя организациями.';
														|en = 'Transfer of debt owed by customer between two companies.'");
		КонецЕсли;
		
	ИначеЕсли ТипРасчетов = 2 Тогда //ПереносАвансаПоставщику
		Если ВариантУчастия = 0 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос аванса поставщику на другой объект расчетов.';
														|en = 'Transfer of an advance to vendor to another AP/AR object.'");
		ИначеЕсли ВариантУчастия = 1 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос аванса поставщику на другого контрагента.';
														|en = 'Transfer of advance to vendor to another counterparty.'");
		ИначеЕсли ВариантУчастия = 2 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос аванса поставщику между организациями.';
														|en = 'Transfer of advance to vendor between two companies.'");
		КонецЕсли;
		
	ИначеЕсли ТипРасчетов = 3 Тогда //ПереносДолгаПоставщику
		Если ВариантУчастия = 0 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос долга поставщику на другой объект расчетов.';
														|en = 'Transfer of debt owed to vendor to another AP/AR object.'");
		ИначеЕсли ВариантУчастия = 1 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос долга поставщику на другого контрагента.';
														|en = 'Transfer of debt owed to supplier to another counterparty.'");
		ИначеЕсли ВариантУчастия = 2 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Перенос долга поставщику между организациями.';
														|en = 'Transfer of debt owed to vendor between two companies.'");
		КонецЕсли;
		
	ИначеЕсли ТипРасчетов = 4 Тогда //Бартер
		Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет кредиторской задолженности организации перед контрагентом как поставщиком и дебиторской задолженности контрагента как клиента перед организацией.';
													|en = 'Offset of company accounts payable to the counterparty as a supplier and counterparty receivable as a customer to the company.'");
		
		
	ИначеЕсли ТипРасчетов = 5 Тогда //Произвольный
		Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Другие настройки взаимозачета.';
													|en = 'Other offsetting settings.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
