
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Константы.НалоговоеПланированиеИнвестиций.Получить() И (Объект.МСФОУчет ИЛИ Объект.НалоговыйУчет) Тогда
		Элементы.ОтражениеВУчете.СписокВыбора.Удалить(3);
	КонецЕсли;
	
	Если Объект.МСФОУчет = Объект.НалоговыйУчет И Константы.СценарийМСФО.Получить() = Константы.СценарийОтчетностиКИК.Получить() Тогда
		Элементы.ОтражениеВУчете.СписокВыбора.Удалить(2);
		Элементы.ОтражениеВУчете.СписокВыбора.Удалить(1);
	КонецЕсли;
	
	Если Элементы.ОтражениеВУчете.СписокВыбора.Количество() = 1 Тогда
		Элементы.ОтражениеВУчете.Видимость = Ложь;
		Элементы.ДекорацияСценарий.Видимость = Ложь;
		Элементы.Сценарий.Видимость = Ложь;
	КонецЕсли;
	
	ИнвестицииВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Документы.ВыбытиеИнвестиций.ПолучитьИменаСубконто());
	
	Элементы.ОбъектИнвестирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");	
	
	СтруктураДействий = Новый Структура("ЗаполнитьЭффективнуюДолю", ЭтаФорма);
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);	

	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	
	#Область УниверсальныеПроцессыСогласование
		ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.МСФОУчет И Объект.НалоговыйУчет Тогда
		ОтражениеВУчете = 3;
	ИначеЕсли Объект.НалоговыйУчет Тогда
		ОтражениеВУчете = 2;
	ИначеЕсли Объект.МСФОУчет Тогда
		ОтражениеВУчете = 1;
	Иначе
		ОтражениеВУчете = 0;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагенты" Или ИмяСобытия = "Запись_Организации" Тогда
		ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	#Область УниверсальныеПроцессыСогласование
	ИначеЕсли ИмяСобытия = "ОбъектСогласован" Тогда 
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	#КонецОбласти	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
			
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("ИзмененыДвиженияИнвестиций");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РегламентированныйУчетПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСчетаДокумента", Новый Структура("ИзмененОбъектИнвестирования", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьВалютуДокумента", Новый Структура("ЗаполнитьВалютуИзДоговора", Ложь));
	
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямаяДоляПриИзменении(Элемент)
		
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе");
		
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
		
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе, ЗаполнитьБалансовуюСтоимость");
	СтруктураДействий.Вставить("ЗаполнитьЭффективнуюДолю", ЭтаФорма);
	СтруктураДействий.Вставить("ЗаполнитьСчетаДокумента", Новый Структура("ИзмененОбъектИнвестирования", Ложь));
		
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйУчетПриИзменении(Элемент)
				
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе");
		
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВалютуДокумента", Новый Структура("ЗаполнитьВалютуИзДоговора", Истина));
	
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);	
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе, ЗаполнитьБалансовуюСтоимость");
	СтруктураДействий.Вставить("ЗаполнитьЭффективнуюДолю", ЭтаФорма);
	СтруктураДействий.Вставить("ЗаполнитьСчетаДокумента", Новый Структура("ИзмененОбъектИнвестирования", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьВалютуДокумента", Новый Структура("ЗаполнитьВалютуИзДоговора", Ложь));
		
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);	
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли		
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)	
	
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе, ЗаполнитьБалансовуюСтоимость");
	СтруктураДействий.Вставить("ЗаполнитьЭффективнуюДолю", ЭтаФорма);
	СтруктураДействий.Вставить("ЗаполнитьСчетаДокумента", Новый Структура("ИзмененОбъектИнвестирования", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьВалютуДокумента", Новый Структура("ЗаполнитьВалютуИзДоговора", Ложь));
		
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);	
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(ЭтаФорма, Элемент.Имя);
	
	СтруктураДействий = Новый Структура("ЗаполнитьБалансовуюСтоимость");
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетРасчетовПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходаПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходаПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)
	СтруктураДействий = Новый Структура("ЗаполнитьБалансовуюСтоимость");
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектИнвестированияПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе, ЗаполнитьБалансовуюСтоимость");
	СтруктураДействий.Вставить("ЗаполнитьЭффективнуюДолю", ЭтаФорма);
	СтруктураДействий.Вставить("ЗаполнитьСчетаДокумента", Новый Структура("ИзмененОбъектИнвестирования", Истина));
	
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ЭтаФорма.Объект, СтруктураДействий, КэшируемыеЗначения);	
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли		
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение(Объект);
	ДокументОбъект.Заполнить(Новый Структура("ЗаполнитьПоОСВ", Истина));
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеПриИзменении(Элемент)
	Если ОтражениеВУчете = 0 Тогда
		Объект.РегламентированныйУчет = Ложь;
		Объект.НалоговыйУчет = Ложь;
		Объект.МСФОУчет = Ложь;
	ИначеЕсли ОтражениеВУчете = 1 Тогда
		Объект.РегламентированныйУчет = Ложь;
		Объект.НалоговыйУчет = Ложь;
		Объект.МСФОУчет = Истина;
	ИначеЕсли ОтражениеВУчете = 2 Тогда
		//Объект.РегламентированныйУчет =;
		Объект.НалоговыйУчет = Истина;
		Объект.МСФОУчет = Ложь;
	Иначе 
		//Объект.РегламентированныйУчет = Ложь;
		Объект.НалоговыйУчет = Истина;
		Объект.МСФОУчет = Истина;
	КонецЕсли;
	ИнвестицииКлиентСервер.УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 

КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ТелеграмВложенныеФайлы(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

#КонецОбласти