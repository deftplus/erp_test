
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено, Отказ = Ложь) Экспорт
	
	ТаблицыДляДвижений = Новый Структура;		
	НомераТаблиц = Новый Структура;
	
	// реквизиты документа
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента();
	
	Реквизиты = ПроведениеСерверУХ.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	Реквизиты.Вставить("ЕстьУчетнаяПолитика",ВстраиваниеУХВызовСервера.ЕстьУчетнаяПолитика(Реквизиты.Организация, Реквизиты.Период));
		
	ДополнительныеСвойства.Вставить("Реквизиты", Реквизиты);
	
	ИнвестицииКлиентСервер.ПроверитьНалоговоеРезидентство(Реквизиты, Отказ);
	
	Если Отказ Тогда
		Возврат ДополнительныеСвойства;
	КонецЕсли;
	
	СписокСценариев = ИнвестицииКлиентСервер.СформироватьСписокСценариев(Реквизиты);
	
	Запрос.УстановитьПараметр("Ссылка", 		ДокументСсылка);
	Запрос.УстановитьПараметр("Период", 		Реквизиты.Период);
	Запрос.УстановитьПараметр("Граница", 		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Ссылка), ВидГраницы.Исключая) );	
	Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
	
	Запрос.УстановитьПараметр("РегламентированныйУчет", Реквизиты.РегламентированныйУчет);
	Запрос.УстановитьПараметр("НалоговыйУчет", 			Реквизиты.НалоговыйУчет);
	Запрос.УстановитьПараметр("ЕстьУчетнаяПолитика",	Реквизиты.ЕстьУчетнаяПолитика);		
	Запрос.УстановитьПараметр("ОбъектИнвестирования", 	Реквизиты.ОбъектИнвестирования);	
	Запрос.УстановитьПараметр("ВалютаРегл",				Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаРасчетов",			Реквизиты.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаДокумента",		Реквизиты.ВалютаДокумента);	
		
	ТабДвижениеИнвестиций = РегистрыНакопления.ДвижениеИнвестиций.СоздатьНаборЗаписей().Выгрузить();
	ТабИсточникРасчетаЭффективныхДолей = Новый ТаблицаЗначений;
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("Инвестор", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("ОбъектИнвестирования", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("ПрямаяДоля", ОбщегоНазначения.ОписаниеТипаЧисло(18,15));
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("СтрокаИзменение", Новый ОписаниеТипов("Булево"));
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("ИнвесторПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТабИсточникРасчетаЭффективныхДолей.Колонки.Добавить("ОбъектИнвестированияПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Запрос.Текст = ТекстЗапросаТаблицаДляДвижений();
	
	Для каждого Сценарий Из СписокСценариев Цикл
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Результаты = Запрос.ВыполнитьПакет();
		
		ДвижениеИнвестиций = Результаты[0].Выбрать();
		Пока ДвижениеИнвестиций.Следующий() Цикл 
			НовСтр = ТабДвижениеИнвестиций.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ДвижениеИнвестиций);
			НовСтр.Активность = Истина;
		КонецЦикла;
		ИсточникРасчетаЭффективныхДолей = Результаты[1].Выбрать();
		Пока ИсточникРасчетаЭффективныхДолей.Следующий() Цикл 
			НовСтр = ТабИсточникРасчетаЭффективныхДолей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ИсточникРасчетаЭффективныхДолей);
		КонецЦикла;
	КонецЦикла;
	ТаблицыДляДвижений.Вставить("ДвижениеИнвестиций", ТабДвижениеИнвестиций);
	ТаблицыДляДвижений.Вставить("ИсточникРасчетаЭффективныхДолей", ТабИсточникРасчетаЭффективныхДолей);
	
	Если Реквизиты.ЕстьУчетнаяПолитика И Реквизиты.РегламентированныйУчет Тогда
		ВстраиваниеУХФинансовыеИнструменты.ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	
	Возврат ДополнительныеСвойства;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц = Неопределено)

	Если ТипЗнч(НомераТаблиц) = Тип("Структура") Тогда		
		НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());		
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Инвестор,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.СчетУчета.СчетСсылка КАК СчетУчета,
	|	Реквизиты.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	Реквизиты.НалоговыйУчет КАК НалоговыйУчет,
	|	Реквизиты.РегламентированныйУчет КАК РегламентированныйУчет,
	|	Реквизиты.ОтношениеКГруппе КАК ОтношениеКГруппе,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ИспользоватьВРегламентированномУчете
	|				ИЛИ Реквизиты.Организация.ИностранныйНалоговыйРезидент
	|			ТОГДА """"
	|		ИНАЧЕ ""Организация""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Реквизиты.ОбъектИнвестирования.ИспользоватьВРегламентированномУчете
	|				ИЛИ Реквизиты.ОбъектИнвестирования.ИностранныйНалоговыйРезидент
	|			ТОГДА """"
	|		ИНАЧЕ ""ОбъектИнвестирования""
	|	КОНЕЦ КАК ОшибкаНалоговыйРезидент,
	|	Реквизиты.СамостоятельноеПризнаниеКонтроляНадИК КАК ПризнаниеКонтроля,
	|	Реквизиты.МСФОУчет КАК МСФОУчет,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	ВалютаРегламентированногоУчета.Значение КАК ВалютаРегламентированногоУчета,
	|	СценарийОтчетностиКИК.Значение КАК СценарийКИК,
	|	СценарийМСФО.Значение КАК СценарийМСФО
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК Реквизиты,
	|	Константа.СценарийОтчетностиКИК КАК СценарийОтчетностиКИК,
	|	Константа.СценарийМСФО КАК СценарийМСФО,
	|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса;

КонецФункции
 
Функция ТекстЗапросаТаблицаДляДвижений()

    Возврат	
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Инвестор,
	|	&Сценарий КАК Сценарий,
	|	ДвижениеИнвестиций.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ДвижениеИнвестиций.Инвестиции КАК Инвестиции,
	|	-ДвижениеИнвестиций.ПрямаяДоля КАК ПрямаяДоляВладения,
	|	-ДвижениеИнвестиций.БалансоваяСтоимость КАК БалансоваяСтоимость,
	|	-ДвижениеИнвестиций.Количество КАК Количество,
	|	-ДвижениеИнвестиций.КоличествоПривилегированных КАК КоличествоПривилегированных,
	|	-ДвижениеИнвестиций.КоличествоВДоверительномУправлении КАК КоличествоВДоверительномУправлении,
	|	-ДвижениеИнвестиций.КоличествоГолосующих КАК КоличествоГолосующих,
	|	ДвижениеИнвестиций.ОбоснованиеКонтроля КАК Описание,
	|	ДвижениеИнвестиций.ОтношениеКГруппе КАК ОтношениеКГруппе
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК ДвижениеИнвестиций
	|ГДЕ
	|	ДвижениеИнвестиций.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрямыеДоли.Инвестор КАК Инвестор,
	|	ПрямыеДоли.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	СУММА(ПрямыеДоли.ПрямаяДоля) КАК ПрямаяДоля,
	|	МАКСИМУМ(ПрямыеДоли.СтрокаИзменение) КАК СтрокаИзменение,
	|	ПрямыеДоли.Сценарий КАК Сценарий
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Инвестор КАК Инвестор,
	|		Остатки.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|		Остатки.ПрямаяДоляВладенияОборот КАК ПрямаяДоля,
	|		ЛОЖЬ КАК СтрокаИзменение,
	|		Остатки.Сценарий КАК Сценарий
	|	ИЗ
	|		РегистрНакопления.ДвижениеИнвестиций.Обороты(, &Граница, , Сценарий = &Сценарий) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Организация,
	|		тИнвестиции.ОбъектИнвестирования,
	|		-тИнвестиции.ПрямаяДоля,
	|		ИСТИНА,
	|		&Сценарий
	|	ИЗ
	|		Документ.ВыбытиеИнвестиций КАК тИнвестиции
	|	ГДЕ
	|		тИнвестиции.Ссылка = &Ссылка) КАК ПрямыеДоли
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрямыеДоли.Инвестор,
	|	ПрямыеДоли.ОбъектИнвестирования,
	|	ПрямыеДоли.Сценарий";

КонецФункции

#Область ПроводкиРСБУ

Функция ТекстЗапроса_СчетаДокумента(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("втСчетаДокумента", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	СчетаУчета.Контрагент КАК ФинансовыйИнструмент,
	|	СчетаУчета.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаФИ) КАК ВидСчетаФИ,
	|	СчетаУчета.СчетУчета.СчетСсылка КАК Счет,
	|	СчетаУчета.СчетУчетаСубконто1 КАК Субконто1,
	|	СчетаУчета.СчетУчетаСубконто2 КАК Субконто2,
	|	СчетаУчета.СчетУчетаСубконто3 КАК Субконто3
	|ПОМЕСТИТЬ втСчетаДокумента
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК СчетаУчета
	|ГДЕ
	|	СчетаУчета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Контрагент,
	|	Документ.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетов),
	|	Документ.СчетРасчетов.СчетСсылка,
	|	Документ.СчетРасчетовСубконто1,
	|	Документ.СчетРасчетовСубконто1,
	|	Документ.СчетРасчетовСубконто1
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаУчета.Контрагент,
	|	СчетаУчета.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетДоходовОтВыбытия),
	|	СчетаУчета.СчетДохода.СчетСсылка,
	|	СчетаУчета.СчетДоходаСубконто1,
	|	СчетаУчета.СчетДоходаСубконто2,
	|	СчетаУчета.СчетДоходаСубконто3
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК СчетаУчета
	|ГДЕ
	|	СчетаУчета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Контрагент,
	|	Документ.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетРасходовОтВыбытия),
	|	Документ.СчетРасхода.СчетСсылка,
	|	Документ.СчетРасходаСубконто1,
	|	Документ.СчетРасходаСубконто2,
	|	Документ.СчетРасходаСубконто3
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка"
	
КонецФункции
	
Функция ТекстЗапроса_Проводки(НомераТаблиц) Экспорт
	
	ТекстПроводки = Новый Массив;	
	НомераТаблиц.Вставить("втТаблицаПроводок", НомераТаблиц.Количество());
	
	ТекстПроводки.Добавить(ТекстЗапроса_СписаниеСтоимости());
	ТекстПроводки.Добавить(ТекстЗапроса_ДоходОтПродажи());

	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Возврат СтрСоединить(ТекстПроводки, Разделитель);

КонецФункции

Функция ТекстЗапроса_СписаниеСтоимости()

	Возврат
	"ВЫБРАТЬ
	|	т.Контрагент КАК ФинансовыйИнструмент,
	|	т.Дата КАК Период,
	|	т.ВалютаДокумента КАК Валюта,
	|	т.Количество КАК Количество,
	|	т.БалансоваяСтоимость КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетРасходовОтВыбытия) КАК СчетДт,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаФИ) КАК СчетКт,
	|	""Списание с учета стоимости ценной бумаги"" КАК Комментарий
	|ПОМЕСТИТЬ втТаблицаПроводок
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК т
	|ГДЕ
	|	т.Ссылка = &Ссылка
	|	И т.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И т.РегламентированныйУчет
	|	И т.БалансоваяСтоимость <> 0";

КонецФункции

Функция ТекстЗапроса_ДоходОтПродажи()

	Возврат
	"ВЫБРАТЬ
	|	т.Контрагент КАК ФинансовыйИнструмент,
	|	т.Дата КАК Период,
	|	т.ВалютаДокумента КАК Валюта,
	|	т.Количество КАК Количество,
	|	т.Инвестиции КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетов) КАК СчетДт,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетДоходовОтВыбытия) КАК СчетКт,
	|	""Доход от продажи ценной бумаги"" КАК Комментарий
	|ИЗ
	|	Документ.ВыбытиеИнвестиций КАК т
	|ГДЕ
	|	т.Ссылка = &Ссылка
	|	И т.Ссылка.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И т.РегламентированныйУчет
	|	И т.Инвестиции <> 0";

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДокумента

Функция ЗаполнитьПоМСФО(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
КонецФункции

Функция ПолучитьИменаСубконто() Экспорт

	Результат = Новый Структура;
	
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетУчетаСубконто1");
	Субконто.Вставить(2, "СчетУчетаСубконто2");
	Субконто.Вставить(3, "СчетУчетаСубконто3");
	
	Результат.Вставить("СчетУчета", Субконто);

	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетРасчетовСубконто1");
	Субконто.Вставить(2, "СчетРасчетовСубконто2");
	Субконто.Вставить(3, "СчетРасчетовСубконто3");
	
	Результат.Вставить("СчетРасчетов", Субконто);
	
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетДоходаСубконто1");
	Субконто.Вставить(2, "СчетДоходаСубконто2");
	Субконто.Вставить(3, "СчетДоходаСубконто3");
	
	Результат.Вставить("СчетДохода", Субконто);

	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетРасходаСубконто1");
	Субконто.Вставить(2, "СчетРасходаСубконто2");
	Субконто.Вставить(3, "СчетРасходаСубконто3");
	
	Результат.Вставить("СчетРасхода", Субконто);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
	
#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	ФинансовыеИнструментыУХ.ДобавитьКомандыОтчетовИнвестиции(КомандыОтчетов, Параметры);
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ПоступлениеИнвестиций.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);

КонецПроцедуры

// Добавляет команду создания документа "Реализация услуг и прочих активов".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	ТекущиеМД = ПустаяСсылка().Метаданные();
	
	Если ПравоДоступа("Добавление", ТекущиеМД) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = ТекущиеМД.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(ТекущиеМД);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Печать
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры
#КонецОбласти

#КонецЕсли