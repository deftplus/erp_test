
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//								Конструктор структуры: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Автор = Пользователи.АвторизованныйПользователь();
	
	// Реквизиты используются при заполнении заказа, поэтому получим их заранее
	ТипПроизводственногоПроцесса = Метаданные.Документы.ЗаказНаПроизводство2_2.Реквизиты.ТипПроизводственногоПроцесса.ЗначениеЗаполнения;
	Ответственный = Пользователи.ТекущийПользователь();
	Подразделение = ЗначениеНастроекПовтИсп.ПолучитьПодразделениеДиспетчерПоУмолчанию(Подразделение, Ответственный);
	НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
	
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АдресПродукция") Тогда
			ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.АдресПродукция);
		ИначеЕсли ДанныеЗаполнения.Свойство("Товары") Тогда
			ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.Товары);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Источник") И ДанныеЗаполнения.Источник = "ФормированиеЗаказовНаПроизводствоПоПлану" Тогда
			УстановитьНовыйНомерОчередиПоДатеПотребности();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ЗаполнитьПоЗаказуНаПеремещение(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкаНаВозврат(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		ЗаполнитьПоЗаказуНаРемонт(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		ЗаполнитьПоЗаказуНаСборку(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
		ЗаполнитьПоЗаказуМатериаловВПроизводство(ДанныеЗаполнения);
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	ПараметрыЗаполнения = Документы.ЗаказНаПроизводство2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗаказПодДеятельность, ПараметрыЗаполнения);
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Подразделение-диспетчер
	Если ЗначениеЗаполнено(Подразделение) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "ПодразделениеДиспетчер") <> Истина Тогда
	
		ТекстОшибки = НСтр("ru = 'Подразделением, ответственным за выполнение заказа, должно быть подразделение-диспетчер';
							|en = 'Dispatching unit should be a business unit responsible for the order fulfillment'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,
			"Подразделение", 
			"Объект",
			Отказ);
		
	КонецЕсли;
	
	// Желаемая дата, начать не ранее, размешение выпуска
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
		
		Если ЗначениеЗаполнено(ДатаПотребности) И ЗначениеЗаполнено(НачатьНеРанее) И ДатаПотребности < НачатьНеРанее Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата потребности меньше даты начала производства';
								|en = 'Demand date is less than the production start date'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"ДатаПотребности", 
				"Объект",
				Отказ);
		
		КонецЕсли;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("РазмещениеВыпуска");
	КонецЕсли;
	
	// Желаемая дата выпуска необходима только при планировании "К окончанию".
	Если РазмещениеВыпуска <> Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПотребности");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	Иначе
		Если ДоговорНеОбязателен Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Договор");
		КонецЕсли;
	КонецЕсли;
	
	// Назначение выходных изделий получаемых в результате разборки должно быть заполнено в давальческой схеме.
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		ИЛИ (ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка
			И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НазначениеПродукция");
	КонецЕсли;
	
	// Способ распределения затрат на выходные изделия должен быть заполнен только для заказов
	// с типом процесса "Без спецификаций"
	Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	КонецЕсли;
	
	ПроверитьЗаполнениеТаблицыПродукция(
		МассивНепроверяемыхРеквизитов,
		Отказ);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыПроверки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ПараметрыОкругления = НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Продукция";
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	#Область ЗаполнениеНазначений
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
		
		ШаблонНазначения = Документы.ЗаказНаПроизводство2_2.ШаблонНазначения(ЭтотОбъект);
		ТекущийВариантОбособления = УправлениеПроизводством.ВариантОбособленияМатериаловВПроизводстве();
		ПустойШаблон = ТекущийВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства;
		ПерегенерацияНазначения = Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения,
			ЭтотОбъект, "НаправлениеДеятельности,Партнер,Договор,ХозяйственнаяОперация", Отказ, Ложь, ПустойШаблон);
		
	Иначе
		
		ПерегенерацияНазначения = ЗначениеЗаполнено(Назначение);
		ТекущийВариантОбособления = Неопределено;
		Назначение = Неопределено;
		
	КонецЕсли;
	
	Если ПерегенерацияНазначения Тогда
		ВариантОбособления = ТекущийВариантОбособления;
		ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗаполнениеПартииПроизводства
	
	Если ТипПроизводственногоПроцесса =
			Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций
		И Не ЗначениеЗаполнено(ПартияПроизводства) Тогда
		ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку();
	КонецЕсли;
	
	#КонецОбласти
	
	УстановитьНовыйНомерОчереди();
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Для каждого СтрокаТЧ Из Продукция Цикл
		
		Если СтрокаТЧ.СписатьНаРасходы Тогда
			СтрокаТЧ.Назначение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоНовый() Тогда
		
		СсылкаНового = ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = Документы.ЗаказНаПроизводство2_2.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		УникальныйИдентификатор = Строка(СсылкаНового.УникальныйИдентификатор());
		
	ИначеЕсли ПустаяСтрока(УникальныйИдентификатор) Тогда
		УникальныйИдентификатор = Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи",
		?(ЭтоНовый(), Ложь,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления")));
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения = Документы.ЗаказНаПроизводство2_2.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Подразделение, ЗаказПодДеятельность);
	
	#КонецОбласти
	
	#Область ЗаполнениеПартииПроизводства
	
	Если ЗначениеЗаполнено(ПартияПроизводства) Тогда
		
		ПометкаУдаленияКлюча = ПометкаУдаления;
		Если Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			ПометкаУдаленияКлюча = Истина;
		КонецЕсли;
		
		ПоляПартии = Документы.ЗаказНаПроизводство2_2.ПоляПартии(ЭтотОбъект);
		
		Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
			ПартияПроизводства,
			ПоляПартии,
			ДоступноОбновлениеПартииПроизводства(),
			ПометкаУдаленияКлюча);
		
		Если Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			ПартияПроизводства = Справочники.ПартииПроизводства.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	МетаданныеРеквизиты = Метаданные.Документы.ЗаказНаПроизводство2_2.Реквизиты;
	
	ДокументОснование = Неопределено;
	
	Назначение = Неопределено;
	ДоговорНеОбязателен = Ложь;
	
	Если ЗначениеЗаполнено(НачатьНеРанее) Тогда
		ИспользоватьИнтервалПланированияЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
		НачатьНеРанее = Макс(
			НачатьНеРанее,
			?(ИспользоватьИнтервалПланированияЧас, НачалоЧаса(ТекущаяДатаСеанса()), НачалоДня(ТекущаяДатаСеанса())));
	КонецЕсли;
	
	ВариантОбособления = Неопределено;
	ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется = Ложь;
	
	ПартияПроизводства = Неопределено;
	
	Статус = МетаданныеРеквизиты.Статус.ЗначениеЗаполнения;
	Очередь = МетаданныеРеквизиты.Очередь.ЗначениеЗаполнения;

	Ответственный = Пользователи.ТекущийПользователь();
	
	ПараметрыЗаполнения = Документы.ЗаказНаПроизводство2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗаказПодДеятельность, ПараметрыЗаполнения);
	
	Автор = Пользователи.АвторизованныйПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);
	
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ВыполнитьКонтрольЗапланированныхЭтапов(Отказ, Истина);
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОчиститьСостояние(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ЗаполнитьПоТаблицеТовары(АдресПродукция)
	
	Если ЭтоАдресВременногоХранилища(АдресПродукция) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресПродукция);
		УдалитьИзВременногоХранилища(АдресПродукция);
	Иначе
		ТаблицаТоваров = АдресПродукция; //ТаблицаЗначений - для заполнения была передана таблица значений.
	КонецЕсли;
	
	Продукция.Очистить();
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНачатьНеРанее = ТаблицаТоваров.Колонки.Найти("НачатьНеРанее") <> Неопределено;
	ЕстьДатаПотребности = ТаблицаТоваров.Колонки.Найти("ДатаПотребности") <> Неопределено;
	ЕстьЗаказыКОбеспечению = ТаблицаТоваров.Колонки.Найти("Заказ") <> Неопределено;
	
	ЗаказыКОбеспечению = Новый Массив;
	Если ЕстьНачатьНеРанее ИЛИ ЕстьДатаПотребности ИЛИ ЕстьЗаказыКОбеспечению Тогда
		
		НачатьНеРанееМинимальная = Неопределено;
		ДатаПотребностиМинимальная = Неопределено;
		
		Для Каждого Строка Из ТаблицаТоваров Цикл
			Если ЕстьНачатьНеРанее Тогда
				Если НачатьНеРанееМинимальная <> Неопределено Тогда
					НачатьНеРанееМинимальная = Мин(Строка.НачатьНеРанее,НачатьНеРанееМинимальная);
				Иначе
					НачатьНеРанееМинимальная = Строка.НачатьНеРанее;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьДатаПотребности Тогда
				Если ДатаПотребностиМинимальная <> Неопределено Тогда
					ДатаПотребностиМинимальная = Мин(Строка.ДатаПотребности,ДатаПотребностиМинимальная);
				Иначе
					ДатаПотребностиМинимальная = Строка.ДатаПотребности;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьЗаказыКОбеспечению Тогда
				Если ЗначениеЗаполнено(Строка.Заказ) 
					И ЗаказыКОбеспечению.Найти(Строка.Заказ) = Неопределено Тогда
					ЗаказыКОбеспечению.Добавить(Строка.Заказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НачатьНеРанееМинимальная) Тогда
			НачатьНеРанее = НачатьНеРанееМинимальная;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаПотребностиМинимальная) Тогда
			ДатаПотребности = ДатаПотребностиМинимальная;
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппируемыеПоля = "Номенклатура,Характеристика"
		+ ?(ТаблицаТоваров.Колонки.Найти("Назначение") <> Неопределено,",Назначение","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Склад") <> Неопределено,",Склад","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Подразделение") <> Неопределено,",Подразделение","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Спецификация") <> Неопределено,",Спецификация","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Упаковка") <> Неопределено,",Упаковка","");
	
	СвернутаяТаблицаТоваров = ТаблицаТоваров.Скопировать(,ГруппируемыеПоля+",Количество");
	СвернутаяТаблицаТоваров.Свернуть(ГруппируемыеПоля,"Количество");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из СвернутаяТаблицаТоваров Цикл
		
		СтрокаПродукция = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПродукция, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
	УстановитьПриоритетИНомерОчередиПоПотребности(ЗаказыКОбеспечению);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуДавальца(ЗаказДавальца)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказДавальца.Ссылка КАК Заказ,
	|	ЗаказДавальца.Статус КАК СтатусДокумента,
	|
	|	ЗаказДавальца.Приоритет                    КАК Приоритет,
	|	ЗаказДавальца.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|
	|	ЗаказДавальца.Организация        КАК Организация,
	|	ЗаказДавальца.НалогообложениеНДС КАК ЗаказПодДеятельность,
	|	ЗаказДавальца.Партнер            КАК Партнер,
	|	ЗаказДавальца.Договор            КАК Договор,
	|	ВЫБОР 
	|		КОГДА ЗаказДавальца.НаправлениеДеятельности.УчетЗатрат
	|			ТОГДА ЗаказДавальца.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                            КАК НаправлениеДеятельности,
	|
	// Ошибки заполнения
	|	ВЫБОР КОГДА ЗаказДавальца.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|										   ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|										   ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                     КАК ЕстьОшибкиСтатус,
	|	НЕ ЗаказДавальца.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка = &ЗаказДавальца
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|// Дата потребности
	|ВЫБРАТЬ
	|	МИНИМУМ(Товары.ДатаОтгрузки) КАК ДатаПотребности
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И Товары.Ссылка = &ЗаказДавальца");
	
	Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();  
	Реквизиты = ПакетРезультатов[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказДавальца,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки
	РеквизитыШапки = "Приоритет, ТипПроизводственногоПроцесса, Организация, ЗаказПодДеятельность, НаправлениеДеятельности, Партнер, Договор";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, РеквизитыШапки);
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	ДокументОснование = ЗаказДавальца;
	ПроизводствоПоЗаказу = Истина;
	Выборка = ПакетРезультатов[1].Выбрать();
	ДатаПотребности = '00010101';
	Если Выборка.Следующий() Тогда
		ДатаПотребности = Выборка.ДатаПотребности;
	КонецЕсли;
	ДатаПотребности = Макс(ДатаПотребности, НачалоДня(ТекущаяДатаСеанса()));
	
	МассивЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказДавальца);
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(МассивЗаказов,, ТипПроизводственногоПроцесса);
	Продукция.Загрузить(Результат.Выгрузить());
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ЗаказКлиента)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Статус             КАК СтатусДокумента,
		|	ЗаказКлиента.Приоритет          КАК Приоритет,
		|	ЗаказКлиента.Проведен           КАК Проведен,
		|	ЗаказКлиента.Склад              КАК СкладДокумента,
		|	ЗаказКлиента.Организация        КАК Организация,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Товары.ДатаОтгрузки) КАК Дата
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаказКлиента
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Результат = Запрос.ВыполнитьПакет();  
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	ДокументОснование       = ЗаказКлиента;
	ЗаказПодДеятельность    = Реквизиты.НалогообложениеНДС;
	Приоритет               = Реквизиты.Приоритет;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, ПараметрыТаблицыТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПеремещение(ЗаказНаПеремещение)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Статус КАК СтатусДокумента,
		|	ЗаказНаПеремещение.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ЗаказНаПеремещение.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЗаказНаПеремещение.Организация
		|		ИНАЧЕ ЗаказНаПеремещение.ОрганизацияПолучатель
		|	КОНЕЦ КАК Организация,
		|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
		|	ВЫБОР 
		|		КОГДА ЗаказНаПеремещение.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказНаПеремещение.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка = &ЗаказНаПеремещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|		КОГДА Товары.ОкончаниеПоступления = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Товары.Ссылка.ЖелаемаяДатаПоступления
		|		ИНАЧЕ Товары.ОкончаниеПоступления
		|	КОНЕЦ) КАК Дата
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаказНаПеремещение
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	Результат = Запрос.ВыполнитьПакет();  
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаПеремещение,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	ДокументОснование       = ЗаказНаПеремещение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказНаПеремещение, ПараметрыТаблицыТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкаНаВозврат(ЗаявкаНаВозврат)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Статус КАК СтатусДокумента,
		|	ЗаказКлиента.Проведен КАК Проведен,
		|	ЗаказКлиента.Склад КАК СкладДокумента,
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказКлиента.СпособКомпенсации   КАК СпособКомпенсации,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаявкаНаВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Товары.ДатаОтгрузки) КАК Дата
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаявкаНаВозврат
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	
	Результат = Запрос.ВыполнитьПакет();  
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ТекстОшибки = НСтр("ru = 'Ввод на основании возможен для заявок на возврат со способом компенсации ""Заменить товары"".';
							|en = 'You can generate documents only from the Return Requests whose compensation method is ""Replace items"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаявкаНаВозврат,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаявкаНаВозврат;
	ЗаказПодДеятельность	= Реквизиты.НалогообложениеНДС;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаявкаНаВозврат, ПараметрыТаблицыТовары);

	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаВнутреннееПотребление(Заказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Статус КАК СтатусДокумента,
		|	Заказ.Проведен КАК Проведен,
		|	Заказ.Склад КАК СкладДокумента,
		|	Заказ.Организация КАК Организация,
		|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Товары.ДатаОтгрузки) КАК Дата
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Заказ
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.ВыполнитьПакет(); 
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Заказ,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= Заказ;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(Заказ, ПараметрыТаблицыТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаРемонт(ЗаказНаРемонт)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Статус КАК СтатусДокумента,
		|	Заказ.Проведен КАК Проведен,
		|	Заказ.Организация КАК Организация,
		|	Заказ.ДатаНачала КАК ДатаПотребности,
		|	ВЫБОР
		|		КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказНаРемонт");
	
	Запрос.УстановитьПараметр("ЗаказНаРемонт", ЗаказНаРемонт);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();  
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаРемонт,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаРемонт;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = Реквизиты.ДатаПотребности;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказНаРемонт, ПараметрыТаблицыТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаСборку(ЗаказНаСборку)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Проведен               КАК Проведен,
		|	Заказ.Организация             КАК Организация,
		|	Заказ.Сделка                  КАК Сделка,
		|	Заказ.Склад                   КАК СкладДокумента,
		|	Заказ.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	Заказ.НачалоСборкиРазборки    КАК ДатаПотребности,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказНаСборку");
		
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		ТекстОшибки = НСтр("ru = 'Ввод на основании возможен для заказов на сборку с операцией ""Сборка из комплектующих"".';
							|en = 'You can generate documents only from Assembly Orders with the ""Assemble kit"" type.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не Реквизиты.Проведен Тогда
		ТекстОшибки = НСтр("ru = 'Документ не проведен. Ввод на основании непроведенного документа запрещен.';
							|en = 'Document is not posted. Generation from unposted documents is not allowed.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаСборку;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = Реквизиты.ДатаПотребности;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказНаСборку, ПараметрыТаблицыТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуМатериаловВПроизводство(Заказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Статус КАК СтатусДокумента,
		|	Заказ.Проведен КАК Проведен,
		|	Заказ.Организация КАК Организация,
		|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
		|	ВЫБОР
		|		КОГДА Заказ.ЖелаемаяДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Заказ.ИспользоватьДлительностьПеремещения
		|			ТОГДА ДОБАВИТЬКДАТЕ(Заказ.ЖелаемаяДатаПоступления, ДЕНЬ, -Заказ.ДлительностьПеремещения)
		|		ИНАЧЕ Заказ.ЖелаемаяДатаПоступления
		|	КОНЕЦ КАК ДатаПотребности
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Заказ,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки
	Организация	      = Реквизиты.Организация;
	ДатаПотребности   = Реквизиты.ДатаПотребности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	ДокументОснование = Заказ;
	
	// Заполнение табличной части
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(Заказ, ПараметрыТаблицыТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСпецификацииВСтроках(ТолькоНезаполненные = Ложь)
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(ЭтотОбъект, Документы.ЗаказНаПроизводство2_2);
	
	// Заполнение спецификаций
	МассивДанных = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для каждого Строка Из Продукция Цикл
		
		Если ТолькоНезаполненные И Не Строка.Спецификация.Пустая() Тогда
			Продолжить;
		КонецЕсли;

		ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СобратьДанныеОбИзделииДляВыбораСпецификации(
			ЭтотОбъект, Строка, ПараметрыВыбораСпецификаций);
		
		МассивДанных.Добавить(ДанныеОбИзделии);
		МассивСтрок.Добавить(Строка);
		
	КонецЦикла;
	
	// Заполним спецификации
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных, ПараметрыВыбораСпецификаций);
	
КонецПроцедуры

#КонецОбласти

#Область Очередь

Процедура УстановитьНовыйНомерОчереди()
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству
		ИЛИ ЗначениеЗаполнено(Очередь) Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
			Очередь = 0;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Очередь) Тогда
		Очередь = Документы.ЗаказНаПроизводство2_2.НовыйНомерОчереди();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПриоритетИНомерОчередиПоПотребности(ЗаказыКОбеспечению)
	
	ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(ЗаказыКОбеспечению);
	
	СписокЭтапов = Новый Массив;
	Для каждого Элемент Из ЗаказыПоТипам Цикл
		Если Элемент.Ключ = "Документ.ЭтапПроизводства2_2" Тогда
			СписокЭтапов = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(СписокЭтапов) Тогда
		Возврат;
	КонецЕсли;
	
	СписокНазначений = Новый Массив;
	Для каждого Строка Из Продукция Цикл
		Если ЗначениеЗаполнено(Строка.Назначение) И СписокНазначений.Найти(Строка.Назначение) = Неопределено
			И Не Строка.Отменено Тогда
			СписокНазначений.Добавить(Строка.Назначение);
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(СписокНазначений) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Приоритет КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Приоритет КАК Приоритет
	|	ИЗ
	|		Документ.ЗаказКлиента КАК Т
	|	ГДЕ
	|		Т.Назначение В(&СписокНазначений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Приоритет
	|	ИЗ
	|		Документ.ЗаказДавальца КАК Т
	|	ГДЕ
	|		Т.Назначение В(&СписокНазначений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Распоряжение.Приоритет
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК Т
	|	ГДЕ
	|		Т.Ссылка В(&СписокЭтапов)) КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Приоритет.РеквизитДопУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&СписокЭтапов) И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
	Запрос.УстановитьПараметр("СписокНазначений", СписокНазначений);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		Приоритет = Выборка.Приоритет;
		
	КонецЕсли;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		
		Распоряжения = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку(0);
		Очередь = Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Распоряжения);
		
	КонецЕсли
	
КонецПроцедуры

Процедура УстановитьНовыйНомерОчередиПоДатеПотребности()
	
	Если Не ЗначениеЗаполнено(ДатаПотребности)
		ИЛИ Приоритет.Пустая()
		ИЛИ Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Заказы.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Приоритет = &Приоритет
		|	И Заказы.Подразделение = &Подразделение
		|	И Заказы.ДатаПотребности > &ДатаПотребности
		|	И Заказы.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заказы.Приоритет.РеквизитДопУпорядочивания,
		|	Заказы.Подразделение.РеквизитДопУпорядочивания,
		|	Заказы.Очередь");
	
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаПотребности", ДатаПотребности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Распоряжения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Ссылка);
		Очередь = Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Распоряжения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольРезультатовПроведения

Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)
	
	ВыполнитьКонтрольЗакрытияЗаказа(Отказ);
	ВыполнитьКонтрольЗапланированныхЭтапов(Отказ);
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЗакрытияЗаказа(Отказ)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ПараметрыПроверки = Новый Структура("КонтрольВыполненияЗаказа");
	Запрос =
		Документы.ЗаказНаПроизводство2_2.СформироватьЗапросПроверкиПриСменеСтатуса(
			МассивСсылок,
			Статус,
			ПараметрыПроверки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Отказ Или Не Документы.ЗаказНаПроизводство2_2.ПроверкаПередСменойСтатуса(Выборка, Статус, ПараметрыПроверки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЗапланированныхЭтапов(Отказ, УдалениеПроведения = Ложь)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется
		И Не УдалениеПроведения Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("Распоряжение", ЭтотОбъект.Ссылка);
	
	Блокировка.Заблокировать();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Распоряжение = &Ссылка
	|	И Таблица.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Если УдалениеПроведения Тогда
			ТекстШаблона = НСтр("ru = 'Не удалось сделать непроведенным заказ на производство № %1 от %2';
								|en = 'Cannot make production order No.%1, %2 unposted'");
		Иначе
			ТекстШаблона = НСтр("ru = 'Не удалось провести заказ на производство № %1 от %2';
								|en = 'Cannot post production order No.%1, %2'");
		КонецЕсли;
		
		ТекстШаблона = ТекстШаблона + НСтр("ru = ', т.к. по заказу запланированы этапы.';
											|en = 'as stages are planned for the order.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеТаблицыПродукция(МассивНепроверяемыхРеквизитов, Отказ)
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Характеристика");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Подразделение");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Назначение");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ПричинаОтмены");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Количество");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДоляСтоимости");
	
	// Проверка заполнения табличной части "Продукция"
	ЗаголовокТЧ = ПроизводствоКлиентСервер.ЗаголовокТабличнойЧастиПоТипуПроцесса(ТипПроизводственногоПроцесса);
	Если Не ЗначениеЗаполнено(Продукция) Тогда
		
		Шаблон = НСтр("ru = 'Не заполнена табличная часть ""%1""';
						|en = 'Table ""%1"" is not filled in'");
		ТекстСообщения = СтрШаблон(Шаблон, ЗаголовокТЧ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"Продукция",
			,
			Отказ);
		Возврат;
		
	КонецЕсли;
	
	// Проверка строк табличной части "Продукция"
	РеквизитыНоменклатуры = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В (&МассивСсылок)");
	Запрос.УстановитьПараметр("МассивСсылок", Продукция.ВыгрузитьКолонку("Номенклатура"));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура("ТипНоменклатуры,ХарактеристикиИспользуются,ВестиУчетПоГТД");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		РеквизитыНоменклатуры.Вставить(Выборка.Номенклатура, ЗначенияРеквизитов);
	КонецЦикла;
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД =
		ПолучитьФункциональнуюОпцию("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД");
	
	ШаблонАдреса = НСтр("ru = 'в строке %1 списка ""%2""';
						|en = 'in line %1 of the ""%2"" list'");
	ШаблонГТД = НСтр("ru = 'В строке %1 списка ""%2"" выбрана номенклатура, для которой ведется учет по ГТД.
		|При включенной опции ""Запретить оформление операций с импортными товарами без номеров ГТД"" выбор такой номенклатуры запрещен.';
		|en = 'Items with CCD records are selected in line %1 of the %2 list. 
		|you cannot select such products while the ""Prohibit registration of operations with imported goods without CCD numbers"" option is enabled.'");
	
	Для каждого Строка Из Продукция Цикл
		
		АдресОшибки = СтрШаблон(ШаблонАдреса, Строка.НомерСтроки, ЗаголовокТЧ);
		
		// Проверка заполнения колонки "Номенклатура"
		Если Строка.Номенклатура.Пустая() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Номенклатура""';
									|en = 'Column ""Items"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
				
			Продолжить;
		КонецЕсли;
		
		// Проверка правильности выбора изделий при учете по ГТД
		Если Не Строка.Номенклатура.Пустая()
			И ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД
			И РеквизитыНоменклатуры[Строка.Номенклатура].ВестиУчетПоГТД = Истина
			И (РеквизитыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				ИЛИ РеквизитыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонГТД,
				Строка.НомерСтроки,
				ЗаголовокТЧ);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Характеристика"
		Если ХарактеристикиИспользуются И РеквизитыНоменклатуры[Строка.Номенклатура].ХарактеристикиИспользуются
			И Строка.Характеристика.Пустая() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Характеристика""';
									|en = 'Column ""Variant"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Характеристика");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				, 
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Назначение"
		Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка
			И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
				И Строка.Назначение.Пустая() Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Назначение""';
										|en = 'Column ""Assignment"" is not filled in'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Назначение");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения + " " + АдресОшибки,
					ЭтотОбъект,
					Поле,
					, 
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		// Проверка заполнения колонок "Склад" и "Подразделение"
		Если РеквизитыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
			
			Если Строка.СписатьНаРасходы Тогда
				
				Если Строка.Подразделение.Пустая() Тогда
					
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Подразделение""';
											|en = 'Column ""Business unit"" is not filled in'");
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Подразделение");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения + " " + АдресОшибки,
						ЭтотОбъект,
						Поле,
						, 
						Отказ);
					
				КонецЕсли;
				
			Иначе	
	
				Если Строка.Склад.Пустая() Тогда
					
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Склад""';
											|en = 'Column ""Warehouse"" is not filled in'");
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Склад");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения + " " + АдресОшибки,
						ЭтотОбъект,
						Поле,
						, 
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Сборка
				И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
				ТекстСообщения = НСтр("ru = 'Не допускается указание работы';
										|en = 'It is not allowed to specify work'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Номенклатура");
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения + " " + АдресОшибки,
					ЭтотОбъект,
					Поле,
					,
					Отказ);
			
			ИначеЕсли Строка.Подразделение.Пустая() Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Подразделение""';
										|en = 'Column ""Business unit"" is not filled in'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Подразделение");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения + " " + АдресОшибки,
					ЭтотОбъект,
					Поле,
					, 
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
			
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если Строка.Отменено И Не ЗначениеЗаполнено(Строка.ПричинаОтмены) Тогда
			
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину отмены';
									|en = 'Cancellation reason is required'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Количество"
		Если Строка.Количество = 0 И Не Строка.Отменено Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Количество""';
									|en = 'Column ""Quantity"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Количество");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Доля стоимости"
		Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций
			И ПроизводствоСервер.ТребуетсяЗаполнитьДолюСтоимости(ЭтотОбъект, Строка) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Доля стоимости""';
									|en = 'Column ""Cost share"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "ДоляСтоимости");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступноОбновлениеПартииПроизводства()
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапПроизводства22.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства22
	|ГДЕ
	|	ЭтапПроизводства22.ПартияПроизводства = &ПартияПроизводства
	|	И ЭтапПроизводства22.Проведен");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
