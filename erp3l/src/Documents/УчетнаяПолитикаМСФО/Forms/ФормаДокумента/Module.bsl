
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КэшируемыеЗначения = Новый Структура;
	КэшируемыеЗначения.Вставить("ИспользоватьУчетныеПолитикиМСФО",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетныеПолитикиМСФО"));
		
	РеквизитыМД = Объект.Ссылка.Метаданные().Реквизиты;
	Для каждого текРеквизит Из РеквизитыМД Цикл	
		КэшируемыеЗначения.Вставить(текРеквизит.Имя, текРеквизит.Подсказка);
	КонецЦикла;
	
	ИсточникФР = НСтр("ru = 'Регистры финансового учета'");
	
	ОбновитьИсключенияУП(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИсключенияУП" Тогда
		 ОбновитьИсключенияУП(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФиксированныеСчетаУчетаБД(Команда)
	
	Если КэшируемыеЗначения.ИспользоватьУчетныеПолитикиМСФО Тогда

		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("УчетнаяПолитика", Объект.Ссылка));
		ОткрытьФорму("РегистрСведений.ФиксированныеСчетаБД.ФормаСписка", ПараметрыФормы);		
		
	Иначе 
		
		ОткрытьФорму("Справочник.ФиксированныеСчетаУчетаБД.ФормаСписка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГдеУстановлена(Команда)
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("УчетнаяПолитика", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.УчетныеПолитикиМСФО.ФормаСписка", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияНастройкиЗакрытияЗатрат(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.НастройкиРаспределенияЗатратМСФО"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияНастройкиПовтора(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.НастройкиПовторенияПроводокПрошлыхПериодов"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияПараметрыУчетаФИ(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.ПараметрыУчетаФинансовыхИнструментовМСФО"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияПараметрыУчетаВНА(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.ГруппыВНАМСФО"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияПараметрыРезервовЗадолженности(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.ПараметрыРасчетаРезервовПоДЗ"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияПараметрыРезервовМПЗ(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.ПараметрыРасчетаРезервовПоЗапасам"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияНастройкиРеклассаАПСчетов(Команда)
	ОткрытьФормуИсключения(Тип("РегистрСведенийНаборЗаписей.НастройкиРеклассификацииАПСчетов"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияСчетаУчетаКурсовыхРазниц(Команда)
	ОткрытьФормуИсключения(Тип("СправочникСсылка.СчетаУчетаКурсовыхРазниц"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияЭффектыОтРазницНП(Команда)
	ОткрытьФормуИсключения(Тип("РегистрСведенийНаборЗаписей.НастройкиРеклассификацииАПСчетов"));
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияСчетаЧА(Команда)
	ОткрытьФормуИсключения(Тип("РегистрСведенийНаборЗаписей.СчетаУчетаЧАдляАПСП"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ШаблонТрансляцииПриИзменении(Элемент)
	ЗаполнитьПоШаблонуТрансляции();
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	ЗначенияШаблонаТрансляции = ЗначенияШаблонаТрансляции(Форма.Объект.ШаблонТрансляции);

	Форма.МодельУчетаМСФО = ЗначенияШаблонаТрансляции.МодельУчетаМСФО;
	
	Форма.Элементы.РежимТрансформационнойКорректировки.Видимость = Не ЗначенияШаблонаТрансляции.ЭтоТУ;
    Форма.Элементы.СпособТрансляции.Видимость = ЗначенияШаблонаТрансляции.СпособТрансляцииВидимость;
	Форма.Элементы.ШаблонТрансляцииПланСчетовИсточник.Видимость = Не ЗначенияШаблонаТрансляции.ЭтоФР;
	Форма.Элементы.ИсточникФР.Видимость = ЗначенияШаблонаТрансляции.ЭтоФР;
	
	Для каждого ТекРесурс Из ЗначенияШаблонаТрансляции Цикл
	
		Если Не СтрНачинаетсяС(ТекРесурс.Ключ, "Ресурс") Тогда
			Продолжить;// не ресурс
		КонецЕсли;
		
		ТекЭлемент = Форма.Элементы[Сред(ТекРесурс.Ключ, СтрДлина("Ресурс")+1)];
		
		ТекЭлемент.Видимость = ЗначениеЗаполнено(ТекРесурс.Значение);
	    Если Не ТекЭлемент.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЭлемент.Подсказка = СтрШаблон("%1(%2)", КэшируемыеЗначения[ТекЭлемент.Имя], ТекРесурс.Значение); 
		 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияШаблонаТрансляции(ШаблонТрансляции)
		
	Результат = Новый Структура;

	ЭтоТУ = ШаблонТрансляции.НаправлениеТрансляции = ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии")
			ИЛИ ШаблонТрансляции.НаправлениеТрансляции = ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели");   
			
	ЭтоФР = ШаблонТрансляции.НаправлениеТрансляции = ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии");
			
	МодельУчетаМСФО = ?(ЭтоТУ, ПредопределенноеЗначение("Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки"),
										ПредопределенноеЗначение("Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки"));
	
	Результат.Вставить("ЭтоТУ", 					ЭтоТУ);
	Результат.Вставить("ЭтоФР", 					ЭтоФР);
	Результат.Вставить("МодельУчетаМСФО", 			МодельУчетаМСФО);
	Результат.Вставить("СпособТрансляцииВидимость", ШаблонТрансляции.НаправлениеТрансляции <> ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.ПоказателиВПоказатели"));
	
	Результат.Вставить("РесурсВалютаИсточник", 		"");
    Результат.Вставить("РесурсВалютаУчета", 		"");
	Результат.Вставить("РесурсВалютаИсточникДоп", 	"");
	Результат.Вставить("РесурсВалютаУчетаДоп",		"");
	
	Если Не ЭтоТУ И Не ЭтоФР Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("Балансовый, ПризнакУчета", Истина, "");
	Приемники = ШаблонТрансляции.РегистрБухгалтерииПриемник.Ресурсы.Выгрузить(Отбор, "Имя, Синоним");
	Источники = ШаблонТрансляции.РегистрБухгалтерииИсточник.Ресурсы.Выгрузить(Отбор, "Имя, Синоним");
	Если ЭтоФР И Источники.Количество() = 0 Тогда
		
		Синоним = НСтр("ru = 'СуммаРегл'");
		ЗаполнитьЗначенияСвойств(Источники.Добавить(), Новый Структура("Имя, Синоним", "СуммаРегл", Синоним));
		
		Синоним = НСтр("ru = 'СуммаУпр'");
		ЗаполнитьЗначенияСвойств(Источники.Добавить(), Новый Структура("Имя, Синоним", "СуммаУпр", Синоним));
		
	КонецЕсли;
	
	Если Приемники.Количество() = 0 Или Источники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не найдены ресурсы в описании регистра бухгалтерии ИБ'");
		КлючДанных = ?(Приемники.Количество() = 0, ШаблонТрансляции.РегистрБухгалтерииИсточник, ШаблонТрансляции.РегистрБухгалтерииПриемник);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных);
		
		Возврат Результат;
		
	КонецЕсли;
	
	СтрокаОсновная = ШаблонТрансляции.СоответствиеРесурсов.Найти("СуммаВВалютеУчета", "РесурсПриемник");
	СтрокаДоп = ШаблонТрансляции.СоответствиеРесурсов.Найти("СуммаВВалютеОтчетности", "РесурсПриемник");
	
	Если СтрокаОсновная = Неопределено Тогда
		СтрокаОсновная = ШаблонТрансляции.СоответствиеРесурсов.Найти(Приемники[0].Имя, "РесурсПриемник");
	КонецЕсли;
	
	Если (СтрокаДоп = Неопределено) И (Приемники.Количество() > 1) Тогда
		
		СтрокаДоп = ШаблонТрансляции.СоответствиеРесурсов.Найти(Приемники[1].Имя, "РесурсПриемник");
		Если СтрокаДоп = Неопределено Тогда
			СтрокаДоп = Новый Структура("РесурсПриемник, РесурсИсточник", Приемники[1].Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаОсновная <> Неопределено Тогда
		Результат.Вставить("РесурсВалютаИсточник",	СинонимИзТаблицы(СтрокаОсновная.РесурсИсточник, Источники));
		Результат.Вставить("РесурсВалютаУчета",	СинонимИзТаблицы(СтрокаОсновная.РесурсПриемник, Приемники));
	КонецЕсли;
	
	Если СтрокаДоп <> Неопределено Тогда
		Результат.Вставить("РесурсВалютаИсточникДоп", СинонимИзТаблицы(СтрокаДоп.РесурсИсточник, Источники));
		Результат.Вставить("РесурсВалютаУчетаДоп", СинонимИзТаблицы(СтрокаДоп.РесурсПриемник, Приемники));
	КонецЕсли;
			
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция СинонимИзТаблицы(Имя, ТаблицаСинонимов)
	
	Если Имя = "" Тогда
		Возврат Имя;
	КонецЕсли;
	
	стр = ТаблицаСинонимов.Найти(Имя, "Имя");
	Если стр = Неопределено Тогда
		Возврат Имя;	
	КонецЕсли;
	
	Возврат стр.Синоним;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоШаблонуТрансляции()
	
	ВалютаРУ = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Объект.ШаблонТрансляции.НаправлениеТрансляции 
		= ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.ПоказателиВПоказатели") Тогда
		Объект.СпособТрансляции = ПредопределенноеЗначение("Перечисление.СпособыТрансляции.СводныеПоДатам");
	ИначеЕсли Объект.СпособТрансляции.Пустая() Тогда
		Объект.СпособТрансляции = ПредопределенноеЗначение("Перечисление.СпособыТрансляции.ПоДокументамФоновоеЗадание");	
	КонецЕсли;
	
	Объект.ПланСчетовУчета 		= Объект.ШаблонТрансляции.ПланСчетовПриемник;
		
	Объект.ВалютаИсточник 		= ВалютаРУ;
	Объект.ВалютаИсточникДоп 	= ВалютаРУ;
	Объект.ВалютаУчета 			= Константы.ВалютаУправленческогоУчета.Получить();
	Объект.ВалютаУчетаДоп 		= ВалютаРУ;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсключения(ТипЭлементаУП)
	
	Отбор = Новый Структура("УчетнаяПолитика, РазделУчета", 
						Объект.Ссылка, ИдентификаторОбъектаМетаданных(ТипЭлементаУП));
						
	ОткрытьФорму("РегистрСведений.ИсключенияУчетнойПолитики.ФормаСписка", Новый Структура("Отбор", Отбор));
	
КонецПроцедуры                         

&НаСервереБезКонтекста
Функция ИдентификаторОбъектаМетаданных(ТипЭлементаУП)

	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЭлементаУП);	

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьИсключенияУП(Форма)
	
	Элементы 			= Форма.Элементы;
	КэшируемыеЗначения 	= Форма.КэшируемыеЗначения;
	
	Если Не Форма.КэшируемыеЗначения.Свойство("ЗаголовкиИсключений") Тогда
		
		Форма.КэшируемыеЗначения.Вставить("ЗаголовкиИсключений", Новый Структура);
		Форма.КэшируемыеЗначения.ЗаголовкиИсключений.Вставить("Группа", Элементы.ГруппаПараметрыУчета.Заголовок);
		Для каждого Команда Из Форма.Команды Цикл
			Форма.КэшируемыеЗначения.ЗаголовкиИсключений.Вставить(Команда.Имя, Команда.Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаголовокУП = Неопределено;
	ИсключенияУП = ПолучитьИсключенияУП(Форма.Объект.Ссылка);
	ИтогоИсключений = 0;
	Для каждого Команда Из Форма.Команды Цикл
		
		Форма.КэшируемыеЗначения.ЗаголовкиИсключений.Свойство(Команда.Имя, ЗаголовокУП);
		
		ЗначениеУП = ИсключенияУП.Получить(Команда.Имя);
		Если Не ЗначениеЗаполнено(ЗначениеУП) Тогда
			Команда.Заголовок = ЗаголовокУП;
			Продолжить;
		КонецЕсли;
		
		Команда.Заголовок = ЗаголовокУП + СтрШаблон(" (%1)", ЗначениеУП);	
		ИтогоИсключений = ИтогоИсключений + ЗначениеУП;
			
	КонецЦикла;
	
	Форма.КэшируемыеЗначения.ЗаголовкиИсключений.Свойство("Группа", ЗаголовокУП);
	Если ИтогоИсключений = 0 Тогда
		Элементы.ГруппаПараметрыУчета.Заголовок = ЗаголовокУП;
	Иначе 
		Элементы.ГруппаПараметрыУчета.Заголовок = ЗаголовокУП + СтрШаблон(" (%1)", ЗначениеУП);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсключенияУП(УчетнаяПолитика)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	т.РазделУчета КАК РазделУчета,
	|	КОЛИЧЕСТВО(*) КАК КоличествоИсключений
	|ИЗ
	|	РегистрСведений.ИсключенияУчетнойПолитики КАК т
	|ГДЕ
	|	т.УчетнаяПолитика = &УчетнаяПолитика
	|
	|СГРУППИРОВАТЬ ПО
	|	т.РазделУчета
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 0");
	Запрос.УстановитьПараметр("УчетнаяПолитика", УчетнаяПолитика);
	
	Результат = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.РазделУчета, Выборка.КоличествоИсключений);
	КонецЦикла;                                  
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
