#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Получить сумму, сумму по МСП программы закупок
// (в валюте централизованных закупок на указанную дату)
// Параметры:
//	ПрограммаЗакупок - ДокументСсылка.ПрограммаЗакупок.
//			Документ для которого нужно посчитать суммы.
// Возвращает:
//	Структура:
//		- СуммаДокумента - Число, сумма плана закупок
//			рассчитанную в валюте централизованных закупок
//			на указанную дату.
//		- СуммаТолькоМСП - Число, сумма плана закупок в части МСП.
//		- СуммаБезМСП - Число, сумма плана закупок с флагом
//			исключения при расчете доли СМП
//		- ПроцентМСП - Число == СуммаТолькоМСП / СуммаДокумента * 100.
//
Функция ПолучитьСтатистикуСумм(ПрограммаЗакупок) Экспорт
	ОписаниеСумм = Новый Структура;
	ОписаниеСумм.Вставить("СуммаДокумента", 0);
	ОписаниеСумм.Вставить("СуммаТолькоМСП", 0);
	ОписаниеСумм.Вставить("СуммаБезМСП", 0);
	ОписаниеСумм.Вставить("ПроцентМСП", 0);
	ОписаниеСумм.Вставить("СуммаВсегоМСП", 0);
	ОписаниеСумм.Вставить("ПроцентВсегоМСП", 0);
	Если НЕ ЗначениеЗаполнено(ПрограммаЗакупок.Ссылка) ИЛИ НЕ ПрограммаЗакупок.Проведен Тогда
		Возврат ОписаниеСумм;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокаПланаЗакупок.Ссылка КАК Ссылка,
		|	СтрокаПланаЗакупок.ОрганизацияДляЗаключенияДоговора КАК ОрганизацияДляЗаключенияДоговора,
		|	СтрокаПланаЗакупок.СуммаВВалютеРегламентированногоУчета КАК СуммаВВалютеРегламентированногоУчета,
		|	СтрокаПланаЗакупок.СуммаДокумента КАК СуммаДокумента,
		|	СтрокаПланаЗакупок.ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223 КАК ЗакупкаПоФЗ223,
		|	СтрокаПланаЗакупок.ПриоритетУчастияМалогоИСреднегоПредпринимательства КАК ПриоритетУчастияМалогоИСреднегоПредпринимательства,
		|	СтрокаПланаЗакупок.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков КАК ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков,
		|	СтрокаПланаЗакупок.НеУчитыватьПриРасчетеДолиЗакупокУСМП КАК НеУчитыватьПриРасчетеДолиЗакупокУСМП,
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеОбъекта
		|ПОМЕСТИТЬ ВТ_СтрокиПлана
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО СтрокаПланаЗакупок.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
		|ГДЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Утвержден), ЗНАЧЕНИЕ(Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Выгружен), ЗНАЧЕНИЕ(Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Размещен), ЗНАЧЕНИЕ(Перечисление.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки))
		|	И СтрокаПланаЗакупок.Ссылка В(&СтрокиПлана)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_СтрокиПлана.ЗакупкаПоФЗ223
		|			ТОГДА ЕСТЬNULL(СУММА(ВТ_СтрокиПлана.СуммаВВалютеРегламентированногоУчета), 0)
		|		ИНАЧЕ ЕСТЬNULL(СУММА(ВТ_СтрокиПлана.СуммаДокумента), 0)
		|	КОНЕЦ КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВТ_СтрокиПлана.ЗакупкаПоФЗ223
		|			ТОГДА ЕСТЬNULL(СУММА(ВЫБОР
		|							КОГДА ВТ_СтрокиПлана.ПриоритетУчастияМалогоИСреднегоПредпринимательства
		|								ТОГДА ВТ_СтрокиПлана.СуммаВВалютеРегламентированногоУчета
		|							ИНАЧЕ 0
		|						КОНЕЦ), 0)
		|		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫБОР
		|						КОГДА ВТ_СтрокиПлана.ПриоритетУчастияМалогоИСреднегоПредпринимательства
		|							ТОГДА ВТ_СтрокиПлана.СуммаДокумента
		|						ИНАЧЕ 0
		|					КОНЕЦ), 0)
		|	КОНЕЦ КАК СуммаТолькоМСП,
		|	ВЫБОР
		|		КОГДА ВТ_СтрокиПлана.ЗакупкаПоФЗ223
		|			ТОГДА ЕСТЬNULL(СУММА(ВЫБОР
		|							КОГДА ВТ_СтрокиПлана.НеУчитыватьПриРасчетеДолиЗакупокУСМП
		|								ТОГДА ВТ_СтрокиПлана.СуммаВВалютеРегламентированногоУчета
		|							ИНАЧЕ 0
		|						КОНЕЦ), 0)
		|		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫБОР
		|						КОГДА ВТ_СтрокиПлана.НеУчитыватьПриРасчетеДолиЗакупокУСМП
		|							ТОГДА ВТ_СтрокиПлана.СуммаДокумента
		|						ИНАЧЕ 0
		|					КОНЕЦ), 0)
		|	КОНЕЦ КАК СуммаБезМСП,
		|	ВЫБОР
		|		КОГДА ВТ_СтрокиПлана.ЗакупкаПоФЗ223
		|			ТОГДА ЕСТЬNULL(СУММА(ВЫБОР
		|							КОГДА ВТ_СтрокиПлана.ПриоритетУчастияМалогоИСреднегоПредпринимательства
		|									ИЛИ ВТ_СтрокиПлана.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков
		|								ТОГДА ВТ_СтрокиПлана.СуммаВВалютеРегламентированногоУчета
		|							ИНАЧЕ 0
		|						КОНЕЦ), 0)
		|		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫБОР
		|						КОГДА ВТ_СтрокиПлана.ПриоритетУчастияМалогоИСреднегоПредпринимательства
		|								ИЛИ ВТ_СтрокиПлана.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков
		|							ТОГДА ВТ_СтрокиПлана.СуммаДокумента
		|						ИНАЧЕ 0
		|					КОНЕЦ), 0)
		|	КОНЕЦ КАК СуммаВсегоМСП
		|ИЗ
		|	ВТ_СтрокиПлана КАК ВТ_СтрокиПлана
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтрокиПлана.ЗакупкаПоФЗ223";
		МассивСтрокиПлана = Новый Массив;
		Для Каждого ТекСтрокиПланаЗакупок Из ПрограммаЗакупок.СтрокиПланаЗакупок Цикл
			МассивСтрокиПлана.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
		КонецЦикла;	
		Для Каждого ТекСтрокиПланаВалютные Из ПрограммаЗакупок.СтрокиПланаВалютные Цикл
			МассивСтрокиПлана.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
		КонецЦикла;	
		Запрос.УстановитьПараметр("СтрокиПлана", МассивСтрокиПлана);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеСумм, ВыборкаДетальныеЗаписи);
			СуммаДокументаБезМСП = ОписаниеСумм.СуммаДокумента - ОписаниеСумм.СуммаБезМСП;
			Если СуммаДокументаБезМСП = 0 Тогда
				ОписаниеСумм.ПроцентМСП = 0;
				ОписаниеСумм.ПроцентВсегоМСП = 0;
			Иначе
				ОписаниеСумм.ПроцентМСП = Окр(ОписаниеСумм.СуммаТолькоМСП / СуммаДокументаБезМСП * 100, 2);
				ОписаниеСумм.ПроцентВсегоМСП = Окр(ОписаниеСумм.СуммаВсегоМСП / СуммаДокументаБезМСП * 100, 2);
			КонецЕсли;
		КонецЕсли;
		Возврат ОписаниеСумм;
	КонецЕсли;
КонецФункции

// Для контроля дублирования документов с одинаковыми
// ключевыми полями.
//
Функция ПолучитьАналогичныйДокумент(ДокументОбъект) Экспорт
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ИсключитьСсылку = ДокументОбъект.Ссылка;
	Иначе
		ИсключитьСсылку = Неопределено;
	КонецЕсли;
	// Проверяем, что документ с нужным набором реквизитов еще не создан.
	ИнновационныйПлан = ДокументОбъект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	Отбор = Новый Структура;
	Отбор.Вставить("ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств", ИнновационныйПлан);
	Отбор.Вставить("ОрганизацияДляЗаключенияДоговора", ДокументОбъект.ОрганизацияДляЗаключенияДоговора);	
	Отбор.Вставить("ПериодЗакупок", ДокументОбъект.ПериодЗакупок);
	Отбор.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
	Отбор.Вставить("НомерВерсии", ДокументОбъект.НомерВерсии);
	Отбор.Вставить("Проведен", Истина);
	мДокументов = ЦентрализованныеЗакупкиУХ.ПолучитьДокументыПоОтбору("ПрограммаЗакупок", Отбор, ИсключитьСсылку);
	Если мДокументов.Количество() = 0 Тогда
		Возврат Документы.ПрограммаЗакупок.ПустаяСсылка();
	КонецЕсли;
	Возврат мДокументов[0];
КонецФункции

Функция ЭтоФЗ223(ДокументОбъект) Экспорт
	ОрганизацияДляЗаключенияДоговора = 
		ДокументОбъект.ОрганизацияДляЗаключенияДоговора;
	Возврат ЗначениеЗаполнено(ОрганизацияДляЗаключенияДоговора)
		И ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223;
КонецФункции

// Для указанной программы закупок возвращает массив строк плана закупок.
//
Функция ПолучитьСтрокиПлана(ПрограммаЗакупок, ВключатьВыгруженныеВход = Ложь) Экспорт
	Результат = Новый Массив;
	Если НЕ ЗначениеЗаполнено(ПрограммаЗакупок.Ссылка) Тогда
		Возврат Результат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиПланаЗакупокСрезПоследних.СтрокаПлана КАК СтрокаПлана
		|ИЗ
		|	РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|			,
		|			ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|				И ИнновационныйПланЗакупок = &Инновационный
		|				И ПериодЗакупок = &ПериодЗакупок) КАК СтрокиПланаЗакупокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, СостояниеОбъекта В (&Состояния)) КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)";
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден);
	Если ВключатьВыгруженныеВход Тогда
		МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен);
		МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	Иначе
		// Не добавляем состояния.
	КонецЕсли;
	Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	Запрос.УстановитьПараметр("ПериодЗакупок", ПрограммаЗакупок.ПериодЗакупок);
	Запрос.УстановитьПараметр("ПрограммаЗакупок", ПрограммаЗакупок.Ссылка);
	Запрос.УстановитьПараметр("ОрганизацияДляЗаключенияДоговора",
		ПрограммаЗакупок.ОрганизацияДляЗаключенияДоговора);
	Запрос.УстановитьПараметр("Инновационный",
		ПрограммаЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтрокаПлана");
	Возврат Результат;
КонецФункции

// Возвращает массив документов Строка плана закупок, сопоставленные документу ПрограммаЗакупокВход
// по ключевым реквизитам.
Функция ПолучитьСтрокиПланаПоКлючевымРеквизитам(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход) Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиПланаЗакупокСрезПоследних.СтрокаПлана КАК СтрокаПлана
		|ИЗ
		|	РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|			,
		|			ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|				И ИнновационныйПланЗакупок = &Инновационный
		|				И ПериодЗакупок = &ПериодЗакупок) КАК СтрокиПланаЗакупокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)
		|ГДЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта В(&Состояния)";
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки);
	МассивСостояний.Добавить(Перечисления.СостоянияСогласования.Утверждена);
	
	Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	Запрос.УстановитьПараметр("ПериодЗакупок", ПериодЗакупокВход);
	Запрос.УстановитьПараметр("ОрганизацияДляЗаключенияДоговора", ОрганизацияВход);
	Запрос.УстановитьПараметр("Инновационный", ИнновационныйПланВход);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтрокаПлана");
	Возврат Результат;
КонецФункции		// ПолучитьСтрокиПланаПоКлючевымРеквизитам()

// Проверяет, что среди строк плана закупок СтрокиВход присутствуют все строки
// из размещённого документа-основания ДокументОснованиеВход. Возвращает
// массив ненайденных строк.
Функция ПолучитьМассивНенайденныхСтрокРазмещенногоПлана(СтрокиВход, ДокументОснованиеВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый Массив;
	СтатусЧерновик = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	СтатусРазмещен = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен;
	// Проверим документ основание.
	Если ЗначениеЗаполнено(ДокументОснованиеВход) Тогда
		Если ТипЗнч(ДокументОснованиеВход) = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
			СтатусОснования = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ДокументОснованиеВход, СтатусЧерновик);
			Если СтатусОснования = СтатусРазмещен Тогда
				// Получим строки плана из документа-основания.
				МассивСтрокиОснования = Новый Массив;
				Для Каждого ТекСтрокиПланаЗакупок Из ДокументОснованиеВход.СтрокиПланаЗакупок Цикл
					МассивСтрокиОснования.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
				КонецЦикла;	
				Для Каждого ТекСтрокиПланаЗакупок Из ДокументОснованиеВход.СтрокиПланаВалютные Цикл
					МассивСтрокиОснования.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
				КонецЦикла;	
				МассивСтрокиОснования = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтрокиОснования);
				МассивСтрокиОснования = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСтрокиОснования);
				// Преобразуем в первые версии.
				МассивПервыеВерсииОснование = Новый Массив;
				Для Каждого ТекМассивСтрокиОснования Из МассивСтрокиОснования Цикл
					ПерваяВерсияСтрокиОснования = Документы.СтрокаПланаЗакупок.ПолучитьПервуюВерсиюСтрокиПлана(ТекМассивСтрокиОснования);
					МассивПервыеВерсииОснование.Добавить(ПерваяВерсияСтрокиОснования);
				КонецЦикла;	
				МассивПервыеВерсииИсходный = Новый Массив;
				Для Каждого ТекСтрокиВход Из СтрокиВход Цикл
					ПерваяВерсияСтрокиИсходный = Документы.СтрокаПланаЗакупок.ПолучитьПервуюВерсиюСтрокиПлана(ТекСтрокиВход);
					МассивПервыеВерсииИсходный.Добавить(ПерваяВерсияСтрокиИсходный);
				КонецЦикла;	
				// Проверим наличие всех строк документа-основания в исходном массиве.
				Для Каждого ТекМассивПервыеВерсииОснование Из МассивПервыеВерсииОснование Цикл
					НайденныйЭлемент = МассивПервыеВерсииИсходный.Найти(ТекМассивПервыеВерсииОснование);
					Если НайденныйЭлемент = Неопределено Тогда
						РезультатФункции.Добавить(ТекМассивПервыеВерсииОснование);
					Иначе
						// Строка найдена. Продолжаем проверку.
					КонецЕсли;
				КонецЦикла;	
			Иначе
				РезультатФункции = Новый Массив;			// Для прочих состояний не проверяем наличие строк плана закупок.
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант документа-основания ""%ДокументОснование%"". Проверка наличия строк отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", Строка(ДокументОснованиеВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Новый Массив;
		КонецЕсли;
	Иначе
		РезультатФункции = Новый Массив;			// Нет документа-основания. Проверка пройдена успешно.
	КонецЕсли;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;	
КонецФункции		 // ПолучитьМассивНенайденныхСтрокРазмещенногоПлана()

// Проверяет, что среди строк плана закупок СтрокиВход присутствуют все строки
// из размещённого документа-основания ДокументОснованиеВход. Возвращает
// результат проверки.
Функция ПроверитьНаличиеРазмещенныхСтрок(СтрокиВход, ДокументОснованиеВход) Экспорт
	РезультатФункции = Истина;
	МассивНенайденных = ПолучитьМассивНенайденныхСтрокРазмещенногоПлана(СтрокиВход, ДокументОснованиеВход);
    РезультатФункции = (МассивНенайденных.Количество() = 0);
	Возврат РезультатФункции;
КонецФункции		 // ПроверитьНаличиеРазмещенныхСтрок()

// Переводит строки программы закупок, подчинённые программе закупок ПрограммаЗакупокВход
// в состояние СостояниеВход.
Процедура ПеревестиПодчиненныеСтрокиПрограммыВНовоеСостояние(ПрограммаЗакупокВход, СостояниеВход) Экспорт
	СтрокиПлана = ПолучитьСтрокиПлана(ПрограммаЗакупокВход);
	Для Каждого ТекСтрокиПлана Из СтрокиПлана Цикл
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ТекСтрокиПлана, СостояниеВход);
	КонецЦикла;	
КонецПроцедуры		// ПеревестиПодчиненныеСтрокиПрограммыВНовоеСостояние()

//Получить строки плана переходящих периодов
Функция ПолучитьСтрокиПланаПоКлючевымРеквизитамПереходящегоПериода(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход) Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиПланаЗакупокСрезПоследних.СтрокаПлана КАК СтрокаПлана
		|ИЗ
		|	РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|			,
		|			ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|				И ИнновационныйПланЗакупок = &Инновационный
		|				И ПериодЗакупок = &ПериодЗакупок) КАК СтрокиПланаЗакупокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)
		|ГДЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта В(&Состояния)
		|	И СтрокиПланаЗакупокСрезПоследних.СтрокаПлана.СтрокаПереходящегоПериода <> ЗНАЧЕНИЕ(Документ.СтрокаПланаЗакупок.ПустаяСсылка)
		|	И СтрокиПланаЗакупокСрезПоследних.СтрокаПлана.СтрокаПереходящегоПериода.ПериодЗакупок.ДатаНачала = ДОБАВИТЬКДАТЕ(СтрокиПланаЗакупокСрезПоследних.СтрокаПлана.ПериодЗакупок.ДатаНачала, ГОД, -1)";
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки);
	Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	Запрос.УстановитьПараметр("ПериодЗакупок", ПериодЗакупокВход);
	Запрос.УстановитьПараметр("ОрганизацияДляЗаключенияДоговора", ОрганизацияВход);
	Запрос.УстановитьПараметр("Инновационный", ИнновационныйПланВход);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтрокаПлана");
	Возврат Результат;
КонецФункции		// ПолучитьСтрокиПланаПоКлючевымРеквизитам()

Функция УдалитьНоменклатуруПрошлыхПериодов(СтрокаПлана,ПериодЗакупок);
	
	КоличествоСтрок = СтрокаПлана.Количество() - 1;
	Пока КоличествоСтрок >= 0 Цикл
		Если СтрокаПлана[КоличествоСтрок].ПериодПотребности.ДатаНачала < ПериодЗакупок.ДатаНачала Тогда
			СтрокаПлана.Удалить(КоличествоСтрок);
		КонецЕсли;
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;	
	Возврат СтрокаПлана;
	
КонецФункции	

Процедура СоздатьСтрокиПереходящегоПериода(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход) Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиПланаЗакупокСрезПоследних.СтрокаПлана КАК СтрокаПлана
		|ПОМЕСТИТЬ ПрошлыеСтроки
		|ИЗ
		|	РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|			,
		|			ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|				И ИнновационныйПланЗакупок = &Инновационный) КАК СтрокиПланаЗакупокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок.Финансирование КАК СтрокаПланаЗакупокФинансирование
		|		ПО (СтрокаПланаЗакупокФинансирование.ПериодФинансирования = &ПериодЗакупок)
		|			И СтрокиПланаЗакупокСрезПоследних.Регистратор = СтрокаПланаЗакупокФинансирование.Ссылка
		|ГДЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта в (&Состояния)
		|			И СтрокиПланаЗакупокСрезПоследних.СтрокаПлана.ПериодЗакупок < &ПериодЗакупок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрошлыеСтроки.СтрокаПлана КАК СтрокаПлана
		|ИЗ
		|	ПрошлыеСтроки КАК ПрошлыеСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|				,
		|				ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|					И ИнновационныйПланЗакупок = &Инновационный
		|					И ПериодЗакупок = &ПериодЗакупок) КАК СтрокиПланаЗакупокСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектовСрезПоследних
		|			ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)
		|		ПО ПрошлыеСтроки.СтрокаПлана = СтрокиПланаЗакупокСрезПоследних.Регистратор.СтрокаПереходящегоПериода
		|ГДЕ
		|	СтрокиПланаЗакупокСрезПоследних.Регистратор ЕСТЬ NULL";
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки);
	МассивСостояний.Добавить(Перечисления.СостоянияСогласования.Утверждена);
	
	Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	Запрос.УстановитьПараметр("ПериодЗакупок", ПериодЗакупокВход);
	Запрос.УстановитьПараметр("ОрганизацияДляЗаключенияДоговора", ОрганизацияВход);
	Запрос.УстановитьПараметр("Инновационный", ИнновационныйПланВход);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтрокаПлана");
	Для Каждого Строка Из Результат Цикл
		СтрокаПлана = Строка.Скопировать();
	    Номенклатура = УдалитьНоменклатуруПрошлыхПериодов(СтрокаПлана.Номенклатура.Выгрузить(),ПериодЗакупокВход);
		СтрокаПлана.Номенклатура.Очистить();
		СтрокаПлана.Дата = ТекущаяДата();
		СтрокаПлана.Номенклатура.Загрузить(Номенклатура);
		СтрокаПлана.СтрокаПереходящегоПериода = Строка.Ссылка;
		СтрокаПлана.Дата =	ТекущаяДата();
		СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки =  ДобавитьМесяц(Строка.ДатаОфициальногоОбъявленияЗакупки,12);
		СтрокаПлана.ПериодЗакупок = ПериодЗакупокВход;
		ВыгрузкаОстатковСтрок = Документы.СтрокаПланаЗакупок.ПолучитьОстаткиПереходящегоПлана(Строка,НачалоГода(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки)-1);
		РазместитьОстатки(ВыгрузкаОстатковСтрок,СтрокаПлана);
		СтрокаПлана.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры	

Процедура РазместитьОстатки(ВыгрузкаОстатковСтрок,СтрокаПлана)
	
	Периоды = СтрокаПлана.Номенклатура.Выгрузить();
	Периоды.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов("Дата"));
	Для Каждого СтрокаПериода ИЗ Периоды Цикл
		СтрокаПериода.ДатаНачала = СтрокаПериода.ПериодПотребности.ДатаНачала;
	КонецЦикла;	
	Периоды.Сортировать("ДатаНачала");
	Для Каждого СтрокаОстатка ИЗ ВыгрузкаОстатковСтрок Цикл
		Структура = Новый Структура();
		Структура.Вставить("Коэффициент",СтрокаОстатка.Коэффициент);
		Структура.Вставить("Номенклатура",СтрокаОстатка.Номенклатура);
		Структура.Вставить("Менеджер",СтрокаОстатка.Менеджер);
		Структура.Вставить("Приоритет",СтрокаОстатка.Приоритет);
		Структура.Вставить("МестоПоставки",СтрокаОстатка.МестоПоставки);
		Структура.Вставить("Приоритет",СтрокаОстатка.Приоритет);
		Структура.Вставить("Организация",СтрокаОстатка.Организация);
		Структура.Вставить("Проект",СтрокаОстатка.Проект);
		Структура.Вставить("Характеристика",СтрокаОстатка.Характеристика);
		Если Периоды.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;	
		Структура.Вставить("ПериодПотребности",Периоды[0].ПериодПотребности);
		СтрокиПотребностей = СтрокаПлана.Номенклатура.НайтиСтроки(Структура);	
		Если СтрокиПотребностей.Количество() > 0 Тогда
			СтрокаПлана.Номенклатура[СтрокиПотребностей[0].НомерСтроки-1].Количество = СтрокаПлана.Номенклатура[СтрокиПотребностей[0].НомерСтроки-1].Количество + СтрокаОстатка.КоличествоОбщее;
			СтрокаПлана.Номенклатура[СтрокиПотребностей[0].НомерСтроки-1].Сумма = СтрокаПлана.Номенклатура[СтрокиПотребностей[0].НомерСтроки-1].Сумма + СтрокаОстатка.СуммаОбщее;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли