&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МинимальныйПроцентМСП = Константы.ПроцентГодовогоОбъемаЗакупокТолькоСубъектыМСП.Получить();
	МинимальныйПроцентВсегоМСП = Константы.ПроцентГодовогоОбъемаЗакупокСУчастиемСубъектовМСП.Получить();
	ПроверитьУстановитьВалютуДокумента();
	ОбновитьРеквизитыФормыПоОрганизации();
	ПриИзмененииОтбораНаСервере();
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	УстановитьОформлениеФормы();
	УстановитьОтборПоЧерновикам();
	УстановитьЗаголовокФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИтогиНаСервере();
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИндексКартинкиСтрокПлана();
	УстановитьЗаголовокФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиФормы_Завершение(ДополнительныеПараметры) Экспорт
	Если ЭтаФорма.Открыта() Тогда
		ЭтаФорма.Закрыть();
	Иначе
		// Уже закрыта.
	КонецЕсли;	
КонецПроцедуры		// ЗакрытиФормы_Завершение()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Проверки при вводе на основании.
	ТекОснование = Объект.ДокументОснование;
	Если (НЕ ЗначениеЗаполнено(Объект.Ссылка)) И (ЗначениеЗаполнено(ТекОснование)) Тогда
		// Проверим размещение документа-основания.
		СтатусЧерновик = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Черновик");
		СтатусРазмещен = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Размещен");
		СтатусОснования = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ТекОснование, СтатусЧерновик);
		Если СтатусОснования <> СтатусРазмещен Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиФормы_Завершение", ЭтотОбъект);
			ТекстСообщения = НСтр("ru = 'Документ-основание ""%Основание%"" находится в статусе ""%Статус%"". Запрещён ввод на основании для статусов отличных от ""Размещён""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Основание%", Строка(ТекОснование));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Строка(СтатусОснования));
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
		Иначе
			// Разрешаем ввод на основании размещённого плана.
		КонецЕсли;
		// Проверим заполнение номера ЕИС у основания.
		УидОснование = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекОснование, "РегистрационныйНомер");
		Если НЕ ЗначениеЗаполнено(УидОснование) Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В документе-основание ""%Основание%"" не заполнен регистрационный номер ЕИС. Запрещён ввод на основании.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Основание%", Строка(ТекОснование));
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
		Иначе
			// УИД заполнен.
		КонецЕсли;
	Иначе
		// Не ввод на основании. Пропускаем.
	КонецЕсли;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		Если ОтветОтсутсвующиеСтрокиПолучен <> Истина Тогда
			// Убедимся, что из размещённой программы закупок не пропали строки плана закупок.
			МассивСтрок = ВернутьМассивСтрокДокумента(Истина, Истина, Истина);
			ПредупредитьОбОтсутствующихСтроках(МассивСтрок, Объект.ДокументОснование, Отказ);
		Иначе
			// Пользователь согласился.
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ОрганизацияДляЗаключенияДоговораПриИзменении(Элемент)
	ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере();
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОтбораПриИзменении(Элемент)
	ПриИзмененииОтбораНаСервере();
	УстановитьЗаголовокФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги(Команда)
	ОбновитьИтогиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(Объект, НСтр("ru = 'Введите УИД'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокиПланаЗакупок(Команда)
	Объект.СтрокиПланаЗакупок.Очистить();
	ИнновационныйПлан = Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	ТекОрганизация = Объект.ОрганизацияДляЗаключенияДоговора;
	МассивСтрокиПланаЗакупок = ПолучитьСтрокиПланаВВалютеДокумента(ИнновационныйПлан, ТекОрганизация, Объект.ПериодЗакупок, Объект.ВалютаДокумента);
	Для Каждого ТекМассивСтрокиПланаЗакупок Из МассивСтрокиПланаЗакупок Цикл
		НоваяСтрока = Объект.СтрокиПланаЗакупок.Добавить();
		НоваяСтрока.СтрокаПланаЗакупок = ТекМассивСтрокиПланаЗакупок;
	КонецЦикла;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИтогиНаСервере();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьВерсииСтрокПлана(Команда)
	// Получим соответствие старых строк новым.
	МассивСтрокПлана = ВернутьМассивСтрокДокумента(Истина, Ложь, Истина);
	СоответствиеАктуализации = ПолучитьСоответствиеАктуализацииВерсийСтрокПлана(МассивСтрокПлана);
	// Заменим значения строк плана в табличной части документа.
	Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаЗакупок Цикл
		СтараяСтрокаПлана = ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок;
		НайденнаяСтрока = СоответствиеАктуализации.Получить(СтараяСтрокаПлана);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока <> СтараяСтрокаПлана Тогда
				ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок = НайденнаяСтрока;
			Иначе
				// Строки плана совпадают. Не заменяем.
			КонецЕсли;
		Иначе
			// Значение не найдено. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИтогиНаСервере();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьВерсииСтрокВВалюте(Команда)
	// Получим соответствие старых строк новым.
	МассивСтрокПлана = ВернутьМассивСтрокДокумента(Ложь, Истина, Истина);
	СоответствиеАктуализации = ПолучитьСоответствиеАктуализацииВерсийСтрокПлана(МассивСтрокПлана);
	// Заменим значения строк плана в табличной части документа.
	Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаВалютные Цикл
		СтараяСтрокаПлана = ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок;
		НайденнаяСтрока = СоответствиеАктуализации.Получить(СтараяСтрокаПлана);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока <> СтараяСтрокаПлана Тогда
				ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок = НайденнаяСтрока;
			Иначе
				// Строки плана совпадают. Не заменяем.
			КонецЕсли;
		Иначе
			// Значение не найдено. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПланаЗакупокПриИзменении(Элемент)
	ОтветОтсутсвующиеСтрокиПолучен = Ложь;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИтогиНаСервере();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПланаВалютныеПриИзменении(Элемент)
	ОтветОтсутсвующиеСтрокиПолучен = Ложь;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокиВВалюте(Команда)
	Объект.СтрокиПланаВалютные.Очистить();
	ИнновационныйПлан = Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	ТекОрганизация = Объект.ОрганизацияДляЗаключенияДоговора;
	МассивСтрокиПланаЗакупок = ПолучитьСтрокиПланаВИнойВалюте(ИнновационныйПлан, ТекОрганизация, Объект.ПериодЗакупок, Объект.ВалютаДокумента);
	Для Каждого ТекМассивСтрокиПланаЗакупок Из МассивСтрокиПланаЗакупок Цикл
		НоваяСтрока = Объект.СтрокиПланаВалютные.Добавить();
		НоваяСтрока.СтрокаПланаЗакупок = ТекМассивСтрокиПланаЗакупок;
	КонецЦикла;	
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИндексКартинкиСтрокПлана();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЧерновиков(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств", Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	СтруктураОтбора.Вставить("ОрганизацияДляЗаключенияДоговора", Объект.ОрганизацияДляЗаключенияДоговора);
	СтруктураОтбора.Вставить("ПериодЗакупок", Объект.ПериодЗакупок);
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.ПустаяСсылка"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Черновик"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Возвращен"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении"));
	СтруктураОтбора.Вставить("Статус", МассивСтатусов);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	СтруктураПараметров.Вставить("ПрограммаЗакупок", Объект.Ссылка);
	СтруктураПараметров.Вставить("Организация", Объект.ОрганизацияДляЗаключенияДоговора);
	СтруктураПараметров.Вставить("Валюта", Объект.ВалютаДокумента);
	ОткрытьФорму("Документ.ПрограммаЗакупок.Форма.ФормаЧерновиков", СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	#Область УниверсальныеПроцессыСогласование
	Если ИмяСобытия = "ОбъектСогласован"
				ИЛИ ИмяСобытия = "ОбъектОтклонен"
				ИЛИ ИмяСобытия = "МаршрутИнициализирован"
				ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
		ОбновитьСтатусыСтрокПланЗакупок();
		ОбновитьИндексКартинкиСтрокПлана();
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНастройкиОтчетаПрограммаЗакупок(ПериодВход, ОрганизацияВход, ИнновационныйПланВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	КомпоновщикНастроек = Отчеты.ПрограммаЗакупок.Создать().КомпоновщикНастроек;
	Настройки = КомпоновщикНастроек.Настройки;
	// ПериодНачалаЗакупки.
	ПараметрПериодНачала = Новый ПараметрКомпоновкиДанных("ПериодНачалаЗакупки");
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрПериодНачала);
	ЭлементНастройки.Значение = ПериодВход;
	ИдентификаторНастройки = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрСКД.Значение = ЭлементНастройки.Значение;
		Иначе	
			// Не параметр. Пропускаем.
		КонецЕсли;
	КонецЕсли;
	// ПериодОкончанияЗакупки.
	ПараметрПериодНачала = Новый ПараметрКомпоновкиДанных("ПериодОкончанияЗакупки");
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрПериодНачала);
	ЭлементНастройки.Значение = ПериодВход;
	ИдентификаторНастройки = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрСКД.Значение = ЭлементНастройки.Значение;
		Иначе	
			// Не параметр. Пропускаем.	
		КонецЕсли;
	КонецЕсли;
	// Организация.
	ПараметрПериодНачала = Новый ПараметрКомпоновкиДанных("Организация");
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрПериодНачала);
	ЭлементНастройки.Значение = ИнновационныйПланВход;
	ИдентификаторНастройки = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрСКД.Значение = ЭлементНастройки.Значение;
		Иначе	
			// Не параметр. Пропускаем.	
		КонецЕсли;
	КонецЕсли;
	// ИнновационныйПлан.
	ПараметрПериодНачала = Новый ПараметрКомпоновкиДанных("Организация");
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрПериодНачала);
	ЭлементНастройки.Значение = ОрганизацияВход;
	ИдентификаторНастройки = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		ПараметрСКД = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрСКД.Значение = ЭлементНастройки.Значение;
		Иначе	
			// Не параметр. Пропускаем.	
		КонецЕсли;
	КонецЕсли;
	// Вывод результата.
	РезультатФункции.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	Возврат РезультатФункции;
КонецФункции		 // СформироватьНастройкиОтчетаПрограммаЗакупок()

&НаКлиенте
Процедура ОтчетПрограммаЗакупок(Команда)
	СтруктураНастроек = СформироватьНастройкиОтчетаПрограммаЗакупок(Объект.ПериодЗакупок, Объект.ОрганизацияДляЗаключенияДоговора, Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
	СтруктураПараметров.Вставить("ПользовательскиеНастройки", СтруктураНастроек.ПользовательскиеНастройки);
	ОткрытьФорму("Отчет.ПрограммаЗакупок.ФормаОбъекта", СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте
&НаКлиенте
Процедура ОбработатьВыборСтрокиПланаЗакупок(СтрокаПланаЗакупок,
											ДопПараметры) Экспорт
	Элементы.СтрокиПланаЗакупок.ТекущиеДанные.СтрокаПланаЗакупок = СтрокаПланаЗакупок;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИтогиНаСервере();
	ОбновитьИндексКартинкиСтрокПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтрокиПланаЗакупокВалютная(СтрокаПланаЗакупок,
											ДопПараметры) Экспорт
	Элементы.СтрокиПланаВалютные.ТекущиеДанные.СтрокаПланаЗакупок = СтрокаПланаЗакупок;
	ОбновитьСтатусыСтрокПланЗакупок();
	ОбновитьИтогиНаСервере();
	ОбновитьИндексКартинкиСтрокПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПланаВалютныеСтрокаПланаЗакупокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбораСтроки = Новый Структура;
	ПараметрыВыбораСтроки.Вставить("ОрганизаторЗакупки",Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыВыбораСтроки.Вставить("ОрганизацияДляЗаключенияДоговора",Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыВыбораСтроки.Вставить("ПериодЗакупок",Объект.ПериодЗакупок);
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборСтрокиПланаЗакупокВалютная", ЭтаФорма);
	ОткрытьФорму("Документ.СтрокаПланаЗакупок.Форма.ФормаВыбора",ПараметрыВыбораСтроки,ЭтаФорма, ,	, ,	ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПланаЗакупокСтрокаПланаЗакупокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбораСтроки = Новый Структура;
	ПараметрыВыбораСтроки.Вставить("ОрганизаторЗакупки",Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыВыбораСтроки.Вставить("ОрганизацияДляЗаключенияДоговора",Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыВыбораСтроки.Вставить("ПериодЗакупок",Объект.ПериодЗакупок);
	ПараметрыВыбораСтроки.Вставить("ВалютаДокумента",Объект.ВалютаДокумента);
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборСтрокиПланаЗакупок", ЭтаФорма);
	ОткрытьФорму("Документ.СтрокаПланаЗакупок.Форма.ФормаВыбора",ПараметрыВыбораСтроки,ЭтаФорма, ,	, ,	ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Возвращает строки плана закупок, включённые в текущую программу. Параметры 
// ВключатьСтрокиРеглВход и ВключатьСтрокиВалютныеВход регулируют включение
// строк в валюте документа и в иной валюте соответственно. Параметр СверткаВход
// определяет необходимость свёртки полученного массива.
&НаКлиенте
Функция ВернутьМассивСтрокДокумента(ВключатьСтрокиРеглВход, ВключатьСтрокиВалютныеВход, СверткаВход = Истина)
	РезультатФункции = Новый Массив;
	// Строки в валюте документа.
	Если ВключатьСтрокиРеглВход Тогда
		Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаЗакупок Цикл
			РезультатФункции.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
		КонецЦикла;	
	Иначе
		// Не требуется добавлять строки в валюте документа.
	КонецЕсли;
	// Строки в иной валюте.
	Если ВключатьСтрокиВалютныеВход Тогда
		Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаВалютные Цикл
			РезультатФункции.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
		КонецЦикла;
	Иначе
		// Не требуется добавлять строки в иной валюте.
	КонецЕсли;
	// Свертка полученного массива.
	Если СверткаВход Тогда
		РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
		РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Иначе
		// Не требует дополнительная свертка массива.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ВернутьМассивСтрокДокумента()

// Обновляет колонку Статус табличных частей Строки плана и Строки в валюте
// на форме.
&НаКлиенте
Процедура ОбновитьСтатусыСтрокПланЗакупок()
	// Для строк плана закупок получим соответствие статусов.
	МассивСтрокПлана = ВернутьМассивСтрокДокумента(Истина, Истина, Истина);
	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовСтрокПланаЗакупок(МассивСтрокПлана);
	// Заполним статусы в табличных частых на форме.
	СтатусЧерновик = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Черновик");
	Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаЗакупок Цикл
		ТекСтрокаПлана = ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок;
		НовыйСтатус = СоответствиеСтатусов.Получить(ТекСтрокаПлана);
		Если НовыйСтатус <> Неопределено Тогда
			ТекСтрокиПланаЗакупок.Статус = НовыйСтатус; 
		Иначе
			ТекСтрокиПланаЗакупок.Статус = СтатусЧерновик;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаПлана) И ЗначениеЗаполнено(ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ТекСтрокаПлана,"СтрокаПереходящегоПериода")) Тогда
			ТекСтрокиПланаЗакупок.СтрокиПланаЗакупокПереходящаяСтрокаПлана = Истина;
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаВалютные Цикл
		ТекСтрокаПлана = ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок;
		НовыйСтатус = СоответствиеСтатусов.Получить(ТекСтрокаПлана);
		Если НовыйСтатус <> Неопределено Тогда
			ТекСтрокиПланаЗакупок.Статус = НовыйСтатус; 
		Иначе
			ТекСтрокиПланаЗакупок.Статус = СтатусЧерновик;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаПлана) И ЗначениеЗаполнено(ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ТекСтрокаПлана,"СтрокаПереходящегоПериода"))  Тогда
			ТекСтрокиПланаЗакупок.СтрокиПланаЗакупокПереходящаяСтрокаПлана = Истина;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры		// ОбновитьСтатусыСтрокПланЗакупок()

// Обновляет картинки строк в табличных частях Строк плана закупки на форме.
&НаКлиенте
Процедура ОбновитьИндексКартинкиСтрокПлана()
	СтатусЧерновик = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Черновик");
	СтатусРазмещен = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Размещен");
	СтатусДокумента = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка, СтатусЧерновик);
	Если СтатусДокумента <> СтатусРазмещен Тогда
		// Добавление строк из табличных частей в массив обработки.
		МассивСтрокПлана = ВернутьМассивСтрокДокумента(Истина, Истина, Истина);	
		// Считывание текущего кеша.
		СоответствиеКэшПервыхВерсий = Новый Соответствие;
		Для Каждого ТекКэшПервыхВерсийСтрок Из КэшПервыхВерсийСтрок Цикл
			ТекВерсияДокумента = ТекКэшПервыхВерсийСтрок.ТекущаяВерсия;
			СтруктураДанных = Новый Структура;
			ТекПерваяВерсия = ТекКэшПервыхВерсийСтрок.ПерваяВерсия;
			ТекВерсияОснование = ТекКэшПервыхВерсийСтрок.ВерсияОснования;
			СтруктураДанных.Вставить("ПерваяВерсия", ТекПерваяВерсия);
			СтруктураДанных.Вставить("ВерсияОснование", ТекВерсияОснование);
			СоответствиеКэшПервыхВерсий.Вставить(ТекВерсияДокумента, СтруктураДанных);
		КонецЦикла;	
		// Получение соответствия картинкок строкам.
		СоответствиеКартинок = ПолучитьСоответствиеИндексаКартинкиСтрокПлана(МассивСтрокПлана, Объект.ДокументОснование, СоответствиеКэшПервыхВерсий);
		// Заполнение столбца картинок для строк в валюте документа.
		Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаЗакупок Цикл
			НовыйИндекс = СоответствиеКартинок.Получить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
			Если НовыйИндекс <> Неопределено Тогда
				ТекСтрокиПланаЗакупок.ИндексКартинки = НовыйИндекс;
			Иначе
				ТекСтрокиПланаЗакупок.ИндексКартинки = -1;
			КонецЕсли;
		КонецЦикла;	
		// Заполнение столбца картинок для строк в иной валюте.
		Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаВалютные Цикл
			НовыйИндекс = СоответствиеКартинок.Получить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
			Если НовыйИндекс <> Неопределено Тогда
				ТекСтрокиПланаЗакупок.ИндексКартинки = НовыйИндекс;
			Иначе
				ТекСтрокиПланаЗакупок.ИндексКартинки = -1;
			КонецЕсли;
		КонецЦикла;	
		// Обновление кэша.
		ПустаяСтрокаПлана = ПредопределенноеЗначение("Документ.СтрокаПланаЗакупок.ПустаяСсылка");
		КэшПервыхВерсийСтрок.Очистить();
		Для Каждого ТекСоответствиеКэшПервыхВерсий Из СоответствиеКэшПервыхВерсий Цикл
			ТекСтрока = ТекСоответствиеКэшПервыхВерсий.Ключ;
			ТекДанные = ТекСоответствиеКэшПервыхВерсий.Значение;
			НоваяСтрока = КэшПервыхВерсийСтрок.Добавить();
			НоваяСтрока.ТекущаяВерсия = ТекСтрока;
			НоваяСтрока.ПерваяВерсия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанные, "ПерваяВерсия", ПустаяСтрокаПлана);
			НоваяСтрока.ВерсияОснования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанные, "ВерсияОснование", ПустаяСтрокаПлана);
		КонецЦикла;	
	Иначе
		// Заполнение столбца картинок для строк в валюте документа.
		Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаЗакупок Цикл
			ТекСтрокиПланаЗакупок.ИндексКартинки = 3;
		КонецЦикла;	
		// Заполнение столбца картинок для строк в иной валюте.
		Для Каждого ТекСтрокиПланаЗакупок Из Объект.СтрокиПланаВалютные Цикл
			ТекСтрокиПланаЗакупок.ИндексКартинки = 3;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры		// ОбновитьИндексКартинкиСтрокПлана()

&НаКлиенте
Процедура СоздатьСтрокиЗакупокПереходящегоПериода(Команда)
	СоздатьСтрокиЗакупокПереходящегоПериодаНаСервере();
	ОбновитьСтатусыСтрокПланЗакупок();
	Элементы.ЧерновикиСтрокПлана.Обновить();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыНаСервере

&НаСервере
Процедура СоздатьСтрокиЗакупокПереходящегоПериодаНаСервере()
	ИнновационныйПлан = Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	ТекОрганизация = Объект.ОрганизацияДляЗаключенияДоговора;
	РезультатФункции = Новый Массив;
	Документы.ПрограммаЗакупок.СоздатьСтрокиПереходящегоПериода(ИнновационныйПлан, ТекОрганизация, Объект.ПериодЗакупок);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = "Программа закупок (создание)";
	ИначеЕсли Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств Тогда
		ЭтаФорма.Заголовок = "Программа закупок (инновационная) "+Объект.Номер + " от "+Объект.Дата;
	Иначе
		ЭтаФорма.Заголовок = "Программа закупок "+Объект.Номер + " от "+Объект.Дата;		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЧерновикам()
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.ПустаяСсылка"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Черновик"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Возвращен"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтрокиПланаЧерновик,"ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств",Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств,ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтрокиПланаЧерновик,"ОрганизацияДляЗаключенияДоговора",Объект.ОрганизацияДляЗаключенияДоговора,ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтрокиПланаЧерновик,"ПериодЗакупок",Объект.ПериодЗакупок,ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтрокиПланаЧерновик,"Статус",Список,ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
	Элементы.ЧерновикиСтрокПлана.Обновить();
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьУстановитьВалютуДокумента()
	Если Документы.ПрограммаЗакупок.ЭтоФЗ223(Объект)
		 И Объект.ВалютаДокумента <> 
				Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.ВалютаДокумента =
			Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере()
	// Перезаполним табличные части.
	ИнновационныйПлан = Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	ТекОрганизация = Объект.ОрганизацияДляЗаключенияДоговора;
	Объект.СтрокиПланаЗакупок.Очистить();
	МассивСтрокиПланаЗакупок = ПолучитьСтрокиПланаВВалютеДокумента(ИнновационныйПлан, ТекОрганизация, Объект.ПериодЗакупок, Объект.ВалютаДокумента);
	Для Каждого ТекМассивСтрокиПланаЗакупок Из МассивСтрокиПланаЗакупок Цикл
		НоваяСтрока = Объект.СтрокиПланаЗакупок.Добавить();
		НоваяСтрока.СтрокаПланаЗакупок = ТекМассивСтрокиПланаЗакупок;
	КонецЦикла;
	Объект.СтрокиПланаВалютные.Очистить();
	МассивСтрокиПланаЗакупок = ПолучитьСтрокиПланаВИнойВалюте(ИнновационныйПлан, ТекОрганизация, Объект.ПериодЗакупок, Объект.ВалютаДокумента);
	Для Каждого ТекМассивСтрокиПланаЗакупок Из МассивСтрокиПланаЗакупок Цикл
		НоваяСтрока = Объект.СтрокиПланаВалютные.Добавить();
		НоваяСтрока.СтрокаПланаЗакупок = ТекМассивСтрокиПланаЗакупок;
	КонецЦикла;
	// Обновим форму.
	ОбновитьРеквизитыФормыПоОрганизации();
	ПриИзмененииОтбораНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПлана,
		"ПериодЗакупок", 
		Объект.ПериодЗакупок, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПлана, 
		"ОрганизацияДляЗаключенияДоговора", 
		Объект.ОрганизацияДляЗаключенияДоговора, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПлана, 
		"ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств", 
		Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПлана, 
		"ВалютаДокумента", 
		Объект.ВалютаДокумента, 
		Истина);
		
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПланаВВалюте,
		"ПериодЗакупок", 
		Объект.ПериодЗакупок, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПланаВВалюте, 
		"ОрганизацияДляЗаключенияДоговора", 
		Объект.ОрганизацияДляЗаключенияДоговора, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПланаВВалюте, 
		"ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств", 
		Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		СтрокиПланаВВалюте, 
		"ВалютаДокумента", 
		Объект.ВалютаДокумента, 
		Истина,
		ВидСравненияКомпоновкиДанных.НеРавно);
		
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		ЧерновикиСтрокПлана,
		"ПериодЗакупок", 
		Объект.ПериодЗакупок, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		ЧерновикиСтрокПлана, 
		"ОрганизацияДляЗаключенияДоговора", 
		Объект.ОрганизацияДляЗаключенияДоговора, 
		Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		ЧерновикиСтрокПлана, 
		"ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств", 
		Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств, 
		Истина);
	
	ОбновитьИтогиНаСервере();
	УстановитьОтборПоЧерновикам();	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы()
	ЦентрализованныеЗакупкиУХ.УстановитьПараметрВыбораПериодичностьЗакупок(Элементы.ПериодЗакупок);
	УстановитьОформлениеФЗ223();
	Элементы.ГруппаВерсия.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	УстановитьОформлениеПоСтатусуДокумента();
	УстановитьОформлениеПоПредыдущейВерсии();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере()
	СуммыПлана = Документы.ПрограммаЗакупок.ПолучитьСтатистикуСумм(Объект);
	СуммаДокумента		 = СуммыПлана.СуммаДокумента;
	СуммаТолькоМСП		 = СуммыПлана.СуммаТолькоМСП;
	СуммаБезМСП			 = СуммыПлана.СуммаБезМСП;
	ПроцентМСП			 = СуммыПлана.ПроцентМСП;
	СуммаВсегоМСП		 = СуммыПлана.СуммаВсегоМСП;
	ПроцентВсегоМСП		 = СуммыПлана.ПроцентВсегоМСП;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФормыПоОрганизации()
	Если ЗначениеЗаполнено(Объект.ОрганизацияДляЗаключенияДоговора) Тогда
		ОрганизацияФЗ223 = Объект.ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223;
	Иначе
		ОрганизацияФЗ223 = Ложь;
	КонецЕсли;
КонецПроцедуры

// Возвращает массив документов Строка плана закупок, сопоставленные документу ПрограммаЗакупокВход
// по ключевым реквизитам.
&НаСервереБезКонтекста
Функция ПолучитьСтрокиПланаПоКлючевымРеквизитам(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход) Экспорт
	РезультатФункции = Документы.ПрограммаЗакупок.ПолучитьСтрокиПланаПоКлючевымРеквизитам(
		ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход);
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьСтрокиПланаПоКлючевымРеквизитам()

// Возвращает массив строк плана закупок по измерениям данной строки, валюта которых
// совпадает с валютой текущего документа.
&НаСервереБезКонтекста
Функция ПолучитьСтрокиПланаВВалютеДокумента(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход, ВалютаВход)
	РезультатФункции = Новый Массив;
	СтрокиПлана = ПолучитьСтрокиПланаПоКлючевымРеквизитам(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход);
	Для Каждого ТекСтрокиПлана Из СтрокиПлана Цикл
		Если ТекСтрокиПлана.ВалютаДокумента = ВалютаВход Тогда
			РезультатФункции.Добавить(ТекСтрокиПлана);
		Иначе
			// Не добавляем документ, т.к. валюты различаются.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСтрокиПланаВВалютеДокумента()

// Возвращает массив строк плана закупок по измерениям данной строки, валюта которых
// отличается от валюты текущего документа. 
&НаСервереБезКонтекста
Функция ПолучитьСтрокиПланаВИнойВалюте(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход, ВалютаВход)
	РезультатФункции = Новый Массив;
	СтрокиПлана = ПолучитьСтрокиПланаПоКлючевымРеквизитам(ИнновационныйПланВход, ОрганизацияВход, ПериодЗакупокВход);
	Для Каждого ТекСтрокиПлана Из СтрокиПлана Цикл
		Если ТекСтрокиПлана.ВалютаДокумента <> ВалютаВход Тогда
			РезультатФункции.Добавить(ТекСтрокиПлана);
		Иначе
			// Не добавляем документ, т.к. валюты различаются.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСтрокиПланаВВалютеДокумента()

// Возвращает соответствие актуальных версий строк плана строкам из массива МассивСтрокПлана.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеАктуализацииВерсийСтрокПлана(МассивСтрокПлана)
	РезультатФункции = Документы.СтрокаПланаЗакупок.ПолучитьСоответствиеАктуализацииВерсийСтрокПлана(МассивСтрокПлана);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСоответствиеАктуализацииВерсийСтрокПлана()

// Возвращает соответствие статусов строк планов закупок из МассивСтрокПланаВход.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеСтатусовСтрокПланаЗакупок(МассивСтрокПланаВход)
	РезультатФункции = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеОбъекта,
		|	РегистрСостоянийОбъектовСрезПоследних.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект В (&МассивСсылок)) КАК РегистрСостоянийОбъектовСрезПоследних";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСтрокПланаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекОбъект = ВыборкаДетальныеЗаписи.Объект;
		ТекСтатус = ВыборкаДетальныеЗаписи.СостояниеОбъекта;
		РезультатФункции.Вставить(ТекОбъект, ТекСтатус);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСоответствиеСтатусовСтрокПланаЗакупок()

// Выставляет оформление элементов формы в зависимости от флага использования ФЗ-223.
&НаСервере
Процедура УстановитьОформлениеФЗ223()
	Элементы.ДекорацияФЗ223.Видимость = ОрганизацияФЗ223;
	Элементы.ВалютаДокумента.ТолькоПросмотр = ОрганизацияФЗ223;
	Элементы.ГруппаОсновныеРеквизитыФЗ223.Видимость = ОрганизацияФЗ223;
	Элементы.РегистрационныйНомер.Видимость = ОрганизацияФЗ223;
	Элементы.СтрокиПланаВЭлектроннойФорме.Видимость = ОрганизацияФЗ223;
	Элементы.СтрокиПланаНеУчитыватьПриРасчетеДолиЗакупокУСМП.Видимость = ОрганизацияФЗ223;
	Элементы.СтрокиПланаСуммаВВалютеРегламентированногоУчета.Видимость = ОрганизацияФЗ223;
	Элементы.ЧерновикиСтрокПланаВЭлектроннойФорме.Видимость = ОрганизацияФЗ223;
	Элементы.ЧерновикиСтрокПланаНеУчитыватьПриРасчетеДолиЗакупокУСМП.Видимость = ОрганизацияФЗ223;
	Элементы.ЧерновикиСтрокПланаСуммаВВалютеРегламентированногоУчета.Видимость = ОрганизацияФЗ223;
	Элементы.СтраницаСтрокиВВалюте.Видимость = ОрганизацияФЗ223;
КонецПроцедуры		// УстановитьОформлениеФЗ223()

// Устанавливает оформление элементов формы в зависимости от статуса документа.
&НаСервере
Процедура УстановитьОформлениеПоСтатусуДокумента()
	СтатусЧерновик = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	СтатусРазмещен = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен;
	СтатусДокумента = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка, СтатусЧерновик);
	Если СтатусДокумента = СтатусРазмещен Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	Иначе
		// Не изменяем оформление для прочих вариантов.
	КонецЕсли;	
КонецПроцедуры		// УстановитьОформлениеПоСтатусуДокумента()

// Устанавливает оформление элементов формы в зависимости от наличия предыдущей версии программы закупок.
&НаСервере
Процедура УстановитьОформлениеПоПредыдущейВерсии()
	ЕстьДокументОснование = ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ДекорацияНадписьПредыдущаяВерсия.Видимость = ЕстьДокументОснование;
	Если ЕстьДокументОснование Тогда
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;
		Элементы.ПериодЗакупок.ТолькоПросмотр = Истина;
		Элементы.ОрганизацияДляЗаключенияДоговора.ТолькоПросмотр = Истина;
		Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;
		Элементы.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств.ТолькоПросмотр = Истина;
	Иначе
		// Это первая версия. Дополнительная блокировка не требуется.
	КонецЕсли;
КонецПроцедуры		// УстановитьОформлениеПоПредыдущейВерсии()

// Проверяет, что среди строк плана закупок СтрокиВход присутствуют все строки
// из размещённого документа-основания ДокументОснованиеВход. Возвращает
// массив ненайденных строк.
&НаСервереБезКонтекста
Функция ПолучитьМассивНенайденныхСтрокРазмещенногоПлана(СтрокиВход, ДокументОснованиеВход)
	РезультатФункции = Документы.ПрограммаЗакупок.ПолучитьМассивНенайденныхСтрокРазмещенногоПлана(СтрокиВход, ДокументОснованиеВход);	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивНенайденныхСтрокРазмещенногоПлана()

// Возвращает соответствие индексов картинок строкам планов закупок из
// МассивСтрокПланаВход, которые введены на основании ДокументОснованиеВход.
// Для ускорения расчётов задействуется кэш СоответствиеПервыхВерсийИзм.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИндексаКартинкиСтрокПлана(МассивСтрокПланаВход, ДокументОснованиеВход, СоответствиеПервыхВерсийИзм)
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекМассивСтрокПланаВход Из МассивСтрокПланаВход Цикл
		ТекСтруктураДанных = СоответствиеПервыхВерсийИзм.Получить(ТекМассивСтрокПланаВход);
		Если ТекСтруктураДанных = Неопределено Тогда
			// Не удалось получить первую версию. Обновим кэш из базы данных.
			ТекПерваяВерсия = Документы.СтрокаПланаЗакупок.ПолучитьПервуюВерсиюСтрокиПлана(ТекМассивСтрокПланаВход);
			ТекВерсияОснование = Документы.СтрокаПланаЗакупок.ПолучитьВерсиюСтрокиПланаОснования(ТекМассивСтрокПланаВход, ДокументОснованиеВход);
			ТекСтруктураДанных = Новый Структура;
			ТекСтруктураДанных.Вставить("ПерваяВерсия", ТекПерваяВерсия);
			ТекСтруктураДанных.Вставить("ВерсияОснование", ТекВерсияОснование);
			СоответствиеПервыхВерсийИзм.Вставить(ТекМассивСтрокПланаВход, ТекСтруктураДанных);
		Иначе
			// Значение уже получено.
		КонецЕсли;
		НовыйИндекс = 2;					// Новая строка.
		Если НЕ ТекМассивСтрокПланаВход.ЗакупкаОтменена Тогда
			Если ТекМассивСтрокПланаВход = ТекСтруктураДанных.ВерсияОснование Тогда
				НовыйИндекс = 3;			// Строка размещена.
			Иначе
				Если ТекМассивСтрокПланаВход = ТекСтруктураДанных.ПерваяВерсия Тогда
					НовыйИндекс = 2;		// Новая строка.
				Иначе
					НовыйИндекс = 1;		// Строка измена.
				КонецЕсли;
			КонецЕсли;
		Иначе
			НовыйИндекс = 0;				// Закупка отменена.
		КонецЕсли;
		РезультатФункции.Вставить(ТекМассивСтрокПланаВход, НовыйИндекс);
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСоответствиеИндексаКартинкиСтрокПлана()

&НаКлиенте
Процедура ПредупреждениеОтсутствияСтрок_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		// Пользователь согласился. Выполняем далее.
	Иначе
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры		// ПредупреждениеОтсутствияСтрок_Завершение(

// Отображает предупреждение об отсутсвующих строка плана закупок
// среди СтрокиВход по документу ДокументОснованиеВход.
&НаКлиенте
Процедура ПредупредитьОбОтсутствующихСтроках(СтрокиВход, ДокументОснованиеВход, Отказ)
	МассивНенайденных = ПолучитьМассивНенайденныхСтрокРазмещенногоПлана(СтрокиВход, ДокументОснованиеВход);
	КоличествоНенайденых = МассивНенайденных.Количество();
	Если КоличествоНенайденых > 1 Тогда
		Если Не ВыполняетсяЗакрытие Тогда
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Из предыдущей размещённой версии программы закупки ""%Программа%"" исключены строки плана закупок ""%Количсетво%"". Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Программа%", Строка(ДокументОснованиеВход));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Количество%", Строка(КоличествоНенайденых));
			ОписаниеЗакрытия = Новый ОписаниеОповещения("ПредупреждениеОтсутствияСтрок_Завершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеЗакрытия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			// Выполняем далее.
		КонецЕсли;
	ИначеЕсли КоличествоНенайденых = 1 Тогда
		Если Не ВыполняетсяЗакрытие Тогда
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Из предыдущей размещённой версии программы закупки ""%Программа%"" исключена строка плана закупок ""%Строка%"". Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Программа%", Строка(ДокументОснованиеВход));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Строка%", Строка(МассивНенайденных[0]));
			ОписаниеЗакрытия = Новый ОписаниеОповещения("ПредупреждениеОтсутствияСтрок_Завершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеЗакрытия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			// Выполняем далее.
		КонецЕсли;
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
КонецПроцедуры		 // ПредупредитьОбОтсутствующихСтроках()

#КонецОбласти

#Область УниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектФормыУтвержден(Форма)
	РезультатФункции = Ложь;
	СостоянияУтвержден = Новый Массив;
	СостоянияУтвержден.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Утвержден"));
	СостоянияУтвержден.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Выгружен"));
	СостоянияУтвержден.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Размещен"));
	ТекСостояние = РеквизитСостояниеЗаявки(Форма);
	РезультатФункции = (СостоянияУтвержден.Найти(ТекСостояние) <> Неопределено);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура УстановитьДоступностьПанелиСогласования(ТолькоПросмотр)
	ЕстьГруппаСтатусы = 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма.Элементы, "ГруппаСтатусыСогласования");
	Если ЕстьГруппаСтатусы Тогда
		НовоеСостояниеПросмотра = (Элементы.ГруппаСтатусыСогласования.ТолькоПросмотр И ТолькоПросмотр);
		Элементы.ГруппаСтатусыСогласования.ТолькоПросмотр = НовоеСостояниеПросмотра;
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

ВыполняетсяЗакрытие = Ложь;