// Серверная обертка команды ВыполнитьСохраненныйЗапрос.
&НаСервере
Процедура ВыполнитьСохраненныйЗапрос_Сервер()
	Если ЗначениеЗаполнено(СохраненныйЗапрос) Тогда
		// Получим таблицу из сохраненного запроса.
		ТаблицаРезультатЗапрос = УправлениеОбязательствамиУХ.ПолучитьТаблицуКонтрагентовПоСохраненномуЗапросу(СохраненныйЗапрос, ДатаНачала, ДатаОкончания);
		// Проверим её на корректность.
		Если ТипЗнч(ТаблицаРезультатЗапрос) = Тип("ТаблицаЗначений") Тогда
			НайденнаяКолонкаКонтрагент = ТаблицаРезультатЗапрос.Колонки.Найти("Контрагент");
			ЕстьКонтрагент = (НайденнаяКолонкаКонтрагент <> Неопределено);
			Если ЕстьКонтрагент Тогда
				// Проверки пройдены. Заполним табличную часть.
				ТаблицаЗаполнения.Очистить();
				Для Каждого ТекТаблицаРезультатЗапрос Из ТаблицаРезультатЗапрос Цикл
					НоваяСтрока = ТаблицаЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаРезультатЗапрос);
					НоваяСтрока.Использование = Истина;
				КонецЦикла;
			Иначе
				ТекстСообщения = НСтр("ru = 'В таблице не найдено необходимое поле Контрагент. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Возврат;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант результата сохранённого запроса: %ТаблицаРезультатЗапроса%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаРезультатЗапроса%", Строка(ТаблицаРезультатЗапрос));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Необходимо заполнить поле Сохраненный запрос'"));
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохраненныйЗапросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	МожноПродолжать = (РезультатВопроса = КодВозвратаДиалога.Да);
	Если МожноПродолжать Тогда
		ВыполнитьСохраненныйЗапрос_Сервер();
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВсехЗначимостьЗавершение(ПараметрКоманды, ПараметрВыполненияКоманды) Экспорт
	Если ЗначениеЗаполнено(ПараметрКоманды) Тогда
		Для Каждого ТекТаблицаЗаполнения Из ТаблицаЗаполнения Цикл
			ТекТаблицаЗаполнения.СтепеньДоходности = ПараметрКоманды;
		КонецЦикла;
	Иначе
		// Значение не выбрано. Не проставляем Значимость.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВсехКлассПлатежнойДисциплиныЗавершение(ПараметрКоманды, ПараметрВыполненияКоманды) Экспорт
	Если ЗначениеЗаполнено(ПараметрКоманды) Тогда
		Для Каждого ТекТаблицаЗаполнения Из ТаблицаЗаполнения Цикл
			ТекТаблицаЗаполнения.СтепеньРиска = ПараметрКоманды;
		КонецЦикла;
	Иначе
		// Значение не выбрано. Не проставляем Класс платежной дисциплины.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохраненныйЗапрос(Команда)
	Если ТаблицаЗаполнения.Количество() > 0 Тогда
		ОповещениеВопроса = Новый ОписаниеОповещения("ВыполнитьСохраненныйЗапросЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В табличной части уже присутствуют данные. Продолжить?'");
		ПоказатьВопрос(ОповещениеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьСохраненныйЗапрос_Сервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Заполнение параметров Дата начала и Дата окончания.
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ДатаНачала = НачалоГода(ТекущаяДатаСеанса);
	ДатаОкончания = КонецГода(ТекущаяДатаСеанса);
	// Заполнение параметра Очищать данные документа.
	ОчищатьДанныеДокумента = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для Каждого ТекТаблицаЗаполнения Из ТаблицаЗаполнения Цикл
		ТекТаблицаЗаполнения.Использование = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНичего(Команда)
	Для Каждого ТекТаблицаЗаполнения Из ТаблицаЗаполнения Цикл
		ТекТаблицаЗаполнения.Использование = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанные(Команда)
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("ОчищатьДанныеДокумента", ОчищатьДанныеДокумента);
	МассивЗаполнения = Новый Массив;
	Для Каждого ТекТаблицаЗаполнения Из ТаблицаЗаполнения Цикл
		Если ТекТаблицаЗаполнения.Использование Тогда
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Контрагент",					 ТекТаблицаЗаполнения.Контрагент);
			СтруктураСтроки.Вставить("СтепеньДоходности",				 ТекТаблицаЗаполнения.СтепеньДоходности);
			СтруктураСтроки.Вставить("СтепеньРиска",	 ТекТаблицаЗаполнения.СтепеньРиска);
			МассивЗаполнения.Добавить(СтруктураСтроки);
		Иначе
			Продолжить;				//Не нужно переносить эту строку
		КонецЕсли;
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивЗаполнения", МассивЗаполнения);
	Оповестить("ПеренестиКонтрагентовПоСохраненномуЗапросу", СтруктураОповещения, ЭтаФорма);
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВсехЗначимость(Команда)
	Если ТаблицаЗаполнения.Количество() > 0 Тогда
		ОписаниеОповещенияФормыВыбора = Новый ОписаниеОповещения("УстановитьДляВсехЗначимостьЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.СтепениДоходности.ФормаВыбора", , , , , , ОписаниеОповещенияФормыВыбора);
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Таблица контрагентов пуста. Установка значений невозможна.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВсехКлассПлатежнойДисциплины(Команда)
	Если ТаблицаЗаполнения.Количество() > 0 Тогда
		ОписаниеОповещенияФормыВыбора = Новый ОписаниеОповещения("УстановитьДляВсехКлассПлатежнойДисциплиныЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.СтепениРиска.ФормаВыбора", , , , , , ОписаниеОповещенияФормыВыбора);
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Таблица контрагентов пуста. Установка значений невозможна.'"));
	КонецЕсли;
КонецПроцедуры
