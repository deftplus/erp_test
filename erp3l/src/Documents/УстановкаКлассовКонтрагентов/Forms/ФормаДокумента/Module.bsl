#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьУстановленныеКлассыУВсехКонтрагентов();
	
	УстановитьУсловноеОформление();
	ВалютаУпрУчета = ОбщегоНазначенияПовтИспУХ.ПолучитьВалютуУправленческогоУчета();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьУстановленныеКлассыУВсехКонтрагентов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПеренестиКонтрагентовПоСохраненномуЗапросу" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			// Обработка свойства ОчищатьДанныеДокумента.
			ТребуетсяОчистка = Ложь;
			Если Параметр.Свойство("ОчищатьДанныеДокумента") Тогда
				ТребуетсяОчистка = Параметр.ОчищатьДанныеДокумента;
			Иначе
				ТребуетсяОчистка = Ложь;
			КонецЕсли;  
			Если ТребуетсяОчистка Тогда
				Объект.Оценки.Очистить();
			Иначе
				// Очистка табличной части не требуется. Ничего не делаем.
			КонецЕсли;
			// Обработка свойства МассивЗаполнения.
			МассивЗаполнения = Новый Массив;
			Если Параметр.Свойство("МассивЗаполнения", МассивЗаполнения) Тогда
				Для Каждого ТекМассивЗаполнения Из МассивЗаполнения Цикл
					НоваяСтрока = Объект.Оценки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекМассивЗаполнения);
					НоваяСтрока.СтепеньРиска	 = ТекМассивЗаполнения.СтепеньРиска;
					НоваяСтрока.СтепеньДоходности					 = ТекМассивЗаполнения.СтепеньДоходности;
				КонецЦикла;
			Иначе
				ОбщегоНазначенияУХ.СообщитьОбОшибке("ru = 'Данные заполнения не были переданы. Операция прервана.'");
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант переданных параметров: %Параметры%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Параметры%", Строка(Параметр));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Неизвестный вариант оповещения. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РольКонтрагентаПриИзменении(Элемент)
	ПриИзмененииРолиКонтрагентаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценки

&НаКлиенте
Процедура ОценкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		// Передан контрагент. Добавим новую строку с этим контрагентом.
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			НоваяСтрока = Объект.Оценки.Добавить();
			НоваяСтрока.Контрагент = ВыбранноеЗначение;
		Иначе
			//Контрагент не выбран. Не добавляем новую строку.
		КонецЕсли;
	Иначе
		//Неизвестный вариант переданного значения. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОценкиКонтрагентПриИзменении(Элемент)
	ПриИзмененииОценкиКонтрагент();
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Заполним установленные значения классов для скопированной строки
	Если Копирование Тогда
		ПриИзмененииОценкиКонтрагент();
	Иначе
		// Не копирование, значение уже проставлено.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОценкиСтепеньРискаПриИзменении(Элемент)
	
	УстановитьРекомендуемыеУсловия(Элементы.Оценки.ТекущиеДанные, Объект.РольКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиСтепеньДоходностиПриИзменении(Элемент)
	
	УстановитьРекомендуемыеУсловия(Элементы.Оценки.ТекущиеДанные, Объект.РольКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьУсловияОплатыДоговоров(Команда)
	МассивКонтрагентов = ПолучитьМассивКонтрагентов();
	Если МассивКонтрагентов.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент", МассивКонтрагентов);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.УсловияОплатыДоговоров.ФормаОбъекта", СтруктураПараметров);
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Отсутствуют контрагенты в табличной части документа'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРейтингиКонтрагентов(Команда)
	МассивКонтрагентов = ПолучитьМассивКонтрагентов();
	Если МассивКонтрагентов.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент", МассивКонтрагентов);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.КлассыКонтрагентов.ФормаОбъекта", СтруктураПараметров);
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Отсутствуют контрагенты в табличной части документа'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСохраненнымЗапросам(Команда)
	ОписаниеОповещенияЗаполнениеПоСохраненнымЗапросам = Новый ОписаниеОповещения("ЗаполнитьПоСохраненнымЗапросамЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаКлассовКонтрагентов.Форма.ФормаЗаполненияПоСохраненнымЗапросам", , , , , , ОписаниеОповещенияЗаполнениеПоСохраненнымЗапросам);
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтрагентов(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", СтруктураПараметров, Элементы.Оценки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Возвращает массив контрагентов из табличной части Оценки
&НаСервере
Функция ПолучитьМассивКонтрагентов()
	РезультатФункции = Новый Массив;
	ВыгрузкаТЧ = Объект.Оценки.Выгрузить();
	РезультатФункции = ВыгрузкаТЧ.ВыгрузитьКолонку("Контрагент");
	Возврат РезультатФункции;
КонецФункции

// Заполняет установленные классы значимости у всех контрагентов
//в табличной части
&НаСервере
Процедура ЗаполнитьУстановленныеКлассыУВсехКонтрагентов()
	// Получение классов контрагентов.
	МассивКонтрагентов = ПолучитьМассивКонтрагентов();
	СоответствиеКлассовКонтрагентов = УправлениеОбязательствамиУХ.ПолучитьСоответствиеКлассовКонтрагентам(МассивКонтрагентов);
	// Заполнение установленных значений классов контрагентов.
	ПустойКлассЗначимости = ПредопределенноеЗначение("Справочник.СтепениДоходности.ПустаяСсылка");
	ПустойКлассПлатежнойДисциплины = ПредопределенноеЗначение("Справочник.СтепениРиска.ПустаяСсылка");
	Для Каждого ТекОценки Из Объект.Оценки Цикл
		ТекКонтрагент = ТекОценки.Контрагент;
		ЗначениеКлассов = СоответствиеКлассовКонтрагентов[ТекКонтрагент];
		Если ЗначениеКлассов <> Неопределено Тогда
			ТекОценки.УстановленнаяСтепеньДоходности				 = ЗначениеКлассов.СтепеньДоходности;
			ТекОценки.УстановленнаяСтепеньРиска	 = ЗначениеКлассов.СтепеньРиска;
		Иначе
			ТекОценки.УстановленнаяСтепеньДоходности				 = ПустойКлассЗначимости;
			ТекОценки.УстановленнаяСтепеньРиска	 = ПустойКлассПлатежнойДисциплины;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Заполняет в строке табличной части СтрокаТабличнойЧастиВход установленные классы 
//значимости у контрагента КонтрагентВход
&НаКлиенте
Процедура ЗаполнитьУстановленныйКлассКонтрагента(КонтрагентВход, СтрокаТабличнойЧастиВход)
	// Получение классов контрагентов.
	СтруктураКлассовКонтрагентов = УправлениеОбязательствамиУХВызовСервера.ПолучитьСтруктуруКлассаКонтрагента(КонтрагентВход);
	// Заполнение установленных значений классов контрагента
	Если СтруктураКлассовКонтрагентов.Количество() > 0 Тогда
		// Полученная структура содержит данные. Заполним их.
		СтрокаТабличнойЧастиВход.УстановленнаяСтепеньДоходности			 = СтруктураКлассовКонтрагентов.СтепеньДоходности;
		СтрокаТабличнойЧастиВход.УстановленнаяСтепеньРиска	 = СтруктураКлассовКонтрагентов.СтепеньРиска;
	Иначе
		// Структура пустая. Установим значения по умолчанию.
		СтрокаТабличнойЧастиВход.УстановленнаяСтепеньДоходности		 = ПредопределенноеЗначение("Справочник.СтепениДоходности.ПустаяСсылка");
		СтрокаТабличнойЧастиВход.УстановленнаяСтепеньРиска	 = ПредопределенноеЗначение("Справочник.СтепениРиска.ПустаяСсылка");
	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСохраненнымЗапросамЗавершение(ПараметрКоманды, ПараметрВыполненияКоманды) Экспорт
	
	ОбновитьОценки();
	
КонецПроцедуры

// Выполняется при изменении реквизита Контрагент табличной части Оценки для строки
//СтрокаТабличнойЧастиВход. Когда СтрокаТабличнойЧастиВход - берется текущая строка
&НаКлиенте
Процедура ПриИзмененииОценкиКонтрагент(СтрокаТабличнойЧастиВход = Неопределено)
	//Заполнение установленного класса контрагента
	Если СтрокаТабличнойЧастиВход = Неопределено Тогда
		ТекущиеДанные = Элементы.Оценки.ТекущиеДанные;      //Строка табличной части не задана. Возьмем текущую строку.
	Иначе
		ТекущиеДанные = СтрокаТабличнойЧастиВход;
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьУстановленныйКлассКонтрагента(ТекущиеДанные.Контрагент, ТекущиеДанные);
	Иначе
		//Текущая строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Обработка флага "Задолженность вручную".
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОценкиЗадолженность");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оценки.ЗадолженностьВручную", ВидСравненияКомпоновкиДанных.Равно,Ложь,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Обработка флага "Процент аванса вручную".
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОценкиПроцентАванса");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оценки.ПроцентАвансаВручную", ВидСравненияКомпоновкиДанных.Равно,Ложь,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Обработка флага "Срок отсрочки вручную".
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОценкиСрокОтсрочки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оценки.СрокОтсрочкиВручную", ВидСравненияКомпоновкиДанных.Равно,Ложь,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоБанк = Объект.РольКонтрагента = ПредопределенноеЗначение("Перечисление.РолиКонтрагентов.Банки");
	
	ШаблонЗаголовкаЗадолженности = ?(ЭтоБанк, НСтр("ru = 'Лимит размещения (%1)'"), НСтр("ru = 'Лимит задолженности (%1)'"));
	Элементы.ОценкиЗадолженность.Заголовок = СтрШаблон(ШаблонЗаголовкаЗадолженности, Форма.ВалютаУпрУчета);

	Элементы.ОценкиГруппаПроцентАванса.Видимость = Не ЭтоБанк;
	Элементы.ОценкиГруппаСрокОтсрочки.Видимость = Не ЭтоБанк;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРекомендуемыеУсловия(Строка, РольКонтрагента)
	
	РекомендуемыеУсловия = УправлениеОбязательствамиУХВызовСервера.ПолучитьРекомендуемыеУсловия(Строка.СтепеньРиска, Строка.СтепеньДоходности, РольКонтрагента);
	
	Если Не Строка.ПроцентАвансаВручную Тогда
		Строка.ПроцентАванса = РекомендуемыеУсловия.ПроцентАванса;
	КонецЕсли;
	
	Если Не Строка.СрокОтсрочкиВручную Тогда
		Строка.СрокОтсрочки = РекомендуемыеУсловия.СрокОтсрочки;
	КонецЕсли;
	
	Если Не Строка.ЗадолженностьВручную Тогда
		Строка.Задолженность = РекомендуемыеУсловия.ДопустимыйУровеньЗадолженности;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРолиКонтрагентаНаСервере()
	
	ОбновитьОценки();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОценки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оценки.НомерСтроки,
	|	Оценки.Контрагент,
	|	Оценки.СтепеньРиска КАК СтепеньРиска,
	|	Оценки.СтепеньДоходности КАК СтепеньДоходности,
	|	Оценки.Задолженность,
	|	Оценки.ЗадолженностьВручную,
	|	Оценки.ПроцентАванса,
	|	Оценки.ПроцентАвансаВручную,
	|	Оценки.СрокОтсрочки,
	|	Оценки.СрокОтсрочкиВручную,
	|	Оценки.Комментарий
	|ПОМЕСТИТЬ ВТ_Оценки
	|ИЗ
	|	&Оценки КАК Оценки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтепеньРиска,
	|	СтепеньДоходности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оценки.НомерСтроки КАК НомерСтроки,
	|	ВТ_Оценки.Контрагент,
	|	ВТ_Оценки.СтепеньРиска,
	|	ВТ_Оценки.СтепеньДоходности,
	|	ВТ_Оценки.Комментарий,
	|	ВЫБОР
	|		КОГДА ВТ_Оценки.ПроцентАвансаВручную
	|			ТОГДА ВТ_Оценки.ПроцентАванса
	|		ИНАЧЕ МатрицаРекомендуемыхУсловий.ПроцентАванса
	|	КОНЕЦ КАК ПроцентАванса,
	|	ВТ_Оценки.ПроцентАвансаВручную,
	|	ВЫБОР
	|		КОГДА ВТ_Оценки.СрокОтсрочкиВручную
	|			ТОГДА ВТ_Оценки.СрокОтсрочки
	|		ИНАЧЕ МатрицаРекомендуемыхУсловий.СрокОтсрочки
	|	КОНЕЦ КАК СрокОтсрочки,
	|	ВТ_Оценки.СрокОтсрочкиВручную,	
	|	ВЫБОР
	|		КОГДА ВТ_Оценки.ЗадолженностьВручную
	|			ТОГДА ВТ_Оценки.Задолженность
	|		ИНАЧЕ МатрицаРекомендуемыхУсловий.ДопустимыйУровеньЗадолженности
	|	КОНЕЦ КАК Задолженность,
	|	ВТ_Оценки.ЗадолженностьВручную,
	|	КлассыКонтрагентовСрезПоследних.СтепеньРиска КАК УстановленнаяСтепеньРиска,
	|	КлассыКонтрагентовСрезПоследних.СтепеньДоходности КАК УстановленнаяСтепеньДоходности
	|ИЗ
	|	ВТ_Оценки КАК ВТ_Оценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыКонтрагентов.СрезПоследних КАК КлассыКонтрагентовСрезПоследних
	|		ПО ВТ_Оценки.Контрагент = КлассыКонтрагентовСрезПоследних.Контрагент
	|			И (&РольКонтрагента = КлассыКонтрагентовСрезПоследних.РольКонтрагента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаРекомендуемыхУсловий КАК МатрицаРекомендуемыхУсловий
	|		ПО (МатрицаРекомендуемыхУсловий.РольКонтрагента = &РольКонтрагента)
	|			И ВТ_Оценки.СтепеньРиска = МатрицаРекомендуемыхУсловий.СтепеньРиска
	|			И ВТ_Оценки.СтепеньДоходности = МатрицаРекомендуемыхУсловий.СтепеньДоходности
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.УстановитьПараметр("Оценки", Объект.Оценки.Выгрузить());
	Запрос.УстановитьПараметр("РольКонтрагента", Объект.РольКонтрагента);
	
	Объект.Оценки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти