
#Область ОбъявлениеПеременных

&НаКлиенте
Перем НаименованиеРеквизитаДляЗапись_ПрисоединенныйФайл;

#КонецОбласти

#Область УниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура СтатусОбъектаПриИзменении_Подключаемый()
	НовоеЗначениеСтатуса = РеквизитСтатусОбъекта(ЭтаФорма);
	ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатуса);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьТребованиеКДокументам(ТребованияКСоставуДокументов, ТребованиеКДокументам)
	Если НЕ ЗначениеЗаполнено(ТребованиеКДокументам) Тогда
		Возврат;
	КонецЕсли;
	
	мСтрок = ТребованияКСоставуДокументов.НайтиСтроки(Новый Структура("Требование", ТребованиеКДокументам));
	Если мСтрок.Количество() = 0 Тогда
		НоваяСтрока = ТребованияКСоставуДокументов.Добавить();
		НоваяСтрока.Требование = ТребованиеКДокументам;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.Печать, ДополнительныеОтчетыИОбработки
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	#Область УниверсальныеПроцессыСогласование
		ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
			
	УправлениеФормой();
	
	Если Объект.Ссылка.Пустая() И НЕ Отказ И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
																						
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбоснованиеТребованийКЗакупочнойПроцедуре.Ссылка
			|ИЗ
			|	Документ.ОбоснованиеТребованийКЗакупочнойПроцедуре КАК ОбоснованиеТребованийКЗакупочнойПроцедуре
			|ГДЕ
			|	ОбоснованиеТребованийКЗакупочнойПроцедуре.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТекстСообщения = СтрШаблон(Нстр("ru = 'На основании документа: %1%2 уже создан документ: %3'"), Объект.ДокументОснование, 
					Символы.ПС, ВыборкаДетальныеЗаписи.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		
		КонецЕсли;
	КонецЕсли;																				
	
	
	ЭтаФорма.Команды.ПрикрепитьНовыйФайлПроектДоговора.Подсказка = ?(Объект.ПроектДоговора.Пустая(),Нстр("ru = 'Прикрепить новый файл проект договора'"),Нстр("ru = 'Посмотреть файл проект договора'"));
	ЭтаФорма.Команды.ПрикрепитьНовыйФайлТехническоеЗадание.Подсказка = ?(Объект.ТехническоеЗадание.Пустая(),Нстр("ru = 'Прикрепить новый файл техническое задание'"),Нстр("ru = 'Посмотреть файл техническое задание'"));
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЭтотОбъект.СтатусОбъекта = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Утверждена") Тогда 
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Параметры.СсылкаНаУжеСозданныйДокумент.Пустая() Тогда
		Отказ = Истина;
		ПоказатьЗначение(,Параметры.СсылкаНаУжеСозданныйДокумент);
		Возврат;
	КонецЕсли;
	
	УправлениеФормойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	#Область УниверсальныеПроцессыСогласование
		Если ИмяСобытия = "ОбъектСогласован" ИЛИ ИмяСобытия = "ОбъектОтклонен" ИЛИ ИмяСобытия = "МаршрутИнициализирован" ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
			ОпределитьСостояниеОбъекта();
		КонецЕсли;
	#КонецОбласти
	Если ИмяСобытия = "Запись_Файл" И ЗначениеЗаполнено(НаименованиеРеквизитаДляЗапись_ПрисоединенныйФайл) 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		Объект[НаименованиеРеквизитаДляЗапись_ПрисоединенныйФайл] = Источник[0];
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура СоздатьНаОснованииПояснительнуюЗапискуКРасчетуНМЦ(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническоеЗаданиеПриИзменении(Элемент)
	
	УправлениеФормойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектДоговораПриИзменении(Элемент)
	
	УправлениеФормойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническоеЗаданиеСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьНовыйПрикрепленныйФайл(Объект.Ссылка.Пустая(),Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектДоговораСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьНовыйПрикрепленныйФайл(Объект.Ссылка.Пустая(),Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьНовыйФайлТехническоеЗадание(Команда)
	
	ОткрытьСоздатьНовыйФайл("ТехническоеЗадание");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьНовыйФайлПроектДоговора(Команда)
	
	ОткрытьСоздатьНовыйФайл("ПроектДоговора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническоеЗаданиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСоздатьНовыйФайл("ТехническоеЗадание");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектДоговораОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСоздатьНовыйФайл("ПроектДоговора");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
		
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОрганизации");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
	ЭлементОтбора.ПравоеЗначение.Добавить("Налоговый резидент РФ");
	ЭлементОтбора.ПравоеЗначение.Добавить("Иностранный резидент");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
	
	ФормаВыбора = ПолучитьФорму("Справочник.Организации.ФормаВыбора",ПараметрыФормы, Элемент, УникальныйИдентификатор);
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияИнициатора(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Организации") Тогда
	
		Объект.СтруктурноеПодразделениеИнициатора = Результат;	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;		// Запретим копировать строки.
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамТребованиеКПоставщикуПриИзменении(Элемент)
	ТекДанные = Элементы.ТребованияКПоставщикам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ЗаполнитьСтрокуТребованияКПоставщикам(ТекДанные);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамТребованиеКПоставщикуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мСтрок = Объект.ТребованияКПоставщикам.НайтиСтроки(Новый Структура("ТребованиеКПоставщику", ВыбранноеЗначение));
	Если мСтрок.Количество() > 0 Тогда
		ИдСтроки = Элементы.ТребованияКПоставщикам.ТекущаяСтрока;
		ТекущаяСтрокаТЧ = Объект.ТребованияКПоставщикам.НайтиПоИдентификатору(ИдСтроки);
		Если ТекущаяСтрокаТЧ <> мСтрок[0] Тогда
			СтандартнаяОбработка = Ложь;
			ВыбранноеЗначение = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТребованийКПоставщикам(Команда)
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина); 
	ПараметрыПодбора.Вставить("КритерииЗаполнены", Истина);
    ОткрытьФорму("Справочник.ТребованияКПоставщикам.ФормаВыбора", ПараметрыПодбора, Элементы.ТребованияКПоставщикам);
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеЗаявкиПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеДоговораПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеВозвратаАвансаПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ПреференцииДляКонтрагентовПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаСервере

&НаСервере
Процедура УправлениеФормой()
	
	#Область УправлениеУправляющимиРеквизитами
	Если НЕ ЕстьСуперПользователь Тогда
		Если СостояниеЗаявки = Перечисления.СостоянияСогласования.Утверждена Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти	
	
	ЭтоЗакупкаУЕП = ЭтоЗакупкаУЕП(Объект);
	
	//видимость при конкурентной закупке
	Элементы.ГруппаСтраницыПредложения.Видимость = Не ЭтоЗакупкаУЕП;
	//видимость при закупке у ЕП
	Элементы.ГруппаСтраницыЗакупкаУЕП.Видимость = ЭтоЗакупкаУЕП;
	//автоотметка незаполненного при закупке у ЕП
	Элементы.ОбоснованиеСпособаЗакупкиЕП.АвтоОтметкаНезаполненного = ЭтоЗакупкаУЕП;
	Элементы.ОбоснованиеВыбораПоставщикаЗакупкаЕП.АвтоОтметкаНезаполненного = ЭтоЗакупкаУЕП;
	// Видимость элементов обеспечения.
	УстановитьОформлениеЭлементовОбеспечения();
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоЗакупкаУЕП(Объект)
	
	РезультатФункции = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекСпособЗакупки = Объект.ДокументОснование.СпособВыбораПоставщика;
		РезультатФункции = (ТекСпособЗакупки = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика);
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзначальныйТекстОшибки(Инфо)
	
	Если Инфо.Причина <> Неопределено Тогда
		Возврат ПолучитьИзначальныйТекстОшибки(Инфо.Причина);
	Иначе
		Возврат Инфо.Описание;
	КонецЕсли; 		
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(
	Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлЗашифрован(ФайлДляПросмотра)
	
	Возврат ФайлДляПросмотра.Зашифрован;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлРедактируется(ФайлДляПросмотра)
	
	Возврат ЗначениеЗаполнено(ФайлДляПросмотра.Редактирует) И ФайлДляПросмотра.Редактирует = Пользователи.АвторизованныйПользователь();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВходитВПереченьЗапрещенныхРасширений(ФайлДляПросмотра)
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	Возврат ЗапрещенныеРасширения.НайтиПоЗначению(ФайлДляПросмотра.Расширение) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыТребованияКПоставщикам(ТребованиеКПоставщикам)
	РеквизитыТребования = Новый Структура;
	РеквизитыТребования.Вставить("Критерий", Справочники.КритерииВыбора.ПустаяСсылка());
	РеквизитыТребования.Вставить("ТребованиеКДокументу", Справочники.ТребованияКСоставуДокументов.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ТребованиеКПоставщикам) Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыТребования, ТребованиеКПоставщикам);
	КонецЕсли;
	Возврат РеквизитыТребования;
КонецФункции

&НаСервере
Процедура УстановитьОформлениеЭлементовОбеспечения()
	Элементы.ФормаОбеспеченияЗаявки.Видимость			 = Объект.ОбеспечениеЗаявки;
	Элементы.ГруппаВеличинаОбеспеченияЗаявки.Видимость	 = Объект.ОбеспечениеЗаявки;
	Элементы.ФормаОбеспеченияДоговора.Видимость				 = Объект.ОбеспечениеДоговора;
	Элементы.ГруппаВеличинаОбеспеченияДоговора.Видимость	 = Объект.ОбеспечениеДоговора;
	Элементы.ФормаВозвратаАванса.Видимость		 = Объект.ОбеспечениеВозвратаАванса;
	Элементы.ВеличинаВозвратаАванса.Видимость	 = Объект.ОбеспечениеВозвратаАванса;
	Элементы.ВеличинаПреференцийДляКонтрагентов.Видимость	 = Объект.ПреференцииДляКонтрагентов;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойКлиент()
	
	Элементы.ПрикрепитьНовыйФайлТехническоеЗадание.Картинка 	= ?(Объект.ТехническоеЗадание.Пустая(), БиблиотекаКартинок.СоздатьЭлементСписка, БиблиотекаКартинок.ЛупаУХ);
	Элементы.ПрикрепитьНовыйФайлПроектДоговора.Картинка 		= ?(Объект.ПроектДоговора.Пустая(), 	БиблиотекаКартинок.СоздатьЭлементСписка, БиблиотекаКартинок.ЛупаУХ);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйПрикрепленныйФайл(ЭтоНовый, ИмяЭлемента)
	
	НаименованиеРеквизитаДляЗапись_ПрисоединенныйФайл = ИмяЭлемента;
	ДополнительныеПараметры = Новый Структура("ЭтоНовый",ЭтоНовый);
	Если ЭтоНовый Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеНовогоПрикрепленногоФайлаЗавершение",ЭтотОбъект,ДополнительныеПараметры); 
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
						|Выполнение действия ""Присоединенные файлы"" возможно только после записи данных.
						|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СозданиеНовогоПрикрепленногоФайлаЗавершение(КодВозвратаДиалога.Да,ДополнительныеПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовогоПрикрепленногоФайлаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = КодВозвратаДиалога.Да И (Не ДополнительныеПараметры.ЭтоНовый Или ДополнительныеПараметры.ЭтоНовый И Записать()) Тогда
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор);
		УправлениеФормойКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНаОсновании(ЭтоНовый, ИмяКоманды)
	
	ДополнительныеПараметры = Новый Структура("ЭтоНовый,ИмяКоманды",ЭтоНовый,ИмяКоманды);
	Если ЭтоНовый Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеДокументаНаОснованииЗавершение",ЭтотОбъект,ДополнительныеПараметры); 
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
                             |Выполнение действия ""Создание на основании"" возможно только после записи данных.
                             |Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СозданиеДокументаНаОснованииЗавершение(КодВозвратаДиалога.Да,ДополнительныеПараметры); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаНаОснованииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	//Если РезультатВыбора = КодВозвратаДиалога.Да И (Не ДополнительныеПараметры.ЭтоНовый Или ДополнительныеПараметры.ЭтоНовый И Записать()) Тогда
	//	ПараметрыФормы = Новый Структура;
	//	ЗначенияЗаполнения = Новый Структура;
	//	Если ДополнительныеПараметры.ИмяКоманды = "СоздатьНаОснованииПояснительнуюЗапискуКРасчетуНМЦ" Тогда
	//		ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
	//		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	//		ОткрытаяФорма = ОткрытьФорму("Документ.ПояснительнаяЗапискаКРасчетуНМЦ.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//	КонецЕсли;
	//	ОткрытаяФорма.Модифицированность = Истина;
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(ФайлДляПросмотра)
	
	Если ФайлЗашифрован(ФайлДляПросмотра) Тогда
		Возврат;
	КонецЕсли;
	
	ВходитВПереченьЗапрещенныхРасширений = ПроверитьВходитВПереченьЗапрещенныхРасширений(ФайлДляПросмотра);
	ДополнительныеПараметры = Новый Структура("ФайлДляПросмотра",ФайлДляПросмотра);
	Если ВходитВПереченьЗапрещенныхРасширений Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	Иначе
		ОткрытьФайлПослеПодтверждения("Продолжить", ДополнительныеПараметры);
	КонецЕсли;
	     	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ФайлДляПросмотра = ДополнительныеПараметры.ФайлДляПросмотра;
	
	Если РезультатВыбора = "Продолжить" Тогда
		ДанныеФайла = ПолучитьДанныеФайла(ФайлДляПросмотра, УникальныйИдентификатор);
		ФайлРедактируется = ФайлРедактируется(ФайлДляПросмотра);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоздатьНовыйФайл(ИмяРеквизита)
	
	Если Объект[ИмяРеквизита].Пустая() Тогда
		СоздатьНовыйПрикрепленныйФайл(Объект.Ссылка.Пустая(), ИмяРеквизита);
	Иначе
		ОткрытьФайлДляПросмотра(Объект[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуТребованияКПоставщикам(СтрокаТребования)
	Если СтрокаТребования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыТребования = ПолучитьРеквизитыТребованияКПоставщикам(СтрокаТребования.ТребованиеКПоставщику);
	ЗаполнитьЗначенияСвойств(СтрокаТребования, РеквизитыТребования);
КонецПроцедуры

#КонецОбласти

#Область ШаблоныЗаполнения


// Получает структуру шаблона по текущему объекту.
&НаСервере
Функция ВернутьСтруктураДанныхОбъектаШаблона()
	ОбъектШаблона = РеквизитФормыВЗначение("Объект");
	СтруктураДанныхОбъекта = УправлениеШаблонамиЗаполненияУХ.СтруктураДанныхОбъектаШаблонаПоОбъекту(ОбъектШаблона);
	Возврат СтруктураДанныхОбъекта;
КонецФункции

&НаСервере
Функция ПолучитьЗапросОбъектИзРеквизитаФормы(КонтекстСохранения)
	КонтекстСохранения = Новый Структура;
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПоместитьЗакупкаОбъектВРеквизитФормы(ЗакупкаОбъект, КонтекстСохранения)
	ЗначениеВРеквизитФормы(ЗакупкаОбъект, "Объект");
КонецПроцедуры

// Выполняет заполнение реквизитов формы по шаблону заполнения ШаблонВход.
&НаСервере
Процедура ЗаполнитьФормуПоШаблону(ШаблонВход)
	КонтекстСохранения = Неопределено;
    ОбъектШаблона = ПолучитьЗапросОбъектИзРеквизитаФормы(КонтекстСохранения);
    ЗаполненныйОбъект = УправлениеШаблонамиЗаполненияУХ.ЗаполнитьИзШаблона(ШаблонВход, ОбъектШаблона);
    ПоместитьЗакупкаОбъектВРеквизитФормы(ЗаполненныйОбъект, КонтекстСохранения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ШаблоныЗаполнения") Тогда
		ЗаполнитьФормуПоШаблону(ВыбранноеЗначение);
		УправлениеШаблонамиЗаполненияКлиентУХ.ПослеЗаполненияПоШаблону(ЭтаФорма, ВыбранноеЗначение);
		ЗаголовокПредупреждения = НСтр("ru = 'Заполнение'");
		ТекстПредупреждения = НСтр("ru = 'Текущий объект заполнен по шаблону %ШаблонЗаполнения%'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ШаблонЗаполнения%", Строка(ВыбранноеЗначение));
		ПоказатьОповещениеПользователя(ЗаголовокПредупреждения, , ТекстПредупреждения, БиблиотекаКартинок.Успешно32);
	Иначе
	// Не выбран шаблон. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)
	СтруктураДанныхОбъектаШаблона = ВернутьСтруктураДанныхОбъектаШаблона();	
	НовыйОрганизаторЗакупки = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		НовыйОрганизаторЗакупки = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "ОрганизаторЗакупки");
	Иначе
		НовыйОрганизаторЗакупки = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение",		 СтруктураДанныхОбъектаШаблона.Назначение);
	ПараметрыФормы.Вставить("ИмяОбъекта",		 СтруктураДанныхОбъектаШаблона.ИмяОбъекта);
	ПараметрыФормы.Вставить("АналитикаОтбора",	 НовыйОрганизаторЗакупки);
	ПараметрыФормы.Вставить("РежимВыбора",		 Истина);
	ОткрытьФорму("Справочник.ШаблоныЗаполнения.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВШаблон(Команда)
	УправлениеШаблонамиЗаполненияКлиентУХ.СохранитьВШаблон(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	СерверныйКонтекст = Новый Структура;
	СерверныйКонтекст.Вставить("ПараметрКоманды", Неопределено);
	СерверныйКонтекст.Вставить("ИмяКомандыВФорме", ИмяЭлемента);
	СерверныйКонтекст.Вставить("Результат", РезультатВыполнения);
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтаФорма, СерверныйКонтекст, Объект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	РезультатКоманды = ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтаФорма, Команда, Объект);
	Если НЕ РезультатКоманды Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтаФорма, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

&НаКлиенте
Процедура СпособЗакупкиПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопрос(Структура,Массив)
	СписокДокументов = "";
	Для Каждого ЭлементаМассива из Массив цикл
		СписокДокументов = СписокДокументов+", "+Строка(ЭлементаМассива.Объект);	
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения("ВопросЗавершение", ЭтотОбъект, Структура);
	ТекстВопроса = НСтр("ru = 'У данного документа имеются несогласованные Строки/Корректировки строк РПЗ %СписокДокументов%. Отменить их проведения и пометить на удаление?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СписокДокументов%", Строка(СписокДокументов));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого ЭлементМассива  из ДополнительныеПараметры.Массив Цикл
			ПометкаНаУдалениеНеСогласованныхСтрокРПЗ(ЭлементМассива.Объект);
			ТекстСообщения = НСтр("ru = 'Объект ""%Объект%"" помечен на удаление'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ЭлементМассива.Объект));
			Сообщить(ТекстСообщения);
		КонецЦикла;
	Иначе
		ДополнительныеПараметры.Отказ = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПометкаНаУдалениеНеСогласованныхСтрокРПЗ(Документ)
	Док = Документ.ПолучитьОбъект();;
	Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Док.УстановитьПометкуУдаления(Истина);	
КонецПроцедуры
 
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("РТ_ЭтоНовый") И
		 ТекущийОбъект.ДополнительныеСвойства.РТ_ЭтоНовый Тогда
		
		ОповещениеДляОтправки = "РТ_ЗаписанаНоваяПозицияСтрокиРПЗУЗД";
		
	ИначеЕсли ТекущийОбъект.ДополнительныеСвойства.Свойство("РТ_ПометкаУдаленияДоЗаписи") И
		      (Не ТекущийОбъект.ДополнительныеСвойства.РТ_ПометкаУдаленияДоЗаписи = ТекущийОбъект.ПометкаУдаления) Тогда	
		
		ОповещениеДляОтправки = "РТ_ИзмененаПометкаУдаленияУЗД";
		
	ИначеЕсли ТекущийОбъект.ДополнительныеСвойства.Свойство("РТ_ПроведенДоЗаписи") И
		      (Не ТекущийОбъект.ДополнительныеСвойства.РТ_ПроведенДоЗаписи = ТекущийОбъект.Проведен) Тогда	
		
		ОповещениеДляОтправки = "РТ_ИзмененПризнакПроведенияУЗД";
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ОповещениеДляОтправки) Тогда
	
		Оповестить(ОповещениеДляОтправки);	
		ОповещениеДляОтправки = "";
	
	КонецЕсли;
	
	// Оповестить документ СтрокаПланаЗакупокОВводеНаОсновании
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОповещения.Вставить("Основание", Объект.ДокументОснование);
		ПараметрыОповещения.Вставить("ПометкаУдаления", Объект.ПометкаУдаления);
		
		Оповестить("ЗаписанДокументОбоснованиеТребований", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаДокумента

&НаСервереБезКонтекста
Функция ДокументСогласован(Ссылка)
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;	
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрСостоянийОбъектовСрезПоследних.Объект,
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
		|			,
		|			Объект = &Объект
		|				И Объект ССЫЛКА Документ.ОбоснованиеТребованийКЗакупочнойПроцедуре) КАК РегистрСостоянийОбъектовСрезПоследних";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	РезЗапроса = Запрос.Выполнить();
	
	Если РезЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекТипДокумента = МодульСогласованияДокументовУХ.ПолучитьТипСогласуемогоОбъекта(Ссылка);
	
	Если ТекТипДокумента = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Тип документа ""%Ссылка%"" отсутствует в справочнике ""Документы БД"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Ссылка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();	
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблЗапроса = РезЗапроса.Выгрузить();
	
		
	Если ТаблЗапроса.Количество() = 0 Тогда

		Возврат Ложь;
		
	КонецЕсли;
	
	ТекСостояниеОбъекта = ТаблЗапроса.Получить(0).СостояниеОбъекта;
	
	Если Не ТекТипДокумента.ЗначениеРеквизитаСостоянияУтвержден = ТекСостояниеОбъекта Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить документ по документу основанию?'");
		ОписаниеОповещенияВопроса = Новый ОписаниеОповещения("ДокументОснованиеПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		// Не заполнен документ основание.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуОснованию();
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение.Количество() > 0 Тогда
		Для каждого ТребованиеКПоставщику Из ВыбранноеЗначение Цикл
			СтруктураПоиска = Новый Структура("ТребованиеКПоставщику", ТребованиеКПоставщику);
			мСтрокТребований = Объект.ТребованияКПоставщикам.НайтиСтроки(СтруктураПоиска);
			Если мСтрокТребований.Количество() = 0 Тогда
				СтрокаТребования = Объект.ТребованияКПоставщикам.Добавить();
				СтрокаТребования.ТребованиеКПоставщику = ТребованиеКПоставщику;
			Иначе
				СтрокаТребования = мСтрокТребований[0];
			КонецЕсли;
			ЗаполнитьСтрокуТребованияКПоставщикам(СтрокаТребования);
		КонецЦикла;   
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтСуммыЗаявкиОбеспеченияДоговораПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СуммаСтрокиПлана = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "СуммаДокумента");
		Объект.ВеличинаОбеспеченияДоговора = СуммаСтрокиПлана * (Объект.ПроцентОтСуммыЗаявкиОбеспеченияДоговора / 100);
	Иначе
		// Строка плана закупок не указана. Оставляем сумму прежней.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУсловияОплатыПоУсловиюОплаты()
	Если ЗначениеЗаполнено(Объект.УсловиеОплаты) Тогда
		Объект.УсловияОплаты = Строка(Объект.УсловиеОплаты);
	Иначе
		Объект.УсловияОплаты = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтверждениеЗаполненияУсловий(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьУсловияОплатыПоУсловиюОплаты();
КонецПроцедуры

&НаКлиенте
Процедура УсловиеОплатыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Заполнить поле ""Условия оплаты (текстовое описание)"" по данным условия оплаты?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

#Конецобласти