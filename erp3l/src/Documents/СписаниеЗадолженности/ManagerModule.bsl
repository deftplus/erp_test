#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РезервыПоСомнительнымДолгам");
	//-- НЕ УТ
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	СписаниеЗадолженностиЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРезервыПоСомнительнымДолгам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		СписаниеЗадолженностиЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	СписаниеЗадолженностиЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Списание задолженности".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  
// Возвращаемое значение:
// 	Неопределено, СтрокаТаблицыЗначений - описание добавленной команды
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеЗадолженности) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СписаниеЗадолженности);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	СписаниеЗадолженностиЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	СписаниеЗадолженностиЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры
//++ НЕ УТ

// Функция формирует текст запроса для отражения документа в регл. учете.
//
// Возвращаемое значение:
// 		Строка - Текст запроса.
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат СписаниеЗадолженностиЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
// 		Строка - Текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат СписаниеЗадолженностиЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

// Возвращает параметры настройки счетов учета в документе.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	
// Возвращаемое значение:
// 	Массив - Массив параметров настройки счетов учета (См. НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетаУчетаОперации).
//
Функция ПараметрыНастройкиСчетовУчета(ХозяйственнаяОперация) Экспорт
	
	МассивПараметров = Новый Массив();
	
	#Область НастройкаСчетаОтраженияСписанияРасходов
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ПутьКДанным = "Объект";
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности 
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам Тогда
		ПараметрыНастройки.ТипСтатьи = "СтатьяРасходовТипСтатьи";
		ПараметрыНастройки.СтатьяАктивовПассивов = "СтатьяРасходов";
	Иначе
		ПараметрыНастройки.ТипСтатьи = "СтатьяДоходовТипСтатьи";
		ПараметрыНастройки.СтатьяАктивовПассивов = "СтатьяДоходов";
	КонецЕсли;
	
	ПараметрыНастройки.Представление = "ПредставлениеОтраженияВРеглУчете";
	
	ПараметрыНастройки.Организация = "Объект.Организация";

	ПараметрыНастройки.ЭлементыФормы.Добавить("ПредставлениеОтраженияРасходовВРеглУчете");
	ПараметрыНастройки.ЭлементыФормы.Добавить("ПредставлениеОтраженияДоходовВРеглУчете");
	
	МассивПараметров.Добавить(ПараметрыНастройки);
	#КонецОбласти
	
	Возврат МассивПараметров;
	
КонецФункции
//-- НЕ УТ

// Возвращает параметры выбора статей в документе.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 
// Возвращаемое значение:
// 	Массив - Массив параметров настройки счетов учета (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
//
Функция ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация) Экспорт
	
	МассивПаметровВыбора = Новый Массив;
	
	#Область СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи = "СтатьяРасходовТипСтатьи";
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	
	ПараметрыВыбора.ДоступностьПоОперации = 
			(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности 
					ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам);
	
	#Область АналитикаАктивовПассивов
	Если ПараметрыВыбора.ДоступностьПоОперации Тогда
		ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
		ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
		ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("РасходыАналитикаАктивовПассивов");
	КонецЕсли;
	#КонецОбласти
	
	#Область АналитикаРасходов
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	#КонецОбласти
	
	МассивПаметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	
	#Область СтатьяДоходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяДоходов";
	ПараметрыВыбора.ТипСтатьи = "СтатьяДоходовТипСтатьи";
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяДоходов");
	
	ПараметрыВыбора.ДоступностьПоОперации = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	
	#Область АналитикаАктивовПассивов
	Если ПараметрыВыбора.ДоступностьПоОперации Тогда
		ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
		ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
		ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ДоходыАналитикаАктивовПассивов");
	КонецЕсли;
	#КонецОбласти
	
	#Область АналитикаДоходов
	ПараметрыВыбора.ВыборСтатьиДоходов = Истина;
	ПараметрыВыбора.АналитикаДоходов = "АналитикаДоходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов.Добавить("АналитикаДоходов");
	#КонецОбласти
	
	МассивПаметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
		
	Возврат МассивПаметровВыбора;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Задолженность.Партнер, Null КАК Истина)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы) Экспорт
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "СписаниеЗадолженности";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Списание задолженности';
												|en = 'AR/AP write-off'");
	Строка.Порядок                      = 1;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "СписаниеЗадолженности";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Списание задолженности';
													|en = 'AR/AP write-off'");
		Строка.Порядок                      = 2;
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "СписаниеЗадолженности";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Списание задолженности';
												|en = 'AR/AP write-off'");
	Строка.Порядок                      = 3;
	Строка.ДобавитьКнопкуСоздать        = Истина;

	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								Новый СписокЗначений, 
								Новый СписокЗначений, 
								"");
	
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.Дата                                  КАК Период,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.Контрагент                            КАК Контрагент,
	|	ВЫБОР КОГДА ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов ТОГДА
	|		ДанныеДокумента.СтатьяДоходов                
	|	ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК СтатьяДоходов,
	|	ДанныеДокумента.АналитикаДоходов                      КАК АналитикаДоходов,
	|	ВЫБОР КОГДА ДанныеДокумента.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА
	|		ДанныеДокумента.СтатьяРасходов                
	|	ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК СтатьяРасходов,
	|	ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) КАК ВариантРаспределенияРасходовРегл,
	|	ЕСТЬNULL(СтатьиРасходов.ВидЦенностиНДС, НЕОПРЕДЕЛЕНО) КАК ВидЦенностиНДСРасходов,
	|	ДанныеДокумента.АналитикаРасходов                     КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА
	|			ДанныеДокумента.СтатьяРасходов
	|		КОГДА ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА
	|			ДанныеДокумента.СтатьяДоходов                
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК СтатьяАктивовПассивов,
	|	ДанныеДокумента.АналитикаАктивовПассивов              КАК АналитикаАктивовПассивов,
	//++ НЕ УТ
	|	ДанныеДокумента.НастройкаСчетовУчета                  КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ДанныеДокумента.Подразделение                         КАК Подразделение,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.МоментВремени                         КАК МоментВремени,
	|	ДанныеДокумента.Проведен                              КАК Проведен,
	|	ДанныеДокумента.Исправление                           КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент                  КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент                  КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.РасчетыМеждуОрганизациями             КАК РасчетыМеждуОрганизациями
	|ИЗ
	|	Документ.СписаниеЗадолженности КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		ДанныеДокумента.СтатьяРасходов = СтатьиРасходов.Ссылка
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;

	Запрос.УстановитьПараметр("СтатьяАктивовПассивов", ?(ЗначениеЗаполнено(Реквизиты.СтатьяАктивовПассивов),Реквизиты.СтатьяАктивовПассивов,НЕОПРЕДЕЛЕНО));
	Запрос.УстановитьПараметр("ВалютаУпр",                               Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",          ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихАктивовПассивов",   ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПустаяСсылка().Метаданные().ПолноеИмя())); 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Неопределено, // ВалютаДокумента
		Неопределено, // ВалютаВзаиморасчетов
		Запрос.Параметры.Период,
		Запрос.Параметры.Организация);

	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяВременнойТаблицы = "ТаблицаЗадолженность";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|
	|	Задолженность.ОбъектРасчетов.Организация КАК Организация,
	|	Задолженность.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.ОбъектРасчетов.Договор КАК Договор,
	|	Задолженность.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДС, Задолженность.Сумма) КАК Сумма,
	|	ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА Задолженность.Сумма
	|	ИНАЧЕ ВЫБОР КОГДА ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0) <> 0
	|			ТОГДА Суммы.СуммаБезНДСРегл
	|			ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма
	|					* ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
	|					* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаУпр
	|		ТОГДА Задолженность.Сумма
	|	ИНАЧЕ ВЫБОР КОГДА ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0) <> 0
	|			ТОГДА Суммы.СуммаБезНДСУпр
	|			ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма
	|					* ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
	|					* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	Задолженность.ТипРасчетов КАК ТипРасчетов,
	|	Задолженность.ОбъектРасчетов.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Задолженность.ОбъектРасчетов.Подразделение КАК Подразделение
	|
	|ПОМЕСТИТЬ ТаблицаЗадолженность
	|ИЗ
	|	Документ.СписаниеЗадолженности.Задолженность КАК Задолженность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&МоментВремени, БазоваяВалюта = &ВалютаРегламентированногоУчета) КАК КурсыВалют
	|	ПО
	|		Задолженность.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Задолженность.Ссылка = Суммы.Регистратор
	|		И Задолженность.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И Задолженность.Сумма = Суммы.СуммаВзаиморасчетов
	|
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ОстаткиРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Номер КАК НомерРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Договор КАК Договор,
	|	ВЫБОР 
	|		КОГДА Задолженность.НаправлениеДеятельности.УчетДоходов 
	|			ТОГДА Задолженность.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	// Ресурсы
	|	// Сумма в валюте взаиморассчетов.
	|	ВЫБОР КОГДА Задолженность.Сумма <= ОстаткиРезервов.Сумма
	|		ТОГДА Задолженность.Сумма
	|		ИНАЧЕ ОстаткиРезервов.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА Задолженность.Сумма <= ОстаткиРезервов.Сумма
	|		ТОГДА Задолженность.Сумма
	|		ИНАЧЕ ОстаткиРезервов.Сумма
	|	КОНЕЦ КАК КОплате,
	|	0 КАК КОтгрузке,
	|	
	|	ВЫБОР КОГДА Задолженность.СуммаРегл <= ОстаткиРезервов.СуммаРегл
	|		ТОГДА Задолженность.СуммаРегл
	|		ИНАЧЕ ОстаткиРезервов.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА Задолженность.СуммаУпр <= ОстаткиРезервов.СуммаУпр
	|		ТОГДА Задолженность.СуммаУпр
	|		ИНАЧЕ ОстаткиРезервов.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации,
	|	4 КАК Вид
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		Задолженность.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И Задолженность.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И Задолженность.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И Задолженность.Договор = РегистрАналитикаУчетаПоПартнерам.Договор   
	|		И Задолженность.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|	И Задолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Номер КАК НомерРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Договор КАК Договор,
	|	ВЫБОР 
	|		КОГДА Задолженность.НаправлениеДеятельности.УчетДоходов 
	|			ТОГДА Задолженность.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	// Ресурсы
	|	// Сумма в валюте взаиморассчетов.
	|	ВЫБОР КОГДА Задолженность.Сумма <= ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА Задолженность.Сумма <= ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|	КОНЕЦ КАК КОплате,
	|	0 КАК КОтгрузке,
	|	
	|	ВЫБОР КОГДА Задолженность.СуммаРегл <= ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаРегл - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА Задолженность.СуммаУпр <= ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаУпр - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0)
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеДебиторскойЗадолженности) КАК НастройкаХозяйственнойОперации,
	|	4 КАК Вид
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		Задолженность.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И Задолженность.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И Задолженность.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И Задолженность.Договор = РегистрАналитикаУчетаПоПартнерам.Договор   
	|		И Задолженность.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|	И Задолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	И (Задолженность.Сумма > ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|		ИЛИ Задолженность.СуммаРегл > ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)
	|		ИЛИ Задолженность.СуммаУпр > ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Номер КАК НомерРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Договор КАК Договор,
	|	ВЫБОР 
	|		КОГДА Задолженность.НаправлениеДеятельности.УчетДоходов 
	|			ТОГДА Задолженность.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	// Ресурсы
	|	// Сумма в валюте взаиморассчетов.
	|	-Задолженность.Сумма КАК Сумма,
	|	-Задолженность.Сумма КАК КОплате,
	|	0 КАК КОтгрузке,
	|	
	|	-Задолженность.СуммаРегл КАК СуммаРегл,
	|	-Задолженность.СуммаУпр КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКредиторскойЗадолженности) КАК НастройкаХозяйственнойОперации,
	|	4 КАК Вид 
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		Задолженность.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И Задолженность.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И Задолженность.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И Задолженность.Договор = РегистрАналитикаУчетаПоПартнерам.Договор  
	|		И Задолженность.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И Задолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ОстаткиРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Номер КАК НомерРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Договор КАК Договор,
	|	ВЫБОР 
	|		КОГДА Задолженность.НаправлениеДеятельности.УчетРасчетовСПоставщиками 
	|			ТОГДА Задолженность.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	// Ресурсы
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.Сумма КАК КОплате,
	|	
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)	КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКредиторскойЗадолженности) КАК НастройкаХозяйственнойОперации,
	|	4 КАК Вид
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		Задолженность.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И Задолженность.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И Задолженность.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И Задолженность.Договор = РегистрАналитикаУчетаПоПартнерам.Договор  
	|		И Задолженность.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И Задолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Номер КАК НомерРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Договор КАК Договор,
	|	ВЫБОР 
	|		КОГДА Задолженность.НаправлениеДеятельности.УчетРасчетовСПоставщиками 
	|			ТОГДА Задолженность.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	// Ресурсы
	|	-ВЫБОР КОГДА Задолженность.Сумма <= ОстаткиРезервов.Сумма
	|		ТОГДА Задолженность.Сумма
	|		ИНАЧЕ ОстаткиРезервов.Сумма
	|	КОНЕЦ КАК Сумма,
	|	-ВЫБОР КОГДА Задолженность.Сумма <= ОстаткиРезервов.Сумма
	|		ТОГДА Задолженность.Сумма
	|		ИНАЧЕ ОстаткиРезервов.Сумма
	|	КОНЕЦ КАК КОплате,
	|	
	|	-ВЫБОР КОГДА Задолженность.СуммаРегл <= ОстаткиРезервов.СуммаРегл
	|		ТОГДА Задолженность.СуммаРегл
	|		ИНАЧЕ ОстаткиРезервов.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	-ВЫБОР КОГДА Задолженность.СуммаУпр <= ОстаткиРезервов.СуммаУпр
	|		ТОГДА Задолженность.СуммаУпр
	|		ИНАЧЕ ОстаткиРезервов.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)	КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации,
	|	4 КАК Вид
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		Задолженность.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И Задолженность.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И Задолженность.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И Задолженность.Договор = РегистрАналитикаУчетаПоПартнерам.Договор  
	|		И Задолженность.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|	И Задолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Номер КАК НомерРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Договор КАК Договор,
	|	ВЫБОР 
	|		КОГДА Задолженность.НаправлениеДеятельности.УчетРасчетовСПоставщиками 
	|			ТОГДА Задолженность.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	// Ресурсы
	|	-ВЫБОР КОГДА Задолженность.Сумма <= ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|	КОНЕЦ КАК Сумма,
	|	-ВЫБОР КОГДА Задолженность.Сумма <= ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|	КОНЕЦ КАК КОплате,
	|	
	|	-ВЫБОР КОГДА Задолженность.СуммаРегл <= ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаРегл - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)
	|	КОНЕЦ КАК СуммаРегл,
	|	-ВЫБОР КОГДА Задолженность.СуммаУпр <= ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0)
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаУпр - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0)
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)	КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеДебиторскойЗадолженности) КАК НастройкаХозяйственнойОперации,
	|	4 КАК Вид
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		Задолженность.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И Задолженность.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И Задолженность.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И Задолженность.Договор = РегистрАналитикаУчетаПоПартнерам.Договор  
	|		И Задолженность.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|	И Задолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	И (Задолженность.Сумма > ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)
	|		ИЛИ Задолженность.СуммаРегл > ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)
	|		ИЛИ Задолженность.СуммаУпр > ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0))
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяДоходов КАК СтатьяДоходов,
	|	&АналитикаДоходов КАК АналитикаДоходов,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	
	|	Задолженность.СуммаУпр КАК Сумма,
	|	ВЫБОР КОГДА НЕ &УправленческийУчетОрганизаций
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКредиторскойЗадолженности) КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И &СтатьяДоходов <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задолженность.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ОстаткиРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, Задолженность.СуммаУпр) - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаСНДС,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, Задолженность.СуммаУпр) - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, Задолженность.СуммаУпр) - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаБезНДСУпр,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Задолженность.СуммаРегл) - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0) КАК СуммаСНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Задолженность.СуммаРегл) - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0) КАК СуммаБезНДСРегл,
	|	-ЕСТЬNULL(ОстаткиРезервов.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
	|	-ЕСТЬNULL(ОстаткиРезервов.ВременнаяРазница, 0) КАК ВременнаяРазница,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеДебиторскойЗадолженности) КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|		ПО Статья.Ссылка = &СтатьяРасходов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Ссылка = &Ссылка
	|		И Задолженность.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|	И &СтатьяРасходов <> НЕОПРЕДЕЛЕНО
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	#Область СписаниеДебиторскойЗадолженности
	СписаниеДебиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                  КАК Статья,
	|	&АналитикаАктивовПассивов               КАК Аналитика,
	|	Задолженность.СуммаУпр                  КАК Сумма
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|";
	#КонецОбласти

	#Область СписаниеКредиторскойЗадолженности
	СписаниеКредиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                  КАК Статья,
	|	&АналитикаАктивовПассивов               КАК Аналитика,
	|	Задолженность.СуммаУпр                  КАК Сумма
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО";
	#КонецОбласти
	
	ТекстЗапроса = СписаниеКредиторскойЗадолженности
		+ " ОБЪЕДИНИТЬ ВСЕ " + СписаниеДебиторскойЗадолженности;
	
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ"
		+ РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы(Ложь);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	#Область СписаниеДебиторскойЗадолженности
	СписаниеДебиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                               КАК Период,
	|	&Организация                          КАК Организация,
	|	&Подразделение                        КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                КАК Статья,
	|	&АналитикаАктивовПассивов             КАК Аналитика,
	//++ НЕ УТ
	|	&НастройкаСчетовУчета                 КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	Задолженность.СуммаРегл               КАК СуммаРегл,
	|	Задолженность.СуммаУпр                КАК СуммаУпр,
	|	Задолженность.СуммаУпр                КАК СуммаСНДС,
	|	Задолженность.СуммаУпр                КАК СуммаБезНДС,
	|
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеДебиторскойЗадолженности) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|";
	#КонецОбласти

	#Область СписаниеКредиторскойЗадолженности
	СписаниеКредиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                               КАК Период,
	|	&Организация                          КАК Организация,
	|	&Подразделение                        КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                КАК Статья,
	|	&АналитикаАктивовПассивов             КАК Аналитика,
	//++ НЕ УТ
	|	&НастройкаСчетовУчета                 КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	Задолженность.СуммаРегл               КАК СуммаРегл,
	|	Задолженность.СуммаУпр                КАК СуммаУпр,
	|	Задолженность.СуммаУпр                КАК СуммаСНДС,
	|	Задолженность.СуммаУпр                КАК СуммаБезНДС,
	|
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКредиторскойЗадолженности) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО";
	#КонецОбласти
	
	ТекстЗапроса = СписаниеКредиторскойЗадолженности
		+ " ОБЪЕДИНИТЬ ВСЕ " + СписаниеДебиторскойЗадолженности;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных =
	"ВЫБРАТЬ
	|	""Задолженность"" КАК ИсточникДанных,
	|	ЛОЖЬ КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ПериодБазыНДС,
	|
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Сумма КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ТаблицаДокумента.Сумма КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов,
	|
	|	ИСТИНА КАК ОтражаетсяВРасчетах,
	|	ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ТаблицаДокумента.Ссылка.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|				И ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ИЛИ ТаблицаДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|				И ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.СписаниеЗадолженности.Задолженность КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(
		Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);

КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("РаспределениеРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
#Область СписаниеКредиторскойЗадолженности
	СписаниеКредиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	ВЫБОР КОГДА &РасчетыМеждуОрганизациями
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ Задолженность.Партнер
	|	КОНЕЦ КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов) В(
	//++ НЕ УТ
	|					ТИП(Справочник.ДоговорыАренды),
	//-- НЕ УТ
	|					ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|		ТОГДА Задолженность.ОбъектРасчетов
	|		ИНАЧЕ Задолженность.ОбъектРасчетов.Договор
	|	КОНЕЦ КАК Договор,
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ВЫБОР 
	|		КОГДА &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &СтатьяАктивовПассивов
	|		ИНАЧЕ &СтатьяДоходов
	|	КОНЕЦ КАК СтатьяДоходовРасходов,
	|	&АналитикаДоходов КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	&АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	СУММА(Задолженность.СуммаУпр) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	СУММА(Задолженность.СуммаРегл) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(Задолженность.Сумма) КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(Задолженность.Сумма) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	Задолженность.ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	ВЫБОР КОГДА &РасчетыМеждуОрганизациями
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ Задолженность.Партнер
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов) В(
	//++ НЕ УТ
	|					ТИП(Справочник.ДоговорыАренды),
	//-- НЕ УТ
	|					ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|		ТОГДА Задолженность.ОбъектРасчетов
	|		ИНАЧЕ Задолженность.ОбъектРасчетов.Договор
	|	КОНЕЦ,
	|	Задолженность.ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов,
	|	Задолженность.НаправлениеДеятельности,
	|	Задолженность.ИдентификаторСтроки
	|";
#КонецОбласти

#Область СписаниеДебиторскойЗадолженности
	СписаниеДебиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	ВЫБОР КОГДА &РасчетыМеждуОрганизациями
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ Задолженность.Партнер
	|	КОНЕЦ КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов) В(
	//++ НЕ УТ
	|					ТИП(Справочник.ДоговорыАренды),
	//-- НЕ УТ
	|					ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|		ТОГДА Задолженность.ОбъектРасчетов
	|		ИНАЧЕ Задолженность.ОбъектРасчетов.Договор
	|	КОНЕЦ КАК Договор,
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ВЫБОР 
	|		КОГДА &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &СтатьяАктивовПассивов
	|		ИНАЧЕ &СтатьяРасходов
	|	КОНЕЦ КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	&АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	СУММА(Задолженность.СуммаУпр - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0)) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	СУММА(Задолженность.СуммаРегл - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0)) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,

	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)) КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,

	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(Задолженность.Сумма- ЕСТЬNULL(ОстаткиРезервов.Сумма, 0)) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	Задолженность.ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	ВЫБОР КОГДА &РасчетыМеждуОрганизациями
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ Задолженность.Партнер
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов) В(
	//++ НЕ УТ
	|					ТИП(Справочник.ДоговорыАренды),
	//-- НЕ УТ
	|					ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|		ТОГДА Задолженность.ОбъектРасчетов
	|		ИНАЧЕ Задолженность.ОбъектРасчетов.Договор
	|	КОНЕЦ,
	|	Задолженность.ОбъектРасчетов,
	|	Задолженность.ВалютаВзаиморасчетов,
	|	Задолженность.НаправлениеДеятельности,
	|	Задолженность.ИдентификаторСтроки";
#КонецОбласти

	ТекстЗапроса = СписаниеКредиторскойЗадолженности
		+ " ОБЪЕДИНИТЬ ВСЕ " + СписаниеДебиторскойЗадолженности;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентКонтрагент";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("РаспределениеРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
        ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
    КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	&Организация КАК Контрагент,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов) В(
	//++ НЕ УТ
	|					ТИП(Справочник.ДоговорыАренды),
	//-- НЕ УТ
	|					ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|		ТОГДА Задолженность.ОбъектРасчетов
	|		ИНАЧЕ Задолженность.ОбъектРасчетов.Договор
	|	КОНЕЦ КАК Договор,
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	
	|	Задолженность.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ВЫБОР КОГДА &РасчетыМеждуОрганизациями
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ Задолженность.Партнер
	|	КОНЕЦ КАК КорПартнер,
	|	&Контрагент КАК КорКонтрагент,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов) В(
	//++ НЕ УТ
	|					ТИП(Справочник.ДоговорыАренды),
	//-- НЕ УТ
	|					ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|		ТОГДА Задолженность.ОбъектРасчетов
	|		ИНАЧЕ Задолженность.ОбъектРасчетов.Договор
	|	КОНЕЦ КАК КорДоговор,
	|	Задолженность.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	
	|	ОстаткиРезервов.СуммаУпр КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ОстаткиРезервов.СуммаРегл КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	Задолженность.ВалютаВзаиморасчетов КАК Валюта,
	|	ОстаткиРезервов.Сумма КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОстаткиРезервов.Сумма КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	Задолженность.ВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	ОстаткиРезервов.Сумма КАК КорСуммаВВалютеВзаиморасчетов,
	|	0 КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	Задолженность.ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|	Задолженность.ОбъектРасчетов КАК КорИсточникГФУРасчетов
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса)
	
	// Распределяем табличную часть документа списание резервов, данные из регистров взаиморасчетов
	// и остатки из регистра резервов. В итоге добавляем к текстам запроса 2 временные таблицы:
	//  - ОстаткиРезервовПоСомнительнымДолгам - в разрезе Идентификаторов строк табличной части (используется для Прочих расходов)
	//  - РаспределениеРезервовПоСомнительнымДолгам - в разрезе Расчетных документов и Идентификаторов строк (используется для Резервов)
	
	СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	
	ВспомогательныйЗапрос = Новый Запрос;
	ВспомогательныйЗапрос.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Для Каждого Параметр Из Запрос.Параметры Цикл
		ВспомогательныйЗапрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ВспомогательныйЗапрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	#Область ТекстЗапросаРаспределениеРасчетовПоИдентификаторамСтрок
	
	ВспомогательныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент,
	|	СУММА(Расчеты.Долг * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Расчеты.ДолгРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаРегл,
	|	СУММА(Расчеты.ДолгУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаУпр
	|ПОМЕСТИТЬ вт_Расчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Ссылка
	|	И Расчеты.Активность
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Долг * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент,
	|	СУММА(Расчеты.Долг * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Расчеты.ДолгРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаРегл,
	|	СУММА(Расчеты.ДолгУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.ДокументРегистратор = &Ссылка
	|	И Расчеты.Активность
	|	И &НоваяАрхитектураВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Долг * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаРегл,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Ссылка
	|	И Расчеты.Активность
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаРегл,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.ДокументРегистратор = &Ссылка
	|	И Расчеты.Активность
	|	И &НоваяАрхитектураВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_Расчеты.АналитикаУчетаПоПартнерам,
	|	вт_Расчеты.ОбъектРасчетов,
	|	вт_Расчеты.Валюта,
	|	вт_Расчеты.РасчетныйДокумент
	|ПОМЕСТИТЬ вт_АналитикаРезервовПоСомнительнымДолгам
	|ИЗ
	|	вт_Расчеты КАК вт_Расчеты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Расчеты.АналитикаУчетаПоПартнерам,
	|	вт_Расчеты.ОбъектРасчетов,
	|	вт_Расчеты.Валюта,
	|	вт_Расчеты.РасчетныйДокумент,
	|	вт_Расчеты.Сумма,
	|	вт_Расчеты.СуммаРегл,
	|	вт_Расчеты.СуммаУпр
	|ИЗ
	|	вт_Расчеты КАК вт_Расчеты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.ИдентификаторСтроки,
	|	Задолженность.Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0) КАК СуммаУпр,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0) КАК СуммаРегл
	|ИЗ
	|	Документ.СписаниеЗадолженности.Задолженность КАК Задолженность
	|	
	|	// Уточнение сумм в валюте регл и упр
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		&Ссылка = Суммы.Ссылка
	|		И Задолженность.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	#КонецОбласти
	
	РезультатПакета = ВспомогательныйЗапрос.ВыполнитьПакет();
	
	ТаблицаРасчеты = РезультатПакета[2].Выгрузить();
	ТаблицаРасчеты.Индексы.Добавить("ОбъектРасчетов");
	ТаблицаЗадолженность = РезультатПакета[3].Выгрузить();
	
	ТаблицаРасчетныеДокументы = ТаблицаРасчеты.СкопироватьКолонки();
	ТаблицаРасчетныеДокументы.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
	ТаблицаРаспределения = ТаблицаРасчетныеДокументы.СкопироватьКолонки();
	ТаблицаРаспределения.Колонки.Добавить("ВременнаяРазница", Новый ОписаниеТипов("Число"));
	ТаблицаРаспределения.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число"));
	
	Если Не ТаблицаЗадолженность.Количество() = 0 Тогда
		
		// Распределяем таблицу расчетов по идентификаторам строк таблицы задолженности.
		
		Для Каждого СтрокаЗадолженность Из ТаблицаЗадолженность Цикл
			СтруктураПоиска = Новый Структура("ОбъектРасчетов", СтрокаЗадолженность.ОбъектРасчетов);
			НайденныеСтроки = ТаблицаРасчеты.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаРасчеты Из НайденныеСтроки Цикл
				Если СтрокаЗадолженность.Сумма = 0 И СтрокаЗадолженность.СуммаРегл = 0 И СтрокаЗадолженность.СуммаУпр = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаРасчеты.Сумма = 0 И СтрокаРасчеты.СуммаРегл = 0 И СтрокаРасчеты.СуммаУпр = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Сумма = Мин(СтрокаЗадолженность.Сумма, СтрокаРасчеты.Сумма);
				СуммаУпр = Мин(СтрокаЗадолженность.СуммаУпр, СтрокаРасчеты.СуммаУпр);
				СуммаРегл = Мин(СтрокаЗадолженность.СуммаРегл, СтрокаРасчеты.СуммаРегл);
				
				НоваяСтрока = ТаблицаРасчетныеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчеты,, "Сумма,СуммаУпр,СуммаРегл");
				НоваяСтрока.ИдентификаторСтроки = СтрокаЗадолженность.ИдентификаторСтроки;
				НоваяСтрока.Сумма = Сумма;
				НоваяСтрока.СуммаУпр = СуммаУпр;
				НоваяСтрока.СуммаРегл = СуммаРегл;
				
				СтрокаЗадолженность.Сумма = СтрокаЗадолженность.Сумма - Сумма;
				СтрокаЗадолженность.СуммаУпр = СтрокаЗадолженность.СуммаУпр - СуммаУпр;
				СтрокаЗадолженность.СуммаРегл = СтрокаЗадолженность.СуммаРегл - СуммаРегл;
				
				СтрокаРасчеты.Сумма = СтрокаРасчеты.Сумма - Сумма;
				СтрокаРасчеты.СуммаУпр = СтрокаРасчеты.СуммаУпр - СуммаУпр;
				СтрокаРасчеты.СуммаРегл = СтрокаРасчеты.СуммаРегл - СуммаРегл;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	//++НЕ УТ
	
	// Блокируем регистр накопления "Резервы по сомнительным долгам" по Аналитике учета по партнерам, Объекту расчетов и Валюте.
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.РезервыПоСомнительнымДолгам");
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировкиДанных.ИсточникДанных = ТаблицаРасчетныеДокументы;
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("АналитикаУчетаПоПартнерам", "АналитикаУчетаПоПартнерам");
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ОбъектРасчетов", "ОбъектРасчетов");
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Валюта", "Валюта");
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("РасчетныйДокумент", "РасчетныйДокумент");
	БлокировкаДанных.Заблокировать();
	
	#Область ТекстЗапросаОстаткиРезервовПоСомнительнымДолгам
	
	ВспомогательныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиРезервов.АналитикаУчетаПоПартнерам,
	|	ОстаткиРезервов.ОбъектРасчетов,
	|	ОстаткиРезервов.Валюта,
	|	ОстаткиРезервов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	
	|	-ОстаткиРезервов.СуммаОстаток КАК Сумма,
	|	-ОстаткиРезервов.СуммаРеглОстаток КАК СуммаРегл,
	|	-ОстаткиРезервов.СуммаУпрОстаток КАК СуммаУпр,
	|	-ОстаткиРезервов.ВременнаяРазницаОстаток КАК ВременнаяРазница,
	|	-ОстаткиРезервов.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|ИЗ
	|	РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(&МоментВремени) КАК ОстаткиРезервов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		вт_АналитикаРезервовПоСомнительнымДолгам КАК вт_АналитикаРезервовПоСомнительнымДолгам
	|	ПО
	|		ОстаткиРезервов.АналитикаУчетаПоПартнерам = вт_АналитикаРезервовПоСомнительнымДолгам.АналитикаУчетаПоПартнерам
	|		И ОстаткиРезервов.ОбъектРасчетов = вт_АналитикаРезервовПоСомнительнымДолгам.ОбъектРасчетов
	|		И ОстаткиРезервов.Валюта = вт_АналитикаРезервовПоСомнительнымДолгам.Валюта
	|		И ОстаткиРезервов.РасчетныйДокумент = вт_АналитикаРезервовПоСомнительнымДолгам.РасчетныйДокумент
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)";
	
	#КонецОбласти
	
	ТаблицаОстаткиРезервов = ВспомогательныйЗапрос.Выполнить().Выгрузить();
	ТаблицаОстаткиРезервов.Индексы.Добавить("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,РасчетныйДокумент");
	
	Если Не ТаблицаОстаткиРезервов.Количество() = 0 Тогда
		
		// Распределяем полученную таблицу расчетных документов по таблице остатков резервов.
		
		Для Каждого СтрокаРасчетныеДокументы Из ТаблицаРасчетныеДокументы Цикл
			СтруктураПоиска = Новый Структура("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,РасчетныйДокумент");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасчетныеДокументы);
			
			НайденныеСтроки = ТаблицаОстаткиРезервов.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОстаткиРезервов Из НайденныеСтроки Цикл
				Если СтрокаРасчетныеДокументы.Сумма = 0 И СтрокаРасчетныеДокументы.СуммаРегл = 0 И СтрокаРасчетныеДокументы.СуммаУпр = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаОстаткиРезервов.Сумма = 0 И СтрокаОстаткиРезервов.СуммаРегл = 0 И СтрокаОстаткиРезервов.СуммаУпр = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Сумма = Мин(СтрокаРасчетныеДокументы.Сумма, СтрокаОстаткиРезервов.Сумма);
				СуммаУпр = Мин(СтрокаРасчетныеДокументы.СуммаУпр, СтрокаОстаткиРезервов.СуммаУпр);
				СуммаРегл = Мин(СтрокаРасчетныеДокументы.СуммаРегл, СтрокаОстаткиРезервов.СуммаРегл);
				
				НоваяСтрока = ТаблицаРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиРезервов,, "Сумма,СуммаУпр,СуммаРегл");
				НоваяСтрока.ИдентификаторСтроки = СтрокаРасчетныеДокументы.ИдентификаторСтроки;
				НоваяСтрока.Сумма = Сумма;
				НоваяСтрока.СуммаУпр = СуммаУпр;
				НоваяСтрока.СуммаРегл = СуммаРегл;
				НоваяСтрока.ВременнаяРазница = Мин(СуммаРегл, СтрокаОстаткиРезервов.ВременнаяРазница);
				НоваяСтрока.ПостояннаяРазница = Мин(СуммаРегл, СтрокаОстаткиРезервов.ПостояннаяРазница);
				
				СтрокаРасчетныеДокументы.Сумма = СтрокаРасчетныеДокументы.Сумма - Сумма;
				СтрокаРасчетныеДокументы.СуммаУпр = СтрокаРасчетныеДокументы.СуммаУпр - СуммаУпр;
				СтрокаРасчетныеДокументы.СуммаРегл = СтрокаРасчетныеДокументы.СуммаРегл - СуммаРегл;
				
				СтрокаОстаткиРезервов.Сумма = СтрокаОстаткиРезервов.Сумма - Сумма;
				СтрокаОстаткиРезервов.СуммаУпр = СтрокаОстаткиРезервов.СуммаУпр - СуммаУпр;
				СтрокаОстаткиРезервов.СуммаРегл = СтрокаОстаткиРезервов.СуммаРегл - СуммаРегл;
				СтрокаОстаткиРезервов.ВременнаяРазница = СтрокаОстаткиРезервов.ВременнаяРазница - НоваяСтрока.ВременнаяРазница;
				СтрокаОстаткиРезервов.ПостояннаяРазница = СтрокаОстаткиРезервов.ПостояннаяРазница - НоваяСтрока.ПостояннаяРазница;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	//--НЕ УТ
	
	Запрос.УстановитьПараметр("РаспределениеРезервовПоСомнительнымДолгам", ТаблицаРаспределения);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.АналитикаУчетаПоПартнерам,
	|	Т.ОбъектРасчетов,
	|	Т.Валюта,
	|	Т.РасчетныйДокумент,
	|	Т.ИдентификаторСтроки,
	|	Т.Сумма,
	|	Т.СуммаУпр,
	|	Т.СуммаРегл,
	|	Т.ВременнаяРазница,
	|	Т.ПостояннаяРазница
	|ПОМЕСТИТЬ РаспределениеРезервовПоСомнительнымДолгам
	|ИЗ
	|	&РаспределениеРезервовПоСомнительнымДолгам КАК Т";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "РаспределениеРезервовПоСомнительнымДолгам");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.ИдентификаторСтроки,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(Т.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Т.СуммаРегл) КАК СуммаРегл,
	|	СУММА(Т.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(Т.ПостояннаяРазница) КАК ПостояннаяРазница
	|ПОМЕСТИТЬ ОстаткиРезервовПоСомнительнымДолгам
	|ИЗ
	|	РаспределениеРезервовПоСомнительнымДолгам КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.ИдентификаторСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОстаткиРезервовПоСомнительнымДолгам");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРезервыПоСомнительнымДолгам(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "РезервыПоСомнительнымДолгам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("РаспределениеРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	РаспределениеРезервов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РаспределениеРезервов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РаспределениеРезервов.Валюта КАК Валюта,
	|	РаспределениеРезервов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
	|	
	|	РаспределениеРезервов.Сумма КАК Сумма,
	|	РаспределениеРезервов.СуммаУпр КАК СуммаУпр,
	|	РаспределениеРезервов.СуммаРегл КАК СуммаРегл,
	|	РаспределениеРезервов.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РаспределениеРезервов.ВременнаяРазница КАК ВременнаяРазница,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	РаспределениеРезервов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	РаспределениеРезервов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	РаспределениеРезервовПоСомнительнымДолгам КАК РаспределениеРезервов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	&Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК РазделительЗаписи,
	|	"""" КАК Дополнительно,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&Номер КАК НомерПервичногоДокумента,
	|	&Исправление КАК СторноИсправление,
	|	&СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	&Период КАК ДатаОтраженияВУчете
	|ИЗ
	|	Документ.СписаниеЗадолженности КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = ПустаяСсылка().Метаданные().ПолноеИмя();
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;

	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,,);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.СписаниеЗадолженности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.312";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f0dfdafb-52dc-4ab1-a712-bf18066baeb0");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СписаниеЗадолженности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Объект расчетов"".
	|Заполняет реквизит ""Настройка счетов учета"".';
	|en = 'Populates the ""AR/AP object"" attribute.
	|Populates the ""Ledger account settings"" attribute.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыУПоставщика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупТоваровХранителем.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионера.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионераОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитентуОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОператораСистемыПлатон.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетДавальцу.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТКА

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "Организация");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "Контрагент");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "Задолженность.УдалитьЗаказ");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "Задолженность.Партнер");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеЗадолженности.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеЗадолженности КАК СписаниеЗадолженности
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.СписаниеЗадолженности.Задолженность КАК ТЧЗадолженность
	|			ГДЕ
	|				ТЧЗадолженность.Ссылка = СписаниеЗадолженности.Ссылка
	|				И (ТЧЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|					ИЛИ ТЧЗадолженность.ОбъектРасчетов = НЕОПРЕДЕЛЕНО))
	//++ НЕ УТ
	|	ИЛИ (СписаниеЗадолженности.УдалитьСчетУчета <> &СчетУчетаПустаяСсылка И 
	|		СписаниеЗадолженности.НастройкаСчетовУчета = ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка))
	//-- НЕ УТ
	|";
	
	//++ НЕ УТ
	Запрос.УстановитьПараметр("СчетУчетаПустаяСсылка", РеглУчетКлиентСервер.СсылкаПланСчетов());
	//-- НЕ УТ
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено Тогда

				ГотовКЗаполнению = Истина;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ОбъектыРасчетов.Ссылка      КАК ОбъектРасчетов,
					|	ОбъектыРасчетов.ТипРасчетов КАК ТипРасчетов,
					|	ОбъектыРасчетов.Объект      КАК Заказ
					|ИЗ
					|	Документ.СписаниеЗадолженности.Задолженность КАК СписаниеЗадолженностиЗадолженность
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры 
					|			ПО СписаниеЗадолженностиЗадолженность.УдалитьЗаказ = Договоры.Ссылка 
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
					|			ПО СписаниеЗадолженностиЗадолженность.УдалитьЗаказ = ОбъектыРасчетов.Объект
					|				И &Организация = ОбъектыРасчетов.Организация
					|				И ВЫБОР
					|					КОГДА ТИПЗНАЧЕНИЯ(СписаниеЗадолженностиЗадолженность.УдалитьЗаказ) = ТИП(Справочник.ДоговорыКонтрагентов)
					|						И Договоры.РазрешенаРаботаСДочернимиПартнерами
					|							ТОГДА Договоры.Партнер
					|					ИНАЧЕ СписаниеЗадолженностиЗадолженность.Партнер
					|				КОНЕЦ = ОбъектыРасчетов.Партнер
					|				И СписаниеЗадолженностиЗадолженность.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
					|				И СписаниеЗадолженностиЗадолженность.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
					|				И &Контрагент = ОбъектыРасчетов.Контрагент
					|ГДЕ
					|	СписаниеЗадолженностиЗадолженность.Ссылка = &Ссылка
					|	И НЕ СписаниеЗадолженностиЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчетов)
					|	";
				
				Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
				Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
				Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
				Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
				
				ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();
				ОбъектыРасчетов.Индексы.Добавить("Заказ");
				Для Каждого СтрокаТЧ Из ДокументОбъект.Задолженность Цикл
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
						Если ЗначениеЗаполнено(СтрокаТЧ.УдалитьЗаказ) Тогда
							Если ТипЗнч(СтрокаТЧ.УдалитьЗаказ) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")
								//++ НЕ УТ
								Или ТипЗнч(СтрокаТЧ.УдалитьЗаказ) = Тип("СправочникСсылка.ДоговорыАренды")
								//-- НЕ УТ
								Тогда
									СтрокаТЧ.ОбъектРасчетов = СтрокаТЧ.УдалитьЗаказ;
							Иначе
								Отбор = Новый Структура("Заказ, ТипРасчетов", СтрокаТЧ.УдалитьЗаказ, СтрокаТЧ.ТипРасчетов);
								НайденныеСтроки = ОбъектыРасчетов.НайтиСтроки(Отбор);
								Если НайденныеСтроки.Количество() = 1 Тогда
									Если ЗначениеЗаполнено(НайденныеСтроки[0].ОбъектРасчетов) Тогда
										СтрокаТЧ.ОбъектРасчетов = НайденныеСтроки[0].ОбъектРасчетов;
									Иначе
										Если ОбъектыРасчетовСервер.ОбъектГотовКЗаполнению(
											СтрокаТЧ.ОбъектРасчетов,
											СтрокаТЧ.УдалитьЗаказ,
											ГотовКЗаполнению) И ДокументОбъект.Проведен Тогда
										
											ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Не найден объект расчетов для источника данных: %1 в документе: %2';
													|en = 'Cannot find AR/AP object for data source: %1 in the document: %2'"),
												СтрокаТЧ.УдалитьЗаказ,
												ДокументОбъект.Ссылка));
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПараметрыПоиска = ОбъектыРасчетовСервер.ПолучитьПараметрыОбъектаРасчетов();
							ПараметрыПоиска.ТипРасчетов             = СтрокаТЧ.ТипРасчетов;
							ПараметрыПоиска.Организация             = ДокументОбъект.Организация;
							ПараметрыПоиска.Партнер                 = СтрокаТЧ.Партнер;
							ПараметрыПоиска.Контрагент              = ДокументОбъект.Контрагент;
							ПараметрыПоиска.Договор                 = ?(СтрокаТЧ.Партнер = Справочники.Партнеры.НашеПредприятие,
								Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка(),
								Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
							
							ПараметрыПоиска.Вставить("ВалютаВзаиморасчетов", СтрокаТЧ.ВалютаВзаиморасчетов);
							
							СтрокаТЧ.ОбъектРасчетов = ОбъектыРасчетовСервер.НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыПоиска);
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				//++ НЕ УТ
				НастройкаСчетовУчетаСервер.ЗаполнитьНастройкиСчетовУчета(ДокументОбъект);
				//-- НЕ УТ
			КонецЕсли;
			
			Если Не ГотовКЗаполнению Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект = Неопределено
				Или Не ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ТекстЗапросаРегистрацияДанныхДляГенерацииПустогоОбъектаРасчетов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписаниеЗадолженности.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.СписаниеЗадолженности  КАК СписаниеЗадолженности 
	|ГДЕ
	|	СписаниеЗадолженности.Проведен
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.СписаниеЗадолженности.Задолженность КАК Задолженность
	|		ГДЕ
	|			СписаниеЗадолженности.Ссылка = Задолженность.Ссылка
	|			И Задолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
	|			И (Задолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ИЛИ Задолженность.ОбъектРасчетов = НЕОПРЕДЕЛЕНО))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолучениеДанныхДляГенерацииПустогоОбъектаРасчетов() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ИсточникДанных.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.РасчетыМеждуОрганизациями
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ ТЧЗадолженность.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ИсточникДанных.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТЧЗадолженность.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправленияДеятельности,
	|	ТЧЗадолженность.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.СписаниеЗадолженности.Задолженность КАК ТЧЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеЗадолженности КАК ИсточникДанных
	|		ПО ТЧЗадолженность.Ссылка = ИсточникДанных.Ссылка
	|ГДЕ
	|	ТЧЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
	|	И ИсточникДанных.Проведен
	|	И ИсточникДанных.Контрагент В (&ОбрабатываемыеДанные)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
