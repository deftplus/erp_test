#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущийКонтрагент;
&НаКлиенте
Перем ПредыдущаяОрганизация;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	
	ТипРасчетовРасчетыСКлиентом = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	УстановитьВидимостьПолей();
	УстановитьТипКонтрагента();
	УстановитьВидимостьСтраницПодвала();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.СписаниеЗадолженности.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	//++ НЕ УТ
	ПараметрыНастройки = Документы.СписаниеЗадолженности.ПараметрыНастройкиСчетовУчета(Объект.ХозяйственнаяОперация);
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если Объект.Исправление Тогда
		Элементы.ЗадолженностьКомандаЗаполнитьПоОстаткам.Видимость = Ложь;
	КонецЕсли;
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаКлиенте
Процедура  ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_СписаниеЗадолженности", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//++ НЕ УТ
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//-- НЕ УТ
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ПараметрыВыбораСтатейИАналитик = Документы.СписаниеЗадолженности.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	//++ НЕ УТ
	ПараметрыНастройки = Документы.СписаниеЗадолженности.ПараметрыНастройкиСчетовУчета(Объект.ХозяйственнаяОперация);
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	//++ НЕ УТ
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	//-- НЕ УТ
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ПредыдущийКонтрагент = Объект.Контрагент;
	ПредыдущаяОрганизация = Объект.Организация;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.Задолженность.Количество()>0;
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("ОрганизацияПриИзмененииНужноТЧОчищатьВопросЗавершение", ЭтотОбъект),
		ЕстьСтроки);
		
КонецПроцедуры

&НаКлиенте 
Процедура ОрганизацияПриИзмененииНужноТЧОчищатьВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.Организация = ПредыдущаяОрганизация;
	Иначе
		Объект.Задолженность.Очистить();
		ЗаполнитьРеквизитыПоСтатистике();
		ПредыдущаяОрганизация = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыМеждуОрганизациямиПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.Задолженность.Количество()>0;
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("РасчетыМеждуОрганизациямиНужноТЧОчищатьВопросЗавершение", ЭтотОбъект),
		ЕстьСтроки);

КонецПроцедуры

&НаКлиенте 
Процедура РасчетыМеждуОрганизациямиНужноТЧОчищатьВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.РасчетыМеждуОрганизациями = Не Объект.РасчетыМеждуОрганизациями;
	Иначе
		Объект.Задолженность.Очистить();
		ЗаполнитьРеквизитыПоСтатистике();
		РасчетыМеждуОрганизациямиПриИзмененииНаСервере();
		ПредыдущийКонтрагент = Объект.Контрагент;
		ПредыдущаяОрганизация = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.Задолженность.Количество()>0;
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентПриИзмененииНужноТЧОчищатьВопросЗавершение", ЭтотОбъект),
		ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииНужноТЧОчищатьВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.Контрагент = ПредыдущийКонтрагент;
	Иначе
		Объект.Задолженность.Очистить();
		ЗаполнитьПартнера();
		ПредыдущийКонтрагент = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	СтатьяДоходовРасходовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	СтатьяДоходовРасходовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияРасходовВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияДоходовВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
		ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
			ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженность

&НаКлиенте
Процедура ЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Задолженность.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			ЗаполнитьПартнера();
		КонецЕсли;
		
		СтрокаТаблицы.Партнер = Партнер;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьТипРасчетовПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Задолженность.ТекущиеДанные;
	СтрокаТаблицы.ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	СтрокаТаблицы = Элементы.Задолженность.ТекущиеДанные;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", СтрокаТаблицы.ТипРасчетов);
	ЗначенияОтбора.Вставить("Организация", Объект.Организация);
	ЗначенияОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , Ложь);
	
	Если ТипЗнч(ЗначенияОтбора.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	Иначе
		ЗначенияОтбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("ВыборОснованияПлатежа", Ложь);
	НастройкиВыбора.Вставить("РедактируемыйДокумент", Объект.Ссылка);
	НастройкиВыбора.Вставить("Сумма", 0);
	НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", ?(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности"),
																Истина,
																Ложь));
	НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
	НастройкиВыбора.Вставить("ТекущаяСтрока", СтрокаТаблицы.ОбъектРасчетов);
	
	ОткрытьФорму("Справочник.ОбъектыРасчетов.ФормаВыбора", НастройкиВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.Задолженность.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
		ЗадолженностьЗаказОбработкаВыбораНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьОбъектРасчетовПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры


&НаСервере
Процедура ЗадолженностьЗаказОбработкаВыбораНаСервере()
	УстановитьВидимостьСтраницПодвала();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// Функция используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьПоОстаткам(Команда) Экспорт
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть = Объект.Задолженность;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация",           НСтр("ru = 'Организация';
																					|en = 'Company'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Контрагент",            НСтр("ru = 'Контрагент';
																					|en = 'Counterparty'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("ХозяйственнаяОперация", НСтр("ru = 'Списание';
																					|en = 'Write-off'"));
	Оповещение = Новый ОписаниеОповещения("АвтоТест_ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьЗадолженностьПоОстаткамСервер();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьВидимостьПолей();
	УстановитьТипКонтрагента();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.СтраницаРасходы.Заголовок = НСтр("ru = 'Расходы';
													|en = 'Expenses'");
		Элементы.СтраницаДоходы.Заголовок = НСтр("ru = 'Доходы';
												|en = 'Income'");
	КонецЕсли;
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ЗаполнитьРеквизитыПоСтатистике();
	
	ПараметрыВыбораСтатей = Документы.СписаниеЗадолженности.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриИзмененииПараметровВыбораСтатей(ЭтаФорма, ПараметрыВыбораСтатей);
	
	//++ НЕ УТ
	ПараметрыНастройки = Документы.СписаниеЗадолженности.ПараметрыНастройкиСчетовУчета(Объект.ХозяйственнаяОперация);
	НастройкаСчетовУчетаСервер.ПриИзмененииПараметровНастройки(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	УстановитьВидимостьПолей();
	
КонецПроцедуры

&НаСервере
Процедура РасчетыМеждуОрганизациямиПриИзмененииНаСервере()
	
	УстановитьТипКонтрагента();
	ЗаполнитьРеквизитыПоСтатистике();
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовРасходовПриИзмененииСервер(ИмяЭлемента)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы[ИмяЭлемента]);
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаСервере
Процедура ЗаполнитьПартнера()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	КонецЕсли;
	ЗаполнитьРеквизитыПоСтатистике();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗадолженностьПоОстаткамСервер()
	
	Если НЕ ВзаиморасчетыСервер.ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(Истина) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Заполнение документа недоступно, т.к. не завершено обновление системы.';
				|en = 'Cannot fill out the document as the system update is not completed.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности Тогда
		ТипЗадолженности = Перечисления.ТипыЗадолженности.Кредиторская;
	Иначе
		ТипЗадолженности = Перечисления.ТипыЗадолженности.Дебиторская;
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткам(
		Объект.Организация, 
		Объект.Контрагент,
		ТипЗадолженности, 
		Неопределено, //ТипРасчетов
		Объект.Дата,
		Неопределено, // Валюта,
		Объект.Задолженность);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьТипКонтрагента()
	Элементы.Контрагент.ОграничениеТипа = ?(Объект.РасчетыМеждуОрганизациями,ТипСсылкаОрганизации,ТипСсылкаКонтрагенты);
	Элементы.ЗадолженностьПартнер.Видимость = Не Объект.РасчетыМеждуОрганизациями;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолей()
	
	Элементы.СтраницаРасходы.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности Или
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам;
	Элементы.СтраницаДоходы.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности Тогда
		Элементы.ЗаголовокКонтрагент.Заголовок = НСтр("ru = 'Кредитор:';
														|en = 'Creditor:'");
	Иначе
		Элементы.ЗаголовокКонтрагент.Заголовок = НСтр("ru = 'Дебитор:';
														|en = 'Debtor:'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура НужноОчищатьТЧ(ОписаниеОповещения, ЕстьСтроки)
	
	Если ЕстьСтроки Тогда
		
		ТекстВопроса = НСтр("ru = 'Суммы списания задолженности могут стать неактуальным.
		                        |Очистить список задолженности?';
		                        |en = 'AR/AP write-off amounts can become irrelevant.
		                        |Clear debt list?'");
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоСтатистике()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.Контрагент)
		Или Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеЗадолженности.Дата КАК Дата,
	|	СписаниеЗадолженности.АналитикаАктивовПассивов,
	//++ НЕ УТ
	|	СписаниеЗадолженности.НастройкаСчетовУчета,
	//-- НЕ УТ
	|	СписаниеЗадолженности.СтатьяРасходов,
	|	СписаниеЗадолженности.АналитикаРасходов,
	|	СписаниеЗадолженности.СтатьяДоходов,
	|	СписаниеЗадолженности.АналитикаДоходов,
	|	СписаниеЗадолженности.Подразделение
	|ИЗ
	|	Документ.СписаниеЗадолженности КАК СписаниеЗадолженности
	|ГДЕ
	|	СписаниеЗадолженности.Проведен
	|	И СписаниеЗадолженности.Организация = &Организация
	|	И СписаниеЗадолженности.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СписаниеЗадолженности.РасчетыМеждуОрганизациями = &РасчетыМеждуОрганизациями
	|	И СписаниеЗадолженности.Контрагент = &Контрагент
	|	И СписаниеЗадолженности.Дата <= &Дата
	|	И СписаниеЗадолженности.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка",                    Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата",                      КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Контрагент",                Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация",               Объект.Организация);
	Запрос.УстановитьПараметр("РасчетыМеждуОрганизациями", Объект.РасчетыМеждуОрганизациями);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",     Объект.ХозяйственнаяОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка, "СтатьяРасходов, АналитикаРасходов, СтатьяДоходов,
			|АналитикаДоходов, АналитикаАктивовПассивов");
		//++ НЕ УТ
		Объект.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.КопияНастройкиСчетовУчета(Выборка.НастройкаСчетовУчета, ЭтотОбъект);
		//-- НЕ УТ
		УстановитьВидимостьПолей();
	КонецЕсли;;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницПодвала()
	
	ВалютаВзаиморасчетов = Неопределено;
	Мультивалютный = Ложь;
	
	Для Каждого Стр Из Объект.Задолженность Цикл
		
		Если ВалютаВзаиморасчетов <> Неопределено И ВалютаВзаиморасчетов <> Стр.ВалютаВзаиморасчетов Тогда
			Мультивалютный = Истина;
			Прервать;
		КонецЕсли;
		ВалютаВзаиморасчетов = Стр.ВалютаВзаиморасчетов;
		
	КонецЦикла;
	
	Если Мультивалютный Тогда
		Элементы.ГруппаПодвал.ТекущаяСтраница = Элементы.ГруппаМультивалютное;
	Иначе
		Элементы.ГруппаПодвал.ТекущаяСтраница = Элементы.ГруппаПоДокументу;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПослеУдаления(Элемент)
	ЗадолженностьПослеУдаленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьВалютаВзаиморасчетовПриИзменении(Элемент)
	УстановитьВидимостьСтраницПодвала();
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьОбъектыРасчетов()
	
	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор);
	
	МассивОбъектовРасчета = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Задолженность Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			МассивОбъектовРасчета.Добавить(СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбъектовРасчета);
	
	Для Каждого ОбъектРасчетов Из МассивОбъектовРасчета Цикл
		//@skip-warning
		Попытка
		ЗаблокироватьДанныеДляРедактирования(ОбъектРасчетов,, УникальныйИдентификатор);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗадолженностьПослеУдаленияНаСервере()
	УстановитьВидимостьСтраницПодвала();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

#КонецОбласти
