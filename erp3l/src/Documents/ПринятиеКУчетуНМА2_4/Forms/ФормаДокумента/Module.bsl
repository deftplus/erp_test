
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ПринятиеКУчетуНМА2_4.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	ПараметрыВыбораСтатейИАналитик = Документы.ПринятиеКУчетуНМА2_4.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПринятиеКУчетуНМА2_4", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналНМА();
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

	ПринятиеКУчетуНМАКлиентЛокализация.ПослеЗаписи(Объект);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЗаполнитьИнформациюВПодвале();
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	ПринятиеКУчетуНМАЛокализация.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПринятиеКУчетуНМА2_4" 
		И Источник <> Объект.Ссылка Тогда
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "УстановкаПорядкаУчетаНУ" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Объект.ПорядокУчетаНУ = РекомендуемыйПорядокУчетаНУ;
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "ПорядокУчетаНУ");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОтраженияВУчетеПриИзменении(Элемент)
	
	ВариантОтраженияВУчетеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаУчетаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ВидОбъектаУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьУУПриИзменении(Элемент)
	
	ПервоначальнаяСтоимостьУУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияПриИзменении(Элемент)
	
	СрокиИспользования = Новый Соответствие;
	СрокиИспользования.Вставить(Элемент, Объект[Элемент.Имя]);
	
	ПринятиеКУчетуНМАКлиентЛокализация.СрокИспользованияПриИзменении(ЭтотОбъект, Элемент, СрокиИспользования);
	
	ВнеоборотныеАктивыКлиентСервер.УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования);
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДокументеВДругомУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуНМА2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовУУПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "СтатьяРасходовУУ");
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	ЗаполнитьПредварительнуюСтоимость(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)

	ПринятиеКУчетуНМАКлиентЛокализация.ПриИзмененииРеквизита(Элемент, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовУУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовУУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовУУАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовУУОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПринятиеКУчетуНМАКлиентЛокализация.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПринятиеКУчетуНМАКлиентЛокализация.АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПринятиеКУчетуНМАКлиентЛокализация.ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПервоначальнуюСтоимость(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьПредварительнуюСтоимость(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

#Область ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ПриВыполненииКоманды(Команда)

	ПринятиеКУчетуНМАКлиентЛокализация.ПриВыполненииКоманды(Команда, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаЗавершениеНаСервере(Знач ИмяЭлемента, Знач ДополнительныеПараметры)

	ПринятиеКУчетуНМАЛокализация.ПриИзмененииРеквизита(ИмяЭлемента, ЭтотОбъект);

	Если ДополнительныеПараметры.Свойство("Выполнить_НастроитьЗависимыеЭлементыФормы") Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ДополнительныеПараметры.Выполнить_НастроитьЗависимыеЭлементыФормы);
	КонецЕсли; 
	Если ДополнительныеПараметры.Свойство("Выполнить_ЗаполнитьЗначенияРеквизитовДоИзменения") Тогда
		ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтотОбъект);
	КонецЕсли; 
	Если ДополнительныеПараметры.Свойство("Выполнить_ЗаполнитьИнформациюВПодвале") Тогда
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриВыполненииКомандыЗавершениеНаСервере(Знач ИмяКоманды, Знач ДополнительныеПараметры)

	ПринятиеКУчетуНМАЛокализация.ПриВыполненииКоманды(ИмяКоманды, ЭтотОбъект);
	
	Если ДополнительныеПараметры.Свойство("Выполнить_НастроитьЗависимыеЭлементыФормы") Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ДополнительныеПараметры.Выполнить_НастроитьЗависимыеЭлементыФормы);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ВнеоборотныеАктивыСлужебный.УстановитьУсловноеОформлениеЦелевогоФинансирования(УсловноеОформление, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеПараметрыФормы();
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ВалютаУУ = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаБУ = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаБУПредставление = Строка(ВалютаБУ);
	ВалютаУУПредставление = Строка(ВалютаУУ);
	ВалютыСовпадают = (ВалютаУУ = ВалютаБУ);
	
	Если Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах;
	ИначеЕсли Объект.ОтражатьВУпрУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	ИначеЕсли Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете;
	КонецЕсли;
	
	ЗаполнитьСпособыНачисленияАмортизации(ЭтотОбъект);
		
	СрокиИспользования = Новый Соответствие;
	СрокиИспользования.Вставить(Элементы.СрокИспользованияУУ, Объект.СрокИспользованияУУ);
	ВнеоборотныеАктивыКлиентСервер.УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования);
	
	НастроитьПараметрыВыбораГФУ();
	
	ЗаполнитьИнформациюВПодвале();
	
	ПринятиеКУчетуНМАЛокализация.ПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпособыНачисленияАмортизации(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.МетодНачисленияАмортизацииУУ.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"));
	
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
	КонецЕсли;
	
	ПринятиеКУчетуНМАКлиентСерверЛокализация.ЗаполнитьСпособыНачисленияАмортизации(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПриИзмененииРеквизитов(Форма, СтруктураИзмененныхРеквизитов);
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	ВспомогательныеРеквизиты.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ВспомогательныеРеквизиты.Вставить("ВедетсяРегламентированныйУчетВНА", Форма.ВедетсяРегламентированныйУчетВНА);
	ВспомогательныеРеквизиты.Вставить("ВалютыСовпадают", Форма.ВалютыСовпадают);
	ВспомогательныеРеквизиты.Вставить("ЕстьУчетСебестоимости", Форма.СлужебныеПараметрыФормы.ЕстьУчетСебестоимости);
	ПринятиеКУчетуНМАКлиентСерверЛокализация.ДополнитьВспомогательныеРеквизиты(Форма, ВспомогательныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	
	ОбщегоНазначенияУТКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ОбщегоНазначенияУТКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта);
		ИзмененныеРеквизиты = ЗаполнитьРеквизитыВзависимостиОтСвойств(Объект, ПараметрыРеквизитовОбъекта);
		Если ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
			ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(
											Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
			ОбщегоНазначенияУТКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
		КонецЕсли;
	КонецЕсли; 
	
	ПараметрыПринятияКУчетуНМА = ВнеоборотныеАктивыКлиентСервер.ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты);
	
	Если ОбновитьВсе Тогда
		Элементы.ДекорацияУстановкаПараметраУчетаНУ.Видимость = Ложь;
	КонецЕсли;
	
	ПоИнвентаризации = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации");
	
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ОтражатьВРеглУчете Тогда
			
			Элементы.ЗаполнитьПервоначальнуюСтоимостьРегл.Видимость = Форма.СлужебныеПараметрыФормы.ЕстьУчетСебестоимости;
			
			Если Объект.ОтражатьВУпрУчете 
				И (ПоИнвентаризации ИЛИ НЕ Форма.СлужебныеПараметрыФормы.ЕстьУчетСебестоимости) Тогда
				Элементы.ГруппаСтоимость.Заголовок = НСтр("ru = 'Стоимость (регл. учет)';
															|en = 'Cost (local accounting)'");
				Элементы.ПервоначальнаяСтоимостьБУ.Подсказка = НСтр("ru = 'Стоимость в валюте регл. учета';
																	|en = 'Cost in local accounting currency'");
				Элементы.ПервоначальнаяСтоимостьУУ.Подсказка = НСтр("ru = 'Стоимость в валюте упр. учета';
																	|en = 'Cost in the man. accounting currency'");
			Иначе
				Элементы.ГруппаСтоимость.Заголовок = НСтр("ru = 'Стоимость';
															|en = 'Cost'");
			КонецЕсли;
			
			Если Объект.ОтражатьВУпрУчете И Форма.ВедетсяРегламентированныйУчетВНА Тогда
				Элементы.ПервоначальнаяСтоимостьБУ.Заголовок = НСтр("ru = 'Первоначальная (регл. учет)';
																	|en = 'Initial (local accounting)'");
			Иначе
				Элементы.ПервоначальнаяСтоимостьБУ.Заголовок = НСтр("ru = 'Первоначальная';
																	|en = 'Initial'");
			КонецЕсли;
				
		Иначе
			
			Элементы.ЗаполнитьПервоначальнуюСтоимостьРегл.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.ОтражатьВУпрУчете Тогда
			
			Элементы.ЗаполнитьПервоначальнуюСтоимостьУпр.Видимость = 
				НЕ Объект.ОтражатьВРеглУчете
				И Форма.СлужебныеПараметрыФормы.ЕстьУчетСебестоимости;
			
			Если Объект.ОтражатьВРеглУчете И Форма.ВедетсяРегламентированныйУчетВНА Тогда
				Элементы.ПервоначальнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Первоначальная (упр. учет)';
																	|en = 'Initial (manag. accounting)'");
				Элементы.ЛиквидационнаяСтоимость.Заголовок = НСтр("ru = 'Ликвидационная (упр. учет)';
																	|en = 'Liquidation (man. accounting)'");
			Иначе
				Элементы.ПервоначальнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Первоначальная';
																	|en = 'Initial'");
				Элементы.ЛиквидационнаяСтоимость.Заголовок = НСтр("ru = 'Ликвидационная';
																	|en = 'Residual'");
			КонецЕсли; 
			
			Если Объект.ОтражатьВРеглУчете Тогда
				Элементы.ГруппаСтоимостьУпр.Заголовок = НСтр("ru = 'Стоимость (упр. учет)';
															|en = 'Cost (mgmt accounting)'");
			Иначе
				Элементы.ГруппаСтоимостьУпр.Заголовок = НСтр("ru = 'Стоимость';
															|en = 'Cost'");
			КонецЕсли;
			
			Элементы.ГруппаСтоимостьУпр.ОтображатьЗаголовок = НЕ Объект.ОтражатьВРеглУчете;
				
		Иначе
			
			Элементы.ЗаполнитьПервоначальнуюСтоимостьУпр.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		Элементы.ВалютаУУ.Видимость = ЗначениеСвойства;
		Элементы.ЛиквидационнаяСтоимостьВалюта.Видимость = ЗначениеСвойства;
		
		//
		Элементы.ЛиквидационнаяСтоимостьРеглВалюта.Видимость = Элементы.ЛиквидационнаяСтоимостьРегл.Видимость;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ПервоначальнаяСтоимостьБУВалюта.Видимость = Элементы.ПервоначальнаяСтоимостьБУ.Видимость;
		
		Элементы.ПервоначальнаяСтоимостьНУВалюта.Видимость = 
			Элементы.ПервоначальнаяСтоимостьНУ.Видимость 
			И Форма.ВедетсяРегламентированныйУчетВНА;
		
		Элементы.ПервоначальнаяСтоимостьПРВалюта.Видимость = 
			Элементы.ПервоначальнаяСтоимостьПР.Видимость 
			И Форма.ВедетсяУчетПостоянныхИВременныхРазниц;
		
		Элементы.ПервоначальнаяСтоимостьВРВалюта.Видимость = 
			Элементы.ПервоначальнаяСтоимостьВР.Видимость 
			И Форма.ВедетсяУчетПостоянныхИВременныхРазниц;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если ОбновитьВсе Тогда
		Элементы.ГруппаУУ.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаОбщее.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
			
			Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'Нематериальный актив';
															|en = 'Intangible asset'");
			Элементы.МетодНачисленияАмортизацииУУ.Заголовок = НСтр("ru = 'Способ начисления амортизации';
																	|en = 'Depreciation method'");
			Элементы.ПорядокУчетаУУ.Заголовок = НСтр("ru = 'Порядок учета';
													|en = 'Accounting procedure'");
			Элементы.СрокИспользованияУУ.Заголовок = НСтр("ru = 'Срок использования';
															|en = 'Useful life'");
			
			ПорядокНачислятьАмортизациюПредставление = НСтр("ru = 'Начислять амортизацию';
															|en = 'Accrue depreciation '");
			ПорядокНеНачислятьАмортизациюПредставление = НСтр("ru = 'Не начислять амортизацию';
																|en = 'Do not accrue amortization'");

		Иначе
			
			Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'НИОКР';
															|en = 'R&D'");
			Элементы.МетодНачисленияАмортизацииУУ.Заголовок = НСтр("ru = 'Способ списания расходов';
																	|en = 'Amortization method'");
			Элементы.ПорядокУчетаУУ.Заголовок = НСтр("ru = 'Порядок списания';
													|en = 'Amortization procedure'");
			Элементы.СрокИспользованияУУ.Заголовок = НСтр("ru = 'Срок списания';
															|en = 'Amortization period'");
			
			ПорядокНачислятьАмортизациюПредставление = НСтр("ru = 'Списание расходов';
															|en = 'Amortization charges'");
			ПорядокНеНачислятьАмортизациюПредставление = НСтр("ru = 'Не списывать расходы';
																|en = 'Do not write off expenses'");

		КонецЕсли;

		Элементы.ПорядокУчетаУУ.СписокВыбора[0].Представление = ПорядокНачислятьАмортизациюПредставление;
		Элементы.ПорядокУчетаУУ.СписокВыбора[1].Представление = ПорядокНеНачислятьАмортизациюПредставление;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если ОбновитьВсе Тогда
		Элементы.ГруппаРасходыУУ.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету") Тогда
			
			Элементы.ГруппаРасходыУУ.Заголовок = НСтр("ru = 'Списание на расходы';
														|en = 'Expense as'");
			
		Иначе
			
			Элементы.ГруппаРасходыУУ.Заголовок = 
				?(Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив"),
					НСтр("ru = 'Амортизация';
						|en = 'Depreciation'"),
					НСтр("ru = 'Списание расходов';
						|en = 'Amortization charges'"));
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
			
			Элементы.СтатьяРасходовУУ.Подсказка = 
				?(Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету"),
					НСтр("ru = 'Статья расходов, на которую списывается стоимость при принятии к учету';
						|en = 'Expense item to which the cost is charged to on initial recognition'"),
					НСтр("ru = 'Статья расходов, по которой отражаются амортизационные расходы';
						|en = 'Expense item recording depreciation expenses'"));
					
		Иначе
			
			Элементы.СтатьяРасходовУУ.Подсказка = 
				?(Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету"),
					НСтр("ru = 'Статья расходов, на которую списываются расходы при принятии к учету';
						|en = 'Expense item to which the expenses are charged to on initial recognition'"),
					НСтр("ru = 'Статья расходов, по которой отражается списание расходов';
						|en = 'Expense item on which the expenses write-off is recognized'"));
					
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ПринятиеКУчетуНМАКлиентСерверЛокализация.НастроитьЗависимыеЭлементыФормы(
		Форма, 
		ВспомогательныеРеквизиты,
		СтруктураИзмененныхРеквизитов, 
		ПараметрыПринятияКУчетуНМА, 
		ПараметрыРеквизитовОбъекта);
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(Форма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	Если ОбновитьВсе Тогда
		Элементы.ХозяйственнаяОперация.Видимость = (Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() > 1);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") Тогда
		ВидОбъектаУчетаПриИзмененииНаСервере(ИзмененныеРеквизиты)
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата") 
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ЕстьУчетСебестоимости",
			РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;
	
	ПринятиеКУчетуНМАЛокализация.НастроитьЗависимыеЭлементыФормы(
		ЭтотОбъект, СтруктураИзмененныхРеквизитов);
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииРеквизитов(Форма, СтруктураИзмененныхРеквизитов)

	Если СтруктураИзмененныхРеквизитов.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли; 
	
	ПринятиеКУчетуНМАКлиентСерверЛокализация.ПриИзмененииРеквизитов(Форма, СтруктураИзмененныхРеквизитов);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьРеквизитыВзависимостиОтСвойств(Объект, ПараметрыРеквизитовОбъекта)

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита)
			ИЛИ СтрРазделить(ПараметрыРеквизита.ИмяРеквизита, ".").ВГраница() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Действие = ВнеоборотныеАктивыКлиентСервер.ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита);
		
		Если Действие <> "Заполнить" Тогда
			Продолжить;
		КонецЕсли;
		
		#Область СтраницаУчет
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаУУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииУУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		#КонецОбласти
		
		ПринятиеКУчетуНМАКлиентСерверЛокализация.ЗаполнитьРеквизитыВзависимостиОтСвойств(
			ИзмененныеРеквизиты, Объект, ПараметрыРеквизита);
		
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюВПодвале()

	ЗаголовокНадписи = ВнеоборотныеАктивыСлужебный.ИнформацияОДокументеВДругомУчете(Объект);
	Если ПредварительнаяСтоимостьОтличаетсяОтФактической() Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(НСтр("ru = 'Стоимость, указанная в документе, отличается от фактической.';
										|en = 'Cost specified in the document differs from the actual cost.'"));
	КонецЕсли; 

	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.КартинкаИнформация.Видимость = Истина;
		Элементы.Информация.Видимость = Истина;
	Иначе
		Элементы.КартинкаИнформация.Видимость = Ложь;
		Элементы.Информация.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПредварительнаяСтоимостьОтличаетсяОтФактической()

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтоимостьНМА.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Регистратор = &Ссылка
	|	И СтоимостьНМА.РасчетСтоимости
	|	И (СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьНМА.НематериальныйАктив
	|
	|ИМЕЮЩИЕ
	|	(&ОтражатьВРеглУчете
	|			И &ПервоначальнаяСтоимостьБУ <> СУММА(СтоимостьНМА.СтоимостьРегл + СтоимостьНМА.СтоимостьЦФ)
	|			И &ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|		ИЛИ &ОтражатьВУпрУчете
	|			И &ПервоначальнаяСтоимостьУУ <> СУММА(СтоимостьНМА.Стоимость))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НематериальныйАктив", Объект.НематериальныйАктив);
	Запрос.УстановитьПараметр("ПервоначальнаяСтоимостьБУ", Объект.ПервоначальнаяСтоимостьБУ);
	Запрос.УстановитьПараметр("ПервоначальнаяСтоимостьУУ", Объект.ПервоначальнаяСтоимостьУУ);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ПорядокУчетаБУ", Объект.ПорядокУчетаБУ);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаСервере
Процедура ЗаполнитьПредварительнуюСтоимость(СообщатьОбОшибках)
	
	Если НЕ СлужебныеПараметрыФормы.ЕстьУчетСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Дата"" не заполнено';
									|en = '""Date"" is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект", "Дата", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено';
									|en = '""Company"" is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект", "Организация", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НематериальныйАктив) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Нематериальный актив"" не заполнено';
									|en = '""Intangible asset"" is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект", "НематериальныйАктив", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Документы.ПринятиеКУчетуНМА2_4.ЗаполнитьСтоимость(Объект);
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораГФУ()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАктива", Перечисления.ВидыВнеоборотныхАктивов.НМА));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАктива", Перечисления.ВидыВнеоборотныхАктивов.НИОКР));
	КонецЕсли;
	
	Элементы.ГруппаФинансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияРеквизитовДоИзменения(Форма)

	СписокРеквизитов = "ПервоначальнаяСтоимостьУУ";
	
	ЗначенияРеквизитовДоИзменения = Новый Структура(СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Форма.Объект);
	
	ПринятиеКУчетуНМАКлиентСерверЛокализация.ДополнитьЗначенияРеквизитовДоИзменения(Форма, ЗначенияРеквизитовДоИзменения);
	
	Форма.ЗначенияРеквизитовДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);

КонецПроцедуры

&НаСервере
Процедура ВариантОтраженияВУчетеПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(ВариантОтраженияВУчете) Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	КонецЕсли; 
	
	Объект.ОтражатьВУпрУчете = (ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете
		Или ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах);
	Объект.ОтражатьВРеглУчете = (ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете
		Или ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах);
		
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "ОтражатьВУпрУчете, ОтражатьВРеглУчете");

КонецПроцедуры

&НаСервере
Процедура ПервоначальнаяСтоимостьУУПриИзмененииНаСервере()

	ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтотОбъект);
	ЗаполнитьИнформациюВПодвале();

КонецПроцедуры

&НаСервере
Процедура ВидОбъектаУчетаПриИзмененииНаСервере(ИзмененныеРеквизиты)
	
	ЗаполнитьСпособыНачисленияАмортизации(ЭтотОбъект);
		
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
		Если Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
			Объект.МетодНачисленияАмортизацииУУ = Неопределено;
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",МетодНачисленияАмортизацииУУ";
		КонецЕсли;
		Если Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
			Объект.МетодНачисленияАмортизацииБУ = Неопределено;
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",МетодНачисленияАмортизацииБУ";
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		ВидВнеоборотногоАктива = Перечисления.ВидыВнеоборотныхАктивов.НИОКР;
	Иначе
		ВидВнеоборотногоАктива = Перечисления.ВидыВнеоборотныхАктивов.НМА;
	КонецЕсли;
	Объект.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(ВидВнеоборотногоАктива);
	
	НастроитьПараметрыВыбораГФУ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеПараметрыФормы()

	НовыеСлужебныеПараметрыФормы = Новый Структура;
	НовыеСлужебныеПараметрыФормы.Вставить("ЕстьУчетСебестоимости", Ложь);
	
	СлужебныеПараметрыФормы = Новый ФиксированнаяСтруктура(НовыеСлужебныеПараметрыФормы);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ПараметрыОповещения) Экспорт
	
	Перем ПараметрыДействия;

	Если ПараметрыОповещения.ТребуетсяВызовСервера Тогда
		ПриИзмененииРеквизитаЗавершениеНаСервере(ИмяЭлемента, ПараметрыОповещения.ПараметрыОбработки);
		Возврат;
	КонецЕсли;

	Если ПараметрыОповещения.ПараметрыОбработки.Свойство("Выполнить_НастроитьЗависимыеЭлементыФормы", ПараметрыДействия) Тогда
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ПараметрыДействия);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ПараметрыОповещения) Экспорт

	Перем ПараметрыДействия;
	
	Если ПараметрыОповещения.ТребуетсяВызовСервера Тогда
		ПриВыполненииКомандыЗавершениеНаСервере(ИмяКоманды, ПараметрыОповещения.ПараметрыОбработки);
		Возврат;
	КонецЕсли;

	Если ПараметрыОповещения.ПараметрыОбработки.Свойство("Выполнить_НастроитьЗависимыеЭлементыФормы", ПараметрыДействия) Тогда
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ПараметрыДействия);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
