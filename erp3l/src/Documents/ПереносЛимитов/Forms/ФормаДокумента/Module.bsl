
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныхРеквизитов");
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокГодЛимитирования();
	
	ЗаполнитьСвободно();
	
	#Область УХ_Согласование
	ВстраиваниеОПКПереопределяемый.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма, Элементы.ГруппаДатаНомер);
	#КонецОбласти
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	Если Параметры.Ключ.Пустая() Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	ЗаполнитьСвободно();
	УстановитьСостояниеДокумента();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
    	ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
	
	#Область УХ_Согласование
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписанаДокументПереносЛимитов");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборЛимитов.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если Объект.Валюта <> ВалютаСтарый И Объект.Источник.Количество() > 0 Тогда
		ВалютаПриИзмененииЗавершение = Новый ОписаниеОповещения("ВалютаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ВалютаПриИзмененииЗавершение, 
			НСтр("ru = 'В таблице ""Источник"" введены данные о лимитах. Вы уверены, что необходимо выполнить изменение валюты?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьИзменениеВалюты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьИзменениеВалюты();
	Иначе
		Объект.Валюта = ВалютаСтарый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеВалюты()
	ВалютаСтарый = Объект.Валюта;
КонецПроцедуры

&НаКлиенте
Процедура ГодЛимитированияПриИзменении(Элемент)
	ГодЛимитированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидБюджетаПриИзменении(Элемент)
	
	Если Объект.ВидБюджета <> ВидБюджета И Объект.Источник.Количество() > 0 Тогда
		ВидБюджетаПриИзмененииЗавершение = Новый ОписаниеОповещения("ВидБюджетаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ВидБюджетаПриИзмененииЗавершение, 
			НСтр("ru = 'В таблице ""Источник"" введены данные о лимитах. При изменении вида бюджета они будут очищены. Продолжить изменение вида бюджета?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ВидБюджетаПриИзмененииНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтатьяБюджетаПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияВалютыЛимитированияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьЛимитированияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТипПереносаПриИзменении(Элемент)
	УстановитьВидОперации();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ФлагЦФОПриИзменении(Элемент)
	УстановитьВидОперации();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ФлагПроектПриИзменении(Элемент)
	УстановитьВидОперации();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ФлагПериодПриИзменении(Элемент)
	УстановитьВидОперации();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ФлагСтатьяПриИзменении(Элемент)
	УстановитьВидОперации();
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсточникЛимитов

&НаКлиенте
Процедура ИсточникЛимитовСтатьяБюджетаПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЛимитовПередНачаломИзменения(Элемент, Отказ)
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЛимитовАналитикаПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучательЛимитов

&НаКлиенте
Процедура ПолучательЛимитовСтатьяБюджетаПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательЛимитовПередНачаломИзменения(Элемент, Отказ)
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательЛимитовАналитикаПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьПоИсточнику(Команда)
	ЗаполнитьПроизвольноКудаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборЛимитов(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ВидБюджета) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""ВидБюджета"" не заполнено'"), Объект.Ссылка, "Объект.ВидБюджета",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидБюджета",								Объект.ВидБюджета);
	ПараметрыФормы.Вставить("ГодЛимитирования",							Объект.ГодЛимитирования);
	ПараметрыФормы.Вставить("Валюта",									Объект.Валюта);
	ПараметрыФормы.Вставить("Периодичность",							Объект.ПериодичностьЛимитирования);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",		Истина);
	ПараметрыФормы.Вставить("Заголовок",								НСтр("ru = 'Подбор лимитов для переноса'"));
	ПараметрыФормы.Вставить("Дата",										Объект.Дата);
	ПараметрыФормы.Вставить("Документ",									Объект.Ссылка);
	ПараметрыФормы.Вставить("Корзина",									Объект.Источник);
	
	ОткрытьФорму("Обработка.ПодборЛимитов.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ВстраиваниеОПКПереопределяемый.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	//
	ВидБюджета = Объект.ВидБюджета;
	ВалютаСтарый = Объект.Валюта;
	
	//
	УстановитьСостояниеДокумента();

	// Данные для создания полей Аналитика* для элементов Статьи бюджетов
	АСБ = АналитикиСтатейБюджетовУХ;
	
	МассивОписанийСтатей = Новый Массив;
	
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей, 
		"Источник",  "ИсточникЛимитов",
		"СтатьяБюджета", "ИсточникЛимитовСтатьяБюджета",
		"Аналитика%1", "ИсточникЛимитовАналитика%1",
		ФормыУХ.РазместитьВГруппе("ИсточникЛимитовСтатьяАналитики"));
	
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей, 
		"Получатель",  "ПолучательЛимитов",
		"СтатьяБюджета", "ПолучательЛимитовСтатьяБюджета",
		"Аналитика%1", "ПолучательЛимитовАналитика%1",
		ФормыУХ.РазместитьВГруппе("ПолучательЛимитовСтатьяАналитики"));
	
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей, 
		"СтатьяБюджета", "СтатьяБюджета",
		"Аналитика%1", "Аналитика%1",
		ФормыУХ.РазместитьВГруппе("Группа6"));
	
	Для Каждого ОписаниеСтатьи Из МассивОписанийСтатей Цикл
		ОписаниеСтатьи.ТолькоЛимитируемыеАналитики = Истина;
	КонецЦикла;
	
	ПараметрыПоляВвода = Новый Структура;
	ПараметрыПоляВвода.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	// Создать элементы формы для статей бюджетов и их аналитик
	АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(ЭтотОбъект, МассивОписанийСтатей, ПараметрыПоляВвода);
	
	//
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПроизвольный Тогда
		ТипПереноса = 1;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФОПроект Тогда
		ФлагЦФО = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФОПроект Тогда
		ФлагПроект = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатья
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатья
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФОПроект Тогда
		ФлагСтатья = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериод
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодЦФОПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатья
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФО
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяПроект
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФОПроект Тогда
		ФлагПериод = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидБюджетаВалютуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидБюджета = Результат.ВидБюджета;
	Объект.Валюта = Результат.Валюта;
	Объект.ГодЛимитирования = Результат.ГодЛимитирования;
	
	ЗаполнитьИсточникПоВидуБюджетаВалютеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникПоВидуБюджетаВалютеНаСервере()
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	// 
	Элементы.ВидБюджета.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТипПереноса.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СтраницаМеждуАналитиками.ТолькоПросмотр = ТолькоПросмотр;
	
	// 
	ВидимостьКолонокСвободно = НЕ Объект.Проведен;
	
	//
	ВалютаДоступна = Объект.СпособОпределенияВалютыЛимитирования = Перечисления.СпособыОпределенияВалютыЛимитирования.ВалютаОперации
		ИЛИ Объект.СпособОпределенияВалютыЛимитирования = Перечисления.СпособыОпределенияВалютыЛимитирования.ВалютаЛимитированияЦФО;
	Элементы.Валюта.ТолькоПросмотр = НЕ ВалютаДоступна;
	Элементы.Валюта.ПропускатьПриВводе = НЕ ВалютаДоступна;
	
	// Параметры выбора ЦФО
	Если Объект.СпособОпределенияВалютыЛимитирования = Перечисления.СпособыОпределенияВалютыЛимитирования.ВалютаЛимитированияЦФО Тогда
		
		Элементы.ЦФО.ФормаВыбора = "РегистрСведений.ПараметрыЛимитированияЦФО.Форма.ФормаВыбораЦФО";
		Элементы.ИсточникЛимитовЦФО.ФормаВыбора = "РегистрСведений.ПараметрыЛимитированияЦФО.Форма.ФормаВыбораЦФО";
		Элементы.ПолучательЛимитовЦФО.ФормаВыбора = "РегистрСведений.ПараметрыЛимитированияЦФО.Форма.ФормаВыбораЦФО";
		ФормыУХКлиентСервер.ДобавитьСвязьПараметровВыбора(Элементы.ЦФО, "Отбор.ВалютаЛимитирования", "Объект.Валюта");
		ФормыУХКлиентСервер.ДобавитьСвязьПараметровВыбора(Элементы.ИсточникЛимитовЦФО, "Отбор.ВалютаЛимитирования", "Объект.Валюта");
		ФормыУХКлиентСервер.ДобавитьСвязьПараметровВыбора(Элементы.ПолучательЛимитовЦФО, "Отбор.ВалютаЛимитирования", "Объект.Валюта");
	Иначе
		ФормыУХКлиентСервер.УдалитьСвязьПараметровВыбора(Элементы.ЦФО, "Отбор.ВалютаЛимитирования", "Объект.Валюта");
		ФормыУХКлиентСервер.УдалитьСвязьПараметровВыбора(Элементы.ИсточникЛимитовЦФО, "Отбор.ВалютаЛимитирования", "Объект.Валюта");
		ФормыУХКлиентСервер.УдалитьСвязьПараметровВыбора(Элементы.ПолучательЛимитовЦФО, "Отбор.ВалютаЛимитирования", "Объект.Валюта");
		Элементы.ЦФО.ФормаВыбора = "";
		Элементы.ИсточникЛимитовЦФО.ФормаВыбора = "";
		Элементы.ПолучательЛимитовЦФО.ФормаВыбора = "";
	КонецЕсли;
	
	// Перенос
	Если ТипПереноса = 0 Тогда
		Элементы.СтраницыСпособыПереноса.ТекущаяСтраница = Элементы.СтраницаМеждуАналитиками;
	Иначе
		Элементы.СтраницыСпособыПереноса.ТекущаяСтраница = Элементы.СтраницаПроизвольно;
	КонецЕсли;
	
	// ЦФО
	Элементы.ЦФО.ТолькоПросмотр = НЕ ФлагЦФО;
	Элементы.ЦФО.АвтоОтметкаНезаполненного = ФлагЦФО;
	Если НЕ Элементы.ЦФО.АвтоОтметкаНезаполненного И Элементы.ЦФО.ОтметкаНезаполненного Тогда
		Элементы.ЦФО.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Проект
	Элементы.Проект.ТолькоПросмотр = НЕ ФлагПроект;
	
	// Проекты
	Элементы.ПериодЛимитирования.ТолькоПросмотр = НЕ ФлагПериод;
	Элементы.ПериодЛимитирования.АвтоОтметкаНезаполненного = ФлагПериод;
	Если НЕ Элементы.ПериодЛимитирования.АвтоОтметкаНезаполненного И Элементы.ПериодЛимитирования.ОтметкаНезаполненного Тогда
		Элементы.ПериодЛимитирования.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Статья бюджета
	Элементы.СтатьяБюджета.ТолькоПросмотр = НЕ ФлагСтатья;
	Элементы.СтатьяБюджета.АвтоОтметкаНезаполненного = ФлагСтатья;
	Если НЕ Элементы.СтатьяБюджета.АвтоОтметкаНезаполненного И Элементы.СтатьяБюджета.ОтметкаНезаполненного Тогда
		Элементы.СтатьяБюджета.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	Элементы.Аналитика1.ТолькоПросмотр = НЕ ФлагСтатья;
	Элементы.Аналитика2.ТолькоПросмотр = НЕ ФлагСтатья;
	Элементы.Аналитика3.ТолькоПросмотр = НЕ ФлагСтатья;
	Элементы.Аналитика4.ТолькоПросмотр = НЕ ФлагСтатья;
	Элементы.Аналитика5.ТолькоПросмотр = НЕ ФлагСтатья;
	Элементы.Аналитика6.ТолькоПросмотр = НЕ ФлагСтатья;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСвободно()
	
	ИменаРеквизитов = "ПериодЛимитирования, ЦФО, Проект, СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6";
	
	ДанныеДокумента = Объект.Получатель.Выгрузить(, ИменаРеквизитов);
	ДанныеДокумента.Колонки.Добавить("ВидБюджета", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыБюджетов"));
	ДанныеДокумента.Колонки.Добавить("Предназначение", Новый ОписаниеТипов("ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета"));
	ДанныеДокумента.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ИменаРеквизитов = "ВидБюджета, Предназначение, Валюта," + ИменаРеквизитов;
	
	Для Каждого Строка Из Объект.Источник Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.Добавить(), Строка);
	КонецЦикла;
	ДанныеДокумента.ЗаполнитьЗначения(Объект.ВидБюджета, "ВидБюджета");
	ДанныеДокумента.ЗаполнитьЗначения(Объект.ВидБюджета.Предназначение, "Предназначение");
	ДанныеДокумента.ЗаполнитьЗначения(Объект.Валюта, "Валюта");
	ДанныеДокумента.Свернуть(ИменаРеквизитов, "");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОбщегоНазначенияОПК.ЗагрузитьТаблицуВоВременнуюТаблицуЗапроса(Запрос, "ВТ_Данные", ДанныеДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыБюджетов.Ссылка КАК ВидБюджета,
	|	ЛимитыПоБюджетамОбороты.Предназначение КАК Предназначение,
	|	ЛимитыПоБюджетамОбороты.ПериодЛимитирования КАК ПериодЛимитирования,
	|	ЛимитыПоБюджетамОбороты.ЦФО КАК ЦФО,
	|	ЛимитыПоБюджетамОбороты.Проект КАК Проект,
	|	ЛимитыПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ЛимитыПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|	ЛимитыПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|	ЛимитыПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|	ЛимитыПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
	|	ЛимитыПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
	|	ЛимитыПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
	|	ЛимитыПоБюджетамОбороты.Валюта КАК Валюта,
	|	ЛимитыПоБюджетамОбороты.ЛимитОборот КАК ЛимитОборот,
	|	ЛимитыПоБюджетамОбороты.КорректировкаОборот КАК КорректировкаОборот,
	|	ЛимитыПоБюджетамОбороты.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ЛимитыПоБюджетамОбороты.ЗаявленоОборот КАК ЗаявленоОборот,
	|	ЛимитыПоБюджетамОбороты.ИсполненоОборот КАК ИсполненоОборот,
	|	ЛимитыПоБюджетамОбороты.КОбеспечениюОборот КАК КОбеспечениюОборот,
	|	ЛимитыПоБюджетамОбороты.ЛимитОборот + ЛимитыПоБюджетамОбороты.КорректировкаОборот - ЛимитыПоБюджетамОбороты.ЗарезервированоОборот - ЛимитыПоБюджетамОбороты.ЗаявленоОборот - ЛимитыПоБюджетамОбороты.ИсполненоОборот КАК Свободно
	|ИЗ
	|	РегистрНакопления.ЛимитыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			(Предназначение, ПериодЛимитирования, Валюта, ЦФО, Проект, СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6) В
	|				(ВЫБРАТЬ
	|					ВТ_Данные.Предназначение,
	|					ВТ_Данные.ПериодЛимитирования,
	|					ВТ_Данные.Валюта,
	|					ВТ_Данные.ЦФО,
	|					ВТ_Данные.Проект,
	|					ВТ_Данные.СтатьяБюджета,
	|					ВТ_Данные.Аналитика1,
	|					ВТ_Данные.Аналитика2,
	|					ВТ_Данные.Аналитика3,
	|					ВТ_Данные.Аналитика4,
	|					ВТ_Данные.Аналитика5,
	|					ВТ_Данные.Аналитика6
	|				ИЗ
	|					ВТ_Данные)) КАК ЛимитыПоБюджетамОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыБюджетов КАК ВидыБюджетов
	|		ПО ЛимитыПоБюджетамОбороты.Предназначение = ВидыБюджетов.Предназначение";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ВидБюджетаПриИзмененииНаСервере()
	
	Объект.ВидБюджета = ВидБюджета;
	Объект.СтатьяБюджета = неопределено;
	Объект.Источник.Очистить();
	Объект.Получатель.Очистить();
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	
	ЗаполнитьСписокГодЛимитирования();
	ГодЛимитированияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГодЛимитированияПриИзмененииНаСервере()
	Документы.ПереносЛимитов.ЗаполнитьПараметрыЛимитирования(ЭтотОбъект.Объект);
	УдалитьОшибочныеСтроки();
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УдалитьОшибочныеСтроки()
	ИсточникОшибочные = ПолучитьСтрокиИсточникаНеСоответствующиеНастройкам();
	Если ИсточникОшибочные.Количество() > 0 Тогда
		УдалитьИсточникПоИдентификаторам(ИсточникОшибочные);
		Объект.Получатель.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатыНачалаДействияПараметровЛимитирования(ВидБюджета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыЛимитирования.ВидБюджета КАК ВидБюджета,
	|	ПараметрыЛимитирования.Период КАК Период
	|ИЗ
	|	РегистрСведений.ПараметрыЛимитирования КАК ПараметрыЛимитирования
	|ГДЕ
	|	ПараметрыЛимитирования.ВидБюджета = &ВидБюджета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокГодЛимитирования()
	
	ДатыПараметровЛимитирования = ПолучитьДатыНачалаДействияПараметровЛимитирования(Объект.ВидБюджета);
	
	Элемент = Элементы.ГодЛимитирования;
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого Дата Из ДатыПараметровЛимитирования Цикл
		Элемент.СписокВыбора.Добавить(Дата, Формат(Дата, "ДФ=гггг"));
	КонецЦикла;
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		Объект.ГодЛимитирования = 0;
	ИначеЕсли Элемент.СписокВыбора.НайтиПоЗначению(Объект.ГодЛимитирования) = неопределено Тогда
		Объект.ГодЛимитирования = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиИсточникаНеСоответствующиеНастройкам()
	
	Периоды = Объект.Источник.Выгрузить(, "ПериодЛимитирования").ВыгрузитьКолонку("ПериодЛимитирования");
	ДатаНачалаПериодовЛимитирования = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Периоды, "ДатаНачала");
	
	Результат = Новый Массив;
	Для Каждого Строка Из Объект.Источник Цикл
		Если НЕ СтрокаСоответствуетТребованиям(Строка, ДатаНачалаПериодовЛимитирования) Тогда
			Результат.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтрокаСоответствуетТребованиям(Строка, ДатаНачалаПериодовЛимитирования)
	
	Данные = ДатаНачалаПериодовЛимитирования[Строка.ПериодЛимитирования];
	Если Данные = неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Год = НачалоГода(Данные.ДатаНачала);
	
	Если Год = Объект.ГодЛимитирования Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УдалитьИсточникПоИдентификаторам(Идентификаторы)
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		Строка = Объект.Источник.НайтиПоИдентификатору(Идентификатор);
		Если Строка <> неопределено Тогда
			Объект.Источник.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ВызовыОбщихПроцедурИФункцийСогласованияОбъектов

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ВстраиваниеОПКПереопределяемый.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаПриИзменении_Подключаемый()
	НовоеЗначениеСтатуса = РеквизитСтатусОбъекта(ЭтаФорма);
	ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатуса);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ВстраиваниеОПККлиентПереопределяемый.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()	

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПроизвольноКудаНаСервере()
	
	Объект.Получатель.Очистить();
	Для Каждого Строка Из Объект.Источник Цикл
		Куда = Объект.Получатель.Добавить();
		ЗаполнитьЗначенияСвойств(Куда, Строка);
		Куда.Сумма = Строка.Сумма;
	КонецЦикла;
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОперации()
	
	Если ТипПереноса = 1 Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПроизвольный");
	ИначеЕсли ФлагПериод Тогда
		// С периодом
		Если ФлагЦФО И НЕ ФлагПроект  И НЕ ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодЦФО");
		ИначеЕсли НЕ ФлагЦФО И ФлагПроект И НЕ ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодПроект");
		ИначеЕсли НЕ ФлагЦФО И НЕ ФлагПроект  И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодСтатья");
		ИначеЕсли ФлагЦФО И ФлагПроект И НЕ ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодЦФОПроект");
		ИначеЕсли ФлагЦФО И НЕ ФлагПроект И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФО");
		ИначеЕсли НЕ ФлагЦФО И ФлагПроект И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяПроект");
		ИначеЕсли ФлагЦФО И ФлагПроект И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериодСтатьяЦФОПроект");
		Иначе
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПериод");
		КонецЕсли;
	Иначе
		// Без периода
		Если ФлагЦФО И НЕ ФлагПроект  И НЕ ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносЦФО");
		ИначеЕсли НЕ ФлагЦФО И ФлагПроект И НЕ ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносПроект");
		ИначеЕсли НЕ ФлагЦФО И НЕ ФлагПроект  И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносСтатья");
		ИначеЕсли ФлагЦФО И ФлагПроект И НЕ ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносЦФОПроект");
		ИначеЕсли ФлагЦФО И НЕ ФлагПроект И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФО");
		ИначеЕсли НЕ ФлагЦФО И ФлагПроект И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносСтатьяПроект");
		ИначеЕсли ФлагЦФО И ФлагПроект И ФлагСтатья Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносСтатьяЦФОПроект");
		Иначе
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереносЛимитов.ПереносАналитикиНеУказаны");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаЛимитов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресЛимитовВХранилище);
	
	ИменаРеквизитов = "СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, ЦФО, Проект, ПериодЛимитирования, Сумма";
	
	Объект.Источник.Очистить();
	
	КолонкиИсточника = Объект.Источник.Выгрузить().Колонки;
	Для Каждого СтрокаЛимита Из ТаблицаЛимитов Цикл
		
		Отбор =  Новый Структура();
		
		Для  Каждого Колонки  Из КолонкиИсточника Цикл
			Если Колонки.Имя <> "НомерСтроки" И Колонки.Имя <> "Сумма" И Колонки.Имя <> "ИсходныйНомерСтроки" 
				 И ТаблицаЛимитов.Колонки.Найти(Колонки.Имя) <> Неопределено Тогда 
				Отбор.Вставить(Колонки.Имя, СтрокаЛимита[Колонки.Имя]);
			КонецЕсли;
		КонецЦикла;
		Строка = Объект.Источник.НайтиСтроки(Отбор);
		Если Строка = Неопределено ИЛИ Строка.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Источник.Добавить();
		Иначе 
			ТекущаяСтрока = Объект.Источник.Получить(Строка[0].НомерСтроки-1);
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаЛимита, ИменаРеквизитов);
		
	КонецЦикла;
	ЗаполнитьСвободно();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЛимитовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтрокаУжеСуществует = СтрокаПовторяетСуществующую(Элемент.ТекущиеДанные);
	Если НЕ СтрокаУжеСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		// Если это отмена ввода новой дублирующейся строки, то спокойно завершаемся 
		Возврат;
	Иначе
		ТекстСообщения = НСтр("ru = 'Значения аналитик строки совпадают со значениями аналитик ранее введенной строки. Укажите в строке уникальный набор аналитик и программа запомнит строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПовторяетСуществующую(ТекущиеДанные)
	
	Если Объект.Источник.Количество() <= 1 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ИменаРеквизитов = "ПериодЛимитирования, ЦФО, Проект, СтатьяБюджета, "
		+ АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	
	Отбор =  Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	
	Возврат Объект.Источник.НайтиСтроки(Отбор).Количество() > 1;

КонецФункции

&НаСервере
Процедура ЗаполнитьСвободно()
	
	ИменаРеквизитов = "ВидБюджета, ПериодЛимитирования, Валюта, ЦФО, Проект, СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6";
	
	ТаблицаСвободно = ПолучитьТаблицуСвободно();
	
	СтруктураПоиска = Новый Структура(ИменаРеквизитов);
	
	Для Каждого Строка Из Объект.Источник Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтруктураПоиска.ВидБюджета = Объект.ВидБюджета;
		СтруктураПоиска.Валюта = Объект.Валюта;
		Строки = ТаблицаСвободно.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			Строка.Свободно = 0;
		Иначе
			Строка.Свободно = Строки[0].Свободно;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Получатель Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтруктураПоиска.ВидБюджета = Объект.ВидБюджета;
		СтруктураПоиска.Валюта = Объект.Валюта;
		
		Строки = ТаблицаСвободно.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			Строка.Свободно = 0;
		Иначе
			Строка.Свободно = Строки[0].Свободно;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЛимитовСуммаПриИзменении(Элемент)
	ЗаполнитьСвободно();
КонецПроцедуры

&НаКлиенте
Процедура ВидБюджетаПриИзмененииЗавершение(Результат, ДопПараметры = неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ВидБюджета = Объект.ВидБюджета;
		Возврат;
	КонецЕсли;
	
	ВидБюджетаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти
