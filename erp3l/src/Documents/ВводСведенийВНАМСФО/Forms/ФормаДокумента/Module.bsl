
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	МСФОУХ.ОбновитьУсловноеОформлениеФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
					
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДокументыОснованияПараллельногоУчета"
	 И ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		Объект.ДокументыОснования.Очистить();
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументМСФО(Команда)
	МСФОКлиентУХ.СоздатьДокументМСФО(ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьНМА(Команда)
	
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНЗС(Команда)
	
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Заполнить

&НаКлиенте
Процедура ЗаполнитьПоДокументамОснованиям(Команда)
	
	ДанныеЗаполнения = Новый Структура("ИсточникЗаполнения", "ДокументыОснования");
	МСФОКлиентУХ.ЗаполнитьДокумент(ЭтаФорма, ДанныеЗаполнения, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзУчетнойСистемы(Команда)
	
	Если Не МСФОВНАВызовСервераУХ.ИспользоватьДанныеУчетнойСистемы(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("ИсточникЗаполнения", "ДанныеНСБУ");
	МСФОКлиентУХ.ЗаполнитьДокумент(ЭтаФорма, ДанныеЗаполнения, "ВНА");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКолонкамНСБУ(Команда)
	ЗаполнитьПоКолонкамНСБУСервер();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеВКолонкеПоВыделенным(Команда)
	МСФОКлиентУХ.УстановитьЗначениеВКолонкеПоВыделеннымСтрокам(ЭтаФорма, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаполненияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);	
	ОчиститьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументОснованиеНеУказанГиперссылкаНажатие(Элемент)
	
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА"); 
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДобавитьДокументОснованиеНажатие(Элемент)
	
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА"); 
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА", СтандартнаяОбработка); 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьФормуРедактированияМногострочногоТекста(ЭтаФорма, Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.ПериодОтчета = МСФОВНАВызовСервераУХ.ПолучитьПериодПоДатеПараллельногоУчета(Объект.Дата, Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	Объект.Дата = ОбщегоНазначенияУХ.ПолучитьКонецПериодаОтчета(Объект.ПериодОтчета);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьПроверкуОстатковПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТабличнойЧасти

&НаКлиенте
Процедура ОтобратьСтрокиРасхождений(Команда)
	
	Если (Элементы.ВНА.ОтборСтрок = Неопределено) ИЛИ НЕ Элементы.ВНА.ОтборСтрок.Свойство("ЕстьРасхождения") Тогда
		
		Элементы.ВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Истина;
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Ложь;		
		
	Иначе
		
		Элементы.ВНА.ОтборСтрок = Неопределено;
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСтрокиИзменений(Команда)
	
	Если (Элементы.ВНА.ОтборСтрок = Неопределено) ИЛИ НЕ Элементы.ВНА.ОтборСтрок.Свойство("ЕстьИзменение") Тогда
		
		Элементы.ВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьИзменение", Истина);
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Истина;
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Ложь;
		
	Иначе
		
		Элементы.ВНА.ОтборСтрок = Неопределено;
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ВНАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	МСФОКлиентУХ.ТабличнаяЧастьПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПередНачаломИзменения(Элемент, Отказ)
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАПриИзменении(Элемент)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВНАГруппаВНАПриИзменении(Элемент)
	
	КолонкаИсточник = Прав(Элемент.Имя, СтрДлина(Элемент.Имя)-3); //убираем префикс ТЧ
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(Элементы.ВНА.ТекущиеДанные, ЭтаФорма, КолонкаИсточник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриАктивизацииСтроки(Элемент)
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	ОбновитьВидимостьПодробно(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВНАПослеУдаления(Элемент)
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаВводаМСФОПриИзменении(Элемент)
	ОбновитьВидимостьПодробно(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаМодернизацииМСФОПриИзменении(Элемент)
	ОбновитьВидимостьПодробно(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаВыбытияМСФОПриИзменении(Элемент)
	ОбновитьВидимостьПодробно(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы_СчетаУчета

&НаКлиенте
Процедура ВНАСчетУчетаНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетУчетаМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры
&НаКлиенте
Процедура ВНАСчетВыбытияВНАНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетВыбытияВНАМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы_КоррСчета

&НаКлиенте
Процедура ВНАКоррСчетПриобретениеНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАКоррСчетПриобретениеМСФОПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетЗатратМСФОПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПрофильРаспределения(ЭтаФорма, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетЗатратНСБУПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПрофильРаспределения(ЭтаФорма, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАКоррСчетМодернизацияНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАКоррСчетМодернизацияМСФОПриИзменении(Элемент)	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");		
КонецПроцедуры

&НаКлиенте
Процедура ВНАКоррСчетВыбытиеНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАКоррСчетВыбытиеМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы_ПараметрыАмортизации

&НаКлиенте
Процедура ВНАПараметрыАмортизацииВНАМСФОПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	
	КолонкаИсточник = "ПараметрыАмортизацииВНАМСФО";
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(ТекущаяСтрока, ЭтаФорма, КолонкаИсточник);
	ОбновитьВидимостьПараметровАмортизации(ЭтаФорма, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииНСБУПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьПараметровАмортизации(ЭтаФорма, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииМСФОПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьПараметровАмортизации(ЭтаФорма, ТекущаяСтрока);

КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Общие

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)
	
	ЭтаФорма.КэшируемыеЗначения = Новый Структура;	
	ЭтаФорма.КэшируемыеЗначения.Вставить("СпособыНачисленияАмортизации", 	МСФОВНАВызовСервераУХ.ПолучитьВозможныеСпособыНачисленияАмортизации());
	ЭтаФорма.КэшируемыеЗначения.Вставить("ИменаСубконто", 					Документы.ВводСведенийВНАМСФО.ПолучитьИменаСубконто());
	
	МСФОУХ.ПодготовитьФормуНаСервере(ЭтаФорма, "ВНА", ТекущийОбъект, Ложь);
	
	СчетаГруппыПодробно = МСФОУХ.ПолучитьСчетаГруппыПодобно(ЭтаФорма, "ВНА");
	ЭтаФорма.КэшируемыеЗначения.Вставить("СчетаГруппыПодробно", СчетаГруппыПодробно);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	
	МСФОКлиентСерверУХ.УправлениеФормой(Форма, "ВНА", Ложь, Истина);
		
	Форма.Элементы.ГруппаОстатки.Видимость = Объект.ВыполнятьПроверкуОстатков;
    Форма.Элементы.НСБУЗаполнитьИзУчетнойСистемы.Видимость = Ложь;	
	
	//ввод сведений не заполняется из подсистемы БП, заполнение по основаниям только для режима заполнения "МСФО"
	ДоступноЗаполнениеПоОснованиям = Форма.КэшируемыеЗначения.ВидЗаполнения.ЕстьМСФО И Не Форма.КэшируемыеЗначения.ВидЗаполнения.ЕстьНСБУ;
	Форма.Элементы.ВНАЗаполнитьПоДокументамОснованиям.Видимость = ДоступноЗаполнениеПоОснованиям;
	Форма.Элементы.ГруппаДокументыОснования.Видимость = ДоступноЗаполнениеПоОснованиям;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПодробно(Форма)

	Элементы = Форма.Элементы;
	
	Если НЕ Элементы.ПоказатьПодробно.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	#Если НаКлиенте Тогда
		ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	#Иначе
		ТекущаяСтрокаИД = Элементы.ВНА.ТекущаяСтрока;
		Если ТекущаяСтрокаИД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущаяСтрока = Форма.Объект.ВНА.НайтиПоИдентификатору(ТекущаяСтрокаИД);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли	
	
	ТекущийКлассВНА = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ГруппаВНА, "КлассВНА");
	
	Элементы.ВНАКоличествоНСБУ.Видимость = (ТекущийКлассВНА = ПредопределенноеЗначение("Перечисление.КлассыВНА.НезавершенноеСтроительство"));
	
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(Форма, ТекущаяСтрока, "ВНА");
	
	ОбновитьВидимостьПараметровАмортизации(Форма, ТекущаяСтрока);
	ДатаНачала = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Форма.Объект.ПериодОтчета, "ДатаНачала");
	ОбновитьВидимостьКоррСчета(Форма, ТекущаяСтрока, ДатаНачала);

	МСФОКлиентСерверУХ.ВидимостьПодробно(Форма, Ложь, "ВНА");
	МСФОКлиентСерверУХ.ОбновитьВидимостьСубконтоГруппыПодробно(Форма, ТекущаяСтрока, "ВНА");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовСтрокиТЧ

&НаСервере
Процедура ЗаполнитьПоКолонкамНСБУСервер()

	МСФОУХ.ЗаполнитьПоКолонкамНСБУСервер(ЭтаФорма);

КонецПроцедуры    

#КонецОбласти

#Область ЗаполнениеТЧ

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокумент(РезультатВопроса = Неопределено, ДанныеЗаполнения) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		Возврат;	
	КонецЕсли;
    
    ЗаполнитьДокумент(ДанныеЗаполнения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	МСФОУХ.ЗаполнитьПоКолонкамНСБУСервер(ЭтаФорма);
	МСФОКлиентСерверУХ.ОбновитьВидимостьДокументыОснования(ЭтаФорма);
	ЭтаФорма.Модифицированность = Истина;
	
	Для каждого СтрокаВНА Из Объект.ВНА Цикл
		ОбновитьПрофильРаспределения(ЭтаФорма, СтрокаВНА);		
	КонецЦикла;
	
	ОбновитьВидимостьПодробно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицы()

	МСФОУХ.ОчиститьТаблицы(ЭтаФорма);

КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьТекущимиДаннымиСервер(ЗаполнитьРеквизиты = Ложь, ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь, СтрокаВНА = Ложь) 
	
	Если СтрокаВНА Тогда		
		СтрокиДляОбработки = Новый Массив;
		СтрокиДляОбработки.Добавить(Объект.ВНА.НайтиПоИдентификатору(Элементы.ВНА.ТекущаяСтрока));		
	Иначе
		СтрокиДляОбработки = Объект.ВНА;
	КонецЕсли;
	
	ЗаполнитьДоступность = Ложь;
	
	СтруктураДействий = Новый Структура;
	Если ЗаполнитьДоступность Тогда
		СтруктураДействий.Вставить("ЗаполнитьДоступностьПоИменамСубконто", КэшируемыеЗначения.ИменаСубконто);
	КонецЕсли;	
	
	КэшируемыеЗначенияТЧ = Неопределено;	
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьТЧ_ВНА(СтрокиДляОбработки, СтруктураДействий, КэшируемыеЗначенияТЧ);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область Оформление

&НаКлиенте
Процедура ПоказатьПодробноВНА(Команда)	
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Истина, "ВНА");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыИсточника()

	РеквизитыГруппаВНА = Новый Структура;
	РеквизитыГруппаВНА.Вставить("СчетУчетаМСФО",			"СчетУчетаПервоначальнойСтоимости");
	РеквизитыГруппаВНА.Вставить("СчетУчетаСубконто1МСФО", 	"СчетУчетаПервоначальнойСтоимостиСубконто1");
	РеквизитыГруппаВНА.Вставить("СчетУчетаСубконто2МСФО", 	"СчетУчетаПервоначальнойСтоимостиСубконто2");
	РеквизитыГруппаВНА.Вставить("СчетУчетаСубконто3МСФО", 	"СчетУчетаПервоначальнойСтоимостиСубконто3");
	
	Возврат Новый Структура("ЗависимостиРеквизитов,КолонкаДата", РеквизитыГруппаВНА, "ДатаВводаМСФО");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКоррСчета(Форма, ТекущаяСтрока, ДатаНачалаПериода)
	
	Элементы = Форма.Элементы;
	
	Элементы.ВНАГруппаКоррСчетПриобретениеНСБУ.Видимость 	= (ТекущаяСтрока.ДатаВводаНСБУ >= ДатаНачалаПериода);
	Элементы.ВНАГруппаКоррСчетПриобретениеМСФО.Видимость 	= (ТекущаяСтрока.ДатаВводаМСФО >= ДатаНачалаПериода);
	
	Элементы.ВНАГруппаСчетЗатратНСБУ.Видимость 				= НЕ ТекущаяСтрока.СпособНачисленияАмортизацииНСБУ.Пустая();
	Элементы.ВНАГруппаСчетЗатратМСФО.Видимость 				= НЕ ТекущаяСтрока.СпособНачисленияАмортизацииМСФО.Пустая();
	
	Элементы.ВНАГруппаКоррСчетМодернизацияНСБУ.Видимость 	= (ТекущаяСтрока.ДатаМодернизацииНСБУ >= ДатаНачалаПериода);
	Элементы.ВНАГруппаКоррСчетМодернизацияМСФО.Видимость 	= (ТекущаяСтрока.ДатаМодернизацииМСФО >= ДатаНачалаПериода);
	
	Элементы.ВНАГруппаКоррСчетВыбытиеНСБУ.Видимость			= (ТекущаяСтрока.ДатаВыбытияНСБУ >= ДатаНачалаПериода);
	Элементы.ВНАГруппаКоррСчетВыбытиеМСФО.Видимость			= (ТекущаяСтрока.ДатаВыбытияМСФО >= ДатаНачалаПериода);
	Элементы.ВНАВидОперацииВыбытия.Видимость 				= (ТекущаяСтрока.ДатаВыбытияМСФО >= ДатаНачалаПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПараметровАмортизации(Форма, ТекущаяСтрока)
	
	Элементы = Форма.Элементы;
	
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(Форма, ТекущаяСтрока, "ВНА");
	
	МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
		Форма, 
		ТекущаяСтрока.СпособНачисленияАмортизацииНСБУ, 
		ПолучитьРеквизитыПараметровАмортизации(Ложь),
		Форма.КэшируемыеЗначения.СпособыНачисленияАмортизации);
			
	МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
		Форма, 
		ТекущаяСтрока.СпособНачисленияАмортизацииМСФО, 
		ПолучитьРеквизитыПараметровАмортизации(Истина),
		Форма.КэшируемыеЗначения.СпособыНачисленияАмортизации);
		
	Элементы.ГруппаСчетАмортизацииНСБУ.Видимость = НЕ ТекущаяСтрока.СпособНачисленияАмортизацииНСБУ.Пустая();
	Элементы.ГруппаСчетАмортизацииМСФО.Видимость = НЕ ТекущаяСтрока.СпособНачисленияАмортизацииМСФО.Пустая();	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРеквизитыПараметровАмортизации(РеквизитыМСФО = Истина)

	Результат = Новый Структура;
	
	Если РеквизитыМСФО = Истина Тогда
		
		Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскоренияМСФО");
		Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработкиМСФО");
		Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАПредполагаемыйОбъемВыработкиМСФО");
		Результат.Вставить("СрокПолезногоИспользования", 	"ВНАСрокПолезногоИспользованияМСФО");
		Результат.Вставить("ПрофильРаспределения", 			"ВНАСпособОтраженияРасходовПоАмортизацииМСФО");
		
	Иначе
		
		Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскоренияНСБУ");
		Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработкиНСБУ");
		Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАПредполагаемыйОбъемВыработкиНСБУ");
		Результат.Вставить("СрокПолезногоИспользования", 	"ВНАСрокПолезногоИспользованияНСБУ");
		//Результат.Вставить("ПрофильРаспределения", 			"ВНАСпособОтраженияРасходовПоАмортизацииНСБУ");
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПрофильРаспределения(Форма, ТекущаяСтрока)

	Если ТекущаяСтрока.СпособОтраженияРасходовПоАмортизацииМСФО.Пустая()
		И ТекущаяСтрока.ПараметрыАмортизацииВНАМСФО.Пустая() 
		И НЕ ТекущаяСтрока.СчетЗатратМСФО.Пустая() Тогда
		
		ТекущаяСтрока.СпособОтраженияРасходовПоАмортизацииМСФО 
			= МСФОВНАВызовСервераУХ.ПолучитьПрофильРаспределения(
					ТекущаяСтрока.СчетЗатратМСФО,
					ТекущаяСтрока.СчетЗатратСубконто1МСФО,
					ТекущаяСтрока.СчетЗатратСубконто2МСФО,
					ТекущаяСтрока.СчетЗатратСубконто3МСФО);
					
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МСФОКлиентСерверУХ.ОбновитьВыборТипаВНА(ЭтаФорма, НоваяСтрока, Копирование);
	
	Если КэшируемыеЗначения.Свойство("ИспользуютсяТК") И КэшируемыеЗначения.ИспользуютсяТК Тогда
		ТекущаяСтрока.СторнироватьДанныеНСБУ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
