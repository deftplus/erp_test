#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ЭтоВнешнийПользователь =
		ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	#Область УниверсальныеПроцессыСогласование
	АккредитацияПоставщиковУХ.ИнициализироватьПодсистемуСогласованияПоВнешнемуПоставщику(
		ЭтаФорма);
	#КонецОбласти
	СтараяЗакупка = Объект.ЗакупочнаяПроцедура;
	УстановитьПредставлениеСтатусаАккредитации();
	УстановитьОформлениеФормыВнешнегоПоставщика();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	#Область УниверсальныеПроцессыСогласование
		Если ИмяСобытия = "ОбъектСогласован" ИЛИ ИмяСобытия = "ОбъектОтклонен" ИЛИ ИмяСобытия = "МаршрутИнициализирован" ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
			ОпределитьСостояниеОбъекта();
			УстановитьОформлениеФормы();
		КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ Отказ И НЕ ЭтоВнешнийПользователь
			И Объект.РешениеПоДокументу = ПредопределенноеЗначение(
					"Перечисление.ВидыРешенийПоДокументуКвалификации.ПоложительноеРешение") Тогда
		мОшибок =
			АккредитацияПоставщиковКлиентУХ.ПроверитьУстановленностьРешенийПоСтрокам(
				Объект, 
				"ТребованияЛота", 
				"РешениеПоложительно");
		ЦентрализованныеЗакупкиКлиентСерверУХ.СообщитьПользователюИзМассива(
			мОшибок);
		Если ПустаяСтрока(Объект.ОбоснованиеРешения) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнено решение по документу!";
			Сообщение.Поле = "Объект.ОбоснованиеРешения";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьКвалификацииУчастников", Объект.ЗакупочнаяПроцедура, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ОповеститьПоставщикаОРешении(Команда)
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо записать документ перед отправкой оповещения!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	АккредитацияПоставщиковВызовСервераУХ.ОповеститьПоставщикаОРешенииПоОбъекту(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ОбработатьИзменениеКлючевыхРеквизитовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочнаяПроцедураПриИзменении(Элемент)
	Если СтараяЗакупка <> Объект.ЗакупочнаяПроцедура Тогда
		ЗакупочнаяПроцедураПриИзмененииНаСервере();
		СтараяЗакупка = Объект.ЗакупочнаяПроцедура;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РешениеПоДокументуПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаСогласование(Команда)
	АккредитацияПоставщиковКлиентУХ.ОтправитьНаСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТребованияЛотаЗначениеМножестваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ТребованияЛота.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ЗаголовокТекста = Строка(ТекДанные.Критерий);
		Иначе
			ЗаголовокТекста = "";
		КонецЕсли;
		АккредитацияПоставщиковКлиентУХ.ТабличнаяЧастьОткрытьРедакторМногострочногоТекста(ЭтаФорма, "Объект.ТребованияЛота", "ТребованияЛота", "ЗначениеМножества", ЗаголовокТекста);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребованияЛотаРедактироватьТекст(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяРеквизитаПоИмениЭлемента = СтрЗаменить(Элемент.Имя, "ТребованияЛота", "");
	АккредитацияПоставщиковКлиентУХ.ТабличнаяЧастьОткрытьРедакторМногострочногоТекста(ЭтаФорма, "Объект.ТребованияЛота", "ТребованияЛота", ИмяРеквизитаПоИмениЭлемента, Элемент.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ТребованияЛотаПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.ТребованияЛота.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Критерий) Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаЗначениеМножества = Элементы.ТребованияЛотаЗначениеМножества;
	
	ОписаниеТипаКритерия = ВыборОбъектовВызовСервераУХ.ПолучитьОписаниеТипаКритерия(ТекДанные.Критерий);
	КолонкаЗначениеМножества.ОграничениеТипа = ОписаниеТипаКритерия;
	ТекДанные.ЗначениеМножества = ОписаниеТипаКритерия.ПривестиЗначение(ТекДанные.ЗначениеМножества);
	
	флРедактированиеСтроки = ОписаниеТипаКритерия.СодержитТип(Тип("Строка"));
	флВыборЗначения = ОписаниеТипаКритерия.СодержитТип(Тип("СправочникСсылка.ЗначенияПеречислимыхКритериев"));
	
	КолонкаЗначениеМножества.МногострочныйРежим = флРедактированиеСтроки;
	КолонкаЗначениеМножества.КнопкаВыбора = флРедактированиеСтроки ИЛИ флВыборЗначения;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТребованиямиИзЛота(Команда)
	ОбработкаПодтвержденияОчисткиТребований =
		Новый ОписаниеОповещения(
			"ОбработатьПодтверждениеОчисткиТребований", 
			ЭтаФорма);
	ПоказатьВопрос(ОбработкаПодтвержденияОчисткиТребований,
		"Требования будут перезаполнены. Вы уверены?",
		РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтверждениеОчисткиТребований(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТребованиямиИзЛотаНаСервере();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура УстановитьОформлениеФормы()
	ТекСтатус = РеквизитСтатусОбъекта(ЭтаФорма);
	флЧерновик = (ТекСтатус = Перечисления.СостоянияСогласования.Черновик) ИЛИ НЕ ЗначениеЗаполнено(ТекСтатус);
	флУтвержденаИлиОтменена = (ТекСтатус = Перечисления.СостоянияСогласования.Утверждена) ИЛИ
		(ТекСтатус = Перечисления.СостоянияСогласования.Отклонена);
	флЕстьРешениеПоДокументу = флУтвержденаИлиОтменена И
		(Объект.РешениеПоДокументу <> Перечисления.ВидыРешенийПоДокументуКвалификации.РешениеНеПринято);
			
	Элементы.ФормаОповеститьПоставщикаОРешении.Видимость = НЕ ЭтоВнешнийПользователь И флЕстьРешениеПоДокументу И Объект.Проведен;
	
	Элементы.ДокументАккредитации.Видимость = ЗначениеЗаполнено(Объект.ДокументАккредитации);
КонецПроцедуры

// Вызывается один раз при создании формы.
// Устанавливает свойства элементов формы в зависимости
// от того обыйный или внешний пользователь ее открыл.
//
&НаСервере
Процедура УстановитьОформлениеФормыВнешнегоПоставщика() Экспорт
	ТекСтатус = РеквизитСтатусОбъекта(ЭтаФорма);
	флЧерновик = (ТекСтатус = Перечисления.СостоянияСогласования.Черновик)
				ИЛИ НЕ ЗначениеЗаполнено(ТекСтатус);
	
	АккредитацияПоставщиковУХ.УстановитьОбщееОформлениеФормыЭлементаВнешнегоПоставщика(
			ЭтаФорма, флЧерновик, Истина, Истина, Ложь);
			
	Элементы.ЗакупочнаяПроцедура.КнопкаОткрытия = НЕ ЭтоВнешнийПользователь;		
	Элементы.ТребованияЛотаРешениеПоложительно.Видимость = НЕ ЭтоВнешнийПользователь;
	Элементы.ТребованияЛотаКомментарийКомиссии.Видимость = НЕ ЭтоВнешнийПользователь;
	Элементы.ПриказОНазначенииКомиссии.Видимость = НЕ ЭтоВнешнийПользователь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПовторнуюАккредитацию()
	Если ЗначениеЗаполнено(Объект.АнкетаПоставщика) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор_ = Новый Соответствие;
		Отбор_.Вставить("Ссылка", Новый Структура("Значение,ВидСравнения", Объект.Ссылка, "<>"));
		ПредыдущаяАккредитация_ = АккредитацияПоставщиковУХ.ПолучитьДокументыАккредитации(
				"АккредитацияПоставщика", 
			Объект.Организация, 
			Объект.АнкетаПоставщика, 
			АккредитацияПоставщиковУХ.ПолучитьДатуПоискаАккредитованныхПоставщиков(
				Объект.ЗакупочнаяПроцедура), 
			Отбор_);
		Если ЗначениеЗаполнено(ПредыдущаяАккредитация_) Тогда
			Объект.ДокументАккредитации = ПредыдущаяАккредитация_;
		Иначе
			Объект.ДокументАккредитации = Документы.АккредитацияПоставщика.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Объект.ДокументАккредитации = Документы.АккредитацияПоставщика.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКлючевыхРеквизитовНаСервере()
	ЗаполнитьПовторнуюАккредитацию();
	УстановитьПредставлениеСтатусаАккредитации();
	ЗаполнитьТребованиямиИзЛотаНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТребованиямиИзЛотаНаСервере()
	Объект.ТребованияЛота.Загрузить(
		АккредитацияПоставщиковУХ.ПолучитьТребованияЗакупкиДляПоставщика(
			Объект.ЗакупочнаяПроцедура,
			Объект.АнкетаПоставщика,
			Объект.ТребованияЛота.Выгрузить()));
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеСтатусаАккредитации()
	Если НЕ ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		Элементы.СостояниеАккредитации.Заголовок =
			НСтр("ru='Укажите закупочную процедуру для определения состояния аккредитации!'");
		Элементы.СостояниеАккредитации.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		Аккредитован = Ложь;
	Иначе
		ДанныеАккредитации = 
			АккредитацияПоставщиковУХ.УстановитьПредставлениеСтатусаАккредитацииНаФорме(
				ЭтаФорма,
				Объект.Организация,
				Объект.АнкетаПоставщика,
				АккредитацияПоставщиковУХ.ПолучитьДатуПоискаАккредитованныхПоставщиков(
					Объект.ЗакупочнаяПроцедура));
		Аккредитован = (ДанныеАккредитации <> Неопределено)
			И (ДанныеАккредитации.Состояние = 
				Перечисления.СостоянияАккредитацииПоставщиков.Аккредитован);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗакупочнаяПроцедураПриИзмененииНаСервере()
	Объект.Организация = Объект.ЗакупочнаяПроцедура.ОрганизаторЗакупки;
	ОбработатьИзменениеКлючевыхРеквизитовНаСервере();
КонецПроцедуры

		
#КонецОбласти


#Область ПереопределеноУниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта()
	Если ЭтоВнешнийПользователь Тогда
		СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Объект.Ссылка);
		СтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка);
	Иначе
		ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область УниверсальныеПроцессыСогласование


&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние,,,ЭтаФорма);
	
КонецФункции

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта() Экспорт
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции


#КонецОбласти
