#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ОбесценениеВНА");
	
	ПринятиеКУчетуОСЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		ДопПараметры.ТолькоПомеченные = Регистры <> Неопределено;
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаАрендованныеОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаАмортизацияОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСоставЕГДС(Запрос, ТекстыЗапроса, Регистры);
		
		ПринятиеКУчетуОСЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  Регистратор			 	- ДокументСсылка.ПринятиеКУчетуОС2_4 - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут
//                                                      использоваться для формирования движений.
//
// Возвращаемое значение:
//  Структура - Содержит таблицы движений.
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, МенеджерВременныхТаблиц) Экспорт
	
	СписокРегистров = 
		"ПрочиеРасходы,ПартииПрочихРасходов,ДвиженияДоходыРасходыПрочиеАктивыПассивы,
		|СтоимостьОС,АмортизацияОС,
		|ПараметрыАмортизацииОСБУ,ПараметрыАмортизацииОСУУ,ПервоначальныеСведенияОС,
		|ОтражениеДокументовВРеглУчете";
	
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, СписокРегистров, ДопПараметры);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ИзменениеПараметровОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.КорректировкаСтоимостиИАмортизацииОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаСписка";
	КонецЕсли;
	
	ПринятиеКУчетуОСЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Принятие к учету ОС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Порядок	- Число	- Порядок команды.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Порядок = 0) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОС2_4) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПринятиеКУчетуОС2_4);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.Порядок = Порядок;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ВнеоборотныеАктивыКлиент.ПечатьЭтикетокОбъектовЭксплуатацииИзДокумента";
		КомандаПечати.МенеджерПечати = "Документ.ПринятиеКУчетуОС2_4";
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки';
											|en = 'Labels'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	ПринятиеКУчетуОСЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ПринятиеКУчетуОСЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область РабочееМесто

// Формирует данные для рабочего места.
// 
// Параметры:
//  Параметры - Структура - Содержит:
//  	* Организация - СправочникСсылка.Организации -
//  	* Дата - Дата -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные рабочего места.
Функция ДанныеРабочегоМеста(Параметры) Экспорт
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеСтатьи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДоступныеСтатьи
	|
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ДоступныеСтатьи
	|ГДЕ
	|	ДоступныеСтатьи.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|	И (ДоступныеСтатьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|		ИЛИ ДоступныеСтатьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|	И (ДоступныеСтатьи.РасходыНаОбъектыЭксплуатации
	|		ИЛИ ДоступныеСтатьи.РасходыНаОбъектыСтроительства)
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочиеРасходы.ОсновноеСредство КАК ОсновноеСредство,
	|	ПрочиеРасходы.Организация КАК Организация,
	|	
	|	СУММА(ПрочиеРасходы.СтоимостьУпр) КАК СтоимостьУпр,
	|	СУММА(ПрочиеРасходы.СтоимостьРегл) КАК СтоимостьРегл
	|
	|ПОМЕСТИТЬ ПрочиеРасходы
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрочиеРасходы.АналитикаРасходов КАК ОсновноеСредство,
	|		ПрочиеРасходы.Организация КАК Организация,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ПрочиеРасходы.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьУпр,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ПрочиеРасходы.СуммаРеглОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьРегл
	|
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&НачалоМесяца,
	|			(Организация = &Организация
	|					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И СтатьяРасходов В (
	|					ВЫБРАТЬ
	|						ДоступныеСтатьи.Ссылка
	|					ИЗ
	|				 		ДоступныеСтатьи)
	|			) КАК ПрочиеРасходы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПрочиеРасходы.АналитикаРасходов КАК ОсновноеСредство,
	|		ПрочиеРасходы.Организация КАК Организация,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ВЫБОР 
	|						КОГДА ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ПрочиеРасходы.СуммаУпр
	|						ИНАЧЕ -ПрочиеРасходы.СуммаУпр
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьУпр,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ВЫБОР 
	|						КОГДА ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ПрочиеРасходы.СуммаРегл
	|						ИНАЧЕ -ПрочиеРасходы.СуммаРегл
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьРегл
	|
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|	ГДЕ
	|		ПрочиеРасходы.Период МЕЖДУ &НачалоМесяца И &Дата
	|		И ПрочиеРасходы.Активность
	|
	|		И (ПрочиеРасходы.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|		И ПрочиеРасходы.СтатьяРасходов В (
	|					ВЫБРАТЬ
	|						ДоступныеСтатьи.Ссылка
	|					ИЗ
	|				 		ДоступныеСтатьи)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаТовары.АналитикаРасходов КАК ОсновноеСредство,
	|		ДанныеДокумента.Организация КАК Организация,
	|	
	|		0 КАК СтоимостьУпр,
	|		0 КАК СтоимостьРегл
	|
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Дата МЕЖДУ &НачалоМесяца И &Дата
	|		И ДанныеДокумента.Проведен
	|
	|		И (ДанныеДокумента.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|		И ТаблицаТовары.СтатьяРасходов В (
	|					ВЫБРАТЬ
	|						ДоступныеСтатьи.Ссылка
	|					ИЗ
	|				 		ДоступныеСтатьи)
	|
	|	) КАК ПрочиеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.ОсновноеСредство,
	|	ПрочиеРасходы.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	СписокЗапросов.Добавить(ТекстЗапроса);

	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаСостояниеОС();
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПорядокУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеРегл,
		|	МАКСИМУМ(ЕСТЬNULL(ПорядокУчетаОС.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))) КАК СостояниеУпр
		|ПОМЕСТИТЬ СостояниеОС
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&Дата, ОсновноеСредство В
		|		(ВЫБРАТЬ
		|			ПрочиеРасходы.ОсновноеСредство
		|		ИЗ
		|			ПрочиеРасходы КАК ПрочиеРасходы)) КАК ПорядокУчетаОС
		|СГРУППИРОВАТЬ ПО
		|	ПорядокУчетаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
	КонецЕсли;
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасходы.ОсновноеСредство КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.ОсновноеСредство ССЫЛКА Справочник.ОбъектыЭксплуатации
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
	|	КОНЕЦ КАК ВидАналитикиКапитализацииРасходов,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.ОсновноеСредство ССЫЛКА Справочник.ОбъектыЭксплуатации
	|			ТОГДА ПрочиеРасходы.ОсновноеСредство.ТипОС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОС.ПустаяСсылка)
	|	КОНЕЦ КАК ТипОС,
	|	ПрочиеРасходы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.ОсновноеСредство ССЫЛКА Справочник.ОбъектыЭксплуатации
	|			ТОГДА ЕСТЬNULL(СостояниеОС.СостояниеУпр, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) 
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|	КОНЕЦ КАК СостояниеУпр,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.ОсновноеСредство ССЫЛКА Справочник.ОбъектыЭксплуатации
	|			ТОГДА ЕСТЬNULL(СостояниеОС.СостояниеРегл, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) 
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|	КОНЕЦ КАК СостояниеРегл,
	|	ПрочиеРасходы.СтоимостьУпр КАК СтоимостьУпр,
	|	ПрочиеРасходы.СтоимостьРегл КАК СтоимостьРегл
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы
	|	ЛЕВОЕ СОЕДИНЕНИЕ СостояниеОС КАК СостояниеОС
	|	ПО ПрочиеРасходы.ОсновноеСредство = СостояниеОС.ОсновноеСредство
	|ГДЕ
	|	ПрочиеРасходы.СтоимостьУпр <> 0
	|	ИЛИ ПрочиеРасходы.СтоимостьРегл <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Ссылка";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(?(Параметры.Дата <> '000101010000', Параметры.Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Дата", КонецДня(?(Параметры.Дата <> '000101010000', Параметры.Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСтоимость(Объект, ВыбранныеСтроки = Неопределено) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	&ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	&ФактическаяСтоимость                      КАК ФактическаяСтоимость,
	|	&ГруппаФинансовогоУчета                    КАК ГруппаФинансовогоУчета,
	|	&ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	&НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА &ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
	|			ТОГДА &ОбъектСтроительства
	|		ИНАЧЕ ТаблицаОС.ОсновноеСредство
	|	КОНЕЦ                                      КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	&ОтражатьВБУ                               КАК ОтражатьВБУ,
	|	&ОтражатьВНУ                               КАК ОтражатьВНУ
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Период,
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма КАК Сумма,
	|	РасходыПоДокументам.СуммаУпр КАК СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС КАК СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл КАК СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	
	ВидАналитикиКапитализацииРасходов = 
		?(ЗначениеЗаполнено(Объект.ВидАналитикиКапитализацииРасходов), 
			Объект.ВидАналитикиКапитализацииРасходов, 
			Перечисления.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства);
			
	ХозяйственнаяОперация = 
		?(ЗначениеЗаполнено(Объект.ХозяйственнаяОперация), 
			Объект.ХозяйственнаяОперация, 
			Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС);
			
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ВидАналитикиКапитализацииРасходов", ВидАналитикиКапитализацииРасходов);
	Запрос.УстановитьПараметр("ФактическаяСтоимость", Ложь);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ВариантПримененияЦелевогоФинансирования", Объект.ВариантПримененияЦелевогоФинансирования);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОбъектСтроительства", Объект.ОбъектСтроительства);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
	Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ВнеоборотныеАктивы.УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	ТаблицаОС = Объект.ОС.Выгрузить(ВыбранныеСтроки);
	ТаблицаОС.Сортировать("НомерСтроки Возр"); // Нужна сортировка как при расчете стоимости.
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	
	Результат = Запрос.Выполнить();
	
	ПараметрыРасчетаСтоимости = ВнеоборотныеАктивы.ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.ВидАналитикиКапитализацииРасходов = ВидАналитикиКапитализацииРасходов;
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ОбъектУчета", "ОсновноеСредство");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета, ТаблицаОС, СоответствиеПолей);
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВРеглУчете, "ОтражатьВРеглУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВУпрУчете, "ОтражатьВУпрУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВБУ, "ОтражатьВБУ");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВНУ, "ОтражатьВНУ");
	РасходыПоДокументу = ВнеоборотныеАктивы.РассчитатьРасходыПоДокументу(Результат.Выгрузить(), ПараметрыРасчетаСтоимости);
							
	РасходыПоДокументу.Свернуть("ОбъектУчета", "СуммаРегл,СуммаУпр");
	
	Если ВыбранныеСтроки <> Неопределено Тогда
		СписокСтрок = ВыбранныеСтроки;
	Иначе
		СписокСтрок = Объект.ОС;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.ОсновноеСредство);
		СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокРасходы.Количество() <> 0 Тогда
			Если Объект.ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = СписокСтрокРасходы[0].СуммаРегл;
			КонецЕсли; 
			Если Объект.ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = СписокСтрокРасходы[0].СуммаУпр;
			КонецЕсли;
		Иначе
			ДанныеСтроки.СтоимостьУУ = 0;
			ДанныеСтроки.СтоимостьБУ = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ПринятиеКУчетуОСЛокализация.ЗаполнитьСтоимость(Объект, СписокСтрок, ТаблицаОС);
	
КонецПроцедуры

Функция ПредставлениеРеквизитов(Организация) Экспорт

	ПредставлениеРеквизитов = Новый Соответствие;

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	ВалютаУпрПредставление = Строка(ВалютаУпр);
	ВалютаРеглПредставление = Строка(ВалютаРегл);
	
	ВалютаРеглЗаполнена = ЗначениеЗаполнено(ВалютаРегл);
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	Если ВедетсяРегламентированныйУчетВНА Тогда
		
		Если ВалютаРеглЗаполнена Тогда
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость регл. (%1)';
																				|en = 'Local cost (%1)'"), ВалютаРеглПредставление));
		Иначе
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", НСтр("ru = 'Стоимость регл.';
																	|en = 'Local cost'"));
		КонецЕсли;
		
		ПредставлениеРеквизитов.Вставить("ОС.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость упр. (%1)';
																			|en = 'Manag. cost (%1)'"), ВалютаУпрПредставление));
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																					|en = 'Residual value'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																							|en = 'Residual value (%1)'"), ВалютаУпрПредставление));
			Если ВалютаРеглЗаполнена Тогда
				ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																									|en = 'Residual value (%1)'"), ВалютаРеглПредставление));
			Иначе
				ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																						|en = 'Residual value'"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", НСтр("ru = 'Стоимость';
																	|en = 'Cost'"));
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьУУ", НСтр("ru = 'Стоимость';
																	|en = 'Cost'"));
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																					|en = 'Residual value'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("ОС.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)';
																				|en = 'Cost (%1)'"), ВалютаУпрПредставление));
			ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																							|en = 'Residual value (%1)'"), ВалютаУпрПредставление));
			Если ВалютаРеглЗаполнена Тогда
				ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																									|en = 'Residual value (%1)'"), ВалютаРеглПредставление));
				ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)';
																					|en = 'Cost (%1)'"), ВалютаРеглПредставление));
			Иначе
				ПредставлениеРеквизитов.Вставить("ОС.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																						|en = 'Residual value'"));
				ПредставлениеРеквизитов.Вставить("ОС.СтоимостьБУ", НСтр("ru = 'Стоимость';
																		|en = 'Cost'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ПредставлениеРеквизитов;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПринятиеКУчетуОС2_4";
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("Партнер", "ДанныеДокумента.Договор.Партнер");
	ПереопределениеРасчетаПараметров.Вставить("Контрагент", "ДанныеДокумента.Договор.Контрагент");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ТекстЗапроса = ПринятиеКУчетуОСЛокализация.АдаптированныйТекстЗапросаДвиженийПоРегистру(
							ИмяРегистра, ПереопределениеРасчетаПараметров, СинонимТаблицыДокумента);
		
	КонецЕсли;
		
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров,
										ТекстыЗапросаВременныхТаблиц);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Договор.Партнер КАК Партнер,
	|	ДанныеДокумента.Договор.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Местонахождение КАК Местонахождение,
	|	ДанныеДокумента.МОЛ КАК МОЛ,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.ОбъектСтроительства КАК ОбъектСтроительства,
	|	ДанныеДокумента.ВидАналитикиКапитализацииРасходов КАК ВидАналитикиКапитализацииРасходов,
	|	ДанныеДокумента.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
	|	ДанныеДокумента.АдресМестонахождения КАК АдресМестонахождения,
	|	ДанныеДокумента.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	&ПринятиеКУчетуОС_СтатьяРасходовУУ КАК СтатьяРасходовУУ,
	|	&ПринятиеКУчетуОС_АналитикаРасходовУУ КАК АналитикаРасходовУУ,
	|	&ПринятиеКУчетуОС_ВариантРаспределенияРасходовУпр КАК ВариантРаспределенияРасходовУпр,
	|	ДанныеДокумента.НачислятьАмортизациюУУ КАК НачислятьАмортизациюУУ,
	|	ДанныеДокумента.СобытиеОС КАК СобытиеОС,
	|	ДанныеДокумента.СрокИспользованияУУ КАК СрокИспользованияУУ,
	|	ДанныеДокумента.КоэффициентУскоренияУУ КАК КоэффициентУскоренияУУ,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
	|		ИНАЧЕ ДанныеДокумента.МетодНачисленияАмортизацииУУ
	|	КОНЕЦ КАК МетодНачисленияАмортизацииУУ,
	|	&ПринятиеКУчетуОС_РеквизитыДокумента,
	|	НастройкиХозяйственныхОпераций.Ссылка КАК НастройкаХозяйственнойОперации,
	|	ДанныеДокумента.ЕГДС
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ПринятиеКУчетуОСЛокализация.ДобавитьВТекстЗапросаРеквизитыДокумента(Запрос.Текст, "ДанныеДокумента");
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НомерПакета", 0);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	СписокРазрешенныхВариантовРаспределенияРасходов = Новый Массив;
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	Запрос.УстановитьПараметр("СписокРазрешенныхВариантовРаспределенияРасходов", СписокРазрешенныхВариантовРаспределенияРасходов);
	
	ПринятиеКУчетуОСЛокализация.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуОС2_4"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru = 'Принятие к учету ОС';
																	|en = 'Fixed assets — Initial recognition'"));
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ОС", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства);
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());

	ЗначенияПараметровПроведения.Вставить(
		"ХО_СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету", 
		Перечисления.ХозяйственныеОперации.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету);
	
	ЗначенияПараметровПроведения.Вставить(
		"НастройкаХО_СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету", 
		Справочники.НастройкиХозяйственныхОпераций.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету);

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		ЗначенияПараметровПроведения.Вставить(
			"ЕстьУчетСебестоимости", 
			РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Реквизиты.Период));
	
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Местонахождение                        КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Проведен                               КАК Проведен,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	&СобытиеОС                              КАК СобытиеОС,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестонахождениеОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	&Организация                        КАК Организация,
	|	ТаблицаОС.ОсновноеСредство          КАК ОсновноеСредство,
	|	&МОЛ                                КАК МОЛ,
	|	&Местонахождение                    КАК Местонахождение,
	|	&АдресМестонахождения               КАК АдресМестонахождения,
	|	&АдресМестонахожденияЗначение       КАК АдресМестонахожденияЗначение,
	|	&ОтражатьВРеглУчете                 КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                  КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаПорядокУчетаОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                 КАК Период,
		|	&Организация                            КАК Организация,
		|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	&ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
		|	ТаблицаОС.ПоказательНаработки           КАК ПоказательНаработки,
		|	ТаблицаОС.ОбъемНаработки                КАК ОбъемНаработки,
		|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка";
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаПорядокУчетаОСУУ();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                 КАК Период,
		|	&Организация                            КАК Организация,
		|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК Состояние,
		|	&НачислятьАмортизациюУУ                 КАК НачислятьАмортизациюУУ,
		|	&СтатьяРасходовУУ                       КАК СтатьяРасходов,
		|	&АналитикаРасходовУУ                    КАК АналитикаРасходов
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка";
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	&Период                             КАК ДатаПоследнегоИзменения,
	|	&Организация                        КАК Организация,
	|	ТаблицаОС.ОсновноеСредство          КАК ОсновноеСредство,
	|	&СрокИспользованияУУ                КАК СрокИспользования,
	|	&СрокИспользованияУУ                КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.ОбъемНаработки            КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	&КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	&МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|
	|	ТаблицаОС.ЛиквидационнаяСтоимость       КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл   КАК ЛиквидационнаяСтоимостьРегл,
	|
	|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК СтоимостьДляВычисленияАмортизации,
	|
	|	ВЫБОР
	|		КОГДА НЕ &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизацииРегл
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	&Организация КАК Организация,
		|	&Период КАК ДатаВводаВЭксплуатациюУУ,
		|	&Ссылка КАК ДокументВводаВЭксплуатациюУУ,
		|	&ПорядокУчетаУУ КАК ПорядокУчетаУУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК ПервоначальнаяСтоимостьБУ,
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК ПервоначальнаяСтоимостьУУ
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО (РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство)
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаАрендованныеОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "АрендованныеОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтАрендованныеОС(ТекстыЗапроса, "Документ.ПринятиеКУчетуОС2_4");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                       КАК Регистратор,
	|	&Период                       КАК Период,
	|	ТаблицаОС.ОсновноеСредство    КАК ОсновноеСредство,
	|	втАрендованныеОС.Стоимость    КАК Стоимость,
	|	втАрендованныеОС.Партнер      КАК Партнер,
	|	втАрендованныеОС.Контрагент   КАК Контрагент,
	|	втАрендованныеОС.Договор      КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде) КАК Состояние
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАрендованныеОС КАК втАрендованныеОС
	|		ПО втАрендованныеОС.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
		
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	ВЫБОР 
		|		КОГДА &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуСамортизированногоОС)
		|		ИНАЧЕ &ХозяйственнаяОперация 
		|	КОНЕЦ                                        КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	&ВидАналитикиКапитализацииРасходов           КАК ВидАналитикиКапитализацииРасходов,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ВЫБОР 
		|		КОГДА &ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства) 
		|			ТОГДА &ОбъектСтроительства 
		|		ИНАЧЕ ТаблицаОС.ОсновноеСредство 
		|	КОНЕЦ                                        КАК АналитикаКапитализацииРасходов,
		|
		|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)                КАК КорПодразделение,
		|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)      КАК КорНаправлениеДеятельности,
		|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)               КАК КорСтатьяРасходов,
		|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)            КАК КорАналитикаРасходов,
		|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                                КАК РасчетСтоимости,
		|
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК Стоимость,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК СтоимостьРегл,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, 0) КАК СтоимостьВР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
		|
		|	0 КАК ПредварительнаяСтоимость,
		|	0 КАК ПредварительнаяСтоимостьРегл,
		|	
		|	ЕСТЬNULL(РасчетСтоимости.ИдентификаторСтроки, &ИдентификаторНеиспользуемойФинЗаписи) КАК ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации 
		|	
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
		|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство
		|			И РасчетСтоимости.Ссылка = &Ссылка
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Нужно отдельно записать предварительную стоимость для расчета амортизации
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	ВЫБОР 
		|		КОГДА &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуСамортизированногоОС)
		|		ИНАЧЕ &ХозяйственнаяОперация 
		|	КОНЕЦ                                        КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	&ВидАналитикиКапитализацииРасходов           КАК ВидАналитикиКапитализацииРасходов,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ВЫБОР 
		|		КОГДА &ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства) 
		|			ТОГДА &ОбъектСтроительства 
		|		ИНАЧЕ ТаблицаОС.ОсновноеСредство 
		|	КОНЕЦ                                        КАК АналитикаКапитализацииРасходов,
		|
		|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
		|	ЛОЖЬ                                         КАК РасчетСтоимости,
		|
		|	0                                            КАК Стоимость,
		|	0                                            КАК СтоимостьРегл,
		|	0                                            КАК СтоимостьНУ,
		|	0                                            КАК СтоимостьПР,
		|	0                                            КАК СтоимостьВР,
		|	0                                            КАК СтоимостьЦФ,
		|	0                                            КАК СтоимостьНУЦФ,
		|	0                                            КАК СтоимостьПРЦФ,
		|	0                                            КАК СтоимостьВРЦФ,
		|
		|	ТаблицаОС.СтоимостьУУ                        КАК ПредварительнаяСтоимость,
		|	ТаблицаОС.СтоимостьБУ                        КАК ПредварительнаяСтоимостьРегл,
		|
		|	&ИдентификаторНеиспользуемойФинЗаписи        КАК ИдентификаторФинЗаписи,
		|	НЕОПРЕДЕЛЕНО                                 КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И (ТаблицаОС.СтоимостьБУ <> 0 ИЛИ ТаблицаОС.СтоимостьУУ <> 0)";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияОС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "АмортизацияОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаАмортизацияОС(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаТаблицаВтНачисленнаяАмортизация(Запрос, ТекстыЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
		|	&Ссылка                                         КАК Регистратор,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС) КАК ХозяйственнаяОперация,
		|	НачисленнаяАмортизация.ПериодРасчета            КАК Период,
		|	НачисленнаяАмортизация.Организация              КАК Организация,
		|	НачисленнаяАмортизация.Подразделение            КАК Подразделение,
		|	НачисленнаяАмортизация.ОсновноеСредство         КАК ОсновноеСредство,
		|	НачисленнаяАмортизация.НаправлениеДеятельности  КАК НаправлениеДеятельности,
		|	НачисленнаяАмортизация.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
		|
		|	НачисленнаяАмортизация.СуммаУУ    КАК Амортизация,
		|	НачисленнаяАмортизация.СуммаБУ    КАК АмортизацияРегл,
		|
		|	НачисленнаяАмортизация.КорПодразделение              КАК КорПодразделение,
		|	НачисленнаяАмортизация.КорНаправлениеДеятельности    КАК КорНаправлениеДеятельности,
		|	НачисленнаяАмортизация.СтатьяРасходов                КАК КорСтатьяРасходов,
		|	НачисленнаяАмортизация.АналитикаРасходов             КАК КорАналитикаРасходов,
		|	
		|	НачисленнаяАмортизация.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОС) КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	НачисленнаяАмортизация КАК НачисленнаяАмортизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
		|	&Ссылка                                         КАК Регистратор,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС) КАК ХозяйственнаяОперация,
		|	&Период                                         КАК Период,
		|	&Организация                                    КАК Организация,
		|	&Местонахождение                                КАК Подразделение,
		|	ТаблицаОС.ОсновноеСредство                      КАК ОсновноеСредство,
		|	&НаправлениеДеятельности                        КАК НаправлениеДеятельности,
		|	&ГруппаФинансовогоУчета                         КАК ГруппаФинансовогоУчета,
		|
		|	ТаблицаОС.СтоимостьУУ             КАК Амортизация,
		|	ТаблицаОС.СтоимостьБУ             КАК АмортизацияРегл,
		|
		|	НЕОПРЕДЕЛЕНО                      КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                      КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                      КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаРасходов,
		|	
		|	ТаблицаОС.ИдентификаторСтроки     КАК ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                      КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	&Организация                                 КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	&Местонахождение                             КАК КорПодразделение,
	|	&НаправлениеДеятельности                     КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                                 КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	&ГруппаФинансовогоУчета                      КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                                 КАК КорОрганизация,
	|
	|	РасчетСтоимости.Сумма                        КАК Сумма,
	|	РасчетСтоимости.СтоимостьРегл 
	|		+ РасчетСтоимости.СтоимостьЦФ            КАК СуммаРегл,
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|ГДЕ
	|	РасчетСтоимости.Ссылка = &Ссылка
	|";
	
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ПринятиеКУчетуОСЛокализация.ДополнитьТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияСоставЕГДС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СоставЕГДС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС2_4ОС.Ссылка КАК Регистратор,
	|	ПринятиеКУчетуОС2_4ОС.Ссылка.Дата КАК Период,
	|	ПринятиеКУчетуОС2_4ОС.Ссылка.Организация КАК Организация,
	|	ПринятиеКУчетуОС2_4ОС.ОсновноеСредство КАК ВнеоборотныйАктив,
	|	ПринятиеКУчетуОС2_4ОС.Ссылка.ЕГДС КАК ЕГДС
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ПринятиеКУчетуОС2_4ОС
	|ГДЕ
	|	ПринятиеКУчетуОС2_4ОС.Ссылка = &Ссылка
	|	И ПринятиеКУчетуОС2_4ОС.Ссылка.ЕГДС <> ЗНАЧЕНИЕ(Справочник.ЕдиницыГенерирующиеДенежныеСредства.ПустаяСсылка)";
	
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос);
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
		ЗапросыРегистра = Новый Массив;
		
		ЗапросыРегистра.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы());
		ЗапросыРегистра.Добавить(ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Организация                                 КАК Организация,
		|   РасчетРасходов.Подразделение                 КАК Подразделение,
		|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
		|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
		|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
		|
		|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
		|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
		|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
		|
		|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
		|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
		|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
		|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница,
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
		|	                                                                             
		|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
		|	&ХозяйственнаяОперация                       КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	ВтРасчетРасходов КАК РасчетРасходов
		|ГДЕ
		|	РасчетРасходов.Ссылка = &Ссылка";
		
		ЗапросыРегистра.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ЗапросыРегистра, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаВтНачисленнаяАмортизация(Запрос, ТекстыЗапроса)

	ИмяТаблицы = "НачисленнаяАмортизация";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстПодзапроса =
	// Амортизация по предварительной стоимости
	"ВЫБРАТЬ
	|	&Период                                         КАК ПериодРасчета,
	|	&Организация                                    КАК Организация,
	|	&Местонахождение                                КАК Подразделение,
	|	&Местонахождение                                КАК КорПодразделение,
	|	ТаблицаОС.ОсновноеСредство                      КАК ОсновноеСредство,
	|	&НаправлениеДеятельности                        КАК НаправлениеДеятельности,
	|	&НаправлениеДеятельности                        КАК КорНаправлениеДеятельности,
	|	&ГруппаФинансовогоУчета                         КАК ГруппаФинансовогоУчета,
	|	&СтатьяРасходовУУ                               КАК СтатьяРасходов,
	|	&АналитикаРасходовУУ                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                    КАК ЕГДС,
	|	ТаблицаОС.СтоимостьУУ                           КАК СуммаУУ,
	|	ТаблицаОС.СтоимостьБУ                           КАК СуммаБУ,
	|	0                                               КАК ОбесценениеУУ,
	|	0                                               КАК ОбесценениеБУ,
	|	0                                               КАК ОбесценениеЦФ,
	|	0                                               КАК НомерПакета,
	|	0                                               КАК ВыработкаБУ,
	|	0                                               КАК РесурсВыработанныйЗаПрошлыйПериод,
	|	0                                               КАК РесурсВыработанныйЗаТекущийПериод,
	|	0                                               КАК РесурсВыработанныйЗаПрошлыйПериодБУ,
	|	0                                               КАК РесурсВыработанныйЗаТекущийПериодБУ,
	|	0                                               КАК СтоимостьДляВычисленияАмортизации,
	|	0                                               КАК СтоимостьДляВычисленияАмортизацииРегл,
	|	0                                               КАК ОстатокОбесцененияРегл,
	|	0                                               КАК ОстатокОбесцененияУпр,
	|	НЕОПРЕДЕЛЕНО                                    КАК ПорядокУчетаУУ,
	|	НЕОПРЕДЕЛЕНО                                    КАК ПорядокУчетаБУ,
	|	НЕОПРЕДЕЛЕНО                                    КАК ВариантПроводокПоОбесценениюВНА,
	|	ЛОЖЬ                                            КАК ЭтоДоначисление,
	|	ЛОЖЬ                                            КАК ЭтоДоначислениеБУ,
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|
	// Доначисление амортизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                         КАК ПериодРасчета,
	|	&Организация                                    КАК Организация,
	|	&Местонахождение                                КАК Подразделение,
	|	&Местонахождение                                КАК КорПодразделение,
	|	ТаблицаОС.ОсновноеСредство                      КАК ОсновноеСредство,
	|	&НаправлениеДеятельности                        КАК НаправлениеДеятельности,
	|	&НаправлениеДеятельности                        КАК КорНаправлениеДеятельности,
	|	&ГруппаФинансовогоУчета                         КАК ГруппаФинансовогоУчета,
	|	ВЫБОР 
	|		КОГДА &ВариантРаспределенияРасходовУпр В (&СписокРазрешенныхВариантовРаспределенияРасходов)
	|			ТОГДА &СтатьяРасходовУУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ДоначислениеИмущественныхНалоговИАмортизации)
	|	КОНЕЦ                                           КАК СтатьяРасходов,
	|	ВЫБОР 
	|		КОГДА &ВариантРаспределенияРасходовУпр В (&СписокРазрешенныхВариантовРаспределенияРасходов)
	|			ТОГДА &АналитикаРасходовУУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                    КАК ЕГДС,
	|	РасчетСтоимости.Стоимость - ТаблицаОС.СтоимостьУУ КАК СуммаУУ,
	|	РасчетСтоимости.СтоимостьРегл - ТаблицаОС.СтоимостьБУ КАК СуммаБУ,
	|
	|	0                                               КАК ОбесценениеУУ,
	|	0                                               КАК ОбесценениеБУ,
	|	0                                               КАК ОбесценениеЦФ,
	|
	|	0                                               КАК НомерПакета,
	|	0                                               КАК ВыработкаБУ,
	|	0                                               КАК РесурсВыработанныйЗаПрошлыйПериод,
	|	0                                               КАК РесурсВыработанныйЗаТекущийПериод,
	|	0                                               КАК РесурсВыработанныйЗаПрошлыйПериодБУ,
	|	0                                               КАК РесурсВыработанныйЗаТекущийПериодБУ,
	|	0                                               КАК СтоимостьДляВычисленияАмортизации,
	|	0                                               КАК СтоимостьДляВычисленияАмортизацииРегл,
	|	0                                               КАК ОстатокОбесцененияРегл,
	|	0                                               КАК ОстатокОбесцененияУпр,
	|	НЕОПРЕДЕЛЕНО                                    КАК ПорядокУчетаУУ,
	|	НЕОПРЕДЕЛЕНО                                    КАК ПорядокУчетаБУ,
	|	НЕОПРЕДЕЛЕНО                                    КАК ВариантПроводокПоОбесценениюВНА,
	|	ЛОЖЬ                                            КАК ЭтоДоначисление,
	|	ЛОЖЬ                                            КАК ЭтоДоначислениеБУ,
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|	И РасчетСтоимости.Стоимость > ТаблицаОС.СтоимостьУУ";
	
	Документы.АмортизацияОС2_4.ТекстЗапросаВтНачисленнаяАмортизация(ТекстыЗапроса, ТекстПодзапроса, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса)

	ИмяТаблицы = "ВтРасчетСтоимостиСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуОСЛокализация.ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетСтоимости.ОбъектУчета               КАК ОбъектУчета,
		|	СУММА(РасчетСтоимости.Стоимость)          КАК Стоимость,
		|	СУММА(РасчетСтоимости.СтоимостьРегл)      КАК СтоимостьРегл,
		|	СУММА(РасчетСтоимости.СтоимостьНУ)        КАК СтоимостьНУ,
		|	СУММА(РасчетСтоимости.СтоимостьПР)        КАК СтоимостьПР,
		|	СУММА(РасчетСтоимости.СтоимостьВР)        КАК СтоимостьВР,
		|	СУММА(РасчетСтоимости.СтоимостьЦФ)        КАК СтоимостьЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
		|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная
		|ИЗ
		|	ВтРасчетСтоимости КАК РасчетСтоимости
		|ГДЕ
		|	РасчетСтоимости.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСтоимости.ОбъектУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуОСЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуОСЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПринятиеКУчетуОСЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыОС1(ПараметрыПечати, МассивОбъектов) Экспорт

	Возврат ПринятиеКУчетуОСЛокализация.ПолучитьДанныеДляПечатнойФормыОС1(ПараметрыПечати, МассивОбъектов);

КонецФункции

Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОбъектов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Возврат МассивОбъектов;
	
КонецФункции

#КонецОбласти

#Область Заполнение

Функция ЗаполнитьНаОснованииЗаключенияДоговораАренды(Объект, Основание) Экспорт
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Объект.ДокументОснование = Неопределено;
		Объект.ДокументНаОсновании = Ложь;
		Возврат Неопределено;
	КонецЕсли;

	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды;
	Объект.ДокументОснование = Основание;
	Объект.ДокументНаОсновании = Истина;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаключениеДоговораАренды.Организация КАК Организация,
	|	ЗаключениеДоговораАренды.Подразделение КАК Местонахождение,
	|	ЗаключениеДоговораАренды.Ссылка КАК ДокументОснование,
	|	ЗаключениеДоговораАренды.Дата КАК ДатаОснования,
	|	ЗаключениеДоговораАренды.Договор КАК Договор,
	|	ЗаключениеДоговораАренды.Договор.Балансодержатель КАК Балансодержатель,
	|	ЗаключениеДоговораАренды.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗаключениеДоговораАренды.Договор.УчитыватьПредметыАрендыВРеглУчете КАК ОтражатьВРеглУчете,
	|	ЗаключениеДоговораАренды.Договор.УчитыватьПредметыАрендыВУпрУчете КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|ГДЕ
	|	ЗаключениеДоговораАренды.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаключениеДоговораАрендыОС.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды.ОС КАК ЗаключениеДоговораАрендыОС
	|ГДЕ
	|	ЗаключениеДоговораАрендыОС.Ссылка = &Основание";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Объект.ДокументОснование);
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выборка.Балансодержатель = Перечисления.БалансодержательПредметовАренды.Арендодатель
		И НЕ ВнеоборотныеАктивы.ИспользуетсяУчетАрендыПоФСБУ25_2018(Выборка.Организация, Объект.Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Принятие к учету основных средств, учитываемых на балансе арендодателя, не предусмотрено';
							|en = 'Initial recognition of fixed assets recorded on the lessor''s balance sheet is not provided'");
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Выборка);
	
	Если НачалоДня(Выборка.ДатаОснования) = НачалоДня(ТекущаяДатаСеанса()) 
		И Объект.Дата < Выборка.ДатаОснования Тогда
		Объект.Дата = Выборка.ДатаОснования + 1;
	КонецЕсли;
	
	Выборка = Пакет[1].Выбрать();

	Объект.ОС.Очистить();

	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.ОС.Добавить(), Выборка);
	КонецЦикла;
	
	ЗаполнитьСтоимость(Объект);
	
	ПринятиеКУчетуОСЛокализация.ЗаполнитьНаОснованииЗаключенияДоговораАренды(Объект, Основание);
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатьиИАналитики = Новый Массив;
	
	ПринятиеКУчетуОСЛокализация.ДополнитьПараметрыВыбораСтатейИАналитик(ПараметрыВыбораСтатьиИАналитики);
	
	// СтатьяРасходовУУ
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходовУУ";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовУУ";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовУУ");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовУУ");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатьиИАналитики;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ПринятиеКУчетуОС2_4.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c10584c2-82e0-4a30-b3d4-9b086e95a3e6");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПринятиеКУчетуОС2_4.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Принятие к учету ОС"":
	|- Заполняет новые реквизиты ""Адрес местонахождения (значение)"", ""Недвижимое имущество""
	|- Заполняет пустой реквизит ""Вариант применения целевого финансирования""
	|- Заполняет реквизит ""Идентификатор строки"" в табличных частях.
	|- Заполняет новые реквизиты ""Отражать в БУ"", ""Отражать в НУ""';
	|en = 'Updates the ""Fixed assets — Initial recognition"" documents:
	|-Populates the new ""Location address (value)"", ""Real estate"" attributes
	|- Populates the blank ""Target financing usage option"" attribute
	|-Populates the ""Line ID"" attribute in tables.
	|- Populates new ""Accounting attributes"", ""Record in TA"" attributes'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ОбъектыЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ПринятиеКУчетуОС2_4";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|ГДЕ
	|	(ДанныеДокумента.АдресМестонахождения <> """"
	|	И (ВЫРАЗИТЬ(ДанныеДокумента.АдресМестонахожденияЗначение КАК СТРОКА(100))) = """")
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ПринятиеКУчетуОС2_4.ОС КАК ТабЧасть
	|		ГДЕ
	|			ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|			И ТабЧасть.ИдентификаторСтроки = """")";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
	ПринятиеКУчетуОСЛокализация.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяОбъекта = "Документ.ПринятиеКУчетуОС2_4";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка КАК Ссылка,
	|	ТаблицаОбъекта.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВсеОбъекты
	|ИЗ
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ТаблицаОбъекта
	|		ПО (ТаблицаОбъекта.Ссылка = СсылкиДляОбработки.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаблокированныеСсылки
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4.ОС КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = ВсеОбъекты.Ссылка)
	|ГДЕ
	|	ТабличнаяЧасть.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.ОсновноеСредство КАК ОсновноеСредство,
	|	ТабличнаяЧасть.ОсновноеСредство.УдалитьНедвижимоеИмущество КАК НедвижимоеИмущество
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В
	|			(ВЫБРАТЬ
	|				ВсеОбъекты.Ссылка
	|			ИЗ
	|				ВсеОбъекты КАК ВсеОбъекты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.Ссылка КАК Ссылка,
	|	ВсеОбъекты.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	НЕ ВсеОбъекты.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТЗаблокированныеСсылки.Ссылка
	|				ИЗ
	|					ВТЗаблокированныеСсылки КАК ВТЗаблокированныеСсылки)";
	
 	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Справочник.ОбъектыЭксплуатации");
	ДополнительныеПараметрыПроцедуры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроцедуры.ИмяВременнойТаблицы = "ВТЗаблокированныеДанные";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
							Параметры.Очередь, ЧитаемыеДанные, МенеджерВременныхТаблиц, ДополнительныеПараметрыПроцедуры);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	
	Результат = Запрос.ВыполнитьПакет();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	ЗначенияРеквизитовОС  = Результат[Результат.ВГраница()-1].Выгрузить();
	ЗначенияРеквизитовОС.Индексы.Добавить("ОсновноеСредство");
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Для каждого Выборка Из ОбновляемыеДанные Цикл
 		
 		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
 			ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуОС2_4");
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
 			Блокировка.Заблокировать();
 			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.АдресМестонахождения)
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта.АдресМестонахожденияЗначение) Тогда
				
				ДанныеОбъекта.АдресМестонахожденияЗначение = 
					УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
						ДанныеОбъекта.АдресМестонахождения,
						Перечисления.ТипыКонтактнойИнформации.Адрес);
			КонецЕсли; 
			
			Если НЕ ДанныеОбъекта.РеквизитНедвижимоеИмуществоОбновлен Тогда
				
				Если ДанныеОбъекта.ОС.Количество() <> 0 Тогда
					
					ДанныеСтроки = ДанныеОбъекта.ОС[0];
					Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
						ЗначенияРеквизитов = ЗначенияРеквизитовОС.Найти(ДанныеСтроки.ОсновноеСредство, "ОсновноеСредство");
						Если ЗначенияРеквизитов <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЗначенияРеквизитов);
						КонецЕсли; 
					КонецЕсли;
					
				КонецЕсли; 
				
				ДанныеОбъекта.РеквизитНедвижимоеИмуществоОбновлен = Истина;
				
			КонецЕсли;
			
			ПринятиеКУчетуОСЛокализация.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеОбъекта);
			
			ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДанныеОбъекта, "ОС");
			
			Если ДанныеОбъекта.Модифицированность() Тогда
	 			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли; 
	
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%';
									|en = 'Cannot process the object: %Ссылка%. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
