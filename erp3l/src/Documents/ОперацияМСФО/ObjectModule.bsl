#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ТекущаяДатаСеанса());
	Ответственный = ОбщегоНазначенияУХ.ТекущийПользователь();
	
	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.ОперацияМСФО") Тогда
		Возврат;
	КонецЕсли;

	Организация = ОбъектКопирования.Организация;
	Комментарий = ОбъектКопирования.Комментарий;
	Содержание  = ОбъектКопирования.Содержание;
	
	Для каждого Набор Из ОбъектКопирования.Движения Цикл
		
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборТекущегоОбъекта = Движения[Набор.Метаданные().Имя];
		Если Лев(ТипЗНЧ(НаборТекущегоОбъекта),19) = НСтр("ru = 'Регистр бухгалтерии'") Тогда
			Для каждого ЗаписьНабора Из Набор Цикл
				
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,
					"Период,Регистратор,СубконтоДт,СубконтоКт");
				
				Для каждого Субконто Из ЗаписьНабора.СубконтоДт Цикл
					НоваяЗапись.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;

				Для каждого Субконто Из ЗаписьНабора.СубконтоКт Цикл
					НоваяЗапись.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			Для каждого ЗаписьНабора Из Набор Цикл
			
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				Если Лев(ТипЗНЧ(НаборТекущегоОбъекта),18) = НСтр("ru = 'Регистр накопления'") Тогда
					Если НаборТекущегоОбъекта.Метаданные().ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
						НоваяЗапись.ВидДвижения = ЗаписьНабора.ВидДвижения;
					КонецЕсли;
				КонецЕсли;
				НоваяЗапись.Период = ТекущаяДата();
				
				Если Лев(ТипЗНЧ(НаборТекущегоОбъекта),18) = НСтр("ru = 'Регистр накопления'") Тогда
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,ВидДвижения")
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор")
				КонецЕсли;
			
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("АдресТаблицы") Тогда			
			МСФОВызовСервераУХ.ЗаполнитьПоТаблицеЗагрузки(ЭтотОбъект, ДанныеЗаполнения);
		Иначе
			МСФОУХ.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	 		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
	Иначе 
		МСФОУХ.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизитов регистров Период и Организация
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
		ЕстьОрганизация = ПустаяТаблица.Колонки.Найти("Организация") <> Неопределено;
		ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
		
		Если НЕ (ЕстьОрганизация ИЛИ ЕстьПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		Если ЕстьОрганизация Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		КонецЕсли;
		
		Если ЕстьПериод Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		КонецЕсли;
		
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		
	КонецЦикла;
	
	СинхронизироватьАктивностьДвиженийСПометкойУдаления();
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СпособЗаполнения <> НСтр("ru = 'Сторно движений документа'") Тогда
		
		МассивНепроверяемыхРеквизитов = Новый Массив();
		МассивНепроверяемыхРеквизитов.Добавить("СторнируемыйДокумент");
		
		//ОбщегоНазначенияБПВызовСервера.УдалитьНепроверяемыеРеквизитыИзМассива(
		//	ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
		Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
			
			// перед удалением реквизита из массива необходимо проверить, что он там есть
			// (не был удален ранее платформой или в коде).
			ПорядковыйНомер = ПроверяемыеРеквизиты.Найти(ЭлементМассива);
			Если ПорядковыйНомер <> Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает/снимает признак активности движений документа в зависимости от пометки удаления.
// Следует вызывать перед записью измененной пометки удаления.
// Помеченный на удаление документ не должен иметь активных движений.
// Не помеченный на удаление документ может иметь неактивные движения.
Процедура СинхронизироватьАктивностьДвиженийСПометкойУдаления()
	
	Если НЕ ПометкаУдаления Тогда
		// Не помеченный на удаление документ может иметь неактивные движения.
		// Однако, при снятии пометки удаления все движения становятся активными.
		Если ЭтоНовый() Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") = ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Данные движений будут читаться только при неинтерактивной работе (например, при пометке на удаление документа
	// из списка). Поэтому чтение без контроля прав будет безопасным.
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = Новый Массив;
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Если Движение.Количество() > 0 Тогда
			РегистрыСДвижениями.Добавить(Движение);
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Активность = НЕ ПометкаУдаления;
	Для Каждого Движение Из РегистрыСДвижениями Цикл
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
