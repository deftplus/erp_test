
&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//// ДополнительныеОтчетыИОбработки
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	//// Конец ДополнительныеОтчетыИОбработки
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента("НезаписанныйДокумент");
		ПодготовитьФормуНаСервере(Параметры.ЗначениеКопирования);
		ЗаполнитьДвижения(Параметры.ЗначенияЗаполнения);
	КонецЕсли;

	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.МСФО.ТекущаяСтрока  = Параметры.ПараметрТекущаяСтрока-1;
	КонецЕсли;
		
	УстановитьУсловноеОформление();

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если Объект.СпособЗаполнения = СпособЗаполненияВручную Тогда		
		Объект.ЗаполнениеДвижений.Очистить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьУсловноеОформление();
	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если Объект.Движения.МСФО.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Указанные в проводках расчетные счета, договоры, документы будут очищены. 
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзменииОрганизацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ПриИзменииОрганизацииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ПриИзменииОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДвиженияПоРегистру(ИмяРегистра)

	Для каждого Проводка Из Объект.Движения[ИмяРегистра] Цикл

			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоДт" + Инд] = Неопределено;
				КонецЕсли;
			КонецЦикла;

			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоКт" + Инд] = Неопределено;
				КонецЕсли;
			КонецЦикла;

			//Если ЗначениеЗаполнено(Проводка.ПодразделениеДт) Тогда
			//	Проводка.ПодразделениеДт = Неопределено;
			//КонецЕсли;

			//Если ЗначениеЗаполнено(Проводка.ПодразделениеКт) Тогда
			//	Проводка.ПодразделениеДт = Неопределено;
			//КонецЕсли;

		КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиентУХ.ОткрытьФормуРедактированияКомментария(ЭтаФорма, Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ФлажокСписокПриИзменении(Элемент)
	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	ОбновлениеОтображения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаЗаполнить(Команда)

	Если Объект.СпособЗаполнения = СпособЗаполненияСторно И НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		//ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сторнируемый документ");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.СторнируемыйДокумент",,);
		Возврат;
	КонецЕсли;

	// Очистка существующих движений
	Если ЕстьДвижения() Тогда
		
		Ответ = Неопределено;

		Оповещение = Новый ОписаниеОповещения("КнопкаЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
							НСтр("ru = 'Существующие проводки и движения регистров будут очищены.
								|Продолжить?'"),
							РежимДиалогаВопрос.ДаНет
						);
						
		Возврат;
		
	КонецЕсли;

	СформироватьДвиженияЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    СформироватьДвиженияЗаполнения();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьДвиженияЗаполнения()
    
    Если Объект.СпособЗаполнения = СпособЗаполненияСторно Тогда
        СформироватьДвиженияСторноСервер();
    Иначе
        ВыполнитьДействие();
	КонецЕсли;
	
    ПересчитатьСуммуОперации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Регистры Цикл
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресВХранилище", ПоместитьСписокРегистровВХранилище());

	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ОперацияМСФО.Форма.ФормаНастройки", 
					СтруктураПараметров, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СписокРезультат = Результат;
    
    Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда
        
        БылиИзменения = Ложь;
        Для Каждого СтрокаРегистра Из Регистры Цикл
            СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
            Если СтрокаСписка<>Неопределено и (СтрокаРегистра.Отображение <> СтрокаСписка.Пометка) Тогда
                БылиИзменения = Истина;
                СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
            КонецЕсли;
        КонецЦикла;
        
        Если БылиИзменения Тогда
            СоздатьЭлементыФормы();
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьПроводок(Команда)

	ПереключитьАктивностьПроводокСервер();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМСФО

&НаКлиенте
Процедура МСФОПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.МСФО.ТекущиеДанные;
	ИдСтроки      = Элементы.МСФО.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"МСФОСубконтоДт1", "МСФОСубконтоДт2", "МСФОСубконтоДт3");
		МСФОКлиентСерверУХ.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"МСФОСубконтоКт1", "МСФОСубконтоКт2", "МСФОСубконтоКт3");
		МСФОКлиентСерверУХ.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
		
		ИдентификаторСтрокиПроводки = ИдСтроки;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МСФОПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПересчитатьСуммуОперации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МСФОПослеУдаления(Элемент)

	ПересчитатьСуммуОперации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСчетДтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(ЭтаФорма, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСчетКтПриИзменении(Элемент)

	ОбработатьИзменениеСчета(ЭтаФорма, "Кт");

КонецПроцедуры

&НаКлиенте
Процедура МСФОВалютаДтПриИзменении(Элемент)

	РасчетСуммы("Дт");

КонецПроцедуры

&НаКлиенте
Процедура МСФОВалютнаяСуммаДтПриИзменении(Элемент)

	РасчетСуммы("Дт");

КонецПроцедуры

&НаКлиенте
Процедура МСФОВалютаКтПриИзменении(Элемент)

	РасчетСуммы("Кт");

КонецПроцедуры

&НаКлиенте
Процедура МСФОВалютнаяСуммаКтПриИзменении(Элемент)

	РасчетСуммы("Кт");

КонецПроцедуры

&НаКлиенте
Процедура МСФОСуммаВВалютеУчетаПриИзменении(Элемент)
	
	РасчетСуммы("ВалютаУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСуммаВВалютеОтчетностиПриИзменении(Элемент)
	
	РасчетСуммы("ВалютаОтчетности");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	РасчетСуммы("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	РасчетСуммы("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	РасчетСуммы("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	РасчетСуммы("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	РасчетСуммы("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	РасчетСуммы("Кт");
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

&НаСервере
Процедура ОбновлениеОтображения()

	Если Объект.СпособЗаполнения = СпособЗаполненияВручную Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИнформация;
		Элементы.ФлажокСписок.Видимость = Ложь;
		ФлажокСписок = Ложь;
	ИначеЕсли Объект.СпособЗаполнения = СпособЗаполненияСторно Тогда
		Элементы.ГруппаСторнирование.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСторнирование;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ФлажокСписок,Элементы.ГруппаСписокДокументов,Элементы.ГруппаСторнируемыйДокумент);
		Элементы.ФлажокСписок.Видимость = Истина;
	КонецЕсли;

	Элементы.ГруппаСписокДокументов.Видимость = ФлажокСписок;

	Если Объект.СпособЗаполнения = СпособЗаполненияСторно Тогда
		Если ФлажокСписок И Объект.ЗаполнениеДвижений.Количество() = 0 Тогда
			Объект.ЗаполнениеДвижений.Добавить();
			Элементы.ЗаполнениеДвижений.ТекущаяСтрока = Объект.ЗаполнениеДвижений[0].ПолучитьИдентификатор();
			Объект.ЗаполнениеДвижений[0].Документ = Объект.СторнируемыйДокумент;
		ИначеЕсли НЕ ФлажокСписок И Объект.ЗаполнениеДвижений.Количество() > 0 Тогда
			Объект.СторнируемыйДокумент = Объект.ЗаполнениеДвижений[0].Документ;
			Объект.ЗаполнениеДвижений.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокДействий()

	мСписокДействий = Элементы.СпособЗаполнения.СписокВыбора;
	мСписокДействий.Добавить(СпособЗаполненияВручную,СпособЗаполненияВручную);
	мСписокДействий.Добавить(СпособЗаполненияСторно,СпособЗаполненияСторно);

	Если НЕ ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда
		Объект.СпособЗаполнения = Элементы.СпособЗаполнения.СписокВыбора[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = Объект.Ссылка.Метаданные();
	КонецЕсли;

	Регистры.Очистить();
	
	Регистр_МСФО = Метаданные.РегистрыБухгалтерии.МСФО;

	Для Каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл

		Строка     = Регистры.Добавить();
		Строка.Имя = МетаданныеРегистра.Имя;
		ПолноеИмя  = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки = СтрНайти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним 	   = МетаданныеРегистра.Синоним;

		Если Строка.ТипРегистра = "РегистрНакопления" Тогда
			Строка.ВидРегистра = ?(МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки, 1, 0);
		КонецЕсли;

		Строка.ЕстьДвижения = Объект.Движения[Строка.Имя].Количество()>0;
		Строка.Отображение  = Строка.ЕстьДвижения Или (МетаданныеРегистра = Регистр_МСФО);

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата, Знач ВалютаКон)
	
	Если Не ЗначениеЗаполнено(ВалютаКон) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютнаяСумма) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РаботаСКурсамиВалютУХ.ПересчитатьВВалюту(ВалютнаяСумма, Валюта, ВалютаКон, Дата);
	
КонецФункции

&НаСервере
Функция ПоместитьСписокРегистровВХранилище()

	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ЕстьДвижения()

	Для каждого Регистр Из Регистры Цикл
		Если Объект.Движения[Регистр.Имя].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ВыполнитьДействие(ДействиеНеВыполнено = Ложь)

	ИмяФайла = КаталогВременныхФайлов() + "PrnForm.tmp";
	ОбъектВнешнейФормы = Неопределено; // Объект.СпособЗаполнения.ПолучитьОбъект();

	Если ОбъектВнешнейФормы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения внешней обработки действия. Возможно обработка была удалена'");
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Попытка
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка исполнения внешней обработки действия.'");
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения+Символы.ПС+ОписаниеОшибки(),, ,, );
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		Возврат;
	КонецПопытки;

	Попытка
		Обработка.Инициализировать("СтрокаТЧ.Документ", Объект,ДействиеНеВыполнено);
		Если ДействиеНеВыполнено Тогда
			ТекстСообщения = НСтр("ru = 'Действие не выполнено!'");
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Действие не выполнено!'");
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения+Символы.ПС+ОписаниеОшибки(),, ,, );
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура СформироватьДвиженияСторноСервер()

	Для каждого СтрокаРегистра Из Регистры Цикл
		Если Объект.Движения[СтрокаРегистра.Имя].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Объект.Движения[СтрокаРегистра.Имя].Очистить();
	КонецЦикла;

	//Формирование движений
	Если ФлажокСписок Тогда
		ВыполнитьСторнированиеДокументов(Объект.ЗаполнениеДвижений);
	Иначе
		ТЗДокументов = новый ТаблицаЗначений;
		ТЗДокументов.Колонки.Добавить("Документ");
		ТЗДокументов.Добавить().Документ = Объект.СторнируемыйДокумент;
		ВыполнитьСторнированиеДокументов(ТЗДокументов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьСторнированиеДокументов(СторнируемыеДокументы, СторнироватьРегистры = Истина, СторнироватьПроводки = Истина)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТЧ Из СторнируемыеДокументы Цикл

		СторнируемыйДокумент = СтрокаТЧ.Документ;
		Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда

			//ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
			//	"Колонка",
			//	"Заполнение",
			//	"Сторнируемый документ",
			//	СтрокаТЧ.НомерСтроки,
			//	"Сторнируемые документы");

			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	ТекстСообщения,
			//	Объект,
			//	,
			//	"Объект");
			Продолжить;
		КонецЕсли;

		МетаданныеДокумент	= СторнируемыйДокумент.Метаданные();

		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

			// если документ "Ручная операция" не может иметь таких движений,
			// то это не сторнируемый регистр
			Если НЕ Объект.Движения.Свойство(МетаданныеРегистр.Имя) Тогда
				Продолжить;
			КонецЕсли;

			НаборДвижений = ДокументОбъект.Движения[МетаданныеРегистр.Имя];

			ЭтоРегистрБухгалтерии = Ложь;
			Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда

				СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
				ЭтоРегистрБухгалтерии = Истина;

			ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда

				СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();

			Иначе
				Продолжить;
			КонецЕсли;

			СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
			СторнируемыйНаборЗаписей.Прочитать();

			Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл

				ДвижениеСторно = НаборДвижений.Добавить();

				// реквизиты
				Если ЭтоРегистрБухгалтерии Тогда
					ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				Иначе
					ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				КонецЕсли;

				ДвижениеСторно.Период = Объект.Дата;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// обновить субконто МСФО
	ОбновитьСубконтоМСФО();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСубконтоМСФО()
	
	Для каждого СтрокаТаблицы Из Объект.Движения.МСФО Цикл
	
		ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
		ПоляФормы.Субконто1 = "МСФОСубконтоДт1";
		ПоляФормы.Субконто2 = "МСФОСубконтоДт2";
		ПоляФормы.Субконто3 = "МСФОСубконтоДт3";
		МСФОКлиентСерверУХ.ПриВыбореСчета(СтрокаТаблицы.СчетДт, ЭтаФорма, ПоляФормы, Неопределено, Истина, Ложь);
		
		ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
		ПоляФормы.Субконто1 = "МСФОСубконтоКт1";
		ПоляФормы.Субконто2 = "МСФОСубконтоКт2";
		ПоляФормы.Субконто3 = "МСФОСубконтоКт3";
		МСФОКлиентСерверУХ.ПриВыбореСчета(СтрокаТаблицы.СчетКт, ЭтаФорма, ПоляФормы, Неопределено, Истина, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Валютный,Количественный,Организация");
		ПоляОбъекта.Субконто1      = "СубконтоДт1";
		ПоляОбъекта.Субконто2      = "СубконтоДт2";
		ПоляОбъекта.Субконто3      = "СубконтоДт3";	
		ПоляОбъекта.Валютный       = "ВалютныйДт";
		ПоляОбъекта.Количественный = "КоличественныйДт";
		ПоляОбъекта.Организация    = Объект.Организация;
		МСФОКлиентСерверУХ.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Валютный,Количественный,Организация");
		ПоляОбъекта.Субконто1      = "СубконтоКт1";
		ПоляОбъекта.Субконто2      = "СубконтоКт2";
		ПоляОбъекта.Субконто3      = "СубконтоКт3";	
		ПоляОбъекта.Валютный       = "ВалютныйКт";
		ПоляОбъекта.Количественный = "КоличественныйКт";
		ПоляОбъекта.Организация    = Объект.Организация;
		МСФОКлиентСерверУХ.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
		//ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "");
		//
		//ЗаполнитьНадписиВПроводке(СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
&НаСервере
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");

	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;

	// ресурсы
	Для каждого МДОбъект Из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно
// нового движения для измерений и реквизитов. Ресурсы инвертируются
//
&НаСервере
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");

	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда
		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
	Иначе
		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
	КонецЕсли;

	// ресурсы
	Для каждого МДОбъект Из МетаданныеОбъект.Ресурсы Цикл
		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе
			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьМСФО                       = Истина;
	ПоказатьКнигаУчетаДоходовИРасходов = Ложь;
	ПоказатьРасшифровкаКУДиР           = Ложь;
	ПорядковыйНомер                    = 0;
	КоличествоВидимых                  = 0;
	Всего                              = Регистры.Количество();

	Для каждого СтрокаРегистра Из Регистры Цикл

		ПорядковыйНомер = ПорядковыйНомер + 1;
		КоличествоВидимых = КоличествоВидимых + Число(СтрокаРегистра.Отображение);

		Если СтрокаРегистра.Имя = "МСФО" Тогда
			Продолжить;
		КонецЕсли;

		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено И СтрокаРегистра.Отображение Тогда

			//Найдем группу перед которой будем вставлять новую группу
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда

					ВпередиСледующийЭлемент=Элементы["Группа" + Строка.Имя];
					Прервать;

				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(
				ИмяГруппы,
				Тип("ГруппаФормы"),
				Элементы.ПанельРегистров,
				ВпередиСледующийЭлемент);

			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
				//КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
				//КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
				//КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
			КонецЕсли;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ТекТаблица.ПутьКДанным = "Объект.Движения." + СтрокаРегистра.Имя;
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			//ТекТаблица.КартинкаСтрок = КартинкаАктивности;
			ТекТаблица.ПутьКДаннымКартинкиСтроки = "Объект.Движения." + СтрокаРегистра.Имя+".Активность";

			НоваяКнопка = Элементы.Добавить(ИмяТаблицы+"ПереключитьАктивностьПроводок", Тип("КнопкаФормы"), ТекТаблица.КоманднаяПанель);
			НоваяКнопка.ИмяКоманды = "ПереключитьАктивностьПроводок";

			// Определяем набор колонок для таблицы, соответствующих метаданным регистра
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыНакопления[СтрокаРегистра.Имя];
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыСведений[СтрокаРегистра.Имя];
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя];
			КонецЕсли;

			РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			// Обновление заголовков колонок таблицы по синонимам полей регистра.
			МассивПолейРегистра = Новый Массив;
			МассивПолейРегистра.Добавить("Реквизиты");
			МассивПолейРегистра.Добавить("Измерения");
			МассивПолейРегистра.Добавить("Ресурсы");

			Для каждого ВидПоля Из МассивПолейРегистра Цикл
				Для каждого Поле Из МетаданныеРегистра[ВидПоля] Цикл
					КолонкаТаблицы = РеквизитыНабораЗаписей.Колонки.Найти(Поле.Имя);
					Если КолонкаТаблицы <> Неопределено Тогда
						КолонкаТаблицы.Заголовок = Поле.Синоним;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			КонецЦикла;

		КонецЕсли;

		// Делаем страницу регистра невидимой, если она не нужна
		Если ТекГруппа <> Неопределено Тогда
			ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		КонецЕсли;

		// Очистим движения по невидимым регистрам
		Если НЕ СтрокаРегистра.Отображение Тогда
			Объект.Движения[СтрокаРегистра.Имя].Очистить();
			Продолжить;
		КонецЕсли;

	КонецЦикла;

	Элементы.ГруппаМСФО.Видимость = ПоказатьМСФО;

	//Если движения только по регистру бухгалтерии то прячем заголовок у панели регистров
	//Если КоличествоВидимых <= 1 Тогда
	//	Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	//Иначе
	//	Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереключитьАктивностьПроводокСервер()

	ТекущаяАктивность = Ложь;
	ТекущаяСтраница = СтрЗаменить(Элементы.ПанельРегистров.ТекущаяСтраница.Имя,"Группа","");
	Если Объект.Движения[ТекущаяСтраница].Количество() > 0 Тогда
		ТекущаяАктивность = Объект.Движения[ТекущаяСтраница][0].Активность;
	КонецЕсли;
	Для каждого СтрокаДвижения Из Объект.Движения[ТекущаяСтраница] Цикл
		СтрокаДвижения.Активность = (НЕ ТекущаяАктивность);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета) 

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.МСФО.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	МСФОКлиентСерверУХ.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Форма, ДтКт)

	ИдСтроки = Форма.Элементы.МСФО.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.Объект.Движения.МСФО.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "МСФОСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "МСФОСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "МСФОСубконто" + ДтКт + "3";
	МСФОКлиентСерверУХ.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт], Форма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Валютный,Количественный,Организация,Подразделение,НаправлениеДеятельности");
	ПоляОбъекта.Субконто1      			= "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      			= "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      			= "Субконто" + ДтКт + "3";	
	ПоляОбъекта.Валютный       			= "Валютный" + ДтКт;
	ПоляОбъекта.Количественный 			= "Количественный" + ДтКт;
	ПоляОбъекта.Подразделение  			= "УчетПоПодразделениям" + ДтКт;
	ПоляОбъекта.НаправлениеДеятельности = "УчетПоНаправлениямДеятельности" + ДтКт;
	ПоляОбъекта.Организация    			= Форма.Объект.Организация;
	МСФОКлиентСерверУХ.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт], СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	ПересчетСуммыПоКурсуДт = (ДтКт = "Кт"); // пересчитать валютную сумму изменившегося счета на основании другой стороны
	СтруктураПроводки = СтруктураДанныхПроводки(СтрокаТаблицы);
	
	Если ДтКт = "Кт" Тогда
		ПересчитатьСуммыПоКт(СтруктураПроводки, Форма.Объект.Дата, Форма.ФункциональнаяВалюта, Форма.ВалютаОтчетности);
	Иначе	
		ПересчитатьСуммыПоДт(СтруктураПроводки, Форма.Объект.Дата, Форма.ФункциональнаяВалюта, Форма.ВалютаОтчетности);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураПроводки);
	ПересчитатьСуммуОперации(Форма);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт);
	
	ЗаполнитьНадписиВПроводке(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "")
	
	ИдСтроки = Форма.Элементы.МСФО.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.Объект.Движения.МСФО.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "МСФОСубконтоДт%Индекс%", ПараметрыДокумента);
		Валюта = МСФОКлиентСерверУХ.ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(СтрокаТаблицы.ВалютаДт, ПараметрыДокумента);
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрокаТаблицы.ВалютаДт = Валюта;
		КонецЕсли;
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "МСФОСубконтоКт%Индекс%", ПараметрыДокумента);
		Валюта = МСФОКлиентСерверУХ.ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(СтрокаТаблицы.ВалютаКт, ПараметрыДокумента);
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрокаТаблицы.ВалютаКт = Валюта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ДокументДвижений)
	
	//ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыОбъекта(ЭтаФорма);

	СпособЗаполненияВручную = НСтр("ru = 'Вручную'");
	СпособЗаполненияСторно 	= НСтр("ru = 'Сторно движений документа'");
	ОбновитьСписокДействий();
	
	ФлажокСписок = Объект.ЗаполнениеДвижений.Количество() > 1;

	ТекущаяОрганизация = Объект.Организация;

	ОписаниеТиповВалюта        = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ОписаниеТиповКоличество    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	//ОписаниеТиповПодразделение = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	ОписаниеТиповСумма         = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	//// Назначаем общий обработчик
	Элементы.МСФО.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация = Объект.Организация;

	МетаданныеОперации = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеОперации);
	Если ЗначениеЗаполнено(ДокументДвижений) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСДвижениями = ПроведениеСерверУХ.ПолучитьМассивИспользуемыхРегистров(
			ДокументДвижений, ДокументДвижений.Метаданные().Движения);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РегистрыСДвижениями = Новый Массив;
	КонецЕсли;
	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	ЗаполнитьКэшируемыеЗначения();
	МСФОУХ.ДобавитьРеквизитыТаблицыПроводок(ЭтотОбъект, "Объект.Движения.МСФО", "МСФО", Ложь);
	ЗаполнитьВалютыОрганизации(); 

	ОбновлениеОтображения();

КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "МСФО" Тогда
			СтрокаРегистра.Отображение = Истина;
		Иначе
			Отбор = Новый Структура("Имя", СтрокаРегистра.Имя);
			ДобавленПользователем = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0
				ИЛИ Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0;
			СтрокаРегистра.Отображение = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено
				ИЛИ ДобавленПользователем;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшируемыеЗначения()
			
	Если КэшируемыеЗначения = Неопределено Тогда
		КэшируемыеЗначения = Новый Структура;
	КонецЕсли;
	
	КэшируемыеЗначения.Вставить("Организация",	Объект.Организация);
	КэшируемыеЗначения.Вставить("Сценарий", 	Объект.Сценарий);
	КэшируемыеЗначения.Вставить("Дата", 		Объект.Дата);
	
	МСФОУХ.ЗаполнитьРеквизитыОрганизации(ЭтаФорма.КэшируемыеЗначения);
	
	ЭтотОбъект.ФункциональнаяВалюта = КэшируемыеЗначения.ФункциональнаяВалюта;
	ЭтотОбъект.ВалютаОтчетности = КэшируемыеЗначения.ВалютаПредоставленияОтчетности;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МСФОУХ.УсловноеОформление_Проводки(ЭтаФорма, "Объект.Движения.МСФО", "МСФО");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <ЗАПОЛНЕНИЕ ДВИЖЕНИЙ>
//

&НаКлиенте
Процедура ЗаполнениеДвиженийДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ЗаполнениеДвижений.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		Элемент.ВыбиратьТип = Истина;
	Иначе
		Элемент.ВыбиратьТип = Ложь;
	КонецЕсли;

КонецПроцедуры

#Область ОтрисовкаФормы

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "МСФО" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.Имя = "МСФО" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если ДокументДвижений = Объект.Ссылка Тогда
				СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
				Если СтрокаРегистра.Записывать Тогда
					АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДвижения(ЗначенияЗаполнения)
	
	Если НЕ ЗначенияЗаполнения.Свойство("МСФО") Тогда
		Возврат;
	КонецЕсли;
	
	//Для Каждого СтруктураПроводки Из ЗначенияЗаполнения.МСФО Цикл
	//	
	//	НоваяПроводка = МСФО.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяПроводка, СтруктураПроводки);
	//	Если НЕ СтруктураПроводки.Свойство("Активность") Тогда
	//		НоваяПроводка.Активность = Истина;
	//	КонецЕсли;
	//	
	//	Элементы.МСФО.ТекущаяСтрока = НоваяПроводка.ПолучитьИдентификатор();
	//	ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");
	//	ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");
	//	УстановитьТипРесурсовПроводки(ЭтотОбъект, "Дт");
	//	УстановитьТипРесурсовПроводки(ЭтотОбъект, "Кт");
	//	
	//КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента(СтрокаУказаниеСтатуса = Неопределено)
	
	Если СтрокаУказаниеСтатуса = "НезаписанныйДокумент" Тогда
		СостояниеДокумента = 0;	
	ИначеЕсли Объект.ПометкаУдаления Тогда
		СостояниеДокумента = 2;
	Иначе
		СостояниеДокумента = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокумент(РезультатВопроса = Неопределено, ДанныеЗаполнения) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		Возврат;	
	КонецЕсли;
    
    ЗаполнитьДокумент(ДанныеЗаполнения);
	
	ОбновлениеОтображения();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
	МСФОУХ.ДобавитьРеквизитыТаблицыПроводок(ЭтотОбъект, "Объект.Движения.МСФО", "МСФО", Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСПроводками

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхПроводки(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,СуммаВВалютеДт,
		|СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,СуммаВВалютеКт,
		|СуммаВВалютеУчета,СуммаВВалютеОтчетности,Содержание");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуОперации(Форма)
	
	Форма.Объект.СуммаОперации = Форма.Объект.Движения.МСФО.Итог("СуммаВВалютеУчета");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоДт(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
				
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, ФункциональнаяВалюта);
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, ВалютаОтчетности);
		Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, Проводка.ВалютаКт);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0)Тогда
		
		ПересчитатьСуммыПоКт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	Иначе 
		
		Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
			Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда
			Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
		КонецЕсли;
				
		ПересчитатьСуммыПоВалютеУчета(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоКт(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0) Тогда
		
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, ФункциональнаяВалюта);
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, ВалютаОтчетности);
		Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, Проводка.ВалютаДт);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
		
		ПересчитатьСуммыПоДт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	Иначе 
		
		Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
			Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда
			Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
		КонецЕсли;
		
		ПересчитатьСуммыПоВалютеУчета(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоВалютеУчета(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
		
		Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
		ПересчитатьСуммыПоДт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0) Тогда
		
		Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
		ПересчитатьСуммыПоКт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	Иначе		
		
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, ВалютаОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоВалютеОтчетности(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
		
		Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеОтчетности, ВалютаОтчетности, Дата, Проводка.ВалютаДт);
		ПересчитатьСуммыПоДт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда
		
		Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеОтчетности, ВалютаОтчетности, Дата, Проводка.ВалютаКт);
		ПересчитатьСуммыПоКт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	Иначе		
		
		Проводка.СуммаВВалютеДт = 0;
		Проводка.СуммаВВалютеКт = 0;
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеОтчетности, ВалютаОтчетности, Дата, ФункциональнаяВалюта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(ИсточникПересчета = "Дт")
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.МСФО.ТекущиеДанные;
	СтруктураПроводки = СтруктураДанныхПроводки(ТекущиеДанные);
	
	Если ИсточникПересчета = "Дт" Тогда	
		
		ПересчитатьСуммыПоДт(СтруктураПроводки, Объект.Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	ИначеЕсли ИсточникПересчета = "Кт" Тогда	
		
		ПересчитатьСуммыПоКт(СтруктураПроводки, Объект.Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	ИначеЕсли ИсточникПересчета = "ВалютаУчета" Тогда
		
		ПересчитатьСуммыПоВалютеУчета(СтруктураПроводки, Объект.Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	ИначеЕсли ИсточникПересчета = "ВалютаОтчетности" Тогда
		
		Если Объект.НезависимаяСуммаВО Тогда
			Возврат;
		КонецЕсли;
		
		ПересчитатьСуммыПоВалютеОтчетности(СтруктураПроводки, Объект.Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(Элементы.МСФО.ТекущиеДанные, СтруктураПроводки);
	ПересчитатьСуммуОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзменииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзменииОрганизацииНаСервере();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзменииОрганизацииНаСервере()
	
	ЗаполнитьКэшируемыеЗначения();
	
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	Для каждого Проводка Из Объект.Движения.МСФО Цикл
		
		Для Инд = 1 по 3 Цикл
			ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
			Если ЗначениеЗаполнено(ЗначениеСубконто)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
				ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
				Проводка["СубконтоДт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 по 3 Цикл
			ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
			Если ЗначениеЗаполнено(ЗначениеСубконто)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
				ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
				Проводка["СубконтоКт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Если Проводка.Сценарий <> Объект.Сценарий Тогда
			Проводка.Сценарий = Объект.Сценарий;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяОрганизация = Объект.Организация;
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	
	ЗаполнитьВалютыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютыОрганизации()
    
	Для каждого Проводка Из Объект.Движения.МСФО Цикл
		Если Объект.НезависимаяСуммаВО Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьСуммыПоДт(Проводка, Объект.Дата, ЭтотОбъект.ФункциональнаяВалюта, ЭтотОбъект.ВалютаОтчетности);		
	КонецЦикла;
	ПересчитатьСуммуОперации(ЭтаФорма);
	
	Если Объект.Организация.Пустая() Тогда
		Возврат;//не выводим сообщения если организация пустая	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ФункциональнаяВалюта) Тогда
		ШаблонСообщения = НСтр("ru = 'У организации <%1> не указана функциональная валюта'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.Организация);
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация", "Объект");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЭтотОбъект.ВалютаОтчетности) Тогда
		ШаблонСообщения = НСтр("ru = 'У организации <%1> не указана валюта предоставления отчетности'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.Организация);
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация", "Объект");		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация()
	
	ПериодФО    = Объект.Дата;
	Организация = Объект.Организация;
		
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ПериодФО);
		
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Сценарий")
			И ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Элемент.ТекущиеДанные.Сценарий = Объект.Сценарий;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
