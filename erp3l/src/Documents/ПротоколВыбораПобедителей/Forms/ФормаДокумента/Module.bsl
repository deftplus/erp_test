
#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтараяЗакупочнаяПроцедура = Объект.ЗакупочнаяПроцедура;
	УстановитьРеквизитыФормыПоЗакупке();
	ОбновитьТаблицуПредложенийПобедителей();
	ИменаКлючевыхПолейПобедителейЗакупки = "Лот,"
		+ ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейВыбораПобедителяЛота();
	КонтекстТаблицыПотребностей = ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
		"ПериодыЗакупок", "ПотребностиПоПоставщикам", 
		"ПотребностиПоПоставщикам", ИменаКлючевыхПолейПобедителейЗакупки);	
	ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
		ЭтаФорма, "ПараметрыКроссТаблицыПотребностей", КонтекстТаблицыПотребностей);
	ЗакупочнаяПроцедураПриИзмененииНаСервере();
	НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта();
	Элементы.НазначитьПоставщиковНоменклатуреЛота.Доступность = истина;
	ЗаполнитьНастройкуЗонтичнойЗакупки();
	ЗагрузитьТаблицуПредложений();
	ЗаполнитьСуммыПоЛоту();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьНазначенияПоставщиковПоСтроке();
	ОтобразитьВыбранноеПредложениеПоставщика();
	ОтобразитьСостояниеТоргов();
	УстановитьОформлениеФормы();
	УстановитьТаблицуПобедителей();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	РежимЗаписиПроведение = (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение);
	Если (РежимЗаписиПроведение) И (НЕ Объект.ПометкаУдаления) Тогда
		ПроверкаЗаполненияТаблицыПотребностейНаКлиенте(Отказ);
		ПроверитьСообщитьСоответствиеПобедителейРаспределению(Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписанПротоколВыбораПобедителейЛота", Объект.Ссылка, ЭтаФорма);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьСостояниеВыбораАльтернатив" Тогда
		Если ПараметрЭтоИспользуемыйЛот(Параметр.Владелец) Тогда
			ЗаполнитьТаблицуПредложенийПобедителейПоЛоту(Параметр.Владелец);
		КонецЕсли;
		УстановитьОформлениеОценкиПредложенийПоКритериям(ТекущийЛот);
		Если  ПолучитьСостояниеПроцессаСУчетомПереторжки(Параметр.Владелец).ПроцессВыбораЗавершен
			И ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущийЛот,"ВидЗакупки") = 
		ПредопределенноеЗначение("Перечисление.ВидЛотовойЗакупки.Зонтичная") Тогда
			РаспределениеЗонтичнойЗакупкиПоКритериямНаСервере();
		КонецЕсли;
		ЗагрузитьТаблицуПредложений();
	ИначеЕсли ИмяСобытия = "ПроведеноПредложениеПоставщика" И ЭтоЗакупкаУЕдинственногоПоставщика Тогда
		Если ПараметрЭтоИспользуемыйЛот(Параметр.Лот) Тогда
			ЗаполнитьТаблицуПредложенийПобедителейПоЛоту(Параметр.Лот);	
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменилисьНазначенныеНоменклатуреПоставщики" 
		И ЗначениеЗаполнено(Параметр) И Параметр.ПротоколВыбораПобедителей = Объект.Ссылка Тогда
		АдресПараметр = Параметр.АдресРезультата;
		ЛотПараметр = Параметр.Лот;
		ЗаполнитьТаблицуПредложенийПобедителейИзТаблицыРаспределения(АдресПараметр, ЛотПараметр);
		Модифицированность = Истина;
		УстановитьОформлениеФормы();
		Оповестить("ЗакрытьПодчиненнуюФорму", "НазначениеПоставщиковНоменклатуреЛота", ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	ЗаполнитьСуммыПоЛоту();
	ЗаполнитьНастройкуЗонтичнойЗакупки();
	Элементы.ПредложенияПобедителей.Обновить();
	ОбновитьТаблицуПредложенийПобедителей();
	ОбработатьАктивизациюСтрокиЛотыЗакупкиИСервер();	
КонецПроцедуры

&НаСервере 
Функция  ПолучитьСостояниеПроцессаСУчетомПереторжки(Лот)
	Возврат ВыборОбъектовУХ.ПолучитьСостояниеПроцессаСУчетомПереторжки(Лот);
КонецФункции	
#КонецОбласти


#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура НазначитьПоставщиковНоменклатуреЛота(Команда)
	Если ТекущийЛот = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьОткрытиеФормыНазначенияПоставщиковНоменклатуреЛота(ТекущийЛот);
КонецПроцедуры


&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(Объект, НСтр("ru = 'Введите УИД'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщиковПереторжки(Команда)
	МассивПоставщиков = ПолучитьМассивПоставщиковПереторжка(Объект.ЗакупочнаяПроцедура);
	Объект.СоставУчастниковПереторжки.Очистить();
	Для Каждого ТекМассивПоставщиков Из МассивПоставщиков Цикл
		НоваяСтрока = Объект.СоставУчастниковПереторжки.Добавить();
		НоваяСтрока.Контрагент = ТекМассивПоставщиков;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура РестартПроцессаПоЛотам(Команда)
	ТекДанные = Элементы.ЛотыЗакупки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ВыборОбъектовВызовСервераУХ.РестартПроцессаВыбора(ТекДанные.Лот);
		Если ПараметрЭтоИспользуемыйЛот(ТекДанные.Лот) Тогда
			ЗаполнитьТаблицуПредложенийПобедителейПоЛоту(ТекДанные.Лот);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура АдресПротоколаНаСайтеЭТПНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(Объект.АдресПротоколаНаСайтеЭТП);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДелегатОбновитьСтроку = Новый ОписаниеОповещения("УстановитьКомментарий", ЭтаФорма);
	ПоказатьВводСтроки(ДелегатОбновитьСтроку, Объект.Комментарий, "Комментарий",, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоргиСостоялисьПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочнаяПроцедураПриИзменении(Элемент)
	Если Объект.ЗакупочнаяПроцедура <> СтараяЗакупочнаяПроцедура Тогда
		ЗакупочнаяПроцедураПриИзмененииНаСервере(Истина);
		УстановитьОформлениеФормы();
		СтараяЗакупочнаяПроцедура = Объект.ЗакупочнаяПроцедура;
		ЗаполнитьСуммыПоЛоту();
		ЗаполнитьНастройкуЗонтичнойЗакупки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыЗакупкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ЛотыЗакупки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Лот = ТекДанные.Лот;
		Если ЗначениеЗаполнено(Лот) Тогда
			ДопПараметры = Новый Структура("Ключ", Лот);
			ОткрытьФорму("Справочник.Лоты.ФормаОбъекта", ДопПараметры, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыЗакупкиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания(
		"ОбработатьАктивизациюСтрокиЛотыЗакупкиИСервер",
		0.1,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЛотыЗакупкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыЗакупкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыЗакупкиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПобедителейПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПобедителейВыбор(Элемент,
									ВыбраннаяСтрока, 
									Поле, 
									СтандартнаяОбработка)
	Если Поле.Имя = "ПредложенияПобедителейПредложениеПоставщика"
			ИЛИ Поле.Имя = "ПредложенияПобедителейПредложениеПоставщикаКонтрагент" Тогда
		ТекДанные = Элементы.ПредложенияПобедителей.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьПредложениеПоставщика(ТекДанные.ПредложениеПоставщика);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПобедителейПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ПредложенияПобедителей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Отобразим строки по выбранному предложению.
		ТекПредложениеПоставщика = ТекДанные.ПредложениеПоставщика;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПредложениеПоставщика", ТекПредложениеПоставщика);
		ФиксСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Элементы.ПотребностиПоПоставщикам.ОтборСтрок = ФиксСтруктураОтбора;
	Иначе
		// Скроем все строки.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПредложениеПоставщика", Неопределено);
		ФиксСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Элементы.ПотребностиПоПоставщикам.ОтборСтрок = ФиксСтруктураОтбора;
	КонецЕсли;
	УстановитьДоступностьНазначенияПоставщиковПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПобедителейПриНачалеРедактирования(Элемент,
														НоваяСтрока,
														Копирование)
	Если НоваяСтрока Тогда
		Если ТекущийЛот = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Элемент.ТекущиеДанные.Лот = ТекущийЛот;
		Элемент.ТекущиеДанные.Место = 
			Объект.ПредложенияПобедителей.Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПобедителейПередОкончаниемРедактирования(Элемент,
															НоваяСтрока,
															ОтменаРедактирования,
															Отказ)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ТекДанныеЛотыЗакупки = Элементы.ЛотыЗакупки.ТекущиеДанные;
		ТекДанныеПредложенияПобедителей =
			Элементы.ПредложенияПобедителей.ТекущиеДанные;
		Если ТекДанныеЛотыЗакупки = Неопределено
				ИЛИ ТекДанныеПредложенияПобедителей = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ТекДанныеПредложенияПобедителей.Лот = ТекДанныеЛотыЗакупки.Лот;
			флНужноОбновитьОтборПредложенийПобедителейПоЛоту = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоПоставщикамПередНачаломДобавления(Элемент,
														Отказ,
														Копирование, 
														Родитель, 
														Группа, 
														Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоПоставщикамПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредложенияПобедителейПредложениеПоставщикаПриИзменении(Элемент)
	ТекСтрока = Элементы.ПредложенияПобедителей.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПредложенияПобедителейПредложениеПоставщикаПриИзмененииНаСервере(ТекСтрока);
	УстановитьОтборПредложенийПобедителейТекущегоЛота(ТекущийЛот);
	УстановитьОформлениеРаспределенияПоПотребностямДляЛота(ТекущийЛот);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЕдинственногоПоставщика_Завершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		ПредложениеЕдинственногоПоставщика = ЗначениеВыбора.Значение;
		ОтобразитьКонтрагентаЕдинственныйПоставщик();
		УстановитьПредложениеПобедитель(ПредложениеЕдинственногоПоставщика);
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;	
	УстановитьОформлениеФормы();
КонецПроцедуры		// ВыборЕдинственногоПоставщика_Завершение()

&НаКлиенте
Процедура ПричинаПризнанияЗакупкиНесостоявшейсяПриИзменении(Элемент)
	ЭтоПричинаЕдинственноеПредложение = ЦентрализованныеЗакупкиКлиентСерверУХ.ПричинаЕдинственноеПредложение(Объект.ПричинаПризнанияЗакупкиНесостоявшейся);
	Элементы.КонтрагентЕдинственныйПоставщик.Видимость = ЭтоПричинаЕдинственноеПредложение;
	Если ЭтоПричинаЕдинственноеПредложение Тогда
		ОтобразитьСписокВыбораПредложений();
	Иначе
		УстановитьОформлениеФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеЕдинственногоПоставщикаПриИзменении()
	УстановитьПредложениеПобедитель(ПредложениеЕдинственногоПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеЕдинственногоПоставщикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтобразитьСписокВыбораПредложений()
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеЕдинственногоПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтобразитьСписокВыбораПредложений();
КонецПроцедуры

&НаКлиенте
Процедура ПринятоРешениеОПереторжкеПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтображениеПриИзменении(Элемент)
	Если РезультатОтображение = ЗакупкаСостояласьПредставление() Тогда
		Объект.ТоргиСостоялись = Истина;
		Объект.ПринятоРешениеОПереторжке = Ложь;
	ИначеЕсли РезультатОтображение = ЗакупкаПереторжкаПредставление() Тогда
		Объект.ТоргиСостоялись = Ложь;
		Объект.ПринятоРешениеОПереторжке = Истина;
	ИначеЕсли РезультатОтображение = ЗакупкаНеСостояласьПредставление() Тогда
		Объект.ТоргиСостоялись = Ложь;
		Объект.ПринятоРешениеОПереторжке = Ложь;
	Иначе
		// По умолчанию считаем, что торги состоялись.
		Объект.ТоргиСостоялись = Истина;
		Объект.ПринятоРешениеОПереторжке = Ложь;
	КонецЕсли;
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЕдинственныйПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтобразитьСписокВыбораПредложений();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЕдинственныйПоставщикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтобразитьСписокВыбораПредложений();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЕдинственныйПоставщикСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ПроверитьСообщитьСоответствиеПобедителейРаспределению(Отказ)
	Ошибки = ПроверитьСоответствиеПобедителейРаспределению(Отказ);
	Ошибки = ПроверитьВсеПобедителиРаспределены(Отказ, Ошибки);
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСоответствиеПобедителейРаспределению(Отказ,
													  Ошибки = Неопределено)
	ПредложенияПоиск = ПолучитьСоответствиеПредложенийПобедителей(
		Объект.ПредложенияПобедителей);
	Для Каждого Строка Из ПотребностиПоПоставщикам Цикл
		Предложение = Строка.ПредложениеПоставщика;
		Если НЕ ЗначениеЗаполнено(Предложение) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"ПотребностиПоПоставщикам[%1].ПредложениеПоставщика",
				НСтр("ru = 'Не указано предложение победителя'"),
				,
				ПотребностиПоПоставщикам.Индекс(Строка));
		ИначеЕсли ПредложенияПоиск[Предложение] = Неопределено Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"ПотребностиПоПоставщикам[%1].ПредложениеПоставщика",
				НСтр("ru = 'Предложение поставщика отсутствует в перечне победителей'"),
				,
				ПотребностиПоПоставщикам.Индекс(Строка));
		КонецЕсли;
	КонецЦикла;
	Возврат Ошибки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоответствиеПредложенийПобедителей(ПредложенияПобедителей)
	Перем Предложения;
	Предложения = Новый Соответствие;
	Для Каждого Строка Из ПредложенияПобедителей Цикл
		Предложение = Строка.ПредложениеПоставщика;
		Если ЗначениеЗаполнено(Предложение) Тогда
			Предложения.Вставить(Предложение, Истина);
		КонецЕсли;
	КонецЦикла;
	Возврат Предложения;
КонецФункции

&НаКлиенте
Функция ПроверитьВсеПобедителиРаспределены(Отказ, Ошибки = Неопределено)
	ПредложенияПоиск = ПолучитьСоответствиеПредложенийПобедителей(
		ПотребностиПоПоставщикам);
	Для Каждого Строка Из Объект.ПредложенияПобедителей Цикл
		Предложение = Строка.ПредложениеПоставщика;
		Если ПредложенияПоиск[Предложение] = Неопределено Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ПредложенияПобедителей[%1].ПредложениеПоставщика",
				НСтр("ru = 'Предложению победителя не назначена номенклатура поставки'"),
				,
				Объект.ПредложенияПобедителей.Индекс(Строка));
		КонецЕсли;
	КонецЦикла;
	Возврат Ошибки;
КонецФункции

&НаКлиенте
Функция ПараметрЭтоИспользуемыйЛот(Параметр)
	Если ЗначениеЗаполнено(Параметр)
			И ТипЗнч(Параметр) = Тип("СправочникСсылка.Лоты") Тогда
		Возврат НайтиСтрокуЛота(ЛотыЗакупки, Параметр) <> Неопределено;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуЛота(КоллекцияЛоты, Лот)
	Отбор = Новый Структура("Лот", Лот);
	мСтрок = КоллекцияЛоты.НайтиСтроки(Отбор);
	Если мСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат мСтрок[0];
КонецФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиЛотыЗакупкиИСервер()
	АктуализироватьТекущийЛот();
	УстановитьОтборПредложенийПобедителейТекущегоЛота(ТекущийЛот);
	УстановитьОформлениеПредложенияПобедителейДляЛота(ТекущийЛот);
	УстановитьОформлениеРаспределенияПоПотребностямДляЛота(ТекущийЛот);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТекущийЛот()
	СтрокаЛота = Элементы.ЛотыЗакупки.ТекущиеДанные;
	Если СтрокаЛота = Неопределено Тогда
		ТекущийЛот = Неопределено;
		ТекущийМетодОценкиПоставщиков = Неопределено;
	Иначе
	 	ТекущийЛот = СтрокаЛота.Лот;
		ТекущийМетодОценкиПоставщиков =
			СтрокаЛота.МетодОценкиПредложенийПоставщиков;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарий(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ОБъект.Комментарий = СокрЛП(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПричинуОтказа(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ПричинаПризнанияТорговНесостоявшимися = СокрЛП(Результат);
	Иначе
		Объект.ТоргиСостоялись = Истина;
	КонецЕсли;
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЕдинственногоПоставщика()
	НазначенаПереторжка = Объект.ПринятоРешениеОПереторжке;
	ДоступенВыборПоставщика = Истина;
	Если ((НЕ Объект.ТоргиСостоялись) И (НЕ НазначенаПереторжка)) Тогда
		ЭтоПричинаЕдинственноеПредложение = ЦентрализованныеЗакупкиКлиентСерверУХ.ПричинаЕдинственноеПредложение(Объект.ПричинаПризнанияЗакупкиНесостоявшейся);
		Элементы.КонтрагентЕдинственныйПоставщик.Видимость = ЭтоПричинаЕдинственноеПредложение;
		Элементы.СтраницаДокументыВыбораПоЛотам.Видимость = ЭтоПричинаЕдинственноеПредложение;
		ДоступенВыборПоставщика = НЕ ЭтоПричинаЕдинственноеПредложение;
	Иначе
		Элементы.СтраницаДокументыВыбораПоЛотам.Видимость = Истина;
		ДоступенВыборПоставщика = Истина;
		Элементы.КонтрагентЕдинственныйПоставщик.Видимость = ЭтоЗакупкаУЕдинственногоПоставщика;
	КонецЕсли;	
	Элементы.СтраницаДокументыВыбораПоЛотам.ТолькоПросмотр = НЕ ДоступенВыборПоставщика;
	Элементы.ГруппаКомандВыборАльтернативЛота.Доступность = ДоступенВыборПоставщика;
КонецПроцедуры		// УстановитьОформлениеЕдинственногоПоставщика()

// Управляет оформлением команды создания договоров.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеСозданиеДоговоров(Форма)
	ВыбранПобедитель = Ложь;
	Для Каждого ТекПредложенияПобедителей Из Форма.Объект.ПредложенияПобедителей Цикл
		Если ТекПредложенияПобедителей.Победитель Тогда 
			ВыбранПобедитель = Истина;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;	
	КонецЦикла;
	МожноСоздаватьДоговора = ((Форма.Объект.Проведен) И (ВыбранПобедитель) 
		И (Форма.Объект.ТоргиСостоялись) И (НЕ Форма.Объект.ПринятоРешениеОПереторжке));
	НовыйЗаголовок = НСтр("ru = 'Управление договорами закупки'");
	Если МожноСоздаватьДоговора Тогда
		НовыйЗаголовок = НСтр("ru = 'Управление договорами закупки'");
	Иначе
		НовыйЗаголовок = НСтр("ru = 'Ввод договора недоступен'");
	КонецЕсли;
	Форма.Элементы.ФормаОбработкаФормированиеДоговоровСПобедителямиТорговУправлениеДоговорамиЗакупки.Заголовок = НовыйЗаголовок;
КонецПроцедуры		// УстановитьОформлениеСозданиеДоговоров()

// Управляет видимостью элементов для проведённого документа.
&НаКлиенте
Процедура УстановитьОформлениеПроведенногоДокумента()
	Элементы.ДекорацияЗапретРедактирования.Видимость = Объект.Проведен;
	Если Объект.Проведен Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	Иначе
		// Не требуется блокировка.
	КонецЕсли;
КонецПроцедуры		// УстановитьОформлениеПроведенногоДокумента()

// Устанавливает оформление элемента Причина признания торгов несостоявшимися.
&НаКлиенте
Процедура УстановитьОформлениеПризнанияТорговНесостоявшимися()
	Элементы.ПричинаПризнанияТорговНесостоявшимися.Видимость = (НЕ Объект.ТоргиСостоялись);
	НовыйЗаголовок = "";
	Если Объект.ПринятоРешениеОПереторжке Тогда
		НовыйЗаголовок = НСтр("ru = 'Причина переторжки'");
	Иначе
		НовыйЗаголовок = НСтр("ru = 'Причина признания торгов несостоявшимися'");
	КонецЕсли;
	Элементы.ПричинаПризнанияТорговНесостоявшимися.Заголовок = НовыйЗаголовок;
КонецПроцедуры		// УстановитьОформлениеПризнанияТорговНесостоявшимися()

&НаКлиенте
Процедура УстановитьОформлениеФормы()
	НазначенаПереторжка = Объект.ПринятоРешениеОПереторжке;
	Элементы.РезультатРаботыКомиссии.Видимость = Объект.ТоргиСостоялись;
	Элементы.ОписаниеТоргов.Видимость =	(флЭтоАукцион И ЭтоФЗ223 И Объект.ТоргиСостоялись);
	Элементы.СтраницаЕИС.Видимость = ЭтоФЗ223;
	Элементы.ТипПротоколаЕИС.Видимость = флПоказатьТипПротокола;
	Элементы.ГруппаЭТП.Видимость = ПубликуетсяНаЭТП;
	Элементы.ПричинаПризнанияЗакупкиНесостоявшейся.Видимость = ((НЕ Объект.ТоргиСостоялись) И (НЕ НазначенаПереторжка));
	Элементы.СоставУчастниковПереторжки.Видимость = НазначенаПереторжка;
	Элементы.НомерПереторжки.Видимость = (Объект.НомерПереторжки > 0);
	Элементы.ЭТП.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура);
	Элементы.ОрганизаторЗакупки.ТолькоПросмотр = Истина;
	УстановитьОформлениеЕдинственногоПоставщика();
	УстановитьОформлениеСозданиеДоговоров(ЭтаФорма);
	УстановитьОформлениеПроведенногоДокумента();
	УстановитьОформлениеПризнанияТорговНесостоявшимися();
	ЗаполнитьСуммыПоЛоту();
	ЗаполнитьНастройкуЗонтичнойЗакупки();

КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытиеФормыНазначенияПоставщиковНоменклатуреЛота(Лот)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Лот", Лот);
		ПараметрыФормы.Вставить("ПротоколВыбораПобедителей", Объект.Ссылка);
		ПараметрыФормы.Вставить("ОткрытИзФормы", Истина);
		РазрешенныеПредложения=ПолучитьСписокРазрешенныхПредложений();
		Если  РазрешенныеПредложения<>Неопределено Тогда
			ПараметрыФормы.Вставить("РазрешенныеПредложения",РазрешенныеПредложения);
		КонецЕсли;	
		ОткрытьФорму("Обработка.НазначениеПоставщиковНоменклатуреЛота.Форма", 
			ПараметрыФормы,	ЭтаФорма, , , ,	, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать документ перед оценкой. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРазрешенныхПредложений()
		Если  ТекущийМетодОценкиПоставщиков
			=Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям Тогда
			СписокПредложений=Новый СписокЗначений();
			Для Каждого СтрокаМассива из Объект.ПредложенияПобедителей.НайтиСтроки(Новый Структура("Победитель",Истина)) Цикл
				СписокПредложений.Добавить(СтрокаМассива.ПредложениеПоставщика);	
			КонецЦикла;
			Возврат СписокПредложений
		Иначе
			Возврат Неопределено
		КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура УстановитьДоступностьНазначенияПоставщиковПоСтроке()
	ТекДанные = Элементы.ЛотыЗакупки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		// Строка не выбрана - все равно нет контекста для команды.
		Элементы.НазначитьПоставщиковНоменклатуреЛота.Доступность = Ложь;
	Иначе
		МетодОценкиПоЦенам = ПредопределенноеЗначение("Перечисление.МетодыОценкиПредложенийПоставщиков.ПоЦенам");
		ЭтоМетодОценкиПоЦенам = (ТекДанные.МетодОценкиПредложенийПоставщиков = МетодОценкиПоЦенам);
		НазначениеДоступно = ((НЕ флДокументУтвержден) И (ЭтоМетодОценкиПоЦенам));
		ДоступнаЗакладка = НЕ Элементы.СтраницаДокументыВыбораПоЛотам.ТолькоПросмотр;
		ВидЗакупкиЗонтичная =  ПредопределенноеЗначение("Перечисление.ВидЛотовойЗакупки.Зонтичная");
		ЭтоВидЛотовойЗакупки = (ТекДанные.ВидЗакупки = ВидЗакупкиЗонтичная);
		Элементы.НазначитьПоставщиковНоменклатуреЛота.Доступность =	(НазначениеДоступно И ДоступнаЗакладка) И НЕ ЭтоВидЛотовойЗакупки;
		Элементы.РаспределениеПоЗонтичнойЗакупке.Доступность =  НазначениеДоступно  И ЭтоВидЛотовойЗакупки;
		Элементы.РаспределениеПоЗонтичнойЗакупке.Видимость =  (ТекДанные.ВидЗакупки = ВидЗакупкиЗонтичная);
		Элементы.НазначитьПоставщиковНоменклатуреЛота.Видимость =  НЕ (ТекДанные.ВидЗакупки = ВидЗакупкиЗонтичная);
		ОценкаПоЦенам = Элементы.ЛотыЗакупки.ТекущиеДанные.МетодОценкиПредложенийПоставщиков = 
		ПредопределенноеЗначение("Перечисление.МетодыОценкиПредложенийПоставщиков.ПоЦенам");
		Если НЕ ОценкаПоЦенам Тогда 
			Элементы.РаспределениеПоЗонтичнойЗакупке.Видимость = Ложь;
			Элементы.НазначитьПоставщиковНоменклатуреЛота.Видимость =  Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПредложенийПобедителейТекущегоЛота(ТекущийЛот)
	Если Элементы.ЛотыЗакупки.ВыделенныеСтроки.Количество() <> 0 Тогда 
		Отбор = Новый Структура("Лот", ТекущийЛот);
		Элементы.ПредложенияПобедителей.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		Элементы.НоменклатураПоЗонтичнойЗакупке.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборРаспределенияПоПотребностямТекущегоЛота(ТекущийЛот)
	Отбор = Новый Структура("Лот", ТекущийЛот);
	Элементы.ПотребностиПоПоставщикам.ОтборСтрок =
		Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьОформлениеПредложенияПобедителейДляЛота(ТекущийЛот)
	флЕстьДоступ = ТекущийЛот <> Неопределено И ЗначениеЗаполнено(ТекущийЛот);
	флВыборПоЦенам = флЕстьДоступ 
		И ТекущийМетодОценкиПоставщиков = ПредопределенноеЗначение(
			"Перечисление.МетодыОценкиПредложенийПоставщиков.ПоЦенам");
	флВыборПоКритериям = флЕстьДоступ И НЕ флВыборПоЦенам;
	флМожноРедактироватьПоставщиков = НЕ ЭтоЗакупкаУЕдинственногоПоставщика
		И флВыборПоЦенам;
	Элементы.ПредложенияПобедителей.ТолькоПросмотр = НЕ флЕстьДоступ;
	Элементы.ПредложенияПобедителей.ИзменятьСоставСтрок =
		флМожноРедактироватьПоставщиков;
	ДоступнаЗакладка = НЕ Элементы.СтраницаДокументыВыбораПоЛотам.ТолькоПросмотр;	
	Элементы.НазначитьПоставщиковНоменклатуреЛота.Доступность
		= флМожноРедактироватьПоставщиков;
	ОтображатьКомандыВыбораАльтернатив = ((флВыборПоКритериям) И (НЕ ЭтоЗакупкаУЕдинственногоПоставщика) И (Объект.ТоргиСостоялись));	
	Элементы.ГруппаКомандВыборАльтернативЛота.Видимость = ОтображатьКомандыВыбораАльтернатив;
	
	УстановитьОформлениеОценкиПредложенийПоКритериям(ТекущийЛот);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОценкиПредложенийПоКритериям(ТекущийЛот)
	Если ЗначениеЗаполнено(ТекущийЛот) 
		И ТекущийЛот.ВидЗакупки=Перечисления.ВидЛотовойЗакупки.ПопозиционнаяЗакупка
	    И Объект.ПредложенияПобедителей.Количество()>0
		И Объект.ПредложенияПобедителей.НайтиСтроки(Новый Структура("Победитель",истина)).Количество()>1 Тогда
		Элементы.КомандаОценкаПоЦенамКритерий.Видимость=Истина;
	КонецЕсли;	
	Элементы.НоменклатураПоЗонтичнойЗакупке.АктивизироватьПоУмолчанию = Ложь;

КонецПроцедуры	

&НаКлиенте
Процедура УстановитьОформлениеРаспределенияПоПотребностямДляЛота(ТекущийЛот)
	флЕстьДоступ = ТекущийЛот <> Неопределено И ЗначениеЗаполнено(ТекущийЛот);
	флВыборПоЦенам = флЕстьДоступ 
		И ТекущийМетодОценкиПоставщиков = ПредопределенноеЗначение(
			"Перечисление.МетодыОценкиПредложенийПоставщиков.ПоЦенам");
	Элементы.ПотребностиПоПоставщикам.ТолькоПросмотр = НЕ флЕстьДоступ
		ИЛИ ЭтоЗакупкаУЕдинственногоПоставщика
		ИЛИ Объект.ПредложенияПобедителей.Количество() < 2;
	Элементы.ПотребностиПоПоставщикамПредложениеПоставщика.СписокВыбора.ЗагрузитьЗначения(
		ПолучитьПредложенияПоставщиковДляЛота(ТекущийЛот));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредложенияПоставщиковДляЛота(ТекущийЛот)
	Результат = Новый Массив;
	Отбор = Новый Структура;
	Отбор.Вставить("Лот", ТекущийЛот);
	мСтрок = Объект.ПредложенияПобедителей.НайтиСтроки(Отбор);
	Для Каждого Строка Из мСтрок Цикл
		Результат.Добавить(Строка.ПредложениеПоставщика);
	КонецЦИкла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОткрытьПредложениеПоставщика(ПредложениеПоставщика)
	Если ЗначениеЗаполнено(ПредложениеПоставщика) Тогда
			ДопПараметры = Новый Структура("Ключ", ПредложениеПоставщика);
			ОткрытьФорму(
				"Документ.ПредложениеПоставщика.ФормаОбъекта",
				ДопПараметры,
				ЭтаФорма);
		КонецЕсли;
КонецПроцедуры

// Выводит на форму выбранное предложение поставщика.
&НаКлиенте
Процедура ОтобразитьВыбранноеПредложениеПоставщика()
	Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
		Если ТекПредложенияПобедителей.Победитель Тогда
			ПредложениеЕдинственногоПоставщика = ТекПредложенияПобедителей.ПредложениеПоставщика;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	ОтобразитьКонтрагентаЕдинственныйПоставщик();
КонецПроцедуры		// ОтобразитьВыбранноеПредложениеПоставщика()

// Устанавливает в табличной части победителем предложение ПредложениеВход.
&НаКлиенте
Процедура УстановитьПредложениеПобедитель(ПредложениеВход)
	Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
		ТекПредложение = ТекПредложенияПобедителей.ПредложениеПоставщика;
		ПредложенияСовпадают = (ТекПредложение = ПредложениеВход);
		ТекПредложенияПобедителей.Победитель = ПредложенияСовпадают;
	КонецЦикла;		
КонецПроцедуры		// УстановитьПредложениеПобедитель()

// Отображает список выбора предложений поставщиков для закупки у единственного поставщика.
&НаКлиенте
Процедура ОтобразитьСписокВыбораПредложений()
	СписокПредложений = Новый СписокЗначений;
	Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
		ТекПредложениеПоставщика = ТекПредложенияПобедителей.ПредложениеПоставщика;
		ТекПоставщик = ТекПредложенияПобедителей.Поставщик;
		ПредставлениеПредложения = НСтр("ru = '(%Поставщик%) %Предложение%'");
		ПредставлениеПредложения = СтрЗаменить(ПредставлениеПредложения, "%Предложение%", Строка(ТекПредложениеПоставщика));
		ПредставлениеПредложения = СтрЗаменить(ПредставлениеПредложения, "%Поставщик%", Строка(ТекПоставщик));
		СписокПредложений.Добавить(ТекПредложениеПоставщика, ПредставлениеПредложения);
	КонецЦикла;	
	СтруктураПараметров = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЕдинственногоПоставщика_Завершение", ЭтаФорма, СтруктураПараметров);
	ТекстВопроса = НСтр("ru = 'Выберите предложение поставщика'");
	СписокПредложений.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстВопроса);
КонецПроцедуры		// ОтобразитьСписокВыбораПредложений()

// Возвращает текстовое представление варианта Закупка состоялась.
&НаСервереБезКонтекста
Функция ЗакупкаСостояласьПредставление()
	Возврат "ЗакупкаСостоялась";
КонецФункции		 // ЗакупкаСостояласьПредставление()

// Возвращает текстовое представление варианта Переторжка.
&НаСервереБезКонтекста
Функция ЗакупкаПереторжкаПредставление()
	Возврат "Переторжка";
КонецФункции		 // ЗакупкаПереторжкаПредставление()

// Возвращает текстовое представление варианта Закупка не состоялась.
&НаСервереБезКонтекста
Функция ЗакупкаНеСостояласьПредставление()
	Возврат "ЗакупкаНеСостоялась";
КонецФункции		 // ЗакупкаНеСостояласьПредставление()

// Отображает результат закупки на форме в зависимости от 
&НаКлиенте
Процедура ОтобразитьСостояниеТоргов()
	Если Объект.ТоргиСостоялись Тогда
		РезультатОтображение = ЗакупкаСостояласьПредставление();
	Иначе
		Если Объект.ПринятоРешениеОПереторжке Тогда
			РезультатОтображение = ЗакупкаПереторжкаПредставление();
		Иначе
			РезультатОтображение = ЗакупкаНеСостояласьПредставление();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры		// ОтобразитьСостояниеТоргов()

// Отображает контрагента единственного поставщика на форме.
&НаКлиенте
Процедура ОтобразитьКонтрагентаЕдинственныйПоставщик()
	Если ЗначениеЗаполнено(ПредложениеЕдинственногоПоставщика) Тогда
		КонтрагентЕдинственныйПоставщик = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПредложениеЕдинственногоПоставщика, "Контрагент");
	Иначе
		КонтрагентЕдинственныйПоставщик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры		// ОтобразитьКонтрагентаЕдинственныйПоставщик()

#КонецОбласти


#Область СлужебныеПроцедурыНаСервере
&НаСервере
Процедура ЗакупочнаяПроцедураПриИзмененииНаСервере(ЗаменитьНомерПереторжкиВход = Ложь)
	// Заполнение данных объекта из закупки.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЗакупкаОбъекта = ДокументОбъект.ЗакупочнаяПроцедура;
	ДокументОбъект.ЗаполнитьИзЗакупочнойПроцедуры(ЗакупкаОбъекта);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	// Обновление данных на форме.
	УстановитьРеквизитыФормыПоЗакупке();
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(ЭтаФорма, ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	АктивироватьПервыйЛотЗакупки();
	Если ЗначениеЗаполнено(ЗакупкаОбъекта) Тогда
		СпособВыбораПоставщика = ЗакупкаОбъекта.СпособВыбораПоставщика;
		// Обновление номера переторжки.
		Если ЗаменитьНомерПереторжкиВход Тогда
			ТекущийНомерПереторжки = РегистрыСведений.ПереторжкаЗакупок.ПолучитьАктуальныйНомерПереторжки(ЗакупкаОбъекта);
			Объект.НомерПереторжки = ТекущийНомерПереторжки;
		Иначе
			// Не изменяем номер.
		КонецЕсли;
		// Отображение варианта для переторжки.
		Если ЗакупкаОбъекта.Переторжка Тогда
			НовыйСписокРежимов = Новый СписокЗначений;
			НовыйСписокРежимов.Добавить("ЗакупкаСостоялась", НСтр("ru = 'Состоялась успешно'"));
			НовыйСписокРежимов.Добавить("Переторжка", НСтр("ru = 'Переторжка'"));
			НовыйСписокРежимов.Добавить("ЗакупкаНеСостоялась", НСтр("ru = 'Не состоялась'"));
		Иначе
			НовыйСписокРежимов = Новый СписокЗначений;
			НовыйСписокРежимов.Добавить("ЗакупкаСостоялась", НСтр("ru = 'Состоялась успешно'"));
			НовыйСписокРежимов.Добавить("ЗакупкаНеСостоялась", НСтр("ru = 'Не состоялась'"));
		КонецЕсли;
		Элементы.РезультатОтображение.СписокВыбора.Очистить();
		Для Каждого ТекНовыйСписокРежимов Из НовыйСписокРежимов Цикл
			Элементы.РезультатОтображение.СписокВыбора.Добавить(ТекНовыйСписокРежимов.Значение, ТекНовыйСписокРежимов.Представление);
		КонецЦикла;	
		Объект.ЭТП = Объект.ЗакупочнаяПроцедура.ЭТП;
	Иначе
		СпособВыбораПоставщика = ПредопределенноеЗначение("Перечисление.СпособыВыбораПоставщика.ПустаяСсылка");
		Объект.НомерПереторжки = 0;
		Объект.ЭТП = Справочники.ВнешниеСистемыПроводящиеЗакупкиВЭлектроннойФорме.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры
	

&НаСервере
Процедура УстановитьРеквизитыФормыПоЗакупке()
	флДокументУтвержден = ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		СпособВыбораПоставщика = Объект.ЗакупочнаяПроцедура.СпособВыбораПоставщика;
		ЭтоФЗ223 = Справочники.ЗакупочныеПроцедуры.ЭтоФЗ223(Объект.ЗакупочнаяПроцедура);
		ПубликуетсяНаЭТП = (Объект.ЗакупочнаяПроцедура.СпособПубликации = Перечисления.СпособПубликацииЗакупки.НаЭТП);
		флЭтоАукцион = Перечисления.СпособыВыбораПоставщика.ЭтоАукцион(СпособВыбораПоставщика);
		ПериодЗакупок = Объект.ЗакупочнаяПроцедура.ПериодЗакупок;
	Иначе
		СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ПустаяСсылка();
		ЭтоФЗ223 = Ложь;
		ПубликуетсяНаЭТП = Ложь;
		флЭтоАукцион = Ложь;
		ПериодЗакупок = Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	ЗаполнитьЛотыЗакупки();
	флПоказатьТипПротокола = Документы.ПротоколВыбораПобедителей.ДляЕИСТребуетсяТипПротокола(Объект);
	ЭтоЗакупкаУЕдинственногоПоставщика =
		(СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика);
	флОбновлятьТаблицуПредложений = (НЕ ПубликуетсяНаЭТП) И (НЕ ЭтоЗакупкаУЕдинственногоПоставщика);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛотыЗакупки()
	Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Лоты.Ссылка КАК Лот,
			|	Лоты.МетодОценкиПредложенийПоставщиков КАК МетодОценкиПредложенийПоставщиков,
			|	Лоты.ВалютаДокумента КАК ВалютаДокумента,
			|	Лоты.ВидЗакупки КАК ВидЗакупки,
			|	Лоты.ЗапретПревышенияНМЦ КАК ЗапретПревышенияНМЦ,
			|	Лоты.СуммаЛота КАК СуммаЛота
			|ИЗ
			|	Справочник.Лоты КАК Лоты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗакупочныеПроцедуры КАК ЗакупочныеПроцедуры
			|		ПО Лоты.Владелец = ЗакупочныеПроцедуры.Ссылка
			|ГДЕ
			|	ЗакупочныеПроцедуры.Ссылка = &ЗакупочнаяПроцедура
			|	И НЕ Лоты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", Объект.ЗакупочнаяПроцедура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ЛотыЗакупки.Загрузить(
			РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой));
	Иначе
		ЛотыЗакупки.Очистить();
	КонецЕсли;
	ЗаполнитьСуммыПоЛоту();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыПоЛоту()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛотыЗакупки",ЛотыЗакупки.Выгрузить());
	Запрос.УстановитьПараметр("ПотребностиПоПоставщикам",ПотребностиПоПоставщикам.Выгрузить());
	Запрос.УстановитьПараметр("ПредложенияПобедителей",Объект.ПредложенияПобедителей.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛотыЗакупки.Лот КАК Лоты
	               |ПОМЕСТИТЬ ЛотыЗакупки
	               |ИЗ
	               |	&ЛотыЗакупки КАК ЛотыЗакупки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПотребностиПоПоставщикам.Сумма КАК Сумма,
	               |	ПотребностиПоПоставщикам.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ПотребностиПоПоставщикам.Лот КАК Лот
	               |ПОМЕСТИТЬ ПотребностиПоПоставщикам
	               |ИЗ
	               |	&ПотребностиПоПоставщикам КАК ПотребностиПоПоставщикам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредложенияПобедителей.ПредложениеПоставщика КАК ПредложениеПоставщика
	               |ПОМЕСТИТЬ ПредложенияПобедителей
	               |ИЗ
	               |	&ПредложенияПобедителей КАК ПредложенияПобедителей
	               |ГДЕ
	               |	ПредложенияПобедителей.Победитель = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ПотребностиПоПоставщикам.Сумма) КАК Сумма,
	               |	ПотребностиПоПоставщикам.Лот КАК Лот
	               |ПОМЕСТИТЬ ПотребностиПоПоставщикамСуммы
	               |ИЗ
	               |	ПотребностиПоПоставщикам КАК ПотребностиПоПоставщикам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредложенияПобедителей КАК ПредложенияПобедителей
	               |		ПО (ПредложенияПобедителей.ПредложениеПоставщика = ПотребностиПоПоставщикам.ПредложениеПоставщика)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПотребностиПоПоставщикам.Лот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛотыЗакупки.Лоты КАК Лот,
	               |	ПотребностиПоПоставщикамСуммы.Сумма КАК СуммаЗакупки
	               |ИЗ
	               |	ЛотыЗакупки КАК ЛотыЗакупки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотребностиПоПоставщикамСуммы КАК ПотребностиПоПоставщикамСуммы
	               |		ПО ЛотыЗакупки.Лоты = ПотребностиПоПоставщикамСуммы.Лот";
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Для Каждого СтрокаЛота ИЗ ЛотыЗакупки Цикл
			Если СтрокаЛота.Лот = Результат.Лот Тогда
				СтрокаЛота.СуммаЗакупки = Результат.СуммаЗакупки;
				СтрокаЛота.Экономия = СтрокаЛота.СуммаЛота - Результат.СуммаЗакупки;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	Элементы.ЛотыЗакупкиСуммаЛота.ТекстПодвала = ЛотыЗакупки.Итог("СуммаЛота");
	Элементы.ЛотыЗакупкиСуммаЗакупки.ТекстПодвала = ЛотыЗакупки.Итог("СуммаЗакупки");
	Элементы.ЛотыЗакупкиЭкономия.ТекстПодвала = ЛотыЗакупки.Итог("Экономия");
	Элементы.ЛотыЗакупкиСуммаЛота.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.ЛотыЗакупкиСуммаЗакупки.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.ЛотыЗакупкиЭкономия.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	
	НомерПереторжкиЗакупка = РегистрыСведений.ПереторжкаЗакупок.ПолучитьАктуальныйНомерПереторжки(Объект.ЗакупочнаяПроцедура);
	ПотребностиПоПоставщикамВсе.Очистить();
	Для Каждого ТекПредложенияПобедителей Из ПредложенияПобедителей Цикл
		ТекПредложениеПоставщика = ТекПредложенияПобедителей.ПредложениеПоставщика;
		Если ТекПредложениеПоставщика.НомерПереторжки = НомерПереторжкиЗакупка Тогда
			ПредложениеСсылка = ТекПредложенияПобедителей.ПредложениеПоставщика;
			Для Каждого ТекУсловияПоНоменклатуре Из ПредложениеСсылка.УсловияПоНоменклатуре Цикл
				НоваяСтрока = ПотребностиПоПоставщикамВсе.Добавить();
				НоваяСтрока.Лот						 = ТекПредложениеПоставщика.Лот;
				НоваяСтрока.Номенклатура			 = ТекУсловияПоНоменклатуре.Номенклатура;
				НоваяСтрока.Характеристика			 = ТекУсловияПоНоменклатуре.Характеристика;
				НоваяСтрока.Организация				 = ТекПредложениеПоставщика.Лот.ОрганизацияДляЗаключенияДоговора;
				НоваяСтрока.МестоПоставки			 = ТекУсловияПоНоменклатуре.МестоПоставки;
				НоваяСтрока.ПредложениеПоставщика	 = ПредложениеСсылка;
				НоваяСтрока.ЕдиницаИзмерения		 = ТекУсловияПоНоменклатуре.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент				 = ТекУсловияПоНоменклатуре.Коэффициент;
				НоваяСтрока.Количество				 = ТекУсловияПоНоменклатуре.Количество;
				НоваяСтрока.Цена					 = ТекУсловияПоНоменклатуре.Цена;
				НоваяСтрока.Сумма					 = ТекУсловияПоНоменклатуре.Сумма;
				НоваяСтрока.СтавкаНДС				 = ТекУсловияПоНоменклатуре.СтавкаНДС;
				НоваяСтрока.СуммаНДС				 = ТекУсловияПоНоменклатуре.СуммаНДС;
				НоваяСтрока.Проект  				 = ТекУсловияПоНоменклатуре.Проект;
				
			КонецЦикла;	
		Иначе
			// Пропускаем это предложение, т.к. не относится к текущей переторжке.
		КонецЕсли;
	КонецЦикла;	
	ТЧ = ПотребностиПоПоставщикамВсе.Выгрузить();
	ТЧ.Свернуть("","Сумма");
КонецПроцедуры	
	
&НаСервере
Процедура АктивироватьПервыйЛотЗакупки()
	Если ЛотыЗакупки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ИдПервойСтроки = ЛотыЗакупки[0].ПолучитьИдентификатор();
	Элементы.ЛотыЗакупки.ТекущаяСтрока = ИдПервойСтроки;
КонецПроцедуры

// Заполняет ТЧ ПредложенияПобедителей по данным выбора альтернатив.
// Имеет смысла для способа выбора по критериям вручную (не с ЭТП).
//
&НаСервере
Процедура ЗаполнитьТаблицуПредложенийПобедителей()
	Для Каждого СтрокаЛота Из ЛотыЗакупки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Победитель",Истина);
		Отбор.Вставить("Лот",СтрокаЛота.Лот);
		Если Объект.ПредложенияПобедителей.НайтиСтроки(Отбор).Количество() = 0 Тогда
		ЗаполнитьТаблицуПредложенийПобедителейПоЛоту(СтрокаЛота.Лот);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредложенийПобедителейПоЛоту(Лот)
	Документы.ПротоколВыбораПобедителей.ОбновитьПредложенияПобедителейПоЛоту(
		Объект.ЗакупочнаяПроцедура, Лот, Объект.ПредложенияПобедителей, Объект.Ссылка);
	АктуализироватьПредложенияПоставщиковПоЛоту(Лот);
КонецПроцедуры

// Заполнят ТЧ ПредложенияПобедителей по данным выбора альтернатив.
// Имеет смысла для способа выбора по критериям вручную (не с ЭТП).
//
&НаСервере
Процедура ОбновитьТаблицуПредложенийПобедителей()
	Если флОбновлятьТаблицуПредложений Тогда
		ЗаполнитьТаблицуПредложенийПобедителей();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПредложенияПоставщиковПоЛоту(Лот)
	МассивПредложенийПоЛоту = ПолучитьПредложенияПоЛоту(Объект.ПредложенияПобедителей, Лот);
	АктуализироватьПредложенияВРаспределенииПоЛоту(
		МассивПредложенийПоЛоту, Объект.РаспределениеПоПотребностям, Лот);
	Если ЭтоЗакупкаУЕдинственногоПоставщика Тогда
		Документы.ПротоколВыбораПобедителей.ПроверитьУстановитьЕдинственногоПоставщикаВПотребностяхПоЛоту(
			Объект, Лот);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредложенияПоЛоту(ПредложенияПобедителейВход, Лот)
	Отбор = Новый Структура("Лот", Лот);
	ВыгрузкаПредложения = ПредложенияПобедителейВход.Выгрузить(Отбор, "ПредложениеПоставщика");
	РезультатФункции = ВыгрузкаПредложения.ВыгрузитьКолонку(0);
	Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
// Очищает реквизит ПредложениеПоставщика в ТЧ РаспределениеПоПотребностям
// если его значение отсутствует в массиве ДопустимыеПредложенияПобедителей.
//
// Параметры:
//  ДопустимыеПредложенияПобедителей - Массив(ДокументСсылка.ПредложениеПоставщика)
//		- предложения победителей, которые можно использовать в ТЧ распределения.
//  РаспределениеПоПотребностям - ДокументОбъект.ВыборПоставщиковЛота.РаспределениеПоПотребностям |
//		ДанныеФормыКоллекция - табличная часть или ее реквизит формы
//			для проверки и очищения реквизита ПредложениеПоставщика.
//
Процедура АктуализироватьПредложенияВРаспределенииПоЛоту(
								ДопустимыеПредложенияПобедителей,
								РаспределениеПоПотребностям,
								Лот) Экспорт
	Отбор = Новый Структура("Лот", Лот);
	мСтрокиРаспределения = РаспределениеПоПотребностям.НайтиСтроки(Отбор);
	Для Каждого Распределение Из мСтрокиРаспределения Цикл
		Если ЗначениеЗаполнено(Распределение.ПредложениеПоставщика) Тогда
			ИндексПредложения = ДопустимыеПредложенияПобедителей.Найти(
				Распределение.ПредложениеПоставщика);
			Если ИндексПредложения = Неопределено Тогда
				Распределение.ПредложениеПоставщика = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНоменклатуруПоВсем()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЗакупкаОбъекта = ДокументОбъект.ЗакупочнаяПроцедура;
	ДокументОбъект.ЗаполнитьИзЗакупочнойПроцедуры(ЗакупкаОбъекта, Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредложенийПобедителейИзТаблицыРаспределения(АдресРезультата,	Лот)
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ТаблицаПобедителей = ПолучитьИзВременногоХранилища(АдресРезультата);

		ПопозиционнаяЗакупка = Лот.ВидЗакупки=Перечисления.ВидЛотовойЗакупки.ПопозиционнаяЗакупка;
		Если ПопозиционнаяЗакупка Тогда
			УбратьПобедителейРаспределения();
		КонецЕсли;
		СоответствиеПериодов=ПолучитьСоответствиеКолонокПоПериоду();

		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьПоЛоту(Лот, Ложь);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
		Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
			Если ТекПредложенияПобедителей.Лот = Лот Тогда
				ТекПредложенияПобедителей.Победитель = Ложь;
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого ТекТаблицаПобедителей Из ТаблицаПобедителей Цикл
			Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
				СовпадаютПредложения = (ТекТаблицаПобедителей.ПредложениеПоставщика = ТекПредложенияПобедителей.ПредложениеПоставщика);
				Если СовпадаютПредложения Тогда
					ТекПредложенияПобедителей.Победитель = Истина;
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		УстановитьРеквизитыФормыПоЗакупке();
		ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(ЭтаФорма, ЭтаФорма.ПараметрыКроссТаблицыПотребностей);

		Элементы.ПотребностиПоПоставщикам.Обновить();
		ТаблицаПобедителей = РаспределитьПоМестамПобедителя(ТаблицаПобедителей);
		КоличествоСтрок = Объект.РаспределениеПоПотребностям.Количество()-1;
			Пока КоличествоСтрок >= 0 Цикл
				СтрокаРаспределения = Объект.РаспределениеПоПотребностям[КоличествоСтрок];
				СтруктураСоответствияПредложений = СтруктураСоответствияПредложений(СтрокаРаспределения);
				СтруктураСоответствияПредложений.Вставить("ПериодПотребности",СтрокаРаспределения.ПериодПотребности );
				СтрокиПобедителей = ТаблицаПобедителей.НайтиСтроки(СтруктураСоответствияПредложений);
				Для Каждого ТекТаблицаПобедителей ИЗ  СтрокиПобедителей Цикл
					СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Истина;
					СтрокаРаспределения.Количество = ТекТаблицаПобедителей.Количество;
					СтрокаРаспределения.Сумма = ТекТаблицаПобедителей.Сумма;
					СтрокаРаспределения.СуммаНДС = ТекТаблицаПобедителей.СуммаНДС;
					СтрокаРаспределения.СуммаСНДС = ТекТаблицаПобедителей.СуммаСНДС;
					СтрокаРаспределения.МестоПобедителя = ТекТаблицаПобедителей.МестоПобедителя;
				КонецЦикла;	
				Если СтрокиПобедителей.Количество() = 0 
					И ТаблицаПобедителей.НайтиСтроки(Новый Структура("ПредложениеПоставщика",СтрокаРаспределения.ПредложениеПоставщика)).Количество() > 0 Тогда
					Объект.РаспределениеПоПотребностям.Удалить(КоличествоСтрок);
				КонецЕсли;
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЦикла;	        
			КоличествоСтрок = ПотребностиПоПоставщикам.Количество()-1;
			Пока КоличествоСтрок >= 0 Цикл
				СтрокаРаспределения = ПотребностиПоПоставщикам[КоличествоСтрок];
				СтруктураИтогов = ЗаполнитьСтруктуруИтогов();
				ЗаполнитьЗначенияСвойств(СтруктураИтогов,СтрокаРаспределения);
				СтруктураСоответствияПредложений = СтруктураСоответствияПредложений(СтрокаРаспределения);
				СтрокиПобедителей = ТаблицаПобедителей.НайтиСтроки(СтруктураСоответствияПредложений);
				Количество = 0;
				Сумма = 0;
				СуммаНДС = 0;
				Для Каждого ТекТаблицаПобедителей ИЗ СтрокиПобедителей Цикл
					ЗаголовокПериода = СоответствиеПериодов.Получить(СокрЛП(ТекТаблицаПобедителей.ПериодПотребности));
					СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Истина;
					СтрокаРаспределения["Количество_"+ЗаголовокПериода] = ТекТаблицаПобедителей.Количество;
					СтрокаРаспределения["Сумма_"+ЗаголовокПериода]=ТекТаблицаПобедителей.Сумма;
					Количество = ТекТаблицаПобедителей.Количество + Количество;
					Сумма = ТекТаблицаПобедителей.Сумма + Сумма;
					СуммаНДС = ТекТаблицаПобедителей.СуммаНДС+СуммаНДС;
					СтрокаРаспределения.МестоПобедителя = ТекТаблицаПобедителей.МестоПобедителя;
				КонецЦикла;	
				Если СтрокиПобедителей.Количество() = 0
					И ТаблицаПобедителей.НайтиСтроки(Новый Структура("ПредложениеПоставщика",СтрокаРаспределения.ПредложениеПоставщика)).Количество() > 0 Тогда
					ПотребностиПоПоставщикам.Удалить(КоличествоСтрок);
				ИначеЕсли СтрокиПобедителей.Количество() > 0 Тогда
					СтрокаРаспределения["СуммаНДС"] = СуммаНДС;
					СтрокаРаспределения["Количество"] = Количество;
					СтрокаРаспределения["Сумма"] = Сумма;
				КонецЕсли;
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЦикла;					
		
	КонецЕсли;
	Элементы.ПотребностиПоПоставщикам.Обновить();
КонецПроцедуры

&НаСервере
Функция РаспределитьПоМестамПобедителя(ТаблицаПобедителей)
	
	ТаблицаПобедителейПоМестам = ТаблицаПобедителей.Скопировать();
	ТаблицаПобедителейПоМестам.Свернуть("ЕдиницаИзмерения,Характеристика,Коэффициент,Менеджер,МестоПоставки,Номенклатура,Организация,Приоритет,Проект,ПредложениеПоставщика","Цена");	
	ТаблицаПобедителейПоМестам.Сортировать("ЕдиницаИзмерения,Характеристика,Коэффициент,Менеджер,МестоПоставки,Номенклатура,Организация,Приоритет,Проект,Цена,ПредложениеПоставщика");
	ТаблицаПобедителейПоМестам.Колонки.Добавить("МестоПобедителя");
	
	Если ТекущийМетодОценкиПоставщиков = ПредопределенноеЗначение(
			"Перечисление.МетодыОценкиПредложенийПоставщиков.ПоЦенам") Тогда
		МестоПобедителя = 1;
		СтараяСтрока = Неопределено;
		Для Каждого СтрокаРаспределения ИЗ ТаблицаПобедителейПоМестам Цикл
			Если СтараяСтрока = Неопределено Тогда
				СтрокаРаспределения.МестоПобедителя = МестоПобедителя;
			Иначе
				Если СтараяСтрока.ЕдиницаИзмерения = СтрокаРаспределения.ЕдиницаИзмерения
					И СтараяСтрока.Характеристика = СтрокаРаспределения.Характеристика
					И СтараяСтрока.Коэффициент = СтрокаРаспределения.Коэффициент
					И СтараяСтрока.Менеджер = СтрокаРаспределения.Менеджер
					И СтараяСтрока.МестоПоставки = СтрокаРаспределения.МестоПоставки
					И СтараяСтрока.Номенклатура = СтрокаРаспределения.Номенклатура
					И СтараяСтрока.Организация = СтрокаРаспределения.Организация
					И СтараяСтрока.Приоритет = СтрокаРаспределения.Приоритет
					И СтараяСтрока.Проект = СтрокаРаспределения.Проект Тогда
					СтрокаРаспределения.МестоПобедителя = МестоПобедителя;
				Иначе
					МестоПобедителя = 1;
					СтрокаРаспределения.МестоПобедителя = МестоПобедителя;
				КонецЕсли;	
			КонецЕсли;
			МестоПобедителя = МестоПобедителя + 1;
			СтараяСтрока = СтрокаРаспределения;
		КонецЦикла;	
	КонецЕсли;
	СтруктураРаспределения = Новый Структура("ЕдиницаИзмерения,Характеристика,Коэффициент,Менеджер,МестоПоставки,Номенклатура,Организация,Приоритет,Проект,ПредложениеПоставщика");
	Для Каждого СтрокаРаспределения Из ТаблицаПобедителей Цикл
		ЗаполнитьЗначенияСвойств(СтруктураРаспределения,СтрокаРаспределения);
		СтрокиПоиска = ТаблицаПобедителейПоМестам.НайтиСтроки(СтруктураРаспределения);
		Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
			 СтрокаРаспределения.МестоПобедителя = СтрокаПоиска.МестоПобедителя;
		КонецЦикла;	
	КонецЦикла;	
	Возврат ТаблицаПобедителей;
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруИтогов()
		СтруктураСравнения = Новый Структура();
		СтруктураСравнения.Вставить("Номенклатура");
		СтруктураСравнения.Вставить("Характеристика");
		СтруктураСравнения.Вставить("Организация");
		СтруктураСравнения.Вставить("ДоговорСПокупателем");
		СтруктураСравнения.Вставить("Менеджер");
		СтруктураСравнения.Вставить("МестоПоставки");
		СтруктураСравнения.Вставить("Приоритет");
		СтруктураСравнения.Вставить("Коэффициент");
		Возврат СтруктураСравнения;
	КонецФункции	
	
&НаСервереБезКонтекста
Функция СтруктураСоответствияПредложений(СтрокаПредложений)
	Структура = Новый Структура;
	Структура.Вставить("ДоговорСПокупателем",СтрокаПредложений.ДоговорСПокупателем);
	Структура.Вставить("Коэффициент",СтрокаПредложений.Коэффициент);
	Структура.Вставить("МестоПоставки",СтрокаПредложений.МестоПоставки);
	Структура.Вставить("Номенклатура",СтрокаПредложений.Номенклатура);
	Структура.Вставить("ПредложениеПоставщика",СтрокаПредложений.ПредложениеПоставщика);
	Структура.Вставить("Характеристика",СтрокаПредложений.Характеристика);
	Возврат Структура;	
КонецФункции	

&НаСервере
Функция ПолучитьСоответствиеКолонокПоПериоду()
	СоответствиеПериодаКолонки=Новый Соответствие;
	Для Каждого Период из Элементы.ПотребностиПоПоставщикам.ПодчиненныеЭлементы.ПотребностиПоПоставщикамГруппаРеквизитов.ПодчиненныеЭлементы Цикл
		СоответствиеПериодаКолонки.Вставить(Период.Заголовок,СтрЗаменить(Период.Имя,"ПотребностиПоПоставщикамГруппа",""));
	КонецЦикла;	
	Возврат СоответствиеПериодаКолонки;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция  СовпадаютСтрокиПредложений(ТекТаблицаПобедителей,СтрокаРаспределения)
	Если СтрокаРаспределения.ДоговорСПокупателем = ТекТаблицаПобедителей.ДоговорСПокупателем 
		И СтрокаРаспределения.Коэффициент = ТекТаблицаПобедителей.Коэффициент
		И СтрокаРаспределения.МестоПоставки = ТекТаблицаПобедителей.МестоПоставки 
		И СтрокаРаспределения.Номенклатура = ТекТаблицаПобедителей.Номенклатура 
		И СтрокаРаспределения.Организация = ТекТаблицаПобедителей.Организация  
		И СтрокаРаспределения.ПредложениеПоставщика = ТекТаблицаПобедителей.ПредложениеПоставщика  
		И СтрокаРаспределения.СтавкаНДС = ТекТаблицаПобедителей.СтавкаНДС  
		И СтрокаРаспределения.Характеристика = ТекТаблицаПобедителей.Характеристика
		Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции		

&НаСервере
Процедура УбратьПобедителейРаспределения()
	Для Каждого СтрокаРаспределения из Объект.РаспределениеПоПотребностям Цикл
		Если СтрокаРаспределения.Лот = ТекущийЛот Тогда
			СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Ложь;
			СтрокаРаспределения.МестоПобедителя = 0;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаРаспределения из ПотребностиПоПоставщикам Цикл
		Если СтрокаРаспределения.Лот = ТекущийЛот Тогда
			СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Ложь;
			СтрокаРаспределения.МестоПобедителя = 0;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
// Заполняет ТЧ РаспределениеПоПотребностям и ПредложенияПобедителей.
//
Процедура ОбновитьРаспределениеПоПотребностямИзТаблицыРаспределенияПоЦенам(
															Лот,
															ТаблицаРаспределения)
	Документы.ПротоколВыбораПобедителей.ДобавитьВРаспределениеПобедителейПоПотребностям(
		Лот, ТаблицаРаспределения, Объект.РаспределениеПоПотребностям);
	ТаблицаРаспределения.Свернуть("Поставщик,ПредложениеПоставщика", "Сумма");
	ТаблицаРаспределения.Сортировать("Сумма Убыв");
	Документы.ПротоколВыбораПобедителей.ОбновитьТаблицуПобедителей(
		ТаблицаРаспределения, Объект.ПредложенияПобедителей, Лот);
КонецПроцедуры

&НаСервере
Процедура ПредложенияПобедителейПредложениеПоставщикаПриИзмененииНаСервере(
															ТекущаяСтрока)
	ТекДанные = Объект.ПредложенияПобедителей.НайтиПоИдентификатору(
		ТекущаяСтрока);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.ПредложениеПоставщика) Тогда
		ТекДанные.Поставщик = ТекДанные.ПредложениеПоставщика.Контрагент;
	Иначе
		ТекДанные.Поставщик = ПредопределенноеЗначение(
			"Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	АктуализироватьПредложенияПоставщиковПоЛоту(ТекДанные.Лот);
КонецПроцедуры

// Возвращает массив контрагентов, допущенных к закупке по закупочной процедуре
// ЗакупкаВход.
&НаСервереБезКонтекста
Функция ПолучитьМассивПоставщиковПереторжка(ЗакупкаВход)
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(ЗакупкаВход) Тогда
		МассивДопущенных = Документы.ПредложениеПоставщика.ПолучитьДопущенныеКУчастиюВЗакупке(ЗакупкаВход);
		Для Каждого ТекМассивДопущенных Из МассивДопущенных Цикл
			РезультатФункции.Добавить(ТекМассивДопущенных.Контрагент);
		КонецЦикла;	
		РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
		РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Иначе
		ТекстСообщения = НСтр("ru = 'Закупка не заполнена'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивПоставщиковПереторжка()

#КонецОбласти


#Область ВнешнийИнтерфейсДляРаботыКроссТаблицыПотребностей


&НаСервере
Процедура ЗаполнитьОбъектДляКроссТаблицыПотребностей(
									Контекст,
									ОбъектДляЗаполнения) Экспорт
	ОбъектДляЗаполнения.Периодичность = ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();
	Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура) Тогда
		ЗаполнитьЗначенияСвойств(
			ОбъектДляЗаполнения, Объект.ЗакупочнаяПроцедура);
		ДатаНачалаОкончанияПоставка = Документы.СтрокаПланаЗакупок.ДатыПериодаНачалаОкончанияПоставкиПоЗакупочнойПроцедуре(Объект.ЗакупочнаяПроцедура);	
		Если ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура.ПериодЗакупок)
			И ДатаНачалаОкончанияПоставка = Неопределено Тогда
			ОбъектДляЗаполнения.ДатаНачала =
			Объект.ЗакупочнаяПроцедура.ПериодЗакупок.ДатаНачала;
			ОбъектДляЗаполнения.ДатаОкончания =
			Объект.ЗакупочнаяПроцедура.ПериодЗакупок.ДатаОкончания;
		ИначеЕсли ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура.ПериодЗакупок) Тогда
			ОбъектДляЗаполнения.ДатаНачала =
			НачалоГода(ДатаНачалаОкончанияПоставка.ДатаНачала);
			ОбъектДляЗаполнения.ДатаОкончания =
			КонецГода(ДатаНачалаОкончанияПоставка.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = Объект.Дата;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКроссТаблицы(Контекст) Экспорт
КонецПроцедуры

&НаСервере
Процедура СкопироватьВКроссТаблицу(Контекст) Экспорт
	ПотребностиПоПоставщикам.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.ЗакупочнаяПроцедура.ПериодЗакупок) Тогда
		Возврат;
	КонеЦЕсли;
	РезультатЗапроса = ПолучитьЗапросЗаполненияПотребностиПоПериодам(
		Объект.РаспределениеПоПотребностям,
		ЭтаФорма[Контекст.ИмяТаблицыПериодов]);
	ЦентрализованныеЗакупкиУХ.ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		ПотребностиПоПоставщикам, 
		РезультатЗапроса,
		Контекст.ИменаКлючевыхПолейКроссТаблицы);
	// TODO: вставить пересчет по строкам отобранным по лоту с параметрами ндс лота.
	ЦенаВключаетНДС = Ложь;
	ОбъектКонтекст = Контекст.Изменяемый.Объект;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектКонтекст, "ЦенаВключаетНДС") Тогда
		ЦенаВключаетНДС = ОбъектКонтекст.ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьИтоговыеПоказателиКроссТаблицы(
		ПотребностиПоПоставщикам,
		ЭтаФорма[Контекст.ИмяТаблицыПериодов],
		ЦенаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличества(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииКоличестваКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦены(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииЦеныКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииСуммыКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
КонецПроцедуры


#КонецОбласти


#Область РаботаСКроссТаблицейПотребностей


&НаСервереБезКонтекста
Функция ПолучитьЗапросЗаполненияПотребностиПоПериодам(
										ТЧРаспределениеПоПотребностям, 
										ПериодыЗакупок)
	// Пересчет валют не требуется, т.к. заполняем по лоту в его же валюте.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧРаспределениеПоПотребностям.Лот КАК Лот,
		|	ТЧРаспределениеПоПотребностям.Приоритет КАК Приоритет,
		|	ТЧРаспределениеПоПотребностям.Номенклатура КАК Номенклатура,
		|	ТЧРаспределениеПоПотребностям.Характеристика КАК Характеристика,
		|	ТЧРаспределениеПоПотребностям.ПериодПотребности КАК ПериодПотребности,
		|	ТЧРаспределениеПоПотребностям.Организация КАК Организация,
		|	ТЧРаспределениеПоПотребностям.МестоПоставки КАК МестоПоставки,
		|	ТЧРаспределениеПоПотребностям.Проект КАК Проект,
		|	ТЧРаспределениеПоПотребностям.Менеджер КАК Менеджер,
		|	ТЧРаспределениеПоПотребностям.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧРаспределениеПоПотребностям.ПредложениеПоставщика КАК ПредложениеПоставщика,
		|	ТЧРаспределениеПоПотребностям.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧРаспределениеПоПотребностям.Коэффициент КАК Коэффициент,
		|	ТЧРаспределениеПоПотребностям.Количество КАК Количество,
		|	ТЧРаспределениеПоПотребностям.Цена КАК Цена,
		|	ТЧРаспределениеПоПотребностям.Сумма КАК Сумма,
		|	ТЧРаспределениеПоПотребностям.СтавкаНДС КАК СтавкаНДС,
		|	ТЧРаспределениеПоПотребностям.СуммаНДС КАК СуммаНДС,
		|	ТЧРаспределениеПоПотребностям.СуммаСНДС КАК СуммаСНДС,
		|	ТЧРаспределениеПоПотребностям.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
		|	ТЧРаспределениеПоПотребностям.МестоПобедителя КАК МестоПобедителя,
		|	ТЧРаспределениеПоПотребностям.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТЧРаспределениеПоПотребностям.СтранаПроизводителя КАК СтранаПроизводителя,	
		|	ТЧРаспределениеПоПотребностям.НоменклатураПоставщика КАК НоменклатураПоставщика
		|ПОМЕСТИТЬ ТЧРаспределениеПоПотребностям
		|ИЗ
		|	&ПараметрТЧРаспределениеПоПотребностям КАК ТЧРаспределениеПоПотребностям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧРаспределениеПоПотребностям.Лот КАК Лот,
		|	ТЧРаспределениеПоПотребностям.Приоритет КАК Приоритет,
		|	ТЧРаспределениеПоПотребностям.Номенклатура КАК Номенклатура,
		|	ТЧРаспределениеПоПотребностям.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТЧРаспределениеПоПотребностям.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЧРаспределениеПоПотребностям.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЧРаспределениеПоПотребностям.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЧРаспределениеПоПотребностям.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТЧРаспределениеПоПотребностям.ПериодПотребности КАК ПериодПотребности,
		|	ТЧРаспределениеПоПотребностям.Организация КАК Организация,
		|	ТЧРаспределениеПоПотребностям.МестоПоставки КАК МестоПоставки,
		|	ТЧРаспределениеПоПотребностям.Проект КАК Проект,
		|	ТЧРаспределениеПоПотребностям.Менеджер КАК Менеджер,
		|	ТЧРаспределениеПоПотребностям.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧРаспределениеПоПотребностям.ПредложениеПоставщика КАК ПредложениеПоставщика,
		|	ТЧРаспределениеПоПотребностям.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧРаспределениеПоПотребностям.Коэффициент КАК Коэффициент,
		|	ТЧРаспределениеПоПотребностям.Количество КАК Количество,
		|	ТЧРаспределениеПоПотребностям.Цена КАК Цена,
		|	ТЧРаспределениеПоПотребностям.Сумма КАК Сумма,
		|	ТЧРаспределениеПоПотребностям.СтавкаНДС КАК СтавкаНДС,
		|	ТЧРаспределениеПоПотребностям.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ТЧРаспределениеПоПотребностям.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	0 КАК НомерСтроки,
		|	ТЧРаспределениеПоПотребностям.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
		|	ТЧРаспределениеПоПотребностям.МестоПобедителя КАК МестоПобедителя,
		|	ТЧРаспределениеПоПотребностям.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТЧРаспределениеПоПотребностям.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ТЧРаспределениеПоПотребностям.НоменклатураПоставщика КАК НоменклатураПоставщика
		|ИЗ
		|	ТЧРаспределениеПоПотребностям КАК ТЧРаспределениеПоПотребностям
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТЧРаспределениеПоПотребностям.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Номенклатура,
		|	Характеристика,
		|	Организация,
		|	МестоПоставки,
		|	Проект,
		|	Менеджер,
		|	ДоговорСПокупателем,
		|	ПредложениеПоставщика";
	Запрос.УстановитьПараметр(
		"ТаблицаПериодов",
		ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр(
		"ПараметрТЧРаспределениеПоПотребностям",
		ТЧРаспределениеПоПотребностям.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаКлиенте
Процедура ПроверкаЗаполненияТаблицыПотребностейНаКлиенте(Отказ)
	ОшибкиПользователю = Неопределено;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ХарактеристикиЗаполненыКорректно(
		ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		"Характеристика",
		"ХарактеристикиИспользуются",
		ОшибкиПользователю);
	Если ОшибкиПользователю <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
			ОшибкиПользователю,
			Отказ);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область УниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта()
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
КонецПроцедуры

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
	#Если НЕ ВебКлиент Тогда
	ДействияСогласованиеУХСервер.УстановитьДействиеПриИзмененииСогласованияОрганизации(ЭтаФорма);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаПриИзменении_Подключаемый()
	НовоеЗначениеСтатуса = РеквизитСтатусОбъекта(ЭтаФорма);
	ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатуса);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

&НаСервере
Функция СтруктураОтбора()
	Структура = Новый Структура();
	Структура.Вставить("Номенклатура");
	Структура.Вставить("Характеристика");
	Структура.Вставить("МестоПоставки");
	Структура.Вставить("Коэффициент");
	Структура.Вставить("ЕдиницаИзмерения"); 
	Возврат Структура;
КонецФункции

&НаСервере
Функция ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаРаспределения)
	Для Каждого Строка Из СтруктураПоиска Цикл
		СтруктураПоиска[Строка.Ключ] = СтрокаРаспределения[Строка.Ключ];	
	КонецЦикла;
КонецФункции


&НаСервере
Функция ПолучитьТаблицуРаспределения(Лот)
	ВалютаУчетаЗакупок = Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить();
	ОписаниеКоэффициента = ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		ВалютаУчетаЗакупок, Лот.ВалютаДокумента, Лот.ДатаНачалаПериодаПоставки);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛотыНоменклатура.Приоритет КАК Приоритет,
	|	ЛотыНоменклатура.Номенклатура КАК Номенклатура,
	|	ЛотыНоменклатура.Характеристика КАК Характеристика,
	|	ЛотыНоменклатура.ПериодПотребности КАК ПериодПотребности,
	|	ЛотыНоменклатура.Организация КАК Организация,
	|	ЛотыНоменклатура.МестоПоставки КАК МестоПоставки,
	|	ЛотыНоменклатура.Проект КАК Проект,
	|	ЛотыНоменклатура.Менеджер КАК Менеджер,
	|	ЛотыНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика КАК ПредложениеПоставщика,
	|	УсловияПредложенийПоставщиков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛотыНоменклатура.Коэффициент КАК Коэффициент,
	|	ЛотыНоменклатура.Количество КАК КоличествоПоЛоту,
	|	УсловияПредложенийПоставщиков.Количество КАК Количество,
	|	УсловияПредложенийПоставщиков.Цена * &КоэффициентПересчетаВалюты / &Кратность КАК Цена,
	|	ВЫБОР
	|		КОГДА УсловияПредложенийПоставщиков.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА УсловияПредложенийПоставщиков.Количество * УсловияПредложенийПоставщиков.Цена
	|		ИНАЧЕ УсловияПредложенийПоставщиков.Сумма
	|	КОНЕЦ * &КоэффициентПересчетаВалюты / &Кратность КАК Сумма,
	|	ЛотыНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика.Контрагент КАК Поставщик,
	|	УсловияПредложенийПоставщиков.ТоварНеПоставляется КАК ТоварНеПоставляется,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика.Дата КАК ДатаПредложения,
	|	0 КАК МестоПобедителя,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаСНДС,
	|	УсловияПредложенийПоставщиков.Регистратор.Дата КАК ДатаДокумента
	|ИЗ
	|	Справочник.Лоты.Номенклатура КАК ЛотыНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПредложенийПоставщиков КАК УсловияПредложенийПоставщиков
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереторжкаЗакупок.СрезПоследних КАК ПереторжкаЗакупокСрезПоследних
	|			ПО УсловияПредложенийПоставщиков.ЗакупочнаяПроцедура = ПереторжкаЗакупокСрезПоследних.ЗакупочнаяПроцедура
	|		ПО ЛотыНоменклатура.Номенклатура = УсловияПредложенийПоставщиков.Номенклатура
	|			И ЛотыНоменклатура.МестоПоставки = УсловияПредложенийПоставщиков.МестоПоставки
	|			И ЛотыНоменклатура.ПериодПотребности = УсловияПредложенийПоставщиков.ПериодПотребности
	|			И ЛотыНоменклатура.Ссылка = УсловияПредложенийПоставщиков.Лот
	|			И (&ЗакупочнаяПроцедура = УсловияПредложенийПоставщиков.ЗакупочнаяПроцедура)
	|ГДЕ
	|	ЛотыНоменклатура.Ссылка = &Лот
	|	И УсловияПредложенийПоставщиков.ПредложениеПоставщика.НомерПереторжки = ЕСТЬNULL(ПереторжкаЗакупокСрезПоследних.НомерПереторжки, 0)";

	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", Объект.ЗакупочнаяПроцедура);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	ВыгрузкаЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат ВыгрузкаЗапроса;
КонецФункции	


&НаСервере
Процедура РаспределениеПоЗонтичнойЗакупкеНаСервере(Лот)
	//
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЗакупкаОбъекта = ДокументОбъект.ЗакупочнаяПроцедура;
	ДокументОбъект.ЗаполнитьПоЛоту(Лот,Ложь);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	// Обновление данных на форме.
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(ЭтаФорма, ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	
	ВыгрузкаЗапроса = ПолучитьТаблицуРаспределения(Лот);
	
	РаспределениеПоПотребностям = ВыгрузкаЗапроса.Скопировать();
	Для Каждого ТекСтрока Из РаспределениеПоПотребностям Цикл
		ПроцентНДС = 
			ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(
				ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			ТекСтрока.Сумма, 
			ТекСтрока.ПредложениеПоставщика.ЦенаВключаетНДС, 
			ПроцентНДС.Ставка);
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЦикла;
	ВыгрузкаЗапроса.Свернуть("Поставщик,ТоварНеПоставляется");
	ТоварНеПоставляется=ВыгрузкаЗапроса.НайтиСтроки(Новый Структура("ТоварНеПоставляется",истина));
	
	ПоляГруппировки = "Номенклатура,Характеристика,Организация,ДоговорСПокупателем,Менеджер,МестоПоставки,Приоритет,Проект,Коэффициент,ЕдиницаИзмерения";
	
	ТаблицаНомеклатурыПоставщиков = РаспределениеПоПотребностям.Скопировать();
	ТаблицаНомеклатурыПоставщиков.Свернуть(ПоляГруппировки + ",ТоварНеПоставляется,МестоПобедителя,ПредложениеПоставщика,ДатаДокумента,Поставщик,СтавкаНДС,ДатаПредложения","Сумма,Количество");
	ТаблицаНомеклатурыПоставщиков.Сортировать(ПоляГруппировки+",Сумма,ДатаДокумента");

	Структура = СтруктураОтбора();
	СтруктураСравнения = СтруктураОтбора();
	Место = 0;
	Для Каждого СтрокаТЧ Из ТаблицаНомеклатурыПоставщиков Цикл
		Если СтрокаТЧ.ТоварНеПоставляется 
			ИЛИ СтрокаТЧ.Сумма = 0
		Тогда Продолжить	
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Структура,СтрокаТЧ);
		Для Каждого Ключ Из Структура Цикл 
			Если Ключ.Значение <> СтруктураСравнения[Ключ.Ключ] Тогда
				Место = 0;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Место = Место + 1;
		ЗаполнитьЗначенияСвойств(СтруктураСравнения,СтрокаТЧ);        
		СтрокаТЧ.МестоПобедителя = Место;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧРаспределения", ТаблицаНомеклатурыПоставщиков);
	Запрос.УстановитьПараметр("РаспределениеПоПотребностям", РаспределениеПоПотребностям);
	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.Текст= "ВЫБРАТЬ
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Номенклатура КАК Номенклатура,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.МестоПобедителя КАК МестоПобедителя,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Коэффициент КАК Коэффициент,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Менеджер КАК Менеджер,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Характеристика КАК Характеристика,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Организация КАК Организация,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Проект КАК Проект,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Приоритет КАК Приоритет,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.МестоПоставки КАК МестоПоставки,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Количество КАК Количество,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Сумма КАК Сумма,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.СуммаНДС КАК СуммаНДС,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Цена КАК Цена,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.ПериодПотребности КАК ПериодПотребности,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Процент КАК Процент
	              |ПОМЕСТИТЬ УсловияЛота
	              |ИЗ
	              |	Справочник.Лоты.УсловияРаспределенияЗонтичнойЗакупки КАК ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки
	              |ГДЕ
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Ссылка = &Лот
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Распределение.Поставщик КАК Поставщик,
	              |	Распределение.СтавкаНДС КАК СтавкаНДС,
	              |	Распределение.Сумма КАК Сумма,
	              |	Распределение.Количество КАК Количество,
	              |	Распределение.ПредложениеПоставщика КАК ПредложениеПоставщика,
	              |	Распределение.ДоговорСПокупателем КАК ДоговорСПокупателем,
	              |	Распределение.Менеджер КАК Менеджер,
	              |	Распределение.Проект КАК Проект,
	              |	Распределение.МестоПоставки КАК МестоПоставки,
	              |	Распределение.Организация КАК Организация,
	              |	Распределение.Характеристика КАК Характеристика,
	              |	Распределение.Номенклатура КАК Номенклатура,
	              |	Распределение.Приоритет КАК Приоритет,
	              |	Распределение.ТоварНеПоставляется КАК ТоварНеПоставляется,
	              |	Распределение.МестоПобедителя КАК МестоПобедителя,
	              |	Распределение.ЕдиницаИзмерения КАК ЕдиницаИзмерения				  
				  |ПОМЕСТИТЬ ТЧРаспределения
	              |ИЗ
	              |	&ТЧРаспределения КАК Распределение
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТЧРаспределения.Поставщик КАК Поставщик,
	              |	ТЧРаспределения.СтавкаНДС КАК СтавкаНДС,
	              |	ТЧРаспределения.Сумма КАК СуммаТЧ,
	              |	ТЧРаспределения.Количество КАК КоличествоТЧ,
	              |	ТЧРаспределения.ПредложениеПоставщика КАК ПредложениеПоставщика,
	              |	ТЧРаспределения.ДоговорСПокупателем КАК ДоговорСПокупателем,
	              |	ТЧРаспределения.Менеджер КАК Менеджер,
	              |	ТЧРаспределения.Проект КАК Проект,
	              |	ТЧРаспределения.МестоПоставки КАК МестоПоставки,
	              |	ТЧРаспределения.Организация КАК Организация,
	              |	ТЧРаспределения.Характеристика КАК Характеристика,
	              |	ТЧРаспределения.Номенклатура КАК Номенклатура,
	              |	ТЧРаспределения.Приоритет КАК Приоритет,
	              |	УсловияЛота.Количество КАК Количество,
	              |	УсловияЛота.Сумма КАК Сумма,
	              |	ТЧРаспределения.ТоварНеПоставляется КАК ТоварНеПоставляется,
	              |	УсловияЛота.МестоПобедителя КАК МестоПобедителя,
	              |	УсловияЛота.ПериодПотребности КАК ПериодПотребности,
	              |	ТЧРаспределения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	              |	УсловияЛота.Коэффициент КАК Коэффициент,
	              |	УсловияЛота.СуммаНДС КАК СуммаНДС,
	              |	УсловияЛота.Процент КАК Процент
	              |ИЗ
	              |	ТЧРаспределения КАК ТЧРаспределения
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияЛота КАК УсловияЛота
	              |		ПО ТЧРаспределения.Номенклатура = УсловияЛота.Номенклатура
	              |			И ТЧРаспределения.Менеджер = УсловияЛота.Менеджер
	              |			И ТЧРаспределения.МестоПоставки = УсловияЛота.МестоПоставки
	              |			И ТЧРаспределения.Организация = УсловияЛота.Организация
	              |			И ТЧРаспределения.Проект = УсловияЛота.Проект
	              |			И ТЧРаспределения.Организация = УсловияЛота.Организация
	              |			И ТЧРаспределения.Характеристика = УсловияЛота.Характеристика
	              |			И ТЧРаспределения.МестоПобедителя = УсловияЛота.МестоПобедителя";
	ТаблицаНомеклатурыПоставщиков = Запрос.Выполнить().Выгрузить();	
	УбратьПобедителейРаспределения();
	СоответствиеПериодов=ПолучитьСоответствиеКолонокПоПериоду();
	
	ТаблицаНоменклатурыЛотов =  Лот.Номенклатура.Выгрузить();
	ТаблицаНоменклатурыЛотов.Свернуть(ПоляГруппировки);
	Для Каждого СтрокаЛотов ИЗ ТаблицаНоменклатурыЛотов Цикл
		СтруктураПоиска = СтруктураОтбора();
		СтруктураПоиска.Удалить("ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаЛотов);    
		СтруктураПоиска.Вставить("МестоПобедителя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "КоличествоПобедителейЗонтичнойЗакупки"));
		ПобедителиНоменклатуры = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска);
		Если  ПобедителиНоменклатуры.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не хватает победителей зонтичной закупки по %Номенклатура%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Номенклатура%", СтрокаЛотов.Номенклатура);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
		Если ТекПредложенияПобедителей.ПредложениеПоставщика.Лот = ТекущийЛот  Тогда
			ТекПредложенияПобедителей.Победитель = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого ТекТаблицаПобедителей Из ТаблицаНомеклатурыПоставщиков Цикл
		Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
			СовпадаютПредложения = (ТекТаблицаПобедителей.ПредложениеПоставщика = ТекПредложенияПобедителей.ПредложениеПоставщика);
			Если СовпадаютПредложения Тогда
				ТекПредложенияПобедителей.Победитель = Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
		
	Для Каждого СтрокаРаспределения из Объект.РаспределениеПоПотребностям Цикл
		СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Ложь;
		СтруктураПоиска = СтруктураОтбора();
		СтруктураПоиска.Вставить("ПредложениеПоставщика");
		ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаРаспределения);           
		СтрокиОтбора = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекТаблицаПобедителей Из СтрокиОтбора Цикл
			Если ТекТаблицаПобедителей.ПериодПотребности = СтрокаРаспределения.ПериодПотребности Тогда
				СтрокаРаспределения.ПобедительПоПозиционномуРаспределению=Истина;
				СтрокаРаспределения.МестоПобедителя = ТекТаблицаПобедителей.МестоПобедителя;
				СтрокаРаспределения.Количество=ТекТаблицаПобедителей.Количество;
				Если ТипЗнч(СтрокаРаспределения.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаРаспределения.Количество = ТекТаблицаПобедителей.Количество;
					СтрокаРаспределения.Сумма = СтрокаРаспределения.Цена * ТекТаблицаПобедителей.Количество;
				Иначе
					СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма * 0.01 * ТекТаблицаПобедителей.Процент;
				КонецЕсли;	
				СтрокаРаспределения.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаРаспределения.СуммаНДС ,СтрокаРаспределения.ПредложениеПоставщика.ЦенаВключаетНДС,ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(СтрокаРаспределения.СтавкаНДС).Ставка);
				СтрокаРаспределения.СуммаСНДС =  ?(СтрокаРаспределения.ПредложениеПоставщика.ЦенаВключаетНДС,СтрокаРаспределения.Сумма+СтрокаРаспределения.СуммаНДС,СтрокаРаспределения.Сумма);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого СтрокаРаспределения ИЗ ПотребностиПоПоставщикам Цикл
		СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Ложь;
		СтруктураПоиска = СтруктураОтбора();
		СтруктураПоиска.Вставить("ПредложениеПоставщика");
		ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаРаспределения);           
		СтрокиОтбора = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекТаблицаПобедителей Из СтрокиОтбора Цикл
				СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Истина;
				ЗаголовокПериода = СоответствиеПериодов.Получить(сокрлп(ТекТаблицаПобедителей.ПериодПотребности));
				Если ТипЗнч(ТекТаблицаПобедителей.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаРаспределения["Количество_"+ЗаголовокПериода] = ТекТаблицаПобедителей.Количество;
					СтрокаРаспределения["Цена_"+ЗаголовокПериода] = СтрокаРаспределения.Цена;
					СтрокаРаспределения["Сумма_"+ЗаголовокПериода] = ТекТаблицаПобедителей.Количество*СтрокаРаспределения.Цена;
				Иначе
					СтрокаРаспределения["Сумма_"+ЗаголовокПериода] = СтрокаРаспределения["Сумма_"+ЗаголовокПериода] * 0.01 * ТекТаблицаПобедителей.Процент;
				КонецЕсли;
				СтрокаРаспределения.МестоПобедителя = ТекТаблицаПобедителей.МестоПобедителя;
				ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьСуммуСтрокиКолонкиОтЦеныИКоличества(
				СтрокаРаспределения,
				ЗаголовокПериода,
				ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.ЦенаВключаетНДС);
				ЦентрализованныеЗакупкиКлиентСерверУХ.ПриИзмененииКоличестваСуммыСтроки(
				ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.ЦенаВключаетНДС,
				ЭтаФорма.ПериодыЗакупок, 
				СтрокаРаспределения);
		КонецЦикла;
	КонецЦикла;					
	
	КоличествоРаспределения = ПотребностиПоПоставщикам.Количество()-1;
	Пока КоличествоРаспределения >= 0 Цикл
		Структура = Новый Структура();
		Структура.Вставить("Победитель",Истина);
		Структура.Вставить("ПредложениеПоставщика",ПотребностиПоПоставщикам[КоличествоРаспределения].ПредложениеПоставщика);
		Если Объект.ПредложенияПобедителей.НайтиСтроки(Структура).Количество() > 0 
			И ПотребностиПоПоставщикам[КоличествоРаспределения].ПобедительПоПозиционномуРаспределению = Ложь Тогда
			 ПотребностиПоПоставщикам.Удалить(КоличествоРаспределения);
		КонецЕсли;	
		 КоличествоРаспределения = КоличествоРаспределения - 1;
	 КонецЦикла;
	КоличествоРаспределения = Объект.РаспределениеПоПотребностям.Количество()-1;
	Пока КоличествоРаспределения >= 0 Цикл
		Структура = Новый Структура();
		Структура.Вставить("Победитель",Истина);
		Структура.Вставить("ПредложениеПоставщика",Объект.РаспределениеПоПотребностям[КоличествоРаспределения].ПредложениеПоставщика);
		Если Объект.ПредложенияПобедителей.НайтиСтроки(Структура).Количество() > 0 
			И Объект.РаспределениеПоПотребностям[КоличествоРаспределения].ПобедительПоПозиционномуРаспределению = Ложь Тогда
			 Объект.РаспределениеПоПотребностям.Удалить(КоличествоРаспределения);
		КонецЕсли;	
		КоличествоРаспределения = КоличествоРаспределения - 1;
	 КонецЦикла;

 КонецПроцедуры

&НаСервере
Процедура ОбнулитьСуммуИКоличество(СтрокаРаспределения,СоответствиеПериодов)
	Периоды = ЭтаФорма["периодыЗакупок"].Выгрузить();
	Для Каждого ТекТаблицаПобедителей Из Периоды Цикл
		ЗаголовокПериода = СоответствиеПериодов.Получить(СокрЛП(ТекТаблицаПобедителей.Период));
		СтрокаРаспределения["Количество_"+ЗаголовокПериода] = 0;
		СтрокаРаспределения["Сумма_"+ЗаголовокПериода] = 0;
		СтрокаРаспределения["Цена_"+ЗаголовокПериода] = 0;
	КонецЦикла;		
КонецПроцедуры	

&НаКлиенте
Процедура РаспределениеПоЗонтичнойЗакупке(Команда)
	ТекДанные = Элементы.ЛотыЗакупки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	Иначе
		РаспределениеПоЗонтичнойЗакупкеНаСервере(ТекДанные.Лот);
		ЗаполнитьНастройкуЗонтичнойЗакупки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеЗонтичнойЗакупкиПоКритериямНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Лот = ТекущийЛот;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьПоЛоту(Лот, Ложь);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(ЭтаФорма, ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
		
		РазрешенныеПредложения = ПолучитьСписокРазрешенныхПредложений();
		Если РазрешенныеПредложения<>Неопределено И РазрешенныеПредложения.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбраны предложения по критериям'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецЕсли;	                                             
		ТЧПобедителей = Документы.ПротоколВыбораПобедителей.ПолучитьТаблицуПобедителейЗонтичнойЗакупкеКритериальнойОценки(Лот);
		Если ТЧПобедителей.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Отсутсвуют победители по лоту'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;	
		КонецЕсли;
		
		ВыгрузкаЗапроса = ПолучитьТаблицуРаспределения(Лот);
		
		РаспределениеПоПотребностям = ВыгрузкаЗапроса.Скопировать();
		Для Каждого ТекСтрока Из РаспределениеПоПотребностям Цикл
			ПроцентНДС = 
			ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(
			ТекСтрока.СтавкаНДС);
			ТекСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			ТекСтрока.Сумма, 
			ТекСтрока.ПредложениеПоставщика.ЦенаВключаетНДС, 
			ПроцентНДС.Ставка);
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		КонецЦикла;
		ВыгрузкаЗапроса.Свернуть("Поставщик,ТоварНеПоставляется");
		ТоварНеПоставляется=ВыгрузкаЗапроса.НайтиСтроки(Новый Структура("ТоварНеПоставляется",истина));
		
		ПоляГруппировки = "Номенклатура,Характеристика,Организация,ДоговорСПокупателем,Менеджер,МестоПоставки,Приоритет,Проект,Коэффициент,ЕдиницаИзмерения";
		
		ТаблицаНомеклатурыПоставщиков = РаспределениеПоПотребностям.Скопировать();
		ТаблицаНомеклатурыПоставщиков.Свернуть(ПоляГруппировки + ",ТоварНеПоставляется,МестоПобедителя,ПредложениеПоставщика,Поставщик,СтавкаНДС,ДатаПредложения,Цена","Сумма,Количество,СуммаНДС,СуммаСНДС");
		ТаблицаНомеклатурыПоставщиков.Сортировать(ПоляГруппировки);
		
		МестоПобедителя = 1;
		Соответствие = Новый Соответствие();
		Для Каждого СтрТЧ ИЗ ТЧПобедителей Цикл
			Соответствие.Вставить(СтрТЧ.ОбъектВыбора, МестоПобедителя);
			МестоПобедителя = МестоПобедителя + 1;
		КонецЦикла;	
		
		КоличествоПобедителей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "КоличествоПобедителейЗонтичнойЗакупки");
		НоменклатураЛота = РаспределениеПоПотребностям.Скопировать();
		НоменклатураЛота.Свернуть(ПоляГруппировки);
		//
		Для Каждого СтрТЧ ИЗ ТаблицаНомеклатурыПоставщиков Цикл
			Если СтрТЧ.ТоварНеПоставляется 
				ИЛИ СтрТЧ.Сумма = 0
				Тогда Продолжить;
			КонецЕсли;	
			Место =	1;
			СтруктураПоиска = СтруктураОтбора();
			СтруктураПоиска.Вставить("ПредложениеПоставщика");
			СтруктураПоиска.Вставить("ТоварНеПоставляется",Истина);
			ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрТЧ);           
			
			Для Каждого ПредложениеПоставщика ИЗ ТЧПобедителей Цикл
				Если ПредложениеПоставщика.ОбъектВыбора = СтрТЧ.ПредложениеПоставщика Тогда
					СтрТЧ.МестоПобедителя = Место;
					Прервать;
				ИначеЕсли Место <= КоличествоПобедителей Тогда 
					СтруктураПоиска.ПредложениеПоставщика = ПредложениеПоставщика.ОбъектВыбора;
					Если ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска).Количество() <> 0 Тогда
						Место = Место+1;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЧРаспределения", ТаблицаНомеклатурыПоставщиков);
		Запрос.УстановитьПараметр("РаспределениеПоПотребностям", РаспределениеПоПотребностям);
		Запрос.УстановитьПараметр("ПредложенияПобедителей", Объект.ПредложенияПобедителей.Выгрузить());
		
		Запрос.УстановитьПараметр("Лот", Лот);
		Запрос.Текст= "ВЫБРАТЬ
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Номенклатура КАК Номенклатура,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.МестоПобедителя КАК МестоПобедителя,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Коэффициент КАК Коэффициент,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Менеджер КАК Менеджер,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Характеристика КАК Характеристика,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Организация КАК Организация,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Проект КАК Проект,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Приоритет КАК Приоритет,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.МестоПоставки КАК МестоПоставки,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Количество КАК Количество,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Сумма КАК Сумма,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.СуммаНДС КАК СуммаНДС,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Цена КАК Цена,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.ПериодПотребности КАК ПериодПотребности,
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Процент КАК Процент					  
		|ПОМЕСТИТЬ УсловияЛота
		|ИЗ
		|	Справочник.Лоты.УсловияРаспределенияЗонтичнойЗакупки КАК ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки
		|ГДЕ
		|	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Ссылка = &Лот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредложенияПобедителей.ПредложениеПоставщика КАК ПредложениеПоставщика
		|ПОМЕСТИТЬ ПредложенияПобедителей
		|ИЗ
		|	&ПредложенияПобедителей КАК ПредложенияПобедителей
		|ГДЕ
		|	ПредложенияПобедителей.Победитель = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.Поставщик КАК Поставщик,
		|	Распределение.СтавкаНДС КАК СтавкаНДС,
		|	Распределение.Сумма КАК Сумма,
		|	Распределение.Количество КАК Количество,
		|	Распределение.ПредложениеПоставщика КАК ПредложениеПоставщика,
		|	Распределение.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	Распределение.Менеджер КАК Менеджер,
		|	Распределение.Проект КАК Проект,
		|	Распределение.МестоПоставки КАК МестоПоставки,
		|	Распределение.Организация КАК Организация,
		|	Распределение.Характеристика КАК Характеристика,
		|	Распределение.Номенклатура КАК Номенклатура,
		|	Распределение.Приоритет КАК Приоритет,
		|	Распределение.ТоварНеПоставляется КАК ТоварНеПоставляется,
		|	Распределение.МестоПобедителя КАК МестоПобедителя,
		|	Распределение.Цена КАК Цена
		|ПОМЕСТИТЬ ТЧРаспределения
		|ИЗ
		|	&ТЧРаспределения КАК Распределение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧРаспределения.Поставщик КАК Поставщик,
		|	ТЧРаспределения.СтавкаНДС КАК СтавкаНДС,
		|	ТЧРаспределения.Сумма КАК СуммаТЧ,
		|	ТЧРаспределения.Количество КАК КоличествоТЧ,
		|	ТЧРаспределения.ПредложениеПоставщика КАК ПредложениеПоставщика,
		|	ТЧРаспределения.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧРаспределения.Менеджер КАК Менеджер,
		|	ТЧРаспределения.Проект КАК Проект,
		|	ТЧРаспределения.МестоПоставки КАК МестоПоставки,
		|	ТЧРаспределения.Организация КАК Организация,
		|	ТЧРаспределения.Характеристика КАК Характеристика,
		|	ТЧРаспределения.Номенклатура КАК Номенклатура,
		|	ТЧРаспределения.Приоритет КАК Приоритет,
		|	УсловияЛота.Количество КАК Количество,
		|	УсловияЛота.Сумма КАК Сумма,
		|	ТЧРаспределения.ТоварНеПоставляется КАК ТоварНеПоставляется,
		|	УсловияЛота.МестоПобедителя КАК МестоПобедителя,
		|	УсловияЛота.ПериодПотребности КАК ПериодПотребности,
		|	УсловияЛота.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УсловияЛота.Коэффициент КАК Коэффициент,
		|	ТЧРаспределения.Цена КАК Цена,
		|	УсловияЛота.СуммаНДС КАК СуммаНДС,
		|	УсловияЛота.Процент КАК Процент
		|ИЗ
		|	ТЧРаспределения КАК ТЧРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияЛота КАК УсловияЛота
		|		ПО ТЧРаспределения.Номенклатура = УсловияЛота.Номенклатура
		|			И ТЧРаспределения.Менеджер = УсловияЛота.Менеджер
		|			И ТЧРаспределения.МестоПоставки = УсловияЛота.МестоПоставки
		|			И ТЧРаспределения.Организация = УсловияЛота.Организация
		|			И ТЧРаспределения.Проект = УсловияЛота.Проект
		|			И ТЧРаспределения.Организация = УсловияЛота.Организация
		|			И ТЧРаспределения.Характеристика = УсловияЛота.Характеристика
		|			И ТЧРаспределения.МестоПобедителя = УсловияЛота.МестоПобедителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредложенияПобедителей КАК ПредложенияПобедителей
		|		ПО (ПредложенияПобедителей.ПредложениеПоставщика = ТЧРаспределения.ПредложениеПоставщика)";
		ТаблицаНомеклатурыПоставщиков = Запрос.Выполнить().Выгрузить();	
		УбратьПобедителейРаспределения();
		СоответствиеПериодов=ПолучитьСоответствиеКолонокПоПериоду();
		
		ТаблицаНоменклатурыЛотов =  Лот.Номенклатура.Выгрузить();
		ТаблицаНоменклатурыЛотов.Свернуть(ПоляГруппировки);
		Для Каждого СтрокаЛотов ИЗ ТаблицаНоменклатурыЛотов Цикл
			СтруктураПоиска = СтруктураОтбора();
			ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаЛотов);    
			СтруктураПоиска.Вставить("МестоПобедителя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "КоличествоПобедителейЗонтичнойЗакупки"));
			ПобедителиНоменклатуры = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска);
			Если  ПобедителиНоменклатуры.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не хватает победителей зонтичной закупки по %Номенклатура%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Номенклатура%", СтрокаЛотов.Номенклатура);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого ТекПредложенияПобедителей Из Объект.ПредложенияПобедителей Цикл
			Если Лот <> ТекПредложенияПобедителей.Лот Тогда Продолжить; КонецЕсли;
			Строки = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(Новый Структура("ПредложениеПоставщика",ТекПредложенияПобедителей.ПредложениеПоставщика));
			Если Строки.Количество() > 0 Тогда
				ТекПредложенияПобедителей.Победитель = Истина;
			Иначе 
				ТекПредложенияПобедителей.Победитель = Ложь;
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого СтрокаРаспределения из Объект.РаспределениеПоПотребностям Цикл
			СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Ложь;
			СтруктураПоиска = СтруктураОтбора();
			СтруктураПоиска.Вставить("ПредложениеПоставщика");
			ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаРаспределения);           
			СтрокиОтбора = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекТаблицаПобедителей Из СтрокиОтбора Цикл
				Если ТекТаблицаПобедителей.ПериодПотребности = СтрокаРаспределения.ПериодПотребности Тогда
					СтрокаРаспределения.ПобедительПоПозиционномуРаспределению=Истина;
					СтрокаРаспределения.Количество=ТекТаблицаПобедителей.Количество;
					СтрокаРаспределения.МестоПобедителя = ТекТаблицаПобедителей.МестоПобедителя; 
					Если ТипЗнч(СтрокаРаспределения.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
						СтрокаРаспределения.Количество = ТекТаблицаПобедителей.Количество;
						СтрокаРаспределения.Сумма = СтрокаРаспределения.Цена * ТекТаблицаПобедителей.Количество;
					Иначе
						СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма * 0.01 * ТекТаблицаПобедителей.Процент;
					КонецЕсли;	
					СтрокаРаспределения.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаРаспределения.СуммаНДС ,СтрокаРаспределения.ПредложениеПоставщика.ЦенаВключаетНДС,ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(СтрокаРаспределения.СтавкаНДС).Ставка);
					СтрокаРаспределения.СуммаСНДС =  ?(СтрокаРаспределения.ПредложениеПоставщика.ЦенаВключаетНДС,СтрокаРаспределения.Сумма+СтрокаРаспределения.СуммаНДС,СтрокаРаспределения.Сумма);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;		
		Для Каждого СтрокаРаспределения ИЗ ПотребностиПоПоставщикам Цикл
			СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Ложь;
			СтруктураПоиска = СтруктураОтбора();
			ЗаполнитьЗначенияСвойствСтруктуры(СтруктураПоиска,СтрокаРаспределения);           
			СтруктураПоиска.Вставить("ПредложениеПоставщика",СтрокаРаспределения.ПредложениеПоставщика);
			СтрокиОтбора = ТаблицаНомеклатурыПоставщиков.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекТаблицаПобедителей Из СтрокиОтбора Цикл
				СтрокаРаспределения.ПобедительПоПозиционномуРаспределению = Истина;
				СтрокаРаспределения.МестоПобедителя = ТекТаблицаПобедителей.МестоПобедителя;
				ЗаголовокПериода = СоответствиеПериодов.Получить(сокрлп(ТекТаблицаПобедителей.ПериодПотребности));
				Если ТипЗнч(ТекТаблицаПобедителей.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаРаспределения["Количество_"+ЗаголовокПериода] = ТекТаблицаПобедителей.Количество;
					СтрокаРаспределения["Цена_"+ЗаголовокПериода] = СтрокаРаспределения.Цена;
					СтрокаРаспределения["Сумма_"+ЗаголовокПериода] = ТекТаблицаПобедителей.Количество*СтрокаРаспределения.Цена;
				Иначе
					СтрокаРаспределения["Сумма_"+ЗаголовокПериода] = СтрокаРаспределения["Сумма_"+ЗаголовокПериода] * 0.01 * ТекТаблицаПобедителей.Процент;
				КонецЕсли;	
				ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьСуммуСтрокиКолонкиОтЦеныИКоличества(
				СтрокаРаспределения,
				ЗаголовокПериода,
				ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.ЦенаВключаетНДС);
				ЦентрализованныеЗакупкиКлиентСерверУХ.ПриИзмененииКоличестваСуммыСтроки(
				ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.ЦенаВключаетНДС,
				ЭтаФорма.ПериодыЗакупок, 
				СтрокаРаспределения);
			КонецЦикла;
		КонецЦикла;					
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать документ перед оценкой. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	КоличествоРаспределения = ПотребностиПоПоставщикам.Количество()-1;
	Пока КоличествоРаспределения >= 0 Цикл
		Структура = Новый Структура();
		Структура.Вставить("Победитель",Истина);
		Структура.Вставить("ПредложениеПоставщика",ПотребностиПоПоставщикам[КоличествоРаспределения].ПредложениеПоставщика);
		Если Объект.ПредложенияПобедителей.НайтиСтроки(Структура).Количество() > 0 
			И ПотребностиПоПоставщикам[КоличествоРаспределения].ПобедительПоПозиционномуРаспределению = Ложь Тогда
			ПотребностиПоПоставщикам.Удалить(КоличествоРаспределения);
		КонецЕсли;	
		КоличествоРаспределения = КоличествоРаспределения - 1;
	КонецЦикла;		
	КоличествоРаспределения = Объект.РаспределениеПоПотребностям.Количество()-1;
	Пока КоличествоРаспределения >= 0 Цикл
		Структура = Новый Структура();
		Структура.Вставить("Победитель",Истина);
		Структура.Вставить("ПредложениеПоставщика",Объект.РаспределениеПоПотребностям[КоличествоРаспределения].ПредложениеПоставщика);
		Если Объект.ПредложенияПобедителей.НайтиСтроки(Структура).Количество() > 0 
			И Объект.РаспределениеПоПотребностям[КоличествоРаспределения].ПобедительПоПозиционномуРаспределению = Ложь Тогда
			Объект.РаспределениеПоПотребностям.Удалить(КоличествоРаспределения);
		КонецЕсли;	
		КоличествоРаспределения = КоличествоРаспределения - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкуЗонтичнойЗакупки()
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Лоты", ЛотыЗакупки.Выгрузить());
	Запрос.УстановитьПараметр("РаспределениеПоПотребностям",ПотребностиПоПоставщикам.Выгрузить());
	Запрос.УстановитьПараметр("ПредложенияПоставщиков",Объект.ПредложенияПобедителей.Выгрузить());	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛотыЗакупки.Лот КАК Лот,
	               |	ЛотыЗакупки.ВидЗакупки КАК ВидЗакупки
	               |ПОМЕСТИТЬ ЛотыЗакупки
	               |ИЗ
	               |	&Лоты КАК ЛотыЗакупки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредложенияПоставщиков.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ПредложенияПоставщиков.Победитель КАК Победитель
	               |ПОМЕСТИТЬ ПредложенияПоставщиков
	               |ИЗ
	               |	&ПредложенияПоставщиков КАК ПредложенияПоставщиков
	               |ГДЕ
	               |	ПредложенияПоставщиков.Победитель = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаспределениеПоПотребностям.Номенклатура КАК Номенклатура,
	               |	РаспределениеПоПотребностям.Характеристика КАК Характеристика,
	               |	РаспределениеПоПотребностям.Организация КАК Организация,
	               |	РаспределениеПоПотребностям.Проект КАК Проект,
	               |	РаспределениеПоПотребностям.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	РаспределениеПоПотребностям.Коэффициент КАК Коэффициент,
	               |	РаспределениеПоПотребностям.Менеджер КАК Менеджер,
	               |	РаспределениеПоПотребностям.Приоритет КАК Приоритет,
	               |	РаспределениеПоПотребностям.СтавкаНДС КАК СтавкаНДС,
	               |	РаспределениеПоПотребностям.Лот КАК Лот,
	               |	РаспределениеПоПотребностям.МестоПоставки КАК МестоПоставки,
	               |	РаспределениеПоПотребностям.Сумма КАК Сумма,
	               |	РаспределениеПоПотребностям.ПредложениеПоставщика КАК ПредложениеПоставщика
	               |ПОМЕСТИТЬ ТЧРаспределениеПоПотребностям
	               |ИЗ
	               |	&РаспределениеПоПотребностям КАК РаспределениеПоПотребностям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧРаспределениеПоПотребностям.Номенклатура КАК Номенклатура,
	               |	ТЧРаспределениеПоПотребностям.Характеристика КАК Характеристика,
	               |	ТЧРаспределениеПоПотребностям.Организация КАК Организация,
	               |	ТЧРаспределениеПоПотребностям.Проект КАК Проект,
	               |	ТЧРаспределениеПоПотребностям.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТЧРаспределениеПоПотребностям.Коэффициент КАК Коэффициент,
	               |	ТЧРаспределениеПоПотребностям.Менеджер КАК Менеджер,
	               |	ТЧРаспределениеПоПотребностям.Приоритет КАК Приоритет,
	               |	ТЧРаспределениеПоПотребностям.СтавкаНДС КАК СтавкаНДС,
	               |	ТЧРаспределениеПоПотребностям.Лот КАК Лот,
	               |	ТЧРаспределениеПоПотребностям.МестоПоставки КАК МестоПоставки,
	               |	СУММА(ТЧРаспределениеПоПотребностям.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ РаспределениеПоПотребностям
	               |ИЗ
	               |	ТЧРаспределениеПоПотребностям КАК ТЧРаспределениеПоПотребностям
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредложенияПоставщиков КАК ПредложенияПоставщиков
	               |		ПО ТЧРаспределениеПоПотребностям.ПредложениеПоставщика = ПредложенияПоставщиков.ПредложениеПоставщика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧРаспределениеПоПотребностям.Характеристика,
	               |	ТЧРаспределениеПоПотребностям.МестоПоставки,
	               |	ТЧРаспределениеПоПотребностям.Организация,
	               |	ТЧРаспределениеПоПотребностям.Лот,
	               |	ТЧРаспределениеПоПотребностям.Коэффициент,
	               |	ТЧРаспределениеПоПотребностям.ЕдиницаИзмерения,
	               |	ТЧРаспределениеПоПотребностям.Проект,
	               |	ТЧРаспределениеПоПотребностям.Менеджер,
	               |	ТЧРаспределениеПоПотребностям.Номенклатура,
	               |	ТЧРаспределениеПоПотребностям.Приоритет,
	               |	ТЧРаспределениеПоПотребностям.СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЛотыНоменклатура.Номенклатура КАК Номенклатура,
	               |	ЛотыНоменклатура.Характеристика КАК Характеристика,
	               |	ЛотыНоменклатура.Организация КАК Организация,
	               |	ЛотыНоменклатура.Проект КАК Проект,
	               |	ЛотыНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЛотыНоменклатура.Коэффициент КАК Коэффициент,
	               |	ЛотыНоменклатура.Менеджер КАК Менеджер,
	               |	ЛотыНоменклатура.Приоритет КАК Приоритет,
	               |	ЛотыНоменклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ЛотыНоменклатура.Ссылка КАК Лот,
	               |	ЛотыНоменклатура.МестоПоставки КАК МестоПоставки,
	               |	СУММА(ЛотыНоменклатура.Сумма) КАК НМЦ,
	               |	СУММА(ЛотыНоменклатура.Сумма) - ЕСТЬNULL(РаспределениеПоПотребностям.Сумма, СУММА(ЛотыНоменклатура.Сумма)) КАК Экономия,
	               |	РаспределениеПоПотребностям.Сумма КАК СуммаПоПобедителям
	               |ИЗ
	               |	Справочник.Лоты.Номенклатура КАК ЛотыНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛотыЗакупки КАК ЛотыЗакупки
	               |		ПО ЛотыНоменклатура.Ссылка = ЛотыЗакупки.Лот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеПоПотребностям КАК РаспределениеПоПотребностям
	               |		ПО ЛотыНоменклатура.Номенклатура = РаспределениеПоПотребностям.Номенклатура
	               |			И ЛотыНоменклатура.Характеристика = РаспределениеПоПотребностям.Характеристика
	               |			И ЛотыНоменклатура.Менеджер = РаспределениеПоПотребностям.Менеджер
	               |			И ЛотыНоменклатура.Организация = РаспределениеПоПотребностям.Организация
	               |			И ЛотыНоменклатура.Коэффициент = РаспределениеПоПотребностям.Коэффициент
	               |			И ЛотыНоменклатура.Менеджер = РаспределениеПоПотребностям.Менеджер
	               |			И ЛотыНоменклатура.МестоПоставки = РаспределениеПоПотребностям.МестоПоставки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛотыНоменклатура.Характеристика,
	               |	ЛотыНоменклатура.Номенклатура,
	               |	ЛотыНоменклатура.Организация,
	               |	ЛотыНоменклатура.ЕдиницаИзмерения,
	               |	ЛотыНоменклатура.Коэффициент,
	               |	ЛотыНоменклатура.Менеджер,
	               |	ЛотыНоменклатура.Приоритет,
	               |	ЛотыНоменклатура.СтавкаНДС,
	               |	ЛотыНоменклатура.Проект,
	               |	ЛотыНоменклатура.Ссылка,
	               |	ЛотыНоменклатура.МестоПоставки,
	               |	РаспределениеПоПотребностям.Сумма";
	НоменклатураПоЗонтичнойЗакупке.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры	

&НаКлиенте
Процедура РаспределениеЗонтичнойЗакупкиПоКритериям(Команда)
	Если ТекущийЛот = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РаспределениеЗонтичнойЗакупкиПоКритериямНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатураПоЗонтичнойЗакупкеВыборНаСервере(ТекДанные)
	Элементы.ПредложенияПобедителейОценка.Видимость = ТекущийМетодОценкиПоставщиков 
	= ПредопределенноеЗначение("Перечисление.МетодыОценкиПредложенийПоставщиков.ПоКритериям");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПотребностиПоПоставщикам.Номенклатура КАК Номенклатура,
	               |	ПотребностиПоПоставщикам.Характеристика КАК Характеристика,
	               |	ПотребностиПоПоставщикам.Организация КАК Организация,
	               |	ПотребностиПоПоставщикам.Проект КАК Проект,
	               |	ПотребностиПоПоставщикам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПотребностиПоПоставщикам.Коэффициент КАК Коэффициент,
	               |	ПотребностиПоПоставщикам.Менеджер КАК Менеджер,
	               |	ПотребностиПоПоставщикам.МестоПоставки КАК МестоПоставки,
	               |	ПотребностиПоПоставщикам.Приоритет КАК Приоритет,
	               |	ПотребностиПоПоставщикам.СтавкаНДС КАК СтавкаНДС,
	               |	ПотребностиПоПоставщикам.Лот КАК Лот,
	               |	ПотребностиПоПоставщикам.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ПотребностиПоПоставщикам.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
	               |	ПотребностиПоПоставщикам.МестоПобедителя КАК МестоПобедителя,
	               |	ПотребностиПоПоставщикам.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ТЧПотребностиПоПоставщикамНачальная
	               |ИЗ
	               |	&ПотребностиПоПоставщикам КАК ПотребностиПоПоставщикам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредложенияПобедителей.Победитель КАК Победитель,
	               |	ПредложенияПобедителей.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ПредложенияПобедителей.Лот КАК Лот
	               |ПОМЕСТИТЬ ПредложенияПобедителей
	               |ИЗ
	               |	&ПредложенияПобедителей КАК ПредложенияПобедителей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПотребностиПоПоставщикам.Номенклатура КАК Номенклатура,
	               |	ПотребностиПоПоставщикам.Характеристика КАК Характеристика,
	               |	ПотребностиПоПоставщикам.Организация КАК Организация,
	               |	ПотребностиПоПоставщикам.Проект КАК Проект,
	               |	ПотребностиПоПоставщикам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПотребностиПоПоставщикам.Коэффициент КАК Коэффициент,
	               |	ПотребностиПоПоставщикам.Менеджер КАК Менеджер,
	               |	ПотребностиПоПоставщикам.МестоПоставки КАК МестоПоставки,
	               |	ПотребностиПоПоставщикам.Приоритет КАК Приоритет,
	               |	ПотребностиПоПоставщикам.СтавкаНДС КАК СтавкаНДС,
	               |	ПотребностиПоПоставщикам.Лот КАК Лот,
	               |	ПотребностиПоПоставщикам.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ПотребностиПоПоставщикам.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
	               |	ПотребностиПоПоставщикам.МестоПобедителя КАК МестоПобедителя,
	               |	ПотребностиПоПоставщикам.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ПотребностиПоПоставщикамВсе
	               |ИЗ
	               |	&ПотребностиПоПоставщикамВсе КАК ПотребностиПоПоставщикам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПотребностиПоПоставщикамВсе.Номенклатура КАК Номенклатура,
	               |	ПотребностиПоПоставщикамВсе.Характеристика КАК Характеристика,
	               |	ПотребностиПоПоставщикамВсе.Организация КАК Организация,
	               |	ПотребностиПоПоставщикамВсе.Проект КАК Проект,
	               |	ПотребностиПоПоставщикамВсе.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПотребностиПоПоставщикамВсе.Коэффициент КАК Коэффициент,
	               |	ПотребностиПоПоставщикамВсе.Менеджер КАК Менеджер,
	               |	ПотребностиПоПоставщикамВсе.МестоПоставки КАК МестоПоставки,
	               |	ПотребностиПоПоставщикамВсе.Приоритет КАК Приоритет,
	               |	ПотребностиПоПоставщикамВсе.СтавкаНДС КАК СтавкаНДС,
	               |	ПотребностиПоПоставщикамВсе.Лот КАК Лот,
	               |	ПотребностиПоПоставщикамВсе.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ПотребностиПоПоставщикамВсе.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
	               |	ПотребностиПоПоставщикамВсе.МестоПобедителя КАК МестоПобедителя,
	               |	СУММА(ПотребностиПоПоставщикамВсе.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ПотребностиПоПоставщикамНачальная
	               |ИЗ
	               |	ПотребностиПоПоставщикамВсе КАК ПотребностиПоПоставщикамВсе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЧПотребностиПоПоставщикамНачальная КАК ТЧПотребностиПоПоставщикамНачальная
	               |		ПО ПотребностиПоПоставщикамВсе.ПредложениеПоставщика = ТЧПотребностиПоПоставщикамНачальная.ПредложениеПоставщика
	               |			И ПотребностиПоПоставщикамВсе.Лот = ТЧПотребностиПоПоставщикамНачальная.Лот
	               |			И ПотребностиПоПоставщикамВсе.Характеристика = ТЧПотребностиПоПоставщикамНачальная.Характеристика
	               |			И ПотребностиПоПоставщикамВсе.Организация = ТЧПотребностиПоПоставщикамНачальная.Организация
	               |			И ПотребностиПоПоставщикамВсе.Коэффициент = ТЧПотребностиПоПоставщикамНачальная.Коэффициент
	               |			И ПотребностиПоПоставщикамВсе.Менеджер = ТЧПотребностиПоПоставщикамНачальная.Менеджер
	               |			И ПотребностиПоПоставщикамВсе.МестоПоставки = ТЧПотребностиПоПоставщикамНачальная.МестоПоставки
	               |			И ПотребностиПоПоставщикамВсе.Приоритет = ТЧПотребностиПоПоставщикамНачальная.Приоритет
	               |			И ПотребностиПоПоставщикамВсе.Проект = ТЧПотребностиПоПоставщикамНачальная.Проект
				   |ГДЕ
	               |	ТЧПотребностиПоПоставщикамНачальная.Номенклатура ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПотребностиПоПоставщикамВсе.МестоПобедителя,
	               |	ПотребностиПоПоставщикамВсе.Лот,
	               |	ПотребностиПоПоставщикамВсе.ПобедительПоПозиционномуРаспределению,
	               |	ПотребностиПоПоставщикамВсе.СтавкаНДС,
	               |	ПотребностиПоПоставщикамВсе.ЕдиницаИзмерения,
	               |	ПотребностиПоПоставщикамВсе.МестоПоставки,
	               |	ПотребностиПоПоставщикамВсе.Проект,
	               |	ПотребностиПоПоставщикамВсе.Приоритет,
	               |	ПотребностиПоПоставщикамВсе.Организация,
	               |	ПотребностиПоПоставщикамВсе.ПредложениеПоставщика,
	               |	ПотребностиПоПоставщикамВсе.Коэффициент,
	               |	ПотребностиПоПоставщикамВсе.Менеджер,
	               |	ПотребностиПоПоставщикамВсе.Номенклатура,
	               |	ПотребностиПоПоставщикамВсе.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧПотребностиПоПоставщикамНачальная.Номенклатура КАК Номенклатура,
	               |	ТЧПотребностиПоПоставщикамНачальная.Характеристика КАК Характеристика,
	               |	ТЧПотребностиПоПоставщикамНачальная.Организация КАК Организация,
	               |	ТЧПотребностиПоПоставщикамНачальная.Проект КАК Проект,
	               |	ТЧПотребностиПоПоставщикамНачальная.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТЧПотребностиПоПоставщикамНачальная.Коэффициент КАК Коэффициент,
	               |	ТЧПотребностиПоПоставщикамНачальная.Менеджер КАК Менеджер,
	               |	ТЧПотребностиПоПоставщикамНачальная.МестоПоставки КАК МестоПоставки,
	               |	ТЧПотребностиПоПоставщикамНачальная.Приоритет КАК Приоритет,
	               |	ТЧПотребностиПоПоставщикамНачальная.СтавкаНДС КАК СтавкаНДС,
	               |	ТЧПотребностиПоПоставщикамНачальная.Лот КАК Лот,
	               |	ТЧПотребностиПоПоставщикамНачальная.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ТЧПотребностиПоПоставщикамНачальная.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
	               |	ТЧПотребностиПоПоставщикамНачальная.МестоПобедителя КАК МестоПобедителя,
	               |	ТЧПотребностиПоПоставщикамНачальная.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ТЧПотребностиПоПоставщикам
	               |ИЗ
	               |	ТЧПотребностиПоПоставщикамНачальная КАК ТЧПотребностиПоПоставщикамНачальная
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПотребностиПоПоставщикамНачальная.Номенклатура,
	               |	ПотребностиПоПоставщикамНачальная.Характеристика,
	               |	ПотребностиПоПоставщикамНачальная.Организация,
	               |	ПотребностиПоПоставщикамНачальная.Проект,
	               |	ПотребностиПоПоставщикамНачальная.ЕдиницаИзмерения,
	               |	ПотребностиПоПоставщикамНачальная.Коэффициент,
	               |	ПотребностиПоПоставщикамНачальная.Менеджер,
	               |	ПотребностиПоПоставщикамНачальная.МестоПоставки,
	               |	ПотребностиПоПоставщикамНачальная.Приоритет,
	               |	ПотребностиПоПоставщикамНачальная.СтавкаНДС,
	               |	ПотребностиПоПоставщикамНачальная.Лот,
	               |	ПотребностиПоПоставщикамНачальная.ПредложениеПоставщика,
	               |	ПотребностиПоПоставщикамНачальная.ПобедительПоПозиционномуРаспределению,
	               |	ПотребностиПоПоставщикамНачальная.МестоПобедителя,
	               |	ПотребностиПоПоставщикамНачальная.Сумма
	               |ИЗ
	               |	ПотребностиПоПоставщикамНачальная КАК ПотребностиПоПоставщикамНачальная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОценкиПоКритериям.ОбъектВыбора КАК ПредложениеПоставщика,
	               |	ОценкиПоКритериям.Оценка КАК Оценка
	               |ПОМЕСТИТЬ ОценкиПоКритериям
	               |ИЗ
	               |	&ОценкиПоКритериям КАК ОценкиПоКритериям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧПотребностиПоПоставщикам.ПредложениеПоставщика КАК ПредложениеПоставщика,
	               |	ТЧПотребностиПоПоставщикам.МестоПобедителя КАК МестоПобедителя,
	               |	ОценкиПоКритериям.Оценка КАК Оценка,
	               |	ТЧПотребностиПоПоставщикам.Сумма КАК Сумма,
	               |	ТЧПотребностиПоПоставщикам.ПобедительПоПозиционномуРаспределению КАК ПобедительПоПозиционномуРаспределению,
	               |	ПредложенияПобедителей.Победитель КАК Победитель
	               |ИЗ
	               |	ТЧПотребностиПоПоставщикам КАК ТЧПотребностиПоПоставщикам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОценкиПоКритериям КАК ОценкиПоКритериям
	               |		ПО ТЧПотребностиПоПоставщикам.ПредложениеПоставщика = ОценкиПоКритериям.ПредложениеПоставщика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПредложенияПобедителей КАК ПредложенияПобедителей
	               |		ПО ТЧПотребностиПоПоставщикам.ПредложениеПоставщика = ПредложенияПобедителей.ПредложениеПоставщика
	               |		И ТЧПотребностиПоПоставщикам.Лот = ПредложенияПобедителей.Лот
				   |ГДЕ
	               |	ТЧПотребностиПоПоставщикам.Коэффициент = &Коэффициент
	               |	И ТЧПотребностиПоПоставщикам.Характеристика = &Характеристика
	               |	И ТЧПотребностиПоПоставщикам.МестоПоставки = &МестоПоставки
	               |	И ТЧПотребностиПоПоставщикам.Номенклатура = &Номенклатура
	               |    И ТЧПотребностиПоПоставщикам.Лот = &Лот
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧПотребностиПоПоставщикам.ПредложениеПоставщика,
	               |	ТЧПотребностиПоПоставщикам.МестоПобедителя,
	               |	ОценкиПоКритериям.Оценка,
	               |	ТЧПотребностиПоПоставщикам.Сумма,
	               |	ТЧПотребностиПоПоставщикам.ПобедительПоПозиционномуРаспределению,
	               |	ПредложенияПобедителей.Победитель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МестоПобедителя";
	Запрос.УстановитьПараметр("Лот",ТекДанные.Лот);
	Запрос.УстановитьПараметр("ОценкиПоКритериям",Документы.ПротоколВыбораПобедителей.ПолучитьТаблицуПобедителейЗонтичнойЗакупкеКритериальнойОценки(ТекДанные.Лот));
	Запрос.УстановитьПараметр("Коэффициент",ТекДанные.Коэффициент);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",ТекДанные.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Характеристика",ТекДанные.Характеристика);
	Запрос.УстановитьПараметр("МестоПоставки",ТекДанные.МестоПоставки);
	Запрос.УстановитьПараметр("Номенклатура",ТекДанные.Номенклатура);
	Запрос.УстановитьПараметр("ПотребностиПоПоставщикам", ПотребностиПоПоставщикам.Выгрузить(Новый Структура("Лот",ТекДанные.Лот)));
	Запрос.УстановитьПараметр("ПотребностиПоПоставщикамВсе", ПотребностиПоПоставщикамВсе.Выгрузить(Новый Структура("Лот",ТекДанные.Лот)));
	Запрос.УстановитьПараметр("ПредложенияПобедителей", ПредложенияПобедителей.Выгрузить(Новый Структура("Лот",ТекДанные.Лот)));
	
	СписокПредложений = Новый СписокЗначений();
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выгрузить();
		Если Выборка.НайтиСтроки(Новый Структура("ПобедительПоПозиционномуРаспределению",Истина)).Количество() = 0 
			И ТекущийМетодОценкиПоставщиков = ПредопределенноеЗначение(
			"Перечисление.МетодыОценкиПредложенийПоставщиков.ПоКритериям") Тогда
			Выборка.Сортировать("Оценка Убыв");
		ИначеЕсли Выборка.НайтиСтроки(Новый Структура("ПобедительПоПозиционномуРаспределению",Истина)).Количество() = 0 
			И Выборка.НайтиСтроки(Новый Структура("ПобедительПоПозиционномуРаспределению",Истина)).Количество() = 0 Тогда	
			Выборка.Сортировать("Сумма Возр");
		КонецЕсли;
		
		МестоПобедителя = 0;
		Для Каждого СтрокаПобедителя Из ПредложенияПобедителей Цикл
			Если СтрокаПобедителя.Лот = ТекДанные.Лот Тогда
				СтрокаПобедителя.Место = 0;
				СтрокаПобедителя.Сумма = 0;
				СтрокаПобедителя.Победитель = Ложь;
				СтрокаПобедителя.Оценка = 0;
			КонецЕсли;
		КонецЦикла;	
		МестоПобедителя = 0;
		Для  Каждого ВыборкаЗапроса ИЗ Выборка Цикл
			СписокПредложений.Добавить(ВыборкаЗапроса.ПредложениеПоставщика);	
			Для Каждого СтрокаПобедителя Из ПредложенияПобедителей Цикл
				Если СтрокаПобедителя.ПредложениеПоставщика = ВыборкаЗапроса.ПредложениеПоставщика
					Тогда
					СтрокаПобедителя.Сумма = ВыборкаЗапроса.Сумма;
					СтрокаПобедителя.Оценка = ВыборкаЗапроса.Оценка;
					Если ВыборкаЗапроса.ПобедительПоПозиционномуРаспределению 
					ИЛИ (Выборка.НайтиСтроки(Новый Структура("ПобедительПоПозиционномуРаспределению",Истина)).Количество() = 0	
					И ВыборкаЗапроса.Победитель)
					Тогда
						Если ВыборкаЗапроса.МестоПобедителя = 0 Тогда 
							МестоПобедителя = МестоПобедителя + 1;
							СтрокаПобедителя.Место = МестоПобедителя;
						Иначе	
							СтрокаПобедителя.Место = ВыборкаЗапроса.МестоПобедителя;
						КонецЕсли;	
						СтрокаПобедителя.Победитель = Истина;
						МестоПобедителя = СтрокаПобедителя.Место;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		МестоПобедителя = МестоПобедителя + 1;
		Если ТекущийМетодОценкиПоставщиков = ПредопределенноеЗначение(
			"Перечисление.МетодыОценкиПредложенийПоставщиков.ПоКритериям") Тогда
			ПредложенияПобедителей.Сортировать("Оценка Убыв");
		Иначе	
			ПредложенияПобедителей.Сортировать("Сумма Возр");
		КонецЕсли;
		Для Каждого СтрокаПобедителя Из ПредложенияПобедителей Цикл
			Если СтрокаПобедителя.Место = 0 И СтрокаПобедителя.Сумма <> 0 Тогда
				СтрокаПобедителя.Место = МестоПобедителя;
				МестоПобедителя = МестоПобедителя+1;
			КонецЕсли;	
		КонецЦикла;	
		Для Каждого СтрокаПобедителя Из ПредложенияПобедителей Цикл
			Если СтрокаПобедителя.Место = 0 Тогда
				СтрокаПобедителя.Место = МестоПобедителя;
				МестоПобедителя = МестоПобедителя+1;
			КонецЕсли;	
		КонецЦикла;	
		
		ПредложенияПобедителей.Сортировать("Место Возр");
		
	КонецЕсли;
	Количество = ПредложенияПобедителей.Количество()-1;   
	Пока Количество >= 0 Цикл
		Если ПредложенияПобедителей[Количество].Сумма = 0 И 
			ПредложенияПобедителей[Количество].Победитель = Ложь Тогда
			ПредложенияПобедителей.Удалить(Количество);
		КонецЕсли;	
		Количество = Количество - 1;
	КонецЦикла;	
	Элементы.НоменклатураПоЗонтичнойЗакупкеНМЦ.ТекстПодвала = НоменклатураПоЗонтичнойЗакупке.Итог("НМЦ");
	Элементы.НоменклатураПоЗонтичнойЗакупкеСуммаПоПобедителям.ТекстПодвала = НоменклатураПоЗонтичнойЗакупке.Итог("СуммаПоПобедителям");
	Элементы.НоменклатураПоЗонтичнойЗакупкеЭкономия.ТекстПодвала = НоменклатураПоЗонтичнойЗакупке.Итог("Экономия");
	Элементы.НоменклатураПоЗонтичнойЗакупкеНМЦ.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.НоменклатураПоЗонтичнойЗакупкеСуммаПоПобедителям.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.НоменклатураПоЗонтичнойЗакупкеЭкономия.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПоЗонтичнойЗакупкеВыборНаСервереОжидание()
	ТекДанные = Элементы.НоменклатураПоЗонтичнойЗакупке.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	СтруктураПоиска = СтруктураОтбора();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекДанные);
	СтруктураПоиска.Вставить("Лот",ТекДанные.Лот);
	НоменклатураПоЗонтичнойЗакупкеВыборНаСервере(СтруктураПоиска);
	Если ПредложенияПобедителей.Количество() > 0 Тогда
		Элементы.ПредложенияПобедителей.ТекущаяСтрока = ПредложенияПобедителей[0].ПолучитьИдентификатор();
	КонецЕсли;	
	ОтключитьОбработчикОжидания("НоменклатураПоЗонтичнойЗакупкеВыборНаСервереОжидание");

КонецПроцедуры	

&НаКлиенте
Процедура НоменклатураПоЗонтичнойЗакупкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЗагрузитьТаблицуПредложений();
	УстановитьТаблицуПобедителей();
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьТаблицуПобедителей()
	
	ТекДанные = Элементы.НоменклатураПоЗонтичнойЗакупке.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	Иначе
		НоменклатураПоЗонтичнойЗакупкеВыборНаСервереОжидание();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗагрузитьТаблицуПредложений()
	Объект.ПредложенияПобедителей.Сортировать("Победитель Убыв");
	ПредложенияПобедителей.Загрузить(Объект.ПредложенияПобедителей.Выгрузить());
	Для Каждого СтрокаПобедителей ИЗ ПредложенияПобедителей Цикл
		СтрокаПобедителей.Партнер = ?(ЗначениеЗаполнено(СтрокаПобедителей.ПредложениеПоставщика.Партнер),СтрокаПобедителей.ПредложениеПоставщика.Партнер,ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(СтрокаПобедителей.Поставщик,"Партнер"));
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьСпецификацию(Команда)
	Элементы.ПредложенияПобедителейПоказатьСпецификацию.Пометка = Не Элементы.ПредложенияПобедителейПоказатьСпецификацию.Пометка;
	Элементы.ПотребностиПоПоставщикам.Видимость = Элементы.ПредложенияПобедителейПоказатьСпецификацию.Пометка;
КонецПроцедуры

#КонецОбласти
