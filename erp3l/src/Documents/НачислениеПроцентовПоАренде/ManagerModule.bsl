
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА

	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("ФинансовыеИнструменты");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");

	НачислениеПроцентовПоАрендеЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);

КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);

		ТекстЗапросаТаблицаРасчетыПоФинансовымИнструментам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		
		НачислениеПроцентовПоАрендеЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);

	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ЗакрытиеМесяца

// Метод создает документы для указанного месяца.
//
// Параметры:
//  Месяц		 - Дата	- Месяц, в котором необходимо создать документы амортизации.
//  Организация	 - СправочникСсылка.Организации	 - Список организаций по которым формируются документы.
//  КоличествоДанных - Число - Количество обработанных данных.
//  Отказ		 - Булево	- Используется при вызове из формы закрытия месяца. При установке в "Истина" - дальнейшие операции выполняться не будут.
//
Процедура СоздатьДокументы(Месяц, Организация, КоличествоДанных, Отказ = Ложь) Экспорт
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(НСтр("ru = 'Начисление процентов по аренде';
															|en = 'Accrual of lease interest'"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентныйДокумент.Ссылка
	|ИЗ
	|	Документ.НачислениеПроцентовПоАренде КАК РегламентныйДокумент
	|ГДЕ
	|	(РегламентныйДокумент.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И РегламентныйДокумент.Дата МЕЖДУ &НачДата И &КонДата
	|	И НЕ РегламентныйДокумент.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрОрганизации.Ссылка КАК Организация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(РегламентныйДокумент.Проведен, ЛОЖЬ) = ИСТИНА
	|				ТОГДА РегламентныйДокумент.Ссылка
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеПроцентовПоАренде.ПустаяСсылка)
	|		КОНЕЦ) КАК СсылкаПроведен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(РегламентныйДокумент.Проведен, НЕОПРЕДЕЛЕНО) = ЛОЖЬ
	|				ТОГДА РегламентныйДокумент.Ссылка
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеПроцентовПоАренде.ПустаяСсылка)
	|		КОНЕЦ) КАК СсылкаНеПроведен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(РегламентныйДокумент.ПометкаУдаления, ЛОЖЬ) = ИСТИНА
	|				ТОГДА РегламентныйДокумент.Ссылка
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеПроцентовПоАренде.ПустаяСсылка)
	|		КОНЕЦ) КАК СсылкаУдален
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеПроцентовПоАренде КАК РегламентныйДокумент
	|		ПО СпрОрганизации.Ссылка = РегламентныйДокумент.Организация
	|			И (РегламентныйДокумент.Дата >= &НачДата)
	|			И (РегламентныйДокумент.Дата <= &КонДата)
	|ГДЕ
	|	(СпрОрганизации.Ссылка В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрОрганизации.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонДата", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("СписокОрганизаций", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЕстьОшибки = Ложь;
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОчисткаДляПоследующегоПроведения",Истина);
		Попытка
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			
			ЕстьОшибки = Истина;
			
			ИмяСобытия = 
				НСтр("ru = 'Закрытие месяца';
					|en = 'Month-end closing'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "."
				+ НСтр("ru = 'Начисление процентов по аренде';
						|en = 'Accrual of lease interest'", ОбщегоНазначения.КодОсновногоЯзыка());
				
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ТребуетсяНачислениеПроцентовПоАренде(Месяц, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СсылкаПроведен.Пустая()
			И Выборка.СсылкаНеПроведен.Пустая()
			И Выборка.СсылкаУдален.Пустая() Тогда
			
			ДокументОбъект = Документы.НачислениеПроцентовПоАренде.СоздатьДокумент();
			
		ИначеЕсли НЕ Выборка.СсылкаПроведен.Пустая() Тогда
			
			ДокументОбъект = Выборка.СсылкаПроведен.ПолучитьОбъект();
			
		ИначеЕсли НЕ Выборка.СсылкаНеПроведен.Пустая() Тогда
			
			ДокументОбъект = Выборка.СсылкаНеПроведен.ПолучитьОбъект();
			
		Иначе
			
			ДокументОбъект = Выборка.СсылкаУдален.ПолучитьОбъект();
			
		КонецЕсли; 
		
		ДокументОбъект.Организация = Выборка.Организация;
		ДокументОбъект.Дата = КонецМесяца(Месяц);
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			Отказ = Истина;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ИмяСобытия =
				НСтр("ru = 'Закрытие месяца';
					|en = 'Month-end closing'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "."
				+ НСтр("ru = 'Начисление процентов по аренде';
						|en = 'Accrual of lease interest'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
			ВызватьИсключение ТекстОшибки
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость начисления расчета в заданном месяце.
//
// Параметры:
//  Месяц - Дата - Проверяемый период.
//  Организация - СправочникСсылка.Организации, Массив - Список организаций.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется расчет.
//
Функция ТребуетсяНачислениеПроцентовПоАренде(Месяц, Организация) Экспорт
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУчетАрендыПоФСБУ25_2018(Организация, Месяц) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втДоговоры
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	ДоговорыАренды.Организация В (&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор КАК Договор,
	|	МИНИМУМ(ЕСТЬNULL(УсловияДоговоровАрендыНеДействует.Период, &КонецМесяца)) КАК ДатаОкончания
	|ПОМЕСТИТЬ втУсловияДоговоров
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(
	|		&КонецПредыдущегоМесяца, 
	|		Договор В (ВЫБРАТЬ Т.Ссылка ИЗ втДоговоры КАК Т)) КАК УсловияДоговоровАренды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|		ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|			И УсловияДоговоровАрендыНеДействует.Период >= &НачалоМесяца
	|			И УсловияДоговоровАрендыНеДействует.Период <= &КонецМесяца
	|			И УсловияДоговоровАрендыНеДействует.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Закрыт)
	|			И УсловияДоговоровАрендыНеДействует.Активность
	|ГДЕ
	|	УсловияДоговоровАренды.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(УсловияДоговоровАрендыНеДействует.Период, &КонецМесяца)) >= &НачалоМесяца
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор,
	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(УсловияДоговоровАрендыНеДействует.Период, ДЕНЬ, -1), &КонецМесяца))
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|		ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|			И УсловияДоговоровАрендыНеДействует.Период > УсловияДоговоровАренды.Период
	|			И УсловияДоговоровАрендыНеДействует.Период <= &КонецМесяца
	|			И УсловияДоговоровАрендыНеДействует.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Закрыт)
	|			И УсловияДоговоровАрендыНеДействует.Активность
	|ГДЕ
	|	УсловияДоговоровАренды.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И УсловияДоговоровАренды.Договор В (ВЫБРАТЬ Т.Ссылка ИЗ втДоговоры КАК Т)
	|	И УсловияДоговоровАренды.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|	И УсловияДоговоровАренды.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(УсловияДоговоровАрендыНеДействует.Период, &КонецМесяца)) >= &НачалоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	втУсловияДоговоров КАК втУсловияДоговоров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикНачисленияПроцентовПоАренде КАК График
	|		ПО График.АктуальныеУсловияДоговора = втУсловияДоговоров.АктуальныеУсловияДоговора
	|			И График.Договор = втУсловияДоговоров.Договор
	|			И График.Дата >= &НачалоМесяца
	|			И График.Дата <= втУсловияДоговоров.ДатаОкончания
	|			И График.Активность";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", НачалоМесяца(Месяц)-1);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет период, начиная с которого требуется выполнять начисление процентов.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - 
//  НачалоПериода - Дата - Проверяемый период.
// 
// Возвращаемое значение:
//  Дата - Дата, начиная с которой требуется расчет.
//
Функция ПериодНачисленияПроцентовПоАренде(Организация, НачалоПериода) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втДоговоры
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	ДоговорыАренды.Организация В (&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор КАК Договор,
	|	МИНИМУМ(ЕСТЬNULL(УсловияДоговоровАрендыНеДействует.Период, ДАТАВРЕМЯ(1,1,1))) КАК ДатаОкончания
	|ПОМЕСТИТЬ втУсловияДоговоров
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(, Договор В (ВЫБРАТЬ Т.Ссылка ИЗ втДоговоры КАК Т)) КАК УсловияДоговоровАренды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|		ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|			И УсловияДоговоровАрендыНеДействует.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Закрыт)
	|			И УсловияДоговоровАрендыНеДействует.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора,	
	|	Договор	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(График.Дата), ДАТАВРЕМЯ(1,1,1)) КАК Период
	|ИЗ
	|	втУсловияДоговоров КАК втУсловияДоговоров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикНачисленияПроцентовПоАренде КАК График
	|		ПО График.АктуальныеУсловияДоговора = втУсловияДоговоров.АктуальныеУсловияДоговора
	|			И График.Договор = втУсловияДоговоров.Договор
	|			И График.Дата >= &НачалоМесяца
	|			И График.Дата >= &НачалоУчета
	|			И (График.Дата <= втУсловияДоговоров.ДатаОкончания
	|					ИЛИ втУсловияДоговоров.ДатаОкончания = ДАТАВРЕМЯ(1,1,1))
	|			И График.Активность";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("НачалоУчета", ВнеоборотныеАктивы.НачалоУчетаАрендыПоФСБУ25_2018(Организация));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.Период), НачалоМесяца(Выборка.Период), '000101010000');
	КонецЕсли;

	Возврат '000101010000';
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.НачислениеПроцентовПоАренде";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка           КАК Ссылка,
	|	ДанныеДокумента.Дата             КАК Период,
	|	ДанныеДокумента.Номер            КАК Номер,
	|	ДанныеДокумента.Проведен         КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления  КАК ПометкаУдаления,
	|	ДанныеДокумента.Комментарий      КАК Комментарий,
	|	ДанныеДокумента.Ответственный    КАК Ответственный,
	|	ДанныеДокумента.Организация      КАК Организация,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегл
	|ИЗ
	|	Документ.НачислениеПроцентовПоАренде КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НачислениеПроцентовПоАренде"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.НачислениеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.НачислениеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	ЗначенияПараметровПроведения.Вставить("СтатьяАктивовПассивов", ПланыВидовХарактеристик.СтатьиАктивовПассивов.Лизинг);

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("ИспользуетсяУчетАрендыПоФСБУ25_2018", ВнеоборотныеАктивы.ИспользуетсяУчетАрендыПоФСБУ25_2018(Реквизиты.Организация, Реквизиты.Период));
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		ЗначенияПараметровПроведения.Вставить("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
		ЗначенияПараметровПроведения.Вставить("КонецМесяца", КонецМесяца(Реквизиты.Период));
	
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПоПартнерамИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуВтНачисления(Запрос);

	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация", Запрос.Параметры.Организация);
	
	ЗапросАналитик.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация                                           КАК Организация,
	|	ТаблицаНачисления.Партнер                              КАК Партнер,
	|	ТаблицаНачисления.Контрагент                           КАК Контрагент,
	|	ТаблицаНачисления.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор
	|ИЗ
	|	ВтНачисления КАК ТаблицаНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам  КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО &Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|			И ТаблицаНачисления.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|			И ТаблицаНачисления.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = РегистрАналитикаУчетаПоПартнерам.Договор
	|			И ТаблицаНачисления.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики ЕСТЬ NULL";
	
	РезультатЗапроса = ЗапросАналитик.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПоПартнерамИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период                                 КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоФинансовымИнструментам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоФинансовымИнструментам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	ТекстЗапросаТаблицаВтНачислениеПроцентовПоАренде(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Период                                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                  КАК ВидДвижения,
	|	
	|	ЕСТЬNULL(АналитикаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО)              КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаНачислений.Договор                                               КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.Проценты)                    КАК ТипСуммы,
	|	НЕОПРЕДЕЛЕНО                                                            КАК РасчетныйДокумент,
	|	ТаблицаНачислений.ВалютаВзаиморасчетов                                  КАК Валюта,
	|	
	|	ТаблицаНачислений.Сумма                                                 КАК Сумма,
	|	ТаблицаНачислений.СуммаУпр                                              КАК СуммаУпр,
	|	ТаблицаНачислений.СуммаРегл                                             КАК СуммаРегл,
	|	
	|	&ХозяйственнаяОперация                                                  КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Начисления)    КАК ТипГрафика,
	|	НЕОПРЕДЕЛЕНО                                                            КАК СтатьяАналитики,
	|	ТаблицаНачислений.ИдентификаторСтроки                                   КАК ИдентификаторСтроки,	
	|	ТаблицаНачислений.ИдентификаторСтроки                                   КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                                         КАК НастройкаХозяйственнойОперации	
	|ИЗ
	|	ВтНачислениеПроцентовПоАренде КАК ТаблицаНачислений
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО АналитикаПоПартнерам.Организация = &Организация
	|			И АналитикаПоПартнерам.Партнер = ТаблицаНачислений.Партнер
	|			И АналитикаПоПартнерам.Контрагент = ТаблицаНачислений.Контрагент
	|			И АналитикаПоПартнерам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И АналитикаПоПартнерам.НаправлениеДеятельности = ТаблицаНачислений.НаправлениеДеятельности";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтНачислениеПроцентовПоАренде(Запрос, ТекстыЗапроса);
	
	Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасходы.Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеРасходовЗаСчетПрочихАктивовПассивов) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|
	|	ТаблицаРасходы.Подразделение КАК Подразделение,
	|	ТаблицаРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов КАК Статья,
	|	ТаблицаРасходы.Договор КАК АналитикаАктивовПассивов,
	|
	|	ТаблицаРасходы.Подразделение КАК КорПодразделение,
	|	ТаблицаРасходы.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ТаблицаРасходы.СтатьяРасходов КАК КорСтатья,
	|	ТаблицаРасходы.АналитикаРасходов КАК КорАналитикаРасходов,
	|	
	|	ТаблицаРасходы.СуммаУпр КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		 ИЛИ НЕ &УправленческийУчетОрганизаций
	|		 ИЛИ ТаблицаРасходы.СуммаУпр = 0
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ТаблицаРасходы.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ТаблицаРасходы.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	
	|	ТаблицаРасходы.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаРасходы.Сумма КАК СуммаВВалюте,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперацииПоЗарплате
	|ИЗ
	|	втНачислениеПроцентовПоАренде КАК ТаблицаРасходы";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
КонецПроцедуры

#Область ВременныеТаблицыДляПроведения

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяТаблицы = "втИсходныеПрочиеРасходы";
	
	ТекстЗапросаТаблицаВтНачислениеПроцентовПоАренде(Запрос, ТекстыЗапроса);

	СписокЗапросовОбъединение = Новый Массив;
	СписокЗапросовОбъединение.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасходы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаРасходы.Подразделение КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	ТаблицаРасходы.СуммаУпр КАК СуммаСНДС,
	|	ТаблицаРасходы.СуммаУпр КАК СуммаБезНДС,
	|	ТаблицаРасходы.СуммаУпр КАК СуммаБезНДСУпр,
	|	ТаблицаРасходы.СуммаРегл КАК СуммаСНДСРегл,
	|	ТаблицаРасходы.СуммаРегл КАК СуммаБезНДСРегл,
	|	ТаблицаРасходы.СуммаРегл КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры,
	|
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	втНачислениеПроцентовПоАренде КАК ТаблицаРасходы";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	ТекстЗапросаТаблицаВтНачислениеПроцентовПоАренде(Запрос, ТекстыЗапроса);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасходы.Период                                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                      КАК ВидДвижения,
	|	&Организация                                                КАК Организация,
	|	ТаблицаРасходы.Подразделение                                КАК Подразделение,
	|	&Ссылка                                                     КАК ДокументПоступленияРасходов,
	|	ТаблицаРасходы.СтатьяРасходов                               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаАктивовПассивов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаРасходы.НаправлениеДеятельности                      КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                КАК ВидДеятельностиНДС,
	|
	|	ТаблицаРасходы.СуммаУпр                                     КАК Стоимость,
	|	ТаблицаРасходы.СуммаУпр                                     КАК СтоимостьБезНДС,
	|	0                                                           КАК НДСУпр,
	|	ТаблицаРасходы.СуммаРегл                                    КАК СтоимостьРегл,
	|	0                                                           КАК ПостояннаяРазница,
	|	ТаблицаРасходы.СуммаРегл                                    КАК ВременнаяРазница,
	|	0                                                           КАК НДСРегл,
	|
	|	&ХозяйственнаяОперация                                      КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки                          КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                             КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	втНачислениеПроцентовПоАренде КАК ТаблицаРасходы";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаВтНачислениеПроцентовПоАренде(Запрос, ТекстыЗапроса)
	
	ИмяТаблицы = "втНачислениеПроцентовПоАренде";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуВтНачисления(Запрос);
	ТекстЗапросаТаблицаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНачисления.Дата КАК Период,
	|	ТаблицаНачисления.Договор КАК Договор,
	|	ТаблицаНачисления.Партнер КАК Партнер,
	|	ТаблицаНачисления.Контрагент КАК Контрагент,
	|	ТаблицаНачисления.Подразделение КАК Подразделение,
	|	ТаблицаНачисления.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаНачисления.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаНачисления.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаНачисления.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ТаблицаНачисления.Сумма КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаНачисления.Договор КАК Справочник.ДоговорыАренды).УчитыватьПредметыАрендыВУпрУчете
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНачисления.Сумма * ЕСТЬNULL(Коэффициенты.КоэффициентПересчетаУпр, 0) КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаНачисления.Договор КАК Справочник.ДоговорыАренды).УчитыватьПредметыАрендыВРеглУчете
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаНачисления.Сумма * ЕСТЬNULL(Коэффициенты.КоэффициентПересчетаРегл, 0) КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ТаблицаНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ втНачислениеПроцентовПоАренде
	|ИЗ
	|	втНачисления КАК ТаблицаНачисления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК Коэффициенты
	|		ПО Коэффициенты.ВалютаВзаиморасчетов = ТаблицаНачисления.ВалютаВзаиморасчетов
	|			И Коэффициенты.Дата = ТаблицаНачисления.Дата";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса)
	
	ИмяТаблицы = "ВтКоэффициентыПересчетаВалют";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	СформироватьТаблицуВтНачисления(Запрос);

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНачисления.ВалютаВзаиморасчетов,
	|	ТаблицаНачисления.Дата
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	втНачисления КАК ТаблицаНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВалютаВзаиморасчетов,
	|	Дата";
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ТаблицаПериодов");
	
	ФинансовыеИнструменты.ТекстЗапросаВтКоэффициентыПересчетаВалют(ТекстыЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура СформироватьТаблицуВтНачисления(Запрос) Экспорт
	
	ИмяТаблицы = "втНачисления";
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втДоговоры
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	ДоговорыАренды.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(УсловияДоговоровАренды.Период, ДЕНЬ)) КАК Период
	|ПОМЕСТИТЬ втУсловияДоговоровАренды
	|ИЗ
	|	(ВЫБРАТЬ
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор КАК Договор,
	|		МИНИМУМ(ЕСТЬNULL(УсловияДоговоровАрендыНеДействует.Период, &КонецМесяца)) КАК Период
	|	ИЗ
	|		РегистрСведений.УсловияДоговоровАренды.СрезПоследних(
	|			&НачалоМесяца, 
	|			Договор В (ВЫБРАТЬ втДоговоры.Ссылка ИЗ втДоговоры КАК втДоговоры)) КАК УсловияДоговоровАренды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|			ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|				И УсловияДоговоровАрендыНеДействует.Период >= &НачалоМесяца
	|				И УсловияДоговоровАрендыНеДействует.Период <= &КонецМесяца
	|				И УсловияДоговоровАрендыНеДействует.Активность
	|	ГДЕ
	|		УсловияДоговоровАренды.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|
	|	СГРУППИРОВАТЬ ПО
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор КАК Договор,
	|		МИНИМУМ(ЕСТЬNULL(УсловияДоговоровАрендыНеДействует.Период, &КонецМесяца))
	|
	|	ИЗ
	|		РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК УсловияДоговоровАрендыНеДействует
	|			ПО УсловияДоговоровАрендыНеДействует.Договор = УсловияДоговоровАренды.Договор
	|				И УсловияДоговоровАрендыНеДействует.Период > УсловияДоговоровАренды.Период
	|				И УсловияДоговоровАрендыНеДействует.Период <= &КонецМесяца
	|				И УсловияДоговоровАрендыНеДействует.Активность
	|	ГДЕ
	|		УсловияДоговоровАренды.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И УсловияДоговоровАренды.Договор В (ВЫБРАТЬ втДоговоры.Ссылка ИЗ втДоговоры КАК втДоговоры)
	|		И УсловияДоговоровАренды.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|		И УсловияДоговоровАренды.Активность
	|
	|	СГРУППИРОВАТЬ ПО
	|		УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|		УсловияДоговоровАренды.Договор
	|
	|	) КАК УсловияДоговоровАренды
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.Дата,
	|	График.Договор,
	|	График.Договор.Партнер КАК Партнер,
	|	График.Договор.Контрагент КАК Контрагент,
	|	График.Договор.ПодразделениеПроценты КАК Подразделение,
	|	График.Договор.СтатьяРасходовПроценты КАК СтатьяРасходов,
	|	График.Договор.АналитикаРасходовПроценты КАК АналитикаРасходов,
	|	График.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	График.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	График.Проценты КАК Сумма,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	втУсловияДоговоровАренды КАК втУсловияДоговоровАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикНачисленияПроцентовПоАренде КАК График
	|		ПО График.АктуальныеУсловияДоговора = втУсловияДоговоровАренды.АктуальныеУсловияДоговора
	|			И График.Договор = втУсловияДоговоровАренды.Договор
	|			И График.Дата >= &НачалоМесяца
	|			И График.Дата <= втУсловияДоговоровАренды.Период
	|			И График.Проценты <> 0
	|			И График.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата, ВалютаВзаиморасчетов";
	
	НовыйЗапрос = Новый Запрос(ТекстЗапроса);
	НовыйЗапрос.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	НовыйЗапрос.УстановитьПараметр("Период", Запрос.Параметры.Период);
	НовыйЗапрос.УстановитьПараметр("Организация", Запрос.Параметры.Организация);
	НовыйЗапрос.УстановитьПараметр("НачалоМесяца", Запрос.Параметры.НачалоМесяца);
	НовыйЗапрос.УстановитьПараметр("КонецМесяца", Запрос.Параметры.КонецМесяца);
	
	НовыйЗапрос.Выполнить();
	
	ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(ИмяТаблицы, Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат НачислениеПроцентовПоАрендеЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат НачислениеПроцентовПоАрендеЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации)
	
	ВходящиеДанные = Новый Соответствие;
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ГрафикНачисленияПроцентовПоАренде);
	ВходящиеДанные.Вставить(Метаданные.Справочники.ДоговорыАренды);
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли