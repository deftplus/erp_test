
#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	флЗаполненДокумент = ЗначениеЗаполнено(Параметры.Ключ);
	ПараметрыУрегулирования = Параметры.ПараметрыЗаполнения;
	Если ТипЗнч(ПараметрыУрегулирования) <> Тип("Структура") И ТипЗнч(ПараметрыУрегулирования) <> Тип("ФиксированнаяСтруктура") Тогда
		Если не флЗаполненДокумент Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Для создания документа воспользуйтесь порталом сверки'");
			Сообщение.Сообщить(); 
			Возврат;
		КонецЕсли;
		
		флОткрытИзПортала = Ложь;
		флЕстьДопАналитики = Объект.РазделВГО.ЕстьДопАналитики;
		ЭтоКредитор = (Объект.СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор);
	Иначе
		флОткрытИзПортала = Истина;
	КонецЕсли;
	
	СписокТиповАналитикСчетов.Добавить(Перечисления.ТипыАналитикЭлиминации.СчетУчета);
	СписокТиповАналитикСчетов.Добавить(Перечисления.ТипыАналитикЭлиминации.СчетУчетаЗапасов);
	СписокТиповАналитикСчетов.Добавить(Перечисления.ТипыАналитикЭлиминации.СчетУчетаСебестоимости);
	
	флЗакрыть = Ложь;
	
	Если флОткрытИзПортала И НЕ флЗаполненДокумент Тогда
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыУрегулирования);
		Если НЕ ЗначениеЗаполнено(Объект.РазделВГО) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		флЕстьДопАналитики = Объект.РазделВГО.ЕстьДопАналитики;
		
	
		Если флЕстьДопАналитики и НЕ ЗначениеЗаполнено(Объект.ДопАналитикаРасхождения) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ЭтоКредитор = (Объект.СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор);
		Если ЭтоКредитор Тогда
			Объект.Отправитель = Объект.Организация;
			Объект.Получатель = Объект.Контрагент;
		Иначе
			Объект.Отправитель = Объект.Контрагент;
			Объект.Получатель = Объект.Организация;
		КонецЕсли;
		
		ПланСчетовИсточник = МСФОВызовСервераУХ.ЗначениеУП("ШаблонТрансляции.ПланСчетовИсточник", Объект.Организация, Объект.Дата, Объект.Сценарий);
		Объект.ПланСчетов = ?(ЗначениеЗаполнено(ПланСчетовИсточник), ПланСчетовИсточник, Константы.ПланСчетовПоУмолчанию.Получить());
		Объект.ЗнакУрегулирования = (Объект.СуммаОрганизации < Объект.СуммаКонтрагента);
		Объект.МаксимальнаяСумма = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыУрегулирования, "СуммаУрегулирования");
		Объект.МаксимальнаяСуммаГр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыУрегулирования, "СуммаУрегулированияГр");
		
		// Определим валюту группы
		СтруктураГлавнойОрганизации = СверкаВГОУХ.ГоловнаяОрганизацияИВалюта(Объект.ПериодСценария, Объект.Сценарий);
		Если СтруктураГлавнойОрганизации = неопределено Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Нет возможности определить валюту группы! Проверьте настройки регламента отчетности'");
			Сообщение.Сообщить(); 
			Возврат;
		Иначе
			Объект.ВалютаГруппы = СтруктураГлавнойОрганизации.Валюта;
		КонецЕсли;
	КонецЕсли;
	
	Суффикс = ?(Объект.СторонаУрегулирования=Перечисления.СтороныСверкиВГО.Дебитор,"Дт","Кт");
	
	// установим источники данных
	ТЗШаблоныПроводок = Неопределено;
	ИсточникДанныхИзШаблона = Неопределено;
	Если ЗначениеЗаполнено(Объект.ПричинаРасхождения) Тогда
		// Получим шаблоны проводок из причин расхождения
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПричиныРасхожденийВГОПроводки.СчетДт,
			|	ПричиныРасхожденийВГОПроводки.СчетКт,
			|	ПричиныРасхожденийВГОПроводки.ПроцентОтСуммыРасхождения,
			|	ПричиныРасхожденийВГОПроводки.ЗначениеСубконтоДт1,
			|	ПричиныРасхожденийВГОПроводки.ЗначениеСубконтоДт2,
			|	ПричиныРасхожденийВГОПроводки.ЗначениеСубконтоДт3,
			|	ПричиныРасхожденийВГОПроводки.ЗначениеСубконтоКт1,
			|	ПричиныРасхожденийВГОПроводки.ЗначениеСубконтоКт2,
			|	ПричиныРасхожденийВГОПроводки.ЗначениеСубконтоКт3,
			|	ПричиныРасхожденийВГОПроводки.СпособЗаполненияСубконтоДт1,
			|	ПричиныРасхожденийВГОПроводки.СпособЗаполненияСубконтоДт2,
			|	ПричиныРасхожденийВГОПроводки.СпособЗаполненияСубконтоДт3,
			|	ПричиныРасхожденийВГОПроводки.СпособЗаполненияСубконтоКт1,
			|	ПричиныРасхожденийВГОПроводки.СпособЗаполненияСубконтоКт2,
			|	ПричиныРасхожденийВГОПроводки.СпособЗаполненияСубконтоКт3,
			|	ПричиныРасхожденийВГОПроводки.АналитикаВГОДт1,
			|	ПричиныРасхожденийВГОПроводки.АналитикаВГОДт2,
			|	ПричиныРасхожденийВГОПроводки.АналитикаВГОДт3,
			|	ПричиныРасхожденийВГОПроводки.АналитикаВГОКт1,
			|	ПричиныРасхожденийВГОПроводки.АналитикаВГОКт2,
			|	ПричиныРасхожденийВГОПроводки.АналитикаВГОКт3,
			|	ПричиныРасхожденийВГОПроводки.ИсточникДанныхДт,
			|	ПричиныРасхожденийВГОПроводки.ИсточникДанныхКт
			|ИЗ
			|	Справочник.ПричиныРасхожденийВГО.Проводки КАК ПричиныРасхожденийВГОПроводки
			|ГДЕ
			|	ПричиныРасхожденийВГОПроводки.Ссылка = &ПричинаРасхождения
			|	И ПричиныРасхожденийВГОПроводки.РазделВГО = &РазделВГО";
		
		Запрос.УстановитьПараметр("ПричинаРасхождения", Объект.ПричинаРасхождения);
		Запрос.УстановитьПараметр("РазделВГО", Объект.РазделВГО);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТЗШаблоныПроводок = РезультатЗапроса.Выгрузить();
			
			Если ТЗШаблоныПроводок.Количество() > 0 Тогда
				ИсточникДанныхИзШаблона = ТЗШаблоныПроводок[0]["ИсточникДанных"+Суффикс];
			КонеЦЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИсточникДанныхИзШаблона = Неопределено Тогда
		//составим список возможных источников данных из настроек раздела сверки
		СпособыПолученияДляИД.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия);
		СпособыОпределенияНаправленияУчета.Добавить(?(ЭтоКредитор, Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит, Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет));
		СпособыОпределенияНаправленияУчета.Добавить(Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации);
		
		//
		// сформируем список подходящих источников данных
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных КАК ИсточникДанных
			|ИЗ
			|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
			|ГДЕ
			|	РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделСверкиВГО
			|	И НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления
			|	И РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета В(&СпособыОпределенияНаправленияУчета)
			|	И РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения В(&СпособыПолучения)
			|	И РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор <> ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)";

		Запрос.УстановитьПараметр("ПериодСценария", Объект.ПериодСценария);
		Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
		Запрос.УстановитьПараметр("Этап", Объект.Этап);
		Запрос.УстановитьПараметр("ДопАналитикаРасхождения", Объект.ДопАналитикаРасхождения);
		Запрос.УстановитьПараметр("РазделСверкиВГО", Объект.РазделВГО);
		Запрос.УстановитьПараметр("СпособыПолучения", СпособыПолученияДляИД);
		Запрос.УстановитьПараметр("СпособыОпределенияНаправленияУчета", СпособыОпределенияНаправленияУчета);
		РезультатЗапроса = Запрос.Выполнить();
		ТЗ_ИД = РезультатЗапроса.Выгрузить();
				
		Элементы.ИсточникДанных.СписокВыбора.ЗагрузитьЗначения(ТЗ_ИД.ВыгрузитьКолонку("ИсточникДанных"));
		
	Иначе
		// возьмем из настроек шаблона проводок причины расхождения
		Элементы.ИсточникДанных.СписокВыбора.Добавить(ИсточникДанныхИзШаблона);
		
	КонецЕсли;
	
	// обработаем изменение источника данных
	Если Элементы.ИсточникДанных.СписокВыбора.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо настроить источники данных раздела сверки: '") + Объект.РазделВГО;
		Сообщение.Сообщить();
		Возврат;
	ИначеЕсли Элементы.ИсточникДанных.СписокВыбора.Количество() = 1 и НЕ флЗаполненДокумент Тогда
		Объект.ИсточникДанных = Элементы.ИсточникДанных.СписокВыбора.Получить(0).Значение;
		ИсточникДанныхПриИзмененииНаСервере();
	КонецЕсли;
	
	Если флОткрытИзПортала И НЕ флЗаполненДокумент И ТипЗнч(ТЗШаблоныПроводок) = Тип("ТаблицаЗначений") И ТЗШаблоныПроводок.Количество() > 0 Тогда
		// заполним проводки
		НомерПроводки = 1;
		Для Каждого Проводка Из ТЗШаблоныПроводок Цикл
			НоваяСтрока = Объект.Проводки.Добавить();
			НоваяСтрока.СчетДт = Проводка.СчетДт;
			НоваяСтрока.СчетКт = Проводка.СчетКт;
			НоваяСтрока.СубконтоДт1 = ЗначениеСубконтоШаблонаПроводки(Проводка, "Дт1");
			НоваяСтрока.СубконтоДт2 = ЗначениеСубконтоШаблонаПроводки(Проводка, "Дт2");
			НоваяСтрока.СубконтоДт3 = ЗначениеСубконтоШаблонаПроводки(Проводка, "Дт3");
			НоваяСтрока.СубконтоКт1 = ЗначениеСубконтоШаблонаПроводки(Проводка, "Кт1");
			НоваяСтрока.СубконтоКт2 = ЗначениеСубконтоШаблонаПроводки(Проводка, "Кт2");
			НоваяСтрока.СубконтоКт3 = ЗначениеСубконтоШаблонаПроводки(Проводка, "Кт3");
			НоваяСтрока.НомерПроводки = НомерПроводки;
			НоваяСтрока.РесурсРегистра = "СуммаВВалютеУчета";
			НоваяСтрока.Значение = Проводка.ПроцентОтСуммыРасхождения / 100 * Объект.СуммаУрегулирования;
			
			НомерПроводки = НомерПроводки + 1;
			
		КонецЦикла;
		
		Объект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьПроводки(Истина, Перечисления.ТипыТехническихСчетовДляСверкиЭлиминации.СчетУрегулирования);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		флЗакрыть = Истина;
		
	КонецЕсли;
	
	Если флЗаполненДокумент Тогда
		ЭтоКредитор = (Объект.СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор);
	КонецЕсли;
		
	ЦветТекстОбычный = ЦветаСтиля.ЦветТекстаКнопки;
	ЦветТекстПредупреждение = ЦветаСтиля.РезультатПредупреждениеЦвет;
	
	Элементы.ЗначенияСубконто.Видимость =
		(Объект.РазделВГО.СпособЭлиминации <> Перечисления.СпособыЭлиминации.НеЭлиминировать)
		И
		(Объект.РазделВГО.СпособЭлиминации <> Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если флЗакрыть Тогда
		ОбработкаЗакрытия();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	ОбновитьСуммыУрегулирования();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не Объект.ПроводкиУжеЗаполненыАвтоматически И Объект.Проводки.Количество() = 0 И Объект.ДополнительныеКорректировки.Количество() = 0 Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ МожноСформироватьПроводкиНаКлиенте() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Недостаточно информации для заполнения проводок! Заполните значения аналитик и ресурсов.'");
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ПроводкиУжеЗаполненыАвтоматически И Объект.Проводки.Количество() = 0 И Объект.ДополнительныеКорректировки.Количество() = 0 Тогда
		ЗаполнитьПроводкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбработкаЗакрытия();
КонецПроцедуры


#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ЗаполнитьПроводки(Команда)
	
	Если НЕ МожноСформироватьПроводкиНаКлиенте()  Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Недостаточно информации для заполнения проводок! Заполните значения аналитик и ресурсов.'");
		Сообщение.Сообщить();
		Возврат;
	КонеЦЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияЗаполненияПроводок = Новый ОписаниеОповещения("ОбработкаЗаполненияПроводок", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Перед заполнением проводок нужно сохранить изменения документа. Сохранить документ?'");
		ПоказатьВопрос(ОписаниеОповещенияЗаполненияПроводок, , РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить проводки?'"));
		
	Иначе
		ОбработкаЗаполненияПроводок(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияСубконтоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗначенияСубконтоЗначениеСубконто" Тогда
		УстановитьНастройкиЗначенияСубконто();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияСубконтоЗначениеСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗначенияСубконто.ТекущиеДанные;
	Если ТекДанные.ПроизвольныйКлассификатор Тогда
		СтандартнаяОбработка = Ложь;
		Параметры_ = Новый Структура("Отбор", Новый Структура("Владелец", ТекДанные.ВидСубконтоСсылка));
		ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", Параметры_, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонаУрегулированияПриИзменении(Элемент)
	
	ЭтоКредитор = (Объект.СторонаУрегулирования = ПредопределенноеЗначение("Перечисление.СтороныСверкиВГО.Кредитор"));
	Если ЭтоКредитор Тогда
		Объект.Отправитель = Объект.Организация;
		Объект.Получатель = Объект.Контрагент;
	Иначе
		Объект.Отправитель = Объект.Контрагент;
		Объект.Получатель = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыСуммаПриИзменении(Элемент)
	ОбновитьСуммыУрегулирования();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	ИсточникДанныхПриИзмененииНаСервере();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура АналитикиПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.Аналитики.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокТиповАналитикСчетов.НайтиПоЗначению(ТекДанные.ТипДляЭлиминации) <> Неопределено Тогда
		УдалитьСчетИзТаблицы(Элементы.ЗначенияСубконто, ТекДанные.ТипДляЭлиминации);
		Элементы.ЗначенияСубконто.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Аналитики.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мОграничения = Объект.ОграниченияЗначенийАналитик.НайтиСтроки(Новый Структура("Имя", ТекДанные.Имя));
	Если мОграничения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если мОграничения.количество() = 1 и ТекДанные.ИмяВГО = "Ссылка" Тогда
		// однозначное соответствие аналитик
		ЗначениеАналитики_ = мОграничения[0].Значение;
		Если ЗначениеЗаполнено(ЗначениеАналитики_) Тогда
			ДанныеВыбора = ЗначениеАналитики_;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("мОграничения, ТекАналитика, Элемент", мОграничения, ТекДанные, Элемент);
	
	мТипов = ТипыАналитики(ТекДанные.ВидАналитики);
	Если мТипов.Количество() = 1 Тогда
		ОбработатьВыборТипаАналитики(мТипов[0], ДопПараметры);
	Иначе
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(мТипов);
		ОповещениеОВыбореТипаАналитики = Новый ОписаниеОповещения("ОбработатьВыборТипаАналитики", ЭтаФорма, ДопПараметры);
		ПоказатьВыборИзСписка(ОповещениеОВыбореТипаАналитики, СписокТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиЗначениеПриИзменении(Элемент)
	
	ТекДанные = Элементы.Аналитики.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокТиповАналитикСчетов.НайтиПоЗначению(ТекДанные.ТипДляЭлиминации) <> Неопределено Тогда
		// установим субконто для счета
		ЗначенияПоУмолчанию = Новый Структура;
		ЗначенияПоУмолчанию.Вставить("Организация", Объект.Организация);
		ЗначенияПоУмолчанию.Вставить("Контрагент", Объект.Контрагент);
		ЗначенияПоУмолчанию.Вставить("ИсточникДанных", Объект.ИсточникДанных);
		ЗначенияПоУмолчанию.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
		ЗначенияПоУмолчанию.Вставить("РазделВГО", Объект.РазделВГО);
		ЗначенияПоУмолчанию.Вставить("ЭтоКредитор", ЭтоКредитор);
		ЗначенияПоУмолчанию.Вставить("СторонаУрегулирования", Объект.СторонаУрегулирования);
		ЗначенияПоУмолчанию.Вставить("Ответственный", Объект.Ответственный);
		ЗначенияПоУмолчанию.Вставить("ПланСчетов", Объект.ПланСчетов);
		
		Для Каждого СтрокаАналитик Из Объект.Аналитики Цикл
			Если ЗначениеЗаполнено(СтрокаАналитик.Значение) И
				СписокТиповАналитикСчетов.НайтиПоЗначению(СтрокаАналитик.ТипДляЭлиминации) = Неопределено Тогда
				ЗначенияПоУмолчанию.Вставить(СтрокаАналитик.Имя, СтрокаАналитик.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьСчетКТаблице(ТекДанные.ТипДляЭлиминации, ТекДанные.Значение, ЗначенияПоУмолчанию);
		Элементы.ЗначенияСубконто.Обновить();
		
	Иначе
		// установим значения для субконто		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте

&НаКлиенте
Процедура ОбработкаЗакрытия()
	
	Если флОткрытИзПортала И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДанныеДляУрегулирования = Новый Структура;
		
		ДанныеДляУрегулирования.Вставить("СуммаУрегулирования", Объект.СуммаУрегулирования);
		ДанныеДляУрегулирования.Вставить("СуммаУрегулированияГр", Объект.СуммаУрегулированияГр);
		ДанныеДляУрегулирования.Вставить("ЗнакУрегулирования", Объект.ЗнакУрегулирования);
		ДанныеДляУрегулирования.Вставить("Ссылка", Объект.Ссылка);
		ДанныеДляУрегулирования.Вставить("ИсточникДанных", Объект.ИсточникДанных);
		ДанныеДляУрегулирования.Вставить("ЭтоКредитор", ЭтоКредитор);
		ДанныеДляУрегулирования.Вставить("СообщениеОшибки", "");
		
		Оповестить("УрегулированиеРасхождения", ДанныеДляУрегулирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	флВыбранИД = Значениезаполнено(Объект.ИсточникДанных);
	Элементы.ГруппаАналитикиИСуммы.Видимость = флВыбранИД;
	
	Элементы.ДекорацияНеобходимоЗаполнитьПроводки.Видимость = НЕ Объект.ПроводкиУжеЗаполненыАвтоматически;
	ЭЛементы.ФормаЗаполнитьПроводки.ЦветТекста = ?(Объект.ПроводкиУжеЗаполненыАвтоматически, ЦветТекстОбычный, ЦветТекстПредупреждение);
	Если Объект.ПроводкиУжеЗаполненыАвтоматически Тогда
		Элементы.ГруппаУрегулированиеПроводки.Картинка = Новый Картинка;
		Элементы.ГруппаКорректировки.Картинка = Новый Картинка;
	Иначе
		Элементы.ГруппаУрегулированиеПроводки.Картинка = БиблиотекаКартинок.Важно;
		Элементы.ГруппаКорректировки.Картинка = БиблиотекаКартинок.Важно;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияПроводок(РезультатВопроса, ДопПараметры) Экспорт
	ЗаполнитьПроводкиНаСервере();
	ОбновитьОтображениеДанных();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыУрегулирования()
	СуммаУрегулирования = Объект.Ресурсы.Итог("Сумма");
	Объект.СуммаУрегулирования = Макс(СуммаУрегулирования, -СуммаУрегулирования);
	Объект.СуммаУрегулированияГр = Объект.СуммаУрегулирования * Объект.МаксимальнаяСуммаГр / ?(Объект.МаксимальнаяСумма=0,1,Объект.МаксимальнаяСумма);
	СуммаУрегулированияСоЗнаком = ?(Объект.ЗнакУрегулирования, "+", "-") + Формат(СуммаУрегулирования, "ЧДЦ=2; ЧН=0");
	
КонецПроцедуры

&НаКлиенте
Функция МожноСформироватьПроводкиНаКлиенте()
	Для Каждого Строка_ Из Объект.Ресурсы Цикл
		Если Строка_.Сумма = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборЗначенияАналитики(Значение, ДопПараметры) Экспорт
	Если Значение = Неопределено Тогда 
		Возврат;
	КонеЦЕсли;
	
	ДопПараметры.ТекАналитика.Значение = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаАналитики(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда 
		Возврат;
	КонеЦЕсли;
	
	ОповещениеОВыбореЗначения = Новый ОписаниеОповещения("ОбработатьВыборЗначенияАналитики", ЭтаФорма, ДопПараметры);
	
	ПолноеИмяТипа = ПолучитьИмяТипаПоТипуЗначения(Значение);
	Если ПолноеИмяТипа = "" Тогда
		Возврат;
	КонеЦЕсли;
	
	Отбор = Новый Структура;
	Для Каждого Ограничение Из ДопПараметры.мОграничения Цикл
		Если ЗначениеЗаполнено(Ограничение.Значение) Тогда
			Отбор.Вставить(Ограничение.Путь, Ограничение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму(ПолноеИмяТипа + ".ФормаВыбора", ПараметрыФормы, ДопПараметры.Элемент,,,,ОповещениеОВыбореЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиЗначенияСубконто()
	
	НастройкиЭлемента = ПолучитьНастройкиЭлементаФормыЗначенияСубконто(Объект, Элементы.ЗначенияСубконто.ТекущаяСтрока);
	ЭлементЗначенияСубконто = Элементы.ЗначенияСубконтоЗначениеСубконто;
	
	Если НастройкиЭлемента.Свойство("ПараметрыВыбора") Тогда
		ЭлементЗначенияСубконто.ПараметрыВыбора = 
			СтруктуруПараметроваВФиксированныйМассив(Тип("ПараметрВыбора"),
				НастройкиЭлемента.ПараметрыВыбора);
	КонецЕсли;
	
	Если НастройкиЭлемента.Свойство("ВыбиратьТип") Тогда
		ЭлементЗначенияСубконто.ВыбиратьТип = НастройкиЭлемента.ВыбиратьТип;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктуруПараметроваВФиксированныйМассив(ТипЭлемента, СтруктураПараметров)
	мПараметры = Новый Массив;
	
	Для Каждого КлючЗначение Из СтруктураПараметров Цикл
		ПараметрыТипа = Новый Массив;
		ПараметрыТипа.Добавить(КлючЗначение.Ключ);
		ПараметрыТипа.Добавить(КлючЗначение.Значение);
		мПараметры.Добавить(Новый(ТипЭлемента, ПараметрыТипа));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(мПараметры);
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ЗаполнитьПроводкиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПроводки(Ложь, Перечисления.ТипыТехническихСчетовДляСверкиЭлиминации.СчетУрегулирования);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Элементы.Проводки.Обновить();
	Элементы.ДополнительныеКорректировки.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСубконтоШаблонаПроводки(Проводка, Суффикс)
	
	СпособЗаполнения = Проводка["СпособЗаполненияСубконто" + Суффикс];
	Если СпособЗаполнения = Перечисления.СпособыЗаполненияСубконтоВГО.ФиксированноеЗначение Тогда
		Возврат Проводка["ЗначениеСубконто" + Суффикс];
	КонецЕсли;
	
	СтрокаАналитики = Объект.РазделВГО.ГруппаРаскрытия.Аналитики.Найти(Проводка["АналитикаВГО" + Суффикс], "Имя");
	Если СтрокаАналитики = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаАналитики.ДопАналитикаСверки Тогда
		СтрокаАналитики = Объект.ДопАналитикаРасхождения.ЗначенияРеквизитов.Найти(СтрокаАналитики.Имя, "Имя");
		Если СтрокаАналитики = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат СтрокаАналитики.Значение;
	КонецЕсли;
	
	Возврат Объект[СтрокаАналитики.Имя];
	
КонецФункции

&НаСервере
Функция ЗначениеСверки(ВидАналитики, ТипДляЭлиминации, ИмяВГО, флДопАналитика, ТЗ_ЗначенияРеквизитовДопАналитик)
	
	Перем ЗначениеАналитики_;
	
	Если ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Организация Тогда
		Возврат  Объект.Организация;
		
	ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Контрагент Тогда
		Возврат Объект.Контрагент;
		
	ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ВалютаВзаиморасчетов Тогда
		Возврат Объект.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	Если флДопАналитика Тогда
		ЗначениеДопАналитики_ = ТЗ_ЗначенияРеквизитовДопАналитик.Найти(ИмяВГО, "Имя");
		Если ЗначениеЗаполнено(ЗначениеДопАналитики_) Тогда
			Возврат ЗначениеДопАналитики_.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		 ЗначениеАналитики_ = Объект[ИмяВГО];
	Исключение
		 ЗначениеАналитики_ = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ВидАналитики.ТипЗначения.Типы()[0]);
	КонецПопытки;
	 
	Возврат ЗначениеАналитики_; 
	
КонецФункции

&НаСервере
Функция МожноСформироватьПроводки()
	Для Каждого Строка_ Из Объект.Аналитики Цикл
		Если НЕ ЗначениеЗаполнено(Строка_.Значение) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка_ Из Объект.Ресурсы Цикл
		Если Строка_.Сумма = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ИсточникДанныхПриИзмененииНаСервере()
	
	Объект.Аналитики.Очистить();
	Объект.ОграниченияЗначенийАналитик.Очистить();
	Объект.Ресурсы.Очистить();
	Объект.ЗначенияСубконто.Очистить();
	Объект.ДополнительныеКорректировки.Очистить();
	Объект.Проводки.Очистить();
	
	Объект.ПроводкиУжеЗаполненыАвтоматически = Ложь; // необходимо повторно заполнить проводки
	
	ГруппаАналитик = Объект.ИсточникДанных.ГруппаРаскрытияОтбор;
	Если НЕ ЗначениеЗаполнено(ГруппаАналитик) Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоАналитик = ГруппаАналитик.ЧислоАналитик;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле КАК Поле,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.АналитикаОперанда КАК ВидАналитики,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики КАК Имя,
		|	ЕСТЬNULL(ПоказателиОтчетов.Ссылка, НЕОПРЕДЕЛЕНО) КАК Показатель,
		|	ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле ПОДОБНО ""%.%""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРазыменовывание,
		|	ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле ПОДОБНО ""Аналитика%""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоАналитика,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоПоказатель,
		|	ГруппыАналитикСверкиВГОРесурсы.ТипЗначения КАК ТипЗначения,
		|	ГруппыАналитикСверкиВГОРесурсы.ТипДляЭлиминации КАК ТипДляЭлиминации,
		|	ВЫБОР
		|		КОГДА ГруппыАналитикСверкиВГОРесурсы.ТипЗначения ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОписаниеПоказателя,
		|	ЕСТЬNULL(ГруппыАналитикСверкиВГОАналитики.ТипДляЭлиминации, НЕОПРЕДЕЛЕНО) КАК ТипАналитикиДляЭлиминации,
		|	ГруппыАналитикСверкиВГОАналитики.ДопАналитикаСверки КАК ЭтоДопАналитика
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ГруппаРаскрытияОтбор.Владелец = ПоказателиОтчетов.Владелец
		|			И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле = ПоказателиОтчетов.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналитикСверкиВГО.Ресурсы КАК ГруппыАналитикСверкиВГОРесурсы
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики = ГруппыАналитикСверкиВГОРесурсы.Имя
		|			И (ГруппыАналитикСверкиВГОРесурсы.Ссылка = &ГруппаРаскрытияВГО)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналитикСверкиВГО.Аналитики КАК ГруппыАналитикСверкиВГОАналитики
		|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики = ГруппыАналитикСверкиВГОАналитики.Имя
		|			И (ГруппыАналитикСверкиВГОАналитики.Ссылка = &ГруппаРаскрытияВГО)
		|ГДЕ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы)
		|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияДопАналитикРасхожденийВГО.Имя КАК Имя,
		|	ЗначенияДопАналитикРасхожденийВГО.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияДопАналитикРасхожденийВГО КАК ЗначенияДопАналитикРасхожденийВГО
		|ГДЕ
		|	ЗначенияДопАналитикРасхожденийВГО.ПериодСценария = &ПериодСценария
		|	И ЗначенияДопАналитикРасхожденийВГО.Сценарий = &Сценарий
		|	И ЗначенияДопАналитикРасхожденийВГО.Этап = &Этап
		|	И ЗначенияДопАналитикРасхожденийВГО.ДопАналитикаРасхождения = &ДопАналитикаРасхождения
		|	И &ПолучитьЗначенияРеквизитовДопАналитики";
		
	Запрос.УстановитьПараметр("ПериодСценария", Объект.ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Запрос.УстановитьПараметр("Этап", Объект.Этап);
	Запрос.УстановитьПараметр("ДопАналитикаРасхождения", Объект.ДопАналитикаРасхождения);
	Запрос.УстановитьПараметр("ПолучитьЗначенияРеквизитовДопАналитики", Объект.РазделВГО.ЕстьДопАналитики);
	Запрос.УстановитьПараметр("ИсточникДанных", Объект.ИсточникДанных);
	Запрос.УстановитьПараметр("ГруппаРаскрытияВГО", Объект.РазделВГО.ГруппаРаскрытия);
	
	мРезультатЗапроса = Запрос.ВыполнитьПакет();

	ТЗ_СопоставленияРеквизитов = мРезультатЗапроса[0].Выгрузить();
	ТЗ_СопоставленияРеквизитов.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число")); // номер аналитики
	Для Каждого СтрокаСопоставления_ Из ТЗ_СопоставленияРеквизитов Цикл
		Если СтрокаСопоставления_.ЭтоАналитика Тогда
			Попытка
				ПолеЧисло_ = Число(Сред(СтрокаСопоставления_.Поле,10,1));
				СтрокаСопоставления_.НомерАналитики = ПолеЧисло_;
			Исключение
				ПолеЧисло_ = 0;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ТЗ_ЗначенияРеквизитовДопАналитик = мРезультатЗапроса[1].Выгрузить();
	
	флПланСчетовУказан = ЗначениеЗаполнено(Объект.ПланСчетов);
	
	Для Ном_ = 1 По ЧислоАналитик Цикл
		ИмяАналитики = "Аналитика" + Ном_;
		
		НоваяСтрока = Объект.Аналитики.Добавить();
		НоваяСтрока.Имя = ИмяАналитики;
		НоваяСтрока.ВидАналитики = ГруппаАналитик["ВидАналитики"+Ном_];
		
		СопоставлениеРеквизитов = ТЗ_СопоставленияРеквизитов.Найти(ИмяАналитики, "Поле");
		
		Если СопоставлениеРеквизитов = Неопределено Тогда
			// аналитика источника данных косвенно связана с аналитикой сверки
			НоваяСтрока.ИмяВГО = "-";
			
			//
			мАналитикиСверки = ТЗ_СопоставленияРеквизитов.НайтиСтроки(Новый Структура("НомерАналитики", Ном_));
			Для Каждого АналитикаОграничение Из мАналитикиСверки Цикл
				ЗначениеОграничения_ = ЗначениеСверки(АналитикаОграничение.ВидАналитики, АналитикаОграничение.ТипАналитикиДляЭлиминации,
					АналитикаОграничение.Имя, АналитикаОграничение.ЭтоДопАналитика, ТЗ_ЗначенияРеквизитовДопАналитик);
				Если ЗначениеЗаполнено(ЗначениеОграничения_) Тогда
					// Заполним значение аналитики, если это контрагент	
					Если АналитикаОграничение.ТипАналитикиДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Контрагент Тогда
						ТипЗначения = НоваяСтрока.ВидАналитики.ТипЗначения.Типы()[0];
						Если ТипЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
							НоваяСтрока.Значение = ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(Объект.Контрагент);
						Иначе
							НоваяСтрока.Значение = Объект.Контрагент;
						КонецЕсли;
					
					КонецЕсли;	
						
					НоваяСтрокаОграничения = Объект.ОграниченияЗначенийАналитик.Добавить();
					НоваяСтрокаОграничения.Имя = ИмяАналитики;
					НоваяСтрокаОграничения.Путь = Сред(АналитикаОграничение.Поле, СтрДлина(ИмяАналитики)+2); // например, "ОрганизационнаяЕдиница", или "ВалютаВзаиморасчетов", или "Владелец.ИНН"
					НоваяСтрокаОграничения.ИмяВГО = АналитикаОграничение.Имя;
					НоваяСтрокаОграничения.Значение = ЗначениеОграничения_;
					НоваяСтрокаОграничения.ТипДляЭлиминации = АналитикаОграничение.ТипАналитикиДляЭлиминации;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			// аналитики ИД и сверки одно и то же значение
			ИмяРеквизитаВГО = СопоставлениеРеквизитов.Имя;
			НоваяСтрока.ИмяВГО = ИмяРеквизитаВГО;
			НоваяСтрока.ТипДляЭлиминации = СопоставлениеРеквизитов.ТипАналитикиДляЭлиминации;
			
			НоваяСтрока.Значение = ЗначениеСверки(НоваяСтрока.ВидАналитики, НоваяСтрока.ТипДляЭлиминации, ИмяРеквизитаВГО, СопоставлениеРеквизитов.ЭтоДопАналитика, ТЗ_ЗначенияРеквизитовДопАналитик);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Значение) Тогда
				// добавим ограничение на значение
				НоваяСтрокаОграничения = Объект.ОграниченияЗначенийАналитик.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОграничения, НоваяСтрока);
				НоваяСтрокаОграничения.Путь = Сред(СопоставлениеРеквизитов.Поле, СтрДлина(ИмяАналитики)+2);
				Если НоваяСтрокаОграничения.Путь = "" Тогда
					НоваяСтрокаОграничения.Путь = "Ссылка";
				КонецЕсли;
			ИначеЕсли флПланСчетовУказан И СписокТиповАналитикСчетов.НайтиПоЗначению(НоваяСтрока.ТипДляЭлиминации) <> Неопределено Тогда
					// пробуем установить ограничение на владельца плана счетов
					НоваяСтрокаОграничения = Объект.ОграниченияЗначенийАналитик.Добавить();
					НоваяСтрокаОграничения.Имя = ИмяАналитики;
					НоваяСтрокаОграничения.Путь = "Владелец";
					НоваяСтрокаОграничения.ИмяВГО = ИмяРеквизитаВГО;
					НоваяСтрокаОграничения.Значение = Объект.ПланСчетов;
					НоваяСтрокаОграничения.ТипДляЭлиминации = НоваяСтрока.ТипДляЭлиминации;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	мОписаниеПоказателей = ТЗ_СопоставленияРеквизитов.НайтиСтроки(Новый Структура("ЭтоПоказатель", Истина));
	флЕстьПоказательСверки = ЛОжь;
	КоэффициентСтороны = ПолучитьКоэффициентСтороныСверки();

	Для каждого ОписаниеПоказателя Из мОписаниеПоказателей Цикл
		Если ОписаниеПоказателя.ЕстьОписаниеПоказателя Тогда
			Если ОписаниеПоказателя.ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				Продолжить;
			КонецЕсли;
			Если ОписаниеПоказателя.ТипДляЭлиминации = Перечисления.ТипПоказателяЭлиминации.ПоказательСверки Тогда
				Если флЕстьПоказательСверки Тогда // должен быть один показатель сверки
					Продолжить;
				КонецЕсли;
				флЕстьПоказательСверки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Объект.Ресурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеПоказателя);
		
		Если флЕстьПоказательСверки Тогда
			
			НоваяСтрока.Сумма 						= КоэффициентСтороны * Объект.МаксимальнаяСумма;
			НоваяСтрока.МаксимальноеЗначение 		= КоэффициентСтороны * Объект.МаксимальнаяСумма;
			НоваяСтрока.МаксимальноеЗначениеГр 		= КоэффициентСтороны * Объект.МаксимальнаяСуммаГр;
			НоваяСтрока.ПоказательУрегулирования 	= Истина;
			
			Объект.СуммаУрегулирования 				= Объект.МаксимальнаяСумма;
			Объект.СуммаУрегулированияГр 			= Объект.МаксимальнаяСуммаГр;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МожноСформироватьПроводки() Тогда
		ЗаполнитьПроводкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоэффициентСтороныСверки()
	
	КоэффициентСтороны = 1;
	Если Объект.СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор Тогда
		
		ИсточникиРаздела = Объект.РазделВГО.ИсточникиДанных;
		Отбор = Новый Структура("СпособОпределенияНаправленияУчета", Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации);
		ПоЗнакуОперации = (ИсточникиРаздела.Количество() или ИсточникиРаздела.НайтиСтроки(Отбор).Количество());
		
		Если ПоЗнакуОперации Тогда
			КоэффициентСтороны = -1;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат КоэффициентСтороны;

КонецФункции

// Добавляем субконто счета в таблицу значений
// Параметры:
//		ТабЗнач - таблица значений в которую добавлется субконто счета.
//		СчетНСБУ - ссылка на справочник "СчетаБУ". Счет для которого добавляется перечень субконто.
//
&НаСервере
Процедура ДобавитьСчетКТаблице(ТипДляЭлиминации, СчетНСБУ, ЗначенияПоУмолчанию)
	
	Если НЕ ЗначениеЗаполнено(ТипДляЭлиминации) Тогда
		Возврат;
	КонецЕсли;
	
	ТабЗнач = Объект.ЗначенияСубконто;
	
	ТЗСтарыеСтроки = ТабЗнач.Выгрузить(Новый Структура("ТипДляЭлиминации, СчетНСБУ", ТипДляЭлиминации, СчетНСБУ));
	
	УдалитьСчетИзТаблицы(ТабЗнач, ТипДляЭлиминации);
	
	Если НЕ ЗначениеЗаполнено(СчетНСБУ) Тогда
		Возврат;
	КонецЕсли;
	
	РазделВГО = ЗначенияПоУмолчанию.РазделВГО;
	ЭтоКредитор = ЗначенияПоУмолчанию.ЭтоКредитор;
	
	// заполним счет
	ШаблонСверки = РазделВГО.Владелец;
	
	ЭтоОборот = (РазделВГО.ВидЗначения = Перечисления.ВидыЗначенийВГО.ОборотЗаПериод);
	
	ИсточникДанных = Неопределено;
	Если НЕ РазделВГО.Владелец.БезТрансляции Тогда
		Трансляция = ШаблонСверки.ТрансляцияПлановСчетовНаМСФОДляЭлиминации.Найти(СчетНСБУ.Владелец, "ПланСчетовИсточник");
		Если Трансляция = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Трансляция = Трансляция.ШаблонТрансляцииСчетов;
		
		СчетМСФО = ЭлиминацияВГОУХ.ТранслироватьСчет(Трансляция, СчетНСБУ, Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели,
			ЭтоКредитор, // У кредитора проводка Дт* Кт00, т.е. нас интересует счет Дт. И наоборот, у дебитора - счет Кт.
			ЭтоОборот, ИсточникДанных);
	Иначе
		СчетМСФО = СчетНСБУ;
	КонецЕсли;
	
	ТЧВидыСубконто = СчетМСФО.ВидыСубконто;
	Для каждого СтрокаСубконто Из ТЧВидыСубконто Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСубконто.ВидСубконтоСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияСубконто = СтрокаСубконто.ВидСубконтоСсылка.ТипЗначения;
		НоваяСтрока = ТабЗнач.Добавить();
		НоваяСтрока.ТипДляЭлиминации = ТипДляЭлиминации;
		НоваяСтрока.СчетНСБУ = СчетНСБУ;
		НоваяСтрока.СчетМСФО = СчетМСФО;
		НоваяСтрока.ВидСубконто = СтрокаСубконто.ВидСубконто;
		НоваяСтрока.ВидСубконтоСсылка = СтрокаСубконто.ВидСубконтоСсылка;
		НоваяСтрока.ПроизвольныйКлассификатор = ТипЗначенияСубконто.СодержитТип(Тип("СправочникСсылка.Субконто"))
													ИЛИ ТипЗначенияСубконто.СодержитТип(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ"));
		НоваяСтрока.НомерСубконто = СтрокаСубконто.Номер;
		НоваяСтрока.Обязательный = Истина;
		
		// ищем аналогичное значение в старой таблице
		СтрокаЗначение_ = ТЗСтарыеСтроки.Найти(СтрокаСубконто.ВидСубконто, "ВидСубконто");
		Если СтрокаЗначение_ <> Неопределено Тогда
			НоваяСтрока.ЗначениеСубконто = СтрокаЗначение_.ЗначениеСубконто;
			
		Иначе
			// пробуем подобрать значение по умолчанию
			Для каждого ЗначениеПоУмолчанию_ Из ЗначенияПоУмолчанию Цикл
				Значение_ = ЗначениеПоУмолчанию_.Значение;
				Если ТипЗначенияСубконто.СодержитТип(ТипЗнч(Значение_)) Тогда
					НоваяСтрока.ЗначениеСубконто = Значение_;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСчетИзТаблицы(ТабЗнач, ТипДляЭлиминации)
	
	мСтрок = ТабЗнач.НайтиСтроки(Новый Структура("ТипДляЭлиминации", ТипДляЭлиминации));
	Для Каждого СтрокаТабЧасти Из мСтрок Цикл
		ТабЗнач.Удалить(СтрокаТабЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыАналитики(ВидАналитики)
	Возврат ВидАналитики.ТипЗначения.Типы();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяТипаПоТипуЗначения(ТипЗначения)
	
	Попытка
		МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипЗначения);
		ПолноеИмя = МетаданныеАналитики.ПолноеИмя();
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат ПолноеИмя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТиповСодержитТипДанных(ТипЗначения, ТипДанных)
	
	Если НЕ ЗначениеЗаполнено(ТипЗначения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ТипДанных) = Тип("Массив") Тогда
		Для Каждого ТипИзМассива Из ТипДанных Цикл
			Если ОписаниеТиповСодержитТипДанных(ТипЗначения, ТипИзМассива) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат ТипЗначения.СодержитТип(ТипДанных);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипыВладельцевЭлементаПВХ(ВидСубконто)
	
	мВладельцев = Новый Массив;
	
	ТипыЗначения = ВидСубконто.ТипЗначения.Типы();
	Для Каждого ТипЗначения Из ТипыЗначения Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначения);
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			Для Каждого Владелец Из МетаданныеТипа.Владельцы Цикл
				
				Если Метаданные.Справочники.Содержит(Владелец) Тогда
					мВладельцев.Добавить(Тип("СправочникСсылка." + Владелец.Имя));
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат мВладельцев;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиЭлементаФормыЗначенияСубконто(Знач Объект, ИдентификаторСтроки)
	
	Параметры = Новый Структура;
	
	ТекущиеДанные=Объект.ЗначенияСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидСубконтоСсылка) Тогда
		СвязиПараметровВыбора = Новый Соответствие;
		ПараметрыВыбора = Новый Соответствие;
		
		ТипЗначенияСубконто = ТекущиеДанные.ВидСубконтоСсылка.ТипЗначения;
		мВладельцев = ПолучитьТипыВладельцевЭлементаПВХ(ТекущиеДанные.ВидСубконтоСсылка);
		
		Если ТипЗначенияСубконто.СодержитТип(Тип("СправочникСсылка.Субконто"))
			ИЛИ ТипЗначенияСубконто.СодержитТип(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) Тогда
			
			СвязиПараметровВыбора.Вставить("Отбор.Владелец",
					"Элементы.ЗначенияСубконто.ТекущиеДанные.ВидСубконтоСсылка");
			
		ИначеЕсли мВладельцев.Количество() > 0 Тогда
			// Установим поле владельца по значению предыдущих субконто счета
			флОтборУстановлен = Ложь;
			// Номер строки первого субконто
			НомерСтрокиНачала = ТекущиеДанные.НомерСтроки - ТекущиеДанные.НомерСубконто + 1;  
			 // Номер строки предыдущего субконто
			НомерСтрокиКонца = ТекущиеДанные.НомерСтроки-1;
			Если НомерСтрокиНачала > 0 Тогда
				Для НомерСтроки = НомерСтрокиНачала По НомерСтрокиКонца Цикл
					мСтроки = Объект.ЗначенияСубконто.НайтиСтроки(Новый Структура("НомерСтроки", НомерСтроки));
					Если мСтроки.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					ВерхняяСтрокаСубконто = мСтроки[0];
					Если ЗначениеЗаполнено(ВерхняяСтрокаСубконто.ЗначениеСубконто)
						 И ЗначениеЗаполнено(ВерхняяСтрокаСубконто.ВидСубконтоСсылка)
						 И ОписаниеТиповСодержитТипДанных(
						 		ВерхняяСтрокаСубконто.ВидСубконтоСсылка.ТипЗначения,
								мВладельцев) Тогда
						
						ПараметрыВыбора.Вставить("Отбор.Владелец", ВерхняяСтрокаСубконто.ЗначениеСубконто);
						флОтборУстановлен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ флОтборУстановлен Тогда
				// Установим поле владельца по значению реквизитов документа
				ТипыРеквизитовОбъекта = ОперативноеПланированиеФормыУХ.ТипыРеквизитовОбъекта(
											Метаданные.Документы.УрегулированиеРасхожденияВГО);
				Для Каждого ТипВладельца ИЗ мВладельцев Цикл
					РеквизитОбъектаПоТипу = ТипыРеквизитовОбъекта.Получить(ТипВладельца);
					Если РеквизитОбъектаПоТипу <> Неопределено Тогда
						ПараметрыВыбора.Вставить("Отбор.Владелец", ВерхняяСтрокаСубконто.ЗначениеСубконто);
						флОтборУстановлен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Параметры.Вставить("ВыбиратьТип", ТипЗначенияСубконто.Типы().Количество() > 1);
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти