#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если ОбменДанными.Загрузка Тогда
	    Возврат;
	КонецЕсли;
	
	Попытка
		
		СтруктураРасхождения = Новый Структура;
		СтруктураРасхождения.Вставить("Сценарий", Сценарий);
		СтруктураРасхождения.Вставить("ПериодСценария", ПериодСценария);
		СтруктураРасхождения.Вставить("Этап", Этап);
		СтруктураРасхождения.Вставить("Отправитель", Отправитель);
		СтруктураРасхождения.Вставить("Получатель", Получатель);
		СтруктураРасхождения.Вставить("РазделВГО", РазделВГО);
		СтруктураРасхождения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		СтруктураРасхождения.Вставить("СторонаСверки", СторонаУрегулирования);
		СтруктураРасхождения.Вставить("ДопАналитикаРасхождения", ДопАналитикаРасхождения);
		СтруктураРасхождения.Вставить("Ответственный", Ответственный);
		СтруктураРасхождения.Вставить("ПричинаРасхождения", ПричинаРасхождения);
		
		СообщениеОшибки = "";
		СверкаВГОУХ.УстановитьПричинуРасхождения(СтруктураРасхождения, СообщениеОшибки);
		Если СообщениеОшибки <> "" Тогда
			ВызватьИсключение СообщениеОшибки;
		КонецЕсли;
		
		// Трансформационная корректировка для корректировки ФСД
		Если ДополнительныеКорректировки.Количество() > 0 Тогда	
			мТрансКорр = Документы.ТрансформационнаяКорректировка.ПолучитьТрансКорр(Ссылка);
			Если мТрансКорр.Количество() > 0 Тогда
				ТрансформационнаяКорректировка = мТрансКорр[0];
				
			Иначе
				ТрансформационнаяКорректировка = Неопределено;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТрансформационнаяКорректировка) Тогда
				ДокТрансКорр = Документы.ТрансформационнаяКорректировка.СоздатьДокумент();
			Иначе
				ДокТрансКорр = ТрансформационнаяКорректировка.ПолучитьОбъект();
				Если ДокТрансКорр.ПометкаУдаления Тогда
					ДокТрансКорр.ПометкаУдаления = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Заполняем документ объект
			ДокТрансКорр.ИсходныйДокумент = Ссылка;
			ДокТрансКорр.РасчетДатыОтраженияВУчете = Перечисления.СпособыРасчетаДатыОтраженияВУчете.ПроизвольнаяДата;
			ДокТрансКорр.Дата = Дата;
			ДокТрансКорр.ДатаОтраженияВУчете = Дата;
			ДокТрансКорр.ПериодОтчета = ПериодСценария;
			ДокТрансКорр.Сценарий = Сценарий;
			ДокТрансКорр.ВидОперации = Справочники.ВидыОпераций.УрегулированиеРасхожденияВГО;
			ДокТрансКорр.ОсновнаяВалюта = ВалютаВзаиморасчетов;
			ДокТрансКорр.РегистрБухгалтерии = Справочники.РегистрыБухгалтерииБД.ПолучитьПоПлануСчетовБД(ПланСчетов);
			ДокТрансКорр.Организация = Организация;
			ДокТрансКорр.ДвиженияПоРегиструБухгалтерии = Ложь;
			ДокТрансКорр.КорректировкиЗначенийПоказателей = Истина;
			ДокТрансКорр.ИсходныйДокумент = Ссылка;
			ДокТрансКорр.ПланСчетов = ПланСчетов;
			
			// Заполняем табличные части
			ТЗДопКорр = ДополнительныеКорректировки.Выгрузить();
			ДокТрансКорр.ДополнительныеКорректировки.Загрузить(ТЗДопКорр);
			Если ТЗДопКорр.Количество() > 0 Тогда
				ДокТрансКорр.ИспользуемаяИБ = ТЗДопКорр[0].ЭкземплярОтчета.ИспользуемаяИБ;
			КонецЕсли;
			
			// Записываем документ объект
			ДокТрансКорр.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Если НЕ ЗначениеЗаполнено(ТрансформационнаяКорректировка) Тогда
				ТрансформационнаяКорректировка = ДокТрансКорр.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		// сформируем проводки начислений
		Если Проводки.Количество() > 0 Тогда
			Документы.УрегулированиеРасхожденияВГО.СформироватьТК(Ссылка, Отказ);
		КонецЕсли;
		
		// пересчитаем расхождения
		ОтборДанных = Новый Структура;
		мДокументы = Новый Массив;
		ТекстОшибки = "";
		
		ОтборДанных.Вставить("ВидОтчета", ИсточникДанных.ГруппаРаскрытияОтбор.Владелец);
		ОтборДанных.Вставить("РазделВГО", РазделВГО);
		ОтборДанных.Вставить("Отправитель", Отправитель);
		ОтборДанных.Вставить("Получатель", Получатель);
		ОтборДанных.Вставить("ПериодСверки", ПериодСценария);
		ОтборДанных.Вставить("Сценарий", Сценарий);
		ОтборДанных.Вставить("Этап", Этап);
		
		СверкаВГОУХ.УбедитьсяЧтоРасхожденияРасчитаны(ОтборДанных, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ВызватьИсключение ТекстОшибки; 
		КонецЕсли;
		
		Если Константы.ОповеститьОбУрегулированииРасхожденияВГО.Получить() Тогда
			// Отправим сообщение об урегулировании отвественным лицам
			мОрганизаций = Новый Массив;
			мОрганизаций.Добавить(Отправитель);
			мОрганизаций.Добавить(Получатель);
			ТаблицаАдресов = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(Сценарий, ПериодСценария, мОрганизаций, Ложь, Истина);
			ТаблицаАдресов.Свернуть("Email");
			Если ТаблицаАдресов.Количество() > 0 Тогда
				Для Каждого Строка Из ТаблицаАдресов Цикл
					
					Письмо = Новый ИнтернетПочтовоеСообщение;
					Письмо.Получатели.Добавить(Строка.Email);
					
					ШаблонПисьма =
					НСтр("ru = 'Сценарий: %1. <BR>
					|ПериодСценария: %2. <BR>
					|Этап: %3. <BR>
					|Отправитель: %4. <BR>
					|Получатель: %5. <BR>
					|Урегулировал: %6. <BR>
					|Раздел сверки ВГО: %7. <BR>
					|Валюта взаиморасчетов: %8. <BR>
					|'");
										
					ТекстПисьма = СтрШаблон(
										ШаблонПисьма, 
										Сценарий, 
										ПериодСценария, 
										Этап, 
										Отправитель, 
										Получатель, 
										СторонаУрегулирования,
										РазделВГО,
										ВалютаВзаиморасчетов
									);
					
					Если ЗначениеЗаполнено(ДопАналитикаРасхождения) Тогда
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Доп. аналитика: '") + ДопАналитикаРасхождения +". <BR>" + Символы.ПС;
					КонецЕсли;
					Если Принудительно Тогда
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Принудительно. <BR>'") + Символы.ПС;
					КонецЕсли;
					Если не ЗнакУрегулирования Тогда
						СимволЗнак = "-";
					Иначе
						СимволЗнак = "";
					КонецЕсли; 
					
					ШаблонТеста = 
					НСтр("ru = 'Ответственный: %1. <BR>
					|Сумма урегулирования в валюте взаиморасчетов: %2. <BR>'");
					ТекстПисьма = ТекстПисьма + СтрШаблон(ШаблонТеста, Ответственный, СуммаУрегулирования);
						
					Письмо.Тексты.Добавить(
						УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(
							СтрШаблон(НСтр("ru = 'Введено урегулирование №%1 от %2.'"), Номер, Дата), ТекстПисьма),
						ТипТекстаПочтовогоСообщения.HTML);
				
					Письмо.Тема = СтрШаблон(НСтр("ru = 'Введено урегулирование № %1 от %2 для организаций %3 и %4.'"), Номер, Дата, Отправитель, Получатель);
				
					УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Ссылка);
					Письмо = Неопределено;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// проверка завершения сверки по паре организаций
		СверкаВГОУХ.ПроверкаЗавершенияСверки(ПериодСценария, Сценарий, Этап, Отправитель, Получатель);
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(), Ссылка, ТекстОшибки);
			
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
	КонецПопытки;
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ТрансформационныеКорректировкиУХ.ОчиститьДвиженияТрансформационнойКорректировкиПоСсылке(Ссылка);
		
		// отмена проведения НачисленияМСФО
		мНачисленийОперацияМСФО = Документы.НачислениеОперацийМСФО.ПолучитьПодчиненные(Ссылка); //, Новый Структура("Проведен", Истина));
		Для Каждого ДокНачисленияМСФО Из мНачисленийОперацияМСФО Цикл
			НачислениеОбъект = ДокНачисленияМСФО.ПолучитьОбъект();
			НачислениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦИкла;
		
		// пересчитаем расхождения
		ОтборДанных = Новый Структура;
		мДокументы = Новый Массив;
		ТекстОшибки = "";
		
		ОтборДанных.Вставить("Отправитель", Отправитель);
		ОтборДанных.Вставить("Получатель", Получатель);
		ОтборДанных.Вставить("ПериодСверки", ПериодСценария);
		ОтборДанных.Вставить("Сценарий", Сценарий);
		ОтборДанных.Вставить("Этап", Этап);
		
		СверкаВГОУХ.УбедитьсяЧтоРасхожденияРасчитаны(ОтборДанных, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ВызватьИсключение ТекстОшибки; 
		КонецЕсли;
		
		Если Константы.ОповеститьПриОтменеУрегулированияРасхожденияВГО.Получить() Тогда
			// Отправим сообщение об отмене урегулирования отвественным лицам
			мОрганизаций = Новый Массив;
			мОрганизаций.Добавить(Отправитель);
			мОрганизаций.Добавить(Получатель);
			ТаблицаАдресов = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(Сценарий, ПериодСценария, мОрганизаций, Ложь, Истина);
			ТаблицаАдресов.Свернуть("Email");
			Если ТаблицаАдресов.Количество() > 0 Тогда
				Для Каждого Строка Из ТаблицаАдресов Цикл
					Письмо = Новый ИнтернетПочтовоеСообщение;
					Письмо.Получатели.Добавить(Строка.Email);
					
					ТекстПисьма = 
					СтрШаблон(
					НСтр("ru = 'Сценарий: %1. <BR>
					|ПериодСценария: %2. <BR>
					|Этап: %3. <BR>
					|Отправитель: %4. <BR>
					|Получатель: %5. <BR>
					|Урегулировал: %6. <BR>
					|Раздел сверки ВГО: %7. <BR>
					|Валюта взаиморасчетов: %8. <BR>
					|'"), Сценарий, ПериодСценария, Этап, Отправитель, Получатель, СторонаУрегулирования, РазделВГО, ВалютаВзаиморасчетов);
					
					Если ЗначениеЗаполнено(ДопАналитикаРасхождения) Тогда
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Доп. аналитика: '") + ДопАналитикаРасхождения +". <BR>" + Символы.ПС;
					КонецЕсли;
					
					Если Принудительно Тогда
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Принудительно. <BR>'") + Символы.ПС;
					КонецЕсли;
					
					Если не ЗнакУрегулирования Тогда
						СимволЗнак = "-";
					Иначе
						СимволЗнак = "";
					КонецЕсли; 
					
					ТекстПисьма = ТекстПисьма + СтрШаблон(НСтр(
					"ru = 'Ответственный: %1. <BR>
					|Сумма урегулирования в валюте взаиморасчетов: %2. <BR>'"), Ответственный, СуммаУрегулирования);
					
					ЗаголовокПисьма = СтрШаблон("Отменено урегулирование №%1 от %2.", Номер, Дата);					
					Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ЗаголовокПисьма, ТекстПисьма), ТипТекстаПочтовогоСообщения.HTML);				
					Письмо.Тема = СтрШаблон(НСтр("ru = 'Отменено урегулирование № %1 от %2 для организаций %3 и %4.'"), Номер, Дата, Отправитель, Получатель);
				
					УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Этап);
					Письмо = Неопределено;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(), Ссылка, ОписаниеОшибки());
			
	КонецПопытки;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.ПометкаУдаления = Ложь И ПометкаУдаления = Истина Тогда
		// транс. корректировки
		ТрансформационныеКорректировкиУХ.ОчиститьДвиженияТрансформационнойКорректировкиПоСсылке(Ссылка, Истина); // пометим на удаление документы трасн. корректировок
		
		// отмена проведения НачисленияМСФО
		мНачисленийОперацияМСФО = Документы.НачислениеОперацийМСФО.ПолучитьПодчиненные(Ссылка);
		Для Каждого ДокНачисленияМСФО Из мНачисленийОперацияМСФО Цикл
			НачислениеОбъект = ДокНачисленияМСФО.ПолучитьОбъект();
			НачислениеОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦИкла;
		
	КонеЦесли;
КонецПроцедуры

Функция ПолучитьЭкземплярОтчета()
	
	СостоянияДокумента = Новый Массив;
	СостоянияДокумента.Добавить(Перечисления.СостоянияОтчетов.Возвращен);
	СостоянияДокумента.Добавить(Перечисления.СостоянияОтчетов.Выполняется);
	СостоянияДокумента.Добавить(Перечисления.СостоянияОтчетов.Запланирован);
	СостоянияДокумента.Добавить(Перечисления.СостоянияОтчетов.Подготовлен);
	СостоянияДокумента.Добавить(Перечисления.СостоянияОтчетов.Утвержден);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ИскомыйНастраиваемыйОтчет
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НастраиваемыйОтчет.Сценарий = &Сценарий
		|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
		|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
		|	И НЕ НастраиваемыйОтчет.ПометкаУдаления
		|	И НастраиваемыйОтчет.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИскомыйНастраиваемыйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	ИскомыйНастраиваемыйОтчет КАК ИскомыйНастраиваемыйОтчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, СостояниеОбъекта В (&СостоянияДокумента)) КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО ИскомыйНастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект";
		
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидОтчета", ИсточникДанных.ГруппаРаскрытияОтбор.Владелец);
	Запрос.УстановитьПараметр("СостоянияДокумента", СостоянияДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет табличные части "Проводки", "ДополнительныеКорректировки"
//
// Параметры:
//  флЗаполнитьТолькоКорректировки - Булево - Если Истина, то заполнить только корректировки показателей.
//		Если Ложь, то дополнительно заполнить проводки. По умолчанию Истина.
//  ТипСчетаСписанияРасхождения - ПеречислениеСсылка.ТипыТехническихСчетовДляСверкиЭлиминации -
//		тип счета для определения счета списания расхождений и настроек заполнения его субконто.
//
Процедура ЗаполнитьПроводки(Знач флЗаполнитьТолькоКорректировки=Ложь, Знач ТипСчетаСписанияРасхождения=Неопределено) Экспорт

	ЭкземплярОтчета = ПолучитьЭкземплярОтчета();
	
	Если НЕ ЗначениеЗаполнено(ЭкземплярОтчета) Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Не найден экземпляр отчета
		|Сценарий: %1
		|Период сценария: %2
		|Организация: %3
		|Вид отчета: %4'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(ТекстСообщения, Сценарий, ПериодСценария, Организация, ИсточникДанных.ГруппаРаскрытияОтбор.Владелец);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Подготовим значения аналитик для заполнения
	АналитикиЗаполнения = Новый Структура;
	Для Ном_ = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ИмяАналитики_ = "Аналитика"+Ном_;
		СтрокаАналитики = Аналитики.Найти(ИмяАналитики_,"Имя");
		Если ЗначениеЗаполнено(СтрокаАналитики) Тогда
			АналитикиЗаполнения.Вставить(ИмяАналитики_, СтрокаАналитики.Значение);
		Иначе
			АналитикиЗаполнения.Вставить(ИмяАналитики_, Неопределено);
		КонецЕсли;
	КонецЦикла;
	АналитикиЗаполнения.Вставить("ЭкземплярОтчета", ЭкземплярОтчета);
	АналитикиЗаполнения.Вставить("Раскрытие", Истина);
	АналитикиЗаполнения.Вставить("Валюта", ВалютаВзаиморасчетов);
	АналитикиЗаполнения.Вставить("АналитикаВалюта", ВалютаВзаиморасчетов);
	
	// Заполним дополнительные корректировки экземпляров отчетов с иходными данными ВГО
	ДополнительныеКорректировки.Очистить();
	ДЛя Каждого Ресурс_ Из Ресурсы Цикл
		ПоказательРесурса = Ресурс_.Показатель;
		Если Ресурс_.Сумма = 0 ИЛИ НЕ ЗначениеЗаполнено(ПоказательРесурса) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока_ = ДополнительныеКорректировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока_, АналитикиЗаполнения);
		НоваяСтрока_.Показатель = Ресурс_.Показатель;
		НоваяСтрока_.Значение = Ресурс_.Сумма * ?(ЗнакУрегулирования, 1, -1);
		НоваяСтрока_.ЗначениеВалюта = Ресурс_.Сумма * ?(ЗнакУрегулирования, 1, -1);
	КонецЦикла;

	Если НЕ флЗаполнитьТолькоКорректировки Тогда
		ЗаполнитьПроводкиУрегулированияВДокументе(ТипСчетаСписанияРасхождения);
	КонецЕсли;
	
	ПроводкиУжеЗаполненыАвтоматически = Истина;
	
КонецПроцедуры

// Заполнить ТЧ Проводки на основании документа урегулирования.
Процедура ЗаполнитьПроводкиУрегулированияВДокументе(Знач ТипСчетаСписанияРасхождения)
	
	Перем ЗначениеСубконто_, ЗначенияСубконтоТехСчет, ИмяКурса, КурсВалютыВзаиморасчетов, КурсГр, мСтрокиЗначенийСубконто, НоваяСтрока, ОписаниеТехСчета, ПрефиксОснСчета, ПрефиксТехСчета, СпособЭлиминации, СтрокаЗначенияСубконто_, СтрокаКурсаВалюты, СтрокаРесурс, СтрокаСчетУчета, СчетМСФО, СчетНСБУ, ТаблицаКурсов, ТехСчет, ТипДляЭлиминацииСчетУчета, ШаблонСверкиВГО;
	
	// Подготовим курсы
	Если РазделВГО.ВидЗначения = Перечисления.ВидыЗначенийВГО.ОборотЗаПериод Тогда
		ИмяКурса = "СреднийКурсЗаПериод";
	ИначеЕсли РазделВГО.ВидЗначения = Перечисления.ВидыЗначенийВГО.СальдоКонечное Тогда
		ИмяКурса = "КурсНаКонецПериода";
	ИначеЕсли РазделВГО.ВидЗначения = Перечисления.ВидыЗначенийВГО.СальдоНачальное Тогда
		ИмяКурса = "КурсНаНачалоПериода";
	КонецЕсли;
	
	ТаблицаКурсов = ОбщегоНазначенияСерверУХ.ЗаполнитьПериодическиеКурсыВалют(ПериодСценария, Сценарий);
	СтрокаКурсаВалюты = ТаблицаКурсов.Найти(ВалютаГруппы, "Валюта");
	Если СтрокаКурсаВалюты = Неопределено Тогда
		КурсГр = 1;
	иначе
		КурсГр = СтрокаКурсаВалюты[ИмяКурса] / СтрокаКурсаВалюты.Кратность;
	КонецЕсли;
	
	СтрокаКурсаВалюты = ТаблицаКурсов.Найти(ВалютаВзаиморасчетов, "Валюта");
	Если СтрокаКурсаВалюты = Неопределено Тогда
		КурсВалютыВзаиморасчетов = 1;
	иначе
		КурсВалютыВзаиморасчетов = СтрокаКурсаВалюты[ИмяКурса] / СтрокаКурсаВалюты.Кратность;
	КонецЕсли;
	
	// Заполним проводки для корректировки ОСВ организации
	Проводки.Очистить();
	
	ШаблонСверкиВГО = РазделВГО.Владелец;
	
	// Подготовим заполнение тех счета и значения его субконто
	Если Не ЗначениеЗаполнено(ТипСчетаСписанияРасхождения) Тогда
		ТипСчетаСписанияРасхождения = Перечисления.ТипыТехническихСчетовДляСверкиЭлиминации.СчетУрегулирования;
	КонецЕсли;
	ОписаниеТехСчета = Справочники.ШаблоныСверкиВГО.ПолучитьОписаниеТехническогоСчетаУрегулирования(
							ШаблонСверкиВГО, ТипСчетаСписанияРасхождения);
	ТехСчет = ОписаниеТехСчета.Счет;
	ЗначенияСубконтоТехСчет = ЭлиминацияВГОУХ.ПолучитьЗначенияСубконтоТехСчета(ОписаниеТехСчета, ЭтотОбъект);
	
	СпособЭлиминации = РазделВГО.СпособЭлиминации;
	Если СпособЭлиминации = Перечисления.СпособыЭлиминации.НеЭлиминировать ИЛИ
		СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов Тогда
		// не делаем проводки
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов Тогда
		// две проводки: "СчетУчетаВыручки", "СчетУчетаСебестоимости"
		// первая проводка: основной счет "СчетУчета"
		ТипДляЭлиминацииСчетУчета = Перечисления.ТипыАналитикЭлиминации.СчетУчета;
		СтрокаСчетУчета = Аналитики.Найти(ТипДляЭлиминацииСчетУчета, "ТипДляЭлиминации");
		СтрокаРесурс = Ресурсы.Найти(Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, "ТипДляЭлиминации");
		
		Если СтрокаСчетУчета <> Неопределено И СтрокаРесурс <> Неопределено И
			ЗначениеЗаполнено(СтрокаСчетУчета.Значение) И ЗначениеЗаполнено(СтрокаРесурс.Сумма <> 0) Тогда
			
			СчетНСБУ = СтрокаСчетУчета.Значение;
			мСтрокиЗначенийСубконто = ЗначенияСубконто.НайтиСтроки(Новый Структура("ТипДляЭлиминации, СчетНСБУ", ТипДляЭлиминацииСчетУчета, СчетНСБУ));
			
			Если РазделВГО.Владелец.БезТрансляции Тогда
				СчетМСФО = СчетНСБУ;
				
			Иначе
				Если мСтрокиЗначенийСубконто.Количество() > 0 Тогда
					СчетМСФО = мСтрокиЗначенийСубконто[0].СчетМСФО;
				Иначе
					СчетМСФО = Справочники.СчетаБД.ПустаяСсылка();
				КонецЕсли;
			КонеЦЕсли;
			
			НоваяСтрока = Проводки.Добавить();
			НоваяСтрока.Значение = ?(ЗнакУрегулирования, 1, -1) * СтрокаРесурс.Сумма * КурсВалютыВзаиморасчетов / КурсГр; // пересчет в валюту группы
			НоваяСтрока.Комментарий = НСтр("ru = 'Проводка корректировки по счету выручки/затрат'");
			НоваяСтрока.НомерПроводки = 1;
			НоваяСтрока.РесурсРегистра = "СуммаВВалютеУчета"; // в валюте группы
			
			Если СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор Тогда
				// Дт*Кт00
				НоваяСтрока.СчетДт = СчетМСФО;
				НоваяСтрока.СчетКт = ТехСчет;
				ПрефиксТехСчета = "Кт";
				ПрефиксОснСчета = "Дт";
			Иначе
				// Дт00Кт*
				НоваяСтрока.СчетДт = ТехСчет;
				НоваяСтрока.СчетКт = СчетМСФО;
				ПрефиксТехСчета = "Дт";
				ПрефиксОснСчета = "Кт";
			КонецЕсли;
			
			// Заполнение значений субконто основного счета
			ДЛя Каждого СтрокаЗначенияСубконто_ Из мСтрокиЗначенийСубконто Цикл
				ЗначениеСубконто_ = СтрокаЗначенияСубконто_.ЗначениеСубконто;
				Если ЗначениеЗаполнено(ЗначениеСубконто_) Тогда
					НоваяСтрока["Субконто"+ПрефиксОснСчета+СтрокаЗначенияСубконто_.НомерСубконто] = ЗначениеСубконто_;
				КонецЕсли;
			КонецЦикла;
			
			// Заполнение значений субконто технического счета
			ЭлиминацияВГОУХ.ЗаполнитьЗначенияСубконтоТехническогоСчета(НоваяСтрока, ПрефиксТехСчета, ЗначенияСубконтоТехСчет);
			
		КонецЕсли;
		
		// вторая проводка: себестоимость
		// одна проводка основной счет "СчетУчета"
		ТипДляЭлиминацииСчетУчета = Перечисления.ТипыАналитикЭлиминации.СчетУчетаСебестоимости;
		СтрокаСчетУчета = Аналитики.Найти(ТипДляЭлиминацииСчетУчета, "ТипДляЭлиминации");
		СтрокаРесурс = Ресурсы.Найти(Перечисления.ТипПоказателяЭлиминации.Себестоимость, "ТипДляЭлиминации");
		
		Если СтрокаСчетУчета <> Неопределено И СтрокаРесурс <> Неопределено И
			ЗначениеЗаполнено(СтрокаСчетУчета.Значение) И ЗначениеЗаполнено(СтрокаРесурс.Сумма <> 0) Тогда
			
			СчетНСБУ = СтрокаСчетУчета.Значение;
			
			мСтрокиЗначенийСубконто = ЗначенияСубконто.НайтиСтроки(Новый Структура("ТипДляЭлиминации, СчетНСБУ", ТипДляЭлиминацииСчетУчета, СчетНСБУ));
			
			Если РазделВГО.Владелец.БезТрансляции Тогда
				СчетМСФО = СчетНСБУ;
				
			Иначе
				Если мСтрокиЗначенийСубконто.Количество() > 0 Тогда
					СчетМСФО = мСтрокиЗначенийСубконто[0].СчетМСФО;
				Иначе
					СчетМСФО = Справочники.СчетаБД.ПустаяСсылка();
				КонецЕсли;
			КонеЦЕсли;
			
			НоваяСтрока = Проводки.Добавить();
			НоваяСтрока.Значение = ?(ЗнакУрегулирования, 1, -1) * СтрокаРесурс.Сумма * КурсВалютыВзаиморасчетов / КурсГр; // пересчет в валюту группы
			НоваяСтрока.Комментарий = НСтр("ru = 'Основная проводка урегулирования остатков'");
			НоваяСтрока.НомерПроводки = 1;
			НоваяСтрока.РесурсРегистра = "СуммаВВалютеУчета"; // в валюте группы
			
			Если СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор Тогда
				// Дт*Кт00
				НоваяСтрока.СчетДт = СчетМСФО;
				НоваяСтрока.СчетКт = ТехСчет;
				ПрефиксТехСчета = "Кт";
				ПрефиксОснСчета = "Дт";
			Иначе
				// Дт00Кт*
				НоваяСтрока.СчетДт = ТехСчет;
				НоваяСтрока.СчетКт = СчетМСФО;
				ПрефиксТехСчета = "Дт";
				ПрефиксОснСчета = "Кт";
			КонецЕсли;
			
			// Заполнение значений субконто основного счета
			ДЛя Каждого СтрокаЗначенияСубконто_ Из мСтрокиЗначенийСубконто Цикл
				ЗначениеСубконто_ = СтрокаЗначенияСубконто_.ЗначениеСубконто;
				Если ЗначениеЗаполнено(ЗначениеСубконто_) Тогда
					НоваяСтрока["Субконто"+ПрефиксОснСчета+СтрокаЗначенияСубконто_.НомерСубконто] = ЗначениеСубконто_;
				КонецЕсли;
			КонецЦикла;
			
			// Заполнение значений субконто технического счета
			ЭлиминацияВГОУХ.ЗаполнитьЗначенияСубконтоТехническогоСчета(НоваяСтрока, ПрефиксТехСчета, ЗначенияСубконтоТехСчет);
			
		КонецЕсли;
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияСтатейБаланса Тогда
		// одна проводка основной счет "СчетУчета"
		ТипДляЭлиминацииСчетУчета = Перечисления.ТипыАналитикЭлиминации.СчетУчета;
		СтрокаСчетУчета = Аналитики.Найти(ТипДляЭлиминацииСчетУчета, "ТипДляЭлиминации");
		СтрокаРесурс = Ресурсы.Найти(Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, "ТипДляЭлиминации");
		
		Если СтрокаСчетУчета <> Неопределено И СтрокаРесурс <> Неопределено И
			ЗначениеЗаполнено(СтрокаСчетУчета.Значение) И ЗначениеЗаполнено(СтрокаРесурс.Сумма <> 0) Тогда
			
			СчетНСБУ = СтрокаСчетУчета.Значение;
			
			мСтрокиЗначенийСубконто = ЗначенияСубконто.НайтиСтроки(Новый Структура("ТипДляЭлиминации, СчетНСБУ", ТипДляЭлиминацииСчетУчета, СчетНСБУ));
			
			Если РазделВГО.Владелец.БезТрансляции Тогда
				СчетМСФО = СчетНСБУ;
				
			Иначе
				
				Если мСтрокиЗначенийСубконто.Количество() > 0 Тогда
					СчетМСФО = мСтрокиЗначенийСубконто[0].СчетМСФО;
				Иначе
					СчетМСФО = Справочники.СчетаБД.ПустаяСсылка();
				КонецЕсли;
				
			КонеЦЕсли;
			
			НоваяСтрока = Проводки.Добавить();
			НоваяСтрока.Значение = ?(ЗнакУрегулирования, 1, -1) * СтрокаРесурс.Сумма * КурсВалютыВзаиморасчетов / КурсГр; // пересчет в валюту группы
			НоваяСтрока.Комментарий = НСтр("ru = 'Основная проводка урегулирования остатков'");
			НоваяСтрока.НомерПроводки = 1;
			НоваяСтрока.РесурсРегистра = "СуммаВВалютеУчета"; // в валюте группы
			
			Если СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор Тогда
				// Дт*Кт00
				НоваяСтрока.СчетДт = СчетМСФО;
				НоваяСтрока.СчетКт = ТехСчет;
				ПрефиксТехСчета = "Кт";
				ПрефиксОснСчета = "Дт";
			Иначе
				// Дт00Кт*
				НоваяСтрока.СчетДт = ТехСчет;
				НоваяСтрока.СчетКт = СчетМСФО;
				ПрефиксТехСчета = "Дт";
				ПрефиксОснСчета = "Кт";
			КонецЕсли;
			
			// Заполнение значений субконто основного счета
			ДЛя Каждого СтрокаЗначенияСубконто_ Из мСтрокиЗначенийСубконто Цикл
				ЗначениеСубконто_ = СтрокаЗначенияСубконто_.ЗначениеСубконто;
				Если ЗначениеЗаполнено(ЗначениеСубконто_) Тогда
					НоваяСтрока["Субконто"+ПрефиксОснСчета+СтрокаЗначенияСубконто_.НомерСубконто] = ЗначениеСубконто_;
				КонецЕсли;
			КонецЦикла;
			
			// Заполнение значений субконто технического счета
			ЭлиминацияВГОУХ.ЗаполнитьЗначенияСубконтоТехническогоСчета(НоваяСтрока, ПрефиксТехСчета, ЗначенияСубконтоТехСчет);
			
		КонецЕсли;
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
		// две проводки: "СчетУчетаВыручкиПоступленияАктива", "СчетУчетаСебестоимости"
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияУслуг Тогда
		// одна проводка основной счет "СчетУчетаВыручки"
		ТипДляЭлиминацииСчетУчета = Перечисления.ТипыАналитикЭлиминации.СчетУчета;
		СтрокаСчетУчета = Аналитики.Найти(ТипДляЭлиминацииСчетУчета, "ТипДляЭлиминации");
		СтрокаРесурс = Ресурсы.Найти(Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, "ТипДляЭлиминации");
		
		Если СтрокаСчетУчета <> Неопределено И СтрокаРесурс <> Неопределено И
			ЗначениеЗаполнено(СтрокаСчетУчета.Значение) И ЗначениеЗаполнено(СтрокаРесурс.Сумма <> 0) Тогда
			
			СчетНСБУ = СтрокаСчетУчета.Значение;
			
			мСтрокиЗначенийСубконто = ЗначенияСубконто.НайтиСтроки(Новый Структура("ТипДляЭлиминации, СчетНСБУ", ТипДляЭлиминацииСчетУчета, СчетНСБУ));
			
			Если РазделВГО.Владелец.БезТрансляции Тогда
				СчетМСФО = СчетНСБУ;
				
			Иначе
				Если мСтрокиЗначенийСубконто.Количество() > 0 Тогда
					СчетМСФО = мСтрокиЗначенийСубконто[0].СчетМСФО;
				Иначе
					СчетМСФО = Справочники.СчетаБД.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Проводки.Добавить();
			НоваяСтрока.Значение = ?(ЗнакУрегулирования, 1, -1) * СтрокаРесурс.Сумма * КурсВалютыВзаиморасчетов / КурсГр; // пересчет в валюту группы
			НоваяСтрока.Комментарий = НСтр("ru = 'Основная проводка урегулирования услуг'");
			НоваяСтрока.НомерПроводки = 1;
			НоваяСтрока.РесурсРегистра = "СуммаВВалютеУчета"; // в валюте группы
			
			Если СторонаУрегулирования = Перечисления.СтороныСверкиВГО.Кредитор Тогда
				// Дт*Кт00
				НоваяСтрока.СчетДт = СчетМСФО;
				НоваяСтрока.СчетКт = ТехСчет;
				ПрефиксТехСчета = "Кт";
				ПрефиксОснСчета = "Дт";
			Иначе
				// Дт00Кт*
				НоваяСтрока.СчетДт = ТехСчет;
				НоваяСтрока.СчетКт = СчетМСФО;
				ПрефиксТехСчета = "Дт";
				ПрефиксОснСчета = "Кт";
			КонецЕсли;
			
			// Заполнение значений субконто основного счета
			ДЛя Каждого СтрокаЗначенияСубконто_ Из мСтрокиЗначенийСубконто Цикл
				ЗначениеСубконто_ = СтрокаЗначенияСубконто_.ЗначениеСубконто;
				Если ЗначениеЗаполнено(ЗначениеСубконто_) Тогда
					НоваяСтрока["Субконто"+ПрефиксОснСчета+СтрокаЗначенияСубконто_.НомерСубконто] = ЗначениеСубконто_;
				КонецЕсли;
			КонецЦикла;
			
			// Заполнение значений субконто технического счета
			ЭлиминацияВГОУХ.ЗаполнитьЗначенияСубконтоТехническогоСчета(НоваяСтрока, ПрефиксТехСчета, ЗначенияСубконтоТехСчет);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПроводки()

#КонецЕсли

