#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	КорректировкаНазначенияТоваровЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция таблиц данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(Документ, Запрос, ТекстыЗапроса, Регистры);
		
		КорректировкаНазначенияТоваровЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	КорректировкаНазначенияТоваровЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Корректировка назначения товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - таблица команд.
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.КорректировкаНазначенияТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбособленноеОбеспечениеЗаказов";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КорректировкаНазначенияТоваровЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.КорректировкаНазначенияТоваров";
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад");
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ИсходноеНазначение");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("НовоеНазначение");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;

КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.ИсходноеНазначение КАК Справочник.Назначения) КАК ИсходноеНазначение,
	|	ВЫРАЗИТЬ(Товары.НовоеНазначение КАК Справочник.Назначения) КАК НовоеНазначение,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(Товары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСкладскиеДвижения,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыДляЗапроса КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.ЕстьСкладскиеДвижения
	|					ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|											ТОГДА ВЫБОР
	|													КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|														ТОГДА 13
	|													ИНАЧЕ 14
	|												КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|													ТОГДА 9
	|												ИНАЧЕ 10
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 7
	|										ИНАЧЕ 8
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|									И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 3
	|										ИНАЧЕ 4
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|							ТОГДА ВЫБОР
	|									КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|										ТОГДА 13
	|									ИНАЧЕ 14
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|			И (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

// Возвращает текст запроса, определяющий используются ли складские перемещения на переданном складе,
// и используется ли адресное хранение в переданном перемещении.
//
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы в которую нужно поместить результат. Если не задать параметр,
//                                 временная таблица не будет создана.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаИспользованиеПомещенийИАдресногоХранения(ИмяВременнойТаблицы = "") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ИспользоватьАдресноеХранение
	|							И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьАдресноеХранение
	|						И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьСкладскиеПомещения
	|ПОМЕСТИТЬ ИмяВременнойТаблицыПереопределяемый
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицыПереопределяемый", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицыПереопределяемый", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает массив доступных действий с документом КорректировкаНазначенияТоваров
//
// Параметры:
//  Назначение		 - СправочникСсылка.Назначения	 - нащначение, выбранное в корректировке, для алгоритма имеет смысл только давальческое
//  ТекущееДействие	 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - действие указанное в текущем документе.
//
// Возвращаемое значение:
//  Массив - массив элементов типа ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения.
//
Функция ДоступныеДействия(Назначение = Неопределено, ТекущееДействие = Неопределено) Экспорт
	
	ИспользоватьОдинВидРезерва = Ложь;
	
	ЧастичныеПрава = Ложь;
	
	Если Не Пользователи.РолиДоступны("ДополнительныеОперацииКорректировкиНазначенияТоваров") Тогда
		ЧастичныеПрава = Истина;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(Назначение) Тогда
		
		РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение, "Заказ, Партнер, ТипНазначения");
		
		Если РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое21
			Или РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22
			Или РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22 Тогда
			ИспользоватьОдинВидРезерва = Истина;
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Массив = Новый Массив();
	Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв); // 0
	
	Если Не ЧастичныеПрава Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям); // 1
	КонецЕсли;
	
	Если Не ИспользоватьОдинВидРезерва Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать); // 2
		Если Не ЧастичныеПрава Тогда
			Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать); // 3
		КонецЕсли;
	Иначе
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать); // 3
	КонецЕсли;
	
	Если ТекущееДействие = Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений); // 4
	КонецЕсли;
	
	Если ТекущееДействие = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Производит поиск назначения соответствующего заказу
//
// Параметры:
//  Заказ - ЛюбаяСсылка - Ссылка на заказ, назначение которого нужно определить.
//
// Возвращаемое значение:
//  СправочникСсылка.Назначения - назначения, связанное с заказом.
//
Функция НазначениеЗаказа(Заказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
	ПутьКПолюНазначение = "Назначение";
	
	// Исключения.
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		
		Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Назначение");
		Если Не ЗначениеЗаполнено(Назначение) Тогда
			ПутьКПолюНазначение = "НазначениеТовары";
		КонецЕсли;
		
	КонецЕсли;
	
	Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, ПутьКПолюНазначение);
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		ЗаказНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
		Если ЗначениеЗаполнено(ЗаказНазначения) И ЗаказНазначения = Заказ Тогда
			Возврат Назначение;
		Иначе
			Возврат Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Проверяет есть ли доступ у текущего пользователя к изменению документа
//
// Параметры:
//  Ссылка - ДокументСсылка.КорректировкаНазначенияТоваров -
//
// Возвращаемое значение:
//  Булево -
//
Функция ДоступнаВозможностьИзменения(Ссылка) Экспорт
	
	ЕстьДоступ = Истина;
	ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации");
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		ЕстьДоступ = Ложь;
	ИначеЕсли Не Пользователи.РолиДоступны("ДополнительныеОперацииКорректировкиНазначенияТоваров") Тогда
		// Частичные права
		ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации");
		Если ВидОперацииДокумента = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям
			Или ВидОперацииДокумента = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
			ЕстьДоступ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДоступ;
	
КонецФункции

//++ НЕ УТ
#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат КорректировкаНазначенияТоваровЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса создания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат КорректировкаНазначенияТоваровЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти
//-- НЕ УТ

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеПродукция22));
	
	// Остатки списываемых товаров на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.ИсходноеНазначение", "ВНаличии");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Товары.Склад";
	
	// Потребности в оприходуемых товарах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.НовоеНазначение", "Потребность");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Товары.Склад";
	
	Возврат МакетФормы;
	
КонецФункции


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Добавляет команду создания документа "Корректировка назначения товаров" на основании "Заказа клиента".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//   Неопределено, Структура - См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказаКлиента(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.КорректировкаНазначенияТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбособленноеОбеспечениеЗаказов";
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиента";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДопустимыНазначенияБезЗаказа() Экспорт
	
	ДопустимыНазначенияБезЗаказа = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	//++ НЕ УТ
	ДопустимыНазначенияБезЗаказа = ДопустимыНазначенияБезЗаказа
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ДопустимыНазначенияБезЗаказа = ДопустимыНазначенияБезЗаказа
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
			И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	//-- НЕ УТКА
	Возврат ДопустимыНазначенияБезЗаказа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Ссылка", 			   Реквизиты.Ссылка); // Предназначен для использования в процедуре ИнициализироватьВидыЗапасов
	Запрос.УстановитьПараметр("Период", 			   Реквизиты.Период);
	Запрос.УстановитьПараметр("ПометкаУдаления", 	   Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Номер", 				   Реквизиты.Номер);
	Запрос.УстановитьПараметр("Проведен", 			   Реквизиты.Проведен);
	Запрос.УстановитьПараметр("Комментарий", 		   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Организация", 		   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НомерНаПечать",         ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.КорректировкаОбособленногоУчета);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	Ключи.Назначение           КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Ключи.МестоХранения        КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура         КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика       КАК Характеристика,
	|		&ПустоеНазначение          КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия                КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения        КАК МестоХранения
	|	ИЗ
	|		Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК Товары
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	) КАК Ключи
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура      = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия          = Аналитика.Серия
	//++ НЕ УТ
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	//-- НЕ УТ
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.Назначение = Аналитика.Назначение
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА ЕСТЬNULL(ВидыЗапасовВладельца.Организация, ЕСТЬNULL(ТаблицаВидыЗапасов.ВидЗапасов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|				ЕСТЬNULL(ВидыЗапасовВладельца.Организация, ТаблицаВидыЗапасов.ВидЗапасов.Организация)
	|			ИНАЧЕ
	|				&Организация
	|		КОНЕЦ                                                   КАК Организация,
	|	ТаблицаВидыЗапасов.НомерСтроки								КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура										КАК Номенклатура,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика									КАК Характеристика,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия												КАК Серия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая	КАК ЦеховаяКладовая,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение										КАК Назначение,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Назначение КАК НовоеНазначение,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры				КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики						КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование	КАК АналитикаУчетаНоменклатурыОприходование,
	|	АналитикаБезНазначения.КлючАналитики						КАК АналитикаУчетаНоменклатурыОприходованиеБезНазначения,
	|	ЕСТЬNULL(ВидыЗапасовВладельца.Ссылка, ТаблицаВидыЗапасов.ВидЗапасов)	КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасовОприходование = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(ВидыЗапасовВладельца.Ссылка, ТаблицаВидыЗапасов.ВидЗапасов.Ссылка)
	|		ИНАЧЕ ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|	КОНЕЦ														КАК ВидЗапасовОприходование,
	|	ТаблицаВидыЗапасов.НомерГТД									КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество								КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ							КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки                      КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|	ПО ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика = АналитикаБезНазначения.Характеристика
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия = АналитикаБезНазначения.Серия
	//++ НЕ УТ
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	//-- НЕ УТ
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	&Период											КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	ТаблицаВидыЗапасов.Организация					КАК Организация,
	|	ТаблицаВидыЗапасов.Организация					КАК ОрганизацияОтгрузки,
	|	ТаблицаВидыЗапасов.Номенклатура					КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика				КАК Характеристика,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	&Период											КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТаблицаВидыЗапасов.Организация					КАК Организация,
	|	НЕОПРЕДЕЛЕНО									КАК ОрганизацияОтгрузки,
	|	ТаблицаВидыЗапасов.Номенклатура					КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика				КАК Характеристика,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступленияТоваров.ДатаПоступления КАК ДатаПоступления,
	|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаВидыЗапасов.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.НовоеНазначение КАК Назначение,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|	ПО
	|		ТаблицаВидыЗапасов.ВидЗапасов = ПоступленияТоваров.ВидЗапасов
	|		И ТаблицаВидыЗапасов.Номенклатура = ПоступленияТоваров.Номенклатура
	|		И ТаблицаВидыЗапасов.Характеристика = ПоступленияТоваров.Характеристика
	|		И ТаблицаВидыЗапасов.Серия = ПоступленияТоваров.Серия
	|		И ТаблицаВидыЗапасов.НовоеНазначение = ПоступленияТоваров.Назначение
	|		И ТаблицаВидыЗапасов.НомерГТД = ПоступленияТоваров.НомерГТД
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваровПолучатель
	|	ПО
	|		ТаблицаВидыЗапасов.ВидЗапасовОприходование = ПоступленияТоваровПолучатель.ВидЗапасов
	|		И ТаблицаВидыЗапасов.Номенклатура = ПоступленияТоваровПолучатель.Номенклатура
	|		И ТаблицаВидыЗапасов.Характеристика = ПоступленияТоваровПолучатель.Характеристика
	|		И ТаблицаВидыЗапасов.Серия = ПоступленияТоваровПолучатель.Серия
	|		И ТаблицаВидыЗапасов.НовоеНазначение = ПоступленияТоваровПолучатель.Назначение
	|		И ТаблицаВидыЗапасов.НомерГТД = ПоступленияТоваровПолучатель.НомерГТД
	|
	|ГДЕ
	|	(ПоступленияТоваровПолучатель.ДатаПоступления ЕСТЬ NULL
	|		ИЛИ ПоступленияТоваровПолучатель.ДатаПоступления < &Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаВидыЗапасов.Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика,
	|	ТаблицаВидыЗапасов.Серия,
	|	ТаблицаВидыЗапасов.НовоеНазначение,
	|	ТаблицаВидыЗапасов.НомерГТД";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	(ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаВидыЗапасов.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ) КАК РазделУчета,
	|
	|	(ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаВидыЗапасов.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ) КАК КорРазделУчета,
	|	1												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	&Период											КАК Период,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация, &Организация)	КАК Организация,
	|   ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	0												КАК Стоимость,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорВидЗапасов,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходованиеБезНазначения
	|	КОНЕЦ											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА &ПартионныйУчетВерсии22
	|			ТОГДА ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС,ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ КАК КорВидДеятельностиНДС,
	|	Неопределено									КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение					КАК Подразделение,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи,
	|	
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	 &НастройкаХозяйственнойОперации       КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО ВидыЗапасов.Ссылка = ТаблицаВидыЗапасов.ВидЗапасов
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоНазначениям
	|	ИЛИ ТаблицаВидыЗапасов.ВидЗапасов <> ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаВидыЗапасов.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ) КАК РазделУчета,
	|
	|	НЕОПРЕДЕЛЕНО 									КАК КорРазделУчета,
	|	2												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	&Период											КАК Период,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходованиеБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация, &Организация)	КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	0												КАК Стоимость,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|   НЕОПРЕДЕЛЕНО									КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР 
	|		КОГДА &ПартионныйУчетВерсии22
	|			ТОГДА ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС,ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО 									КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение) КАК ТипЗаписи,
	|	
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	 &НастройкаХозяйственнойОперации       КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоНазначениям
	|	ИЛИ ТаблицаВидыЗапасов.ВидЗапасов <> ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Помещение                КАК Помещение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НовоеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Помещение                КАК Помещение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.ИсходноеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыВЯчейках";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НовоеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьСкладскиеПомещения
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаТовары.Помещение.ИспользоватьАдресноеХранение
	|								И &Период >= ТаблицаТовары.Помещение.ДатаНачалаАдресногоХраненияОстатков
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьАдресноеХранение
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаАдресногоХраненияОстатков
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.ИсходноеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ 
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьСкладскиеПомещения
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаТовары.Помещение.ИспользоватьАдресноеХранение
	|								И &Период >= ТаблицаТовары.Помещение.ДатаНачалаАдресногоХраненияОстатков
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьАдресноеХранение
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаАдресногоХраненияОстатков
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период											КАК Период,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация, &Организация)	КАК Организация,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение					КАК Подразделение,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК НаправлениеДеятельности,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения	КАК Склад,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов					КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходованиеБезНазначения
	|	КОНЕЦ											КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Назначение.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК КорНаправлениеДеятельности,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения									КАК КорСклад,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование.ТипЗапасов		КАК КорТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорВидЗапасов,
	|
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.Количество					КАК КорКоличество,
	|
	|	0												КАК Стоимость,
	|	0												КАК СтоимостьБезНДС,
	|	0												КАК СтоимостьРегл,
	|
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ИсточникГФУНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорИсточникГФУНоменклатуры
	|
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО                            КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                            КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО                            КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                            КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО                            КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                            КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО                            КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период                                 КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка             КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата        КАК Период,
		|	ТабЧасть.Номенклатура       КАК Номенклатура,
		|	ТабЧасть.Характеристика     КАК Характеристика,
		|	ТабЧасть.Склад              КАК Склад,
		|	ТабЧасть.ИсходноеНазначение КАК Назначение,
		|	ТабЧасть.Количество         КАК Количество,
		|	НЕОПРЕДЕЛЕНО                КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                      КАК КонтрольСвободногоОстатка,
		|	ИСТИНА                      КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТабЧасть";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка           КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата      КАК Период,
		|	ТабЧасть.Номенклатура     КАК Номенклатура,
		|	ТабЧасть.Характеристика   КАК Характеристика,
		|	ТабЧасть.Склад            КАК Склад,
		|	ТабЧасть.НовоеНазначение  КАК Назначение,
		|	ТабЧасть.Количество       КАК Количество,
		|	ЛОЖЬ                      КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО              КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТабЧасть";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область Перемещение_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация,
	|		ТаблицаДокумента.Организация) 								КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 	 				КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов					 				КАК ВидЗапасов,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ 															КАК ВидДеятельностиНДС,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО                                            		КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО 									   				КАК КорПартия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование 		КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование             			КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение	КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО						КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 						КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 			КАК Количество,
	|	НЕОПРЕДЕЛЕНО 							КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаОбособленногоУчета) КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 										 КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации												 КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И (&УчитыватьСебестоимостьТоваровПоНазначениям
	|		ИЛИ ТаблицаВидыЗапасов.ВидЗапасов <> ТаблицаВидыЗапасов.ВидЗапасовОприходование)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Перемещение,
		ТекстЗапроса);
		
	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеТабличнойЧасти

// Возвращает таблицу товаров по заказу для которых производится обособленное обеспечение.
//
// Параметры:
//  ВидОперации							 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - Вид операции заказа
//  Назначение							 - СправочникСсылка.Назначения - назначение, по которому необходимо получить данные обособленного обеспечения
//  Заказ								 - ДокументСсылка - Заказ, по товарам которого необходимо ограничить полученный список потребности назначения
//  ТекущаяКорректировка				 - ДокументСсылка.КорректировкаНазначенияТоваров - текущий документ корректировки, задается для того что бы
// 													исключить его движения из расчетов
//  ТолькоПоСкладуОтгрузки				 - Булево - При виде операции резервирование, будут ли помещены
//													в результирующую таблицу остатки по складам не указанным в заказе
//  Организация							 - СправочникСсылка.Организации -
//  ПараметрыЗаполнения                  - Структура - содержит:
//   * СнятьИзлишекРезервов - Булево - Признак необходимости снятия только излишка для операций снятия резерва, 
//                                     если передано Ложь -- выполняется снятие всей потребности
//   * ТоварыОтбор          - ТаблицаЗначений, Неопределено - Содержит колонки:
//      ** Номенклатура   - СправочникСсылка.Номенклатура - 
//      ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - всегда 0
//		* Отметка					 - Булево - всегда Ложь
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа.
//
Функция ЗаполнитьТаблицуСнятияУстановкиРезервов(
			ВидОперации,
			Назначение,
			Заказ,
			ТекущаяКорректировка,
			ТолькоПоСкладуОтгрузки,
			Организация,
			ПараметрыЗаполнения = Неопределено) Экспорт
	
	ТоварыОтбор          = Неопределено;
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		Если ПараметрыЗаполнения.Свойство("ТоварыОтбор") Тогда
			ТоварыОтбор = ПараметрыЗаполнения.ТоварыОтбор;
		КонецЕсли;
		
	КонецЕсли;
	
	СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	КорректировкаРезерваИныхЗаказов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	
	ВстречнаяКорректировка = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка;
	
	ТребуемыеТовары = ?(ТоварыОтбор = Неопределено, МатериалыИзТабличнойЧастиДокумента(Заказ), ТоварыОтбор);
	
	Отборы = Новый Структура();
	Отборы.Вставить("Назначение",      Назначение);
	Отборы.Вставить("Организация",     Организация);
	Отборы.Вставить("ТребуемыеТовары", ТребуемыеТовары);
	
	СтруктураВозврата = ТаблицаЗаполненияКорректировки(ВидОперации, ТолькоПоСкладуОтгрузки, Отборы, ТекущаяКорректировка);
	Таблица = СтруктураВозврата.ТаблицаЗаполненияКорректировки;
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ИндексСтраницы", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный));
	
	Если СнятиеРезерва Тогда
		
		СнятьРезервы(Таблица, Истина);
		
	ИначеЕсли ВстречнаяКорректировка Тогда
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НовоеНазначение) Тогда
				СтрокаТаблицы.ИндексСтраницы = 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		УстановитьРезервы(Таблица);
		
	КонецЕсли;
	
	Таблица.Колонки.Добавить("СкладЗаказИсточник", Новый ОписаниеТипов("Строка"));
	Для Каждого Строка Из Таблица Цикл
		
		Строка.СкладЗаказИсточник = ?(Строка.ИсточникПредставление = "", "", Строка.ИсточникПредставление + ", ") + Строка.СкладПредставление;
		
		Если Не СнятиеРезерва Тогда
			Строка.ИсходноеНазначение = Строка.НазначениеИсточник; // Пустое значение (со склада) или назначение конкретного заказа
		Иначе
			Строка.ИсходноеНазначение = Строка.Назначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Восстановление сортировки после изменения таблицы, по строковому представлению
	Таблица.Сортировать("ИсходноеНазначение, Номенклатура, Характеристика, СортировкаСклада УБЫВ, НазначениеИсточник, Потребность УБЫВ, ВНаличии УБЫВ");
	
	СтруктураВозврата.Вставить("ТаблицаЗаполненияКорректировки", Таблица);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МатериалыИзТабличнойЧастиДокумента(Заказ)
	
	ТребуемыеТовары = Новый ТаблицаЗначений();
	ТребуемыеТовары.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТребуемыеТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	//++ НЕ УТ
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	КонецЕсли;
	//-- НЕ УТ
	//++ НЕ УТКА
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказДавальца.Материалы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ
		|	И Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И НЕ Таблица.Отменено";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ТребуемыеТовары;
	
КонецФункции

// Возвращает таблицу товаров с остатками детализированными до серии, помещения, ячейки.
//
// Параметры:
//
//  ТаблицаТовары - ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - всегда 0
//		* Отметка					 - Булево - всегда Ложь
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа
//  Ссылка - ДокументСсылка.КорректировкаНазначенияТоваров - Будет ли помещены в результирующую таблицу остатки по складам не указанным в заказе
//  ТолькоОтмеченные - Булево - будут ли получены остатки по ячейкам и помещениям по строкам переданной таблице, у
//                              которых не взведен флаг Отметка.
//
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значения с колонками:
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* ИсходноеНазначениеДвиженияПоСкладскимРегистрам	 - Булево - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* Серия						 - СправочникСсылка.СерииНоменклатуры -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* Обеспечено				 - Число - количество товара зарезервированного заказом по указанному товару или свободный остаток товара по складу, помещению, серии
//		* ОбеспеченоУпаковок		 - Число - количество товара зарезервированного заказом по указанному товару или свободный остаток товара по складу, помещению, серии
//		* Помещение					 - СправочникСсылка.СкладскиеПомещения - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* Упаковка					 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Ячейка					 - СправочникСсылка.СкладскиеЯчейки -
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* Количество				 - Число - количество к корректировке введенное пользователем.
//
Функция ТаблицаПомещенияЯчейкиПоТоварам(ТаблицаТовары, Ссылка, ТолькоОтмеченные = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.ИсходноеНазначение КАК Назначение,
	|	таб.Номенклатура,
	|	таб.Характеристика,
	|	таб.Склад,
	|	таб.ВНаличии КАК Обеспечено,
	|	таб.СвободныйОстаток,
	|	таб.Количество,
	|	таб.Отметка
	|ПОМЕСТИТЬ ВтТоварыЗаказа
	|ИЗ
	|	&ТаблицаТовары КАК таб
	|ГДЕ
	|	&УсловиеПоОтметке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	СУММА(Таблица.ВНаличии) КАК ВНаличии,
	|	МАКСИМУМ(Таблица.СвободныйОстаток) КАК СвободныйОстаток,
	|	МАКСИМУМ(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|		ТоварыОрганизаций.КоличествоОстаток КАК ВНаличии,
	|		Т.СвободныйОстаток КАК СвободныйОстаток,
	|		Т.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки КАК ТоварыОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Т
	|			ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Назначение = Т.Назначение
	|				И ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура = Т.Номенклатура
	|				И ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Характеристика = Т.Характеристика
	|				И ТоварыОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения = Т.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Назначение,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Характеристика,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Серия,
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения,
	|		ВЫБОР
	|			КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыОрганизаций.Количество
	|			ИНАЧЕ ТоварыОрганизаций.Количество
	|		КОНЕЦ,
	|		Т.СвободныйОстаток,
	|		Т.Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Т
	|			ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Назначение = Т.Назначение
	|				И ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура = Т.Номенклатура
	|				И ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Характеристика = Т.Характеристика
	|				И ТоварыОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения = Т.Склад
	|	ГДЕ
	|		ТоварыОрганизаций.Регистратор = &Регистратор) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Назначение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.Помещение,
	|	Таблица.Упаковка,
	|	Таблица.Ячейка,
	|	СУММА(Таблица.ВНаличии) КАК ВНаличии,
	|	МАКСИМУМ(Таблица.СвободныйОстаток) КАК СвободныйОстаток,
	|	МАКСИМУМ(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|		ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|		ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|		ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
	|		ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
	|		ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|		ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|		ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК ВНаличии,
	|		Т.СвободныйОстаток КАК СвободныйОстаток,
	|		Т.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках.Остатки КАК ТоварыВЯчейкахОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Т
	|			ПО ТоварыВЯчейкахОстатки.Назначение = Т.Назначение
	|				И ТоварыВЯчейкахОстатки.Номенклатура = Т.Номенклатура
	|				И ТоварыВЯчейкахОстатки.Характеристика = Т.Характеристика
	|				И ТоварыВЯчейкахОстатки.Ячейка.Владелец = Т.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВЯчейках.Назначение,
	|		ТоварыВЯчейках.Номенклатура,
	|		ТоварыВЯчейках.Характеристика,
	|		ТоварыВЯчейках.Серия,
	|		ТоварыВЯчейках.Ячейка.Владелец,
	|		ТоварыВЯчейках.Ячейка.Помещение,
	|		ТоварыВЯчейках.Упаковка,
	|		ТоварыВЯчейках.Ячейка,
	|		ВЫБОР
	|			КОГДА ТоварыВЯчейках.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыВЯчейках.ВНаличии
	|			ИНАЧЕ ТоварыВЯчейках.ВНаличии
	|		КОНЕЦ,
	|		Т.СвободныйОстаток,
	|		Т.Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках КАК ТоварыВЯчейках
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Т
	|			ПО ТоварыВЯчейках.Назначение = Т.Назначение
	|				И ТоварыВЯчейках.Номенклатура = Т.Номенклатура
	|				И ТоварыВЯчейках.Характеристика = Т.Характеристика
	|				И ТоварыВЯчейках.Ячейка.Владелец = Т.Склад
	|	ГДЕ
	|		ТоварыВЯчейках.Регистратор = &Регистратор) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Назначение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.Помещение,
	|	Таблица.Упаковка,
	|	Таблица.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.Помещение,
	|	СУММА(Таблица.ВНаличии) КАК ВНаличии,
	|	МАКСИМУМ(Таблица.СвободныйОстаток) КАК СвободныйОстаток,
	|	МАКСИМУМ(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыНаСкладахОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.Склад КАК Склад,
	|		ТоварыНаСкладахОстатки.Помещение КАК Помещение,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК ВНаличии,
	|		Т.СвободныйОстаток КАК СвободныйОстаток,
	|		Т.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Т
	|			ПО ТоварыНаСкладахОстатки.Назначение = Т.Назначение
	|				И ТоварыНаСкладахОстатки.Номенклатура = Т.Номенклатура
	|				И ТоварыНаСкладахОстатки.Характеристика = Т.Характеристика
	|				И ТоварыНаСкладахОстатки.Склад = Т.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегТоварыНаСкладах.Назначение,
	|		РегТоварыНаСкладах.Номенклатура,
	|		РегТоварыНаСкладах.Характеристика,
	|		РегТоварыНаСкладах.Серия,
	|		РегТоварыНаСкладах.Склад,
	|		РегТоварыНаСкладах.Помещение,
	|		ВЫБОР
	|			КОГДА РегТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РегТоварыНаСкладах.ВНаличии
	|			ИНАЧЕ РегТоварыНаСкладах.ВНаличии
	|		КОНЕЦ,
	|		Т.СвободныйОстаток,
	|		Т.Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК РегТоварыНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Т
	|			ПО РегТоварыНаСкладах.Назначение = Т.Назначение
	|				И РегТоварыНаСкладах.Номенклатура = Т.Номенклатура
	|				И РегТоварыНаСкладах.Характеристика = Т.Характеристика
	|				И РегТоварыНаСкладах.Склад = Т.Склад
	|	ГДЕ
	|		РегТоварыНаСкладах.Регистратор = &Регистратор) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Назначение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ЕСТЬNULL(СкладыИПомещения.Ссылка, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК Помещение,
	|	ВЫБОР
	|		КОГДА Склады.Ссылка.ИспользоватьСкладскиеПомещения
	|				И &Дата >= Склады.Ссылка.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА СкладыИПомещения.Ссылка.ИспользоватьАдресноеХранение
	|							И &Дата >= СкладыИПомещения.Ссылка.ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Склады.Ссылка.ИспользоватьАдресноеХранение
	|						И &Дата >= Склады.Ссылка.ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение
	|ПОМЕСТИТЬ СкладыИПомещения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладыИПомещения
	|		ПО (СкладыИПомещения.Владелец = Склады.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК СкладыЗаказа
	|		ПО (СкладыЗаказа.Склад = Склады.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СкладыИПомещения.Ссылка,
	|	ВЫБОР
	|		КОГДА Склады.Ссылка.ИспользоватьСкладскиеПомещения
	|				И &Дата >= Склады.Ссылка.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА СкладыИПомещения.Ссылка.ИспользоватьАдресноеХранение
	|							И &Дата >= СкладыИПомещения.Ссылка.ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Склады.Ссылка.ИспользоватьАдресноеХранение
	|						И &Дата >= Склады.Ссылка.ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	Склады.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Назначение,
	|	ТоварыВЯчейкахОстатки.Назначение.ДвиженияПоСкладскимРегистрам КАК НазначениеДвиженияПоСкладскимРегистрам,
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Склад,
	|	ТоварыВЯчейкахОстатки.Помещение,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.ВНаличии,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
	|	ТоварыВЯчейкахОстатки.СвободныйОстаток,
	|	ТоварыВЯчейкахОстатки.Количество
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИПомещения КАК СкладыИПомещения
	|		ПО ТоварыВЯчейкахОстатки.Склад = СкладыИПомещения.Склад
	|			И ТоварыВЯчейкахОстатки.Помещение = СкладыИПомещения.Помещение
	|ГДЕ
	|	СкладыИПомещения.ИспользоватьАдресноеХранение = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Назначение,
	|	ТоварыНаСкладахОстатки.Назначение.ДвиженияПоСкладскимРегистрам,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.Серия,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Помещение,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка),
	|	ТоварыНаСкладахОстатки.ВНаличии,
	|	1,
	|	ТоварыНаСкладахОстатки.СвободныйОстаток,
	|	ТоварыНаСкладахОстатки.Количество
	|ИЗ
	|	ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИПомещения КАК СкладыИПомещения
	|		ПО ТоварыНаСкладахОстатки.Помещение = СкладыИПомещения.Помещение
	|			И ТоварыНаСкладахОстатки.Склад = СкладыИПомещения.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СкладыИПомещения.ИспользоватьАдресноеХранение = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.Назначение,
	|	ЛОЖЬ,
	|	ТоварыОрганизаций.Номенклатура,
	|	ТоварыОрганизаций.Характеристика,
	|	ТоварыОрганизаций.Серия,
	|	ТоварыОрганизаций.Склад,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка),
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка),
	|	ТоварыОрганизаций.ВНаличии,
	|	1,
	|	ТоварыОрганизаций.СвободныйОстаток,
	|	ТоварыОрганизаций.Количество
	|ИЗ
	|	ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыОрганизаций.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	НЕ ТоварыОрганизаций.Назначение.ДвиженияПоСкладскимРегистрам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.НазначениеДвиженияПоСкладскимРегистрам КАК НазначениеДвиженияПоСкладскимРегистрам,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.Склад КАК Склад,
	|	СУММА(Таблица.ВНаличии * Таблица.Коэффициент) КАК Обеспечено,
	|	СУММА(Таблица.ВНаличии) КАК ОбеспеченоУпаковок,
	|	Таблица.Помещение КАК Помещение,
	|	ВЫБОР
	|		КОГДА Таблица.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА Таблица.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	Таблица.Ячейка КАК Ячейка,
	|	МАКСИМУМ(Таблица.СвободныйОстаток) КАК СвободныйОстаток,
	|	МАКСИМУМ(Таблица.Количество) КАК Количество
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	Таблица.ВНаличии > 0
	|	И (Таблица.Помещение <> ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|			ИЛИ Таблица.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ Таблица.Ячейка <> ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.Назначение,
	|	Таблица.НазначениеДвиженияПоСкладскимРегистрам,
	|	Таблица.Помещение,
	|	Таблица.Упаковка,
	|	Таблица.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Назначение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Помещение,
	|	Ячейка,
	|	Серия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТоварыВЯчейкахОстатки.Упаковка",
			"ТоварыВЯчейкахОстатки.Номенклатура"));
			
	Если ТолькоОтмеченные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОтметке", "таб.Отметка");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОтметке", "Истина");
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.УстановитьПараметр("Регистратор",	 Ссылка);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура СлитьТаблицыПоСкладуИПомещениям(ТаблицаПоСкладамВЦелом, ТаблицаПомещенияЯчейки) Экспорт
	
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Серия") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Помещение") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Ячейка") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	СтрокиКУдалению = Новый Массив();
	
	Для ИндексСтроки = 0 По ТаблицаПоСкладамВЦелом.Количество() - 1 Цикл
		
		Строка = ТаблицаПоСкладамВЦелом[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтруктураПоиска.Назначение = Строка.ИсходноеНазначение;
		
		НайденныеСтроки = ТаблицаПомещенияЯчейки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			КоличествоОстаток = Строка.Количество;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = ТаблицаПоСкладамВЦелом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "Помещение, Ячейка, Серия, Упаковка, Количество");
				
				Если НайденнаяСтрока.Обеспечено > КоличествоОстаток Тогда
					НоваяСтрока.Количество = КоличествоОстаток;
					КоличествоОстаток = 0;
				Иначе
					НоваяСтрока.Количество = НайденнаяСтрока.Обеспечено;
					КоличествоОстаток = КоличествоОстаток - НайденнаяСтрока.Обеспечено;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокиКУдалению.Добавить(Строка); // Текущая строка заменена на строки из таблицы по помещениям
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПоСкладамВЦелом.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция ПостобработкаТаблицыТовары(ТаблицаТовары, Операция, Организация = Неопределено, КорректировкаНазначения = Неопределено) Экспорт
	
	ЕстьИзмененияКоличества = Ложь;
	
//++ НЕ УТКА
	
	// Расчет поля "Новое назначение" для давальческих назначений производства 2.2. при снятии резерва.
	
	ИспользуетсяПроизводство2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
	Если НЕ ИспользуетсяПроизводство2_2
		Или Операция = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать
		Или Операция = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТоварыОрганизаций = ТоварыОрганизацийПоОтбору(ТаблицаТовары, Операция, Организация, КорректировкаНазначения);
	ТоварыОрганизаций.Колонки.Количество.Имя = "КоличествоПоОрганизации";
	
	Ключ = "Назначение, Номенклатура, Характеристика, Склад";
	
	ЗаполняемыеПоля = "НазначениеПодстановки";
	Ресурсы = "ПО [Количество]";
	
	ТаблицаТовары.Колонки.Добавить("НазначениеПодстановки", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаТовары.Индексы.Добавить(Ключ);
	
	НакладныеСервер.РаспределитьКоличествоИЗаполнить(ТоварыОрганизаций, ТаблицаТовары, "КоличествоПоОрганизации", Ключ, Ресурсы, Ложь, ЗаполняемыеПоля);
	
	ТаблицаТовары.Колонки.Количество.Имя = "Количество1";
	ТаблицаТовары.Колонки.КоличествоПоОрганизации.Имя = "Количество";
	
	Если Не Операция = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		ТаблицаТовары.Колонки.НовоеНазначение.Имя = "НовоеНазначение1";
		ТаблицаТовары.Колонки.НазначениеПодстановки.Имя = "НовоеНазначение";
	КонецЕсли;
	
	// Удаление строк где количество обнулилось
	Индексов = ТаблицаТовары.Количество() - 1;
	Для Итерация = 0 По Индексов Цикл
		Строка = ТаблицаТовары[Индексов - Итерация];
		ЕстьИзмененияКоличества = ЕстьИзмененияКоличества ИЛИ Строка.Количество <> Строка.Количество1;
		Если Строка.Количество = 0 Тогда
			ТаблицаТовары.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
//-- НЕ УТКА
	
	Возврат ЕстьИзмененияКоличества;
	
КонецФункции

//++ НЕ УТКА

Функция ТоварыОрганизацийПоОтбору(ТаблицаОтбора, ВидОперации, Организация, КорректировкаНазначения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ВТВходящаяТаблица.Назначение КАК Справочник.Назначения)     КАК Назначение,
	|	ВТВходящаяТаблица.Номенклатура   КАК Номенклатура,
	|	ВТВходящаяТаблица.Характеристика КАК Характеристика,
	|	ВТВходящаяТаблица.Склад          КАК Склад
	|ПОМЕСТИТЬ ВТВходящаяТаблица
	|ИЗ
	|	&ТаблицаОтбора КАК ВТВходящаяТаблица
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтбора.Назначение                                         КАК Назначение,
	|	ЕСТЬNULL(ТаблицаОтбора.Назначение.Заказ, НЕОПРЕДЕЛЕНО)           КАК Заказ,
	|	ЕСТЬNULL(ТаблицаОтбора.Назначение.Партнер,
	|			ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))              КАК Партнер,
	|	ЕСТЬNULL(ТаблицаОтбора.Назначение.Договор,
	|			ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))  КАК Договор,
	|	ТаблицаОтбора.Номенклатура                                       КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика                                     КАК Характеристика,
	|	ТаблицаОтбора.Склад                                              КАК Склад,
	|	ТаблицаОтбора.Назначение.НаправлениеДеятельности                 КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВТТаблицаОтбора
	|ИЗ
	|	ВТВходящаяТаблица КАК ТаблицаОтбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Назначение           КАК НазначениеОтбора,
	|	МАКСИМУМ(ТаблицаНазначения.Ссылка) КАК НазначениеПодстановки
	|ПОМЕСТИТЬ ВТБазовыеНазначенияДавальцев
	|ИЗ
	|	Справочник.Назначения КАК ТаблицаНазначения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтбора КАК ТаблицаОтбора
	// Обработка только давальческих назначений производства 2.2.
	|	ПО ТаблицаНазначения.Партнер = ТаблицаОтбора.Партнер
	|		И ТаблицаНазначения.Договор = ТаблицаОтбора.Договор
	|		И ТаблицаНазначения.НаправлениеДеятельности = ТаблицаОтбора.НаправлениеДеятельности
	|		И ТаблицаНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
	|ГДЕ
	|	НЕ ТаблицаНазначения.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НазначениеОтбора
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючиАналитики.КлючАналитики  КАК Ссылка,
	|	КлючиАналитики.Назначение     КАК Назначение,
	|	КлючиАналитики.Номенклатура   КАК Номенклатура,
	|	КлючиАналитики.Характеристика КАК Характеристика,
	|	КлючиАналитики.МестоХранения  КАК Склад
	|ПОМЕСТИТЬ ВтКлючиАналитики
	|ИЗ
	|	ВТТаблицаОтбора КАК ВТТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитики
	|		ПО ВТТаблицаОтбора.Назначение = КлючиАналитики.Назначение
	|			И ВТТаблицаОтбора.Номенклатура = КлючиАналитики.Номенклатура
	|			И ВТТаблицаОтбора.Характеристика = КлючиАналитики.Характеристика
	|			И ВТТаблицаОтбора.Склад = КлючиАналитики.МестоХранения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Назначение        КАК Назначение,
	|	ВЫБОР КОГДА ЕСТЬNULL(Набор.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                   КАК ЭтоНазначениеДавальцаВЦелом,
	|	Набор.Номенклатура      КАК Номенклатура,
	|	Набор.Характеристика    КАК Характеристика,
	|	Набор.Склад             КАК Склад,
	|	Набор.Организация       КАК Организация,
	|	Набор.ТипЗапасов        КАК ТипЗапасов,
	|	Набор.Партнер           КАК Партнер,
	|	Набор.Договор           КАК Договор,
	|	СУММА(Набор.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА (Набор.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|					ИЛИ Набор.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|			ТОГДА
	|				ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям)
	|			ТОГДА
	|				ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                   КАК НазначениеПодстановки
	|
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		ВтКлючиАналитики.Назначение                        КАК Назначение,
	|		ВтКлючиАналитики.Номенклатура                      КАК Номенклатура,
	|		ВтКлючиАналитики.Характеристика                    КАК Характеристика,
	|		ВтКлючиАналитики.Склад                             КАК Склад,
	|		ТоварыОрганизацийОстатки.Организация               КАК Организация,
	|		ТоварыОрганизацийОстатки.ВидЗапасов.ТипЗапасов     КАК ТипЗапасов,
	|		ТоварыОрганизацийОстатки.ВидЗапасов.ВладелецТовара КАК Партнер,
	|		ТоварыОрганизацийОстатки.ВидЗапасов.Договор        КАК Договор,
	|		ТоварыОрганизацийОстатки.КоличествоОстаток         КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(
	|				,
	|				АналитикаУчетаНоменклатуры В
	|					(ВЫБРАТЬ
	|						Таблица.Ссылка
	|					ИЗ
	|						ВтКлючиАналитики КАК Таблица)
	|				) КАК ТоварыОрганизацийОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКлючиАналитики КАК ВтКлючиАналитики
	|			ПО ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры = ВтКлючиАналитики.Ссылка
	|	
	|	ГДЕ
	|		&УсловиеТоварыОрганизаций
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСторно.АналитикаУчетаНоменклатуры.Назначение     КАК Назначение,
	|		ТаблицаСторно.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|		ТаблицаСторно.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТаблицаСторно.АналитикаУчетаНоменклатуры.МестоХранения  КАК Склад,
	|		ТаблицаСторно.Организация                               КАК Организация,
	|		ТаблицаСторно.ВидЗапасов.ТипЗапасов                     КАК ТипЗапасов,
	|		ТаблицаСторно.ВидЗапасов.ВладелецТовара                 КАК Партнер,
	|		ТаблицаСторно.ВидЗапасов.Договор                        КАК Договор,
	|		ТаблицаСторно.Количество                                КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТаблицаСторно
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКлючиАналитики КАК ВтКлючиАналитики
	|			ПО ВтКлючиАналитики.Ссылка = ТаблицаСторно.АналитикаУчетаНоменклатуры
	|	
	|	ГДЕ
	|		&УсловиеТаблицаСторно
	|		И ТаблицаСторно.Регистратор = &Регистратор) КАК Набор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеНазначенияДавальцев КАК ВТБазовыеНазначенияДавальцев
	|	ПО Набор.Назначение = ВТБазовыеНазначенияДавальцев.НазначениеОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Назначение,
	|	Набор.Номенклатура,
	|	Набор.Характеристика,
	|	Набор.Склад,
	|	Набор.Организация,
	|	Набор.ТипЗапасов,
	|	ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|	Набор.Партнер,
	|	Набор.Договор,
	|	ВЫБОР
	|		КОГДА (Набор.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|					ИЛИ Набор.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|			ТОГДА
	|				ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям)
	|			ТОГДА
	|				ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ
	|	
	|// При операции снятия резерва запрещена пара НазначениеДавальцаВЦелом -> НазначениеДавальцаВЦелом
	|ИМЕЮЩИЕ
	|	НЕ ВЫБОР КОГДА ЕСТЬNULL(Набор.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ // ЭтоНазначениеДавальцаВЦелом
	|		ИЛИ НЕ
	|			Набор.Назначение =
	|					ВЫБОР
	|						КОГДА (Набор.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|							ИЛИ Набор.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|						ТОГДА
	|							ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|								ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|					КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям)
	|						ТОГДА
	|							ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.НазначениеПодстановки,
	|							ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					КОНЕЦ // Назначение = НазначениеПодстановки";
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям
		И ЗначениеЗаполнено(Организация) Тогда
		УсловиеТоварыОрганизаций = "ТоварыОрганизацийОстатки.Организация = &Организация";
		УсловиеТаблицаСторно = "ТаблицаСторно.Организация = &Организация";
	Иначе
		УсловиеТоварыОрганизаций = "ИСТИНА";
		УсловиеТаблицаСторно = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТоварыОрганизаций", УсловиеТоварыОрганизаций);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицаСторно", УсловиеТаблицаСторно);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Регистратор",   КорректировкаНазначения);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции
//-- НЕ УТКА

Функция ВременнаяТаблицаСкладыОтгрузки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение     КАК Назначение
		|ПОМЕСТИТЬ ВтСкладыОтгрузки
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК Таблица
		|ГДЕ
		|	
		|	Таблица.Потребность > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаСвободныеОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтСвободныеОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстатокНаСкладе.Номенклатура КАК Номенклатура,
		|		ОстатокНаСкладе.Характеристика КАК Характеристика,
		|		ОстатокНаСкладе.Склад КАК Склад,
		|		ОстатокНаСкладе.Свободно КАК Количество
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК ОстатокНаСкладе
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ОтборПоТовару
		|			ПО ОстатокНаСкладе.Номенклатура = ОтборПоТовару.Номенклатура
		|				И ОстатокНаСкладе.Характеристика = ОтборПоТовару.Характеристика
		|	ГДЕ
		|		ОстатокНаСкладе.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И ОстатокНаСкладе.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			И ОстатокНаСкладе.Свободно > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокумента.Номенклатура,
		|		ДвиженияДокумента.Характеристика,
		|		ДвиженияДокумента.Склад,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило
		|	ИЗ
		|		РегистрНакопления.РаспределениеЗапасовДвижения КАК ДвиженияДокумента
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ОтборПоТовару
		|			ПО ДвиженияДокумента.Номенклатура = ОтборПоТовару.Номенклатура
		|				И ДвиженияДокумента.Характеристика = ОтборПоТовару.Характеристика
		|	ГДЕ
		|		ДвиженияДокумента.Активность
		|		И ДвиженияДокумента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И ДвиженияДокумента.Регистратор = &ТекущаяКорректировка) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, ЕстьОтборПоОрганизации)
	
	// Обращение к ссылке заказа через точку позволяет отработать механизмам RLS.
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Назначение              КАК Назначение,
		|	Набор.Номенклатура            КАК Номенклатура,
		|	Набор.Характеристика          КАК Характеристика,
		|	Набор.Склад                   КАК Склад,
		|	СУММА(Набор.НаличиеПодЗаказ)  КАК НаличиеПодЗаказ,
		//++ НЕ УТКА
		|	Набор.Партнер                 КАК Партнер,
		|	Набор.Договор                 КАК Договор,
		//-- НЕ УТКА
		|	Набор.Заказ                   КАК Заказ
		|
		|ПОМЕСТИТЬ ВтОбеспечениеЗаказовОстаткиНазначений
		|ИЗ(
		|	ВЫБРАТЬ
		|		ОстатокНаСкладе.Назначение              КАК Назначение,
		|		ОстатокНаСкладе.Номенклатура            КАК Номенклатура,
		|		ОстатокНаСкладе.Характеристика          КАК Характеристика,
		|		ОстатокНаСкладе.Склад                   КАК Склад,
		|		ОстатокНаСкладе.Свободно                КАК НаличиеПодЗаказ,
		//++ НЕ УТКА
		|		ЕСТЬNULL(ЗаказДавальца.Партнер,
		|			ЕСТЬNULL(РеквизитыНазначения.Партнер,
		|				ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|		ЕСТЬNULL(ЗаказДавальца.Партнер,
		|			ЕСТЬNULL(РеквизитыНазначения.Договор,
		|				ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
		//-- НЕ УТКА
		|		ЕСТЬNULL(РеквизитыНазначения.Заказ.Ссылка, НЕОПРЕДЕЛЕНО) КАК Заказ
		|	ИЗ
		|		ВтТовары КАК ТаблицаОтбора
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОстатокНаСкладе
		|			ПО ОстатокНаСкладе.Номенклатура   = ТаблицаОтбора.Номенклатура
		|			 И ОстатокНаСкладе.Характеристика = ТаблицаОтбора.Характеристика
		|			 И ОстатокНаСкладе.Назначение     <> &Назначение
		|			 И ОстатокНаСкладе.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК РеквизитыНазначения
		|			ПО РеквизитыНазначения.Ссылка = ОстатокНаСкладе.Назначение
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Приемник
		|			ПО Приемник.Ссылка = &Назначение
		|			
		//++ НЕ УТКА
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказДавальца
		|			ПО ЗаказДавальца.Ссылка = РеквизитыНазначения.Заказ
		//-- НЕ УТКА
		|	ГДЕ
		|		НЕ РеквизитыНазначения.Ссылка ЕСТЬ NULL
		|			И &ЭтоОперацияРезервироватьИКорректировать
		|			И &УсловиеТаблицыОстатков
		//++ НЕ УТКА
		// При использовании давальческих назначений необходимо
		// проверить что оба назначения относятся к одной версии производства.
		|			И НЕ(
		|				РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22)
		|				ИЛИ РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
		|				ИЛИ РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|				ИЛИ РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21))
		//-- НЕ УТКА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокумента.Назначение                              КАК Назначение,
		|		ДвиженияДокумента.Номенклатура                            КАК Номенклатура,
		|		ДвиженияДокумента.Характеристика                          КАК Характеристика,
		|		ДвиженияДокумента.Склад                                   КАК Склад,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило КАК НаличиеПодЗаказ,
		//++ НЕ УТКА
		|		ЕСТЬNULL(ЗаказДавальца.Партнер,
		|			ЕСТЬNULL(РеквизитыНазначения.Партнер,
		|				ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|		ЕСТЬNULL(ЗаказДавальца.Партнер,
		|			ЕСТЬNULL(РеквизитыНазначения.Договор,
		|				ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
		//-- НЕ УТКА
		|		ЕСТЬNULL(РеквизитыНазначения.Заказ.Ссылка, НЕОПРЕДЕЛЕНО) КАК Заказ
		|	ИЗ
		|		ВтТовары КАК ТаблицаОтбора
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РаспределениеЗапасовДвижения КАК ДвиженияДокумента
		|			ПО ДвиженияДокумента.Номенклатура   = ТаблицаОтбора.Номенклатура
		|			 И ДвиженияДокумента.Характеристика = ТаблицаОтбора.Характеристика
		|			 И ДвиженияДокумента.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			 И ДвиженияДокумента.Регистратор = &ТекущаяКорректировка
		|			 И ДвиженияДокумента.Активность
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК РеквизитыНазначения
		|			ПО РеквизитыНазначения.Ссылка = ДвиженияДокумента.Назначение
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Приемник
		|			ПО Приемник.Ссылка = &Назначение
		|			
		//++ НЕ УТКА
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказДавальца
		|			ПО ЗаказДавальца.Ссылка = РеквизитыНазначения.Заказ
		//-- НЕ УТКА
		|	ГДЕ
		|		НЕ РеквизитыНазначения.Ссылка ЕСТЬ NULL
		|			И &ЭтоОперацияРезервироватьИКорректировать
		|			И &УсловиеТаблицыОстатков
		//++ НЕ УТКА
		// При использовании давальческих назначений необходимо
		// проверить что оба назначения относятся к одной версии производства.
		|			И НЕ(
		|				РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22)
		|				ИЛИ РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
		|				ИЛИ РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|				ИЛИ РеквизитыНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22)
		|						И Приемник.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21))
		//-- НЕ УТКА
		|		) КАК Набор
		|ГДЕ
		|	Набор.НаличиеПодЗаказ > 0
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад,
		//++ НЕ УТКА
		|	Набор.Партнер,
		|	Набор.Договор,
		//-- НЕ УТКА
		|	Набор.Заказ
		|ИМЕЮЩИЕ
		|	СУММА(Набор.НаличиеПодЗаказ) > 0";
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		ЭтоОперацияРезервироватьИКорректировать = "ИСТИНА";
	Иначе
		ЭтоОперацияРезервироватьИКорректировать = "ЛОЖЬ";
	КонецЕсли;
	
	Если ЕстьОтборПоОрганизации Тогда
		УсловиеТаблицыОстатков = "(РеквизитыНазначения.Заказ.Организация = &Организация
		|	ИЛИ РеквизитыНазначения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
	Иначе
		УсловиеТаблицыОстатков = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоОперацияРезервироватьИКорректировать", ЭтоОперацияРезервироватьИКорректировать);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицыОстатков", УсловиеТаблицыОстатков);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаСводнаяРезервыОстатки(ВидОперации)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//++ НЕ УТКА
		|	ЕСТЬNULL(Таблица.Назначение.Заказ, НЕОПРЕДЕЛЕНО)                                                  КАК Заказ,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЗаказДавальца).Партнер,
		|		ЕСТЬNULL(Таблица.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЗаказДавальца).Договор,
		|		ЕСТЬNULL(Таблица.Назначение.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
//-- НЕ УТКА
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ВтНазначения
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК Таблица
		|;
		|/////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Набор.Назначение         КАК Назначение,
		|	Набор.НазначениеИсточник КАК НазначениеИсточник,
		|	Набор.Номенклатура       КАК Номенклатура,
		|	Набор.Характеристика     КАК Характеристика,
		|	ПРЕДСТАВЛЕНИЕ(Набор.Склад) КАК СкладПредставление,
		|	Набор.ИсточникПредставление КАК ИсточникПредставление,
		|	Набор.Склад              КАК Склад,
		|	СУММА(Набор.ВНаличии)    КАК ВНаличии,
		|	СУММА(Набор.Обеспечено)  КАК Обеспечено,
		|	СУММА(Набор.Доступно)    КАК Доступно,
		|	СУММА(Набор.Потребность) КАК Потребность,
		|
		|	МАКСИМУМ(Набор.ЗаказИсточник) КАК ЗаказИсточник
		|
		|ПОМЕСТИТЬ ВтСводнаяРезервыОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		&ПолеНазначениеИсточник       КАК НазначениеИсточник,
		|		НЕОПРЕДЕЛЕНО                  КАК ЗаказИсточник,
		|		""""                          КАК ИсточникПредставление,
		|		Таблица.Назначение            КАК Назначение,
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Склад                 КАК Склад,
		|		Таблица.ВНаличии              КАК ВНаличии,
		|		Таблица.Обеспечено            КАК Обеспечено,
		|		Таблица.Потребность           КАК Потребность,
		|		0                             КАК Доступно
		|	ИЗ
		|		ВтОбеспечениеЗаказовОстатки КАК Таблица
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеИсточник,
		|		НЕОПРЕДЕЛЕНО                  КАК ЗаказИсточник,
		|		""""                          КАК ИсточникПредставление,
		|		ТаблицаНазначений.Назначение  КАК Назначение,
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Склад                 КАК Склад,
		|		0                             КАК ВНаличии,
		|		0                             КАК Обеспечено,
		|		0                             КАК Потребность,
		|		Таблица.Количество            КАК Доступно
		|	ИЗ
		|		ВтНазначения КАК ТаблицаНазначений
		|		
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Таблица
		|			ПО &УсловияСоединенияСвободныеОстатки
		|	ГДЕ
		|		НЕ Таблица.Номенклатура ЕСТЬ NULL
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		ТаблицаНазначенийИсточников.Назначение      КАК НазначениеИсточник,
		|		ТаблицаНазначенийИсточников.Заказ           КАК ЗаказИсточник,
		|		
		|		ВЫБОР КОГДА ТаблицаНазначенийИсточников.Заказ <> НЕОПРЕДЕЛЕНО ТОГДА
		|						ПРЕДСТАВЛЕНИЕ(ТаблицаНазначенийИсточников.Заказ)
		|					ИНАЧЕ
		|						ПРЕДСТАВЛЕНИЕ(ТаблицаНазначенийИсточников.Назначение)
		|			КОНЕЦ                                        КАК ИсточникПредставление,
		|		
		|		ТаблицаНовыхНазначений.Назначение           КАК Назначение,
		|		ТаблицаНазначенийИсточников.Номенклатура    КАК Номенклатура,
		|		ТаблицаНазначенийИсточников.Характеристика  КАК Характеристика,
		|		ТаблицаНазначенийИсточников.Склад           КАК Склад,
		|		0                                           КАК ВНаличии,
		|		0                                           КАК Обеспечено,
		|		0                                           КАК Потребность,
		|		ТаблицаНазначенийИсточников.НаличиеПодЗаказ КАК Доступно
		|	ИЗ
		|		ВтНазначения КАК ТаблицаНовыхНазначений
		|		
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказовОстаткиНазначений КАК ТаблицаНазначенийИсточников
		|			ПО ИСТИНА
		|			
//++ НЕ УТКА
		|	ГДЕ
		// При резервировании из других заказов, если назначения - давальческие,
		// необходимо проверить что у них совпадают ключевые поля шапки.
		|		ТаблицаНазначенийИсточников.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ИЛИ ТаблицаНазначенийИсточников.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
		|			ИЛИ ТаблицаНовыхНазначений.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И ТаблицаНовыхНазначений.Назначение.ТипНазначения В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|				И ТаблицаНазначенийИсточников.Партнер = ТаблицаНовыхНазначений.Партнер
		|				И ТаблицаНазначенийИсточников.Договор = ТаблицаНовыхНазначений.Договор
		
//-- НЕ УТКА
		|	
		|	) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение,
		|	Набор.НазначениеИсточник,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад,
		|	Набор.ИсточникПредставление";
		
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		ПолеНазначениеИсточник            = "Таблица.Назначение";
		УсловияСоединенияСвободныеОстатки = "ЛОЖЬ";
	Иначе
		ПолеНазначениеИсточник            = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
		УсловияСоединенияСвободныеОстатки = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеНазначениеИсточник",            ПолеНазначениеИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСоединенияСвободныеОстатки", УсловияСоединенияСвободныеОстатки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаИсточниковОбеспеченияПеремещением()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.Склад          КАК СкладПолучатель,
		|	Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК СкладОтправитель,
		|
		|	1 КАК Уровень
		|ИЗ
		|	ВтСпособыОбеспечения КАК Таблица
		|ГДЕ
		|	Таблица.Склад <> Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика,
		|	СкладОтправитель, СкладПолучатель";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РассчитатьИерархиюСкладов(ТаблицаИсходная)
	
	ГруппировкиПоТоварам = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаИсходная, "Номенклатура, Характеристика", "");
	Для Каждого Группировка Из ГруппировкиПоТоварам Цикл
		
		Таблица = Группировка.Таблица;
		Таблица.Индексы.Добавить("СкладПолучатель");
		
		ОбработкаЗавершена = Ложь;
		Пока Не ОбработкаЗавершена Цикл
			
			ОбработкаЗавершена = Истина;
			Для Каждого СтрокаТаблицы Из Группировка.Таблица Цикл
				
				НайденнаяСтрока = Таблица.Найти(СтрокаТаблицы.СкладОтправитель, "СкладПолучатель");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					ОбработкаЗавершена = Ложь;
					СтрокаТаблицы.Уровень = СтрокаТаблицы.Уровень + НайденнаяСтрока.Уровень;
					СтрокаТаблицы.СкладОтправитель = НайденнаяСтрока.СкладОтправитель;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаИсходная.Очистить();
	Для Каждого Группировка Из ГруппировкиПоТоварам Цикл
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаИсходная, Группировка.Таблица);
	КонецЦикла;
	
КонецПроцедуры

Функция ВременнаяТаблицаСортировкаСкладов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.СкладПолучатель  КАК Склад,
		|	Таблица.СкладОтправитель КАК КорневойИсточник,
		|	Таблица.Уровень          КАК Уровень
		|ПОМЕСТИТЬ ВтИерархияСкладов
		|ИЗ
		|	&ТаблицаИерархииСкладов КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	МАКСИМУМ(ЕСТЬNULL(ИерархияСкладов.Уровень, 0)
		|		+ ВЫБОР КОГДА ИерархияСкладов.КорневойИсточник = ИерархияСкладовСкладДокумента.КорневойИсточник
		|			И ИерархияСкладов.Уровень <= ИерархияСкладовСкладДокумента.Уровень ТОГДА
		|					1000
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ) КАК ПриоритетСклада
		|ПОМЕСТИТЬ ВтСортировкаСкладов
		|ИЗ
		|	ВтСводнаяРезервыОстатки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказовОстатки КАК ТаблицаДокумента
		|		ПО ТаблицаДокумента.Назначение     = Таблица.Назначение
		|		 И ТаблицаДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаДокумента.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИерархияСкладов КАК ИерархияСкладовСкладДокумента
		|		ПО ИерархияСкладовСкладДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладовСкладДокумента.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладовСкладДокумента.Склад          = ТаблицаДокумента.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИерархияСкладов КАК ИерархияСкладов
		|		ПО ИерархияСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладов.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладов.Склад          = Таблица.Склад
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение, Номенклатура, Характеристика, Склад";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗаполненияКорректировки(ВидОперации, ТолькоСкладОтгрузки, Отборы, ТекущаяКорректировка)
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(ТекущаяКорректировка);
	ЕстьОтборПоОрганизации = ЗначениеЗаполнено(Отборы.Организация);
	ЕстьОтборПоНоменклатуре = ЗначениеЗаполнено(Отборы.ТребуемыеТовары);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяКорректировка", ТекущаяКорректировка);
	Для Каждого Свойство Из Отборы Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстыЗапроса = Новый Массив(5);
	ТекстыЗапроса[0] = ВременнаяТаблицаПотребности(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре);
	
	ТекстыЗапроса[1] =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК ТаблицаОтбора";
	
	ТекстыЗапроса[2] = ВременнаяТаблицаСвободныеОстатки();
	ТекстыЗапроса[3] = ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, ЕстьОтборПоОрганизации);
	ТекстыЗапроса[4] = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспеченияВсехСкладов(Перечисления.ТипыОбеспечения.Перемещение);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
	ТекстыЗапроса = Новый Массив(3);
	ТекстыЗапроса[0] = ВременнаяТаблицаСкладыОтгрузки();
	ТекстыЗапроса[1] = ВременнаяТаблицаСводнаяРезервыОстатки(ВидОперации);
	ТекстыЗапроса[2] = ТаблицаИсточниковОбеспеченияПеремещением();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТаблицаИсточниковОбеспеченияПеремещением = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РассчитатьИерархиюСкладов(ТаблицаИсточниковОбеспеченияПеремещением);
	Запрос.УстановитьПараметр("ТаблицаИерархииСкладов", ТаблицаИсточниковОбеспеченияПеремещением);
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + ВременнаяТаблицаСортировкаСкладов() + ТекстРазделителяЗапросов();
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Таблица.НазначениеИсточник  КАК НазначениеИсточник,
	|	Таблица.Назначение          КАК Назначение,
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Склад               КАК Склад,
	|	Таблица.СкладПредставление     КАК СкладПредставление,
	|	Таблица.ИсточникПредставление  КАК ИсточникПредставление,
	|	
	|	Таблица.Доступно            КАК СвободныйОстаток,
	|	Таблица.ВНаличии            КАК ВНаличии,
	|	Таблица.Обеспечено
	|		- Таблица.ВНаличии      КАК ОбеспеченоОжидается,
	|	Таблица.Потребность         КАК Потребность,
	|	
	|	ВЫБОР КОГДА ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ                   КАК ПотребностьОсновногоСклада,
	|	
	|	ЕСТЬNULL(ТаблицаСортировкиСкладов.ПриоритетСклада, 0) КАК СортировкаСклада,
	|
	|	Таблица.Назначение.Заказ              КАК Заказ,
	|	Таблица.ЗаказИсточник                 КАК ЗаказИсточник,
	|	&ВыражениеНовоеНазначение             КАК НовоеНазначение,
	|	&ВыражениеИсходноеНазначение          КАК ИсходноеНазначение
	|
	|ИЗ
	|	ВтСводнаяРезервыОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСортировкаСкладов КАК ТаблицаСортировкиСкладов
	|		ПО ТаблицаСортировкиСкладов.Склад          = Таблица.Склад
	|		 И ТаблицаСортировкиСкладов.Назначение     = Таблица.Назначение
	|		 И ТаблицаСортировкиСкладов.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСортировкиСкладов.Характеристика = Таблица.Характеристика
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСкладыОтгрузки КАК ТаблицаСкладовОтгрузки
	|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
	|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
	|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
	|ГДЕ
	|	&УсловиеОтбораСкладовОтгрузки
	|	И &УсловиеОтбораПоНаличию
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Номенклатура, Характеристика,
	|	СортировкаСклада УБЫВ,
	|	НазначениеИсточник,
	|	Потребность УБЫВ, ВНаличии УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение          КАК Назначение,
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Склад               КАК Склад,
	|	
	|	МАКСИМУМ(Таблица.ВНаличии)    КАК НаСкладе,
	|	МАКСИМУМ(Таблица.Обеспечено)  КАК Обеспечено,
	|	МАКСИМУМ(Таблица.Потребность) КАК Потребность,
	|	
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ)                   КАК ПотребностьОсновногоСклада,
	|	
	|	МАКСИМУМ(Таблица.Назначение.Заказ) КАК Заказ
	|
	|ИЗ
	|	ВтСводнаяРезервыОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСкладыОтгрузки КАК ТаблицаСкладовОтгрузки
	|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
	|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
	|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
	|ГДЕ
	|	&УсловиеОтбораСкладовОтгрузки
	|	И &УсловиеОтбораПоНаличию
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Номенклатура, Характеристика,
	|	Потребность УБЫВ,
	|	НаСкладе УБЫВ";
	
	Если ТолькоСкладОтгрузки Тогда
		
		УсловиеОтбораСкладовОтгрузки = "НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL";
		
	Иначе
		
		УсловиеОтбораСкладовОтгрузки = "ИСТИНА";
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		УсловиеОтбораПоНаличию = "Таблица.ВНаличии > 0";
		
		ВыражениеИсходноеНазначение = "Таблица.Назначение";
		ВыражениеНовоеНазначение    = "НЕОПРЕДЕЛЕНО";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		
		УсловиеОтбораПоНаличию = "Таблица.ВНаличии > 0";
		
		ВыражениеИсходноеНазначение = "Таблица.НазначениеИсточник";
		ВыражениеНовоеНазначение    = "ВЫБОР
									  |   КОГДА Таблица.НазначениеИсточник <> &Назначение
									  |      ТОГДА &Назначение
									  |   ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
									  |КОНЕЦ";
		
	Иначе
		
		УсловиеОтбораПоНаличию = "ИСТИНА";
		
		ВыражениеИсходноеНазначение = "Таблица.НазначениеИсточник";
		ВыражениеНовоеНазначение    = "Таблица.Назначение";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСкладовОтгрузки", УсловиеОтбораСкладовОтгрузки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоНаличию",       УсловиеОтбораПоНаличию);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИсходноеНазначение",  ВыражениеИсходноеНазначение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеНовоеНазначение",     ВыражениеНовоеНазначение);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВсегоТаблиц = Результат.Количество();
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаЗаполненияКорректировки", Результат[ВсегоТаблиц - 2].Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаИтогов", Результат[ВсегоТаблиц - 1].Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает признак того, имеются ли необходимые для обеспечения переданного назначения
// товары в свободном остатке на складах или зарезервированные в других заказах.
//
// Параметры:
//  Назначение	 - СправочникСсылка.Назначения -
//  Заказ		 - ДокументСсылка - Заказ, по товарам которого необходимо ограничить полученный список потребности назначения
//  ВидОперации	 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - Вид операции заказа
//  ТоварыОтбор  - ТаблицаЗначений, Неопределено - Содержит колонки:
//                  * Номенклатура   - СправочникСсылка.Номенклатура - 
//                  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//                  * Склад          - СправочникСсылка.Склады - 
//
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьДоступныйРезервОстаток(Назначение, Заказ, ВидОперации, ТоварыОтбор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоРезервирование = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать);
	
	ТребуемыеТовары         = ?(ТоварыОтбор = Неопределено, МатериалыИзТабличнойЧастиДокумента(Заказ), ТоварыОтбор);
	ЕстьОтборПоНоменклатуре = ЗначениеЗаполнено(ТребуемыеТовары);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Назначение",      Назначение);
	Запрос.УстановитьПараметр("ТребуемыеТовары", ТребуемыеТовары);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяКорректировка", Неопределено);
	
	ТекстыЗапроса = Новый Массив(2);
	ТекстыЗапроса[0] = ВременнаяТаблицаПотребности(ВидОперации, Ложь, ЕстьОтборПоНоменклатуре);
	
	ТекстыЗапроса[1] =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК ТаблицаОтбора";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Если ЭтоРезервирование Тогда
		ТекстЗапроса = ВременнаяТаблицаСвободныеОстатки() + ТекстРазделителяЗапросов()
		+ ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, Ложь);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	
	Если Не ЭтоРезервирование Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|		ОбеспеченоПодНазначение.ВНаличии КАК НаличиеПодЗаказ
			|	ИЗ
			|		ВТОбеспечениеЗаказовОстатки КАК ОбеспеченоПодНазначение
			|	ГДЕ
			|		ОбеспеченоПодНазначение.ВНаличии > 0";
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(Таблица.Доступно) КАК Доступно
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЕСТЬNULL(ОстаткиПоНоменклатуре.Количество, 0) КАК Доступно
			|	ИЗ
			|		ВтСвободныеОстатки КАК ОстаткиПоНоменклатуре
			|	ГДЕ
			|		ОстаткиПоНоменклатуре.Количество > 0
			|		И НЕ ОстаткиПоНоменклатуре.Количество ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЕСТЬNULL(ДоступноВДругихЗаказах.НаличиеПодЗаказ, 0)
			|	ИЗ
			|		ВтОбеспечениеЗаказовОстаткиНазначений КАК ДоступноВДругихЗаказах
			|	ГДЕ
			|		ДоступноВДругихЗаказах.НаличиеПодЗаказ > 0
			|		И НЕ ДоступноВДругихЗаказах.НаличиеПодЗаказ ЕСТЬ NULL) КАК Таблица
			|
			|ИМЕЮЩИЕ
			|	НЕ СУММА(Таблица.Доступно) ЕСТЬ NULL И
			|	СУММА(Таблица.Доступно) > 0";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция проверяет что по назначению есть товары с действием Обеспечивать обособленно.
//
// Параметры:
//  Назначение	 - СправочникСсылка.Назначения	 -
//
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьТоварыКОбособленномуОбеспечению(Назначение) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасовДвижения
	|ГДЕ
	|	РаспределениеЗапасовДвижения.Назначение = &Назначение
	|		И РаспределениеЗапасовДвижения.Склад ССЫЛКА Справочник.Склады
	|		И РаспределениеЗапасовДвижения.Активность";
	
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Расчитывает поле количество в переданной таблице значений для снятия текущего обособленного резерва.
//
// Параметры:
//  Таблица							- ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - количество
//		* Отметка					 - Булево - признак использования количества в алгоритмах
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа
//	СнятьИзлишекРезервов		 - Булево - признак того что алгоритм должен выставить в колонке количество излишек обеспечения.
//											при значении Ложь колонка Количество будет заполнена данным колонки Обеспечено.
//
Процедура СнятьРезервы(Таблица, СнятьИзлишекРезервов = Истина) Экспорт
	
	СтруктураКлючевыхПолей = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	Потребность = 0;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если СнятьИзлишекРезервов Тогда
			
			// Снять излишние резервы
			// Таблица отсортирована по приоритетности складов. На первых складах необходимо оставить максимальное количество товара.
			Если Не (СтруктураКлючевыхПолей.ИсходноеНазначение = Строка.ИсходноеНазначение
				И СтруктураКлючевыхПолей.Номенклатура = Строка.Номенклатура
				И СтруктураКлючевыхПолей.Характеристика = Строка.Характеристика
				И СтруктураКлючевыхПолей.Склад = Строка.Склад)
				И Строка.ПотребностьОсновногоСклада = Истина Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
				Потребность = Строка.Потребность;
			КонецЕсли;
			
			Если Потребность > 0 Тогда
				Строка.Количество = Строка.ВНаличии - Потребность;
				Потребность = Потребность - Строка.ВНаличии;
			Иначе
				Строка.Количество = Строка.ВНаличии;
			КонецЕсли;
			
			Если Строка.Количество > 0 Тогда
				Строка.Отметка = Истина;
			Иначе
				Строка.Отметка = Ложь;
			КонецЕсли;
		Иначе
			
			// Снять все резервы
			Строка.Количество = Строка.ВНаличии;
			Если Строка.Количество > 0 Тогда
				Строка.Отметка = Истина;
			Иначе
				Строка.Отметка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Расчитывает поле количество в переданной таблице значений для установки обособленного резерва.
//
// Параметры:
//  Таблица							- ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - количество
//		* Отметка					 - Булево - признак использования количества в алгоритмах
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа.
//
Процедура УстановитьРезервы(Таблица) Экспорт
	
	СтруктураКлючевыхПолей = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	Потребность = 0;
	
	Для Каждого Строка Из Таблица Цикл
		
		// Таблица отсортирована по приоритетности складов. На первых складах необходимо зарезервировать максимальное
		// количество товара.
		
		Если Не (СтруктураКлючевыхПолей.Номенклатура = Строка.Номенклатура
			И СтруктураКлючевыхПолей.Характеристика = Строка.Характеристика
			И СтруктураКлючевыхПолей.ИсходноеНазначение = Строка.ИсходноеНазначение 
			И СтруктураКлючевыхПолей.Склад = Строка.Склад)
			И Строка.ПотребностьОсновногоСклада Тогда
			ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
			Потребность = Строка.Потребность - Строка.ВНаличии - Строка.ОбеспеченоОжидается;
		КонецЕсли;
		
		Если Строка.ПотребностьОсновногоСклада Тогда
			Если Не ЗначениеЗаполнено(Строка.ИсходноеНазначение) Тогда
				Если Потребность > 0 Тогда
					Если Строка.СвободныйОстаток > Потребность Тогда
						Строка.Количество = Потребность;
						Потребность = 0;
					Иначе
						Строка.Количество = Строка.СвободныйОстаток;
						Потребность = Потребность - Строка.СвободныйОстаток;
					КонецЕсли;
					Строка.Отметка = Строка.СвободныйОстаток > 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыТЧ(Товары)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ИспользоватьАдресноеХранение
	|							И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьАдресноеХранение
	|						И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьСкладскиеПомещения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(,"НомерСтроки,Склад,Помещение"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Строка = Товары[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ИспользоватьАдресноеХранение,ИспользоватьСкладскиеПомещения");
	КонецЦикла;
	
КонецПроцедуры

// Непосредственное заполнение табличной части Товары документа КорректировкаНазначенияТоваров
// обособленными резервами по переданному назначению.
//
// Параметры:
//  Назначение					 - СправочникСсылка.Назначения - Назначение по которому необходимо полученить данные обособленного обеспечения
//  Организация					 - СправочникСсылка.Организации -
//  ТекущаяКорректировка		 - ДокументСсылка.КорректировкаНазначенияТоваров - текущая корректировка, для сторнирования ее движений
//  ВидОперации					 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - вид операции текущего/создаваемого
//  																		документа КорректировкаНазначенияТоваров
//  Товары						 - ДанныеФормыКоллекция - табличная часть Товары корректировки
//  ЗаполнятьДополнительныеПоля	 - Булево - признак необходимости заполнения в ТЧ Товары служебных полей.
//
Процедура ЗаполнитьПоОснованию(Назначение, Организация, ТекущаяКорректировка, ВидОперации, Товары, ЗаполнятьДополнительныеПоля = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		
		РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение, "Заказ");
		
		// Для толкающих назначений запрещено автоматическое заполнение ТЧ Товары
		Если Не ЗначениеЗаполнено(РеквизитыНазначения.Заказ) Тогда
			Возврат;
		КонецЕсли;
		
		Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, РеквизитыНазначения.Заказ);
		
		СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
			Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
		
		СтруктураЗаполнения = ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, Заказ, ТекущаяКорректировка, Ложь, Организация);
		Таблица = СтруктураЗаполнения.ТаблицаЗаполненияКорректировки;
		
		ТаблицаПомещенияЯчейки = ТаблицаПомещенияЯчейкиПоТоварам(Таблица, ТекущаяКорректировка, Ложь);
		
		// В Таблица на данном этапе количество соответствует единице измерения номенклатуры.
		Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		СлитьТаблицыПоСкладуИПомещениям(Таблица, ТаблицаПомещенияЯчейки);
		
		СтрокиКУдалению = Новый Массив();
		
		Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
			ИндексСКонца = Таблица.Количество() - ИндексСтроки - 1;
			Если Таблица[ИндексСКонца].Количество <= 0 Тогда
				СтрокиКУдалению.Добавить(Таблица[ИндексСКонца]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Таблица.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если Таблица.Количество() > 0 Тогда
			
			ПостобработкаТаблицыТовары(Таблица, ВидОперации, Организация);
			
			Товары.Загрузить(Таблица);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить(
				"ПересчитатьКоличествоУпаковок",
				ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);
			
			Если ЗаполнятьДополнительныеПоля Тогда
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", 
					Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 
					Новый Структура("Номенклатура", "ТипНоменклатуры"));
				
				НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Товары, СтруктураДействий);
				
				ЗаполнитьСлужебныеРеквизитыТЧ(Товары);
				
				Для Каждого Строка Из Товары Цикл
					
					ПараметрыПомещенияЯчейки = Новый Структура();
					ПараметрыПомещенияЯчейки.Вставить("Склад", Строка.Склад);
					ПараметрыПомещенияЯчейки.Вставить("Помещение", Строка.Помещение);
					ПараметрыПомещенияЯчейки.Вставить("Дата", ТекущаяДатаСеанса());
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ЗаполнитьПризнакИспользованияПомещений", ПараметрыПомещенияЯчейки);
					СтруктураДействий.Вставить("ЗаполнитьПризнакАдресногоХранения", ПараметрыПомещенияЯчейки);
					СтруктураДействий.Вставить("ЗаполнитьПризнакНазначения", "ИсходноеНазначение");
					СтруктураДействий.Вставить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", "ИсходноеНазначениеДвиженияПоСкладскимРегистрам");
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстРазделителяЗапросов()
	
	Возврат 
	"
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

// Функция проверяет что у документа (заказа) есть движения по назначениям.
//
// Параметры:
//  Регистратор - ОпределяемыйТип.ОжидаемаяОтгрузка - Заказ, движения которого нужно анализировать.
//
// Возвращаемое значение:
//  Булево - Истина, если в движениях есть не пустое назначение, ложь, в противном случае.
//
Функция ЕстьТоварыКСтороннемуОбособленномуОбеспечению(Регистратор) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку = &Регистратор
		|		И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.Регистратор = &Регистратор
		|		И ТоварыКОтгрузке.Активность";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ВременнаяТаблицаПотребности(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Назначение         КАК Назначение,
		|	Набор.Номенклатура       КАК Номенклатура,
		|	Набор.Характеристика     КАК Характеристика,
		|	Набор.Склад              КАК Склад,
		|	СУММА(Набор.ВНаличии)    КАК ВНаличии,
		|	СУММА(Набор.Обеспечено)  КАК Обеспечено,
		|	СУММА(Набор.Потребность) КАК Потребность
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказовОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаОстатков.Назначение             КАК Назначение,
		|		ТаблицаОстатков.Номенклатура           КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика         КАК Характеристика,
		|		ТаблицаОстатков.Склад                  КАК Склад,
		|		ВЫБОР КОГДА ТаблицаОстатков.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе) ТОГДА
		|					ТаблицаОстатков.Запас
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ                              КАК ВНаличии,
		|		ТаблицаОстатков.Запас                  КАК Обеспечено,
		|		ТаблицаОстатков.КОбеспечению
		|			+ ТаблицаОстатков.ОтложитьОбеспечение
		|			+ ТаблицаОстатков.Резервировать    КАК Потребность
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК ТаблицаОстатков
		|	ГДЕ
		|		&УсловиеТаблицаОстатков
		|			 И ТаблицаОстатков.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			И ТаблицаОстатков.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И ТаблицаОстатков.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаСвободныхОстатков.Назначение     КАК Назначение,
		|		ТаблицаСвободныхОстатков.Номенклатура   КАК Номенклатура,
		|		ТаблицаСвободныхОстатков.Характеристика КАК Характеристика,
		|		ТаблицаСвободныхОстатков.Склад          КАК Склад,
		|		ТаблицаСвободныхОстатков.Свободно       КАК ВНаличии,
		|		ТаблицаСвободныхОстатков.Запас          КАК Обеспечено,
		|		0                                       КАК Потребность
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК ТаблицаСвободныхОстатков
		|	ГДЕ
		|		&УсловиеТаблицаСвободныхОстатков
		|		И ТаблицаСвободныхОстатков.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И ТаблицаСвободныхОстатков.Состояние  = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|		И ТаблицаСвободныхОстатков.Номенклатура.ТипНоменклатуры В(
		|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокумента.Назначение                              КАК Назначение,
		|		ДвиженияДокумента.Номенклатура                            КАК Номенклатура,
		|		ДвиженияДокумента.Характеристика                          КАК Характеристика,
		|		ДвиженияДокумента.Склад                                   КАК Склад,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило КАК ВНаличии,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило КАК Обеспечено,
		|		0                                                         КАК Потребность
		|	ИЗ
		|		РегистрНакопления.РаспределениеЗапасовДвижения КАК ДвиженияДокумента
		|	ГДЕ
		|		&УсловиеТаблицаДвижений
		|			И ДвиженияДокумента.Активность
		|			И ДвиженияДокумента.Регистратор = &ТекущаяКорректировка) КАК Набор
		|	
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение, Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|	
		|ИМЕЮЩИЕ
		|	&УсловиеГруппировкиНабора = ИСТИНА";
		
	УсловиеТаблицаОстатков = "ИСТИНА";
	УсловиеТаблицаДвижений = "ИСТИНА";
	УсловиеГруппировкиНабора = "ИСТИНА";
	УсловиеТаблицаСвободныхОстатков = "ЛОЖЬ";
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям И ЕстьОтборПоОрганизации Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.Назначение.Заказ.Организация = &Организация";
		УсловиеТаблицаДвижений      = "ДвиженияДокумента.Назначение.Заказ.Организация = &Организация";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ "
			|	И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		УсловиеТаблицаДвижений = УсловиеТаблицаДвижений
			+ "
			|	И НЕ (ДвиженияДокумента.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ДвиженияДокумента.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		УсловиеГруппировкиНабора    = "СУММА(Набор.ВНаличии) > 0";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям И Не ЕстьОтборПоОрганизации Тогда
		
		УсловиеТаблицаОстатков      = "ИСТИНА";
		УсловиеТаблицаДвижений      = "ИСТИНА";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ "
			|	И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		УсловиеТаблицаДвижений = УсловиеТаблицаДвижений
			+ "
			|	И НЕ (ДвиженияДокумента.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ДвиженияДокумента.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		УсловиеГруппировкиНабора    = "СУММА(Набор.ВНаличии) > 0";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.Назначение = &Назначение";
		УсловиеТаблицаДвижений      = "ДвиженияДокумента.Назначение = &Назначение";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ "
			|	И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		УсловиеТаблицаДвижений = УсловиеТаблицаДвижений
			+ "
			|	И НЕ (ДвиженияДокумента.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ДвиженияДокумента.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		УсловиеГруппировкиНабора    = "СУММА(Набор.ВНаличии) > 0";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.Назначение = &Назначение";
		УсловиеТаблицаДвижений      = "ДвиженияДокумента.Назначение = &Назначение";
		УсловиеГруппировкиНабора    = "ИСТИНА";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		
		УсловиеГруппировкиНабора    = "СУММА(Набор.ВНаличии) > 0";
		
		Если ЕстьОтборПоОрганизации Тогда
			УсловиеТаблицаОстатков = УсловиеТаблицаОстатков +
				" И ТаблицаОстатков.Назначение.Заказ.Организация = &Организация"
		КонецЕсли;
		
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ "
			|	И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			|	И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ "
			|	И (ТаблицаОстатков.Назначение <> &Назначение
			|			И (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика, 2) В (
			|				ВЫБРАТЬ
			|					ВТТребуемыеТовары.Номенклатура,
			|					ВТТребуемыеТовары.Характеристика,
			|					ВТТребуемыеТовары.ПоНазначению
			|				ИЗ
			|					ВТТребуемыеТовары)
			|			ИЛИ Назначение = &Назначение
			|				И (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика, ТаблицаОстатков.Склад, 1) В(
			|					ВЫБРАТЬ
			|						ВТТребуемыеТовары.Номенклатура,
			|						ВТТребуемыеТовары.Характеристика,
			|						ВТТребуемыеТовары.Склад,
			|						ВТТребуемыеТовары.ПоНазначению
			|					ИЗ
			|						ВТТребуемыеТовары))";
		УсловиеТаблицаДвижений = СтрЗаменить(УсловиеТаблицаОстатков, "ТаблицаОстатков.", "ДвиженияДокумента.");
		
		УсловиеТаблицаСвободныхОстатков =
		"ИСТИНА В
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИСТИНА
		|	ИЗ
		|		ВТТребуемыеТовары КАК ВТТребуемыеТовары
		|	ГДЕ
		|		ВТТребуемыеТовары.Номенклатура     = ТаблицаСвободныхОстатков.Номенклатура
		|		И ВТТребуемыеТовары.Характеристика = ТаблицаСвободныхОстатков.Характеристика
		|		И ВТТребуемыеТовары.ПоНазначению   = 2)";
		
	КонецЕсли;
	
	Если ЕстьОтборПоНоменклатуре Тогда
		
		ТекстЗапросаВТТребуемыеТовары = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	&Склад                КАК Склад,
		|	&ПоНазначению         КАК ПоНазначению
		|ПОМЕСТИТЬ ВТТребуемыеТовары
		|ИЗ
		|	&ТребуемыеТовары КАК Товары
		|
		|;
		|";
		
		ПолеСклад        = "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
		ПолеПоНазначению = "0";
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
			ПолеСклад        = "Товары.Склад";
			ПолеПоНазначению = "Товары.ПоНазначению";
		Иначе
			УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
				+ " И (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика) В (ВЫБРАТЬ Товары.Номенклатура, Товары.Характеристика ИЗ ВТТребуемыеТовары КАК Товары)";
		КонецЕсли;
		
		ТекстЗапросаВТТребуемыеТовары = СтрЗаменить(ТекстЗапросаВТТребуемыеТовары, "&Склад",        ПолеСклад);
		ТекстЗапросаВТТребуемыеТовары = СтрЗаменить(ТекстЗапросаВТТребуемыеТовары, "&ПоНазначению", ПолеПоНазначению);
		
		ТекстЗапроса = ТекстЗапросаВТТребуемыеТовары + ТекстЗапроса;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицаОстатков", УсловиеТаблицаОстатков);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицаДвижений", УсловиеТаблицаДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеГруппировкиНабора", УсловиеГруппировкиНабора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицаСвободныхОстатков", УсловиеТаблицаСвободныхОстатков);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9afe1309-fd83-44a3-829d-bcb21c5cee14");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаНазначенияТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет поле ""Идентификатор строки"" в табличных частях.';
									|en = 'Populates ""Line ID"" field in tables.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК Документ
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК ТабЧасть
	|		ГДЕ
	|			ТабЧасть.Ссылка = Документ.Ссылка
	|			И ТабЧасть.ИдентификаторСтроки = """")";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Ссылка = Документ.Ссылка;
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено Тогда
				ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДокументОбъект, "ВидыЗапасов");
			КонецЕсли;
			
			Если ДокументОбъект <> Неопределено И ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	СинонимТаблицыДокумента = "";
	ПолноеИмяДокумента = "Документ.КорректировкаНазначенияТоваров";
	ПереопределениеРасчетаПараметров = Новый Структура;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
		
	Если ИмяРегистра = "РаспределениеЗапасовДвижения" Тогда
		
		ТекстыЗапроса = Новый СписокЗначений();
		СинонимТаблицыДокумента = "ТабЧасть";
		ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиентаПроверкаТипаНазначения(ОбъектОснование) Экспорт
	
	РезультатПроверки = Новый Структура("ТекстОшибки", Неопределено);
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Назначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(ОбъектОснование);
		
		Если ЗначениеЗаполнено(Назначение)
			И Назначение.ТипНазначения = Перечисления.ТипыНазначений.ПоставкаПодПринципала Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Для данного типа назначения корректировка недоступна. Необходимо переделать исходные документы.';
												|en = 'No adjustment is available for this type of assignment. It is necessary to rework the source documents.'");
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли
