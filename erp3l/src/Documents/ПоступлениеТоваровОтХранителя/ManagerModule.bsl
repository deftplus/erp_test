
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Соглашение";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Организация, Соглашение";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Менеджер", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Менеджер";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Соглашение";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Склад", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Контрагент";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Контрагент";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"НаименованиеВходящегоДокумента", Параметры);	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("Продажи");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	
	ПоступлениеТоваровОтХранителяЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  СписокЗначений, Структура - Данные документа для проведения
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаявкиНаВозвратТоваровОтКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(Документ, Запрос, ТекстыЗапроса, Регистры);
		
		ПоступлениеТоваровОтХранителяЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//	Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Добавляет команду создания документа "Поступление товаров от хранителя".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровОтХранителя) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор       = Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик =        "СозданиеНаОснованииУТКлиент.ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Менеджер            = Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление       = ОбщегоНазначенияУТ.ПредставлениеОбъекта(
															Метаданные.Документы.ПоступлениеТоваровОтХранителя);
		КомандаСоздатьНаОсновании.РежимЗаписи         = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//	Параметры - Структура - Вспомогательные параметры. Для чтения.
//		См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя") Тогда
		КомандаСоздания = Документы.АктОРасхожденияхПослеПриемки.ДобавитьКомандуСоздатьНаОсновании(
							КомандыСозданияНаОсновании);
		
		Если КомандаСоздания <> Неопределено Тогда
			КомандаСоздания.Представление = НСтр("ru = 'Акт о расхождениях после поступления от хранителя';
												|en = 'Act of discrepancies after receipt from the custodian'");
		КонецЕсли;
	КонецЕсли;
	
	Документы.ПередачаТоваровХранителю.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ПоступлениеТоваровОтХранителяЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Назначения

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
// Возвращаемое значение:
//	Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	//++ НЕ УТКА
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеПродукция22));
	//-- НЕ УТКА

	// Данные по документу передачи.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы,
																	"ДанныеПередачи",
																	Ложь,
																	"Объект.Товары.Назначение");
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	
	Возврат МакетФормы;
	
КонецФункции

// Порядок обработки документа при изменении направления деятельности.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
// см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "Товары";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры,КодСтроки");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Товары", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад,ХозяйственнаяОперация,Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//	Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПоступлениеТоваровОтХранителя";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	ПараметрыУказанияСерий.Дата         = Объект.Дата;
	
	ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийНаСкладах");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПереданныхТоваров");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий.
//
// Параметры:
//	ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий                  КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийНаСкладах         КАК СтатусУказанияСерийНаСкладах,
	|	Товары.СтатусУказанияСерийПереданныхТоваров КАК СтатусУказанияСерийПереданныхТоваров,
	|	Товары.Количество          КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	Товары.Назначение        КАК Назначение,
	|	Товары.Серия             КАК Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	Серии.Номенклатура   КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение     КАК Назначение,
	|	Серии.Количество     КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	Серии.Номенклатура      КАК Номенклатура,
	|	Серии.Характеристика    КАК Характеристика,
	|	Серии.Назначение        КАК Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 4
	|ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийНаСкладах КАК СтарыйСтатусУказанияСерийНаСкладах,
	|	Товары.СтатусУказанияСерийПереданныхТоваров КАК СтарыйСтатусУказанияСерийПереданныхТоваров,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА &ТолькоСерииДляСебестоимости
	|			ТОГДА 0
	|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 8
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|				И (НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|					ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении)
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА
	|							ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ
	|						ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ                      КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах
	|								ТОГДА
	|									ВЫБОР
	|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 18
	|										ИНАЧЕ 17
	|									КОНЕЦ
	|								ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерийПереданныхТоваров
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|			И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|			И ПолитикиУчетаСерий.Склад = &Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 5
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки                          КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий                  КАК СтатусУказанияСерийНаСкладах,
	|	Статусы.СтатусУказанияСерийПереданныхТоваров КАК СтатусУказанияСерийПереданныхТоваров,
	|	ВЫБОР
	|		КОГДА Статусы.СтатусУказанияСерий = 0
	|			ТОГДА Статусы.СтатусУказанияСерийПереданныхТоваров
	|		ИНАЧЕ Статусы.СтатусУказанияСерий
	|	КОНЕЦ                                        КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Статусы.СтатусУказанияСерий = 0
	|			ТОГДА Статусы.СтатусУказанияСерийПереданныхТоваров
	|		ИНАЧЕ Статусы.СтатусУказанияСерий
	|	КОНЕЦ <> Статусы.СтарыйСтатусУказанияСерий
	|	ИЛИ Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерийНаСкладах
	|	ИЛИ Статусы.СтатусУказанияСерийПереданныхТоваров <> Статусы.СтарыйСтатусУказанияСерийПереданныхТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	Возврат ПоступлениеТоваровОтХранителяЛокализация.ТекстОтраженияВРеглУчете();
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, необходимых для отражения
//	в регламентированном учете.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы отражения в регл учете
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат ПоступлениеТоваровОтХранителяЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Заполнение

// Формирует структуру для создания поступления товаров от хранителя.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылку на заявку на возврат товаров от клиента
//  СвойстваЗаказов - Структура - служебная структура для общих механизмов
//
// Возвращаемое значение:
//  Структура - Реквизиты шапки для заполнения поступления товаров от хранителя.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
		|	Заказ.Организация           КАК Организация,
		|	Заказ.Подразделение         КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Заказ.Склад.ЭтоГруппа
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ Заказ.Склад
		|	КОНЕЦ                       КАК Склад,
		|	Заказ.Сделка                КАК Сделка,
		|	Заказ.Партнер               КАК Партнер,
		|	Заказ.Контрагент            КАК Контрагент,
		|	Заказ.Соглашение            КАК Соглашение,
		|	Заказ.Договор               КАК Договор,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Заказ.ЦенаВключаетНДС       КАК ЦенаВключаетНДС
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	Передача.Организация           КАК Организация,
		|	Передача.Подразделение         КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Передача.Склад.ЭтоГруппа
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ Передача.Склад
		|	КОНЕЦ                          КАК Склад,
		|	Передача.Сделка                КАК Сделка,
		|	Передача.Партнер               КАК Партнер,
		|	Передача.Контрагент            КАК Контрагент,
		|	Передача.Соглашение            КАК Соглашение,
		|	Передача.Договор               КАК Договор,
		|	Передача.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Передача.ЦенаВключаетНДС       КАК ЦенаВключаетНДС
		|ИЗ
		|	Документ.ПередачаТоваровХранителю КАК Передача
		|ГДЕ
		|	Передача.Ссылка = &Заказ");
	
	Запрос.УстановитьПараметр("Заказ", МассивСсылок[0]);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОтХранителя);
	
	РеквизитыШапки = Новый Структура("ХозяйственнаяОперация, Организация, Подразделение, Склад, Сделка, Партнер,
		|Контрагент, Соглашение, Договор, НаправлениеДеятельности, ЦенаВключаетНДС");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыШапки, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыШапки;
	
КонецФункции

// Возвращает параметры заполнения документа по заявкам на возврат и ордерам поступления.
//
// Возвращаемое значение:
//	Структура - параметры заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("МассивЗаказов",     Неопределено);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта",      Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", Ложь);
	
	ПараметрыЗаполнения.Вставить("ДополнятьСериямиПоЗаявке", Ложь);
	
	ПараметрыЗаполнения.Вставить("АктОРасхождениях",      Документы.АктОРасхожденияхПослеПриемки.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ОснованиеАкта",         Документы.ПоступлениеТоваровОтХранителя.ПустаяСсылка());
	
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",        Неопределено);
	ПараметрыЗаполнения.Вставить("Организация",           Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Склад",                 Справочники.Склады.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Подразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",     "ПоступлениеТоваровОтХранителя");
	ПараметрыЗаполнения.Вставить("ИмяРегистраЗаказ", "ТоварыКПоступлению");
	ПараметрыЗаполнения.Вставить("ИмяПоляЗаказ",     "Распоряжение");
	
	ПараметрыЗаполнения.Вставить("КлючевыеПоля", "Номенклатура, Характеристика, Назначение, Серия");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Формирует параметры необходимые для проверки ввода накладной на основании распоряжений.
// (см. функцию СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа)
//
// Параметры:
//  Распоряжения - Массив - список распоряжений, на основании которых оформляется накладная
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - вид операции оформляемой накладной.
//
// Возвращаемое значение:
//  Структура - данные для проверки ввода.
//
Функция ДанныеДляПроверкиВводаНаОсновании(Распоряжения, ХозяйственнаяОперация = Неопределено) Экспорт
	
	ДанныеДляВвода = Новый Структура("Основание, Статус, РаспоряженияКОформлению, ЕстьОтгрузить, МожноСгруппировать");
	ДанныеДляВвода.Вставить("Склад");
	ДанныеДляВвода.Вставить("ХозяйственнаяОперация");
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Распоряжение.Ссылка КАК Основание,
		|	Распоряжение.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Распоряжение.Склад.ЭтоГруппа
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ Распоряжение.Склад
		|	КОНЕЦ               КАК Склад,
		|	Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Распоряжение
		|ГДЕ
		|	Распоряжение.Ссылка В(&Распоряжения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Распоряжение.Ссылка КАК Основание,
		|	НЕОПРЕДЕЛЕНО        КАК Статус,
		|	ВЫБОР
		|		КОГДА Распоряжение.Склад.ЭтоГруппа
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ Распоряжение.Склад
		|	КОНЕЦ               КАК Склад,
		|	Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ПередачаТоваровХранителю КАК Распоряжение
		|ГДЕ
		|	Распоряжение.Ссылка В(&Распоряжения)
		|");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТоварыРаспоряжения
		|ГДЕ
		|	ТоварыРаспоряжения.Ссылка В(&Распоряжения)
		|	И НЕ ТоварыРаспоряжения.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ПередачаТоваровХранителю.Товары КАК ТоварыРаспоряжения
		|ГДЕ
		|	ТоварыРаспоряжения.Ссылка В(&Распоряжения)
		|");
	ТекстыЗапросов.Добавить(РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОстатки("ВтОстаткиКОформлению",
		Новый Структура("ДокументПоступления", "Распоряжения"), "КОформлению <> 0"));
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Набор.Распоряжение                    КАК РаспоряженияКОформлению,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Набор.Склад) > 1 КАК РазныеСклады
		|ИЗ
		|(	ВЫБРАТЬ
		|		ОстаткиКОформлению.Распоряжение КАК Распоряжение,
		|		ОстаткиКОформлению.Склад        КАК Склад
		|	ИЗ
		|		ВтОстаткиКОформлению КАК ОстаткиКОформлению
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Распоряжение,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента.Склад.ЭтоГруппа
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ТаблицаДокумента.Склад
		|		КОНЕЦ                   КАК Склад
		|	ИЗ
		|		Документ.ПередачаТоваровХранителю КАК ТаблицаДокумента
		|	ГДЕ
		|		ТаблицаДокумента.Ссылка В (&Распоряжения)) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Распоряжение");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете()));
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("Регистратор", Неопределено);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Количество() = 1 Тогда
			ДанныеДляВвода.Основание     = Выборка.Основание;
			ДанныеДляВвода.Статус        = Выборка.Статус;
		КонецЕсли;
		ДанныеДляВвода.Склад                 = Выборка.Склад;
		ДанныеДляВвода.ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
		ДанныеДляВвода.ЕстьОтгрузить         = Не Результат[1].Пустой();
	КонецЕсли;
	
	КОформлению = Результат[3].Выгрузить();
	ДанныеДляВвода.РаспоряженияКОформлению = КОформлению.ВыгрузитьКолонку("РаспоряженияКОформлению");
	
	Возврат ДанныеДляВвода;
	
КонецФункции

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одной накладной.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Выполняет инициализацию параметров заполнения документа по данным документа.
//
// Параметры:
//	ПараметрыЗаполнения	 - Структура	 - параметры заполнения документа по умолчанию.
//	РеквизитыШапки		 - Структура	 - данные документа, на основании которых будет выполняться заполнение параметров.
//	МассивЗаказов		 - Массив		 - ссылки на заявки, по которым будет выполняться заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов			= МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки			= РеквизитыШапки;
	ПараметрыЗаполнения.Организация				= РеквизитыШапки.Организация;
	ПараметрыЗаполнения.ХозяйственнаяОперация	= РеквизитыШапки.ХозяйственнаяОперация;
	ПараметрыЗаполнения.Склад					= РеквизитыШапки.Склад;
	ПараметрыЗаполнения.Подразделение			= РеквизитыШапки.Подразделение;
	
КонецПроцедуры

// Возвращает таблицу Товары документа поступления товаров от хранителя.
//
// Параметры:
//	Накладная - ДокументСсылка.ПоступлениеТоваровОтХранителя - ссылка на документ поступления товаров от хранителя.
//
// Возвращаемое значение:
//	ТаблицаЗначений - табличная часть документа поступления товаров от хранителя:
//	* НомерСтроки                - Число - 
//	* Номенклатура               - СправочникСсылка.Номенклатура - 
//	* Характеристика             - СправочникСсылка.ХарактеристикиНоменклатуры - 
//	* Назначение                 - СправочникСсылка.Назначения - 
//	* Серия                      - СправочникСсылка.СерииНоменклатуры - 
//	* СтатусУказанияСерий        - Число - 
//	* Упаковка                   - СправочникСсылка.УпаковкиЕдиницыИзмерения - 
//	* Количество                 - Число - 
//	* КоличествоВОрдере          - Число - 
//	* КоличествоУпаковок         - Число - 
//	* Цена                       - Число - 
//	* СтавкаНДС                  - СправочникСсылка.СтавкиНДС - 
//	* НомерГТД                   - СправочникСсылка.НомераГТД - 
//	* АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - 
//
Функция ДанныеТаблицыТоварыДокумента(Накладная) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки                КАК НомерСтроки,
	|	Таблица.Номенклатура               КАК Номенклатура,
	|	Таблица.Характеристика             КАК Характеристика,
	|	Таблица.Назначение                 КАК Назначение,
	|	Таблица.Серия                      КАК Серия,
	|	Таблица.СтатусУказанияСерий        КАК СтатусУказанияСерий,
	|	Таблица.Упаковка                   КАК Упаковка,
	|	Таблица.Количество                 КАК Количество,
	|	Таблица.КоличествоУпаковок         КАК КоличествоУпаковок,
	|	Таблица.Цена                       КАК Цена,
	|	Таблица.СтавкаНДС                  КАК СтавкаНДС,
	|	Таблица.НомерГТД                   КАК НомерГТД,
	|	Таблица.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Накладная";
	
	Запрос.УстановитьПараметр("Накладная", Накладная);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Выполняет заполнение документа поступления товаров от хранителя по данным подобранного заказа.
//
// Параметры:
//	Объект				 - ДокументОбъект.ПоступлениеТоваровОтХранителя	 - документ поступления товаров от хранителя.
//	ПараметрыЗаполнения	 - Структура - параметры заполнения документа по умолчанию.
//	МассивЗаказов		 - Массив	 - ссылки на заявки, по которым будет выполняться заполнение.
//
Процедура ЗаполнитьШапкуДокументаПоЗаказу(Объект, ПараметрыЗаполнения, МассивЗаказов) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РеквизитыШапки);
	
	Объект.Распоряжение = МассивЗаказов[0];
	
КонецПроцедуры

// Выполняет заполнение табличной части документа по заказам и складским ордерам.
//
// Параметры:
//	Товары				 - ТаблицаЗначений - табличная часть документа поступления товаров от хранителя.
//	Регистратор			 - ДокументСсылка.ПоступлениеТоваровОтХранителя - ссылка на документ поступления товаров от хранителя.
//	ПараметрыЗаполнения	 - Структура - параметры заполнения документа.
//
Процедура ЗаполнитьПоЗаказамОрдерам(Товары, Регистратор, ПараметрыЗаполнения) Экспорт
	
	ОтборПоСкладу     = ЗначениеЗаполнено(ПараметрыЗаполнения.Склад);
	ОтборПоНомерамГТД = (ПараметрыЗаполнения.МассивЗаказов <> Неопределено
							И ТипЗнч(ПараметрыЗаполнения.МассивЗаказов[0]) = Тип("ДокументСсылка.ПередачаТоваровХранителю"))
						Или ЗначениеЗаполнено(ПараметрыЗаполнения.АктОРасхождениях);
	
	// Если не нужно заполнять по ордеру, передаем пустые параметры запроса - по ордерам вернется пустая таблица.
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		РаспоряженияДляОрдеров = ПараметрыЗаполнения.МассивЗаказов;
		РегистраторДляОрдеров  = Регистратор;
	Иначе
		РаспоряженияДляОрдеров = Неопределено;
		РегистраторДляОрдеров  = Неопределено;
	КонецЕсли;
	
	// Заказы
	
	// 1. По заявкам
	Отбор = Новый Структура("ДокументПоступления", "Распоряжения");
	
	Если ОтборПоСкладу Тогда
		Отбор.Вставить("Склад", "Склад");
	КонецЕсли;
	
	ТекстЗапросаРегистраЗаказы = РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОстатки("ВтДанныеУчета",
																							Отбор,
																							"КОформлению <> 0");
	
	ТекстРазделителя = НакладныеСервер.ТекстРазделителяЗапросов();
	
	Отбор = Новый Соответствие;
	Отбор.Вставить("Таблица.Ссылка", "Распоряжения");
	
	ТекстСоединения = " Таблица.Ссылка = ДанныеУчета.Распоряжение
		| И Таблица.Номенклатура = ДанныеУчета.Номенклатура
		| И Таблица.Характеристика = ДанныеУчета.Характеристика
		| И Таблица.Назначение = ДанныеУчета.Назначение";
	
	ТекстЗапросаЗаказ = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ТекстЗапросаТоварыДокумента(Отбор,
		ТекстСоединения,
		ПараметрыЗаполнения.ДополнятьСериямиПоЗаявке);
	
	ТекстЗапроса = ТекстЗапросаРегистраЗаказы + ТекстРазделителя + ТекстЗапросаЗаказ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Регистратор",  Регистратор);
	Запрос.УстановитьПараметр("Распоряжения", ПараметрыЗаполнения.МассивЗаказов);
	
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаказыКолонкиЗаказПоставщику = ТаблицаЗаказы.Колонки.ЗаказПоставщику; // КолонкаТаблицыЗначений
	ТаблицаЗаказыКолонкиЗаказПоставщику.Имя = "Распоряжение";
	
	ТаблицаЗаказы.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	
	// 2. По передачам хранителю
	
	ТаблицаПередачи = ТаблицаЗаказы.СкопироватьКолонки();
	
	Если ПараметрыЗаполнения.МассивЗаказов <> Неопределено
		И ТипЗнч(ПараметрыЗаполнения.МассивЗаказов[0]) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		
		ТекстСоединения = "Таблица.АналитикаУчетаНоменклатурыТоварыУПартнеров = ДанныеУчета.АналитикаУчетаНоменклатуры
							| И Таблица.НомерГТД = ДанныеУчета.НомерГТД";
		
		ТекстПроверкиСоединения = "НЕ ДанныеУчета.АналитикаУчетаНоменклатуры ЕСТЬ NULL";
		
		АналитикиУчетаНоменклатуры = АналитикиУчетаНоменклатурыПоПередачеТоваровХранителю(ПараметрыЗаполнения.МассивЗаказов);
		
		ТекстЗапросаОстаткиКОформлениюПоПередачам = Документы.ПередачаТоваровХранителю.ТекстЗапросаОстаткиКОформлениюПоПередачам("ВтДанныеУчета");
		ТекстЗапросаПередача = Документы.ПередачаТоваровХранителю.ТекстЗапросаТоварыДокумента(Отбор,
																								ТекстСоединения,
																								ТекстПроверкиСоединения);
		
		ТекстЗапроса = ТекстЗапросаОстаткиКОформлениюПоПередачам + ТекстРазделителя + ТекстЗапросаПередача;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Регистратор",  Регистратор);
		Запрос.УстановитьПараметр("Распоряжения", ПараметрыЗаполнения.МассивЗаказов);
		Запрос.УстановитьПараметр("АналитикиУчетаНоменклатуры", АналитикиУчетаНоменклатуры);
		
		Если ОтборПоСкладу Тогда
			Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
		КонецЕсли;
		
		ТаблицаПередачи = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// 3. По актам о расхождениях
	
	ТекстСоединения = " Таблица.Ссылка = ДанныеУчета.Распоряжение
		| И Таблица.Номенклатура = ДанныеУчета.Номенклатура
		| И Таблица.Характеристика = ДанныеУчета.Характеристика
		| И Таблица.Назначение = ДанныеУчета.Назначение
		| И Таблица.НомерГТД = ДанныеУчета.НомерГТД";
	
	ТекстЗапросаОстаткиКОформлениюПоАктам = 
		ТекстЗапросаОстаткиКОформлениюПоАктам("ВтДанныеУчета");
	
	Отбор = Новый Соответствие;
	Отбор.Вставить("Таблица.Ссылка", "ДокументПоступления");
	
	ТекстЗапросаАкт = ТекстЗапросаТоварыДокумента(Отбор, ТекстСоединения);
	
	ТекстЗапроса = ТекстЗапросаОстаткиКОформлениюПоАктам + ТекстРазделителя + ТекстЗапросаАкт;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДокументПоступления", ПараметрыЗаполнения.ОснованиеАкта);
	Запрос.УстановитьПараметр("АктОРасхождениях",    ПараметрыЗаполнения.АктОРасхождениях);
	
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаАктыОРасхождениях = Запрос.Выполнить().Выгрузить();
	
	//
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПередачи, ТаблицаЗаказы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаАктыОРасхождениях, ТаблицаЗаказы);
	
	ТаблицаЗаказыКолонкиКОформлению = ТаблицаЗаказы.Колонки.КОформлению; // КолонкаТаблицыЗначений
	ТаблицаЗаказыКолонкиКОформлению.Имя = "КоличествоВЗаказе";
	
	// Ордера
	Отбор = Новый Соответствие;
	
	Если ОтборПоСкладу Тогда
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(Отбор, "Склад", "&Склад");
	КонецЕсли;
	
	ТекстЗапросаОсталосьОформить = РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОсталосьОформитьПоОрдерам(Ложь,
																												Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОсталосьОформить;
	
	Запрос.УстановитьПараметр("Регистратор",  РегистраторДляОрдеров);
	Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляОрдеров);
	
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаОрдера = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОрдераКолонкиКоличество = ТаблицаОрдера.Колонки.Количество; // КолонкаТаблицыЗначений
	ТаблицаОрдераКолонкиКоличество.Имя = "КоличествоВОрдере";
	
	// Распределение полученных таблиц
	Ключ = ПараметрыЗаполнения.КлючевыеПоля;
	
	Если ОтборПоНомерамГТД Тогда
		Ключ = Ключ + "," + " НомерГТД";
	КонецЕсли;
	
	Товары.Индексы.Добавить(Ключ);
	
	// Добавление количества заказов
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаЗаказы, Товары, "КоличествоВЗаказе", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества заказов
	НакладныеСервер.ДополнитьТаблицу(ТаблицаЗаказы, Товары, "КоличествоВЗаказе");
	
	// Добавление количества ордеров.
	Ключ = ПараметрыЗаполнения.КлючевыеПоля;
	
	// Есть накладные и заказы
	Условие = "[Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть заказы, нет накладных
	Условие = "НЕ [Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть накладные, нет заказов
	Условие = "[Количество], НЕ [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества ордеров
	НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдера, Товары, "КоличествоВОрдере");
	
КонецПроцедуры

// Процедура пересчитывает поле КоличествоУпаковок и другие зависимые поля
//
// Параметры:
//	Товары				 - ДанныеФормыКоллекция	 - табличная часть документа поступления товаров от хранителя.
//	ПараметрыЗаполнения	 - Структура			 - параметры заполнения документа.
//
Процедура ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения) Экспорт
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ПараметрыЗаполнения.РеквизитыШапки);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Для Каждого Строка Из Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТоварыДокумента(Отбор, ТекстСоединения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка                       КАК Ссылка,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	Таблица.НоменклатураНабора           КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора         КАК ХарактеристикаНабора,
	|	Таблица.Назначение                   КАК Назначение,
	|	Таблица.Серия                        КАК Серия,
	|	Таблица.Количество                   КАК Количество,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	Таблица.Цена                         КАК Цена,
	|	Таблица.СтавкаНДС                    КАК СтавкаНДС,
	|	Таблица.Ссылка.Склад                 КАК Склад,
	|	Таблица.НомерГТД                     КАК НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|		ПО &МетодСоединения
	|ГДЕ
	|	НЕ ДанныеУчета.Номенклатура ЕСТЬ NULL
	|И &Отбор";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МетодСоединения", ТекстСоединения);
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			ЛевоеЗначениеУсловия = КлючЗначение.Ключ;
			
			Если КлючЗначение.Ключ = "Склад" Тогда
				ЛевоеЗначениеУсловия = "Таблица.Ссылка.Склад";
			КонецЕсли;
			
			ТекстОтбора = ТекстОтбора
							+ " И "
							+ ЛевоеЗначениеУсловия
							+ " В(&"
							+ КлючЗначение.Значение
							+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Отбор", ТекстОтбора);
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Отбор", "");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиКОформлениюПоАктам(ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Набор.Распоряжение       КАК Распоряжение,
	|	Набор.Распоряжение.Склад КАК Склад,
	|	Набор.Номенклатура       КАК Номенклатура,
	|	Набор.Характеристика     КАК Характеристика,
	|	Набор.Назначение         КАК Назначение,
	|	Набор.Серия              КАК Серия,
	|	Набор.НомерГТД           КАК НомерГТД,
	|	СУММА(Набор.Количество)  КАК КОформлению
	|,&ПОМЕСТИТЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.ДокументОснование КАК Распоряжение,
	|		ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|		ТаблицаТовары.Характеристика    КАК Характеристика,
	|		ТаблицаТовары.Назначение        КАК Назначение,
	|		ТаблицаТовары.Серия             КАК Серия,
	|		ТаблицаТовары.НомерГТД          КАК НомерГТД,
	|		(ТаблицаТовары.КоличествоПоДокументу
	|			- ТаблицаТовары.Количество) КАК Количество
	|	ИЗ
	|		Документ.АктОРасхожденияхПослеПриемки.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Ссылка В(&АктОРасхождениях)
	|		И ТаблицаТовары.ДокументОснование В(&ДокументПоступления)
	|		И ТаблицаТовары.ЗаполненоПоОснованию
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка         КАК Распоряжение,
	|		ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение     КАК Назначение,
	|		ТаблицаТовары.Серия          КАК Серия,
	|		ТаблицаТовары.НомерГТД       КАК НомерГТД,
	|		-ТаблицаТовары.Количество    КАК Количество
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ПоступлениеТоваров
	|			ПО ТаблицаТовары.Ссылка = ПоступлениеТоваров.Ссылка
	|	ГДЕ
	|		ПоступлениеТоваров.Проведен
	|		И ПоступлениеТоваров.ДовозвратПоПоступлению В(&ДокументПоступления)
	|	
	|	) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(Набор.Количество) <> 0
	|";
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ПОМЕСТИТЬ", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ПОМЕСТИТЬ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Возвращает массив допустимых наименований входящих документов.
// 
// Возвращаемое значение:
// 	Массив - массив наименований.
Функция НаименованияВходящихДокументов() Экспорт
	МассивНаименований = Новый Массив();
	МассивНаименований.Добавить(НСтр("ru = 'Поступление';
									|en = 'Receipt'"));
	ПоступлениеТоваровОтХранителяЛокализация.ДополнитьНаименованияВходящихДокументов(МассивНаименований);
	Возврат МассивНаименований
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Распоряжение            КАК Распоряжение,
	|	ДанныеДокумента.Партнер                 КАК Партнер,
	|	ДанныеДокумента.Контрагент              КАК Контрагент,
	|	ДанныеДокумента.Соглашение              КАК Соглашение,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Договор                 КАК Договор,
	|	ДанныеДокумента.Склад                   КАК Склад,
	|	ДанныеДокумента.Валюта                  КАК Валюта,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.Менеджер                КАК Менеджер,
	|	ДанныеДокумента.Сделка                  КАК Сделка,
	|	ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|	ДанныеДокумента.Подразделение           КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ЦенаВключаетНДС         КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ВозвратПереданнойМногооборотнойТары КАК ВозвратПереданнойМногооборотнойТары,
	|	ДанныеДокумента.ДатаВходящегоДокумента  КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеДокумента.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ДанныеДокумента.ВариантПриемкиТоваров   КАК ВариантПриемкиТоваров,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                   КАК ИспользоватьОрдернуюСхемуПриПоступлении,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.Автор                   КАК Автор,
	|	ДанныеДокумента.Исправление             КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент    КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент    КАК ИсправляемыйДокумент,
	|	НастройкиХозяйственныхОпераций.Ссылка   КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя = "ЦенаВключаетНДС" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ИнформацияПоДоговору    = "";
	НомерНаПечать           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер);
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПоступлениеТоваровОтХранителя");
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru = 'По договору ""%Договор%""';
									|en = 'Under the ""%Договор%"" contract'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ИдентификаторМетаданных);
	Запрос.УстановитьПараметр("ВозвратПоРаспоряжению",   ЗначениеЗаполнено(Реквизиты.Распоряжение));
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",         ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("НомерНаПечать",           НомерНаПечать);
	Запрос.УстановитьПараметр("ИнформацияПоДоговору",    ИнформацияПоДоговору);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                        КАК Период,
	|	&ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	&Организация                   КАК Организация,
	|	&Подразделение                 КАК Подразделение,
	|	ТаблицаВидыЗапасов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТаблицаВидыЗапасов.АналитикаПереданнойНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаПереданнойНоменклатурыБезНазначения
	|	КОНЕЦ                          КАК АналитикаУчетаНоменклатуры,
	|	&Партнер                       КАК Склад,
	|	ТаблицаВидыЗапасов.ТипЗапасов  КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов  КАК ВидЗапасов,
	|	&НаправлениеДеятельности       КАК КорНаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                          КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.Склад       КАК КорСклад,
	|	ТаблицаВидыЗапасов.ТипЗапасов  КАК КорТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов  КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.Количество  КАК Количество,
	|	ТаблицаВидыЗапасов.Количество  КАК КорКоличество,
	|	0                              КАК Стоимость,
	|	0                              КАК СтоимостьБезНДС,
	|	0                              КАК СтоимостьРегл
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура         КАК Номенклатура,
	|	ТаблицаСерии.Характеристика       КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                             КАК Назначение,
	|	ТаблицаСерии.Серия                КАК Серия,
	|	ТаблицаСерии.Количество           КАК Количество,
	|	&Партнер                          КАК Отправитель,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) КАК ПомещениеОтправителя,
	|	&Склад                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) КАК ПомещениеПолучателя,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) КАК СкладскаяОперация,
	|	&Ссылка                           КАК Документ,
	|	&Период                           КАК Период,
	|	&Ссылка                           КАК Регистратор,
	|	НЕ &ИспользоватьОрдернуюСхемуПриПоступлении КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Количество,
	|	&Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка),
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента),
	|	&Ссылка,
	|	&Период,
	|	&Ссылка,
	|	НЕ &ИспользоватьОрдернуюСхемуПриПоступлении
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаявкиНаВозвратТоваровОтКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаявкиНаВозвратТоваровОтКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка.Распоряжение      КАК ЗаявкаНаВозвратТоваровОтКлиента,
	|	ТаблицаТовары.Ссылка.Договор           КАК Договор,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК КодСтроки,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ВозвратПоРаспоряжению
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Склад                                  КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Менеджер                               КАК Ответственный,
	|	&Автор                                  КАК Автор,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&ДатаВходящегоДокумента                 КАК ДатаПервичногоДокумента,
	|	&НомерВходящегоДокумента                КАК НомерПервичногоДокумента,
	|	&Исправление                            КАК СторноИсправление,
	|	&СторнируемыйДокумент                   КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент                   КАК ИсправляемыйДокумент,
	|	&НаименованиеВходящегоДокумента         КАК НаименованиеПервичногоДокумента,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                КАК Период,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ВидыЗапасов.АналитикаПереданнойНоменклатуры
	|		ИНАЧЕ ВидыЗапасов.АналитикаПереданнойНоменклатурыБезНазначения
	|	КОНЕЦ                  КАК АналитикаУчетаНоменклатуры,
	|	&Организация           КАК Организация,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиПереданныеПартнерам)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыПереданныеПартнерам)
	|	КОНЕЦ                  КАК РазделУчета,
	|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ВидыЗапасов.Количество КАК Количество,
	|	0                      КАК Стоимость,
	|	0                      КАК КорСтоимость,
	|	0                      КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ВидыЗапасов.ЦеховаяКладовая
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|			КОНЕЦ
	|	КОНЕЦ                  КАК КорРазделУчета,
	|	ВидыЗапасов.ВидЗапасов КАК КорВидЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                  КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО           КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение         КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО           КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО           КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО           КАК СтатьяДоходов,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаДоходов,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО           КАК Партия,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО           КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО           КАК КорАналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО           КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО           КАК КорВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи,
	|	НЕОПРЕДЕЛЕНО           КАК ДокументИсточник,
	|	
	|	ВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	(ВидыЗапасов.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ НЕ &ВозвратПереданнойМногооборотнойТары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                КАК Период,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                  КАК АналитикаУчетаНоменклатуры,
	|	&Организация           КАК Организация,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ВидыЗапасов.ЦеховаяКладовая
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|			КОНЕЦ
	|	КОНЕЦ                  КАК РазделУчета,
	|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ВидыЗапасов.Количество КАК Количество,
	|	0                      КАК Стоимость,
	|	0                      КАК КорСтоимость,
	|	0                      КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО           КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО           КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО           КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО           КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение         КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО           КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО           КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО           КАК СтатьяДоходов,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаДоходов,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО           КАК Партия,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО           КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО           КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО           КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО           КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО           КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО           КАК КорВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение) КАК ТипЗаписи,
	|	&Ссылка                КАК ДокументИсточник,
	|	
	|	ВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	(ВидыЗапасов.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ НЕ &ВозвратПереданнойМногооборотнойТары)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка                        КАК Ссылка,
	|	ИсточникДанных.Ссылка.Распоряжение           КАК Заказ,
	|	ИсточникДанных.Ссылка                        КАК Накладная,
	|	ЛОЖЬ                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                 КАК ИсправляемыйДокумент,
	|	ИсточникДанных.Ссылка.Договор                КАК Договор,
	|	ИсточникДанных.Ссылка.Соглашение             КАК Соглашение,
	|	ИсточникДанных.Ссылка.ВариантПриемкиТоваров  КАК ВариантПриемкиТоваров,
	|	ИсточникДанных.Ссылка.Дата                   КАК Дата,
	|	ИсточникДанных.Номенклатура                  КАК Номенклатура,
	|	ИсточникДанных.Характеристика                КАК Характеристика,
	|	ИсточникДанных.Назначение                    КАК Назначение,
	|	ИсточникДанных.Серия                         КАК Серия,
	|	ИсточникДанных.СтатусУказанияСерий           КАК СтатусУказанияСерий,
	|	ЛОЖЬ                                         КАК СверхЗаказа,
	|	ИсточникДанных.Ссылка.Склад                  КАК Склад,
	|	ИсточникДанных.Ссылка.Партнер                КАК Отправитель,
	|	ИсточникДанных.Ссылка.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ИсточникДанных.Количество                    КАК Количество,
	|	ИСТИНА                                       КАК ЭтоНакладная,
	|	НЕ ИсточникДанных.Ссылка.Распоряжение В
	|		(
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|		)
	|	КАК ПоступлениеПоЗаказам
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В (&Ссылка)";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДокумента);
	
КонецПроцедуры

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		// Приход на неордерном складе или по старым назначениям.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата         КАК Период,
		|	ТабЧасть.Номенклатура        КАК Номенклатура,
		|	ТабЧасть.Характеристика      КАК Характеристика,
		|	ТабЧасть.Ссылка.Склад        КАК Склад,
		|	ТабЧасть.Назначение          КАК Назначение,
		|	ТабЧасть.Количество          КАК Количество,
		|	ТабЧасть.КодСтроки <> 0      КАК ПоГрафику,
		|	ТабЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		ИЛИ ТабЧасть.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриПоступлении > ТабЧасть.Ссылка.Дата
		|		ИЛИ ТабЧасть.Назначение.ДвиженияПоСкладскимРегистрам = ЛОЖЬ";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	// Сторно приходного ордера по старым назначениям.
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                         КАК Период,
		|	ТабЧасть.Номенклатура                        КАК Номенклатура,
		|	ТабЧасть.Характеристика                      КАК Характеристика,
		|	ТабЧасть.Ссылка.Склад                        КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	-ТабЧасть.Количество                         КАК Количество,
		|	ЛОЖЬ                                         КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                                 КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Назначение.ДвиженияПоСкладскимРегистрам = ЛОЖЬ
		|		И ТабЧасть.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		И ТабЧасть.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= ТабЧасть.Ссылка.Дата";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата         КАК Период,
		|	ТабЧасть.Номенклатура        КАК Номенклатура,
		|	ТабЧасть.Характеристика      КАК Характеристика,
		|	ТабЧасть.Ссылка.Склад        КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Назначение.ДвиженияПоСкладскимРегистрам = ЛОЖЬ ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИНАЧЕ
		|				ТабЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабЧасть.Количество          КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Ссылка.Распоряжение
		|						<> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|					И ТабЧасть.Ссылка.ВариантПриемкиТоваров
		|						<> ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным) ТОГДА
		|				ТабЧасть.Ссылка.Распоряжение
		|			ИНАЧЕ
		|				ТабЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ТабЧасть.Ссылка.Дата         КАК ДатаПоступления,
		|	ИСТИНА                       КАК ДоступенДляРасхода,
		|	ТабЧасть.КодСтроки <> 0      КАК ПоГрафику,
		|	ТабЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		И ТабЧасть.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= ТабЧасть.Ссылка.Дата
		|		И (ТабЧасть.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|			ИЛИ ТабЧасть.КодСтроки = 0)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

Процедура ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры)

	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка                        КАК Ссылка,
	|	ИсточникДанных.Ссылка.Распоряжение           КАК Заказ,
	|	ИсточникДанных.Ссылка                        КАК Накладная,
	|	ЛОЖЬ                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                 КАК ИсправляемыйДокумент,
	|	ИсточникДанных.Ссылка.Договор                КАК Договор,
	|	ИсточникДанных.Ссылка.Соглашение             КАК Соглашение,
	|	ИсточникДанных.Ссылка.ВариантПриемкиТоваров  КАК ВариантПриемкиТоваров,
	|	ИсточникДанных.Ссылка.Дата                   КАК Дата,
	|	ИсточникДанных.Номенклатура                  КАК Номенклатура,
	|	ИсточникДанных.Характеристика                КАК Характеристика,
	|	ИсточникДанных.Назначение                    КАК Назначение,
	|	ИсточникДанных.Серия                         КАК Серия,
	|	ИсточникДанных.СтатусУказанияСерий           КАК СтатусУказанияСерий,
	|	ЛОЖЬ                                         КАК СверхЗаказа,
	|	ИсточникДанных.Ссылка.Склад                  КАК Склад,
	|	ИсточникДанных.Ссылка.Партнер                КАК Отправитель,
	|	ИсточникДанных.Ссылка.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ИсточникДанных.Количество                    КАК Количество,
	|	ИСТИНА                                       КАК ЭтоНакладная,
	|	НЕ ИсточникДанных.Ссылка.Распоряжение В
	|		(
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|		)
	|	КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В (&Ссылка)
	|";
	
	ТекущийОбъектМетаданных = Метаданные.Документы.ПоступлениеТоваровОтХранителя;
		
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДокумента, ТекущийОбъектМетаданных, "Серии");

КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки         КАК НомерСтроки,
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Аналитика.Ссылка                       КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                 КАК Номенклатура,
	|	Аналитика.Характеристика               КАК Характеристика,
	|	&Организация                           КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасов          КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД            КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество          КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ    КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров  = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки         КАК НомерСтроки,
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Аналитика.Ссылка                       КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                 КАК Номенклатура,
	|	Аналитика.Характеристика               КАК Характеристика,
	|	&Организация                           КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасов          КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД            КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество          КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ    КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая КАК ЦеховаяКладовая,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров КАК АналитикаПереданнойНоменклатуры,
	|	АналитикаПереданнойНоменклатурыБезНазначения.КлючАналитики КАК АналитикаПереданнойНоменклатурыБезНазначения,
	|
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО АналитикаБезНазначения.Номенклатура = ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.Серия = ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.МестоХранения = ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	//++ НЕ УТ
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	//-- НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПереданнойНоменклатурыБезНазначения
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура = АналитикаПереданнойНоменклатурыБезНазначения.Номенклатура
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика = АналитикаПереданнойНоменклатурыБезНазначения.Характеристика
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров.Серия = АналитикаПереданнойНоменклатурыБезНазначения.Серия
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения = АналитикаПереданнойНоменклатурыБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаПереданнойНоменклатурыБезНазначения.Назначение
	//++ НЕ УТ
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаПереданнойНоменклатурыБезНазначения.СтатьяКалькуляции
	//-- НЕ УТ
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналитик.Номенклатура КАК Номенклатура,
	|	ТаблицаАналитик.Характеристика КАК Характеристика,
	|	&ПустоеНазначение КАК Назначение,
	|	ТаблицаАналитик.Серия КАК Серия,
	|	ТаблицаАналитик.Склад КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя.Товары КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|			ПО Товары.АналитикаУчетаНоменклатуры.Номенклатура = Аналитика.Номенклатура
	|				И Товары.АналитикаУчетаНоменклатуры.Характеристика = Аналитика.Характеристика
	|				И Товары.АналитикаУчетаНоменклатуры.Серия = Аналитика.Серия
	|				И Товары.АналитикаУчетаНоменклатуры.МестоХранения = Аналитика.МестоХранения
	|				И (&ПустоеНазначение = Аналитика.Назначение)
	//++ НЕ УТ
	|				И (ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции)
	//-- НЕ УТ
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И Аналитика.Номенклатура ЕСТЬ NULL
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура,
	|		Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика,
	|		&ПустоеНазначение,
	|		Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.Серия,
	|		Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя.Товары КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|			ПО Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура = Аналитика.Номенклатура
	|				И Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика = Аналитика.Характеристика
	|				И Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.Серия = Аналитика.Серия
	|				И Товары.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения = Аналитика.МестоХранения
	|				И (&ПустоеНазначение = Аналитика.Назначение)
	//++ НЕ УТ
	|				И (ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции)
	//-- НЕ УТ
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И Аналитика.Номенклатура ЕСТЬ NULL
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям) КАК ТаблицаАналитик";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ПоступлениеТоваровОтХранителя";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",    """""");
	ПереопределениеРасчетаПараметров.Вставить("НомерВходящегоДокумента", """""");
	ПереопределениеРасчетаПараметров.Вставить("ВозвратПоРаспоряжению",
		"(Ссылка.Распоряжение <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка))");
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "РаспределениеЗапасовДвижения" Тогда
		
		ТекстыЗапроса = Новый СписокЗначений();
		СинонимТаблицыДокумента = "ТабЧасть";
		ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область Перемещение_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					 	КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаПереданнойНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов			 		 	КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 			 							КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО			 							КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО                                        КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО 									   	КАК КорПартия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка					КАК Сделка,
	|	ТаблицаДокумента.Подразделение			КАК Подразделение,
	|	ТаблицаДокумента.Менеджер				КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 							КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 			КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	ТаблицаДокумента.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 	КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации			КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И (ТаблицаВидыЗапасов.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ НЕ &ВозвратПереданнойМногооборотнойТары)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Перемещение,
		ТекстЗапроса);
		
	#КонецОбласти

	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Возвращает правила печати печатной формы Задания на отбор (размещение) товаров.
//
// Возвращаемое значение:
//	Структура - состав свойств см. Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати.
//
Функция ПравилаПечатиЗаданияНаОтборРазмещение() Экспорт
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления	= Истина;
	
	Возврат ПравилаПечатиЗадания;
	
КонецФункции


// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровОтХранителя) Тогда
		// Поступление товаров от хранителя.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПоступлениеТоваровОтХранителя";
		КомандаПечати.Представление = НСтр("ru = 'Поступление товаров от хранителя';
											|en = 'Receipt of goods from custodian'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	// Задание на размещение товаров
	Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати(КомандыПечати, "ЗаданиеНаРазмещение");
	
	ПоступлениеТоваровОтХранителяЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы объекта.
//
// Параметры:
//	МассивОбъектов        - Массив           - массив ссылок на объекты которые нужно распечатать,
//	ПараметрыПечати       - Структура        - структура дополнительных параметров печати,
//	КоллекцияПечатныхФорм - ТаблицаЗначений  - сформированные табличные документы,
//	ОбъектыПечати         - СписокЗначений   - список объектов печати,
//	ПараметрыВывода       - Структура        - параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПоступлениеТоваровОтХранителя") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПоступлениеТоваровОтХранителя",
			НСтр("ru = 'Поступление товаров от хранителя';
				|en = 'Receipt of goods from custodian'"),
			СформироватьПечатнуюФормуПоступлениеТоваровОтХранителя(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	ПоступлениеТоваровОтХранителяЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати,
		ПараметрыВывода);
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Функция формирует печатную форму документов поступления товаров от хранителя.
//
// Параметры:
//	МассивОбъектов  - Массив         - массив ссылок на объекты которые нужно распечатать,
//	ОбъектыПечати   - СписокЗначений - список объектов печати.
//
// Возвращаемое значение:
//	ТабличныйДокумент - печатная форма документов поступления товаров от хранителя.
//
Функция СформироватьПечатнуюФормуПоступлениеТоваровОтХранителя(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка КАК Ссылка,
	|	ПоступлениеТоваров.Номер КАК Номер,
	|	ПоступлениеТоваров.ИсправляемыйДокумент.Дата КАК ДатаИсправляемогоДокумента,
	|	ПоступлениеТоваров.ИсправляемыйДокумент.Номер КАК НомерИсправляемогоДокумента,
	|	ПоступлениеТоваров.Дата КАК Дата,
	|	ПоступлениеТоваров.Партнер КАК Партнер,
	|	ПоступлениеТоваров.Контрагент КАК Получатель,
	|	ПоступлениеТоваров.Организация КАК Организация,
	|	ПоступлениеТоваров.Организация.Префикс КАК Префикс,
	|	ПоступлениеТоваров.Валюта КАК Валюта,
	|	ПоступлениеТоваров.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПоступлениеТоваров.Склад.ТекущийОтветственный КАК ПолучениеПроизвел
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка В(&МассивДокументов)
	|	И ПоступлениеТоваров.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ВариантыКомплектации.Ссылка        КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектации.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектации.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	ТаблицаТовары.НоменклатураНабора   КАК НоменклатураНабора,
	|	ТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ                              КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Упаковка             КАК Упаковка,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок   КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена                 КАК Цена,
	|	ТаблицаТовары.Сумма                КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС            КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС             КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.ВозвратПереданнойМногооборотнойТары
	|				И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                              КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектации
	|		ПО ВариантыКомплектации.Владелец = ТаблицаТовары.НоменклатураНабора
	|			И ВариантыКомплектации.Характеристика = ТаблицаТовары.ХарактеристикаНабора
	|			И ВариантыКомплектации.Основной
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НоменклатураНабора,
	|	ТаблицаТовары.ХарактеристикаНабора
	|;
	|
	|//////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПечати
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры
	|ПОМЕСТИТЬ КомплектацииДокументов
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////// 4
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.НоменклатураНабора   КАК НоменклатураНабора,
	|	ТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	СУММА(ТаблицаТовары.Сумма)         КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаНДС)      КАК СуммаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НоменклатураНабора,
	|	ТаблицаТовары.ХарактеристикаНабора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НоменклатураНабора,
	|	ХарактеристикаНабора
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 5
	|ВЫБРАТЬ
	|	Товары.Ссылка               КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора   КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Количество           КАК Количество,
	|	0                           КАК КоличествоПоУмолчанию,
	|	Товары.СтавкаНДС            КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|				И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                       КАК ОсновнаяКомплектующая
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПечати.Ссылка                     КАК Ссылка,
	|	ВариантыКомплектации.Ссылка                КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектации.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектации.Ссылка.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектации.Ссылка.Владелец       КАК НоменклатураНабора,
	|	ВариантыКомплектации.Ссылка.Характеристика КАК ХарактеристикаНабора,
	|	ВариантыКомплектации.Номенклатура          КАК Номенклатура,
	|	ВариантыКомплектации.Характеристика        КАК Характеристика,
	|	0                                          КАК Количество,
	|	СУММА(ВариантыКомплектации.Количество)     КАК КоличествоПоУмолчанию,
	|	NULL                                       КАК СтавкаНДС,
	|	ЛОЖЬ                                       КАК ОсновнаяКомплектующая
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПечати КАК ДокументыПечати
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектации.Ссылка В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Комплектации.ВариантКомплектацииНоменклатуры
	|		ИЗ КомплектацииДокументов КАК Комплектации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПечати.Ссылка,
	|	ВариантыКомплектации.Ссылка,
	|	ВариантыКомплектации.Ссылка.Владелец,
	|	ВариантыКомплектации.Ссылка.Характеристика,
	|	ВариантыКомплектации.Номенклатура,
	|	ВариантыКомплектации.Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 6
	|ВЫБРАТЬ
	|	Таблица.Ссылка                          КАК Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора        КАК ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора              КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора            КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура                    КАК Номенклатура,
	|	Таблица.Характеристика                  КАК Характеристика,
	|	СУММА(Таблица.Количество)               КАК Количество,
	|	СУММА(Таблица.КоличествоПоУмолчанию)    КАК КоличествоПоУмолчанию,
	|	МАКСИМУМ(Таблица.СтавкаНДС)             КАК СтавкаНДС,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 7
	|ВЫБРАТЬ
	|	Результат.Ссылка               КАК Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора   КАК НоменклатураНабора,
	|	Результат.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|		КОГДА Результат.КоличествоПоУмолчанию <> 0
	|				И Результат.ОсновнаяКомплектующая
	|			ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|		ИНАЧЕ NULL
	|	КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Результат.ОсновнаяКомплектующая
	|			ТОГДА Результат.СтавкаНДС
	|		ИНАЧЕ NULL
	|	КОНЕЦ)                         КАК СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НоменклатураНабора,
	|	ХарактеристикаНабора
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 8
	|ВЫБРАТЬ
	|	Таблица.Ссылка               КАК Ссылка,
	|	Таблица.НомерСтроки          КАК НомерСтроки,
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|				ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|				КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|				И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В(
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ                        КАК ВариантРасчетаЦеныНабора,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|		ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ                        КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	Таблица.Сумма                КАК Сумма,
	|	ВременнаяТаблицаНаборыДополнительно.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС             КАК СуммаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|			И Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|			И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НоменклатураНабора,
	|	ХарактеристикаНабора
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 9
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка               КАК Ссылка,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	ВложенныйЗапрос.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВложенныйЗапрос.НоменклатураНабора   КАК НоменклатураНабора,
	|	ВложенныйЗапрос.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВложенныйЗапрос.Номенклатура         КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код     КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименованиеПолное,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВложенныйЗапрос.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Наименование
	|	КОНЕЦ                                КАК Упаковка,
	|	ВложенныйЗапрос.КоличествоУпаковок   КАК Количество,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.ЭтоКомплектующие     КАК ЭтоКомплектующие,
	|	ВложенныйЗапрос.ЭтоНабор             КАК ЭтоНабор,
	|	ВложенныйЗапрос.ЭтоВозвратнаяТара    КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Ссылка               КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.НомерСтроки
	|			ИНАЧЕ Таблица.НомерСтроки
	|		КОНЕЦ                        КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ                        КАК ВариантРасчетаЦеныНабора,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ                        КАК ВариантПредставленияНабораВПечатныхФормах,
	|		Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Таблица.Номенклатура         КАК Номенклатура,
	|		Таблица.Характеристика       КАК Характеристика,
	|		Таблица.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Таблица.Упаковка             КАК Упаковка,
	|		Таблица.Количество           КАК Количество,
	|		Таблица.КоличествоУпаковок   КАК КоличествоУпаковок,
	|		Таблица.Цена                 КАК Цена,
	|		Таблица.Сумма                КАК Сумма,
	|		Таблица.СтавкаНДС            КАК СтавкаНДС,
	|		Таблица.СуммаНДС             КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                        КАК ЭтоКомплектующие,
	|		ЛОЖЬ                         КАК ЭтоНабор,
	|		Таблица.ЭтоВозвратнаяТара    КАК ЭтоВозвратнаяТара
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка
	|				И ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|				И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка               КАК Ссылка,
	|		ВременнаяТаблицаНаборы.НомерСтроки          КАК НомерСтроки,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора   КАК НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора   КАК Номенклатура,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора КАК Характеристика,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		ВременнаяТаблицаНаборы.Количество           КАК Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок   КАК КоличествоУпаковок,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0
	|				ТОГДА (ВременнаяТаблицаНаборы.Сумма) / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|			ИНАЧЕ 0
	|		КОНЕЦ                                       КАК Цена,
	|		ВременнаяТаблицаНаборы.Сумма                КАК Сумма,
	|		ВременнаяТаблицаНаборы.СтавкаНДС            КАК СтавкаНДС,
	|		ВременнаяТаблицаНаборы.СуммаНДС             КАК СуммаНДС,
	|		ЛОЖЬ                                        КАК ЭтоКомплектующие,
	|		ИСТИНА                                      КАК ЭтоНабор,
	|		ЛОЖЬ                                        КАК ЭтоВозвратнаяТара
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки,
	|	ЭтоНабор УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВложенныйЗапрос.Упаковка",
			"ВложенныйЗапрос.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПервыйДокумент = Истина;
	ПоказыватьНДС  = Константы.ВыводитьДопКолонкиНДС.Получить();
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды   = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровОтХранителя_Накладная";
	
	ДанныеПечати        = МассивРезультатов[0].Выбрать();
	Товары = МассивРезультатов[МассивРезультатов.Количество() - 1].Выгрузить();
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаТовары   = Товары.НайтиСтроки(СтруктураПоиска);
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваровОтХранителя.ПФ_MXL_ПоступлениеТоваровОтХранителя");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
			ДанныеПечати.Ссылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати,
																						НСтр("ru = 'Поступление товаров от хранителя';
																							|en = 'Receipt of goods from custodian'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		
		СтруктураДанныхПоставщик = Новый Структура;
		СтруктураДанныхПоставщик.Вставить("Поставщик",               ДанныеПечати.Организация);
		СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Получатель, ДанныеПечати.Дата), "ПолноеНаименование");
		
		СтруктураДанныхПокупатель = Новый Структура;
		СтруктураДанныхПокупатель.Вставить("Получатель",              ДанныеПечати.Получатель);
		СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы Товары
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", ПредставлениеКолонкиКодов);
			
			ОбластьКодов.Параметры.Заполнить(СтруктураДанныхКоды);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьНомераСтрокиСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодовСтрокиСтандарт  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТоварСтрокиСтандарт  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанныхСтрокиСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
		
		ИспользоватьНаборы = Ложь;
		
		Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
			ИспользоватьНаборы = Истина;
			
			ОбластьНомераСтрокиНабор = Макет.ПолучитьОбласть("СтрокаТаблицыНабор" + "|НомерСтроки");
			ОбластьКодовСтрокиНабор  = Макет.ПолучитьОбласть("СтрокаТаблицыНабор" + "|КолонкаКодов");
			ОбластьТоварСтрокиНабор  = Макет.ПолучитьОбласть("СтрокаТаблицыНабор" + "|Товар");
			ОбластьДанныхСтрокиНабор = Макет.ПолучитьОбласть("СтрокаТаблицыНабор" + "|Данные");
			
			ОбластьНомераСтрокиКомплектующие = Макет.ПолучитьОбласть("СтрокаТаблицыКомплектующие" + "|НомерСтроки");
			ОбластьКодовСтрокиКомплектующие  = Макет.ПолучитьОбласть("СтрокаТаблицыКомплектующие" + "|КолонкаКодов");
			ОбластьТоварСтрокиКомплектующие  = Макет.ПолучитьОбласть("СтрокаТаблицыКомплектующие" + "|Товар");
			ОбластьДанныхСтрокиКомплектующие = Макет.ПолучитьОбласть("СтрокаТаблицыКомплектующие" + "|Данные");
		КонецЕсли;
		
		Сумма       = 0;
		СуммаНДС    = 0;
		НомерСтроки = 0;
		
		ПустыеДанные = НаборыСервер.ПустыеДанные();
		
		// Выводим строки таблицы Товары
		Для Каждого ВыборкаПоТоварам Из ТаблицаТовары Цикл
			
			Если НаборыСервер.ИспользоватьОбластьНабор(ВыборкаПоТоварам, ИспользоватьНаборы) Тогда
				ОбластьКодовСтроки  = ОбластьКодовСтрокиНабор;
				ОбластьНомераСтроки = ОбластьНомераСтрокиНабор;
				ОбластьДанныхСтроки = ОбластьДанныхСтрокиНабор;
				ОбластьТоварСтроки  = ОбластьТоварСтрокиНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(ВыборкаПоТоварам, ИспользоватьНаборы) Тогда
				ОбластьКодовСтроки  = ОбластьКодовСтрокиКомплектующие;
				ОбластьНомераСтроки = ОбластьНомераСтрокиКомплектующие;
				ОбластьДанныхСтроки = ОбластьДанныхСтрокиКомплектующие;
				ОбластьТоварСтроки  = ОбластьТоварСтрокиКомплектующие;
			Иначе
				ОбластьКодовСтроки  = ОбластьКодовСтрокиСтандарт;
				ОбластьНомераСтроки = ОбластьНомераСтрокиСтандарт;
				ОбластьДанныхСтроки = ОбластьДанныхСтрокиСтандарт;
				ОбластьТоварСтроки  = ОбластьТоварСтрокиСтандарт;
			КонецЕсли;
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(ВыборкаПоТоварам, ИспользоватьНаборы) Тогда
				УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", Неопределено);
			Иначе
				НомерСтроки = НомерСтроки + 1;
				
				УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", НомерСтроки);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомераСтроки);
			
			Если ВыводитьКоды Тогда
				СтруктураДанныхКоды = Новый Структура("Артикул", ВыборкаПоТоварам[ИмяКолонкиКодов]);
				
				ОбластьКодовСтроки.Параметры.Заполнить(СтруктураДанныхКоды);
				ТабличныйДокумент.Присоединить(ОбластьКодовСтроки);
			КонецЕсли;
			
			ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(ВыборкаПоТоварам, ИспользоватьНаборы);
			
			ОбластьТоварСтроки.Параметры.Заполнить(ВыборкаПоТоварам);
			
			ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = ВыборкаПоТоварам.ЭтоВозвратнаяТара;
			ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			
			Товар = ПрефиксИПостфикс.Префикс + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоТоварам.ТоварНаименованиеПолное,
				ВыборкаПоТоварам.Характеристика,
				,
				,
				ДополнительныеПараметрыПолученияНаименованияДляПечати) + ПрефиксИПостфикс.Постфикс;
			
			СтруктураДанныхТовар = Новый Структура("Товар", Товар);
			
			ОбластьТоварСтроки.Параметры.Заполнить(СтруктураДанныхТовар);
			ТабличныйДокумент.Присоединить(ОбластьТоварСтроки);
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(ВыборкаПоТоварам, ИспользоватьНаборы) Тогда
				ОбластьДанныхСтроки.Параметры.Заполнить(ПустыеДанные);
			Иначе
				ОбластьДанныхСтроки.Параметры.Заполнить(ВыборкаПоТоварам);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтроки);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(ВыборкаПоТоварам, ИспользоватьНаборы) Тогда
				Сумма    = Сумма    + ВыборкаПоТоварам.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаПоТоварам.СуммаНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		СтруктураДанныхВсего = Новый Структура;
		СтруктураДанныхВсего.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
		
		ОбластьДанных.Параметры.Заполнить(СтруктураДанныхВсего);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Выводим ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС") Тогда
			СтруктураДанныхПодвалНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", СуммаНДС);
			
			Если ПоказыватьНДС Тогда
				СтруктураДанныхПодвалНДС.Вставить("НДС",
					?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:';
														|en = 'Including VAT:'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Сумма НДС:';
																																|en = 'VAT amount:'", ОбщегоНазначения.КодОсновногоЯзыка())));
			Иначе
				СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru = 'Без налога (НДС)';
																|en = 'Without tax (VAT)'", ОбщегоНазначения.КодОсновногоЯзыка()));
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
		КонецЕсли;
		// Выводим Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2';
				|en = 'Total items %1 in the amount of %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			НомерСтроки,
			ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		
		СтруктураДанныхСуммаПрописью = Новый Структура;
		СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью",  СуммаПрописью);
		СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(ДанныеПечати.ПолучениеПроизвел) Тогда
			ПолучениеПроизвел = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПолучениеПроизвел, ДанныеПечати.Дата);
			
			СтруктураДанныхПолучениеПроизвел = Новый Структура;
			СтруктураДанныхПолучениеПроизвел.Вставить("ПолучениеПроизвел", ПолучениеПроизвел);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПолучениеПроизвел);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	СтруктураДанныхОбъектаПечати - см. ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта.СтруктураДанныхОбъектаПечати
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	
	ПараметрыЗаполнения = Новый Структура(ИмяПараметра, ЗначениеПараметра);
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов:
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция АналитикиУчетаНоменклатурыПоПередачеТоваровХранителю(Распоряжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыТоварыУПартнеров КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&Распоряжения)";
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	АналитикиУчетаНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаНоменклатуры");
	
	Возврат АналитикиУчетаНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ПоступлениеТоваровОтХранителя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.2.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9ddc3513-ec25-47c3-bcef-2fe780bb2f33");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоступлениеТоваровОтХранителя.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'В поступлениях товаров от хранителя в табличной части Товары заполняет номер ГТД. В случае если одной строке из табличной части Товары соответствует несколько номеров ГТД из табличной части ""Виды запасов"", то разбивает строки в табличной части Товары.
	|Так же выполняет Заполняет реквизит ""Ставка НДС"".
	|До окончания выполнения обработчика редактирование документа недоступно.';
	|en = 'Fills in CFD number in the Goods items table in the uninvoiced receipt from custodian. If several CFD numbers from the Inventory owner attributes table match the single string from the Goods items table, splits the strings in the Goods items table.
	|Also populates the VAT rate attribute.
	|You cannot edit documents until the handler execution is completed.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗапасовДокумента.Ссылка КАК Ссылка,
	|	ВидыЗапасовДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасовДокумента.АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|	ВидыЗапасовДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ВидыЗапасовДокумента.НомерГТД КАК НомерГТД,
	|	СУММА(ВидыЗапасовДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ ПоступленияТоваровБезГТД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыДокумента.Ссылка КАК Ссылка,
	|		ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыДокумента.АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|		ТоварыДокумента.УдалитьСтавкаНДС КАК СтавкаНДС,
	|		ТоварыДокумента.НомерГТД КАК НомерГТД,
	|		-ТоварыДокумента.Количество КАК Количество
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТоварыДокумента
	|	ГДЕ
	|		ТоварыДокумента.Ссылка.Проведен
	|		И ТоварыДокумента.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыЗапасовДокумента.Ссылка,
	|		ВидыЗапасовДокумента.АналитикаУчетаНоменклатуры,
	|		ВидыЗапасовДокумента.АналитикаУчетаНаборов,
	|		ВидыЗапасовДокумента.УдалитьСтавкаНДС,
	|		ВидыЗапасовДокумента.НомерГТД,
	|		ВидыЗапасовДокумента.Количество
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ВидыЗапасовДокумента
	|	ГДЕ
	|		ВидыЗапасовДокумента.Ссылка.Проведен
	|		И ВидыЗапасовДокумента.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК ВидыЗапасовДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасовДокумента.Ссылка,
	|	ВидыЗапасовДокумента.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасовДокумента.АналитикаУчетаНаборов,
	|	ВидыЗапасовДокумента.СтавкаНДС,
	|	ВидыЗапасовДокумента.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВидыЗапасовДокумента.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровОтХранителя.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровОтХранителя.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя КАК ПоступлениеТоваровОтХранителя
	|	ГДЕ
	|		(ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Документ.ПоступлениеТоваровОтХранителя.Товары КАК ПоступлениеТоваровОтХранителяТовары
	|					ГДЕ
	|						ПоступлениеТоваровОтХранителя.Ссылка = ПоступлениеТоваровОтХранителяТовары.Ссылка
	|						И ПоступлениеТоваровОтХранителяТовары.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
	|						И ПоступлениеТоваровОтХранителяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))
	|				ИЛИ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ПоступлениеТоваровОтХранителяВидыЗапасов
	|					ГДЕ
	|						ПоступлениеТоваровОтХранителя.Ссылка = ПоступлениеТоваровОтХранителяВидыЗапасов.Ссылка
	|						И ПоступлениеТоваровОтХранителяВидыЗапасов.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
	|						И ПоступлениеТоваровОтХранителяВидыЗапасов.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровОтХранителя.Ссылка
	|	ИЗ
	|		ПоступленияТоваровБезГТД КАК ПоступлениеТоваровОтХранителя) КАК ПоступлениеТоваровОтХранителя";
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПоступлениеТоваровОтХранителя";
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
																						ПолноеИмяОбъекта,
																						МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыЗапасовДокумента.Ссылка                     КАК Ссылка,
	|	ВидыЗапасовДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасовДокумента.АналитикаУчетаНаборов      КАК АналитикаУчетаНаборов,
	|	ВидыЗапасовДокумента.СтавкаНДС                  КАК СтавкаНДС,
	|	ВидыЗапасовДокумента.НомерГТД                   КАК НомерГТД,
	|	СУММА(ВидыЗапасовДокумента.Количество)          КАК Количество
	|ПОМЕСТИТЬ ПоступленияТоваровБезГТД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыДокумента.Ссылка                     КАК Ссылка,
	|		ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыДокумента.АналитикаУчетаНаборов      КАК АналитикаУчетаНаборов,
	|		ТоварыДокумента.УдалитьСтавкаНДС           КАК СтавкаНДС,
	|		ТоварыДокумента.НомерГТД                   КАК НомерГТД,
	|		-ТоварыДокумента.Количество                КАК Количество
	|	ИЗ
	|		&ВТДокументыДляОбработки КАК ДокументДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТоварыДокумента
	|			ПО ДокументДляОбработки.Ссылка = ТоварыДокумента.Ссылка
	|	ГДЕ
	|		ТоварыДокумента.Ссылка.Проведен
	|		И ТоварыДокумента.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыЗапасовДокумента.Ссылка                     КАК Ссылка,
	|		ВидыЗапасовДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ВидыЗапасовДокумента.АналитикаУчетаНаборов      КАК АналитикаУчетаНаборов,
	|		ВидыЗапасовДокумента.УдалитьСтавкаНДС           КАК СтавкаНДС,
	|		ВидыЗапасовДокумента.НомерГТД                   КАК НомерГТД,
	|		ВидыЗапасовДокумента.Количество                 КАК Количество
	|	ИЗ
	|		&ВТДокументыДляОбработки КАК ДокументДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ВидыЗапасовДокумента
	|			ПО ДокументДляОбработки.Ссылка = ВидыЗапасовДокумента.Ссылка
	|	ГДЕ
	|		ВидыЗапасовДокумента.Ссылка.Проведен
	|		И ВидыЗапасовДокумента.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	
	|	) КАК ВидыЗапасовДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасовДокумента.Ссылка,
	|	ВидыЗапасовДокумента.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасовДокумента.АналитикаУчетаНаборов,
	|	ВидыЗапасовДокумента.СтавкаНДС,
	|	ВидыЗапасовДокумента.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВидыЗапасовДокумента.Количество) > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументПоступления.Ссылка              КАК Ссылка,
	|	ДокументПоступления.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	NULL                                    КАК АналитикаУчетаНоменклатуры,
	|	NULL                                    КАК АналитикаУчетаНаборов,
	|	NULL                                    КАК УдалитьСтавкаНДС,
	|	NULL                                    КАК НомерГТД,
	|	0                                       КАК Количество
	|ИЗ
	|	&ВТДокументыДляОбработки КАК ДокументДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступленияТоваровБезГТД КАК ПоступленияТоваровБезГТД
	|		ПО ДокументДляОбработки.Ссылка = ПоступленияТоваровБезГТД.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ДокументПоступления
	|		ПО ДокументДляОбработки.Ссылка = ДокументПоступления.Ссылка
	|ГДЕ
	|	ПоступленияТоваровБезГТД.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПоступления.Ссылка                      КАК Ссылка,
	|	ДокументПоступления.Ссылка.ВерсияДанных         КАК ВерсияДанных,
	|	ДокументДляОбработки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДокументДляОбработки.АналитикаУчетаНаборов      КАК АналитикаУчетаНаборов,
	|	ДокументДляОбработки.СтавкаНДС                  КАК УдалитьСтавкаНДС,
	|	ДокументДляОбработки.НомерГТД                   КАК НомерГТД,
	|	ДокументДляОбработки.Количество                 КАК Количество
	|ИЗ
	|	ПоступленияТоваровБезГТД КАК ДокументДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ДокументПоступления
	|		ПО ДокументДляОбработки.Ссылка = ДокументПоступления.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	ДокументДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	&ВТДокументыДляОбработки КАК ДокументДляОбработки
	|ГДЕ
	|	(ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					&ВТДокументыДляОбработки КАК ДокументДляОбработки
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя.Товары КАК ПоступлениеТоваровОтХранителяТовары
	|						ПО ДокументДляОбработки.Ссылка = ПоступлениеТоваровОтХранителяТовары.Ссылка
	|				ГДЕ
	|					ПоступлениеТоваровОтХранителяТовары.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
	|					И ПоступлениеТоваровОтХранителяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					&ВТДокументыДляОбработки КАК ДокументДляОбработки
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя.ВидыЗапасов КАК ПоступлениеТоваровОтХранителяВидыЗапасов
	|						ПО ДокументДляОбработки.Ссылка = ПоступлениеТоваровОтХранителяВидыЗапасов.Ссылка
	|				ГДЕ
	|					ПоступлениеТоваровОтХранителяВидыЗапасов.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
	|					И ПоступлениеТоваровОтХранителяВидыЗапасов.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПоДокументам = Результат[Результат.ВГраница() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОбрабатываемыеДокументы = Результат[Результат.ВГраница()].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(ВыборкаПоДокументам.Ссылка,
																					ВыборкаПоДокументам.ВерсияДанных,
																					Параметры.Очередь);
			
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ОбрабатываемыеДокументы.Найти(ВыборкаПоДокументам.Ссылка) <> Неопределено Тогда
				МассивТЧ = Новый Массив;
				МассивТЧ.Добавить("Товары");
				МассивТЧ.Добавить("ВидыЗапасов");
				
				УчетНДСЛокализация.ЗаполнитьКолонкуТЧСтавкаНДС(ДокументОбъект, МассивТЧ, Истина);
			КонецЕсли;
			
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если ВыборкаПоТоварам.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоРаспределить = ВыборкаПоТоварам.Количество;
				
				ОтборПоТоварам = Новый Структура("АналитикаУчетаНоменклатуры, АналитикаУчетаНаборов, УдалитьСтавкаНДС, НомерГТД");
				ЗаполнитьЗначенияСвойств(ОтборПоТоварам, ВыборкаПоТоварам, , "НомерГТД");
				
				ОтборПоТоварам.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
				
				СтрокиТоваров = ДокументОбъект.Товары.НайтиСтроки(ОтборПоТоварам);
				
				Для Каждого СтрокаТЧ Из СтрокиТоваров Цикл
					
					Если КоличествоРаспределить >= СтрокаТЧ.Количество Тогда
						СтрокаТЧ.НомерГТД = ВыборкаПоТоварам.НомерГТД;
						
						КоличествоРаспределить = КоличествоРаспределить - СтрокаТЧ.Количество;
					Иначе
						НовоеКоличество = СтрокаТЧ.Количество - КоличествоРаспределить;
						НовоеКоличествоУпаковок = Окр(СтрокаТЧ.КоличествоУпаковок * НовоеКоличество / СтрокаТЧ.Количество,
														3,
														РежимОкругления.Окр15как20);
						
						ЗаполняемыеКолонки = Новый Структура("Сумма, СуммаНДС, СуммаСНДС");
						
						НоваяСтрока = ДокументОбъект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
						
						НоваяСтрока.Количество          = НовоеКоличество;
						НоваяСтрока.КоличествоУпаковок  = НовоеКоличествоУпаковок;
						
						Для Каждого СвойстваКолонки Из ЗаполняемыеКолонки Цикл
							НоваяСтрока[СвойстваКолонки.Ключ] = НовоеКоличество * СтрокаТЧ[СвойстваКолонки.Ключ] / СтрокаТЧ.Количество;
							
							СтрокаТЧ[СвойстваКолонки.Ключ] = СтрокаТЧ[СвойстваКолонки.Ключ] - НоваяСтрока[СвойстваКолонки.Ключ];
						КонецЦикла;
						
						СтрокаТЧ.Количество          = КоличествоРаспределить;
						СтрокаТЧ.КоличествоУпаковок  = СтрокаТЧ.КоличествоУпаковок - НовоеКоличествоУпаковок;
						
						СтрокаТЧ.НомерГТД = ВыборкаПоТоварам.НомерГТД;
						
						КоличествоРаспределить = 0;
					КонецЕсли;
					
					Если КоличествоРаспределить <= 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаПоДокументам.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,
																						ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
