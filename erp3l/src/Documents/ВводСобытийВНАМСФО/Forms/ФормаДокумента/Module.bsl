
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	МСФОУХ.ОбновитьУсловноеОформлениеФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДокументыОснованияПараллельногоУчета"
	 И ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		Объект.ДокументыОснования.Очистить();
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
	ОбновитьСтатусОшибкиПоСобытиям(ТекущийОбъект);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
	ОбновитьСтатусОшибкиПоСобытиям(ТекущийОбъект);
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументМСФО(Команда)
	МСФОКлиентУХ.СоздатьДокументМСФО(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНМА(Команда)
	
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНЗС(Команда)
	
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМПЗ(Команда)
		
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Заполнение

&НаКлиенте
Процедура ЗаполнитьПоДокументамОснованиям(Команда)
	
	ДанныеЗаполнения = Новый Структура("ИсточникЗаполнения", "ДокументыОснования");
	МСФОКлиентУХ.ЗаполнитьДокумент(ЭтаФорма, ДанныеЗаполнения, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзУчетнойСистемы(Команда)
	
	Если Не МСФОВНАВызовСервераУХ.ИспользоватьДанныеУчетнойСистемы(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("ИсточникЗаполнения", "ДанныеНСБУ");
	МСФОКлиентУХ.ЗаполнитьДокумент(ЭтаФорма, ДанныеЗаполнения, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиДаннымиНСБУ(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиДаннымиМСФО(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКолонкамНСБУ(Команда)
	ЗаполнитьПоКолонкамНСБУСервер();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеВКолонкеПоВыделенным(Команда)
	МСФОКлиентУХ.УстановитьЗначениеВКолонкеПоВыделеннымСтрокам(ЭтаФорма, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)	
	Объект.Дата = ОбщегоНазначенияУХ.ПолучитьКонецПериодаОтчета(Объект.ПериодОтчета);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.ПериодОтчета = МСФОВНАВызовСервераУХ.ПолучитьПериодПоДатеПараллельногоУчета(Объект.Дата, Неопределено);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаполненияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);	
	ОчиститьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументОснованиеНеУказанГиперссылкаНажатие(Элемент)
	
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА"); 
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДобавитьДокументОснованиеНажатие(Элемент)
	
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА"); 
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА", СтандартнаяОбработка); 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьФормуРедактированияМногострочногоТекста(ЭтаФорма, Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТабличнойЧасти

&НаКлиенте
Процедура ОтобратьСтрокиРасхождений(Команда)
	
	МСФОКлиентУХ.УстановитьОтборПоПризнаку(
		Элементы.ВНА.ОтборСтрок,
		"ЕстьРасхождения",
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка);
	
	//Если (Элементы.ВНА.ОтборСтрок = Неопределено) ИЛИ НЕ Элементы.ВНА.ОтборСтрок.Свойство("ЕстьРасхождения") Тогда
	//	
	//	Элементы.ВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
	//	Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Истина;
	//	Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Ложь;		
	//	
	//Иначе
	//	
	//	Элементы.ВНА.ОтборСтрок = Неопределено;
	//	Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Ложь;
	//
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСтрокиИзменений(Команда)
	
	МСФОКлиентУХ.УстановитьОтборПоПризнаку(
		Элементы.ВНА.ОтборСтрок,
		"ЕстьИзменение",
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка);
	
	//Если (Элементы.ВНА.ОтборСтрок = Неопределено) ИЛИ НЕ Элементы.ВНА.ОтборСтрок.Свойство("ЕстьИзменение") Тогда
	//	
	//	Элементы.ВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьИзменение", Истина);
	//	Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Истина;
	//	Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Ложь;
	//	
	//Иначе
	//	
	//	Элементы.ВНА.ОтборСтрок = Неопределено;
	//	Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Ложь;
	//
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСтрокиОшибок(Команда)

	МСФОКлиентУХ.УстановитьОтборПоПризнаку(
		Элементы.ВНА.ОтборСтрок,
		"Ошибка",
		Элементы.ВНАОтобратьСтрокиОшибок.Пометка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументСобытие(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(НСтр("ru = 'Для просмотра события необходимо провести документ!'"), 10);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСобытие = ПолучитьДокументСобытие(Объект.Ссылка, ТекущаяСтрока.ДатаСобытияМСФО, ТекущаяСтрока.ДатаСобытияНСБУ, ТекущаяСтрока.ВидОперации);
	Если ДокументСобытие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ДокументСобытие);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ВНАПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеГруппыПодробно(ТекущаяСтрока);
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МСФОКлиентСерверУХ.ОбновитьВыборТипаВНА(ЭтаФорма, НоваяСтрока, Копирование);
	
	Если КэшируемыеЗначения.Свойство("ИспользуютсяТК") И КэшируемыеЗначения.ИспользуютсяТК Тогда
		ТекущаяСтрока.СторнироватьДанныеНСБУ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВНАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	МСФОКлиентУХ.ТабличнаяЧастьПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАПриИзменении(Элемент)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаСобытияНСБУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ДатаСобытияМСФО = ТекущаяСтрока.ДатаСобытияНСБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ВНАВНА.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВНАГруппаВНАПриИзменении(Элемент)
	КолонкаИсточник = Прав(Элемент.Имя, СтрДлина(Элемент.Имя)-3); //убираем префикс ТЧ
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(Элементы.ВНА.ТекущиеДанные, ЭтаФорма, КолонкаИсточник);	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВидОперацииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Истина);
	
	ОбновитьОтображениеГруппыПодробно(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПараметрыАмортизацииВНАМСФОПриИзменении(Элемент)
	КолонкаИсточник = Прав(Элемент.Имя, СтрДлина(Элемент.Имя)-3); //убираем префикс ТЧ
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(Элементы.ВНА.ТекущиеДанные, ЭтаФорма, КолонкаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииМСФОПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииНСБУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПослеУдаления(Элемент)
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы_Счета

&НаКлиенте
Процедура ВНАСчетПоступленияМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетУчетаМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетПоступленияСубконто1МСФОПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетУчетаНСБУПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ГрупповойВвод", Истина);
	СтруктураДействий.Вставить("ЗаполнитьСчетаМСФОПоНеклассифицированным", Новый Структура("СчетУчетаНСБУ", "КоррСчетМСФО"));
	СтруктураДействий.Вставить("ЗаполнитьСчетаМСФОИзТрансляции", Новый Структура("СчетУчетаМСФО", "СчетУчетаНСБУ"));
	СтруктураДействий.Вставить("ЗаполнитьДоступностьПоИменамСубконто", КэшируемыеЗначения.ИменаСубконто);
		
	КэшДокумента = Новый Структура("ШаблонТрансляции,ИменаСубконто,ГрупповойВвод", 
							КэшируемыеЗначения.ШаблонТрансляции, КэшируемыеЗначения.ИменаСубконто, Истина);
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшДокумента); 
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элементы.ВНАСчетУчетаМСФО, "ВНА");
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элементы.ВНАКоррСчетМСФО, "ВНА");
		
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетВыбытияНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетВыбытияМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетПоступленияНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетВыбытияВНАНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетВыбытияВНАМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАКорСчетНСБУПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ЗаполнитьСчетаМСФОИзТрансляции", Новый Структура("КоррСчетМСФО", "КоррСчетНСБУ"));
	СтруктураДействий.Вставить("ЗаполнитьДоступностьПоИменамСубконто", КэшируемыеЗначения.ИменаСубконто);
		
	КэшДокумента = Новый Структура("ШаблонТрансляции,ИменаСубконто", КэшируемыеЗначения.ШаблонТрансляции, КэшируемыеЗначения.ИменаСубконто);
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшДокумента); 
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элементы.ВНАКоррСчетМСФО, "ВНА");

КонецПроцедуры

&НаКлиенте
Процедура ВНАКорСчетМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Общие

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)
	
	Если ЭтаФорма.КэшируемыеЗначения = Неопределено Тогда
		ЭтаФорма.КэшируемыеЗначения = Новый Структура;	
	КонецЕсли;
		
	ЭтаФорма.КэшируемыеЗначения.Вставить("ИменаСубконто",		Документы.ВводСобытийВНАМСФО.ПолучитьИменаСубконто());
	
	ЭтаФорма.КэшируемыеЗначения.Вставить("СпособыНачисленияАмортизации", 	
		МСФОВНАВызовСервераУХ.ПолучитьВозможныеСпособыНачисленияАмортизации());
			
	ЭтаФорма.КэшируемыеЗначения.Вставить("СобытияПараметровАмортизации",	
		Справочники.ПараметрыАмортизацииВНАМСФО.ПолучитьСобытияИзмененияПараметровАмортизации());
		
	ЭтаФорма.КэшируемыеЗначения.Вставить("ВидыСобытийВНА", УчетМСФОПовтИспУХ.ПолучитьВидыСобытийВНАПоДокументам());
	
	МСФОУХ.ПодготовитьФормуНаСервере(ЭтаФорма);
	
	СчетаГруппыПодробно = МСФОУХ.ПолучитьСчетаГруппыПодобно(ЭтаФорма, "ВНА");
	ЭтаФорма.КэшируемыеЗначения.Вставить("СчетаГруппыПодробно", СчетаГруппыПодробно);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	МСФОКлиентСерверУХ.УправлениеФормой(Форма,, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовСтрокиТЧ

&НаСервере
Процедура ЗаполнитьПоКолонкамНСБУСервер()

	МСФОУХ.ЗаполнитьПоКолонкамНСБУСервер(ЭтаФорма);

КонецПроцедуры    

#КонецОбласти

#Область ЗаполнениеТЧ

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокумент(РезультатВопроса = Неопределено, ДанныеЗаполнения) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		Возврат;	
	КонецЕсли;
    
    ЗаполнитьДокумент(ДанныеЗаполнения);
		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеГруппыПодробно(ТекущаяСтрока);
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполняемыеРеквизитыТаб = МСФОУХ.ПолучитьЗаполняемыеРеквизитыТаблицыФормы(ЭтаФорма);
	Если (Объект.ВНА.Количество() > 0) И (ЗаполняемыеРеквизитыТаб <> Неопределено) Тогда
		Для каждого СтрокаТаб Из Объект.ВНА Цикл
			МСФОКлиентСерверУХ.ЗаполнитьРасчетныеРеквизитыСтроки(СтрокаТаб, ЗаполняемыеРеквизитыТаб);
		КонецЦикла;		
	КонецЕсли;
	
	МСФОУХ.ЗаполнитьПоКолонкамНСБУСервер(ЭтаФорма);
	
	МСФОКлиентСерверУХ.ОбновитьВидимостьДокументыОснования(ЭтаФорма);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиДанными(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Ложь);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицы()

	МСФОУХ.ОчиститьТаблицы(ЭтаФорма);

КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьТекущимиДаннымиСервер(ЗаполнитьРеквизиты = Ложь, ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь, СтрокаВНА = Ложь) 
	
	Если НЕ СтрокаВНА Тогда		
		СтрокиДляЗаполнения = Объект.ВНА;
	Иначе
		СтрокиДляЗаполнения = Новый Массив;
		СтрокиДляЗаполнения.Добавить(Объект.ВНА.НайтиПоИдентификатору(Элементы.ВНА.ТекущаяСтрока));	
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ЗаполнитьРеквизиты,ЗаполнитьНСБУ,ЗаполнитьМСФО", ЗаполнитьРеквизиты, ЗаполнитьНСБУ, ЗаполнитьМСФО);
	Документы[ЭтаФорма.КэшируемыеЗначения.МетаданныеДокумента.Имя].ЗаполнитьСтроки(СтрокиДляЗаполнения, ЭтаФорма, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОшибкиПоСобытиям(ТекущийОбъект)
	
	Перем СобытияДокумента;
	
	СтрокиОшибки = Объект.ВНА.НайтиСтроки(Новый Структура("Ошибка", Истина));
	Для каждого СтрокаТаб Из СтрокиОшибки Цикл
		СтрокаТаб.Ошибка = Ложь;
	КонецЦикла;
	
	Если НЕ ТекущийОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибок = МСФОВНАВызовСервераУХ.ПолучитьДокументыСобытияСОшибкой(ТекущийОбъект.Ссылка);
	СобытияДокументов = МСФОВНАУХ.ПолучитьСобытияДокументовВНА();
	
	Для каждого СтрокаТаб Из ТаблицаОшибок Цикл
		
		ИмяДокумента = Метаданные.НайтиПоТипу(СтрокаТаб.ТипЗначения).Имя;
		Если Не СобытияДокументов.Свойство(ИмяДокумента, СобытияДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ПростойОтбор = (СобытияДокумента.Количество() = 1);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДатаСобытияМСФО", СтрокаТаб.Дата);
		Если ПростойОтбор Тогда
			Отбор.Вставить("ВидОперации", СобытияДокумента[0]);		
		КонецЕсли;
		
		СобытияДаты = Объект.ВНА.НайтиСтроки(Отбор);
		
		Для каждого СтрокаВНА Из СобытияДаты Цикл
			
			Если ПростойОтбор Тогда 
				СтрокаВНА.Ошибка = Истина;
			ИначеЕсли Не СобытияДокумента.Найти(СтрокаВНА.ВидОперации) = Неопределено Тогда
				СтрокаВНА.Ошибка = Истина;
			КонецЕсли;						
		
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументСобытие(ДокументОснование, ДатаСобытияМСФО, ДатаСобытияНСБУ, ВидОперации)
		
	Перем ИмяДокумента;
	
	СобытияДокументов = МСФОВНАУХ.ПолучитьСобытияДокументовВНА();
	
	Для каждого СобытияДокумента Из СобытияДокументов Цикл
		Если СобытияДокумента.Значение.Найти(ВидОперации) <> Неопределено Тогда
			ИмяДокумента = СобытияДокумента.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыВНАПоОснованию.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.ДокументыВНАПоОснованию(&ДокументОснование) КАК ДокументыВНАПоОснованию
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДокументыВНАПоОснованию.Ссылка) = &ТипДокумента
	|	И ДокументыВНАПоОснованию.Ссылка.Дата = &ДатаСобытия
	|	И ВЫБОР
	|			КОГДА &ОтборРежимЗаполнения
	|				ТОГДА ДокументыВНАПоОснованию.Ссылка.РежимЗаполнения = &РежимЗаполнения
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыВНАПоОснованию.Ссылка.ПометкаУдаления,
	|	ДокументыВНАПоОснованию.Ссылка.Проведен";
	
	ДатаСобытия = ДатаСобытияМСФО;
	Если НЕ ЗначениеЗаполнено(ДатаСобытияНСБУ) Тогда
		РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.МСФО;
	ИначеЕсли ЗначениеЗаполнено(ДатаСобытияМСФО) Тогда
		РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.НСБУИМСФО;		
	Иначе
		РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.НСБУ;
		ДатаСобытия = ДатаСобытияНСБУ;
	КонецЕсли;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипДокумента", 			Тип("ДокументСсылка."+ИмяДокумента));
	Запрос.УстановитьПараметр("ДокументОснование", 		ДокументОснование);
	Запрос.УстановитьПараметр("ДатаСобытия", 			ДатаСобытия);
	Запрос.УстановитьПараметр("ОтборРежимЗаполнения",  	СтрНайти("ПризнаниеРасходовПоАмортизацииНСБУ", ИмяДокумента) = 0);
	Запрос.УстановитьПараметр("РежимЗаполнения", 		РежимЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), Неопределено, РезультатЗапроса.Выгрузить()[0].Ссылка);
	
КонецФункции

#КонецОбласти

#Область ДополнительноВНА

&НаКлиенте
Процедура ВНАПередНачаломИзменения(Элемент, Отказ)
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодробноВНА(Команда)	
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Истина, "ВНА");	
КонецПроцедуры

&НаКлиенте
Процедура ВНАИсточникВНАПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьИсточникГруппаВНАНаДату", ПолучитьПараметрыИсточника());
		
	КэшДокумента = Новый Структура;
	КэшДокумента.Вставить("ВидУчетаМСФО", 	КэшируемыеЗначения.РежимыЗаполнения.МСФО);
	КэшДокумента.Вставить("Сценарий", 		Объект.Сценарий);
	КэшДокумента.Вставить("Организация", 	Объект.Организация);
	
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшДокумента); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАГруппаВНАИсточникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ЗаполнитьЗависимыеРеквизитыИсточникГруппаВНА", ПолучитьПараметрыИсточника());
		
	КэшДокумента = Новый Структура("ШаблонТрансляции,ИменаСубконто", КэшируемыеЗначения.ШаблонТрансляции, КэшируемыеЗначения.ИменаСубконто);
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшДокумента); 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыИсточника()

	РеквизитыГруппаВНА = Новый Структура;
	РеквизитыГруппаВНА.Вставить("КоррСчетМСФО",				"СчетУчетаПервоначальнойСтоимости");
	РеквизитыГруппаВНА.Вставить("КоррСчетСубконто1МСФО", 	"СчетУчетаПервоначальнойСтоимостиСубконто1");
	РеквизитыГруппаВНА.Вставить("КоррСчетСубконто2МСФО",	"СчетУчетаПервоначальнойСтоимостиСубконто2");
	РеквизитыГруппаВНА.Вставить("КоррСчетСубконто3МСФО", 	"СчетУчетаПервоначальнойСтоимостиСубконто3");
	
	Возврат Новый Структура("ЗависимостиРеквизитов,КолонкаДата", РеквизитыГруппаВНА, "ДатаСобытияМСФО");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбновитьОтображениеГруппыПодробно(ТекущаяСтрока)

	Если НЕ Элементы.ПоказатьПодробно.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ВидыСобытийВНА = КэшируемыеЗначения.ВидыСобытийВНА;
	
	ВидимостьГруппаСчетУчета 		= Истина;
	ВидимостьГруппаСчетАмортизации 	= Ложь;
	ВидимостьГруппаСчетВыбытия 		= Ложь;
	
	ВидимостьГруппаПараметрыАмортизации = Ложь;
	ВидимостьГруппаВыбытие 				= Ложь;
	ВидимостьПодразделенияНаправления	= Ложь;
		
	Если ВидыСобытийВНА.ПризнаниеРасходовПоАмортизацииНСБУ.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда
		
		ВидимостьПодразделенияНаправления	= Истина;
		
	ИначеЕсли ВидыСобытийВНА.ВводВНАВЭксплуатациюМСФО.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда
		
		ВидимостьГруппаСчетАмортизации 		= Не ТекущаяСтрока.СпособНачисленияАмортизацииМСФО.Пустая();
		ВидимостьГруппаПараметрыАмортизации = Истина;
		ВидимостьПодразделенияНаправления	= Истина;
				
	ИначеЕсли ВидыСобытийВНА.ВыбытиеВНАМСФО.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда
		
		ВидимостьГруппаСчетВыбытия = Истина;
		
	ИначеЕсли ВидыСобытийВНА.МодернизацияВНАМСФО.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда
		
		ВидимостьГруппаПараметрыАмортизации = Истина;		
		
	ИначеЕсли ВидыСобытийВНА.ИзменениеПараметровВНАМСФО.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда
		
		ВидимостьГруппаПараметрыАмортизации = Истина;
		ВидимостьПодразделенияНаправления	= Истина;
		
	ИначеЕсли ВидыСобытийВНА.ПризнаниеРасходовПоАмортизацииНСБУ.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда
		
		ВидимостьГруппаСчетУчета = Ложь;
		
	ИначеЕсли ВидыСобытийВНА.ПоступлениеВНАМСФО.Найти(ТекущаяСтрока.ВидОперации) <> Неопределено Тогда	
		
		ВидимостьПодразделенияНаправления	= Истина;
		
	Иначе
		
		//скрываются все группы
		
	КонецЕсли;	
		
	Элементы.ГруппаСчетУчетаМСФО.Видимость 		= ВидимостьГруппаСчетУчета;
	Элементы.ГруппаСчетУчетаНСБУ.Видимость 		= ВидимостьГруппаСчетУчета;
	
	Элементы.ГруппаСчетАмортизацииНСБУ.Видимость 	= ВидимостьГруппаСчетАмортизации;
	Элементы.ГруппаСчетАмортизацииМСФО.Видимость 	= ВидимостьГруппаСчетАмортизации;
	
	Элементы.ГруппаСчетВыбытияНСБУ.Видимость	= ВидимостьГруппаСчетВыбытия;
	Элементы.ГруппаСчетВыбытияМСФО.Видимость	= ВидимостьГруппаСчетВыбытия;
	
	Элементы.ГруппаПараметрыАмортизации.Видимость 		= ВидимостьГруппаПараметрыАмортизации;
	Элементы.ВНАПараметрыАмортизацииВНАМСФО.Видимость	= ВидимостьГруппаПараметрыАмортизации;
	
	Элементы.ВНАПодразделение.Видимость 			= ВидимостьПодразделенияНаправления;
	Элементы.ВНАНаправлениеДеятельности.Видимость	= ВидимостьПодразделенияНаправления;
			
	Если ВидимостьГруппаПараметрыАмортизации Тогда
		ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока);	
	КонецЕсли;
	
	СвойстваСчетаУчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетУчетаМСФО);
	Элементы.ВНАКоличествоНСБУ.Видимость = СвойстваСчетаУчета.Количественный;
	
	Если ВидимостьГруппаСчетУчета 
		Или ВидимостьГруппаСчетАмортизации
		Или ВидимостьГруппаСчетВыбытия		
		Или ВидимостьГруппаПараметрыАмортизации
		Тогда
		
		МСФОКлиентСерверУХ.ОбновитьВидимостьСубконтоГруппыПодробно(ЭтаФорма, ТекущаяСтрока, "ВНА");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока)
	
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(ЭтаФорма, ТекущаяСтрока, "ВНА");
	
	МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
			ЭтаФорма, 
			ТекущаяСтрока.СпособНачисленияАмортизацииНСБУ, 
			ПолучитьРеквизитыПараметровАмортизации(Ложь),
			КэшируемыеЗначения.СпособыНачисленияАмортизации);
			
	МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
			ЭтаФорма, 
			ТекущаяСтрока.СпособНачисленияАмортизацииМСФО, 
			ПолучитьРеквизитыПараметровАмортизации(Истина),
			КэшируемыеЗначения.СпособыНачисленияАмортизации);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРеквизитыПараметровАмортизации(РеквизитыМСФО = Истина)

	Результат = Новый Структура;
	
	Если РеквизитыМСФО = Истина Тогда
	    Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскоренияМСФО");
		Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработкиМСФО");
		Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАОбъемВыработкиМСФО");
	Иначе
		Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскоренияНСБУ");
		Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработкиНСБУ");
		Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАОбъемВыработкиНСБУ");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВНАСрокПолезногоИспользованияНСБУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СрокПолезногоИспользованияМСФО) Тогда
		ТекущаяСтрока.СрокПолезногоИспользованияМСФО = ТекущаяСтрока.СрокПолезногоИспользованияНСБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособОтраженияРасходовПоАмортизацииНСБУПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВНАСторнироватьДанныеНСБУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиВНА = Объект.ВНА.НайтиСтроки(Новый Структура("ВНА", ТекущаяСтрока.ВНА));
	Для каждого СтрокаВНА Из СтрокиВНА Цикл
		СтрокаВНА.СторнироватьДанныеНСБУ = ТекущаяСтрока.СторнироватьДанныеНСБУ;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаСобытияМСФОПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаСобытияНСБУ) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВНАДатаСобытияМСФОПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущаяСтрока)), "Перезаполнить дату события НСБУ по дате события МСФО?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ВНАДатаСобытияМСФОПриИзмененииФрагмент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаСобытияМСФОПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВНАДатаСобытияМСФОПриИзмененииФрагмент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаСобытияМСФОПриИзмененииФрагмент(Знач ТекущаяСтрока)
	
	ТекущаяСтрока.ДатаСобытияНСБУ = ТекущаяСтрока.ДатаСобытияМСФО;

КонецПроцедуры

#КонецОбласти
