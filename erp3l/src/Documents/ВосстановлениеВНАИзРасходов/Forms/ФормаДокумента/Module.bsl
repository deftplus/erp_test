
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда		
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ОбновитьУсловноеОформлениеФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	УдалитьНеИспользуемыеПартииВНА();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьРБП(Команда)
	
	КэшируемыеЗначения.Вставить("ТипВНА", ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуРБП());
	Элементы.ВНА.ДобавитьСтроку();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатьяЗатрат(Команда)
		
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрочийРасход(Команда)
		
	КэшируемыеЗначения.Вставить("ТипВНА", ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуПрочиеДоходыРасходы());
	Элементы.ВНА.ДобавитьСтроку();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	ПараметрыЗаполнения = Новый Структура("ЗаполнитьДокумент", Истина);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ЗаполнитьДокумент", ЭтаФорма, ПараметрыЗаполнения);
	Если Объект.ВНА.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Табличная часть ВНА не пуста. Очистить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНМА(Команда)
		
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
	Элементы.ПартииВНА.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВНА(Команда)
	ЗаполнитьПартииВНАНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Заполнение

&НаКлиенте
Процедура ЗаполнитьТекущимиДаннымиМСФО(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеВКолонкеПоВыделенным(Команда)
	МСФОКлиентУХ.УстановитьЗначениеВКолонкеПоВыделеннымСтрокам(ЭтаФорма, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.ПериодОтчета = МСФОВНАВызовСервераУХ.ПолучитьПериодПоДатеПараллельногоУчета(Объект.Дата, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьФормуРедактированияМногострочногоТекста(ЭтаФорма, Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	Объект.Дата = ОбщегоНазначенияУХ.ПолучитьКонецПериодаОтчета(Объект.ПериодОтчета);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДляРеклассаВНА(Команда)
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("Организация",	Объект.Организация);
	ПараметрыФормы.Вставить("Сценарий", 	Объект.Сценарий);
	ПараметрыФормы.Вставить("ПериодОтчета", Объект.ПериодОтчета);
		
	ОткрытьФорму("Обработка.ЗапасыДляРеклассаВНА.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТабличнойЧасти_Общие

&НаКлиенте
Процедура ЗаполнитьАмортизационнуюГруппуПоВыделенным(Команда)
	ОткрытьФорму("Справочник.ПараметрыАмортизацииВНАМСФО.ФормаВыбора",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппуОСПоВыделенным(Команда)
	
	ОткрытьФорму("Справочник.ГруппыВНАМСФО.ФормаВыбора",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодробноВНА(Команда)
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Истина, "ВНА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_ВНА

&НаКлиенте
Процедура ВНАПослеУдаления(Элемент)
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАПриИзменении(Элемент)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриАктивизацииСтроки(Элемент)
	ОбновитьВидимостьПодробно();
КонецПроцедуры

&НаКлиенте
Процедура ВНАГруппаВНАМСФОПриИзменении(Элемент)
	КолонкаИсточник = Прав(Элемент.Имя, СтрДлина(Элемент.Имя)-3); //убираем префикс ТЧ
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(Элементы.ВНА.ТекущиеДанные, ЭтаФорма, КолонкаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура ВНАКоличествоВведенныхВЭксплуатациюПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьПартииВНА(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПараметрыАмортизацииВНАМСФОПриИзменении(Элемент)
	КолонкаИсточник = Прав(Элемент.Имя, СтрДлина(Элемент.Имя)-3); //убираем префикс ТЧ
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(Элементы.ВНА.ТекущиеДанные, ЭтаФорма, КолонкаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииМСФОПриИзменении(Элемент)
	   		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьПараметровАмортизации(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ВНААктивИсточник.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если ТекущаяСтрока.АктивИсточник = Неопределено Тогда
			
			Если КэшируемыеЗначения.Свойство("ТипВНА", ТекущаяСтрока.АктивИсточник) Тогда
				КэшируемыеЗначения.Удалить("ТипВНА");
			Иначе 
				ТекущаяСтрока.АктивИсточник = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли;
			
			Элементы.ВНААктивИсточник.ВыбиратьТип = Ложь;

		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.АктивИсточник <> Неопределено Тогда		
		Элементы.ВНААктивИсточник.ВыбиратьТип = Ложь;			
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСчетовТаблицФормы

&НаКлиенте
Процедура ВНАСчетАктиваПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетУчетаМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_ПартииВНА

&НаКлиенте
Процедура ПартииВНАВНАПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииВНАВНАОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПартииВНАВНА.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПартииВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	
	МСФОКлиентСерверУХ.ОбновитьВыборТипаВНА(ЭтаФорма, НоваяСтрока, Копирование, "ПартииВНА", "ПартииВНАВНА", "ВНА");
	
	Если НоваяСтрока Тогда
	
		ТекущаяСтрокаВНА = Элементы.ВНА.ТекущиеДанные;
		ТекущаяСтрокаПартии = Элементы.ПартииВНА.ТекущиеДанные;
		Если (ТекущаяСтрокаВНА <> Неопределено) И (ТекущаяСтрокаПартии <> Неопределено) Тогда
			 ТекущаяСтрокаПартии.КлючСвязи = ТекущаяСтрокаВНА.КлючСвязи;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_ПартииВНА

&НаКлиенте
Процедура СписанияАктивовСчетПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "СписанияАктивов");
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеСписанийПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда		
		ТекущаяСтрокаСписанияАктивов = Элементы.ВНА.ТекущиеДанные;
		Если ТекущаяСтрокаСписанияАктивов <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрокаСписанияАктивов.КлючСвязи) Тогда
				ТекущаяСтрокаСписанияАктивов.КлючСвязи = ТекущаяСтрока.КлючСвязи;
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
	
	ОбновитьКоличествоСписано(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписанияАктивовКоличествоСписаноПриИзменении(Элемент)
	ОбновитьКоличествоСписано(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СписанияАктивовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ТекущаяСтрока = Элементы.СписанияАктивов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Элемент.ТекущиеДанные.КлючСвязи) Тогда
		ТекущаяСтрока.КлючСвязи = Элементы.ВНА.ТекущиеДанные.КлючСвязи;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Общие

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)

	ЭтаФорма.КэшируемыеЗначения = Новый Структура;	
	ЭтаФорма.КэшируемыеЗначения.Вставить("СпособыНачисленияАмортизации", 	МСФОВНАВызовСервераУХ.ПолучитьВозможныеСпособыНачисленияАмортизации());
	ЭтаФорма.КэшируемыеЗначения.Вставить("ИменаСубконто", Документы.ВосстановлениеВНАИзРасходов.ПолучитьИменаСубконто());
	
	МСФОУХ.ПодготовитьФормуНаСервере(ЭтаФорма, , , , Ложь);
	
	ПараметрыВыбораСчета = МСФОКлиентСерверУХ.ПолучитьПараметрыВыбораДляСчетаБД(ЭтаФорма.КэшируемыеЗначения.ПланСчетовМСФО);
	Для каждого СубконтоТЧ Из ЭтаФорма.КэшируемыеЗначения.ИменаСубконто Цикл
		МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, СубконтоТЧ.Значение, СубконтоТЧ.Ключ);
		МСФОУХ.ДобавитьОформлениеДоступностиСубконто(ЭтаФорма, СубконтоТЧ.Значение, СубконтоТЧ.Ключ);
		
		Для каждого ТекущиеСубконтоСчета Из СубконтоТЧ.Значение Цикл
			Если ТекущиеСубконтоСчета.Ключ <> "ИсключенияСкрытияСубконто" Тогда				
				Элементы[СубконтоТЧ.Ключ  + ТекущиеСубконтоСчета.Ключ].ПараметрыВыбора = ПараметрыВыбораСчета;
			КонецЕсли;		
		КонецЦикла;
		
	КонецЦикла;
	
	СчетаГруппыПодробно = МСФОУХ.ПолучитьСчетаГруппыПодобно(ЭтаФорма, "ВНА");
	ЭтаФорма.КэшируемыеЗначения.Вставить("СчетаГруппыПодробно", СчетаГруппыПодробно);
		
	ОбновитьКоличествоСписано(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоСписано(Форма)
	
	Объект = Форма.Объект;
	
	КэшКоличествоСписано = Новый Соответствие;
	КэшСуммаСписано = Новый Соответствие;
	Для каждого СтрокаТаб Из Объект.СписанияАктивов Цикл
		
		ТекКоличествоСписано = КэшКоличествоСписано.Получить(СтрокаТаб.КлючСвязи);		
		ТекКоличествоСписано = ?(ТекКоличествоСписано = Неопределено, 0, ТекКоличествоСписано) + ?(СтрокаТаб.КоличествоСписано = 0, 1, СтрокаТаб.КоличествоСписано);
		
		КэшКоличествоСписано.Вставить(СтрокаТаб.КлючСвязи, ТекКоличествоСписано);
		
		ТекСуммаСписано = КэшСуммаСписано.Получить(СтрокаТаб.КлючСвязи);		
		ТекСуммаСписано = ?(ТекСуммаСписано = Неопределено, 0, ТекСуммаСписано) + СтрокаТаб.СуммаСписано;
		
		КэшСуммаСписано.Вставить(СтрокаТаб.КлючСвязи, ТекСуммаСписано);
	
		
	КонецЦикла;
	
	Для каждого СтрокаСписано Из КэшКоличествоСписано Цикл
		
		СтрокиАктив = Объект.ВНА.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСписано.Ключ));
		Если СтрокиАктив.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиАктив[0].КоличествоСписано = СтрокаСписано.Значение;
		СтрокиАктив[0].СуммаСписано = КэшСуммаСписано.Получить(СтрокаСписано.Ключ);
				
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьНеРеклассифицированные = ПолучитьЗапасыДляРеклассификации(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, Форма.УникальныйИдентификатор) <> Неопределено;
	Форма.Элементы.ФормаЗапасыДляРеклассаВНА.ЦветФона = ?(ЕстьНеРеклассифицированные, WebЦвета.Лосось, Новый Цвет);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеФормы(ЭтаФорма)

	МСФОУХ.ОбновитьУсловноеОформлениеФормы(ЭтаФорма);
	
	// если указан признак несколько объектов - ВНА приемники вносятся в ТЧ ПартииВНА

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТЧ

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокумент(РезультатВопроса = Неопределено, ДанныеЗаполнения) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		Возврат;	
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ТекущаяСтрока, ДанныеЗаполнения", Элементы.ВНА.ТекущиеДанные, ДанныеЗаполнения);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ЗаполнитьДокументЗавершение", ЭтаФорма, ДопПараметры);
	
	АдресТаб = ПолучитьЗапасыДляРеклассификации(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, УникальныйИдентификатор);
	Если АдресТаб = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат; 
	КонецЕсли;
    
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("Организация",	Объект.Организация);
	ПараметрыФормы.Вставить("Сценарий", 	Объект.Сценарий);
	ПараметрыФормы.Вставить("ПериодОтчета", Объект.ПериодОтчета);
	
	ОткрытьФорму("Обработка.ЗапасыДляРеклассаВНА.Форма", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокументЗавершение(РезультатЗакрытия = Неопределено, ДополнительныеПараметры) Экспорт
		
	ЗаполнитьДокументСервер(ДополнительныеПараметры.ДанныеЗаполнения);
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Массив") Тогда
		Для каждого ТекущийЗапас Из РезультатЗакрытия Цикл
			ТекстСообщения = НСтр("ru = 'По запасу превышающему порог <%1> не указаны параметры учета ВНА для реклассификации в ОС'");
			Сообщить(СтрШаблон(ТекстСообщения, ТекущийЗапас));
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьПодробно();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗапасыДляРеклассификации(Сценарий, ПериодОтчета, Организация, УникальныйИдентификатор) Экспорт

	СКД = Обработки.ЗапасыДляРеклассаВНА.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ПериодСКД = Новый СтандартныйПериод(ПериодОтчета.ДатаНачала, КонецДня(ПериодОтчета.ДатаОкончания));
	
	СКД.НастройкиПоУмолчанию.ПараметрыДанных.УстановитьЗначениеПараметра("Период", 			ПериодСКД);
	СКД.НастройкиПоУмолчанию.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий", 		Сценарий);
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СКД.НастройкиПоУмолчанию.Отбор, "Организация", , Организация);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СКД.НастройкиПоУмолчанию.Отбор, "ВариантУчета", ВидСравненияКомпоновкиДанных.Содержит, "Трансляция (требуется реклассификация)");
	
	Таб = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(СКД, СКД.НастройкиПоУмолчанию, , , Истина, , , Новый ТаблицаЗначений);
	Если Таб.Количество() Тогда
		Возврат ПоместитьВоВременноеХранилище(Таб, УникальныйИдентификатор); 
	Иначе	
	    Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументСервер(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЭтаФорма.Модифицированность = Истина;
	
	ЗаполняемыеРеквизитыТаб = Новый Структура("ИменаСубконто", КэшируемыеЗначения.ИменаСубконто.ВНА);
	Для каждого СтрокаАктив Из Объект.ВНА Цикл
		МСФОКлиентСерверУХ.ЗаполнитьРасчетныеРеквизитыСтроки(СтрокаАктив, ЗаполняемыеРеквизитыТаб);
		МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(СтрокаАктив, ЭтаФорма, "ПараметрыУчетаВНА");
	КонецЦикла;
	
	ЗаполняемыеРеквизитыТаб = Новый Структура("ИменаСубконто", КэшируемыеЗначения.ИменаСубконто.СписанияАктивов);
	Для каждого СтрокаАктив Из Объект.СписанияАктивов Цикл
		МСФОКлиентСерверУХ.ЗаполнитьРасчетныеРеквизитыСтроки(СтрокаАктив, ЗаполняемыеРеквизитыТаб);	
	КонецЦикла;
		
	ОбновитьКоличествоСписано(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиДаннымиСервер(ЗаполнитьРеквизиты = Ложь, ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь, СтрокаВНА = Ложь) 
	
	Если НЕ СтрокаВНА Тогда
		
		Если Объект.ВНА.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокиДляЗаполнения = Объект.ВНА;
	Иначе
		СтрокиДляЗаполнения = Новый Массив;
		СтрокиДляЗаполнения.Добавить(Объект.ВНА.НайтиПоИдентификатору(Элементы.ВНА.ТекущаяСтрока));	
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ЗаполнитьРеквизиты,ЗаполнитьНСБУ,ЗаполнитьМСФО", ЗаполнитьРеквизиты, ЗаполнитьНСБУ, ЗаполнитьМСФО);
	Документы.ВосстановлениеВНАИзРасходов.ЗаполнитьСтроки(СтрокиДляЗаполнения, ЭтаФорма, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартииВНАНаСервере()
	
	СтрокиДляЗаполнения = Новый Массив;
	СтрокиДляЗаполнения.Добавить(Объект.ВНА.НайтиПоИдентификатору(Элементы.ВНА.ТекущаяСтрока));
	
	Документы.ВосстановлениеВНАИзРасходов.ЗаполнитьСтроки(СтрокиДляЗаполнения, Объект, Новый Структура("ЗаполнитьМСФО", Истина));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеИспользуемыеПартииВНА()

	КлючиСвязей = Объект.ВНА.Выгрузить(,"КлючСвязи").ВыгрузитьКолонку("КлючСвязи");
	
	КоличествоПартий = Объект.ПартииВНА.Количество();
	Для Обр = 1 По КоличествоПартий Цикл
	
		СтрокаПартия = Объект.ПартииВНА.Получить(КоличествоПартий - Обр);
		Если КлючиСвязей.Найти(СтрокаПартия.КлючСвязи) = Неопределено Тогда
			Объект.ПартииВНА.Удалить(СтрокаПартия);
		КонецЕсли;
			
	КонецЦикла;
		
	КоличествоПартий = Объект.СписанияАктивов.Количество();
	Для Обр = 1 По КоличествоПартий Цикл
	
		СтрокаПартия = Объект.СписанияАктивов.Получить(КоличествоПартий - Обр);
		Если КлючиСвязей.Найти(СтрокаПартия.КлючСвязи) = Неопределено Тогда
			Объект.СписанияАктивов.Удалить(СтрокаПартия);
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СтраницыПодробно

&НаКлиенте
Процедура ОбновитьВидимостьПодробно()
	
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
	Если Не ЭтаФорма.Элементы.ПоказатьПодробно.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Параметры учета
	МСФОКлиентСерверУХ.ОбновитьВидимостьСубконтоГруппыПодробно(ЭтаФорма, ТекущаяСтрока, "ВНА");
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(ЭтаФорма, ТекущаяСтрока, "ВНА");
	
	ВидимостьПараметровАмортизации(ТекущаяСтрока);	
	ВидимостьПартииВНА(ТекущаяСтрока);	
	ВидимостьСписанияАктивов(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПараметровАмортизации(ТекущаяСтрока)
	
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(ЭтаФорма, ТекущаяСтрока, "ВНА");
			
	МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
			ЭтаФорма, 
			ТекущаяСтрока.СпособНачисленияАмортизации, 
			ПолучитьРеквизитыПараметровАмортизации(),
			КэшируемыеЗначения.СпособыНачисленияАмортизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПартииВНА(ТекущаяСтрокаАктив)
	
	ЭтаФорма.Элементы.ПартииВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущаяСтрокаАктив.КлючСвязи);
	
	//если используется количественный учет, тогда ВНА принятый к учету заполняется в тч ВНА,
	//если не используется количественный учет, тогда на счете учета ВНА ведется инвентарный учет 
	//и список ВНА задается в тч ПартииВНА
	
	ИспользоватьКоличественныйУчет = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ТекущаяСтрокаАктив.СчетУчета).Количественный;		
	ЭтаФорма.Элементы.ПартииВНА.Видимость = НЕ ИспользоватьКоличественныйУчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСписанияАктивов(ТекущаяСтрока)
	
	ЭтаФорма.Элементы.СписанияАктивов.Видимость = Истина;	
	ЭтаФорма.Элементы.СписанияАктивов.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	
	ИспользоватьКоличественныйУчет = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетАктива).Количественный;		
	ЭтаФорма.Элементы.СписанияАктивовКоличествоСписано.Видимость = ИспользоватьКоличественныйУчет;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРеквизитыПараметровАмортизации()

	Результат = Новый Структура;
	
	Результат.Вставить("ПрофильРаспределения", 			"ВНАСпособОтраженияРасходовПоАмортизации");	
	Результат.Вставить("СрокПолезногоИспользования", 	"ВНАСрокПолезногоИспользования");	
	Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскорения");
	Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработки");	
	Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАПредполагаемыйОбъемПродукции");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
