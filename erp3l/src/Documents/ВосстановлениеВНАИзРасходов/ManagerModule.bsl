
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДополнительныеСвойства, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеСвойства.ДляПроведения.Ссылка);
	
	ДопРеквизиты = "РежимЗаполнения, АлгоритмРСБУ, ПериодОтчета, ДатаНачала, ДатаОкончания";
	Реквизиты = МСФОУХ.РеквизитыДокумента(Запрос, ДопРеквизиты, "ПериодОтчета", Отказ);
	ДополнительныеСвойства.ДляПроведения.Вставить("Реквизиты", Реквизиты);
	
	Если Отказ Тогда
		Возврат ДополнительныеСвойства;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",				Реквизиты.Период);	
	Запрос.УстановитьПараметр("ГраницаДоДокумента",	МСФОВызовСервераУХ.ПолучитьГраницуДоДокумента(Реквизиты.Период, Реквизиты.Ссылка));
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
	Запрос.УстановитьПараметр("Сценарий",			Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("ПериодОтчета", 		Реквизиты.ПериодОтчета);
	
	Запрос.УстановитьПараметр("ФормироватьПроводкиМСФО",	Реквизиты.ФормироватьПроводкиМСФО);
	Запрос.УстановитьПараметр("ПланСчетовМСФО", 			Реквизиты.ПланСчетовМСФО);
	Запрос.УстановитьПараметр("ФункциональнаяВалюта",		Реквизиты.ФункциональнаяВалюта);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", 			НачалоДня(Реквизиты.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", 		КонецДня(Реквизиты.ДатаОкончания));
	
	НомераТаблиц = Новый Структура;
	ТекстЗапроса = Новый Массив;
	
	ТекстЗапроса.Добавить(ТекстЗапроса_втТаблицаВНА(НомераТаблиц));	
	ТекстЗапроса.Добавить(ТекстЗапроса_ПартииВНА(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втСписанияАктивов(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втСчетаБД(НомераТаблиц, "втСчетаБД"));	
	ТекстЗапроса.Добавить(ТекстЗапроса_втТаблицаДляДвижений(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаВНА(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаПроводкиВНА(НомераТаблиц));
	
	Запрос.Текст = СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	ПроведениеСерверУХ.ДополнитьТаблицамиИзПакетаЗапросов(ДополнительныеСвойства.ТаблицыДляДвижений, Запрос, НомераТаблиц);

КонецФункции

Функция ТекстЗапроса_втТаблицаВНА(НомераТаблиц)

	НомераТаблиц.Вставить("втТаблицаВНА", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаВНА.АктивИсточник КАК АктивИсточник,
	|	ТаблицаВНА.КлючСвязи КАК КлючСвязи,
	|	ТаблицаВНА.СчетУчета КАК СчетУчета,
	|	ТаблицаВНА.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ТаблицаВНА.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ТаблицаВНА.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	ТаблицаВНА.ПараметрыАмортизацииВНА КАК ПараметрыАмортизацииВНА,
	|	ТаблицаВНА.СчетУчетаСубконто1 КАК СчетУчетаСубконто1,
	|	ТаблицаВНА.СчетУчетаСубконто2 КАК СчетУчетаСубконто2,
	|	ТаблицаВНА.СчетУчетаСубконто3 КАК СчетУчетаСубконто3,
	|	ТаблицаВНА.СчетАмортизации КАК СчетАмортизации,
	|	ТаблицаВНА.СчетАмортизацииСубконто1 КАК СчетАмортизацииСубконто1,
	|	ТаблицаВНА.СчетАмортизацииСубконто2 КАК СчетАмортизацииСубконто2,
	|	ТаблицаВНА.СчетАмортизацииСубконто3 КАК СчетАмортизацииСубконто3,
	|	ТаблицаВНА.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ТаблицаВНА.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	|	ТаблицаВНА.СчетАктива КАК СчетАктива,
	|	ТаблицаВНА.СчетАктиваСубконто1 КАК СчетАктиваСубконто1,
	|	ТаблицаВНА.СчетАктиваСубконто2 КАК СчетАктиваСубконто2,
	|	ТаблицаВНА.СчетАктиваСубконто3 КАК СчетАктиваСубконто3,
	|	ТаблицаВНА.КоличествоПоступило КАК КоличествоПоступило,
	|	ТаблицаВНА.КоличествоНаНачало КАК КоличествоНаНачало,
	|	ТаблицаВНА.СуммаПоступило КАК СуммаПоступило,
	|	ТаблицаВНА.СуммаНаНачало КАК СуммаНаНачало,
	|	ТаблицаВНА.ПараметрВыработки КАК ПараметрВыработки,
	|	ТаблицаВНА.ПредполагаемыйОбъемПродукции КАК ПредполагаемыйОбъемПродукции,
	|	ТаблицаВНА.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ТаблицаВНА.Подразделение КАК Подразделение,
	|	ТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ втТаблицаВНА
	|ИЗ
	|	Документ.ВосстановлениеВНАИзРасходов.ВНА КАК ТаблицаВНА
	|ГДЕ
	|	ТаблицаВНА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетАктива,
	|	СчетАктиваСубконто1,
	|	СчетАктиваСубконто2,
	|	СчетАктиваСубконто3";

КонецФункции

Функция ТекстЗапроса_ПартииВНА(НомераТаблиц)
	
	НомераТаблиц.Вставить("втПартииДоНумерации",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втПартииВНА", 			НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаВНА.КлючСвязи КАК КлючСвязи,
	|	ТаблицаВНА.ВНА КАК ВНА,
	|	ТаблицаВНА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВНА.Стоимость КАК Стоимость
	|ПОМЕСТИТЬ втПартииДоНумерации
	|ИЗ
	|	Документ.ВосстановлениеВНАИзРасходов.ПартииВНА КАК ТаблицаВНА
	|ГДЕ
	|	ТаблицаВНА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПартииДоНумерации.КлючСвязи КАК КлючСвязи,
	|	втПартииДоНумерации.ВНА КАК ВНА,
	|	КОЛИЧЕСТВО(втПартииДоНумерации.НомерСтроки) КАК НомерАктива,
	|	МАКСИМУМ(втПартииДоНумерации.Стоимость) КАК Стоимость
	|ПОМЕСТИТЬ втПартииВНА
	|ИЗ
	|	втПартииДоНумерации КАК втПартииДоНумерации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПартииДоНумерации КАК втПартииДоНумерацииБольше
	|		ПО втПартииДоНумерации.НомерСтроки <= втПартииДоНумерацииБольше.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	втПартииДоНумерации.ВНА,
	|	втПартииДоНумерации.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи"
	
КонецФункции

Функция ТекстЗапроса_втСписанияАктивов(НомераТаблиц)
	
	НомераТаблиц.Вставить("втСписанияАктивов", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.КлючСвязи КАК КлючСвязи,
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.Счет КАК Счет,
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.Субконто1 КАК Субконто1,
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.Субконто2 КАК Субконто2,
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.Субконто3 КАК Субконто3,
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.КоличествоСписано КАК КоличествоСписано,
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.СуммаСписано КАК СуммаСписано
	|ПОМЕСТИТЬ втСписанияАктивов
	|ИЗ
	|	Документ.ВосстановлениеВНАИзРасходов.СписанияАктивов КАК ВосстановлениеВНАИзРасходовСписанияАктивов
	|ГДЕ
	|	ВосстановлениеВНАИзРасходовСписанияАктивов.Ссылка = &Ссылка";
	
КонецФункции

Функция ТекстЗапроса_втТаблицаДляДвижений(НомераТаблиц)

	НомераТаблиц.Вставить("втТаблицаДляДвижений", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаВНА.АктивИсточник КАК АктивИсточник,
	|	ТаблицаВНА.КлючСвязи КАК КлючСвязи,
	|	ТаблицаВНА.СчетУчета КАК СчетУчета,
	|	ТаблицаВНА.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ТаблицаВНА.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ТаблицаВНА.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	ТаблицаВНА.ПараметрыАмортизацииВНА КАК ПараметрыАмортизацииВНА,
	|	ТаблицаВНА.СчетУчетаСубконто1 КАК СчетУчетаСубконто1,
	|	ТаблицаВНА.СчетУчетаСубконто2 КАК СчетУчетаСубконто2,
	|	ТаблицаВНА.СчетУчетаСубконто3 КАК СчетУчетаСубконто3,
	|	ТаблицаВНА.СчетАмортизации КАК СчетАмортизации,
	|	ТаблицаВНА.СчетАмортизацииСубконто1 КАК СчетАмортизацииСубконто1,
	|	ТаблицаВНА.СчетАмортизацииСубконто2 КАК СчетАмортизацииСубконто2,
	|	ТаблицаВНА.СчетАмортизацииСубконто3 КАК СчетАмортизацииСубконто3,
	|	ТаблицаВНА.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ТаблицаВНА.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	|	ТаблицаВНА.СчетАктива КАК СчетАктива,
	|	ТаблицаВНА.СчетАктиваСубконто1 КАК СчетАктиваСубконто1,
	|	ТаблицаВНА.СчетАктиваСубконто2 КАК СчетАктиваСубконто2,
	|	ТаблицаВНА.СчетАктиваСубконто3 КАК СчетАктиваСубконто3,
	|	ТаблицаВНА.Подразделение КАК Подразделение,
	|	ТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельности,	
	|	ТаблицаВНА.КоличествоПоступило КАК КоличествоПоступило,
	|	ТаблицаВНА.КоличествоНаНачало КАК КоличествоНаНачало,
	|	ТаблицаВНА.СуммаПоступило КАК СуммаПоступило,
	|	ТаблицаВНА.СуммаНаНачало КАК СуммаНаНачало,	
	|	ТаблицаВНА.ПараметрВыработки КАК ПараметрВыработки,
	|	ТаблицаВНА.ПредполагаемыйОбъемПродукции КАК ПредполагаемыйОбъемПродукции,
	|	ТаблицаВНА.КоэффициентУскорения КАК КоэффициентУскорения
	|ПОМЕСТИТЬ втТаблицаДляДвижений
	|ИЗ
	|	втТаблицаВНА КАК ТаблицаВНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаВНА.АктивИсточник";

КонецФункции

Функция ТекстЗапроса_ТаблицаВНА(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаВНА", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО) КАК ВидУчета,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ВводВЭксплуатацию) КАК ВидОперации,
	|	&Период КАК ДатаСостояния,
	|	втТаблицаВНА.ПараметрыУчетаВНА.КлассВНА КАК КлассВНА,
	|	ИСТИНА КАК СписатьИсточник,
	|	втПартииВНА.ВНА КАК ВНА,
	|	втПартииВНА.ВНА.Код КАК ИнвентарныйНомер,
	|	втТаблицаВНА.ПараметрыУчетаВНА КАК ГруппаВНА,
	|	втТаблицаВНА.АктивИсточник КАК ИсточникВНА,	
	|	втТаблицаВНА.ПараметрыУчетаВНА.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	втТаблицаВНА.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	втТаблицаВНА.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	|	втТаблицаВНА.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	втТаблицаВНА.СрокПолезногоИспользования КАК СрокИспользованияДляВычисленияАмортизации,
	|	втПартииВНА.Стоимость - втТаблицаВНА.ЛиквидационнаяСтоимость КАК СтоимостьДляВычисленияАмортизации,
	|	втПартииВНА.Стоимость КАК ПервоначальнаяСтоимость,
	|	втПартииВНА.Стоимость КАК СуммаВВалютеУчета,
	|	втТаблицаВНА.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	втТаблицаВНА.Подразделение КАК Подразделение,
	|	втТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельности,	
	|	втТаблицаВНА.СчетУчета КАК СчетУчетаПервоначальнойСтоимости,
	|	втТаблицаВНА.СчетУчетаСубконто1 КАК СчетУчетаПервоначальнойСтоимостиСубконто1,
	|	втТаблицаВНА.СчетУчетаСубконто2 КАК СчетУчетаПервоначальнойСтоимостиСубконто2,
	|	втТаблицаВНА.СчетУчетаСубконто3 КАК СчетУчетаПервоначальнойСтоимостиСубконто3,
	|	втТаблицаВНА.СчетАмортизации КАК СчетНакопленнойАмортизации,
	|	втТаблицаВНА.СчетАмортизацииСубконто1 КАК СчетНакопленнойАмортизацииСубконто1,
	|	втТаблицаВНА.СчетАмортизацииСубконто2 КАК СчетНакопленнойАмортизацииСубконто2,
	|	втТаблицаВНА.СчетАмортизацииСубконто3 КАК СчетНакопленнойАмортизацииСубконто3,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.ВосстановленИзРасходов) КАК СпособПоступления,
	|	ИСТИНА КАК ВосстановленИзРасходов
	|ИЗ
	|	втТаблицаДляДвижений КАК втТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПартииВНА КАК втПартииВНА
	|		ПО втТаблицаВНА.КлючСвязи = втПартииВНА.КлючСвязи";
	
КонецФункции

Функция ТекстЗапроса_ТаблицаПроводкиВНА(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаПроводкиВНА", НомераТаблиц.Количество());// Дт 01 - Кт 10 - рекласс, Дт 10 Кт 20 - сторно списания
	
	Возврат
	"ВЫБРАТЬ
	|	втТаблицаВНА.АктивИсточник КАК ВНА,
	|	&Период КАК Период,
	|	втТаблицаВНА.ПараметрыУчетаВНА КАК ГруппаВНА,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОпераций.СторноСписанияАктива) КАК ВидОперации,
	|	СписанияАктивов.Счет КАК СчетДт,
	|	СписанияАктивов.Счет.СчетСсылка КАК СчетДтМСФО,
	|	СписанияАктивов.Субконто1 КАК СубконтоДт1,
	|	СписанияАктивов.Субконто2 КАК СубконтоДт2,
	|	СписанияАктивов.Субконто3 КАК СубконтоДт3,
	|	втТаблицаВНА.СчетАктива КАК СчетКт,
	|	втТаблицаВНА.СчетАктива.СчетСсылка КАК СчетКтМСФО,
	|	втТаблицаВНА.СчетАктиваСубконто1 КАК СубконтоКт1,
	|	втТаблицаВНА.СчетАктиваСубконто2 КАК СубконтоКт2,
	|	втТаблицаВНА.СчетАктиваСубконто3 КАК СубконтоКт3,
	|	0 КАК СуммаОперацииНСБУ,
	|	-СписанияАктивов.СуммаСписано КАК СуммаОперацииМСФО,
	
	|	втТаблицаВНА.Подразделение КАК ПодразделениеДт,
	|	втТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	втТаблицаВНА.Подразделение КАК ПодразделениеКт,
	|	втТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	
	|	ВЫБОР
	|		КОГДА СписанияАктивов.Счет.СчетСсылка.Количественный
	|			ТОГДА -СписанияАктивов.КоличествоСписано
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА втТаблицаВНА.СчетАктива.СчетСсылка.Количественный
	|			ТОГДА -СписанияАктивов.КоличествоСписано
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КоличествоКт
	|ИЗ
	|	втТаблицаДляДвижений КАК втТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписанияАктивов КАК СписанияАктивов
	|		ПО втТаблицаВНА.КлючСвязи = СписанияАктивов.КлючСвязи
	|ГДЕ
	|	СписанияАктивов.СуммаСписано <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПартииВНА.ВНА,
	|	&Период,
	|	втТаблицаВНА.ПараметрыУчетаВНА,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ВводВЭксплуатацию),
	|	втТаблицаВНА.СчетУчета,
	|	втТаблицаВНА.СчетУчета.СчетСсылка,
	|	втПартииВНА.ВНА,
	|	втТаблицаВНА.СчетУчетаСубконто2,
	|	втТаблицаВНА.СчетУчетаСубконто3,
	|	втТаблицаВНА.СчетАктива,
	|	втТаблицаВНА.СчетАктива.СчетСсылка,
	|	втТаблицаВНА.СчетАктиваСубконто1,
	|	втТаблицаВНА.СчетАктиваСубконто2,
	|	втТаблицаВНА.СчетАктиваСубконто3,
	|	0,
	|	втПартииВНА.Стоимость,
	
	|	втТаблицаВНА.Подразделение КАК ПодразделениеДт,
	|	втТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	втТаблицаВНА.Подразделение КАК ПодразделениеКт,
	|	втТаблицаВНА.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	
	
	|	ВЫБОР
	|		КОГДА втТаблицаВНА.СчетУчета.СчетСсылка.Количественный
	|			ТОГДА 1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втТаблицаВНА.СчетАктива.СчетСсылка.Количественный
	|			ТОГДА 1
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	втТаблицаДляДвижений КАК втТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПартииВНА КАК втПартииВНА
	|		ПО втТаблицаВНА.КлючСвязи = втПартииВНА.КлючСвязи";
	
КонецФункции

Процедура СформироватьДвижения(Движения, ДополнительныеСвойства, Отказ) Экспорт

	Реквизиты 			= ДополнительныеСвойства.ДляПроведения.Реквизиты;
	ТаблицаВНА 			= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВНА;	
	ТаблицаПроводкиВНА 	= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПроводкиВНА;
	
	НастройкиОтражения = МСФОВНАУХ.ПолучитьНастройкиОтражения();
	//НастройкиОтражения.Вставить("ПервоначальныеСведенияВНАМСФО", 	Истина);
	НастройкиОтражения.Вставить("ПараметрыУчетаВНАМСФО", 			Истина);
	НастройкиОтражения.Вставить("ПараметрыАмортизацииВНАМСФО", 		Истина);
	НастройкиОтражения.Вставить("СтоимостьВНАМСФО", 				Истина);
		
	МСФОВНАУХ.ОтразитьДвиженияПараметровУчетаВНА(Движения, Реквизиты, ТаблицаВНА, НастройкиОтражения);
	
	#Область ПервоначальныеСведенияВНАМСФО
	НастройкиОтражения = МСФОВНАУХ.ПолучитьНастройкиОтражения();
	НастройкиОтражения.Вставить("ПервоначальныеСведенияВНАМСФО", 	Истина);
	МСФОВНАУХ.ОтразитьДвиженияПараметровУчетаВНА(Движения, Реквизиты, ТаблицаВНА, НастройкиОтражения);	
	#КонецОбласти
	
	НастройкиОтражения = Новый Структура("ИспользоватьКлючевыеСубконтоИсточника", Истина);
	МСФОВНАУХ.ОтразитьПроводкиВНА(Движения, Реквизиты, ТаблицаПроводкиВНА, Отказ, НастройкиОтражения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

Функция ПолучитьСтруктуруДействий(ДляФормы = Ложь) Экспорт 

	СтруктураДействий = Новый Структура;
	
	ИменаСубконто = ПолучитьИменаСубконто();	
	
	ЗаполнитьЗависимыеРеквизитыГруппыВНА = Новый Структура;
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетУчета", 			"СчетУчетаПервоначальнойСтоимости");
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетУчетаСубконто1", "СчетУчетаПервоначальнойСтоимостиСубконто1");
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетУчетаСубконто2", "СчетУчетаПервоначальнойСтоимостиСубконто2");
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетУчетаСубконто3", "СчетУчетаПервоначальнойСтоимостиСубконто3");

	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетАмортизации", 			"СчетНакопленнойАмортизации");
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетАмортизацииСубконто1",	"СчетНакопленнойАмортизацииСубконто1");
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетАмортизацииСубконто2", 	"СчетНакопленнойАмортизацииСубконто2");
	ЗаполнитьЗависимыеРеквизитыГруппыВНА.Вставить("СчетАмортизацииСубконто3", 	"СчетНакопленнойАмортизацииСубконто3");
		
	СтруктураДействий.Вставить("ЗаполнитьЗависимыеРеквизитыГруппыВНА", 		Новый Структура("ПараметрыУчетаВНА", ЗаполнитьЗависимыеРеквизитыГруппыВНА));	
		
	Если ДляФормы Тогда	
		СтруктураДействий.Вставить("ЗаполнитьДоступностьПоИменамСубконто",	ИменаСубконто);
	КонецЕсли;

	Возврат СтруктураДействий;
	
КонецФункции

//КоллекцияСтрок - ТабличнаяЧасть,ТаблицаЗначений,ДанныеФормыКоллекция, СтрокаТабличнойЧасти
//Источник - ДокументОбъект, ДанныеФормыСтруктура, УправляемаяФорма
//ПараметрыЗаполнения - Структура(ЗаполнитьРеквизиты = Ложь,  ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь)
Процедура ЗаполнитьСтроки(КоллекцияСтрок, Источник, ПараметрыЗаполненияТЧ = Неопределено) Экспорт

	ЗаполнитьПартииВНА = ПараметрыЗаполненияТЧ.ЗаполнитьМСФО;
	
	ОбъектИсточник = ?(ТипЗнч(Источник)= Тип("УправляемаяФорма"), Источник.Объект, Источник);
	ЗаполняемыеРеквизитыТаблицыФормы = МСФОУХ.ПолучитьЗаполняемыеРеквизитыТаблицыФормы(Источник);
	
	ИсточникВНА = Новый Массив;
	Для каждого СтрокаАктив Из КоллекцияСтрок Цикл
		Если ЗначениеЗаполнено(СтрокаАктив.АктивИсточник) Тогда
			ИсточникВНА.Добавить(СтрокаАктив.АктивИсточник);		
		КонецЕсли;		
	КонецЦикла;
	
	ПараметрыУчетаАктивовИсточников = Справочники.ГруппыВНАМСФО.ПолучитьТаблицуГруппВНАпоУмолчанию(ИсточникВНА);
	ПараметрыУчетаАктивовИсточников.Индексы.Добавить("ВНА");
	
	Для каждого СтрокаАктив Из КоллекцияСтрок Цикл
		
		Если ПараметрыЗаполненияТЧ.ЗаполнитьМСФО Тогда
			
			ПараметрыВНА = ПараметрыУчетаАктивовИсточников.Найти(СтрокаАктив.АктивИсточник, "ВНА");
			Если (ПараметрыВНА <> Неопределено) И ЗначениеЗаполнено(ПараметрыВНА.ПараметрыУчетаВНА) И ЗначениеЗаполнено(СтрокаАктив.ПараметрыУчетаВНА) Тогда
				СтрокаАктив.ПараметрыУчетаВНА = ПараметрыВНА.ПараметрыУчетаВНА;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаАктив.ПараметрыАмортизацииВНА) Тогда				
				СтрокаАктив.СрокПолезногоИспользования 	= СтрокаАктив.ПараметрыАмортизацииВНА.СрокПолезногоИспользования;
				СтрокаАктив.ПараметрыАмортизацииВНА 		= СтрокаАктив.ПараметрыАмортизацииВНА;
				//**СтрокаВНА.ЛиквидационнаяСтоимость 		= СтрокаВНА.ПараметрыАмортизацииВНА.ЛиквидационнаяСтоимость;				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнитьПартииВНА Тогда
			
			ОтборПартий = Новый Структура("КлючСвязи", СтрокаАктив.КлючСвязи);
			
			СтрокиУдаления = ОбъектИсточник.ПартииВНА.НайтиСтроки(ОтборПартий);
			Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
				ОбъектИсточник.ПартииВНА.Удалить(СтрокаУдаления);
			КонецЦикла;
						
			КоличествоПоступило = СтрокаАктив.КоличествоПоступило;
			Если КоличествоПоступило = 0 Тогда
				КоличествоПоступило = 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаАктив.АктивИсточник) Тогда
				
				СтоимостьПартийВНА = Окр(СтрокаАктив.СуммаПоступило / КоличествоПоступило, 2);
				Для НомерВНА = 1 По КоличествоПоступило Цикл
					
					СтрокаПартия = ОбъектИсточник.ПартииВНА.Добавить();
					СтрокаПартия.КлючСвязи	= СтрокаАктив.КлючСвязи;					
					СтрокаПартия.ВНА		= ВстраиваниеУХ.ПолучитьСоздатьВНАПартии(СтрокаАктив.АктивИсточник, НомерВНА, СтрокаАктив.ПараметрыУчетаВНА);
					СтрокаПартия.Стоимость	= СтоимостьПартийВНА;
					
				КонецЦикла;
				
				СтрокаПартия.Стоимость = СтрокаПартия.Стоимость + (СтрокаАктив.СуммаПоступило - СтоимостьПартийВНА * КоличествоПоступило); //ошибка округления
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗаполняемыеРеквизитыТаблицыФормы <> Неопределено Тогда
			МСФОКлиентСерверУХ.ЗаполнитьРасчетныеРеквизитыСтроки(СтрокаАктив, ЗаполняемыеРеквизитыТаблицыФормы);
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры 

Функция ПолучитьСоотвествиеПолейДокумента(ЗаполнитьРеквизиты = Ложь,  ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь) Экспорт

	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("ВНА", 			"ВНА");
	СоответствиеПолей.Вставить("НомерСтроки",	"НомерСтроки");
	
	Если ЗаполнитьРеквизиты Тогда
		СоответствиеПолей.Вставить("ИнвентарныйНомер", 	"ИнвентарныйНомер");
		СоответствиеПолей.Вставить("КлассВНА", 			"КлассВНА");
	КонецЕсли;
	
	Если ЗаполнитьНСБУ Тогда
		
		СоответствиеПолей.Вставить("СрокПолезногоИспользованияНСБУ", "СрокПолезногоИспользованияНСБУ");		
				
	КонецЕсли;
	
	Если ЗаполнитьМСФО Тогда
		
		СоответствиеПолей.Вставить("СрокПолезногоИспользованияМСФО", "СрокПолезногоИспользованияМСФО");
		СоответствиеПолей.Вставить("ЛиквидационнаяСтоимостьМСФО", 	"ЛиквидационнаяСтоимостьМСФО");
		СоответствиеПолей.Вставить("ПараметрыАмортизацииВНАМСФО", 	"ПараметрыАмортизацииВНАМСФО");
		
	КонецЕсли;	

	Возврат СоответствиеПолей;

КонецФункции

Процедура ЗаполнитьЗависимостиРеквизитовДокумента(ФормаДокумента) Экспорт

	ЗависимостиРеквизитов = Новый Массив;
	
	Реквизиты = Новый Структура;
		
	Реквизиты.Вставить("СчетУчета", 			"СчетУчетаПервоначальнойСтоимости");
	Реквизиты.Вставить("СчетУчетаСубконто1", 	"СчетУчетаПервоначальнойСтоимостиСубконто1");
	Реквизиты.Вставить("СчетУчетаСубконто2", 	"СчетУчетаПервоначальнойСтоимостиСубконто2");
	Реквизиты.Вставить("СчетУчетаСубконто3", 	"СчетУчетаПервоначальнойСтоимостиСубконто3");
	
	Реквизиты.Вставить("СчетАмортизации", 			"СчетНакопленнойАмортизации");
	Реквизиты.Вставить("СчетАмортизацииСубконто1", 	"СчетНакопленнойАмортизацииСубконто1");
	Реквизиты.Вставить("СчетАмортизацииСубконто2", 	"СчетНакопленнойАмортизацииСубконто2");
	Реквизиты.Вставить("СчетАмортизацииСубконто3", 	"СчетНакопленнойАмортизацииСубконто3");
	

	Реквизиты.Вставить("ПараметрыАмортизацииВНА", 	"ПараметрыАмортизации");

	Для каждого Реквизит Из Реквизиты Цикл
	
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("РеквизитГруппы", Реквизит.Значение);
		НоваяСтрока.Вставить("Приемник", Реквизит.Ключ);
		НоваяСтрока.Вставить("Источник", "ПараметрыУчетаВНА");
		
		ЗависимостиРеквизитов.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("СпособНачисленияАмортизации", 			"СпособНачисленияАмортизации");
	Реквизиты.Вставить("СрокПолезногоИспользования", 			"СрокПолезногоИспользования");
	Реквизиты.Вставить("СпособОтраженияРасходовПоАмортизации", 	"СпособОтраженияРасходовПоАмортизации");
	Реквизиты.Вставить("КоэффициентУскорения", 					"КоэффициентУскорения");
	Для каждого Реквизит Из Реквизиты Цикл
	
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("РеквизитГруппы", Реквизит.Значение);
		НоваяСтрока.Вставить("Приемник", Реквизит.Ключ);
		НоваяСтрока.Вставить("Источник", "ПараметрыАмортизацииВНА");
		
		ЗависимостиРеквизитов.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ФормаДокумента.КэшируемыеЗначения.Вставить("ЗависимостиРеквизитов", ЗависимостиРеквизитов);
	
КонецПроцедуры

Функция ЗаполнитьДокумент(ДокументОбъект) Экспорт
	
	РеквизитыУП = МСФОВызовСервераУХ.ОсновныеРеквизитыУП(ДокументОбъект.Организация,
				ДокументОбъект.ПериодОтчета.ДатаОкончания, ДокументОбъект.Сценарий);
    
	НомераТаблиц = Новый Структура;
	
	Если Не РеквизитыУП.ФормироватьПроводкиМСФО Тогда
		
		Запрос = Новый Запрос;				
		Запрос.УстановитьПараметр("Организация", 		ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("Сценарий", 			ДокументОбъект.Сценарий);
		Запрос.УстановитьПараметр("ПериодОтчета", 		ДокументОбъект.ПериодОтчета);		
		Запрос.УстановитьПараметр("ПланСчетовМСФО", 	РеквизитыУП.ПланСчетовМСФО);
		Запрос.УстановитьПараметр("Валюта", 			РеквизитыУП.ФункциональнаяВалюта);
		Запрос.УстановитьПараметр("ДатаНачалаМесяца", 	ДокументОбъект.ПериодОтчета.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонецМесяца", 	КонецДня(ДокументОбъект.ПериодОтчета.ДатаОкончания));
		Запрос.УстановитьПараметр("ГраницаДоДокумента", МСФОВызовСервераУХ.ПолучитьГраницуДоДокумента(ДокументОбъект.Дата, ДокументОбъект.Ссылка));
		Запрос.УстановитьПараметр("ВидОтчетаАОСВ", 		Справочники.ВидыОтчетов.ПолучитьВидОтчетаОСВ(Запрос.Параметры.ПланСчетовМСФО));

		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(ВстраиваниеУХ.ТекстЗапроса_Приоритеты(НомераТаблиц));
		ТекстЗапроса.Добавить(ТекстЗапроса_втСчетаБД(НомераТаблиц, "втСчетаБД"));
		ТекстЗапроса.Добавить(ТекстЗапроса_втСоответствиеСчетов(НомераТаблиц));
		ТекстЗапроса.Добавить(ТекстЗапроса_ОстаткиТК(НомераТаблиц, Запрос));
				
		Запрос.Текст = СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	Иначе		
		
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(ВстраиваниеУХ.ТекстЗапроса_Приоритеты(НомераТаблиц));
		ТекстЗапроса.Добавить(ТекстЗапроса_втСчетаБД(НомераТаблиц, "втСчетаБД"));
		ТекстЗапроса.Добавить(ТекстЗапроса_втСоответствиеСчетов(НомераТаблиц));
		ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаОстаткиВНА(НомераТаблиц));
		ТекстЗапроса.Добавить(ТекстЗапроса_ТаблицаСписания(НомераТаблиц));
		
		Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()));
		
		Запрос.УстановитьПараметр("Организация", 		ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("Сценарий", 			ДокументОбъект.Сценарий);
		Запрос.УстановитьПараметр("ПланСчетовМСФО", 	РеквизитыУП.ПланСчетовМСФО);
		Запрос.УстановитьПараметр("Валюта", 			РеквизитыУП.ФункциональнаяВалюта);
		Запрос.УстановитьПараметр("ДатаНачалаМесяца", 	ДокументОбъект.ПериодОтчета.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонецМесяца", 	КонецДня(ДокументОбъект.ПериодОтчета.ДатаОкончания));
		Запрос.УстановитьПараметр("ГраницаДоДокумента", МСФОВызовСервераУХ.ПолучитьГраницуДоДокумента(ДокументОбъект.Дата, ДокументОбъект.Ссылка));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	КонецЕсли;
	
	Если НомераТаблиц.Свойство("ТаблицаОстатки") Тогда	
		ДокументОбъект.ВНА.Загрузить(РезультатЗапроса.Получить(НомераТаблиц.ТаблицаОстатки).Выгрузить());	
	КонецЕсли;
	
	ПерезаполнитьПартииВНА(ДокументОбъект);
	
	Если НомераТаблиц.Свойство("ТаблицаСписания") Тогда	
		
		КлючПоиска = "СчетАктива, СчетАктиваСубконто1, СчетАктиваСубконто2, СчетАктиваСубконто3";
		Отбор = Новый Структура(КлючПоиска);
		
		ТабСписания = РезультатЗапроса.Получить(НомераТаблиц.ТаблицаСписания).Выгрузить();
		ТабСписания.Индексы.Добавить(КлючПоиска);
		
		Для каждого СтрокаАктив Из ДокументОбъект.ВНА Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаАктив);
			
			Для каждого СтрокаИсточник Из ТабСписания.НайтиСтроки(Отбор) Цикл
				
				СтрокаПриемник = ДокументОбъект.СписанияАктивов.Добавить();				
				СтрокаПриемник.КлючСвязи = СтрокаАктив.КлючСвязи;
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);

			КонецЦикла;
		
		КонецЦикла;
				
	КонецЕсли;
	
КонецФункции

Процедура ПерезаполнитьПартииВНА(ДокументОбъект) Экспорт
	
	ДокументОбъект.ПартииВНА.Очистить();
	
	Для каждого СтрокаАктив Из ДокументОбъект.ВНА Цикл	
		
		СтрокаАктив.КлючСвязи = Новый УникальныйИдентификатор;
		КоличественныйУчет = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СтрокаАктив.ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости).Количественный;
		
		КоличествоРекласс = СтрокаАктив.КоличествоПоступило + СтрокаАктив.КоличествоНаНачало;
		СуммаПоступило = СтрокаАктив.СуммаПоступило + СтрокаАктив.СуммаНаНачало;
		Если СуммаПоступило <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоличественныйУчет Тогда
			КоличествоРекласс = ?(КоличествоРекласс > 0, КоличествоРекласс, 1);
		Иначе 
			КоличествоРекласс = 1;
		КонецЕсли;
				
		СтрокаПартия = Неопределено;
		СтоимостьЕдиницы = Окр(СуммаПоступило / КоличествоРекласс, 2);
		
		Для ИндексСтроки = 1 По КоличествоРекласс Цикл
			
			СтрокаПартия 			= ДокументОбъект.ПартииВНА.Добавить();
			СтрокаПартия.КлючСвязи 	= СтрокаАктив.КлючСвязи;
			СтрокаПартия.ВНА 		= ВстраиваниеУХ.ПолучитьСоздатьВНАПартии(СтрокаАктив.АктивИсточник, ИндексСтроки, СтрокаАктив.ПараметрыУчетаВНА);
			
			СтрокаПартия.Стоимость = СтоимостьЕдиницы;
			
		КонецЦикла;
		 		
		Если (СтрокаПартия <> Неопределено)  Тогда
			СтрокаПартия.Стоимость = СтрокаПартия.Стоимость + (СуммаПоступило - КоличествоРекласс * СтоимостьЕдиницы);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапроса_втСчетаБД(НомераТаблиц, ИмяТаблицыПоместить = Неопределено)

	НомераТаблиц.Вставить("втСчетаБД", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СчетаБДВидыСубконто.Ссылка) КАК СчетИБ,
	|	СчетаБДВидыСубконто.Ссылка.СчетСсылка КАК СчетМСФО,
	|	МАКСИМУМ(СчетаБДВидыСубконто.Номер) КАК Номер,
	|	МАКСИМУМ(СчетаБДВидыСубконто.Ссылка.СчетСсылка.Количественный) КАК Количественный
	|ИЗ
	|	Справочник.СчетаБД.ВидыСубконто КАК СчетаБДВидыСубконто
	|ГДЕ
	|	ВЫРАЗИТЬ(СчетаБДВидыСубконто.ТипДанных КАК СТРОКА(150)) В (""Справочник.Номенклатура"", &МетаданныеРБП)
	|	И СчетаБДВидыСубконто.Ссылка.Владелец = &ПланСчетовМСФО
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаБДВидыСубконто.Ссылка.СчетСсылка";
	
	ИмяРБП 			= ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуРБП().Метаданные().ПолноеИмя();
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, "&МетаданныеРБП", СтрШаблон(" ""%1"" ", ИмяРБП));
	
	Если ИмяТаблицыПоместить = Неопределено Тогда	
		Возврат ТекстЗапроса;
	Иначе 
		Возврат СтрЗаменить(ТекстЗапроса, "ИЗ", "ПОМЕСТИТЬ " + ИмяТаблицыПоместить + " ИЗ ");
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапроса_втСоответствиеСчетов(НомераТаблиц)

	НомераТаблиц.Вставить("втСоответствиеСчетов", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СчетаБДВидыСубконто.Ссылка) КАК СчетИБ,
	|	СчетаБДВидыСубконто.Ссылка.СчетСсылка КАК СчетМСФО
	|ПОМЕСТИТЬ втСоответствиеСчетов
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБДВидыСубконто
	|ГДЕ 
	|	СчетаБДВидыСубконто.Владелец = &ПланСчетовМСФО
	|СГРУППИРОВАТЬ ПО
	|	СчетаБДВидыСубконто.Ссылка.СчетСсылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапроса_ТаблицаСписания(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаСписания", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втСчетаКО.СчетИБ КАК Счет,
	|	МСФООстаткиИОбороты.КорСубконто1 КАК Субконто1,
	|	МСФООстаткиИОбороты.КорСубконто2 КАК Субконто2,
	|	МСФООстаткиИОбороты.КорСубконто3 КАК Субконто3,
	|	ВЫБОР
	|		КОГДА втСчетаБД.Количественный
	|			ТОГДА МСФООстаткиИОбороты.КоличествоОборотКт
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоСписано,
	|	МСФООстаткиИОбороты.СуммаВВалютеУчетаОборотКт КАК СуммаСписано,
	|	втСчетаБД.СчетИБ КАК СчетАктива,
	|	ЕСТЬNULL(МСФООстаткиИОбороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК СчетАктиваСубконто1,
	|	ЕСТЬNULL(МСФООстаткиИОбороты.Субконто2, НЕОПРЕДЕЛЕНО) КАК СчетАктиваСубконто2,
	|	ЕСТЬNULL(МСФООстаткиИОбороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК СчетАктиваСубконто3
	|ИЗ
	|	РегистрБухгалтерии.МСФО.Обороты(
	|			&ДатаНачалаМесяца,
	|			&ГраницаДоДокумента,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.СчетМСФО
	|				ИЗ
	|					втСчетаБД КАК т),
	|			,
	|			Организация = &Организация
	|				И Сценарий = &Сценарий
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втПриоритеты КАК т),
	|			,
	|			) КАК МСФООстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетаБД
	|		ПО МСФООстаткиИОбороты.Счет = втСчетаБД.СчетМСФО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствиеСчетов КАК втСчетаКО
	|		ПО МСФООстаткиИОбороты.КорСчет = втСчетаКО.СчетМСФО
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втСчетаБД.Количественный
	|				ТОГДА МСФООстаткиИОбороты.КоличествоОборотКт
	|			ИНАЧЕ МСФООстаткиИОбороты.СуммаВВалютеУчетаОборотКт
	|		КОНЕЦ <> 0";

КонецФункции

Функция ТекстЗапроса_ТаблицаОстаткиВНА(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаОстатки", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	МСФООстаткиИОбороты.Субконто1 КАК АктивИсточник,
	|	втПриоритеты.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	ВЫБОР
	|		КОГДА втСчетаБД.Количественный
	|			ТОГДА МСФООстаткиИОбороты.КоличествоОборотДт
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоПоступило,
	|	ВЫБОР
	|		КОГДА втСчетаБД.Количественный
	|			ТОГДА МСФООстаткиИОбороты.КоличествоНачальныйОстатокДт
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоНаНачало,
	|	МСФООстаткиИОбороты.СуммаВВалютеУчетаОборотДт КАК СуммаПоступило,
	|	МСФООстаткиИОбороты.СуммаВВалютеУчетаНачальныйОстатокДт КАК СуммаНаНачало,
	|	втСчетаБД.СчетИБ КАК СчетАктива,
	|	МСФООстаткиИОбороты.Субконто1 КАК СчетАктиваСубконто1,
	|	МСФООстаткиИОбороты.Субконто2 КАК СчетАктиваСубконто2,
	|	МСФООстаткиИОбороты.Субконто3 КАК СчетАктиваСубконто3
	|ИЗ
	|	РегистрБухгалтерии.МСФО.ОстаткиИОбороты(
	|			&ДатаНачалаМесяца,
	|			&ГраницаДоДокумента,
	|			,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.СчетМСФО
	|				ИЗ
	|					втСчетаБД КАК т),
	|			,
	|			Организация = &Организация
	|				И Сценарий = &Сценарий
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втПриоритеты КАК т)) КАК МСФООстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
	|		ПО МСФООстаткиИОбороты.Субконто1 = втПриоритеты.ВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетаБД
	|		ПО МСФООстаткиИОбороты.Счет = втСчетаБД.СчетМСФО
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втСчетаБД.Количественный
	|				ТОГДА ЕСТЬNULL(МСФООстаткиИОбороты.КоличествоОборотДт, 0) <> 0
	|						ИЛИ ЕСТЬNULL(МСФООстаткиИОбороты.КоличествоНачальныйОстатокДт, 0) <> 0
	|						ИЛИ ЕСТЬNULL(МСФООстаткиИОбороты.КоличествоОборотКт, 0) <> 0
	|			ИНАЧЕ ЕСТЬNULL(МСФООстаткиИОбороты.СуммаВВалютеУчетаОборотДт, 0) <> 0
	|					ИЛИ ЕСТЬNULL(МСФООстаткиИОбороты.СуммаВВалютеУчетаНачальныйОстатокДт, 0) <> 0
	|					ИЛИ ЕСТЬNULL(МСФООстаткиИОбороты.СуммаВВалютеУчетаОборотКт, 0) <> 0
	|		КОНЕЦ";

КонецФункции

Функция ТекстЗапроса_ОстаткиТК(НомераТаблиц, Запрос)
	
	всРавно = ВидСравненияКомпоновкиДанных.Равно;	
	всВСписке = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ВидыИтога = Новый СписокЗначений;
	ВидыИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКД);
	ВидыИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКК);
	
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	
	ТиповыеОтчетыУХ.ДобавитьГруппировкуСтруктуры(НастройкиКД);
	ТиповыеОтчетыУХ.ДобавитьПараметр(НастройкиКД, "ПолучитьТолькоСинтетику", Ложь);
	
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиКД.Выбор, "ЗначениеПоСчету", "ЗначениеПоСчету");
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиКД.Выбор, "ПоказательОтчета.СчетБД", "СчетБД");
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиКД.Выбор, "Аналитика1", "Аналитика1");
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиКД.Выбор, "Аналитика2", "Аналитика2");
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиКД.Выбор, "Аналитика3", "Аналитика3");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "ВидОтчета", 				всРавно,	Запрос.Параметры.ВидОтчетаАОСВ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "ПоказательОтчета.ВидИтогаПоСчету",	всВСписке,	ВидыИтога);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "ПоказательОтчета.СчетБД", 			всВСписке,	"&П3");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "Аналитика1", 						всВСписке,	"&П4");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "Версия.Сценарий", 		всРавно,	Запрос.Параметры.Сценарий);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "Версия.Организация", 	всРавно, 	Запрос.Параметры.Организация);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "Версия.ПериодОтчета",	всРавно, 	Запрос.Параметры.ПериодОтчета);    
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКД.Отбор, "Версия.Валюта", 			всРавно,	Запрос.Параметры.Валюта);
			
	ЗапросИсточник = Справочники.ВидыОтчетов.ПолучитьЗапросЗначенийЧисловыхПоказателейСКД(НастройкиКД, Ложь);
	
	ЗапросИсточник.Текст = СтрЗаменить(ЗапросИсточник.Текст, "&П3", "ВЫБРАТЬ т.СчетИБ ИЗ втСчетаБД КАК т");
	ЗапросИсточник.Текст = СтрЗаменить(ЗапросИсточник.Текст, "&П4", "ВЫБРАТЬ т.ВНА ИЗ втПриоритеты КАК т");
	ЗапросИсточник.Текст = СтрЗаменить(ЗапросИсточник.Текст, "ПоказательОтчетаСчетБД", "СчетИБ");
	
	НомераТаблиц.Вставить("втПоказателиАОСВ", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втВерсииАОСВ", 		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗначенияАОСВ", 		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОстатки", 	НомераТаблиц.Количество());
	
	Для каждого ПараметрИсточник Из ЗапросИсточник.Параметры Цикл
		Запрос.УстановитьПараметр(ПараметрИсточник.Ключ, ПараметрИсточник.Значение);
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросИсточник.Текст);
	СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество()-1).ТаблицаДляПомещения = "ЗначенияАОСВ";
	
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(СхемаЗапроса.ПолучитьТекстЗапроса());
	ТекстЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗначенияАОСВ.Аналитика1 КАК АктивИсточник,
	|	втПриоритеты.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	1 КАК КоличествоПоступило,
	|	0 КАК КоличествоНаНачало,
	|	ЗначенияАОСВ.ЗначениеПоСчету КАК СуммаПоступило,
	|	0 КАК СуммаНаНачало,
	|	ЗначенияАОСВ.СчетИБ КАК СчетАктива,
	|	ЗначенияАОСВ.Аналитика1 КАК СчетАктиваСубконто1,
	|	ЗначенияАОСВ.Аналитика2 КАК СчетАктиваСубконто2,
	|	ЗначенияАОСВ.Аналитика3 КАК СчетАктиваСубконто3
	|ИЗ
	|	ЗначенияАОСВ КАК ЗначенияАОСВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
	|		ПО ЗначенияАОСВ.Аналитика1 = втПриоритеты.ВНА");
	
	Возврат СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());	
	
КонецФункции

#КонецОбласти

#Область МеханизмыДокумента

Функция ПолучитьИменаСубконто() Экспорт 

	тчВНА = Новый Структура;

	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетУчетаСубконто1");
	Субконто.Вставить(2, "СчетУчетаСубконто2");
	Субконто.Вставить(3, "СчетУчетаСубконто3");
	
	тчВНА.Вставить("СчетУчета", Субконто);
	
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетАмортизацииСубконто1");
	Субконто.Вставить(2, "СчетАмортизацииСубконто2");
	Субконто.Вставить(3, "СчетАмортизацииСубконто3");
	
	тчВНА.Вставить("СчетАмортизации", Субконто);
	
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "СчетАктиваСубконто1");
	Субконто.Вставить(2, "СчетАктиваСубконто2");
	Субконто.Вставить(3, "СчетАктиваСубконто3");
	
	тчВНА.Вставить("СчетАктива", Субконто);	
	тчВНА.Вставить("ИсключенияСкрытияСубконто", Новый Структура("СчетАктива,СчетУчета"));
	
	тчСписанияАктивов = Новый Структура;
	Субконто = Новый Соответствие;
	Субконто.Вставить(1, "Субконто1");
	Субконто.Вставить(2, "Субконто2");
	Субконто.Вставить(3, "Субконто3");
	
	тчСписанияАктивов.Вставить("Счет", Субконто);	
	
	Возврат Новый Структура("ВНА,СписанияАктивов", тчВНА, тчСписанияАктивов);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаполнитьКлючиИСоответствияТЧВНАИПартии() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВосстановлениеВНАИзРасходовВНА.Ссылка КАК Ссылка,
		|	ВосстановлениеВНАИзРасходовВНА.НомерСтроки КАК ВНАНомерСтроки,
		|	ЕСТЬNULL(ВосстановлениеВНАИзРасходовПартииВНА.НомерСтроки, НЕОПРЕДЕЛЕНО) КАК ПартииНомерСтроки
		|ИЗ
		|	Документ.ВосстановлениеВНАИзРасходов.ВНА КАК ВосстановлениеВНАИзРасходовВНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеВНАИзРасходов.ПартииВНА КАК ВосстановлениеВНАИзРасходовПартииВНА
		|		ПО ВосстановлениеВНАИзРасходовВНА.Удалить_Номенклатура = ВосстановлениеВНАИзРасходовПартииВНА.Удалить_АктивИсточник
		|			И ВосстановлениеВНАИзРасходовВНА.Ссылка = ВосстановлениеВНАИзРасходовПартииВНА.Ссылка
		|			И (ВосстановлениеВНАИзРасходовПартииВНА.КлючСвязи = &КлючСвязи)
		|			И (ВосстановлениеВНАИзРасходовПартииВНА.Удалить_АктивИсточник <> &ПустойАктив)
		|ГДЕ
		|	ВосстановлениеВНАИзРасходовВНА.КлючСвязи = &КлючСвязи
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("КлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ПустойАктив", Справочники.Номенклатура.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ДокОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		ВНА = ДокОбъект.ВНА;
		Партии = ДокОбъект.ПартииВНА;
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаВНА = ВНА.Найти(ВыборкаДетальныеЗаписи.ВНАНомерСтроки, "НомерСтроки");
			Если СтрокаВНА = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВНА.КлючСвязи = Новый УникальныйИдентификатор;
			
			Если ВыборкаДетальныеЗаписи.ПартииНомерСтроки <> Неопределено Тогда
				СтрокаПартии = Партии.Найти(ВыборкаДетальныеЗаписи.ПартииНомерСтроки, "НомерСтроки");
				Если СтрокаПартии <> Неопределено Тогда
					СтрокаПартии.КлючСвязи = СтрокаВНА.КлючСвязи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект, Ложь, Ложь);
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВосстановленияВНА() Экспорт

	ПустойИдентификатор = МСФОКлиентСерверУХ.ПолучитьПустойУникальныйИдентификатор();
	
	Выборка = Документы.ВосстановлениеВНАИзРасходов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЕстьИзменения = Ложь;
		ДокументОбъект = Выборка.ПолучитьОбъект();		
		
		Если ДокументОбъект.ПериодОтчета.Пустая() Тогда
			
			ДатаМес = НачалоМесяца(ДокументОбъект.Дата);
			ДокументОбъект.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДатаМес, Перечисления.Периодичность.Месяц, 0);
			Если Не ДокументОбъект.ПериодОтчета.Пустая() Тогда
				ЕстьИзменения = Истина;			
			КонецЕсли;			
			
		КонецЕсли;
		
		Для каждого СтрокаАктив Из ДокументОбъект.ВНА Цикл
						
			ОбновлениеС_138 = ТипЗнч(СтрокаАктив.Удалить_ВНА) <> Тип("СправочникСсылка.Номенклатура");
			
			Удалить_ВНА = ?(ЗначениеЗаполнено(СтрокаАктив.Удалить_ВНА), СтрокаАктив.Удалить_ВНА, СтрокаАктив.Удалить_ВНАПринятыйКУчету);
			
			Если (Не ОбновлениеС_138) И не ЗначениеЗаполнено(СтрокаАктив.АктивИсточник) И ЗначениеЗаполнено(Удалить_ВНА) Тогда
				СтрокаАктив.АктивИсточник = Удалить_ВНА; //обновление с 1.3.9
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(СтрокаАктив.АктивИсточник) Тогда
				СтрокаАктив.АктивИсточник = СтрокаАктив.Удалить_Номенклатура;
				ЕстьИзменения = Истина;			
			КонецЕсли;
			
			Отбор = Новый Структура("КлючСвязи", СтрокаАктив.КлючСвязи); 
			Если ДокументОбъект.ПартииВНА.НайтиСтроки(Отбор).Количество() Тогда
				Продолжить;// данные по Партиям уже сформированы
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.ПартииВНА.Добавить();
			
			Если ТипЗнч(Удалить_ВНА) = Тип("СправочникСсылка.Номенклатура") Тогда
				Удалить_ВНА = ВстраиваниеУХ.ПолучитьСоздатьВНАПартии(Удалить_ВНА, 1, Удалить_ВНА.УдалитьОбъектВНА.ГруппаВНА);
			КонецЕсли;
			
			НоваяСтрока.ВНА = Удалить_ВНА;
			НоваяСтрока.КлючСвязи = СтрокаАктив.КлючСвязи;
			НоваяСтрока.Стоимость = СтрокаАктив.СуммаПоступило;
			
			ЕстьИзменения = Истина;
			
		КонецЦикла;
		
		СтрокиУдаления = ДокументОбъект.ПартииВНА.НайтиСтроки(Новый Структура("КлючСвязи", ПустойИдентификатор));
		Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
			ДокументОбъект.ПартииВНА.Удалить(СтрокаУдаления);
			ЕстьИзменения = Истина;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
