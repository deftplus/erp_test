
&НаКлиенте
Процедура ЗаполнитьКлючевыеРеквизиты(Команда)
	
	СтруктураПараметров = Новый Структура;
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьКлючевыеРеквизиты_Завершение", ЭтотОбъект);
	СтруктураПараметров.Вставить("УправлениеПериодом", Объект.УправлениеПериодом);
	ОткрытьФорму("Документ.КорректировкаЗначенийПоказателей.Форма.ФормаЗаполненияРеквизитов", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлючевыеРеквизиты_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнитьТаблицуКлючевыхРеквизитов(ВыбранноеЗначение);
		
КонецПроцедуры // ЗаполнитьКлючевыеРеквизиты_Завершение() 

&НаСервере
Процедура ЗаполнитьТаблицуКлючевыхРеквизитов(Организация=Неопределено,ПериодОтчета=Неопределено)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета,
	|	СтатусыПериодовСценариев.Организации КАК Организация
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария = &УправлениеПериодомСценария";
	
	Запрос.УстановитьПараметр("УправлениеПериодомСценария",Объект.УправлениеПериодом);
	
	Если НЕ Организация=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И СтатусыПериодовСценариев.Организации=&Организация";
		Запрос.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли;
	
	Если НЕ ПериодОтчета=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И СтатусыПериодовСценариев.Периоды=&ПериодОтчета";
		Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
		
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Объект.КлючевыеРеквизиты.Очистить();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(Результат.ПериодОтчета) И ЗначениеЗаполнено(Результат.Организация)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока	= Объект.КлючевыеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТаблицуКлючевыхРеквизитов() 

&НаКлиенте
Процедура ДополнитьТаблицуКлючевыхРеквизитов(ВыбранноеЗначение)
		
	Если ВыбранноеЗначение.ОрганизацииИзУОП И ВыбранноеЗначение.ПериодыИзУОП Тогда
		
		ЗаполнитьТаблицуКлючевыхРеквизитов();
		
	ИначеЕсли ВыбранноеЗначение.ОрганизацииИзУОП Тогда
		
		ЗаполнитьТаблицуКлючевыхРеквизитов(Неопределено,ВыбранноеЗначение.ПериодОтчета);
		
	ИначеЕсли ВыбранноеЗначение.ПериодыИзУОП Тогда
		
		ЗаполнитьТаблицуКлючевыхРеквизитов(ВыбранноеЗначение.Организация);
		
	Иначе
		
		Объект.КлючевыеРеквизиты.Очистить();
		
		НоваяСтрока				= Объект.КлючевыеРеквизиты.Добавить();
		НоваяСтрока.Организация	= ВыбранноеЗначение.Организация;
		НоваяСтрока.ПериодОтчета= ВыбранноеЗначение.ПериодОтчета;
		
	КонецЕсли;
		
КонецПроцедуры // ДополнитьТаблицуКлючевыхРеквизитов()

&НаСервере
Процедура УстановитьПараметрыОтбора()
	
	ДанныеСписков=Документы.КорректировкаЗначенийПоказателей.ПолучитьВозможныеПериодыОрганизации(Объект.УправлениеПериодом);
	
	Элементы.КлючевыеРеквизитыПериодОтчета.СписокВыбора.Очистить();
	Элементы.ТаблицаКорректировокПериодОтчета.СписокВыбора.Очистить();
	Элементы.ПериодОтчета.СписокВыбора.Очистить();
	Элементы.НовыйПериод.СписокВыбора.Очистить();
	
	Для Каждого Элемент ИЗ ДанныеСписков.Периоды Цикл
		
		Элементы.КлючевыеРеквизитыПериодОтчета.СписокВыбора.Добавить(Элемент);
		Элементы.ТаблицаКорректировокПериодОтчета.СписокВыбора.Добавить(Элемент);
		
		Элементы.ПериодОтчета.СписокВыбора.Добавить(Элемент);
		Элементы.НовыйПериод.СписокВыбора.Добавить(Элемент);
	
	КонецЦикла;
	
	МассивЗначенийОрганизаций  = Новый ФиксированныйМассив(ДанныеСписков.Организации);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗначенийОрганизаций);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.КлючевыеРеквизитыОрганизация.ПараметрыВыбора 		= НовыеПараметры;
	Элементы.ТаблицаКорректировокОрганизация.ПараметрыВыбора 	= НовыеПараметры;
	Элементы.Организация.ПараметрыВыбора 						= НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыОтбора() 

&НаКлиенте
Процедура УправлениеПериодомПриИзменении(Элемент)
	
	ПолучитьДанныеУправленияПериодом();
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеУправленияПериодом()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УправлениеПериодомСценария.Сценарий КАК Сценарий,
	             |	УправлениеПериодомСценария.Сценарий.СценарийДляАктуализации КАК СценарийДляАктуализации
	             |ИЗ
	             |	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	             |ГДЕ
	             |	УправлениеПериодомСценария.Ссылка = &УправлениеПериодом";
	
	Запрос.УстановитьПараметр("УправлениеПериодом",Объект.УправлениеПериодом);
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Объект.Сценарий=Результат.Сценарий;
		
	Если Не ЗначениеЗаполнено(Объект.СценарийДляАктуализации) Тогда
		
		Объект.СценарийДляАктуализации=Результат.СценарийДляАктуализации;
		
	КонецЕсли;

	
	УстановитьПараметрыОтбора();
	ЗаполнитьКэшВалютыОтчетности();
	
КонецПроцедуры //

&НаСервере
Процедура ЗаполнитьКэшВалютыОтчетности()
	
	КэшВалютыОтчетности.Очистить();
	
	ТаблицаВалютОтчетности=РегистрыСведений.ВалютыОтчетности.ПолучитьТаблицуВалютДляВерсииОрганизационнойСтруктуры(Объект.УправлениеПериодом.ВерсияОрганизационнойСтруктуры);
	
	Для Каждого Строка ИЗ ТаблицаВалютОтчетности Цикл
		
		НоваяСтрока=КэшВалютыОтчетности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьКэшВалютыОтчетности() 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		Если Параметры.Свойство("СпособВводаКорректировки") И Параметры.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение Тогда
			
			ПодготовитьДанныеОбратногоРаспределения();
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Объект.СпособВводаКорректировки) Тогда
				
				Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод;
				
			КонецЕсли;
			
			Если Параметры.Свойство("ЭкземплярОтчета") Тогда
				
				Объект.УправлениеПериодом=Параметры.УправлениеПериодом;
				Объект.Организация=Параметры.Организация;
				
				Для Каждого Период ИЗ Параметры.МассивПериодов Цикл
					
					Для Каждого Показатель ИЗ Параметры.МассивПоказателей Цикл
						
						НоваяСтрока=Объект.КорректировкаСинтетика.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Параметры);
						НоваяСтрока.Показатель=Показатель;
						НоваяСтрока.ПериодОтчета=Период;
						НоваяСтрока.ВидОтчета=Параметры.ВидОтчета;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УправлениеПериодом) Тогда
		
		ПолучитьДанныеУправленияПериодом();
		
	КонецЕсли;
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ПолучитьСтруктуруДанныхОбъекта(),ЭтаФорма.УникальныйИдентификатор);
	
	ЗаполнитьСписокСпособовВвода();
			
	ПодготовитьРабочиеДанные();
	
	УстановитьУсловноеОформление();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеОбратногоРаспределения()

	Объект.Организация						= Параметры.Организация;
	Объект.УправлениеПериодом				= Параметры.УправлениеПериодом;
	Объект.Сценарий                         = Параметры.Сценарий;
		
	Объект.СпособВводаКорректировки			= Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение;
	
	Параметры.Свойство("ОтборОрганизацийДляРаспределения",Объект.ОтборОрганизацийДляРаспределения);	
	
КонецПроцедуры // ПодготовитьДанныеОбратногоРаспределения()

&НаСервере
Процедура ЗаполнитьСписокСпособовВвода()
	
	Элементы.СпособВводаКорректировки.СписокВыбора.Очистить();
	Элементы.СпособВводаКорректировки.СписокВыбора.Добавить(Перечисления.СпособыВводаКорректировок.РучнойВвод);
	
	Если ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
		
		Элементы.СпособВводаКорректировки.СписокВыбора.Добавить(Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение);
		Элементы.СпособВводаКорректировки.СписокВыбора.Добавить(Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов);
		Элементы.СпособВводаКорректировки.СписокВыбора.Добавить(Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение);
	
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСписокСпособовВвода() 

&НаСервере
Функция ПолучитьСтруктуруДанныхОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("ТаблицыРаскрытия",Новый Соответствие);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьСтруктуруДанныхОбъекта() 

&НаСервере
Процедура ЗаполнитьТаблицуКорректировокФорма(ТабКорректировкиРаскрытия=Неопределено)
	
	ТаблицаКорректировок.Очистить();
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ * Поместить КорректировкаСинтетика 
	|ИЗ &КорректировкаСинтетика КАК КорректировкаСинтетика
	|;";
	
	Если ЗначениеЗаполнено(Объект.ПравилоОбработки) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ВЫБРАТЬ
		|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ПроцедурыРасчетов.Процедура КАК Процедура
		|ПОМЕСТИТЬ ПроцедураРасчетов
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|;
		|";
		
		Запрос.УстановитьПараметр("НазначениеРасчетов",Объект.ПравилоОбработки);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"ВЫБРАТЬ
	|	КорректировкаСинтетика.ИдентификаторСинтетика КАК ИдентификаторСинтетика,
	|	КорректировкаСинтетика.ВидОтчета КАК ВидОтчета,
	|	КорректировкаСинтетика.Организация КАК Организация,
	|	КорректировкаСинтетика.ПериодОтчета КАК ПериодОтчета,
	|	КорректировкаСинтетика.Аналитика1 КАК Аналитика1,
	|	КорректировкаСинтетика.Аналитика2 КАК Аналитика2,
	|	КорректировкаСинтетика.Аналитика3 КАК Аналитика3,
	|	КорректировкаСинтетика.Аналитика4 КАК Аналитика4,
	|	КорректировкаСинтетика.Аналитика5 КАК Аналитика5,
	|	КорректировкаСинтетика.Аналитика6 КАК Аналитика6,
	|	КорректировкаСинтетика.Проект КАК Проект,
	|	КорректировкаСинтетика.Показатель КАК Показатель,
	|	КорректировкаСинтетика.Значение КАК Значение,
	|	ВидыОтчетов.ВидАналитики1 КАК ВидАналитики1,
	|	ВидыОтчетов.ВидАналитики2 КАК ВидАналитики2,
	|	ВидыОтчетов.ВидАналитики3 КАК ВидАналитики3,
	|	ВидыОтчетов.ВидАналитики4 КАК ВидАналитики4,
	|	ВидыОтчетов.ВидАналитики5 КАК ВидАналитики5,
	|	ВидыОтчетов.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
	|	ПоказателиОтчетов.ГруппаРаскрытия,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ВЫБОР Когда ПоказателиОтчетов.ВидИтога=ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.НеРассчитывается) Тогда Истина Иначе ЛОжь Конец КАК БезИтога,";
	
	Если ЗначениеЗаполнено(Объект.ПравилоОбработки) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	ВЫБОР
		|		КОГДА ПроцедураРасчетов.Процедура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетПоФормуле";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|ЛОЖЬ КАК РасчетПоФормуле";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	КорректировкаСинтетика КАК КорректировкаСинтетика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
	|		ПО КорректировкаСинтетика.ВидОтчета = ВидыОтчетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО КорректировкаСинтетика.Показатель = ПоказателиОтчетов.Ссылка";
	
	Если ЗначениеЗаполнено(Объект.ПравилоОбработки) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ЛЕВОЕ СОЕДИНЕНИЕ ПроцедураРасчетов КАК ПроцедураРасчетов
		|		ПО КорректировкаСинтетика.Показатель = ПроцедураРасчетов.ПотребительРасчета";
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("КорректировкаСинтетика",Объект.КорректировкаСинтетика.Выгрузить());
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		Если Результат.РазделениеПоПроектам Тогда
			
			ЕстьРазделениеПоПроектам=Истина;
			
		КонецЕсли;
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(Результат["ВидАналитики"+Индекс]) Тогда
				
				НоваяСтрока.АналитикВидаОтчета=Индекс;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОпредлитьЧислоАналитикПоказателя(НоваяСтрока,Результат);
		
		Если НоваяСтрока.АналитикВидаОтчета>МаксАналитикВидаОтчета Тогда
			
			МаксАналитикВидаОтчета=НоваяСтрока.АналитикВидаОтчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолучитьИсходныеЗначенияТаблица(ТабКорректировкиРаскрытия);
	
КонецПроцедуры // ЗаполнитьТаблицуКорректировокФорма() 


&НаСервере
Процедура ПодготовитьРабочиеДанные()
		
	ЗаполнитьТаблицуКорректировокФорма();
			
КонецПроцедуры // ПодготовитьРабочиеДанные() 

&НаСервере
Процедура ОпредлитьЧислоАналитикПоказателя(НоваяСтрока,Результат)
	
	Если Результат.ЧислоАналитикГруппыРаскрытия>0 Тогда
		
		НоваяСтрока.ЧислоАналитикГруппыРаскрытия=Результат.ЧислоАналитикГруппыРаскрытия;
		
	ИначеЕсли Результат.Валютный Тогда
		
		НоваяСтрока.ЧислоАналитикГруппыРаскрытия=-1;
		
	Иначе
		
		НоваяСтрока.ЧислоАналитикГруппыРаскрытия=0;
		
	КонецЕсли;
	
КонецПроцедуры // ОпредлитьЧислоАналитикПоказателя() 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ЭлементУсловногоОформления=УсловноеОформление.Элементы.Добавить();
		
		ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаКорректировок.ВидАналитики"+Индекс);
		ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НедоступныеДанныеУХЦвет);
				
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКорректировокАналитика"+Индекс);
		ОформляемоеПоле.Использование = Истина;
		
	КонецЦикла;
	
	// Возможность заполнения проектов
	
	ЭлементУсловногоОформления=УсловноеОформление.Элементы.Добавить();
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаКорректировок.РазделениеПоПроектам");
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НедоступныеДанныеУХЦвет);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКорректировокПроект");
	ОформляемоеПоле.Использование = Истина;
	
	//Возможность ручного редактировавния корректировки. Не корректироуются вручную значения, рассчитывающиеся
	//по формулам и синтетические значенмя при наличии у показателя аналитического раскрытия
	
	ЭлементУсловногоОформления=УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбор = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ПолеОтбора = ГруппаОтбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаКорректировок.РасчетПоФормуле");
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеОтбора = ГруппаОтбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаКорректировок.РасчетПоФормуле");
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение =Истина;
	
	ПолеОтбора = ГруппаОтбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаКорректировок.ЧислоАналитикГруппыРаскрытия");
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ПолеОтбора.ПравоеЗначение =0;
	
	
	ПолеОтбора = ГруппаОтбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаКорректировок.БезИтога");
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение =Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ИзмененноеЗначениеРеквизитаФон);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКорректировокКорректировка");
	ОформляемоеПоле.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКорректировокНовоеЗначение");
	ОформляемоеПоле.Использование = Истина;
		
КонецПроцедуры // УстановитьУсловноеОформление() 

&НаСервере
Процедура ОпределитьПараметрыОтображенияКолонок(ПоШаблонуКорректировки=Ложь)
	
	Запрос=Новый Запрос;
	
	Если ПоШаблонуКорректировки Тогда
		
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки.Показатель.Владелец КАК ВидОтчета
		|ПОМЕСТИТЬ ВидыОтчетовКорректировки
		|ИЗ
		|	Справочник.ШаблоныКорректировокЗначенийПоказателей.ШаблонКорректировки КАК ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки
		|ГДЕ
		|	ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки.Ссылка = &ШаблонКорректировки
		|;";
		
		Запрос.УстановитьПараметр("ШаблонКорректировки",Объект.ШаблонКорректировки);
		
	Иначе
		
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКорректировок.ВидОтчета КАК ВидОтчета
		|ПОМЕСТИТЬ ВидыОтчетовКорректировки
		|ИЗ
		|	&ТаблицаКорректировок КАК ТаблицаКорректировок
		|;";
		
		Запрос.УстановитьПараметр("ТаблицаКорректировок",РеквизитФормыВЗначение("ТаблицаКорректировок"));
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтчетовКорректировки.ВидОтчета КАК ВидОтчета,
	|	ВидыОтчетов.ВидАналитики1 КАК ВидАналитики1,
	|	ВидыОтчетов.ВидАналитики2 КАК ВидАналитики2,
	|	ВидыОтчетов.ВидАналитики3 КАК ВидАналитики3,
	|	ВидыОтчетов.ВидАналитики4 КАК ВидАналитики4,
	|	ВидыОтчетов.ВидАналитики5 КАК ВидАналитики5,
	|	ВидыОтчетов.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам
	|ИЗ
	|	ВидыОтчетовКорректировки КАК ВидыОтчетовКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
	|		ПО ВидыОтчетовКорректировки.ВидОтчета = ВидыОтчетов.Ссылка";
	
	ЕстьРазделениеПоПроектам=Ложь;
	МаксАналитикВидаОтчета=0;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПроверитьПараметрыОтображенияКолонок(Результат);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьКолонокПоШаблону()

&НаСервере
Процедура ПроверитьПараметрыОтображенияКолонок(Результат)
	
	Если Результат.РазделениеПоПроектам Тогда
		
		ЕстьРазделениеПоПроектам=Истина;
		
	КонецЕсли;
	
	ТекАналитикВидаОтчета=0;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если НЕ ЗначениеЗаполнено(Результат["ВидАналитики"+Индекс]) Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ТекАналитикВидаОтчета=ТекАналитикВидаОтчета+1;
		
	КонецЦикла;
	
	Если ТекАналитикВидаОтчета>МаксАналитикВидаОтчета Тогда
		
		МаксАналитикВидаОтчета=ТекАналитикВидаОтчета;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПараметрыОтображенияКолонок(Результат)

&НаСервере
Процедура УстановитьВидимостьКолонок()
			
	Элементы.КлючевыеРеквизитыПроект.Видимость		= ЕстьРазделениеПоПроектам;
	Элементы.ТаблицаКорректировокПроект.Видимость	= ЕстьРазделениеПоПроектам;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Элементы["КлючевыеРеквизитыАналитика"+Индекс].Видимость		=(Индекс<=МаксАналитикВидаОтчета);
		Элементы["ТаблицаКорректировокАналитика"+Индекс].Видимость	=(Индекс<=МаксАналитикВидаОтчета);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьКолонок()

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов Тогда
		
		Элементы.ГруппаАктуализация.Видимость=Истина;
		Элементы.ГруппаСтандартныеКорректировки.Видимость=Ложь;
		Элементы.СпособВводаКорректировки.ТолькоПросмотр=Истина;
		Возврат;
		
	ИначеЕсли Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение Тогда
		
		Элементы.ГруппаАктуализация.Видимость=Ложь;
		Элементы.ГруппаСтандартныеКорректировки.Видимость=Ложь;
		Элементы.СпособВводаКорректировки.ТолькоПросмотр=Истина;
		Возврат;
		
	Иначе
		
		Элементы.ГруппаАктуализация.Видимость=Ложь;
		Элементы.ГруппаСтандартныеКорректировки.Видимость=Истина;
		Элементы.СпособВводаКорректировки.ТолькоПросмотр=Ложь;
	
	КонецЕсли;
	
	
	Элементы.ТаблицаКорректировок.ИзменятьСоставСтрок=Истина;
	
	Элементы.ГруппаПравило.Видимость			= Ложь;
	Элементы.ЗаполнитьПоШаблону.Видимость		= Ложь;
	Элементы.Расшифровать.Видимость				= Ложь;
	Элементы.ГруппаШапка.Видимость				= Ложь;
	Элементы.СценарийДляАктуализации.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ШаблонКорректировки) ИЛИ Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение Тогда
						
		Элементы.ГруппаШапка.Видимость=Истина;
		Элементы.ТаблицаКорректировок.ИзменятьСоставСтрок=Ложь;
		Элементы.ТаблицаКорректировок.ТолькоПросмотр=НЕ Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод;
		
		Если ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
			
			Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение Тогда
				
				Элементы.ГруппаПравило.Видимость=Истина;
				Элементы.ИспользуемаяИБ.Видимость=(ЗначениеЗаполнено(ТипБД) И (НЕ ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ));
								
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод Тогда
			
			Элементы.РеквизитыКорректировки.Видимость=Ложь;
			
		Иначе
			
			Элементы.РеквизитыКорректировки.Видимость=Истина;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ТаблицаКорректировок.ТолькоПросмотр=Ложь;
		
	КонецЕсли;
	
	Если ТаблицаКорректировок.Количество()>0 Тогда
		
		ОпределитьПараметрыОтображенияКолонок();
		
	Иначе
		
		ЕстьРазделениеПоПроектам=Ложь;
		МаксАналитикВидаОтчета=0;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
		
		Элементы.СпособВводаКорректировки.ТолькоПросмотр=Истина;
		
		Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение
			ИЛИ Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод Тогда 
			
			Элементы.ЗаполнитьПоШаблону.Видимость=Истина;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СпособВводаКорректировки.ТолькоПросмотр=Ложь;
		
	КонецЕсли;
				
	УстановитьВидимостьКолонок();

КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ОпределитьПравилоОбработки()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаОбработки.Ссылка КАК Ссылка,
	|	ПравилаОбработки.ТипБД КАК ТипБД,
	|	ПравилаОбработки.ТипБД.ВИБПоУмолчанию КАК ВИБПоУмолчанию
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &ШаблонКорректировки";
	
	Запрос.УстановитьПараметр("ШаблонКорректировки",Объект.ШаблонКорректировки);
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	Объект.ПравилоОбработки	= Результат.Ссылка;
	Объект.ИспользуемаяИБ	= Результат.ВИБПоУмолчанию;
	
	ТипБД=Результат.ТипБД;
	
КонецПроцедуры // ОпределитьПравилоОбработки()

&НаСервере
Процедура ШаблонКорректировкиПриИзмененииНаСервере()
	
	ТаблицаКорректировок.Очистить();
	ЗаполнитьСписокСпособовВвода();
	Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод;
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
		
		Объект.ПравилоОбработки="";
		
	Иначе
		
		ЗаполнитьРеквизитыОбъектаПоШаблону();
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъектаПоШаблону()
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьРеквизитыПоШаблону();
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение Тогда
		
		ОпределитьПравилоОбработки();
				
	ИначеЕсли Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов Тогда
		
		Объект.СценарийДляАктуализации=Объект.Сценарий.СценарийДляАктуализации;

	КонецЕсли;	
			
КонецПроцедуры // ЗаполнитьРеквизитыОбъектаПоШаблону() 

&НаКлиенте
Процедура ШаблонКорректировкиПриИзменении(Элемент)
	
	ШаблонКорректировкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаКорректировокВидОтчетаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	ВидОтчета=ТекущиеДанные.ВидОтчета;
	ТекущиеДанные.СписокВерсий.Очистить();
	
	МассивСтрок=ТаблицаКорректировок.НайтиСтроки(Новый Структура("ВидОтчета",ВидОтчета));
		
	Для Каждого Строка ИЗ МассивСтрок Цикл
		
		Если Не Строка.ПолучитьИдентификатор()= ИдентификаторСтроки Тогда
			
			ЗаполнитьДанныеСтрокиКорректировки(ТекущиеДанные,Строка);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыОтчетов.ВидАналитики1 КАК ВидАналитики1,
	|	ВидыОтчетов.ВидАналитики2 КАК ВидАналитики2,
	|	ВидыОтчетов.ВидАналитики3 КАК ВидАналитики3,
	|	ВидыОтчетов.ВидАналитики4 КАК ВидАналитики4,
	|	ВидыОтчетов.ВидАналитики5 КАК ВидАналитики5,
	|	ВидыОтчетов.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Ссылка = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ТекРазделениеПоПроектам=ЕстьРазделениеПоПроектам;
	ТекМаксАналитик=МаксАналитикВидаОтчета;
	
	ПроверитьПараметрыОтображенияКолонок(Результат);
	
	Если НЕ (ТекРазделениеПоПроектам=ЕстьРазделениеПоПроектам И ТекМаксАналитик=МаксАналитикВидаОтчета) Тогда
		
		УстановитьВидимостьКолонок();
		
	КонецЕсли;
	
	ЗаполнитьДанныеСтрокиКорректировки(ТекущиеДанные,Результат);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиКорректировки(ТекущиеДанные,ДанныеЗаполнения)
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТекущиеДанные["ВидАналитики"+Индекс]=ДанныеЗаполнения["ВидАналитики"+Индекс];
		
	КонецЦикла;
	
	ТекущиеДанные.РазделениеПоПроектам=ДанныеЗаполнения.РазделениеПоПроектам;
	
	Если НЕ ТекущиеДанные.РазделениеПоПроектам Тогда
		
		ТекущиеДанные.Проект="";
		
	КонецЕсли;	
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиКорректировки()

&НаСервере
Процедура ПолучитьСписокВерсий(ДанныеСтроки)
	
	Если ДанныеСтроки.СписокВерсий.Количество()>0 Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("ВидОтчета",ДанныеСтроки.ВидОтчета);
	СтруктураПоиска.Вставить("Организация",ДанныеСтроки.Организация);
	СтруктураПоиска.Вставить("ПериодОтчета",ДанныеСтроки.ПериодОтчета);
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураПоиска.Вставить("Аналитика"+Индекс,ДанныеСтроки["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	МассивСтрок=ТаблицаКорректировок.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество()>0 И МассивСтрок[0].СписокВерсий.Количество()>0 Тогда
		
		ДанныеСтроки.СписокВерсий= МассивСтрок[0].СписокВерсий;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И ВерсииЗначенийПоказателей.Организация = &Организация
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Проект = &Проект";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;	
		Запрос.УстановитьПараметр("Аналитика"+Индекс,ДанныеСтроки["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|	И НЕ(ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте
	|				ИЛИ ВерсииЗначенийПоказателей.ЧерноваяВерсия
	|				ИЛИ ВерсииЗначенийПоказателей.ПометкаУдаления
	|				ИЛИ ВерсииЗначенийПоказателей.Регистратор = &Регистратор)";
	
	Запрос.УстановитьПараметр("ВидОтчета",		ДанныеСтроки.ВидОтчета);
	Запрос.УстановитьПараметр("Организация",	ДанныеСтроки.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	ДанныеСтроки.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",		Объект.Сценарий);
	Запрос.УстановитьПараметр("Проект",			ДанныеСтроки.Проект);
	Запрос.УстановитьПараметр("Регистратор",	Объект.Ссылка);
	
	ДанныеСтроки.СписокВерсий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры // ПолучитьСписокВерсийТаблица()

&НаСервере
Процедура ПолучитьИсходныеЗначенияТаблица(ТабКорректировкиРаскрытия=Неопределено)
	
	Если ТаблицаКорректировок.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстСинтетики="";
	ТекстАналитики="";
		
	Запрос=Новый Запрос;
	
	Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
				
		ТекстСинтетики=ТекстСинтетики+"
		|ОБЪЕДИНИТЬ ВСЕ
		|"+ПолучитьТекстДляВыборкиСинтетика(Строка.АналитикВидаОтчета,Строка.ИдентификаторСинтетика);
		
		ПолучитьСписокВерсий(Строка);
		
		Запрос.УстановитьПараметр("СписокВерсий"+ Строка.ИдентификаторСинтетика,Строка.СписокВерсий);
		Запрос.УстановитьПараметр("Показатель"	+ Строка.ИдентификаторСинтетика,Строка.Показатель);
		
		Если НЕ Строка.ЧислоАналитикГруппыРаскрытия=0 Тогда
			
			ТекстАналитики=ТекстАналитики+"
			|ОБЪЕДИНИТЬ ВСЕ
			|"+ПолучитьТекстДляВыборкиАналитика(Строка.ЧислоАналитикГруппыРаскрытия,Строка.ИдентификаторСинтетика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Сред(ТекстСинтетики,16);
	
	Если Не ПустаяСтрока(ТекстАналитики) Тогда
		
		Если НЕ ТабКорректировкиРаскрытия=Неопределено Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|;
			|ВЫБРАТЬ *
			|ПОМЕСТИТЬ КорректировкаАналитика
			|ИЗ &ТабКорректировкиРаскрытия КАК ТабКорректировкиРаскрытия";
						
			НомерЗапросАналитика=2
			
		Иначе
			
			НомерЗапросАналитика=1;
			
		КонецЕсли;
			
		ДополнитьДаннымиКорректировки(Запрос,Сред(ТекстАналитики,16),ТабКорректировкиРаскрытия);
						
		РезультатЗапроса=Запрос.ВыполнитьПакет();
		
		ТаблицаСинтетики=РезультатЗапроса[0].Выгрузить();
		ТаблицаСинтетики.Индексы.Добавить("ИдентификаторСинтетика");
		
		ТаблицаАналитики=РезультатЗапроса[НомерЗапросАналитика].Выгрузить();
		ДополнитьТаблицуРасчетнымиЗначениями(ТаблицаАналитики);
			
		ТаблицаАналитики.Индексы.Добавить("ИдентификаторСинтетика");
		
		ЗаполнитьИсходныеДанные(ТаблицаСинтетики,ТаблицаАналитики);
				
	Иначе
		
		ТаблицаСинтетики=Запрос.Выполнить().Выгрузить();
		ТаблицаСинтетики.Индексы.Добавить("ИдентификаторСинтетика");
		
		ЗаполнитьИсходныеДанные(ТаблицаСинтетики);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИсходныеЗначенияТаблица()

Процедура ДополнитьТаблицуРасчетнымиЗначениями(ТаблицаАналитики)
	
	ТаблицаАналитики.Колонки.Добавить("НовоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаАналитики.Колонки.Добавить("НовоеЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого Строка ИЗ ТаблицаАналитики Цикл
				
		Строка.НовоеЗначение		= Строка.ИсходноеЗначение+Строка.Значение;
		Строка.НовоеЗначениеВалюта	= Строка.ИсходноеЗначениеВалюта+Строка.ЗначениеВалюта;
		
	КонецЦикла;
		
КонецПроцедуры // ДополнитьТаблицуРасчетнымиЗначениями()

&НаСервере
Процедура ДополнитьДаннымиКорректировки(Запрос,ТекстАналитики,ТабКорректировкиРаскрытия)
	
	Запрос.Текст=Запрос.Текст+"
	|;
	|ВЫБРАТЬ
	|ДанныеАналитики.ИдентификаторСинтетика,
	|ДанныеАналитики.АналитикаВалюта,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|ДанныеАналитики.Аналитика"+Индекс+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|СУММА(ДанныеАналитики.ИсходноеЗначение) КАК ИсходноеЗначение,
	|СУММА(ДанныеАналитики.ИсходноеЗначениеВалюта) КАК ИсходноеЗначениеВалюта,
	|СУММА(ДанныеАналитики.Значение) КАК Значение,
	|СУММА(ДанныеАналитики.ЗначениеВалюта) КАК ЗначениеВалюта
	|ИЗ (
	|"+ТекстАналитики+"	
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|ИдентификаторСинтетика,
	|АналитикаВалюта,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|Аналитика"+Индекс+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|0 КАК ИсходноеЗначение,
	|0 КАК ИсходноеЗначениеВалюта,
	|Значение КАК Значение,
	|ЗначениеВалюта КАК ЗначениеВалюта
	|ИЗ";
	
	Если ТабКорректировкиРаскрытия=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	Документ.КорректировкаЗначенийПоказателей.КорректировкаАналитика КАК КорректировкаАналитика
		|ГДЕ
		|	КорректировкаАналитика.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|	КорректировкаАналитика КАК КорректировкаАналитика";
		Запрос.УстановитьПараметр("ТабКорректировкиРаскрытия",ТабКорректировкиРаскрытия);
		
	КонецЕсли;	
		
	Запрос.Текст=Запрос.Текст+"	
	|) КАК ДанныеАналитики
	|СГРУППИРОВАТЬ ПО
	|ДанныеАналитики.ИдентификаторСинтетика,
	|ДанныеАналитики.АналитикаВалюта";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+",
		|ДанныеАналитики.Аналитика"+Индекс;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);

КонецПроцедуры // ДополнитьДаннымиКорректировки()
	
&НаСервере
Процедура ЗаполнитьИсходныеДанные(ТаблицаСинтетики,ТаблицаАналитики=Неопределено)
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	ДанныеОбъекта.ТаблицыРаскрытия=Новый Соответствие;
	
	Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
		
		Если НЕ Строка.БезИтога Тогда
			
			МассивСинтетика=ТаблицаСинтетики.НайтиСтроки(Новый Структура("ИдентификаторСинтетика",Строка.ИдентификаторСинтетика));
			
			Если МассивСинтетика.Количество()>0 Тогда
				
				Строка.ИсходноеЗначение=МассивСинтетика[0].Значение;
				
			КонецЕсли;
			
			Строка.НовоеЗначение=Строка.ИсходноеЗначение+Строка.Значение;
			
		КонецЕсли;
		
		Если Не ТаблицаАналитики=Неопределено Тогда
			
			ДанныеОбъекта.ТаблицыРаскрытия.Вставить(Строка.ИдентификаторСинтетика,ТаблицаАналитики.Скопировать(Новый Структура("ИдентификаторСинтетика",Строка.ИдентификаторСинтетика)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
			
КонецПроцедуры // ЗаполнитьИсходныеДанные()
 

&НаКлиенте
Процедура ТаблицаКорректировокВидОтчетаПриИзменении(Элемент)
	
	ТаблицаКорректировокВидОтчетаПриИзмененииНаСервере(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере()
	
	ТаблицаКорректировок.Очистить();
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПолучитьТаблицуКорректировокПоШаблону();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ * Поместить ТаблицаКорректировок 
	|ИЗ &ТаблицаКорректировок КАК ТаблицаКорректировок
	|;
	|ВЫБРАТЬ
	|	ТаблицаКорректировок.Организация КАК Организация,
	|	ТаблицаКорректировок.ПериодОтчета КАК ПериодОтчета,
	|	ТаблицаКорректировок.Аналитика1 КАК Аналитика1,
	|	ТаблицаКорректировок.Аналитика2 КАК Аналитика2,
	|	ТаблицаКорректировок.Аналитика3 КАК Аналитика3,
	|	ТаблицаКорректировок.Аналитика4 КАК Аналитика4,
	|	ТаблицаКорректировок.Аналитика5 КАК Аналитика5,
	|	ТаблицаКорректировок.Аналитика6 КАК Аналитика6,
	|	ТаблицаКорректировок.Проект КАК Проект,
	|	ТаблицаКорректировок.Показатель КАК Показатель,
	|	ТаблицаКорректировок.ВидОтчета КАК ВидОтчета,
	|	ТаблицаКорректировок.РасчетПоФормуле КАК РасчетПоФормуле,
	|   ТаблицаКорректировок.ИдентификаторСинтетика,
	|   ТаблицаКорректировок.Значение КАК Значение,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ВЫБОР Когда ПоказателиОтчетов.ВидИтога=ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.НеРассчитывается) Тогда Истина Иначе ЛОжь Конец КАК БезИтога,
	|	ВидыОтчетов.ВидАналитики1 КАК ВидАналитики1,
	|	ВидыОтчетов.ВидАналитики2 КАК ВидАналитики2,
	|	ВидыОтчетов.ВидАналитики3 КАК ВидАналитики3,
	|	ВидыОтчетов.ВидАналитики4 КАК ВидАналитики4,
	|	ВидыОтчетов.ВидАналитики5 КАК ВидАналитики5,
	|	ВидыОтчетов.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия
	|ИЗ
	|	ТаблицаКорректировок КАК ТаблицаКорректировок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
	|		ПО ТаблицаКорректировок.ВидОтчета = ВидыОтчетов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ТаблицаКорректировок.Показатель = ПоказателиОтчетов.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаКорректировок",	ДокументОбъект.ТаблицаКорректировок);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаКорректировок.Добавить();
		
		НоваяСтрока.Организация				= Результат.Организация;
		НоваяСтрока.ПериодОтчета			= Результат.ПериодОтчета;
		НоваяСтрока.ВидОтчета				= Результат.ВидОтчета;
		НоваяСтрока.Показатель				= Результат.Показатель;
		НоваяСтрока.РасчетПоФормуле			= Результат.РасчетПоФормуле;
		НоваяСтрока.РазделениеПоПроектам	= Результат.РазделениеПоПроектам;
		НоваяСтрока.ГруппаРаскрытия			= Результат.ГруппаРаскрытия;
		НоваяСтрока.ИдентификаторСинтетика	= Результат.ИдентификаторСинтетика;
		НоваяСтрока.Значение				= Результат.Значение;
		
		ОпредлитьЧислоАналитикПоказателя(НоваяСтрока,Результат);
				
		Если Результат.РазделениеПоПроектам Тогда
			
			НоваяСтрока.Проект	= Результат.Проект;
			
		КонецЕсли;
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			НоваяСтрока["ВидАналитики"+Индекс]=Результат["ВидАналитики"+Индекс];
			
			Если ЗначениеЗаполнено(Результат["ВидАналитики"+Индекс]) Тогда
				
				НоваяСтрока["Аналитика"+Индекс]=Результат["Аналитика"+Индекс];	
				НоваяСтрока.АналитикВидаОтчета=Индекс;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяСтрока.АналитикВидаОтчета>МаксАналитикВидаОтчета Тогда
			
			МаксАналитикВидаОтчета=НоваяСтрока.АналитикВидаОтчета;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ПолучитьИсходныеЗначенияТаблица(ДокументОбъект.КорректировкаАналитика.Выгрузить());
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ДокументОбъект.ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
	ДокументОбъект=Неопределено;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Если Объект.КлючевыеРеквизиты.Количество()=0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо указать хотя бы одну строку ключевых реквизитов.'"));
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоШаблонуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаКорректировокПоказательПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.НеРассчитывается)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БезИтога,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТекущиеДанные.Показатель);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ТекущиеДанные.ГруппаРаскрытия=Результат.ГруппаРаскрытия;
	ТекущиеДанные.БезИтога=Результат.БезИтога;
	
	Если Результат.ЧислоАналитикГруппыРаскрытия>0 Тогда
		
		ТекущиеДанные.ЧислоАналитикГруппыРаскрытия=Результат.ЧислоАналитикГруппыРаскрытия;
		
	ИначеЕсли Результат.Валютный Тогда
		
		ТекущиеДанные.ЧислоАналитикГруппыРаскрытия=-1;
		
	Иначе
		
		ТекущиеДанные.ЧислоАналитикГруппыРаскрытия=0;
		
	КонецЕсли;
	
	ПриИзмененииКлючевогоРеквизита(ИдентификаторСтроки);
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстДляВыборкиАналитика(ЧислоАналитик,ИдентификаторСинтетика)
	
	Если ЧислоАналитик=0 Тогда
		
		ТекстЗапроса= "";
		
	ИначеЕсли ЧислоАналитик=-1 Тогда
		
		ТекстЗапроса="ВЫБРАТЬ
		|	"""+ИдентификаторСинтетика+""" КАК ИдентификаторСинтетика,
		|	ТаблицаАналитики.АналитикаВалюта КАК АналитикаВалюта,";
		
		Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ТекстЗапроса=ТекстЗапроса+"
			|Неопределено КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"
		|	СУММА(ТаблицаАналитики.Значение) КАК ИсходноеЗначение,
		|	СУММА(ТаблицаАналитики.ЗначениеВалюта) КАК ИсходноеЗначениеВалюта,
		|	0 КАК Значение,
		|	0 КАК ЗначениеВалюта
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК ТаблицаАналитики
		|ГДЕ
		|	ТаблицаАналитики.Показатель=&Показатель"+ИдентификаторСинтетика+" И ТаблицаАналитики.Версия В(&СписокВерсий"+ИдентификаторСинтетика+")
		|СГРУППИРОВАТЬ ПО
		|ТаблицаАналитики.АналитикаВалюта";
		
	Иначе
		
		ТекстГруппировкиАналитика="";
		
		ТекстЗапроса="ВЫБРАТЬ
		|	"""+ИдентификаторСинтетика+""" КАК ИдентификаторСинтетика,
		|	ТаблицаАналитики.АналитикаВалюта КАК АналитикаВалюта,";
		
		Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если Индекс<=ЧислоАналитик Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|ТаблицаАналитики.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
				
				ТекстГруппировкиАналитика=ТекстГруппировкиАналитика+",
				|ТаблицаАналитики.Аналитика"+Индекс;
				
			Иначе	
				
				ТекстЗапроса=ТекстЗапроса+"
				|Неопределено КАК Аналитика"+Индекс+",";
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"
		|	СУММА(ТаблицаАналитики.Значение) КАК ИсходноеЗначение,
		|	СУММА(ТаблицаАналитики.ЗначениеВалюта) КАК ИсходноеЗначениеВалюта,
		|	0 КАК Значение,
		|	0 КАК ЗначениеВалюта
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитик+" КАК ТаблицаАналитики
		|ГДЕ
		|	ТаблицаАналитики.Показатель=&Показатель"+ИдентификаторСинтетика+" И ТаблицаАналитики.Версия В(&СписокВерсий"+ИдентификаторСинтетика+")
		|СГРУППИРОВАТЬ ПО
		|ТаблицаАналитики.АналитикаВалюта"+ТекстГруппировкиАналитика;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстДляВыборкиАналитика()

&НаСервере
Функция ПолучитьТекстДляВыборкиСинтетика(АналитикВидаОтчета,ИдентификаторСинтетика)
	
	ТекстЗапроса="ВЫБРАТЬ
	|	"""+ИдентификаторСинтетика+""" КАК ИдентификаторСинтетика,
	|	СУММА(ТаблицаСинтетики.Значение) КАК Значение
	|	ИЗ РегистрСведений."+?(АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+АналитикВидаОтчета)+" КАК ТаблицаСинтетики
	|	ГДЕ ТаблицаСинтетики.Показатель=&Показатель"+ИдентификаторСинтетика+" И ТаблицаСинтетики.Версия В(&СписокВерсий"+ИдентификаторСинтетика+")"; 
	
	Возврат ТекстЗапроса; 
	
КонецФункции // ПолучитьТекстВыборкиСинтетика() 

&НаСервере
Процедура ПолучитьТекущееЗначениеПоказателя(ТекущиеДанные)
			
	Если НЕ (ЗначениеЗаполнено(ТекущиеДанные.ВидОтчета)
		И  ЗначениеЗаполнено(ТекущиеДанные.Организация)
		И  ЗначениеЗаполнено(ТекущиеДанные.ПериодОтчета)
		И  ЗначениеЗаполнено(ТекущиеДанные.Показатель)) Тогда
		
		ТекущиеДанные.ИсходноеЗначение=0;
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.БезИтога Тогда
		
		ТекущиеДанные.ИсходноеЗначение=0;
		Возврат;
		
	КонецЕсли;
	
	ТекстСинтетика=ПолучитьТекстДляВыборкиСинтетика(ТекущиеДанные.АналитикВидаОтчета,			ТекущиеДанные.ИдентификаторСинтетика);
	ТекстАналитика=ПолучитьТекстДляВыборкиАналитика(ТекущиеДанные.ЧислоАналитикГруппыРаскрытия,	ТекущиеДанные.ИдентификаторСинтетика);
			
	ПолучитьСписокВерсий(ТекущиеДанные);
			
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СписокВерсий"+ ТекущиеДанные.ИдентификаторСинтетика,ТекущиеДанные.СписокВерсий);
	Запрос.УстановитьПараметр("Показатель"	+ ТекущиеДанные.ИдентификаторСинтетика,ТекущиеДанные.Показатель);
	
	Запрос.Текст=ТекстСинтетика;
	
	Если Не ПустаяСтрока(ТекстАналитика) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|;
		|"+ТекстАналитика;
		
		РезультатЗапроса=Запрос.ВыполнитьПакет();
		
		ОбработатьДанныеСинтетика(РезультатЗапроса[0].Выгрузить(),ТекущиеДанные.ИдентификаторСинтетика);
		ОбработатьДанныеАналитика(РезультатЗапроса[1].Выгрузить(),ТекущиеДанные.ИдентификаторСинтетика);
		
	Иначе
		
		ОбработатьДанныеСинтетика(Запрос.Выполнить().Выгрузить(),ТекущиеДанные.ИдентификаторСинтетика);
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьТекущееЗнаечниеПоказателя()

&НаСервере
Процедура ОчиститьДанныеПоАналитике(ИдентификаторСинтетика)
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	
	Если НЕ ДанныеОбъекта.ТаблицыРаскрытия.Получить(ИдентификаторСинтетика)=Неопределено Тогда
		
		 ДанныеОбъекта.ТаблицыРаскрытия.Удалить(ИдентификаторСинтетика);
		 РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
		 
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДанныеПоАналитике(ИдентификаторСинтетика)

&НаСервере
Процедура ОбработатьДанныеАналитика(ТаблицаДанных,ИдентификаторСинтетика)
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	
	ДополнитьТаблицуРасчетнымиЗначениями(ТаблицаДанных);
	
	ДанныеОбъекта.ТаблицыРаскрытия.Вставить(ИдентификаторСинтетика,ТаблицаДанных);
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
			
КонецПроцедуры // ОчиститьДанныеПоАналитике(ИдентификаторСинтетика)

&НаСервере
Процедура ОбработатьДанныеСинтетика(ТаблицаДанных,ИдентификаторСинтетика)
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиСтроки(Новый Структура("ИдентификаторСинтетика",ИдентификаторСинтетика))[0];
	
	Если ТекущиеДанные.БезИтога Тогда
		
		ТекущиеДанные.ИсходноеЗначение=0;
		ТекущиеДанные.НовоеЗначение=0;
	
	ИначеЕсли ТаблицаДанных.Количество()>0 Тогда
		
		ТекущиеДанные.ИсходноеЗначение=ТаблицаДанных[0].Значение;
		ТекущиеДанные.НовоеЗначение=ТекущиеДанные.ИсходноеЗначение+ТекущиеДанные.Значение;
		
	Иначе
		
		ТекущиеДанные.ИсходноеЗначение=0;
		ТекущиеДанные.НовоеЗначение=ТекущиеДанные.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанныеСинтетика() 

&НаСервере
Процедура ПриИзмененииКлючевогоРеквизита(ИдентификаторСтроки)
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущиеДанные.СписокВерсий.Очистить();
	
	Если НЕ (ТекущиеДанные.ЧислоАналитикГруппыРаскрытия=0 ИЛИ ПустаяСтрока(ТекущиеДанные.ИдентификаторСинтетика)) Тогда
		
		ОчиститьДанныеПоАналитике(ТекущиеДанные.ИдентификаторСинтетика);
		
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторСинтетика=СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
	ПолучитьТекущееЗначениеПоказателя(ТекущиеДанные);

КонецПроцедуры // ПриИзмененииКлючевогоРеквизита() 

&НаКлиенте
Процедура ТаблицаКорректировокПоказательПриИзменении(Элемент)
	
	ТаблицаКорректировокПоказательПриИзмененииНаСервере(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
	Если НЕ Элементы.ТаблицаКорректировок.ТекущиеДанные.ЧислоАналитикГруппыРаскрытия =0 Тогда
		
		Элементы.ТаблицаКорректировок.ЗакончитьРедактированиеСтроки(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Объект.УправлениеПериодом) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан документ управления периодом.'"));
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокПериодОтчетаПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокАналитика1ПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокАналитика2ПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокАналитика3ПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокАналитика4ПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокАналитика5ПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокАналитика6ПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокПроектПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ПодготовитьДанныеДляЗаписиОбъекта(ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляЗаписиОбъекта(ТекущийОбъект)
	
	ТекущийОбъект.КорректировкаСинтетика.Очистить();
	ТекущийОбъект.КорректировкаАналитика.Очистить();
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	
	Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
		
		НоваяСтрока=ТекущийОбъект.КорректировкаСинтетика.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		Если НЕ Строка.ЧислоАналитикГруппыРаскрытия=0 Тогда
			
			ТаблицаРаскрытия=ДанныеОбъекта.ТаблицыРаскрытия.Получить(Строка.ИдентификаторСинтетика);
			
			Если НЕ ТаблицаРаскрытия=Неопределено Тогда
				
				Для Каждого СтрокаРаскрытия ИЗ ТаблицаРаскрытия Цикл
					
					Если СтрокаРаскрытия.Значение=0 И СтрокаРаскрытия.ЗначениеВалюта=0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					НоваяСтрокаРаскрытия=ТекущийОбъект.КорректировкаАналитика.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаскрытия,СтрокаРаскрытия);
					НоваяСтрокаРаскрытия.ИдентификаторСинтетика=Строка.ИдентификаторСинтетика;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ПодготовитьДанныеДляЗаписиОбъекта() 

&НаСервере
Функция ПолучитьАдресДанныхКорректировки(ИдентификаторСтроки)
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДанныеКорректировки=Новый Структура;
	ДанныеКорректировки.Вставить("Организация",		ТекущиеДанные.Организация);
	ДанныеКорректировки.Вставить("Показатель",		ТекущиеДанные.Показатель);
	ДанныеКорректировки.Вставить("Проект",			ТекущиеДанные.Проект);
	ДанныеКорректировки.Вставить("ПериодОтчета",	ТекущиеДанные.ПериодОтчета);
	ДанныеКорректировки.Вставить("Сценарий",		Объект.Сценарий);
	ДанныеКорректировки.Вставить("ВидОтчета",		ТекущиеДанные.ВидОтчета);
	ДанныеКорректировки.Вставить("РасчетПоФормуле",	ТекущиеДанные.РасчетПоФормуле);
	
	МассивВалюта=КэшВалютыОтчетности.НайтиСтроки(Новый Структура("Организация",ТекущиеДанные.Организация));
	
	ДанныеКорректировки.Вставить("ОсновнаяВалюта",?(МассивВалюта.Количество()>0,МассивВалюта[0].ОсновнаяВалюта,Справочники.Валюты.ПустаяСсылка()));
		
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	ТаблицаРаскрытия=ДанныеОбъекта.ТаблицыРаскрытия.Получить(ТекущиеДанные.ИдентификаторСинтетика);
	
	Если НЕ ТаблицаРаскрытия=Неопределено Тогда
		
		ДанныеКорректировки.Вставить("ТаблицаРаскрытия",ТаблицаРаскрытия);
		
	Иначе
		
		ТаблицаРаскрытия=Новый ТаблицаЗначений;
		ТаблицаРаскрытия.Колонки.Добавить("АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
			ТаблицаРаскрытия.Колонки.Добавить("Аналитика"+Индекс,Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
			
		КонецЦикла;
		
		ТаблицаРаскрытия.Колонки.Добавить("ИсходноеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ТаблицаРаскрытия.Колонки.Добавить("ИсходноеЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		ТаблицаРаскрытия.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ТаблицаРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		ТаблицаРаскрытия.Колонки.Добавить("НовоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ТаблицаРаскрытия.Колонки.Добавить("НовоеЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		ДанныеКорректировки.Вставить("ТаблицаРаскрытия",ТаблицаРаскрытия);
		ДанныеОбъекта.ТаблицыРаскрытия.Вставить(ТекущиеДанные.ИдентификаторСинтетика,ТаблицаРаскрытия);
		
		РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеКорректировки,Новый УникальныйИдентификатор);

КонецФункции // ПолучитьДанныеКорректировки() 

&НаКлиенте
Процедура ОтобразитьДанныеПоАналитике(Команда)
	
	Если Элементы.ТаблицаКорректировок.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.ТаблицаКорректировок.ТекущиеДанные.ЧислоАналитикГруппыРаскрытия=0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Выбранный показатель не имеет раскрытия по аналитике.'"));
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуОтображенияАналитики();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтображенияАналитики()
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("АдресДанныхКорректировки",ПолучитьАдресДанныхКорректировки(Элементы.ТаблицаКорректировок.ТекущаяСтрока));
	СтруктураПараметров.Вставить("ИдентификаторСинтетика",Элементы.ТаблицаКорректировок.ТекущиеДанные.ИдентификаторСинтетика);
	
	ОткрытьФорму("Документ.КорректировкаЗначенийПоказателей.Форма.ФормаОтображенияАналитики",СтруктураПараметров);	
	
КонецПроцедуры // ОткрытьФормуОтображенияАналитики()
 

&НаСервере
Процедура ИзменитьКорректировкуРаскрытия(ИдентификаторСтроки,АдресДанныхКорректировки)
	
	ТаблицаРаскрытия=ПолучитьИзВременногоХранилища(АдресДанныхКорректировки);
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТекущиеДанные.Значение		= ТаблицаРаскрытия.Итог("Значение");
	
	ТекущиеДанные.НовоеЗначение	=?(ТекущиеДанные.БезИтога,0, ТаблицаРаскрытия.Итог("НовоеЗначение"));
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	ДанныеОбъекта.ТаблицыРаскрытия.Вставить(ТекущиеДанные.ИдентификаторСинтетика,ТаблицаРаскрытия);
		
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // ИзменитьКорректировкуРаскрытия()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия="ИзмененаКорректировкаРаскрытия" Тогда
		
		МассивДанные=ТаблицаКорректировок.НайтиСтроки(Новый Структура("ИдентификаторСинтетика",Источник));
		
		Если МассивДанные.Количество()=1 Тогда
			
			ИзменитьКорректировкуРаскрытия(МассивДанные[0].ПолучитьИдентификатор(),Параметр);
			
			Если Объект.Сбалансированная Тогда
				
				ОбновитьБалансКорректировки();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если Копирование Тогда
			
			Элементы.ТаблицаКорректировок.ТекущиеДанные.ИдентификаторСинтетика="";
			
		Иначе
			
			Элементы.ТаблицаКорректировок.ТекущиеДанные.Организация=Объект.Организация;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокКорректировкаПриИзменении(Элемент)
	
	Элементы.ТаблицаКорректировок.ТекущиеДанные.НовоеЗначение=Элементы.ТаблицаКорректировок.ТекущиеДанные.ИсходноеЗначение+Элементы.ТаблицаКорректировок.ТекущиеДанные.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокНовоеЗначениеПриИзменении(Элемент)
	
	Элементы.ТаблицаКорректировок.ТекущиеДанные.Значение=Элементы.ТаблицаКорректировок.ТекущиеДанные.НовоеЗначение-Элементы.ТаблицаКорректировок.ТекущиеДанные.ИсходноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура СбалансированнаяПриИзменении(Элемент)
		
	ПроверитьОпределитьВалютуБалансировки();
			
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОпределитьВалютуБалансировки()
	
	Если НЕ Объект.Сбалансированная Тогда
		
		ОбновитьБалансКорректировки();

	КонецЕсли;	
	
	ТекстОшибки="";
	
	Если КэшВалютыОтчетности.Количество()=0 Тогда
				
		ТекстОшибки = Нстр("ru = 'Балансировка невозможна: не удалось определить валюты отчетности для организаций. Проверьте настройки документа управления периодом.'");
		
		Если Не ПустаяСтрока(ТекстОшибки) тогда
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		Объект.Сбалансированная=Ложь;
			
	КонецЕсли;
	
	Если ТаблицаКорректировок.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПерваяОрганизация=ТаблицаКорректировок[0].Организация;
	МассивВалют=КэшВалютыОтчетности.НайтиСтроки(Новый Структура("Организация",ПерваяОрганизация));
	
	Если МассивВалют.Количество()=0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Балансировка невозможна: для организации %1 не указана основная валюта отчетности. Проверьте настройки документа управления периодом.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			ТекстОшибки = СтрШаблон(СтрокаШаблона, ПерваяОрганизация);
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
				
		Объект.Сбалансированная=Ложь;
		Возврат;

	КонецЕсли;
	
	ВалютаБалансировки=МассивВалют[0].ОсновнаяВалюта;
	
	Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
		
		МассивВалют=КэшВалютыОтчетности.НайтиСтроки(Новый Структура("Организация",Строка.Организация));
		
		Если МассивВалют.Количество()=0 Тогда
			
			СтрокаШаблона = Нстр("ru = 'Балансировка невозможна: для организации %1 не указана основная валюта отчетности. Проверьте настройки документа управления периодом.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда			
				ТекстОшибки = СтрШаблон(СтрокаШаблона, Строка.Организация);
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
						
			Объект.Сбалансированная=Ложь;
			ВалютаБалансировки="";
			Возврат;
			
		КонецЕсли;
		
		Если НЕ МассивВалют[0].ОсновнаяВалюта=ВалютаБалансировки Тогда
			
			СтрокаШаблона = Нстр("ru = 'Балансировка невозможна: основная валюта отчетности организации %1: %2;
			|отличается от основной валюты отчетности организации %3: %4'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда			
				ТекстОшибки = СтрШаблон(СтрокаШаблона, Строка.Организация, МассивВалют[0].ОсновнаяВалюта, ПерваяОрганизация, ВалютаБалансировки);
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
			
			Объект.Сбалансированная=Ложь;
			ВалютаБалансировки="";
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьБалансКорректировки();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБалансКорректировки()
	
	БалансКорректировки=0;
	
	Если НЕ Объект.Сбалансированная Тогда
		
		Элементы.ДекорацияБалансКорректировки.Видимость=Ложь;
		Возврат;
		
	Иначе
		
		Элементы.ДекорацияБалансКорректировки.Видимость=Истина;
		
	КонецЕсли;
		
	Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
		
		БалансКорректировки=БалансКорректировки+Строка.Значение;
		
	КонецЦикла;
	
	СтрокаШаблона = Нстр("ru = 'Баланс: %1'");
	
	ТекстЗаголовка = "";
	Если Не ПустаяСтрока(СтрокаШаблона) тогда		
		ТекстЗаголовка = СтрШаблон(СтрокаШаблона, Формат(БалансКорректировки,"ЧЦ=18; ЧДЦ=2"));
	КонецЕсли;
	
	Элементы.ДекорацияБалансКорректировки.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры // ОбновитьБалансКорректировки()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьБалансКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Элементы.ТаблицаКорректировок.ТекущаяСтрока=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыРасшифровки=ПолучитьПараметрыРасшифровки(Элементы.ТаблицаКорректировок.ТекущаяСтрока);
	
	ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма.Форма",ПараметрыРасшифровки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыРасшифровки(ИдентификаторСтроки)
	
	ТекущиеДанные=ТаблицаКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбработкаОбъект=Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	
	ОбработкаОбъект.ВидОтчета		= ТекущиеДанные.ВидОтчета;
	ОбработкаОбъект.ИспользуемаяИБ	= Объект.ИспользуемаяИБ;
	ОбработкаОбъект.ПравилоОбработки=Объект.ПравилоОбработки;
	
	МассивВалюты=КэшВалютыОтчетности.НайтиСтроки(Новый Структура("Организация",ТекущиеДанные.Организация));
	
	Если МассивВалюты.Количество()>0 Тогда
		
		ОбработкаОбъект.ВалютаОтображения=МассивВалюты[0].ОсновнаяВалюта;
		
	КонецЕсли;
	
	НоваяСтрока=ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
	НоваяСтрока.Сценарий=Объект.Сценарий;
	НоваяСтрока.ПоказательОтчета=ТекущиеДанные.Показатель;
	Новаястрока.СинтетическоеЗначение=Истина;
	
	ДанныеРасшифровки=ОбработкаОбъект.ПолучитьСтруктуруПараметровДляРасшифровки();
	ДанныеРасшифровки.ОбъектРасчета.Вставить("ДокументКорректировки",Объект.Ссылка);
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета",ПоместитьВоВременноеХранилище(ДанныеРасшифровки.ОбъектРасчета,Новый УникальныйИдентификатор));
	СтруктураПараметров.Вставить("ПоказательОтчета",ДанныеРасшифровки.ПоказательОтчета);
	СтруктураПараметров.Вставить("мТекущаяВалюта",ДанныеРасшифровки.мТекущаяВалюта);
	СтруктураПараметров.Вставить("ВсегдаПоказыватьБланкРасшифровки",Истина);
	
	Возврат СтруктураПараметров;;
		
КонецФункции // ПолучитьСтруктуруДанныхДляРасшифровки()

&НаСервере
Процедура ПравилоОбработкиПриИзмененииНаСервере()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.ТипБД КАК ТипБД,
	|	ПравилаОбработки.ТипБД.ВИБПоУмолчанию КАК ВИБПоУмолчанию
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Объект.ПравилоОбработки);
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ТипБД=Результат.ТипБД;
	Объект.ИспользуемаяИБ=Результат.ВИБПоУмолчанию;
	
	Элементы.ИспользуемаяИБ.Видимость=(ЗначениеЗаполнено(ТипБД) И (НЕ ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	ПравилоОбработкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.КлючевыеРеквизиты.Количество()=0 Тогда
		
		НоваяСтрока=Объект.КлючевыеРеквизиты.Добавить();
		НоваяСтрока.Организация=Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные=Элементы.ТаблицаКорректировок.ТекущиеДанные;
	
	Если ТекущиеДанные.ЧислоАналитикГруппыРаскрытия=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (Поле.Имя="ИсходноеЗначение" 
		ИЛИ Поле.Имя="Корректировка"
		ИЛИ Поле.Имя="НовоеЗначение") Тогда
		
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуОтображенияАналитики();
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СпособВводаКорректировкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектРасчета(ПериодОтчета)
	
	ОбъектРасчета=Новый Структура;
	ОбъектРасчета.Вставить("ПериодОтчета",ПериодОтчета);
	ОбъектРасчета.Вставить("ПериодОкончания",ПериодОтчета);
	ОбъектРасчета.Вставить("Организация",Объект.Организация);
	ОбъектРасчета.Вставить("Сценарий",Объект.Сценарий);
	ОбъектРасчета.Вставить("ВидОтчета",ВидОтчетаРаспределение);
	ОбъектРасчета.Вставить("Проект",Справочники.Проекты.ПустаяСсылка());
	ОбъектРасчета.Вставить("МаксАналитикОтчета",МаксАналитикВидаОтчета);
	ОбъектРасчета.Вставить("глОсновнойЯзык",0);
	ОбъектРасчета.Вставить("ЧислоДопАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ОбъектРасчета.Вставить("АнализЧувствительности",Ложь);
		
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ОбъектРасчета.Вставить("Аналитика"+Индекс,Неопределено);
		
	КонецЦикла;
	
	МассивВалюта=КэшВалютыОтчетности.НайтиСтроки(Новый Структура("Организация",Объект.Организация));
	ОбъектРасчета.Вставить("ОсновнаяВалюта",?(МассивВалюта.Количество()>0,МассивВалюта[0].ОсновнаяВалюта,Справочники.Валюты.ПустаяСсылка()));
	
	Возврат ОбъектРасчета;
		
КонецФункции // ПолучиттьОбъектРасчета() 

&НаСервере
Процедура ВыполнитьРаспределениеНаСервере()
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	ДокументОбъект.РаспределитьЗначенияПоказателя();
	
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	ЗаполнитьТаблицуКорректировокФорма(ДокументОбъект.КорректировкаАналитика.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределение(Команда)
	ВыполнитьРаспределениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанДокументКорректировки",ЭтаФорма.ВладелецФормы,ЭтаФорма);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Сбалансированная И (Не БалансКорректировки=0) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не соблюдается баланс корректировки.'"));
		Отказ=Истина;
		
		Возврат;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры
	


