
&НаКлиенте
Перем СтруктураРедактируемойСтроки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//

&НаСервере
Процедура ПолучитьДанныеПоказателя()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
	|	ПоказателиОтчетов.ГруппаРаскрытия.Валютная КАК Валютный
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ПоказательРаскрытия);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ГруппаРаскрытия				= Результат.ГруппаРаскрытия;
	ПересчитыватьВалютнуюСумму	= Результат.ПересчитыватьВалютнуюСумму;
	ВидИтога					= Результат.ВидИтога;
	ВидКурса					= Результат.ВидКурса;
	Валютный					= Результат.Валютный;
		
КонецПроцедуры // ЗаполнитьТаблицуПоказателей() 

&НаСервере
Функция ВернутьМассивОбязательныхАналитик(СтрокаГруппыРаскрытия) Экспорт
	
	МассивОбязательныхАналитик = Новый Массив;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если СтрокаГруппыРаскрытия["ОбязательнаяАналитика" + Инд] Тогда
			МассивОбязательныхАналитик.Добавить("Аналитика" + Инд);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаГруппыРаскрытия["ОбязательнаяАналитикаВалюта"] Тогда
		МассивОбязательныхАналитик.Добавить("АналитикаВалюта");
	КонецЕсли;
	
	Возврат МассивОбязательныхАналитик;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМассивПолейЗначений()
	
	 МассивПолей=Новый Массив;
	 МассивПолей.Добавить("ИсходноеЗначение");
	 МассивПолей.Добавить("Значение");
	 МассивПолей.Добавить("НовоеЗначение");
	 	 
	 МассивПолейЗначений=Новый ФиксированныйМассив(МассивПолей);
	
КонецПроцедуры // ЗаполнитьМассивПолейЗначений() 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
	глОсновнойЯзык=ПараметрыСеанса.ЯзыкОтчетности;
	
	ДанныеКорректировки=ПолучитьИзВременногоХранилища(Параметры.АдресДанныхКорректировки);
	
	ПоказательРаскрытия	= ДанныеКорректировки.Показатель;
	ПолучитьДанныеПоказателя();
	ЗаполнитьМассивПолейЗначений();
	
	Организация			= ДанныеКорректировки.Организация;
	ОсновнаяВалюта		= ДанныеКорректировки.ОсновнаяВалюта;
	Проект				= ДанныеКорректировки.Проект;
	
	Для Каждого Строка ИЗ ДанныеКорректировки.ТаблицаРаскрытия Цикл
		
		НоваяСтрока=ТаблицаРаскрытия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
						
	ТипПоказателяЧисловой=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	ДанныеАналитики=ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытия(,ГруппаРаскрытия);
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		
		ВидАналитики = ДанныеАналитики["ВидАналитики"+Инд].ВидАналитики;
		
		Если Не ПустаяСтрока(ВидАналитики) Тогда
			
			ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
			ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
						
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПараметрыКолонокТаблицыРаскрытия();
	ПолучитьДанныеДляПересчетаВалют(ДанныеКорректировки);
	
	УстановитьУсловноеОформление();
	
	СтрокаШаблона = Нстр("ru = 'Вид отчета: %1, показатель: %2, сценарий: %3, организация: %4, период: %5'");
	
	ТекстЗаголовка = "";
	Если Не ПустаяСтрока(СтрокаШаблона) тогда					
		ТекстЗаголовка = СтрШаблон(СтрокаШаблона,
							ДанныеКорректировки.ВидОтчета,
							ДанныеКорректировки.Показатель,
							ДанныеКорректировки.Сценарий,
							ДанныеКорректировки.Организация,
							ДанныеКорректировки.ПериодОтчета);
	КонецЕсли;
								
	Элементы.ДекорацияЗаголовок.Заголовок=ТекстЗаголовка;
	
	ОбновитьИтогиПоКолонкам();
	
	Элементы.ТаблицаРаскрытия.ТолькоПросмотр=ДанныеКорректировки.РасчетПоФормуле;
							
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Аналитики в строках, по которым уже есть данные, не меняем. Только через явное сторнирование
	// и ввод новое строки с нужными аналитиками.
	
	ЭлементУсловногоОформления=УсловноеОформление.Элементы.Добавить();
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ТаблицаРаскрытия.ИсходноеЗначение");
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("АналитикаВалюта");
	ОформляемоеПоле.Использование = Истина;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Аналитика"+Индекс);
		ОформляемоеПоле.Использование = Истина;
					
	КонецЦикла;
	
КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Процедура ПолучитьДанныеДляПересчетаВалют(ДанныеКорректировки)
	
	Если НЕ ПересчитыватьВалютнуюСумму Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(УправлениеРабочимиПроцессамиУХ.ПолучитьТаблицуКурсов(ДанныеКорректировки.Сценарий,ДанныеКорректировки.ПериодОтчета),"ПериодическиеКурсы");
	
	ВидыКурсов=Новый Соответствие;
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПериода,				"КурсНаКонецПериода");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПредыдущегоПериода,	"КурсНаКонецПредыдущегоПериода");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаНачалоПериода,			"КурсНаНачалоПериода");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериод,			"СреднийКурсЗаПериод");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО,		"СреднийКурсЗаПериодМСФО");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод,	"СреднийКурсЗаПредыдущийПериод");
	
	СоответствиеВидовКурса=Новый ФиксированноеСоответствие(ВидыКурсов);
	
КонецПроцедуры // ПолучитьДанныеДляПересчетаВалют()
 		
&НаСервере
Процедура УстановитьПараметрыКолонокТаблицыРаскрытия()
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ПараметрыАналитики=ДанныеАналитики["ВидАналитики"+Индекс];
		ЭлементАналитики=Элементы["Аналитика"+Индекс];
		
		Если ЗначениеЗаполнено(ПараметрыАналитики.ВидАналитики) Тогда
				
			ЭлементАналитики.Заголовок=ПараметрыАналитики.Наименование;
			ЭлементАналитики.ОграничениеТипа=ПараметрыАналитики.ТипЗначения;
			
		Иначе
			
			ЭлементАналитики.Видимость=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыАналитики=ДанныеАналитики.ВидАналитикиВалютаДт;
	
	Если ЗначениеЗаполнено(ПараметрыАналитики.ВидАналитики) Тогда
		
		Элементы.АналитикаВалюта.Заголовок=ПараметрыАналитики.Наименование;
		Элементы.АналитикаВалюта.ОграничениеТипа=ПараметрыАналитики.ТипЗначения;
		
	Иначе
		
		Элементы.АналитикаВалюта.Видимость=Ложь;
		
	КонецЕсли;
	
	Элементы.ИсходноеЗначениеВалюта.Видимость	= ПересчитыватьВалютнуюСумму;
	Элементы.ЗначениеВалюта.Видимость			= ПересчитыватьВалютнуюСумму;
	Элементы.НовоеЗначениеВалюта.Видимость		= ПересчитыватьВалютнуюСумму;
	
КонецПроцедуры // УстановитьПараметрыЭлементовАналитики()

&НаКлиенте
Процедура ДействиеОткрытие(Элемент,СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	КодАналитики=Элемент.Имя;
	ТекВидАналитики=ДанныеАналитики["ВидАналитики" + СтрЗаменить(КодАналитики,"Аналитика","")];
		
	ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаОбъекта",Новый Структура("Ключ",Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]));
	
КонецПроцедуры // ДействиеОткрытие()

&НаСервере
Функция ПолучитьПараметрыФормыВыбора(КодАналитики)
	
	СтруктураПараметров=Новый Структура;
	СтруктураОтбора=Новый Структура;
	
	ЭлементПВХ=ЭтаФорма["ВидАналитики" + Прав(КодАналитики, 1)];	
	СтруктураОтбора.Вставить("Владелец",ЭлементПВХ);

	Если ЭлементПВХ.РазделятьПоОрганизациям Тогда	
		СтруктураОтбора.Вставить("Организация",Организация);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьПараметрыФормыВыбора() 

&НаКлиенте
Процедура ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	КодАналитики=Элемент.Имя;
	
	Если КодАналитики="АналитикаВалюта" Тогда
		
		ТекВидАналитики=ДанныеАналитики["ВидАналитикиВалютаДт"];
		
	Иначе                                                                                              
		
		ТекВидАналитики=ДанныеАналитики["ВидАналитики" + СтрЗаменить(КодАналитики,"Аналитика","")];
		
	КонецЕсли;
	
	Если ТекВидАналитики.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		СтруктураПараметров=ПолучитьПараметрыФормыВыбора(КодАналитики);
		
	ИначеЕсли ТекВидАналитики.Свойство("Владелец") Тогда
		
		СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",Элементы.ТаблицаРаскрытия.ТекущиеДанные[ТекВидАналитики.Владелец]));
		
	ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" Тогда
		
		СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Организация",Организация));
		
	ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.СчетаБД"
		ИЛИ ТекВидАналитики.ТаблицаАналитики="Справочник.КорреспонденцииВГО" Тогда
		
		СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",ПланСчетов));
		
	ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.Проекты" И ЗначениеЗаполнено(Проект) Тогда
		
		СтруктураПараметров=Новый Структура("Отбор", Новый Структура("Родитель,Проект", Проект,Ложь));
		
	Иначе
		
		СтруктураПараметров=Новый Структура;
		
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ТекущаяСтрока", Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]);
	СтруктураПараметров.Вставить("РежимВыбора",Истина);
	
	ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаВыбора",СтруктураПараметров,Элемент);
					 	
КонецПроцедуры // ДействиеНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.
//

&НаКлиенте
Процедура ТаблицаРаскрытияПередУдалением(Элемент, Отказ)
	
	ТекСтрока = ТаблицаРаскрытия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Отказ=ЗначениеЗаполнено(ТекСтрока.ИсходноеЗначение);
				
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуВСохраненнойТаблицеРаскрытия(ИдентификаторСтроки)
	
	ИсходнаяТаблицаРаскрытия = ПолучитьИзВременногоХранилища(АдресИсходнойТаблицыРаскрытия);
	
	Строка = ИсходнаяТаблицаРаскрытия.Найти(ИдентификаторСтроки, "ID");
	
	Если Не Строка = Неопределено Тогда
		ИсходнаяТаблицаРаскрытия.Удалить(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИзмененийПоказателей(СтруктураСтроки,Показатель,Значение,ЗначениеВалюта=0)
	
	НоваяСтрока = ЛогИзмененийРаскрытий.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
	НоваяСтрока.Показатель 				= Показатель;
	НоваяСтрока.Значение 				= Значение;
	НоваяСтрока.ЗначениеВалюта 			= ЗначениеВалюта;
	
КонецПроцедуры // ДобавитьВЛогИзмененийПоказателей()

&НаКлиенте
Процедура ЗаписатьЗначениеНечисловогоПоказателя(СтруктураСтроки,Показатель,Значение)
	
	СтруктураПоиска=Новый Структура;
	
	Для Каждого Аналитика ИЗ СписокАналитик Цикл	 
		СтруктураПоиска.Вставить(Аналитика.Значение, СтруктураСтроки[Аналитика.Значение]);
	КонецЦикла; 
	
	СтруктураПоиска.Вставить("Показатель",Показатель);
	
	МассивСтрок=ЗначенияНечисловыхПоказателей.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество()=0 Тогда
		
		НоваяСтрока=ЗначенияНечисловыхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		НоваяСтрока.Значение=Значение;
		
	Иначе
		
		МассивСтрок[0].Значение				= Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьЗначениеНечисловогоПоказателя() 

&НаКлиенте
Процедура ТаблицаРаскрытияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИтогиПоКолонкам();
					
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыСервер(ИдентификаторСтроки)
	
	ОбновитьИтогиПоКолонкам();	
	ОбновитьСтрокуВСохраненнойТаблицеРаскрытия(ИдентификаторСтроки);
		
КонецПроцедуры // ОбновитьДанныеТаблицыСервер() 

&НаСервере
Процедура ОбновитьСтрокуВСохраненнойТаблицеРаскрытия(ИдентификаторСтроки)
	
	ТекущаяСтрокаРаскрытия = ТаблицаРаскрытия.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИсходнаяТаблицаРаскрытия = ПолучитьИзВременногоХранилища(АдресИсходнойТаблицыРаскрытия);
	
	Строка = ИсходнаяТаблицаРаскрытия.Найти(ТекущаяСтрокаРаскрытия.ID, "ID");
	
	Если Строка = Неопределено Тогда
		Строка = ИсходнаяТаблицаРаскрытия.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, ТекущаяСтрокаРаскрытия);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДанныхКорректировки()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаРаскрытия"),Новый УникальныйИдентификатор);
	
КонецФункции // ПолучитьАдресДанныхКорректировки() 


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ.
//

&НаКлиенте
Процедура КнопкаОК(Команда)
	
	АдресДанныхКорректировки=ПолучитьАдресДанныхКорректировки();
	
	Оповестить("ИзмененаКорректировкаРаскрытия", АдресДанныхКорректировки,Параметры.ИдентификаторСинтетика);
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура КнопкаЗакрыть(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Элементы.ТаблицаРаскрытия.ТекущаяСтрока <> Неопределено Тогда
		ТД = Элементы.ТаблицаРаскрытия.ДанныеСтроки(Элементы.ТаблицаРаскрытия.ТекущаяСтрока);
		Если СтрЧислоВхождений(Элементы.ТаблицаРаскрытия.ТекущийЭлемент.Имя, "Аналитика") > 0 Тогда
			Возврат;
		КонецЕсли;
		ИмяКолонки = СтрЗаменить(Элементы.ТаблицаРаскрытия.ТекущийЭлемент.Имя, "_Отображение", "");
		МассивКодовПоказателей = Новый Массив;
		МассивКодовПоказателей.Добавить(ИмяКолонки);
		
		СтруктураОтбора = Новый Структура;
		
		Для Каждого Элемент Из СписокАналитик Цикл
			
			Если ЗначениеЗаполнено(ТД[Элемент.Значение]) Тогда
				СтруктураОтбора.Вставить(Элемент.Значение, ТД[Элемент.Значение]);
			КонецЕсли;
				
		КонецЦикла;
		
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.РасшифровкаПоказателейУправляемая"
					,Новый Структура("МассивКодовПоказателей, РабочийОбъектАдрес, мТекущаяВалюта, СтруктураОтбора"
									, МассивКодовПоказателей
									, РабочийОбъектАдрес
									, ОсновнаяВалюта
									, СтруктураОтбора),ЭтаФорма);

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////


&НаСервере
Процедура РассчитатьИтогиДляКолонок(ТекТаблицаРаскрытия=Неопределено)
	
	Если ТекТаблицаРаскрытия=Неопределено Тогда
		ТекТаблицаРаскрытия=ДанныеФормыВЗначение(ТаблицаРаскрытия,Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	ТекстИтоги="";
	
	СтруктураИтога=ОбщегоНазначенияУХ.ВернутьСтруктуруИтога(ВидИтога,Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		
	Если СтруктураИтога=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВидИтога=СтруктураИтога.ТекстИтога;

	Для Каждого Поле ИЗ МассивПолейЗначений Цикл
				
		ТекстИтоги=ТекстИтоги+",
		|"+ТекстВидИтога+"("+Поле+") КАК "+Поле;
		
		ЭтаФорма.Элементы[Поле].ТекстПодвала = "";
		
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	| ПОМЕСТИТЬ ВременнаяТаблица 	
	| ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|ВЫБРАТЬ "+Сред(ТекстИтоги,2)+"
	|ИЗ ВременнаяТаблица КАК ВременнаяТаблица"; 
	
	Если Не СтруктураОтбора=Неопределено Тогда
		
		ТекстОтбор="";
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			
			Если КлючИЗначение.Ключ="Владелец" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстОтбор=ТекстОтбор+" И ВременнаяТаблица."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			Запрос.Текст=Запрос.Текст+" ГДЕ "+Сред(ТекстОтбор,3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТекТаблицаРаскрытия);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Для Каждого Поле ИЗ МассивПолейЗначений Цикл
			
			ЭтаФорма.Элементы[Поле].ТекстПодвала = Формат(Результат[Поле],"ЧЦ=18; ЧДЦ=2" );
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоКолонкам()
	
	РассчитатьИтогиДляКолонок();
	
КонецПроцедуры // ОбновитьИтогиПоКолонкам() 

&НаКлиенте
Процедура ТаблицаРаскрытияПриИзменении(Элемент)
	
	Если Элементы.ТаблицаРаскрытия.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьИзВалютыВВалюту(Значение,ИсходнаяВалюта,НоваяВалюта,ВидКурса)
	
	Если НЕ ЗначениеЗаполнено(ВидКурса) Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не задан вид курса для показателя %1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			Сообщить(СтрШаблон(СтрокаШаблона, ПоказательРаскрытия));
		КонецЕсли;
		
		Возврат 0;
		
	КонецЕсли;

	ТекВидКурса=СоответствиеВидовКурса[ВидКурса];
	
	Если Не ЗначениеЗаполнено(ТекВидКурса) Тогда
		
		Возврат Значение;
		
	КонецЕсли;
	
	МассивКурсовИсходный=ПериодическиеКурсы.НайтиСтроки(Новый Структура("Валюта",ИсходнаяВалюта));
	
	Если МассивКурсовИсходный.Количество()=0 ИЛИ МассивКурсовИсходный[0][ТекВидКурса]=0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не задан курс %1 для валюты %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			Сообщить(СтрШаблон(СтрокаШаблона, ВидКурса, ИсходнаяВалюта));
		КонецЕсли;
				
		Возврат 0;
		
	КонецЕсли;
	
	МассивКурсовНовый=ПериодическиеКурсы.НайтиСтроки(Новый Структура("Валюта",НоваяВалюта));
	
	Если МассивКурсовНовый.Количество()=0 ИЛИ МассивКурсовНовый[0][СоответствиеВидовКурса[ВидКурса]]=0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не задан курс %1 для валюты %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			Сообщить(СтрШаблон(СтрокаШаблона, ВидКурса, НоваяВалюта));
		КонецЕсли;
				
		Возврат 0;
		
	КонецЕсли;
	
	КурсИсходный=МассивКурсовИсходный[0][СоответствиеВидовКурса[ВидКурса]];
	КурсНовый=МассивКурсовНовый[0][СоответствиеВидовКурса[ВидКурса]];
	
	КратностьИсходная=?(МассивКурсовИсходный[0].Кратность=0,1,МассивКурсовИсходный[0].Кратность);
	КратностьНовая=?(МассивКурсовНовый[0].Кратность=0,1,МассивКурсовНовый[0].Кратность);
	
	Возврат Значение * (КурсИсходный * КратностьНовая) / (КурсНовый * КратностьИсходная);
		
КонецФункции // ПересчитатьИзВалютыВВалюту() 

&НаКлиенте
Процедура УстановитьФильтр(Команда)
	
	ТекущиеДанные=Элементы.ТаблицаРаскрытия.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяКолонки=Элементы.ТаблицаРаскрытия.ТекущийЭлемент.Имя;
	
	Если СтрНайти(ИмяКолонки,"Аналитика")=0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Если СтруктураОтбора=Неопределено Тогда
		
		СтруктураОтбора=Новый Структура;
		
	КонецЕсли;
			
	СтруктураОтбора.Вставить(ИмяКолонки,ТекущиеДанные[ИмяКолонки]);
	
	СформироватьЗаголовокОтбора();
	
	УстановитьОтбор(Новый ФиксированнаяСтруктура(СтруктураОтбора));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(ПараметрыОтбора)
	
	Элементы.ТаблицаРаскрытия.ОтборСтрок=ПараметрыОтбора;
	ОбновитьИтогиПоКолонкам();
	
КонецПроцедуры // УстановитьОтбор()

&НаКлиенте
Процедура СформироватьЗаголовокОтбора()
	
	ТекстОтбора="";
	
	Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
		
		Если КлючИЗначение.Ключ="АналитикаВалюта" Тогда
			
			ПолеОтбора = Нстр("ru = 'Валюта'");
			
		Иначе
			
			ПараметрыАналитики=ДанныеАналитики["ВидАналитики"+СтрЗаменить(КлючИЗначение.Ключ,"Аналитика","")];
			ПолеОтбора=ПараметрыАналитики.Наименование;
			
		КонецЕсли;
		
		ТекстОтбора=ТекстОтбора+", "+ПолеОтбора+": "+КлючИЗначение.Значение;
		
	КонецЦикла;
	
	ТекстУстановленногоФильтра=Сред(ТекстОтбора,2);
	
КонецПроцедуры // СформироватьЗаголовокОтбора()

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	СтруктураОтбора=Неопределено;
	УстановитьОтбор(Неопределено);
	
	ТекстУстановленногоФильтра="";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаскрытияПослеУдаления(Элемент)
	
	ОбновитьИтогиПоКолонкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаскрытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаРаскрытия.ТекущиеДанные.ИсходноеЗначение=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КодАналитики=Поле.Имя;
	
	Если СтрНайти(КодАналитики,"Аналитика")=0 ИЛИ КодАналитики="АналитикаВалюта" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекВидАналитики=ДанныеАналитики["ВидАналитики" + СтрЗаменить(КодАналитики,"Аналитика","")];
		
	ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаОбъекта",Новый Структура("Ключ",Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]));
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеЗначениеПриИзменении(Элемент)
	
	РассчитатьСтрокуКорректировки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	
	РассчитатьСтрокуКорректировки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеЗначениеВалютаПриИзменении(Элемент)
	
	РассчитатьСтрокуКорректировки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВалютаПриИзменении(Элемент)
	
	РассчитатьСтрокуКорректировки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуКорректировки(ИмяПоля)
	
	Если ИмяПоля="Значение" Тогда
		
		РассчитатьПоЗначение();
		
	ИначеЕсли ИмяПоля="ЗначениеВалюта" Тогда
		
		РассчитатьПоЗначениеВалюта();
		
	ИначеЕсли ИмяПоля="НовоеЗначение" Тогда
		
		РассчитатьПоНовоеЗначение();
		
	ИначеЕсли ИмяПоля="НовоеЗначениеВалюта" Тогда
		
		РассчитатьПоНовоеЗначениеВалюта();
		
	ИначеЕсли ИмяПоля="АналитикаВалюта" И ПересчитыватьВалютнуюСумму Тогда
		
		РассчитатьПоЗначениеВалюта();
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСтрокуКорректировки(ИмяПоля)

&НаКлиенте
Процедура РассчитатьПоЗначение()
	
	ТекущиеДанные=Элементы.ТаблицаРаскрытия.ТекущиеДанные;
	
	Если ПересчитыватьВалютнуюСумму И ЗначениеЗаполнено(ТекущиеДанные.АналитикаВалюта) Тогда
		
		ТекущиеДанные.ЗначениеВалюта=ПересчитатьИзВалютыВВалюту(ТекущиеДанные.Значение,ОсновнаяВалюта,ТекущиеДанные.АналитикаВалюта,ВидКурса);
		ТекущиеДанные.НовоеЗначениеВалюта=ТекущиеДанные.ИсходноеЗначениеВалюта+ТекущиеДанные.ЗначениеВалюта;
			
	КонецЕсли;
	
	ТекущиеДанные.НовоеЗначение=ТекущиеДанные.ИсходноеЗначение+ТекущиеДанные.Значение;
		
КонецПроцедуры // РассчитатьПоЗначение()

&НаКлиенте
Процедура РассчитатьПоЗначениеВалюта()
	
	ТекущиеДанные=Элементы.ТаблицаРаскрытия.ТекущиеДанные;
	
	Если ПересчитыватьВалютнуюСумму И ЗначениеЗаполнено(ТекущиеДанные.АналитикаВалюта) Тогда
		
		ТекущиеДанные.Значение=ПересчитатьИзВалютыВВалюту(ТекущиеДанные.ЗначениеВалюта,ТекущиеДанные.АналитикаВалюта,ОсновнаяВалюта,ВидКурса);
		ТекущиеДанные.НовоеЗначение=ТекущиеДанные.ИсходноеЗначение+ТекущиеДанные.Значение;
			
	КонецЕсли;
	
	ТекущиеДанные.НовоеЗначениеВалюта=ТекущиеДанные.ИсходноеЗначениеВалюта+ТекущиеДанные.ЗначениеВалюта;

КонецПроцедуры // РассчитатьПоЗначение()

&НаКлиенте
Процедура РассчитатьПоНовоеЗначение()
	
	ТекущиеДанные=Элементы.ТаблицаРаскрытия.ТекущиеДанные;
	
	Если ПересчитыватьВалютнуюСумму И ЗначениеЗаполнено(ТекущиеДанные.АналитикаВалюта) Тогда
		
		ТекущиеДанные.НовоеЗначениеВалюта=ПересчитатьИзВалютыВВалюту(ТекущиеДанные.НовоеЗначение,ОсновнаяВалюта,ТекущиеДанные.АналитикаВалюта,ВидКурса);
		ТекущиеДанные.ЗначениеВалюта=ТекущиеДанные.НовоеЗначениеВалюта-ТекущиеДанные.ИсходноеЗначениеВалюта;
			
	КонецЕсли;
	
	ТекущиеДанные.Значение=ТекущиеДанные.НовоеЗначение-ТекущиеДанные.ИсходноеЗначение;
	
КонецПроцедуры // РассчитатьПоЗначение()

&НаКлиенте
Процедура РассчитатьПоНовоеЗначениеВалюта()
	
	ТекущиеДанные=Элементы.ТаблицаРаскрытия.ТекущиеДанные;
	
	Если ПересчитыватьВалютнуюСумму И ЗначениеЗаполнено(ТекущиеДанные.АналитикаВалюта) Тогда
		
		ТекущиеДанные.НовоеЗначение=ПересчитатьИзВалютыВВалюту(ТекущиеДанные.НовоеЗначениеВалюта,ТекущиеДанные.АналитикаВалюта,ОсновнаяВалюта,ВидКурса);
		ТекущиеДанные.ЗначениеВалюта=ТекущиеДанные.НовоеЗначениеВалюта-ТекущиеДанные.ИсходноеЗначениеВалюта;
			
	КонецЕсли;
	
	ТекущиеДанные.Значение=ТекущиеДанные.НовоеЗначение-ТекущиеДанные.ИсходноеЗначение;

КонецПроцедуры // РассчитатьПоЗначение()



		








