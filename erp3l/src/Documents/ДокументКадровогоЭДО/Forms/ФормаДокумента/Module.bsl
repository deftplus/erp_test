#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПросмотр = Истина;
	
	Заголовок = СтрШаблон(
		НСтр("ru = 'Карточка электронного документа. %1';
			|en = 'Electronic document card. %1'"),
		Объект.КатегорияДокумента);
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОбработатьВыборСотрудников(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СформироватьПредставлениеОзнакомляемых();
	
	ПрочитатьДанныеФайла();
	ПрочитатьЭлектронныеПодписи();
	УстановитьОтображениеЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаСРасширениемНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.ЭлектронныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	БизнесПроцессыЗаявокСотрудниковКлиент.ПоказатьОснованиеДокументаКадровогоЭДО(
		Объект.ОснованиеДокумента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомляемыеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДату(
		ЭтотОбъект, Объект.Организация, , Объект.Дата, Истина, АдресСпискаПодобранных());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Просмотреть(Команда)
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьПечатныеФормыПоПочте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	КоллекцияПодписей = ЗаполнитьКоллекцииПодписей();
	ПодписиСервиса = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиСервиса Цикл
		ПодписиСервиса.Добавить(ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	ПодписиИБ = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиИБ Цикл
		ПодписиИБ.Добавить(ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка", Объект.ЭлектронныйДокумент);
	ОписаниеОбъекта.Вставить("Зашифрован", ДанныеЭлектронногоДокумента.Зашифрован);
	
	ПараметрыФормы = Новый Структура("Объект", ОписаниеОбъекта);
	ПараметрыФормы.Вставить("ЭлектронныеПодписи", ПодписиИБ);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписи(
		ПараметрыФормы,
		ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
		
	ПроверитьПодписиСериса(ПодписиСервиса);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВАрхив(Команда)
	
	КадровыйЭДОКлиент.СохранитьПечатныеФормыНаДиск(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПрочитатьЭлектронныеПодписи()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодписанныйОбъект", Объект.ЭлектронныйДокумент);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
		|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект";

	ЭлектронныеПодписи.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаПодписи = ЭлектронныеПодписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодписи, Выборка);
		СтрокаПодписи.АдресПодписи = ПоместитьВоВременноеХранилище(Выборка.Подпись.Получить(), УникальныйИдентификатор);
		РаботаСФайламиСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(СтрокаПодписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФайла()
	
	Если Не ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		ИмяФайлаСРасширением = НСтр("ru = '<Отсутствует>';
									|en = '<None>'");
		Возврат;
	КонецЕсли;
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Объект.ЭлектронныйДокумент, ПараметрыДанныхФайла);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
			ЭтотОбъект,
			"ИмяФайлаСРасширением",
			КраткоеПредставлениеОшибки(Ошибка));
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Объект.ЭлектронныйДокумент, ПараметрыДанныхФайла);
	КонецПопытки;
	
	ИмяФайлаСРасширением = ДанныеФайла.ИмяФайла;
	Расширение = ДанныеФайла.Расширение;
	Если ЗначениеЗаполнено(Расширение)
		И Не СтрЗаканчиваетсяНа(ИмяФайлаСРасширением, Расширение) Тогда
		
		ИмяФайлаСРасширением = СтрШаблон("%1.%2", ИмяФайлаСРасширением, Расширение);
	КонецЕсли;
	
	ДанныеПрисоединенногоФайла = Новый Структура;
	ДанныеПрисоединенногоФайла.Вставить("Зашифрован", ДанныеФайла.Зашифрован);
	ДанныеПрисоединенногоФайла.Вставить("СсылкаНаДвоичныеДанные", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ДанныеЭлектронногоДокумента = Новый ФиксированнаяСтруктура(ДанныеПрисоединенногоФайла);
	
	Если ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаПросмотреть",
			"Доступность",
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОтправить",
			"Доступность",
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЭлектронныеПодписиПроверитьПодписи",
			"Доступность",
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СохранитьВсеВАрхив",
			"Доступность",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ДатаПроверкиПодписи");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ПодписьВерна");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокументПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ОткрытьЭлектронныйДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокумент()
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
		Объект.ЭлектронныйДокумент, Неопределено, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый Массив;
	
	ОписанияФайлов = КадровыйЭДОВызовСервера.ФайлыПечатныхФормДляСохраненияНаДиск(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	
	Для Каждого ОписанияФайла Из ОписанияФайлов Цикл
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ОписанияФайла.Имя);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ОписанияФайла.Хранение);
		СписокВложений.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель");
	ПараметрыОтправки.Вставить("Тема", Строка(Объект.ЭлектронныйДокумент));
	ПараметрыОтправки.Вставить("Текст", ПараметрыОтправки.Тема);
	ПараметрыОтправки.Вставить("Вложения", СписокВложений);
	ПараметрыОтправки.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранных()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица",
		Объект.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо В(&ФизическиеЛица)";
	
	Возврат ПоместитьВоВременноеХранилище(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборСотрудников(ВыбранныеСотрудники)
	
	ОбновитьПредставление = Ложь;
	Для Каждого Сотрудник Из ВыбранныеСотрудники Цикл
		
		ФизическоеЛицо = КадровыйУчетПовтИсп.ФизическоеЛицоСотрудника(Сотрудник);
		СтруктураПоиска = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		Если Объект.ВнешниеПодписанты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ОбновитьПредставление = Истина;
			НовыйПодписант = Объект.ВнешниеПодписанты.Добавить();
			НовыйПодписант.ФизическоеЛицо = ФизическоеЛицо;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновитьПредставление Тогда
		СформироватьПредставлениеОзнакомляемых();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОзнакомляемых()
	
	Ознакомляемые = "";
	Если Объект.ВнешниеПодписанты.Количество() > 0 Тогда
		
		СписокФамилийИО = Новый Массив;
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, Объект.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"),
			"ФамилияИО", Объект.Дата);
		
		Если КадровыеДанные.Количество() > 0 Тогда
			СписокФамилийИО.Добавить(КадровыеДанные[0].ФамилияИО);
		КонецЕсли;
		Если КадровыеДанные.Количество() > 1 Тогда
			СписокФамилийИО.Добавить(КадровыеДанные[1].ФамилияИО);
		КонецЕсли;
		Если КадровыеДанные.Количество() > 2 Тогда
			СписокФамилийИО.Добавить(КадровыеДанные[2].ФамилияИО);
		КонецЕсли;
		Если КадровыеДанные.Количество() = 4 Тогда
			СписокФамилийИО.Добавить(КадровыеДанные[3].ФамилияИО);
		ИначеЕсли КадровыеДанные.Количество() > 4 Тогда
			СписокФамилийИО.Добавить(НСтр("ru = '... и еще ';
											|en = '... and also '")
				+ СтрокаСЧислом(
					НСтр("ru = '; %1 сотрудник;; %1 сотрудника; 1% сотрудников; %1 сотрудника';
						|en = '; %1 employee;; %1 of employee; 1% of employees; %1 of employee'"),
					КадровыеДанные.Количество() - 3, ВидЧисловогоЗначения.Количественное, "L=ru"));
		КонецЕсли;
		
		Ознакомляемые = СтрСоединить(СписокФамилийИО, ", ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовФормы(УправляемаяФорма)
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	Если Объект.КатегорияДокумента = ПредопределенноеЗначение("Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудник",
			"Заголовок",
			НСтр("ru = 'Ознакомить';
				|en = 'Inform'"));
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Сотрудник",
		"Видимость",
		ПустаяСтрока(УправляемаяФорма.Ознакомляемые));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Ознакомляемые",
		"Видимость",
		Не ПустаяСтрока(УправляемаяФорма.Ознакомляемые));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОснованиеДокумента",
		"Видимость",
		Объект.Ссылка <> Объект.ОснованиеДокумента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОснованиеДокумента",
		"Видимость",
		Объект.Ссылка <> Объект.ОснованиеДокумента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИмяФайлаСРасширением",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПросмотреть",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтправить",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент)
			И СтрНайти(УправляемаяФорма.Расширение, "PDF") > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписи",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СохранитьВсеВАрхив",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКоллекцииПодписей()

	ПодписиСервиса = Новый Массив;
	ПодписиИБ = Новый Массив;
	
	Для каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
		Если КабинетСотрудника.ЭтоПодписанСервиса(СтрокаПодписи.Комментарий) Тогда
			ПодписиСервиса.Добавить(СтрокаПодписи.ПолучитьИдентификатор());
		Иначе
			ПодписиИБ.Добавить(СтрокаПодписи.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	КоллекцияПодписей = Новый Структура();
	КоллекцияПодписей.Вставить("ПодписиСервиса", ПодписиСервиса);
	КоллекцияПодписей.Вставить("ПодписиИБ", ПодписиИБ);
	
	Возврат КоллекцияПодписей;

КонецФункции

&НаКлиенте
Процедура ПроверитьПодписиСериса(ТаблицаПодписей)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТаблицаПодписей", ТаблицаПодписей);
	ДополнительныеПараметры.Вставить("СсылкаНаДвоичныеДанные", ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодписиПослеСозданияМенеджера", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПроверкаПодписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из ДополнительныеПараметры.ТаблицаПодписей Цикл
		ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДополнительныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДополнительныеПараметры)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.СсылкаНаДвоичныеДанные);
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	Попытка
		Сертификат = Неопределено;
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
		
		МассивРежимовПроверки = Новый Массив;
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов);
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна';
									|en = 'Valid'");
		ДанныеСтроки.ПодписьВерна = Истина;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Не верна';
									|en = 'Incorrect'");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + ": " + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.ПодписьВерна = Ложь;
	КонецПопытки;
	
	ДанныеСтроки.ДатаПроверкиПодписи = ТекущаяДата();
	
КонецПроцедуры

#КонецОбласти
