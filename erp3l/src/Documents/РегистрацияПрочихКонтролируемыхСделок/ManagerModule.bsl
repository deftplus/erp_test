#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("КонтролируемыеСделки");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаКонтролируемыхСделокОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеКонтролируемыеСделки.Ссылка,
	|	ПрочиеКонтролируемыеСделки.Дата КАК Период,
	|	ПрочиеКонтролируемыеСделки.УведомлениеОКонтролируемойСделке КАК Уведомление,
	|	ПрочиеКонтролируемыеСделки.Организация,
	|	ПрочиеКонтролируемыеСделки.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ПрочиеКонтролируемыеСделки.Контрагент,
	|	ПрочиеКонтролируемыеСделки.ДоговорКонтрагента КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииКонтролируемыхСделок.ПрочаяОперация) КАК ХозяйственнаяОперация,
	|	ПрочиеКонтролируемыеСделки.ВалютаДокумента КАК Валюта,
	|	ПрочиеКонтролируемыеСделки.Комиссионер КАК Комиссионер
	|ИЗ
	|	Документ.РегистрацияПрочихКонтролируемыхСделок КАК ПрочиеКонтролируемыеСделки
	|ГДЕ
	|	ПрочиеКонтролируемыеСделки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаКонтролируемыхСделокОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "КонтролируемыеСделкиОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПрочиеКонтролируемыеСделкиСделки.ДатаСовершенияСделки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|				ИЛИ ПрочиеКонтролируемыеСделкиСделки.ДатаСовершенияСделки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Период
	|		ИНАЧЕ ПрочиеКонтролируемыеСделкиСделки.ДатаСовершенияСделки
	|	КОНЕЦ КАК Период,
	|	&Уведомление КАК Уведомление,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&Аналитика КАК Договор,
	|	ПрочиеКонтролируемыеСделкиСделки.ПредметСделки КАК ПредметСделки,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПрочиеКонтролируемыеСделкиСделки.Ссылка КАК РасчетныйДокумент,
	|	&Валюта КАК Валюта,
	|	ПрочиеКонтролируемыеСделкиСделки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПрочиеКонтролируемыеСделкиСделки.Количество КАК Количество,
	|	ПрочиеКонтролируемыеСделкиСделки.СуммаБезНДСВРублях КАК СуммаБезНДСВРублях,
	|	ВЫБОР
	|		КОГДА &Валюта = &ВалютаРегламентированногоУчета
	|			ТОГДА ПрочиеКонтролируемыеСделкиСделки.СуммаБезНДСВРублях
	|		ИНАЧЕ ПрочиеКонтролируемыеСделкиСделки.СуммаБезНДСВВалютеРасчетов
	|	КОНЕЦ КАК СуммаБезНДСВВалютеРасчетов,
	|	ПрочиеКонтролируемыеСделкиСделки.СуммаНДСВРублях КАК СуммаНДСВРублях,
	|	ВЫБОР
	|		КОГДА &Валюта = &ВалютаРегламентированногоУчета
	|			ТОГДА ПрочиеКонтролируемыеСделкиСделки.СуммаНДСВРублях
	|		ИНАЧЕ ПрочиеКонтролируемыеСделкиСделки.СуммаНДСВВалютеРасчетов
	|	КОНЕЦ КАК СуммаНДСВВалютеРасчетов,
	|	ПрочиеКонтролируемыеСделкиСделки.НаименованиеПредметаСделки КАК НаименованиеПредметаСделки,
	|	ПрочиеКонтролируемыеСделкиСделки.ТипПредметаСделки КАК ТипПредметаСделки,
	|	ПрочиеКонтролируемыеСделкиСделки.СтранаПроисхожденияПредметаСделки КАК СтранаПроисхожденияПредметаСделки,
	|	ПрочиеКонтролируемыеСделкиСделки.СтавкаНДС КАК СтавкаНДС,
	|	ПрочиеКонтролируемыеСделкиСделки.ТипКонтролируемойСделки КАК ТипКонтролируемойСделки,
	|	ПрочиеКонтролируемыеСделкиСделки.Грузоотправитель КАК Грузоотправитель,
	|	ПрочиеКонтролируемыеСделкиСделки.Грузополучатель КАК Грузополучатель,
	|	ПрочиеКонтролируемыеСделкиСделки.ОперацияОблагаетсяЕНВД КАК ОперацияОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА ПрочиеКонтролируемыеСделкиСделки.ТипПредметаСделки = ЗНАЧЕНИЕ(Перечисление.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство)
	|			ТОГДА ПрочиеКонтролируемыеСделкиСделки.ПроцентнаяСтавка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентнаяСтавка,
	|	ВЫБОР
	|		КОГДА ПрочиеКонтролируемыеСделкиСделки.ТипПредметаСделки = ЗНАЧЕНИЕ(Перечисление.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство)
	|			ТОГДА ПрочиеКонтролируемыеСделкиСделки.ДатаПроцентнойСтавки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаПроцентнойСтавки,
	|	&Комиссионер КАК Комиссионер
	|ИЗ
	|	Документ.РегистрацияПрочихКонтролируемыхСделок.Сделки КАК ПрочиеКонтролируемыеСделкиСделки
	|ГДЕ 
	|	ПрочиеКонтролируемыеСделкиСделки.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Добавляет команду создания документа "Регистрация прочих контролируемых сделок".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУведомленияОКонтролируемыхСделках";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.РегистрацияПрочихКонтролируемыхСделок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.1.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2de93d1d-825a-4c77-84b4-56b0bfcd7eb9");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РегистрацияПрочихКонтролируемыхСделок.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Ставка НДС""';
									|en = 'Fills in ""VAT rate"" attribute'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.РегистрацияПрочихКонтролируемыхСделок";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияПрочихКонтролируемыхСделок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистрацияПрочихКонтролируемыхСделок КАК РегистрацияПрочихКонтролируемыхСделок
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.РегистрацияПрочихКонтролируемыхСделок.Сделки КАК РегистрацияПрочихКонтролируемыхСделокСделки
	|			ГДЕ
	|				РегистрацияПрочихКонтролируемыхСделок.Ссылка = РегистрацияПрочихКонтролируемыхСделокСделки.Ссылка
	|				И РегистрацияПрочихКонтролируемыхСделокСделки.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
	|				И РегистрацияПрочихКонтролируемыхСделокСделки.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))";
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта        = "Документ.РегистрацияПрочихКонтролируемыхСделок";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				МассивТЧ = Новый Массив();
				МассивТЧ.Добавить("Сделки");
				
				УчетНДСЛокализация.ЗаполнитьКолонкуТЧСтавкаНДС(ДокументОбъект, МассивТЧ, ОбъектИзменен);
				
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
