&НаКлиенте
Перем ОтветПередЗакрытием;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	
	СтараяОрганизация = Объект.Организация;
	
	#Область УниверсальныеПроцессыСогласование
	АккредитацияПоставщиковУХ.ИнициализироватьПодсистемуСогласованияПоВнешнемуПоставщику(
		ЭтаФорма);
	#КонецОбласти
		
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(
		АккредитацияПоставщиковУХ.ОрганизацииТребующиеАккредитациюПоставщиков(Объект.Дата));
		
	АккредитацияПоставщиковУХ.УстановитьПредставлениеСтатусаАккредитацииНаФорме(
		ЭтаФорма, Объект.Организация, Объект.АнкетаПоставщика, ТекущаяУниверсальнаяДата());
		
	УстановитьОформлениеФормы();
	УстановитьОформлениеФормыВнешнегоПоставщика();
	// Ограничение выбора типа номенклатуры для номенклатуры поставщика.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТиповНоменклатура = Новый ОписаниеТипов(МассивТипов);
	Элементы.НоменклатураПоставщикаНоменклатура.ОграничениеТипа = ОписаниеТиповНоменклатура;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНадписьСостояниеОтправкиНаПроверку();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	#Область УниверсальныеПроцессыСогласование
		Если ИмяСобытия = "ОбъектСогласован" ИЛИ ИмяСобытия = "ОбъектОтклонен" ИЛИ ИмяСобытия = "МаршрутИнициализирован" ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
			ОпределитьСостояниеОбъекта();
			УстановитьОформлениеФормы();
		КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	мОшибок = ПроверитьЗаполнениеНоменклатуры(Отказ);
	ЦентрализованныеЗакупкиКлиентСерверУХ.СообщитьПользователюИзМассива(мОшибок);
	
	Если НЕ Отказ И НЕ ЭтоВнешнийПользователь
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Объект.РешениеПоДокументу = 
				ПредопределенноеЗначение(
					"Перечисление.ВидыРешенийПоДокументуАккредитации.ПоложительноеРешение") Тогда
		мОшибок = 
			АккредитацияПоставщиковКлиентУХ.ПроверитьУстановленностьРешенийПоСтрокам(
				Объект, 
				"ОбщиеТребования", 
				"РешениеПоложительно");
		ЦентрализованныеЗакупкиКлиентСерверУХ.СообщитьПользователюИзМассива(
			мОшибок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	АккредитацияПоставщиковУХ.УстановитьПредставлениеСтатусаАккредитацииНаФорме(
		ЭтаФорма, Объект.Организация, Объект.АнкетаПоставщика, Объект.Дата);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьНадписьСостояниеОтправкиНаПроверку();
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ОповеститьПоставщикаОРешении(Команда)
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо записать документ перед отправкой оповещения.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	АккредитацияПоставщиковВызовСервераУХ.ОповеститьПоставщикаОРешенииПоОбъекту(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезаполнитьТребования(Команда)
	ПерезаполнитьТребованияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РешениеПоДокументуПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ОбработатьИзменениеКлючевыхРеквизитовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеТребованияКритерийПриИзменении(Элемент)
	ТекДанные = Элементы.ОбщиеТребования.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Критерий) Тогда
		ТекДанные.ЗначениеМножества = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗначениеПоУмолчанию = ВыборОбъектовВызовСервераУХ.ПолучитьЗначениеПоУмолчаниюКритерия(ТекДанные.КритерийВыбора);
	Если ТипЗнч(ЗначениеПоУмолчанию) <> ТипЗнч(ТекДанные.ЗначениеМножества) Тогда
		ТекДанные.ЗначениеМножества = ЗначениеПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеТребованияПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.ОбщиеТребования.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Критерий) Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаЗначениеМножества = Элементы.ОбщиеТребованияЗначениеМножества;
	
	ОписаниеТипаКритерия = ВыборОбъектовВызовСервераУХ.ПолучитьОписаниеТипаКритерия(ТекДанные.Критерий);
	КолонкаЗначениеМножества.ОграничениеТипа = ОписаниеТипаКритерия;
	ТекДанные.ЗначениеМножества = ОписаниеТипаКритерия.ПривестиЗначение(ТекДанные.ЗначениеМножества);
	
	флРедактированиеСтроки = ОписаниеТипаКритерия.СодержитТип(Тип("Строка"));
	флВыборЗначения = ОписаниеТипаКритерия.СодержитТип(Тип("СправочникСсылка.ЗначенияПеречислимыхКритериев"));
	
	КолонкаЗначениеМножества.МногострочныйРежим = флРедактированиеСтроки;
	КолонкаЗначениеМножества.КнопкаВыбора = флРедактированиеСтроки ИЛИ флВыборЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаСогласование(Команда)
	АккредитацияПоставщиковКлиентУХ.ОтправитьНаСогласование(ЭтаФорма);
	УстановитьНадписьСостояниеОтправкиНаПроверку();
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеТребованияЗначениеМножестваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ОбщиеТребования.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ЗаголовокТекста = Строка(ТекДанные.Критерий);
		Иначе
			ЗаголовокТекста = "";
		КонецЕсли;
		АккредитацияПоставщиковКлиентУХ.ТабличнаяЧастьОткрытьРедакторМногострочногоТекста(ЭтаФорма, "Объект.ОбщиеТребования", "ОбщиеТребования", "ЗначениеМножества", ЗаголовокТекста);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеТребованияРедактироватьТекст(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяРеквизитаПоИмениЭлемента = СтрЗаменить(Элемент.Имя, "ОбщиеТребования", "");
	АккредитацияПоставщиковКлиентУХ.ТабличнаяЧастьОткрытьРедакторМногострочногоТекста(ЭтаФорма, "Объект.ОбщиеТребования", "ОбщиеТребования", ИмяРеквизитаПоИмениЭлемента, Элемент.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация <> СтараяОрганизация Тогда
		ОбработатьИзменениеКлючевыхРеквизитовНаСервере();
		СтараяОрганизация = Объект.Организация;
		#Если ВебКлиент Тогда
		ОпределитьСостояниеОбъекта(Истина);	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	Объект.ДатаНачалаСрокаАккредитации = Объект.Дата;
	Объект.ДатаОкончанияСрокаАккредитации = ДобавитьМесяц(Объект.ДатаНачалаСрокаАккредитации, АккредитацияПоставщиковУХ.СрокАккредитацииПоставщикаПоУмолчаниюВМесяцах());
	ОбработатьИзменениеКлючевыхРеквизитовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПоставщикаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.НоменклатураПоставщика.НайтиСтроки(Новый Структура("Номенклатура", ВыбранноеЗначение)).Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ВыбранноеЗначение = Неопределено;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Такая номенклатура уже есть в списке'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПоставщикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.НоменклатураПоставщика.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемаяНоменклатура = ТекущиеДанные.Номенклатура;
КонецПроцедуры

&НаКлиенте
Процедура ТребованияНоменклатурыЗначениеМножестваПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТребованияНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 

КонецПроцедуры

&НаКлиенте
Процедура ПричинаПереаккредитацииПриИзменении(Элемент)
	ПричинаПереаккредитацииПриИзмененииНаСервере();
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Функция ПроверитьЗаполнениеНоменклатуры(Отказ)
	мОшибок = Новый Массив;
	
	Если Объект.НоменклатураПоставщика.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нужно заполнить список номенклатуры поставляемой поставщиком.'");
		Сообщение.Поле = "НоменклатураПоставщика";
		Сообщение.КлючДанных = Объект.Ссылка;
    	Сообщение.ПутьКДанным = "Объект";
		мОшибок.Добавить(Сообщение);
	КонецЕсли;
	Для Каждого СтрокаНоменклатуры Из Объект.НоменклатураПоставщика Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
			ИндексСтроки = Объект.НоменклатураПоставщика.Индекс(СтрокаНоменклатуры);
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура в строке №%НомерСтроки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрокаНоменклатуры.НомерСтроки));
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "НоменклатураПоставщика[" + ИндексСтроки + "].Номенклатура";
			Сообщение.КлючДанных = Объект.Ссылка;
	    	Сообщение.ПутьКДанным = "Объект";
			мОшибок.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	Возврат мОшибок;
КонецФункции

&НаКлиенте
Процедура УстановитьНадписьСостояниеОтправкиНаПроверку()
	Если ЗначениеЗаполнено(Объект.ДатаОтправкиНаСогласование) Тогда
		Элементы.НадписьОтправленНаПроверку.Заголовок = НСтр("ru = 'Анкета отправлена'");
		Элементы.НадписьОтправленНаПроверку.ЦветТекста = Новый Цвет(0, 0, 0);
		Элементы.НадписьОтправленНаПроверку.Шрифт = Новый Шрифт(,, Истина);
	Иначе
		Элементы.НадписьОтправленНаПроверку.Заголовок =  НСтр("ru = 'Анкета не отправлена'");
		Элементы.НадписьОтправленНаПроверку.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ЗаполнитьОбщиеТребования()
	Объект.ОбщиеТребования.Загрузить(
		АккредитацияПоставщиковУХ.ПолучитьОбщиеТребованияПоАнкете(Объект.Дата, Объект.Организация, Объект.АнкетаПоставщика));
КонецПроцедуры

&НаСервере
Процедура ЗаполненитьТребованияНаСервере()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьОбщиеТребования();
	Иначе
		Объект.ОбщиеТребования.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы() Экспорт
	ТекСтатус = РеквизитСтатусОбъекта(ЭтаФорма);
	флЧерновик = (ТекСтатус = Перечисления.СостоянияСогласования.Черновик) ИЛИ НЕ ЗначениеЗаполнено(ТекСтатус);
	
	флРасширениеВидовДеятельности = Объект.ЭтоПовторнаяАккредитация И
		(Объект.ПричинаПереаккредитации = Перечисления.ПричинаПереаккредитации.РасширениеВидовАккредитуемойДеятельности);
		
	флУтвержденаИлиОтменена = (ТекСтатус = Перечисления.СостоянияСогласования.Утверждена) ИЛИ
		(ТекСтатус = Перечисления.СостоянияСогласования.Отклонена);
		
	флЕстьРешениеПоДокументу = флУтвержденаИлиОтменена И
		(Объект.РешениеПоДокументу <> Перечисления.ВидыРешенийПоДокументуАккредитации.РешениеНеПринято);
		
	Элементы.ФормаОповеститьПоставщикаОРешении.Видимость = НЕ ЭтоВнешнийПользователь И флЕстьРешениеПоДокументу И Объект.Проведен;
	Элементы.ДатаНачалаСрокаАккредитации.ТолькоПросмотр = ЭтоВнешнийПользователь ИЛИ флРасширениеВидовДеятельности;	
	Элементы.ДатаОкончанияСрокаАккредитации.ТолькоПросмотр = флРасширениеВидовДеятельности;
	Элементы.Организация.ТолькоПросмотр = флЕстьРешениеПоДокументу;
	Элементы.ГруппаПовторнаяАккредитация.Видимость = НЕ ЭтоВнешнийПользователь И Объект.ЭтоПовторнаяАккредитация;
	Элементы.ОбщиеТребования.ТолькоПросмотр = флЕстьРешениеПоДокументу ИЛИ флРасширениеВидовДеятельности;
	Элементы.НоменклатураПоставщика.ТолькоПросмотр = флЕстьРешениеПоДокументу;
	Элементы.ТоварныеКатегории.Видимость = Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить();
КонецПроцедуры

// Вызывается один раз при создании формы.
// Устанавливает свойства элементов формы в зависимости
// от того обыйный или внешний пользователь ее открыл.
//
&НаСервере
Процедура УстановитьОформлениеФормыВнешнегоПоставщика() Экспорт
	ТекСтатус = РеквизитСтатусОбъекта(ЭтаФорма);
	флЧерновик = (ТекСтатус = Перечисления.СостоянияСогласования.Черновик) ИЛИ НЕ ЗначениеЗаполнено(ТекСтатус);
	
	// Установка видимости и доступности
	АккредитацияПоставщиковУХ.УстановитьОбщееОформлениеФормыЭлементаВнешнегоПоставщика(
		ЭтаФорма, флЧерновик, Истина, Истина, Истина);
	
	Элементы.ДатаОкончанияСрокаАккредитации.Видимость = НЕ ЭтоВнешнийПользователь;
	Элементы.Организация.КнопкаОткрытия = НЕ ЭтоВнешнийПользователь;
	Элементы.ОбщиеТребованияРешениеПоложительно.Видимость = НЕ ЭтоВнешнийПользователь;
	Элементы.ОбщиеТребованияКомментарийКомиссии.Видимость = НЕ ЭтоВнешнийПользователь;
	Элементы.НоменклатураПоставщикаНоменклатура.КнопкаОткрытия = НЕ ЭтоВнешнийПользователь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПовторнуюАккредитацию()
	Если ЗначениеЗаполнено(Объект.АнкетаПоставщика) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор_ = Новый Соответствие;
		Отбор_.Вставить("Ссылка", Новый Структура("Значение,ВидСравнения", Объект.Ссылка, "<>"));
		ПредыдущаяАккредитация_ = АккредитацияПоставщиковУХ.ПолучитьДокументыАккредитации(
				"АккредитацияПоставщика", Объект.Организация, Объект.АнкетаПоставщика, Объект.Дата, Отбор_);
		Если ЗначениеЗаполнено(ПредыдущаяАккредитация_) Тогда
			Объект.ПредыдущаяАккредитация = ПредыдущаяАккредитация_;
		Иначе
			Объект.ПредыдущаяАккредитация = Документы.АккредитацияПоставщика.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Объект.ПредыдущаяАккредитация = Документы.АккредитацияПоставщика.ПустаяСсылка();
	КонецЕсли;
	Объект.ЭтоПовторнаяАккредитация = ЗначениеЗаполнено(Объект.ПредыдущаяАккредитация);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКлючевыхРеквизитовНаСервере()
	ЗаполнитьПовторнуюАккредитацию();
	АккредитацияПоставщиковУХ.УстановитьПредставлениеСтатусаАккредитацииНаФорме(
		ЭтаФорма, Объект.Организация, Объект.АнкетаПоставщика, Объект.Дата);
	ЗаполненитьТребованияНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПричинаПереаккредитацииПриИзмененииНаСервере()
	Если Объект.ПричинаПереаккредитации = Перечисления.ПричинаПереаккредитации.ПродлениеСрока Тогда 
		Если ЗначениеЗаполнено(Объект.ПредыдущаяАккредитация) Тогда
			ДлиннаСрокаАккредитации = Объект.ДатаОкончанияСрокаАккредитации - Объект.ДатаНачалаСрокаАккредитации + 1;
			Объект.ДатаНачалаСрокаАккредитации = Объект.ПредыдущаяАккредитация.ДатаОкончанияСрокаАккредитации + 60*60*24;
			Объект.ДатаОкончанияСрокаАккредитации = Объект.ДатаНачалаСрокаАккредитации + ДлиннаСрокаАккредитации;
		КонецЕсли;
	Иначе
		Объект.ДатаНачалаСрокаАккредитации = Объект.ПредыдущаяАккредитация.ДатаНачалаСрокаАккредитации;
		Объект.ДатаОкончанияСрокаАккредитации = Объект.ДатаОкончанияСрокаАккредитации;
	КонецЕсли;
	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТребованияНаСервере()
	ЗаполнитьПовторнуюАккредитацию();
	АккредитацияПоставщиковУХ.УстановитьПредставлениеСтатусаАккредитацииНаФорме(
		ЭтаФорма, Объект.Организация, Объект.АнкетаПоставщика, Объект.Дата);
	ЗаполненитьТребованияНаСервере();
	УстановитьОформлениеФормы();
КонецПроцедуры


#КонецОбласти


#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние,,,ЭтаФорма);
	
КонецФункции

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта() Экспорт
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

#КонецОбласти


#Область ПереопределеноУниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	Если ЭтоВнешнийПользователь Тогда
		СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Объект.Ссылка);
		СтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка);
	Иначе
		ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
