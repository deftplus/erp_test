#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	СтатусДоИзменения = Статус;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПроизводственныхОпераций[НовыйСтатус];
	Статус = ЗначениеНовогоСтатуса;
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(ЭтотОбъект);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Заполняет документ по данным НСИ
//
Процедура ЗаполнитьПоНормативамОперации() Экспорт
	
	ОчиститьТабличныеЧасти();
	
	ВладелецОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция, "Владелец");
	Если ТипЗнч(ВладелецОперации) = Тип("СправочникСсылка.МаршрутныеКарты") Тогда
		ДанныеОперации  = ДанныеОперацииМаршрутнойКарты();
	Иначе
		ДанныеОперации  = ДанныеОперацииСпецификации();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОперации, "ВидОперации, ВариантНаладки, МожноПовторить, МожноПропустить");
	
	Наименование = ДанныеОперации.ОперацияПредставление;
	РассчитатьВремяВыполнения(ДанныеОперации);
	
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(
		Подразделение,
		ВладелецОперации);
	
	Если Настройки.ИспользоватьВыходныеИзделия Тогда
		
		Для каждого Строка Из ДанныеОперации.ВыходныеИзделия Цикл
			ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
		Для каждого Строка Из ДанныеОперации.ВозвратныеОтходы Цикл
			ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Настройки.ИспользоватьМатериалы Тогда
		
		ЗаполнитьМатериалыПоНормативам(ДанныеОперации.Материалы);
		
	КонецЕсли;
	
	Для каждого Строка Из ДанныеОперации.Трудозатраты Цикл
		ЗаполнитьЗначенияСвойств(Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Статус")
			И Статус <> Метаданные.Документы.ПроизводственнаяОперация2_2.Реквизиты.Статус.ЗначениеЗаполнения Тогда
			
			Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(ЭтотОбъект);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СпособЗаполнения")
			И ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоОперации" Тогда
			
			Если ДанныеЗаполнения.Свойство("КлючОперации") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.КлючОперации); // см. УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации
			Иначе
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Этап,Операция,ИдентификаторОперации");
			КонецЕсли;
			
			ЗаполнитьПоНормативамОперации();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Этап = ДанныеЗаполнения;
		
	КонецЕсли;
	
	ОперацияКакРаспоряжениеВыработки = УправлениеПроизводством.ИспользуетсяОперацияКакРаспоряжениеВыработки(Дата);
	
	Если НЕ Этап.Пустая() Тогда
		
		Реквизиты = "Организация" + ?(Подразделение.Пустая(), ",Подразделение", "") + ",ОперацияКакРаспоряжениеВыработки";
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап, Реквизиты));
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		Исполнитель,
		ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение).ИспользоватьБригадныеНаряды);
	
	НаОснованииНСИ = НЕ Операция.Пустая();
	
	Дата = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверитьЗаполнениеРеквизитовШапки(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеНоменклатуры(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеХарактеристик(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеСерий(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеКоличества(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеБригад(Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	
	ДополнительныеСвойства.Вставить("ДанныеДоИзменения", ДанныеОперацииДоИзменения());
	
	// Проверка объекта
	Если Не РежимГрупповойОбработки() Тогда
		
		Если Не Этап.Пустая() Тогда
			
			СтатусЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "Статус");
			
			Если СтатусЭтапа = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя изменять операцию, принадлежащую завершенному этапу.';
						|en = 'You cannot modify an operation belonging to a completed stage.'"),
					ЭтотОбъект,
					"Этап",,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СменноеЗадание.Пустая() Тогда
		
			СтатусЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СменноеЗадание, "Статус");
			
			Если СтатусЗадания = Перечисления.СтатусыСменныхЗаданий.Закрыто Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя изменять операцию, принадлежащую закрытому сменному заданию.';
						|en = 'Cannot change the operation that refers to a closed shift task.'"),
					ЭтотОбъект,
					"СменноеЗадание",,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение реквизитов
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводственнаяОперация2_2);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы);
	
	Если Статус = Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена
		ИЛИ Статус = Перечисления.СтатусыПроизводственныхОпераций.Пропущена Тогда
		
		ВыходныеИзделия.Очистить();
		ВыходныеИзделияСерии.Очистить();
		МатериалыИРаботы.Очистить();
		Трудозатраты.Очистить();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Для каждого Строка Из Трудозатраты Цикл
			Строка.Исполнитель = Исполнитель;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьНомер();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	Если Не РежимГрупповойОбработки()
		И НаОснованииНСИ
		И ИзменилисьДанныеДокумента("Статус,Количество,КоличествоФакт,РабочийЦентр,ВремяВыполнения,ВремяВыполненияЕдИзм,ТребуетПовторения") Тогда
		
		КлючОперации = УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации();
		ЗаполнитьЗначенияСвойств(КлючОперации, ЭтотОбъект);
		
		РегистрыСведений.ОчередьПроизводственныхОпераций.ПересчитатьОчередь(КлючОперации, Отказ);
		
		Если НаОснованииПланирования Тогда
			РегистрыСведений.ПооперационноеРасписание2_2.ПересчитатьКоличественныеРесурсыПоКлючу(КлючОперации, НомерПартии, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РежимГрупповойОбработки() Тогда
		ДобавитьЗаданияКОбработкеЭтаповПроизводства();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Номер = "";
	НомерОперацииЭтапа = 0;
	
	Если НЕ ОбъектКопирования.ДополнительныеСвойства.Свойство("Разбиение") Тогда
		
		Операция = Неопределено;
		ИдентификаторОперации = 0;
		
		НаОснованииПланирования = Ложь;
		НаОснованииНСИ = Ложь;
		
		НомерПартии = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

Функция ДанныеОперацииМаршрутнойКарты()
	
	ДанныеПоНоменклатуре = Справочники.МаршрутныеКарты.ДанныеПоНоменклатуре();
	
	Если ЗначениеЗаполнено(Этап) Тогда
		ОсновноеИзделие = Документы.ЭтапПроизводства2_2.ОсновноеИзделиеЦепочкиЭтапов(Этап);
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ОсновноеИзделие);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Распоряжение                         КАК Распоряжение,
	|	Т.КоэффициентМаршрутнойКарты           КАК КоэффициентМаршрутнойКарты,
	|	Т.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка = &Этап
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка, "Распоряжение,НаправлениеДеятельности");
	
	Результат = Справочники.МаршрутныеКарты.ДанныеОперацииМаршрутнойКарты(
		Операция,
		?(Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена, КоличествоФакт, Количество),
		Выборка.КоэффициентМаршрутнойКарты,
		ДанныеПоНоменклатуре);
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьВремяВыполнения(ДанныеОперации)
	
	СтруктураРасчета = ОперативныйУчетПроизводстваКлиентСервер.СтруктураРасчетаОбщегоВремениВыполнения();
	ЗаполнитьЗначенияСвойств(СтруктураРасчета, ДанныеОперации);
	
	КоэффициентПересчета = Справочники.ТехнологическиеОперации.РассчитатьКоэффициентПересчетаНормативов(
		Операция,
		?(Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена, КоличествоФакт, Количество));
	
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
		СтруктураРасчета,
		КоэффициентПересчета);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРасчета, "ВремяВыполнения, ВремяВыполненияЕдИзм");
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыПоНормативам(Материалы) 
	
	Для каждого Строка Из Материалы Цикл
		ЗаполнитьЗначенияСвойств(МатериалыИРаботы.Добавить(), Строка);
	КонецЦикла;
	
	МатериалыЭтапа = Документы.ЭтапПроизводства2_2.ОстаткиОбеспечиваемыхМатериалов(Этап, "Характеристика");
	МатериалыЭтапа.Индексы.Добавить("Номенклатура, Характеристика");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	КэшированныеЗначения = Неопределено;
	
	Для Индекс = 0 По МатериалыИРаботы.Количество()-1 Цикл
		
		Строка = МатериалыИРаботы[Индекс];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = МатериалыЭтапа.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(Строка);
			
		Иначе
			
			СтрокаМатериалЭтапа = НайденныеСтроки[0];
			
			Если СтрокаМатериалЭтапа.Количество = Строка.Количество Тогда
				
				МатериалыЭтапа.Удалить(СтрокаМатериалЭтапа);
				
			ИначеЕсли СтрокаМатериалЭтапа.Количество > Строка.Количество Тогда
				
				СтрокаМатериалЭтапа.Количество = СтрокаМатериалЭтапа.Количество - Строка.Количество;
				
			Иначе
				
				КоличествоНедостача = Строка.Количество - СтрокаМатериалЭтапа.Количество;
				
				Строка.Количество = СтрокаМатериалЭтапа.Количество;
				ПересчитатьКоличествоУпаковок(Строка, КэшированныеЗначения);
				
				НоваяСтрока = МатериалыИРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = КоличествоНедостача;
				ПересчитатьКоличествоУпаковок(НоваяСтрока, КэшированныеЗначения);
				ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(НоваяСтрока);
				
				МатериалыЭтапа.Удалить(СтрокаМатериалЭтапа);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(Строка)
	
	Строка.НоменклатураМаршрутнойКарты = Строка.Номенклатура;
	Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Строка.ХарактеристикаМаршрутнойКарты = Строка.Характеристика;
	Строка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Строка.УпаковкаМаршрутнойКарты = Строка.Упаковка;
	Строка.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковок(СтрокаТабличнойЧасти, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОчиститьТабличныеЧасти()
	
	МатериалыИРаботы.Очистить();
	ВыходныеИзделия.Очистить();
	ВыходныеИзделияСерии.Очистить();
	Трудозатраты.Очистить();
	
КонецПроцедуры

Функция ДанныеОперацииСпецификации()
	
	Результат = Новый Структура;
	
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	КоличествоОпераций   = ?(Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена, КоличествоФакт, Количество);
	СписокРеквизитов     = "ИмяТЧ,Изделие,ЕстьУпаковки";
	
	ОписаниеТаблиц = Новый Структура;
	ОписаниеТаблиц.Вставить("ВыходныеИзделия",  Новый Структура(СписокРеквизитов, "ВыходныеИзделия",  Истина, Истина));
	ОписаниеТаблиц.Вставить("ВозвратныеОтходы", Новый Структура(СписокРеквизитов, "ВозвратныеОтходы", Истина, Истина));
	ОписаниеТаблиц.Вставить("МатериалыИУслуги", Новый Структура(СписокРеквизитов, "Материалы",        Ложь,   Истина));
	ОписаниеТаблиц.Вставить("Трудозатраты",     Новый Структура(СписокРеквизитов, "Трудозатраты",     Ложь,   Ложь));
	
	Если ЗначениеЗаполнено(Этап) Тогда
		ОсновноеИзделие = Документы.ЭтапПроизводства2_2.ОсновноеИзделиеЦепочкиЭтапов(Этап);
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ОсновноеИзделие);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Этап                                 КАК ЭтапСпецификации,
	|	Т.Распоряжение                         КАК Распоряжение,
	|	Т.Спецификация                         КАК Спецификация,
	|	Т.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка = &Этап
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка, "Спецификация,Распоряжение,НаправлениеДеятельности");
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных();
	ПараметрыВыборки.ПереченьДанных.Добавить("Операции");
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
		ДанныеПоНоменклатуре,
		ПараметрыВыборки,
		Новый Структура("Этап", Выборка.ЭтапСпецификации));
	
	Для каждого КлючИЗначение Из ОписаниеТаблиц Цикл
		Результат.Вставить(КлючИЗначение.Значение.ИмяТЧ, ДанныеСпецификации[КлючИЗначение.Ключ].СкопироватьКолонки());
	КонецЦикла;
	
	НайденныеСтроки = ДанныеСпецификации.Операции.НайтиСтроки(
		Новый Структура("Операция,ИдентификаторОперации", Операция,ИдентификаторОперации));
	Если НайденныеСтроки <> Неопределено Тогда
		
		СтрокаОперация = НайденныеСтроки[0];
		
		Для каждого Колонка Из ДанныеСпецификации.Операции.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаОперация[Колонка.Имя]);
		КонецЦикла;
		
		Для каждого КлючИЗначение Из ОписаниеТаблиц Цикл
			
			ОписаниеТаблицы = КлючИЗначение.Значение;
			Таблица         = Результат[ОписаниеТаблицы.ИмяТЧ]; // ТаблицаЗначений
			
			Для каждого СтрокаНСИ Из ДанныеСпецификации[КлючИЗначение.Ключ] Цикл
				
				Если (СтрокаОперация.Операция = СтрокаНСИ.Операция
							И (ОписаниеТаблицы.Изделие
								ИЛИ СтрокаОперация.ОперацияРодитель = СтрокаНСИ.ОперацияРодитель))
						ИЛИ (ОписаниеТаблицы.Изделие
							И СтрокаОперация.ИсходныйНомерСледующейОперации = 0
							И СтрокаОперация.ОперацияРодитель = СтрокаНСИ.Операция)
						ИЛИ (НЕ ОписаниеТаблицы.Изделие
							И СтрокаОперация.ИсходныйНомерОперации = 1
							И СтрокаОперация.ОперацияРодитель = СтрокаНСИ.Операция) Тогда
								
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНСИ);
					
					КоэффициентТекущейОперации = (КоличествоОпераций / СтрокаОперация.КоличествоНаПартию);
					Если ОписаниеТаблицы.ЕстьУпаковки Тогда
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок * КоэффициентТекущейОперации;
					КонецЕсли;
					НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентТекущейОперации;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Колонка Из ДанныеСпецификации.Операции.Колонки Цикл
			Результат.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(0));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если НЕ (Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполняется
		ИЛИ Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НачалоВыполнения");
		
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеВыполнения");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРабочегоЦентра) Тогда
		
		ИспользуютсяВариантыНаладки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидРабочегоЦентра, "ИспользуютсяВариантыНаладки");
			
	Иначе
			
		ИспользуютсяВариантыНаладки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ИспользуютсяВариантыНаладки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВариантНаладки");
		
	КонецЕсли;
	
	Если НЕ НаОснованииНСИ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Операция");
		
	КонецЕсли;
	
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(Подразделение, Неопределено);
	Если НЕ Настройки.ИспользоватьСменныеЗадания Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СменноеЗадание");
		
	КонецЕсли;
	
	Если НЕ Настройки.ИспользоватьУчастки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Участок");
		
	КонецЕсли;
	
	Если НЕ МожноПропустить
		И Статус = Перечисления.СтатусыПроизводственныхОпераций.Пропущена Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Операция не может быть пропущена';
				|en = 'Operation cannot be skipped'"),
			ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект),
			"Статус",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатуры(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		Возврат; // Стандартная проверка реквизитов
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИРаботы.Номенклатура");
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	ПутьКДанным = "Объект";
	
	ШаблонОшибка = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %НомерСтроки% списка ""Материалы и работы""';
						|en = 'Column ""Items"" in line %НомерСтроки% of the ""Materials and works"" list is not filled in'");
	
	Для Каждого Строка Из МатериалыИРаботы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура)
			И НЕ ЗначениеЗаполнено(Строка.НоменклатураМаршрутнойКарты) Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибка, "%НомерСтроки%", Строка(Строка.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИРаботы", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеХарактеристик(Отказ, МассивНепроверяемыхРеквизитов)
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИРаботы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСерий(Отказ, МассивНепроверяемыхРеквизитов)
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводственнаяОперация2_2);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы, Отказ, МассивНепроверяемыхРеквизитов);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия, Отказ, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличества(Отказ, МассивНепроверяемыхРеквизитов)
	
	УправлениеПроизводством.ПроверитьЗаполнениеКоличестваВТЧ(
		ЭтотОбъект, "МатериалыИРаботы", МассивНепроверяемыхРеквизитов, Отказ);
	
	УправлениеПроизводством.ПроверитьЗаполнениеКоличестваВТЧ(
		ЭтотОбъект, "ВыходныеИзделия", МассивНепроверяемыхРеквизитов, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеБригад(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если Статус <> Перечисления.СтатусыПроизводственныхОпераций.Выполнена
		ИЛИ ЗначениеЗаполнено(Исполнитель) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Исполнитель");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСвязанныхДанных

Функция ДанныеОперацииДоИзменения()
	
	СоставРеквизитов = 
		"Статус,
		|Этап,
		|Проведен,
		|ПометкаУдаления,
		|РабочийЦентр,
		|ВремяВыполнения,
		|ВремяВыполненияЕдИзм,
		|Количество,
		|КоличествоФакт,
		|ТребуетПовторения";
	
	Если НЕ ЭтоНовый() Тогда
		ДанныеДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СоставРеквизитов);
	Иначе
		ДанныеДоИзменения = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(ДанныеДоИзменения, ЭтотОбъект);
	КонецЕсли;
	
	Возврат ДанныеДоИзменения;
	
КонецФункции

Процедура ДобавитьЗаданияКОбработкеЭтаповПроизводства()
	
	ИзменилсяЭтап = ИзменилисьДанныеДокумента("Этап", Ложь);
	БылПроведенИЗавершен = ДополнительныеСвойства.ДанныеДоИзменения.Проведен
		И ДополнительныеСвойства.ДанныеДоИзменения.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена;
	
	Если ИзменилсяЭтап
		И НЕ ДополнительныеСвойства.ДанныеДоИзменения.Этап.Пустая() Тогда
		
		Действия = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
		Действия.ОбновитьСостояние = Истина;
		Если БылПроведенИЗавершен Тогда
			Действия.ЗаполнитьПоОперациям = Истина;
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(
			ДополнительныеСвойства.ДанныеДоИзменения.Этап,
			Действия);
		
	КонецЕсли;
	
	Если НЕ Этап.Пустая() Тогда
		
		Действия = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
		Действия.ОбновитьСостояние = ИзменилисьДанныеДокумента("Этап,Статус,Количество,КоличествоФакт");
		Если (ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).РежимЗаписи = РежимЗаписиДокумента.Проведение
				И Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена)
			ИЛИ (БылПроведенИЗавершен И НЕ ИзменилсяЭтап) Тогда
			
			Действия.ЗаполнитьПоОперациям = Истина;
			
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(Этап, Действия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменилисьДанныеДокумента(СписокРеквизитов, ПроверитьСостояние = Истина)
	
	ДанныеДоИзменения = ДополнительныеСвойства.ДанныеДоИзменения;
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если ПроверитьСостояние Тогда
		Если (ДанныеДоИзменения.Проведен
				И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
			ИЛИ (НЕ ДанныеДоИзменения.Проведен
				И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение)
			ИЛИ ЭтоНовый() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	МассивРеквизитов = СтрРазделить(СписокРеквизитов, ",");
	
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ЭтотОбъект[ИмяРеквизита] <> ДанныеДоИзменения[ИмяРеквизита] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьНомер()
	
	Если НЕ ЗначениеЗаполнено(Этап)
		ИЛИ (ЗначениеЗаполнено(Номер) И ДополнительныеСвойства.ДанныеДоИзменения.Этап = Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПроизводственнаяОперация2_2.НомерОперацииЭтапа) КАК НомерОперацииЭтапа
	|ПОМЕСТИТЬ ВТНомерОперацииЭтапа
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация2_2
	|ГДЕ
	|	ПроизводственнаяОперация2_2.Этап = &Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Номер КАК НомерЭтапа,
	|	ЕСТЬNULL(ВТНомерОперацииЭтапа.НомерОперацииЭтапа, 0) КАК НомерОперацииЭтапа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНомерОперацииЭтапа КАК ВТНомерОперацииЭтапа
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка = &Этап");
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	НомерОперацииЭтапа = Выборка.НомерОперацииЭтапа + 1;
	Номер = "" + Выборка.НомерЭтапа + "." + Формат(НомерОперацииЭтапа, "ЧГ=0");
	
КонецПроцедуры

Процедура УстановитьРежимГрупповойОбработки() Экспорт
	
	ДополнительныеСвойства.Вставить("КлючРежимГрупповойОбработки");
	
КонецПроцедуры

Функция РежимГрупповойОбработки()

	Возврат ДополнительныеСвойства.Свойство("КлючРежимГрупповойОбработки");
	
КонецФункции

Процедура УстановитьКлючВСтрокахТабличныхЧастей(Отказ)
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
		ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
