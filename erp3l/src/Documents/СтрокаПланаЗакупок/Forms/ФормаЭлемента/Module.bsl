
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РеквизитыШаблонаЛота = Справочники.Лоты.ПолучитьРеквизитыШаблонаЛотаВСтруктуре();
	ФлагЗакупкаОтменена = Объект.ЗакупкаОтменена;
	СтруктураОформления = Новый Структура("ЦветФона", WebЦвета.АкварельноСиний);
	ЦентрализованныеЗакупкиВызовСервераУХ.ВыделитьЭлементыФормы(ЭтаФорма, РеквизитыШаблонаЛота, СтруктураОформления);
	ПериодичностьЦентрализованныхЗакупок = ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();
	Если Параметры.Свойство("СтрокаПереходящегоПериода") И ЗначениеЗаполнено(Параметры.СтрокаПереходящегоПериода) Тогда
		ЗаполнитьЗначенияСвойств(Объект,Параметры.СтрокаПереходящегоПериода,,"Номенклатура,ПереченьПоставщиковПредоставившихЦеновыеПредложения,СпособыОбоснованияНМЦ,Финансирование,Номер");
		ЗаполнитьДаннымиСтрокиПереходящегоПериода(Параметры.СтрокаПереходящегоПериода);		
	КонецЕсли;		
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ОбновитьОбработкуВыборПериодаЗакупки();
	ИменаКлючевыхПолей = ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейКроссТаблицыПотребностей();
	ТиповойКонтекстКроссТаблицы = ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
		"ПериодыЗакупок", "ПотребностиВНоменклатуреПоПериодам", "ПотребностиВНоменклатуреПоПериодам", ИменаКлючевыхПолей);
	ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
		ЭтаФорма, "ПараметрыКроссТаблицыПотребностей", ТиповойКонтекстКроссТаблицы);
	Элементы.ПотребностиПоГодамОтображатьРасшифровку.Пометка = Истина;	
	ЗапомнитьСостояниеТолькоПросмотрТаблицыПотребностей(ЭтаФорма);
	ОбновитьАктуальнуюВерсиюСтрокиПлана();
	УстановитьТолькоПросмотрТаблицыПотребностей(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УстановитьОформлениеФормы();
	УстановитьОписаниеДокументаОбоснованиеТребований();
	УстановитьОформлениеДолгосрочныхДоговоров(ЭтаФорма);
	ВыставитьСуммуМалыхЗакупок();
	УстановитьУсловноеОформлениеКоличестваПоГодам();
КонецПроцедуры
	
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОшибкиПользователю = ПроверкаЗаполненияПередЗаписьюНаКлиенте(
			ПараметрыЗаписи.РежимЗаписи);
		Если ОшибкиПользователю <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
				ОшибкиПользователю,
				Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПеренестиДанныеНоменклатуры(ТекущийОбъект.Номенклатура);		
	ЦентрализованныеЗакупкиКлиентСерверУХ.ЗаполнитьСуммуНДСТаблицы(ТекущийОбъект.Номенклатура, ТекущийОбъект.ЦенаВключаетНДС);
	ЗаполнитьЕдиноеМестоПоставкиОбъекта(ТекущийОбъект, ТекущийОбъект.Номенклатура);
	ТекущийОбъект.ЗакупкаОтменена = ФлагЗакупкаОтменена;
	// Проверим совпадение товарной категории в шапке с категорией в табличной части.
	ИспользуетсяТоварнаяКатегория = Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить();
	Если ИспользуетсяТоварнаяКатегория Тогда
		ТоварнаяКатегорияОбъекта = ТекущийОбъект.ТоварнаяКатегория;
		НоменклатураОбъекта = ТекущийОбъект.Номенклатура;
		РезультатПроверки = ЦентрализованныеЗакупкиУХ.ПроверитьТоварныеКатегорииВТаблице(ТоварнаяКатегорияОбъекта, НоменклатураОбъекта, "Номенклатура");
		Если Не РезультатПроверки Тогда
			Отказ = Истина;
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
	Иначе
		// Не используем товарные категории.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьАктуальнуюВерсиюСтрокиПлана();
	УстановитьСостояниеДокумента();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	#Область УниверсальныеПроцессыСогласование
	Если ИмяСобытия = "ОбъектСогласован"
				ИЛИ ИмяСобытия = "ОбъектОтклонен"
				ИЛИ ИмяСобытия = "МаршрутИнициализирован"
				ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	#КонецОбласти
	Если ИмяСобытия = "Запись_Файл" И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		Объект.ПрикрепленныйФайлОбоснованияНМЦ = Источник[0];
		ЭтотОбъект.Модифицированность = Истина;
	Иначеесли ИмяСобытия = "ЗаписанДокументОбоснованиеТребований" И Параметр.Основание = Объект.Ссылка Тогда
		
		Если Параметр.ПометкаУдаления Тогда
			ДокументОбоснованиеТребований = ПредопределенноеЗначение("Документ.ОбоснованиеТребованийКЗакупочнойПроцедуре.ПустаяСсылка");
		Иначе
			ДокументОбоснованиеТребований = Параметр.Ссылка;
		КонецЕсли;
		НадписьОбоснованиеТребований = ПолучитьТекстНадписиОбоснованияТребований(ДокументОбоснованиеТребований);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РассчитатьИтогиПотребностиПоСтрокам();
	ПриИзмененииФинансирования();
	УстановитьПолеЭтоКатегорияНоменклатуры();
	ЗаблокироватьКоличествоДляТоварныхКатегорий();
КонецПроцедуры

#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы   
&НаКлиенте
Процедура УстановитьКурсНаДатуПриИзменении(Элемент)
	Если УстановитьКурсНаДату Тогда
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КурсВалютыПриИзменении(Элемент)
	УстановитьКурсНаДату =  КурсНаДату(Объект) =  Объект.КурсВалюты;
	Если УстановитьКурсНаДату Тогда
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект);
	Иначе	
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КурсНаДату(Объект)
	ВалютаОбъекта = Объект.ВалютаДокумента;
	ДатаКурсаОбъекта = Объект.ДатаКурса;
	// Сумма текущего года.
	КурсИСумма = ЦентрализованныеЗакупкиВызовСервераУХ.ПересчитатьСуммуВВалютуРеглУчетаНаДату(
		ВалютаОбъекта, ДатаКурсаОбъекта, Объект.СуммаДокумента);
	Возврат КурсИСумма.Курс;
КонецФункции

&НаКлиенте
Процедура ДатаКурсаПриИзменении(Элемент)
	Если УстановитьКурсНаДату Тогда
	РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьОбоснованиеТребованийЗакупочнойПроцедурыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ДокументОбоснованиеТребований.Пустая() Тогда
		// Создаем новый
		Если Объект.Ссылка.Пустая() ИЛИ Модифицированность = Истина Тогда
			// Документ не записан
			ПоказатьПредупреждение(, НСтр("ru = 'Документ должен быть записан. Запишите документ и повторите операцию.'"));
			Возврат
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ОбоснованиеТребованийКЗакупочнойПроцедуре.ФормаОбъекта", ПараметрыФормы);

	Иначе
		// Открываем его
		ПараметрыФормы = Новый Структура("Ключ", ДокументОбоснованиеТребований);
		ОткрытьФорму("Документ.ОбоснованиеТребованийКЗакупочнойПроцедуре.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнеПлановойПотребностиПриИзменении(Элемент)
	Если Объект.ВнеПлановойПотребности = Ложь И ПотребностиВНоменклатуреПоПериодам.Количество() Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВнеПлановойПотребностиПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.ЗапретитьАвтоматическоеИзменениеДокумента = Истина;
		ВнеПлановойПотребностиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗакупокПриИзменении(Элемент)
	ПериодЗакупокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияДляЗаключенияДоговораПриИзменении(Элемент)
	ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере();
	ОбработатьМалыеЗакупки();
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриРасчетеДолиЗакупокУСМППриИзменении(Элемент)
	УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыбораПоставщикаПриИзменении(Элемент)
	СпособВыбораПоставщикаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаяЗакупкаПриИзменении(Элемент)
	Если Объект.ЗакрытаяЗакупка Тогда
		Объект.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223 = Истина;
		Объект.НеРазмещаетсяНаЕИС = Истина;
	КонецЕсли;
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	ВалютаДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДату(Команда)
	Если УстановитьКурсНаДату Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаКурса) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не указана дата курса'");
			Сообщение.Поле = "ДатаКурса";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект);
	Иначе	
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурса(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаКурса) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не указана дата курса'");
		Сообщение.Поле = "ДатаКурса";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект);
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(Объект, НСтр("ru = 'Введите УИД'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСтрокуПотребности(Команда)
	Элементы.ПотребностиВНоменклатуреПоПериодам.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредствПриИзменении(Элемент)
	ИнновационныйПланЗакупокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборПотребностей(Команда)
	ОткрытьФормуПодбораПотребностейПоПериодам();
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьНовыйФайлОбоснованиеНМЦ(Команда)
	
	ОткрытьСоздатьНовыйФайл("ПрикрепленныйФайлОбоснованияНМЦ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныйФайлОбоснованияНМЦПриИзменении(Элемент)
	УстановитьОформлениеОбоснованияНМЦ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныйФайлОбоснованияНМЦОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСоздатьНовыйФайл("ПрикрепленныйФайлОбоснованияНМЦ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныйФайлОбоснованияНМЦСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьНовыйПрикрепленныйФайл(Объект.Ссылка.Пустая(),Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамЦенаПервоначальнаяПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
	ПересчетОтносительногоОтклоненияЦен(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиноеМестоПоставкиПриИзменении(Элемент)
	Если Объект.ЕдиноеМестоПоставки Тогда
		ОшибкиПользователю = Неопределено;
		флКорректноЗаполнены = КорректноЗаполненыМестаПоставкиДокумента(
			Объект, ПотребностиПоГодам, "ПотребностиПоГодам", ОшибкиПользователю);
		Если НЕ флКорректноЗаполнены Тогда
			Объект.ЕдиноеМестоПоставки = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЕдиноеМестоПоставкиОбъекта(Объект, ПотребностиПоГодам);
	УстановитьВидимостьМестаПоставкиВШапке(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма, 
		"ПотребностиВНоменклатуреПоПериодам");
	ОбновитьСуммуДокументаИзКроссТаблицы();
	ЗаполнитьЕдиноеМестоПоставкиОбъекта(
		Объект, 
		ПотребностиВНоменклатуреПоПериодам);
	УстановитьОформлениеОбоснованияНМЦ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОценкаНМЦЗавершенаПриИзменении(Элемент)
	Если Объект.ОценкаНМЦЗавершена
			И НЕ ЗначениеЗаполнено(Объект.ПрикрепленныйФайлОбоснованияНМЦ) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен документ ""Обоснование требований к закупочной процедуре""'");
		Сообщение.ПутьКДанным = "Объект.ПрикрепленныйФайлОбоснованияНМЦ";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОфициальногоОбъявленияЗакупкиПриИзменении(Элемент)
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	ИменаКлючевыхПолей = ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы;
	// Добавление реквизитов.
	РазместитьКолонкиПотребностиПоГодам(МассивГоды);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияДоговораПриИзменении(Элемент)
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	ИменаКлючевыхПолей = ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы;
	// Добавление реквизитов.
	РазместитьКолонкиПотребностиПоГодам(МассивГоды);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПериодыФинансирования(Команда)
	ЗаполнитьПериодыФинансирования_Сервер();
	ПриИзмененииФинансирования();
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуФинансирования(Команда)
	РаспределитьСуммуФинансирования_Сервер();
	ПриИзмененииФинансирования();
КонецПроцедуры

&НаКлиенте
Процедура ФинансированиеПриИзменении(Элемент)
	ПриИзмененииФинансирования();
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамСуммаПриИзменении_Подключаемый(Элемент) Экспорт
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяЭлемента = Элемент.Имя;
		Если ТипЗнч(СоответствиеРеквизитовПериодам) = Тип("ФиксированноеСоответствие") Тогда
			НайденныйЭлемент = СоответствиеРеквизитовПериодам.Получить(ИмяЭлемента);
			Если НайденныйЭлемент <> Неопределено Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", ТекДанные.Номенклатура);
				СтруктураОтбора.Вставить("Год", НайденныйЭлемент);
				ГодСтрока = Формат(НайденныйЭлемент, "ЧГ=0");
				ИмяКолонки = "Год" + ГодСтрока + "Сумма";
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекДанные, ИмяКолонки) Тогда
					СуммаКРаспределению = ТекДанные[ИмяКолонки];
					РаспределитьРасшифровкуСуммыПропорционально(СтруктураОтбора, СуммаКРаспределению);
					ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
					ДатаИсполнения = Объект.ДатаИсполненияДоговора;
					ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, ТекДанные);
				Иначе
					ТекстСообщения = НСтр("ru = 'Колонка ""%ИмяКолонки%"" не найдена. Распределение пропущено.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКолонки%", Строка(ИмяКолонки));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Элемент не найден. Пропускаем.
			КонецЕсли;
		Иначе
			// Неизвестный вариант соответствия. Пропускаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ПотребностиПоГодамСуммаПриИзменении_Подключаемый()

&НаКлиенте
Процедура ОрганизаторЗакупкиПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПриИзмененииЦеныВСтроке(ТекДанные);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамСтавкаНДСПриИзменении(Элемент)
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	Если ТекДанные <> Неопределено Тогда
		ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, ТекДанные);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПриАктивизацииЯчейки(Элемент)
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	СтруктураОтбора = Новый Структура;
	Если (ТекДанные <> Неопределено) И (Элемент.ТекущийЭлемент <> Неопределено) Тогда
		ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
		Если ТипЗнч(СоответствиеРеквизитовПериодам) = Тип("ФиксированноеСоответствие") Тогда
			СтруктураОтбора.Вставить("ИдентификаторСтроки", ТекДанные.ИдентификаторСтроки); 
			НайденноеЗначение = СоответствиеРеквизитовПериодам.Получить(ИмяЭлемента);
			Если НайденноеЗначение <> Неопределено Тогда
				СтруктураОтбора.Вставить("Год", НайденноеЗначение);         		     	
				НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = РасшифровкаПотребностей.Добавить();
					НоваяСтрока.Год = НайденноеЗначение;
					НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
				Иначе
					// Строка уже существует. Не добавляем.
				КонецЕсли;
			ИначеЕсли СоответствиеРеквизитовПериодам.Количество()>0 Тогда
				Для Каждого Соответствие из  СоответствиеРеквизитовПериодам Цикл
					СтруктураОтбора.Вставить("Год", Соответствие.Значение);         		     	
					НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрока = РасшифровкаПотребностей.Добавить();
						НоваяСтрока.Год = Соответствие.Значение;
						НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
					Иначе
						// Строка уже существует. Не добавляем.
					КонецЕсли;
					Прервать;
				КонецЦикла;	
			Иначе
				СтруктураОтбора.Вставить("Год", -1);
			КонецЕсли;
		Иначе
			СтруктураОтбора.Вставить("Год", -1);
		КонецЕсли; 
	Иначе
		СтруктураОтбора.Вставить("Год", -1);
		СтруктураОтбора.Вставить("ИдентификаторСтроки", "");
	КонецЕсли;
	Элементы.РасшифровкаПотребностей.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Добавление подчинённой строки.
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			НовыйИдентификатор = Строка(Новый УникальныйИдентификатор);
			ТекДанные.ИдентификаторСтроки = НовыйИдентификатор;
			НоваяСтрока = РасшифровкаПотребностей.Добавить();
			НоваяСтрока.ИдентификаторСтроки = НовыйИдентификатор;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Не требуется добавление.
	КонецЕсли;
	// Очистка сумма и количества текущей строки при копировании.
	Если Копирование Тогда
		ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.Сумма			 = 0;
			ТекДанные.Количество	 = 0;
			ТекДанные.СуммаНДС		 = 0;
			ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
			ДатаИсполнения = Объект.ДатаИсполненияДоговора;
			МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
			Для Каждого ТекМассивГоды Из МассивГоды Цикл
				ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
				ИмяКолонки = "Год" + ГодСтрока + "Количество";
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекДанные, ИмяКолонки) Тогда
					ТекДанные[ИмяКолонки] = 0;
				Иначе
					// Нет такой колонки. Пропускаем.
				КонецЕсли;
				ИмяКолонки = "Год" + ГодСтрока + "Сумма";
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекДанные, ИмяКолонки) Тогда
					ТекДанные[ИмяКолонки] = 0;
				Иначе
					// Нет такой колонки. Пропускаем.
				КонецЕсли;
			КонецЦикла;	
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
		РассчитатьИтогГодаКоличество();
	Иначе
		// Не обнуляем, т.к. не копирование.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборКолонок_Завершение(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ТипЗнч(ЗначениеВыбора) = Тип("СписокЗначений") Тогда
		Для Каждого ТекЗначениеВыбора Из ЗначениеВыбора Цикл
			ТекИмяКолонки = ТекЗначениеВыбора.Значение;
			ТекПометка = ТекЗначениеВыбора.Пометка;
			Если ТекИмяКолонки = "ТребуетсяОбоснованиеНМЦ" Тогда
				Элементы.ПотребностиПоГодамТребуетсяОбоснованиеНМЦ.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Номенклатура" Тогда
				Элементы.ПотребностиПоГодамНоменклатура.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Характеристика" Тогда
				Элементы.ПотребностиПоГодамХарактеристика.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Цена" Тогда
				Элементы.ПотребностиПоГодамЦена.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "ЦенаПервоначальная" Тогда
				Элементы.ПотребностиПоГодамЦенаПервоначальная.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "ОтклонениеОтносительное" Тогда
				Элементы.ПотребностиПоГодамОтклонениеОтносительное.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Организация" Тогда
				Элементы.ПотребностиПоГодамОрганизация.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "МестоПоставки" Тогда
				Элементы.ПотребностиПоГодамМестоПоставки.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Менеджер" Тогда
				Элементы.ПотребностиПоГодамМенеджер.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "ДоговорСПокупателем" Тогда
				Элементы.ПотребностиПоГодамДоговорСПокупателем.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "СтавкаНДС" Тогда
				Элементы.ПотребностиПоГодамСтавкаНДС.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "СуммаНДС" Тогда
				Элементы.ПотребностиПоГодамСуммаНДС.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Количество" Тогда
				Элементы.ПотребностиПоГодамКоличество.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "ЕдиницаИзмерения" Тогда
				Элементы.ПотребностиПоГодамЕдиницаИзмерения.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Коэффициент" Тогда
				Элементы.ПотребностиПоГодамКоэффициент.Видимость = ТекПометка;
			ИначеЕсли ТекИмяКолонки = "Проект" Тогда
				Элементы.ПотребностиПоГодамПроект.Видимость = ТекПометка;
			Иначе
				// Неизвестная колонка. Пропускаем.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКолонкиПотребности(Команда)
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("ТребуетсяОбоснованиеНМЦ",	 НСтр("ru = 'Требуется обоснование НМЦ'"),	 Элементы.ПотребностиПоГодамТребуетсяОбоснованиеНМЦ.Видимость);
	СписокКолонок.Добавить("Номенклатура",				 НСтр("ru = 'Номенклатура'"),				 Элементы.ПотребностиПоГодамНоменклатура.Видимость);
	СписокКолонок.Добавить("Характеристика",			 НСтр("ru = 'Характеристика'"),				 Элементы.ПотребностиПоГодамХарактеристика.Видимость);
	СписокКолонок.Добавить("Цена",						 НСтр("ru = 'Цена'"),						 Элементы.ПотребностиПоГодамЦена.Видимость);
	СписокКолонок.Добавить("ЦенаПервоначальная",		 НСтр("ru = 'Цена первоначальная'"),		 Элементы.ПотребностиПоГодамЦенаПервоначальная.Видимость);
	СписокКолонок.Добавить("ОтклонениеОтносительное",	 НСтр("ru = 'Отклонение относительное'"),	 Элементы.ПотребностиПоГодамОтклонениеОтносительное.Видимость);
	СписокКолонок.Добавить("Организация",				 НСтр("ru = 'Организация'"),				 Элементы.ПотребностиПоГодамОрганизация.Видимость);
	СписокКолонок.Добавить("МестоПоставки",				 НСтр("ru = 'Место поставки'"),				 Элементы.ПотребностиПоГодамМестоПоставки.Видимость);
	СписокКолонок.Добавить("Менеджер",					 НСтр("ru = 'Менеджер'"),					 Элементы.ПотребностиПоГодамМенеджер.Видимость);
	СписокКолонок.Добавить("ДоговорСПокупателем",		 НСтр("ru = 'Договор с покупателем'"),		 Элементы.ПотребностиПоГодамДоговорСПокупателем.Видимость);
	СписокКолонок.Добавить("СтавкаНДС",					 НСтр("ru = 'Ставка НДС'"),					 Элементы.ПотребностиПоГодамСтавкаНДС.Видимость);
	СписокКолонок.Добавить("СуммаНДС",					 НСтр("ru = 'Сумма НДС'"),					 Элементы.ПотребностиПоГодамСуммаНДС.Видимость);
	СписокКолонок.Добавить("Количество",				 НСтр("ru = 'Количество'"),					 Элементы.ПотребностиПоГодамКоличество.Видимость);
	СписокКолонок.Добавить("ЕдиницаИзмерения",			 НСтр("ru = 'Единица измерения'"),			 Элементы.ПотребностиПоГодамЕдиницаИзмерения.Видимость);
	СписокКолонок.Добавить("Коэффициент",				 НСтр("ru = 'Коэффициент'"),				 Элементы.ПотребностиПоГодамКоэффициент.Видимость);
	СписокКолонок.Добавить("Проект",					 НСтр("ru = 'Проект'"),						 Элементы.ПотребностиПоГодамПроект.Видимость);
	СтруктураПараметров = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВыборКолонок_Завершение", ЭтотОбъект, СтруктураПараметров);
	СписокКолонок.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите колонки'"));
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьРасшифровку(Команда)
	Элементы.ПотребностиПоГодамОтображатьРасшифровку.Пометка = НЕ Элементы.ПотребностиПоГодамОтображатьРасшифровку.Пометка;
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейЯнварьКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейФевральКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейМартКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейАпрельКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейМайКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейИюньКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейИюльКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейАвгустКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейСентябрьКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте     
Процедура РасшифровкаПотребностейОктябрьКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейНоябрьКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейДекабрьКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейПервыйКварталКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейВторойКварталКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейТретийКварталКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейЧетвертыйКварталКоличествоПриИзменении(Элемент)
	РассчитатьИтогГодаКоличество();
	РассчитатьСуммыРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура НеВключенВПланЗакупкиЧасть15Ст4ФЗ223ПриИзменении(Элемент)
	Если Объект.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223 Тогда
		Объект.НеРазмещаетсяНаЕИС = Истина;
	Иначе
		// Не изменяем сумму малых закупок.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПриАктивизацииСтроки(Элемент)
	ЗаблокироватьКоличествоДляТоварныхКатегорий();
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Объект.ВнеПлановойПотребности Тогда
		ТекстСообщения = НСтр("ru = 'Запрещено добавлять дополнительные строки в режиме ввода по плановой потребности. Для ввода строк установите флаг Вне плановой потребности. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
	Иначе
		// Разрешаем ввод.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейЯнварьСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейФевральСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейМартСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейАпрельСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейМайСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейИюньСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейИюльСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейАвгустСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейСентябрьСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейОктябрьСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейНоябрьСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейДекабрьСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейПервыйКварталСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейВторойКварталСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейТретийКварталСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПотребностейЧетвертыйКварталСуммаПриИзменении(Элемент)
	РассчитатьИтогГодаСумма();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеИзменениеТоварнойКатегории_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПотребностиПоГодам.Очистить();
		НоваяТоварнаяКатегория = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ТоварнаяКатегория", ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка"));
		Объект.ТоварнаяКатегория = НоваяТоварнаяКатегория;
		Модифицированность = Истина;
    Иначе
		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоварнойКатегории_Завершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		Если ПотребностиПоГодам.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварнаяКатегория", ЗначениеВыбора.Значение);
			ТекстВопроса = НСтр("ru = 'Данные в табличной части потребности будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеИзменениеТоварнойКатегории_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			Объект.ТоварнаяКатегория = ЗначениеВыбора.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		// Ничего не выбрано.
	КонецЕсли;	
КонецПроцедуры		// ВыборТоварнойКатегории_Завершение()

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекПользователь = ПользователиКлиент.ТекущийПользователь();
	МассивКатегорий = ПолучитьМассивКатегорий(ТекПользователь, Объект.ОрганизацияДляЗаключенияДоговора);
	Если МассивКатегорий.Количество() > 0 Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивКатегорий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТоварнойКатегории_Завершение", ЭтаФорма);
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных товарных категорий по оргазации ""%Организация%"" для текущего пользователя. Уточните матрицу категорийных менеджеров.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Объект.ОрганизацияДляЗаключенияДоговора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТоварнуюКатегорию(Команда)
	МассивНоменклатура = Новый Массив;
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
		МассивНоменклатура.Добавить(ТекПотребностиПоГодам.Номенклатура);
	КонецЦикла;
	МассивНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНоменклатура);
	МассивНоменклатура = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивНоменклатура);
	НоваяТоварнаяКатегория = ЦентрализованныеЗакупкиВызовСервераУХ.ВернутьТоварнуюКатегорию(МассивНоменклатура);
	Объект.ТоварнаяКатегория = НоваяТоварнаяКатегория;
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетУчастияМалогоИСреднегоПредпринимательстваПриИзменении(Элемент)
	ПриИзмененииЗакупкиУМсп();
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетУчастияМалогоИСреднегоПредпринимательства1ПриИзменении(Элемент)
	ПриИзмененииЗакупкиУМсп();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыбораПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Ограничим список для организаций, не ведущих учёт по 223ФЗ.
	Если НЕ флПроводитсяВСоответствииСФЗ223 Тогда
		СтандартнаяОбработка = Ложь;
		ДоступныеДляВыбора = НеФз223ДоступныеДляВыбора();
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ДоступныеДляВыбора);
	Иначе
		// Отображаем полный список.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Автоматическое выставление флага Не выгружать на ЕИС.
	Если ТекущаяСтраница = Элементы.ГруппаЕИС Тогда
		ОбработатьМалыеЗакупки();
	Иначе
		// Ативирована другая закладка.
	КонецЕсли;
	АктивированаСтраницаПотребности = (ТекущаяСтраница = Элементы.ГруппаПотребности);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПослеУдаления(Элемент)
	ОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиВШапке(Команда)
	ОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура СтатистическаяИнформацияОбоснования(Команда)
	МассивНоменклатуры = ПолучитьМассивНоменклатурыОбоснование();
	СтруктураПараметров = Новый Структура;
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Номенклатура", МассивНоменклатуры);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбор);
	СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.СтатистическаяИнформацияПоЗакупкамНоменклатуры.ФормаОбъекта", СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ФлагЗакупкаОтмененаПриИзменении(Элемент)
	Модифицированность = Истина;
	УстановитьОформлениеФормы();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте

// Рассчитывает значение поля СуммаКонтрактаВВалютеРегламентированногоУчета по текущей
// сумме контракта.
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммаКонтрактаРегл(Объект)
	ВалютаОбъекта = Объект.ВалютаДокумента;
	ДатаКурсаОбъекта = Объект.ДатаКурса;
	КурсИСумма = ЦентрализованныеЗакупкиВызовСервераУХ.ПересчитатьСуммуВВалютуРеглУчетаНаДату(
		ВалютаОбъекта, ДатаКурсаОбъекта, Объект.СуммаКонтракта);
	Объект.СуммаКонтрактаВВалютеРегламентированногоУчета = КурсИСумма.СуммаВРублях;
КонецПроцедуры		// РассчитатьСуммаКонтрактаРегл()

&НаКлиенте
Процедура ОткрытьФормуПодбораПотребностейПоПериодам()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Инновационный",						Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	ПараметрыФормы.Вставить("ПериодНачала",							ВыборПериодаЗакупки.ПериодНачала);
	ПараметрыФормы.Вставить("ПериодОкончания",						ВыборПериодаЗакупки.ПериодОкончания);
	ПараметрыФормы.Вставить("ОрганизацияДляЗаключенияДоговора",		Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыФормы.Вставить("МестоПоставки",						Объект.МестоПоставки);
	ПараметрыФормы.Вставить("ФиксироватьМестоПоставки",				Объект.ЕдиноеМестоПоставки);
	ПараметрыФормы.Вставить("ДатаСреза",							Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",								Объект.ВалютаДокумента);	
	Если флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		ПараметрыФормы.Вставить("ТоварнаяКатегория",				Объект.ТоварнаяКатегория);
	Иначе
		// Не используем товарные категории.
	КонецЕсли;
	СтрокаФормы = "Обработка.ПодборПотребностейИзПлана.Форма";
	ОткрытьФорму(СтрокаФормы, ПараметрыФормы, Элементы.ПотребностиПоГодам, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВнеПлановойПотребностиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Номенклатура.Очистить();
		ПотребностиПоГодам.Очистить();
	Иначе
		Объект.ВнеПлановойПотребности = Истина;
	КонецЕсли;
	УстановитьТолькоПросмотрТаблицыПотребностей(ЭтаФорма);
	УстановитьОформлениеДляВнеПлановойПотребности(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУсловияОплатыПоУсловиюОплаты()
	Если ЗначениеЗаполнено(Объект.УсловиеОплаты) Тогда
		Объект.УсловияОплаты = Строка(Объект.УсловиеОплаты);
	Иначе
		Объект.УсловияОплаты = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтверждениеЗаполненияУсловий(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьУсловияОплатыПоУсловиюОплаты();
КонецПроцедуры

// Проверяет заполнение значение ЗначениеВход. В случае незаполненного записывает в
// МассивОшибокИзм текст ошибки ТекстОшибкиВход для поля ПолеВход.
&НаКлиенте
Процедура ПроверитьОшибкуЗаполнения(ЗначениеВход, ПолеВход, ТекстОшибкиВход, МассивОшибокИзм)
	Если НЕ ЗначениеЗаполнено(ЗначениеВход) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			МассивОшибокИзм, ПолеВход, ТекстОшибкиВход, Неопределено);
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
КонецПроцедуры		// ПроверитьОшибкуЗаполнения()

// Проверяем целостность с точки зрения пользовательской логики.
// Клиентский вариант.
//
// Возвращает:
//	- тип из функции
//		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю().
//	- Неопределено - то ошибок нет.
//	- Иначе занчение можно передать в функцию
//			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю().
//
&НаКлиенте
Функция ПроверкаЗаполненияПередЗаписьюНаКлиенте(РежимЗаписи)
	ОшибкиПользователю = Неопределено;
	Если Объект.НеУчитыватьПриРасчетеДолиЗакупокУСМП
			И НЕ ЗначениеЗаполнено(Объект.КатегорияЗакупкиДляИсключенияИзГОЗ) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю,
			"Объект.КатегорияЗакупкиДляИсключенияИзГОЗ",
			НСтр("ru = 'Укажите категорию закупки для исключения из годового объема'"),
			Неопределено);
	КонецЕсли;
	Если флПроводитсяВСоответствииСФЗ223
			И РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ПустаяСтрока(Объект.ПорядокФормированияЦеныДоговора) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю,
			"Объект.ПорядокФормированияЦеныДоговора",
			НСтр("ru = 'Необходимо указать проядок формирования цены договора'"),
			Неопределено);
	КонецЕсли;
	КорректноЗаполненыМестаПоставкиДокумента(Объект, ПотребностиПоГодам, "ПотребностиПоГодам", ОшибкиПользователю);
	ЦентрализованныеЗакупкиКлиентСерверУХ.ХарактеристикиЗаполненыКорректно(
		ПотребностиПоГодам,	"Элементы.ПотребностиПоГодам", "Характеристика", "ХарактеристикиИспользуются", ОшибкиПользователю);
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
		ПроверитьОшибкуЗаполнения(ТекПотребностиПоГодам.Организация, "Объект.Номенклатура", 
			НСтр("ru = 'Необходимо указать организацию в таблице Потребности. Запись отменена.'"), ОшибкиПользователю);
		ПроверитьОшибкуЗаполнения(ТекПотребностиПоГодам.Приоритет, "Объект.Номенклатура", 
			НСтр("ru = 'Необходимо указать приоритет в таблице Потребности. Запись отменена.'"), ОшибкиПользователю);
		ПроверитьОшибкуЗаполнения(ТекПотребностиПоГодам.Сумма, "Объект.Номенклатура", 
			НСтр("ru = 'В таблице Потребности не указана итоговая сумма. Запись отменена.'"), ОшибкиПользователю);	
	КонецЦикла;		
	Возврат ОшибкиПользователю;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПотребностей(АдресТаблицыПотребности, ФормаВыбора) Экспорт
	Если ТипЗнч(АдресТаблицыПотребности) = Тип("Строка") Тогда
		РезультатОбработкиВыбора = ОбработкаВыбораПотребностейНаСервере(АдресТаблицыПотребности, "ВыбранныеПотребностиВНоменклатуре");
		ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
		ДатаИсполнения = Объект.ДатаИсполненияДоговора;
		Если РезультатОбработкиВыбора Тогда
			Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
				ТекНоменкдатура = ТекПотребностиПоГодам.Номенклатура;
				Если ТипЗнч(ТекНоменкдатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ПриИзмененииЦеныВСтроке(ТекПотребностиПоГодам);	
					СтруктураДополнительныхПараметров = СформироватьДополнительныеДанныеПоНоменклатуре();
					ДанныеНоменклатуры = ПолучитьДанныеПоНоменклатуре(ТекНоменкдатура, СтруктураДополнительныхПараметров);
					УстановитьТребуетсяОбоснованиеНМЦ(ДанныеНоменклатуры, ТекПотребностиПоГодам);
				ИначеЕсли ТипЗнч(ТекНоменкдатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда	
					ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, ТекПотребностиПоГодам);
					ОбновитьСуммуДокументаИзКроссТаблицы();
				Иначе
					// Неизвестный вариант. Не запускаем пересчёт.
				КонецЕсли;
			КонецЦикла;	
			Модифицированность = Истина;
			// Закрываем если нет ошибок, т.к. ошибки отображаются в форме выбора.
			Оповестить("ЗакрытьПодчиненнуюФорму", "ПодборПотребностейИзПлана", ЭтаФорма);
		Иначе
			// Не удалось обработать. Не выполяем постобработку на клиенте.
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный варинт таблицы расшифровки: %АдресТаблицы%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АдресТаблицы%", Строка(АдресТаблицыПотребности));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПервоначальнойЦеныПриИзмененииЦены(СтрокаПотребности)
	СтруктураДополнительныхПараметров = СформироватьДополнительныеДанныеПоНоменклатуре();
	ДанныеНоменклатуры = ПолучитьДанныеПоНоменклатуре(СтрокаПотребности.Номенклатура, СтруктураДополнительныхПараметров);
	ЦенаИзначальная = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "Цена", 0);
	Если СтрокаПотребности.ЦенаПервоначальная = 0 ИЛИ ЦенаИзначальная = 0 Тогда
		СтрокаПотребности.ЦенаПервоначальная = СтрокаПотребности.Цена;
	КонецЕсли;
	ПересчетОтносительногоОтклоненияЦен(СтрокаПотребности);
КонецПроцедуры

// Обновляет текст подвала таблицы Финансирование.
&НаКлиенте
Процедура РассчитатьПодвалФинансирование()
	// Подвал Сумма.
	ИтогСумма = Объект.Финансирование.Итог("Сумма");
	Элементы.ФинансированиеСумма.ТекстПодвала = Строка(ИтогСумма);
	// Подвал Сумма СМП.
	ИтогСуммаСМП = Объект.Финансирование.Итог("СуммаСМП");
	Элементы.ФинансированиеСуммаСМП.ТекстПодвала = Строка(ИтогСуммаСМП);	
КонецПроцедуры		// РассчитатьПодвалФинансирование()

// Рассчитывает значения полей ФинансированиеКРаспределению и 
// ФинансированиеОстаток на форме.
&НаКлиенте
Процедура РассчитатьФинансированиеКРаспределению()
	ФинансированиеКРаспределению = ПотребностиПоГодам.Итог("Сумма");
	ИтогФинансирование = Объект.Финансирование.Итог("Сумма");
	ФинансированиеОстаток = ФинансированиеКРаспределению - ИтогФинансирование;
КонецПроцедуры		// РассчитатьФинансированиеКРаспределению()

// Вызывается при явном и неявном изменении табличной части Финансирование.
&НаКлиенте
Процедура ПриИзмененииФинансирования()
	РассчитатьПодвалФинансирование();
	РассчитатьФинансированиеКРаспределению();
КонецПроцедуры		// ПриИзмененииФинансирования()

&НаКлиенте
Процедура УчестьПереходящийОстаток(Команда)
	УчестПереходящийОстатокНаСервере();
	Для Каждого Строка ИЗ ПотребностиПоГодам Цикл
		РассчитатьИтогГодаКоличество(Строка.ИдентификаторСтроки,Год(ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ПериодЗакупок,"ДатаНачала")),Истина);
		РассчитатьСуммыРасшифровки(Строка.ИдентификаторСтроки,Год(ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ПериодЗакупок,"ДатаНачала")));
	КонецЦикла;	
КонецПроцедуры

// Рассчитывает поле Количество по расшифровке для выбранного года 
// в таблице Потребности по годам. Когда параметры ИдентификаторСтрокиВход
// и ГодВход заданы, вместо выбранной строки расшифровки будет использована
// найдненная по указанным параметрам.
&НаКлиенте
Процедура РассчитатьИтогГодаКоличество(ИдентификаторСтрокиВход = Неопределено, ГодВход = Неопределено, ПересчитывытьСуммы = Истина)
	ТекДанные = ВернутьАктивнуюСтрокуРасшифровки(ИдентификаторСтрокиВход, ГодВход);
	// Непосредственный рассчёт итога по выбраной строке.
	Если ТекДанные <> Неопределено Тогда
		// Подсчёт итога по количеству.
		ГодСтрока = Формат(ТекДанные.Год, "ЧГ=0");
		ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
		ДатаИсполнения = Объект.ДатаИсполненияДоговора;
		Итог = 0;
		Если ПериодичностьЦентрализованныхЗакупок = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			Итог = Итог + ТекДанные.ЯнварьКоличество;
			Итог = Итог + ТекДанные.ФевральКоличество;
			Итог = Итог + ТекДанные.МартКоличество;
			Итог = Итог + ТекДанные.АпрельКоличество;
			Итог = Итог + ТекДанные.МайКоличество;
			Итог = Итог + ТекДанные.ИюньКоличество;
			Итог = Итог + ТекДанные.ИюльКоличество;
			Итог = Итог + ТекДанные.АвгустКоличество;
			Итог = Итог + ТекДанные.СентябрьКоличество;
			Итог = Итог + ТекДанные.ОктябрьКоличество;
			Итог = Итог + ТекДанные.НоябрьКоличество;
			Итог = Итог + ТекДанные.ДекабрьКоличество;
		ИначеЕсли ПериодичностьЦентрализованныхЗакупок = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			Итог = Итог + ТекДанные.ПервыйКварталКоличество;
			Итог = Итог + ТекДанные.ВторойКварталКоличество;
			Итог = Итог + ТекДанные.ТретийКварталКоличество;
			Итог = Итог + ТекДанные.ЧетвертыйКварталКоличество;
		Иначе
			Итог = 0;
		КонецЕсли;
		// Установка рассчитанного значения.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", ТекДанные.ИдентификаторСтроки);
		НайденныеСтроки = ПотребностиПоГодам.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			// Выставление значения в поле Количество.
			ИмяПоля = "Год" + ГодСтрока + "Количество";
			ТекНайденныеСтроки[ИмяПоля] = Итог;
			// Постобработка.
			РассчитатьСуммуПоГодамПоКоличеству(Итог, ТекДанные.Год, ТекНайденныеСтроки);
			Если ПересчитывытьСуммы Тогда
				ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, ТекНайденныеСтроки);
			Иначе
				// Не требуется пересчёт.
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// РассчитатьИтогГодаКоличество()

// Рассчитывает поле Сумма по расшифровке для выбранного года 
// в таблице Потребности по годам. Когда параметры ИдентификаторСтрокиВход
// и ГодВход заданы, вместо выбранной строки расшифровки будет использована
// найдненная по указанным параметрам.
&НаКлиенте
Процедура РассчитатьИтогГодаСумма(ИдентификаторСтрокиВход = Неопределено, ГодВход = Неопределено, ПересчитывытьСуммы = Истина)
	ТекДанные = ВернутьАктивнуюСтрокуРасшифровки(ИдентификаторСтрокиВход, ГодВход);
	// Непосредственный рассчёт итога по выбраной строке.
	Если ТекДанные <> Неопределено Тогда
		// Подсчёт итога по количеству.
		ГодСтрока = Формат(ТекДанные.Год, "ЧГ=0");
		ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
		ДатаИсполнения = Объект.ДатаИсполненияДоговора;
		Итог = 0;
		Если ПериодичностьЦентрализованныхЗакупок = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			Итог = Итог + ТекДанные.ЯнварьСумма;
			Итог = Итог + ТекДанные.ФевральСумма;
			Итог = Итог + ТекДанные.МартСумма;
			Итог = Итог + ТекДанные.АпрельСумма;
			Итог = Итог + ТекДанные.МайСумма;
			Итог = Итог + ТекДанные.ИюньСумма;
			Итог = Итог + ТекДанные.ИюльСумма;
			Итог = Итог + ТекДанные.АвгустСумма;
			Итог = Итог + ТекДанные.СентябрьСумма;
			Итог = Итог + ТекДанные.ОктябрьСумма;
			Итог = Итог + ТекДанные.НоябрьСумма;
			Итог = Итог + ТекДанные.ДекабрьСумма;
		ИначеЕсли ПериодичностьЦентрализованныхЗакупок = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			Итог = Итог + ТекДанные.ПервыйКварталСумма;
			Итог = Итог + ТекДанные.ВторойКварталСумма;
			Итог = Итог + ТекДанные.ТретийКварталСумма;
			Итог = Итог + ТекДанные.ЧетвертыйКварталСумма;
		Иначе
			Итог = 0;
		КонецЕсли;
		// Установка рассчитанного значения.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", ТекДанные.ИдентификаторСтроки);
		НайденныеСтроки = ПотребностиПоГодам.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			// Выставление значения в поле Количество.
			ИмяПоля = "Год" + ГодСтрока + "Сумма";
			ТекНайденныеСтроки[ИмяПоля] = Итог;
			// Постобработка.
			ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, ТекНайденныеСтроки, ПересчитывытьСуммы);
		КонецЦикла;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// РассчитатьИтогГодаКоличество()

// Когда заданы параметры ИдентификаторСтрокиВход и ГодВход, возвращает строку
// таблицы расшифровки, определяемую этими параметрами. Иначе возвращает текущую 
// строку. Если определить строку не удалось - возвращает неопределено.
&НаКлиенте
Функция ВернутьАктивнуюСтрокуРасшифровки(ИдентификаторСтрокиВход = Неопределено, ГодВход = Неопределено)
	РезультатФункции = Неопределено;
	Если (ЗначениеЗаполнено(ИдентификаторСтрокиВход)) И (ЗначениеЗаполнено(ГодВход)) Тогда
		// Строка задана отбором. Найдём её и будем использовать её.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиВход);
		СтруктураПоиска.Вставить("Год", ГодВход);
		НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			РезультатФункции = ТекНайденныеСтроки;
		КонецЦикла;	
	Иначе
		// Отборы не заданы. Используем текущую строку.
		РезультатФункции = Элементы.РасшифровкаПотребностей.ТекущиеДанные;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ВернутьАктивнуюСтрокуРасшифровки()

// Рассчитывает поля суммы в таблице расшифровки. Когда параметры
// ИдентификаторСтрокиВход и ГодВход заданы, используется
// строка по данному отбору, иначе - текущая строка.
&НаКлиенте
Процедура РассчитатьСуммыРасшифровки(ИдентификаторСтрокиВход = Неопределено, ГодВход = Неопределено)
	ТекДанные = ВернутьАктивнуюСтрокуРасшифровки(ИдентификаторСтрокиВход, ГодВход);
	Если ТекДанные <> Неопределено Тогда
		ТекИдентификатор = ТекДанные.ИдентификаторСтроки;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", ТекИдентификатор);
		НайденныеСтроки = ПотребностиПоГодам.НайтиСтроки(СтруктураПоиска);
		НайденнаяЦена = 0;
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			НайденнаяЦена = ТекНайденныеСтроки.Цена;
		КонецЦикла;
		ТекДанные.ЯнварьСумма	 = ТекДанные.ЯнварьКоличество * НайденнаяЦена;
		ТекДанные.ФевральСумма	 = ТекДанные.ФевральКоличество * НайденнаяЦена;
		ТекДанные.МартСумма		 = ТекДанные.МартКоличество * НайденнаяЦена;
		ТекДанные.АпрельСумма	 = ТекДанные.АпрельКоличество * НайденнаяЦена;
		ТекДанные.МайСумма		 = ТекДанные.МайКоличество * НайденнаяЦена;
		ТекДанные.ИюньСумма		 = ТекДанные.ИюньКоличество * НайденнаяЦена;
		ТекДанные.ИюльСумма		 = ТекДанные.ИюльКоличество * НайденнаяЦена;
		ТекДанные.АвгустСумма	 = ТекДанные.АвгустКоличество * НайденнаяЦена;
		ТекДанные.СентябрьСумма	 = ТекДанные.СентябрьКоличество * НайденнаяЦена;
		ТекДанные.ОктябрьСумма	 = ТекДанные.ОктябрьКоличество * НайденнаяЦена;
		ТекДанные.НоябрьСумма	 = ТекДанные.НоябрьКоличество * НайденнаяЦена;
		ТекДанные.ДекабрьСумма	 = ТекДанные.ДекабрьКоличество * НайденнаяЦена;
		ТекДанные.ПервыйКварталСумма	 = ТекДанные.ПервыйКварталКоличество * НайденнаяЦена;
		ТекДанные.ВторойКварталСумма	 = ТекДанные.ВторойКварталКоличество * НайденнаяЦена;
		ТекДанные.ТретийКварталСумма	 = ТекДанные.ТретийКварталКоличество * НайденнаяЦена;
		ТекДанные.ЧетвертыйКварталСумма	 = ТекДанные.ЧетвертыйКварталКоличество * НайденнаяЦена;
	Иначе
		// Строка не выбрана. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// РассчитатьСуммыРасшифровки()

// В строке потребности СтрокаИзм вычисляет сумму для количества КоличествоВход
// в периоде ГодВход.
&НаКлиенте
Процедура РассчитатьСуммуПоГодамПоКоличеству(КоличествоВход, ГодВход, СтрокаИзм)
	Если ТипЗнч(СтрокаИзм.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ГодСтрока = Формат(ГодВход, "ЧГ=0");
		ТекЦена = СтрокаИзм.Цена;
		СуммаБазовая = КоличествоВход * ТекЦена;
		ИмяКолонкиСумма = "Год" + ГодСтрока + "Сумма";
		СтрокаИзм[ИмяКолонкиСумма] = СуммаБазовая;
		Если НЕ Объект.ЦенаВключаетНДС Тогда 
			ТекСтавкаНдсЧисло = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(СтрокаИзм.СтавкаНДС);
			ТекСуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СуммаБазовая, Ложь, ТекСтавкаНдсЧисло);
			СтрокаИзм[ИмяКолонкиСумма] = СуммаБазовая + ТекСуммаНДС;
		КонецЕсли;
	Иначе
		// Не требуется рассчёт для прочих вариантов.
	КонецЕсли;
КонецПроцедуры		// РассчитатьСуммуПоГодамПоКоличеству()

// Выполняет расределение количества в строке СтрокаПотребностиИзм в колонке с именем 
//ИмяКолонкиКоличество по структуре СтруктураОтбораВход.
&НаКлиенте
Процедура ВыполнитьРаспределениеПоКоличеству(СтруктураОтбораВход, ИмяКолонкиКоличество, СтрокаПотребностиИзм)
	// Инициализация.
	Год	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтбораВход, "Год", -1);
	ДатаОбъявления	 = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения	 = Объект.ДатаИсполненияДоговора;
	ЦенаВключаетНДС	 = Объект.ЦенаВключаетНДС;
	// Получение значения количества.
	КоличествоПотребность = СтрокаПотребностиИзм[ИмяКолонкиКоличество]; 
	// Распределение по расшифровке.
	РаспределитьРасшифровкуКоличествоПропорционально(СтруктураОтбораВход, КоличествоПотребность);
	// Расчет суммы.
	РассчитатьСуммуПоГодамПоКоличеству(КоличествоПотребность, Год, СтрокаПотребностиИзм);
	ПриИзмененииКоличестваСуммыСтроки(ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, СтрокаПотребностиИзм);
КонецПроцедуры		// ВыполнитьРаспределениеПоКоличеству()

&НаКлиенте
Процедура ПодтверждениеПерезаписьРаспределение_Завершение(Результат, ДополнительныеПараметры) Экспорт
	// Получение параметров.
	ИмяКолонкиКоличество	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИмяКолонкиКоличество", -1);
	ТекДанные				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ТекДанные", Неопределено);
	СтруктураОтбора			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "СтруктураОтбора", Новый Структура);
	Если ТекДанные <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			// Пользователь согласился. Выполним распределение.
			ВыполнитьРаспределениеПоКоличеству(СтруктураОтбора, ИмяКолонкиКоличество, ТекДанные); 
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			// Пользователь отказался. Вернём итоговые суммы.
			Год = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтбора, "Год", -1);
			ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
			РассчитатьИтогГодаКоличество(ИдентификаторСтроки, Год);
		Иначе
			// В противном случае вернём исходные значения.
			Год = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтбора, "Год", -1);
			ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
			РассчитатьИтогГодаКоличество(ИдентификаторСтроки, Год);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Строка не выбрана. Распределение количества невозможно.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ПодтверждениеПерезаписьРаспределение_Завершение()

// Определяет, есть ли в строке расшифровки с идентифкатором ИдентификаторСтрокиВход
// данные по году ГодВход.
&НаКлиенте
Функция ЕстьДанныеВРасшифровке(ИдентификаторСтрокиВход, ГодВход)
	РезультатФункции = Ложь;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиВход);
	СтруктураПоиска.Вставить("Год", ГодВход);
	НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураПоиска);
	ИтогКоличество = 0;
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ЯнварьКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ФевральКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.МартКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.АпрельКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.МайКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ИюньКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ИюльКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.АвгустКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.СентябрьКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ОктябрьКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.НоябрьКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ДекабрьКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ПервыйКварталКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ВторойКварталКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ТретийКварталКоличество;
		ИтогКоличество = ИтогКоличество + ТекНайденныеСтроки.ЧетвертыйКварталКоличество;
	КонецЦикла;	
	РезультатФункции = (ИтогКоличество <> 0);
	Возврат РезультатФункции;
КонецФункции		// ЕстьДанныеВРасшифровке()

&НаКлиенте
Процедура ПотребностиПоГодамКоличествоПриИзменении_Подключаемый(Элемент) Экспорт
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
		ДатаИсполнения = Объект.ДатаИсполненияДоговора;
		ИмяЭлемента = Элемент.Имя;
		Если ТипЗнч(СоответствиеРеквизитовПериодам) = Тип("ФиксированноеСоответствие") Тогда
			НайденныйГод = СоответствиеРеквизитовПериодам.Получить(ИмяЭлемента);
			Если НайденныйГод <> Неопределено Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Год", НайденныйГод);
				СтруктураОтбора.Вставить("ИдентификаторСтроки", ТекДанные.ИдентификаторСтроки);
				ГодСтрока = Формат(НайденныйГод, "ЧГ=0");
				ИмяКолонкиКоличество = "Год" + ГодСтрока + "Количество";
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекДанные, ИмяКолонкиКоличество) Тогда
					Если ЕстьДанныеВРасшифровке(ТекДанные.ИдентификаторСтроки, НайденныйГод) Тогда
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("ТекДанные", ТекДанные);
						СтруктураПараметров.Вставить("СтруктураОтбора", СтруктураОтбора);
						СтруктураПараметров.Вставить("ИмяКолонкиКоличество", ИмяКолонкиКоличество);
						ТекстВопроса = НСтр("ru = 'Перезаписать существующие данные по расшифровке?'");
						Режим = РежимДиалогаВопрос.ДаНет;
						Оповещение = Новый ОписаниеОповещения("ПодтверждениеПерезаписьРаспределение_Завершение", ЭтаФорма, СтруктураПараметров);
						ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
					Иначе
						ВыполнитьРаспределениеПоКоличеству(СтруктураОтбора, ИмяКолонкиКоличество, ТекДанные); 
					КонецЕсли;
				Иначе
					// Колонка не найдена. Пропускаем.
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не найдено сопоставление периодов для элемента %Элемент%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ИмяЭлемента));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант соответствия периодов: %Соответствие%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Соответствие%", Строка(СоответствиеРеквизитовПериодам));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ПотребностиПоГодамСуммаПриИзменении_Подключаемый()

// Вызывается при явном и нявном изменении цены в строке таблицы по годам СтрокаВход.
&НаКлиенте
Процедура ПриИзмененииЦеныВСтроке(СтрокаВход)
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	Для Каждого ТекМассивГоды Из МассивГоды Цикл
		ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
		ИмяКолонки = "Год" + ГодСтрока + "Количество";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаВход, ИмяКолонки) Тогда
			ТекКоличество = СтрокаВход[ИмяКолонки];
			РассчитатьСуммуПоГодамПоКоличеству(ТекКоличество, ТекМассивГоды, СтрокаВход);
		Иначе
			// Нет такой колонки. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, СтрокаВход);
	РассчитатьСуммыРасшифровки(СтрокаВход.ИдентификаторСтроки, ТекМассивГоды);
	ЗаполнениеПервоначальнойЦеныПриИзмененииЦены(СтрокаВход);
КонецПроцедуры		// ПриИзмененииЦеныВСтроке()

// Обнуляет поле Количество в строке потребности с идентификатором ИдентификаторСтрокиВход
// и её расшифровке.
&НаКлиенте
Процедура ОбнулитьКоличествоВСтроке(ИдентификаторСтрокиВход)
	// Инициализация.
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	// Обход таблицы потребностей по годам.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиВход);
	НайденныеСтрокиПоГодам = ПотребностиПоГодам.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтрокиПоГодам Из НайденныеСтрокиПоГодам Цикл
		Для Каждого ТекМассивГоды Из МассивГоды Цикл
			ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
			ИмяКолонки = "Год" + ГодСтрока + "Количество";
			ТекНайденныеСтрокиПоГодам[ИмяКолонки] = 0;
		КонецЦикла;
	КонецЦикла;	
	// Обход расшифровки.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиВход);
	НайденныеСтрокиРасшифровка = РасшифровкаПотребностей.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтрокиРасшифровка Из НайденныеСтрокиРасшифровка Цикл
		ТекНайденныеСтрокиРасшифровка.ЯнварьКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.ФевральКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.МартКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.АпрельКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.МайКоличество					 = 0;
		ТекНайденныеСтрокиРасшифровка.ИюньКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.ИюльКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.АвгустКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.СентябрьКоличество			 = 0;
		ТекНайденныеСтрокиРасшифровка.ОктябрьКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.НоябрьКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.ДекабрьКоличество				 = 0;
		ТекНайденныеСтрокиРасшифровка.ПервыйКварталКоличество		 = 0;
		ТекНайденныеСтрокиРасшифровка.ВторойКварталКоличество		 = 0;
		ТекНайденныеСтрокиРасшифровка.ТретийКварталКоличество		 = 0;
		ТекНайденныеСтрокиРасшифровка.ЧетвертыйКварталКоличество	 = 0;
	КонецЦикла;	
КонецПроцедуры		// ОбнулитьКоличествоВСтроке()

// Проверяет, совпадает ли товарная категория в строке расшифровки СтрокаТаблицыВход
// с товарной категорией в шапке. При необходимости актуализирует данные в расшифровке.
&НаКлиенте
Процедура ПроверитьТоварнуюКатегориюВСтроке(СтрокаТаблицыВход)
	Если флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		Если ТипЗнч(СтрокаТаблицыВход.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			КатегорияШапки = Объект.ТоварнаяКатегория;
			Если ЗначениеЗаполнено(КатегорияШапки) Тогда
				ТекстСообщения = НСтр("ru = 'На закладке ""Основные сведения"" выбрана товарная категория ""%ТоварнаяКатегория%"". Значение заменено.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварнаяКатегория%", Строка(КатегорияШапки));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);					
				СтрокаТаблицыВход.Номенклатура = КатегорияШапки;
			Иначе
				// Товарная категория не выбрана. Ограничение не требуется.
			КонецЕсли;
		Иначе
			// Это номенклатура. Ограничение не требуется.
		КонецЕсли;
	Иначе
		// Не вкллючено использование товарных категорий.
	КонецЕсли;
КонецПроцедуры		// ПроверитьТоварнуюКатегориюВСтроке()

// Устанавливает в строке СтрокаТаблицыВход таблицы расшифровки флаг 
// Требуется обоснование НМЦ, используя структуру дополнительных данных
// номенклатуры ДанныеНоменклатурыВход.
&НаКлиенте
Процедура УстановитьТребуетсяОбоснованиеНМЦ(ДанныеНоменклатурыВход, СтрокаТаблицыИзм)		
	НовыйТоварнаяКатегория	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатурыВход, "ТоварнаяКатегория", ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка"));
	НовыйКодОКПД2			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатурыВход, "КодОКПД2", "");
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПериодЗакупки",		 Объект.ПериодЗакупок);
	СтруктураДанных.Вставить("ОрганизацияЗаказчик",	 Объект.ОрганизацияДляЗаключенияДоговора);
	СтруктураДанных.Вставить("Организация",			 Объект.ОрганизаторЗакупки);
	СтруктураДанных.Вставить("Номенклатура",		 СтрокаТаблицыИзм.Номенклатура);
	СтруктураДанных.Вставить("Характеристика",		 СтрокаТаблицыИзм.Характеристика);
	СтруктураДанных.Вставить("ТоварнаяКатегория",	 НовыйТоварнаяКатегория);		
	СтруктураДанных.Вставить("ОКПД2",				 НовыйКодОКПД2);		
	СтруктураДанных.Вставить("МестоПоставки",		 СтрокаТаблицыИзм.МестоПоставки);
	СтруктураДанных.Вставить("Приоритет",			 СтрокаТаблицыИзм.Приоритет);
	СтруктураДанных.Вставить("Проект",				 СтрокаТаблицыИзм.Проект);
	СтруктураДанных.Вставить("Менеджер",			 СтрокаТаблицыИзм.Менеджер);
	СтруктураДанных.Вставить("Назначение",			 СтрокаТаблицыИзм.ДоговорСПокупателем);
	СтруктураРезультат = ДанныеСтрокиСОсобымПорядкомЗакупки(СтруктураДанных);
	СтрокаТаблицыИзм.ТребуетсяОбоснованиеНМЦ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРезультат, "ТребуетсяОбоснование", Ложь);
КонецПроцедуры		// УстановитьТребуетсяОбоснованиеНМЦ()		

// Возвращает структуру, содержащую данные для определения данных по номенклатуре.
&НаКлиенте
Функция СформироватьДополнительныеДанныеПоНоменклатуре()		
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДатаКурса",			 Объект.ДатаКурса);
	РезультатФункции.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
	РезультатФункции.Вставить("ПериодЗакупок",		 Объект.ПериодЗакупок);
	Возврат РезультатФункции;
КонецФункции		 // СтруктураДополнительныхПараметров()		

&НаКлиенте
Процедура УстановитьПолеЭтоКатегорияНоменклатуры()
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
		ЭтоКатегорияНоменклатуры = (ТипЗнч(ТекПотребностиПоГодам.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории"));
		ТекПотребностиПоГодам.ЭтоКатегорияНоменклатуры = ЭтоКатегорияНоменклатуры;
	КонецЦикла;	
КонецПроцедуры		// УстановитьПолеЭтоКатегорияНоменклатуры()

&НаКлиенте
Процедура ПотребностиПоГодамНоменклатураПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
		ПустаяЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
		ПустаяСтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
		ЭтоКатегорияНоменклатуры = (ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории"));
		// Заполнение реквизитов строки таблицы.
		СтрокаТаблицы.ЭтоКатегорияНоменклатуры = ЭтоКатегорияНоменклатуры;
		СтруктураДополнительныхПараметров = СформироватьДополнительныеДанныеПоНоменклатуре();
		ДанныеНоменклатуры = ПолучитьДанныеПоНоменклатуре(СтрокаТаблицы.Номенклатура, СтруктураДополнительныхПараметров);
		Если ЭтоКатегорияНоменклатуры Тогда
			// Подменяем товарную категорию из шапки.
			ПроверитьТоварнуюКатегориюВСтроке(СтрокаТаблицы);
			// Категория. Обнулим дополнительно цены и количество.
			НовыйКоэффициент	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "Коэффициент", 1);
			НоваяЕдиница		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "ЕдиницаИзмерения", ПустаяЕдиницаИзмерения);
			НоваяСтавкаНДС		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "СтавкаНДС", ПустаяСтавкаНДС);
			СтрокаТаблицы.Коэффициент					 = НовыйКоэффициент;
			СтрокаТаблицы.ЕдиницаИзмерения				 = НоваяЕдиница;
			СтрокаТаблицы.СтавкаНДС						 = НоваяСтавкаНДС;
			СтрокаТаблицы.Цена							 = 0;
			СтрокаТаблицы.ЦенаПервоначальная			 = 0;
			СтрокаТаблицы.ОтклонениеОтносительное		 = 0;
			СтрокаТаблицы.Характеристика				 = Неопределено;
			СтрокаТаблицы.ХарактеристикиИспользуются	 = Ложь;
			ОбнулитьКоличествоВСтроке(СтрокаТаблицы.ИдентификаторСтроки);
			ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
			ДатаИсполнения = Объект.ДатаИсполненияДоговора;
			ПриИзмененииКоличестваСуммыСтроки(Объект.ЦенаВключаетНДС, ДатаОбъявления, ДатаИсполнения, СтрокаТаблицы);
		Иначе
			// Номенклатура. Дополнительных действий не требуется.
			СтрокаТаблицы.Характеристика				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "Характеристика", Неопределено);
			СтрокаТаблицы.ХарактеристикиИспользуются	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "ХарактеристикиИспользуются", Ложь);
			СтрокаТаблицы.Коэффициент					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "Коэффициент", 1);
			СтрокаТаблицы.ЕдиницаИзмерения				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "ЕдиницаИзмерения", ПустаяЕдиницаИзмерения);
			СтрокаТаблицы.Цена							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "Цена", 0);
			СтрокаТаблицы.ЦенаПервоначальная			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "Цена", 0);
			СтрокаТаблицы.ОтклонениеОтносительное		 = 0;
			СтрокаТаблицы.СтавкаНДС						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "СтавкаНДС", ПустаяСтавкаНДС);
			ПриИзмененииЦеныВСтроке(СтрокаТаблицы);
		КонецЕсли;
		// Получим и заполним значение настройки ТребуетсяОбоснованиеНМЦ.
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			УстановитьТребуетсяОбоснованиеНМЦ(ДанныеНоменклатуры, СтрокаТаблицы);
			ЗаблокироватьКоличествоДляТоварныхКатегорий();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПриАктивизации()
	Элемент = Элементы.ПотребностиПоГодам;
	ТекЭлемент = Элементы.ПотребностиПоГодам.Текущийэлемент;
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	СтруктураОтбора = Новый Структура;
	Если (ТекДанные <> Неопределено) И (Элемент.ТекущийЭлемент <> Неопределено) Тогда
		ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
		Если ТипЗнч(СоответствиеРеквизитовПериодам) = Тип("ФиксированноеСоответствие") Тогда
			СтруктураОтбора.Вставить("ИдентификаторСтроки", ТекДанные.ИдентификаторСтроки); 
			НайденноеЗначение = СоответствиеРеквизитовПериодам.Получить(ИмяЭлемента);
			Если НайденноеЗначение <> Неопределено Тогда
				СтруктураОтбора.Вставить("Год", НайденноеЗначение);         		     	
				НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = РасшифровкаПотребностей.Добавить();
					НоваяСтрока.Год = НайденноеЗначение;
					НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
				Иначе
					// Строка уже существует. Не добавляем.
				КонецЕсли;
			ИначеЕсли СоответствиеРеквизитовПериодам.Количество()>0 Тогда
				Для Каждого Соответствие из  СоответствиеРеквизитовПериодам Цикл
					СтруктураОтбора.Вставить("Год", Соответствие.Значение);         		     	
					НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрока = РасшифровкаПотребностей.Добавить();
						НоваяСтрока.Год = Соответствие.Значение;
						НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
					Иначе
						// Строка уже существует. Не добавляем.
					КонецЕсли;
					Прервать;
				КонецЦикла;	
			Иначе	
				СтруктураОтбора.Вставить("Год", -1);
			КонецЕсли;
		Иначе
			СтруктураОтбора.Вставить("Год", -1);
		КонецЕсли; 
	Иначе
		СтруктураОтбора.Вставить("Год", -1);
		СтруктураОтбора.Вставить("ИдентификаторСтроки", "");
	КонецЕсли;
	Если СтруктураОтбора.Год <> -1 Тогда
		Элементы.РасшифровкаПотребностей.Заголовок = "Расшифровка потребностей за " + СтрЗаменить(Строка(СтруктураОтбора.Год ), " ", "") + " год";
	Иначе
		Элементы.РасшифровкаПотребностей.Заголовок = "";
	КонецЕсли;
	Элементы.РасшифровкаПотребностей.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	ОтключитьОбработчикОжидания("ПотребностиПоГодамПриАктивизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораПотребностей(ВыбранноеЗначение, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПоГодамПриИзменении(Элемент)
	УстановитьОформлениеОбоснованияНМЦ(ЭтаФорма);
	РассчитатьФинансированиеКРаспределению();	
КонецПроцедуры

// Удаляет из таблицы РасшифровкаПотребностей строки с идентификатором ИдентификаторСтрокиВход. 
&НаСервере
Процедура ОчиститьРасшифровкуПоИдентификатору(ИдентификаторСтрокиВход)
	Выгрузка = РасшифровкаПотребностей.Выгрузить();
	НоваяТаблица = Выгрузка.СкопироватьКолонки();
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		Если ТекВыгрузка.ИдентификаторСтроки <> ИдентификаторСтрокиВход Тогда
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыгрузка);
		Иначе
			// Пропускаем строку.
		КонецЕсли;
	КонецЦикла;	
	РасшифровкаПотребностей.Загрузить(НоваяТаблица);
КонецПроцедуры		// ОчиститьРасшифровкуПоИдентификатору()

&НаКлиенте
Процедура ПотребностиПоГодамПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		ОчиститьРасшифровкуПоИдентификатору(ТекИдентификаторСтроки);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Вычисляет итог суммы и количества по годам по всем строкам.
&НаКлиенте
Процедура РассчитатьИтогиПотребностиПоСтрокам()
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивЛет = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
		ИтогКоличество = 0;
		ИтогСумма = 0;
		Для Каждого ТекМассивЛет Из МассивЛет Цикл
			ИмяПоляКоличество = "Год" + Формат(ТекМассивЛет, "ЧГ=0") + "Количество";
			ИмяПоляСумма = "Год" + Формат(ТекМассивЛет, "ЧГ=0") + "Сумма";
			ИтогКоличество = ИтогКоличество + ТекПотребностиПоГодам[ИмяПоляКоличество];
			ИтогСумма = ИтогСумма + ТекПотребностиПоГодам[ИмяПоляСумма];
		КонецЦикла;
		ТекПотребностиПоГодам.Сумма = ИтогСумма;
		ТекПотребностиПоГодам.Количество = ИтогКоличество;
		ЦентрализованныеЗакупкиКлиентСерверУХ.РасчитатьНДССтроки(Объект.ЦенаВключаетНДС, ТекПотребностиПоГодам);
	КонецЦикла	
КонецПроцедуры		// РассчитатьИтогиПотребностиПоСтрокам()

// Блокирует элементы полей количества для изменения, когда в текущей 
// строке выбрана товарная категория.
&НаКлиенте
Процедура ЗаблокироватьКоличествоДляТоварныхКатегорий()
	// Инициализация.
	ТекДанные = Элементы.ПотребностиПоГодам.ТекущиеДанные;
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	ТекстПодсказкиНеЗаполняется = НСтр("ru = '<не заполняется>'");
	Если ТекДанные <> Неопределено Тогда 
		// Добавление в массив элементов количества.
		МассивЭлементовКоличество = Новый Массив;
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейЯнварьКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейФевральКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейМартКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейАпрельКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейМайКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейИюньКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейИюльКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейАвгустКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейСентябрьКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейОктябрьКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейНоябрьКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейДекабрьКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейПервыйКварталКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейВторойКварталКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейТретийКварталКоличество);
		МассивЭлементовКоличество.Добавить(Элементы.РасшифровкаПотребностейЧетвертыйКварталКоличество);
		МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
		Для Каждого ТекМассивГоды Из МассивГоды Цикл
			ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
			ИмяКолонки = "ПотребностиПоГодамГод" + ГодСтрока + "Количество";
			Если Элементы.Найти(ИмяКолонки) <> Неопределено Тогда
				МассивЭлементовКоличество.Добавить(Элементы[ИмяКолонки]);
			Иначе
				// Элемент не найден.
			КонецЕсли;
		КонецЦикла;
		// Добавление в массив элементов суммы.
		МассивЭлементовСумма = Новый Массив;
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейЯнварьСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейФевральСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейМартСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейАпрельСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейМайСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейИюньСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейИюльСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейАвгустСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейСентябрьСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейОктябрьСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейНоябрьСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейДекабрьСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейПервыйКварталСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейВторойКварталСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейТретийКварталСумма);
		МассивЭлементовСумма.Добавить(Элементы.РасшифровкаПотребностейЧетвертыйКварталСумма);
		МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
		Для Каждого ТекМассивГоды Из МассивГоды Цикл
			ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
			ИмяКолонки = "ПотребностиПоГодамГод" + ГодСтрока + "Сумма";
			Если Элементы.Найти(ИмяКолонки) <> Неопределено Тогда
				МассивЭлементовСумма.Добавить(Элементы[ИмяКолонки]);
			Иначе
				// Элемент не найден.
			КонецЕсли;
		КонецЦикла;	
		// Определение товарных категорий.
		ТекНоменклатура = ТекДанные.Номенклатура;
		ЭтоТоварнаяКатегория = (ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.ТоварныеКатегории"));
		ЭтоЗакупкаВнеПотребности = Объект.ВнеПлановойПотребности;
		// Обработка массива количества.
		Для Каждого ТекМассивЭлементовКоличество Из МассивЭлементовКоличество Цикл
			ТекМассивЭлементовКоличество.ТолькоПросмотр = (ЭтоТоварнаяКатегория) ИЛИ (НЕ ЭтоЗакупкаВнеПотребности);
		КонецЦикла;
		// Обработка массива суммы.
		Для Каждого ТекМассивЭлементовСумма Из МассивЭлементовСумма Цикл
			ТекМассивЭлементовСумма.ТолькоПросмотр = (НЕ ЭтоТоварнаяКатегория) ИЛИ (НЕ ЭтоЗакупкаВнеПотребности);
		КонецЦикла;	
		Элементы.ПотребностиПоГодамЦена.ТолькоПросмотр = ЭтоТоварнаяКатегория;		// Цена доступна вне зависимости от способа добавления.
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ЗаблокироватьКоличествоДляТоварныхКатегорий()

// Вызывается при изменении флага Закупка только у субъектов МСП. 
&НаКлиенте
Процедура ПриИзмененииЗакупкиУМсп()
	// Проверим, что при включенном флаге закупки у МСП, выбран способ закупки у МСП.
	СпособЗакупкиОбъекта = Объект.СпособВыбораПоставщика;
	ФлагЗакупкиУМсп = Объект.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
	СпособЗакупкиУМсп = ЭтоЗакупкаУМсп(СпособЗакупкиОбъекта);
	Если (ФлагЗакупкиУМсп) Тогда
		Если (НЕ СпособЗакупкиУМсп) Тогда
			ТекстСообщения = НСтр("ru = 'Для способа закупки ""%СпособЗакупки%"" невозможно участие субъектов МСП. Выберите электронный способ закупки у МСП.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособЗакупки%", Строка(СпособЗакупкиОбъекта));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Объект.ПриоритетУчастияМалогоИСреднегоПредпринимательства = Ложь;
		Иначе
			// Установим длительность контракта.
			ПредполагаемаяДата = ДобавитьМесяц(Объект.ДатаОфициальногоОбъявленияЗакупки, 36);
			Если ПредполагаемаяДата > Объект.ДатаИсполненияДоговора Тогда
				Объект.ДатаИсполненияДоговора = ПредполагаемаяДата;
				ТекстСообщения = НСтр("ru = 'По закупкам у МСП минимальный срок закупки составляет 3 года. Дата исполнения договора изменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
	УстановитьОформлениеФормы();
КонецПроцедуры		// ПриИзмененииЗакупкиУМсп()

// Автоматически выставляет флаг Не выгружать на ЕИС, если сумма закупок меньше малых закупок.
&НаКлиенте
Процедура ОбработатьМалыеЗакупки()
	СуммаДокументаМеньшеМалыхЗакупок = (Объект.СуммаКонтракта < СуммаМалыхЗакупок);
	Если (СуммаДокументаМеньшеМалыхЗакупок) И (Объект.СуммаКонтракта > 0) И (НЕ Объект.НеРазмещаетсяНаЕИС) Тогда
		//Объект.НеРазмещаетсяНаЕИС = Истина;
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Сумма документа %СуммаДокумента% меньше суммы малых закупок %СуммаМалыхЗакупок% для организации ""%Организация%"". Рекомендуется установить флаг ""Не выгружать на ЕИС""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаДокумента%", Строка(Объект.СуммаКонтракта));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаМалыхЗакупок%", Строка(СуммаМалыхЗакупок));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Объект.ОрганизацияДляЗаключенияДоговора));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.ПутьКДанным = "Объект.НеРазмещаетсяНаЕИС";
		Сообщение.Сообщить();		//ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонтрольСуммыМалыхЗакупок();
	Иначе
		// Не изменяем сумму малых закупок.
	КонецЕсли;
КонецПроцедуры		// ОбработатьМалыеЗакупки()

&НаСервере 
Процедура КонтрольСуммыМалыхЗакупок()
	
	ВыставитьСуммуМалыхЗакупок();
	СуммаДокументаМеньшеМалыхЗакупок = (Объект.СуммаКонтракта < СуммаМалыхЗакупок);
	Если (СуммаДокументаМеньшеМалыхЗакупок) И (Объект.СуммаКонтракта > 0) И (НЕ Объект.НеРазмещаетсяНаЕИС) Тогда
		Элементы.ГруппаЕИС.Картинка = КонтрольУХ.КартинкаСтраницыКонтроль(
		Ложь, Истина,	Ложь);
	Иначе 
		Элементы.ГруппаЕИС.Картинка = КонтрольУХ.КартинкаСтраницыКонтроль(
		Ложь, Ложь,	Ложь);
	КонецЕсли;

КонецПроцедуры

// Возвращает массив номенклатуры, по которой требуется обоснование.
&НаКлиенте
Функция ПолучитьМассивНоменклатурыОбоснование()
	РезультатФункции = Новый Массив;
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
		Если ТекПотребностиПоГодам.ТребуетсяОбоснованиеНМЦ Тогда
			РезультатФункции.Добавить(ТекПотребностиПоГодам.Номенклатура);
		Иначе
			// Не требуется обоснование по этой номенклатуре. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивНоменклатурыОбоснование()

&НаКлиенте
Процедура СоздатьСтрокуПереходящегоПлана(Команда)
	ПараметрыПереходящегоПериода = Новый Структура;
	ПараметрыПереходящегоПериода.Вставить("СтрокаПереходящегоПериода",Объект.Ссылка);
	ОткрытьФорму("Документ.СтрокаПланаЗакупок.Форма.ФормаЭлемента",ПараметрыПереходящегоПериода,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
#КонецОбласти


#Область СлужебныеПроцедурыНаСервере
&НаСервере
Процедура РазместитьОстатки(ВыгрузкаОстатковСтрок)
	
	Для Каждого СтрокаОстатка ИЗ ВыгрузкаОстатковСтрок Цикл
		Структура = Новый Структура();
		Структура.Вставить("Коэффициент",СтрокаОстатка.Коэффициент);
		Структура.Вставить("Номенклатура",СтрокаОстатка.Номенклатура);
		Структура.Вставить("МестоПоставки",СтрокаОстатка.МестоПоставки);
		Структура.Вставить("Приоритет",СтрокаОстатка.Приоритет);
		Структура.Вставить("Организация",СтрокаОстатка.Организация);
		Структура.Вставить("Проект",СтрокаОстатка.Проект);
		Структура.Вставить("Характеристика",СтрокаОстатка.Характеристика);
		СтрокиПотребностей = ПотребностиПоГодам.НайтиСтроки(Структура);	
		Если СтрокиПотребностей.Количество() > 0 Тогда
			ИдентификаторСтроки = СтрокиПотребностей[0].ИдентификаторСтроки;
			ЭтоТоварнаяКатегория = СтрокиПотребностей[0].ЭтоКатегорияНоменклатуры;
			Для Каждого Расшифровка ИЗ РасшифровкаПотребностей Цикл
				Если ИдентификаторСтроки <>  Расшифровка.ИдентификаторСтроки ИЛИ
					 Год(Объект.ПериодЗакупок.ДатаНачала) <> Расшифровка.Год Тогда
					 Продолжить;	 
				КонецЕсли;	 
				Если НЕ ЭтоТоварнаяКатегория И ПериодичностьЦентрализованныхЗакупок = Перечисления.Периодичность.Месяц Тогда
					Расшифровка.ЯнварьКоличество = Расшифровка.ЯнварьКоличество+СтрокаОстатка.КоличествоОбщее;
				Иначе
					Расшифровка.ЯнварьСумма = Расшифровка.ЯнварьСумма+СтрокаОстатка.СуммаОбщее;
				КонецЕсли;
				Если НЕ ЭтоТоварнаяКатегория И ПериодичностьЦентрализованныхЗакупок = Перечисления.Периодичность.Квартал Тогда
					Расшифровка.ПервыйКварталКоличество = Расшифровка.ПервыйКварталКоличество+СтрокаОстатка.КоличествоОбщее;
				Иначе
					Расшифровка.ПервыйКварталСумма = Расшифровка.ПервыйКварталСумма+СтрокаОстатка.СуммаОбщее;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УдалитьНоменклатуруПрошлыхПериодов(СтрокаПлана,ПериодЗакупок);
	
	КоличествоСтрок = СтрокаПлана.Количество() - 1;
	Пока КоличествоСтрок >= 0 Цикл
		Если СтрокаПлана[КоличествоСтрок].ПериодПотребности.ДатаНачала < ПериодЗакупок.ДатаНачала Тогда
			СтрокаПлана[КоличествоСтрок].Количество = 0;
			СтрокаПлана[КоличествоСтрок].Сумма = 0;
			СтрокаПлана[КоличествоСтрок].СуммаНДС = 0;
			
			//	 СтрокаПлана.Удалить(КоличествоСтрок);
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;	
	Возврат СтрокаПлана;
	
КонецФункции	

&НаСервере
Функция УстановитьСледующийПериод(ПериодЗакупок)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",ДобавитьМесяц(ПериодЗакупок.ДатаНачала,12));
	Запрос.УстановитьПараметр("Периодичность",Перечисления.Периодичность.Год);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Периоды.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Периоды КАК Периоды
	               |ГДЕ
	               |	Периоды.ПометкаУдаления = ЛОЖЬ
	               |	И Периоды.Периодичность = &Периодичность
	               |	И Периоды.ДатаНачала = &ДатаНачала";
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Возврат Результат.Ссылка;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура УчестПереходящийОстатокНаСервере()
	
	ВыгрузкаОстатковСтрок = Документы.СтрокаПланаЗакупок.ПолучитьОстаткиПереходящегоПлана(Объект.СтрокаПереходящегоПериода,НачалоГода(Объект.ДатаОфициальногоОбъявленияЗакупки)-1);
	РазместитьОстатки(ВыгрузкаОстатковСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиСтрокиПереходящегоПериода(СтрокаПереходящегоПериода)
	ПериодЗакупокВход = УстановитьСледующийПериод(СтрокаПереходящегоПериода.ПериодЗакупок);
	Объект.ПериодЗакупок = ПериодЗакупокВход;
	Номенклатура = УдалитьНоменклатуруПрошлыхПериодов(СтрокаПереходящегоПериода.Номенклатура.Выгрузить(),Объект.ПериодЗакупок);
	Объект.Номенклатура.Очистить();
	Объект.Номенклатура.Загрузить(Номенклатура);
	Объект.СтрокаПереходящегоПериода = СтрокаПереходящегоПериода.Ссылка;
	ФинансированиеПрошлогоПериода = СтрокаПереходящегоПериода.Финансирование.Выгрузить();
	Объект.Финансирование.Загрузить(ФинансированиеПрошлогоПериода);
	Объект.СтрокаПереходящегоПериода = СтрокаПереходящегоПериода.Ссылка;
	Объект.Дата =	ТекущаяДата();
	Объект.ДатаОфициальногоОбъявленияЗакупки =  ДобавитьМесяц(СтрокаПереходящегоПериода.ДатаОфициальногоОбъявленияЗакупки,12);
КонецПроцедуры		

&НаСервере
Процедура УстановитьОформлениеФормы()
	ЦентрализованныеЗакупкиУХ.УстановитьПараметрВыбораПериодичностьЗакупок(Элементы.ПериодЗакупок);
	Элементы.ПериодЗакупок.АвтоОтметкаНезаполненного = Истина;
	ЭтоАктуальнаяВерсияСтроки = (НЕ ЗначениеЗаполнено(ПоследняяВерсияСтрокиПлана))
		ИЛИ (ПоследняяВерсияСтрокиПлана.НомерВерсии <= Объект.НомерВерсии);
	флМожноРедактировать = (НЕ Объект.ПометкаУдаления)
		И (ЭтоАктуальнаяВерсияСтроки) И (НЕ ОбъектФормыУтвержден(ЭтаФорма));
	ЭтаФорма.ТолькоПросмотр = НЕ флМожноРедактировать;
	Элементы.ДекорацияНельзяРедактироватьУдаленный.Видимость = Объект.ПометкаУдаления;
	Элементы.ПоследняяВерсияСтрокиПлана.Видимость = НЕ ЭтоАктуальнаяВерсияСтроки;
	Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ЗапретитьАвтоматическоеИзменениеДокумента.Доступность = НЕ Объект.ВнеПлановойПотребности;
	УстановитьОформлениеТоварныхКатегорий();
	УстановитьОформлениеРасшифровкиПотребностей(ЭтаФорма);
	УстановитьДоступностьПанелиСогласования(НЕ ЭтоАктуальнаяВерсияСтроки);
	УстановитьБлокировкуКлючевыхРеквизитов();
	УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ();
	УстановитьОформлениеЭлементовЕИС();
	УстановитьОформлениеОбоснованияНМЦ(ЭтаФорма);
	Элементы.СтрокаПереходящегоПериода.Видимость = ЗначениеЗаполнено(Объект.СтрокаПереходящегоПериода);	
	УстановитьОформлениеДляВнеПлановойПотребности(ЭтаФорма);
	УстановитьВидимостьМестаПоставкиВШапке(ЭтаФорма);
	УстановитьОформлениеДолгосрочныхДоговоров(ЭтаФорма);
	УстановитьОформлениеЗакупкиУМсп(ЭтаФорма);
	Элементы.ПотребностиПоГодамУчестьПереходящийОстаток.Видимость = ЗначениеЗаполнено(Объект.СтрокаПереходящегоПериода) И флПроводитсяВСоответствииСФЗ223;		
	Элементы.ОбоснованиеИзменений.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ФлагЗакупкаОтменена.Видимость = флПроводитсяВСоответствииСФЗ223;
	СоздатьСтрокуПереходящегоПланаДоступность = ЦентрализованныеЗакупкиКлиентСерверУХ.ЗакупкаБольшеГода(Объект.ДатаОфициальногоОбъявленияЗакупки, Объект.ДатаИсполненияДоговора) И флПроводитсяВСоответствииСФЗ223;
	Элементы.ФормаСоздатьСтрокуПереходящегоПлана.Видимость = СоздатьСтрокуПереходящегоПланаДоступность;
	УстановитьКурсНаДату =  КурсНаДату(Объект) =  Объект.КурсВалюты;	
	КонтрольСуммыМалыхЗакупок();	
КонецПроцедуры

// Блокируем ключевые реквизиты регистра строки плана закупок,
// чтобы не потерять запись при их изменении.
//
&НаСервере
Процедура УстановитьБлокировкуКлючевыхРеквизитов()
	флНельзяРедактироватьКлючевыеРеквизиты =
		ЗначениеЗаполнено(Объект.Ссылка)
		И (ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(Объект.Ссылка)
			ИЛИ ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Справочники.ИдентификаторыСтрокПлановЗакупок.ЗаполненыКлючевыеРеквизиты(
						Объект.ИдентификаторСтрокиПланаЗакупок));
	мИменаКлючей = СтрРазделить(
		Справочники.ИдентификаторыСтрокПлановЗакупок.ИменаКлючевыхРеквизитов(),
		",");
	Для Каждого ИмяРеквизита Из мИменаКлючей Цикл
		Элементы[ИмяРеквизита].ТолькоПросмотр = 
			флНельзяРедактироватьКлючевыеРеквизиты;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ()
	Элементы.КатегорияЗакупкиДляИсключенияИзГОЗ.Видимость =
		Объект.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементовЕИС()
	флПроводитсяВСоответствииСФЗ223 = Документы.СтрокаПланаЗакупок.ЭтоФЗ223(Объект);
	Элементы.ГруппаЕИС.Видимость													 = флПроводитсяВСоответствииСФЗ223;
	Элементы.ИнновационныйПланЗакупок.Видимость										 = флПроводитсяВСоответствииСФЗ223;
	Элементы.ПриоритетУчастияМалогоИСреднегоПредпринимательства.Видимость			 = флПроводитсяВСоответствииСФЗ223;
	Элементы.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков.Видимость	 = флПроводитсяВСоответствииСФЗ223;
	Элементы.НеРазмещаетсяНаЕИС.Видимость											 = флПроводитсяВСоответствииСФЗ223;
	УстановитьВидимостьСуммыНМЦДляЕИС();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСуммыНМЦДляЕИС()
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	флВалютный = (ВалютаРеглУчета <> Объект.ВалютаДокумента);
	Элементы.ГруппаНМЦВВалютеРеглУчета.Видимость = флВалютный;
	Элементы.СуммаВВалютеРегламентированногоУчета.АвтоОтметкаНезаполненного = флВалютный;
	Элементы.КурсВалюты.АвтоОтметкаНезаполненного = флВалютный;
	Элементы.ДатаКурса.АвтоОтметкаНезаполненного = флВалютный;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеОбоснованияНМЦ(Форма)
	Форма.Элементы.ПрикрепитьНовыйФайлОбоснованиеНМЦ.Картинка = 
		?(Форма.Объект.ПрикрепленныйФайлОбоснованияНМЦ.Пустая(), 
		  БиблиотекаКартинок.СоздатьЭлементСписка, 
		  БиблиотекаКартинок.ЛупаУХ);
	// Доступность страницы обоснования НМЦ
	Форма.Элементы.ГруппаОбоснование.Видимость =
		ЦентрализованныеЗакупкиКлиентСерверУХ.ТребуетсяОбоснованиеНМЦДляТаблицыНоменклатуры(
			Форма.ПотребностиПоГодам);
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеДляВнеПлановойПотребности(Форма)
	ЭтоВнеПлановаяПотребность = Форма.Объект.ВнеПлановойПотребности;
	ОтображениеДекорации = (НЕ ЭтоВнеПлановаяПотребность И НЕ Форма.Объект.ПометкаУдаления);
	Форма.Элементы.ДекорацияЗапретВводаНоменклатуры1.Видимость		 = ОтображениеДекорации;
	Форма.Элементы.ПотребностиПоГодамПодборПотребностей.Видимость	 = НЕ ЭтоВнеплановаяПотребность;
КонецПроцедуры

// Определяет, относится ли способ выбора поставщика СпособВыбораПоставщикаВход
// к закупке у МСП.
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЗакупкаУМсп(СпособВыбораПоставщикаВход)
	РезультатФункции = Ложь;
	МассивСпособовМСП = Новый Массив;
	МассивСпособовМСП.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыбораПоставщика.АукционУМсп"));
	МассивСпособовМСП.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыбораПоставщика.ЗапросКотировокУМсп"));
	МассивСпособовМСП.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыбораПоставщика.ЗапросПредложенийУМсп"));
	МассивСпособовМСП.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыбораПоставщика.КонкурсУМсп"));
	РезультатФункции = (МассивСпособовМСП.Найти(СпособВыбораПоставщикаВход) <> Неопределено);
	Возврат РезультатФункции;
КонецФункции		 // ЭтоЗакупкаУМсп()

&НаСервере
Процедура СпособВыбораПоставщикаПриИзмененииНаСервере()
	// Прнудительно установим флажки Закупка только у МСП и Закупка в электронной форме для соответственных способов закупки.
	Если ЭтоЗакупкаУМсп(Объект.СпособВыбораПоставщика) Тогда
		Объект.ВЭлектроннойФорме = Истина;
		Объект.ПриоритетУчастияМалогоИСреднегоПредпринимательства = Истина;
	Иначе
		Объект.ПриоритетУчастияМалогоИСреднегоПредпринимательства = Ложь;
	КонецЕсли;	
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуОбъектИзРеквизитаФормы(КонтекстСохранения)
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПоместитьСтрокуОбъектВРеквизитФормы(СтрокаОбъект, КонтекстСохранения)
	ЗначениеВРеквизитФормы(СтрокаОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере()
	Объект.ДатаКурса = ТекущаяДатаСеанса();
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Объект.СуммаВВалютеРегламентированногоУчета = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(
			Объект.СуммаДокумента,
			Объект.ВалютаДокумента,
			ВалютаРеглУчета, 
		    Объект.КурсВалюты,
			1, 
		    1,
			1);
	Объект.СуммаКонтрактаВВалютеРегламентированногоУчета = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(
			Объект.СуммаКонтракта,
			Объект.ВалютаДокумента,
			ВалютаРеглУчета, 
		    Объект.КурсВалюты,
			1, 
		    1,         
			1);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект)
	// Инициализация.
	ВалютаОбъекта = Объект.ВалютаДокумента;
	ДатаКурсаОбъекта = Объект.ДатаКурса;
	// Сумма текущего года.
	КурсИСумма = ЦентрализованныеЗакупкиВызовСервераУХ.ПересчитатьСуммуВВалютуРеглУчетаНаДату(
		ВалютаОбъекта, ДатаКурсаОбъекта, Объект.СуммаДокумента);
	Объект.СуммаВВалютеРегламентированногоУчета	 = КурсИСумма.СуммаВРублях;
	Объект.КурсВалюты							 = КурсИСумма.Курс;
	// Сумма контракта.
	РассчитатьСуммаКонтрактаРегл(Объект);
КонецПроцедуры

&НаСервере
Процедура ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере()
	УстановитьОформлениеФормы();
	ВыставитьСуммуМалыхЗакупок();
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры
	
&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.ДатаКурса) Тогда
		Объект.ДатаКурса = Объект.Дата;
	КонецЕсли;
	флВыполненПересчет = 
		ЦентрализованныеЗакупкиУХ.ТиповойОбработчикПриИзмененииВалютыДокумента(
			ЭтаФорма,
			ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	Если флВыполненПересчет Тогда
		ОбновитьСуммуДокументаИзКроссТаблицы();	
		УстановитьВидимостьСуммыНМЦДляЕИС();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПериодЗакупокПриИзмененииНаСервере()
	если Элементы.Найти("ПотребностиПоГодамГруппаКолонкиПоГодам")<>неопределено тогда
		Для Каждого СтрЭлеменент из элементы.ПотребностиПоГодамГруппаКолонкиПоГодам.подчиненныеэлементы цикл
			элементы.Удалить(СтрЭлеменент);
		КонецЦикла;			
	конецесли;		
	Обработки.ВыборПериодаЗакупок.ОбработатьПриИзмененииРеквизита(
		ВыборПериодаЗакупки,
		"ПериодЗакупок");
	ОбновитьДокументИзВыборПериодаЗакупки();
КонецПроцедуры

&НаСервере
Процедура ИнновационныйПланЗакупокПриИзмененииНаСервере()
	Обработки.ВыборПериодаЗакупок.ОбработатьПриИзмененииРеквизита(
		ВыборПериодаЗакупки,
		"Инновационный");
	ОбновитьДокументИзВыборПериодаЗакупки();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбработкуВыборПериодаЗакупки()
	ЗначениеВДанныеФормы(
		Обработки.ВыборПериодаЗакупок.СоздатьВыборПериодаПериодомЗакупки(
			Объект.ПериодЗакупок,
			Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств),
		ВыборПериодаЗакупки);
КонецПроцедуры

// Изменяет состояние формы, в частности кросс-таблицы!
//
&НаСервере
Процедура ОбновитьДокументИзВыборПериодаЗакупки()
	Объект.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств = 
		ВыборПериодаЗакупки.Инновационный;
	Объект.ПериодЗакупок =
		ВыборПериодаЗакупки.ПериодЗакупок;
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры

// Получаем значения ключевых измерений регистра
//  потребностей в номенклатуре и по ним заполняем
//  значения в строках таблицы. Если такие ключевые
//  значения в кросс-таблице уже есть, то записываем
//  кол-во и сумму сверху если нет, то добавляем
//  новую строку кросс-таблицы.
//
// Параметры:
//  АдресТаблицыПотребности - Строка - адрес таблицы значений
//		во временном хранилище.
//
// Возвращает:
//	Булево - есть ошибки.
//
&НаСервере
Функция ОбработкаВыбораПотребностейНаСервере(АдресТаблицыПотребности, ИмяТаблицыНаФормеПобора)
	// Получение новых данных из временного хранилища.										 
	ТаблицаПотребностей = ПолучитьИзВременногоХранилища(АдресТаблицыПотребности);
	Если ТаблицаПотребностей = Неопределено	ИЛИ ТаблицаПотребностей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// Проверка полученных данных.
	ОшибкиПользователю = Неопределено;
	флКорректноЗаполнены = КорректноЗаполненыМестаПоставкиДокумента(
		Объект, ТаблицаПотребностей, ИмяТаблицыНаФормеПобора, ОшибкиПользователю);
	Если НЕ флКорректноЗаполнены Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю,	Неопределено);
		Возврат Ложь;
	КонецЕсли;
	// Добавление Суммы НДС.
	ТаблицаПотребностей.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Для Каждого ТекТаблицаПотребностей Из ТаблицаПотребностей Цикл
		ЦентрализованныеЗакупкиКлиентСерверУХ.РасчитатьНДССтроки(Объект.ЦенаВключаетНДС, ТекТаблицаПотребностей);
	КонецЦикла;	
	// Перенос в таблицу значений данных с формы.
	ТаблицаНоменклатуры = Объект.Номенклатура.Выгрузить();
	ТаблицаНоменклатуры.Очистить();
	ПеренестиДанныеНоменклатуры(ТаблицаНоменклатуры);
	// Склейка двух таблиц.
	РезультатЗапроса = ПолучитьРезультатЗапросаПотребностиПоТаблице(
		ТаблицаНоменклатуры, Неопределено, "", ТаблицаПотребностей,	Объект.Дата, Объект.ВалютаДокумента);
	Выгрузка = РезультатЗапроса.Выгрузить();	
	// Перенос полученной таблицы на форму.
	ЗаполнитьПотребностиПоГодам(Выгрузка);
	ЗаполнитьРасшифровкуПотребностей(Выгрузка);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОбновитьОбъектПоНовымСтрокам(НомерСтрокиНачала, НомерСтрокиКонца)
	мИдДляОбработки = Новый Массив;
	Для Поз = НомерСтрокиНачала По НомерСтрокиКонца Цикл
		ТекущаяСтрока = ПотребностиВНоменклатуреПоПериодам[Поз-1];
		ТекущаяСтрока.ЦенаПервоначальная = ТекущаяСтрока.Цена;
		мИдДляОбработки.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	УстановитьРеквизитыОбъектаПоНоменклатуреСОсбымПорядкомЗакупки(
		мИдДляОбработки);
КонецПроцедуры

// Запрос для дозаполнения кросс-таблицы из существующих данных
// и таблицы со значениями ключевыми измерений регистра
// накопления ПотребностиВНоменклатуре.
//
&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаПотребностиПоТаблице(
									КроссТаблица, 
									ПериодыЗакупок,
									ИменаКлючевыхПолейКроссТаблицы,
									ТаблицаПотребностей,
									ДатаДокумента,
									ВалютаДокумента)
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ВалютаДокумента,
			ДатаДокумента);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПотребностей.Приоритет КАК Приоритет,
		|	ТаблицаПотребностей.Номенклатура КАК Номенклатура,
		|	ТаблицаПотребностей.Характеристика КАК Характеристика,
		|	ТаблицаПотребностей.ПериодПотребности КАК ПериодПотребности,
		|	ТаблицаПотребностей.Организация КАК Организация,
		|	ТаблицаПотребностей.МестоПоставки КАК МестоПоставки,
		|	ТаблицаПотребностей.Проект КАК Проект,
		|	ТаблицаПотребностей.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТаблицаПотребностей.Менеджер КАК Менеджер,
		|	ТаблицаПотребностей.Количество КАК Количество,
		|	ТаблицаПотребностей.Сумма КАК Сумма,
		|	ТаблицаПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаПотребностей.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПотребностей.Коэффициент КАК Коэффициент,
		|	ТаблицаПотребностей.Цена КАК Цена,
		|	ВЫРАЗИТЬ(ТаблицаПотребностей.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДС
		|ПОМЕСТИТЬ ТаблицаПотребностей
		|ИЗ
		|	&ПараметрТаблицаПотребностей КАК ТаблицаПотребностей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ТаблицаНоменклатуры.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЗ_ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ_ТаблицаНоменклатуры.Количество КАК Количество,
		|	ТЗ_ТаблицаНоменклатуры.Коэффициент КАК Коэффициент,
		|	ТЗ_ТаблицаНоменклатуры.Менеджер КАК Менеджер,
		|	ТЗ_ТаблицаНоменклатуры.МестоПоставки КАК МестоПоставки,
		|	ТЗ_ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТЗ_ТаблицаНоменклатуры.Организация КАК Организация,
		|	ТЗ_ТаблицаНоменклатуры.ПериодПотребности КАК ПериодПотребности,
		|	ТЗ_ТаблицаНоменклатуры.Приоритет КАК Приоритет,
		|	ТЗ_ТаблицаНоменклатуры.Проект КАК Проект,
		|	ТЗ_ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_ТаблицаНоменклатуры.Сумма КАК Сумма,
		|	ТЗ_ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
		|	ТЗ_ТаблицаНоменклатуры.ТребуетсяОбоснованиеНМЦ КАК ТребуетсяОбоснованиеНМЦ,
		|	ТЗ_ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТЗ_ТаблицаНоменклатуры.Цена КАК Цена,
		|	ТЗ_ТаблицаНоменклатуры.ЦенаПервоначальная КАК ЦенаПервоначальная
		|ПОМЕСТИТЬ ТЗ_ТаблицаНоменклатуры
		|ИЗ
		|	&ТЗ_ТаблицаНоменклатуры КАК ТЗ_ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПотребностей.Приоритет КАК Приоритет,
		|	ТаблицаПотребностей.Номенклатура КАК Номенклатура,
		|	ТаблицаПотребностей.Характеристика КАК Характеристика,
		|	ТаблицаПотребностей.ПериодПотребности КАК ПериодПотребности,
		|	ТаблицаПотребностей.Организация КАК Организация,
		|	ТаблицаПотребностей.МестоПоставки КАК МестоПоставки,
		|	ТаблицаПотребностей.Проект КАК Проект,
		|	ТаблицаПотребностей.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТаблицаПотребностей.Менеджер КАК Менеджер,
		|	ТаблицаПотребностей.Количество КАК Количество,
		|	ТаблицаПотребностей.Сумма   КАК Сумма,
		|	ТаблицаПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаПотребностей.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПотребностей.Коэффициент КАК Коэффициент,
		|	ТаблицаПотребностей.Цена  КАК Цена,
		|	ТаблицаПотребностей.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ТЗ_Объединение
		|ИЗ
		|	ТаблицаПотребностей КАК ТаблицаПотребностей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТЗ_ТаблицаНоменклатуры.Приоритет,
		|	ТЗ_ТаблицаНоменклатуры.Номенклатура,
		|	ТЗ_ТаблицаНоменклатуры.Характеристика,
		|	ТЗ_ТаблицаНоменклатуры.ПериодПотребности,
		|	ТЗ_ТаблицаНоменклатуры.Организация,
		|	ТЗ_ТаблицаНоменклатуры.МестоПоставки,
		|	ТЗ_ТаблицаНоменклатуры.Проект,
		|	ТЗ_ТаблицаНоменклатуры.ДоговорСПокупателем,
		|	ТЗ_ТаблицаНоменклатуры.Менеджер,
		|	ТЗ_ТаблицаНоменклатуры.Количество,
		|	ТЗ_ТаблицаНоменклатуры.Сумма,
		|	ТЗ_ТаблицаНоменклатуры.ЕдиницаИзмерения,
		|	ТЗ_ТаблицаНоменклатуры.СтавкаНДС,
		|	ТЗ_ТаблицаНоменклатуры.Коэффициент,
		|	ТЗ_ТаблицаНоменклатуры.Цена,
		|	ТЗ_ТаблицаНоменклатуры.СуммаНДС
		|ИЗ
		|	ТЗ_ТаблицаНоменклатуры КАК ТЗ_ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_Объединение.Приоритет КАК Приоритет,
		|	ТЗ_Объединение.Номенклатура КАК Номенклатура,
		|	ТЗ_Объединение.Характеристика КАК Характеристика,
		|	ТЗ_Объединение.ПериодПотребности КАК ПериодПотребности,
		|	ТЗ_Объединение.Организация КАК Организация,
		|	ТЗ_Объединение.МестоПоставки КАК МестоПоставки,
		|	ТЗ_Объединение.Проект КАК Проект,
		|	ТЗ_Объединение.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЗ_Объединение.Менеджер КАК Менеджер,
		|	СУММА(ТЗ_Объединение.Количество) КАК Количество,
		|	СУММА(ТЗ_Объединение.Сумма) КАК Сумма,
		|	ТЗ_Объединение.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ_Объединение.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_Объединение.Коэффициент КАК Коэффициент,
		|	ТЗ_Объединение.Цена КАК Цена,
		|	СУММА(ТЗ_Объединение.СуммаНДС) КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ТЗ_Объединение.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЗ_Объединение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЗ_Объединение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЗ_Объединение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ТЗ_Объединение.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоНоменклатура,
		|	ЕСТЬNULL(ТЗ_ТаблицаНоменклатуры.ТребуетсяОбоснованиеНМЦ, ЛОЖЬ) КАК ТребуетсяОбоснованиеНМЦ,
		|	МАКСИМУМ(ЕСТЬNULL(ТЗ_ТаблицаНоменклатуры.ЦенаПервоначальная, 0)) КАК ЦенаПервоначальная
		|ИЗ
		|	ТЗ_Объединение КАК ТЗ_Объединение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ТаблицаНоменклатуры КАК ТЗ_ТаблицаНоменклатуры
		|		ПО ТЗ_Объединение.Приоритет = ТЗ_ТаблицаНоменклатуры.Приоритет
		|			И ТЗ_Объединение.Номенклатура = ТЗ_ТаблицаНоменклатуры.Номенклатура
		|			И ТЗ_Объединение.Характеристика = ТЗ_ТаблицаНоменклатуры.Характеристика
		|			И ТЗ_Объединение.Организация = ТЗ_ТаблицаНоменклатуры.Организация
		|			И ТЗ_Объединение.МестоПоставки = ТЗ_ТаблицаНоменклатуры.МестоПоставки
		|			И ТЗ_Объединение.Проект = ТЗ_ТаблицаНоменклатуры.Проект
		|			И ТЗ_Объединение.ДоговорСПокупателем = ТЗ_ТаблицаНоменклатуры.ДоговорСПокупателем
		|			И ТЗ_Объединение.Менеджер = ТЗ_ТаблицаНоменклатуры.Менеджер
		|			И ТЗ_Объединение.ЕдиницаИзмерения = ТЗ_ТаблицаНоменклатуры.ЕдиницаИзмерения
		|			И ТЗ_Объединение.СтавкаНДС = ТЗ_ТаблицаНоменклатуры.СтавкаНДС
		|			И ТЗ_Объединение.Коэффициент = ТЗ_ТаблицаНоменклатуры.Коэффициент
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЗ_Объединение.Менеджер,
		|	ТЗ_Объединение.Приоритет,
		|	ТЗ_Объединение.ДоговорСПокупателем,
		|	ТЗ_Объединение.Организация,
		|	ТЗ_Объединение.МестоПоставки,
		|	ТЗ_Объединение.Проект,
		|	ТЗ_Объединение.Коэффициент,
		|	ТЗ_Объединение.Номенклатура,
		|	ТЗ_Объединение.ЕдиницаИзмерения,
		|	ТЗ_Объединение.СтавкаНДС,
		|	ТЗ_Объединение.Характеристика,
		|	ТЗ_Объединение.ПериодПотребности,
		|	ТЗ_Объединение.Цена,
		|	ВЫБОР
		|		КОГДА ТЗ_Объединение.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЗ_Объединение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЗ_Объединение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЗ_Объединение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТЗ_Объединение.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТЗ_ТаблицаНоменклатуры.ТребуетсяОбоснованиеНМЦ, ЛОЖЬ)";

	Запрос.УстановитьПараметр("ДатаСреза", ДатаДокумента);
	Запрос.УстановитьПараметр("ПараметрТаблицаПотребностей", ТаблицаПотребностей);
	Запрос.УстановитьПараметр("ТЗ_ТаблицаНоменклатуры", КроссТаблица);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты", ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЕдиноеМестоПоставкиОбъекта(Объект, ТаблицаНоменклатуры)
	Если Объект.ЕдиноеМестоПоставки 
				И ТаблицаНоменклатуры.Количество() > 0 Тогда
		Объект.МестоПоставки = ТаблицаНоменклатуры[0].МестоПоставки;
	Иначе
		Объект.МестоПоставки = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗапомнитьСостояниеТолькоПросмотрТаблицыПотребностей(Форма)
	ПодчиненныеЭлементыПотребности = Форма.Элементы.ПотребностиПоГодам.ПодчиненныеЭлементы;
	СоответствиеТолькоПросмотр = ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьТолькоПросмотрПодчиненныхЭлементов(ПодчиненныеЭлементыПотребности);
	Форма.ЗначенияЭлементовТолькоПросмотр =	Новый ФиксированноеСоответствие(СоответствиеТолькоПросмотр);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьТолькоПросмотрТаблицыПотребностей(Форма)
	Если Форма.Объект.ВнеПлановойПотребности Тогда
		ЦентрализованныеЗакупкиКлиентСерверУХ.ВосстановитьТолькоПросмотрЭлементов(
			Форма,
			Форма.ЗначенияЭлементовТолькоПросмотр);
	Иначе
		МассивИсключений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПотребностиПоГодамЦена");
		ДобавитьНаименованиеКолонкиСводнойТаблицыВМассив(
			Форма[Форма.ПараметрыКроссТаблицыПотребностей.ИмяТаблицыПериодов],
			"ПотребностиПоГодамСумма",
			МассивИсключений);
		УстановитьТолькоПросмотрПодчиненныхЭлементов(
			Форма.Элементы.ПотребностиПоГодам.ПодчиненныеЭлементы, 
			Истина, 
			МассивИсключений);
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьНаименованиеКолонкиСводнойТаблицыВМассив(ПериодыЗакупок,
														   ПрефиксИмениКолонки,
														   мИменаКолонок)
	Для Каждого СтрокаПериода Из ПериодыЗакупок Цикл
		Если СтрокаПериода.Активная Тогда
			мИменаКолонок.Добавить(ПрефиксИмениКолонки + "_" + СтрокаПериода.ИмяКолонки);
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТолькоПросмотрПодчиненныхЭлементов(
									КоллекцияПодчиненныхЭлементов, 
									ЗначениеТолькоПросмотр, 
									МассивИсключений=Неопределено)
	Для каждого ПодчиненныйЭлемент Из КоллекцияПодчиненныхЭлементов Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			УстановитьТолькоПросмотрПодчиненныхЭлементов(
				ПодчиненныйЭлемент.ПодчиненныеЭлементы, 
				ЗначениеТолькоПросмотр, 
				МассивИсключений);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			Если ПодчиненныйЭлемент.Вид <> ВидПоляФормы.ПолеВВода
				 И ПодчиненныйЭлемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
				Продолжить;
			КонецЕсли;
			Если МассивИсключений <> Неопределено
				 	И МассивИсключений.Найти(ПодчиненныйЭлемент.Имя) = Неопределено Тогда
				ПодчиненныйЭлемент.ТолькоПросмотр = ЗначениеТолькоПросмотр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвязанныйДокументОбоснованияТребований(СтрокаПланаЗакупок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбоснованиеТребованийКЗакупочнойПроцедуре.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОбоснованиеТребованийКЗакупочнойПроцедуре КАК ОбоснованиеТребованийКЗакупочнойПроцедуре
	|ГДЕ
	|	ОбоснованиеТребованийКЗакупочнойПроцедуре.ДокументОснование = &ДокументОснование
	|	И ОбоснованиеТребованийКЗакупочнойПроцедуре.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ДокументОснование", СтрокаПланаЗакупок);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервере
Функция УстановитьОписаниеДокументаОбоснованиеТребований()
	
	ТекстНеобходимоСоздатьДокумент = НСтр("ru='Необходимо создать документ'");
	
	Если Объект.Ссылка.Пустая() Тогда
		ДокументОбоснованиеТребований = Документы.ОбоснованиеТребованийКЗакупочнойПроцедуре.ПустаяСсылка();
	Иначе
		ДокументОбоснованиеТребований =	ПолучитьСвязанныйДокументОбоснованияТребований(Объект.Ссылка);
	КонецЕсли;
	
	НадписьОбоснованиеТребований = ПолучитьТекстНадписиОбоснованияТребований(ДокументОбоснованиеТребований);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстНадписиОбоснованияТребований(ДокументОбоснованиеТребований)
	Если ЗначениеЗаполнено(ДокументОбоснованиеТребований) Тогда
		Возврат Строка(ДокументОбоснованиеТребований);
	Иначе
		Возврат НСтр("ru='Необходимо создать документ'");
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетОтносительногоОтклоненияЦен(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ЦенаПервоначальная = 0 И ТекущаяСтрока.Цена <> 0 Тогда
		ТекущаяСтрока.ОтклонениеОтносительное = 0;
	ИначеЕсли ТекущаяСтрока.ЦенаПервоначальная = 0 И ТекущаяСтрока.Цена = 0 Тогда
		ТекущаяСтрока.ОтклонениеОтносительное = 0;
	Иначе
		ТекущаяСтрока.ОтклонениеОтносительное = (ТекущаяСтрока.Цена / ТекущаяСтрока.ЦенаПервоначальная-1) * 100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаТЧНоменклатурыПоПериодам(
									ТЧНоменклатура,
									ПериодыЗакупок,
									ИменаКлючевыхПолейКроссТаблицы)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокаПланаЗакупокНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СтрокаПланаЗакупокНоменклатура.Количество КАК Количество,
		|	СтрокаПланаЗакупокНоменклатура.Коэффициент КАК Коэффициент,
		|	СтрокаПланаЗакупокНоменклатура.Менеджер КАК Менеджер,
		|	СтрокаПланаЗакупокНоменклатура.МестоПоставки КАК МестоПоставки,
		|	СтрокаПланаЗакупокНоменклатура.Номенклатура КАК Номенклатура,
		|	СтрокаПланаЗакупокНоменклатура.Характеристика КАК Характеристика,
		|	СтрокаПланаЗакупокНоменклатура.Организация КАК Организация,
		|	СтрокаПланаЗакупокНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	СтрокаПланаЗакупокНоменклатура.Приоритет КАК Приоритет,
		|	СтрокаПланаЗакупокНоменклатура.Проект КАК Проект,
		|	СтрокаПланаЗакупокНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	СтрокаПланаЗакупокНоменклатура.Сумма КАК Сумма,
		|	СтрокаПланаЗакупокНоменклатура.СуммаНДС КАК СуммаНДС,
		|	СтрокаПланаЗакупокНоменклатура.Цена КАК Цена,
		|	СтрокаПланаЗакупокНоменклатура.ЦенаПервоначальная КАК ЦенаПервоначальная,
		|	СтрокаПланаЗакупокНоменклатура.ТребуетсяОбоснованиеНМЦ КАК ТребуетсяОбоснованиеНМЦ,
		|	СтрокаПланаЗакупокНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	СтрокаПланаЗакупокНоменклатура.ИтогоЗаВесьПериод КАК ИтогоЗаВесьПериод
		|ПОМЕСТИТЬ ТЧНоменклатура
		|ИЗ
		|	&ПараметрТЧНоменклатура КАК СтрокаПланаЗакупокНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.Менеджер КАК Менеджер,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТЧНоменклатура.Организация КАК Организация,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.Приоритет КАК Приоритет,
		|	ТЧНоменклатура.Проект КАК Проект,
		|	ТЧНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ТЧНоменклатура.ЦенаПервоначальная КАК ЦенаПервоначальная,
		|	ТЧНоменклатура.ТребуетсяОбоснованиеНМЦ КАК ТребуетсяОбоснованиеНМЦ,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	0 КАК НомерСтроки,
		|	ТЧНоменклатура.ИтогоЗаВесьПериод КАК ИтогоЗаВесьПериод
		|ИЗ
		|	ТЧНоменклатура КАК ТЧНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТЧНоменклатура.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)";
	Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО "
		+ ИменаКлючевыхПолейКроссТаблицы;
	Запрос.УстановитьПараметр("ТаблицаПериодов",
		ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр("ПараметрТЧНоменклатура",
		ТЧНоменклатура.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаСервере
Процедура РассчитатьОтносительныеОтклоненияЦен(ПотребностиВНоменклатуреПоПериодам)
	Для каждого ТекущаяСтрока Из ПотребностиВНоменклатуреПоПериодам Цикл
		ПересчетОтносительногоОтклоненияЦен(ТекущаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Прямой связи суммы документа и итоговой суммы ТЧ Номенклатура
// может не быть, т.е. сумму документа можно редактировать независимо.
// Поэтому пересчитываем сумму НДС документа (это справочная величина)
// по среднему коэффиценту НДС ТЧ Номенклатура.
//
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДСОбъекта(Форма)
	Сумма = Форма.ПотребностиПоГодам.Итог("Сумма");
	Если Сумма <> 0 Тогда
		ИтогСуммаНДС = Форма.ПотребностиПоГодам.Итог("СуммаНДС");
		КоэффициентНДС = ИтогСуммаНДС / Сумма;
		Форма.Объект.СуммаНДС = КоэффициентНДС * Форма.Объект.СуммаДокумента;
	Иначе
		Форма.Объект.СуммаНДС = 0;
	КонецЕсли;
КонецПроцедуры

// Рассчитывает и обновляет поле СуммаКонтракта объекта на форме Форма.
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуКонтракта(Форма)
	ОбъектФормы = Форма.Объект;
	СуммаРез = Форма.ПотребностиПоГодам.Итог("Сумма");
	ОбъектФормы.СуммаКонтракта = СуммаРез;
	РассчитатьСуммаКонтрактаРегл(ОбъектФормы);
КонецПроцедуры		// РассчитатьСуммуКонтракта()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПервоеМестоПоставкиДокумента(ТаблицаПотребностей)
	Для Каждого СтрокаТаблицы Из ТаблицаПотребностей Цикл
		МестоПоставки = СтрокаТаблицы.МестоПоставки;
		Если ЗначениеЗаполнено(МестоПоставки) Тогда
			Возврат МестоПоставки;
		КонецЕсли;
	КонецЦикла;
	Возврат ПредопределенноеЗначение("Справочник.МестаПоставки.ПустаяСсылка");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КорректноЗаполненыМестаПоставкиДокумента(
		Объект, ТаблицаПотребностей, ИмяТаблицыНаФорме, ОшибкиПользователю)
	флРезультат = ЗаполненыМестаПоставки(ТаблицаПотребностей, ИмяТаблицыНаФорме, ОшибкиПользователю);
	Если Объект.ЕдиноеМестоПоставки Тогда
		МестоПоставкиДокумента = ПолучитьПервоеМестоПоставкиДокумента(ТаблицаПотребностей);
		флРезультат = флРезультат И КорректноеЕдиноеМестаПоставки(
			ТаблицаПотребностей, ИмяТаблицыНаФорме,	МестоПоставкиДокумента,	ОшибкиПользователю);
	КонецЕсли;
	Возврат флРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КорректноеЕдиноеМестаПоставки(ТаблицаПотребностей,
									  ИмяТаблицыНаФорме,
									  МестоПоставкиЭталон, 
									  ОшибкиПользователю)
	КоличествоСтрок = ТаблицаПотребностей.Количество();
	Если КоличествоСтрок <= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаПотребностей Цикл
		МестоПоставки = СтрокаТаблицы.МестоПоставки;
		Если ЗначениеЗаполнено(МестоПоставки) 
				И МестоПоставки <> МестоПоставкиЭталон Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				ОшибкиПользователю,
				ПутьКРеквизитуТаблицыДляСообщения(
					ИмяТаблицыНаФорме,
					"МестоПоставки",
					СтрокаТаблицы),
				НСтр("ru = 'Различаются места поставки'"),
				Неопределено);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненыМестаПоставки(ТаблицаПотребностей, ИмяТаблицыФормы, ОшибкиПользователю)
	флРезультат = Истина;
	Для Каждого СтрокаТаблицы Из ТаблицаПотребностей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.МестоПоставки) Тогда
			ПутьКРеквизиту = ПутьКРеквизитуТаблицыДляСообщения(ИмяТаблицыФормы, "МестоПоставки",	СтрокаТаблицы);
			ТекстСообщения = НСтр("ru='Не заполнено место поставки'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю,	ПутьКРеквизиту,	ТекстСообщения,	Неопределено);
			флРезультат = Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат флРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКРеквизитуТаблицыДляСообщения(ИмяТаблицыФормы, 
										  ИмяРеквизита, 
										  СтрокаТаблицы)
	Если ТипЗнч(СтрокаТаблицы) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ИндексСтроки = СтрокаТаблицы.НомерСтроки - 1;
	Иначе // В случае обработки ТЗ из внешнего подбора
		ИндексСтроки = СтрокаТаблицы.Владелец().Индекс(СтрокаТаблицы);
	КонецЕсли;
	Возврат ИмяТаблицыФормы + "[" + ИндексСтроки + "]." + ИмяРеквизита;
КонецФункции

&НаСервере
Процедура ОбновитьАктуальнуюВерсиюСтрокиПлана()
	ПоследняяВерсияСтрокиПлана = 
		Документы.СтрокаПланаЗакупок.ПолучитьАктуальнуюВерсиюСтрокиПоИдентификатору(
			Объект.ИдентификаторСтрокиПланаЗакупок);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммуДокументаИзКроссТаблицы()
	ОбъектФормы = Объект;
	ПериодЗакупокОбъекта = ОбъектФормы.ПериодЗакупок;
	Если ПотребностиПоГодам.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ПериодЗакупокОбъекта) Тогда
			ПерваяСтрока = ПотребностиПоГодам[0];
			Год = Год(ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодЗакупокОбъекта, "ДатаНачала"));
			ГодСтрока = Формат(Год, "ЧГ=0"); 
			ИмяКолонки = "Год" + ГодСтрока + "Сумма";
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПерваяСтрока, ИмяКолонки) Тогда
				Объект.СуммаДокумента = ПотребностиПоГодам.Итог(ИмяКолонки);
			Иначе
				Объект.СуммаДокумента = 0;
			КонецЕсли;
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	РассчитатьСуммуНДСОбъекта(ЭтаФорма);	
	РассчитатьСуммуКонтракта(ЭтаФорма);
	Если УстановитьКурсНаДату Тогда
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаДатуКурсаНаСервере(Объект);
	Иначе	
		РассчитатьНМЦВВалютеРеглУчетаПоКурсуНаТекущуюДатуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоговыеРеквизитыФормыПоКроссТаблице(Форма)
	Форма.ИтогоСуммаПоНоменклатуре = Форма.ПотребностиПоГодам.Итог("Сумма");
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыОбъектаПоНоменклатуреСОсбымПорядкомЗакупки(
														мИдСтрокПотребностей)
	Если НЕ ЗначениеЗаполнено(мИдСтрокПотребностей) 
			ИЛИ мИдСтрокПотребностей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НастройкаСоотвествия = ПолучитьСоотвествиеРеквизитовОсобогоПорядкаИОбъекта();
	ЗначенияРеквизитов = Новый Структура;
	Для Каждого ИдСтрокиПотребности Из мИдСтрокПотребностей Цикл
		СтрокаПотребности =
			ПотребностиВНоменклатуреПоПериодам.НайтиПоИдентификатору(
				ИдСтрокиПотребности);
		Если СтрокаПотребности <> Неопределено Тогда
			ЗначенияРеквизитовОсобогоПорядка = 
				ЦентрализованныеЗакупкиВызовСервераУХ.ПолучитьЗначенияРеквизитовОсобогоПорядкаЗакупкиНоменклатуры(
					СтрокаПотребности.Номенклатура);
				Если ЗначенияРеквизитовОсобогоПорядка <> Неопределено Тогда
					СтрокаПотребности.ТребуетсяОбоснованиеНМЦ = 
						ЗначенияРеквизитовОсобогоПорядка.ТребуетсяОбоснование;
					РеквизитыДляИзменения = 
						ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьРеквизитыДляУстановкиПоНастройкамОсобогоПорядкаЗакупки(
							Объект,
							ЗначенияРеквизитовОсобогоПорядка,
							НастройкаСоотвествия);
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
						ЗначенияРеквизитов,
						РеквизитыДляИзменения,
						Ложь);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПакетноеОбновлениеРеквизитовОбъекта(ЗначенияРеквизитов);
КонецПроцедуры

// Обновляет значения реквизитов объекта.
// Вызывает процедуры ..ПриИзменении, соотвествующих реквизитов.
//
&НаСервере
Функция ПакетноеОбновлениеРеквизитовОбъекта(ЗначенияРеквизитов)
	ИменаОбработчиков = Новый Массив;
	Для Каждого ИмяЗначение Из ЗначенияРеквизитов Цикл
		ИмяРеквизита = ИмяЗначение.Ключ;
		Объект[ИмяРеквизита] = ИмяЗначение.Значение;
		ИмяОбработчика =
			ПолучитьИмяПроцедурыПриИзмененииРеквизитаОбъекта(ИмяРеквизита);
			Если НЕ ПустаяСтрока(ИмяОбработчика) Тогда
				ИменаОбработчиков.Добавить(ИмяОбработчика);
			КонецЕсли;
	КонецЦикла;
	Для Каждого ИмяОбработчика Из ИменаОбработчиков Цикл
		Выполнить(ИмяОбработчика + "();");
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПолучитьИмяПроцедурыПриИзмененииРеквизитаОбъекта(ИмяРеквизита)
	Если ИмяРеквизита = "ЗакрытаяЗакупка" Тогда
		Возврат "УстановитьОформлениеФормы";
	ИначеЕсли ИмяРеквизита = "ОрганизаторЗакупки" Тогда
		Возврат "ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере";
	ИначеЕсли ИмяРеквизита = "НеУчитыватьПриРасчетеДолиЗакупокУСМП" Тогда
		Возврат "УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ";
	ИначеЕсли ИмяРеквизита = "СпособВыбораПоставщика" Тогда
		Возврат "СпособВыбораПоставщикаПриИзмененииНаСервере";
	ИначеЕсли ИмяРеквизита = "ТребуетсяОбоснованиеНМЦ" Тогда
		Возврат "";
	КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоотвествиеРеквизитовОсобогоПорядкаИОбъекта()
	Настройка = Новый Структура;
	Настройка.Вставить(
		"ЗакупкаВЭлектроннойФорме", 
		"ВЭлектроннойФорме");
	Настройка.Вставить(
		"ПриоритетУчастияМалогоИСреднегоПредпринимательства", 
		"ПриоритетУчастияМалогоИСреднегоПредпринимательства");
	Настройка.Вставить(
		"ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков",
		"ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков");
	Настройка.Вставить(
		"ЗакупкаСодержитСведенияОтносящиесяКГосударственнойТайне", 
		"ЗакрытаяЗакупка");
	Настройка.Вставить(
		"Организатор", 
		"ОрганизаторЗакупки");
	Настройка.Вставить(
		"Заказчик", 
		"ОрганизацияДляЗаключенияДоговора");
	Настройка.Вставить(
		"НеУчитыватьПриРасчетеДолиЗакупокУСМП", 
		"НеУчитыватьПриРасчетеДолиЗакупокУСМП");
	Настройка.Вставить(
		"СпособВыбораПоставщика", 
		"СпособВыбораПоставщика");
	Настройка.Вставить(
		"ТребуетсяОбоснование", 
		"ТребуетсяОбоснованиеНМЦ");
	Возврат Настройка;
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьМестаПоставкиВШапке(ЭтаФорма)
	ЭтаФорма.Элементы.МестоПоставки.Видимость =
		ЭтаФорма.Объект.ЕдиноеМестоПоставки;
КонецПроцедуры

// Управляет видимостью реквизитов для долгосрочных договоров.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеДолгосрочныхДоговоров(Форма)
	// Определим, является ли закупка долгосрочной.
	ОбъектФормы = Форма.Объект;
	ДатаОбъявления = ОбъектФормы.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = ОбъектФормы.ДатаИсполненияДоговора;
	БольшеОдногоГода = ЦентрализованныеЗакупкиКлиентСерверУХ.ЗакупкаБольшеГода(ДатаОбъявления, ДатаИсполнения);
	ТолькоУМсп = Форма.Объект.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
	// Установим оформление элементов в зависимости от полученного значения.
	ОтображатьФинансированиеБольшеГода = (ЦентрализованныеЗакупкиКлиентСерверУХ.ЗакупкаБольшеГода(ДатаОбъявления, ДатаИсполнения) ИЛИ ЗначениеЗаполнено(ОбъектФормы.СтрокаПереходящегоПериода)) И Форма.флПроводитсяВСоответствииСФЗ223;
	
	ОтображатьФинансирование = (Форма.флПроводитсяВСоответствииСФЗ223 И ТолькоУМсп);
	Форма.Элементы.ГруппаФинансирование.Видимость										 = ОтображатьФинансированиеБольшеГода ИЛИ ОтображатьФинансирование;
	Форма.Элементы.ГруппаПотребностиВНоменклатуреПоПериодамИтогоЗаВесьПериод.Видимость	 = ОтображатьФинансированиеБольшеГода;
	Форма.Элементы.СуммаКонтракта.Видимость												 = ОтображатьФинансированиеБольшеГода;
	Форма.Элементы.ФинансированиеСуммаСМП.Видимость = ОтображатьФинансирование;
	
КонецПроцедуры		// УстановитьОформлениеДолгосрочныхДоговоров()

// Управляет видимостью элементов таблицы расшифровки потребности.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеРасшифровкиПотребностей(Форма)
	// Инициализация.
	ЭлементыФормы = Форма.Элементы;
	ПериодичностьМесяц		 = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	ПериодичностьКвартал	 = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
	// Отображение таблицы РасшифровкаПотребностей.
	ЭлементыФормы.РасшифровкаПотребностей.Видимость = ЭлементыФормы.ПотребностиПоГодамОтображатьРасшифровку.Пометка;
	// Отображение периодов согласно выбранной периодичности.
	ПериодичностьЗакупокМесяц	 = (Форма.ПериодичностьЦентрализованныхЗакупок = ПериодичностьМесяц);
	ПериодичностьЗакупокКвартал	 = (Форма.ПериодичностьЦентрализованныхЗакупок = ПериодичностьКвартал);
	ЭлементыФормы.РасшифровкаПотребностейГруппаПомесячная.Видимость		 = ПериодичностьЗакупокМесяц;
	ЭлементыФормы.РасшифровкаПотребностейГруппаПоквартально.Видимость	 = ПериодичностьЗакупокКвартал;
КонецПроцедуры		// УстановитьОформлениеРасшифровкиПотребностей()

// Управляет доступностью элементов-флагов закупки у МСП.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеЗакупкиУМсп(Форма)
	ЗакупкаУМсп = ЭтоЗакупкаУМсп(Форма.Объект.СпособВыбораПоставщика);
	Форма.Элементы.ВЭлектроннойФорме.Доступность									 = НЕ ЗакупкаУМсп;
	Форма.Элементы.ПриоритетУчастияМалогоИСреднегоПредпринимательства.Доступность	 = НЕ ЗакупкаУМсп;
	Форма.Элементы.ПриоритетУчастияМалогоИСреднегоПредпринимательства1.Доступность	 = НЕ ЗакупкаУМсп;
КонецПроцедуры		// УстановитьОформлениеЗакупкиУМсп()

// Управляет видимостью элементов таблицы расшифровки потребности.
&НаСервере
Процедура УстановитьОформлениеТоварныхКатегорий()
	флРазделятьНоменклатуруПоКатегорийнымМенеджерам = Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить();
	Элементы.ГруппаТоварнаяКатегория.Видимость = флРазделятьНоменклатуруПоКатегорийнымМенеджерам;
КонецПроцедуры		// УстановитьОформлениеТоварныхКатегорий()

// Создаёт массив номеров лет между датами ДатаНачалаВход и ДатаОкончанияВход.
&НаКлиентеНаСервереБезКонтекста
Функция СоздатьМассивЛетМеждуДатами(ДатаНачалаВход, ДатаОкончанияВход, ПериодВход = Неопределено)
	// Инициализация.
	РезультатФункции = Новый Массив;
	ДатаНачалаРабочая = Дата(1, 1, 1);
	ДатаОкончанияРабочая = Дата(1, 1, 1);
	Если ЗначениеЗаполнено(ДатаНачалаВход) И ЗначениеЗаполнено(ДатаОкончанияВход) Тогда
		ДатаНачалаРабочая = ДатаНачалаВход;
		ДатаОкончанияРабочая = ДатаОкончанияВход;
	ИначеЕсли ЗначениеЗаполнено(ПериодВход)	Тогда
		ДатаНачалаРабочая = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодВход, "ДатаНачала");
		ДатаОкончанияРабочая = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодВход, "ДатаОкончания");
	Иначе
		ДатаНачалаРабочая = Дата(1, 1, 1);
		ДатаОкончанияРабочая = Дата(1, 1, 1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаРабочая) И ЗначениеЗаполнено(ДатаОкончанияРабочая) Тогда
		// Первый год.
		РезультатФункции.Добавить(Год(ДатаНачалаРабочая));
		// Последующие годы.
		НоваяДата = ДобавитьМесяц(ДатаНачалаРабочая, 12);
		Пока НачалоГода(НоваяДата) <= ДатаОкончанияРабочая Цикл
			РезультатФункции.Добавить(Год(НоваяДата));
			НоваяДата = ДобавитьМесяц(НоваяДата, 12);
		КонецЦикла;		
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // СоздатьМассивЛетМеждуДатами()	

// Серверная обёртка команды Заполнить периоды.
&НаСервере
Процедура ЗаполнитьПериодыФинансирования_Сервер()
	// Инициализация.
	ДатаОбъявления = ?(ЗначениеЗаполнено(Объект.СтрокаПереходящегоПериода),Объект.СтрокаПереходящегоПериода.ДатаОфициальногоОбъявленияЗакупки,Объект.ДатаОфициальногоОбъявленияЗакупки);
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	ПериодичностьГод = Перечисления.Периодичность.Год;
	Объект.Финансирование.Очистить();
	// Получим массив лет между датами.
	МассивЛет = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	// Заполним таблицу по полученному массиву.
	Для Каждого ТекМассивЛет Из МассивЛет Цикл
		НоваяДата = Дата(ТекМассивЛет, 1, 1);
		НовыйГод = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(НоваяДата, ПериодичностьГод);
		НоваяСтрока = Объект.Финансирование.Добавить();
		НоваяСтрока.ПериодФинансирования = НовыйГод;
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьПериодыФинансирования_Сервер()

// Серверная обёртка команды РаспределитьСуммуФинансирования.
&НаСервере
Процедура РаспределитьСуммуФинансирования_Сервер()
	КоличествоКРаспределению = Объект.Финансирование.Количество();
	Если КоличествоКРаспределению > 0 Тогда
		ЗакупкаУМсп = ЭтоЗакупкаУМсп(Объект.СпособВыбораПоставщика);
		ЭтоЭлектронныеТорги = Объект.ВЭлектроннойФорме;
		Выгрузка = ПотребностиПоГодам.Выгрузить();
		ИтогФинансирование = Выгрузка.Итог("Сумма");
		ЧастнаяСумма = Цел(ИтогФинансирование / КоличествоКРаспределению);
		Остаток = ИтогФинансирование;
		ТекФинансирование = Неопределено;
		Для Каждого ТекФинансирование Из Объект.Финансирование Цикл
			ТекФинансирование.Сумма = ЧастнаяСумма;
			Если (ЭтоЭлектронныеТорги) И (ЗакупкаУМсп) Тогда
				ТекФинансирование.СуммаСМП = ЧастнаяСумма;
			Иначе
				// Оставляем Сумму МСП пустой.
			КонецЕсли;
			Остаток = Остаток - ЧастнаяСумма;
		КонецЦикла;	
		Если ТекФинансирование <> Неопределено Тогда
			ТекФинансирование.Сумма = ТекФинансирование.Сумма + Остаток;
		Иначе
			ТекстСообщения = НСтр("ru = 'Последняя строка для распределния финансирования не найдена'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'В таблице финансирования отсутствуют данные по периодам. Заполнение отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// 	РаспределитьСуммуФинансирования_Сервер()

// Возвращает ссылку на справочник периоды с периодичностью месяц,
// по номеру месяца МесяцВход и году ГодВход.
&НаСервереБезКонтекста
Функция СформироватьПериодПоГодуИМесяцу(МесяцВход, ГодВход)
	РезультатФункции = Справочники.Периоды.ПустаяСсылка();
	Если (ЗначениеЗаполнено(МесяцВход)) И (ЗначениеЗаполнено(ГодВход)) Тогда
		НоваяДата = Дата(ГодВход, МесяцВход, 1);
		ПериодичностьМесяц = Перечисления.Периодичность.Месяц;
		РезультатФункции = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(НоваяДата, ПериодичностьМесяц);
	Иначе
		РезультатФункции = Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // СформироватьПериодПоГодуИМесяцу()

// Возвращает ссылку на справочник периоды с периодичностью квартал,
// по номеру квартала КварталВход и году ГодВход.
&НаСервереБезКонтекста
Функция СформироватьПериодПоГодуИКварталу(КварталВход, ГодВход)
	РезультатФункции = Справочники.Периоды.ПустаяСсылка();
	Если (ЗначениеЗаполнено(КварталВход)) И (ЗначениеЗаполнено(ГодВход)) Тогда
		НоваяДата = Дата(ГодВход, КварталВход * 3, 1);
		ПериодичностьКвартал = Перечисления.Периодичность.Квартал;
		РезультатФункции = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(НоваяДата, ПериодичностьКвартал);
	Иначе
		РезультатФункции = Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // СформироватьПериодПоГодуИКварталу()

// Переносит значения в строку потребности СтрокаПотребностьВход таблицы ТаблицаНоменклатураИзм
// значения суммы ЗначениеСуммаВход и количества ЗначениеКоличествоВход за месяц с номером
// НомерМесяца и год с номером НомерГодаВход.
&НаСервереБезКонтекста
Процедура ВставитьЗначениеПериодаМесяц(ЗначениеСуммаВход, ЗначениеКоличествоВход, НомерМесяцаВход, НомерГодаВход, СтрокаПотребностьВход, ТаблицаНоменклатураИзм)
	Если ЗначениеЗаполнено(ЗначениеСуммаВход) ИЛИ ЗначениеЗаполнено(ЗначениеКоличествоВход) Тогда
		НовыйПериод = СформироватьПериодПоГодуИМесяцу(НомерМесяцаВход, НомерГодаВход);
		Если ЗначениеЗаполнено(НовыйПериод) Тогда
			НоваяСтрока = ТаблицаНоменклатураИзм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребностьВход);
			НоваяСтрока.ПериодПотребности	 = НовыйПериод;
			НоваяСтрока.Сумма				 = ЗначениеСуммаВход;
			НоваяСтрока.Количество			 = ЗначениеКоличествоВход;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать период по %Месяц% месяцу и %Год% году'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Месяц%", Строка(НомерМесяцаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Год%", Строка(НомерГодаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Нулевое значение. Не добавляем в таблицу.
	КонецЕсли;
КонецПроцедуры		// ВставитьЗначениеПериодаМесяц() 

// Переносит значения в строку потребности СтрокаПотребностьВход таблицы ТаблицаНоменклатураИзм
// значения суммы ЗначениеСуммаВход и количества ЗначениеКоличествоВход за месяц с номером
// НомерМесяца и год с номером НомерГодаВход.
&НаСервереБезКонтекста
Процедура ВставитьЗначениеПериодаКвартал(ЗначениеСуммаВход, ЗначениеКоличествоВход, НомерКварталаВход, НомерГодаВход, СтрокаПотребностьВход, ТаблицаНоменклатураИзм)
	Если ЗначениеЗаполнено(ЗначениеСуммаВход) ИЛИ ЗначениеЗаполнено(ЗначениеКоличествоВход) Тогда
		НовыйПериод = СформироватьПериодПоГодуИКварталу(НомерКварталаВход, НомерГодаВход);
		Если ЗначениеЗаполнено(НовыйПериод) Тогда
			НоваяСтрока = ТаблицаНоменклатураИзм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребностьВход);
			НоваяСтрока.ПериодПотребности	 = НовыйПериод;
			НоваяСтрока.Сумма				 = ЗначениеСуммаВход;
			НоваяСтрока.Количество			 = ЗначениеКоличествоВход;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать период по %Квартал% кварталу и %Год% году'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Квартал%", Строка(НомерКварталаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Год%", Строка(НомерГодаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Нулевое значение. Не добавляем в таблицу.
	КонецЕсли;
КонецПроцедуры		// ВставитьЗначениеПериодаКвартал() 

// Переносит в таблицу номенклатуры ТаблицаНоменклатурыИзм данные из таблицы потребности на форме.
// Когда параметры ДатаОбъявленияВход и ДатаИсполненияВход заданы, будут использоваться годы между 
// этими датами, иначе - из дат на объекте формы.
&НаСервере
Процедура ПеренестиДанныеНоменклатуры(ТаблицаНоменклатурыИзм, ДатаОбъявленияВход = Неопределено, ДатаИсполненияВход = Неопределено)
	// Инициализация.
	ТаблицаНоменклатурыИзм.Очистить();
	Если Не ЗначениеЗаполнено(ДатаОбъявленияВход) Тогда
		ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	Иначе
		ДатаОбъявления = ДатаОбъявленияВход;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаИсполненияВход) Тогда
		ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	Иначе
		ДатаИсполнения = ДатаИсполненияВход;
	КонецЕсли;
	ПериодичностьЗакупокМесяц = (ПериодичностьЦентрализованныхЗакупок = Перечисления.Периодичность.Месяц);
	ПериодичностьЗакупокКвартал = (ПериодичностьЦентрализованныхЗакупок = Перечисления.Периодичность.Квартал);
	// Обход данных по годам.
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл	
		// Обход строк по номенклатуре.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", ТекПотребностиПоГодам.ИдентификаторСтроки);
		НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			Для Каждого ТекМассивГоды Из МассивГоды Цикл
				Если ТекНайденныеСтроки.Год = ТекМассивГоды Тогда
					Если ПериодичностьЗакупокМесяц Тогда
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.ЯнварьСумма, ТекНайденныеСтроки.ЯнварьКоличество, 1, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.ФевральСумма, ТекНайденныеСтроки.ФевральКоличество, 2, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.МартСумма, ТекНайденныеСтроки.МартКоличество, 3, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.АпрельСумма, ТекНайденныеСтроки.АпрельКоличество, 4, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.МайСумма, ТекНайденныеСтроки.МайКоличество, 5, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(                                                 
							ТекНайденныеСтроки.ИюньСумма, ТекНайденныеСтроки.ИюньКоличество, 6, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.ИюльСумма, ТекНайденныеСтроки.ИюльКоличество, 7, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.АвгустСумма, ТекНайденныеСтроки.АвгустКоличество, 8, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.СентябрьСумма, ТекНайденныеСтроки.СентябрьКоличество, 9, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);	
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.ОктябрьСумма, ТекНайденныеСтроки.ОктябрьКоличество, 10, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.НоябрьСумма, ТекНайденныеСтроки.НоябрьКоличество, 11, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаМесяц(
							ТекНайденныеСтроки.ДекабрьСумма, ТекНайденныеСтроки.ДекабрьКоличество, 12, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
					ИначеЕсли ПериодичностьЗакупокКвартал Тогда
						ВставитьЗначениеПериодаКвартал(
							ТекНайденныеСтроки.ПервыйКварталСумма, ТекНайденныеСтроки.ПервыйКварталКоличество, 1, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаКвартал(
							ТекНайденныеСтроки.ВторойКварталСумма, ТекНайденныеСтроки.ВторойКварталКоличество, 2, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаКвартал(
							ТекНайденныеСтроки.ТретийКварталСумма, ТекНайденныеСтроки.ТретийКварталКоличество, 3, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
						ВставитьЗначениеПериодаКвартал(
							ТекНайденныеСтроки.ЧетвертыйКварталСумма, ТекНайденныеСтроки.ЧетвертыйКварталКоличество, 4, 
							ТекМассивГоды, ТекПотребностиПоГодам, ТаблицаНоменклатурыИзм);
					Иначе
						ТекстСообщения = НСтр("ru = 'Неизвестный вариант периодичности закупок: %ПериодичностьЗакупок%. Сохранение строки по году %Год% отменено'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодичностьЗакупок%", Строка(ПериодичностьЦентрализованныхЗакупок));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Год%", Строка(ТекМассивГоды));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					КонецЕсли;
				Иначе
					// Год не совпадает. Пропускаем.
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;	
	// Свернём полученную таблицу.
	СтрокаСвертка = "ДоговорСПокупателем, ЕдиницаИзмерения, Коэффициент, Менеджер, МестоПоставки, Номенклатура, Характеристика, Организация, ПериодПотребности, Приоритет, Проект, СтавкаНДС, Цена, ТребуетсяОбоснованиеНМЦ, ЦенаПервоначальная";
	СтрокаСумма = "Сумма, СуммаНДС, Количество, ИтогоЗаВесьПериод";
	Если ТипЗнч(ТаблицаНоменклатурыИзм) <> Тип("ТаблицаЗначений") Тогда
		Выгрузка = ТаблицаНоменклатурыИзм.Выгрузить();
		Выгрузка.Свернуть(СтрокаСвертка, СтрокаСумма);
		ТаблицаНоменклатурыИзм.Загрузить(Выгрузка);
	Иначе
		ТаблицаНоменклатурыИзм.Свернуть(СтрокаСвертка, СтрокаСумма);
	КонецЕсли;
КонецПроцедуры		// ПеренестиДанныеНоменклатуры()

// Возвращает данные для заполнения в строке по номенклатуре НоменклатураВход 
// и дополнительным параметрам ДополнительныеПараметрыВход.
&НаСервереБезКонтекста
Функция ПолучитьДанныеПоНоменклатуре(НоменклатураВход, ДополнительныеПараметрыВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	ПустаяСтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ПустаяТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
	ПериодЗакупок		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыВход, "ПериодЗакупок", Справочники.Периоды.ПустаяСсылка());
	ДатаКурса			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыВход, "ДатаКурса", Дата(1, 1, 1));
	ВалютаДокумента		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыВход, "ВалютаДокумента", Справочники.Валюты.ПустаяСсылка());
	ТипЦенДляРасценки = Константы.ТипЦенДляРасценкиЗаявокНаПотребность.Получить();
	ДатаНачалаПериодаЗакупок = ПериодЗакупок.ДатаНачала;
	Если ТипЗнч(НоменклатураВход) = Тип("СправочникСсылка.Номенклатура") Тогда
		// Получение данных для заполнения.
		НоваяХарактеристика				 = ПустаяХарактеристика;
		НовыйХарактеристикиИспользуются	 = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ХарактеристикиИспользуются(НоменклатураВход);
		НоваяЕдиницаИзмерения			 = НоменклатураВход.ЕдиницаИзмерения;
		НовыйКоэффициент				 = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьКоэффициентЕдиницыИзмерения(
			НоменклатураВход, НоваяХарактеристика, НоваяЕдиницаИзмерения);
		НоваяЦена						 = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьЦенуНоменклатуры(
			НоменклатураВход, НоваяХарактеристика, ТипЦенДляРасценки, ДатаКурса, ВалютаДокумента);
		НоваяСтавкаНДС					 = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.СтавкаНДС(НоменклатураВход, ДатаНачалаПериодаЗакупок);
		НовыйКодОКПД2					 = НоменклатураВход.КодОКПД2;
		НоваяТоварнаяКатегория			 = ПустаяТоварнаяКатегория;
		Если ТипЗнч(НоменклатураВход) = Тип("СправочникСсылка.Номенклатура") Тогда
			НоваяТоварнаяКатегория		 = НоменклатураВход.ТоварнаяКатегория;
		ИначеЕсли ТипЗнч(НоменклатураВход) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			НоваяТоварнаяКатегория		 = НоменклатураВход;	
		Иначе
			НоваяТоварнаяКатегория		 = ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка");
		КонецЕсли;
		// Заполнение полученных данных.
		РезультатФункции.Вставить("Характеристика",				 НоваяХарактеристика);
		РезультатФункции.Вставить("ХарактеристикиИспользуются",	 НовыйХарактеристикиИспользуются);
		РезультатФункции.Вставить("Коэффициент",				 НовыйКоэффициент);
		РезультатФункции.Вставить("ЕдиницаИзмерения",			 НоваяЕдиницаИзмерения);
		РезультатФункции.Вставить("Цена",						 НоваяЦена);
		РезультатФункции.Вставить("СтавкаНДС",					 НоваяСтавкаНДС);
		РезультатФункции.Вставить("КодОКПД2",					 НовыйКодОКПД2);
		РезультатФункции.Вставить("ТоварнаяКатегория",			 НоваяТоварнаяКатегория);
	ИначеЕсли ТипЗнч(НоменклатураВход) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		// Товарная категория. 
		НоваяХарактеристика				 = ПустаяХарактеристика;
		НовыйХарактеристикиИспользуются	 = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ХарактеристикиИспользуются(НоменклатураВход);
		НовыйКоэффициент				 = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьКоэффициентЕдиницыИзмерения(
			НоменклатураВход, НоваяХарактеристика, НоваяЕдиницаИзмерения);
		РезультатФункции.Вставить("Характеристика",				 НоваяХарактеристика);
		РезультатФункции.Вставить("ХарактеристикиИспользуются",	 НовыйХарактеристикиИспользуются);
		РезультатФункции.Вставить("Коэффициент",				 НовыйКоэффициент);
		РезультатФункции.Вставить("ЕдиницаИзмерения",			 НоменклатураВход.ЕдиницаИзмерения);
		РезультатФункции.Вставить("Цена",						 0);			// Для товарной категории не заданы цены.
		РезультатФункции.Вставить("СтавкаНДС",					 НоменклатураВход.СтавкаНДС);
		РезультатФункции.Вставить("КодОКПД2",					 НоменклатураВход.КодОКПД2);
		РезультатФункции.Вставить("ТоварнаяКатегория",			 НоменклатураВход);
	Иначе
		// Значение не указано. Вернём структуру по умолчанию.
		РезультатФункции.Вставить("Характеристика",				 ПустаяХарактеристика);
		РезультатФункции.Вставить("ХарактеристикиИспользуются",	 Ложь);
		РезультатФункции.Вставить("Коэффициент",				 1);
		РезультатФункции.Вставить("ЕдиницаИзмерения",			 ПустаяЕдиницаИзмерения);
		РезультатФункции.Вставить("Цена",						 0);
		РезультатФункции.Вставить("СтавкаНДС",					 ПустаяСтавкаНДС);
		РезультатФункции.Вставить("КодОКПД2",					 "");
		РезультатФункции.Вставить("ТоварнаяКатегория",			 ПустаяТоварнаяКатегория);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьДанныеПоНоменклатуре()

// Устанавливает сумму малых закупок из настроек организации по данным текущего документа.
&НаСервере
Процедура ВыставитьСуммуМалыхЗакупок()
	ТекДата = ТекущаяДатаСеанса();
	ДатаОкончанияПериодаЗакупки = ТекДата;
	Если ЗначениеЗаполнено(Объект.ПериодЗакупок) Тогда
		ДатаОкончанияПериодаЗакупки = Объект.ПериодЗакупок.ДатаОкончания;
	Иначе
		ДатаОкончанияПериодаЗакупки = ТекДата;
	КонецЕсли;
	ОрганизацияЗаказчик = Объект.ОрганизацияДляЗаключенияДоговора;
	СуммаМалыхЗакупок = РегистрыСведений.МалыеЗакупки.ПолучитьСуммуМалыхЗакупок(ОрганизацияЗаказчик, ДатаОкончанияПериодаЗакупки);
КонецПроцедуры		// ВыставитьСуммуМалыхЗакупок()

// Возвращает массив возможных значений перечисления, которые доступны
// для организаций, не ведущих учёт по 223-ФЗ.
&НаСервереБезКонтекста
Функция НеФз223ДоступныеДляВыбора()
	РезультатФункции = Перечисления.СпособыВыбораПоставщика.НеФз223ДоступныеДляВыбора();
	Возврат РезультатФункции;
КонецФункции		 // НеФз223ДоступныеДляВыбора()

// Возвращает массив товарных категорий, сопоставленных менеджеру ПользовательВход
// в организации ОрганизацияВход.
&НаСервереБезКонтекста
Функция ПолучитьМассивКатегорий(ПользовательВход, ОрганизацияВход)
	РезультатФункции = РегистрыСведений.ПолномочияКатегорийныхМенеджеров.ПолучитьТоварныеКатегорииПоМенеджеру(ПользовательВход, ОрганизацияВход);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивКатегорий()

// Добавляет условное оформление для колонок количества товарных категорий.
&НаСервере
Процедура УстановитьУсловноеОформлениеКоличестваПоГодам()
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	Для Каждого ТекЭлементы Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если ТекЭлементы.Представление= "ОтображениеНеЗаполняется" Тогда
			Для Каждого ТекМассивГоды Из МассивГоды Цикл
				ИмяПоля = "ПотребностиПоГодамГод" + Формат(ТекМассивГоды, "ЧГ=0") + "Количество";
				ПолеКоличество = Новый ПолеКомпоновкиДанных(ИмяПоля);
				НовыйЭлемент = ТекЭлементы.Поля.Элементы.Добавить();
				НовыйЭлемент.Использование = Истина;
				НовыйЭлемент.Поле = ПолеКоличество;
			КонецЦикла;	
		Иначе
			// Выполняем далее.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// УстановитьУсловноеОформлениеКоличестваПоГодам()

#КонецОбласти


#Область ВнешнийИнтерфейсДляРаботыКроссТаблицыПотребностей


&НаСервере
Процедура ЗаполнитьОбъектДляКроссТаблицыПотребностей(
									Контекст,
									ОбъектДляЗаполнения) Экспорт
	ЦентрализованныеЗакупкиУХ.ТиповоеЗаполнениеОбъектаДляКроссТаблицыПотребностей(
		Объект,
		ОбъектДляЗаполнения);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКроссТаблицы(Контекст) Экспорт
КонецПроцедуры

// Возвращает идентификатор строки потребности по годам по аналитикам строки ИсходнаяСтрокаВход.
&НаСервере
Функция ПолучитьИдентификаторСтрокиПоГодам(ИсходнаяСтрокаВход)
	РезультатФункции = "";
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",			 ИсходнаяСтрокаВход.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика",			 ИсходнаяСтрокаВход.Характеристика);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",		 ИсходнаяСтрокаВход.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("Коэффициент",				 ИсходнаяСтрокаВход.Коэффициент);
	СтруктураПоиска.Вставить("СтавкаНДС",				 ИсходнаяСтрокаВход.СтавкаНДС);
	СтруктураПоиска.Вставить("ТребуетсяОбоснованиеНМЦ",	 ИсходнаяСтрокаВход.ТребуетсяОбоснованиеНМЦ);
	СтруктураПоиска.Вставить("МестоПоставки",			 ИсходнаяСтрокаВход.МестоПоставки);
	СтруктураПоиска.Вставить("Проект",					 ИсходнаяСтрокаВход.Проект);
	СтруктураПоиска.Вставить("ДоговорСПокупателем",		 ИсходнаяСтрокаВход.ДоговорСПокупателем);
	СтруктураПоиска.Вставить("Менеджер",				 ИсходнаяСтрокаВход.Менеджер);
	СтруктураПоиска.Вставить("Организация",				 ИсходнаяСтрокаВход.Организация);
	СтруктураПоиска.Вставить("Приоритет",				 ИсходнаяСтрокаВход.Приоритет);
	СтруктураПоиска.Вставить("Цена",				 	 ИсходнаяСтрокаВход.Цена);
	
	НайденныеСтроки = ПотребностиПоГодам.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		РезультатФункции = ТекНайденныеСтроки.ИдентификаторСтроки;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьИдентификаторСтрокиПоГодам()

// Заполняет таблицу Расшифровка потребности по таблице ТаблицаВход.
&НаСервере
Процедура ЗаполнитьРасшифровкуПотребностей(ТаблицаВход)
	// Инициализация.
	ПериодичностьЗакупокМесяц = (ПериодичностьЦентрализованныхЗакупок = Перечисления.Периодичность.Месяц);
	ПериодичностьЗакупокКвартал = (ПериодичностьЦентрализованныхЗакупок = Перечисления.Периодичность.Квартал);
	// Свернём исходные данные.
	РасшифровкаПотребностей.Очистить();
	Свертка = ТаблицаВход.Скопировать();
	ИменаКлючевыхПолей = ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы;
	КлючевыеПоляРасш = ИменаКлючевыхПолей + ", ЕдиницаИзмерения, Коэффициент, СтавкаНДС, 
		|ТребуетсяОбоснованиеНМЦ, Цена, ЦенаПервоначальная";
	Свертка.Свернуть(КлючевыеПоляРасш + ", ПериодПотребности", "Количество, Сумма");
	// Добавим месяцы и годы.
	Свертка.Колонки.Добавить("Месяц");
	Свертка.Колонки.Добавить("Квартал");
	Свертка.Колонки.Добавить("Год");
	Для Каждого ТекСвертка Из Свертка Цикл
		ТекПериод = ТекСвертка.ПериодПотребности;
		Если ЗначениеЗаполнено(ТекПериод) Тогда
			ТекСвертка.Месяц	 = Месяц(ТекПериод.ДатаНачала);
			ТекСвертка.Год		 = Год(ТекПериод.ДатаНачала);
			ТекСвертка.Квартал	 = Цел((Месяц(ТекПериод.ДатаНачала) - 1) / 3) + 1;
		Иначе
			ТекСвертка.Месяц	 = 0;
			ТекСвертка.Год		 = 0;
			ТекСвертка.Квартал	 = 0;
		КонецЕсли;
	КонецЦикла;	
	Если ПериодичностьЗакупокМесяц Тогда
		Свертка.Свернуть(КлючевыеПоляРасш + ", Год, Месяц", "Количество, Сумма");
	ИначеЕсли ПериодичностьЗакупокКвартал Тогда
		Свертка.Свернуть(КлючевыеПоляРасш + ", Год, Квартал", "Количество, Сумма");
	Иначе
		Свертка.Свернуть(КлючевыеПоляРасш + ", Год", "Количество, Сумма");
	КонецЕсли;
	// Ищем данные для строк в исходных.
	КопияПоГодам = Свертка.Скопировать();
	КопияПоГодам.Свернуть(КлючевыеПоляРасш + ", Год", "Количество, Сумма");
	Для Каждого ТекКопияПоГодам Из КопияПоГодам Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Год",						 ТекКопияПоГодам.Год);
		СтруктураПоиска.Вставить("Номенклатура",			 ТекКопияПоГодам.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",			 ТекКопияПоГодам.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",		 ТекКопияПоГодам.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("Коэффициент",				 ТекКопияПоГодам.Коэффициент);
		СтруктураПоиска.Вставить("СтавкаНДС",				 ТекКопияПоГодам.СтавкаНДС);
		СтруктураПоиска.Вставить("ТребуетсяОбоснованиеНМЦ",	 ТекКопияПоГодам.ТребуетсяОбоснованиеНМЦ);
		СтруктураПоиска.Вставить("МестоПоставки",			 ТекКопияПоГодам.МестоПоставки);
		СтруктураПоиска.Вставить("Проект",					 ТекКопияПоГодам.Проект);
		СтруктураПоиска.Вставить("ДоговорСПокупателем",		 ТекКопияПоГодам.ДоговорСПокупателем);
		СтруктураПоиска.Вставить("Менеджер",				 ТекКопияПоГодам.Менеджер);
		СтруктураПоиска.Вставить("Организация",				 ТекКопияПоГодам.Организация);
		СтруктураПоиска.Вставить("Цена",					 ТекКопияПоГодам.Цена);
		СтруктураПоиска.Вставить("ЦенаПервоначальная",		 ТекКопияПоГодам.ЦенаПервоначальная);
		СтруктураПоиска.Вставить("Приоритет",				 ТекКопияПоГодам.Приоритет);
		НайденныеСтроки = Свертка.НайтиСтроки(СтруктураПоиска);
		НоваяСтрока = РасшифровкаПотребностей.Добавить();
		// Заполняем суммы по месяцам.
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			Если ПериодичностьЗакупокМесяц Тогда
				Если ТекНайденныеСтроки.Месяц = 1 Тогда
					НоваяСтрока.ЯнварьСумма			 = НоваяСтрока.ЯнварьСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ЯнварьКоличество	 = НоваяСтрока.ЯнварьКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 2 Тогда
					НоваяСтрока.ФевральСумма		 = НоваяСтрока.ФевральСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ФевральКоличество	 = НоваяСтрока.ФевральКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 3 Тогда
					НоваяСтрока.МартСумма		 = НоваяСтрока.МартСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.МартКоличество	 = НоваяСтрока.МартКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 4 Тогда
					НоваяСтрока.АпрельСумма			 = НоваяСтрока.АпрельСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.АпрельКоличество	 = НоваяСтрока.АпрельКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 5 Тогда
					НоваяСтрока.МайСумма		 = НоваяСтрока.МайСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.МайКоличество	 = НоваяСтрока.МайКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 6 Тогда
					НоваяСтрока.ИюньСумма		 = НоваяСтрока.ИюньСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ИюньКоличество	 = НоваяСтрока.ИюньКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 7 Тогда
					НоваяСтрока.ИюльСумма		 = НоваяСтрока.ИюльСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ИюльКоличество	 = НоваяСтрока.ИюльКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 8 Тогда
					НоваяСтрока.АвгустСумма			 = НоваяСтрока.АвгустСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.АвгустКоличество	 = НоваяСтрока.АвгустКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 9 Тогда
					НоваяСтрока.СентябрьСумма		 = НоваяСтрока.СентябрьСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.СентябрьКоличество	 = НоваяСтрока.СентябрьКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 10 Тогда
					НоваяСтрока.ОктябрьСумма		 = НоваяСтрока.ОктябрьСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ОктябрьКоличество	 = НоваяСтрока.ОктябрьКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 11 Тогда
					НоваяСтрока.НоябрьСумма			 = НоваяСтрока.НоябрьСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.НоябрьКоличество	 = НоваяСтрока.НоябрьКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Месяц = 12 Тогда
					НоваяСтрока.ДекабрьСумма		 = НоваяСтрока.ДекабрьСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ДекабрьКоличество	 = НоваяСтрока.ДекабрьКоличество + ТекНайденныеСтроки.Количество;
				Иначе
					// Неизвестный вариант. Пропускаем.
				КонецЕсли;
			ИначеЕсли ПериодичностьЗакупокКвартал Тогда
				Если ТекНайденныеСтроки.Квартал = 1 Тогда
					НоваяСтрока.ПервыйКварталСумма		 = НоваяСтрока.ПервыйКварталСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ПервыйКварталКоличество	 = НоваяСтрока.ПервыйКварталКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Квартал = 2 Тогда
					НоваяСтрока.ВторойКварталСумма		 = НоваяСтрока.ВторойКварталСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ВторойКварталКоличество	 = НоваяСтрока.ВторойКварталКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Квартал = 3 Тогда
					НоваяСтрока.ТретийКварталСумма		 = НоваяСтрока.ТретийКварталСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ТретийКварталКоличество	 = НоваяСтрока.ТретийКварталКоличество + ТекНайденныеСтроки.Количество;
				ИначеЕсли ТекНайденныеСтроки.Квартал = 4 Тогда
					НоваяСтрока.ЧетвертыйКварталСумма		 = НоваяСтрока.ЧетвертыйКварталСумма + ТекНайденныеСтроки.Сумма;
					НоваяСтрока.ЧетвертыйКварталКоличество	 = НоваяСтрока.ЧетвертыйКварталКоличество + ТекНайденныеСтроки.Количество;
				Иначе
					// Неизвестный вариант. Пропускаем.
				КонецЕсли;
			Иначе
				// Неизвестный вариант. Пропускаем.
			КонецЕсли;
			НоваяСтрока.Год					 = ТекНайденныеСтроки.Год;
			// Идентификатор строка будем искать в таблице Потребностей по годам на форме по совпадающим ключевым полям.
			НоваяСтрока.ИдентификаторСтроки	 = ПолучитьИдентификаторСтрокиПоГодам(ТекКопияПоГодам);
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьРасшифровкуПотребностей()

// Создаёт на форме реквизиты и элементы колонок потребностей по годам
// из массива МассивГодыВход.
&НаСервере
Процедура РазместитьКолонкиПотребностиПоГодам(МассивГодыВход)
	// Инициализация.
	Если Элементы.Найти("ПотребностиПоГодамГруппаКолонкиПоГодам") <> Неопределено тогда
		Для Каждого СтрЭлеменент из Элементы.ПотребностиПоГодамГруппаКолонкиПоГодам.ПодчиненныеЭлементы цикл
			Элементы.Удалить(СтрЭлеменент);
		КонецЦикла;			
	КонецЕсли;		
	Число152 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	Число153 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ТипЭлементаПолеФормы = Тип("ПолеФормы");
	МассивДобавляемых = Новый Массив;
	СоответствиеВрем = Новый Соответствие;
	Если ТипЗнч(СоответствиеРеквизитовПериодам) = Тип("ФиксированноеСоответствие") Тогда
		Для Каждого ТекСоответствиеРеквизитовПериодам Из СоответствиеРеквизитовПериодам Цикл
			СоответствиеВрем.Вставить(ТекСоответствиеРеквизитовПериодам.Ключ, ТекСоответствиеРеквизитовПериодам.Значение);
		КонецЦикла;	
	Иначе
		// Оставляем СоответствиеВрем пустым. СоответствиеРеквизитовПериодам будет проинициализировано позже.
	КонецЕсли;
	// Добавление реквизитов.
	ВыгрузкаПотребностей = ПотребностиПоГодам.Выгрузить();
	КолонкиПотребностей = ВыгрузкаПотребностей.Колонки;
	Для Каждого ТекМассивГоды Из МассивГодыВход Цикл
		ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
		// Колонка Количество.
		НаименованиеНовогоРеквизита = "Год" + ГодСтрока + "Количество";
		Если КолонкиПотребностей.Найти(НаименованиеНовогоРеквизита) = Неопределено Тогда
			ЗаголовокРеквизита = НСтр("ru = '%Год%, количество'");
			ЗаголовокРеквизита = СтрЗаменить(ЗаголовокРеквизита, "%Год%", ГодСтрока);
			НовыйРеквизитФормы = Новый РеквизитФормы(НаименованиеНовогоРеквизита, Число153, "ПотребностиПоГодам", ЗаголовокРеквизита);
			МассивДобавляемых.Добавить(НовыйРеквизитФормы);
		Иначе
			// Уже есть такая колонка. Пропускаем.
		КонецЕсли;
		// Колонка Сумма.
		НаименованиеНовогоРеквизита = "Год" + ГодСтрока + "Сумма";
		Если КолонкиПотребностей.Найти(НаименованиеНовогоРеквизита) = Неопределено Тогда
			ЗаголовокРеквизита = НСтр("ru = '%Год%, сумма'");
			ЗаголовокРеквизита = СтрЗаменить(ЗаголовокРеквизита, "%Год%", ГодСтрока);
			НовыйРеквизитФормы = Новый РеквизитФормы(НаименованиеНовогоРеквизита, Число152, "ПотребностиПоГодам", ЗаголовокРеквизита);
			МассивДобавляемых.Добавить(НовыйРеквизитФормы);
		Иначе
			// Уже есть такая колонка. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	ИзменитьРеквизиты(МассивДобавляемых);
	// Добавление элементов.
	Для Каждого ТекМассивГоды Из МассивГодыВход Цикл
		ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
		// Группа.    
		НаименованиеНовогоРеквизита = "ПотребностиПоГодамГруппа" + ГодСтрока;
		Если Элементы.Найти(НаименованиеНовогоРеквизита) = Неопределено Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Группировка", ГруппировкаКолонок.Вертикальная);
			НовыйЭлементГруппа = ФормыУХ.СоздатьГруппуФормы(
				Элементы, НаименованиеНовогоРеквизита, ГодСтрока, ВидГруппыФормы.ГруппаКолонок, Элементы.ПотребностиПоГодамГруппаКолонкиПоГодам, , СтруктураПараметров);
		Иначе
			// Элемент уже создан.
		КонецЕсли;
		// Колонка Сумма.
		НаименованиеЭлемента = "ПотребностиПоГодамГод" + ГодСтрока + "Сумма";
		Если Элементы.Найти(НаименованиеЭлемента) = Неопределено Тогда
			ЗаголовокРеквизита = НСтр("ru = '%Год%, сумма'");
			ЗаголовокРеквизита = СтрЗаменить(ЗаголовокРеквизита, "%Год%", ГодСтрока);
			ПутьКДанным = "ПотребностиПоГодам.Год" + ГодСтрока + "Сумма";
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПриИзменении", "ПотребностиПоГодамСуммаПриИзменении_Подключаемый");
			ФормыУХ.СоздатьПолеФормы(
				Элементы, НаименованиеЭлемента, ЗаголовокРеквизита, ПутьКДанным, ВидПоляФормы.ПолеВвода, 
				НовыйЭлементГруппа, , , СтруктураДействий);
			СоответствиеВрем.Вставить(НаименованиеЭлемента, ТекМассивГоды); 
		Иначе
			// Элемент уже создан.
		КонецЕсли;
		// Колонка Количество.   
		НаименованиеЭлемента = "ПотребностиПоГодамГод" + ГодСтрока + "Количество";
		Если Элементы.Найти(НаименованиеЭлемента) = Неопределено Тогда
			ЗаголовокРеквизита = НСтр("ru = '%Год%, количество'");
			ЗаголовокРеквизита = СтрЗаменить(ЗаголовокРеквизита, "%Год%", ГодСтрока);
			ПутьКДанным = "ПотребностиПоГодам.Год" + ГодСтрока + "Количество";
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПриИзменении", "ПотребностиПоГодамКоличествоПриИзменении_Подключаемый");
			ФормыУХ.СоздатьПолеФормы(
				Элементы, НаименованиеЭлемента, ЗаголовокРеквизита, ПутьКДанным, ВидПоляФормы.ПолеВвода, 
				НовыйЭлементГруппа, , , СтруктураДействий);
			СоответствиеВрем.Вставить(НаименованиеЭлемента, ТекМассивГоды);
		Иначе
			// Элемент уже создан.
		КонецЕсли;
	КонецЦикла;	  
	СоответствиеРеквизитовПериодам = Новый ФиксированноеСоответствие(СоответствиеВрем);
КонецПроцедуры		// РазместитьКолонкиПотребностиПоГодам

// Заполняет таблицу Потребности по годам по таблице ТаблицаВход.
&НаСервере
Процедура ЗаполнитьПотребностиПоГодам(ТаблицаВход)
	// Получение данных по годам.
	ДатаОбъявления = Объект.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = Объект.ДатаИсполненияДоговора;
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявления, ДатаИсполнения, Объект.ПериодЗакупок);
	ИменаКлючевыхПолей = ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы;
	// Добавление реквизитов.
	РазместитьКолонкиПотребностиПоГодам(МассивГоды);
	// Заполнение колонки Год.
	СверткаИсх = ТаблицаВход.Скопировать();
	КлючевыеПоляСПериодом = ИменаКлючевыхПолей + ", ЕдиницаИзмерения, Коэффициент, ПериодПотребности, 
		|СтавкаНДС, ТребуетсяОбоснованиеНМЦ, Цена, ЦенаПервоначальная";
	СверткаИсх.Свернуть(КлючевыеПоляСПериодом, "Сумма, Количество");
	СверткаИсх.Колонки.Добавить("Год");
	Для Каждого ТекСвертка Из СверткаИсх Цикл
		Если ЗначениеЗаполнено(ТекСвертка.ПериодПотребности) Тогда
			ТекСвертка.Год = Год(ТекСвертка.ПериодПотребности.ДатаНачала);
		Иначе
			ТекСвертка.Год = 0;
		КонецЕсли;
	КонецЦикла;	
	// Добавим строки по измерениям.
	ПотребностиПоГодам.Очистить();
	СверткаИзмерения = СверткаИсх.Скопировать();
	КлючевыеПоля = ИменаКлючевыхПолей + ", ЕдиницаИзмерения, Коэффициент, СтавкаНДС, ТребуетсяОбоснованиеНМЦ, 
		|Цена, ЦенаПервоначальная";
	СверткаИзмерения.Свернуть(КлючевыеПоля);
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ДатаКурса",			 Объект.ДатаКурса);
	СтруктураДополнительныхПараметров.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
	СтруктураДополнительныхПараметров.Вставить("ПериодЗакупок",		 Объект.ПериодЗакупок);
	Для Каждого ТекСверткаИзмерения Из СверткаИзмерения Цикл
		НоваяСтрока = ПотребностиПоГодам.Добавить();
		НоваяСтрока.Номенклатура				 = ТекСверткаИзмерения.Номенклатура;
		НоваяСтрока.Характеристика				 = ТекСверткаИзмерения.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения			 = ТекСверткаИзмерения.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент					 = ТекСверткаИзмерения.Коэффициент;
		НоваяСтрока.СтавкаНДС					 = ТекСверткаИзмерения.СтавкаНДС;
		НоваяСтрока.ТребуетсяОбоснованиеНМЦ		 = ТекСверткаИзмерения.ТребуетсяОбоснованиеНМЦ;
		НоваяСтрока.МестоПоставки				 = ТекСверткаИзмерения.МестоПоставки;
		НоваяСтрока.Проект						 = ТекСверткаИзмерения.Проект;
		НоваяСтрока.ДоговорСПокупателем			 = ТекСверткаИзмерения.ДоговорСПокупателем;
		НоваяСтрока.Менеджер					 = ТекСверткаИзмерения.Менеджер;
		НоваяСтрока.Организация					 = ТекСверткаИзмерения.Организация;
		НоваяСтрока.Цена						 = ТекСверткаИзмерения.Цена;
		НоваяСтрока.ЦенаПервоначальная			 = ТекСверткаИзмерения.ЦенаПервоначальная;
		НоваяСтрока.Приоритет					 = ТекСверткаИзмерения.Приоритет;
		НоваяСтрока.ИдентификаторСтроки			 = Строка(Новый УникальныйИдентификатор);
		ДанныеНоменклатуры = ПолучитьДанныеПоНоменклатуре(НоваяСтрока.Номенклатура, СтруктураДополнительныхПараметров);
		НоваяСтрока.ХарактеристикиИспользуются	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры, "ХарактеристикиИспользуются", Ложь);
	КонецЦикла;	
	// Заполнение таблицы ПотребностьПоГодам.
	КлючевыеПоляСГодом = ИменаКлючевыхПолей + ", ЕдиницаИзмерения, Коэффициент, Год, СтавкаНДС, 
		|ТребуетсяОбоснованиеНМЦ, Цена, ЦенаПервоначальная";
	СверткаГоды = СверткаИсх.Скопировать();
	СверткаГоды.Свернуть(КлючевыеПоляСГодом, "Сумма, Количество");
	Для Каждого ТекПотребностиПоГодам Из ПотребностиПоГодам Цикл
		Для Каждого ТекМассивГоды Из МассивГоды Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Год",						 ТекМассивГоды);
			СтруктураПоиска.Вставить("Номенклатура",			 ТекПотребностиПоГодам.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",			 ТекПотребностиПоГодам.Характеристика);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения",		 ТекПотребностиПоГодам.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("Коэффициент",				 ТекПотребностиПоГодам.Коэффициент);
			СтруктураПоиска.Вставить("СтавкаНДС",				 ТекПотребностиПоГодам.СтавкаНДС);
			СтруктураПоиска.Вставить("ТребуетсяОбоснованиеНМЦ",	 ТекПотребностиПоГодам.ТребуетсяОбоснованиеНМЦ);
			СтруктураПоиска.Вставить("МестоПоставки",			 ТекПотребностиПоГодам.МестоПоставки);
			СтруктураПоиска.Вставить("Проект",					 ТекПотребностиПоГодам.Проект);
			СтруктураПоиска.Вставить("ДоговорСПокупателем",		 ТекПотребностиПоГодам.ДоговорСПокупателем);
			СтруктураПоиска.Вставить("Менеджер",				 ТекПотребностиПоГодам.Менеджер);
			СтруктураПоиска.Вставить("Организация",				 ТекПотребностиПоГодам.Организация);
			СтруктураПоиска.Вставить("Цена",					 ТекПотребностиПоГодам.Цена);
			СтруктураПоиска.Вставить("ЦенаПервоначальная",		 ТекПотребностиПоГодам.ЦенаПервоначальная);
			НайденныеСтроки = СверткаГоды.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0");
				ТекПотребностиПоГодам["Год" + ГодСтрока + "Сумма"]		 = ТекНайденныеСтроки.Сумма;
				ТекПотребностиПоГодам["Год" + ГодСтрока + "Количество"]	 = ТекНайденныеСтроки.Количество;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьРасшифровкуПотребностей()

// Заполняет таблицы потребностей на форме.
&НаСервере
Процедура ЗаполнитьТаблицыПотребностей(ТаблицаВход)
	ЗаполнитьПотребностиПоГодам(ТаблицаВход);
	ЗаполнитьРасшифровкуПотребностей(ТаблицаВход);
КонецПроцедуры		// ЗаполнитьТаблицыПотребностей()

&НаСервере
Процедура СкопироватьВКроссТаблицу(Контекст) Экспорт
	ПотребностиВНоменклатуреПоПериодам.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.ПериодЗакупок) Тогда
		Возврат;
	КонеЦЕсли;
	РезультатЗапроса = ПолучитьРезультатЗапросаТЧНоменклатурыПоПериодам(
		Объект.Номенклатура, ЭтаФорма[Контекст.ИмяТаблицыПериодов],	Контекст.ИменаКлючевыхПолейКроссТаблицы);
	ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(РезультатЗапроса);
	ОбновитьИтоговыеРеквизитыФормыПоКроссТаблице(ЭтаФорма);
	// Потребности.
	Выгрузка = РезультатЗапроса.Выгрузить();
	ЗаполнитьТаблицыПотребностей(Выгрузка);
	РассчитатьОтносительныеОтклоненияЦен(ПотребностиПоГодам);
КонецПроцедуры

// Распределяет сумму СуммаВход в расшифровке по строке, заданной отбором СтруктураОтбораВход,
// пропорционально количеству периодов.
&НаСервере
Процедура РаспределитьРасшифровкуСуммыПропорционально(СтруктураОтбораВход, СуммаВход)
	ПериодичностьМесяц		 = Перечисления.Периодичность.Месяц;
	ПериодичностьКвартал	 = Перечисления.Периодичность.Квартал;
	Если СтруктураОтбораВход.Свойство("Год") Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Год", СтруктураОтбораВход.Год);
		НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			Если ПериодичностьЦентрализованныхЗакупок = ПериодичностьМесяц Тогда
				// Распределение по месяцам.
				Частное = Цел(СуммаВход / 12);			// По числу месяцев.
				ТекНайденныеСтроки.ЯнварьСумма		 = Частное;
				ТекНайденныеСтроки.ФевральСумма		 = Частное;
				ТекНайденныеСтроки.МартСумма		 = Частное;
				ТекНайденныеСтроки.АпрельСумма		 = Частное;
				ТекНайденныеСтроки.МайСумма			 = Частное;
				ТекНайденныеСтроки.ИюньСумма		 = Частное;
				ТекНайденныеСтроки.ИюльСумма		 = Частное;
				ТекНайденныеСтроки.АвгустСумма		 = Частное;
				ТекНайденныеСтроки.СентябрьСумма	 = Частное;
				ТекНайденныеСтроки.ОктябрьСумма		 = Частное;
				ТекНайденныеСтроки.НоябрьСумма		 = Частное;
				ТекНайденныеСтроки.ДекабрьСумма		 = Частное;
				ВсегоРаспределено = 12 * Частное;
				Остаток = СуммаВход - ВсегоРаспределено;
				ТекНайденныеСтроки.ДекабрьСумма	= ТекНайденныеСтроки.ДекабрьСумма + Остаток;
			ИначеЕсли ПериодичностьЦентрализованныхЗакупок = ПериодичностьКвартал Тогда
				// Распределение по кварталам.
				Частное = Цел(СуммаВход / 4);			// По числу кварталов.
				ТекНайденныеСтроки.ПервыйКварталСумма		 = Частное;
				ТекНайденныеСтроки.ВторойКварталСумма		 = Частное;
				ТекНайденныеСтроки.ТретийКварталСумма		 = Частное;
				ТекНайденныеСтроки.ЧетвертыйКварталСумма	 = Частное;
				ВсегоРаспределено = 4 * Частное;
				Остаток = СуммаВход - ВсегоРаспределено;
				ТекНайденныеСтроки.ЧетвертыйКварталСумма	= ТекНайденныеСтроки.ЧетвертыйКварталСумма + Остаток;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не установлена периодичность закупок. Распределение невозможно.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Нет отбора по году.
	КонецЕсли;
КонецПроцедуры		// РаспределитьРасшифровкуПропорционально()

// Распределяет количество КоличествоВход в расшифровке по строке, заданной отбором СтруктураОтбораВход,
// пропорционально количеству периодов.
&НаСервере
Процедура РаспределитьРасшифровкуКоличествоПропорционально(СтруктураОтбораВход, КоличествоВход)
	ПериодичностьМесяц		 = Перечисления.Периодичность.Месяц;
	ПериодичностьКвартал	 = Перечисления.Периодичность.Квартал;
	Если СтруктураОтбораВход.Свойство("Год") Тогда
		НайденныеСтроки = РасшифровкаПотребностей.НайтиСтроки(СтруктураОтбораВход);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			Если ПериодичностьЦентрализованныхЗакупок = ПериодичностьМесяц Тогда
				// Распределение по месяцам.
				Частное = Цел(КоличествоВход / 12);			// По числу месяцев.
				ТекНайденныеСтроки.ЯнварьКоличество		 = Частное;
				ТекНайденныеСтроки.ФевральКоличество	 = Частное;
				ТекНайденныеСтроки.МартКоличество		 = Частное;
				ТекНайденныеСтроки.АпрельКоличество		 = Частное;
				ТекНайденныеСтроки.МайКоличество		 = Частное;
				ТекНайденныеСтроки.ИюньКоличество		 = Частное;
				ТекНайденныеСтроки.ИюльКоличество		 = Частное;
				ТекНайденныеСтроки.АвгустКоличество		 = Частное;
				ТекНайденныеСтроки.СентябрьКоличество	 = Частное;
				ТекНайденныеСтроки.ОктябрьКоличество	 = Частное;
				ТекНайденныеСтроки.НоябрьКоличество		 = Частное;
				ТекНайденныеСтроки.ДекабрьКоличество	 = Частное;
				ВсегоРаспределено = 12 * Частное;
				Остаток = КоличествоВход - ВсегоРаспределено;
				ТекНайденныеСтроки.ДекабрьКоличество	= ТекНайденныеСтроки.ДекабрьКоличество + Остаток;
			ИначеЕсли ПериодичностьЦентрализованныхЗакупок = ПериодичностьКвартал Тогда
				// Распределение по кварталам.
				Частное = Цел(КоличествоВход / 4);			// По числу кварталов.
				ТекНайденныеСтроки.ПервыйКварталКоличество		 = Частное;
				ТекНайденныеСтроки.ВторойКварталКоличество		 = Частное;
				ТекНайденныеСтроки.ТретийКварталКоличество		 = Частное;
				ТекНайденныеСтроки.ЧетвертыйКварталКоличество	 = Частное;
				ВсегоРаспределено = 4 * Частное;
				Остаток = КоличествоВход - ВсегоРаспределено;
				ТекНайденныеСтроки.ЧетвертыйКварталКоличество	= ТекНайденныеСтроки.ЧетвертыйКварталКоличество + Остаток;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не установлена периодичность закупок. Распределение невозможно.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Нет отбора по году.
	КонецЕсли;
КонецПроцедуры		// РаспределитьРасшифровкуКоличествоПропорционально()

&НаКлиенте
Процедура ПриИзмененииКоличестваСуммыСтроки(ЦенаВключаетНдсВход, ДатаОбъявленияВход, ДатаИсполненияВход, СтрокаИзм, ПересчитыватьСуммыВход = Истина) Экспорт
	// Итоговые значения по строке.										
	МассивГоды = СоздатьМассивЛетМеждуДатами(ДатаОбъявленияВход, ДатаИсполненияВход, Объект.ПериодЗакупок);
	Количество = 0;
	Сумма = 0;
	Для Каждого ТекМассивГоды Из МассивГоды Цикл
		ГодСтрока = Формат(ТекМассивГоды, "ЧГ=0"); 
		// Сумма по строке.
		ИмяКолонкиСумма = "Год" + ГодСтрока + "Сумма";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИзм, ИмяКолонкиСумма) Тогда
			Сумма = Сумма + СтрокаИзм[ИмяКолонкиСумма];
		Иначе
			ТекстСообщения = НСтр("ru = 'Не найдена колонка %ИмяКолонки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКолонки%", Строка(ИмяКолонкиСумма));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		СтрокаИзм.Сумма = Сумма;
		// Количество по строке.
		ИмяКолонкиКоличество = "Год" + ГодСтрока + "Количество";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИзм, ИмяКолонкиКоличество) Тогда
			Количество = Количество + СтрокаИзм[ИмяКолонкиКоличество];
		Иначе
			ТекстСообщения = НСтр("ru = 'Не найдена колонка %ИмяКолонки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКолонки%", Строка(ИмяКолонкиКоличество));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		СтрокаИзм.Количество = Количество;
		// Сумма в расшифровке.
		Если ТипЗнч(СтрокаИзм.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			РассчитатьСуммыРасшифровки(СтрокаИзм.ИдентификаторСтроки, ТекМассивГоды);
		Иначе
			// Не требуется рассчёт сумм по строке.
		КонецЕсли;
	КонецЦикла;
	// НДС по строке.
	ЦентрализованныеЗакупкиКлиентСерверУХ.РасчитатьНДССтроки(ЦенаВключаетНдсВход, СтрокаИзм);
	Если ПересчитыватьСуммыВход Тогда
		ОбновитьСуммуДокументаИзКроссТаблицы();
	Иначе
		// Не требуется пересчёт.
	КонецЕсли;
КонецПроцедуры		// ПриИзмененииКоличестваСуммыСтроки()

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличества(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииКоличестваКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ОбновитьСуммуДокументаИзКроссТаблицы();
	ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(
		Элементы.ПотребностиВНоменклатуреПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦены(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииЦеныКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(
		Элементы.ПотребностиВНоменклатуреПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииСуммыКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	СтрокаТоваров = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
	Если СтрокаТоваров <> Неопределено
		 И СтрокаТоваров.ЭтоКатегорияНоменклатуры Тогда
		ОбновитьСуммуДокументаИзКроссТаблицы();
		ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(
			Элементы.ПотребностиВНоменклатуреПоПериодам);
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру данных по особым условиям закупки.
&НаСервереБезКонтекста
Функция ДанныеСтрокиСОсобымПорядкомЗакупки(СтруктураДанныхВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ТребуетсяОбоснование", Ложь);
	ПустаяОрганизация	 = Справочники.Организации.ПустаяСсылка();
	ПустаяНоменклатура	 = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяКатегория		 = Справочники.ТоварныеКатегории.ПустаяСсылка();
	ПустоеМестоПоставки	 = Справочники.МестаПоставки.ПустаяСсылка();
	ПустойПериоритет	 = Справочники.ПриоритетыПотребностей.ПустаяСсылка();
	ПустойПроект		 = Справочники.Проекты.ПустаяСсылка();
	ПустойМенеджер		 = Справочники.ФизическиеЛица.ПустаяСсылка();
	ПустойДоговор		 = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ПериодЗакупки		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ПериодЗакупки", Справочники.Периоды.ПустаяСсылка());
	ТаблицаПотребностей = Новый ТаблицаЗначений;
	ТаблицаПотребностей.Колонки.Добавить("ОрганизацияЗаказчик");
	ТаблицаПотребностей.Колонки.Добавить("Организация");
	ТаблицаПотребностей.Колонки.Добавить("Номенклатура");
	ТаблицаПотребностей.Колонки.Добавить("Характеристика");
	ТаблицаПотребностей.Колонки.Добавить("ТоварнаяКатегория");
	ТаблицаПотребностей.Колонки.Добавить("ОКПД2");
	ТаблицаПотребностей.Колонки.Добавить("МестоПоставки");
	ТаблицаПотребностей.Колонки.Добавить("Приоритет");
	ТаблицаПотребностей.Колонки.Добавить("Проект");
	ТаблицаПотребностей.Колонки.Добавить("Менеджер");
	ТаблицаПотребностей.Колонки.Добавить("Назначение");
	НоваяСтрока = ТаблицаПотребностей.Добавить();
	НоваяСтрока.ОрганизацияЗаказчик	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ОрганизацияЗаказчик", ПустаяОрганизация);
	НоваяСтрока.Организация			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Организация", ПустаяОрганизация);
	НоваяСтрока.Номенклатура		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Номенклатура", ПустаяНоменклатура);
	НоваяСтрока.Характеристика		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Характеристика", Неопределено);
	НоваяСтрока.ТоварнаяКатегория	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ТоварнаяКатегория", ПустаяКатегория);
	НоваяСтрока.ОКПД2				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ОКПД2", "");
	НоваяСтрока.МестоПоставки		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "МестоПоставки", ПустоеМестоПоставки);
	НоваяСтрока.Приоритет			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Периоритет", ПустойПериоритет);
	НоваяСтрока.Проект				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Проект", ПустойПроект);
	НоваяСтрока.Менеджер			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Менеджер", ПустойМенеджер);
	НоваяСтрока.Назначение			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Договор", ПустойДоговор);
	РегистрыСведений.ПараметрыЗакупкиПотребностей1.ДополнитьТаблицуПотребностейПараметрамиЗакупки(ПериодЗакупки, ТаблицаПотребностей);
	ТребуетсяОбоснование = Ложь;
	Если ТаблицаПотребностей.Количество() > 0 Тогда
		ПерваяСтрока = ТаблицаПотребностей[0];
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПерваяСтрока, "Результат") Тогда
			РезультатВычисления = ПерваяСтрока.Результат;
			Если ЗначениеЗаполнено(ПерваяСтрока.Результат) Тогда
				КлючТребуетсяОбоснование = ПланыВидовХарактеристик.ПараметрыЗакупки.Обоснование;
				СтруктураОбоснование = РезультатВычисления.Получить(КлючТребуетсяОбоснование);
				Если ТипЗнч(СтруктураОбоснование) = Тип("Структура") Тогда
					ТребуетсяОбоснование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбоснование, "Значение", Ложь);
				Иначе
					ТребуетсяОбоснование = Ложь;
				КонецЕсли;
			Иначе
				ТребуетсяОбоснование = Ложь;
			КонецЕсли;
		Иначе
			ТребуетсяОбоснование = Ложь;
		КонецЕсли;
	Иначе
		ТребуетсяОбоснование = Ложь;
	КонецЕсли;
	РезультатФункции.Вставить("ТребуетсяОбоснование", ТребуетсяОбоснование);
	Возврат РезультатФункции;
КонецФункции		// ДанныеСтрокиСОсобымПорядкомЗакупки()

#КонецОбласти


#Область РаботаСКроссТаблицейПотребностей

			
&НаСервере
Процедура ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(РезультатЗапроса)
	ЦентрализованныеЗакупкиУХ.ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		ПотребностиВНоменклатуреПоПериодам, 
		РезультатЗапроса,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ИменаКлючевыхПолейКроссТаблицы);
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьИтоговыеПоказателиКроссТаблицы(
		ПотребностиВНоменклатуреПоПериодам,
		ЭтаФорма.ПериодыЗакупок,
		Объект.ЦенаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамНоменклатураПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикНоменклатураПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	УстановитьРеквизитыОбъектаПоНоменклатуреСОсбымПорядкомЗакупки(
		ОбщегоНазначенияКлиентСерверУХ.ЗначениеВМассиве(
			Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущаяСтрока));
	ЗаполнениеПервоначальнойЦеныПриИзмененииЦены(
		Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные);
	ОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамХарактеристикаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикХарактеристикаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамЕдиницаИзмеренияПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЕдиницаИзмеренияПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамЦенаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЦенаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ТекущаяСтрока = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
	ЗаполнениеПервоначальнойЦеныПриИзмененииЦены(ТекущаяСтрока);
	ОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамСтавкаНДСПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикСтавкаНДСПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры
	
&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПередНачаломДобавления(
														Элемент, 
														Отказ, 
														Копирование, 
														Родитель, 
														Группа, 
														Параметр)
	Если НЕ Объект.ВнеПлановойПотребности Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекДанные = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.Приоритет = ПредопределенноеЗначение("Справочник.ПриоритетыПотребностей.Обычный");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПослеУдаления(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма,
		"ПотребностиВНоменклатуреПоПериодам");
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамПриАктивизацииЯчейки(Элемент)
	
	АктивныеПериоды = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(Новый Структура("Активная", Истина));
	Если АктивныеПериоды.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ПотребностиВНоменклатуреПоПериодам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоПоКолонке = "";
	ИтогоПоСтроке = НСтр("ru='Всего по строке: %СуммаПоСтроке% %Валюта%.'");
		
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%Валюта%", Строка(Объект.ВалютаДокумента));
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%СуммаПоСтроке%", Формат(ТекущиеДанные.Сумма, "ЧДЦ=2; ЧН=0,00"));
	
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		Для каждого Период Из АктивныеПериоды Цикл
			Если Элемент.ТекущийЭлемент.Имя = "ПотребностиВНоменклатуреПоПериодамЦена_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "ПотребностиВНоменклатуреПоПериодамКоличество_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "ПотребностиВНоменклатуреПоПериодамСумма_"+Период.ИмяКолонки Тогда
				
				СуммаПоКолонке = ЭтаФорма["ПотребностиВНоменклатуреПоПериодамСумма_"+ Период.ИмяКолонки];
				ИтогоПоКолонке = НСтр("ru='Всего за период %ПериодЗаголовок%: %СуммаПоКолонке% %Валюта%'");
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%ПериодЗаголовок%", Период.Заголовок);
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%СуммаПоКолонке%", Формат(СуммаПоКолонке, "ЧДЦ=2; ЧН=0,00"));
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%Валюта%", Строка(Объект.ВалютаДокумента));
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИтогоПоСтрокеКолонке = ИтогоПоСтроке + " " + ИтогоПоКолонке;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если (Элементы.ПотребностиВНоменклатуреПоПериодамНоменклатура.ТолькоПросмотр = Истина
			ИЛИ Элементы.ГруппаНоменклатура.ТолькоПросмотр = Истина)
		 И Поле.Имя = "ПотребностиВНоменклатуреПоПериодамНоменклатура" Тогда
		ЦентрализованныеЗакупкиКлиентУХ.ОткрытьФормуНоменклатурыСтрокиКроссТаблицы(
			ПотребностиВНоменклатуреПоПериодам,
			ВыбраннаяСтрока,
			ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиВНоменклатуреПоПериодамОбработкаВыбора(
												Элемент, 
												ВыбранноеЗначение, 
												СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораПотребностей(ВыбранноеЗначение, Элемент);
КонецПроцедуры


#КонецОбласти


#Область ШаблоныЗаполнения


// Получает структуру шаблона по текущему объекту.
&НаСервере
Функция ВернутьСтруктураДанныхОбъектаШаблона()
	ОбъектШаблона = РеквизитФормыВЗначение("Объект");
	СтруктураДанныхОбъекта = УправлениеШаблонамиЗаполненияУХ.СтруктураДанныхОбъектаШаблонаПоОбъекту(ОбъектШаблона);
	Возврат СтруктураДанныхОбъекта;
КонецФункции

// Выполняет заполнение реквизитов формы по шаблону заполнения ШаблонВход.
&НаСервере
Процедура ЗаполнитьФормуПоШаблону(ШаблонВход)
	КонтекстСохранения = Неопределено;
    ОбъектШаблона = ПолучитьСтрокуОбъектИзРеквизитаФормы(КонтекстСохранения);
    ЗаполненныйОбъект = УправлениеШаблонамиЗаполненияУХ.ЗаполнитьИзШаблона(ШаблонВход, ОбъектШаблона);
    ПоместитьСтрокуОбъектВРеквизитФормы(ЗаполненныйОбъект, КонтекстСохранения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)
	СтруктураДанныхОбъектаШаблона = ВернутьСтруктураДанныхОбъектаШаблона();	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", СтруктураДанныхОбъектаШаблона.Назначение);
	ПараметрыФормы.Вставить("ИмяОбъекта", СтруктураДанныхОбъектаШаблона.ИмяОбъекта);
	ПараметрыФормы.Вставить("АналитикаОтбора", Объект.ОрганизацияДляЗаключенияДоговора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ШаблоныЗаполнения.ФормаВыбора", ПараметрыФормы, ЭтаФорма);		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВШаблон(Команда)
	УправлениеШаблонамиЗаполненияКлиентУХ.СохранитьВШаблон(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ШаблоныЗаполнения") Тогда
		ЗаполнитьФормуПоШаблону(ВыбранноеЗначение);
		УправлениеШаблонамиЗаполненияКлиентУХ.ПослеЗаполненияПоШаблону(ЭтаФорма, ВыбранноеЗначение);
		ЗаголовокПредупреждения = НСтр("ru = 'Заполнение'");
		ТекстПредупреждения = НСтр("ru = 'Текущий объект заполнен по шаблону %ШаблонЗаполнения%'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ШаблонЗаполнения%", Строка(ВыбранноеЗначение));
		ПоказатьОповещениеПользователя(ЗаголовокПредупреждения, , ТекстПредупреждения, БиблиотекаКартинок.Успешно32);
	Иначе
	// Не выбран шаблон. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область УниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектФормыУтвержден(Форма)
	РезультатФункции = Ложь;
	СостоянияУтвержден = Новый Массив;
	СостоянияУтвержден.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Утвержден"));
	СостоянияУтвержден.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Выгружен"));
	СостоянияУтвержден.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Размещен"));
	ТекСостояние = РеквизитСостояниеЗаявки(Форма);
	РезультатФункции = (СостоянияУтвержден.Найти(ТекСостояние) <> Неопределено);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура УстановитьДоступностьПанелиСогласования(ТолькоПросмотр)
	ЕстьГруппаСтатусы = 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма.Элементы, "ГруппаСтатусыСогласования");
	Если ЕстьГруппаСтатусы Тогда
		НовоеСостояниеПросмотра = (Элементы.ГруппаСтатусыСогласования.ТолькоПросмотр И ТолькоПросмотр);
		Элементы.ГруппаСтатусыСогласования.ТолькоПросмотр = НовоеСостояниеПросмотра;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ПрикрепленныеФайлыНаКлиенте


&НаКлиенте
Процедура ОткрытьСоздатьНовыйФайл(ИмяРеквизита)
	
	Если Объект[ИмяРеквизита].Пустая() Тогда
		СоздатьНовыйПрикрепленныйФайл(Объект.Ссылка.Пустая(),ИмяРеквизита);
	Иначе
		ОткрытьФайлДляПросмотра(Объект[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйПрикрепленныйФайл(ЭтоНовый, ИмяЭлемента)
	
	НаименованиеРеквизитаДляЗапись_ПрисоединенныйФайл = ИмяЭлемента;
	ДополнительныеПараметры = Новый Структура("ЭтоНовый",ЭтоНовый);
	Если ЭтоНовый Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеНовогоПрикрепленногоФайлаЗавершение",ЭтотОбъект,ДополнительныеПараметры); 
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
						|Выполнение действия ""Присоединенные файлы"" возможно только после записи данных.
						|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СозданиеНовогоПрикрепленногоФайлаЗавершение(КодВозвратаДиалога.Да,ДополнительныеПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовогоПрикрепленногоФайлаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = КодВозвратаДиалога.Да
			И (Не ДополнительныеПараметры.ЭтоНовый 
				Или ДополнительныеПараметры.ЭтоНовый 
				И Записать()) Тогда
		РаботаСФайламиКлиент.ДобавитьФайлы(
			Объект.Ссылка, 
			УникальныйИдентификатор);
		УстановитьОформлениеОбоснованияНМЦ(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(ФайлДляПросмотра)
	
	Если ФайлЗашифрован(ФайлДляПросмотра) Тогда
		Возврат;
	КонецЕсли;
	
	ВходитВПереченьЗапрещенныхРасширений = ПроверитьВходитВПереченьЗапрещенныхРасширений(ФайлДляПросмотра);
	ДополнительныеПараметры = Новый Структура("ФайлДляПросмотра",ФайлДляПросмотра);
	Если ВходитВПереченьЗапрещенныхРасширений Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	Иначе
		ОткрытьФайлПослеПодтверждения("Продолжить",ДополнительныеПараметры);
	КонецЕсли;
	     	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ФайлДляПросмотра = ДополнительныеПараметры.ФайлДляПросмотра;
	
	Если РезультатВыбора = "Продолжить" Тогда
		ДанныеФайла = ПолучитьДанныеФайла(ФайлДляПросмотра, УникальныйИдентификатор);
		ФайлРедактируется = ФайлРедактируется(ФайлДляПросмотра);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ПрикрепленныеФайлыНаСервере


&НаСервереБезКонтекста
Функция ФайлЗашифрован(ФайлДляПросмотра)
	
	Возврат ФайлДляПросмотра.Зашифрован;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлРедактируется(ФайлДляПросмотра)
	
	Возврат ЗначениеЗаполнено(ФайлДляПросмотра.Редактирует) И ФайлДляПросмотра.Редактирует = Пользователи.АвторизованныйПользователь();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВходитВПереченьЗапрещенныхРасширений(ФайлДляПросмотра)
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	Возврат ЗапрещенныеРасширения.НайтиПоЗначению(ФайлДляПросмотра.Расширение) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
	Знач ИдентификаторФормы = Неопределено,
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

// Когда флаг ФлагОтображенияВход - истина, устанавливает элементу ЭлементИзм
// подсказку ввода ПодсказкаВход. Иначе устанавливает пустую подсказку.
&НаКлиенте
Процедура УстановитьПодсказкуВводаПоУсловию(ПодсказкаВход, ФлагОтображенияВход, ЭлементИзм)
	Если ФлагОтображенияВход Тогда
		ЭлементИзм.ПодсказкаВвода = ПодсказкаВход;
	Иначе
		ЭлементИзм.ПодсказкаВвода = "";
	КонецЕсли;
КонецПроцедуры		// УстановитьПодсказкуВводаПоУсловию()





#КонецОбласти
