#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	

#Область ОбработчикиСобытийОбъекта


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	ЗаполнитьДвиженияПланаПотребностейВНоменклатуре();
	ЗаполнитьДвиженияРегистрСтрокиПланаЗакупок();
	ЗаполнитьДвиженияНМЦСтрокиПланаЗакупок();
	ЗаполнитьДвиженияВерсииОбъектовЕИС();
	Если НЕ ВнеПлановойПотребности Тогда
		Движения.Записать();
		ПроверитьОтменитьПоПлануПотребностей(Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(Ссылка) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Запрещено отменять проведение утвержденного документа.'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьСообщитьВводВерсииСтрокиПлана(Отказ)
			ИЛИ ПроверитьСообщитьЗаполненПорядокФормированияЦеныДоговора(
												РежимЗаписи, Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ПроверитьЗаполнениеХарактеристикОтменить(Отказ) Тогда
			Возврат;
		КонецЕсли;
		// "Забираем" свободный номер только в момент проведения.
		УстановитьНомерВГПЗ();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СуммаВВалютеРегламентированногоУчета) И ЗначениеЗаполнено(СуммаДокумента) Тогда
		УстановитьВалютуИКурсДокумента();
	Иначе
		// Не требуется пересчёт.
	КонецЕсли;
	УстановитьИдентификаторСтрокиПланаЗакупок();
	УстановитьФлагТребуетсяОбоснованиеНМЦ();
	Если (ЕдиноеМестоПоставки) И (НЕ ЗначениеЗаполнено(МестоПоставки)) И (Номенклатура.Количество() > 0) Тогда
		МестоПоставки = Номенклатура[0].МестоПоставки;
	Иначе
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	ТипЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипЗаполнения = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗаполнения = Тип("ДокументСсылка.СтрокаПланаЗакупок") Тогда
		Если НЕ ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(ДанныеЗаполнения) 
					И НЕ ДанныеЗаполнения.Проведен Тогда
			ВызватьИсключение НСтр(
				"ru='Нельзя корректировать неутвержденную строку плана закупок!'");
		ИначеЕсли НЕ Документы.СтрокаПланаЗакупок.ЭтоАктуальнаяВерсия(ДанныеЗаполнения) Тогда
			ВызватьИсключение НСтр(
				"ru='Нельзя повторно корректировать уже скорректированную строку плана закупок!'");
		КонецЕсли;
		ЗаполнитьПоПредыдущейВерсииСтроки(ДанныеЗаполнения);
	КонецЕсли;
	УстановитьНомерВерсии();
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	УстановитьВалютуИКурсДокумента();
	#Область ШаблоныЗаполнения
	// Заполнение по шаблону.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныЗаполнения") Тогда
		УправлениеШаблонамиЗаполненияУХ.ЗаполнитьИзШаблона(ДанныеЗаполнения, ЭтотОбъект);
	КонецЕсли;
	#КонецОбласти
	ВыставитьИтоговыеСуммы();
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Инциализация.
	ЗакупкаПоФЗ223 = ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223;
	ЕстьОснование = ЗначениеЗаполнено(ДокументОснование);
	ЕстьОбоснование = ЗначениеЗаполнено(ОбоснованиеИзменений);
	// Проверяемые реквизиты.
	МассивНепроверяемыхРеквизитов = Новый Массив();
	Если Документы.СтрокаПланаЗакупок.ЭтоФЗ223(ЭтотОбъект) Тогда
		ПроверяемыеРеквизиты.Добавить("ПорядокФормированияЦеныДоговора");
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВалютаДокумента <>	ВалютаРегл Тогда
			ПроверяемыеРеквизиты.Добавить("СуммаВВалютеРегламентированногоУчета");
			ПроверяемыеРеквизиты.Добавить("КурсВалюты");
			ПроверяемыеРеквизиты.Добавить("ДатаКурса");
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	// Проверим заполнение Обоснования.
	Если (ЕстьОснование) И (ЗакупкаПоФЗ223) И (НЕ ЕстьОбоснование) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено Обоснование изменений для версии строки плана закупки. Запись отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
	// Проверим заполнение закладки Финансирование для закупки у МСП.
	Если ЗакупкаПоФЗ223 Тогда
		Если (ПриоритетУчастияМалогоИСреднегоПредпринимательства) И (Финансирование.Количество() = 0) Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для способа закупки ""%СпособЗакупки%"" требуется заполнение данных по финансированию. Запись отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособЗакупки%", Строка(СпособВыбораПоставщика));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
	Иначе
		// Не закупко по ФЗ-223. Проверка не требуется.
	КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СброситьУникальныеРеквизиты();
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры



#КонецОбласти

// Возвращает структуру итоговых сумм для текущего документа.
Функция РассчитатьИтоговыйСуммы() Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СуммаДокумента", 0);
	РезультатФункции.Вставить("СуммаКонтракта", 0);
	РезультатФункции.Вставить("СуммаКонтрактаВВалютеРегламентированногоУчета", 0);
	РезультатФункции.Вставить("СуммаНДС", 0);
	// Сумма документа.
	Если ЗначениеЗаполнено(ПериодЗакупок) Тогда
		ГодЗакупок = Год(ПериодЗакупок.ДатаНачала);
		ИтогСуммаДокумента = 0;
		Для Каждого ТекНоменклатура Из Номенклатура Цикл
			ТекДатаНачала = ТекНоменклатура.ПериодПотребности.ДатаНачала;
			ГодДатаНачала = Год(ТекДатаНачала);
			Если ГодДатаНачала = ГодЗакупок Тогда
				ИтогСуммаДокумента = ИтогСуммаДокумента + ТекНоменклатура.Сумма;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;	
		РезультатФункции.Вставить("СуммаДокумента", ИтогСуммаДокумента);
	Иначе
		РезультатФункции.Вставить("СуммаДокумента", 0);
	КонецЕсли;
	// Сумма контракта.
	НоваяСуммаКонтракта = Номенклатура.Итог("Сумма");
	РезультатФункции.Вставить("СуммаКонтракта", НоваяСуммаКонтракта);
	// Сумма контракта регл.
	КурсИСумма = ЦентрализованныеЗакупкиВызовСервераУХ.ПересчитатьСуммуВВалютуРеглУчетаНаДату(
		ВалютаДокумента, ДатаКурса, НоваяСуммаКонтракта);
	НоваяСуммаКонтрактаРегл = КурсИСумма.СуммаВРублях;
	РезультатФункции.Вставить("СуммаКонтрактаВВалютеРегламентированногоУчета", НоваяСуммаКонтрактаРегл);
	// Сумма НДС.
	НоваяСуммаНДС = 0;
	Для Каждого ТекНоменклатура Из Номенклатура Цикл
		ТекСтавкаНДС = ТекНоменклатура.СтавкаНДС;
		СправочникСтавкаНДС = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекСтавкаНДС);
		ЧислоСтавкаНДС = СправочникСтавкаНДС.Ставка;
		ТекСумма = ТекНоменклатура.Сумма;
		ТекСуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекСумма, ЦенаВключаетНДС, ЧислоСтавкаНДС);
		НоваяСуммаНДС = НоваяСуммаНДС + ТекСуммаНДС;
	КонецЦикла;	
	РезультатФункции.Вставить("СуммаНДС", НоваяСуммаНДС);
	Возврат РезультатФункции;
КонецФункции		// РассчитатьИтоговыйСуммы()

// Выставляет итоговые суммы по данным текущего документа.
Процедура ВыставитьИтоговыеСуммы()
	СтруктураИтогов = РассчитатьИтоговыйСуммы();
	СуммаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИтогов, "СуммаДокумента", 0);
	СуммаКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИтогов, "СуммаКонтракта", 0);
	СуммаКонтрактаВВалютеРегламентированногоУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИтогов, "СуммаКонтрактаВВалютеРегламентированногоУчета", 0);
	СуммаНДС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИтогов, "СуммаНДС", 0);
КонецПроцедуры		// ВыставитьИтоговыеСуммы()

#Область ВнутреннийПрограмныйИнтерфейс


Процедура ЗаполнитьПоПредыдущейВерсииСтроки(СтрокиПланаОснование)
	СтараяДата = Дата;
	СтарыйНомер = Номер;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокиПланаОснование);
	Проведен = Ложь;
	ДокументОснование	 = СтрокиПланаОснование;
	Номер				 = СтарыйНомер;
	Дата				 = СтараяДата;
	УИД_ЕИС				 = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьНоменклатуру(СтрокиПланаОснование.Номенклатура);
	ЗаполнитьНМЦ(СтрокиПланаОснование);
	ЭтотОбъект.Финансирование.Загрузить(СтрокиПланаОснование.Финансирование.Выгрузить());
	
КонецПроцедуры

Процедура УстановитьИдентификаторСтрокиПланаЗакупок()
	ИдентификаторСтрокиПланаЗакупок =
		Справочники.ИдентификаторыСтрокПлановЗакупок.ПолучитьДляСтрокиПлана(
			ЭтотОбъект);
КонецПроцедуры
		
Процедура УстановитьФлагТребуетсяОбоснованиеНМЦ()
	ТребуетсяОбоснованиеНМЦ = 
		ЦентрализованныеЗакупкиКлиентСерверУХ.ТребуетсяОбоснованиеНМЦДляТаблицыНоменклатуры(
			Номенклатура);
КонецПроцедуры

Процедура УстановитьВалютуИКурсДокумента()
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить();
	КонецЕсли;
	ДатаКурса = Дата;
	Если ЗначениеЗаполнено(ВалютаДокумента)
			И ЗначениеЗаполнено(ДатаКурса) Тогда
		КурсИСумма = ЦентрализованныеЗакупкиВызовСервераУХ.ПересчитатьСуммуВВалютуРеглУчетаНаДату(
			ВалютаДокумента,
			ДатаКурса,
			СуммаДокумента);
		СуммаВВалютеРегламентированногоУчета = КурсИСумма.СуммаВРублях;
		КурсВалюты = КурсИСумма.Курс;
	Иначе
		СуммаВВалютеРегламентированногоУчета = СуммаДокумента;
		КурсВалюты = 1;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьНомерВГПЗ()
	// Если есть документ основания, то номер в ГПЗ
	// уже заполнен.
	Если НЕ ЗначениеЗаполнено(НомерВГПЗ) Тогда
		НомерВГПЗ = 
			ЦентрализованныеЗакупкиУХ.ПолучитьНовыйНомерГПЗ(
				ПериодЗакупок,
				ОрганизацияДляЗаключенияДоговора,
				ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьНомерВерсии()
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		НомерВерсии = ДокументОснование.НомерВерсии + 1;
	Иначе
		НомерВерсии = 1;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДвиженияПланаПотребностейВНоменклатуре()
	Движения.ПотребностиВНоменклатуре.Записывать = Истина;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		РегистрыНакопления.ПотребностиВНоменклатуре.ЗаполнитьНаборЗаписей(
			Движения.ПотребностиВНоменклатуре,
			ПолучитьВыборкуДвиженийПланаПотребностейДляСторнирования());
	КонецЕсли;		
	ВыборкаОбеспечения = ПолучитьВыборкуДляЗаписиОбеспечения();
	Если ЭтотОбъект.ВнеПлановойПотребности Тогда
		РегистрыНакопления.ПотребностиВНоменклатуре.ДобавитьПотребностьВнеПлана(
			Движения.ПотребностиВНоменклатуре,
			ВыборкаОбеспечения);
		//ВыборкаОбеспечения.Сбросить();
	Иначе
		РегистрыНакопления.ПотребностиВНоменклатуре.ДобавитьОбеспечениеПотребности(
			Движения.ПотребностиВНоменклатуре,
			ВыборкаОбеспечения);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВыборкуДвиженийПланаПотребностейДляСторнирования()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Период,
		|	ПотребностиВНоменклатуре.Приоритет КАК Приоритет,
		|	ПотребностиВНоменклатуре.Номенклатура КАК Номенклатура,
		|	ПотребностиВНоменклатуре.Характеристика КАК Характеристика,
		|	ПотребностиВНоменклатуре.ПериодПотребности КАК ПериодПотребности,
		|	ПотребностиВНоменклатуре.Организация КАК Организация,
		|	ПотребностиВНоменклатуре.МестоПоставки КАК МестоПоставки,
		|	ПотребностиВНоменклатуре.Проект КАК Проект,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.Менеджер КАК Менеджер,
		|	ПотребностиВНоменклатуре.СтавкаНДС КАК СтавкаНДС,
		|	-СУММА(ПотребностиВНоменклатуре.КоличествоВОбеспечении) КАК КоличествоВОбеспечении,
		|	-СУММА(ПотребностиВНоменклатуре.СуммаВОбеспечении) КАК СуммаВОбеспечении,
		|	-СУММА(ПотребностиВНоменклатуре.КоличествоВнеПлана) КАК КоличествоВнеПлана,
		|	-СУММА(ПотребностиВНоменклатуре.СуммаВнеПлана) КАК СуммаВнеПлана,
		|	МАКСИМУМ(ПотребностиВНоменклатуре.Коэффициент) КАК Коэффициент,
		|	ПотребностиВНоменклатуре.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
		|ГДЕ
		|	ПотребностиВНоменклатуре.Регистратор = &Ссылка
		|	И (ПотребностиВНоменклатуре.КоличествоВОбеспечении > 0
		|			ИЛИ ПотребностиВНоменклатуре.СуммаВОбеспечении > 0
		|			ИЛИ ПотребностиВНоменклатуре.КоличествоВнеПлана > 0
		|			ИЛИ ПотребностиВНоменклатуре.СуммаВнеПлана > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВНоменклатуре.ЕдиницаИзмерения,
		|	ПотребностиВНоменклатуре.Номенклатура,
		|	ПотребностиВНоменклатуре.Характеристика,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.Проект,
		|	ПотребностиВНоменклатуре.МестоПоставки,
		|	ПотребностиВНоменклатуре.Организация,
		|	ПотребностиВНоменклатуре.ПериодПотребности,
		|	ПотребностиВНоменклатуре.Приоритет,
		|	ПотребностиВНоменклатуре.Менеджер,
		|	ПотребностиВНоменклатуре.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка",
		ДокументОснование);
	Запрос.УстановитьПараметр("Дата", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Функция ПолучитьВыборкуДляЗаписиОбеспечения()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Период,
		|	СтрокаПланаЗакупокНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СтрокаПланаЗакупокНоменклатура.Количество * ВЫБОР
		|		КОГДА СтрокаПланаЗакупокНоменклатура.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ СтрокаПланаЗакупокНоменклатура.Коэффициент
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА СтрокаПланаЗакупокНоменклатура.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ СтрокаПланаЗакупокНоменклатура.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	СтрокаПланаЗакупокНоменклатура.Менеджер КАК Менеджер,
		|	СтрокаПланаЗакупокНоменклатура.МестоПоставки КАК МестоПоставки,
		|	СтрокаПланаЗакупокНоменклатура.Номенклатура КАК Номенклатура,
		|	СтрокаПланаЗакупокНоменклатура.Характеристика КАК Характеристика,
		|	СтрокаПланаЗакупокНоменклатура.Организация КАК Организация,
		|	СтрокаПланаЗакупокНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ВЫБОР
		|		КОГДА СтрокаПланаЗакупокНоменклатура.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.Обычный)
		|		ИНАЧЕ СтрокаПланаЗакупокНоменклатура.Приоритет
		|	КОНЕЦ КАК Приоритет,
		|	СтрокаПланаЗакупокНоменклатура.Проект КАК Проект,
		|	СтрокаПланаЗакупокНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	(СтрокаПланаЗакупокНоменклатура.Сумма + ВЫБОР
		|		КОГДА СтрокаПланаЗакупокНоменклатура.Ссылка.ЦенаВключаетНДС
		|			ТОГДА 0
		|		ИНАЧЕ СтрокаПланаЗакупокНоменклатура.СуммаНДС
		|	КОНЕЦ)  КАК Сумма,
		|	СтрокаПланаЗакупокНоменклатура.Цена  КАК Цена,
		|	СтрокаПланаЗакупокНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	СтрокаПланаЗакупокНоменклатура.Ссылка.ВалютаДокумента КАК Валюта		
		|ИЗ
		|	Документ.СтрокаПланаЗакупок.Номенклатура КАК СтрокаПланаЗакупокНоменклатура
		|ГДЕ
		|	(СтрокаПланаЗакупокНоменклатура.Количество <> 0
		|			ИЛИ СтрокаПланаЗакупокНоменклатура.Сумма <> 0)
		|	И СтрокаПланаЗакупокНоменклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Процедура ЗаполнитьДвиженияНМЦСтрокиПланаЗакупок()
	Движения.НМЦСтрокиПланаЗакупок.Записывать = Истина;
	НоваяЗапись = Движения.НМЦСтрокиПланаЗакупок.Добавить();
	НоваяЗапись.Регистратор = Ссылка;
	НоваяЗапись.Период = Ссылка.Дата;
	НоваяЗапись.СтрокаПлана = Ссылка;
	НоваяЗапись.Сумма = Ссылка.СуммаДокумента;
КонецПроцедуры

Процедура ЗаполнитьДвиженияРегистрСтрокиПланаЗакупок()
	Движения.СтрокиПланаЗакупок.Записывать = Истина;
	НоваяЗапись = Движения.СтрокиПланаЗакупок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭтотОбъект);
	НоваяЗапись.ИнновационныйПланЗакупок	 = ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	НоваяЗапись.Регистратор					 = Ссылка;
	НоваяЗапись.Период						 = Ссылка.Дата;
	НоваяЗапись.СтрокаПлана					 = Ссылка;
	НоваяЗапись.НеРазмещаетсяНаЕИС			 = НеРазмещаетсяНаЕИС;
КонецПроцедуры

Процедура ЗаполнитьДвиженияВерсииОбъектовЕИС()
	// Инициализация.
	СтатусЧерновик = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	СтатусРазмещен = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен;
	СтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Ссылка, СтатусЧерновик);
	ОбъектРазмещен = (СтатусОбъекта = СтатусРазмещен);
	// Регистр Версии ЕИС.
	НаборЗаписей = РегистрыСведений.ВерсииОбъектовДляЕИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Ссылка); 
	НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии); 
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.Объект					 = Ссылка; 
	НоваяЗапись.НомерВерсии				 = НомерВерсии; 
	Если (НЕ ЗначениеЗаполнено(ДокументОснование)) И (СокрЛП(ОбоснованиеИзменений) = "") Тогда
		НоваяЗапись.ОбоснованиеИзменений	 = "-";
	Иначе
		НоваяЗапись.ОбоснованиеИзменений	 = ОбоснованиеИзменений; 
	КонецЕсли;
	НоваяЗапись.Дата					 = Дата; 
	НоваяЗапись.ГУИДВерсии				 = Ссылка.УникальныйИдентификатор(); 
	НоваяЗапись.Размещен				 = ОбъектРазмещен; 
	НаборЗаписей.Записать(); 
КонецПроцедуры		// ЗаполнитьДвиженияВерсииОбъектовЕИС()

// Установить коды ОКВЭД2 по номенклатуре ТЧ.
//
Процедура ЗаполнитьОКВЭД()
	// Определим ОКВЭД2
	Если НЕ ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Для Каждого СтрокаНоменклатуры Из Номенклатура Цикл
			Номенклатура = СтрокаНоменклатуры.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура.КодОКВЭД2)
					И НЕ ЗначениеЗаполнено(КодОКВЭД2) Тогда
				КодОКВЭД2 = Номенклатура.КодОКВЭД2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Установить коды ОКВЭД2 и ОКПД по номенклатуре ТЧ.
//
Процедура ЗаполнитьОКПД()
	// Определим ОКПД2
	Если НЕ ЗначениеЗаполнено(КодОКПД2) Тогда
		Для Каждого СтрокаНоменклатуры Из Номенклатура Цикл
			Номенклатура = СтрокаНоменклатуры.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура.КодОКПД2)
					И НЕ ЗначениеЗаполнено(КодОКПД2) Тогда
				КодОКПД2 = Номенклатура.КодОКПД2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНоменклатуру(ТаблицаНоменклатуры)
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		НоваяСтрока = Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьНМЦ(ДанныеЗаполнения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НМЦСтрокиПланаЗакупокСрезПоследних.Сумма КАК Сумма,
		|	1 КАК Сотритровка
		|ИЗ
		|	РегистрСведений.НМЦСтрокиПланаЗакупок.СрезПоследних(&Дата, СтрокаПлана = &ДокументОснование) КАК НМЦСтрокиПланаЗакупокСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтрокаПланаЗакупок.СуммаДокумента,
		|	2
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|ГДЕ
		|	СтрокаПланаЗакупок.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотритровка";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЭтотОбъект.СуммаДокумента = ВыборкаДетальныеЗаписи.Сумма;
	КонецЕсли;
КонецПроцедуры

// Проверяет, что записываемая версия строки плана - последняя
// в цепочке версий.
// Возвращает значение флага Отказ.
//
Функция ПроверитьСообщитьВводВерсииСтрокиПлана(Отказ)
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		мДочерниеДокументы = Документы.СтрокаПланаЗакупок.ПолучитьВведенныеНаОсновании(ДокументОснование, Ссылка);
		Если мДочерниеДокументы.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = '%ДокументОснование% уже откорректирован другим документом: %ДокументКорректировки%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", Строка(ДокументОснование));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументКорректировки%", Строка(мДочерниеДокументы[0]));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,	Отказ, , СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	Возврат Отказ;
КонецФункции

// Проверяет, что записываемая версия строки плана - последняя
// в цепочке версий.
// Возвращает значение флага Отказ.
//
Функция ПроверитьСообщитьЗаполненПорядокФормированияЦеныДоговора(
														РежимЗаписи, 
														Отказ)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
    		И Документы.СтрокаПланаЗакупок.ЭтоФЗ223(ЭтотОбъект)
			И ПустаяСтрока(ЭтотОбъект.ПорядокФормированияЦеныДоговора) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(
			НСтр("ru='Необходимо указать проядок формирования цены договора!'"),
			Отказ,
			,
			СтатусСообщения.Важное);
	КонецЕсли;
	Возврат Отказ;
КонецФункции

// Устанавливает значения по умолчанию для реквизитов,
// которые 
Процедура СброситьУникальныеРеквизиты() Экспорт
	НомерВГПЗ = Неопределено;
	НомерВерсии = 1;
	ДокументОснование = Неопределено;
	ИдентификаторСтрокиПланаЗакупок = 
		Справочники.ИдентификаторыСтрокПлановЗакупок.ПустаяСсылка();
	ОценкаНМЦЗавершена = Ложь;
	ПрикрепленныйФайлОбоснованияНМЦ = Неопределено;
	РегистрационныйНомер = Неопределено;
	УИД_ЕИС = "";
	Если НЕ ВнеПлановойПотребности Тогда
		Номенклатура.Очистить();
		СуммаВВалютеРегламентированногоУчета = 0;
		СуммаДокумента = 0;
		СуммаНДС = 0;
	КонецЕсли;
	ПереченьПоставщиковПредоставившихЦеновыеПредложения.Очистить();
	СпособыОбоснованияНМЦ.Очистить();
КонецПроцедуры

// Если результирующие движения документа оп 
Процедура ПроверитьОтменитьПоПлануПотребностей(Отказ)
	Возврат;
	РезультатЗапроса = ПолучитьРезультатЗапросаДляПроверкиДвиженийПланаПотребностей();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Ошибки = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПревышеноКоличество Тогда
			ШаблонТекстаОшибки = НСтр(
				"ru='Превышено закупаемое количество над плановой потребностью: %1."
					+" Закупаем %2, свободно в плане потребностей %3.'");
			Треубется = ВыборкаДетальныеЗаписи.КоличествоВОбеспеченииОборот;
			ВОстатках = ВыборкаДетальныеЗаписи.КоличествоПотребностьОборот;
		Иначе
			ШаблонТекстаОшибки = НСтр(
				"ru='Превышена сумма закупаемой потребности над плановой: %1."
					+" Закупаем %2, свободно в плане потребностей %3.'");
			Треубется = ВыборкаДетальныеЗаписи.СуммаВОбеспеченииОборот;
			ВОстатках = ВыборкаДетальныеЗаписи.СуммаПотребностьОборот;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"",
			СтрШаблон(ШаблонТекстаОшибки,
				ЦентрализованныеЗакупкиКлиентСерверУХ.ПредставлениеПотребности(
					ВыборкаДетальныеЗаписи),
				Треубется,
				ВОстатках),
			Неопределено);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
КонецПроцедуры

Функция ПолучитьРезультатЗапросаДляПроверкиДвиженийПланаПотребностей()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПотребностиВНоменклатуре.Приоритет КАК Приоритет,
		|	ПотребностиВНоменклатуре.Номенклатура КАК Номенклатура,
		|	ПотребностиВНоменклатуре.Характеристика КАК Характеристика,
		|	ПотребностиВНоменклатуре.ПериодПотребности КАК ПериодПотребности,
		|	ПотребностиВНоменклатуре.Организация КАК Организация,
		|	ПотребностиВНоменклатуре.МестоПоставки КАК МестоПоставки,
		|	ПотребностиВНоменклатуре.Проект КАК Проект,
		|	ПотребностиВНоменклатуре.Менеджер КАК Менеджер,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ПотребностиДокумента
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
		|ГДЕ
		|	ПотребностиВНоменклатуре.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВНоменклатуре.Номенклатура,
		|	ПотребностиВНоменклатуре.Характеристика,
		|	ПотребностиВНоменклатуре.Организация,
		|	ПотребностиВНоменклатуре.Менеджер,
		|	ПотребностиВНоменклатуре.МестоПоставки,
		|	ПотребностиВНоменклатуре.ПериодПотребности,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.Приоритет,
		|	ПотребностиВНоменклатуре.Проект,
		|	ПотребностиВНоменклатуре.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Приоритет КАК Приоритет,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Номенклатура КАК Номенклатура,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Характеристика КАК Характеристика,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.ПериодПотребности КАК ПериодПотребности,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Организация КАК Организация,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.МестоПоставки КАК МестоПоставки,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Проект КАК Проект,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Менеджер КАК Менеджер,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.КоличествоПотребностьОборот) КАК КоличествоПотребностьОборот,
		|	СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.СуммаПотребностьОборот) КАК СуммаПотребностьОборот,
		|	СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.КоличествоВОбеспеченииОборот) КАК КоличествоВОбеспеченииОборот,
		|	СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.СуммаВОбеспеченииОборот) КАК СуммаВОбеспеченииОборот,
		|	ВЫБОР
		|		КОГДА ПотребностиВНоменклатуреОборотыЗарегистрировано.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.КоличествоПотребностьОборот) < СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.КоличествоВОбеспеченииОборот)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПревышеноКоличество,
		|	СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.СуммаПотребностьОборот) < СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.СуммаВОбеспеченииОборот) КАК ПревышенаСумма
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре.Обороты(
		|			,
		|			&ДатаОкончания,
		|			Период,
		|			(Приоритет, Номенклатура, Характеристика, ПериодПотребности, Организация, МестоПоставки, Проект, Менеджер, ДоговорСПокупателем, СтавкаНДС) В
		|				(ВЫБРАТЬ
		|					ВТ_ПотребностиДокумента.Приоритет КАК Приоритет,
		|					ВТ_ПотребностиДокумента.Номенклатура КАК Номенклатура,
		|					ВТ_ПотребностиДокумента.Характеристика КАК Характеристика,
		|					ВТ_ПотребностиДокумента.ПериодПотребности КАК ПериодПотребности,
		|					ВТ_ПотребностиДокумента.Организация КАК Организация,
		|					ВТ_ПотребностиДокумента.МестоПоставки КАК МестоПоставки,
		|					ВТ_ПотребностиДокумента.Проект КАК Проект,
		|					ВТ_ПотребностиДокумента.Менеджер КАК Менеджер,
		|					ВТ_ПотребностиДокумента.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|					ВТ_ПотребностиДокумента.СтавкаНДС КАК СтавкаНДС
		|				ИЗ
		|					ВТ_ПотребностиДокумента КАК ВТ_ПотребностиДокумента)) КАК ПотребностиВНоменклатуреОборотыЗарегистрировано
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Приоритет,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.ДоговорСПокупателем,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Проект,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Менеджер,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.МестоПоставки,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Организация,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.ПериодПотребности,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Номенклатура,
		|	ПотребностиВНоменклатуреОборотыЗарегистрировано.Характеристика
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.КоличествоПотребностьОборот) < СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.КоличествоВОбеспеченииОборот)
		|		ИЛИ СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.СуммаПотребностьОборот) < СУММА(ПотребностиВНоменклатуреОборотыЗарегистрировано.СуммаВОбеспеченииОборот))";
	Запрос.УстановитьПараметр("ДатаОкончания", 
		Новый Граница(МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПроверитьЗаполнениеХарактеристикОтменить(Отказ) Экспорт
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект,
		Новый Массив,
		Отказ,
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПараметрыПроверкиЗаполненияХарактеристик());
	Возврат Отказ;
КонецФункции


#КонецОбласти


#КонецЕсли
