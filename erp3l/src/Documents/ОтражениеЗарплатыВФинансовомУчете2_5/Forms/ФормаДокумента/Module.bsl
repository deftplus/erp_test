
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбновитьПредставлениеНастроекОтражения();
	КонецЕсли;
	
	УправлениеФормой();
	
	ПараметрыНастройки = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если Объект.Исправление Тогда
		Элементы.ЗаполнитьНачисленияПоВыработке.Видимость = Ложь;
	КонецЕсли;
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	ОбновитьПредставлениеНастроекОтражения();
	
	ПараметрыНастройки = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтражениеЗарплатыВФинансовомУчете2_5", ПараметрыЗаписи, Объект.Ссылка);
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПредставлениеНастроекОтражения();
	
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредставлениеПериодаРасчетов = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРасчетов);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодРасчетовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка,
		Объект.ПериодРасчетов, ПредставлениеПериодаРасчетов);
	Объект.ПериодРасчетов = НачалоМесяца(Объект.ПериодРасчетов);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПериодРасчетовНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Значение, РежимВыбораПериода", Объект.ПериодРасчетов, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодРасчетов = НачалоМесяца(ВыбранныйПериод);
	ПредставлениеПериодаРасчетов = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетовПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НачисленияНастройкиОтражения Тогда
		РедактироватьНастройкиОтражения(НастройкиОтраженияНачислений, Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент,, "Объект.Начисления");
		Иначе 
			ТекущиеДанные.ВариантОтражения =
				ПредопределенноеЗначение("Перечисление.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеРасходы");
			ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение, ВидРасчетов");
		КонецЕсли;
		ТекущиеДанные.НастройкиОтражения = ТекстПустойНастройкиОтражения();
		ТекущиеДанные.НастройкиОтраженияНеверны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВариантОтраженияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтраженияНачислений.РеквизитыСтроки, ТекущиеДанные);
	
	РезультатПроверки = ПроверитьЗаполнениеНастроекОтражения(НастройкиОтраженияНачислений.РеквизитыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНалогиВзносыОрганизации

&НаКлиенте
Процедура НалогиВзносыОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НалогиВзносыОрганизацииНастройкиОтражения Тогда
		РедактироватьНастройкиОтражения(НастройкиОтраженияНачислений, Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВзносыОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент,, "Объект.НалогиВзносыОрганизации");
		Иначе
			ТекущиеДанные.ВариантОтражения =
				ПредопределенноеЗначение("Перечисление.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеРасходы");
			ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение");
		КонецЕсли;
		ТекущиеДанные.НастройкиОтражения = ТекстПустойНастройкиОтражения();
		ТекущиеДанные.НастройкиОтраженияНеверны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВзносыОрганизацииВариантОтраженияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НалогиВзносыОрганизации.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтраженияНачислений.РеквизитыСтроки, ТекущиеДанные);
	
	РезультатПроверки = ПроверитьЗаполнениеНастроекОтражения(НастройкиОтраженияНачислений.РеквизитыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНалогиВзносыСотрудников

&НаКлиенте
Процедура НалогиВзносыСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение, ВидРасчетов");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.УдержанияНастройкиОтражения Тогда
		РедактироватьНастройкиОтражения(НастройкиОтраженияУдержаний, Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент,, "Объект.Удержания");
		Иначе
			ТекущиеДанные.ВариантОтражения =
				ПредопределенноеЗначение("Перечисление.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеДоходы");
			ТекущиеДанные.СтатьяДоходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение, ВидРасчетов");
		КонецЕсли;
		ТекущиеДанные.НастройкиОтражения = ТекстПустойНастройкиОтражения();
		ТекущиеДанные.НастройкиОтраженияНеверны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВариантОтраженияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтраженияУдержаний.РеквизитыСтроки, ТекущиеДанные);
	
	РезультатПроверки = ПроверитьЗаполнениеНастроекОтражения(НастройкиОтраженияУдержаний.РеквизитыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Объект[Команда.ИспользуемаяТаблица.Имя].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица ""%1"" будет перезаполнена. Продолжить?';
							|en = 'The table ""%1"" will be refilled. Continue?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Команда.ИспользуемаяТаблица.Родитель.Заголовок);
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтаФорма, Команда.ИспользуемаяТаблица);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьФормуЗагрузки(Команда.ИспользуемаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ТаблицаФормы) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуЗагрузки(ТаблицаФормы);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрок

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаФормы = Команда.ИспользуемаяТаблица;
	Если Не ЗначениеЗаполнено(ТаблицаФормы.ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для копирования требуется выбрать строки табличной части.';
										|en = 'Select lines of the table to copy.'"));
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ТаблицаФормы.Имя);
	
	ТекстЗаголовка = НСтр("ru = 'Строки скопированы';
							|en = 'Lines are copied'");
	ТекстСообщения = НСтр("ru = 'Количество строк: %1';
							|en = 'Line quantity: %1'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,
		СтрШаблон(ТекстСообщения, ТаблицаФормы.ВыделенныеСтроки.Количество()),
		БиблиотекаКартинок.Информация32,
		СтатусОповещенияПользователя.Информация);
	
	Оповестить("КопированиеСтрокОтраженияЗарплатыВБуферОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ТаблицаФормы = Команда.ИспользуемаяТаблица;
	
	НовыеСтроки = ВставитьСтрокиНаСервере(ТаблицаФормы.Имя);
	
	ВыделитьДобавленныеСтроки(ТаблицаФормы, НовыеСтроки);
	
	ТекстЗаголовка = НСтр("ru = 'Строки вставлены';
							|en = 'Lines are inserted'");
	ТекстСообщения = НСтр("ru = 'Количество строк: %1';
							|en = 'Line quantity: %1'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,
		СтрШаблон(ТекстСообщения, НовыеСтроки.Количество()),
		БиблиотекаКартинок.Информация32,
		СтатусОповещенияПользователя.Информация);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДополнитьНачисленияПоВыработке(Команда)
	
	ИсточникЗаполнения = Новый Структура("ВыработкаСотрудников");
	ЗаполнитьДокумент(ИсточникЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(ИсточникиЗаполнения)
	
	ДлительнаяОперация = ЗаполнитьДокументВФонеНаСервере(ИсточникиЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДокументЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументНаСервере(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделение(Команда)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяТаблицы", Команда.ИспользуемаяТаблица.Имя);
	ПараметрыОбработки.Вставить("Реквизит", "Подразделение");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьРеквизитТабличнойЧастиЗавершение",
		ЭтотОбъект, ПараметрыОбработки);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидРасчетов(Команда)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяТаблицы", Команда.ИспользуемаяТаблица.Имя);
	ПараметрыОбработки.Вставить("Реквизит", "ВидРасчетов");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьРеквизитТабличнойЧастиЗавершение",
		ЭтотОбъект, ПараметрыОбработки);
	
	ОткрытьФорму("Справочник.ВидыРасчетовССотрудниками.ФормаВыбора", , , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиОтражения(Команда)
	
	Если Команда.ИспользуемаяТаблица = Элементы.Удержания Тогда
		РедактироватьНастройкиОтражения(НастройкиОтраженияУдержаний, Команда.ИспользуемаяТаблица);
	Иначе
		РедактироватьНастройкиОтражения(НастройкиОтраженияНачислений, Команда.ИспользуемаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНалоги(Команда)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяТаблицы", Команда.ИспользуемаяТаблица.Имя);
	ПараметрыОбработки.Вставить("ВыделенныеСтроки", Команда.ИспользуемаяТаблица.ВыделенныеСтроки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РассчитатьНалогиЗавершение", ЭтотОбъект, ПараметрыОбработки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицы", Команда.ИспользуемаяТаблица.Имя);
	ПараметрыФормы.Вставить("ТолькоВыделенныеСтроки", Команда.ИспользуемаяТаблица.ВыделенныеСтроки.Количество() > 1);
	
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете2_5.Форма.ФормаЗаполненияНалогов",
		ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиОтраженияНачислений = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.НастройкиОтраженияНачислений();
	Для Каждого Вариант Из НастройкиОтраженияНачислений.ДоступныеВарианты Цикл
		
		Если НЕ Вариант.Значение.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.НачисленияВариантОтражения.СписокВыбора.Добавить(Вариант.Ключ);
		Элементы.НалогиВзносыОрганизацииВариантОтражения.СписокВыбора.Добавить(Вариант.Ключ);
		
	КонецЦикла;
	
	НастройкиОтраженияУдержаний = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.НастройкиОтраженияУдержаний();
	Для Каждого Вариант Из НастройкиОтраженияУдержаний.ДоступныеВарианты Цикл
		
		Если НЕ Вариант.Значение.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.УдержанияВариантОтражения.СписокВыбора.Добавить(Вариант.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПодразделениеВШапке = ЗначениеЗаполнено(Объект.Подразделение);
	Элементы.ИзменитьПодразделениеНачисления.Видимость = НЕ ПодразделениеВШапке;
	Элементы.ИзменитьПодразделениеНалогиВзносыОрганизации.Видимость = НЕ ПодразделениеВШапке;
	Элементы.ИзменитьПодразделениеНалогиВзносыСотрудников.Видимость = НЕ ПодразделениеВШапке;
	Элементы.ИзменитьПодразделениеУдержания.Видимость = НЕ ПодразделениеВШапке;
	
	ВидРасчетовВШапке = ЗначениеЗаполнено(Объект.ВидРасчетов);
	Элементы.ИзменитьВидРасчетовНачисления.Видимость = НЕ ВидРасчетовВШапке;
	Элементы.ИзменитьВидРасчетовНалогиВзносыСотрудников.Видимость = НЕ ВидРасчетовВШапке;
	Элементы.ИзменитьВидРасчетовУдержания.Видимость = НЕ ВидРасчетовВШапке;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Подразделения
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияПодразделение.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыОрганизацииПодразделение.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыСотрудниковПодразделение.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержанияПодразделение.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// Вид расчетов
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияВидРасчетов.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыСотрудниковВидРасчетов.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержанияВидРасчетов.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	

	// Физическое лицо при сводном отражении
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияФизическоеЛицо.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыОрганизацииФизическоеЛицо.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыСотрудниковФизическоеЛицо.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетализацияДоФизическихЛиц");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// Начисления - Цвет гиперссылок
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияНастройкиОтражения.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.НастройкиОтраженияНеверны");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	
	// Налоги организации - Цвет гиперссылок
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыОрганизацииНастройкиОтражения.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогиВзносыОрганизации.НастройкиОтраженияНеверны");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	
	// Удержания - Цвет гиперссылок
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержанияНастройкиОтражения.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Удержания.НастройкиОтраженияНеверны");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеНастроекОтражения()
	
	КэшРеквизитовСтатей = Новый Соответствие;
	
	ОбновитьПредставлениеНастроекОтраженияВТаблице(
		Объект.Начисления, НастройкиОтраженияНачислений, КэшРеквизитовСтатей);
	ОбновитьПредставлениеНастроекОтраженияВТаблице(
		Объект.НалогиВзносыОрганизации, НастройкиОтраженияНачислений, КэшРеквизитовСтатей);
	
	ОбновитьПредставлениеНастроекОтраженияВТаблице(
		Объект.Удержания, НастройкиОтраженияУдержаний, КэшРеквизитовСтатей);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеНастроекОтраженияВТаблице(Таблица, НастройкиОтражения, КэшРеквизитовСтатей)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(НастройкиОтражения.РеквизитыСтроки, СтрокаТаблицы);
		
		Результат = ПроверитьЗаполнениеНастроекОтражения(НастройкиОтражения.РеквизитыСтроки, КэшРеквизитовСтатей);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеНастроекОтражения(ПроверяемыеРеквизиты, КэшРеквизитовСтатей = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОтражения", ТекстПустойНастройкиОтражения());
	Результат.Вставить("НастройкиОтраженияНеверны", Истина);
	
	Если НЕ ПроверяемыеРеквизиты.Свойство("ВариантОтражения")
		ИЛИ НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ВариантОтражения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстПредставления = "";
	НастройкиОтраженияКорректны = Ложь;
	
	Если КэшРеквизитовСтатей = Неопределено Тогда
		КэшРеквизитовСтатей = Новый Соответствие();
	КонецЕсли;
	
	ВариантыОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний;
	Если ЭтоПостатейноеОтражение(ПроверяемыеРеквизиты.ВариантОтражения) Тогда
		
		Если ПроверяемыеРеквизиты.ВариантОтражения = ВариантыОтражения.ОтнестиНаПрочиеРасходы Тогда
			ТипСтатьи = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
			РеквизитСтатьи    = "СтатьяРасходов";
			РеквизитАналитики = "АналитикаРасходов";
		ИначеЕсли ПроверяемыеРеквизиты.ВариантОтражения = ВариантыОтражения.ОтнестиНаПрочиеДоходы Тогда
			ТипСтатьи = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
			РеквизитСтатьи    = "СтатьяДоходов";
			РеквизитАналитики = "АналитикаДоходов";
		Иначе // ВариантОтражения = ОтнестиНаПрочиеАктивыПассивы
			ТипСтатьи = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			Если ПроверяемыеРеквизиты.Свойство("СтатьяРасходов") Тогда
				РеквизитСтатьи    = "СтатьяРасходов";
				РеквизитАналитики = "АналитикаАктивовПассивов";
			ИначеЕсли ПроверяемыеРеквизиты.Свойство("СтатьяДоходов") Тогда
				РеквизитСтатьи    = "СтатьяДоходов";
				РеквизитАналитики = "АналитикаАктивовПассивов";
			КонецЕсли;
		КонецЕсли;
		
		ПриведенноеЗначение = ТипСтатьи.ПривестиЗначение(ПроверяемыеРеквизиты[РеквизитСтатьи]);
		Если НЕ ПроверяемыеРеквизиты[РеквизитСтатьи] = ПриведенноеЗначение Тогда
			Результат.Вставить(РеквизитСтатьи, ПриведенноеЗначение);
			Результат.Вставить(РеквизитАналитики, Неопределено);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПриведенноеЗначение) Тогда
			
			Если КэшРеквизитовСтатей.Получить(ПриведенноеЗначение) = Неопределено Тогда
				КэшРеквизитовСтатей.Вставить(ПриведенноеЗначение,
					Документы.ОтражениеЗарплатыВФинансовомУчете2_5.СвойстваСтатьиОтражения(ПриведенноеЗначение));
			КонецЕсли;
			СвойстваСтатьи = КэшРеквизитовСтатей.Получить(ПриведенноеЗначение);
			
			Если ЗначениеЗаполнено(ПроверяемыеРеквизиты[РеквизитАналитики]) Тогда
				ТекстПредставления = НСтр("ru = '[РеквизитСтатьи], [РеквизитАналитики]';
											|en = '[РеквизитСтатьи], [РеквизитАналитики]'");
				НастройкиОтраженияКорректны = Истина;
			ИначеЕсли СвойстваСтатьи.ДоступноАвтозаполнение Тогда
				ТекстПредставления = НСтр("ru = '[РеквизитСтатьи], <подбирается автоматически>';
											|en = '[РеквизитСтатьи], <selected automatically>'");
				НастройкиОтраженияКорректны = Истина;
			ИначеЕсли СвойстваСтатьи.БезАналитики Тогда
				ТекстПредставления = НСтр("ru = '[РеквизитСтатьи]';
											|en = '[РеквизитСтатьи]'");
				НастройкиОтраженияКорректны = Истина;
			Иначе
				ТекстПредставления = НСтр("ru = '[РеквизитСтатьи], <не указана>';
											|en = '[РеквизитСтатьи], <not specified>'");
				НастройкиОтраженияКорректны = НЕ СвойстваСтатьи.КонтролироватьЗаполнениеАналитики;
			КонецЕсли;
			
			Если ПроверяемыеРеквизиты.ВариантОтражения = ВариантыОтражения.ОтнестиНаПрочиеАктивыПассивы
				И ЗначениеЗаполнено(ПроверяемыеРеквизиты.НастройкаСчетовУчета) Тогда
				ТекстПредставления = ТекстПредставления + НСтр("ru = ', [НастройкаСчетовУчета]';
																|en = ', [НастройкаСчетовУчета]'");
			КонецЕсли;
			
			ТекстПредставления = СтрЗаменить(ТекстПредставления, "РеквизитСтатьи", РеквизитСтатьи);
			ТекстПредставления = СтрЗаменить(ТекстПредставления, "РеквизитАналитики", РеквизитАналитики);
			
		КонецЕсли;
		
	ИначеЕсли ПроверяемыеРеквизиты.ВариантОтражения = ВариантыОтражения.РаспределитьНаПроизводство Тогда
		
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.ТипБазыРаспределения) Тогда
			
			Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.СтатьяКалькуляции) Тогда
				ТекстПредставления = НСтр("ru = '[ТипБазыРаспределения], [СтатьяКалькуляции]';
											|en = '[ТипБазыРаспределения], [СтатьяКалькуляции]'");
			Иначе
				ТекстПредставления = НСтр("ru = '[ТипБазыРаспределения], <статья калькуляции по выработке>';
											|en = '[ТипБазыРаспределения], <product cost element on output>'");
			КонецЕсли;
			
			НастройкиОтраженияКорректны = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ПроверяемыеРеквизиты.ВариантОтражения = ВариантыОтражения.ПогаситьРасчетыСПодотчетником Тогда
		
		Если НЕ ПроверяемыеРеквизиты.Свойство("ЦельВыдачи") Тогда
			ТекстПредставления = НСтр("ru = '<не требуется>';
										|en = '<not required>'");
		ИначеЕсли ЗначениеЗаполнено(ПроверяемыеРеквизиты.ЦельВыдачи) Тогда
			ТекстПредставления = НСтр("ru = '[ЦельВыдачи]';
										|en = '[ЦельВыдачи]'");
		Иначе
			ТекстПредставления = НСтр("ru = '<не указана>';
										|en = '<not specified>'");
		КонецЕсли;
		
		НастройкиОтраженияКорректны = Истина;
		
	ИначеЕсли ПроверяемыеРеквизиты.ВариантОтражения = ВариантыОтражения.ПогаситьВзаиморасчеты Тогда
		
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.Контрагент) Тогда
			
			Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.ОбъектРасчетов) Тогда
				ТекстПредставления = НСтр("ru = '[Контрагент], [ОбъектРасчетов]';
											|en = '[Контрагент], [ОбъектРасчетов]'");
				НастройкиОтраженияКорректны = Истина;
			Иначе
				ТекстПредставления = НСтр("ru = '[Контрагент], <не указан>';
											|en = '[Контрагент], <not specified>'");
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредставления) Тогда
		Результат.НастройкиОтражения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			ТекстПредставления, ПроверяемыеРеквизиты);
	КонецЕсли;
	Результат.НастройкиОтраженияНеверны = НЕ НастройкиОтраженияКорректны;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПустойНастройкиОтражения()
	Возврат НСтр("ru = 'Заполнить параметры отражения...';
				|en = 'Fill in accounting attributes...'");
КонецФункции

&НаКлиенте
Процедура РедактироватьНастройкиОтражения(НастройкиОтражения, ТаблицаФормы)
	
	Если ТаблицаФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактироватьНастройкиОтраженияЗавершение", ЭтотОбъект, ТаблицаФормы.Имя);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента",   Объект.Дата);
	ПараметрыФормы.Вставить("ВалютаДокумента", Объект.Валюта);
	ПараметрыФормы.Вставить("НастройкиОтражения", НастройкиОтражения);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ТаблицаФормы.Имя);
	
	ВариантОтражения = ТаблицаФормы.ТекущиеДанные.ВариантОтражения;
	Если ЗначениеЗаполнено(ВариантОтражения) И НастройкиОтражения.ДоступныеВарианты[ВариантОтражения] <> Неопределено Тогда
		ЗначенияЗаполнения = Новый Структура(
			"ВариантОтражения," + НастройкиОтражения.ДоступныеВарианты[ВариантОтражения].СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ТаблицаФормы.ТекущиеДанные);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете2_5.Форма.ФормаНастройкиОтраженияВУчете",
		ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиОтраженияЗавершение(Результат, ИмяТаблицы) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РедактироватьНастройкиОтраженияНаСервере(Результат, ИмяТаблицы);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьНастройкиОтраженияНаСервере(Результат, ИмяТаблицы)
	
	РезультатПроверки = ПроверитьЗаполнениеНастроекОтражения(Результат);
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	
	ЧастиПути = СтрРазделить(ТаблицаФормы.ПутьКДанным, ".");
	ТаблицаДанных = Объект[ЧастиПути.Получить(1)];
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатПроверки);
		
	КонецЦикла;
	
	НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтотОбъект, ТаблицаФормы.ПутьКДанным, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитТабличнойЧастиЗавершение(Результат, ПараметрыОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура(ПараметрыОбработки.Реквизит, Результат);
	
	ЗаполнитьРеквизитТабличнойЧастиНаСервере(ЗначенияЗаполнения, ПараметрыОбработки.ИмяТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитТабличнойЧастиНаСервере(ЗначенияЗаполнения, ИмяТаблицы)
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	
	ЧастиПути = СтрРазделить(ТаблицаФормы.ПутьКДанным, ".");
	ТаблицаДанных = Объект[ЧастиПути.Получить(1)];
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗначенияЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНалогиЗавершение(Результат, ПараметрыОбработки) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ВидыНалогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Результат.ТолькоВыделенныеСтроки Тогда
		ВыделенныеСтроки = ПараметрыОбработки.ВыделенныеСтроки;
	Иначе
		ВыделенныеСтроки = Неопределено;
	КонецЕсли;
	
	Если ПараметрыОбработки.ИмяТаблицы = Элементы.Начисления.Имя Тогда
		
		НовыеСтроки = РассчитатьНалогиНаСервере(Результат.ТаблицаНалогов, Результат.ВидыНалогов, ВыделенныеСтроки);
		
		Если Результат.ТаблицаНалогов = Элементы.НалогиВзносыОрганизации.Имя Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНалогиОрганизации;
			ТаблицаФормы = Элементы.НалогиВзносыОрганизации;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНалогиСотрудников;
			ТаблицаФормы = Элементы.НалогиВзносыСотрудников;
		КонецЕсли;
		
		ВыделитьДобавленныеСтроки(ТаблицаФормы, НовыеСтроки);
		
	Иначе
		
		ПересчитатьНалогиНаСервере(Результат.ТаблицаНалогов, Результат.ВидыНалогов, ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьНалогиНаСервере(ИмяТаблицы, ВидыНалогов, ВыделенныеСтроки)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		КоличествоСтрок = Объект.Начисления.Количество();
	Иначе
		КоличествоСтрок = ВыделенныеСтроки.Количество();
	КонецЕсли;
	
	Таблица = Объект[ИмяТаблицы]; // ДанныеФормыКоллекция - таблица НалогиВзносыОрганизации или НалогиВзносыСотрудников
	
	НовыеСтроки = Новый Массив;
	Для Индекс = 0 По КоличествоСтрок - 1 Цикл
		
		Если ВыделенныеСтроки = Неопределено Тогда
			СтрокаИсточник = Объект.Начисления[Индекс];
		Иначе
			СтрокаИсточник = Объект.Начисления.НайтиПоИдентификатору(ВыделенныеСтроки[Индекс]);
		КонецЕсли;
		
		Для Каждого ВидНалога Из ВидыНалогов Цикл
			
			СтрокаНалогов = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалогов, СтрокаИсточник,, "Сумма");
			СтрокаНалогов.ВидНалога     = ВидНалога.Ключ;
			СтрокаНалогов.НалоговаяБаза = СтрокаИсточник.Сумма;
			
			Если ИмяТаблицы = Элементы.НалогиВзносыОрганизации.Имя Тогда
				СтрокаНалогов.Сумма = СтрокаНалогов.НалоговаяБаза * ВидНалога.Значение.Значение / 100;
			Иначе
				СтрокаНалогов.Сумма = СтрокаНалогов.НалоговаяБаза / 100 * ВидНалога.Значение.Значение;
			КонецЕсли;
			
			НовыеСтроки.Добавить(СтрокаНалогов.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НовыеСтроки;
	
КонецФункции

&НаСервере
Процедура ПересчитатьНалогиНаСервере(ТаблицаНалогов, ВидыНалогов, ВыделенныеСтроки)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		КоличествоСтрок = Объект[ТаблицаНалогов].Количество();
	Иначе
		КоличествоСтрок = ВыделенныеСтроки.Количество();
	КонецЕсли;
	
	Для Индекс = 0 По КоличествоСтрок - 1 Цикл
		
		Если ВыделенныеСтроки = Неопределено Тогда
			СтрокаНалогов = Объект[ТаблицаНалогов][Индекс];
		Иначе
			СтрокаНалогов = Объект[ТаблицаНалогов].НайтиПоИдентификатору(ВыделенныеСтроки[Индекс]);
		КонецЕсли;
		
		ВидНалога = ВидыНалогов.Получить(СтрокаНалогов.ВидНалога);
		Если ВидНалога = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаНалогов = Элементы.НалогиВзносыОрганизации.Имя Тогда
			СтрокаНалогов.Сумма = СтрокаНалогов.НалоговаяБаза * ВидНалога.Значение / 100;
		Иначе
			СтрокаНалогов.Сумма = СтрокаНалогов.НалоговаяБаза / 100 * ВидНалога.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьДобавленныеСтроки(ТаблицаФормы, МассивСтрок)
	
	Если НЕ ЗначениеЗаполнено(МассивСтрок) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормы.ТекущаяСтрока = МассивСтрок[0];
	ТаблицаФормы.ВыделенныеСтроки.Очистить();
	Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
		ТаблицаФормы.ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПостатейноеОтражение(ВариантОтражения)
	
	Возврат ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеРасходы
			ИЛИ ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеДоходы
			ИЛИ ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеАктивыПассивы;
	
КонецФункции

#Область ЗаполнениеДокумента

&НаСервере
Функция ЗаполнитьДокументВФонеНаСервере(ИсточникиЗаполнения)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация", Объект.Организация);
	ПараметрыПроцедуры.Вставить("НачалоПериода", НачалоМесяца(Объект.ПериодРасчетов));
	ПараметрыПроцедуры.Вставить("КонецПериода", КонецМесяца(Объект.ПериодРасчетов));
	ПараметрыПроцедуры.Вставить("ИсточникиЗаполнения", ИсточникиЗаполнения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПодготовитьДанныеЗаполнения", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументНаСервере(Результат)
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВыработкаСотрудников") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидРасчетов) Тогда
			ВидРасчетов = Справочники.ВидыРасчетовССотрудниками.ОплатаТруда;
		Иначе
			ВидРасчетов = Объект.ВидРасчетов;
		КонецЕсли;
		
		ОтражениеПоУмолчанию = Новый Структура;
		ОтражениеПоУмолчанию.Вставить("ВариантОтражения",
			Перечисления.ВариантыОтраженияНачисленийУдержаний.РаспределитьНаПроизводство);
		ОтражениеПоУмолчанию.Вставить("ТипБазыРаспределения",
			Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда);
		ОтражениеПоУмолчанию.Вставить("СтатьяКалькуляции");
		
		РезультатПроверки = ПроверитьЗаполнениеНастроекОтражения(ОтражениеПоУмолчанию);
		
		Для Каждого СтрокаВыработки Из ДанныеЗаполнения.ВыработкаСотрудников Цикл
			
			НоваяСтрока = Объект.Начисления.Добавить();
			
			НоваяСтрока.ВидРасчетов          = ВидРасчетов;
			НоваяСтрока.ВидНачисления        = Справочники.ВидыНачисленийУдержаний.СдельнаяОплата;
			
			НоваяСтрока.Подразделение        = СтрокаВыработки.Подразделение;
			НоваяСтрока.ФизическоеЛицо       = СтрокаВыработки.ФизическоеЛицо;
			НоваяСтрока.Сумма                = СтрокаВыработки.Сумма;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтражениеПоУмолчанию);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ПоказатьФормуЗагрузки(ТаблицаФормы)
	
	ЗаголовокФормыЗагрузки = СтрШаблон(
		НСтр("ru = 'Загрузка таблицы ""%1"" из файла';
			|en = 'Download the table ""%1"" from the file'"),
		ТаблицаФормы.Родитель.Заголовок);
	
	Если ТаблицаФормы = Элементы.Удержания Тогда
		НастройкиОтражения = НастройкиОтраженияУдержаний;
	Иначе
		НастройкиОтражения = НастройкиОтраженияНачислений;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ДоступныеВариантыОтражения", Новый Массив);
	Для Каждого Вариант Из НастройкиОтражения.ДоступныеВарианты Цикл
		ДополнительныеПараметры.ДоступныеВариантыОтражения.Добавить(Вариант.Ключ);
	КонецЦикла;
	
	ПараметрыЗагрузкиДанных = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузкиДанных.Заголовок = ЗаголовокФормыЗагрузки;
	ПараметрыЗагрузкиДанных.ПолноеИмяТабличнойЧасти =
		"ОтражениеЗарплатыВФинансовомУчете2_5." + ТаблицаФормы.Имя;
	ПараметрыЗагрузкиДанных.КолонкиМакета =
		ОписаниеКолонокМакетаДляЗагрузкиИзФайла(ТаблицаФормы.Имя);
	ПараметрыЗагрузкиДанных.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьФормуЗагрузкиЗавершение", ЭтотОбъект, ТаблицаФормы.Имя);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузкиДанных, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиЗавершение(АдресЗагруженныхДанных, ИмяТаблицы) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ИмяТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ИмяТаблицыФормы)
	
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	
	ЧастиПути = СтрРазделить(ТаблицаФормы.ПутьКДанным, ".");
	ТаблицаДанных = Объект[ЧастиПути.Получить(1)];
	
	ТаблицаДанных.Очистить();
	
	РеквизитыШапки = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыШапки.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидРасчетов) Тогда
		РеквизитыШапки.Вставить("ВидРасчетов", Объект.ВидРасчетов);
	КонецЕсли;
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	РезультатПроверки = ПроверитьЗаполнениеНастроекОтражения(Новый Структура);
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыШапки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПроверки);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаДляЗагрузкиИзФайла(ИмяТабличнойЧасти)
	
	ТребуютсяВидыРасчетов   = НЕ ЗначениеЗаполнено(Объект.ВидРасчетов);
	ТребуютсяПодразделения  = НЕ ЗначениеЗаполнено(Объект.Подразделение);
	ТребуютсяФизическиеЛица = Объект.ДетализацияДоФизическихЛиц;
	
	КолонкиМакета = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ОписаниеКолонокМакетаДляЗагрузкиИзФайла(
		ИмяТабличнойЧасти, ТребуютсяПодразделения, ТребуютсяФизическиеЛица, ТребуютсяВидыРасчетов);
	
	Возврат КолонкиМакета;
	
КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	ТабличнаяЧасть = Объект[ИмяТаблицы];
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(ТабличнаяЧасть, ТаблицаФормы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	НовыеСтроки = Новый Массив;
	ПараметрыОтбора = Новый Соответствие;
	
	Если ИмяТаблицы = Элементы.Начисления.Имя Тогда
		ПараметрыОтбора.Вставить("ВидНачисления.ЯвляетсяУдержанием", ЛОЖЬ);
	ИначеЕсли ИмяТаблицы = Элементы.Удержания.Имя Тогда
		ПараметрыОтбора.Вставить("ВидУдержания.ЯвляетсяУдержанием", ИСТИНА);
	Иначе
		ПараметрыОтбора.Вставить("ВидНалога.ПлательщикСотрудник",
			ИмяТаблицы = Элементы.НалогиВзносыСотрудников.Имя);
	КонецЕсли;
	
	ТаблицаИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора);
	Если НЕ ЗначениеЗаполнено(ТаблицаИзБуфера) Тогда
		Возврат НовыеСтроки;
	КонецЕсли;
	
	Таблица = Объект[ИмяТаблицы]; // ДанныеФормыКоллекция - табличная часть документа
	
	Для Каждого СтрокаТаблицы Из ТаблицаИзБуфера Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НовыеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат НовыеСтроки;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
