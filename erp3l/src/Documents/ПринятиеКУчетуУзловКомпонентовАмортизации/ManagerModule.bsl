#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	
	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		ДопПараметры.ТолькоПомеченные = Регистры <> Неопределено;
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаУзлыКомпонентыАмортизации(ТекстыЗапроса, Регистры);
		
		ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет команду создания документа "Принятие к учету ОС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Порядок	- Число	- Порядок команды.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Порядок = 0) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.Порядок = Порядок;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСтоимость(Объект, ВыбранныеСтроки = Неопределено) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК КомпонентАмортизации,
	|	ТаблицаКомпонентовАмортизации.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаКомпонентовАмортизации
	|ИЗ
	|	&ТаблицаКомпонентовАмортизации КАК ТаблицаКомпонентовАмортизации
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	&ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	&ФактическаяСтоимость                      КАК ФактическаяСтоимость,
	|	&ГруппаФинансовогоУчета                    КАК ГруппаФинансовогоУчета,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	&НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ТаблицаКомпонентовАмортизации.ОсновноеСредство КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	&ОтражатьВБУ                               КАК ОтражатьВБУ,
	|	&ОтражатьВНУ                               КАК ОтражатьВНУ
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	ТаблицаКомпонентовАмортизации КАК ТаблицаКомпонентовАмортизации
	|ГДЕ
	|	ТаблицаКомпонентовАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	&ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	&ФактическаяСтоимость                      КАК ФактическаяСтоимость,
	|	&ГруппаФинансовогоУчета                    КАК ГруппаФинансовогоУчета,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	&НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	&ОтражатьВБУ                               КАК ОтражатьВБУ,
	|	&ОтражатьВНУ                               КАК ОтражатьВНУ
	|ИЗ
	|	ТаблицаКомпонентовАмортизации КАК ТаблицаКомпонентовАмортизации
	|ГДЕ
	|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|	И ТаблицаКомпонентовАмортизации.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.Узел)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Период,
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма КАК Сумма,
	|	РасходыПоДокументам.СуммаУпр КАК СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС КАК СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл КАК СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	
	ХозяйственнаяОперация = 
		?(ЗначениеЗаполнено(Объект.ХозяйственнаяОперация), 
			Объект.ХозяйственнаяОперация, 
			Перечисления.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации);
			
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ВидАналитикиКапитализацииРасходов", ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства"));
	Запрос.УстановитьПараметр("ФактическаяСтоимость", Ложь);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВНУ", Ложь);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ВнеоборотныеАктивы.УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	ТаблицаКомпонентовАмортизации = Объект.КомпонентыАмортизации.Выгрузить(ВыбранныеСтроки);
	ТаблицаКомпонентовАмортизации.Сортировать("НомерСтроки Возр"); // Нужна сортировка как при расчете стоимости.
	Запрос.УстановитьПараметр("ТаблицаКомпонентовАмортизации", ТаблицаКомпонентовАмортизации);
	
	Результат = Запрос.Выполнить();
	
	ПараметрыРасчетаСтоимости = ВнеоборотныеАктивы.ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.ВидАналитикиКапитализацииРасходов = ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства");
	
	Для каждого СтрокаТаблицы Из ТаблицаКомпонентовАмортизации Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.КомпонентАмортизации) Тогда
			НоваяСтрока = ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.КомпонентАмортизации;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда
			НоваяСтрока = ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВРеглУчете, "ОтражатьВРеглУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВУпрУчете, "ОтражатьВУпрУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВРеглУчете, "ОтражатьВБУ");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Ложь, "ОтражатьВНУ");
	РасходыПоДокументу = ВнеоборотныеАктивы.РассчитатьРасходыПоДокументу(Результат.Выгрузить(), ПараметрыРасчетаСтоимости);
							
	РасходыПоДокументу.Свернуть("ОбъектУчета", "СуммаРегл,СуммаУпр");
	
	Если ВыбранныеСтроки <> Неопределено Тогда
		СписокСтрок = ВыбранныеСтроки;
	Иначе
		СписокСтрок = Объект.КомпонентыАмортизации;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		ДанныеСтроки.СтоимостьУУ = 0;
		ДанныеСтроки.СтоимостьБУ = 0;
			
		СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.ОсновноеСредство);
		СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокРасходы.Количество() <> 0 Тогда
			Если Объект.ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = СписокСтрокРасходы[0].СуммаРегл;
			КонецЕсли; 
			Если Объект.ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = СписокСтрокРасходы[0].СуммаУпр;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.КомпонентАмортизации) Тогда
			
			ТипОС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.КомпонентАмортизации, "ТипОС");
			
			Если ТипОС = Перечисления.ТипыОС.Узел Тогда	
			
				СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.КомпонентАмортизации);
				СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрокРасходы.Количество() <> 0 Тогда
					Если Объект.ОтражатьВРеглУчете Тогда
						ДанныеСтроки.СтоимостьБУ = ДанныеСтроки.СтоимостьБУ + СписокСтрокРасходы[0].СуммаРегл;
					КонецЕсли; 
					Если Объект.ОтражатьВУпрУчете Тогда
						ДанныеСтроки.СтоимостьУУ = ДанныеСтроки.СтоимостьУУ + СписокСтрокРасходы[0].СуммаУпр;
					КонецЕсли;
				КонецЕсли;
		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  Регистратор			 	- ДокументСсылка.ПринятиеКУчетуОС2_4 - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут
//                                                      использоваться для формирования движений.
//
// Возвращаемое значение:
//  Структура - Содержит таблицы движений.
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, МенеджерВременныхТаблиц) Экспорт
	
	СписокРегистров = 
		"ПрочиеРасходы,ПартииПрочихРасходов,ДвиженияДоходыРасходыПрочиеАктивыПассивы,
		|СтоимостьОС,АмортизацияОС,
		|ПараметрыАмортизацииОСБУ,ПараметрыАмортизацииОСУУ,ПервоначальныеСведенияОС,
		|ОтражениеДокументовВРеглУчете";
	
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, СписокРегистров, ДопПараметры);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

Функция ПредставлениеРеквизитов(Организация) Экспорт

	ПредставлениеРеквизитов = Новый Соответствие;

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	ВалютаУпрПредставление = Строка(ВалютаУпр);
	ВалютаРеглПредставление = Строка(ВалютаРегл);
	
	ВалютаРеглЗаполнена = ЗначениеЗаполнено(ВалютаРегл);
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	Если ВедетсяРегламентированныйУчетВНА Тогда
		
		Если ВалютаРеглЗаполнена Тогда
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость регл. (%1)';
																								|en = 'Local cost (%1)'"), ВалютаРеглПредставление));
		Иначе
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", НСтр("ru = 'Стоимость регл.';
																						|en = 'Local cost'"));
		КонецЕсли;
		
		ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость упр. (%1)';
																							|en = 'Manag. cost (%1)'"), ВалютаУпрПредставление));
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																										|en = 'Residual value'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																											|en = 'Residual value (%1)'"), ВалютаУпрПредставление));
			Если ВалютаРеглЗаполнена Тогда
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																													|en = 'Residual value (%1)'"), ВалютаРеглПредставление));
			Иначе
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																											|en = 'Residual value'"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", НСтр("ru = 'Стоимость';
																						|en = 'Cost'"));
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьУУ", НСтр("ru = 'Стоимость';
																						|en = 'Cost'"));
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																										|en = 'Residual value'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)';
																								|en = 'Cost (%1)'"), ВалютаУпрПредставление));
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																											|en = 'Residual value (%1)'"), ВалютаУпрПредставление));
			Если ВалютаРеглЗаполнена Тогда
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																													|en = 'Residual value (%1)'"), ВалютаРеглПредставление));
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)';
																									|en = 'Cost (%1)'"), ВалютаРеглПредставление));
			Иначе
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																											|en = 'Residual value'"));
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", НСтр("ru = 'Стоимость';
																							|en = 'Cost'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ПредставлениеРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПринятиеКУчетуУзловКомпонентовАмортизации";
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	КонецЕсли;
		
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров,
										ТекстыЗапросаВременныхТаблиц);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                            КАК Ссылка,
	|	ДанныеДокумента.Дата                                              КАК Период,
	|	ДанныеДокумента.Номер                                             КАК Номер,
	|	ДанныеДокумента.Организация                                       КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация                             КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Ответственный                                     КАК Ответственный,
	|	ДанныеДокумента.Комментарий                                       КАК Комментарий,
	|	ДанныеДокумента.Проведен                                          КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                                   КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете                                КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете                                 КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ГруппаФинансовогоУчета                            КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.ПорядокУчетаУУ                                    КАК ПорядокУчетаУУ,
	|	ДанныеДокумента.НачислятьАмортизациюУУ                            КАК НачислятьАмортизациюУУ,
	|	ДанныеДокумента.СобытиеОС                                         КАК СобытиеОС,
	|	ДанныеДокумента.СрокИспользованияУУ                               КАК СрокИспользованияУУ,
	|	ДанныеДокумента.КоэффициентУскоренияУУ                            КАК КоэффициентУскоренияУУ,
	|	ДанныеДокумента.МетодНачисленияАмортизацииУУ                      КАК МетодНачисленияАмортизацииУУ,
	|	ДанныеДокумента.НаправлениеДеятельности                           КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Местонахождение                                   КАК Местонахождение,
	|	НастройкиХозяйственныхОпераций.Ссылка                             КАК НастройкаХозяйственнойОперации,
	|	&ПринятиеКУчетуОС_РеквизитыДокумента
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ДобавитьВТекстЗапросаРеквизитыДокумента(Запрос.Текст, "ДанныеДокумента");
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НомерПакета", 0);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	СписокРазрешенныхВариантовРаспределенияРасходов = Новый Массив;
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	Запрос.УстановитьПараметр("СписокРазрешенныхВариантовРаспределенияРасходов", СписокРазрешенныхВариантовРаспределенияРасходов);
	
	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru = 'Принятие к учету ОС';
																	|en = 'Fixed assets — Initial recognition'"));
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ОС", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства);
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());

	ЗначенияПараметровПроведения.Вставить(
		"ХО_СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету", 
		Перечисления.ХозяйственныеОперации.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету);
	
	ЗначенияПараметровПроведения.Вставить(
		"НастройкаХО_СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету", 
		Справочники.НастройкиХозяйственныхОпераций.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету);

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		ЗначенияПараметровПроведения.Вставить(
			"ЕстьУчетСебестоимости", 
			РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Реквизиты.Период));
	
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК Договор,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК НаправлениеДеятельности,
	|	&Местонахождение                        КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаКомпонентов.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Проведен                               КАК Проведен,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	&СобытиеОС                              КАК СобытиеОС,
	|	ТаблицаКомпонентов.ОсновноеСредство     КАК ОсновноеСредство
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентов
	|		ПО ДанныеДокумента.Ссылка = ТаблицаКомпонентов.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестонахождениеОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаВтТаблицаСведенийДляКомпонентовАмортизации(ТекстыЗапроса, "ПринятиеКУчетуУзловКомпонентовАмортизации");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	&Организация                        КАК Организация,
	|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
	|	СведенияВладельца.МОЛ               КАК МОЛ,
	|	СведенияВладельца.Местонахождение                    КАК Местонахождение,
	|	СведенияВладельца.АдресМестонахождения               КАК АдресМестонахождения,
	|	СведенияВладельца.АдресМестонахожденияЗначение       КАК АдресМестонахожденияЗначение,
	|	&ОтражатьВРеглУчете                 КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                  КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаСведенийДляКомпонентовАмортизации КАК СведенияВладельца
	|		ПО ТаблицаКомпонентовАмортизации.ИдентификаторСтроки = СведенияВладельца.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаВтТаблицаСведенийДляКомпонентовАмортизации(ТекстыЗапроса, "ПринятиеКУчетуУзловКомпонентовАмортизации");
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПорядокУчетаОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                 КАК Период,
		|	&Организация                            КАК Организация,
		|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
		|	СведенияВладельца.НаправлениеДеятельности  КАК НаправлениеДеятельности,
		|	&ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
		|	ТаблицаКомпонентовАмортизации.ПоказательНаработки КАК ПоказательНаработки,
		|	ТаблицаКомпонентовАмортизации.ОбъемНаработки КАК ОбъемНаработки,
		|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаСведенийДляКомпонентовАмортизации КАК СведенияВладельца
		|		ПО ТаблицаКомпонентовАмортизации.ИдентификаторСтроки = СведенияВладельца.ИдентификаторСтроки
		|ГДЕ
		|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка";
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаВтТаблицаСведенийДляКомпонентовАмортизации(ТекстыЗапроса, "ПринятиеКУчетуУзловКомпонентовАмортизации");
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПорядокУчетаОСУУ();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                 КАК Период,
		|	&Организация                            КАК Организация,
		|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК Состояние,
		|	&НачислятьАмортизациюУУ                 КАК НачислятьАмортизациюУУ,
		|	СведенияВладельца.СтатьяРасходовУУ КАК СтатьяРасходов,
		|	СведенияВладельца.АналитикаРасходовУУ КАК АналитикаРасходов
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаСведенийДляКомпонентовАмортизации КАК СведенияВладельца
		|		ПО ТаблицаКомпонентовАмортизации.ИдентификаторСтроки = СведенияВладельца.ИдентификаторСтроки
		|ГДЕ
		|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка";
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	&Период                             КАК ДатаПоследнегоИзменения,
	|	&Организация                        КАК Организация,
	|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
	|	&СрокИспользованияУУ                КАК СрокИспользования,
	|	&СрокИспользованияУУ                КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаКомпонентовАмортизации.ОбъемНаработки            КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	&КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	&МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|
	|	ТаблицаКомпонентовАмортизации.ЛиквидационнаяСтоимость       КАК ЛиквидационнаяСтоимость,
	|	ТаблицаКомпонентовАмортизации.ЛиквидационнаяСтоимостьРегл   КАК ЛиквидационнаяСтоимостьРегл,
	|
	|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаКомпонентовАмортизации.СтоимостьУУ) КАК СтоимостьДляВычисленияАмортизации,
	|
	|	ВЫБОР
	|		КОГДА НЕ &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаКомпонентовАмортизации.СтоимостьБУ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизацииРегл
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаКомпонентовАмортизации.ОсновноеСредство
	|ГДЕ
	|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
		|	&Организация КАК Организация,
		|	&Период КАК ДатаВводаВЭксплуатациюУУ,
		|	&Ссылка КАК ДокументВводаВЭксплуатациюУУ,
		|	&ПорядокУчетаУУ КАК ПорядокУчетаУУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаКомпонентовАмортизации.СтоимостьБУ) КАК ПервоначальнаяСтоимостьБУ,
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаКомпонентовАмортизации.СтоимостьУУ) КАК ПервоначальнаяСтоимостьУУ
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО (РасчетСтоимости.ОбъектУчета = ТаблицаКомпонентовАмортизации.КомпонентАмортизации)
		|ГДЕ
		|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаВтТаблицаСведенийДляКомпонентовАмортизации(ТекстыЗапроса, "ПринятиеКУчетуУзловКомпонентовАмортизации");
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	СведенияВладельца.Местонахождение            КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	СведенияВладельца.НаправлениеДеятельности    КАК НаправлениеДеятельности,
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства) КАК ВидАналитикиКапитализацииРасходов,
		|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
		|	ТаблицаКомпонентовАмортизации.ОсновноеСредство КАК АналитикаКапитализацииРасходов,
		|
		|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)                КАК КорПодразделение,
		|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)      КАК КорНаправлениеДеятельности,
		|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)               КАК КорСтатьяРасходов,
		|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)            КАК КорАналитикаРасходов,
		|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                                КАК РасчетСтоимости,
		|
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаКомпонентовАмортизации.СтоимостьУУ) КАК Стоимость,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаКомпонентовАмортизации.СтоимостьБУ) КАК СтоимостьРегл,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, 0) КАК СтоимостьВР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
		|
		|	0 КАК ПредварительнаяСтоимость,
		|	0 КАК ПредварительнаяСтоимостьРегл,
		|	
		|	РасчетСтоимости.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации 
		|	
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
		|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаКомпонентовАмортизации.ОсновноеСредство
		|			И РасчетСтоимости.НомерСтроки = ТаблицаКомпонентовАмортизации.НомерСтроки
		|			И РасчетСтоимости.Ссылка = &Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаСведенийДляКомпонентовАмортизации КАК СведенияВладельца
		|		ПО ТаблицаКомпонентовАмортизации.ИдентификаторСтроки = СведенияВладельца.ИдентификаторСтроки
		|ГДЕ
		|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Нужно отдельно записать предварительную стоимость для расчета амортизации
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	СведенияВладельца.Местонахождение            КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	СведенияВладельца.НаправлениеДеятельности    КАК НаправлениеДеятельности,
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства) КАК ВидАналитикиКапитализацииРасходов,
		|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОсновноеСредство,
		|	ТаблицаКомпонентовАмортизации.ОсновноеСредство КАК АналитикаКапитализацииРасходов,
		|
		|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
		|	ЛОЖЬ                                         КАК РасчетСтоимости,
		|
		|	0                                            КАК Стоимость,
		|	0                                            КАК СтоимостьРегл,
		|	0                                            КАК СтоимостьНУ,
		|	0                                            КАК СтоимостьПР,
		|	0                                            КАК СтоимостьВР,
		|	0                                            КАК СтоимостьЦФ,
		|	0                                            КАК СтоимостьНУЦФ,
		|	0                                            КАК СтоимостьПРЦФ,
		|	0                                            КАК СтоимостьВРЦФ,
		|
		|	ТаблицаКомпонентовАмортизации.СтоимостьУУ    КАК ПредварительнаяСтоимость,
		|	ТаблицаКомпонентовАмортизации.СтоимостьБУ    КАК ПредварительнаяСтоимостьРегл,
		|
		|	&ИдентификаторНеиспользуемойФинЗаписи        КАК ИдентификаторФинЗаписи,
		|	НЕОПРЕДЕЛЕНО                                 КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаСведенийДляКомпонентовАмортизации КАК СведенияВладельца
		|		ПО ТаблицаКомпонентовАмортизации.ИдентификаторСтроки = СведенияВладельца.ИдентификаторСтроки
		|ГДЕ
		|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка
		|	И (ТаблицаКомпонентовАмортизации.СтоимостьБУ <> 0 ИЛИ ТаблицаКомпонентовАмортизации.СтоимостьУУ <> 0)";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                      КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	&Организация                                 КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                                 КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	&ГруппаФинансовогоУчета                      КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                                 КАК КорОрганизация,
	|
	|	РасчетСтоимости.Сумма                        КАК Сумма,
	|	РасчетСтоимости.СтоимостьРегл                КАК СуммаРегл,
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|ГДЕ
	|	РасчетСтоимости.Ссылка = &Ссылка
	|";
	
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаУзлыКомпонентыАмортизации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УзлыКомпонентыАмортизации";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК УзелКомпонент,
	|	ТаблицаКомпонентовАмортизации.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
	|ГДЕ
	|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос);
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
		ЗапросыРегистра = Новый Массив;
		
		ЗапросыРегистра.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Организация                                 КАК Организация,
		|   РасчетРасходов.Подразделение                 КАК Подразделение,
		|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
		|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
		|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
		|
		|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
		|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
		|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
		|
		|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
		|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
		|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
		|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница,
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
		|	                                                                             
		|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
		|	&ХозяйственнаяОперация                       КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	ВтРасчетРасходов КАК РасчетРасходов
		|ГДЕ
		|	РасчетРасходов.Ссылка = &Ссылка";
		
		ЗапросыРегистра.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ЗапросыРегистра, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса)

	ИмяТаблицы = "ВтРасчетСтоимостиСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаКомпонентовАмортизации.КомпонентАмортизации КАК ОбъектУчета,
		|	СУММА(РасчетСтоимости.Стоимость)          КАК Стоимость,
		|	СУММА(РасчетСтоимости.СтоимостьРегл)      КАК СтоимостьРегл,
		|	СУММА(РасчетСтоимости.СтоимостьНУ)        КАК СтоимостьНУ,
		|	СУММА(РасчетСтоимости.СтоимостьПР)        КАК СтоимостьПР,
		|	СУММА(РасчетСтоимости.СтоимостьВР)        КАК СтоимостьВР,
		|	СУММА(РасчетСтоимости.СтоимостьЦФ)        КАК СтоимостьЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
		|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная
		|ИЗ
		|	ВтРасчетСтоимости КАК РасчетСтоимости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|		ПО ТаблицаКомпонентовАмортизации.НомерСтроки = РасчетСтоимости.НомерСтроки
		|			И ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка
		|ГДЕ
		|	РасчетСтоимости.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСтоимости.ОбъектУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
