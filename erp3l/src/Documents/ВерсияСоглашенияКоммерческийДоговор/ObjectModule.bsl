#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьВычисляемыеРеквизитыПоДаннымДоговора(ДоговорОбъект) Экспорт
	
	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ХозяйственнаяОперация = РаботаСДоговорамиКонтрагентовЕХВызовСервера.ХозяйственнаяОперация(ВидДоговораУХ, ВариантОформленияЗакупок);
	
	РаботаСДоговорамиКонтрагентовУХ.ПередЗаписьюВерсииСоглашения(ЭтотОбъект, Отказ, РежимЗаписи);
		
	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		ОбщегоНазначенияКлиентСерверУХ.ОчиститьСвойстваОбъекта(ЭтотОбъект, 
			"СпособФормированияПлатежей, ИдентификаторПлатежа, ШаблонПроцесса
				|, РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов, РежимАктуализацииЗаявок, БезакцептноеСписание");
	КонецЕсли;
		
	Если СпособФормированияПлатежей <> Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей Тогда
		ОбщегоНазначенияКлиентСерверУХ.ОчиститьСвойстваОбъекта(ЭтотОбъект, 
			"РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов, РежимАктуализацииЗаявок");
	КонецЕсли;

	Если ВидДоговораУХ <> Справочники.ВидыДоговоровКонтрагентовУХ.СКомиссионером Тогда
		ОбщегоНазначенияКлиентСерверУХ.ОчиститьСвойстваОбъекта(ЭтотОбъект, 
			"СтатьяКомиссионногоВознаграждения, 
			| АналитикаКомиссионногоВознаграждения1, АналитикаКомиссионногоВознаграждения2, 
			| АналитикаКомиссионногоВознаграждения3, АналитикаКомиссионногоВознаграждения4,
			| АналитикаКомиссионногоВознаграждения5, АналитикаКомиссионногоВознаграждения6");
	КонецЕсли;
	
	Если СпособФормированияПлатежей <> Перечисления.СпособыФормированияПлатежейПоДоговору.ПоПроцессу Тогда
		 ОбщегоНазначенияКлиентСерверУХ.ОчиститьСвойстваОбъекта(ЭтотОбъект, "ШаблонПроцесса");
	КонецЕсли;	
	
	#Область ЦентрализованныеЗакупки
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Документы.ВерсияСоглашенияКоммерческийДоговор.ЭтоДоговорЦУЗ(
													ЭтотОбъект) Тогда
		ПроверитьЗаполнениеХарактеристикОтменить(Отказ);
	КонецЕсли;
	#КонецОбласти
	
	УстановитьИдентификаторПлатежа();
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);	
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);	
	ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	// ОПК
	КорректировкаЛимитовУХ.ОповещениеПоДокументамОбеспеченнымКорректировкойЛимитов(Ссылка, Отказ);
	// Конец ОПК
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовУХ.ПриЗаписиВерсииСоглашения(ЭтотОбъект, Отказ);
	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	// Общая логика для всех договорных документов.
	РаботаСДоговорамиКонтрагентовУХ.ОбработкаЗаполненияВерсииСоглашения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	ТипЗнчДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗнчДанныеЗаполнения =
				Тип("ДокументСсылка.ПредложениеПоставщика") Тогда
		ЗаполнитьПоПредложениюПоставщика(ДанныеЗаполнения);
	ИначеЕсли ТипЗнчДанныеЗаполнения = Тип("Структура")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ДанныеЗаполнения, "ДокументОснование") Тогда
		ЗаполнитьПоПредложениюПоставщика(ДанныеЗаполнения.ДокументОснование);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ТипДоговора) Тогда
		ТипДоговора = УправлениеДоговорамиУХВызовСервераПовтИсп.ВидДоговораБП(ВидДоговораУХ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		ХозяйственнаяОперация = РаботаСДоговорамиКонтрагентовЕХВызовСервера.ХозяйственнаяОперация(ВидДоговораУХ, ВариантОформленияЗакупок);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ВидДоговораУХ) Тогда
		РаботаСДоговорамиКонтрагентовУХ.УстановитьЛимитЗадолженностиПоДоговору(ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	РаботаСДоговорамиКонтрагентовУХ.ПриКопированииВерсииСоглашения(ЭтотОбъект, ОбъектКопирования);
	#Область ЦентрализованныеЗакупкиУХ
	УИД_ЕИС = "";
	РегистрационныйНомерЕИС = 0;
	#КонецОбласти
	
	НомерДополнительногоСоглашения = 1;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РаботаСДоговорамиКонтрагентовУХ.ОбработкаПроверкиЗаполненияВерсииСоглашения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ДоговорыКонтрагентовВстраиваниеУХ.ОбработкаПроверкиЗаполненияВерсияСоглашенияКоммерческийДоговор(
		ЭтотОбъект,
		МассивНепроверяемыхРеквизитов,
		Отказ,
		ПроверяемыеРеквизиты);
	
	Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия)
		И ДатаНачалаДействия > ДатаОкончанияДействия Тогда
	
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность",
			НСтр("ru = 'Срок действия до'"), , , 
			НСтр("ru = 'Срок действия договора должен быть больше или равен дате договора.'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОкончанияДействия", "Объект", Отказ);
		
	КонецЕсли;   
		
	// Проверка заполнения курса: если валюта взаиморасчетов отличается от валюты оплаты и  
	// установлен "Фиксированный курс", курс и кратность должны быть не нулевыми. 
	Если ВалютаВзаиморасчетов <> ОсновнаяВалютаПлатежей
		И СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс Тогда
		
		Если КурсПлатежа = 0  Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность",
			НСтр("ru = 'Курс'"), , , 
			НСтр("ru = 'Курс платежа должен быть не нулевым'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КурсПлатежа", "Объект", Отказ);
		
		КонецЕсли;
		
		Если КратностьПлатежа = 0  Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность",
			НСтр("ru = 'Кратность'"), , , 
			НСтр("ru = 'Кратность платежа должна быть не нулевой'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КратностьПлатежа", "Объект", Отказ);
		
		КонецЕсли;

	КонецЕсли;
	
	Если СпособФормированияПлатежей <> Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РежимИспользованияГрафика");
	КонецЕсли;
	
	ВыполняетсяКонтрольСуммыРасходов = ПланыВидовХарактеристик.ВидыКонтроляДокументов.ВидКонтроляИспользуется(
											ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольРасходовПоДоговору);
											
	Если Не ВыполняетсяКонтрольСуммыРасходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Сумма");	
	КонецЕсли;	
		
	#Область УХ_ЦентрализованныеЗакупки
	Если Документы.ВерсияСоглашенияКоммерческийДоговор.ЭтоДоговорЦУЗ(ЭтотОбъект) Тогда
		ПроверитьСообщитьПериодыЗакупок(Отказ);
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ДатаНачалаДействия");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОкончанияДействия");
	КонецЕсли;
	#КонецОбласти
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВерсияСоглашенияКоммерческийДоговор.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ВыполнятьБюджетирование = ВыполнятьБюджетирование();
	Если ВыполнятьБюджетирование Тогда
		КонтрольЛимитовУХ.ВыполнитьПроверкуНаличияПериодов(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	#Область УХ_ЦентрализованныеЗакупки
	Документы.ВерсияСоглашенияКоммерческийДоговор.ЗаполнитьДвиженияПланПоставокПоДоговорам(
		ЭтотОбъект,
		Движения.ПланПоставокПоДоговорам);
	ЗаполнитьДвиженияДоговорыПоЗакупочнымПроцедурам();
	ЗаполнитьДвиженияПланаПотребностейВНоменклатуре();
	ЗаписатьСтатистикуДляЕИСПоДоговору();
	УстановитьЗавершениеЗакупочнойПроцедуры();
	#КонецОбласти
	
	РаботаСДоговорамиКонтрагентовУХ.ОтразитьВерсииРасчетов(ДополнительныеСвойства, Движения, Отказ);
	РаботаСДоговорамиКонтрагентовУХ.ОтразитьРасчетыСКонтрагентамиГрафики(ДополнительныеСвойства, Движения, Отказ);
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОперативныйПланПоБюджетам") Тогда
		КонтрольЛимитовУХ.ОтразитьОперативныйПланПоБюджету(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЛимитыПоБюджетам") Тогда
		КонтрольЛимитовУХ.ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	//
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУХ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

	// Зеркалирование графика
	РаботаСДоговорамиКонтрагентовУХ.СинхронизироватьВнутригрупповыеВерсииСоглашения(Ссылка, ДополнительныеСвойства);
	
	РаботаСДоговорамиКонтрагентовУХ.ОбновитьПозицииЗаявокПоГрафику(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьИдентификаторПлатежа()

	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Ссылка,
									|Номер,
									|Дата,
									|ГосударственныйКонтракт,
									|ДоговорСУчастникомГОЗ,
									|ПлатежиПо275ФЗ,
									|ТипПлатежаФЗ275,
									|ПодтверждающиеДокументы,
									|ДоговорыСЗаказчиками,
									|БанковскийСчет,
									|ИдентификаторПлатежа");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта,ЭтотОбъект);
	          
	ДоговорыКонтрагентовЛокализация.ПередЗаписью(Ложь, ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеОбъекта,"ИдентификаторПлатежа");
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияДоговорыПоЗакупочнымПроцедурам()
	Движения.ДоговорыПоЗакупочнымПроцедурам.Записывать = Истина;
	Если Документы.ВерсияСоглашенияКоммерческийДоговор.ЭтоДоговорЦУЗ(ЭтотОбъект) Тогда
		ОписаниеКэффициента =
			ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
				ВалютаВзаиморасчетов,
				Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
				Дата);
		СуммаДоговораВВалютеЗакупок = Номенклатура.Итог("Сумма")
			* ОписаниеКэффициента.Коэффициент / ОписаниеКэффициента.Кратность;
		мЛоты = Документы.ВерсияСоглашенияКоммерческийДоговор.ПолучитьЛотыВерсии(
			Номенклатура);
		РегистрыСведений.ДоговорыПоЗакупочнымПроцедурам.ЗаполнитьНаборЗаписей(
				Движения.ДоговорыПоЗакупочнымПроцедурам,
				ЭтотОбъект,
				мЛоты);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьСтатистикуДляЕИСПоДоговору()
	//РегистрыСведений.СтатистикаДоговоровДляЕИС.ЗаписатьСтатистикуПоДоговору(
	//		ЭтотОбъект);
КонецПроцедуры

Процедура ЗаполнитьДвиженияПланаПотребностейВНоменклатуре()
	Движения.ПотребностиВНоменклатуре.Записывать = Истина;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ВыборкаЗапроса = ПолучитьВыборкуДвиженийПланаПотребностейДляСторнирования();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Движение = Движения.ПотребностиВНоменклатуре.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗапроса);
		КонецЦикла;
	КонецЕсли;
	Если Документы.ВерсияСоглашенияКоммерческийДоговор.ЭтоДоговорЦУЗ(ЭтотОбъект) Тогда
		ВыборкаЗапроса = ПолучитьВыборкуДляЗаписиОбеспеченияПотребности();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Если ВыборкаЗапроса.КоличествоВОбеспечении <> 0 ИЛИ ВыборкаЗапроса.СуммаВОбеспечении <> 0 ИЛИ ВыборкаЗапроса.КоличествоВнеПлана <> 0 ИЛИ ВыборкаЗапроса.СуммаВнеПлана <> 0 Тогда
				Движение = Движения.ПотребностиВНоменклатуре.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗапроса);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВыборкуДвиженийПланаПотребностейДляСторнирования()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Период,
		|	ПотребностиВНоменклатуре.Приоритет КАК Приоритет,
		|	ПотребностиВНоменклатуре.Номенклатура КАК Номенклатура,
		|	ПотребностиВНоменклатуре.Характеристика КАК Характеристика,
		|	ПотребностиВНоменклатуре.ПериодПотребности КАК ПериодПотребности,
		|	ПотребностиВНоменклатуре.Организация КАК Организация,
		|	ПотребностиВНоменклатуре.МестоПоставки КАК МестоПоставки,
		|	ПотребностиВНоменклатуре.Проект КАК Проект,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.Менеджер КАК Менеджер,
		|	ПотребностиВНоменклатуре.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(-ПотребностиВНоменклатуре.КоличествоВОбеспечении) КАК КоличествоВОбеспечении,
		|	СУММА(-ПотребностиВНоменклатуре.СуммаВОбеспечении) КАК СуммаВОбеспечении,
		|	МАКСИМУМ(ПотребностиВНоменклатуре.Коэффициент) КАК Коэффициент,
		|	ПотребностиВНоменклатуре.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(-ПотребностиВНоменклатуре.КоличествоВнеПлана) КАК КоличествоВнеПлана,
		|	СУММА(-ПотребностиВНоменклатуре.СуммаВнеПлана) КАК СуммаВнеПлана
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
		|ГДЕ
		|	ПотребностиВНоменклатуре.Регистратор = &Ссылка
		|	И (ПотребностиВНоменклатуре.СуммаВОбеспечении > 0
		|			ИЛИ ПотребностиВНоменклатуре.КоличествоВОбеспечении > 0
		|			ИЛИ ПотребностиВНоменклатуре.КоличествоВнеПлана > 0
		|			ИЛИ ПотребностиВНоменклатуре.СуммаВнеПлана > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВНоменклатуре.ЕдиницаИзмерения,
		|	ПотребностиВНоменклатуре.Номенклатура,
		|	ПотребностиВНоменклатуре.Характеристика,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.Проект,
		|	ПотребностиВНоменклатуре.МестоПоставки,
		|	ПотребностиВНоменклатуре.Организация,
		|	ПотребностиВНоменклатуре.ПериодПотребности,
		|	ПотребностиВНоменклатуре.Приоритет,
		|	ПотребностиВНоменклатуре.Менеджер,
		|	ПотребностиВНоменклатуре.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка",
		ДокументОснование);
	Запрос.УстановитьПараметр("Дата", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Функция ПолучитьВыборкуДляЗаписиОбеспеченияПотребности()
	ОписаниеКэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
			ВалютаВзаиморасчетов,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			Дата);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Период,
		|	ВерсияСоглашенияНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВерсияСоглашенияНоменклатура.Количество * ВерсияСоглашенияНоменклатура.Коэффициент КАК Количество,
		|	ВерсияСоглашенияНоменклатура.Коэффициент КАК Коэффициент,
		|	ВерсияСоглашенияНоменклатура.Менеджер КАК Менеджер,
		|	ВерсияСоглашенияНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ВерсияСоглашенияНоменклатура.Номенклатура КАК Номенклатура,
		|	ВерсияСоглашенияНоменклатура.Характеристика КАК Характеристика,
		|	ВерсияСоглашенияНоменклатура.Организация КАК Организация,
		|	ВерсияСоглашенияНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ВерсияСоглашенияНоменклатура.Приоритет КАК Приоритет,
		|	ВерсияСоглашенияНоменклатура.Проект КАК Проект,
		|	ВерсияСоглашенияНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВерсияСоглашенияНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВерсияСоглашенияНоменклатура.Сумма * &КоэффициентПересчетаВалюты / &Кратность КАК Сумма,
		|	ВерсияСоглашенияНоменклатура.Цена * &КоэффициентПересчетаВалюты / &Кратность КАК Цена
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияНоменклатура
		|ГДЕ
		|	(ВерсияСоглашенияНоменклатура.Количество <> 0
		|			ИЛИ ВерсияСоглашенияНоменклатура.Сумма <> 0)
		|	И ВерсияСоглашенияНоменклатура.Ссылка = &Ссылка
		|	И ВерсияСоглашенияНоменклатура.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Период КАК Период,
		|	ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Количество <= ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоВОбеспеченииОборот, 0)
		|			ТОГДА ДанныеДокумента.Количество
		|		КОГДА ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоВОбеспеченииОборот, 0) > 0
		|			ТОГДА ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоВОбеспеченииОборот, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВОбеспечении,
		|	ДанныеДокумента.Коэффициент КАК Коэффициент,
		|	ДанныеДокумента.Менеджер КАК Менеджер,
		|	ДанныеДокумента.МестоПоставки КАК МестоПоставки,
		|	ДанныеДокумента.Номенклатура КАК Номенклатура,
		|	ДанныеДокумента.Характеристика КАК Характеристика,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ПериодПотребности КАК ПериодПотребности,
		|	ДанныеДокумента.Приоритет КАК Приоритет,
		|	ДанныеДокумента.Проект КАК Проект,
		|	ДанныеДокумента.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Сумма <= ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаВОбеспеченииОборот, 0)
		|			ТОГДА ДанныеДокумента.Сумма
		|		КОГДА ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаВОбеспеченииОборот, 0) > 0
		|			ТОГДА ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаВОбеспеченииОборот, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВОбеспечении,
		|	ДанныеДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Сумма <= ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаВОбеспеченииОборот, 0)
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаВОбеспеченииОборот, 0) > 0
		|			ТОГДА ДанныеДокумента.Сумма - (ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.СуммаВОбеспеченииОборот, 0))
		|		ИНАЧЕ ДанныеДокумента.Сумма
		|	КОНЕЦ КАК СуммаВнеПлана,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Количество <= ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоВОбеспеченииОборот, 0)
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоВОбеспеченииОборот, 0) > 0
		|			ТОГДА ДанныеДокумента.Количество - (ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот, 0) - ЕСТЬNULL(ПотребностиВНоменклатуреОбороты.КоличествоВОбеспеченииОборот, 0))
		|		ИНАЧЕ ДанныеДокумента.Количество
		|	КОНЕЦ КАК КоличествоВнеПлана
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностиВНоменклатуре.Обороты(, &Граница, , ) КАК ПотребностиВНоменклатуреОбороты
		|		ПО (ПотребностиВНоменклатуреОбороты.Организация = ДанныеДокумента.Организация)
		|			И (ПотребностиВНоменклатуреОбороты.ПериодПотребности = ДанныеДокумента.ПериодПотребности)
		|			И (ПотребностиВНоменклатуреОбороты.Приоритет = ДанныеДокумента.Приоритет)
		|			И (ПотребностиВНоменклатуреОбороты.Номенклатура = ДанныеДокумента.Номенклатура)
		|			И (ПотребностиВНоменклатуреОбороты.Характеристика = ДанныеДокумента.Характеристика)
		|			И (ПотребностиВНоменклатуреОбороты.МестоПоставки = ДанныеДокумента.МестоПоставки)
		|			И (ПотребностиВНоменклатуреОбороты.Проект = ДанныеДокумента.Проект)
		|			И (ПотребностиВНоменклатуреОбороты.Менеджер = ДанныеДокумента.Менеджер)
		|			И (ПотребностиВНоменклатуреОбороты.ДоговорСПокупателем = ДанныеДокумента.ДоговорСПокупателем)
		|			И (ПотребностиВНоменклатуреОбороты.СтавкаНДС = ДанныеДокумента.СтавкаНДС)";
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Граница", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКэффициента.Кратность);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Функция ПолучитьРезультатЗапросаДляЗаполненияДоговораПоПредложениюПобедителя(
													ПредложениеПобедителя)
	ОписаниеКэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПредложениеПобедителя.Лот.ВалютаДокумента,
			ПредложениеПобедителя.Дата);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоставщикиПоЛотам.Лот КАК Лот,
		|	ПоставщикиПоЛотам.Приоритет КАК Приоритет,
		|	ПоставщикиПоЛотам.ПериодПотребности КАК ПериодПотребности,
		|	ПоставщикиПоЛотам.Номенклатура КАК Номенклатура,
		|	ПоставщикиПоЛотам.Характеристика КАК Характеристика,
		|	ПоставщикиПоЛотам.Организация КАК Организация,
		|	ПоставщикиПоЛотам.МестоПоставки КАК МестоПоставки,
		|	ПоставщикиПоЛотам.Проект КАК Проект,
		|	ПоставщикиПоЛотам.Менеджер КАК Менеджер,
		|	ПоставщикиПоЛотам.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПоставщикиПоЛотам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПоставщикиПоЛотам.Коэффициент КАК Коэффициент,
		|	ПоставщикиПоЛотам.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ПоставщикиПоЛотам.Количество <> 0
		|			ТОГДА ПоставщикиПоЛотам.Сумма / ПоставщикиПоЛотам.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ  КАК Цена,
		|	ПоставщикиПоЛотам.СтавкаНДС КАК СтавкаНДС,
		|	ПоставщикиПоЛотам.Сумма  КАК Сумма,
		|	ПоставщикиПоЛотам.СуммаНДС  КАК СуммаНДС,
		|	ПоставщикиПоЛотам.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ПоставщикиПоЛотам.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ПоставщикиПоЛотам.СтранаПроизводителя КАК СтранаПроизводителя		
		|ПОМЕСТИТЬ ДанныеРегистра
		|ИЗ
		|	РегистрСведений.ПоставщикиПоЛотам КАК ПоставщикиПоЛотам
		|ГДЕ
		|	ПоставщикиПоЛотам.ПредложениеПоставщика = &ПредложениеПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ДанныеРегистра.ПериодПотребности.ДатаНачала) КАК ДатаНачалаДействия,
		|	МАКСИМУМ(ДанныеРегистра.ПериодПотребности.ДатаОкончания) КАК ДатаОкончанияДействия,
		|	ДанныеРегистра.НоменклатураПоставщика КАК НоменклатураПоставщика
		|ПОМЕСТИТЬ ГраницыПериодаДоговора
		|ИЗ
		|	ДанныеРегистра КАК ДанныеРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.НоменклатураПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.Лот КАК Лот,
		|	ДанныеРегистра.Приоритет КАК Приоритет,
		|	ДанныеРегистра.ПериодПотребности КАК ПериодПотребности,
		|	ДанныеРегистра.Номенклатура КАК Номенклатура,
		|	ДанныеРегистра.Характеристика КАК Характеристика,
		|	ДанныеРегистра.Организация КАК Организация,
		|	ДанныеРегистра.МестоПоставки КАК МестоПоставки,
		|	ДанныеРегистра.Проект КАК Проект,
		|	ДанныеРегистра.Менеджер КАК Менеджер,
		|	ДанныеРегистра.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ДанныеРегистра.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДанныеРегистра.Коэффициент КАК Коэффициент,
		|	ДанныеРегистра.Количество КАК Количество,
		|	ДанныеРегистра.Цена КАК Цена,
		|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеРегистра.Сумма КАК Сумма,
		|	ДанныеРегистра.СуммаНДС КАК СуммаНДС,
		|	ДанныеРегистра.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ДанныеРегистра.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ДанныеРегистра.СтранаПроизводителя КАК СтранаПроизводителя				
		|ИЗ
		|	ДанныеРегистра КАК ДанныеРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГраницыПериодаДоговора.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ГраницыПериодаДоговора.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДокументПредложениеПоставщика.Контрагент КАК Контрагент,
		|	ДокументПредложениеПоставщика.Лот.ОрганизацияДляЗаключенияДоговора КАК Организация,
		|	ДокументПредложениеПоставщика.Лот.ВалютаДокумента КАК ВалютаВзаиморасчетов,
		|	ДокументПредложениеПоставщика.УсловиеОплаты КАК УсловиеОплаты,
		|	ДокументПредложениеПоставщика.Лот.УсловияПоставкиИнкотермс КАК УсловияПоставкиИнкотермс,
		|	ДокументПредложениеПоставщика.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ДокументПредложениеПоставщика.Лот.СтрокаПланаЗакупок.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков КАК ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков,
		|	ДокументПредложениеПоставщика.Лот.СтрокаПланаЗакупок.ПриоритетУчастияМалогоИСреднегоПредпринимательства КАК ПриоритетУчастияМалогоИСреднегоПредпринимательства,
		|	ДокументПредложениеПоставщика.Лот.СтрокаПланаЗакупок.НеУчитыватьПриРасчетеДолиЗакупокУСМП КАК НеУчитыватьПриРасчетеДолиЗакупокУСМП,
		|	ДокументПредложениеПоставщика.Лот.СтрокаПланаЗакупок.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223 КАК НеВключенВПланЗакупкиЧасть15Ст4ФЗ223
		|ИЗ
		|	Документ.ПредложениеПоставщика КАК ДокументПредложениеПоставщика,
		|	ГраницыПериодаДоговора КАК ГраницыПериодаДоговора
		|ГДЕ
		|	ДокументПредложениеПоставщика.Ссылка = &ПредложениеПоставщика";
	Запрос.УстановитьПараметр("ПредложениеПоставщика", ПредложениеПобедителя);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКэффициента.Кратность);
	мРезультатыЗапросов = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Результат.Вставить("ДанныеРегистра", мРезультатыЗапросов[2]);
	Результат.Вставить("УсловияПоставки", мРезультатыЗапросов[3]);
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьПоПредложениюПоставщика(ПредложениеПобедителя)
	ЦентрализованныеЗакупкиУХ.ПроверитьВозможностьВводаДоговораНаОснованииПредложения(
		ПредложениеПобедителя);
	РезультатыЗапроса = 
		ПолучитьРезультатЗапросаДляЗаполненияДоговораПоПредложениюПобедителя(
			ПредложениеПобедителя);
	РезультатЗапроса = РезультатыЗапроса.ДанныеРегистра;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтр = Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаДетальныеЗаписи);
		Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
	КонецЦикла;	
	РезультатЗапроса = РезультатыЗапроса.УсловияПоставки;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаДетальныеЗаписи);
	КонецЕсли;		
	ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком;
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Если ЗначениеЗаполнено(УсловиеОплаты) Тогда
		СпособФормированияПлатежей = 
			Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей;
	Иначе
		СпособФормированияПлатежей = 
			Перечисления.СпособыФормированияПлатежейПоДоговору.Вручную;
	КонецЕсли;
	Если ПустаяСтрока(НаименованиеВерсии) Тогда
		НаименованиеВерсии = СоздатьНаименованиеДоговораСПоставщиком(
			ПредложениеПобедителя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ПредложениеПобедителя,"Партнер")) Тогда
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредложениеПобедителя,"Партнер");	
	Иначе	
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	КонецЕсли;
	Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредложениеПобедителя, "Соглашение");
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредложениеПобедителя,"ЦенаВключаетНДС");
	ЦентрализованныеЗакупкиУХ.ЗаполнитьРеквизитыСМСПИзОбъекта(
		ЭтотОбъект,
		?(ЗначениеЗаполнено(ПредложениеПобедителя),
			ПредложениеПобедителя.Лот.Владелец,
			Неопределено));
	ЗаполненыРеквизитыУчетаСМСП = Истина;	
КонецПроцедуры
										
Процедура ПроверитьСообщитьПериодыЗакупок(Отказ)
	ТекстОшибки = ЦентрализованныеЗакупкиВызовСервераУХ.ПроверитьПериодЗакупок(
		ПериодЗакупокНачало, 
		ПериодЗакупокОкончание);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(Нстр("ru = 'Невозможно изменить период закупок: %1'"), ТекстОшибки), 
			ЭтотОбъект, 
			"ПериодЗакупокНачало", 
			"Объект", 
			Отказ);
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьЗаполнениеХарактеристикОтменить(Отказ) Экспорт
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект,
		Новый Массив,
		Отказ,
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПараметрыПроверкиЗаполненияХарактеристик());
	Возврат Отказ;
КонецФункции

Функция СоздатьНаименованиеДоговораСПоставщиком(ПредложениеПобедителя)
	Результат = НСтр("ru='Договор поставки'");
	Если ЗначениеЗаполнено(ПредложениеПобедителя) Тогда
		Лот = ПредложениеПобедителя.Лот;
		Если ЗначениеЗаполнено(Лот) Тогда
			Результат = Результат + СтрШаблон(НСтр("ru=' по лоту %1'"), Лот);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	ВыполнятьБюджетирование = ВыполнятьБюджетирование();
	
	Массив = Новый Массив;
	
	Если ВыполнятьБюджетирование Тогда
		Массив.Добавить(Движения.ЛимитыПоБюджетам);
	КонецЕсли;	
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ВыполнятьБюджетирование()
	
	Возврат Документы.ВерсияСоглашенияКоммерческийДоговор.ВыполнятьБюджетирование(ЭтотОбъект);
	
КонецФункции

#Область УХ_Закупки

// Устанавливает флаг Завершена для всех закупок по данному договору.
Процедура УстановитьЗавершениеЗакупочнойПроцедуры()
	МассивЛотов = Номенклатура.ВыгрузитьКолонку("Лот");
	МассивЛотов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЛотов);
	МассивЛотов = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивЛотов);
	Для Каждого ТекМассивЛотов Из МассивЛотов Цикл
		ТекЗакупка = ТекМассивЛотов.ЗакупочнаяПроцедура;
		Если ЗначениеЗаполнено(ТекЗакупка) Тогда
			Если НЕ ТекЗакупка.Завершена Тогда
				Справочники.ЗакупочныеПроцедуры.УстановитьФлагЗавершена(ТекЗакупка, Истина, Ссылка);
			Иначе
				// Флаг Завершена уже установлен.
			КонецЕсли;
		Иначе
			// В лоте не указана закупочная процедура. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры		// УстановитьЗавершениеЗакупочнойПроцедуры()

#КонецОбласти

#КонецОбласти

#КонецЕсли