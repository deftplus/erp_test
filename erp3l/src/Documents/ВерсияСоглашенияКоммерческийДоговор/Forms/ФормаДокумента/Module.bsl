#Область ПеременныеФормы
&НаКлиенте
Перем ИсходнаяДатаСтроки;
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОписаниеГрафика = Документы.ВерсияСоглашенияКоммерческийДоговор.ОписаниеГрафика(Объект.ВидДоговораУХ);
	
	ДоговорыКонтрагентовФормыУХ.ПриСозданииНаСервереВерсииСоглашения(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ДоговорыКонтрагентовВстраиваниеУХ.ПриСозданииНаСервереВерсияСоглашенияКоммерческийДоговор(
		ЭтотОбъект, Отказ, СтандартнаяОбработка);

	РасчетОплаты = ?(Объект.УстановленСрокОплаты, ?(Объект.ИспользоватьДатуОплаты, 2, 1), 0);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьСпособыОсуществленияПлатежей(Элементы.СпособФормированияПлатежей.СписокВыбора, Объект.ВидДоговораУХ);
	ДоговорыКонтрагентовФормыУХ.УстановитьРекомендуемоеУсловиеОплаты(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Претензия) Тогда
		Элементы.ГрафикРасчетов.ТолькоПросмотр = Истина;
		Элементы.ГрафикРасчетовЛинейный.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХ.ИнициализироватьПереченьОперацийГрафика(ЭтотОбъект);
		
	УстановитьУсловноеОформление();
	РежимРедактирования = НЕ Объект.Проведен;
	Если Объект.ДоговорКонтрагента <> Неопределено Тогда
		АктуальнаяВерсия = РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();	
	
	#Область ЦентрализованныеЗакупки
	Если Параметры.Свойство("ЗначенияЗаполнения") И  Параметры.ЗначенияЗаполнения.Свойство("Номенклатура") Тогда
		Объект.Номенклатура.Загрузить(Параметры.ЗначенияЗаполнения.Номенклатура.Выгрузить());
	КонецЕсли;
	Если Параметры.Свойство("ЗначенияЗаполнения") И  Параметры.ЗначенияЗаполнения.Свойство("Лот") Тогда
		Для Каждого Строка Из Объект.Номенклатура Цикл
			Строка.Лот = Параметры.ЗначенияЗаполнения.Лот;	
		КонецЦикла;                          
		Объект.Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначенияЗаполнения.Лот,"Соглашение");
	КонецЕсли;
	
	ИнициализироватьЦентрализованныеЗакупки();
	Если ИспользуетсяУправлениеЗакупками Тогда
		ОбновитьРеквизитыФормыЗакупокПоОрганизации();
	КонецЕсли;
	УстановитьРазмерКонтрагентаДляЕИСУХНаСервере();
	ПериодичностьЗакупок = ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();
	ЦентрализованныеЗакупкиУправлениеФормой();
	#КонецОбласти
		
	СтараяОрганизация = Объект.Организация;
	
	БюджетДвиженияДенежныхСредствИспользуется = ПолучитьФункциональнуюОпцию("БюджетДвиженияДенежныхСредствИспользуется");
	БюджетДоходовРасходовИспользуется = ПолучитьФункциональнуюОпцию("БюджетДоходовРасходовИспользуется");
	БюджетЗакупокИспользуется = ПолучитьФункциональнуюОпцию("БюджетЗакупокИспользуется");
		
	Если Параметры.Ключ.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
        УстановитьЗначенияРеквизитовДисконтирования();
	Иначе
		// Не новый объект.
	КонецЕсли;     
	УправлениеЭлементамиДисконтирования();
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоговорыКонтрагентовФормыУХ.ПриЧтенииНаСервереВерсииСоглашения(ЭтотОбъект, ТекущийОбъект);
	ПриЧтенииСозданииНаСервере();
	СчитатьТаблицуЗалогов();
	ПрочитатьСвязанныеСОбъектомДанные(ТекущийОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриОткрытииВерсииСоглашения(ЭтотОбъект, Отказ);
	
	#Область УХ_Договоры
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПересчитатьИтоговыеКурсыВалютногоКоридора(ЭтотОбъект);
	#КонецОбласти	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ГосКонтракты" И Объект.Ссылка = Параметр Тогда 	
		Объект.ГосударственныйКонтракт = Источник;
		ПриИзмененииГосударственногоКонтрактаНаСервере();	
	ИначеЕсли ИмяСобытия = "ОбъектСогласован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиент.ОбработкаОповещенияВерсииСоглашения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.ОбработкаЗаписиНовогоВерсияСоглашения(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ФиксированнаяСуммаДоговора И Объект.Сумма = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не заполнена сумма договора.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"Объект.Сумма",,

			Отказ);
	КонецЕсли;
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ Тогда
		Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			И ВариантПлатежаГОЗ = 1 И Не ЗначениеЗаполнено(КонтрактСЗаказчиком) Тогда
			
			Текст = НСтр("ru = 'Поле ""Договор с заказчиком"" не заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"КонтрактСЗаказчиком",,


				Отказ);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ

	Если ПрименитьСтавкуДисконтированияПоРассрочке Тогда
		
		Если Объект.СтавкаДисконтирования = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена ставка дисконтирования.';
								|en = 'The discounting rate is not filled in.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				"Объект.СтавкаДисконтирования",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	ВариантПриемкиОбязателенДляЗаполнения = (ИспользоватьОрдернуюСхемуПриПоступлении
												Или ИспользоватьТоварыВПутиОтПоставщиков
												Или ИспользоватьНеотфактурованныеПоставки)
												И ИспользоватьОформлениеЗакупок;
	
	Если Не ВариантПриемкиОбязателенДляЗаполнения Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОформлениеОрдера");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемкаТоваров");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ДоговорыКонтрагентовФормыУХ.ОбработкаПроверкиЗаполненияНаСервереВерсияСоглашения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ДоговорыКонтрагентовФормыУХКлиент.ПередЗаписьюВерсииСоглашения(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	#Область ЦентрализованныеЗакупки
	Если ИспользуетсяУправлениеЗакупками 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОшибкиПользователю = ПроверкаЗаполненияТаблицыПотребностейНаКлиенте();
		Если ОшибкиПользователю <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
				ОшибкиПользователю,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	#Область ЦентрализованныеЗакупки
	Отказ = ПроверитьСтранаПроисхождения();
	Если ИспользуетсяУправлениеЗакупками Тогда
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПодготовитьЗаполнитьТаблицуИзКроссТаблицы(
			ПланПоставокПоПериодам,
			ТекущийОбъект.Номенклатура,
			ЭтаФорма.ПериодыЗакупок,
			Неопределено);
		КонецЕсли;
	#КонецОбласти
		
	ДоговорыКонтрагентовФормыУХ.ПередЗаписьюНаСервереВерсияСоглашения(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДоговорыКонтрагентовФормыУХ.ПриЗаписиНаСервереВерсияСоглашения(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	ЗаписатьТаблицуЗалогов();
	ЗаписатьСвязанныеСОбъектомДанные(ТекущийОбъект);	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоговорыКонтрагентовФормыУХ.ПослеЗаписиНаСервереВерсияСоглашения(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимРедактирования = Ложь;
	КонецЕсли;
	УстановитьКоличествоФилиалов(Элементы.ДекорацияФилиалы, Объект.Филиалы.Количество());

	ПрочитатьСвязанныеСОбъектомДанные(ТекущийОбъект);	
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	#Область УХ_ЦентрализованныеЗакупки
		УстановитьРазмерКонтрагентаДляЕИСУХНаСервере();
	#КонецОбласти	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПослеЗаписиВерсииСоглашения(ЭтотОбъект, ПараметрыЗаписи);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Результат = ДоговорыКонтрагентовФормыУХКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	Если Результат.Свойство("ОбновитьГрафикРасчетов") Тогда
		ОбновитьГрафикНаСервере();
		ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДоговораУХПриИзменении(Элемент)
	#Область ЦентрализованныеЗакупкиУХ
	ОбновитьЦУЗПоВидуДоговораУХ();
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииНомераДоговора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииДатыДоговора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если СтараяОрганизация <> Объект.Организация Тогда
		ОрганизацияПриИзмененииСервер();
		СтараяОрганизация = Объект.Организация;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКонтрагентаКлиент(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВстречныйДоговорПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВстречногоДоговора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВстречныйДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.СозданиеВстречногоДоговора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВалютыВзаиморасчетов(ЭтотОбъект, Элемент);
	Если НЕ ИспользуетсяУправлениеЗакупками ИЛИ ВалютаПриИзмененииНаСервере() Тогда
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыДоговора(ЭтотОбъект, Элемент);
	КонецЕсли;
	
	ПриИзмененииВалютыВзаиморасчетовНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяВалютаПлатежейПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОсновнойВалютыПлатежей(ЭтотОбъект, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура КурсПлатежаНеМенееПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКурсПлатежаНеМенее(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КурсПлатежаНеМенееВВалютеОплатыПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКурсПлатежаНеМенееВВалютеОплаты(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КурсПлатежаНеБолееПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКурсПлатежаНеБолее(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КурсПлатежаНеБолееВВалютеОплатыПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКурсПлатежаНеМенееВВалютеОплаты(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоговораПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыДоговора(ЭтотОбъект, Элемент);
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСуммуЗадолженностиПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКонтролироватьСуммуЗадолженности(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияПлатежейПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСпособФормированияПлатежей(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытиеШаблонаПроцесса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	СоглашениеПриИзмененииНаСервере();
	УстановитьПараметрыНДС();	
	Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПараметрыКроссТаблицыПотребностей") = Истина  Тогда
		Для Каждого Строка Из ПланПоставокПоПериодам Цикл
			ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
			Объект.ЦенаВключаетНДС,
			ЭтаФорма.ПериодыЗакупок,
			Строка);
		КонецЦикла;
		ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СоглашениеПриИзмененииНаСервере();
	УстановитьПараметрыНДС();
	Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПараметрыКроссТаблицыПотребностей") = Истина  Тогда
		Для Каждого Строка Из ПланПоставокПоПериодам Цикл
			ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
			Объект.ЦенаВключаетНДС,
			ЭтаФорма.ПериодыЗакупок,
			Строка);
		КонецЦикла;
		ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПостановкаНаУчетВалютногоКонтроляПриИзменении(Элемент)
	ТребуетсяПостановкаНаУчетВалютногоКонтроляПриИзмененииНаСервере();
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииТребуетсяПостановкаНаУчетВалютногоКонтроля(ЭтотОбъект, Элемент)
КонецПроцедуры  

&НаСервере
Процедура ТребуетсяПостановкаНаУчетВалютногоКонтроляПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьСвязиПараметровВыбораБанковскихСчетов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ФиксированныйСчетОрганизацииПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииФиксированныйСчетОрганизации(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФиксированныйСчетКонтрагентаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииФиксированныйСчетКонтрагента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ОсновнаяСтатьяДвиженияДенежныхСредствПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяСтатьяДоходовИРасходовПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ОсновнаяСтатьяДоходовИРасходовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяКомиссионногоВознагражденияПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактСоздание(Элемент, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.ГосударственныйКонтрактСоздание(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетАгентскогоНДСПокупателемПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииУчетАгентскогоНДСПокупателем(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРегистрацииСчетовФактурНаАвансПоДоговоруПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПорядокРегистрацииСчетовФактурНаАвансПоДоговору(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАгентскогоДоговораПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВидАгентскогоДоговора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредъявляетНДСПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПредъявляетНДС(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУчетаФИПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПриИзмененииПараметрыУчетаФИ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетОплатыПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииРасчетОплаты(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПредметДоговораПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПредметДоговора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйАгентПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПлатежныйАгент(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакАгентаПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПризнакАгента(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПредставленияРуководителяКонтрагента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоговорыКонтрагентовФормыУХКлиент.НачалоВыбораРуководителяКонтрагента(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораОткрытие(Элемент, СтандартнаяОбработка)
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытиеФайлДоговора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораСоздание(Элемент, СтандартнаяОбработка)
	ДоговорыКонтрагентовФормыУХКлиент.СозданиеФайлаДоговора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиОбеспечениеОбязательствОрганизацииНажатие(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПерейтиОбеспечениеОбязательствОрганизации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиОбеспечениеОбязательствКонтрагентаНажатие(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПерейтиОбеспечениеОбязательствКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыданноеОбеспечениеПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОбеспечениеОбязательствОрганизации(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПолученноеОбеспечениеПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОбеспечениеОбязательствКонтрагента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВидСоглашенияПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииВидаСоглашения(ЭтотОбъект, Элемент);
	#Область ЦентрализованныеЗакупки
	ЦентрализованныеЗакупкиУправлениеФормой();
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПодписанПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПодписан(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыОтИмениОрганизацииПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСчетаФактурыОтИмениОрганизации(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеДоговораПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСостоянияДоговора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПервойОперацииПриИзменении(Элемент)
	
	РассчитатьОтУказаннойДатыНаСервере(Объект.ДатаПервойОперации, Ложь);
	ВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияКурсаПлатежаПриИзменении(Элемент)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСпособаОпределенияКурсаПлатежа(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПроизводственныеКалендариНажатие(Элемент, СтандартнаяОбработка)
	
	ДоговорыКонтрагентовФормыУХКлиент.ИзменитьПроизводственныеКалендари(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимНалогообложенияПриИзменении(Элемент)
	
	РежимНалогообложенияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаздельногоУчетаНДСПриИзменении(Элемент)
	
	РежимРаздельногоУчетаНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	#Область УХ_Встраивание
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
КонецПроцедуры
	
&НаСервере
Функция ВалютаПриИзмененииНаСервере()
	#Область ЦентрализованныеЗакупкиУХ
	Если ИспользуетсяУправлениеЗакупками Тогда
		флВыполненПересчет = 
			ЦентрализованныеЗакупкиУХ.ТиповойОбработчикПриИзмененииВалютыДокумента(
				ЭтаФорма,
				ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
		Если флВыполненПересчет Тогда
			Возврат ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	#КонецОбласти
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВариантОформленияЗакупокДвумяДокументамиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.ВариантОформленияЗакупок = ?(ВариантОформленияРаздельнойЗакупки = "ТоварыВПути",
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.ТоварыВПути"),
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки"));
	
	ПриИзмененииНастроекПриемкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеОрдераПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаТоваровПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалаПриИзменении(Элемент)
	ПроверитьГраницуПериодаЗакупок("ПериодЗакупокНачало", "СтарыйПериодЗакупокНачало");
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончанияПриИзменении(Элемент)
	ПроверитьГраницуПериодаЗакупок("ПериодЗакупокОкончание", "СтарыйПериодЗакупокОкончание");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОформлениеДокументовРаздельнойЗакупкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.ВариантОформленияЗакупок = ?(Не ИспользоватьОформлениеДокументовРаздельнойЗакупки,
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеРазделять"),
										?(ВариантОформленияРаздельнойЗакупки = "ТоварыВПути",
											ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.ТоварыВПути"),
											ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки")));
	
	ПриИзмененииНастроекПриемкиСервер();
	
	Элементы.ВариантОформленияРаздельнойЗакупки.Доступность = ИспользоватьОформлениеДокументовРаздельнойЗакупки
																И Объект.ВидДоговораУХ <> ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Импорт");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимИспользованияГрафикаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФилиалыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Филиалы", Объект.Филиалы);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОбработкаСохраненияСпискаФилиалов = Новый ОписаниеОповещения("ЗавершениеРедактированияСпискаФилиалов", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаФилиалов", ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор,,, ОбработкаСохраненияСпискаФилиалов, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияСпискаФилиалов(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.Филиалы.Очистить();
		Для каждого Стр Из Результат Цикл
			НоваяСтрокаЗаполненияДвижений = Объект.Филиалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаполненияДвижений, Стр);
		КонецЦикла;
		УстановитьКоличествоФилиалов(Элементы.ДекорацияФилиалы, Объект.Филиалы.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрализованныйДоговорПриИзменении(Элемент)
	
	Элементы.ДекорацияФилиалы.Доступность = Объект.ЦентрализованныйДоговор;
	Элементы.РазрешаетсяПередачаОплатМеждуФилиалами.Видимость = Объект.ЦентрализованныйДоговор;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПоставщиком(Объект.ВидДоговораУХ) Тогда
		ДополнительныеОтборы = Новый Структура;
		ДополнительныеОтборы.Вставить("ИспользуютсяДоговорыКонтрагентов", Истина);
		ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		ДополнительныеОтборы);
			
	ИначеЕсли РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПокупателем(Объект.ВидДоговораУХ) Тогда
		ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
		ПараметрыВыбораСоглашения.Элемент                     = Элемент;
		ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
		ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
		ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
		ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СдвигДатыФиксацииКурсаПлатежаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура КурсПлатежаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КратностьПлатежаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);		
КонецПроцедуры

&НаКлиенте
Процедура ДатаФиксацииКурсаПлатежаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикРасчетов

&НаКлиенте
Процедура ГрафикРасчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ДоговорыКонтрагентовФормыУХКлиент.ПередНачаломДобавленияСтрокиГрафикаРасчетов(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПередНачаломИзменения(Элемент, Отказ)
	ДоговорыКонтрагентовФормыУХКлиент.ПередНачаломИзмененияСтрокиГрафикаРасчетов(ЭтотОбъект, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПередУдалением(Элемент, Отказ)
	ДоговорыКонтрагентовФормыУХКлиент.ПередНачаломУдаленияСтрокиГрафикаРасчетов(ЭтотОбъект, Элемент, Отказ);
	ОбновитьГрафикНаСервере();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПриАктивизацииЯчейки(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриАктивизацииЯчейкиГрафикаРасчетов(ЭтотОбъект, Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовПослеУдаления(Элемент)
	ОбновитьСуммуДоговораИзГрафиков(ЭтаФорма);
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикРасчетовЛинейный

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПередНачаломИзменения(Элемент, Отказ)
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПередУдалением(Элемент, Отказ)	
	ДоговорыКонтрагентовФормыУХКлиент.ПередУдалениемСтрокиГрафика(ЭтотОбъект, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПослеУдаления(Элемент)
	ОбновитьГрафикНаСервере();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПриАктивизацииСтроки(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриАктивизацииСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ДоговорыКонтрагентовФормыУХКлиент.ПриНачалеРедактированияСтрокиГрафика(ЭтотОбъект, НоваяСтрока, Копирование, ИсходнаяДатаСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРасчетовЛинейныйПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПодключитьОбработчикОжидания("ПриОкончанииРедактированияДетализацииГрафика", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйДатаПриИзменении(Элемент)	
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииДатыСтрокиГрафика(ЭтотОбъект, Элемент, ИсходнаяДатаСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйОперацияГрафикаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииОперацииСтрокиГрафика(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйСуммаКорректировкаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыКорректировкиСтрокиГрафика(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрафикРасчетовЛинейныйСуммаПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыСтрокиГрафика(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияДетализацииГрафика()
	ОбновитьГрафикНаСервере();
	ВыполнитьКонтрольДокумента();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКонсольПроцесса(Команда)
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьКонсольПроцесса(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияРуководительКонтрагента(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияРуководительКонтрагента(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияДолжностьРуководителяКонтрагента(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияДолжностьРуководителяКонтрагента(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияРуководитель(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияРуководитель(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияДолжностьРуководителя(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.ПоказатьСклоненияДолжностьРуководителя(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОтДатыНачалаДействия(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать дату начала действия договора'"),Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	РассчитатьОтУказаннойДатыНаСервере(Объект.ДатаНачалаДействия, Ложь);
	ВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОтДатыПервогоПлатежа(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПервойОперации) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьОтУказаннойДатыНаСервере(Объект.ДатаПервойОперации, Ложь);
	ВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВерсию(Команда)
	
	РежимРедактирования = НЕ РежимРедактирования;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
	#Область ЦентрализованныеЗакупки
	ЦентрализованныеЗакупкиУправлениеФормой();
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФактическиеДанные(Команда)
	ОбновитьФактическиеДанныеНаСервере();
	ВыполнитьКонтрольДокумента();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПретензию(Команда)
	ПоказатьЗначение(,Объект.Претензия);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявки(Команда)
	
	СформироватьЗаявкиНаСервере(Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(Объект, НСтр("ru = 'Введите УИД'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбменСЕИС(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОткрытьОбменСЕИСДляДоговора(Объект.ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Документооборот(Команда)
	
	ПараметрыФормы = Новый Структура("ВнешнийОбъект", Объект.ДоговорКонтрагента);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот.Форма.Документооборот",
		ПараметрыФормы,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, ДоговорОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
   УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, ДоговорОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
			Объект.ПериодЗакупокНачало		 = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(РезультатВыбора.ДатаНачала, ПериодичностьЗакупок);
			Объект.ПериодЗакупокОкончание	 = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(РезультатВыбора.ДатаОкончания, ПериодичностьЗакупок);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода: %Период%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		ПроверитьГраницуПериодаЗакупок("ПериодЗакупокНачало", "СтарыйПериодЗакупокНачало");
		ПроверитьГраницуПериодаЗакупок("ПериодЗакупокОкончание", "СтарыйПериодЗакупокОкончание");
	Иначе
		ТекстСообщения = НСтр("ru = 'Значение периода не выбрано'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ИзменитьПериодЗавершение()

&НаКлиенте
Процедура ВыборПериодаЗакупок(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	// Получение даты начала по умолчанию.
	НовыйПериодНачало = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ПериодЗакупокНачало, "ДатаНачала");
	Если ТипЗнч(НовыйПериодНачало) = Тип("Дата") Тогда
		Диалог.Период.ДатаНачала = НовыйПериодНачало;
	Иначе
		Диалог.Период.ДатаНачала = НачалоГода(ТекущаяДата());
	КонецЕсли;
	// Получение даты окончания по умолчанию.
	НовыйПериодОкончания = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ПериодЗакупокОкончание, "ДатаОкончания");
	Если ТипЗнч(НовыйПериодОкончания) = Тип("Дата") Тогда
		Диалог.Период.ДатаОкончания = НовыйПериодОкончания
	Иначе
		Диалог.Период.ДатаОкончания = КонецГода(ТекущаяДата());
	КонецЕсли;
	// Отображение диалога.
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьФактическиеДанныеНаСервере()
	
	СтруктураДействий = Новый Структура("ЗагружатьФакт");
	ОбновитьГрафикНаСервере(СтруктураДействий);
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ДоговорыКонтрагентовФормыУХ.ДобавитьЭлементыУсловногоОформленияГрафикРасчетов(ЭтотОбъект);
	
	Если ИспользуетсяУправлениеЗакупками Тогда
		УстановитьУсловноеОформлениеКроссТаблицы(
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	КонецЕсли;

	УстановитьПараметрыНДС();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("ДоговорОбъект"));

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГосударственногоКонтрактаНаСервере()
	
	ДоговорыКонтрагентовФормыЕХ.ГосударственныйКонтрактПриИзмененииСервер(ЭтотОбъект);
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииГосударственногоКонтактаСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	УстановитьФункциональныеОпцииФормы();	
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииОрганизацииСервер(ЭтотОбъект);
	
	ЗаполнитьНалогообложениеИВидДеятельности();
	ГоловнаяОрганизация = Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ГоловнаяОрганизация");
	Объект.Филиалы.Очистить();
	УстановитьВидимостьЦентрализованногоДоговора();
	УстановитьЗначенияРеквизитовДисконтирования();
	УправлениеЭлементамиДисконтирования();
	НалогообложениеНДСПриИзмененииСервер();

	#Область ЦентрализованныеЗакупки
	ОбновитьЦУЗПоОрганизации();
	#КонецОбласти
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	#Область УХ_ЦентрализованныеЗакупки
		УстановитьРазмерКонтрагентаДляЕИСУХНаСервере();
	#КонецОбласти
	
	РаботаСДоговорамиКонтрагентовУХ.УстановитьЛимитЗадолженностиПоДоговору(Объект);
	
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииКонтрагентаСервер(ЭтотОбъект);
	
	ОплатаВВалюте = (Объект.ОсновнаяВалютаПлатежей <> ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация));
	КонтрагентПриИзмененииСервер(Объект.Контрагент, ОплатаВВалюте, Объект.БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо, Объект.Организация);
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		
		ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда 
		Объект.УстановленСрокОплаты = Истина;
		Объект.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ЦенаВключаетНДС");
		Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПараметрыКроссТаблицыПотребностей") = Истина  
		И ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Свойство("Изменяемый") 
		И ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Свойство("Объект")
		И ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.Свойство("ЦенаВключаетНДС")
		Тогда
			Этаформа.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		КонецЕсли;	
		Объект.СрокОплаты = РасчетГрафиковОперацийЕХ.ПолучитьМаксимальныйСрокОплатыПоСоглашению(Объект.Соглашение);
		ЕстьАванс = РасчетГрафиковОперацийЕХ.ПолучитьПроцентАвансаПоСоглашению(Объект.Соглашение) > 0;
	Иначе
		ЕстьАванс = Ложь;
	КонецЕсли;

	//Сравнение условий оплаты с рекомендуемым
	Если ЗначениеЗаполнено(РекомендуемоеУсловиеОплаты) Тогда
		РольКонтрагента = УправлениеОбязательствамиУХ.ПолучитьРольКонтрагентаПоВидуДоговора(Объект.ВидДоговораУХ);
		ПараметрыРекомендуемогоУсловия = Новый Структура("ПроцентАванса,СрокОтсрочки", РекомендуемыйПроцентАванса, РекомендуемыйСрокОтсрочки);
		СравнениеРекомендуемоеУсловиеОплаты = УправлениеОбязательствамиУХ.СравнитьУсловияОплаты(Объект.Соглашение, ПараметрыРекомендуемогоУсловия, РольКонтрагента);
		Элементы.ДекорацияПредупреждениеУсловиеОплаты.Подсказка = СравнениеРекомендуемоеУсловиеОплаты;
	Иначе
		Элементы.ДекорацияПредупреждениеУсловиеОплаты.Подсказка = "";
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОсновнаяСтатьяДвиженияДенежныхСредствПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииСтатьиДвиженияДенежныхСредствСервер(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОсновнаяСтатьяДоходовИРасходовПриИзмененииНаСервере()
	ДоговорыКонтрагентовФормыУХ.ПриИзмененииСтатьиИсполненияСервер(ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаявкиНаСервере(ДоговорКонтрагента)
	
	ДвиженияБюджетированиеУХ.СформироватьЗаявкиПоПериодическимОперациям(ДоговорКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ЭтоПлательщикНДС                            = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ТекущаяДатаСеанса());

КонецПроцедуры

&НаСервере
Процедура РассчитатьОтУказаннойДатыНаСервере(ДатаРасчетов, ОтДатыНачисления)
	
	ПараметрыРасчета = Документы.ВерсияСоглашенияКоммерческийДоговор.НовыйПараметрыРасчетаГрафика();
	ПараметрыРасчета.РежимРасчета = "ВесьГрафикОтДатыПервойОперации";
	ПараметрыРасчета.ДатаОтсчета = ДатаРасчетов;
	
	Документы.ВерсияСоглашенияКоммерческийДоговор.ВыполнитьРасчетГрафика(Объект,
																		"ОсновнойДолг",
																		ОписаниеГрафика,
																		ОперацииГрафика,
																		ПараметрыРасчета);
																		
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(ЭтотОбъект);
	ОбновитьГрафикНаСервере();
	
КонецПроцедуры // РассчитатьОтУказаннойДатыНаСервере()

&НаСервере
Процедура РежимНалогообложенияПриИзмененииСервер()
	
	Объект.НалогообложениеНДСОпределяетсяВДокументе = ?(РежимНалогообложения = 1, Истина, Ложь);
	ЗаполнитьНалогообложениеИВидДеятельности();
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	
	Объект.НалогообложениеНДСОпределяетсяВДокументе = ?(РежимНалогообложения = 1, Истина, Ложь);
	ЗаполнитьНалогообложениеИВидДеятельности();
	
	ДоговорыКонтрагентовФормыЕХ.НалогообложениеНДСПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РежимРаздельногоУчетаНДСПриИзмененииСервер()

	Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе = ?(РежимРаздельногоУчетаНДС = 1, Истина, Ложь);
	
	ЗаполнитьНалогообложениеИВидДеятельности();
	
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();

КонецПроцедуры

&НаКлиенте
Процедура ФиксированнаяСуммаДоговораПриИзменении(Элемент)
	
	Если Не ФиксированнаяСуммаДоговора Тогда
		ГрафикИсполненияВДоговоре = 0;
		Объект.Сумма = 0;
		ОбновитьСуммуДоговораИзГрафиков(ЭтаФорма);
		ВыполнитьКонтрольДокумента();
		Объект.КонтролироватьПревышениеСуммы = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаСервере
Процедура ВариантПлатежаГОЗПриИзмененииНаСервере()
	
	ДоговорыКонтрагентовФормыЕХ.ВариантПлатежаГОЗПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьНомерДатаСумма(ДанныеСтроки, Объект)
	Если Не ДанныеСтроки = Неопределено Тогда
		Если ДанныеСтроки.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыПодтверждающихДокументов.Контракт") Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект, "Номер, Дата, Сумма");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантОформленияЗакупок()
	
	Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять Тогда
		ИспользоватьОформлениеДокументовРаздельнойЗакупки = Ложь;
		
		// Неактивное значение по-умолчанию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков") Тогда
			ВариантОформленияРаздельнойЗакупки = "ТоварыВПути";
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки") Тогда
			ВариантОформленияРаздельнойЗакупки = "НеотфактурованныеПоставки";
		КонецЕсли;
		
	Иначе
		ИспользоватьОформлениеДокументовРаздельнойЗакупки = Истина;
		
		Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути Тогда
			ВариантОформленияРаздельнойЗакупки = "ТоварыВПути";
		ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки Тогда
			ВариантОформленияРаздельнойЗакупки = "НеотфактурованныеПоставки";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантПлатежаГОЗ()
	
	Если Объект.ПлатежиПо275ФЗ И Объект.ДоговорСУчастникомГОЗ Тогда
		ВариантПлатежаГОЗ = 1;
	ИначеЕсли Объект.ОплатаРасходовПоТарифамСГосрегулированием Тогда
		ВариантПлатежаГОЗ = 2;
	Иначе
		ВариантПлатежаГОЗ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВариантовОформленияЗакупок()
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	ДоговорДоступенДляЗакупокДвухходовки = Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком
									Или Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС
									Или Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Импорт;
	
	ДоступноОформлениеРаздельнойЗакупки					 		= ИспользоватьТоварыВПутиОтПоставщиков
																	Или ИспользоватьНеотфактурованныеПоставки;
																	
	ИспользоватьВариантыОформленияРаздельнойЗакупки				= ИспользоватьТоварыВПутиОтПоставщиков
																	И ИспользоватьНеотфактурованныеПоставки;
	Элементы.ГруппаОформлениеДокументовРаздельнойЗакупки.Видимость = ДоговорДоступенДляЗакупокДвухходовки
																		И ДоступноОформлениеРаздельнойЗакупки;
																		
	Элементы.ГруппаВариантОформленияРаздельнойЗакупки.Видимость		= ИспользоватьВариантыОформленияРаздельнойЗакупки;
	
	Элементы.ВариантОформленияРаздельнойЗакупки.Доступность			= ИспользоватьОформлениеДокументовРаздельнойЗакупки
																		И Объект.ВидДоговораУХ <> Справочники.ВидыДоговоровКонтрагентовУХ.Импорт;	
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	Элементы.ГруппаВариантыПриемки.Видимость = ИспользоватьОформлениеЗакупок
												И (ИспользоватьОрдернуюСхемуПриПоступлении
													Или ДоступноОформлениеРаздельнойЗакупки);	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПорядокСписанияПринятыхТоваров(Форма)
	
	Форма.Элементы.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров.Видимость = ?(
		Форма.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем"), Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИностранныеВалюты(Организация)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВыбораБанковскихСчетов(ПорядокОплаты)

	МассивПараметров = Новый Массив;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыборСчетовГоловнойОрганизации", Неопределено));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Закрыт", Ложь));
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервере
Процедура НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств()
	
	ТипыДоговоровПокупатель = Новый Массив;
	ТипыДоговоровПокупатель.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем);
	ТипыДоговоровПокупатель.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СКомиссионером);
	ТипыДоговоровПокупатель.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СДавальцем);
	ТипыДоговоровПокупатель.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СХранителем);
	
	ТипыДоговоровПоставщик = Новый Массив;
	ТипыДоговоровПоставщик.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком);
	ТипыДоговоровПоставщик.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СКомитентом);
	ТипыДоговоровПоставщик.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПереработчиком);
	ТипыДоговоровПоставщик.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.Импорт);
	ТипыДоговоровПоставщик.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС);
	ТипыДоговоровПоставщик.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоклажедателем);

	МассивПараметровВыбора = Новый Массив;
	
	Если ТипыДоговоровПокупатель.Найти(Объект.ВидДоговораУХ) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	ИначеЕсли ТипыДоговоровПоставщик.Найти(Объект.ВидДоговораУХ) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.СтатьяДвиженияДенежныхСредств.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораПорядкаРасчетов()
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам, НСтр("ru = 'По отчетам по комиссии';
																			|en = 'By commission reports'"));
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам 
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	ИначеЕсли (ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам,
									НСтр("ru='По документам выкупа и списания товаров с хранения'"));
		Иначе
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам,
									НСтр("ru='По документам выкупа товаров хранителем'"));
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
		КонецЕсли;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		Если Константы.ВариантОбособленияТоваровВПродажах.Получить() = Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам);
		КонецЕсли;	
	Иначе
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКонтроляЗадолженности(Форма)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивИменЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивИменЭлементов.Добавить("НадписьВалютаВзаиморасчетов");
	МассивИменЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	МассивИменЭлементов.Добавить("ГруппаКонтрольЗадолженности");
	ПризнакВидимости = Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту")
		ИЛИ Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")
		ИЛИ Истина;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивИменЭлементов,
		"Видимость",
		ПризнакВидимости);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС()
	
	Элементы.ВидАгентскогоДоговора.Видимость = Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком;
	
	
	Элементы.НалогообложениеНДС.Доступность     = НЕ Объект.НалогообложениеНДСОпределяетсяВДокументе;
	Элементы.ЗакупкаПодДеятельность.Доступность = НЕ Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе;
	Элементы.ВидАгентскогоДоговора.Доступность = (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС);
	Элементы.СтавкаНДС.Доступность = Объект.НалогообложениеНДСОпределяетсяВДокументе ИЛИ (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
	Элементы.ГруппаРаздельныйУчетНДС.Видимость = 
		(Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком
		ИЛИ Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС
		ИЛИ Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Импорт
		ИЛИ Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПереработчиком
		ИЛИ Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоклажедателем);
		
	Элементы.ГруппаНалогообложениеНДС.Видимость = 
		НЕ (Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Импорт
			ИЛИ Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС
			ИЛИ Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПереработчиком);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиГрафикИсполнения()
	
	ТипыДоговоров = Новый Массив;
	ТипыДоговоров.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем);
	ТипыДоговоров.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СДавальцем);
	ТипыДоговоров.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком);
	ТипыДоговоров.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПереработчиком);
	ТипыДоговоров.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.Импорт);
	ТипыДоговоров.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС);
	
	ВидимостьГрафика = (ТипыДоговоров.Найти(Объект.ВидДоговораУХ) <> Неопределено)
		И (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		
	Элементы.ГруппаСуммаДоговора.ТолькоПросмотр = НЕ (РежимРедактирования И ФиксированнаяСуммаДоговора);

КонецПроцедуры

&НаСервере
Функция ДоступныеСпособыДоставки(ЭтоДоговорРаспоряжениеНаПриемку)
	
	ВозвращаемыйМассив = Новый Массив();
	
	Если Не ЭтоДоговорРаспоряжениеНаПриемку Тогда
		ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении);
	КонецЕсли;
	
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьДоставки()
	
	ЭтоДоговорРаспоряжениеНаПриемку = Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(Объект.ВариантПриемкиТоваров);
	
	ДоступныеСпособыДоставки = ДоступныеСпособыДоставки(ЭтоДоговорРаспоряжениеНаПриемку);
	
	Элементы.СпособДоставки.СписокВыбора.ЗагрузитьЗначения(ДоступныеСпособыДоставки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		ПредставлениеТипа = НСтр("ru='Договор с покупателем / заказчиком'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		ПредставлениеТипа = НСтр("ru='Договор с комиссионером'");
	ИначеЕсли ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ПредставлениеТипа = НСтр("ru='Договор с поставщиком / исполнителем'");
	ИначеЕсли ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ПредставлениеТипа = НСтр("ru='Договор с поставщиком'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ПредставлениеТипа = НСтр("ru='Договор с комитентом'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика Тогда
		ПредставлениеТипа = НСтр("ru='Договор с переработчиком'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		ПредставлениеТипа = НСтр("ru='Договор с давальцем'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
		ПредставлениеТипа = НСтр("ru='Договор с поклажедателем'");
	Иначе
		ПредставлениеТипа = НСтр("ru='Договор с контрагентом'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ПредставлениеТипа + " " + НСтр("ru='(создание)'"); ;
	Иначе
		ЭтаФорма.Заголовок = Объект.ДоговорКонтрагента.Наименование + " (" + ПредставлениеТипа + ")";
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "Партнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаСчетКонтрагентаВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "БанковскийСчетКонтрагента", Объект.ХозяйственнаяОперация);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтчетовГОЗ()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Функция КоличествоДопСоглашений()
	Отбор = Новый Структура("ВидДокумента", Справочники.ВидыПодтверждающихДокументов.ДополнительноеСоглашение);
	НайденныеСтроки = Объект.ПодтверждающиеДокументы.НайтиСтроки(Отбор);
	
	Возврат НайденныеСтроки.Количество();
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаправленияДеятельности()
	
	
	Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ВидДоговораУХ) Тогда
		
		Если НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетДоход(Объект.ХозяйственнаяОперация) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			
			Видимость = Истина;
			
			
		ИначеЕсли НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетАктив(Объект.ХозяйственнаяОперация)
			 И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			 
			Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НаправлениеДеятельности.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Ложь);
	
	ТипДоговора = УправлениеДоговорамиУХВызовСервераПовтИсп.ВидДоговораБП(Объект.ВидДоговораУХ);
	
	ПоддержкаПлатежей275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	
	ГоловнаяОрганизация = Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ГоловнаяОрганизация");
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо");
	КлассификацияЗадолженности = ?(Объект.УстановленСрокОплаты И Объект.СрокОплаты > 365, 1, 0);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	ИспользоватьТоварыВПутиОтПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки   = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	НоваяАрхитектураВзаиморасчетов          = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ИспользоватьНесколькоОрганизаций        = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	
	ФиксированнаяСуммаДоговора = (Объект.Сумма <> 0);

	ПрименитьСтавкуДисконтированияПоРассрочке = (Объект.СтавкаДисконтирования <> 0);
	
	ИнициализироватьВариантОформленияЗакупок();
	Если Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
		РежимНалогообложения = 1;
	Иначе
		РежимНалогообложения = 0;
	КонецЕсли;
	
	Если Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе Тогда
		РежимРаздельногоУчетаНДС = 1;
	Иначе
		РежимРаздельногоУчетаНДС = 0;
	КонецЕсли;

	ЗакупкиСервер.ЗаполнитьНастройкиВариантовПриемки(Объект.ВариантПриемкиТоваров, ОформлениеПоступления, ПриемкаТоваров);
	ЗакупкиСервер.ЗаполнитьСписокВыбораВариантовПриемкиПоДоговорам(Элементы.ОформлениеПоступления,
																	Элементы.ПриемкаТоваров,
																	Объект.ВариантОформленияЗакупок);
																	
	ДоговорыКонтрагентовФормыЕХ.ЗаполнитьПараметрыВыбораПартнера(ЭтотОбъект);
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	НастроитьСписокВыбораПорядкаРасчетов();
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьВидимостьЦентрализованногоДоговора();
	
	//++ НЕ УТ
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Элементы.ГруппаЗаполнениеРаздела7.Видимость = (Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем);
	//-- НЕ УТ
	
	УстановитьВидимостьНаправленияДеятельности();
	УстановитьВидимостьВариантовОформленияЗакупок();
	УстановитьВидимостьПорядокСписанияПринятыхТоваров(ЭтаФорма);
	
	ОбновитьЗаголовокФормы();

	Если ТолькоПросмотр Тогда
		Элементы.ФиксированнаяСуммаДоговора.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ОформлениеПоступления.Доступность = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	Элементы.ПриемкаТоваров.Доступность   = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	УстановитьДоступностьДоставки();
	
	ЗаполнитьНалогообложениеИВидДеятельности(Ложь);
	
	Если Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоклажедателем
		И Не ЗначениеЗаполнено(Объект.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров) Тогда
		
		Объект.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров =
			Перечисления.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров.ОформлятьВыкупПринятыхНаХранениеТоваров;
		
	КонецЕсли;
	
	ВыполнятьКонтрольСуммыРасходаПоДоговору = ПланыВидовХарактеристик.ВидыКонтроляДокументов.ВидКонтроляИспользуется(
											ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольРасходовПоДоговору);
	
	#Область УХ_Встраивание
	// Считывание залогов.
	СчитатьТаблицуЗалогов();
	УстановитьОграничениеТипаСоглашение(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ЕстьАванс = РасчетГрафиковОперацийЕХ.ПолучитьПроцентАвансаПоСоглашению(Объект.Соглашение) > 0;
	Иначе
		ЕстьАванс = Ложь;
	КонецЕсли;
	ПлатежиПо275ФЗ = Истина;
	АдресПодтверждающихДокументовВоВременномХранилище = ПоместитьВоВременноеХранилище(
	Объект.ПодтверждающиеДокументы.Выгрузить(),
	УникальныйИдентификатор);
	#КонецОбласти
КонецПроцедуры

#Область УХ_Встраивание

// Возвращает таблицу залогов по договору ДоговорВход.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуЗалогов(ДоговорВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Если ЗначениеЗаполнено(ДоговорВход) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбъектыПоДоговоруЗалога.Период КАК Период,
		|	ОбъектыПоДоговоруЗалога.ОбъектЗалога КАК ОбъектЗалога,
		|	ОбъектыПоДоговоруЗалога.ДоговорЗалога КАК ДоговорЗалога,
		|	ОбъектыПоДоговоруЗалога.ДатаОкончания КАК ДатаОкончания,
		|	ОбъектыПоДоговоруЗалога.ЗалоговаяСтоимость КАК ЗалоговаяСтоимость,
		|	ОбъектыПоДоговоруЗалога.Количество КАК Количество,
		|	ОбъектыПоДоговоруЗалога.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ОбъектыПоДоговоруЗалога КАК ОбъектыПоДоговоруЗалога
		|ГДЕ
		|	ОбъектыПоДоговоруЗалога.ДоговорЗалога = &ДоговорЗалога
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	ДатаОкончания";
		Запрос.УстановитьПараметр("ДоговорЗалога", ДоговорВход);
		РезультатЗапроса = Запрос.Выполнить();
		РезультатФункции = РезультатЗапроса.Выгрузить();
	Иначе
		РезультатФункции = Новый ТаблицаЗначений;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьТаблицуЗалогов()

// Считывает таблицу объектов залогов на форму.
&НаСервере
Процедура СчитатьТаблицуЗалогов()
	ТаблицаОбъектыЗалога.Очистить();
	ТаблицаЗалога = ПолучитьТаблицуЗалогов(Объект.Ссылка.ДоговорКонтрагента);
	Для Каждого ТекТаблицаЗалога Из ТаблицаЗалога Цикл
		НоваяСтрока = ТаблицаОбъектыЗалога.Добавить();
		НоваяСтрока.Период				 = ТекТаблицаЗалога.Период;
		НоваяСтрока.ОбъектЗалога		 = ТекТаблицаЗалога.ОбъектЗалога;
		НоваяСтрока.ДоговорЗалога		 = ТекТаблицаЗалога.ДоговорЗалога;
		НоваяСтрока.ДатаОкончания		 = ТекТаблицаЗалога.ДатаОкончания;
		НоваяСтрока.ЗалоговаяСтоимость	 = ТекТаблицаЗалога.ЗалоговаяСтоимость;
		НоваяСтрока.Количество			 = ТекТаблицаЗалога.Количество;
		НоваяСтрока.Комментарий			 = ТекТаблицаЗалога.Комментарий;
	КонецЦикла;	
КонецПроцедуры		// СчитатьТаблицуЗалогов()

// Записывает в регистр данные таблицы ОбъектыЗалога.
&НаСервере
Процедура ЗаписатьТаблицуЗалогов()
	НаборЗаписей = РегистрыСведений.ОбъектыПоДоговоруЗалога.СоздатьНаборЗаписей();
	ТекДоговор = Объект.Ссылка.ДоговорКонтрагента;
	НаборЗаписей.Отбор.ДоговорЗалога.Установить(ТекДоговор); 
	Для Каждого ТекТаблицаОбъектыЗалога Из ТаблицаОбъектыЗалога Цикл
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.Период				 = ТекТаблицаОбъектыЗалога.Период;
		НоваяЗапись.ДоговорЗалога		 = ТекДоговор;
		НоваяЗапись.ОбъектЗалога		 = ТекТаблицаОбъектыЗалога.ОбъектЗалога;
		НоваяЗапись.ДатаОкончания		 = ТекТаблицаОбъектыЗалога.ДатаОкончания;
		НоваяЗапись.ЗалоговаяСтоимость	 = ТекТаблицаОбъектыЗалога.ЗалоговаяСтоимость;
		НоваяЗапись.Количество			 = ТекТаблицаОбъектыЗалога.Количество;
		НоваяЗапись.Комментарий			 = ТекТаблицаОбъектыЗалога.Комментарий;
	КонецЦикла; 
	НаборЗаписей.Записать(); 
КонецПроцедуры		// ЗаписатьТаблицуЗалогов()

&НаСервере
Функция ИспользоватьОформлениеЗакупок()
	
	ИспользоватьОформлениеЗакупок = Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком
										Или Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС
										Или Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Импорт
										Или Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоклажедателем;
	Возврат ИспользоватьОформлениеЗакупок;	

КонецФункции

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо, Организация)
	
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, Организация);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика()
	
	Если Объект.СпособФормированияПлатежей = Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей Тогда
		ДоговорыКонтрагентовФормыУХ.ПриИзмененииЗначенияПоУмолчаниюАналитикиГрафика(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПрименитьСтавкуДисконтированияПоРассрочкеПриИзменении(Элемент)
	
	Если Не ПрименитьСтавкуДисконтированияПоРассрочке Тогда
		Объект.СтавкаДисконтирования = 0;
		Объект.СрокДляПримененияДисконтирования = 0;
	Иначе
		УстановитьЗначенияРеквизитовДисконтирования();
		Если Объект.СтавкаДисконтирования = 0 И Не ПрименитьСтавкуДисконтированияПоРассрочке Тогда
			// Если нет значений по умолчанию, тогда значение ставки = 0
			// Установим флаг принудительно
			ПрименитьСтавкуДисконтированияПоРассрочке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиДисконтирования(Истина);
	
КонецПроцедуры


&НаСервере
Процедура УправлениеЭлементамиДисконтирования(ВыключеноДисконтирование=Ложь)
	
	ВидимостьРеквизитовДисконтирования = Ложь;
	Если Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		НастройкиУчетнойПолитикиФинУчета = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Объект.Организация);
		ВидимостьРеквизитовДисконтирования = НастройкиУчетнойПолитикиФинУчета.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам;
		ВидимостьРеквизитовДисконтирования = ВидимостьРеквизитовДисконтирования И ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
		Если Не ВидимостьРеквизитовДисконтирования Тогда
			Если Объект.СтавкаДисконтирования > 0 Тогда
				ВидимостьРеквизитовДисконтирования = Истина;
				Элементы.ГруппаОтключеноДисконтирование.Видимость = Истина;
			ИначеЕсли ВыключеноДисконтирование Тогда
				ВидимостьРеквизитовДисконтирования = Истина;
				Элементы.ГруппаОтключеноДисконтирование.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Элементы.ГруппаДисконтирование.Видимость = ВидимостьРеквизитовДисконтирования;
	Элементы.ГруппаСрокДисконтирования.Видимость = ВидимостьРеквизитовДисконтирования;
	
	Элементы.СтавкаДисконтирования.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке;
	Элементы.СтавкаДисконтирования.АвтоОтметкаНезаполненного = ПрименитьСтавкуДисконтированияПоРассрочке;
	Элементы.СрокДляПримененияДисконтирования.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке;
	Элементы.ДекорацияДней.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке; 
	Элементы.ДекорацияПроцент.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияРеквизитовДисконтирования()
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		НастройкиУчетнойПолитикиФинУчета = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Объект.Организация);
		Объект.СтавкаДисконтирования = РегистрыСведений.СтавкиДисконтирования.ПолучитьСтавкуДисконтированияПоУмолчанию(НастройкиУчетнойПолитикиФинУчета.Период, НастройкиУчетнойПолитикиФинУчета.Организация, Объект.ВалютаВзаиморасчетов);
		ПрименитьСтавкуДисконтированияПоРассрочке = Объект.СтавкаДисконтирования <> 0;
		Объект.СрокДляПримененияДисконтирования = НастройкиУчетнойПолитикиФинУчета.СрокДляПримененияДисконтирования;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ДоговорОбъект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ДоговорОбъект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ДоговорОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
 
#Область ЦентрализованныеЗакупки


&НаСервере
Процедура ОбновитьИспользуетсяУправлениеЗакупками()
	ИспользуетсяУправлениеЗакупками =
		ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
		И ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоДопустимыйВидДоговораУХ(
													Объект.ВидДоговораУХ);
КонецПроцедуры
	
&НаСервере
Процедура ИнициализироватьЦентрализованныеЗакупки()
	
	ОбновитьИспользуетсяУправлениеЗакупками();
	Если ИспользуетсяУправлениеЗакупками Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПериодЗакупокНачало)
				И НЕ ЗначениеЗаполнено(Объект.ПериодЗакупокОкончание) Тогда
			ЦентрализованныеЗакупкиКлиентСерверУХ.ПроверитьЗаполнитьГраницыПериодаКроссТаблицы(
				Объект.ПериодЗакупокНачало,
				Объект.ПериодЗакупокОкончание,
				Объект.Номенклатура,
				"ПериодПотребности");
		КонецЕсли;
		ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
			ЭтаФорма,
			"ПараметрыКроссТаблицыПотребностей",
			ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
				"ПериодыЗакупок", 
				"ПланПоставокПоПериодам",
				"ПланПоставокПоПериодам",
				ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейВерсииСоглашенияКоммерческийДоговор()));
		УстановитьПредложениеПоставщикаПобедителяПоЛоту();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
			ЭтаФорма,
			"ПараметрыКроссТаблицыПотребностей",
			ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
				"ПериодыЗакупок", 
				"ПланПоставокПоПериодам",
				"ПланПоставокПоПериодам",
				ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейВерсииСоглашенияКоммерческийДоговор()));
		КонецЕсли;
		СтарыйПериодЗакупокНачало = Объект.ПериодЗакупокНачало;
		СтарыйПериодЗакупокОкончание = Объект.ПериодЗакупокОкончание;
		Элементы.Переместить(Элементы.ПланПоставокПоПериодамКолонкаРазделитель, Элементы.ПланПоставокПоПериодам); 
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦУЗПоОрганизации()
	Если ИспользуетсяУправлениеЗакупками Тогда
		ОбновитьРеквизитыФормыЗакупокПоОрганизации();
	КонецЕсли;
	ЦентрализованныеЗакупкиУправлениеФормой();
КонецПроцедуры

// Определяет, нужно ли отображать элементы ЦУЗ.
&НаСервереБезКонтекста
Функция ПоказатьЦУЗ(ВидДоговораВход, ВидСоглашенияВход, ИспользуетсяУправлениеЗакупкамиВход)
	РезультатФункции = Ложь;
	флЭтоСПоставщиком = 
		ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоДопустимыйВидДоговораУХ(ВидДоговораВход);
	флЭтоРамочноеСоглашение = (ВидСоглашенияВход = Перечисления.ВидыСоглашений.РамочныйДоговор);
	РезультатФункции = ИспользуетсяУправлениеЗакупкамиВход
		И флЭтоСПоставщиком 
		И НЕ флЭтоРамочноеСоглашение;
	Возврат РезультатФункции;
КонецФункции		 // ПоказатьЦУЗ()

&НаСервере
Функция ПроверитьСтранаПроисхождения()
	Отказ = Ложь;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки") Тогда
		Для Каждого СтрокаУсловия Из ПланПоставокПоПериодам Цикл 
			Если Не ЗНачениеЗаполнено(СтрокаУсловия.СтранаПроизводителя)  Тогда
				ТекстСообщения = НСтр("ru='Не заполнена страна производителя номенклатуры: '");
				ТекстСообщения = ТекстСообщения + Строка(СтрокаУсловия.Номенклатура) + ",";		
				ТекстСообщения = Лев(ТекстСообщения,СтрДлина(ТекстСообщения)-1);
				КлючДанных = ОбщегоНазначенияУХ.КлючДанныхДляСообщенияПользователю(Объект.Ссылка);
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				,
				,
				Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Отказ;

КонецФункции

&НаСервере
Процедура ЦентрализованныеЗакупкиУправлениеФормой()
	флПоказатьЦУЗ = ПоказатьЦУЗ(Объект.ВидДоговораУХ, Объект.ВидСоглашения, ИспользуетсяУправлениеЗакупками);
	Элементы.СтраницаПланЗакупок.Видимость = флПоказатьЦУЗ;
	Элементы.СтраницаФЗ_223.Видимость = флПоказатьЦУЗ И ЭтоДоговорФЗ223;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаРедактироватьВерсииДляЕИС",
		"Видимость",
		 флПоказатьЦУЗ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОткрытьОбменСЕИС",
		"Видимость",
		флПоказатьЦУЗ И ЭтоДоговорФЗ223);
	УстановитьДоступностьЭлементовДляРедактированияЦУЗ();
	УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ();
	Элементы.ПланПоставокПоПериодамСтраныПроисхождения.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки");	
	Элементы.ПланПоставокПоПериодамСтранаПроизводителя.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки");

КонецПроцедуры

&НаСервере
Процедура ОбновитьЦУЗПоВидуДоговораУХ()
	ИнициализироватьЦентрализованныеЗакупки();
	Если ИспользуетсяУправлениеЗакупками Тогда
		ОбновитьРеквизитыФормыЗакупокПоОрганизации();
		УстановитьПредложениеПоставщикаПобедителяПоЛоту();
	КонецЕсли;
	ЦентрализованныеЗакупкиУправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодичностьВыбораПериодаЗакупок()
	ПараметрВыбора = Новый ПараметрВыбора(
	    "Отбор.Периодичность",
		ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок());
	ОбщегоНазначенияКлиентСерверУХ.ЗаменитьУдалитьПараметрВыбора(
		Элементы.ПериодНачала,
		"Отбор.Периодичность",
		ПараметрВыбора);
	ОбщегоНазначенияКлиентСерверУХ.ЗаменитьУдалитьПараметрВыбора(
		Элементы.ПериодОкончания,
		"Отбор.Периодичность",
		ПараметрВыбора);
КонецПроцедуры
	
&НаСервере
Процедура УстановитьДоступностьЭлементовДляРедактированияЦУЗ()
	Элементы.СтраницаФЗ_223.ТолькоПросмотр = НЕ РежимРедактирования;
	Элементы.СтраницаПланЗакупок.ТолькоПросмотр = НЕ РежимРедактирования;
	Элементы.ПланПоставокПоПериодамПодборПотребностей.Доступность =
		РежимРедактирования;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПотребностей(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Инновационный", Ложь);
	ПараметрыФормы.Вставить("ПериодНачала", Объект.ПериодЗакупокНачало);
	ПараметрыФормы.Вставить("ПериодОкончания", Объект.ПериодЗакупокОкончание);
	ПараметрыФормы.Вставить("ОрганизацияДляЗаключенияДоговора",
		Объект.Организация);
	ПараметрыФормы.Вставить("ДатаСреза", Объект.Дата); 
	ПараметрыФормы.Вставить("Валюта", Объект.ВалютаВзаиморасчетов);
	
	ОткрытьФорму(
		"Обработка.ПодборПотребностейИзПлана.Форма",
		ПараметрыФормы, 
		Элементы.ПланПоставокПоПериодам,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПотребностей(АдресТаблицыПотребности, ДопПараметры) Экспорт
	Если ТипЗнч(АдресТаблицыПотребности) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	Если ОбработкаВыбораПотребностейНаСервере(АдресТаблицыПотребности) Тогда
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыДоговора(
			ЭтотОбъект, 
			Неопределено);
	КонецЕсли;
	// Закрываем если нет ошибок, т.к. ошибки отображаются в форме выбора.
	Оповестить("ЗакрытьПодчиненнуюФорму", "ПодборПотребностейИзПлана", ЭтаФорма);
КонецПроцедуры

// Получаем значения ключевых измерений регистра
//  потребностей в номенклатуре и по ним заполняем
//  значения в строках таблицы. Если такие ключевые
//  значения в кросс-таблице уже есть, то записываем
//  кол-во и сумму сверху если нет, то добавляем
//  новую строку кросс-таблицы.
//
// Параметры:
//  АдресТаблицыПотребности - Строка - адрес таблицы значений
//		во временном хранилище.
//
&НаСервере
Функция ОбработкаВыбораПотребностейНаСервере(АдресТаблицыПотребности)
	ТаблицаПотребностей = 
		ПолучитьИзВременногоХранилища(АдресТаблицыПотребности);
	Если ТаблицаПотребностей = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	РезультатЗапроса = ПолучитьРезультатЗапросаПотребностиПоТаблице(
		ПланПоставокПоПериодам,
		ЭтаФорма.ПериодыЗакупок,
		ТаблицаПотребностей,
		Объект.Дата,
		ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейВерсииСоглашенияКоммерческийДоговор());
	Возврат ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(РезультатЗапроса);
КонецФункции

// Запрос для дозаполнения кросс-таблицы из существующих данных
// и таблицы со значениями ключевыми измерений регистра
// накопления ПотребностиВНоменклатуре.
//
&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаПотребностиПоТаблице(
									КроссТаблица, 
									ПериодыЗакупок,
									ТаблицаПотребностей,
									ДатаДокумента,
									ИменаКлючевыхПолейКроссТаблицы)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПотребностей.Приоритет КАК Приоритет,
		|	ТаблицаПотребностей.Номенклатура КАК Номенклатура,
		|	ТаблицаПотребностей.Характеристика КАК Характеристика,
		|	ТаблицаПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаПотребностей.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПотребностей.ПериодПотребности КАК ПериодПотребности,
		|	ТаблицаПотребностей.Организация КАК Организация,
		|	ТаблицаПотребностей.МестоПоставки КАК МестоПоставки,
		|	ТаблицаПотребностей.Проект КАК Проект,
		|	ТаблицаПотребностей.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТаблицаПотребностей.Менеджер КАК Менеджер,
		|	ТаблицаПотребностей.Количество КАК Количество,
		|	ТаблицаПотребностей.Сумма КАК Сумма,
		|	ТаблицаПотребностей.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаПотребностей
		|ИЗ
		|	&ПараметрТаблицаПотребностей КАК ТаблицаПотребностей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КроссТаблица.НомерСтроки КАК НомерСтроки,
		|	КроссТаблица.Приоритет КАК Приоритет,
		|	КроссТаблица.Номенклатура КАК Номенклатура,
		|	КроссТаблица.Характеристика КАК Характеристика,
		|	КроссТаблица.Организация КАК Организация,
		|	КроссТаблица.МестоПоставки КАК МестоПоставки,
		|	КроссТаблица.Проект КАК Проект,
		|	КроссТаблица.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	КроссТаблица.Менеджер КАК Менеджер,
		|	КроссТаблица.Цена КАК Цена
		|ПОМЕСТИТЬ КроссТаблица
		|ИЗ
		|	&ПараметрКроссТаблица КАК КроссТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПотребностей.Приоритет КАК Приоритет,
		|	ТаблицаПотребностей.Номенклатура КАК Номенклатура,
		|	ТаблицаПотребностей.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТаблицаПотребностей.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТаблицаПотребностей.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТаблицаПотребностей.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТаблицаПотребностей.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТаблицаПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаПотребностей.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПотребностей.ПериодПотребности КАК ПериодПотребности,
		|	ТаблицаПотребностей.Организация КАК Организация,
		|	ТаблицаПотребностей.МестоПоставки КАК МестоПоставки,
		|	ТаблицаПотребностей.Проект КАК Проект,
		|	ТаблицаПотребностей.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТаблицаПотребностей.Менеджер КАК Менеджер,
		|	ТаблицаПотребностей.Количество КАК Количество,
		|	СУММА(ТаблицаПотребностей.Сумма) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаПотребностей.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	ЕСТЬNULL(КроссТаблица.НомерСтроки, -1) КАК НомерСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА КроссТаблица.НомерСтроки ЕСТЬ NULL
		|				ТОГДА ТаблицаПотребностей.Сумма / ВЫБОР
		|						КОГДА ТаблицаПотребностей.Количество = 0
		|							ТОГДА 1
		|						ИНАЧЕ ТаблицаПотребностей.Количество
		|					КОНЕЦ
		|			ИНАЧЕ КроссТаблица.Цена
		|		КОНЕЦ) КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка) КАК Лот,
		|	МИНИМУМ(ТаблицаПотребностей.Коэффициент) КАК Коэффициент
		|ИЗ
		|	ТаблицаПотребностей КАК ТаблицаПотребностей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТаблицаПотребностей.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КроссТаблица КАК КроссТаблица
		|		ПО ТаблицаПотребностей.Приоритет = КроссТаблица.Приоритет
		|			И ТаблицаПотребностей.Номенклатура = КроссТаблица.Номенклатура
		|			И ТаблицаПотребностей.Организация = КроссТаблица.Организация
		|			И ТаблицаПотребностей.МестоПоставки = КроссТаблица.МестоПоставки
		|			И ТаблицаПотребностей.Проект = КроссТаблица.Проект
		|			И ТаблицаПотребностей.ДоговорСПокупателем = КроссТаблица.ДоговорСПокупателем
		|			И ТаблицаПотребностей.Менеджер = КроссТаблица.Менеджер
		|			И ТаблицаПотребностей.Характеристика = КроссТаблица.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПотребностей.Приоритет,
		|	ТаблицаПотребностей.Номенклатура,
		|	ТаблицаПотребностей.Характеристика,
		|	ТаблицаПотребностей.ЕдиницаИзмерения,
		|	ТаблицаПотребностей.СтавкаНДС,
		|	ТаблицаПотребностей.ПериодПотребности,
		|	ТаблицаПотребностей.Организация,
		|	ТаблицаПотребностей.МестоПоставки,
		|	ТаблицаПотребностей.Проект,
		|	ТаблицаПотребностей.ДоговорСПокупателем,
		|	ТаблицаПотребностей.Менеджер,
		|	ТабПериодов.ИмяКолонки,
		|	ЕСТЬNULL(КроссТаблица.НомерСтроки, -1),
		|	ТаблицаПотребностей.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаПотребностей.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТаблицаПотребностей.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТаблицаПотребностей.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТаблицаПотребностей.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаПотребностей.Сумма) > 0";
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО "
		+ ИменаКлючевыхПолейКроссТаблицы;
	Запрос.УстановитьПараметр("ДатаСреза", ДатаДокумента);
	Запрос.УстановитьПараметр("ТаблицаПериодов",
		ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр("ПараметрТаблицаПотребностей",
		ТаблицаПотребностей);
	Запрос.УстановитьПараметр("ПараметрКроссТаблица",
		КроссТаблица.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЛотДоговора(ТаблицаНоменклатуры)
	мЛоты =  ПолучитьЛотыДоговора(ТаблицаНоменклатуры);
	Если мЛоты.Количество() > 0 Тогда
		Возврат мЛоты[0];
	КонецЕсли;
	Возврат ПредопределенноеЗначение("Справочник.Лоты.ПустаяСсылка");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЛотыДоговора(ТаблицаНоменклатуры)
	мЛоты = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		Лот = СтрокаТаблицы.Лот;
		Если ЗначениеЗаполнено(Лот) И мЛоты.Найти(Лот) = Неопределено Тогда
			мЛоты.Добавить(Лот);
		КонецЕсли;
	КонецЦикла;
	Возврат мЛоты;
КонецФункции

&НаСервере
Процедура УстановитьПредложениеПоставщикаПобедителяПоЛоту()
	ПустоеПредложение = Документы.ПредложениеПоставщика.ПустаяСсылка();
	ЛотДоговора = ПолучитьЛотДоговора(ПланПоставокПоПериодам);
	Если ЗначениеЗаполнено(ЛотДоговора) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗакупочнаяПроцедураЛота = ЛотДоговора.Владелец;
		мПредложенийПоЛоту = Документы.ПредложениеПоставщика.ПолучитьПоЗакупочнойПроцедуре(ЗакупочнаяПроцедураЛота, Истина);
		Если мПредложенийПоЛоту.Количество() > 0 Тогда
			Для Каждого Элемент ИЗ мПредложенийПоЛоту Цикл
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент,"Контрагент") = Объект.Контрагент Тогда
					ПредложениеПоставщикаПоЛоту = Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
				Объект.Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредложениеПоставщикаПоЛоту,"Соглашение");
			КонецЕсли;	
		Иначе
			ПредложениеПоставщикаПоЛоту = ПустоеПредложение;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЛотДоговора) Тогда
		ПредложениеПоставщикаПоЛоту = ЛотДоговора;
		Элементы.ПредложениеПоставщикаПоЛоту.Заголовок = "Договор по лоту";
	Иначе
		ПредложениеПоставщикаПоЛоту = ПустоеПредложение;
	КонецЕсли;
	Если  НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ПредложениеПоставщикаПоЛоту) Тогда
		Объект.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредложениеПоставщикаПоЛоту,"ЦенаВключаетНДС")      
	КонецЕсли;		

	Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПараметрыКроссТаблицыПотребностей") = Истина  
		И ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Свойство("Изменяемый") 
		И ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Свойство("Объект")
		И ЭтаФорма.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.Свойство("ЦенаВключаетНДС")
		Тогда
		Этаформа.ПараметрыКроссТаблицыПотребностей.Изменяемый.Объект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
	КонецЕсли;	
	УстановитьПараметрыНДС();
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФормыЗакупокПоОрганизации()
	ЭтоДоговорФЗ223 = ЦентрализованныеЗакупкиВызовСервераУХ.ОрганизацияЗакупаетПоФЗ223(
		Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбменСЕИСДляДоговора(ДоговорКонтрагента)
	ПараметрыФормы = Новый Структура("ОбъектВыгрузки", ДоговорКонтрагента);
	ОткрытьФорму(
		"Обработка.УправлениеИнтеграциейЦУЗсЭТП.Форма", 
		ПараметрыФормы, 
		ЭтаФорма);
КонецПроцедуры
	
&НаКлиенте
Процедура ПроверитьГраницуПериодаЗакупок(ИмяРеквизита, ИмяСтарогоЗначения)
	Если Объект[ИмяРеквизита] <> ЭтаФорма[ИмяСтарогоЗначения] Тогда
		ТекстОшибки = ЦентрализованныеЗакупкиВызовСервераУХ.ПроверитьПериодЗакупок(
			Объект.ПериодЗакупокНачало, 
			Объект.ПериодЗакупокОкончание);
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ОбновитьКроссТаблицуПотребностейНаСервере();
			ЭтаФорма[ИмяСтарогоЗначения] = Объект[ИмяРеквизита];
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(Нстр("ru = 'Невозможно изменить период закупок: %1'"), ТекстОшибки);
			Сообщение.Поле = "Объект." + ИмяРеквизита;
			Сообщение.Сообщить();
			Объект[ИмяРеквизита] = ЭтаФорма[ИмяСтарогоЗначения];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмерКонтрагентаДляЕИСУХ()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		УстановитьРазмерКонтрагентаДляЕИСУХНаСервере();
	Иначе
		РазмерКонтрагентаДляЕИС =
			ПредопределенноеЗначение(
				"Перечисление.РазмерыКонтрагентовДляЕИС.Крупный");
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура УстановитьРазмерКонтрагентаДляЕИСУХНаСервере()
	ДатаНачалаДействия =
		ЦентрализованныеЗакупкиУХ.ПолучитьДатуНачалаДействияДоговора(
			Объект);
	РазмерКонтрагентаДляЕИС =
		РегистрыСведений.РазмерыКонтрагентовДляЕИС.ПолучитьРазмер(
			Объект.Контрагент, ДатаНачалаДействия);
КонецПроцедуры
		

#КонецОбласти

#Область ВнешнийИнтерфейсДляРаботыКроссТаблицыПотребностей
&НаКлиенте
Процедура ОбработатьРезультатВыбораНоменклатурыПартнера(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.ПланПоставокПоПериодам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.НоменклатураПоставщика = ВыбранноеЗначение;
	КонецЕсли;	
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.ТекущаяСтрока.НоменклатураПартнера = ВыбранноеЗначение;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамНоменклатураПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПланПоставокПоПериодам.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);

	НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Контрагент,"Партнер"), ТекущаяСтрока, Элемент.Заголовок,ОповещениеОЗакрытие);
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамНоменклатураПоставщикаОбработкаВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПланПоставокПоПериодам.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);

	НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Контрагент,"Партнер"), ТекущаяСтрока, Элемент.Заголовок,ОповещениеОЗакрытие);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектДляКроссТаблицыПотребностей(
									Контекст,
									ОбъектДляЗаполнения) Экспорт
	ОбъектДляЗаполнения.Периодичность =
		Константы.ПериодичностьЦентрализованныхЗакупок.Получить();								
	ЗаполнитьЗначенияСвойств(ОбъектДляЗаполнения, Объект);
	ОбъектДляЗаполнения.ВалютаДокумента = Объект.ВалютаВзаиморасчетов;
	ОбъектДляЗаполнения.ДатаНачала = Объект.ПериодЗакупокНачало.ДатаНачала;
	ОбъектДляЗаполнения.ДатаОкончания = Объект.ПериодЗакупокОкончание.ДатаОкончания;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = Объект.Дата;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКроссТаблицы(Контекст) Экспорт
	Элемент = УсловноеОформление.Элементы.Добавить();
		ЦентрализованныеЗакупкиУХ.ДобавитьПолеУО(
			Элемент, 
			Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы);
		ЦентрализованныеЗакупкиУХ.ДобавитьОтборЭлементаУО(
			Элемент,
			Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы + ".Лот.ЗакупочнаяПроцедура.СпособСозданияДоговора",
			Перечисления.СпособСозданияДоговора.ВыборПоставщикаНаЭТП,
			ВидСравненияКомпоновкиДанных.НеРавно);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"ПланПоставокПоПериодамХарактеристика",
		"ПланПоставокПоПериодам.ХарактеристикиИспользуются");
	Элементы.ПланПоставокПоПериодамНоменклатураПоставщика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщика");
КонецПроцедуры

&НаСервере
Процедура СкопироватьВКроссТаблицу(Контекст) Экспорт
	ПланПоставокПоПериодам.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.ПериодЗакупокНачало)
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодЗакупокОкончание) Тогда
		Возврат;
	КонеЦЕсли;
	РезультатЗапроса = ПолучитьРезультатЗапросаТЧНоменклатурыПоПериодам(
		Объект.Номенклатура,
		ЭтаФорма[Контекст.ИмяТаблицыПериодов],
		Контекст.ИменаКлючевыхПолейКроссТаблицы);
	ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		РезультатЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличества(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииКоличестваКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
	ПланПоставокПоПериодамПриАктивизацииЯчейки(Элементы.ПланПоставокПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦены(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииЦеныКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
	ПланПоставокПоПериодамПриАктивизацииЯчейки(
		Элементы.ПланПоставокПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииСуммыКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	СтрокаТоваров = Элементы.ПланПоставокПоПериодам.ТекущиеДанные;
	Если СтрокаТоваров <> Неопределено
		 И СтрокаТоваров.ЭтоКатегорияНоменклатуры Тогда
		ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
		ПланПоставокПоПериодамПриАктивизацииЯчейки(
			Элементы.ПланПоставокПоПериодам);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область УХ_Встраивание
&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	//ДоговорыКредитовИДепозитовЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	//
	ЗаполнитьЗначенияСвойств(ЭтаФорма, 	ПараметрыОбработки);
	ЗаполнитьЗначенияСвойств(Объект, 	ПараметрыОбработки);
	ПодтверждающиеДокументы 		= ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресПодтверждающихДокументовВоВременномХранилище);
	ПодтверждающиеДокументыОбъекта 	= Объект.ПодтверждающиеДокументы;
	ПодтверждающиеДокументыОбъекта.Очистить();
	Для каждого ТекСтрока Из ПодтверждающиеДокументы Цикл
		НоваяСтрока = ПодтверждающиеДокументыОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти
	
#Область РаботаСКроссТаблицейПотребностей


&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаТЧНоменклатурыПоПериодам(
									ТЧНоменклатура, 
									ПериодыЗакупок,
									ИменаКлючевыхПолейКроссТаблицы)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Лот КАК Лот,
		|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
		|	ТаблицаНоменклатуры.ПериодПотребности КАК ПериодПотребности,
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.Организация КАК Организация,
		|	ТаблицаНоменклатуры.МестоПоставки КАК МестоПоставки,
		|	ТаблицаНоменклатуры.Проект КАК Проект,
		|	ТаблицаНоменклатуры.Менеджер КАК Менеджер,
		|	ТаблицаНоменклатуры.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаНоменклатуры.Коэффициент КАК Коэффициент,
		|	ТаблицаНоменклатуры.Количество КАК Количество,
		|	ТаблицаНоменклатуры.Цена КАК Цена,
		|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаНоменклатуры.Сумма КАК Сумма,
		|	ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
		|	ТаблицаНоменклатуры.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТаблицаНоменклатуры.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ТаблицаНоменклатуры.НоменклатураПоставщика КАК НоменклатураПоставщика
		|ПОМЕСТИТЬ ТЧНоменклатура
		|ИЗ
		|	&ПараметрТЧНоменклатура КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.Лот КАК Лот,
		|	ТЧНоменклатура.Приоритет КАК Приоритет,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТЧНоменклатура.Организация КАК Организация,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Проект КАК Проект,
		|	ТЧНоменклатура.Менеджер КАК Менеджер,
		|	ТЧНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	0 КАК НомерСтроки,
		|	ТЧНоменклатура.НоменклатураПоставщика,
		|	ТЧНоменклатура.НоменклатураПоставщика КАК НоменклатураПартнера,
		|	ТЧНоменклатура.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТЧНоменклатура.СтранаПроизводителя КАК СтранаПроизводителя		
		|ИЗ
		|	ТЧНоменклатура КАК ТЧНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТЧНоменклатура.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)";
	Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО " + ИменаКлючевыхПолейКроссТаблицы;
	Запрос.УстановитьПараметр("ТаблицаПериодов", ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр("ПараметрТЧНоменклатура",	ТЧНоменклатура.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаСервере
Функция ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(РезультатЗапроса)
	ЦентрализованныеЗакупкиУХ.ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		ПланПоставокПоПериодам, 
		РезультатЗапроса,
		ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейВерсииСоглашенияКоммерческийДоговор());
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьИтоговыеПоказателиКроссТаблицы(
	    ПланПоставокПоПериодам,
		ЭтаФорма.ПериодыЗакупок,
		Объект.ЦенаВключаетНДС);
		
	ОбновитьСуммуДоговораИзГрафиков(ЭтаФорма);
	Возврат Истина;
КонецФункции

// Выставляет в сумму договору итоги по графикам рассчётов и графикам поставок.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуДоговораИзГрафиков(Форма)
	Если НЕ Форма.ФиксированнаяСуммаДоговора Тогда
		ИтогПоставок = Форма.ПланПоставокПоПериодам.Итог("Сумма");
		ИтогРасчетов = Форма.ГрафикРасчетов.Итог("СуммаОплата");
		Форма.Объект.Сумма = Макс(ИтогПоставок, ИтогРасчетов);
	Иначе
		// Сумма договора фиксирована. Не имзеняем её.
	КонецЕсли;
КонецПроцедуры		// ОбновитьСуммуДоговораИзГрафиков()

&НаСервере
Процедура ОбновитьКроссТаблицуПотребностейНаСервере()
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	Элементы.Переместить(Элементы.ПланПоставокПоПериодамКолонкаРазделитель, Элементы.ПланПоставокПоПериодам);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьСуммуДокументаИзКроссТаблицы(Форма)
	Форма.Объект.Сумма = Форма.ПланПоставокПоПериодам.Итог("Сумма");
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПроверитьОбновитьСуммуДокументаИзКроссТаблицы()
	Если НЕ ФиксированнаяСуммаДоговора Тогда
		ОбновитьСуммуДоговораИзГрафиков(ЭтаФорма);
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииСуммыДоговора(
			ЭтотОбъект, 
			Неопределено);
		ВыполнитьКонтрольДокумента();
	Иначе
		// Сумма договора фиксирована. Не имзеняем её.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамНоменклатураПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Элементы.ПланПоставокПоПериодам.ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикНоменклатураПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамХарактеристикаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикХарактеристикаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамЕдиницаИзмеренияПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЕдиницаИзмеренияПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамЦенаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЦенаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикСтавкаНДСПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамСтавкаНДСПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикСтавкаНДСПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ПроверитьОбновитьСуммуДокументаИзКроссТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(ЭтаФорма, "ПланПоставокПоПериодам");
	ОбновитьСуммуДоговораИзГрафиков(ЭтаФорма);
	ВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамЛотПриИзменении(Элемент)
	УстановитьПредложениеПоставщикаПобедителяПоЛоту();
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамПослеУдаления(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма, 
		"ПланПоставокПоПериодам");
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамПриАктивизацииЯчейки(Элемент)
	Если ИспользуетсяУправлениеЗакупками Тогда
		АктивныеПериоды = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(Новый Структура("Активная", Истина));
		Если АктивныеПериоды.Количество() = 1 Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные = Элементы.ПланПоставокПоПериодам.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяЭлементаКроссТаблицы = "ПланПоставокПоПериодам";
		ИтогоПоКолонке = "";
		ИтогоПоСтроке = НСтр("ru='Всего по строке: %СуммаПоСтроке% %Валюта%.'");
		ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%Валюта%", Строка(Объект.ВалютаВзаиморасчетов));
		ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%СуммаПоСтроке%", Формат(ТекущиеДанные.Сумма, "ЧДЦ=2; ЧН=0,00"));
		Если Элемент.ТекущийЭлемент <> Неопределено Тогда
			Для каждого Период Из АктивныеПериоды Цикл
				Если Элемент.ТекущийЭлемент.Имя = ИмяЭлементаКроссТаблицы + "Цена_"+Период.ИмяКолонки 
					ИЛИ Элемент.ТекущийЭлемент.Имя = ИмяЭлементаКроссТаблицы + "Количество_"+Период.ИмяКолонки 
					ИЛИ Элемент.ТекущийЭлемент.Имя = ИмяЭлементаКроссТаблицы + "Сумма_"+Период.ИмяКолонки Тогда
					
					СуммаПоКолонке = ЭтаФорма[ИмяЭлементаКроссТаблицы + "Сумма_"+ Период.ИмяКолонки];
					ИтогоПоКолонке = НСтр("ru='Всего за период %ПериодЗаголовок%: %СуммаПоКолонке% %Валюта%'");
					ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%ПериодЗаголовок%", Период.Заголовок);
					ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%СуммаПоКолонке%", Формат(СуммаПоКолонке, "ЧДЦ=2; ЧН=0,00"));
					ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%Валюта%", Строка(Объект.ВалютаВзаиморасчетов));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ИтогоПоСтрокеКолонке = ИтогоПоСтроке + " " + ИтогоПоКолонке;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоПериодамВыбор(Элемент, 
									  ВыбраннаяСтрока, 
									  Поле, 
									  СтандартнаяОбработка)
	Если Элементы.СтраницаПланЗакупок.ТолькоПросмотр = Истина И
		Поле.Имя = "ПланПоставокПоПериодамНоменклатура" Тогда
		ЦентрализованныеЗакупкиКлиентУХ.ОткрытьФормуНоменклатурыСтрокиКроссТаблицы(
			ПланПоставокПоПериодам,
			ВыбраннаяСтрока,
			ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияТаблицыПотребностейНаКлиенте()
	ОшибкиПользователю = Неопределено;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ХарактеристикиЗаполненыКорректно(
		ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		"Характеристика",
		"ХарактеристикиИспользуются",
		ОшибкиПользователю);
	СтруктураИменПолей = Новый Структура;
	СтруктураИменПолей.Вставить("Приоритет", "Приоритет");
	СтруктураИменПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураИменПолей.Вставить("Организация", "Организация");
	СтруктураИменПолей.Вставить("МестоПоставки", "Место поставки");
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПроверитьЗаполнениеПолейКроссТаблицы(
		ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		СтруктураИменПолей,
		ОшибкиПользователю);
	Возврат ОшибкиПользователю;
КонецФункции

&НаКлиенте
Процедура ПланПоставокПоПериодамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораПотребностей(ВыбранноеЗначение, Элемент);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыНДС()
	
	Элементы.ЦенаВключаетНДС.Доступность = Не ЗначениеЗаполнено(Объект.Соглашение);
	Если ЗначениеЗаполнено(Объект.Соглашение) И 
		Объект.ЦенаВключаетНДС = Истина Тогда
		Элементы.ЦенаВключаетНДС.Заголовок = "Цена включает НДС - установлено по данным соглашения";
		Элементы.УХ_СоглашениеНадпись.Видимость = Ложь;
		Элементы.УХ_Соглашение.Видимость = Истина;		
		Элементы.УХ_Соглашение.Заголовок = "Цена включает НДС = ""Да"", установлено по данным";
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) И 
		Объект.ЦенаВключаетНДС = Ложь Тогда
		Элементы.УХ_СоглашениеНадпись.Видимость = Ложь;
		Элементы.ЦенаВключаетНДС.Заголовок = "Цена включает НДС - установлено по данным соглашения";
		Элементы.УХ_Соглашение.Видимость = Истина;		
		Элементы.УХ_Соглашение.Заголовок = "Цена включает НДС = ""Нет"", установлено по данным";
	ИначеЕсли Объект.ЦенаВключаетНДС = Истина Тогда
		Элементы.УХ_Соглашение.Заголовок = "Цена включает НДС";
		Элементы.УХ_СоглашениеНадпись.Видимость = Истина;
		Элементы.УХ_Соглашение.Видимость = Ложь;
		Элементы.УХ_СоглашениеНадпись.Заголовок = "Цена включает НДС = ""Да""";
	ИначеЕсли Объект.ЦенаВключаетНДС = Ложь Тогда
		Элементы.УХ_Соглашение.Заголовок = "Цена включает НДС";
		Элементы.УХ_СоглашениеНадпись.Видимость = Истина;
		Элементы.УХ_Соглашение.Видимость = Ложь;		
		Элементы.УХ_СоглашениеНадпись.Заголовок = "Цена включает НДС = ""Нет""";
	КонецЕсли;	

КонецПроцедуры	

#КонецОбласти


#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСогласования(Команда)
	
	ДоговорыКонтрагентовФормыУХКлиент.Подключаемый_ВыполнитьКомандуСогласования(ЭтотОбъект, Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 

КонецПроцедуры

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры		

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы)
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроекПриемкиСервер()
	
	ДоговорыКонтрагентовФормыЕХ.ПриИзмененииНастроекПриемкиСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	СтарыйКонтрагент = Объект.Контрагент;
	
	ПартнерПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> СтарыйКонтрагент Тогда
		ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииКонтрагентаКлиент(ЭтотОбъект, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, Организация)
	
	Если (ЗначениеЗаполнено(БанковскийСчетКонтрагента)
		И Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента,"Владелец")) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец = &Контрагент
	|	И ((БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
	Иначе
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо, Организация)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, Организация);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ОплатаВВалюте = (Объект.ОсновнаяВалютаПлатежей <> ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация));
	ПартнерПриИзмененииСервер(Объект.Партнер, 
								Объект.Контрагент, 
								ОплатаВВалюте, 
								Объект.БанковскийСчетКонтрагента, 
								Объект.КонтактноеЛицо, 
								КонтрагентЮрФизЛицо,
								Объект.Организация);
	//++ НЕ УТ
	//-- НЕ УТ
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> СтарыйКонтрагент Тогда
		
		КонтрагентПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНазначения = "НалогообложениеНДСОпределяетсяВДокументе";
	ЗначенияРеквизитовНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НаправлениеДеятельности, РеквизитыНазначения);
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорПродажи(ТипДоговора) Тогда
		
		Объект.НалогообложениеНДСОпределяетсяВДокументе = ЗначенияРеквизитовНазначения.НалогообложениеНДСОпределяетсяВДокументе;
	
		ЗаполнитьНалогообложениеИВидДеятельности();
		
		Если Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
			РежимНалогообложения = 1;
		Иначе
			РежимНалогообложения = 0;
		КонецЕсли;
		
		Элементы.НалогообложениеНДС.Доступность = НЕ Объект.НалогообложениеНДСОпределяетсяВДокументе;
		
	ИначеЕсли Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(ТипДоговора) Тогда
		
		Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе = ЗначенияРеквизитовНазначения.НалогообложениеНДСОпределяетсяВДокументе;
		ЗаполнитьНалогообложениеИВидДеятельности();
		
		Если Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе Тогда
			РежимРаздельногоУчетаНДС = 1;
		Иначе
			РежимРаздельногоУчетаНДС = 0;
		КонецЕсли;
		
		Элементы.ЗакупкаПодДеятельность.Доступность = НЕ Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	НаправлениеДеятельностиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДопустимаяСуммаЗадолженностиПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЦФОПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли

	ПриИзмененииЦФОНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойПроектПриИзменении(Элемент)
	ПриИзмененииПроектаНаСервере();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьАналитикиСтрокиГрафикаПоУмолчанию(Объект)
	
	Результат = Новый Структура;
	Результат.Вставить("ЦФО", Объект.ОсновнойЦФО);
	Результат.Вставить("Проект", Объект.ОсновнойПроект);
	Результат.Вставить("СтатьяДвиженияДенежных", Объект.ОсновнойПроект);
	Результат.Вставить("Проект", Объект.ОсновнойПроект);
	Результат.Вставить("Проект", Объект.ОсновнойПроект);
	
КонецФункции

#Область ЗагрузкаГрафика
&НаКлиенте
Процедура ЗагрузитьГрафик(Команда) Экспорт	
	Данные = ДанныеДляЗагрузкиГрафикаСервер();
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьЗагрузкуГрафика(ЭтотОбъект, Данные);	
КонецПроцедуры

&НаСервере
Функция ДанныеДляЗагрузкиГрафикаСервер()
	Возврат ДоговорыКонтрагентовФормыУХ.ДанныеДляЗагрузкиГрафика(ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГрафикЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено 
		ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьГрафикНаСервере(РезультатЗакрытия);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрафикНаСервере(АдресГрафика) Экспорт
	ДоговорыКонтрагентовФормыУХ.ЗагрузитьГрафик(ЭтотОбъект, АдресГрафика);	
КонецПроцедуры
#КонецОбласти

#Область ПереносФакта
&НаКлиенте
Процедура ПеренестиФакт(Команда)	
	ДоговорыКонтрагентовФормыУХКлиент.НачатьПереносФактаВГрафик(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораДатыПереносаФакта(Дата, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Дата) Тогда
		 ПеренестиФактНаСервере(Дата);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиФактНаСервере(ДатаПереноса)
	ДоговорыКонтрагентовФормыУХ.ПеренестиФактВГрафик(ЭтотОбъект, ДатаПереноса);
КонецПроцедуры
#КонецОбласти

#Область СравнениеВерсийГрафиков
&НаКлиенте
Процедура Подключаемый_СравнитьВерсииГрафиков(Команда)	
	ПараметрыКоманды = ПараметрыКомандыСравнитьВерсииГрафиков();
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьСравнениеВерсийГрафиков(ЭтотОбъект, ПараметрыКоманды);	
КонецПроцедуры

&НаСервере
Функция ПараметрыКомандыСравнитьВерсииГрафиков()
	Возврат ДоговорыКонтрагентовФормыУХ.ПараметрыКомандыСравнитьВерсииГрафиков(ЭтотОбъект);
КонецФункции	

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	БанковскийСчетПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииНаСервере()
	ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	БанковскийСчетКонтрагентаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаПриИзмененииНаСервере()
	ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуУХ(Команда)
	
	Если Команда.Имя = "ВыполнитьКонтрольДокумента" Тогда
		ВыполнитьКонтрольДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьКонтрольДокумента()
	ПодключитьОбработчикОжидания("Подключаемый_КонтрольДокумента", 0.1, Истина);
КонецПроцедуры


&НаСервере
Процедура ВыполнитьКонтрольДокументаНаСервере()
	КонтрольУХ.ВыполнитьИнтерактивныйКонтроль(ЭтаФорма);
КонецПроцедуры


// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()


&НаСервере
Процедура ЗаписатьСвязанныеСОбъектомДанные(ТекущийОбъект)
	 ДоговорыКонтрагентовФормыУХ.СохранитьОсновноеОбязательствоПоДоговору(ТекущийОбъект.ДоговорКонтрагента, ТекущийОбъект.ВидДоговораУХ, ОсновноеОбязательство); 
КонецПроцедуры	


&НаКлиенте
Процедура КонтролироватьПревышениеСуммыПриИзменении(Элемент)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НачалоДействияПриИзменении(Элемент)
	УстановитьРазмерКонтрагентаДляЕИСУХ();
	// Установим период закупок по умолчанию.
	Если (ЗначениеЗаполнено(Объект.ДатаНачалаДействия)) И (НЕ ЗначениеЗаполнено(Объект.ПериодЗакупокНачало)) Тогда
		Если ПоказатьЦУЗ(Объект.ВидДоговораУХ, Объект.ВидСоглашения, ИспользуетсяУправлениеЗакупками) Тогда
			Объект.ПериодЗакупокНачало = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(Объект.ДатаНачалаДействия, ПериодичностьЗакупок);
			ПроверитьГраницуПериодаЗакупок("ПериодЗакупокНачало", "СтарыйПериодЗакупокНачало");
		Иначе
			// Период не будет выведен. Не изменяем.
		КонецЕсли;
	Иначе
		// Не изменяем период.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	// Установим период закупок по умолчанию.
	Если (ЗначениеЗаполнено(Объект.ДатаОкончанияДействия)) И (НЕ ЗначениеЗаполнено(Объект.ПериодЗакупокОкончание)) Тогда
		Если ПоказатьЦУЗ(Объект.ВидДоговораУХ, Объект.ВидСоглашения, ИспользуетсяУправлениеЗакупками) Тогда
			Объект.ПериодЗакупокОкончание = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(Объект.ДатаОкончанияДействия, ПериодичностьЗакупок);
			ПроверитьГраницуПериодаЗакупок("ПериодЗакупокОкончание", "СтарыйПериодЗакупокОкончание");
		Иначе
			// Период не будет выведен. Не изменяем.
		КонецЕсли;
	Иначе
		// Не изменяем период.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриРасчетеДолиЗакупокУСМППриИзменении(Элемент)
	УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ();
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикНаСервере(Знач СтруктураДействий = Неопределено)
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХ.ОбновитьТаблицуГрафикРасчетов(ЭтотОбъект, СтруктураДействий, ОписаниеГрафика);
	ОбновитьСуммуДоговораИзГрафиков(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоправкиВДетализацииГрафика(Команда)
	
	ОтображатьПоправки = Не Элементы.ГрафикРасчетовЛинейныйОтображатьПоправкиВДетализацииГрафика.Пометка;
	
	Элементы.ГрафикРасчетовЛинейныйОтображатьПоправкиВДетализацииГрафика.Пометка = ОтображатьПоправки;
	
	Элементы.ГрафикРасчетовЛинейныйСуммаРасчет.Видимость = ОтображатьПоправки;
	Элементы.ГрафикРасчетовЛинейныйСуммаКорректировка.Видимость = ОтображатьПоправки;
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_КонтрольДокумента()
	ВыполнитьКонтрольДокументаНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитики(Элемент)
	ПриИзмененииАналитикиБюджетированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтатьяБюджета_ПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтатьиБюджета_ПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД =  Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонтрольУХКлиент.ПоказатьРасшифровкуКонтроля(Объект, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаПриАктивизацииЯчейки(Элемент)
	Элемент.ТекущаяСтрока = неопределено;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДоговорыКредитовИДепозитовЛокализацияКлиент.ОбработкаНавигационнойСсылкиФормы(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДетализацию(Команда)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьВидимостьДетализации(ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьФактВГрафике(Команда)
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьВидимостьКолонокФакта(ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)	
	
	УстановитьВидимостьЦентрализованногоДоговора();
	ДоговорыКонтрагентовФормыУХКлиент.ПриИзмененииПорядкаРасчетов(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАналитикиБюджетированияНаСервере()
	ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика();
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииВалютыВзаиморасчетовНаСервере()
	ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика();  
	УстановитьЗначенияРеквизитовДисконтирования();
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииПроектаНаСервере()
	ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика();
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииЦФОНаСервере()
	ОбработатьИзменениеЗначенияПоУмолчаниюАналитикиГрафика();
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()


&НаСервере
Процедура ПрочитатьСвязанныеСОбъектомДанные(ТекущийОбъект)
	 ЭтотОбъект.ОсновноеОбязательство = ДоговорыКонтрагентовФормыУХ.ОсновноеОбязательствоПоДоговору(ТекущийОбъект.ДоговорКонтрагента, ТекущийОбъект.ВидДоговораУХ);
 КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗ()
	Элементы.КатегорияЗакупкиДляИсключенияИзГОЗ.Видимость =
		Объект.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьНалогообложениеИВидДеятельности(ПерезаполнитьНалогообложениеИВидДеятельности = Истина)
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорПродажи(ТипДоговора) Тогда
		Если Объект.НалогообложениеНДСОпределяетсяВДокументе 
			И ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		ИначеЕсли НЕ Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
			ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
			Если ПерезаполнитьНалогообложениеИВидДеятельности Тогда
				УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС,
				ПараметрыЗаполнения,
				УчетНДСКэшированныеЗначенияПараметров);
			КонецЕсли;												
			УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС,
																		Объект.НалогообложениеНДС,
																		ПараметрыЗаполнения,
																		УчетНДСКэшированныеЗначенияПараметров); 
		КонецЕсли;
	ИначеЕсли Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(ТипДоговора) Тогда
		Если Объект.НалогообложениеНДСОпределяетсяВДокументе 
			И ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		ИначеЕсли НЕ Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
			ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
			Если ПерезаполнитьНалогообложениеИВидДеятельности Тогда
				
				УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС,
				ПараметрыЗаполнения,
				УчетНДСКэшированныеЗначенияПараметров);
			КонецЕсли;																
			УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
																		Объект.НалогообложениеНДС,
																		ПараметрыЗаполнения,
																		УчетНДСКэшированныеЗначенияПараметров);
		КонецЕсли;
		Если Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе 
			И ЗначениеЗаполнено(Объект.ЗакупкаПодДеятельность) Тогда
			Объект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		ИначеЕсли НЕ Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе Тогда
			ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
			Если ПерезаполнитьНалогообложениеИВидДеятельности Тогда
				УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Объект.ЗакупкаПодДеятельность,
														ПараметрыЗаполнения,
														УчетНДСКэшированныеЗначенияПараметров);
			КонецЕсли;										
			УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(Элементы.ЗакупкаПодДеятельность,
																Объект.ЗакупкаПодДеятельность,
																ПараметрыЗаполнения,
																УчетНДСКэшированныеЗначенияПараметров);
			
			ВыборВидаДеятельностиНДС = Элементы.ЗакупкаПодДеятельность.Видимость;
			Элементы.РежимРаздельногоУчетаНДСОпределяетсяЗначением.Видимость = ВыборВидаДеятельностиНДС;
			Элементы.РежимРаздельногоУчетаНДС.Видимость = ВыборВидаДеятельностиНДС;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЦентрализованногоДоговора()
	
	Элементы.ГруппаФилиалы.Видимость = НоваяАрхитектураВзаиморасчетов 
		И ГоловнаяОрганизация И ИспользоватьНесколькоОрганизаций
		И ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс
		И (ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
			ИЛИ ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			ИЛИ ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером
			ИЛИ ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем
			ИЛИ ТипДоговора = Перечисления.ТипыДоговоров.СХранителем
			ИЛИ ТипДоговора = Перечисления.ТипыДоговоров.СКомитентомНаЗакупку);
	Если НЕ Элементы.ГруппаФилиалы.Видимость И Объект.ЦентрализованныйДоговор Тогда
		Объект.ЦентрализованныйДоговор = Ложь;
	КонецЕсли;
	Элементы.ДекорацияФилиалы.Доступность = Объект.ЦентрализованныйДоговор;
	Элементы.РазрешаетсяПередачаОплатМеждуФилиалами.Видимость = Объект.ЦентрализованныйДоговор;
	УстановитьКоличествоФилиалов(Элементы.ДекорацияФилиалы, Объект.Филиалы.Количество());
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКоличествоФилиалов(ДекорацияФилиалы, КоличествоФилиалов)
	
	ДекорацияФилиалы.Заголовок = НСтр("ru = 'Доступен филиалам';
										|en = 'Available to branch offices'");
	Если КоличествоФилиалов > 0 Тогда
		ДекорацияФилиалы.Заголовок = ДекорацияФилиалы.Заголовок + " (" + КоличествоФилиалов + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаСоглашение(Форма)
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПоставщиком(Объект.ВидДоговораУХ) Тогда
		
		Ограничение = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками");
		
	ИначеЕсли РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПокупателем(Объект.ВидДоговораУХ) Тогда
		Ограничение = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
		
	Иначе
		Ограничение = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Элементы.Соглашение.ОграничениеТипа = Ограничение;
	
КонецПроцедуры

#КонецОбласти

