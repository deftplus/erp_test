
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОбработкаПолученияПредставленияВерсияСоглашения(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОбработкаПолученияПолейПредставленияВерсияСоглашения(Поля, СтандартнаяОбработка);
	
КонецПроцедуры


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// реквизиты документа.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	Параметры = Запрос.Параметры;
	ВыполнятьБюджетирование = ВыполнятьБюджетирование(Параметры);
	
	// Если в справочнике периоды нет требуемых элементов, то прекращаем собирать данные
	Если ВыполнятьБюджетирование
		И НЕ КонтрольЛимитовУХ.ПодготовитьТаблицуДатИПериодов(Запрос, ДокументСсылка, ДополнительныеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса = Новый СписокЗначений;
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаВерсииРасчетов(ТекстыЗапроса, ИмяТаблицыДокумента());
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаРасчетыСКонтрагентамиГрафики(ТекстыЗапроса, ИмяТаблицыДокумента());
	
	Если ВыполнятьБюджетирование Тогда
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаОперативныйПланПоБюджетам(ТекстыЗапроса, ИмяТаблицыДокумента());
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаВТ_ТаблицаПлановССуммамиЛимитирования(ТекстыЗапроса);
	КонецЕсли;	
		
	ПроведениеСерверУХ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	Если ВыполнятьБюджетирование Тогда
		РаботаСДоговорамиКонтрагентовУХ.ПодготовитьТаблицуЛимитовПоБюджетам(Запрос, ДополнительныеСвойства.ТаблицыДляДвижений);
	КонецЕсли;	
	
КонецПроцедуры

Функция ОписаниеГрафика(ВидДоговораУХ) Экспорт
	
	Результат = Новый Структура;
	
	СекцияТело                               = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияТело.Имя                           = "ОсновнойДолг";
	СекцияТело.КолонкаПриход                 = "СуммаНачисление";
	СекцияТело.КолонкаРасход                 = "СуммаОплата";
	СекцияТело.КолонкаРасходДДС              = Истина;	
	СекцияТело.КолонкаОстаток                = "СуммаЗадолженность";
	СекцияТело.Представление 				 = Нстр("ru = 'Основной долг'");
	СекцияТело.КолонкаПриходПредставление    = НСтр("ru = 'Начисление'");
	СекцияТело.КолонкаРасходПредставление    = НСтр("ru = 'Оплата'");
	СекцияТело.КолонкаОстатокПредставление 	 = НСтр("ru = 'Остаток'");

	СекцияТело.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
	
	ЭтоДоходныйДоговор = УправлениеДоговорамиУХВызовСервераПовтИсп.ЭтоДоходныйДоговор(ВидДоговораУХ);
	
	Если ЭтоДоходныйДоговор Тогда
		
		СекцияТело.КолонкаПриходОперация = Справочники.ОперацииГрафиковДоговоров.ДоходныйКоммерческийДоговор_Начисление;	
		СекцияТело.КолонкаРасходОперация = Справочники.ОперацииГрафиковДоговоров.ДоходныйКоммерческийДоговор_Оплата;
		
	Иначе
		
		СекцияТело.КолонкаПриходОперация = Справочники.ОперацииГрафиковДоговоров.РасходныйКоммерческийДоговор_Начисление;
		СекцияТело.КолонкаРасходОперация = Справочники.ОперацииГрафиковДоговоров.РасходныйКоммерческийДоговор_Оплата;
		
	КонецЕсли;
	
	Результат.Вставить(СекцияТело.Имя,        СекцияТело);
	
	Возврат Результат;
	
КонецФункции

Функция ВычисляемыеРеквизитыДоговора(ВерсияСоглашения) Экспорт
	
	Результат = Новый Структура;
	
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьВычисляемыеРеквизитыДоговора(Результат, ВерсияСоглашения);
	
	Если ВерсияСоглашения.ВыданноеОбеспечение ИЛИ ВерсияСоглашения.ПолученноеОбеспечение Тогда
		Обеспеченность = Перечисления.ОбеспеченностьДоговоров.Обеспечен;
	Иначе
		Обеспеченность = Перечисления.ОбеспеченностьДоговоров.НеОбеспечен;
	КонецЕсли;
	
	Результат.Вставить("Обеспеченность", 	Обеспеченность);
	
	МассивФилиалы = ВерсияСоглашения.Филиалы.Выгрузить().ВыгрузитьКолонку("Организация");
	
	Результат.Вставить("Филиалы", 			МассивФилиалы);
		
	ДоговорыКонтрагентовВстраиваниеУХ.ЗаполнитьВычисляемыеРеквизитыДоговора(Результат, ВерсияСоглашения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив лотов регистрируемых ТЧ Номенклатура документа
// ВерсияСоглашенияКоммерческийДоговор.
//
Функция ПолучитьЛотыВерсии(ТЧНоменклатура) Экспорт
	ТЗ = ТЧНоменклатура.Выгрузить(,"Лот");
	ТЗ.Свернуть("Лот");
	мЛоты = Новый Массив;
	Для Каждого Строка Из ТЗ Цикл
		Если ЗначениеЗаполнено(Строка.Лот) Тогда
			мЛоты.Добавить(Строка.Лот);
		КонецЕсли;
	КонецЦикла;
	Возврат мЛоты;
КонецФункции

// Проверяет, что в договоре установлен план поставок.
//
Функция ЕстьПланПоставокНоменклатуры(ВерсияСоглашения) Экспорт
	ТипВерсииСоглашения = ТипЗнч(ВерсияСоглашения);
	Если ЗначениеЗаполнено(ВерсияСоглашения)
		И (ТипВерсииСоглашения = 
				Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор")
			ИЛИ ТипВерсииСоглашения = 
				Тип("ДокументОбъект.ВерсияСоглашенияКоммерческийДоговор"))
		И ВерсияСоглашения.ВидСоглашения <>
				Перечисления.ВидыСоглашений.РамочныйДоговор Тогда
		Возврат ВерсияСоглашения.Номенклатура.Количество() > 0;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ОписаниеТабличныхЧастейДокумента() Экспорт
	
	ОписаниеТабличныхЧастей = РаботаСДоговорамиКонтрагентовУХ.НовыйОписаниеТабличныхЧастейДокумента();
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "Риски", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ГрафикРасчетов", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "Номенклатура", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроизводственныеКалендари", Истина);
	
	Возврат ОписаниеТабличныхЧастей;	
КонецФункции

Функция ПолучитьФактическиеДанные(Договор, ОписаниеГрафика, ОперацииГрафика) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ФактическиеДанныеПоСекциямГрафика(Договор, ОписаниеГрафика, ОперацииГрафика);	
КонецФункции

Функция ИменаКлючевыхРеквизитов() Экспорт
	
	Результат = РаботаСДоговорамиКонтрагентовУХКлиентСервер.НовыйИменаКлючевыхРеквизитов();
	Результат.ДатаНачалаДействия = "ДатаНачалаДействия";
	Результат.ДатаОкончанияДействия = "ДатаОкончанияДействия";
	Результат.Сумма = "Сумма";
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоДоговорЦУЗ(ДокументОбъект) Экспорт
    Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
        И (ДокументОбъект.ВидСоглашения <> Перечисления.ВидыСоглашений.РамочныйДоговор)
		И ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоДопустимыйВидДоговораУХ(
													ДокументОбъект.ВидДоговораУХ);
КонецФункции

Процедура ЗаполнитьДвиженияПланПоставокПоДоговорам(ДокументОбъект,
										ПланПоставокПоДоговорамНаборЗаписей) Экспорт
	ПланПоставокПоДоговорамНаборЗаписей.Записывать = Истина;
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		РегистрыНакопления.ПланПоставокПоДоговорам.СторнироватьПланПоставокПоДокументу(
			ПланПоставокПоДоговорамНаборЗаписей,
			ПолучитьВыборкуДвиженийПланПоставокПоДоговорамДляСторнирования(
				ДокументОбъект));
	КонецЕсли;
			
	Если Документы.ВерсияСоглашенияКоммерческийДоговор.ЭтоДоговорЦУЗ(ДокументОбъект) Тогда
		РегистрыНакопления.ПланПоставокПоДоговорам.ДобавитьВПланПоставок(
			ПланПоставокПоДоговорамНаборЗаписей,
			ПолучитьВыборкуДляЗаписиДвиженийПланПоставокПоДоговорам(
				ДокументОбъект));
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьПереченьОперацийГрафиков(ОперацииГрафика, ОписаниеГрафика, ДокументОбъект) Экспорт
	
	// Закэшируем значения типов аналитик статьи.
	
	ВидыАналитикСтатьиДДС = ДвиженияБюджетированиеУХ.ВидыАналитикСтатей(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.СтатьяДвиженияДенежныхСредств));
	ВидыАналитикИсполнение = ДвиженияБюджетированиеУХ.ВидыАналитикСтатей(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.ОсновнаяСтатьяИсполнение),
		?(ДокументОбъект.ОсновнаяСтатьяИсполнение = Неопределено, ПланыВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов, Неопределено));
	
	Для Каждого ТекКлючЗначение Из ОперацииГрафика Цикл
		
		ТекОперация = ТекКлючЗначение.Значение;
		
		ТекОперация.ЦФО = ДокументОбъект.ОсновнойЦФО;
		ТекОперация.Проект = ДокументОбъект.ОсновнойПроект;
		ТекОперация.Валюта = ДокументОбъект.ВалютаВзаиморасчетов;
		ТекОперация.СчетОрганизации = ДокументОбъект.БанковскийСчет;
		ТекОперация.СчетКонтрагента = ДокументОбъект.БанковскийСчетКонтрагента;
		
		Если ТекОперация.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
			
			ТекОперация.СтатьяБюджета = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
			
			Для Сч = 1 по 3 Цикл
				ТекОперация["Аналитика" + Сч] = ДокументОбъект["АналитикаБДДС" + Сч];
			КонецЦикла;
			
			Если ВидыАналитикСтатьиДДС.Количество() Тогда
				ЗаполнитьЗначенияСвойств(ТекОперация, ВидыАналитикСтатьиДДС[0]);
			КонецЕсли;
			
		Иначе
			
			ТекОперация.СтатьяБюджета = ДокументОбъект.ОсновнаяСтатьяИсполнение;
			
			Для Сч = 1 по 3 Цикл
				ТекОперация["Аналитика" + Сч] = ДокументОбъект["АналитикаИсполнение" + Сч];
			КонецЦикла;
			
			Если ВидыАналитикИсполнение.Количество() Тогда
				ЗаполнитьЗначенияСвойств(ТекОперация, ВидыАналитикИсполнение[0]);
			КонецЕсли;
			// По умолчанию установлен вид бюджета БДР. Но может быть выбрана статья бюджета закупок.
			// В этом случае сбросим бюджет.
			Если ТипЗнч(ДокументОбъект.ОсновнаяСтатьяИсполнение) = Тип("СправочникСсылка.СтатьиДвиженияРесурсов") Тогда
				ТекОперация.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыРасчетаГрафика() Экспорт
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("РежимРасчета", "ВесьГрафикОтДатыПервойОперации"); // "ВесьГрафикОтДатыПервойОперации", "ВесьГрафикОтДатыНачисления", "ТолькоПостоплата"
	ПараметрыРасчета.Вставить("ДатаОтсчета");
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ВыполнитьРасчетГрафика(Объект, СекцияГрафика, ОписаниеГрафика, ОперацииГрафика, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	// Уточнение. Коммерческий договор имеет единственную секцию. 
	// Параметр СекцияГрафика нужен для унификации с прочими видами договоров.
	СекцияГрафика = ОписаниеГрафика.ОсновнойДолг;
	
	ПроизводственныеКалендари = РаботаСДоговорамиКонтрагентовУХ.ПроизводственныеКалендариВерсииСоглашения(Объект);
	
	// нужно: Дата отсчета, производственный календарь
	Если Не ДополнительныеПараметры.Свойство("РежимРасчета") Или ДополнительныеПараметры.РежимРасчета = "ВесьГрафикОтДатыПервойОперации" Тогда
		
		// Определить дату начисления. Рассчитать все этапы оплаты. Добавить операцию начисления.
		Объект.ГрафикРасчетов.Очистить();
		
		БазоваяДата = РасчетГрафиковОперацийЕХ.ПолучитьДатуНачисленияПоДатеПервойОперацииСоглашения(ДополнительныеПараметры.ДатаОтсчета, Объект.Соглашение);
		ДобавитьНачисление(Объект.ГрафикРасчетов, БазоваяДата, Объект.Сумма, СекцияГрафика, ОперацииГрафика);
		ДобавитьОплату(Объект.ГрафикРасчетов, БазоваяДата, Объект.Сумма, Объект.Соглашение, СекцияГрафика, ОперацииГрафика);
		
	ИначеЕсли ДополнительныеПараметры.РежимРасчета = "ВесьГрафикОтДатыНачисления" Тогда
		
	ИначеЕсли ДополнительныеПараметры.РежимРасчета = "ТолькоПостоплата" Тогда
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Некорректный режим расчета'");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставленияКолонокГрафика() Экспорт
	
	ПредставленияКолонок = Новый Структура;
	
	ПредставленияКолонок.Вставить("Дата",					НСтр("ru = 'Дата'"));
	ПредставленияКолонок.Вставить("СуммаНачисление",		НСтр("ru = 'Начисление долга'"));
	ПредставленияКолонок.Вставить("СуммаОплата",			НСтр("ru = 'Оплата долга'"));
		
	Возврат ПредставленияКолонок;
	
КонецФункции

Функция ВыполнятьБюджетирование(Объект) Экспорт
	
	Возврат РаботаСДоговорамиКонтрагентовУХКлиентСервер.ФормироватьПозицииЗаявокПоГрафику(Объект);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Ссылка,
		|	Реквизиты.Дата КАК Дата,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяОплаты,
		|	Реквизиты.ОсновнаяСтатьяИсполнение КАК СтатьяНачисления,
		|	Реквизиты.ВалютаВзаиморасчетов КАК Валюта,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидДоговораУХ В (&ВидыДоговоровСПоставщиком)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|	КОНЕЦ КАК ПриходРасход,
		|	6 КАК ЗаполненностьДоговораЗаявки,
		|	НЕОПРЕДЕЛЕНО КАК ДокументПланирования,
		|	Реквизиты.РежимИспользованияГрафика КАК РежимИспользованияГрафика,
		|	Реквизиты.ПорядокРасчетов КАК ПорядокРасчетов,
		|	Реквизиты.СпособФормированияПлатежей КАК СпособФормированияПлатежей
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидыДоговоровСПоставщиком", РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровСПоставщиком());
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
		
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		Запрос.УстановитьПараметр(ТекРеквизит.Ключ, ТекРеквизит.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыборкуДляЗаписиДвиженийПланПоставокПоДоговорам(ДокументСсылка)
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ДокументСсылка.ВалютаВзаиморасчетов,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ДокументСсылка.Дата);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Дата КАК Период,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Количество * ВерсияСоглашенияКоммерческийДоговорНоменклатура.Коэффициент КАК Количество,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Коэффициент КАК Коэффициент,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Менеджер КАК Менеджер,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура КАК Номенклатура,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Организация КАК Организация,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Приоритет КАК Приоритет,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Проект КАК Проект,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Сумма КАК Сумма,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Цена КАК Цена,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Лот КАК Лот,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка.ДоговорКонтрагента КАК Договор,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Характеристика КАК Характеристика,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка.ВалютаВзаиморасчетов КАК Валюта		
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|ГДЕ
		|	(ВерсияСоглашенияКоммерческийДоговорНоменклатура.Количество <> 0
		|			ИЛИ ВерсияСоглашенияКоммерческийДоговорНоменклатура.Сумма <> 0)
		|	И ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",	ДокументСсылка.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Функция ПолучитьВыборкуДвиженийПланПоставокПоДоговорамДляСторнирования(ДокументОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Дата КАК Период,
		|	ПланПоставокПоДоговорамОбороты.Договор КАК Договор,
		|	ПланПоставокПоДоговорамОбороты.Приоритет КАК Приоритет,
		|	ПланПоставокПоДоговорамОбороты.Номенклатура КАК Номенклатура,
		|	ПланПоставокПоДоговорамОбороты.Характеристика КАК Характеристика,
		|	ПланПоставокПоДоговорамОбороты.ПериодПотребности КАК ПериодПотребности,
		|	ПланПоставокПоДоговорамОбороты.Организация КАК Организация,
		|	ПланПоставокПоДоговорамОбороты.МестоПоставки КАК МестоПоставки,
		|	ПланПоставокПоДоговорамОбороты.Проект КАК Проект,
		|	ПланПоставокПоДоговорамОбороты.Менеджер КАК Менеджер,
		|	ПланПоставокПоДоговорамОбороты.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОбороты.Лот КАК Лот,
		|	ПланПоставокПоДоговорамОбороты.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ПланПоставокПоДоговорамОбороты.КоличествоОборот) КАК Количество,
		|	СУММА(ПланПоставокПоДоговорамОбороты.СуммаОборот) КАК Сумма,
		|	СУММА(1) КАК Коэффициент,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.ЕдиницаИзмерения, &ПустаяЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	СУММА(ПланПоставокПоДоговорамОбороты.СуммаОборот) / ВЫБОР
		|		КОГДА СУММА(ПланПоставокПоДоговорамОбороты.КоличествоОборот) = 0
		|			ТОГДА 1
		|		ИНАЧЕ СУММА(ПланПоставокПоДоговорамОбороты.КоличествоОборот)
		|	КОНЕЦ КАК Цена,
		|	ПланПоставокПоДоговорамОбороты.Валюта КАК Валюта
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам.Обороты(, &Момент, Запись, Договор = &Договор) КАК ПланПоставокПоДоговорамОбороты
		|ГДЕ
		|	ПланПоставокПоДоговорамОбороты.Регистратор = &Основание
		|	И (ПланПоставокПоДоговорамОбороты.СуммаОборот > 0
		|			ИЛИ ПланПоставокПоДоговорамОбороты.КоличествоОборот > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланПоставокПоДоговорамОбороты.СтавкаНДС,
		|	ПланПоставокПоДоговорамОбороты.Лот,
		|	ПланПоставокПоДоговорамОбороты.ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОбороты.Менеджер,
		|	ПланПоставокПоДоговорамОбороты.Проект,
		|	ПланПоставокПоДоговорамОбороты.МестоПоставки,
		|	ПланПоставокПоДоговорамОбороты.ПериодПотребности,
		|	ПланПоставокПоДоговорамОбороты.Организация,
		|	ПланПоставокПоДоговорамОбороты.Характеристика,
		|	ПланПоставокПоДоговорамОбороты.Номенклатура,
		|	ПланПоставокПоДоговорамОбороты.Приоритет,
		|	ПланПоставокПоДоговорамОбороты.Договор,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.ЕдиницаИзмерения, &ПустаяЕдиницаИзмерения),
		|	ПланПоставокПоДоговорамОбороты.Валюта";
	Запрос.УстановитьПараметр("Договор", ДокументОбъект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Момент", Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения",
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьПустуюЕдиницуИзмерения());
	Запрос.УстановитьПараметр("Основание", ДокументОбъект.ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Процедура ДобавитьНачисление(График, Дата, Сумма, ОписаниеСекцииГрафика, ОперацииГрафика)
	
	ОписаниеОперации = РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(ОписаниеСекцииГрафика.КолонкаПриходОперация, ОперацииГрафика);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(График, Сумма, Дата,, ОписаниеОперации);
	
КонецПроцедуры

Процедура ДобавитьОплату(График, Дата, Сумма, Соглашение, ОписаниеСекцииГрафика, ОперацииГрафика)
	
	ОписаниеОперации = РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(ОписаниеСекцииГрафика.КолонкаРасходОперация, ОперацииГрафика);
	ЭтапыОплаты = РасчетГрафиковОперацийЕХ.ПолучитьГрафикЭтаповОплатыПоСоглашению(Сумма, Дата, Соглашение);
	
	Для Каждого ТекЭтапОплаты из ЭтапыОплаты Цикл
		
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(График, ТекЭтапОплаты.Сумма, ТекЭтапОплаты.Дата,, ОписаниеОперации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяТаблицыДокумента()
	Возврат "Документ.ВерсияСоглашенияКоммерческийДоговор";
КонецФункции

#КонецОбласти

#Область КонтрольНаличияПериодов
	
// Функция возвращает текст запроса, который формирует временную таблицу запроса ВТ_ДатыОпераций с колонками
//   Дата 		- Дата - Дата операции по документу
//	 ВидБюджета - ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета - Вид бюджета, по которому будет операция
// Текст запроса уникален для каждого вида документа
//
Функция ТексЗапроса_ДатыОперацийДокумента() экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ТекстЗапросаДатыОперацийДокумента(ИмяТаблицыДокумента());	
КонецФункции

#КонецОбласти 

#Область ИсточникиДляКонтроляДокумента

Функция ИсточникиДокумента(Объект, ДопПараметры = неопределено) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект, ДопПараметры));
		
	// 2. Планы по взаиморасчетам с контрагентом
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХВзаиморасчетыПоКонтрагенту, 
		Источник_ВзаиморасчетыПоКонтрагенту(Объект));
		
	Возврат Источники;
	
КонецФункции

Функция Источник_БюджетныеЛимитыРезервы(Объект, ДопПараметры) Экспорт
	
	// Доп.параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 				Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 			Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 			НЕ ЗначениеЗаполнено(Объект.Ссылка));
	ДопПараметры.Вставить("ДатаКонтроляЛимита", Объект.Дата);
	
	Если Объект.РежимИспользованияГрафика = Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций Тогда
		ДанныеДляПроверки = ПланыДокумента(Объект);
	Иначе
		ДанныеДляПроверки = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	КонецЕсли;
	
	//
	ДанныеДляПроверки.Колонки.Сумма.Имя = "Заявлено";
	ДанныеДляПроверки.Колонки.Добавить("Лимит", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Зарезервировано", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Исполнено", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.ЗаполнитьЗначения(Объект.Дата, "Период");
	
	//
	Источник = Новый Структура;
	Источник.Вставить("Параметры",		ДопПараметры);
	Источник.Вставить("ПланыДокумента", ДанныеДляПроверки);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоКонтрагенту(Объект)
	
	// Если незаполнен контрагент, то контроль не выполняется
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	// Если роль определить не удалось, то контроль не выполняется
	РольКонтрагента = РольПоВидуДоговораУХ()[Объект.ВидДоговораУХ];
	Если РольКонтрагента = неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	//
	Результат = Новый Структура;
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Контрагент", Объект.Контрагент);
	Результат.Вставить("СуммаПлатежа", Объект.Сумма);
	Результат.Вставить("Валюта", Объект.ВалютаВзаиморасчетов);
	Результат.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат Результат;
	
КонецФункции

Функция РольПоВидуДоговораУХ() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем, Перечисления.РолиКонтрагентов.Покупатели);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.Импорт, Перечисления.РолиКонтрагентов.Поставщики);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВерсияСоглашенияКоммерческийДоговор") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	ПредопределенныеДанные = Новый Структура(
		"Период, Организация, Контрагент, ДоговорКонтрагента", 
		ДанныеОбъекта.Дата, ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДоговорКонтрагента
	);
	
	//
	РеквизитыСтроки = "СтатьяБюджета, Валюта, ЦФО, Проект,"+АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	Для Каждого Строка Из ДанныеОбъекта.ГрафикРасчетов Цикл
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Предназначение = ПланыВидовХарактеристик.ВидыБюджетов.Предназначение(Строка.ВидБюджета);
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, Строка.Дата);
		
		СтрокаПлана = ТаблицаПланов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, ПредопределенныеДанные);
		ЗаполнитьЗначенияСвойств(СтрокаПлана, Строка, РеквизитыСтроки);
		
		СтрокаПлана.Сумма = Строка.Сумма;
		СтрокаПлана.ПериодОтчета =  ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Строка.Дата, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
		СтрокаПлана.ВидБюджета = Строка.ВидБюджета;
		СтрокаПлана.Предназначение = Предназначение;
		СтрокаПлана.ПриходРасход = Строка.НаправлениеДвижения;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЦФО) Тогда
			СтрокаПлана.ЦФО = ДанныеОбъекта.ОсновнойЦФО;
			СтрокаПлана.Проект = ДанныеОбъекта.ОсновнойПроект;
		КонецЕсли;
		
		Если Строка.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
			СтрокаПлана.ДокументРезервирования = ДанныеОбъекта.ИсточникЛимитовБДДС;
		Иначе
			СтрокаПлана.ДокументРезервирования = ДанныеОбъекта.ИсточникЛимитовИсполнение;
		КонецЕсли;
		СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
		
	КонецЦикла;
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК Ссылка,
	|	ВерсияСоглашенияКоммерческийДоговор.Дата КАК Дата,
	|	ВерсияСоглашенияКоммерческийДоговор.Организация КАК Организация,
	|	ВерсияСоглашенияКоммерческийДоговор.Контрагент КАК Контрагент,
	|	ВерсияСоглашенияКоммерческийДоговор.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВерсияСоглашенияКоммерческийДоговор.ОсновнойЦФО КАК ОсновнойЦФО,
	|	ВерсияСоглашенияКоммерческийДоговор.ОсновнойПроект КАК ОсновнойПроект,
	|	ВерсияСоглашенияКоммерческийДоговор.ИсточникЛимитовБДДС КАК ИсточникЛимитовБДДС,
	|	ВерсияСоглашенияКоммерческийДоговор.ИсточникЛимитовИсполнение КАК ИсточникЛимитовИсполнение,
	|	ВерсияСоглашенияКоммерческийДоговор.ГрафикРасчетов.(
	|		Дата КАК Дата,
	|		Валюта КАК Валюта,
	|		ВидБюджета КАК ВидБюджета,
	|		СтатьяБюджета КАК СтатьяБюджета,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6,
	|		ЦФО КАК ЦФО,
	|		Проект КАК Проект,
	|		Сумма КАК Сумма,
	|		НаправлениеДвижения КАК НаправлениеДвижения
	|	) КАК ГрафикРасчетов
	|ИЗ
	|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
	|ГДЕ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ГрафикРасчетов");
		Результат.ГрафикРасчетов = Выборка.ГрафикРасчетов.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиОбновленияИнформационнойБазы

#КонецОбласти

#КонецЕсли
