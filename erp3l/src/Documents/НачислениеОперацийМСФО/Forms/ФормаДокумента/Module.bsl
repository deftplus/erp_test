
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбъектОснование = Неопределено;

	Если Параметры.Свойство("Основание", ОбъектОснование) 
			И ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() 
			И ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка." + "ОперативныйПлан") Тогда
			
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДвиженияБюджетированиеКлиентСерверУХ");
		Если НЕ Модуль.ЭтоБюджетДвиженияРесурсов(ОбъектОснование.Предназначение) Тогда
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(
				НСтр("ru = 'Начисление операций МСФО можно создать только на основании Оперативного плана с видом бюджета """"Бюджет движения ресурсов""""!'"),
				,,,Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	ОрганизацияПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	РасчетСуммы("ВалютаУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПериодСценарияПриИзменении(Элемент)
	Объект.Дата = ОбщегоНазначенияУХ.ПолучитьКонецПериодаОтчета(Объект.ПериодСценария);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ДвиженияНачислений

&НаКлиенте
Процедура ДвиженияНачисленийПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДвиженияНачислений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ДвиженияНачисленийСубконтоДт1", "ДвиженияНачисленийСубконтоДт2", "ДвиженияНачисленийСубконтоДт3");
	МСФОКлиентСерверУХ.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ДвиженияНачисленийСубконтоКт1", "ДвиженияНачисленийСубконтоКт2", "ДвиженияНачисленийСубконтоКт3");
	МСФОКлиентСерверУХ.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийВалютаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДвиженияНачислений.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.ВалютаДт = ТекДанные.Валюта;
	ТекДанные.ВалютаКт = ТекДанные.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСчетДтПриИзменении(Элемент)	
	ОбработатьИзменениеСчета(ЭтаФорма, "Дт");	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСчетКтПриИзменении(Элемент)	
	ОбработатьИзменениеСчета(ЭтаФорма, "Кт");	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийВалютаДтПриИзменении(Элемент)
	РасчетСуммы("Дт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийЗначениеВалютаДтПриИзменении(Элемент)
	РасчетСуммы("Дт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийВалютаКтПриИзменении(Элемент)
	РасчетСуммы("Кт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийЗначениеВалютаКтПриИзменении(Элемент)
	РасчетСуммы("Кт");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ЭлементыСубконто

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоДт1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоДт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоДт3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоКт1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоКт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоКт3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияНачисленийСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)
	
	ЗаполнитьКэшируемыеЗначения(ЭтотОбъект);
	
	ПараметрыВыбораСчетаБД = МСФОУХ.ПолучитьПараметрыВыбораСчетаБД(КэшируемыеЗначения.ПланСчетовМСФО);
	Для каждого КлючСчет Из Новый Структура("СчетДт,СчетКт") Цикл		
		Элементы["ДвиженияНачислений" + КлючСчет.Ключ].ПараметрыВыбора = ПараметрыВыбораСчетаБД;
	КонецЦикла;	

	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКэшируемыеЗначения(Форма)
	
	Объект = Форма.Объект;
	
	Если Форма.КэшируемыеЗначения = Неопределено Тогда
		Форма.КэшируемыеЗначения = Новый Структура;
	КонецЕсли;
	
	Форма.КэшируемыеЗначения.Вставить("Организация",	Объект.Организация);
	Форма.КэшируемыеЗначения.Вставить("Сценарий", 	Объект.Сценарий);
	Форма.КэшируемыеЗначения.Вставить("Дата", 		Объект.Дата);
	
	МСФОУХ.ЗаполнитьРеквизитыОрганизации(Форма.КэшируемыеЗначения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачалоПериодаНаСервере(Период)
	Возврат НачалоДня(Период.ДатаНачала);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПериодСценария.Видимость = Не Форма.КэшируемыеЗначения.ФормироватьПроводкиМСФО;
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	// Субконто
	Для Сч = 1 По 3 Цикл

		// Видимость СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДвиженияНачислений.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


		// Выделение не заполненного СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДвиженияНачислений.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДвиженияНачислений.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		

		// Видимость СубконтоКт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДвиженияНачислений.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		

		// Выделение не заполненного СубконтоКт
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДвиженияНачислений.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДвиженияНачислений.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
	ЗависимостиВидимости = Новый Структура("ПодразделениеДт,ПодразделениеКт,НаправлениеДеятельностиДт,НаправлениеДеятельностиКт", "Подразделение", "Подразделение", "НаправлениеДеятельности", "НаправлениеДеятельности");
	
	Для каждого ТекЗависимость Из ЗависимостиВидимости Цикл
	
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачислений" + ТекЗависимость.Ключ);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДвиженияНачислений." + ТекЗависимость.Ключ + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;

	// Количество и валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийКоличествоДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийНадписьКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДвиженияНачислений.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйКоличествоКт, ХозрасчетныйНадписьКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийКоличествоКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийНадписьКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДвиженияНачислений.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ВалютаДт, ВалютнаяСуммаДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийВалютаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийЗначениеВалютаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДвиженияНачислений.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ВалютаКт, ВалютнаяСуммаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийВалютаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДвиженияНачисленийЗначениеВалютаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДвиженияНачислений.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ВалютныйДт", "КоличественныйДт");
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ВалютныйКт", "КоличественныйКт");

	Для каждого Проводка Из Объект.ДвиженияНачислений Цикл
		МСФОКлиентСерверУХ.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт);
		МСФОКлиентСерверУХ.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт);
		ЗаполнитьНадписиВПроводке(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьКэшируемыеЗначения(ЭтотОбъект);
	
	УправлениеФормой(ЭтаФорма);
	
	Для каждого Проводка Из Объект.ДвиженияНачислений Цикл
		СтруктураДанныхПроводки = СтруктураДанныхПроводки(Проводка);
		ПересчитатьСуммыПоДт(СтруктураДанныхПроводки, Объект.Дата, КэшируемыеЗначения.ФункциональнаяВалюта);
		ЗаполнитьПоСтруктуреДанныхПроводки(Проводка, СтруктураДанныхПроводки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции_Субконто

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Форма, ДтКт = "Дт")

	ИдСтроки = Форма.Элементы.ДвиженияНачислений.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.Объект.ДвиженияНачислений.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3,Подразделение,НаправлениеДеятельности");
	ПоляФормы.Субконто1 = "ДвиженияНачисленийСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "ДвиженияНачисленийСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "ДвиженияНачисленийСубконто" + ДтКт + "3";
	ПоляФормы.Подразделение = "ПодразделениеДт";
	ПоляФормы.НаправлениеДеятельности = "НаправлениеДеятельностиДт";
	
	МСФОКлиентСерверУХ.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт], Форма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Валютный,Количественный,Организация,Подразделение,НаправлениеДеятельности");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";
	ПоляОбъекта.Подразделение = "ПодразделениеКт";
	ПоляОбъекта.НаправлениеДеятельности = "НаправлениеДеятельностиКт";
	
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	ПоляОбъекта.Организация    = Форма.Объект.Организация;
	МСФОКлиентСерверУХ.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт], СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	ПересчетСуммыПоКурсуДт = (ДтКт = "Кт"); // пересчитать валютную сумму изменившегося счета на основании другой стороны
	СтруктураПроводки = СтруктураДанныхПроводки(СтрокаТаблицы);
	
	Если ДтКт = "Кт" Тогда
		ПересчитатьСуммыПоКт(СтруктураПроводки, Форма.Объект.Дата, Форма.КэшируемыеЗначения.ФункциональнаяВалюта);
	Иначе	
		ПересчитатьСуммыПоДт(СтруктураПроводки, Форма.Объект.Дата, Форма.КэшируемыеЗначения.ФункциональнаяВалюта);
	КонецЕсли;
	
	ЗаполнитьПоСтруктуреДанныхПроводки(СтрокаТаблицы, СтруктураПроводки);
		
	ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт);
	
	ЗаполнитьНадписиВПроводке(СтрокаТаблицы);
	
	ЗаполнитьСторонуПроводкиИзШапки(Форма, ДтКт, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСторонуПроводкиИзШапки(Форма, ДтКт = "Дт", СтрокаТаблицы)

	Объект = Форма.Объект;
	
	ТипКонтрагент = Тип("СправочникСсылка.Контрагенты");
	ТипДоговор = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	
	ТекСчет = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СтрокаТаблицы["Счет" + ДтКт]);
	
	Для НомерСубконто = 1 По 3 Цикл
		
		Постфикс = Строка(ДтКт + НомерСубконто);
		
		Если Не СтрокаТаблицы["Субконто" + Постфикс + "Доступность"] Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы["Субконто" + Постфикс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееОТ = ТекСчет["ВидСубконто" + НомерСубконто + "ТипЗначения"];
		Если Не ЗначениеЗаполнено(ТекущееОТ) Тогда
			Продолжить;
		КонецЕсли;		
		
		Если ТекущееОТ.СодержитТип(ТипКонтрагент) И Не Объект.Контрагент.Пустая() Тогда
			СтрокаТаблицы["Субконто" + Постфикс] = Объект.Контрагент;
		ИначеЕсли ТекущееОТ.СодержитТип(ТипДоговор) И Не Объект.ДоговорКонтрагента.Пустая() Тогда
			СтрокаТаблицы["Субконто" + Постфикс] = Объект.ДоговорКонтрагента;
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "")
	
	ИдСтроки = Форма.Элементы.ДвиженияНачислений.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.Объект.ДвиженияНачислений.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "ДвиженияНачисленийСубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "ДвиженияНачисленийСубконтоКт%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета) 

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоДт(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности = Неопределено)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
				
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, ФункциональнаяВалюта);
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, ВалютаОтчетности);
		Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, Проводка.ВалютаКт);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0)Тогда
		
		ПересчитатьСуммыПоКт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	Иначе 
		
		Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
			Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда
			Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
		КонецЕсли;
				
		ПересчитатьСуммыПоВалютеУчета(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоКт(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности = Неопределено)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0) Тогда
		
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, ФункциональнаяВалюта);
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, ВалютаОтчетности);
		Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, Проводка.ВалютаДт);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
		
		ПересчитатьСуммыПоДт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	Иначе 
		
		Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
			Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда
			Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
		КонецЕсли;
		
		ПересчитатьСуммыПоВалютеУчета(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхПроводки(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,СуммаВВалютеДт,
		|СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,СуммаВВалютеКт,
		|СуммаВВалютеУчета,СуммаВВалютеОтчетности,Содержание");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);
	
	СтруктураПроводки.Вставить("СуммаВВалютеДт", 	ТекущиеДанные.ЗначениеВалютаДт);
	СтруктураПроводки.Вставить("СуммаВВалютеКт",	ТекущиеДанные.ЗначениеВалютаКт);
	СтруктураПроводки.Вставить("СуммаВВалютеУчета", ТекущиеДанные.Значение);

	Возврат СтруктураПроводки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоСтруктуреДанныхПроводки(СтрокаТаб, СтруктураПроводки)
	
	ЗаполнитьЗначенияСвойств(СтрокаТаб, СтруктураПроводки);
	
	СтрокаТаб.ЗначениеВалютаДт 	= СтруктураПроводки.СуммаВВалютеДт;
	СтрокаТаб.ЗначениеВалютаКт 	= СтруктураПроводки.СуммаВВалютеКт;
	СтрокаТаб.Значение			= СтруктураПроводки.СуммаВВалютеУчета;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоВалютеУчета(Проводка, Знач Дата, ФункциональнаяВалюта, ВалютаОтчетности = Неопределено)
	
	Если ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
		
		Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
		ПересчитатьСуммыПоДт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0) Тогда
		
		Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
		ПересчитатьСуммыПоКт(Проводка, Дата, ФункциональнаяВалюта, ВалютаОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(ИсточникПересчета = "Дт")
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.ДвиженияНачислений.ТекущиеДанные;
	СтруктураПроводки = СтруктураДанныхПроводки(ТекущиеДанные);
	
	Если ИсточникПересчета = "Дт" Тогда	
		
		ПересчитатьСуммыПоДт(СтруктураПроводки, Объект.Дата, КэшируемыеЗначения.ФункциональнаяВалюта);
		
	ИначеЕсли ИсточникПересчета = "Кт" Тогда	
		
		ПересчитатьСуммыПоКт(СтруктураПроводки, Объект.Дата, КэшируемыеЗначения.ФункциональнаяВалюта);
		
	ИначеЕсли ИсточникПересчета = "ВалютаУчета" Тогда
		
		ПересчитатьСуммыПоВалютеУчета(СтруктураПроводки, Объект.Дата, КэшируемыеЗначения.ФункциональнаяВалюта);
		
	КонецЕсли;
		
	ЗаполнитьПоСтруктуреДанныхПроводки(Элементы.ДвиженияНачислений.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.ДвиженияНачислений.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	МСФОКлиентСерверУХ.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата, Знач ВалютаКон)
	
	Если Не ЗначениеЗаполнено(ВалютаКон) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютнаяСумма) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РаботаСКурсамиВалютУХ.ПересчитатьВВалюту(ВалютнаяСумма, Валюта, ВалютаКон, Дата);
	
КонецФункции

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокумент(РезультатВопроса = Неопределено, ДанныеЗаполнения) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		Возврат;	
	КонецЕсли;
    
    ЗаполнитьДокумент(ДанныеЗаполнения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
