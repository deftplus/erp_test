
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("Автотест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	АдресГрафикиДоговора = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ИзменениеУсловийДоговораАренды.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройкиСчетаУчета = Документы.ИзменениеУсловийДоговораАренды.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройкиСчетаУчета);
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыВыбораСтатейИАналитик = Документы.ИзменениеУсловийДоговораАренды.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	ПараметрыНастройки = Документы.ИзменениеУсловийДоговораАренды.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	#Область УХ_Встраивание
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(ЭтотОбъект);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ИзменениеУсловийДоговораАренды", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	#Область УХ_Встраивание
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОсновное

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьСлужебныеПараметрыФормы();
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	ЗаполнитьПоДоговору();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	ЗаполнитьПоДоговору();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ЗаполнитьПоДоговору();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияВРеглУчетеРасходыНажатие(Элемент, СтандартнаяОбработка)
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СтраницаУсловияАренды

&НаКлиенте
Процедура СуммаОбеспечительногоПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПервогоОбеспечительногоПлатежаПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаУслугПоАренде(Элемент)
	
	СуммаУслугПоАрендеПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПервогоПлатежаПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыкупаПредметовАрендыПриИзменении(Элемент)
	
	СуммаВыкупаПредметовАрендыПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СрокАрендыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ВнеоборотныеАктивыКлиент.ВвестиСрокАренды(
		ЭтотОбъект, 
		Объект,
		Новый ОписаниеОповещения("ВвестиСрокАрендыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОплатПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
		Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьНачисленийПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений) Тогда
		Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаУслугиПоАрендеПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = Элемент.Имя;
	
	Если Объект.ПериодичностьОплат = Объект.ПериодичностьНачислений
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И Объект.НачислениеУслугиПоАренде = 0
		И Объект.ОплатаУслугиПоАренде <> 0 Тогда
			
		Объект.НачислениеУслугиПоАренде = Объект.ОплатаУслугиПоАренде;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",НачислениеУслугиПоАренде";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);

КонецПроцедуры

&НаКлиенте
Процедура НачислениеУслугиПоАрендеПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = Элемент.Имя;
	
	Если Объект.ПериодичностьОплат = Объект.ПериодичностьНачислений
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И Объект.ОплатаУслугиПоАренде = 0
		И Объект.НачислениеУслугиПоАренде <> 0 Тогда
			
		Объект.ОплатаУслугиПоАренде = Объект.НачислениеУслугиПоАренде;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ОплатаУслугиПоАренде";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);

КонецПроцедуры

&НаКлиенте
Процедура ПодвалИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ЗаполнитьГрафик" Тогда
		ЗаполнитьГрафикПоРасчетам();		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ЗаполнитьРасчетыПоГрафику" Тогда
		ЗаполнитьРасчетыПоГрафику();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами


#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТолькоПросмотр 
		И Поле = Элементы.ОСОсновноеСредство
		И ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ОсновноеСредствоПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОССправедливаяСтоимостьПриИзменении(Элемент)
	
	РассчитатьСтоимостьОС();
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОСНегарантированнаяСтоимостьПриИзменении(Элемент)
	
	РассчитатьСтоимостьОС();
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикОплат(Команда)
	
	ОткрытьГрафикОплатИНачислений("ГрафикОплатУслуг");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикНачислений(Команда)
	
	ОткрытьГрафикОплатИНачислений("ГрафикНачисленияУслуг");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикНачисленияПроцентов(Команда)
	
	ОткрытьГрафикОплатИНачислений("ГрафикНачисленияПроцентов");

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтавкуИлиСтоимость(Команда)
	
	Если ВнеоборотныеАктивыКлиент.МожноРассчитатьСтавкуИлиСтоимость(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора, "ОС") Тогда
		РассчитатьСтавкуСтоимостьПроцентыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАрендованными(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать договор';
								|en = 'Select a contract'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Договор", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.ОС.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить список предметов аренды по договору?';
							|en = 'Populate the list of lease objects under the contract?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАрендованнымиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьАрендованнымиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты)
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Знач Форма, Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СлужебныеПараметрыФормы = Форма.СлужебныеПараметрыФормы;
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ИспользуетсяУправлениеВНА_2_4", СлужебныеПараметрыФормы.ИспользуетсяУправлениеВНА_2_4);
	ВспомогательныеРеквизиты.Вставить("ИспользуетсяУчетАрендыПоФСБУ25_2018", СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018);
	ВспомогательныеРеквизиты.Вставить("НачалоУчетаАрендыПоФСБУ25_2018", СлужебныеПараметрыФормы.НачалоУчетаАрендыПоФСБУ25_2018);
	ВспомогательныеРеквизиты.Вставить("РеквизитыДоговора", СлужебныеПараметрыФормы.РеквизитыДоговора);
	ВспомогательныеРеквизиты.Вставить("НезначащаяСтавкаНДС", СлужебныеПараметрыФормы.НезначащаяСтавкаНДС);
	ВспомогательныеРеквизиты.Вставить("ВалютаУпр", СлужебныеПараметрыФормы.ВалютаУпр);
	ВспомогательныеРеквизиты.Вставить("ВалютаРегл", СлужебныеПараметрыФормы.ВалютаРегл);
	ВспомогательныеРеквизиты.Вставить("ВалютыСовпадают", СлужебныеПараметрыФормы.ВалютаУпр = СлужебныеПараметрыФормы.ВалютаРегл);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВОперативномУчете", Истина);
	ВспомогательныеРеквизиты.Вставить("ВерсияДокумента24", Ложь);
	ВспомогательныеРеквизиты.Вставить("ИмяТабличнойЧастиОС", "ОС");

	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийДоговораАренды(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
									
	ОбщегоНазначенияУТКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ОбщегоНазначенияУТКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта, "ОС,ГрафикОплатУслуг,ГрафикНачисленияУслуг,ГрафикНачисленияПроцентов");
	КонецЕсли;
	
	УчетЗаБалансом = (СлужебныеПараметрыФормы.РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель"));
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		Элементы.Комментарий.МаксимальнаяШирина = 
			?(СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 ИЛИ НЕ УчетЗаБалансом, 67, 75);
	КонецЕсли;
	
	#КонецОбласти

	#Область СтраницаОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Элементы.ОССправедливаяСтоимость.Видимость
			И Элементы.ОСНегарантированнаяСтоимость.Видимость;
			
		Элементы.ОСГруппаСтоимость.ОтображатьЗаголовок = ЗначениеСвойства;
		Элементы.ОСГруппаСтоимость.ОтображатьВШапке = ЗначениеСвойства;
	КонецЕсли;

	#КонецОбласти
			
	#Область ГруппаПодвал
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗакупкаОблагаетсяНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаЗакупки(РеквизитыДоговора.НалогообложениеНДС);
		
		Если ЗакупкаОблагаетсяНДС Тогда
			Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаСНДС;
			Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоСНДС;
		Иначе
			Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаБезНДС;
			Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоБезНДС;
		КонецЕсли;
	
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы_Аренда(Форма, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	#Область Прочее
	
	Если ОбновитьВсе Тогда
		
		Если НЕ СлужебныеПараметрыФормы.ИспользоватьУчетНДС Тогда
			Элементы.СуммаНДСВалюта.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ ОбновитьВсе Тогда
		
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"НачалоУчетаАрендыПоФСБУ25_2018",
			ВнеоборотныеАктивы.НачалоУчетаАрендыПоФСБУ25_2018(Объект.Организация),
			СлужебныеПараметрыФормы);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата") Тогда
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ИспользуетсяУправлениеВНА_2_4",
			ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") Тогда
		
		ЗначениеПараметра = 
			ВнеоборотныеАктивы.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, Объект.Дата)
			ИЛИ ВнеоборотныеАктивы.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, КонецМесяца(Объект.Дата)+1);
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ИспользуетсяУчетАрендыПоФСБУ25_2018",
			ЗначениеПараметра,
			СлужебныеПараметрыФормы);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СтавкаНДС") Тогда
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"НезначащаяСтавкаНДС",
			УчетНДСУП.НезначащаяСтавка(Объект.СтавкаНДС),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;

	#КонецОбласти

	#Область ЗаголовкиЭлементов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
		
		ПредставлениеРеквизитов = Документы.ЗаключениеДоговораАренды.ПредставлениеРеквизитов(
			РеквизитыДоговора.Балансодержатель,
			РеквизитыДоговора.ТипДоговора,
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018);
			
		ВалютаДокументаПредставление = Строка(Объект.Валюта);
		
		Если СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
		
			Элементы.ОСГруппаСтоимость.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
					НСтр("ru = 'Стоимость по договору';
						|en = 'Cost as per contract'"), 
					ВалютаДокументаПредставление);
			
			Если РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговоровАренды.Лизинг
				ИЛИ РеквизитыДоговора.СпособОпределенияСтоимостиАктивов <> Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
					
				Элементы.ОССтоимость.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
					ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок"), 
					ВалютаДокументаПредставление);
			Иначе
				Элементы.ОССтоимость.Заголовок = ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок");
			КонецЕсли;
			
		Иначе
		
			Если РеквизитыДоговора.Балансодержатель = Перечисления.БалансодержательПредметовАренды.Арендодатель Тогда
				
				Элементы.ОССтоимость.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
						ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок"), 
						СлужебныеПараметрыФормы.ВалютаРеглПредставление);
						
			Иначе
				
				Элементы.ОССтоимость.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
						ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок"), 
						ВалютаДокументаПредставление);
						
			КонецЕсли;
		
		КонецЕсли;
		
		Элементы.ОССтоимостьБУ.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
			НСтр("ru = 'БУ';
				|en = 'AC'"), 
			СлужебныеПараметрыФормы.ВалютаРеглПредставление);
		
		Элементы.ОССтоимостьНУ.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
			НСтр("ru = 'НУ';
				|en = 'TA'"), 
			СлужебныеПараметрыФормы.ВалютаРеглПредставление);
		
		Элементы.ОССтоимостьУУ.Заголовок = ВнеоборотныеАктивыСлужебный.ДобавитьКСтрокеВалюту(
			НСтр("ru = 'УУ';
				|en = 'MA'"), 
			СлужебныеПараметрыФормы.ВалютаУпрПредставление);
		
		Элементы.ОССтоимость.Подсказка = ПредставлениеРеквизитов.Получить("ОС.Стоимость_Подсказка");
	
	КонецЕсли;
	
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов)

	Возврат СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор");

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Дата");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация,Договор");
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Договор = Справочники.ДоговорыАренды.ДоговорПоУмолчанию(
				Объект.Организация, Объект.Партнер, Объект.Контрагент, Объект.Договор);
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	ДобавитьРеквизитыДоговораВСлужебныеПараметрыФормы();
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ВалютаВзаиморасчетов = Неопределено;
		Объект.Валюта = Неопределено;
	КонецЕсли;
	
	Если Объект.ОС.Количество() = 0 
		И Объект.СуммаСНДС = 0 
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьНаОснованииДоговораАренды(Объект);
	Иначе
		ЗаполнитьПоДоговору = Истина;
	КонецЕсли;
	
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	Объект.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Объект.Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
	ВалютаДокумента = Объект.Валюта;
	
	ЗаполнитьСлужебныеРеквизитыТЧ();

	НастроитьЗависимыеЭлементыФормыНаСервере("Договор");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговору()

	Если НЕ ЗаполнитьПоДоговору ИЛИ НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить документ по договору?';
						|en = 'Fill in the document under the contract?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДоговоруЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	ЗаполнитьПоДоговору = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДоговоруНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДоговоруНаСервере()
		
	Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьНаОснованииДоговораАренды(Объект);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыДоговораВСлужебныеПараметрыФормы()
	
	РеквизитыДоговора = ВнеоборотныеАктивыСлужебный.РеквизитыДоговораАренды(Объект.Договор);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаключениеДоговораАренды.НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПервых(, Договор = &Договор) КАК УсловияДоговоровАрендыСрезПервых
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|		ПО ЗаключениеДоговораАренды.Ссылка = УсловияДоговоровАрендыСрезПервых.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НалогообложениеНДС = Выборка.НалогообложениеНДС;
	Иначе
		НалогообложениеНДС = Неопределено;
	КонецЕсли;
	
	РеквизитыДоговора.Вставить("НалогообложениеНДС", НалогообложениеНДС);
			
	ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
		"РеквизитыДоговора",
		РеквизитыДоговора,
		СлужебныеПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура СуммаУслугПоАрендеПриИзмененииНаСервере()
	
	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	НастроитьЗависимыеЭлементыФормыНаСервере("СуммаУслугПоАренде");
	
КонецПроцедуры

&НаСервере
Процедура СуммаВыкупаПредметовАрендыПриИзмененииНаСервере()

	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	ПересчитатьСуммуНДСВыкупаПредметовАренды(Объект);

	НастроитьЗависимыеЭлементыФормыНаСервере("СуммаВыкупаПредметовАренды");
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере()
	
	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	ПересчитатьСуммуНДСВыкупаПредметовАренды(Объект);

	Объект.ПриведеннаяСтоимость = ПриведеннаяСтоимость(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);

	НастроитьЗависимыеЭлементыФормыНаСервере("СтавкаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьОС()

	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.Стоимость = ТекущиеДанные.СправедливаяСтоимость - ТекущиеДанные.НегарантированнаяСтоимость;
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеСредствоПриИзмененииНаСервере()

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетСумм

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуДоговораИСуммуНДС(Объект)
	
	ВнеоборотныеАктивыКлиентСервер.ПересчитатьСуммуДокументаАренды(Объект);
	ВнеоборотныеАктивыКлиентСервер.ПересчитатьСуммуНДСВДокументеАренды(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДСВыкупаПредметовАренды(Объект)
	
	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(Объект.СтавкаНДС);
	Объект.СуммаНДСВыкупаПредметовАренды = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(Объект.СуммаВыкупаПредметовАренды, ТекПроцентНДС, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	#Область УХ_Встраивание
	// Уже установлено наше условное оформление
	//УсловноеОформление.Элементы.Очистить();
	#КонецОбласти
	
	ИзменениеУсловийДоговораАрендыЛокализация.УстановитьУсловноеОформление(ЭтотОбъект);
	
	#Область ОССтоимость_Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССтоимость.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтоимостьРассчитываетсяАвтоматически");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.Стоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<рассчитывается автоматически>';
																|en = '<calculated automatically>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ДоступностьУУ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССтоимостьУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССрокИспользованияУУ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуУУ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не принято к учету>';
																|en = '<not recognized>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеПараметрыФормы()

	НовыеСлужебныеПараметрыФормы = Новый Структура;
	НовыеСлужебныеПараметрыФормы.Вставить("Балансодержатель", Неопределено);

	ЗначениеПараметра = ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата);
	НовыеСлужебныеПараметрыФормы.Вставить("ИспользуетсяУправлениеВНА_2_4", ЗначениеПараметра);

	ЗначениеПараметра = ВнеоборотныеАктивы.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, Объект.Дата);
	НовыеСлужебныеПараметрыФормы.Вставить("ИспользуетсяУчетАрендыПоФСБУ25_2018", ЗначениеПараметра);

	ЗначениеПараметра = ВнеоборотныеАктивы.НачалоУчетаАрендыПоФСБУ25_2018(Объект.Организация);
	НовыеСлужебныеПараметрыФормы.Вставить("НачалоУчетаАрендыПоФСБУ25_2018", ЗначениеПараметра);

	ЗначениеПараметра = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	НовыеСлужебныеПараметрыФормы.Вставить("ВедетсяРегламентированныйУчетВНА", ЗначениеПараметра);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаУпр", ВалютаУпр);
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаРегл", ВалютаРегл);
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаУпрПредставление", Строка(ВалютаУпр));
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаРеглПредставление", Строка(ВалютаРегл));
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютыСовпадают", ВалютаУпр = ВалютаРегл);
	
	НовыеСлужебныеПараметрыФормы.Вставить("ИспользоватьУчетНДС", ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	НовыеСлужебныеПараметрыФормы.Вставить("НезначащаяСтавкаНДС", УчетНДСУП.НезначащаяСтавка(Объект.СтавкаНДС));
	
	СлужебныеПараметрыФормы = Новый ФиксированнаяСтруктура(НовыеСлужебныеПараметрыФормы);

	ДобавитьРеквизитыДоговораВСлужебныеПараметрыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()

	ЗаполнитьСлужебныеПараметрыФормы();
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИнициализацияФормыПриСозданииНаСервере();
	
	ВалютаДокумента = Объект.Валюта;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	#Область УХ_Встраивание
	ВстраиваниеУХДоговорыАренды.ПриЧтенииСозданииНаСервере_УсловияДоговораАренды(ЭтотОбъект);
	КонтрольУХ.ПодготовитьФормунаСервере(ЭтотОбъект, Элементы.ГруппаСтраницы);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикОплатИНачислений(ИмяГрафика)
	
	ВнеоборотныеАктивыКлиент.ОткрытьГрафикОплатИНачислений(
		Объект, 
		ЭтотОбъект, 
		ПоместитьГрафикиВоВременноеХранилище(), 
		Новый ОписаниеОповещения("ОткрытьГрафикОплатИНачисленийЗавершение", ЭтотОбъект), 
		ИмяГрафика);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьГрафикиВоВременноеХранилище()

	ГрафикиДоговора = Новый Структура;
	ГрафикиДоговора.Вставить("ГрафикНачисленияУслуг", Объект.ГрафикНачисленияУслуг.Выгрузить());
	ГрафикиДоговора.Вставить("ГрафикОплатУслуг", Объект.ГрафикОплатУслуг.Выгрузить());
	ГрафикиДоговора.Вставить("ГрафикНачисленияПроцентов", Объект.ГрафикНачисленияПроцентов.Выгрузить());

	Адрес = ПоместитьВоВременноеХранилище(ГрафикиДоговора, АдресГрафикиДоговора);
		
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьГрафикОплатИНачисленийЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт

	Если НЕ ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		Возврат
	КонецЕсли;

	ОткрытьГрафикОплатИНачисленийЗавершениеНаСервере(РезультатЗакрытия);
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОткрытьГрафикОплатИНачисленийЗавершениеНаСервере(Знач РезультатЗакрытия)
	
	Модифицированность = Истина;

	ГрафикиДоговора = ПолучитьИзВременногоХранилища(РезультатЗакрытия);

	Объект.ГрафикНачисленияПроцентовВведенВручную = ГрафикиДоговора.ГрафикНачисленияПроцентовВведенВручную;
	Объект.СуммаПроцентов = ГрафикиДоговора.СуммаПроцентов;
	Объект.ГрафикОплатУслуг.Загрузить(ГрафикиДоговора.ГрафикОплатУслуг);
	Объект.ГрафикНачисленияУслуг.Загрузить(ГрафикиДоговора.ГрафикНачисленияУслуг);
	Объект.ГрафикНачисленияПроцентов.Загрузить(ГрафикиДоговора.ГрафикНачисленияПроцентов);
	
	ВнеоборотныеАктивыКлиентСервер.ПересчитатьСуммуНДСВДокументеАренды(Объект);

	Объект.ПриведеннаяСтоимость = ПриведеннаяСтоимость(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);

	НастроитьЗависимыеЭлементыФормыНаСервере(
		"ГрафикОплатУслуг,ГрафикНачисленияУслуг,ГрафикНачисленияПроцентов,ГрафикНачисленияПроцентовВведенВручную");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтавкуСтоимостьПроцентыНаСервере()

	Документы.ИзменениеУсловийДоговораАренды.РассчитатьСтавкуСтоимостьПроценты(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ОССправедливаяСтоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАрендованнымиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ЗаполнитьАрендованнымиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАрендованнымиНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОС.Очистить();
	
	ТекстыПакетаЗапросов = Новый Массив;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Стоимость КАК Стоимость
	|ПОМЕСТИТЬ втАрендованныеОС
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(&Дата) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Договор = &Договор
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	ТекстыПакетаЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ИзменениеУсловийДоговораАрендыЛокализация.ТекстЗапросаЗаполнениеТЧПоДоговору();
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =	
		"ВЫБРАТЬ
		|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	АрендованныеОС.Стоимость КАК Стоимость,
		|	ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0) КАК СтоимостьУУ,
		|	ЕСТЬNULL(СтоимостьОС.СтоимостьРеглОстаток, 0) КАК СтоимостьБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.СрокИспользования, 0) КАК СрокИспользованияУУ
		|ИЗ
		|	втАрендованныеОС КАК АрендованныеОС
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(
		|			&ПериодГраница, 
		|			Организация = &Организация
		|				И ОсновноеСредство В (
		|					ВЫБРАТЬ 
		|						втАрендованныеОС.ОсновноеСредство 
		|					ИЗ 
		|						втАрендованныеОС КАК втАрендованныеОС)) КАК СтоимостьОС
		|		ПО СтоимостьОС.ОсновноеСредство = АрендованныеОС.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
		|			&Дата, 
		|			Регистратор <> &Ссылка
		|				И ОсновноеСредство В (
		|					ВЫБРАТЬ 
		|						втАрендованныеОС.ОсновноеСредство 
		|					ИЗ 
		|						втАрендованныеОС КАК втАрендованныеОС)) КАК ПараметрыАмортизацииОСУУ
		|		ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = АрендованныеОС.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	АрендованныеОС.ОсновноеСредство.Наименование,
		|	АрендованныеОС.ОсновноеСредство.ИнвентарныйНомер";
	КонецЕсли;
	ТекстыПакетаЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыПакетаЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

	ДатаДок = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Дата", ДатаДок);
	Запрос.УстановитьПараметр("ПериодГраница", Новый Граница(Новый МоментВремени(ДатаДок, Объект.Ссылка), ВидГраницы.Исключая));
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОС.Загрузить(Результат[Результат.ВГраница()].Выгрузить());
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикПоРасчетам()
	
	Если (Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат))
		И (Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений)) Тогда
				
		Возврат;
	КонецЕсли;
	
	Если ВнеоборотныеАктивыКлиент.ПроверитьВозможностьЗаполненияГрафикаПоРасчетам(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора) Тогда
		
		РассчитатьСтавкуИлиСтоимость = ВнеоборотныеАктивыКлиент.МожноРассчитатьСтавкуИлиСтоимость(
			Объект, СлужебныеПараметрыФормы.РеквизитыДоговора, "ОС", Ложь);
		
		ЗаполнитьГрафикПоРасчетамНаСервере(РассчитатьСтавкуИлиСтоимость);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикПоРасчетамНаСервере(Знач РассчитатьСтавкуИлиСтоимость)
	
	Модифицированность = Истина;

	ВнеоборотныеАктивы.ЗаполнитьГрафикОплатИНачисленийПоРасчетам(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	
	Объект.ПриведеннаяСтоимость = ПриведеннаяСтоимость(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);

	Если РассчитатьСтавкуИлиСтоимость Тогда
		РассчитатьСтавкуСтоимостьПроцентыНаСервере();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ГрафикОплатУслуг,ГрафикНачисленияУслуг");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетыПоГрафику()
	
	Модифицированность = Истина;

	ВнеоборотныеАктивы.ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	
	ИзмененныеРеквизиты = 
	"СуммаОбеспечительногоПлатежа,ДатаПервогоОбеспечительногоПлатежа,
	|СуммаУслугПоАренде,ДатаПервогоПлатежа,
	|СуммаВыкупаПредметовАренды,СуммаНДСВыкупаПредметовАренды,
	|СуммаНДС,
	|ПериодичностьОплат,ОплатаУслугиПоАренде,
	|ПериодичностьНачислений,НачислениеУслугиПоАренде";

	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСрокАрендыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы("ДатаНачалаАренды,СрокЛет,СрокМес,СрокДней");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧ()
	
	СписокОС = Новый Массив;
	Для Каждого ДанныеСтроки Из Объект.ОС Цикл
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
			СписокОС.Добавить(ДанныеСтроки.ОсновноеСредство);
		КонецЕсли;
		
		ДанныеСтроки.ПринятКУчетуУУ = Ложь;
		ДанныеСтроки.ПринятКУчетуБУ = Ложь;
		ДанныеСтроки.ПринятКУчетуНУ = Ложь;
		
	КонецЦикла;
	
	Если СписокОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ИзменениеУсловийДоговораАрендыЛокализация.ТекстЗапросаДляЗаполненияСлужебныхРеквизитовТЧ();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СпрОбъектыЭксплуатации.Ссылка,
		|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК ПринятКУчетуУУ
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК СпрОбъектыЭксплуатации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО ПорядокУчетаОСУУ.ОсновноеСредство = СпрОбъектыЭксплуатации.Ссылка
		|ГДЕ
		|	СпрОбъектыЭксплуатации.Ссылка В (&СписокОС)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СписокРеквизитов = "ПринятКУчетуУУ";
	Для Каждого Колонка Из Результат.Колонки Цикл
		Если Колонка.Имя <> "Ссылка" И Колонка.Имя <> "ПринятКУчетуУУ" Тогда
			СписокРеквизитов = СписокРеквизитов + "," + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	СостоянияОС = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ДанныеСостояние = Новый Структура(СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(ДанныеСостояние, Выборка);
		СостоянияОС.Вставить(Выборка.Ссылка, ДанныеСостояние);
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.ОС Цикл
		
		ДанныеСостояние = СостоянияОС.Получить(ДанныеСтроки.ОсновноеСредство);
		
		Если ДанныеСостояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСостояние);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПриведеннаяСтоимость(Объект, РеквизитыДоговора)

	СтоимостьПредметовАренды = ВнеоборотныеАктивыКлиентСервер.СтоимостьПредметовАренды(
		Объект, РеквизитыДоговора, "ОС");
	
	ПриведеннаяСтоимость = ВнеоборотныеАктивыКлиентСервер.ПриведеннаяСтоимость(
									СтоимостьПредметовАренды, 
									Объект.ГрафикОплатУслуг, 
									Объект.ДатаНачалаАренды);
	Возврат ПриведеннаяСтоимость;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УХ_Встраивание

#Область УХ_ВызовыОбщихПроцедурИФункцийСогласованияОбъектов

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ВстраиваниеОПКПереопределяемый.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаПриИзменении_Подключаемый()
	НовоеЗначениеСтатуса = РеквизитСтатусОбъекта(ЭтаФорма);
	ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатуса);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

#КонецОбласти

#Область УХ_КонтрольДокумента

&НаКлиенте
Процедура ВыполнитьКомандуУХ(Команда)
	
	Если Команда.Имя = "ВыполнитьКонтрольДокумента" Тогда
		ВыполнитьКонтрольДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтрольДокумента()
	ВыполнитьКонтрольДокументаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКонтрольДокумента()
	ПодключитьОбработчикОжидания("Подключаемый_КонтрольДокумента", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольДокументаНаСервере()
	КонтрольУХ.ВыполнитьИнтерактивныйКонтроль(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД =  Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонтрольУХКлиент.ПоказатьРасшифровкуКонтроля(Объект, ТД);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_НадписьДокументЗаблокированНажатие(Элемент)
	
	Объект.ТолькоГрафикиРасчетовУХ = Ложь;
	Элементы.НадписьДокументЗаблокирован.Видимость = Ложь;
	ТолькоПросмотр = Ложь;
	
КонецПроцедуры

#Область УХ_ПараметрыОперацийГрафика
&НаКлиенте
Процедура Подключаемый_НастроитьПараметрыОперацийУХ(Команда)
	
	ПараметрыКоманды = ДанныеОткрытияПараметровОперацийГрафика();			
	ДоговорыКонтрагентовФормыУХКлиент.ОткрытьПараметрыОперацийГрафика(ЭтотОбъект, ПараметрыКоманды);	
	
КонецПроцедуры

&НаСервере
Функция ДанныеОткрытияПараметровОперацийГрафика()	
	Возврат ВстраиваниеУХДоговорыАренды.ДанныеОткрытияПараметровОперацийГрафика(ЭтотОбъект);	
КонецФункции

&НаКлиенте
Процедура ЗавершитьНастройкуОпераций(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ЗагрузитьНастройкиОпераций(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОпераций(Адрес)	
	ВстраиваниеУХДоговорыАренды.ЗагрузитьПараметрыОперацийГрафика(ЭтотОбъект, Адрес);
КонецПроцедуры
#КонецОбласти

#КонецОбласти
