Перем НужнаИнициализация;

Процедура ВозвратОтчетаНаДоработку(ТекстСообщения, ПользовательВход = Неопределено) Экспорт
	
	Документы.ЭкземплярПроцесса.ЗаписатьВРегистрДанныеПоВозвратуОбъекта(Ссылка, ТекстСообщения, ПользовательВход);
	
	Если ЗначениеЗаполнено(ПроцессРодитель) Тогда
		ОбъектРодитель = ПроцессРодитель.ПолучитьОбъект();
	КонецЕсли;
	
КонецПроцедуры

Процедура УтвердитьОтчет(ТекстСообщения, ЗавершитьПроцессВход = Истина) Экспорт
	
	// Сброс активности у выполняемых этапов процесса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ВыполнениеПроцессов.ДокументПроцесса КАК ДокументПроцесса,
	|	ВыполнениеПроцессов.Комментарий КАК Комментарий,
	|	ВыполнениеПроцессов.Автор КАК Автор,
	|	ВыполнениеПроцессов.Организация КАК Организация,
	|	ВыполнениеПроцессов.Период КАК Период,
	|	ВыполнениеПроцессов.СостояниеЭтапа КАК СостояниеЭтапа,
	|	ВыполнениеПроцессов.ЧислоСогласованныхЭтаповПредшественников КАК ЧислоСогласованныхЭтаповПредшественников,
	|	ВыполнениеПроцессов.Комментарий КАК Комментарий1,
	|	ВыполнениеПроцессов.ОписаниеВерсии КАК ОписаниеВерсии,
	|	ВыполнениеПроцессов.ДатаНачала КАК ДатаНачала,
	|	ВыполнениеПроцессов.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|ГДЕ
	|	ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
	|	И ВыполнениеПроцессов.АрхивнаяЗапись = ЛОЖЬ";
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке);
	МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
		
	Запрос.УстановитьПараметр("ДокументПроцесса", Ссылка);
	Запрос.УстановитьПараметр("СписокСогласования", МассивСостояний);

	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйМенеджерЗаписи = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НовыйМенеджерЗаписи, Выборка);
		НовыйМенеджерЗаписи.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен;
		НовыйМенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.Комментарий КАК Комментарий,
	|	ВыполнениеПроцессовСрезПоследних.Автор КАК Автор,
	|	ВыполнениеПроцессовСрезПоследних.Организация КАК Организация,
	|	ВыполнениеПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ВыполнениеПроцессовСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ДокументПроцесса = &ДокументПроцесса) КАК ВыполнениеПроцессовСрезПоследних
	|ГДЕ
	|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа В(&СписокСогласования)";

	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке);
	МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);

	
	Запрос.УстановитьПараметр("ДокументПроцесса", Ссылка);
	Запрос.УстановитьПараметр("СписокСогласования", МассивСостояний);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЗавершитьПроцессВход Тогда
		СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен;
		Записать();
	Иначе
		// Не требуется завершения.
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПроцессРодитель) Тогда
		ОбъектРодитель = ПроцессРодитель.ПолучитьОбъект();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НужнаИнициализация = Истина Тогда				// Может быть неинициализировано.
		// Вынесено из транзакции.
	ИначеЕсли СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен И ЗначениеЗаполнено(ПроцессРодитель) И ЗначениеЗаполнено(ЭтапРодитель) Тогда
		МодульУправленияПроцессамиУХ.УтвердитьЭтапПроцесса(ПроцессРодитель, Организация, ЭтапРодитель, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		
		Если СостояниеВыполнения = Перечисления.СостоянияПроцесса.Остановлен Тогда
		
			НаборЗаписей = РегистрыСведений.ВыполнениеПроцессов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументПроцесса.Значение      = Ссылка;
			НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				ТекЭтапПроцесса = Запись.ЭтапПроцесса; 
				ТекДочернийМаршрут = Запись.ЭтапПроцесса.ДочернийМаршрут;
				
				Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен;
				Если ТекЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут Тогда
					ДокументСогласования = МодульСогласованияДокументовУХ.ОпределитьДокументСогласованияДляЭтапаСогласования(ТекДочернийМаршрут, ТекЭтапПроцесса, Ссылка);
					Если ЗначениеЗаполнено(ДокументСогласования) Тогда
						Попытка
							Если ДокументСогласования.СостояниеВыполнения <> Перечисления.СостоянияПроцесса.Остановлен Тогда
								ДокументСогласованияОбъект =  ДокументСогласования.ПолучитьОбъект();
								ДокументСогласованияОбъект.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Остановлен;
								ДокументСогласованияОбъект.Записать();
							Иначе	
								// Документ уже имеет состояние Остановлен.
							КонецЕсли;
						Исключение
							ОбщегоНазначенияУХ.СообщитьОбОшибке("Ошибка при отмене дочернего процесса: " + ТекДочернийМаршрут + " этапа согласования: " + ТекЭтапПроцесса);
							Отказ = Истина;
						КонецПопытки;
					Иначе
						ТекстСообщения = НСтр("ru = 'При отмене дочернего процесса %Процесс% на этапе %Этап% не удалось определить документ согласования. Операция отменена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Процесс%", Строка(ТекДочернийМаршрут));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ТекЭтапПроцесса));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Запись.ДатаОкончания) Тогда
					Запись.ДатаОкончания = ТекущаяДатаСеанса();
				Иначе
					// Не обновляем дату окончания.
				КонецЕсли;	
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		ИначеЕсли СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен Тогда	
			
			ВспомогательныеТипыЭтапов = Новый Массив();
			
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение);
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение);
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
			ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
			
			ЗапросТекущийЭтап = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса
			|ИЗ
			|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
			|ГДЕ
			|	ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
			|	И ВыполнениеПроцессов.СостояниеЭтапа = &СостояниеЭтапа
			|	И НЕ ВыполнениеПроцессов.ЭтапПроцесса.ТипЭтапа В (&ВспомогательныеТипыЭтапов)
			|	И ВыполнениеПроцессов.Организация = &Организация");
			
			ЗапросТекущийЭтап.УстановитьПараметр("ДокументПроцесса", Ссылка);
			ЗапросТекущийЭтап.УстановитьПараметр("Организация", Ссылка.Организация);
			ЗапросТекущийЭтап.УстановитьПараметр("СостояниеЭтапа", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
			ЗапросТекущийЭтап.УстановитьПараметр("ВспомогательныеТипыЭтапов", ВспомогательныеТипыЭтапов);
			
			ВыборкаТекущийЭтап = ЗапросТекущийЭтап.Выполнить().Выбрать();
			
			Если ВыборкаТекущийЭтап.Следующий() тогда				
				ДополнительныеПараметры = Новый Структура("ТекущийЭтап", ВыборкаТекущийЭтап.ЭтапПроцесса);
				МодульУправленияОповещениямиУХ.ОповеститьПользователей(Справочники.ВидыСобытийОповещений.ПроцессЗавершен,, Ссылка,, ДополнительныеПараметры);
			Иначе	
				МодульУправленияОповещениямиУХ.ОповеститьПользователей(Справочники.ВидыСобытийОповещений.ПроцессЗавершен,, Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
		НужнаИнициализация = Ложь;
	Иначе
		НужнаИнициализация = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	НаборЗаписей = РегистрыСведений.ВыполнениеПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПроцесса.Значение      = Ссылка;
	НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

НужнаИнициализация = Ложь;