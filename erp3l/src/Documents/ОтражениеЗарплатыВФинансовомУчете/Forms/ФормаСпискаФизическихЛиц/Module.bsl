
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ПараметрыДетализации);
	
	Если Не ЗначениеЗаполнено(ПодразделениеПредприятия) Или Не ЗначениеЗаполнено(ВидОперации) Тогда
		Заголовок = НСтр("ru = 'Сотрудники организации';
						|en = 'Company employees '");
	ИначеЕсли ОблагаетсяЕНВД Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудники организации (%1, %2, облагается ЕНВД)';
				|en = 'Company employees (%1, %2, subject to UTII)'"),
			СокрЛП(ПодразделениеПредприятия),
			СокрЛП(ВидОперации));
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудники организации (%1, %2)';
				|en = 'Company employees (%1, %2) '"),
			СокрЛП(ПодразделениеПредприятия),
			СокрЛП(ВидОперации));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВХранилище) Тогда
		ДетализацияНачислений = ПолучитьИзВременногоХранилища(АдресВХранилище);
		НачисленнаяЗарплатаИВзносыПоФизлицам.Загрузить(ДетализацияНачислений.НачисленнаяЗарплатаИВзносыПоФизлицам);
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизиты();
	
	УстановитьОтображениеВзносов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из НачисленнаяЗарплатаИВзносыПоФизлицам Цикл
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле %1 в строке %2';
								|en = 'The %1 field is not populated in line %2'");
		
		Если Не ЗначениеЗаполнено(Строка.ПодразделениеПредприятия) И ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'Подразделение-получатель';
																							|en = 'Receiving business unit'"), Строка.Номер),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НачисленнаяЗарплатаИВзносыПоФизлицам", Строка.Номер, "ПодразделениеПредприятия"),,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ВидОперации) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'Вид операции';
																							|en = 'Operation kind'"), Строка.Номер),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НачисленнаяЗарплатаИВзносыПоФизлицам", Строка.Номер, "ВидОперации"),,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.СпособОтраженияЗарплатыВБухучете)
			И СпособОтраженияТребуется(Строка.ВидОперации) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'Способ отражения';
																							|en = 'Record method'"), Строка.Номер),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НачисленнаяЗарплатаИВзносыПоФизлицам", Строка.Номер, "СпособОтраженияЗарплатыВБухучете"),,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'Сотрудник';
																							|en = 'Employee'"), Строка.Номер),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НачисленнаяЗарплатаИВзносыПоФизлицам", Строка.Номер, "ФизическоеЛицо"),,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Сумма) И Не ЗначениеЗаполнено(Строка.ВзносыВсего) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма начисления и взносов в строке %1';
																			|en = 'Amount of accrual and contributions is not populated in line %1'"), Строка.Номер),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НачисленнаяЗарплатаИВзносыПоФизлицам", Строка.Номер, "Сумма"),,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
			
		Если ЗавершениеРаботы Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены.
					|Перед завершением работы рекомендуется сохранить изменения,
					|иначе измененные данные будут утеряны.';
					|en = 'Data was changed.
					|Save the changes before exiting, 
					|otherwise the changed data will be lost.'");
			
			Возврат;
			
		Иначе
			
			Отказ                = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса       = Нстр("ru = 'Данные были изменены. Сохранить изменения?';
										|en = 'The data was changed. Do you want to save the changes?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРедактирование();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленнаяЗарплатаИВзносы

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПоФизлицамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные;
		
		Если Не Копирование Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЭтаФорма);
			ТекущиеДанные.ВидНачисленияОплатыТрудаДляНУ = ПредопределенноеЗначение("Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255");
			ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.НачисленоДоход");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПриИзменении(Элемент)
	
	ЗаполнитьДополнительныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыВидОперацииПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные;
	Если Не СпособОтраженияТребуется(ТекущиеДанные.ВидОперации) Тогда
		ТекущиеДанные.СпособОтраженияЗарплатыВБухучете = ПредопределенноеЗначение("Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРСтраховаяПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРНакопительнаяПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРДоПредельнойВеличиныПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРСПревышенияПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРПоСуммарномуТарифуПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРНаДоплатуЛетчикамПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРНаДоплатуШахтерамПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыФССПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыФФОМСПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыТФОМСПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыФССНесчастныеСлучаиПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценкиПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценкаПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценкиПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценкаПриИзменении(Элемент)
	РассчитатьВзносыВсего();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВзносыПодробно(Команда)
	
	ПоказатьВзносыПодробно = Не ПоказатьВзносыПодробно;
	Элементы.ПоказатьВзносыПодробно.Пометка = ПоказатьВзносыПодробно;
	УстановитьОтображениеВзносов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если Модифицированность Тогда
		
		ЗавершитьРедактирование();
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.НачисленнаяЗарплатаИВзносы) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НачисленнаяЗарплатаИВзносы.ВыделенныеСтроки;
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.ФормаВыбора",, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ЗаполнитьПодразделениеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ВыбранноеЗначение = Результат;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = НачисленнаяЗарплатаИВзносыПоФизлицам.НайтиПоИдентификатору(Строка);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.ПодразделениеПредприятия = ВыбранноеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидОперации(Команда)
	
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.НачисленнаяЗарплатаИВзносы) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НачисленнаяЗарплатаИВзносы.ВыделенныеСтроки;
	
	ОткрытьФорму("Перечисление.ВидыОперацийПоЗарплате.Форма.ФормаВыбора",
		Новый Структура("ГруппаОпераций", "Начисления"),,,, ЭтаФорма,
		Новый ОписаниеОповещения("ЗаполнитьВидОперацииЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ВыбранноеЗначение = Результат;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = НачисленнаяЗарплатаИВзносыПоФизлицам.НайтиПоИдентификатору(Строка);
			Если СтрокаТаблицы <> Неопределено Тогда
				
				СтрокаТаблицы.ВидОперации = ВыбранноеЗначение;
				
				Если Не СпособОтраженияТребуется(СтрокаТаблицы.ВидОперации) Тогда
					СтрокаТаблицы.СпособОтраженияЗарплатыВБухучете = ПредопределенноеЗначение("Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособОтражения(Команда)
	
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.НачисленнаяЗарплатаИВзносы) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НачисленнаяЗарплатаИВзносы.ВыделенныеСтроки;
	
	ОткрытьФорму("Справочник.СпособыОтраженияЗарплатыВБухУчете.Форма.ФормаВыбора",, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ЗаполнитьСпособОтраженияЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособОтраженияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = НачисленнаяЗарплатаИВзносыПоФизлицам.НайтиПоИдентификатору(Строка);
		
		Если СпособОтраженияТребуется(ДанныеСтроки.ВидОперации) Тогда
			ДанныеСтроки.СпособОтраженияЗарплатыВБухучете = Результат
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОтражениеЗарплатыВФинансовомУчетеУП.УсловноеОформлениеОперацийПоЗарплате(
		УсловноеОформление, "НачисленнаяЗарплатаИВзносыПоФизлицам.ВидОперации", Элементы.НачисленнаяЗарплатаИВзносыВидОперации);
	
	// способ отражения не требуется для сдельной зарплаты и некоторых резервов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленнаяЗарплатаИВзносыСпособОтражения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленнаяЗарплатаИВзносыОблагаетсяЕНВД.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыПоФизлицам.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// способ отражения не требуется для расходов по страхованию за счет фонда
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленнаяЗарплатаИВзносыСпособОтражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыПоФизлицам.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// если ЕНВД не применяется, то колонка не отображается
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленнаяЗарплатаИВзносыОблагаетсяЕНВД.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПрименяетсяЕНВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()
	
	НомерСтроки = 1;
	
	Для Каждого Строка Из НачисленнаяЗарплатаИВзносыПоФизлицам Цикл
		
		Строка.Номер = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	МаксимальныйНомерСтроки = НомерСтроки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВзносов()
	
	Если Не ПоказатьВзносыПодробно Тогда
		
		Элементы.НачисленнаяЗарплатаИВзносыПФРСтраховая.Видимость                        = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыФССНесчастныеСлучаи.Видимость                 = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРНакопительная.Видимость                    = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРПоСуммарномуТарифу.Видимость               = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРДоПредельнойВеличины.Видимость             = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРСПревышения.Видимость                      = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРНаДоплатуЛетчикам.Видимость                = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРНаДоплатуШахтерам.Видимость                = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботах.Видимость = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботах.Видимость = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки.Видимость = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка.Видимость = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки.Видимость = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка.Видимость = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыФСС.Видимость                                 = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыФФОМС.Видимость                               = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыТФОМС.Видимость                               = Ложь;
		Элементы.НачисленнаяЗарплатаИВзносыВзносыВсего.Видимость                         = Истина;
		
	Иначе
		
		Элементы.НачисленнаяЗарплатаИВзносыПФРСтраховая.Видимость                        = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыФССНесчастныеСлучаи.Видимость                 = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРНакопительная.Видимость                    = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРПоСуммарномуТарифу.Видимость               = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРДоПредельнойВеличины.Видимость             = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРСПревышения.Видимость                      = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРНаДоплатуЛетчикам.Видимость                = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРНаДоплатуШахтерам.Видимость                = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботах.Видимость = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботах.Видимость = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки.Видимость = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка.Видимость = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки.Видимость = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка.Видимость = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыФСС.Видимость                                 = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыФФОМС.Видимость                               = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыТФОМС.Видимость                               = Истина;
		Элементы.НачисленнаяЗарплатаИВзносыВзносыВсего.Видимость                         = Ложь;
		
		УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, ПериодРегистрации, "НачисленнаяЗарплатаИВзносы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование()
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ПодразделениеПредприятия",         ПодразделениеПредприятия);
	ПараметрыОтбора.Вставить("ВидОперации",                      ВидОперации);
	ПараметрыОтбора.Вставить("СпособРасчетов",                   СпособРасчетов);
	ПараметрыОтбора.Вставить("СпособОтраженияЗарплатыВБухучете", СпособОтраженияЗарплатыВБухучете);
	ПараметрыОтбора.Вставить("ОблагаетсяЕНВД",                   ОблагаетсяЕНВД);
	ПараметрыОтбора.Вставить("НеОблагаетсяНДФЛ",                 НеОблагаетсяНДФЛ);
	
	Результат = Новый Структура();
	Результат.Вставить("СтруктураОтбора", ПараметрыОтбора);
	Результат.Вставить("АдресВХранилище", "");
	
	РезультатРедактированияНаСервере(Результат);
	
	Модифицированность = Ложь;
	
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

&НаСервере
Процедура РезультатРедактированияНаСервере(СтруктураВыбора)
	
	ДетализацияНачислений = Новый Структура("НачисленнаяЗарплатаИВзносыПоФизлицам",
		НачисленнаяЗарплатаИВзносыПоФизлицам.Выгрузить());
	
	СтруктураВыбора.АдресВХранилище = ПоместитьВоВременноеХранилище(ДетализацияНачислений);
	
КонецПроцедуры

&НаКлиенте
Функция КолонкиДляСуммирования()
	
	Возврат "ПФРСтраховая, ПФРНакопительная, ПФРПоСуммарномуТарифу, ПФРДоПредельнойВеличины, ПФРСПревышения,
		|ФСС, ФФОМС, ТФОМС, ПФРНаДоплатуЛетчикам, ПФРНаДоплатуШахтерам, ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах, ФССНесчастныеСлучаи,
		|ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		|ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка";
	
КонецФункции

&НаКлиенте
Процедура РассчитатьВзносыВсего()
	
	ТекущиеДанные = Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиДляСуммирования = Новый Структура(КолонкиДляСуммирования());
	
	ВзносыВсего = 0;
	Для Каждого Колонка Из КолонкиДляСуммирования Цикл
		ВзносыВсего = ВзносыВсего + ТекущиеДанные[Колонка.Ключ];
	КонецЦикла;
	
	ТекущиеДанные.ВзносыВсего = ВзносыВсего;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СпособОтраженияТребуется(ВидОперации)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ПособиеНаПогребение")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
