
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	СкопироватьВКроссТаблицу(ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
			"ПериодыЗакупок", 
	 		"УсловияПоНоменклатуреПоПериодам",
			"УсловияПоНоменклатуреПоПериодам",
			ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейПредложенияПоставщика()));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АккредитацияПоставщиковУХ.ПриСозданииНаСервереФормыВнешнегоПоставщика(ЭтаФорма, Отказ,,,, Ложь);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьРеквизитыФормыПоЛоту();
	ЦентрализованныеЗакупкиУХ.ИнициализироватьКроссТаблицуПотребностей(
		ЭтаФорма,
		"ПараметрыКроссТаблицыПотребностей",
		ЦентрализованныеЗакупкиУХ.ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
			"ПериодыЗакупок", 
	 		"УсловияПоНоменклатуреПоПериодам",
			"УсловияПоНоменклатуреПоПериодам",
			ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейПредложенияПоставщика()));
	УстановитьОформлениеФормыВнешнегоПоставщика();
	УстановитьОформлениеФормы();
	ИспользоватьПартнеровИКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОшибкиПользователю = ПроверкаЗаполненияПередЗаписьюНаКлиенте();
		Если ОшибкиПользователю <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю,	Отказ);
		КонецЕсли;
	КонецЕсли;
	Отказ = ВыполнитьПроверкуПоЦенам();	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкуПоЦенам()
	Отказ=Ложь;
	Индекс=0;
	Для Каждого ТекСтрокаПереченьНоменклатуры Из УсловияПоНоменклатуреПоПериодам Цикл
		
		Если НЕ ТекСтрокаПереченьНоменклатуры.ТоварНеПоставляется И ТекСтрокаПереченьНоменклатуры.Цена=0 
			И ТипЗнч(ТекСтрокаПереченьНоменклатуры.Номенклатура)=ТипЗнч("Справочники.Номенклатура")
			Тогда
			
				Сообщение = Новый СообщениеПользователю();
				
				Текст =  НСтр("ru='В строке %ИндексСтроки% списка Условия по номенклатуре не заполнена колонка Цена'");
				
				Текст = СтрЗаменить(Текст, "%ИндексСтроки%", Строка(Индекс+1));
				
				Сообщение.Текст = Текст;
				
				Сообщение.Поле = "УсловияПоНоменклатуреПоПериодам[" + Строка(Индекс) + "].НаборСвойств";
				
				Сообщение.УстановитьДанные(ЭтотОбъект);
				
				Сообщение.Сообщить();
				
				Отказ = Истина;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Отказ;
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПодготовитьЗаполнитьТаблицуИзКроссТаблицы(
		УсловияПоНоменклатуреПоПериодам,
		ТекущийОбъект.УсловияПоНоменклатуре,
		ЭтаФорма.ПериодыЗакупок,
		Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		ПараметрыСобытия = Новый Структура;
		ПараметрыСобытия.Вставить("ПредложениеПоставщика", Объект.Ссылка);
		ПараметрыСобытия.Вставить("Лот", Объект.Лот);
		Оповестить("ПроведеноПредложениеПоставщика", ПараметрыСобытия, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаполнитьПоДаннымЛота(Команда)
	ЗаполнитьПоДаннымЛотаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЛотПриИзменении(Элемент)
	ЛотПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ОбработатьИзменениеФлагаЦенаВключаетНДСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ПриИзмененииКонтрагентаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АнкетаПоставщикаПриИзменении(Элемент)
	ПриИзмененииАнкетыПоставщикаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УсловиеОплатыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения(
				"ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Заполнить поле ""Условия оплаты текстовое описание"" по данным условия оплаты?'"),
			РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопущенКУчастиюПриИзменении(Элемент)
	УстановитьВидимостьПричиныОтказа();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоТипуЦен(Команда)
	флОтмена = Ложь;
	Если НЕ ЗначениеЗаполнено(ПериодЗакупок) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не указан период закупки.'");
		Сообщение.Поле = "ПериодЗакупок";
		Сообщение.Сообщить();
		флОтмена = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не указана валюта документа.'");
		Сообщение.Поле = "ВалютаДокумента";
		Сообщение.Сообщить();
		флОтмена = Истина;
	КонецЕсли;
	Если флОтмена Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЦеныПоТипуЦенНаСервере();
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ВалютаПриИзмененииНаСервере();
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииСтавкиНДС()
	ТекДанные = Элементы.УсловияПоНоменклатуре.ТекущиеДанные;
	ОбновитьСуммуНДСТекущейСтроки(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТекущейСтроки()
	ТекДанные = Элементы.УсловияПоНоменклатуре.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекДанные.Сумма = 0;
		ТекДанные.СуммаНДС = 0;
		возврат;
	КонеЦЕсли;
	
	Если ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		ТекДанные.Коэффициент = 1;
		ТекДанные.Количество = 0;
		ТекДанные.Цена = 0;
		ТекДанные.СуммаНДС = 0;
	КонецЕсли;
	
	ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
	ОбновитьСуммуНДСТекущейСтроки(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущуюСтрокуПриИзмененииСуммы(ТекДанные)
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество_ = ?(ТекДанные.Количество = 0, 1, ТекДанные.Количество);
	ТекДанные.Цена = ТекДанные.Сумма / Количество_;
	
	ОбновитьСуммуНДСТекущейСтроки(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуНДСТекущейСтроки(ТекДанные)
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.СуммаНДС = РассчитатьСуммуНДС(ТекДанные, Объект.ЦенаВключаетНДС);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуНДС(ТекДанные, ЦенаВключаетНДС)
	Если ТекДанные = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				ТекДанные.Сумма,
				ЦенаВключаетНДС,
				ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(
						ТекДанные.СтавкаНДС));
КонецФункции

&НаКлиенте
Процедура ОбновитьУсловияОплатыПоУсловиюОплаты()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.УсловияОплаты = НадписьЭтапыОплатаДляСоглашений(Объект.Соглашение);
	Иначе
		Объект.УсловияОплаты = "";
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru = 'Оплата: Любая';
							|en = 'Payment: Any'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru = 'Оплата платежной картой';
							|en = 'Payment by payment card'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru = 'Взаимозачет';
							|en = 'Offsetting'");
	Иначе
		Представление = НСтр("ru = '%ФормаОплаты% оплата';
							|en = '%ФормаОплаты% payment'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция НадписьЭтапыОплатаДляСоглашений(Соглашение) Экспорт
	
	
	ФормаОплаты            = Соглашение.ФормаОплаты;
	ЭтапыГрафикаОплаты     = Соглашение.ЭтапыГрафикаОплаты;
	КоличествоЭтаповОплаты = ЭтапыГрафикаОплаты.Количество();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты));
	
	ТекстЭтаповОплаты = "";
	Если КоличествоЭтаповОплаты = 0 Тогда
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапы не указаны';
																|en = 'steps are not set'"), , ));
		
	ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
		
		МассивСтрок.Добавить(" ");
		Для Сч=1 По КоличествоЭтаповОплаты Цикл
			СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
			ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2% %3 дн';
					|en = '%1 %2% (%3 days)'"),
				ПредставлениеВариантаОплаты(СтрокаОплаты.ВариантОплаты),
				СтрокаОплаты.ПроцентПлатежа, СтрокаОплаты.Сдвиг);
			МассивСтрок.Добавить(ТекстЭтаповОплаты);
			МассивСтрок.Добавить(", ");
		КонецЦикла;
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
	Иначе
		
		ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			КоличествоЭтаповОплаты,
			НСтр("ru = 'этапы';
				|en = 'stages'"), НСтр("ru = 'этапа';
									|en = 'stage'"), НСтр("ru = 'этапов';
														|en = 'steps'"), НСтр("ru = 'м';
																				|en = 'm'"));
			
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'в';
									|en = 'in'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
		
	КонецЕсли;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
	Возврат ТекстНадписи;
	
КонецФункции

&НаСервере
Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	Представление = "";
	
	Если ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
		Представление = НСтр("ru = 'Предоплата';
							|en = 'Prepayment'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
		Представление = НСтр("ru = 'Аванс';
							|en = 'Advance'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитСдвиг")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитСдвиг") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции


&НаКлиенте
Процедура ОбработатьПодтверждениеЗаполненияУсловий(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьУсловияОплатыПоУсловиюОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКонтрагента(Контрагент, ДопПараметры) Экспорт
	Если Контрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Контрагент <> Объект.Контрагент Тогда
		Объект.Контрагент = Контрагент;
		Модифицированность = Истина;
		КонтрагентПриИзменении(Элементы.Контрагент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияПередЗаписьюНаКлиенте()
	ОшибкиПользователю = Неопределено;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ХарактеристикиЗаполненыКорректно(
		ЭтаФорма[ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		"Характеристика",
		"ХарактеристикиИспользуются",
		ОшибкиПользователю);
		
	Возврат ОшибкиПользователю;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ЛотПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Лот) Тогда
		Объект.ВалютаДокумента = Объект.Лот.ВалютаДокумента;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	КонецЕсли;	
	УстановитьРеквизитыФормыПоЛоту();
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАнкетыПоставщикаНаСервере()
	АнкетаПоставщика = Объект.АнкетаПоставщика;
	Если ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		Объект.Контрагент = АнкетаПоставщика.Контрагент;
	Иначе
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.КонтактноеЛицоКонтрагента = 
			УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьОсновноеКонтактноеЛицоКонтрагента(
				Объект.Контрагент);
	Иначе
		Объект.КонтактноеЛицоКонтрагента = УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьПустоеКонтактноеЛицо();
	КонецЕсли;
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаНаСервере()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.АнкетаПоставщика =
			АккредитацияПоставщиковУХ.ПолучитьАнкетуПоставщикаДляКонтрагента(
				 Объект.Контрагент);
	Иначе
		Объект.АнкетаПоставщика = Справочники.АнкетыПоставщиков.ПустаяСсылка();
	КонецЕсли;
	УстановитьОформлениеФормы();
	Объект.Партнер = Объект.Контрагент.Партнер;
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыФормыПоЛоту()
	Если ЗначениеЗаполнено(Объект.Лот) Тогда
		ЭтоФЗ223 = Справочники.Лоты.ЭтоФЗ223(Объект.Лот);
		ЭтоЗакрытаяЗакупка = Справочники.ЗакупочныеПроцедуры.ЭтоЗакрытаяЗакупка(
			Объект.Лот.Владелец);
		ЛотПубликуетсяНаЭТП = Объект.Лот.Владелец.СпособПубликации =
			Перечисления.СпособПубликацииЗакупки.НаЭТП;
		ТребуетсяКвалификационныйОтбор =
			Объект.Лот.Владелец.ТребуетсяКвалификационныйОтбор;
		флЭтоАукцион = Перечисления.СпособыВыбораПоставщика.ЭтоАукцион(
			Объект.Лот.Владелец.СпособВыбораПоставщика);
		ПериодЗакупок = Объект.Лот.ПериодЗакупок;
		ПриоритетУчастияМалогоИСреднегоПредпринимательства =
			Объект.Лот.Владелец.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
	Иначе
		ЭтоФЗ223 = Ложь;
		ЭтоЗакрытаяЗакупка = Ложь;
		ЛотПубликуетсяНаЭТП = Ложь;
		ТребуетсяКвалификационныйОтбор = Ложь;
		флЭтоАукцион = Ложь;
		ПериодЗакупок = Справочники.Периоды.ПустаяСсылка();
		ПриоритетУчастияМалогоИСреднегоПредпринимательства = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы()
	Если Элементы.УсловияПоНоменклатуреПоПериодам.Подчиненныеэлементы.Найти("УсловияПоНоменклатуреПоПериодамГруппаРеквизитов") <> Неопределено Тогда
		Элементы.УсловияПоНоменклатуреПоПериодам.Подчиненныеэлементы.УсловияПоНоменклатуреПоПериодамГруппаРеквизитов.Видимость = Ложь;
	КонецЕсли;
	Элементы.УсловияПоНоменклатуреПоПериодамТоварНеПоставляется.Видимость = ?(Объект.Лот.ВидЗакупки=Перечисления.ВидЛотовойЗакупки.ЛотоваяЗакупка, Ложь, Истина);	
	флОпубликованНаЭТП = ЛотПубликуетсяНаЭТП И ЗначениеЗаполнено(Объект.НомерЗаявки);
	Элементы.НомерЗаявки.Видимость = ЛотПубликуетсяНаЭТП;
	Элементы.ДатаОтправкиЗаявки.Видимость = ЛотПубликуетсяНаЭТП;
	Элементы.СтраницаСубподрядчики.Видимость = флОпубликованНаЭТП;
	Элементы.ГруппаНоменклатураЭТП.Видимость = флОпубликованНаЭТП;
	Элементы.ГруппаАукцион.Видимость = флЭтоАукцион;
	
	Элементы.УсловияПоНоменклатуреПоПериодамСтранаПроизводителя.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки");	
	Элементы.УсловияПоНоменклатуреПоПериодамСтраныПроисхождения.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки");	
	
	
	Если ТребуетсяКвалификационныйОтбор Тогда
		Элементы.Контрагент.ФормаВыбора =
			"РегистрСведений.УчастникиКвалифицированныеПоЛоту.Форма.ФормаВыбораКвалифицированныхПоЛоту";
		Элементы.Контрагент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	ИначеЕсли ПриоритетУчастияМалогоИСреднегоПредпринимательства Тогда
		Элементы.Контрагент.ФормаВыбора =
			"Документ.ПредложениеПоставщика.Форма.ФормаВыбораСМСП";
		Элементы.Контрагент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	Иначе
		Элементы.Контрагент.ФормаВыбора = "";
		Элементы.Контрагент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	КонецЕсли;
	УстановитьВидимостьПричиныОтказа();
	УстановитьСписокДопущенныхКонтрагентовДляВыбора();
	АктивныеПериоды = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(Новый Структура("Активная", Истина));
	Для Каждого Период Из АктивныеПериоды Цикл
		Элементы["УсловияПоНоменклатуреПоПериодамКоличество_"+Период.ИмяКолонки].Доступность = Ложь;
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["УсловияПоНоменклатуреПоПериодамСумма_"+Период.ИмяКолонки].Имя);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы["УсловияПоНоменклатуреПоПериодамЭтоКатегорияНоменклатуры"].ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;	
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.ЗеленыйЛес);
	КонецЦикла;	
	Элементы.СоздатьСоглашениеПоЛоту.Видимость = Не ЗначениеЗаполнено(Объект.Соглашение);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПричиныОтказа()
	Элементы.ПричинаОтказаВДоступе.Видимость = НЕ Объект.ДопущенКУчастию;
КонецПроцедуры

// Вызывается один раз при создании формы.
// Устанавливает свойства элементов формы в зависимости
// от того обыйный или внешний пользователь ее открыл.
//
&НаСервере
Процедура УстановитьОформлениеФормыВнешнегоПоставщика() Экспорт
	Элементы.АнкетаПоставщика.ТолькоПросмотр = ЭтаФорма.ЭтоВнешнийПользователь;
	Элементы.Лот.КнопкаОткрытия = НЕ ЭтоВнешнийПользователь;
	Элементы.Контрагент.ТолькоПросмотр = ЭтаФорма.ЭтоВнешнийПользователь;
	Элементы.ДопущенКУчастию.ТолькоПросмотр = ЭтаФорма.ЭтоВнешнийПользователь;
	Элементы.Ответственный.Видимость = НЕ ЭтоВнешнийПользователь;
	Если ЭтоВнешнийПользователь Тогда
		Элементы.Лот.ФормаВыбора = "Справочник.Лоты.Форма.ЛотыДоступныеПоставщику";
		
		ОтборПоЗначениям = Новый Структура;
		ОтборПоЗначениям.Вставить("Допущен", Истина);
		
		СписокСостоянийЛотов = Новый СписокЗначений;
		СписокСостоянийЛотов.Добавить(Перечисления.СтатусыЛотов.СборПредложенийПоставщиков);
		
		мПараметровВыбораЛота = Новый Массив;
		мПараметровВыбораЛота.Добавить(Новый ПараметрВыбора(
			"ОтборПоСтатусам", СписокСостоянийЛотов));
		мПараметровВыбораЛота.Добавить(Новый ПараметрВыбора(
			"РежимВыбора", Истина));
		мПараметровВыбораЛота.Добавить(Новый ПараметрВыбора(
			"Отбор", ОтборПоЗначениям));
		Элементы.Лот.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметровВыбораЛота);
	КонецЕсли;
	Элементы.УсловияПоНоменклатуреПоПериодамНоменклатураПоставщика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщика");
	Элементы.УсловияПоНоменклатуреПоПериодамНоменклатураПоставщика.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщика");
	
КонецПроцедуры

Процедура УстановитьСписокДопущенныхКонтрагентовДляВыбора()
	Элементы.Контрагент.РежимВыбораИзСписка = Истина;
	Если НЕ (ПолучитьФункциональнуюОпцию("НеТребоватьРегистрацииУчастниковДляОткрытыхСпособовЗакупок") 
		И ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.Лот.ЗакупочнаяПроцедура,"ЗакрытаяЗакупка") = Ложь)
		И ТребуетсяКвалификационныйОтбор = Ложь
		Тогда
		Если НЕ ТребуетсяКвалификационныйОтбор  тогда
		Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(
		ЗакрытыеЗакупкиУХ.ПолучитьКонтрагентовЗакупок(
		Объект.Лот.Владелец));
		Элементы.Контрагент.КнопкаВыбора = Ложь;
		Элементы.Контрагент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
		Иначе
		Элементы.Контрагент.КнопкаВыбора = Истина;
		Элементы.Контрагент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		КонецЕсли;
		Элементы.КонтрагентБезОтбора.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
	Иначе
		Элементы.КонтрагентБезОтбора.Видимость = Истина;
		Элементы.Контрагент.Видимость = Ложь;
		Если Элементы.Контрагент.ФормаВыбора <> "" Тогда
		Элементы.КонтрагентБезОтбора.Связипараметроввыбора = Элементы.Контрагент.Связипараметроввыбора;
		Элементы.КонтрагентБезОтбора.ФормаВыбора = Элементы.Контрагент.ФормаВыбора;
		КонецЕсли;
	КонецЕсли;
	Элементы.Контрагент.РежимВыбораИзСписка = Истина;
	Элементы.Контрагент.КнопкаВыбора = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНоменклатуры()
	
	ТекСтрока = Элементы.УсловияПоНоменклатуре.ТекущаяСтрока;
	ТекДанные = Объект.УсловияПоНоменклатуре.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.ЭтоТоварнаяКатегория = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекДанные.ЕдиницаИзмерения = 
			УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьПустуюЕдиницуИзмерения();
		ТекДанные.Коэффициент = 0;
		ТекДанные.Количество = 0;
		ТекДанные.Цена = 0;
		ТекДанные.Сумма = 0;
		
		Возврат;
		
	КонеЦЕсли;
	
	Если ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		ТекДанные.ЕдиницаИзмерения =
			УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьПустуюЕдиницуИзмерения();
		ТекДанные.Коэффициент = 1;
		ТекДанные.Количество = 0;
		ТекДанные.Цена = 0;
		ТекДанные.ЭтоТоварнаяКатегория = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) Тогда
		Коэффициент = ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентЕдиницыИзмерения(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		Если Коэффициент = 0 Тогда
			ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.ЕдиницаИзмерения;
			ТекДанные.Коэффициент = 1;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.ЕдиницаИзмерения;
		ТекДанные.Коэффициент = 1;
	КонецЕсли;
	
	ТипЦен = Неопределено;
	ДатаЦен = Неопределено;
	ВалютаЦен = Неопределено;
	Если ЗначениеЗаполнено(ОБъект.Лот) Тогда
		ТипЦен = Константы.ТипЦенДляРасценкиЗаявокНаПотребность.Получить();
		ДатаЦен = ОБъект.Лот.ДатаНачалаПериодаПоставки;
		ВалютаЦен = ОБъект.Лот.ВалютаДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ТекДанные.Цена = ЦентрализованныеЗакупкиУХ.ПолучитьЦенуНоменклатуры(
			ТекДанные.Номенклатура, 
			ТекДанные.Характеристика,
			ТипЦен, 
			ДатаЦен, 
			ВалютаЦен);
	Иначе
		ТекДанные.Цена = 0;
	КонецЕсли;
	
	ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЕдиницыИзмерения()
	
	ТекСтрока = Элементы.УсловияПоНоменклатуре.ТекущаяСтрока;
	ТекДанные = Объект.УсловияПоНоменклатуре.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		Возврат;
	КонеЦЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) Тогда
		Коэффициент = ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентЕдиницыИзмерения(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		Если Коэффициент = 0 Тогда
			Коэффициент = 1;
		КонецЕсли;
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
	КоэффПересчета = ТекДанные.Коэффициент / Коэффициент;
	
	ТекДанные.Коэффициент = Коэффициент;
	ТекДанные.Количество = Окр(ТекДанные.Количество * КоэффПересчета, 2);
	ТекДанные.Цена = Окр(ТекДанные.Цена / КоэффПересчета, 2);
	ТекДанные.Сумма = Окр(ТекДанные.Количество * ТекДанные.Цена, 2);
	
	УстановитьРеквизитыНоменклатурыПоТекущейСтроке();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымЛотаНаСервере()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.ЗаполнитьПоДаннымЛота();
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	ЦентрализованныеЗакупкиУХ.ОбновитьКроссТаблицуПотребностей(
			ЭтаФорма, 
			ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	УстановитьРеквизитыФормыПоЛоту();
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыНоменклатурыПоТекущейСтроке()
	ТекСтрока = Элементы.УсловияПоНоменклатуре.ТекущаяСтрока;
	ТекДанные = Объект.УсловияПоНоменклатуре.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ЭтоТоварнаяКатегория Тогда
		Возврат;
	КонецЕсли;
	
	Цена = ТекДанные.Цена;
	ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
	Коэффициент = ТекДанные.Коэффициент;

	мСтроки = Объект.УсловияПоНоменклатуре.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
	Для Каждого Строка_ Из мСтроки Цикл
		Если Строка_ = ТекДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Строка_.Количество = Окр(Строка_.Количество * Строка_.Коэффициент / Коэффициент, 2);
		
		Строка_.ЕдиницаИзмерения = ЕдиницаИзмерения;
		Строка_.Коэффициент = Коэффициент;
		Строка_.Цена = Цена;
		Строка_.Сумма = Цена * Строка_.Количество;
		
		Строка_.СуммаНДС = РассчитатьСуммуНДС(Строка_, Объект.ЦенаВключаетНДС);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗапросТЧНоменклатурыПоПериодам(ТЧНоменклатура,
											   ПериодыЗакупок, 
											   ИменаКлючевыхПолей)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПериодов.Период КАК Период,
		|	ТабПериодов.Активная КАК Активная,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТабПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ТЧНоменклатура.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТЧНоменклатура.СтранаПроизводителя КАК СтранаПроизводителя,		
		|	ТЧНоменклатура.ТоварНеПоставляется КАК ТоварНеПоставляется,
		|	ТЧНоменклатура.НоменклатураПоставщика КАК НоменклатураПоставщика
		|ПОМЕСТИТЬ ТЧНоменклатура
		|ИЗ
		|	&ПараметрТЧНоменклатура КАК ТЧНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧНоменклатура.Количество КАК Количество,
		|	ТЧНоменклатура.Коэффициент КАК Коэффициент,
		|	ТЧНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ТЧНоменклатура.Номенклатура КАК Номенклатура,
		|	ТЧНоменклатура.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА ЛОЖЬ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ВЫРАЗИТЬ(ТЧНоменклатура.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
		|										ТОГДА ЛОЖЬ
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ТЧНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ТЧНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТЧНоменклатура.Сумма КАК Сумма,
		|	ТЧНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ТЧНоменклатура.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ТЧНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКатегорияНоменклатуры,
		|	ТабПериодов.ИмяКолонки КАК ИмяКолонки,
		|	0 КАК НомерСтроки,
		|	ТЧНоменклатура.ТоварНеПоставляется КАК ТоварНеПоставляется,
		|	ТЧНоменклатура.НоменклатураПоставщика КАК НоменклатураПартнера,
		|	ТЧНоменклатура.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ТЧНоменклатура.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТЧНоменклатура.СтранаПроизводителя КАК СтранаПроизводителя		
		|ИЗ
		|	ТЧНоменклатура КАК ТЧНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТЧНоменклатура.ПериодПотребности = ТабПериодов.Период
		|			И (ТабПериодов.Активная)"
		+
		"
		|УПОРЯДОЧИТЬ ПО
		|	" + ИменаКлючевыхПолей;
	Запрос.УстановитьПараметр("ТаблицаПериодов",
		ПериодыЗакупок.Выгрузить());
	Запрос.УстановитьПараметр("ПараметрТЧНоменклатура",
		ТЧНоменклатура.Выгрузить());
	Возврат Запрос.Выполнить();
КонецФункции

&НаСервере
Процедура ЗаполнитьЦеныПоТипуЦенНаСервере()
	ЦеныПоНоменклатуре = Новый Соответствие; // Номенклатура -> Характеристика -> Цена
	ТипЦенЛота =
		Константы.ТипЦенДляРасценкиЗаявокНаПотребность.Получить();
	Если НЕ ЗначениеЗаполнено(ТипЦенЛота) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указан тип цен начальной (максимальной) цены. Настройки (Управление холдингом), Настройка параметров, Централизованные закупки, Тип цен для установки начальной (максимальной) цены лота.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Для Каждого Строка_ Из УсловияПоНоменклатуреПоПериодам Цикл
		Номенклатура_ = Строка_.Номенклатура;
		Характеристика_ = Строка_.Характеристика_;
		ПараметрыПоискаЦены = ЦентрализованныеЗакупкиКлиентСерверУХ.ПоместитьВМассив3(
			Номенклатура_,
			Характеристика_);
		Цена_ = ЦентрализованныеЗакупкиКлиентСерверУХ.НайтиЗначениеВКэше(
			ЦеныПоНоменклатуре,
			ПараметрыПоискаЦены);
		Если Цена_ = Неопределено Тогда
			Цена_ =
				ЦентрализованныеЗакупкиВызовСервераУХ.ПолучитьЦенуНоменклатурыПоТипу(
					Номенклатура_,
					Характеристика_,
					ТипЦенЛота, 
					ПериодЗакупок.ДатаОкончания, 
					Объект.ВалютаДокумента,
					Объект.ЦенаВключаетНДС,
					Строка_.СтавкаНДС);
			ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьЗначениеВКэш(
				ЦеныПоНоменклатуре,
				ПараметрыПоискаЦены,
				Цена_);
		КонецЕсли;
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
			Объект.ЦенаВключаетНДС,
			ЭтаФорма.ПериодыЗакупок,
			Строка_);
	КонецЦикла;
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииНаСервере()
	флВыполненПересчет = 
		ЦентрализованныеЗакупкиУХ.ТиповойОбработчикПриИзмененииВалютыДокумента(
			ЭтаФорма,
			ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	Если флВыполненПересчет Тогда
		ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеФлагаЦенаВключаетНДСНаСервере()
	ЦентрализованныеЗакупкиУХ.ТиповойОбработчикПриИзмененииЦенаВключаетНДС(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивКонтрагентовПредыдущейПереторжки(ЛотВход)
	Если ЗначениеЗаполнено(ЛотВход) Тогда
		РезультатФункции = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПереторжкаЗакупокСрезПоследних.ЗакупочнаяПроцедура КАК ЗакупочнаяПроцедура,
		|	ЕСТЬNULL(ПереторжкаЗакупокСрезПоследних.НомерПереторжки, 0) КАК НомерПереторжки
		|ПОМЕСТИТЬ ВТ_НомерПереторжки
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереторжкаЗакупок.СрезПоследних КАК ПереторжкаЗакупокСрезПоследних
		|		ПО Лоты.ЗакупочнаяПроцедура = ПереторжкаЗакупокСрезПоследних.ЗакупочнаяПроцедура
		|ГДЕ
		|	Лоты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_НомерПереторжки.ЗакупочнаяПроцедура КАК ЗакупочнаяПроцедура,
		|	ПротоколВыбораПобедителейСоставУчастниковПереторжки.Контрагент КАК Контрагент
		|ИЗ
		|	ВТ_НомерПереторжки КАК ВТ_НомерПереторжки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПротоколВыбораПобедителей.СоставУчастниковПереторжки КАК ПротоколВыбораПобедителейСоставУчастниковПереторжки
		|		ПО ВТ_НомерПереторжки.ЗакупочнаяПроцедура = ПротоколВыбораПобедителейСоставУчастниковПереторжки.Ссылка.ЗакупочнаяПроцедура
		|			И (ВТ_НомерПереторжки.НомерПереторжки - 1 = ПротоколВыбораПобедителейСоставУчастниковПереторжки.Ссылка.НомерПереторжки)";
		Запрос.УстановитьПараметр("Ссылка", ЛотВход);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Контрагент);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивКонтрагентовПредыдущейПереторжки()

#КонецОбласти


#Область ВнешнийИнтерфейсДляРаботыКроссТаблицыПотребностей


&НаСервере
Процедура ЗаполнитьОбъектДляКроссТаблицыПотребностей(
									Контекст,
									ОбъектДляЗаполнения) Экспорт
	ОбъектДляЗаполнения.Периодичность =
		ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();
	ЗаполнитьЗначенияСвойств(ОбъектДляЗаполнения, Объект);
	ДатаНачалаОкончанияПоставка = Документы.СтрокаПланаЗакупок.ДатыПериодаНачалаОкончанияПоставки(Объект.Лот.СтрокаПланаЗакупок);
	Если  ДатаНачалаОкончанияПоставка = Неопределено Тогда
		ОбъектДляЗаполнения.ДатаНачала = Объект.Лот.ПериодЗакупок.ДатаНачала;
		ОбъектДляЗаполнения.ДатаОкончания = Объект.Лот.ПериодЗакупок.ДатаОкончания;
	Иначе
		ОбъектДляЗаполнения.ДатаНачала = НачалоГода(ДатаНачалаОкончанияПоставка.ДатаНачала);
		ОбъектДляЗаполнения.ДатаОкончания = КонецГода(ДатаНачалаОкончанияПоставка.ДатаОкончания);
	КонецЕсли;	
	ОбъектДляЗаполнения.ДатаКУрса = Объект.Лот.ДатаНачалаПериодаПоставки;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = Объект.Дата;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКроссТаблицы(Контекст) Экспорт
КонецПроцедуры

&НаСервере
Процедура СкопироватьВКроссТаблицу(Контекст) Экспорт
	УсловияПоНоменклатуреПоПериодам.Очистить();
	Если НЕ ЗначениеЗаполнено(ПериодЗакупок) Тогда
		Возврат;
	КонеЦЕсли;
	РезультатЗапроса = ПолучитьЗапросТЧНоменклатурыПоПериодам(
		Объект.УсловияПоНоменклатуре,
		ЭтаФорма[Контекст.ИмяТаблицыПериодов],
		Контекст.ИменаКлючевыхПолейКроссТаблицы);
	ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		РезультатЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличества(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииКоличестваКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	УсловияПоНоменклатуреПоПериодамПриАктивизацииЯчейки(
		Элементы.УсловияПоНоменклатуреПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦены(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииЦеныКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	УсловияПоНоменклатуреПоПериодамПриАктивизацииЯчейки(
		Элементы.УсловияПоНоменклатуреПоПериодам);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикПриИзмененииСуммыКолонки(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей,
		Элемент.Имя);
	СтрокаТоваров = Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные;
	Если СтрокаТоваров <> Неопределено
		 И СтрокаТоваров.ЭтоКатегорияНоменклатуры Тогда
		УсловияПоНоменклатуреПоПериодамПриАктивизацииЯчейки(
			Элементы.УсловияПоНоменклатуреПоПериодам);
		ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область РаботаСКроссТаблицейПотребностей


&НаСервере
Процедура ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(РезультатЗапроса)
	ЦентрализованныеЗакупкиУХ.ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
		УсловияПоНоменклатуреПоПериодам,
		РезультатЗапроса,
		ЦентрализованныеЗакупкиКлиентСерверУХ.ИменаКлючевыхПолейПредложенияПоставщика());
	ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьИтоговыеПоказателиКроссТаблицы(
		УсловияПоНоменклатуреПоПериодам,
		ЭтаФорма.ПериодыЗакупок,
		Объект.ЦенаВключаетНДС);	
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуДокументаИзКроссТаблицы(Форма)
	Форма.Объект.СуммаДокумента =
		Форма.УсловияПоНоменклатуреПоПериодам.Итог("Сумма");
	Форма.Объект.СуммаНДС =
		Форма.УсловияПоНоменклатуреПоПериодам.Итог("СуммаНДС");
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамНоменклатураПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикНоменклатураПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамХарактеристикаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикХарактеристикаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
КонецПроцедуры
	
&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамЕдиницаИзмеренияПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЕдиницаИзмеренияПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамЦенаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЦенаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамСтавкаНДСПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикСтавкаНДСПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры
	
&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма, 
		"УсловияПоНоменклатуреПоПериодам");
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамПослеУдаления(Элемент)
	ЦентрализованныеЗакупкиКлиентСерверУХ.РассчитатьНомерСтрокиКроссТаблицы(
		ЭтаФорма, 
		"УсловияПоНоменклатуреПоПериодам");
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамПриАктивизацииЯчейки(Элемент)
	
	АктивныеПериоды = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(Новый Структура("Активная", Истина));
	Если АктивныеПериоды.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоПоКолонке = "";
	ИтогоПоСтроке = НСтр("ru='Всего по строке: %СуммаПоСтроке% %Валюта%.'");
		
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%Валюта%", Строка(Объект.ВалютаДокумента));
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%СуммаПоСтроке%", Формат(ТекущиеДанные.Сумма, "ЧДЦ=2; ЧН=0,00"));
	
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		Для каждого Период Из АктивныеПериоды Цикл
			Если Элемент.ТекущийЭлемент.Имя = "УсловияПоНоменклатуреПоПериодамЦена_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "УсловияПоНоменклатуреПоПериодамКоличество_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "УсловияПоНоменклатуреПоПериодамСумма_"+Период.ИмяКолонки Тогда
				
				СуммаПоКолонке = ЭтаФорма["УсловияПоНоменклатуреПоПериодамСумма_"+ Период.ИмяКолонки];
				ИтогоПоКолонке = НСтр("ru='Всего за период %ПериодЗаголовок%: %СуммаПоКолонке% %Валюта%'");
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%ПериодЗаголовок%", Период.Заголовок);
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%СуммаПоКолонке%", Формат(СуммаПоКолонке, "ЧДЦ=2; ЧН=0,00"));
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%Валюта%", Строка(Объект.ВалютаДокумента));
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИтогоПоСтрокеКолонке = ИтогоПоСтроке + " " + ИтогоПоКолонке;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ГруппаСтаницаНоменклатура.ТолькоПросмотр = Истина И
		Поле.Имя = "УсловияПоНоменклатуреПоПериодамНоменклатура" Тогда
		ЦентрализованныеЗакупкиКлиентУХ.ОткрытьФормуНоменклатурыСтрокиКроссТаблицы(
			УсловияПоНоменклатуреПоПериодам,
			ВыбраннаяСтрока,
			ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МассивКонтрагентов = ПолучитьМассивКонтрагентовПредыдущейПереторжки(Объект.Лот);
	Если МассивКонтрагентов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФиксМассивКонтрагентов = Новый ФиксированныйМассив(МассивКонтрагентов);
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", ФиксМассивКонтрагентов);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		СтруктураПараметров.Вставить("ДатаСреза", Объект.Дата);
		СтруктураПараметров.Вставить("Лот", Объект.Лот);
		СтрокаФормы = "Справочник.Контрагенты.ФормаВыбора";
		Если ТребуетсяКвалификационныйОтбор Тогда
			СтрокаФормы = "РегистрСведений.УчастникиКвалифицированныеПоЛоту.Форма.ФормаВыбораКвалифицированныхПоЛоту";
		ИначеЕсли ПриоритетУчастияМалогоИСреднегоПредпринимательства Тогда
			СтрокаФормы = "Документ.ПредложениеПоставщика.Форма.ФормаВыбораСМСП";
		Иначе
			СтрокаФормы = "Справочник.Контрагенты.ФормаВыбора";
		КонецЕсли;
		ОткрытьФорму(СтрокаФормы, СтруктураПараметров, Элементы.Контрагент);
	Иначе
		// Ограничений нет. Используем стандартную обработку.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамТоварНеПоставляетсяПриИзменении(Элемент)
	Если Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные.ТоварНеПоставляется Тогда
		Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные.Цена = 0;
		Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные.Количество = 0;
		
		АктивныеПериоды = ЭтаФорма.ПериодыЗакупок.НайтиСтроки(Новый Структура("Активная", Истина));
		Для каждого Период Из АктивныеПериоды Цикл
			Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные["Количество_"+Период.ИмяКолонки] = 0;	
			Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные["Сумма_"+Период.ИмяКолонки] = 0;	
		КонецЦикла;
		
	КонецЕсли;
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЦенаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРаспределениеПоПериоду(Команда)
	Элементы.ПоказатьРаспределениеПоПериоду.Пометка = НЕ Элементы.ПоказатьРаспределениеПоПериоду.Пометка;
	Элементы.УсловияПоНоменклатуреПоПериодам.Подчиненныеэлементы.УсловияПоНоменклатуреПоПериодамГруппаРеквизитов.Видимость = Элементы.ПоказатьРаспределениеПоПериоду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамСуммаПриИзменении(Элемент)
	ЦентрализованныеЗакупкиКлиентУХ.ТиповойОбработчикЦенаПриИзменении(
		ЭтаФорма,
		ЭтаФорма.ПараметрыКроссТаблицыПотребностей);
	ОбновитьСуммуДокументаИзКроссТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения(
		"ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
		НСтр("ru = 'Заполнить поле ""Условия оплаты текстовое описание"" по данным соглашения поставщика?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьОтборСоглашения();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСоглашения()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация",ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Лот,"ОрганизацияДляЗаключенияДоговора")));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валюта",объект.ВалютаДокумента));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС",Объект.ЦенаВключаетНДС));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ИспользуютсяДоговорыКонтрагентов",Истина));	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КонтролироватьЦеныЗакупки",Объект.Лот.ЗапретПревышенияНМЦ));
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.РегистрироватьЦеныПоставщика",Истина));
	КонецЕсли;
	
	Элементы.Соглашение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСоглашениеПоЛотуНаСервере()
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Лот,"Соглашение")) Тогда 
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Не заполнено условие договора в лоте предложения'");
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СоглашениеИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Лот,"Соглашение");
	
	Попытка
		НовоеСоглашение = СоглашениеИсточник.Скопировать();
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			НовоеСоглашение.Партнер = Объект.Партнер;
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент.Партнер) Тогда
			НовоеСоглашение.Партнер = Объект.Контрагент.Партнер;
		Иначе
			НовоеСоглашение.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		КонецЕсли;	
		НовоеСоглашение.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		НовоеСоглашение.Контрагент = Объект.Контрагент;
		НовоеСоглашение.КонтролироватьЦеныЗакупки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Лот,"ЗапретПревышенияНМЦ");
		НовоеСоглашение.Наименование = "Условие оплаты по Лоту " + СокрЛП(Объект.Лот);
		НовоеСоглашение.Записать();
		Объект.УсловияОплаты = НадписьЭтапыОплатаДляСоглашений(НовоеСоглашение);
		Объект.Соглашение = НовоеСоглашение.Ссылка;
		Элементы.СоздатьСоглашениеПоЛоту.Видимость = Ложь;
		Модифицированность = Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Ошибка = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Невозможно создать новое соглашение по лоту по причине ""%Ошибка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ошибка%", Строка(Ошибка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоглашениеПоЛоту(Команда)
	СоздатьСоглашениеПоЛотуНаСервере();
КонецПроцедуры



&НаКлиенте
Процедура КонтрагентБезОтбораПриИзменении(Элемент)
	ПриИзмененииКонтрагентаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентБезОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МассивКонтрагентов = ПолучитьМассивКонтрагентовПредыдущейПереторжки(Объект.Лот);
	Если МассивКонтрагентов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФиксМассивКонтрагентов = Новый ФиксированныйМассив(МассивКонтрагентов);
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", ФиксМассивКонтрагентов);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		СтруктураПараметров.Вставить("ДатаСреза", Объект.Дата);
		СтруктураПараметров.Вставить("Лот", Объект.Лот);
		СтрокаФормы = "Справочник.Контрагенты.ФормаВыбора";
		Если ТребуетсяКвалификационныйОтбор Тогда
			СтрокаФормы = "РегистрСведений.УчастникиКвалифицированныеПоЛоту.Форма.ФормаВыбораКвалифицированныхПоЛоту";
		ИначеЕсли ПриоритетУчастияМалогоИСреднегоПредпринимательства Тогда
			СтрокаФормы = "Документ.ПредложениеПоставщика.Форма.ФормаВыбораСМСП";
		Иначе
			СтрокаФормы = "Справочник.Контрагенты.ФормаВыбора";
		КонецЕсли;
		ОткрытьФорму(СтрокаФормы, СтруктураПараметров, Элементы.Контрагент);
	Иначе
		// Ограничений нет. Используем стандартную обработку.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамНоменклатураПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);
	Если ИспользоватьПартнеровИКонтрагентов Тогда
		НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, Объект.Партнер, ТекущаяСтрока, Элемент.Заголовок,ОповещениеОЗакрытие);
	Иначе
		НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Контрагент,"Партнер"), ТекущаяСтрока, Элемент.Заголовок,ОповещениеОЗакрытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбораНоменклатурыПартнера(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.НоменклатураПоставщика = ВыбранноеЗначение;
	КонецЕсли;	
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.ТекущаяСтрока.НоменклатураПартнера = ВыбранноеЗначение;
	
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоНоменклатуреПоПериодамНоменклатураПоставщикаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.УсловияПоНоменклатуреПоПериодам.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);

	Если ИспользоватьПартнеровИКонтрагентов Тогда
		НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, Объект.Партнер, ТекущаяСтрока, Элемент.Заголовок,ОповещениеОЗакрытие);
	Иначе
		НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Контрагент,"Партнер"), ТекущаяСтрока, Элемент.Заголовок,ОповещениеОЗакрытие);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти