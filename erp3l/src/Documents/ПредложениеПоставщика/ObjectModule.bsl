#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	
#Область ОбработчикиСобытийОбъекта


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (НЕ ПроверитьЗаполнениеХарактеристикОтменить()
		Или НЕ ПроверитьКоличествоИСуммыПоЛоту() ИЛИ НЕ ПроверитьСообщитьЕстьПоставляемыеТовары()) 	
		ИЛИ ПроверитьСтранаПроисхождения()
		Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ДопущенКУчастию Тогда
		Если НЕ ПроверитьСообщитьМожноЗаписатьПредложение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если (РежимЗаписи = РежимЗаписиДокумента.Проведение)
			 И НЕ ЗначениеЗаполнено(НомерЗаявки) Тогда
			ДополнительныеСвойства.Вставить("флПроверить", Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	ЗаполнитьДвиженияУсловияПредложенийПоставщиков();
	ЗаписатьРегистрПредложенияПоставщиков();
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	НаборЗаписей = РегистрыСведений.ПредложенияПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредложениеПоставщика.Установить(Ссылка);
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ДопущенКУчастию = Истина;
	// Заполнение по данным заполнения.
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ТипЗаполнения = ТипЗнч(ДанныеЗаполнения);
		Если ТипЗаполнения = Тип("Структура") Тогда
			// Заполнение по структуре свойств.
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		ИначеЕсли ТипЗаполнения = Тип("СправочникСсылка.АнкетыПоставщиков") Тогда
			// Заполнение анкеты.
			АнкетаПоставщика = ДанныеЗаполнения;
		ИначеЕсли ТипЗаполнения = Тип("СправочникСсылка.Лоты") Тогда
			// Заполнение лота.
			Лот = ДанныеЗаполнения;
		ИначеЕсли ТипЗаполнения = Тип("ДокументСсылка.ПредложениеПоставщика") Тогда
			// Заполнение предыдущего предложения.
			ПредыдущееПредложение = ДанныеЗаполнения.Ссылка;
		КонецЕсли;
	КонецЕсли;
	// Заполнение по лоту.
	Если (ЗначениеЗаполнено(Лот)) И (НЕ ЗначениеЗаполнено(ПредыдущееПредложение)) Тогда
		// Проверка данных лота.
		УтвержденаЗакупочнаяПроцедура = ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(Лот.Владелец);
		Если НЕ УтвержденаЗакупочнаяПроцедура Тогда
			ТекстСообщения = НСтр("ru = 'Ввод на основании можно осуществлять только на основании лота утвержденной закупочной процедуры'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Если (Документы.ТипВсеСсылки().СодержитТип(ТипЗаполнения)) И (НЕ ДанныеЗаполнения.Проведен) Тогда
			ТекстСообщения = НСтр("ru='Ввод на основании можно осуществлять только на основании проведенного документа'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Если НЕ (ПолучитьФункциональнуюОпцию("НеТребоватьРегистрацииУчастниковДляОткрытыхСпособовЗакупок") 
			И ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Лот.ЗакупочнаяПроцедура,"ЗакрытаяЗакупка") = Ложь)
			И ЗакрытыеЗакупкиУХ.ПолучитьКонтрагентовЗакупок(Лот.ЗакупочнаяПроцедура).Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Ввод на основании можно осуществлять только для закупочных процедур с подтвержденными участниками'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;		
		
		// Непосредственное заполнение.
		ЗаполнитьПоДаннымЛота();
	КонецЕсли;
	// Заполнение по предыдущему Предложению.
	Если ЗначениеЗаполнено(ПредыдущееПредложение) Тогда
		ЗаполнитьПоПредыдущемуПредложению(ПредыдущееПредложение);
	Иначе
		// Предложение не указано. Пропускаем заполнение.
	КонецЕсли;
	// Дозаполнение общих реквизитов.
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	Если ЭтоВнешнийПользователь Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		АнкетаПоставщика = ТекущийПользователь.ОбъектАвторизации;
	Иначе
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АнкетаПоставщика) И (ЭтоВнешнийПользователь ИЛИ НЕ ЗначениеЗаполнено(Контрагент)) Тогда
		Контрагент = АнкетаПоставщика.Контрагент;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		КонтактноеЛицоКонтрагента = 
			УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьОсновноеКонтактноеЛицоКонтрагента(Контрагент);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОтправкиЗаявки) Тогда
		ДатаОтправкиЗаявки = ТекущаяДатаСеанса();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ТекущийПользователь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ПроверитьСообщитьНеЗаполненыУчастникиЗакупки() 
		Тогда
		Отказ = Истина;
	КонецЕсли;
	//Проверка соглашения
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ПроверкаСоглашения(Отказ);
	КонецЕсли;
	//Проверка соглашения	
КонецПроцедуры


#КонецОбласти


#Область ВнешнийПрограмныйИнтерфейс


Процедура ЗаполнитьПоДаннымЛота() Экспорт
	УстановитьНовыйНомер();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Лот.Владелец);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Лот);
	Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();

	УсловияПоНоменклатуре.Очистить();
	Если ЗначениеЗаполнено(Лот) Тогда
		РезультатЗапроса = ПолучитьРезультатЗапросаКПотребностямВЛоте();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаНоменклатуры = УсловияПоНоменклатуре.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		ЦентрализованныеЗакупкиКлиентСерверУХ.ЗаполнитьСуммуНДСТаблицы(УсловияПоНоменклатуре, ЦенаВключаетНДС);
		СуммаНДС = УсловияПоНоменклатуре.Итог("СуммаНДС");
		СуммаДокумента = УсловияПоНоменклатуре.Итог("Сумма");
		ЗаполнитьПредложенияЕдинственногоПоставщикаПоЛоту(Лот);
		ЗакупкаПредложения = Лот.ЗакупочнаяПроцедура;
		ТекущийНомерПереторжки = РегистрыСведений.ПереторжкаЗакупок.ПолучитьАктуальныйНомерПереторжки(ЗакупкаПредложения);
		НомерПереторжки	= ТекущийНомерПереторжки;
	Иначе
		СуммаДокумента = 0;
		СуммаНДС = 0;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьСоглашениеПоЗакупочнойПроцедуре(Соглашение)
	
	Попытка
		НовоеСоглашение = Соглашение.Скопировать();
		НовоеСоглашение.Контрагент = Контрагент;
		Если ЗначениеЗаполнено(Контрагент.Партнер) Тогда
			НовоеСоглашение.Партнер = Контрагент.Партнер;
		КонецЕсли;	
		НовоеСоглашение.ЦенаВключаетНДС = ЦенаВключаетНДС;
		НовоеСоглашение.Наименование = "Условие оплаты по Предложению участника " + СокрЛП(Номер);
		НовоеСоглашение.КонтролироватьЦеныЗакупки = Лот.ЗапретПревышенияНМЦ;
		УсловияОплаты = ОпределитьУсловиеОплатыПоСоглашению(НовоеСоглашение);
		Новоесоглашение.Записать();
		Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
		Соглашение = НовоеСоглашение.Ссылка;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Ошибка = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Невозможно создать новое соглашение по лоту по причине ""%Ошибка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ошибка%", Строка(Ошибка));
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти


#Область ВнутреннийПрограмныйИнтерфейс


Функция ОпределитьУсловиеОплатыПоСоглашению(Соглашение) Экспорт
	
	
	ФормаОплаты            = Соглашение.ФормаОплаты;
	ЭтапыГрафикаОплаты     = Соглашение.ЭтапыГрафикаОплаты;
	КоличествоЭтаповОплаты = ЭтапыГрафикаОплаты.Количество();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты));
	
	ТекстЭтаповОплаты = "";
	Если КоличествоЭтаповОплаты = 0 Тогда
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапы не указаны';
																|en = 'steps are not set'"), , ));
		
	ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
		
		МассивСтрок.Добавить(" ");
		Для Сч=1 По КоличествоЭтаповОплаты Цикл
			СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
			ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2% %3 дн';
					|en = '%1 %2% (%3 days)'"),
				ПредставлениеВариантаОплаты(СтрокаОплаты.ВариантОплаты),
				СтрокаОплаты.ПроцентПлатежа, СтрокаОплаты.Сдвиг);
			МассивСтрок.Добавить(ТекстЭтаповОплаты);
			МассивСтрок.Добавить(", ");
		КонецЦикла;
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
	Иначе
		
		ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			КоличествоЭтаповОплаты,
			НСтр("ru = 'этапы';
				|en = 'stages'"), НСтр("ru = 'этапа';
									|en = 'stage'"), НСтр("ru = 'этапов';
														|en = 'steps'"), НСтр("ru = 'м';
																				|en = 'm'"));
			
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'в';
									|en = 'in'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
		
	КонецЕсли;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
	Возврат ТекстНадписи;
	
КонецФункции

Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	Представление = "";
	
	Если ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
		Представление = НСтр("ru = 'Предоплата';
							|en = 'Prepayment'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
		Представление = НСтр("ru = 'Аванс';
							|en = 'Advance'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитСдвиг")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитСдвиг") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru = 'Оплата: Любая';
							|en = 'Payment: Any'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru = 'Оплата платежной картой';
							|en = 'Payment by payment card'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru = 'Взаимозачет';
							|en = 'Offsetting'");
	Иначе
		Представление = НСтр("ru = '%ФормаОплаты% оплата';
							|en = '%ФормаОплаты% payment'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции


Функция ПроверитьСообщитьМожноЗаписатьПредложение()
	РезультатФункции = Истина;
	мПредложений = ПолучитьДопущенныйКУчастиюАналогДокумента();
	Если мПредложений.Количество() > 0 Тогда
		Если Не ПометкаУдаления Тогда
			СпособВыбораПоставщика = СпособВыбораПоставщикаЛота();
			СпособЕдинственныйПоставщик = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика;
			Если СпособВыбораПоставщика = СпособЕдинственныйПоставщик Тогда
				ТекстСообщенияПроверки = НСтр("ru = 'Уже есть предложение поставщика по данному лоту'");
			Иначе
				ТекстСообщенияПроверки = НСтр("ru = 'Операция отменена: по контрагенту %Контрагент% и лоту %Лот% уже введено предложение поставщика'");
				ТекстСообщенияПроверки = СтрЗаменить(ТекстСообщенияПроверки, "%Контрагент%", Строка(Контрагент));
				ТекстСообщенияПроверки = СтрЗаменить(ТекстСообщенияПроверки, "%Лот%", Строка(Лот));
			КонецЕсли;
			Для Каждого ПредложениеКонкурент Из мПредложений Цикл
				ТекстСообщенияПроверки = ТекстСообщенияПроверки + Символы.ПС;
				ТекстСообщенияПроверки = ТекстСообщенияПроверки + Строка(ПредложениеКонкурент);
			КонецЦикла;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщенияПроверки;
			Сообщение.Сообщить();
			РезультатФункции = Ложь;
		Иначе
			РезультатФункции = Истина;		// Разрешаем устанавливать пометку удаления для повторных предложений.
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции
		
// Заполняет текущий документ данными из запроса на закупку, который сопоставлен
// лоту ЛотВход.
Процедура ЗаполнитьПредложенияЕдинственногоПоставщикаПоЛоту(ЛотВход)
	ТекЗакупочнаяПроцедура = ЛотВход.Владелец;
	Если ЗначениеЗаполнено(ТекЗакупочнаяПроцедура) Тогда
		ЭтоЗакупкаУЕдинственногоПоставщика = ТекЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика;
		Если ЭтоЗакупкаУЕдинственногоПоставщика Тогда
			ЗапросНаЗакупку = Документы.ОбоснованиеТребованийКЗакупочнойПроцедуре.ПолучитьЗапросНаПроведениеЗакупкиПоЛоту(ЛотВход);
			Если ЗначениеЗаполнено(ЗапросНаЗакупку) Тогда
				УсловияПоставки			 = ЗапросНаЗакупку.УсловияПоставки;
				СрокиВыполненияДоговора	 = ЗапросНаЗакупку.СрокиВыполненияДоговора;
				СрокПоставки			 = ЗапросНаЗакупку.СрокПоставки;
				УсловиеОплаты			 = ЗапросНаЗакупку.УсловиеОплаты;
				УсловияОплаты			 = ЗапросНаЗакупку.УсловияОплаты;
				Контрагент				 = ЗапросНаЗакупку.ЕдинственныйПоставщик;
			Иначе
				// Нет запроса. Не заполняем.
			КонецЕсли;
		Иначе
			// Не закупка у единственного поставщика. Нет данных для заплнения по единственному поставщику.
		КонецЕсли;
	Иначе
		// Закупочная процедура не указана.
	КонецЕсли; 
КонецПроцедуры		// ЗаполнитьПредложенияЕдинственногоПоставщикаПоЛоту()

// Заполняет текущий документ по предыдущему предложению поставщика 
// ПредложениеВход.
Процедура ЗаполнитьПоПредыдущемуПредложению(ПредложениеВход)
	// Заполнение шапки.
	ЗакупкаПредложения = ПредложениеВход.Лот.ЗакупочнаяПроцедура;
	ТекущийНомерПереторжки = РегистрыСведений.ПереторжкаЗакупок.ПолучитьАктуальныйНомерПереторжки(ЗакупкаПредложения);
	АнкетаПоставщика			 = ПредложениеВход.АнкетаПоставщика;
	ВалютаДокумента				 = ПредложениеВход.ВалютаДокумента;
	ДатаОтправкиЗаявки			 = ПредложениеВход.ДатаОтправкиЗаявки;
	ДопущенКУчастию				 = ПредложениеВход.ДопущенКУчастию;
	Комментарий					 = ПредложениеВход.Комментарий;
	КонтактноеЛицоКонтрагента	 = ПредложениеВход.КонтактноеЛицоКонтрагента;
	Контрагент					 = ПредложениеВход.Контрагент;
	Лот							 = ПредложениеВход.Лот;
	НомерЗаявки					 = ПредложениеВход.НомерЗаявки;
	ПоследняяЦена				 = ПредложениеВход.ПоследняяЦена;
	ПредпоследняяЦена			 = ПредложениеВход.ПредпоследняяЦена;
	ПричинаОтказаВДоступе		 = ПредложениеВход.ПричинаОтказаВДоступе;
	СрокиВыполненияДоговора		 = ПредложениеВход.СрокиВыполненияДоговора;
	СрокПоставки				 = ПредложениеВход.СрокПоставки;
	СуммаДокумента				 = ПредложениеВход.СуммаДокумента;
	СуммаНДС					 = ПредложениеВход.СуммаНДС;
	УсловиеОплаты				 = ПредложениеВход.УсловиеОплаты;
	УсловияОплаты				 = ПредложениеВход.УсловияОплаты;
	УсловияПоставки				 = ПредложениеВход.УсловияПоставки;
	ЦенаВключаетНДС				 = ПредложениеВход.ЦенаВключаетНДС;
	ЧастичноеПредложение		 = ПредложениеВход.ЧастичноеПредложение;
	НомерПереторжки				 = ТекущийНомерПереторжки;
	// Заполнение табличной части УсловияПоНоменклатуре.
	Для Каждого ТекУсловияПоНоменклатуре Из ПредложениеВход.УсловияПоНоменклатуре Цикл
		НоваяСтрока = УсловияПоНоменклатуре.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУсловияПоНоменклатуре);
	КонецЦикла;	
	// Заполнение табличной части УсловияПоНоменклатуреЭТП.
	Для Каждого ТекУсловияПоНоменклатуреЭТП Из ПредложениеВход.УсловияПоНоменклатуреЭТП Цикл
		НоваяСтрока = УсловияПоНоменклатуреЭТП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУсловияПоНоменклатуреЭТП);
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьПоПредыдущемуПредложению()

Функция ПолучитьРезультатЗапросаКПотребностямВЛоте()
	ВалютаЛота = Лот.ВалютаДокумента;
	Если ВалютаЛота = ВалютаДокумента Тогда
		КоэффициентПересчетаВалюты = 1;
	Иначе
		КоэффициентПересчетаВалюты =
			РаботаСКурсамиВалют.ПересчитатьВВалюту(1, ВалютаЛота, ВалютаДокумента, Дата);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛотыНоменклатура.ПериодПотребности КАК ПериодПотребности,
		|	ЛотыНоменклатура.Номенклатура КАК Номенклатура,
		|	ЛотыНоменклатура.Характеристика КАК Характеристика,
		|	ЛотыНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ЕСТЬNULL(ЛотыНоменклатура.ЕдиницаИзмерения, &ПустаяЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	МИНИМУМ(1) КАК Коэффициент,
		|	СУММА(ЛотыНоменклатура.Количество) КАК Количество,
		|	СУММА(ЛотыНоменклатура.Сумма)  / ВЫБОР
		|		КОГДА СУММА(ЛотыНоменклатура.Количество) = 0
		|			ТОГДА 1
		|		ИНАЧЕ СУММА(ЛотыНоменклатура.Количество)
		|	КОНЕЦ КАК Цена,
		|	СУММА(ЛотыНоменклатура.Сумма ) КАК Сумма,
		|	МАКСИМУМ(ЕСТЬNULL(ЛотыНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))) КАК СтавкаНДС,
		|	ЛотыНоменклатура.Ссылка КАК Лот,
		|	ЛотыНоменклатура.Ссылка.ЗапретПревышенияНМЦ КАК ЗапретПревышенияНМЦ,
		|	ЛотыНоменклатура.Проект КАК Проект		
		|ИЗ
		|	Справочник.Лоты.Номенклатура КАК ЛотыНоменклатура
		|ГДЕ
		|	ЛотыНоменклатура.Ссылка = &Лот
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛотыНоменклатура.ПериодПотребности,
		|	ЛотыНоменклатура.Номенклатура,
		|	ЛотыНоменклатура.МестоПоставки,
		|	ЕСТЬNULL(ЛотыНоменклатура.ЕдиницаИзмерения, &ПустаяЕдиницаИзмерения),
		|	ЛотыНоменклатура.Характеристика,
		|	ЛотыНоменклатура.Ссылка,
		|	ЛотыНоменклатура.Ссылка.ЗапретПревышенияНМЦ,
		|	ЛотыНоменклатура.Проект ";
	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.УстановитьПараметр(
		"КоэффициентПересчетаВалюты",
		КоэффициентПересчетаВалюты);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения",
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьПустуюЕдиницуИзмерения());
	Возврат Запрос.Выполнить();
КонецФункции

Функция СпособВыбораПоставщикаЛота()
	Если ЗначениеЗаполнено(Лот) Тогда
		Возврат Лот.Владелец.СпособВыбораПоставщика;
	КонецЕсли;
	Возврат Перечисления.СпособыВыбораПоставщика.ПустаяСсылка();
КонецФункции

Функция ПолучитьДопущенныйКУчастиюАналогДокумента()
	СпособЗакупкиУЕдинственногоПоставщика = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика;
	Отбор = Новый Структура;
	Отбор.Вставить("Лот",				 Лот);
	Отбор.Вставить("ДопущенКУчастию",	 Истина);
	Отбор.Вставить("Проведен",			 Истина);
	Отбор.Вставить("НомерПереторжки",	 НомерПереторжки);
	СпособВыбораПоставщика = СпособВыбораПоставщикаЛота();
	Если СпособВыбораПоставщика <> СпособЗакупкиУЕдинственногоПоставщика Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	МассивДокументов = ЦентрализованныеЗакупкиУХ.ПолучитьДокументыПоОтбору("ПредложениеПоставщика", Отбор, Ссылка);
	Возврат МассивДокументов;
КонецФункции

Функция ПолучитьВыборкуДляЗаписиУсловий()
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
			ВалютаДокумента,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			Дата);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Ссылка КАК Регистратор,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Дата КАК Период,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот.Владелец КАК ЗакупочнаяПроцедура,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот КАК Лот,
		|	&Ссылка КАК ПредложениеПоставщика,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Номенклатура КАК Номенклатура,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Характеристика КАК Характеристика,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.ПериодПотребности КАК ПериодПотребности,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.МестоПоставки КАК МестоПоставки,
		|	СУММА(ПредложениеПоставщикаУсловияПоНоменклатуре.Количество * ПредложениеПоставщикаУсловияПоНоменклатуре.Коэффициент) КАК Количество,
		|	СРЕДНЕЕ(ПредложениеПоставщикаУсловияПоНоменклатуре.Сумма / ВЫБОР
		|			КОГДА ПредложениеПоставщикаУсловияПоНоменклатуре.Количество = 0
		|				ТОГДА 1
		|			ИНАЧЕ ПредложениеПоставщикаУсловияПоНоменклатуре.Количество * ПредложениеПоставщикаУсловияПоНоменклатуре.Коэффициент
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ПредложениеПоставщикаУсловияПоНоменклатуре.Сумма) КАК Сумма,
		|	СУММА(ПредложениеПоставщикаУсловияПоНоменклатуре.СуммаНДС) КАК СуммаНДС,
		|	МАКСИМУМ(ПредложениеПоставщикаУсловияПоНоменклатуре.Коэффициент) КАК Коэффициент,
		|	МАКСИМУМ(ПредложениеПоставщикаУсловияПоНоменклатуре.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтавкаНДС КАК СтавкаНДС,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.ТоварНеПоставляется КАК ТоварНеПоставляется,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.ВалютаДокумента КАК Валюта
		|ИЗ
		|	Документ.ПредложениеПоставщика.УсловияПоНоменклатуре КАК ПредложениеПоставщикаУсловияПоНоменклатуре
		|ГДЕ
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.ПериодПотребности,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.МестоПоставки,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Номенклатура,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Дата,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот.Владелец,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтавкаНДС,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Характеристика,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтраныПроисхождения,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтранаПроизводителя,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.ТоварНеПоставляется,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.НоменклатураПоставщика,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.ВалютаДокумента";
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Процедура ЗаполнитьДвиженияУсловияПредложенийПоставщиков()
	Движения.УсловияПредложенийПоставщиков.Записывать = Истина;
	Если ДопущенКУчастию Тогда
		РегистрыСведений.УсловияПредложенийПоставщиков.ДобавитьЗаписи(
			Движения.УсловияПредложенийПоставщиков,
			ПолучитьВыборкуДляЗаписиУсловий());
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьРегистрПредложенияПоставщиков()
	ОписаниеКоэффициента =
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
			ВалютаДокумента,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(),
			Дата);
	НаборЗаписей = РегистрыСведений.ПредложенияПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредложениеПоставщика.Установить(Ссылка);
	Если ДопущенКУчастию Тогда
		Если УсловияПоНоменклатуре.Количество() = 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена номенклатура предложения!'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ПредложениеПоставщика = Ссылка;
		НоваяСтрока.СуммаДокумента = СуммаДокумента 
			* ОписаниеКоэффициента.Коэффициент
			/ ОписаниеКоэффициента.Кратность;
	КонецЕсли;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПроверитьЗаполнениеХарактеристикОтменить() Экспорт
	Отказ = Ложь;
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект,
		Новый Массив,
		Отказ,
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПараметрыПроверкиЗаполненияХарактеристик(
			"УсловияПоНоменклатуре"));
	Возврат НЕ Отказ;
КонецФункции


Функция ПроверитьСтранаПроисхождения()
	Отказ = Ложь;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки") Тогда
		Для Каждого СтрокаУсловия Из УсловияПоНоменклатуре Цикл 
			Если Не ЗНачениеЗаполнено(СтрокаУсловия.СтранаПроизводителя)  Тогда
			ТекстСообщения = НСтр("ru='Не заполнена страна производителя номенклатуры предложения по лоту: '");
			ТекстСообщения = ТекстСообщения + " за "+Строка(СтрокаУсловия.ПериодПотребности) + " по номенклатуре " + Строка(СтрокаУсловия.Номенклатура) + ",";		
			ТекстСообщения = Лев(ТекстСообщения,СтрДлина(ТекстСообщения)-1);
			КлючДанных = ОбщегоНазначенияУХ.КлючДанныхДляСообщенияПользователю(Ссылка);
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			КлючДанных,
			,
			,
			Отказ);
		    Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Отказ;
КонецФункции	

Функция ПроверитьКоличествоИСуммыПоЛоту() Экспорт
	Отказ = Ложь;
	Запрос = Новый Запрос;
	ТЧПотребностей = ПолучитьРезультатЗапросаКПотребностямВЛоте();
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("УсловияПоНоменклатуре",УсловияПоНоменклатуре.Выгрузить());
	Запрос.УстановитьПараметр("ТЧПотребностей",ТЧПотребностей.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧПотребностей.ПериодПотребности КАК ПериодПотребности,
	               |	ТЧПотребностей.Номенклатура КАК Номенклатура,
	               |	ТЧПотребностей.Характеристика КАК Характеристика,
	               |	ТЧПотребностей.МестоПоставки КАК МестоПоставки,
	               |	ТЧПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТЧПотребностей.Количество КАК Количество,
	               |	ТЧПотребностей.Сумма КАК Сумма,
	               |	ТЧПотребностей.Коэффициент КАК Коэффициент,
	               |	ТЧПотребностей.СтавкаНДС КАК СтавкаНДС,
	               |	ТЧПотребностей.Лот КАК Лот,
	               |	ТЧПотребностей.ЗапретПревышенияНМЦ КАК ЗапретПревышенияНМЦ
	               |ПОМЕСТИТЬ ТЧПотребностей
	               |ИЗ
	               |	&ТЧПотребностей КАК ТЧПотребностей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.ПериодПотребности КАК ПериодПотребности,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.Номенклатура КАК Номенклатура,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.Характеристика КАК Характеристика,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.МестоПоставки КАК МестоПоставки,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.Количество КАК Количество,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.Коэффициент КАК Коэффициент,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.СтавкаНДС КАК СтавкаНДС,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.СуммаНДС КАК СуммаНДС,
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.Сумма КАК Сумма
	               |ПОМЕСТИТЬ НоменклатураПредложения
	               |ИЗ
	               |	&УсловияПоНоменклатуре КАК ПредложениеПоставщикаУсловияПоНоменклатуре
	               |ГДЕ
	               |	ПредложениеПоставщикаУсловияПоНоменклатуре.ТоварНеПоставляется = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧПотребностей.Номенклатура КАК Номенклатура,
	               |	НоменклатураПредложения.ПериодПотребности КАК ПериодПотребности,
	               |	НоменклатураПредложения.Количество КАК Количество,
	               |	ЕСТЬNULL(ТЧПотребностей.Количество,0) КАК КоличествоПоЛоту,
	               |	ЕСТЬNULL(НоменклатураПредложения.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураЛота,
	               |	НоменклатураПредложения.Сумма КАК Сумма,
	               |	ЕСТЬNULL(ТЧПотребностей.Сумма,0) КАК СуммаПоЛоту,
	               |	ЕСТЬNULL(ТЧПотребностей.ЗапретПревышенияНМЦ,Ложь) КАК ЗапретПревышенияНМЦ
	               |ИЗ
	               |	НоменклатураПредложения КАК НоменклатураПредложения 
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЧПотребностей КАК ТЧПотребностей
	               |		ПО НоменклатураПредложения.Номенклатура = ТЧПотребностей.Номенклатура
	               |			И НоменклатураПредложения.ПериодПотребности = ТЧПотребностей.ПериодПотребности
	               |			И НоменклатураПредложения.Характеристика = ТЧПотребностей.Характеристика
	               |			И НоменклатураПредложения.МестоПоставки = ТЧПотребностей.МестоПоставки
	               |			И НоменклатураПредложения.ЕдиницаИзмерения = ТЧПотребностей.ЕдиницаИзмерения
	               |			И НоменклатураПредложения.Коэффициент = ТЧПотребностей.Коэффициент
	               |			И НоменклатураПредложения.СтавкаНДС = ТЧПотребностей.СтавкаНДС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	ПериодПотребности";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.НоменклатураЛота = Неопределено Тогда  
				ТекстСообщения = НСтр("ru='Не найдена номенклатура предложения с характеристиками по лоту: '");
				ТекстСообщения = ТекстСообщения + " за "+Строка(Выборка.ПериодПотребности) + " по номенклатуре " + Строка(Выборка.Номенклатура) + ",";		
				ТекстСообщения = Лев(ТекстСообщения,СтрДлина(ТекстСообщения)-1);
				КлючДанных = ОбщегоНазначенияУХ.КлючДанныхДляСообщенияПользователю(Ссылка);
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				,
				,
				Отказ);
				Продолжить;
			КонецЕсли;
			Если Выборка.Количество > Выборка.КоличествоПоЛоту Тогда  
				ТекстСообщения = НСтр("ru='Превышено количество номенклатуры предложения по лоту: '");
				ТекстСообщения = ТекстСообщения + " за "+Строка(Выборка.ПериодПотребности) + " по номенклатуре " + Строка(Выборка.Номенклатура) + ",";		
				ТекстСообщения = Лев(ТекстСообщения,СтрДлина(ТекстСообщения)-1);
				КлючДанных = ОбщегоНазначенияУХ.КлючДанныхДляСообщенияПользователю(Ссылка);
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				,
				,
				Отказ);
				Продолжить;
			КонецЕсли;
			Если (Выборка.ЗапретПревышенияНМЦ И Выборка.Сумма > Выборка.СуммаПоЛоту) ИЛИ (Выборка.Сумма > 0 И Выборка.СуммаПоЛоту = 0)  Тогда  
				ТекстСообщения = НСтр("ru='Превышена сумма номенклатура предложения по лоту: '");
				ТекстСообщения = ТекстСообщения + " за "+Строка(Выборка.ПериодПотребности) + " по номенклатуре " + Строка(Выборка.Номенклатура) + ",";		
				ТекстСообщения = Лев(ТекстСообщения,СтрДлина(ТекстСообщения)-1);
				КлючДанных = ОбщегоНазначенияУХ.КлючДанныхДляСообщенияПользователю(Ссылка);
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				,
				,
				Отказ);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		Возврат НЕ Отказ;
КонецФункции

Функция ПроверитьСообщитьНеЗаполненыУчастникиЗакупки()
	Если НЕ ПолучитьФункциональнуюОпцию("НеТребоватьРегистрацииУчастниковДляОткрытыхСпособовЗакупок") 
		И ЗначениеЗаполнено(Лот)
		И ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Лот.ЗакупочнаяПроцедура,"ЗакрытаяЗакупка") = Истина
			И ЗначениеЗаполнено(Контрагент)
			И ЗначениеЗаполнено(Лот.Владелец)
			И Лот.Владелец.ТребуетсяКвалификационныйОтбор
			И НЕ ЗакрытыеЗакупкиУХ.ЭтоКонтрагентУчастникЗакупки(Лот.Владелец, Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Контрагент не входит в список участников закрытой закупки'");
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПроверитьСообщитьЕстьПоставляемыеТовары()
	Если УсловияПоНоменклатуре.Количество() > 0
		И УсловияПоНоменклатуре.Найтистроки(Новый Структура("ТоварНеПоставляется",Ложь)).Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не обнаружено поставляемой номенклатуры'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Отказ = Ложь;
	Запрос = Новый Запрос;
	ТЧПотребностей = ПолучитьРезультатЗапросаКПотребностямВЛоте();
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("УсловияПоНоменклатуре",УсловияПоНоменклатуре.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияПоНоменклатуре.Номенклатура КАК Номенклатура,
	               |	УсловияПоНоменклатуре.Характеристика КАК Характеристика,
	               |	УсловияПоНоменклатуре.МестоПоставки КАК МестоПоставки,
	               |	УсловияПоНоменклатуре.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	УсловияПоНоменклатуре.Количество КАК Количество,
	               |	УсловияПоНоменклатуре.Коэффициент КАК Коэффициент,
	               |	УсловияПоНоменклатуре.СтавкаНДС КАК СтавкаНДС,
	               |	УсловияПоНоменклатуре.ТоварНеПоставляется КАК ТоварНеПоставляется,
	               |	УсловияПоНоменклатуре.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ТЧПотребностей
	               |ИЗ
	               |	&УсловияПоНоменклатуре КАК УсловияПоНоменклатуре
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧПотребностей.Номенклатура КАК Номенклатура,
	               |	ТЧПотребностей.Характеристика КАК Характеристика,
	               |	ТЧПотребностей.МестоПоставки КАК МестоПоставки,
	               |	ТЧПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТЧПотребностей.Коэффициент КАК Коэффициент,
	               |	ТЧПотребностей.СтавкаНДС КАК СтавкаНДС,
	               |	ТЧПотребностей.ТоварНеПоставляется КАК ТоварНеПоставляется,
	               |	СУММА(ТЧПотребностей.Сумма) КАК Сумма
	               |ИЗ
	               |	ТЧПотребностей КАК ТЧПотребностей
	               |ГДЕ
	               |	ТЧПотребностей.ТоварНеПоставляется = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧПотребностей.Номенклатура,
	               |	ТЧПотребностей.ТоварНеПоставляется,
	               |	ТЧПотребностей.МестоПоставки,
	               |	ТЧПотребностей.Коэффициент,
	               |	ТЧПотребностей.Характеристика,
	               |	ТЧПотребностей.СтавкаНДС,
	               |	ТЧПотребностей.ЕдиницаИзмерения
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ТЧПотребностей.Сумма) = 0";
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда
		Возврат НЕ Отказ;
	Иначе 
		ВыборкаРезультатаЗапроса = Выборка.Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = НСтр("ru='Номенклатура %Номенклатура% не может быть с пустой суммой'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Номенклатура%",ВыборкаРезультатаЗапроса.Номенклатура);
			КлючДанных = ОбщегоНазначенияУХ.КлючДанныхДляСообщенияПользователю(Ссылка);
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			КлючДанных,
			,
			,
			Отказ);
		КонецЦикла;
		Возврат НЕ Отказ;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

Процедура ПроверкаСоглашения(Отказ)
	
	Если Соглашение.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнены этапы графика оплаты соглашения'");
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не установлено требования указания договора в соглашении'");
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Соглашение.Валюта <> ВалютаДокумента Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Различается валюта лота и валюта соглашения'");
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Соглашение.ЦенаВключаетНДС <> ЦенаВключаетНДС Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Различается свойство ""Цена включает НДС"" лота и соглашения'");
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Соглашение.КонтролироватьЦеныЗакупки <> Лот.ЗапретПревышенияНМЦ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Свойство ""Запретить закупки по ценам выше указанных в соглашении"" соглашения с поставщиком отличается от свойства ""Запрет превышения НМЦ"" лота'");
		Сообщение.ПутьКДанным = "Объект.Соглашение";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	
КонецПроцедуры
#КонецОбласти


#КонецЕсли

