#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("НСИПроизводства");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаАналогиМатериалов(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Разрешение на замену материалов".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено -
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.РазрешениеНаЗаменуМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.РазрешениеНаЗаменуМатериалов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РазрешениеНаЗаменуМатериалов);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьАналогиМатериалов";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазрешениеНаЗаменуМатериалов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РазрешениеНаЗаменуМатериалов.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	РазрешениеНаЗаменуМатериалов.Спецификация КАК Спецификация,
	|	РазрешениеНаЗаменуМатериалов.Этап КАК Этап,
	|	РазрешениеНаЗаменуМатериалов.Изделие КАК Изделие,
	|	РазрешениеНаЗаменуМатериалов.ХарактеристикаИзделия КАК ХарактеристикаИзделия,
	|	РазрешениеНаЗаменуМатериалов.ЗаказКлиента КАК ЗаказКлиента,
	|	РазрешениеНаЗаменуМатериалов.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	РазрешениеНаЗаменуМатериалов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	РазрешениеНаЗаменуМатериалов.Статус КАК Статус,
	|	РазрешениеНаЗаменуМатериалов.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов КАК РазрешениеНаЗаменуМатериалов
	|ГДЕ
	|	РазрешениеНаЗаменуМатериалов.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Статус",                    Реквизиты.Статус);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство",       Реквизиты.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("Спецификация",              Реквизиты.Спецификация);
	Запрос.УстановитьПараметр("Этап",                      Реквизиты.Этап);
	Запрос.УстановитьПараметр("Изделие",                   Реквизиты.Изделие);
	Запрос.УстановитьПараметр("ХарактеристикаИзделия",     Реквизиты.ХарактеристикаИзделия);
	Запрос.УстановитьПараметр("ЗаказКлиента",              Реквизиты.ЗаказКлиента);
	Запрос.УстановитьПараметр("ДатаНачалаДействия",        Реквизиты.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ДатаОкончанияДействия",     Реквизиты.ДатаОкончанияДействия);
	Запрос.УстановитьПараметр("Подразделение",             Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",   Реквизиты.НаправлениеДеятельности);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаАналогиМатериалов(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "АналогиМатериалов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,	
	|	&ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	&Спецификация КАК Спецификация,
	|	&Этап КАК Этап,
	|	&Изделие КАК Изделие,
	|	&ХарактеристикаИзделия КАК ХарактеристикаИзделия,
	|	&ЗаказКлиента КАК ЗаказКлиента,
	|	&ДатаНачалаДействия КАК Период,
	|	&ДатаОкончанияДействия КАК ПериодЗавершения,
	|	&Подразделение КАК Подразделение,
	|	РазрешениеНаЗаменуМатериаловМатериалы.Номенклатура КАК Материал,
	|	РазрешениеНаЗаменуМатериаловМатериалы.Характеристика КАК ХарактеристикаМатериала,
	|	РазрешениеНаЗаменуМатериаловМатериалы.КоличествоУпаковок КАК КоличествоУпаковокМатериала,
	|	РазрешениеНаЗаменуМатериаловМатериалы.Упаковка КАК УпаковкаМатериала,
	|	РазрешениеНаЗаменуМатериаловМатериалы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РазрешениеНаЗаменуМатериаловАналоги.Номенклатура КАК Аналог,
	|	РазрешениеНаЗаменуМатериаловАналоги.Характеристика КАК ХарактеристикаАналога,
	|	РазрешениеНаЗаменуМатериаловАналоги.КоличествоУпаковок КАК КоличествоУпаковокАналога,
	|	РазрешениеНаЗаменуМатериаловАналоги.Упаковка КАК УпаковкаАналога
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК РазрешениеНаЗаменуМатериаловМатериалы,
	|	Документ.РазрешениеНаЗаменуМатериалов.Аналоги КАК РазрешениеНаЗаменуМатериаловАналоги
	|ГДЕ
	|	РазрешениеНаЗаменуМатериаловАналоги.Ссылка = &Ссылка
	|	И РазрешениеНаЗаменуМатериаловМатериалы.Ссылка = &Ссылка
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРазрешенийНаЗаменуМатериалов.Утверждено)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаДинамическогоСпискаРазрешенийНаЗаменуМатериалов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ОсновнаяТаблица.ВерсияДанных КАК ВерсияДанных,
	|	ОсновнаяТаблица.ПометкаУдаления КАК ПометкаУдаления,
	|	ОсновнаяТаблица.Номер КАК Номер,
	|	ОсновнаяТаблица.Дата КАК Дата,
	|	ОсновнаяТаблица.Проведен КАК Проведен,
	|	ОсновнаяТаблица.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ОсновнаяТаблица.Спецификация КАК Спецификация,
	|	ОсновнаяТаблица.Изделие КАК Изделие,
	|	ОсновнаяТаблица.ХарактеристикаИзделия КАК ХарактеристикаИзделия,
	|	ОсновнаяТаблица.ЗаказКлиента КАК ЗаказКлиента,
	|	ОсновнаяТаблица.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ОсновнаяТаблица.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ОсновнаяТаблица.Статус КАК Статус,
	|	ОсновнаяТаблица.УказаниеПоПрименению КАК УказаниеПоПрименению,
	|	ОсновнаяТаблица.Ответственный КАК Ответственный,
	|	ОсновнаяТаблица.Подразделение КАК Подразделение,
	|	ОсновнаяТаблица.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов КАК ОсновнаяТаблица
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает отбор по номенклатуре в динамическом списке.
//
// Параметры:
//  Список       - ДинамическийСписок - оформляемый динамический список.
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура отбора.
//  Назначение   - ПеречислениеСсылка.ИспользованиеНоменклатурыВНСИПроизводства - назначение отбора.
//
Процедура УстановитьОтборПоНоменклатуреВДинамическомСпискеРазрешенийНаЗаменуМатериалов(Список, Номенклатура, Назначение = Неопределено) Экспорт
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по номенклатуре';
			|en = 'Filter by items'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.Изделие",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = Перечисления.ИспользованиеНоменклатурыВНСИПроизводства.Изделие));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.Материалы.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = Перечисления.ИспользованиеНоменклатурыВНСИПроизводства.Материал));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.Аналоги.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		Номенклатура,
		,
		ЗначениеЗаполнено(Номенклатура) И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = Перечисления.ИспользованиеНоменклатурыВНСИПроизводства.Аналог));
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.РазрешениеНаЗаменуМатериалов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ae783d5d-5207-40e0-969d-caf67c60da5c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РазрешениеНаЗаменуМатериалов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые реквизиты Этап и Идентификатор строки';
									|en = 'Populates new Stage and Line ID attributes'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.РазрешениеНаЗаменуМатериалов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.РазрешениеНаЗаменуМатериалов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.РазрешениеНаЗаменуМатериалов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.РазрешениеНаЗаменуМатериалов";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(
		"ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|				ГДЕ
	|					ТабличнаяЧастьМатериалы.Ссылка = ТаблицаДокументов.Ссылка
	|					И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор
	|					И ТабличнаяЧастьМатериалы.ИдентификаторСтроки = &ПустойУникальныйИдентификатор)
	|			ИЛИ ТаблицаДокументов.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|				И ИСТИНА В
	|					(ВЫБРАТЬ
	|						ИСТИНА
	|					ИЗ
	|						Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификации
	|							ПО
	|								РесурсныеСпецификации.Ссылка = ТаблицаДокументов.Спецификация
	|									И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация = РесурсныеСпецификации.КлючСвязи
	|					ГДЕ
	|						ТабличнаяЧастьМатериалы.Ссылка = ТаблицаДокументов.Ссылка
	|						И НЕ ТабличнаяЧастьМатериалы.Ссылка В
	|								(ВЫБРАТЬ
	|									ТабличнаяЧастьМатериалы.Ссылка КАК Ссылка
	|								ИЗ
	|									Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|										ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|										ПО
	|											РесурсныеСпецификацииМатериалыИУслуги.Ссылка = ТаблицаДокументов.Спецификация
	|												И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация = РесурсныеСпецификацииМатериалыИУслуги.КлючСвязи
	|								ГДЕ
	|									ТабличнаяЧастьМатериалы.Ссылка = ТаблицаДокументов.Ссылка
	|									И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор
	|									И РесурсныеСпецификацииМатериалыИУслуги.Этап ЕСТЬ NULL)
	|						И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор
	|						И (ТабличнаяЧастьМатериалы.ИдентификаторСтроки = &ПустойУникальныйИдентификатор
	|							ИЛИ ТабличнаяЧастьМатериалы.ИдентификаторСтроки = ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация)
	|					ИМЕЮЩИЕ
	|						КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РесурсныеСпецификации.Этап) = 1))
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|		ГДЕ
	|			ТабличнаяЧастьМатериалы.Ссылка = ТаблицаДокументов.Ссылка
	|			И ТабличнаяЧастьМатериалы.ИдентификаторСтроки = &ПустойУникальныйИдентификатор)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры	

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.РазрешениеНаЗаменуМатериалов";	
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеДокументы", ОбновляемыеДанные.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр(
		"ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Спецификация КАК Спецификация,
	|	ТаблицаДокументов.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&ОбновляемыеДокументы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Спецификация,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ТаблицаДокументовЗаполнениеЭтапа
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	И ТаблицаДокументов.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификации
	|					ПО
	|						РесурсныеСпецификации.Ссылка = ТаблицаДокументов.Спецификация
	|							И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация = РесурсныеСпецификации.КлючСвязи
	|			ГДЕ
	|				ТабличнаяЧастьМатериалы.Ссылка = ТаблицаДокументов.Ссылка
	|				И НЕ ТабличнаяЧастьМатериалы.Ссылка В
	|						(ВЫБРАТЬ
	|							ТабличнаяЧастьМатериалы.Ссылка КАК Ссылка
	|						ИЗ
	|							Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|								ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|								ПО
	|									РесурсныеСпецификацииМатериалыИУслуги.Ссылка = ТаблицаДокументов.Спецификация
	|										И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация = РесурсныеСпецификацииМатериалыИУслуги.КлючСвязи
	|						ГДЕ
	|							ТабличнаяЧастьМатериалы.Ссылка = ТаблицаДокументов.Ссылка
	|							И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор
	|							И РесурсныеСпецификацииМатериалыИУслуги.Этап ЕСТЬ NULL)
	|				И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор
	|				И (ТабличнаяЧастьМатериалы.ИдентификаторСтроки = &ПустойУникальныйИдентификатор
	|					ИЛИ ТабличнаяЧастьМатериалы.ИдентификаторСтроки = ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация)
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РесурсныеСпецификации.Этап) = 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТабличнаяЧастьМатериалы.НомерСтроки - 1 КАК ИндексСтроки
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|		ПО ТаблицаДокументов.Ссылка = ТабличнаяЧастьМатериалы.Ссылка
	|ГДЕ
	|	НЕ (ТаблицаДокументов.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор)
	|	И ТабличнаяЧастьМатериалы.ИдентификаторСтроки = &ПустойУникальныйИдентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТабличнаяЧастьМатериалы.НомерСтроки - 1 КАК ИндексСтроки,
	|	ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация КАК ИдентификаторСтроки
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК ТабличнаяЧастьМатериалы
	|		ПО ТаблицаДокументов.Ссылка = ТабличнаяЧастьМатериалы.Ссылка
	|ГДЕ
	|	ТаблицаДокументов.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	И ТабличнаяЧастьМатериалы.УдалитьКлючСвязиСпецификация <> &ПустойУникальныйИдентификатор
	|	И ТабличнаяЧастьМатериалы.ИдентификаторСтроки = &ПустойУникальныйИдентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументовЗаполнениеЭтапа.Ссылка КАК Ссылка,
	|	РесурсныеСпецификацииМатериалыИУслуги.Этап КАК Этап
	|ИЗ
	|	ТаблицаДокументовЗаполнениеЭтапа КАК ТаблицаДокументовЗаполнениеЭтапа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК РазрешениеНаЗаменуМатериаловМатериалы
	|		ПО ТаблицаДокументовЗаполнениеЭтапа.Ссылка = РазрешениеНаЗаменуМатериаловМатериалы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ПО (РазрешениеНаЗаменуМатериаловМатериалы.УдалитьКлючСвязиСпецификация = РесурсныеСпецификацииМатериалыИУслуги.КлючСвязи)
	|ГДЕ
	|	ТаблицаДокументовЗаполнениеЭтапа.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаГенерацииИдентификаторовСтрок = МассивРезультатов[МассивРезультатов.ВГраница() - 2].Выгрузить();
	ТаблицаГенерацииИдентификаторовСтрок.Индексы.Добавить("Ссылка");	
	
	ТаблицаИдентификаторыСтрок = МассивРезультатов[МассивРезультатов.ВГраница() - 1].Выгрузить();
	ТаблицаИдентификаторыСтрок.Индексы.Добавить("Ссылка");
	
	ТаблицаЭтапов = МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить();
	ТаблицаЭтапов.Индексы.Добавить("Ссылка");
	
	СтруктураОтбора = Новый Структура("Ссылка");
	
	Для каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Документ);
			
			ОбъектИзменен = Ложь;
			
			НайденныеСтроки = ТаблицаГенерацииИдентификаторовСтрок.НайтиСтроки(СтруктураОтбора);
			ОбъектИзменен = ?(НайденныеСтроки.Количество() > 0, Истина, ОбъектИзменен);
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				ДокументОбъект.Материалы[СтрокаТаблицы.ИндексСтроки].ИдентификаторСтроки = Новый УникальныйИдентификатор;	
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаИдентификаторыСтрок.НайтиСтроки(СтруктураОтбора);
			ОбъектИзменен = ?(НайденныеСтроки.Количество() > 0, Истина, ОбъектИзменен);
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Материалы[СтрокаТаблицы.ИндексСтроки], СтрокаТаблицы, "ИдентификаторСтроки");	
			КонецЦикла;	
			
			НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
			ОбъектИзменен = ?(НайденныеСтроки.Количество() > 0, Истина, ОбъектИзменен);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ДокументОбъект, НайденныеСтроки[0], "Этап");	
			КонецЕсли;	
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
										Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры	

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.РазрешениеНаЗаменуМатериалов";
	СинонимТаблицыДокумента = "РазрешениеНаЗаменуМатериаловМатериалы";
	
	Если ИмяРегистра = "АналогиМатериалов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаАналогиМатериалов(Запрос, ТекстыЗапроса, ИмяРегистра);
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
									ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#КонецЕсли
