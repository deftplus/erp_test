#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	Параметры.Свойство("Дата", Дата);
	Параметры.Свойство("ВидОперации", ВидОперации);
	Параметры.Свойство("ВидБюджета", Предназначение);
	Параметры.Свойство("Валюта", Валюта);
	ВалютаДокумента = Валюта;
	Параметры.Свойство("ПериодОтчета", ПериодОтчета);
	Параметры.Свойство("ПериодОтчетаОкончание", ПериодОтчетаОкончание);
	Параметры.Свойство("ПриходРасход", ПриходРасход);
	Параметры.Свойство("СтатьяБюджета", СтатьяБюджета);
	Параметры.Свойство("Аналитика1", Аналитика1);
	Параметры.Свойство("Аналитика2", Аналитика2);
	Параметры.Свойство("Аналитика3", Аналитика3);
	Параметры.Свойство("Контрагент", Контрагент);
	Параметры.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("ЦФО", ЦФО);
	Параметры.Свойство("Проект", Проект);
	Параметры.Свойство("Номенклатура", Номенклатура);
	Параметры.Свойство("МестоПоставки", МестоПоставки);
	Параметры.Свойство("ЭтоКатегорияНоменклатуры", ЭтоКатегорияНоменклатуры);
	Параметры.Свойство("Цена", Цена);
	Параметры.Свойство("Коэффициент", Коэффициент);
	Параметры.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Параметры.Свойство("ИсходнаяНоменклатура", ИсходнаяНоменклатура);
	
	Если Параметры.Свойство("ТаблицаПлановКЗаполнению") Тогда
		ТаблицаПлановКЗаполнению.Загрузить(Параметры.ТаблицаПлановКЗаполнению.Выгрузить());
	КонецЕсли;
	
	ИДСтроки = Параметры.ИДСтроки;
	
	//
	СоздатьРеквизитФормыДанные(Параметры.Данные, Параметры.ИДСтроки);
	
	//
	ИнициализироватьКроссТаблицу(Параметры.ОписаниеКТ);
	
	// 
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	ЗаполнитьКроссТаблицу(ОписаниеКТ);
	
	ОперативныйПланФормыУХ.ОбновитьОтборПоФункциональнымНаправлениям(ОписаниеКТ, ЭтаФорма, ЦФО);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКроссТаблица

&НаКлиенте
Процедура КроссТаблицаПриАктивизацииЯчейки(Элемент)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ТаблицаПериодов = ЭтаФорма[ОписаниеКТ.Реквизиты.Периоды];
	
	АктивныеПериоды = ТаблицаПериодов.НайтиСтроки(Новый Структура("Активная", Истина));
	Если АктивныеПериоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	Если НоваяСтрока Тогда
		
		ТД = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
		ТД.НомерСтроки = ЭтаФорма[ОписаниеКТ.Реквизиты.КроссТаблица].Количество();
		ТД.ИДСтроки = ИДСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("КроссТаблицаПередУдалениемЗавершение", ЭтаФорма, Новый Структура);
	
	Если Элементы.КроссТаблица.ВыделенныеСтроки.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Действительно хотите удалить строку?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Действительно хотите удалить строки?'");
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередУдалениемЗавершение(Результат, ДопПараметры) экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
		ЭлементКроссТаблица = Элементы[ОписаниеКТ.Элементы.КроссТаблица];
		
		ОперативныйПланФормыУХКлиент.УдалитьОтмеченныеСтрокиКТ(ОписаниеКТ, ЭтаФорма);
		
		КроссТаблицаПослеУдаления(ЭлементКроссТаблица);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	КроссТаблицыУХКлиентСервер.РассчитатьНомерСтрокиКроссТаблицы(ОписаниеКТ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	СтрокаУжеСуществует = КроссТаблицыУХКлиент.СтрокаПовторяетУжеСуществующуюСтрокуКроссТаблицы(
		ОписаниеКТ, ЭтаФорма, Элемент.ТекущаяСтрока);
	
	Если НЕ СтрокаУжеСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		// Если это отмена ввода новой дублирующейся строки, то спокойно завершаемся 
		Возврат;
	Иначе
		ТекстСообщения = НСтр("ru = 'Значения аналитик строки совпадают со значениями аналитик ранее введенной строки. Укажите в строке уникальный набор аналитик и программа запомнит строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередНачаломИзменения(Элемент, Отказ)
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	КроссТаблицыУХКлиент.УстановитьМинимальныеЗначенияДляЭлементовИзменение(ОписаниеКТ, ЭтаФорма, Элемент);
КонецПроцедуры

#Область ПодключаемыеОбработчикиПриИзмененииРесурсов

#Область ОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммаРезультат(Элемент)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ПриИзмененииКТ_СуммаРезультат(ОписаниеКТ, ЭтаФорма, Элемент.Имя);
	
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммаИзменение(Элемент)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ПриИзмененииКТ_СуммаИзменение(ОписаниеКТ, ЭтаФорма, Элемент.Имя);
	
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоРезультат(Элемент)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ПриИзмененииЭлементаКТ_КоличествоРезультат(ОписаниеКТ, ЭтаФорма, Элемент.Имя);
				
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоИзменение(Элемент)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ПриИзмененииКТ_КоличествоИзменение(ОписаниеКТ, ЭтаФорма, Элемент.Имя);
				
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее
	
&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_СуммаРезультат(ОписаниеКТ, Форма, ИмяЭлемента)
	
	КТ = КроссТаблицыУХКлиентСервер;
	
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ 		= КТ.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
	
	// Изменяем колонку Изменено
	Разница = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_");
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", Разница);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_СуммаИзменение(ОписаниеКТ, Форма, ИмяЭлемента)

	КТ = КроссТаблицыУХКлиентСервер;
	
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ		= КТ.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
	
	// Изменяем колонку Изменено
	Сумма = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_") + КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_");
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_", Сумма);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);

	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЭлементаКТ_КоличествоРезультат(ОписаниеКТ, Форма, ИмяЭлемента)
	
	// Получаем текущий период
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ 	= КроссТаблицыУХКлиентСервер.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
		
	ПриИзмененииКТ_КоличествоРезультат(ОписаниеКТ, Форма, ПериодКТ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_КоличествоРезультат(ОписаниеКТ, Форма, ПериодКТ)

	КТ = КроссТаблицыУХКлиентСервер;
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	
	// Изменяем колонку Изменено
	КоличествоИзменение = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоИсходное_");
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "КоличествоИзменение_", КоличествоИзменение);
	
	ДопРеквизитыНоменклатуры = ДопРеквизитыНоменклатуры();
		
	ИнфоНоменклатура = Новый Структура(ДопРеквизитыНоменклатуры);
	ИнфоНоменклатура.ЭтоКатегорияНоменклатуры = Ложь;
	ИнфоНоменклатура.Цена = 0;
	ИнфоНоменклатура.ЕдиницаИзмерения = Форма.ПустаяЕдиницаИзмерения;
	ИнфоНоменклатура.Коэффициент = 1;
	ИнфоНоменклатура.ИсходнаяНоменклатура = неопределено;
	
	Если КроссТаблицыУХКлиентСервер.ЕстьАналитикаШапки(ОписаниеКТ, "Номенклатура") = Истина Тогда
		ЗаполнитьЗначенияСвойств(ИнфоНоменклатура, Форма, ДопРеквизитыНоменклатуры);
	ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Номенклатура") = Истина Тогда
		ЗаполнитьЗначенияСвойств(ИнфоНоменклатура, СтрокаКТ, ДопРеквизитыНоменклатуры);
	КонецЕсли;
	
	Если НЕ ИнфоНоменклатура.ЭтоКатегорияНоменклатуры Тогда
		// СуммаРезультат
		СуммаРезультат = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_") * ИнфоНоменклатура.Цена;
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_", СуммаРезультат);
	КонецЕсли; 
	
	// СуммаИзменение
	СуммаИзменение = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") ;
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", СуммаИзменение);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_КоличествоИзменение(ОписаниеКТ, Форма, ИмяЭлемента)

	КТ = КроссТаблицыУХКлиентСервер;
	
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ 		= КТ.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
	
	Если СтрокаКТ.ЭтоКатегорияНоменклатуры Тогда
		// Товарная категория
		
	Иначе
		//
		
	КонецЕсли; 
	
	// Изменяем колонку Изменено
	КоличествоРезультат = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоИсходное_") + КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоИзменение_");
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_", КоличествоРезультат);
	
	Если НЕ СтрокаКТ.ЭтоКатегорияНоменклатуры Тогда
		// СуммаРезультат
		СуммаРезультат = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_") * СтрокаКТ.Цена;
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_", СуммаРезультат);
	КонецЕсли;
	
	// СуммаИзменение
	СуммаИзменение = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") ;
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", СуммаИзменение);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

#КонецОбласти 

#КонецОбласти 

#Область ПодключаемыеОбработчикиПриИзмененииИзмерений

#Область ОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ОбщийОбработчикНачалаВыбораАналитик(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ОперативныйПланФормыУХКлиент.ОбщийОбработчикНачалаВыбораАналитик(Элемент, ДанныеВыбора, СтандартнаяОбработка, ОписаниеКТ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбщийОбработчикИзмененияАналитик(Элемент)
	
	Если СтрНайти(Элемент.Имя, "СтатьяБюджета") > 0 Тогда
		АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ИначеЕсли СтрНайти(Элемент.Имя, "Аналитика") > 0 Тогда
		АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
	ОбработатьИзменениеАналитикНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеАналитикНаСервере(ИмяЭлемента)
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	ОперативныйПланФормыУХ.ОбщийОбработчикИзмененияАналитик(ОписаниеКТ, ЭтаФорма, ИмяЭлемента);
	
	//
	Если Предназначение <> Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		ОперативныйПланФормыУХ.ОбновитьНачальныеОстаткиПланов(ОписаниеКТ, ЭтаФорма, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Общая команда управления кросс-таблицей (управление видимостью)
&НаКлиенте
Процедура Подключаемый_ОбщаяКомандаУправленияКТ(Команда)
	
	КроссТаблицыУХКлиент.ВыполнитьКомандуКТ(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначения(Команда)
	
	СформироватьРезультат();
	
	Результат = Новый Структура("ИДСтроки, Данные", ИДСтроки, ЭтаФорма.ДанныеКТ);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРезультат()
	
	КТ = КроссТаблицыУХКлиентСервер;
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	ЭтаФорма.ДанныеКТ.Очистить();
	
	АналитикиРасшифровки = ОписаниеКТ.Схема.Аналитики.Строка;
	АктивныеПериоды = КТ.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтаФорма);
	
	СтатьяБюджетаВСтроке = КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "СтатьяБюджета");
	ДопРеквизитыСтатьиБюджета = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона(
		"ВидАналитики%1,ВидАналитики%1ТипЗначения,ВидАналитики%1Наименование, ВидАналитики%1ПараметрыВыбора, ВидАналитики%1СвязиАналитик");
	НоменклатураВСтроке = КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Номенклатура");
	ДопРеквизитыНоменклатуры = ДопРеквизитыНоменклатуры();
	
	Для каждого СтрокаКТ Из ЭтаФорма[ОписаниеКТ.Реквизиты.КроссТаблица] Цикл
		
		Для каждого СтрокаПериод Из АктивныеПериоды Цикл
			
			ИмяКолонкиПериода = СтрокаПериод.ИмяКолонки;
			
			СтруктураРесурсов = Новый Структура;
			ЕстьЗаполненныеЗначение = Ложь;
			Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
				ОписаниеПоля = КлючЗначение.Значение;
				Значение = СтрокаКТ[ОписаниеПоля.ПрефиксРеквизитаКолонки+ИмяКолонкиПериода];
				СтруктураРесурсов.Вставить(ОписаниеПоля.ИмяРеквизитаТЧ, Значение);
				ЕстьЗаполненныеЗначение = ЕстьЗаполненныеЗначение ИЛИ ЗначениеЗаполнено(Значение);
			КонецЦикла; 
			
			Если ЕстьЗаполненныеЗначение = Ложь Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаДанных = ЭтаФорма.ДанныеКТ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаКТ, АналитикиРасшифровки);
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтруктураРесурсов);
			
			Если СтатьяБюджетаВСтроке Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаКТ, ДопРеквизитыСтатьиБюджета);
			КонецЕсли;
			
			//
			Если НоменклатураВСтроке Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаКТ, ДопРеквизитыНоменклатуры);
			КонецЕсли;
			
			//
			СтрокаДанных.ИДСтроки = СтрокаКТ.ИДСтроки;
			СтрокаДанных.ИДПериода = Новый УникальныйИдентификатор(СтрЗаменить(ИмяКолонкиПериода, "_", "-"));
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОписаниеКТ = Форма.КроссТаблицыФормы.Аналитики;
	Форма.Элементы.КроссТаблицаГруппаСтатьяБюджета.Видимость = КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "СтатьяБюджета");
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	ОперативныйПланФормыУХ.УстановитьУсловноеОформлениеКТ(ОписаниеКТ, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитФормыДанные(Данные, ИДСтроки)

	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	
	// Таблица
	ИмяРеквизитаКТ = "ДанныеКТ";
	Реквизит = Новый РеквизитФормы(
		ИмяРеквизитаКТ, 
		Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ТаблицаДанных = Данные.Выгрузить(Данные.НайтиСтроки(Новый Структура("ИДСтроки", ИДСтроки)));
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
	
		// Таблица
		Реквизит = Новый РеквизитФормы(
			Колонка.Имя, 
			Колонка.ТипЗначения,
			ИмяРеквизитаКТ);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	КонецЦикла; 
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	ЭтаФорма[ИмяРеквизитаКТ].Загрузить(ТаблицаДанных);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКроссТаблицу(ОписаниеОсновнойКТ)
	
	// КРОСС-ТАБЛИЦА
	
	КТ = КроссТаблицыУХ;
	
	ОписаниеКТ = КТ.Новый_КроссТаблица("Аналитики", "ДвиженияОперации", "КроссТаблица", "КроссТаблица");
	
	// ???
	ОписаниеКТ.Схема = Новый Структура(Новый ФиксированнаяСтруктура(ОписаниеОсновнойКТ.Схема));
	
	// Копируем настройки из основной КТ
	ОписаниеКТ.Схема.Показатели.Исходное.Видимость = ОписаниеОсновнойКТ.Схема.Показатели.Исходное.Видимость;
	ОписаниеКТ.Схема.Показатели.Изменение.Видимость = ОписаниеОсновнойКТ.Схема.Показатели.Изменение.Видимость;
	ОписаниеКТ.Схема.Показатели.Исходное.УправлениеВидимостью.Доступность = 
		ОписаниеОсновнойКТ.Схема.Показатели.Исходное.УправлениеВидимостью.Доступность;
	ОписаниеКТ.Схема.Показатели.Изменение.УправлениеВидимостью.Доступность = 
		ОписаниеОсновнойКТ.Схема.Показатели.Изменение.УправлениеВидимостью.Доступность;
	
	ОписаниеКТ.Элементы.ГруппаРазмещения = "СтраницаРасшифровка";
	
	ОписаниеКТ.ТолькоЛимитируемыеСтатьи = ОписаниеОсновнойКТ.ТолькоЛимитируемыеСтатьи;
	ОписаниеКТ.ЗапрещеноУдалятьСтрокиКТ = ОписаниеОсновнойКТ.ЗапрещеноУдалятьСтрокиКТ;
	
	// Преобразовать схему: массивы аналитик
	Для Каждого Аналитика Из ОписаниеКТ.Схема.Аналитики.мСтрока Цикл
		ОписаниеКТ.Схема.Аналитики.мШапка.Добавить(Аналитика);
	КонецЦикла;
	ОписаниеКТ.Схема.Аналитики.мСтрока = Новый Массив(Новый ФиксированныйМассив(ОписаниеКТ.Схема.Аналитики.мРасшифровка));
	ОписаниеКТ.Схема.Аналитики.мРасшифровка = Новый Массив;
	
	// Преобразовать схему: строки аналитик
	ОписаниеКТ.Схема.Аналитики.Шапка = СтрСоединить(ОписаниеКТ.Схема.Аналитики.мШапка, ",");
	ОписаниеКТ.Схема.Аналитики.Строка = СтрСоединить(ОписаниеКТ.Схема.Аналитики.мСтрока, ",");
	ОписаниеКТ.Схема.Аналитики.Расшифровка = СтрСоединить(ОписаниеКТ.Схема.Аналитики.мРасшифровка, ",");
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("СуммаИзменение", 		Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииСуммаИзменение"));
	СоответствиеДействий.Вставить("СуммаРезультат", 		Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииСуммаРезультат"));
	СоответствиеДействий.Вставить("КоличествоИзменение",	Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииКоличествоИзменение"));
	СоответствиеДействий.Вставить("КоличествоРезультат",	Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииКоличествоРезультат"));
	
	ОписаниеКТ.Элементы.Вставить("Шапка", Новый Соответствие);
	
	КТ.ОбновитьОписаниеПолей(ОписаниеКТ, СоответствиеДействий);
	
	// 2. Сохранение описания кросс-таблицы и создание необходимых реквизитов формы
	КроссТаблицыУХ.ЗарегистрироватьКроссТаблицу(ЭтотОбъект, ОписаниеКТ);

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКроссТаблицу(ОписаниеКТ)
	
	// перестроить кросс-таблицу
	КроссТаблицыУХ.СоздатьЭлементыКроссТаблицы(ОписаниеКТ, ЭтаФорма);
	
	//
	ЭтаФорма[ОписаниеКТ.Реквизиты.Периоды].Загрузить(Параметры.Периоды.Выгрузить());
	
	//
	КроссТаблицыУХ.ОбновитьСтруктуруВыводаКроссТаблицы(ЭтаФорма, ОписаниеКТ);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Элементы,
			ОписаниеКТ.Элементы.КроссТаблица+"ГруппаРеквизитов") Тогда
		Элементы[ОписаниеКТ.Элементы.КроссТаблица+"ГруппаРеквизитов"].ОтображатьВШапке = Ложь;
		
	КонецЕсли;
	
	//
	ЗагрузитьДанныеИзРасшифровкиОсновнойФормы(ОписаниеКТ);
	
	НастроитьСтатьюБюджетаИАналитики(ОписаниеКТ);
	
	// Заполнение кросс-таблицы уже произведено, но надо выполнить заполнение доп.реквизитов
	КроссТаблицыУХ.ПрочитатьДанныеОбъектаВКроссТаблицу(ЭтаФорма, ОписаниеКТ, ЭтаФорма, Истина);
	
	ОперативныйПланФормыУХ.ЗаполнитьДопустимыйСписокВыбораСтатейПоНаправлению(ОписаниеКТ, ЭтаФорма, ПриходРасход);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзРасшифровкиОсновнойФормы(ОписаниеКТ)
	
	//
	КТ = КроссТаблицыУХКлиентСервер;
	
	//
	АналитикиСтроки = ОписаниеКТ.Схема.Аналитики.Строка;
	СтруктураПоиска = Новый Структура(АналитикиСтроки);
	
	НоменклатураВСтроке = КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Номенклатура");
	ДопРеквизитыНоменклатуры = ДопРеквизитыНоменклатуры();
	
	ВременнаяКроссТаблица = КроссТаблица.Выгрузить();
	Для каждого СтрокаДанных Из ЭтаФорма.ДанныеКТ Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных, АналитикиСтроки);
		
		УжеСуществующиеСтроки = ВременнаяКроссТаблица.НайтиСтроки(СтруктураПоиска);
		
		Если УжеСуществующиеСтроки.Количество() = 0 Тогда
			СтрокаКТ = ВременнаяКроссТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКТ, СтрокаДанных, АналитикиСтроки);
			
			Если НоменклатураВСтроке Тогда
				ЗаполнитьЗначенияСвойств(СтрокаКТ, СтрокаДанных, ДопРеквизитыНоменклатуры);
			КонецЕсли;
			
		Иначе
			СтрокаКТ = УжеСуществующиеСтроки[0];
		КонецЕсли;
		
		СтрокаКТ.ИДСтроки = СтрокаДанных.ИДСтроки;
		
		ИмяПериода = СтрЗаменить(Строка(СтрокаДанных.ИДПериода), "-", "_");
		
		//
		Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
			
			ОписаниеПоля = КлючЗначение.Значение;
			СтрокаКТ[ОписаниеПоля.ПрефиксРеквизитаКолонки+ИмяПериода] = СтрокаКТ[ОписаниеПоля.ПрефиксРеквизитаКолонки+ИмяПериода] + СтрокаДанных[ОписаниеПоля.ИмяРеквизитаТЧ];
		
		КонецЦикла; 
		
	КонецЦикла; 
	
 	ВременнаяКроссТаблица.Сортировать(АналитикиСтроки);
	
	//
	ЭтаФорма[ОписаниеКТ.Реквизиты.КроссТаблица].Загрузить(ВременнаяКроссТаблица);
	
	// Расчет порядкового номера строки
	КТ.РассчитатьНомерСтрокиКроссТаблицы(ОписаниеКТ, ЭтаФорма);
	АктивныеПериоды = КТ.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтаФорма);
	
	Для каждого СтрокаКТ Из ЭтаФорма[ОписаниеКТ.Реквизиты.КроссТаблица] Цикл
		КТ.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	КонецЦикла; 
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, ЭтаФорма, Ложь);
	//
	// Условное оформление
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДопРеквизитыНоменклатуры()
	Возврат "ЭтоКатегорияНоменклатуры, Цена, ЕдиницаИзмерения, Коэффициент, ИсходнаяНоменклатура";
КонецФункции

&НаКлиенте
Процедура ТолькоЛимитируемыеСтатьи(Команда)
	
	УправлениеВводомСтатьиБюджета();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВводомСтатьиБюджета()
	
	ОписаниеКТ = ЭтаФорма.КроссТаблицыФормы.Аналитики;
	
	КроссТаблицыУХ.УправлениеВводомСтатейБюджета(ОписаниеКТ, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСтатьюБюджетаИАналитики(ОписаниеКТ)
	
	АСБ = АналитикиСтатейБюджетовУХ;
	МассивОписанийСтатей = Новый Массив;
	
	ИмяРеквизитаСтатьяБюджета = "СтатьяБюджета";
	
	Если ОписаниеКТ.Схема.Аналитики.мШапка.Найти(ИмяРеквизитаСтатьяБюджета) <> неопределено Тогда
		// В шапке
		//АСБ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей,
		//	ИмяРеквизитаСтатьяБюджета, "СтатьяБюджета", "Аналитика%1", "Аналитика%1", ФормыУХ.РазместитьВГруппеСтрокой(Элементы.Группа1));
	ИначеЕсли ОписаниеКТ.Схема.Аналитики.мСтрока.Найти(ИмяРеквизитаСтатьяБюджета) <> неопределено Тогда
		ЭлементСтатья = Элементы[КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета")];
		// Статья и Аналитика из таблицы значений реквизита формы отображаются ТаблицеФормы.
		АСБ.СтатьяИАналитикиТаблицыЗначенийРеквизитаФормыВТаблицеФормы(МассивОписанийСтатей,
			ОписаниеКТ.Реквизиты.КроссТаблица, ОписаниеКТ.Элементы.КроссТаблица,
			ИмяРеквизитаСтатьяБюджета, КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета"),
			"Аналитика%1", КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "Аналитика", "%1"),
			ФормыУХ.РазместитьВГруппеСтрокой(ЭлементСтатья.Родитель.Имя));
		МассивОписанийСтатей[МассивОписанийСтатей.Количество()-1].Параметры.Вставить("СоздаватьРеквизитыВидАналитики", Ложь);
	ИначеЕсли ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти(ИмяРеквизитаСтатьяБюджета) <> неопределено Тогда
		//ЭлементСтатья = Элементы[КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "СтатьяБюджета")];
		//// Статья и Аналитика из таблицы значений реквизита формы отображаются ТаблицеФормы.
		//АСБ.СтатьяИАналитикиТаблицыЗначенийРеквизитаФормыВТаблицеФормы(МассивОписанийСтатей,
		//	ОписаниеКТ.Реквизиты.Расшифровка, ОписаниеКТ.Элементы.Расшифровка,
		//	ИмяРеквизитаСтатьяБюджета, КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "СтатьяБюджета"),
		//	"Аналитика%1", КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "Аналитика", "%1"),
		//	ФормыУХ.РазместитьВГруппеСтрокой(ЭлементСтатья.Родитель.Имя));
		//МассивОписанийСтатей[МассивОписанийСтатей.Количество()-1].Параметры.Вставить("СоздаватьРеквизитыВидАналитики", Ложь);
	Иначе
	КонецЕсли;
	
	Если МассивОписанийСтатей.Количество() > 0 Тогда
		АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(ЭтотОбъект, МассивОписанийСтатей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


