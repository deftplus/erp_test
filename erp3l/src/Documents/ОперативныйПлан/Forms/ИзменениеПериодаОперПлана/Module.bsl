#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если НЕ Параметры.Свойство("ГоризонтИсходный") ИЛИ НЕ Параметры.Свойство("ГоризонтНовый") Тогда
		НеОткрывать = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ГоризонтИсходный = Параметры.ГоризонтИсходный;
	ГоризонтНовый = Параметры.ГоризонтНовый;
	
	ОбработатьГоризонт(ГоризонтИсходный);
	ОбработатьГоризонт(ГоризонтНовый);
	
	// Исходный горизонт: Список выбора
	Элементы.ТаблицаСоответствияПериодИсходный.СписокВыбора.ЗагрузитьЗначения(
		ГоризонтИсходный.Периоды);
	Элементы.ТаблицаСоответствияПериодНовый.СписокВыбора.ЗагрузитьЗначения(
		ГоризонтНовый.Периоды);
	
	СформироватьТаблицуСоответствия();
	
	УстановитьУсловноеОформление();
	
	// Установить текущую строку
	УстановитьТекущуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НеОткрывать Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Форма не предназначена для непосредственного открытия пользователем.'"));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствия

&НаКлиенте
Процедура ТаблицаСоответствияПериодСтарыйПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаличиеДанных(ТД, ГоризонтИсходный, ГоризонтНовый);
	РассчитатьДействие(ТД);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьИзменениеПериода(Команда)
	Результат = СформироватьРезультат();
	Закрыть(Результат);
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВнизНовыеПериоды(Команда)
	СдвинутьНовыеПериоды(1);
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВверхНовыеПериоды(Команда)
	СдвинутьНовыеПериоды(-1);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
&НаКлиенте
Процедура СдвинутьНовыеПериоды(Направление)
	
	Если Направление <> 1 И Направление <> -1 Тогда
		Возврат;
	КонецЕсли;
	
	Инфо = ПолучитьИнформациюОТаблице();
	
	Если Направление = 1 Тогда
		// Сдвиг новых периодов вниз
		Если Направление = 1 И Инфо.НовыйНачало + 1 - Инфо.СтарыйОкончание > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Если Инфо.ПоследняяСтрока < Инфо.НовыйОкончание + Направление Тогда
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			ЗаполнитьНаличиеДанных(НоваяСтрока, ГоризонтИсходный, ГоризонтНовый);
		КонецЕсли;
		
		Поз = Инфо.НовыйОкончание;
		Пока Поз >= 0 Цикл
			Строка = ТаблицаСоответствия[Поз + Направление];
			Строка.ПериодНовый =  ТаблицаСоответствия[Поз].ПериодНовый;
			Строка.ЕстьДанныеНовыйПериод =  ТаблицаСоответствия[Поз].ЕстьДанныеНовыйПериод;
			Поз = Поз - 1;
		КонецЦикла;
		ТаблицаСоответствия[Поз + Направление].ПериодНовый = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
		ТаблицаСоответствия[Поз + Направление].ЕстьДанныеНовыйПериод = Ложь;
		
	ИначеЕсли Направление = -1 Тогда
		// Сдвиг новых вверх
		Если Инфо.СтарыйНачало + 1 - Инфо.НовыйОкончание > 1 Тогда
			Возврат;
		КонецЕсли;		
		
		Если Инфо.НовыйНачало + Направление < 0 Тогда
			НоваяСтрока = ТаблицаСоответствия.Вставить(0);
			ЗаполнитьНаличиеДанных(НоваяСтрока, ГоризонтИсходный, ГоризонтНовый);
			Инфо = ПолучитьИнформациюОТаблице();
		КонецЕсли;		
		
		Для Поз = Инфо.НовыйНачало По Инфо.НовыйОкончание Цикл
			Строка = ТаблицаСоответствия[Поз + Направление];
			Строка.ПериодНовый =  ТаблицаСоответствия[Поз].ПериодНовый;
			Строка.ЕстьДанныеНовыйПериод =  ТаблицаСоответствия[Поз].ЕстьДанныеНовыйПериод;
		КонецЦикла;
		ТаблицаСоответствия[Поз + Направление].ПериодНовый = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
		ТаблицаСоответствия[Поз + Направление].ЕстьДанныеНовыйПериод = Ложь;
		
	КонецЕсли;
	
	//
	КУдалению = Новый Массив;
	Для Каждого Строка Из ТаблицаСоответствия Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ПериодИсходный) И НЕ ЗначениеЗаполнено(Строка.ПериодНовый) Тогда
			КУдалению.Добавить(Строка);
		КонецЕсли;
		РассчитатьДействие(Строка);
	КонецЦикла;
	
	// Зачистить пустые строки
	Для Каждого Строка Из КУдалению Цикл
		ТаблицаСоответствия.Удалить(Строка);
	КонецЦикла;
	
	УстановитьТекущуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнформациюОТаблице()
	
	Результат = Новый Структура;
	Результат.Вставить("СтарыйНачало",		-1);
	Результат.Вставить("СтарыйОкончание",	-1);
	Результат.Вставить("НовыйНачало",		-1);
	Результат.Вставить("НовыйОкончание",	-1);
	Результат.Вставить("ПоследняяСтрока",	ТаблицаСоответствия.Количество()-1);
	
	Поз = -1;
	Для Каждого Строка Из ТаблицаСоответствия Цикл
		
		Поз = Поз + 1;
		
		Если ЗначениеЗаполнено(Строка.ПериодИсходный) И Результат.СтарыйНачало = -1 Тогда
			Результат.СтарыйНачало = Поз;
			Результат.СтарыйОкончание = Поз;
		ИначеЕсли ЗначениеЗаполнено(Строка.ПериодИсходный) Тогда
			Результат.СтарыйОкончание = Поз;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ПериодНовый) И Результат.НовыйНачало = -1 Тогда
			Результат.НовыйНачало = Поз;
			Результат.НовыйОкончание = Поз;
		ИначеЕсли ЗначениеЗаполнено(Строка.ПериодНовый) Тогда
			Результат.НовыйОкончание = Поз;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьДействие(Строка)
	
	Если ЗначениеЗаполнено(Строка.ПериодИсходный) И ЗначениеЗаполнено(Строка.ПериодНовый) Тогда
		Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияПриКорректировкеПериодовОперПлана.Перенести");
	ИначеЕсли ЗначениеЗаполнено(Строка.ПериодИсходный) Тогда
		Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияПриКорректировкеПериодовОперПлана.Удалить");
	Иначе
		Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияПриКорректировкеПериодовОперПлана.Добавить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаличиеДанных(Строка, ГоризонтИсходный, ГоризонтНовый)
	Строка.ЕстьДанныеИсходныйПериод = ГоризонтИсходный.Данные.Найти(Строка.ПериодИсходный) <> неопределено;
	Строка.ЕстьДанныеНовыйПериод = ГоризонтНовый.Данные.Найти(Строка.ПериодНовый) <> неопределено;
КонецПроцедуры

&НаСервере
Функция СформироватьРезультат()
	
	Результат = Новый Соответствие;
	Для Каждого Строка Из ТаблицаСоответствия Цикл
		Если ЗначениеЗаполнено(Строка.ПериодИсходный) И ЗначениеЗаполнено(Строка.ПериодНовый) Тогда
			Результат.Вставить(Строка.ПериодНовый, Строка.ПериодИсходный);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПериодыСДанными(Периоды, ПараметрыОтбораДанныхНовыхПериодов)
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОтбораДанныхНовыхПериодов.ЭтоЛимиты Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛимитыПоБюджетамОбороты.ПериодЛимитирования КАК Период,
		|	ЛимитыПоБюджетамОбороты.ЦФО КАК ЦФО,
		|	ЛимитыПоБюджетамОбороты.Проект КАК Проект,
		|	ЛимитыПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
		|	ЛимитыПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
		|	ЛимитыПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
		|	ЛимитыПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
		|	ЛимитыПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
		|	ЛимитыПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
		|	ЛимитыПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
		|	ЛимитыПоБюджетамОбороты.Валюта КАК Валюта,
		|	ЛимитыПоБюджетамОбороты.ЛимитОборот + ЛимитыПоБюджетамОбороты.КорректировкаОборот КАК Данные
		|ПОМЕСТИТЬ ВТ_ДанныеПланирования
		|ИЗ
		|	РегистрНакопления.ЛимитыПоБюджетам.Обороты(
		|			,
		|			,
		|			,
		|			(ПериодЛимитирования В (&Периоды) ИЛИ &ПериодыНеУказаны = Истина)
		|				И &ДопПараметрыОтбора) КАК ЛимитыПоБюджетамОбороты
		|ГДЕ
		|	ЛимитыПоБюджетамОбороты.ЛимитОборот + ЛимитыПоБюджетамОбороты.КорректировкаОборот <> 0";
		
		ДопПараметрыОтбора = Новый Массив;
		ШаблонДопПараметраОтбора = "%1 = &%1";
		Для Каждого КлючЗначение Из ПараметрыОтбораДанныхНовыхПериодов.Отбор Цикл
			ДопПараметрыОтбора.Добавить(СтрШаблон(ШаблонДопПараметраОтбора, КлючЗначение.Ключ));
		КонецЦикла;
		
	ИначеЕсли ПараметрыОтбораДанныхНовыхПериодов.ЭтоРезерв Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛимитыПоБюджетамОбороты.ПериодЛимитирования КАК Период,
		|	ЛимитыПоБюджетамОбороты.ЦФО КАК ЦФО,
		|	ЛимитыПоБюджетамОбороты.Проект КАК Проект,
		|	ЛимитыПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
		|	ЛимитыПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
		|	ЛимитыПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
		|	ЛимитыПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
		|	ЛимитыПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
		|	ЛимитыПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
		|	ЛимитыПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
		|	ЛимитыПоБюджетамОбороты.Валюта КАК Валюта,
		|	ЛимитыПоБюджетамОбороты.ЗарезервированоОборот КАК Данные
		|ПОМЕСТИТЬ ВТ_ДанныеПланирования
		|ИЗ
		|	РегистрНакопления.ЛимитыПоБюджетам.Обороты(
		|			,
		|			,
		|			,
		|			(ПериодЛимитирования В (&Периоды) ИЛИ &ПериодыНеУказаны = Истина)
		|				И ДокументРезервирования = &ДокументРезервирования
		|				И &ДопПараметрыОтбора) КАК ЛимитыПоБюджетамОбороты
		|ГДЕ
		|	ЛимитыПоБюджетамОбороты.ЗарезервированоОборот <> 0
		|	И &УказанДокументРезервирования = ИСТИНА";
		
		ДопПараметрыОтбора = Новый Массив;
		ШаблонДопПараметраОтбора = "%1 = &%1";
		Для Каждого КлючЗначение Из ПараметрыОтбораДанныхНовыхПериодов.Отбор Цикл
			ДопПараметрыОтбора.Добавить(СтрШаблон(ШаблонДопПараметраОтбора, КлючЗначение.Ключ));
		КонецЦикла;
		
		//
		Если ПараметрыОтбораДанныхНовыхПериодов.РежимВводаДокументаПланирования = 0 Тогда
			Запрос.УстановитьПараметр("ДокументРезервирования", неопределено);
			Запрос.УстановитьПараметр("УказанДокументРезервирования", Ложь);
		ИначеЕсли ПараметрыОтбораДанныхНовыхПериодов.РежимВводаДокументаПланирования = 1 Тогда
			Запрос.УстановитьПараметр("ДокументРезервирования", ПараметрыОтбораДанныхНовыхПериодов.ДокументРезервирования);
			Запрос.УстановитьПараметр("УказанДокументРезервирования", Истина);
		ИначеЕсли ПараметрыОтбораДанныхНовыхПериодов.РежимВводаДокументаПланирования = 2 Тогда
			Запрос.УстановитьПараметр("ДокументРезервирования", ПараметрыОтбораДанныхНовыхПериодов.ДокументРезервирования);
			Запрос.УстановитьПараметр("УказанДокументРезервирования", Истина);
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтбораДанныхНовыхПериодов.ЭтоПлан Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОперативныйПланПоБюджетамОбороты.ПериодОтчета КАК Период,
		|	ОперативныйПланПоБюджетамОбороты.Валюта КАК Валюта,
		|	ОперативныйПланПоБюджетамОбороты.АналитикаСтруктуры КАК АналитикаСтруктуры,
		|	ОперативныйПланПоБюджетамОбороты.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
		|	ОперативныйПланПоБюджетамОбороты.АналитикаПотребностей КАК АналитикаПотребностей,
		|	ОперативныйПланПоБюджетамОбороты.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
		|	ОперативныйПланПоБюджетамОбороты.АналитикаПартнеров КАК АналитикаПартнеров,
		|	ОперативныйПланПоБюджетамОбороты.КоличествоОборот КАК Количество,
		|	ОперативныйПланПоБюджетамОбороты.СуммаОборот КАК Сумма
		|ПОМЕСТИТЬ ВТ_ДанныеПланирования
		|ИЗ
		|	РегистрНакопления.ОперацииБюджетов.Обороты(
		|			,
		|			,
		|			,
		|			Раздел = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Планирование)
		|				И (ПериодОтчета В (&Периоды) ИЛИ &ПериодыНеУказаны = Истина)
		|				И &ДопПараметрыОтбора) КАК ОперативныйПланПоБюджетамОбороты
		|ГДЕ
		|	(ОперативныйПланПоБюджетамОбороты.КоличествоОборот <> 0
		|			ИЛИ ОперативныйПланПоБюджетамОбороты.СуммаОборот <> 0)";
		
		ПутиКДаннымПланирования = ПутиКДаннымПланирования();
		
		ДопПараметрыОтбора = Новый Массив;
		ШаблонДопПараметраОтбора = "%1 = &%2";
		Для Каждого КлючЗначение Из ПараметрыОтбораДанныхНовыхПериодов.Отбор Цикл
			ПутьКДанным = ПутиКДаннымПланирования[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			ДопПараметрыОтбора.Добавить(СтрШаблон(ШаблонДопПараметраОтбора, ПутьКДанным, КлючЗначение.Ключ));
		КонецЦикла;
		
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодыНеУказаны", Периоды = неопределено);
	Запрос.УстановитьПараметр("Периоды", Периоды);
	Для Каждого КлючЗначение Из ПараметрыОтбораДанныхНовыхПериодов.Отбор Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Запросы = Новый Массив;
	Запросы.Добавить(СтрЗаменить(ТекстЗапроса, "&ДопПараметрыОтбора", СтрСоединить(ДопПараметрыОтбора, " И ")));
	Запросы.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеПланирования.Период КАК Период
	|ИЗ
	|	ВТ_ДанныеПланирования КАК ВТ_ДанныеПланирования");
	
	Запрос.Текст = СтрСоединить(Запросы, ОбщегоНазначенияОПК.ТекстРазделителяЗапросовПакета());
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПутиКДаннымПланирования()
	
	Результат = Новый Соответствие;
	Результат.Вставить("Предназначение", "Предназначение");
	Результат.Вставить("Валюта", "Валюта");
	
	//АналитикаСтатейБюджетов
	Результат.Вставить("СтатьяБюджета", "АналитикаСтатейБюджетов.СтатьяБюджета");
	Результат.Вставить("Аналитика1", "АналитикаСтатейБюджетов.Аналитика1");
	Результат.Вставить("Аналитика2", "АналитикаСтатейБюджетов.Аналитика2");
	Результат.Вставить("Аналитика3", "АналитикаСтатейБюджетов.Аналитика3");
	Результат.Вставить("Аналитика4", "АналитикаСтатейБюджетов.Аналитика4");
	Результат.Вставить("Аналитика5", "АналитикаСтатейБюджетов.Аналитика5");
	Результат.Вставить("Аналитика6", "АналитикаСтатейБюджетов.Аналитика6");
	Результат.Вставить("ПриходРасход", "АналитикаСтатейБюджетов.ПриходРасход");
	
	//АналитикаСтруктуры
	Результат.Вставить("ЦФО", "АналитикаСтруктуры.ЦФО");
	Результат.Вставить("Проект", "АналитикаСтруктуры.Проект");
	Результат.Вставить("Организация", "АналитикаСтруктуры.Организация");
	
	//АналитикаПартнеров
	Результат.Вставить("Контрагент", "АналитикаПартнеров.Контрагент");
	Результат.Вставить("ДоговорКонтрагента", "АналитикаПартнеров.Договор");
	
	//АналитикаНоменклатуры
	Результат.Вставить("Номенклатура", "АналитикаНоменклатуры.Номенклатура");
	
	//АналитикаПотребностей
	Результат.Вставить("МестоПоставки", "АналитикаПотребностей.МестоПоставки");
	Результат.Вставить("Приоритет", "АналитикаПотребностей.Приоритет");
	Результат.Вставить("Менеджер", "АналитикаПотребностей.Менеджер");
	Результат.Вставить("Назначение", "АналитикаПотребностей.Назначение");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьГоризонт(Горизонт)
	
	// Периоды
	Если Горизонт.Свойство("Начало") И Горизонт.Свойство("Окончание") Тогда
		// Указан исходный горизонт
		Периоды = Документы.ОперативныйПлан.ПолучитьТаблицуПериодов(
			Горизонт.Начало, Горизонт.Окончание).ВыгрузитьКолонку("Период");
	ИначеЕсли Горизонт.Свойство("Отбор") И ТипЗнч(Горизонт.Отбор) = Тип("Структура") Тогда
		Периоды = ПолучитьПериодыСДанными(неопределено, Горизонт.Отбор);
		Если Периоды.Количество() > 1 Тогда
			Периоды = Документы.ОперативныйПлан.ПолучитьТаблицуПериодов(
				Периоды[0], Периоды[Периоды.Количество()-1]).ВыгрузитьКолонку("Период");
		КонецЕсли;
	Иначе
		Периоды = Новый Массив;
	КонецЕсли;
	Горизонт.Вставить("Периоды", Периоды);
	
	// Периоды с данными
	Если Горизонт.Свойство("Данные") И ТипЗнч(Горизонт.Данные) = Тип("Массив") Тогда
		Данные = Горизонт.Данные;
	ИначеЕсли Горизонт.Свойство("Отбор") И ТипЗнч(Горизонт.Отбор) = Тип("Структура") Тогда
		Данные = ПолучитьПериодыСДанными(Горизонт.Периоды, Горизонт.Отбор);
	Иначе
		Данные = Новый Массив;
	КонецЕсли;
	Горизонт.Вставить("Данные", Новый ФиксированныйМассив(Данные));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуСоответствия()
	
	// Добавить сначала старые периоды
	Для Каждого Период Из ГоризонтИсходный.Периоды Цикл
		ТаблицаСоответствия.Добавить().ПериодИсходный = Период;
	КонецЦикла;
	
	Позиция = ГоризонтИсходный.Периоды.Найти(ГоризонтНовый.Периоды[0]);
	Если Позиция = неопределено Тогда
		Позиция = 0;
	КонецЕсли;
	Для Каждого Период Из ГоризонтНовый.Периоды Цикл
		Если Позиция <ТаблицаСоответствия.Количество() Тогда
			Строка = ТаблицаСоответствия[Позиция];
			
		Иначе
			Строка = ТаблицаСоответствия.Добавить();
		КонецЕсли;
		Строка.ПериодНовый = Период;
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаСоответствия Цикл
		РассчитатьДействие(Строка);
		ЗаполнитьНаличиеДанных(Строка, ГоризонтИсходный, ГоризонтНовый);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтроку()
	
	Если ГоризонтНовый.Периоды.Количество() > 0 Тогда
		
		СтруктураПоиска = Новый Структура("ПериодНовый", ГоризонтНовый.Периоды[0]);
		Строки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Элементы.ТаблицаСоответствия.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ВСЕ ХОРОШО
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствияПериодИсходный.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор, "ТаблицаСоответствия.ПериодНовый", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

