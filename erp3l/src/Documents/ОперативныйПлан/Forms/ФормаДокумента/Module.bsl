#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если не используются 
	Если НЕ ВстраиваниеОПКПереопределяемый.КонстантаИспользоватьЦентрализованноеУправлениеЗакупками() Тогда
		КлючЗначение = Элементы.Предназначение.СписокВыбора.НайтиПоЗначению(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
		Элементы.Предназначение.СписокВыбора.Удалить(КлючЗначение);
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
		ТребуетсяКонтрольПриОткрытии = Истина;
		КлючевыеРеквизитыИзменены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// 
	УстановитьДоступностьБюджетов();
	УстановитьСостояниеДокумента();

	СтароеЗначениеВидОперативногоПлана = Объект.ВидОперативногоПлана;
	ЭтоПланированиеЗакупок = ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБюджетДвиженияРесурсов(Объект.Предназначение);
	ЭтотОбъект.ЕстьСуперПользователь = ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(Объект.ЦФО);
	
	ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере(Ложь);

	//
	ОписаниеКТ = ИнициализироватьПараметрыКроссТаблицы();
	СоздатьКроссТаблицу(ОписаниеКТ);
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
	//
	ОперативныйПланФормыУХ.ОбновитьОтборПоФункциональнымНаправлениям(ОписаниеКТ, ЭтотОбъект, Объект.ЦФО);
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	#Область УниверсальныеПроцессыСогласование
	ВстраиваниеОПКПереопределяемый.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтотОбъект);
	#КонецОбласти
	
	УстановитьЗапретИзмененияФормы();
	
	КроссТаблицаКоличествоСтрок = КроссТаблица.Количество();
	
	Таблица = Объект.ДвиженияОперации.Выгрузить(, "ИсходнаяНоменклатура");
	Таблица.Свернуть("ИсходнаяНоменклатура", "");
	Таблица.Сортировать("ИсходнаяНоменклатура");
	Если Таблица.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Таблица[0].ИсходнаяНоменклатура) Тогда
			Элементы.ГруппаЗаменаНоменклатуры.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// 
	ПериодНачало = Объект.ПериодОтчета;
	ПериодОкончание = Объект.ПериодОтчетаОкончание;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//
	ЭтоПланированиеЗакупок = ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБюджетДвиженияРесурсов(Объект.Предназначение);
	
	ПриЧтенииСозданииНаСервере();
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПодсказкуКонтрагента();
	
	Если ТребуетсяКонтрольПриОткрытии Тогда
		ПриОжиданииВыполнитьКонтрольДокумента();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПериодИзменен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Не завершено изменение периода. Подтвердите или отмените изменение периода, нажав на ""Применить"".'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	//
	КроссТаблицыУХКлиентСервер.СохранитьДанныеКроссТаблицыВОбъект(ТекущийОбъект, ОписаниеКТ, ЭтотОбъект);
	
	// Сохраняем в т.ч. активные периоды
	ТаблицаПериодов = ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды];
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтотОбъект);
	ТекущийОбъект.Периоды.Загрузить(ТаблицаПериодов.Выгрузить(АктивныеПериоды,"Период"));
	
	Если ПараметрыЗаписи.Свойство("НеОтправлятьНаСогласованиеПриПроведении") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеОтправлятьНаСогласованиеПриПроведении", Истина);
	КонецЕсли;
	//Проверка заполнения характеристик.
	Для Каждого ТекДвиженияОперации Из ТекущийОбъект.ДвиженияОперации Цикл
		ТекНоменклатура = ТекДвиженияОперации.Номенклатура;
		ТекХарактеристика = ТекДвиженияОперации.Характеристика;
		Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
			ХарактеристикиИспользуются = ВстраиваниеОПКПереопределяемый.ХарактеристикиИспользуются(ТекНоменклатура);
			Если (ХарактеристикиИспользуются) И (НЕ ЗначениеЗаполнено(ТекХарактеристика)) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Для номенклатуры %Номенклатура% не заполнена характеристика. Запись отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", Строка(ТекНоменклатура));
				ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		Иначе
			// Номенклатура не заполнена. Не требуется проверка заполнения характеристик.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	// Показать результат проверки лимитов на форме
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(ЭтотОбъект);
	
	//
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	// Сформируем параметры оповещения "ИзмененДокументТранзакции"
	ИменаРеквизитов = "Организация, Проект, Контрагент, ДоговорКонтрагента";
	ПараметрыОповещения = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, ТекущийОбъект, ИменаРеквизитов);
	ПараметрыОповещения.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Проект, "ПроектЭтапа");
	
	ПараметрыЗаписи.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	Оповестить("ИзмененДокументТранзакции", ПараметрыЗаписи.ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
    	ОбновитьЭлементыДополнительныхРеквизитов();
    	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "Запись_ВидОперПлана" И Источник = Объект.ВидОперативногоПлана Тогда
		ОбработатьОповещениеОбИзмененииВидаОперПлана();
	ИначеЕсли ИмяСобытия = "ЗагрузитьРезультатОбработки" Тогда
		ЗагрузитьРезультатыОбработки(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперативногоПланаПриИзменении(Элемент)
	
	Если Объект.ДвиженияОперации.Количество() > 0 И ЗначениеЗаполнено(СтароеЗначениеВидОперативногоПлана) 
		И (СтароеЗначениеВидОперативногоПлана <> Объект.ВидОперативногоПлана) Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВидОперативногоПланаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеЗавершения, НСтр("ru='При изменении варианта настройки будут очищены строки документа. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоВидуОперПланаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперативногоПланаПриИзмененииЗавершение(Результат, ДопПараметры) экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Объект.ВидОперативногоПлана = СтароеЗначениеВидОперативногоПлана;
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоВидуОперПланаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБюджетаПриИзменении(Элемент)
	ВидБюджетаПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура МестоПоставкиПриИзменении(Элемент)
	МестоПоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриходРасходПриИзменении(Элемент)
	ПриходРасходПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	ЦФОПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ПриИзмененииВидаОперацииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПроектПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПланированияПриИзменении(Элемент)
	ДокументПланированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбновитьПодсказкуКонтрагента();
	КонтрагентПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	ВалютаПриИзмененииНаСервере();
	ПриОжиданииВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
	КлючевыеРеквизитыИзменены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	КлючевыеРеквизитыИзменены = Истина;
КонецПроцедуры

#Область ПериодыПредыдущиеЗначения
	
&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	ПериодОтчетаПриИзмененииНаСервере(неопределено);
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОкончаниеПриИзменении(Элемент)
	
	ПериодОтчетаОкончаниеПриИзмененииНаСервере(неопределено);
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодОтчетаПриИзмененииНаСервере(Направление);
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОкончаниеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодОтчетаОкончаниеПриИзмененииНаСервере(Направление);
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеШапки(ТекущаяСтраница)
	
	ОчиститьСообщения();
	ЗаполненоКорректно = Истина;
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперативногоПлана) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Вариант настройки"" не заполнено'"),
			Объект.Ссылка,
			"Объект.ВидОперативногоПлана");
		ЗаполненоКорректно = Ложь;
		
	КонецЕсли;
	
	//
	ТребуетсяДокументПланирования = ОписаниеКТ.Схема.ЭтоРезервирование;
	Если ТребуетсяДокументПланирования Тогда
		Если Объект.РежимВводаДокументаПланирования <> 0 И НЕ ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Документ планирования"" не заполнено'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				"Объект.ДокументПланирования");
			ЗаполненоКорректно = Ложь;
		ИначеЕсли Объект.РежимВводаДокументаПланирования <> 0 И ДокументПланированияНеКорректен Тогда
			ТекстСообщения = НСтр("ru = 'В поле ""Документ планирования"" необходимо выбрать актуальный документ планирования.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				"Объект.ДокументПланирования");
			ЗаполненоКорректно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если не заполнены все обязательные аналитики шапки, то не переходим
	Если ЕстьНезаполненныеАналитикиШапки(ОписаниеКТ) Тогда
		ЗаполненоКорректно = Ложь;
	КонецЕсли;
	
	Возврат ЗаполненоКорректно;
	
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОткрытаФормаРасшифровки Тогда
		// Если открыта расшифровка, то смена страниц запрещена
 		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКроссТаблица;
		Возврат;
		
	КонецЕсли;
	
	//
	Если ТекущаяСтраница<>Элементы.СтраницаОсновное Тогда
		// Это переход со страницы Основное
		
		Если НЕ ПроверитьЗаполнениеШапки(ТекущаяСтраница) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
			Возврат;
		КонецЕсли;
		
		Если ПериодИзменен Тогда
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
			ПоказатьПредупреждение(, НСтр("ru = 'Не завершено изменение периода. Подтвердите или отмените изменение периода, нажав на ""Применить"".'"));
			Возврат;
			
		КонецЕсли;
		
		Если КлючевыеРеквизитыИзменены Тогда
			
			ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
			Если ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица].Количество() > 0 Тогда
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет,	НСтр("ru = 'Скопировать данные
																			|на новые аналитики'"));
				СписокКнопок.Добавить(КодВозвратаДиалога.Да,	НСтр("ru = 'Заполнить текущими
																			|планами'"));
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru = 'Вернуться к 
																			|закладке Основное'"));
				
				Завершение = Новый ОписаниеОповещения("ВопросЗаполнитьОбновитьЗавершение", ЭтотОбъект, Новый Структура);
				ПоказатьВопрос(Завершение, НСтр("ru='Изменились ключевые аналитики. Что сделать с данными планирования?'"), СписокКнопок);
				
			Иначе
				КлючевыеРеквизитыИзменены = Ложь;
				ЗаполнитьДокумент(Новый Структура);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
	        И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
	        СвойстваВыполнитьОтложеннуюИнициализацию();
	        УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	    КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНезаполненныеАналитикиШапки(ОписаниеКТ)
	
	Результат = Ложь;
	
	Для Каждого КлючЗначение Из ОписаниеКТ.Схема.СтруктураАналитик Цикл
		
		ОписаниеАналитики = КлючЗначение.Значение;
		Если ОписаниеАналитики.Использование <> ПредопределенноеЗначение("Перечисление.ИспользованиеАналитик.КлючеваяАналитика") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОписаниеАналитики.ОбязательноеЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = КлючЗначение.Ключ;
		Если ИмяРеквизита = "Валюта" Тогда
			ИмяРеквизита = "ВалютаДокумента";
		КонецЕсли;
		
		//
		Если ИмяРеквизита = "Аналитика1" И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидАналитики1) Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизита = "Аналитика2" И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидАналитики2) Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизита = "Аналитика3" И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидАналитики3) Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизита = "Аналитика4" И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидАналитики4) Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизита = "Аналитика5" И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидАналитики5) Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизита = "Аналитика6" И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидАналитики6) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Если ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", Строка(КлючЗначение.Значение.Аналитика));
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект." + ИмяРеквизита);
		Результат = Истина;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РежимВводаДокументаПланированияПриИзменении(Элемент)
	ОбновитьКроссТаблицуПриИзмененииРежимаВводаДокументаПланирования();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Назначение_КонтрагентПриИзменении(Элемент)
	СформироватьПредставлениеНазначенияРезерва(ЭтотОбъект);
	ДоступностьНазначениеДоговор(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Назначение_ДоговорКонтрагентаПриИзменении(Элемент)
	СформироватьПредставлениеНазначенияРезерва(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьОбновитьЗавершение(Результат, ДопПараметры) экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокумент(Новый Структура);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьДокумент(Новый Структура("ОбновитьИсходныеПланы"));
	КонецЕсли;
	КлючевыеРеквизитыИзменены = Ложь;
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораПериода(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораПериода(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#Область УниверсальныеПроцессыСогласование

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.ПринятьКСогласованию(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.ИсторияСогласования(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.СогласоватьДокумент(ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.ОтменитьСогласование(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ВстраиваниеОПККлиентПереопределяемый.МаршрутСогласования(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтотОбъект["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтроль

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД =  Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонтрольУХКлиент.ПоказатьРасшифровкуКонтроля(Объект, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаПриАктивизацииЯчейки(Элемент)
	Элемент.ТекущаяСтрока = неопределено;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыКроссТаблица

#Область ОбработчикиСобытийКроссТаблицы

&НаКлиенте
Процедура КроссТаблицаПриИзменении(Элемент)
	КроссТаблицаКоличествоСтрок = КроссТаблица.Количество();
	ПриОжиданииВыполнитьКонтрольДокумента();
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "КроссТаблица_Реквизит_ИсходнаяНоменклатура" Тогда
		Если ЗначениеЗаполнено(Элементы.КроссТаблица.ТекущиеДанные.ИсходнаяНоменклатура) Тогда
			СтруктураПоиска = Новый Структура("Номенклатура");	
			СтруктураПоиска.Номенклатура = Элементы.КроссТаблица.ТекущиеДанные.Номенклатура;
			мСтроки = Объект.ДвиженияОперации.НайтиСтроки(СтруктураПоиска);
			Если мСтроки.Количество() > 0 Тогда
				мФорма = ПолучитьФорму("Документ.ОперативныйПлан.Форма.ФормаИсходнаяНоменклатура");
				мФорма.НоменклатураТекущая = мСтроки[0].Номенклатура;
				мФорма.НоменклатураИсходная = мСтроки[0].ИсходнаяНоменклатура;
				мФорма.ХарактеристикаТекущая = мСтроки[0].Характеристика;
				мФорма.ХарактеристикаИсходная = мСтроки[0].ИсходнаяХарактеристика;
				мФорма.ЕдиницаИзмеренияТекущая = мСтроки[0].ЕдиницаИзмерения;
				мФорма.ЕдиницаИзмеренияИсходная = мСтроки[0].ИсходнаяЕдиницаИзмерения;
				мФорма.Открыть();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоИзмерениеСтроки = СтрНайти(Поле.Имя, "ИзмерениеСтрока") > 0;
	Если НЕ ЭтоИзмерениеСтроки Тогда
		
		ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
		СтандартнаяОбработка = НЕ ОписаниеКТ.ЕстьРасшифровка;
		Если НЕ СтандартнаяОбработка Тогда
			Расшифровка(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	КроссТаблицыУХКлиент.УстановитьМинимальныеЗначенияДляЭлементовИзменение(ОписаниеКТ, ЭтотОбъект, Элемент);
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
	
	//
	Поле = Элемент.ТекущийЭлемент;
	ЭтоИзмерениеСтроки = СтрНайти(Поле.Имя, "ИзмерениеСтрока") > 0;
	Если НЕ ЭтоИзмерениеСтроки Тогда
		ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
		Если ОписаниеКТ.ЕстьРасшифровка Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКТИПроверитьЛимитыНаСервере(ОписаниеКТ)

	КроссТаблицыУХКлиентСервер.ЗаполнитьТаблицуИзКроссТаблицы(
		Объект,
		ОписаниеКТ,
		ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица],
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка],
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды]);
		
	// Пересчитать сумму документа
	Объект.СуммаДокумента = Объект.ДвиженияОперации.Итог("Сумма");
	
	КонтрольУХ.ВыполнитьИнтерактивныйКонтроль(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
		
		ТД = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
		ТД.НомерСтроки = ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица].Количество();
		
		Если Копирование Тогда
			ИДСтрокиИсточника = ТД.ИДСтроки;
		КонецЕсли;
		
		ТД.ИДСтроки = Новый УникальныйИдентификатор;
		
		Если ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено Тогда
			// Если включен режим ограничения типа номенклатуры, то 
			Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
				ТД.Номенклатура = Новый(ТипНоменклатуры);
			КонецЕсли;
		КонецЕсли; 
		
		// Если статья пустая, то признак - контролируется, т.к. при установленном отборе 
		// по УровнюКонтроля не должны пропадать строки с пустой статьей.
		Если ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("СтатьяБюджета") <> неопределено Тогда
			ТД.УровеньКонтроляСтатьиБюджета = ПредопределенноеЗначение("Перечисление.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам");
		КонецЕсли;
		
		Если Копирование Тогда
			СкопироватьРасшифровку(ОписаниеКТ, ИДСтрокиИсточника, ТД.ИДСтроки);
		КонецЕсли; 
		
	КонецЕсли;
	
	ПроверкаЛимитов_НеВыполнять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ТаблицаПериодов = ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды];
	
	// Расшифровка
	Если ОписаниеКТ.ЕстьРасшифровка И Элемент.ТекущийЭлемент <> неопределено Тогда
		
		СтруктураОтбора = Новый Структура;
		
		ОписаниеПериода = КроссТаблицыУХКлиентСервер.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов,Элемент.ТекущийЭлемент.Имя);
		Если ОписаниеПериода <> неопределено Тогда
			
			СтруктураОтбора.Вставить("ИДСтроки", ТекущиеДанные.ИДСтроки);
			СтруктураОтбора.Вставить("ИДПериода", Новый УникальныйИдентификатор(СтрЗаменить(ОписаниеПериода.ИмяКолонки, "_", "-")));
			ДоступностьРасшифровки = Истина;
			
		Иначе
			
			СтруктураОтбора.Вставить("КолонкаТерминатор", "*"); // такого символа в терминаторе быть не может
			ДоступностьРасшифровки = Ложь;
			
		КонецЕсли; 
		
		Элементы[ОписаниеКТ.Элементы.Расшифровка].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Элементы[ОписаниеКТ.Элементы.Расшифровка].Доступность = ДоступностьРасшифровки;
		
		ПодсчитатьИтогиРасшифровки(ОписаниеКТ, СтруктураОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПроверкаЛимитов_НеВыполнять = Ложь;
	ПриОжиданииВыполнитьКонтрольДокумента();
	
	Если ОтменаРедактирования = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	КроссТаблицыУХКлиентСервер.РассчитатьНомерСтрокиКроссТаблицы(ОписаниеКТ, ЭтотОбъект);
	
	// Очистка количества для товарных категорий
	ЭлементКТ = Элементы[ОписаниеКТ.Элементы.КроссТаблица];
	СтрокаКТ = ЭлементКТ.ТекущиеДанные;

	Если КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Номенклатура") Тогда
		// очистка количества, если это товарная категория
		Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") И СтрокаКТ.ЭтоКатегорияНоменклатуры	Тогда
			
			АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтотОбъект);
			
			//
			МассивРесурсов = Новый Массив();
			МассивРесурсов.Добавить(ОписаниеКТ.Схема.Ресурсы.Количество);
			
			МассивПоказателей = Новый Массив();
			МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Исходное);
			МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Изменение);
			МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Результат);
			
			МассивПоказателей = КроссТаблицыУХКлиентСервер.ПолучитьРеквизиты(МассивРесурсов, МассивПоказателей, АктивныеПериоды);
			
			Для каждого ИмяПоказателя Из МассивПоказателей Цикл
				
				Если СтрокаКТ[ИмяПоказателя] <> 0 Тогда
					СтрокаКТ[ИмяПоказателя] = 0;
				КонецЕсли;
			
			КонецЦикла; 
			
			// Расчет итогов по текущей строке КТ
			КТ = КроссТаблицыУХКлиентСервер;
			КТ.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
			
			// Расчет иных итогов
			КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, ЭтотОбъект, Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОписаниеКТ.ЕстьРасшифровка Тогда
		Расшифровка(неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	//
	//СтрокаУжеСуществует = СтрокаПовторяетУжеСуществующуюСтрокуКроссТаблицы(Элемент.ТекущаяСтрока);
	СтрокаУжеСуществует = КроссТаблицыУХКлиент.СтрокаПовторяетУжеСуществующуюСтрокуКроссТаблицы(
		ОписаниеКТ, ЭтотОбъект, Элемент.ТекущаяСтрока);
	
	Если НЕ СтрокаУжеСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		// Если это отмена ввода новой дублирующейся строки, то спокойно завершаемся 
		Возврат;
	Иначе
		ТекстСообщения = НСтр("ru = 'Значения аналитик строки совпадают со значениями аналитик ранее введенной строки. Укажите в строке уникальный набор аналитик и программа запомнит строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	КТ = КроссТаблицыУХКлиентСервер;
	КТ.РассчитатьНомерСтрокиКроссТаблицы(ОписаниеКТ, ЭтотОбъект);
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ВсегоСтрок = Элементы.КроссТаблица.ВыделенныеСтроки.Количество();
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Действительно хотите удалить строк%1?'"), ?(ВсегоСтрок = 1, "у", "и"));
	
	Оповещение = Новый ОписаниеОповещения("КроссТаблицаПередУдалениемЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#Область СлужебныеПроцедурыФункции

//
&НаКлиенте
Процедура ПересчитатьИтогиИПроверитьЛимиты() Экспорт

	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	КроссТаблицаПриИзменении(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);

КонецПроцедуры
 
&НаКлиенте
Процедура КроссТаблицаПередУдалениемЗавершение(Результат, ДопПараметры) экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
		ОперативныйПланФормыУХКлиент.УдалитьОтмеченныеСтрокиКТ(ОписаниеКТ, ЭтотОбъект);
		
		// 
		ЭлементКроссТаблица = Элементы[ОписаниеКТ.Элементы.КроссТаблица];
		КроссТаблицаПослеУдаления(ЭлементКроссТаблица);
		КроссТаблицаПриИзменении(ЭлементКроссТаблица);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ПодключаемыеОбработчикиКроссТаблицы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКонтрольДокумента()
	
	Если ПроверкаЛимитов_НеВыполнять = Ложь Тогда
		Модифицированность = Истина;
		ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
		СохранитьКТИПроверитьЛимитыНаСервере(ОписаниеКТ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбщийОбработчикНачалаВыбораАналитик(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ОперативныйПланФормыУХКлиент.ОбщийОбработчикНачалаВыбораАналитик(Элемент, ДанныеВыбора, СтандартнаяОбработка, ОписаниеКТ, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбщийОбработчикИзмененияАналитик(Элемент)
	
	Если СтрНайти(Элемент.Имя, "СтатьяБюджета") > 0 Тогда
		АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ИначеЕсли СтрНайти(Элемент.Имя, "Аналитика") > 0 Тогда
		АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
	ОбработатьИзменениеАналитикНаСервере(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммаРезультат(Элемент)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ПриИзмененииКТ_СуммаРезультат(ОписаниеКТ, ЭтотОбъект, Элемент.Имя);
	
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммаИзменение(Элемент)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ПриИзмененииКТ_СуммаИзменение(ОписаниеКТ, ЭтотОбъект, Элемент.Имя);
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоРезультат(Элемент)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ПриИзмененииЭлементаКТ_КоличествоРезультат(ОписаниеКТ, ЭтотОбъект, Элемент.Имя);
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоИзменение(Элемент)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ПриИзмененииКТ_КоличествоИзменение(ОписаниеКТ, ЭтотОбъект, Элемент.Имя);
	КроссТаблицаПриАктивизацииЯчейки(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

#Область Расшифровка
	
&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммаРезультатВРасшифровке(Элемент)
	
	ТД = Элемент.Родитель.ТекущиеДанные;
	ТД.СуммаИзменение = ТД.Сумма - ТД.СуммаИсходное;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммаИзменениеВРасшифровке(Элемент)
	
	ТД = Элемент.Родитель.ТекущиеДанные;
	ТД.Сумма = ТД.СуммаИсходное + ТД.СуммаИзменение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоРезультатВРасшифровке(Элемент)
	
	ТД = Элемент.Родитель.ТекущиеДанные;
	ТД.КоличествоИзменение = ТД.Количество - ТД.КоличествоИсходное;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличествоИзменениеВРасшифровке(Элемент)
	
	ТД = Элемент.Родитель.ТекущиеДанные;
	ТД.Количество = ТД.КоличествоИсходное + ТД.КоличествоИзменение;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ПодключаемыеОбработчикиРасшифровки

&НаКлиенте
Процедура Подключаемый_Расшифровка_ПриАктивизацииСтроки(Элемент, НоваяСтрока, Копирование)
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_Расшифровка_ПередНачаломИзменения(Элемент, Отказ)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	КроссТаблицыУХКлиент.УстановитьМинимальныеЗначенияДляЭкспрессРасшифровки(ОписаниеКТ, ЭтотОбъект, Элемент);
	АналитикиСтатейБюджетовУХКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_Расшифровка_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		СтруктураИД = ПолучитьСтруктуруИДРасшифровки(ОписаниеКТ);
		
		ЭлементКТ = Элементы[ОписаниеКТ.Элементы.Расшифровка];
		
		ЭлементКТ.ТекущиеДанные.ИДСтроки = СтруктураИД.ИДСтроки;
		ЭлементКТ.ТекущиеДанные.ИДПериода = СтруктураИД.ИДПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Расшифровка_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	СтрокаУжеСуществует = КроссТаблицыУХКлиент.СтрокаРасшифровкиПовторяетУжеСуществующуюСтрокуКроссТаблицы(
		ОписаниеКТ, ЭтотОбъект, Элемент.ТекущаяСтрока);
	
	Если НЕ СтрокаУжеСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		// Если это отмена ввода новой дублирующейся строки, то завершаемся 
		Возврат;
	Иначе
		ТекстСообщения = НСтр("ru = 'Значения аналитик строки совпадают со значениями аналитик ранее введенной строки. Укажите в строке уникальный набор аналитик и программа запомнит строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Расшифровка_ПриИзменении(Элемент)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	СтруктураИД = ПолучитьСтруктуруИДРасшифровки(ОписаниеКТ);
	
	ПодсчитатьИтогиРасшифровки(ОписаниеКТ, СтруктураИД);
	
	СохранитьИтогиРасшифровкиВКроссТаблице(ОписаниеКТ, СтруктураИД);
	
	// Расчет итогов по текущей строке КТ
	СтрокаКТ = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтотОбъект);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	
	КроссТаблицаПриИзменении(Элементы[ОписаниеКТ.Элементы.КроссТаблица]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Расшифровка_ПередУдалением(Элемент, Отказ)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ОперативныйПланФормыУХКлиент.ПроверитьВозможностьУдаленияСтрокиРасшифровки(ОписаниеКТ, ЭтотОбъект, Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыФункции
	
&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_СуммаРезультат(ОписаниеКТ, Форма, ИмяЭлемента)
	
	КТ = КроссТаблицыУХКлиентСервер;
	
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ 		= КТ.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
	
	// Изменяем колонку Изменено
	Если ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования Тогда
		Разница = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_");
	Иначе
		Разница = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_");
	КонецЕсли;
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", Разница);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_СуммаИзменение(ОписаниеКТ, Форма, ИмяЭлемента)

	КТ = КроссТаблицыУХКлиентСервер;
	
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ		= КТ.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
	
	// Изменяем колонку Изменено
	Если ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования Тогда
		Сумма = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_");
	Иначе
		Сумма = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") + КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_");
	КонецЕсли;
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_", Сумма);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);

	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЭлементаКТ_КоличествоРезультат(ОписаниеКТ, Форма, ИмяЭлемента)
	
	// Получаем текущий период
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ 	= КроссТаблицыУХКлиентСервер.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
		
	ПриИзмененииКТ_КоличествоРезультат(ОписаниеКТ, Форма, ПериодКТ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_КоличествоРезультат(ОписаниеКТ, Форма, ПериодКТ)

	КТ = КроссТаблицыУХКлиентСервер;
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	
	// Изменяем колонку Изменено
	КоличествоИзменение = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоИсходное_");
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "КоличествоИзменение_", КоличествоИзменение);
	
	ЕстьРеквизитЭтоКатегория = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКТ, "ЭтоКатегорияНоменклатуры");
	ЕстьРеквизитЦена = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКТ, "Цена");
	Если (ЕстьРеквизитЭтоКатегория) И (ЕстьРеквизитЦена) Тогда
		Если НЕ СтрокаКТ.ЭтоКатегорияНоменклатуры Тогда
			// СуммаРезультат
			СуммаРезультат = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_") * СтрокаКТ.Цена;
			КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_", СуммаРезультат);
		КонецЕсли; 
	Иначе
		// Не все реквизиты выведены. Не пересчитываем сумму.
	КонецЕсли;
	
	// СуммаИзменение
	СуммаИзменение = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") ;
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", СуммаИзменение);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКТ_КоличествоИзменение(ОписаниеКТ, Форма, ИмяЭлемента)

	КТ = КроссТаблицыУХКлиентСервер;
	
	СтрокаКТ		= Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	ПериодКТ 		= КТ.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента);
	
	// Изменяем колонку Изменено
	КоличествоРезультат = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоИсходное_") + КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоИзменение_");
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_", КоличествоРезультат);
	
	Если НЕ СтрокаКТ.ЭтоКатегорияНоменклатуры Тогда
		// СуммаРезультат
		СуммаРезультат = КТ.Ресурс(СтрокаКТ, ПериодКТ, "КоличествоРезультат_") * СтрокаКТ.Цена;
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_", СуммаРезультат);
	КонецЕсли;
	
	// СуммаИзменение
	СуммаИзменение = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_") ;
	КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", СуммаИзменение);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

#КонецОбласти 

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	Подключаемый_ОбщийОбработчикИзмененияАналитик(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	Подключаемый_ОбщийОбработчикИзмененияАналитик(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Подключаемый_ОбщийОбработчикНачалаВыбораАналитик(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ВыполнитьКомандуУХ(Команда)
	
	Если Команда.Имя = "ВыполнитьКонтрольДокумента" Тогда
		Подключаемый_ВыполнитьКонтрольДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ТД = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ДопПараметры = КроссТаблицыУХКлиентСервер.АналитикиСтрокиКТ(ОписаниеКТ, ЭтотОбъект, ТД, "Предназначение, ВидОперации");
	Если ДопПараметры.Свойство("ВалютаДокумента") > 0 Тогда
		ДопПараметры.Вставить("Валюта", ДопПараметры.ВалютаДокумента);
	КонецЕсли;
	ДопПараметры.Вставить("Дата", Объект.Дата);
	ДопПараметры.Вставить("ПериодОтчета", Объект.ПериодОтчета);
	ДопПараметры.Вставить("ПериодОтчетаОкончание", Объект.ПериодОтчетаОкончание);
	
	//
	ДопПараметры.Вставить("ОписаниеКТ", ОписаниеКТ);
	ДопПараметры.Вставить("ИДСтроки", ТД.ИДСтроки);
	ДопПараметры.Вставить("Периоды", ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды]);
	ДопПараметры.Вставить("Данные", ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка]);
	ДопПараметры.Вставить("ТаблицаПлановКЗаполнению", ТаблицаПлановКЗаполнению);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаЗакрытие", ЭтотОбъект);
	
	ОткрытаФормаРасшифровки = Истина;
	ОткрытьФорму("Документ.ОперативныйПлан.Форма.ФормаРасшифровки", ДопПараметры, ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНачальныеОстатки(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьНачальныеОстаткиЗавершение",
		ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Обновить колонку ""Исходное значение""?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНачальныеОстаткиЗавершение(Результат, Параметры) экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокумент(Новый Структура("ОбновитьИсходныеПланы"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлючевымАналитикам(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоКлючевымАналитикамЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, 
	НСтр("ru='Перезаполнить данными по аналитикам шапки выбранного периода?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлючевымАналитикамЗавершение(Результат, Параметры) экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДокумент(Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиСвободногоЛимита(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьОстаткамиСвободногоЛимитаЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, 
	НСтр("ru='Перезаполнить остатками свободного лимита по аналитикам шапки выбранного периода?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиСвободногоЛимитаЗавершение(Результат, Параметры) экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДокумент(Новый Структура("ЗаполнитьОстаткамиСвободногоЛимита"));
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьНеЗаполненныеКолонки(Команда)
	
	НовоеЗначение = НЕ Элементы.КроссТаблицаУбратьНеИзмененныеКолонкиСтроки.Пометка;
	
	Элементы.КроссТаблицаУбратьНеИзмененныеКолонкиСтроки.Пометка = НовоеЗначение;
	
	СкрытьНезаполненныеКолонкиНаСервере(НовоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьТипНоменклатуры(Команда)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ВстраиваниеОПККлиентПереопределяемый.ЗафиксироватьТипНоменклатуры(
		ЭтотОбъект,
		"КроссТаблицаЗафиксироватьТипНоменклатуры",
		ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Измерение+"Номенклатура");
		
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьИсходнойНоменклатуры(Команда)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ИмяЭлемента = ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Реквизит+"ИсходнаяНоменклатура";
	
	Элементы.КроссТаблицаКнопкаВидимостьИсходнойНоменклатуры.Пометка = НЕ Элементы.КроссТаблицаКнопкаВидимостьИсходнойНоменклатуры.Пометка;
	
	Элементы[ИмяЭлемента].Видимость = Элементы.КроссТаблицаКнопкаВидимостьИсходнойНоменклатуры.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДопРеквизитов(Команда)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ИмяЭлемента = ОписаниеКТ.ИмяГруппыДопРеквизиты;
	
	Элементы.КроссТаблицаКнопкаВидимостьДопРеквизитов.Пометка = НЕ Элементы.КроссТаблицаКнопкаВидимостьДопРеквизитов.Пометка;
	
	Элементы[ИмяЭлемента].Видимость = Элементы.КроссТаблицаКнопкаВидимостьДопРеквизитов.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоЛимитируемыеСтатьи(Команда)
	
	УправлениеВводомСтатьиБюджета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНоменклатуру(Команда)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ОбработатьЗаменуНоменклатурыЗавершение = Новый ОписаниеОповещения("ОбработатьЗаменуНоменклатурыЗавершение", ЭтотОбъект); 
	
	ЗаполнитьПотребности();
	Параметры_ = Новый Структура("ТаблицаНоменклатуры", ПотребностиВНоменклатуреПоПериодам);
	
	ПутьКФорме = "Обработка.ЗаменаНоменклатурыТЗ.Форма.Форма";
	
	ОткрытьФорму(ПутьКФорме, Параметры_, ЭтотОбъект, Истина,,,
		ОбработатьЗаменуНоменклатурыЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФормаНастройкиАналитикДокумента(Команда)
	
	Если Объект.ВидОперативногоПлана.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("НастройкаАналитикДокументаЗавершение", ЭтотОбъект, Новый Структура);
	
	ОписаниеПараметров = Новый Структура("Вход, Выход, Спец");
	ОписаниеПараметров.Выход = "СуммаРазрядность,СуммаПослеЗапятой,КолвоРазрядность,КолвоПослеЗапятой,СуммаРазрядностьВвод,СуммаПослеЗапятойВвод,КолвоРазрядностьВвод,КолвоПослеЗапятойВвод";
	ОписаниеПараметров.Вход = "Предназначение, " + ОписаниеПараметров.Выход;
	ОписаниеПараметров.Спец = "НастройкаАналитик";
	
	//
	Реквизиты = ОписаниеПараметров.Вход+"," + ОписаниеПараметров.Спец;
	ПараметрыФормы = Новый Структура(Реквизиты);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект, Реквизиты);
	ПараметрыФормы.Вставить("ОписаниеПараметров",  ОписаниеПараметров);
	
	ОткрытьФорму("Документ.ОперативныйПлан.Форма.ФормаНастройкиАналитикДокумента", ПараметрыФормы, 
		ЭтотОбъект,,,,Обработчик,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если ОписаниеКТ.Схема.ЭтоБЗ 											// Для бюджета закупок создание заявки не производится
		ИЛИ ОписаниеКТ.Схема.Аналитики.мСтрока.Количество() = 0				// При отсутствии строк создание заявки не производится
		ИЛИ ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0 Тогда	// При наличии расшифровки создание заявки пока не производится
		Возврат; 
	КонецЕсли;
	
	ТД = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОписаниеПериода = КроссТаблицыУХКлиентСервер.ПолучитьОписаниеПериодаПоИмениЭлемента(
						ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды], 
						Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущийЭлемент.Имя);
	Если ОписаниеПериода = неопределено Тогда
		Возврат; // Если период не выбран, то создание заявки не производится
	КонецЕсли; 
	
	//
	ИмяПоказателя = "СуммаРезультат";
	
	// Сформировать параметры заявки
	ДанныеЗаполнения = КроссТаблицыУХКлиентСервер.АналитикиСтрокиКТ(ОписаниеКТ, ЭтотОбъект, ТД);
	ДанныеЗаполнения.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ДанныеЗаполнения.Вставить("СуммаДокумента", Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные[ИмяПоказателя+"_"+ОписаниеПериода.ИмяКолонки]);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.Резервирование")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.ПланированиеИРезервирование") Тогда
		
		Если Объект.РежимВводаДокументаПланирования = 1 Тогда
			ДанныеЗаполнения.Вставить("ДокументПланирования", Объект.ДокументПланирования);
		Иначе
			ДанныеЗаполнения.Вставить("ДокументПланирования", Объект.Ссылка);
		КонецЕсли;
		
		Назначение = ПолучитьНазначениеРезерва(ДанныеЗаполнения.ДокументПланирования);
		
		Если НЕ ДанныеЗаполнения.Свойство("Организация") Тогда
			ДанныеЗаполнения.Вставить("Организация", Назначение.Организация);
		КонецЕсли;
		Если НЕ ДанныеЗаполнения.Свойство("Контрагент") Тогда
			ДанныеЗаполнения.Вставить("Контрагент", Назначение.Контрагент);
		КонецЕсли;
		Если НЕ ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
			ДанныеЗаполнения.Вставить("ДоговорКонтрагента", Назначение.ДоговорКонтрагента);
		КонецЕсли;
		
		//
		Если ДанныеЗаполнения.Свойство("ЦФО") 
			И ЗначениеЗаполнено(ДанныеЗаполнения.ЦФО) 
			И (НЕ ДанныеЗаполнения.Свойство("Организация") ИЛИ НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Организация)) Тогда
			ДанныеЗаполнения.Вставить("Организация", ДанныеЗаполнения.ЦФО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные.Свойство("ПриходРасход") Тогда
		Направление = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные.ПриходРасход;
	КонецЕсли;
	
	ОткрытьФормуЗаявки(ОписаниеКТ.Схема.ЭтоБДДС, ОписаниеКТ.Схема.ЭтоБДР, Направление, ДанныеЗаполнения);
		
КонецПроцедуры

// Общая команда управления кросс-таблицей (управление видимостью)
&НаКлиенте
Процедура Подключаемый_ОбщаяКомандаУправленияКТ(Команда)
	
	КроссТаблицыУХКлиент.ВыполнитьКомандуКТ(Команда, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьРасшифровку(Команда)
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	Если НЕ ОписаниеКТ.Команды.Свойство("КроссТаблица_УправлениеРасшифровкой") Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОписаниеКоманды = ОписаниеКТ.Команды.КроссТаблица_УправлениеРасшифровкой;
	КомандаФормы = Команды.Найти(ОписаниеКоманды.Имя);
	Если КомандаФормы = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Подключаемый_ОбщаяКомандаУправленияКТ(КомандаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлючевымАналитикамДругогоПериода(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросЗаполнитьПоКлючевымАналитикамДругогоПериодаЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru='Перезаполнить данные по аналитикам шапки другого периода?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастройкаАналитикДокументаЗавершение(Результат, ДополнительныеПараметры) экспорт
	
	Если Результат = неопределено Или ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.ОК Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьНастройкуАналитикНаСервере(Результат.Параметры, Результат.ОписаниеПараметров);
		ПриОжиданииВыполнитьКонтрольДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкуАналитикНаСервере(Параметры, ОписаниеПараметров)
	
	//
	ЗаполнитьЗначенияСвойств(Объект, Параметры, ОписаниеПараметров.Выход);
	//
	Объект.НастройкаАналитик.Загрузить(Параметры.НастройкаАналитик.Выгрузить());
	ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере();	
	
	//
	ОписаниеКТ = ИнициализироватьПараметрыКроссТаблицы();
	СоздатьКроссТаблицу(ОписаниеКТ);
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВводомСтатьиБюджета()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	КроссТаблицыУХ.УправлениеВводомСтатейБюджета(ОписаниеКТ, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаЗакрытие(Результат, ДополнительныеПараметры) экспорт

	ОткрытаФормаРасшифровки = Ложь;
	
	Если Результат = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КТ = КроссТаблицыУХКлиентСервер;
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	// Удаляем прошлую расшифровку
	СтрокиКУдалению = ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка].НайтиСтроки(Новый Структура("ИдСтроки", Результат.ИДСтроки));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка].Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	// Добавляем новую расшифровку
	Для каждого Строка Из Результат.Данные Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка].Добавить(), Строка);
	КонецЦикла; 
	
	// Пересчитываем итоги строки
	АктивныеПериоды = КТ.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтотОбъект);
	
	ИДРасшифровки = Новый Структура("ИДСтроки, ИДПериода", Результат.ИДСтроки);
	Для каждого СтрокаПериод Из АктивныеПериоды Цикл
		
		ИДРасшифровки.ИДПериода = Новый УникальныйИдентификатор(СтрЗаменить(СтрокаПериод.ИмяКолонки, "_", "-"));
		ПодсчитатьИтогиРасшифровки(ОписаниеКТ, ИДРасшифровки);
		СохранитьИтогиРасшифровкиВКроссТаблице(ОписаниеКТ, ИДРасшифровки);
		
	КонецЦикла; 
	
	// Расчет итогов по текущей строке КТ
	СтрокаКТ = Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущиеДанные;
	КТ.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, ЭтотОбъект, Ложь);
	
	// Пересчитываем иные итоги
	КроссТаблицаПриИзменении(ОписаниеКТ);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИтогиРасшифровкиВКроссТаблице(ОписаниеКТ, СтруктураИД)
	
	СтрокаИтого = ЭтотОбъект[ОписаниеКТ.реквизиты.РасшифровкаИтоги][0];
	
	СписокРеквизитовИтогов = "Сумма, СуммаИсходное, СуммаИзменение";
	Итоги = Новый Структура(СписокРеквизитовИтогов);
	ЗаполнитьЗначенияСвойств(Итоги, СтрокаИтого);
	
	//
	Строки = ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица].найтиСтроки(Новый Структура("ИДСтроки", СтруктураИД.ИДСтроки));
	
	ИмяКолонки = СтрЗаменить(Строка(СтруктураИД.ИДПериода), "-", "_");
	СтрокиПериодов = ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды].НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
	
	Если Строки.Количество() > 0 И СтрокиПериодов.Количество() > 0 Тогда
		
		СтрокаКТ = Строки[0];
		Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
			
			ОписаниеПоля = КлючЗначение.Значение;
			
			//
			СтрокаКТ[ОписаниеПоля.Имя + "_"+ИмяКолонки] = СтрокаИтого[ОписаниеПоля.ИмяРеквизитаТЧ];
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсчитатьИтогиРасшифровки(ОписаниеКТ, СтруктураИД)
	
	// посчитать итоги
	СписокРеквизитовИтогов = "Сумма, СуммаИсходное, СуммаИзменение";
	Итоги = Новый Структура(СписокРеквизитовИтогов,0,0,0);
	
	//
	Итоги = Новый Структура;
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
		
		ОписаниеПоля = КлючЗначение.Значение;
		Итоги.Вставить(ОписаниеПоля.ИмяРеквизитаТЧ, 0);
		
	КонецЦикла; 
	
	//
	СтрокиРасшифровки = ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка].НайтиСтроки(СтруктураИД);
	Для Каждого Строка Из СтрокиРасшифровки Цикл
		
		Для каждого КлючЗначение Из Итоги Цикл
			Итоги[КлючЗначение.Ключ] = Итоги[КлючЗначение.Ключ] + Строка[КлючЗначение.Ключ];
		КонецЦикла; 
		
	КонецЦикла;
	
	Если ЭтотОбъект[ОписаниеКТ.Реквизиты.РасшифровкаИтоги].Количество() = 0 Тогда
		ЭтотОбъект[ОписаниеКТ.Реквизиты.РасшифровкаИтоги].Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект[ОписаниеКТ.Реквизиты.РасшифровкаИтоги][0], Итоги);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеАналитикНаСервере(ИмяЭлемента)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ОперативныйПланФормыУХ.ОбщийОбработчикИзмененияАналитик(ОписаниеКТ, ЭтотОбъект, ИмяЭлемента);
	
	// После исполнения необходимо вызвать обработчик изменения реквизит шапки
	Если СтрНайти(ИмяЭлемента, "СтатьяБюджета")<>0 
		ИЛИ СтрНайти(ИмяЭлемента, "Аналитика") <> 0 Тогда
		
		Аналитики = ОписаниеКТ.Схема.Аналитики;
		Если Аналитики.мШапка.Найти("СтатьяБюджета") <> неопределено Тогда
			КлючевыеРеквизитыИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// 
	Если Объект.Предназначение <> Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		Если ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0 Тогда
			Если СтрНайти(ИмяЭлемента, ОписаниеКТ.ПрефиксыЭлементов.ИзмерениеРасшифровки) = 0 Тогда
				// Если это изменение строки, то выполняем обработку расшифровки
				Если ОписаниеКТ.ЕстьЗависимаяОтСтрокиАналитикаРасшифровки Тогда
					ОперативныйПланФормыУХ.ОчиститьРасшифровкуПоСтроке(ОписаниеКТ, ЭтотОбъект, Объект);
				Иначе
					ОперативныйПланФормыУХ.ОбновитьНачальныеОстаткиПланов(ОписаниеКТ, ЭтотОбъект, Объект);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОперативныйПланФормыУХ.ОбновитьНачальныеОстаткиПланов(ОписаниеКТ, ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруИДРасшифровки(ОписаниеКТ)
	
	ЭлементКТ = Элементы[ОписаниеКТ.Элементы.КроссТаблица];
	ТекущиеДанныеКТ = ЭлементКТ.ТекущиеДанные;
	
	ТаблицаПериодов = ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды];
	ИмяТекущейКолонки = ЭлементКТ.ТекущийЭлемент.Имя;
	
	ОписаниеПериода = КроссТаблицыУХКлиентСервер.ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяТекущейКолонки);
	Если ОписаниеПериода = неопределено Тогда
		Возврат неопределено;
	КонецЕсли; 
	
	//
	Результат = Новый Структура("ИДСтроки, ИДПериода");
	Результат.ИДСтроки = ТекущиеДанныеКТ.ИДСтроки;
	Результат.ИДПериода = Новый УникальныйИдентификатор(СтрЗаменить(ОписаниеПериода.ИмяКолонки, "_", "-"));
	
	Возврат Результат;
	
КонецФункции
	
#Область ОбработкаИзмененияРеквизитовФормы

&НаКлиенте
Процедура НачалоВыбораПериода(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если НЕ ОписаниеКТ.Схема.ЭтоВводЛимитов
		И НЕ ОписаниеКТ.Схема.ЭтоРезервирование Тогда
		Возврат;
	КонецЕсли;
	
	// Для операций с лимитом и резервов подменять форму выбора 
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	Если Объект.Предназначение = ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств") Тогда
		ВидБюджета = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств");
	ИначеЕсли Объект.Предназначение = ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов") Тогда
		ВидБюджета = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов");
	ИначеЕсли Объект.Предназначение = ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов") Тогда
		ВидБюджета = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов");
	Иначе
		Возврат;
	КонецЕсли;
	ДопПараметры.Вставить("ВидБюджета", ВидБюджета);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПериодаЛимитирования", ДопПараметры, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперацииНаСервере()
	
	//
	Документы.ОперативныйПлан.ОпределитьГоризонт(ЭтотОбъект.Объект);
	ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере();
	
	//
	ЗаполнитьПоВидуОперПланаНаСервере();
	
	// Зачистка документа-планирования
	Объект.ДокументПланирования = неопределено;
	
	//
	УстановитьЗаголовокФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидБюджетаПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Предназначение) Тогда
		Возврат ;
	КонецЕсли;
	
	// Поменять очередность с определением горизонтов
	ДоступныеОперации = ОперативноеПланированиеПовтИспУХ.ДоступныеОперацииОперПлана(Объект.Предназначение, ПолучитьДатуНачалаДокумента());
	Если ЗначениеЗаполнено(Объект.ВидОперации) И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = неопределено 
		И ДоступныеОперации.Количество() > 0 Тогда
	  	Объект.ВидОперации = ДоступныеОперации[0].Значение;
	КонецЕсли;
	
	Документы.ОперативныйПлан.ОпределитьГоризонт(Объект);
	ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере();
	
	ЭтоПланированиеЗакупок = ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБюджетДвиженияРесурсов(Объект.Предназначение);
	
	Объект.ДвиженияОперации.Очистить();
	
	//
	ОписаниеКТ = ИнициализироватьПараметрыКроссТаблицы();
	СоздатьКроссТаблицу(ОписаниеКТ);
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Управление периодом 
&НаСервере
Процедура ПериодОтчетаПриИзмененииНаСервере(Направление = неопределено)
	ПараметрыПериода = ИнициализироватьПараметрыПериода(Истина, Ложь, Направление);
	ВыполнитьРасчетПериодаДокумента(ПараметрыПериода);
КонецПроцедуры

&НаСервере
Процедура ПериодОтчетаОкончаниеПриИзмененииНаСервере(Направление = неопределено)
	ПараметрыПериода = ИнициализироватьПараметрыПериода(Ложь, Истина, Направление);
	ВыполнитьРасчетПериодаДокумента(ПараметрыПериода);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетПериодаДокумента(ПараметрыПериода)
	
	РассчитатьНовыйПериодДокумента(ПараметрыПериода);
	
	Если ПараметрыПериода.ЕстьОшибки Тогда
		ОтменитьИзменениеПериода(ПараметрыПериода);
	Иначе
		ПрименитьНовыеПараметрыПериода(ПараметрыПериода);
	КонецЕсли;
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	Если ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица].Количество() > 0 Тогда
		ПериодИзменен = (ПериодНачало <> Объект.ПериодОтчета ИЛИ ПериодОкончание <> Объект.ПериодОтчетаОкончание);
	Иначе
		ПериодИзменен = Ложь;
		ОбновитьСтруктуруВыводаКроссТаблицы(ОписаниеКТ);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Ключевые реквизиты

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если Не ЗначениеЗаполнено(Объект.ЦФО) Тогда
		Объект.ЦФО = Объект.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = КонтрольЛимитовУХПовтИсп.ВалютаЛимитированияЦФО(Объект.ЦФО);
	КонецЕсли;
	
	ОперативныйПланФормыУХ.ОбновитьОтборПоФункциональнымНаправлениям(ОписаниеКТ, ЭтотОбъект, Объект.ЦФО);
	
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли	

	//
	ЭтотОбъект.ЕстьСуперПользователь = ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(Объект.ЦФО);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЦФОПриИзмененииНаСервере()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = КонтрольЛимитовУХПовтИсп.ВалютаЛимитированияЦФО(Объект.ЦФО);
	КонецЕсли;
	
	ОперативныйПланФормыУХ.ОбновитьОтборПоФункциональнымНаправлениям(ОписаниеКТ, ЭтотОбъект, Объект.ЦФО);
	
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли	

	//
	ЭтотОбъект.ЕстьСуперПользователь = ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(Объект.ЦФО);
	
	ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере();
	
	КлючевыеРеквизитыИзменены = Истина;

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	
	ОпределитьСостояниеОбъекта();
	
	КлючевыеРеквизитыИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	УправлениеФормой(ЭтотОбъект);
	
	КлючевыеРеквизитыИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	//
	РеквизитыДоговора = ВстраиваниеОПКПереопределяемый.ПолучитьРеквизитыДоговора(Объект.ДоговорКонтрагента);
	
	Объект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.Контрагент) 
		И ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Контрагент") <> неопределено
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = РеквизитыДоговора.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.Организация)
		И ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Организация") <> неопределено
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = РеквизитыДоговора.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.ЦФО) 
		И ОписаниеКТ.Схема.Аналитики.мШапка.Найти("ЦФО") <> неопределено
		И НЕ ЗначениеЗаполнено(Объект.ЦФО) Тогда
		Объект.ЦФО = РеквизитыДоговора.ЦФО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.Проект) 
		И ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Проект") <> неопределено
		И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Объект.Проект = РеквизитыДоговора.Проект;
	КонецЕсли;
	
	//
	УправлениеФормой(ЭтотОбъект);
	
	КлючевыеРеквизитыИзменены = Истина;
	
КонецПроцедуры // ПриИзмененииДоговора()

&НаСервере
Процедура ВалютаПриИзмененииНаСервере()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура МестоПоставкиПриИзмененииНаСервере()
	КлючевыеРеквизитыИзменены = Истина;
КонецПроцедуры //МестоПоставкиПриИзмененииНаСервере()
 
&НаСервере
Процедура ПриходРасходПриИзмененииНаСервере()

	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ОперативныйПланФормыУХ.ЗаполнитьДопустимыйСписокВыбораСтатейПоНаправлению(ОписаниеКТ, ЭтотОбъект, Объект.ПриходРасход);
	
	ОчиститьСтатьиНеСоответствующиеПриходРасходу();
	КлючевыеРеквизитыИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	КлючевыеРеквизитыИзменены = Истина;
КонецПроцедуры

&НаСервере
Процедура ДокументПланированияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
		Документы.ОперативныйПлан.ЗаполнитьПоДокументуПланирования(Объект, Объект.ДокументПланирования);
		УправлениеФормой(ЭтотОбъект);
		КлючевыеРеквизитыИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтатьиНеСоответствующиеПриходРасходу()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	Если НЕ КроссТаблицыУХКлиентСервер.ЕстьАналитикаШапки(ОписаниеКТ, "ПриходРасход") Тогда
		Возврат;
	КонецЕсли;
	
	Если КроссТаблицыУХКлиентСервер.ЕстьАналитикаШапки(ОписаниеКТ, "СтатьяБюджета") Тогда
		Если НЕ СтатьяСоответствуетНаправлению(Объект.СтатьяБюджета, Объект.ПриходРасход) Тогда
			ОчиститьАналитикиСтатьиБюджета(Объект, ЭтотОбъект);
			ОбработатьИзменениеАналитикНаСервере(Элементы.СтатьяБюджета.Имя);
		КонецЕсли;
	ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "СтатьяБюджета") Тогда
		Для Каждого СтрокаКТ Из ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица] Цикл
			Если НЕ СтатьяСоответствуетНаправлению(СтрокаКТ.СтатьяБюджета, Объект.ПриходРасход) Тогда
				ОчиститьАналитикиСтатьиБюджета(СтрокаКТ, СтрокаКТ);
				ОперативныйПланФормыУХ.ОбработатьИзменениеСтатьиВСтрокеКроссТаблицы(ОписаниеКТ, ЭтотОбъект, СтрокаКТ);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаРасшифровки(ОписаниеКТ, "СтатьяБюджета") Тогда
		Для Каждого СтрокаРШ Из ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка] Цикл
			Если НЕ СтатьяСоответствуетНаправлению(СтрокаРШ.СтатьяБюджета, Объект.ПриходРасход) Тогда
				ОчиститьАналитикиСтатьиБюджета(СтрокаРШ, СтрокаРШ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтатьяСоответствуетНаправлению(Статья, ПриходРасход)
	
	Если НЕ ЗначениеЗаполнено(Статья) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПриходРасход = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "ПриходРасход");
	
КонецФункции

&НаСервере
Процедура ОчиститьАналитикиСтатьиБюджета(ДанныеАналитика, ДанныеВидАналитики)
	
	ШаблонАналитика = "Аналитика%1";
	ШаблонВидАналитики = "ВидАналитики%1";
	
	Для НомерАналитики = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		РеквизитАналитика = СтрШаблон(ШаблонАналитика, НомерАналитики);
		РеквизитВидАналитики = СтрШаблон(ШаблонВидАналитики, НомерАналитики);
		
		ДанныеАналитика[РеквизитАналитика] = неопределено;
		ДанныеВидАналитики[РеквизитВидАналитики] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
		ДанныеВидАналитики[РеквизитВидАналитики+"ТипЗначения"] = Новый ОписаниеТипов(неопределено);
		ДанныеВидАналитики[РеквизитВидАналитики+"Наименование"] = "";
		ДанныеВидАналитики[РеквизитВидАналитики+"ПараметрыВыбора"] = неопределено;
		ДанныеВидАналитики[РеквизитВидАналитики+"СвязиАналитик"] = неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Процедура ЗаполнитьПоКлючевымАналитикамНаСервере(Знач ОписаниеКТ, Знач ТаблицаОстатков)
	
	//
	СписокРеквизитовКЗаполнению = "";
	
	Если ОписаниеКТ.Схема.Аналитики.мШапка.Количество() > 0 Тогда
		СписокРеквизитовКЗаполнению = СписокРеквизитовКЗаполнению + ?(СписокРеквизитовКЗаполнению="", "", ",") + СтрСоединить(ОписаниеКТ.Схема.Аналитики.мШапка, ",");
	КонецЕсли;
	
	Если ОписаниеКТ.Схема.Аналитики.мСтрока.Количество() > 0 Тогда
		СписокРеквизитовКЗаполнению = СписокРеквизитовКЗаполнению + ?(СписокРеквизитовКЗаполнению="", "", ",") + СтрСоединить(ОписаниеКТ.Схема.Аналитики.мСтрока, ",");
	КонецЕсли;
	
	Если ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0 Тогда
		СписокРеквизитовКЗаполнению = СписокРеквизитовКЗаполнению + ?(СписокРеквизитовКЗаполнению="", "", ",") + СтрСоединить(ОписаниеКТ.Схема.Аналитики.мРасшифровка, ",");
	КонецЕсли;
	
	//
	РассчитыватьЦену = Ложь;
	Если ОписаниеКТ.Схема.СтруктураАналитик.Свойство("Номенклатура")
		И ОписаниеКТ.Схема.СтруктураАналитик.Номенклатура.Использование <> Перечисления.ИспользованиеАналитик.НеИспользуется  Тогда
		СписокРеквизитовКЗаполнению = СписокРеквизитовКЗаполнению + ?(СписокРеквизитовКЗаполнению="", "", ",") + "ЕдиницаИзмерения, Коэффициент, МестоПоставки";
		РассчитыватьЦену = Истина;
	КонецЕсли;
	
	//
	Объект.ДвиженияОперации.Очистить();
	
	ЕстьСумма = ОписаниеКТ.Схема.Ресурсы.Свойство("Сумма");
	ЕстьКоличество = ОписаниеКТ.Схема.Ресурсы.Свойство("Количество");
	
	//
	Для Каждого СтрокаОстатка Из ТаблицаОстатков Цикл
		
		Строка = Объект.ДвиженияОперации.Добавить();
		Строка.Период = СтрокаОстатка.Период;
		
		// Строки и расшифровки
		ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатка, СписокРеквизитовКЗаполнению);
		
		// ресурсы и показатели
		Если ЕстьСумма Тогда
			
			//
			Сумма = СтрокаОстатка.Сумма;
			
			//
			Строка["Сумма" + ОписаниеКТ.Схема.Показатели.Исходное.Имя] = Сумма;
			Строка["Сумма" + ОписаниеКТ.Схема.Показатели.Изменение.Имя] = 0;
			Строка["Сумма"] = Сумма;
			
		КонецЕсли; 
		
		// ресурсы и показатели
		Если ЕстьКоличество Тогда
			
			//
			Количество = СтрокаОстатка.Количество;
			
			//
			Строка["Количество" + ОписаниеКТ.Схема.Показатели.Исходное.Имя] = Количество;
			Строка["Количество" + ОписаниеКТ.Схема.Показатели.Изменение.Имя] = 0;
			Строка["Количество"] = Количество;
			
		КонецЕсли; 
		
		// Если есть цена
		Если РассчитыватьЦену Тогда
			
			Количество = Строка["Количество" + ОписаниеКТ.Схема.Показатели.Исходное.Имя];
			Сумма = Строка["Сумма" + ОписаниеКТ.Схема.Показатели.Исходное.Имя];
			
			Строка.Цена =  ?(Количество = 0, 0, Сумма / Количество);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);

	
	// Пересчитать сумму документа
	Объект.СуммаДокумента = Объект.ДвиженияОперации.Итог("Сумма");
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыРаботыСКроссТаблицами
	
&НаСервере
Функция ИнициализироватьПараметрыКроссТаблицы()
	
	// 1. Инициализировать параметры кросс-таблицы.
	// КРОСС-ТАБЛИЦА
	ОписаниеКТ = КроссТаблицыУХ.Новый_КроссТаблица("Аналитики", "ДвиженияОперации", "КроссТаблица", "КроссТаблица", Истина);
	ОписаниеКТ.Вставить("Схема", Документы.ОперативныйПлан.СхемаКТ(Объект));
	ОписаниеКТ.Вставить("ДополнительныеДействия", Новый СписокЗначений);
	ОперативноеПланированиеУХПереопределяемый.ЗарегистрироватьДополнительныеДействия(ОписаниеКТ);
	
	ОписаниеКТ.ТолькоЛимитируемыеСтатьи = ОписаниеКТ.Схема.ЭтоВводЛимитов ИЛИ ОписаниеКТ.Схема.ЭтоРезервирование;
	
	ОписаниеКТ.Элементы.ГруппаРазмещения = Элементы.ГруппаКроссТаблицы.Имя;
	// Описание элементов формы для ключевых аналитик
	ОписаниеКТ.Элементы.Шапка = ОписаниеЭлементовФормыКлючевыхАналитикКТ();
	
	ОписаниеКТ.ЕстьРасшифровка = ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0;
	
	// 
	ДействияПолей = Новый Соответствие;
	ДействияПолей.Вставить("СуммаИзменение", 		Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииСуммаИзменение"));
	ДействияПолей.Вставить("СуммаРезультат", 		Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииСуммаРезультат"));
	
	Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
		ДействияПолей.Вставить("КоличествоИзменение",	Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииКоличествоИзменение"));
		ДействияПолей.Вставить("КоличествоРезультат",	Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииКоличествоРезультат"));
	КонецЕсли;
	КроссТаблицыУХ.ОбновитьОписаниеПолей(ОписаниеКТ, ДействияПолей);
	
	// 2. Сохранение описания кросс-таблицы и создание необходимых реквизитов формы
	КроссТаблицыУХ.ЗарегистрироватьКроссТаблицу(ЭтотОбъект, ОписаниеКТ);
	
	Возврат ОписаниеКТ;
	
КонецФункции

&НаСервере
Процедура СоздатьКроссТаблицу(ОписаниеКТ)
	// 1. Настроить элементы шапки 
	КроссТаблицыУХ.НастроитьЭлементыШапкиКТ(ОписаниеКТ, ЭтотОбъект);
	// 2. Создать элементы кросс-таблицы и экспресс-расшифровки
	КроссТаблицыУХ.СоздатьЭлементыКроссТаблицы(ОписаниеКТ, ЭтотОбъект);
	ОбновитьСтруктуруВыводаКроссТаблицы(ОписаниеКТ);
	// 3. Установить условное оформление
	УстановитьУсловноеОформление();
	
	// настройка элементов
	ИмяЭлемента = ОписаниеКТ.Элементы.КроссТаблица+"ГруппаРеквизитов";
	Если Элементы.Найти(ИмяЭлемента) <> неопределено Тогда
		Элементы[ИмяЭлемента].ОтображатьВШапке = Ложь;
	КонецЕсли;
	
	//
	Элементы.КроссТаблицаПоказатьСкрытьРасшифровку.Заголовок = ОписаниеКТ.ЗаголовокКнопкиУправленияЭкспрессРасшифровкой;
	
	ОперативныйПланФормыУХ.ЗаполнитьДопустимыйСписокВыбораСтатейПоНаправлению(ОписаниеКТ, ЭтотОбъект, Объект.ПриходРасход);
	
	//
	ЗарегистрироватьСтатьиБюджетаИАналитики(ОписаниеКТ);
	
	// настройка элементов формы ПериодОтчета и ПериодОтчетаОкончание
	Если ОписаниеКТ.Схема.ЭтоВводЛимитов 
		ИЛИ ОписаниеКТ.Схема.ЭтоРезервирование Тогда
		
		Если Объект.Предназначение = ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств") Тогда
			ВидБюджета = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств");
		ИначеЕсли Объект.Предназначение = ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов") Тогда
			ВидБюджета = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов");
		ИначеЕсли Объект.Предназначение = ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов") Тогда
			ВидБюджета = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов");
		КонецЕсли;
		ФормыУХКлиентСервер.ДобавитьПараметрВыбора(Элементы.ПериодОтчета, "Отбор.ПараметрыЛимитирования_ВидБюджета", ВидБюджета);
		ФормыУХКлиентСервер.ДобавитьПараметрВыбора(Элементы.ПериодОтчетаОкончание, "Отбор.ПараметрыЛимитирования_ВидБюджета", ВидБюджета);
		
		ФормыУХКлиентСервер.УдалитьСвязьПараметровВыбора(Элементы.ПериодОтчета, "Отбор.Периодичность");
		ФормыУХКлиентСервер.УдалитьСвязьПараметровВыбора(Элементы.ПериодОтчетаОкончание, "Отбор.Периодичность");
		
	Иначе
		ФормыУХКлиентСервер.УдалитьПараметрВыбора(Элементы.ПериодОтчета, "Отбор.ПараметрыЛимитирования_ВидБюджета");
		ФормыУХКлиентСервер.УдалитьПараметрВыбора(Элементы.ПериодОтчетаОкончание, "Отбор.ПараметрыЛимитирования_ВидБюджета");
		
		ФормыУХКлиентСервер.ДобавитьСвязьПараметровВыбора(Элементы.ПериодОтчета, "Отбор.Периодичность", "Объект.Периодичность");
		ФормыУХКлиентСервер.ДобавитьСвязьПараметровВыбора(Элементы.ПериодОтчетаОкончание, "Отбор.Периодичность", "Объект.Периодичность");
		
	КонецЕсли;
	
	// Дополнительные действия
	СформироватьМенюДополнительныхДействий(ОписаниеКТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруВыводаКроссТаблицы(ОписаниеКТ)
	
	// 1. Обновить периоды
	КроссТаблицыУХ.ОбновитьПериоды_ПоПериоду(ОписаниеКТ, ЭтотОбъект, Объект.ПериодОтчета, Объект.ПериодОтчетаОкончание);
	// 2. Изменить колонки кросс-таблицы
	// 3. Изменить колонки экспресс-расшифровки
	// 4. Обновить элементы кросс-таблицы
	// 5. Обновить элементы экспресс-расшифровки
	КроссТаблицыУХ.ОбновитьСтруктуруВыводаКроссТаблицы(ЭтотОбъект, ОписаниеКТ);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ)
	КроссТаблицыУХ.ПрочитатьДанныеОбъектаВКроссТаблицу(Объект, ОписаниеКТ, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСтатьиБюджетаИАналитики(ОписаниеКТ)
	
	АСБ = АналитикиСтатейБюджетовУХ;
	МассивОписанийСтатей = Новый Массив;
	
	СтатьяБюджета = "СтатьяБюджета";
	
	Если ОписаниеКТ.Схема.Аналитики.мШапка.Найти(СтатьяБюджета) <> неопределено Тогда
		// В шапке
		АСБ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей,
			"СтатьяБюджета", "СтатьяБюджета", "Аналитика%1", "Аналитика%1", ФормыУХ.РазместитьПередЭлементомСтрокой(Элементы.ГруппаАналитика12, Элементы.ГруппаСтатьяБюджета));
	ИначеЕсли ОписаниеКТ.Схема.Аналитики.мСтрока.Найти(СтатьяБюджета) <> неопределено Тогда
		ЭлементСтатья = Элементы[КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета")];
		// Статья и Аналитика из таблицы значений реквизита формы отображаются ТаблицеФормы.
		АСБ.СтатьяИАналитикиТаблицыЗначенийРеквизитаФормыВТаблицеФормы(МассивОписанийСтатей,
			ОписаниеКТ.Реквизиты.КроссТаблица, ОписаниеКТ.Элементы.КроссТаблица,
			СтатьяБюджета, КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета"),
			"Аналитика%1", КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "Аналитика", "%1"),
			ФормыУХ.РазместитьВГруппеСтрокой(ЭлементСтатья.Родитель.Имя));
		МассивОписанийСтатей[МассивОписанийСтатей.Количество()-1].Параметры.Вставить("СоздаватьРеквизитыВидАналитики", Ложь);
	ИначеЕсли ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти(СтатьяБюджета) <> неопределено Тогда
		ЭлементСтатья = Элементы[КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "СтатьяБюджета")];
		// Статья и Аналитика из таблицы значений реквизита формы отображаются ТаблицеФормы.
		АСБ.СтатьяИАналитикиТаблицыЗначенийРеквизитаФормыВТаблицеФормы(МассивОписанийСтатей,
			ОписаниеКТ.Реквизиты.Расшифровка, ОписаниеКТ.Элементы.Расшифровка,
			СтатьяБюджета, КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "СтатьяБюджета"),
			"Аналитика%1", КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "Аналитика", "%1"),
			ФормыУХ.РазместитьВГруппеСтрокой(ЭлементСтатья.Родитель.Имя));
		МассивОписанийСтатей[МассивОписанийСтатей.Количество()-1].Параметры.Вставить("СоздаватьРеквизитыВидАналитики", Ложь);
	Иначе
	КонецЕсли;
	
	Если МассивОписанийСтатей.Количество() > 0 Тогда
		АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(ЭтотОбъект, МассивОписанийСтатей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Функция ОписаниеЭлементовФормыКлючевыхАналитикКТ()
	
	Аналитики = Справочники.АналитикиОперативногоПланирования;
	
	//
 	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(Аналитики.ЦФО,				ОписаниеЭлементаКА(Элементы.ЦФО.Имя));
	Соответствие.Вставить(Аналитики.Проект,				ОписаниеЭлементаКА(Элементы.Проект.Имя));
	Соответствие.Вставить(Аналитики.Организация, 		ОписаниеЭлементаКА(Элементы.Организация.Имя));
	Соответствие.Вставить(Аналитики.Контрагент,			ОписаниеЭлементаКА(Элементы.Контрагент.Имя));
	Соответствие.Вставить(Аналитики.МестоПоставки,		ОписаниеЭлементаКА(Элементы.МестоПоставки.Имя));
	Соответствие.Вставить(Аналитики.ПриходРасход,		ОписаниеЭлементаКА(Элементы.ПриходРасход.Имя));
	Соответствие.Вставить(Аналитики.Приоритет,			ОписаниеЭлементаКА(Элементы.Приоритет.Имя));
	Соответствие.Вставить(Аналитики.Менеджер,			ОписаниеЭлементаКА(Элементы.Менеджер.Имя));
	
	Соответствие.Вставить(Аналитики.ДоговорКонтрагента,
		ОписаниеЭлементаКА(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента.Имя));
	Соответствие.Вставить(Аналитики.Номенклатура,
		ОписаниеЭлементаКА(Элементы.ГруппаНоменклатура.Имя, Элементы.Номенклатура.Имя));
	Соответствие.Вставить(Аналитики.СтатьяБюджета,
		ОписаниеЭлементаКА(Элементы.ГруппаСтатьяБюджета.Имя, Элементы.СтатьяБюджета.Имя));
		
	Возврат Соответствие;

КонецФункции

&НаСервере
Функция ОписаниеЭлементаКА(ИмяЭлемента, Знач ИмяЭлементаПолеВвода = неопределено)
	
	Если ИмяЭлементаПолеВвода = неопределено Тогда
		ИмяЭлементаПолеВвода = ИмяЭлемента;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяЭлемента", ИмяЭлемента);
	Результат.Вставить("ИмяЭлементаПолеВвода", ИмяЭлементаПолеВвода);
	Результат.Вставить("Видимость", Ложь);
	Результат.Вставить("ОбязательноеЗаполнение", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоВидуОперПланаНаСервере(ОчищатьТаблицуДвижений = Истина)
	
	СтароеЗначениеВидОперативногоПлана = Объект.ВидОперативногоПлана;
	Если Не ЗначениеЗаполнено(Объект.ВидОперативногоПлана) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Основание") ИЛИ НЕ ЗначениеЗаполнено(Параметры.Основание) Тогда
		Документы.ОперативныйПлан.ЗаполнитьПоВидуОперативногоПлана(Объект, Объект.ВидОперативногоПлана, ОчищатьТаблицуДвижений);
	КонецЕсли;
	
	ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере();
	
	//
	ОписаниеКТ = ИнициализироватьПараметрыКроссТаблицы();
	СоздатьКроссТаблицу(ОписаниеКТ);
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
	//
	ОперативныйПланФормыУХ.ОбновитьОтборПоФункциональнымНаправлениям(ОписаниеКТ, ЭтотОбъект, Объект.ЦФО);
	УправлениеФормой(ЭтотОбъект);
	
	//
	Если ЗначениеЗаполнено(Объект.ДокументПланирования) И НЕ ОписаниеКТ.Схема.ЭтоРезервирование Тогда
		// док.планирования нужен, если это резервирование
		Объект.ДокументПланирования = неопределено;
	КонецЕсли;
	
	КлючевыеРеквизитыИзменены = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ОперативныйПланФормыУХ.УстановитьУсловноеОформлениеКТ(ОписаниеКТ, ЭтотОбъект);
	
	//
	КонтрольУХ.УстановитьУсловноеОформлениеТаблицыКонтролей(ЭтотОбъект);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОписаниеКТ = Форма.КроссТаблицыФормы.Аналитики;
	
	ЭтоПланированиеЗакупок = Форма.ЭтоПланированиеЗакупок;
	ВидОп = Объект.ВидОперации;
	
	#Область ЦентрализованныеЗакупки
	
		Элементы.ГруппаЗаявочнаяКампания.Видимость = ЭтоПланированиеЗакупок И ОписаниеКТ.Схема.ЭтоПланирование;
		Если ЭтоПланированиеЗакупок Тогда
			Элементы.ДекорацияДокументНеДелаетДвиженийПотребностей.Видимость =
				Объект.НеРегистрироватьПотребностьВНоменклатуре;
		Иначе
			Элементы.ДекорацияДокументНеДелаетДвиженийПотребностей.Видимость = Ложь;
		КонецЕсли;
		
		// Ключевые аналитики и реквизиты закупки доступны, если не выбран документ планирования, который доступен только в планировании закупок.
		ТолькоПросмотрКлючевыхАналитик = ЗначениеЗаполнено(Объект.ДокументПланирования);
		Элементы.КлючевыеРеквизиты.ТолькоПросмотр = ЭтоПланированиеЗакупок И ТолькоПросмотрКлючевыхАналитик;
		Элементы.ГруппаЗаявочнаяКампания.ТолькоПросмотр = ЭтоПланированиеЗакупок И ТолькоПросмотрКлючевыхАналитик;
		
	#КонецОбласти
	
	Элементы.ВнеМаршрута.Видимость = Форма.ЕстьСуперПользователь;
	
	// Если заполнен источник, то ЦФО, проект и валюта недоступны
	ИсточникЗаполнен = НЕ ОписаниеКТ.Схема.ЭтоВводЛимитов И ЗначениеЗаполнено(Объект.ДокументПланирования);
	Для Каждого КлючЗначение Из ОписаниеКТ.Элементы.Шапка Цикл
		Описание = КлючЗначение.Значение;
		Элементы[Описание.ИмяЭлементаПолеВвода].ТолькоПросмотр = Описание.Видимость И ИсточникЗаполнен;
	КонецЦикла;
	
	//
	ДоступностьУказанияОкончанияПериода = Истина;
	Если Объект.ВидГоризонта = 
			ПредопределенноеЗначение("Перечисление.ВидыГоризонтовПланирования.ФиксированныйГоризонт") 
		ИЛИ Объект.ВидГоризонта = 
			ПредопределенноеЗначение("Перечисление.ВидыГоризонтовПланирования.СкользящийГоризонт") Тогда
		ДоступностьУказанияОкончанияПериода = Ложь;
	КонецЕсли;
	
	Элементы.ПериодОтчетаОкончание.ТолькоПросмотр = НЕ ДоступностьУказанияОкончанияПериода;
	
	// Видимость доп.кнопок работы с номенклатурой
	Элементы.КроссТаблицаГруппаНоменклатура.Видимость = ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено;
	Если Элементы.КроссТаблицаГруппаНоменклатура.Видимость Тогда
		НаличиеКоличества = ОписаниеКТ.Схема.Ресурсы.Свойство("Количество");
		Элементы.КроссТаблицаКнопкаВидимостьДопРеквизитов.Видимость = НаличиеКоличества;
		Элементы.КроссТаблицаКнопкаВидимостьИсходнойНоменклатуры.Видимость = НаличиеКоличества;
	КонецЕсли;
	Элементы.КроссТаблицаПодменюНоменклатура.Видимость = Элементы.КроссТаблицаГруппаНоменклатура.Видимость;
	
	Элементы.КроссТаблицаКнопкаЗаменить.Видимость = ЭтоПланированиеЗакупок; // Видимость кнопки замены номенклатуры
	
	Элементы.КроссТаблицаГруппаСтатьяБюджета.Видимость = КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "СтатьяБюджета");
	
	Элементы.КроссТаблицаПоказатьСкрытьРасшифровку.Видимость = ОписаниеКТ.ЕстьРасшифровка;
	Элементы.КроссТаблицаКнопкаРасшифровка.Видимость = ОписаниеКТ.ЕстьРасшифровка;
	
	//
	Элементы.ВалютаДокумента.ТолькоПросмотр = Форма.ЗапретНаИзменениеВалюты
		ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) ИЛИ ИсточникЗаполнен;
	
	// Необходимость указания документа документа планирования
	Элементы.ГруппаДокументПланирования.Видимость = ОписаниеКТ.Схема.ДоступенДокументПланирования;
	Если Элементы.ГруппаДокументПланирования.Видимость Тогда
		//
		ДоступностьДокПлан = Объект.РежимВводаДокументаПланирования <> 0;
		
		//
		Элементы.ДокументПланирования.Доступность = ДоступностьДокПлан;
		Элементы.ДокументПланирования.АвтоВыборНезаполненного = ДоступностьДокПлан;
		ФормыУХКлиентСервер.УстановитьАвтоОтметкуЗаполненияЭлемента(Элементы.ДокументПланирования, ДоступностьДокПлан);
	КонецЕсли;
	
	// добавить в параметр выбора 
	Ограничение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.ПустаяСсылка"));
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.ПланированиеИРезервирование") Тогда
		Ограничение.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.Планирование"));
	Иначе
		Ограничение.Добавить(Объект.ВидОперации);
	КонецЕсли;
	КроссТаблицыУХКлиентСервер.УстановитьПараметрВыбора(
		Элементы.ВидОперативногоПлана, "Отбор.ИспользоватьДляВидаОпераций", Новый ФиксированныйМассив(Ограничение));
	
	СформироватьПредставлениеНазначенияРезерва(Форма);
	
	// если идет корректировка периода, то нельзя изменять эти элементы
	Элементы.ГруппаКнопкиУправленияПериодом.Видимость = Форма.ПериодИзменен;
	Элементы.Предназначение.ТолькоПросмотр = Форма.ПериодИзменен;
	Элементы.ВидОперации.ТолькоПросмотр = Форма.ПериодИзменен;
	Элементы.ВидОперативногоПлана.ТолькоПросмотр = Форма.ПериодИзменен;
	Элементы.РежимВводаДокументаПланирования.ТолькоПросмотр = Форма.ПериодИзменен;
	Элементы.ДокументПланирования.ТолькоПросмотр = Форма.ПериодИзменен;
	Элементы.КлючевыеРеквизиты.ТолькоПросмотр = Форма.ПериодИзменен;
	
	ДоступностьНазначениеДоговор(Форма);
	
	// Видимость кнопок команд
	Элементы.КроссТаблицаЗаполнитьОстаткамиСвободногоЛимита.Видимость = ОписаниеКТ.Схема.ЭтоРезервирование 
		И Объект.РежимВводаДокументаПланирования = 0;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;

	Если Форма.ЭтоПланированиеЗакупок Тогда
		ТекстЗаголовка = НСтр("ru = 'Потребность ДЗО'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Операционный план'");
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), ТекстЗаголовка, Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 (создание)'"), ТекстЗаголовка);
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБюджетов()
	
	Элемент = Элементы.Предназначение;
	
	ДатаНастроекЛимитирования = ПолучитьДатуНачалаДокумента();
	НеиспользуемыеВидыБюджетов = ОперативноеПланированиеПовтИспУХ.ПолучитьВидыБюджетовСОшибкамиНастройкиОперативногоПланирования(ДатаНастроекЛимитирования);
	Для Каждого ВидБюджета Из НеиспользуемыеВидыБюджетов Цикл
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВидБюджета);
		Если ЭлементСписка <> неопределено Тогда
			Элемент.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	Если НеиспользуемыеВидыБюджетов.Количество() > 0 Тогда
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка = НСтр("ru = 'Некоторые виды бюджетов отключены. Перейдите в настройки оперативного планирования и заполните параметры бюджетов.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНезаполненныеКолонкиНаСервере(НовоеЗначение)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ТаблицаПериодов = ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды];
	
	ДанныеКТ = ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица];
	
	АктивныеПериоды = ТаблицаПериодов.НайтиСтроки(Новый Структура("Активная", Истина));
	
	// Ресурсы
	ВсегоОдинРесурс = ОписаниеКТ.Схема.Ресурсы.Количество() = 1;
	
	МассивВидимыхРесурсов = Новый массив;
	Для Каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
		ОписаниеРесурса = КлючЗначениеРесурс.Значение;
		
		Если ВсегоОдинРесурс = Истина ИЛИ Элементы[ОписаниеРесурса.УправлениеВидимостью.ИмяЭлемента].Пометка = Истина Тогда
			МассивВидимыхРесурсов.Добавить(ОписаниеРесурса);
		КонецЕсли;
		
	КонецЦикла;
	
	// Показатели
	МассивВидимыхПоказателей = Новый массив;
	Для Каждого КлючЗначениеПоказатель Из ОписаниеКТ.Схема.Показатели Цикл
		ОписаниеПоказателя = КлючЗначениеПоказатель.Значение;
		
		Если Элементы[ОписаниеПоказателя.УправлениеВидимостью.ИмяЭлемента].Пометка = Истина Тогда
			МассивВидимыхПоказателей.Добавить(ОписаниеПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовоеЗначение = Истина Тогда
		// Скрываем лишнее
		
		МассивВидимыхПоказателей.Очистить();
		МассивВидимыхПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Изменение);
		
		МассивСкрытыхКолонок = Новый Массив;
		Для Каждого ОписаниеКолонки Из АктивныеПериоды Цикл
			
			СкрытьЭтотПериод = Истина;
			
			МассивЭтотПериод = Новый Массив;
			МассивЭтотПериод.Добавить(ОписаниеКолонки);
			МассивРеквизитов = КроссТаблицыУХКлиентСервер.ПолучитьРеквизиты(МассивВидимыхРесурсов, МассивВидимыхПоказателей, МассивЭтотПериод);
			
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				
				ЕстьЗаполненныеЗначения = ЕстьЗаполненныеЗначения(ДанныеКТ, Реквизит);
				
				СкрытьЭтотПериод = СкрытьЭтотПериод И НЕ ЕстьЗаполненныеЗначения;
				
				Если СкрытьЭтотПериод = Ложь Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СкрытьЭтотПериод = Истина Тогда
				МассивСкрытыхКолонок.Добавить(ОписаниеКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Скрыть колонки
		Для Каждого ОписаниеКолонки Из МассивСкрытыхКолонок Цикл
			
			ИмяКолонки = ОписаниеКТ.Реквизиты.КроссТаблица + "Группа" + ОписаниеКолонки.ИмяКолонки;
			Элементы[ИмяКолонки].Видимость = Ложь;
			
		КонецЦикла;
		
		// Отбор строк устанавливаем
		
		// Отмечаем пустые строки
		МассивЭтотПериод = Новый Массив;
		МассивРеквизитов = КроссТаблицыУХКлиентСервер.ПолучитьРеквизиты(ОписаниеКТ.Схема.Ресурсы, МассивВидимыхПоказателей, АктивныеПериоды);
		
		Для каждого СтрокаКТ Из ДанныеКТ Цикл
			//
			ВСтрокеНетДанные = Истина;
			Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
				
				ВСтрокеНетДанные = ВСтрокеНетДанные И НЕ ЗначениеЗаполнено(СтрокаКТ[ИмяРеквизита]);
				Если ВСтрокеНетДанные = Ложь Тогда
				
					Прервать;
				
				КонецЕсли; 
				
			КонецЦикла; 
			
			СтрокаКТ.СтрокаПуста = ВСтрокеНетДанные;
			
		КонецЦикла; 
		
		ОтборСтрок = Новый Структура(Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок);
		ОтборСтрок.Вставить("СтрокаПуста", Ложь);
		
		Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
	Иначе
		
		// Восстанавливаем видимость ранее скрытых колонок
		Для Каждого ОписаниеКолонки Из АктивныеПериоды Цикл
			
			ИмяКолонки = ОписаниеКТ.Реквизиты.КроссТаблица + "Группа" + ОписаниеКолонки.ИмяКолонки;
			Элементы[ИмяКолонки].Видимость = Истина;
			
		КонецЦикла;
		
		// сбрасываем отбор строк
		ОтборСтрок = Новый Структура(Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок);
		Если ОтборСтрок.Свойство("СтрокаПуста") Тогда
			ОтборСтрок.Удалить("СтрокаПуста");
		КонецЕсли;
		Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеЗначения(ДанныеКТ, ИмяКолонки)
	
	Для Каждого Строка Из ДанныеКТ Цикл
		
		ЗначениеЯчейки = Строка[ИмяКолонки];
		
		Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПодсказкуКонтрагента()
	
	//
	ТипКонтрагента = ТипЗнч(Объект.Контрагент);
	Если ТипКонтрагента = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ИНН или наименование'");
	ИначеЕсли ТипКонтрагента = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ФИО физ.лица'");
	Иначе
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Укажите это юридическое или физическое лицо?'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииВидаОперПлана()
	
	ОчищатьТаблицуДвижений = Ложь;
	ЗаполнитьПоВидуОперПланаНаСервере(ОчищатьТаблицуДвижений);
	
	УправлениеФормой(ЭтотОбъект);
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЭлементовКУдалению(КоллекцияПодчиненныхЭлементов, МассивЭлементовКУдалению)

	Для каждого Элемент Из КоллекцияПодчиненныхЭлементов Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
		
			СформироватьСписокЭлементовКУдалению(Элемент.ПодчиненныеЭлементы, МассивЭлементовКУдалению);
		
		КонецЕсли; 
		
		МассивЭлементовКУдалению.Добавить(Элемент);
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПотребности()

	СписокКолонок = "Номенклатура, Характеристика, ИсходнаяНоменклатура, ЕдиницаИзмерения, Коэффициент";
	
	Таблица = Объект.ДвиженияОперации.Выгрузить(, СписокКолонок + ", Количество, Сумма");
	Таблица.Свернуть(СписокКолонок, "Количество, Сумма");
	
	ПотребностиВНоменклатуреПоПериодам.Загрузить(Таблица);

КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьЗаменуНоменклатурыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("ДанныеФормыКоллекция") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗаменуНоменклатурыНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаменуНоменклатурыНаСервере(ТЗЗамены) Экспорт
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,Коэффициент");

	Для каждого СтрокаЗамены Из ТЗЗамены Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗамены.НоменклатураЗамены) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		КоэффициентЗамены = ?(СтрокаЗамены.КоэффициентЗамены=0, 1, СтрокаЗамены.КоэффициентЗамены);
		КоэффициентПересчета = СтрокаЗамены.Коэффициент / КоэффициентЗамены;
		
		СтруктураПоиска.Номенклатура = СтрокаЗамены.Номенклатура;
		СтруктураПоиска.Характеристика = СтрокаЗамены.Характеристика;
		СтруктураПоиска.ЕдиницаИзмерения = СтрокаЗамены.ЕдиницаИзмерения;
		СтруктураПоиска.Коэффициент = СтрокаЗамены.Коэффициент;
		
		мСтроки = Объект.ДвиженияОперации.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТЗ Из мСтроки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ИсходнаяНоменклатура) Тогда
				СтрокаТЗ.ИсходнаяНоменклатура = СтрокаТЗ.Номенклатура;
				СтрокаТЗ.ИсходнаяХарактеристика = СтрокаТЗ.Характеристика;
				СтрокаТЗ.ИсходнаяЕдиницаИзмерения = СтрокаТЗ.ЕдиницаИзмерения;
			КонецЕсли;
			
			СтрокаТЗ.Номенклатура = СтрокаЗамены.НоменклатураЗамены;
			
			СтрокаТЗ.Характеристика = СтрокаЗамены.ХарактеристикаЗамены;
			
			СтрокаТЗ.ЕдиницаИзмерения = СтрокаЗамены.ЕдиницаИзмеренияЗамены;
			
			СтрокаТЗ.Коэффициент = КоэффициентЗамены;
			
			Цена_ = СтрокаТЗ.Цена / КоэффициентПересчета;
			
			СтрокаТЗ.Цена = Цена_;
			
			СтрокаТЗ.Количество = СтрокаТЗ.Количество * КоэффициентПересчета;
			СтрокаТЗ.КоличествоИсходное = СтрокаТЗ.КоличествоИсходное * КоэффициентПересчета;
			СтрокаТЗ.КоличествоИзменение = СтрокаТЗ.Количество - СтрокаТЗ.КоличествоИсходное;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	//
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапретИзмененияФормы()
	
	Элементы.ГруппаТолькоПросмотр.Видимость = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или НЕ Объект.Проведен Тогда
		// Это новый или это непроведенный документ, то редактирование разрешено
		Возврат;
	КонецЕсли; 
	
	НеобходимоЗапретитьРедактирование = Документы.ОперативныйПлан.ЕстьПоследующиеДокументы(Объект.Ссылка);
	Если НеобходимоЗапретитьРедактирование Тогда
		
		Элементы.НадписьТолькоПросмотр.Заголовок = 
			НСтр("ru = 'Операционный план открыт только для чтения. Существуют более новые, проведенные операционные планы, с аналогичными ключевыми аналитиками.'");
		Элементы.ГруппаТолькоПросмотр.Видимость = Истина;
		ТолькоПросмотр = Истина;
		
		Элементы.КроссТаблицаКнопкаЗаменить.Доступность = Ложь;
		
		// Кросс-таблицы
		Для Каждого КлючЗначение Из ЭтотОбъект.КроссТаблицыФормы Цикл
			Элементы[КлючЗначение.Значение.Элементы.КроссТаблица].ТолькоПросмотр = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРасшифровку(ОписаниеКТ, ИДСтрокиИсточника, ИДСтроки)
	
	Расшифровка = ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка];
	
	Строки = Расшифровка.НайтиСтроки(Новый Структура("ИДСтроки", ИДСтрокиИсточника));
	
	Для каждого Строка Из Строки Цикл
		НоваяСтрока = Расшифровка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"ИДСтроки");
		НоваяСтрока.ИДСтроки = ИДСтроки;
	КонецЦикла; 
	
КонецПроцедуры

#Область ПараметрыВыбораЭлементовФормы

&НаСервере
Процедура ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере(ИзменятьВалюту = Истина)
	
	Валюта = неопределено;
	Способы = Перечисления.СпособыОпределенияВалютыЛимитирования;
	
	ЭтоЛимиты = Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование;
	ЗапретНаИзменениеВалюты = Ложь;
	Элементы.ВалютаДокумента.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	Если ЭтоЛимиты И ЗначениеЗаполнено(Объект.Предназначение) Тогда
		
		ДатаНастроекЛимитирования = ПолучитьДатуНачалаДокумента();
		ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Объект.Предназначение, ДатаНастроекЛимитирования);
		Если ПараметрыОП.ИспользоватьЛимитирование Тогда
			
			Если ПараметрыОП.СпособОпределенияВалютыЛимитирования = Способы.ВалютаУпрУчета Тогда
				Валюта = ВстраиваниеОПКПереопределяемый.КонстантаВалютаУправленческогоУчета();
				Элементы.ВалютаДокумента.Подсказка = НСтр("ru='Согласно настройкам контроля лимитов: Валюта упр. учета.'");
				Элементы.ВалютаДокумента.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
				ЗапретНаИзменениеВалюты = Истина;
			ИначеЕсли ПараметрыОП.СпособОпределенияВалютыЛимитирования = Способы.ВалютаЛимитированияЦФО Тогда
				Валюта = КонтрольЛимитовУХПовтИсп.ВалютаЛимитированияЦФО(Объект.ЦФО);
				ЗапретНаИзменениеВалюты = Истина;
				Элементы.ВалютаДокумента.Подсказка = НСтр("ru='Согласно настройкам контроля лимитов: Функциональная валюта ЦФО.'");
				Элементы.ВалютаДокумента.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
			КонецЕсли;
			
			Если ИзменятьВалюту И ЗначениеЗаполнено(Валюта) И Объект.ВалютаДокумента <> Валюта Тогда
				Объект.ВалютаДокумента = Валюта;
				ВалютаПриИзмененииНаСервере();
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ПриОжиданииВыполнитьКонтрольДокумента()
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьКонтрольДокумента", 0.5, Истина);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
    УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "РеквизитыСозданы") Тогда
			
		// Создаем реквизиты
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("РеквизитыСозданы", Новый ОписаниеТипов("Булево")));
		
		КонтрольУХ.ДобавитьРеквизитыСтраницыКонтроль(Реквизиты);
		ВстраиваниеОПКПереопределяемый.ДобавитьРеквизитыСогласования(Реквизиты);
		
		ЭтотОбъект.ИзменитьРеквизиты(Реквизиты);
		
		// Создаем элементы
		КонтрольУХ.ДобавитьСтраницуКонтроляДокумента(ЭтотОбъект, Элементы.ГруппаСтраницы);
		КонтрольУХ.ИнициализироватьРезультатыКонтроля(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыДокументаЗаявки(ЭтоБДДС, ЭтоБДР, Направление)
	
	Если ЭтоБДДС И Направление = ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход") Тогда
		ПустойДокументЗаявка = КэшируемыеПроцедурыОПК.ПустоеПланируемоеПоступление();
	ИначеЕсли ЭтоБДДС Тогда
		ПустойДокументЗаявка = КэшируемыеПроцедурыОПК.ПустаяЗаявкаНаОплату();
	ИначеЕсли ЭтоБДР И Направление = ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход") Тогда
		ПустойДокументЗаявка = КэшируемыеПроцедурыОПК.ПустойПланируемыйДоход();
	ИначеЕсли ЭтоБДР Тогда
		ПустойДокументЗаявка = КэшируемыеПроцедурыОПК.ПустаяЗаявкаНаРасход();
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
	Возврат СтрШаблон("Документ.%1.ФормаОбъекта", ПустойДокументЗаявка.Метаданные().Имя);
	
КонецФункции

&НаСервере
Функция ПолучитьДатуНачалаДокумента()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Возврат Объект.ДатаНачала;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПериодОтчета) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПериодОтчета, "ДатаНачала");
	Иначе
		Возврат Объект.Дата;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеНазначенияРезерва(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.Резервирование") Тогда
		Результат = "";
	ИначеЕсли ТипЗнч(Объект.НазначениеРезерва_Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		И ЗначениеЗаполнено(Объект.НазначениеРезерва_ДоговорКонтрагента) Тогда
		Результат = СтрШаблон(НСтр("ru = '%1; %2'"), Объект.НазначениеРезерва_Контрагент, Объект.НазначениеРезерва_ДоговорКонтрагента);
	ИначеЕсли ЗначениеЗаполнено(Объект.НазначениеРезерва_Контрагент) Тогда
		Результат = СтрШаблон(НСтр("ru = '%1'"), Объект.НазначениеРезерва_Контрагент);
	Иначе
		Результат = НСтр("ru = '<не указано>'");
	КонецЕсли;
	
	Если Форма.НазначениеРезерваПредставление <> Результат Тогда
		Форма.НазначениеРезерваПредставление = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНазначениеРезерва(ДокументРезервирования)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРезервирования", ДокументРезервирования);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НазначениеРезервовСрезПоследних.Контрагент КАК Контрагент,
	|	НазначениеРезервовСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НазначениеРезервовСрезПоследних.ДоговорКонтрагента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НазначениеРезервов.СрезПоследних(, ДокументРезервирования = &ДокументРезервирования) КАК НазначениеРезервовСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьНазначениеДоговор(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Назначение_ДоговорКонтрагента.ТолькоПросмотр = 
		ТипЗнч(Объект.НазначениеРезерва_Контрагент) <> Тип("СправочникСсылка.Контрагенты");
	
	КонецПроцедуры
	
#Область НовоеЗаполнение

&НаКлиенте
Процедура ОповеститьПользователяОНачалеЗаполненииДанных()
	
	Состояние(НСтр("ru = 'Выполняется заполнение данных в документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОЗаполненииДанных()

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Заполнение данных в документ завершено'"),
		,
		,
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Настройки)
	
	ОповеститьПользователяОНачалеЗаполненииДанных(); 
	
	Результат = ЗаполнитьДокументНаСервере(Настройки);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		// #101
		Если Настройки.Свойство("ОбновитьИсходныеПланы") Тогда
			ОбновитьИсходныеПланы();
		Иначе
			ЗаполнитьПоПлану(Настройки);
		КонецЕсли;
		
		ОповеститьПользователяОЗаполненииДанных();
		
		ПриОжиданииВыполнитьКонтрольДокумента();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументНаСервере(Знач ПараметрыЗадания)
	
	//
	ПериодНачало = Объект.ПериодОтчета;
	ПериодОкончание = Объект.ПериодОтчетаОкончание;
	
	// Выполнить заполнение
	ПодготовитьПараметрыЗаполненияДокумента(ПараметрыЗадания);
	
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Заполнение документа: %1'"), Строка(Объект.Ссылка));
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.ОперативныйПлан.ЗаполнитьДокумент",
		ПараметрыЗадания,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

// Унифицированная процедура проверки выполнения фонового задания
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				// #101
				ЗаполнитьПоПлану();
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ОповеститьПользователяОЗаполненииДанных();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыЗаполненияДокумента(ПараметрыЗадания)
	
	//
	ПараметрыЗадания.Вставить("Схема",						Объект.Ссылка);
	
	ПараметрыЗадания.Вставить("Дата",						Объект.Дата);
	ПараметрыЗадания.Вставить("Ссылка",						Объект.Ссылка);
	ПараметрыЗадания.Вставить("ЭтоНовый", 					НЕ ЗначениеЗаполнено(Объект.Ссылка));
	ПараметрыЗадания.Вставить("УникальныйИдентификатор",	УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("Предназначение",				Объект.Предназначение);
	ПараметрыЗадания.Вставить("ВидОперации",				Объект.ВидОперации);
	ПараметрыЗадания.Вставить("ВидОперативногоПлана",		Объект.ВидОперативногоПлана);
	ПараметрыЗадания.Вставить("ДокументПланирования",		Объект.ДокументПланирования);
	
	ПараметрыЗадания.Вставить("ЦФО", 						Объект.ЦФО);
	ПараметрыЗадания.Вставить("Проект", 					Объект.Проект);
	ПараметрыЗадания.Вставить("Организация", 				Объект.Организация);
	ПараметрыЗадания.Вставить("Контрагент", 				Объект.Контрагент);
	ПараметрыЗадания.Вставить("ДоговорКонтрагента", 		Объект.ДоговорКонтрагента);
	ПараметрыЗадания.Вставить("Номенклатура", 				Объект.Номенклатура);
	ПараметрыЗадания.Вставить("МестоПоставки", 				Объект.МестоПоставки);
	ПараметрыЗадания.Вставить("ПриходРасход", 				Объект.ПриходРасход);
	ПараметрыЗадания.Вставить("СтатьяБюджета", 				Объект.СтатьяБюджета);
	ПараметрыЗадания.Вставить("Аналитика1", 				Объект.Аналитика1);
	ПараметрыЗадания.Вставить("Аналитика2", 				Объект.Аналитика2);
	ПараметрыЗадания.Вставить("Аналитика3", 				Объект.Аналитика3);
	ПараметрыЗадания.Вставить("Аналитика4", 				Объект.Аналитика4);
	ПараметрыЗадания.Вставить("Аналитика5", 				Объект.Аналитика5);
	ПараметрыЗадания.Вставить("Аналитика6", 				Объект.Аналитика6);
	ПараметрыЗадания.Вставить("ВалютаДокумента", 			Объект.ВалютаДокумента);
	ПараметрыЗадания.Вставить("Менеджер", 					Объект.Менеджер);
	ПараметрыЗадания.Вставить("Приоритет", 					Объект.Приоритет);
	ПараметрыЗадания.Вставить("Приоритет", 					Объект.Приоритет);
	ПараметрыЗадания.Вставить("НеРегистрироватьПотребностьВНоменклатуре", Объект.НеРегистрироватьПотребностьВНоменклатуре);
	ПараметрыЗадания.Вставить("РежимВводаДокументаПланирования", Объект.РежимВводаДокументаПланирования);
	
	ПараметрыЗадания.Вставить("КлючОбщихНастроек",         "Документ.ОперативныйПлан");
	
	//
	Настройки = Новый Структура;
	Настройки.Вставить("ЗаполняемаяТЧ", Объект.ДвиженияОперации.Выгрузить());
	
	//
	Настройки.Вставить("Периоды", Объект.Периоды.Выгрузить());
	Если ПараметрыЗадания.Свойство("СоответствиеПериодов") Тогда
		// Загружаем старые периоды, из которых необходимо будет получить данные
		Для Каждого КлючЗначение Из ПараметрыЗадания.СоответствиеПериодов Цикл
			Настройки.Периоды.Добавить().Период = КлючЗначение.Значение;
		КонецЦикла;
		Настройки.Периоды.Свернуть("Период", "");
	КонецЕсли;
	Настройки.Вставить("НастройкаАналитик", Объект.НастройкаАналитик.Выгрузить());
	
	//
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ПараметрыЗадания.КлючОбщихНастроек, "НастройкиФоновогоЗадания_"+ПараметрыЗадания.УникальныйИдентификатор, Настройки);
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоПлану(Настройки = неопределено)
	
	//
	Таблица = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("СоответствиеПериодов")
		И ТипЗнч(Настройки.СоответствиеПериодов) = Тип("Соответствие") Тогда
		Таблица = ЗаполнитьТаблицуПоСоответствиюПериодов(Таблица, Настройки.СоответствиеПериодов);
	КонецЕсли;
	
	КоличествоОбработанныхСтрок = Таблица.Количество();
	
	//
	Объект.ДвиженияОперацииИсходные.Загрузить(Таблица);
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ЗаполнитьПоКлючевымАналитикамНаСервере(ОписаниеКТ, Таблица);
	
КонецФункции

&НаСервере
Функция ОбновитьИсходныеПланы()
	
	//
	Таблица = ПолучитьИзВременногоХранилища(АдресХранилища);
	КоличествоОбработанныхСтрок = Таблица.Количество();
	
	//
	Объект.ДвиженияОперацииИсходные.Загрузить(Таблица);
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	ВыполнитьОбновлениеИсходныхПланов(ОписаниеКТ, Таблица);
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбновлениеИсходныхПланов(Знач ОписаниеКТ, ДанныеЗаполнения)
	
	КТ = КроссТаблицыУХКлиентСервер;
	
	//
	ЭтоПереносМеждуДокументамиРезервирования = ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования;
	
	//
	СписокКлючевыхАналитик = ОписаниеКТ.Схема.Аналитики.Шапка;
	ЕстьВалютаВШапке = Ложь;
	Если СтрНайти(СписокКлючевыхАналитик, "Валюта")>0 Тогда
		ЕстьВалютаВШапке = Истина;
		СписокКлючевыхАналитик = СтрЗаменить(СписокКлючевыхАналитик, "Валюта,", "");
		СписокКлючевыхАналитик = СтрЗаменить(СписокКлючевыхАналитик, ",Валюта", "");
		СписокКлючевыхАналитик = СтрЗаменить(СписокКлючевыхАналитик, ",Валюта,", "");
	КонецЕсли; 
	
	//
	СписокАналитикСтроки = ОписаниеКТ.Схема.Аналитики.Строка;
	
	СписокАналитикКЗаполнению = ОписаниеКТ.Схема.Аналитики.Колонка+","+СокрЛП(СписокКлючевыхАналитик);
	Если СокрЛП(СписокАналитикСтроки) <> "" Тогда
		СписокАналитикКЗаполнению = СписокАналитикКЗаполнению 
			+ ?(СтрЗаканчиваетсяНа(СписокАналитикКЗаполнению,","), "", ",")
			+ СокрЛП(СписокАналитикСтроки);
	КонецЕсли; 
	
	Если ЕстьВалютаВШапке Тогда
		СписокАналитикКЗаполнению = СписокАналитикКЗаполнению 
			+ ?(СтрЗаканчиваетсяНа(СписокАналитикКЗаполнению,","), "", ",")
			+ "Валюта";
	КонецЕсли;
	
	Ресурсы = "";
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Ресурсы Цикл
		
		ОписаниеРесурса = КлючЗначение.Значение;
		Ресурсы = Ресурсы + ?(Ресурсы = "", "", ",") + ОписаниеРесурса.Имя;
	
	КонецЦикла; 
	
	ДанныеЗаполнения.Свернуть(СписокАналитикКЗаполнению, Ресурсы);
	
	//
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, ЭтотОбъект);
	
	//
	СтруктураОтбора = Новый Структура(СписокАналитикКЗаполнению);
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Объект, СписокКлючевыхАналитик);
	Если ЕстьВалютаВШапке Тогда
		СтруктураОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
	КонецЕсли;
	
	// 
	ПоляРесурсов = ПолучитьПоляРесурсов(ОписаниеКТ);
	
	// Основной цикл заполнения
	Для Каждого СтрокаКТ Из КроссТаблица Цикл
		
		Для каждого ПериодКТ Из АктивныеПериоды Цикл
			
			// Поиск 
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКТ, СписокАналитикСтроки);
			СтруктураОтбора.Период = ПериодКТ.Период;
			СтрокаПлана = ДанныеЗаполнения.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокаПлана.Количество() = 1 Тогда
				СтрокаПлана = СтрокаПлана[0];
			ИначеЕсли СтрокаПлана.Количество() = 0 Тогда
				СтрокаПлана = неопределено;
			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка обновления начального остатка.'");
			КонецЕсли;
				
			Для Каждого КлючЗначение Из ОписаниеКТ.Схема.Ресурсы Цикл
				
				ОписаниеРесурса = КлючЗначение.Значение;
				ПоляРесурса = ПоляРесурсов[ОписаниеРесурса.Имя];

				НовоеЗначение = ?(СтрокаПлана = неопределено, 0, СтрокаПлана[ОписаниеРесурса.Имя]);
				
				//
				Результат = КТ.Ресурс(СтрокаКТ, ПериодКТ, ПоляРесурса.Результат);
				КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, ПоляРесурса.Исходное,  НовоеЗначение);
				Если ЭтоПереносМеждуДокументамиРезервирования Тогда
					// При переносе между документами резервирования ресурс Измемение положительный, при сохранении в табличную часть знак изменяется на противоположный
					КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, ПоляРесурса.Изменение, НовоеЗначение - Результат);
				Иначе
					КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, ПоляРесурса.Изменение, Результат - НовоеЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоляРесурсов(ОписаниеКТ)
	
	ПоляРесурсов = Новый Соответствие;
	Для Каждого КлючЗначение Из ОписаниеКТ.Схема.Ресурсы Цикл
		
		ОписаниеРесурса = КлючЗначение.Значение;
		
		СтруктураПолей = Новый Структура;
		Для Каждого КЗПоля Из ОписаниеКТ.Схема.Поля Цикл
			ОписаниеПоля = КЗПоля.Значение;
			Если ОписаниеРесурса.Имя <> ОписаниеПоля.ИмяРесурса Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПолей.Вставить(ОписаниеПоля.ИмяПоказателя, ОписаниеПоля.ПрефиксРеквизитаКолонки);
		КонецЦикла;
		
		ПоляРесурсов.Вставить(ОписаниеРесурса.Имя, СтруктураПолей);
		
	КонецЦикла;
	
	Возврат ПоляРесурсов;
	
КонецФункции

#КонецОбласти 

#Область ИзменениеПериодаКроссТаблицы
	
&НаКлиенте
Процедура ИзменитьПериодНажатие(Элемент)
	
	Элементы.ГруппаКнопкиУправленияПериодом.Скрыть();
	
	ВыполнитьИзменениеПериодаКроссТаблицы();
	ЗаполнитьДокумент(Новый Структура("ОбновитьИсходныеПланы"));
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКроссТаблица;
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.СтраницаКроссТаблица);
	
	КлючевыеРеквизитыИзменены = Ложь;
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗаполнитьИсходнымиНажатие(Элемент)
	
	Элементы.ГруппаКнопкиУправленияПериодом.Скрыть();
	
	ВыполнитьИзменениеПериодаКроссТаблицы();
	ЗаполнитьДокумент(Новый Структура); // Заполняет планами
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКроссТаблица;
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.СтраницаКроссТаблица);
	
	КлючевыеРеквизитыИзменены = Ложь;
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменениеПериодаНажатие(Элемент)
	
	Элементы.ГруппаКнопкиУправленияПериодом.Скрыть();
	
	//
	Объект.ПериодОтчета = ПериодНачало;
	Объект.ПериодОтчетаОкончание = ПериодОкончание;
	
	// Восстанавливаем периоды
	Объект.Периоды.Очистить();
	Для Каждого СтрокаПредыдущая Из ПериодыПредыдущее Цикл
		ЗаполнитьЗначенияСвойств(Объект.Периоды.Добавить(), СтрокаПредыдущая);
	КонецЦикла;
	
	// Если ЭтоЛимитыРезервы, то обновить валюту документа
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийОперативныйПлан.Планирование") Тогда
		ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере(Истина);
	КонецЕсли;
	
	ПериодИзменен = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
	КлючевыеРеквизитыИзменены = Ложь;
	ПриОжиданииВыполнитьКонтрольДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеНажатие(Элемент)
	
	Элементы.ГруппаКнопкиУправленияПериодом.Скрыть();
	
	ДопПараметры = ПараметрыКопированияДанныхПланирования();
	Если НЕ ДопПараметры.КопированиеДанныхВозможно Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Копирование данных между периодами с разной периодичностью невозможно'"));
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СкопироватьДанныеНаНовыйПериодЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Документ.ОперативныйПлан.Форма.ИзменениеПериодаОперПлана", ДопПараметры, ЭтотОбъект,,,,
		ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеНаНовыйПериодЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ВыполнитьПереносМеждуПериодами(Результат);
		ЗаполнитьДокумент(Новый Структура("ОбновитьИсходныеПланы"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКроссТаблица;
		ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.СтраницаКроссТаблица);
		
		КлючевыеРеквизитыИзменены = Ложь;
		ПриОжиданииВыполнитьКонтрольДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьПараметрыПериода(ИзмененПериодНачало = Ложь, ИзмененПериодОкончание = Ложь, Направление = неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ЭтоЛимитыРезервы = Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование;
	Результат.Вставить("ЭтоЛимитыРезервы", ЭтоЛимитыРезервы);
	Результат.Вставить("Предназначение", Объект.Предназначение);
	
	//
	Горизонт = Новый Структура;
	Горизонт.Вставить("Вид", Объект.ВидГоризонта);
	Горизонт.Вставить("Периодичность", Объект.Периодичность);
	Горизонт.Вставить("ПервыйПериод", Объект.ПервыйПериод);
	Горизонт.Вставить("КоличествоПериодов", Объект.КоличествоПериодов);
	Горизонт.Вставить("Изменен", Ложь);
	
	Результат.Вставить("Горизонт", Горизонт);
	
	// Начало
	ПериодыПредыдущиеЗначения = Новый Структура;
	ПериодыПредыдущиеЗначения.Вставить("Значение", Объект.ПериодОтчета);
	ПериодыПредыдущиеЗначения.Вставить("Параметры", ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(ПериодыПредыдущиеЗначения.Значение));
	ПериодыПредыдущиеЗначения.Вставить("СтароеЗначение", Объект.ПериодОтчета);
	ПериодыПредыдущиеЗначения.Вставить("Изменен", ИзмененПериодНачало);
	ПериодыПредыдущиеЗначения.Вставить("Направление", Направление);
	
	Результат.Вставить("Период1", ПериодыПредыдущиеЗначения);
	
	// Окончание
	ПериодыПредыдущиеЗначения = Новый Структура;
	ПериодыПредыдущиеЗначения.Вставить("Значение", Объект.ПериодОтчетаОкончание);
	ПериодыПредыдущиеЗначения.Вставить("Параметры", ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(ПериодыПредыдущиеЗначения.Значение));
	ПериодыПредыдущиеЗначения.Вставить("СтароеЗначение", Объект.ПериодОтчетаОкончание); //???
	ПериодыПредыдущиеЗначения.Вставить("Изменен", ИзмененПериодОкончание);
	ПериодыПредыдущиеЗначения.Вставить("Направление", Направление);
	
	Результат.Вставить("Период2", ПериодыПредыдущиеЗначения);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РассчитатьНовыйПериодДокумента(Параметры)
	
	Горизонт = Параметры.Горизонт;
	П1 = Параметры.Период1;
	П2 = Параметры.Период2;
	
	//
	Если П1.Изменен Тогда
		
		// Производим изменение периода регулированием
		Если П1.Направление <> неопределено Тогда
			Если Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.ФиксированныйГоризонт Тогда
				П1.Значение = ВстраиваниеОПКПереопределяемый.ПолучитьСледующийПериод(
					П1.Значение, П1.Направление * Горизонт.КоличествоПериодов);
				П1.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П1.Значение);
			ИначеЕсли Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.СкользящийГоризонт 
				ИЛИ Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.СвободныйГоризонт Тогда
				П1.Значение = ВстраиваниеОПКПереопределяемый.ПолучитьСледующийПериод(
					П1.Значение, П1.Направление);
				П1.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П1.Значение);
			КонецЕсли;
		КонецЕсли;
		
		// Производим изменение периода окончания
		Если Параметры.ЭтоЛимитыРезервы И Год(П1.Параметры.ДатаНачала) <> Год(П2.Параметры.ДатаНачала) Тогда
			// Перешли в другой год лимитирования
			ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
				Параметры.Предназначение, НачалоГода(П1.Параметры.ДатаНачала));
				
			Горизонт.Периодичность = ПараметрыОП.ПериодичностьЛимитирования;
			Горизонт.Вид = ПараметрыОП.ВидГоризонтаЛимитирования;
			Горизонт.ПервыйПериод = ПараметрыОП.ПервыйПериодЛимитирования;
			Горизонт.КоличествоПериодов = ПараметрыОП.КоличествоПериодовЛимитирования;
			Горизонт.Изменен = Истина;
			
			Если П1.Параметры.Периодичность <> Горизонт.Периодичность Тогда
				Если П1.Направление = 1 Тогда
					ДатаДляПериода = НачалоГода(П1.Параметры.ДатаНачала);
				ИначеЕсли П1.Направление = -1 Тогда
					ДатаДляПериода = КонецГода(П1.Параметры.ДатаНачала);
				Иначе
					ДатаДляПериода = П1.Параметры.ДатаНачала;
				КонецЕсли;
				
				УстановитьПериодПоДатеИПериодичности(Параметры, П1, ДатаДляПериода, Горизонт.Периодичность);
				Если Параметры.ЕстьОшибки = Истина Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Год(П1.Параметры.ДатаНачала) <> Год(П2.Параметры.ДатаНачала) Тогда
				ДатаДляПериода = КонецГода(П1.Параметры.ДатаОкончания);
				УстановитьПериодПоДатеИПериодичности(Параметры, П2, ДатаДляПериода, Горизонт.Периодичность);
			КонецЕсли;
		ИначеЕсли Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.ФиксированныйГоризонт Тогда
			ФиксированныйГоризонт = РегистрыСведений.ПараметрыОперативногоПланирования.ПолучитьФиксированныйГоризонтПоПериоду(
				П1.Значение,
				Горизонт.Периодичность,
				Горизонт.ПервыйПериод,
				Горизонт.КоличествоПериодов);
			// П1 устанавливаем тоже на случай, если пользователем был выбран не 1-й период
			П1.Значение = ФиксированныйГоризонт.ПериодНачала; 
			П2.Значение = ФиксированныйГоризонт.ПериодОкончания;
			
			П1.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П1.Значение);
			П2.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П2.Значение);
			
		ИначеЕсли Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.СкользящийГоризонт Тогда
			П2.Значение = ВстраиваниеОПКПереопределяемый.ПолучитьСледующийПериод(
				П1.Значение, Горизонт.КоличествоПериодов-1);
			П2.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П2.Значение);;
		ИначеЕсли Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.СвободныйГоризонт Тогда
			// Свободный период
			Если П1.Параметры.ДатаНачала > П2.Параметры.ДатаНачала Тогда
				П2.Значение = П1.Значение;
				П2.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П2.Значение);;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли П2.Изменен = Истина Тогда
		
		Если Горизонт.Вид = Перечисления.ВидыГоризонтовПланирования.СвободныйГоризонт Тогда
			Если П2.Направление <> неопределено Тогда // Производим изменение периода регулированием
				П2.Значение = ВстраиваниеОПКПереопределяемый.ПолучитьСледующийПериод(П2.Значение, П2.Направление);
				П2.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П2.Значение);
			КонецЕсли;
			
			Если Параметры.ЭтоЛимитыРезервы И Год(П1.Параметры.ДатаНачала) <> Год(П2.Параметры.ДатаНачала) Тогда
				// Перешли в другой год лимитирования
				ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
					Параметры.Предназначение, НачалоГода(П2.Параметры.ДатаНачала));
					
				Горизонт.Периодичность = ПараметрыОП.ПериодичностьЛимитирования;
				Горизонт.Вид = ПараметрыОП.ВидГоризонтаЛимитирования;
				Горизонт.ПервыйПериод = ПараметрыОП.ПервыйПериодЛимитирования;
				Горизонт.КоличествоПериодов = ПараметрыОП.КоличествоПериодовЛимитирования;
				Горизонт.Изменен = Истина;
				
				Если П2.Параметры.Периодичность <> Горизонт.Периодичность Тогда
					УстановитьПериодПоДатеИПериодичности(Параметры, П2, П2.Параметры.ДатаНачала, Горизонт.Периодичность);
				КонецЕсли;
				Если Параметры.ЕстьОшибки = Истина Тогда
					Возврат;
				КонецЕсли;
				
				Если Год(П1.Параметры.ДатаНачала) <> Год(П2.Параметры.ДатаНачала) Тогда
					УстановитьПериодПоДатеИПериодичности(Параметры, П1, НачалоГода(П2.Параметры.ДатаОкончания), Горизонт.Периодичность);
				КонецЕсли;
				Если Параметры.ЕстьОшибки = Истина Тогда
					Возврат;
				КонецЕсли;
				
			ИначеЕсли П1.Параметры.ДатаНачала > П2.Параметры.ДатаНачала Тогда
				// Планирование
				П1.Значение = П2.Значение;
				П1.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(П1.Значение);;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьИзменениеПериода(ПараметрыПериода)
	
	Если ТипЗнч(ПараметрыПериода) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодОтчета = ПараметрыПериода.Период1.СтароеЗначение;
	Объект.ПериодОтчетаОкончание = ПараметрыПериода.Период2.СтароеЗначение;
	
	ОбщегоНазначения.СообщитьПользователю(ПараметрыПериода.СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНовыеПараметрыПериода(ПараметрыПериода)
	
	Если ТипЗнч(ПараметрыПериода) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	//
	Объект.ПериодОтчета = ПараметрыПериода.Период1.Значение;
	Объект.ПериодОтчетаОкончание = ПараметрыПериода.Период2.Значение;
	
	//
	Объект.ПериодОтчета = ПараметрыПериода.Период1.Значение;
	Объект.ПериодОтчетаОкончание = ПараметрыПериода.Период2.Значение;
	
	Объект.ДатаНачала = ПараметрыПериода.Период1.Параметры.ДатаНачала;
	Объект.ДатаОкончания = ПараметрыПериода.Период1.Параметры.ДатаОкончания;
	
	//
	ПериодыПредыдущее.Загрузить(Объект.Периоды.Выгрузить());
	Объект.Периоды.Загрузить(
		Документы.ОперативныйПлан.ПолучитьТаблицуПериодов(Объект.ПериодОтчета, Объект.ПериодОтчетаОкончание));
	
	Если ПараметрыПериода.ЭтоЛимитыРезервы = Истина Тогда
		ИзменитьВалютуПриИзмененииВидаБюджетаИлиЦФОНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПериодПоДатеИПериодичности(Параметры, Период, Дата, Периодичность)
	
	Период.Значение = ОперативноеПланированиеПовтИспУХ.ПериодПоДатеИПериодичности(Дата, Периодичность);
	Период.Параметры = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(Период.Значение);
	
	Если НЕ ЗначениеЗаполнено(Период.Значение) Тогда
		Параметры.ЕстьОшибки = Истина;
		
		Шаблон = НСтр("ru = 'Не обнаружен период, соответствующий дате %1 с периодичностью %2'");
		Параметры.СообщениеОбОшибке = СтрШаблон(Шаблон, Формат(Дата, "ДЛФ=D"), Периодичность);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереносМеждуПериодами(СоответствиеПериодов)
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	// Сохранить данные в табличную часть
	КроссТаблицыУХКлиентСервер.ЗаполнитьТаблицуИзКроссТаблицы(
		Объект,
		ОписаниеКТ,
		ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица],
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка],
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды]);
		
	//
	ДвиженияОперации = Объект.ДвиженияОперации.Выгрузить();
	
	ДвиженияОперацииНовые = ЗаполнитьТаблицуПоСоответствиюПериодов(ДвиженияОперации, СоответствиеПериодов);
		
	Объект.ДвиженияОперации.Загрузить(ДвиженияОперацииНовые);
	
	//
	ОбновитьСтруктуруВыводаКроссТаблицы(ОписаниеКТ);
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
	// Пересчитать сумму документа
	Объект.СуммаДокумента = Объект.ДвиженияОперации.Итог("Сумма");
	ЗавершитьИзменениеПериодаКроссТаблицы();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИзменениеПериодаКроссТаблицы()
	
	ПериодНачало = Объект.ПериодОтчета;
	ПериодОкончание = Объект.ПериодОтчетаОкончание;
	ПериодИзменен = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
	КлючевыеРеквизитыИзменены = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИзменениеПериодаКроссТаблицы()
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	// Сохранить данные в табличную часть
	КроссТаблицыУХКлиентСервер.ЗаполнитьТаблицуИзКроссТаблицы(
		Объект,
		ОписаниеКТ,
		ЭтотОбъект[ОписаниеКТ.Реквизиты.КроссТаблица],
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Расшифровка],
		ЭтотОбъект[ОписаниеКТ.Реквизиты.Периоды]);
	
	//
	ОбновитьСтруктуруВыводаКроссТаблицы(ОписаниеКТ);
	ЗагрузитьДанныеВКроссТаблицу(ОписаниеКТ);
	
	// Пересчитать сумму документа
	Объект.СуммаДокумента = Объект.ДвиженияОперации.Итог("Сумма");
	ЗавершитьИзменениеПериодаКроссТаблицы();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыКопированияДанныхПланирования()
	
	//
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	// Копирование данных
	ДопПараметры = Новый Структура;
	
	// Старый горизонт
	Горизонт = Новый Структура;
	Горизонт.Вставить("Начало", ПериодНачало);
	Горизонт.Вставить("Окончание", ПериодОкончание);
	Горизонт.Вставить("Данные", ПолучитьПериодыСДанными());
	ДопПараметры.Вставить("ГоризонтИсходный", Горизонт);
	
	// Новый горизонт
	Горизонт = Новый Структура;
	Горизонт.Вставить("Начало", Объект.ПериодОтчета);
	Горизонт.Вставить("Окончание", Объект.ПериодОтчетаОкончание);
	Горизонт.Вставить("Отбор", ПараметрыОтбораДанныхНовыхПериодов(ОписаниеКТ, Объект));
	ДопПараметры.Вставить("ГоризонтНовый", Горизонт);
	
	//
	НачалоСтарый = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(ДопПараметры.ГоризонтИсходный.Начало);
	ОкончаниеСтарый = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(ДопПараметры.ГоризонтИсходный.Окончание);
	НачалоНовый = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(ДопПараметры.ГоризонтНовый.Начало);
	ОкончаниеНовый = ОперативноеПланированиеПовтИспУХ.ПараметрыПериода(ДопПараметры.ГоризонтНовый.Окончание);
	КопированиеДанныхВозможно = НачалоНовый.Периодичность = ОкончаниеНовый.Периодичность
		И НачалоСтарый.Периодичность = НачалоНовый.Периодичность
		И ОкончаниеСтарый.Периодичность = ОкончаниеНовый.Периодичность;
		
	ДопПараметры.Вставить("КопированиеДанныхВозможно", КопированиеДанныхВозможно);
	
	Возврат ДопПараметры;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияДанныхПоДругимПериодам()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	// Копирование данных
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПериодНачалоСтарый", ПериодНачало);
	ДопПараметры.Вставить("ПериодОкончаниеСтарый", ПериодОкончание);
	ДопПараметры.Вставить("ПериодыСДанными", ПолучитьПериодыСДанными());
	
	ДопПараметры.Вставить("ПериодНачалоНовый", Объект.ПериодОтчета);
	ДопПараметры.Вставить("ПериодОкончаниеНовый", Объект.ПериодОтчетаОкончание);
	
	// Старый горизонт
	Горизонт = Новый Структура;
	Горизонт.Вставить("Отбор", ПараметрыОтбораДанныхНовыхПериодов(ОписаниеКТ, Объект));
	ДопПараметры.Вставить("ГоризонтИсходный", Горизонт);
	
	// Новый горизонт
	Горизонт = Новый Структура;
	Горизонт.Вставить("Начало", Объект.ПериодОтчета);
	Горизонт.Вставить("Окончание", Объект.ПериодОтчетаОкончание);
	Горизонт.Вставить("Отбор", ПараметрыОтбораДанныхНовыхПериодов(ОписаниеКТ, Объект));
	ДопПараметры.Вставить("ГоризонтНовый", Горизонт);
	
	Возврат ДопПараметры;
КонецФункции

&НаСервере
Функция ПолучитьПериодыСДанными()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	ТаблицаПериодов = Объект.ДвиженияОперации.Выгрузить(, "Период, Сумма, Количество");
	
	СтруктураПоиска = Новый Структура("Сумма, Количество", 0, 0);
	
	Строки = ТаблицаПериодов.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из Строки Цикл
		ТаблицаПериодов.Удалить(Строка);
	КонецЦикла;
	
	ТаблицаПериодов.Свернуть("Период", "");
	
	Возврат ТаблицаПериодов.ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервере
Функция ПараметрыОтбораДанныхНовыхПериодов(ОписаниеКТ, ДанныеШапки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоЛимиты", ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов);
	Результат.Вставить("ЭтоРезерв", ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование);
	Результат.Вставить("ЭтоПлан", ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Планирование);
	Результат.Вставить("Отбор", КроссТаблицыУХ.АналитикиШапкиВСтруктуру(ОписаниеКТ, ДанныеШапки));
	
	Результат.Вставить("РежимВводаДокументаПланирования", Объект.РежимВводаДокументаПланирования);
	Результат.Вставить("ДокументПланирования", Объект.ДокументПланирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗаполнитьПоКлючевымАналитикамДругогоПериодаЗавершение(Результат, Параметры) экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = ПараметрыЗаполненияДанныхПоДругимПериодам();
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоКлючевымАналитикамДругогоПериодаЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Документ.ОперативныйПлан.Форма.ИзменениеПериодаОперПлана", ДопПараметры, ЭтотОбъект,,,,
		ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлючевымАналитикамДругогоПериодаЗавершение(Результат, Параметры) экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ЗаполнитьДокумент(Новый Структура("СоответствиеПериодов",Результат));
		ЗаполнитьДокумент(Новый Структура("ОбновитьИсходныеПланы"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКроссТаблица;
		ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.СтраницаКроссТаблица);
		
		КлючевыеРеквизитыИзменены = Ложь;
		ПриОжиданииВыполнитьКонтрольДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуПоСоответствиюПериодов(Таблица, СоответствиеПериодов)
	
	Результат = Таблица.СкопироватьКолонки();
	Для Каждого КлючЗначение Из СоответствиеПериодов Цикл
		Строки = Таблица.НайтиСтроки(новый Структура("Период", КлючЗначение.Значение));
		Для Каждого Строка Из Строки Цикл
			СтрокаНовая = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовая, Строка);
			СтрокаНовая.Период = КлючЗначение.Ключ;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ВызовыОбщихПроцедурИФункцийСогласованияОбъектов

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ВстраиваниеОПККлиентПереопределяемый.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат ВстраиваниеОПКПереопределяемый.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтотОбъект);
	
КонецФункции

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

#КонецОбласти

#Область ЦентрализованныеЗакупки

&НаКлиенте
Процедура ДекорацияДокументНеДелаетДвиженийПотребностейНажатие(Элемент)
	КомандаСброситьСценарийЗакупкиИРазрешитьЗаписьПотребностейНаСервере();
КонецПроцедуры

#Область СлужебныеПроцедурыНаСервере

&НаСервере
Процедура КомандаСброситьСценарийЗакупкиИРазрешитьЗаписьПотребностейНаСервере()
	Объект.УдалитьСценарийЗакупок = Справочники.Сценарии.ПустаяСсылка();
	Объект.НеРегистрироватьПотребностьВНоменклатуре = Ложь;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ВстраиваниеОПКПереопределяемый.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ВстраиваниеОПКПереопределяемый.ОпределитьСостояниеЗаявки(ЭтотОбъект, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуЗаявки(ЭтоБДДС, ЭтоБДР, Направление, ПараметрыЗаявки)
	
	ИмяФормыЗаявки = ВстраиваниеОПКВызовСервераПереопределяемый.ПолучитьИмяФормыДокументаЗаявкиИПодготовитьПараметры(
		ЭтоБДДС, ЭтоБДР, Направление, ПараметрыЗаявки);
	Если НЕ ЗначениеЗаполнено(ИмяФормыЗаявки) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыЗаявки, Новый Структура("Основание", ПараметрыЗаявки), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКроссТаблицуПриИзмененииРежимаВводаДокументаПланирования()
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	КроссТаблицыУХ.ОбновитьКроссТаблицуПриИзмененииРежимаВводаДокументаПланирования(ОписаниеКТ, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗагрузитьРезультатыОбработки(ИмяСобытия, Параметры, Источник)
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ИдентификаторФормыОперПлана") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.УникальныйИдентификатор <> Параметры.ИдентификаторФормыОперПлана Тогда
		Возврат; // это не наша форма
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ИмяДополнительногоДействияОперПлана") 
		ИЛИ НЕ Параметры.Свойство("АдресЗагружаемыхДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	
	//
	РезультатДействия = ПолучитьИзВременногоХранилища(Параметры.АдресЗагружаемыхДанных);
	ДанныеДляПроверки = РезультатДействия.Скопировать();
	
	// Сохранить данные из КроссТаблицы в табличную часть документа
	КроссТаблицыУХКлиентСервер.СохранитьДанныеКроссТаблицыВОбъект(Объект, ОписаниеКТ, ЭтотОбъект);
	ДанныеОперПлана = Объект.ДвиженияОперации.Выгрузить();
	
	ДанныеКЗагрузке = ДанныеОперПлана.СкопироватьКолонки();
	
	// Выполнить проверки
	ОперативноеПланированиеУХПереопределяемый.ВыполнитьОбработкуРезультатаДействия(ОписаниеКТ, ЭтотОбъект, Параметры.ИмяДополнительногоДействияОперПлана, Параметры, РезультатДействия, ДанныеКЗагрузке);
	
	//
	ВсеАналитики = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеАналитики, ОписаниеКТ.Схема.Аналитики.мШапка, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеАналитики, ОписаниеКТ.Схема.Аналитики.мКолонка, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеАналитики, ОписаниеКТ.Схема.Аналитики.мСтрока, Истина);
	
	//
	ВсеАналитикиСтрокой = СтрСоединить(ВсеАналитики, ",");
	НоменклатураВСтроке = ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено;
	СписокДопРеквизитовНоменклатуры = "ИсходнаяНоменклатура,ЕдиницаИзмерения,Коэффициент,Цена";
	
	// Выполнить проверки для номенклатуры
	ЕстьОшибки = Ложь;
	Если НоменклатураВСтроке Тогда
		
		ДанныеДляПроверки.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Цена", "");
		ДанныеДляПроверки.Сортировать("Номенклатура, Характеристика");
		
		ЭталонныеДанные = ДанныеОперПлана.Скопировать(, "Номенклатура, Характеристика, ЕдиницаИзмерения, Цена");
		ЭталонныеДанные.Сортировать("Номенклатура, Характеристика");
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		
		ШаблонЕдиницаИзмерения = НСтр("ru = 'Неправильная единица измерения %4 для номенклатуры %1 %2 (в плане использована с единицей измерения %3)'");
		ШаблонЦена = НСтр("ru = 'Неправильная цена %4 для номенклатуры %1 %2 (в плане цена %3)'");
		
		Для Каждого СтрокаДляПроверки Из ДанныеДляПроверки Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДляПроверки);
			Эталоны = ЭталонныеДанные.НайтиСтроки(СтруктураПоиска);
			Если Эталоны.Количество() = 0 Тогда
				Продолжить; // Таких строк в ОперПлане нет.
			КонецЕсли;
			
			// Строки есть. Должны совмадать единицы измерения и цены
			Эталон = Эталоны[0];
			Если Эталон.ЕдиницаИзмерения <> СтрокаДляПроверки.ЕдиницаИзмерения Тогда
				ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(
					СтрШаблон(ШаблонЕдиницаИзмерения, СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика, Эталон.ЕдиницаИзмерения, СтрокаДляПроверки.ЕдиницаИзмерения),
					ЕстьОшибки, , , УникальныйИдентификатор);
			КонецЕсли;
			
			Если Эталон.Цена <> СтрокаДляПроверки.Цена Тогда
				ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(
					СтрШаблон(ШаблонЦена, СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика, Эталон.Цена, СтрокаДляПроверки.Цена),
					ЕстьОшибки, , , УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем структуру поиска
	СтруктураПоиска = Новый Структура(ВсеАналитикиСтрокой);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Объект);
	СтруктураПоиска.Валюта = Объект.ВалютаДокумента;
	
	ЕстьРесурсСумма = ОписаниеКТ.Схема.Ресурсы.Свойство("Сумма");
	ЕстьРесурсКоличество = ОписаниеКТ.Схема.Ресурсы.Свойство("Количество");
	
	// Загрузить данные
	Для Каждого СтрокаДанных Из ДанныеКЗагрузке Цикл
		
		// доформировываем структуру поиска
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных, ОписаниеКТ.Схема.Аналитики.Колонка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных, ОписаниеКТ.Схема.Аналитики.Строка);
		
		// Ищем соответствующую строку
		Строки = ДанныеОперПлана.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			Строка = ДанныеОперПлана.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтруктураПоиска);
			Если НоменклатураВСтроке Тогда
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных, СписокДопРеквизитовНоменклатуры);
			КонецЕсли;
			
		ИначеЕсли Строки.Количество() = 1 Тогда
			Строка = Строки[0];
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка поиска строки кросс-таблицы'");
		КонецЕсли;
		
		Если ЕстьРесурсСумма Тогда
			Строка[ОписаниеКТ.Схема.Поля.СуммаИзменение.ИмяРеквизитаТЧ] = Строка[ОписаниеКТ.Схема.Поля.СуммаИзменение.ИмяРеквизитаТЧ] + СтрокаДанных.Сумма;
			Строка[ОписаниеКТ.Схема.Поля.СуммаРезультат.ИмяРеквизитаТЧ] = Строка[ОписаниеКТ.Схема.Поля.СуммаИсходное.ИмяРеквизитаТЧ] + Строка[ОписаниеКТ.Схема.Поля.СуммаИзменение.ИмяРеквизитаТЧ];
		КонецЕсли;
		
		Если ЕстьРесурсКоличество Тогда
			Строка[ОписаниеКТ.Схема.Поля.КоличествоИзменение.ИмяРеквизитаТЧ] = Строка[ОписаниеКТ.Схема.Поля.КоличествоИзменение.ИмяРеквизитаТЧ] + СтрокаДанных.Количество;
			Строка[ОписаниеКТ.Схема.Поля.КоличествоРезультат.ИмяРеквизитаТЧ] = Строка[ОписаниеКТ.Схема.Поля.КоличествоИсходное.ИмяРеквизитаТЧ] + Строка[ОписаниеКТ.Схема.Поля.КоличествоИзменение.ИмяРеквизитаТЧ];
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ДвиженияОперации.Загрузить(ДанныеОперПлана);
	
	// Перечитать данные
	КроссТаблицыУХ.ПрочитатьДанныеОбъектаВКроссТаблицу(Объект, ОписаниеКТ, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМенюДополнительныхДействий(ОписаниеКТ)
	
	Размещение = Элементы.КроссТаблицаГруппаЗаполнить;
	
	// Удалить ранее добавленные элементы меню
	ПрефиксИмениКоманды  = ПрефиксИмениКомандыДопДействий();
	
	// Поиск ранее добавленных команд
	КомандыКУдалению = Новый Массив;
	Для Каждого Команда Из ЭтотОбъект.Команды Цикл
		Если СтрНачинаетсяС(Команда.Имя, ПрефиксИмениКоманды) Тогда
			КомандыКУдалению.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Если КомандыКУдалению.Количество() > 0 Тогда
	
		КнопкиФормыКУдалению = Новый Массив;
		Для Каждого КнопкаФормы Из Размещение.ПодчиненныеЭлементы Цикл
			
			КомандаКнопки = Команды.Найти(КнопкаФормы.ИмяКоманды);
			Если КомандаКнопки <> неопределено 
				И КомандыКУдалению.Найти(КомандаКнопки) = неопределено Тогда
				Продолжить;
			КонецЕсли;
			КнопкиФормыКУдалению.Добавить(КнопкаФормы);
		КонецЦикла;
		
		// Удаляем все
		Для Каждого КнопкаФормы Из КнопкиФормыКУдалению Цикл
			Элементы.Удалить(КнопкаФормы);
		КонецЦикла;
		
		Для Каждого Команда Из КомандыКУдалению Цикл
			Команды.Удалить(Команда);
		КонецЦикла;
	КонецЕсли;
	
	// Добавить новые
	Если НЕ ОписаниеКТ.Свойство("ДополнительныеДействия") Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонИмениЭлемента = ШаблонИмениЭлементаДопДействий();
	ШаблонИмениКоманды  = ШаблонИмениКомандыДопДействий();
	
	Для Каждого ЭлементСписка Из ОписаниеКТ.ДополнительныеДействия Цикл
		
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
			ДопДействие = ЭлементСписка.Значение;
			ДопДействие_Имя = ДопДействие.Имя;
			ДопДействие_Заголовок = ДопДействие.Заголовок;
			Если ДопДействие.Свойство("Размещение") И Элементы.Найти(ДопДействие.Размещение) <> неопределено Тогда
				ДопДействие_Размещение = Элементы.Найти(ДопДействие.Размещение);
			Иначе
				ДопДействие_Размещение = Размещение;
			КонецЕсли;
		Иначе
			ДопДействие_Имя = ЭлементСписка.Значение;
			ДопДействие_Заголовок = ЭлементСписка.Представление;
			ДопДействие_Размещение = Размещение;
		КонецЕсли;
		
		ИмяЭлемента = СтрШаблон(ШаблонИмениЭлемента, ДопДействие_Имя);
		ИмяКоманды = СтрШаблон(ШаблонИмениКоманды, ДопДействие_Имя);
		ФормыУХ.СоздатьКоманду(ЭтотОбъект, ИмяКоманды, ДопДействие_Заголовок, "ДополнительныеДействия_КомандаВыполнить");
		ФормыУХ.СоздатьКнопкуФормы(Элементы, ИмяЭлемента, , ИмяКоманды, ВидКнопкиФормы.КнопкаКоманднойПанели, ДопДействие_Размещение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДополнительныеДействия_ПолучитьПараметрыДополнительногоДействия(ИмяДополнительногоДействия)
	
	ОписаниеКТ = ЭтотОбъект.КроссТаблицыФормы.Аналитики;
	Результат = ОперативноеПланированиеУХПереопределяемый.СформироватьПараметрыДополнительныхДействий(ОписаниеКТ, ЭтотОбъект, ИмяДополнительногоДействия);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДополнительныеДействия_КомандаВыполнить(Команда)
	
	ИмяДополнительногоДействия = СтрЗаменить(Команда.Имя, ПрефиксИмениКомандыДопДействий(), "");
	
	ПараметрыДополнительногоДействия = ДополнительныеДействия_ПолучитьПараметрыДополнительногоДействия(ИмяДополнительногоДействия);
	Если ПараметрыДополнительногоДействия = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПараметрыДополнительногоДействия.ИмяОткрываемойФормы, ПараметрыДополнительногоДействия, ЭтотОбъект, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонИмениЭлементаДопДействий()
	Возврат ПрефиксИмениЭлементаДопДействий() + "%1";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонИмениКомандыДопДействий()
	Возврат ПрефиксИмениКомандыДопДействий() + "%1";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениЭлементаДопДействий()
	Возврат "Заполнить_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениКомандыДопДействий()
	Возврат "Заполнить_";
КонецФункции

