#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СоответствиеКурсовВалют Экспорт;
Перем ВалютаУправленческогоУчета Экспорт;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Восстанавливает переменные для расчета
//
// Параметры:
//  ПеременныеДляРасчета  - Структура - Структура с переменными для расчета
//
Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета) Экспорт
		
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка");
		
	КонецЕсли;
			
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	Ответственный = Пользователи.ТекущийПользователь();
	
	//
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ОперативныйПлан") Тогда
		Документы.ОперативныйПлан.ЗаполнитьПоДокументуПланирования(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("СправочникСсылка.ВидыОперативныхПланов") Тогда
		Документы.ОперативныйПлан.ЗаполнитьПоВидуОперативногоПлана(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Предназначение", Предназначение) Тогда
		ИначеЕсли ДанныеЗаполнения.Свойство("ВидБюджета") Тогда
			Предназначение = ПланыВидовХарактеристик.ВидыБюджетов.Предназначение(ДанныеЗаполнения.ВидБюджета);
		КонецЕсли;
		
		ДанныеЗаполнения.Свойство("ВидОперации",	ВидОперации);
		ДанныеЗаполнения.Свойство("ЦФО",			ЦФО);
		ДанныеЗаполнения.Свойство("Проект",			Проект);
		ДанныеЗаполнения.Свойство("Организация",	Организация);
		ДанныеЗаполнения.Свойство("ВалютаДокумента",ВалютаДокумента);
		
		Если ДанныеЗаполнения.Свойство("ВидОперативногоПлана") Тогда
			Документы.ОперативныйПлан.ЗаполнитьПоВидуОперативногоПлана(ЭтотОбъект, ДанныеЗаполнения.ВидОперативногоПлана);
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение вида бюджета по умолчанию
	ВидыБюджетов = Перечисления.ПредназначенияЭлементовСтруктурыОтчета;
	Если НЕ ЗначениеЗаполнено(Предназначение) Тогда
		Предназначение = ВидыБюджетов.БюджетДвиженияДенежныхСредств;
	КонецЕсли;
	
	// 
	ДатаПараметров = Дата;
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаПараметров = ДатаНачала;
	ИначеЕсли ЗначениеЗаполнено(ПериодОтчета) Тогда
		ДатаПараметров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПериодОтчета, "ДатаНачала");
	КонецЕсли;
	
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, ДатаПараметров);
	ВидыОП = Перечисления.ВидыОперацийОперативныйПлан;
	
	// Если по виду бюджета нет разрешенных операций(обычно это бюджет закупок), то меняем его на БДДС
	Если НЕ ПараметрыОП.ИспользоватьПланирование И НЕ ПараметрыОП.ИспользоватьЛимитирование И НЕ ПараметрыОП.ИспользоватьРезервирование Тогда
		Предназначение = ВидыБюджетов.БюджетДвиженияДенежныхСредств;
		ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, ДатаПараметров);
	КонецЕсли;
	
	// Очищаем запрещенные операции
	Если ВидОперации = ВидыОП.Резервирование И (НЕ ПараметрыОП.ИспользоватьЛимитирование ИЛИ НЕ ПараметрыОП.ИспользоватьРезервирование) Тогда
		ВидОперации = ВидыОП.ПустаяСсылка();
	ИначеЕсли ВидОперации = ВидыОП.ВводЛимитов И (НЕ ПараметрыОП.ИспользоватьЛимитирование) Тогда
		ВидОперации = ВидыОП.ПустаяСсылка();
	ИначеЕсли ВидОперации = ВидыОП.Планирование И (НЕ ПараметрыОП.ИспользоватьПланирование) Тогда
		ВидОперации = ВидыОП.ПустаяСсылка();
	КонецЕсли;
		
	// Определение вида операции по умолчанию
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если ПараметрыОП.ИспользоватьПланирование Тогда
			ВидОперации = ?(ПараметрыОП.ПланированиеИРезервированиеОдновременно, ВидыОП.ПланированиеИРезервирование, ВидыОП.Планирование);
		ИначеЕсли ПараметрыОП.ИспользоватьЛимитирование Тогда
			ВидОперации = ?(ПараметрыОП.ИспользоватьРезервирование, ВидыОП.Резервирование, ВидыОП.ВводЛимитов);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем параметры горизонта
	Документы.ОперативныйПлан.ОпределитьГоризонт(ЭтотОбъект, ПараметрыОП);
	
	Если Не ЗначениеЗаполнено(ПериодОтчета) Тогда
		ПериодОтчета = ВстраиваниеОПКПереопределяемый.глОтносительныйПериодПоДате(ДатаНачала, Периодичность, 0);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ВстраиваниеОПКПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
		ЦФО = ВстраиваниеОПКПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Проект = ВстраиваниеОПКПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбновитьДанныеПоВалютам();
	
	СуммаДокумента = ДвиженияОперации.Итог("Сумма");
	БалансКорректировок = ДвиженияОперации.Итог("СуммаИзменение");
	
	Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		КурсДокумента = СоответствиеКурсовВалют[ВалютаДокумента];
		КурсВалютыУпрУчета = СоответствиеКурсовВалют[ВалютаУправленческогоУчета];
		СуммаДокументаУпр = ВстраиваниеОПКПереопределяемый.ПересчитатьПоКурсу(СуммаДокумента, КурсДокумента, КурсВалютыУпрУчета);
		БалансКорректировокУпр = ВстраиваниеОПКПереопределяемый.ПересчитатьПоКурсу(БалансКорректировок, КурсДокумента, КурсВалютыУпрУчета);
	Иначе
		СуммаДокументаУпр = СуммаДокумента;
		БалансКорректировокУпр = БалансКорректировок;
		
		СтрокаШаблона = НСтр("ru = 'Не заполнена валюта управленческого учета. Сумма документа (%1) не была пересчитана в валюту управленческого учета из валюты документа (%2).'");
		
		ТекстСообщения = "";
		Если Не ПустаяСтрока(СтрокаШаблона) Тогда
			ТекстСообщения = СтрШаблон(СтрокаШаблона, Строка(СуммаДокумента), Строка(ВалютаДокумента));
		КонецЕсли;
				
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, ,, Отказ);
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПериодОтчета) Тогда
		ПериодОтчета = ВстраиваниеОПКПереопределяемый.глОтносительныйПериодПоДате(Дата, Периодичность,0);
	КонецЕсли;
	
	ДатаНачала		= ПериодОтчета.ДатаНачала;
	ДатаОкончания	= ПериодОтчета.ДатаОкончания;
	
	// Очистить поле ДокументПланирования, если оно не нужно.
	Если ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование 
			И РежимВводаДокументаПланирования = 0 
			И ЗначениеЗаполнено(ДокументПланирования) Тогда
		ДокументПланирования = неопределено;
	КонецЕсли;
	
	Если (НЕ ЭтоНовый()) И ЗначениеЗаполнено(Ссылка.Проект) Тогда 
		ДополнительныеСвойства.Вставить("СтруктураДанныхСтар", ВстраиваниеОПКПереопределяемый.ПолучитьСтруктуруДанныхДляКорректировкиПланов(Ссылка));
	КонецЕсли;
	
	// Очистка реквизитов шапки для аналитик в шапке не размещенных.
	ОчиститьНенужныеАналитикиШапки();
	
	//
	Если ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование Тогда
		Если ЗначениеЗаполнено(НазначениеРезерва_ДоговорКонтрагента)
			И (ТипЗнч(НазначениеРезерва_Контрагент) <> Тип("СправочникСсылка.Контрагенты") 
			ИЛИ НЕ ЗначениеЗаполнено(НазначениеРезерва_Контрагент))
		Тогда
			НазначениеРезерва_ДоговорКонтрагента = неопределено;
		КонецЕсли;
	Иначе
		НазначениеРезерва_Контрагент = неопределено;
		НазначениеРезерва_ДоговорКонтрагента = неопределено;
	КонецЕсли;
	
	//
	ВстраиваниеОПКПереопределяемый.ПроверитьНеобходимостьУстановкиСтатусаЧерновик(ЭтотОбъект, РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// КлючиАналитикиПланированияСтруктуры
		ИменаПолей = РегистрыСведений.АналитикаПланированияСтруктуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.АналитикаПланированияСтруктуры = "АналитикаСтруктуры";
		РегистрыСведений.АналитикаПланированияСтруктуры.ЗаполнитьВКоллекции(ДвиженияОперации, ИменаПолей);
		
		// КлючиАналитикиПланированияСтатейБюджетов
		ИменаПолей = РегистрыСведений.АналитикаПланированияСтатейБюджетов.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.АналитикаПланированияСтатейБюджетов = "АналитикаСтатейБюджетов";
		РегистрыСведений.АналитикаПланированияСтатейБюджетов.ЗаполнитьВКоллекции(ДвиженияОперации, ИменаПолей);
		
		Если ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Планирование
			ИЛИ ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.ПланированиеИРезервирование Тогда
		
			// КлючиАналитикиПланированияПотребностей
			ИменаПолей = РегистрыСведений.АналитикаПланированияПотребностей.ИменаПолейКоллекцииПоУмолчанию();
			ИменаПолей.Назначение = "ДоговорКонтрагента";
			ИменаПолей.АналитикаПланированияПотребностей = "АналитикаПотребностей";
			РегистрыСведений.АналитикаПланированияПотребностей.ЗаполнитьВКоллекции(ДвиженияОперации, ИменаПолей);
			
			// КлючиАналитикиПланированияНоменклатуры
			ИменаПолей = РегистрыСведений.АналитикаПланированияНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
			ИменаПолей.АналитикаПланированияНоменклатуры = "АналитикаНоменклатуры";
			РегистрыСведений.АналитикаПланированияНоменклатуры.ЗаполнитьВКоллекции(ДвиженияОперации, ИменаПолей);
			
			// КлючиАналитикиУчетаПоПартнерам
			ИменаПолей = АналитикаУчетаПоПартнерам_ИменаПолейКоллекцииПоУмолчанию();
			ИменаПолей.АналитикаУчетаПоПартнерам = "АналитикаПартнеров";
			ИменаПолей.Договор = "ДоговорКонтрагента";
			АналитикаУчетаПоПартнерам_ЗаполнитьВКоллекции(ДвиженияОперации, ИменаПолей);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВстраиваниеОПКПереопределяемый.УстановитьСтатусЧерновикПриНеобходимости(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ВстраиваниеОПКПереопределяемый.КонстантаИспользоватьЦентрализованноеУправлениеЗакупками()
		И ОбъектКопирования.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		ВызватьИсключение НСтр("ru = 'Управление закупками отключено. Копирование документа с видом бюджета ""Бюджет закупок"" невозможно.'");
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если НЕ ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(ОбъектКопирования.ЦФО) Тогда
		ВнеМаршрута = Ложь;
	КонецЕсли;
	
	// Результаты контроля не должны копироваться из документа
	РезультатыКонтроля.Очистить();
	
	// Документ планирования не должен копироваться из документа
	ДокументПланирования = неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ВидГоризонта <> Перечисления.ВидыГоризонтовПланирования.ФиксированныйГоризонт Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПервыйПериод");
	КонецЕсли;
	
	ТаблицаНастройкиАналитик = НастройкаАналитик.Выгрузить(, "Аналитика, Использование, ОбязательноеЗаполнение");
	
	ДополнитьТаблицуОтсутствующимиАналитиками(ТаблицаНастройкиАналитик);
	
	// Обязательность аналитик
	Для каждого СтрокаАналитика Из ТаблицаНастройкиАналитик Цикл
		
		//
		Если СтрокаАналитика.Аналитика = Справочники.АналитикиОперативногоПланирования.ДокументПланирования Тогда
			Продолжить;
		КонецЕсли;
		
		Инфо = ПолучитьИменаРеквизитовПоАналитике(СтрокаАналитика.Аналитика);
		
		Если Инфо = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАналитика.ОбязательноеЗаполнение = Ложь Тогда
			
			Если СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.НеИспользуется Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизитаТабличнойЧасти);
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.Уточняется Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизитаТабличнойЧасти);
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.Колонка Тогда
				// Всегда должно быть заполнено
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.Строка Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизитаТабличнойЧасти);
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.КлючеваяАналитика Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизитаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			Если СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.НеИспользуется Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизитаТабличнойЧасти);
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.Уточняется Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизитаТабличнойЧасти);
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.Колонка Тогда
				// Всегда должно быть заполнено
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.Строка Тогда
				МассивНепроверяемыхРеквизитов.Добавить(Инфо.ИмяРеквизита);
			ИначеЕсли СтрокаАналитика.Использование = Перечисления.ИспользованиеАналитик.КлючеваяАналитика Тогда
				// Проверяем реквизиты шапки и табличной части
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// Приоритет
	ОбязательностьПриоритета = Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов
		И ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Планирование;
	Если НЕ ОбязательностьПриоритета Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Приоритет");
	КонецЕсли;
	
	// Удаляем
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Документ планирования может быть заполнен, для операции Резервирование
	ВозможенДокументДокументПланирования = ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование;
	
	// Проверить на последующие в цепочке документы только для проведения. Для перепроведения проверка не выполняется.
	Если ВозможенДокументДокументПланирования
			И РежимВводаДокументаПланирования <> 0
			И НЕ Проведен Тогда
		
		Если ЗначениеЗаполнено(ДокументПланирования) Тогда
			// Проверяем актуальность документа
			ДокументПланированияНеКорректен = Документы.ОперативныйПлан.ЕстьПоследующиеДокументы(ДокументПланирования);
			Если ДокументПланированияНеКорректен Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо выбрать актуальный документ планирования.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументПланирования", , Отказ);
				Возврат ;
			КонецЕсли;
		Иначе
			// Сообщаем о незаполненности документа планирования
			ТекстСообщения = НСтр("ru = 'Поле ""Документ планирования"" не заполнено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументПланирования", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроверитьВозможностьПроведения(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ПроведениеСерверОПК.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	//
	ДатаПараметровЛимитирования = Документы.ОперативныйПлан.ПолучитьДатуНастроекЛимитирования(ЭтотОбъект);
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, ДатаПараметровЛимитирования);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПараметрыОперПланирования", ПараметрыОП);
	
	Документы.ОперативныйПлан.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// 
	КонтрольЛимитовУХ.ВыполнитьПроверкуНаличияПериодов(Ссылка, ДополнительныеСвойства, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСерверОПК.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);	
	
	// Операции
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОперацииБюджетов") Тогда
		Документы.ОперативныйПлан.ОтразитьОперацииБюджетов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;

	// ОперативныйПлан
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОперативныйПланПоБюджетам") Тогда
		КонтрольЛимитовУХ.ОтразитьОперативныйПланПоБюджету(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Лимиты
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЛимитыПоБюджетам") Тогда
		КонтрольЛимитовУХ.ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Потребности по номенклатуре
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПотребностиВНоменклатуре") Тогда
		Документы.ОперативныйПлан.ОтразитьПотребностиВНоменклатуре(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// НазначениеРезервов
	Документы.ОперативныйПлан.ОтразитьНазначениеРезервов(ДополнительныеСвойства, Движения, Отказ);
	
	//
	СформироватьСписокРегистровДляКонтроля();
	
	//
	ПроведениеСерверОПК.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	//
	ПроведениеСерверОПК.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	//
	ПроведениеСерверОПК.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	//
	Если НЕ Отказ Тогда
		ТекСостояние = ВстраиваниеОПКПереопределяемый.ВернутьСтатусОбъекта(ЭтотОбъект.Ссылка);
			
		СостоянияПроведения = Новый Массив;
		СостоянияПроведения.Добавить(Перечисления.СостоянияСогласования.Утверждена);
		СостоянияПроведения.Добавить(Перечисления.СостоянияСогласования.НаУтверждении);
		СостоянияПроведения.Добавить(Перечисления.СостоянияСогласования.Отклонена);
		Если СостоянияПроведения.Найти(ТекСостояние) = Неопределено Тогда
			ТекСостояние = Перечисления.СостоянияСогласования.Утверждена;
		КонецЕсли;
		
		ЭтотОбъект.ДополнительныеСвойства.Вставить("ТекущееСостояниеСогласования", ТекСостояние);
		
		ВстраиваниеОПКПереопределяемый.ОтправитьНаСогласованиеПриПроведенииДокумента(ЭтотОбъект, Отказ);
		ВстраиваниеОПКПереопределяемый.ОбновитьПоказателиПроектовПриПроведенииДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЕстьСуперПользователь = ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(ЦФО);
	
	Если Не ЕстьСуперПользователь Тогда
		ПроверитьВозможностьОтменыПроведения(Отказ);
	КонецЕсли;
	
	ПроверитьНаличиеДокументовБлокирующихПроведение(Отказ);
	
	ПроведениеСерверОПК.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	ВстраиваниеОПКПереопределяемый.ОтменитьСогласованиеПриОтменеПроведения(Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДанныеПоВалютам()
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	СоответствиеКурсовВалют=Новый Соответствие;
	СоответствиеКурсовВалют.Вставить(ВалютаУправленческогоУчета, ВстраиваниеОПКПереопределяемый.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Дата));
	                                                                                                                                            
	Если СоответствиеКурсовВалют.Получить(ВалютаДокумента)=Неопределено Тогда
		СоответствиеКурсовВалют.Вставить(ВалютаДокумента, ВстраиваниеОПКПереопределяемый.ПолучитьКурсВалюты(ВалютаДокумента, Дата));
	КонецЕсли;
		
КонецПроцедуры // ОбновитьДанныеПоВалютам()

Процедура ПроверитьВозможностьОтменыПроведения(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.ДокументПланирования = &ДокументПланирования
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаРасход.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасход КАК ЗаявкаНаРасход
	|ГДЕ
	|	ЗаявкаНаРасход.ДокументПланирования = &ДокументПланирования
	|	И ЗаявкаНаРасход.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланируемыйДоход.Ссылка
	|ИЗ
	|	Документ.ПланируемыйДоход КАК ПланируемыйДоход
	|ГДЕ
	|	ПланируемыйДоход.ДокументПланирования = &ДокументПланирования
	|	И ПланируемыйДоход.Проведен";
	
	Если НЕ ВстраиваниеОПКПереопределяемый.ЭтоЕХ() Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОжидаемоеПоступлениеДенежныхСредств.Ссылка
		|ИЗ
		|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ОжидаемоеПоступлениеДенежныхСредств
		|ГДЕ
		|	ОжидаемоеПоступлениеДенежныхСредств.ДокументПланирования = &ДокументПланирования
		|	И ОжидаемоеПоступлениеДенежныхСредств.Проведен";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументПланирования", Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Существуют проведенные документы, созданные на основании документа %1. Отменить проведение может только суперпользователь.'");
		
		Сообщение = "";
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			Сообщение = СтрШаблон(ТекстСообщения, Ссылка);
		КонецЕсли;
		
		ВызватьИсключение Сообщение;
		Отказ = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	//
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОперацииБюджетов") Тогда
		Массив.Добавить(Движения.ОперацииБюджетов);
	КонецЕсли;
	
	//
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЛимитыПоБюджетам") Тогда
		Массив.Добавить(Движения.ЛимитыПоБюджетам);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ДополнитьТаблицуОтсутствующимиАналитиками(ТаблицаНастройкиАналитик)
	
	//
	СписокАналитик = Новый СписокЗначений;
	СписокАналитик.ЗагрузитьЗначения(ТаблицаНастройкиАналитик.ВыгрузитьКолонку("Аналитика"));
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиОперативногоПланирования.Ссылка КАК Аналитика
	|ИЗ
	|	Справочник.АналитикиОперативногоПланирования КАК АналитикиОперативногоПланирования
	|ГДЕ
	|	АналитикиОперативногоПланирования.Предопределенный = ИСТИНА
	|	И НЕ АналитикиОперативногоПланирования.Ссылка В (&СписокАналитик)";
	Запрос.УстановитьПараметр("СписокАналитик", СписокАналитик);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	// Добавить отсутствующие аналитики опер.плана
	Пока Выборка.Следующий() Цикл
	
		Строка = ТаблицаНастройкиАналитик.Добавить();
		Строка.Аналитика = Выборка.Аналитика;
	 	Строка.Использование = Перечисления.ИспользованиеАналитик.НеИспользуется;
		Строка.ОбязательноеЗаполнение = Ложь;
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьИменаРеквизитовПоАналитике(Аналитика)
	
	ИмяРеквизита = Документы.ОперативныйПлан.ПолучитьИмяРеквизитаПоВидуАналитики(Аналитика);
	Если ИмяРеквизита = неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	Рез = Новый Структура("ИмяРеквизита, ИмяРеквизитаТабличнойЧасти", ИмяРеквизита, "ДвиженияОперации."+ИмяРеквизита);
	
	//
	Если ИмяРеквизита = "Валюта" Тогда
		Рез.ИмяРеквизита = "ВалютаДокумента";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

// Процедура очищает реквизиты шапки документа для аналитик, расположенных не в шапке.
Процедура ОчиститьНенужныеАналитикиШапки()
	
	Для каждого Строка Из НастройкаАналитик Цикл
		
		Если Строка.Использование = Перечисления.ИспользованиеАналитик.КлючеваяАналитика Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Использование = Перечисления.ИспользованиеАналитик.Колонка Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Строка.Аналитика.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Строка.Аналитика.ИмяПредопределенныхДанных;
		Если ИмяРеквизита = "Валюта" Тогда
			ИмяРеквизита = "ВалютаДокумента";
		КонецЕсли;
		
		Если Строка.Использование = Перечисления.ИспользованиеАналитик.НеИспользуется
				И ЗначениеЗаполнено(Строка.ЗначениеАналитики) Тогда
			ЭтотОбъект[ИмяРеквизита] = Строка.ЗначениеАналитики;
		Иначе
			ЭтотОбъект[ИмяРеквизита] = неопределено;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура проверяет наличие последующих документов с аналогичными ключевыми реквизитами
Процедура ПроверитьНаличиеДокументовБлокирующихПроведение(Отказ)
	
	Если Документы.ОперативныйПлан.ЕстьПоследующиеДокументы(Ссылка) Тогда
		
		ТекстСообщения = НСтр("ru = 'Существуют более поздние проведенные документы с аналогичными ключевыми аналитиками. Проведение невозможно.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,,,Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет наличие последующих документов с аналогичными ключевыми реквизитами
Процедура ПроверитьВозможностьПроведения(Отказ)
	
	ПроверитьНаличиеДокументовБлокирующихПроведение(Отказ);
	
	// 
	ЭтоЗакупки = Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов;
	Если ЭтоЗакупки И НЕ ВстраиваниеОПКПереопределяемый.КонстантаИспользоватьЦентрализованноеУправлениеЗакупками() Тогда
		
		ТекстСообщения = НСтр("ru = 'Управление закупками отключено. Проведение невозможно.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,,,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСКлючамиПартнеров

// Возвращает структуру полей выбора информации из коллекции для формирования аналитики учета потребностей.
//
// Возвращаемое значение:
//	Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля должно браться из имени ключа.
//		секция идентификации {Организация, Контрагент, Договор, АналитикаУчетаПоПартнерам},
//			все ключи заданы.
//
Функция АналитикаУчетаПоПартнерам_ИменаПолейКоллекцииПоУмолчанию()
	
	ИменаПолей = Новый Структура();
	ИменаПолей.Вставить("Организация",				"Организация");
	ИменаПолей.Вставить("Контрагент",				"Контрагент");
	ИменаПолей.Вставить("Договор",					"Договор");
	ИменаПолей.Вставить("АналитикаУчетаПоПартнерам","АналитикаУчетаПоПартнерам");
	
	Возврат ИменаПолей;
КонецФункции

// Заполняет поле АналитикаУчетаПоПартнерам в коллекции, содержащей Организация, Контрагент, Договор.
//
// Параметры:
//
//	Коллекция - ТабличнаяЧасть - Коллекция, в которой производится заполнение аналитики учета по партнерам.
//
//	ИменаПолей - Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля берется из имени ключа.
//		секция идентификации {Организация, Контрагент, Договор},
//	
//	ПараметрыЗаполнения - Структура - см. метод ПараметрыЗаполненияКлючейАналитики()
//
// Пример 1:
//	ИменаПолей = РегистрыСведений.АналитикаУчетаПоПартнерам.ИменаПолейКоллекцииПоУмолчанию();
//	РегистрыСведений.АналитикаУчетаПоПартнерам.ЗаполнитьВКоллекции(ДвиженияОперации, ИменаПолей);
//
// Пример 2:
//	РегистрыСведений.АналитикаУчетаПоПартнерам.ЗаполнитьВКоллекции(ДвиженияОперации);
//
Процедура АналитикаУчетаПоПартнерам_ЗаполнитьВКоллекции(Коллекция, 
								ИменаПолей = Неопределено, ПараметрыЗаполнения = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = АналитикаУчетаПоПартнерам_ПараметрыЗаполненияКлючейАналитики();
	КонецЕсли;
	
	Если ИменаПолей = Неопределено Тогда
		ИменаПолей = АналитикаУчетаПоПартнерам_ИменаПолейКоллекцииПоУмолчанию();
	КонецЕсли;
	Запрос = Новый Запрос(АналитикаУчетаПоПартнерам_ТекстЗначенияКлючейАналитикиВКоллекции(ИменаПолей));
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.АналитикаУчетаПоПартнерам) Тогда
			Если ПараметрыЗаполнения.СоздаватьВКлючи Тогда
				Если ЗначениеЗаполнено(Выборка.Организация) ИЛИ ЗначениеЗаполнено(Выборка.Контрагент) ИЛИ ЗначениеЗаполнено(Выборка.Договор) Тогда
					КлючАналитики = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Выборка);
				Иначе
					КлючАналитики = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
				КонецЕсли;
			Иначе
				ТекстИсключения = НСтр("ru = 'Ошибка при заполнении ключей в коллекции: есть аналитики, по которым ключи еще не созданы.'");
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам,
					,
					ТекстИсключения);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		Иначе
			КлючАналитики = Выборка.АналитикаУчетаПоПартнерам;
		КонецЕсли;
		Коллекция[Выборка.Индекс][ИменаПолей.АналитикаУчетаПоПартнерам] = КлючАналитики;
		ПараметрыЗаполнения.ИзмененаАналитика = Истина;
	КонецЦикла;
КонецПроцедуры

// Возвращает параметры генерации ключей аналитики. Используется в обработчиках обновления.
// Возвращаемое значение:
//	Структура - Структура содержит поля: ЕстьНеобработанныеКлючи, ИзмененаАналитика, СоздаватьНовыеКлючи.
Функция АналитикаУчетаПоПартнерам_ПараметрыЗаполненияКлючейАналитики()
	Возврат Новый Структура("ИзмененаАналитика,СоздаватьВКлючи", Ложь, Истина);
КонецФункции

Функция АналитикаУчетаПоПартнерам_ТекстЗначенияКлючейАналитикиВКоллекции(ИменаПолей)
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Коллекция.НомерСтроки - 1 КАК Индекс,
		|	&ПолеАналитикаУчета КАК АналитикаУчетаПоПартнерам,
		|	&ПолеОрганизация КАК Организация,
		|	&ПолеКонтрагент КАК Контрагент,
		|	&ПолеДоговор КАК Договор
		|
		|ПОМЕСТИТЬ Коллекция
		|ИЗ &Коллекция КАК Коллекция;
		|
		|ВЫБРАТЬ
		|	Коллекция.Индекс,
		|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
		|	Коллекция.Организация КАК Организация,
		|	Коллекция.Контрагент КАК Контрагент,
		|	Коллекция.Договор КАК Договор
		|ИЗ
		|	Коллекция КАК Коллекция
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО Аналитика.Организация = Коллекция.Организация
		|		И Аналитика.Контрагент = Коллекция.Контрагент
		|		И Аналитика.Договор = Коллекция.Договор
		|ГДЕ
		|	Аналитика.КлючАналитики ЕСТЬ NULL
		|	ИЛИ Аналитика.КлючАналитики <> Коллекция.АналитикаУчетаПоПартнерам
		|	ИЛИ Аналитика.КлючАналитики = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
		|";
	
	// заменим в тексте запроса подставляемые поля из структуры ИменаПолей
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеАналитикаУчета", "Коллекция." + ИменаПолей.АналитикаУчетаПоПартнерам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеОрганизация", "Коллекция." + ИменаПолей.Организация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКонтрагент", "Коллекция." + ИменаПолей.Контрагент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеДоговор", "Коллекция." + ИменаПолей.Договор);
	
	Если ВстраиваниеОПКПереопределяемый.ЭтоЕХ() Тогда
		ТекстДляЗамены = "Коллекция.Организация";
		ТекстЗамены = "ВЫБОР КОГДА Коллекция.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) ИНАЧЕ Коллекция.Организация КОНЕЦ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
		
		ТекстДляЗамены = "Коллекция.Договор КАК Договор";
		ТекстЗамены = ",
			|	ВЫРАЗИТЬ(Коллекция.Контрагент КАК Справочник.Контрагенты).Партнер КАК Партнер,
			|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстДляЗамены + ТекстЗамены);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецЕсли
