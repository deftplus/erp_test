
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	МСФОУХ.ОбновитьУсловноеОформлениеФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДокументыОснованияПараллельногоУчета"
	 И ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		Объект.ДокументыОснования.Очистить();
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(ТекущийОбъект);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументМСФО(Команда)
	МСФОКлиентУХ.СоздатьДокументМСФО(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодробноВНА(Команда)
	
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Истина, "ВНА");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНМА(Команда)
	
	КэшируемыеЗначения.Вставить("ТипВНА", ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
	Элементы.ВНА.ДобавитьСтроку();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Заполнение

&НаКлиенте
Процедура ЗаполнитьИзУчетнойСистемы(Команда)
	
	Если Не МСФОВНАВызовСервераУХ.ИспользоватьДанныеУчетнойСистемы(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("ИсточникЗаполнения", "ДанныеНСБУ");
	МСФОКлиентУХ.ЗаполнитьДокумент(ЭтаФорма, ДанныеЗаполнения, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиДаннымиНСБУ(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиям(Команда)
	
	ДанныеЗаполнения = Новый Структура("ИсточникЗаполнения", "ДокументыОснования");
	МСФОКлиентУХ.ЗаполнитьДокумент(ЭтаФорма, ДанныеЗаполнения, "ВНА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКолонкамНСБУ(Команда)
	ЗаполнитьПоКолонкамНСБУСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиДаннымиМСФО(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиДанными(Команда)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ОбновитьРеквизитыУП(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	

	МСФОКлиентСерверУХ.ОбновитьРеквизитыУП(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВидЗаполненияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);	
	ОчиститьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)

	МСФОКлиентСерверУХ.ОбновитьРеквизитыУП(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументОснованиеНеУказанГиперссылкаНажатие(Элемент)
	
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА"); 
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДобавитьДокументОснованиеНажатие(Элемент)
	
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА"); 
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьСписокДокументовОснований(ЭтаФорма, "ВНА", СтандартнаяОбработка); 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МСФОКлиентУХ.ОткрытьФормуРедактированияМногострочногоТекста(ЭтаФорма, Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТабличнойЧасти

&НаКлиенте
Процедура ОтобратьСтрокиРасхождений(Команда)
	
	Если (Элементы.ВНА.ОтборСтрок = Неопределено) ИЛИ НЕ Элементы.ВНА.ОтборСтрок.Свойство("ЕстьРасхождения") Тогда
		
		Элементы.ВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Истина;
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Ложь;		
		
	Иначе
		
		Элементы.ВНА.ОтборСтрок = Неопределено;
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСтрокиИзменений(Команда)

	Если (Элементы.ВНА.ОтборСтрок = Неопределено) ИЛИ НЕ Элементы.ВНА.ОтборСтрок.Свойство("ЕстьИзменение") Тогда
		
		Элементы.ВНА.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьИзменение", Истина);
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Истина;
		Элементы.ВНАОтобратьСтрокиРасхождений.Пометка = Ложь;
		
	Иначе
		
		Элементы.ВНА.ОтборСтрок = Неопределено;
		Элементы.ВНАОтобратьСтрокиИзменений.Пометка = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеВКолонкеПоВыделенным(Команда)
	МСФОКлиентУХ.УстановитьЗначениеВКолонкеПоВыделеннымСтрокам(ЭтаФорма, "ВНА");	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МСФОКлиентСерверУХ.ОбновитьВыборТипаВНА(ЭтаФорма, НоваяСтрока, Копирование);
	
	Если КэшируемыеЗначения.Свойство("ИспользуютсяТК") И КэшируемыеЗначения.ИспользуютсяТК Тогда
		ТекущаяСтрока.СторнироватьДанныеНСБУ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ВНАВНА.ВыбиратьТип = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ВНАПослеУдаления(Элемент)
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАПередНачаломИзменения(Элемент, Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	МСФОКлиентУХ.ТабличнаяЧастьПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);	
КонецПроцедуры

&НаКлиенте
Процедура ВНАВНАПриИзменении(Элемент)
	ЗаполнитьТекущимиДаннымиСервер(Истина, Истина, Истина, Истина );
КонецПроцедуры

&НаКлиенте
Процедура ВНАГруппаВНАПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(ТекущаяСтрока, ЭтаФорма, "ГруппаВНА");
	
	ТекущаяСтрока.НачислятьАмортизациюМСФО = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ГруппаВНА, "НачислятьАмортизацию");
	
	Если Не ТекущаяСтрока.НачислятьАмортизациюМСФО И Не ТекущаяСтрока.СпособНачисленияАмортизацииМСФО.Пустая() Тогда
		ТекущаяСтрока.СпособНачисленияАмортизацииМСФО = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПараметрыАмортизацииВНАМСФОПриИзменении(Элемент)
	КолонкаИсточник = Прав(Элемент.Имя, СтрДлина(Элемент.Имя)-3); //убираем префикс ТЧ
	МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(Элементы.ВНА.ТекущиеДанные, ЭтаФорма, КолонкаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетПоступленияМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетУчетаМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииНСБУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ВНАСпособНачисленияАмортизацииМСФОПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Занулим СПИ для пропорционального способа расчета.
	Если ТекущаяСтрока.СпособНачисленияАмортизацииМСФО = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции") Тогда
		ТекущаяСтрока.СрокПолезногоИспользованияМСФО = 0;
	Иначе
		// Не изменяем значение СПИ.
	КонецЕсли;
	
	ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ВНАПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МСФОКлиентСерверУХ.ОбновитьВидимостьСубконтоГруппыПодробно(ЭтаФорма, ТекущаяСтрока, "ВНА");
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(ЭтаФорма, ТекущаяСтрока, "ВНА");
		
	ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока);
	МСФОКлиентСерверУХ.ВидимостьПодробно(ЭтаФорма, Ложь, "ВНА");
		
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетПоступленияСубконто1МСФОПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетУчетаНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетАмортизацииНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
КонецПроцедуры

&НаКлиенте
Процедура ВНАСчетПоступленияНСБУПриИзменении(Элемент)
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ВНА");
		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ЗаполнитьСчетаМСФОИзТрансляции", Новый Структура("СчетПоступленияМСФО", "СчетПоступленияНСБУ"));
	СтруктураДействий.Вставить("ЗаполнитьДоступностьПоИменамСубконто", КэшируемыеЗначения.ИменаСубконто);
		
	КэшДокумента = Новый Структура("ШаблонТрансляции,ИменаСубконто", КэшируемыеЗначения.ШаблонТрансляции, КэшируемыеЗначения.ИменаСубконто);
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшДокумента); 
	
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элементы.ВНАСчетПоступленияМСФО, "ВНА");
		
КонецПроцедуры

&НаКлиенте
Процедура ВНАОбъектУчетаИсточникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьИсточникГруппаВНАНаДату", ПолучитьПараметрыИсточника(Объект.Дата));	
				
	КэшДокумента = Новый Структура;
	КэшДокумента.Вставить("ВидУчетаМСФО", 	КэшируемыеЗначения.РежимыЗаполнения.МСФО);
	КэшДокумента.Вставить("Сценарий", 		Объект.Сценарий);
	КэшДокумента.Вставить("Организация", 	Объект.Организация);
	
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшДокумента); 
	
КонецПроцедуры

#КонецОбласти
    
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Общие

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)
	
	Если ЭтаФорма.КэшируемыеЗначения = Неопределено Тогда
		ЭтаФорма.КэшируемыеЗначения = Новый Структура;	
	КонецЕсли;
	
	ЭтаФорма.КэшируемыеЗначения.Вставить("СпособыНачисленияАмортизации", 	МСФОВНАВызовСервераУХ.ПолучитьВозможныеСпособыНачисленияАмортизации());
	ЭтаФорма.КэшируемыеЗначения.Вставить("ИменаСубконто", 					Документы.ВводВНАВЭксплуатациюМСФО.ПолучитьИменаСубконто());
	ЭтаФорма.КэшируемыеЗначения.Вставить("ПоляВместоСкрытыхСубконто",		Новый Структура("СчетПоступленияСубконто3МСФО", "СчетПоступленияМСФО"));
	
	МСФОУХ.ПодготовитьФормуНаСервере(ЭтаФорма);
	
	СчетаГруппыПодробно = МСФОУХ.ПолучитьСчетаГруппыПодобно(ЭтаФорма, "ВНА");
	ЭтаФорма.КэшируемыеЗначения.Вставить("СчетаГруппыПодробно", СчетаГруппыПодробно);
	МСФОКлиентСерверУХ.ЗаполнитьНачислятьАмортизациюМСФО(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	МСФОКлиентСерверУХ.УправлениеФормой(Форма, , Ложь);
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовСтрокиТЧ

&НаСервере
Процедура ЗаполнитьПоКолонкамНСБУСервер()

	МСФОУХ.ЗаполнитьПоКолонкамНСБУСервер(ЭтаФорма);

КонецПроцедуры    

#КонецОбласти

#Область ЗаполнениеТЧ

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДокумент(РезультатВопроса = Неопределено, ДанныеЗаполнения) Экспорт
	
	Если (РезультатВопроса <> Неопределено) И (РезультатВопроса <> КодВозвратаДиалога.Да) Тогда
		Возврат;	
	КонецЕсли;
    
    ЗаполнитьДокумент(ДанныеЗаполнения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	МСФОУХ.ЗаполнитьПоКолонкамНСБУСервер(ЭтаФорма);
	МСФОКлиентСерверУХ.ОбновитьВидимостьДокументыОснования(ЭтаФорма);
	МСФОКлиентСерверУХ.ЗаполнитьНачислятьАмортизациюМСФО(ЭтаФорма);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицы()

	МСФОУХ.ОчиститьТаблицы(ЭтаФорма);

КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьТекущимиДаннымиСервер(ЗаполнитьРеквизиты = Ложь, ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь, СтрокаВНА = Ложь) 
	
	Если НЕ СтрокаВНА Тогда		
		СтрокиДляЗаполнения = Объект.ВНА;
	Иначе
		СтрокиДляЗаполнения = Новый Массив;
		СтрокиДляЗаполнения.Добавить(Объект.ВНА.НайтиПоИдентификатору(Элементы.ВНА.ТекущаяСтрока));	
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ЗаполнитьРеквизиты,ЗаполнитьНСБУ,ЗаполнитьМСФО", ЗаполнитьРеквизиты, ЗаполнитьНСБУ, ЗаполнитьМСФО);
	Документы[ЭтаФорма.КэшируемыеЗначения.МетаданныеДокумента.Имя].ЗаполнитьСтроки(СтрокиДляЗаполнения, ЭтаФорма, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыИсточника(ДатаОперации)

	РеквизитыГруппаВНА = Новый Структура;
	РеквизитыГруппаВНА.Вставить("СчетПоступленияМСФО", 			"СчетУчетаПервоначальнойСтоимости");
	РеквизитыГруппаВНА.Вставить("СчетПоступленияСубконто1МСФО", "СчетУчетаПервоначальнойСтоимостиСубконто1");
	РеквизитыГруппаВНА.Вставить("СчетПоступленияСубконто2МСФО", "СчетУчетаПервоначальнойСтоимостиСубконто2");
	РеквизитыГруппаВНА.Вставить("СчетПоступленияСубконто3МСФО", "СчетУчетаПервоначальнойСтоимостиСубконто3");
	
	Возврат Новый Структура("ЗависимостиРеквизитов,Дата", РеквизитыГруппаВНА, ДатаОперации);
	
КонецФункции

&НаКлиенте
Функция ПолучитьРеквизитыПараметровАмортизации(РеквизитыМСФО = Истина)

	Результат = Новый Структура;
	
	Если РеквизитыМСФО = Истина Тогда
		
		Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскоренияМСФО");
		Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработкиМСФО");
		Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАОбъемВыработкиМСФО");
		Результат.Вставить("ПрофильРаспределения", 			"ВНАСпособОтраженияРасходовПоАмортизацииМСФО");
		
	Иначе
		
		Результат.Вставить("КоэффициентУскорения", 			"ВНАКоэффициентУскоренияНСБУ");
		Результат.Вставить("ПараметрВыработки", 			"ВНАПараметрВыработкиНСБУ");
		Результат.Вставить("ПредполагаемыйОбъемПродукции", 	"ВНАОбъемВыработкиНСБУ");
		Результат.Вставить("ПрофильРаспределения", 			"ВНАСпособОтраженияРасходовПоАмортизацииНСБУ");
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьПараметровАмортизации(ТекущаяСтрока)
	
	МСФОКлиентСерверУХ.ОбновитьДоступностьЗависимыхРеквизитов(ЭтаФорма, ТекущаяСтрока, "ВНА");
	
	МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
			ЭтаФорма, 
			ТекущаяСтрока.СпособНачисленияАмортизацииНСБУ, 
			ПолучитьРеквизитыПараметровАмортизации(Ложь),
			КэшируемыеЗначения.СпособыНачисленияАмортизации);
			
	//МСФОКлиентСерверУХ.ОбновитьОтображениеПараметровАмортизации(
	//		ЭтаФорма, 
	//		ТекущаяСтрока.СпособНачисленияАмортизацииМСФО, 
	//		ПолучитьРеквизитыПараметровАмортизации(Истина),
	//		КэшируемыеЗначения.СпособыНачисленияАмортизации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти