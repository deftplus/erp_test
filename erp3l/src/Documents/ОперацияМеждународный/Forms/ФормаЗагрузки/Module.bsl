
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	ПланСчетовПоУмолчанию = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	
	ИнициализироватьПараметрыЗагрузки();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьПроводки(Команда)
	
	Модифицированность = Ложь;
	Если ЗагрузитьПроводкиСервер() Тогда
		Структура = Новый Структура("АдресПроводокВХранилище", АдресПроводокВХранилище);
		ОповеститьОВыборе(Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗагрузитьПроводкиСервер()
	
	НомерСтроки = 2;
	ЗагрузкаСпискаДокументов = НЕ ПараметрыЗагрузки.ЗагрузкаВДокумент;
	ПоляЗагрузки = ПараметрыЗагрузки.Поля;
	СтрокаЗаполнена = СтрокаЗаполнена(ТабличныйДокумент, НомерСтроки);
	ЗагруженоБезОшибок = Истина;
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	
	ОбъектДокумента = Неопределено;
	ДатаДокумента = Неопределено;
	ОрганизацияДокумента = Неопределено;
	ПланСчетовДокумента = Неопределено;
	Проводки = Неопределено;
	Если ПараметрыЗагрузки.ЗагрузкаВДокумент Тогда
		ДатаДокумента = ПараметрыЗагрузки.ДатаДокумента;
		ПланСчетовДокумента = ПараметрыЗагрузки.ПланСчетов;
		ОрганизацияДокумента = ПараметрыЗагрузки.Организация;
		Проводки = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().Выгрузить();
	КонецЕсли;
	
	// Подготовим набор записей
	Пока СтрокаЗаполнена Цикл
		
		ДанныеПроводки = Неопределено;
		Попытка
			// Прочитаем данные строки графика
			ДанныеПроводки = Новый Структура();
			Для НомерКолонки = 1 По ПоляЗагрузки.Количество() Цикл
				
				Поле = ПоляЗагрузки[НомерКолонки-1];
				ТекстЯчейки = ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки);
				
				Если ПустаяСтрока(ТекстЯчейки) И Поле <> "ТипПроводки" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Поле = "Период" Тогда
					ЗначениеПоля = ТекстВДату(ТекстЯчейки, НомерСтроки, Поле);
				
				ИначеЕсли Поле = "ПланСчетов" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя(), ТекстЯчейки);
						
				ИначеЕсли Поле = "Организация" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.Организации.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "СчетДт" Тогда
					
					ДополнительныйОтбор = Новый Структура();
					Если ДанныеПроводки.Свойство("ПланСчетов") И ЗначениеЗаполнено(ДанныеПроводки.ПланСчетов) Тогда
						ДополнительныйОтбор.Вставить("ПланСчетов", ДанныеПроводки.ПланСчетов);
					Иначе
						ДополнительныйОтбор.Вставить("ПланСчетов", ?(ЗначениеЗаполнено(ПланСчетовДокумента), ПланСчетовДокумента, ПланСчетовПоУмолчанию));
					КонецЕсли;
					
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.ПланыСчетов.Международный.ПолноеИмя(),ТекстЯчейки, ДополнительныйОтбор);
					
				ИначеЕсли Поле = "СубконтоДт1" Тогда
					ЗначениеПоля = НайтиЗначениеСубконто(ДанныеПроводки.СчетДт,1, ТекстЯчейки);
					
				ИначеЕсли Поле = "СубконтоДт2" Тогда
					ЗначениеПоля = НайтиЗначениеСубконто(ДанныеПроводки.СчетДт,2, ТекстЯчейки);
					
				ИначеЕсли Поле = "СубконтоДт3" Тогда
					ЗначениеПоля = НайтиЗначениеСубконто(ДанныеПроводки.СчетДт,3, ТекстЯчейки);
					
				ИначеЕсли Поле = "СчетКт" Тогда
					
					ДополнительныйОтбор = Новый Структура();
					Если ДанныеПроводки.Свойство("ПланСчетов") И ЗначениеЗаполнено(ДанныеПроводки.ПланСчетов) Тогда
						ДополнительныйОтбор.Вставить("ПланСчетов", ДанныеПроводки.ПланСчетов);
					Иначе
						ДополнительныйОтбор.Вставить("ПланСчетов", ?(ЗначениеЗаполнено(ПланСчетовДокумента), ПланСчетовДокумента, ПланСчетовПоУмолчанию));
					КонецЕсли;
					
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.ПланыСчетов.Международный.ПолноеИмя(),ТекстЯчейки);
					
				ИначеЕсли Поле = "СубконтоКт1" Тогда
					ЗначениеПоля = НайтиЗначениеСубконто(ДанныеПроводки.СчетКт,1, ТекстЯчейки);
					
				ИначеЕсли Поле = "СубконтоКт2" Тогда
					ЗначениеПоля = НайтиЗначениеСубконто(ДанныеПроводки.СчетКт,2, ТекстЯчейки);
					
				ИначеЕсли Поле = "СубконтоКт3" Тогда
					ЗначениеПоля = НайтиЗначениеСубконто(ДанныеПроводки.СчетКт,3, ТекстЯчейки);
					
				ИначеЕсли Поле = "ВалютаДт" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.Валюты.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "ВалютаКт" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.Валюты.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "ПодразделениеДт" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "ПодразделениеКт" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "НаправлениеДеятельностиДт" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "НаправлениеДеятельностиКт" Тогда
					ЗначениеПоля = НайтиЗначениеПоля(
						Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя(), ТекстЯчейки);
					
				ИначеЕсли Поле = "ТипПроводки" Тогда
					Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
						ЗначениеПоля = Перечисления.ТипыПроводокМеждународныйУчет[ТекстЯчейки];
					КонецЕсли;
					
				ИначеЕсли Поле = "Содержание" Тогда
					ЗначениеПоля = ТекстЯчейки;
					
				Иначе
					ЗначениеПоля = ТекстВЧисло(ТекстЯчейки, НомерСтроки, Поле);
					
				КонецЕсли;
				ДанныеПроводки.Вставить(Поле,ЗначениеПоля);
				
			КонецЦикла;// по колонкам таблицы загрузки
			
		Исключение
			ШаблонТекста = НСтр("ru = 'Строка №%1 колонка ""%2"" - ошибка преобразования значения ""%3""
								|Строка не загружена по причине';
								|en = 'Row %1, column %2: conversion error for value ""%3"".
								|The row is not imported. Reason:'") + ": ";
			Текст = СтрШаблон(ШаблонТекста, НомерСтроки, Поле, ТекстЯчейки);
			Текст = Текст + Символы.ПС + Символы.Таб + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			ЗагруженоБезОшибок = Ложь;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ДанныеПроводки) Тогда
			
			Если ЗагрузкаСпискаДокументов Тогда
				
				Если (ДанныеПроводки.Свойство("Организация") И ОрганизацияДокумента <> ДанныеПроводки.Организация) 
					ИЛИ (ДанныеПроводки.Свойство("ПланСчетов") И ПланСчетовДокумента <> ДанныеПроводки.ПланСчетов)
					ИЛИ ОбъектДокумента = Неопределено Тогда
					
					Если ОбъектДокумента <> Неопределено Тогда
						ОбъектДокумента.Движения.Международный.Загрузить(Проводки);
						ОбъектДокумента.Движения.Международный.Записывать = Истина;
						ОбъектДокумента.Записать();
					КонецЕсли;
					
					ДатаДокумента = ДанныеПроводки.Период;
					Если ДанныеПроводки.Свойство("Организация") Тогда
						ОрганизацияДокумента = ДанныеПроводки.Организация;
					Иначе
						ОрганизацияДокумента = ОрганизацияПоУмолчанию;
					КонецЕсли;
					Если ДанныеПроводки.Свойство("ПланСчетов") Тогда
						ПланСчетовДокумента = ДанныеПроводки.ПланСчетов;
					Иначе
						ПланСчетовДокумента = ПланСчетовПоУмолчанию;
					КонецЕсли;
					
					ОбъектДокумента = Документы.ОперацияМеждународный.СоздатьДокумент();
					ОбъектДокумента.Дата = ДатаДокумента;
					ОбъектДокумента.Организация = ОрганизацияДокумента;
					ОбъектДокумента.ПланСчетов = ПланСчетовДокумента;
					ОбъектДокумента.Записать();
					
					Проводки = ОбъектДокумента.Движения.Международный.Выгрузить();
				КонецЕсли;
				
				Если НЕ ОбъектДокумента.ВводитьПериодПоСтрокам И НачалоДня(ДатаДокумента) <> НачалоДня(ДанныеПроводки.Период) Тогда
					ОбъектДокумента.ВводитьПериодПоСтрокам = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяПроводка = Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПроводка, ДанныеПроводки);
			Если Не ЗначениеЗаполнено(НоваяПроводка.Организация) Тогда
				НоваяПроводка.Организация = ?(ЗначениеЗаполнено(ОрганизацияДокумента), ОрганизацияДокумента, ОрганизацияПоУмолчанию);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяПроводка.ПланСчетов) Тогда
				НоваяПроводка.ПланСчетов = ?(ЗначениеЗаполнено(ПланСчетовДокумента), ПланСчетовДокумента, ПланСчетовПоУмолчанию);
			КонецЕсли;
			ЗаполнитьСубконто(НоваяПроводка, ДанныеПроводки.СчетДт);
			ЗаполнитьСубконто(НоваяПроводка, ДанныеПроводки.СчетКт, Ложь);
			ЗаполнитьСуммы(НоваяПроводка, КэшКурсовВалют, ДатаДокумента);
			НоваяПроводка.Активность = Ложь;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		Попытка
			СтрокаЗаполнена = СтрокаЗаполнена(ТабличныйДокумент, НомерСтроки);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;// по строкам таблицы загрузки
	
	Если ЗагрузкаСпискаДокументов И ОбъектДокумента <> Неопределено Тогда
		ОбъектДокумента.Движения.Международный.Загрузить(Проводки);
		ОбъектДокумента.Движения.Международный.Записывать = Истина;
		ОбъектДокумента.Записать();
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ЗагрузкаВДокумент Тогда
		АдресПроводокВХранилище = ПоместитьВоВременноеХранилище(Проводки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ЗагруженоБезОшибок;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПараметрыЗагрузки()
	
	ПараметрыЗагрузки = Новый Структура("ЗагрузкаВДокумент, ДатаДокумента, ПланСчетов, Организация", Ложь);
	Если Параметры.Свойство("Организация") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки, Параметры);
		ПараметрыЗагрузки.ЗагрузкаВДокумент = Истина;
	КонецЕсли;
	
	ИспользуетсяУчетПоНаправлениям = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	ОрганизацияЗаполняется = НЕ ПараметрыЗагрузки.ЗагрузкаВДокумент И НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию);
	ПланСчетовЗаполняется = НЕ ПараметрыЗагрузки.ЗагрузкаВДокумент И НЕ ЗначениеЗаполнено(ПланСчетовПоУмолчанию);
	
	ПоляЗагрузки = Новый Массив;
	ПоляЗагрузки.Добавить("Период");
	Если ПланСчетовЗаполняется Тогда
		ПоляЗагрузки.Добавить("ПланСчетов");
	КонецЕсли;
	Если ОрганизацияЗаполняется Тогда
		ПоляЗагрузки.Добавить("Организация");
	КонецЕсли;
	ПоляЗагрузки.Добавить("СчетДт");
	ПоляЗагрузки.Добавить("СубконтоДт1");
	ПоляЗагрузки.Добавить("СубконтоДт2");
	ПоляЗагрузки.Добавить("СубконтоДт3");
	ПоляЗагрузки.Добавить("СчетКт");
	ПоляЗагрузки.Добавить("СубконтоКт1");
	ПоляЗагрузки.Добавить("СубконтоКт2");
	ПоляЗагрузки.Добавить("СубконтоКт3");
	ПоляЗагрузки.Добавить("ВалютаДт");
	ПоляЗагрузки.Добавить("ВалютнаяСуммаДт");
	ПоляЗагрузки.Добавить("КоличествоДт");
	ПоляЗагрузки.Добавить("ВалютаКт");
	ПоляЗагрузки.Добавить("ВалютнаяСуммаКт");
	ПоляЗагрузки.Добавить("КоличествоКт");
	ПоляЗагрузки.Добавить("Сумма");
	ПоляЗагрузки.Добавить("СуммаПредставления");
	ПоляЗагрузки.Добавить("ПодразделениеДт");
	ПоляЗагрузки.Добавить("ПодразделениеКт");
	Если ИспользуетсяУчетПоНаправлениям Тогда
		ПоляЗагрузки.Добавить("НаправлениеДеятельностиДт");
		ПоляЗагрузки.Добавить("НаправлениеДеятельностиКт");
	КонецЕсли;
	ПоляЗагрузки.Добавить("ТипПроводки");
	ПоляЗагрузки.Добавить("Содержание");
	
	ПараметрыЗагрузки.Вставить("Поля",ПоляЗагрузки);
	
	// Инициализируем табличный документ
	ТабличныйДокумент.Очистить();
	
	МакетШаблона = Документы.ОперацияМеждународный.ПолучитьМакет("МакетЗагрузкиПроводок");
	ОбластьКолонки = МакетШаблона.ПолучитьОбласть("Проводки");
	ТабличныйДокумент.Присоединить(ОбластьКолонки);
	Если НЕ ИспользуетсяУчетПоНаправлениям Тогда
		НомерКолонкиНаправления = "C20";
		КолонкаНаправления = ТабличныйДокумент.Область(НомерКолонкиНаправления);
		ТабличныйДокумент.УдалитьОбласть(КолонкаНаправления,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КолонкаНаправления = ТабличныйДокумент.Область(НомерКолонкиНаправления);
		ТабличныйДокумент.УдалитьОбласть(КолонкаНаправления,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	Если НЕ ОрганизацияЗаполняется Тогда
		КолонкаОрганизация = ТабличныйДокумент.Область("C3");
		ТабличныйДокумент.УдалитьОбласть(КолонкаОрганизация,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	Если НЕ ПланСчетовЗаполняется Тогда
		КолонкаОрганизация = ТабличныйДокумент.Область("C2");
		ТабличныйДокумент.УдалитьОбласть(КолонкаОрганизация,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

#Область Прочее

&НаСервере
Функция ТекстВДату(Знач СтроковоеЗначение, НомерСтроки, ИмяКолонки, Разделитель = ".")
	
	Попытка
		Результат = Дата(СтроковоеЗначение)
	Исключение
		ТекстДаты = Лев(СокрЛП(СтроковоеЗначение),10);
		Поз = СтрНайти(ТекстДаты," ");
		Если Поз = 9 Тогда
			ТекстДаты = Лев(СокрЛП(СтроковоеЗначение),8);
		КонецЕсли;
		Цифры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстДаты,Разделитель);
		Попытка
			Результат = ?(СтрДлина(Цифры[2]) = 2, "20"+Цифры[2], Цифры[2]) 
						+ Формат(Цифры[1], "ЧЦ=2; ЧВН=;") 
						+ Формат(Цифры[0], "ЧЦ=2; ЧВН=;");
			Результат = Дата(Результат);
		Исключение
			СообщитьОбОшибкеПреобразования(НомерСтроки, ИмяКолонки, СтроковоеЗначение);
		КонецПопытки;
	КонецПопытки;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстВЧисло(СтроковоеЗначение, НомерСтроки, ИмяКолонки)
	
	Если ПустаяСтрока(СтроковоеЗначение) ИЛИ СтроковоеЗначение = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Попытка
		Результат = Число(СтрЗаменить(СтроковоеЗначение," ",""));
	Исключение
		СообщитьОбОшибкеПреобразования(НомерСтроки, ИмяКолонки, СтроковоеЗначение);
	КонецПопытки;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСубконто(Проводка, Счет, ЭтоДебет = Истина)
	
	СторонаСчета = ?(ЭтоДебет, "Дт","Кт");
	Если ЗначениеЗаполнено(Счет) Тогда
		СвойстваСчета = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет);
		Для Сч = 1 По 3 Цикл
			Проводка["ВидСубконто" + СторонаСчета + Строка(Сч)] = СвойстваСчета["ВидСубконто" + Строка(Сч)];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммы(Проводка, КэшКурсов, ДатаДокумента)
	
	Если Проводка.Сумма <> 0 И Проводка.СуммаПредставления <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКурса = Проводка.Период;
	Если НЕ ЗначениеЗаполнено(ДатаКурса) Тогда
		ДатаКурса = ДатаДокумента;
	КонецЕсли;
	Валюта = Неопределено;
	ВалютнаяСумма = ВалютнаяСуммаПроводки(Проводка, Валюта);
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Проводка.Организация);
	УчетныеВалюты = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(Проводка.ПланСчетов, Проводка.Организация);
	КурсФункцВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(УчетныеВалюты.Функциональная, ДатаКурса, КэшКурсов, ВалютаРеглУчета);
	КурсВалютыПред  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(УчетныеВалюты.Представления, ДатаКурса, КэшКурсов, ВалютаРеглУчета);
	
	Если Проводка.Сумма = 0 И КурсФункцВалюты <> 0 Тогда
		Если ВалютнаяСумма <> 0 Тогда
			КурсВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(Валюта, ДатаКурса, КэшКурсов);
			Проводка.Сумма = ВалютнаяСумма * КурсВалюты / КурсФункцВалюты;
		ИначеЕсли Проводка.СуммаПредставления <> 0 Тогда
			Проводка.Сумма = Проводка.СуммаПредставления * КурсВалютыПред / КурсФункцВалюты;
		КонецЕсли;
	КонецЕсли;
	
	Если Проводка.СуммаПредставления = 0 И КурсВалютыПред <> 0 Тогда
		Проводка.СуммаПредставления = Проводка.Сумма * КурсФункцВалюты / КурсВалютыПред;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВалютнаяСуммаПроводки(Проводка, Валюта)
	
	Если ЗначениеЗаполнено(Проводка.ВалютнаяСуммаДт) Тогда
		Валюта = Проводка.ВалютаДт;
		Возврат Проводка.ВалютнаяСуммаДт;
	ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютнаяСуммаКт) Тогда
		Валюта = Проводка.ВалютаКт;
		Возврат Проводка.ВалютнаяСуммаКт;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиЗначениеСубконто(Счет,НомерСубконто, ТекстЗначения)
	
	Для Каждого ТипСубконто Из Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто.ТипЗначения.Типы() Цикл
		
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипСубконто);
		ПолноеИмя = Метаданные.НайтиПоТипу(ТипСубконто).ПолноеИмя();
		ИмяОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя,".")[1];
		
		Если ВидОбъекта = "Перечисление" Тогда
			ТекстЗначенияПеречисления = СтрЗаменить(ТРег(ТекстЗначения), " ", "");
			ЗначениеПоля = Перечисления[ИмяОбъекта][ТекстЗначенияПеречисления];
		Иначе
			ЗначениеПоля = НайтиЗначениеПоля(ПолноеИмя, ТекстЗначения);;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеПоля;
	
КонецФункции

&НаСервере
Функция НайтиЗначениеПоля(ПолноеИмяОбъекта,ТекстЗначения, ДополнительныйОтбор = Неопределено)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	МассивТекстовЗапроса = Новый Массив;
	Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
		МассивТекстовЗапроса.Добавить(
			"ВЫБРАТЬ
			|	1 КАК Приоритет,
			|	Таблица.Ссылка
			|ИЗ
			|	&ПолноеИмяОбъекта КАК Таблица
			|ГДЕ
			|	Таблица.Наименование = &ТекстЗначения
			|	И &ДополнительныйОтбор
			|");
	КонецЕсли;
	Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
		МассивТекстовЗапроса.Добавить(
			"ВЫБРАТЬ
			|	2 КАК Приоритет,
			|	Таблица.Ссылка
			|ИЗ
			|	&ПолноеИмяОбъекта КАК Таблица
			|ГДЕ
			|	Таблица.Код = &ТекстЗначения
			|	И &ДополнительныйОтбор
			|");
	КонецЕсли;
	
	ТекстЗапроса = 
		СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())
		+ Символы.ПС
		+ "УПОРЯДОЧИТЬ ПО Приоритет";
	
	
	Запрос = Новый Запрос;
	Если ДополнительныйОтбор <> Неопределено Тогда
		МассивДополнительныйОтбор = Новый Массив;
		Для каждого КлючИЗначение Из ДополнительныйОтбор Цикл
			МассивДополнительныйОтбор.Добавить(СтрШаблон("Таблица.%1 = &%1", КлючИЗначение.Ключ));
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ТекстДополнительныйОтбор = СтрСоединить(МассивДополнительныйОтбор, Символы.ПС + "И" + " ");
	Иначе
		ТекстДополнительныйОтбор = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ТекстДополнительныйОтбор);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекстЗначения", ТекстЗначения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки)
	
	АдресЯчейки = СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧН=0; ЧГ=0"), Строка(НомерКолонки));
	Возврат СокрЛП(ТабличныйДокумент.Область(АдресЯчейки).Текст);
	
КонецФункции

&НаСервере
Функция СтрокаЗаполнена(ТабличныйДокумент, НомерСтроки)
	
	Возврат НЕ (ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("ВалютнаяСуммаДт")))
					И ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("ВалютаДт"))))
			ИЛИ НЕ (ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("ВалютнаяСуммаКт")))
						И ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("ВалютаКт"))))
			ИЛИ НЕ ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("Сумма")))
			ИЛИ НЕ ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("СуммаПредставления")))
			ИЛИ НЕ ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("КоличествоДт")))
			ИЛИ НЕ ПустаяСтрока(ТекстЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки("КоличествоКт")));
	
КонецФункции

&НаСервере
Процедура СообщитьОбОшибкеПреобразования(НомерСтроки, ИмяКолонки, СтроковоеЗначение)
	
	ШаблонТекста = НСтр("ru = 'Строка №%1 колонка ""%2"" - ошибка преобразования значения ""%3""
						|Значение ячейки не загружено!';
						|en = 'Row No.%1 column ""%2"" - conversion error of value ""%3""
						|Cell value is not imported.'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, НомерСтроки, ИмяКолонки, СтроковоеЗначение);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

&НаСервере
Функция НомерКолонки(ИмяПоля)
	
	Возврат ПараметрыЗагрузки.Поля.Найти(ИмяПоля)+1;
	
КонецФункции

#КонецОбласти

#КонецОбласти
