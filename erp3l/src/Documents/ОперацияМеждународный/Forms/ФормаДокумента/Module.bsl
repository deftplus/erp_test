
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийПланСчетов = Объект.ПланСчетов;
		 ОбновитьЗаголовкиСумм();
	КонецЕсли;
	
	Элементы.Период.Видимость = Объект.ВводитьПериодПострокам;
	
	МеждународныйУчетОбщегоНазначения.УстановитьЗаголовкиПодразделения(Элементы.ПодразделениеДт, Элементы.ПодразделениеКт);
	
	ТекстВвестиДокумент = НСтр("ru = 'Ввести документ';
								|en = 'Enter document'");
	
	ФлажокСписок = Объект.ЗаполнениеДвижений.Количество() > 1;
	МассивТиповДокумента = Новый Массив;
	Для каждого Тип Из Метаданные.РегистрыБухгалтерии.Международный.СтандартныеРеквизиты.Регистратор.Тип.Типы() Цикл
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Метаданные.НайтиПоТипу(Тип)) Тогда
			МассивТиповДокумента.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	МассивТиповДокумента.Добавить(Тип("Строка"));
	НовыйТип = Новый ОписаниеТипов(МассивТиповДокумента);
	Элементы.СторнируемыйДокумент.ОграничениеТипа = НовыйТип;

	ОбновитьСпособАннулированияПроводок();
	СформироватьЗаголовкиАннулирующихКоманд();
	
	ОбновлениеОтображения();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ТекущийПланСчетов = Объект.ПланСчетов;
	
	ОбновитьЗаголовкиСумм();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТипыСвязанныеСОрганизацией = НастройкаСчетовУчетаСервер.ТипыСвязанныеСОрганизацией();
	
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(Объект.Движения.Международный);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("АдресПроводокВХранилище") Тогда
			ЗагрузитьПроводкиИзХранилища(ВыбранноеЗначение.АдресПроводокВХранилище);
			Модифицированность = Истина;
		ИначеЕсли ВыбранноеЗначение.Свойство("ШаблонОперации") Тогда
			ИменаШаблонов = ОбоработкаВыбораШаблонаОперацииСервер(ВыбранноеЗначение.ШаблонОперации);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Добавлены типовые проводки:';
												|en = 'Standard accounting entries are added:'"),,ИменаШаблонов,БиблиотекаКартинок.Информация32);
		КонецЕсли;
	ИначеЕсли Элементы.СторнируемыйДокумент.ОграничениеТипа.СодержитТип(ТипЗнч(ВыбранноеЗначение)) Тогда
		СторнируемыйДокумент = ВыбранноеЗначение;
		ЗагрузитьПроводкиДляСторнирования(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(Объект.Движения.Международный);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ ФлажокСписок И ЗначениеЗаполнено(СторнируемыйДокумент) И ТипЗнч(СторнируемыйДокумент) <> Тип("Строка") Тогда
		ТекущийОбъект.ЗаполнениеДвижений.Очистить();
		НоваяСтрока = ТекущийОбъект.ЗаполнениеДвижений.Добавить();
		НоваяСтрока.Документ = СторнируемыйДокумент;
	КонецЕсли;
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ОбновитьСпособАннулированияПроводок();
	СформироватьЗаголовкиАннулирующихКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводитьПериодПоСтрокамПриИзменении(Элемент)
	
	Элементы.Период.Видимость = Объект.ВводитьПериодПострокам;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЕстьДвижения = Объект.Движения.Международный.Количество() > 0;

	Если ЕстьДвижения Тогда
		ТекстВопроса = НСтр("ru = 'Указанные в проводках расчетные счета, договоры, подразделения, документы будут очищены. Продолжить?';
							|en = 'Current accounts, contracts, business units, documents specified in the entries will be cleared. Continue?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	ОбновитьЗаголовкиСумм();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбновитьСпособАннулированияПроводок();
	СформироватьЗаголовкиАннулирующихКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	Если ТекущийПланСчетов <> Объект.ПланСчетов И Объект.Движения.Международный.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииПланаСчетовВопрос", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена';
														|en = 'Cancel'"));
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Таблица проводок будет очищена. Продолжить?';
												|en = 'Postings table will be cleared. Continue?'"), Кнопки);
	Иначе
		ТекущийПланСчетов = Объект.ПланСчетов;
		ПланСчетовПриИзмененииНаСервере();
	КонецЕсли;
	
	ОбновитьЗаголовкиСумм();
	
КонецПроцедуры

&НаСервере
Процедура ПланСчетовПриИзмененииНаСервере()
	
	ОбновитьСпособАннулированияПроводок();
	СформироватьЗаголовкиАннулирующихКоманд();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовЗаполнениеДвижений

&НаКлиенте
Процедура ЗаполнениеДвиженийДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаполнениеДвижений.ТекущиеДанные;
	Элемент.ВыбиратьТип = НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДвижениямеждународный

&НаКлиенте
Процедура ДвиженияМеждународныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ДвиженияМеждународный.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущаяСтрока.Активность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДвиженияМеждународный.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконтоСчета(ТекущиеДанные.СчетДт, "Дт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДвиженияМеждународный.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконтоСчета(ТекущиеДанные.СчетКт, "Кт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДвиженияМеждународный.ТекущиеДанные;
	ТекущаяСтрока.СуммаПредставления = РассчитатьСуммуПредставления(Объект.ПланСчетов, Объект.Организация, ТекущаяСтрока.Сумма, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДтПриИзменении(Элемент)
	
	ВалютаПриИзменении("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКтПриИзменении(Элемент)
	
	ВалютаПриИзменении("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаДтПриИзменении(Элемент)
	
	ВалютаПриИзменении("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаКтПриИзменении(Элемент)
	
	ВалютаПриИзменении("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто("Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто("Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто("Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто("Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто("Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто("Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияМеждународныйПередНачаломИзменения(Элемент, Отказ)
	ИзменитьПараметрыВыбораПолейСубконто();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьПроводки(Команда)
	
	НачатьЗагрузкуПроводок(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроводкиСторно(Команда)
	
	НачатьЗагрузкуПроводок(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШаблону(Команда)
	
	
	ПараметрыФормы = Новый Структура("Объект",Объект);
	Если ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		ОтборПоПлануСчетов = Новый Структура("ПланСчетов", Объект.ПланСчетов);
		ПараметрыФормы.Вставить("Отбор", ОтборПоПлануСчетов);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТиповыеОперацииМеждународныйУчет.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// оформление отрицательных сумм красным
	ОформлениеОтрицательныхСумм("Сумма");
	ОформлениеОтрицательныхСумм("СуммаПредставления");
	ОформлениеОтрицательныхСумм("ВалютнаяСуммаДт");
	ОформлениеОтрицательныхСумм("ВалютнаяСуммаКт");
	
	// оформление полей "Субконто1", ... и т.д.
	МеждународныйУчетОбщегоНазначения.УстановитьОформлениеПроводок(УсловноеОформление, "Объект.Движения.Международный");
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеОтрицательныхСумм(ИмяПоля)

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Движения.Международный."+ИмяПоля);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);

КонецПроцедуры

&НаСервере
Процедура ОбновлениеОтображения()
	
	Элементы.ГруппаСторнироватьСписок.Видимость = Ложь;
	Если Объект.ЗаполнениеДвижений.Количество() > 1 Тогда
		Элементы.ГруппаСторнироватьСписок.Видимость = Истина;
		Элементы.СтраницыСторнирования.ТекущаяСтраница = Элементы.ГруппаСторнироватьСписок;
		СторнируемыйДокумент = Неопределено;
		СторнируемыйДокумент = ТекстВвестиДокумент;
		
	ИначеЕсли Объект.ЗаполнениеДвижений.Количество() = 1 Тогда
		Элементы.СтраницыСторнирования.ТекущаяСтраница = Элементы.ГруппаСторнироватьДокумент;
		СторнируемыйДокумент = Объект.ЗаполнениеДвижений[0].Документ;
		
	Иначе
		Элементы.СтраницыСторнирования.ТекущаяСтраница = Элементы.ГруппаСторнироватьДокумент;
		СторнируемыйДокумент = ТекстВвестиДокумент;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиСумм()
	
	ВалютаМУ = МеждународныйУчетОбщегоНазначения.УчетныеВалюты(Объект.ПланСчетов, Объект.Организация);
	
	Если Не ЗначениеЗаполнено(ВалютаМУ.Функциональная) Тогда
		Текст = НСтр("ru = 'Функц. (%1)';
					|en = 'Funct. (%1)'");
	Иначе
		Текст = СтрШаблон(НСтр("ru = 'Функц. (%1)';
								|en = 'Funct. (%1)'"), Строка(ВалютаМУ.Функциональная));
	КонецЕсли;
	Элементы.Сумма.Заголовок = Текст;
	
	Если Не ЗначениеЗаполнено(ВалютаМУ.Представления) Тогда
		Текст = НСтр("ru = 'Пред.';
					|en = 'Prev.'");
	Иначе
		Текст = СтрШаблон(НСтр("ru = 'Пред. (%1)';
								|en = 'Present. (%1)'"), Строка(ВалютаМУ.Представления));
	КонецЕсли;
	Элементы.СуммаПредставления.Заголовок = Текст;
	
	Если ЗначениеЗаполнено(ВалютаМУ.Функциональная) И ВалютаМУ.Функциональная = ВалютаМУ.Представления Тогда
		Элементы.СуммаПредставления.Видимость = Ложь;
		Текст = СтрШаблон(НСтр("ru = 'Сумма (%1)';
								|en = 'Amount (%1)'"), Строка(ВалютаМУ.Функциональная));
		Элементы.Сумма.Заголовок = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуПроводок(ИмяКоманды)
	
	Если Объект.Движения.Международный.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаНаВопросЕстьСтроки", ЭтотОбъект, ИмяКоманды),
						НСтр("ru = '""Список проводок"" уже содержит строки.
							|При заполнении они будут удалены!
							|Продолжить?';
							|en = '""Posting list"" already contains lines.
							|They will be deleted when filling in.
							|Continue?'"),
							РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗагрузкуПроводок(ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросЕстьСтроки(Ответ, ИмяКоманды) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуПроводок(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуПроводок(ИмяКоманды)
	
	Если ИмяКоманды = "ЗагрузитьПроводки" Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаДокумента", Объект.Дата);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ПланСчетов", Объект.ПланСчетов);
		ОткрытьФорму("Документ.ОперацияМеждународный.Форма.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли ИмяКоманды = "ЗагрузитьПроводкиСторно" Тогда
		ЗагрузитьПроводкиСторноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата)
	
	Возврат МеждународныйУчетОбщегоНазначения.РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата);
	
КонецФункции

&НаКлиенте
Процедура ВалютаПриИзменении(ДтКт)
	
	ТекущаяСтрока = Элементы.ДвиженияМеждународный.ТекущиеДанные;
	НаДату = ?(Объект.ВводитьПериодПоСтрокам, ТекущаяСтрока.Период, Объект.Дата);
	СуммыПроводки = РассчитатьСуммы(Объект.ПланСчетов, Объект.Организация, ТекущаяСтрока["ВалютнаяСумма"+ДтКт], ТекущаяСтрока["Валюта"+ДтКт], НаДату);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СуммыПроводки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммы(ПланСчетов, Организация, ВалютнаяСумма, Валюта, НаДату)
	
	СуммыПроводки = Новый Структура("Сумма,СуммаПредставления",0,0);
	КоэффициентыПересчета = МеждународныйУчетОбщегоНазначения.ПолучитьКоэффициентыПересчетаВалюты(ПланСчетов, Организация, Валюта, НаДату);
	СуммыПроводки.Сумма = ВалютнаяСумма * КоэффициентыПересчета.ВФункциональнуюВалюту;
	СуммыПроводки.СуммаПредставления = ВалютнаяСумма * КоэффициентыПересчета.ВВалютуПредставления;
	
	Возврат СуммыПроводки;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ШаблоныОперации - СправочникСсылка.ТиповыеОперацииМеждународныйУчет, Массив из СправочникСсылка.ТиповыеОперацииМеждународныйУчет - 
// Возвращаемое значение:
// 	Строка - Описание
&НаСервере
Функция ОбоработкаВыбораШаблонаОперацииСервер(ШаблоныОперации)
	
	Текст = "";
	Если ТипЗнч(ШаблоныОперации) = Тип("СправочникСсылка.ТиповыеОперацииМеждународныйУчет") Тогда
		ЗагрузитьШаблонОперации(ШаблоныОперации);
		Текст = ШаблоныОперации.Наименование;
	ИначеЕсли ТипЗнч(ШаблоныОперации) = Тип("Массив") Тогда
		
		Для Каждого Шаблон Из ШаблоныОперации Цикл
			ЗагрузитьШаблонОперации(Шаблон);
			Если ПустаяСтрока(Текст) Тогда
				Текст = Шаблон.Наименование;
			Иначе
				Текст = Текст + "," + Символы.ПС + Шаблон.Наименование;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьШаблонОперации(ШаблонОперации)
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = ШаблонОперации.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СодержаниеОперации) Тогда
		Объект.СодержаниеОперации = ШаблонОперации.СодержаниеОперации;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		Объект.ПланСчетов = ШаблонОперации.ПланСчетов;
	КонецЕсли;
	
	Для Каждого Проводка Из ШаблонОперации.Проводки Цикл
		
		НоваяПроводка = Объект.Движения.Международный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
		НоваяПроводка.Активность = Ложь;
		НоваяПроводка.Период = Объект.Дата;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПроводкиИзХранилища(АдресПроводокВХранилище)
	
	Объект.Движения.Международный.Загрузить(ПолучитьИзВременногоХранилища(АдресПроводокВХранилище));
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеВидовСубконтоСчета(Счет, ДтКт)
	
	Возврат МеждународныйУчетОбщегоНазначения.ПредставлениеВидовСубконто(Счет, ДтКт);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПроводкиСторноНаСервере()
	
	ДокументыСторно = Объект.ЗаполнениеДвижений.Выгрузить(,"Документ");
	Если ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		НовыйДокумент = ДокументыСторно.Добавить();
		НовыйДокумент.Документ = СторнируемыйДокумент;
		ДокументыСторно.Свернуть("Документ");
	КонецЕсли;
	ЗагрузитьПроводкиДляСторнирования(ДокументыСторно);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПроводкиДляСторнирования(Регистраторы)
	
	ПроводкиОперации = РегистрыБухгалтерии.Международный.ПроводкиСторно(Регистраторы,
		Объект.ПланСчетов, Объект.Дата, Объект.ВводитьПериодПоСтрокам);
	
	Объект.Движения.Международный.Загрузить(ПроводкиОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументНажатие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(СторнируемыйДокумент) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(Элемент.ОграничениеТипа.Типы());
		СписокТипов.СортироватьПоЗначению();
		СписокТипов.Удалить(СписокТипов.НайтиПоЗначению(Тип("Строка")));
		СписокТипов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработчикВыбораТипаДокумента", ЭтотОбъект),
											НСтр("ru = 'Выберите тип:';
												|en = 'Select type:'"));
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораТипаДокумента(ВыбранныйТип, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйТип <> Неопределено Тогда
		ИмяДокумента = ИмяТипа(ВыбранныйТип.Значение);
		ОткрытьФорму("Документ."+ИмяДокумента+".ФормаВыбора",,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТипа(ЗаданныйТип)
	
	Возврат Метаданные.НайтиПоТипу(ЗаданныйТип).Имя;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВСписок(Команда)
	
	ФлажокСписок = Истина;
	Элементы.СтраницыСторнирования.ТекущаяСтраница = Элементы.ГруппаСторнироватьСписок;
	Элементы.ГруппаСторнироватьСписок.Видимость = Истина;
	Если ЗначениеЗаполнено(СторнируемыйДокумент) И ТипЗнч(СторнируемыйДокумент) <> Тип("Строка") Тогда
		Объект.ЗаполнениеДвижений.Очистить();
		НоваяСтрока = Объект.ЗаполнениеДвижений.Добавить();
		НоваяСтрока.Документ = СторнируемыйДокумент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзСписка(Команда)
	
	ФлажокСписок = Ложь;
	Элементы.СтраницыСторнирования.ТекущаяСтраница = Элементы.ГруппаСторнироватьДокумент;
	Элементы.ГруппаСторнироватьСписок.Видимость = Ложь;
	Если Объект.ЗаполнениеДвижений.Количество() > 0 Тогда
		СторнируемыйДокумент = Объект.ЗаполнениеДвижений[0].Документ;
		Объект.ЗаполнениеДвижений.Очистить();
	ИначеЕсли Объект.ЗаполнениеДвижений.Количество() = 0 Тогда
		СторнируемыйДокумент = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		СторнируемыйДокумент = ТекстВвестиДокумент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПараметрыВыбора(Элемент)
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого Проводка Из Объект.Движения.Международный Цикл
			НастройкаСчетовУчетаКлиент.ОбработкаПроводокПриИзмененииОрганизации(Проводка, ТипыСвязанныеСОрганизацией); 
			НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Проводка, Объект.Организация);
		КонецЦикла;
		ТекущаяОрганизация = Объект.Организация;
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыВыбораПолейСубконто(ДтКт="")
	
	ИдСтроки = Элементы.ДвиженияМеждународный.ТекущаяСтрока;
	Если ИдСтроки <> Неопределено Тогда
		СтрокаТаблицы = Объект.Движения.Международный.НайтиПоИдентификатору(ИдСтроки);
		НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, ДтКт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПланаСчетовВопрос(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТекущийПланСчетов = Объект.ПланСчетов;
		Объект.Движения.Международный.Очистить();
		ПланСчетовПриИзмененииНаСервере();
	Иначе
		Объект.ПланСчетов = ТекущийПланСчетов;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособАннулированияПроводок()
	
	НастройкаФормированияПроводок = МеждународныйУчетСерверПовтИсп.ИспользуемаяНастройкаФормированияПроводок(
		Объект.Дата, Объект.ПланСчетов, Объект.Организация);
	
	СпособАннулированияПроводок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаФормированияПроводок, "СпособАннулированияПроводок");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовкиАннулирующихКоманд()
	
	Если СпособАннулированияПроводок = Перечисления.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками Тогда
		Элементы.ВыйтиИзСписка.Заголовок = НСтр("ru = 'Реверс одного документа';
												|en = 'Reverse of a document'");
		Элементы.ПерейтиВСписок.Заголовок = НСтр("ru = 'Реверс списка документов';
												|en = 'Reverse of the document list'");
		Элементы.ДвиженияМеждународныйЗагрузитьПроводкиСторно.Заголовок = НСтр("ru = 'Реверсивными проводками по документам';
																				|en = 'Reversing entries by documents'");
	Иначе
		Элементы.ВыйтиИзСписка.Заголовок = НСтр("ru = 'Сторно одного документа';
												|en = 'One document storno'");
		Элементы.ПерейтиВСписок.Заголовок = НСтр("ru = 'Сторно списка документов';
												|en = 'Document list storno'");
		Элементы.ДвиженияМеждународныйЗагрузитьПроводкиСторно.Заголовок = НСтр("ru = 'Сторно проводками по документам';
																				|en = 'Storno entries by documents'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
