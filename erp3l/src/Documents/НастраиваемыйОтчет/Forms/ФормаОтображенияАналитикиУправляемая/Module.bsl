
&НаКлиенте
Перем СтруктураРедактируемойСтроки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресСтруктурыОтбора = ПоместитьВоВременноеХранилище(Новый Соответствие, ЭтаФорма.УникальныйИдентификатор);
	АдресСтруктурыСортировки = ПоместитьВоВременноеХранилище(Новый Соответствие, ЭтаФорма.УникальныйИдентификатор);
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
	
	РабочийОбъектАдрес=Параметры.РабочийОбъектАдрес;
	
	РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(РабочийОбъектАдрес);
	
	СтрПоказательРаскрытия=РабочийОбъект.мСоответствиеДляПоискаПоКоду[Параметры.ИмяОбласти];
	
	Если СтрПоказательРаскрытия=Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(СтрПоказательРаскрытия.ГруппаРаскрытия) Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	ЯзыкОтчета = РабочийОбъект.глОсновнойЯзык;
	
	ИдентификаторРодителя=Параметры.ИдентификаторРодителя;
	ВалютаОтображения=Параметры.ВалютаОтображения;
	
	Если РабочийОбъект.СрезПоВерсиям Тогда
		Элементы.Редактирование.Видимость=Ложь;
		Элементы.ТаблицаРаскрытия.ТолькоПросмотр=Истина;
		Элементы.ТаблицаРаскрытияРасшифровать.Видимость=Ложь;
	Иначе
		Элементы.Редактирование.Пометка=Параметры.РежимРедактирования;
		Элементы.ТаблицаРаскрытия.ТолькоПросмотр=НЕ Элементы.Редактирование.Пометка;
	КонецЕсли;	
	
	СтрПоказательРаскрытия=РабочийОбъект.мСоответствиеДляПоискаПоКоду[Параметры.ИмяОбласти];
	
	Если СтрПоказательРаскрытия=Неопределено Тогда
		ВидСобытия="НеОпределенПоказатель";
		Возврат;
	КонецЕсли;
	
	ГруппаРаскрытия=СтрПоказательРаскрытия.ГруппаРаскрытия;
		
	Если НЕ ЗначениеЗаполнено(ГруппаРаскрытия) Тогда
		СтандартнаяОбработка=Ложь;
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	УровеньТочности=РабочийОбъект.УровеньТочности;
	ТипПоказателяЧисловой=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	СохранятьИсториюИзменений=РабочийОбъект.ВидОтчета.СохранятьИсториюИзменений;
	
	РеквизитыКДобавлению=Новый Массив;
	РеквизитыКУдалению=Новый Массив;
	
	ДанныеАналитики=ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытия(,ГруппаРаскрытия);
	
	ПолучитьПоказателиГруппыРаскрытия();	
			
	Если ТаблицаПоказателей.НайтиСтроки(Новый Структура("Валютный",Истина)).Количество()>0 Тогда
		
		ЭтаФорма["ВидАналитикиВалюта"]=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
		ЭтаФорма["ТипАналитикиВалюта"]=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.ТипЗначения;
		
		СписокАналитик.Добавить("АналитикаВалюта");
		
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("АналитикаВалюта", ЭтаФорма["ТипАналитикиВалюта"], "ЛогИзмененийРаскрытий"));
				
	КонецЕсли;
			
	Для Инд = 1 По ЧислоДопАналитик Цикл
		
		ВидАналитики = ДанныеАналитики["ВидАналитики"+Инд].ВидАналитики;
		
		Если Не ПустаяСтрока(ВидАналитики) Тогда
			
			ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
			ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
			
			СписокАналитик.Добавить("Аналитика"+Инд);
			
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("Аналитика"+Инд, ЭтаФорма["ТипАналитики"+Инд], "ЛогИзмененийРаскрытий"));
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("Аналитика"+Инд, ЭтаФорма["ТипАналитики"+Инд], "ЗначенияНечисловыхПоказателей"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Организация	= РабочийОбъект.Организация;
	Проект		= РабочийОбъект.Проект;
	
	ПланСчетов=УправлениеОтчетамиУХ.ПолучитьПланСчетовОрганизации(РабочийОбъект.Организация,РабочийОбъект.Сценарий,РабочийОбъект.ПериодОтчета);
	
	Если Не ЗначениеЗаполнено(ГруппаРаскрытия) Тогда
		ВидСобытия="ГруппаРаскрытияНеОбнаружена";
		Возврат;
	КонецЕсли;
	
	ПараметрыГруппыРаскрытия	= РабочийОбъект.ПолучитьПараметрыГруппыРаскрытия(ГруппаРаскрытия);
	ИсходнаяТаблицаРаскрытия   	= РабочийОбъект.ПолучитьТаблицуРаскрытия(ПараметрыГруппыРаскрытия, ,ВалютаОтображения);
		
	Если ТаблицаПоказателей.НайтиСтроки(Новый Структура("ПересчитыватьВалютнуюСумму",Истина)).Количество()>0 Тогда
		
		ЗначениеВРеквизитФормы(УправлениеРабочимиПроцессамиУХ.ПолучитьТаблицуКурсов(РабочийОбъект.Сценарий,РабочийОбъект.ПериодОтчета),"ПериодическиеКурсы");
		
		ВидыКурсов=Новый Соответствие;
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПериода,				"КурсНаКонецПериода");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПредыдущегоПериода,	"КурсНаКонецПредыдущегоПериода");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаНачалоПериода,			"КурсНаНачалоПериода");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериод,			"СреднийКурсЗаПериод");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО,		"СреднийКурсЗаПериодМСФО");
		ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод,	"СреднийКурсЗаПредыдущийПериод");
		
		СоответствиеВидовКурса=Новый ФиксированноеСоответствие(ВидыКурсов);
			
	КонецЕсли;
		
	Для Каждого Колонка ИЗ ИсходнаяТаблицаРаскрытия.Колонки Цикл
			
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
		Колонка.ТипЗначения,
		"ТаблицаРаскрытия",
		Колонка.Заголовок,
		Ложь));
		
	КонецЦикла;
		
	ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
	
	Если ЗначениеЗаполнено(Параметры.СтруктураОтбора) Тогда
		
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсходнаяТаблицаРаскрытия);
					
		Для Каждого Строка Из Параметры.СтруктураОтбора Цикл
			
			Если ПостроительЗапроса.ДоступныеПоля.Найти(Строка.Ключ) <> Неопределено Тогда
				Отбор               = ПостроительЗапроса.Отбор.Добавить(Строка.Ключ);
				Отбор.ВидСравнения  = Строка.Значение.ВидСравнения;
				Отбор.Значение      = Строка.Значение.Значение;
				Отбор.Использование = Истина;
			КонецЕсли;
			
		КонецЦикла;
			
		ПостроительЗапроса.Выполнить();
		ЗначениеВРеквизитФормы(ПостроительЗапроса.Результат.Выгрузить(),"ТаблицаРаскрытия");
	Иначе
		ЗначениеВРеквизитФормы(ИсходнаяТаблицаРаскрытия, "ТаблицаРаскрытия");
	КонецЕсли;
	
	АдресИсходнойТаблицыРаскрытия = ПоместитьВоВременноеХранилище(ИсходнаяТаблицаРаскрытия, ЭтаФорма.УникальныйИдентификатор);
		
	МассивОбязательныхАналитик.ЗагрузитьЗначения(РабочийОбъект.ВернутьМассивОбязательныхАналитик(ПараметрыГруппыРаскрытия));
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Элементы.КнопкаОК.Доступность        = НЕ ТолькоПросмотр;
	Элементы.КнопкаПрименить.Доступность = НЕ ТолькоПросмотр;
	
	СтрокаШаблона = Нстр("ru = 'Раскрытие показателей группы ""%1""'");
	
	Заголовок = "";
	Если Не ПустаяСтрока(СтрокаШаблона) тогда		
		Заголовок = СтрШаблон(СтрокаШаблона, ГруппаРаскрытия);
	КонецЕсли;
			
	ЧислоАналитикОрганизации = 0;
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		Если ЭтаФорма["ТипАналитики"+Инд].СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
			ЧислоАналитикОрганизации = ЧислоАналитикОрганизации + 1;
		КонецЕсли;
	КонецЦикла;
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Формируем колонки таблицы
	
	КолонкаКонтрагент="";
	КолонкаДоговор="";
	
	СтруктураПолей=Новый Структура;
	
	Для Каждого Аналитика ИЗ СписокАналитик Цикл
		
		Колонка=ИсходнаяТаблицаРаскрытия.Колонки[Аналитика.Значение];	
		
		Если Колонка.Имя="АналитикаВалюта" Тогда
			
			НаименованиеАналитики="Валюта";
			
		Иначе
			
			НаименованиеАналитики=ПараметрыГруппыРаскрытия["НаименованиеАналитики"+Прав(Колонка.Имя, 1)];
			
		КонецЕсли;
		
		СписокПолей=Новый СписокЗначений;
		
		Для Каждого СтрПоле ИЗ ПараметрыГруппыРаскрытия.ПравилаОтображенияПолей Цикл
			
			Поле 	= СтрПоле.Поле;
			Синоним = СтрПоле.Синоним;
			
			Если СтрПоле.МультиязычныйРеквизит=Истина Тогда
				Поле 	= Поле + ?(ЯзыкОтчета = 0, "", ЯзыкОтчета);
				Синоним = Синоним + ?(ЯзыкОтчета = 0, "", ЯзыкОтчета);
				ТекстИмяКолонки="ИмяКолонки"+?(ЯзыкОтчета = 0, "", ЯзыкОтчета);
			Иначе
				ТекстИмяКолонки="ИмяКолонки";
			КонецЕсли;
			
			Если СтрНайти(Синоним, Колонка.Имя+"_")>0 
				И (НЕ СтрПоле.Ссылочное) 
				И (НЕ ИсходнаяТаблицаРаскрытия.Колонки.Найти(Синоним)=Неопределено) Тогда
				
				СписокПолей.Добавить(Поле, Синоним);
				
				ДопКолонка=ИсходнаяТаблицаРаскрытия.Колонки[Синоним];
				
				ЭтаФорма.Элементы.Добавить(ДопКолонка.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы.ТаблицаРаскрытия);	
				
				ЭтаФорма.Элементы[ДопКолонка.Имя].ПутьКДанным="ТаблицаРаскрытия."+ДопКолонка.Имя;
				ЭтаФорма.Элементы[ДопКолонка.Имя].Вид=ВидПоляФормы.ПолеВвода;
				ЭтаФорма.Элементы[ДопКолонка.Имя].ДоступныеТипы=ДопКолонка.ТипЗначения;
				ЭтаФорма.Элементы[ДопКолонка.Имя].АвтоОтметкаНезаполненного=НЕ (МассивОбязательныхАналитик.НайтиПоЗначению(Колонка.Имя)=Неопределено);
				ЭтаФорма.Элементы[ДопКолонка.Имя].КнопкаВыбора=Истина;
				ЭтаФорма.Элементы[ДопКолонка.Имя].КнопкаОчистки=Истина;
				ЭтаФорма.Элементы[ДопКолонка.Имя].КнопкаОткрытия=Истина;
				ЭтаФорма.Элементы[ДопКолонка.Имя].РедактированиеТекста=Ложь;
				
				ЭтаФорма.Элементы[ДопКолонка.Имя].ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложениеЭлемента.Право;
				
				ЭтаФорма.Элементы[ДопКолонка.Имя].Заголовок=?(ПустаяСтрока(СтрПоле[ТекстИмяКолонки]),СтрПоле.ИмяКолонки,СтрПоле[ТекстИмяКолонки]);
				
				ЭтаФорма.Элементы[ДопКолонка.Имя].УстановитьДействие("НачалоВыбора","ДействиеНачалоВыбора");
				ЭтаФорма.Элементы[ДопКолонка.Имя].УстановитьДействие("Открытие","ДействиеОткрытие");
				ЭтаФорма.Элементы[ДопКолонка.Имя].УстановитьДействие("Очистка","ДействиеОчистка");
				ЭтаФорма.Элементы[ДопКолонка.Имя].УстановитьДействие("ОбработкаВыбора","ДействиеОбработкаВыбора");
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПолей.Вставить(Аналитика.Значение,СписокПолей);
		
	КонецЦикла;
	
	Для Каждого СтрПоказатель ИЗ ТаблицаПоказателей Цикл
		
		Колонка=ИсходнаяТаблицаРаскрытия.Колонки[СтрПоказатель.Код+"_Отображение"];
		
		ЭтаФорма.Элементы.Добавить(Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ТаблицаРаскрытия);	
		
		ЭтаФорма.Элементы[Колонка.Имя].ПутьКДанным		= "ТаблицаРаскрытия."+Колонка.Имя;
		ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеВвода;
					
		ЭтаФорма.Элементы[Колонка.Имя].ОграничениеТипа	= Колонка.ТипЗначения;
					
		ЭтаФорма.Элементы[Колонка.Имя].ВыбиратьТип		= Ложь;
		
		Если СтрПоказатель.Проверочный ИЛИ РабочийОбъект.СписокРедактируемыхПоказателей.НайтиПоЗначению(СтрПоказатель.Показатель)=Неопределено Тогда
			
			ЭтаФорма.Элементы[Колонка.Имя].ТолькоПросмотр=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].ЦветФона=WebЦвета.ВесеннеЗеленый;
	
		КонецЕсли;
		
		ЭтаФорма.Элементы[Колонка.Имя].АвтоОтметкаНезаполненного=НЕ (МассивОбязательныхАналитик.НайтиПоЗначению(Колонка.Имя)=Неопределено);
		ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора		= Истина;
		ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки	= Истина;
		ЭтаФорма.Элементы[Колонка.Имя].ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложениеЭлемента.Право;
		
		ЭтаФорма.Элементы[Колонка.Имя].Заголовок = ?(ЯзыкОтчета=0,СтрПоказатель.Наименование,СтрПоказатель["Наименование"+ЯзыкОтчета]); 
		ОбщееЧислоЗнаков = 18 + РабочийОбъект.УровеньТочности;
		ЭтаФорма.Элементы[Колонка.Имя].КнопкаОткрытия = Ложь;
		ЭтаФорма.Элементы[Колонка.Имя].Формат =  "ЧЦ=" + ОбщееЧислоЗнаков + "; ЧДЦ=" + РабочийОбъект.УровеньТочности;
		
		Если СтрПоказатель.ПересчитыватьВалютнуюСумму Тогда
			
			Колонка=ИсходнаяТаблицаРаскрытия.Колонки[СтрПоказатель.Код+"_ОтображениеВалюта"];
			
			ЭтаФорма.Элементы.Добавить(Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ТаблицаРаскрытия);	
			
			ЭтаФорма.Элементы[Колонка.Имя].ПутьКДанным		= "ТаблицаРаскрытия."+Колонка.Имя;
			ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеВвода;
			
			ЭтаФорма.Элементы[Колонка.Имя].ОграничениеТипа	= Колонка.ТипЗначения;
			
			ЭтаФорма.Элементы[Колонка.Имя].ВыбиратьТип		= Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].ТолькоПросмотр	= (СтрПоказатель.Проверочный ИЛИ РабочийОбъект.СписокРедактируемыхПоказателей.НайтиПоЗначению(СтрПоказатель.Показатель)=Неопределено);
			ЭтаФорма.Элементы[Колонка.Имя].АвтоОтметкаНезаполненного=НЕ (МассивОбязательныхАналитик.НайтиПоЗначению(Колонка.Имя)=Неопределено);
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора		= Истина;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки	= Истина;
			ЭтаФорма.Элементы[Колонка.Имя].ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложениеЭлемента.Право;
			
			ЭтаФорма.Элементы[Колонка.Имя].Заголовок = СтрЗаменить(Колонка.Заголовок, "_ОтображениеВалюта", "");
			ОбщееЧислоЗнаков = 18 + РабочийОбъект.УровеньТочности;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОткрытия = Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].Формат =  "ЧЦ=" + ОбщееЧислоЗнаков + "; ЧДЦ=" + РабочийОбъект.УровеньТочности;
				
		КонецЕсли;
		
	КонецЦикла;
			
	ЭтаФорма.Элементы[СтрПоказательРаскрытия.Код+"_Отображение"].ЦветФона=Новый Цвет(230, 230, 250);
	
	ЭтаФорма.Элементы.Добавить("Отступ", Тип("ПолеФормы"), ЭтаФорма.Элементы.ТаблицаРаскрытия);	
	
	ЭтаФорма.Элементы["Отступ"].ПутьКДанным="ТаблицаРаскрытия.Отступ";
	ЭтаФорма.Элементы["Отступ"].Вид=ВидПоляФормы.ПолеВвода;
	ЭтаФорма.Элементы["Отступ"].ДоступныеТипы=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1);
	ЭтаФорма.Элементы["Отступ"].ТолькоПросмотр=Истина;
	
	
	ЭтаФорма.Элементы["Отступ"].КнопкаВыбора=Ложь;
	ЭтаФорма.Элементы["Отступ"].КнопкаОчистки=Ложь;
	ЭтаФорма.Элементы["Отступ"].КнопкаОткрытия=Ложь;
	ЭтаФорма.Элементы["Отступ"].РедактированиеТекста=Ложь;
	
	ЭтаФорма.Элементы["Отступ"].ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
			
	РассчитатьИтогиДляКолонок(ИсходнаяТаблицаРаскрытия);
	
	Для Каждого Показатель Из ТаблицаПоказателей Цикл
		
		МассивИменВыделяемыхКолонок.Добавить(СокрЛП(Показатель.Код) + "_Отображение");
		
		МассивИмен=Новый Массив;
		МассивИмен.Добавить(СокрЛП(Показатель.Код) + "_Отображение");
		
		Для каждого КлючИЗначение ИЗ СтруктураПолей Цикл
			
			Для каждого Элемент Из КлючИЗначение.Значение Цикл
				
				МассивИмен.Добавить(Элемент.Представление);
				
			КонецЦикла; 
			
		КонецЦикла; 
				
	КонецЦикла;
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ИдентификаторРодителя);
	
	Для каждого Элем из Элементы.ТаблицаРаскрытия.ПодчиненныеЭлементы Цикл
		Элем.РастягиватьПоГоризонтали = Ложь;
		Элем.Ширина = 20;
	КонецЦикла;
	
	ЕстьПроверочныеПоказатели = (ТаблицаПоказателей.НайтиСтроки(Новый Структура("Проверочный", Истина)).Количество() > 0);
	
	Элементы.КнопкаУстановитьФильтрПоВсемОшибочнымКС.Доступность = ЕстьПроверочныеПоказатели;
	
	Если ТипЗнч(Параметры.ДанныеСтрокиАналитики)=Тип("Структура") Тогда
		
		МассивСтрок=ТаблицаРаскрытия.НайтиСтроки(Параметры.ДанныеСтрокиАналитики);
		
		Если МассивСтрок.Количество()=1 Тогда
			
			Элементы.ТаблицаРаскрытия.ТекущаяСтрока=МассивСтрок[0].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТаблицаРаскрытияКоманднаяПанель.ПодчиненныеЭлементы.Редактирование.Доступность=НЕ РабочийОбъект.ПометкаУдаления;
			
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоказателиГруппыРаскрытия()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	ПоказателиОтчетов.ТипЗначения КАК ТипПоказателя,
	|	ПоказателиОтчетов.Проверочный КАК Проверочный,
	|	ПоказателиОтчетов.Валютный КАК Валютный,
	|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.НормализованныйКод КАК Код,
	|	ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер КАК ПорядковыйНомерСтроки,
	|	ПоказателиОтчетов.Наименование КАК Наименование,
	|	ПоказателиОтчетов.Наименование1 КАК Наименование1,
	|	ПоказателиОтчетов.Наименование2 КАК Наименование2,
	|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ГруппаРаскрытия = &ГруппаРаскрытия
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомерСтроки,
	|	ПорядковыйНомерКолонки,
	|	Проверочный";
	
	ПоказателиБезМасштаба=Новый Массив;
	Запрос.УстановитьПараметр("ГруппаРаскрытия",ГруппаРаскрытия);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаПоказателей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
				
		Если Результат.НеМасштабируется Тогда
			
			ПоказателиБезМасштаба.Добавить(Результат.Показатель);
			
		КонецЕсли;
				
	КонецЦикла;
	
	НемасштабируемыеПоказатели=Новый ФиксированныйМассив(ПоказателиБезМасштаба);
	
КонецПроцедуры // ПолучитьПоказателиГруппыРаскрытия() 

&НаКлиенте
Процедура ВыделитьОбластиПоказателей(МассивПоказателей) Экспорт
	
	Для Каждого КодПоказателя ИЗ МассивПоказателей Цикл
		
		ЭлементФормы=ЭтаФорма.Элементы.Найти(КодПоказателя+"_Отображение");
		
		Если НЕ (ЭлементФормы=Неопределено ИЛИ ЭлементФормы.ТолькоПросмотр) Тогда
			
			ЭлементФормы.ЦветФона=Новый Цвет(230, 230, 250);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыделитьОбластиПоказателей() 

&НаКлиенте
Процедура ДействиеОткрытие(Элемент,СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	КодАналитики=ОпределитьКодАналитики(Элемент.Имя);
	ТекВидАналитики=ДанныеАналитики["ВидАналитики" + Прав(КодАналитики, 1)];
		
	ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаОбъекта",Новый Структура("Ключ",Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]));
	
КонецПроцедуры // ДействиеОткрытие()

 &НаКлиенте
Функция ОпределитьКодАналитики(ИмяЭлемента)
	 
	Возврат Лев(ИмяЭлемента, СтрНайти(ИмяЭлемента,"_")-1); 
	 
КонецФункции // ОпределитьКодАналитики()

&НаСервере
Функция ПолучитьПараметрыФормыВыбора(КодАналитики)
	
	СтруктураПараметров=Новый Структура;
	СтруктураОтбора=Новый Структура;
	
	ЭлементПВХ=ЭтаФорма["ВидАналитики" + Прав(КодАналитики, 1)];	
	СтруктураОтбора.Вставить("Владелец",ЭлементПВХ);

	Если ЭлементПВХ.РазделятьПоОрганизациям Тогда	
		СтруктураОтбора.Вставить("Организация",Организация);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьПараметрыФормыВыбора() 

&НаКлиенте
Процедура ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	КодАналитики=ОпределитьКодАналитики(Элемент.Имя);
	
	Если КодАналитики="АналитикаВалюта" Тогда
		
		ТекВидАналитики=ДанныеАналитики["ВидАналитикиВалютаДт"];
		
	Иначе
		
		ТекВидАналитики=ДанныеАналитики["ВидАналитики" + Прав(КодАналитики, 1)];
		
	КонецЕсли;
	
	Если ТекВидАналитики.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		СтруктураПараметров=ПолучитьПараметрыФормыВыбора(КодАналитики);
		
	ИначеЕсли ТекВидАналитики.Свойство("Владелец") Тогда
		
		СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",Элементы.ТаблицаРаскрытия.ТекущиеДанные[ТекВидАналитики.Владелец]));
		
	ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" Тогда
		
		СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Организация",Организация));
		
	ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.СчетаБД"
		ИЛИ ТекВидАналитики.ТаблицаАналитики="Справочник.КорреспонденцииВГО" Тогда
		
		СтруктураПараметров=Новый Структура("Отбор",Новый Структура("Владелец",ПланСчетов));
		
	ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.Проекты" И ЗначениеЗаполнено(Проект) Тогда
		
		СтруктураПараметров=Новый Структура("Отбор", Новый Структура("Родитель,Проект", Проект,Ложь));
		
	Иначе
		
		СтруктураПараметров=Новый Структура;
		
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ТекущаяСтрока", Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]);
	СтруктураПараметров.Вставить("РежимВыбора",Истина);
	
	ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаВыбора",СтруктураПараметров,Элемент);
					 	
КонецПроцедуры // ДействиеНачалоВыбора()

&НаКлиенте
Процедура ДействиеОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииПоляАналитики(Элемент.Имя);
	
КонецПроцедуры // ДействиеОчистка()

&НаКлиенте
Процедура ПриИзмененииПоляАналитики(ИмяПоля,ВыбранноеЗначение=Неопределено)
	
	КодАналитики=ОпределитьКодАналитики(ИмяПоля);
	Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]=ВыбранноеЗначение;
	
	ПоляСтроки=ПолучитьСтруктуруПолейРеквизитов(КодАналитики,ДанныеАналитики,ВыбранноеЗначение,СтруктураПолей);
	
	Если НЕ ВыбранноеЗначение=Неопределено Тогда
		ВыбранноеЗначение=ПоляСтроки[ИмяПоля];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элементы.ТаблицаРаскрытия.ТекущиеДанные,ПоляСтроки,,ИмяПоля);
	
КонецПроцедуры // ПриИзмененииПоляАналитики() 

&НаКлиенте
Процедура ДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриИзмененииПоляАналитики(Элемент.Имя,ВыбранноеЗначение);
			
КонецПроцедуры // ДействиеОчистка()


&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПолейРеквизитов(КодАналитики,ДанныеАналитики,ВыбранноеЗначение,ПоляАналитики)
	
	Если КодАналитики="АналитикаВалюта" Тогда
		
		ТекВидАналитики=ДанныеАналитики["ВидАналитикиВалютаДт"];
		
	Иначе
		
		ТекВидАналитики=ДанныеАналитики["ВидАналитики" + Прав(КодАналитики, 1)];
		
	КонецЕсли;
	
	ПсевдонимТаблицы=СтрЗаменить(ТекВидАналитики.ТаблицаАналитики,".","");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ";
	
	ТекстПоля="";
	ПоляСтроки=Новый Структура;
	
	Если СтрНайти(ТекВидАналитики.ТаблицаАналитики,"Справочник.")>0 ИЛИ СтрНайти(ТекВидАналитики.ТаблицаАналитики,"Документ.")>0 Тогда
		
		Для Каждого Поле ИЗ ПоляАналитики[КодАналитики] Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+Поле.Значение+" КАК "+Поле.Представление;
			
			ПоляСтроки.Вставить(Поле.Представление);
			
		КонецЦикла;
		
		ТекстПоля=Сред(ТекстПоля,2);
		
	Иначе
		
		ТекстПоля="
		|Представление("+КодАналитики+".Ссылка) КАК "+КодАналитики+"_Отображение";
		
		ПоляСтроки.Вставить(КодАналитики+"_Отображение");
		
	КонецЕсли;
	
	Если ВыбранноеЗначение=Неопределено Тогда
		
		Возврат ПоляСтроки;
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+ТекстПоля+"
	|ИЗ "+ТекВидАналитики.ТаблицаАналитики+" КАК "+КодАналитики+"
	|ГДЕ "+КодАналитики+".Ссылка=&Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ВыбранноеЗначение);
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ПоляСтроки,Результат);
				
	КонецЕсли;
	
	Возврат ПоляСтроки;
			
КонецФункции // ОбновитьПоляРеквизитов() 


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПустаяСтрока(ВидСобытия) Тогда
		Оповестить("ОшибкаПриОткрытииАналитики", ВидСобытия);
		Отказ = Истина;
	КонецЕсли;
	
	Оповестить("ИзмененАдресОбъекта",РабочийОбъектАдрес,ИдентификаторРодителя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.
//

&НаКлиенте
Процедура ТаблицаРаскрытияПередУдалением(Элемент, Отказ)
	
	ТекСтрока = ТаблицаРаскрытия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если НЕ СохранятьИсториюИзменений Тогда
		
		ВозможноУдаление=Истина;
		
		Для каждого СтрПоказатель Из ТаблицаПоказателей Цикл
			
			Если СтрПоказатель.Проверочный Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если НЕ ВозможноУдаление Тогда
			
			ПоказатьПредупреждение(, Нстр("ru = 'Выбранная строка аналитического раскрытия заблокирована.'"));
			Отказ=Истина;
			Возврат;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	СтруктураСтроки=Новый Структура;
	
	Для Каждого Аналитика ИЗ СписокАналитик Цикл	 
		СтруктураСтроки.Вставить(Аналитика.Значение, ТекСтрока[Аналитика.Значение]);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из ТаблицаПоказателей Цикл
		
		Если ТекЭлемент.ТипПоказателя=ТипПоказателяЧисловой Тогда
			
			Если ТекЭлемент.ПересчитыватьВалютнуюСумму Тогда
				
				ДобавитьВЛогИзмененийПоказателей(СтруктураСтроки,ТекЭлемент.Показатель,-ТекСтрока[ТекЭлемент.Код],-ТекСтрока[ТекЭлемент.Код+"_Валюта"]);
				
			Иначе
				
				ДобавитьВЛогИзмененийПоказателей(СтруктураСтроки,ТекЭлемент.Показатель,-ТекСтрока[ТекЭлемент.Код]);
				
			КонецЕсли;
			
		Иначе
			
			ЗаписатьЗначениеНечисловогоПоказателя(СтруктураСтроки,ТекЭлемент.Показатель,Неопределено);
			
		КонецЕсли;
				
	КонецЦикла;
	
	УдалитьСтрокуВСохраненнойТаблицеРаскрытия(ТекСтрока.ID);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуВСохраненнойТаблицеРаскрытия(ИдентификаторСтроки)
	
	ИсходнаяТаблицаРаскрытия = ПолучитьИзВременногоХранилища(АдресИсходнойТаблицыРаскрытия);
	
	Строка = ИсходнаяТаблицаРаскрытия.Найти(ИдентификаторСтроки, "ID");
	
	Если Не Строка = Неопределено Тогда
		ИсходнаяТаблицаРаскрытия.Удалить(Строка);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРаскрытияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ОбновитьСтруктуруСтроки(Элемент.ТекущаяСтрока,НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИзмененийПоказателей(СтруктураСтроки,Показатель,Значение,ЗначениеВалюта=0)
	
	НоваяСтрока = ЛогИзмененийРаскрытий.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
	НоваяСтрока.Показатель 				= Показатель;
	НоваяСтрока.Значение 				= Значение;
	НоваяСтрока.ЗначениеВалюта 			= ЗначениеВалюта;
		
КонецПроцедуры // ДобавитьВЛогИзмененийПоказателей()

&НаКлиенте
Процедура ЗаписатьЗначениеНечисловогоПоказателя(СтруктураСтроки,Показатель,Значение)
	
	СтруктураПоиска=Новый Структура;
	
	Для Каждого Аналитика ИЗ СписокАналитик Цикл	 
		СтруктураПоиска.Вставить(Аналитика.Значение, СтруктураСтроки[Аналитика.Значение]);
	КонецЦикла; 
	
	СтруктураПоиска.Вставить("Показатель",Показатель);
	
	МассивСтрок=ЗначенияНечисловыхПоказателей.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество()=0 Тогда
		
		НоваяСтрока=ЗначенияНечисловыхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		НоваяСтрока.Значение=Значение;
		
	Иначе
		
		МассивСтрок[0].Значение				= Значение;
				
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьЗначениеНечисловогоПоказателя() 

&НаКлиенте
Процедура ТаблицаРаскрытияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = ТаблицаРаскрытия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	ЕстьИзмененныеПоказатели=Ложь;
	
	Если СтруктураРедактируемойСтроки <> Неопределено Тогда
		
		МассивИзмененныхАналитик=Новый Массив;
		
		Для Каждого Аналитика ИЗ СписокАналитик Цикл
			
			Если СтруктураРедактируемойСтроки[Аналитика.Значение] <> ТекСтрока[Аналитика.Значение] Тогда
				МассивИзмененныхАналитик.Добавить(Аналитика.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивИзмененныхАналитик.Количество()=0 Тогда
			
			Для Каждого ТекЭлемент Из ТаблицаПоказателей Цикл
				
				Если СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_Отображение"] <> ТекСтрока[ТекЭлемент.Код+"_Отображение"] Тогда
					
					Если ТекЭлемент.ТипПоказателя=ТипПоказателяЧисловой Тогда
						
						Если ТекЭлемент.ПересчитыватьВалютнуюСумму Тогда
							
							ДобавитьВЛогИзмененийПоказателей(СтруктураРедактируемойСтроки,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"] - СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_Отображение"],ТекСтрока[ТекЭлемент.Код+"_ОтображениеВалюта"] - СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_ОтображениеВалюта"]);
							
						Иначе
							
							ДобавитьВЛогИзмененийПоказателей(СтруктураРедактируемойСтроки,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"] - СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_Отображение"]);
							
						КонецЕсли;
						
					Иначе
						
						ЗаписатьЗначениеНечисловогоПоказателя(СтруктураРедактируемойСтроки,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"]);
												
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока[ТекЭлемент.Код+"_Отображение"]) Тогда
					
					ЕстьИзмененныеПоказатели=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ТекЭлемент Из ТаблицаПоказателей Цикл
				
				Если ТекЭлемент.ТипПоказателя=ТипПоказателяЧисловой Тогда
					
					Если ТекЭлемент.ПересчитыватьВалютнуюСумму Тогда
						
						ДобавитьВЛогИзмененийПоказателей(СтруктураРедактируемойСтроки,ТекЭлемент.Показатель,-СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_Отображение"],-СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_ОтображениеВалюта"]);
						
						Если НЕ МассивИзмененныхАналитик.Найти("АналитикаВалюта")=Неопределено Тогда // Изменили валюту записи
							
							Если НЕ ЗначениеЗаполнено(ТекЭлемент.ВидКурса) Тогда
								
								СтрокаШаблона = Нстр("ru = 'Для валютного показателя %1 не задан вид курса для конвертации.'");
	
								Если Не ПустаяСтрока(СтрокаШаблона) тогда			
									Сообщить(СтрШаблон(СтрокаШаблона, ТекЭлемент.Показатель));
								КонецЕсли;
								
								ТекСтрока[ТекЭлемент.Код+"_Отображение"]=0;
								
							КонецЕсли;
							
							Если СоответствиеВидовКурса[ТекЭлемент.ВидКурса]=Неопределено Тогда
								
								СтрокаШаблона = Нстр("ru = 'Вид курса %1 не поддерживается при интерактивной работе.'");
	
								Если Не ПустаяСтрока(СтрокаШаблона) тогда			
									Сообщить(СтрШаблон(СтрокаШаблона, ТекЭлемент.ВидКурса));
								КонецЕсли;
								 
								ТекСтрока[ТекЭлемент.Код+"_Отображение"]=0;
								
							КонецЕсли;
							
							ТекСтрока[ТекЭлемент.Код+"_Отображение"]=ПересчитатьИзВалютыВВалюту(ТекСтрока[ТекЭлемент.Код+"_ОтображениеВалюта"],
										ТекСтрока["АналитикаВалюта"],ВалютаОтображения,ТекЭлемент.ВидКурса);
							
						КонецЕсли;
						
						ДобавитьВЛогИзмененийПоказателей(ТекСтрока,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"],ТекСтрока[ТекЭлемент.Код+"_ОтображениеВалюта"]);
						
					Иначе
						
						ДобавитьВЛогИзмененийПоказателей(СтруктураРедактируемойСтроки,ТекЭлемент.Показатель,-СтруктураРедактируемойСтроки[ТекЭлемент.Код+"_Отображение"]);
						ДобавитьВЛогИзмененийПоказателей(ТекСтрока,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"]);
						
					КонецЕсли;
					
				Иначе
					
					ЗаписатьЗначениеНечисловогоПоказателя(СтруктураРедактируемойСтроки,ТекЭлемент.Показатель,Неопределено);
					ЗаписатьЗначениеНечисловогоПоказателя(ТекСтрока,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"]);
						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока[ТекЭлемент.Код+"_Отображение"]) Тогда
					
					ЕстьИзмененныеПоказатели=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураСтроки=Новый Структура;
		
		Для Каждого Аналитика ИЗ СписокАналитик Цикл	 
			 СтруктураСтроки.Вставить(Аналитика.Значение, ТекСтрока[Аналитика.Значение]);
		 КонецЦикла;
		
		 Для Каждого ТекЭлемент Из ТаблицаПоказателей Цикл
			 
			 Если ТекЭлемент.ТипПоказателя=ТипПоказателяЧисловой Тогда
				 
				 Если ТекЭлемент.ПересчитыватьВалютнуюСумму Тогда
					 
					 ДобавитьВЛогИзмененийПоказателей(СтруктураСтроки,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"],ТекСтрока[ТекЭлемент.Код+"_ОтображениеВалюта"]);
					 
				 Иначе
					 
					 ДобавитьВЛогИзмененийПоказателей(СтруктураСтроки,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"]);
					 
				 КонецЕсли;
				 
			 Иначе
				 
				 ЗаписатьЗначениеНечисловогоПоказателя(СтруктураСтроки,ТекЭлемент.Показатель,ТекСтрока[ТекЭлемент.Код+"_Отображение"]);
				 
			 КонецЕсли;
			 
			 Если ЗначениеЗаполнено(ТекСтрока[ТекЭлемент.Код+"_Отображение"]) Тогда
				 
				 ЕстьИзмененныеПоказатели=Истина;
				 
			 КонецЕсли;
			 
		 КонецЦикла;

	КонецЕсли;
		
	СтруктураРедактируемойСтроки = Неопределено;	
	ОбновитьДанныеТаблицыСервер(ТекСтрока.ПолучитьИдентификатор());
	
	Если ВычислятьПриИзменении
		И ЕстьИзмененныеПоказатели
		И (ТаблицаПоказателей.НайтиСтроки(Новый Структура("Код",СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"_Отображение",""))).Количество()>0
		ИЛИ ТаблицаПоказателей.НайтиСтроки(Новый Структура("Код",СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"_ОтображениеВалюта",""))).Количество()>0) Тогда
		
		ЗаписатьИзменения();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыСервер(ИдентификаторСтроки)
	
	ОбновитьИтогиПоКолонкам();	
	ОбновитьСтрокуВСохраненнойТаблицеРаскрытия(ИдентификаторСтроки);
		
КонецПроцедуры // ОбновитьДанныеТаблицыСервер() 

&НаСервере
Процедура ОбновитьСтрокуВСохраненнойТаблицеРаскрытия(ИдентификаторСтроки)
	
	ТекущаяСтрокаРаскрытия = ТаблицаРаскрытия.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИсходнаяТаблицаРаскрытия = ПолучитьИзВременногоХранилища(АдресИсходнойТаблицыРаскрытия);
	
	Строка = ИсходнаяТаблицаРаскрытия.Найти(ТекущаяСтрокаРаскрытия.ID, "ID");
	
	Если Строка = Неопределено Тогда
		Строка = ИсходнаяТаблицаРаскрытия.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, ТекущаяСтрокаРаскрытия);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ.
//

&НаКлиенте
Процедура КнопкаОК(Команда)
	
	ПрименитьИзменения();
	Оповестить("ОбновитьОтображениеОтчета", РабочийОбъектАдрес,ИдентификаторРодителя);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПрименить(Команда)
	
	ЗаписатьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения()
	
	ПрименитьИзменения(Истина);
	Оповестить("ОбновитьОтображениеОтчета", РабочийОбъектАдрес,ИдентификаторРодителя);
	
КонецПроцедуры // ЗаписатьИзменения()


&НаКлиенте
Процедура КнопкаЗакрыть(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Элементы.ТаблицаРаскрытия.ТекущаяСтрока <> Неопределено Тогда
		ТД = Элементы.ТаблицаРаскрытия.ДанныеСтроки(Элементы.ТаблицаРаскрытия.ТекущаяСтрока);
		Если СтрЧислоВхождений(Элементы.ТаблицаРаскрытия.ТекущийЭлемент.Имя, "Аналитика") > 0 Тогда
			Возврат;
		КонецЕсли;
		ИмяКолонки = СтрЗаменить(Элементы.ТаблицаРаскрытия.ТекущийЭлемент.Имя, "_Отображение", "");
		МассивКодовПоказателей = Новый Массив;
		МассивКодовПоказателей.Добавить(ИмяКолонки);
		
		СтруктураОтбора = Новый Структура;
		
		Для Каждого Элемент Из СписокАналитик Цикл
			
			Если ЗначениеЗаполнено(ТД[Элемент.Значение]) Тогда
				СтруктураОтбора.Вставить(Элемент.Значение, ТД[Элемент.Значение]);
			КонецЕсли;
				
		КонецЦикла;
		
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.РасшифровкаПоказателейУправляемая"
					,Новый Структура("МассивКодовПоказателей, РабочийОбъектАдрес, мТекущаяВалюта, СтруктураОтбора"
									, МассивКодовПоказателей
									, РабочийОбъектАдрес
									, ВалютаОтображения
									, СтруктураОтбора),ЭтаФорма);

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////


&НаСервере
Процедура РассчитатьИтогиДляКолонок(ТекТаблицаРаскрытия=Неопределено)
	
	Если ТекТаблицаРаскрытия=Неопределено Тогда
		ТекТаблицаРаскрытия=ДанныеФормыВЗначение(ТаблицаРаскрытия,Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	Для Каждого Элемент Из ТаблицаПоказателей Цикл
		ЭтаФорма.Элементы[Элемент.Код+"_Отображение"].ТекстПодвала = "";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ ";
	
	Для Каждого Элемент Из ТаблицаПоказателей Цикл
		Запрос.Текст = Запрос.Текст + Элемент.Код+"_Отображение" + ", ";
	КонецЦикла;
	
	Запрос.ТЕкст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 2) + " ПОМЕСТИТЬ ВременнаяТаблица 
	
	| ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТекТаблицаРаскрытия);
	ЗАпрос.Выполнить();
	
	Запрос.Текст = "";
	
	Для Каждого Элемент Из ТаблицаПоказателей Цикл
		
		Если НЕ Элемент.ТипПоказателя=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ВидИтога) ИЛИ Элемент.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма Тогда
			Запрос.Текст = Запрос.Текст + "СУММА(ВЫРАЗИТЬ(" + Элемент.Код+"_Отображение КАК Число(18,5))" +") КАК " + Элемент.Код+"_Отображение" + ", ";
		ИначеЕсли Элемент.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			Запрос.Текст = Запрос.Текст + "МИНИМУМ(" + Элемент.Код+"_Отображение" +") КАК " + Элемент.Код+"_Отображение" + ", ";
		ИначеЕсли Элемент.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			Запрос.Текст = Запрос.Текст + "МАКСИМУМ(" + Элемент.Код+"_Отображение" +") КАК " + Элемент.Код+"_Отображение" + ", ";
		ИначеЕсли Элемент.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда
			Запрос.Текст = Запрос.Текст + "СРЕДНЕЕ(" + Элемент.Код+"_Отображение" +") КАК " + Элемент.Код+"_Отображение" + ", ";
		КонецЕсли;
	
	КонецЦикла;
				
	Если СтрДлина(Запрос.Текст) > 0 Тогда
		
		Запрос.Текст = "ВЫБРАТЬ " + Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 2) + " ИЗ ВременнаяТаблица";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ЭтаФорма.Элементы[Колонка.Имя].ТекстПодвала = Формат(Выборка[Колонка.Имя], "ЧЦ=18; ЧДЦ= " + УровеньТочности);
			КонецЦикла;
		Иначе
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ЭтаФорма.Элементы[Колонка.Имя].ТекстПодвала = "";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзменения(ОбновлятьТаблицу=Ложь)
	
	ТаблицаРезультатЧисловые = ДанныеФормыВЗначение(ЛогИзмененийРаскрытий,Тип("ТаблицаЗначений"));
	ТаблицаРезультатНеЧисловые = ДанныеФормыВЗначение(ЗначенияНечисловыхПоказателей,Тип("ТаблицаЗначений"));
	
	РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(РабочийОбъектАдрес);
	РабочийОбъект.ДанныеРаскрытияИнициализированы=Истина;
	ТекущийДелитель=РабочийОбъект.ВернутьЗначениеДелителя();
	РабочийОбъект.НачатьНовуюОперацию();
	
	// Зафиксируем изменения числовых показателей
	
	ТекстСвертки = "";
	СтруктураАналитики=Новый Структура;
	СтруктураАналитики.Вставить("Показатель");
	
	МассивКодовПоказателей = Новый Массив;
	
	Для Каждого Элемент Из СписокАналитик Цикл
		ТекстСвертки = ТекстСвертки + ", " + Элемент.Значение;
		СтруктураАналитики.Вставить(Элемент.Значение);
	КонецЦикла;
	
	ТекстСвертки = "Показатель " + ТекстСвертки;	
	ТаблицаРезультатЧисловые.Свернуть(ТекстСвертки, "Значение,ЗначениеВалюта");
	
	// Удалим нулевые строки раскрытия
	МассивКУдалению=ТаблицаРезультатЧисловые.НайтиСтроки(Новый Структура("Значение",0));
	
	Для Каждого СтрокаКУдалению ИЗ МассивКУдалению Цикл
		
		ТаблицаРезультатЧисловые.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Для Каждого СтрАналитика ИЗ ТаблицаРезультатЧисловые Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураАналитики,СтрАналитика);
		
		ДелительСтроки=?(НемасштабируемыеПоказатели.Найти(СтрАналитика.Показатель)=Неопределено,ТекущийДелитель,1);
		
		МассивСтрок=РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(СтруктураАналитики);
		
		Если НЕ ВалютаОтображения=РабочийОбъект.ОсновнаяВалюта Тогда
			
			ЗначениеВОсновнойВалюте=РабочийОбъект.ПересчитатьЗначениеПоказателяПоКурсу(СтрАналитика.Значение*ДелительСтроки, РабочийОбъект.мСоответствиеДляПоискаПоСсылке[СтрАналитика.Показатель],ВалютаОтображения, РабочийОбъект.ОсновнаяВалюта);
			
		Иначе
			
			ЗначениеВОсновнойВалюте=СтрАналитика.Значение*ДелительСтроки;
			
		КонецЕсли;
		
		ЗначениеДляЗаписи=Новый Структура;
		
		Если МассивСтрок.Количество()=0 ИЛИ РабочийОбъект.РежимКорректировки Тогда
			
			ЗначениеДляЗаписи.Вставить("Значение",				ЗначениеВОсновнойВалюте);
			ЗначениеДляЗаписи.Вставить("ЗначениеВалюта",		СтрАналитика.ЗначениеВалюта*ДелительСтроки);
			
		Иначе
			
			ЗначениеДляЗаписи.Вставить("Значение",				МассивСтрок[0].Значение				+ЗначениеВОсновнойВалюте);
			ЗначениеДляЗаписи.Вставить("ЗначениеВалюта",		МассивСтрок[0].ЗначениеВалюта		+СтрАналитика.ЗначениеВалюта*ДелительСтроки);
			
		КонецЕсли;		
			
	    УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,ЗначениеДляЗаписи, СтруктураАналитики);
		МассивКодовПоказателей.Добавить(СтрАналитика.Показатель);
		
	КонецЦикла;
	
	// Зафиксируем изменения нечисловых показателей
	
	Для Каждого СтрАналитика ИЗ ТаблицаРезультатНеЧисловые Цикл
		
		РабочийОбъект.ИзмененНечисловойПоказатель=Истина;
		
		ЗаполнитьЗначенияСвойств(СтруктураАналитики,СтрАналитика);
	   	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,СтрАналитика.Значение, СтруктураАналитики);
		МассивКодовПоказателей.Добавить(СтрАналитика.Показатель);
		
	КонецЦикла;
		
	УправлениеОтчетамиУХ.ПолучитьИтогиПоПоказателямСостояние(РабочийОбъект,МассивКодовПоказателей);
	
	Если РабочийОбъект.ВычислятьПриИзменении Тогда
		
		Если НЕ РабочийОбъект.ДанныеПараметрикиАктуальны Тогда
			
			УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект,,Истина);
			
		КонецЕсли;
		
		Для Каждого Показатель ИЗ МассивКодовПоказателей Цикл
			
			МассивЗависимых=РабочийОбъект.ПолучитьПутьВычисления(СокрЛП(Показатель.Код));
			РабочийОбъект.РассчитатьВычисляемыеПоказатели(МассивЗависимых);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Обновлятьтаблицу Тогда
		
		ПараметрыГруппыРаскрытия	= РабочийОбъект.ПолучитьПараметрыГруппыРаскрытия(ГруппаРаскрытия);
		ИсходнаяТаблицаРаскрытия   	= РабочийОбъект.ПолучитьТаблицуРаскрытия(ПараметрыГруппыРаскрытия, ,ВалютаОтображения);
		
		ЗначениеВРеквизитФормы(ИсходнаяТаблицаРаскрытия,"ТаблицаРаскрытия");
		РассчитатьИтогиДляКолонок(ИсходнаяТаблицаРаскрытия);
		
	КонецЕсли;
	
	Если НЕ ВалютаОтображения=РабочийОбъект.ОсновнаяВалюта Тогда
		
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения();
		
	КонецЕсли;
	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ИдентификаторРодителя);
	
	ЛогИзмененийРаскрытий.Очистить();
	ЗначенияНечисловыхПоказателей.Очистить();
	
КонецПроцедуры // ПрименитьИзменения()


&НаСервере
Процедура ОбновитьИтогиПоКолонкам()
	
	РассчитатьИтогиДляКолонок();
	
КонецПроцедуры // ОбновитьИтогиПоКолонкам() 

&НаКлиенте
Процедура Редактирование(Команда)
	
	ТекПометка=Элементы.Редактирование.Пометка;
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("УникальныйИдентификатор",ИдентификаторРодителя);

	Если НЕ ТекПометка Тогда
		
		Оповестить("ПеревестиВРежимРедактирования");
			
	Иначе
		
		ЗаписатьИзменения();
		
	КонецЕсли;
	
	Элементы.Редактирование.Пометка=НЕ ТекПометка;
	Элементы.ТаблицаРаскрытия.ТолькоПросмотр=НЕ Элементы.Редактирование.Пометка;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаскрытияПриИзменении(Элемент)
	
	Если Элементы.ТаблицаРаскрытия.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяКолонки=Элемент.ТекущийЭлемент.Имя;
	
	Если СтрНайти(ИмяКолонки,"_Отображение")>0 И ПериодическиеКурсы.Количество()>0 Тогда
				
		КодПоказателя=СтрЗаменить(ИмяКолонки,?(СтрНайти(ИмяКолонки,"_ОтображениеВалюта")>0,"_ОтображениеВалюта","_Отображение"),"");
		
		ТекПоказатели=ТаблицаПоказателей.НайтиСтроки(Новый Структура("Код",КодПоказателя));
		
		Если ТекПоказатели.Количество()=0 ИЛИ (НЕ ТекПоказатели[0].ПересчитыватьВалютнуюСумму) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекПоказатели[0].ВидКурса) Тогда
			
			СтрокаШаблона = Нстр("ru = 'Для валютного показателя %1 не задан вид курса для конвертации.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда			
				Сообщить(СтрШаблон(СтрокаШаблона, ТекПоказатели[0].Показатель));
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		Если СоответствиеВидовКурса.Получить(ТекПоказатели[0].ВидКурса)=Неопределено Тогда
			
			СтрокаШаблона = Нстр("ru = 'Вид курса %1 не поддерживается при интерактивной работе.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда			
				Сообщить(СтрШаблон(СтрокаШаблона, ТекПоказатели[0].ВидКурса));
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		Если СтрНайти(ИмяКолонки,"_ОтображениеВалюта")>0 Тогда
			
			Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодПоказателя+"_Отображение"]=ПересчитатьИзВалютыВВалюту(Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодПоказателя+"_ОтображениеВалюта"],
												Элементы.ТаблицаРаскрытия.ТекущиеДанные["АналитикаВалюта"],ВалютаОтображения,ТекПоказатели[0].ВидКурса);
												
		Иначе
			
			Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодПоказателя+"_ОтображениеВалюта"]=ПересчитатьИзВалютыВВалюту(Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодПоказателя+"_Отображение"],
												ВалютаОтображения,Элементы.ТаблицаРаскрытия.ТекущиеДанные["АналитикаВалюта"],ТекПоказатели[0].ВидКурса);
												
		КонецЕсли;											
				
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьИзВалютыВВалюту(Значение,ИсходнаяВалюта,НоваяВалюта,ВидКурса)
	
	ТекВидКурса=СоответствиеВидовКурса[ВидКурса];
	
	Если Не ЗначениеЗаполнено(ТекВидКурса) Тогда
		
		Возврат Значение;
		
	КонецЕсли;
	
	МассивКурсовИсходный=ПериодическиеКурсы.НайтиСтроки(Новый Структура("Валюта",ИсходнаяВалюта));
	
	Если МассивКурсовИсходный.Количество()=0 ИЛИ МассивКурсовИсходный[0][ТекВидКурса]=0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не задан курс %1 для валюты %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			Сообщить(СтрШаблон(СтрокаШаблона, ВидКурса, ИсходнаяВалюта));
		КонецЕсли;
		
		Возврат 0;
		
	КонецЕсли;
	
	МассивКурсовНовый=ПериодическиеКурсы.НайтиСтроки(Новый Структура("Валюта",НоваяВалюта));
	
	Если МассивКурсовНовый.Количество()=0 ИЛИ МассивКурсовНовый[0][СоответствиеВидовКурса[ВидКурса]]=0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не задан курс %1 для валюты %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			Сообщить(СтрШаблон(СтрокаШаблона, ВидКурса, НоваяВалюта));
		КонецЕсли;
		
		Возврат 0;
		
	КонецЕсли;
	
	КурсИсходный=МассивКурсовИсходный[0][СоответствиеВидовКурса[ВидКурса]];
	КурсНовый=МассивКурсовНовый[0][СоответствиеВидовКурса[ВидКурса]];
	
	КратностьИсходная=?(МассивКурсовИсходный[0].Кратность=0,1,МассивКурсовИсходный[0].Кратность);
	КратностьНовая=?(МассивКурсовНовый[0].Кратность=0,1,МассивКурсовНовый[0].Кратность);
	
	Возврат Значение * (КурсИсходный * КратностьНовая) / (КурсНовый * КратностьИсходная);
		
КонецФункции // ПересчитатьИзВалютыВВалюту() 

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	Отсортировать("");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	Отсортировать(" УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура Отсортировать(Направление)
	
	ВыделеннаяСтрока = Элементы.ТаблицаРаскрытия.ТекущийЭлемент;
	Если Не ВыделеннаяСтрока = Неопределено Тогда
		
		ТаблицаРаскрытия.Сортировать(ВыделеннаяСтрока.Имя + Направление);

		СохранитьИнформациюОСортировке(ВыделеннаяСтрока.Имя, Направление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИнформациюОСортировке(Реквизит, Направление)
	
	СортировкаПоРаскрытию = ПолучитьИзВременногоХранилища(АдресСтруктурыСортировки);
	СортировкаПоРаскрытию.Очистить();
	СортировкаПоРаскрытию.Вставить(Реквизит, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрПоВсемОшибочнымКС(Команда)

	УстановитьФильтрПоВсемОшибочнымКСНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрПоВсемОшибочнымКСНаСервере()
	
	ОтборПоКС = Истина;
		
	ОбновитьОтображениеТаблицыРаскрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтр(Команда)
	
	ВыделеннаяСтрока = Элементы.ТаблицаРаскрытия.ТекущийЭлемент;
	
	Если НЕ ВыделеннаяСтрока = Неопределено
		И НЕ Элементы.ТаблицаРаскрытия.ТекущиеДанные = Неопределено Тогда
		
		ТекущаяОбласть = СтрЗаменить(ВыделеннаяСтрока.Имя, "_Отображение", "");
				
		МассивСтрок = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Код", ТекущаяОбласть));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Результат = Неопределено;

			ДопПараметры = Новый Структура("ТекущаяОбласть", ТекущаяОбласть);
			Оповещение = Новый ОписаниеОповещения("УстановитьФильтрЗавершение", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаВводаУсловияНаЧисловойПоказатель",
							,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
			
		Иначе	
			
			Значение = Элементы.ТаблицаРаскрытия.ТекущиеДанные[ТекущаяОбласть];
			
			УстановитьФильтрНаСервере(ТекущаяОбласть, Значение);
			
		КонецЕсли;		
		
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущаяОбласть = ДополнительныеПараметры.ТекущаяОбласть;
        
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        УстановитьФильтрПоЧисловомуПоказателюНаСервере(ТекущаяОбласть, Результат);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	ОтключитьОтборНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьОтборНаСервере()

	ОтборПоКС = Ложь;
	
	ОтборПоРаскрытию = ПолучитьИзВременногоХранилища(АдресСтруктурыОтбора);
	ОтборПоРаскрытию.Очистить();
	

	СортировкаПоРаскрытию = ПолучитьИзВременногоХранилища(АдресСтруктурыСортировки);
	ОтборПоРаскрытию.Очистить();
	
	ОбновитьОтображениеТаблицыРаскрытия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере(Колонка, Значение)
	
	//Значение = Элементы.ТаблицаРаскрытия.ТекущиеДанные[Колонка];
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Массив = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Колонка, "_");
	
	Реквизит = "";
	
	Для каждого Эл из Массив Цикл
		Реквизит = Реквизит + ?(Реквизит = "", "", ".") + Эл;		
	КонецЦикла;
	
	ОтборПоРаскрытию = ПолучитьИзВременногоХранилища(АдресСтруктурыОтбора);
	ОтборПоРаскрытию.Вставить(Реквизит, Новый Структура("ВидСравнения,Значение", ВидСравнения.Равно, Значение));
	
	ОбновитьОтображениеТаблицыРаскрытия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрПоЧисловомуПоказателюНаСервере(Реквизит, СтруктураОтбора)
		
	ОтборПоРаскрытию = ПолучитьИзВременногоХранилища(АдресСтруктурыОтбора);	
	ОтборПоРаскрытию.Вставить(Реквизит, Новый Структура("ВидСравнения, Значение", 
												ВидСравнения[СтруктураОтбора.ВидСравнения], 
												СтруктураОтбора.Значение));
															
	ОбновитьОтображениеТаблицыРаскрытия();

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеТаблицыРаскрытия()
		
	ОтборПоРаскрытию 			= ПолучитьИзВременногоХранилища(АдресСтруктурыОтбора);
	СортировкаПоРаскрытию 		= ПолучитьИзВременногоХранилища(АдресСтруктурыСортировки);
	ИсходнаяТаблицаРаскрытия 	= ПолучитьИзВременногоХранилища(АдресИсходнойТаблицыРаскрытия);
	
	РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(РабочийОбъектАдрес);
		
	Таблица = РабочийОбъект.ПодготовитьТаблицуРаскрытияДляОтображения(ИсходнаяТаблицаРаскрытия, 
																		ОтборПоРаскрытию, 
																		ОтборПоКС, 
																		СортировкаПоРаскрытию);
																		
	
	ЗначениеВРеквизитФормы(Таблица, "ТаблицаРаскрытия");
	
	РассчитатьИтогиДляКолонок(Таблица);	
	
	ОбновитьНадписьФильтраПоАналитике();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьФильтраПоАналитике()
	
	ТекстУстановленногоФильтра = "";
	
	Отбор = ПолучитьИзВременногоХранилища(АдресСтруктурыОтбора);
	
	Если НЕ Отбор = Неопределено Тогда
		Если ОтборПоКС Тогда
			ТекстУстановленногоФильтра = Нстр("ru = 'Только ошибочные'");
		КонецЕсли;
		
		Для каждого Стр из Отбор Цикл
			ТекстУстановленногоФильтра = ТекстУстановленногоФильтра + ?(ТекстУстановленногоФильтра = "", "", " | ")
			//+ Стр.Ключ + "=" + Стр.Значение.Значение;
			+ ОбщегоНазначенияУХ.ПолучитьПредставлениеВидаСравнения(Стр.Значение.ВидСравнения) + Стр.Значение.Значение;
		КонецЦикла;
	КонецЕсли;		
	
	
	Элементы.ТекстУстановленногоФильтра.Видимость = НЕ (ТекстУстановленногоФильтра = "");
	
КонецПроцедуры

 &НаКлиенте
Процедура ОбновитьСтруктуруСтроки(ИдентификаторСтроки,НоваяСтрока=Ложь)
	
	Если НоваяСтрока Тогда
		
		СтруктураРедактируемойСтроки = Неопределено;
		
	Иначе
		
		СтруктураРедактируемойСтроки = Новый Структура;
		
		ТекСтрока = ТаблицаРаскрытия.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Для Каждого СтрПоказатель ИЗ ТаблицаПоказателей Цикл
			
			СтруктураРедактируемойСтроки.Вставить(СтрПоказатель.Код+"_Отображение", ТекСтрока[СтрПоказатель.Код+"_Отображение"]);
						
			СтруктураРедактируемойСтроки.Вставить(СтрПоказатель.Код, ТекСтрока[СтрПоказатель.Код]);
			
			Если СтрПоказатель.ПересчитыватьВалютнуюСумму Тогда
				
				СтруктураРедактируемойСтроки.Вставить(СтрПоказатель.Код+"_ОтображениеВалюта", ТекСтрока[СтрПоказатель.Код+"_ОтображениеВалюта"]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Аналитика ИЗ СписокАналитик Цикл	 
			СтруктураРедактируемойСтроки.Вставить(Аналитика.Значение, ТекСтрока[Аналитика.Значение]);
		КонецЦикла;
		
	КонецЕсли;
 	
КонецПроцедуры // ОбновитьСтруктуруСтроки()

&НаКлиенте
Процедура ТаблицаРаскрытияПослеУдаления(Элемент)
	
	ОбновитьИтогиПоКолонкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаскрытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Элементы.ТаблицаРаскрытия.ТолькоПросмотр Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КодАналитики=ОпределитьКодАналитики(Поле.Имя);
	
	Если СтрНайти(КодАналитики,"Аналитика")=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекВидАналитики=ДанныеАналитики["ВидАналитики" + Прав(КодАналитики, 1)];
		
	ОткрытьФорму(ТекВидАналитики.ТаблицаАналитики+".ФормаОбъекта",Новый Структура("Ключ",Элементы.ТаблицаРаскрытия.ТекущиеДанные[КодАналитики]));
	
КонецПроцедуры





