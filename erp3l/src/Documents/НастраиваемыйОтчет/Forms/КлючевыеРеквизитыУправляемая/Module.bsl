
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "ПараметрыВыбора") Тогда
		Если Параметры.ПараметрыВыбора.Свойство("ВидОтчета") Тогда
			 ВидОтчета = Параметры.ПараметрыВыбора.ВидОтчета;	
		КонецЕсли;	
	КонецЕсли;
	
	ЧислоДопАналитик = ПараметрыСеанса.ЧислоДопАналитик;
	
	Если  ЗначениеЗаполнено(ВидОтчета) Тогда
		
		ЕстьАналитикиОтчета=Ложь;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			
			ВидАналитики = ВидОтчета["ВидАналитики"+Инд];			
			
			Если Не ПустаяСтрока(ВидАналитики) Тогда
				
				ЕстьАналитикиОтчета=Истина;
				
				ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
				ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
				Элементы["АналитикаОтчета"+Инд].Видимость=Истина;
				Элементы["АналитикаОтчета"+Инд].Заголовок=Строка(ВидАналитики);	
				ЭтаФорма["Аналитика"+Инд]=Параметры["Аналитика"+Инд];	
			Иначе	
				Элементы["АналитикаОтчета"+Инд].Видимость=Ложь;	
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ПанельАналитики.Видимость=ЕстьАналитикиОтчета;
		
		Элементы.Проект.Видимость=ВидОтчета.РазделениеПоПроектам;
		
		ОбновитьРеквизитыПоРегламенту();
		
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Параметры.БланкОтчета) Тогда
		БланкОтчета=Параметры.БланкОтчета;
	КонецЕсли;
		
	ЗаполнитьПараметрыВидаОтчета();
		
	ЗакрыватьПриЗакрытииВладельца = Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПараметрыПоКлючевымРеквизитам();
	
	Если ЗначениеЗаполнено(ВидОтчета) И НЕ ПроверитьНаличиеПоказателей(ВидОтчета) Тогда
		
		Сообщить(Нстр("ru = 'Для выбранного вида отчета не определено ни одного показателя.'"), СтатусСообщения.Внимание);
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКлючевыхРеквизитов

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	Если НЕ ПроверитьНаличиеПоказателей(ВидОтчета) Тогда
		
		Сообщить(Нстр("ru = 'Для выбранного вида отчета не определено ни одного показателя.'"), СтатусСообщения.Внимание);
		ВидОтчета="";
		Возврат;
		
	КонецЕсли;

	ПриИзмененииВидаОтчета();
	
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
		
	Регламент 		= ПредопределенноеЗначение("Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка");
	Организация 	= ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	
	УстановитьПараметрыПоКлючевымРеквизитам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
		
	ПериодОкончания = ПериодОтчета;
	ОбновитьРеквизитыПоРегламенту();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийАналитик

&НаКлиенте
Процедура Аналитика1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 1, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 2, СтандартнаяОбработка);	
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 3, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура Аналитика4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 4, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 5, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 6, СтандартнаяОбработка);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиВалют

&НаКлиенте
Процедура ДополнительныеВалютыПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ДополнительныеВалюты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Пометка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеВалютыПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ДополнительныеВалюты.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущаяСтрока.Значение = ОсновнаяВалюта) Или (ДополнительныеВалюты.НайтиПоЗначению(ТекущаяСтрока.Значение) <> ТекущаяСтрока) Тогда	
		ТекущаяСтрока.Значение = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");		
		ТекущаяСтрока.Пометка = Ложь;
	Иначе 
		
		СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Сценарий, ПериодОтчета, Организация, ВидОтчета);
		ТекущаяСтрока.Пометка = (СтруктураВалют <> Неопределено) И СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(ТекущаяСтрока.Значение) <> Неопределено;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДополнительныеВалюты.ТекущиеДанные;
	
	Если (ТекущаяСтрока.Значение = ОсновнаяВалюта) Или (ДополнительныеВалюты.НайтиПоЗначению(ТекущаяСтрока.Значение) <> ТекущаяСтрока) Тогда	
		ТекущаяСтрока.Значение = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		Сообщить(Нстр("ru = 'Для создания экземпляра отчета необходимо указать вид отчета.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Организация) ИЛИ ЗначениеЗаполнено(Проект)) Тогда
		Сообщить(Нстр("ru = 'Для создания экземпляра отчета необходимо указать организацию или проект.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
		Сообщить(Нстр("ru = 'Для создания экземпляра отчета необходимо указать основную валюту.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьНаличиеПоказателей(ВидОтчета) Тогда
		Сообщить(Нстр("ru = 'Для выбранного вида отчета не определено ни одного показателя.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодОкончания) Тогда
		Сообщить(Нстр("ru = 'Не заполнен ключевой реквизит: период окончания отчета'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьВозможностьВывода() Тогда
		Сообщить(Нстр("ru = 'Для работы с несколькими периодами в одном экземпляре необходимо выбрать отображение в бланке сводной таблицы или в многопериодном бланке .'"), СтатусСообщения.Внимание);
		Возврат;	
	КонецЕсли;	
		
	Если НЕ ЭтоРасширеннаяНастройка() Тогда 
		ЭтаФорма.ПериодОкончания =  ЭтаФорма.ПериодОтчета;
	КонецЕсли;	
		
	Если НЕ ПроверитьНаличиеДокументовСРеквизитамиТекущего() Тогда
		Возврат;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(УправлениеПериодом) Тогда
		 ОпределитьУправлениеПериодом();
	КонецЕсли;	
	
	СтруктураРеквизиты = Новый Структура("ВидОтчета,Организация,Проект,УправлениеПериодом,ПериодОтчета,ПериодОкончания,Сценарий,ОсновнаяВалюта,БланкОтчета,ПравилоОбработки,ПравилоПроверки,ИспользуемаяИБ");
		
	ЗаполнитьЗначенияСвойств(СтруктураРеквизиты, ЭтаФорма);
	
	СтруктураРеквизиты.Вставить("ДополнительныеВалюты", Новый ФиксированныйМассив(ДополнительныеВалюты.ВыгрузитьЗначения()));
	
	Для Инд=1 По ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(ЭтаФорма["Аналитика"+Инд]) Тогда
			
			СтруктураРеквизиты.Вставить("Аналитика"+Инд,ЭтаФорма["Аналитика"+Инд]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизиты.Вставить("ПараметрыОтчета", ПараметрыОтчета);
			
	ПараметрыВызова = Новый Структура("АдресПараметровИниициализации",ПодготовитьПарамтерыВХранилище(СтруктураРеквизиты));
	Если ЭтоРасширеннаяНастройка() И ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма" + ".ФормаАналитическойТаблицы", ПараметрыВызова,ВладелецФормы);
	Иначе
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", ПараметрыВызова,ВладелецФормы);	
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаКлиенте
Процедура ОбработкаВыбораАналитики(Элемент, НомерАналитики, СтандартнаяОбработка)
	
	ОграничениеТипа = ЭтаФорма["ТипАналитики" + Строка(НомерАналитики)];
	
	Если ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) Тогда
		ТекФорма = ПолучитьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Владелец", ЭтаФорма["ВидАналитики" + Строка(НомерАналитики)])), Элемент);
		ТекФорма.Открыть();
		СтандартнаяОбработка = Ложь;
	Иначе
		Элемент.ОграничениеТипа = ОграничениеТипа;
		Значение = ЭтаФорма["Аналитика"+Строка(НомерАналитики)];
		ЭтаФорма["Аналитика"+Строка(НомерАналитики)] = Элемент.ОграничениеТипа.ПривестиЗначение(Значение);
	КонецЕсли;
	
	Элемент.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСпособовОтображения()
	
	// Очистка исходного списка.
	Элементы.СпособВыводаФорма.СписокВыбора.Очистить();
	
	Если Регламент.РежимМногопериодныхУОП Тогда	
		// Получение доступного списка бланков.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Наименование КАК Наименование,
		|	БланкиОтчетов.РежимБланка КАК РежимБланка
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|	И НЕ БланкиОтчетов.ПометкаУдаления
		|	И (БланкиОтчетов.РежимБланка = 2
		|			ИЛИ БланкиОтчетов.РежимБланка = 1)";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Результат = Запрос.Выполнить().Выбрать();
		// Заполнение списка выбора доступными бланками.
		Пока Результат.Следующий() Цикл
			ПредставлениеБланка= Результат.Наименование;  
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить(Результат.Ссылка, ПредставлениеБланка, , 
			?(Результат.РежимБланка = 1,БиблиотекаКартинок.ВнешнийИсточникДанныхКуб,БиблиотекаКартинок.Органайзер));
		КонецЦикла;
		
		// Установка способа по умолчанию.
		СпособВывода = "";
		СпособВыводаФорма = ""; 
					
		СпособВывода 		= БланкОтчета;	
		СпособВыводаФорма   = БланкОтчета;				
				
	Иначе	
		// Получение доступного списка бланков.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|	И БланкиОтчетов.РежимБланка = 0
		|	И НЕ БланкиОтчетов.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Результат = Запрос.Выполнить().Выбрать();
		// Заполнение списка выбора доступными бланками.
		Пока Результат.Следующий() Цикл
			ПредставлениеБланка = "Бланк " + Результат.Наименование;
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить(Результат.Ссылка, ПредставлениеБланка, , БиблиотекаКартинок.БланкиОтчетов);
		КонецЦикла;
		// Добавление отображения в дереве.
		Элементы.СпособВыводаФорма.СписокВыбора.Добавить("Дерево", НСтр("ru = 'Дерево строк'"),, БиблиотекаКартинок.Иерархия);
		Элементы.СпособВыводаФорма.СписокВыбора.Добавить("ДеревоГруппировка", НСтр("ru = 'Дерево строк (группировка по аналитикам)'"),,БиблиотекаКартинок.Иерархия);
		Элементы.СпособВыводаФорма.СписокВыбора.Добавить("ДеревоГруппировкаСИерархией", НСтр("ru = 'Дерево строк (группировка по аналитикам с учетом иерархии)'"),,БиблиотекаКартинок.Иерархия);
		// Установка способа по умолчанию.
		Если ЗначениеЗаполнено(СпособВывода) Тогда		
			Если СтрНайти(СпособВывода, "Бланк")>0 Тогда
				СпособВыводаФорма = БланкОтчета;
			Иначе
				СпособВыводаФорма = СпособВывода;
			КонецЕсли;		
		ИначеЕсли ЗначениеЗаполнено(БланкОтчета) Тогда	
			СпособВыводаФорма = БланкОтчета;
			СпособВывода = "Бланк " + Строка(БланкОтчета);	
		Иначе	
			СпособВывода = "Дерево";
			СпособВыводаФорма = БланкОтчета;	
		КонецЕсли;
		
	КонецЕсли;	
	
	
КонецПроцедуры // ЗаполнитьСписокСпособовОтображения() 

&НаСервере
Процедура ОбновитьРеквизитыПоРегламенту()
				
	СтруктураРеквизитов = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета, Сценарий, Организация, ПериодОтчета);	
	
	Если Не ЗначениеЗаполнено(БланкОтчета) Тогда
		Если  Регламент.РежимМногопериодныхУОП  И  СтруктураРеквизитов.Свойство("БланкДляОтображенияМногопериодный") Тогда 
			БланкОтчета = СтруктураРеквизитов.БланкДляОтображенияМногопериодный;
			СпособВывода 		= БланкОтчета;	
			СпособВыводаФорма   = БланкОтчета;
		ИначеЕсли  СтруктураРеквизитов.Свойство("БланкОтчета") Тогда
			БланкОтчета = СтруктураРеквизитов.БланкОтчета;
			СпособВывода 		= БланкОтчета;	
			СпособВыводаФорма   = БланкОтчета;
		КонецЕсли;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ПравилоОбработки) И СтруктураРеквизитов.Свойство("ПравилоОбработки")  Тогда
		ПравилоОбработки = СтруктураРеквизитов.ПравилоОбработки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПравилоПроверки) И СтруктураРеквизитов.Свойство("ПравилоПроверки") Тогда
		ПравилоПроверки = СтруктураРеквизитов.ПравилоПроверки;
	КонецЕсли;

	ПравилоОбработкиПриИзмененииНаСервере();
	
	СтруктураРеквизитов.Свойство("ВИБ", ИспользуемаяИБ);
	
	СтруктураВалют = УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(Регламент, ВидОтчета, Организация);
	
	ДополнительныеВалюты.Очистить();
	ДополнительныеВалюты.ЗаполнитьПометки(Ложь);
	
	Если ТипЗнч(СтруктураВалют) = Тип("Структура") Или ТипЗнч(СтруктураВалют) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ЗначениеЗаполнено(СтруктураВалют.ОсновнаяВалюта) И (ОсновнаяВалюта <> СтруктураВалют.ОсновнаяВалюта) Тогда			
			
			Если Не ОсновнаяВалюта.Пустая() 
				И (ДополнительныеВалюты.НайтиПоЗначению(ОсновнаяВалюта) = Неопределено)
				И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(ОсновнаяВалюта) = Неопределено) Тогда
				ДополнительныеВалюты.Добавить(ОсновнаяВалюта);// основная валюта отчета-источника переносится в доп.валюты
			КонецЕсли;
			
			ОсновнаяВалюта = СтруктураВалют.ОсновнаяВалюта;
			
		КонецЕсли;
		
		Для Каждого ДопВалюта Из СтруктураВалют.ДополнительныеВалюты Цикл			
			
			СтрокаВалюта = ДополнительныеВалюты.НайтиПоЗначению(ДопВалюта.Значение);
			Если СтрокаВалюта = Неопределено Тогда
				ДополнительныеВалюты.Добавить(ДопВалюта.Значение, , Истина);
			Иначе 
				СтрокаВалюта.Пометка = Истина;	
			КонецЕсли;			
			
		КонецЦикла;
		
		ЭлементВалюта = ДополнительныеВалюты.НайтиПоЗначению(ОсновнаяВалюта);
		Если ЭлементВалюта <> Неопределено Тогда
			ДополнительныеВалюты.Удалить(ЭлементВалюта);
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииВидаОтчета()
	
	ЕстьАналитикиОтчета=Ложь;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ВидАналитики = ВидОтчета["ВидАналитики"+Инд];
				
		Если Не ПустаяСтрока(ВидАналитики) Тогда	
			ЕстьАналитикиОтчета=Истина;
			ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
			ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
			Элементы["АналитикаОтчета"+Инд].Видимость=Истина;
			Элементы["АналитикаОтчета"+Инд].Заголовок=Строка(ВидАналитики);
			ЭтаФорма["Аналитика" + Инд] = ЭтаФорма["ТипАналитики" + Инд].ПривестиЗначение(ЭтаФорма["Аналитика" + Инд]);				
		Иначе	
			Элементы["АналитикаОтчета"+Инд].Видимость=Ложь;	
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПанельАналитики.Видимость=ЕстьАналитикиОтчета;
	Элементы.Проект.Видимость=ВидОтчета.РазделениеПоПроектам;
	
	БланкОтчета = Справочники.БланкиОтчетов.ПустаяСсылка();
	СпособВыводаФорма 	= Неопределено;
	СпособВывода		= "";
	
	ОбновитьРеквизитыПоРегламенту();
	ЗаполнитьСписокСпособовОтображения();	
	ЗаполнитьПараметрыВидаОтчета();
		
КонецПроцедуры // ПриИзмененииВидаОтчета()

&НаСервереБезКонтекста
Функция ПроверитьНаличиеПоказателей(ВидОтчета)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	
	Возврат НЕ Запрос.Выполнить().Пустой()
		
КонецФункции // ПроверитьНаличиеПоказателей() 

&НаСервере
Процедура ПравилоОбработкиПриИзмененииНаСервере()
	
	ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	ПравилоОбработкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВывода()
	
	Если УправлениеПериодом.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП Тогда
		
		Если НЕ ЗначениеЗаполнено(БланкОтчета) Тогда	
			Возврат Ложь;	 
		ИначеЕсли НЕ (БланкОтчета.РежимБланка = 2 ИЛИ БланкОтчета.РежимБланка = 1) Тогда	 
			Возврат Ложь;			 
		КонецЕсли;					
		
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции	

&НаСервере
Функция ПодготовитьПарамтерыВХранилище(СтруктураРеквизиты)
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРеквизиты,Новый УникальныйИдентификатор);
	
КонецФункции	

&НаСервере
Функция ЭтоРасширеннаяНастройка() 
		
	Возврат Регламент.РежимМногопериодныхУОП;
	
КонецФункции	

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьРеквизитыПоРегламенту();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыводаФормаПриИзменении(Элемент)
	СпособВыводаФормаПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура СпособВыводаФормаПриИзмененииСервер()
	БланкОтчета = СпособВыводаФорма;
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеДокументовСРеквизитамиТекущего()
	
	тОбъект = Новый Структура();
	
	тОбъект.Вставить("Сценарий"				,Сценарий);
	тОбъект.Вставить("Организация"			,Организация);
	тОбъект.Вставить("Проект"				,Проект);
	тОбъект.Вставить("ПериодОтчета"			,ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,ПериодОкончания);
	тОбъект.Вставить("ВидОтчета"			,ВидОтчета);
	тОбъект.Вставить("Ссылка"				,Документы.НастраиваемыйОтчет.ПустаяСсылка());
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл		
		тОбъект.Вставить("Аналитика" + Инд			,ЭтотОбъект["Аналитика" + Инд]);
	КонецЦикла;

	Если  ПолныеПраваУХ.ПроверитьНаличиеДокументовСРеквизитамиТекущего(тОбъект) Тогда
		Сообщить(Нстр("ru = 'Уже существует экземпляр отчета с указанными ключевыми реквизитами.'"), СтатусСообщения.Внимание);
		Возврат Ложь;	
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		ВыбраннаяПериодичность = Периодичность;
		
		РезультатДатаНачала 		= РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания 		= РезультатВыбора.ДатаОкончания;
		
		Если (ЗначениеЗаполнено(РезультатДатаНачала)) И (ЗначениеЗаполнено(РезультатДатаОкончания)) Тогда
			
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			
			ПериодПланированияОтборНачало		 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			ПериодПланированияОтборОкончание	 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);
			
			РассчитатьТекущийГоризонт(ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание);
						
		Иначе
			// Не изменяем периоды.
		КонецЕсли;
	ИначеЕсли РезультатВыбора = Неопределено Тогда	
		// Пользователь отказался. Не изменяем периоды.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	УстановитьПараметрыПоКлючевымРеквизитам();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодОтчета, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодОкончания) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодОкончания, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Регламент 		= ПредопределенноеЗначение("Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка");
	Организация 	= ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	
	ПериодичностьПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ПериодичностьПриИзмененииСервер() 
	
	 Если ЗначениеЗаполнено(Периодичность) Тогда
		 Если ЗначениеЗаполнено(ПериодОтчета) И НЕ ПериодОтчета.Периодичность = Периодичность Тогда
			 ПериодОтчета      = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
			 ПериодОкончания   = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
		 КонецЕсли;	 	 
	 КонецЕсли;
	 
	 УстановитьПараметрыПоКлючевымРеквизитам();
	 			
КонецПроцедуры	

&НаСервере
Процедура РассчитатьТекущийГоризонт(ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание) 
	
	ПериодОтчета  				= ПериодПланированияОтборНачало;
	ПериодОкончания     		= ПериодПланированияОтборОкончание;
	
	ОбновитьРеквизитыПоРегламенту();
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьИзменениеРегламента()
		
	Если ЗначениеЗаполнено(Регламент) Тогда	
							
		    Элементы.Организация.ТолькоПросмотр = Ложь;
		
			СписокДоступныхОрганизаций = Новый Массив;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
			|ИЗ
			|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
			|ГДЕ
			|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Регламент);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл	
				СписокДоступныхОрганизаций.Добавить(Выборка.ОрганизационнаяЕдиница);	
			КонецЦикла;
			
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(СписокДоступныхОрганизаций);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Организация.ПараметрыВыбора = НовыеПараметры;
			
			Если  СписокДоступныхОрганизаций.Найти(Организация) = Неопределено Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;	
			
				
		БланкОтчета = Справочники.БланкиОтчетов.ПустаяСсылка();
		СпособВыводаФорма 	= Неопределено;
		СпособВывода		= "";
		
		ЗаполнитьСписокСпособовОтображения();
		ОбновитьРеквизитыПоРегламенту();
		
	КонецЕсли;		
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьПараметрыПоКлючевымРеквизитам()
	
	УправлениеПериодом 								= Документы.УправлениеПериодомСценария.ПустаяСсылка();
	Элементы.ГруппаМногопериодныйРежим.Доступность  = Ложь;
	Элементы.Периодичность.ТолькоПросмотр  			= Истина;
    Элементы.Регламент.ТолькоПросмотр  				= Истина;
	Элементы.Организация.ТолькоПросмотр             = Истина;
	Элементы.ДекорацияУОП.Картинка          		= БиблиотекаКартинок.Пустая;
	Элементы.ДекорацияУОП.Подсказка                 = "";
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	
	РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
	
	НовыйМассив = Новый Массив;
	
	Для Каждого Стр Из РегламентыПериоды Цикл	
		НовыйМассив.Добавить(Стр.Периодичность);			
	КонецЦикла;	 
	
	Если НовыйМассив.Количество()>0 Тогда
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Периодичность.ПараметрыВыбора = НовыеПараметры;	
		
		Если МассивЗнченийПараметров.Найти(Периодичность) = Неопределено Тогда
			Периодичность  = Перечисления.Периодичность.ПустаяСсылка();
		КонецЕсли;	
		
		Если МассивЗнченийПараметров.Количество() = 1 Тогда
			 Периодичность = МассивЗнченийПараметров[0];
		КонецЕсли;	
		
	Иначе	
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
				
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Периодичность.ПараметрыВыбора = НовыеПараметры;	
		
	КонецЕсли;
	
	Элементы.Периодичность.ТолькоПросмотр  			= Ложь;

	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ГруппаМногопериодныйРежим.Доступность  = Истина;

	Если Не ЗначениеЗаполнено(ПериодОтчета) Тогда
		Возврат;
	КонецЕсли;

	// По выбранному сценарию, и периоду пытаемся определить открытый УОП
	УправлениеПериодом 								= Документы.УправлениеПериодомСценария.ПустаяСсылка();
	
	УправлениеПериодом = УправлениеРабочимиПроцессамиУХ.ПолучитьДокументУправленияПериодомСценария(Сценарий,ПериодОтчета);

	//Если нашли УОП, то выравниваем период по нему, и заполняем регламент и доступные организации
	Если ЗначениеЗаполнено(УправлениеПериодом) Тогда	
		Элементы.ДекорацияУОП.Картинка          		= БиблиотекаКартинок.ОсвободитьФайл;
		Элементы.ДекорацияУОП.Подсказка                 = Нстр("ru = 'Перейти к управлению периодом'");
		Если (НЕ ПериодОкончания 	= УправлениеПериодом.ПериодСценарияОкончание) ИЛИ (НЕ ПериодОтчета =УправлениеПериодом.ПериодСценария)  Тогда
			ТекстСообщения = НСтр("ru = ' Выбранный период скорректирован по уже открытому горизонту: %Период1% - %Период2%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период1%", Строка(УправлениеПериодом.ПериодСценария));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период2%", Строка(УправлениеПериодом.ПериодСценарияОкончание));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
		КонецЕсли;	
		ПериодОтчета  				= УправлениеПериодом.ПериодСценария;
		ПериодОкончания     		= УправлениеПериодом.ПериодСценарияОкончание;
		Регламент                   = УправлениеПериодом.ВерсияОрганизационнойСтруктуры;
		Элементы.Организация.ТолькоПросмотр = Ложь;
		ОбработатьИзменениеРегламента();
	Иначе
		//По периоду и сценарию пытаемся  вычислить регламент по умолчанию.
		
		Элементы.ДекорацияУОП.Картинка          		= БиблиотекаКартинок.ЗанятьФайл;
        Элементы.ДекорацияУОП.Подсказка                 = НСтр("ru = 'Период не открыт'");
		
		Элементы.Регламент.ТолькоПросмотр  				= Ложь;
		ТекущийРегламент  = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		ДатаСценария      = ПериодОтчета.ДатаНачала;
		РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
		
		НовыйМассив = Новый Массив;
		
		Для Каждого Стр Из РегламентыПериоды Цикл
			
			Если Стр.Периодичность = Периодичность Тогда
				НовыйМассив.Добавить(Стр.Регламент);
				Если ДатаСценария>=Стр.ДействуетС Тогда	
					ТекущийРегламент = Стр.Регламент;	
				КонецЕсли;		
			КонецЕсли;
			
		КонецЦикла;	 
		
		Если НовыйМассив.Количество()>0 Тогда
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Регламент.ПараметрыВыбора = НовыеПараметры;	
		Иначе	
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Регламент.ПараметрыВыбора = НовыеПараметры;	
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ТекущийРегламент) Тогда
			
			Регламент  =  ТекущийРегламент;
			Элементы.Организация.ТолькоПросмотр = Ложь;
			
			Если  ЗначениеЗаполнено(ТекущийРегламент.КоличествоПериодов)  Тогда	
				ПериодОкончанияПоРегламенту     = ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, ТекущийРегламент.КоличествоПериодов-1);
				Если НЕ ПериодОкончания = ПериодОкончанияПоРегламенту  Тогда
					ТекстСообщения = НСтр("ru = ' период окончания скорректирован по количеству периодов регламента(%КоличествоПериодов%): %Период1%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоПериодов%", Строка(ТекущийРегламент.КоличествоПериодов));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период1%", Строка(ПериодОкончанияПоРегламенту));

					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
					ПериодОкончания = ПериодОкончанияПоРегламенту;
				КонецЕсли;
			КонецЕсли;	
	
			ОбработатьИзменениеРегламента();

		КонецЕсли;	
					
	КонецЕсли;
	
	
КонецПроцедуры	

&НаСервере
Процедура  ОпределитьУправлениеПериодом();
	
	УправлениеПериодом = Справочники.ВерсииРегламентовПодготовкиОтчетности.ОткрытьУопПоСценарию(Сценарий,ПериодОтчета.ДатаНачала,Периодичность,Регламент);
	
КонецПроцедуры	

&НаКлиенте
Процедура РегламентПриИзменении(Элемент)
	
	Элементы.Организация.Доступность = Истина;
	ОбработатьИзменениеРегламента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУОПНажатие(Элемент)
	Если ЗначениеЗаполнено(УправлениеПериодом) Тогда
		 ПоказатьЗначение(,УправлениеПериодом);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидаОтчета()
	
	ПараметрыОтчета.Очистить();
	
	Для Каждого ПараметрВидаОтчета Из ВидОтчета.ПараметрыОтчета Цикл
		
		НоваяСтрокаПараметр = ПараметрыОтчета.Добавить();
		
		НоваяСтрокаПараметр.Код = ПараметрВидаОтчета.Код;
		НоваяСтрокаПараметр.Наименование = ПараметрВидаОтчета.Наименование;
		НоваяСтрокаПараметр.Значение = ПараметрВидаОтчета.ЗначениеПоУмолчанию;
		НоваяСтрокаПараметр.ЗначениеСтрока = Строка(ПараметрВидаОтчета.ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПараметрыОтчетаЗначениеПриИзменении(Элемент)
	
	Элементы.ПараметрыОтчета.ТекущиеДанные.ЗначениеСтрока = Строка(Элементы.ПараметрыОтчета.ТекущиеДанные.Значение);
	
КонецПроцедуры

#КонецОбласти
