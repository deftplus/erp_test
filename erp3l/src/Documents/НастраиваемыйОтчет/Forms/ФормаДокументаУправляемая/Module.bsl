

&НаКлиенте
Перем ТекЭкземплярОтчета;

&НаКлиенте
Перем СтруктураСтрока;

&НаКлиенте
Перем ДанныеЯчейкиСтар;


&НаСервере
Перем мКэшВычисляемыхПолей;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураСостояний = Новый Структура;
	РасширениеПроцессыИСогласованиеУХ.ЗаполнитьСтруктуруСостояний(СтруктураСостояний);
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
	
	#Область УниверсальныеПроцессыСогласование
		НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта();
	#КонецОбласти

	Если Параметры.СозданаВФормеГрупповогоРедактирования Тогда
		
		СозданаВФормеГрупповогоРедактирования=Истина;
		ВыбраннаяВалюта=Параметры.мТекущаяВалюта;
		
		РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(Параметры.АдресВременногоХранилищаОбъекта);
						
		ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
		
		ЗаполнитьСписокСпособовОтображения();
		РабочийОбъект.СпособВывода=Объект.СпособВывода;
		
		ЗаполнитьСписокВыбораВалютСервер();
		Заблокирован=Параметры.ВозможноРедактирование;
		ВозможноРедактирование=Параметры.ВозможноРедактирование;
						
		ТекВидОтчета=РабочийОбъект.ВидОтчета;
		
		ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(РабочийОбъект.ПравилоОбработки);
		
		РабочийОбъект.УправляемыйРежим=Истина;
		
		Если РабочийОбъект.мТекущаяВалюта=Неопределено Тогда
			РабочийОбъект.мТекущаяВалюта=ВыбраннаяВалюта;
		КонецЕсли;
		
		Если Параметры.СрезПоВерсиям Тогда
			
			РабочийОбъект.СрезПоВерсиям=Истина;
			РабочийОбъект.СписокВерсий=Параметры.СписокВерсий;
			РабочийОбъект.ИнициализироватьКонтекст();
			
			Для Каждого Элемент ИЗ Элементы Цикл
				
				Если Элемент.Имя="ПолеТабличногоДокументаМакет" ИЛИ Элемент.Имя="ТабДерево"
					ИЛИ ТипЗнч(Элемент)=Тип("ГруппаФормы") 
					ИЛИ ТипЗнч(Элемент)=Тип("ДекорацияФормы") Тогда
					
					Продолжить;
					
				Иначе
					
					Элемент.Доступность=Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Элементы.СпособВыводаФорма.Доступность=Истина;
			Элементы.Раскрытие.Доступность=Истина;
			Элементы.КонтекстноеМенюПолеТабличногоДокументаМакетОтобразитьРаскрытие.Доступность=Истина;
			
		Иначе
			
			Элементы.ФормаРаботаСВерсиями.Доступность				= Объект.ВидОтчета.СохранятьИсториюИзменений;
			Элементы.ДействияФормыКорректировка.Доступность			= Элементы.ФормаРаботаСВерсиями.Доступность;
			
		КонецЕсли;
		
		Если Не РабочийОбъект.ОсновнаяВалюта=РабочийОбъект.мТекущаяВалюта Тогда
			
			РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения();
			
		КонецЕсли;
				
		ОбновитьДанныеФормыСервер(РабочийОбъект);
		
	Иначе
		
		ЗаполнитьСписокСпособовОтображения();
		
		ДанныеСостояний = РасширениеПроцессыИСогласованиеУХ.ВернутьДанныеСостоянийЭкземпляраОтчета(Объект.Ссылка);
		СостояниеЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСостояний, "СостояниеЗаявки");
		НовоеСостояниеДоИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСостояний, "СостояниеЗаявки");
		Если ЗначениеЗаполнено(НовоеСостояниеДоИзменения) Тогда
			СостояниеСогласованияДоИзменения = НовоеСостояниеДоИзменения;
		Иначе
			// Изменений состояний не было.
		КонецЕсли;
		
		РабочийОбъект = РеквизитФормыВЗначение("Объект");
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			РабочийОбъект.мКопирование = Истина;
			РабочийОбъект.мКопируемыйДокумент = Параметры.ЗначениеКопирования;
			Копирование=Истина;
		КонецЕсли;
	
		ТекВидОтчета=РабочийОбъект.ВидОтчета;
		ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(РабочийОбъект.ПравилоОбработки);

		ЗаполнитьСписокВыбораВалютСервер();
		ВыбраннаяВалюта=РабочийОбъект.ОсновнаяВалюта;
		
		ПроверитьЗавершениеРасчетовЗависимыхПоказателей();
		
		РабочийОбъект.УправляемыйРежим=Истина;
		ОбновитьВидимостьПанелиРаскрытияИДопЯзыков(РабочийОбъект);
						
		Если ЗначениеЗаполнено(РабочийОбъект.Ссылка) Тогда
			
			РабочийОбъект.ПроверитьКонтекстИнициализирован();
			
			Инициатор = РабочийОбъект.Исполнитель;
			Согласующий = РабочийОбъект.Проверяющий;
			
			ИспользуетсяМарщрутСогласования = РасширениеПроцессыИСогласованиеУХ.ОпределитьИспользованиеМаршрутаСогласования(Согласующий);
			
			Если ЗначениеЗаполнено(Параметры.мТекущаяВалюта) Тогда
				ВыбраннаяВалюта=Параметры.мТекущаяВалюта;
			КонецЕсли;
				
			РабочийОбъект.СпособВывода=Объект.СпособВывода;
			ТекущаяТочность=РабочийОбъект.УровеньТочности;
			
			Если ЗначениеЗаполнено(Объект.ПравилоОбработки) Тогда
				
				ШапкаСообщения=""+РабочийОбъект+": ";
				
				Если Объект.ПравилоОбработки.ПересчитыватьПриОткрытии  Тогда
					
					Если ПроверитьВозможностьЗаписи(РабочийОбъект) Тогда
						
						ПоместитьРабочийОбъект(РабочийОбъект);
						ЗаполнитьДокумент("ПоследнийСпособ");
						ЗаписатьЭкземплярОтчета();
						Модифицированность=Ложь;
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ШапкаСообщения+" "+НСтр("ru = ' для правила обработки установлен флаг ""Пересчитывать при открытии"". Данные обновлены.'"),,,СтатусСообщения.Информация);
						
					Иначе
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ШапкаСообщения+" "+НСтр("ru = ' для правила обработки установлен флаг ""Пересчитывать при открытии"", но данные не обновлены.'"),,,СтатусСообщения.Внимание);
						ОбновитьДанныеФормыСервер(РабочийОбъект);
						Элементы.Редактирование.Пометка=Ложь;
						Элементы.ГруппаРазрешитьРедактирование.Видимость = Истина;
						
					КонецЕсли;	
					
				ИначеЕсли (НЕ РабочийОбъект.ТабПараметрыПоказателей.Найти(Истина,"ПересчитыватьПриОткрытии")=Неопределено) Тогда
					
					Если ПроверитьВозможностьЗаписи(РабочийОбъект) Тогда
						
						РабочийОбъект.ПоказателиДляЗаполнения=РабочийОбъект.ТабПараметрыПоказателей.Скопировать(Новый Структура("ПересчитыватьПриОткрытии",Истина)).ВыгрузитьКолонку("Ссылка");
						
						ПоместитьРабочийОбъект(РабочийОбъект);
						ЗаполнитьДокумент("ПоследнийСпособ");
						ЗаписатьЭкземплярОтчета(, , , Ложь);
						Модифицированность=Ложь;
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ШапкаСообщения+" "+НСтр("ru = ' для части показателей установлен флаг ""Пересчитывать при открытии"". Данные обновлены.'"),,,СтатусСообщения.Информация);
						
					Иначе
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ШапкаСообщения+" "+НСтр("ru = ' для части показателей установлен флаг ""Пересчитывать при открытии"", но данные не обновлены.'"),,,СтатусСообщения.Внимание);
						ОбновитьДанныеФормыСервер(РабочийОбъект);
						Элементы.Редактирование.Пометка=Ложь;
						Элементы.ГруппаРазрешитьРедактирование.Видимость = Истина;
						
					КонецЕсли;
	
				Иначе
					
					ОбновитьДанныеФормыСервер(РабочийОбъект);
					Элементы.Редактирование.Пометка=Ложь;
					Элементы.ГруппаРазрешитьРедактирование.Видимость = Истина;
					
				КонецЕсли;
				
			Иначе
				
				ОбновитьДанныеФормыСервер(РабочийОбъект);
				Элементы.Редактирование.Пометка=Ложь;
				Элементы.ГруппаРазрешитьРедактирование.Видимость = Истина;
				
			КонецЕсли;
			
		Иначе
			
			ИнициализацияНаКлиенте = Истина;
			
			РабочийОбъект.Дата = ТекущаяДата();
			РабочийОбъект.УстановитьНовыйНомер();
			РабочийОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
			РабочийОбъект.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;	
			
			ПоместитьРабочийОбъект(РабочийОбъект);
						
			АдресПараметровИниициализации = Параметры.АдресПараметровИниициализации;
			ИнициализироватьФормуНовогоСервер();

		КонецЕсли;
		
		Элементы.ФормаРаботаСВерсиями.Доступность				= Объект.ВидОтчета.СохранятьИсториюИзменений;
		Элементы.ДействияФормыКорректировка.Доступность			= Элементы.ФормаРаботаСВерсиями.Доступность;
		
		Если РасширениеПроцессыИСогласованиеУХ.СогласованиеЧерезРакурс(Объект.ВидОтчета) Тогда
			
			Элементы.ГруппаСтатусыСогласования.Видимость = Ложь;
			Элементы.ДекорацияРакурсы.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		
		Объект.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		
	КонецЕсли;
	
	#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
	#КонецОбласти	
	
	МаксАналитикОтчета = РабочийОбъект.МаксАналитикОтчета;
	МаксАналитикПоказателя = РабочийОбъект.МаксАналитикПоказателя;
	
	// Получим данные по используемым аналитикам
	
	Если ЗначениеЗаполнено(ТекВидОтчета) Тогда
		
		Для Инд = 1 По ЧислоДопАналитик Цикл
			
			Если ТекВидОтчета.МетаДанные().Реквизиты.Найти("ВидАналитики" + Инд) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидАналитики = ТекВидОтчета["ВидАналитики"+Инд];
			
			Если Не ПустаяСтрока(ВидАналитики) Тогда
				
				ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
				ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
				Элементы["АналитикаОтчета"+Инд].Видимость=Истина;
				Элементы["АналитикаОтчета"+Инд].Заголовок=Строка(ВидАналитики);
				
				МаксАналитикОтчета=МаксАналитикОтчета+1;
				
			Иначе
				
				Элементы["АналитикаОтчета"+Инд].Видимость=Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.Проект.Видимость							= ТекВидОтчета.РазделениеПоПроектам;
		Элементы.СвернутьПоПроектам.Видимость				= ТекВидОтчета.РазделениеПоПроектам;
		Элементы.СвернутьПоОрганизациямПроекта.Видимость	= ТекВидОтчета.РазделениеПоПроектам;
		СохранятьИсториюИзменений							= ТекВидОтчета.СохранятьИсториюИзменений;
				
	КонецЕсли;
	
	Заголовок = НСтр("ru = ' Экземпляр отчета '") + Объект.ВидОтчета+": " 
	+ "<" + ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация, "") + ">"
	+ "<" + ?(ЗначениеЗаполнено(Объект.Проект), Объект.Проект, "") + ">"
	+ "<" + ?(ЗначениеЗаполнено(Объект.ПериодОтчета), Объект.ПериодОтчета, "")+">"
	+ ?(ЗначениеЗаполнено(Объект.ОсновнаяВалюта), " " + НСтр("ru = 'Валюта отображения: '") + Объект.ОсновнаяВалюта, "");
	
	ВычислятьПриИзменении=Истина;
	Элементы.Вычислить.ПодчиненныеЭлементы.ДействияФормыВычислятьПриИзменении.Пометка=Истина;
	
	УправлятьДоступностьюЭлементовФормы();

	Элементы.ДействияФормыКорректировка.Пометка	= Ложь;
	Элементы.НеВноситьИзменения.Пометка			= Объект.НеВноситьИзменения;
	
	ЭтаФорма.КоманднаяПанель.Доступность=НЕ Объект.ПометкаУдаления;
	ЭтаФорма.Элементы.ГруппаРазрешитьРедактирование.Доступность=НЕ Объект.ПометкаУдаления;
	
	Элементы.ФормаОтобразитьПротокол.Видимость=ЕстьПротоколируемыеОшибки();
	
	ЭтоУправлениеХолдингом=ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Элементы.ГруппаЗаполнение.Видимость=ЭтоУправлениеХолдингом;
	Элементы.ФормаЗаполнитьБМ.Видимость=НЕ ЭтоУправлениеХолдингом;
			
	Если ИспользуетсяМарщрутСогласования И ОбщегоНазначения.ПодсистемаСуществует("ПодсистемыУХ.ПроцессыИСогласование") Тогда
		ОбщийМодульДействияСогласованиеУХСервер = ОбщегоНазначения.ОбщийМодуль("ДействияСогласованиеУХСервер");
		ОбщийМодульДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	КонецЕсли;
	// Определение способа редактирования настроек экземпляра отчета.
	СпособРедактированияВОтдельнойФорме = Истина;
	Элементы.ФормаГруппаНастройки.Видимость		 = СпособРедактированияВОтдельнойФорме;
	Элементы.ОсновныеРеквизиты.Видимость		 = НЕ СпособРедактированияВОтдельнойФорме;
	Элементы.НастройкиОтчета.Видимость			 = НЕ СпособРедактированияВОтдельнойФорме;
	Элементы.ДополнительныеРеквизиты.Видимость	 = НЕ СпособРедактированияВОтдельнойФорме;
	Если СпособРедактированияВОтдельнойФорме Тогда
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	ПроверитьВозможностьОтображенияВТекущемРежиме();
	
	Элементы.ГруппаЗаполнение.Доступность=Ложь;
	
	РасширениеПроцессыИСогласованиеУХ.ПриСозданииНаСервереОбъект(ЭтаФорма);
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Функция ПроверитьЗавершениеРасчетовЗависимыхПоказателей()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеРасчетыЗависимостей.ВидОтчета КАК ВидОтчета
	|ИЗ
	|	РегистрСведений.ТекущиеРасчетыЗависимостей КАК ТекущиеРасчетыЗависимостей
	|ГДЕ
	|	ТекущиеРасчетыЗависимостей.ВидОтчета = &ВидОтчета
	|	И ТекущиеРасчетыЗависимостей.Организация = &Организация
	|	И ТекущиеРасчетыЗависимостей.ПериодОтчета = &ПериодОтчета
	|	И ТекущиеРасчетыЗависимостей.Сценарий = &Сценарий";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(Объект["Аналитика"+Индекс]) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И Аналитика"+Индекс+"=&Аналитика"+Индекс;
			
			Запрос.УстановитьПараметр("Аналитика"+Индекс,Объект["Аналитика"+Индекс]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВидОтчета",		Объект.ВидОтчета);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	Объект.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",		Объект.Сценарий);
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Элементы.ДекорацияПересчет.Видимость=Ложь;
		Возврат Истина;
		
	Иначе
		
		Элементы.ДекорацияПересчет.Видимость=Истина;
		Возврат Ложь;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьЗавершениеРасчетовЗависимыхПоказателей()

&НаСервере
Процедура ЗаполнитьСписокСпособовОтображения()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка,
	|	БланкиОтчетов.Наименование
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",Объект.ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Элементы.СпособВыводаФорма.СписокВыбора.Очистить();
	
	Пока Результат.Следующий() Цикл
		
		Элементы.СпособВыводаФорма.СписокВыбора.Добавить(Результат.Ссылка,"Бланк "+Результат.Наименование,,БиблиотекаКартинок.БланкиОтчетов);
		
	КонецЦикла;
	
	Элементы.СпособВыводаФорма.СписокВыбора.Добавить("Дерево", НСтр("ru = 'Дерево строк'"));
	Элементы.СпособВыводаФорма.СписокВыбора.Добавить("ДеревоГруппировка", НСтр("ru = 'Дерево строк (группировка по аналитикам)'"));
	Элементы.СпособВыводаФорма.СписокВыбора.Добавить("ДеревоГруппировкаСИерархией", НСтр("ru = 'Дерево строк (группировка по аналитикам с учетом иерархии)'"));
	
	Если ЗначениеЗаполнено(Объект.СпособВывода) Тогда
		
		Если СтрНайти(Объект.СпособВывода,"Бланк")>0 Тогда
			
			СпособВыводаФорма=Объект.ШаблонОтчета;
			
		Иначе
			
			СпособВыводаФорма=Объект.СпособВывода;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ШаблонОтчета) Тогда
		
		СпособВыводаФорма=Объект.ШаблонОтчета;
		Объект.СпособВывода="Бланк "+Объект.ШаблонОтчета;
		
	Иначе
		
		Объект.СпособВывода="Дерево";
		СпособВыводаФорма=Объект.СпособВывода;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСписокСпособовОтображения() 

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	Если ЕстьОшибкаРазделенногоДоступа Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета=РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();
	
	ЗаполнитьЗначенияСвойств(РабочийОбъект,Объект,,"Ссылка");
	
	РабочийОбъект.ИзмененКлючевойРеквизит		= ИзмененКлючевойРеквизит;
	РабочийОбъект.УровеньТочности				= ТекущаяТочность;
	РабочийОбъект.ТекущийДелитель				= ТекущийДелитель;
	РабочийОбъект.ЕдиницаИзмеренияОтображения	= Объект.ЕдиницаИзмерения;	
	РабочийОбъект.ДанныеПараметрикиАктуальны	= ДанныеПараметрикиАктуальны;
	
	РабочийОбъект.СостояниеДоИзменения 			= СостояниеСогласованияДоИзменения;
	
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьСправочникОбъект()

&НаСервереБезКонтекста
Функция ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы)
	
	РабочийОбъект								= ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(ДанныеФормы.РабочийОбъектАдрес);
	РабочийОбъект.ИзмененКлючевойРеквизит		= ДанныеФормы.ИзмененКлючевойРеквизит;
	РабочийОбъект.ДанныеПараметрикиАктуальны	= ДанныеФормы.ДанныеПараметрикиАктуальны;
	
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьРабочийОбъектБезКонтекста()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект)
	
	РабочийОбъектАдрес = ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(РабочийОбъект, "Объект");
	
	ИзмененКлючевойРеквизит			= РабочийОбъект.ИзмененКлючевойРеквизит;
	ДанныеПараметрикиАктуальны		= РабочийОбъект.ДанныеПараметрикиАктуальны;
	СписокРедактируемыхОбластей		= РабочийОбъект.СписокРедактируемыхОбластей;
	СписокРедактируемыхПоказателей 	= РабочийОбъект.СписокРедактируемыхПоказателей;
	
	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, Объект.ВидОтчета);
	
	Если СтруктураВалют <> Неопределено Тогда
		Для каждого СтрокаВалюта Из Объект.ДополнительныеВалюты Цикл	
			СтрокаВалюта.Пометка = СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрокаВалюта.Валюта) <> Неопределено;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСправочникОбъект()

&НаСервереБезКонтекста
Процедура ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект)
	
	 ДанныеФормы.РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ДанныеФормы.ИдентификаторРодителя);
     ДанныеФормы.ИзмененКлючевойРеквизит		= РабочийОбъект.ИзмененКлючевойРеквизит;
	 ДанныеФормы.ДанныеПараметрикиАктуальны		= РабочийОбъект.ДанныеПараметрикиАктуальны;
	
КонецПроцедуры // ПоместитьРабочийОбъектБезКонтекста()

&НаСервере
Процедура ОбновитьОбъектВХранилище(ПроверитьДанныеПараметрическойНастройки=Ложь)
		
	РабочийОбъект=ПолучитьРабочийОбъект();
		
	Если ПроверитьДанныеПараметрическойНастройки И (НЕ РабочийОбъект.ДанныеПараметрикиАктуальны) Тогда
		
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект,,Истина);
		
	КонецЕсли;
	
	ДанныеПараметрикиАктуальны=РабочийОбъект.ДанныеПараметрикиАктуальны;
	РабочийОбъект.глОсновнойЯзык=НомерОсновногоЯзыка;	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьОбъектВХранилище()

&НаСервере
Процедура ЗаполнитьСписокВыбораВалютСервер()
	
	Элементы.ВыбраннаяВалюта.СписокВыбора.Очистить();
	
	ТекВыбраннаяВалюта = ВыбраннаяВалюта;
	
	Если ЗначениеЗаполнено(Объект.ОсновнаяВалюта) Тогда
		
		Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(Объект.ОсновнаяВалюта, Объект.ОсновнаяВалюта.Наименование);
		
	КонецЕсли;
	
	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, Объект.ВидОтчета);
	Для Каждого СтрВалюта ИЗ Объект.ДополнительныеВалюты Цикл
		
		Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(СтрВалюта.Валюта, СтрВалюта.Валюта.Наименование);
		СтрВалюта.Пометка = (СтруктураВалют <> Неопределено) И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрВалюта.Валюта) <> Неопределено);
		
	КонецЦикла;
	
	Если НЕ Элементы.ВыбраннаяВалюта.СписокВыбора.НайтиПоЗначению(ТекВыбраннаяВалюта) = Неопределено Тогда
		ВыбраннаяВалюта = ТекВыбраннаяВалюта;
	Иначе
		ВыбраннаяВалюта = Объект.ОсновнаяВалюта;
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначениеДелителяСервер()
	
	Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		ТекущийДелитель = 1000000;
	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		ТекущийДелитель =  1000;
	Иначе
		ТекущийДелитель =  1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВВыбраннойВалюте(РабочийОбъект, ПересчитатьВсе = Ложь)
				
	// формируем структуру параметров
	РабочийОбъект.СформироватьСтруктуруПараметров();
		
	Если НЕ РабочийОбъект.ОсновнаяВалюта=РабочийОбъект.мТекущаяВалюта Тогда 
		
		РабочийОбъект.ЗаполнитьПараметрыВМакете(ПолеТабличногоДокументаМакет, РабочийОбъект.мТекущаяВалюта);
		РабочийОбъект.ОбновитьЗначенияПоказателей(РабочийОбъект.мПоказателиВВалюте, ПолеТабличногоДокументаМакет);
		
	Иначе
		
		РабочийОбъект.ЗаполнитьПараметрыВМакете(ПолеТабличногоДокументаМакет);
		РабочийОбъект.ОбновитьЗначенияПоказателей(?(РежимКорректировки,РабочийОбъект.мКорректировкиПоказателей,РабочийОбъект.мПоказатели), ПолеТабличногоДокументаМакет);
			
	КонецЕсли;
		
	Если Элементы.ДействияФормыРаскрытиеВБланке.Пометка Тогда
		
		РабочийОбъект.ВывестиРаскрытиеВТелеОтчета(ПолеТабличногоДокументаМакет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдалениеВерсий()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.СписокИспользуемыхВерсий=Неопределено;
	
	РабочийОбъект.ИнициализироватьКонтекст();
	
	РабочийОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
	Врем_ФормированиеДвиженийПриЗаписи = РабочийОбъект.ФормированиеДвиженийПриЗаписи;
	Верм_ПроверкаПриЗаписи             = РабочийОбъект.ПроверкаПриЗаписи;
	
	РабочийОбъект.ФормированиеДвиженийПриЗаписи = Ложь;
	РабочийОбъект.ПроверкаПриЗаписи             = Ложь;
	РабочийОбъект.Записать();
	РабочийОбъект.ФормированиеДвиженийПриЗаписи = Врем_ФормированиеДвиженийПриЗаписи;
	РабочийОбъект.ПроверкаПриЗаписи             = Верм_ПроверкаПриЗаписи;
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры // ОбработатьУдалениеВерсий()

&НаСервере
Процедура СвернутьДоВерсии(ВерсияДляСвертки)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписаниеВерсий.Ссылка
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОписаниеВерсий КАК ОписаниеВерсий
		|		ПО ВерсииЗначенийПоказателей.Владелец = ОписаниеВерсий.Ссылка
		|ГДЕ
		|	ВерсииЗначенийПоказателей.Регистратор ССЫЛКА Документ.РучныеКорректировки
		|	И ОписаниеВерсий.ЭкземплярОтчета = &ЭкземплярОтчета
		|	И ОписаниеВерсий.Код <= &КодОписанияВерсии
		|УПОРЯДОЧИТЬ ПО
		|	ОписаниеВерсий.Код";
		
		Запрос.УстановитьПараметр("ЭкземплярОтчета", РабочийОбъект.Ссылка);
		Запрос.УстановитьПараметр("КодОписанияВерсии", ВерсияДляСвертки.Код);
		
		ТаблицаОписанийВерсийРучныхОпераций = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаОписанийВерсийРучныхОпераций=Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Если ТаблицаОписанийВерсийРучныхОпераций.Количество() = 0 Тогда
		РабочийОбъект.СвернутьВерсии(Неопределено, ВерсияДляСвертки);
	Иначе
		РабочийОбъект.СвернутьВерсии(Неопределено, ТаблицаОписанийВерсийРучныхОпераций[0].Ссылка);
		Для Инд = 0 По ТаблицаОписанийВерсийРучныхОпераций.Количество() - 2 Цикл
			РабочийОбъект.СвернутьВерсии(ТаблицаОписанийВерсийРучныхОпераций[Инд].Ссылка, ТаблицаОписанийВерсийРучныхОпераций[Инд + 1].Ссылка);
		КонецЦикла;
		РабочийОбъект.СвернутьВерсии(ТаблицаОписанийВерсийРучныхОпераций[ТаблицаОписанийВерсийРучныхОпераций.Количество() - 1].Ссылка, ВерсияДляСвертки);
	КонецЕсли;
	
	РабочийОбъект.СписокИспользуемыхВерсий=Неопределено;
	РабочийОбъект.ИнициализироватьКонтекст();
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры // ОбработатьУдалениеВерсий()

&НаСервере
Процедура УстановитьСпособВыбора(ИмяСпособа,РабочийОбъект)
	
	ЭлементВыбора=Элементы.СпособВыводаФорма.СписокВыбора.НайтиПоЗначению(ИмяСпособа);
	РабочийОбъект.СпособВывода=?(ТипЗнч(ИмяСпособа)=Тип("Строка"),ЭлементВыбора.Значение,ЭлементВыбора.Представление);
	СпособВыводаФорма=ЭлементВыбора.Значение;
	Объект.СпособВывода=РабочийОбъект.СпособВывода;
	
КонецПроцедуры // ПолучитьСпособВыбора()

&НаСервере
Процедура ОпределитьСпособВывода(РабочийОбъект)
	
	Если (НЕ ЗначениеЗаполнено(РабочийОбъект.СпособВывода)) ИЛИ СтрНайти(Объект.СпособВывода,"Бланк")>0  Тогда			
		Если ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета) Тогда	
			Если НЕ РабочийОбъект.ШаблонОтчета.РежимБланка = 2 Тогда			
					УстановитьСпособВыбора(РабочийОбъект.ШаблонОтчета,РабочийОбъект);		
			КонецЕсли;	
		Иначе	
			УстановитьСпособВыбора("Дерево",РабочийОбъект);	
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры // ОпределитьСпособВывода()

&НаСервере
Процедура ОбновитьДанныеФормыСервер(РабочийОбъект=Неопределено,НужнаПроверка=Истина)
	
	ТекЕдиницаИзмерения=Объект.ЕдиницаИзмерения;
	
	Если ТабДерево.ПолучитьЭлементы().Количество()>0 Тогда
		
		ТабДерево.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
	ПолучитьЗначениеДелителяСервер();
	
	//////////////////////// Формирование дерева значений //////////////////////////////////////// 
	
	Если РабочийОбъект=Неопределено Тогда
		РабочийОбъект=ПолучитьРабочийОбъект();
	КонецЕсли;
	
	ЯзыкОтображения=РабочийОбъект.глОсновнойЯзык;
	
	ОпределитьСпособВывода(РабочийОбъект);
		
	РабочийОбъект.РежимКорректировки=РежимКорректировки;
	
	Если РабочийОбъект.РежимКорректировки И (НЕ ТипЗнч(РабочийОбъект.мКорректировкиПоказателейРаскрытия)=Тип("ТаблицаЗначений")) Тогда
		РабочийОбъект.ИнициализироватьТаблицыКорректировок();
	КонецЕсли;
	
	Если Не ВыбраннаяВалюта=РабочийОбъект.мТекущаяВалюта Тогда
		
		ТекущаяВалюта=РабочийОбъект.мТекущаяВалюта;
		
		РабочийОбъект.мТекущаяВалюта=ВыбраннаяВалюта;
		
		ПризнакОшибки=Ложь;
			
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения(ПризнакОшибки);
		
		Если ПризнакОшибки Тогда
			
			РабочийОбъект.мТекущаяВалюта=ТекущаяВалюта;
			ВыбраннаяВалюта=ТекущаяВалюта;
			
			Возврат;
			
		КонецЕсли;
		
		Если СтрНайти(Объект.СпособВывода,"Дерево")>0 И НЕ РабочийОбъект.ДанныеРаскрытияИнициализированы Тогда
			РабочийОбъект.ОбновитьКонтекстРаскрытия();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(Объект.СпособВывода,"Бланк")>0 И НЕ Объект.ШаблонОтчета.Пустая() Тогда
		
		Элементы.ПанельОтображения.ТекущаяСтраница=Элементы.ПанельОтображения.ПодчиненныеЭлементы.БланкОтчета;
		МакетОснование=Неопределено;
		
		РабочийОбъект.глОсновнойЯзык=НомерОсновногоЯзыка;
		
		РабочийОбъект.СгенерироватьМакет(ПолеТабличногоДокументаМакет, РабочийОбъект.ШаблонОтчета);

		ОтобразитьВВыбраннойВалюте(РабочийОбъект,Истина);
		
		Если НомерОсновногоЯзыка>0 Тогда
			
			ОбновитьОтображениеЯзыков();
			
		КонецЕсли;
				
	Иначе
		
		Если РабочийОбъект.ТаблицаРаскрытийСтрок=Неопределено ИЛИ РабочийОбъект.ЗапросДанные=Неопределено Тогда
			
			РабочийОбъект.ИнициализироватьДанныеДляОтображения();
						
		КонецЕсли;
		
		РабочийОбъект.ПроверитьКонтекстИнициализирован();
		РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
		
		Если РабочийОбъект.ТабДерево.Строки.Количество()>0 Тогда
			
			Если РабочийОбъект.ТаблицыЗапросаДанные.Количество()>0 Тогда
				
				РабочийОбъект.ПоместитьТаблицыВЗапросы();
				
			Иначе
				
				РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;		
				РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
				РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
				
				РабочийОбъект.ЗапросДанные.Текст="
				|/////////////////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|ТаблицаСтроки.Ссылка КАК Ссылка,
				|ТаблицаСтроки.Код КАК Код,
				|ТаблицаСтроки.Порядок КАК Порядок
				|
				|ПОМЕСТИТЬ СтрокиОтчетов
				|ИЗ	&ТаблицаСтроки КАК ТаблицаСтроки
				|ИНДЕКСИРОВАТЬ ПО Ссылка
				|;
				|ВЫБРАТЬ
				|	мПоказатели.Ссылка КАК Показатель,
				|	мПоказатели.Код,
				|	мПоказатели.Строка,
				|	мПоказатели.Колонка,
				|	мПоказатели.ПорядковыйНомерКолонки,
				|	мПоказатели.НеФинансовый,
				|	мПоказатели.ЧисловойПоказатель,
				|   мПоказатели.ВидКурса,
				|   мПоказатели.СвязанныйПоказатель
				|ПОМЕСТИТЬ ТабПоказатели
				|ИЗ
				|	&мПоказатели КАК мПоказатели
				|ИНДЕКСИРОВАТЬ ПО Показатель
				|;";
				РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",РабочийОбъект.ТаблицаСтроки);
				РабочийОбъект.ЗапросДанные.УстановитьПараметр("мПоказатели",РабочийОбъект.мПоказатели);
				
				РабочийОбъект.ЗапросДанные.Выполнить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		РабочийОбъект.ТекущийДелитель=ТекущийДелитель;
		РабочийОбъект.ТекущаяТочность=ТекущаяТочность;
		
		РабочийОбъект.ОтобразитьДанныеОтчетов();
				
		РеквизитыКДобавлению=Новый Массив;
		РеквизитыКУдалению=Новый Массив;
		
		МаксАналитикОтчета=РабочийОбъект.МаксАналитикОтчета;
		МаксАналитикПоказателя=РабочийОбъект.МаксАналитикПоказателя;
		СписокРедактируемыхПоказателей=РабочийОбъект.СписокРедактируемыхПоказателей;
		
		Если СписокКолонокДерева.Количество()>0 Тогда
			
			Для Каждого Колонка ИЗ СписокКолонокДерева Цикл	
				
				РеквизитыКУдалению.Добавить("ТабДерево."+Колонка.Значение);	
								
			КонецЦикла;
			
			СписокКолонокДерева.Очистить();
			
		КонецЕсли;
		
		Для Каждого Колонка ИЗ РабочийОбъект.ТабДерево.Колонки Цикл
			
			Если Найти(Колонка.Имя,"_")=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СписокКолонокДерева.НайтиПоЗначению(Колонка.Имя)=Неопределено Тогда
				
				СписокКолонокДерева.Добавить(Колонка.Имя,Колонка.Заголовок);
				
				РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
				Колонка.ТипЗначения,
				"ТабДерево",
				Колонка.Заголовок,
				Ложь));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);	
		
		Для Каждого Колонка ИЗ РабочийОбъект.ТабДерево.Колонки Цикл
			
			Если СтрНайти(Колонка.Имя,"_")=0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЭтаФорма.Элементы.Найти(Колонка.Имя)=Неопределено Тогда
				
				ЭтаФорма.Элементы.Добавить(Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ТабДерево);	
				ЭтаФорма.Элементы[Колонка.Имя].ПутьКДанным="ТабДерево."+Колонка.Имя;
				ЭтаФорма.Элементы[Колонка.Имя].Вид=ВидПоляФормы.ПолеВвода;
				ЭтаФорма.Элементы[Колонка.Имя].ДоступныеТипы=Колонка.ТипЗначения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Элемент ИЗ СписокКолонокДерева Цикл
			
			Если ПустаяСтрока(Элемент.Представление) Тогда
				
				ЭтаФорма.Элементы[Элемент.Значение].ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
				
			КонецЕсли;
						
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(РабочийОбъект.ТабДерево,"ТабДерево");
		
		КолонокАналитикиРаскрытия=?(МаксАналитикПоказателя<=1,0,МаксАналитикПоказателя-1);
		ПерваяКолонка=РабочийОбъект.ПерваяКолонка;
						
		РабочийОбъект.ВыгрузитьРасчетныеТаблицы();
		ЗаполнениеВыполнено=Истина;
		
		ЕдиницаИзмерения=ТекЕдиницаИзмерения;
		
		Элементы.ПанельОтображения.ТекущаяСтраница=Элементы.ПанельОтображения.ПодчиненныеЭлементы.ДеревоЗначений;
		
		Элементы.ТабДерево.Обновить();
		
	КонецЕсли;
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	Элементы.ОсновнаяПанель.ТекущаяСтраница=Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.РедактированиеОтчета;
	
	Элементы.ТабДеревоСкопироватьСтрокуРаскрытия.Видимость=(СтрНайти(Объект.СпособВывода,"Дерево")>0);
	// Установим пометку на команду Зафиксировать таблицу в зависимости от наличия фиксирования.
	ЕстьФиксация = НЕ((ПолеТабличногоДокументаМакет.ФиксацияСверху = 0) И (ПолеТабличногоДокументаМакет.ФиксацияСлева = 0));
	Элементы.ПолеТабличногоДокументаМакетЗафиксироватьТаблицуБланк.Пометка = ЕстьФиксация;
КонецПроцедуры // ОбновитьДанныеФормыСервер()

&НаКлиенте
Процедура ТабДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ДанныеАналитики" Тогда
		
		ПолучитьДанныеПоАналитике(Элемент.ТекущиеДанные.НомерСтроки);
		
		Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество()>0 И (НЕ Элементы.ТабДерево.Развернут(ВыбраннаяСтрока)) Тогда
			Элементы.ТабДерево.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоАналитике(НомерСтрокиДерева)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.МассивДобавленныхСтрокКПередаче=Новый Массив;
	
	ВыбраннаяСтрока=РабочийОбъект.ТабДерево.Строки.Найти(НомерСтрокиДерева,"НомерСтроки",Истина);
	
	РабочийОбъект.ИнициализироватьЗапросыОбъекта(Истина);	
	РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	РабочийОбъект.ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ";
	РабочийОбъект.ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",РабочийОбъект.ТабКоординатыОбщ);
	РабочийОбъект.ЗапросКоординаты.Выполнить();
			
	РабочийОбъект.РазвернутьСтрокуПоАналитике(ВыбраннаяСтрока);
	
	// Добавим новые строки в дерево формы
	Для Каждого СтрокаКДобавлению ИЗ РабочийОбъект.МассивДобавленныхСтрокКПередаче Цикл
		
		СтрокаРодитель=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКДобавлению.АдресРодителя);
		ИндексВставки=СтрокаКДобавлению.ИндексВставки;
		
		Если ИндексВставки>=0 Тогда
			
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
			
		Иначе
			
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению.ДанныеНовойСтроки);
		
	КонецЦикла;
	
	РабочийОбъект.ТабКоординатыОбщ=РабочийОбъект.ПолучитьТаблицуИЗЗапроса(РабочийОбъект.ЗапросКоординаты,"ТабКоординатыОбщ");
	
	СброситьЗапросыОбъекта(РабочийОбъект);
	
	РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц.Закрыть();

	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ПолучитьДанныеПоАналитике()

&НаСервере
Функция ОпределитьСтрокуПоАбсолютномуАдресуСервер(АдресСтроки)
	
	ТекСтрока=ТабДерево.ПолучитьЭлементы()[АдресСтроки[0]];
	
	Для Индекс=1 ПО АдресСтроки.Количество()-1 Цикл
		
		ТекСтрока=ТекСтрока.ПолучитьЭлементы()[АдресСтроки[Индекс]];
		
	КонецЦикла;
	
	Возврат ТекСтрока;
			
КонецФункции // ОпределитьСтрокуПоАбсолютномуАдресу()

&НаКлиенте
Функция ОпределитьСтрокуПоАбсолютномуАдресу(АдресСтроки)
	
	ТекСтрока=ТабДерево.ПолучитьЭлементы()[АдресСтроки[0]];
	
	Для Индекс=1 ПО АдресСтроки.Количество()-1 Цикл
		
		ТекСтрока=ТекСтрока.ПолучитьЭлементы()[АдресСтроки[Индекс]];
		
	КонецЦикла;
	
	Возврат ТекСтрока;
			
КонецФункции // ОпределитьСтрокуПоАбсолютномуАдресу()

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтчетаПоУмолчанию(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

// Проверяет корректность данных в объекте отчета РабочийОбъектВход
// перед его заполнением в режиме РежимЗаполненияВход.
&НаСервере
Функция ПроверитьРабочийОбъектПередЗаполнением(РежимЗаполненияВход, РабочийОбъектВход)
	РезультатФункции = Истина;
	Если РежимЗаполненияВход = "АвтоматическиСвернувПоАналитикам" Тогда
		// Поиск пустых аналитик.
		ЕстьПустыеАналитикиОтчета = Ложь;
		Для Инд = 1 По ЧислоДопАналитик Цикл
			ТекВидОтчета = РабочийОбъектВход.ВидОтчета["ВидАналитики" + Инд];
			ТекАналитика = РабочийОбъектВход["Аналитика" + Инд];
			Если (ЗначениеЗаполнено(ТекВидОтчета)) И (НЕ ЗначениеЗаполнено(ТекАналитика)) Тогда
				ЕстьПустыеАналитикиОтчета = Истина;
				Прервать;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
		// Когда нет пустых аналитик, считаем проверку проваленной.
		Если НЕ ЕстьПустыеАналитикиОтчета Тогда
			ТекстСообщения = НСтр("ru = 'Заполнение по аналитикам отчетов допустимо только в случае, когда одна из таких аналитик не задана'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	ИначеЕсли РежимЗаполненияВход = "АвтоматическиКонсолидация" Тогда
		// Проверка, что организация является консолидирующей.
		ЭтоКонсолидирующаяОрганизация = УправлениеРабочимиПроцессамиУХ.ОрганизацияЯвляетсяКонсолидирующей(
			РабочийОбъектВход.Организация, РабочийОбъектВход.Сценарий, РабочийОбъектВход.ПериодОтчета);
		Если Не ЭтоКонсолидирующаяОрганизация Тогда
			ТекстСообщения = НСтр("ru = 'Организация %Организация% не является консолидирующей. Консолидация по периметру доступна только для консолидирующих организационных единиц.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(РабочийОбъектВход.Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;		// Для прочих случаев не осуществляем проверку.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Получает способ заполнения из режима РежимЗаполненияВход и заполняет 
//по этому способу отчет РабочийОбъект.
&НаСервере
Процедура ЗаполнитьОтчетПоРежиму(РежимЗаполненияВход, РабочийОбъект)
	Если ЗначениеЗаполнено(РежимЗаполненияВход) Тогда
		// Режим указан явно. Получим способ заполнения из него.
		Если РежимЗаполненияВход = "ПоследнийСпособ" Тогда
			
			СпособЗаполнения = РабочийОбъект.СпособФормированияОтчета;
			СпособФормированияРучноеЗаполнение = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
			ЭтоРучноеЗаполнение = (СпособЗаполнения = СпособФормированияРучноеЗаполнение);
			Если (НЕ ЗначениеЗаполнено(СпособЗаполнения)) ИЛИ ЭтоРучноеЗаполнение Тогда
				// Способ определить не удалось, либо отчет заполняется вручную. Заполним по умолчанию.
				РабочийОбъект.ПутьКФайлуADO = РабочийОбъект.ФайлИмпорта;
				СпособЗаполнения = Неопределено;
				РабочийОбъект.ЗаполнитьОтчетПоУмолчанию();
				
			Иначе
				
				РабочийОбъект.ЗаполнитьОтчет(СпособЗаполнения);
				
			КонецЕсли;
			
		Иначе
			// Получим способ заполнения из режима.
			СпособЗаполнения = Перечисления.СпособыФормированияОтчетов[РежимЗаполненияВход];
			РабочийОбъект.ЗаполнитьОтчет(СпособЗаполнения);
					
		КонецЕсли;
			
	Иначе
		// Режим не указан. Заполним отчет по умолчанию.
		СпособЗаполнения = Неопределено;
		РабочийОбъект.ЗаполнитьОтчетПоУмолчанию();
		
	КонецЕсли;
КонецПроцедуры

// Выполняет заполнение объекта отчета РабочийОбъект в режиме РежимЗаполнения. Когда режим не
// указан - выполняется заполнение по умолчанию. Когда не указан рабочий объект - будет считан
// снова.
&НаСервере
Процедура ЗаполнитьДокумент(РежимЗаполнения = Неопределено, ПериодичностьСвертывания = Неопределено, Знач РабочийОбъект = Неопределено)
	// Получим рабочий объект, если не задан явно.
	Если РабочийОбъект = Неопределено Тогда
		РабочийОбъект = ПолучитьРабочийОбъект();
	Иначе
		// Рабочий объект задан параметром функции.
	КонецЕсли;
	
	// Проверка на возможность заполнения по выбранному режиму.
	РезультатПроверки = ПроверитьРабочийОбъектПередЗаполнением(РежимЗаполнения, РабочийОбъект);
	Если НЕ РезультатПроверки Тогда
		Возврат;		// Проверка не пройдена. Отменяем заполнение.
	Иначе
		// Проверка пройдена успешно. Можно выполнять далее.
	КонецЕсли;
	
	// Установка реквизита ПериодичностьСвертывания для свёртки по периоду.
	Если РежимЗаполнения = "АвтоматическиСвернувПоПериоду" Тогда
		РабочийОбъект.ПериодичностьСвертывания = ПериодичностьСвертывания;
	КонецЕсли;
	
	// Проверка на включение режима редактирования перед заполнением.
	Если Не Заблокирован Тогда	
		
		Заблокирован = ПодготовитьОтчетДляРедактирования(РабочийОбъект);
		
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка = Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	// Подготовка рабочего объекта.	
	РабочийОбъект.СнятьИндексыСЛогаРаскрытий();
	РабочийОбъект.ПутьКФайлуADO = ПутьКФайлуADO;
	
	// Непосредственное заполнение отчета выбранным способом.
	ЗаполнитьОтчетПоРежиму(РежимЗаполнения, РабочийОбъект);
	
	// Действия с заполненным объектом.	
	РабочийОбъект.УстановитьИндексыНаЛогРаскрытий();
	УправлятьДоступностьюЭлементовФормы();
	
	// Установка состояния согласования объекта.
	Если РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Запланирован Тогда
		// Изменим состояние отчета на Выполняется.
		СостоянияОтчетовВыполняется = Перечисления.СостоянияОтчетов.Выполняется;
		РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(РабочийОбъект, СостоянияОтчетовВыполняется);
				
		//обновим состояние на форме		
		СостояниеЗаявки = РабочийОбъект.Состояние;
		СостояниеПриИзмененииСервер();		
		
	КонецЕсли;
	
	// Обновление данных на форме.
	ОбработатьРезультатРасчетов(РабочийОбъект);
	ОбновитьДанныеФормыСервер(РабочийОбъект);
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокумент()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
		
	Если Не Заблокирован Тогда	
		
		Заблокирован=ПодготовитьОтчетДляРедактирования(РабочийОбъект);
		
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка=Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РабочийОбъект.СнятьИндексыСЛогаРаскрытий();
	
	РабочийОбъект.ОчиститьВсе();
	
	Если ЗначениеЗаполнено(РабочийОбъект.мТекущаяВалюта) И (НЕ РабочийОбъект.мТекущаяВалюта=РабочийОбъект.ОсновнаяВалюта) Тогда
		
		РабочийОбъект.мПоказателиРаскрытияВВалюте.Очистить();
		
		Для Каждого СтрПоказатель ИЗ РабочийОбъект.мПоказателиВВалюте Цикл
			
			СтрПоказатель.Значение=0;
			
		КонецЦикла;
		
	КонецЕсли;
			
	РабочийОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
	
	РабочийОбъект.УстановитьИндексыНаЛогРаскрытий();
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры // ОчиститьДокумент()


// Пересчитывает вычисляемые показатели и обновляет основной макет на форме.
//
&НаСервере
Процедура ПересчитатьВычисляемыеПоказатели(МассивКодовПоказателей=Неопределено)
	
	РабочийОбъект=ПолучитьРабочийОбъект();	
	РабочийОбъект.ВычислятьПриИзменении=ВычислятьПриИзменении;
	
	Если Не Заблокирован Тогда	
		
		Заблокирован=ПодготовитьОтчетДляРедактирования(РабочийОбъект);
		
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка=Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ Объект.СпособВывода="Дерево" Тогда
		ПересчитатьВычисляемыеПоказателиБланк(РабочийОбъект);
		ПоместитьРабочийОбъект(РабочийОбъект);	
		Возврат;
	КонецЕсли;
		
	// заполняем параметры
	РабочийОбъект.СформироватьСтруктуруПараметров();
	
	ПротоколируемыеСобытияУХ.Начать(РабочийОбъект);
		
	// запускаем код заполнения
	Если НЕ РабочийОбъект.ЗапуститьМодульВычисления(МассивКодовПоказателей) Тогда
		
		РабочийОбъект.ЗавершитьПротоколЗагрузки();
		ОбработатьРезультатРасчетов(РабочийОбъект);
		Возврат;
		
	Иначе
		
		РабочийОбъект.ЗавершитьПротоколЗагрузки();
		
	КонецЕсли;
			
	Модифицированность = Истина;
	
	РабочийОбъект.ИнициализироватьЗапросыОбъекта();
	
	РабочийОбъект.ИзменяемаяЯчейка=Неопределено;
	
	РабочийОбъект.ПолучитьИзмененныеПоказатели(1);
	
	РабочийОбъект.ОтобразитьДанныеОтчетов(Истина);
	
	СброситьЗапросыОбъекта(РабочийОбъект);
	
	Для Каждого ИзмененнаяЯчейка ИЗ РабочийОбъект.МассивИзмененныхОбластей Цикл
		
		ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресуСервер(ИзмененнаяЯчейка.АдресСтроки);
		
		ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-9].Значение;
		
		ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
		
	КонецЦикла;
				
	Элементы.ТабДерево.Обновить();
	
	ОбработатьРезультатРасчетов(РабочийОбъект);
		
	ПоместитьРабочийОбъект(РабочийОбъект);	
	
КонецПроцедуры

// Отображает протокол, если есть протоколирумые ошибки, или 
// если произошли события загрузки.
&НаСервере
Процедура ОбработатьРезультатРасчетов(РабочийОбъект)
	
	Если ТипЗнч(РабочийОбъект.ТаблицаСобытийЗагрузки)=Тип("ТаблицаЗначений") Тогда
		
		ЗначениеВРеквизитФормы(РабочийОбъект.ТаблицаСобытийЗагрузки,"ТаблицаСобытийЗагрузки");
		
	Иначе
		
		ТаблицаСобытийЗагрузки.Очистить();
		
	КонецЕсли;
	
	ТребуетсяОтображатьПротокол = (ЕстьПротоколируемыеОшибки()) ИЛИ (ТаблицаСобытийЗагрузки.Количество() > 0);
	Элементы.ФормаОтобразитьПротокол.Видимость = ТребуетсяОтображатьПротокол;	
	
КонецПроцедуры // ОбработатьРезультатРасчетов() 

//Процедура проверяет, включен ли режим редактирования для документа,
//и разрешает/запрещает редактировать кнопки модификации и табличное поле.
//
&НаСервере
Процедура УправлятьДоступностьюЭлементовФормы(Редактирование = Неопределено)
		
	Элементы.ПолеТабличногоДокументаМакет.Редактирование = Заблокирован;
	Элементы.ФормаРаботаСВерсиями.Доступность=Объект.ВидОтчета.СохранятьИсториюИзменений;
	
	Если НЕ Константы.ПроверятьУтверждениеДанных.Получить() Тогда
		
		Элементы.ЧтениеНеактуальныхЗаписей.Пометка=Истина;
		Элементы.ЧтениеНеактуальныхЗаписей.Доступность=Ложь;
		
	Иначе
		
		Элементы.ЧтениеНеактуальныхЗаписей.Пометка=Объект.ЧтениеНеактуальныхЗаписей;
		
	КонецЕсли;
	
	Элементы.ВСправочнике.Доступность=ЗначениеЗаполнено(Объект.ФайлИмпорта);

КонецПроцедуры


&НаСервере
Функция ПодготовитьОтчетДляРедактирования(РабочийДокумент=Неопределено)
	
	Если НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиПоБланкуОтчета(Объект.ШаблонОтчета,Объект.Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьЗавершениеРасчетовЗависимыхПоказателей() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если РабочийДокумент=Неопределено Тогда
		РабочийОбъект=ПолучитьРабочийОбъект();
	Иначе
		РабочийОбъект=РабочийДокумент;
	КонецЕсли;
					
	Попытка
		
		Если ЕстьОшибкаРазделенногоДоступа Тогда
			
			РабочийОбъект.ИнициализироватьКонтекст();
			ОбновитьДанныеФормыСервер(РабочийОбъект);
			
		КонецЕсли;
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Заблокирован=Истина;
		
		ЕстьОшибкаРазделенногоДоступа=Ложь;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать экземпляр отчета для редактирования:
		|		%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		
		ЕстьОшибкаРазделенногоДоступа=Истина;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	РабочийОбъект.УправляемыйРежим=Истина;
	
	РабочийОбъект.ПроверитьКонтекстИнициализирован();
	РабочийОбъект.ВсегдаЗаполнятьАналитики=Истина;
	
	Если НЕ РабочийОбъект.ДанныеРаскрытияИнициализированы Тогда
		
		РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
		
	КонецЕсли;
	
	Если НЕ РабочийОбъект.мТекущаяВалюта=РабочийОбъект.ОсновнаяВалюта Тогда
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения();
	КонецЕсли;
	
	РабочийОбъект.ОтчетИнициализирован=Истина;

	Если РабочийДокумент=Неопределено Тогда 
		ОбновитьДанныеФормыСервер(РабочийОбъект);		
	КонецЕсли;
	
	Возврат Истина;
					
КонецФункции // ПодготовитьОтчетДляРедактирования()

&НаСервере
Функция ПроверитьВозможностьЗаписи(РабочийОбъект)
	
	Отказ=Ложь;
	
	СтрокаШаблона = Нстр("ru = 'Документ ""%1"" не может быть переведен в режим редактирования:'");		
	
	ШапкаОшибки = СтрШаблон(СтрокаШаблона, РабочийОбъект);
		
	РабочийОбъект.ПроверитьПередЗаписью(Отказ, ШапкаОшибки);
	
	Возврат Не Отказ;
	
КонецФункции // ПроверитьВозможностьЗаписи()	

&НаСервере
Процедура ПриИзмененииПравилаОбработки()
	
	ДанныеПараметрикиАктуальны=Ложь;
	
	ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(Объект.ПравилоОбработки);
	
	РабочийОбъект=ПолучитьРабочийОбъект();	
	РабочийОбъект.ОбновитьПараметрыРедактирования();
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // 

&НаСервере
Процедура ПеречитатьДанныеОбъекта(РабочийОбъект)
	
	РабочийОбъект.ДанныеРаскрытияИнициализированы=Ложь;
	РабочийОбъект.МассивЗагруженныхГруппРаскрытия=Новый Массив;
	РабочийОбъект.ИнициализироватьКонтекст();
	РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры // ПеречитатьДанныеОбъекта()

&НаСервере
Функция ЗаписатьЭкземплярОтчета(ПродолжатьРаботу = Ложь, Разблокировать = Истина, ТрассировкаРасчета = Ложь, ПереводитьВЧерновик = Истина)
	
	РабочийОбъект = ПолучитьРабочийОбъект();
	
	// Если текущий статус Не заполнен/Возвращен/Записан с ошибкой, тогда переведём в Черновик.
	ВнесеныИзменения = ЭтаФорма.Модифицированность;
	РабочаяСсылка = РабочийОбъект.Ссылка;
	НовыйЭкземпляр = (РабочаяСсылка.Пустая());
	Если ПереводитьВЧерновик Тогда
		ТекущийСтатус = РасширениеПроцессыИСогласованиеУХ.ВернутьСтатусОбъекта(РабочаяСсылка);
		РазрешенныеСтатусы = Новый Массив;
		ЭтоЗапланирован = (ТекущийСтатус = Перечисления.СостоянияОтчетов.Запланирован);
		ЭтоЗаписанСОшибкой = (ТекущийСтатус = Перечисления.СостоянияОтчетов.ЗаписанСОшибкой);
		Если (ЭтоЗапланирован) ИЛИ (ЭтоЗаписанСОшибкой И Модифицированность) Тогда
			НовоеСостояние = Перечисления.СостоянияОтчетов.Выполняется;
			РасширениеПроцессыИСогласованиеУХ.ПеревестиЗаявкуВПроизвольноеСостояние(РабочаяСсылка, НовоеСостояние);
		Иначе
			// Для прочих статусов не выполняем эту операцию.
		КонецЕсли; 
	Иначе
		// Не требуется изменение.
	КонецЕсли;
	
	Если НЕ РабочийОбъект.ОтчетИнициализирован Тогда
		
		Если ТрассировкаРасчета Тогда
			
			РабочийОбъект.ИдентификаторФормыВызоваТрассировки=ЭтаФорма.УникальныйИдентификатор;
			
		КонецЕсли;
		
		РабочийОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		
		Если ТрассировкаРасчета Тогда
			
			АдресХранилищаДанныхТрассировки=РабочийОбъект.АдресХранилищаДанныхТрассировки;
			
		Иначе
			
			АдресХранилищаДанныхТрассировки="";
			
		КонецЕсли;	
		
		Если НЕ ПродолжатьРаботу Тогда
			
			Если РабочийОбъект.Заблокирован() И Разблокировать Тогда
				РабочийОбъект.Разблокировать();
			КонецЕсли;
			
			ПоместитьРабочийОбъект(РабочийОбъект);
			
		Иначе
			
			ПеречитатьДанныеОбъекта(РабочийОбъект);
			
		КонецЕсли;	
		
		Заблокирован=Ложь;
		УстановитьВидимостьДоступностьЭлементовСогласоанния();
		Возврат Истина;
		
	КонецЕсли;	
	
	Попытка
		
		РабочийОбъект.СписокИспользуемыхВерсий=Неопределено;
		
		Если ТрассировкаРасчета Тогда
			
			РабочийОбъект.ИдентификаторФормыВызоваТрассировки=ЭтаФорма.УникальныйИдентификатор;
			
		КонецЕсли;
		
		Если НЕ Объект.ПометкаУдаления Тогда
			РабочийОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			// Помеченный на удаление не перепроводим.
		КонецЕсли;
		
		Если НЕ ПродолжатьРаботу Тогда
			
			Если РабочийОбъект.Заблокирован() И Разблокировать Тогда
				РабочийОбъект.Разблокировать();
			КонецЕсли;

			ПоместитьРабочийОбъект(РабочийОбъект);
			
		Иначе
			
			ПеречитатьДанныеОбъекта(РабочийОбъект);
			
			Если ТрассировкаРасчета Тогда
				
				АдресХранилищаДанныхТрассировки=РабочийОбъект.АдресХранилищаДанныхТрассировки;
				
			Иначе
				
				АдресХранилищаДанныхТрассировки="";
				
			КонецЕсли;
	
			Записать();
				
		КонецЕсли;
		
		// Если текущий статус Не заполнен/Возвращен/Записан с ошибкой, тогда переведём в Черновик.
		Если (ПереводитьВЧерновик) И (ВнесеныИзменения) И (НовыйЭкземпляр) Тогда
			РабочаяСсылка = РабочийОбъект.Ссылка;
			ТекущийСтатус = РасширениеПроцессыИСогласованиеУХ.ВернутьСтатусОбъекта(РабочаяСсылка);
			РазрешенныеСтатусы = Новый Массив;
			РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.Запланирован);
			РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.ПустаяСсылка());
			РазрешенныеСтатусы.Добавить(Неопределено);
			Если РазрешенныеСтатусы.Найти(ТекущийСтатус) <> Неопределено Тогда
				НовоеСостояние = Перечисления.СостоянияОтчетов.Выполняется;
				РасширениеПроцессыИСогласованиеУХ.ПеревестиЗаявкуВПроизвольноеСостояние(РабочаяСсылка, НовоеСостояние);
			Иначе
				// Для прочих статусов не выполняем эту операцию.
			КонецЕсли; 
		Иначе
			// Не требуется изменение.
		КонецЕсли;
		
		Заблокирован=Ложь;
		УстановитьВидимостьДоступностьЭлементовСогласоанния();
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные экземпляра отчета по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		АдресХранилищаДанныхТрассировки="";
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьЭкземплярОтчета()

Процедура УстановитьВидимостьДоступностьЭлементовСогласоанния()
	
	Если НЕ Элементы.Найти("ГруппаСтатусыСогласования")=Неопределено Тогда
		
		Элементы.ГруппаСтатусыСогласования.Доступность=НЕ Заблокирован;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементовСогласоанния() 

&НаКлиенте
Процедура ДействияФормыРедактирование(Команда)
	
	ТекПометка=Элементы.Редактирование.Пометка;
	
	Если НЕ ТекПометка Тогда
		
		ПеревестиВРежимРедактирования();
		
	Иначе
		
		Если ЗаписатьЭкземплярОтчета() Тогда
			
			ТекПометка=НЕ ТекПометка;
			Заблокирован=Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Редактирование.Пометка=ТекПометка;
	Элементы.ГруппаРазрешитьРедактирование.Видимость = Не ТекПометка;	
	Элементы.ПолеТабличногоДокументаМакетГруппаКнопокРедактированияГР.Доступность = ТекПометка;
	
	Элементы.ГруппаЗаполнение.Доступность=ТекПометка;
		
	УправлятьДоступностьюЭлементовФормы();
	УстановитьВидимостьДоступностьЭлементовСогласоанния();
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасшифровкуЯчейки(ДанныеФормы,Строка,Колонка)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);

	РасшифровкаЯчейки=РабочийОбъект.ПолучитьРасшифровкуЯчейки(Строка,Колонка);
	
	СтрРасшифровка=Новый Структура;
	СтрРасшифровка.Вставить("ТекРасшифровка",РасшифровкаЯчейки);
	
	Если НЕ РасшифровкаЯчейки=Неопределено Тогда
		
		Если РасшифровкаЯчейки.Свойство("Строка") Тогда
			ТекСтрокаОтчета=РасшифровкаЯчейки.Строка;
		Иначе
			ТекСтрокаОтчета=Неопределено;
		КонецЕсли;
		
		СтруктураИзмерения=Новый Структура;
		
		ВозможноРедактирование=Истина;
		
		Если РасшифровкаЯчейки.Свойство("Показатель") Тогда
			ТекПоказательОтчета=РасшифровкаЯчейки.Показатель;
			СтруктураИзмерения.Вставить("Показатель",РасшифровкаЯчейки.Показатель);
		Иначе
			ТекПоказательОтчета=Неопределено;
			ВозможноРедактирование=Ложь;
		КонецЕсли;	
		
		Для Каждого Измерение ИЗ РабочийОбъект.МассивГруппировокСтрокИтог Цикл
			
			Если НЕ Измерение="ИндексАналитики" Тогда
				
				Если РасшифровкаЯчейки.Свойство(Измерение) Тогда
					СтруктураИзмерения.Вставить(Измерение,РасшифровкаЯчейки[Измерение]);
				Иначе
					ВозможноРедактирование=Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение ИЗ РабочийОбъект.МассивГруппировокКолонокИтог Цикл
			Если РасшифровкаЯчейки.Свойство(Измерение) Тогда
				СтруктураИзмерения.Вставить(Измерение,РасшифровкаЯчейки[Измерение]);
			Иначе
				ВозможноРедактирование=Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураИзмерения.Вставить("Раскрытие",РасшифровкаЯчейки.Раскрытие);
		
		Если РасшифровкаЯчейки.Раскрытие Тогда
			
			Для ИндексАналитика=РабочийОбъект.МаксАналитикОтчета+1 По (РабочийОбъект.МаксАналитикОтчета+РабочийОбъект.МаксАналитикПоказателя) Цикл
				Если РасшифровкаЯчейки.Свойство("Аналитика"+ИндексАналитика) Тогда
					СтруктураИзмерения.Вставить("Аналитика"+ИндексАналитика,РасшифровкаЯчейки["Аналитика"+ИндексАналитика]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураИзмерения.Вставить("НомерСтроки",Строка);
		СтруктураИзмерения.Вставить("НомерКолонки",Колонка);
		
		Если РасшифровкаЯчейки.Свойство("ИндексАналитики") Тогда
			СтруктураИзмерения.Вставить("ИндексАналитики",РасшифровкаЯчейки.ИндексАналитики);	
		КонецЕсли;
		
		СтрРасшифровка.Вставить("ТекДанныеЯчейки",СтруктураИзмерения);
		
	Иначе
		
		СтрРасшифровка.Вставить("ТекДанныеЯчейки",Неопределено);
		
	КонецЕсли;
	
	Возврат СтрРасшифровка;
		
КонецФункции // ПолучитьМассивРасшифровки()

&НаКлиенте
Функция ПолучитьСтруктуруДанныхФормы()
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ИдентификаторРодителя",		ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанных.Вставить("РабочийОбъектАдрес",			РабочийОбъектАдрес);
	СтруктураДанных.Вставить("ИзмененКлючевойРеквизит",		ИзмененКлючевойРеквизит);
	СтруктураДанных.Вставить("ДанныеПараметрикиАктуальны",	ДанныеПараметрикиАктуальны);
	СтруктураДанных.Вставить("ТекущийДелитель",				ТекущийДелитель);
	СтруктураДанных.Вставить("ВычислятьПриИзменении",		ВычислятьПриИзменении);
	СтруктураДанных.Вставить("ТекДанныеЯчейки",				ТекДанныеЯчейки);
	СтруктураДанных.Вставить("СпособВывода",				Объект.СпособВывода);
		
	Возврат СтруктураДанных;
	
КонецФункции // СтруктураДанныхФормы()

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(ДанныеФормы)
	
	РабочийОбъектАдрес			= ДанныеФормы.РабочийОбъектАдрес;
	ИзмененКлючевойРеквизит		= ДанныеФормы.ИзмененКлючевойРеквизит;
	ДанныеПараметрикиАктуальны	= ДанныеФормы.ДанныеПараметрикиАктуальны;
		
КонецПроцедуры // ОбновитьРеквизитыФормы() 

&НаКлиенте
Процедура ТабДеревоПриАктивизацииЯчейки(Элемент)
	
	Элементы.ТабДерево.ЗакончитьРедактированиеСтроки(Ложь);
	
	ТекДанныеЯчейки=Неопределено;
	ТекРасшифровка=Новый Структура;	
	
	Если Элементы.ТабДерево.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки=Элементы.ТабДерево.ТекущийЭлемент.Имя;
	
	Если Найти(ИмяКолонки,"_")=0 Тогда
		
		ИндексКолонки=ПерваяКолонка;
		
	Иначе
		
		ИндексКолонки=Число(СтрЗаменить(Элементы.ТабДерево.ТекущийЭлемент.Имя,"_",""));
		
	КонецЕсли;
	
	Если ИндексКолонки>1 И ИндексКолонки<ПерваяКолонка Тогда
		ИндексКолонки=ПерваяКолонка;
	КонецЕсли;
		
	ДанныеРасшифровки=ПолучитьРасшифровкуЯчейки(ПолучитьСтруктуруДанныхФормы(),Элементы.ТабДерево.ТекущиеДанные.НомерСтроки,ИндексКолонки);
	ТекРасшифровка=ДанныеРасшифровки.ТекРасшифровка;
	
	ТекРасшифровка.Вставить("Значение",Элементы.ТабДерево.ТекущиеДанные[Элемент.ПодчиненныеЭлементы[(?(ИндексРедактируемойКолонки<ПерваяКолонка,ПерваяКолонка,ИндексРедактируемойКолонки)-2)].Имя]);
	
	Если НЕ ТекРасшифровка=Неопределено Тогда
		ТекДанныеЯчейки=ДанныеРасшифровки.ТекРасшифровка;
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ВозможноРедактирование()
	
	ИндексКолонки=Элементы.ТабДерево.ПодчиненныеЭлементы.Индекс(Элементы.ТабДерево.ТекущийЭлемент)+1;
	
	Если ТекДанныеЯчейки=Неопределено
		ИЛИ (НЕ ТекДанныеЯчейки.Свойство("Показатель")) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ДанныеПоказателя=СписокРедактируемыхПоказателей.НайтиПоЗначению(ТекДанныеЯчейки.Показатель);
	
	Если ДанныеПоказателя=Неопределено ИЛИ (ДанныеПоказателя.Пометка И (НЕ ТекДанныеЯчейки.Раскрытие)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Возврат (Элементы.ТабДерево.ТекущиеДанные.ЕстьЗаполнение
	И СохранятьИсториюИзменений
	И Заблокирован
	И ИндексКолонки>=ПерваяКолонка);
	
КонецФункции // ВозможноРедактирование() 

&НаКлиенте
Процедура ТабДеревоПередНачаломИзменения(Элемент, Отказ)
		
	Отказ=НЕ ВозможноРедактирование();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьЗначениеПоказателя(ДанныеФормы,Знач ВыбранноеЗначение)
	
	Если ДанныеФормы.ТекДанныеЯчейки=Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);	
	Показатель=РабочийОбъект.мПоказатели.Найти(ДанныеФормы.ТекДанныеЯчейки.Показатель,"Ссылка");
	
	Если ДанныеФормы.ТекДанныеЯчейки.ДанныеПоказателя.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		
		ВыбранноеЗначение=ВыбранноеЗначение*ДанныеФормы.ТекущийДелитель;	
		
		Если Не (РабочийОбъект.ОсновнаяВалюта=РабочийОбъект.мТекущаяВалюта ИЛИ ДанныеФормы.ТекДанныеЯчейки.ДанныеПоказателя.НеФинансовый) Тогда
			
			ВыбранноеЗначение=РабочийОбъект.ПолучитьЗначениеПоказателяВОсновнойВалюте(Показатель, ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеФормы.ТекДанныеЯчейки.Раскрытие Тогда // Редактируем сводное значение показателя
		
		РабочийОбъект.НачатьНовуюОперацию();
		
		/////////////////////////////////////////////////////////////////////////////////////////////////
		
		МассивДанных=РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",Показатель.Ссылка));
		
		Если (МассивДанных.Количество()=1 И УправлениеОтчетамиУХ.ПроверитьЗаполнениеАналитик(РабочийОбъект,МассивДанных[0],РабочийОбъект.мПоказателиРаскрытия)) Тогда
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,ВыбранноеЗначение, МассивДанных[0]);
			
		ИначеЕсли МассивДанных.Количество() > 1 Тогда
			
			Если НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
				
				Если Показатель.Значение<>0 Тогда
					
					ТекущаяПропорция=ВыбранноеЗначение/Показатель.Значение;
					
					Для Каждого Строка ИЗ МассивДанных Цикл
						
						УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Строка.Значение*ТекущаяПропорция,Строка);
						
					КонецЦикла;	
					
				Иначе
					
					Для Каждого Строка ИЗ МассивДанных Цикл
						
						УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Неопределено, Строка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Неопределено, Строка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(РабочийОбъект,Показатель, ВыбранноеЗначение);
		Показатель.ДанныеРасчета = Неопределено;
		Показатель.СохраненныеДанныеАктуальны=Ложь;
		
		Если Не Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			РабочийОбъект.ИзмененНечисловойПоказатель=Истина;
		КонецЕсли;
		
		РабочийОбъект.Показатели[Показатель.Код]=ВыбранноеЗначение;
		РабочийОбъект.ВычислятьПриИзменении=ДанныеФормы.ВычислятьПриИзменении;
							
		////////////////////////////////////////////////////////////////////////////////////////////////
		
		Если ДанныеФормы.ВычислятьПриИзменении Тогда
			
			Если НЕ РабочийОбъект.ДанныеПараметрикиАктуальны Тогда
				УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект,,Истина);
			КонецЕсли;
			
			МассивКодовПоказателей=РабочийОбъект.ПолучитьПутьВычисления(Показатель.Код);
			
			// запускаем код заполнения
			Если НЕ РабочийОбъект.ЗапуститьМодульВычисления(МассивКодовПоказателей) Тогда
				Возврат Новый Массив;
			КонецЕсли;
			
		КонецЕсли;
						
	Иначе // Редактируем значение аналитического раскрытия
		
		СтруктураАналитика=Новый Структура;
		Для ИндексАналитика=РабочийОбъект.МаксАналитикОтчета+1 По (РабочийОбъект.МаксАналитикОтчета+РабочийОбъект.МаксАналитикПоказателя) Цикл
			
			Если ДанныеФормы.ТекДанныеЯчейки.Свойство("Аналитика"+ИндексАналитика) Тогда
				
				СтруктураАналитика.Вставить("Аналитика"+ИндексАналитика,ДанныеФормы.ТекДанныеЯчейки["Аналитика"+ИндексАналитика]);
				
			КонецЕсли;
			
		КонецЦикла;
				
		МассивПоказатели=Новый Массив;
		МассивПоказатели.Добавить(Показатель);
		
		УстановитьЗначениеРаскрытия(РабочийОбъект,МассивПоказатели,ВыбранноеЗначение,СтруктураАналитика)
		
	КонецЕсли;
		
	РабочийОбъект.ИнициализироватьЗапросыОбъекта();
	РабочийОбъект.ИзменяемаяЯчейка=Неопределено;
	
	РабочийОбъект.ПолучитьИзмененныеПоказатели(1);
	
	Если СтрНайти(ДанныеФормы.СпособВывода,"Дерево")>0 Тогда
		РабочийОбъект.ОтобразитьДанныеОтчетов(Истина);
	Иначе
		РабочийОбъект.ОбновитьЗначенияРаскрытияВТеле();
	КонецЕсли;
		
	СброситьЗапросыОбъекта(РабочийОбъект);	
		
	ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект);
	
	Возврат РабочийОбъект.МассивИзмененныхОбластей;
		
КонецФункции // УстановитьЗначениеПоказателя()

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРаскрытия(РабочийОбъект,МассивПоказатели,Значение,СтруктураАналитика,СтруктураАналитикаНов=Неопределено)
		
	МассивКодовПоказателей=Новый Массив;
	РабочийОбъект.НачатьНовуюОперацию();
	
	Для Каждого СтрПоказатель ИЗ МассивПоказатели Цикл
		
		Если СтруктураАналитикаНов=Неопределено Тогда 
			
			ДанныеКорректировки=Новый Структура;
			ДанныеКорректировки.Вставить("ЗначениеВалюта",0);
			ДанныеКорректировки.Вставить("Значение",Значение);
			
			СтруктураАналитика.Вставить("Показатель",СтрПоказатель.Ссылка);
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,ДанныеКорректировки,СтруктураАналитика);
			
		Иначе
			
			СтруктураАналитика.Вставить("Показатель",СтрПоказатель.Ссылка);
			СтруктураАналитикаНов.Вставить("Показатель",СтрПоказатель.Ссылка);
			РабочийОбъект.ЗаменитьАналитикиГруппыРаскрытия(Значение,СтруктураАналитика,СтруктураАналитикаНов);
			
		КонецЕсли;
		
		МассивКодовПоказателей.Добавить(СокрЛП(СтрПоказатель.Код));
		
		Если Не СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			РабочийОбъект.ИзмененНечисловойПоказатель=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим итоги по показателям									
	РабочийОбъект.УстановитьИтогиПоПоказателям(МассивКодовПоказателей);
	
	Для Каждого КодПоказателя ИЗ МассивКодовПоказателей Цикл
		
		МассивЗависимыхПоказателей=РабочийОбъект.ПолучитьПутьВычисления(КодПоказателя);				
		
		// запускаем код заполнения
		Если НЕ РабочийОбъект.ЗапуститьМодульВычисления(МассивЗависимыхПоказателей) Тогда
			Возврат;
		КонецЕсли;
			
	КонецЦикла;		
	
КонецПроцедуры // УстановитьЗначениеРаскрытия() 

&НаКлиенте
Процедура ТабДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность=Истина;
		
	Если ИндексРедактируемойКолонки<ПерваяКолонка Тогда // Отредактировано значение аналитики
		
		Возврат;
		
	Иначе
				
		ВведенноеЗначение=Элементы.ТабДерево.ТекущиеДанные[Элемент.ПодчиненныеЭлементы[(ИндексРедактируемойКолонки-1)].Имя];
		
		ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
		МассивИзмененныхОбластей=УстановитьЗначениеПоказателя(ДанныеФормы,ВведенноеЗначение);
		ОбновитьРеквизитыФормы(ДанныеФормы);
				
		Для Каждого ИзмененнаяЯчейка ИЗ МассивИзмененныхОбластей Цикл
			
			ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
			
			ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-9].Значение;
			
			ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ТабДерево.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СброситьЗапросыОбъекта(РабочийОбъект)
	
	РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц.Закрыть();
	РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц.Закрыть();
	РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // СброситьЗапросыОбъекта() 

&НаСервереБезКонтекста
Функция ОтменитьИзменения(ДанныеФормы)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);
	
	РабочийОбъект.ПолучитьИзмененныеПоказатели(-1);
	
	Если РабочийОбъект.мИзмененныеПоказатели.Количество()>0 Тогда 
		
		РабочийОбъект.ИнициализироватьЗапросыОбъекта();
		
		РабочийОбъект.ИзменяемаяЯчейка=Неопределено;	
		РабочийОбъект.ОтобразитьДанныеОтчетов(Истина);	
		РабочийОбъект.ОтменитьИзменения();
		
		СброситьЗапросыОбъекта(РабочийОбъект);
				
		ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект);
		
		Возврат РабочийОбъект.МассивИзмененныхОбластей;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции // ОтменитьИзменения()

&НаСервере
Процедура ОтменитьИзмененияБланк()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ИзменитьТаблицыПоказателей(-1);
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры // ОтменитьИзмененияБланк() 

&НаСервере
Процедура ПовторитьИзмененияБланк()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ИзменитьТаблицыПоказателей(1);
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры // ОтменитьИзмененияБланк()

&НаСервереБезКонтекста
Функция ПовторитьИзменения(ДанныеФормы)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);
	
	СтарыйНомерОперации=РабочийОбъект.НомерТекущейОперации;
	
	РабочийОбъект.ПовторитьИзменения();
	
	Если РабочийОбъект.НомерТекущейОперации>СтарыйНомерОперации Тогда
		
		РабочийОбъект.ИнициализироватьЗапросыОбъекта();
		
		РабочийОбъект.ПолучитьИзмененныеПоказатели(1);
		
		РабочийОбъект.ИзменяемаяЯчейка=Неопределено;	
		РабочийОбъект.ОтобразитьДанныеОтчетов(Истина);
		
		СброситьЗапросыОбъекта(РабочийОбъект);
		ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект);
		
		Возврат РабочийОбъект.МассивИзмененныхОбластей;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции // ПовторитьИзменения()

&НаКлиенте
Процедура ДействияФормыОтменить(Команда)
	
	Если Объект.СпособВывода="Дерево" Тогда
		
		ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
		МассивИзмененныхОбластей=ОтменитьИзменения(ДанныеФормы);
		ОбновитьРеквизитыФормы(ДанныеФормы);
		
		Если МассивИзмененныхОбластей.Количество()>0 Тогда
			
			Для Каждого ИзмененнаяЯчейка ИЗ МассивИзмененныхОбластей Цикл
				
				ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
				
				ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-9].Значение;
				
				ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
				
			КонецЦикла;
			
			Элементы.ТабДерево.Обновить();
			
		КонецЕсли;
		
	Иначе
		
		ОтменитьИзмененияБланк();
		
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПовторить(Команда)
	
	Если Объект.СпособВывода="Дерево" Тогда
		
		ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
		МассивИзмененныхОбластей=ПовторитьИзменения(ДанныеФормы);
		ОбновитьРеквизитыФормы(ДанныеФормы);
		
		Если МассивИзмененныхОбластей.Количество()>0 Тогда
			
			Для Каждого ИзмененнаяЯчейка ИЗ МассивИзмененныхОбластей Цикл
				
				ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
				
				ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-9].Значение;
				
				ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
				
			КонецЦикла;
			
			Элементы.ТабДерево.Обновить();
			
		КонецЕсли;
		
	Иначе
		
		ПовторитьИзмененияБланк();
		
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоказателя(Показатель)
	
	Возврат ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытия(Показатель);
		
КонецФункции // ПолучитьДанныеПоказателя() 

&НаКлиенте
Процедура ВыбраннаяВалютаПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВФорме(Команда)
			
	ЗаписатьЭкземплярОтчета();
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИПродолжить(Команда)
	
	Если ЗаписатьЭкземплярОтчета(Истина) Тогда
		
		Оповестить("СостояниеЗаявкиПриИзменении");
		Модифицированность=Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеВалютыПриИзменении(Элемент)
	
	ДопВалюты = Новый Соответствие;
	ДопВалюты.Вставить(Объект.ОсновнаяВалюта, Истина);
	
	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, Объект.ВидОтчета);
	
	Для Каждого СтрокаВалюта ИЗ Объект.ДополнительныеВалюты Цикл
		
		Если СтрокаВалюта.Валюта = Объект.ОсновнаяВалюта Тогда			
			Объект.ДополнительныеВалюты.Удалить(СтрокаВалюта);			
		ИначеЕсли ДопВалюты.Получить(СтрокаВалюта.Валюта) <> Неопределено Тогда			
			СтрокаВалюта.Валюта = Неопределено;// очистим дубль валюты
		Иначе
			ДопВалюты.Вставить(СтрокаВалюта.Валюта, Истина);
		КонецЕсли;
		
		СтрокаВалюта.Пометка = (СтрокаВалюта.Валюта <> Неопределено) И (СтруктураВалют <> Неопределено) 
						И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрокаВалюта.Валюта) <> Неопределено);
		
	КонецЦикла;
	
	ЗаполнитьСписокВыбораВалютСервер();		
	
	ИзмененКлючевойРеквизит = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Модифицированность=Ложь;
	
	Если СозданаВФормеГрупповогоРедактирования Тогда
		
		Закрыть(РабочийОбъектАдрес);
		
	Иначе
		
		Если ЗаписатьЭкземплярОтчета() Тогда
			
			ОповеститьОбИзменении(Объект.Ссылка);			
			Заблокирован=Ложь;
			
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньТочностиПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлючевыеРеквизитыДокумента(СтруктураРеквизиты)
	
	Если ВыбраннаяВалюта <> СтруктураРеквизиты.ОсновнаяВалюта Тогда		
		ВыбраннаяВалюта = СтруктураРеквизиты.ОсновнаяВалюта;			
	КонецЕсли;
	
	РабочийОбъект = ПолучитьРабочийОбъект();
	
	РабочийОбъект.ДополнительныеВалюты.Очистить();	
	
	Для каждого СтрокаВалюта Из СтруктураРеквизиты.ДополнительныеВалюты Цикл	
		
		НоваяСтрока = РабочийОбъект.ДополнительныеВалюты.Добавить();
		НоваяСтрока.Валюта = СтрокаВалюта;
			
	КонецЦикла;
	
	СтруктураРеквизиты.Удалить("ДополнительныеВалюты");
	
	ЗаполнитьЗначенияСвойств(РабочийОбъект, СтруктураРеквизиты);
	РабочийОбъект.ШаблонОтчета = СтруктураРеквизиты.БланкОтчета;
		
	РабочийОбъект.УровеньТочности	= ?(ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета.УровеньТочностиПоУмолчанию),РабочийОбъект.ШаблонОтчета.УровеньТочностиПоУмолчанию,0);
	РабочийОбъект.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию),РабочийОбъект.ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию,Перечисления.ПорядкиОкругленияОтчетности.Окр1);
			
	РабочийОбъект.ПравилоОбработки	= СтруктураРеквизиты.ПравилоОбработки;
	
	ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(РабочийОбъект.ПравилоОбработки);
	
	РабочийОбъект.ИспользуемаяИБ	= СтруктураРеквизиты.ИспользуемаяИБ;
		
	ТекущаяТочность = РабочийОбъект.УровеньТочности;
	
	Структура = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(РабочийОбъект.ВидОтчета, РабочийОбъект.Сценарий, РабочийОбъект.Организация, РабочийОбъект.ПериодОтчета);
	Структура.Свойство("БланкИмпорта", 		РабочийОбъект.БланкИмпорта);
	
	РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(РабочийОбъект, Перечисления.СостоянияОтчетов.Запланирован);
	
	ЕстьАналитики=Ложь;
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		
		ВидАналитики = РабочийОбъект.ВидОтчета["ВидАналитики"+Инд];
		
		Если Не ПустаяСтрока(ВидАналитики) Тогда
			
			ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
			ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
			Элементы["АналитикаОтчета"+Инд].Видимость=Истина;
			Элементы["АналитикаОтчета"+Инд].Заголовок=Строка(ВидАналитики);
			
			ЕстьАналитики=Истина;
			
		Иначе
			
			Элементы["АналитикаОтчета"+Инд].Видимость=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		РабочийОбъект.СпособВывода=?(ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета),"Бланк "+РабочийОбъект.ШаблонОтчета.Наименование,"Дерево");
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
	ЗаполнитьСписокВыбораВалютСервер();
	
	ЗаполнитьСписокСпособовОтображения();
	
	РабочийОбъект.СпособВывода=Объект.СпособВывода;
	
	РабочийОбъект.ПроверитьКонтекстИнициализирован();
	
	Инициатор = РабочийОбъект.Исполнитель;
	Согласующий = РабочийОбъект.Проверяющий;
	
	ИспользуетсяМарщрутСогласования = РасширениеПроцессыИСогласованиеУХ.ОпределитьИспользованиеМаршрутаСогласования(Согласующий);
	
	СохранятьИсториюИзменений=РабочийОбъект.ВидОтчета.СохранятьИсториюИзменений;
	
	ОбновитьВидимостьПанелиРаскрытияИДопЯзыков(РабочийОбъект);
	
	Если РабочийОбъект.мКопирование=Истина Тогда
		
		ЗаполнитьДокумент("ПоследнийСпособ",,РабочийОбъект);
		
	Иначе
		
		ОбновитьДанныеФормыСервер(РабочийОбъект);
		
	КонецЕсли;
	
	Объект.ПараметрыОтчета.Очистить();
	
	Для Каждого ПараметрВидаОтчета Из СтруктураРеквизиты.ПараметрыОтчета Цикл
		НоваяСтрокаПараметр = Объект.ПараметрыОтчета.Добавить();
		
		НоваяСтрокаПараметр.Код = ПараметрВидаОтчета.Код;
		НоваяСтрокаПараметр.Наименование = ПараметрВидаОтчета.Наименование;
		НоваяСтрокаПараметр.Значение = ПараметрВидаОтчета.Значение;
		НоваяСтрокаПараметр.ЗначениеСтрока = ПараметрВидаОтчета.ЗначениеСтрока;
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьКлючевыеРеквизитыДокумента()

// Устанавливает доступность элементов в зависимости от флага 
// СозданаВФормеГрупповогоРедактирования, а также выводит
// состояние отчета.
&НаКлиенте
Процедура НастроитьДоступностьИОтобразитьСостояниеОтчета()
	
	Если СозданаВФормеГрупповогоРедактирования Тогда
		
		Элементы.Редактирование.Доступность = Ложь;
		Элементы.Редактирование.Пометка = Заблокирован;
		Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;
		Элементы.ОсновныеРеквизиты.ТолькоПросмотр = Истина;
		Элементы.НастройкиОтчета.ТолькоПросмотр = Истина;
		Элементы.ДополнительныеРеквизиты.ТолькоПросмотр = Истина;	
		
	КонецЕсли;
	
	Если (ТипЗнч(Параметры.МассивПоказателей)=Тип("ФиксированныйМассив")) И (ПолеТабличногоДокументаМакет.ВысотаТаблицы > 0) Тогда
		
		ВыделитьОбластиПоказателей(Параметры.МассивПоказателей);
		
	КонецЕсли;
	
	ОтобразитьСостояниеОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнициализацияНаКлиенте Тогда	
		
		ИнициализироватьФормуНового();
		
	Иначе
		
		НастроитьДоступностьИОтобразитьСостояниеОтчета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеОбластейПоказателей() Экспорт
	
	Для Каждого СтрОбласть ИЗ ТабВыделенныхОбластей Цикл
		
		ОбластьПоказателя=ПолеТабличногоДокументаМакет.Области.Найти(СтрОбласть.ИмяОбласти);
		
		ОбластьПоказателя.Обвести(СтрОбласть.ДанныеОформления[0].Значение,
							СтрОбласть.ДанныеОформления[1].Значение,
							СтрОбласть.ДанныеОформления[2].Значение,
							СтрОбласть.ДанныеОформления[3].Значение);
		
		ОбластьПоказателя.ЦветРамки=СтрОбласть.ДанныеОформления[4].Значение;							
		
	КонецЦикла;
	
	ТабВыделенныхОбластей.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьГраницыОбласти(ОбластьПоказателя)
	
	НоваяСтрока=ТабВыделенныхОбластей.Добавить();
	НоваяСтрока.ИмяОбласти=ОбластьПоказателя.Имя;
	
	ДанныеОформления=Новый СписокЗначений;
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСлева);
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСверху);
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСправа);
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСнизу);
	ДанныеОформления.Добавить(ОбластьПоказателя.ЦветРамки);
	
	НоваяСтрока.ДанныеОформления=ДанныеОформления;
		
КонецПроцедуры // СохранитьГраницыОбласти()

&НаСервереБезКонтекста
Функция ПолучитьКодПоказателя(ПоказательОтчета)
	
	Возврат СокрЛП(ПоказательОтчета.Код);
	
КонецФункции // ПолучитьКодПоказателя() 

//Выделяет области с именами, переданными в массиве
//
&НаКлиенте
Процедура ВыделитьОбластиПоказателей(МассивПоказателей) Экспорт
	
	Если ТабВыделенныхОбластей.Количество()>0 Тогда
		СнятьВыделениеОбластейПоказателей();
	КонецЕсли;
	
	Красный=Новый Цвет(255,0,0);
	Линия=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,3);
	
	Для Каждого Показатель ИЗ МассивПоказателей Цикл
		
		Если ТипЗнч(Показатель)=Тип("Строка") ИЛИ ТипЗнч(Показатель)=Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			
			ИмяОбласти=?(ТипЗнч(Показатель)=Тип("Строка"),СокрЛП(Показатель),ПолучитьКодПоказателя(Показатель));
			ОбластьПоказателя = ПолеТабличногоДокументаМакет.Области.Найти(ИмяОбласти);
			
			Если ОбластьПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СохранитьГраницыОбласти(ОбластьПоказателя);
			
			ОбластьПоказателя.Обвести(Линия,Линия,Линия,Линия);
			ОбластьПоказателя.ЦветРамки=Красный;
			
			Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ОбластьПоказателя;
						
		ИначеЕсли ТипЗнч(Показатель) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И Показатель.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатель") 
			И ТипЗнч(Показатель.Значение) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			
			ИмяОбласти = СокрЛП(Показатель.ПравоеЗначение.Код);
			ОбластьПоказателя = ПолеТабличногоДокументаМакет.Области.Найти(ИмяОбласти);
			Если ОбластьПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СохранитьГраницыОбласти(ОбластьПоказателя);
			
			ОбластьПоказателя.Обвести(Линия,Линия,Линия,Линия);
			ОбластьПоказателя.ЦветРамки=Красный;
			
			Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ОбластьПоказателя;
			
			Прервать;
			
		ИначеЕсли ТипЗнч(Показатель) <> Тип("ЭлементОтбораКомпоновкиДанных") 
			И Показатель.Поле = "Показатель" 
			И ТипЗнч(Показатель.Значение) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			
			ИмяОбласти = СокрЛП(Показатель.Значение.Код);
			ОбластьПоказателя = ПолеТабличногоДокументаМакет.Области.Найти(ИмяОбласти);
			Если ОбластьПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СохранитьГраницыОбласти(ОбластьПоказателя);
			
			ОбластьПоказателя.Обвести(Линия,Линия,Линия,Линия);
			ОбластьПоказателя.ЦветРамки=Красный;
			
			Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ОбластьПоказателя;
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ВыделитьОбластиПоказателей()

&НаКлиенте
Процедура ОсновнаяВалютаПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораВалютСервер();
	ИзмененКлючевойРеквизит=Истина;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
		
	ИзмененКлючевойРеквизит=Истина;
	УстановитьЗаголовокФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета1ПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета2ПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета3ПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета4ПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета5ПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 1, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 2, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 3, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 4, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 5, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитики(Элемент, НомерАналитики, СтандартнаяОбработка)
	
	ОграничениеТипа = ЭтаФорма["ТипАналитики" + Строка(НомерАналитики)];
	
	Если ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) Тогда
		ТекФорма = ПолучитьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Владелец", ЭтаФорма["ВидАналитики" + Строка(НомерАналитики)])), Элемент);
		ТекФорма.Открыть();
		СтандартнаяОбработка = Ложь;
	Иначе
		Элемент.ОграничениеТипа = ОграничениеТипа;
		Значение = Объект["Аналитика"+Строка(НомерАналитики)];
		Объект["Аналитика"+Строка(НомерАналитики)] = Элемент.ОграничениеТипа.ПривестиЗначение(Значение);
	КонецЕсли;
	
	Элемент.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЗаголовок() Экспорт
			
	Возврат НСтр("ru = ' Экземпляр отчета '")+Объект.ВидОтчета+": " 
	+ "<" + ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация, "") + ">"
	+ "<" + ?(ЗначениеЗаполнено(Объект.Проект), Объект.Проект, "") + ">"
	+ "<" + ?(ЗначениеЗаполнено(Объект.ПериодОтчета), Объект.ПериодОтчета, "")+">" 
	+ ?(ЗначениеЗаполнено(Объект.ОсновнаяВалюта), " " + НСтр("ru = 'Валюта отображения: '") + ВыбраннаяВалюта, "");
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = "(" 
	+  ?(ПризнакРедактированияФормы, НСтр("ru = 'Редактирование'"), НСтр("ru = 'Просмотр'"))
	+ ")" + ПолучитьТекущийЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомментарийДокумента()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	Объект.Комментарий=СокрЛП(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"))+" ("+ТекущаяДата()+"):"+Символы.ПС+ТекКомментарий+Символы.ПС+Объект.Комментарий;

	РабочийОбъект.Комментарий=Объект.Комментарий;
	
	ТекКомментарий="";
	
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры // ОбновитьКомментарийДокумента() 

&НаКлиенте
Процедура КнопкаДобавитьНажатие(Команда)
	
	Если НЕ ТекКомментарий="" Тогда
		
		ОбновитьКомментарийДокумента();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура БланкИмпортаПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроцессИмпорта(времФайлИмпорта, времДатаИзменения, НуженПароль = Ложь, ИмяЛиста = Неопределено, Пароль = Неопределено, НастройкаИмпортаФайлаФНС = Неопределено)
	
	
	
	РабочийОбъект=ПолучитьРабочийОбъект();
			
	Если Не Заблокирован Тогда	
		
		Заблокирован=ПодготовитьОтчетДляРедактирования(РабочийОбъект);
		
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка=Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РабочийОбъект.ВерсияХранимогоФайла=ВерсияХранимогоФайла;
	
	ПротоколируемыеСобытияУХ.Начать(РабочийОбъект);
	
	РабочийОбъект.ИмпортироватьДанные(времФайлИмпорта, времДатаИзменения, ИмяЛиста, Пароль);
	
	РабочийОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.Импорт;
	
	РасширениеПроцессыИСогласованиеУХ.УстановитьСостояниеСогласованияПослеЗаполнения(РабочийОбъект);
	
	РабочийОбъект.ИзмененияВДиалоге = Истина;
	
	Объект.ФайлИмпорта=РабочийОбъект.ФайлИмпорта;
	Объект.ДатаИзменения=РабочийОбъект.ДатаИзменения;
	
	Элементы.ВСправочнике.Доступность=ЗначениеЗаполнено(Объект.ФайлИмпорта);
	
	РабочийОбъект.ЗавершитьПротоколЗагрузки();
	
	ОбработатьРезультатРасчетов(РабочийОбъект);
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
		
КонецПроцедуры

// Возвращает структуру, содержащую настройку импорта файла ФНС по 
// имени НаименованиеФайлаВход и  флаг возможности продолжения загрузки.
&НаКлиенте
Функция ПроверитьИОпределитьНастрокуФНС(НаименованиеФайлаВход)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("НастройкаИмпортаФайлаФНС", Неопределено);
	РезультатФункции.Вставить("ПродолжатьЗагрузку", Истина);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИзФайлаНаДиске_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ИмяЛиста    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ИмяЛиста", "");
		Пароль      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "Пароль", "");
		НуженПароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "НуженПароль", Ложь);
		СтруктураФайла = ДополнительныеПараметры.СтруктураФайла;
		СтруктураНастройкиФНС = ПроверитьИОпределитьНастрокуФНС(СтруктураФайла.НаименованиеФайла);
		ПродолжатьЗагрузку			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастройкиФНС, "ПродолжатьЗагрузку", Истина);
		НастройкаИмпортаФайлаФНС	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастройкиФНС, "НастройкаИмпортаФайлаФНС", Неопределено);
		Если ПродолжатьЗагрузку Тогда
			ЗапуститьПроцессИмпорта(ДополнительныеПараметры.времФайлИмпорта, ДополнительныеПараметры.времДатаИзменения, НуженПароль, ИмяЛиста, Пароль, НастройкаИмпортаФайлаФНС);
			ПутьКФайлуADO="";
		Иначе
			// Загрузка запрещена.
		КонецЕсли;
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Загружает из временного хранилища АдресХранилищаВход, при необходимости
// создавая хранимую версию из файла с параметрами ИмяФайлаВход, ПолноеИмяФайлаВход, 
// ДатаИзмененияВход, РазмерВход
&НаКлиенте
Процедура СчитатьФайлИзХранилища(ИмяФайлаВход, ПолноеИмяФайлаВход, ДатаИзмененияВход, РазмерВход, АдресХранилищаВход)
	времФайлИмпорта = Неопределено;
	времДатаИзменения = Неопределено;
	
	СтруктураДляОтбора = Новый Структура("Организация, Сценарий, ПериодСценария, ВидОтчета");
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		СтруктураДляОтбора.Вставить("Аналитика" + Инд);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДляОтбора, Объект);
	
	СтруктураДляОтбора.ПериодСценария = Объект.ПериодОтчета;
	
	СписокЛистов = Новый СписокЗначений;
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("АдресВременногоХранилища",	 АдресХранилищаВход);
	СтруктураФайла.Вставить("НаименованиеФайла",		 ИмяФайлаВход);
	СтруктураФайла.Вставить("ПолноеИмяНаДиске",			 ПолноеИмяФайлаВход);
	СтруктураФайла.Вставить("РазмерФайла",				 РазмерВход);
	СтруктураФайла.Вставить("ДатаИзмененияФайла",		 ДатаИзмененияВход);
	СтруктураФайла.Вставить("СписокЛистов",				 СписокЛистов);
	ВерсияХранимогоФайла = ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию_УР(СтруктураДляОтбора, СтруктураФайла, , времФайлИмпорта, времДатаИзменения);
	
	Если ЗначениеЗаполнено(ВерсияХранимогоФайла) Тогда
		
		СписокЛистов = СтруктураФайла.СписокЛистов;
		
		Если СписокЛистов.Количество() = 1 И НЕ СписокЛистов[0].Пометка Тогда
			
			ИмяЛиста    = СписокЛистов[0].Значение;
			Пароль      = Неопределено;
			НуженПароль = Ложь;
			
		ИначеЕсли СписокЛистов.Количество() > 0 Тогда
			
			СтруктураПараметровФормы = Новый Структура;
			СтруктураПараметровФормы.Вставить("СписокЛистов", СписокЛистов);
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("СтруктураФайла", СтруктураФайла);
			СтруктураДополнительныхПараметров.Вставить("времФайлИмпорта", времФайлИмпорта);
			СтруктураДополнительныхПараметров.Вставить("времДатаИзменения", времДатаИзменения);
			ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьИзФайлаНаДиске_Завершение", ЭтотОбъект, СтруктураДополнительныхПараметров);
			Имя = "ОбщаяФорма.ФормаВыбораЛистаИПароля";
			ОткрытьФорму(Имя, СтруктураПараметровФормы, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;			
			
		Иначе
			
			ИмяЛиста    = Неопределено;
			Пароль      = Неопределено;
			НуженПароль = Ложь;
			
		КонецЕсли;
		
		СтруктураНастройкиФНС = ПроверитьИОпределитьНастрокуФНС(СтруктураФайла.НаименованиеФайла);
		ПродолжатьЗагрузку			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастройкиФНС, "ПродолжатьЗагрузку", Истина);
		НастройкаИмпортаФайлаФНС	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастройкиФНС, "НастройкаИмпортаФайлаФНС", Неопределено);
		Если ПродолжатьЗагрузку Тогда
			ЗапуститьПроцессИмпорта(времФайлИмпорта, времДатаИзменения, НуженПароль, ИмяЛиста, Пароль, НастройкаИмпортаФайлаФНС);
		Иначе
			Возврат;			 // Загрузка запрещена.
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(Нстр("ru = 'Не удалось сохранить импортируемый файл'"), Нстр("ru = 'Импорт из файла'"));
		
	КонецЕсли;
	
	ПутьКФайлуADO="";
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайл_Завершение(Результат, АдресХранилища, ИмяФайла, ДополнительныеПараметры) Экспорт
	Файл = ДополнительныеПараметры.Файл;
	ИмяФайла		 = Файл.Имя;
	ПолноеИмяФайла	 = Файл.ПолноеИмя;
	ДатаИзменения	 = Файл.ПолучитьУниверсальноеВремяИзменения();
	Размер			 = Файл.Размер();
	
	СчитатьФайлИзХранилища(ИмяФайла, ПолноеИмяФайла, ДатаИзменения, Размер, АдресХранилища);
КонецПроцедуры

// Заполняет документ из файла ADO, если задан фильтр ФильтрФайловADOВход, а также
// считываени из хранилища с адресом АдресХранилищаВход файл ФайлВход.
&НаКлиенте
Процедура ЗаполнитьДокументADOИСчитатьФайл(ФильтрФайловADOВход, ПервыйЭлементИмяВход, ФайлВход, АдресХранилищаВход)
	Если НЕ ПустаяСтрока(ФильтрФайловADOВход) Тогда
		ПутьКФайлуADO = ПервыйЭлементИмяВход;
		ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
		Возврат;
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Файл", ФайлВход);
	ОписаниеПомещениеФайла = Новый ОписаниеОповещения("ПоместитьФайл_Завершение", ЭтотОбъект, СтруктураПараметров);
	НачатьПомещениеФайла(ОписаниеПомещениеФайла, АдресХранилищаВход, ПервыйЭлементИмяВход, Ложь, Новый УникальныйИдентификатор);
КонецПроцедуры

// Отображает выбор файла из справочника для импортирования данных.
&НаКлиенте
Процедура ПоказатьВыборФайлаИзСправочника()
	СтруктураДляОтбора = Новый Структура("Владелец, Сценарий, ПериодСценария, ВидОтчета");
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		СтруктураДляОтбора.Вставить("Аналитика" + Инд);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДляОтбора, Объект);
	
	СтруктураДляОтбора.Владелец       = Объект.Организация;
	СтруктураДляОтбора.ПериодСценария = Объект.ПериодОтчета;
	
	СтруктураФайл = Неопределено;
	
	ПараметрыФормы = Новый Структура("ХранимыйФайл, ВерсияХранимогоФайла, СтруктураОтбора", 
	Объект.ФайлИмпорта, объект.ДатаИзменения, СтруктураДляОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ДействияФормыВСправочникеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ХранимыеФайлыОрганизаций.Форма.ВыборФайлаИПериодаУправляемая",
	ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПерезаписьВерсии_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе	
		ФильтрФайловADO		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ФильтрФайловADO", Неопределено);
		ПервыйЭлементИмя	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ПервыйЭлементИмя", "");
		Файл				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Файл", Неопределено);
		АдресХранилища		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АдресХранилища", "");
		ЗаполнитьДокументADOИСчитатьФайл(ФильтрФайловADO, ПервыйЭлементИмя, Файл, АдресХранилища);
	КонецЕсли;
КонецПроцедуры

// Заполняет текущий отчет из файла с именем ИмяФайлаВход по фильтру
// ФильтрФайловADOВход, записывая его во временное хранилище с адресом АдресХранилищаВход.
&НаКлиенте
Процедура СчитатьФайлВОтчет(ИмяФайлаВход, ФильтрФайловADOВход = "", АдресХранилищаВход)
	
	Файл = Новый Файл(ИмяФайлаВход);
	ДополнительныеПараметры=Новый Структура;
	ДополнительныеПараметры.Вставить("ФильтрФайловADOВход",	ФильтрФайловADOВход);
	ДополнительныеПараметры.Вставить("АдресХранилищаВход",	АдресХранилищаВход);
	ДополнительныеПараметры.Вставить("ИмяФайлаВход",		ИмяФайлаВход);
	ДополнительныеПараметры.Вставить("Файл",				Файл);

	ОписаниеОповещения=Новый ОписаниеОповещения("СчитатьФайлПослеПроверкиСуществования",ЭтотОбъект,ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СчитатьФайлПослеПроверкиСуществования(Существует, ДопПараметры)Экспорт
	
	Если НЕ Существует Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения=Новый ОписаниеОповещения("ПолучитьВремяИзмененияЗавершение",ЭтотОбъект,ДопПараметры);
	ДопПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВремяИзмененияЗавершение(ВремяИзменения, ДопПараметры)Экспорт
	
	ДопПараметры.Вставить("ДатаИзмененияФайла",ВремяИзменения);
	ОписаниеОповещения=Новый ОписаниеОповещения("ПолучитьРазмерЗавершение",ЭтотОбъект,ДопПараметры);
	ДопПараметры.Файл.НачатьПолучениеРазмера(ОписаниеОповещения);

КонецПроцедуры // ПолучитьРазмерФайлаЗавершение()

&НаКлиенте
Процедура ПолучитьРазмерЗавершение(Размер, ДопПараметры)Экспорт
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ИмяФайла",			ДопПараметры.Файл.Имя);
	ИнформацияОФайле.Вставить("ДатаИзмененияФайла",	ДопПараметры.ДатаИзмененияФайла);
	ИнформацияОФайле.Вставить("РазмерФайла",		Размер);
	
	ТекстВопроса = ПовторныйИмпортФайла(ИнформацияОФайле, Объект.Ссылка);
	Если (Не ПустаяСтрока(ТекстВопроса)) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФильтрФайловADO", 	ДопПараметры.ФильтрФайловADOВход);
		СтруктураПараметров.Вставить("Файл", 				ДопПараметры.Файл);
		СтруктураПараметров.Вставить("АдресХранилища", 		ДопПараметры.АдресХранилищаВход);
		СтруктураПараметров.Вставить("ПервыйЭлементИмя", 	ДопПараметры.ИмяФайлаВход);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеПерезаписьВерсии_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 60);
	Иначе
		
		ЗаполнитьДокументADOИСчитатьФайл(ДопПараметры.ФильтрФайловADOВход, ДопПараметры.ИмяФайлаВход, ДопПараметры.Файл, ДопПараметры.ФильтрФайловADOВход);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьРазмерЗавершение() 

&НаКлиенте
Процедура ВыборФайлаНаДиске_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Перем АдресХранилища;	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Количество() > 0 Тогда
			ПервыйЭлементИмя = ВыбранноеЗначение[0];
			СчитатьФайлВОтчет(ПервыйЭлементИмя, ДополнительныеПараметры.ФильтрФайловADO, АдресХранилища);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыНаДиске(Команда)
	
	Перем АдресХранилища;
	ИмяФайла = ИмяФайла = ""; 
	ПолноеИмяФайла = ""; 
	ДатаИзменения = Дата(1, 1, 1); 
	Размер = 0; 
	АдресХранилища = "";
	ФильтрФайловADO = УправлениеОтчетамиУХ.ОпределитьРасширениеФайлаADO(Объект.ИспользуемаяИБ);
	
	Если НЕ ПустаяСтрока(ФильтрФайловADO) Тогда
		
		СтрокаФильтр=ФильтрФайловADO;
		
	Иначе
		
		СтрокаФильтр = НСтр("ru = 'Таблица Excel (*.xls,*.xlsx)|*.xl*|Табличный документ (*.mxl)|*.mxl'");
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл для импорта'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр = СтрокаФильтр;
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ФильтрФайловADO", ФильтрФайловADO);
	ОписаниеОткрытияФайла = Новый ОписаниеОповещения("ВыборФайлаНаДиске_Завершение", ЭтаФорма, СтруктураДополнительныхПараметров);
	ДиалогВыбораФайла.Показать(ОписаниеОткрытияФайла);

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВСправочнике(Команда)
	
	ПоказатьВыборФайлаИзСправочника();

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВСправочникеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураФайл = Результат;
    
    Если СтруктураФайл = Неопределено Тогда
        
        Возврат;
        
    Иначе
        
        Объект.ФайлИмпорта   = СтруктураФайл.ХранимыйФайл;
        Объект.ДатаИзменения = СтруктураФайл.ВерсияХранимогоФайла;
        
        Если НЕ ПустаяСтрока(УправлениеОтчетамиУХ.ОпределитьРасширениеФайлаADO(Объект.ИспользуемаяИБ)) Тогда
            
            ПутьКФайлуADO=Объект.ФайлИмпорта;
            ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
            
        Иначе
            
            ЗапуститьПроцессИмпорта(Объект.ФайлИмпорта, 
									Объект.ДатаИзменения, 
									СтруктураФайл.НуженПароль, 
									СтруктураФайл.ИмяЛиста, 
									СтруктураФайл.Пароль);
            
        КонецЕсли;
        
    КонецЕсли;
    
    ПутьКФайлуADO="";

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСвернутьПоАналитикамОтчетов(Команда)
	
	ЗаполнитьДокумент("АвтоматическиСвернувПоАналитикам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСвернутьПоПериоду(Команда)
	
	ЗначениеВыбора = Неопределено;
	ДопПараметры = Новый Структура("ЗначениеВыбора", ЗначениеВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ДействияФормыСвернутьПоПериодуЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения, ЗначениеВыбора, Нстр("ru = 'Выберите периодичность отчетов-оснований'"), Тип("ПеречислениеСсылка.Периодичность"));
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыКонсолидироватьПериметр(Команда)
	
	ЗаполнитьДокумент("АвтоматическиКонсолидация");
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьЭкземплярОтчета()
	
	
	Попытка
		
		РабочийОбъект=ПолучитьРабочийОбъект();

		Если РабочийОбъект.Заблокирован() Тогда
			РабочийОбъект.Разблокировать();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры // РазблокироватьЭкземплярОтчета() 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		
		Если Заблокирован ИЛИ Модифицированность Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Заблокирован Тогда
		РазблокироватьЭкземплярОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВычислятьПриИзменении(Команда)

	ВычислятьПриИзменении=НЕ ВычислятьПриИзменении;
	
	Элементы.Вычислить.ПодчиненныеЭлементы.ДействияФормыВычислятьПриИзменении.Пометка=ВычислятьПриИзменении;
		
	Если ВычислятьПриИзменении Тогда
		ПересчитатьВычисляемыеПоказатели();
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВычислитьСейчас(Команда)
	
	ПересчитатьВычисляемыеПоказатели();
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыОчистить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДействияФормыОчиститьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Нстр("ru = 'После выполнения операции будут очищены все показатели отчета. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОтчет()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	Возврат РабочийОбъект.Проверить();
		
КонецФункции // ПроверитьОтчет() 

&НаСервере
Функция ПолучитьПротоколПроверкиСервер(РезультатПроверки,РежимВывода = "")
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	РезультатПроверки=РабочийОбъект.Проверить(,РежимВывода);
	Возврат РезультатПроверки;
	
КонецФункции // ПолучитьПротоколПроверкиСервер() 

&НаКлиенте
Процедура ДействияФормыПроверить(Команда)
	
	РезультатПроверки=ПроверитьОтчет();
	
	Если РезультатПроверки.СтатусПроверки Тогда
		Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
	Иначе
		Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
	КонецЕсли;	
		
КонецПроцедуры
	
&НаКлиенте
Процедура ДействияФормыПроверитьТолькоОшибочные(Команда)
	
	РезультатПроверки=Новый Структура;

	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТабличныйДокумент",ПолучитьПротоколПроверкиСервер(РезультатПроверки,"ТолькоОшибочные").Протокол);
	СтруктураПараметров.Вставить("Документ",Объект.Ссылка);
	
	Если РезультатПроверки.СтатусПроверки Тогда
		Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
	Иначе	
		Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.КонтрольныеСоотношенияУправляемая",СтруктураПараметров,ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПроверитьВсе(Команда)
	
	РезультатПроверки=Новый Структура;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТабличныйДокумент",ПолучитьПротоколПроверкиСервер(РезультатПроверки).Протокол);
	СтруктураПараметров.Вставить("Документ",Объект.Ссылка);
	
	Если РезультатПроверки.СтатусПроверки Тогда
		Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
	Иначе	
		Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
	КонецЕсли;
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.КонтрольныеСоотношенияУправляемая",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	ПриИзмененииПравилаОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоПроверкиПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемаяИБПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	ОбновитьДанныеФормыСервер();
	
КонецПроцедуры // ОбновитьДанныеФормы() 

&НаСервере
Функция ПроверитьДанныеЯчейки(ИмяОбласти)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("СодержитЗначение",Истина);
		
	ПоказательОбласти = РабочийОбъект.мПоказатели.Найти(ИмяОбласти, "Код");
			
	Если ПоказательОбласти = Неопределено Тогда
		
		Возврат Новый Структура("СодержитЗначение",Ложь);
		
	КонецЕсли;
		
	МассивДанных=РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",ПоказательОбласти.Ссылка));
	
	Если МассивДанных.Количество()>1 И (НЕ ПоказательОбласти.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается) Тогда
	
		СтрокаШаблона = Нстр("ru = 'Для показателя %1 существуют %2 строк аналитического раскрытия по группе %3. Выберите действие.'");
		
		ТекстПоказатель = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ТекстПоказатель = СтрШаблон(СтрокаШаблона, ПоказательОбласти.Наименование, МассивДанных.Количество(), ПоказательОбласти.ГруппаРаскрытия);	
		КонецЕсли;
		
		СтруктураДанных.Вставить("ТекстПоказатель", ТекстПоказатель);
		
		Если ПоказательОбласти.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			СтруктураДанных.Вставить("ВозможенПересчет",Истина);
			
		Иначе
			
			СтруктураДанных.Вставить("ВозможенПересчет",Ложь);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураДанных.Вставить("ТекстПоказатель","");
		
	КонецЕсли;
			
    Возврат СтруктураДанных; 
	
	
КонецФункции // ПроверитьДанныеЯчейки() 

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если ЗначениеЗаполнено(ТекДанныеЯчейки) Тогда
		
		ВведенноеЗначение=Область.Значение;
		ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
		МассивИзмененныхОбластей=УстановитьЗначениеПоказателя(ДанныеФормы,ВведенноеЗначение);
		ОбновитьРеквизитыФормы(ДанныеФормы);
		
		Для Каждого ДанныеОбласти ИЗ МассивИзмененныхОбластей Цикл
			
			ИзмененнаяОбласть=ПолеТабличногоДокументаМакет.Область(ДанныеОбласти.Верх,ДанныеОбласти.Лево,ДанныеОбласти.Низ,ДанныеОбласти.Право);
			
			Если ИзмененнаяОбласть.Имя=Область.Имя Тогда
							
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеОбласти.Значение) Тогда
				ИзмененнаяОбласть.Значение=ИзмененнаяОбласть.Значение+ДанныеОбласти.Значение;
			Иначе
				ИзмененнаяОбласть.Значение=ДанныеОбласти.ЗначениеИзменения;
			КонецЕсли;
						
		КонецЦикла;
		
		Модифицированность=Истина;
			
	Иначе
		
		Обл=Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
		
		Если ТипЗнч(Обл) = Тип("РисунокТабличногоДокумента")
			ИЛИ (НЕ Обл.СодержитЗначение) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СтруктураДанныеЯчейки=ПроверитьДанныеЯчейки(Обл.Имя);
		
		Если НЕ СтруктураДанныеЯчейки.СодержитЗначение Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтруктураДанныеЯчейки.ТекстПоказатель) Тогда
			
			ДопПараметры = Новый Структура("ИмяОбластиРедактирования", Область.Имя);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыборСпособаОбработки", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаВыбораСпособаОбработкиРаскрытияУпр",
							СтруктураДанныеЯчейки, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			УстановитьЗначениеПоказателейОбласти(, "");
			
		КонецЕсли;
		
		Модифицированность=Истина;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборСпособаОбработки(Результат, ДополнительныеПараметры) Экспорт
    
    Если Не Результат = Неопределено Тогда        
        УстановитьЗначениеПоказателейОбласти(, Результат, ДополнительныеПараметры.ИмяОбластиРедактирования);        
    КонецЕсли;

КонецПроцедуры

// Для выделенных ячеек устанавливает значение показателя
&НаСервере
Процедура УстановитьЗначениеПоказателейОбласти(ПринудительнаяОчистка = Ложь, ВыбранноеДействие="", ИмяОбластиРедактирования = Неопределено)
	
	Если НЕ Заблокирован Тогда
		Возврат;
	КонецЕсли;
	
	РабочийОбъект = ПолучитьРабочийОбъект();
	
	МассивПоказателей = Новый Массив();
	
	Если ИмяОбластиРедактирования = Неопределено Тогда
		Обл = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	Иначе	
		Обл = ПолеТабличногоДокументаМакет.Область(ИмяОбластиРедактирования);
	КонецЕсли;	
	
	Если Объект.СпособВывода = "Дерево" Тогда
		
		Если ТекДанныеЯчейки<>Неопределено Тогда
			 Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
				 ПоказательОбласти = РабочийОбъект.мПоказатели.Найти(ТекДанныеЯчейки.Показатель, "Ссылка");
				 МассивПоказателей.Добавить(ПоказательОбласти);
			 КонецЕсли;
		 КонецЕсли;
		 
	Иначе
		
		Для ИндСтроки = Обл.Верх По Обл.Низ Цикл
			Для ИндКол = Обл.Лево По Обл.Право Цикл
				ОблТек = ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКол,ИндСтроки,ИндКол);
				ПоказательОбласти = РабочийОбъект.мПоказатели.Найти(ОблТек.Имя, "Код");
				Если  ПоказательОбласти<>Неопределено Тогда
					МассивПоказателей.Добавить(ПоказательОбласти);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
		
	КонецЕсли;
	
	РабочийОбъект.НомерТекущейОперации = РабочийОбъект.НомерТекущейОперации + 1;
	
	РасширениеПроцессыИСогласованиеУХ.УстановитьСостояниеСогласованияПослеЗаполнения(РабочийОбъект);	
	
	Для Каждого ПоказательОбласти из МассивПоказателей Цикл 
		
		Если ПринудительнаяОчистка Тогда
			ВведенноеЗначение = Неопределено;
		Иначе
			
			Если ПоказательОбласти.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				
				Если ЗначениеЗаполнено(РабочийОбъект.мТекущаяВалюта) И РабочийОбъект.мТекущаяВалюта <> РабочийОбъект.ОсновнаяВалюта Тогда
					
					ВведенноеЗначение = РабочийОбъект.ПолучитьЗначениеПоказателяВОсновнойВалюте(ПоказательОбласти, Обл.Значение);
					
				Иначе
					
					ВведенноеЗначение=Обл.Значение;
					
				КонецЕсли;
				
				Если НЕ ПоказательОбласти.НеМасштабируется Тогда
					ВведенноеЗначение = ВведенноеЗначение * РабочийОбъект.ВернутьЗначениеДелителя();
				КонецЕсли;
				
			Иначе
				
				ВведенноеЗначение=Обл.Значение;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если НЕ УстановитьЗначениеПоказателяВручную(РабочийОбъект, ПоказательОбласти, ?(ПринудительнаяОчистка, "Очистить", ВыбранноеДействие), ВведенноеЗначение) Тогда
			
			// Восстановим значение области
			Если ПоказательОбласти.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				Если ЗначениеЗаполнено(РабочийОбъект.мТекущаяВалюта)
					И РабочийОбъект.мТекущаяВалюта <> РабочийОбъект.ОсновнаяВалюта Тогда
					ТекущееЗначение = РабочийОбъект.ПересчитатьЗначениеПоказателяПоКурсу(ПоказательОбласти.Значение, ПоказательОбласти, РабочийОбъект.ОсновнаяВалюта, РабочийОбъект.мТекущаяВалюта);
				Иначе
					ТекущееЗначение = ПоказательОбласти.Значение;
				КонецЕсли;
				
				Если НЕ ПоказательОбласти.НеМасштабируется Тогда
					Обл.Значение = ТекущееЗначение / РабочийОбъект.ВернутьЗначениеДелителя();
				Иначе
					Обл.Значение = ТекущееЗначение;
				КонецЕсли;
				
			Иначе
				Обл.Значение = ПоказательОбласти.Значение;
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ЗначениеЗаполнено(РабочийОбъект.мТекущаяВалюта) И РабочийОбъект.мТекущаяВалюта <> РабочийОбъект.ОсновнаяВалюта Тогда
				
				ПоказательОбластиВалюта = РабочийОбъект.мПоказателиВВалюте.Найти(Обл.Имя, "Код");
				ПоказательОбластиВалюта.Значение=Обл.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВычислятьПриИзменении Тогда
			
			Если НЕ РабочийОбъект.ДанныеПараметрикиАктуальны Тогда
				УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект,,Истина);
			КонецЕсли;
			
			МассивКодовПоказателей=РабочийОбъект.ПолучитьПутьВычисления(ПоказательОбласти.Код);		
			ПересчитатьВычисляемыеПоказателиБланк(РабочийОбъект,МассивКодовПоказателей);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
	УправлятьДоступностьюЭлементовФормы();
	ПоместитьРабочийОбъект(РабочийОбъект);
		
КонецПроцедуры

// Очищает записи по аналитике показателя, связанного с областью ОбластьПоказателя
// и устанавливает новое значение, сбросив данные расчета и установив флаг
// неактуальности данным показателя, хранящимся в реестре.
//
&НаСервере
Функция УстановитьЗначениеПоказателяВручную(РабочийОбъект,Показатель, ВыбранноеДействие, Значение) Экспорт
	
	МассивДанных=РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",Показатель.Ссылка));
	
	ОтменитьУдаление=Истина;
	
	Значение = ?(Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число,?(ЗначениеЗаполнено(Значение), Число(Значение), 0),Значение);
	
	Если (МассивДанных.Количество()=1 И УправлениеОтчетамиУХ.ПроверитьЗаполнениеАналитик(РабочийОбъект,МассивДанных[0],РабочийОбъект.мПоказателиРаскрытия)) Тогда
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,?(ВыбранноеДействие = "Очистить", Неопределено, Значение), МассивДанных[0]);
		
	ИначеЕсли МассивДанных.Количество() > 1 Тогда
		
		Если Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число
			И (НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается) Тогда
						
			Если ВыбранноеДействие = "Пересчитать" И (Не Показатель.Значение=0) Тогда
				
				ТекущаяПропорция=Значение/Показатель.Значение;
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Строка.Значение*ТекущаяПропорция,Строка);
					
				КонецЦикла;	
								
			ИначеЕсли ВыбранноеДействие = "Очистить" Тогда
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Неопределено, Строка);
					
				КонецЦикла;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			
			ОчиститьДанные = (ВыбранноеДействие = "Очистить");
						
			Если ОчиститьДанные Тогда
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Неопределено, Строка);
					
				КонецЦикла;
				
			Иначе
				
				Возврат Ложь
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Показатель.Значение = Значение;
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(РабочийОбъект,Показатель, Значение);
	Показатель.ДанныеРасчета = Неопределено;
	Показатель.СохраненныеДанныеАктуальны=Ложь;
	
	Если Не Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		РабочийОбъект.ИзмененНечисловойПоказатель=Истина;
	КонецЕсли;
	
	РабочийОбъект.Показатели[Показатель.Код]=Значение;
		
	Возврат Истина;
	
КонецФункции // УстановитьЗначениеПоказателяВручную()

// Пересчитывает вычисляемые показатели и обновляет основной макет на форме.
//
&НаСервере
Процедура ПересчитатьВычисляемыеПоказателиБланк(РабочийОбъект,МассивКодовПоказателей=Неопределено) Экспорт
	
	// заполняем параметры
	РабочийОбъект.СформироватьСтруктуруПараметров();
	
	ПротоколируемыеСобытияУХ.Начать(РабочийОбъект);
	
	// запускаем код заполнения
	
	ВычислениеВыполнено=РабочийОбъект.ЗапуститьМодульВычисления(МассивКодовПоказателей);
	
	РабочийОбъект.ЗавершитьПротоколЗагрузки();
	ОбработатьРезультатРасчетов(РабочийОбъект);
	
	Если НЕ ВычислениеВыполнено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияВМакете(РабочийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияВМакете(РабочийОбъект)
	
	ТекИзмененныеПоказатели=РабочийОбъект.ПолучитьИзмененныеПоказателиАбс();
	
	Делитель=РабочийОбъект.ВернутьЗначениеДелителя();
	Области = ПолеТабличногоДокументаМакет.Области;
	
	Для Каждого Стр Из ТекИзмененныеПоказатели Цикл
				
		Обл = Области.Найти(Стр.Код);
		
		Если Обл <> Неопределено И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			Если ТипЗнч(Стр.Значение) = Тип("Число") Тогда
								
				Если НЕ Стр.НеМасштабируется Тогда
					Обл.Значение = Стр.Значение / Делитель;
				Иначе
					Обл.Значение = Стр.Значение;
				КонецЕсли;
			
			Иначе
				
				Обл.Значение    = Стр.Значение;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьЗначенияВМакете() 

&НаСервере
Процедура ОбновитьДанныеВЯчейках()
	
	ОбновитьДанныеФормыСервер();
	
КонецПроцедуры // ОбновитьДанныеВЯчейках()

&НаКлиенте
Процедура ОтобразитьРаскрытие(Команда)
	
	Обл = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если ТипЗнч(Обл) = Тип("РисунокТабличногоДокумента")
		ИЛИ (НЕ Обл.СодержитЗначение=Истина) Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФормуРаскрытияПоАналитике(Обл.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаскрытияПоАналитике(ИмяОбласти, СтруктураОтбора = Неопределено,ДанныеСтрокиАналитики=Неопределено) Экспорт
		
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ИмяОбласти",				ИмяОбласти);
	СтруктураПараметров.Вставить("РабочийОбъектАдрес",		РабочийОбъектАдрес);
	СтруктураПараметров.Вставить("ИдентификаторРодителя",	ЭтаФорма.УникальныйИдентификатор);	
	СтруктураПараметров.Вставить("ВалютаОтображения",		ВыбраннаяВалюта);
	СтруктураПараметров.Вставить("РежимРедактирования",		Заблокирован);
	СтруктураПараметров.Вставить("СтруктураОтбора", 		СтруктураОтбора);
	СтруктураПараметров.Вставить("ДанныеСтрокиАналитики", 	ДанныеСтрокиАналитики);
	СтруктураПараметров.Вставить("глОсновнойЯзык", 			НомерОсновногоЯзыка);

	ФормаАналитик = ПолучитьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаОтображенияАналитикиУправляемая",СтруктураПараметров,ЭтаФорма,Истина,);
	
	Если НЕ ФормаАналитик=Неопределено Тогда
		ФормаАналитик.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаАналитик.Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОГЛАСОВАНИЯ.
//

// Проверяет наличие и возвращает значение реквизита на форме
// с именем НаименованиеРеквизитаВход. Когда реквизит не найден -
// будет возвращено Неопределено.
&НаКлиенте
Функция ПолучитьЗначениеРеквизитаФормы(НаименованиеРеквизитаВход)
	РезультатФункции = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, НаименованиеРеквизитаВход) Тогда
		РезультатФункции = ЭтаФорма[НаименованиеРеквизитаВход];
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ОпределитьДоступностьКнопок()
	
	Элементы.СостояниеЗаявки.Доступность       = НЕ ИспользуетсяМарщрутСогласования;
	
	//Если Объект находится на согласовании, то проверить возможность редактирования, текущим пользователем
	Элементы.Редактирование.Доступность					 = Истина;
    Элементы.ФормаОбновитьДанные.Доступность			 = Истина;
	Элементы.Вычислить.Доступность						 = Истина;
	Элементы.ОсновныеРеквизиты.ТолькоПросмотр			 = Ложь;
    Элементы.НастройкиОбработкиДанных.ТолькоПросмотр	 = Ложь;
	Элементы.ГруппаРазрешитьРедактирование.Доступность	 = Истина;
	
	ЗначениеСостояния = ПолучитьЗначениеРеквизитаФормы("СостояниеЗаявки");
	Если РасширениеПроцессыИСогласованиеУХ.ЭтоСостояниеВРаботе(ЗначениеСостояния) Тогда
		ЭтапыСогласованияДляТекущегоПользователя = РасширениеПроцессыИСогласованиеУХ.ПолучитьМассивЭтаповСогласованияТекущегоПользователя(Объект.Ссылка);
		Если ЭтапыСогласованияДляТекущегоПользователя.Количество() > 0 Тогда
			ИмеетПравоРедактирования = ЭтапыСогласованияДляТекущегоПользователя[0].ПравоРедактирования;
			Если НЕ ИмеетПравоРедактирования Тогда
				Элементы.Редактирование.Доступность					 = Ложь;
				Элементы.ФормаОбновитьДанные.Доступность			 = Ложь;
				Элементы.Вычислить.Доступность						 = Ложь;
				Элементы.ОсновныеРеквизиты.ТолькоПросмотр			 = Истина;
				Элементы.НастройкиОбработкиДанных.ТолькоПросмотр	 = Истина;
				Элементы.ГруппаРазрешитьРедактирование.Доступность	 = Ложь;
			КонецЕсли;	
		Иначе	
			Элементы.Редактирование.Доступность					 = Ложь;
			Элементы.ФормаОбновитьДанные.Доступность			 = Ложь;
			Элементы.Вычислить.Доступность						 = Ложь;
			Элементы.ОсновныеРеквизиты.ТолькоПросмотр			 = Истина;
			Элементы.НастройкиОбработкиДанных.ТолькоПросмотр	 = Истина;
			Элементы.ГруппаРазрешитьРедактирование.Доступность	 = Ложь;
		КонецЕсли;
	Иначе
		// Не выполняем изменения доступности в связи с согласованием.
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ СОГЛАСОВАНИЯ.

&НаКлиенте
Функция СостояниеЯвляетсяПодтвержденным(ТекСостояние) Экспорт
	
	Возврат ТекСостояние = СтруктураСостояний.Подготовлен
	    ИЛИ ТекСостояние = СтруктураСостояний.Утвержден;
	 
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Оповещения согласования документа
	Если ИмяСобытия = "УтвердитьЭтап" Тогда
		
	ИначеЕсли ИмяСобытия = "ОтклонитьЭтап" Тогда
		
	ИначеЕсли ИмяСобытия = "ВернутьИсполнителю" Тогда
		
	ИначеЕсли ИмяСобытия = "ОбновитьОтображениеОтчета" И Источник=ЭтаФорма.УникальныйИдентификатор Тогда
		
		РабочийОбъектАдрес = Параметр;
		ДанныеПараметрикиАктуальны=Истина;
		ОбновитьДанныеВЯчейках();
		Модифицированность=Истина;
		
	ИначеЕсли ИмяСобытия = "ИзмененАдресОбъекта" И Источник=ЭтаФорма.УникальныйИдентификатор Тогда
		
		РабочийОбъектАдрес = Параметр;	
		
	ИначеЕсли ИмяСобытия = "ИзменитьПоказатели"  Тогда
		
		Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	
	    ИзменитьПоказателиСервер(Параметр);
		Модифицированность=Истина;
		
	ИначеЕсли ИмяСобытия = "ПеренестиПоказатели"  Тогда
		
		Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	
	    ПеренестиПоказателиСервер(Параметр);
		Модифицированность=Истина;
		
	ИначеЕсли ИмяСобытия = "ОшибкаПриОткрытииАналитики" Тогда
		//Сообщить(Параметр);
		// Оповещения расшифровки
	ИначеЕсли ИмяСобытия = "РасшифроватьОперанд" Тогда
		Расшифровка = Параметр;
		Если ТипЗнч(Расшифровка.Операнд) = Тип("СправочникСсылка.ПоказателиОтчетов")
			ИЛИ Расшифровка.Операнд.ПоказательТекущегоОтчета Тогда
			
			СтруктураОтбора = Новый Структура;
			Для Каждого ТекЗапись Из Расшифровка.СтруктураОтбора Цикл
				СтруктураОтбора.Вставить(ТекЗапись.Ключ, Новый Структура("ВидСравнения, Значение", ВидСравнения.Равно, ТекЗапись.Значение));
			КонецЦикла;
			
			МассивПоказателей = Новый Массив;
			Если ТипЗнч(Расшифровка.Операнд) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
				МассивПоказателей.Добавить(СокрЛП(Расшифровка.Операнд.Код));
			Иначе
				МассивПоказателей.Добавить(СокрЛП(Расшифровка.Операнд.ПоказательОтбор.Код));
			КонецЕсли;
			
			ВыделитьОбластиПоказателей(МассивПоказателей);
			ОткрытьФормуРаскрытияПоАналитике(МассивПоказателей[0], СтруктураОтбора);
			
		Иначе
			МассивПоказателей = Неопределено;
			Результат = ВернутьСписокОтчетов(РабочийОбъектАдрес, Расшифровка.Операнд, Расшифровка.СтруктураОтбора, МассивПоказателей, УникальныйИдентификатор);
			Для Каждого КлючИЗначение Из Результат Цикл
				ОткрытьФорму("Документ.НастраиваемыйОтчет.ФормаОбъекта", Новый Структура("Ключ, МассивПоказателей, СтруктураОтбора", КлючИЗначение.Ключ, МассивПоказателей, КлючИЗначение.Значение));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="Обработать удаление версий" И Параметр=Объект.Ссылка Тогда
		
		ОбработатьУдалениеВерсий();
		
	ИначеЕсли ИмяСобытия="СвернутьВерсии" 
		И ТипЗнч(Параметр)=Тип("Структура") 
		И Параметр.ЭкземплярОтчета=Объект.Ссылка Тогда
		
		СвернутьДоВерсии(Параметр.ВерсияДляСвертки);
		
	ИначеЕсли ИмяСобытия="ПеревестиВРежимРедактирования" Тогда
		
		ПеревестиВРежимРедактирования();
		
		Элементы.Редактирование.Пометка=Истина;
		Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
		УправлятьДоступностьюЭлементовФормы();
		
	ИначеЕсли ИмяСобытия="ИзмененоРаскрытиеВТелеОтчета" И Источник=ЭтаФорма.УникальныйИдентификатор Тогда
		
		ОбработатьИзменениеРаскрытия(Параметр);
		Модифицированность=Истина;
		
	ИначеЕсли ИмяСобытия = "ЗаписанКомментарий" Тогда
		
		//ТекПоказатель = мСоответствиеДляПоискаПоСсылке[Параметр];
		//Если ТекПоказатель <> Неопределено Тогда
			ТекОбласть = ПолеТабличногоДокументаМакет.Области.Найти(СокрЛП(Источник.ПоказательКод));
			Если ТЕкОБласть <> Неопределено Тогда
				ТекОбласть.Примечание.Текст = СформироватьТекстКомментария(Источник.Показатель,Источник.Комментарии[Источник.Комментарии.Количество()-1].Комментарий);
			КонецЕсли;
		//КонецЕсли;
				
	ИначеЕсли ИмяСобытия="ВыполненоОбратноеРаспределение"
		И Параметр.ВидОтчета=Объект.ВидОтчета
		И Параметр.Организация=Объект.Организация
		И Параметр.ПериодОтчета=Объект.ПериодОтчета
		И Параметр.Сценарий=Объект.Сценарий Тогда
		
		Если Параметр.СпособЗаполнения="АвтоматическиКонсолидация" Тогда
			
			ЗаполнитьДокумент("АвтоматическиКонсолидация");
			
		Иначе
			
			ЗаполнитьДокумент("АвтоматическиСвернувПоПериоду",Объект.ПериодичностьСвертывания);
			
		КонецЕсли;
		
		ЗаписатьИПродолжить(Неопределено);
		
	ИначеЕсли ИмяСобытия = "ОбъектСогласован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		Элементы.ФормаОтобразитьПротокол.Видимость = ЕстьПротоколируемыеОшибки();
		#КонецОбласти		
	ИначеЕсли (ИмяСобытия = "ИзменитьНастройкиЭкземпляраОтчета") И (Источник = ЭтаФорма) Тогда
		ВыставитьВыбранныеНастройкиИОбновитьФорму(Параметр);
		УстановитьЗаголовокФормы();
	ИначеЕсли (ИмяСобытия = "ЗаписанДокументКорректировки") И (Параметр = ЭтаФорма) Тогда
		ОбновитьСУчетомВерсий(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоказателиСервер(Параметр) Экспорт
		
	РабочийОбъект=ПолучитьРабочийОбъект();
	СтруктураОтбора         = Новый Структура;
	СтруктураАналитикОтчета = Новый Структура;
	
	РабочаяТаблица=ПолучитьИзВременногоХранилища(Параметр.РабочаяТаблица);
	РабочаяТаблицаРаскрытий = ПолучитьИзВременногоХранилища(Параметр.АдресТабТекущихРаскрытий);
	РабочаяТаблицаРаскрытий.Колонки["ИтоговоеЗначение"].Имя="Значение";
	ОтборДанных = Параметр.ОтборДанных;
	
	ОбработкаРаскрытий=Параметр.ОбработкаРаскрытий;
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		
		Если Объект.ВидОтчета.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
				
				Если Не РабочаяТаблица.Колонки.Найти("ВидАналитики" + Инд)=Неопределено Тогда
					СтруктураОтбора.Вставить("Аналитика" + Инд, Неопределено);
				КонецЕсли;
				
			Иначе
				СтруктураАналитикОтчета.Вставить("Аналитика" + Инд, Объект["Аналитика" + Инд]);
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка на то, что не все аналитики заняты аналитиками на уровне отчета.
	ЕстьРаскрытияАналитик = СтруктураОтбора.Количество() <> 0;
		
	Если ЕстьРаскрытияАналитик Тогда
		
		МассивСтрокСвернутыхПараметров  = РабочаяТаблица.НайтиСтроки(СтруктураОтбора);
		ТаблицаСвернутыхПараметров = РабочаяТаблица.СкопироватьКолонки();
		
		Для Каждого Строка Из МассивСтрокСвернутыхПараметров Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаСвернутыхПараметров.Добавить(), Строка);
			РабочаяТаблица.Удалить(Строка);
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаСвернутыхПараметров = РабочаяТаблица.Скопировать();
		
	КонецЕсли;	
	
	// Собственно заполнение таблиц мПоказатели и мПоказателиРаскрытия.
	
	РабочийОбъект.НачатьНовуюОперацию();
	
	СтруктураОтбораАналитик = Новый Структура("Показатель");
	Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураОтбораАналитик.Вставить("Аналитика" + Инд);
	КонецЦикла;
	
	Если ОтборДанных Тогда
		УстановитьЗначениеПоказателейОбласти(Истина);
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаСвернутыхПараметров Цикл
		
		Показатель = РабочийОбъект.мСоответствиеДляПоискаПоСсылке[Строка.Показатель];
		
		Если ЕстьРаскрытияАналитик Тогда
			
			СтрокиРаскрытийНов = РабочаяТаблица.НайтиСтроки(Новый Структура("Показатель", Строка.Показатель));
			СтрокиРаскрытийТек = РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель", Строка.Показатель));
			
			Для Каждого СтрокаТек ИЗ СтрокиРаскрытийТек Цикл
				РабочийОбъект.мПоказателиРаскрытия.Удалить(СтрокаТек);
			КонецЦикла;
			
			Если ОбработкаРаскрытий="Пересчитать" Тогда 
				
				Для Каждого СтрокаРаскрытия Из СтрокиРаскрытийНов Цикл
					
					СтрокаПоказателейРаскрытия = РабочийОбъект.мПоказателиРаскрытия.Добавить();
					
					// Заполнение аналитик на уровне отчета для показателя раскрытия.
					ЗаполнитьЗначенияСвойств(СтрокаПоказателейРаскрытия, СтруктураАналитикОтчета);
					
					// Заполнение ссылки на показатель, аналитик на уровне показателя.
					ЗаполнитьЗначенияСвойств(СтрокаПоказателейРаскрытия, СтрокаРаскрытия);
					
					УправлениеОтчетамиУХ.ТипизироватьАналитикиПринудительно(РабочийОбъект,СтрокаПоказателейРаскрытия,Показатель);
					
					// Заполнение значения раскрытия показателя;
					СтрокаПоказателейРаскрытия.Значение = СтрокаРаскрытия.ИтоговоеЗначение;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если ОтборДанных Тогда
			
			СтрокиРаскрытия = РабочаяТаблицаРаскрытий.НайтиСтроки(Новый Структура("Показатель", Строка.Показатель));
			
            //УстановитьЗначениеПоказателяВручную(РабочийОбъект,Показатель, "Очистить", Неопределено);
             ИтогПоПоказателю = 0; 
			 
			 Для Каждого СтрокаТек ИЗ СтрокиРаскрытия Цикл
				
				ИтогПоПоказателю =ИтогПоПоказателю+СтрокаТек.Значение; 
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,СтрокаТек.Значение,СтрокаТек);
				
			КонецЦикла;
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(РабочийОбъект,Показатель, ИтогПоПоказателю);
		КонецЕсли;
		
		УстановитьЗначениеПоказателяВручную(РабочийОбъект,Показатель, ОбработкаРаскрытий, Строка.ИтоговоеЗначение);
		
	КонецЦикла;
	ПоместитьРабочийОбъект(РабочийОбъект);
	РабочийОбъект.ЗапуститьМодульВычисления();
		
	Если Объект.СпособВывода="Дерево" Тогда
		
		ИзменяемаяЯчейка=Неопределено;
		РабочийОбъект.ПолучитьИзмененныеПоказатели(1);
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
	//Если СозданаВФормеГрупповогоРедактирования И (НЕ Открыта()) Тогда
	//	
	//	// Если форма была создана в процессе группового редактирования отчета - необходимо оповестить об
	//	// изменении данных
	//	
	//	Оповестить("ИзмененЭкземплярОтчетаВФорме",Ссылка);
	//	
	//Иначе
	
	РабочийОбъект.ЗаполнитьПоказателиВМакете(ПолеТабличногоДокументаМакет);
	
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиПоказателиСервер(Параметр) Экспорт
	
	ПараметрКопия =ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Параметр);
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ИнициализироватьЗапросыОбъекта();
	
	РабочийОбъект.НачатьНовуюОперацию();
	
	ОбработкаПереносаДанных(ПараметрКопия,РабочийОбъект);
		
	РабочийОбъект.ЗапуститьМодульВычисления();
	
	Если Найти(Объект.СпособВывода,"Дерево")>0 Тогда
		
		Если Объект.СпособВывода="Дерево" Тогда
			
			ИзменяемаяЯчейка=Неопределено;
			ИзмененныеАналитикиРаскрытия=РабочийОбъект.ПолучитьИзмененныеПоказателиРаскрытия();
			
			Если ИзмененныеАналитикиРаскрытия.Количество()>0 Тогда
				
				РабочийОбъект.ОбновитьСтрокиРаскрытияВТаблице(ТекДанныеЯчейки);
				ОбновитьДеревоЗначенийПослеИзмененияАналитик(РабочийОбъект);
				
			Иначе
				
				РабочийОбъект.ПолучитьИзмененныеПоказатели(1);
				
				Если РабочийОбъект.мИзмененныеПоказатели.Количество()>0 Тогда 
					
					ИзменяемаяЯчейка=Неопределено;	
					РабочийОбъект.ОтобразитьДанныеОтчетов(Истина);	
					
					Для Каждого ИзмененнаяЯчейка ИЗ РабочийОбъект.МассивИзмененныхОбластей Цикл
						
						ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресуСервер(ИзмененнаяЯчейка.АдресСтроки);
						
						ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-9].Значение;
						
						ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.ТабДерево.Обновить();
			
		Иначе
			
			ОбновитьДанныеФормыСервер(РабочийОбъект);
			
		КонецЕсли; 	
		
	ИначеЕсли Элементы.ДействияФормыРаскрытиеВБланке.Пометка Тогда 
		
		ИзменяемаяЯчейка=Неопределено;
		РабочийОбъект.ПолучитьИзмененныеПоказатели(1);
		ИзмененныеАналитикиРаскрытия=РабочийОбъект.ПолучитьИзмененныеПоказателиРаскрытия();
		РабочийОбъект.ТабДок=ПолеТабличногоДокументаМакет;
		
		Если ИзмененныеАналитикиРаскрытия.Количество()>0 Тогда
			
			РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
			РабочийОбъект.ОбновитьСтрокиРаскрытия(ТекДанныеЯчейки);
			
		Иначе
			
			РабочийОбъект.ОбновитьЗначенияРаскрытияВТеле();
			
			Для Каждого ДанныеОбласти ИЗ РабочийОбъект.МассивИзмененныхОбластей Цикл
				
				ИзмененнаяОбласть=ПолеТабличногоДокументаМакет.Область(ДанныеОбласти.Верх,ДанныеОбласти.Лево,ДанныеОбласти.Низ,ДанныеОбласти.Право);
				
				Если ЗначениеЗаполнено(ДанныеОбласти.Значение) Тогда
					ИзмененнаяОбласть.Значение=ИзмененнаяОбласть.Значение+ДанныеОбласти.Значение;
				Иначе
					ИзмененнаяОбласть.Значение=ДанныеОбласти.ЗначениеИзменения;
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЕсли; 
		
	Иначе	
		
		РабочийОбъект.ЗаполнитьПоказателиВМакете(ПолеТабличногоДокументаМакет);
		
	КонецЕсли;
	
	РабочийОбъект.СброситьЗапросыОбъекта();
    ПоместитьРабочийОбъект(РабочийОбъект);
	
	Модифицированность=Истина;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПереносаДанных(СтруктураПереноса,РабочийОбъект) Экспорт
	
	// Обработаем изменение значений исходного показателя, если это необходимо
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
	РабочийОбъект.НачатьНовуюОперацию();
	
	Если СтруктураПереноса.СпособПереноса="Перенос"
		И ((Не ЗначениеЗаполнено(СтруктураПереноса.ЭкземплярОтчетаИсточник)) ИЛИ СтруктураПереноса.ЭкземплярОтчетаИсточник=Объект.Ссылка) Тогда
		
		РабочийОбъект.ПереносИсходныхЗначений(СтруктураПереноса);
				
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(СтруктураПереноса.ЭкземплярОтчетаПриемник)) ИЛИ СтруктураПереноса.ЭкземплярОтчетаПриемник=Объект.Ссылка Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Обработаем запись значений в результирующий показатель
		
		ТаблицаАналитикиИсточник=ПолучитьИзВременногоХранилища(СтруктураПереноса.ТаблицаАналитики);
		
		Если НЕ СтруктураПереноса.ОсновнаяВалюта=Объект.ОсновнаяВалюта Тогда
			
			мТекущаяВалютаСтар=РабочийОбъект.мТекущаяВалюта;
			
			мТекущаяВалюта=СтруктураПереноса.ОсновнаяВалюта;
			
			СтруктураПереносаВВалюте=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтруктураПереноса);
			
			СтруктураПереносаВВалюте.ЗначениеКПереносу=РабочийОбъект.ПолучитьЗначениеПоказателяВОсновнойВалюте(СтруктураПереноса.ПоказательПриемник,СтруктураПереноса.ЗначениеКПереносу);
			
			ТаблицаРакрытияВВалюте=ТаблицаАналитикиИсточник.СкопироватьКолонки();
			
			Для Каждого СтрокаРаскрытия ИЗ ТаблицаАналитикиИсточник Цикл
				НоваяСтрока=ТаблицаРакрытияВВалюте.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРаскрытия);
				НоваяСтрока.ЗначениеКПереносу=РабочийОбъект.ПолучитьЗначениеПоказателяВОсновнойВалюте(СтруктураПереноса.ПоказательПриемник,СтрокаРаскрытия.ЗначениеКПереносу);
			КонецЦикла;
			
			РабочийОбъект.мТекущаяВалюта=мТекущаяВалютаСтар;
			
			СтруктураПереносаВВалюте.Вставить("ТаблицаАналитикиИсточник",ТаблицаРакрытияВВалюте);
			РабочийОбъект.ВставкаЗначений(СтруктураПереносаВВалюте);
				
		Иначе	
			
			СтруктураПереноса.Вставить("ТаблицаАналитикиИсточник",ТаблицаАналитикиИсточник);
			РабочийОбъект.ВставкаЗначений(СтруктураПереноса);
						
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПереносаДанных() 



&НаСервереБезКонтекста
Функция ВернутьСписокОтчетов(АдресДокументаОбъекта, СтрОперанд, СтруктураАналитикОтбора, МассивПоказателей, УникальныйИдентификатор)
	
	Возврат Документы.НастраиваемыйОтчет.ПодготовитьСписокДокументовДляРасшифровки(АдресДокументаОбъекта, СтрОперанд, СтруктураАналитикОтбора, МассивПоказателей, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьТекстКомментария(Показатель,ТекстКомментария) Экспорт
		
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ДобавитьКомментарийВСоответствие(Показатель, ТекстКомментария);
	Возврат РабочийОбъект.СформироватьТекстКомментарияДляМакета(Показатель);
	
КонецФункции

&НаКлиенте
Процедура СкопироватьСтрокуРаскрытия()
	
	ОбработкаСтрокиРаскрытия("КопированиеСтрокиАналитики");	
	
КонецПроцедуры // СкопироватьСтрокуРаскрытия()

&НаКлиенте
Функция СкопироватьУниверсальнуюКоллекцию(КоллекцияИсходная) Экспорт
	
	Если ТипЗнч(КоллекцияИсходная)=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,Элемент.Значение);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗнч(КоллекцияИсходная)=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,Элемент.Значение);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Сообщить(НСтр("ru = 'Неверный тип универсальной коллекции для копирования'"));
		Возврат Неопределено
		
	КонецЕсли;
	
КонецФункции // СкопироватьУниверсальнуюКоллекцию()

&НаКлиенте
Функция ПолучитьКодыВыделенныхОбластей()
	
	ТабДок=ПолеТабличногоДокументаМакет;
	МассивКодов=Новый Массив;
	
	Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				ТекОбласть = ТабДок.Область(ИндС, ИндК);
				
				Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
					Продолжить;
				КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
				
				Если ТекОбласть.СодержитЗначение Тогда
										
					МассивКодов.Добавить(СокрЛП(ТекОбласть.Имя));					

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивКодов;
	
КонецФункции // ПолучитьКодыВыделенныхОбластей() 

&НаКлиенте
Процедура РасшифровкаБланк(Команда)
	
	СтруктураПараметров=Новый Структура;
	
	ОбновитьОбъектВХранилище(Ложь);
	
	Если Элементы.ДействияФормыРаскрытиеВБланке.Пометка Тогда
		
		Если ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ТекДанныеЯчейки.Свойство("Показатель") Тогда
			
			МассивКодовПоказателей=Новый Массив;
			
			Для Каждого СтрПоказатель ИЗ ТекДанныеЯчейки.Показатели Цикл
				
				Если СтрПоказатель.Показатель=ТекДанныеЯчейки.Показатель Тогда
					
					МассивКодовПоказателей.Добавить(СтрПоказатель.Код);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПараметров.Вставить("МассивКодовПоказателей",МассивКодовПоказателей);
			
			Если ТекДанныеЯчейки.Раскрытие Тогда
				
				СтруктураОтбора=Новый Структура;
				
				Для Каждого КлючИЗначение ИЗ ТекДанныеЯчейки Цикл
					
					Если Лев(КлючИЗначение.Ключ,9)="Аналитика"
						И ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						
						СтруктураОтбора.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтруктураПараметров.Вставить("СтруктураОтбора",СтруктураОтбора);
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураПараметров.Вставить("МассивКодовПоказателей",ПолучитьКодыВыделенныхОбластей());
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураПараметров.Вставить("мТекущаяВалюта",ВыбраннаяВалюта);

	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.РасшифровкаПоказателейУправляемая",СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруАналитики()
	
	СтруктураАналитика=Новый Структура;
	Инд=МаксАналитикОтчета+1;
	
	Для Колонка=6 ПО ПерваяКолонка-2 Цикл
		
		СтруктураАналитика.Вставить("Аналитика"+Инд,Элементы.ТабДерево.ТекущиеДанные[Элементы.ТабДерево.ПодчиненныеЭлементы[Колонка].Имя]);
		Инд=Инд+1;
		
	КонецЦикла;
	
	Возврат СтруктураАналитика;
		
КонецФункции // ПолучитьСтруктуруАналитики() 

&НаКлиенте
Процедура ТабДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока ИЛИ Копирование) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекСтрАналитики=Неопределено Тогда // Редактируется аналитическое раскрытие
		
		СтруктураСтрока=ПолучитьСтруктуруАналитики();
				
	КонецЕсли;
	
	ИндексРедактируемойКолонки=Элементы.ТабДерево.ПодчиненныеЭлементы.Индекс(Элементы.ТабДерево.ТекущийЭлемент)+1;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаДерево(Команда)
	
	Если ТекДанныеЯчейки=Неопределено
		ИЛИ (НЕ ТекДанныеЯчейки.Свойство("Показатель")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	Массив=Новый Массив;
	Массив.Добавить(ТекДанныеЯчейки.Показатель);	
	
	ОбновитьОбъектВХранилище(Ложь);
	СтруктураПараметров.Вставить("МассивКодовПоказателей",Массив);
	СтруктураПараметров.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураПараметров.Вставить("мТекущаяВалюта",ВыбраннаяВалюта);
	
	Если ТекДанныеЯчейки.Раскрытие Тогда
		
		СтруктураОтбора=Новый Структура;
		
		Для Каждого КлючИЗначение ИЗ ТекДанныеЯчейки Цикл
			
			Если СтрНайти(КлючИЗначение.Ключ,"Аналитика")>0
				И ЗначениеЗаполнено(КлючИЗначение.Значение)
				И (НЕ ТипЗнч(КлючИЗначение.Значение)=Тип("Структура")) Тогда
				
				СтруктураОтбора.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПараметров.Вставить("СтруктураОтбора",СтруктураОтбора);
		
	КонецЕсли;

	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.РасшифровкаПоказателейУправляемая",СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиБланк(ИсходныйДокумент,КонечныйДокумент)

	КонечныйДокумент.Вывести(ИсходныйДокумент);
	
КонецПроцедуры // ВывестиБланк() 

&НаКлиенте
Процедура ПечатьВТекущемВиде(Команда)
	
	Если СтрНайти(Объект.СпособВывода,"Бланк")>0 Тогда
		
		ТабДок=Новый ТабличныйДокумент;
		
		ВывестиБланк(ПолеТабличногоДокументаМакет,ТабДок);
		
		ТабДок.Показать(ЭтаФорма.Заголовок);
		
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	ЗаполнитьДокумент();
	ПоказатьПротоколПриНеобходимости();
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыЧтениеНеактуальныхЗаписей(Команда)
	
	Объект.ЧтениеНеактуальныхЗаписей = Не Объект.ЧтениеНеактуальныхЗаписей;
	Элементы.ЧтениеНеактуальныхЗаписей.Пометка = Объект.ЧтениеНеактуальныхЗаписей;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыНеВноситьИзменения(Команда)
	
	Объект.НеВноситьИзменения=Не Объект.НеВноситьИзменения;	
	Элементы.НеВноситьИзменения.Пометка=Объект.НеВноситьИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСВерсиями(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭкземплярОтчета", Объект.Ссылка);
		СтруктураПараметров.Вставить("МногопериодныйРежим", Ложь);
		//СтруктураПараметров.Вставить("ТекущийБланк", ЭтаФорма[ТекущийОбъектАБ].Бланк);		
		СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);		
		СтруктураПараметров.Вставить("Сценарий",Объект.Сценарий);	
		СтруктураПараметров.Вставить("Организация",Объект.Организация);
		СтруктураПараметров.Вставить("Проект",Объект.Проект);
		СтруктураПараметров.Вставить("ПериодОтчета",Объект.ПериодОтчета);
        СтруктураПараметров.Вставить("ПериодОкончания",Объект.ПериодОкончания);
		Для Инд =1 По ЧислоДопАналитик Цикл
			СтруктураПараметров.Вставить("Аналитика"+Инд,Объект["Аналитика"+Инд]);
		КонецЦикла;	
		
		ОткрытьФорму("Обработка.СверткаВерсий.Форма.ФормаУправляемая", 
			СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать отчёт для работы с версиями. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЯчейкаОтноситсяКПоказателю()
	
	 Возврат (ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ТекДанныеЯчейки.Свойство("Показатель"));
	
 КонецФункции // ЯчейкаОтноситсяКПоказателю()

// Функция возвращает массив всех показателей, для которых есть сопоставленная ячейка.
&НаСервере
Функция ВернутьТаблицуВсехПоказателейТекущегоБланка()
	
	СписокКолонокОтчета = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Если Объект.СпособВывода="Дерево" Тогда
		
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоказателиОтчетов.Код КАК КодПоказателя,
		|	ПоказателиОтчетов.Строка.ПорядковыйНомер КАК Строка,
		|	ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК Колонка,
		|	ПоказателиОтчетов.Ссылка,
		|	ПоказателиОтчетов.Колонка КАК КолонкаОтчета
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &ВидОтчета
		|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("ВидОтчета", Объект.ВидОтчета);	
		ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоказателиОтчетов.Код КАК КодПоказателя,
		|	ПоказателиОтчетов.Ссылка,
		|	ПоказателиОтчетов.Ссылка.Колонка КАК КолонкаОтчета
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &ВидОтчета
		|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
		Запрос.УстановитьПараметр("ВидОтчета", Объект.ВидОтчета);
		
		Выборка = Запрос.Выполнить().ВЫбрать();
		ТаблицаПоказателей = Новый ТаблицаЗначений;
		ТаблицаПоказателей.Колонки.Добавить("КодПоказателя", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
		ТаблицаПоказателей.Колонки.Добавить("Строка", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
		ТаблицаПоказателей.Колонки.Добавить("Колонка", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
		ТаблицаПоказателей.Колонки.Добавить("Ссылка" , Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		ТаблицаПоказателей.Колонки.Добавить("КолонкаОтчета", Новый ОписаниеТипов("СправочникСсылка.КолонкиОтчетов"));
		
		Пока Выборка.Следующий() Цикл
			ИмяОбласти = СокрЛП(Выборка.КодПоказателя);
			ТекОбласть = ПолеТабличногоДокументаМакет.ОБласти.Найти(ИмяОбласти);
			Если ТекОбласть <> Неопределено Тогда
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				НоваяСтрока.КодПоказателя = ИмяОбласти;
				НоваяСтрока.Строка        = ТекОбласть.Верх;
				НоваяСтрока.Колонка       = ТекОбласть.Лево;
				НоваяСтрока.Ссылка        = Выборка.Ссылка;
				НоваяСтрока.КолонкаОтчета = Выборка.КолонкаОтчета;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//ТабличноеПолеКолонок = ТаблицаПоказателей.Скопировать(,"КолонкаОтчета");
	//ТабличноеПолеКолонок.Свернуть("КолонкаОтчета");
	СписокКолонокОтчета.ЗагрузитьЗначения(ТаблицаПоказателей.ВыгрузитьКолонку("Ссылка"));
	
	//Возврат ТаблицаПоказателей;
	Возврат СписокКолонокОтчета;
КонецФункции

// Возвращает массив ссылок показателей.
//
&НаСервере
Функция ВернутьМассивПоказателей(ВозвращаемаяКоллекция="")
	
	ТабДок            = Элементы.ПолеТабличногоДокументаМакет;
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("КодПоказателя", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаПоказателей.Колонки.Добавить("Строка",        ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаПоказателей.Колонки.Добавить("Колонка",        ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	
	МассивПоказателей = Новый Массив;
	МассивКодов       = Новый Массив;
	
	Если Объект.СпособВывода="Дерево" Тогда
		
		Если ЯчейкаОтноситсяКПоказателю()  Тогда 
			Если  ТекДанныеЯчейки.Раскрытие Тогда
				ТаблицаПоказателей = Новый ТаблицаЗначений;
			Иначе	
				НоваяСтрока=ТаблицаПоказателей.Добавить();
				НоваяСтрока.КодПоказателя=ТекДанныеЯчейки.Показатель.Код;
				НоваяСтрока.Строка=ТекДанныеЯчейки.НомерСтроки;
				НоваяСтрока.Колонка=ТекДанныеЯчейки.НомерКолонки;
			КонецЕсли;	
		КонецЕсли;
				
	Иначе
		
		Область = ТабДок.ТекущаяОбласть;
		//Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
			
			Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Для ИндС = Область.Верх По Область.Низ Цикл
					Для ИндК = Область.Лево По Область.Право Цикл
						ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
						
						Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
							Продолжить;
						КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
						
						Если ТекОбласть.СодержитЗначение Тогда
							
							НоваяСтрока = ТаблицаПоказателей.Добавить();
							НоваяСтрока.КодПоказателя = СокрЛП(ТекОбласть.Имя);
							НоваяСтрока.Строка        = ТекОбласть.Верх;
							НоваяСтрока.Колонка       = ТекОбласть.Лево;					
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			
		//КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаПоказателей.Количество() = 0 Тогда
	//Если МассивКодов.Количество() = 0 Тогда
		Возврат МассивПоказателей;
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ПроверитьКонтекстИнициализирован();
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	Запрос.УстановитьПараметр("Код", МассивКодов);
	Запрос.УстановитьПараметр("ВнешнийИсточник", РабочийОбъект.мПоказатели);
	Запрос.УстановитьПараметр("ВнешнийИсточникНП", ТаблицаПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТаблицаКодов ИЗ &ВнешнийИсточникНП КАК ВнешнийИсточникНП; ";
	
	Если ВозвращаемаяКоллекция = "мПоказатели" Тогда
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ Ссылка, Код, Наименование, ВидКурса, СвязанныйПоказатель, Значение, ТипЗначения, ПериодРасчета
		|ПОМЕСТИТЬ мПоказатели
		|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник;
		|ВЫБРАТЬ мПоказатели.*
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТаблицаКодов КАК ТаблицаКодов
		|ПО мПоказатели.Код = ТаблицаКодов.КодПоказателя
		|ГДЕ
		|	мПоказатели.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
		|УПОРЯДОЧИТЬ ПО ТаблицаКодов.Строка, ТаблицаКодов.Колонка";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ Ссылка, Код, Наименование
		|ПОМЕСТИТЬ мПоказатели
		|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник;
		|ВЫБРАТЬ мПоказатели.*
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТаблицаКодов КАК ТаблицаКодов
		|ПО мПоказатели.Код = ТаблицаКодов.КодПоказателя
		|УПОРЯДОЧИТЬ ПО ТаблицаКодов.Колонка, ТаблицаКодов.Строка";

		Если ВозвращаемаяКоллекция="Таблица" Тогда
			
			Возврат Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтчетОКорректировкахПоВыделеннымПоказателям(Команда)
	
	ВывестиОтчетОКорректировках();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетОКорректировках(МассивПоказателей=Неопределено) Экспорт
	
	Если МассивПоказателей=Неопределено Тогда
		МассивПоказателей = ВернутьДанныеПоказателей().МассивПоказателей;
	КонецЕсли;
	
	Если МассивПоказателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.ЗагрузитьЗначения(МассивПоказателей);
	
	Параметры_ = Новый Структура();
	Параметры_.Вставить("ЭкземплярОтчета", Объект.Ссылка);
	Параметры_.Вставить("СписокПоказателей", СписокПоказателей);
	Параметры_.Вставить("ДокументОбъектАдрес", РабочийОбъектАдрес);
	Имя = "Отчет.ОтчетОКорректировках.Форма.ФормаОтчетаУправляемая";
	ОткрытьФорму(Имя, Параметры_, ЭтаФорма);
	
КонецПроцедуры // ВывестиОтчетОКорректировках()

&НаКлиенте
Процедура ОтчетОКорректировкахПоВсемПоказателям(Команда)
	
	СписокКолонокОтчета = ВернутьТаблицуВсехПоказателейТекущегоБланка();
	
	Если СписокКолонокОтчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ВывестиОтчетОКорректировках(СписокКолонокОтчета.ВыгрузитьЗначения())
		
КонецПроцедуры

&НаСервере
Функция ВернутьРасшифровкуЯчейки(Область = Неопределено)
	
	//Если Область = Неопределено Тогда
	//	Область = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	//КонецЕсли;
	//
	//Если Область.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
	//	И Область.Верх=Область.Низ 
	//	И Область.Лево=Область.Право 
	//	И Область.СодержитЗначение Тогда 
	//	
	//	НомерСтроки=Область.Верх;
	//	НомерКолонки=Область.Лево;
	//	
	//	ДанныеРасшифровки=ПолучитьРасшифровкуЯчейки(ПолучитьСтруктуруДанныхФормы(),НомерСтроки,НомерКолонки);
	//	ТекРасшифровка=ДанныеРасшифровки.ТекРасшифровка;
	//	
	//Иначе
	//	
	//	Возврат Неопределено;
	//	
	//КонецЕсли;
	//
	//Возврат ТекРасшифровка;
	
КонецФункции

&НаКлиенте
Процедура ДействияФормыИсходныйИмпортированныйФайл(Команда)
	
	Если НЕ (ЗначениеЗаполнено(Объект.ФайлИмпорта) И ЗначениеЗаполнено(Объект.ДатаИзменения)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не определен файл для открытия. Операция отменена.'");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ВерсияФайла=ПолучитьВерсиюФайла(Объект.Ссылка,Объект.ФайлИмпорта);
	
	Если ВерсияФайла=Неопределено Тогда
		
		ХранимыеФайлыКлиентУХ.ОткрытьХранимыйФайлДляЧтения(Объект.ФайлИмпорта, Объект.ДатаИзменения);
		
	Иначе
		
		ХранимыеФайлыКлиентУХ.ОткрытьХранимыйФайлДляЧтения(Объект.ФайлИмпорта, ,ВерсияФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыКорректировка(Команда)
	
	РежимКорректировки=Не РежимКорректировки;	
	Элементы.ДействияФормыКорректировка.Пометка=РежимКорректировки;
	
	Если РежимКорректировки И Не Элементы.Редактирование.Пометка Тогда
				
		ПеревестиВРежимРедактирования();
		Элементы.Редактирование.Пометка=Истина;
		Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыРаскрытиеВБланке(Команда)
	
	Элементы.ДействияФормыРаскрытиеВБланке.Пометка = НЕ Элементы.ДействияФормыРаскрытиеВБланке.Пометка;
	Элементы.ПолеТабличногоДокументаМакетГруппаКнопокРедактированияГР.Доступность=Заблокирован И Элементы.ДействияФормыРаскрытиеВБланке.Пометка;
	
	Если СтрНайти(Объект.СпособВывода,"Бланк")>0 Тогда
		
		ОбновитьДанныеФормы();
		УстановитьВидимостьКнопокКонтекстногоМенюБланк();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуРаскрытия(Команда)
	
	ОбработкаСтрокиРаскрытия("ВставкаСтрокиАналитики");
	
КонецПроцедуры

&НаСервере
Функция ЕстьГруппыАналитикВТелеОтчета(РабочийОбъект)
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Код КАК КодСтроки,
	|	СтрокиОтчетов.ГруппаРаскрытия.Код КАК КодГруппыРаскрытия
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|		ПО СтрокиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
	|			И (СтрокиОтчетов.Владелец = &Владелец)
	|			И (ГруппыРаскрытия.Владелец = &Владелец)");
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИмяОбласти = СокрЛП(Выборка.КодГруппыРаскрытия) + "_" + СокрЛП(Выборка.КодСтроки);
		
		СтрМакет=РабочийОбъект.ШаблонОтчета.МакетРаскрытий.Найти(ИмяОбласти);
		
		Если НЕ СтрМакет=Неопределено Тогда
			
			СтруктураМакета=СтрМакет.Макет.Получить();
			
			Для Каждого КлючИЗначение ИЗ СтруктураМакета Цикл
				
				Если КлючИЗначение.Ключ="Содержимое" И (НЕ КлючИЗначение.Значение=Неопределено) Тогда 
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции

&НаСервере
Функция ЕстьПоказателиКонтрольныхСоотношений()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Проверочный");
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ЕстьПротоколируемыеОшибки()
	
	РезультатФункции = Ложь;
	ЕстьПротоколы = ПротоколируемыеСобытияУХ.ЕстьПротоколыПоОбъекту(Объект.Ссылка);
	ЕстьОшибкиОбъекта = ПротоколируемыеСобытияУХ.ЕстьОшибкиПоОбъекту(РеквизитФормыВЗначение("Объект"));
	РезультатФункции = (ЕстьПротоколы ИЛИ ЕстьОшибкиОбъекта);
	Возврат РезультатФункции ИЛИ ТаблицаСобытийЗагрузки.Количество()>0;
			
КонецФункции // ЕстьПротоколируемыеОшибки() 

&НаКлиенте
Процедура ИзменитьСтрокуРаскрытия(Команда)
	
	ОбработкаСтрокиРаскрытия("ИзменениеАналитики");
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВидимостьПанелиРаскрытияИДопЯзыков(РабочийОбъект)
	
	ЕстьРаскрытия = ЕстьГруппыАналитикВТелеОтчета(РабочийОбъект);
	Элементы.ПанельРаботыСАналитическимиРаскрытиями.Видимость = ЕстьРаскрытия;
	
	Если ЕстьРаскрытия Тогда
		Элементы.КнопкаУстановитьФильтрПоКС.Доступность = ЕстьПоказателиКонтрольныхСоотношений();
	КонецЕсли;
		
	ТаблицаЯзыков = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТаблицаЯзыков");
	
	Если ТаблицаЯзыков.Количество() = 0 Тогда
		
		Элементы.ГруппаЯзыки.Видимость=Ложь;
		
	ИначеЕсли ТаблицаЯзыков.Количество() = 1 Тогда
		
		Элементы.ВыводитьДополнительныйЯзык1.Видимость=Истина;
		Элементы.ВыводитьДополнительныйЯзык1.Заголовок=ТаблицаЯзыков[0].НаименованиеЯзыка;
		
		Элементы.ВыводитьДополнительныйЯзык2.Видимость=Ложь;
	
	Иначе
		
		Элементы.ВыводитьДополнительныйЯзык1.Видимость=Истина;
		Элементы.ВыводитьДополнительныйЯзык1.Заголовок=ТаблицаЯзыков[0].НаименованиеЯзыка;
		
		Элементы.ВыводитьДополнительныйЯзык2.Видимость=Истина;
		Элементы.ВыводитьДополнительныйЯзык2.Заголовок=ТаблицаЯзыков[1].НаименованиеЯзыка;
		
	КонецЕсли;
	
	Если ТаблицаЯзыков.Количество() > 0 Тогда
				
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Очистить();
		
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(0, НСтр("ru = 'Основной язык'"));
				
		Для Каждого СтрЯзык ИЗ ТаблицаЯзыков Цикл
			
			Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(СтрЯзык.ПорядковыйНомер,СтрЯзык.НаименованиеЯзыка);
			
		КонецЦикла;
		
		НомерОсновногоЯзыка=ПараметрыСеанса.ЯзыкОтчетности;
				
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ЗаполнитьДокумент("ПоследнийСпособ");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьФильтраПоАналитике(РабочийОбъект, КодСтроки)
	
	ТекстУстановленногоФильтра = "";
	
	Если НЕ КодСтроки = "" Тогда
		
		Отбор = РабочийОбъект.ВернутьТекущуюСтруктуруОтбораИзСоответствия(КодСтроки);
		
		Если НЕ Отбор = Неопределено Тогда
			Если РабочийОбъект.ОтборПоКонтрольнымСоотношениям Тогда
				ТекстУстановленногоФильтра = НСтр("ru = 'Только ошибочные'");
			КонецЕсли;
			
			Для каждого Стр из Отбор Цикл
				ТекстУстановленногоФильтра = ТекстУстановленногоФильтра + ?(ТекстУстановленногоФильтра = "", "", " | ")
				//+ Стр.Ключ + "=" + Стр.Значение.Значение;
				+ ОбщегоНазначенияУХ.ПолучитьПредставлениеВидаСравнения(Стр.Значение.ВидСравнения) + Стр.Значение.Значение;
			КонецЦикла;
		КонецЕсли;		
		
	КонецЕсли;
		
	Элементы.ТекстУстановленногоФильтра.Видимость = НЕ (ТекстУстановленногоФильтра = "");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРаскрытияФорма(РабочийОбъект)
	
	Если НЕ РабочийОбъект.ОсновнаяВалюта = РабочийОбъект.мТекущаяВалюта  Тогда		 
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения();
	КонецЕсли;
	
	РабочийОбъект.ИнициализироватьЗапросыОбъекта(Истина);
	РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	РабочийОбъект.ОбновитьСтрокиРаскрытия(ТекДанныеЯчейки);
	
	Если СтрНайти(Объект.СпособВывода,"Дерево")>0 Тогда
		
		ОбновитьДеревоЗначенийПослеИзмененияАналитик(РабочийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеРаскрытияФорма()

&НаСервере
Процедура ОбработатьИзменениеРаскрытия(Параметры)
	
	СтруктураАналитикиСтар 	= Параметры.ТекущаяАналитика;
	СтруктураАналитикиНов 	= Параметры.НоваяАналитика;
	Операция 				= Параметры.Операция;
	
	Если СтруктураАналитикиНов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РабочийОбъект = ПолучитьРабочийОбъект();	
	РабочийОбъект.ТабДок=ПолеТабличногоДокументаМакет;
	
	Если Операция = "Удаление"
		ИЛИ Операция = "Изменение" Тогда
		
		Массив = Новый Массив;
		
		Для Каждого СтрПоказатели ИЗ СтруктураАналитикиСтар.Показатели Цикл
			
			Массив.Добавить(СтрПоказатели.Показатель);
			
		КонецЦикла;	
		
		УстановитьЗначениеРаскрытия(РабочийОбъект, Массив, Неопределено, СтруктураАналитикиСтар, Неопределено);
		ОбновитьДанныеРаскрытияФорма(РабочийОбъект);
		
	КонецЕсли;
	
	Для Каждого СтрПоказатели ИЗ СтруктураАналитикиНов.Показатели Цикл
		
		Массив = Новый Массив;
		Массив.Добавить(СтрПоказатели.Показатель);
		
		Если Операция = "Добавление" Тогда
			
			Если НЕ СтрПоказатели.Значение = 0 Тогда 
				УстановитьЗначениеРаскрытия(РабочийОбъект, Массив, СтрПоказатели.Значение, СтруктураАналитикиНов, Неопределено);
				ОбновитьДанныеРаскрытияФорма(РабочийОбъект);
			КонецЕсли;
			
		ИначеЕсли Операция = "Копирование" Тогда
			
			УстановитьЗначениеРаскрытия(РабочийОбъект, Массив, СтрПоказатели.Значение, СтруктураАналитикиНов, Неопределено);
			ОбновитьДанныеРаскрытияФорма(РабочийОбъект);
			
		ИначеЕсли Операция = "Изменение" Тогда
			
			СтруктураАналитикиНов.Удалить("ИндексАналитики");
			ТекДанныеЯчейки.Удалить("ИндексАналитики");
			УстановитьЗначениеРаскрытия(РабочийОбъект, Массив, СтрПоказатели.Значение, СтруктураАналитикиНов, Неопределено);
			ОбновитьДанныеРаскрытияФорма(РабочийОбъект);
			
		КонецЕсли;
		
	КонецЦикла;	
		
	РабочийОбъект.СброситьЗапросыОбъекта();
	
	ПоместитьРабочийОбъект(РабочийОбъект);

//	ОбновитьДанныеФормыСервер(РабочийОбъект);

	Модифицированность = Истина;
	
КонецПроцедуры // ОбработатьИзменениеРаскрытия()

&НаКлиенте
Функция ПолучитьДанныеЯчейкиТаблица()
	
	ПоложениеПервойКолонкиПриРаскрытии=1;
	
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
		И ТекущаяОбласть.Верх=ТекущаяОбласть.Низ 
		И ТекущаяОбласть.Лево=ТекущаяОбласть.Право 
		И ТекущаяОбласть.СодержитЗначение Тогда 
		
		НомерСтроки		= ТекущаяОбласть.Верх;
		НомерКолонки	= ?(ТекущаяОбласть.Лево>=ПоложениеПервойКолонкиПриРаскрытии,ТекущаяОбласть.Лево,ПоложениеПервойКолонкиПриРаскрытии);
		
		ДанныеРасшифровки=ПолучитьРасшифровкуЯчейки(ПолучитьСтруктуруДанныхФормы(),НомерСтроки,НомерКолонки);
		
		Если ТипЗнч(ДанныеРасшифровки.ТекРасшифровка)=Тип("Структура") Тогда
			ДанныеРасшифровки.ТекРасшифровка.Вставить("Значение",ТекущаяОбласть.Значение);
		КонецЕсли;
			
		Возврат ДанныеРасшифровки; 		
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
		
КонецФункции // ПолучитьДанныеЯчейки()

&НаКлиенте
Функция ОбработкаСтрокиРаскрытия(ТипОбработки, ВывестиСообщение = Истина)
	
	Если Не Элементы.Редактирование.Пометка Тогда
		ТекстСообщения = НСтр("ru = 'Для редактирования состава группы аналитики требуется перейти в режим редактирования'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
		
	ПоложениеПервойКолонкиПриРаскрытии=1;
	
	Если ТекДанныеЯчейки=Неопределено Тогда
	
		Если СтрНайти(Объект.СпособВывода,"Дерево")>0 Тогда
			
			ИндексКолонки=Элементы.ТабДерево.ПодчиненныеЭлементы.Индекс(Элементы.ТабДерево.ТекущийЭлемент)+1;
			
			Если ИндексКолонки>1 И ИндексКолонки<ПерваяКолонка Тогда
				ИндексКолонки=ПерваяКолонка;
			КонецЕсли;
			
			ДанныеРасшифровки=ПолучитьРасшифровкуЯчейки(ПолучитьСтруктуруДанныхФормы(),Элементы.ТабДерево.ТекущиеДанные.НомерСтроки,ИндексКолонки);
			
		Иначе
			
			ДанныеРасшифровки=ПолучитьДанныеЯчейкиТаблица();
			
		КонецЕсли;
		
		Если ДанныеРасшифровки=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекДанныеЯчейки	= ДанныеРасшифровки.ТекРасшифровка;;
		
	КонецЕсли;
	
	Если НЕ (ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ТекДанныеЯчейки.Свойство("Строка")) Тогда
		
		Если ВывестиСообщение Тогда
			Сообщить(НСтр("ru = 'Не указана строка аналитических раскрытий'"),СтатусСообщения.Информация);
		КонецЕсли;
		Возврат Ложь;
		
	КонецЕсли;
	
	Если (ТипОбработки="УдалениеСтрокиАналитики" ИЛИ ТипОбработки="ИзменениеАналитики") Тогда
		
		ТекстСообщения="";
		
		Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранная строка не содержит аналитических раскрытий.'");
						
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			
			Если ВывестиСообщение Тогда
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли; 
				
	КонецЕсли;
	
	СтрокаОтчета=ТекДанныеЯчейки.Строка;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",	Объект.Организация);
	ПараметрыОбработки.Вставить("Проект",		Объект.Проект);
	ПараметрыОбработки.Вставить("ИдентификаторРодителя",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбработки.Вставить("ТекущийДелитель",ТекущийДелитель);
	ПараметрыОбработки.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);

	Если ТипОбработки="УдалениеСтрокиАналитики" Тогда 
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Удаление");	
		ПараметрыОбработки.Вставить("НоваяАналитика", 	ТекДанныеЯчейки);	

		ОбработатьИзменениеРаскрытия(ПараметрыОбработки);
		
		Возврат Истина;

	ИначеЕсли ТипОбработки="ВставкаСтрокиАналитики" Тогда 
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Добавление");	
				
	ИначеЕсли ТипОбработки="КопированиеСтрокиАналитики" Тогда 
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Копирование");	
								
	ИначеЕсли ТипОбработки="ИзменениеАналитики" Тогда
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Изменение");	
				
	КонецЕсли;	
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаВводаАналитикиУправляемаяДляБланка",ПараметрыОбработки);
	
	Возврат Истина;
	
КонецФункции // ОбработкаСтрокиРаскрытия()

&НаКлиенте
Процедура ОтобразитьПротокол(Команда)
	
	КлючевыеРеквизиты=Новый Структура;
	КлючевыеРеквизиты.Вставить("Организация",Объект.Организация);
	КлючевыеРеквизиты.Вставить("Проект",Объект.Проект);
	КлючевыеРеквизиты.Вставить("ПериодОтчета",Объект.ПериодОтчета);
	КлючевыеРеквизиты.Вставить("Сценарий",Объект.Сценарий);
	КлючевыеРеквизиты.Вставить("ВидОтчета",Объект.ВидОтчета);
	
	Если ТаблицаСобытийЗагрузки.Количество()>0 Тогда
		
		ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("АдресТаблицыСобытий",ПолучитьАдресТаблицыСобытий()));
		
	Иначе	
		
		МассивПротоколируемыхОбъектов=ПолучитьМассивПротоколируемыхОбъектов(Объект.Ссылка,КлючевыеРеквизиты);
		
		Если МассивПротоколируемыхОбъектов.Количество()>0 Тогда
			
			ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("МассивПротоколируемыхОбъектов",ПолучитьМассивПротоколируемыхОбъектов(Объект.Ссылка,КлючевыеРеквизиты)));
			
		Иначе
			
			ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("КонтекстПротокола",ПолучитьКонтекстОбъекта()));
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельБланкаСортироватьВозр(Команда)
	
	УпорядочитьПоВыбранномуПолю("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельБланкаСортироватьУбыв(Команда)
	
	УпорядочитьПоВыбранномуПолю(" УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельБланкаУстановитьФильтр(Команда)
	
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ТекущаяОбласть, "_Показатель_") > 0 Тогда
		
		Результат = Неопределено;

		Оповещение = Новый ОписаниеОповещения("Подключаемый_ПанельБланкаУстановитьФильтр", ЭтотОбъект);
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаВводаУсловияНаЧисловойПоказатель",
						,ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе		
		
		УстановитьФильтр();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельБланкаУстановитьФильтр(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        УстановитьФильтрПоЧисловомуПоказателю(Результат);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПанельБланкаУстановитьФильтрПоВсемОшибочнымКС(Команда)
	
	УстановитьФильтрПоОшибочнымКонтрольнымСоотношениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельБланкОтключитьОтбор(Команда)

	СнятьФильтр();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуРаскрытия(Команда)
	
	ОбработкаСтрокиРаскрытия("УдалениеСтрокиАналитики");
		
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВРежимРедактирования()
	
	Заблокирован=ПодготовитьОтчетДляРедактирования();
	
	Если Заблокирован Тогда
		ТекПометка=Истина;
		Элементы.ТабДеревоЗагрузитьАналитики.Видимость=Ложь;
	КонецЕсли;
	
	Если Элементы.ДекорацияПересчет.Видимость=Истина Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не завершен пересчет показателей текущего экземпляра отчета, вызванный изменением влияющих.'"));
		
	КонецЕсли;
	
	УправлятьДоступностьюЭлементовФормы(Заблокирован);
	
КонецПроцедуры // ПеревестиВРежимРедактирования() 

&НаСервереБезКонтекста
Функция ПовторныйИмпортФайла(ИнформацияОФайле,Ссылка)
	
	ИмпортированнаяВерсия=ХранимыеФайлыУХ.ПолучитьИмпортированнуюВерсию(ИнформацияОФайле,Ссылка);
	
	Если ИмпортированнаяВерсия=Неопределено Тогда
		
		Возврат "";
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Версия файла %ИмяФайла% с датой изменения %ДатаИзмененияФайла% и размером %РазмерФайла%
		|		уже была использована для заполнения текущего экземпляра отчета. Продолжить?'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Строка(ИнформацияОФайле.ИмяФайла));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаИзмененияФайла%", Строка(ИнформацияОФайле.ДатаИзмененияФайла));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазмерФайла%", Строка(ИнформацияОФайле.РазмерФайла));
		Возврат ТекстСообщения;
		
	КонецЕсли;
		
КонецФункции // ПовторныйИмпортФайла() 

&НаСервереБезКонтекста
Функция ПолучитьВерсиюФайла(Ссылка,ХранимыйФайл)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыХранимыхФайлов.ВерсияХранимогоФайла
	|ИЗ
	|	РегистрСведений.ОбъектыХранимыхФайлов КАК ОбъектыХранимыхФайлов
	|ГДЕ
	|	ОбъектыХранимыхФайлов.ХранимыйФайл = &ХранимыйФайл
	|	И ОбъектыХранимыхФайлов.ИмпортированныйОбъект = &ЭкземплярОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыХранимыхФайлов.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ХранимыйФайл",ХранимыйФайл);
	Запрос.УстановитьПараметр("ЭкземплярОтчета",Ссылка);
	
	РезультатРегистр=Запрос.Выполнить().Выбрать();
	
	Если РезультатРегистр.Следующий() Тогда
		
		Возврат РезультатРегистр.ВерсияХранимогоФайла;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВерсиюФайла()

&НаСервереБезКонтекста
Функция ПолучитьМассивПротоколируемыхОбъектов(Ссылка,КлючевыеРеквизиты)
	
	МассивОтчетов=Новый Массив;
	МассивОтчетов.Добавить(Ссылка);
	
	Возврат ПротоколируемыеСобытияУХ.ПолучитьМассивПротоколируемыхОбъектов(МассивОтчетов);
	
КонецФункции  

&НаСервере
Функция ПолучитьАдресТаблицыСобытий()
	
	ТаблицаСобытий=РеквизитФормыВЗначение("ТаблицаСобытийЗагрузки");
	ТаблицаСобытий.Сортировать("Дата,ВремяMs");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСобытий,ЭтаФорма.УникальныйИдентификатор);
		
КонецФункции // ПолучитьАдресТаблицыСобытий()

&НаСервере
Функция ПолучитьКонтекстОбъекта()
		
	Возврат ПротоколируемыеСобытияУХ.ПолучитьСтруктуруКонтекста(РеквизитФормыВЗначение("Объект"));
		
КонецФункции // ПолучитьАдресТаблицыСобытий()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.ФормаОтобразитьПротокол.Видимость=ЕстьПротоколируемыеОшибки();
	
КонецПроцедуры

&НаСервере
Процедура СнятьФильтр()
	
	РабочийОбъект = ПолучитьРабочийОбъект();
	
	РабочийОбъект.СтруктураОтбораАналитикДляСтрокОтчета.Очистить();
	РабочийОбъект.СтруктураСортировкиАналитикДляСтрокОтчета.Очистить();
	РабочийОбъект.ОтборПоКонтрольнымСоотношениям = Ложь;
	
	ОбновитьНадписьФильтраПоАналитике(РабочийОбъект, "");
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьПоВыбранномуПолю(НаправлениеСортировки)
	
	РабочийОбъект = ПолучитьРабочийОбъект();

	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ТекРасшифровка = ВернутьРасшифровкуЯчейки(ТекущаяОбласть);
	Если ТекРасшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРаскрытия = РабочийОбъект.ТабОбластиРаскрытия.Найти(ТекРасшифровка.Строка, "Строка");	
	
	
	ПолеСортировки = "";
	Если ТекРасшифровка.Свойство("Показатель") Тогда
		//Значит мы спозиционированы на ячейке с показателем, а не аналитикой
		ПолеСортировки = СокрЛП(ТекРасшифровка.Показатель.Код);	
	Иначе
		
		Массив = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
		
		Если Массив.Количество() >= 3 Тогда
			//это область с аналитикой
			Значение = ТекРасшифровка[Массив[2]]; //Ссылка на Аналитику\
			ПолеСортировки = Массив[2];
			Сч = 3;
			//рекурсивно получим все поля через точку
			Пока Истина Цикл
				Если Массив.Количество() > Сч + 1 Тогда
					ПолеСортировки = ПолеСортировки + "." + Массив[Сч];
					Сч = Сч + 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	СортировкаВРаскрытии = Новый Соответствие;
	СортировкаВРаскрытии.Вставить(ПолеСортировки, НаправлениеСортировки);
	
	КодСтрокиРаскрытия = СтрокаРаскрытия.КодСтроки;
	
	РабочийОбъект.УстановитьСтруктуруСортировкиВСоответствие(КодСтрокиРаскрытия, СортировкаВРаскрытии);
	
	ОбновитьНадписьФильтраПоАналитике(РабочийОбъект, КодСтрокиРаскрытия);
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтр()
	
	РабочийОбъект = ПолучитьРабочийОбъект();

	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ТекРасшифровка = ВернутьРасшифровкуЯчейки(ТекущаяОбласть);
	Если ТекРасшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Неопределено;
	Реквизит = "";
	
	Массив = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
	
	Если Массив.Количество() >= 3 Тогда
		//это область с аналитикой
		Значение = ТекРасшифровка[Массив[2]]; //Ссылка на Аналитику\
		Реквизит = Массив[2];
		Сч = 3;
		//рекурсивно получим все поля через точку
		Пока Истина Цикл
			Если Массив.Количество() > Сч + 1 Тогда
				Значение = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Значение, Массив[Сч]);
				Реквизит = Реквизит + "." + Массив[Сч];
				Сч = Сч + 1;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРаскрытия = РабочийОбъект.ТабОбластиРаскрытия.Найти(ТекРасшифровка.Строка, "Строка");
	
	КодСтрокиРаскрытия = СтрокаРаскрытия.КодСтроки;

	ОтборВРаскрытии = РабочийОбъект.ВернутьТекущуюСтруктуруОтбораИзСоответствия(КодСтрокиРаскрытия);
	ОтборВРаскрытии.Вставить(Реквизит, Новый Структура("ВидСравнения, Значение", ВидСравнения.Равно, Значение));
	РабочийОбъект.УстановитьСтруктуруОтбораВСоответствие(КодСтрокиРаскрытия, ОтборВРаскрытии);
	
	ОбновитьНадписьФильтраПоАналитике(РабочийОбъект, КодСтрокиРаскрытия);
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрПоОшибочнымКонтрольнымСоотношениям()
	
	РабочийОбъект=ПолучитьРабочийОбъект();

	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ТекРасшифровка = ВернутьРасшифровкуЯчейки(ТекущаяОбласть);
	Если ТекРасшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРаскрытия = РабочийОбъект.ТабОбластиРаскрытия.Найти(ТекРасшифровка.Строка, "Строка");
		
	КодСтрокиРаскрытия = СтрокаРаскрытия.КодСтроки;
	
	РабочийОбъект.ОтборПоКонтрольнымСоотношениям = Истина;

	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
	ОбновитьНадписьФильтраПоАналитике(РабочийОбъект, КодСтрокиРаскрытия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрПоЧисловомуПоказателю(СтруктураОтбора)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ТекРасшифровка = ВернутьРасшифровкуЯчейки(ТекущаяОбласть);
	Если ТекРасшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ТекРасшифровка.Свойство("Показатель") Тогда
		//Значит мы спозиционированы на ячейке с показателем, а не аналитикой
			
		СтрокаРаскрытия = РабочийОбъект.ТабОбластиРаскрытия.Найти(ТекРасшифровка.Строка, "Строка");
		
		ОтборВРаскрытии = РабочийОбъект.ВернутьТекущуюСтруктуруОтбораИзСоответствия(СтрокаРаскрытия.КодСтроки);
		ОтборВРаскрытии.Вставить(ТекРасшифровка.Показатель.Код, Новый Структура("ВидСравнения, Значение", 
															ВидСравнения[СтруктураОтбора.ВидСравнения], 
															СтруктураОтбора.Значение));
	
	
		РабочийОбъект.УстановитьСтруктуруОтбораВСоответствие(СтрокаРаскрытия.КодСтроки, ОтборВРаскрытии);
		
	
		ОбновитьНадписьФильтраПоАналитике(РабочийОбъект, СтрокаРаскрытия.КодСтроки);
		
		ОбновитьДанныеФормыСервер(РабочийОбъект);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)
		
	Если Элементы.ДействияФормыРаскрытиеВБланке.Пометка Тогда
		
		ДанныеРасшифровки=ПолучитьДанныеЯчейкиТаблица();
		
		Если ТипЗнч(ДанныеРасшифровки)=Тип("Структура")
			И ТипЗнч(ДанныеРасшифровки.ТекРасшифровка)=Тип("Структура")
			И ДанныеРасшифровки.ТекРасшифровка.Свойство("Показатель") Тогда
			
			ТекДанныеЯчейки=ДанныеРасшифровки.ТекРасшифровка;
			
			ДанныеПоказателя=СписокРедактируемыхПоказателей.НайтиПоЗначению(ТекДанныеЯчейки.Показатель);
			
			Если ДанныеПоказателя=Неопределено ИЛИ (ДанныеПоказателя.Пометка И (НЕ ТекДанныеЯчейки.Раскрытие)) Тогда
				
				ВозможноРедактирование=Ложь;
				
			ИначеЕсли НЕ ДанныеРасшифровки.ТекРасшифровка.ОбластьПоказателя Тогда 
				
				ВозможноРедактирование=Ложь;
								
			Иначе
				
				ВозможноРедактирование=Заблокирован;
				
			КонецЕсли;
			
		Иначе
			
			ТекДанныеЯчейки=Неопределено;
			ВозможноРедактирование=Ложь;
			
		КонецЕсли;
						
	Иначе
		
		ТекДанныеЯчейки=Неопределено;
		
		ДанныеПоказателей=ВернутьДанныеПоказателей();
		
		Если ДанныеПоказателей.ЗначенияПоказателей.Количество()=1 Тогда
			
			ВозможноРедактирование=Заблокирован 
					И (НЕ СписокРедактируемыхОбластей.НайтиПоЗначению(Элемент.ТекущаяОбласть.Имя)=Неопределено);
					
		Иначе
			
			ВозможноРедактирование=Ложь;
			
		КонецЕсли; 
					
	КонецЕсли;
	
	Элемент.Защита=НЕ ВозможноРедактирование;
	
КонецПроцедуры

&НаКлиенте
Процедура СсособВыводаФормаПриИзменении(Элемент)
	
	Если ТипЗнч(СпособВыводаФорма)=Тип("Строка") Тогда
		Объект.СпособВывода=СпособВыводаФорма;
	Иначе
		Объект.СпособВывода="Бланк";
		Объект.ШаблонОтчета=СпособВыводаФорма;
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАналитики(Команда)
	
	ЗагрузитьАналитикиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАналитикиНаСервере()
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	РабочийОбъект.ПроверитьКонтекстИнициализирован();
	РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
	
	Если НЕ РабочийОбъект.мТекущаяВалюта=РабочийОбъект.ОсновнаяВалюта Тогда
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения();
	КонецЕсли;
	
	РабочийОбъект.ОтчетИнициализирован=Истина;
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	
	Элементы.ТабДеревоЗагрузитьАналитики.Видимость=Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеЯзыков()
	
	СтруктураЯзыков=Новый Структура;
	СтруктураЯзыков.Вставить("ОсновнойЯзык",НомерОсновногоЯзыка);
	
	СтруктураЯзыков.Вставить("ВыводитьДополнительныйЯзык1",ВыводитьДополнительныйЯзык1);
	СтруктураЯзыков.Вставить("ВыводитьДополнительныйЯзык2",ВыводитьДополнительныйЯзык2);
	
	Если НЕ ТипЗнч(СпособВыводаФорма)=Тип("Строка") Тогда
		ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,0,НомерОсновногоЯзыка,Объект.ВидОтчета);
	КонецЕсли;
	
	ЯзыкОтображения=НомерОсновногоЯзыка;
			
КонецПроцедуры // ОбновитьОтображениеЯзыков()

&НаКлиенте
Процедура НомерОсновногоЯзыкаПриИзменении(Элемент)
	
	Элементы.ВыводитьДополнительныйЯзык1.Доступность=Истина;
	Элементы.ВыводитьДополнительныйЯзык2.Доступность=Истина;
	
	Если НомерОсновногоЯзыка>0 Тогда
		
		ЭтаФорма["ВыводитьДополнительныйЯзык"+НомерОсновногоЯзыка]=Ложь;
		Элементы["ВыводитьДополнительныйЯзык"+НомерОсновногоЯзыка].Доступность=Ложь;
		
	КонецЕсли;
	
	ОбновитьОтображениеЯзыков();
		
КонецПроцедуры


&НаКлиенте
Процедура ВыводитьДополнительныйЯзык1ПриИзменении(Элемент)
	
	ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДополнительныйЯзык2ПриИзменении(Элемент)
	
	 ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТабДок=Новый ТабличныйДокумент;
	ВывестиБланк(ПолеТабличногоДокументаМакет,ТабДок);
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаСохраненияДокумента",Новый Структура("ДокументДляВывода",ТабДок));
	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтруктуруОтчета(Команда)
	
	Если ТипЗнч(СпособВыводаФорма)=Тип("СправочникСсылка.БланкиОтчетов") Тогда	
		ОткрытьФорму("Справочник.БланкиОтчетов.ФормаОбъекта", Новый Структура("Ключ", СпособВыводаФорма));
	Иначе	
		СтруктураПараметров=Новый Структура("ВидОтчета", Объект.ВидОтчета);
		ИмяФормы_ = "Обработка.НастройкаСтруктурыОтчета.Форма.ФормаКонструктора";
		ОткрытьФорму(ИмяФормы_, СтруктураПараметров);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомментироватьПоказатель(Команда)
		
	МассивПоказателей = ВернутьДанныеПоказателей().МассивПоказателей;
	
	Если МассивПоказателей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
 
	ЗначениеПоказателя=Неопределено;
	ТекПользователь=Неопределено;
    ТЗКомментариев="";	
	
	ПодготовитьКонтекстКомментария(ЗначениеПоказателя,МассивПоказателей[0],ТекПользователь,ТЗКомментариев);
	
	СтруктураПараметров=Новый Структура("Показатель,ЗначениеПоказателя,ТЗКоментариев",МассивПоказателей[0],ЗначениеПоказателя,ТЗКомментариев);
		
	//СтруктураПараметров=Новый Структура("Заголовок","Комментарии к показателю:" + МассивПоказателей[0].Наименование);
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаКомментариевУправляемая",СтруктураПараметров);


КонецПроцедуры


&НаСервере
Процедура ПодготовитьКонтекстКомментария(ЗначениеПоказателя,ТекПоказатель,ТекПользователь,ТЗКомментариев)
	
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	Если НЕ ЗначениеЗаполнено(РабочийОбъект.СоответствиеХраненияКомментариев) Тогда
		РабочийОбъект.ЗагрузитьКомментарииВСоответствие();
	КонецЕсли;
	
	ТекЗапись = РабочийОбъект.мСоответствиеДляПоискаПоСсылке[ТекПоказатель];
    Если ТекЗапись <> Неопределено Тогда
		ЗначениеПоказателя = ТекЗапись.Значение;
	Иначе	
		ЗначениеПоказателя=Неопределено;
	КонецЕсли;
	
	ТЗ=Новый ТаблицаЗначений;
	РабочийОбъект.ПрочитатьКомментарийИзСоответствия(ТекПоказатель, ТЗ);
	ТЗКомментариев=ЗначениеВСтрокуВнутр(ТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализ(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФакторныйАнализЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
						НСтр("ru = 'Для проведения сравнительного факторного анализа документ должен быть записан. Записать?'"), 
						РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ВызватьОтчетСценарныйАнализ(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОтчетСценарныйАнализ(МассивПоказателей=Неопределено,Моделирование=Ложь) Экспорт
		
	Если МассивПоказателей=Неопределено Тогда
		
		МассивПоказателей=ВернутьДанныеПоказателей().МассивПоказателей;
		
	КонецЕсли; 
		
	СтруктураПараметров = ПодготовитьПараметрыСенарногоАнализа(МассивПоказателей,Моделирование);

	Если СтруктураПараметров = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо выделить область показателя. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат; 
		
	КонецЕсли;	
	//TDBM
	Имя = "Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая";
	ФормаОтчета = ПолучитьФорму(Имя, СтруктураПараметров);
	
	//Отчет.ИспользоватьТолькоПодтвержденныеДанные = НЕ Объект.ЧтениеНеАктуальныхЗаписей;

	Если Моделирование Тогда
		
		ФормаОтчета.Заголовок=НСтр("ru = 'Факторный анализ и моделирование'");
		#Если ВебКлиент Тогда
			ФормаОтчета.Открыть();
		#Иначе
			ФормаОтчета.ОткрытьМодально();
		#КонецЕсли

		//Если НужноОбновитьФорму=Истина Тогда
		//	
		//	АнализЧувствительности=Ложь;
		//	СозданаВФормеГрупповогоРедактирования=Ложь;
		//	ИнициализироватьКонтекст();
		//	ОбновитьОтображениеОтчета();
		//	
		//КонецЕсли;
			
	Иначе
		
		ФормаОтчета.Заголовок=НСтр("ru = 'Сравнительный факторный анализ'");
		ФормаОтчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыСенарногоАнализа(МассивПоказателей,Моделирование)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если НЕ РабочийОбъект.ДанныеПараметрикиАктуальны Тогда
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
		
	Если МассивПоказателей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВидОтчета", Объект.ВидОтчета);
	СтруктураПараметров.Вставить("Сценарий", Объект.Сценарий);
	СтруктураПараметров.Вставить("ПериодОтчета", Объект.ПериодОтчета);
	СтруктураПараметров.Вставить("ОсновнаяВалюта", Объект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Проект", Объект.Проект);
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ИсходныйПоказатель", МассивПоказателей[0]);
	СтруктураПараметров.Вставить("РежимАнализаЧувствительности", Моделирование);
	СтруктураПараметров.Вставить("ИсходноеЗначениеЦелевого", РабочийОбъект.Показатели[СокрЛП(МассивПоказателей[0].Код)]);
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		
		Если Объект.ВидОтчета.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
				СтруктураПараметров.Вставить("Аналитика" + Инд, Объект["Аналитика" + Инд]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РабочийОбъект.СформироватьСтруктуруПараметров();
	
	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИсходныйДокумент", АдресВременногоХранилища);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделиование(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФакторныйАнализМоделиованиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
						НСтр("ru = 'Для проведения сравнительного факторного анализа документ должен быть записан. Записать?'"), 
						РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ВызватьОтчетСценарныйАнализ(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказатели(Команда)
	
	Если НЕ Заблокирован Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо перейти в режим редактирования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивКодов = Новый Массив;
	
	Если Объект.СпособВывода="Дерево" Тогда
		
		Если ТекДанныеЯчейки<>Неопределено Тогда
			Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
				
				МассивКодов.Добавить(ТекДанныеЯчейки.Показатель);
				
			КонецЕСли;
		КонецЕСли;
		
		
	Иначе 
		
		
		Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
			
			Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			Для ИндС = Область.Верх По Область.Низ Цикл
				Для ИндК = Область.Лево По Область.Право Цикл
					ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
					
					Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
						Продолжить;
					КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
					
					Если ТекОбласть.СодержитЗначение Тогда
						МассивКодов.Добавить(СокрЛП(ТекОбласть.Имя));					
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивКодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров=ПодгтотовитьСтруткуруПараметровКорректировки(МассивКодов);
	СтруктураПараметров.Вставить("ОтДостигнутого",Ложь);
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ГрупповоеИзменениеПоказателей", 
					СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//Заполняет показатели на основании данных из регистра.
&НаСервере
Функция ПодгтотовитьСтруткуруПараметровКорректировки(МассивКодов)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	Запрос      = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	(ПоказателиОтчетов.Код В(&Код) или ПоказателиОтчетов.Ссылка В(&Код))
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	//|	И ПоказателиОтчетов.СпособОбработки = &Заполнение";
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	//Запрос.УстановитьПараметр("Правило", Объект.ПравилоОбработки);
	//Запрос.УстановитьПараметр("Заполнение", Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
    Запрос.УстановитьПараметр("Код", МассивКодов);
    ТаблицаЯчеек= Запрос.Выполнить().Выгрузить();
	
	ТаблицаЯчеек.Колонки.Добавить("ЗначениеЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("ТекущееЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("КоэффициентДостоверности",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	ТаблицаЯчеек.Колонки.Добавить("АбсКоррекция",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("ОтнКоррекция",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	ТаблицаЯчеек.Колонки.Добавить("ОтнТекущего",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	
	Для Каждого СтрКорректировка ИЗ ТаблицаЯчеек Цикл
		
		РабочийОбъект.Показатели.Свойство(СокрЛП(СтрКорректировка.Код),СтрКорректировка.ТекущееЗначение);
		СтрКорректировка.ИтоговоеЗначение=СтрКорректировка.ТекущееЗначение;
		
	КонецЦикла;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);
	СтруктураПараметров.Вставить("ТаблицаЯчеекАдрес",ПоместитьВоВременноеХранилище(ТаблицаЯчеек));
    СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("Проект",Объект.Проект);
    СтруктураПараметров.Вставить("ОсновнаяВалюта",Объект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("Сценарий",Объект.Сценарий);
	СтруктураПараметров.Вставить("Период",УправлениеОтчетамиУХ.ПолучитьСледующийПериод(Объект.ПериодОтчета,-1));
	СтруктураПараметров.Вставить("ИсходныйПериод",Объект.ПериодОтчета);
	СтруктураАналитик = Новый Структура;
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		Если Объект.ВидОтчета.МетаДанные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
				СтруктураАналитик.Вставить("Аналитика" + Инд, Объект["Аналитика" + Инд]);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("АналитикиОтчета",СтруктураАналитик);
    Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ПроверитьСостояниеБуфера(РабочийОбъект = Неопределено)
	
	Если СохраненноеЗначениеПоказателяАдрес ="" Тогда
		
		ТаблицаЗначений = ?(РабочийОбъект = Неопределено,ПолучитьРабочийОбъект().мПоказателиРаскрытия.СкопироватьКолонки(),РабочийОбъект.мПоказателиРаскрытия.СкопироватьКолонки());		
		
		СохраненноеЗначениеПоказателяАдрес = ПоместитьВоВременноеХранилище(Новый Структура("Показатель, Значение, ТаблицаЗначенийАналитик,СпособПереноса",
		, Справочники.ПоказателиОтчетов.ПустаяСсылка()
		, 0
		, ТаблицаЗначений
		, ""),Этаформа.УникальныйИдентификатор);
		
		ТаблицаЗначенийАналитикАдрес=ПоместитьВоВременноеХранилище(ТаблицаЗначений,Этаформа.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СохранитьЗначениеВБуфер(ДанныеПоказателей,СпособПереноса)
		

	РабочийОбъект = ПолучитьРабочийОбъект();
	
	ПроверитьСостояниеБуфера(РабочийОбъект);
	
	СохраненноеЗначениеПоказателя=ПолучитьИзВременногоХранилища(СохраненноеЗначениеПоказателяАдрес);
	
	ТаблицаЗначенийАналитик =     ПолучитьИзВременногоХранилища(ТаблицаЗначенийАналитикАдрес);
	
	МассивПоказателей=ДанныеПоказателей.МассивПоказателей;
	
	Если МассивПоказателей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СохраненноеЗначениеПоказателя.Показатель = МассивПоказателей[0];
		



	Если НЕ РабочийОбъект.ДанныеРаскрытияИнициализированы Тогда
		
		РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
		
	КонецЕсли;


	
	ТаблицаЗначенийАналитик.Очистить();
	
	ЕстьСтрокиАналитики=Ложь;
	ЗначениеКПереносу=0;
	
	Для каждого СтрРасшифровка Из ДанныеПоказателей.ЗначенияПоказателей Цикл
		
		Если СтрРасшифровка.Свойство("СтруктураАналитика") Тогда // Скопированы строки аналитического раскрытия
			
			НоваяСтрока=ТаблицаЗначенийАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрРасшифровка.СтруктураАналитика);
			
			Если СтрРасшифровка.ДанныеПоказателя.ЧисловойПоказатель Тогда
				
				ЗначениеКПереносу=ЗначениеКПереносу+СтрРасшифровка.СтруктураАналитика.Значение;
				
			КонецЕсли; 
			
			ЕстьСтрокиАналитики=Истина;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ЕстьСтрокиАналитики Тогда
		
		СохраненноеЗначениеПоказателя.Значение=ЗначениеКПереносу;
		
	Иначе
		
		ТекЗапись = РабочийОбъект.мСоответствиеДляПоискаПоСсылке[МассивПоказателей[0]];
		СохраненноеЗначениеПоказателя.Значение   = ТекЗапись.Значение;
		СохраняемыеЗначенияРаскрытия = РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель", МассивПоказателей[0]));
		
		Для Каждого СохраняемоеЗначение Из СохраняемыеЗначенияРаскрытия Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЗначенийАналитик.Добавить(), СохраняемоеЗначение);
		КонецЦикла;	
		
	КонецЕсли; 
		
	СохраненноеЗначениеПоказателя.СпособПереноса = СпособПереноса;
	
	СохраненноеЗначениеПоказателяАдрес=ПоместитьВоВременноеХранилище(СохраненноеЗначениеПоказателя,Новый УникальныйИдентификатор);
	
	ТаблицаЗначенийАналитикАдрес=ПоместитьВоВременноеХранилище(ТаблицаЗначенийАналитик,Новый УникальныйИдентификатор);
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВосстановитьЗначениеИзБуфера(МассивПоказателей=Неопределено) Экспорт
	
	ПроверитьСостояниеБуфера();
	
	СохраненноеЗначениеПоказателя=ПолучитьИзВременногоХранилища(СохраненноеЗначениеПоказателяАдрес);
	
	//ТаблицаЗначенийАналитик = ПолучитьИзВременногоХранилища(ТаблицаЗначенийАналитикАдрес);
	
	
	Если Не ЗначениеЗаполнено(СохраненноеЗначениеПоказателя.Показатель) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивПоказателей=Неопределено Тогда	
		МассивПоказателей = ВернутьМассивПоказателей();
	КонецЕсли;
	
	Если МассивПоказателей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПоказательИсточник",СохраненноеЗначениеПоказателя.Показатель);
	СтруктураПараметров.Вставить("ПоказательПриемник",МассивПоказателей[0]);
	СтруктураПараметров.Вставить("УровеньТочности",Объект.УровеньТочности);
	СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("ОсновнаяВалюта",Объект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("ИсходноеЗначение",СохраненноеЗначениеПоказателя.Значение);
	СтруктураПараметров.Вставить("СпособПереноса",СохраненноеЗначениеПоказателя.СпособПереноса);
	//СтруктураПараметров.Вставить("МассивАналитики",ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(ТаблицаЗначенийАналитик));
	СтруктураПараметров.Вставить("ТаблицаЗначенийАналитикАдрес",ТаблицаЗначенийАналитикАдрес);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПереносаЗначенийПоказателей", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
				
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗначениеПоказателя(Команда)
	
	СохранитьЗначениеВБуфер(ВернутьДанныеПоказателей(),"Копирование");

КонецПроцедуры

&НаКлиенте
Процедура ВставитьПоказатель(Команда)
	
	Если НЕ Заблокирован Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо перейти в режим редактирования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВосстановитьЗначениеИзБуфера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначениеПоказателя(Команда)
	
	УстановитьЗначениеПоказателейОбласти(Истина);
	Если Объект.СпособВывода = "Дерево" Тогда
		ОбновитьДанныеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмениитьПоказателиОтДостигнутого(Команда)
	
	Если НЕ Заблокирован Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо перейти в режим редактирования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	МассивКодов = Новый Массив;
	
	Если Объект.СпособВывода="Дерево" Тогда
		
		Если ТекДанныеЯчейки<>Неопределено Тогда
			Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
				
				МассивКодов.Добавить(ТекДанныеЯчейки.Показатель);
				
			КонецЕСли;
		КонецЕСли;
		
	Иначе 
		
		
		Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
			
			Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			Для ИндС = Область.Верх По Область.Низ Цикл
				Для ИндК = Область.Лево По Область.Право Цикл
					ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
					
					Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
						Продолжить;
					КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
					
					Если ТекОбласть.СодержитЗначение Тогда
						МассивКодов.Добавить(СокрЛП(ТекОбласть.Имя));					
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивКодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров=ПодгтотовитьСтруткуруПараметровКорректировки(МассивКодов);
	СтруктураПараметров.Вставить("ОтДостигнутого",Истина);
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ГрупповоеИзменениеПоказателей", 
					СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
				
&НаСервере
Функция ПолучитьПараметрыРаспределенияОрганизации()
	
	СтруктураПараметров=Новый Структура("Организация,Сценарий,ОсновнаяВалюта,Проект,УправлениеПериодом,ВидОтчета");
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		СтруктураПараметров.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	МассивПериодов=Новый Массив;
	МассивПериодов.Добавить(Объект.ПериодОтчета);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Объект);
	
	СтруктураПараметров.Вставить("ЭкземплярОтчета",Объект.Ссылка);
	СтруктураПараметров.Вставить("МассивПериодов",МассивПериодов);
	СтруктураПараметров.Вставить("ПоОрганизациям",Истина);
		
	Возврат СтруктураПараметров; 
	
КонецФункции // ПолучитьПараметрыРаспределенияОрганизации() 

&НаКлиенте
Процедура РаспределитьПоОрганизациям(Команда)
	
	ДанныеПоказателей=ВернутьДанныеПоказателей();
	
	МассивПоказателей=ДанныеПоказателей.МассивПоказателей;
	
	СтруктураПараметров=ПолучитьПараметрыРаспределенияОрганизации();
	
	СтруктураПараметров.Вставить("МассивПоказателей",МассивПоказателей);

	ОткрытьРучныеКорректировки(СтруктураПараметров, ЭтаФорма);
		
КонецПроцедуры

// Возвращает таблицу показателей по массиву кодов показателей МассивКодовВход.
&НаСервере
Функция ПолучитьТаблицуПоказателейПоКоду(МассивКодовВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	(ПоказателиОтчетов.Код В(&Код) или ПоказателиОтчетов.Ссылка В (&Код))
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	//|	И ПоказателиОтчетов.СпособОбработки = &Заполнение";
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	Запрос.УстановитьПараметр("Правило", Объект.ПравилоОбработки);
	//Запрос.УстановитьПараметр("Заполнение", Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	
	Запрос.УстановитьПараметр("Код", МассивКодовВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПоказателейДляИзменения(РабочийОбъект, МассивКодов)
	
	ТабКорректировка = ПолучитьТаблицуПоказателейПоКоду(МассивКодов);
	
	ТабКорректировка.Колонки.Добавить("ЗначениеЧисло", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТабКорректировка.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрКорректировка ИЗ ТабКорректировка Цикл
		
		РабочийОбъект.Показатели.Свойство(СокрЛП(СтрКорректировка.Код),СтрКорректировка.ЗначениеЧисло);
		СтрКорректировка.ИтоговоеЗначение=СтрКорректировка.ЗначениеЧисло;
		
	КонецЦикла;	
	
	Возврат ТабКорректировка;
	
КонецФункции // ПолучитьТаблицуПоказателейДляИзменения() 

// Возвращает ссылку на ракурс по текущему документу для показателей из массива
// МассивКодовВход, либо значение Неопределено, если ракурс получить не удалось.
&НаСервере
Функция ПолучитьРакурсВыбранныхПоказателей(МассивКодовВход)
	РезультатФункции = Неопределено;
	ТаблицаПоказателей = ПолучитьТаблицуПоказателейПоКоду(МассивКодовВход);
	Если ТаблицаПоказателей.Количество() > 0 Тогда
		ПерваяСтрока = ТаблицаПоказателей[0];
		ВыбранныйПоказатель = ПерваяСтрока.Показатель;
		Если ЗначениеЗаполнено(ВыбранныйПоказатель) Тогда
			ОбластьДанных = РасширениеПроцессыИСогласованиеУХ.ПолучитьОбластьДанныхПоказателя(ВыбранныйПоказатель, Объект.Ссылка);
			РезультатФункции = РасширениеПроцессыИСогласованиеУХ.ПолучитьРакурсСогласованияОбласти(Объект.Ссылка, ОбластьДанных, Объект.Организация, Истина);
		Иначе
			ТекстСообщения = НСтр("ru = 'Выбран пустой показатель. Открытие ракурса отменено.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Неопределено;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу показателей. Открытие ракурса отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции 

&НаКлиенте
Процедура ОбновитьСУчетомВерсий(Команда)
	
	ОбновитьСУчетомВерсийСервер();
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСУчетомВерсийСервер()
	
	Если НЕ ПроверитьЗавершениеРасчетовЗависимыхПоказателей() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ДанныеРаскрытияИнициализированы=Ложь;
	
	РабочийОбъект.ИнициализироватьКонтекст();
	
	РабочийОбъект.МассивЗагруженныхГруппРаскрытия.Очистить();
	РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
		
КонецПроцедуры // ОбновитьСУчетомВерсийСервер()

&НаКлиенте
Процедура Подключаемый_ДействияФормыСвернутьПоПериодуЗавершение(Значение, ДополнительныеПараметры) Экспорт
    
    ЗначениеВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ЗначениеВыбора, Значение);
    
    РезультатВыбора = (Значение <> Неопределено);
    Если НЕ (РезультатВыбора И ЗначениеЗаполнено(ЗначениеВыбора)) Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДокумент("АвтоматическиСвернувПоПериоду", ЗначениеВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
        ОчиститьДокумент();        
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Попытка
            Записать();
        Исключение
            Возврат;
        КонецПопытки;
    КонецЕсли;
    
    ВызватьОтчетСценарныйАнализ(,Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделиованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Попытка
            Записать();
        Исключение
            Возврат;
        КонецПопытки;
    КонецЕсли;
    
    ВызватьОтчетСценарныйАнализ(,Истина);

КонецПроцедуры


&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если НЕ ТекДанныеЯчейки=Неопределено Тогда
		
		Если ТекДанныеЯчейки.Свойство("Показатель") Тогда
			
			СтандартнаяОбработка=Ложь;
			
			Если ТекДанныеЯчейки.ОбластьПоказателя Тогда
				
				Если НЕ Заблокирован Тогда
					
					ТекстСообщения = НСтр("ru = 'Для изменения значений показателей требуется перейти в режим редактирования'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					Возврат;
					
				Иначе
					
					СтандартнаяОбработка=Истина;
					
				КонецЕсли;
				
			Иначе
				
				Если ТекДанныеЯчейки.Раскрытие=Истина Тогда
						
					ОбработкаСтрокиРаскрытия("ИзменениеАналитики");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ДействияФормыСвернутьПоПроектам(Команда)
	
	ЗаполнитьДокумент("АвтоматическиСвернувПоПроектам");
	
КонецПроцедуры


&НаКлиенте
Процедура ДействияФормыСвернутьПоОрганизациямПроекта(Команда)
	
	ЗаполнитьДокумент("АвтоматическиСвернувПоОрганизациямПроекта");
		
КонецПроцедуры


&НаСервере
Процедура СостояниеПриИзмененииСервер()
	
	ШапкаОшибки = НСтр("ru = 'Нельзя изменить состояние документа'");
	
	РасширениеПроцессыИСогласованиеУХ.СостояниеПриИзмененииСервер(ЭтаФорма, Объект.Ссылка);
	//обновим состояние во временном хранилище
	РабочийОбъект = ПолучитьРабочийОбъект();
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьЗаписи(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	ПродолжатьЗапись=(РезультатВопроса=КодВозвратаДиалога.Да);
		
КонецПроцедуры // УстановитьВозможностьЗаписи() 

&НаКлиенте
Процедура ОтобразитьСостояниеОтчета()
	
	Если ИспользуетсяМарщрутСогласования Тогда
		ОпределитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

// Возвращает таблицу или массив показателей, относящихся к выбранным ячейкам
//
&НаКлиенте
Функция ВернутьДанныеПоказателей()
			
	Если Найти(Объект.СпособВывода,"Дерево")>0 Тогда
		
		Если Элементы.ТабДерево.ТекущийЭлемент=Неопределено  Тогда
			
			Возврат Новый Структура("МассивПоказателей,ЗначенияПоказателей",Новый Массив,Новый Массив);
			
		КонецЕсли; 
		
		ИндексКолонки=Элементы.ТабДерево.ПодчиненныеЭлементы.Индекс(Элементы.ТабДерево.ТекущийЭлемент)+1;
		
		Если ИндексКолонки>1 И ИндексКолонки<ПерваяКолонка Тогда
			ИндексКолонки=ПерваяКолонка;
		КонецЕсли;
		
		МассивНомеровСтрок=Новый Массив;
		
		Для каждого Строка Из Элементы.ТабДерево.ВыделенныеСтроки  Цикл
			
			СтрокаДанные=ТабДерево.НайтиПоИдентификатору(Строка);
			
			Если НЕ СтрокаДанные=Неопределено Тогда
				
				МассивНомеровСтрок.Добавить(СтрокаДанные.НомерСтроки);
				
			КонецЕсли; 
						
		КонецЦикла; 
		
		Возврат ВернутьДанныеПоказателейДерево(ПолучитьСтруктуруДанныхФормы(),МассивНомеровСтрок,ИндексКолонки);
		
	Иначе
		
		РаскрытиеВТеле=Элементы.ДействияФормыРаскрытиеВБланке.Пометка;
		
		ДанныеОбластей=Новый Массив;
		ТипОбластиПрямоугольник = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник;
		Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
			// Проверка имеет смысл только для областей типа "Прямоугольник".
			Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")
				И Область.ТипОбласти = ТипОбластиПрямоугольник Тогда
				
				Для ИндС = Область.Верх По Область.Низ Цикл
					
					Для ИндК = Область.Лево По Область.Право Цикл
						
						ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
						
						Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
							Продолжить;
						КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
						
						Если ТекОбласть.СодержитЗначение Тогда
							
							Если РаскрытиеВТеле Тогда
								
								ДанныеОбластей.Добавить(Новый Структура("Верх,Лево",ТекОбласть.Верх,ТекОбласть.Лево));
								
							Иначе
								
								ДанныеОбластей.Добавить(СокрЛП(ТекОбласть.Имя));
								
							КонецЕсли; 				
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РаскрытиеВТеле Тогда
			
			Возврат ВернутьДанныеПоказателейРаскрытиеВТеле(ПолучитьСтруктуруДанныхФормы(),ДанныеОбластей);			
			
		Иначе
			
			Возврат ВернутьДанныеПоказателейБланк(ПолучитьСтруктуруДанныхФормы(),ДанныеОбластей);
			
		КонецЕсли; 	
		
	КонецЕсли;
			
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьДанныеПоказателейБланк(ДанныеФормы,МассивКодовПоказателей)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);
	РабочийОбъект.ПроверитьКонтекстИнициализирован();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ Ссылка, Код,Наименование,Строка,Колонка, НеФинансовый,ЧисловойПоказатель,ВидКурса, СвязанныйПоказатель, Значение,ТипЗначения, ПериодРасчета
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник;
	|ВЫБРАТЬ мПоказатели.*
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|ГДЕ
	|	мПоказатели.Код В(&МассивКодовПоказателей)";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",		РабочийОбъект.мПоказатели);
	Запрос.УстановитьПараметр("МассивКодовПоказателей",	МассивКодовПоказателей);
	
	МассивПоказателей	=Новый Массив;
	ЗначенияПоказателей	=Новый Массив;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МассивПоказателей.Добавить(Результат.Ссылка);
		ЗначенияПоказателей.Добавить(Новый Структура("Показатель, Код,Наименование,Строка,Колонка, НеФинансовый,ЧисловойПоказатель,ВидКурса, СвязанныйПоказатель, Значение, ТипЗначения, ПериодРасчета",
										Результат.Ссылка,
										Результат.Код,
										Результат.Наименование,
										Результат.Строка,
										Результат.Колонка,
										Результат.НеФинансовый,
										Результат.ЧисловойПоказатель,
										Результат.ВидКурса,
										Результат.СвязанныйПоказатель,
										Результат.Значение,
										Результат.ТипЗначения,
										Результат.ПериодРасчета));

					
	КонецЦикла;
	
	Возврат Новый Структура("МассивПоказателей,ЗначенияПоказателей",МассивПоказателей,ЗначенияПоказателей);
										
КонецФункции // ВернутьДанныеПоказателейБланк()

&НаСервереБезКонтекста
Функция ВернутьДанныеПоказателейДерево(ДанныеФормы,МассивНомеровСтрок,Колонка)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);

	МассивПоказателей	=Новый Массив;
	ЗначенияПоказателей	=Новый Массив;
	
	Если РабочийОбъект.мПоказателиРаскрытия <> Неопределено Тогда
		ТаблицаАналитик=РабочийОбъект.мПоказателиРаскрытия.СкопироватьКолонки();
		
		Для каждого НомерСтроки Из МассивНомеровСтрок Цикл
			
			РасшифровкаЯчейки=РабочийОбъект.ПолучитьРасшифровкуЯчейки(НомерСтроки,Колонка);
			
			Если РасшифровкаЯчейки.Свойство("Показатель") Тогда
				
				Если МассивПоказателей.Найти(РасшифровкаЯчейки.Показатель)=Неопределено Тогда
					
					МассивПоказателей.Добавить(РасшифровкаЯчейки.Показатель);
					
				КонецЕсли; 
				
				Если РасшифровкаЯчейки.Свойство("СтруктураАналитика") Тогда
					
					Если ТаблицаАналитик.НайтиСтроки(РасшифровкаЯчейки.СтруктураАналитика).Количество()=0 Тогда
						
						ЗначенияПоказателей.Добавить(РасшифровкаЯчейки);
						
						НоваяСтрока=ТаблицаАналитик.Добавить();	
						ЗаполнитьЗначенияСвойств(НоваяСтрока,РасшифровкаЯчейки.СтруктураАналитика);
						
					КонецЕсли; 
					
				Иначе
					
					ЗначенияПоказателей.Добавить(РасшифровкаЯчейки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
	Иначе
		МассивПоказателей	 = Новый Массив;
		ЗначенияПоказателей	 = Новый Массив;
	КонецЕсли;
	
	Возврат Новый Структура("МассивПоказателей,ЗначенияПоказателей",МассивПоказателей,ЗначенияПоказателей);
	
КонецФункции // ВернутьТаблицуПоказателейДерево()

&НаСервереБезКонтекста
Функция ВернутьДанныеПоказателейРаскрытиеВТеле(ДанныеФормы,МассивЯчеек)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);

	МассивПоказателей	= Новый Массив;
	ЗначенияПоказателей	= Новый Массив;
	
	ТаблицаАналитик=РабочийОбъект.мПоказателиРаскрытия.СкопироватьКолонки();
	
	Для каждого ДанныеЯчейки Из МассивЯчеек Цикл
		
		РасшифровкаЯчейки=РабочийОбъект.ПолучитьРасшифровкуЯчейки(ДанныеЯчейки.Верх,ДанныеЯчейки.Лево);
		
		Если РасшифровкаЯчейки.Свойство("Показатель") Тогда
			
			Если МассивПоказателей.Найти(РасшифровкаЯчейки.Показатель)=Неопределено Тогда
				
				МассивПоказателей.Добавить(РасшифровкаЯчейки.Показатель);
				
			КонецЕсли; 
			
			Если РасшифровкаЯчейки.Свойство("СтруктураАналитика") Тогда
				
				Если ТаблицаАналитик.НайтиСтроки(РасшифровкаЯчейки.СтруктураАналитика).Количество()=0 Тогда
					
					ЗначенияПоказателей.Добавить(РасшифровкаЯчейки);
					
					НоваяСтрока=ТаблицаАналитик.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока,РасшифровкаЯчейки.СтруктураАналитика);
					
				КонецЕсли; 
				
			Иначе
				
				ЗначенияПоказателей.Добавить(РасшифровкаЯчейки);
				
			КонецЕсли; 
					
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Новый Структура("МассивПоказателей,ЗначенияПоказателей",МассивПоказателей,ЗначенияПоказателей);	
		
КонецФункции // ВернутьДанныеПоказателейРаскрытиеВТеле()

&НаСервере
Процедура ОбновитьДеревоЗначенийПослеИзмененияАналитик(РабочийОбъект)
	
	// Добавим новые строки в дерево формы
	Для Каждого СтрокаКДобавлению ИЗ РабочийОбъект.МассивДобавленныхСтрокКПередаче Цикл
		
		СтрокаРодитель=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКДобавлению.АдресРодителя);
		ИндексВставки=СтрокаКДобавлению.ИндексВставки;
		
		Если ИндексВставки>=0 Тогда 	
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
		Иначе
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению.ДанныеНовойСтроки);
		
	КонецЦикла;
	
	// Обновим данные в ячейках дерева
	Для Каждого ИзмененнаяЯчейка ИЗ РабочийОбъект.МассивИзмененныхОбластей Цикл
		
		ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресуСервер(ИзмененнаяЯчейка.АдресСтроки);
		
		ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-9].Значение;
		
		ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
		
	КонецЦикла;
	
	// Удалим строки из дерева формы
	Для Каждого СтрокаКУдалению ИЗ РабочийОбъект.МассивУдаленныхСтрокКПередаче Цикл
		
		СтрокаРодитель=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКУдалению.АдресРодителя);
		УдаляемаяСтрока=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКУдалению.АдресСтроки);
		
		СтрокаРодитель.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если (НЕ ТекДанныеЯчейки=Неопределено) И ТекДанныеЯчейки.Свойство("Показатель") Тогда
		
		Если ТекДанныеЯчейки.НеРедактируется Тогда
			
			СтандартнаяОбработка=Ложь;	
			ПоказатьПредупреждение(, Нстр("ru = 'Запрещено ручное редактирование показателя, относящегося к выбранной ячейке.'"));
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокКонтекстногоМенюБланк()
	
	РаскрытиеВТеле=Элементы.ДействияФормыРаскрытиеВБланке.Пометка;
	
	Если РаскрытиеВТеле Тогда
		
		Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюПолеТабличногоДокументаМакетОтобразитьРаскрытие.Видимость=Ложь;
		
		Если ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ТекДанныеЯчейки.Свойство("Раскрытие") Тогда
			
			Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ОбратноеРаспределение.Видимость=НЕ ТекДанныеЯчейки.Раскрытие;
			Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ПолеТабличногоДокументаМакетКонтекстноеМенюКомментироватьПоказатель.Видимость=НЕ ТекДанныеЯчейки.Раскрытие;
			Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОчиститьЗначениеПоказателя.Видимость=НЕ ТекДанныеЯчейки.Раскрытие;
			
		Иначе
			
			Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ОбратноеРаспределение.Видимость=Ложь;
			Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ПолеТабличногоДокументаМакетКонтекстноеМенюКомментироватьПоказатель.Видимость=Ложь;
			Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОчиститьЗначениеПоказателя.Видимость=Ложь;
			
		КонецЕсли; 
		
	Иначе
		
		Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюПолеТабличногоДокументаМакетОтобразитьРаскрытие.Видимость=Истина;
		Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ГруппаРаботаСБуфером.Видимость=Истина;
		Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ОбратноеРаспределение.Видимость=Истина;
		Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ПолеТабличногоДокументаМакетКонтекстноеМенюКомментироватьПоказатель.Видимость=Истина;
		Элементы.ПолеТабличногоДокументаМакет.КонтекстноеМеню.ПодчиненныеЭлементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОчиститьЗначениеПоказателя.Видимость=Истина;
	
	КонецЕсли; 	
	
КонецПроцедуры

// Возвращает адрес временного хранилища, содержащее структуру настроек отчета.
&НаСервере
Функция ПолучитьАдресДанныхОтчета()
	// Инициализация.
	РезультатФункции = "";
	СтруктураНастроекРезультат = Новый Структура;
	ТекВидОтчета = Объект.ВидОтчета;
	// Закладка Реквизиты отчета.
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураНастроекРезультат.Вставить("АналитикаОтчета"+Индекс,Объект["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	СтруктураНастроекРезультат.Вставить("ВидОтчета",					 ТекВидОтчета);
	СтруктураНастроекРезультат.Вставить("ДатаИзменения",				 Объект.ДатаИзменения);
	СтруктураНастроекРезультат.Вставить("Исполнитель",					 Исполнитель);
	СтруктураНастроекРезультат.Вставить("Номер",						 Объект.Номер);
	СтруктураНастроекРезультат.Вставить("Организация",					 Объект.Организация);
	СтруктураНастроекРезультат.Вставить("ОсновнаяВалюта",				 Объект.ОсновнаяВалюта);
	СтруктураНастроекРезультат.Вставить("Период",						 Объект.ПериодОтчета);
	СтруктураНастроекРезультат.Вставить("ПериодОкончания",				 Объект.ПериодОкончания);
	СтруктураНастроекРезультат.Вставить("УправлениеПериодом",			 Объект.УправлениеПериодом);
	СтруктураНастроекРезультат.Вставить("ПоследнийРедактировавший",		 Объект.ПоследнийРедактировавший);
	СтруктураНастроекРезультат.Вставить("Проверяющий",					 Проверяющий);
	СтруктураНастроекРезультат.Вставить("Проект",						 Объект.Проект);
	СтруктураНастроекРезультат.Вставить("Сценарий",						 Объект.Сценарий);
	// -Получение данных по аналитикам отчёта.
	Для Инд = 1 По ЧислоДопАналитик Цикл
		Если ТекВидОтчета.МетаДанные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
			ВидАналитики = ТекВидОтчета["ВидАналитики"+Инд];
			Если Не ПустаяСтрока(ВидАналитики) Тогда
				СтруктураНастроекРезультат.Вставить("ВидАналитики" + Инд, ВидАналитики);
				СтруктураНастроекРезультат.Вставить("ТипАналитики" + Инд, ВидАналитики.ТипЗначения);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаВидимость" + Инд, Истина);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаЗаголовок" + Инд, Строка(ВидАналитики));
			Иначе
				СтруктураНастроекРезультат.Вставить("ВидАналитики" + Инд, ВидАналитики);
				СтруктураНастроекРезультат.Вставить("ТипАналитики" + Инд, ВидАналитики.ТипЗначения);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаВидимость" + Инд, Ложь);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаЗаголовок" + Инд, НСтр("ru = 'Аналитика '") + Строка(Инд));
			КонецЕсли;
		Иначе
			СтруктураНастроекРезультат.Вставить("ВидАналитики" + Инд, Неопределено);
			СтруктураНастроекРезультат.Вставить("ТипАналитики" + Инд, Неопределено);
			СтруктураНастроекРезультат.Вставить("АналитикаОтчетаВидимость" + Инд, Ложь);
			СтруктураНастроекРезультат.Вставить("АналитикаОтчетаЗаголовок" + Инд, НСтр("ru = 'Аналитика '") + Строка(Инд));
		КонецЕсли;
	КонецЦикла;
	// Закладка Настройки отчета.
	СтруктураНастроекРезультат.Вставить("БланкИмпорта",					 Объект.БланкИмпорта);
	СтруктураНастроекРезультат.Вставить("ВыбраннаяВалюта",				 ВыбраннаяВалюта);
	СтруктураНастроекРезультат.Вставить("ВыводитьДополнительныйЯзык1",	 ВыводитьДополнительныйЯзык1);
	СтруктураНастроекРезультат.Вставить("ВыводитьДополнительныйЯзык2",	 ВыводитьДополнительныйЯзык2);
	СтруктураНастроекРезультат.Вставить("ЕдиницаИзмерения",				 Объект.ЕдиницаИзмерения);
	СтруктураНастроекРезультат.Вставить("ИспользуемаяИБ",				 Объект.ИспользуемаяИБ);
	СтруктураНастроекРезультат.Вставить("НомерОсновногоЯзыка",			 НомерОсновногоЯзыка);
	СтруктураНастроекРезультат.Вставить("ПравилоОбработки",				 Объект.ПравилоОбработки);
	СтруктураНастроекРезультат.Вставить("ПравилоПроверки",				 Объект.ПравилоПроверки);
	СтруктураНастроекРезультат.Вставить("СпособВыводаФорма",			 СпособВыводаФорма);
	СтруктураНастроекРезультат.Вставить("ТекущаяТочность",				 ТекущаяТочность);
	// Закладка Дополнительные реквизиты.
	СтруктураНастроекРезультат.Вставить("ДополнительныеВалюты",			 Объект.ДополнительныеВалюты.Выгрузить());
	
	тПараметрыЭкземпляраОтчета = Объект.ПараметрыОтчета.Выгрузить();	
	СтруктураПоиска = Новый Структура("Код, Наименование");
	
	Для Каждого ПараметрВидаОтчета Из Объект.ВидОтчета.ПараметрыОтчета Цикл
		СтруктураПоиска.Вставить("Код", ПараметрВидаОтчета.Код);
		СтруктураПоиска.Вставить("Наименование", ПараметрВидаОтчета.Наименование);
		
		Если тПараметрыЭкземпляраОтчета.НайтиСтроки(СтруктураПоиска).Количество() = 0 тогда
			НоваяСтрокаПараметр = тПараметрыЭкземпляраОтчета.Добавить();
			
			НоваяСтрокаПараметр.Код = ПараметрВидаОтчета.Код;
			НоваяСтрокаПараметр.Наименование = ПараметрВидаОтчета.Наименование;
			НоваяСтрокаПараметр.Значение = ПараметрВидаОтчета.ЗначениеПоУмолчанию;
			НоваяСтрокаПараметр.ЗначениеСтрока = Строка(ПараметрВидаОтчета.ЗначениеПоУмолчанию);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНастроекРезультат.Вставить("ПараметрыОтчета",				 тПараметрыЭкземпляраОтчета);	
	СтруктураНастроекРезультат.Вставить("ЭкземплярыИсточники",			 Объект.ЭкземплярыИсточники.Выгрузить());	
	// Дополнительная информация.
	СтруктураНастроекРезультат.Вставить("СпособВывода",					 Объект.СпособВывода);
	СтруктураНастроекРезультат.Вставить("ШаблонОтчета",					 Объект.ШаблонОтчета);
	// Вывод результата.
	РезультатФункции = ПоместитьВоВременноеХранилище(СтруктураНастроекРезультат);
	Возврат РезультатФункции;
КонецФункции

// Считывает в табличную часть ДополнительныеВалюты данные о дополнительных
// валютах из структуры настроек СтруктураНастроекВход.
&НаСервере
Процедура ЗагрузитьДополнительныеВалютыИзСтруктурыНастроек(СтруктураНастроекВход)
	АдресДополнительныеВалюты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "АдресДополнительныеВалюты", "");
	Если ЭтоАдресВременногоХранилища(АдресДополнительныеВалюты) Тогда
		Выгрузка = ПолучитьИзВременногоХранилища(АдресДополнительныеВалюты);
		Если ТипЗнч(Выгрузка) = Тип("ТаблицаЗначений") Тогда
			Объект.ДополнительныеВалюты.Очистить();
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				НоваяСтрока = Объект.ДополнительныеВалюты.Добавить();
				НоваяСтрока.Валюта	 = ТекВыгрузка.Валюта;
				НоваяСтрока.Пометка	 = ТекВыгрузка.Пометка;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант таблицы дополнительных валют: %Выгрузка%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выгрузка%", Строка(Выгрузка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу дополнительных валют. Заполнение табличной части Дополнительные валюты пропущено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Считывает в табличную часть ПараметрыОтчета данные о параметрах
// отчета из структуры настроек СтруктураНастроекВход.
&НаСервере
Процедура ЗагрузитьПараметрыОтчетаИзСтруктурыНастроек(СтруктураНастроекВход)
	АдресПараметрыОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "АдресПараметрыОтчета", "");
	Если ЭтоАдресВременногоХранилища(АдресПараметрыОтчета) Тогда
		Выгрузка = ПолучитьИзВременногоХранилища(АдресПараметрыОтчета);
		Если ТипЗнч(Выгрузка) = Тип("ТаблицаЗначений") Тогда
			Объект.ПараметрыОтчета.Очистить();
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				НоваяСтрока = Объект.ПараметрыОтчета.Добавить();
				НоваяСтрока.Код				 = ТекВыгрузка.Код;
				НоваяСтрока.Наименование	 = ТекВыгрузка.Наименование;
				НоваяСтрока.Значение		 = ТекВыгрузка.Значение;
				НоваяСтрока.ЗначениеСтрока	 = ТекВыгрузка.ЗначениеСтрока;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант таблицы параметров отчета: %Выгрузка%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выгрузка%", Строка(Выгрузка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу параметров отчета. Заполнение табличной части Параметры отчета пропущено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Считывает в табличную часть ЭкземплярыИсточники данные об экземплярах
// источниках из структуры настроек СтруктураНастроекВход.
&НаСервере
Процедура ЗагрузитьЭкземплярыИсточникиИзСтруктурыНастроек(СтруктураНастроекВход)
	АдресЭкземплярыИсточники = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "АдресЭкземплярыИсточники", "");
	Если ЭтоАдресВременногоХранилища(АдресЭкземплярыИсточники) Тогда
		Выгрузка = ПолучитьИзВременногоХранилища(АдресЭкземплярыИсточники);
		Если ТипЗнч(Выгрузка) = Тип("ТаблицаЗначений") Тогда
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				НоваяСтрока = Объект.ЭкземплярыИсточники.Добавить();
				НоваяСтрока.ЭкземплярОтчета = ТекВыгрузка.ЭкземплярОтчета;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант таблицы экземпляров источников: %Выгрузка%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выгрузка%", Строка(Выгрузка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу экземпляров источников. Заполнение табличной части Экземпляры-источники пропущено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Устанавливает текущему отчету на форме значения реквизитов
// из структуры СтруктураНастроекВход.
&НаСервере
Процедура ВыставитьВыбранныеНастройкиОтчета(СтруктураНастроекВход, ИзменитьЯзыкиТекстов=Ложь)
	// Закладка Реквизиты отчета.
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Объект["Аналитика"+Индекс] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Аналитика"+Индекс, Неопределено);
		
	КонецЦикла;
	
	Объект.ВидОтчета				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВидОтчета",	Справочники.ВидыОтчетов.ПустаяСсылка());
	Объект.ДатаИзменения			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ДатаИзменения", Дата(1, 1, 1));
	Исполнитель						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Исполнитель",	Справочники.Пользователи.ПустаяСсылка());
	Объект.Номер					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Номер", "");
	Объект.Организация				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Организация",	Справочники.Организации.ПустаяСсылка());
	Объект.ОсновнаяВалюта			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ОсновнаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Объект.ПериодОтчета				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Объект.ПериодОкончания			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериодОтчетаОкончание", Справочники.Периоды.ПустаяСсылка());
	Объект.УправлениеПериодом		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "УправлениеПериодом", Документы.УправлениеПериодомСценария.ПустаяСсылка());
	Объект.ПоследнийРедактировавший	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПоследнийРедактировавший", Справочники.Пользователи.ПустаяСсылка());
	Проверяющий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Проверяющий",	Справочники.Пользователи.ПустаяСсылка());
	Объект.Проект					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Проект", Справочники.Проекты.ПустаяСсылка());
	Объект.Сценарий					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	// Закладка Настройки отчета.
	Объект.БланкИмпорта			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "БланкИмпорта",	Справочники.БланкиОтчетов.ПустаяСсылка());
	ВыбраннаяВалюта				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВыбраннаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Объект.ЕдиницаИзмерения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	Объект.ИспользуемаяИБ		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ИспользуемаяИБ", Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
	
	ТекНомерОсновногоЯзыка			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "НомерОсновногоЯзыка", 0);
	ТекВыводитьДополнительныйЯзык1	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВыводитьДополнительныйЯзык1", Ложь);
	ТекВыводитьДополнительныйЯзык2	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВыводитьДополнительныйЯзык2", Ложь);

	Если Не НомерОсновногоЯзыка=ТекНомерОсновногоЯзыка Тогда
		
		НомерОсновногоЯзыка=ТекНомерОсновногоЯзыка;
		ИзменитьЯзыкиТекстов=Истина;
		
	КонецЕсли;
	
	Если Не ВыводитьДополнительныйЯзык1=ТекВыводитьДополнительныйЯзык1 Тогда
		
		ВыводитьДополнительныйЯзык1=ТекВыводитьДополнительныйЯзык1;
		ИзменитьЯзыкиТекстов=Истина;
		
	КонецЕсли;
	
	Если Не ВыводитьДополнительныйЯзык2=ТекВыводитьДополнительныйЯзык2 Тогда
		
		ВыводитьДополнительныйЯзык2=ТекВыводитьДополнительныйЯзык2;
		ИзменитьЯзыкиТекстов=Истина;
		
	КонецЕсли;
	
	ТекПравилоОбработки	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПравилоОбработки", Справочники.ПравилаОбработки.ПустаяСсылка());
	
	Если НЕ Объект.ПравилоОбработки=ТекПравилоОбработки Тогда
		
		Объект.ПравилоОбработки= ТекПравилоОбработки;
		ПриИзмененииПравилаОбработки();
		
	КонецЕсли;
			
	Объект.ПравилоПроверки		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПравилоПроверки", Справочники.ПравилаПроверки.ПустаяСсылка());
	СпособВыводаФорма			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "СпособВыводаФорма",	"");
	ТекущаяТочность				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ТекущаяТочность", 0);
	// Закладка Дополнительные реквизиты.
	ЗагрузитьДополнительныеВалютыИзСтруктурыНастроек(СтруктураНастроекВход);
	ЗагрузитьПараметрыОтчетаИзСтруктурыНастроек(СтруктураНастроекВход);
	ЗагрузитьЭкземплярыИсточникиИзСтруктурыНастроек(СтруктураНастроекВход);
	// Дополнительная информация.
	Объект.СпособВывода	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "СпособВывода", "");
	Объект.ШаблонОтчета	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ШаблонОтчета", Справочники.БланкиОтчетов.ПустаяСсылка());
	
	Если Не ИзмененКлючевойРеквизит
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ИзмененКлючевойРеквизит") = Истина Тогда	
		ИзмененКлючевойРеквизит = Истина;	
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает текущему отчету на форме значения реквизитов
// из структуры СтруктураНастроекВход, а также выполняет обновление
// формы.
&НаСервере
Процедура ВыставитьВыбранныеНастройкиИОбновитьФорму(СтруктураНастроекВход)
	
	ИзменитьЯзыкиТекстов=Ложь;
	
	// Установим новые настройки.
	ВыставитьВыбранныеНастройкиОтчета(СтруктураНастроекВход,ИзменитьЯзыкиТекстов);
	// Обновим интерфейс.
	ЗаполнитьСписокВыбораВалютСервер();
	
	ТекстПроверкаПравБланк=ПроверитьВозможностьОтображенияПраваБланк();
	
	Если НЕ ПустаяСтрока(ТекстПроверкаПравБланк) Тогда
		
		Элементы.ПанельОтображения.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, ТекстПроверкаПравБланк);	
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Ложь;
		
	Иначе
		
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Истина;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;
		
		ОбновитьДанныеФормыСервер();
		РазблокироватьДанныеФормыДляРедактирования();

	КонецЕсли;
		
КонецПроцедуры

// Скрывает в макете строки, содержащие области со значеними,
// если такие области не содержат значений в пределах строки.
//
&НаКлиенте
Процедура УправлениеВидимостьюПустыхСтрок(Макет = Неопределено)
	
	Если Макет = Неопределено Тогда
		Макет = Элементы.ПолеТабличногоДокументаМакет;
	КонецЕсли;
	
	Если Элементы.ПолеТабличногоДокументаМакетНепустыеСтроки.Пометка Тогда
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
		Для Каждого Область Из Макет.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
				Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда // если пустая область
					Для НомСтр = Область.Верх По Область.Низ Цикл
						Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
							СписокНеЗаполненных.Добавить(НомСтр);
						КонецЕсли;
					КонецЦикла;
				Иначе // если область не пустая
					Для НомСтр = Область.Верх По Область.Низ Цикл
						Если СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
							СписокЗаполненных.Добавить(НомСтр);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
				Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает в макете колонки, содержащие области со значеними,
// если такие области не содержат значений в пределах колонки.
//
&НаКлиенте
Процедура УправлениеВидимостьюПустыхКолонок(Макет = Неопределено)
	
	Если Макет = Неопределено Тогда
		Макет = Элементы.ПолеТабличногоДокументаМакет;
	КонецЕсли;
	
	Если Элементы.ФормаНепустыеКолонки.Пометка Тогда
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
		Для Каждого Область Из Макет.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
				Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда // если пустая область
					Для НомСтр = Область.Лево По Область.Право Цикл
						Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
							СписокНеЗаполненных.Добавить(НомСтр);
						КонецЕсли;
					КонецЦикла;
				Иначе // если область не пустая
					Для НомСтр = Область.Лево По Область.Право Цикл
						Если СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
							СписокЗаполненных.Добавить(НомСтр);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для НомСтр = 1 По Макет.ШиринаТаблицы Цикл
			Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
				Макет.Область(0, НомСтр, 0, НомСтр).Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомСтр = 1 По Макет.ШиринаТаблицы Цикл
			Макет.Область(0, НомСтр, 0, НомСтр).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет считывание данных из файла по выбранным настройкам в 
// структуре СтруктураПараметровВход.
&НаКлиенте
Процедура ОбработатьИмпортФайла(СтруктураПараметровВход)
	Перем АдресХранилища;
	СпособИмпортирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "СпособИмпортирования", "");
	Если СокрЛП(СпособИмпортирования) = УправлениеОтчетамиКлиентУХ.СпособИмпортаОтчетаИзФайла() Тогда
		// Импорт из файла.
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ПутьКФайлу", "");
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			КэшПутьКФайлуИмпорта = ПутьКФайлу;
			ФильтрФайловADO = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ФильтрФайловADO", "");
			Если Не ЗначениеЗаполнено(ФильтрФайловADO) Тогда
				ФильтрФайловADO = УправлениеОтчетамиУХ.ОпределитьРасширениеФайлаADO(Объект.ИспользуемаяИБ);
			Иначе
				// Фильтр установлен.
			КонецЕсли;
			СчитатьФайлВОтчет(ПутьКФайлу, ФильтрФайловADO, АдресХранилища);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не указан путь к импортируемому файлу. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли СокрЛП(СпособИмпортирования) = УправлениеОтчетамиКлиентУХ.СпособИмпортаОтчетаИзСправочника() Тогда
		// Импорт из справочника.
		ПоказатьВыборФайлаИзСправочника();
	ИначеЕсли Не ЗначениеЗаполнено(СпособИмпортирования) Тогда
		// Способ не выбран.
		ТекстСообщения = НСтр("ru = 'Не выбран способ импортирования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Неизвестный способ.
		ТекстСообщения = НСтр("ru = 'Выбран неизвестный способ импортирования %СпособИмпортирования%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособИмпортирования%", Строка(СпособИмпортирования));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Возвращает массив одов показателей в выбранных ячейках.
&НаКлиенте
Функция ПолучитьМассивКодовВыбранныхЯчеек()
	РезультатФункции = Новый Массив;
	ТабДок = ПолеТабличногоДокументаМакет;
	
	Если Объект.СпособВывода <> "Дерево" Тогда
		Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
			
			Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			Для ИндС = Область.Верх По Область.Низ Цикл
				Для ИндК = Область.Лево По Область.Право Цикл
					ТекОбласть = ТабДок.Область(ИндС, ИндК);
					
					Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
						Продолжить;
					КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
					
					Если ТекОбласть.СодержитЗначение Тогда
						РезультатФункции.Добавить(СокрЛП(ТекОбласть.Имя));					
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе	
		Если ТекДанныеЯчейки<>Неопределено Тогда
			Если НЕ ТекДанныеЯчейки.Раскрытие Тогда		 
				РезультатФункции.Добавить(ТекДанныеЯчейки.Показатель);		 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

#Область УниверсальныеПроцессыСогласование

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	РезультатВыполнения = РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеЗаявки(Ссылка, Состояние, ЭтаФорма, ЭтотОбъект);
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ОпределитьСостояниеОбъекта()
	Если ОбщегоНазначения.ПодсистемаСуществует("ПодсистемыУХ.ПроцессыИСогласование") Тогда
		ОбщийМодульДействияСогласованиеУХСервер = ОбщегоНазначения.ОбщийМодуль("ДействияСогласованиеУХСервер");
		ОбщийМодульДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)	
	Если ИзменитьСостояниеЗаявки(Объект.Ссылка, ВыбранноеЗначение) Тогда
		СтатусОбъекта = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеВалютыПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ДополнительныеВалюты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Пометка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументКорректировки(Команда)
	
	Если Заблокирован Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Запрещено вводить ручные корректировки
			|экземпляра отчета в случае, когда он редактируется в основной форме.'"));
			
		Возврат;
		
	КонецЕсли;
	
	ДанныеПоказателей=ВернутьДанныеПоказателей();
	
	МассивПоказателей=ДанныеПоказателей.МассивПоказателей;
	
	СтруктураПараметров=Новый Структура("Организация,Сценарий,ОсновнаяВалюта,Проект,УправлениеПериодом,ВидОтчета");
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		СтруктураПараметров.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	МассивПериодов=Новый Массив;
	МассивПериодов.Добавить(Объект.ПериодОтчета);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Объект);
	
	СтруктураПараметров.Вставить("ЭкземплярОтчета",Объект.Ссылка);
	СтруктураПараметров.Вставить("МассивПоказателей",МассивПоказателей);
	СтруктураПараметров.Вставить("МассивПериодов",МассивПериодов);

	
	ОткрытьРучныеКорректировки(СтруктураПараметров, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРучныеКорректировки(СтруктураПараметров,Владелец) Экспорт
	
	ТекстРучнойВвод="Перечисление.СпособыВводаКорректировок.РучнойВвод";
	ТекстРаспределениеРавномерно="Перечисление.МетодыОбратногоРаспределения.Равномерно";
	ТекстОбратноеРаспределение="Перечисление.СпособыВводаКорректировок.ОбратноеРаспределение";
	ТекстРаспределениеПериметр="Перечисление.СпособыОбратногоРаспределения.ПоОрганизациямПериметра";
	
	Если НЕ СтруктураПараметров.Свойство("СпособВводаКорректировки") Тогда 
		
		СтруктураПараметров.Вставить("СпособВводаКорректировки",ПредопределенноеЗначение(ТекстРучнойВвод));
		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПоОрганизациям") Тогда
		
		СтруктураПараметров.Вставить("МетодРаспределения",ПредопределенноеЗначение(ТекстРаспределениеРавномерно));
		СтруктураПараметров.Вставить("СпособВводаКорректировки",ПредопределенноеЗначение(ТекстОбратноеРаспределение));
		СтруктураПараметров.Вставить("ОтборОрганизацийДляРаспределения",ПредопределенноеЗначение(ТекстРаспределениеПериметр));	
		
	КонецЕсли;
		
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Стр = "Документ.КорректировкаЗначенийПоказателей.ФормаОбъекта";
		ОткрытьФорму(Стр,СтруктураПараметров,Владелец);
	КонецЕсли
	
КонецПроцедуры //ОткрытьРучныеКорректировки()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьЭкземплярОтчета(Истина,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru = 'Перед изменением статуса объекта, требуется его записать'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = ПолучитьЗначениеРеквизитаФормы("СостояниеЗаявки") Тогда
		Возврат;		// Состояние не было изменено.
	Иначе
		Если Объект.Ссылка.Пустая() Тогда
			СтруктураПараметровОповещения = Новый Структура;
			СтруктураПараметровОповещения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметровОповещения);
			ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		Иначе
			// Объект записан. Не требуется подтвержения.
		КонецЕсли;
		ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);	
		ОпределитьСостояниеОбъекта();
	КонецЕсли;

КонецПроцедуры

// Выводит на форму панель согласования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()
	РасширениеПроцессыИСогласованиеУХ.НарисоватьПанельСогласования(Элементы, Элементы.ГруппаПодвал);
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
		ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
		ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
		ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
		ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	Иначе
		// Не добавляем команды согласования.
	КонецЕсли;
	ОпределитьСостояниеОбъекта();
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
		Если ЭлементСтатусОбъекта <> Неопределено Тогда
			Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
				ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
				ЭлементСтатусОбъекта.УстановитьДействие("НачалоВыбора", "СтатусОбъектаНачалоВыбора"); 
			Иначе
				// В прочих случаях не устанавливаем обработчик выбора.
			КонецЕсли;
		Иначе
			// Нет элемента Статус объекта.
		КонецЕсли;
	Иначе
		// Не добавляем обработчик выбора статуса.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроизводительностьЗаполнение(Команда)
	
	АдресДанныхПроизводительности=ПолучитьАдресДанныхПроизводительности("АвтоматическиПоПравилуОбработки");
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаТаблицаПроизводительности",Новый Структура("РабочийОбъектАдрес",АдресДанныхПроизводительности),ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьВычисление(Команда)
	
	АдресДанныхПроизводительности=ПолучитьАдресДанныхПроизводительности("ПересчитатьВычисляемыеПоказатели");
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаТаблицаПроизводительности",Новый Структура("РабочийОбъектАдрес",АдресДанныхПроизводительности),ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДанныхПроизводительности(ВидАнализа)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.АнализПроизводительности=Истина;
	
	Если ВидАнализа="АвтоматическиПоПравилуОбработки" Тогда
		
		РабочийОбъект.ЗаполнитьОтчет("АвтоматическиПоПравилуОбработки");
		
	Иначе
		
		РабочийОбъект.СформироватьСтруктуруПараметров();
		РабочийОбъект.ЗапуститьМодульВычисления();
		
	КонецЕсли;
		
	Возврат ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);	
	
КонецФункции //  ПолучитьАдресТаблицыПроизводительности()

&НаСервере
Процедура ЗаписатьСТрассировкойРасчета()
	
	Если ЗаписатьЭкземплярОтчета(Истина,Ложь,Истина) Тогда
		
		Модифицированность=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрассировкаРекурсивногоРасчета(Команда)
	
	ЗаписатьСТрассировкойРасчета();
	
	Если НЕ ПустаяСтрока(АдресХранилищаДанныхТрассировки) Тогда
		
		Имя = "Обработка.ЗаписьПоказателяСРасчетомЗависимых.Форма.ФормаАнализРасчетов";
		ОткрытьФорму(Имя, Новый Структура("ВидОтчета, АдресХранилищаДанныхТрассировки", Объект.ВидОтчета, АдресХранилищаДанныхТрассировки)
				, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьТаблицуБланк(Команда)
	// Установим фиксацию в таблице на левый верхний угол текущей области, либо снимем фиксацию (в зависимости от состояния команды).
	Элементы.ПолеТабличногоДокументаМакетЗафиксироватьТаблицуБланк.Пометка = НЕ Элементы.ПолеТабличногоДокументаМакетЗафиксироватьТаблицуБланк.Пометка;
	Если Элементы.ПолеТабличногоДокументаМакетЗафиксироватьТаблицуБланк.Пометка Тогда
		// Установим фиксацию.
		ЭлементМакет = Элементы.ПолеТабличногоДокументаМакет;
		ТекОбласть = ЭлементМакет.ТекущаяОбласть; 
		Если ТекОбласть <> Неопределено Тогда
			ФиксЛево = ТекОбласть.Лево - 1;
			ФиксВерх = ТекОбласть.Верх - 1;
			ПолеТабличногоДокументаМакет.ФиксацияСлева = ФиксЛево;
			ПолеТабличногоДокументаМакет.ФиксацияСверху = ФиксВерх;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для фиксации требуется выбрать область документа. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Снимем фиксацию.
		ПолеТабличногоДокументаМакет.ФиксацияСлева = 0;
		ПолеТабличногоДокументаМакет.ФиксацияСверху = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРакурсыНажатие(Элемент)
	СтруктураОткрытия = РасширениеПроцессыИСогласованиеУХ.ПолучитьСтруктуруОткрытияРакурсаПоОтчету(Объект.ВидОтчета, Объект.ПериодОтчета);
	СтрокаОткрытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОткрытия, "СтрокаОткрытияФормы", "");
	ПараметрыОткрытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОткрытия, "ПараметрыОткрытия", Новый Структура);
	Если ЗначениеЗаполнено(СтрокаОткрытия) Тогда
		ОткрытьФорму(СтрокаОткрытия, ПараметрыОткрытия, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// Параметры не указаны. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НепустыеСтроки(Команда)
	Элементы.ПолеТабличногоДокументаМакетНепустыеСтроки.Пометка = НЕ Элементы.ПолеТабличногоДокументаМакетНепустыеСтроки.Пометка;
	УправлениеВидимостьюПустыхСтрок(ПолеТабличногоДокументаМакет);
КонецПроцедуры

&НаКлиенте
Процедура НепустыеКолонки(Команда)
	Элементы.ФормаНепустыеКолонки.Пометка = НЕ Элементы.ФормаНепустыеКолонки.Пометка;
	УправлениеВидимостьюПустыхКолонок(ПолеТабличногоДокументаМакет);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпособаЗаполнения_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    Если (ВыбранноеЗначение <> КодВозвратаДиалога.Отмена) И (ВыбранноеЗначение <> Неопределено) Тогда
        ВыбранныйСпособ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "СпособЗаполнения", ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.ПустаяСсылка"));
        Если ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки") Тогда
        	// Изменим реквизиты Правило заполнения, Правило проверки и Используемая ИБ.
        	Объект.ИспользуемаяИБ	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ИспользуемаяИБ", ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка"));
        	Объект.ПравилоОбработки	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ПравилоОбработки", ПредопределенноеЗначение("Справочник.ПравилаОбработки.ПустаяСсылка"));
        	Объект.ПравилоПроверки	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ПравилоПроверки", ПредопределенноеЗначение("Справочник.ПравилаПроверки.ПустаяСсылка"));
        	// Заполним отчет по установленным настройкам.
        	ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиКонсолидация") Тогда        	
        	ЗаполнитьДокумент("АвтоматическиКонсолидация");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам") Тогда        	
        	ЗаполнитьДокумент("АвтоматическиСвернувПоАналитикам");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду") Тогда        	
        	ПериодичностьСвертки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ПериодичностьСвертки", ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка"));
			Если ЗначениеЗаполнено(ПериодичностьСвертки) Тогда
				КэшПериодичностьСвертки = ПериодичностьСвертки;
				ЗаполнитьДокумент("АвтоматическиСвернувПоПериоду", ПериодичностьСвертки);
			Иначе
				ТекстСообщения = НСтр("ru = 'Периодичность не выбрана. Заполнение отчета отменено.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиСвернувПоПроектам") Тогда        		
			ЗаполнитьДокумент("АвтоматическиСвернувПоПроектам");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.Импорт") Тогда        	
			Объект.БланкИмпорта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "БланкИмпорта", ПредопределенноеЗначение("Справочник.БланкиОтчетов.ПустаяСсылка"));
			ОбработатьИмпортФайла(ВыбранноеЗначение);
        ИначеЕсли НЕ ЗначениеЗаполнено(ВыбранныйСпособ) Тогда
        	ТекстСообщения = НСтр("ru = 'Не удалось определи способ заполнения отчета. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиЭлиминация") Тогда        		
			ЗаполнитьДокумент("АвтоматическиЭлиминация");
        Иначе
        	ТекстСообщения = НСтр("ru = 'Выбран неизвестный способ заполнения: %СпособЗаполнения%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособЗаполнения%", Строка(ВыбранныйСпособ));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		ПоказатьПротоколПриНеобходимости();
		
    Иначе    
		// Пользователь отказался. Ничего не делаем.
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколПриНеобходимости()
	
	Если ЕстьПротоколируемыеОшибки() Тогда
		
		ОтобразитьПротокол(Неопределено);
		
	КонецЕсли;	
	
КонецПроцедуры // ПоказатьПротоколПриНеобходимости()

&НаКлиенте
Процедура ЗаполнитьПрочимСпособом(Команда)
	ВерсияРегламента = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(Объект.Сценарий, Объект.ПериодОтчета);
	Если ЗначениеЗаполнено(КэшПериодичностьСвертки) Тогда
		НоваяПериодичностьСвертки = КэшПериодичностьСвертки;
	Иначе
		НоваяПериодичностьСвертки = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка");
	КонецЕсли;
	Если ЗначениеЗаполнено(КэшПутьКФайлуИмпорта) Тогда
		НовыйПутьКФайлуИмпорта = КэшПутьКФайлуИмпорта;
	Иначе
		НовыйПутьКФайлуИмпорта = "";
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВерсияРегламента",		 	ВерсияРегламента);
	СтруктураПараметров.Вставить("ВидОтчета",				 	Объект.ВидОтчета);
	СтруктураПараметров.Вставить("ТипБД",				 		ТипБД);
	СтруктураПараметров.Вставить("ИспользуемаяИБ",			 	Объект.ИспользуемаяИБ);
	СтруктураПараметров.Вставить("Организация",				 	Объект.Организация);
	СтруктураПараметров.Вставить("ПериодОтчета",			 	Объект.ПериодОтчета);
	СтруктураПараметров.Вставить("ПериодичностьСвертки",	 	НоваяПериодичностьСвертки);
	СтруктураПараметров.Вставить("ПравилоОбработки",		 	Объект.ПравилоОбработки);	
	СтруктураПараметров.Вставить("ПравилоПроверки",			 	Объект.ПравилоПроверки);	
	СтруктураПараметров.Вставить("ПутьКФайлу",				 	НовыйПутьКФайлуИмпорта);	
	СтруктураПараметров.Вставить("СпособЗаполнения",		 	Объект.СпособФормированияОтчета);
	СтруктураПараметров.Вставить("Сценарий",				 	Объект.Сценарий);
	СтруктураПараметров.Вставить("ФайлИмпорта",				 	Объект.ФайлИмпорта);
	СтруктураПараметров.Вставить("БланкИмпорта",				Объект.БланкИмпорта);
	СтруктураПараметров.Вставить("РежимМногопериодногоБланка",	Ложь);

	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыборСпособаЗаполнения_Завершение", ЭтотОбъект);
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ВыборСпособаЗаполнения", СтруктураПараметров, , , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОтчета_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если (ВыбранноеЗначение = КодВозвратаДиалога.Отмена) ИЛИ (ВыбранноеЗначение = Неопределено) Тогда
		// Пользователь отказался. Ничего не делаем.
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)	= Тип("Структура") Тогда
		Если НЕ ПроверитьВозможностьВыводаВТекущейФорме(ВыбранноеЗначение) Тогда	
			ОповещениеЗакрытьФорму = Новый ОписаниеОповещения("ВопросНоваяФормаЗавершение",ЭтаФорма,ВыбранноеЗначение);
			ТекстВопросаОткрытьФорму = НСтр("ru = 'Для продолжения работы с выбранными настройками необходимо заново открыть форму, продолжить?'");
			ПоказатьВопрос(ОповещениеЗакрытьФорму, ТекстВопросаОткрытьФорму, РежимДиалогаВопрос.ДаНет);	
			Возврат;
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
		ВыставитьВыбранныеНастройкиИОбновитьФорму(ВыбранноеЗначение);
		УстановитьЗаголовокФормы();
	Иначе
		ТекстСообщения = НСтр("ru = 'Получено неизвестный вариант настроект отчета: %Значение%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(ВыбранноеЗначение));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
КонецПроцедуры

&НаКлиенте
Процедура ВопросНоваяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Модифицированность = Истина;
		ВыставитьВыбранныеНастройкиОтчета(ДополнительныеПараметры);
		УстановитьЗаголовокФормы();
        ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыводаВТекущейФорме(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.СпособВывода = "Бланк" И   ВыбранноеЗначение.ШаблонОтчета.РежимБланка = 2 Тогда
		 Возврат Ложь;
	ИначеЕсли СтрНайти(ВыбранноеЗначение.СпособВывода,"СводнаяТаблица")>0 Тогда	 
		 Возврат Ложь;		  
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	СтруктураПараметров = Новый Структура;
	АдресДанныхНастроек = ПолучитьАдресДанныхОтчета();
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкиОтчета_Завершение", ЭтотОбъект);
	СтруктураПараметров.Вставить("АдресДанныхОтчета", АдресДанныхНастроек);
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРедактированияНастроекОтчета", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСводнойТаблице(Команда)
	МассивКодов = ПолучитьМассивКодовВыбранныхЯчеек();
	ВыбранныйРакурс = ПолучитьРакурсВыбранныхПоказателей(МассивКодов);
	Если ЗначениеЗаполнено(ВыбранныйРакурс) Тогда
		ПоказатьЗначение(, ВыбранныйРакурс);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить ракурс. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьОтображенияВТекущемРежиме()
	
	Если Не ЗначениеЗаполнено(Объект.УправлениеПериодом) Тогда	
		Элементы.ПанельОтображения.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не заполнен документ Управление отчетным периодом'"));	
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
        Элементы.ФормаКоманднаяПанель.Доступность = Истина;
        Элементы.ЗаписатьИЗакрыть.Доступность = Истина;	
	КонецЕсли;	
	
	ТекстПроверкаПравБланк=ПроверитьВозможностьОтображенияПраваБланк();
	
	Если НЕ ПустаяСтрока(ТекстПроверкаПравБланк) Тогда
		
		Элементы.ПанельОтображения.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, ТекстПроверкаПравБланк);	
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Ложь;
		
	Иначе
		
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Истина;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;
		
	КонецЕсли;
	
	Если Не Объект.ПериодОтчета = Объект.ПериодОкончания Тогда	
		Если СтрНайти(Объект.СпособВывода,"Бланк")>0 И НЕ Объект.ШаблонОтчета.Пустая() И НЕ Объект.ШаблонОтчета.РежимБланка =2 Тогда	
			Элементы.ПанельОтображения.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
			ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Для работы с несколькими периодами в одном экземпляре необходимо выбрать отображение в бланке сводной таблицы или в многопериодном бланке'"));	
			Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
				Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
					Продолжить;
				КонецЕсли;	
				Эл.Доступность = Ложь;		
			КонецЦикла;		
			Элементы.ФормаГруппаНастройки.Доступность = Истина;
			Элементы.ФормаОткрытьНастройки.Доступность = Истина;
			Элементы.ФормаКоманднаяПанель.Доступность = Истина;
			Элементы.ЗаписатьИЗакрыть.Доступность = Истина;	
		КонецЕсли;	
		
		Если СтрНайти(Объект.СпособВывода,"Дерево")>0  Тогда	
			Элементы.ПанельОтображения.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
			ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Для работы с несколькими периодами в одном экземпляре необходимо выбрать отображение в бланке сводной таблицы или в многопериодном бланке'"));	
			Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
				Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
					Продолжить;
				КонецЕсли;	
				Эл.Доступность = Ложь;		
			КонецЦикла;		
			Элементы.ФормаГруппаНастройки.Доступность = Истина;
			Элементы.ФормаОткрытьНастройки.Доступность = Истина;
			Элементы.ФормаКоманднаяПанель.Доступность = Истина;
			Элементы.ЗаписатьИЗакрыть.Доступность = Истина;	
		КонецЕсли;		
	КонецЕсли;	

	
КонецПроцедуры

Функция ПроверитьВозможностьОтображенияПраваБланк()
	
	Возврат ПолныеПраваУХ.ПроверитьВозможностьОтображенияПоБланкуОтчета(Объект.ШаблонОтчета,Объект.Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
КонецФункции // ПроверитьВозможностьОтображенияПраваБланк()

&НаКлиенте
Процедура ИнициализироватьФормуНового() 
		
	УстановитьЗаголовокФормы();
	
	ПеревестиВРежимРедактирования();
	
	Элементы.Редактирование.Пометка=Заблокирован;
	Элементы.ГруппаЗаполнение.Доступность=Заблокирован;
	
	Объект.ЧтениеНеактуальныхЗаписей = Истина;
	
	Элементы.ЧтениеНеактуальныхЗаписей.Пометка = Истина;	
	Элементы.ПолеТабличногоДокументаМакетГруппаКнопокРедактированияГР.Доступность=Заблокирован;
	Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;
	
	НастроитьДоступностьИОтобразитьСостояниеОтчета();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНовогоСервер() 
	
	Если ЗначениеЗаполнено(АдресПараметровИниициализации) Тогда 
		ВыбранноеЗначение = ПрочитатьКлючевыеРеквизиты();
		ЗаполнитьКлючевыеРеквизитыДокумента(ВыбранноеЗначение);		
	КонецЕсли;
	УправлятьДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьКлючевыеРеквизиты()
	
	Возврат ПолучитьИзВременногоХранилища(АдресПараметровИниициализации);
	
КонецФункции

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета6ПриИзменении(Элемент)
	
	 ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОтчета6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 6, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСверткуСтрокКолонок(ТабДокумент)
	
	Если Элементы.ПолеТабличногоДокументаМакетНепустыеСтроки.Пометка тогда
		УправлениеВидимостьюПустыхСтрок(ТабДокумент);
	КонецЕсли;
	
	Если Элементы.ФормаНепустыеКолонки.Пометка тогда
		УправлениеВидимостьюПустыхКолонок(ТабДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзменении(Элемент)
	
	ВосстановитьСверткуСтрокКолонок(ЭтаФорма[Элемент.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОшибкаПриИзменении(Элемент)
	
	ВосстановитьСверткуСтрокКолонок(ЭтаФорма[Элемент.Имя]);
	
КонецПроцедуры

Процедура ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Заголовок) 
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.ФиксацияСлева = 0;
	ПолеТабличногоДокументаМакет.ФиксацияСверху = 0;	
	
	Рисунок = ПолеТабличногоДокументаМакет.Рисунки.ДОбавить(ТипРисункаТабличногоДокумента.Прямоугольник);
	Рисунок.Лево = 18;
	Рисунок.Верх = 14;
	Рисунок.Ширина = 160;
	Рисунок.Высота = 28;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу  = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.ГраницаСлева  = Ложь;
	Рисунок.ЦветФона=Новый Цвет(220,220,220);	
	Рисунок.Имя  = "ШаблонПустойТаблицы";	
	
	Рисунок = ПолеТабличногоДокументаМакет.Рисунки.ДОбавить(ТипРисункаТабличногоДокумента.Текст);
	Рисунок.Лево = 16;
	Рисунок.Верх = 12;
	Рисунок.Ширина = 160;
	Рисунок.Высота = 28;
	Рисунок.ЦветФона=Новый Цвет(155, 194, 230);	
	Рисунок.Шрифт = Новый Шрифт(Рисунок.Шрифт,,12);
	Рисунок.ЦветТекста = Новый Цвет(255,255,255);
	Рисунок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр; 
	Рисунок.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
	Рисунок.Текст = Заголовок;
			
КонецПроцедуры	
