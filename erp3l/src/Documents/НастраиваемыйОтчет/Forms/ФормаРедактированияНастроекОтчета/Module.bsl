// Выполняет обновление элементов отображения языков.
&НаСервере
Процедура ОбновитьОтображениеДопЯзыков()
	// Получение исходных данных.
	ТаблицаЯзыков = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТаблицаЯзыков");
	// Отображение группы Выбор языков отображения и флажков Дополнительные языки.
	Если ТаблицаЯзыков.Количество() = 0 Тогда
		Элементы.ГруппаЯзыки.Видимость = Ложь;
	ИначеЕсли ТаблицаЯзыков.Количество() = 1 Тогда
		Элементы.ГруппаЯзыки.Видимость = Истина;

		Элементы.ВыводитьДополнительныйЯзык1.Видимость = Истина;
		Элементы.ВыводитьДополнительныйЯзык1.Заголовок = ТаблицаЯзыков[0].НаименованиеЯзыка;
		
		Элементы.ВыводитьДополнительныйЯзык2.Видимость=Ложь;
	Иначе
		Элементы.ГруппаЯзыки.Видимость = Истина;
		
		Элементы.ВыводитьДополнительныйЯзык1.Видимость = Истина;
		Элементы.ВыводитьДополнительныйЯзык1.Заголовок = ТаблицаЯзыков[0].НаименованиеЯзыка;
		
		Элементы.ВыводитьДополнительныйЯзык2.Видимость = Истина;
		Элементы.ВыводитьДополнительныйЯзык2.Заголовок = ТаблицаЯзыков[1].НаименованиеЯзыка;
	КонецЕсли;
	// Отображение списка Основного языка.
	Если ТаблицаЯзыков.Количество() > 0 Тогда
		
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Очистить();	
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(0, Метаданные.ОсновнойЯзык.Синоним);
		
		// Заполним список выбора Основного языка.
		Для Каждого СтрЯзык ИЗ ТаблицаЯзыков Цикл
			Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(СтрЯзык.ПорядковыйНомер, СтрЯзык.НаименованиеЯзыка);
		КонецЦикла;
				
		Элементы.ВыводитьДополнительныйЯзык1.Доступность = Истина;
		Элементы.ВыводитьДополнительныйЯзык2.Доступность = Истина;
		
		Если НомерОсновногоЯзыка > 0 Тогда
			ЭтаФорма["ВыводитьДополнительныйЯзык" + НомерОсновногоЯзыка] = Ложь;
			Элементы["ВыводитьДополнительныйЯзык" + НомерОсновногоЯзыка].Доступность = Ложь;
		КонецЕсли;

	Иначе	
		
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Очистить();
		
	КонецЕсли;
КонецПроцедуры
	
// Управляет доступностью элементов на форме.
&НаСервере
Процедура УправлениеДоступностью()
	ОбновитьОтображениеДопЯзыков();
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		
		Элементы.Проект.Видимость = ВидОтчета.РазделениеПоПроектам;
		
		Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ШаблонОтчета) Тогда
			
			ЭтаФорма.ТолькоПросмотр=(НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиПоБланкуОтчета(ШаблонОтчета,Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь")));
			
		КонецЕсли;	
			
	Иначе
		// Вид отчета не заполнен.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСпособовОтображения()
	
	// Очистка исходного списка.
	Элементы.СпособВыводаФорма.СписокВыбора.Очистить();
	
	Если УправлениеПериодом.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП Тогда	
		// Получение доступного списка бланков.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Наименование КАК Наименование,
		|	БланкиОтчетов.РежимБланка КАК РежимБланка
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|	И НЕ БланкиОтчетов.ПометкаУдаления
		|	И (БланкиОтчетов.РежимБланка = 2
		|			ИЛИ БланкиОтчетов.РежимБланка = 1)";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Результат = Запрос.Выполнить().Выбрать();
		// Заполнение списка выбора доступными бланками.
		Пока Результат.Следующий() Цикл
			ПредставлениеБланка= Результат.Наименование;  
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить(Результат.Ссылка, ПредставлениеБланка, , 
			?(Результат.РежимБланка = 1,БиблиотекаКартинок.ВнешнийИсточникДанныхКуб,БиблиотекаКартинок.Органайзер));
		КонецЦикла;
		
		// Установка способа по умолчанию.
		СпособВывода = "";
		СпособВыводаФорма = "";
		
		Если ЗначениеЗаполнено(ШаблонОтчета) Тогда			
			СпособВывода 		= ШаблонОтчета;	
			СпособВыводаФорма   = ШаблонОтчета;				
		КонецЕсли;
		
	Иначе	
		// Получение доступного списка бланков.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|	И БланкиОтчетов.РежимБланка = 0
		|	И НЕ БланкиОтчетов.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Результат = Запрос.Выполнить().Выбрать();
		// Заполнение списка выбора доступными бланками.
		Пока Результат.Следующий() Цикл
			ПредставлениеБланка = "Бланк " + Результат.Наименование;
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить(Результат.Ссылка, ПредставлениеБланка, , БиблиотекаКартинок.БланкиОтчетов);
		КонецЦикла;
			
		ПроверятьПраваНаБланки=ПолныеПраваУХ.ПроверятьПраваПоБланкам(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		
		Если НЕ ПроверятьПраваНаБланки Тогда
			
			// Добавление отображения в дереве.
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить("Дерево", НСтр("ru = 'Дерево строк'"),,БиблиотекаКартинок.Иерархия);
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить("ДеревоГруппировка", НСтр("ru = 'Дерево строк (группировка по аналитикам)'"),,БиблиотекаКартинок.Иерархия);
			Элементы.СпособВыводаФорма.СписокВыбора.Добавить("ДеревоГруппировкаСИерархией", НСтр("ru = 'Дерево строк (группировка по аналитикам с учетом иерархии)'"),,БиблиотекаКартинок.Иерархия);
			
		КонецЕсли;
		
		// Установка способа по умолчанию.
		Если ЗначениеЗаполнено(СпособВывода) Тогда		
			Если СтрНайти(СпособВывода, "Бланк")>0 Тогда
				СпособВыводаФорма = ШаблонОтчета;
			Иначе
				СпособВыводаФорма = СпособВывода;
			КонецЕсли;		
		ИначеЕсли ЗначениеЗаполнено(ШаблонОтчета) Тогда	
			СпособВыводаФорма = ШаблонОтчета;
			СпособВывода = "Бланк " + Строка(ШаблонОтчета);	
		Иначе	
			СпособВывода = "Дерево";
			СпособВыводаФорма = СпособВывода;	
		КонецЕсли;
		
	КонецЕсли;	
	
	
КонецПроцедуры // ЗаполнитьСписокСпособовОтображения() 

// Считыввает из структуры данных СтруктураДанныхВход данные
// по аналитике с номером НомерАналитикиВход.
&НаСервере
Процедура СчитатьАналитику(СтруктураДанныхВход, НомерАналитикиВход)
	// Значение аналитики.
	ИмяПоляЗначение = "АналитикаОтчета" + Строка(НомерАналитикиВход);
	ИмяРеквизитаФормыЗначение = "Аналитика" + Строка(НомерАналитикиВход);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ИмяРеквизитаФормыЗначение) Тогда
		ЭтаФорма[ИмяРеквизитаФормыЗначение] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, ИмяПоляЗначение, Неопределено);
	Иначе	
		// Реквизит не найден. Пропускаем.
	КонецЕсли;
	// Видимость и заголовок элемента формы.
	ИмяПоляВидимость = "АналитикаОтчетаВидимость" + Строка(НомерАналитикиВход);
	ИмяПоляЗаголовок = "АналитикаОтчетаЗаголовок" + Строка(НомерАналитикиВход);
	ИмяЭлементаФормы = "Аналитика" + Строка(НомерАналитикиВход);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ИмяЭлементаФормы) Тогда
		ЭлементАналитики = Элементы[ИмяЭлементаФормы];
		ЭлементАналитики.Видимость	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, ИмяПоляВидимость, Ложь);
		ЭлементАналитики.Заголовок	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, ИмяПоляЗаголовок, НСтр("ru = 'Аналитика '") + Строка(НомерАналитикиВход));
	Иначе
		// Элемент не найден. Пропускаем.
	КонецЕсли;
	// Тип аналитики.
	ИмяПоляТипАналитики = "ТипАналитики" + Строка(НомерАналитикиВход);
	ИмяРеквизитаФормыТипАналитики = "ТипАналитики" + Строка(НомерАналитикиВход);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ИмяРеквизитаФормыТипАналитики) Тогда
		ЭтаФорма[ИмяРеквизитаФормыТипАналитики] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, ИмяПоляТипАналитики, Новый ОписаниеТипов);
	Иначе	
		// Реквизит не найден. Пропускаем.
	КонецЕсли;

КонецПроцедуры

// Загружает в таблицу Дополнительные валюты на форме данные
// о доп валютых из структуры СтрукутураДанныхВход.
&НаСервере
Процедура СчитатьДополнительныеВалюты(СтруктураДанныхВход)
	ДополнительныеВалюты.Очистить();
	ТаблицаДопВалюты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ДополнительныеВалюты", Новый ТаблицаЗначений);
	Для Каждого ТекТаблицаДопВалюты Из ТаблицаДопВалюты Цикл
		НоваяСтрока = ДополнительныеВалюты.Добавить();
		НоваяСтрока.Валюта	 = ТекТаблицаДопВалюты.Валюта;
		НоваяСтрока.Пометка	 = ТекТаблицаДопВалюты.Пометка;
	КонецЦикла;
КонецПроцедуры

// Загружает в таблицу Дополнительные валюты на форме данные
// о параметрах отчета из структуры СтруктураДанныхВход.
&НаСервере
Процедура СчитатьПараметрыОтчета(СтруктураДанныхВход)
	ПараметрыОтчета.Очистить();
	ТаблицаПараметрыОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ПараметрыОтчета", Новый ТаблицаЗначений);
	Для Каждого ТекТаблицаПараметрыОтчета Из ТаблицаПараметрыОтчета Цикл
		НоваяСтрока = ПараметрыОтчета.Добавить();
		НоваяСтрока.Код				 = ТекТаблицаПараметрыОтчета.Код;
		НоваяСтрока.Наименование	 = ТекТаблицаПараметрыОтчета.Наименование;
		НоваяСтрока.Значение		 = ТекТаблицаПараметрыОтчета.Значение;
		НоваяСтрока.ЗначениеСтрока	 = ТекТаблицаПараметрыОтчета.ЗначениеСтрока;
	КонецЦикла;
КонецПроцедуры

// Загружает в таблицу Экземпляры источники на форме данные
// об экземплярах-источниках из структуры СтруктураДанныхВход.
&НаСервере
Процедура СчитатьЭкземплярыИсточники(СтруктураДанныхВход)	
	ТаблицаЭкземплярыИсточники = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ЭкземплярыИсточники", Новый ТаблицаЗначений);
	Для Каждого ТекТаблицаЭкземплярыИсточники Из ТаблицаЭкземплярыИсточники Цикл
		НоваяСтрока = ЭкземплярыИсточники.Добавить();
		НоваяСтрока.ЭкземплярОтчета = ТекТаблицаЭкземплярыИсточники.ЭкземплярОтчета;
	КонецЦикла;
КонецПроцедуры

// Производит чтение данных из временного хранилищ, заданного адресом АдресХранилищаВход.
&НаСервере
Процедура СчитатьИсходныеДанныеИзВременногоХранилища(АдресХранилищаВход)	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаВход) Тогда
		СтруктураДанныхНастроек = ПолучитьИзВременногоХранилища(АдресХранилищаВход);
		Если ТипЗнч(СтруктураДанныхНастроек) = Тип("Структура") Тогда
			// Закладка Реквизиты отчета.
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
				 СчитатьАналитику(СтруктураДанныхНастроек, Индекс);	  
			КонецЦикла;

			ВидОтчета						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ВидОтчета",	Справочники.ВидыОтчетов.ПустаяСсылка());
			ДатаИзменения					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ДатаИзменения", Дата(1, 1, 1));
			Исполнитель						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Исполнитель", Справочники.Пользователи.ПустаяСсылка());
			Номер							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Номер", "");
			Организация						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Организация", Справочники.Организации.ПустаяСсылка());
			ОсновнаяВалюта					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ОсновнаяВалюта", Справочники.Валюты.ПустаяСсылка());
			ПериодОтчета					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Период", Справочники.Периоды.ПустаяСсылка());
			ПериодОкончания			 		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ПериодОкончания", ПериодОтчета);
			УправлениеПериодом				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "УправлениеПериодом", УправлениеПериодом);
			ПоследнийРедактировавший		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ПоследнийРедактировавший", Справочники.Пользователи.ПустаяСсылка());
			Проверяющий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Проверяющий", Справочники.Пользователи.ПустаяСсылка());
			Проект							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Проект", Справочники.Проекты.ПустаяСсылка());
			Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
			
			Если Не ПериодОтчета.Пустая() тогда
				Периодичность = ПериодОтчета.Периодичность;				
			КонецЕсли;
			
			// Закладка Настройки отчета.
			БланкИмпорта					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "БланкИмпорта",	Справочники.БланкиОтчетов.ПустаяСсылка());
			ВыбраннаяВалюта					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ВыбраннаяВалюта", Справочники.Валюты.ПустаяСсылка());
			ВыводитьДополнительныйЯзык1		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ВыводитьДополнительныйЯзык1", Ложь);
			ВыводитьДополнительныйЯзык2		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ВыводитьДополнительныйЯзык2", Ложь);
			ЕдиницаИзмерения				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
			ИспользуемаяИБ					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ИспользуемаяИБ", Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
			НомерОсновногоЯзыка				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "НомерОсновногоЯзыка", 0);
			ПравилоОбработки				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ПравилоОбработки", Справочники.ПравилаОбработки.ПустаяСсылка());
			ПравилоПроверки					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ПравилоПроверки", Справочники.ПравилаПроверки.ПустаяСсылка());
			СпособВыводаФорма				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "СпособВыводаФорма",	"");
			ТекущаяТочность					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ТекущаяТочность", 0);
			// Закладка Дополнительные параметры.
			СчитатьДополнительныеВалюты(СтруктураДанныхНастроек);
			СчитатьПараметрыОтчета(СтруктураДанныхНастроек);
			СчитатьЭкземплярыИсточники(СтруктураДанныхНастроек);
			// Дополнительная информация.
			СпособВывода					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "СпособВывода",	"");
			ШаблонОтчета					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхНастроек, "ШаблонОтчета", Справочники.БланкиОтчетов.ПустаяСсылка());
			ПервоначальныйНомер				 = Номер;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант настроек: %Настройки%. Заполнение данных формы отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Настройки%", Строка(СтруктураДанныхНастроек));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить данные настроек. Заполнение данных формы отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Помещает таблицу дополнительных валют в хранилище и возвращает 
// адрес на него.
&НаСервере
Функция ПоместитьДополнительныеВалюты()
	РезультатФункции = "";
	Выгрузка = ДополнительныеВалюты.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка,Новый УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Помещает таблицу параметров отчета в хранилище и возвращает 
// адрес на него.
&НаСервере
Функция ПоместитьПараметрыОтчета()
	РезультатФункции = "";
	Выгрузка = ПараметрыОтчета.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка,Новый УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Помещает таблицу экземпляров источников в хранилище и возвращает 
// адрес на него.
&НаСервере
Функция ПоместитьЭкземплярыИсточники()
	РезультатФункции = "";
	Выгрузка = ЭкземплярыИсточники.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка,Новый УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру адресов временных хранилищ, куда помещены
// таблицы с закладки ДополнительныеРеквизиты.
&НаСервере
Функция ПоместитьДополнительныеРеквизиты()
	РезультатФункции = Новый Структура;
	// Дополнительные валюты.
	АдресДополнительныеВалюты = ПоместитьДополнительныеВалюты();
	РезультатФункции.Вставить("АдресДополнительныеВалюты", АдресДополнительныеВалюты);
	// Параметры отчета.
	АдресПараметрыОтчета = ПоместитьПараметрыОтчета();
	РезультатФункции.Вставить("АдресПараметрыОтчета", АдресПараметрыОтчета);
	// Экземпляры источника.
	АдресЭкземплярыИсточники = ПоместитьЭкземплярыИсточники();
	РезультатФункции.Вставить("АдресЭкземплярыИсточники", АдресЭкземплярыИсточники);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВалютСервер()
	
	Элементы.ВыбраннаяВалюта.СписокВыбора.Очистить();
	
	ТекВыбраннаяВалюта = ВыбраннаяВалюта;
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
		
		Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(ОсновнаяВалюта, ОсновнаяВалюта.Наименование);
		
	КонецЕсли;
	
	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Сценарий, ПериодОтчета, Организация, ВидОтчета);
	Для Каждого СтрВалюта ИЗ ДополнительныеВалюты Цикл
		
		СтрВалюта.Пометка = (СтруктураВалют <> Неопределено) И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрВалюта.Валюта) <> Неопределено);
		Если СтрВалюта.Пометка Тогда
			Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(СтрВалюта.Валюта, СтрВалюта.Валюта.Наименование);
		КонецЕсли;	
	
	КонецЦикла;
	
	Если НЕ Элементы.ВыбраннаяВалюта.СписокВыбора.НайтиПоЗначению(ТекВыбраннаяВалюта) = Неопределено Тогда
		ВыбраннаяВалюта = ТекВыбраннаяВалюта;
	Иначе
		ВыбраннаяВалюта = ОсновнаяВалюта;
	КонецЕсли;
				
КонецПроцедуры

// Создаёт структуру, куда помещены введённые значения реквизитов формы.
&НаКлиенте
Функция СформироватьСтруктуруЗакрытия()
	РезультатФункции = Новый Структура;
	// Закладка Реквизиты отчета.
	
	Для Индекс=1 По ЧислоДопАналитик Цикл	
		РезультатФункции.Вставить("Аналитика"+Индекс,ЭтотОбъект["Аналитика"+Индекс]);	
	КонецЦикла;
	
	РезультатФункции.Вставить("ВидОтчета",						 ВидОтчета);
	РезультатФункции.Вставить("ДатаИзменения",					 ДатаИзменения);
	РезультатФункции.Вставить("Исполнитель",					 Исполнитель);
	РезультатФункции.Вставить("Номер",							 Номер);
	РезультатФункции.Вставить("Организация",					 Организация);
	РезультатФункции.Вставить("ОсновнаяВалюта",					 ОсновнаяВалюта);
	РезультатФункции.Вставить("ПериодОтчета",					 ПериодОтчета);
	РезультатФункции.Вставить("ПериодОтчетаОкончание",			 ПериодОкончания);
	РезультатФункции.Вставить("УправлениеПериодом",				 УправлениеПериодом);
	РезультатФункции.Вставить("ПоследнийРедактировавший",		 ПоследнийРедактировавший);
	РезультатФункции.Вставить("Проверяющий",					 Проверяющий);
	РезультатФункции.Вставить("Проект",							 Проект);
	РезультатФункции.Вставить("Сценарий",						 Сценарий);
	
	// Закладка Настройки отчета.
	РезультатФункции.Вставить("БланкИмпорта",					 БланкИмпорта);
	РезультатФункции.Вставить("ВыбраннаяВалюта",				 ВыбраннаяВалюта);
	РезультатФункции.Вставить("ВыводитьДополнительныйЯзык1",	 ВыводитьДополнительныйЯзык1);
	РезультатФункции.Вставить("ВыводитьДополнительныйЯзык2",	 ВыводитьДополнительныйЯзык2);
	РезультатФункции.Вставить("ЕдиницаИзмерения",				 ЕдиницаИзмерения);
	РезультатФункции.Вставить("ИспользуемаяИБ",					 ИспользуемаяИБ);
	РезультатФункции.Вставить("НомерОсновногоЯзыка",			 НомерОсновногоЯзыка);
	РезультатФункции.Вставить("ПравилоОбработки",				 ПравилоОбработки);
	РезультатФункции.Вставить("ПравилоПроверки",				 ПравилоПроверки);
	РезультатФункции.Вставить("СпособВыводаФорма",			 	 СпособВыводаФорма);
	РезультатФункции.Вставить("ТекущаяТочность",				 ТекущаяТочность);
	РезультатФункции.Вставить("ИзмененКлючевойРеквизит",		 ИзмененКлючевойРеквизит);

	// Закладка Дополнительные реквизиты.
	СтруктураАдресаДополнительныеРеквизиты = ПоместитьДополнительныеРеквизиты();
	РезультатФункции.Вставить("АдресДополнительныеВалюты",		 СтруктураАдресаДополнительныеРеквизиты.АдресДополнительныеВалюты);
	РезультатФункции.Вставить("АдресПараметрыОтчета",			 СтруктураАдресаДополнительныеРеквизиты.АдресПараметрыОтчета);
	РезультатФункции.Вставить("АдресЭкземплярыИсточники",		 СтруктураАдресаДополнительныеРеквизиты.АдресЭкземплярыИсточники);
	// Дополнительная информация.
	РезультатФункции.Вставить("СпособВывода",					 СпособВывода);
	Если ЭтоБланкСводнойТаблицы(ШаблонОтчета) Тогда
		РезультатФункции.Вставить("СпособВывода",					 "СводнаяТаблица");
	КонецЕсли;
	РезультатФункции.Вставить("ШаблонОтчета",					 ШаблонОтчета);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Считаем полученные значения из параметров.
	СчитатьИсходныеДанныеИзВременногоХранилища(Параметры.АдресДанныхОтчета);
	// Заполним элементы формы.
	ЗаполнитьСписокСпособовОтображения();
	ЗаполнитьСписокВыбораВалютСервер();
	РазрешеноИзменятьНомер = Ложь;
	// Отобразим реквизиты.
	УправлениеДоступностью();
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ВидАналитики = ВидОтчета["ВидАналитики"+Инд];			
		Если Не ПустаяСтрока(ВидАналитики) Тогда	
			ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;	
		КонецЕсли;
		
	КонецЦикла;

	ТипБД=ПравилоОбработки.ТипБД;
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
	
	УстановитьПараметрыПоКлючевымРеквизитам();
	
	ПроверятьПраваБланк=Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУОПНажатие(Элемент)
	
	Если ЗначениеЗАполнено(УправлениеПериодом) Тогда
		 ПоказатьЗначение(,УправлениеПериодом);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитики(Элемент, НомерАналитики, СтандартнаяОбработка)
	
	ОграничениеТипа = ЭтаФорма["ТипАналитики" + Строка(НомерАналитики)];
	
	Если ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", ЭтаФорма["ВидАналитики" + Строка(НомерАналитики)]);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		ТекФорма = ПолучитьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", СтруктураПараметров, Элемент);
		ТекФорма.Открыть();
		СтандартнаяОбработка = Ложь;
	Иначе
		Элемент.ОграничениеТипа = ОграничениеТипа;
		Значение = ЭтаФорма["Аналитика"+Строка(НомерАналитики)];
		ЭтаФорма["Аналитика"+Строка(НомерАналитики)] = Элемент.ОграничениеТипа.ПривестиЗначение(Значение);
	КонецЕсли;
	
	Элемент.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыводаФормаПриИзменении(Элемент)
	Если ТипЗнч(СпособВыводаФорма)=Тип("Строка") Тогда
		СпособВывода = СпособВыводаФорма;
	Иначе
		СпособВывода = "Бланк";
		ШаблонОтчета = СпособВыводаФорма;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерОсновногоЯзыкаПриИзменении(Элемент)
	
	УстановитьДоступностьДопЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДопЯзыков()
	
	// Установим доступность дополнителых языков, исходя из выбранного основного.
	Элементы.ВыводитьДополнительныйЯзык1.Доступность = Истина;
	Элементы.ВыводитьДополнительныйЯзык2.Доступность = Истина;
	Если НомерОсновногоЯзыка > 0 Тогда
		ЭтаФорма["ВыводитьДополнительныйЯзык" + НомерОсновногоЯзыка] = Ложь;
		Элементы["ВыводитьДополнительныйЯзык" + НомерОсновногоЯзыка].Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	ЭтаФорма.Модифицированность = Ложь;
	СтруктураЗакрытия = СформироватьСтруктуруЗакрытия();
	Оповестить("ИзменитьНастройкиЭкземпляраОтчета", СтруктураЗакрытия, ЭтаФорма.ВладелецФормы);
КонецПроцедуры

&НаКлиенте
Процедура Аналитика1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаВыбораАналитики(Элемент, 1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Аналитика2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаВыбораАналитики(Элемент, 2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Аналитика3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаВыбораАналитики(Элемент, 3, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Аналитика4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаВыбораАналитики(Элемент, 4, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Аналитика5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаВыбораАналитики(Элемент, 5, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеВалютыПередУдалением(Элемент, Отказ)
	ТекущаяСтрока = Элементы.ДополнительныеВалюты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Пометка Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяВалютаПриИзменении(Элемент)
	ЗаполнитьСписокВыбораВалютСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеВалютыПриИзменении(Элемент)
	ДопВалюты = Новый Соответствие;
	ДопВалюты.Вставить(ОсновнаяВалюта, Истина);
	
	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Сценарий, ПериодОтчета, Организация, ВидОтчета);
	
	Для Каждого СтрокаВалюта ИЗ ДополнительныеВалюты Цикл
		
		Если СтрокаВалюта.Валюта = ОсновнаяВалюта Тогда			
			ДополнительныеВалюты.Удалить(СтрокаВалюта);			
		ИначеЕсли ДопВалюты.Получить(СтрокаВалюта.Валюта) <> Неопределено Тогда			
			СтрокаВалюта.Валюта = Неопределено;// очистим дубль валюты
		Иначе
			ДопВалюты.Вставить(СтрокаВалюта.Валюта, Истина);
		КонецЕсли;
		
		СтрокаВалюта.Пометка = (СтрокаВалюта.Валюта <> Неопределено) И (СтруктураВалют <> Неопределено) 
						И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрокаВалюта.Валюта) <> Неопределено);
		
	КонецЦикла;
	
	ЗаполнитьСписокВыбораВалютСервер();		
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПрименение_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        ЭтаФорма.Модифицированность = Ложь;
        ЭтаФорма.Закрыть(Неопределено);
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ТекстПроверкаПравБланк=ПроверитьВозможностьОтображенияПраваБланк();
		
		Если НЕ ПустаяСтрока(ТекстПроверкаПравБланк) Тогда
			
			Сообщить(ТекстПроверкаПравБланк, СтатусСообщения.Внимание);
			Возврат;	
			
		КонецЕсли;
		
        ЭтаФорма.Модифицированность = Ложь;
        СтруктураЗакрытия = СформироватьСтруктуруЗакрытия();
        ЭтаФорма.Закрыть(СтруктураЗакрытия);
    ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
    	// Пользователь отказался закрывать окно. Ничего не делаем.
    Иначе       
    	ТекстСообщения = НСтр("ru = 'Выбран неизвестный вариант. Закрытие отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'Применить произведённые изменения?'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеПрименение_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		// Изменений произведено не было. Закрываем форму без подтверждения.
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьВозможностьОтображенияПраваБланк()
	
	Если НЕ ПроверятьПраваБланк Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат ПолныеПраваУХ.ПроверитьВозможностьОтображенияПоБланкуОтчета(ШаблонОтчета,Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		
	КонецЕсли;
	
КонецФункции // ПроверитьВозможностьОтображенияПраваБланк()

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	
	ТекстПроверкаПравБланк=ПроверитьВозможностьОтображенияПраваБланк();
	
	Если НЕ ПустаяСтрока(ТекстПроверкаПравБланк) Тогда
		
		Сообщить(ТекстПроверкаПравБланк, СтатусСообщения.Внимание);
		Возврат;	
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Ложь;
	СтруктураЗакрытия = СформироватьСтруктуруЗакрытия();
	ЭтаФорма.Закрыть(СтруктураЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        // Пользователь согласился оставить отредактированный номер.
    	РазрешеноИзменятьНомер = Истина;
    ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда    
    	// Пользователь отменил редактирование номер.
    	Номер = ПервоначальныйНомер;
    ИначеЕсли Результат = КодВозвратаДиалога.Таймаут Тогда    
		// Форма закрылась, возвращаем первоначальный вариант.
		Номер = ПервоначальныйНомер;
    Иначе       
    	// Неизвестный вариант.
    	ТекстСообщения = НСтр("ru = 'Выбран неизвестный вариант %Ответ%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответ%", Строка(Результат));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	// Спросим подтверждение у пользователя на изменение номера документа.
	Если НЕ РазрешеноИзменятьНомер Тогда
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'Номер заполняется при записи автоматически. Сохранить введённое значение?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("НомерПриИзмененииЗавершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		// Пользователь дал согласие ранее. Не спрашиваем снова.
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоБланкСводнойТаблицы(ШаблонОтчета)
	
	Возврат  (ЗначениеЗаполнено(ШаблонОтчета) И ШаблонОтчета.РежимБланка = 1); 
		
КонецФункции	

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит = Истина;
	ОбновитьРеквизитыПоРегламенту();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ИзмененКлючевойРеквизит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика1ПриИзменении(Элемент)
	ИзмененКлючевойРеквизит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика2ПриИзменении(Элемент)
	ИзмененКлючевойРеквизит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика3ПриИзменении(Элемент)
	ИзмененКлючевойРеквизит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика4ПриИзменении(Элемент)
	ИзмененКлючевойРеквизит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика5ПриИзменении(Элемент)
	ИзмененКлючевойРеквизит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика6ПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВыбораАналитики(Элемент, 6, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	ПравилоОбработкиПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ПравилоОбработкиПриИзмененииНаСервере()
	
	ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит = Истина;
	Модифицированность = Истина;
	
	Регламент 		= ПредопределенноеЗначение("Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка");
	Организация 	= ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	
	УстановитьПараметрыПоКлючевымРеквизитам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоКлючевымРеквизитам()
	
	УправлениеПериодом 								= Документы.УправлениеПериодомСценария.ПустаяСсылка();
	Элементы.ГруппаМногопериодныйРежим.Доступность  = Ложь;
	Элементы.Периодичность.ТолькоПросмотр  			= Истина;
    Элементы.Регламент.ТолькоПросмотр  				= Истина;
	Элементы.Организация.ТолькоПросмотр             = Истина;
	Элементы.ДекорацияУОП.Картинка          		= БиблиотекаКартинок.Пустая;
	Элементы.ДекорацияУОП.Подсказка                 = "";
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
	
	НовыйМассив = Новый Массив;
	
	Для Каждого Стр Из РегламентыПериоды Цикл	
		НовыйМассив.Добавить(Стр.Периодичность);			
	КонецЦикла;	 
	
	Если НовыйМассив.Количество()>0 Тогда
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Периодичность.ПараметрыВыбора = НовыеПараметры;	
		
		Если МассивЗнченийПараметров.Найти(Периодичность) = Неопределено Тогда
			Периодичность  = Перечисления.Периодичность.ПустаяСсылка();
		КонецЕсли;	
		
		Если МассивЗнченийПараметров.Количество() = 1 Тогда
			 Периодичность = МассивЗнченийПараметров[0];
		КонецЕсли;	
		
	Иначе	
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
				
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Периодичность.ПараметрыВыбора = НовыеПараметры;	
		
	КонецЕсли;
	
	Элементы.Периодичность.ТолькоПросмотр  			= Ложь;

	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ГруппаМногопериодныйРежим.Доступность  = Истина;

	Если Не ЗначениеЗаполнено(ПериодОтчета) Тогда
		Возврат;
	КонецЕсли;

	// По выбранному сценарию, и периоду пытаемся определить открытый УОП
	УправлениеПериодом 								= Документы.УправлениеПериодомСценария.ПустаяСсылка();
	
	УправлениеПериодом = УправлениеРабочимиПроцессамиУХ.ПолучитьДокументУправленияПериодомСценария(Сценарий,ПериодОтчета);

	//Если нашли УОП, то выравниваем период по нему, и заполняем регламент и доступные организации
	Если ЗначениеЗаполнено(УправлениеПериодом) Тогда	
		Элементы.ДекорацияУОП.Картинка          		= БиблиотекаКартинок.ОсвободитьФайл;
		Элементы.ДекорацияУОП.Подсказка                 = НСтр("ru = 'Перейти к управлению периодом'");
		Если (НЕ ПериодОкончания 	= УправлениеПериодом.ПериодСценарияОкончание) ИЛИ (НЕ ПериодОтчета =УправлениеПериодом.ПериодСценария)  Тогда
			ТекстСообщения = НСтр("ru = ' Выбранный период скорректирован по уже открытому горизонту: %Период1% - %Период2%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период1%", Строка(УправлениеПериодом.ПериодСценария));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период2%", Строка(УправлениеПериодом.ПериодСценарияОкончание));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
		КонецЕсли;	
		ПериодОтчета  				= УправлениеПериодом.ПериодСценария;
		ПериодОкончания     		= УправлениеПериодом.ПериодСценарияОкончание;
		Регламент                   = УправлениеПериодом.ВерсияОрганизационнойСтруктуры;
		Элементы.Организация.ТолькоПросмотр = Ложь;
		ОбработатьИзменениеРегламента();
	Иначе
		//По периоду и сценарию пытаемся  вычислить регламент по умолчанию.
		
		Элементы.ДекорацияУОП.Картинка          		= БиблиотекаКартинок.ЗанятьФайл;
        Элементы.ДекорацияУОП.Подсказка                 = НСтр("ru = 'Период не открыт'");
		
		Элементы.Регламент.ТолькоПросмотр  				= Ложь;
		ТекущийРегламент  = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		ДатаСценария      = ПериодОтчета.ДатаНачала;
		РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
		РегламентыПериоды.Сортировать("ДействуетС");
		
		НовыйМассив = Новый Массив;
		
		Для Каждого Стр Из РегламентыПериоды Цикл
			
			Если Стр.Периодичность = Периодичность Тогда
				НовыйМассив.Добавить(Стр.Регламент);
				Если ДатаСценария>=Стр.ДействуетС Тогда	
					ТекущийРегламент = Стр.Регламент;
				КонецЕсли;		
			КонецЕсли;
			
		КонецЦикла;	 
		
		Если НовыйМассив.Количество()>0 Тогда
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Регламент.ПараметрыВыбора = НовыеПараметры;	
		Иначе	
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Регламент.ПараметрыВыбора = НовыеПараметры;	
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ТекущийРегламент) Тогда
			
			Регламент  =  ТекущийРегламент;
			Элементы.Организация.ТолькоПросмотр = Ложь;
			
			Если  ЗначениеЗаполнено(ТекущийРегламент.КоличествоПериодов)  Тогда	
				ПериодОкончанияПоРегламенту     = ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, ТекущийРегламент.КоличествоПериодов-1);
				Если НЕ ПериодОкончания = ПериодОкончанияПоРегламенту  Тогда
					ТекстСообщения = НСтр("ru = ' период окончания скорректирован по количеству периодов регламента(%КоличествоПериодов%): %Период1%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоПериодов%", Строка(ТекущийРегламент.КоличествоПериодов));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период1%", Строка(ПериодОкончанияПоРегламенту));

					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
					ПериодОкончания = ПериодОкончанияПоРегламенту;
				КонецЕсли;
			КонецЕсли;	
	
			ОбработатьИзменениеРегламента();

		КонецЕсли;	
					
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРегламента()
		
	Если ЗначениеЗаполнено(Регламент) Тогда	
							
		    Элементы.Организация.ТолькоПросмотр = Ложь;
		
			СписокДоступныхОрганизаций = Новый Массив;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
			|ИЗ
			|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
			|ГДЕ
			|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Регламент);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл	
				СписокДоступныхОрганизаций.Добавить(Выборка.ОрганизационнаяЕдиница);	
			КонецЦикла;
			
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(СписокДоступныхОрганизаций);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Организация.ПараметрыВыбора = НовыеПараметры;
			
			Если  СписокДоступныхОрганизаций.Найти(Организация) = Неопределено Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;	
			
			Если Регламент.РежимМногопериодныхУОП Тогда
				
				Если ШаблонОтчета.РежимБланка=0 Тогда	
					
					ШаблонОтчета = Справочники.БланкиОтчетов.ПустаяСсылка();
					СпособВыводаФорма 	= Неопределено;
					СпособВывода		= "";
					
				КонецЕсли;
				
			Иначе
				
				Если ШаблонОтчета.РежимБланка>0 Тогда	
					
					ШаблонОтчета = Справочники.БланкиОтчетов.ПустаяСсылка();
					СпособВыводаФорма 	= Неопределено;
					СпособВывода		= "";
					
				КонецЕсли;
				
			КонецЕсли;			
		
		ЗаполнитьСписокСпособовОтображения();
		ОбновитьРеквизитыПоРегламенту();
		
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоРегламенту()
				
	СтруктураРеквизитов = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета, Сценарий, Организация, ПериодОтчета);	
	
	Если Не ЗначениеЗаполнено(ШаблонОтчета) Тогда
		Если  Регламент.РежимМногопериодныхУОП  И  СтруктураРеквизитов.Свойство("БланкДляОтображенияМногопериодный") Тогда 
			ШаблонОтчета = СтруктураРеквизитов.БланкДляОтображенияМногопериодный;
			СпособВывода 		= ШаблонОтчета;	
			СпособВыводаФорма   = ШаблонОтчета;
		ИначеЕсли  СтруктураРеквизитов.Свойство("ШаблонОтчета") Тогда
			ШаблонОтчета = СтруктураРеквизитов.ШаблонОтчета;
			СпособВывода 		= ШаблонОтчета;	
			СпособВыводаФорма   = ШаблонОтчета;
		КонецЕсли;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ПравилоОбработки) И СтруктураРеквизитов.Свойство("ПравилоОбработки")  Тогда
		ПравилоОбработки = СтруктураРеквизитов.ПравилоОбработки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПравилоПроверки) И СтруктураРеквизитов.Свойство("ПравилоПроверки") Тогда
		ПравилоПроверки = СтруктураРеквизитов.ПравилоПроверки;
	КонецЕсли;

	ПравилоОбработкиПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИспользуемаяИБ) Тогда
		СтруктураРеквизитов.Свойство("ВИБ", ИспользуемаяИБ);
	КонецЕсли;
	
	СтруктураВалют = УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(Регламент, ВидОтчета, Организация);
	
	ДополнительныеВалютыЗначение = РеквизитФормыВЗначение("ДополнительныеВалюты");
	ДополнительныеВалютыЗначение.Очистить();
		
	Если ТипЗнч(СтруктураВалют) = Тип("Структура") Или ТипЗнч(СтруктураВалют) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ЗначениеЗаполнено(СтруктураВалют.ОсновнаяВалюта) И (ОсновнаяВалюта <> СтруктураВалют.ОсновнаяВалюта) Тогда			
			
			Если Не ОсновнаяВалюта.Пустая() 
				И (ДополнительныеВалютыЗначение.Найти(ОсновнаяВалюта, "Валюта") = Неопределено)      
				И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(ОсновнаяВалюта) = Неопределено) Тогда
				
				НоваяСтрокаДопВалют = ДополнительныеВалютыЗначение.Добавить();
				НоваяСтрокаДопВалют.Валюта = ОсновнаяВалюта;		// основная валюта отчета-источника переносится в доп.валюты
				НоваяСтрокаДопВалют.Пометка = Истина;
			КонецЕсли;
			
			ОсновнаяВалюта = СтруктураВалют.ОсновнаяВалюта;
			
		КонецЕсли;
		
		Для Каждого ДопВалюта Из СтруктураВалют.ДополнительныеВалюты Цикл			
			
			СтрокаВалюта = ДополнительныеВалютыЗначение.Найти(ДопВалюта.Значение, "Валюта");
			
			Если СтрокаВалюта = Неопределено Тогда				
				НоваяСтрокаДопВалют = ДополнительныеВалютыЗначение.Добавить();
				НоваяСтрокаДопВалют.Валюта = ДопВалюта.Значение;
				НоваяСтрокаДопВалют.Пометка = Истина;
			Иначе 
				СтрокаВалюта.Пометка = Истина;	
			КонецЕсли;			
			
		КонецЦикла;
		
		ЭлементВалюта = ДополнительныеВалютыЗначение.Найти(ОсновнаяВалюта, "Валюта");
		Если ЭлементВалюта <> Неопределено Тогда
			ДополнительныеВалютыЗначение.Удалить(ЭлементВалюта);
		КонецЕсли;
						
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДополнительныеВалютыЗначение, "ДополнительныеВалюты");
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодОтчета, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодОкончания) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодОкончания, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит = Истина;
	Модифицированность = Истина;
	
	Регламент 		= ПредопределенноеЗначение("Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка");
	Организация 	= ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	
	ПериодичностьПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПериодичностьПриИзмененииСервер() 
	
	 Если ЗначениеЗаполнено(Периодичность) Тогда
		 Если ЗначениеЗаполнено(ПериодОтчета) И НЕ ПериодОтчета.Периодичность = Периодичность Тогда
			 ПериодОтчета      = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
			 ПериодОкончания   = ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка");
		 КонецЕсли;	 	 
	 КонецЕсли;
	 
	 УстановитьПараметрыПоКлючевымРеквизитам();
	 			
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаСПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит = Истина;
	Модифицированность = Истина;
	
	ПериодОкончания = ПериодОтчета;
	ОбновитьРеквизитыПоРегламенту();
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентПриИзменении(Элемент)
	
	ИзмененКлючевойРеквизит = Истина;
	Модифицированность = Истина;
	
	Элементы.Организация.Доступность = Истина;
	ОбработатьИзменениеРегламента();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
		
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		ИзмененКлючевойРеквизит = Истина;
		Модифицированность = Истина;
		
		ВыбраннаяПериодичность = Периодичность;
		
		РезультатДатаНачала 		= РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания 		= РезультатВыбора.ДатаОкончания;
		
		Если (ЗначениеЗаполнено(РезультатДатаНачала)) И (ЗначениеЗаполнено(РезультатДатаОкончания)) Тогда
			
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			
			ПериодПланированияОтборНачало		 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			ПериодПланированияОтборОкончание	 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);
			
			РассчитатьТекущийГоризонт(ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание);
						
		Иначе
			// Не изменяем периоды.
		КонецЕсли;
	ИначеЕсли РезультатВыбора = Неопределено Тогда	
		// Пользователь отказался. Не изменяем периоды.
	Иначе
		
		ИзмененКлючевойРеквизит = Истина;
		Модифицированность = Истина;
		
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьПараметрыПоКлючевымРеквизитам();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьТекущийГоризонт(ПериодПланированияОтборНачало, ПериодПланированияОтборОкончание) 
	
	ПериодОтчета  				= ПериодПланированияОтборНачало;
	ПериодОкончания     		= ПериодПланированияОтборОкончание;
	
	ОбновитьРеквизитыПоРегламенту();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаЗначениеПриИзменении(Элемент)
	
	Элементы.ПараметрыОтчета.ТекущиеДанные.ЗначениеСтрока = Строка(Элементы.ПараметрыОтчета.ТекущиеДанные.Значение);
	
КонецПроцедуры
