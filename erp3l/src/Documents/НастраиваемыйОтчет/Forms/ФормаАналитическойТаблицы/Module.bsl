
&НаКлиенте
Перем ТекЭкземплярОтчета;
&НаКлиенте
Перем СтруктураСтрока;
&НаКлиенте
Перем ДанныеЯчейкиСтар;
&НаСервере
Перем мКэшВычисляемыхПолей;
&НаКлиенте
Перем ЭтоРедактирование;
&НаСервере
Перем СтруктураТекущейОбласти;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область УниверсальныеПроцессыСогласование
	
	СтруктураСостояний = Новый Структура;
	УправлениеПроцессамиСогласованияУХ.ЗаполнитьСтруктуруСостояний(СтруктураСостояний);
	НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта();
	
	ДанныеСостояний = Новый Структура;
	УправлениеПроцессамиСогласованияУХ.ВернутьДанныеСостоянийЭкземпляраОтчета(Объект.Ссылка, ДанныеСостояний);
	СостояниеЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСостояний, "СостояниеЗаявки");
	НовоеСостояниеДоИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСостояний, "СостояниеЗаявки");
	
	Если ЗначениеЗаполнено(НовоеСостояниеДоИзменения) Тогда
		СостояниеСогласованияДоИзменения = НовоеСостояниеДоИзменения;
	КонецЕсли;

	#КонецОбласти
	
	ИспользоватьРасширенныйАлгоритмПересчетаПоказателей = РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет();
	ВерсияУправлениеХолдингом = ИдентификацияПродуктаУХКлиентСервер.ВерсияУправлениеХолдингом();
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		РабочийОбъект.мКопирование = Истина;
		РабочийОбъект.мКопируемыйДокумент = Параметры.ЗначениеКопирования;
		Копирование=Истина;
		мКопируемыйДокумент  = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	ТекВидОтчета=РабочийОбъект.ВидОтчета;
	ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(РабочийОбъект.ПравилоОбработки);
	
	ЗаполнитьСписокВыбораВалютСервер();
	
	ВыбраннаяВалюта=РабочийОбъект.ОсновнаяВалюта;	
	РабочийОбъект.УправляемыйРежим=Истина;
	
	ОбновитьВидимостьПанелиРаскрытияИДопЯзыков(РабочийОбъект);
	
	Если ЗначениеЗаполнено(РабочийОбъект.Ссылка) Тогда				
		Инициатор = РабочийОбъект.Исполнитель;
		Согласующий = РабочийОбъект.Проверяющий;
		
		ИспользуетсяМарщрутСогласования = Ложь;
		УправлениеПроцессамиСогласованияУХ.ОпределитьИспользованиеМаршрутаСогласования(Согласующий, ИспользуетсяМарщрутСогласования);
		
		Если ЗначениеЗаполнено(Параметры.мТекущаяВалюта) Тогда
			ВыбраннаяВалюта=Параметры.мТекущаяВалюта;
		КонецЕсли;
		
		РабочийОбъект.СпособВывода=Объект.СпособВывода;
		ТекущаяТочность=РабочийОбъект.УровеньТочности;
		
		Если ЗначениеЗаполнено(Объект.ПравилоОбработки) Тогда
						
		Иначе	
			Элементы.Редактирование.Пометка=Ложь;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Истина;	
		КонецЕсли;	
		
	Иначе	
		ИнициализацияНаКлиенте = Истина;
		
		РабочийОбъект.Дата = ТекущаяДата();
		РабочийОбъект.УстановитьНовыйНомер();
		РабочийОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		РабочийОбъект.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;	
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			РабочийОбъект.мКопирование = Истина;
			РабочийОбъект.мКопируемыйДокумент = Параметры.ЗначениеКопирования;
			Копирование=Истина;
		КонецЕсли;

		ПоместитьРабочийОбъект(РабочийОбъект);	
		
		АдресПараметровИниициализации = Параметры.АдресПараметровИниициализации;
		ИнициализироватьФормуНовогоСервер();
		
	КонецЕсли;
	#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
	#КонецОбласти	
	Элементы.ФормаРаботаСВерсиями.Доступность				= Объект.ВидОтчета.СохранятьИсториюИзменений;
	Элементы.ДействияФормыКорректировка.Доступность			= Элементы.ФормаРаботаСВерсиями.Доступность;
	
	СогласованиеЧерезРакурс = Ложь;
	УправлениеПроцессамиСогласованияУХ.СогласованиеЧерезРакурс(Объект.ВидОтчета, СогласованиеЧерезРакурс);
	Если СогласованиеЧерезРакурс Тогда	
		Элементы.ГруппаСтатусыСогласования.Видимость=Ложь;
		Элементы.ДекорацияРакурсы.Видимость=Истина;	
	КонецЕсли;

	МаксАналитикОтчета = РабочийОбъект.МаксАналитикОтчета;
	МаксАналитикПоказателя = РабочийОбъект.МаксАналитикПоказателя;
	
	// Получим данные по используемым аналитикам	
	Если ЗначениеЗаполнено(ТекВидОтчета) Тогда
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ТекВидОтчета.МетаДанные().Реквизиты.Найти("ВидАналитики" + Инд) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидАналитики = ТекВидОтчета["ВидАналитики"+Инд];
			
			Если Не ПустаяСтрока(ВидАналитики) Тогда	
				ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
				ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;				
				МаксАналитикОтчета=МаксАналитикОтчета+1;			
			КонецЕсли;		
		КонецЦикла;
		
		Элементы.СвернутьПоПроектам.Видимость				= ТекВидОтчета.РазделениеПоПроектам;
		Элементы.СвернутьПоОрганизациямПроекта.Видимость	= ТекВидОтчета.РазделениеПоПроектам;
		СохранятьИсториюИзменений							= ТекВидОтчета.СохранятьИсториюИзменений;		
	КонецЕсли;
	
	Заголовок = ВернутьЗаголовокФормы(Объект,ВыбраннаяВалюта);
		
	ВычислятьПриИзменении=Истина;
	
	Элементы.Вычислить.ПодчиненныеЭлементы.ДействияФормыВычислятьПриИзменении.Пометка=Истина;
	
	Элементы.ДействияФормыКорректировка.Пометка	= Ложь;
	Элементы.НеВноситьИзменения.Пометка			= Объект.НеВноситьИзменения;
	
	ЭтаФорма.КоманднаяПанель.Доступность=НЕ Объект.ПометкаУдаления;
	ЭтаФорма.Элементы.ГруппаРазрешитьРедактирование.Доступность=НЕ Объект.ПометкаУдаления;
	
	Элементы.ФормаОтобразитьПротокол.Видимость=ЕстьПротоколируемыеОшибки();
	
	ЭтоУправлениеХолдингом=ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Элементы.ГруппаЗаполнение.Видимость=ЭтоУправлениеХолдингом;
	Элементы.ФормаЗаполнитьБМ.Видимость=НЕ ЭтоУправлениеХолдингом;	
	
	тСтрокаАналитик = "";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		тСтрокаАналитик = тСтрокаАналитик + "Аналитика"+Инд+",";
	КонецЦикла;	
	
	оЛогИзмененныхДанных 			= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ЛогИзмененныхДанных  			= оЛогИзмененныхДанных.ТаблицаИзмененныхПоказателей.Выгрузить();	
	ЛогИзмененныхДанных.Индексы.Добавить("Сценарий,ПериодОтчета,Организация,Проект,АналитикаВалюта,"+тСтрокаАналитик+"ПоказательОтчета");
	логИзмененныхКомментариев  		= оЛогИзмененныхДанных.ТаблицаИзмененныхПоказателей.Выгрузить();
	логИзмененныхДанныхАдрес 		= ПоместитьВоВременноеХранилище(ЛогИзмененныхДанных,ЭтаФорма.УникальныйИдентификатор);
			
	логИзмененныхКомментариевАдрес 	= ПоместитьВоВременноеХранилище(логИзмененныхКомментариев,ЭтаФорма.УникальныйИдентификатор);
		
	Если ИспользуетсяМарщрутСогласования Тогда
		ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	КонецЕсли;
	
	ПроверитьВозможностьОтображенияВТекущемРежиме(РабочийОбъект);
	
	ЧислоДопАналитик = ПараметрыСеанса.ЧислоДопАналитик;
	
	ЭтоРедактирование = Ложь;
	СтруктураТекущейОбласти = Новый Структура("АвтоВысотаСтроки, АвтоОтметкаНезаполненного, АвтоОтступ, ВертикальноеПоложение, 
		|ВертикальноеПоложениеКартинки, Верх, ВесовойКоэффициентШирины, Видимость, ВыделятьОтрицательные, ВысотаСтроки, Гиперссылка,
		|ГоризонтальноеПоложение, ГоризонтальноеПоложениеКартинки, ГраницаСверху, ГраницаСлева, ГраницаСнизу, ГраницаСправа,
		|Заполнение, Защита, Имя, ИспользованиеРасшифровки, Лево, Маска, Низ, ОриентацияТекста, ОтметкаНезаполненного, Отступ,
		|Параметр, ПараметрКартинки, ПараметрРасшифровки, ПоВыделеннымКолонкам, ПоложениеТекстаОтносительноКартинки, Право, 
		|РазмерКартинки, РазмещениеТекста, РастягиватьПоГоризонтали, Расшифровка, РежимИзмененияРазмераКолонки, 
		|СодержитЗначение, ТипОбласти, Узор, Формат, ФорматРедактирования, ЦветРамки, ЦветТекста, ЦветУзора, ЦветФона, ШиринаКолонки,
		|Шрифт");
	
	ТекущаяОбластьАктивизацииТаблица = Новый ТаблицаЗначений();
	
	ТекущаяОбластьАктивизацииТаблица.Колонки.Добавить("ТекущееЗначение");
	ТекущаяОбластьАктивизацииТаблица.Колонки.Добавить("СмещениеХ");
	ТекущаяОбластьАктивизацииТаблица.Колонки.Добавить("СмещениеУ");
	
	Для Каждого ЭлементСтруктурыРеквизит Из СтруктураТекущейОбласти Цикл
		ТекущаяОбластьАктивизацииТаблица.Колонки.Добавить(ЭлементСтруктурыРеквизит.Ключ);
	КонецЦикла;
	
	АдресТекущейОбластиАктивизации = ПоместитьВоВременноеХранилище(ТекущаяОбластьАктивизацииТаблица, ЭтаФорма.УникальныйИдентификатор);
	
	СкопироватьПолеТабличногоДокументаНаСервере();
	
	Элементы.ГруппаТрассировкаРасчета.Видимость = Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	УправлятьДоступностьюЭлементовФормы();
	
	
	Если  ЗначениеЗаполнено(Объект.ШаблонОтчета)
		И НЕ ПолныеПраваУХ.ПроверитьВозможностьОтображенияПоБланкуОтчета(Объект.ШаблонОтчета,Объект.Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь")) = "" Тогда
		
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;	
		
	КонецЕсли;
	
	РасширениеПроцессыИСогласованиеУХ.ПриСозданииНаСервереОбъект(ЭтаФорма);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнициализацияНаКлиенте Тогда
		ИнициализироватьФормуНового();
	КонецЕсли;
	
	НастроитьДоступностьИОтобразитьСостояниеОтчета();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЧистоваяЗаписьДанных = Истина;
	
	Если ЗавершениеРаботы Тогда	
		Если Заблокирован ИЛИ Модифицированность Тогда		
			Отказ = Истина;
			Возврат;		
		КонецЕсли;	
	КонецЕсли;
	
	Если Заблокирован Тогда
		РазблокироватьЭкземплярОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.ФормаОтобразитьПротокол.Видимость=ЕстьПротоколируемыеОшибки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьЭкземплярОтчета(Истина,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбновитьОтображениеОтчета" И Источник=ЭтаФорма.УникальныйИдентификатор Тогда
		
		Модифицированность=Истина;
		
	ИначеЕсли ИмяСобытия = "ИзмененАдресОбъекта" И Источник=ЭтаФорма.УникальныйИдентификатор Тогда
		
		РабочийОбъектАдрес = Параметр;	
		
	ИначеЕсли ИмяСобытия = "ИзменитьПоказатели"  Тогда
		
		Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		Модифицированность=Истина;
		
	ИначеЕсли ИмяСобытия = "ПеренестиПоказатели"  Тогда
		
		Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	
		Модифицированность=Истина;
				
	ИначеЕсли ИмяСобытия="СвернутьВерсии" 
		И ТипЗнч(Параметр)=Тип("Структура") 
		И Параметр.ЭкземплярОтчета=Объект.Ссылка Тогда
		
		СвернутьДоВерсии(Параметр.ВерсияДляСвертки);
		
	ИначеЕсли ИмяСобытия="ПеревестиВРежимРедактирования" Тогда
		
		ДействияФормыРедактирование(Неопределено);
		
	ИначеЕсли ИмяСобытия="ИзмененоРаскрытиеВТелеОтчета" И Источник=ЭтаФорма.УникальныйИдентификатор Тогда	
		
		Модифицированность=Истина;	
					
	ИначеЕсли ИмяСобытия="ВыполненоОбратноеРаспределение"
		И Параметр.ВидОтчета=Объект.ВидОтчета
		И Параметр.Организация=Объект.Организация
		И Параметр.ПериодОтчета=Объект.ПериодОтчета
		И Параметр.Сценарий=Объект.Сценарий Тогда
		
		Если Параметр.СпособЗаполнения="АвтоматическиКонсолидация" Тогда	
			ЗаполнитьДокумент("АвтоматическиКонсолидация");	
		Иначе	
			ЗаполнитьДокумент("АвтоматическиСвернувПоПериоду",Объект.ПериодичностьСвертывания);	
		КонецЕсли;
		
		ЗаписатьИПродолжить(Неопределено);
		
	ИначеЕсли ИмяСобытия="ИзменилисьПоказатели" Тогда	
		РедактированиеРаскрытияЗавершение(Параметр,Параметр);			
	ИначеЕсли ИмяСобытия = "ОбъектСогласован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		Элементы.ФормаОтобразитьПротокол.Видимость = ЕстьПротоколируемыеОшибки();
		#КонецОбласти		
	ИначеЕсли (ИмяСобытия = "ИзменитьНастройкиЭкземпляраОтчета") И (Источник = ЭтаФорма) Тогда
		ВыставитьВыбранныеНастройкиИОбновитьФорму(Параметр);
		УстановитьЗаголовокФормы();
	ИначеЕсли (ИмяСобытия = "ЗаписанДокументКорректировки") И (Параметр = ЭтаФорма) Тогда
		ОбновитьСУчетомВерсий(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ЧистоваяЗаписьДанных = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
		
	Обработки.ЗаписьПоказателяСРасчетомЗависимых.ЧистоваяЗаписьДанных(Объект.ВидОтчета,Строка(ЭтаФорма.УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньТочностиПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

	ПолучитьЗначениеДелителяСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяВалютаПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура ИнициализироватьФормуНового() Экспорт
	
	ПеревестиВРежимРедактирования();
	
	УстановитьЗаголовокФормы();
	
	Элементы.Редактирование.Пометка=Заблокирован;
	
	Объект.ЧтениеНеактуальныхЗаписей = Истина;
	
	Элементы.ЧтениеНеактуальныхЗаписей.Пометка = Истина;	
	Элементы.ПолеТабличногоДокументаМакетГруппаКнопокРедактированияГР.Доступность=Заблокирован;
	Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;
	
	НастроитьДоступностьИОтобразитьСостояниеОтчета();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНовогоСервер() Экспорт
		
	Если ЗначениеЗаполнено(АдресПараметровИниициализации) Тогда 
		ВыбранноеЗначение = ПрочитатьКлючевыеРеквизиты();
		ЗаполнитьКлючевыеРеквизитыДокумента(ВыбранноеЗначение);		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзФайлаНаДиске_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ИмяЛиста    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ИмяЛиста", "");
		Пароль      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "Пароль", "");
		НуженПароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "НуженПароль", Ложь);
		СтруктураФайла = ДополнительныеПараметры.СтруктураФайла;
		
		ЗапуститьПроцессИмпорта(ДополнительныеПараметры.времФайлИмпорта, ДополнительныеПараметры.времДатаИзменения, НуженПароль, ИмяЛиста, Пароль);
		ПутьКФайлуADO="";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайл_Завершение(Результат, АдресХранилища, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ИмяФайла		 = Файл.Имя;
	ПолноеИмяФайла	 = Файл.ПолноеИмя;
	ДатаИзменения	 = Файл.ПолучитьУниверсальноеВремяИзменения();
	Размер			 = Файл.Размер();
	
	СчитатьФайлИзХранилища(ИмяФайла, ПолноеИмяФайла, ДатаИзменения, Размер, АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПерезаписьВерсии_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе	
		ФильтрФайловADO		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ФильтрФайловADO", Неопределено);
		ПервыйЭлементИмя	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ПервыйЭлементИмя", "");
		Файл				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Файл", Неопределено);
		АдресХранилища		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АдресХранилища", "");
		ЗаполнитьДокументADOИСчитатьФайл(ФильтрФайловADO, ПервыйЭлементИмя, Файл, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаНаДиске_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Перем АдресХранилища;	
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Количество() > 0 Тогда
			ПервыйЭлементИмя = ВыбранноеЗначение[0];
			СчитатьФайлВОтчет(ПервыйЭлементИмя, ДополнительныеПараметры.ФильтрФайловADO, АдресХранилища);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;		// Пользователь отказался.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВСправочникеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураФайл = Результат;
    
    Если СтруктураФайл = Неопределено Тогда
        
        Возврат;
        
    Иначе
        
        Объект.ФайлИмпорта   = СтруктураФайл.ХранимыйФайл;
        Объект.ДатаИзменения = СтруктураФайл.ВерсияХранимогоФайла;
        
        Если НЕ ПустаяСтрока(УправлениеОтчетамиУХ.ОпределитьРасширениеФайлаADO(Объект.ИспользуемаяИБ)) Тогда
            
            ПутьКФайлуADO=Объект.ФайлИмпорта;
            ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
            
        Иначе
            
            ЗапуститьПроцессИмпорта(Объект.ФайлИмпорта, 
									Объект.ДатаИзменения, 
									СтруктураФайл.НуженПароль, 
									СтруктураФайл.ИмяЛиста, 
									СтруктураФайл.Пароль);
            
        КонецЕсли;
        
    КонецЕсли;
    
    ПутьКФайлуADO="";

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеИзменений = "";
	
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ИзменитьПоказателиСервер(Область.Имя,Результат,ОписаниеИзменений);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'В выделенных ячейках есть значения,которые не могут быть изменены вручную'"),, ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРаскрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	

	Если Результат.Свойство("УидФормыВладельца") И Результат.УидФормыВладельца<>ЭтаФорма.УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес = Результат.логИзмененныхПоказателейАдрес;
	ЗаписатьИзмененныеПоказателиБланк(Истина,Ложь,,Ложь);
	ОбновитьМакет();
	ОбновитьВычисляемыеЯчейки();
	УстановитьРежимРедактированияДанных(Ложь);			 
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	тМакет = ЭтаФорма[ТекущийМакет];
	Область  = тМакет.ТекущаяОбласть;

	Область.Текст =  Результат;
	
	ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(ЭтаФорма.ТекущийЭлемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОтчета_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если (ВыбранноеЗначение = КодВозвратаДиалога.Отмена) ИЛИ (ВыбранноеЗначение = Неопределено) Тогда
		// Пользователь отказался. Ничего не делаем.
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)	= Тип("Структура") Тогда
		Если НЕ ПроверитьВозможностьВыводаВТекущейФорме(ВыбранноеЗначение) ИЛИ ВыбранноеЗначение.ИзмененКлючевойРеквизит Тогда	
			ОповещениеЗакрытьФорму = Новый ОписаниеОповещения("ВопросНоваяФормаЗавершение",ЭтаФорма,ВыбранноеЗначение);
			ПоказатьВопрос(ОповещениеЗакрытьФорму, НСтр("ru = 'Для продолжения работы с выбранными настройками необходимо заново открыть форму, продолжить?'"), РежимДиалогаВопрос.ДаНет);	
			Возврат;
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
		ВыставитьВыбранныеНастройкиИОбновитьФорму(ВыбранноеЗначение);
		УстановитьЗаголовокФормы();
	Иначе
		ТекстСообщения = НСтр("ru = 'Получено неизвестный вариант настроект отчета: %Значение%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(ВыбранноеЗначение));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросНоваяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Модифицированность = Истина;
		ВыставитьВыбранныеНастройкиОтчета(ДополнительныеПараметры);
		УстановитьЗаголовокФормы();
        ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыводаВТекущейФорме(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.СпособВывода = "Бланк" И НЕ ВыбранноеЗначение.ШаблонОтчета.РежимБланка = 2 Тогда
		 Возврат Ложь;
	ИначеЕсли СтрНайти(ВыбранноеЗначение.СпособВывода,"ДеревоЗначений")>0 Тогда	 
		 Возврат Ложь;
    ИначеЕсли НЕ ВыбранноеЗначение.ШаблонОтчета = Объект.ШаблонОтчета  Тогда	 	 
		  Возврат Ложь;		  	  
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПрочитатьКлючевыеРеквизиты()
	
	Возврат ПолучитьИзВременногоХранилища(АдресПараметровИниициализации);
	
КонецФункции

&НаКлиенте
Процедура ВыборСпособаЗаполнения_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранноеЗначение <> КодВозвратаДиалога.Отмена) И (ВыбранноеЗначение <> Неопределено) Тогда
        ВыбранныйСпособ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "СпособЗаполнения", ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.ПустаяСсылка"));
        Если ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки") Тогда
        	// Изменим реквизиты Правило заполнения, Правило проверки и Используемая ИБ.
        	Объект.ИспользуемаяИБ	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ИспользуемаяИБ", ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка"));
        	Объект.ПравилоОбработки	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ПравилоОбработки", ПредопределенноеЗначение("Справочник.ПравилаОбработки.ПустаяСсылка"));
        	Объект.ПравилоПроверки	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ПравилоПроверки", ПредопределенноеЗначение("Справочник.ПравилаПроверки.ПустаяСсылка"));
        	// Заполним отчет по установленным настройкам.
        	ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиКонсолидация") Тогда        	
        	ЗаполнитьДокумент("АвтоматическиКонсолидация");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам") Тогда        	
        	ЗаполнитьДокумент("АвтоматическиСвернувПоАналитикам");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду") Тогда        	
        	ПериодичностьСвертки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "ПериодичностьСвертки", ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка"));
			Если ЗначениеЗаполнено(ПериодичностьСвертки) Тогда
				КэшПериодичностьСвертки = ПериодичностьСвертки;
				ЗаполнитьДокумент("АвтоматическиСвернувПоПериоду", ПериодичностьСвертки);
			Иначе
				ТекстСообщения = НСтр("ru = 'Периодичность не выбрана. Заполнение отчета отменено.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиСвернувПоПроектам") Тогда        		
			ЗаполнитьДокумент("АвтоматическиСвернувПоПроектам");
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиЭлиминация") Тогда        		
			ЗаполнитьДокумент("АвтоматическиЭлиминация");
        ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.Импорт") Тогда        	
			Объект.БланкИмпорта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыбранноеЗначение, "БланкИмпорта", ПредопределенноеЗначение("Справочник.БланкиОтчетов.ПустаяСсылка"));
			ОчиститьДокумент(Ложь);
			ОбработатьИмпортФайла(ВыбранноеЗначение);
		ИначеЕсли НЕ ЗначениеЗаполнено(ВыбранныйСпособ) Тогда
        	ТекстСообщения = НСтр("ru = 'Не удалось определи способ заполнения отчета. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
        Иначе
        	ТекстСообщения = НСтр("ru = 'Выбран неизвестный способ заполнения: %СпособЗаполнения%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособЗаполнения%", Строка(ВыбранныйСпособ));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		ПоказатьПротоколПриНеобходимости();
		
    Иначе    
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколПриНеобходимости()
	
	Если ЕстьПротоколируемыеОшибки() Тогда		
		ОтобразитьПротокол(Неопределено);	
	КонецЕсли;	
	
КонецПроцедуры // ПоказатьПротоколПриНеобходимости() 

&НаКлиенте
Процедура Подключаемый_ДействияФормыСвернутьПоПериодуЗавершение(Значение, ДополнительныеПараметры) Экспорт
    
    ЗначениеВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ЗначениеВыбора, Значение);
    
    РезультатВыбора = (Значение <> Неопределено);
    Если НЕ (РезультатВыбора И ЗначениеЗаполнено(ЗначениеВыбора)) Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДокумент("АвтоматическиСвернувПоПериоду", ЗначениеВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
        ОчиститьДокумент();        
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВыйтиИзРежимаРедактированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	ТекПометка=Элементы.Редактирование.Пометка;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
		ЗаписатьИзмененныеПоказатели(); 		
		ТекПометка=НЕ ТекПометка;
		Заблокирован=Ложь;		
		РазблокироватьДанныеФормыДляРедактирования();	
	Иначе		
		ОбновитьСУчетомВерсийСервер();
		ТекПометка=НЕ ТекПометка;
		Заблокирован=Ложь;		
		РазблокироватьДанныеФормыДляРедактирования();	
	КонецЕсли;

	Элементы.Редактирование.Пометка=ТекПометка;
	Элементы.ГруппаРазрешитьРедактирование.Видимость = Не ТекПометка;	
	Элементы.ПанельКомандыТекущегоОтображения.Видимость = ТекПометка;	
		
	Элементы.Очистить.Доступность = ТекПометка;
	
	УправлятьДоступностьюЭлементовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Попытка
            Записать();
        Исключение
            Возврат;
        КонецПопытки;
    КонецЕсли;
    
    ВызватьОтчетСценарныйАнализ(,Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделиованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Попытка
            Записать();
        Исключение
            Возврат;
        КонецПопытки;
    КонецЕсли;
    
    ВызватьОтчетСценарныйАнализ(,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПроверитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
		ЗаписатьИПродолжить(Неопределено);        
		РезультатПроверки = ДействияФормыПроверитьСервер();
		
		Если РезультатПроверки.СтатусПроверки Тогда
			Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
		Иначе	
			Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДействияФормыПроверитьСПротоколомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
		ЗаписатьИПродолжить(Неопределено);        
		
		РезультатПроверки = ДействияФормыПроверитьСервер();
		
		Если РезультатПроверки.СтатусПроверки Тогда
			Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
		Иначе	
			Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТабличныйДокумент",РезультатПроверки.Протокол);
		СтруктураПараметров.Вставить("Документ",Объект.Ссылка);
		
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.КонтрольныеСоотношенияУправляемая",СтруктураПараметров,ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияИзКонтекстногоМенюБланк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		Если  Результат.Значение = "РасшифроватьПоказатель" Тогда
			РасшифроватьПоказатель();	
		ИначеЕсли Результат.Значение = "ОтобразитьРаскрытие" Тогда	
			ОтобразитьРаскрытие();
		ИначеЕсли Результат.Значение = "ОтобразитьРаскрытиеДиаграмма" Тогда	
			ОтобразитьРаскрытиеДиаграмма();
		ИначеЕсли Результат.Значение = "РасшифроватьПоказательДиаграмма" Тогда	
			РасшифроватьПоказательДиаграмма();
		ИначеЕсли Результат.Значение = "СкопироватьДанныеПоСтроке" Тогда	
			СкопироватьДанныеПоСтроке(Неопределено);
		ИначеЕсли Результат.Значение = "СкопироватьДанныеПоКолонке" Тогда	
			СкопироватьДанныеПоКолонке(Неопределено);
		ИначеЕсли Результат.Значение = "ОчиститьДиапазон" Тогда	
			ОчиститьДиапазон(Неопределено);
		ИначеЕсли Результат.Значение = "КомментироватьПоказатель" Тогда	
			КомментироватьПоказатель(Неопределено);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОбщихКомандЭкземпляраОтчета

&НаКлиенте
Процедура ЗаполнитьПрочимСпособом(Команда)
	
	ВерсияРегламента = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(Объект.Сценарий, Объект.ПериодОтчета);
	Если ЗначениеЗаполнено(КэшПериодичностьСвертки) Тогда
		НоваяПериодичностьСвертки = КэшПериодичностьСвертки;
	Иначе
		НоваяПериодичностьСвертки = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка");
	КонецЕсли;
	Если ЗначениеЗаполнено(КэшПутьКФайлуИмпорта) Тогда
		НовыйПутьКФайлуИмпорта = КэшПутьКФайлуИмпорта;
	Иначе
		НовыйПутьКФайлуИмпорта = "";
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВерсияРегламента",		 	ВерсияРегламента);
	СтруктураПараметров.Вставить("ВидОтчета",				 	Объект.ВидОтчета);
	СтруктураПараметров.Вставить("ТипБД",				 		ТипБД);
	СтруктураПараметров.Вставить("ИспользуемаяИБ",			 	Объект.ИспользуемаяИБ);
	СтруктураПараметров.Вставить("Организация",				 	Объект.Организация);
	СтруктураПараметров.Вставить("ПериодОтчета",			 	Объект.ПериодОтчета);
	СтруктураПараметров.Вставить("ПериодичностьСвертки",	 	НоваяПериодичностьСвертки);
	СтруктураПараметров.Вставить("ПравилоОбработки",		 	Объект.ПравилоОбработки);	
	СтруктураПараметров.Вставить("ПравилоПроверки",			 	Объект.ПравилоПроверки);	
	СтруктураПараметров.Вставить("ПутьКФайлу",				 	НовыйПутьКФайлуИмпорта);	
	СтруктураПараметров.Вставить("СпособЗаполнения",		 	Объект.СпособФормированияОтчета);
	СтруктураПараметров.Вставить("Сценарий",				 	Объект.Сценарий);
	СтруктураПараметров.Вставить("ФайлИмпорта",				 	Объект.ФайлИмпорта);
	СтруктураПараметров.Вставить("БланкИмпорта",				Объект.БланкИмпорта);
	СтруктураПараметров.Вставить("РежимМногопериодногоБланка",	ИСТИНА);

	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыборСпособаЗаполнения_Завершение", ЭтотОбъект);
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ВыборСпособаЗаполнения", СтруктураПараметров, , , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	СтруктураПараметров = Новый Структура;
	АдресДанныхНастроек = ПолучитьАдресДанныхОтчета();
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкиОтчета_Завершение", ЭтотОбъект);
	СтруктураПараметров.Вставить("АдресДанныхОтчета", АдресДанныхНастроек);
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРедактированияНастроекОтчета", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	ЗаполнитьДокумент();
	ПоказатьПротоколПриНеобходимости();
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВычислятьПриИзменении(Команда)

	ВычислятьПриИзменении=НЕ ВычислятьПриИзменении;	
	Элементы.Вычислить.ПодчиненныеЭлементы.ДействияФормыВычислятьПриИзменении.Пометка=ВычислятьПриИзменении;
			
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВычислитьСейчас(Команда)
		
	ОбновитьМакет();
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыРедактирование(Команда)
	
	ТекПометка=Элементы.Редактирование.Пометка;
	
	Если НЕ ТекПометка Тогда	
		ПеревестиВРежимРедактирования();	
	Иначе	
		Если ПроверитьНаличиеИзменений() Тогда
			Оповещение = Новый ОписаниеОповещения("ДействияФормыВыйтиИзРежимаРедактированияЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Записать изменения?'"), РежимДиалогаВопрос.ДаНет);	
		Иначе	
			ЗаписатьИзмененныеПоказатели(); 		
			ТекПометка=НЕ ТекПометка;
			Заблокирован=Ложь;		
			РазблокироватьДанныеФормыДляРедактирования();
		КонецЕсли;	
	КонецЕсли;
		
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
	
	Элементы.Редактирование.Пометка						=	ТекПометка;
	Элементы.ГруппаРазрешитьРедактирование.Видимость 	= Не ТекПометка;			 
	Элементы.ПанельКомандыТекущегоОтображения.Видимость = ТекПометка;		                                                                     
	Элементы.Очистить.Доступность 						= ТекПометка;
	
	УправлятьДоступностьюЭлементовФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыОчистить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДействияФормыОчиститьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'После выполнения операции будут очищены все показатели отчета. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСУчетомВерсий(Команда)
	
	Для Каждого СтрБланк Из КэшБланков Цикл
		СтрБланк.Выведен = Ложь;
	КонецЦикла;	
	
	ТекущаяСтраницаИмя = Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(ТекущаяСтраницаИмя);
	ВывестиБланки(МассивСтраниц);

	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
			
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыЧтениеНеактуальныхЗаписей(Команда)
	
	Объект.ЧтениеНеактуальныхЗаписей = Не Объект.ЧтениеНеактуальныхЗаписей;
	Элементы.ЧтениеНеактуальныхЗаписей.Пометка = Объект.ЧтениеНеактуальныхЗаписей;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыНеВноситьИзменения(Команда)
	
	Объект.НеВноситьИзменения=Не Объект.НеВноситьИзменения;	
	Элементы.НеВноситьИзменения.Пометка=Объект.НеВноситьИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСВерсиями(Команда)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭкземплярОтчета", Объект.Ссылка);
		СтруктураПараметров.Вставить("МногопериодныйРежим", Истина);
		СтруктураПараметров.Вставить("ТекущийБланк", ЭтаФорма[ТекущийОбъектАБ].Бланк);		
		СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);		
		СтруктураПараметров.Вставить("Сценарий",Объект.Сценарий);	
		СтруктураПараметров.Вставить("Организация",Объект.Организация);
		СтруктураПараметров.Вставить("Проект",Объект.Проект);
		СтруктураПараметров.Вставить("ПериодОтчета",Объект.ПериодОтчета);
		СтруктураПараметров.Вставить("ПериодОкончания",Объект.ПериодОкончания);
		Для Инд =1 По ЧислоДопАналитик Цикл
			СтруктураПараметров.Вставить("Аналитика"+Инд,Объект["Аналитика"+Инд]);
		КонецЦикла;		
		СтруктураПараметров.Вставить("РежимФормы", 2);
		
		ОткрытьФорму("Справочник.ОписаниеВерсий.Форма.ФормаСписка", 
			СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать отчёт для работы с версиями. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПротокол(Команда)
	
	КлючевыеРеквизиты=Новый Структура;
	КлючевыеРеквизиты.Вставить("Организация",Объект.Организация);
	КлючевыеРеквизиты.Вставить("Проект",Объект.Проект);
	КлючевыеРеквизиты.Вставить("ПериодОтчета",Объект.ПериодОтчета);
	КлючевыеРеквизиты.Вставить("Сценарий",Объект.Сценарий);
	КлючевыеРеквизиты.Вставить("ВидОтчета",Объект.ВидОтчета);
	Если ТаблицаСобытийЗагрузки.Количество()>0 Тогда	
		ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("АдресТаблицыСобытий",ПолучитьАдресТаблицыСобытий()));	
	Иначе		
		МассивПротоколируемыхОбъектов=ПолучитьМассивПротоколируемыхОбъектов(Объект.Ссылка,КлючевыеРеквизиты);	
		Если МассивПротоколируемыхОбъектов.Количество()>0 Тогда	
			ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("МассивПротоколируемыхОбъектов",ПолучитьМассивПротоколируемыхОбъектов(Объект.Ссылка,КлючевыеРеквизиты)));	
		Иначе		
			ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("КонтекстПротокола",ПолучитьКонтекстОбъекта()));		
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыИсходныйИмпортированныйФайл(Команда)
	
	Если НЕ (ЗначениеЗаполнено(Объект.ФайлИмпорта) И ЗначениеЗаполнено(Объект.ДатаИзменения)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не определен файл для открытия. Операция отменена.'");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ВерсияФайла=ПолучитьВерсиюФайла(Объект.Ссылка,Объект.ФайлИмпорта);
	
	Если ВерсияФайла=Неопределено Тогда	
		ХранимыеФайлыКлиентУХ.ОткрытьХранимыйФайлДляЧтения(Объект.ФайлИмпорта, Объект.ДатаИзменения);	
	Иначе	
		ХранимыеФайлыКлиентУХ.ОткрытьХранимыйФайлДляЧтения(Объект.ФайлИмпорта, ,ВерсияФайла);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПроверить(Команда)
	    
	Если ЭтаФорма.Модифицированность Тогда	
		Оповещение = Новый ОписаниеОповещения("ДействияФормыПроверитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Необходимо записать данные перед проверкой. Продолжить?'"), РежимДиалогаВопрос.ДаНет);	
		Возврат;
	КонецЕсли;	
			
	РезультатПроверки=ДействияФормыПроверитьСервер();
	
	Если РезультатПроверки.СтатусПроверки Тогда
		Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
	Иначе
		Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
	КонецЕсли;	
		
КонецПроцедуры
	
&НаКлиенте
Процедура ДействияФормыПроверитьТолькоОшибочные(Команда)
	
	РезультатПроверки=Новый Структура;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТабличныйДокумент",ПолучитьПротоколПроверкиСервер(РезультатПроверки,"ТолькоОшибочные").Протокол);
	СтруктураПараметров.Вставить("Документ",Объект.Ссылка);
	
	Если РезультатПроверки.СтатусПроверки Тогда
		Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
	Иначе	
		Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.КонтрольныеСоотношенияУправляемая",СтруктураПараметров,ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПроверитьВсе(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда	
		Оповещение = Новый ОписаниеОповещения("ДействияФормыПроверитьСПротоколомЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Необходимо записать данные перед проверкой. Продолжить?'"), РежимДиалогаВопрос.ДаНет);	
		Возврат;
	КонецЕсли;	
	
	РезультатПроверки = ДействияФормыПроверитьСервер();
		
	Если РезультатПроверки.СтатусПроверки Тогда
		Сообщить(НСтр("ru = 'Проверка успешно пройдена'"), СтатусСообщения.Информация);
	Иначе	
		Сообщить(НСтр("ru = 'Проверка не пройдена'"), СтатусСообщения.Важное);
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТабличныйДокумент",РезультатПроверки.Протокол);
	СтруктураПараметров.Вставить("Документ",Объект.Ссылка);

	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.КонтрольныеСоотношенияУправляемая",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТабДок=Новый ТабличныйДокумент;
	ВывестиБланк(ПолеТабличногоДокументаМакет,ТабДок);
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаСохраненияДокумента",Новый Структура("ДокументДляВывода",ТабДок));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОКорректировкахПоВыделеннымПоказателям(Команда)
	
	ВывестиОтчетОКорректировках();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетОКорректировках(МассивПоказателей=Неопределено) Экспорт
	
		
	МассивПоказателей = Новый Массив;
	сПериоды        = Новый Структура;;
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
			ВернутьДанныеПоказателей(Область.Имя,МассивПоказателей,сПериоды);	
	КонецЦикла;
	
	Если МассивПоказателей.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны области, содержащие показатели.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если сПериоды.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны области, содержащие периоды.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если сПериоды.Количество()>1 Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выделить данные только одного периода.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;

	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.ЗагрузитьЗначения(МассивПоказателей);
	
	Параметры_ = Новый Структура();
	Параметры_.Вставить("ЭкземплярОтчета", Объект.Ссылка);
	Для Каждого сПериод Из сПериоды Цикл
		Параметры_.Вставить("тПериод", сПериод.Значение);
	КонецЦикла;
	Параметры_.Вставить("СписокПоказателей", СписокПоказателей);
	Параметры_.Вставить("МногопериодныйРежим", Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Параметры_.Вставить("ТекущийБланк", ЭтаФорма[ТекущийОбъектАБ].Бланк);		
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать отчёт для работы с версиями. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	
	ОткрытьОтчетОКорректировках(Параметры_, ЭтаФорма);
		
КонецПроцедуры // ВывестиОтчетОКорректировках()

&НаКлиенте
Процедура ОткрытьОтчетОКорректировках(СтруктураПараметров, Владелец) Экспорт
	Имя = "Отчет.ОтчетОКорректировках.Форма.ФормаОтчетаУправляемая";
	ОткрытьФорму(Имя, СтруктураПараметров, Владелец);
КонецПроцедуры // ОткрытьОтчетОКорректировках() 

&НаКлиенте
Процедура ОтчетОКорректировкахПоВсемПоказателям(Команда)
	
	МассивПоказателей = Новый Массив;
	сПериоды        = Новый Структура;;
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		ВернутьДанныеПоказателей(Область.Имя,МассивПоказателей,сПериоды,Истина);	
	КонецЦикла;

	
	Если сПериоды.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны области, содержащие периоды.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;

    Если сПериоды.Количество()>1 Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать только один период.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.ЗагрузитьЗначения(МассивПоказателей);
	
	Параметры_ = Новый Структура();
	Параметры_.Вставить("ЭкземплярОтчета", Объект.Ссылка);
	Для Каждого сПериод Из сПериоды Цикл
		Параметры_.Вставить("тПериод", сПериод.Значение);
	КонецЦикла;
	Параметры_.Вставить("СписокПоказателей", СписокПоказателей);
	
	Параметры_.Вставить("МногопериодныйРежим", Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Параметры_.Вставить("ТекущийБланк", ЭтаФорма[ТекущийОбъектАБ].Бланк);		
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать отчёт для работы с версиями. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	ОткрытьОтчетОКорректировках(Параметры_, ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыКорректировка(Команда)
	
	РежимКорректировки=Не РежимКорректировки;	
	Элементы.ДействияФормыКорректировка.Пометка=РежимКорректировки;
	
	Если РежимКорректировки И Не Элементы.Редактирование.Пометка Тогда			
		ПеревестиВРежимРедактирования();
		Элементы.Редактирование.Пометка=Истина;
		Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализ(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФакторныйАнализЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
						НСтр("ru = 'Для проведения сравнительного факторного анализа документ должен быть записан. Записать?'"), 
						РежимДиалогаВопрос.ДаНет);
        Возврат;	
	КонецЕсли;
	
	ВызватьОтчетСценарныйАнализ(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделиование(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФакторныйАнализМоделиованиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
						НСтр("ru = 'Для проведения сравнительного факторного анализа документ должен быть записан. Записать?'"), 
						РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ВызватьОтчетСценарныйАнализ(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьЗаполнение(Команда)
	
	АдресДанныхПроизводительности=ПолучитьАдресДанныхПроизводительности("АвтоматическиПоПравилуОбработки");
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаТаблицаПроизводительности",Новый Структура("РабочийОбъектАдрес",АдресДанныхПроизводительности),ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьВычисление(Команда)
	
	АдресДанныхПроизводительности=ПолучитьАдресДанныхПроизводительности("ПересчитатьВычисляемыеПоказатели");
	ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаТаблицаПроизводительности",Новый Структура("РабочийОбъектАдрес",АдресДанныхПроизводительности),ЭтаФорма);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиИнтерактивнойРаботыСМакетом

&НаКлиенте
Процедура СкопироватьДанныеПоСтроке(Команда)
	
	тМакет = ЭтаФорма[ТекущийМакет];	
	ВыдОбласть = тМакет.ВыделенныеОбласти[0];
	
	Если ВыдОбласть.Право - ВыдОбласть.Лево<>0 Тогда
		ГраницаОбласти = ВыдОбласть.Право;
	Иначе	
		ГраницаОбласти = тМакет.ШиринаТаблицы;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	НачальныйИндексКолонки = ВыдОбласть.Лево;
 
	ОбластьДляВставки = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Низ,ГраницаОбласти);
	КодРесурса = "";
	ОтображатьСуммуВДопВалюте = Ложь;
	тОбласть = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево);
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	Если НЕ тОбласть.Расшифровка = Неопределено Тогда		
		СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(тОбласть.Имя,тОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		// Получим код ресурса, по которому будем осуществлять копирование.
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			КодРесурса = СтруктураРасшифровки.ПоказательКод;
			Если тОбласть.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
				ОтображатьСуммуВДопВалюте = тОбласть.Расшифровка.ОтображатьСуммуВДопВалюте;
			КонецЕсли;				
		Иначе	 
			Возврат;
		КонецЕсли;		
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Для СтрУ = ВыдОбласть.Верх По ВыдОбласть.Низ Цикл 

		МассивЗначений = Новый Массив();
		ОбластьЛево = тМакет.Область(СтрУ, ВыдОбласть.Лево, СтрУ, ВыдОбласть.Лево);
				
		Значение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(ОбластьЛево);
		
		Для ИндК = НачальныйИндексКолонки По ГраницаОбласти Цикл		
			МассивЗначений.Добавить(Значение);
		КонецЦикла;
		
		МассивСтрок.Добавить(МассивЗначений);
		
	КонецЦикла;
	
	КодКолонкиРесурса = ПолучитьКодКолонкиПоказателя(СтруктураРасшифровки.ПоказательСсылка);	
	
	ОписаниеИзменений = "";
	СкопироватьЗначения(ОбластьДляВставки.Имя,МассивСтрок,КодКолонкиРесурса,ОписаниеИзменений,ОтображатьСуммуВДопВалюте);
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),, ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеПоКолонке(Команда)
	
	тМакет = ЭтаФорма[ТекущийМакет];	
	ВыдОбласть = тМакет.ВыделенныеОбласти[0];
		
	Если ВыдОбласть.Низ - ВыдОбласть.Верх<>0 Тогда
		ГраницаОбласти = ВыдОбласть.Низ;
	Иначе	
		ГраницаОбласти = тМакет.ВысотаТаблицы;	
	КонецЕсли;
	МассивСтрок = Новый Массив();
	НачальныйИндексСтроки = ВыдОбласть.Верх;	
	
	ОбластьДляВставки = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ГраницаОбласти,ВыдОбласть.Право);
	тОбласть = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево);
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	ОтображатьСуммуВДопВалюте 		= Ложь;
	
	Если НЕ тОбласть.Расшифровка = Неопределено Тогда		
		СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(тОбласть.Имя,тОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			КодРесурса = СтруктураРасшифровки.ПоказательКод;
			Если тОбласть.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
				ОтображатьСуммуВДопВалюте = тОбласть.Расшифровка.ОтображатьСуммуВДопВалюте;
			КонецЕсли;
		Иначе	 
			Возврат;
		КонецЕсли;		
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Для СтрУ = ВыдОбласть.Верх По ГраницаОбласти Цикл 
		
		МассивЗначений = Новый Массив();	
		Для ИндК =  ВыдОбласть.Лево По ВыдОбласть.Право Цикл						
			Значение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(тМакет.Область(ВыдОбласть.Верх, ИндК, ВыдОбласть.Верх, ИндК));
			МассивЗначений.Добавить(Значение);		
		КонецЦикла;	
		
		МассивСтрок.Добавить(МассивЗначений);
		
	КонецЦикла;
	
	ОписаниеИзменений = "";
	СкопироватьЗначения(ОбластьДляВставки.Имя,МассивСтрок,,ОписаниеИзменений,ОтображатьСуммуВДопВалюте);
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;
	 
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьДанныеИзБуфера(Команда)	
	
	Если Заблокирован Тогда		
		тМакет = ЭтаФорма[ТекущийМакет];
		ОписаниеИзменений = "";
		ОбъектКопирования = Новый COMОбъект("htmlfile");
		ДанныеБуфера =ОбъектКопирования.ParentWindow.ClipboardData.GETdata("Text");
		МассивСтрок = Новый Массив;
		МассивЗначений = Новый Массив;		
		Если КодСимвола(Прав(ДанныеБуфера,1)) = 10 И КодСимвола(Прав(ДанныеБуфера,2)) = 13 Тогда	
			ДанныеБуфера = Лев(ДанныеБуфера,СтрДлина(ДанныеБуфера)-2);	
		КонецЕсли;	
		РазобратьДанныеБУфера(ДанныеБуфера,МассивСтрок,МассивЗначений);
		Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
			ОтображатьСуммуВДопВалюте = Ложь;
			Если ТипЗнч(Область.Расшифровка) = Тип("Структура") 
				И Область.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
				ОтображатьСуммуВДопВалюте = Область.Расшифровка.ОтображатьСуммуВДопВалюте;
			КонецЕсли;	
			СкопироватьЗначения(Область.Имя,МассивЗначений,,ОписаниеИзменений,ОтображатьСуммуВДопВалюте);
		КонецЦикла;
		Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
			ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
			Возврат;
		КонецЕсли;	
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДиапазон(Команда)
	
	тМакет = ЭтаФорма[ТекущийМакет];
	ОписаниеИзменений = "";
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		ОчиститьСодержимоеРаскрытияСервер(Область.Имя,ОписаниеИзменений);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
	Иначе	 
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ЭтоРедактирование = Элементы.Редактирование.Пометка;
	
	ПризнакРедактирования = Ложь;
	
	ОбластьИмя 				=  Область.Имя;
	ОбластьРасшифровка      =  Область.Расшифровка;
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ТекущийОбъектАБ];
	
	АдресРасшифровки 		= Неопределено;
	
	тОбъект                 = Новый Структура;
	тОбъект.Вставить("ВидОтчета"			,Объект.ВидОтчета);
	тОбъект.Вставить("УправлениеПериодом"	,Объект.УправлениеПериодом);
	тОбъект.Вставить("ПериодОтчета"			,Объект.ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,Объект.ПериодОкончания);
	тОбъект.Вставить("Сценарий"				,Объект.Сценарий);
	тОбъект.Вставить("Организация"			,Объект.Организация);
	тОбъект.Вставить("Проект"				,Объект.Проект);
	тОбъект.Вставить("Ссылка"				,Объект.Ссылка);

	
	Для ИндАналиики = 1 По ЧислоДопАналитик Цикл
		тОбъект.Вставить("Аналитика"+ИндАналиики	,Объект["Аналитика"+ИндАналиики]);                                                           
	КонецЦикла;

	СтруктураРасшифровки = Новый Структура;
	
	Если  Область.Расшифровка = Неопределено Тогда	
		СтандартнаяОбработка = Ложь;
		Возврат;		
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда		
		ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
		АналитическийБланкУХКлиент.ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(ЭтаФорма,Область,СтруктураРасшифровки);		
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("УидФормулы") Тогда	
		ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
		ОбработатьРасшифровкуОперанда(Область);		
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе 				
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);

	СтруктураНезаполненыхАналитик 	= СтруктураОтвета.СтруктураНезаполненыхАналитик;
    СтруктураОтбираемыхАналитик 	= СтруктураОтвета.СтруктураОтбираемыхАналитик;
    СтруктураРасшифровки 			= СтруктураОтвета.СтруктураРасшифровки;
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		СтандартнаяОбработка = Ложь;		
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		 СтандартнаяОбработка = Ложь;
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()=0 Тогда 	 
		Если Заблокирован Тогда
			
			Если  НЕ СтруктураРасшифровки.Свойство("ПоказательТипЗначения") Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
			тОбъектСтруктура = Новый Структура;
			ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,Объект.УправлениеПериодом,Объект.Организация);
	
			Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
				нтПериод 				=  тОбъектАБ.ЗаблокированныеПериоды.Добавить();
				нтПериод.ПериодОтчета   =  тПериод;
			КонецЦикла;	
			
			СтруктураЗаблокированныхПоказателей = АналитическийБланкУХКлиент.ВернутьЗаблокированныеЯчейки(Объект.ВидОтчета,тОбъектАБ,СтруктураРасшифровки);
			
			Если СтруктураЗаблокированныхПоказателей.Заблокирован  Тогда	
				ПоказатьОповещениеПользователя(СтруктураЗаблокированныхПоказателей.ТекстОповещения,,СтруктураЗаблокированныхПоказателей.Пояснение,БиблиотекаКартинок.Внимание16);
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
			Если СтруктураРасшифровки.ПоказательТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейОтчетов.Дата") Тогда
				
				Область.СодержитЗначение = Истина;
				Область.ТипЗначения 	 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				Попытка 					
					ТекДата  	= ОбщегоНазначенияУХ.ВыполнитьПреобразованиеТипов(Область.Текст,"Строка","Дата");
				Исключение
					ТекДата     = ТекущаяДата();
				КонецПопытки;
				Область.Значение = ТекДата;						
				Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

				
			ИначеЕсли СтруктураРасшифровки.ПоказательТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейОтчетов.Булево") Тогда
				
				Область.СодержитЗначение = Истина;
				Область.ТипЗначения 	 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
				Попытка 					
					ТекДата  	= ОбщегоНазначенияУХ.ВыполнитьПреобразованиеТипов(Область.Текст,"Строка","Булево");
				Исключение
					ТекДата     = Неопределено;
				КонецПопытки;
				Область.Значение = ТекДата;			
				Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
            ИначеЕсли СтруктураРасшифровки.ПоказательТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейОтчетов.Строка") Тогда
				
				Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;

			ИначеЕсли СтруктураРасшифровки.ПоказательТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейОтчетов.Число") Тогда
	
				Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ТекущееЗначениеПоказателяЧисло = Область.Значение;
			Иначе	
				СтандартнаяОбработка = Истина;
			КонецЕсли;
		Иначе	
			СтандартнаяОбработка = Ложь;
		КонецЕсли;	
	Иначе	
		
		тОбъектСтруктура = Новый Структура;
		ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,Объект.УправлениеПериодом,Объект.Организация);
		
		Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
			нтПериод 				=  тОбъектАБ.ЗаблокированныеПериоды.Добавить();
			нтПериод.ПериодОтчета   =  тПериод;
		КонецЦикла;	

		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыРаскрытия = ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		
		СтруктураЗаблокированныхПоказателей = АналитическийБланкУХКлиент.ВернутьЗаблокированныеЯчейки(Объект.ВидОтчета,тОбъектАБ,СтруктураРасшифровки);
		ПараметрыФормыРаскрытия.Вставить("СтруктураЗаблокированныхПоказателей",СтруктураЗаблокированныхПоказателей);
        ПараметрыФормыРаскрытия.Вставить("тОбъект",тОбъект);
	    ПараметрыФормыРаскрытия.Вставить("РежимТолькоЧтение",НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиПоБланкуОтчета(Объект.ШаблонОтчета,Объект.Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"),,,Истина));
		
		Оповещение = Новый ОписаниеОповещения("РедактированиеРаскрытияЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРаскрытияПоказателей",ПараметрыФормыРаскрытия,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбластиНаСервере(Верх, Низ, Лево, Право)
		
	ТекущаяОбластьАктивизацииТаблица = ПолучитьИзВременногоХранилища(АдресТекущейОбластиАктивизации);
	ТекущаяОбластьАктивизацииТаблица.Очистить();
	
	Для ИндексХ = 0 По Право - Лево Цикл
		
		Для ИндексУ = 0 По Низ - Верх Цикл
			
			ТекущаЯчейкаОбласти = ПолеТабличногоДокументаМакетКопия.Область(Верх + ИндексУ, Лево + ИндексХ);
						
			НоваяСтрокаОписанияАктивизации = ТекущаяОбластьАктивизацииТаблица.Добавить();
			
			НоваяСтрокаОписанияАктивизации.ТекущееЗначение = АналитическийБланкУХСервер.ПолучитьЗначениеОбластиТабличногоДокумента(ТекущаЯчейкаОбласти);
			НоваяСтрокаОписанияАктивизации.СмещениеХ = ИндексХ;
			НоваяСтрокаОписанияАктивизации.СмещениеУ = ИндексУ;
			
			Для Каждого РеквизитОбласти Из ТекущаяОбластьАктивизацииТаблица.Колонки Цикл
				
				Если РеквизитОбласти.Имя = "ТекущееЗначение" ИЛИ РеквизитОбласти.Имя = "СмещениеХ" ИЛИ РеквизитОбласти.Имя = "СмещениеУ" тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаОписанияАктивизации[РеквизитОбласти.Имя] = ТекущаЯчейкаОбласти[РеквизитОбласти.Имя];
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	АдресТекущейОбластиАктивизации = ПоместитьВоВременноеХранилище(ТекущаяОбластьАктивизацииТаблица, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)
	
	ЭтоРедактирование = Ложь;
	
	Если Не ЗначениеЗАполнено(ТекущийМакет) Тогда
		 Возврат;
	КонецЕсли;	
	
	тМакет = ЭтаФорма[ТекущийМакет];
		
	ТекущаяОбластьМакета = тМакет.ТекущаяОбласть;
	ТекущаяОбластьЗначение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(тМакет.Область(ТекущаяОбластьМакета.Верх, ТекущаяОбластьМакета.Лево));
		
	Если тМакет.ВыделенныеОбласти.Количество()=0 ИЛИ НЕ ТипЗнч(тМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяОбластьМакета.Расшифровка) = Тип("Структура") 
		И  	ТекущаяОбластьМакета.Расшифровка.Свойство("Ссылка") 
		И   Заблокирован Тогда
		Элементы[ТекущийМакет].Редактирование = Истина;
	Иначе	
		Элементы[ТекущийМакет].Редактирование = Ложь;
	КонецЕсли;	
		
	
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
	ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
			
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если  Заблокирован Тогда
				
		Если ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда
			//Выделена одна ячейка
			Если Область.Лево - Область.Право = 0 И Область.Верх - Область.Низ = 0 Тогда
				
				ОписаниеИзменений = "";
								
				ЗначениеОбласти = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(Область);
				ВставитьЗначениеПоказателя(Область.Имя, ЗначениеОбласти, ОписаниеИзменений);
				
				Если ВычислятьПриИзменении Тогда
					ЗаписатьИзмененныеПоказателиБланк(Истина);
				Иначе	 
					УстановитьРежимРедактированияДанныхКлиент(Истина);
				КонецЕсли;
				
				ЭтаФорма.Модифицированность = Истина;	
				ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийМакет];
			КонецЕсли;		
		Иначе					
			Возврат;
		КонецЕсли;		
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЗначениеПоказателяКлиент(ИмяОбласти,ЗначениеОбласти,ОписаниеИзменений)
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ТекущийОбъектАБ];
	
	АдресРасшифровки 		= Неопределено;
	
	СтруктураРасшифровки 	= Новый Структура;
	
	тОбъект                 = Новый Структура;
	тОбъект.Вставить("ВидОтчета"			,Объект.ВидОтчета);
	тОбъект.Вставить("УправлениеПериодом"	,Объект.УправлениеПериодом);
	тОбъект.Вставить("ПериодОтчета"			,Объект.ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,Объект.ПериодОкончания);
	тОбъект.Вставить("Сценарий"				,Объект.Сценарий);
	тОбъект.Вставить("Организация"			,Объект.Организация);
	тОбъект.Вставить("Проект"				,Объект.Проект);
	тОбъект.Вставить("Ссылка"				,Объект.Ссылка);

	Для ИндАналиики = 1 По ЧислоДопАналитик Цикл
		тОбъект.Вставить("Аналитика"+ИндАналиики	,Объект["Аналитика"+ИндАналиики]);                                                           
	КонецЦикла;
	
	Область 				= тМакет.Область(ИмяОбласти);
	ОбластьРасшифровка      =  Область.Расшифровка;
	
	Если  Область.Расшифровка = Неопределено Тогда
		
		Возврат;	
		
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда	
		
		ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
		//Строки
		ОбластьРасшифровкиСтроки  =  тМакет.Область(Область.Верх,1,Область.Низ,1);
		Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
			Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
				Если НЕ рСтроки.Значение = Неопределено Тогда
					СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;		
		//Колонки
		ОбластьРасшифровкиКолонки =  тМакет.Область(1,Область.Лево,1,Область.Право);
		Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
			Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
				Если НЕ рКолонки.Значение = Неопределено Тогда
					СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;				
	Иначе 			
		Возврат;
	КонецЕсли;	
	
	//СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ИмяОбласти,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);
	
	//АналитическийБланкУХКлиент.ВставитьЗначениеВОбласть(СтруктураРасшифровки,ТекущееЗначениеПоказателяЧисло,ЗначениеОбласти,ЭтаФорма.РасчетИЗаписьПоказателей.ЛогИзмененныхПоказателей,ОписаниеИзменений);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРедактированияДанныхКлиент(Режим)
	
	Если Режим Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	Элементы.ГруппаПрименитьОтменить.Видимость 		= Режим;	
	
	Для Каждого Эл Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл		
		Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
			Продолжить;
		КонецЕсли;	
		Эл.Доступность = НЕ Режим;		
	КонецЦикла;		
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьОперанд(Команда)
	
	тМакет 							= ЭтаФорма[ТекущийМакет];
	ОбработатьРасшифровкуОперанда(тМакет.ВыделенныеОбласти[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументКорректировки(Команда)
	
	Если Заблокирован Тогда	
		ПоказатьПредупреждение(,НСтр("ru = 'Запрещено вводить ручные корректировки
                                      |экземпляра отчета в случае, когда он редактируется в основной форме.'"));			
		Возврат;	
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	сПериоды        = Новый Структура;;
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		ВернутьДанныеПоказателей(Область.Имя,МассивПоказателей,сПериоды);
	КонецЦикла;
	
	Если МассивПоказателей.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны области, содержащие показатели.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если сПериоды.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны области, содержащие периоды.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура("Организация,Сценарий,ОсновнаяВалюта,Проект,УправлениеПериодом,ВидОтчета");
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		СтруктураПараметров.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Объект);
	
	СтруктураПараметров.Вставить("ЭкземплярОтчета",Объект.Ссылка);
	СтруктураПараметров.Вставить("МассивПоказателей",МассивПоказателей);
	
	МассивПериодов=Новый Массив;
	
	Для Каждого сПериод Из сПериоды Цикл
		
		МассивПериодов.Добавить(сПериод.Значение);
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивПериодов",МассивПериодов);
	
	ОткрытьРучныеКорректировки(СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментироватьПоказатель(Команда)
					
	Область = ЭтаФорма[ТекущийМакет].ВыделенныеОбласти[0];
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(Область.Имя,Область.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	Если СтруктураРасшифровки = Неопределено  Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Комментарий недоступен'"),,НСтр("ru = 'Примечание можно добавить только к ячейке показателя'"),БиблиотекаКартинок.Внимание16);		
		Возврат;
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		ПоказатьОповещениеПользователя(НСтр("ru = 'Комментарий недоступен'"),,НСтр("ru = 'Примечание можно добавить только к ячейке показателя'"),БиблиотекаКартинок.Внимание16);	
		Возврат;
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()>0 Тогда 	 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Комментарий недоступен'"),,НСтр("ru = 'Примечание нельзя добавить к ячейке, содержащий агрегированные данные'"),БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;	

	ТекстПримечания = Область.Примечание.Текст;
	Параметры_ = Новый Структура("ТекстКомментария",ТекстПримечания);
	Оповещение = Новый ОписаниеОповещения("РедактированиеКомментарияЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаКомментариевУправляемая", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСводнойТаблице(Команда)
	// Получение кода показателя.
	СтруктураРасшифровки = ПолучитьСтруктуруДанныхВыбраннойОбласти();	
	КодПоказателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРасшифровки, "ПоказательКод", "");
	// Получение ракурса по коду показателя.
	ВыбранныйРакурс = ПолучитьРакурсВыбранныхПоказателей(КодПоказателя);
	// Открытие найденного ракурса.
	Если ЗначениеЗаполнено(ВыбранныйРакурс) Тогда
		ПоказатьЗначение(, ВыбранныйРакурс);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить ракурс. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	АналитическийБланкУХКлиент.ПолеТабличногоДокументаМакетОбработкаРасшифровки(ЭтаФорма,Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	АналитическийБланкУХКлиент.ПолеТабличногоДокументаМакетОбработкаДополнительнойРасшифровки(ЭтаФорма,Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРаскрытие() 
	
	ОткрытьФормуРаскрытияПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРаскрытиеДиаграмма() Экспорт 
	
	Элемент 							= ЭтаФорма[ТекущийМакет];
	
	тСтраница  			= КэшБланков.НайтиСтроки(Новый Структура("Бланк",Элемент.ТекущаяОбласть.Расшифровка.СвязаннаяОбластьБланк))[0];
	тОбласть      		= ЭтаФорма[тСтраница.ИмяМакета].Область(тИмяСвязаннойОбластиДиаграммы); 
	
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	тЭлемент 			= Элементы[ТекущийМакет];
	
	Если тОбласть.Расшифровка.Свойство("Ссылка") Тогда
		
		ОткрытьФормуРаскрытияПоказателей(тОбласть);
		
	КонецЕсли;
	
	тСтраница 			= КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказатель()
	
	тМакет 							= ЭтаФорма[ТекущийМакет];
	//Обработка расшифровки показателя по правилу	
	Если   ТипЗнч(тМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И 
		(тМакет.ТекущаяОбласть.Расшифровка.Свойство("Ссылка")
		ИЛИ тМакет.ТекущаяОбласть.Расшифровка.Свойство("УидФормулы")) Тогда			
		ОбработатьРасшифровкуОперанда(тМакет.ТекущаяОбласть);				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказательДиаграмма() Экспорт
		
	Элемент 			= ЭтаФорма[ТекущийМакет];
	
	тСтраница  			= КэшБланков.НайтиСтроки(Новый Структура("Бланк",Элемент.ТекущаяОбласть.Расшифровка.СвязаннаяОбластьБланк))[0];
	тОбласть      		= ЭтаФорма[тСтраница.ИмяМакета].Область(тИмяСвязаннойОбластиДиаграммы); 
	
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	тЭлемент 			= Элементы[ТекущийМакет];
	
	
	Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") 
		И (тОбласть.Расшифровка.Свойство("Ссылка") 
		ИЛИ тОбласть.Расшифровка.Свойство("УидФормулы")) Тогда
		
		СтандартнаяОбработка = Истина;
		ОбработатьРасшифровкуОперанда(тОбласть);		
				
	КонецЕсли;
	
	тСтраница 			= КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;

	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаскрытияПоказателей(тОбласть = Неопределено)
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ТекущийОбъектАБ];
	АдресРасшифровки 		= Неопределено;
	СтруктураРасшифровки 	= Новый Структура;
	
	Если тОбласть = Неопределено Тогда 	
		тОбласть                = тМакет.ТекущаяОбласть;	
	КонецЕсли;	
	
	ОбластьИмя 				= тОбласть.Имя;
	ОбластьРасшифровка      = тОбласть.Расшифровка;

	
	АналитическийБланкУХКлиент.ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(ЭтаФорма,тОбласть,СтруктураРасшифровки);			

	тОбъект = ПолучитьСвойстваТекущегоОбъекта();

	СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);

	Если СтруктураОтвета.СтруктураНезаполненыхАналитик.Свойство("Проект") Тогда
		 СтруктураОтвета.СтруктураНезаполненыхАналитик.Удалить("Проект");
	КонецЕсли;	
	
	СтруктураНезаполненыхАналитик 	= СтруктураОтвета.СтруктураНезаполненыхАналитик;
    СтруктураОтбираемыхАналитик 	= СтруктураОтвета.СтруктураОтбираемыхАналитик;
    СтруктураРасшифровки 			= СтруктураОтвета.СтруктураРасшифровки;
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		
		ОбработатьРасшифровкуОперанда(тОбласть);
		
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()=0 Тогда 	 
			
		ПоказатьОповещениеПользователя(Нстр("ru = 'Нет данных для отображения'"),, Нстр("ru = 'Нет данных для отображения'"), БиблиотекаКартинок.Внимание16);

		Если  НЕ СтруктураРасшифровки.Свойство("ПоказательТипЗначения") Тогда
			Возврат;
		КонецЕсли;	
				
	Иначе	
		
		тОбъектСтруктура = Новый Структура;
		
		ПараметрыФормыРаскрытия = ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		ПараметрыФормыРаскрытия.Вставить("тОбъект",тОбъект);
		
		СтруктураЗаблокированныхПоказателей = АналитическийБланкУХКлиент.ВернутьЗаблокированныеЯчейки(Объект.ВидОтчета,тОбъектАБ,СтруктураРасшифровки);
		
		ПараметрыФормыРаскрытия.Вставить("СтруктураЗаблокированныхПоказателей",СтруктураЗаблокированныхПоказателей);
		
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРаскрытияПоказателей",ПараметрыФормыРаскрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровкуОперанда(ТекущаяОбластьРасшифровка)
	
	ТекстОбласти 								= ТекущаяОбластьРасшифровка.Текст;
	СтруктураПараметровДляВызоваРасшифровки 	= РасшифроватьОперандНаСервере(ТекущаяОбластьРасшифровка.Расшифровка,ТекстОбласти,ТекущаяОбластьРасшифровка.Имя);	
		
	АналитическийБланкУХКлиент.ОбработатьРасшифровкуОперанда(ЭтаФорма,ТекущаяОбластьРасшифровка,СтруктураПараметровДляВызоваРасшифровки)
	
КонецПроцедуры


#КонецОбласти

#Область АналитическийБланк

&НаСервере
Функция ПолучитьСтруктуруРасшифровки(ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик)
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ     			= ЭтаФорма[ТекущийОбъектАБ];
    ТзСвойстваПоказателей 	= ПолучитьИзВременногоХранилища(тОбъектАБ.ТзСвойстваПоказателейАдрес);
	
	Возврат АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(тМакет,Объект,тОбъектАБ,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик)
	
	СтруктураОтбираемыхАналитик.Вставить("Валюта",ВыбраннаяВалюта);
	
	тОбъектАБ = ЭтаФорма[ТекущийОбъектАБ];
	
	МассивПериодов = Новый Массив;
		
	Для Каждого СтрНезаполненнаяАналитика Из СтруктураНезаполненыхАналитик Цикл
		Если СтруктураОтбираемыхАналитик.Свойство(СтрНезаполненнаяАналитика.Ключ) Тогда //Мы имеем дело с аналитикой -группой, нужно ее расшифровать
			Если СтрНезаполненнаяАналитика.Ключ = "ПериодОтчета" Тогда
				МассивПериодов = ПолучитьВложенныеПериоды(СтруктураОтбираемыхАналитик.ПериодОтчета,ОбъектАналитическогоБланка.Периодичность);			
				СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",МассивПериодов);	
			Иначе	
				МассивЗначений = ПолучитьЭлементыПотомки(СтруктураОтбираемыхАналитик[СтрНезаполненнаяАналитика.Ключ]);			
				СтруктураОтбираемыхАналитик.Вставить(СтрНезаполненнаяАналитика.Ключ,МассивЗначений);	
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтруктураНезаполненыхАналитик.Свойство("ПериодОтчета")     //Если не указан,  период, то берем весь текущий диапазон
		И НЕ СтруктураОтбираемыхАналитик.Свойство("ПериодОтчета") Тогда	
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(СтруктураРасшифровки.ПериодС, СтруктураРасшифровки.ПериодПо, ОбъектАналитическогоБланка.Периодичность);			
		СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",МассивПериодов);	
	КонецЕсли;	

	
	МассивПоказателей = Новый Массив();
    МассивПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);	
	СтруктураОтбираемыхАналитик.Вставить("ПоказательОтчета",МассивПоказателей);
    СтруктураОтбираемыхАналитик.Вставить("УидГруппыОтборов",СтруктураРасшифровки.УидГруппыОтборов);

	мПоказателиРаскрытия = ПолучитьИзВременногоХранилища(тОбъектАБ.мПоказателиРаскрытияАдрес);
	
	МассивУдаляемыхКолонок = Новый Массив;
	
	тСвойствАналитик = Новый ТаблицаЗначений;
	тСвойствАналитик.Колонки.Добавить("КодАналитики");
	тСвойствАналитик.Колонки.Добавить("типАналитики");
	тСвойствАналитик.Колонки.Добавить("Аналитика");
    тСвойствАналитик.Колонки.Добавить("СвязьПоВладельцу");
    тСвойствАналитик.Колонки.Добавить("ЭтоЭтапПроекта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    тСвойствАналитик.Колонки.Добавить("ОбязательноеЗаполнение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	тСвойствАналитик.Колонки.Добавить("МетаИмяАналитики");
    тСвойствАналитик.Колонки.Добавить("ОтборЗначений");
	тСвойствАналитик.Колонки.Добавить("ПараметрыОтбораЗначений");
	
	тГруппаРаскрытия = СтруктураРасшифровки.ПоказательСсылка.ГруппаРаскрытия;
	
	ДополнительныйОтбор = Новый ТаблицаЗначений;
	ДополнительныйОтбор.Колонки.Добавить("ИмяОтбора");
	ДополнительныйОтбор.Колонки.Добавить("ТипОтбора");
	ДополнительныйОтбор.Колонки.Добавить("ЗначениеОтбора");
	
	Для Каждого Аналитика Из СтруктураНезаполненыхАналитик Цикл
		
		нСвойство = тСвойствАналитик.Добавить();
		нСвойство.КодАналитики = Аналитика.Ключ;
		
		Если Аналитика.Ключ = "ПериодОтчета" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Организация" Тогда 
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Организации");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Проект"   Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Проекты");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Сценарий" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "АналитикаВалюта" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Валюты");
			нСвойство.ОбязательноеЗаполнение = Истина;
		
		Иначе	
			
			ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Аналитика.Ключ);
			
			Если ЗначениеЗаполнено(ТекСубконто) Тогда
				нСвойство.типАналитики = Новый ОписаниеТипов(ТекСубконто.ТипЗначения);
			КонецЕсли;	 
			
			Для Инд = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл	
				Если  тГруппаРаскрытия["ВидАналитики"+Инд] = ТекСубконто Тогда	
					нСвойство.ОбязательноеЗаполнение = тГруппаРаскрытия["Аналитика"+Инд+"Обязательна"];
				КонецЕсли;		
				
				Если Инд =  тГруппаРаскрытия.АналитикаЭтапПроекта Тогда
					 нСвойство.ЭтоЭтапПроекта = Истина;
				КонецЕсли;	
				
			КонецЦикла;					
		КонецЕсли;		
		
		Если нСвойство.типАналитики.ПривестиЗначение() = Неопределено Тогда
			нСвойство.МетаИмяАналитики = "СправочникСсылка."+Метаданные.НайтиПоТипу(нСвойство.типАналитики.Типы()[0]).Имя;
		Иначе
			нСвойство.МетаИмяАналитики = нСвойство.типАналитики.ПривестиЗначение().Метаданные().Имя;
		КонецЕсли;

		тРасшифровкаГруппыОтборов = тОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",СтруктураОтбираемыхАналитик.УидГруппыОтборов,Аналитика.Ключ));
		
		Если тРасшифровкаГруппыОтборов.Количество() = 1 И ЗначениеЗаполнено(тРасшифровкаГруппыОтборов[0].ЗначениеОтбораСтрока) И НЕ тРасшифровкаГруппыОтборов[0].Отбор = НСтр("ru = 'Отбор не производится'") Тогда
			
			ТзПараметровЗапроса = Новый ТаблицаЗначений;
			ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
				
			ТекстОтбора = АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ТекущийСправочник","",тРасшифровкаГруппыОтборов[0],ТзПараметровЗапроса,"Ссылка");
			ТекстОтбора = Прав(ТекстОтбора,СтрДлина(ТекстОтбора)-1);
			
			ТекстЗапроса = "ВЫБРАТЬ 
			|	ТекущийСправочник.Ссылка
			|ИЗ
			|	Справочник."+нСвойство.МетаИмяАналитики+" КАК ТекущийСправочник
			|ГДЕ "+ТекстОтбора;
			
			Если ЗначениеЗАполнено(ТекстОтбора) Тогда		
				нСвойство.ОтборЗначений 			= ТекстЗапроса;
				нСвойство.ПараметрыОтбораЗначений 	= ТзПараметровЗапроса;	
			КонецЕсли;	
					
			нДополнительныйОтбор 				= ДополнительныйОтбор.Добавить();
			нДополнительныйОтбор.ИмяОтбора      = Аналитика.Ключ;
			нДополнительныйОтбор.ТипОтбора      = тРасшифровкаГруппыОтборов[0].Отбор;
			нДополнительныйОтбор.ЗначениеОтбора = ЗначениеИзСтрокиВнутр(тРасшифровкаГруппыОтборов[0].ЗначениеОтбораСтрока);
	
		КонецЕсли;
			
	КонецЦикла;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСеанса",ЭтаФорма.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ДополнительныйФильтр",ДополнительныйОтбор);
	
	Если НЕ СтруктураРасшифровки.ПоказательСсылка.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда 
		ДополнительныеПараметры.Вставить("ЭтоНечисловые",Истина);
	КонецЕсли;
	
	Результат = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик,СтруктураНезаполненыхАналитик,ДополнительныеПараметры);	
	
	Если  НЕ СтруктураРасшифровки.ПоказательСсылка.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Результат.Колонки.Удалить("Значение");
		Результат.Колонки.ЗначениеНеЧисловое.Имя = "Значение";
	КонецЕсли;	
	
	АдресТзРаскрытия = ПоместитьВовременноеХранилище(Результат,Новый УникальныйИдентификатор);
		
	//Заполняем возможные связи по владельцу
	Для Каждого Аналитика Из тСвойствАналитик Цикл				
		
		мВладельцы = Новый Массив;
		
		Если Аналитика.типАналитики.ПривестиЗначение() = Неопределено ИЛИ СтрНайти(Аналитика.типАналитики.ПривестиЗначение().Метаданные().ПолноеИмя(),"Справочник") = 0 Тогда
			Аналитика.СвязьПоВладельцу =  мВладельцы;
			Продолжить;	
		Иначе	
			Владельцы =  Аналитика.типАналитики.ПривестиЗначение().Метаданные().Владельцы;
		КонецЕсли;	

		Владельцы =  Аналитика.типАналитики.ПривестиЗначение().Метаданные().Владельцы;
		
		Для Каждого тВладелец Из Владельцы Цикл	
			СущВладельцы = тСвойствАналитик.НайтиСтроки(Новый Структура("МетаИмяАналитики",тВладелец.Имя));
			Для Каждого сВладелец Из СущВладельцы Цикл	
				мВладельцы.Добавить(сВладелец.КодАналитики);	
			КонецЦикла;		
		КонецЦикла;		
		Аналитика.СвязьПоВладельцу =  мВладельцы;
		
	КонецЦикла;	
    	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	СтруктураКлючевыхРеквизитов.Вставить("Сценарий"		,Объект.Сценарий);
	СтруктураКлючевыхРеквизитов.Вставить("Организация"	,Объект.Организация);
    СтруктураКлючевыхРеквизитов.Вставить("Проект"		,Объект.Проект);
	СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета"	,Объект.ПериодОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета"	,Объект.ВидОтчета);
    СтруктураКлючевыхРеквизитов.Вставить("ВложенныеПериоды"	,тОбъектАБ.ВложенныеПериоды.Выгрузить());
	СтруктураКлючевыхРеквизитов.Вставить("ЗаблокированныеПоказатели",тОбъектАБ.ЗаблокированныеПоказатели.Выгрузить());
   	СтруктураКлючевыхРеквизитов.Вставить("ЗаблокированныеПериоды",тОбъектАБ.ЗаблокированныеПериоды.Выгрузить());
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураОтбираемыхАналитик",СтруктураОтбираемыхАналитик);
	СтруктураПараметров.Вставить("СтруктураНезаполненыхАналитик",СтруктураНезаполненыхАналитик);
	СтруктураПараметров.Вставить("АдресТзРаскрытия",АдресТзРаскрытия);
	СтруктураПараметров.Вставить("логИзмененныхПоказателейАдрес",логИзмененныхДанныхАдрес);
	СтруктураПараметров.Вставить("мПоказателиРаскрытияАдрес",тОбъектАБ.мПоказателиРаскрытияАдрес);
	СтруктураПараметров.Вставить("КэшАналитикПоказателейАдрес",тОбъектАБ.КэшАналитикПоказателейАдрес);
	СтруктураПараметров.Вставить("Заблокирован",Заблокирован);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",тОбъектАБ.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("УровеньТочности",Объект.УровеньТочности);
	СтруктураПараметров.Вставить("УидГруппыОтборов",СтруктураРасшифровки.УидГруппыОтборов);
    СтруктураПараметров.Вставить("тГоризонт",МассивПериодов);
	СтруктураПараметров.Вставить("АдрестСвойствАналитик",ПоместитьВоВременноеХранилище(тСвойствАналитик,ЭтаФорма.УникальныйИдентификатор));
    СтруктураПараметров.Вставить("ПравилоОбработки",Объект.ПравилоОбработки);
	СтруктураПараметров.Вставить("ВИБ",Объект.ИспользуемаяИБ);

	СтруктураПараметров.Вставить("АдресСтруктураКлючевыхРеквизитов",ПоместитьВоВременноеХранилище(СтруктураКлючевыхРеквизитов,ЭтаФорма.УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции	

&НаСервере
Функция ПолучитьВложенныеПериоды(ПериодОтчета,Периодичность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	Периоды.Периодичность КАК Периодичность
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ПометкаУдаления = ЛОЖЬ
	|	И Периоды.ДатаНачала >= &ДатаНачала
	|	И Периоды.ДатаОкончания <= &ДатаОкончания
	|	И Периоды.Периодичность = &Периодичность
	|	И Периоды.Произвольный = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("Периодичность",Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала",ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодОтчета.ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодОтчета");
	
КонецФункции

&НаСервере
Функция ПолучитьЭлементыПотомки(ЭлементРодитель)
	
	ТекущийТип = ЭлементРодитель.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначениеСправочика.Ссылка КАК Ссылка
	|ИЗ
	|	//ТекущийСправочник// КАК ЗначениеСправочика
	|ГДЕ
	|	ЗначениеСправочика.ПометкаУдаления = ЛОЖЬ
	|	И ЗначениеСправочика.Родитель  В ИЕРАРХИИ(&ЭлементРодитель)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТекущийСправочник//","Справочник."+ТекущийТип);
	
	Запрос.УстановитьПараметр("ЭлементРодитель",ЭлементРодитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ОбновитьСУчетомВерсийСервер()
		
	ВывестиДанныеЭкземпляра(,,Истина);
		
КонецПроцедуры 

&НаСервере
Функция ВставитьЗначениеПоказателя(ИмяОбласти,Значение,ОписаниеИзменений="")
	
	тМакет = ЭтаФорма[ТекущийМакет];	
	СтруктураРасшифровки = Новый Структура;
	ОбъектАБ = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	ОбъектАБ.ВставитьЗначениеВОбласть(тМакет,ИмяОбласти,Значение, ТекущаяОбластьЗначение,,Объект,,ОписаниеИзменений);
	ЗначениеВРеквизитФормы(ОбъектАБ, ТекущийОбъектАБ);
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервере
Процедура ОчиститьСодержимоеРаскрытияСервер(ИмяОбласти,ОписаниеИзменений)
		
	тМакет = ЭтаФорма[ТекущийМакет];	
	ОбъектАБ = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	
	тОбъектСтруктура = Новый Структура;
	ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,Объект.УправлениеПериодом,Объект.Организация);
	
	Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
		нтПериод 				=  ОбъектАБ.ЗаблокированныеПериоды.Добавить();
		нтПериод.ПериодОтчета   =  тПериод;
	КонецЦикла;	
		
	Если ТипЗнч(ТекущаяОбластьЗначение) = Тип("Число") тогда
		ОбъектАБ.ВставитьЗначениеВОбласть(тМакет,ИмяОбласти, 0, ТекущаяОбластьЗначение,,Объект,,ОписаниеИзменений);
	ИначеЕсли ТипЗнч(ТекущаяОбластьЗначение) = Тип("Строка") тогда
		ОбъектАБ.ВставитьЗначениеВОбласть(тМакет,ИмяОбласти, "", ТекущаяОбластьЗначение,,Объект,,ОписаниеИзменений);
	ИначеЕсли ТипЗнч(ТекущаяОбластьЗначение) = Тип("Дата") тогда
		ОбъектАБ.ВставитьЗначениеВОбласть(тМакет,ИмяОбласти, Дата(1,1,1), ТекущаяОбластьЗначение,,Объект,,ОписаниеИзменений);
	ИначеЕсли ТипЗнч(ТекущаяОбластьЗначение) = Тип("Булево") тогда
		ОбъектАБ.ВставитьЗначениеВОбласть(тМакет,ИмяОбласти, Ложь, ТекущаяОбластьЗначение,,Объект,,ОписаниеИзменений);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектАБ, ТекущийОбъектАБ);
	
	Если ВычислятьПриИзменении Тогда
		ЗаписатьИзмененныеПоказателиБланк(Истина);
		УстановитьРежимРедактированияДанных(Ложь);		
	Иначе	
		УстановитьРежимРедактированияДанных(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция РасшифроватьОперандНаСервере(Расшифровка,Текст,ОбластьИмя)
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		Возврат Неопределено;		
	ИначеЕсли Расшифровка.Свойство("УидФормулы") Тогда	
		
		тМакет 		= ЭтаФорма[ТекущийМакет];
		тОбласть    = ЭтаФорма[ТекущийМакет].Область(ОбластьИмя);
		
		СтруктураКлючевыхРеквизитов = Новый Структура;
		СтруктураКлючевыхРеквизитов.Вставить("Сценарий"			,Объект.Сценарий);
		СтруктураКлючевыхРеквизитов.Вставить("Организация"		,Объект.Организация);
		СтруктураКлючевыхРеквизитов.Вставить("Проект"			,Объект.Проект);
		СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета"		,Объект.ПериодОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("ПериодОкончания"	,Объект.ПериодОкончания);
		СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета"		,Объект.ВидОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("мТекущаяВалюта"	,ВыбраннаяВалюта);
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Инд	,Объект["Аналитика"+Инд]);
		КонецЦикла;	
			
		СтруктураРасшифровкиГруппировок = Новый Структура;
			
		//Колонки
		ОбластьРасшифровкиКолонки =  тМакет.Область(1,тОбласть.Лево,1,тОбласть.Право);
		Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
			Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
				Если НЕ рКолонки.Значение = Неопределено Тогда
					СтруктураРасшифровкиГруппировок.Вставить(рКолонки.Ключ,рКолонки.Значение); 
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	
		//Строки
		ОбластьРасшифровкиСтроки  =  тМакет.Область(тОбласть.Верх,1,тОбласть.Низ,1);
		Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
			Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
				Если НЕ рСтроки.Значение = Неопределено Тогда
					СтруктураРасшифровкиГруппировок.Вставить(рСтроки.Ключ,рСтроки.Значение);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		СтруктураРасшифровки.Вставить("ЭтоФормула", Истина);
		СтруктураРасшифровки.Вставить("РасшифровкаЯчейки", тОбласть.Расшифровка);
		СтруктураРасшифровки.Вставить("СтруктураРасшифровкиГруппировок", СтруктураРасшифровкиГруппировок);
		СтруктураРасшифровки.Вставить("СтруктураКлючевыхРеквизитов", СтруктураКлючевыхРеквизитов);
		СтруктураРасшифровки.Вставить("ИдентификаторСеанса", ЭтаФорма.УникальныйИдентификатор);	
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовАдрес", ЭтаФорма[ТекущийОбъектАБ].АдресРасшифровкиГруппОтборов);
		СтруктураРасшифровки.Вставить("КэшАналитикПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		СтруктураРасшифровки.Вставить("ТзСвойстваПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].ТзСвойстваПоказателейАдрес);
		СтруктураРасшифровки.Вставить("КэшПоказателейКроссОбластейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшПоказателейКроссОбластейАдрес);
        СтруктураРасшифровки.Вставить("ЗначениеВыражения", тОбласть.Текст);
		
		КэшФормулПоказателейАдрес = ПоместитьВоВременноеХранилище(ЭтаФорма[ТекущийОбъектАБ].КэшФормулОбластейПоказателей.Выгрузить(),Новый УникальныйИдентификатор);
		СтруктураРасшифровки.Вставить("КэшФормулПоказателейАдрес", КэшФормулПоказателейАдрес);
		
		Возврат  СтруктураРасшифровки;

		
	ИначеЕсли НЕ СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда	
		
		Возврат Неопределено;		
		
	ИначеЕсли ВозможнаРасшифровкаПоФормулеРасчета(СтруктураРасшифровки) Тогда	//Этот показатель принадлежит текущему ключевому срезу - получим расшифровку по правилу обработки
		
		СтруктураПараметровДляВызоваРасшифровки = Обработки.АналитическийБланк.ПолучитьПараметрыРасшифровкиОперанда(ЭтаФорма,СтруктураРасшифровки,Текст,ВыбраннаяВалюта);
		
		Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",Объект.ЕдиницаИзмерения); 			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("УровеньТочности",Объект.УровеньТочности);
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЧтениеНеактуальныхЗаписей",Объект.ЧтениеНеактуальныхЗаписей);

			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ИдентификаторСеанса",""+ЭтаФорма.УникальныйИдентификатор);		
			СтруктураПараметровДляВызоваРасшифровки.Вставить("АдресХранилищаПеременныхДляРасчета", ПоместитьВоВременноеХранилище(СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета,ЭтаФорма.УникальныйИдентификатор));
			СтруктураПараметровДляВызоваРасшифровки.Удалить("ОбъектРасчета");
			
			Возврат СтруктураПараметровДляВызоваРасшифровки;
			
		КонецЕсли;		                                                                            		
		
	Иначе	//Полказатель чужого ключевого среза  - получим параметры для расшифровки среза.			
		
		тМакет 		= ЭтаФорма[ТекущийМакет];
		тОбласть    = ЭтаФорма[ТекущийМакет].Область(ОбластьИмя);
		
		СтруктураКлючевыхРеквизитов = Новый Структура;
		СтруктураКлючевыхРеквизитов.Вставить("Сценарий"			,Объект.Сценарий);
		СтруктураКлючевыхРеквизитов.Вставить("Организация"		,Объект.Организация);
		СтруктураКлючевыхРеквизитов.Вставить("Проект"			,Объект.Проект);
		СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета"		,Объект.ПериодОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("ПериодОкончания"	,Объект.ПериодОкончания);
		СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета"		,Объект.ВидОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("мТекущаяВалюта"	,ВыбраннаяВалюта);
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Инд	,Объект["Аналитика"+Инд]);
		КонецЦикла;	
			
		СтруктураРасшифровкиГруппировок = Новый Структура;
			
		//Колонки
		ОбластьРасшифровкиКолонки =  тМакет.Область(1,тОбласть.Лево,1,тОбласть.Право);
		Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
			Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
				Если НЕ рКолонки.Значение = Неопределено Тогда
					СтруктураРасшифровкиГруппировок.Вставить(рКолонки.Ключ,рКолонки.Значение); 
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	
		//Строки
		ОбластьРасшифровкиСтроки  =  тМакет.Область(тОбласть.Верх,1,тОбласть.Низ,1);
		Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
			Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
				Если НЕ рСтроки.Значение = Неопределено Тогда
					СтруктураРасшифровкиГруппировок.Вставить(рСтроки.Ключ,рСтроки.Значение);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		СтруктураРасшифровки.Вставить("РасшифровкаЯчейки", тОбласть.Расшифровка);
		СтруктураРасшифровки.Вставить("СтруктураРасшифровкиГруппировок", СтруктураРасшифровкиГруппировок);
		СтруктураРасшифровки.Вставить("СтруктураКлючевыхРеквизитов", СтруктураКлючевыхРеквизитов);
		СтруктураРасшифровки.Вставить("СтруктураОтбираемыхАналитик", СтруктураОтбираемыхАналитик);
		СтруктураРасшифровки.Вставить("СтруктураНезаполненыхАналитик", СтруктураНезаполненыхАналитик);
		СтруктураРасшифровки.Вставить("ИдентификаторСеанса", ЭтаФорма.УникальныйИдентификатор);	
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовАдрес", ЭтаФорма[ТекущийОбъектАБ].АдресРасшифровкиГруппОтборов);
		СтруктураРасшифровки.Вставить("КэшАналитикПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		СтруктураРасшифровки.Вставить("ТзСвойстваПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].ТзСвойстваПоказателейАдрес);
		
		Возврат  СтруктураРасшифровки;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ВозможнаРасшифровкаПоФормулеРасчета(СтруктураРасшифровки)
		
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") И СтруктураРасшифровки.Свойство("Организация") И СтруктураРасшифровки.Свойство("Сценарий") И  СтруктураРасшифровки.Свойство("Проект") Тогда		
		Если  СтруктураРасшифровки.Организация = Объект.Организация И  СтруктураРасшифровки.Сценарий = Объект.Сценарий И СтруктураРасшифровки.Проект = Объект.Проект И ЭтаФорма[ТекущийОбъектАБ].ВложенныеПериоды.НайтиСтроки( Новый Структура ("ПериодОтчета",СтруктураРасшифровки.ПериодОтчета)).Количество()=1 Тогда
			Возврат Истина;
		Иначе	
			Возврат Ложь;
		КонецЕсли;		
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции	

&НаКлиенте
Процедура РазвернутьСвернутьГруппировкиСтрок(Команда)
	
	ИндексСтрокой = СтрЗаменить(Команда.Имя, "КомандаРазвернутьСвернутьУровеньСтрок", "");
		
	Попытка
		ИндексГруппировки = Число(ИндексСтрокой) - 1;
	Исключение
	КонецПопытки;
		
	ПолеТабличногоДокументаМакет.ПоказатьУровеньГруппировокСтрок(ИндексГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьГруппировкиКолонок(Команда)
	
	ИндексСтрокой = СтрЗаменить(Команда.Имя, "КомандаРазвернутьСвернутьУровеньКолонок", "");
		
	Попытка
		ИндексГруппировки = Число(ИндексСтрокой) - 1;
	Исключение
	КонецПопытки;
		
	ПолеТабличногоДокументаМакет.ПоказатьУровеньГруппировокКолонок(ИндексГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказатели(Режим)
	
	Если НЕ Заблокирован Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо перейти в режим редактирования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеПоказателейЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура();	
	Если ТипЗнч(Режим) = Тип("Строка") Тогда
		СтруктураПараметров.Вставить("Режим",Режим);
	Иначе	
		СтруктураПараметров.Вставить("Режим",Режим.Имя);
	КонецЕсли;	
	
	СписокПоказателей 	= Новый СписокЗначений;
	СписокПериодов 		= Новый СписокЗначений;
    СписокОрганизаций   = Новый СписокЗначений;
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
		
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ТекущийОбъектАБ];
	
	АдресРасшифровки 		= Неопределено;

	тОбъект                 = Новый Структура;
	тОбъект.Вставить("ВидОтчета"			,Объект.ВидОтчета);
	тОбъект.Вставить("УправлениеПериодом"	,Объект.УправлениеПериодом);
	тОбъект.Вставить("ПериодОтчета"			,Объект.ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,Объект.ПериодОкончания);
	тОбъект.Вставить("Сценарий"				,Объект.Сценарий);
	тОбъект.Вставить("Организация"			,Объект.Организация);
	тОбъект.Вставить("Проект"				,Объект.Проект);
	тОбъект.Вставить("Ссылка"				,Объект.Ссылка);
	
	Для ИндАналиики = 1 По ЧислоДопАналитик Цикл
		тОбъект.Вставить("Аналитика"+ИндАналиики	,Объект["Аналитика"+ИндАналиики]);                                                           
	КонецЦикла;

	
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				
				СтруктураРасшифровки = Новый Структура;
				
				Область =ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);		
				
				ОбластьИмя 				=  Область.Имя;
				ОбластьРасшифровка      =  Область.Расшифровка;
				
				Если  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда	
					
					ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
					//Строки
					ОбластьРасшифровкиСтроки  =  тМакет.Область(Область.Верх,1,Область.Низ,1);
					Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
						Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
							Если НЕ рСтроки.Значение = Неопределено Тогда
								СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
							КонецЕсли;	
						КонецЦикла;	
					КонецЕсли;		
					//Колонки
					ОбластьРасшифровкиКолонки =  тМакет.Область(1,Область.Лево,1,Область.Право);
					Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
						Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
							Если НЕ рКолонки.Значение = Неопределено Тогда
								СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;				
					
					СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);
					
					СтруктураРасшифровки = СтруктураОтвета.СтруктураРасшифровки;
					
					Если  СписокПоказателей.НайтиПоЗначению(СтруктураРасшифровки.ПоказательСсылка) = Неопределено Тогда
						СписокПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);
					КонецЕсли;	
					
					Если  СписокОрганизаций.НайтиПоЗначению(СтруктураРасшифровки.Организация) = Неопределено Тогда
						СписокОрганизаций.Добавить(СтруктураРасшифровки.Организация);
					КонецЕсли;	
					
					Если  СписокПериодов.НайтиПоЗначению(СтруктураРасшифровки.ПериодОтчета) = Неопределено Тогда
						СписокПериодов.Добавить(СтруктураРасшифровки.ПериодОтчета);
					КонецЕсли;	
	
				КонецЕсли;	
						
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
		
	СтруктураПараметров.Вставить("СписокПоказателей",СписокПоказателей);
	СтруктураПараметров.Вставить("СписокПериодов",СводнаяТаблицаУХ.УпорядочитьПериоды(СписокПериодов));
	СтруктураПараметров.Вставить("СписокОрганизаций",СписокОрганизаций);
	СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);
	СтруктураПараметров.Вставить("Сценарий",Объект.Сценарий);

	
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаИзмененияПоказателей", 
	СтруктураПараметров, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРучныеКорректировки(СтруктураПараметров, Владелец) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("СпособВводаКорректировки") Тогда 
		
		СтруктураПараметров.Вставить("СпособВводаКорректировки",ПредопределенноеЗначение("Перечисление.СпособыВводаКорректировок.РучнойВвод"));
		
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПоОрганизациям") Тогда
		
		СтруктураПараметров.Вставить("МетодРаспределения",ПредопределенноеЗначение("Перечисление.МетодыОбратногоРаспределения.Равномерно"));
		СтруктураПараметров.Вставить("СпособВводаКорректировки",ПредопределенноеЗначение("Перечисление.СпособыВводаКорректировок.ОбратноеРаспределение"));
		СтруктураПараметров.Вставить("ОтборОрганизацийДляРаспределения",ПредопределенноеЗначение("Перечисление.СпособыОбратногоРаспределения.ПоОрганизациямПериметра"));	
		
	КонецЕсли;
		
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Стр = "Документ.КорректировкаЗначенийПоказателей.ФормаОбъекта";
		ОткрытьФорму(Стр,СтруктураПараметров, Владелец);
	КонецЕсли
	
КонецПроцедуры //ОткрытьРучныеКорректировки()

#КонецОбласти

#Область УниверсальныеПроцессыСогласование

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОпределитьСостояниеОбъекта()
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)	
	Если ИзменитьСостояниеЗаявки(Объект.Ссылка, ВыбранноеЗначение) Тогда
		СтатусОбъекта = ВыбранноеЗначение;
		Оповестить("ИзмененыСостоянияОтчетов",, ЭтаФорма);		
	КонецЕсли;
	ОпределитьСостояниеОбъекта();
	Элементы.ФормаОтобразитьПротокол.Видимость = ЕстьПротоколируемыеОшибки();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = ПолучитьЗначениеРеквизитаФормы("СостояниеЗаявки") Тогда
		Возврат;		// Состояние не было изменено.
	Иначе
		Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
			СтруктураПараметровОповещения = Новый Структура;
			СтруктураПараметровОповещения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметровОповещения);
			ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		Иначе
			// Объект записан. Не требуется подтвержения.
		КонецЕсли;
		ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);	
	КонецЕсли;

КонецПроцедуры

// Выводит на форму панель согласования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, Элементы.ГруппаСогласование);

	Если НЕ Элементы.Найти("ГруппаСтатусыСогласования") = Неопределено Тогда 
		Элементы.ГруппаСтатусыСогласования.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Элементы.ГруппаСтатусыСогласования.РастягиватьПоГоризонтали = Истина;
		Если Не Элементы.Найти("ГруппаСтатусыСогласованияЛево") = Неопределено Тогда
			Элементы.ГруппаСтатусыСогласованияЛево.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		Если Не Элементы.Найти("ГруппаСтатусыСогласованияПраво") = Неопределено Тогда
			Элементы.ГруппаСтатусыСогласованияПраво.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
		ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
		ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
		ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
		ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	Иначе
		// Не добавляем команды согласования.
	КонецЕсли;
	ОпределитьСостояниеОбъекта();
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
		Если ЭлементСтатусОбъекта <> Неопределено Тогда
			
			ЭлементСтатусОбъекта.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Лево;
			
			Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
				ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
			Иначе
				// В прочих случаях не устанавливаем обработчик выбора.
			КонецЕсли;
		Иначе
			// Нет элемента Статус объекта.
		КонецЕсли;
	Иначе
		// Не добавляем обработчик выбора статуса.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	
	РасширениеПроцессыИСогласованиеКлиентУХ.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	
	РасширениеПроцессыИСогласованиеКлиентУХ.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	
	РасширениеПроцессыИСогласованиеКлиентУХ.СогласоватьДокумент(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	
	РасширениеПроцессыИСогласованиеКлиентУХ.ОтменитьСогласование(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	
	РасширениеПроцессыИСогласованиеКлиентУХ.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Функция ПолучитьСвойстваТекущегоОбъекта()
		
	Возврат Объект;
	
КонецФункции	

&НаСервере
Функция ДействияФормыПроверитьСервер()
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);
	СтруктураПараметров.Вставить("Проект",Объект.Проект);
    СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("Сценарий",Объект.Сценарий);
    СтруктураПараметров.Вставить("ПериодОтчета",Объект.ПериодОтчета);
    СтруктураПараметров.Вставить("ПериодОкончания",Объект.ПериодОкончания);
	СтруктураПараметров.Вставить("ОсновнаяВалюта",Объект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("ЧислоДопАналитик",МаксАналитикОтчета);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураПараметров.Вставить("Аналитика"+Инд,Объект["Аналитика"+Инд]);
	КонецЦикла;	
	
	СтруктураПараметров.Вставить("ПравилоПроверки",Объект.ПравилоПроверки);
    АналитическийБланкУХСервер.ПолучитьТаблицыТекущегоЭкземпляраОтчета(СтруктураПараметров);

	Возврат ПравилаПроверкиУХ.Проверить(СтруктураПараметров);
			
КонецФункции 

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	Если ЕстьОшибкаРазделенногоДоступа Тогда	
		ЭтотОбъект.Прочитать();	
	КонецЕсли;
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета=РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();
	РабочийОбъект.ИдентификаторСеанса=""+ЭтаФорма.УникальныйИдентификатор;
	РабочийОбъект.Регистратор  						= Объект.Ссылка;
	
	ЗаполнитьЗначенияСвойств(РабочийОбъект,Объект,,"Ссылка");
	
	РабочийОбъект.ИзмененКлючевойРеквизит		= ИзмененКлючевойРеквизит;
	РабочийОбъект.УровеньТочности				= ТекущаяТочность;
	РабочийОбъект.ТекущийДелитель				= ТекущийДелитель;
	РабочийОбъект.ЕдиницаИзмеренияОтображения	= Объект.ЕдиницаИзмерения;	
	РабочийОбъект.ДанныеПараметрикиАктуальны	= ДанныеПараметрикиАктуальны;
	
	РабочийОбъект.СостояниеДоИзменения 			= СостояниеСогласованияДоИзменения;
	
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьСправочникОбъект()

&НаСервереБезКонтекста
Функция ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы)
	
	РабочийОбъект								= ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(ДанныеФормы.РабочийОбъектАдрес);
	Если РабочийОбъект <> Неопределено Тогда
		РабочийОбъект.ИзмененКлючевойРеквизит		= ДанныеФормы.ИзмененКлючевойРеквизит;
		РабочийОбъект.ДанныеПараметрикиАктуальны	= ДанныеФормы.ДанныеПараметрикиАктуальны;
	Иначе
		// Не удалось получить данные.
	КонецЕсли;
	
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьРабочийОбъектБезКонтекста()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект)
	
	РабочийОбъектАдрес = ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(РабочийОбъект, "Объект");
	
	ИзмененКлючевойРеквизит			= РабочийОбъект.ИзмененКлючевойРеквизит;
	ДанныеПараметрикиАктуальны		= РабочийОбъект.ДанныеПараметрикиАктуальны;
	СписокРедактируемыхОбластей		= РабочийОбъект.СписокРедактируемыхОбластей;
	СписокРедактируемыхПоказателей 	= РабочийОбъект.СписокРедактируемыхПоказателей;
	
	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, Объект.ВидОтчета);
	
	Если СтруктураВалют <> Неопределено Тогда
		Для каждого СтрокаВалюта Из Объект.ДополнительныеВалюты Цикл	
			СтрокаВалюта.Пометка = СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрокаВалюта.Валюта) <> Неопределено;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСправочникОбъект()

&НаСервереБезКонтекста
Процедура ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект)
	
	 ДанныеФормы.РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ДанныеФормы.ИдентификаторРодителя);
     ДанныеФормы.ИзмененКлючевойРеквизит		= РабочийОбъект.ИзмененКлючевойРеквизит;
	 ДанныеФормы.ДанныеПараметрикиАктуальны		= РабочийОбъект.ДанныеПараметрикиАктуальны;
	
КонецПроцедуры // ПоместитьРабочийОбъектБезКонтекста()

&НаСервере
Процедура ЗаполнитьСписокВыбораВалютСервер()
		
	ТекВыбраннаяВалюта = ВыбраннаяВалюта;
		
	Элементы.ВыбраннаяВалюта.СписокВыбора.Очистить();
	
	ТекВыбраннаяВалюта = ВыбраннаяВалюта;
	
	Если ЗначениеЗаполнено(Объект.ОсновнаяВалюта) Тогда
		
		Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(Объект.ОсновнаяВалюта, Объект.ОсновнаяВалюта.Наименование);
		
	КонецЕсли;

	СтруктураВалют = УправлениеРабочимиПроцессамиУХ.ОпределитьВалютыОтчетаПоПараметрам(Объект.Сценарий, Объект.ПериодОтчета, Объект.Организация, Объект.ВидОтчета);
	Для Каждого СтрВалюта ИЗ Объект.ДополнительныеВалюты Цикл	
		Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(СтрВалюта.Валюта, СтрВалюта.Валюта.Наименование);
		СтрВалюта.Пометка = (СтруктураВалют <> Неопределено) И (СтруктураВалют.ДополнительныеВалюты.НайтиПоЗначению(СтрВалюта.Валюта) <> Неопределено);	
	КонецЦикла;
	
	Если НЕ Элементы.ВыбраннаяВалюта.СписокВыбора.НайтиПоЗначению(ТекВыбраннаяВалюта) = Неопределено Тогда
		ВыбраннаяВалюта = ТекВыбраннаяВалюта;
	Иначе
		ВыбраннаяВалюта = Объект.ОсновнаяВалюта;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначениеДелителяСервер()
	
	Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		ТекущийДелитель = 1000000;
	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		ТекущийДелитель =  1000;
	Иначе
		ТекущийДелитель =  1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвернутьДоВерсии(ВерсияДляСвертки)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписаниеВерсий.Ссылка
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОписаниеВерсий КАК ОписаниеВерсий
		|		ПО ВерсииЗначенийПоказателей.Владелец = ОписаниеВерсий.Ссылка
		|ГДЕ
		|	ВерсииЗначенийПоказателей.Регистратор ССЫЛКА Документ.РучныеКорректировки
		|	И ОписаниеВерсий.ЭкземплярОтчета = &ЭкземплярОтчета
		|	И ОписаниеВерсий.Код <= &КодОписанияВерсии
		|УПОРЯДОЧИТЬ ПО
		|	ОписаниеВерсий.Код";
		
		Запрос.УстановитьПараметр("ЭкземплярОтчета", РабочийОбъект.Ссылка);
		Запрос.УстановитьПараметр("КодОписанияВерсии", ВерсияДляСвертки.Код);
		
		ТаблицаОписанийВерсийРучныхОпераций = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаОписанийВерсийРучныхОпераций=Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Если ТаблицаОписанийВерсийРучныхОпераций.Количество() = 0 Тогда
		РабочийОбъект.СвернутьВерсии(Неопределено, ВерсияДляСвертки);
	Иначе
		РабочийОбъект.СвернутьВерсии(Неопределено, ТаблицаОписанийВерсийРучныхОпераций[0].Ссылка);
		Для Инд = 0 По ТаблицаОписанийВерсийРучныхОпераций.Количество() - 2 Цикл
			РабочийОбъект.СвернутьВерсии(ТаблицаОписанийВерсийРучныхОпераций[Инд].Ссылка, ТаблицаОписанийВерсийРучныхОпераций[Инд + 1].Ссылка);
		КонецЦикла;
		РабочийОбъект.СвернутьВерсии(ТаблицаОписанийВерсийРучныхОпераций[ТаблицаОписанийВерсийРучныхОпераций.Количество() - 1].Ссылка, ВерсияДляСвертки);
	КонецЕсли;
	
	РабочийОбъект.СписокИспользуемыхВерсий=Неопределено;
	РабочийОбъект.ИнициализироватьКонтекст();
	
КонецПроцедуры // ОбработатьУдалениеВерсий()

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
	
КонецПроцедуры

// Получает способ заполнения из режима РежимЗаполненияВход и заполняет 
//по этому способу отчет РабочийОбъект.
&НаСервере
Процедура ЗаполнитьОтчетПоРежиму(РежимЗаполненияВход, РабочийОбъект)
	
	Если ЗначениеЗаполнено(РежимЗаполненияВход) Тогда
		// Режим указан явно. Получим способ заполнения из него.
		Если РежимЗаполненияВход = "ПоследнийСпособ" Тогда
			
			СпособЗаполнения = РабочийОбъект.СпособФормированияОтчета;
			СпособФормированияРучноеЗаполнение = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
			ЭтоРучноеЗаполнение = (СпособЗаполнения = СпособФормированияРучноеЗаполнение);
			Если (НЕ ЗначениеЗаполнено(СпособЗаполнения)) ИЛИ ЭтоРучноеЗаполнение Тогда
				// Способ определить не удалось, либо отчет заполняется вручную. Заполним по умолчанию.
				РабочийОбъект.ПутьКФайлуADO = РабочийОбъект.ФайлИмпорта;
				СпособЗаполнения = Неопределено;
				РабочийОбъект.ЗаполнитьОтчетПоУмолчанию();
				
			Иначе
				
				РабочийОбъект.ЗаполнитьОтчет(СпособЗаполнения);
				
			КонецЕсли;
			
		Иначе
			// Получим способ заполнения из режима.
			СпособЗаполнения = Перечисления.СпособыФормированияОтчетов[РежимЗаполненияВход];
			РабочийОбъект.ЗаполнитьОтчет(СпособЗаполнения);
					
		КонецЕсли;
			
	Иначе
		// Режим не указан. Заполним отчет по умолчанию.
		СпособЗаполнения = Неопределено;
		РабочийОбъект.ЗаполнитьОтчетПоУмолчанию();
		Если РабочийОбъект.ДополнительныеСвойства.Свойство("АдресТрассировкиРасчета") Тогда
			АдресТрассировкиРасчета = РабочийОбъект.ДополнительныеСвойства.АдресТрассировкиРасчета;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьРабочийОбъектПередЗаполнением(РежимЗаполненияВход, РабочийОбъектВход)
	РезультатФункции = Истина;
	Если РежимЗаполненияВход = "АвтоматическиСвернувПоАналитикам" Тогда
		// Поиск пустых аналитик.
		ЕстьПустыеАналитикиОтчета = Ложь;
		Для Инд = 1 По ЧислоДопАналитик Цикл
			ТекВидОтчета = РабочийОбъектВход.ВидОтчета["ВидАналитики" + Инд];
			ТекАналитика = РабочийОбъектВход["Аналитика" + Инд];
			Если (ЗначениеЗаполнено(ТекВидОтчета)) И (НЕ ЗначениеЗаполнено(ТекАналитика)) Тогда
				ЕстьПустыеАналитикиОтчета = Истина;
				Прервать;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
		// Когда нет пустых аналитик, считаем проверку проваленной.
		Если НЕ ЕстьПустыеАналитикиОтчета Тогда
			ТекстСообщения = НСтр("ru = 'Заполнение по аналитикам отчетов допустимо только в случае, когда одна из таких аналитик не задана'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	ИначеЕсли РежимЗаполненияВход = "АвтоматическиКонсолидация" Тогда
		// Проверка, что организация является консолидирующей.
		ЭтоКонсолидирующаяОрганизация = УправлениеРабочимиПроцессамиУХ.ОрганизацияЯвляетсяКонсолидирующей(
			РабочийОбъектВход.Организация, РабочийОбъектВход.Сценарий, РабочийОбъектВход.ПериодОтчета);
		Если Не ЭтоКонсолидирующаяОрганизация Тогда
			ТекстСообщения = НСтр("ru = 'Организация %Организация% не является консолидирующей. Консолидация по периметру доступна только для консолидирующих организационных единиц.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(РабочийОбъектВход.Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;		// Для прочих случаев не осуществляем проверку.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции


// Выполняет заполнение объекта отчета РабочийОбъект в режиме РежимЗаполнения. Когда режим не
// указан - выполняется заполнение по умолчанию. Когда не указан рабочий объект - будет считан
// снова.
&НаСервере
Процедура ЗаполнитьДокумент(РежимЗаполнения = Неопределено, ПериодичностьСвертывания = Неопределено, Знач РабочийОбъект = Неопределено)
	
	Если РабочийОбъект = Неопределено Тогда
		РабочийОбъект = ПолучитьРабочийОбъект();
	Иначе
		// Рабочий объект задан параметром функции.
	КонецЕсли;	
	
	Если НЕ ПроверитьРабочийОбъектПередЗаполнением(РежимЗаполнения,РабочийОбъект) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверка на включение режима редактирования перед заполнением.
	Если Не Заблокирован Тогда		
		Заблокирован = ПодготовитьОтчетДляРедактирования();	
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка = Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;	
			Элементы.ПанельКомандыТекущегоОтображения.Видимость = Заблокирован;			
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСобытийЗагрузки.Очистить();
	
	РабочийОбъект.ПутьКФайлуADO = ПутьКФайлуADO;
	
	// Непосредственное заполнение отчета выбранным способом.
	ЗаполнитьОтчетПоРежиму(РежимЗаполнения, РабочийОбъект);
	ОбработатьРезультатРасчетов(РабочийОбъект);
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	ОбновитьМакет(,,Истина);
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДокумент(Обновлять = Истина)
			
	Если Не Заблокирован Тогда		
		Заблокирован=ПодготовитьОтчетДляРедактирования();	
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка=Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;	
			Элементы.ПанельКомандыТекущегоОтображения.Видимость = Заблокирован;			
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Периоды = ПериодыУХ.ПолучитьПодчиненныеПериоды(Объект.ПериодОтчета,Объект.ПериодОкончания,Объект.ПериодОтчета.Периодичность);
	СтруктураДопОтборов = Новый Структура;
	Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(Объект["Аналитика"+Инд]) Тогда
			СтруктураДопОтборов.Вставить(Объект.ВидОтчета["ВидАналитики"+Инд].Код,Объект["Аналитика"+Инд]);
		КонецЕсли;		
	Конеццикла;	
	
	АналитическийБланкУХСервер.ОчиститьДанныеТекущегоЭкземпляраОтчета(Объект.ВидОтчета,Объект.Сценарий,Периоды,Объект.Организация,Объект.Проект,СтруктураДопОтборов,ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес,ЭтаФорма.УникальныйИдентификатор);
	ЗаписатьИзмененныеПоказателиБланк(Истина,Истина,Истина);	
	
	Если Обновлять Тогда
		ОбновитьМакет(,,Истина);
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДокумент()

// Отображает протокол, если есть протоколирумые ошибки, или 
// если произошли события загрузки.
&НаСервере
Процедура ОбработатьРезультатРасчетов(РабочийОбъект)
	
	Если ТипЗнч(РабочийОбъект.ТаблицаСобытийЗагрузки)=Тип("ТаблицаЗначений") Тогда	
		ЗначениеВРеквизитФормы(РабочийОбъект.ТаблицаСобытийЗагрузки,"ТаблицаСобытийЗагрузки");	
	Иначе	
		ТаблицаСобытийЗагрузки.Очистить();	
	КонецЕсли;
	
	Элементы.ФормаОтобразитьПротокол.Видимость = ЕстьПротоколируемыеОшибки();	
	
КонецПроцедуры // ОбработатьРезультатРасчетов() 

//Процедура проверяет, включен ли режим редактирования для документа,
//и разрешает/запрещает редактировать кнопки модификации и табличное поле.
//
&НаСервере
Процедура УправлятьДоступностьюЭлементовФормы(Редактирование = Неопределено)
		
	Элементы.ПолеТабличногоДокументаМакет.Редактирование = Заблокирован;
	Элементы.ПримечаниеАналитическогоБланка.Доступность     = Заблокирован;
	
	Для ИндБланка = 1 По Объект.ШаблонОтчета.ДополнительныеБланки.Количество() Цикл
		ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаМакет" + ИндБланка;
		
		Если Элементы.Найти(ИмяПоляТабличногоДокумента) <> неопределено тогда
			Элементы[ИмяПоляТабличногоДокумента].Редактирование = Заблокирован;
		КонецЕсли;
		
		Элементы["ПримечаниеАналитическогоБланка"+ИндБланка].Доступность     = Заблокирован;
		
	КонецЦикла;
			
	Элементы.ФормаРаботаСВерсиями.Доступность=Объект.ВидОтчета.СохранятьИсториюИзменений;
	
	Если НЕ Константы.ПроверятьУтверждениеДанных.Получить() Тогда	
		Элементы.ЧтениеНеактуальныхЗаписей.Пометка=Истина;
		Элементы.ЧтениеНеактуальныхЗаписей.Доступность=Ложь;	
	Иначе	
		Элементы.ЧтениеНеактуальныхЗаписей.Пометка=Объект.ЧтениеНеактуальныхЗаписей;	
	КонецЕсли;
	
	Элементы.ВСправочнике.Доступность=ЗначениеЗаполнено(Объект.ФайлИмпорта);

КонецПроцедуры
		
&НаСервере
Функция ПодготовитьОтчетДляРедактирования(РабочийДокумент=Неопределено)
				
	Попытка	
		
		Если НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиПоБланкуОтчета(Объект.ШаблонОтчета,Объект.Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь")) Тогда
			 Возврат Ложь;
		КонецЕсли;
		
		Если ЕстьОшибкаРазделенногоДоступа Тогда	
			ОбновитьСУчетомВерсийСервер();		
		КонецЕсли;
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Заблокирован=Истина;
		
		ЕстьОшибкаРазделенногоДоступа=Ложь;				
		ПризнакРедактированияФормы  = Истина;
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать экземпляр отчета для редактирования:
		|		%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		ЕстьОшибкаРазделенногоДоступа=Истина;
		
		Возврат Ложь;
		
	КонецПопытки;
			
	Возврат Истина;
					
КонецФункции // ПодготовитьОтчетДляРедактирования()

&НаСервере
Процедура ПеречитатьДанныеОбъекта(РабочийОбъект)
	
	РабочийОбъект.ДанныеРаскрытияИнициализированы=Ложь;
	РабочийОбъект.МассивЗагруженныхГруппРаскрытия=Новый Массив;
	РабочийОбъект.ИнициализироватьКонтекст();
	РабочийОбъект.ИнициализироватьКонтекстРаскрытия();
	ПоместитьРабочийОбъект(РабочийОбъект);	
		
КонецПроцедуры // ПеречитатьДанныеОбъекта()

&НаСервере
Функция ЗаписатьЭкземплярОтчета(ПродолжатьРаботу=Ложь,Разблокировать=Истина,ТрассировкаРасчета=Ложь,Отказ = Ложь)
	
	Попытка	
		
		Если ИзмененКлючевойРеквизит Тогда	
			
			//Скопировали и записываем новый по реквизитам источника
			СтруктураТекущихКлючевыхРеквизитов = Новый Структура;
			СтруктураТекущихКлючевыхРеквизитов.Вставить("Сценарий",Объект.Сценарий);
			СтруктураТекущихКлючевыхРеквизитов.Вставить("Организация",Объект.Организация);
			СтруктураТекущихКлючевыхРеквизитов.Вставить("Проект",Объект.Проект);
			СтруктураТекущихКлючевыхРеквизитов.Вставить("ПериодОтчета",Объект.ПериодОтчета);
			СтруктураТекущихКлючевыхРеквизитов.Вставить("ПериодОкончания",Объект.ПериодОкончания);			
			
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				СтруктураТекущихКлючевыхРеквизитов.Вставить("Аналитика"+Инд,Объект["Аналитика"+Инд]);
			КонецЦикла;	
			
			Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗАполнено(мКопируемыйДокумент) Тогда         //Записываем скопированный документ	
				ЗаписатьРабочийОбъект(ПродолжатьРаботу,Разблокировать,ТрассировкаРасчета);
				АналитическийБланкУХСервер.ОбработатьИзменениеКлючейВерсии(Объект.Ссылка,мКопируемыйДокумент,СтруктураТекущихКлючевыхРеквизитов);					
				ИзмененКлючевойРеквизит = Ложь;
				Возврат Истина;	
			ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) И НЕ  ЗначениеЗАполнено(мКопируемыйДокумент)  Тогда 	 //Просто меняем реквизит у текущего документа  	
				АналитическийБланкУХСервер.ОбработатьИзменениеКлючейВерсии(Объект.Ссылка,Неопределено,СтруктураТекущихКлючевыхРеквизитов);
				ИзмененКлючевойРеквизит = Ложь;
				Возврат Истина;	
			КонецЕсли;								
			ИзмененКлючевойРеквизит = Ложь;	
		КонецЕсли;	
		
		// Если текущий статус Не заполнен/Возвращен/Записан с ошибкой, тогда переведём в Черновик.
		ТекущийСтатус = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка);
		РазрешенныеСтатусы = Новый Массив;
		РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.Запланирован);
		РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.ЗаписанСОшибкой);
		РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.Возвращен);
		Если РазрешенныеСтатусы.Найти(ТекущийСтатус) <> Неопределено Тогда
			НовоеСостояние = Перечисления.СостоянияОтчетов.Выполняется;
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Объект.Ссылка, НовоеСостояние);
		Иначе
			// Для прочих статусов не выполняем эту операцию.
		КонецЕсли; 
		
		ЗаполнитьПримечания();
		
		Если ЗаписатьРабочийОбъект(ПродолжатьРаботу,Разблокировать,ТрассировкаРасчета) Тогда			
			ЗаписатьИзмененныеПоказателиБланк();	
			Возврат Истина;			
		КонецЕсли;
			
	Исключение	  
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные экземпляра отчета по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		АдресХранилищаДанныхТрассировки="";
		Отказ  = Истина;
		Возврат Ложь;	
		
	КонецПопытки;
	
КонецФункции // ЗаписатьЭкземплярОтчета()

&НаСервере
Функция ЗаписатьИзмененныеПоказатели(ПродолжатьРаботу=Ложь,Разблокировать=Истина,ТрассировкаРасчета=Ложь,Отказ = Ложь)
	
	Попытка	
		// Если текущий статус Не заполнен/Возвращен/Записан с ошибкой, тогда переведём в Черновик.
		ТекущийСтатус = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.Ссылка);
		РазрешенныеСтатусы = Новый Массив;
		РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.Запланирован);
		РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.ЗаписанСОшибкой);
		РазрешенныеСтатусы.Добавить(Перечисления.СостоянияОтчетов.Возвращен);
		Если РазрешенныеСтатусы.Найти(ТекущийСтатус) <> Неопределено Тогда
			НовоеСостояние = Перечисления.СостоянияОтчетов.Выполняется;
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Объект.Ссылка, НовоеСостояние);
		Иначе
			// Для прочих статусов не выполняем эту операцию.
		КонецЕсли; 
		
		ЗаполнитьПримечания();
		ЗаписатьИзмененныеПоказателиБланк();	
		Возврат Истина;		
		
	Исключение	  
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные экземпляра отчета по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		АдресХранилищаДанныхТрассировки="";
		Отказ  = Истина;
		Возврат Ложь;	
		
	КонецПопытки;
	
КонецФункции // ЗаписатьЭкземплярОтчета()

&НаСервере
Функция ЗаписатьРабочийОбъект(ПродолжатьРаботу=Ложь,Разблокировать=Истина,ТрассировкаРасчета=Ложь)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если НЕ РабочийОбъект.ОтчетИнициализирован Тогда
		
		Если ТрассировкаРасчета Тогда
			
			РабочийОбъект.ИдентификаторФормыВызоваТрассировки=ЭтаФорма.УникальныйИдентификатор;
			
		КонецЕсли;
		
		РабочийОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ТрассировкаРасчета Тогда
			
			АдресХранилищаДанныхТрассировки=РабочийОбъект.АдресХранилищаДанныхТрассировки;
			
		Иначе
			
			АдресХранилищаДанныхТрассировки="";
			
		КонецЕсли;	
		
		Если НЕ ПродолжатьРаботу Тогда
			
			Если РабочийОбъект.Заблокирован() И Разблокировать Тогда
				РабочийОбъект.Разблокировать();
			КонецЕсли;
			
			ПоместитьРабочийОбъект(РабочийОбъект);
			
		Иначе
			
			ПеречитатьДанныеОбъекта(РабочийОбъект);
			
		КонецЕсли;	
		
		ПеревестиНезаполненныйОтчетВЧерновик(РабочийОбъект);
		Возврат Истина;
		
	КонецЕсли;	
	
	Попытка
		
		РабочийОбъект.СписокИспользуемыхВерсий=Неопределено;
		
		Если ТрассировкаРасчета Тогда
			
			РабочийОбъект.ИдентификаторФормыВызоваТрассировки=ЭтаФорма.УникальныйИдентификатор;
			
		КонецЕсли;
		
		Если НЕ Объект.ПометкаУдаления Тогда
			РабочийОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			// Помеченный на удаление не перепроводим.
		КонецЕсли;
		
		Если НЕ ПродолжатьРаботу Тогда
			
			Если РабочийОбъект.Заблокирован() И Разблокировать Тогда
				РабочийОбъект.Разблокировать();
			КонецЕсли;

			ПоместитьРабочийОбъект(РабочийОбъект);
			
		Иначе
			
			ПеречитатьДанныеОбъекта(РабочийОбъект);
			
			Если ТрассировкаРасчета Тогда
				
				АдресХранилищаДанныхТрассировки=РабочийОбъект.АдресХранилищаДанныхТрассировки;
				
			Иначе
				
				АдресХранилищаДанныхТрассировки="";
				
			КонецЕсли;
	
			Записать();
				
		КонецЕсли;
		
		ПеревестиНезаполненныйОтчетВЧерновик(РабочийОбъект);
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные экземпляра отчета по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		АдресХранилищаДанныхТрассировки="";
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьЭкземплярОтчета()

&НаКлиенте
Процедура ЗаписатьИПродолжить(Команда)
	
	Если  ЗаписатьЭкземплярОтчета(Истина) Тогда	
		Оповестить("СостояниеЗаявкиПриИзменении");
		Модифицированность=Ложь;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
		
	Если СозданаВФормеГрупповогоРедактирования Тогда
		
		Закрыть(РабочийОбъектАдрес);
		
	Иначе
		
		Если ЗаписатьЭкземплярОтчета() Тогда
			
			Модифицированность=Ложь;	
			ОповеститьОбИзменении(Объект.Ссылка);			
			Заблокирован=Ложь;		
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлючевыеРеквизитыДокумента(СтруктураРеквизиты)
	
	Если ВыбраннаяВалюта <> СтруктураРеквизиты.ОсновнаяВалюта Тогда	
		ИзмененКлючевойРеквизит = Истина;	
		ВыбраннаяВалюта = СтруктураРеквизиты.ОсновнаяВалюта;			
	КонецЕсли;
	
	РабочийОбъект = ПолучитьРабочийОбъект();	
	РабочийОбъект.ДополнительныеВалюты.Очистить();	
	
	Для каждого СтрокаВалюта Из СтруктураРеквизиты.ДополнительныеВалюты Цикл		
		НоваяСтрока = РабочийОбъект.ДополнительныеВалюты.Добавить();
		НоваяСтрока.Валюта = СтрокаВалюта;			
	КонецЦикла;
	
	СтруктураРеквизиты.Удалить("ДополнительныеВалюты");
	
	ЗаполнитьЗначенияСвойств(РабочийОбъект, СтруктураРеквизиты);
	РабочийОбъект.ШаблонОтчета = СтруктураРеквизиты.БланкОтчета;
		
	РабочийОбъект.УровеньТочности	= ?(ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета.УровеньТочностиПоУмолчанию),РабочийОбъект.ШаблонОтчета.УровеньТочностиПоУмолчанию,0);
	РабочийОбъект.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию),РабочийОбъект.ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию,Перечисления.ПорядкиОкругленияОтчетности.Окр1);
			
	РабочийОбъект.ПравилоОбработки	= СтруктураРеквизиты.ПравилоОбработки;
	
	ТипБД=УправлениеОтчетамиУХ.ОпределитьТипБД(РабочийОбъект.ПравилоОбработки);
	
	РабочийОбъект.ИспользуемаяИБ	= СтруктураРеквизиты.ИспользуемаяИБ;
		
	ТекущаяТочность = РабочийОбъект.УровеньТочности;
	
	Структура = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(РабочийОбъект.ВидОтчета, РабочийОбъект.Сценарий, РабочийОбъект.Организация, РабочийОбъект.ПериодОтчета);
	Структура.Свойство("БланкДляОтображенияМногопериодный", 		РабочийОбъект.БланкИмпорта);
	
	МодульСогласованияДокументовУХ.ИзменитьСостояниеСогласованияОбъекта(РабочийОбъект, Перечисления.СостоянияОтчетов.Запланирован);
	
	ЕстьАналитики=Ложь;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		ВидАналитики = РабочийОбъект.ВидОтчета["ВидАналитики"+Инд];
		Если Не ПустаяСтрока(ВидАналитики) Тогда
			ЭтаФорма["ВидАналитики"+Инд]=ВидАналитики;
			ЭтаФорма["ТипАналитики"+Инд]=ВидАналитики.ТипЗначения;
			ЕстьАналитики=Истина;	
		КонецЕсли;		
	КонецЦикла;
	
	РабочийОбъект.СпособВывода=?(РабочийОбъект.ШаблонОтчета.РежимБланка = 1,"СводнаяТаблица","Бланк "+РабочийОбъект.ШаблонОтчета.Наименование);
	
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
	ЗаполнитьСписокВыбораВалютСервер();
		
	Инициатор = РабочийОбъект.Исполнитель;
	Согласующий = РабочийОбъект.Проверяющий;
	
	ИспользуетсяМарщрутСогласования = Неопределено;
	УправлениеПроцессамиСогласованияУХ.ОпределитьИспользованиеМаршрутаСогласования(Согласующий, ИспользуетсяМарщрутСогласования);
		
	СохранятьИсториюИзменений=РабочийОбъект.ВидОтчета.СохранятьИсториюИзменений;
	
	ОбновитьВидимостьПанелиРаскрытияИДопЯзыков(РабочийОбъект);
	
	Если РабочийОбъект.мКопирование=Истина Тогда	
		ЗаполнитьДокумент("ПоследнийСпособ",,РабочийОбъект);		
	КонецЕсли;
	
	Для Каждого ПараметрВидаОтчета Из СтруктураРеквизиты.ПараметрыОтчета Цикл
		НоваяСтрокаПараметр 				= Объект.ПараметрыОтчета.Добавить();
		НоваяСтрокаПараметр.Код 			= ПараметрВидаОтчета.Код;
		НоваяСтрокаПараметр.Наименование 	= ПараметрВидаОтчета.Наименование;
		НоваяСтрокаПараметр.Значение 		= ПараметрВидаОтчета.Значение;
		НоваяСтрокаПараметр.ЗначениеСтрока 	= ПараметрВидаОтчета.ЗначениеСтрока;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьКлючевыеРеквизитыДокумента()

// Устанавливает доступность элементов в зависимости от флага 
// СозданаВФормеГрупповогоРедактирования, а также выводит
// состояние отчета.
&НаКлиенте
Процедура НастроитьДоступностьИОтобразитьСостояниеОтчета()
	
	Если СозданаВФормеГрупповогоРедактирования Тогда	
		Элементы.Редактирование.Доступность = Ложь;
		Элементы.Редактирование.Пометка = Заблокирован;
		Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;
		Элементы.ОсновныеРеквизиты.ТолькоПросмотр = Истина;
		Элементы.НастройкиОтчета.ТолькоПросмотр = Истина;
		Элементы.ДополнительныеРеквизиты.ТолькоПросмотр = Истина;			
	КонецЕсли;
	
	Если (ТипЗнч(Параметры.МассивПоказателей)=Тип("ФиксированныйМассив")) И (ПолеТабличногоДокументаМакет.ВысотаТаблицы > 0) Тогда	
		ВыделитьОбластиПоказателей(Параметры,Параметры.ПериодРасшифровки,Параметры.СтруктураОтбора);		
	КонецЕсли;
	
	ОтобразитьСостояниеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеОбластейПоказателей() Экспорт
	
	Для Каждого СтрОбласть ИЗ ТабВыделенныхОбластей Цикл
		
		ОбластьПоказателя=ПолеТабличногоДокументаМакет.Область(СтрОбласть.ИмяОбласти);
		
		ОбластьПоказателя.Обвести(СтрОбласть.ДанныеОформления[0].Значение,
							СтрОбласть.ДанныеОформления[1].Значение,
							СтрОбласть.ДанныеОформления[2].Значение,
							СтрОбласть.ДанныеОформления[3].Значение);
		
		ОбластьПоказателя.ЦветРамки=СтрОбласть.ДанныеОформления[4].Значение;							
		
	КонецЦикла;
	
	ТабВыделенныхОбластей.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьГраницыОбласти(ОбластьПоказателя)
	
	НоваяСтрока=ТабВыделенныхОбластей.Добавить();
	НоваяСтрока.ИмяОбласти=ОбластьПоказателя.Имя;
	
	ДанныеОформления=Новый СписокЗначений;
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСлева);
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСверху);
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСправа);
	ДанныеОформления.Добавить(ОбластьПоказателя.ГраницаСнизу);
	ДанныеОформления.Добавить(ОбластьПоказателя.ЦветРамки);
	
	НоваяСтрока.ДанныеОформления=ДанныеОформления;
		
КонецПроцедуры // СохранитьГраницыОбласти()

&НаКлиенте
Функция ПолучитьТекущийЗаголовок() Экспорт
			
	РезультатФункции = ВернутьЗаголовокФормы(Объект,ВыбраннаяВалюта);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = ПолучитьТекущийЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроцессИмпорта(времФайлИмпорта, времДатаИзменения, НуженПароль = Ложь, ИмяЛиста = Неопределено, Пароль = Неопределено, НастройкаИмпортаФайлаФНС = Неопределено)
		
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если Не Заблокирован Тогда	
		
		Заблокирован=ПодготовитьОтчетДляРедактирования(РабочийОбъект);
		
		Если Заблокирован Тогда
			Элементы.Редактирование.Пометка=Истина;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь;
			Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;	
			Элементы.ПанельКомандыТекущегоОтображения.Видимость = Заблокирован;	
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РабочийОбъект.ВерсияХранимогоФайла=ВерсияХранимогоФайла;
	
	ПротоколируемыеСобытияУХ.Начать(РабочийОбъект);
	
	РабочийОбъект.ИмпортироватьДанные(времФайлИмпорта, времДатаИзменения, ИмяЛиста, Пароль);
	
	РабочийОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.Импорт;
	
	МодульСогласованияДокументовУХ.УстановитьСостояниеСогласованияПослеЗаполнения(РабочийОбъект);
	
	РабочийОбъект.ИзмененияВДиалоге = Истина;
	
	Объект.ФайлИмпорта=РабочийОбъект.ФайлИмпорта;
	Объект.ДатаИзменения=РабочийОбъект.ДатаИзменения;
	
	Элементы.ВСправочнике.Доступность=ЗначениеЗаполнено(Объект.ФайлИмпорта);
	
	РабочийОбъект.ЗавершитьПротоколЗагрузки();
	
	ОбработатьРезультатРасчетов(РабочийОбъект);
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	ОбновитьМакет(,,Истина);
	
КонецПроцедуры

// Загружает из временного хранилища АдресХранилищаВход, при необходимости
// создавая хранимую версию из файла с параметрами ИмяФайлаВход, ПолноеИмяФайлаВход, 
// ДатаИзмененияВход, РазмерВход
&НаКлиенте
Процедура СчитатьФайлИзХранилища(ИмяФайлаВход, ПолноеИмяФайлаВход, ДатаИзмененияВход, РазмерВход, АдресХранилищаВход)
	
	времФайлИмпорта = Неопределено;
	времДатаИзменения = Неопределено;
	
	СтруктураДляОтбора = Новый Структура("Организация, Сценарий, ПериодСценария, ВидОтчета");
	
	Для Инд = 1 По ЧислоДопаналитик Цикл
		СтруктураДляОтбора.Вставить("Аналитика" + Инд);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДляОтбора, Объект);
	
	СтруктураДляОтбора.ПериодСценария = Объект.ПериодОтчета;
	
	СписокЛистов = Новый СписокЗначений;
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("АдресВременногоХранилища",	 АдресХранилищаВход);
	СтруктураФайла.Вставить("НаименованиеФайла",		 ИмяФайлаВход);
	СтруктураФайла.Вставить("ПолноеИмяНаДиске",			 ПолноеИмяФайлаВход);
	СтруктураФайла.Вставить("РазмерФайла",				 РазмерВход);
	СтруктураФайла.Вставить("ДатаИзмененияФайла",		 ДатаИзмененияВход);
	СтруктураФайла.Вставить("СписокЛистов",				 СписокЛистов);
	ВерсияХранимогоФайла = ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию_УР(СтруктураДляОтбора, СтруктураФайла, , времФайлИмпорта, времДатаИзменения);
	
	Если ЗначениеЗаполнено(ВерсияХранимогоФайла) Тогда
		
		СписокЛистов = СтруктураФайла.СписокЛистов;
		
		Если СписокЛистов.Количество() = 1 И НЕ СписокЛистов[0].Пометка Тогда
			
			ИмяЛиста    = СписокЛистов[0].Значение;
			Пароль      = Неопределено;
			НуженПароль = Ложь;
			
		ИначеЕсли СписокЛистов.Количество() > 0 Тогда
			
			СтруктураПараметровФормы = Новый Структура;
			СтруктураПараметровФормы.Вставить("СписокЛистов", СписокЛистов);
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("СтруктураФайла", СтруктураФайла);
			СтруктураДополнительныхПараметров.Вставить("времФайлИмпорта", времФайлИмпорта);
			СтруктураДополнительныхПараметров.Вставить("времДатаИзменения", времДатаИзменения);
			ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьИзФайлаНаДиске_Завершение", ЭтотОбъект, СтруктураДополнительныхПараметров);
			Имя = "ОбщаяФорма.ФормаВыбораЛистаИПароля";
			ОткрытьФорму(Имя, СтруктураПараметровФормы, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;			
			
		Иначе
			
			ИмяЛиста    = Неопределено;
			Пароль      = Неопределено;
			НуженПароль = Ложь;
			
		КонецЕсли;
		
		ЗапуститьПроцессИмпорта(времФайлИмпорта, времДатаИзменения, НуженПароль, ИмяЛиста, Пароль);
				
	Иначе	
		ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(НСтр("ru = 'Не удалось сохранить импортируемый файл'"), НСтр("ru = 'Импорт из файла'"));		
	КонецЕсли;
	
	ПутьКФайлуADO="";
	
КонецПроцедуры


// Заполняет документ из файла ADO, если задан фильтр ФильтрФайловADOВход, а также
// считываени из хранилища с адресом АдресХранилищаВход файл ФайлВход.
&НаКлиенте
Процедура ЗаполнитьДокументADOИСчитатьФайл(ФильтрФайловADOВход, ПервыйЭлементИмяВход, ФайлВход, АдресХранилищаВход)
	
	Если НЕ ПустаяСтрока(ФильтрФайловADOВход) Тогда
		ПутьКФайлуADO = ПервыйЭлементИмяВход;
		ЗаполнитьДокумент("АвтоматическиПоПравилуОбработки");
		Возврат;
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Файл", ФайлВход);
	ОписаниеПомещениеФайла = Новый ОписаниеОповещения("ПоместитьФайл_Завершение", ЭтотОбъект, СтруктураПараметров);
	НачатьПомещениеФайла(ОписаниеПомещениеФайла, АдресХранилищаВход, ПервыйЭлементИмяВход, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Отображает выбор файла из справочника для импортирования данных.
&НаКлиенте
Процедура ПоказатьВыборФайлаИзСправочника()
	
	СтруктураДляОтбора = Новый Структура("Владелец, Сценарий, ПериодСценария, ВидОтчета");
	
	Для Инд = 1 По ЧислоДопаналитик Цикл
		СтруктураДляОтбора.Вставить("Аналитика" + Инд);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДляОтбора, Объект);
	
	СтруктураДляОтбора.Владелец       = Объект.Организация;
	СтруктураДляОтбора.ПериодСценария = Объект.ПериодОтчета;
	
	СтруктураФайл = Неопределено;
	
	ПараметрыФормы = Новый Структура("ХранимыйФайл, ВерсияХранимогоФайла, СтруктураОтбора", 
	Объект.ФайлИмпорта, объект.ДатаИзменения, СтруктураДляОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ДействияФормыВСправочникеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ХранимыеФайлыОрганизаций.Форма.ВыборФайлаИПериодаУправляемая",
	ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Заполняет текущий отчет из файла с именем ИмяФайлаВход по фильтру
// ФильтрФайловADOВход, записывая его во временное хранилище с адресом АдресХранилищаВход.
&НаКлиенте
Процедура СчитатьФайлВОтчет(ИмяФайлаВход, ФильтрФайловADOВход = "", АдресХранилищаВход)
	
	Файл = Новый Файл(ИмяФайлаВход);
	ДополнительныеПараметры=Новый Структура;
	ДополнительныеПараметры.Вставить("ФильтрФайловADOВход",	ФильтрФайловADOВход);
	ДополнительныеПараметры.Вставить("АдресХранилищаВход",	АдресХранилищаВход);
	ДополнительныеПараметры.Вставить("ИмяФайлаВход",		ИмяФайлаВход);
	ДополнительныеПараметры.Вставить("Файл",				Файл);

	ОписаниеОповещения=Новый ОписаниеОповещения("СчитатьФайлПослеПроверкиСуществования",ЭтотОбъект,ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СчитатьФайлПослеПроверкиСуществования(Существует, ДопПараметры)Экспорт
	
	Если НЕ Существует Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения=Новый ОписаниеОповещения("ПолучитьВремяИзмененияЗавершение",ЭтотОбъект,ДопПараметры);
	ДопПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВремяИзмененияЗавершение(ВремяИзменения, ДопПараметры)Экспорт
	
	ДопПараметры.Вставить("ДатаИзмененияФайла",ВремяИзменения);
	ОписаниеОповещения=Новый ОписаниеОповещения("ПолучитьРазмерЗавершение",ЭтотОбъект,ДопПараметры);
	ДопПараметры.Файл.НачатьПолучениеРазмера(ОписаниеОповещения);

КонецПроцедуры // ПолучитьРазмерФайлаЗавершение()

&НаКлиенте
Процедура ПолучитьРазмерЗавершение(Размер, ДопПараметры)Экспорт
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ИмяФайла",			ДопПараметры.Файл.Имя);
	ИнформацияОФайле.Вставить("ДатаИзмененияФайла",	ДопПараметры.ДатаИзмененияФайла);
	ИнформацияОФайле.Вставить("РазмерФайла",		Размер);
	
	ТекстВопроса = ПовторныйИмпортФайла(ИнформацияОФайле, Объект.Ссылка);
	Если (Не ПустаяСтрока(ТекстВопроса)) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФильтрФайловADO", 	ДопПараметры.ФильтрФайловADOВход);
		СтруктураПараметров.Вставить("Файл", 				ДопПараметры.Файл);
		СтруктураПараметров.Вставить("АдресХранилища", 		ДопПараметры.АдресХранилищаВход);
		СтруктураПараметров.Вставить("ПервыйЭлементИмя", 	ДопПараметры.ИмяФайлаВход);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеПерезаписьВерсии_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 60);
	Иначе
		
		ЗаполнитьДокументADOИСчитатьФайл(ДопПараметры.ФильтрФайловADOВход, ДопПараметры.ИмяФайлаВход, ДопПараметры.Файл, ДопПараметры.ФильтрФайловADOВход);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьРазмерЗавершение() 


&НаКлиенте
Процедура ДействияФормыНаДиске(Команда)
	
	Перем АдресХранилища;
	ИмяФайла = ИмяФайла = ""; 
	ПолноеИмяФайла = ""; 
	ДатаИзменения = Дата(1, 1, 1); 
	Размер = 0; 
	АдресХранилища = "";
	ФильтрФайловADO = УправлениеОтчетамиУХ.ОпределитьРасширениеФайлаADO(Объект.ИспользуемаяИБ);
	
	Если НЕ ПустаяСтрока(ФильтрФайловADO) Тогда
		
		СтрокаФильтр=ФильтрФайловADO;
		
	Иначе
		
		СтрокаФильтр = НСтр("ru = 'Таблица Excel (*.xls,*.xlsx)|*.xl*|Табличный документ (*.mxl)|*.mxl'");
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл для импорта'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр = СтрокаФильтр;
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ФильтрФайловADO", ФильтрФайловADO);
	ОписаниеОткрытияФайла = Новый ОписаниеОповещения("ВыборФайлаНаДиске_Завершение", ЭтаФорма, СтруктураДополнительныхПараметров);
	ДиалогВыбораФайла.Показать(ОписаниеОткрытияФайла);

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВСправочнике(Команда)
	
	ПоказатьВыборФайлаИзСправочника();

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСвернутьПоАналитикамОтчетов(Команда)
	
	ЗаполнитьДокумент("АвтоматическиСвернувПоАналитикам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСвернутьПоПериоду(Команда)
	
	ЗначениеВыбора = Неопределено;
	ДопПараметры = Новый Структура("ЗначениеВыбора", ЗначениеВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ДействияФормыСвернутьПоПериодуЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения, ЗначениеВыбора, Нстр("ru = 'Выберите периодичность отчетов-оснований'"), Тип("ПеречислениеСсылка.Периодичность"));
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыКонсолидироватьПериметр(Команда)
	
	ЗаполнитьДокумент("АвтоматическиКонсолидация");
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьЭкземплярОтчета()	
	
	Попытка	
		РабочийОбъект=ПолучитьРабочийОбъект();

		Если РабочийОбъект.Заблокирован() Тогда
			РабочийОбъект.Разблокировать();
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
КонецПроцедуры // РазблокироватьЭкземплярОтчета() 

&НаСервере
Функция ПолучитьПротоколПроверкиСервер(РезультатПроверки,РежимВывода = "")
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	РезультатПроверки=РабочийОбъект.Проверить(,РежимВывода);
	Возврат РезультатПроверки;
	
КонецФункции // ПолучитьПротоколПроверкиСервер() 

&НаКлиенте
Процедура ОткрытьФормуРаскрытияПоАналитике(ИмяОбласти, СтруктураОтбора = Неопределено,ДанныеСтрокиАналитики=Неопределено) Экспорт
		
КонецПроцедуры


// Проверяет наличие и возвращает значение реквизита на форме
// с именем НаименованиеРеквизитаВход. Когда реквизит не найден -
// будет возвращено Неопределено.
&НаКлиенте
Функция ПолучитьЗначениеРеквизитаФормы(НаименованиеРеквизитаВход)
	
	РезультатФункции = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, НаименованиеРеквизитаВход) Тогда
		РезультатФункции = ЭтаФорма[НаименованиеРеквизитаВход];
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьДоступностьКнопок()
	
	Элементы.СостояниеЗаявки.Доступность       = НЕ ИспользуетсяМарщрутСогласования;
	
	//Если Объект находится на согласовании, то проверить возможность редактирования, текущим пользователем
	Элементы.Редактирование.Доступность					 = Истина;
	Элементы.ГруппаЗаполнение.Доступность				 = Истина;
    Элементы.ФормаОбновитьДанные.Доступность			 = Истина;
	Элементы.Вычислить.Доступность						 = Истина;
	Элементы.ОсновныеРеквизиты.ТолькоПросмотр			 = Ложь;
    Элементы.НастройкиОбработкиДанных.ТолькоПросмотр	 = Ложь;
	Элементы.ГруппаРазрешитьРедактирование.Доступность	 = Истина;
	
	ЗначениеСостояния = ПолучитьЗначениеРеквизитаФормы("СостояниеЗаявки");
	ЭтоСостояниеВРаботе = Ложь;
	УправлениеПроцессамиСогласованияУХ.ЭтоСостояниеВРаботе(ЗначениеСостояния, ЭтоСостояниеВРаботе);
	Если ЭтоСостояниеВРаботе Тогда
		ЭтапыСогласованияДляТекущегоПользователя = ОбщегоНазначенияУХ.ТаблицаЗначенийВМассив(МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляТекущегоПользователя(Объект.Ссылка));
		Если ЭтапыСогласованияДляТекущегоПользователя.Количество() > 0 Тогда
			ИмеетПравоРедактирования = ЭтапыСогласованияДляТекущегоПользователя[0].ПравоРедактирования;
			Если НЕ ИмеетПравоРедактирования Тогда
				Элементы.Редактирование.Доступность					 = Ложь;
				Элементы.ГруппаЗаполнение.Доступность				 = Ложь;
				Элементы.ФормаОбновитьДанные.Доступность			 = Ложь;
				Элементы.Вычислить.Доступность						 = Ложь;
				Элементы.ОсновныеРеквизиты.ТолькоПросмотр			 = Истина;
				Элементы.НастройкиОбработкиДанных.ТолькоПросмотр	 = Истина;
				Элементы.ГруппаРазрешитьРедактирование.Доступность	 = Ложь;
			КонецЕсли;	
		Иначе	
			Элементы.Редактирование.Доступность					 = Ложь;
			Элементы.ГруппаЗаполнение.Доступность				 = Ложь;
			Элементы.ФормаОбновитьДанные.Доступность			 = Ложь;
			Элементы.Вычислить.Доступность						 = Ложь;
			Элементы.ОсновныеРеквизиты.ТолькоПросмотр			 = Истина;
			Элементы.НастройкиОбработкиДанных.ТолькоПросмотр	 = Истина;
			Элементы.ГруппаРазрешитьРедактирование.Доступность	 = Ложь;
		КонецЕсли;
	Иначе
		// Не выполняем изменения доступности в связи с согласованием.
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБланк(ИсходныйДокумент,КонечныйДокумент)
	
	ШаблонОбластиПримечания = Документы.НастраиваемыйОтчет.ПолучитьМакет("ШаблонЗаголовковВывода").ПолучитьОбласть("ОбластьВыводаПримечания");
	
	КонечныйДокумент.Вывести(ИсходныйДокумент);
	Если ЗначениеЗаполнено(ПримечаниеАналитическогоБланка.ПолучитьТекст()) Тогда
		ШаблонОбластиПримечания.Параметры.ТекстПримечания = ПримечаниеАналитическогоБланка.ПолучитьТекст(); 
		КонечныйДокумент.Вывести(ШаблонОбластиПримечания);	
		КонечныйДокумент.Область(КонечныйДокумент.ВысотаТаблицы-1,1,КонечныйДокумент.ВысотаТаблицы-1,КонечныйДокумент.ШиринаТаблицы).Объединить();
	КонецЕсли;	
	
	ИндексБланка = 1;
	Если  НЕ Объект.ШаблонОтчета.Пустая() И Объект.ШаблонОтчета.РежимБланка = 2 Тогда
		Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		 		
			КонечныйДокумент.Вывести(ЭтаФорма["ПолеТабличногоДокументаМакет"+ИндексБланка]);
			Если ЗначениеЗаполнено(ЭтаФорма["ПримечаниеАналитическогоБланка"+ИндексБланка].ПолучитьТекст()) Тогда
				ШаблонОбластиПримечания.Параметры.ТекстПримечания = ЭтаФорма["ПримечаниеАналитическогоБланка"+ИндексБланка].ПолучитьТекст(); 
				КонечныйДокумент.Вывести(ШаблонОбластиПримечания);	
				КонечныйДокумент.Область(КонечныйДокумент.ВысотаТаблицы-1,1,КонечныйДокумент.ВысотаТаблицы-1,КонечныйДокумент.ШиринаТаблицы).Объединить();
			КонецЕсли;
			ИндексБланка = ИндексБланка+1;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры // ВывестиБланк() 

&НаКлиенте
Процедура ПечатьВТекущемВиде(Команда)
	
	Если СтрНайти(Объект.СпособВывода,"Бланк")>0 Тогда
		
		ТабДок=Новый ТабличныйДокумент;
		
		ВывестиБланк(ПолеТабличногоДокументаМакет,ТабДок);
		
		ТабДок.Показать(ЭтаФорма.Заголовок);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЕстьПротоколируемыеОшибки()
	
	ЕстьОшибкиПоОбъекту=ПротоколируемыеСобытияУХ.ЕстьПротоколыПоОбъекту(Объект.Ссылка) ИЛИ ПротоколируемыеСобытияУХ.ЕстьОшибкиПоОбъекту(РеквизитФормыВЗначение("Объект"));
	
	Возврат ЕстьОшибкиПоОбъекту ИЛИ ТаблицаСобытийЗагрузки.Количество()>0;
			
КонецФункции // ЕстьПротоколируемыеОшибки() 

&НаСервере
Функция ОбновитьВидимостьПанелиРаскрытияИДопЯзыков(РабочийОбъект)
		
	ТаблицаЯзыков = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТаблицаЯзыков");
	
	НомерОсновногоЯзыка=ПараметрыСеанса.ЯзыкОтчетности;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ЗаполнитьДокумент("ПоследнийСпособ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВРежимРедактирования()
	
	Заблокирован=ПодготовитьОтчетДляРедактирования();
	
	Если Заблокирован Тогда
		ТекПометка=Истина;
	КонецЕсли;
	
	Элементы.ГруппаРазрешитьРедактирование.Видимость = Не Заблокирован;	
	Элементы.ПанельКомандыТекущегоОтображения.Видимость = Заблокирован;	
			
КонецПроцедуры // ПеревестиВРежимРедактирования() 

&НаСервереБезКонтекста
Функция ПовторныйИмпортФайла(ИнформацияОФайле,Ссылка)
	
	ИмпортированнаяВерсия=ХранимыеФайлыУХ.ПолучитьИмпортированнуюВерсию(ИнформацияОФайле,Ссылка);
	
	Если ИмпортированнаяВерсия=Неопределено Тогда
		
		Возврат "";
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Версия файла %ИмяФайла% с датой изменения %ДатаИзмененияФайла% и размером %РазмерФайла%
                               |		уже была использована для заполнения текущего экземпляра отчета. Продолжить?'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Строка(ИнформацияОФайле.ИмяФайла));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаИзмененияФайла%", Строка(ИнформацияОФайле.ДатаИзмененияФайла));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазмерФайла%", Строка(ИнформацияОФайле.РазмерФайла));
		Возврат ТекстСообщения;
		
	КонецЕсли;
		
КонецФункции // ПовторныйИмпортФайла() 

&НаСервереБезКонтекста
Функция ПолучитьВерсиюФайла(Ссылка,ХранимыйФайл)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыХранимыхФайлов.ВерсияХранимогоФайла
	|ИЗ
	|	РегистрСведений.ОбъектыХранимыхФайлов КАК ОбъектыХранимыхФайлов
	|ГДЕ
	|	ОбъектыХранимыхФайлов.ХранимыйФайл = &ХранимыйФайл
	|	И ОбъектыХранимыхФайлов.ИмпортированныйОбъект = &ЭкземплярОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыХранимыхФайлов.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ХранимыйФайл",ХранимыйФайл);
	Запрос.УстановитьПараметр("ЭкземплярОтчета",Ссылка);
	
	РезультатРегистр=Запрос.Выполнить().Выбрать();
	
	Если РезультатРегистр.Следующий() Тогда
		
		Возврат РезультатРегистр.ВерсияХранимогоФайла;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВерсиюФайла()

&НаСервереБезКонтекста
Функция ПолучитьМассивПротоколируемыхОбъектов(Ссылка,КлючевыеРеквизиты)
	
	МассивОтчетов=Новый Массив;
	МассивОтчетов.Добавить(Ссылка);
	
	Возврат ПротоколируемыеСобытияУХ.ПолучитьМассивПротоколируемыхОбъектов(МассивОтчетов);
	
КонецФункции  

&НаСервере
Функция ПолучитьАдресТаблицыСобытий()
	
	ТаблицаСобытий=РеквизитФормыВЗначение("ТаблицаСобытийЗагрузки");
	ТаблицаСобытий.Сортировать("Дата,ВремяMs");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСобытий,ЭтаФорма.УникальныйИдентификатор);
		
КонецФункции // ПолучитьАдресТаблицыСобытий()

&НаСервере
Функция ПолучитьКонтекстОбъекта()
		
	Возврат ПротоколируемыеСобытияУХ.ПолучитьСтруктуруКонтекста(РеквизитФормыВЗначение("Объект"));
		
КонецФункции 

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
	Если НЕ ТипЗнч(тМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
		
	ДанныеРасчета = ОбщегоНазначенияКлиентСерверУХ.РасчетныеПоказателиЯчеек(тМакет, тМакет.ВыделенныеОбласти);                         
	
	СуммаВыделенныхЯчеек 		= ДанныеРасчета.Сумма;                        
	КоличествоВыделенныхЯчеек 	= ДанныеРасчета.Количество;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтруктуруОтчета(Команда)
	
	Если ТипЗнч(СпособВыводаФорма)=Тип("СправочникСсылка.БланкиОтчетов") Тогда	
		ОткрытьФорму("Справочник.БланкиОтчетов.ФормаОбъекта", Новый Структура("Ключ", СпособВыводаФорма))
	Иначе	
		СтруктураПараметров=Новый Структура("ВидОтчета", Объект.ВидОтчета);
		ОткрытьФорму("Обработка.НастройкаСтруктурыОтчета.Форма", СтруктураПараметров);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФакторногоАнализа(СтруктураРасшифровки, Значение)	
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ПравилоОбработки", Объект.ПравилоОбработки);
	СтруктураСтроки.Вставить("Показатель", СтруктураРасшифровки.ПоказательСсылка);
	СтруктураСтроки.Вставить("Сценарий", СтруктураРасшифровки.Сценарий);
	СтруктураСтроки.Вставить("Организация", СтруктураРасшифровки.Организация);
	СтруктураСтроки.Вставить("Проект", СтруктураРасшифровки.Проект);
	СтруктураСтроки.Вставить("Валюта", Объект.ОсновнаяВалюта);
	
	// Заполним аналитики отчета
	Для Сч = 1 По МаксАналитикОтчета Цикл
		СтруктураСтроки.Вставить("Аналитика" + Сч, Объект["Аналитика" + Сч]);
	КонецЦикла;
	
	// Заполним аналитики показателя
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ISNULL(ГруппыРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитик,
		|	ISNULL(ГруппыРаскрытия.ВидАналитики1.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаАналитики1,
		|	ISNULL(ГруппыРаскрытия.ВидАналитики2.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаАналитики2,
		|	ISNULL(ГруппыРаскрытия.ВидАналитики3.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаАналитики3,
		|	ISNULL(ГруппыРаскрытия.ВидАналитики4.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаАналитики4,
		|	ISNULL(ГруппыРаскрытия.ВидАналитики5.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаАналитики5,
		|	ISNULL(ГруппыРаскрытия.ВидАналитики6.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаАналитики6,
		|	ISNULL(ГруппыРаскрытия.Валютная, ЛОЖЬ) КАК Валютная
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
		|		ПО ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
		|ГДЕ
		|	ПоказателиОтчетов.Ссылка = &Показатель";
	
	Запрос.УстановитьПараметр("Показатель", СтруктураРасшифровки.ПоказательСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Для Сч = МаксАналитикОтчета+1 По ВыборкаДетальныеЗаписи.ЧислоАналитик Цикл
			ЗначениеАналитики = Неопределено;
			КлючАналитики = ВыборкаДетальныеЗаписи["КодВидаАналитики"+Сч];
			Если КлючАналитики <> Неопределено Тогда
				СтруктураРасшифровки.Свойство(КлючАналитики, ЗначениеАналитики);
				СтруктураСтроки.Вставить("Аналитика"+Сч, ЗначениеАналитики);
			КонецЕсли;
		КонецЦикла;
		Если ВыборкаДетальныеЗаписи.Валютная Тогда
			ЗначениеАналитики = Неопределено;
			СтруктураРасшифровки.Свойство("АналитикаВалюта", ЗначениеАналитики);
			СтруктураСтроки.Вставить("АналитикаВалюта", ЗначениеАналитики);
		КонецЕсли;
	КонецЕсли;
	
	ЦелевыеПоказатели = УправлениеРасчетомПоказателей.ПолучитьОписаниеТаблицыИзмененныхПоказателей();
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
		
		НСтрокаТаблицы = ЦелевыеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрокаТаблицы, СтруктураСтроки);
		НСтрокаТаблицы.ПериодОтчета = СтруктураРасшифровки.ПериодОтчета;
		НСтрокаТаблицы.Значение = Значение;
		
	Иначе
		
		МассивПериодов = УправлениеОтчетамиУХ.ПолучитьМассивПериодов(
			Новый Структура("ПериодОтчета,ПериодОкончания",Объект.ПериодОтчета,Объект.ПериодОкончания));
		Для Каждого Период Из МассивПериодов Цикл
			НСтрокаТаблицы = ЦелевыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрокаТаблицы, СтруктураСтроки);
			НСтрокаТаблицы.ПериодОтчета = Период;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СворачиватьГруппировки", Истина);
	СтруктураПараметров.Вставить("РасчетПоСвязаннымВидамОтчетов", Истина);
	СтруктураПараметров.Вставить("ИсходныеПоказателиСверху", Ложь);
	СтруктураПараметров.Вставить("АдресТаблицыЦелевыхПоказателей", ПоместитьВоВременноеХранилище(ЦелевыеПоказатели));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыСценарногоАнализа(СтруктураРасшифровки,Значение,Моделирование)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если НЕ РабочийОбъект.ДанныеПараметрикиАктуальны Тогда
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;	
	Если СтруктураРасшифровки.Свойство("ВидОтчетаКод") Тогда
		СтруктураПараметров.Вставить("ВидОтчета", СтруктураРасшифровки.ВидОтчетаКод);
	Иначе
		СтруктураПараметров.Вставить("ВидОтчета", СтруктураРасшифровки.ВидОтчета);	
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Сценарий", СтруктураРасшифровки.Сценарий);
	СтруктураПараметров.Вставить("ПериодОтчета", СтруктураРасшифровки.ПериодОтчета);
	СтруктураПараметров.Вставить("ОсновнаяВалюта", Объект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("Организация", СтруктураРасшифровки.Организация);
	СтруктураПараметров.Вставить("Проект", СтруктураРасшифровки.Проект);
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ИсходныйПоказатель", СтруктураРасшифровки.ПоказательСсылка);
	СтруктураПараметров.Вставить("РежимАнализаЧувствительности", Моделирование);
	СтруктураПараметров.Вставить("ИсходноеЗначениеЦелевого", Значение);
	СтруктураПараметров.Вставить("МаксАналитикОтчета", 0);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		Если Объект.ВидОтчета.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда	
			Если ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
				СтруктураПараметров.Вставить("Аналитика" + Инд, Объект["Аналитика" + Инд]);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	тСтруктураРасчета = УправлениеОтчетамиУХ.ПолучитьПараметрыРасчетаПоказателя(СтруктураПараметров,СтруктураРасшифровки.ПоказательСсылка);
	
	РабочийОбъект.ПравилоОбработки =  тСтруктураРасчета.ПравилоОбработки;
	
	РабочийОбъект.СформироватьСтруктуруПараметров();
	
	РабочийОбъект.ИнициализироватьКонтекст(СтруктураРасшифровки.ПериодОтчета);
	РабочийОбъект.ИнициализироватьКонтекстРаскрытия();	
	РабочийОбъект.АнализЧувствительности=Истина;
	РабочийОбъект.мНеИнициироватьВнутриГрупповыеОперации=Истина;
	РабочийОбъект.СбрасыватьФлагИзмененияПоказателейПриВыводе=Ложь;
	УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(РабочийОбъект);

	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИсходныйДокумент", АдресВременногоХранилища);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ИзменитьПоказателиСервер(ИмяОбласти,Параметры,ОписаниеИзменений)
		
	тМакет = ЭтаФорма[ТекущийМакет];	
	ОписаниеИзменений = "";
	ОбъектАБ = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	тОбъектСтруктура = Новый Структура;
	ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,Объект.УправлениеПериодом,Объект.Организация);
	
	Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
		нтПериод 				=  ОбъектАБ.ЗаблокированныеПериоды.Добавить();
		нтПериод.ПериодОтчета   =  тПериод;
	КонецЦикла;	

	ОбъектАБ.ИзменитьЗначенияВОбласти(тМакет,ИмяОбласти,Параметры,Объект,ОписаниеИзменений);	
	ЗначениеВРеквизитФормы(ОбъектАБ, ТекущийОбъектАБ);

	Если ВычислятьПриИзменении Тогда
		ЗаписатьИзмененныеПоказателиБланк(Истина);
		УстановитьРежимРедактированияДанных(Ложь);		
	Иначе	
		УстановитьРежимРедактированияДанных(Истина);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает таблицу показателей по массиву кодов показателей МассивКодовВход.
&НаСервере
Функция ПолучитьТаблицуПоказателейПоКоду(МассивКодовВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	(ПоказателиОтчетов.Код В(&Код) или ПоказателиОтчетов.Ссылка В (&Код))
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	//|	И ПоказателиОтчетов.СпособОбработки = &Заполнение";
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	Запрос.УстановитьПараметр("Правило", Объект.ПравилоОбработки);
	//Запрос.УстановитьПараметр("Заполнение", Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	
	Запрос.УстановитьПараметр("Код", МассивКодовВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает ссылку на ракурс по текущему документу для показателей из массива
// МассивКодовВход, либо значение Неопределено, если ракурс получить не удалось.
&НаСервере
Функция ПолучитьРакурсВыбранныхПоказателей(МассивКодовВход)
	РезультатФункции = Неопределено;
	ТаблицаПоказателей = ПолучитьТаблицуПоказателейПоКоду(МассивКодовВход);
	Если ТаблицаПоказателей.Количество() > 0 Тогда
		ПерваяСтрока = ТаблицаПоказателей[0];
		ВыбранныйПоказатель = ПерваяСтрока.Показатель;
		Если ЗначениеЗаполнено(ВыбранныйПоказатель) Тогда
			ОбластьДанных = УправлениеПроцессамиСогласованияУХ.ПолучитьОбластьДанныхПоказателя(ВыбранныйПоказатель, Объект.Ссылка);
			РезультатФункции = МодульУправленияПроцессамиУХ.ПолучитьРакурсСогласованияОбласти(Объект.Ссылка, ОбластьДанных, Объект.Организация, Истина);
		Иначе
			ТекстСообщения = НСтр("ru = 'Выбран пустой показатель. Открытие ракурса отменено.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Неопределено;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу показателей. Открытие ракурса отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура УстановитьВозможностьЗаписи(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	ПродолжатьЗапись=(РезультатВопроса=КодВозвратаДиалога.Да);
		
КонецПроцедуры // УстановитьВозможностьЗаписи() 

&НаКлиенте
Процедура ОтобразитьСостояниеОтчета()
	
	Если ИспользуетсяМарщрутСогласования Тогда
		ОпределитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает адрес временного хранилища, содержащее структуру настроек отчета.
&НаСервере
Функция ПолучитьАдресДанныхОтчета()
	// Инициализация.
	РезультатФункции = "";
	СтруктураНастроекРезультат = Новый Структура;
	ТекВидОтчета = Объект.ВидОтчета;
	// Закладка Реквизиты отчета.	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураНастроекРезультат.Вставить("АналитикаОтчета"+Инд,				 Объект["Аналитика"+Инд]);
	КонецЦикла;	
	
	СтруктураНастроекРезультат.Вставить("ВидОтчета",					 ТекВидОтчета);
	СтруктураНастроекРезультат.Вставить("ДатаИзменения",				 Объект.ДатаИзменения);
	СтруктураНастроекРезультат.Вставить("Исполнитель",					 Исполнитель);
	СтруктураНастроекРезультат.Вставить("Номер",						 Объект.Номер);
	СтруктураНастроекРезультат.Вставить("Организация",					 Объект.Организация);
	СтруктураНастроекРезультат.Вставить("ОсновнаяВалюта",				 Объект.ОсновнаяВалюта);
	СтруктураНастроекРезультат.Вставить("Период",						 Объект.ПериодОтчета);
	СтруктураНастроекРезультат.Вставить("ПериодОкончания",				 Объект.ПериодОкончания);
	СтруктураНастроекРезультат.Вставить("УправлениеПериодом",			 Объект.УправлениеПериодом);
	СтруктураНастроекРезультат.Вставить("ПоследнийРедактировавший",		 Объект.ПоследнийРедактировавший);
	СтруктураНастроекРезультат.Вставить("Проверяющий",					 Проверяющий);
	СтруктураНастроекРезультат.Вставить("Проект",						 Объект.Проект);
	СтруктураНастроекРезультат.Вставить("Сценарий",						 Объект.Сценарий);
	// -Получение данных по аналитикам отчёта.
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ТекВидОтчета.МетаДанные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
			ВидАналитики = ТекВидОтчета["ВидАналитики"+Инд];
			Если Не ПустаяСтрока(ВидАналитики) Тогда
				СтруктураНастроекРезультат.Вставить("ВидАналитики" + Инд, ВидАналитики);
				СтруктураНастроекРезультат.Вставить("ТипАналитики" + Инд, ВидАналитики.ТипЗначения);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаВидимость" + Инд, Истина);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаЗаголовок" + Инд, Строка(ВидАналитики));
			Иначе
				СтруктураНастроекРезультат.Вставить("ВидАналитики" + Инд, ВидАналитики);
				СтруктураНастроекРезультат.Вставить("ТипАналитики" + Инд, ВидАналитики.ТипЗначения);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаВидимость" + Инд, Ложь);
				СтруктураНастроекРезультат.Вставить("АналитикаОтчетаЗаголовок" + Инд, НСтр("ru = 'Аналитика '") + Строка(Инд));
			КонецЕсли;
		Иначе
			СтруктураНастроекРезультат.Вставить("ВидАналитики" + Инд, Неопределено);
			СтруктураНастроекРезультат.Вставить("ТипАналитики" + Инд, Неопределено);
			СтруктураНастроекРезультат.Вставить("АналитикаОтчетаВидимость" + Инд, Ложь);
			СтруктураНастроекРезультат.Вставить("АналитикаОтчетаЗаголовок" + Инд, НСтр("ru = 'Аналитика '") + Строка(Инд));
		КонецЕсли;
	КонецЦикла;
	// Закладка Настройки отчета.
	СтруктураНастроекРезультат.Вставить("БланкИмпорта",					 Объект.БланкИмпорта);
	СтруктураНастроекРезультат.Вставить("ВыбраннаяВалюта",				 ВыбраннаяВалюта);
	СтруктураНастроекРезультат.Вставить("ВыводитьДополнительныйЯзык1",	 ВыводитьДополнительныйЯзык1);
	СтруктураНастроекРезультат.Вставить("ВыводитьДополнительныйЯзык2",	 ВыводитьДополнительныйЯзык2);
	СтруктураНастроекРезультат.Вставить("ЕдиницаИзмерения",				 Объект.ЕдиницаИзмерения);
	СтруктураНастроекРезультат.Вставить("ИспользуемаяИБ",				 Объект.ИспользуемаяИБ);
	СтруктураНастроекРезультат.Вставить("НомерОсновногоЯзыка",			 НомерОсновногоЯзыка);
	СтруктураНастроекРезультат.Вставить("ПравилоОбработки",				 Объект.ПравилоОбработки);
	СтруктураНастроекРезультат.Вставить("ПравилоПроверки",				 Объект.ПравилоПроверки);
	СтруктураНастроекРезультат.Вставить("СпособВыводаФорма",			 СпособВыводаФорма);
	СтруктураНастроекРезультат.Вставить("ТекущаяТочность",				 ТекущаяТочность);
	// Закладка Дополнительные реквизиты.
	СтруктураНастроекРезультат.Вставить("ДополнительныеВалюты",			 Объект.ДополнительныеВалюты.Выгрузить());
	
	тПараметрыЭкземпляраОтчета = Объект.ПараметрыОтчета.Выгрузить();	
	СтруктураПоиска = Новый Структура("Код, Наименование");
	
	Для Каждого ПараметрВидаОтчета Из Объект.ВидОтчета.ПараметрыОтчета Цикл
		СтруктураПоиска.Вставить("Код", ПараметрВидаОтчета.Код);
		СтруктураПоиска.Вставить("Наименование", ПараметрВидаОтчета.Наименование);
		
		Если тПараметрыЭкземпляраОтчета.НайтиСтроки(СтруктураПоиска).Количество() = 0 тогда
			НоваяСтрокаПараметр = тПараметрыЭкземпляраОтчета.Добавить();
			
			НоваяСтрокаПараметр.Код = ПараметрВидаОтчета.Код;
			НоваяСтрокаПараметр.Наименование = ПараметрВидаОтчета.Наименование;
			НоваяСтрокаПараметр.Значение = ПараметрВидаОтчета.ЗначениеПоУмолчанию;
			НоваяСтрокаПараметр.ЗначениеСтрока = Строка(ПараметрВидаОтчета.ЗначениеПоУмолчанию);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНастроекРезультат.Вставить("ПараметрыОтчета",				 тПараметрыЭкземпляраОтчета);		
	СтруктураНастроекРезультат.Вставить("ЭкземплярыИсточники",			 Объект.ЭкземплярыИсточники.Выгрузить());	
	// Дополнительная информация.
	СтруктураНастроекРезультат.Вставить("СпособВывода",					 Объект.СпособВывода);
	СтруктураНастроекРезультат.Вставить("ШаблонОтчета",					 Объект.ШаблонОтчета);
	// Вывод результата.
	РезультатФункции = ПоместитьВоВременноеХранилище(СтруктураНастроекРезультат);
	Возврат РезультатФункции;
КонецФункции

// Считывает в табличную часть ДополнительныеВалюты данные о дополнительных
// валютах из структуры настроек СтруктураНастроекВход.
&НаСервере
Процедура ЗагрузитьДополнительныеВалютыИзСтруктурыНастроек(СтруктураНастроекВход)
	АдресДополнительныеВалюты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "АдресДополнительныеВалюты", "");
	Если ЭтоАдресВременногоХранилища(АдресДополнительныеВалюты) Тогда
		Выгрузка = ПолучитьИзВременногоХранилища(АдресДополнительныеВалюты);
		Если ТипЗнч(Выгрузка) = Тип("ТаблицаЗначений") Тогда
			Объект.ДополнительныеВалюты.Очистить();
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				НоваяСтрока = Объект.ДополнительныеВалюты.Добавить();
				НоваяСтрока.Валюта	 = ТекВыгрузка.Валюта;
				НоваяСтрока.Пометка	 = ТекВыгрузка.Пометка;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант таблицы дополнительных валют: %Выгрузка%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выгрузка%", Строка(Выгрузка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу дополнительных валют. Заполнение табличной части Дополнительные валюты пропущено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Считывает в табличную часть ПараметрыОтчета данные о параметрах
// отчета из структуры настроек СтруктураНастроекВход.
&НаСервере
Процедура ЗагрузитьПараметрыОтчетаИзСтруктурыНастроек(СтруктураНастроекВход)
	АдресПараметрыОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "АдресПараметрыОтчета", "");
	Если ЭтоАдресВременногоХранилища(АдресПараметрыОтчета) Тогда
		Выгрузка = ПолучитьИзВременногоХранилища(АдресПараметрыОтчета);
		Если ТипЗнч(Выгрузка) = Тип("ТаблицаЗначений") Тогда
			Объект.ПараметрыОтчета.Очистить();
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				НоваяСтрока = Объект.ПараметрыОтчета.Добавить();
				НоваяСтрока.Код				 = ТекВыгрузка.Код;
				НоваяСтрока.Наименование	 = ТекВыгрузка.Наименование;
				НоваяСтрока.Значение		 = ТекВыгрузка.Значение;
				НоваяСтрока.ЗначениеСтрока	 = ТекВыгрузка.ЗначениеСтрока;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант таблицы параметров отчета: %Выгрузка%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выгрузка%", Строка(Выгрузка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу параметров отчета. Заполнение табличной части Параметры отчета пропущено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Считывает в табличную часть ЭкземплярыИсточники данные об экземплярах
// источниках из структуры настроек СтруктураНастроекВход.
&НаСервере
Процедура ЗагрузитьЭкземплярыИсточникиИзСтруктурыНастроек(СтруктураНастроекВход)
	АдресЭкземплярыИсточники = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "АдресЭкземплярыИсточники", "");
	Если ЭтоАдресВременногоХранилища(АдресЭкземплярыИсточники) Тогда
		Выгрузка = ПолучитьИзВременногоХранилища(АдресЭкземплярыИсточники);
		Если ТипЗнч(Выгрузка) = Тип("ТаблицаЗначений") Тогда			

			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				НоваяСтрока = Объект.ЭкземплярыИсточники.Добавить();
				НоваяСтрока.ЭкземплярОтчета = ТекВыгрузка.ЭкземплярОтчета;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передан неизвестный вариант таблицы экземпляров источников: %Выгрузка%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выгрузка%", Строка(Выгрузка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу экземпляров источников. Заполнение табличной части Экземпляры-источники пропущено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Устанавливает текущему отчету на форме значения реквизитов
// из структуры СтруктураНастроекВход.
&НаСервере
Процедура ВыставитьВыбранныеНастройкиОтчета(СтруктураНастроекВход)
	// Закладка Реквизиты отчета.
		
	Для Инд  = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Объект["Аналитика"+Инд]				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Аналитика"+Инд, Неопределено);
	КонецЦикла;	
	
	Объект.ВидОтчета				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВидОтчета",	Справочники.ВидыОтчетов.ПустаяСсылка());
	Объект.ДатаИзменения			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ДатаИзменения", Дата(1, 1, 1));
	Исполнитель						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Исполнитель",	Справочники.Пользователи.ПустаяСсылка());
	Объект.Номер					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Номер", "");
	Объект.Организация				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Организация",	Справочники.Организации.ПустаяСсылка());
	Объект.ОсновнаяВалюта			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ОсновнаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Объект.ПериодОтчета				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Объект.ПериодОкончания			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериодОтчетаОкончание", Справочники.Периоды.ПустаяСсылка());
	Объект.УправлениеПериодом		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "УправлениеПериодом", Документы.УправлениеПериодомСценария.ПустаяСсылка());
	Объект.ПоследнийРедактировавший	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПоследнийРедактировавший", Справочники.Пользователи.ПустаяСсылка());
	Проверяющий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Проверяющий",	Справочники.Пользователи.ПустаяСсылка());
	Объект.Проект					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Проект", Справочники.Проекты.ПустаяСсылка());
	Объект.Сценарий					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	// Закладка Настройки отчета.
	Объект.БланкИмпорта			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "БланкИмпорта",	Справочники.БланкиОтчетов.ПустаяСсылка());
	ВыбраннаяВалюта				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВыбраннаяВалюта", Справочники.Валюты.ПустаяСсылка());
	ВыводитьДополнительныйЯзык1	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВыводитьДополнительныйЯзык1", Ложь);
	ВыводитьДополнительныйЯзык2	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВыводитьДополнительныйЯзык2", Ложь);
	Объект.ЕдиницаИзмерения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	Объект.ИспользуемаяИБ		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ИспользуемаяИБ", Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
	НомерОсновногоЯзыка			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "НомерОсновногоЯзыка", 0);
	Объект.ПравилоОбработки		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПравилоОбработки", Справочники.ПравилаОбработки.ПустаяСсылка());
	Объект.ПравилоПроверки		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПравилоПроверки", Справочники.ПравилаПроверки.ПустаяСсылка());
	СпособВыводаФорма			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "СпособВыводаФорма",	"");
	ТекущаяТочность				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ТекущаяТочность", 0);
	// Закладка Дополнительные реквизиты.
	ЗагрузитьДополнительныеВалютыИзСтруктурыНастроек(СтруктураНастроекВход);
	ЗагрузитьПараметрыОтчетаИзСтруктурыНастроек(СтруктураНастроекВход);
	ЗагрузитьЭкземплярыИсточникиИзСтруктурыНастроек(СтруктураНастроекВход);
	// Дополнительная информация.
	Объект.СпособВывода	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "СпособВывода", "");
	Объект.ШаблонОтчета	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ШаблонОтчета", Справочники.БланкиОтчетов.ПустаяСсылка());
	
	Если Не ИзмененКлючевойРеквизит
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ИзмененКлючевойРеквизит") = Истина Тогда	
		ИзмененКлючевойРеквизит = Истина;	
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает текущему отчету на форме значения реквизитов
// из структуры СтруктураНастроекВход, а также выполняет обновление
// формы.
&НаСервере
Процедура ВыставитьВыбранныеНастройкиИОбновитьФорму(СтруктураНастроекВход)
  	
	// Установим новые настройки.
	ВыставитьВыбранныеНастройкиОтчета(СтруктураНастроекВход);
	ПолучитьЗначениеДелителяСервер();
	// Обновим интерфейс.
	ЗаполнитьСписокВыбораВалютСервер();
	ОбновитьМакет(,,Истина);
	РазблокироватьДанныеФормыДляРедактирования();
		
КонецПроцедуры

// Осуществляет считывание данных из файла по выбранным настройкам в 
// структуре СтруктураПараметровВход.
&НаКлиенте
Процедура ОбработатьИмпортФайла(СтруктураПараметровВход)
	
	Перем АдресХранилища;
	СпособИмпортирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "СпособИмпортирования", "");
	Если СокрЛП(СпособИмпортирования) = УправлениеОтчетамиКлиентУХ.СпособИмпортаОтчетаИзФайла() Тогда
		// Импорт из файла.
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ПутьКФайлу", "");
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			КэшПутьКФайлуИмпорта = ПутьКФайлу;
			ФильтрФайловADO = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ФильтрФайловADO", "");
			Если Не ЗначениеЗаполнено(ФильтрФайловADO) Тогда
				ФильтрФайловADO = УправлениеОтчетамиУХ.ОпределитьРасширениеФайлаADO(Объект.ИспользуемаяИБ);
			Иначе
				// Фильтр установлен.
			КонецЕсли;
			СчитатьФайлВОтчет(ПутьКФайлу, ФильтрФайловADO, АдресХранилища);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не указан путь к импортируемому файлу. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли СокрЛП(СпособИмпортирования) = УправлениеОтчетамиКлиентУХ.СпособИмпортаОтчетаИзСправочника() Тогда
		// Импорт из справочника.
		ПоказатьВыборФайлаИзСправочника();
	ИначеЕсли Не ЗначениеЗаполнено(СпособИмпортирования) Тогда
		// Способ не выбран.
		ТекстСообщения = НСтр("ru = 'Не выбран способ импортирования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Неизвестный способ.
		ТекстСообщения = НСтр("ru = 'Выбран неизвестный способ импортирования %СпособИмпортирования%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособИмпортирования%", Строка(СпособИмпортирования));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Возвращает структуру данных выбранной области.
&НаКлиенте
Функция ПолучитьСтруктуруДанныхВыбраннойОбласти()
	РезультатФункции = Новый Структура;
	тМакет = ЭтаФорма[ТекущийМакет];
	Область = тМакет.ТекущаяОбласть;
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(Область.Имя, Область.Расшифровка, СтруктураНезаполненыхАналитик, СтруктураОтбираемыхАналитик);
	Если ТипЗнч(СтруктураРасшифровки) = Тип("Структура") Тогда
		РезультатФункции = СтруктураРасшифровки;
	Иначе
		РезультатФункции = Новый Структура;
	КонецЕсли;
	Возврат РезультатФункции;		
КонецФункции		// ПолучитьСтруктуруДанныхВыбраннойОбласти()	


&НаКлиенте
Процедура ВыделитьОбластиПоказателей(ПараметрыПоказателей,ПериодРасшифровки,СтруктураОтбора) Экспорт
	
	НезаполненныеАналитики      = Новый Структура;
	МассивВыделенныхОбластей =  ВыделитьОбластиПоказателейСервер(ПараметрыПоказателей.МассивПоказателейСсылка,ПериодРасшифровки,СтруктураОтбора,НезаполненныеАналитики);
						
	Если ТипЗнч(МассивВыделенныхОбластей) = Тип("Массив") И МассивВыделенныхОбластей.Количество()>0 И ТекущийМакет<>"ПолеТабличногоДокументаМакет" Тогда
		 Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнойМакет;
		 ТекущийМакет 	 = "ПолеТабличногоДокументаМакет";
		 ТекущийОбъектАБ = "ОбъектАналитическогоБланка";
	КонецЕсли;	
	
	Если ТабВыделенныхОбластей.Количество()>0 Тогда
		СнятьВыделениеОбластейПоказателей();
	КонецЕсли;
	
	Красный=Новый Цвет(255,0,0);
	Линия=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,3);
	
	Если МассивВыделенныхОбластей = Неопределено Тогда
		Возврат;
		//Нет нужного показателя в бланке
	КонецЕсли;	
	
	Для Каждого ОбластьПоказателя ИЗ МассивВыделенныхОбластей Цикл
		
		тОбласть = ЭтаФорма[ТекущийМакет].Область(ОбластьПоказателя);
		
		СохранитьГраницыОбласти(тОбласть);	
		тОбласть.Обвести(Линия,Линия,Линия,Линия);
		тОбласть.ЦветРамки=Красный;	
		Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=тОбласть;
	
		Если НезаполненныеАналитики.Количество() = 1 Тогда
			ОткрытьФормуРаскрытия(тОбласть,НезаполненныеАналитики);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыделитьОбластиПоказателей()

&НаКлиенте
Процедура ОткрытьФормуРаскрытия(ТекущаяОбласть,НезаполненныеАналитики) Экспорт 
	
	ПризнакРедактирования = Ложь;
	
	тОбъектАБ   = ЭтаФорма[ТекущийОбъектАБ];
	
	тОбъект                 = Новый Структура;
	тОбъект.Вставить("ВидОтчета"			,Объект.ВидОтчета);
	тОбъект.Вставить("УправлениеПериодом"	,Объект.УправлениеПериодом);
	тОбъект.Вставить("ПериодОтчета"			,Объект.ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,Объект.ПериодОкончания);
	тОбъект.Вставить("Сценарий"				,Объект.Сценарий);
	тОбъект.Вставить("Организация"			,Объект.Организация);
	тОбъект.Вставить("Проект"				,Объект.Проект);
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		тОбъект.Вставить("Аналитика"+Инд	,Объект["Аналитика"+Инд]);
	КонецЦикла;	

    тОбъект.Вставить("Ссылка"				,Объект.Ссылка);

	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(ТекущаяОбласть.Имя,ТекущаяОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	Если СтруктураРасшифровки = Неопределено  Тогда
		Возврат;		
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		Возврат;
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()=0 Тогда 	 
		Возврат;	
	Иначе	
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыРаскрытия 			= ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		
		тОбъектСтруктура = Новый Структура;
		ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,Объект.УправлениеПериодом,Объект.Организация);
		
		Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
			нтПериод 				=  тОбъектАБ.ЗаблокированныеПериоды.Добавить();
			нтПериод.ПериодОтчета   =  тПериод;
		КонецЦикла;	
		
		СтруктураЗаблокированныхПоказателей 	= АналитическийБланкУХКлиент.ВернутьЗаблокированныеЯчейки(Объект.ВидОтчета,тОбъектАБ,СтруктураРасшифровки);
		ПараметрыФормыРаскрытия.Вставить("СтруктураЗаблокированныхПоказателей",СтруктураЗаблокированныхПоказателей);
		ПараметрыФормыРаскрытия.Вставить("тОбъект",тОбъект);
		ПараметрыФормыРаскрытия.Вставить("ДополнительныйОтбор",НезаполненныеАналитики);
		
		Оповещение = Новый ОписаниеОповещения("РедактированиеРаскрытияЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРаскрытияПоказателей",ПараметрыФормыРаскрытия,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДанныхПроизводительности(ВидАнализа)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.АнализПроизводительности=Истина;
	
	Если ВидАнализа="АвтоматическиПоПравилуОбработки" Тогда
		
		РабочийОбъект.ЗаполнитьОтчет("АвтоматическиПоПравилуОбработки");
		
	Иначе
		
		РабочийОбъект.СформироватьСтруктуруПараметров();
		РабочийОбъект.ЗапуститьМодульВычисления();
		
	КонецЕсли;
		
	Возврат ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);	
	
КонецФункции //  ПолучитьАдресТаблицыПроизводительности()

&НаСервере
Процедура ЗаписатьСТрассировкойРасчета()
	
	Если ЗаписатьЭкземплярОтчета(Истина,Ложь,Истина) Тогда	
		Модифицированность=Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрассировкаРекурсивногоРасчета(Команда)
	
	ЗаписатьСТрассировкойРасчета();
	
	Если НЕ ПустаяСтрока(АдресХранилищаДанныхТрассировки) Тогда
		
		Имя = "Обработка.ЗаписьПоказателяСРасчетомЗависимых.Форма.ФормаАнализРасчетов";
		ОткрытьФорму(Имя, Новый Структура("ВидОтчета, АдресХранилищаДанныхТрассировки", Объект.ВидОтчета, АдресХранилищаДанныхТрассировки)
				, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРакурсыНажатие(Элемент)
	
	СтруктураОткрытия = УправлениеПроцессамиСогласованияУХ.ВернутьСтруктуруОткрытияРакурса(Объект.ВидОтчета, Объект.ПериодОтчета);
	СтрокаОткрытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОткрытия, "СтрокаОткрытияФормы", "Обработка.СводнаяТаблица.Форма.ФормаУправленияСогласованием");	
	ПараметрыОткрытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОткрытия, "ПараметрыОткрытия", Новый Структура);
		
	Если ПараметрыОткрытия.Свойство("Организации") тогда
		Если ПараметрыОткрытия.Организации.Найти(Объект.Организация) = Неопределено И Не Объект.Организация.Пустая() тогда
			ПараметрыОткрытия.Организации.Добавить(Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОткрытия.Свойство("Проекты") тогда
		Если ПараметрыОткрытия.Проекты.Найти(Объект.Проект) = Неопределено И Не Объект.Проект.Пустая() тогда
			ПараметрыОткрытия.Проекты.Добавить(Объект.Проект);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОткрытия.Свойство("Сценарии") тогда
		Если ПараметрыОткрытия.Сценарии.Найти(Объект.Сценарий) = Неопределено И Не Объект.Сценарий.Пустая() тогда
			ПараметрыОткрытия.Сценарии.Добавить(Объект.Сценарий);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьПараметрыАналитикой(ПараметрыОткрытия);
		
	Если ЗначениеЗаполнено(СтрокаОткрытия) Тогда
		ОткрытьФорму(СтрокаОткрытия, ПараметрыОткрытия, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// Параметры не указаны. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАналитикой(СтруктураПараметров = Неопределено)
	
	СтруктураФильтров = Новый Структура;
	МаксАналитикВидаОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(Объект.ВидОтчета);
	
	Для ИндексАналитики = 1 По МаксАналитикВидаОтчета Цикл
		ИндАналитики = Строка(ИндексАналитики);
		СтруктураФильтров.Вставить("Фильтр_" + Объект.ВидОтчета["ВидАналитики" + ИндАналитики].Код, Объект["Аналитика" + ИндАналитики]);
	КонецЦикла;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("ОбъектСводнаяТаблица");
	ОбработкаОбъект.ДополнитьПараметрыАналитикой(СтруктураФильтров, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура НепустыеСтроки(Команда)
		
	Элементы.ФормаНепустыеСтроки.Пометка = НЕ Элементы.ФормаНепустыеСтроки.Пометка;
	АналитическийБланкУХКлиент.УправлениеВидимостьюПустыхСтрок(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура НепустыеКолонки(Команда)
		
	Элементы.ФормаНепустыеКолонки.Пометка = НЕ Элементы.ФормаНепустыеКолонки.Пометка;
	АналитическийБланкУХКлиент.УправлениеВидимостьюПустыхКолонок(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеЭкземпляра(РабочийОбъект=Неопределено,НужнаПроверка=Истина,ОбновитьВерсии,ВывестиДополнительныеБланки = Истина)
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных Тогда
		 Возврат;
	КонецЕсли;	
	
	ТекЕдиницаИзмерения=Объект.ЕдиницаИзмерения;
		
	ПолучитьЗначениеДелителяСервер();
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница=Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.РедактированиеОтчета тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница=Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ОсновнойМакет;
	КонецЕсли;
						
	Если  НЕ Объект.ШаблонОтчета.Пустая() И НЕ Объект.ШаблонОтчета.РежимБланка = 1 Тогда
				
		
		//Сбросим кэш актуальности бланков
		Для Каждого СтрКэш Из КэшБланков Цикл	
			СтрКэш.Выведен = Ложь;	
		КонецЦикла;	
		
		МассивСтраниц = Новый Массив();
		МассивСтраниц.Добавить(Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя);
		ВывестиБланки(МассивСтраниц);

		Возврат;
		
		Элементы.ОсновнойМакет.Видимость  = Истина;
		
		МакетОснование=Неопределено;	
		ОтчетАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
		ОтчетАБ.Бланк 			 		= Объект.ШаблонОтчета;
		ОтчетАБ.Сценарий				= Объект.Сценарий;
		ОтчетАБ.ПериодОтчета			= Объект.ПериодОтчета;
		ОтчетАБ.ПериодОтчетаОкончание 	= Объект.ПериодОкончания;
		ОтчетАБ.Организация 			= Объект.Организация;
		ОтчетАБ.Проект 			 		= Объект.Проект;
		ОтчетАБ.Валюта 			 		= ВыбраннаяВалюта;		
		ОтчетАБ.ЕдиницаИзмерения 		= Объект.ЕдиницаИзмерения;
		ОтчетАБ.ТекущееПравило          = Объект.ПравилоОбработки;
		ОтчетАБ.логИзмененныхКомментариевАдрес = логИзмененныхКомментариевАдрес;
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ОтчетАБ["Аналитика"+Инд] = Объект["Аналитика"+Инд];
		КонецЦикла;
		ОтчетАБ.ЕстьДополнительныеВалюты = Объект.ДополнительныеВалюты.Количество()>0;
		
		ДополнительныеНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		СтруктураПараметров     = Новый Структура;
		СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
		СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
		СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
        СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
        СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
		СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
		
		ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
		ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
		ОтчетАБ.ТекущийДелитель = ТекущийДелитель;
		ОтчетАБ.ТекущаяТочность = ТекущаяТочность;
        ОтчетАБ.ИдентификаторСеанса 	= ЭтаФорма.УникальныйИдентификатор;
		
		
		ЗначениеВРеквизитФормы(ОтчетАБ,"ОбъектАналитическогоБланка");	
		ИндексБланка = 1;
			
		Если ВывестиДополнительныеБланки Тогда
			Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		
				ТекСтраница = Элементы["Бланк_"+ИндексБланка];
				ТекСтраница.Видимость = Истина;
				ТекСтраница.Заголовок = СтрБланк.Бланк.Наименование;		
				//ОтчетАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка"+ИндексБланка);
				//ОтчетАБ.Бланк 			 		= СтрБланк.Бланк;
				//ОтчетАБ.Сценарий				= Объект.Сценарий;
				//ОтчетАБ.ПериодОтчета			= Объект.ПериодОтчета;
				//ОтчетАБ.ПериодОтчетаОкончание 	= Объект.ПериодОкончания;
				//ОтчетАБ.Организация 			= Объект.Организация;
				//ОтчетАБ.Проект 			 		= Объект.Проект;
				//ОтчетАБ.Валюта 			 		= ВыбраннаяВалюта;		
				//ОтчетАБ.ЕдиницаИзмерения 		= Объект.ЕдиницаИзмерения;
				//ОтчетАБ.ТекущееПравило          = Объект.ПравилоОбработки;
				//Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				//	ОтчетАБ["Аналитика"+Инд] = Объект["Аналитика"+Инд];
				//КонецЦикла;	
				
				СтруктураПараметров     = Новый Структура;
				СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ЭтаФорма["ПолеТабличногоДокументаМакет"+ИндексБланка]);
				СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
				СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
				СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
				СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
				СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
				
				ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
				ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
				ОтчетАБ.ТекущийДелитель = ТекущийДелитель;
				ОтчетАБ.ТекущаяТочность = ТекущаяТочность;
				ОтчетАБ.логИзмененныхДанныхАдрес = логИзмененныхДанныхАдрес;
				ОтчетАБ.логИзмененныхКомментариевАдрес = логИзмененныхКомментариевАдрес;
				ОтчетАБ.ИдентификаторСеанса 	= ЭтаФорма.УникальныйИдентификатор;
				ЗначениеВРеквизитФормы(ОтчетАБ,"ОбъектАналитическогоБланка"+ИндексБланка);		
				ИндексБланка = ИндексБланка +1;			
			КонецЦикла;					
		КонецЕсли;
		
		Если Объект.ШаблонОтчета.ДополнительныеБланки.Количество() = 0 Тогда
			 Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;	
		
		ТекущийОбъектАБ = "ОбъектАналитическогоБланка";
		ТекущийМакет 	= "ПолеТабличногоДокументаМакет";
		
	ИначеЕсли  НЕ Объект.ШаблонОтчета.Пустая() 
		И  Объект.ШаблонОтчета.РежимБланка = 1 Тогда 
				
		Элементы.ОсновнойМакет.Видимость  = Истина;				
		ВывестиМакетАналитическийБланкСводнаяТаблица();	
	КонецЕсли;
			
КонецПроцедуры 

&НаСервере
Процедура ВывестиБланки(МассивСтраниц,ДанныеДиаграмм = Ложь)
	
	КлючевыеПараметры = Новый Структура;
	КлючевыеПараметры.Вставить("Сценарий",Объект.Сценарий);
	КлючевыеПараметры.Вставить("ПериодОтчета",Объект.ПериодОтчета);
	КлючевыеПараметры.Вставить("ПериодОкончания",Объект.ПериодОкончания);
	КлючевыеПараметры.Вставить("Валюта",ВыбраннаяВалюта);
	КлючевыеПараметры.Вставить("ИспользоватьБыстрыйОтборПоОрганизации",Истина);
	КлючевыеПараметры.Вставить("Организация",Объект.Организация);
	КлючевыеПараметры.Вставить("Проект",Объект.Проект);
	
	КлючевыеПараметры.Вставить("ИспользоватьБыстрыйОтборПоАналитикамВерсии",Истина);
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		КлючевыеПараметры.Вставить("Аналитика"+Инд, Объект["Аналитика"+Инд]);
	КонецЦикла;	
	
	КлючевыеПараметры.Вставить("УровеньТочности",ТекущаяТочность);
	КлючевыеПараметры.Вставить("ТекущийДелитель",ТекущийДелитель);
    КлючевыеПараметры.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
    КлючевыеПараметры.Вставить("ТекущееПравило",Объект.ПравилоОбработки);
	
	КлючевыеПараметры.Вставить("логИзмененныхДанныхАдрес",логИзмененныхДанныхАдрес);
	КлючевыеПараметры.Вставить("логИзмененныхКомментариевАдрес",логИзмененныхКомментариевАдрес);
    КлючевыеПараметры.Вставить("УникальныйИдентификатор",ЭтаФорма.УникальныйИдентификатор);
	КлючевыеПараметры.Вставить("ДополнительныеПараметрыАдрес","");
	КлючевыеПараметры.Вставить("ИдентификаторСеанса",ЭтаФорма.УникальныйИдентификатор);
	
	Обработки.АналитическийБланк.ВывестиБланки(КлючевыеПараметры,ЭтаФорма,МассивСтраниц,ДанныеДиаграмм);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьМакет(мПоказателиРаскрытияАдрес = Неопределено,логИзмененныхПоказателейАдрес = Неопределено,ВсеБланки = Ложь)
	
	тМакет = ЭтаФорма[ТекущийМакет];
	ОтчетАБ 						= РеквизитФормыВЗначение(ТекущийОбъектАБ);
	ОтчетАБ.ТекущееПравило			= Объект.ПравилоОбработки;
	Если НЕ мПоказателиРаскрытияАдрес = Неопределено Тогда
		ОтчетАБ.мПоказателиРаскрытияАдрес = мПоказателиРаскрытияАдрес;
	КонецЕсли;	
	
	Если  НЕ Объект.ШаблонОтчета.Пустая() 
		И  Объект.ШаблонОтчета.РежимБланка = 1 Тогда 
		
		ВывестиМакетАналитическийБланкСводнаяТаблица(ВыбраннаяВалюта);
	Иначе	
		Если  ОтчетАБ.Валюта <> ВыбраннаяВалюта  Тогда;
			ОтчетАБ.Валюта = ВыбраннаяВалюта;
			
			СтруктураПараметров     = Новый Структура;
			СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",тМакет);
			СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
			СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
			СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
			СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
			СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
			
			ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
		Иначе
			
			СтруктураПараметров     = Новый Структура;
			СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",тМакет);
			СтруктураПараметров.Вставить("ОбновитьДанные",Ложь);
			СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
			СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
			СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
			СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
			
			ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
		КонецЕсли;	
		
		ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
		ОтчетАБ.ЕдиницаИзмерения		= ТекущийДелитель;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОтчетАБ,ТекущийОбъектАБ);	
	
	Если ВсеБланки Тогда
		ИндексБланка = 1;
		Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		
			
			ОтчетАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка"+ИндексБланка);		
			ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
			
			Если  ОтчетАБ.Валюта <> ВыбраннаяВалюта  Тогда;
				ОтчетАБ.Валюта = ВыбраннаяВалюта;
				
				СтруктураПараметров     = Новый Структура;
				СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ЭтаФорма["ПолеТабличногоДокументаМакет"+ИндексБланка]);
				СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
				СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
				СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
				СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
				СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
				
				ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
			Иначе
				
				СтруктураПараметров     = Новый Структура;
				СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ЭтаФорма["ПолеТабличногоДокументаМакет"+ИндексБланка]);
				СтруктураПараметров.Вставить("ОбновитьДанные",Ложь);
				СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
				СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
				СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
				СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
				
				ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
			КонецЕсли;	
			
			ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
			ОтчетАБ.ЕдиницаИзмерения		= ТекущийДелитель;
			
			
			ЗначениеВРеквизитФормы(ОтчетАБ,"ОбъектАналитическогоБланка"+ИндексБланка);		
			ИндексБланка = ИндексБланка +1;			
		КонецЦикла;			
		
	КонецЕсли;	
	
	СброситьСостояниеНеИспользовать();
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьОбъектыДополнительныхБланков()
	
	РеквизитыКДобавлению = Новый Массив;
	
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтроки", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонки", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтрокиОшибка", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонкиОшибка", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтрокиСводнаяТаблица", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонкиСводнаяТаблица", Новый ОписаниеТипов("Булево"),,, Ложь));
	
	ИзменитьРеквизиты(РеквизитыКДобавлению);
	
	МассивБланковДиаграмм  = Новый Массив;

	//Добавляем осовной бланк в кэш
	КэшБланков.Очистить();
	нСтрокаКэшаБланков 					= КэшБланков.Добавить();
	нСтрокаКэшаБланков.Бланк    		= Объект.ШаблонОтчета;
	нСтрокаКэшаБланков.ЭтоОсновнойБланк = Истина;
	нСтрокаКэшаБланков.ИмяСтраницы      = "ОсновнойМакет";
	нСтрокаКэшаБланков.ИмяОбъекта       = "ОбъектАналитическогоБланка";
	нСтрокаКэшаБланков.ИмяМакета        = "ПолеТабличногоДокументаМакет";
	
	ТекущийОбъектАБ    					= "ОбъектАналитическогоБланка";
	ТекущийМакет 	   					= "ПолеТабличногоДокументаМакет";

	//Установим заголовк основного макета по имени бланка
	Элементы.ОсновнойМакет.Заголовок = Строка(Объект.ШаблонОтчета);

	
	Если   Объект.ШаблонОтчета.РежимБланка = 2  Тогда
		Обработки.АналитическийБланк.ЗаполнитьБланкиДиаграмм(Объект.ШаблонОтчета,МассивБланковДиаграмм);
	КонецЕсли;
	
	Если НЕ Объект.ШаблонОтчета.Пустая() И Объект.ШаблонОтчета.РежимБланка = 2  Тогда //Это МП Бланк	
		
		ИндексБланка = 1;
		РеквизитыКДобавлению			= Новый Массив;
		
		//Добавляем дополнительные бланки
		Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл											
			Обработки.АналитическийБланк.СоздатьРеквизитыДополнительногоБланка(ЭтаФорма,Элементы.ОсновнаяПанель,ИндексБланка,СтрБланк.Бланк,,СтрБланк);	
			ИндексБланка = ИндексБланка +1;						
			Обработки.АналитическийБланк.ЗаполнитьБланкиДиаграмм(СтрБланк.Бланк,МассивБланковДиаграмм);	
		КонецЦикла;				
		
		//Добавляем скрытые бланки с даннми диаграмм, если есть.
		Для Каждого СтрБланкДиаграммы Из МассивБланковДиаграмм Цикл
			тБланк = КэшБланков.НайтиСтроки(Новый Структура("Бланк",СтрБланкДиаграммы)); 
			Если тБланк.Количество() = 0 Тогда
				Обработки.АналитическийБланк.СоздатьРеквизитыДополнительногоБланка(ЭтаФорма,Элементы.ОсновнаяПанель,ИндексБланка,СтрБланкДиаграммы,Истина);	
				ИндексБланка = ИндексБланка +1;
			КонецЕсли;		
		КонецЦикла;	
	
		Элементы.ГруппаКомандыСводнойТаблицы.Видимость = Ложь;
		
	ИначеЕсли НЕ Объект.ШаблонОтчета.Пустая() И  Объект.ШаблонОтчета.РежимБланка = 1 Тогда	//Это сводная таблица			
		
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		ТекущийМакет 	= "ПолеТабличногоДокументаМакет";	
		ПолучитьНастройкиОсновногоВариантаСводнойТаблицыПоБланку();	
		
		Элементы.ГруппаКомандыСводнойТаблицы.Видимость = Истина;
		
	КонецЕсли;
	
	//Если не закладочный режим, то страницы не показываем.
	Если  КэшБланков.Количество() = 1 Тогда
		Элементы.ОсновнаяПанель.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(ТекущаяСтраница.Имя);
	ВывестиБланки(МассивСтраниц);
	
	тСтраница 			= КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",ТекущаяСтраница.Имя))[0];

	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;

	АналитическийБланкУХКлиент.УправлениеВидимостьюПустыхСтрок(ЭтаФорма);	
	АналитическийБланкУХКлиент.УправлениеВидимостьюПустыхКолонок(ЭтаФорма);
	
	СкопироватьПолеТабличногоДокументаНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьЗначения(ИмяОбласти,МассивЗначений,КодРесурса="",ОписаниеИзменений,ОтображатьСуммуВДопВалюте)
	
	тМакет = ЭтаФорма[ТекущийМакет];	
	ОбъектАБ = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	тОбъектСтруктура = Новый Структура;
	ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,Объект.УправлениеПериодом,Объект.Организация);
	
	Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
		нтПериод 				=  ОбъектАБ.ЗаблокированныеПериоды.Добавить();
		нтПериод.ПериодОтчета   =  тПериод;
	КонецЦикла;	
	
	ОбъектАБ.ВставитьЗначениеВОбласть(тМакет,ИмяОбласти,МассивЗначений,,,Объект,КодРесурса,ОписаниеИзменений,ОтображатьСуммуВДопВалюте);
	
	ЗначениеВРеквизитФормы(ОбъектАБ, ТекущийОбъектАБ);
	
	Если ВычислятьПриИзменении Тогда
		ЗаписатьИзмененныеПоказателиБланк(Истина);
		УстановитьРежимРедактированияДанных(Ложь);		
	Иначе	
		УстановитьРежимРедактированияДанных(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений)
		
	МассивСтрок = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера,Символ(13));	
	Для Каждого Стр Из МассивСтрок Цикл
		
		МассивЗначенийСтрокиТипизированный = Новый Массив();
		
		Если Лев(Стр,1) = Символ(10) Тогда
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Прав(Стр,СтрДлина(Стр)-1),"	");
			
			Для Каждого ЗначениеМассива Из МассивЗначенийСтроки Цикл	
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ЗначениеМассива) тогда
					МассивЗначенийСтрокиТипизированный.Добавить(Число(ЗначениеМассива));
				Иначе	
					МассивЗначенийСтрокиТипизированный.Добавить(ЗначениеМассива);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Стр,"	");
			
			Для Каждого ЗначениеМассива Из МассивЗначенийСтроки Цикл	
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ЗначениеМассива) тогда
					МассивЗначенийСтрокиТипизированный.Добавить(Число(ЗначениеМассива));
				Иначе	
					МассивЗначенийСтрокиТипизированный.Добавить(ЗначениеМассива);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		МассивЗначений.Добавить(МассивЗначенийСтрокиТипизированный);
				
	КонецЦикла;
		 		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОтчетСценарныйАнализ(МассивПоказателей=Неопределено,Моделирование=Ложь) Экспорт
		
	тМакет = ЭтаФорма[ТекущийМакет];
	ТекущаяОбластьРасшифровка  = тМакет.ВыделенныеОбласти[0];
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;

	Если НЕ ТекущаяОбластьРасшифровка.Расшифровка  = Неопределено Тогда		
		СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(ТекущаяОбластьРасшифровка.Имя,ТекущаяОбластьРасшифровка.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			 КодРесурса = СтруктураРасшифровки.ПоказательКод;
		Иначе	 
			Сообщить(НСтр("ru = 'Необходимо выделить область показателя.'"));
			Возврат;
		КонецЕсли;		
	Иначе	
		Сообщить(НСтр("ru = 'Необходимо выделить область показателя.'"));
		Возврат;
	КонецЕсли;	
	
	Попытка
		ЗначениеЧисло = Число(СтрЗаменить( ?(ТекущаяОбластьРасшифровка.Текст="",0,ТекущаяОбластьРасшифровка.Текст) ," ",""));
	Исключение	  
		Сообщить(НСтр("ru = 'Необходимо выбрать числовое значение.'"));
		Возврат; 
	КонецПопытки;
	
	//Если ИспользоватьРасширенныйАлгоритмПересчетаПоказателей И ВерсияУправлениеХолдингом = "3.2" Тогда		
	//		
	//	СтруктураПараметров = ПодготовитьПараметрыФакторногоАнализа(СтруктураРасшифровки,ЗначениеЧисло);
	//	ОткрытьФорму("Обработка.ВыводСтруктурыРасчетаПоказателей.Форма.ФакторныйАнализ", СтруктураПараметров, ЭтаФорма, Новый УникальныйИдентификатор); 
	//	
	//Иначе
	
		СтруктураПараметров = ПодготовитьПараметрыСценарногоАнализа(СтруктураРасшифровки,ЗначениеЧисло,Моделирование);

		Если СтруктураПараметров = Неопределено Тогда	
			Сообщить(НСтр("ru = 'Недостаточно параметров для вызова факторного анализа.'"));
			Возврат; 	
		КонецЕсли;	
		
		ФормаОтчета  = ПолучитьФорму("Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая", СтруктураПараметров);		
				             	
		Если Моделирование Тогда		
			ФормаОтчета.Заголовок=НСтр("ru = 'Факторный анализ и моделирование'");
			ФормаОтчета.Открыть();								
		Иначе	
			ФормаОтчета.Заголовок=НСтр("ru = 'Сравнительный факторный анализ'");
			ФормаОтчета.Открыть();	
		КонецЕсли;
		
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьСостояниеНеИспользовать()
	
	тЭлМакет = Элементы[ТекущийМакет];
	
	ОтображениеСостояния = тЭлМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	тЭлМакет.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакетГруппаКнопокРедактированияГР.Доступность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДополнительногоБланка()
	
	ОтчетАБ = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	ОтчетАБ.Сценарий				= Объект.Сценарий;
	ОтчетАБ.ПериодОтчета			= Объект.ПериодОтчета;
	ОтчетАБ.ПериодОтчетаОкончание 	= Объект.ПериодОкончания;
	ОтчетАБ.Организация 			= Объект.Организация;
	ОтчетАБ.Проект 			 		= Объект.Проект;
	ОтчетАБ.Валюта 			 		= ВыбраннаяВалюта;		
	ОтчетАБ.ЕдиницаИзмерения 		= Объект.ЕдиницаИзмерения;
	ОтчетАБ.ТекущееПравило          = Объект.ПравилоОбработки;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ОтчетАБ["Аналитика"+Инд] = Объект["Аналитика"+Инд];
	КонецЦикла;	
	
	СтруктураПараметров     = Новый Структура;
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ЭтаФорма[ТекущийМакет]);
	СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
	СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
	СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
	СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
	СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
	
	ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
	ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
	ОтчетАБ.ТекущийДелитель = ТекущийДелитель;
	ОтчетАБ.ТекущаяТочность = ТекущаяТочность;
	ОтчетАБ.логИзмененныхДанныхАдрес = логИзмененныхДанныхАдрес;
	ОтчетАБ.логИзмененныхКомментариевАдрес = логИзмененныхКомментариевАдрес;
	ОтчетАБ.ИдентификаторСеанса 	= ЭтаФорма.УникальныйИдентификатор;
	ЗначениеВРеквизитФормы(ОтчетАБ,ТекущийОбъектАБ);		
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьОтображенияВТекущемРежиме(РабочийОбъект)
	
	Если  СтрНайти(Объект.СпособВывода,"Бланк")>0 И  Объект.ШаблонОтчета.Пустая() Тогда 
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
		Элементы.ОшибкаРежимаВыводаДанных.Видимость = Истина;
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не выбран бланк для отображения'"));	
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность 		= Истина;
		Элементы.ФормаОткрытьНастройки.Доступность	 	= Истина;
		Элементы.ФормаКоманднаяПанель.Доступность 		= Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность 			= Истина;	
								
	ИначеЕсли НЕ Объект.СпособВывода  = "СводнаяТаблица" И (Объект.ШаблонОтчета.Пустая() ИЛИ Объект.ШаблонОтчета.РежимБланка<>2) Тогда		
		
		СтруктураРеквизитов = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(Объект.ВидОтчета, Объект.Сценарий, Объект.Организация, Объект.ПериодОтчета);
		Если СтруктураРеквизитов.Свойство("БланкДляОтображенияМногопериодный") и ЗначениеЗаполнено(СтруктураРеквизитов.БланкДляОтображенияМногопериодный) Тогда
			 Объект.ШаблонОтчета = СтруктураРеквизитов.БланкДляОтображенияМногопериодный;
			 Объект.СпособВывода = "Бланк";
			 СоздатьОбъектыДополнительныхБланков();
			 ВывестиДанныеЭкземпляра(РабочийОбъект,,Ложь,Ложь);		
			 ВывестиПрмечания();	
			 Возврат;
		 КонецЕсли;	
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
		Элементы.ОшибкаРежимаВыводаДанных.Видимость = Истина;
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Выберите многопериодный бланк или бланк сводной таблицы для отображения текущего экземпляра отчета'"));	
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;	
		
	ИначеЕсли Объект.СпособВывода  = "СводнаяТаблица" И Объект.ШаблонОтчета.Пустая() Тогда	
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
		Элементы.ОшибкаРежимаВыводаДанных.Видимость = Истина;
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не выбран бланк сводной таблицы для отображения по умолчанию в настройках вида отчета'"));	
		Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
			Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
				Продолжить;
			КонецЕсли;	
			Эл.Доступность = Ложь;		
		КонецЦикла;		
		Элементы.ФормаГруппаНастройки.Доступность = Истина;
		Элементы.ФормаОткрытьНастройки.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;	
	ИначеЕсли 	 Объект.СпособВывода  = "СводнаяТаблица" Тогда
		
		СоздатьОбъектыДополнительныхБланков();
		
		Если  НЕ ЗначениеЗаполнено(СтруктураНастроекАналитическогоБланкаАдрес) Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОшибкаРежимаВыводаДанных;
			Элементы.ОшибкаРежимаВыводаДанных.Видимость = Истина;
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Ошибка настройки состава бланка сводной таблицы. Возможно не выбраны строки или показатели.'"));
			Для Каждого Эл Из ЭтаФорма.Элементы Цикл		
				Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
					Продолжить;
				КонецЕсли;	
				Эл.Доступность = Ложь;		
			КонецЦикла;		
			Элементы.ФормаГруппаНастройки.Доступность = Истина;
			Элементы.ФормаОткрытьНастройки.Доступность = Истина;
			Элементы.ФормаКоманднаяПанель.Доступность = Истина;
		Иначе	
			ВывестиДанныеЭкземпляра(РабочийОбъект,,Ложь,Ложь);
		КонецЕсли;
	Иначе 		
		СоздатьОбъектыДополнительныхБланков();
		ВывестиДанныеЭкземпляра(РабочийОбъект,,Ложь,Ложь);		
		ВывестиПрмечания();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	ЗаписатьИзмененныеПоказателиБланк(Истина,Ложь);
	ОбновитьМакет();
	УстановитьРежимРедактированияДанныхКлиент(Ложь);			 
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ОбновитьМакет();
	УстановитьРежимРедактированияДанныхКлиент(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимРедактированияДанных(Режим)
	
	Если Режим Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	Элементы.ГруппаПрименитьОтменить.Видимость 		= Режим;	
	
	Для Каждого Эл Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл		
		Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
			Продолжить;
		КонецЕсли;	
		Эл.Доступность = НЕ Режим;		
	КонецЦикла;		
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКомментарияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
				
	ИмяОбласти =  Элементы[ТекущийМакет].ТекущаяОбласть.Имя;
	ЗаписатьКомментарий(Результат,ИмяОбласти);	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКомментарий(Результат,ИмяОбласти)
	
	тМакет = ЭтаФорма[ТекущийМакет];
	ОбъектАБ = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	ОбъектАБ.ВставитьКомментарийВОбласть(Объект,тМакет,ИмяОбласти,Результат,логИзмененныхКомментариевАдрес,ЭтаФорма.УникальныйИдентификатор);      
			
КонецПроцедуры

// Переводит ТекущийОбъект в статус Черновик, если указан статус Не заполнен.
&НаСервере
Процедура ПеревестиНезаполненныйОтчетВЧерновик(ТекущийОбъект)
	// Если текущий статус - Не заполнен, тогда переведём в Черновик.
	ТекущийСтатус = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ТекущийОбъект.Ссылка);
	Если ТекущийСтатус = (Перечисления.СостоянияОтчетов.Запланирован) Тогда
		НовоеСостояние = Перечисления.СостоянияОтчетов.Выполняется;
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ТекущийОбъект.Ссылка, НовоеСостояние);
	Иначе
		// Для прочих статусов не выполняем эту операцию.
	КонецЕсли; 
КонецПроцедуры		// ПеревестиНезаполненныйОтчетВЧерновик()

// Возвращает заголовок для формы объекта ВходнойОбъект.
&НаКлиентеНаСервереБезКонтекста
Функция ВернутьЗаголовокФормы(ВходнойОбъект,ВыбраннаяВалюта)
	РезультатФункции = "";
	РезультатФункции = НСтр("ru = 'Экземпляр отчета %ВидОтчета%: %ОсновнаяВалюта% <%Организация%> <%Проект%> <%УправлениеПериодом%>'");
	РезультатФункции = СтрЗаменить(РезультатФункции, "%ВидОтчета%",				 Строка(ВходнойОбъект.ВидОтчета));
	РезультатФункции = СтрЗаменить(РезультатФункции, "%Организация%",			 Строка(?(ЗначениеЗаполнено(ВходнойОбъект.Организация), ВходнойОбъект.Организация, "")));
	РезультатФункции = СтрЗаменить(РезультатФункции, "%Проект%",				 Строка(?(ЗначениеЗаполнено(ВходнойОбъект.Проект), ВходнойОбъект.Проект, "")));
	РезультатФункции = СтрЗаменить(РезультатФункции, "%УправлениеПериодом%",	 Строка(?(ЗначениеЗаполнено(ВходнойОбъект.УправлениеПериодом), ВходнойОбъект.УправлениеПериодом, "")));
	ПредставлениеОсновнойВалюты = " " + НСтр("ru = 'Валюта отображения: '") + " " + ВыбраннаяВалюта;
	РезультатФункции = СтрЗаменить(РезультатФункции, "%ОсновнаяВалюта%",		 ПредставлениеОсновнойВалюты);
	Возврат РезультатФункции;
КонецФункции		// ВернутьЗаголовокФормы()

&НаСервере
Процедура ЗаписатьИзмененныеПоказателиБланк(ЧерновойРежим = Ложь,ОбновитьИтоги = Истина,ОчисткаДокумента = Ложь,ОчищатьЛог = Истина)
	
	Если ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес = "" Тогда
		 Возврат;
	КонецЕсли;	
	
	ТаблицаИсходныхПоказателей = Новый ТаблицаЗначений;
	ТаблицаТрассировкиРасчета  = Новый ТаблицаЗначений;
	
	ПараметрыЗадания = Новый Структура;		
	ПараметрыЗадания.Вставить("Валюта",ВыбраннаяВалюта);
	ПараметрыЗадания.Вставить("Бланк",Объект.ШаблонОтчета);
	ПараметрыЗадания.Вставить("ПравилоОбработки",Объект.ПравилоОбработки);
	ПараметрыЗадания.Вставить("ИспользуемаяИБ",Объект.ИспользуемаяИБ);
	ПараметрыЗадания.Вставить("СпособФормированияОтчета",Объект.СпособФормированияОтчета);
	ПараметрыЗадания.Вставить("РежимТрассировки"			,Ложь);
	ПараметрыЗадания.Вставить("ТаблицаИсходныхПоказателей"	,ТаблицаИсходныхПоказателей);
	ПараметрыЗадания.Вставить("ТаблицаТрассировкиРасчета"	,ТаблицаТрассировкиРасчета);
	ПараметрыЗадания.Вставить("ЧерновойРежим"				,ЧерновойРежим);
	ПараметрыЗадания.Вставить("ИдентификаторСеанса"			,ЭтаФорма.УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("ОчисткаДокумента"			,ОчисткаДокумента);
	ПараметрыЗадания.Вставить("РежимЭкземпляра"				,Истина);
	ПараметрыЗадания.Вставить("Регистратор"	,Объект.Ссылка);
	
	ПараметрыЗадания.Вставить("ВидОтчета",		Объект.ВидОтчета);
	ПараметрыЗадания.Вставить("Сценарий",		Объект.Сценарий);
	ПараметрыЗадания.Вставить("ПериодОтчета",	Объект.ПериодОтчета);
    ПараметрыЗадания.Вставить("ПериодОкончания", Объект.ПериодОкончания);
    ПараметрыЗадания.Вставить("Организация",	 Объект.Организация);
	ПараметрыЗадания.Вставить("Проект",	 		 Объект.Проект);
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ПараметрыЗадания.Вставить("Аналитика"+Инд, Объект["Аналитика"+Инд]);
	КонецЦикла;	
	
	Если  ЧерновойРежим Тогда
		ПараметрыЗадания.Вставить("логИзмененныхДанныхАдрес"	,ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес);
		логИзмененныхДанных  = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес);
		логИзмененныхДанныхКопия  = логИзмененныхДанных.Скопировать();	
	Иначе		
		ПараметрыЗадания.Вставить("логИзмененныхКомментариевАдрес"	,логИзмененныхКомментариевАдрес);
	КонецЕсли;	
	
	АдресХранилища               = "";
	АдресХранилищаДополнительный = "";	
	СводнаяТаблицаУХ.ПрименитьИзменения(ПараметрыЗадания,АдресХранилища,АдресХранилищаДополнительный);
	
	Если ОчищатьЛог Тогда
		
		Если ЗначениеЗАполнено(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес) Тогда
			логИзмененныхДанных  = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес);
			логИзмененныхДанных.Очистить();
		КонецЕсли;
		
		Если ЗначениеЗАполнено(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхКомментариевАдрес) Тогда
			логИзмененныхДанных  = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхКомментариевАдрес);
			логИзмененныхДанных.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьИтоги Тогда
		Попытка
			тОбъект  = РеквизитФормыВЗначение(ТекущийОбъектАБ);
			тОбъект.ОбновитьВычисляемыеЯчейки(логИзмененныхДанныхКопия,ЭтаФорма[ТекущийМакет],ЭтаФорма.УникальныйИдентификатор,ПараметрыЗадания);
		Исключение
			ОбновитьМакет();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВычисляемыеЯчейки()
		
	ТаблицаИсходныхПоказателей = Новый ТаблицаЗначений;
	ТаблицаТрассировкиРасчета  = Новый ТаблицаЗначений;
	
	логИзмененныхДанных  = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес);
    логИзмененныхДанныхКопия  = логИзмененныхДанных.Скопировать();
	
	
	ПараметрыЗадания = Новый Структура;		
	ПараметрыЗадания.Вставить("Валюта",ВыбраннаяВалюта);
	ПараметрыЗадания.Вставить("Бланк",Объект.ШаблонОтчета);
	ПараметрыЗадания.Вставить("ПравилоОбработки",Объект.ПравилоОбработки);
	ПараметрыЗадания.Вставить("ИспользуемаяИБ",Объект.ИспользуемаяИБ);
	ПараметрыЗадания.Вставить("СпособФормированияОтчета",Объект.СпособФормированияОтчета);

	ПараметрыЗадания.Вставить("РежимТрассировки"			,Ложь);
	ПараметрыЗадания.Вставить("ТаблицаИсходныхПоказателей"	,ТаблицаИсходныхПоказателей);
	ПараметрыЗадания.Вставить("ТаблицаТрассировкиРасчета"	,ТаблицаТрассировкиРасчета);
	ПараметрыЗадания.Вставить("ЧерновойРежим"				,Истина);
	ПараметрыЗадания.Вставить("ИдентификаторСеанса"			,ЭтаФорма.УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("ОчисткаДокумента"			,Ложь);

	ПараметрыЗадания.Вставить("Регистратор"	,Объект.Ссылка);
		
	тОбъект  = РеквизитФормыВЗначение(ТекущийОбъектАБ);
	тОбъект.ОбновитьВычисляемыеЯчейки(логИзмененныхДанныхКопия,ЭтаФорма[ТекущийМакет],ЭтаФорма.УникальныйИдентификатор,ПараметрыЗадания);

	
	Если ЗначениеЗАполнено(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхДанныхАдрес) Тогда	
		логИзмененныхДанных.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗАполнено(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхКомментариевАдрес) Тогда
		логИзмененныхДанных  = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].логИзмененныхКомментариевАдрес);
		логИзмененныхДанных.Очистить();
	КонецЕсли;

		
КонецПроцедуры	

&НаСервере
Функция ПроверитьНаличиеИзменений()
	
	ИзмененныеПоказатели  = СводнаяТаблицаУХ.ПолучитьИзмененныеПоказатели(Строка(ЭтаФорма.УникальныйИдентификатор));	
	Возврат  ИзмененныеПоказатели.Количество()>0;
		
КонецФункции	

&НаСервере
Процедура ВернутьДанныеПоказателей(ОбластьИмя,МассивПоказателей,сПериоды,ВсеПоказателиБланка = Ложь)
	
	тМакет = ЭтаФорма[ТекущийМакет];
	Область = тМакет.Область(ОбластьИмя);
	
	Для ИндСтроки = Область.Верх По Область.Низ Цикл
		Для ИндКолонки  =  Область.Лево По Область.Право Цикл
			
			СтруктураНезаполненыхАналитик 	= Новый Структура;
			СтруктураОтбираемыхАналитик 	= Новый Структура;
			ТекущаяОбластьРасшифровка 		= тМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
			
			Если НЕ ТекущаяОбластьРасшифровка.Расшифровка  = Неопределено Тогда		
				СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(ТекущаяОбластьРасшифровка.Имя,ТекущаяОбластьРасшифровка.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
				Если СтруктураРасшифровки.Свойство("ПоказательКод")  Тогда		
					МассивПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);
				КонецЕсли;	
				
				Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда		
					сПериоды.Вставить("UID_"+СтрЗаменить(СтруктураРасшифровки.ПериодОтчета.УникальныйИдентификатор(),"-",""),СтруктураРасшифровки.ПериодОтчета);
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
		
	Если ВсеПоказателиБланка Тогда	
		тМассивПоказателей = ЭтаФорма[ТекущийОбъектАБ].КэшИменОбластейПоказателей.Выгрузить();	
		тМассивПоказателей.Свернуть("Показатель");
		МассивПоказателей = тМассивПоказателей.ВыгрузитьКолонку("Показатель");
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,АдресРасшифровкиГруппОтборов,ОбластьИмя,Расшифровка,ТзСвойстваПоказателейАдрес)
		
	Возврат Обработки.АналитическийБланк.ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,АдресРасшифровкиГруппОтборов,ОбластьИмя,Расшифровка,ТзСвойстваПоказателейАдрес);
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает код колонки, которой принадлежит показатель отчета ПоказательВход.
Функция ПолучитьКодКолонкиПоказателя(ПоказательВход)
	
	Если ЗначениеЗаполнено(ПоказательВход) Тогда
		Возврат СокрЛП(ПоказательВход.Колонка.Код);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаблокированныеПериоды(тОбъектАБ,ЗаблокированныеПериоды = Неопределено,УправлениеПериодом,Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария = &УправлениеПериодомСценария
	               |	И СтатусыПериодовСценариев.СтатусБлокировки = 1
	               |	И СтатусыПериодовСценариев.Организации = &Организации";
	
	Запрос.УстановитьПараметр("УправлениеПериодомСценария",УправлениеПериодом);
	Запрос.УстановитьПараметр("Организации",Организация);
	
	Если ЗаблокированныеПериоды = Неопределено Тогда
		тПериоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодОтчета");
		тОбъектАБ.Вставить("ЗаблокированныеПериоды",тПериоды);
	Иначе	
		тПериоды = Запрос.Выполнить().Выгрузить();
		ЗаблокированныеПериоды.Загрузить(тПериоды);
		тОбъектАБ.Вставить("ЗаблокированныеПериоды",ЗаблокированныеПериоды);
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Функция ВыделитьОбластиПоказателейСервер(МассивПоказателей,ПериодРасшифровки,СтруктураОтбора,НезаполненныеАналитики)
	
	тМакет 		= ПолеТабличногоДокументаМакет;	
	ОбъектАБ 	= РеквизитФормыВЗначение("ОбъектАналитическогоБланка");		
	МассивИменОбластей 			= Новый Массив;
	ОбъектАБ.ВыделитьОбластиПоказателей(тМакет,МассивПоказателей,ПериодРасшифровки,СтруктураОтбора,МассивИменОбластей,НезаполненныеАналитики);
	
	Возврат МассивИменОбластей;
	
КонецФункции

&НаКлиенте
Процедура СвернутьГруппы(Команда)
	
	ЭтаФорма[ТекущийМакет].ПоказатьУровеньГруппировокСтрок(0);
	ЭтаФорма[ТекущийМакет].ПоказатьУровеньГруппировокКолонок(0);
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппы(Команда)
	
	ЭтаФорма[ТекущийМакет].ПоказатьУровеньГруппировокСтрок(ЭтаФорма[ТекущийМакет].КоличествоУровнейГруппировокСтрок());
    ЭтаФорма[ТекущийМакет].ПоказатьУровеньГруппировокКолонок(ЭтаФорма[ТекущийМакет].КоличествоУровнейГруппировокКолонок());
	
	ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиАктуализация(Команда)
	
	ИзменитьПоказатели("Актуализация");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиИндексация(Команда)
	
	ИзменитьПоказатели("Дефлятор");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиСуммаПроцент(Команда)
	
	ИзменитьПоказатели("ЗначениеПроцент");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияЯчеекНаСервере(Верх, Лево)
	
	ТекущаяОбластьАктивизацииТаблица = ПолучитьИзВременногоХранилища(АдресТекущейОбластиАктивизации);
	
	Для Каждого СтрокаЯчейкаАктивизации Из ТекущаяОбластьАктивизацииТаблица Цикл
		
		ТекущаяЯчейкаПриемник = ЭтаФорма[ТекущийМакет].Область(Верх + СтрокаЯчейкаАктивизации.СмещениеУ, Лево + СтрокаЯчейкаАктивизации.СмещениеХ);
		
		ЗаполнитьЗначенияСвойств(ТекущаяЯчейкаПриемник, СтрокаЯчейкаАктивизации);
		
		Если ТекущаяЯчейкаПриемник.СодержитЗначение тогда
			АналитическийБланкУХСервер.ВставитьЗначениеВОбластьТабличногоДокумента(ТекущаяЯчейкаПриемник, СтрокаЯчейкаАктивизации.ТекущееЗначение, СтрокаЯчейкаАктивизации.Формат, ТекущаяТочность);
		Иначе
			ТекущаяЯчейкаПриемник.Текст = СтрокаЯчейкаАктивизации.ТекущееЗначение;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьПолеТабличногоДокументаНаСервере()
	
	Если ЗначениеЗаполнено(ТекущийМакет) И ТекущийМакет <> ТекущийМакетКопия Тогда 
		
		ПолеТабличногоДокументаМакетКопия.Очистить();
		ПолеТабличногоДокументаМакетКопия.Вывести(ЭтаФорма[ТекущийМакет]);
		
		ТекущийМакетКопия = ТекущийМакет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзменении(Элемент)
		
	Область = ЭтаФорма[ТекущийМакет].ТекущаяОбласть;
	
	ОбъектКопирования = Новый COMОбъект("htmlfile");
	ДанныеБуфера =ОбъектКопирования.ParentWindow.ClipboardData.GETdata("Text");
		
	АналитическийБланкУХКлиент.ВосстановитьСверткуСтрокКолонок(ЭтаФорма);
		
	Если ЗначениеЗаполнено(ДанныеБуфера) И Не ЭтоРедактирование
		И Лев(ДанныеБуфера, СтрДлина(Область.Текст)) = Область.Текст тогда
		
		ПолеТабличногоДокументаМакетПриАктивизацииОбластиНаСервере(Область.Верх, Область.Низ, Область.Лево, Область.Право);
		ВосстановитьЗначенияЯчеекНаСервере(Область.Верх, Область.Лево);
		ВставитьДанныеИзБуфера(неопределено);
		Возврат;
		
	КонецЕсли;
	
	ЭтоРедактирование = Ложь;
	
	СкопироватьПолеТабличногоДокументаНаСервере();
				
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОшибкаПриИзменении(Элемент)
		
	АналитическийБланкУХКлиент.ВосстановитьСверткуСтрокКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСверткуСтрокКолонокДляТекущейСтраницы()
		
	АналитическийБланкУХКлиент.ВосстановитьСверткуСтрокКолонок(ЭтаФорма);

КонецПроцедуры


#Область РасботаСПримечаниямиБланков

&НаКлиенте
Процедура ПримечаниеАналитическогоБланкаПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПрмечания(Команда)
	
	Элементы.ФормаОтобразитьПримечания.Пометка 				= НЕ Элементы.ФормаОтобразитьПримечания.Пометка;
    Элементы.ПримечаниеАналитическогоБланка.Видимость 		= Элементы.ФормаОтобразитьПримечания.Пометка;
    Элементы.ПримечаниеАналитическогоБланка.Доступность     = Заблокирован;
	
	ОтобразитьПримечанияДополнительныхБланков(Элементы.ФормаОтобразитьПримечания.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПрмечания()
	
	Если  НЕ Объект.ШаблонОтчета.Пустая() И Объект.ШаблонОтчета.РежимБланка = 2 Тогда	
		Если ЗначениеЗаполнено(Объект.ПримечанияБланков) Тогда	
			тПримечания = ЗначениеИзСтрокиВнутр(Объект.ПримечанияБланков);
			Для Каждого тСтр Из тПримечания Цикл
				Если тСтр.Бланк = Объект.ШаблонОтчета Тогда
					ПримечаниеАналитическогоБланка.УстановитьТекст(тСтр.Примечание)
				КонецЕсли;		
				ИндексБланка = 1;
				Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		 	
					Если тСтр.Бланк = СтрБланк.Бланк Тогда
						ЭтаФорма["ПримечаниеАналитическогоБланка"+ИндексБланка].УстановитьТекст(тСтр.Примечание);
					КонецЕсли;
					ИндексБланка = 	ИндексБланка+1;
				КонецЦикла;	
			КонецЦикла;			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримечания()
	
	Если ЗначениеЗаполнено(Объект.ПримечанияБланков) Тогда	
		тзПримечания = ЗначениеИзСтрокиВнутр(Объект.ПримечанияБланков);
		текБланк   =  тзПримечания.НайтиСтроки(Новый Структура("Бланк",Объект.ШаблонОтчета));
		Если текБланк.Количество() = 0 Тогда
			нСтр         = тзПримечания.Добавить();
		Иначе
			нСтр         = текБланк[0];
		КонецЕсли;	
		нСтр.Примечание   = ПримечаниеАналитическогоБланка.ПолучитьТекст();
		Если  НЕ Объект.ШаблонОтчета.Пустая() И Объект.ШаблонОтчета.РежимБланка = 2 Тогда
			ИндексБланка = 1;
			Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		 	
				текБланк   =  тзПримечания.НайтиСтроки(Новый Структура("Бланк",СтрБланк.Бланк));
				Если текБланк.Количество() = 0 Тогда
					нСтр         = тзПримечания.Добавить();
					нСтр.Бланк   = СтрБланк.Бланк;
				Иначе
					нСтр         = текБланк[0];
				КонецЕсли;	
				нСтр.Примечание   = ЭтаФорма["ПримечаниеАналитическогоБланка"+ИндексБланка].ПолучитьТекст();
				ИндексБланка = 	ИндексБланка+1;				
			КонецЦикла;		
		КонецЕсли;
	Иначе	
		тзПримечания = Новый ТаблицаЗначений;
		тзПримечания.Колонки.Добавить("Бланк");
		тзПримечания.Колонки.Добавить("Примечание");
		нСтр         = тзПримечания.Добавить();
		нСтр.Бланк   = Объект.ШаблонОтчета;
		нСтр.Примечание   = ПримечаниеАналитическогоБланка.ПолучитьТекст();
		Если  НЕ Объект.ШаблонОтчета.Пустая() И Объект.ШаблонОтчета.РежимБланка = 2 Тогда
			ИндексБланка = 1;
			Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		 	
				нСтр         = тзПримечания.Добавить();
			    нСтр.Бланк   = СтрБланк.Бланк;
				нСтр.Примечание   = ЭтаФорма["ПримечаниеАналитическогоБланка"+ИндексБланка].ПолучитьТекст();	
				ИндексБланка = 	ИндексБланка+1;				
			КонецЦикла;		
		КонецЕсли;	
	КонецЕсли;	
		
	Объект.ПримечанияБланков = ЗначениеВСтрокуВнутр(тзПримечания);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПримечанияДополнительныхБланков(Пометка)
	
	ИндексБланка = 1;
	
	Если  НЕ Объект.ШаблонОтчета.Пустая() И Объект.ШаблонОтчета.РежимБланка = 2 Тогда
		Для Каждого СтрБланк Из Объект.ШаблонОтчета.ДополнительныеБланки Цикл		 	
			Элементы["ПримечаниеАналитическогоБланка"+ИндексБланка].Видимость 		= Пометка;
			Элементы["ПримечаниеАналитическогоБланка"+ИндексБланка].Доступность     = Заблокирован;
			ИндексБланка = 	ИндексБланка+1;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	


#КонецОбласти

#Область ТрассировкаРасчета

#Область ДвиженияДокумента

&НаКлиенте
Процедура ОткрытьДвиженияДокументаПлоскаяТаблица(Команда)
	
	ОткрытьДвиженияДокумента("ПлоскаяТаблица");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДвиженияДокументаСГруппировками(Команда)

	ОткрытьДвиженияДокумента("СГруппировками");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДвиженияДокумента(КлючВарианта)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДвиженияДокументаПослеВопроса", ЭтотОбъект, КлючВарианта);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьДвиженияДокументаПродолжение(КлючВарианта);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДвиженияДокументаПослеВопроса(Результат, КлючВарианта) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ОткрытьДвиженияДокументаПродолжение(КлючВарианта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДвиженияДокументаПродолжение(КлючВарианта)
	
	УИДформы = Новый УникальныйИдентификатор;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
	
	// Получим компоновщик настроек нужного варианта
	ФормаОтчёта = ПолучитьФорму("Отчет.ЗначенияПоказателейОтчетов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, УИДформы);
	КомпоновщикНастроек = ФормаОтчёта.Отчет.КомпоновщикНастроек;
	
	// Установим отбор в пользоовательские настройки
	УстановитьПользовательскийОтборСКД(КомпоновщикНастроек, "ЭкземплярОтчета", Объект.Ссылка);
	
	// Откроем форму отчета
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 	
	ОткрытьФорму("Отчет.ЗначенияПоказателейОтчетов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, УИДформы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПользовательскийОтборСКД(КомпоновщикНастроек, ИмяОтбора, Значение, ВидСравнения = Неопределено)
	
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяОтбора);	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКД Тогда
			ПользовательскийОтбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
				ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если ПользовательскийОтбор <> Неопределено Тогда
				ПользовательскийОтбор.Использование 	= (Значение <> Неопределено);
				ПользовательскийОтбор.ВидСравнения 		= ?(ВидСравнения <> Неопределено, ВидСравнения, ВидСравненияКомпоновкиДанных.Равно); 
				ПользовательскийОтбор.ПравоеЗначение  	= Значение;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЭталонныйМакет

&НаКлиенте
Процедура ЗагрузитьЭталонныйМакет(Команда)
	
	ЗагрузитьЭталонныйМакетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьТекущийМакетЭталонным(Команда)
	
	ЗагрузитьЭталонныйМакетНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЭталонныйМакетНаКлиенте(ТекущийМакет = Ложь)	
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЭталонныйМакетПослеВопроса", ЭтотОбъект, ТекущийМакет);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);		
	Иначе
		ЗагрузитьЭталонныйМакетПродолжение(ТекущийМакет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЭталонныйМакетПослеВопроса(Результат, ТекущийМакет) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ЗагрузитьЭталонныйМакетПродолжение(ТекущийМакет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЭталонныйМакетПродолжение(ТекущийМакет)
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЭталонныйМакетПриПомещенииФайлов", ЭтотОбъект, ТекущийМакет);
    
    ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
    ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ИмяФайла = "";
	Если ТекущийМакет Тогда
		ПараметрыЗагрузки.Интерактивно = Ложь;
		#Если ВебКлиент Тогда
			Каталог = КаталогВременныхФайлов();
			ИмяФайла = Каталог + Строка(Новый УникальныйИдентификатор) + ".mxl";
		#Иначе
 			ИмяФайла = ПолучитьИмяВременногоФайла("MXL");
		#КонецЕсли
		Попытка
			ПолеТабличногоДокументаМакет.Записать(ИмяФайла);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить чтение файла, по причине: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
		
    ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки, ИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЭталонныйМакетПриПомещенииФайлов(ПомещенныйФайл, ТекущийМакет) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	Если ТекущийМакет Тогда
		Попытка
			УдалитьФайлы(ПомещенныйФайл.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить чтение файла, по причине: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ЗагрузитьЭталонныйМакетНаСервере(Объект.Ссылка, ПомещенныйФайл); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьЭталонныйМакетНаСервере(Ссылка, ПомещенныйФайл)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(Поток);
	Поток.Закрыть();
	УдалитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	
	МенеджерЗаписи = РегистрыСведений.ХранилищаЭталонныхМакетовТестированияПересчетаПоказателей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭкземплярОтчета = Ссылка;
	МенеджерЗаписи.ЭталонныйМакет = Новый ХранилищеЗначения(ТабличныйДокумент);

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить чтение файла, по причине: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки	
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСЭталоннымМакетом(Команда)
	
	СравнитьСЭталоннымМакетомНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСЭталоннымМакетомПоШаблону(Команда)
	
	СравнитьСЭталоннымМакетомНаКлиенте(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСЭталоннымМакетомНаКлиенте(ПоШаблону = Ложь)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьСЭталоннымМакетомПослеВопроса", ЭтотОбъект, ПоШаблону);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СравнитьСЭталоннымМакетомПродолжение(ПоШаблону);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура СравнитьСЭталоннымМакетомПослеВопроса(Результат, ПоШаблону) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		СравнитьСЭталоннымМакетомПродолжение(ПоШаблону);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСЭталоннымМакетомПродолжение(ПоШаблону)
	
	ЭталонныйМакет = ПолучитьЭталонныйМакет(Объект.Ссылка);
	Если ТипЗнч(ЭталонныйМакет) <> Тип("ТабличныйДокумент") Тогда
		ТекстСообщения = НСтр("ru = 'Не найден эталонный макет для данного документа.';");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СвойстваИсключения = Новый Массив;
	СвойстваИсключения.Добавить("Имя");
	СвойстваИсключения.Добавить("Расшифровка");
	СвойстваИсключения.Добавить("Значение");
	СвойстваИсключения.Добавить("ЭлементУправления");
	СвойстваИсключения.Добавить("Объект");
	
	ПараметрыСравнения = Новый Структура;
	ПараметрыСравнения.Вставить("Документ1", ПолеТабличногоДокументаМакет);
	ПараметрыСравнения.Вставить("Документ2", ЭталонныйМакет);
	ПредставлениеОбъекта = """" + Строка(Объект.Ссылка) + """";
	ПараметрыСравнения.Вставить("ОписаниеДокумента1", ПредставлениеОбъекта);
	ПараметрыСравнения.Вставить("ОписаниеДокумента2", "Эталонный макет для " + ПредставлениеОбъекта);
	ПараметрыСравнения.Вставить("СравнитьДокументы", Истина);
	ПараметрыСравнения.Вставить("СвойстваИсключения", СвойстваИсключения);
	ПараметрыСравнения.Вставить("СравниватьПоШаблону", ПоШаблону);
	
	ОткрытьФорму("Обработка.СравнениеТабличныхДокументов.Форма", ПараметрыСравнения, ЭтаФорма);	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭталонныйМакет(Ссылка)
	
	Возврат РегистрыСведений.ХранилищаЭталонныхМакетовТестированияПересчетаПоказателей.ПолучитьЭталонныйМакет(Ссылка);	
	
КонецФункции

#КонецОбласти

#Область ТрассировкаРасчетаОбработка

&НаКлиенте
Процедура ПоказатьТрассировкуРасчета(Команда)
	
	Если НЕ ЗначениеЗаполнено(АдресТрассировкиРасчета) Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо сначала рассчитать документ по правилу расчета.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	Конецесли;
	
	Если Объект.Ссылка.Пустая() Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьТрассировкуРасчетаПослеВопроса", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);		
	Иначе
		ПоказатьТрассировкуРасчетаПродолжение();
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПоказатьТрассировкуРасчетаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ПоказатьТрассировкуРасчетаПродолжение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТрассировкуРасчетаПродолжение()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимИспользования", 2);
	СтруктураПараметров.Вставить("НастраиваемыйОтчет", Объект.Ссылка);
	СтруктураПараметров.Вставить("АдресТрассировкиРасчета", АдресТрассировкиРасчета);
	СтруктураПараметров.Вставить("СформироватьОтчет", Истина);
	
	ОткрытьФорму("Обработка.ВыводСтруктурыРасчетаПоказателей.Форма", СтруктураПараметров, ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СравнительныйАнализ

&НаКлиенте
Процедура ОткрытьАнализЗаполненияПоказателей(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьАнализЗаполненияПоказателейПослеВопроса", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);		
	Иначе
		ОткрытьАнализЗаполненияПоказателейПродолжение();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализЗаполненияПоказателейПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ОткрытьАнализЗаполненияПоказателейПродолжение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализЗаполненияПоказателейПродолжение()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИспользоватьНастройкиФормы", Истина);
	СтруктураПараметров.Вставить("Вывод", 1);
	СтруктураПараметров.Вставить("ПоказыватьМакетыСОшибками", Истина);
	СтруктураПараметров.Вставить("ВидГруппаОтчета", Объект.ВидОтчета);
	СтруктураПараметров.Вставить("ЭкземплярОтчета", Объект.Ссылка);
	СтруктураПараметров.Вставить("ЧислоВыполнений", 1);
	
	ОткрытьФорму("Обработка.АнализЗаполненияПоказателей.Форма", СтруктураПараметров, ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РежимБланкаСводнаяТаблица

&НаСервере
Процедура ВывестиМакетАналитическийБланкСводнаяТаблица(тВыбраннаяВалюта = Неопределено)
	
	Если НастройкиСоставаСтрокСводнойТаблицы.Количество() = 0 Тогда
		УстановитьСостояниеНеИспользоватьСводнаяТаблица(НСтр("ru = 'Не заполнен состав строк сводной таблицы'"));
		Возврат;
	КонецЕсли;	
	
	Если НастройкиСоставаКолонокСводнойТаблицы.Количество() = 0 Тогда
		УстановитьСостояниеНеИспользоватьСводнаяТаблица(НСтр("ru = 'Не заполнен состав колонок сводной таблицы'"));
		Возврат;
	КонецЕсли;	
	
	МакетОснование=Неопределено;	
	ОтчетАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
	ОтчетАБ.РежимСводнойТаблицы     = Истина;
	ОтчетАБ.Сценарий				= Объект.Сценарий;
	ОтчетАБ.ПериодОтчета			= Объект.ПериодОтчета;
	ОтчетАБ.ПериодОтчетаОкончание 	= Объект.ПериодОкончания;
	ОтчетАБ.Организация 			= Объект.Организация;
	ОтчетАБ.Проект 			 		= Объект.Проект;
	Если НЕ тВыбраннаяВалюта = Неопределено Тогда
		ОтчетАБ.Валюта 			 		= тВыбраннаяВалюта;	
	Иначе	
		ОтчетАБ.Валюта 			 		= ВыбраннаяВалюта;	
	КонецЕсли;	
	ОтчетАБ.Валюта 			 		= ВыбраннаяВалюта;		
	ОтчетАБ.ЕдиницаИзмерения 		= Объект.ЕдиницаИзмерения;
	ОтчетАБ.ТекущееПравило          = Объект.ПравилоОбработки;
	ОтчетАБ.логИзмененныхКомментариевАдрес = логИзмененныхКомментариевАдрес;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ОтчетАБ["Аналитика"+Инд] = Объект["Аналитика"+Инд];
	КонецЦикла;		
	
	СтруктураПараметров     = Новый Структура;
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
	СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
	СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
	СтруктураПараметров.Вставить("ТекущаяТочность",ТекущаяТочность);
	СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
	СтруктураПараметров.Вставить("НомерОсновногоЯзыка",НомерОсновногоЯзыка);
	СтруктураПараметров.Вставить("СтруктураНастроекВарианта",ПолучитьИзВременногоХранилища(СтруктураНастроекАналитическогоБланкаАдрес));
	СтруктураПараметров.Вставить("ЗаголовокСводнойТаблицы",Объект.ШаблонОтчета);

	
	//Офоомление групп иерарахии по нужному шаблону
	СтруктураОформления  = Новый Структура;
	Обработки.АналитическийБланкСводнаяТаблица.УстановитьШаблонУсловногоОформления(СтруктураОформления);
	СтруктураПараметров.Вставить("СтруктураОформления",СтруктураОформления);
	
	ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
	ОтчетАБ.НомерОсновногоЯзыка		= НомерОсновногоЯзыка;
	ОтчетАБ.ТекущийДелитель = ТекущийДелитель;
	ОтчетАБ.ТекущаяТочность = ТекущаяТочность;
	ОтчетАБ.ИдентификаторСеанса 	= ЭтаФорма.УникальныйИдентификатор;
	
	ЗначениеВРеквизитФормы(ОтчетАБ,"ОбъектАналитическогоБланка");		
	
	ТекущийОбъектАБ = "ОбъектАналитическогоБланка";
	ТекущийМакет 	= "ПолеТабличногоДокументаМакет";
	
	УстановитьФиксациюОбластей();
	ВосстановитьГруппировкиСтрок();
	СброситьСостояниеНеИспользоватьСводнаяТаблица();
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьНастройкиОсновногоВариантаСводнойТаблицыПоБланку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВариантыСводныхТаблиц.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыСводныхТаблиц КАК ВариантыСводныхТаблиц
	|ГДЕ
	|	ВариантыСводныхТаблиц.Бланк = &Бланк
	|	И ВариантыСводныхТаблиц.ОсновнойВариант = Истина";
	
	Запрос.УстановитьПараметр("Бланк",Объект.ШаблонОтчета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВариантСводнойТаблицы  = Выборка.Ссылка;
		ПрочитатьНастройкиВариантаСводнойТаблицы(ВариантСводнойТаблицы);
		
		
	КонецЦикла;

	
КонецФункции	

&НаСервере
Процедура ПрочитатьНастройкиВариантаСводнойТаблицы(ВариантСводнойТаблицы) 
	
	    Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСоставаСтрокСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
		               |	НастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК СтрокаОтчета,
		               |	НастройкиСоставаСтрокСводнойТаблицы.СтрокаРодитель КАК СтрокаРодитель,
		               |	НастройкиСоставаСтрокСводнойТаблицы.ПризнакИспользования КАК ПризнакИспользования,
		               |	НастройкиСоставаСтрокСводнойТаблицы.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
		               |	НастройкиСоставаСтрокСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку,
		               |	НастройкиСоставаСтрокСводнойТаблицы.УровеньСтроки КАК УровеньСтроки
		               |ИЗ
		               |	РегистрСведений.НастройкиСоставаСтрокСводнойТаблицы КАК НастройкиСоставаСтрокСводнойТаблицы
		               |ГДЕ
		               |	НастройкиСоставаСтрокСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерПоПорядку
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкиРасположенияПолейСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
		               |	НастройкиРасположенияПолейСводнойТаблицы.ОсьТаблицы КАК ОсьТаблицы,
		               |	НастройкиРасположенияПолейСводнойТаблицы.Поле КАК Поле,
		               |	НастройкиРасположенияПолейСводнойТаблицы.КодПоля КАК КодПоля,
		               |	НастройкиРасположенияПолейСводнойТаблицы.ПредставлениеПоля КАК ПредставлениеПоля,
		               |	НастройкиРасположенияПолейСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку
		               |ИЗ
		               |	РегистрСведений.НастройкиРасположенияПолейСводнойТаблицы КАК НастройкиРасположенияПолейСводнойТаблицы
		               |ГДЕ
		               |	НастройкиРасположенияПолейСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ОсьТаблицы,
		               |	НомерПоПорядку
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкиСоставаКолонокСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
		               |	НастройкиСоставаКолонокСводнойТаблицы.КолонкаОтчета КАК КолонкаОтчета,
		               |	НастройкиСоставаКолонокСводнойТаблицы.ПредставлениеКолонки КАК ПредставлениеКолонки,
		               |	НастройкиСоставаКолонокСводнойТаблицы.ПризнакИспользования КАК ПризнакИспользования,
		               |	НастройкиСоставаКолонокСводнойТаблицы.ТипКолонки КАК ТипКолонки,
		               |	НастройкиСоставаКолонокСводнойТаблицы.Сценарий КАК Сценарий,
		               |	НастройкиСоставаКолонокСводнойТаблицы.Организация КАК Организация,
		               |	НастройкиСоставаКолонокСводнойТаблицы.ПериодОтчета КАК ПериодОтчета,
		               |	НастройкиСоставаКолонокСводнойТаблицы.ПериодСдвиг КАК ПериодСдвиг,
		               |	НастройкиСоставаКолонокСводнойТаблицы.Проект КАК Проект,
		               |	НастройкиСоставаКолонокСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку,
		               |	НастройкиСоставаКолонокСводнойТаблицы.ВыводитьЗначениеВДополнительнойВалюте КАК ВыводитьЗначениеВДополнительнойВалюте
		               |ИЗ
		               |	РегистрСведений.НастройкиСоставаКолонокСводнойТаблицы КАК НастройкиСоставаКолонокСводнойТаблицы
		               |ГДЕ
		               |	НастройкиСоставаКолонокСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерПоПорядку
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкиПериодовСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
		               |	НастройкиПериодовСводнойТаблицы.Периодичность КАК Периодичность,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогГод КАК ВыводитьИтогГод,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогПолугодие КАК ВыводитьИтогПолугодие,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогКвартал КАК ВыводитьИтогКвартал,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогМесяц КАК ВыводитьИтогМесяц,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогДекада КАК ВыводитьИтогДекада,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогНеделя КАК ВыводитьИтогНеделя,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьИтогДень КАК ВыводитьИтогДень,
		               |	НастройкиПериодовСводнойТаблицы.ВыводитьОбщийИтогПоПериоду КАК ВыводитьОбщийИтогПоПериоду,
		               |	НастройкиПериодовСводнойТаблицы.ИспользоватьГруппировкуПериодов КАК ИспользоватьГруппировкуПериодов,
		               |	НастройкиПериодовСводнойТаблицы.НомерПериодаДляГруппировки КАК НомерПериодаДляГруппировки,
		               |	НастройкиПериодовСводнойТаблицы.ПериодичностьГруппировки КАК ПериодичностьГруппировки
		               |ИЗ
		               |	РегистрСведений.НастройкиПериодовСводнойТаблицы КАК НастройкиПериодовСводнойТаблицы
		               |ГДЕ
		               |	НастройкиПериодовСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкиПолейСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
		               |	НастройкиПолейСводнойТаблицы.Поле КАК Поле,
		               |	НастройкиПолейСводнойТаблицы.КодПоля КАК КодПоля,
		               |	НастройкиПолейСводнойТаблицы.ВыражениеПредставления КАК ВыражениеПредставления,
		               |	НастройкиПолейСводнойТаблицы.ВыражениеУпорядочивания КАК ВыражениеУпорядочивания,
		               |	НастройкиПолейСводнойТаблицы.ВыводитьИерархиюЭлементов КАК ВыводитьИерархиюЭлементов,
		               |	НастройкиПолейСводнойТаблицы.ВыражениеУпорядочиванияСКДСтрока КАК ВыражениеУпорядочиванияСКДСтрока,
		               |	НастройкиПолейСводнойТаблицы.СкрыватьЭлементыГруппы КАК СкрыватьЭлементыГруппы,
		               |	НастройкиПолейСводнойТаблицы.ВыводитьДанныеСУровня КАК ВыводитьДанныеСУровня,
		               |	НастройкиПолейСводнойТаблицы.ВыводитьДанныеДоУровня КАК ВыводитьДанныеДоУровня
		               |ИЗ
		               |	РегистрСведений.НастройкиПолейСводнойТаблицы КАК НастройкиПолейСводнойТаблицы
		               |ГДЕ
		               |	НастройкиПолейСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкиВариантаСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
		               |	НастройкиВариантаСводнойТаблицы.ВыводитьАналитикиСтрокВИерархии КАК ВыводитьАналитикиСтрокВИерархии,
		               |	НастройкиВариантаСводнойТаблицы.ВыводитьАналитикиКолонокВИерархии КАК ВыводитьАналитикиКолонокВИерархии,
		               |	НастройкиВариантаСводнойТаблицы.ВыводитьОбщийИтогПоКолонкам КАК ВыводитьОбщийИтогПоКолонкам
		               |ИЗ
		               |	РегистрСведений.НастройкиВариантаСводнойТаблицы КАК НастройкиВариантаСводнойТаблицы
		               |ГДЕ
		               |	НастройкиВариантаСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы";
		
		Запрос.УстановитьПараметр("ВариантСводнойТаблицы",ВариантСводнойТаблицы);
		
		Результат = Запрос.ВыполнитьПакет();
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("НастройкиСоставаСтрокСводнойТаблицы",Результат[0].Выгрузить());
		СтруктураОтвета.Вставить("НастройкиРасположенияПолейСводнойТаблицы",Результат[1].Выгрузить());
        СтруктураОтвета.Вставить("НастройкиСоставаКолонокСводнойТаблицы",Результат[2].Выгрузить());
        СтруктураОтвета.Вставить("НастройкиПериодовСводнойТаблицы",Результат[3].Выгрузить());
		СтруктураОтвета.Вставить("НастройкиПолейСводнойТаблицы",Результат[4].Выгрузить());
		СтруктураОтвета.Вставить("НастройкиВариантаСводнойТаблицы",Результат[5].Выгрузить());
		
		НастройкиСоставаСтрокСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиСоставаСтрокСводнойТаблицы);
		НастройкиСоставаКолонокСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиСоставаКолонокСводнойТаблицы);
		
		Если СтруктураОтвета.НастройкиРасположенияПолейСводнойТаблицы.Количество()>0 Тогда 
			НастройкиРасположенияПолейСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиРасположенияПолейСводнойТаблицы);
		КонецЕсли;
		
		НастройкиПолейСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиПолейСводнойТаблицы);
		
		Для Каждого СтрПоле Из НастройкиРасположенияПолейСводнойТаблицы Цикл
			СтрПоле.ТипСтрока = Обработки.АналитическийБланкСводнаяТаблица.ПолучитьТипЗначенияАналитики(СтрПоле.Поле);
		КонецЦикла;	
		
		Если СтруктураОтвета.НастройкиПериодовСводнойТаблицы.Количество()>0 Тогда 
			НастройкиПериодовСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиПериодовСводнойТаблицы);
		КонецЕсли;
		
		Если СтруктураОтвета.НастройкиВариантаСводнойТаблицы.Количество()>0 Тогда 
			НастройкиВариантаСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиВариантаСводнойТаблицы);
		КонецЕсли;
		
		//Закэшированные настройки макета
		СтруктураНастроекАналитическогоБланкаАдрес = "";
		СтруктураНастроекАналитическогоБланка  = Новый Структура;
		
		текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		Если  текНаборЗаписей.Количество() =1 Тогда			
			ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();	
			СтруктураНастроекАналитическогоБланка.Вставить("НастройкиАналитическихБланков",ЗначениеСохраняемойНастройки);
			//ПолеТабличногоДокументаШаблон.Вывести(ЗначениеСохраняемойНастройки.ТабДокМакет);
		Иначе	
			Возврат; //Нет закэшированного макета, далее нечего загружать. 
		КонецЕсли;	

		текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("КэшГруппОтборовПоказателей",текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("РасшифровкаГруппОтборов",текНаборЗаписей.Выгрузить());

		текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("КэшИменОбластейПоказателей",текНаборЗаписей.Выгрузить());

		текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("КэшРаскрываемыхОбластей",текНаборЗаписей.Выгрузить());

		текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("НастройкиРаскрываемыхОбластей",текНаборЗаписей.Выгрузить());

		текНаборЗаписей = РегистрыСведений.НастройкиТаблицРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("НастройкиТаблицРаскрываемыхОбластей",текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("КэшИменФормул",текНаборЗаписей.Выгрузить());

		текНаборЗаписей = РегистрыСведений.КэшФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("КэшФормулОбластейПоказателей",текНаборЗаписей.Выгрузить());

		текНаборЗаписей = РегистрыСведений.РасшифровкаФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Прочитать();
		СтруктураНастроекАналитическогоБланка.Вставить("РасшифровкаФормулОбластейПоказателей",текНаборЗаписей.Выгрузить());

		СтруктураНастроекАналитическогоБланкаАдрес = ПоместитьВоВременноеХранилище(СтруктураНастроекАналитическогоБланка,ЭтаФорма.УникальныйИдентификатор);
		
		
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьФиксациюОбластей()
	
	ПолеТабличногоДокументаМакет.ФиксацияСлева = 1;
	Для ИндСтроки = 2 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл	
		Если ТипЗнч(ПолеТабличногоДокументаМакет.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка) = Тип("Структура") Тогда
			ПолеТабличногоДокументаМакет.ФиксацияСверху = ИндСтроки-1;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьГруппировкиСтрок();
	
	Для Инд =1 по ПолеТабличногоДокументаМакет.КоличествоУровнейГруппировокСтрок() Цикл	
		ПолеТабличногоДокументаМакет.Область(1,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0).Разгруппировать();
	КонецЦикла;

	ТЗГрупп = Новый ТаблицаЗначений;
	ТЗГрупп.Колонки.Добавить("ИндексНачалаСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ТЗГрупп.Колонки.Добавить("ИндексОкончанияСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньГруппировкиТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	ТЗГрупп.Колонки.Добавить("ГруппаОткрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	УровеньПоследнейСтроки = 0;
	МассивНомеровГрупп = Новый Массив;
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	
	Для  СтрокаТаблицы =ПолеТабличногоДокументаМакет.ФиксацияСверху+1  По ПолеТабличногоДокументаМакет.ВысотаТаблицы+1 Цикл 
		 		 
		
		ТекущаяОбласть    =  ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы,1,СтрокаТаблицы,1);
		СледующаяОбласть  =  ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы+1,1,СтрокаТаблицы+1,1);
		ПредыдущаяОбласть =  ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы-1,1,СтрокаТаблицы-1,1);
		
		Если  ТекущаяОбласть.Отступ<ПредыдущаяОбласть.Отступ Тогда //Закрываем все открытые группы с уровнем большим текущего  	
			ОткрытыеСтроки = ТЗГрупп.НайтиСтроки(Новый Структура("ГруппаОткрыта",Истина));
			Для Каждого оСтр Из ОткрытыеСтроки Цикл
				Если  оСтр.УровеньГруппировкиТекущейОбласти > ТекущаяОбласть.Отступ Тогда
					оСтр.ГруппаОткрыта = Ложь;
					ПолеТабличногоДокументаМакет.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Сгруппировать();
					Если Лев(ПолеТабличногоДокументаМакет.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя,7)<>"Удалить" Тогда 
						ПолеТабличногоДокументаМакет.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя = "ОбластьСтроки_"+Строка(Новый УникальныйИдентификатор);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	 	
		КонецЕсли;	
		
		Если СледующаяОбласть.Отступ > ТекущаяОбласть.Отступ Тогда //Открываем группу
			
			МассивНомеровГрупп.Добавить(СтрокаТаблицы);
					
			Нгруппа = ТЗГрупп.Добавить();
			Нгруппа.УровеньТекущейОбласти = ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ;
			Нгруппа.ИндексНачалаСтроки = СтрокаТаблицы+1;
			Нгруппа.ИндексОкончанияСтроки = СтрокаТаблицы;
			Нгруппа.УровеньГруппировкиТекущейОбласти = (ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ)+2;
			Нгруппа.ГруппаОткрыта = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;

	
КонецПроцедуры	


#Область РаботаСКомандамиСоставаСводнойТаблицы

&НаКлиенте
Процедура ПоказатьСоставСтрок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеСоставаСтрокЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("ВидОтчета,ВариантСводнойТаблицы,НастройкиСоставаСтрокСводнойТаблицыАдрес,ЗаблокироватьВидОтчета"
	,Объект.ВидОтчета
	,ВариантСводнойТаблицы
	,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес()
	,Истина);
	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиСтрок",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСоставаСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена  Тогда
		Возврат;
	КонецЕсли;	
	
	ПрименитьНастройкиСоставаСтрок(Результат);
	
	ОбновитьИзмеренияИОтборы();
		
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиСоставаСтрок(Результат)
	
	НастройкиСоставаСтрокСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиСоставаСтрокСводнойТаблицыАдрес));
	CгенерироватьМакетШаблона();
	ВывестиДанныеЭкземпляра(,,Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСоставКолонок(Команда)
	
	Если  НастройкиСоставаСтрокСводнойТаблицы.Количество()>0 Тогда	
		Оповещение = Новый ОписаниеОповещения("ИзменениеСоставаКолонокЗавершение", ЭтаФорма);
		Параметры_ = Новый Структура("ВариантСводнойТаблицы,НастройкиСоставаКолонокСводнойТаблицыАдрес,НастройкиСоставаСтрокСводнойТаблицыАдрес"
		,ВариантСводнойТаблицы
		,ПолучитьНастройкиСоставаКолонокСводнойТаблицыАдрес()
		,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес());
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиКолонок",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	Иначе		
		Оповещение = Новый ОписаниеОповещения("ВопросОНеобходимостиЗаполнитьСтрокиЗавершение",ЭтаФорма);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Строки не выбраны. Открыть форму настройки состава строк?'"), РежимДиалогаВопрос.ДаНет);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСоставаКолонокЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена  Тогда
		Возврат;
	КонецЕсли;	
	
	ПрименитьНастройкиСоставаКолонок(Результат);
	
		 	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиСоставаКолонок(Результат)
	
	НастройкиСоставаКолонокСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиСоставаКолонокСводнойТаблицыАдрес));
	CгенерироватьМакетШаблона();
    ВывестиДанныеЭкземпляра(,,Истина);
	
КонецПроцедуры	


&НаКлиенте
Процедура ПоказатьНастройкиПериодов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеНастройкиПериодовЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("ВариантСводнойТаблицы,НастройкиПериодовСводнойТаблицыАдрес,ЗаблокироватьПериодичность"
	,ВариантСводнойТаблицы
	,ПолучитьНастройкиПериодовСводнойТаблицыАдрес()
	,Истина);
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиШкалыПериодов",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеНастройкиПериодовЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена  Тогда
		Возврат;
	КонецЕсли;	
				
	ПрименитьИзменениеНастройкиПериодов(Результат);
	
		 
		
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзменениеНастройкиПериодов(Результат)
	
	НастройкиПериодовСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиПериодовСводнойТаблицыАдрес));	
	CгенерироватьМакетШаблона();
	ВывестиДанныеЭкземпляра(,,Истина);

КонецПроцедуры


&НаКлиенте
Процедура ПоказатьНастройкиТаблицыПоОсям(Команда)
		
	Если  НастройкиСоставаСтрокСводнойТаблицы.Количество()>0 Тогда	
		Оповещение = Новый ОписаниеОповещения("НастрйкаОсейЗавершение", ЭтаФорма);
		Параметры_ = Новый Структура("НастройкиРасположенияПолейСводнойТаблицыАдрес,НастройкиСоставаСтрокСводнойТаблицыАдрес,НастройкиПолейСводнойТаблицыАдрес,НастройкиВариантаСводнойТаблицыАдрес" 
		,ПолучитьНастройкиРасположенияПолейСводнойТаблицыАдрес()
		,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес()
		,ПолучитьНастройкиПолейСводнойТаблицыАдрес()
		,ПолучитьНастройкиВариантаСводнойТаблицыАдрес());
	
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиРасположенияИзмерений", 
		Параметры_,ЭтаФорма,Истина,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	Иначе		
		Оповещение = Новый ОписаниеОповещения("ВопросОНеобходимостиЗаполнитьСтрокиЗавершение",ЭтаФорма);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Строки не выбраны. Открыть форму настройки состава строк?'"), РежимДиалогаВопрос.ДаНет);	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаОсейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
			
	ПрименитьНастройкиРасположенияПолей(Результат);
		
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиРасположенияПолей(Результат)
	
	НастройкиРасположенияПолейСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиРасположенияПолейСводнойТаблицыАдрес));
	НастройкиПолейСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиПолейСводнойТаблицыАдрес));
	НастройкиВариантаСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиВариантаСводнойТаблицыАдрес));
	
	ОбновитьИзмеренияИОтборы();
    CгенерироватьМакетШаблона();
	ВывестиДанныеЭкземпляра(,,Истина);
	
КонецПроцедуры	


#КонецОбласти


&НаСервере
Процедура УстановитьСостояниеНеИспользоватьСводнаяТаблица(ТекстСообщения)
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	//Элементы.ПолеТабличногоДокументаМакет.Доступность = Ложь;
	//Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
	//Элементы.ГруппаДополнительно.Доступность =Ложь;
	
	
КонецПроцедуры	

&НаСервере
Процедура СброситьСостояниеНеИспользоватьСводнаяТаблица()
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	//Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
	//Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Истина;
	//Элементы.ГруппаДополнительно.Доступность =Истина;
	//Элементы.ГруппаСтатусы.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиСоставаСтрокСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПериодовСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиПериодовСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиРасположенияПолейСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиРасположенияПолейСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиСоставаКолонокСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиСоставаКолонокСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПолейСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиПолейСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиВариантаСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиВариантаСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьИзмеренияИОтборы()
	
	//Читаем и типизируем все поля-аналитики, доступные для выбранных строк
	ТаблицаДоступныеПоля.Очистить();  
	Обработки.АналитическийБланкСводнаяТаблица.ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,НастройкиСоставаСтрокСводнойТаблицы.Выгрузить(),НастройкиПолейСводнойТаблицы);
	  
    МассивУдаляемыхИзмерений = Новый Массив;
	
	Для Каждого СтрИзмерение Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		
		Если ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрИзмерение.КодПоля)).Количество() =0 Тогда
			 МассивУдаляемыхИзмерений.Добавить(СтрИзмерение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого СтрИзмерение Из МассивУдаляемыхИзмерений Цикл
		НастройкиРасположенияПолейСводнойТаблицы.Удалить(СтрИзмерение);
	КонецЦикла;	
	
		
КонецПроцедуры	

&НаСервере
Процедура CгенерироватьМакетШаблона()
	    
	ПолеТабличногоДокументаШаблон = Новый ТабличныйДокумент;;
	
	СтруктураПараметровВход = Новый Структура;
	
	СтруктураПараметровВход.Вставить("ПолеТабличногоДокументаШаблон",ПолеТабличногоДокументаШаблон);
	СтруктураПараметровВход.Вставить("НастройкиСоставаСтрокСводнойТаблицы",НастройкиСоставаСтрокСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиСоставаКолонокСводнойТаблицы",НастройкиСоставаКолонокСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиРасположенияПолейСводнойТаблицы",НастройкиРасположенияПолейСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиВариантаСводнойТаблицы",НастройкиВариантаСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиПериодовСводнойТаблицы",НастройкиПериодовСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиПолейСводнойТаблицы",НастройкиПолейСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("УникальныйИдентификатор",ЭтаФорма.УникальныйИдентификатор);
    СтруктураПараметровВход.Вставить("СтруктураНастроекАналитическогоБланкаАдрес","");
	
	Обработки.АналитическийБланкСводнаяТаблица.CгенерироватьМакетШаблона(СтруктураПараметровВход); 
	
	СтруктураНастроекАналитическогоБланкаАдрес = СтруктураПараметровВход.СтруктураНастроекАналитическогоБланкаАдрес;
		
КонецПроцедуры

#КонецОбласти


