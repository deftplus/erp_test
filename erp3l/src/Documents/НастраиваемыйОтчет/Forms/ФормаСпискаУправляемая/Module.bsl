
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ.
//

&НаКлиенте
Процедура ДействияФормыВсеИзСписка(Команда)
	
	ГрупповаяОбработка(Элементы.Список.ПодчиненныеЭлементы);
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыГрупповаяОбработка(Команда)
	
	ГрупповаяОбработка(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКлючевойРеквизитВСписок(ВыделеннаяСтрока,Список,ИмяРеквизита)
	
	Если ВыделеннаяСтрока[ИмяРеквизита]=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Список.НайтиПоЗначению(ВыделеннаяСтрока[ИмяРеквизита])=Неопределено Тогда
		Список.Добавить(ВыделеннаяСтрока[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры // 

&НаСервереБезКонтекста
Процедура ПолучитьСпискиЗначенийДляОтбора(КоллекцияОтбора,
											СписокВидовОтчетов,
											СписокОрганизации,
											СписокПроекты,
											СписокПериоды,
                                            СписокСценарии,
											СтруктураСписокАналитики)
											
	Для Каждого Строка ИЗ КоллекцияОтбора Цикл
		
		Если СписокВидовОтчетов.Количество()=1 Тогда
			Если СписокВидовОтчетов.НайтиПоЗначению(Строка.ВидОтчета)=Неопределено Тогда
				Сообщить(Нстр("ru = 'Для группового редактирования необходимо отбирать отчеты одного вида.'"),СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли;
		Иначе
			СписокВидовОтчетов.Добавить(Строка.ВидОтчета);
		КонецЕсли;
				
		ДобавитьКлючевойРеквизитВСписок(Строка,СписокОрганизации,"Организация");
		ДобавитьКлючевойРеквизитВСписок(Строка,СписокПроекты,"Проект");
		ДобавитьКлючевойРеквизитВСписок(Строка,СписокПериоды,"ПериодОтчета");
		ДобавитьКлючевойРеквизитВСписок(Строка,СписокСценарии,"Сценарий");
		
		Для Каждого Элемент ИЗ СтруктураСписокАналитики Цикл
			ДобавитьКлючевойРеквизитВСписок(Строка,Элемент.Значение,Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпискиОтборовДляОбработки()

&НаКлиенте
Процедура ГрупповаяОбработкаУправляемоеПриложение(КоллекцияОтбора)
	
	Если КоллекцияОтбора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовОтчетов=Новый СписокЗначений;
	СписокОрганизации=Новый СписокЗначений;
	СписокПроекты=Новый СписокЗначений;
	СписокПериоды=Новый СписокЗначений;
	СписокСценарии=Новый СписокЗначений;
	
	СтруктураСписокАналитики=Новый Структура;
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		СтруктураСписокАналитики.Вставить("Аналитика"+Индекс,Новый СписокЗначений);
		
	КонецЦикла;
	
	МассивКоллекция=Новый Массив;
	
	Для Каждого Элемент ИЗ КоллекцияОтбора Цикл
		
		//Если Элемент.ПометкаУдаления Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
		
		МассивКоллекция.Добавить(Элемент);
		
	КонецЦикла;
	
	ПолучитьСпискиЗначенийДляОтбора(МассивКоллекция,
											СписокВидовОтчетов,
											СписокОрганизации,
											СписокПроекты,
											СписокПериоды,
                                            СписокСценарии,
											СтруктураСписокАналитики);
											
	ПараметрыОбработки=Новый Структура;
	
	ПараметрыОбработки.Вставить("ВидОтчета",СписокВидовОтчетов[0].Значение);
		
	ПараметрыОбработки.Вставить("ГруппироватьПоИерархииСтрок",Истина);
	ПараметрыОбработки.Вставить("ГруппироватьСтроки",Истина);
	
	СписокОтчетов=Новый СписокЗначений;
		
	Для Каждого СтрокаОтчет ИЗ МассивКоллекция Цикл
		СписокОтчетов.Добавить(СтрокаОтчет);
	КонецЦикла;
	
	ПараметрыОбработки.Вставить("ТабЭкземплярыОтчетов",СписокОтчетов);
	
	Для Каждого Элемент ИЗ СтруктураСписокАналитики Цикл
		ПараметрыОбработки.Вставить(Элемент.Ключ+"Отбор",Элемент.Значение);
	КонецЦикла;

	ПараметрыОбработки.Вставить("ОтборПоЭкземплярам",1);	
	ПараметрыОбработки.Вставить("ОрганизацияОтбор",СписокОрганизации);
	ПараметрыОбработки.Вставить("ПроектОтбор",СписокПроекты);
	ПараметрыОбработки.Вставить("ПериодОтчетаОтбор",СписокПериоды);
	ПараметрыОбработки.Вставить("СценарийОтбор",СписокСценарии);
	ПараметрыОбработки.Вставить("РучнойВыборПериодов",1);
	ПараметрыОбработки.Вставить("ВосстанавливатьЗначенияПриОткрытии",Ложь);
	
	Имя = "Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма.ФормаУправляемая";
	ОткрытьФорму(Имя, ПараметрыОбработки, , Истина);
										 							
КонецПроцедуры // ГрупповаяОбработкаУправляемоеПриложение()

&НаКлиенте
Процедура ГрупповаяОбработка(КоллекцияОтбора)
		
	ГрупповаяОбработкаУправляемоеПриложение(КоллекцияОтбора);
			
КонецПроцедуры // ГрупповаяОбработка()

&НаКлиенте
Процедура ПрименитьПараметрыОтборов_Клиент(ТекПараметры) Экспорт
	
	ПрименитьПараметрыОтборов(ТекПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВидовОтчета(ВидОтчета)
	
	СписокОтбора=Новый СписокЗначений;
	
	Если ВидОтчета.ЭтоГруппа Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	НЕ ВидыОтчетов.ЭтоГруппа
		|	И ВидыОтчетов.Ссылка В ИЕРАРХИИ(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка",ВидОтчета);
		
		СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	Иначе
		
		СписокОтбора.Добавить(ВидОтчета);
		
	КонецЕсли;
	
	Возврат СписокОтбора;
					 	
КонецФункции // ПолучитьСписокВидовОтчета() 

&НаСервере
Процедура ПрименитьПараметрыОтборов(ТекПараметры)
	
	Если ТекПараметры.Свойство("СохраненнаяНастройка") И ЗначениеЗаполнено(ТекПараметры.СохраненнаяНастройка) Тогда
		
		СохраненнаяНастройка = ТекПараметры.СохраненнаяНастройка;
		ВосстановитьНастройкиОтборов();
		
	Иначе	
		
		Если ТекПараметры.Свойство("ВидОтчета") И ЗначениеЗаполнено(ТекПараметры.ВидОтчета) Тогда
			
			ИспользоватьВидыОтчетов=Истина;
			
			СписокОтбора=ПолучитьСписокВидовОтчета(ТекПараметры.ВидОтчета);
			УстановитьОтборыПоВидуОтчета(СписокОтбора);
						
		КонецЕсли;
		
		Если ТекПараметры.Свойство("Организация") И ЗначениеЗаполнено(ТекПараметры.Организация) Тогда
			
			ИспользоватьОрганизации=Истина;
			
			МассивОтбора=Новый СписокЗначений;
			МассивОтбора.Добавить(ТекПараметры.Организация);
			УстановитьОтборыПоОрганизации(МассивОтбора);
							
		КонецЕсли;
		
		Если ТекПараметры.Свойство("Проект") И ЗначениеЗаполнено(ТекПараметры.Проект) Тогда
			
			ИспользоватьПроекты=Истина;
			
			МассивОтбора=Новый СписокЗначений;
			МассивОтбора.Добавить(ТекПараметры.Проект);
			УстановитьОтборыПоПроекту(МассивОтбора);
							
		КонецЕсли;
		
		Если ТекПараметры.Свойство("ПериодОтчета") И ЗначениеЗаполнено(ТекПараметры.ПериодОтчета) Тогда
			
			ИспользоватьПериод=Истина;
			
			ОтборПоПериоду.Очистить();
			ОтборПоПериоду.Добавить(ТекПараметры.ПериодОтчета);
			УстановитьОтборыПоПериоду();
			
		КонецЕсли;
		
		Если ТекПараметры.Свойство("Сценарий") И ЗначениеЗаполнено(ТекПараметры.Сценарий) Тогда
			
			ИспользоватьСценарий=Истина;
			
			ОтборПоСценарию.Очистить();
			ОтборПоСценарию.Добавить(ТекПараметры.Сценарий);
			УстановитьОтборыПоСценарию();
			
		КонецЕсли;
		
		Если ТекПараметры.Свойство("ШаблонОтчета") И ЗначениеЗаполнено(ТекПараметры.ШаблонОтчета) Тогда
			
			УстановитьОтборыПоШаблонуОтчета(ТекПараметры.ШаблонОтчета);
			
		КонецЕсли;
		
		Если ТекПараметры.Свойство("КИсполнению") И ТекПараметры.КИсполнению Тогда
			
			Исполнитель = Истина;
			МоиОтчеты   = Истина;
			УстановитьОтборыМоиОтчеты();
			
		КонецЕсли;
		
		Если ТекПараметры.Свойство("КСогласованию") И ТекПараметры.КСогласованию Тогда
			
			Согласующий = Истина;
			МоиОтчеты   = Истина;
			УстановитьОтборыМоиОтчеты();
			
		КонецЕсли;
		
		
	КонецЕсли;
		
	СинхронизироватьПростыеОтборы();
	
КонецПроцедуры

// Подставляет нужный текст запроса в зависимости от того, установлен
// ли параметр это Управление холдингом.
&НаСервере
Процедура ОпределитьТекстЗапросаДляБпМсфо()
	// Заменим текст запроса.
	Список.ТекстЗапроса = РасширениеБизнесЛогикиУХ.ПолучитьТекстЗапросаСпискаНастраиваемогоОтчета();
	// Установим параметры запрос
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Иначе
		// Не требуется установка параметров.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТиповыеОтчетыУХ.СкопироватьЭлементы(Список.Отбор, Список.КомпоновщикНастроек.ПолучитьНастройки().Отбор);
	
	ОпределитьТекстЗапросаДляБпМсфо();

	ЗначениеВДанныеФормы(ОбщегоНазначенияСерверУХ.ВернутьТаблицуДоступныхПериодов(), ТаблицаДоступныхПериодов);
		
	ЗначениеВРеквизитФормы(ПолучитьДеревоОрганизаций(), "Организации");
	ЗначениеВРеквизитФормы(ПолучитьДеревоВидовОтчетов(), "ВидыОтчетов");
	
	Элементы.НастройкиОтбора.ТекущаяСтраница = Элементы.Простые;
	
	ОтборПоСостоянию.Очистить();
	
	ОтборПоСостоянию.Добавить(Перечисления.СостоянияОтчетов.Запланирован, "ИзменитьОтборЗапланирован", Ложь);
	ОтборПоСостоянию.Добавить(Перечисления.СостоянияОтчетов.Выполняется, "ИзменитьОтборВыполняется", Ложь);
	ОтборПоСостоянию.Добавить(Перечисления.СостоянияОтчетов.Подготовлен, "ИзменитьОтборПодготовлен", Ложь);
	ОтборПоСостоянию.Добавить(Перечисления.СостоянияОтчетов.Утвержден, "ИзменитьОтборУтвержден", Ложь);
	ОтборПоСостоянию.Добавить(Перечисления.СостоянияОтчетов.Возвращен, "ИзменитьОтборОтклонен", Ложь);
	ОтборПоСостоянию.Добавить(Перечисления.СостоянияОтчетов.ЗаписанСОшибкой, "ИзменитьОтборЗаписанСОшибкой", Ложь);
	
	ОтображатьСтандартныеОтборы = Ложь;
	
	ПрименитьПараметрыОтборов(Параметры);
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПометкиКнопкамПоОтборуПоСостоянию();
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл 
		Если ЭлементОтбора.Использование Тогда
			//отбор установлен при вызове формы
			СинхронизироватьПростыеОтборы();
			Прервать;		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма Тогда
		
	ИначеЕсли ИмяСобытия = "ВыбранаСохраненнаяНастройка" 
		    И ТипЗнч(Параметр) = Тип("ФиксированнаяСтруктура")
			И Параметр.УИДФормы = УникальныйИдентификатор Тогда
		СохраненнаяНастройка = Параметр.СохраненнаяНастройка;
		Если Параметр.РежимСохраненияНастройки Тогда
			СохранитьНастройкиОтборов();
		Иначе
			ВосстановитьНастройкиОтборов();
			УстановитьПометкиКнопкамПоОтборуПоСостоянию();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="ЗаписанЭкземплярОтчета" ИЛИ ИмяСобытия="ИзмененыСостоянияОтчетов" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "УтвердитьЭтап" ИЛИ ИмяСобытия = "ОтклонитьЭтап" ИЛИ ИмяСобытия = "ВернутьИсполнителю" ИЛИ ИмяСобытия = "ОбновитьМоиЗадачиИОповещения" Тогда
		
		// Оповещения согласования документа
		Элементы.Список.Обновить();	
		
	КонецЕсли;
	
	#Область УХ_Согласование
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;	
	#КонецОбласти
	
КонецПроцедуры


&НаСервере
Процедура ПодготовитьВетвьОтборов(СтрокиДерева, ЭлементыОтбора)
	
	Для Каждого Элемент Из ЭлементыОтбора Цикл
		
		НоваяСтрока               = СтрокиДерева.Добавить();
		НоваяСтрока.Использование = Элемент.Использование;
		
		НоваяСтрока.ЭтоГруппа     = ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
		Если НоваяСтрока.ЭтоГруппа Тогда
			НоваяСтрока.ИмяПоля   = Элемент.Представление;
			ПодготовитьВетвьОтборов(НоваяСтрока.Строки, Элемент.Элементы);
		Иначе
			НоваяСтрока.ИмяПоля      = Строка(Элемент.ЛевоеЗначение);
			НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
			НоваяСтрока.Значение     = Элемент.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	СтруктураСохраненияОтборов = Новый Структура;
	СтруктураСохраненияОтборов.Вставить("ОтображатьСтандартныеОтборы", ОтображатьСтандартныеОтборы);
	СтруктураСохраненияОтборов.Вставить("ОтносительныйПериод"        , ОтносительныйРеквизитПериод);
	СтруктураСохраненияОтборов.Вставить("КодПериода"                 , ОтборПоПериодуОтносительный);
	ДеревоОтборов = Новый ДеревоЗначений;
	ДеревоОтборов.Колонки.Добавить("ИмяПоля");
	ДеревоОтборов.Колонки.Добавить("ВидСравнения");
	ДеревоОтборов.Колонки.Добавить("Значение");
	ДеревоОтборов.Колонки.Добавить("Использование");
	ДеревоОтборов.Колонки.Добавить("ЭтоГруппа");
	ПодготовитьВетвьОтборов(ДеревоОтборов.Строки, Список.Отбор.Элементы);
	
	ТаблицаГруппировок = Новый ТаблицаЗначений;
	ТаблицаГруппировок.Колонки.Добавить("ИмяПоля");
	ТаблицаГруппировок.Колонки.Добавить("Использование");
	ТаблицаГруппировок.Колонки.Добавить("ТипГруппировки");
	ТаблицаГруппировок.Колонки.Добавить("ТипДополнения");
	ТаблицаГруппировок.Колонки.Добавить("НачалоПериода");
	ТаблицаГруппировок.Колонки.Добавить("КонецПериода");
	
	Для Каждого ЭлементГруппировки Из Список.Группировка.Элементы Цикл
		
		НоваяСтрока = ТаблицаГруппировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементГруппировки);
		НоваяСтрока.ИмяПоля = Строка(ЭлементГруппировки.Поле);
		
	КонецЦикла;
	
	СтруктураСохраненияОтборов.Вставить("ТаблицаГруппировок", ТаблицаГруппировок);
	
	СтруктураСохраненияОтборов.Вставить("ДеревоОтборов", ДеревоОтборов);
	СохраненнаяНастройкаОбъект = СохраненнаяНастройка.ПолучитьОбъект();
	СохраненнаяНастройкаОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураСохраненияОтборов);
	Попытка
		СохраненнаяНастройкаОбъект.Записать();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось сохранить настройку'"));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьВетвьОтборов(СтрокиОтчетов, ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденнаяСтрока = СтрокиОтчетов.Найти(Строка(ЭлементОтбора.Представление), "ИмяПоля");
			Если НайденнаяСтрока <> Неопределено Тогда
				ЭлементОтбора.Использование = НайденнаяСтрока.Использование;
				ВосстановитьВетвьОтборов(НайденнаяСтрока.Строки, ЭлементОтбора.Элементы);
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		Иначе
			НайденнаяСтрока = СтрокиОтчетов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение), "ИмяПоля");
			Если НайденнаяСтрока = Неопределено Тогда
				ЭлементОтбора.ИСпользование = Ложь;
			Иначе
				ЭлементОтбора.ВидСравнения   = НайденнаяСтрока.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = НайденнаяСтрока.Значение;
				ЭлементОтбора.Использование  = НайденнаяСтрока.Использование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	СтруктураНастройки = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура") 
		И СтруктураНастройки.Свойство("ОтображатьСтандартныеОтборы", ОтображатьСтандартныеОтборы) Тогда
		
		НастройкиСКД = Список.КомпоновщикНастроек.Настройки;
		ПользовательскиеНастройкиСКД = Список.КомпоновщикНастроек.ПользовательскиеНастройки;		
		ОтборПН = ПользовательскиеНастройкиСКД.Элементы.Найти(НастройкиСКД.Отбор.ИдентификаторПользовательскойНастройки);
		
		ВосстановитьВетвьОтборов(СтруктураНастройки.ДеревоОтборов.Строки, Список.Отбор.Элементы);//ОтборПН.Элементы
		СтруктураНастройки.Свойство("ОтносительныйПериод", ОтносительныйРеквизитПериод);
		СтруктураНастройки.Свойство("КодПериода"         , ОтборПоПериодуОтносительный);

		Если СтруктураНастройки.ОтображатьСтандартныеОтборы Тогда
			Элементы.НастройкиОтбора.ТекущаяСтраница = Элементы.Стандартные;
		Иначе
			СинхронизироватьПростыеОтборы();
			Элементы.НастройкиОтбора.ТекущаяСтраница = Элементы.Простые;
			Элементы.ОтборПоПериоду.ТекущаяСтраница  = ?(ОтносительныйРеквизитПериод, Элементы.ПростаяНастройка, Элементы.РасширеннаяНастройка);			
		КонецЕсли;
		
		Список.Группировка.Элементы.Очистить();
		
		Если СтруктураНастройки.Свойство("ТаблицаГруппировок") Тогда
			
			Для Каждого ЭлементГруппировки Из СтруктураНастройки.ТаблицаГруппировок Цикл
				
				НоваяГруппировка = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НоваяГруппировка, ЭлементГруппировки);
				НоваяГруппировка.Поле = Новый ПолеКомпоновкиДанных(ЭлементГруппировки.ИмяПоля);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось восстановить настройки отборов'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ОТБОРАМИ ДИНАМИЧЕСКОГО СПИСКА ЭКЗЕМПЛЯРОВ ОТЧЕТА.
//

&НаСервере
Функция ПолучитьДеревоОрганизаций() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ МАКСИМУМ(Дочерние.Ссылка) ЕСТЬ NULL 
	|				ИЛИ Организации.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая)
	|			ТОГДА 6
	|		КОГДА Организации.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизационныхЕдиниц.Элиминирующая)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ТипОрганизации,
	|	Организации.Ссылка КАК Значение,
	|	Организации.Наименование КАК Наименование,
	|	0 КАК Использовать
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Дочерние
	|		ПО Организации.Ссылка = Дочерние.Родитель
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Организации.Наименование,
	|	ВЫБОР
	|		КОГДА Организации.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизационныхЕдиниц.Элиминирующая)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	Организации.ТипОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДобавитьКонсолидирующиеОрганизации(РезультатЗапроса);
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
Процедура ДобавитьКонсолидирующиеОрганизации(ДеревоОрганизаций)
	
	Для Каждого Элемент Из ДеревоОрганизаций.Строки Цикл
		
		Если Элемент.ТипОрганизации = 6 Тогда
			НоваяСтрока = Элемент.Строки.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент, "Значение, Наименование, Использовать");
			НоваяСтрока.ТипОрганизации = 0;
			ДобавитьКонсолидирующиеОрганизации(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоВидовОтчетов() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидыОтчетов.Ссылка КАК Значение,
	               |	ВидыОтчетов.Наименование КАК Наименование,
	               |	0 КАК Использовать
	               |ИЗ
	               |	Справочник.ВидыОтчетов КАК ВидыОтчетов
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Значение ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьФлажкиПодчиненныхЭлементов(КоллекцияЭлементов, ЗначениеФлажка)
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		
		Элемент.Использовать = ЗначениеФлажка;
		ИзменитьФлажкиПодчиненныхЭлементов(Элемент.ПолучитьЭлементы(), ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажокРодителя(Родитель)
	
	ВнПодчиненныеЭлементы = Родитель.ПолучитьЭлементы();
	
	ТекущееСостояние = -1;
	
	Для Каждого Элемент Из ВнПодчиненныеЭлементы Цикл
		
		Если ТекущееСостояние = -1 Тогда
			ТекущееСостояние = Элемент.Использовать;
		ИначеЕсли ТекущееСостояние <> Элемент.Использовать Тогда
			ТекущееСостояние = 2;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Родитель.Использовать = ТекущееСостояние;
	РодительРодителя = Родитель.ПолучитьРодителя();
	
	Если РодительРодителя <> Неопределено Тогда
		
		ИзменитьФлажокРодителя(РодительРодителя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМассивВыбранныхЭлементов(СтрокиОтбора, МассивОтбора)
	
	Для Каждого Строка Из СтрокиОтбора Цикл
		
		Если Строка.Использовать <> 0 Тогда
			
			ВнПодчиненныеЭлементы = Строка.ПолучитьЭлементы();
			Если ВнПодчиненныеЭлементы.Количество() = 0 Тогда
				МассивОтбора.Добавить(Строка.Значение);
			Иначе
				ПолучитьМассивВыбранныхЭлементов(ВнПодчиненныеЭлементы, МассивОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборыПоВидуОтчета(МассивОтбора)
	
	ТекПоле  = Новый ПолеКомпоновкиДанных("ВидОтчета");
	ТекОтбор = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ТекПоле);
	
	Если ТекОтбор = Неопределено Тогда
		
		ТекОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекОтбор.ЛевоеЗначение = ТекПоле;
		
	КонецЕсли;
	
	ТекОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	ТекОтбор.ПравоеЗначение = МассивОтбора;
	ТекОтбор.Использование  = ИспользоватьВидыОтчетов;
	
КонецПроцедуры

Процедура УстановитьОтборыПоШаблонуОтчета(ШаблонОтчета)
	
	ТекПоле  = Новый ПолеКомпоновкиДанных("ШаблонОтчета");
		
	ТекОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ТекОтбор.ЛевоеЗначение = ТекПоле;
			
	ТекОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ТекОтбор.ПравоеЗначение = ШаблонОтчета;
	ТекОтбор.Использование  = Истина;
	
КонецПроцедуры

Процедура УстановитьОтборыПоОрганизации(МассивОтбора)
	
	ТекПоле  = Новый ПолеКомпоновкиДанных("Организация");
	ТекОтбор = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ТекПоле);
	
	Если ТекОтбор = Неопределено Тогда
		ТекОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекОтбор.ЛевоеЗначение = ТекПоле;
	КонецЕсли;
	
	ТекОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	ТекОтбор.ПравоеЗначение = МассивОтбора;
	ТекОтбор.Использование  = ИспользоватьОрганизации;
	
КонецПроцедуры

Процедура УстановитьОтборыПоПроекту(МассивОтбора)
	
	ТекПоле  = Новый ПолеКомпоновкиДанных("Проект");
	ТекОтбор = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ТекПоле);
	
	Если ТекОтбор = Неопределено Тогда
		ТекОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекОтбор.ЛевоеЗначение = ТекПоле;
	КонецЕсли;
	
	ТекОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	ТекОтбор.ПравоеЗначение = МассивОтбора;
	ТекОтбор.Использование  = ИспользоватьПроекты;
	
КонецПроцедуры

Процедура УстановитьОтборыМоиОтчеты()
	
	Для Каждого Элемент Из Список.Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ГруппаЭлемент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппаЭлемент.Использование = МоиОтчеты;
	ЭлементыГруппы = ГруппаЭлемент.Элементы;
	
	ПолеИсполнитель = Новый ПолеКомпоновкиДанных("ИсполняетсяТекущимПользователем");
	ПолеСогласующий = Новый ПолеКомпоновкиДанных("СогласуетсяТекущимПользователем");
	
	Для Каждого Элемент Из ЭлементыГруппы Цикл
		Если Элемент.ЛевоеЗначение = ПолеИсполнитель Тогда
			Элемент.Использование = Исполнитель;
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеСогласующий Тогда
			Элемент.Использование = Согласующий;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборыПоСценарию()
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Сценарий");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		ТекЭлемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
	КонецЕсли;
	
	ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ТекЭлемент.ПравоеЗначение = ОтборПоСценарию;
	
	ТекЭлемент.Использование = ИспользоватьСценарий;
	
КонецПроцедуры

Процедура УстановитьОтборыПоПериоду()
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ПериодОтчета");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		ТекЭлемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
	КонецЕсли;
	
	ТекЭлемент.ВидСравнения   = ?(ИспользоватьПодчиненныеПериоды, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВСписке);
	ТекЭлемент.ПравоеЗначение = ОтборПоПериоду;
	
	ТекЭлемент.Использование = ИспользоватьПериод;
	
КонецПроцедуры

Процедура УстановитьОтборыПоСостоянию()
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Состояние");
	ТекЭлемент     = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ПолеКомпоновки);
	Если ТекЭлемент = Неопределено Тогда
		ТекЭлемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
	КонецЕсли;
	
	ТекЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтборов = Новый СписокЗначений;
	
	Для Каждого ЭлементОтбора Из ОтборПоСостоянию Цикл
		
		Если ЭлементОтбора.Пометка Тогда
			СписокОтборов.Добавить(ЭлементОтбора.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокОтборов.Количество() = 0 Тогда
		ИспользоватьСостояние = Ложь;
	Иначе
		ИспользоватьСостояние = Истина;
	КонецЕсли;

	
	ТекЭлемент.ПравоеЗначение = СписокОтборов;
	ТекЭлемент.Использование  = ИспользоватьСостояние;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКнопкамПоОтборуПоСостоянию()
	
	Для Каждого Элемент Из ОтборПоСостоянию Цикл
		Элементы[Элемент.Представление].Пометка = Элемент.Пометка;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьФлажкиУДереваЗначений(ТекущиеЭлементы)
	
	Для Каждого Элемент Из ТекущиеЭлементы Цикл
		
		Элемент.Использовать = Ложь;
		ОчиститьФлажкиУДереваЗначений(Элемент.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиОтборуПоСостояниюПоКнопкам()
	
	Для Каждого Элемент Из ОтборПоСостоянию Цикл
		Элемент.Пометка = Элементы[Элемент.Представление].Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьПростыеОтборы(ИспользоватьОтносительныйОтбор = Ложь)
	
	ПолеСостояние    = Новый ПолеКомпоновкиДанных("Состояние");
	ПолеСценарий     = Новый ПолеКомпоновкиДанных("Сценарий");
	ПолеПериодОтчета = Новый ПолеКомпоновкиДанных("ПериодОтчета");
	ПолеОрганизация  = Новый ПолеКомпоновкиДанных("Организация");
	ПолеВидОтчета    = Новый ПолеКомпоновкиДанных("ВидОтчета");
	ПолеИсполнитель  = Новый ПолеКомпоновкиДанных("ИсполняетсяТекущимПользователем");
	ПолеСогласующий  = Новый ПолеКомпоновкиДанных("СогласуетсяТекущимПользователем");
	
	Для Каждого Элемент Из Список.Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			МоиОтчеты = Элемент.Использование;
			
			Для Каждого ВнЭлемент Из Элемент.Элементы Цикл
				
				Если ВнЭлемент.ЛевоеЗначение = ПолеИсполнитель Тогда
					Исполнитель = ВнЭлемент.Использование;
				ИначеЕсли ВнЭлемент.ЛевоеЗначение = ПолеСогласующий Тогда
					Согласующий = ВнЭлемент.Использование;
				КонецЕсли;
				
			КонецЦикла;
 
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеСценарий Тогда
			
			Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ОтборПоСценарию.ЗагрузитьЗначения(Элемент.ПравоеЗначение.ВыгрузитьЗначения());
			Иначе
				ОтборПоСценарию.Очистить();
				ОтборПоСценарию.Добавить(Элемент.ПравоеЗначение);
			КонецЕсли;
			
			ИспользоватьСценарий = Элемент.Использование;
			
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеПериодОтчета Тогда
			
			Если ИспользоватьОтносительныйОтбор И ОтборПоПериодуОтносительный Тогда
				
				ИзменитьОтборОтносительныйПериод();
				
			Иначе
				
				Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					ОтборПоПериоду.ЗагрузитьЗначения(Элемент.ПравоеЗначение.ВыгрузитьЗначения());
				Иначе
					ОтборПоПериоду.Очистить();
					ОтборПоПериоду.Добавить(Элемент.ПравоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
			ИспользоватьПериод = Элемент.Использование;
			
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеВидОтчета Тогда
			
			ИспользоватьВидыОтчетов = Элемент.Использование;
			
			ОчиститьФлажкиУДереваЗначений(ВидыОтчетов.ПолучитьЭлементы());
			Если ТипЗнч(Элемент.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
				СписокЗначенийОтбора = Новый СписокЗначений;
				СписокЗначенийОтбора.Добавить(Элемент.ПравоеЗначение);
				ОбновитьФлажкиДеревьев("ВидыОтчетов", СписокЗначенийОтбора);
			Иначе
				ОбновитьФлажкиДеревьев("ВидыОтчетов", Элемент.ПравоеЗначение);
			КонецЕсли;
			
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеОрганизация Тогда
			
			ОчиститьФлажкиУДереваЗначений(Организации.ПолучитьЭлементы());
			ИспользоватьОрганизации = Элемент.Использование;
			
			Если ТипЗнч(Элемент.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
				СписокЗначенийОтбора = Новый СписокЗначений;
				СписокЗначенийОтбора.Добавить(Элемент.ПравоеЗначение);
				ОбновитьФлажкиДеревьев("Организации", СписокЗначенийОтбора);
			Иначе
				ОбновитьФлажкиДеревьев("Организации", Элемент.ПравоеЗначение);
			КонецЕсли;
			
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеСостояние Тогда
			
			ИспользоватьСостояние = Элемент.Использование;
			
			ОтборПоСостоянию.ЗаполнитьПометки(Ложь);
			Если ТипЗнч(Элемент.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
				ТекЗапись = ОтборПоСостоянию.НайтиПоЗначению(Элемент.ПравоеЗначение);
				Если ТекЗапись <> Неопределено Тогда
					ТекЗапись.Пометка = Истина;
				КонецЕсли;
			Иначе
				Для Каждого ЭлементОтбора Из Элемент.ПравоеЗначение Цикл
					ТекЗапись = ОтборПоСостоянию.НайтиПоЗначению(ЭлементОтбора.Значение);
					ТекЗапись.Пометка = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлажкиДеревьев(ИмяРеквизитаДерева, МассивВыбранныхЭлементов)
	
	ТекущееДерево = РеквизитФормыВЗначение(ИмяРеквизитаДерева);
	
	Для Каждого Элемент Из МассивВыбранныхЭлементов Цикл
		
		НайденнаяСтрока = ТекущееДерево.Строки.Найти(Элемент.Значение, "Значение",Истина);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Использовать = 1;
			Если НайденнаяСтрока.Родитель <> Неопределено Тогда
				ОбновитьПризнакИспользованияУРодителя(НайденнаяСтрока.Родитель);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекущееДерево, ИмяРеквизитаДерева);
	
КонецПроцедуры

Процедура ОбновитьПризнакИспользованияУРодителя(Родитель)
	
	ТекущееИспользование = -1;
	
	Для Каждого Строка Из Родитель.Строки Цикл
		
		Если ТекущееИспользование = -1 Тогда
			ТекущееИспользование = Строка.Использовать;
		ИначеЕсли ТекущееИспользование <> Строка.Использовать Тогда
			ТекущееИспользование = 2;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Родитель.Использовать=ТекущееИспользование;
	
	Если Родитель.Родитель <> Неопределено Тогда
		ОбновитьПризнакИспользованияУРодителя(Родитель.Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовИспользоватьПриИзменении(Элемент)
	
	ТекущаяСтрока = ВидыОтчетов.НайтиПоИдентификатору(Элементы.ВидыОтчетов.ТекущаяСтрока);
	
	Если ТекущаяСтрока.Использовать = 2 Тогда
		ТекущаяСтрока.Использовать = 0;
	КонецЕсли;
	
	ИзменитьФлажкиПодчиненныхЭлементов(ТекущаяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.Использовать);
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ИзменитьФлажокРодителя(Родитель);
	КонецЕсли;
	
	МассивОтбора = Новый СписокЗначений;
	ПолучитьМассивВыбранныхЭлементов(ВидыОтчетов.ПолучитьЭлементы(), МассивОтбора);
	
	Если МассивОтбора.Количество() = 0 Тогда
		ИспользоватьВидыОтчетов = Ложь;
	Иначе
		ИспользоватьВидыОтчетов = Истина;
	КонецЕсли;
	
	УстановитьОтборыПоВидуОтчета(МассивОтбора);
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацииИспользоватьПриИзменении(Элемент)
	
	ТекущаяСтрока = Организации.НайтиПоИдентификатору(Элементы.Организации.ТекущаяСтрока);
	
	Если ТекущаяСтрока.Использовать = 2 Тогда
		ТекущаяСтрока.Использовать = 0;
	КонецЕсли;
	
	ИзменитьФлажкиПодчиненныхЭлементов(ТекущаяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.Использовать);
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ИзменитьФлажокРодителя(Родитель);
	КонецЕсли;
	
	МассивОтбора = Новый СписокЗначений;
	ПолучитьМассивВыбранныхЭлементов(Организации.ПолучитьЭлементы(), МассивОтбора);
	
	Если МассивОтбора.Количество() = 0 Тогда
		ИспользоватьОрганизации = Ложь;
	Иначе
		ИспользоватьОрганизации = Истина;
	КонецЕсли;
	
	УстановитьОтборыПоОрганизации(МассивОтбора);
	
КонецПроцедуры


&НаКлиенте
Процедура МоиОтчетыПриИзменении(Элемент)
	
	Если МоиОтчеты Тогда
		Исполнитель = Истина;
		Согласующий = Истина;
	КонецЕсли;
	
	УстановитьОтборыМоиОтчеты();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	МоиОтчеты = Исполнитель ИЛИ Согласующий;
	УстановитьОтборыМоиОтчеты();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборСогласующийПриИзменении(Элемент)
	
	МоиОтчеты = Исполнитель Или  Согласующий ;
	УстановитьОтборыМоиОтчеты();
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьСценарийПриИзменении(Элемент)
	
	УстановитьОтборыПоСценарию();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборПоСценариюПриИзменении(Элемент)
	
	ИспользоватьСценарий = Истина;
	УстановитьОтборыПоСценарию();
	
КонецПроцедуры


&НаКлиенте
Процедура НастройкиОтбораПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Простые Тогда
		
		СинхронизироватьПростыеОтборы();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьВидыОтчетовПриИзменении(Элемент)
	
	МассивОтбора = Новый СписокЗначений;
	ПолучитьМассивВыбранныхЭлементов(ВидыОтчетов.ПолучитьЭлементы(), МассивОтбора);
	УстановитьОтборыПоВидуОтчета(МассивОтбора);
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьОрганизацииПриИзменении(Элемент)
	
	МассивОтбора = Новый СписокЗначений;
	ПолучитьМассивВыбранныхЭлементов(Организации.ПолучитьЭлементы(), МассивОтбора);
	УстановитьОтборыПоОрганизации(МассивОтбора);

КонецПроцедуры


&НаКлиенте
Процедура ОтображатьСтандартныеОтборыПриИзменении(Элемент)
	
	Если ОтображатьСтандартныеОтборы Тогда
		Элементы.НастройкиОтбора.ТекущаяСтраница = Элементы.Стандартные;
	Иначе
		Элементы.НастройкиОтбора.ТекущаяСтраница = Элементы.Простые;
		СинхронизироватьПростыеОтборы();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьПолеВГруппировку(Команда)
	
	ТекущееПоле = Элементы.Список.ТекущийЭлемент;
	Если ТекущееПоле <> Неопределено Тогда
		НовоеПоле   = Новый ПолеКомпоновкиДанных(ТекущееПоле.Имя);
		Если Список.Группировка.ДоступныеПоляПолейГруппировок.НайтиПоле(НовоеПоле) <> Неопределено Тогда
			НовоеПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НовоеПолеГруппировки.Поле = НовоеПоле;
			НовоеПолеГруппировки.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОтборВыполняется(Команда)
	
	Элементы.ИзменитьОтборВыполняется.Пометка = НЕ Элементы.ИзменитьОтборВыполняется.Пометка;
	ИспользоватьСостояние = Истина;
	УстановитьПометкиОтборуПоСостояниюПоКнопкам();
	УстановитьОтборыПоСостоянию();
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОтборЗаписанСОшибкой(Команда)
	
	Элементы.ИзменитьОтборЗаписанСОшибкой.Пометка = НЕ Элементы.ИзменитьОтборЗаписанСОшибкой.Пометка;
	ИспользоватьСостояние = Истина;
	УстановитьПометкиОтборуПоСостояниюПоКнопкам();
	УстановитьОтборыПоСостоянию();
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОтборЗапланирован(Команда)
	
	Элементы.ИзменитьОтборЗапланирован.Пометка = НЕ Элементы.ИзменитьОтборЗапланирован.Пометка;
	ИспользоватьСостояние = Истина;
	УстановитьПометкиОтборуПоСостояниюПоКнопкам();
	УстановитьОтборыПоСостоянию();
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОтборОтклонен(Команда)
	
	Элементы.ИзменитьОтборОтклонен.Пометка = НЕ Элементы.ИзменитьОтборОтклонен.Пометка;
	ИспользоватьСостояние = Истина;
	УстановитьПометкиОтборуПоСостояниюПоКнопкам();
	УстановитьОтборыПоСостоянию();
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОтборПодготовлен(Команда)
	
	Элементы.ИзменитьОтборПодготовлен.Пометка = НЕ Элементы.ИзменитьОтборПодготовлен.Пометка;
	ИспользоватьСостояние = Истина;
	УстановитьПометкиОтборуПоСостояниюПоКнопкам();
	УстановитьОтборыПоСостоянию();
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОтборУтвержден(Команда)
	
	Элементы.ИзменитьОтборУтвержден.Пометка = НЕ Элементы.ИзменитьОтборУтвержден.Пометка;
	ИспользоватьСостояние = Истина;
	УстановитьПометкиОтборуПоСостояниюПоКнопкам();
	УстановитьОтборыПоСостоянию();
	
КонецПроцедуры


&НаКлиенте
Процедура ГрупповоеИзменениеСостояния(Команда)
	
	МассивДанных = Новый Массив;
	
	ПараметрыФормы = Новый Структура("МассивОтчетов", Элементы.Список.ВыделенныеСтроки);
	ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитовОтчетов.Форма", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройку_УР("ДокументСписок.НастраиваемыйОтчет", УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиФормы");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуКак(Команда)
	
	ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройкуКак_УР("ДокументСписок.НастраиваемыйОтчет", УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиФормы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройку(Команда)
	
	ТиповыеОтчеты_УправляемыйРежимУХ.ВыбратьНастройкуФормы(СохраненнаяНастройка, УникальныйИдентификатор, "ДокументСписок.НастраиваемыйОтчет", Ложь, "Перечисление.ТипыНастроек.НастройкиФормы");
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора = ПолучитьИзВременногоХранилища(ТиповыеОтчетыУХ.ПолучитьСписокДоступныхВариантов("ДокументСписок.НастраиваемыйОтчет"));
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаПриИзменении(Элемент)
	
	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		
		ВосстановитьНастройкиОтборов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаОчистка(Элемент, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

Процедура ИзменитьОтборОтносительныйПериод()
	
	ОтборПоПериоду.Очистить();
	
	НайденныеСтроки = ТаблицаДоступныхПериодов.НайтиСтроки(Новый Структура("Код", ОтборПоПериодуОтносительный));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОтборПоПериоду.Добавить(НайденныеСтроки[0].Период);
	КонецЕсли;

	УстановитьОтборыПоПериоду();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПротоколируемыхОбъектов()
	
	Возврат ПротоколируемыеСобытияУХ.ПолучитьМассивПротоколируемыхОбъектов(Элементы.Список.ВыделенныеСтроки);
	
КонецФункции // ПолучитьМассивПротоколируемыхОбъектов() 

&НаКлиенте
Процедура ПротоколОбработки(Команда)
		
	ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("МассивПротоколируемыхОбъектов",ПолучитьМассивПротоколируемыхОбъектов()));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоУмолчанию(Команда)
	
	ЗаполнениеПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоУмолчаниюНаСервере()
	
	Для Каждого Строка ИЗ Элементы.Список.ВыделенныеСтроки Цикл
		
		НастраиваемыйОтчет = Строка.ПолучитьОбъект();
		РасширениеПроцессыИСогласованиеУХ.ЗаполнитьСостоянияСогласования(НастраиваемыйОтчет);
		
		Если НастраиваемыйОтчет.ПометкаУдаления
			ИЛИ  НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Подготовлен
			ИЛИ НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Утвержден
			ИЛИ НастраиваемыйОтчет.НеВноситьИзменения Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НастраиваемыйОтчет.ПроверитьКонтекстИнициализирован();

		РезультатЗаполнения = НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию();
		
		Если РезультатЗаполнения Тогда
			РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(НастраиваемыйОтчет, Перечисления.СостоянияОтчетов.Подготовлен);
		Иначе
			РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(НастраиваемыйОтчет, Перечисления.СостоянияОтчетов.Выполняется);			
		КонецЕсли;
			
		Попытка
			НастраиваемыйОтчет.Записать();
			НастраиваемыйОтчет.СнятьБлокировку();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось записать документ %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, НастраиваемыйОтчет),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки; 
			
	КонецЦикла;	
	
КонецПроцедуры
