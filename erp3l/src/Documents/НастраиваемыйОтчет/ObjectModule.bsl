#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Таблицы значений, хранящие текущие значения показателей отчетов
Перем мПоказатели 			Экспорт;
Перем мПоказателиРаскрытия 	Экспорт;
Перем Показатели 			Экспорт;

Перем КэшПараметровГруппРаскрытия Экспорт;

Перем ТабПараметрыПоказателей Экспорт;

Перем мСоответствиеДляПоискаПоКоду Экспорт; // Соответствие, предназначенное для поиска строки таблицы мПоказатели по коду
Перем мСоответствиеДляПоискаПоСсылке Экспорт;
Перем мСоответствиеПараметрыРедактирования Экспорт; 

// Таблицы значений, которые хранят изменения, вносимые в таблицы мПоказатели и мПоказателиРаскрытия
Перем ЛогИзмененийПоказателей            Экспорт;
Перем ЛогИзмененийРаскрытийПоказателей   Экспорт;

// Таблицы значений, используемые для отображения значений показателей в альтернативных валютах
Перем мПоказателиВВалюте 			Экспорт;
Перем мПоказателиРаскрытияВВалюте 	Экспорт;
Перем ПоказателиВВалюте 			Экспорт;
Перем НастройкаПересчетаВалют		Экспорт;
Перем КэшУточнениеПересчетаВалют;

// Таблицы значений, хранящие корректировки значений показателей отчетов, если используется соответствующий режим работы
Перем мКорректировкиПоказателей Экспорт;
Перем мКорректировкиПоказателейРаскрытия Экспорт;
Перем КорректировкиПоказателей Экспорт;
Перем РежимКорректировки Экспорт; // Признак того, что включен режим работы с корректировками значений показателей
Перем мСоответствиеДляПоискаПоСсылкеКорр Экспорт;

// Таблица значений для хранения массива событий после автоматического заполнения экземпляра отчета
Перем ТаблицаСобытийЗагрузки Экспорт;
Перем ТаблицаПротоколаСеанс Экспорт;

Перем ИзмененияВДиалоге Экспорт;
Перем КомментарииИзменены Экспорт;
Перем мСпособЗаполнения Экспорт;
Перем мКопируемыйДокумент Экспорт;
Перем Параметры Экспорт;

Перем ТрансформационнаяКорректировка Экспорт;

Перем Состояние Экспорт; //Хранит текущее(новое если были изменения) состояние согласования
Перем СостояниеДоИзменения Экспорт; //Хранит последнее записанное состояние согласования

Перем ПустоеЗначениеПоТипу Экспорт;
Перем мТекущаяВалюта Экспорт;
Перем мПоказателиДляКурсовВалют Экспорт;
Перем мВалютыЗаписей Экспорт; // В случае работы с версиями - массив валют, в которых уже есть записи в регистре
Перем мМакетыРаскрытий Экспорт;
Перем мРасширеннаяДиагностикаВключена Экспорт;
Перем Кеш Экспорт;
Перем КешОтборов Экспорт;
Перем ЗначениеОтсутствует Экспорт;
Перем ВводНаОснованииХранимогоФайла Экспорт;
Перем ИскомаяАналитика Экспорт;
Перем мЭтоИмпортXLS Экспорт;
Перем мНеПрерыватьИмпортПриОшибкахВычисления Экспорт;
Перем СписокСообщений Экспорт;
Перем мНеЧисловыеПоказатели Экспорт; // Массив показателей, имеющих тип отличный от типа Число
Перем мЧисловыеПоказатели Экспорт; // Структура, содержащее показатели с типом значения "Число"

Перем мСоответствиеНаборовЗаписей; 	// Соответстие, ключом которого является имя таблицы регистра, а значением - структура, содержащая
// соответствующий набор записей и их счетчик

Перем мСоотвествиеДляПересчетаКурсов Экспорт; // Структура, ключом которой является ссылка на показатель, а значением - структура, 
Перем мПоказателиДляОбработки Экспорт; // Правила расчета показателей
Перем мСоответствиеПоказателейКодов Экспорт; // Соответствие ссылок на показатели их кодам.
Перем мОперанды Экспорт; // Таблица операндов, используемых при заполнении отчета
Перем мТаблицаВидовАналитикВидаОтчета Экспорт;
Перем мТабПоказателиЗапросы Экспорт; // Таблица операндов, подготовленная к вычислению.
Перем мТабРасшифровкиПоказателей Экспорт; // Таблица содержит значения показателей отчетов, на основании которых формировался результирующий отчет.
Перем мСоответствиеОперандовИПоказателейОтбора Экспорт; // Таблица соответствия показателей и показателей отбора при запросе к данным других отчетов
Перем мЗначенияОперандов Экспорт; // Таблица, содержащая значения операндов показателей с раскрытием
Перем ЕстьОбращениеКВИБ Экспорт; // Булев признак того, что для заполнения отчета будут использоваться данные ВИБ
Перем База Экспорт; // Соединение с внешней ИБ
Перем мПустойВидАналитики Экспорт;
Перем мПоказателиСтар Экспорт; // Копия мПоказатели, сделанная перед предыдущей записью документа.
Перем ФлагОшибкиИмпорта Экспорт; // Флаг, который взводится при неудачном импорте данных
Перем ТихийРежим Экспорт;
Перем мУдалятьДвижения;
Перем РежимДиалога Экспорт; // Флаг проведения из формы
Перем СрезПоВерсиям Экспорт; // Флаг открытия документа в режиме среза на какую-либо версию
Перем СписокВерсий Экспорт; // Список версий, включаемых в отчет
Перем мТекстПредупреждения Экспорт; // Текстовая переменная, используемая в WEB-клиенте, содержащее текстовое сообщение об ошибке..
Перем мКопирование Экспорт;
Перем ОписаниеТиповРесурсаЗначение; // Содержит описание типов ресурса "Значение" регистра "ЗначенияПоказателейОтчетоа"
Перем СтруктураОтбораРасшифровок Экспорт; // Если установлена, то используется для отбора в окне расшифровки показателя.
Перем мКонтрольныеСоотношения Экспорт; // Таблица контрольных соотношений
Перем мСоответствиеОперандовИПоказателейОтбораКонтр; // Таблица соответствия показателей и показателей отбора при запросе к данным других отчетов для контрольных соотношений.
Перем мОперандыКонтр Экспорт; // Таблица операндов, используемых при расчете контрольных соотношений
Перем мЗначенияОперандовКонтр; // Таблица, содержащая значения операндов контрольных соотношений
Перем мТабПоказателиЗапросыКонтр Экспорт; // Таблица операндов контрольных соотношений, подготовленная к вычислению.
Перем ТабКорректировок Экспорт; // Таблица из документа ручных корректировок при параметрически настроенном вычислении корректировок
Перем ШаблонКорректировки Экспорт; // Шаблон операции документа ручных корректировок
Перем СоответствиеХраненияКомментариев Экспорт; // Соответствие, в которой хранятся комментарии к показателям.
Перем ТаблицаРегистраторов Экспорт; // Хранит таблицу настраиваемых отчетов, к которым обращались процедуры заполнения отчета.
Перем ИзмененНечисловойПоказатель Экспорт; // При работе в режиме версионирования, если был изменен нечисловой показатель, создается версия всех значений нечисловых показателей.
Перем ИзмененКлючевойРеквизит Экспорт; 	// При работе в режиме версионирования, если был изменен ключевой реквизит (Организация, Период, аналитики на уровне отчета и т.д.) очищаются все версии и создается новая,
//	аналогично работе без режима версионирования.
Перем РежимРасшифровки Экспорт; // При получении таблицы значений аналитик импортируемых значений из ВИБ не производится обновление и добавление новых записей в справочники.
Перем ТаблицаСогласования Экспорт; // Таблица, в которой хранятся данные по маршруту согласования текущего документа.
Перем РаботаСВерсиями Экспорт;
Перем ТекущийЭлементОписаниеВерсии Экспорт; // Хранит ссылку на последнюю текущую версию объекта.

// Переменные для работы с пересчетом показателей по курсу
Перем КэшТаблицыКурсов Экспорт; // Хранит таблицу курсов.
Перем КэшДатРасчетаПоказателей Экспорт; // Хранит соответствие даты расчета показателя.

Перем ДанныеПараметрикиАктуальны Экспорт; // Булево, свидетельствует о том, что данные для расчета по параметрической настройке соответствуют текущему правилу обработки.
Перем ВычислятьПриИзменении Экспорт;

Перем ОтборПоКонтрольнымСоотношениям Экспорт;

Перем ДанныеРаскрытияИнициализированы Экспорт;
Перем ОтчетИнициализирован Экспорт;
Перем СписокИспользуемыхВерсий Экспорт; // Список версий, используемых для инициализации контекста отчета
Перем ОбновитьМакетПолностью Экспорт;

Перем мТаблицаПересчета Экспорт; // Таблица значений, определяющее пути пересчета показателей при ручном изменении какого - то.
Перем мПоказателиОбязательныеКПересчету Экспорт;  // Массив показателей, которые должны пересчитываться всегда при изменении какого  - либо значения
Перем ПоказателиКПересчету Экспорт; // Массив кодов показателей для выборочного пересчета

Перем Размерность Экспорт; // Размерность значения

// Переменные, управляющие процессами при записи документа
Перем ПроверкаПриЗаписи Экспорт; // Переменная, определяющая необходимость проверки возможности записи документа
Перем ФормированиеДвиженийПриЗаписи Экспорт; // // Переменная, определяющая необходимость переформирования движений при записи документа.

Перем ТипЗначенияЧисло Экспорт; //  Переменная, хранящая значения соответствующего перечисления

// Инициализируются при инициализации контекста на основании матрицы полномочий.
Перем Исполнитель   Экспорт;
Перем Проверяющий  Экспорт;

Перем НомерТекущейОперации               Экспорт; // Хранит номер текущей операции.

Перем МеткаВерсии       Экспорт;
Перем КомментарийВерсии Экспорт;

Перем ВидыАналитикОтчетаНеопределены Экспорт;

Перем СбрасыватьФлагИзмененияПоказателейПриВыводе Экспорт; // Позволяет отменить сброс флага изменения показателя при выводе его в макет: для нужд группового редактирования;
Перем ЕдиницаИзмеренияОтображения Экспорт; // Переменная содержит единицу измерения для формирования отображения бланка отчета.

Перем ПересчетВалюты Экспорт; // Признак того, что производится пересчет значений документа. Не осуществляется импорт из ВИБ.

Перем Вариант Экспорт; // Вариант версии.

Перем ПоказателиДляЗаполнения Экспорт; // Массив показателей для выборочного перезаполнения в рамках анализа чувствительности
Перем АнализЧувствительности Экспорт; // Признак того, что отчет изменяется в рамках анализа чувствительности

Перем мНеИнициироватьВнутриГрупповыеОперации Экспорт; // Признак того, что отчету не надо выверять соответствие показателей ВГО.
Перем ВалютаУправленческогоУчета Экспорт;

Перем ТаблицаВыявленныхОшибок Экспорт; // Таблица, содержащая лог ошибок, возникших при заполнении/вычислении отчета
Перем ДанныеРасшифровкиСчитаны Экспорт;

Перем ВсегдаЗаполнятьАналитики Экспорт;
Перем ТабНомеровАналитик Экспорт;

// Управляющие переменные для консолидационных процедур
Перем УчитыватьОперацииПриобретенияПриКонсолидации Экспорт;
Перем ДокументУправленияПериодомСценария;

Перем ТаблицаВалютСИзмененнымКурсом Экспорт; // Список валют, у которых изменился курс для записи корректировок по новому курсу

Перем СтруктураОтбораАналитикДляСтрокОтчета Экспорт; // Соответствие, которое хранит наложенные отборы для строк при раскрытии в теле отчета.
Перем СтруктураСортировкиАналитикДляСтрокОтчета Экспорт;

Перем ПодставлятьЗначенияПоУмолчаниюВместоПустых Экспорт;
Перем ОбработанныеОперанды Экспорт;

//////////////////////////////////////////////////////////////////////////////////////////////
// Переменные для обновления отображения
//

Перем ВыводитьВДерево Экспорт;

Перем мТабПоказателиСвод Экспорт;
Перем мТаблицаАналитикВидаОтчета Экспорт;
Перем МаксАналитикПоказателя Экспорт;
Перем МаксАналитикОтчета Экспорт;
Перем ТаблицаСтроки Экспорт;
Перем ДеревоСтрок Экспорт;
Перем СписокКолонокБазис Экспорт;
Перем ПоказателиСРаскрытием Экспорт;

Перем СписокРедактируемыхПоказателей Экспорт;
Перем СписокРедактируемыхОбластей Экспорт;

Перем СписокИспользуемыхВалют Экспорт;

Перем мИзмененныеПоказатели Экспорт;
Перем мИзмененныеПоказателиРаскрытия Экспорт;

Перем ТаблицаРаскрытийСтрок Экспорт;
Перем ШаблонРаскрытиеСтроки Экспорт;
Перем ШаблонТаблицыКоординат Экспорт;
Перем ШаблонКоординаты Экспорт;

Перем КэшДанныхЭлементов Экспорт;

Перем Расшифровка;
Перем РасшифровкаСтрока;

Перем ЗапросКоординаты Экспорт;
Перем ЗапросДанные Экспорт;
Перем ЗапросДанныеРаскрытия Экспорт;

Перем ТаблицыЗапросаДанные Экспорт;
Перем ТаблицыЗапросаРаскрытие Экспорт;

Перем УправляемыйРежим Экспорт;

Перем МассивГруппировокСтрокИтог Экспорт;
Перем МассивГруппировокКолонокИтог Экспорт;

Перем ТаблицаКоординатПомещенаВЗапрос;

Перем ТабКоординатыСтрок Экспорт;
Перем ТабКоординатыКолонок Экспорт;
Перем ТабКоординатыОбщ Экспорт;

Перем ТабДерево Экспорт;

Перем ПерваяСтрока Экспорт;
Перем ПерваяКолонка Экспорт;
Перем ПоследняяКолонка Экспорт;

Перем НачалоКолонок;
Перем УровеньСтрока Экспорт;
Перем УровеньКолонка Экспорт;

Перем ТекущийДелитель Экспорт; // Переменная содержит делитель для вывода значений в таблицу
Перем ТекущаяТочность Экспорт; // Переменная содержит точность для вывода значений в таблицу

Перем МассивДобавленныхСтрокКПередаче Экспорт; // Массив, в котором хранятся данные по добавленным строкам, необходимые для отрисовки
Перем МассивУдаленныхСтрокКПередаче Экспорт; // Массив, в котором хранятся данные по удаленным строкам, необходимые для отрисовки

Перем МассивИзмененныхОбластей Экспорт;

Перем ТабРазвернутыхУзлов Экспорт;
Перем ИзменяемаяЯчейка Экспорт;

Перем ЗаполнениеВыполнено Экспорт;
Перем ТабПризнакиСтрок Экспорт;

Перем ТабРаскрытиеГруппСтроки Экспорт;
Перем ТабДок Экспорт;
Перем СтрокиРазгруппированы;

Перем ТабОбластиРаскрытия Экспорт;
Перем ПоложениеПервойКолонкиПриРаскрытии Экспорт; // Положение первой колонки при раскрытии.

Перем ТабКоординатыИзменяемыхЯчеек;

Перем глОсновнойЯзык Экспорт;
Перем УдалитьПромежуточныеВерсии Экспорт;
Перем КорректирующаяВерсия Экспорт;

Перем ПутьКФайлуADO 			Экспорт;
Перем ПутьКВременномуФайлуADO 	Экспорт;
Перем ИмяЛиста					Экспорт;
Перем СтрокаСоединения			Экспорт;

Перем ВерсияХранимогоФайла		Экспорт;
Перем ИспользуемоеЧтениеНеактуальныхЗаписей;

//////////////////////////////////////////////////////////////////////////////////////////////
// Переменные для обработки раскрытий
//

Перем МассивЗагруженныхГруппРаскрытия Экспорт;

///////////////////////////////////////////////////////////////////////////////////////
// Данные контекста отчета                      

Перем ДанныеОбъекта Экспорт;
Перем АдресХранилищаПеременныхДляРасчета Экспорт;

Перем ОтступТаблицы Экспорт;
Перем НеПересчитыватьИтоги Экспорт;

Перем МассивЭкземпляров Экспорт;
Перем ФормироватьДвиженияПоЛимитам Экспорт;

//Перем ОписаниеВерсии Экспорт;

Перем СохранятьИсториюИзменений Экспорт;
Перем АвтоматическийПересчетЗависимыхПоказателей Экспорт;

Перем АнализПроизводительности Экспорт;
Перем ТаблицаПроизводительности Экспорт;

Перем ИдентификаторФормыВызоваТрассировки Экспорт;
Перем АдресХранилищаДанныхТрассировки Экспорт;

Перем мТабПоказателиЗапросыАнализ Экспорт;

Перем ОбрабатыватьПометкуУдаленияОписанияВерсий Экспорт;

Перем МассивПериодов Экспорт;

Перем ИдентификаторСеанса Экспорт;
Перем Регистратор Экспорт;
Перем ЧислоДопАналитик Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.БланкиОтчетов") Тогда
		
		ВидОтчета=Основание.Владелец;
		БланкОтчета = Основание;
		Если ЭтоНовый() Тогда
			
			Структура = Новый Структура("БланкОтчета, БланкИмпорта, ПравилоОбработки, ПравилоПроверки");
			ЗаполнитьЗначенияСвойств(Структура, УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета
			, Сценарий
			, Организация
			, ПериодОтчета));
			
			Если НЕ ЗначениеЗаполнено(Структура.ПравилоОбработки) Тогда
				#Если Клиент Тогда	 
					ноПредупреждение(НСтр("ru = 'Для формируемого отчета не удается определить настройки по умолчанию.'"));
				#КонецЕсли	
			КонецЕсли;
			
			БланкИмпорта     = Структура.БланкИмпорта;
			ПравилоОбработки = Структура.ПравилоОбработки;
			ПравилоПроверки  = Структура.ПравилоПроверки;
			
			ЕдиницаИзмерения	= ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию;
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			КонецЕсли;
			УровеньТочности		= ШаблонОтчета.УровеньТочностиПоУмолчанию;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
		// Заполнение шапки
		
		// Получаем настройки по умолчанию
		
		ВидОтчета=Основание;
		
		Структура = Новый Структура("БланкОтчета, БланкИмпорта, ПравилоОбработки, ПравилоПроверки");
		ЗаполнитьЗначенияСвойств(Структура, УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета
		, Сценарий
		, Организация
		, ПериодОтчета));
		
		Если НЕ ЗначениеЗаполнено(Структура.ПравилоОбработки) Тогда
			#Если Клиент Тогда	 
				ноПредупреждение(НСтр("ru = 'Для формируемого отчета не удается определить настройки по умолчанию.'"));
			#КонецЕсли	
		КонецЕсли;
		
		БланкИмпорта     = Структура.БланкИмпорта;
		ПравилоОбработки = Структура.ПравилоОбработки;
		ПравилоПроверки  = Структура.ПравилоПроверки;
		БланкОтчета  	 = Структура.БланкОтчета;
		
		ЕдиницаИзмерения	= ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию;
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		КонецЕсли;
		УровеньТочности		= ШаблонОтчета.УровеньТочностиПоУмолчанию;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ХранимыеФайлыОрганизаций") Тогда	
		
		Если Основание.ЭтоГруппа Тогда
			#Если Клиент Тогда
				ноПредупреждение(НСтр("ru = 'Нельзя вводить документ на основании группы.'")); 
			#КонецЕсли 
			Возврат;
		КонецЕсли; 
		
		ВидОтчета=Основание.ВидОтчета;
		
		Структура = Новый Структура("БланкОтчета, БланкИмпорта, ПравилоОбработки, ПравилоПроверки, ВИБ");
		ЗаполнитьЗначенияСвойств(Структура, УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(Основание.ВидОтчета
		, Основание.Сценарий
		, Основание.Владелец
		, Основание.ПериодСценария));
		
		Если НЕ (ЗначениеЗаполнено(Структура.ПравилоОбработки)
			И ЗначениеЗаполнено(Структура.БланкИмпорта)) Тогда
			#Если Клиент Тогда	 
				ноПредупреждение(НСтр("ru = 'Для формируемого отчета не удается определить настройки по умолчанию.'"));
			#КонецЕсли	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Структура.ПравилоОбработки.ТипБД) И НЕ ЗначениеЗаполнено(Структура.ВИБ) Тогда
			#Если Клиент Тогда
				ноПредупреждение(НСтр("ru = 'Для формируемого отчета не удается определить настройки по умолчанию.'"));
			#КонецЕсли
		КонецЕсли;
		
		
		Организация 	 = Основание.Владелец;
		Сценарий 		 = Основание.Сценарий;
		ПериодОтчета	 = Основание.ПериодСценария;
		ФайлИмпорта 	 = Основание;
		
		БланкОтчета      = Структура.БланкОтчета;
		БланкИмпорта     = Структура.БланкИмпорта;
		ПравилоОбработки = Структура.ПравилоОбработки;
		ПравилоПроверки  = Структура.ПравилоПроверки;
		ИспользуемаяИБ   = Структура.ВИБ;
		
		Для к = 1 По ПараметрыСеанса.ЧислоДопАналитик  Цикл
			
			Если Метаданные().Реквизиты.Найти("Аналитика" + к) <> Неопределено Тогда
				ЭтотОбъект["Аналитика" + к] = Основание["Аналитика" + к];
			КонецЕсли;
			
		КонецЦикла; 
		
		Если НЕ ЗначениеЗаполнено(ДатаИзменения) Тогда
			Возврат;
		КонецЕсли; 
		
		ВводНаОснованииХранимогоФайла = Истина; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравилоОбработки) И ВидОтчета.ПараметрыОтчета.Количество()>0 Тогда
		
		Для Каждого Параметр ИЗ ВидОтчета.ПараметрыОтчета Цикл
			
			ТекПараметр=ПараметрыОтчета.Добавить();
			ТекПараметр.Код=Параметр.Код;
			ТекПараметр.Наименование=Параметр.Наименование;
			ТекПараметр.Значение=Параметр.ЗначениеПоУмолчанию;
			
			Если ТипЗнч(ТекПараметр.Значение)=Тип("Строка") Тогда
				ТекПараметр.ЗначениеСтрока=ТекПараметр.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьЗаписьПротокола(СостояниеПриОшибке) Экспорт
	
	ПротоколОшибок = ПротоколируемыеСобытияУХ.Завершить(Номер,,?(ЗначениеЗаполнено(Ссылка),Ссылка,ПолучитьСсылкуНового()),,,ВерсияХранимогоФайла);
	
	ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(?(ЗначениеЗаполнено(Ссылка), Ссылка,ПолучитьСсылкуНового()), 
		ВерсияХранимогоФайла, ПротоколОшибок, Организация, ПериодОтчета, Сценарий, ВидОтчета);
	
	Если СостояниеПриОшибке = Перечисления.СостоянияОтчетов.ЗаписанСОшибкой 
		ИЛИ (ЗначениеЗаполнено(ПротоколОшибок)
		И (НЕ ПротоколОшибок.Записи.Найти(Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка,"ТипЗаписи") = Неопределено)) Тогда
		
		УстановитьСостояниеОтчета(СостояниеПриОшибке);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписьПротокола() 

// Выполняет проверку заполнения обязательных аналитик в данном объекте документа.
// Возвращает успешность прохождения проверки.
Функция ПроверитьЗаполнениеОбязательныхАналитик() Экспорт
	РезультатФункции = Истина;
	РезультатПроверкаЗаполненыхЗначений = ЕстьЗаполненныеЗначения();
	Если РезультатПроверкаЗаполненыхЗначений Тогда
		РезультатФункции = ПроверитьЗаполненностьОбязательныхАналитик(Истина);
	Иначе
		// Значения не заполнены. Пропускаем.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПроверитьЗаполнениеОбязательныхАналитик()
	
// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеЗаполнено(Ссылка) И Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
		
		Если ОбрабатыватьПометкуУдаленияОписанияВерсий Тогда
			
			СписокИспользуемыхВерсий=ПолучитьСписокВерсий(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсий
			|ИЗ
			|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|ГДЕ
			|	ВерсииЗначенийПоказателей.Ссылка В (&СписокИспользуемыхВерсий)
			|И	ВерсииЗначенийПоказателей.ПометкаУдаления = &ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ПометкаУдаления", НЕ ПометкаУдаления);
			Запрос.УстановитьПараметр("СписокИспользуемыхВерсий", СписокИспользуемыхВерсий);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Попытка
					Выборка.ОписаниеВерсий.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления, Истина);
				Исключение
					ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось пометить на удаление отчет'"), Отказ);
					Возврат;
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПометкаУдаления Тогда // снятие пометки обрабатываем, только при записи данных в базу
			
			РасширениеБизнесЛогикиУХ.СверкаВГО_ОбработкаПроведенияНастраиваемыйОтчет(ЭтотОбъект);
			РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(ЭтотОбъект, Перечисления.СостоянияОтчетов.Запланирован);
			
		КонецЕсли;
		
		ФормированиеДвиженийПриЗаписи = Ложь;
		ПроверкаПриЗаписи             = Ложь; // Было установлена/снята пометка удаления с отчета. Никаких изменений значений показателей и/или реквизитов отчета не было.
		
		Возврат;

	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнен вид отчета'");
		Сообщение.Сообщить();
	ИначеЕсли НЕ ЗначениеЗаполнено(ПравилоОбработки) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено правило обработки'");
		Сообщение.Сообщить();
		
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() тогда
		СтрокаШаблона = Нстр("ru = 'Документ ""%1"" не может быть создан:'");
	Иначе
		СтрокаШаблона = Нстр("ru = 'Документ ""%1"" не может быть записан:'");		
	КонецЕсли;
	
	ШапкаОшибки = СтрШаблон(СтрокаШаблона, ЭтотОбъект);
		
	ПроверитьПередЗаписью(Отказ, ШапкаОшибки);
	
	Если Отказ Тогда	
		Возврат;	
	КонецЕсли;
	
	ПроверитьКонтекстИнициализирован();
	ИнициализироватьКонтекстРаскрытия();
		
	Если мПоказатели=Неопределено ИЛИ ФормироватьДвиженияПоЛимитам Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ПротоколированиеНачато = Ложь;	
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		
		УстановитьСсылкуНового(Документы.НастраиваемыйОтчет.ПолучитьСсылку());
		
	Иначе
		
		Состояние = РасширениеПроцессыИСогласованиеУХ.ВернутьСтатусОбъекта(Ссылка);
		
	КонецЕсли;
	
	мУдалятьДвижения = Ложь;
		
	СброситьЗапросыОбъекта();
	
	ПоследнийРедактировавший = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ДатаИзменения            = ТекущаяДата();
		 
	Если (НЕ СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение)
		И ЕстьОшибкиЗагрузки() Тогда
			
		ПротоколируемыеСобытияУХ.Начать(ЭтотОбъект);
		
		МассивОшибок=ТаблицаСобытийЗагрузки.НайтиСтроки(Новый Структура("ТипЗаписи",Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка));
		
		Для Каждого СтрОшибка ИЗ МассивОшибок Цикл
			
			Если ТипЗнч(СтрОшибка.ОбъектДанных)=Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
				
				РабочийОбъект=СтрОшибка.ОбъектДанных;
				
			ИначеЕсли Не ПустаяСтрока(СтрОшибка.ОбъектМетаданных) Тогда
				
				РабочийОбъект=СтрОшибка.ОбъектМетаданных;
				
			Иначе
				
				РабочийОбъект=СтрОшибка.ОбъектДанных;
				
			КонецЕсли;	
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.МодульОбъекта.ПередЗаписью.1",,РабочийОбъект,СтрОшибка.Сообщение,СтрОшибка.ТехническаяИнформацияСтрокаВнутр,Новый Структура("КонтекстСобытия,ПоказательОтчета",СтрОшибка.КонтекстСобытия,СтрОшибка.ПоказательОтчета));
			
		КонецЦикла;
		
		ЗавершитьЗаписьПротокола(Перечисления.СостоянияОтчетов.Запланирован);
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(Ссылка) Тогда
		
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(Ссылка,ВерсияХранимогоФайла);
				
	КонецЕсли;
			
	УбратьВхожденияОсновнойВалютыВТЧДополнительныеВалюты();
	
	РаботаСВерсиями = (НЕ (ЭтоНовый() ИЛИ ЗначениеЗаполнено(мКопирование))) И ВидОтчета.СохранятьИсториюИзменений;
	
	ТекстВопрос="";
		
	Если УдалитьПромежуточныеВерсии Тогда
		
		мУдалятьДвижения = Истина;
		
	ИначеЕсли НЕ ЭтоНовый() И ИзмененКлючевойРеквизит Тогда // Для нового отчета отсутствуют предыдущие версии.
				
		мУдалятьДвижения = Истина;
		
	КонецЕсли;
	
	ПротоколируемыеСобытияУХ.Начать(ЭтотОбъект);
	ЕстьОшибки=Ложь;
	
	Попытка
		// Проверка заполнения обязательных аналитик.
		РезультатОбязательныеАналитики = ПроверитьЗаполнениеОбязательныхАналитик();
		Если НЕ РезультатОбязательныеАналитики Тогда
			ЕстьОшибки = Истина;
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
		
		Если Состояние = Перечисления.СостоянияОтчетов.Подготовлен 
			ИЛИ Состояние = Перечисления.СостоянияОтчетов.Утвержден
			ИЛИ Состояние = Перечисления.СостоянияОтчетов.Возвращен Тогда
			
			Если НЕ Проверить(Истина).СтатусПроверки=Истина Тогда // Проверка на корректность данных при работе в диалоге осуществляется модулем формы отчета.
				
				ЕстьОшибки=Истина;
				
			КонецЕсли;
			
		КонецЕсли;
				
	Исключение
		
		ЕстьОшибки=Истина;
		
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		
		ЗавершитьЗаписьПротокола(Перечисления.СостоянияОтчетов.ЗаписанСОшибкой);
		
	Иначе
		
		ПротоколируемыеСобытияУХ.Отменить();
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(Ссылка);
			НаборЗаписей=РегистрыСведений.ЖурналПротоколируемыхСобытий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПересчетВалюты = Неопределено Тогда	
		ПересчетВалюты = ЕстьИзмененияДополнительныхВалют();	
	КонецЕсли; 
	
	Если Состояние = Перечисления.СостоянияОтчетов.ЗаписанСОшибкой		
		ИЛИ Состояние = Перечисления.СостоянияОтчетов.Запланирован Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если МетаДанные().Реквизиты.Найти("Аналитика" + Инд) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияУХ.ЗаполнитьПустоеЗначение(ЭтотОбъект["Аналитика" + Инд],  Неопределено);
		
	КонецЦикла;
			
	Если ЗначениеЗаполнено(ИзмененияВДиалоге) Тогда
		
		Если НЕ ИзмененияВДиалоге Тогда
			Возврат; // Не было изменений.
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Перем КэшТаблицыКурсов;
	
	Если ОбменДанными.Загрузка ИЛИ мПоказатели=Неопределено ИЛИ ФормироватьДвиженияПоЛимитам Тогда // Проверки и запись движений в регистры значений показателей не осуществляются.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУХ.ПометитьСправочникПоРеквизиту("ПротоколируемыеСобытия","Объект",Ссылка,ПометкаУдаления,Отказ);
	ДополнительныеСвойства.Вставить("ЕстьИзмененияЗначений", ЕстьИзмененияЗначений());	
		
	Если ЗначениеЗаполнено(ИзмененияВДиалоге) И НЕ ИзмененияВДиалоге Тогда
		
		Если КомментарииИзменены Тогда
			ЗаписатьКомментарииВРегистр(ТекущийЭлементОписаниеВерсии); // Возможно, был изменен только комментарий.
		КонецЕсли;
		
		// Если не было изменений, то отменяем проверки и движения.
		ПроверкаПриЗаписи             = Ложь;
		ФормированиеДвиженийПриЗаписи = Ложь;
		
	КонецЕсли;
	
	Если ПроверкаПриЗаписи Тогда
		
		// В случае использования неактуальных данных состояние отчета не может быть "Подготовлен"
		// или "Утвержден".
		
		Если ЭтоНовый() тогда
			СтрокаШаблона = Нстр("ru = 'Документ ""%1"" не может быть создан:'");
		Иначе
			СтрокаШаблона = Нстр("ru = 'Документ ""%1"" не может быть записан:'");		
		КонецЕсли;
		
		ШапкаОшибки = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ШапкаОшибки = СтрШаблон(СтрокаШаблона, ЭтотОбъект);
		КонецЕсли;
				
		Если Не ПолныеПраваУХ.ПроверитьВозможностьЗаписиДокументовПоПериодуСценария(Сценарий, ПериодОтчета, Организация,Отказ, ШапкаОшибки,,ПериодОкончания) Тогда
			Возврат;
		КонецЕсли;
				
	КонецЕсли;
	
	// Установим статус в черновик, если не задан явно.
	СтатусОбъекта = РасширениеПроцессыИСогласованиеУХ.ВернутьСтатусОбъекта(Ссылка);
	Если Не ЗначениеЗаполнено(СтатусОбъекта) Тогда
		НовоеСостояние = Перечисления.СостоянияОтчетов.Запланирован;
		РасширениеПроцессыИСогласованиеУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, НовоеСостояние);
	Иначе
		// Статус задан.
	КонецЕсли;	
	
	АктивностьДвижений = УправлениеОтчетамиУХ.ПолучитьПризнакАктивностиДвижений(ЭтотОбъект);
		
	Если ФормированиеДвиженийПриЗаписи И (НЕ Документы.НастраиваемыйОтчет.РежимМногопериодныхУОП(ЭтотОбъект)) Тогда
		
		Если мУдалятьДвижения Тогда
			
			Если НЕ ОчиститьРегистры() Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'При попытке удалить предыдущие данные отчета произошла ошибка.'"), Отказ, ШапкаОшибки);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
		ОбъектРасчета.Вставить("АктивностьДвижений",АктивностьДвижений);
		ОбъектРасчета.Вставить("ЧистоваяЗаписьДанных",Истина);
		ОбъектРасчета.Вставить("ДатаИзмененияMs",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		ТекПериодОкончания=ПериодОкончания;
		
		УправлениеОтчетамиУХ.ЗаписатьПоказателиОтчетов(ОбъектРасчета,Отказ);
				
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ОбъектРасчета.Вставить("ПериодОкончания",ТекПериодОкончания);
		ВосстановитьПеременныеДляРасчета(ОбъектРасчета);
	
		Если (АвтоматическийПересчетЗависимыхПоказателей 
			ИЛИ ЗначениеЗаполнено(ИдентификаторФормыВызоваТрассировки))
			И ОбъектРасчета.Свойство("МассивИзмененныхПоказателей") Тогда
			
			СтруктураКлючевыхРеквизитов=Новый Структура;
			СтруктураКлючевыхРеквизитов.Вставить("Организация",Организация);
			СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета",ПериодОтчета);
			СтруктураКлючевыхРеквизитов.Вставить("Сценарий",Сценарий);
			СтруктураКлючевыхРеквизитов.Вставить("Проект",Проект);
			СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета",ВидОтчета);
			СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",ОсновнаяВалюта);
			СтруктураКлючевыхРеквизитов.Вставить("ПравилоОбработки",ПравилоОбработки);
			СтруктураКлючевыхРеквизитов.Вставить("ДополнительныеВалюты",ДополнительныеВалюты.Выгрузить());

			Для Индекс=1 По МаксАналитикОтчета Цикл
				
				СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Индекс,ЭтотОбъект["Аналитика"+Индекс]);
				
			КонецЦикла;
						
			РезультатРасчета=РасширениеИнтеграцииУХ.РассчитатьЗависимыеПоказателиОтчетов(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ЗначениеЗаполнено(ИдентификаторФормыВызоваТрассировки),Ложь);
			
			Если НЕ РезультатРасчета=Неопределено Тогда
				АдресХранилищаДанныхТрассировки=ПоместитьВоВременноеХранилище(РезультатРасчета,ИдентификаторФормыВызоваТрассировки);
			КонецЕсли;
			
			// Пересчитываем экземпляры отчетов, которые заполнялись через агрегацию данных (консолидация, свертка и т.д.) 
			// и использовали данные текщего отчета.
			
			Если МассивЭкземпляров=Неопределено Тогда
				
				МассивЭкземпляров=Новый Массив;
				
			КонецЕсли; 
			
			МассивЭкземпляров.Добавить(Ссылка);
			
			РасширениеИнтеграцииУХ.РассчитатьЗависимыеЭкземплярыОтчетов(Ссылка,МассивЭкземпляров);
			
		КонецЕсли;
		
		РассчитатьПоказателиЭффективности();
				   
	КонецЕсли;
	
	// Обновим данные по версиям файлов - источникам заполнения
	
	ОбновитьОбъектХранимыйФайл();
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(
			"УстановкаЛимитовУХ.СнятьАктуальностьЛимитовПоДокументу", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьПоказателиЭффективности() Экспорт
    
    Если ЗначениеЗаполнено(Проект) И Константы.АвтоматическаяАктуализацияДанныхПоПроектам.Получить() Тогда
        
        Запрос=Новый Запрос;
        Запрос.Текст="ВЫБРАТЬ
        |	мПоказатели.Ссылка КАК Показатель
        |ПОМЕСТИТЬ мПоказатели
        |ИЗ
        |	&мПоказатели КАК мПоказатели
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВалютаРасчетаПоказателейПроекта.Значение КАК ВалютаРасчетаПоказателейПроекта,
        |	ИтоговыйПоказательПоступленияБДДС.Значение КАК ИтоговыйПоказательПоступленияБДДС,
        |	ИтоговыйПоказательСписанияБДДС.Значение КАК ИтоговыйПоказательСписанияБДДС,
        |	ИтоговыйПоказательДоходыБДР.Значение КАК ИтоговыйПоказательДоходыБДР,
        |	ИтоговыйПоказательРасходыБДР.Значение КАК ИтоговыйПоказательРасходыБДР,
        |	ИтоговыйПоказательПоступленияРесурсы.Значение КАК ИтоговыйПоказательПоступленияРесурсы,
        |	ИтоговыйПоказательСписанияРесурсы.Значение КАК ИтоговыйПоказательСписанияРесурсы
        |ПОМЕСТИТЬ КонстантыПроекта
        |ИЗ
        |	Константа.ВалютаРасчетаПоказателейПроекта КАК ВалютаРасчетаПоказателейПроекта,
        |	Константа.ИтоговыйПоказательПоступленияБДДС КАК ИтоговыйПоказательПоступленияБДДС,
        |	Константа.ИтоговыйПоказательСписанияБДДС КАК ИтоговыйПоказательСписанияБДДС,
        |	Константа.ИтоговыйПоказательДоходыБДР КАК ИтоговыйПоказательДоходыБДР,
        |	Константа.ИтоговыйПоказательРасходыБДР КАК ИтоговыйПоказательРасходыБДР,
        |	Константа.ИтоговыйПоказательПоступленияРесурсы КАК ИтоговыйПоказательПоступленияРесурсы,
        |	Константа.ИтоговыйПоказательСписанияРесурсы КАК ИтоговыйПоказательСписанияРесурсы
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВЫБОР
        |		КОГДА мПоказатели1.Показатель ЕСТЬ NULL 
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ + ВЫБОР
        |		КОГДА мПоказатели2.Показатель ЕСТЬ NULL 
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ + ВЫБОР
        |		КОГДА мПоказатели3.Показатель ЕСТЬ NULL 
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ + ВЫБОР
        |		КОГДА мПоказатели4.Показатель ЕСТЬ NULL 
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ + ВЫБОР
        |		КОГДА мПоказатели5.Показатель ЕСТЬ NULL 
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ + ВЫБОР
        |		КОГДА мПоказатели6.Показатель ЕСТЬ NULL 
        |			ТОГДА 0
        |		ИНАЧЕ 1
        |	КОНЕЦ КАК ИтоговыеПоказатели
        |ИЗ
        |	КонстантыПроекта КАК КонстантыПроекта
        |		ЛЕВОЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели1
        |		ПО КонстантыПроекта.ИтоговыйПоказательПоступленияБДДС = мПоказатели1.Показатель
        |		ЛЕВОЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели2
        |		ПО КонстантыПроекта.ИтоговыйПоказательСписанияБДДС = мПоказатели2.Показатель
        |		ЛЕВОЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели3
        |		ПО КонстантыПроекта.ИтоговыйПоказательДоходыБДР = мПоказатели3.Показатель
        |		ЛЕВОЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели4
        |		ПО КонстантыПроекта.ИтоговыйПоказательРасходыБДР = мПоказатели4.Показатель
        |		ЛЕВОЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели5
        |		ПО КонстантыПроекта.ИтоговыйПоказательПоступленияРесурсы = мПоказатели5.Показатель
        |		ЛЕВОЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели6
        |		ПО КонстантыПроекта.ИтоговыйПоказательСписанияРесурсы = мПоказатели6.Показатель";
        
        Запрос.УстановитьПараметр("мПоказатели",мПоказатели);
        
        Результат=Запрос.Выполнить().Выбрать();
        
        Если Результат.Следующий() И Результат.ИтоговыеПоказатели>0 Тогда
            
            РасширениеИнтеграцииУХ.РассчитатьПоказателиЭффективности(Сценарий,Проект);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

Процедура ОбновитьОбъектХранимыйФайл()
    
    НаборЗаписей=РегистрыСведений.ОбъектыХранимыхФайлов.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.ИмпортированныйОбъект.Установить(Ссылка);
    
    Если НЕ (СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки
        ИЛИ СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.Импорт
        ИЛИ СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.ИмпортФНС) Тогда
        
        НаборЗаписей.Записать(Истина);
        
    ИначеЕсли ЗначениеЗаполнено(ФайлИмпорта) И ЗначениеЗаполнено(ВерсияХранимогоФайла) Тогда
        
        Если РежимКорректировки Тогда // очищаем только записи, относящиеся к данной корректировке.
            
            НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(ВерсияХранимогоФайла);
            
        КонецЕсли;
        
        НаборЗаписей.Прочитать();
        НаборЗаписей.Очистить();
        
        НоваяЗапись=НаборЗаписей.Добавить();
        НоваяЗапись.ХранимыйФайл			= ФайлИмпорта;
        НоваяЗапись.ВерсияХранимогоФайла	= ВерсияХранимогоФайла;
        НоваяЗапись.ИмпортированныйОбъект	= Ссылка;
        НоваяЗапись.Период					= ТекущаяДата();
        
        НаборЗаписей.Записать(Истина);
        
    Иначе
        
        НаборЗаписей.Записать(Истина);
        
    КонецЕсли;
    
КонецПроцедуры

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мКопирование = Истина;
	мКопируемыйДокумент = ОбъектКопирования.Ссылка;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ОТОБРАЖЕНИЯ ПОКАЗАТЕЛЕЙ В РАЗЛИЧНЫХ ВАЛЮТАХ.
//

Функция ПроверитьНаличиеВидовКурсов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|	И ПоказателиОтчетов.НеФинансовый = ЛОЖЬ
	|	И ПоказателиОтчетов.ВидКурса В (NULL, НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ПустаяСсылка))
	|	И ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)";
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет дату курса для переданного показателя.
//
Функция ПолучитьДатуИзКэша(Показатель) Экспорт
	
	Если КэшДатРасчетаПоказателей = Неопределено Тогда
		КэшДатРасчетаПоказателей = Новый Соответствие;
	КонецЕсли;
	
	ДатаПоказателя = КэшДатРасчетаПоказателей[Показатель];
	
	Если ДатаПоказателя = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Показатель.СвязанныйПоказатель) Тогда
			СтрокаПоказателя = мСоответствиеДляПоискаПоСсылке[Показатель.СвязанныйПоказатель];
			ДатаПоказателя = ?(СтрокаПоказателя = Неопределено, Дата, СтрокаПоказателя.Значение);
		Иначе
			ДатаПоказателя = Дата;
		КонецЕсли;
		
		КэшДатРасчетаПоказателей.Вставить(Показатель, ДатаПоказателя);
		
	КонецЕсли;
	
	Возврат ДатаПоказателя;
	
КонецФункции

// Возвращает значение показателя, пересчитанное по курсу.
Функция ПересчитатьЗначениеПоказателяПоКурсу(
										ЗначениеПоказателя, 
										Показатель, 
										ТекущаяВалюта, 
										ВалютаПересчета, 
										ПризнакОшибки = Ложь, 
										УточнениеПересчетаВалют = Неопределено) Экспорт
	
	Если (НЕ Показатель.НеФинансовый) 
		И ЗначениеЗаполнено(ТекущаяВалюта) 
		И ЗначениеЗаполнено(ВалютаПересчета)
		И Показатель.ЧисловойПоказатель 
		И ТекущаяВалюта <> ВалютаПересчета Тогда
		
		ОбработкаПериодовРасчета = (НЕ мПоказатели.Колонки.Найти("ПериодРасчета")=Неопределено);
		
		Если Показатель.ВидКурса=Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе Тогда
			
			СтрКурсы=мПоказателиДляКурсовВалют.НайтиСтроки(Новый Структура("Показатель,Валюта",Показатель.Ссылка,ВалютаПересчета));
			
			Если СтрКурсы.Количество()=0 Тогда
				
				Возврат 0;
				
			КонецЕсли;
			
			ТекКратность=?(СтрКурсы[0].Кратность=0,1,СтрКурсы[0].Кратность);
			
			ПоказательКурса=мСоответствиеДляПоискаПоСсылке[СтрКурсы[0].ПоказательКурса];
			
			Если ПоказательКурса=Неопределено ИЛИ ПоказательКурса.Значение=0 Тогда
				
				Возврат 0;
				
			Иначе
				
				Возврат ЗначениеПоказателя*ТекКратность/ПоказательКурса.Значение;
				
			КонецЕсли;	
			
		Иначе
			
			Если УточнениеПересчетаВалют = Неопределено Тогда
				
				УточнениеПересчетаВалют = НСтр("ru = 'из валюты ""%ТекущаяВалюта%"" в валюту ""%ВалютаПересчета%""'");
				УточнениеПересчетаВалют = СтрЗаменить(УточнениеПересчетаВалют, "%ТекущаяВалюта%", Строка(ТекущаяВалюта));
				УточнениеПересчетаВалют = СтрЗаменить(УточнениеПересчетаВалют, "%ВалютаПересчета%", Строка(ВалютаПересчета));
			КонецЕсли;
			
			ШапкаОшибки = НСтр("ru = 'Не удалось пересчитать показатель с кодом ""%КодПоказателя%"" %УточнениеПересчетаВалют%:'");
			ШапкаОшибки = СтрЗаменить(ШапкаОшибки, "%КодПоказателя%", Строка(Показатель.Код));
			ШапкаОшибки = СтрЗаменить(ШапкаОшибки, "%УточнениеПересчетаВалют%", Строка(УточнениеПересчетаВалют));
			
			ТекЗначениеПоказателя = УправлениеРабочимиПроцессамиУХ
										.ПересчитатьПоКурсу(
												ЗначениеПоказателя
												, ТекущаяВалюта
												, ВалютаПересчета
												, Показатель.ВидКурса
												, Сценарий
												, ?(ОбработкаПериодовРасчета, ?(ЗначениеЗаполнено(Показатель.ПериодРасчета), Показатель.ПериодРасчета, ПериодОтчета),ПериодОтчета)
												, ПолучитьДатуИзКэша(Показатель)
												, ПризнакОшибки
												, ШапкаОшибки
												, КэшТаблицыКурсов
											);
			
			Возврат ?(ПризнакОшибки, 0, ТекЗначениеПоказателя);
			
		КонецЕсли;
		
	Иначе
		Возврат ЗначениеПоказателя;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет колонку отображения таблицы раскрытия.
//
Процедура ПересчитатьЗначенияОтображения(КолонкиПоказатели, ТаблицаРаскрытия, ВалютаОтображения) Экспорт
	
	ШапкаОшибки = "";
	
	Для Каждого Пок Из КолонкиПоказатели Цикл
		
		МассивЗначений = ТаблицаРаскрытия.ВыгрузитьКолонку(СокрЛП(Пок.Код));
		Для Инд = 0 По МассивЗначений.Количество() - 1 Цикл
			ПризнакОшибки = Ложь;
			Если Пок.ТипЗначения = ТипЗначенияЧисло Тогда
				Если ЗначениеЗаполнено(ОсновнаяВалюта) И ЗначениеЗаполнено(ВалютаОтображения) И ОсновнаяВалюта <> ВалютаОтображения И НЕ Пок.НеФинансовый Тогда
					МассивЗначений[Инд] = ПересчитатьЗначениеПоказателяПоКурсу(МассивЗначений[Инд]
					, Пок
					, ОсновнаяВалюта
					, ВалютаОтображения);
				КонецЕсли;
				
				Если НЕ Пок.НеМасштабируется Тогда
					МассивЗначений[Инд] = МассивЗначений[Инд] / ВернутьЗначениеДелителя();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаРаскрытия.ЗагрузитьКолонку(МассивЗначений, СокрЛП(Пок.Код));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьЗначениеДелителя() Экспорт
	
	Если ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Возврат 1000000;
	ИначеЕсли ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Возврат 1000;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция ЕстьИзмененияДополнительныхВалют()

	Возврат НЕ ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(
				ЭтотОбъект.ДополнительныеВалюты.Выгрузить(),
				Ссылка.ДополнительныеВалюты.Выгрузить());

КонецФункции

// Добавляет таблицу кеша текущего отчета записи из регистра сведений,отбирая их по заданному отбору.
//
Процедура ЗаполнитьКеш(СтруктураОтбора)
	
	СтрОтбора = Новый Структура("Сценарий, Организация, ПериодОтчета, Валюта, ВидОтчета,Проект");
	
	ЗаполнитьЗначенияСвойств(СтрОтбора, СтруктураОтбора);
	Если КешОтборов.НайтиСтроки(СтрОтбора).Количество() = 0 Тогда
		НовСтр = КешОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрОтбора);
	Иначе
		Возврат;
	КонецЕсли;
	
	ВидОтчетаПараметр=Справочники.ВидыОтчетов.НайтиПоКоду(СтруктураОтбора.ВидОтчета);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сценарий",	  	СтруктураОтбора.Сценарий);
	Запрос.УстановитьПараметр("Организация",  	СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Проект",  		СтруктураОтбора.Проект);
	Запрос.УстановитьПараметр("ПериодОтчета", 	СтруктураОтбора.ПериодОтчета);
	Запрос.УстановитьПараметр("Валюта",		  	СтруктураОтбора.Валюта);
	Запрос.УстановитьПараметр("ВидОтчетаПараметр", ВидОтчетаПараметр);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Регистратор,
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Организация = &Организация
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчетаПараметр";
	
	ТекТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ТекТаблицаРегистраторов.ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат;
	Иначе
		ТекущаяАктивность=ТекСписокВерсий[0].Значение.Активность;
	КонецЕсли;
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчетаПараметр);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	ПустыеАналитики = "";
	РаскрытияПоказателей = "";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрытияПоказателей = РаскрытияПоказателей + "
		|, ЗначенияПоказателейОтчетов.Аналитика" + Инд + " КАК Аналитика" + Инд;
	КонецЦикла;
	
	РаскрытияПоказателей = РаскрытияПоказателей + "
		|, ЗначенияПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта";
	
	Запрос.Текст = "
	|ВЫБРАТЬ ВнутреннийЗапрос.*, ВнутреннийЗапрос.Показатель.Код КАК КодПоказателя, ВнутреннийЗапрос.Показатель.Владелец.Код КАК КодОтчета";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	, ВнутреннийЗапрос.Показатель.ГруппаРаскрытия.ВидАналитики" + Инд + " КАК ВидАналитикиГруппыРаскрытия" + Инд + "
		|	, ВнутреннийЗапрос.Показатель.Владелец.ВидАналитики" + Инд + " КАК ВидАналитикиВидаОтчета" + Инд;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
		|	, ВнутреннийЗапрос.Показатель.ГруппаРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиГруппыРаскрытияВалюта";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|("+ТекстВложенногоЗапроса+") КАК ВнутреннийЗапрос";
	
	Запрос.УстановитьПараметр("Сценарий",		СтруктураОтбора.Сценарий);
	Запрос.УстановитьПараметр("Организация",	СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Проект",			СтруктураОтбора.Проект);
	Запрос.УстановитьПараметр("Период",			СтруктураОтбора.ПериодОтчета);
	Запрос.УстановитьПараметр("Валюта",			СтруктураОтбора.Валюта);
	Запрос.УстановитьПараметр("ВидОтчета",		ВидОтчетаПараметр);
	
	//Запрос.УстановитьПараметр("Регистраторы", ТекТаблицаРегистраторов.ВыгрузитьКолонку("Регистратор"));
	//Запрос.УстановитьПараметр("Тип1",			ТипЗначенияЧисло);
	//Запрос.УстановитьПараметр("Тип2",			Перечисления.ТипыЗначенийПоказателейОтчетов.Булево);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запись = Новый Структура;
	Пока Выборка.Следующий() Цикл
		Запись.Вставить("Показатель",	СокрЛП(Выборка.КодПоказателя));
		Запись.Вставить("ВидОтчета",	СокрЛП(Выборка.КодОтчета));
		Запись.Вставить("Активность",	ТекущаяАктивность);
		Запись.Вставить("Организация",	СтруктураОтбора.Организация);
		Запись.Вставить("Проект",		СтруктураОтбора.Проект);
		Запись.Вставить("ПериодОтчета",	СтруктураОтбора.ПериодОтчета);
		Запись.Вставить("Сценарий",		СтруктураОтбора.Сценарий);
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Запись.Вставить("Аналитика" + Инд,	Выборка["Аналитика" + Инд]);
		КонецЦикла;
		
		Запись.Вставить("АналитикаВалюта",Выборка["АналитикаВалюта"]);
		
		Запись.Вставить("Валюта",		СтруктураОтбора.Валюта);
		Если Кеш.НайтиСтроки(Запись).Количество() <> 0 Тогда
			Продолжить;
		Иначе
			НовСтр = Кеш.Добавить();
			НовСтр.Показатель					= СокрЛП(Выборка.КодПоказателя);
			НовСтр.ВидОтчета					= СокрЛП(Выборка.КодОтчета);
			НовСтр.Активность					= ТекущаяАктивность;
			НовСтр.Организация					= СтруктураОтбора.Организация;
			НовСтр.Проект						= СтруктураОтбора.Проект;
			НовСтр.ПериодОтчета					= СтруктураОтбора.ПериодОтчета;
			НовСтр.Сценарий						= СтруктураОтбора.Сценарий;
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				НовСтр["ВидАналитикиГруппыРаскрытия" + Инд]	= ?(Выборка["ВидАналитикиГруппыРаскрытия" + Инд] = Null, Неопределено, Выборка["ВидАналитикиГруппыРаскрытия" + Инд]);
				НовСтр["ВидАналитикиВидаОтчета" + Инд]		= ?(Выборка["ВидАналитикиВидаОтчета" + Инд] = NULL, Неопределено, Выборка["ВидАналитикиВидаОтчета" + Инд]);
				НовСтр["Аналитика" + Инд]					= ?(Выборка["Аналитика" + Инд] = NULL, Неопределено, Выборка["Аналитика" + Инд]);
			КонецЦикла;
			
			НовСтр["АналитикаВалюта"]= ?(Выборка["АналитикаВалюта"] = NULL, Справочники.Валюты.ПустаяСсылка(), Выборка["АналитикаВалюта"]);
			
			НовСтр.Валюта						= СтруктураОтбора.Валюта;
			НовСтр.Значение						= Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очищает кеш показателей.
//
Процедура ОчиститьКеш()
	
	Кеш.Очистить();
	КешОтборов.Очистить();
	
КонецПроцедуры

// Возвращает значение показателя НЕ ТЕКУЩЕГО отчета по заданным значениям измерений регистра ЗначенияПоказателейОтчетов.
// Значение извлекается из таблицы кеша текущего объекта.
// Для незаданных аналитик выполняется суммирование по всем непустым значениям.
//
Функция ПолучитьСвернутоеЗначениеИзКеша(СтруктураОтбора)
	
	Перем ЗначениеОтбораПоАналитике;
	
	ПустойВидАналитики = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
	СтруктураОтбора2 = Новый Структура;
	
	МассивАналитик = Новый Массив;
	
	// Обработаем отборы по аналитике.
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ИмяАналитики = "Аналитика" + Инд;
		Если СтруктураОтбора.Свойство(ИмяАналитики, ЗначениеОтбораПоАналитике) Тогда
			Если ЗначениеОтбораПоАналитике <> Неопределено  Тогда
				СтруктураОтбора2.Вставить(ИмяАналитики, ЗначениеОтбораПоАналитике);
			КонецЕсли;
			МассивАналитик.Добавить(ИмяАналитики);
		КонецЕсли;
	КонецЦикла;
	
	ИмяАналитики = "АналитикаВалюта";
	Если СтруктураОтбора.Свойство(ИмяАналитики, ЗначениеОтбораПоАналитике) Тогда
		Если ЗначениеОтбораПоАналитике <> Неопределено 
			И НЕ (ЗначениеОтбораПоАналитике = Справочники.Валюты.ПустаяСсылка()) Тогда
			СтруктураОтбора2.Вставить(ИмяАналитики, ЗначениеОтбораПоАналитике);
		КонецЕсли;
		МассивАналитик.Добавить(ИмяАналитики);
	КонецЕсли;
	
	// Добавим остальные отборы.
	Для Каждого Эл Из СтруктураОтбора Цикл
		Если МассивАналитик.Найти(Эл.Ключ) = Неопределено Тогда
			СтруктураОтбора2.Вставить(Эл.Ключ, Эл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиОтбора = Кеш.НайтиСтроки(СтруктураОтбора2);
	Если СтрокиОтбора.Количество() = 0 Тогда
		СтрОтбора = Новый Структура("Сценарий, Организация,Проект, ПериодОтчета, Валюта, ВидОтчета");
		ЗаполнитьЗначенияСвойств(СтрОтбора, СтруктураОтбора);
		Возврат ?(КешОтборов.НайтиСтроки(СтрОтбора).Количество() = 0, Неопределено, ЗначениеОтсутствует);
	Иначе
		СвернутоеЗначение = 0;
		Для Каждого Стр Из СтрокиОтбора Цикл
			СтрокаВходитВОтбор = Истина;
			
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если (Стр["ВидАналитикиВидаОтчета" + Инд] <> ПустойВидАналитики
					ИЛИ Стр["ВидАналитикиГруппыРаскрытия" + Инд] <> ПустойВидАналитики) 
					И (Стр["Аналитика" + Инд] = Неопределено) Тогда
					СтрокаВходитВОтбор = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Стр["ВидАналитикиГруппыРаскрытияВалюта"] <> ПустойВидАналитики 
				И Стр["АналитикаВалюта"] = Справочники.Валюты.ПустаяСсылка() Тогда
				СтрокаВходитВОтбор = Ложь;
				Прервать;
			КонецЕсли;
			
			Если  СтрокаВходитВОтбор Тогда
				СвернутоеЗначение = СвернутоеЗначение + Стр.Значение;
			КонецЕсли;
		КонецЦикла;
		Возврат СвернутоеЗначение;
	КонецЕсли;
	
КонецФункции

// Возвращает значение показателя НЕ ТЕКУЩЕГО отчета по заданным значениям измерений регистра ЗначенияПоказателейОтчетов.
// Значение извлекается из таблицы кеша текущего объекта.
//
Функция ПолучитьИзКеша(СтруктураОтбора)
	
	СтрокиОтбора = Кеш.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОтбора.Количество() = 0 Тогда
		СтрОтбора = Новый Структура("Сценарий, Организация,Проект, ПериодОтчета, Валюта, ВидОтчета");
		ЗаполнитьЗначенияСвойств(СтрОтбора, СтруктураОтбора);
		Возврат ?(КешОтборов.НайтиСтроки(СтрОтбора).Количество() = 0, Неопределено, ЗначениеОтсутствует);
	Иначе
		Возврат СтрокиОтбора[0].Значение;
	КонецЕсли;
	
КонецФункции

// Возвращает значение показателя НЕ ТЕКУЩЕГО отчета, свернутое по нефиксированным аналитикам.
// Сначала производится попытка получения значения из кеша. В случае отсутствуия требуемого значения
// в кеше, производится запрос к ИБ.
// 
Функция ПолучитьСвернутоеЗначениеСУчетомКеша(СтруктураОтбора)
	
	ЗначениеИзКеша = ПолучитьСвернутоеЗначениеИзКеша(СтруктураОтбора);
	Если ЗначениеИзКеша = ЗначениеОтсутствует Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеИзКеша <> Неопределено Тогда
		Возврат ЗначениеИзКеша;
	КонецЕсли;
	ЗаполнитьКеш(СтруктураОтбора);
	ЗначениеИзКеша = ПолучитьСвернутоеЗначениеИзКеша(СтруктураОтбора);
	Если ЗначениеИзКеша = ЗначениеОтсутствует Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗначениеИзКеша;
	КонецЕсли;
	
КонецФункции

// Возвращает значение показателя НЕ ТЕКУЩЕГО отчета.
// Сначала производится попытка получения значения из кеша. В случае отсутствуия требуемого значения
// в кеше, производится запрос к ИБ.
//
Функция ПолучитьСУчетомКеша(СтруктураОтбора)
		
	ЗначениеИзКеша = ПолучитьИзКеша(СтруктураОтбора);
	
	Если ЗначениеИзКеша = ЗначениеОтсутствует Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеИзКеша <> Неопределено Тогда
		Возврат ЗначениеИзКеша;
	КонецЕсли;
	ЗаполнитьКеш(СтруктураОтбора);
	ЗначениеИзКеша = ПолучитьИзКеша(СтруктураОтбора);
	Если ЗначениеИзКеша = ЗначениеОтсутствует Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗначениеИзКеша;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОММЕНТАРИЯМИ.
//

Процедура СформироватьСоответствиеКомментариев()
	
	Если ТипЗнч(СоответствиеХраненияКомментариев ) <> Тип("Соответствие") Тогда
		СоответствиеХраненияКомментариев = Новый Соответствие;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКомментарииВСоответствие() Экспорт
	
	СформироватьСоответствиеКомментариев();
	СоответствиеХраненияКомментариев.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Комментарии.Показатель КАК Показатель,
	|	Комментарии.Период,
	|	Комментарии.Автор,
	|	Комментарии.Версия,
	|	Комментарии.Комментарий,
	| Истина КАК СохраненнаяВерсия
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.ЭкземплярОтчета = &ЭкземплярОтчета
	|ИТОГИ ПО
	|	Показатель");
	Запрос.УстановитьПараметр("ЭкземплярОтчета", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Период");
	ТаблицаЗначений.Колонки.Добавить("Автор");
	ТаблицаЗначений.Колонки.Добавить("Версия");
	ТаблицаЗначений.Колонки.Добавить("Комментарий");
	ТаблицаЗначений.Колонки.Добавить("СохраненнаяВерсия");
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаЗначений.Очистить();
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			ВыборкаЗначений = Выборка.Выбрать();
			Пока ВыборкаЗначений.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), ВыборкаЗначений);
			КонецЦикла;
		КонецЕсли;
		
		СоответствиеХраненияКомментариев.Вставить(Выборка.Показатель);
		СоответствиеХраненияКомментариев[Выборка.Показатель] = ТаблицаЗначений.Скопировать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьКомментарийВСоответствие(Показатель, Комментарий) Экспорт
	
	ТекЗапись = СоответствиеХраненияКомментариев[Показатель];
	
	Если ТекЗапись = Неопределено Тогда
		
		ТекЗапись = Новый ТаблицаЗначений;
		ТекЗапись.Колонки.Добавить("Период");
		ТекЗапись.Колонки.Добавить("Автор");
		ТекЗапись.Колонки.Добавить("Версия");
		ТекЗапись.Колонки.Добавить("Комментарий");
		ТекЗапись.Колонки.Добавить("СохраненнаяВерсия");
		СоответствиеХраненияКомментариев.Вставить(Показатель, ТекЗапись);
		
	КонецЕсли;
	
	НоваяСтрока             = ТекЗапись.Добавить();
	НоваяСтрока.Период        = ТекущаяДата();
	НоваяСтрока.Автор       = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	НоваяСтрока.Комментарий = Комментарий;
	НоваяСтрока.СохраненнаяВерсия = Ложь;
	КомментарииИзменены = Истина;
	ЗаписатьКомментарииВРегистр(ТекущийЭлементОписаниеВерсии);
	Возврат ТекЗапись;
	
КонецФункции

Функция ПрочитатьКомментарийИзСоответствия(Показатель, ТЗ) Экспорт
	
	ТекТаблица = СоответствиеХраненияКомментариев[Показатель];
	ТЗ.Очистить();
	
	Если ТекТаблица = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ТЗ = ТекТаблица.Скопировать();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьКомментарииВРегистр(Версия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СоответствиеХраненияКомментариев) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДанных = РегистрыСведений.Комментарии.СоздатьНаборЗаписей();
	НаборДанных.Отбор.ЭкземплярОтчета.Значение      = Ссылка;
	НаборДанных.Отбор.ЭкземплярОтчета.Использование = Истина;
	
	НаборДанных.Прочитать();
	НаборДанных.Очистить();
	
	Для Каждого Элемент Из СоответствиеХраненияКомментариев Цикл
		
		НайденныеСтроки = Элемент.Значение.НайтиСтроки(Новый Структура("СохраненнаяВерсия", Ложь));
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = НаборДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Показатель       = Элемент.Ключ;
			НоваяСтрока.ЭкземплярОтчета  = Ссылка;
			НоваяСтрока.Версия           = Версия;
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		НаборДанных.Записать(Ложь);
	Исключение
		Возврат;
	КонецПопытки;
	
	КомментарииИзменены = Ложь;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.СохраненнаяВерсия = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьМассивКодовПоказателейИзСоответствия() Экспорт
	
	СформироватьСоответствиеКомментариев();
	МассивПоказателей = Новый Массив;
	Для Каждого Элемент Из СоответствиеХраненияКомментариев Цикл
		МассивПоказателей.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка В(&МассивПоказателей)
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	МассивКодов = Новый Массив;
	Выборка = ЗАпрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивКодов.Добавить(СокрЛП(Выборка.Код));
	КонецЦикла;
	
	Возврат МассивКодов;
	
КонецФункции

Функция СформироватьТекстКомментарияДляМакета(Показатель) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	
	Если ТипЗнч(СоответствиеХраненияКомментариев) <> Тип("Соответствие") Тогда
		
		ЗагрузитьКомментарииВСоответствие();
		
	КонецЕсли;
	
	ТекстКомментария = "";
	
	Если ПрочитатьКомментарийИзСоответствия(Показатель, ТЗ) Тогда
				
		Для Каждого Строка Из ТЗ Цикл
			
			Если ЗначениеЗаполнено(Строка.Версия) тогда
				СтрокаШаблона = Нстр("ru = 'Дата: %1. Автор: %2. Версия: %3.
				|%4
				|'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					СтрокаКомментария = СтрШаблон(СтрокаШаблона, Формат(Строка.Период, "ДФ=dd/MM/yy"), Строка.Автор, Строка.Версия, Строка.Комментарий);	
				КонецЕсли;
			Иначе
				СтрокаШаблона = Нстр("ru = 'Дата: %1. Автор: %2.
				|%3
				|'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					СтрокаКомментария = СтрШаблон(СтрокаШаблона, Формат(Строка.Период, "ДФ=dd/MM/yy"), Строка.Автор, Строка.Комментарий);	
				КонецЕсли;
			КонецЕсли;
			
			ТекстКомментария = ТекстКомментария + СтрокаКомментария;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстКомментария;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ДИНАМИЧЕСКИХ МОДУЛЕЙ ЗАПОЛНЕНИЯ И ВЫЧИСЛЕНИЯ - НАЧАЛО
//

// Функция возвращает аналогичный период года, смещенного относительно текущего года на Смещение.
//
// Параметры:
//	локПериодОтчета - исходный период;
//	Смещение - число, смещение относительно исходного периода. Знак определяет направление смещения.
//
// Результат:
//	СправочникСсылка.Периоды - период, смещенный от исходного на Смещение.
//
Функция АналогичныйПериод(Знач локПериодОтчета = Неопределено, Смещение = 0) Экспорт
	
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(локПериодОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно определить аналогичный период года (смещение = %Смещение%): исходный период не задан.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Смещение%", Строка(Смещение));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
	Если локПериодОтчета.Периодичность = Перечисления.Периодичность.Декада Тогда
		
		// анализируем
		ГодДатыНачала						= Год(локПериодОтчета.ДатаНачала);
		МесяцДатыНачала						= Месяц(локПериодОтчета.ДатаНачала);
		ДеньДатыНачала						= День(локПериодОтчета.ДатаНачала);
		ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
		ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
		НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
		
		// изменяем
		НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
		
		// синтезируем
		ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
		ДекадаВГоду							= НомерДекадыНЭ % 36;
		МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
		ДекадаВМесяце						= ДекадаВГоду % 3;
		ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
		
		ДатаНачалаОтносительногоПериода		= Дата(ГодДатыНачалаОтнПериода+Смещение, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
		
	Иначе
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 12 * Смещение);
	КонецЕсли;
	
	ДатаНачалаОтносительногоПериода = НачалоДня(ДатаНачалаОтносительногоПериода);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтносительногоПериода);
	Запрос.УстановитьПараметр("Периодичность", локПериодОтчета.Периодичность);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно определить аналогичный период (смещение = %Смещение%): не существует искомый период в справочнике ""Периоды"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Смещение%", Строка(Смещение));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат Справочники.Периоды.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Получить(0);
	КонецЕсли;
	
КонецФункции

// Очищает хранилище значения, создает пустую таблицу показателей, очищает таблицу раскрытия.
// Используется для внешней очистки документа.
Процедура ОчиститьВсеВнешнееОбращение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|		ВнутрПоказатели.Код,
	|		ВнутрПоказатели.Наименование,
	|		ВнутрПоказатели.Ссылка,
	|		ВнутрПоказатели.Колонка,						  
	|		ВнутрПоказатели.Строка,";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|		ВнутрПоказатели.ГруппаРаскрытия.ВидАналитики" + Инд + " КАК ВидАналитики" + Инд + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|		ВнутрПоказатели.ВидИтога,
	|		ВнутрПоказатели.НеФинансовый,
	|		ВнутрПоказатели.ЧисловойПоказатель,
	|		ВнутрПоказатели.СвязанныйПоказатель,
	|		ВнутрПоказатели.ВидКурса,
	|		ВнутрПоказатели.Строка.ПорядковыйНомер КАК ПорядковыйНомерСтроки,
	|		ВнутрПоказатели.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|		ВнутрПоказатели.Строка.Код КАК КодСтроки,
	|		ВнутрПоказатели.Колонка.Код КАК КодКолонки,
	|		ВнутрПоказатели.ТипЗначения,
	|		ВнутрПоказатели.ГруппаРаскрытия,
	|		ВнутрПоказатели.ГруппаРаскрытия.Код КАК КодГруппыРаскрытия
	|   ИЗ 
	|   	Справочник.ПоказателиОтчетов КАК ВнутрПоказатели
	|   ГДЕ
	|		ВнутрПоказатели.Владелец = &ВидОтчета
	|	И (НЕ ВнутрПоказатели.ПометкаУдаления)";
		
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	Запрос.УстановитьПараметр("ПустаяАналитика", Неопределено);
	Запрос.УстановитьПараметр("ТипЧисло", ТипЗначенияЧисло);
	Запрос.УстановитьПараметр("ПустойТип", Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипБулево", Перечисления.ТипыЗначенийПоказателейОтчетов.Булево);
	Запрос.УстановитьПараметр("ТипСтрока", Перечисления.ТипыЗначенийПоказателейОтчетов.Строка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	ТекРег = ?(ЗначениеЗаполнено(мКопируемыйДокумент), мКопируемыйДокумент, Ссылка);
	Запрос.УстановитьПараметр("ВалютаОтчета", ТекРег.ОсновнаяВалюта);
	Запрос.УстановитьПараметр("Регистратор", ТекРег);
	мПоказатели = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	// обрезаем коды
	мПоказатели.Колонки.Код.Имя = "Имя";
	мПоказатели.Колонки.Добавить("Код");
	мПоказатели.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	мПоказатели.Колонки.КодГруппыРаскрытия.Имя = "ИмяГруппыРаскрытия";
	мПоказатели.Колонки.Добавить("КодГруппыРаскрытия");
	мПоказатели.Колонки.Добавить("Значение",ОписаниеТиповРесурсаЗначение);
	
	мНеЧисловыеПоказатели   = Новый Массив;
	
	Для Каждого Стр Из мПоказатели Цикл
		
		Если Стр.ТипЗначения <> ТипЗначенияЧисло Тогда
			
			мНеЧисловыеПоказатели.Добавить(Стр.Ссылка);
			
		КонецЕсли;
		
		Стр.Код                = СокрЛП(Стр.Имя);
		Стр.КодГруппыРаскрытия = СокрЛП(Стр.ИмяГруппыРаскрытия);
		Стр.Значение           = ПустоеЗначениеПоТипу[Стр.ТипЗначения];
		Стр.Комментарий        = "";
		
	КонецЦикла;
	
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.Имя);
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.ИмяГруппыРаскрытия);
	
	мПоказатели.Колонки.Добавить("ДанныеРасчета");
	мПоказатели.Колонки.Добавить("СохраненныеДанныеАктуальны",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	мПоказатели.ЗаполнитьЗначения(Истина,"СохраненныеДанныеАктуальны");
	
	мПоказатели.Индексы.Добавить("Код");
	
	мПоказателиРаскрытия = Новый ТаблицаЗначений;
	мПоказателиРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	мПоказателиРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	мПоказателиРаскрытия.Колонки.Добавить("Значение");
	мПоказателиРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	мПоказателиРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
	мПоказателиРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	мПоказателиРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказателиРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		мПоказателиРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	КонецЦикла;
	
	ФайлИмпорта = Неопределено;
	ДатаИзменения = Неопределено;
	
	РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(ЭтотОбъект, Перечисления.СостоянияОтчетов.Запланирован);
	
	мВалютыЗаписей = Новый Массив;
	
	ИнициализироватьЛоги();
	
КонецПроцедуры

Функция ПолучитьПоследовательностьОбработки(Выражение, СимволыОперацийИСкобки)
	
	ПоследовательностьОбработки = Новый Массив;
	ИсходнаяДлинаВыражения = СтрДлина(Выражение);
	Для Инд = 1 По ИсходнаяДлинаВыражения Цикл
		ТекИнд = ИсходнаяДлинаВыражения - Инд + 1;
		ТекущийСимвол = Сред(Выражение, ТекИнд, 1);
		Если СимволыОперацийИСкобки.НайтиПоЗначению(ТекущийСимвол) <> Неопределено Тогда
			ДоСимволаОперации = Лев(Выражение, ТекИнд - 1);
			ПослеСимволаОперации = СокрЛП(Сред(Выражение, ТекИнд + 1));
			Если НЕ ПустаяСтрока(ПослеСимволаОперации) Тогда
				ПоследовательностьОбработки.Вставить(0, ПослеСимволаОперации);
			КонецЕсли;
			ПоследовательностьОбработки.Вставить(0, ТекущийСимвол);
			Выражение = ДоСимволаОперации;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Выражение) Тогда
		ПоследовательностьОбработки.Вставить(0, СокрЛП(Выражение));
	КонецЕсли;
	
	Возврат ПоследовательностьОбработки;
	
КонецФункции

Процедура УстановитьИтогиПоПоказателям(МассивПоказатели = Неопределено, ЗаписатьИзменениеВЛог = Истина) Экспорт
	ОбработатьПолностьюТаблицу = МассивПоказатели = Неопределено;
	
	Если НеПересчитыватьИтоги = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработатьПолностьюТаблицу Тогда
		МассивПоказатели = мПоказатели;
	КонецЕсли;
	
	// Заполним итоговые значения
	Для Каждого КодПоказатель ИЗ МассивПоказатели Цикл
		
		Если НЕ ОбработатьПолностьюТаблицу Тогда
			Если ТипЗнч(КодПоказатель) = Тип("Строка") Тогда
				
				ПоказательОтчета=мСоответствиеДляПоискаПоКоду[КодПоказатель];
				
			Иначе
				
				ПоказательОтчета=мСоответствиеДляПоискаПоСсылке[КодПоказатель];
				
			КонецЕсли;
			
			Если ПоказательОтчета=Неопределено ИЛИ ПоказательОтчета.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ПоказательОтчета = КодПоказатель;
		КонецЕсли;
		
		Если ПустаяСтрока(ПоказательОтчета.КодГруппыРаскрытия) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекТабПоказатели=мПоказателиРаскрытия.Скопировать(Новый Структура("Показатель",ПоказательОтчета.Ссылка));
			
		Если ТекТабПоказатели.Количество()=0 Тогда
			
			НоваяСтрока = ТекТабПоказатели.Добавить();
			НоваяСтрока.Значение = ПустоеЗначениеПоТипу[ПоказательОтчета.ТипЗначения];
			НоваяСтрока.Показатель = ПоказательОтчета.Ссылка;
			
		КонецЕсли;		
		
		Если ПоказательОтчета.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			
			Показатели[ПоказательОтчета.Код] = ПоказательОтчета.Значение;
			
		ИначеЕсли ПоказательОтчета.ВидИтога=Перечисления.ВидыИтоговПоказателя.ПустаяСсылка() Тогда
			
			Если ПоказательОтчета.ТипЗначения = ТипЗначенияЧисло Тогда
				
				СтруктураЗаписи=Новый Структура("Значение",ТекТабПоказатели.Итог("Значение"));
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,ПоказательОтчета,СтруктураЗаписи,Истина);
				
			Иначе
				МаксимальноеЗначение = Неопределено;
				Для Каждого Элемент Из ТекТабПоказатели Цикл
					Если НЕ ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
						МаксимальноеЗначение = Элемент.Значение;
					ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) И МаксимальноеЗначение < Элемент.Значение Тогда
						МаксимальноеЗначение = Элемент.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураЗаписи=Новый Структура("Значение",МаксимальноеЗначение);
				
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,ПоказательОтчета, СтруктураЗаписи,Истина);
				
			КонецЕсли;
			
			Показатели[ПоказательОтчета.Код]=ПоказательОтчета.Значение;
			
		Иначе
			
				СтруктураЗаписи=Новый Структура("Значение",ОбщегоНазначенияУХ.ТЗИтог(ТекТабПоказатели, , "Значение", ПоказательОтчета.ВидИтога,ПоказательОтчета.ТипЗначения));
				
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,ПоказательОтчета, 
																СтруктураЗаписи
																,Истина
																,ЗаписатьИзменениеВЛог);
				Показатели[ПоказательОтчета.Код]=ПоказательОтчета.Значение;	
			
		КонецЕсли;
		
		ПоказательОтчета.СохраненныеДанныеАктуальны = Ложь;
		ПоказательОтчета.ДанныеРасчета = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры // 

Функция ПолучитьПутьВычисления(КодПоказателя) Экспорт
	
	Если мТаблицаПересчета=Неопределено Тогда
		
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭтотОбъект,,Истина);
		
		Если НЕ ДанныеПараметрикиАктуальны Тогда
			
			Возврат Новый Массив;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрПоказатель=мТаблицаПересчета.Найти(КодПоказателя,"КодПоказателя");
	
	Если СтрПоказатель=Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат СтрПоказатель.МассивКодовПоказателей;
	КонецЕсли;
	
КонецФункции // ПолучитьПутьВычисления()

Процедура ПолучитьСписокРодителей(Строка,МассивКодовПоказателей);
	
	Если НЕ Строка.Родитель=Неопределено Тогда
		
		//		Если МассивКодовПоказателей.Найти(Строка.Родитель.КодПоказателя)=Неопределено Тогда 
		
		МассивКодовПоказателей.Добавить(Строка.Родитель.КодПоказателя);
		
		//		КонецЕсли;
		
		ПолучитьСписокРодителей(Строка.Родитель,МассивКодовПоказателей);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСписокРодителей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МОДУЛЯМИ ШАБЛОНА
//

// Запускает модуль вычисления отчета на исполнение.
// Возвращает Истина, если модуль исполнился без ошибок и Ложь в противном случае.
//
Функция ЗапуститьМодульВычисления(МассивКодовПоказателей = Неопределено) Экспорт
	
	ВычислениеВыполнено = Истина;
				
	ВыполнитьПроцедуруВычисления(ВычислениеВыполнено);
	
	Если ТипЗнч(МассивКодовПоказателей)=Тип("Массив") И МассивКодовПоказателей.Количество()=0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ВычислениеВыполнено Тогда
		ОбработатьПоПараметрическойНастройкеПриВычислении(МассивКодовПоказателей, ВычислениеВыполнено);		
		ВыполнитьПроцедуруПослеВычисления(ВычислениеВыполнено);
	КонецЕсли;
	
	Возврат ВычислениеВыполнено;
	
КонецФункции

Процедура ВыполнитьПроцедуруВычисления(ВычислениеВыполнено = Истина, ВычислениеВОсновнойВалюте = Истина)
	
	Перем ПоказателиВОсновнойВалюте;
	
	Если Не ПустаяСтрока(ПравилоОбработки.ПроцедураВычисления) Тогда
		
		// заполняем параметры
		СформироватьСтруктуруПараметров();
		
		Если Не ВычислениеВОсновнойВалюте Тогда			
			
			ПоказателиВОсновнойВалюте = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Показатели);			
			Показатели = ПоказателиВВалюте;
			
		КонецЕсли; 
		
		Попытка
			
			ТекстПроцедурыВычисления=?(АнализЧувствительности, СтрЗаменить(ПравилоОбработки.ПроцедураВычисления,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),ПравилоОбработки.ПроцедураВычисления);	
			Выполнить(ТекстПроцедурыВычисления);
			
			Если ВычислениеВОсновнойВалюте Тогда
				ПеренестиЗначенияИзПоказателиВмПоказатели(,,Истина);
				УправлениеОтчетамиУХ.ОбновитьСтруктуруПоказателей(ЭтотОбъект);
			Иначе
				ПоказателиВВалюте = Показатели;
			КонецЕсли; 
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Во время исполнения процедуры вычисления произошла следующая критическая ошибка:
			|%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			ВычислениеВыполнено=Ложь;
			
		КонецПопытки;
		
		Если Не ВычислениеВОсновнойВалюте Тогда			
			Показатели = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ПоказателиВОсновнойВалюте);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроцедуруПослеВычисления(ВычислениеВыполнено = Истина, ВычислениеВОсновнойВалюте = Истина)

	Перем ПоказателиВОсновнойВалюте;
	
	Если Не ПустаяСтрока(ПравилоОбработки.ПроцедураПослеВычисления) Тогда
		
		Если Не ВычислениеВОсновнойВалюте Тогда			
			
			ПоказателиВОсновнойВалюте = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Показатели);			
			Показатели = ПоказателиВВалюте;
			
		КонецЕсли; 
		
		Попытка
			
			ТекстПроцедурыПослеВычисления=?(АнализЧувствительности,СтрЗаменить(ПравилоОбработки.ПроцедураПослеВычисления,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),ПравилоОбработки.ПроцедураПослеВычисления);	
			Выполнить(ТекстПроцедурыПослеВычисления);
			
			Если ВычислениеВОсновнойВалюте Тогда
				ПеренестиЗначенияИзПоказателиВмПоказатели(, , Истина);
				УправлениеОтчетамиУХ.ОбновитьСтруктуруПоказателей(ЭтотОбъект);
			Иначе
				ПоказателиВВалюте = Показатели;
			КонецЕсли; 
						
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Во время исполнения процедуры вычисления произошла следующая критическая ошибка:
			|%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			ВычислениеВыполнено = Ложь;
			
		КонецПопытки;
		
		Если Не ВычислениеВОсновнойВалюте Тогда			
			Показатели = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ПоказателиВОсновнойВалюте);
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьПоПараметрическойНастройкеПриВычислении(МассивКодовПоказателей = Неопределено, ВычислениеВыполнено = Истина) Экспорт

	АнализПроизводительностиВычисления=АнализПроизводительности И (Не ДополнительныеСвойства.Свойство("ТаблицаПроизводительности"));
	
	Если АнализПроизводительностиВычисления Тогда
		ДобавитьТаблицуПроизводительности()
	КонецЕсли;
	
	Если МассивКодовПоказателей=Неопределено И (НЕ ПоказателиДляЗаполнения=Неопределено) Тогда
		
		Для Каждого Показатель ИЗ ПоказателиДляЗаполнения Цикл
			
			МассивКодовПоказателей=ПолучитьПутьВычисления(СокрЛП(Показатель.Код));
			УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ЭтотОбъект,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,МассивКодовПоказателей);
			
		КонецЦикла;
		
	Иначе
		
		УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ЭтотОбъект,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,МассивКодовПоказателей);
		
	КонецЕсли;	
	
	Если ТипЗнч(мПоказателиОбязательныеКПересчету)=Тип("Массив") И мПоказателиОбязательныеКПересчету.Количество()>0 Тогда	
		УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ЭтотОбъект,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,мПоказателиОбязательныеКПересчету);
	КонецЕсли;
	
	Если АнализПроизводительностиВычисления Тогда
		ОбработатьТаблицуПроизводительности()
	КонецЕсли;

КонецПроцедуры

Функция ЗапуститьВнешнююПроцедуру(ТекстПроцедуры) Экспорт
	
	ВычислениеВыполнено = Истина;	
	
	Попытка
		
		Выполнить(ТекстПроцедуры);
		ПеренестиЗначенияИзПоказателиВмПоказатели();
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время исполнения внешней процедуры произошла следующая критическая ошибка:
		|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		ВычислениеВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ВычислениеВыполнено;
	
КонецФункции // ЗапуститьВнешнююПроцедуру()

// Выполняет процедуру заполнения ПроцедураЗаполненияВход. Возвращает успешность выполнения.
Функция ВыполнитьПроцедуруЗаполнения(ПроцедураЗаполненияВход)
	РезультатФункции = Истина;
	Если НЕ ПустаяСтрока(ПроцедураЗаполненияВход) Тогда
		
		// Получение текста процедуры заполнения. 
		ТекстПроцедурыЗаполнения = "";
		Если АнализЧувствительности Тогда
			// Для Анализа чувствительности заменим значения показателей отчетов на значения показателей моделирования.
			ТекстПроцедурыЗаполнения = СтрЗаменить(ПроцедураЗаполненияВход, "РегистрСведений.ЗначенияПоказателейОтчетов", "РегистрСведений.ЗначенияПоказателейМоделирование");
		Иначе
			ТекстПроцедурыЗаполнения = ПроцедураЗаполненияВход;
		КонецЕсли;
		
		// Исполнение процедуры заполнения.
		Попытка
			Выполнить(ТекстПроцедурыЗаполнения);
			ПеренестиЗначенияИзПоказателиВмПоказатели(, Ложь);
			ОчиститьКеш();	
		Исключение
			ТекстПредупреждения = НСтр("ru = 'Во время исполнения процедуры заполнения произошла следующая критическая ошибка: %ОписаниеОшибки%'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ноПредупреждение(ТекстПредупреждения, СтатусСообщения.Важное);
			ОчиститьКеш();
			РезультатФункции = Ложь;
		КонецПопытки;
		
	Иначе
		РезультатФункции = Истина;				// Текст функции пустой. Ошибок не возникло.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Заполняет отчет по правилу заполнения. Возвращает успешность выполнения.
Функция ЗаполнитьПоПараметрическойНастройке() Экспорт
	// Инициализация.
	ОчиститьКеш();
	ЗаполнениеВыполнено = Истина;
	
	// Вызов процедуры заполнения.
	РезультатПроцедураЗаполнения = ВыполнитьПроцедуруЗаполнения(ПравилоОбработки.ПроцедураЗаполнения);
	Если НЕ РезультатПроцедураЗаполнения Тогда
		ЗаполнениеВыполнено = Ложь;
	Иначе
		// Процедура заполнения ошибок не вызвала, не изменяем флаг заполнения.
	КонецЕсли;
	
	// Заполнение показателей по параметрической настройке.
	Если ЗаполнениеВыполнено Тогда
		// Непосредственная обработка показателей.
		СпособОбработкиЗаполнение = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
		УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ЭтотОбъект, СпособОбработкиЗаполнение);
		
		// Обработка ошибок и завершение заполнения.
		Если (ТаблицаВыявленныхОшибок.Количество() > 0) И (мРасширеннаяДиагностикаВключена) Тогда
			ВывестиОтчетОбОшибках();
		КонецЕсли;
		ЗаполнениеВыполнено = НЕ ФлагОшибкиИмпорта;
		СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
	Иначе
		// При исполнении процедуры заполнения возникли ошибки. Не запускаем заполнение показателей.
	КонецЕсли;
	
	Возврат ЗаполнениеВыполнено;
КонецФункции

// В зависимости от значения параметра Режим вызывает соответствующую функцию заполнения
// или запускает на исполнение модуль заполнения отчета.
// Возвращает Истина, если заполнение прошло без ошибок и Ложь в противном случае.
//
// Параметры:
//	Режим - ПеречислениеСсылка.СпособыФормированияОтчетов.
//
Функция ЗапуститьМодульЗаполнения(Режим) Экспорт
	
	ТихийРежим = Истина;
	
	мСпособЗаполнения = Режим;
	Если Режим = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение Тогда
		Возврат Истина;
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду Тогда
		ЗаполнениеВыполнено = ПроцедураЗаполненияПоПериодам();
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам Тогда
		ЗаполнениеВыполнено = ПроцедураЗаполненияПоАналитикамОтчетов();
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПроектам Тогда
		ЗаполнениеВыполнено = ПроцедураЗаполненияПоПроектам();
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоОрганизациямПроекта Тогда
		ЗаполнениеВыполнено = ПроцедураЗаполненияПоОрганизациямПроекта();
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация Тогда
		ЗаполнениеВыполнено = ПроцедураЗаполненияДляКонсолидирующихОрганизаций();
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.Импорт И ЗначениеЗаполнено(ИспользуемаяИБ) И ИспользуемаяИБ.ТипБД.Предопределенный Тогда
		ЗаполнениеВыполнено = ИмпортироватьДанные(ФайлИмпорта, ДатаИзменения,ИмяЛиста) = 1;
	ИначеЕсли Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиЭлиминация Тогда
		ЗаполнениеВыполнено=ПересчетПоказателейУХ.ВыполнитьПростуюЭлиминацию(ЭтотОбъект);
	Иначе
		// В остальных случаях - параметрическая обработка.
		ЗаполнениеВыполнено = ЗаполнитьПоПараметрическойНастройке();
	КонецЕсли;
	
	Возврат ЗаполнениеВыполнено;
	
КонецФункции

Процедура ВывестиОтчетОбОшибках()
	
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетОтчетаОбОшибках");
	
	ОбластьШапки=Макет.ПолучитьОбласть("ОбластьШапки");
	ОбластьШапки.Параметры.ЭкземплярОтчета=ОбщегоНазначенияУХ.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление());
	ТабДок.Вывести(ОбластьШапки);
	
	ОбластьСтрокиОшибки=Макет.ПолучитьОбласть("СтрокаОшибки");
	ОбластьШапкиОперандов=Макет.ПолучитьОбласть("ШапкаОперанды");
	ОбластьСтрокиОперанда=Макет.ПолучитьОбласть("СтрокаОперанда");
	ОбластьСтрокиПроцедуры=Макет.ПолучитьОбласть("СтрокаПроцедуры");
	
	Для Каждого СтрОшибка ИЗ ТаблицаВыявленныхОшибок Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрокиОшибки.Параметры,СтрОшибка);
		ТабДок.Вывести(ОбластьСтрокиОшибки);
		
		Если ЗначениеЗаполнено(СтрОшибка.Процедура) ИЛИ ЗначениеЗаполнено(СтрОшибка.ДанныеРасчета) Тогда
			
			ТабДок.НачатьГруппуСтрок(,Ложь);
			
			Если ЗначениеЗаполнено(СтрОшибка.Процедура) Тогда
				
				ОбластьСтрокиПроцедуры.Параметры.ТекстПроцедуры=СтрОшибка.Процедура;
				ТабДок.Вывести(ОбластьСтрокиПроцедуры);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрОшибка.ДанныеРасчета) Тогда
				
				ТабДок.Вывести(ОбластьШапкиОперандов);
				
				Для Каждого КлючИЗначение ИЗ СтрОшибка.ДанныеРасчета Цикл
					
					ОбластьСтрокиОперанда.Параметры.Операнд=КлючИЗначение.Ключ;
					ОбластьСтрокиОперанда.Параметры.ЗначениеОперанда=КлючИЗначение.Значение;
					
					ТабДок.Вывести(ОбластьСтрокиОперанда);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТабДок.ЗакончитьГруппуСтрок();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДок.Защита=Истина;
	
	СтрокаШаблона = Нстр("ru = 'Ошибки заполнения: %1'");
	
	ЗаголовокДокумента = "";
	Если Не ПустаяСтрока(СтрокаШаблона) тогда		
		ЗаголовокДокумента = СтрШаблон(СтрокаШаблона, ОбщегоНазначенияУХ.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление()));
	КонецЕсли;
	
	ТабДок.Показать(ЗаголовокДокумента);
	
КонецПроцедуры // ВывестиОтчетОбОшибках() 


Процедура УстановитьЗначениеПараметраОтчета(КодПараметра, Значение) Экспорт
	
	СтрокаПараметра = ПараметрыОтчета.Найти(КодПараметра, "Код");
	
	Если НЕ СтрокаПараметра = Неопределено Тогда
		СтрокаПараметра.Значение = Значение;
	КонецЕсли;
	
	Параметры[КодПараметра] = Значение;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АВТОМАТИЧЕСКОГО ЗАПОЛНЕНИЯ ОТЧЕТОВ
//

// Вычисляет значения показателей отчета на основе показателей аналогичных отчетов с
// равными текущим значениями базовых реквизитов, по организациям из состава периметра
// консолидации.
// 
Функция ПроцедураЗаполненияДляКонсолидирующихОрганизаций()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ноПредупреждение(НСтр("ru = 'Не указана организационная единица. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ПериодОтчета) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаНачала) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания)) Тогда
		
		ноПредупреждение(НСтр("ru = 'Неверно задан период. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ноПредупреждение(НСтр("ru = 'Не задан сценарий. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мТабРасшифровкиПоказателей) = Тип("ТаблицаЗначений") Тогда
		мТабРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	ПолучитьРасшифровкуКонсолидированныхПоказателей();
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация;
	Возврат Истина;
	
КонецФункции

// Вычисляет значения показателей отчета на основе показателей аналогичных отчетов с
// равными текущим значениями базовых реквизитов, с периодами, подчиненными периоду текущего отчета.
// 
Функция ПроцедураЗаполненияПоПериодам() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ноПредупреждение(НСтр("ru = 'Не указана организационная единица. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ПериодОтчета) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаНачала) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания)) Тогда
		ноПредупреждение(НСтр("ru = 'Неверно задан период. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ноПредупреждение(НСтр("ru = 'Не задан сценарий. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии=Новый Запрос;
	ЗапросВерсии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация = &Организация
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ПериодОтчета <> &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ДатаНачала
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ДатаОкончания
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &Периодичность";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
		ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ?(ЗначениеЗаполнено(ЗначениеАналитика), ЗначениеАналитика, Неопределено));
		
	КонецЦикла;
	
	ЗапросВерсии.УстановитьПараметр("Организация", Организация); // по организации отчета
	ЗапросВерсии.УстановитьПараметр("Проект", Проект); // по проекту отчета
	ЗапросВерсии.УстановитьПараметр("ПериодОтчета", ПериодОтчета); // период подчинен и не равен текущему
	ЗапросВерсии.УстановитьПараметр("ДатаНачала", ПериодОтчета.ДатаНачала);
	ЗапросВерсии.УстановитьПараметр("ДатаОкончания", ПериодОтчета.ДатаОкончания);
	ЗапросВерсии.УстановитьПараметр("Сценарий", Сценарий); // по сценарию отчета
	ЗапросВерсии.УстановитьПараметр("Валюта", ОсновнаяВалюта); // по основной валюте отчета
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", ВидОтчета); // только для текущего вида отчета
	ЗапросВерсии.УстановитьПараметр("Периодичность", ПериодичностьСвертывания); // по выбранной периодичности
	
	ТекСписокВерсий=Новый СписокЗначений;
	
	ЭкземплярыИсточники.Очистить();
	
	Результат=ЗапросВерсии.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекСписокВерсий.Добавить(Результат.Ссылка);
		
		Если ЭкземплярыИсточники.Найти(Результат.ЭкземплярОтчета,"ЭкземплярОтчета")=Неопределено Тогда
			
			НоваяСтрока=ЭкземплярыИсточники.Добавить();
			НоваяСтрока.ЭкземплярОтчета=Результат.ЭкземплярОтчета;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.НеСуммируется = &НеСуммируется",Новый Структура("НеСуммируется",Ложь));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;	
	
	/////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение,";
	Для Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
		|	ЗначенияПоказателейОтчетов.АналитикаВалюта,";
	
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
	|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	Запрос.Текст = Запрос.Текст + " 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	| 	ЗначенияПоказателейОтчетов.ИтоговоеЗначение,
	| 	ЗначенияПоказателейОтчетов.АналитикаВалюта";
	
	Для Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + " 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта";
	
	Для Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Показатель") Цикл
		КодПоказателя = СокрЛП(Выборка.КодПоказателя);
		Пока Выборка.СледующийПоЗначениюПоля("ИтоговоеЗначение") Цикл
			Если Выборка.ИтоговоеЗначение Тогда
				Если Показатели.Свойство(КодПоказателя) Тогда
					Показатели.Вставить(КодПоказателя, Выборка.Значение);
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Выборка.Показатель,Выборка.Значение);
				КонецЕсли;
			Иначе
				ОписаниеПоказателя = мСоответствиеДляПоискаПоСсылке[Выборка.Показатель];
				СтруктураОтбора    = Новый Структура("Показатель", Выборка.Показатель);
				Пока Выборка.Следующий() Цикл
					Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
						Если ЗначениеЗаполнено(ОписаниеПоказателя["ВидАналитики" + Инд]) Тогда
							ИмяАналитики = "Аналитика" + Инд;
							СтруктураОтбора.Вставить(ИмяАналитики, Выборка[ИмяАналитики]);
						КонецЕсли;
					КонецЦикла;
					
					Если ОписаниеПоказателя.Валютный Тогда
						
						СтруктураОтбора.Вставить("АналитикаВалюта", Выборка["АналитикаВалюта"]);
						
					КонецЕсли;

					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Новый Структура("Значение,ЗначениеВалюта",Выборка.Значение,Выборка.ЗначениеВалюта), СтруктураОтбора,,Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду;
	
	Возврат Истина;
	
КонецФункции

// Вычисляет значения показателей отчета на основе показателей аналогичных отчетов с
// равными текущим значениями базовых реквизитов, но с заполненными значениями
// аналитик на уровне отчета.
// 
Функция ПроцедураЗаполненияПоАналитикамОтчетов() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ноПредупреждение(НСтр("ru = 'Не указана организационная единица. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ПериодОтчета) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаНачала) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания)) Тогда
		ноПредупреждение(НСтр("ru = 'Неверно задан период. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ноПредупреждение(НСтр("ru = 'Не задан сценарий. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	| ВерсииЗначенийПоказателей.Регистратор <> &Регистратор
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &парамВидОтчета
	|	И ВерсииЗначенийПоказателей.Организация = &парамОрганизация
	|	И ВерсииЗначенийПоказателей.Проект = &парамПроект
	|	И ВерсииЗначенийПоказателей.Сценарий = &парамСценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &парамПериодОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &парамВалюта";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		
		Если ЗначениеЗаполнено(ЗначениеАналитика) Тогда
			
			ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
			|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
			ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ?(ЗначениеЗаполнено(ЗначениеАналитика), ЗначениеАналитика, Неопределено));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросВерсии.УстановитьПараметр("парамОрганизация", Организация);
	ЗапросВерсии.УстановитьПараметр("парамПроект", Проект);
	ЗапросВерсии.УстановитьПараметр("парамСценарий", Сценарий);
	ЗапросВерсии.УстановитьПараметр("парамПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("парамВалюта", ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("парамВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекСписокВерсий=Новый СписокЗначений;
	
	ЭкземплярыИсточники.Очистить();
	
	Результат=ЗапросВерсии.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекСписокВерсий.Добавить(Результат.Ссылка);
		
		Если ЭкземплярыИсточники.Найти(Результат.ЭкземплярОтчета,"ЭкземплярОтчета")=Неопределено Тогда
			
			НоваяСтрока=ЭкземплярыИсточники.Добавить();
			НоваяСтрока.ЭкземплярОтчета=Результат.ЭкземплярОтчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.НеСуммируется = &НеСуммируется",Новый Структура("НеСуммируется",Ложь));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;	
	
	/////////////////////////////////////////////////////////////////////////////////////
	
	// получение сумм значений показателей по различным значениям аналитик
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение,";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
	|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	Если МаксАналитикОтчета>0 Тогда
		
		ТекстАналитики="";
		
		Для Инд = 1 По МаксАналитикОтчета Цикл
			
			СтрокаАналитика = "Аналитика" + Инд;
			ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
			
			СтрокаАналитика = "Аналитика" + Инд;
			
			Если НЕ ЗначениеЗаполнено(ЗначениеАналитика) Тогда
				ТекстАналитики= ТекстАналитики + " И ЗначенияПоказателейОтчетов." + СтрокаАналитика + " <> &" + СтрокаАналитика;
				Запрос.УстановитьПараметр(СтрокаАналитика, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|"+Сред(ТекстАналитики,3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВЫборка.СледующийПоЗначениюПоля("Показатель") Цикл
		КодПоказателя = СокрЛП(Выборка.КодПоказателя);
		ОписаниеПоказателя = мСоответствиеДляПоискаПоСсылке[Выборка.Показатель];
		
		Пока Выборка.СледующийПоЗначениюПоля("ИтоговоеЗначение") Цикл
			Если Выборка.ИтоговоеЗначение Тогда
				Показатели.Вставить(КодПоказателя, Выборка.Значение);
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Выборка.Показатель,Выборка.Значение);
			Иначе
				СтруктураОтбора = Новый Структура("Показатель", Выборка.Показатель);
				Пока Выборка.Следующий() Цикл
					Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
						Если ЗначениеЗаполнено(ОписаниеПоказателя["ВидАналитики" + Инд]) Тогда
							ИмяАналитики = "Аналитика" + Инд;
							СтруктураОтбора.Вставить(ИмяАналитики, Выборка[ИмяАналитики]);
						КонецЕсли;
					КонецЦикла;
					
					Если ОписаниеПоказателя.Валютный Тогда
						
						СтруктураОтбора.Вставить("АналитикаВалюта",Выборка.Валюта);
						
					КонецЕсли;
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Новый Структура("Значение,ЗначениеВалюта",Выборка.Значение,Выборка.ЗначениеВалюта), СтруктураОтбора,,Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам;
	
	Если ТипЗнч(мТабРасшифровкиПоказателей) = Тип("ТаблицаЗначений") Тогда
		мТабРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроцедураЗаполненияПоПроектам() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ноПредупреждение(НСтр("ru = 'Не указана организационная единица. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ПериодОтчета) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаНачала) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания)) Тогда
		ноПредупреждение(НСтр("ru = 'Неверно задан период. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ноПредупреждение(НСтр("ru = 'Не задан сценарий. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	| ВерсииЗначенийПоказателей.Регистратор <> &Регистратор
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &парамВидОтчета
	|	И ВерсииЗначенийПоказателей.Организация = &парамОрганизация
	|	И ВерсииЗначенийПоказателей.Сценарий = &парамСценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &парамПериодОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &парамВалюта";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		
		Если ЗначениеЗаполнено(ЗначениеАналитика) Тогда
			
			ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
			|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
			ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ЗначениеАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Проект В ИЕРАРХИИ (&Проект)";
		ЗапросВерсии.УстановитьПараметр("Проект", Проект);
		
	КонецЕсли;
	
	ЗапросВерсии.УстановитьПараметр("парамОрганизация", Организация);
	ЗапросВерсии.УстановитьПараметр("парамСценарий", Сценарий);
	ЗапросВерсии.УстановитьПараметр("парамПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("парамВалюта", ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("парамВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Регистратор", Ссылка);
	
	ЭкземплярыИсточники.Очистить();
	ТекСписокВерсий=Новый СписокЗначений;
	
	Результат=ЗапросВерсии.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекСписокВерсий.Добавить(Результат.Ссылка);
		
		Если ЭкземплярыИсточники.Найти(Результат.ЭкземплярОтчета,"ЭкземплярОтчета")=Неопределено Тогда
			
			НоваяСтрока=ЭкземплярыИсточники.Добавить();
			НоваяСтрока.ЭкземплярОтчета=Результат.ЭкземплярОтчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.НеСуммируется = &НеСуммируется",Новый Структура("НеСуммируется",Ложь));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;	
	
	/////////////////////////////////////////////////////////////////////////////////////
	
	// получение сумм значений показателей по различным значениям аналитик
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение,";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
	|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	Если МаксАналитикОтчета>0 Тогда
		
		ТекстАналитики="";
		
		Для Инд = 1 По МаксАналитикОтчета Цикл
			
			СтрокаАналитика = "Аналитика" + Инд;
			ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
			
			СтрокаАналитика = "Аналитика" + Инд;
			
			Если НЕ ЗначениеЗаполнено(ЗначениеАналитика) Тогда
				ТекстАналитики= ТекстАналитики + " И ЗначенияПоказателейОтчетов." + СтрокаАналитика + " <> &" + СтрокаАналитика;
				Запрос.УстановитьПараметр(СтрокаАналитика,  Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|"+Сред(ТекстАналитики,3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВЫборка.СледующийПоЗначениюПоля("Показатель") Цикл
		КодПоказателя = СокрЛП(Выборка.КодПоказателя);
		ОписаниеПоказателя = мСоответствиеДляПоискаПоСсылке[Выборка.Показатель];
		
		Пока Выборка.СледующийПоЗначениюПоля("ИтоговоеЗначение") Цикл
			Если Выборка.ИтоговоеЗначение Тогда
				Показатели.Вставить(КодПоказателя, Выборка.Значение);
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Выборка.Показатель,Выборка.Значение);
			Иначе
				СтруктураОтбора = Новый Структура("Показатель", Выборка.Показатель);
				Пока Выборка.Следующий() Цикл
					Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
						Если ЗначениеЗаполнено(ОписаниеПоказателя["ВидАналитики" + Инд]) Тогда
							ИмяАналитики = "Аналитика" + Инд;
							СтруктураОтбора.Вставить(ИмяАналитики, Выборка[ИмяАналитики]);
						КонецЕсли;
					КонецЦикла;
					
					Если ОписаниеПоказателя.Валютный Тогда
						
						СтруктураОтбора.Вставить("АналитикаВалюта",Выборка.Валюта);
						
					КонецЕсли;
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Новый Структура("Значение,ЗначениеВалюта",Выборка.Значение,Выборка.ЗначениеВалюта), СтруктураОтбора,,Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПроектам;
	
	Если ТипЗнч(мТабРасшифровкиПоказателей) = Тип("ТаблицаЗначений") Тогда
		мТабРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции // ПроцедураЗаполненияПоПроектам()

Функция ПроцедураЗаполненияПоОрганизациямПроекта() Экспорт
	
	Организация="";
	
	Если НЕ (ЗначениеЗаполнено(ПериодОтчета) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаНачала) 
		И ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания)) Тогда
		ноПредупреждение(НСтр("ru = 'Неверно задан период. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ноПредупреждение(НСтр("ru = 'Не задан сценарий. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		ноПредупреждение(НСтр("ru = 'Не задан проект. Заполнение прервано.'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	| ВерсииЗначенийПоказателей.Регистратор <> &Регистратор
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &парамВидОтчета
	|	И ВерсииЗначенийПоказателей.Проект В Иерархии(&парамПроект)
	|	И ВерсииЗначенийПоказателей.Сценарий = &парамСценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &парамПериодОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &парамВалюта";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		
		Если ЗначениеЗаполнено(ЗначениеАналитика) Тогда
			
			ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
			|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
			ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ЗначениеАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Проект В ИЕРАРХИИ (&Проект)";
		ЗапросВерсии.УстановитьПараметр("Проект", Проект);
		
	КонецЕсли;
	
	ЗапросВерсии.УстановитьПараметр("парамПроект", Проект);
	ЗапросВерсии.УстановитьПараметр("парамСценарий", Сценарий);
	ЗапросВерсии.УстановитьПараметр("парамПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("парамВалюта", ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("парамВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Регистратор", Ссылка);
	
	ЭкземплярыИсточники.Очистить();
	ТекСписокВерсий=Новый СписокЗначений;
	
	Результат=ЗапросВерсии.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекСписокВерсий.Добавить(Результат.Ссылка);
		
		Если ЭкземплярыИсточники.Найти(Результат.ЭкземплярОтчета,"ЭкземплярОтчета")=Неопределено Тогда
			
			НоваяСтрока=ЭкземплярыИсточники.Добавить();
			НоваяСтрока.ЭкземплярОтчета=Результат.ЭкземплярОтчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.НеСуммируется = &НеСуммируется",Новый Структура("НеСуммируется",Ложь));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;	
	
	/////////////////////////////////////////////////////////////////////////////////////
	
	// получение сумм значений показателей по различным значениям аналитик
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение,";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
	|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	Если МаксАналитикОтчета>0 Тогда
		
		ТекстАналитики="";
		
		Для Инд = 1 По МаксАналитикОтчета Цикл
			
			СтрокаАналитика = "Аналитика" + Инд;
			ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
			
			СтрокаАналитика = "Аналитика" + Инд;
			
			Если НЕ ЗначениеЗаполнено(ЗначениеАналитика) Тогда
				ТекстАналитики= ТекстАналитики + " И ЗначенияПоказателейОтчетов." + СтрокаАналитика + " <> &" + СтрокаАналитика;
				Запрос.УстановитьПараметр(СтрокаАналитика, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|"+Сред(ТекстАналитики,3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта";
	Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВЫборка.СледующийПоЗначениюПоля("Показатель") Цикл
		КодПоказателя = СокрЛП(Выборка.КодПоказателя);
		ОписаниеПоказателя = мСоответствиеДляПоискаПоСсылке[Выборка.Показатель];
		
		Пока Выборка.СледующийПоЗначениюПоля("ИтоговоеЗначение") Цикл
			Если Выборка.ИтоговоеЗначение Тогда
				Показатели.Вставить(КодПоказателя, Выборка.Значение);
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Выборка.Показатель,Выборка.Значение);
			Иначе
				СтруктураОтбора = Новый Структура("Показатель", Выборка.Показатель);
				Пока Выборка.Следующий() Цикл
					Для Инд = МаксАналитикОтчета + 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
						Если ЗначениеЗаполнено(ОписаниеПоказателя["ВидАналитики" + Инд]) Тогда
							ИмяАналитики = "Аналитика" + Инд;
							СтруктураОтбора.Вставить(ИмяАналитики, Выборка[ИмяАналитики]);
						КонецЕсли;
					КонецЦикла;
					
					Если ОписаниеПоказателя.Валютный Тогда
						
						СтруктураОтбора.Вставить("АналитикаВалюта",Выборка.Валюта);
						
					КонецЕсли;
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Новый Структура("Значение,ЗначениеВалюта",Выборка.Значение,Выборка.ЗначениеВалюта), СтруктураОтбора,,Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоОрганизациямПроекта;
	
	Если ТипЗнч(мТабРасшифровкиПоказателей) = Тип("ТаблицаЗначений") Тогда
		мТабРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции // ПроцедураЗаполненияПоПроектам()

// Возвращает периметр организаций (массив) по заданным значениям сценария, периода и организации.
//
Функция ПолучитьПериметрОрганизаций(Знач локСценарий = Неопределено, Знач локПериод = Неопределено, 
									Знач локОрганизация = Неопределено, ВладелецПериметра = Неопределено) Экспорт
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьПериметрКонтролируемыхОрганизаций(
												ЭтотОбъект,
												?(локСценарий = Неопределено, Сценарий, локСценарий),
												?(локПериод = Неопределено, ПериодОтчета, локПериод), 
												?(локОрганизация = Неопределено, Организация, локОрганизация),
												ВладелецПериметра);
	
КонецФункции

// Функция заполняет возвращает таблицу значений раскрытия показателя, свернутого по периодам.
//
Функция ПолучитьРасшифровкуСверткиПоПериодам(МассивПоказателей, ОтборПоАналитикам = Неопределено) Экспорт
	
	// Часть запроса, ответственная за получение значения показателей исходных отчетов с учетом версий, но без учета корректировок.
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация = &Организация
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.ПериодОтчета <> &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ДатаНачала
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ДатаОкончания
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &Периодичность
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
		ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ?(ЗначениеЗаполнено(ЗначениеАналитика), ЗначениеАналитика, Неопределено));
		
	КонецЦикла;
	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Сценарий"	, Сценарий);
	ЗапросВерсии.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("ДатаНачала", ПериодОтчета.ДатаНачала);
	ЗапросВерсии.УстановитьПараметр("ДатаОкончания", ПериодОтчета.ДатаОкончания);
	ЗапросВерсии.УстановитьПараметр("Валюта"		, ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("Организация"	, Организация);
	ЗапросВерсии.УстановитьПараметр("Проект"	, Проект);
	ЗапросВерсии.УстановитьПараметр("Периодичность", ПериодичностьСвертывания);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат ПолучитьПустуюТаблицуРасшифровки();
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### В(&МассивПоказателей)",Новый Структура("МассивПоказателей",МассивПоказателей));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",ОтборПоАналитикам = Неопределено);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",ОтборПоАналитикам <> Неопределено);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета","ЭкземплярОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ПериодОтчета","ПериодОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Регистратор","Регистратор");
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат ПолучитьПустуюТаблицуРасшифровки();
		
	Иначе
		
		ТекстВложенногоЗапросаИтог=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапросаИтог=СтрЗаменить(ТекстВложенногоЗапросаИтог,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст="ВЫБРАТЬ
	|	ИтоговыеЗначения.Показатель,
	|	ИтоговыеЗначения.ПериодОтчета КАК Период,
	|	ИтоговыеЗначения.ПериодОтчета.ДатаНачала КАК ДатаНачала,
	|	СУММА(ИтоговыеЗначения.Значение) КАК Значение,
	|	СУММА(ИтоговыеЗначения.Корректировка) КАК Корректировка,
	|	СУММА(ИтоговыеЗначения.Значение+ИтоговыеЗначения.Корректировка) КАК ИтоговоеЗначение,
	|	ИтоговыеЗначения.ЭкземплярОтчета КАК Регистратор,
	|	ТекИтоговыеЗначения.ТекЗначение,
	|	ТекИтоговыеЗначения.ТекКорректировка,
	|	ТекИтоговыеЗначения.ТекИтоговоеЗначение
	|ИЗ (ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ЗначенияПоказателейОтчетов.ПериодОтчета КАК ПериодОтчета,
	|	ВЫБОР 
	|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет ТОГДА
	|			ЗначенияПоказателейОтчетов.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Корректировка";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|0 КАК Корректировка";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"	
	|ИЗ
	|	("+ТекстВложенногоЗапросаИтог+") КАК ЗначенияПоказателейОтчетов";
	
	ТекстАналитики="";		
	
	Если ОтборПоАналитикам <> Неопределено Тогда
		
		Для Инд = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если ОтборПоАналитикам.Свойство("Аналитика" + Инд) Тогда
				ТекстАналитики = ТекстАналитики + " И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
				Запрос.УстановитьПараметр("Аналитика" + Инд, ОтборПоАналитикам["Аналитика" + Инд]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтборПоАналитикам.Свойство("АналитикаВалюта") Тогда
			
			ТекстАналитики = ТекстАналитики + " И ЗначенияПоказателейОтчетов.АналитикаВалюта = &АналитикаВалюта";
			Запрос.УстановитьПараметр("АналитикаВалюта", ОтборПоАналитикам.АналитикаВалюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ
		|"+Сред(ТекстАналитики,3);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|) КАК ИтоговыеЗначения";
	
	// Получаем итоговое значение для текущего отчета с учетом версий.
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ТекстВложенногоЗапросаТек=СтрЗаменить(ТекстВложенногоЗапросаИтог,"&СписокВерсий","&СписокВерсийТек");
	Запрос.УстановитьПараметр("СписокВерсийТек",СписокИспользуемыхВерсий);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст = Запрос.Текст + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ИтоговыеЗначения.Показатель,
	|	СУММА(ИтоговыеЗначения.Значение) КАК ТекЗначение,
	|	СУММА(ИтоговыеЗначения.Корректировка) КАК ТекКорректировка,
	|	СУММА(ИтоговыеЗначения.Значение+ИтоговыеЗначения.Корректировка) КАК ТекИтоговоеЗначение
	|ИЗ (ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ВЫБОР 
	|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет ТОГДА
	|			ЗначенияПоказателейОтчетов.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Корректировка";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|0 КАК Корректировка";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	("+ТекстВложенногоЗапросаТек+") КАК ЗначенияПоказателейОтчетов";
	
	Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ"+Сред(ТекстАналитики,3);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|) КАК ИтоговыеЗначения";
	
	// Получаем корректировки отчета
	
	Запрос.Текст=Запрос.Текст+"
	|СГРУППИРОВАТЬ ПО ИтоговыеЗначения.Показатель) КАК ТекИтоговыеЗначения 
	|ПО ИтоговыеЗначения.Показатель=ТекИтоговыеЗначения.Показатель 
	|СГРУППИРОВАТЬ ПО 
	|	ИтоговыеЗначения.Показатель,
	|	ИтоговыеЗначения.ПериодОтчета,
	|	ИтоговыеЗначения.ЭкземплярОтчета,
	|	ТекИтоговыеЗначения.ТекЗначение,
	|	ТекИтоговыеЗначения.ТекКорректировка,
	|	ТекИтоговыеЗначения.ТекИтоговоеЗначение
	|УПОРЯДОЧИТЬ ПО ИтоговыеЗначения.ПериодОтчета.ДатаНачала";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьРасшифровкуСверткиПоПериодам()

Функция ТолькоСинтетическиеПоказатели()
	
	Возврат МаксАналитикПоказателя=0 И мПоказатели.Найти(Истина,"Валютный")=Неопределено;
	
КонецФункции // ЕстьАналитичексиеРаскрытия()

// Функция подготавливает запрос для выборки данных консолидации без учета приобретений
// в текущем периоде. Выбираются синтетические и аналитические значения.
//
Функция ПодготовитьЗапросБезУчетаПриобретенияПолный(ТаблицаПериметр,РежимРасшифровки=Ложь)
	
	/////////////////////////////////////////////////////////////////////////////////////////
	/// ПОДГОТОВИМ СПИСОК ВЕРСИЙ ЭКЗЕМПЛЯРОВ ОТЧЕТА, ЗНАЧЕНИЯ КОТОРЫХ БУДУТ КОНСОЛИДИРОВАТЬСЯ
	
	МассивОрганизацийПериметра = ТаблицаПериметр.ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	
	ТекСписокВерсий = Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ПолучитьВерсииКонсолидируемыхОтчетов(МассивОрганизацийПериметра,РежимРасшифровки));
	
	/////////////////////////////////////////////////////////////////////////////////////
	/// ВЫБИРАЕМ ДАННЫЕ ПО СИНТЕТИЧЕСКИМ ЗНАЧЕНИЯМ ПОКАЗАТЕЛЕЙ			
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",				ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",			ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",		Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",		Ложь);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",		Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",	Ложь);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Организация",		"Организация");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Проект",				"Проект");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета",	"ЭкземплярОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Активность",			"Активность");
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	ОтборПоказателей=Новый Соответствие;	
	ТекстУсловия="(НЕ ####.НеСуммируется)";		
	ОтборПоказателей.Вставить(ТекстУсловия,Новый Структура);
	
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	
	СтруктураЗапроса = УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда		
		Возврат Ложь;		
	Иначе		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);		
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ПолучитьТекстЗапросаБезУчетаПриобретений_Синтетика(ТекстВложенногоЗапроса, НомераТаблиц);
										
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Проект",				Проект);
	Запрос.УстановитьПараметр("Сценарий", 			Сценарий);
	Запрос.УстановитьПараметр("ТаблицаПериметр",	ТаблицаПериметр);
	
	РезультатВыполнения = Запрос.ВыполнитьПакет();
	
	// Формируем таблицу регистраторов значений для консолидированного отчета.
	ТекТаблицаРегистраторов = РезультатВыполнения[НомераТаблиц.ТаблицаРегистраторов].Выгрузить();
		
	мТабРасшифровкиПоказателей	= РезультатВыполнения[НомераТаблиц.ТаблицаРасшифровкиПоказателей].Выгрузить();	
	ЗначенияПоказателей			= РезультатВыполнения[НомераТаблиц.ТаблицаКонсолидированныхПоказателей].Выбрать();
	
	Если НЕ РежимРасшифровки Тогда
		
		Пока ЗначенияПоказателей.Следующий() Цикл
			
			Показатели.Вставить(СокрЛП(ЗначенияПоказателей.Код), ЗначенияПоказателей.ИтоговоеЗначение);
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект, ЗначенияПоказателей.Показатель, ЗначенияПоказателей.ИтоговоеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТолькоСинтетическиеПоказатели() ИЛИ РежимРасшифровки Тогда // Не обрабатываем аналитические раскрытия
		Возврат Истина;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	/// ВЫБИРАЕМ ДАННЫЕ ПО АНАЛИТИЧЕСКИМ ЗНАЧЕНИЯМ ПОКАЗАТЕЛЕЙ
		
	Запрос.Текст = ПолучитьТекстЗапросаБезУчетаПриобретений_ПоказателиБезРаскрытий(ТекстВложенногоЗапроса);
	
	Запрос.УстановитьПараметр("НеРассчитывается", Перечисления.ВидыИтоговПоказателя.НеРассчитывается);
	
	ПоказателиБезРаскрытий = Новый СписокЗначений;
	ПоказателиБезРаскрытий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель"));
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",					ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",				ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",			Ложь);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",			Истина);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",			Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",		Ложь);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",	(МаксАналитикПоказателя + МаксАналитикОтчета));
	
	ДополнительныеПоля = Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Организация", 	"Организация");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Проект", 		"Проект");
	ДанныеЗапроса.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	
	ОтборПоказателей = Новый Соответствие;
	ОтборПоказателей.Вставить("(НЕ ####.НеСуммируется) И (НЕ ####.Ссылка В(&ПоказателиБезРаскрытий))", Новый Структура("ПоказателиБезРаскрытий",ПоказателиБезРаскрытий));	
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	
	СтруктураЗапроса = УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда		
		Возврат Ложь;		
	Иначе		
		ТекстВложенногоЗапроса = СтруктураЗапроса.ТекстЗапроса;		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПоказателиБезРаскрытий", ПоказателиБезРаскрытий);
	
	Запрос.Текст = ПолучитьТекстЗапросаБезУчетаПриобретений_Аналитика(ТекстВложенногоЗапроса);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = мПоказателиРаскрытия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат,,"ИтоговоеЗначение");
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект, Результат.ИтоговоеЗначение, НоваяСтрока,,Истина);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТекстЗапросаБезУчетаПриобретений_Синтетика(ТекстВложенногоЗапроса, НомераТаблиц)

	НомераТаблиц.Вставить("ПоказателиСинтетика", 					НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втДолиОрганизаций", 						НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаКонсолидацииРазвернутая", 		НомераТаблиц.Количество());	
	НомераТаблиц.Вставить("ТаблицаРегистраторов", 					НомераТаблиц.Количество());	
	НомераТаблиц.Вставить("ТаблицаРасшифровкиПоказателей", 			НомераТаблиц.Количество());	
	НомераТаблиц.Вставить("ТаблицаКонсолидированныхПоказателей", 	НомераТаблиц.Количество());	
	
	Возврат
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,	
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК Код,
	|	ЗначенияПоказателейОтчетов.Показатель.ВидИтога КАК ВидИтога,
	|	ЗначенияПоказателейОтчетов.Показатель.Оборотный КАК Оборотный,
	|	ЗначенияПоказателейОтчетов.Организация КАК Организация,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК Регистратор,
	|	ЗначенияПоказателейОтчетов.Активность КАК Активность,
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение
	|ПОМЕСТИТЬ ПоказателиСинтетика
	|ИЗ 
	|	(" + ТекстВложенногоЗапроса + ") КАК ЗначенияПоказателейОтчетов
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.Организация,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета,
	|	ЗначенияПоказателейОтчетов.Активность
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериметр.ИндивидуальнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПериметр.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское)
	|			ТОГДА 1
	|		КОГДА ТаблицаПериметр.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РасчетнаяДоля,
	|	ТаблицаПериметр.ВидОтношенияКГруппе КАК МетодКонсолидации,
	|	ТаблицаПериметр.ДоляВладения КАК Доля
	|ПОМЕСТИТЬ втДолиОрганизаций
	|ИЗ 
	|	&ТаблицаПериметр КАК ТаблицаПериметр
	|ИНДЕКСИРОВАТЬ ПО 
	|	Организация
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСинтетика.Показатель,
	|	ПоказателиСинтетика.Код,
	|	ПоказателиСинтетика.ВидИтога,
	|	ПоказателиСинтетика.Оборотный,
	|	ПоказателиСинтетика.Организация,
	|	ПоказателиСинтетика.Регистратор,
	|	ПоказателиСинтетика.Активность,
	|   ПоказателиСинтетика.Значение,
	|	ПоказателиСинтетика.Значение * ДолиОрганизаций.РасчетнаяДоля КАК ИтоговоеЗначение,
	|	ДолиОрганизаций.Доля КАК Доля,
	|	1 КАК ИндексПрисутствияВПериоде,
	|	ДолиОрганизаций.МетодКонсолидации
	|ПОМЕСТИТЬ ТаблицаКонсолидацииРазвернутая
	|ИЗ 
	|	ПоказателиСинтетика КАК ПоказателиСинтетика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолиОрганизаций КАК ДолиОрганизаций
	|			ПО ПоказателиСинтетика.Организация = ДолиОрганизаций.Организация
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|/// Получаем таблицу регистраторов
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиСинтетика.Регистратор КАК Регистратор,
	|	ПоказателиСинтетика.Активность КАК Активность,
	|	ПоказателиСинтетика.Организация КАК Организация
	|ИЗ 
	|	ПоказателиСинтетика КАК ПоказателиСинтетика	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|/// Получаем таблицу расшифровки показателей
	|ВЫБРАТЬ * ИЗ ТаблицаКонсолидацииРазвернутая
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|/// Получаем таблицу консолидированных показателей
	|ВЫБРАТЬ
	|	ТаблицаКонсолидацииРазвернутая.Код,
	|	ТаблицаКонсолидацииРазвернутая.Показатель,
	|	СУММА(ТаблицаКонсолидацииРазвернутая.ИтоговоеЗначение) КАК ИтоговоеЗначение
	|ИЗ 
	|	ТаблицаКонсолидацииРазвернутая КАК ТаблицаКонсолидацииРазвернутая
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКонсолидацииРазвернутая.Код,
	|	ТаблицаКонсолидацииРазвернутая.Показатель";

КонецФункции

Функция ПолучитьТекстЗапросаБезУчетаПриобретений_ПоказателиБезРаскрытий(ТекстВложенногоЗапроса)
	
	ТекстОтборАналитики = "";
	ПервыйПодзапрос = Истина;
	
	Для Каждого СтрАналитика ИЗ ТабНомеровАналитик Цикл
		
		ЧислоАналитикСтроки = СтрАналитика.ЧислоАналитикГруппыРаскрытия;
		
		Если СтрАналитика.ЧисловойПоказатель И (ЧислоАналитикСтроки > 0 ИЛИ СтрАналитика.Валютный) Тогда
			
			ИмяТаблицыРегистра="ЗначенияПоказателейОтчетов" + ?(ЧислоАналитикСтроки=0,"Валютные",ЧислоАналитикСтроки);
			
			ТекстОтборАналитики = ТекстОтборАналитики 
			+ ?(ПервыйПодзапрос, "", " ОБЪЕДИНИТЬ ВСЕ ")			
			+ "
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВерсииЗначенийПоказателей.ЭкземплярОтчета КАК ЭкземплярОтчета,
			|	"+ИмяТаблицыРегистра+".Показатель
			|ИЗ
			|	РегистрСведений."+ИмяТаблицыРегистра+" КАК " + ИмяТаблицыРегистра + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|			ПО "+ИмяТаблицыРегистра+".Версия=ВерсииЗначенийПоказателей.Ссылка 
			|ГДЕ
			|	ВерсииЗначенийПоказателей.Ссылка В(&СписокВерсий)
			|
			|";
			
			Если ПервыйПодзапрос Тогда
				ПервыйПодзапрос = Ложь;
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиСРаскрытием.Показатель,
	|	РаскрытиеПоказателей.ЭкземплярОтчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоказателиСинтетика.Показатель КАК Показатель,
	|		ПоказателиСинтетика.Регистратор КАК Регистратор
	|	ИЗ
	|		ПоказателиСинтетика КАК ПоказателиСинтетика
	|	ГДЕ
	|		(НЕ ПоказателиСинтетика.Значение = 0)
	|		И (НЕ ПоказателиСинтетика.Показатель.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка))
	|		И (НЕ ПоказателиСинтетика.Показатель.ВидИтога = &НеРассчитывается)) КАК ПоказателиСРаскрытием
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстОтборАналитики + ") КАК РаскрытиеПоказателей
	|		ПО ПоказателиСРаскрытием.Показатель = РаскрытиеПоказателей.Показатель
	|			И ПоказателиСРаскрытием.Регистратор = РаскрытиеПоказателей.ЭкземплярОтчета
	|ГДЕ
	|	РаскрытиеПоказателей.ЭкземплярОтчета ЕСТЬ NULL";	
	
КонецФункции

Функция ПолучитьТекстЗапросаБезУчетаПриобретений_Аналитика(ТекстВложенногоЗапроса)
    
    СписокАналитик="";
    
    Для Инд = (МаксАналитикОтчета + 1) По (МаксАналитикОтчета + МаксАналитикПоказателя) Цикл
        
        СписокАналитик=СписокАналитик+",
        |ЗначенияПоказателейОтчетов.Аналитика"+Инд;
        
    КонецЦикла;
    
    СписокАналитик=СписокАналитик+",
    |ЗначенияПоказателейОтчетов.АналитикаВалюта";
    
    Возврат
	"
    |ВЫБРАТЬ
    |	ЗначенияПоказателейОтчетов.Показатель" + СписокАналитик + ",
    |  СУММА(ЗначенияПоказателейОтчетов.Значение * Выразить(ДолиОрганизаций.РасчетнаяДоля КАК Число (18,5))) КАК ИтоговоеЗначение
    |ИЗ (" + ТекстВложенногоЗапроса + ") КАК ЗначенияПоказателейОтчетов
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолиОрганизаций КАК ДолиОрганизаций
    |		ПО ЗначенияПоказателейОтчетов.Организация = ДолиОрганизаций.Организация
    |СГРУППИРОВАТЬ ПО
    |	ЗначенияПоказателейОтчетов.Показатель" + СписокАналитик;

КонецФункции

// Функция подготавливает запрос для выборки данных консолидации без учета приобретений
// в текущем периоде. Выбираются значения по установленному отбора аналитик
//
Функция ПодготовитьЗапросБезУчетаПриобретенияОтбор(ТаблицаПериметр, ОтборПоАналитикам,РежимРасшифровки=Ложь)
	
	/////////////////////////////////////////////////////////////////////////////////////////
	/// ПОДГОТОВИМ СПИСОК ВЕРСИЙ ЭКЗЕМПЛЯРОВ ОТЧЕТА, ЗНАЧЕНИЯ КОТОРЫХ БУДУТ КОНСОЛИДИРОВАТЬСЯ
	
	МассивОрганизацийПериметра = ТаблицаПериметр.ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	
	ТекСписокВерсий = Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ПолучитьВерсииКонсолидируемыхОтчетов(МассивОрганизацийПериметра,РежимРасшифровки));
	
	/////////////////////////////////////////////////////////////////////////////////////
	/// ВЫБИРАЕМ ДАННЫЕ ПО СИНТЕТИЧЕСКИМ ЗНАЧЕНИЯМ ПОКАЗАТЕЛЕЙ			
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",					ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",				ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",			Ложь);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",			Истина);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",			Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",		Ложь);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",	(МаксАналитикПоказателя + МаксАналитикОтчета));
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Организация",		"Организация");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Проект",				"Проект");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета",	"ЭкземплярОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Активность",			"Активность");
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	
	ОтборПоказателей = Новый Соответствие;	
	ОтборПоказателей.Вставить("(НЕ ####.НеСуммируется)", Новый Структура);
	
	ДанныеЗапроса.Вставить("ОтборПоказателей", ОтборПоказателей);
	
	СтруктураЗапроса = УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда		
		Возврат Ложь;		
	Иначе		
		ТекстВложенногоЗапроса = СтруктураЗапроса.ТекстЗапроса;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ, СтрПараметр.Значение);		
	КонецЦикла;
	Запрос.УстановитьПараметр("ДокументУправленияПериметром",	ДокументУправленияПериодомСценария);
	Запрос.УстановитьПараметр("Организация", 					Организация);
	Запрос.УстановитьПараметр("Проект", 						Проект);
	Запрос.УстановитьПараметр("ТаблицаПериметр",				ТаблицаПериметр);
	
	Запрос.Текст = ПолучитьТекстЗапросаБезУчетаПриобретений_Отбор(Запрос, ТекстВложенногоЗапроса, ОтборПоАналитикам);
	
	мТабРасшифровкиПоказателей = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
	
КонецФункции // ПодготовитьЗапросБезУчетаПриобретенияОтбор()

Функция ПолучитьТекстЗапросаБезУчетаПриобретений_Отбор(Запрос, ТекстВложенногоЗапроса, ОтборПоАналитикам)

	СписокАналитик = "";
	
	Для Инд = (МаксАналитикОтчета + 1) По (МаксАналитикОтчета + МаксАналитикПоказателя) Цикл
		
		СписокАналитик = СписокАналитик+",
		|ЗначенияПоказателейОтчетов.Аналитика"+Инд;
		
	КонецЦикла;
	
	СписокАналитик=СписокАналитик+",
	|ЗначенияПоказателейОтчетов.АналитикаВалюта";
	
	ТекстОтбор = "";
	
	Для Каждого КлючИЗначение ИЗ ОтборПоАналитикам Цикл
		
		Если КлючИЗначение.Значение=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстОтбор = ТекстОтбор + " И " + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;	
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаПериметр.ИндивидуальнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПериметр.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское)
	|			ТОГДА 1
	|		КОГДА ТаблицаПериметр.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РасчетнаяДоля,
	|	ТаблицаПериметр.ВидОтношенияКГруппе КАК МетодКонсолидации,
	|	1 КАК ИндексПрисутствияВПериоде,
	|	ТаблицаПериметр.ДоляВладения КАК Доля
	|ПОМЕСТИТЬ втДолиОрганизаций
	|ИЗ 
	|	&ТаблицаПериметр КАК ТаблицаПериметр
	|ИНДЕКСИРОВАТЬ ПО 
	|	Организация
	|;
 	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК Код,
	|	ЗначенияПоказателейОтчетов.Показатель.ВидИтога КАК ВидИтога,
	|	ЗначенияПоказателейОтчетов.Показатель.Оборотный КАК Оборотный,
	|	ЗначенияПоказателейОтчетов.Организация КАК Организация,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК Регистратор,
	|	ЗначенияПоказателейОтчетов.Активность КАК Активность,
	|СУММА(ВЫБОР
	|	КОГДА ЗначенияПоказателейОтчетов.Показатель.Оборотный ТОГДА
	|		ЗначенияПоказателейОтчетов.Значение * ДолиОрганизаций.ИндексПрисутствияВПериоде * ДолиОрганизаций.РасчетнаяДоля
	|	ИНАЧЕ
	|		ЗначенияПоказателейОтчетов.Значение * ДолиОрганизаций.РасчетнаяДоля
	|	КОНЕЦ) КАК ИтоговоеЗначение,
	|   СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
	|	ДолиОрганизаций.Доля КАК Доля,
	|	ДолиОрганизаций.ИндексПрисутствияВПериоде,
	|	ДолиОрганизаций.МетодКонсолидации
	|ИЗ 
	|	(" + ТекстВложенногоЗапроса + ") КАК ЗначенияПоказателейОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолиОрганизаций КАК ДолиОрганизаций
	|			ПО ЗначенияПоказателейОтчетов.Организация = ДолиОрганизаций.Организация
	|ГДЕ
	|	" + Сред(ТекстОтбор, 3) + "
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.Организация,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета,
	|	ЗначенияПоказателейОтчетов.Активность,
	|	ДолиОрганизаций.Доля,
	|	ДолиОрганизаций.ИндексПрисутствияВПериоде,
	|	ДолиОрганизаций.МетодКонсолидации";

КонецФункции

// Функция - Получить версии консолидируемых отчетов
//
// Параметры:
//  СписокПериметра	 - массив организаций для отбора версий
// Возвращаемое значение:
//   - массив версий значений показателей
Функция ПолучитьВерсииКонсолидируемыхОтчетов(СписокПериметра,РежимРасшифровки=Ложь)

	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.Регистратор
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация В(&СписокПериметра)
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ (ИспользуемоеЧтениеНеактуальныхЗаписей() ИЛИ РежимРасшифровки) Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		ЗапросВерсии.Текст=ЗапросВерсии.Текст+"
		|И ВерсииЗначенийПоказателей.Аналитика"+Инд+"=&Аналитика"+Инд;
		
		ЗапросВерсии.УстановитьПараметр("Аналитика" + Инд, 
								?(ЗначениеЗаполнено(ЭтотОбъект["Аналитика"+Инд]), ЭтотОбъект["Аналитика"+Инд], 
									Неопределено));;
		
	КонецЦикла;
	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", 		ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Сценарий", 		Сценарий);
	ЗапросВерсии.УстановитьПараметр("Проект", 			Проект);
	ЗапросВерсии.УстановитьПараметр("ПериодОтчета", 	ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("Валюта", 			ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("СписокПериметра", 	СписокПериметра);
	ЗапросВерсии.УстановитьПараметр("Ссылка", 			Ссылка);

	МассивВерсийКонсолидации=Новый Массив;
	
	Результат=ЗапросВерсии.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Результат.Регистратор) Тогда
			
			УправлениеОтчетамиУХ.ЗаполнитьРегистраторВерсии(Результат.Ссылка);
			
		КонецЕсли;
		
		МассивВерсийКонсолидации.Добавить(Результат.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивВерсийКонсолидации;

КонецФункции

// Функция заполняет возвращает таблицу значений раскрытия консолидированного показателя.
//
Функция ПолучитьРасшифровкуКонсолидированныхПоказателей(РежимРасшифровки = Ложь, ОтборПоАналитикам = Неопределено) Экспорт
	
	ДанныеПериода=Документы.НастраиваемыйОтчет.ПолучитьДанныеПериода(Сценарий,ПериодОтчета,Организация); 
	ДокументУправленияПериодомСценария=ДанныеПериода.УправлениеПериодом;
	
	Если НЕ ЗначениеЗаполнено(ДокументУправленияПериодомСценария) Тогда
		
		СтрокаШаблона = Нстр("ru = 'Невозможно определить документ управления периодами сценария для сценария %1, периода %2 и организации %3'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Сценарий, ПериодОтчета, Организация));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицаПериметр = УправлениеРабочимиПроцессамиУХ.ПолучитьДанныеРегламентаОтчета(ЭтотОбъект);
	
	Если ТаблицаПериметр.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе ""%УправленияПериодомСценария%"", к области действия которого относится текущий отчет,
		|		не определен состав периметра для организационной единицы ""%Организация%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УправленияПериодомСценария%", Строка(ДокументУправленияПериодомСценария));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
		ноПредупреждение(ТекстСообщения, СтатусСообщения.Важное);
		мТабРасшифровкиПоказателей=Новый ТаблицаЗначений;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// отсортируем по организациям периметра для удобства восприятия пользователем диагностики
	ТаблицаПериметр.Сортировать("ИндивидуальнаяОрганизация");
	
	Если ТипЗнч(мТабРасшифровкиПоказателей) = Тип("ТаблицаЗначений") Тогда
		мТабРасшифровкиПоказателей.Очистить();
	КонецЕсли;	
	
	Если ОтборПоАналитикам = Неопределено Тогда
		ДанныеРасшифровкиСчитаны = ПодготовитьЗапросБезУчетаПриобретенияПолный(ТаблицаПериметр,РежимРасшифровки);
	Иначе
		ДанныеРасшифровкиСчитаны = ПодготовитьЗапросБезУчетаПриобретенияОтбор(ТаблицаПериметр, ОтборПоАналитикам,РежимРасшифровки);
	КонецЕсли;
	
	Возврат ДанныеРасшифровкиСчитаны;
	
КонецФункции

// Функция заполняет возвращает таблицу значений раскрытия показателя,
// свернутого по аналитике.
//
Функция ПолучитьРасшифровкуПоказателяСвернутогоПоАналитике(МассивПоказателей, ОтборПоАналитикам = Неопределено)
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии=Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация = &Организация
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		Если ЗначениеЗаполнено(ЭтотОбъект["Аналитика" + Инд]) Тогда
			ЗапросВерсии.Текст=ЗапросВерсии.Текст + "
			|И ВерсииЗначенийПоказателей.Аналитика" + Инд + " = &АналитикаДоч" + Инд;
			ЗапросВерсии.УстановитьПараметр("АналитикаДоч" + Инд, ЭтотОбъект["Аналитика" + Инд]);
		Иначе
			ЗапросВерсии.Текст=ЗапросВерсии.Текст + "
			|И ВерсииЗначенийПоказателей.Аналитика" + Инд + " <> &АналитикаДоч" + Инд;
			ЗапросВерсии.УстановитьПараметр("АналитикаДоч" + Инд,  Неопределено);
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Сценарий"	, Сценарий);
	ЗапросВерсии.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("Валюта"		, ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("Организация"	, Организация);
	ЗапросВерсии.УстановитьПараметр("Проект"	, Проект);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### В(&МассивПоказателей)",Новый Структура("МассивПоказателей",МассивПоказателей));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",ОтборПоАналитикам <> Неопределено);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Регистратор","Регистратор");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета","ЭкземплярОтчета");
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапросаДоч=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапросаДоч=СтрЗаменить(ТекстВложенногоЗапросаДоч,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	ТекстВложенногоЗапросаТек=СтрЗаменить(ТекстВложенногоЗапросаДоч,"&СписокВерсий","&СписокВерсийТек");
	Запрос.УстановитьПараметр("СписокВерсийТек",СписокИспользуемыхВерсий);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СписокАналитик = "";
	ТекстОтборАналитик = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|ЗначениеПоказателя.Показатель.Код КАК Код,
	|ЗначениеПоказателя.Показатель КАК Показатель,
	|ЗначениеПоказателя.Значение КАК Значение,
	|ЗначениеПоказателя.Корректировка КАК Корректировка,
	|ЗначенияПоказателейОтчетов.Значение КАК ЗначениеОтчетовИсточников,
	|ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК Регистратор";
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СписокАналитик = СписокАналитик + ", ЗначенияПоказателейОтчетов.Аналитика" + Инд;
		
	КонецЦикла;
	
	Если НЕ ОтборПоАналитикам=Неопределено Тогда
		
		Для Инд = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если ОтборПоАналитикам.Свойство("Аналитика" + Инд) Тогда
				
				ТекстОтборАналитик = ТекстОтборАналитик + " И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &АналитикаДоч" + Инд;
				Запрос.УстановитьПараметр("АналитикаДоч" + Инд, ОтборПоАналитикам["Аналитика" + Инд]);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ОтборПоАналитикам.Свойство("АналитикаВалюта") Тогда
			
			ТекстОтборАналитик = ТекстОтборАналитик + " И ЗначенияПоказателейОтчетов.АналитикаВалюта = &АналитикаДочВалюта";
			Запрос.УстановитьПараметр("АналитикаДочВалюта", ОтборПоАналитикам.АналитикаВалюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + СписокАналитик;
	
	ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя = "
	|ВЫБРАТЬ ЗначенияПоказателейОтчетов.Показатель, 
	|СУММА(ВЫБОР 
	|	КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет 
	|	ТОГДА ЗначенияПоказателейОтчетов.Значение
	|	ИНАЧЕ 0
	|КОНЕЦ) КАК Значение,
	|СУММА(";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя=ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ";
		
	Иначе
		
		ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя=ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя+"
		|0";
		
	КонецЕсли;
	
	ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя=ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя+") КАК Корректировка
	|ИЗ ("+ТекстВложенногоЗапросаТек+") КАК ЗначенияПоказателейОтчетов";
	
	Если Не ПустаяСтрока(ТекстОтборАналитик) Тогда
		ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя = ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя + "
		|ГДЕ
		|"+Сред(ТекстОтборАналитик,3);
	КонецЕсли;
	
	ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя = ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя + "
	|СГРУППИРОВАТЬ ПО 
	|ЗначенияПоказателейОтчетов.Показатель";
	
	ЗапросПоДочернимПоказателям = 
	" ВЫБРАТЬ ЗначенияПоказателейОтчетов.Показатель, 
	|ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК ЭкземплярОтчета" + СписокАналитик + ", 
	|Сумма(ВЫБОР 
	|	КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет 
	|	ТОГДА ЗначенияПоказателейОтчетов.Значение ИНАЧЕ 0 КОНЕЦ) КАК Значение,
	|Сумма(";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ЗапросПоДочернимПоказателям=ЗапросПоДочернимПоказателям+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ";
		
	Иначе
		
		ЗапросПоДочернимПоказателям=ЗапросПоДочернимПоказателям+"
		|0";
		
	КонецЕсли;
	
	ЗапросПоДочернимПоказателям=ЗапросПоДочернимПоказателям+") КАК Корректировка
	| ИЗ ("+ТекстВложенногоЗапросаДоч+") КАК ЗначенияПоказателейОтчетов";
	
	Если Не ПустаяСтрока(ТекстОтборАналитик) Тогда
		ЗапросПоДочернимПоказателям = ЗапросПоДочернимПоказателям + "
		|ГДЕ
		|"+Сред(ТекстОтборАналитик,3);
	КонецЕсли;
	
	ЗапросПоДочернимПоказателям = ЗапросПоДочернимПоказателям + "	
	| СГРУППИРОВАТЬ ПО 
	|ЗначенияПоказателейОтчетов.Показатель, 
	|ЗначенияПоказателейОтчетов.ЭкземплярОтчета " + СписокАналитик;
	
	Запрос.Текст = ТекстЗапроса + "
	|ИЗ (" + ЗапросПоЗначениюИКорректировкеИтоговогоПоказателя + ") КАК ЗначениеПоказателя
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ЗапросПоДочернимПоказателям + ") КАК ЗначенияПоказателейОтчетов
	|ПО ЗначениеПоказателя.Показатель = ЗначенияПоказателейОтчетов.Показатель";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция заполняет возвращает таблицу значений раскрытия показателя,
// свернутого по аналитике.
//
Функция ПолучитьРасшифровкуПоказателяСвернутогоПоПроектам(МассивПоказателей, ОтборПоАналитикам = Неопределено)
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Регистратор <> &Регистратор
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &парамВидОтчета
	|	И ВерсииЗначенийПоказателей.Организация = &парамОрганизация
	|	И ВерсииЗначенийПоказателей.Сценарий = &парамСценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &парамПериодОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &парамВалюта";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		
		Если ЗначениеЗаполнено(ЗначениеАналитика) Тогда
			
			ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
			|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
			ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ЗначениеАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Проект В ИЕРАРХИИ (&Проект)";
		ЗапросВерсии.УстановитьПараметр("Проект", Проект);
		
	КонецЕсли;
	
	ЗапросВерсии.УстановитьПараметр("парамОрганизация", Организация);
	ЗапросВерсии.УстановитьПараметр("парамСценарий", Сценарий);
	ЗапросВерсии.УстановитьПараметр("парамПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("парамВалюта", ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("парамВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### В(&МассивПоказателей)",Новый Структура("МассивПоказателей",МассивПоказателей));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",ОтборПоАналитикам = Неопределено);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",ОтборПоАналитикам <> Неопределено);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета","ЭкземплярОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Проект","Проект");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Регистратор","Регистратор");
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапросаИтог=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапросаИтог=СтрЗаменить(ТекстВложенногоЗапросаИтог,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст="ВЫБРАТЬ
	|	ИтоговыеЗначения.Показатель,
	|	ИтоговыеЗначения.Проект КАК Проект,
	|	СУММА(ИтоговыеЗначения.Значение) КАК Значение,
	|	СУММА(ИтоговыеЗначения.Корректировка) КАК Корректировка,
	|	СУММА(ИтоговыеЗначения.Значение+ИтоговыеЗначения.Корректировка) КАК ИтоговоеЗначение,
	|	ИтоговыеЗначения.ЭкземплярОтчета КАК Регистратор,
	|	ТекИтоговыеЗначения.ТекЗначение,
	|	ТекИтоговыеЗначения.ТекКорректировка,
	|	ТекИтоговыеЗначения.ТекИтоговоеЗначение
	|ИЗ (ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ЗначенияПоказателейОтчетов.Проект КАК Проект,
	|	ВЫБОР 
	|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет ТОГДА
	|			ЗначенияПоказателейОтчетов.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Корректировка";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|0 КАК Корректировка";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	("+ТекстВложенногоЗапросаИтог+") КАК ЗначенияПоказателейОтчетов";
	
	ТекстАналитики="";		
	
	Если ОтборПоАналитикам <> Неопределено Тогда
		
		Для Инд = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если ОтборПоАналитикам.Свойство("Аналитика" + Инд) Тогда
				ТекстАналитики = ТекстАналитики + " И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
				Запрос.УстановитьПараметр("Аналитика" + Инд, ОтборПоАналитикам["Аналитика" + Инд]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтборПоАналитикам.Свойство("АналитикаВалюта") Тогда
			
			ТекстАналитики = ТекстАналитики + " И ЗначенияПоказателейОтчетов.АналитикаВалюта = &АналитикаВалюта";
			Запрос.УстановитьПараметр("АналитикаВалюта", ОтборПоАналитикам.АналитикаВалюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ
		|"+Сред(ТекстАналитики,3);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|) КАК ИтоговыеЗначения";
	
	// Получаем итоговое значение для текущего отчета с учетом версий.
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ТекстВложенногоЗапросаТек=СтрЗаменить(ТекстВложенногоЗапросаИтог,"&СписокВерсий","&СписокВерсийТек");
	Запрос.УстановитьПараметр("СписокВерсийТек",СписокИспользуемыхВерсий);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст = Запрос.Текст + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ИтоговыеЗначения.Показатель,
	|	СУММА(ИтоговыеЗначения.Значение) КАК ТекЗначение,
	|	СУММА(ИтоговыеЗначения.Корректировка) КАК ТекКорректировка,
	|	СУММА(ИтоговыеЗначения.Значение+ИтоговыеЗначения.Корректировка) КАК ТекИтоговоеЗначение
	|ИЗ (ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ВЫБОР 
	|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет ТОГДА
	|			ЗначенияПоказателейОтчетов.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Корректировка";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|0 КАК Корректировка";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	("+ТекстВложенногоЗапросаТек+") КАК ЗначенияПоказателейОтчетов";
	
	Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ"+Сред(ТекстАналитики,3);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|) КАК ИтоговыеЗначения";
	
	// Получаем корректировки отчета
	
	Запрос.Текст=Запрос.Текст+"
	|СГРУППИРОВАТЬ ПО ИтоговыеЗначения.Показатель) КАК ТекИтоговыеЗначения 
	|ПО ИтоговыеЗначения.Показатель=ТекИтоговыеЗначения.Показатель 
	|СГРУППИРОВАТЬ ПО 
	|	ИтоговыеЗначения.Показатель,
	|	ИтоговыеЗначения.Проект,
	|	ИтоговыеЗначения.ЭкземплярОтчета,
	|	ТекИтоговыеЗначения.ТекЗначение,
	|	ТекИтоговыеЗначения.ТекКорректировка,
	|	ТекИтоговыеЗначения.ТекИтоговоеЗначение";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция заполняет возвращает таблицу значений раскрытия показателя,
// свернутого по аналитике.
//
Функция ПолучитьРасшифровкуПоказателяСвернутогоПоОрганизациямПроекта(МассивПоказателей, ОтборПоАналитикам = Неопределено)
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ЗапросВерсии=Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	| ВерсииЗначенийПоказателей.Регистратор <> &Регистратор
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &парамВидОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &парамСценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &парамПериодОтчета
	|	И ВерсииЗначенийПоказателей.Проект В ИЕРАРХИИ (&ПарамПроект)
	|	И ВерсииЗначенийПоказателей.Валюта = &парамВалюта";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По МаксАналитикОтчета Цикл
		
		СтрокаАналитика = "Аналитика" + Инд;
		ЗначениеАналитика = ЭтотОбъект[СтрокаАналитика];
		
		Если ЗначениеЗаполнено(ЗначениеАналитика) Тогда
			
			ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
			|	И ВерсииЗначенийПоказателей." + СтрокаАналитика + " = &парам" + СтрокаАналитика;
			ЗапросВерсии.УстановитьПараметр("парам" + СтрокаАналитика, ЗначениеАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
		
	ЗапросВерсии.УстановитьПараметр("парамПроект", Проект);
	ЗапросВерсии.УстановитьПараметр("парамСценарий", Сценарий);
	ЗапросВерсии.УстановитьПараметр("парамПериодОтчета", ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("парамВалюта", ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("парамВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### В(&МассивПоказателей)",Новый Структура("МассивПоказателей",МассивПоказателей));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",ОтборПоАналитикам = Неопределено);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",ОтборПоАналитикам <> Неопределено);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета","ЭкземплярОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Организация","Организация");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Регистратор","Регистратор");
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Ложь
		
	Иначе
		
		ТекстВложенногоЗапросаИтог=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапросаИтог=СтрЗаменить(ТекстВложенногоЗапросаИтог,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст="ВЫБРАТЬ
	|	ИтоговыеЗначения.Показатель,
	|	ИтоговыеЗначения.Организация КАК Организация,
	|	СУММА(ИтоговыеЗначения.Значение) КАК Значение,
	|	СУММА(ИтоговыеЗначения.Корректировка) КАК Корректировка,
	|	СУММА(ИтоговыеЗначения.Значение+ИтоговыеЗначения.Корректировка) КАК ИтоговоеЗначение,
	|	ИтоговыеЗначения.ЭкземплярОтчета КАК Регистратор,
	|	ТекИтоговыеЗначения.ТекЗначение,
	|	ТекИтоговыеЗначения.ТекКорректировка,
	|	ТекИтоговыеЗначения.ТекИтоговоеЗначение
	|ИЗ (ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ЗначенияПоказателейОтчетов.Организация КАК Организация,
	|	ВЫБОР 
	|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет ТОГДА
	|			ЗначенияПоказателейОтчетов.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Корректировка";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|0 КАК Корректировка";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	("+ТекстВложенногоЗапросаИтог+") КАК ЗначенияПоказателейОтчетов";
	
	ТекстАналитики="";		
	
	Если ОтборПоАналитикам <> Неопределено Тогда
		
		Для Инд = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если ОтборПоАналитикам.Свойство("Аналитика" + Инд) Тогда
				ТекстАналитики = ТекстАналитики + " И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
				Запрос.УстановитьПараметр("Аналитика" + Инд, ОтборПоАналитикам["Аналитика" + Инд]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтборПоАналитикам.Свойство("АналитикаВалюта") Тогда
			
			ТекстАналитики = ТекстАналитики + " И ЗначенияПоказателейОтчетов.АналитикаВалюта = &АналитикаВалюта";
			Запрос.УстановитьПараметр("АналитикаВалюта", ОтборПоАналитикам.АналитикаВалюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ
		|"+Сред(ТекстАналитики,3);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|) КАК ИтоговыеЗначения";
	
	// Получаем итоговое значение для текущего отчета с учетом версий.
	
	/////////////////////////////////////////////////////////////////////////////////////
	///ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО РЕГИСТРАМ И ЕГО ПАРАМЕТРЫ
	
	ТекстВложенногоЗапросаТек=СтрЗаменить(ТекстВложенногоЗапросаИтог,"&СписокВерсий","&СписокВерсийТек");
	Запрос.УстановитьПараметр("СписокВерсийТек",СписокИспользуемыхВерсий);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст = Запрос.Текст + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ИтоговыеЗначения.Показатель,
	|	СУММА(ИтоговыеЗначения.Значение) КАК ТекЗначение,
	|	СУММА(ИтоговыеЗначения.Корректировка) КАК ТекКорректировка,
	|	СУММА(ИтоговыеЗначения.Значение+ИтоговыеЗначения.Корректировка) КАК ТекИтоговоеЗначение
	|ИЗ (ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ВЫБОР 
	|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.НастраиваемыйОтчет ТОГДА
	|			ЗначенияПоказателейОтчетов.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейОтчетов.Регистратор ССЫЛКА Документ.РучныеКорректировки ТОГДА
		|			ЗначенияПоказателейОтчетов.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Корректировка";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|0 КАК Корректировка";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	("+ТекстВложенногоЗапросаТек+") КАК ЗначенияПоказателейОтчетов";
	
	Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ"+Сред(ТекстАналитики,3);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|) КАК ИтоговыеЗначения";
	
	// Получаем корректировки отчета
	
	Запрос.Текст=Запрос.Текст+"
	|СГРУППИРОВАТЬ ПО ИтоговыеЗначения.Показатель) КАК ТекИтоговыеЗначения 
	|ПО ИтоговыеЗначения.Показатель=ТекИтоговыеЗначения.Показатель 
	|СГРУППИРОВАТЬ ПО 
	|	ИтоговыеЗначения.Показатель,
	|	ИтоговыеЗначения.Организация,
	|	ИтоговыеЗначения.ЭкземплярОтчета,
	|	ТекИтоговыеЗначения.ТекЗначение,
	|	ТекИтоговыеЗначения.ТекКорректировка,
	|	ТекИтоговыеЗначения.ТекИтоговоеЗначение";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция формирует таблицу значений документа для расшифровки показателей.
Функция ПолучитьРасшифровкуПоказателя(МассивПоказателей, ТипРасшифровки, ОтборПоАналитикам = Неопределено) Экспорт
	
	Если ТипРасшифровки = "Периоды" Тогда
		мТабРасшифровкиПоказателей = ПолучитьРасшифровкуСверткиПоПериодам(МассивПоказателей, ОтборПоАналитикам);
	ИначеЕсли ТипРасшифровки = "Аналитики" Тогда
		мТабРасшифровкиПоказателей = ПолучитьРасшифровкуПоказателяСвернутогоПоАналитике(МассивПоказателей, ОтборПоАналитикам);
	ИначеЕсли ТипРасшифровки = "ОрганизацияПроекты" Тогда
		мТабРасшифровкиПоказателей = ПолучитьРасшифровкуПоказателяСвернутогоПоПроектам(МассивПоказателей, ОтборПоАналитикам);
	ИначеЕсли ТипРасшифровки = "ПроектОрганизации" Тогда
		мТабРасшифровкиПоказателей = ПолучитьРасшифровкуПоказателяСвернутогоПоОрганизациямПроекта(МассивПоказателей, ОтборПоАналитикам);
	КонецЕсли;
	
	Если ТипЗнч(мТабРасшифровкиПоказателей)=Тип("ТаблицаЗначений") Тогда
		
		Возврат мТабРасшифровкиПоказателей;
		
	Иначе
		
		Возврат ПолучитьПустуюТаблицуРасшифровки();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПустуюТаблицуРасшифровки() Экспорт
	
	мТабРасшифровкиПоказателей=Новый ТаблицаЗначений;
	
	мТабРасшифровкиПоказателей.Колонки.Добавить("Организация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Организации"));
	мТабРасшифровкиПоказателей.Колонки.Добавить("Период",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
	мТабРасшифровкиПоказателей.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	мТабРасшифровкиПоказателей.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	мТабРасшифровкиПоказателей.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	мТабРасшифровкиПоказателей.Колонки.Добавить("Доля",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	мТабРасшифровкиПоказателей.Колонки.Добавить("Регистратор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));
	мТабРасшифровкиПоказателей.Колонки.Добавить("ИндексПрисутствияВПериоде",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));

	Возврат мТабРасшифровкиПоказателей;
	
КонецФункции // ПолучитьПустуюТаблицуРасшифровки()

// Формирует структуру параметров (Параметры), которая будет доступна из модулей отчета.
// Ключи структуры - имена параметров, значения - значения параметров.
//
Процедура СформироватьСтруктуруПараметров() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Номер", Номер);
	Параметры.Вставить("Дата", Дата);
	Для Каждого Реквизит Из Метаданные.Документы.НастраиваемыйОтчет.Реквизиты Цикл
		Параметры.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;
	Для Каждого Парам Из ПараметрыОтчета Цикл
		Если СокрЛП(Парам.Код) <> "" Тогда
			НовоеЗначениеПараметра = ?(ПустаяСтрока(Парам.ЗначениеСтрока), Парам.Значение, Парам.ЗначениеСтрока);
			Параметры.Вставить(Парам.Код, НовоеЗначениеПараметра);
		Иначе
			Продолжить;			// Пустой параметр.
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Формирует структуру показателей (Показатели), которая будет доступна из модулей отчета.
// Ключи структуры - коды показателей, значения - значения показателей.
//
Процедура СформироватьСтруктуруПоказателей() Экспорт
	
	Показатели = Новый Структура;
	
	Для Каждого Пок из мПоказатели Цикл
		Показатели.Вставить(Пок.Код, Пок.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Переносит значения показателей из структуры Показатели в глобальную таблицу показателей - 
// мПоказатели.
//
Процедура ПеренестиЗначенияИзПоказателиВмПоказатели(ТаблицаПоказателей = Неопределено, ПроверятьИзменение = Истина, РежимВычисления = Ложь, ПересчитатьВВалюту = Истина) Экспорт
	
	ИспользуетсяГлобальнаяТаблица = ТаблицаПоказателей = Неопределено;
	Если ИспользуетсяГлобальнаяТаблица Тогда
		ТаблицаПоказателей = мПоказатели;
	КонецЕсли;
	
	Для Каждого Кл Из Показатели Цикл
		
		Если ИспользуетсяГлобальнаяТаблица Тогда
			
			Пок=мСоответствиеДляПоискаПоКоду[Кл.Ключ];
			
		Иначе
			
			Пок = ТаблицаПоказателей.Найти(Кл.Ключ, "Код");
			
		КонецЕсли;
		
		Если Пок <> Неопределено Тогда
			
			Если ИспользуетсяГлобальнаяТаблица Тогда
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Пок, Кл.Значение,РежимВычисления);
			Иначе
				Пок.Значение = Кл.Значение;
			КонецЕсли;
			
			Если ПересчитатьВВалюту И УправляемыйРежим И (НЕ мТекущаяВалюта=ОсновнаяВалюта) Тогда
				
				СтрВалюта=мПоказателиВВалюте.Найти(Кл.Ключ, "Код");
				
				Если НЕ СтрВалюта=Неопределено Тогда
					
					СтрВалюта.Значение=ПересчитатьЗначениеПоказателяПоКурсу(Кл.Значение, СтрВалюта, ОсновнаяВалюта, мТекущаяВалюта);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит значения показателей из структуры Параметры в табличную часть документа - 
// ПараметрыОтчета.
//
Процедура ПеренестиЗначенияИзПараметрыВПараметрыОтчета() Экспорт
	
	Для Каждого Кл Из Параметры Цикл
		
		Параметр = ПараметрыОтчета.Найти(Кл.Ключ, "Код");
		Если НЕ Параметр = Неопределено Тогда	
			Параметр.Значение = Кл.Значение;
			
			Если ТипЗнч(Кл.Значение)=Тип("Строка") Тогда
				Параметр.ЗначениеСтрока= Кл.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Вычисляет значения показателей в дополнительной валюте на основе значений показателей
// в основной валюте отчета.
//
Функция ПолучитьЗначенияПоказателейВВалюте(ТаблицаПоказателей, Валюта, ПризнакОшибки=Ложь, ВыполнитьПроцедуруВычисления = Истина) Экспорт
	
	мПоказателиКопия = ТаблицаПоказателей.Скопировать(); // создаем копию таблицы показателей для значений в новой валюте
	ОбработкаПериодовРасчета = мПоказателиКопия.Колонки.Найти("ПериодРасчета") <> Неопределено;
	
	ПересчитатьВВалюту_мПоказателиДляПересчета(мПоказателиКопия, Валюта, ПризнакОшибки);
	
	Если (ВыполнитьПроцедуруВычисления = Истина) 
		И (НЕ (ПризнакОшибки ИЛИ ПустаяСтрока(ПравилоОбработки.ПроцедураВычисления))) 
		И (ТаблицаПоказателей.Количество()=мПоказатели.Количество()) Тогда
		
		// Запускаем процедуру вычисления по значениям показателей в валюте
		
		// Сохраним значения показателей в основной валюте
		ПоказателиВОсновнойВалюте=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Показатели);
		
		Попытка
			
			Для Каждого Пок из мПоказателиКопия Цикл
				Показатели.Вставить(Пок.Код, Пок.Значение);
			КонецЦикла;
			
			ТекстПроцедурыВычисления=?(АнализЧувствительности,СтрЗаменить(ПравилоОбработки.ПроцедураВычисления,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),ПравилоОбработки.ПроцедураВычисления);
			Выполнить(ТекстПроцедурыВычисления);
			
			ПеренестиЗначенияИзПоказателиВмПоказатели(мПоказателиКопия);
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Во время исполнения процедуры вычисления произошла следующая критическая ошибка:
			|%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			ПризнакОшибки = Истина;
		КонецПопытки;
		
		// Восстановим значения показателей в основной валюте
		Показатели=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ПоказателиВОсновнойВалюте);
		
	КонецЕсли;
	
	Возврат мПоказателиКопия;
	
КонецФункции

Процедура ПересчитатьВВалюту_мПоказателиДляПересчета(мПоказателиДляПересчета, Валюта, ПризнакОшибки)
	
	КэшУточнениеПересчетаВалют = Неопределено;	
	ПоказателиВВалюте = Новый Соответствие;
	
	Для Каждого Пок Из мПоказателиДляПересчета Цикл // для каждого показателя
		
		Если Пок.ВидКурса.Пустая() Тогда
			Продолжить; // группирующие счета рассчитываются при вычислении
		КонецЕсли;
		
		Пок.Значение = ПересчитатьЗначениеПоказателяПоКурсу(Пок.Значение, Пок, ОсновнаяВалюта, Валюта, ПризнакОшибки, КэшУточнениеПересчетаВалют);
		ПоказателиВВалюте.Вставить(Пок.Код,Пок.Значение);
		
	КонецЦикла;

КонецПроцедуры

// Вычисляет значения показателей раскрытия в дополнительной валюте на основе значений
// показателей раскрытия в основной валюте отчета.
//
Функция ПолучитьЗначенияПоказателейРаскрытияВВалюте(ТаблицаПоказателей,ТаблицаПоказателейРаскрытия, Валюта, ПризнакОшибки=Ложь) Экспорт
	
	мПоказателиРаскрытияКопия = ТаблицаПоказателейРаскрытия.Скопировать(); // создаем копию таблицы показателей раскрытия для значений в новой валюте
	
	ОбработкаПериодовРасчета = ТаблицаПоказателей.Колонки.Найти("ПериодРасчета") <> Неопределено;
	
	Для Каждого Стр Из мПоказателиРаскрытияКопия Цикл // для каждого показателя
		
		Пок = ТаблицаПоказателей.Найти(Стр.Показатель, "Ссылка");				
		Стр.Значение=ПересчитатьЗначениеПоказателяПоКурсу(Стр.Значение, Пок, ОсновнаяВалюта, Валюта,ПризнакОшибки);
		
	КонецЦикла;
	
	Возврат мПоказателиРаскрытияКопия;
	
КонецФункции

Функция ПолучитьЗначениеПоказателяВОсновнойВалюте(Показатель, ЗначениеПоказателя = Неопределено) Экспорт
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя = Показатель.Значение;
	КонецЕсли;
	
	ПризнакОшибки = Ложь;
	
	ТекЗначение = ПересчитатьЗначениеПоказателяПоКурсу(ЗначениеПоказателя, Показатель, мТекущаяВалюта, ОсновнаяВалюта, ПризнакОшибки);
	
	Если ПризнакОшибки Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТекЗначение;
	КонецЕсли;
	
КонецФункции

Процедура ПересчитатьРабочиеТаблицыВВалютуОтображения(ПризнакОшибки=Ложь) Экспорт

	Ошибка = Ложь;
	МассивПоказателейДляПересчета = Неопределено;
	ИндексПоКоду = Неопределено;
	
	//Сохраняем текущие значения
	Показатели_До = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Показатели);
	Если РежимКорректировки Тогда		
		мПоказатели_До = мКорректировкиПоказателей.Скопировать();
		мПоказателиРаскрытия_До = мКорректировкиПоказателейРаскрытия.Скопировать();
	Иначе		
		мПоказатели_До = мПоказатели.Скопировать();
		мПоказателиРаскрытия_До = мПоказателиРаскрытия.Скопировать();	
	КонецЕсли;
	
	ПересчитатьВВалюту_мПоказателиДляПересчета(мПоказатели, мТекущаяВалюта, Ошибка);	
	Если Не Ошибка Тогда		
		мПоказателиРаскрытия = ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели, мПоказателиРаскрытия_До, мТекущаяВалюта, Ошибка);
		СформироватьСтруктуруПоказателей();//Поместим Валютные суммы из "мПоказатели" в "Показатели" для расчета вычисляемых
	КонецЕсли; 
	
	//Сохраняем мПоказателиВВалюте
	Если мПоказателиВВалюте = Неопределено Тогда
		мПоказателиВВалюте_До = Неопределено;		
	Иначе
	    мПоказателиВВалюте_До = мПоказателиВВалюте;		
	КонецЕсли;	
	мПоказателиВВалюте = мПоказатели;	
	
	//Запускаем процедуру вычисления  
	Если Не Ошибка Тогда
		ИндексПоКоду = мПоказатели.Индексы.Добавить("Код");
		//Для расчета в валюте мПоказатели должны быть в валюте
		//ПеренестиЗначенияИзПоказателиВмПоказатели(мПоказатели, Ложь, Истина, Ложь);
		ОбработатьПоПараметрическойНастройкеПриВычисленииВВалюте(, Ошибка);
		ПеренестиЗначенияИзПоказателиВмПоказатели(мПоказатели, Ложь, Истина, Ложь);// Обновим вычисляемые показатели для расчета ТР 
	КонецЕсли;
	
	ЕстьИзмененияПоКурсовымРазницам = Ложь;
	Если Не Ошибка Тогда
		ТрансляционныйРезервУХ.РассчитатьКурсовуюРазницуТР(ЭтотОбъект, мПоказатели, МассивПоказателейДляПересчета, ЕстьИзмененияПоКурсовымРазницам);
	КонецЕсли;
	
	Если Не Ошибка Тогда
		РассчитатьКурсовуюРазницу(мПоказатели, ЕстьИзмененияПоКурсовымРазницам);	
	КонецЕсли; 
	
	Если (Не Ошибка) И ЕстьИзмененияПоКурсовымРазницам Тогда
		ОбработатьПоПараметрическойНастройкеПриВычисленииВВалюте(МассивПоказателейДляПересчета, Ошибка);
	КонецЕсли;
	
	Если Не Ошибка И ЕстьИзмененияПоКурсовымРазницам Тогда
		ПеренестиЗначенияИзПоказателиВмПоказатели(мПоказатели, Ложь, Истина, Ложь);
		ПеренестиЗначенияИзПоказателиВмПоказатели(мПоказателиВВалюте, Ложь, Истина, Ложь);
	КонецЕсли;
	
	//Значения в дополнительной валюте
	
	Если Не Ошибка Тогда
		мПоказателиВВалюте = мПоказатели;
		мПоказателиРаскрытияВВалюте = мПоказателиРаскрытия;
		ПоказателиВВалюте = Показатели;
	Иначе
		мПоказателиВВалюте = ?(мПоказателиВВалюте_До=Неопределено,мПоказатели,мПоказателиВВалюте_До);
	КонецЕсли;
	
	//Возвращаем значения в основной валюте
	Показатели = Показатели_До;
	Если РежимКорректировки Тогда
		мКорректировкиПоказателей = мПоказатели_До;
		мКорректировкиПоказателейРаскрытия = мПоказателиРаскрытия_До;
	Иначе
		мПоказатели = мПоказатели_До;
		мПоказателиРаскрытия = мПоказателиРаскрытия_До;	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьПоПараметрическойНастройкеПриВычисленииВВалюте(МассивКодовПоказателей = Неопределено, Ошибка = Ложь)

	ВычислениеВыполнено = НЕ Ошибка;
	
	ДополнительныеСвойства.Вставить("ВычислениеВДополнительнойВалюте");
	
	ВыполнитьПроцедуруВычисления(ВычислениеВыполнено, Ложь);
	ПеренестиЗначенияИзПоказателиВмПоказатели(мПоказатели,,,Ложь);
	
	Если ВычислениеВыполнено Тогда
		
		ОбработатьПоПараметрическойНастройкеПриВычислении(МассивКодовПоказателей, ВычислениеВыполнено);
		
	КонецЕсли;
	
	Если ВычислениеВыполнено Тогда
		ВыполнитьПроцедуруПослеВычисления(ВычислениеВыполнено, Ложь);
	КонецЕсли;
	
	ДополнительныеСвойства.Удалить("ВычислениеВДополнительнойВалюте");

КонецПроцедуры

Процедура РассчитатьКурсовуюРазницу(ТаблицаПоказателейВалюты, ЕстьИзмененияПоКурсовымРазницам = Ложь, МассивПоказателейДляПересчета = Неопределено)
	
	Если МассивПоказателейДляПересчета = Неопределено Тогда
		МассивПоказателейДляПересчета = Новый Массив;
	КонецЕсли;
	
	МассивПоказателей = ТаблицаПоказателейВалюты.НайтиСтроки(Новый Структура("ДляОтраженияКурсовыхРазниц", Истина));
	Если НЕ МассивПоказателей.Количество() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаСКД = ТаблицаПоказателейВалюты.Скопировать(Новый Структура("ВидИтогаПоСчету",Перечисления.ВидыБухгалтерскихИтогов.СКД),"Значение");
	ТаблицаСКК = ТаблицаПоказателейВалюты.Скопировать(Новый Структура("ВидИтогаПоСчету",Перечисления.ВидыБухгалтерскихИтогов.СКК),"Значение");
	
	СуммаНевязки = ТаблицаСКД.Итог("Значение") - ТаблицаСКК.Итог("Значение");
		
	Для Каждого СтрПоказатель ИЗ МассивПоказателей Цикл
		
		Если СтрПоказатель.Значение <> СуммаНевязки Тогда			
			
			СтрПоказатель.Значение = СуммаНевязки;
			ЕстьИзмененияПоКурсовымРазницам = Истина;
			ОбщегоНазначенияУХ.ДобавитьМассивВСписокЗначений(МассивПоказателейДляПересчета, ПолучитьПутьВычисления(СтрПоказатель.Код));
						
		КонецЕсли; 
		
	КонецЦикла;
			
КонецПроцедуры // РассчитатьКурсовуюРазницу() 

// Пересчет значений показателей в дополнительных валютах при изменении курса.
Процедура ПересчитатьЗначенияПоказателейПоНовомуКурсу() Экспорт
	
	Если НЕ УстановитьБлокировку() Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////
	// Получим набор версий, по которым записывались показатели в валюте
	
	СписокВалютСИзмененнымКурсом=Новый СписокЗначений;
	СписокВалютСИзмененнымКурсом.ЗагрузитьЗначения(ТаблицаВалютСИзмененнымКурсом.ВыгрузитьКолонку("Валюта"));
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета = &ЭкземплярОтчета
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Валюта В(&СписокВалютСИзмененнымКурсом)"; 
	
	Запрос.УстановитьПараметр("ЭкземплярОтчета", Ссылка);
	Запрос.УстановитьПараметр("СписокВалютСИзмененнымКурсом", СписокВалютСИзмененнымКурсом);
	
	СписокВерсийВВалюте=Новый СписокЗначений;
	СписокВерсийВВалюте.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсийВВалюте);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Валюта","Валюта");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Ссылка","Версия");
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	МаксАналитикПоказателя=ОбщегоНазначенияУХ.МаксКоличествоАналитикПоказателей(ВидОтчета);
	МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
	
	РабочееКоличествоАналитик=?(МаксАналитикПоказателя>МаксАналитикОтчета,МаксАналитикПоказателя,МаксАналитикОтчета);
	
	Запрос.Текст="ВЫБРАТЬ *
	|Поместить ТаблицаВалютСИзмененнымКурсом
	|ИЗ &ТаблицаВалютСИзмененнымКурсом КАК ТаблицаВалютСИзмененнымКурсом
	|;
	|ВЫБРАТЬ
	|ЗначенияПоказателейОтчетов.Версия КАК Версия,
	|ЗначенияПоказателейОтчетов.ЧислоАналитикГруппыРаскрытия КАК ЧислоАналитикГруппыРаскрытия,
	|ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|ЗначенияПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,";
	
	Для Индекс=1 По РабочееКоличествоАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|ЗначенияПоказателейОтчетов.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла; 
	
	Запрос.Текст=Запрос.Текст+"
	|ВЫБОР КОГДА ЗначенияПоказателейОтчетов.Показатель.ЧисловойПоказатель
	|				И (НЕ ЗначенияПоказателейОтчетов.Показатель.НеФинансовый)
	|				И (ЗначенияПоказателейОтчетов.Показатель.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаКонецПериода)
	|				ИЛИ ЗначенияПоказателейОтчетов.Показатель.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаНачалоПериода)
	|				ИЛИ ЗначенияПоказателейОтчетов.Показатель.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериод)
	|				ИЛИ ЗначенияПоказателейОтчетов.Показатель.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериодМСФО))
	|      ТОГДА ЗначенияПоказателейОтчетов.Значение * ЕСТЬNULL(ТаблицаВалютСИзмененнымКурсом.Отношение,1)
	|		ИНАЧЕ ЗначенияПоказателейОтчетов.Значение 
	|КОНЕЦ КАК Значение,
	|ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение
	|ИЗ ("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВалютСИзмененнымКурсом КАК ТаблицаВалютСИзмененнымКурсом
	|ПО ЗначенияПоказателейОтчетов.Валюта=ТаблицаВалютСИзмененнымКурсом.Валюта
	|И ЗначенияПоказателейОтчетов.Показатель.ВидКурса=ТаблицаВалютСИзмененнымКурсом.ВидКурса";
	
	ИмяТаблицыСинтетики=?(МаксАналитикОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+МаксАналитикОтчета);
	
	Запрос.УстановитьПараметр("ТаблицаВалютСИзмененнымКурсом",ТаблицаВалютСИзмененнымКурсом);
	
	мСоответствиеНаборовЗаписей=Новый Соответствие;
	
	НачатьТранзакцию();
	Выборка = Запрос.Выполнить().Выбрать();
	ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИтоговоеЗначение Тогда
			
			ДобавитьЗаписьВРегистр(ОбъектРасчета,ИмяТаблицыСинтетики, Выборка);
			
		Иначе
			
			Если МаксАналитикОтчета+Выборка.ЧислоАналитикГруппыРаскрытия=0 Тогда
				
				ДобавитьЗаписьВРегистр(ОбъектРасчета,"ЗначенияПоказателейОтчетовВалютные", Выборка);
				
			Иначе	
				
				ДобавитьЗаписьВРегистр(ОбъектРасчета,"ЗначенияПоказателейОтчетов"+(МаксАналитикОтчета+Выборка.ЧислоАналитикГруппыРаскрытия), Выборка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВерсияНабора ИЗ мСоответствиеНаборовЗаписей Цикл
		
		Для Каждого НаборЗаписей ИЗ ВерсияНабора.Значение Цикл
			
			НаборЗаписей.Значение.Записать(Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИМПОРТА ДАННЫХ

// Функция приводит строковое представление даты к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов значения типа дата
//
// Возвращаемое значение:
//  Значение типа дата
//
Функция ПривестиКДате(Представление, ТипРеквизита)
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
	Если Результат = '00010101' Тогда
		
		МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
		Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			Попытка
				
				Если МассивЧастей.Количество() = 3 Тогда
					Результат = Дата(1,1,1, МассивЧастей[0],МассивЧастей[1],МассивЧастей[2]);
				ИначеЕсли МассивЧастей.Количество() = 6 Тогда
					Результат = Дата(1,1,1, МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
				
			Исключение
				
			КонецПопытки;
			
		ИначеЕсли МассивЧастей.Количество() = 3 или МассивЧастей.Количество() = 6 Тогда
			
			Если МассивЧастей[0] >= 1000 Тогда
				Временно = МассивЧастей[0];
				МассивЧастей[0] = МассивЧастей[2];
				МассивЧастей[2] = Временно;
			КонецЕсли;
			
			Если МассивЧастей[2] < 100 Тогда
				МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000,1900);
			КонецЕсли;
			
			Попытка
				Если МассивЧастей.Количество() = 3 или ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0]);
				Иначе
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0],МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает части представления даты
//
// Параметры:
//  Представление - Представление даты
//
// Возвращаемое значение:
//  массив частей даты
//
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
	Для к = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, к ,1);
		ЭтоЦифра = Символ >= "0" и Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = к;
			КонецЕсли;
			
		Иначе
			
			Если Не НачалоЦифры = 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, к - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НачалоЦифры = 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
КонецФункции // ()


// Запускает сравнение табличных документов.
// Инициализирует экспортные переменные формы СравнениеМакетов и передает управление 
// на экспортную процедуру сравнения.
//
Функция СравнитьМакеты(МакетСДанными, Форма = Неопределено, ПараметрыУспешногоИмпорта = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(БланкИмпорта) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для документа: %Ссылка% не установлен бланк импорта'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Ссылка));
		ноСообщить(ТекстСообщения);	
		Возврат Ложь;
	КонецЕсли;
	
	ИсходныйМакет = БланкИмпорта.Макет.Получить();
	
	Если  ИсходныйМакет = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для документа: %Ссылка% бланк импорта не содержит макет.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Ссылка));
		ноСообщить(ТекстСообщения);	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗагрузитьДанныеИзМакета(МакетСДанными, ТихийРежим, ПараметрыУспешногоИмпорта);
	
КонецФункции

Функция ПроверитьРасширенныйРежимИмпорта()
	
	Если ИспользуемаяИБ.Пустая() Тогда
		Возврат Новый Структура("РасширенныйРежим, Пароль", Ложь, "");
	Иначе
		Возврат Новый Структура("РасширенныйРежим, Пароль", ИспользуемаяИБ.РасширенныйСпособИмпорта, ИспользуемаяИБ.ПарольНаСтраницу);
	КонецЕсли;
	
КонецФункции

Функция ИмпортироватьОбластиРаскрытия(ИмяГруппы, ИмяГруппыСтроки, ОписаниеОбластей, МакетГруппыИсходный, МакетГруппыЗагружаемый, ТекущаяТаблицаРаскрытия, ТаблицаЗагружаемыхЗначений)
	
	Если МакетГруппыЗагружаемый = Неопределено ИЛИ МакетГруппыИсходный = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	ОписаниеОбластей.Очистить();
	
	Для Каждого Обл Из МакетГруппыИсходный.Области Цикл
		
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда
			Если ИмяГруппыСтроки <> Неопределено Тогда
				ПоискИмени = СтрЗаменить(Обл.Имя, ИмяГруппыСтроки, ИмяГруппы);
			Иначе
				ПоискИмени = Обл.Имя;
			КонецЕсли;
			
			ТекСтрока = ОписаниеОбластей.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрока, Обл, , "Имя");
			ТекСтрока.Имя = ПоискИмени;
			Если ТаблицаЗагружаемыхЗначений.Колонки.Найти(ПоискИмени) = Неопределено Тогда
				
				Если Обл.ТипЗначения.Типы()[0] = ТипЗнч("Строка") И Обл.ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда
					ТекТипЗначения = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
				Иначе
					ТекТипЗначения = Обл.ТипЗначения;
				КонецЕсли;
				ТаблицаЗагружаемыхЗначений.Колонки.Добавить(ПоискИмени,ТекТипЗначения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = МакетГруппыИсходный.ВысотаТаблицы;
	ВысотаЗагружаемого = МакетГруппыЗагружаемый.ВысотаТаблицы;
	ЧислоСтрокРаскрытия = Цел(ВысотаЗагружаемого/ВысотаСтроки);
	
	Если ВысотаСтроки > 1 ИЛИ ТекущаяТаблицаРаскрытия = Неопределено Тогда
		// пробегаем по всем областям секции-раскрытия и заполняем таблицу значений
		Для НомСтр = 0 По ЧислоСтрокРаскрытия Цикл
			МакетТекСтроки = МакетГруппыЗагружаемый.ПолучитьОбласть(НомСтр * ВысотаСтроки + 1, 0, НомСтр * ВысотаСтроки + ВысотаСтроки, 0);
			СтрокаЗначений = ТаблицаЗагружаемыхЗначений.Добавить();
			Для Каждого ОписаниеОбласти Из ОписаниеОбластей Цикл
				ОбластьПоказателя = МакетТекСтроки.Область(ОписаниеОбласти.Верх, ОписаниеОбласти.Лево, ОписаниеОбласти.Низ, ОписаниеОбласти.Право);
				Если ОбластьПоказателя.СодержитЗначение = Истина Тогда
					ЗначениеПоказателя = ОбластьПоказателя.Значение;
				Иначе
					Попытка
						ЗначениеПоказателя = ОбластьПоказателя.Текст;
					Исключение
						ЗначениеПоказателя = Неопределено;
						ОшибкаПереносаДанных = Истина;
						Если НЕ ТихийРежим Тогда
							#Если ВнешнееСоединение Тогда
								Возврат 0;
							#Иначе
								ТекстСообщения = НСтр("ru = 'Не удалось получить значение показателя ""%ИмяОбласти%"" строки ""%НомерСтроки%"" группы раскрытия с кодом ""%ИмяГруппы%"".'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбласти%", Строка(ОписаниеОбласти.Имя));
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(НомСтр + 1));
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяГруппы%", Строка(ИмяГруппы));
								ноСообщить(ТекстСообщения, СтатусСообщения.Важное);
							#КонецЕсли
						Иначе
							Возврат 0;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда // учтем особенность импорта табличных документов с объединенными ячейками в формат Excel
					Попытка
						времЗначениеПоказателя = МакетТекСтроки.Область(ОписаниеОбласти.Верх, ОписаниеОбласти.Лево, ОписаниеОбласти.Верх, ОписаниеОбласти.Лево).Текст;
						Если ЗначениеЗаполнено(времЗначениеПоказателя) Тогда
							ЗначениеПоказателя = времЗначениеПоказателя;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				СтрокаЗначений[ОписаниеОбласти.Имя] = ЗначениеПоказателя;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для НомСтр = 0 По ЧислоСтрокРаскрытия - 1 Цикл
			СтрокаЗначений = ТаблицаЗагружаемыхЗначений.Добавить();
			Для Каждого ОписаниеОбласти Из ОписаниеОбластей Цикл
				Попытка
					СтрокаЗначений[ОписаниеОбласти.Имя] = ТекущаяТаблицаРаскрытия[ОписаниеОбласти.Лево - 1][НомСтр + ОписаниеОбласти.Верх - 1];
				Исключение КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 2;
	
КонецФункции

Функция ЗаписатьЗначениеВПоказатель(ЗначениеПоказателя, СтрокаПоказателя, ТекстСообщения, МасштабИмпорта)
	
	Попытка
		Если СтрокаПоказателя.Элемент.ТипЗначения = ТипЗначенияЧисло ИЛИ СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка() Тогда
			Если Лев(ЗначениеПоказателя, 1) = "(" И Прав(ЗначениеПоказателя, 1) = ")" Тогда
				ЗначениеПоказателя = "-" + СокрЛП(Сред(ЗначениеПоказателя, 2, СтрДлина(ЗначениеПоказателя) - 2));
			КонецЕсли;
				СтрокаПоказателя.Элемент.Значение = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Число(ЗначениеПоказателя), 0) * ?(СтрокаПоказателя.Элемент.НеМасштабируется, 1, МасштабИмпорта);
		ИначеЕсли СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
			СтрокаПоказателя.Элемент.Значение = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Дата(ЗначениеПоказателя), '00010101');
		ИначеЕсли СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
			СтрокаПоказателя.Элемент.Значение = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Строка(ЗначениеПоказателя), "");
		ИначеЕсли СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
			СтрокаПоказателя.Элемент.Значение = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Булево(ЗначениеПоказателя), Ложь);
		КонецЕсли;
	Исключение
		Если НЕ ТихийРежим Тогда
			#Если ВнешнееСоединение Тогда
				//ТекстСообщения = "Не удалось импортировать значение показателя " + Обл.Имя + "! Значение в импортируемом документе: " + ЗначениеПоказателя + ".
				//|Координаты ячейки: строка = " + ?(Обл.Низ = Обл.Верх, Обл.Низ, "" + Обл.Верх + " - " + Обл.Низ) + "; колонка = " + ?(Обл.Лево = Обл.Право, Обл.Лево, "" + Обл.Лево + " - " + Обл.Право) + ".";
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное);
			#Иначе
				Возврат 0;
			#КонецЕсли
		Иначе
			Возврат 0;
		КонецЕсли;
		
		Если СтрокаПоказателя.Элемент.ТипЗначения = ТипЗначенияЧисло Тогда
			СтрокаПоказателя.Элемент.Значение = 0;
		ИначеЕсли СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
			СтрокаПоказателя.Элемент.Значение = '00010101';
		ИначеЕсли СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
			СтрокаПоказателя.Элемент.Значение = "";
		ИначеЕсли СтрокаПоказателя.Элемент.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
			СтрокаПоказателя.Элемент.Значение = Ложь;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Импортирует данные в отчет из табличного документа, для которого установлена "идентичность бланка".
// Импортируются как показатели основной части макета, так и показатели раскрытия.
// После успешного импорта сравниваются значения показателей до и после запуска процедуры вычисления.
// Возвращаемое значение
//  0 - Импорт закончился неудачей.
//  1 - Импорт завершен успешно.
//  2 - Импорт завершился, но есть информационные сообщения в окне сообщений, с которыми нужно ознакомиться (для внешнего соединения).
//
Функция ЗагрузитьДанныеИзМакета(ТаблДок, ТихийРежим, ПараметрыСохраненияПослеУдачногоИмпорта = Неопределено, СоответствиеИмпортируемыхОбластей = Неопределено) Экспорт
	
	КэшВыводВМакетКода = Новый Соответствие; // Хранит ссылки на виды субконто, для которых код не является ключевым полем.
	
	Если БланкИмпорта.Пустая() Тогда
		БланкИмпорта = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта, ВидОтчета, Сценарий, Организация, ПериодОтчета);
	КонецЕсли;
	
	ИсходныйМакет = БланкИмпорта.Макет.Получить();
	ПроверитьКонтекстИнициализирован();
	
	ПоказателиДо = мПоказатели.Скопировать();
	ПараметрыДо  = ПараметрыОтчета.Выгрузить();
	ПараметрыДо.Колонки.Добавить("Предустановленный", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПараметрыДо.ЗаполнитьЗначения(Ложь, "Предустановленный");
	
	ТекСтрока = ПараметрыДо.Добавить();
	ТекСтрока.Код = "Организация";
	ТекСтрока.Наименование = Нстр("ru = 'Организация'");
	ТекСтрока.Значение     = Организация;
	ТекСтрока.Предустановленный = Истина;
	
	ТекСтрока = ПараметрыДо.Добавить();
	ТекСтрока.Код = "ПериодОтчета";
	ТекСтрока.Наименование = Нстр("ru = 'Период отчета'");
	ТекСтрока.Значение     = ПериодОтчета;
	ТекСтрока.Предустановленный = Истина;
	
	ТекСтрока = ПараметрыДо.Добавить();
	ТекСтрока.Код = "Сценарий";
	ТекСтрока.Наименование = Нстр("ru = 'Сценарий отчета'");
	ТекСтрока.Значение     = Сценарий;
	ТекСтрока.Предустановленный = Истина;
	
	ТекСтрока = ПараметрыДо.Добавить();
	ТекСтрока.Код = "ОсновнаяВалюта";
	ТекСтрока.Наименование = Нстр("ru = 'Валюта отчета'");
	ТекСтрока.Значение     = ОсновнаяВалюта;
	ТекСтрока.Предустановленный = Истина;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ВидАналитики = ВидОтчета["ВидАналитики" + Инд];
		Если ЗначениеЗаполнено(ВидАналитики) Тогда
			ТекСтрока = ПараметрыДо.Добавить();
			ТекСтрока.Код = "Аналитика" + Инд;
			ТекСтрока.Наименование = "Аналитика " + Инд;
			ТипЗначения = ВидАналитики.ТипЗначения.Типы()[0];
			ТекСтрока.Значение = Новый(ТипЗначения);
			ТекСтрока.Предустановленный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоотвПоказателиДо = Новый ТаблицаЗначений;
	СоотвПоказателиДо.Колонки.Добавить("Код");
	СоотвПоказателиДо.Колонки.Добавить("Элемент");
	СоотвПоказателиДо.Колонки.Добавить("ИспользуетсяВМакете");
	Для Каждого Элемент Из ПоказателиДо Цикл
		Элемент.Значение = ?(ЗначениеЗаполнено(Элемент.ТипЗначения), ПустоеЗначениеПоТипу[Элемент.ТипЗначения],0); // По умолчанию принимаем тип Число.
		
		НоваяСтрока                     = СоотвПоказателиДо.Добавить();
		НоваяСтрока.Код                 = Элемент.Код;
		НоваяСтрока.Элемент             = Элемент;
		НоваяСтрока.ИспользуетсяВМакете = Ложь;
		
	КонецЦикла;
	
	СоотвПоказателиДо.Индексы.Добавить("Код");
	
	МасштабИмпорта = 1;
	Если мЭтоИмпортXLS = Истина Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			МасштабИмпорта = 1000;
		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			МасштабИмпорта = 1000000;
		КонецЕсли;
	КонецЕсли;
	
	// импорт показателей статической части
	Если НЕ ТихийРежим Тогда
		#Если Клиент Тогда
			Состояние(Нстр("ru = 'Импорт основной части...'"));
		#КонецЕсли
	КонецЕсли;
	ОшибкаПереносаДанных = Ложь;
	ИспользоватьСтандартныйРежимВвода = Истина; //В случае, если нет именованных областей строк использовать стандартный ввод.
	
	Если мЭтоИмпортXLS И СоответствиеИмпортируемыхОбластей <> Неопределено Тогда
		
		// Импорт строк отчета.
		
		ЗапросПоСтрокам = Новый Запрос;
		ЗапросПоСтрокам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиОтчетов.Ссылка КАК СтрокаОтчета,
		|	СтрокиОтчетов.Код КАК КодСтрокиОтчета
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &Владелец
		|	И (НЕ СтрокиОтчетов.ПометкаУдаления)";
		
		ЗапросПОСтрокам.УстановитьПараметр("Владелец", ВидОтчета);
		
		ВыборкаСтрок = ЗапросПоСтрокам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрок.Следующий() Цикл
			
			ВыборкаПоказателей = ВыборкаСтрок.Выбрать();
			ИмяОбласти = "Область_Строка_" + СокрЛП(ВыборкаСтрок.КодСтрокиОтчета);
			ТаблицаИмпортируемыхЗначений = СоответствиеИмпортируемыхОбластей[ИмяОбласти];
			
			Если ТаблДок.Области.Найти(ИмяОбласти) = Неопределено ИЛИ ИсходныйМакет.Области.Найти(ИмяОбласти) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмпортируемаяОбласть = ТаблДок.ПолучитьОбласть(ИмяОбласти);
			ИсходнаяОбласть      = ИсходныйМакет.ПолучитьОбласть(ИмяОбласти);
			
			ИспользоватьСтандартныйРежимВвода = Ложь;
			
			Для Каждого Обл Из ИсходнаяОбласть.Области Цикл
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение Тогда
					ПоказательВТаблице = СоотвПоказателиДо.Найти(Обл.Имя, "Код");
					Если ПоказательВТаблице = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если ТаблицаИмпортируемыхЗначений = Неопределено Тогда
						ИмпортируемаяЯчейка = ИмпортируемаяОбласть.Область(ОБл.Лево, Обл.Верх, Обл.Право, Обл.Низ).Значение;
						Если ИмпортируемаяЯчейка.СодержитЗначение Тогда
							ЗначениеПоказателя = ИмпортируемаяЯчейка.Значение;
						Иначе
							ЗначениеПоказателя = ИмпортируемаяЯчейка.Текст;
						КонецЕсли;
					Иначе
						ЗначениеПоказателя = ТаблицаИмпортируемыхЗначений[Обл.Лево - 1][Обл.Верх - 1];
					КонецЕсли;
					
					ТекстСообщения = НСтр("ru = 'Не удалось импортировать значение показателя %ИмяОбласти%. Значение в импортируемом документе: %ЗначениеПоказателя%.
					|					Координаты ячейки: строка = %КоординатаСтрока%; колонка = %КоординатаКолонка%.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбласти%",			 Строка(Обл.Имя));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеПоказателя%",	 Строка(ЗначениеПоказателя));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоординатаСтрока%",		 Строка(?(Обл.Низ = Обл.Верх, Обл.Низ, "" + Обл.Верх + " - " + Обл.Низ)));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоординатаКолонка%",		 Строка(?(Обл.Лево = Обл.Право, Обл.Лево, "" + Обл.Лево + " - " + Обл.Право)));
					ПоказательВТаблице.ИспользуетсяВМакете = Истина;
					
					ОшибкаПереносаДанных = НЕ ЗаписатьЗначениеВПоказатель(ЗначениеПоказателя, ПоказательВТаблице, ТекстСообщения, МасштабИмпорта);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Импорт параметров.
		
		Если НЕ (ТаблДок.Области.Найти("_Параметры_") = Неопределено ИЛИ ИсходныйМакет.Области.Найти("_Параметры_") = Неопределено) Тогда
			
			ИмпортируемаяОбласть = ТаблДок.ПолучитьОбласть("_Параметры_");
			ИсходнаяОбласть      = ИсходныйМакет.ПолучитьОбласть("_Параметры_");
			ТаблицаИмпортируемыхЗначений = СоответствиеИмпортируемыхОбластей["_Параметры_"];
			Для Каждого ПараметрВТаблице Из ПараметрыДо Цикл
				ОбластьИмпорта = ИсходнаяОбласть.Области.Найти(ПараметрВТаблице.Код);
				Если ОбластьИмпорта <> Неопределено И ОбластьИмпорта.ТИпОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ОбластьИмпорта.СодержитЗначение Тогда
					Если ТаблицаИмпортируемыхЗначений = Неопределено Тогда
						ИмпортируемаяЯчейка = ИмпортируемаяОбласть.Область(ОбластьИмпорта.Лево, ОбластьИмпорта.Верх, ОбластьИмпорта.Право, ОбластьИмпорта.Низ);
						Если ИмпортируемаяЯчейка.СодержитЗначение Тогда
							ЗначениеПараметра = ИмпортируемаяЯчейка.Значение;
						Иначе
							ЗначениеПараметра = ИмпортируемаяЯчейка.Текст;
						КонецЕсли;
					Иначе
						ЗначениеПараметра = ТаблицаИмпортируемыхЗначений[ОбластьИмпорта.Лево - 1][ОбластьИмпорта.Верх - 1];
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					
					Если ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(ПараметрВТаблице.Значение)) Тогда
						ПараметрВТаблице.Значение = ЗначениеПараметра;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПараметрВТаблице.Значение)) Тогда
						Если ТипЗнч(ПараметрВТаблице.Значение) = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
							Если ЗначениеЗаполнено(ПараметрВТаблице.Значение) Тогда
								ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПараметра), , , ПараметрВТаблице.Значение.Владелец);
							ИначеЕсли ПараметрВТаблице.Предустановленный И СтрНайти(ПараметрВТаблице.Код, "Аналитика") > 0 Тогда
								ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПараметра), , , ВидОтчета["ВидАналитики" + Прав(ПараметрВТаблице.Код, 1)]);
							Иначе
								ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПараметра));
							КонецЕсли;
						Иначе
							ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПараметра));
						КонецЕсли;
						ПараметрВТаблице.Значение = ТекСсылка;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПараметрВТаблице.Предустановленный Тогда
					
					Если ЗначениеЗаполнено(ПараметрВТаблице.Значение) И ЭтотОбъект[ПараметрВТаблице.Код] <> ПараметрВТаблице.Значение Тогда
						ЭтотОбъект[ПараметрВТаблице.Код] = ПараметрВТаблице.Значение;
						ИзмененКлючевойРеквизит = Истина;
					КонецЕсли;
					
				Иначе
					ТекПараметр = ПараметрыОтчета.Найти(ПараметрВТаблице.Код, "Код");
					Если ТекПараметр <> Неопределено Тогда
						ТекПараметр.Значение = ПараметрВТаблице.Значение;
						Если ТипЗнч(ПараметрВТаблице.Значение)=Тип("Строка") Тогда
							ТекПараметр.ЗначениеСтрока= ПараметрВТаблице.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьСтандартныйРежимВвода Тогда
		
		ЕстьОбластиЗначений=Ложь;
		
		Для Каждого Обл Из ИсходныйМакет.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда
				ПоказательВТаблице = СоотвПоказателиДо.Найти(Обл.Имя, "Код");
				ПараметрВТаблице   = ПараметрыДо.Найти(Обл.Имя, "Код");
				
				Если ПоказательВТаблице = Неопределено И ПараметрВТаблице = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОбластиЗначений=Истина;
				
				Если ПоказательВТаблице <> Неопределено Тогда
					ПоказательВТаблице.ИспользуетсяВМакете = Истина;
				КонецЕсли;
				
				ОбластьПоказателя = ТаблДок.Область(Обл.Верх, Обл.Лево, Обл.Низ, Обл.Право);
				
				Если ОбластьПоказателя.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ОбластьПоказателя.СодержитЗначение = Истина Тогда
					ЗначениеПоказателя = ОбластьПоказателя.Значение;
				Иначе
					Попытка
						ЗначениеПоказателя = ОбластьПоказателя.Текст;
					Исключение
						Попытка
							ЗначениеПоказателя = ТаблДок.Область(Обл.Верх, Обл.Лево, Обл.Верх, Обл.Лево).Текст;
						Исключение
							ЗначениеПоказателя = Неопределено;
							ОшибкаПереносаДанных = Истина;
							Если НЕ ТихийРежим Тогда
								#Если ВнешнееСоединение Тогда
									ТекстСообщения = НСтр("ru = 'Не удалось получить значение показателя %ИмяОбласти%.'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбласти%", Строка(Обл.Имя));
									ноСообщить(ТекстСообщения, СтатусСообщения.Важное);
								#Иначе
									Возврат 0;
								#КонецЕсли
							Иначе
								Возврат 0;
							КонецЕсли;
						Конецпопытки;
					КонецПопытки;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда // учтем особенность сохранения табличных документов с объединенными ячейками в формате Excel
						Попытка
							времЗначениеПоказателя = ТаблДок.Область(Обл.Верх, Обл.Лево, Обл.Верх, Обл.Лево).Текст;
							Если ЗначениеЗаполнено(времЗначениеПоказателя) Тогда
								ЗначениеПоказателя = времЗначениеПоказателя;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПоказательВТаблице) Тогда
					
					СтрокаШаблона = Нстр("ru = 'Не удалось импортировать значение показателя %1! Значение в импортируемом документе: %2.
					|Координаты ячейки: строка = %3; колонка = %4.'");
					
					ТекстСообщения = "";
					Если Не ПустаяСтрока(СтрокаШаблона) тогда					
						ТекстСообщения = СтрШаблон(СтрокаШаблона, Обл.Имя, ЗначениеПоказателя, ?(Обл.Низ = Обл.Верх, Обл.Низ, "" + Обл.Верх + " - " + Обл.Низ), ?(Обл.Лево = Обл.Право, Обл.Лево, "" + Обл.Лево + " - " + Обл.Право));
					КонецЕсли;
					
					ОшибкаПереносаДанных = НЕ ЗаписатьЗначениеВПоказатель(ЗначениеПоказателя, ПоказательВТаблице, ТекстСообщения, МасштабИмпорта);
					
				ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					Если ТипЗнч(ПараметрВТаблице.Значение) = Тип("Число")
						ИЛИ ТипЗнч(ПараметрВТаблице.Значение) = Тип("Строка")
						ИЛИ ТипЗнч(ПараметрВТаблице.Значение) = Тип("Булево")
						ИЛИ ТипЗнч(ПараметрВТаблице.Значение) = Тип("Дата") Тогда
						ПараметрВТаблице = ЗначениеПоказателя;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПараметрВТаблице.Значение)) Тогда
						Если ТипЗнч(ПараметрВТаблице.Значение) = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
							Если ЗначениеЗаполнено(ПараметрВТаблице.Значение) Тогда
								ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПоказателя), , , ПараметрВТаблице.Значение.Владелец);
							ИначеЕсли ПараметрВТаблице.Предустановленный И СтрНайти(ПараметрВТаблице.Код, "Аналитика") > 0 Тогда
								ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПоказателя), , , ВидОтчета["ВидАналитики" + Прав(ПараметрВТаблице.Код, 1)]);
							Иначе
								ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПоказателя));
							КонецЕсли;
						Иначе
							ТекСсылка = Справочники[ПараметрВТаблице.Значение.Метаданные().Имя].НайтиПоНаименованию(Строка(ЗначениеПоказателя));
						КонецЕсли;
						ПараметрВТаблице.Значение = ТекСсылка;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Параметр Из ПараметрыДо Цикл
			Если ЗначениеЗаполнено(Параметр.Значение) Тогда
				Если Параметр.Предустановленный Тогда
					Если ЭтотОбъект[Параметр.Код] <> Параметр.Значение Тогда
						ЭтотОбъект[Параметр.Код] = Параметр.Значение;
						ИзмененКлючевойРеквизит  = Истина;
					КонецЕсли;
				Иначе
					ТекПараметр = ПараметрыОтчета.Найти(Параметр.Код, "Код");
					Если ТекПараметр <> Неопределено Тогда
						ТекПараметр.Значение = Параметр.Значение;
						Если ТипЗнч(Параметр.Значение)=Тип("Строка") Тогда
							ТекПараметр.ЗначениеСтрока= Параметр.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОбластиЗначений Тогда
			
			ТекстСообщения = НСтр("ru = 'В бланке отчета %БланкИмпорта% не обнаружены области, содержащие значения.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БланкИмпорта%", Строка(БланкИмпорта));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.ЗагрузитьДанныеИзМакета.1", , , ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// НАЧАЛО СЕКЦИИ ИМПОРТА РАСКРЫТИЙ ПО АНАЛИТИКАМ
	Если НЕ ТихийРежим Тогда
		#Если Клиент Тогда
			Состояние(НСтр("ru = 'Импорт раскрытий...'"));
		#КонецЕсли
	КонецЕсли;
	
	мПоказателиРаскрытияКопия_Числовые   = мПоказателиРаскрытия.СкопироватьКолонки();
	мПоказателиРаскрытияКопия_НеЧисловые = мПоказателиРаскрытия.СкопироватьКолонки();
	
	ИменаГруппРаскрытия = УправлениеОтчетамиУХ.ПолучитьСписокИменГруппРаскрытия(ВидОтчета,Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	ОсновныеРеквизиты = "Показатель";
	
	Для Инд = (МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		Запрос.Текст = Запрос.Текст + ", ГруппыРаскрытия.ВидАналитики" + Инд;
		ОсновныеРеквизиты = ОсновныеРеквизиты + ", Аналитика" + Инд;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ", ГруппыРаскрытия.ВидАналитикиВалютаДт";
	ОсновныеРеквизиты = ОсновныеРеквизиты + ", АналитикаВалюта";
	
	мПоказателиРаскрытияКопия_НеЧисловые.Индексы.Добавить(ОсновныеРеквизиты);
	
	Запрос.Текст = 
	" ВЫБРАТЬ ГруппыРаскрытия.Код КАК Код, ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия,Представление(ГруппыРаскрытия.Ссылка) КАК НаименованиеГруппы
	| " + Запрос.Текст + "
	| ИЗ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	| ГДЕ ГруппыРаскрытия.Код В (&МассивКодов)
	|   И ГруппыРаскрытия.Владелец = &Владелец
	| ИТОГИ ПО ГруппыРаскрытия.Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("МассивКодов", ИменаГруппРаскрытия.ВыгрузитьЗначения());
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураГруппыРаскрытия = Новый Структура;
	ЕстьОшибкиИмпортаАналитик=Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ТихийРежим Тогда
			#Если Клиент Тогда
				ТекстСообщения = НСтр("ru = 'Импорт группы раскрытия ""%Код%""...'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", Строка(Выборка.Код));
				Состояние(ТекстСообщения);
			#КонецЕсли
		КонецЕсли;
		
		ВидыАналитики = Новый Структура;
		
		ВыборкаАналитик = Выборка.Выбрать();
		
		Пока ВыборкаАналитик.Следующий() Цикл
			Для Инд = (МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				ВидыАналитики.Вставить("ВидАналитики" + Инд, ВыборкаАналитик["ВидАналитики" + Инд]);
			КонецЦикла;
		КонецЦикла;
		
		
		ОписаниеОбластей = Новый ТаблицаЗначений;
		ОписаниеОбластей.Колонки.Добавить("Имя");
		ОписаниеОбластей.Колонки.Добавить("Лево");
		ОписаниеОбластей.Колонки.Добавить("Верх");
		ОписаниеОбластей.Колонки.Добавить("Право");
		ОписаниеОбластей.Колонки.Добавить("Низ");
		ТаблицаЗагружаемыхЗначений = Новый ТаблицаЗначений;
		
		ИмяГруппы = СокрЛП(Выборка.Код);
		
		ЕстьОшибкиОбластейБланк=Ложь;
		ЕстьОшибкиОбластейФайл=Ложь;

		// Импорт групп раскрытия строк при расширенном способе импорта.
		Если НЕ ИспользоватьСтандартныйРежимВвода Тогда
			
						
			ЗапросПоСтрокам = Новый Запрос;
			ЗапросПоСтрокам.Текст = 
			"ВЫБРАТЬ
			|	СтрокиОтчетов.Ссылка КАК СтрокаОтчета,
			|	СтрокиОтчетов.Код КАК КодСтроки,
			|	ПРЕДСТАВЛЕНИЕ(СтрокиОтчетов.Ссылка) КАК НаименованиеСтроки
			|ИЗ
			|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
			|ГДЕ
			|	СтрокиОтчетов.ГруппаРаскрытия = &ГруппаРаскрытия
			|	И СтрокиОтчетов.Владелец = &Владелец
			|	И НЕ СтрокиОтчетов.ПометкаУдаления";
			ЗапросПоСтрокам.УстановитьПараметр("ГруппаРаскрытия", Выборка.ГруппаРаскрытия);
			ЗапросПоСтрокам.УстановитьПараметр("Владелец"       , ВидОтчета);
			РезультатЗапросаПоСтрокам = ЗапросПоСтрокам.Выполнить();
			
			Если НЕ РезультатЗапросаПоСтрокам.Пустой() Тогда
				ВыборкаСтрок = РезультатЗапросаПоСтрокам.Выбрать();
				Пока ВыборкаСтрок.Следующий() Цикл
					ИмяГруппыДляСтроки = ИмяГруппы +"_" + СокрЛП(ВыборкаСтрок.КодСтроки);
					
					Если ТаблДок.Области.Найти(ИмяГруппыДляСтроки) <> Неопределено Тогда
						
						МакетГруппыЗагружаемый = ТаблДок.ПолучитьОбласть(ИмяГруппыДляСтроки);
													
					Иначе
						
						СтрокаШаблона = Нстр("ru = 'В файле %1 отсутствует область для отображения раскрытия строки
						|%2'");
						
						ТекстСообщения = "";
						Если Не ПустаяСтрока(СтрокаШаблона) тогда					
							ТекстСообщения = СтрШаблон(СтрокаШаблона, ВерсияХранимогоФайла, ВыборкаСтрок.НаименованиеСтроки);
						КонецЕсли;
												
						ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.ЗагрузитьДанныеИзМакета.1",,ВерсияХранимогоФайла,ТекстСообщения);
						ЕстьОшибкиОбластейФайл = Истина;
						
						Продолжить;
						
					КонецЕсли;
					
					Если ИсходныйМакет.Области.Найти(ИмяГруппыДляСтроки) <> Неопределено Тогда
						
						МакетГруппыИсходный    = ИсходныйМакет.ПолучитьОбласть(ИмяГруппыДляСтроки);
											
					Иначе
						
						СтрокаШаблона = Нстр("ru = 'В бланке импорта %1 отсутствует область для отображения раскрытия строки
						|%2'");
						
						ТекстСообщения = "";
						Если Не ПустаяСтрока(СтрокаШаблона) тогда					
							ТекстСообщения = СтрШаблон(СтрокаШаблона, БланкИмпорта, ВыборкаСтрок.НаименованиеСтроки);
						КонецЕсли;
												
						ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.ЗагрузитьДанныеИзМакета.1",, БланкИмпорта,ТекстСообщения);
						ЕстьОшибкиОбластейБланк=Истина;
						
						Продолжить;
						
					КонецЕсли;
					
					РезультатИмпорта = ИмпортироватьОбластиРаскрытия(ИмяГруппы, ИмяГруппыДляСтроки
					, ОписаниеОбластей
					, МакетГруппыИсходный
					, МакетГруппыЗагружаемый
					, СоответствиеИмпортируемыхОбластей[ИмяГруппыДляСтроки]
					, ТаблицаЗагружаемыхЗначений);
					Если РезультатИмпорта = 0 Тогда
						Возврат 0;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Импорт групп раскрытий показателей.
		Если ТаблДок.Области.Найти(ИмяГруппы) <> Неопределено И ИсходныйМакет.Области.Найти(ИмяГруппы) <> Неопределено Тогда
			РезультатИмпорта = ИмпортироватьОбластиРаскрытия(ИмяГруппы, Неопределено
			, ОписаниеОбластей
			, ИсходныйМакет.ПолучитьОбласть(ИмяГруппы)
			, ТаблДок.ПолучитьОбласть(ИмяГруппы)
			, ?(ЗначениеЗаполнено(СоответствиеИмпортируемыхОбластей), СоответствиеИмпортируемыхОбластей[ИмяГруппы], Неопределено)
			, ТаблицаЗагружаемыхЗначений);
		КонецЕсли;
		
		// удаляем пустые строки в таблице значений
		КолЗн = ТаблицаЗагружаемыхЗначений.Количество();
		Для Инд = 1 По КолЗн Цикл
			ТекИнд = КолЗн - Инд;
			ПрисутствуетЗаполненноеЗначение = Ложь;
			Для ИндКол = 0 По ТаблицаЗагружаемыхЗначений.Колонки.Количество() - 1 Цикл
				Если ЗначениеЗаполнено(ТаблицаЗагружаемыхЗначений.Получить(ТекИнд).Получить(ИндКол)) Тогда
					ПрисутствуетЗаполненноеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПрисутствуетЗаполненноеЗначение Тогда
				ТаблицаЗагружаемыхЗначений.Удалить(ТекИнд);
			КонецЕсли;
		КонецЦикла;
		
		// создаем колонки по числу аналитик, куда помещаем значения реквизитов, полученные из загружаемого макета
		КоличествоКолонок = ТаблицаЗагружаемыхЗначений.Колонки.Количество(); // запоминаем количество колонок до добавления колонок-аналитик
		
		ПравилаИспользованияПолей=Новый ТаблицаЗначений;
		ПравилаИспользованияПолей.Колонки.Добавить("Синоним");
		ПравилаИспользованияПолей.Колонки.Добавить("Поле");
		ПравилаИспользованияПолей.Колонки.Добавить("АналитикаОперанда");
		ПравилаИспользованияПолей.Колонки.Добавить("КодАналитики");
		ПравилаИспользованияПолей.Колонки.Добавить("РеквизитАналитики");
		ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитики");
		ПравилаИспользованияПолей.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ПравилаИспользованияПолей.Колонки.Добавить("СоздаватьНовые");
		ПравилаИспользованияПолей.Колонки.Добавить("РазделятьПоОрганизациям");
		ПравилаИспользованияПолей.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте");
		
		Для ИндКол = 0 По КоличествоКолонок - 1 Цикл
			Для Инд = (МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				ВидСубконто = ВидыАналитики["ВидАналитики" + Инд];
				Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
					Продолжить;
				КонецЕсли;
				ПрефиксОбластиАналитики = ИмяГруппы + "_Аналитика" + Инд;
				ИмяКолонки = ТаблицаЗагружаемыхЗначений.Колонки.Получить(ИндКол).Имя;
				Если Лев(ИмяКолонки, СтрДлина(ПрефиксОбластиАналитики)) = ПрефиксОбластиАналитики Тогда
					Окончание = Сред(ИмяКолонки, СтрДлина(ПрефиксОбластиАналитики) + 1);
					Если Окончание = "" Тогда
						ТипЗначения = ВидСубконто.ТипЗначения.Типы()[0];
						Если ТипЗначения <> Тип("Строка") И ТипЗначения <> Тип("Число") И ТипЗначения <> Тип("Булево") И ТипЗначения <> Тип("Дата") Тогда
							ПустоеЗначениеТипа = Новый(ТипЗначения);
							Если ПустоеЗначениеТипа.Метаданные().ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
								Окончание = "Код";
							Иначе
								Окончание = "Наименование";
							КонецЕсли;
						Иначе
							Окончание = "Ссылка";
						КонецЕсли;
					Иначе
						Окончание = Сред(Окончание, 2); // отсекаем "_"
					КонецЕсли;
					
					НоваяСтрока                                = ПравилаИспользованияПолей.Добавить();
					НоваяСтрока.Синоним                        = ИмяКолонки;
					НоваяСтрока.Поле                           = ИмяКолонки;
					НоваяСтрока.АналитикаОперанда              = ВидСубконто;
					НоваяСтрока.КодАналитики                   = "Аналитика"+Инд;
					НоваяСтрока.РеквизитАналитики              = Окончание;
					РеквизитДляСинхронизации                   = ВидСубконто.РеквизитыДляСинхронизации.Найти(Окончание);
					НоваяСтрока.НеИспользоватьДляСинхронизации = НЕ (РеквизитДляСинхронизации <> Неопределено И РеквизитДляСинхронизации.Ключ);
					НоваяСтрока.СоздаватьНовые                 = ВидСубконто.СоздаватьПриНеудачномПоискеПриИмпорте;
					НоваяСтрока.РазделятьПоОрганизациям        = ВидСубконто.РазделятьПоОрганизациям;
					НоваяСтрока.ОбновлятьРеквизитыПриИмпорте   = ВидСубконто.ОбновлятьРеквизитыПриИмпорте;
					
					ТипДанныхАналитики=ВидСубконто.ТипЗначения.Типы()[0];
					
					НоваяСтрока.ТаблицаАналитики=?(ТипДанныхАналитики = Тип("Строка"), "", Метаданные.НайтиПоТипу(ТипДанныхАналитики).ПолноеИмя());
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТекстОшибкиКлючей="";
		
		Для Инд = (МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ВидСубконто = ВидыАналитики["ВидАналитики" + Инд];
			
			Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,НеИспользоватьДляСинхронизации","Аналитика"+Инд,Ложь)).Количество()=0 Тогда
				
				ЕстьОшибкиКлючей=Истина;
				
				ТекстОшибкиТек=""+ВидСубконто;
				
				Если СтрНайти(ТекстОшибкиКлючей,ТекстОшибкиТек)=0 Тогда
					
					ТекстОшибкиКлючей=ТекстОшибкиКлючей+"
					|"+ТекстОшибкиТек;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстОшибкиКлючей) Тогда
			
			ТекстСообщения = НСтр("ru = 'Импорт группы раскрытия %ТекстНаименованиеГруппы%:'");
			
			Если ЕстьОшибкиОбластейБланк Тогда
				
				ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'В выбранном бланке импорта не найдены поля для отображения раскрытия одной или нескольких строк.'");
								
			КонецЕсли;
			
			Если ЕстьОшибкиОбластейФайл Тогда
				
				ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'В выбранном файле не найдены поля для отображения раскрытия одной или нескольких строк.'");
								
			КонецЕсли;
			
			ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'Для видов субконто: %ТекстОшибкиКлючей%
			|не указаны ключевые поля импорта аналитик из табличных документов или поля отсутствуют в выбранном бланке импорта.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибкиКлючей%", 		Строка(ТекстОшибкиКлючей));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстНаименованиеГруппы%", 	Выборка.НаименованиеГруппы);
			
			ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'Подробности в протоколе и журнале регистрации.'");
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
			
			ЕстьОшибкиИмпортаАналитик=Истина;
				
			Продолжить;
						
		КонецЕсли;
		
		ФлагОшибкиИмпорта=Ложь;
		
		ТабГруппыРаскрытия = ИмпортДанныхБланкУХ.ТрансформироватьВнешниеДанные(ДанныеОбъекта,ТаблицаЗагружаемыхЗначений,ПравилаИспользованияПолей);
		
		// заполняем копию таблицы мПоказателиРаскрытия
		СтрокиПоказатели = мПоказатели.НайтиСтроки(Новый Структура("КодГруппыРаскрытия", ИмяГруппы));
		ИменаКолонокПоказателей = Новый СписокЗначений;
		Для Каждого Стр Из СтрокиПоказатели Цикл
			ИменаКолонокПоказателей.Добавить(Стр.Код, ИмяГруппы + "_Показатель_" + Стр.Код);
		КонецЦикла;
		
		КолонкиПоказатели = Новый Массив;
		локАналитики = Новый Структура;
		
		ПоследняяАналитика = 0;
		АналитикаОбъекта   = 0;
		
		НачЗаполнение = Ложь;
		
		Для Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если НЕ (ВидыАналитики.Свойство("ВидАналитики" + Инд) И ЗначениеЗаполнено(ВидыАналитики["ВидАналитики" + Инд])) Тогда
				
				Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики" + Инд]) Тогда
					
					АналитикаОбъекта = Инд;
					ЗначениеЛокАналитики = ЭтотОбъект["Аналитика" + Инд];
					Если НЕ ЗначениеЗаполнено(ЗначениеЛокАналитики) Тогда
						ЗначениеЛокАналитики = Неопределено;
					Иначе
						НачЗаполнение = Истина;
					КонецЕсли;
					
				ИначеЕсли ТабГруппыРаскрытия.Колонки.НАйти("Аналитика" + Инд) = Неопределено Тогда
					
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ТабГруппыРаскрытия.Колонки.НАйти("Аналитика" + Инд) = Неопределено Тогда
				
				ПоследняяАналитика = Инд;
								
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Стр Из ТабГруппыРаскрытия Цикл
			
			ПрисутствуютЗаполненныеЗначенияАналитики = НачЗаполнение;
			
			Для Инд = АналитикаОбъекта + 1 По ПоследняяАналитика Цикл
				
				Если ТабГруппыРаскрытия.Колонки.Найти("Аналитика" + Инд)=Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЗначениеЛокАналитики = Стр["Аналитика" + Инд];
				
				Если ЗначениеЗаполнено(ЗначениеЛокАналитики) Тогда
					ПрисутствуютЗаполненныеЗначенияАналитики = Истина;
					
				КонецЕсли;
				
				ЛокАналитики.Вставить("локАналитика" + Инд, ЗначениеЛокАналитики);
				
			КонецЦикла;
			
			Если НЕ ПрисутствуютЗаполненныеЗначенияАналитики Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Кол Из ИменаКолонокПоказателей Цикл
				
				Пок = мСоответствиеДляПоискаПоКоду[Кол.Значение];
				
				Если Пок = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ТабГруппыРаскрытия.Колонки.Найти(Кол.Представление) = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ТипПоказателя = Пок.ТипЗначения;
				
				ЗначениеПоказателя = Стр[Кол.Представление];
				
				Попытка
					Если ТипПоказателя = ТипЗначенияЧисло ИЛИ ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка() Тогда
						Если Лев(ЗначениеПоказателя, 1) = "(" И Прав(ЗначениеПоказателя, 1) = ")" Тогда
							ЗначениеПоказателя = "-" + СокрЛП(Сред(ЗначениеПоказателя, 2, СтрДлина(ЗначениеПоказателя) - 2));
						КонецЕсли;
						ЗначениеПоказателя = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Число(ЗначениеПоказателя), 0);
					ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
						ЗначениеПоказателя = ?(ЗначениеЗаполнено(ЗначениеПоказателя), ПривестиКДате(ЗначениеПоказателя, Новый ОписаниеТипов("Дата")), '00010101');
					ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
						ЗначениеПоказателя = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Строка(ЗначениеПоказателя), "");
					ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
						ЗначениеПоказателя = ?(ЗначениеЗаполнено(ЗначениеПоказателя), Булево(ЗначениеПоказателя), Ложь);
					КонецЕсли;
				Исключение
					Если НЕ ТихийРежим Тогда
						#Если НЕ ВнешнееСоединение Тогда
							ТекстСообщения = НСтр("ru = 'Не удалось получить значение показателя ""%КодПоказателя%"" из строки №%НомерСтроки% группы раскрытия с кодом ""%ИмяГруппы%"".'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(Пок.Код));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(ТаблицаЗагружаемыхЗначений.Индекс(Стр) + 1));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяГруппы%", Строка(ИмяГруппы));
							ноСообщить(ТекстСообщения, СтатусСообщения.Важное);
						#Иначе
							Возврат 0;	
						#КонецЕсли
					Иначе
						Возврат 0;
					КонецЕсли;
					
					ОшибкаПереносаДанных = Истина;
					
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					ТекСтр = мПоказателиРаскрытияКопия_Числовые.Добавить();
				Иначе
					СтрОтбора = Новый Структура("Показатель", Пок.Ссылка);
					Для Инд = (МаксАналитикОтчета+1) По ПараметрыСеанса.ЧислоДопАналитик Цикл
						Если ЛокАналитики.Свойство("локАналитика" + Инд) Тогда
							СтрОтбора.Вставить("Аналитика" + Инд, локАналитики["локАналитика" + Инд]);
						КонецЕсли;
					КонецЦикла;
					
					ТекСтрМас = мПоказателиРаскрытияКопия_НеЧисловые.НайтиСтроки(СтрОтбора);
					Если ТекСтрМас.Количество() <> 0 Тогда
						ТекСтр = ТекстрМас[0];
					Иначе
						ТекСтр = мПоказателиРаскрытияКопия_НеЧисловые.Добавить();
					КонецЕсли;
				КонецЕсли;
				
				ТекСтр.Показатель = Пок.Ссылка;
				
				Для Инд = МаксАналитикОтчета+1 По ПоследняяАналитика Цикл
					
					локАналитики.Свойство("локАналитика" + Инд, ТекСтр["Аналитика" + Инд]);						
					
				КонецЦикла;
				
				Если ТипПоказателя = ТипЗначенияЧисло Тогда
					ТекСтр.Значение = ?(ЗначениеЗаполнено(ТекСтр.Значение), ТекСтр.Значение, 0)
					+ ЗначениеПоказателя * ?(НЕ Пок.НеМасштабируется, МасштабИмпорта, 1);
				Иначе
					ТекСтр.Значение = ЗначениеПоказателя;
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОшибкиИмпортаАналитик Тогда
				
		ФлагОшибкиИмпорта=Истина;
		Возврат 0;
		
	КонецЕсли;
	
	//Если во время переноса данных произошла ошибка, то спрашиваем и, при необходимости, прерываемся
	Если ОшибкаПереносаДанных Тогда
		Возврат 0;
	КонецЕсли;
	
	// формируем итоговый макет со значениями показателей после вычисления
	
	Старая_мПоказателиРаскрытия = УправлениеОтчетамиУХ.ПолучитьКопиюРаскрытия(ЭтотОбъект);
	
	Старая_мПоказатели = мПоказатели.Скопировать();	
	
	ОчиститьВсе();
	
	Для Каждого Строка Из ПоказателиДо Цикл
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Строка.Ссылка, Строка.Значение);
	КонецЦикла;
	
	мПоказателиРаскрытияКопия_Числовые.Свернуть(ОсновныеРеквизиты, "Значение");
	
	// При вставке данных при импорте данные в таблице раскрытия очищены.
	// Производится прямая вставка без проверки условий. Чтобы ускорить вставку снимаются индексы с таблиц лога и значений показателей раскрытия.
		
	Для Каждого Строка Из мПоказателиРаскрытияКопия_Числовые Цикл
		
		СтруктураВставки = Новый Структура("Значение, Показатель"); 
		
		Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураВставки.Вставить("Аналитика"+Индекс);
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураВставки, Строка);
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,СтруктураВставки.Значение,СтруктураВставки,Ложь,Истина);
	КонецЦикла;
	
	Для Каждого Строка Из мПоказателиРаскрытияКопия_НеЧисловые Цикл
		СтруктураВставки = Новый Структура("Значение, Показатель");	
		
		Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураВставки.Вставить("Аналитика"+Индекс);
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураВставки, Строка);
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,СтруктураВставки.Значение,СтруктураВставки,Ложь,Истина);
		
	КонецЦикла;
	
	УстановитьИтогиПоПоказателям();
	
	СформироватьСтруктуруПараметров();
	СформироватьСтруктуруПоказателей();
	
	ПризнакОшибки = НЕ ЗапуститьМодульВычисления();
	
	СтрокаРасхождение = "";
	#Если ВнешнееСоединение Тогда
		
		Если ПризнакОшибки Тогда
			Возврат 0;
		КонецЕсли;
		
		ТипЧислоНоминальное = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 5));
		
		СтрокаШаблона = Нстр("ru = ' - значение показателя ""%1"" до вычисления = %2; после = %3'");
		
		Для Каждого ПоказательПосле Из мПоказатели Цикл
			Если ПоказательПосле.ТипЗначения = ТипЗначенияЧисло ИЛИ ПоказательПосле.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка() Тогда
				ПоказательДо = СоотвПоказателиДо.Найти(ПоказательПосле.Код, "Код");
				Если ПоказательДо.ИспользуетсяВМакете 
					И ТипЧислоНоминальное.ПривестиЗначение(ПоказательДо.Элемент.Значение) <> ТипЧислоНоминальное.ПривестиЗначение(ПоказательПосле.Значение) Тогда
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда								
						СтрокаРасхождение = СтрокаРасхождение 
							+ СтрШаблон(СтрокаШаблона, ПоказательДо.Элемент.Наименование, ПоказательДо.Элемент.Значение, ПоказательПосле.Значение) 
							+ Символы.ПС;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаРасхождение) Тогда
			ТекстСообщения = НСтр("ru = 'Обратите внимание, значения некоторых показателей до и после запуска модуля вычисления не совпадают:
			|%СтрокаРасхождение%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРасхождение%", Строка(СтрокаРасхождение));
			ноСообщить(СокрЛП(ТекстСообщения));
		КонецЕсли;
		
	#КонецЕсли
	
	Если ПризнакОшибки Тогда
		
		ОтменитьИзменения();
		Возврат 0;
		
	КонецЕсли;
		
	Если ПараметрыСохраненияПослеУдачногоИмпорта <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСохраненияПослеУдачногоИмпорта);
	КонецЕсли;
		
	#Если ВнешнееСоединение Тогда
		Возврат ?(ПустаяСтрока(СтрокаРасхождение), 1, 2);
	#Иначе
		Возврат 1;
	#КонецЕсли
КонецФункции


// Запускает импорт файла, загруженного в ИБ.
// Если файл - это таблица в формате Microsoft Excel, то перед импортом запускается
// процедура конвертации файла в формат табличного документа 1С:Предприятия 8.
//
Функция ИмпортироватьДанные(Знач Источник = Неопределено, ДатаФайла = Неопределено, ИмяЛиста = Неопределено, ПарольНаЛист = Неопределено,ЭтаФорма = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(Ссылка);
		
	КонецЕсли;
	
	МногопериодныйРежим=Документы.НастраиваемыйОтчет.РежимМногопериодныхУОП(ЭтотОбъект);
	
	Если Не МногопериодныйРежим Тогда
		ПроверитьКонтекстИнициализирован();
		ЗаполнитьКонтекстЭкземпляраОтчета();
	КонецЕсли;
	
	Если ТихийРежим Тогда
		#Если Клиент Тогда
			ТекстСообщения = НСтр("ru = 'Импортируется отчет вида ""%ВидОтчета%"" по организационной единице ""%Организация%"" ...'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(СокрЛП(ВидОтчета.Наименование)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(СокрЛП(СокрЛП(Организация.Наименование))));
			Состояние(ТекстСообщения);
		#КонецЕсли
	КонецЕсли;
	
	// определяем тип документа на входе, подготавливаем исходный табличный документ
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Источник = ФайлИмпорта;
	КонецЕсли;
		
	ПараметрыУспешногоИмпорта = Новый Структура("ФайлИмпорта, ДатаИзменения");
	ПараметрыУспешногоИмпорта.ФайлИмпорта = Источник;
	ПараметрыУспешногоИмпорта.ДатаИзменения = ДатаФайла;
	
	Если НЕ (ЗначениеЗаполнено(Источник) И ЗначениеЗаполнено(ДатаФайла)) Тогда 
		Возврат ВернутьРезультатЗаполнения(Ложь);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.ХранимыеФайлыОрганизаций") Тогда
		
		ФайлИмпорта=Источник;
		ДатаИзменения = ДатаФайла;
		
		Если СтрНайти(ВРЕГ(Источник.РасширениеФайла),"XLS")>0 Тогда // на входе таблица Microsoft Excel
			
			мЭтоИмпортXLS = Истина;
			ИмяФайла = ПолучитьИмяВременногоФайла(Источник.РасширениеФайла);
			
			ВерсияХранимогоФайла=ХранимыеФайлыУХ.ПолучитьХранимыйФайл(Источник, ИмяФайла, , , ДатаФайла);
			
			Если ВерсияХранимогоФайла=Неопределено Тогда
				
				Если НЕ ТихийРежим Тогда
					ноСообщить(НСтр("ru = 'Не удалось сохранить данные во временный файл!'"), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат ВернутьРезультатЗаполнения(0);
				
			КонецЕсли;
			
			СтруктураОтвета = ПроверитьРасширенныйРежимИмпорта();
			ТекущийПароль   = ?(НЕ ЗначениеЗаполнено(ПарольНаЛист), СтруктураОтвета.Пароль, ПарольНаЛист);
			
			СоответствиеИмпортируемыхОбластей = Новый Соответствие;
			//РезультатИмпорта = УправлениеОтчетамиУХ.ИмпортироватьИзExcel(ИмяФайла, ИмяЛиста, , , ТихийРежим, Истина, СоответствиеИмпортируемыхОбластей, ТекущийПароль);
			АдресХранилищаФайла = РаботаСФайламиУХ.ПоместитьФайлВоВременноеХарнилище(ИмяФайла);
			Если НЕ АдресХранилищаФайла = Неопределено Тогда
				
				Excel2003 = НРег(Прав(ИмяФайла, СтрДлина(".xls"))) = ".xls";
				
				Если МногопериодныйРежим Тогда
					
					ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
					ОбъектРасчета.Вставить("АдресХранилищаФайла",АдресХранилищаФайла);
					ОбъектРасчета.Вставить("Excel2003",Excel2003);
					ОбъектРасчета.Вставить("ИмяЛиста",ИмяЛиста);
					ОбъектРасчета.Вставить("Пароль",ТекущийПароль);
					ОбъектРасчета.Вставить("ХранимыйФайл",Источник);
					
					ИмпортДанныхБланкУХ.ИмпортироватьДанныеИзМакета20(ОбъектРасчета);
					
					Возврат ВернутьРезультатЗаполнения(?(ОбъектРасчета.Свойство("ИмпортВыполнен"),1,0));
		
				Иначе
				
					РезультатИмпорта = ОбработкаФайловMicrosoftExcelКлиентСерверУХ.ПолучитьТабличныйДокументИзЛистаТолькоДанные(АдресХранилищаФайла, Excel2003, ИмяЛиста, ТекущийПароль, СоответствиеИмпортируемыхОбластей); 
					
				КонецЕсли;	
					
			Иначе
				
				РезультатИмпорта = Неопределено;
				
			КонецЕсли;
			
			Если ТипЗнч(РезультатИмпорта) <> Тип("ТабличныйДокумент") Тогда
				Если НЕ ТихийРежим Тогда
					ноСообщить(НСтр("ru = 'Не удалось импортировать данные из файла XLS!'"), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат ВернутьРезультатЗаполнения(0);
			КонецЕсли;
			
			ИсточникДляИмпорта = РезультатИмпорта;
			ИтогИмпорта        = ЗагрузитьДанныеИзМакета(РезультатИмпорта, ТихийРежим, ПараметрыУспешногоИмпорта, СоответствиеИмпортируемыхОбластей);			
			
			Если ИтогИмпорта = 1 Тогда
				Возврат ВернутьРезультатЗаполнения(ИтогИмпорта);
				#Если Клиент Тогда
				ИначеЕсли НЕ ТихийРежим Тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Попытка импорта документа Excel стандартным методом'"));
				#КонецЕсли
			КонецЕсли;
			
		ИначеЕсли ВРЕГ(Источник.РасширениеФайла) = "MXL" Тогда // на входе табличный документ
			
			мЭтоИмпортXLS = Ложь;
			ИмяФайла = ПолучитьИмяВременногоФайла(Источник.РасширениеФайла);
			ВерсияХранимогоФайла=ХранимыеФайлыУХ.ПолучитьХранимыйФайл(Источник, ИмяФайла, , , ДатаФайла);
			
			Если ВерсияХранимогоФайла=Неопределено Тогда
				Если НЕ ТихийРежим Тогда
					ноСообщить(НСтр("ru = 'Не удалось сохранить данные во временный файл'"), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат ВернутьРезультатЗаполнения(0);
			КонецЕсли;
			Попытка
				ИсточникДляИмпорта = Новый ТабличныйДокумент;
				ИсточникДляИмпорта.Прочитать(ИмяФайла);
			Исключение
				Если НЕ ТихийРежим Тогда
					ноСообщить(НСтр("ru = 'Не удалось прочитать данные из исходного файла для импорта'"), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат ВернутьРезультатЗаполнения(0);
			КонецПопытки;
					
		Иначе // другие варианты источника не поддерживаются
			Если НЕ ТихийРежим Тогда
				ноСообщить(НСтр("ru = 'Не удалось определить тип источника по расширению'"), СтатусСообщения.Важное);
			КонецЕсли;
			Возврат ВернутьРезультатЗаполнения(0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВернутьРезультатЗаполнения(?(СравнитьМакеты(ИсточникДляИмпорта, , ПараметрыУспешногоИмпорта), 1, 0));
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИЗУАЛЬНЫМ ПРЕДСТАВЛЕНИЕМ ОТЧЕТА

// Заполняет области, связанные с показателями и параметрами отчета, их значениями.
//
Процедура ЗаполнитьМакет(Макет, ТаблицаПоказателей = Неопределено, ВалютаОтображения = Неопределено) Экспорт
	
	Если ТаблицаПоказателей = Неопределено Тогда
		ТаблицаПоказателей = мПоказатели;
	КонецЕсли;
	
	// заполняем показатели в макете
	ЗаполнитьПоказателиВМакете(Макет, ТаблицаПоказателей);
	
	// формируем структуру параметров
	СформироватьСтруктуруПараметров();
	
	// заполняем параметры в макете
	ЗаполнитьПараметрыВМакете(Макет, ВалютаОтображения);
	
КонецПроцедуры

// Заполняет области макета, связанные с показателями, значениями соответствующих показателей из
// таблицы показателей отчета.
//
Процедура ЗаполнитьПоказателиВМакете(Макет, ПоказателиОтчета = Неопределено) Экспорт
	
	Если ПоказателиОтчета = Неопределено Тогда
		ПоказателиОтчета = мПоказатели;
	КонецЕсли;
	
	Области = Макет.Области;
	Делитель=ВернутьЗначениеДелителя();
	
	Для Каждого Стр Из ПоказателиОтчета Цикл
		
		Обл = Области.Найти(Стр.Код);
		Если Обл <> Неопределено И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			Если ТипЗнч(Стр.Значение) = Тип("Число") Тогда
				
				Если НЕ Стр.НеМасштабируется Тогда
					Обл.Значение = Стр.Значение / Делитель;
				Иначе
					Обл.Значение = Стр.Значение;
				КонецЕсли;
				
			Иначе
				
				Обл.Значение    = Стр.Значение;
				
			КонецЕсли;
			
			Обл.Примечание.Текст = СформироватьТекстКомментарияДляМакета(Стр.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет области макета, связанные с параметрами, значениями соответствующих параметров из
// переменной модуля Параметры.
//
Процедура ЗаполнитьПараметрыВМакете(Макет, ВалютаОтображения = Неопределено) Экспорт
	
	Если СпособВывода="Дерево" Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЕдиниц=Новый Соответствие;
	СоответствиеЕдиниц.Вставить(Перечисления.ПорядкиОкругленияОтчетности.ПустаяСсылка(),Нстр("ru = 'единицы'"));
	СоответствиеЕдиниц.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,Нстр("ru = 'Единицы'"));
	СоответствиеЕдиниц.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,Нстр("ru = 'Тысячи'"));
	СоответствиеЕдиниц.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000,Нстр("ru = 'Миллионы'"));
	
	// заполнение параметров в макете
	Для Каждого Стр Из Параметры Цикл
		
		ТекОбл = Макет.Области.Найти(Стр.Ключ);
		Если ТекОбл = Неопределено ИЛИ НЕ (ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыводимоеЗначение=Стр.Значение;
		
		Если Стр.Ключ="ЕдиницаИзмерения" Тогда
			
			ВыводимоеЗначение=СоответствиеЕдиниц[ВыводимоеЗначение];
		
		ИначеЕсли Стр.Ключ = "ОсновнаяВалюта" И ЗначениеЗаполнено(ВалютаОтображения) Тогда
			ВыводимоеЗначение=ВалютаОтображения;
		ИначеЕсли глОсновнойЯзык = 0 Тогда
			ВыводимоеЗначение=Стр.Значение;
		Иначе
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
			МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиОтчетов"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Сценарии"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Периоды"));
			МассивТипов.Добавить(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ"));
			Если МассивТипов.Найти(ТипЗнч(ВыводимоеЗначение)) <> Неопределено Тогда
				ВыводимоеЗначение = ВыводимоеЗначение["Наименование" + глОсновнойЯзык];
			КонецЕсли;
			
		КонецЕсли;
		
		ТекОбл.Значение = ВыводимоеЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокПараметровФормата(Знач СтрокаФормата) Экспорт
	
	СписокПараметров = Новый Соответствие;
	
	ПарыИмяЗначение = Новый Массив;
	ДлинаСтроки = СтрДлина(СтрокаФормата);
	Для ОбрИнд = 1 По ДлинаСтроки Цикл
		Инд = ДлинаСтроки - ОбрИнд + 1;
		ТекСимв = Сред(СтрокаФормата, Инд, 1);
		Если ТекСимв = ";" Тогда
			ПарыИмяЗначение.Вставить(0, Сред(СтрокаФормата, Инд + 1));
			СтрокаФормата = Лев(СтрокаФормата, Инд - 1);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		ПарыИмяЗначение.Добавить(СтрокаФормата);
	КонецЕсли;
	
	Для Каждого ПараИмяЗначение Из ПарыИмяЗначение Цикл
		ВхождениеРавно = СтрНайти(ПараИмяЗначение, "=");
		Если ВхождениеРавно <> 0 Тогда
			СписокПараметров.Вставить(СокрЛП(Лев(ПараИмяЗначение, ВхождениеРавно - 1)), СокрЛП(Сред(ПараИмяЗначение, ВхождениеРавно + 1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПараметров;
	
КонецФункции

Функция ПреобразоватьВСтрокуФормата(СписокПараметров) Экспорт
	
	СтрокаФормата = "";
	Для Каждого Параметр Из СписокПараметров Цикл
		СтрокаФормата = СтрокаФормата + Параметр.Ключ + " = " + Параметр.Значение + ";";
	КонецЦикла;
	Возврат СтрокаФормата;
	
КонецФункции

// Для областей табличного документа, связанных с показателями отчета,
// процедура устанавливает формат вывода - уровень точности и порядок округления,
// заданные пользователем для текущего отчета.
//
Процедура ПрименитьПараметрыОтображения(ТаблДок) Экспорт
	
	Если СпособВывода="Дерево" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = Обл.Имя;
		Если Прав(ИмяОбласти, 6) <> "_СУММА" Тогда
			
			КоординатаПоследнего_ = СтрНайти(ИмяОбласти, "_");
			
			Если КоординатаПоследнего_ > 0 Тогда
				Длина = СтрДлина(ИмяОбласти);
				КодПодчеркивания = КодСимвола("_");
				Для Инд = 0 По Длина - КоординатаПоследнего_ Цикл
					Если КодСимвола(ИмяОбласти, Длина - Инд) = КодПодчеркивания Тогда
						КоординатаПоследнего_ = Длина - Инд;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Окончание = Сред(ИмяОбласти, КоординатаПоследнего_ + 1);
				
				Если НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(Окончание) И НЕ ПустаяСтрока(Окончание) Тогда
					КодПоказателя = Лев(ИмяОбласти, КоординатаПоследнего_ - 1);
					Вхождение_Показатель_ = СтрНайти(КодПоказателя, "_Показатель_");
					Если Вхождение_Показатель_ <>0 Тогда
						КодПоказателя = Сред(КодПоказателя, Вхождение_Показатель_ + СтрДлина("_Показатель_"));
					КонецЕсли;
				Иначе
					КодПоказателя = ИмяОбласти;
				КонецЕсли;
			Иначе
				КодПоказателя = ИмяОбласти;
			КонецЕсли;
			
			Если СтрНайти(КодПоказателя, ".") > 0 ИЛИ НЕ мЧисловыеПоказатели.Свойство(КодПоказателя) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ мЧисловыеПоказатели[КодПоказателя] Тогда
				
				Обл.Формат = ПолучитьСтрокуФормата(Обл.Формат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СгенерироватьМакет(ТабДокумент, БланкОтчета) Экспорт
	
	Если БланкОтчета = Неопределено Тогда
		БланкОтчета = ШаблонОтчета;
	КонецЕсли;
	
	мМакетыРаскрытий.Очистить();
	
	Если БланкОтчета.МакетРаскрытий.Количество() = 0 Тогда
		
		ТекОбъектБланкОтчета = БланкОтчета.ПолучитьОбъект();
		Макет = ТекОбъектБланкОтчета.Макет.Получить();
		ТекОбъектБланкОтчета.СохранитьМакетВХранилищеЗначений(Макет);
		Попытка
			ТекОбъектБланкОтчета.ОбменДанными.Загрузка = Истина;
			ТекОбъектБланкОтчета.Записать();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось обновить макет раскрытий в бланке отчета. Рекомендуется вручную открыть и записать бланк отчета'"));
		КонецПопытки;
		
	КонецЕсли;
	
	НайденныеСтроки = БланкОтчета.МакетРаскрытий.НайтиСтроки(Новый Структура("ОсновнаяЧасть, КодЯзыка", Истина, 0));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Бланк для формируемого отчета не содержит макет для основного языка отображения.'"));
		Возврат;
	КонецЕсли;
	
	ТекЗапись = НайденныеСтроки[0];
	МакетОснование = ТекЗапись.Макет.Получить();
	
	ФиксацияСверху 	= ТабДокумент.ФиксацияСверху;
	ФиксацияСлева 	= ТабДокумент.ФиксацияСлева;
	
	ТабДокумент.Очистить();
	
	Если МакетОснование <> Неопределено Тогда
		
		//Если МакетКолонокСтрокТаблицы .Количество()>0 Тогда
		//	Для Каждого ТЧ из МакетКолонокСтрокТаблицы  Цикл
		//		Нашли=МакетОснование.Область(ТЧ.Поле.Имя);
		//		Если Нашли<>Неопределено Тогда
		//			Если Найти(ТЧ.Поле.Имя,"C")Тогда
		//				Нашли.ШиринаКолонки=ТЧ.Размер;
		//			ИначеЕсли Найти(ТЧ.Поле.Имя,"R")Тогда
		//				Нашли.ВысотаСтроки=ТЧ.Размер;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
		ТабДокумент.Вывести(МакетОснование);
		
		УправлениеОтчетамиУХ.УстановитьКолонтитулыПоУмолчанию(ТабДокумент, ВидОтчета.Наименование, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		
		ТабДокумент.ОриентацияСтраницы = МакетОснование.ОриентацияСтраницы;
		
		ТабДокумент.ФиксацияСверху	= ?(ФиксацияСверху = 0, БланкОтчета.ФиксацияСверху, ФиксацияСверху);
		ТабДокумент.ФиксацияСлева	= ?(ФиксацияСлева = 0, БланкОтчета.ФиксацияСлева, ФиксацияСлева);
		//ТабДокумент.ИтогиСправа		= БланкОтчета.ИтогиСправа;
		
		Для Сч = 1 по МакетОснование.ШиринаТаблицы Цикл
			ТабДокумент.Область(,Сч,,Сч).Видимость = МакетОснование.Область(,Сч,,Сч).Видимость;
		КонецЦикла;
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Бланк для формируемого отчета не содержит макет.'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ГЕНЕРАЦИИ МАКЕТОВ РАСКРЫТИЙ
// И ФОРМИРОВАНИЯ ГРУППОВОГО МАКЕТА

// Функция возвращает строку с макетами раскрытия для указанной группы раскрытия.
//
Функция ВернутьМассивМакетовРаскрытия(БланкОтчета, КодГруппыРаскрытия) Экспорт
	
	// Макеты раскрытия не прочитаны из таблицы.
	ТекСтрока = мМакетыРаскрытий.Найти(КодГруппыРаскрытия, "Имя");
	
	Если ТекСтрока = Неопределено Тогда
		
		ТекЗапись = БланкОтчета.МакетРаскрытий.НайтиСтроки(Новый Структура("ОсновнаяЧасть, КодГруппыРаскрытия", Ложь, КодГруппыРаскрытия,0));
		
		Если ТекЗапись.Количество() <> 0 Тогда
			
			СтруктураРаскрытий = ТекЗапись[0].Макет.Получить();
						
			Если ТипЗнч(СтруктураРаскрытий) = Тип("Структура") Тогда
				
				Если глОсновнойЯзык>0 Тогда
				
					Для Каждого КлючИЗначение ИЗ СтруктураРаскрытий Цикл
						
						ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(КлючИЗначение.Значение,0,глОсновнойЯзык,ВидОтчета)
												
					КонецЦикла;
					
				КонецЕсли;
	
				ТекСтрока     =  мМакетыРаскрытий.Добавить();
				ТекСтрока.Имя =  КодГруппыРаскрытия;
				СтруктураРаскрытий.Свойство("Шапка"     , ТекСтрока.Шапка);
				СтруктураРаскрытий.Свойство("Содержимое", ТекСтрока.Строка);
				СтруктураРаскрытий.Свойство("Подвал"    , ТекСтрока.Подвал);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекСтрока;
	
КонецФункции

// Выводит табличный документ (Секция) в основной табличный документ (Макет), если Секция определена.
//
Процедура ВывестиСекциюВМакет(Макет, Секция) Экспорт
	
	Если Секция <> Неопределено Тогда
		Макет.Вывести(Секция);
	КонецЕсли;
	
КонецПроцедуры

// Формирует табличный документ - визуальное представление группы раскрытия по заданным 
// группе раскрытия и таблице раскрытия для данной группы.
//
Функция СгенерироватьМакетРаскрытия(БланкОтчета, СтрокаГруппыРаскрытия, ТаблицаРаскрытия) Экспорт
	
	КодГруппыРаскрытия = СокрЛП(СтрокаГруппыРаскрытия.Код);
	Макет = Новый ТабличныйДокумент;
	
	МакетыРаскрытия			= ВернутьМассивМакетовРаскрытия(БланкОтчета, КодГруппыРаскрытия);
	МакетРаскрытияШапка		= ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Шапка = Неопределено	, Неопределено, МакетыРаскрытия.Шапка.ПолучитьОбласть() );
	МакетРаскрытияСтрока	= ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Строка = Неопределено, Неопределено, МакетыРаскрытия.Строка.ПолучитьОбласть());
	МакетРаскрытияПодвал	= ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Подвал = Неопределено, Неопределено, МакетыРаскрытия.Подвал.ПолучитьОбласть());
	
	Если ТаблицаРаскрытия.Количество() = 0 Тогда
		Если МакетРаскрытияШапка <> Неопределено Тогда
			ВывестиСекциюВМакет(Макет, МакетРаскрытияШапка);
		КонецЕсли;
		Если МакетРаскрытияСтрока <> Неопределено Тогда
			Для Каждого Обл Из МакетРаскрытияСтрока.Области Цикл
				Обл.Защита = Ложь;
				Обл.СодержитЗначение = Истина;
				Обл.ТипЗначения = Новый ОписаниеТипов("Строка");
				Обл.Значение = "";
				//Обл.Текст = "";
			КонецЦикла;
			ВывестиСекциюВМакет(Макет, МакетРаскрытияСтрока);
		КонецЕсли;
		Если МакетРаскрытияПодвал <> Неопределено Тогда
			ВывестиСекциюВМакет(Макет, МакетРаскрытияПодвал);
		КонецЕсли;
		
	ИначеЕсли МакетРаскрытияСтрока <> Неопределено Тогда
		ДоступныеПрефиксыАналитик = Новый Соответствие();
		
		Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Префикс = КодГруппыРаскрытия + "_Аналитика_Аналитика" + НомерАналитики;
			Если ТаблицаРаскрытия.Колонки.Найти("Аналитика" + НомерАналитики) <> Неопределено Тогда
				ДоступныеПрефиксыАналитик.Вставить(Префикс, НомерАналитики);
			КонецЕсли;
		КонецЦикла;
		
		МакетТаблЧасти = Новый ТабличныйДокумент;
		СуммыПоПоказателям = Новый Структура;
		Для Каждого Стр Из ТаблицаРаскрытия Цикл // для каждой строки таблицы раскрытий
			МассивОбластей = Новый Массив;
			КопияМакетаРаскрытия = МакетРаскрытияСтрока.ПолучитьОбласть(); // создаем копию макета раскрытия
			
			Для Каждого Обл Из КопияМакетаРаскрытия.Области Цикл
				МассивОбластей.Добавить(Обл);
			КонецЦикла;
			
			Для Каждого Обл Из МассивОбластей Цикл // обходим по областям
				Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда //ИЛИ Обл.СодержитЗначение <> Истина Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяОбласти = Обл.Имя;
				ЭтоОбластьРеквизитаОднойИзАналитик = Ложь;
				НомерАналитики = Неопределено;
				
				Для Каждого Префикс Из ДоступныеПрефиксыАналитик Цикл
					Если СтрНайти(ИмяОбласти, Префикс.Ключ) = 1 Тогда
						ЭтоОбластьРеквизитаОднойИзАналитик = Истина;
						НомерАналитики = Префикс.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭтоОбластьРеквизитаОднойИзАналитик Тогда
					ЗначениеАналитики = Стр["Аналитика" + НомерАналитики];
					КлючевоеБуквосочетание = "_Аналитика" + НомерАналитики;
					ИмяРеквизита = Сред(ИмяОбласти, СтрНайти(ИмяОбласти, КлючевоеБуквосочетание) + СтрДлина(КлючевоеБуквосочетание) + 1);
					Попытка // возможно несоответствие типов
						Если глОсновнойЯзык <> 0 И НЕ ПустаяСтрока(ИмяРеквизита) И ВРЕГ(ИмяРеквизита) = "НАИМЕНОВАНИЕ" Тогда
							ИмяРеквизита = ИмяРеквизита + глОсновнойЯзык;
						КонецЕсли;
						Если ПустаяСтрока(ИмяРеквизита) Тогда
							ЗначениеДляЗаписи = ЗначениеАналитики;
						Иначе
							//ЗначениеДляЗаписи = ЗначениеАналитики[ИмяРеквизита];
							ЗначениеДляЗаписи = Вычислить("ЗначениеАналитики." + ИмяРеквизита);
						КонецЕсли;
						
						Обл.Защита = Ложь;
						Обл.СодержитЗначение = Истина;
						Обл.ТипЗначения = Новый ОписаниеТипов("Строка");
						Обл.Значение = Строка(ЗначениеДляЗаписи);
						Обл.Текст = Строка(ЗначениеДляЗаписи);
						
					Исключение КонецПопытки;
					
					Обл.Имя = Обл.Имя + "_" + ТаблицаРаскрытия.Индекс(Стр);
					Обл.Расшифровка = Истина;
				Иначе
					Префикс = КодГруппыРаскрытия + "_Показатель_";
					КолонкиПоказатели = мПоказатели.НайтиСтроки(Новый Структура("ГруппаРаскрытия", СтрокаГруппыРаскрытия.Ссылка));
					Для Каждого Пок Из КолонкиПоказатели Цикл
						ПрефиксПоказателя = Префикс + СокрЛП(Пок.Код);
						ДлинаПрефикса = СтрДлина(ПрефиксПоказателя);
						Если Лев(СокрЛП(ИмяОбласти), ДлинаПрефикса) = ПрефиксПоказателя И (Сред(ИмяОбласти, ДлинаПрефикса + 1, 1) = "" ИЛИ (Сред(ИмяОбласти, ДлинаПрефикса + 1, 1) = "_" И НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(Сред(ИмяОбласти, ДлинаПрефикса + 2)))) Тогда
							ЗначениеПоказателя = Стр[СокрЛП(Пок.Код) + "_Отображение"];
							//Обл.Текст = Строка(ЗначениеПоказателя);
							Попытка // возможно несоответствие типов
								Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
									Обл.СодержитЗначение = Истина;
									Обл.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Размерность, УровеньТочности));
								КонецЕсли;
								Обл.Значение    = ЗначениеПоказателя;
							Исключение
							КонецПопытки;
							Обл.Имя = СокрЛП(Обл.Имя) + "_" + ТаблицаРаскрытия.Индекс(Стр);
							Обл.Расшифровка = Истина;
							
							СуммПок = 0;
							Если СуммыПоПоказателям.Свойство(СокрЛП(Пок.Код), СуммПок) Тогда
								
								Если ТипЗнч(ЗначениеПоказателя) <> Тип("Число") Тогда
									Продолжить;
								КонецЕсли;
								
								Если Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма
									ИЛИ НЕ ЗначениеЗАполнено(Пок.ВидИтога)
									ИЛИ Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда
									СуммыПоПоказателям[СокрЛП(Пок.Код)] = СуммПок + ?(ТипЗнч(ЗначениеПоказателя) = Тип("Число"), ЗначениеПоказателя, 0);
								ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум И СуммПок < ЗначениеПоказателя Тогда
									СуммыПоПоказателям[СокрЛП(Пок.Код)] = ЗначениеПоказателя;
								ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум И СуммПок > ЗначениеПоказателя Тогда
									СуммыПоПоказателям[СокрЛП(Пок.Код)] = ЗначениеПоказателя;
								КонецЕсли;
							Иначе
								СуммыПоПоказателям.Вставить(СокрЛП(Пок.Код), ?(ТипЗнч(ЗначениеПоказателя) = Тип("Число"), ЗначениеПоказателя, 0));
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			МакетТаблЧасти.Вывести(КопияМакетаРаскрытия); // выводим строку - макет раскрытия со значениями в основной макет раскрытий
		КонецЦикла;
		
		Для Каждого Пок Из КолонкиПоказатели Цикл
			Если Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда
				СуммыПоПоказателям[СокрЛП(Пок.Код)] = СуммыПоПоказателям[СокрЛП(Пок.Код)] / ТаблицаРаскрытия.Количество();
			КонецЕсли;
		КонецЦикла;
		
		ОбластьСКодомРаскрытия = Макет.Области.Найти(КодГруппыРаскрытия);
		Если ОбластьСКодомРаскрытия <> Неопределено Тогда
			ОбластьСКодомРаскрытия.Имя = "";
		КонецЕсли;
		Для Каждого Эл Из СуммыПоПоказателям Цикл
			ИмяПок = Эл.Ключ;
			
			Если МакетРаскрытияШапка <> Неопределено Тогда
				СоотвОбл = МакетРаскрытияШапка.Области.Найти(КодГруппыРаскрытия + "_" + ИмяПок + "_СУММА");
				Если СоотвОбл <> Неопределено И СоотвОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И СоотвОбл.СодержитЗначение = Истина Тогда
					Попытка
						СоотвОбл.Значение = Эл.Значение;
						СоотвОбл.Формат   = ПолучитьСтрокуФормата(СоотвОбл.Формат);
					Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если МакетРаскрытияПодвал <> Неопределено Тогда
				СоотвОбл = МакетРаскрытияПодвал.Области.Найти(КодГруппыРаскрытия + "_" + ИмяПок + "_СУММА");
				Если СоотвОбл <> Неопределено И СоотвОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И СоотвОбл.СодержитЗначение = Истина Тогда
					Попытка
						СоотвОбл.Значение = Эл.Значение;
						СоотвОбл.Формат   = ПолучитьСтрокуФормата(СоотвОбл.Формат);
					Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиСекциюВМакет(Макет, МакетРаскрытияШапка);
		ВывестиСекциюВМакет(Макет, МакетТаблЧасти);
		ОбластьТабличнаяЧасть = Макет.Области.Найти(КодГруппыРаскрытия);
		Если ОбластьТабличнаяЧасть <> Неопределено Тогда
			ОбластьТабличнаяЧасть.Имя = "";
		КонецЕсли;
		Макет.Область(?(МакетРаскрытияШапка = Неопределено, 1, МакетРаскрытияШапка.ВысотаТаблицы + 1), 0, Макет.ВысотаТаблицы, 0).Имя = КодГруппыРаскрытия;
		ВывестиСекциюВМакет(Макет, МакетРаскрытияПодвал);
	КонецЕсли;
	Макет.Область(1, 0, Макет.ВысотаТаблицы, 0).Видимость = Истина;
	ПрименитьПараметрыОтображения(Макет);
	
	Возврат Макет;
	
КонецФункции

Функция ПодготовитьТаблицуРаскрытияДляОтображения(ИсходнаяТаблицаРаскрытия, ОтборПоРаскрытию, ОтборПоКС, СортировкаПоРаскрытию) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&ТаблицаРаскрытия КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Т КАК Т
	|ГДЕ
	|	1 = 1
	|//УПОРЯДОЧИТЬ");
	
	Запрос.УстановитьПараметр("ТаблицаРаскрытия", ИсходнаяТаблицаРаскрытия);
	
	Условие = "ИСТИНА";
	Сч = 1;
	Для Каждого КлючИЗначение Из ОтборПоРаскрытию Цикл
		
		Оператор = ОбщегоНазначенияУХ.ПолучитьПредставлениеВидаСравнения(КлючИЗначение.Значение.ВидСравнения);
		
		Условие = Условие + ?(Условие = "", "", " И ") + КлючИЗначение.Ключ;
		Условие = Условие + Оператор + "(&Условие" + Сч + ")";
		
		Запрос.УстановитьПараметр("Условие" + Сч, КлючИЗначение.Значение.Значение);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Сортировка = "";
	Для каждого КлючИЗначение Из СортировкаПоРаскрытию Цикл
		Сортировка = Сортировка + ?(Сортировка = "", "УПОРЯДОЧИТЬ ПО ", ", ");
		Сортировка = Сортировка + КлючИЗначение.Ключ + " " + КлючИЗначение.Значение;			
	КонецЦикла;
	
	Если ОтборПоКС Тогда
		
		УсловиеПоКС = "";
		
		СтрокиКС = мПоказатели.НайтиСтроки(Новый Структура("Проверочный", Истина));
		
		Для Каждого СтрокаКС из СтрокиКС Цикл
			Если НЕ ИсходнаяТаблицаРаскрытия.Колонки.Найти(СтрокаКС.Код) = Неопределено Тогда
				УсловиеПоКС = УсловиеПоКС + ?(УсловиеПоКС = "", "", " И ") + СтрокаКС.Код + " = ИСТИНА";	
			КонецЕсли;		
		КонецЦикла;		
		
		Если Не УсловиеПоКС = "" Тогда
			Условие = Условие + " И НЕ (" + УсловиеПоКС + ")";	
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УПОРЯДОЧИТЬ", Сортировка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", Условие);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует табличный документ - визуальное представление группы раскрытия по заданным 
// группе раскрытия и таблице раскрытия для данной группы.
//
Функция СгенерироватьМакетРаскрытияСтрока(ГруппаРаскрытия, ИсходнаяТаблицаРаскрытия, Удалить_ОтборПоРаскрытию, 
				КодСтроки, МакетыРаскрытия, ПоказателиКолонки = Неопределено, ВыводитьШапку = Истина) Экспорт
	
	КодГруппыРаскрытия = СокрЛП(ГруппаРаскрытия.Код);
	Макет = Новый ТабличныйДокумент;
	
	МакетРаскрытияШапка		= ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Шапка = Неопределено	, Неопределено, МакетыРаскрытия.Шапка.ПолучитьОбласть());
	МакетРаскрытияСтрока	= ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Строка = Неопределено, Неопределено, МакетыРаскрытия.Строка.ПолучитьОбласть());
	МакетРаскрытияПодвал	= ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Подвал = Неопределено, Неопределено, МакетыРаскрытия.Подвал.ПолучитьОбласть());
	
	Инд=1;
	
	ТекущийДелитель = ВернутьЗначениеДелителя();
	
	ОтборПоРаскрытию 		= ВернутьТекущуюСтруктуруОтбораИзСоответствия(КодСтроки);
	СортировкаПоРаскрытию 	= ВернутьТекущуюСтруктуруСортировкиИзСоответствия(КодСтроки);
	
	ЕстьОтбор = ОтборПоРаскрытию.Количество() > 0;
	
	Если ОтборПоРаскрытию.Количество() > 0 
		ИЛИ СортировкаПоРаскрытию.Количество() > 0
		ИЛИ ОтборПоКонтрольнымСоотношениям Тогда
		
		//Принудительно типизируем Колонки с аналитиками
		Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ИсходнаяТаблицаРаскрытия.Колонки["Аналитика" + Сч].Имя = "Удалить_Аналитика" + Сч;
			Если Сч <= (МаксАналитикОтчета+МаксАналитикПоказателя) Тогда
				ИсходнаяТаблицаРаскрытия.Колонки.Добавить("Аналитика" + Сч, ГруппаРаскрытия["ВидАналитики" + Сч].ТипЗначения);
			Иначе
				//колонки нужно создать все
				ИсходнаяТаблицаРаскрытия.Колонки.Добавить("Аналитика" + Сч, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Стр из ИсходнаяТаблицаРаскрытия Цикл
			Для  Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				Стр["Аналитика" + Инд] = Стр["Удалить_Аналитика" + Инд];
			КонецЦикла;
		КонецЦикла;
		
		Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ИсходнаяТаблицаРаскрытия.Колонки.Удалить("Удалить_Аналитика" + Сч);
		КонецЦикла;
		
		ТаблицаРаскрытия = ПодготовитьТаблицуРаскрытияДляОтображения(ИсходнаяТаблицаРаскрытия, ОтборПоРаскрытию, ОтборПоКонтрольнымСоотношениям, СортировкаПоРаскрытию);
		
		ИсходнаяТаблицаРаскрытия = ТаблицаРаскрытия;
		
	Иначе
		
		ТаблицаРаскрытия = ИсходнаяТаблицаРаскрытия.Скопировать();	
		
	КонецЕсли;
		
	ЕстьШапка	= НЕ (МакетРаскрытияШапка = Неопределено);
	ЕстьПодвал	= НЕ (МакетРаскрытияПодвал = Неопределено);
	
	Если ЕстьШапка Тогда
		
		Пока СтрНайти(МакетРаскрытияШапка.Область(1,1).Имя,КодСтроки)=0 Цикл
			
			МакетРаскрытияШапка.УдалитьОбласть(МакетРаскрытияШапка.Область("C1"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МакетРаскрытияСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для строки %КодСтроки% не задан макет строк для раскрытия.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%", Строка(КодСтроки));
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат Макет;
	КонецЕсли;
	
	//Пока СтрНайти(МакетРаскрытияСтрока.Область(1,1,1,1).Имя,КодСтроки)=0 Цикл
	//	
	//	МакетРаскрытияСтрока.УдалитьОбласть(МакетРаскрытияСтрока.Область("C1"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	//	
	//КонецЦикла;
	
	Если НЕ ПоказателиКолонки=Неопределено Тогда
		
		Префикс = СокрЛП(ГруппаРаскрытия.Код) +"_"+КодСтроки+ "_Показатель_";
		
		Для Каждого Пок ИЗ ПоказателиКолонки Цикл
			
			ПрефиксПоказателя = Префикс + СокрЛП(Пок.Код);
			ДлинаПрефикса = СтрДлина(ПрефиксПоказателя);
			
			Для Каждого Обл ИЗ МакетРаскрытияСтрока.Области Цикл
				
				ИмяОбласти=Обл.Имя;
				
				Если Лев(СокрЛП(ИмяОбласти), ДлинаПрефикса) = ПрефиксПоказателя И (Сред(ИмяОбласти, ДлинаПрефикса + 1, 1) = "" ИЛИ (Сред(ИмяОбласти, ДлинаПрефикса + 1, 1) = "_" И НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(Сред(ИмяОбласти, ДлинаПрефикса + 2)))) Тогда
					
					Пок.НомерКолонки=Обл.Лево;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СохранятьИсториюИзменений=ВидОтчета.СохранятьИсториюИзменений;
	
	Если ТаблицаРаскрытия.Количество() = 0 Тогда
		
		Если ЕстьШапка Тогда
			Если ВыводитьШапку Тогда
				ВывестиСекциюВМакет(Макет, МакетРаскрытияШапка);
			КонецЕсли;
		Иначе
			ВывестиСекциюВМакет(Макет, МакетРаскрытияСтрока);
		КонецЕсли;
		
	Иначе
		
		МакетТаблЧасти = Новый ТабличныйДокумент;
		СуммыПоПоказателям = Новый Структура;
		Для Каждого Стр Из ТаблицаРаскрытия Цикл // для каждой строки таблицы раскрытий
			МассивОбластей = Новый Массив;
			КопияМакетаРаскрытия = МакетРаскрытияСтрока.ПолучитьОбласть(); // создаем копию макета раскрытия
			
			Для Каждого Обл Из КопияМакетаРаскрытия.Области Цикл
				МассивОбластей.Добавить(Обл);
			КонецЦикла;
			
			Для Каждого Обл Из МассивОбластей Цикл // обходим по областям
				Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
					Продолжить;
				КонецЕсли;
				ИмяОбласти = Обл.Имя;
				ЭтоОбластьРеквизитаОднойИзАналитик = Ложь;
				Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					Префикс = КодГруппыРаскрытия +"_"+КодСтроки+ "_Аналитика" + НомерАналитики;
					Если ТаблицаРаскрытия.Колонки.Найти("Аналитика" + НомерАналитики) <> Неопределено И Лев(ИмяОбласти, СтрДлина(Префикс)) = Префикс Тогда // это область реквизита одной из аналитик
						ЭтоОбластьРеквизитаОднойИзАналитик = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЭтоОбластьРеквизитаОднойИзАналитик Тогда
					ЗначениеАналитики = Стр["Аналитика" + НомерАналитики];
					КлючевоеБуквосочетание = "_Аналитика" + НомерАналитики;
					ИмяРеквизита = Сред(ИмяОбласти, СтрНайти(ИмяОбласти, КлючевоеБуквосочетание) + СтрДлина(КлючевоеБуквосочетание) + 1);
					Если глОсновнойЯзык <> 0 И НЕ ПустаяСтрока(ИмяРеквизита) И ВРЕГ(ИмяРеквизита) = "НАИМЕНОВАНИЕ" Тогда
						ИмяРеквизита = ИмяРеквизита + глОсновнойЯзык;
					КонецЕсли;
					//Предполагаем, что имя реквизита аналитики в конфигурации не может иметь "_"
					//соответственно, любой знак "_" в ИмяРеквизита трактуется как подчиненный реквизит
					МассивРеквизитов = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, "_");					
					Попытка // возможно несоответствие типов
						//Знч = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ЗначениеАналитики, ИмяРеквизита);
						Знч = ЗначениеАналитики;
						Для каждого ИмяРеквизитаОбъекта Из МассивРеквизитов Цикл
							Знч = Знч[ИмяРеквизитаОбъекта];							
						КонецЦикла;						
						//Обл.Значение = ?(ПустаяСтрока(ИмяРеквизита), ЗначениеАналитики, ЗначениеАналитики[ИмяРеквизита]);
						Обл.Значение = Знч;
					Исключение
						Обл.Значение=XMLСтрока(ЗначениеАналитики);
					КонецПопытки;
					Обл.Имя = Обл.Имя + "_" + Стр.ID;//ТаблицаРаскрытия.Индекс(Стр);
					Обл.Расшифровка = Истина;
				Иначе
					Префикс = СокрЛП(ГруппаРаскрытия.Код) +"_"+КодСтроки+ "_Показатель_";
					
					Если ПоказателиКолонки=Неопределено Тогда
						КолонкиПоказатели = мПоказатели.НайтиСтроки(Новый Структура("КодСтрока", КодСтроки));
					Иначе
						КолонкиПоказатели=ПоказателиКолонки;
					КонецЕсли;
					
					Для Каждого Пок Из КолонкиПоказатели Цикл
						ПрефиксПоказателя = Префикс + СокрЛП(Пок.Код);
						ДлинаПрефикса = СтрДлина(ПрефиксПоказателя);
						Если Лев(СокрЛП(ИмяОбласти), ДлинаПрефикса) = ПрефиксПоказателя И (Сред(ИмяОбласти, ДлинаПрефикса + 1, 1) = "" ИЛИ (Сред(ИмяОбласти, ДлинаПрефикса + 1, 1) = "_" И НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(Сред(ИмяОбласти, ДлинаПрефикса + 2)))) Тогда
							
							ЗначениеПоказателя 		= Стр[СокрЛП(Пок.Код)];
														
							Попытка // возможно несоответствие типов
								
								Если Пок.ЧисловойПоказатель Тогда
									
									Если Не Пок.НеМасштабируется Тогда
										
										Обл.Значение=ЗначениеПоказателя/ТекущийДелитель;
										
									Иначе
										
										Обл.Значение = ЗначениеПоказателя;
										
									КонецЕсли;
									
									Обл.Формат=ПолучитьСтрокуФормата(Обл.Формат);
									
								Иначе
									
									Обл.Значение = ЗначениеПоказателя;
									
								КонецЕсли;
				
							Исключение КонецПопытки;
							
							Обл.Имя = СокрЛП(Обл.Имя) + "_" + Стр.ID;//ТаблицаРаскрытия.Индекс(Стр);
							Обл.Расшифровка = Истина;
														
							СуммПок = 0;
							Если СуммыПоПоказателям.Свойство(СокрЛП(Пок.Код), СуммПок) Тогда
								СуммыПоПоказателям[СокрЛП(Пок.Код)] = СуммПок + ?(ТипЗнч(ЗначениеПоказателя) = Тип("Число"), ЗначениеПоказателя, 0);
							Иначе;
								СуммыПоПоказателям.Вставить(СокрЛП(Пок.Код), ?(ТипЗнч(ЗначениеПоказателя) = Тип("Число"), ЗначениеПоказателя, 0));
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			МакетТаблЧасти.Вывести(КопияМакетаРаскрытия); // выводим строку - макет раскрытия со значениями в основной макет раскрытий
		КонецЦикла;
		
		Если ЕстьШапка И ВыводитьШапку Тогда
			ВывестиСекциюВМакет(Макет, МакетРаскрытияШапка);
		КонецЕсли;
		
		ВывестиСекциюВМакет(Макет, МакетТаблЧасти);
		Если ЕстьПодвал И (ЕстьОтбор ИЛИ ОтборПоКонтрольнымСоотношениям) Тогда
			
			Для Каждого Эл Из СуммыПоПоказателям Цикл
				
				ИмяПок = Эл.Ключ;
				
				Если МакетРаскрытияПодвал <> Неопределено Тогда
					СоотвОбл = МакетРаскрытияПодвал.Области.Найти(КодГруппыРаскрытия + "_" + КодСтроки + "_" + ИмяПок + "_СУММА");
					Если СоотвОбл <> Неопределено И СоотвОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И СоотвОбл.СодержитЗначение = Истина Тогда
						Попытка
							СоотвОбл.Формат   = ПолучитьСтрокуФормата(СоотвОбл.Формат);
						Исключение КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;

			ВывестиСекциюВМакет(Макет, МакетРаскрытияПодвал);
			
		КонецЕсли;
		
	КонецЕсли;
	Макет.Область(1, 0, Макет.ВысотаТаблицы, 0).Видимость = Истина;
		
	Возврат Макет;
	
КонецФункции

// Процедура анализирует текущий бланк и устанавливает переменную ОтступТаблицы.
//
Процедура ОпределитьНачалоТаблицы(ТабДокумент) Экспорт
	
	ОтступТаблицы = 0;
	
	Для ИндХ = 1 По ТабДокумент.ШиринаТаблицы Цикл
		Для ИндУ = 1 По ТабДокумент.ВысотаТаблицы Цикл
			Если ТабДокумент.Области.Найти(ТабДокумент.Область(ИндУ, ИндХ).Имя) <> Неопределено Тогда
				ОтступТаблицы = ИндХ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ОтступТаблицы <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтступТаблицы = 0 Тогда
		ОтступТаблицы = 1;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьТаблицуРаскрытияСтрок(ТабДокумент,ТабОбластиРаскрытия,Строка=Неопределено) Экспорт
	
	ТабОбластиРаскрытия.Очистить();
	
	//////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ЗАПРОСЫ ДЛЯ ПОЛУЧЕНИЯ ЗНАЧЕНИЙ РАСКРЫТИЯ
	
	ЗапросСтрокиРаскрытия=Новый Запрос;
	ЗапросСтрокиРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросСтрокиРаскрытия.Текст="ВЫБРАТЬ
	|мПоказатели.Ссылка,
	|мПоказатели.Наименование,
	|мПоказатели.ПорядковыйНомерКолонки,
	|мПоказатели.Код,
	|мПоказатели.Строка,
	|мПоказатели.Колонка,
	|мПоказатели.КодКолонка,
	|мПоказатели.ЧисловойПоказатель,
	|мПоказатели.СвязанныйПоказатель,
	|мПоказатели.ВидКурса,
	|мПоказатели.ТипЗначения,
	|мПоказатели.НеФинансовый,
	|мПоказатели.НеМасштабируется,
	|мПоказатели.ПериодРасчета
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ &мПоказатели КАК мПоказатели
	|ГДЕ НЕ мПоказатели.ГруппаРаскрытияСтрока=ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|Индексировать ПО Строка
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ &мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|Индексировать ПО
	|мПоказателиРаскрытия.Показатель
	|;
	|ВЫБРАТЬ";
	
	Для Каждого Колонка Из мПоказателиРаскрытия.Колонки Цикл
		
		Если Колонка.Имя="Значение" Тогда
			
			ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+"
			|ВЫРАЗИТЬ(мПоказателиРаскрытия.Значение КАК Число(18,5)) КАК Значение,";
			
		Иначе
			
			ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+"
			|мПоказателиРаскрытия."+Колонка.Имя+" КАК "+Колонка.Имя+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+"
	|мПоказатели.Код,
	|мПоказатели.Строка,
	|мПоказатели.ЧисловойПоказатель,
	|мПоказатели.НеМасштабируется
	|ПОМЕСТИТЬ ПоказателиРаскрытияЧисловые
	|ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели
	|ПО мПоказателиРаскрытия.Показатель=мПоказатели.Ссылка
	|ГДЕ мПоказатели.ЧисловойПоказатель
	|Индексировать ПО мПоказатели.Строка
	|;
	|ВЫБРАТЬ";
	
	Для Каждого Колонка Из мПоказателиРаскрытия.Колонки Цикл
		
		ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+"
		|мПоказателиРаскрытия."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
	КонецЦикла;
	
	ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+"
	|мПоказатели.Код,
	|мПоказатели.Строка,
	|мПоказатели.ЧисловойПоказатель,
	|мПоказатели.НеМасштабируется
	|ПОМЕСТИТЬ ПоказателиРаскрытияНечисловые
	|ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ мПоказатели КАК мПоказатели
	|ПО мПоказателиРаскрытия.Показатель=мПоказатели.Ссылка
	|ГДЕ (НЕ мПоказатели.ЧисловойПоказатель)
	|Индексировать ПО мПоказатели.Строка";
	
	ЗапросСтрокиРаскрытия.УстановитьПараметр("мПоказатели",мПоказатели);
	
	Если НЕ мТекущаяВалюта=ОсновнаяВалюта Тогда
		
		мПоказателиРаскрытияВВалюте=ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели,мПоказателиРаскрытия,мТекущаяВалюта,Ложь);
		ЗапросСтрокиРаскрытия.УстановитьПараметр("мПоказателиРаскрытия",мПоказателиРаскрытияВВалюте);
		
	Иначе
		
		ЗапросСтрокиРаскрытия.УстановитьПараметр("мПоказателиРаскрытия",мПоказателиРаскрытия);
		
	КонецЕсли;
	
	ЗапросСтрокиРаскрытия.Выполнить();
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ВЫБЕРЕМ СТРОКИ, РАСКРЫВАЕМЫЕ ПО АНАЛИТИКЕ
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Код,
	|	СтрокиОтчетов.ГруппаРаскрытия,
	|	СтрокиОтчетов.Ссылка,
	|	СтрокиОтчетов.ГруппаРаскрытия.Код КАК КодГруппыРаскрытия,
	|	СтрокиОтчетов.ГруппаРаскрытия.ЧислоАналитик КАК ЧислоАналитик
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если ТабДокумент.Области.Найти("Строка_"+СокрЛП(Результат.Код))=Неопределено Тогда
			
			Продолжить;
				
		КонецЕсли;
		
		ЕстьНечисловыеПоказатели=Ложь;
		ЕстьЧисловыеПоказатели=Ложь;
		СтрСверткиПоказатели="";
		
		СтрРаскрытия=ТабОбластиРаскрытия.Добавить();
		СтрРаскрытия.КодСтроки=СокрЛП(Результат.Код);
		СтрРаскрытия.ГруппаРаскрытия=Результат.ГруппаРаскрытия;
		СтрРаскрытия.Строка=Результат.Ссылка;
		
		ПараметрыГруппыРаскрытия = ПолучитьПараметрыГруппыРаскрытия(Результат.ГруппаРаскрытия);
		
		Если ПараметрыГруппыРаскрытия=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросСтрокиРаскрытия.Текст="ВЫБРАТЬ Различные
		|	мПоказатели.Код,
		|	мПоказатели.Ссылка,
		|	мПоказатели.Наименование,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	мПоказатели.ТипЗначения,
		|	мПоказатели.ЧисловойПоказатель,
		|	мПоказатели.НеМасштабируется
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|ГДЕ
		|	мПоказатели.Строка = &Строка
		|
		|УПОРЯДОЧИТЬ ПО
		|	мПоказатели.ПорядковыйНомерКолонки";
		
		ЗапросСтрокиРаскрытия.УстановитьПараметр("Строка",Результат.Ссылка);
		
		ПоказателиКолонки=ЗапросСтрокиРаскрытия.Выполнить().Выгрузить();
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	ПОДГОТОВИМ ТАБЛИЦУ ЗНАЧЕНИЙ ЧИСЛОВЫХ ПОКАЗАТЕЛЕЙ
		
		ТекстВыборкаЧисловые="";
		МассивНечисловые=Новый Массив;
		
		ТекТаблицаРаскрытия=мПоказателиРаскрытия.СкопироватьКолонки();
		
		Для Каждого Пок Из ПоказателиКолонки Цикл
			
			Если Пок.ЧисловойПоказатель Тогда
				
				ТекТаблицаРаскрытия.Колонки.Добавить(Пок.Код,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));				
				ЕстьЧисловыеПоказатели=Истина;
				
				ТекстВыборкаЧисловые=ТекстВыборкаЧисловые+",
				|СУММА(ВЫБОР КОГДА ПоказателиРаскрытияЧисловые.Код="""+Пок.Код+""" Тогда ПоказателиРаскрытияЧисловые.Значение ИНАЧЕ 0 КОНЕЦ) КАК "+Пок.Код;
							
			Иначе
				
				ЕстьНечисловыеПоказатели=Истина;
				МассивНечисловые.Добавить(Новый Структура("Код,ТипЗначения", Пок.Код, Пок.ТипЗначения));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросСтрокиРаскрытия.Текст="ВЫБРАТЬ";
		ТекстГруппировки="";
		ТекстАналитики="";
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+Результат.ЧислоАналитик) Цикл 				
			
			ТекстАналитики=ТекстАналитики+", ПоказателиРаскрытияЧисловые.Аналитика"+Индекс+" КАК Аналитика"+Индекс;		
			ТекстГруппировки=ТекстГруппировки+",Аналитика"+Индекс;
			
		КонецЦикла;
		
		ТекстАналитики=ТекстАналитики+", ПоказателиРаскрытияЧисловые.АналитикаВалюта КАК АналитикаВалюта";		
		ТекстГруппировки=ТекстГруппировки+",АналитикаВалюта";
		
		ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+Сред(ТекстАналитики,2)+ТекстВыборкаЧисловые+" 
		|ИЗ ПоказателиРаскрытияЧисловые КАК ПоказателиРаскрытияЧисловые
		|ГДЕ ПоказателиРаскрытияЧисловые.Строка=&Строка
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировки,2);
		
		ЗапросСтрокиРаскрытия.УстановитьПараметр("Строка",Результат.Ссылка);
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ЗапросСтрокиРаскрытия.Выполнить().Выгрузить(),ТекТаблицаРаскрытия);
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	ДОБАВИМ В ТАБЛИЦУ ЗНАЧЕНИЯ НЕЧИСЛОВЫХ ПОКАЗАТЕЛЕЙ
		
		Если МассивНечисловые.Количество()>0 Тогда
			
			ТекстАналитики="";     
			
			СтруктураПоиска=Новый Структура;     
			
			ЗапросСтрокиРаскрытия.Текст="ВЫБРАТЬ";
			
			Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+Результат.ЧислоАналитик) Цикл 				
				
				СтруктураПоиска.Вставить("Аналитика"+Индекс);
				
				ТекстАналитики=ТекстАналитики+", ПоказателиРаскрытияНечисловые.Аналитика"+Индекс+" КАК Аналитика"+Индекс;		
				
			КонецЦикла;
			
			ЗапросСтрокиРаскрытия.Текст=ЗапросСтрокиРаскрытия.Текст+Сред(ТекстАналитики,2)+", ПоказателиРаскрытияНечисловые.Значение                 
			|ИЗ ПоказателиРаскрытияНечисловые КАК ПоказателиРаскрытияНечисловые                 
			|ГДЕ ПоказателиРаскрытияНечисловые.Строка=&Строка                 
			|И ПоказателиРаскрытияНечисловые.Код=&Код";                                   	
			
			Для Каждого НечисловойПоказатель ИЗ МассивНечисловые Цикл   
				
				КодПоказателя = НечисловойПоказатель.Код;
				
				Если НечисловойПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
					ОписаниеТиповКолонки = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
				ИначеЕсли НечисловойПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
					ОписаниеТиповКолонки = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
				Иначе //Если НечисловойПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
					ОписаниеТиповКолонки = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1000);
				КонецЕсли;				
				
				ЗапросСтрокиРаскрытия.УстановитьПараметр("Строка",	Результат.Ссылка);                       
				ЗапросСтрокиРаскрытия.УстановитьПараметр("Код",		КодПоказателя);                                               
				
				ТекТаблицаРаскрытия.Колонки.Добавить(КодПоказателя, ОписаниеТиповКолонки);				
				Нечисловые=ЗапросСтрокиРаскрытия.Выполнить().Выбрать();
				
				Пока Нечисловые.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,Нечисловые);
					
					МассивНайденных=ТекТаблицаРаскрытия.НайтиСтроки(СтруктураПоиска);
					
					Если МассивНайденных.Количество()>0 Тогда
						
						МассивНайденных[0][КодПоказателя]=Нечисловые.Значение;
						
					Иначе
						
						НоваяСтрока=ТекТаблицаРаскрытия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
						НоваяСтрока[КодПоказателя]=Нечисловые.Значение;
												
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекТаблицаРаскрытия.Колонки.Добавить("ID", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ИндексРаскрытия = 0; // Вводим идентификатор строки в таблице раскрытия для однозначного определения поля 
		// при неполном выводе (вывод с отбором) в поле макета.
		
		Для Каждого Строка Из ТекТаблицаРаскрытия Цикл
			Строка.ID       = ИндексРаскрытия;
			ИндексРаскрытия = ИндексРаскрытия + 1;
			Строка.ИндексАналитики=ПолучитьИндексАналитик(Строка);
		КонецЦикла;
		
		СтрРаскрытия.ТаблицаРаскрытия=ТекТаблицаРаскрытия;
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		// ПОДГОТОВИМ МАКЕТ РАСКРЫТИЯ СТРОКИ
		
		// определяем макет раскрытия
		МакетыРаскрытия = ВернутьМассивМакетовРаскрытия(ШаблонОтчета, СокрЛП(Результат.КодГруппыРаскрытия)+"_"+СокрЛП(Результат.Код));
		
		СтрРаскрытия.МакетыРаскрытия=МакетыРаскрытия;
		//СтрРаскрытия.ОтборПоРаскрытию = ВернутьТекущуюСтруктуруОтбораИзСоответствия(СтрРаскрытия.КодСтроки);
		
		ПоказателиКолонки.Колонки.Добавить("НомерКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
		
		ТабДокРаскрытие=СгенерироватьМакетРаскрытияСтрока(СтрРаскрытия.ГруппаРаскрытия
		, СтрРаскрытия.ТаблицаРаскрытия
		, ВернутьТекущуюСтруктуруОтбораИзСоответствия(СтрРаскрытия.КодСтроки) //СтрРаскрытия.ОтборПоРаскрытию
		, СтрРаскрытия.КодСтроки
		, МакетыРаскрытия,
		ПоказателиКолонки);
		
		СтрРаскрытия.ТабДокРаскрытие=ТабДокРаскрытие;
		СтрРаскрытия.ПоказателиКолонки=ПоказателиКолонки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуРаскрытияСтрок()

Процедура ДобавитьДанныеВТаблицуКоординатСинтетика(ТаблДок,СмещениеСтрок=0) Экспорт
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = Обл.Имя;
		Если Прав(ИмяОбласти, 6) <> "_СУММА" Тогда
			
			КоординатаПоследнего_ = СтрНайти(ИмяОбласти, "_");
			
			Если КоординатаПоследнего_ > 0 Тогда
				Длина = СтрДлина(ИмяОбласти);
				КодПодчеркивания = КодСимвола("_");
				Для Инд = 0 По Длина - КоординатаПоследнего_ Цикл
					Если КодСимвола(ИмяОбласти, Длина - Инд) = КодПодчеркивания Тогда
						КоординатаПоследнего_ = Длина - Инд;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Окончание = Сред(ИмяОбласти, КоординатаПоследнего_ + 1);
				
				Если НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(Окончание) И НЕ ПустаяСтрока(Окончание) Тогда
					КодПоказателя = Лев(ИмяОбласти, КоординатаПоследнего_ - 1);
					Вхождение_Показатель_ = СтрНайти(КодПоказателя, "_Показатель_");
					Если Вхождение_Показатель_ <>0 Тогда
						КодПоказателя = Сред(КодПоказателя, Вхождение_Показатель_ + СтрДлина("_Показатель_"));
					КонецЕсли;
				Иначе
					КодПоказателя = ИмяОбласти;
				КонецЕсли;
			Иначе
				КодПоказателя = ИмяОбласти;
			КонецЕсли;
			
			ПоказательОбласти = мСоответствиеДляПоискаПоКоду[Обл.Имя];
			
			Если НЕ ПоказательОбласти=Неопределено Тогда
				
				НоваяСтрока=ТабКоординатыОбщ.Добавить();
				НоваяСтрока.Раскрытие=Ложь;
				НоваяСтрока.Строка=ПоказательОбласти.Строка;
				НоваяСтрока.Колонка=ПоказательОбласти.Колонка;
				НоваяСтрока.Показатель=ПоказательОбласти.Ссылка;
				
				НоваяСтрока.НомерСтроки=Обл.Верх+СмещениеСтрок;
				НоваяСтрока.НомерКолонки=Обл.Лево;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьДанныеВТаблицуКоординатСинтетика()

Процедура ДобавитьДанныеВТаблицуКоординатАналитика(НачальнаяСтрока,ДанныеСтроки) Экспорт
	
	Индекс=1;
	
	//////////////////////////////////////////////////////////////
	// Возможно, выводится заголовок группы раскрытия
		
	СдвигПоВертикали=ОпределитьВысотуШапки(ДанныеСтроки.МакетыРаскрытия);
	
	Для Каждого СтрокаРаскрытия ИЗ ДанныеСтроки.ТаблицаРаскрытия Цикл
		
		Для Каждого СтрокаПоказатель ИЗ ДанныеСтроки.ПоказателиКолонки Цикл
			
			НоваяСтрока=ТабКоординатыОбщ.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРаскрытия);
			
			НоваяСтрока.Раскрытие=Истина;
			НоваяСтрока.Строка=ДанныеСтроки.Строка;
			НоваяСтрока.Колонка=СтрокаПоказатель.Колонка;
			НоваяСтрока.Показатель=СтрокаПоказатель.Ссылка;
			
			НоваяСтрока.НомерСтроки=НачальнаяСтрока+Индекс+СдвигПоВертикали;
			//НоваяСтрока.НомерСтроки=НачальнаяСтрока+1+СтрокаРаскрытия.ID+СдвигПоВертикали;
			НоваяСтрока.НомерКолонки=СтрокаПоказатель.НомерКолонки;
			
		КонецЦикла;
		
		Индекс=Индекс+1;
		
	КонецЦикла;		
	
КонецПроцедуры // ДобавитьДанныеВТаблицуКоординат() 

Процедура ПодготовитьДанныеРаскрытияВТеле() Экспорт
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ЗапросКоординаты=Новый Запрос;
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ЗапросКоординаты.Текст="
	|ВЫБРАТЬ Строка, Колонка, Ссылка
	|ПОМЕСТИТЬ СтрокаКолонка
	|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
	|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
	|;";
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|;";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
	
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказатели);
	ЗапросКоординаты.Выполнить();
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ Минимум(НомерКолонки) КАК НомерКолонки ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ ГДЕ (НЕ ТабКоординатыОбщ.НомерКолонки=0)";
	
	Результат=ЗапросКоординаты.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ПоложениеПервойКолонкиПриРаскрытии=Результат.НомерКолонки;
	Иначе
		ПоложениеПервойКолонкиПриРаскрытии=1;
	КонецЕсли;
	
	СформироватьТаблицуСтрок();
	
	ЗапросДанные.Текст="
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТаблицаСтроки.Ссылка КАК Ссылка,
	|ТаблицаСтроки.Код КАК Код,
	|ТаблицаСтроки.Порядок КАК Порядок
	|
	|ПОМЕСТИТЬ СтрокиОтчетов
	|ИЗ	&ТаблицаСтроки КАК ТаблицаСтроки
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка КАК Показатель,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.НеМасштабируется,
	|	мПоказатели.ЧисловойПоказатель,
	|   мПоказатели.ВидКурса,
	|   мПоказатели.СвязанныйПоказатель
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Показатель
	|;";
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	ЗапросДанные.УстановитьПараметр("мПоказатели",мПоказатели);
				
	ЗапросДанные.Выполнить();
	
	МассивГруппировокСтрокИтог=Новый Массив;
	МассивГруппировокСтрокИтог.Добавить("Строка");
	МассивГруппировокСтрокИтог.Добавить("Аналитика1");
	МассивГруппировокСтрокИтог.Добавить("Аналитика2");
	
	МассивГруппировокКолонокИтог=Новый Массив;
	МассивГруппировокКолонокИтог.Добавить("Колонка");
	
	ПодготовитьТаблицыГрупп();
	УровеньСтрока=1;
	УровеньКолонка=1;
	
КонецПроцедуры // ПодготовитьЗапросКоординаты() 


Функция ВернутьТекущуюСтруктуруОтбораИзСоответствия(КодСтроки) Экспорт
	
	Перем Ответ;
	СтруктураОтбораАналитикДляСтрокОтчета.Свойство(КодСтроки, Ответ);
	
	Если Ответ = Неопределено Тогда
		Ответ = Новый Соответствие;	
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ВернутьТекущуюСтруктуруСортировкиИзСоответствия(КодСтроки) Экспорт
	
	Перем Ответ;
	СтруктураСортировкиАналитикДляСтрокОтчета.Свойство(КодСтроки, Ответ);
	
	Если Ответ = Неопределено Тогда
		Ответ = Новый Соответствие;	
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Процедура УстановитьСтруктуруОтбораВСоответствие(КодСтроки, СтруктураОтбораАналитик) Экспорт
	
	Если НЕ СтруктураОтбораАналитикДляСтрокОтчета.Свойство(КодСтроки) Тогда
		СтруктураОтбораАналитикДляСтрокОтчета.Вставить(КодСтроки, СтруктураОтбораАналитик);
	Иначе
		СтруктураОтбораАналитикДляСтрокОтчета[КодСтроки] = СтруктураОтбораАналитик;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтруктуруСортировкиВСоответствие(КодСтроки, СтруктураСортировкиАналитик) Экспорт
	
	Если НЕ СтруктураСортировкиАналитикДляСтрокОтчета.Свойство(КодСтроки) Тогда
		СтруктураСортировкиАналитикДляСтрокОтчета.Вставить(КодСтроки, СтруктураСортировкиАналитик);
	Иначе
		СтруктураСортировкиАналитикДляСтрокОтчета[КодСтроки] = СтруктураСортировкиАналитик;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьКэшДанныхПоГруппамРаскрытия(ГруппаРаскрытия = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтроковыйИндекс = Формат(Инд, "ЧДЦ=0; ЧН=0");
		
		ТаблицаДанных.Колонки.Добавить("ВидАналитики" + СтроковыйИндекс);
		ТаблицаДанных.Колонки.Добавить("НаименованиеАналитики" + СтроковыйИндекс);
		ТаблицаДанных.Колонки.Добавить("ТипЗначенияАналитики" + СтроковыйИндекс);
		ТаблицаДанных.Колонки.Добавить("ОбязательнаяАналитика" + СтроковыйИндекс);
		Запрос.Текст = Запрос.Текст + "
		|, ГруппыРаскрытия.ВидАналитики" + СтроковыйИндекс + " КАК ВидАналитики" + СтроковыйИндекс + "
		|, ГруппыРаскрытия.ВидАналитики" + СтроковыйИндекс + ".Наименование" + ?(глОсновнойЯзык = 0, "", Формат(глОсновнойЯзык,"ЧЦ=1")) + " КАК НаименованиеАналитики" + СтроковыйИндекс + "
		|, ГруппыРаскрытия.ВидАналитики" + СтроковыйИндекс + ".ТипЗначения КАК ТипЗначенияАналитики" + СтроковыйИндекс + "
		|, ГруппыРаскрытия.Аналитика" + СтроковыйИндекс +"Обязательна КАК ОбязательнаяАналитика" + СтроковыйИндекс;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("ГруппаРаскрытия" , Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
	ТаблицаДанных.Колонки.Добавить("КодГруппыРаскрытия");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия
				   |                  , ГруппыРаскрытия.Код    КАК КодГруппыРаскрытия" + Запрос.текст + "
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия";
	
	Если ГруппаРаскрытия <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ГруппыРаскрытия.Ссылка В(&Ссылка)";
		Запрос.УстановитьПараметр("Ссылка", ГруппаРаскрытия);
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		| ГДЕ ГруппыРаскрытия.Ссылка В (
		
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПоказателиОтчетов.ГруппаРаскрытия
		|	ИЗ
		|		Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|	ГДЕ
		|		ПоказателиОтчетов.Владелец = &Владелец
		|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
		|
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ
		|		СтрокиОтчетов.ГруппаРаскрытия
		|	ИЗ
		|		Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|	ГДЕ
		|		СтрокиОтчетов.Владелец = &Владелец
		|И (НЕ СтрокиОтчетов.ПометкаУдаления))";
		
		Запрос.УстановитьПараметр("Владелец", ВидОтчета);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовСтр = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка, , "КодГруппыРаскрытия");
		НовСтр.КодГруппыРаскрытия = СокрЛП(Выборка.КодГруппыРаскрытия);
	КонецЦикла;
	
	ТаблицаДанных.Индексы.Добавить("ГруппаРаскрытия");
	
	Возврат ТаблицаДанных;
	
КонецФункции


Процедура ПодготовитьДанныеПоГруппамРаскрытия() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия,
	|ГруппыРаскрытия.Код КАК КодГруппы,";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтроковыйИндекс = Формат(Инд, "ЧДЦ=0; ЧН=0");
		
		Запрос.Текст = Запрос.Текст + "
		|ГруппыРаскрытия.ВидАналитики" + СтроковыйИндекс + " КАК ВидАналитики" + СтроковыйИндекс + ",
		|ГруппыРаскрытия.ВидАналитики" + СтроковыйИндекс + ".Наименование КАК НаименованиеАналитики" + СтроковыйИндекс + ",
		|ГруппыРаскрытия.ВидАналитики" + СтроковыйИндекс + ".ТипЗначения КАК ТипЗначенияАналитики" + СтроковыйИндекс + ",
		|ГруппыРаскрытия.Аналитика" + СтроковыйИндекс +"Обязательна КАК ОбязательнаяАналитика" + СтроковыйИндекс+",";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ГруппыРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиВалюта,
	|ГруппыРаскрытия.ВидАналитикиВалютаДт.Наименование КАК НаименованиеАналитикиВалюта,
	|ГруппыРаскрытия.ВидАналитикиВалютаДт.ТипЗначения КАК ТипЗначенияАналитикиВалюта,
	|Истина КАК ОбязательнаяАналитикаВалюта,";
	
	Запрос.Текст=Запрос.Текст+"
	|ГруппыРаскрытия.ПравилаОтображенияПолей.(
	|	Поле,
	|	Синоним,
	|	ИспользоватьВМакете,
	|	Отображать,
	|	ТаблицаАналитики,
	|	Ссылочное,
	|	ИмяКолонки,
	|	ИмяКолонки1,
	|	ИмяКолонки2,
	|	МультиязычныйРеквизит,
	|	АналитикаВидаОтчета
	|) КАК ПравилаОтображенияПолей
 	|
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ ГруппыРаскрытия.Владелец=&Владелец";
			
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	КэшПараметровГруппРаскрытия=Запрос.Выполнить().Выгрузить();
	
	КэшПараметровГруппРаскрытия.Колонки.Добавить("КодГруппыРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	
	Для Каждого Строка ИЗ КэшПараметровГруппРаскрытия Цикл
		
		Строка.КодГруппыРаскрытия=СокрЛП(Строка.КодГруппы);
		
	КонецЦикла;
	
	КэшПараметровГруппРаскрытия.Колонки.Удалить(КэшПараметровГруппРаскрытия.Колонки.КодГруппы);
	
КонецПроцедуры // ПодготовитьДанныеПоГруппамРаскрытия()

Функция ПолучитьПараметрыГруппыРаскрытия(ГруппаРаскрытия) Экспорт
	
	МассивРаскрытие=КэшПараметровГруппРаскрытия.НайтиСтроки(Новый Структура("ГруппаРаскрытия",ГруппаРаскрытия));
	
	Если МассивРаскрытие.Количество()>0 Тогда
		Возврат МассивРаскрытие[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции  // ПолучитьПараметрыГруппыРаскрытия()

Функция ВернутьМассивОбязательныхАналитик(СтрокаГруппыРаскрытия) Экспорт
	
	МассивОбязательныхАналитик = Новый Массив;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если СтрокаГруппыРаскрытия["ОбязательнаяАналитика" + Инд] Тогда
			МассивОбязательныхАналитик.Добавить("Аналитика" + Инд);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаГруппыРаскрытия["ОбязательнаяАналитикаВалюта"] Тогда
		МассивОбязательныхАналитик.Добавить("АналитикаВалюта");
	КонецЕсли;
	
	Возврат МассивОбязательныхАналитик;
	
КонецФункции

// Формирует таблицу значений, соответствующую раскрытию, в которой в каждой строке
// содержутся значения показателей группы раскрытия по уникальной комбинации значений аналитик.
//
Функция ПолучитьТаблицуРаскрытия(СтрокаГруппыРаскрытия, КодСтроки="", ВалютаОтображения = Неопределено,Показатель=Неопределено,ВыводПоИерархии=Ложь) Экспорт
	
	//Перем КэшТаблицыКурсов;
	
	СтруктураПоиска=Новый Структура;
		
	Если КодСтроки="" Тогда
		
		ТекГруппаРаскрытия=СтрокаГруппыРаскрытия.ГруппаРаскрытия;
		
		СтруктураПоиска.Вставить("ГруппаРаскрытия",ТекГруппаРаскрытия);
		
		Если НЕ Показатель=Неопределено Тогда
			
			СтруктураПоиска.Вставить("Ссылка",Показатель);
			
		КонецЕсли;
		
		Если УправляемыйРежим И (Не (ДанныеРаскрытияИнициализированы ИЛИ (НЕ МассивЗагруженныхГруппРаскрытия.Найти(ТекГруппаРаскрытия)=Неопределено))) Тогда
			
			ПолучитьДанныеГруппыРаскрытия(ТекГруппаРаскрытия);
			
		КонецЕсли;
		
	Иначе
		СтруктураПоиска.Вставить("КодСтрока", КодСтроки);
	КонецЕсли;
	
	ПоказателиКолонки = мПоказатели.Скопировать(СтруктураПоиска);
	ПоказателиКолонки.Сортировать("ПорядковыйНомерКолонки");
	
	СтрСверткиАналитики="";
	СтрСверткиПоказатели="";
	
	ОтображатьВДругойВалюте = ЗначениеЗаполнено(ОсновнаяВалюта) И ЗначениеЗаполнено(ВалютаОтображения) И ОсновнаяВалюта <> ВалютаОтображения;
			
	ЕстьНечисловыеПоказатели=Ложь;
	ЕстьЧисловыеПоказатели=Ложь;
	ЕстьВалютныеПоказатели=Ложь;
	
	ПоказателиГруппы=Новый Соответствие;
	
	Для Каждого Пок Из ПоказателиКолонки Цикл
				
		Если Пок.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ЕстьЧисловыеПоказатели=Истина;
		Иначе
			ЕстьНечисловыеПоказатели=Истина;
		КонецЕсли;
		
		Если Пок.Валютный Тогда
			ЕстьВалютныеПоказатели=Истина;
		КонецЕсли;
		
		ПоказателиГруппы.Вставить(Пок.Ссылка,1);
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|ПоказателиКолонки.Ссылка,
	|ПоказателиКолонки.Код,
	|ВЫБОР КОГДА ПоказателиКолонки.ТипЗначения=&ТипЗначенияЧисло Тогда Истина Иначе Ложь Конец КАК ЧисловойПоказатель,
	|ПоказателиКолонки.СвязанныйПоказатель,
	|ПоказателиКолонки.ВидКурса,
	|ПоказателиКолонки.НеФинансовый,
	|ПоказателиКолонки.НеМасштабируется,
	|ПоказателиКолонки.ПериодРасчета
	|ПОМЕСТИТЬ ПоказателиКолонки
	|ИЗ &ПоказателиКолонки КАК ПоказателиКолонки
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ &мПоказателиРаскрытия КАК мПоказателиРаскрытия";
		
	ТаблицаРаскрытияГруппа = Новый ТаблицаЗначений;
	ТаблицаРаскрытияГруппа.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	ТаблицаРаскрытияГруппа.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРаскрытияГруппа.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРаскрытияГруппа.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
    РабочихКолонок=0;

	Для Сч = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				
		Если ЗначениеЗаполнено(СтрокаГруппыРаскрытия["ВидАналитики" + Сч].ТипЗначения) Тогда
			
			ТаблицаРаскрытияГруппа.Колонки.Добавить("Аналитика" + Сч, СтрокаГруппыРаскрытия["ВидАналитики" + Сч].ТипЗначения);
			РабочихКолонок=РабочихКолонок+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//2 - Переносим значения
	Для каждого Стр из ?(РежимКорректировки,мКорректировкиПоказателейРаскрытия,мПоказателиРаскрытия) Цикл
		
		Если ПоказателиГруппы.Получить(Стр.Показатель)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРаскрытияГруппа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр,"Показатель,АналитикаВалюта,Значение,ЗначениеВалюта");
		
		Для  Инд = МаксАналитикОтчета+1 По МаксАналитикОтчета+РабочихКолонок Цикл
			
			НоваяСтрока["Аналитика" + Инд] = Стр["Аналитика" + Инд];
			
		КонецЦикла;
		
	КонецЦикла;
		
	Запрос.УстановитьПараметр("ПоказателиКолонки",		ПоказателиКолонки);
	Запрос.УстановитьПараметр("мПоказателиРаскрытия", 	ТаблицаРаскрытияГруппа);
	Запрос.УстановитьПараметр("ТипЗначенияЧисло",		Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	
	Запрос.Выполнить();
	
	ТекстАналитики="";
	ТекстГруппировка="";
	
	СтруктураОтбора=Новый Структура;
	
	ТаблицаРаскрытия=Новый ТаблицаЗначений;
	
	Если ЕстьВалютныеПоказатели Тогда
		
		ТекстАналитики=ТекстАналитики+",
		|АналитикаВалюта КАК АналитикаВалюта";
		
		ТаблицаРаскрытия.Колонки.Вставить(0,"АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"),"Валюта");
		
		ТекстГруппировка=ТекстГруппировка+","+"АналитикаВалюта";
		СтруктураОтбора.Вставить("АналитикаВалюта");
		
		ТаблицаРаскрытия.Колонки.Добавить("АналитикаВалюта_Отображение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50),"Валюта");
		
		ТекстАналитики = ТекстАналитики + ",
		|ПРЕДСТАВЛЕНИЕ(АналитикаВалюта) КАК АналитикаВалюта_Отображение";
		
		Если СтрокаГруппыРаскрытия.ПравилаОтображенияПолей.Найти("АналитикаВалюта_Отображение","Синоним")=Неопределено Тогда 
			
			НоваяСтрока=СтрокаГруппыРаскрытия.ПравилаОтображенияПолей.Добавить();
			НоваяСтрока.Поле		= "ПРЕДСТАВЛЕНИЕ(АналитикаВалюта.Ссылка)";
			НоваяСтрока.Синоним		= "АналитикаВалюта_Отображение";
			НоваяСтрока.ИмяКолонки 	= "Валюта";
			НоваяСтрока.Ссылочное   =Ложь;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Для Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаГруппыРаскрытия["ВидАналитики" + Инд]) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстАналитики=ТекстАналитики+",
		|Аналитика"+Инд+" КАК Аналитика"+Инд;
			                                                                                                                              //НаименованиеАналитики
		ТаблицаРаскрытия.Колонки.Добавить("Аналитика"+Инд,СтрокаГруппыРаскрытия["ВидАналитики" + Инд].ТипЗначения, СтрокаГруппыРаскрытия["ВидАналитики" + Инд]);
		
		ТекстГруппировка=ТекстГруппировка+","+"Аналитика"+Инд;
		СтруктураОтбора.Вставить("Аналитика"+Инд);
		
		ТекТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(База,СтрокаГруппыРаскрытия["ТипЗначенияАналитики"+Инд].Типы()[0]);
		
		Если ТекТипМетаДанных="Справочник" ИЛИ  ТекТипМетаДанных="Документ" Тогда
			
			ЕстьПоляДляВывода=Ложь;
			
			Для Каждого СтрПоле ИЗ СтрокаГруппыРаскрытия.ПравилаОтображенияПолей Цикл
				
				Если СтрНайти(СтрПоле.Поле,"Аналитика"+Инд+".")>0 И НЕ СтрПоле.Ссылочное Тогда
						
					Поле = СтрПоле.Поле;
					Синоним = СтрПоле.Синоним;
					
					Если СтрПоле.МультиязычныйРеквизит=Истина Тогда
						Поле = Поле + ?(глОсновнойЯзык = 0, "", глОсновнойЯзык);
						Синоним = Синоним + ?(глОсновнойЯзык = 0, "", глОсновнойЯзык);
					КонецЕсли;
					
					ТекстИмяКолонки="ИмяКолонки"+?(глОсновнойЯзык = 0, "", глОсновнойЯзык);
					
					ТекстАналитики=ТекстАналитики+",
					|"+Поле+" КАК "+ Синоним;
					
					ТаблицаРаскрытия.Колонки.Добавить(Синоним, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200), ?(ПустаяСтрока(СтрПоле[ТекстИмяКолонки]),СтрПоле.ИмяКолонки,СтрПоле[ТекстИмяКолонки]));
					
					ЕстьПоляДляВывода=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьПоляДляВывода Тогда
				
				ТаблицаРаскрытия.Колонки.Добавить("Аналитика" + Инд + "_Отображение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200),СтрокаГруппыРаскрытия["НаименованиеАналитики" + Инд]);
				
				ТекстАналитики = ТекстАналитики + ",
				|ПРЕДСТАВЛЕНИЕ(Аналитика"+Инд + ") КАК Аналитика" + Инд + "_Отображение";
				
				Если СтрокаГруппыРаскрытия.ПравилаОтображенияПолей.Найти("Аналитика" + Инд + "_Отображение","Синоним")=Неопределено Тогда 
					
					НоваяСтрока=СтрокаГруппыРаскрытия.ПравилаОтображенияПолей.Добавить();
					НоваяСтрока.Поле		= "ПРЕДСТАВЛЕНИЕ(Аналитика"+Инд + ".Ссылка)";
					НоваяСтрока.Синоним		= "Аналитика" + Инд + "_Отображение";
					НоваяСтрока.ИмяКолонки 	= СтрокаГруппыРаскрытия["НаименованиеАналитики" + Инд];
					НоваяСтрока.Ссылочное   =Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстАналитики = ТекстАналитики + ",
			|ПРЕДСТАВЛЕНИЕ(Аналитика"+Инд + ") КАК Аналитика" + Инд + "_Отображение";
			
			ТаблицаРаскрытия.Колонки.Добавить("Аналитика" + Инд + "_Отображение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200),СтрокаГруппыРаскрытия["НаименованиеАналитики" + Инд]);
			
			Если СтрокаГруппыРаскрытия.ПравилаОтображенияПолей.Найти("Аналитика" + Инд + "_Отображение","Синоним")=Неопределено Тогда 
				
				НоваяСтрока=СтрокаГруппыРаскрытия.ПравилаОтображенияПолей.Добавить();
				НоваяСтрока.Поле		= "ПРЕДСТАВЛЕНИЕ(Аналитика"+Инд + ".Ссылка)";
				НоваяСтрока.Синоним		= "Аналитика" + Инд + "_Отображение";
				НоваяСтрока.ИмяКолонки 	= СтрокаГруппыРаскрытия["НаименованиеАналитики" + Инд];
				НоваяСтрока.Ссылочное   =Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Показатель ИЗ ПоказателиКолонки Цикл
		
		Если Показатель.Проверочный И Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
			
			ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10),Показатель.Наименование);
			ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код+"_Отображение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10),Показатель.Наименование);
			
		Иначе
			
			ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код,КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(Показатель.ТипЗначения,18,5),Показатель.Наименование);
			
			Если Показатель.ПересчитыватьВалютнуюСумму Тогда
				
				ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код+"_Валюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5),Показатель.Наименование + Нстр("ru = '(в валюте)'"));
				
			КонецЕсли;
			
			ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код+"_Отображение",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(Показатель.ТипЗначения,18,5),Показатель.Наименование);
						
			Если Показатель.ПересчитыватьВалютнуюСумму Тогда
				
				ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код+"_ОтображениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5),Показатель.Наименование + Нстр("ru = '(в валюте)'"));
				
			КонецЕсли;	
					
		КонецЕсли;
		
	КонецЦикла;
						
	ТекстИтоговогоЗапроса=Сред(ТекстАналитики,2)+",
	|ПоказателиКолонки.Код,
	|ПоказателиКолонки.ЧисловойПоказатель,
	|ПоказателиКолонки.СвязанныйПоказатель,
	|ПоказателиКолонки.ВидКурса,
	|ПоказателиКолонки.НеФинансовый,
	|ПоказателиКолонки.НеМасштабируется,
	|ПоказателиКолонки.ПериодРасчета
	|ПОМЕСТИТЬ ТабРаскрытиеЧисловых
	|ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиКолонки КАК ПоказателиКолонки
	|ПО мПоказателиРаскрытия.Показатель=ПоказателиКолонки.Ссылка
	|ГДЕ #ПоказателиКолонки.ЧисловойПоказатель";
	
	ПризнакОшибки = Ложь;
	
	Если ЕстьЧисловыеПоказатели Тогда
		
		ЗначениеДелителя=ВернутьЗначениеДелителя();
		
		ТекстИтоговогоЗапросаЧисло=СтрЗаменить(ТекстИтоговогоЗапроса,"#","");
		
		Если Не ОтображатьВДругойВалюте Тогда
			
			Запрос.Текст="ВЫБРАТЬ
			|мПоказателиРаскрытия.Показатель,
			|ВЫРАЗИТЬ (мПоказателиРаскрытия.Значение КАК Число (18,5))/(ВЫБОР Когда ПоказателиКолонки.НеМасштабируется Тогда 1 Иначе &ЗначениеДелителя КОНЕЦ) КАК Значение,";
			
			Если ЕстьВалютныеПоказатели Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|ВЫРАЗИТЬ (мПоказателиРаскрытия.ЗначениеВалюта КАК Число (18,5))/(ВЫБОР Когда ПоказателиКолонки.НеМасштабируется Тогда 1 Иначе &ЗначениеДелителя КОНЕЦ) КАК ЗначениеВалюта,";
				
			КонецЕсли;
						
			Запрос.Текст=Запрос.Текст+"
			|ВЫРАЗИТЬ (мПоказателиРаскрытия.Значение КАК Число (18,5))/(ВЫБОР Когда ПоказателиКолонки.НеМасштабируется Тогда 1 Иначе &ЗначениеДелителя КОНЕЦ) КАК Отображение,";
			
			Если ЕстьВалютныеПоказатели Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|ВЫРАЗИТЬ (мПоказателиРаскрытия.ЗначениеВалюта КАК Число (18,5))/(ВЫБОР Когда ПоказателиКолонки.НеМасштабируется Тогда 1 Иначе &ЗначениеДелителя КОНЕЦ) КАК ОтображениеВалюта,";
				
			КонецЕсли;
			
			Запрос.Текст=Запрос.Текст+"
			|"+ТекстИтоговогоЗапросаЧисло+" 
			|;";
			
			Запрос.УстановитьПараметр("ЗначениеДелителя",ЗначениеДелителя);
			
		Иначе
			
			ТекстИтоговогоЗапросаЧисло=СтрЗаменить(ТекстИтоговогоЗапросаЧисло,"ПОМЕСТИТЬ ТабРаскрытиеЧисловых","");
			Запрос.Текст="ВЫБРАТЬ
			|мПоказателиРаскрытия.Показатель,
			|ВЫРАЗИТЬ (мПоказателиРаскрытия.Значение КАК Число (18,5)) КАК Значение,
			|ВЫРАЗИТЬ (мПоказателиРаскрытия.Значение КАК Число (18,5)) КАК Отображение,";
			
			Если ЕстьВалютныеПоказатели Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|ВЫРАЗИТЬ (мПоказателиРаскрытия.ЗначениеВалюта КАК Число (18,5)) КАК ЗначениеВалюта,
				|ВЫРАЗИТЬ (мПоказателиРаскрытия.ЗначениеВалюта КАК Число (18,5)) КАК ОтображениеВалюта,"
				
			КонецЕсли;
				
			Запрос.Текст=Запрос.Текст+ТекстИтоговогоЗапросаЧисло;
			
			ТабРаскрытиеЧисловых=Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрРаскрытие ИЗ ТабРаскрытиеЧисловых Цикл
				
				Если ОтображатьВДругойВалюте Тогда
					
					ТекЗначение=ПересчитатьЗначениеПоказателяПоКурсу(СтрРаскрытие.Значение, СтрРаскрытие, ОсновнаяВалюта, ВалютаОтображения);
					
				Иначе
					
					ТекЗначение = СтрРаскрытие.Значение;
					
				КонецЕсли;
				
				Если НЕ СтрРаскрытие.НеМасштабируется Тогда
					ТекЗначение = ТекЗначение / ВернутьЗначениеДелителя();
				КонецЕсли;
				
				СтрРаскрытие.Отображение=ТекЗначение;
				
			КонецЦикла;
			
			// Получим развернутую таблицу числовых значений
			Запрос.Текст="ВЫБРАТЬ *
			|ПОМЕСТИТЬ ТабРаскрытиеЧисловых
			|ИЗ &ТабРаскрытиеЧисловых КАК ТабРаскрытиеЧисловых
			|;";
			
			Запрос.УстановитьПараметр("ТабРаскрытиеЧисловых",ТабРаскрытиеЧисловых);
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|ВЫБРАТЬ";
		
		ТекстСумма="";
		Для Каждого Показатель ИЗ ПоказателиКолонки Цикл
			
			Если НЕ Показатель.ЧисловойПоказатель Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос.Текст=Запрос.Текст+"
			|ВЫБОР КОГДА ТабРаскрытиеЧисловых.Код=&"+Показатель.Код+"
			|ТОГДА ТабРаскрытиеЧисловых.Значение
			|ИНАЧЕ 0 КОНЕЦ КАК "+Показатель.Код+",
			|ВЫБОР КОГДА ТабРаскрытиеЧисловых.Код=&"+Показатель.Код+"
			|ТОГДА ТабРаскрытиеЧисловых.Отображение
			|ИНАЧЕ 0 КОНЕЦ КАК "+Показатель.Код+"_Отображение,";
			
			ТекстСумма=ТекстСумма+"
			|СУММА("+Показатель.Код+") КАК "+Показатель.Код+",
			|СУММА("+Показатель.Код+"_Отображение) КАК "+Показатель.Код+"_Отображение,";
			
			Если Показатель.Валютный Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|ВЫБОР КОГДА ТабРаскрытиеЧисловых.Код=&"+Показатель.Код+"
				|ТОГДА ТабРаскрытиеЧисловых.ЗначениеВалюта
				|ИНАЧЕ 0 КОНЕЦ КАК "+Показатель.Код+"_Валюта,
				|ВЫБОР КОГДА ТабРаскрытиеЧисловых.Код=&"+Показатель.Код+"
				|ТОГДА ТабРаскрытиеЧисловых.ОтображениеВалюта
				|ИНАЧЕ 0 КОНЕЦ КАК "+Показатель.Код+"_ОтображениеВалюта,";
				
				ТекстСумма=ТекстСумма+"
				|СУММА("+Показатель.Код+"_Валюта) КАК "+Показатель.Код+"_Валюта,
				|СУММА("+Показатель.Код+"_ОтображениеВалюта) КАК "+Показатель.Код+"_ОтображениеВалюта,";		
				
			КонецЕсли;
							
			Запрос.УстановитьПараметр(Показатель.Код,Показатель.Код);
			
		КонецЦикла;
		
		Запрос.Текст=Запрос.Текст+Сред(ТекстАналитики,2)+"
		|ПОМЕСТИТЬ ТабРаскрытиеСвод
		|ИЗ ТабРаскрытиеЧисловых КАК ТабРаскрытиеЧисловых
		|;
		|ВЫБРАТЬ"+ТекстСумма+Сред(ТекстАналитики,2)+"
		|ИЗ ТабРаскрытиеСвод КАК ТабРаскрытиеСвод
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2);
				
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(),ТаблицаРаскрытия);
						
	КонецЕсли;  // Если ЕстьЧисловыеПоказатели 	
	
	Если ЕстьНечисловыеПоказатели Тогда
		
		Если ЕстьЧисловыеПоказатели Тогда
			
			Запрос.Текст="УНИЧТОЖИТЬ ТабРаскрытиеЧисловых";
			Запрос.Выполнить();
			
			Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
				ТаблицаРаскрытия.Индексы.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст="ВЫБРАТЬ
		|мПоказателиРаскрытия.Показатель,
		|мПоказателиРаскрытия.Значение КАК Значение,"+СтрЗаменить(ТекстИтоговогоЗапроса,"#","НЕ ")+"
		|;
		|ВЫБРАТЬ * ИЗ ТабРаскрытиеЧисловых";
		
		Запрос.УстановитьПараметр("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		Стр=Запрос.Выполнить().Выбрать();
		
		// заполняем матрицу раскрытий значениями
		Пока Стр.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора,Стр);
			
			РезультатПоиска = ТаблицаРаскрытия.НайтиСтроки(СтруктураОтбора);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				НовСтр = ТаблицаРаскрытия.Добавить();
				//ЗаполнитьЗначенияСвойств(НовСтр, СтруктураОтбора);
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				НовСтр[Стр.Код] = Стр.Значение;
				НовСтр[Стр.Код + "_Отображение"] = Стр.Значение;
								
			Иначе
				
				РезультатПоиска[0][Стр.Код] = Стр.Значение;
				РезультатПоиска[0][Стр.Код + "_Отображение"] 			= Стр.Значение;
								
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			ТаблицаРаскрытия.Индексы.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			ТаблицаРаскрытия.Индексы.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРаскрытия.Колонки.Добавить("ID", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаскрытия.Колонки.Добавить("Отступ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1),"Отступ");

	ИндексРаскрытия = 0; // Вводим идентификатор строки в таблице раскрытия для однозначного определения поля 
	// при неполном выводе (вывод с отбором) в поле макета.
	
	Для Каждого Строка Из ТаблицаРаскрытия Цикл
		Строка.ID       = ИндексРаскрытия;
		ИндексРаскрытия = ИндексРаскрытия + 1;
	КонецЦикла;
			
	Возврат ТаблицаРаскрытия;
	
КонецФункции

// Формирует отфильтрованную таблицу раскрытия на основании неотфильтрованной по заданным
// значениям отборов по аналитикам.
//
Функция НаложитьОтборНаТаблицуРаскрытия(ТаблицаРаскрытия, Аналитики) Экспорт
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаРаскрытия);
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	Для Каждого Строка Из ПостроительЗапроса.ДоступныеПоля Цикл
		ПостроительЗапроса.ВыбранныеПоля.Добавить(Строка.Имя);
	КонецЦикла;
	
	Для Каждого Аналитика Из Аналитики Цикл
		Если ЗначениеЗаполнено(Аналитика.Значение) Тогда
			ИмяАналитики = Аналитика.Ключ;
			
			// Отбор осуществляется только по аналитикам показателя.
			Если Метаданные().Реквизиты.Найти(ИмяАналитики) <> Неопределено И ЗначениеЗаполнено(ЭтотОбъект[ИмяАналитики]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТаблицаРаскрытия.Колонки.Найти(ИмяАналитики) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Отбор = ПостроительЗапроса.Отбор.Добавить(ИмяАналитики);
			Отбор.Значение      = Аналитика.Значение;
			Отбор.Использование = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

// Сканирует области исходного табличного документа и удаляет те горизонтальные области,
// которые связаны с раскрытиями.
//
Процедура ОбработатьМакетыРаскрытий(Макет) Экспорт
	
	ИменаГруппРаскрытия = УправлениеОтчетамиУХ.ПолучитьСписокИменГруппРаскрытия(ВидОтчета);
	мМакетыРаскрытий.Очистить();
	
	Если ШаблонОтчета.МакетРаскрытий.Количество() = 0 Тогда
		
		Для Каждого ИмяГруппыРаскрытия Из ИменаГруппРаскрытия Цикл
			НовСтр			= мМакетыРаскрытий.Добавить();
			НовСтр.Имя		= ИмяГруппыРаскрытия.Значение;
			ОбластьШапка = Макет.Области.Найти(ИмяГруппыРаскрытия.Значение + "_Шапка");
			Если ОбластьШапка <> Неопределено Тогда
				НовСтр.Шапка = Макет.ПолучитьОбласть(ИмяГруппыРаскрытия.Значение + "_Шапка");
				Макет.УдалитьОбласть(ОбластьШапка, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			ОбластьСтрока = Макет.Области.Найти(ИмяГруппыРаскрытия.Значение);
			Если ОбластьСтрока <> Неопределено Тогда
				НовСтр.Строка	= Макет.ПолучитьОбласть(ИмяГруппыРаскрытия.Значение);
				Макет.УдалитьОбласть(ОбластьСтрока, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			ОбластьПодвал = Макет.Области.Найти(ИмяГруппыРаскрытия.Значение + "_Подвал");
			Если ОбластьПодвал <> Неопределено Тогда
				НовСтр.Подвал	= Макет.ПолучитьОбласть(ИмяГруппыРаскрытия.Значение + "_Подвал");
				Макет.УдалитьОбласть(ОбластьПодвал, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ, ПРЕДНАЗНАЧЕННЫЕ ДЛЯ ИСПОЛЬЗОВАНИЯ В ТОМ 
// ЧИСЛЕ И ИЗ ДРУГИХ ОБЪЕКТОВ

// Процедура устанавливает состояние отчета.
Процедура УстановитьСостояниеОтчета(НовоеСостояние, ТекФорма = Неопределено) Экспорт
	
	Если ПроверитьВозможностьИзмененияСостояния(НовоеСостояние) Тогда
		РасширениеПроцессыИСогласованиеУХ.ИзменитьСостояниеСогласованияОбъекта(ЭтотОбъект, НовоеСостояние);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьИзмененияСостояния(НовоеСостояние)
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Если Состояние = НовоеСостояние Тогда
			Возврат Ложь; // Значение не менялось. Нет смысла вносить изменения в регистр.
		КонецЕсли;
		
		ШапкаОшибки = Нстр("ru = 'Нельзя изменить состояние документа'");
		Отказ = НЕ УправлениеОтчетамиУХ.ВозможноУстановитьСостояние(ЭтотОбъект, НовоеСостояние, ШапкаОшибки);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СостояниеЯвляетсяПодтвержденным(НовоеСостояние) И НЕ СостояниеЯвляетсяПодтвержденным(Состояние) ТОгда
			Если НЕ Проверить().СтатусПроверки Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		
		Если НовоеСостояние = Перечисления.СостоянияОтчетов.Утвержден
			И (НЕ ПолныеПраваУХ.ПроверитьНаличиеПолныхПравУПользователя(ТекущийПользователь)
			И (НЕ РасширениеПроцессыИСогласованиеУХ.ПроверитьВозможностьУтвержденияОтчета(ТекущийПользователь, ВидОтчета, Организация)
			ИЛИ (ЗначениеЗаполнено(Проверяющий) И Проверяющий <> ТекущийПользователь)
			)
			) Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Текущий пользователь не имеет права утверждать отчет'"), Отказ, ШапкаОшибки);
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Функция проверяет - являются ли данные отчета подтвержденными по его состоянию.
Функция СостояниеЯвляетсяПодтвержденным(ТекСостояние) Экспорт
	
	Возврат ТекСостояние = Перечисления.СостоянияОтчетов.Утвержден
			ИЛИ ТекСостояние = Перечисления.СостоянияОтчетов.Подготовлен;
	
КонецФункции

//	Проверяет, был ли инициализирован контекст, и если нет - инициализирует
Процедура ПроверитьКонтекстИнициализирован() Экспорт
	
	Если ТипЗнч(мПоказатели) <> Тип("ТаблицаЗначений") Тогда
		
		ИнициализироватьКонтекст();
		
		Если СпособВывода="Дерево" Тогда
			
			ИнициализироватьДанныеДляОтображения();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполненностьОбязательныхАналитик(ПротоколироватьОшибки=Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(мПоказателиРаскрытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ГруппыРаскрытия.Аналитика1Обязательна КАК Аналитика1,
	|	ГруппыРаскрытия.Аналитика2Обязательна КАК Аналитика2,
	|	ГруппыРаскрытия.Аналитика3Обязательна КАК Аналитика3,
	|	ГруппыРаскрытия.Аналитика4Обязательна КАК Аналитика4,
	|	ГруппыРаскрытия.Аналитика5Обязательна КАК Аналитика5,
	|	ГруппыРаскрытия.Аналитика6Обязательна КАК Аналитика6,
	|	ГруппыРаскрытия.ВидАналитики1.Представление КАК ПредставлениеАналитики1,
	|	ГруппыРаскрытия.ВидАналитики2.Представление КАК ПредставлениеАналитики2,
	|	ГруппыРаскрытия.ВидАналитики3.Представление КАК ПредставлениеАналитики3,
	|	ГруппыРаскрытия.ВидАналитики4.Представление КАК ПредставлениеАналитики4,
	|	ГруппыРаскрытия.ВидАналитики5.Представление КАК ПредставлениеАналитики5,
	|	ГруппыРаскрытия.ВидАналитики6.Представление КАК ПредставлениеАналитики6,
	|	ПоказателиОтчетов.Наименование КАК НаименованиеПоказателя,
	|	ГруппыРаскрытия.Ссылка КАК Ссылка,
	|	ГруппыРаскрытия.ВидАналитики1.ТипЗначения КАК ТипЗначенияАналитики1,
	|	ГруппыРаскрытия.ВидАналитики2.ТипЗначения КАК ТипЗначенияАналитики2,
	|	ГруппыРаскрытия.ВидАналитики3.ТипЗначения КАК ТипЗначенияАналитики3,
	|	ГруппыРаскрытия.ВидАналитики4.ТипЗначения КАК ТипЗначенияАналитики4,
	|	ГруппыРаскрытия.ВидАналитики5.ТипЗначения КАК ТипЗначенияАналитики5,
	|	ГруппыРаскрытия.ВидАналитики6.ТипЗначения КАК ТипЗначенияАналитики6
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|		ПО ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
	|ГДЕ
	|	(ГруппыРаскрытия.Аналитика1Обязательна = ИСТИНА
	|			ИЛИ ГруппыРаскрытия.Аналитика2Обязательна = ИСТИНА
	|			ИЛИ ГруппыРаскрытия.Аналитика3Обязательна = ИСТИНА
	|			ИЛИ ГруппыРаскрытия.Аналитика4Обязательна = ИСТИНА
	|			ИЛИ ГруппыРаскрытия.Аналитика5Обязательна = ИСТИНА
	|			ИЛИ ГруппыРаскрытия.Аналитика6Обязательна = ИСТИНА)
	|	И ГруппыРаскрытия.Владелец = &Владелец
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Если НЕ РезультатЗапроса.Пустой() И НЕ ЗначениеЗаполнено(мПоказателиРаскрытия) Тогда
	//	ОбщегоНазначенияУХ.СообщитьОбОшибке("Нет данных по раскрытиям показателей");
	//	Возврат Ложь;
	//КонецЕсли;
	
	Отказ = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		СтруктураОбязательныхАналитик = Новый Структура;
		Для Инд = МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если Выборка["Аналитика" + Инд] Тогда
				СтруктураОбязательныхАналитик.Вставить("Аналитика" + Инд, 0);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПоказателей=Новый Соответствие;
		
		ВыборкаПоказателей = Выборка.Выбрать();
		
		ЕстьОшибки = Ложь;
		
		Пока ВыборкаПоказателей.Следующий() Цикл
			
			Для Каждого ТекЗапись ИЗ СтруктураОбязательныхАналитик Цикл
				СтруктураОбязательныхАналитик[ТекЗапись.Ключ] = 0;
			КонецЦикла;
			
			НайденныеСтроки = мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель,Техническая", ВыборкаПоказателей.Показатель,Ложь));
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Для Каждого ТекЗапись Из СтруктураОбязательныхАналитик Цикл
					
					Если НЕ ЗначениеЗаполнено(ТекСтрока[ТекЗапись.Ключ]) Тогда
						
						СтруктураОбязательныхАналитик[ТекЗапись.Ключ] = ТекЗапись.Значение + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			СтруктураОшибок=Новый Структура;
			
			Для Каждого ТекЗапись Из СтруктураОбязательныхАналитик Цикл
				
				Если ТекЗапись.Значение > 0 Тогда
										
					СтруктураОшибок.Вставить(ТекЗапись.Ключ,ТекЗапись.Значение);
					Отказ=Истина;
											
				КонецЕсли;				
				
			КонецЦикла;
			
			Если СтруктураОшибок.Количество()>0 Тогда
				
				ДанныеПоказателей.Вставить(ВыборкаПоказателей.НаименованиеПоказателя,СтруктураОшибок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеПоказателей.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивАналитик=Новый Массив;
		
		ТекстОшибки="";
		
		Для Каждого Элемент ИЗ ДанныеПоказателей Цикл
			
			СтрокаШаблона = Нстр("ru = '
			|Для показателя %1 есть незаполненные значения обязательных аналитик:'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ТекстОшибки = ТекстОшибки + СтрШаблон(СтрокаШаблона, Элемент.Ключ);	
			КонецЕсли;
						
			Для Каждого ТекЗапись Из Элемент.Значение Цикл
				
				Если ТекЗапись.Значение = 1 тогда
					СтрокаШаблона = Нстр("ru = '
					|	%1 в %2 строке'");
				Иначе
					СтрокаШаблона = Нстр("ru = '
					|	%1 в %2 строках'");
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда				
					ТекстОшибки = ТекстОшибки + СтрШаблон(СтрокаШаблона, Выборка["ПредставлениеАналитики" + Прав(ТекЗапись.Ключ, 1)], ТекЗапись.Значение);
				КонецЕсли;
				
				Если МассивАналитик.Найти(ТекЗапись.Ключ)=Неопределено Тогда
					
					МассивАналитик.Добавить(ТекЗапись.Ключ);
					
				КонецЕсли;				
				
			КонецЦикла;
			
		КонецЦикла;
			
		Если ПротоколироватьОшибки Тогда
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.МодульОбъекта.ПроверитьЗаполненностьОбязательныхАналитик.1",,Выборка.Ссылка,Сред(ТекстОшибки,2));
			
			Если НЕ ТаблицаСобытийЗагрузки=Неопределено Тогда
				
				ТаблицаОшибокИмпорта=ТаблицаСобытийЗагрузки.Скопировать();
				ТаблицаОшибокИмпорта.Свернуть("ОбъектМетаданных,Сообщение,ТехническаяИнформацияСтрокаВнутр");
				
				Если ТаблицаОшибокИмпорта.Количество()<10 Тогда
					
					Для Каждого Строка ИЗ ТаблицаОшибокИмпорта Цикл
						
						ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.МодульОбъекта.ПроверитьЗаполненностьОбязательныхАналитик.2",,Строка.ОбъектМетаданных,Строка.Сообщение,Строка.ТехническаяИнформацияСтрокаВнутр);
						
					КонецЦикла;	
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'Ошибки при импорте %ТаблицаОшибокИмпорта% объектов аналитики'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаОшибокИмпорта%", Строка(ТаблицаОшибокИмпорта.Количество()));
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.МодульОбъекта.ПроверитьЗаполненностьОбязательныхАналитик.2", , , ТекстСообщения);
					
					Для Каждого Строка ИЗ ТаблицаОшибокИмпорта Цикл
						
						ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("Документ.НастраиваемыйОтчет.МодульОбъекта.ПроверитьЗаполненностьОбязательныхАналитик.2",,Строка.ОбъектМетаданных,Строка.Сообщение,Строка.ТехническаяИнформацияСтрокаВнутр);
						
					КонецЦикла;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Сред(ТекстОшибки,2), Отказ);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат НЕ Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ДАННЫХ ПО ПЕРЕМЕННЫМ.

Функция ЗаполнитьТаблицуПоказателей(СписокВерсий = Неопределено, ВалютаЗаполнения = Неопределено)
	
	Возврат УправлениеОтчетамиУХ.ЗаполнитьТаблицуПоказателей(ПодготовитьСтруктуруПеременныхДляРасчета(),СписокВерсий, ВалютаЗаполнения);
	
КонецФункции

Процедура ОбновитьПараметрыРедактирования() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.ТипЗначения,
	|	ПоказателиОтчетов.Строка,
	|	ЕСТЬNULL(ПроцедурыРасчетов.РедактированиеВозможно, ИСТИНА) КАК РедактированиеВозможно,
	|	ЕСТЬNULL(ПроцедурыРасчетов.ПересчитыватьПриОткрытии, ЛОЖЬ) КАК ПересчитыватьПриОткрытии,
	|	НЕ ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка) КАК ЕстьРаскрытие
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
	|			ПроцедурыРасчетов.ПересчитыватьПриОткрытии КАК ПересчитыватьПриОткрытии,
	|			ПроцедурыРасчетов.РедактированиеВозможно КАК РедактированиеВозможно
	|		ИЗ
	|			РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ГДЕ
	|			ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки) КАК ПроцедурыРасчетов
	|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",	ПравилоОбработки);
	Запрос.УстановитьПараметр("ВидОтчета",	ВидОтчета);
	ТабПараметрыПоказателей=Запрос.Выполнить().Выгрузить();
	
	// обрезаем коды
	ТабПараметрыПоказателей.Колонки.Код.Имя = "Имя";
	ТабПараметрыПоказателей.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	
	СписокРедактируемыхПоказателей	= Новый СписокЗначений;
	СписокРедактируемыхОбластей		= Новый СписокЗначений;
	
	Для Каждого Стр Из ТабПараметрыПоказателей Цикл
		
		Стр.Код = СокрЛП(Стр.Имя);
		
		Если Стр.РедактированиеВозможно Тогда 
			
			СписокРедактируемыхПоказателей.Добавить(Стр.Ссылка,,Стр.ЕстьРаскрытие);
			
			Если НЕ Стр.ЕстьРаскрытие Тогда
				
				СписокРедактируемыхОбластей.Добавить(Стр.Код);
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТабПараметрыПоказателей.Колонки.Удалить("Имя");
			
КонецПроцедуры // ОбновитьРедактируемыеПоказатели() 

Функция ЗаполнитьТаблицуРаскрытий(ГруппаРаскрытия = Неопределено, СписокВерсий = Неопределено, ВалютаЗаполнения = Неопределено)
	
	Возврат УправлениеОтчетамиУХ.ЗаполнитьТаблицуРаскрытий(ПодготовитьСтруктуруПеременныхДляРасчета(),ГруппаРаскрытия,СписокВерсий,ВалютаЗаполнения);
	
КонецФункции

Функция ПолучитьМинимальнуюИМаксимальнуюВерсию(СписокВерсий, ВалютаОтображения = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Код КАК Код
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Владелец В (&Владелец1, &Владелец2)
	|УПОРЯДОЧИТЬ ПО ВерсииЗначенийПоказателей.Код ВОЗР";
	
	Запрос.УстановитьПараметр("Владелец1", СписокВерсий[0].Значение);
	Запрос.УстановитьПараметр("Владелец2", СписокВерсий[1].Значение);
	Запрос.УстановитьПараметр("Валюта", ?(ВалютаОтображения = Неопределено, ОсновнаяВалюта, ВалютаОтображения));
	
	СтруктураВерсий = Новый Структура("МинимальнаяВерсия, МаксимальнаяВерсия", 0, 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВерсий.Вставить("МинимальнаяВерсия", Выборка.Код);
	КонецЕсли;
	Если выборка.Следующий() Тогда
		СтруктураВерсий.Вставить("МаксимальнаяВерсия", Выборка.Код);
	КонецЕсли;
	
	Возврат СтруктураВерсий;
	
КонецФункции

Функция ПолучитьСписокВерсий(ВключатьПомеченныеНаУдаление=Ложь)
		
	Возврат УправлениеОтчетамиУХ.ПолучитьСписокВерсий(ПодготовитьСтруктуруПеременныхДляРасчета(),ВключатьПомеченныеНаУдаление);
	
КонецФункции

Процедура СвернутьВерсии(НачальнаяВерсия, КонечнаяВерсия) Экспорт
	
	ДополнительныеОтборы=Новый Структура;

	ДополнительныеОтборы.Вставить("Организация",Организация);
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ДополнительныеОтборы.Вставить("Проект",Проект);
		
	КонецЕсли;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(ЭтотОбъект["Аналитика"+Индекс]) Тогда
			
			ДополнительныеОтборы.Вставить("Аналитика"+Индекс,ЭтотОбъект["Аналитика"+Индекс]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПересчетПоказателейУХ.СверутьВерсииПоРеквизитам(УправлениеПериодом,
													ВидОтчета,
													ДополнительныеОтборы,
													НачальнаяВерсия,
													КонечнаяВерсия);
														
КонецПроцедуры

Процедура УстановитьИндексыНаЛогРаскрытий() Экспорт
	
	УправлениеОтчетамиУХ.УстановитьИндексыНаЛогРаскрытий(ЭтотОбъект);
	
КонецПроцедуры

Процедура СнятьИндексыСЛогаРаскрытий() Экспорт
	
	УправлениеОтчетамиУХ.СнятьИндексыСЛогаРаскрытий(ЭтотОбъект);
	
КонецПроцедуры

Процедура СнятьИндексыПоказателиРаскрытия() Экспорт
	
	мПоказателиРаскрытия.Индексы.Очистить();
	
КонецПроцедуры
 
Процедура ИнициализироватьЛоги(тПериодОтчета = Неопределено)
	
	ДанныеОбъекта=ПодготовитьСтруктуруПеременныхДляРасчета();
	УправлениеОтчетамиУХ.ИнициализироватьЛоги(ДанныеОбъекта);
	ВосстановитьПеременныеДляРасчета(ДанныеОбъекта, тПериодОтчета);
	
КонецПроцедуры

Функция ПолучитьОписаниеТиповРесурсаЗначение()
	
	Возврат КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповРесурсаЗначение();
	
КонецФункции // ПолучитьОписаниеТиповРесурсаЗначение()

// Заполняет из ИБ таблицы показателей отчета и раскрытий отчета.
//
Процедура ИнициализироватьКонтекст(тПериодОтчета = Неопределено) Экспорт
	
	ЕдиницаИзмеренияОтображения = ЕдиницаИзмерения;
	
	АнализЧувствительности=(АнализЧувствительности ИЛИ ПометкаУдаления);
	
//	МаксАналитикПоказателя=ОбщегоНазначенияУХ.МаксКоличествоАналитикПоказателей(ВидОтчета);
	МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
	АвтоматическийПересчетЗависимыхПоказателей=Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	МассивПериодов=УправлениеОтчетамиУХ.ПолучитьМассивПериодов(Новый Структура("ПериодОтчета,ПериодОкончания",ПериодОтчета,ПериодОкончания));
	
	#Если Клиент Тогда
		Состояние(НСтр("ru = 'Формирование таблицы параметров'"));
	#КонецЕсли
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтчетовПараметрыОтчета.Код,
	|	ВидыОтчетовПараметрыОтчета.Наименование,
	|	ВидыОтчетовПараметрыОтчета.ЗначениеПоУмолчанию
	|ИЗ
	|	Справочник.ВидыОтчетов.ПараметрыОтчета КАК ВидыОтчетовПараметрыОтчета
	|ГДЕ
	|	ВидыОтчетовПараметрыОтчета.Ссылка = &ВидОтчета";
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	
	ТаблицаПараметровВидаОтчета = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметровВидаОтчета.Индексы.Добавить("Код");
	КолвоЭлементовКоллекции = ПараметрыОтчета.Количество();
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ПараметрыОтчета[КолвоЭлементовКоллекции - ОбратныйИндекс];
		ТекЗаписьТаблицы = ТаблицаПараметровВидаОтчета.Найти(ЭлементКоллекции.Код, "Код");
		Если ТекЗаписьТаблицы = Неопределено Тогда
			ПараметрыОтчета.Удалить(ЭлементКоллекции);
		Иначе
			Если ЭлементКоллекции.Наименование <> ТекЗаписьТаблицы.Наименование Тогда
				ЭлементКоллекции.Наименование = ТекЗаписьТаблицы.Наименование;
			КонецЕсли;
			ТаблицаПараметровВидаОтчета.Удалить(ТекЗаписьТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаПараметровВидаОтчета Цикл
		НоваяСтрока = ПараметрыОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Значение = Строка.ЗначениеПоУмолчанию;
	КонецЦикла;
	
	Если НЕ ЭтоНовый() Тогда
		
		Исполнитель=УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(Ссылка,,,"Исполнитель");
		Проверяющий=УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(Ссылка,,,"Согласующий");
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(НСтр("ru = 'Заполнение списка показателей...'"));
	#КонецЕсли
	
	ТекРег = ?(ЗначениеЗаполнено(мКопируемыйДокумент), мКопируемыйДокумент, Ссылка);
	
	СравнениеВерсий = Ложь;
		
	Если СрезПоВерсиям Тогда
		
		СписокИспользуемыхВерсий = Новый СписокЗначений;
	
		Если СписокВерсий.Количество() > 1 Тогда
			
			СтруктураВерсий = ПолучитьМинимальнуюИМаксимальнуюВерсию(СписокВерсий);
			
			ЗапросВерсия=Новый Запрос;
			
			ЗапросВерсия.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВерсииЗначенийПоказателей.Ссылка
			|ИЗ
			|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|ГДЕ
			|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
			|	И ВерсииЗначенийПоказателей.Организация = &Организация";
			
			УправлениеОтчетамиУХ.ДобавитьОтборПериоды(ЗапросВерсия,"ВерсииЗначенийПоказателей","ПериодОтчета",ПериодОтчета,ПериодОкончания,МассивПериодов);

			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
			|	И ВерсииЗначенийПоказателей.Проект = &Проект";
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"		
				|	И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;
				
			КонецЦикла;
					
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|	И ВерсииЗначенийПоказателей.Валюта = &ВалютаОтображения
			|	И ВерсииЗначенийПоказателей.Код > &МинимальнаяВерсия
			|	И ВерсииЗначенийПоказателей.Код <= &МаксимальнаяВерсия";
							
			ЗапросВерсия.УстановитьПараметр("МинимальнаяВерсия"  , СтруктураВерсий.МинимальнаяВерсия);
			ЗапросВерсия.УстановитьПараметр("МаксимальнаяВерсия" , СтруктураВерсий.МаксимальнаяВерсия);
			ЗапросВерсия.УстановитьПараметр("ВалютаОтображения", ОсновнаяВалюта);
			ЗапросВерсия.УстановитьПараметр("ЭкземплярОтчета", ?(ЗначениеЗаполнено(мКопируемыйДокумент), мКопируемыйДокумент, Ссылка));
			
			ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ВидОтчета);
			ЗапросВерсия.УстановитьПараметр("Организация", 	Организация);
			ЗапросВерсия.УстановитьПараметр("Сценарий", 	Сценарий);
			ЗапросВерсия.УстановитьПараметр("Проект", 		Проект);
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				ЗапросВерсия.УстановитьПараметр("Аналитика"+Индекс, ЭтотОбъект["Аналитика"+Индекс]);
				
			КонецЦикла;
			
			СписокИспользуемыхВерсий.ЗагрузитьЗначения(ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
			мПоказатели = ЗаполнитьТаблицуПоказателей(СписокИспользуемыхВерсий);
			
			ВсегдаЗаполнятьАналитики = Истина;
			мПоказателиРаскрытия = ЗаполнитьТаблицуРаскрытий(, СписокИспользуемыхВерсий);
			
			СравнениеВерсий = Истина;
			
		Иначе
			
			ТекВерсия = СписокВерсий[0].Значение;
			
			Если ТипЗнч(ТекВерсия) = Тип("СправочникСсылка.ОписаниеВерсий") Тогда
				
				ЗапросВерсия=Новый Запрос;	
				ЗапросВерсия.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВерсииЗначенийПоказателей.Ссылка
				|ИЗ
				|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОписаниеВерсий КАК ОписаниеВерсий
				|		ПО (ОписаниеВерсий.Ссылка = ВерсииЗначенийПоказателей.Владелец)
				|ГДЕ
				|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
				|	И ВерсииЗначенийПоказателей.Организация = &Организация";
				
				УправлениеОтчетамиУХ.ДобавитьОтборПериоды(ЗапросВерсия,"ВерсииЗначенийПоказателей","ПериодОтчета",ПериодОтчета,ПериодОкончания,МассивПериодов);
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
				|	И ВерсииЗначенийПоказателей.Проект = &Проект";
				
				Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					
					ЗапросВерсия.Текст=ЗапросВерсия.Текст+"		
					|	И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;
					
				КонецЦикла;
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
				|	И ОписаниеВерсий.Код <= &КодВерсии";
												
				ЗапросВерсия.УстановитьПараметр("КодВерсии" , ТекВерсия.Код);
				ЗапросВерсия.УстановитьПараметр("Валюта", ОсновнаяВалюта);
				ЗапросВерсия.УстановитьПараметр("ЭкземплярОтчета", Ссылка);
				
				ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ВидОтчета);
				ЗапросВерсия.УстановитьПараметр("Организация", 	Организация);
				ЗапросВерсия.УстановитьПараметр("Сценарий", 	Сценарий);
				ЗапросВерсия.УстановитьПараметр("Проект", 		Проект);
				
				Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					
					ЗапросВерсия.УстановитьПараметр("Аналитика"+Индекс, ЭтотОбъект["Аналитика"+Индекс]);
					
				КонецЦикла;
				
				СписокИспользуемыхВерсий.ЗагрузитьЗначения(ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
			ИначеЕсли ТипЗнч(ТекВерсия) = Тип("СправочникСсылка.ВерсииЗначенийПоказателей") Тогда
								
				ЗапросВерсия=Новый Запрос;
				ЗапросВерсия.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВерсииЗначенийПоказателей.Ссылка
				|ИЗ
				|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОписаниеВерсий КАК ОписаниеВерсий
				|		ПО (ОписаниеВерсий.Ссылка = ВерсииЗначенийПоказателей.Владелец)
				|ГДЕ
				|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
				|	И ВерсииЗначенийПоказателей.Организация = &Организация";
				
				УправлениеОтчетамиУХ.ДобавитьОтборПериоды(ЗапросВерсия,"ВерсииЗначенийПоказателей","ПериодОтчета",ПериодОтчета,ПериодОкончания,МассивПериодов);
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
				|	И ВерсииЗначенийПоказателей.Проект = &Проект";
				
				Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					
					ЗапросВерсия.Текст=ЗапросВерсия.Текст+"		
					|	И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;
					
				КонецЦикла;
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
				|	И ВерсииЗначенийПоказателей.Код <= &КодТекВерсии";

				ЗапросВерсия.УстановитьПараметр("ЭкземплярОтчета", Ссылка);
				ЗапросВерсия.УстановитьПараметр("Валюта", ОсновнаяВалюта);
				ЗапросВерсия.УстановитьПараметр("КодТекВерсии", ТекВерсия.Код);
				
				ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ВидОтчета);
				ЗапросВерсия.УстановитьПараметр("Организация", 	Организация);
				ЗапросВерсия.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
				ЗапросВерсия.УстановитьПараметр("Сценарий", 	Сценарий);
				ЗапросВерсия.УстановитьПараметр("Проект", 		Проект);
				
				Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					
					ЗапросВерсия.УстановитьПараметр("Аналитика"+Индекс, ЭтотОбъект["Аналитика"+Индекс]);
					
				КонецЦикла;

				СписокИспользуемыхВерсий.ЗагрузитьЗначения(ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
				
			КонецЕсли
			
		КонецЕсли;
		
	Иначе
		
		СписокИспользуемыхВерсий=ПолучитьСписокВерсий(ПометкаУдаления);
		
	КонецЕсли;
	
	Если СписокИспользуемыхВерсий.Количество() > 0 Тогда
		ТекущийЭлементОписаниеВерсии = СписокИспользуемыхВерсий[0].Значение.Владелец;
	КонецЕсли;
	
	Если НЕ СравнениеВерсий Тогда
		
		мПоказатели = ЗаполнитьТаблицуПоказателей(СписокИспользуемыхВерсий);
		
		ТабНомеровАналитик=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(мПоказатели);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВсегдаЗаполнятьАналитики = Истина;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(мКопируемыйДокумент) Тогда // Копируемый отчет открывается для редактирования
			ВсегдаЗаполнятьАналитики = Истина
		КонецЕсли;
		
		// Загрузка таблицы показателей группы раскрытия.
		мПоказателиРаскрытия = ЗаполнитьТаблицуРаскрытий(, СписокИспользуемыхВерсий);
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(НСтр("ru = 'Заполнение списка показателей...'"));
	#КонецЕсли
	// Восстановим данные для расшифровок
	
	ДанныеРасшифровкиСчитаны = ЭтоНовый();
	
	Если мПоказатели.Колонки.Найти("Комментарий") = Неопределено Тогда
		мПоказатели.Колонки.Добавить("Комментарий", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	КонецЕсли;
	
	// обрезаем коды
	мПоказатели.Колонки.Код.Имя = "Имя";
	мПоказатели.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	мПоказатели.Колонки.КодГруппыРаскрытия.Имя = "ИмяГруппыРаскрытия";
	мПоказатели.Колонки.Добавить("КодГруппыРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	
	мПоказатели.Колонки.Значение.Имя="ЗначениеНеТипизированное";
	мПоказатели.Колонки.Добавить("Значение",ПолучитьОписаниеТиповРесурсаЗначение());
	
	// обрезаем коды
	мПоказатели.Колонки.КодСтрока.Имя = "ИмяСтрока";
	мПоказатели.Колонки.Добавить("КодСтрока",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	мПоказатели.Колонки.КодГруппыРаскрытияСтрока.Имя = "ИмяГруппыРаскрытияСтрока";
	мПоказатели.Колонки.Добавить("КодГруппыРаскрытияСтрока",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	мПоказатели.Колонки.Добавить("ПериодРасчета", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	
	мНеЧисловыеПоказатели=Новый Массив;
	мЧисловыеПоказатели=Новый Структура;
	МаксАналитикПоказателя=0;
	Показатели = Новый Структура;
		
	Для Каждого Стр Из мПоказатели Цикл
		
		Стр.Код = СокрЛП(Стр.Имя);
		Стр.КодГруппыРаскрытия = СокрЛП(Стр.ИмяГруппыРаскрытия);
				
		Стр.КодСтрока = СокрЛП(Стр.ИмяСтрока);
		Стр.КодГруппыРаскрытияСтрока = СокрЛП(Стр.ИмяГруппыРаскрытияСтрока);
		
		Стр.Значение = Стр.ЗначениеНеТипизированное;
		
		Если Стр.Значение = Неопределено ИЛИ Стр.Значение = Null Тогда
			Стр.Значение = ПустоеЗначениеПоТипу[Стр.ТипЗначения];
		КонецЕсли;
		
		Если Стр.ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			мНеЧисловыеПоказатели.Добавить(Стр.Ссылка);
			
		Иначе
			
			мЧисловыеПоказатели.Вставить(Стр.Код, Стр.НеМасштабируется);	
			
		КонецЕсли;
		
		Если Стр.ЧислоАналитикГруппыРаскрытия>МаксАналитикПоказателя Тогда
			
			МаксАналитикПоказателя=Стр.ЧислоАналитикГруппыРаскрытия;
			
		КонецЕсли; 
		
		Показатели.Вставить(Стр.Код, Стр.Значение);
		
	КонецЦикла;
	
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.Имя);
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.ИмяГруппыРаскрытия);
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.ЗначениеНеТипизированное);
	
	мПоказатели.Колонки.Добавить("ДанныеРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтруктура());
	мПоказатели.Колонки.Добавить("СохраненныеДанныеАктуальны",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	мПоказатели.ЗаполнитьЗначения(Истина,"СохраненныеДанныеАктуальны");
		
	мПоказателиРаскрытия.Колонки.Значение.Имя="ЗначениеНеТипизированное";
	мПоказателиРаскрытия.Колонки.Добавить("Значение",ПолучитьОписаниеТиповРесурсаЗначение());
	
	ОбновитьПараметрыРедактирования();
		
	Для Каждого СтрАналитика ИЗ мПоказателиРаскрытия Цикл
		
		СтрАналитика.Значение=СтрАналитика.ЗначениеНеТипизированное;
		
	КонецЦикла;
	
	мПоказателиРаскрытия.Колонки.Удалить(мПоказателиРаскрытия.Колонки.ЗначениеНеТипизированное);
	
	// Создаем соответствие кодов и ссылок на показатели
	
	Если НЕ СравнениеВерсий Тогда
		
		мСоответствиеПоказателейКодов = Новый Соответствие;
		Для Каждого Стр Из мПоказатели Цикл
			мСоответствиеПоказателейКодов.Вставить(Стр.Код, Стр.Ссылка);
		КонецЦикла;
		
		ТекстИндекс="Показатель,АналитикаВалюта";
		
		Для Инд=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если НЕ мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд)=Неопределено Тогда
				
				ТекстИндекс=ТекстИндекс+",Аналитика"+Инд;
				
			КонецЕсли;
			
		КонецЦикла;
		
		мПоказателиРаскрытия.Индексы.Добавить(ТекстИндекс);
		ИнициализироватьЛоги(тПериодОтчета);
		
		// если выборка осуществлялась по документу-основанию, то забудем основание
		Если ТекРег <> Ссылка Тогда
			Для Каждого Запись Из мПоказатели Цикл
				
				Если Запись.ЧисловойПоказатель И (Запись.Значение = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ЛогИзмененийПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
				НоваяСтрока.НомерОперации = 0;
				
			КонецЦикла;
			
			Для Каждого Запись Из мПоказателиРаскрытия Цикл
				НоваяСтрока = ЛогИзмененийРаскрытийПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
				НоваяСтрока.НачальноеЗначение = Неопределено;
				НоваяСтрока.НомерОперации     = 0;
			КонецЦикла;
			
			НомерОперации = 1;
			мКопируемыйДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//Определим аналитики вида отчета
	мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ВидОтчета);
	
	Если НЕ СравнениеВерсий Тогда
		// Получим список валют, в которых уже есть записи в регистре
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.Валюта
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	ВерсииЗначенийПоказателей.Регистратор = &Регистратор
		|	И НЕ ВерсииЗначенийПоказателей.Валюта = &ОсновнаяВалюта
		|	И НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И НЕ ВерсииЗначенийПоказателей.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Регистратор",Ссылка);
		Запрос.УстановитьПараметр("ОсновнаяВалюта",ОсновнаяВалюта);
		
		мВалютыЗаписей=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Валюта");
				
		// Удалим нулевые строки из мПоказателиРаскрытия, полученные в результате сложения
		// корректировок
		
		МассивКУдалению=мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Значение",0));
		
		Для Каждого СтрРаскрытие ИЗ МассивКУдалению Цикл
			
			мПоказателиРаскрытия.Удалить(СтрРаскрытие);
			
		КонецЦикла;
		
		ОпределитьПериодРасчета();
		
	КонецЕсли;
	
	мТекущаяВалюта = ОсновнаяВалюта;
	
	/////////////////////////////////////////////////////////////////////////////
	// Получим показатели, используемые для установки курсов валют
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетовПоказателиДляКурсовВалют.Валюта,
	|	ПоказателиОтчетовПоказателиДляКурсовВалют.ПоказательКурса,
	|	ПоказателиОтчетовПоказателиДляКурсовВалют.Кратность,
	|	ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка КАК Показатель
	|ИЗ
	|	Справочник.ПоказателиОтчетов.ПоказателиДляКурсовВалют КАК ПоказателиОтчетовПоказателиДляКурсовВалют
	|ГДЕ
	|	ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка.Владелец = &ВидОтчета
	|	И ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка.ВидКурса = &УказанноеВДокументе";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("УказанноеВДокументе",Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе);
	
	мПоказателиДляКурсовВалют=Запрос.Выполнить().Выгрузить();
	мПоказателиДляКурсовВалют.Индексы.Добавить("Показатель,Валюта");
	
	//////////////////////////////////////////////////////////////////////////////
	
	Если ВсегдаЗаполнятьАналитики=Истина Тогда
		ДанныеРаскрытияИнициализированы=Истина;
	КонецЕсли;
	
	Если ДанныеРаскрытияИнициализированы И мПоказателиРаскрытия.Колонки.Найти("ИндексАналитики")=Неопределено Тогда
		
		мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		мПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
		
	КонецЕсли;	
	
	ПодготовитьДанныеПоГруппамРаскрытия();
	
КонецПроцедуры

Процедура ИнициализироватьТаблицыКорректировок() Экспорт
	
	мКорректировкиПоказателей=мПоказатели.Скопировать();
	мКорректировкиПоказателей.ЗаполнитьЗначения(0,"Значение");
	
	мСоответствиеДляПоискаПоСсылкеКорр=Новый Соответствие;
	
	Для Каждого Строка ИЗ мКорректировкиПоказателей Цикл
		мСоответствиеДляПоискаПоСсылкеКорр.Вставить(Строка.Ссылка,Строка);
	КонецЦикла;
	
	мКорректировкиПоказателейРаскрытия=мПоказателиРаскрытия.СкопироватьКолонки();
		
КонецПроцедуры

Процедура ИнициализироватьКонтекстРаскрытия() Экспорт
	
	Если НЕ ДанныеРаскрытияИнициализированы Тогда
		
		ВсегдаЗаполнятьАналитики=Истина;
		
		ТекПоказателиРаскрытия=ЗаполнитьТаблицуРаскрытий(,СписокИспользуемыхВерсий);
		МассивКУдалению=ТекПоказателиРаскрытия.НайтиСтроки(Новый Структура("Значение",0));
		
		Для Каждого СтрРаскрытие ИЗ МассивКУдалению Цикл
			
			ТекПоказателиРаскрытия.Удалить(СтрРаскрытие);
			
		КонецЦикла;
		
		Если мПоказателиРаскрытия.Количество()=0 Тогда
			
			мПоказателиРаскрытия=ТекПоказателиРаскрытия;
			мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
			мПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
			
		Иначе
			
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТекПоказателиРаскрытия,мПоказателиРаскрытия);
			
		КонецЕсли;
		
		ДанныеРаскрытияИнициализированы=Истина;
		
	КонецЕсли;
		
	Если НЕ мТекущаяВалюта=ОсновнаяВалюта Тогда
		
		мПоказателиРаскрытияВВалюте=ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели,мПоказателиРаскрытия,мТекущаяВалюта,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьКонтекстРаскрытия()

Процедура ПолучитьДанныеГруппыРаскрытия(ГруппаРаскрытия) Экспорт
	
	ТабРаскрытиеГруппы=ЗаполнитьТаблицуРаскрытий(ГруппаРаскрытия);
	
	МассивКУдалению=ТабРаскрытиеГруппы.НайтиСтроки(Новый Структура("Значение",0));
	
	Для Каждого СтрРаскрытие ИЗ МассивКУдалению Цикл
		
		ТабРаскрытиеГруппы.Удалить(СтрРаскрытие);
		
	КонецЦикла;
	
	Если мПоказателиРаскрытия.Количество()=0 Тогда
		
		мПоказателиРаскрытия=ТабРаскрытиеГруппы;
		мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		мПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
		
	Иначе
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТабРаскрытиеГруппы,мПоказателиРаскрытия);
		
	КонецЕсли;
	
	МассивЗагруженныхГруппРаскрытия.Добавить(ГруппаРаскрытия);
	
КонецПроцедуры // ПолучитьДанныеГруппыРаскрытия()

Процедура ИнициализироватьДанныеДляОтображения() Экспорт
	
	СформироватьТаблицуСтрок();	
	ИнициализироватьИсходныеЗапросы();
	
КонецПроцедуры // ИнициализироватьДанныеДляОтображения()

// Проверяет данные отчета по алгоритму запрограммированному в модуле проверки.
// Возвращает Истина, если проверка пройдена и Ложь в противном случае.
//
Функция Проверить(ПротоколироватьОшибки=Ложь,РежимВывода="",СтруктураВозврата=Неопределено) Экспорт
	
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("СтатусПроверки",Истина);
	СтруктураВозврата.Вставить("Протокол",		Новый ТабличныйДокумент);
	
	Если Не ЗначениеЗаполнено(ПравилоПроверки) Тогда
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если АнализЧувствительности Тогда // Не выполняем проверку, т.к. показатели по совокупности могут быть неконсистентны
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ПроверитьКонтекстИнициализирован();
	ИнициализироватьКонтекстРаскрытия();
	
	СформироватьСтруктуруПараметров();
	СформироватьСтруктуруПоказателей();
	
	ДанныеОбъекта=ПодготовитьСтруктуруПеременныхДляРасчета();
	
	Если УправлениеОтчетамиУХ.МультипериодныйОбъектРасчета(ДанныеОбъекта) Тогда 
		
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(
			"АналитическийБланкУХСервер.ПолучитьТаблицыТекущегоЭкземпляраОтчета", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОбъекта));
		КонецЕсли;
		
	КонецЕсли; 
			
	Возврат ПравилаПроверкиУХ.Проверить(ДанныеОбъекта,ПротоколироватьОшибки,РежимВывода,СтруктураВозврата); 	
		
	
КонецФункции

// Функция заполняет показатели отчета, используя настройки  из регламента обработки отчетности.
Функция ЗаполнитьОтчетПоУмолчанию() Экспорт
	
	ВерсияРегламента = УправлениеПериодом.ВерсияОрганизационнойСтруктуры;
	ТекущийРежим     = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияРегламента);
	
	Если НЕ ЗначениеЗаполнено(ТекущийРежим) Тогда
		
		// Проверим на наличие процедур заполнения у правила обработки и заполним автоматически, если они присутствуют
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроцедурыРасчетов.ПотребительРасчета
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки";
		
		Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ТекущийРежим=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
			
		Иначе
			
			Если НЕ ТихийРежим Тогда
				ТекстСообщения = НСтр("ru = 'Экземляр отчета %ЗаголовокДокумента% не заполнен, т.к. в регламенте не определен способ формирования для организации %Организация% и вида отчета %ВидОтчета%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокДокумента%", Строка(ОбщегоНазначенияУХ.СформироватьЗаголовокДокумента(ЭтотОбъект)));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийРежим = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение Тогда
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru = 'В регламенте определен ручной способ формирования для отчета %ВидОтчета% по организации %Организация% в периоде %ПериодОтчета%. Заполнение отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(ПериодОтчета));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
		
	ИначеЕсли ТекущийРежим = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду Тогда
		
		ПериодичностьСвертывания = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.Периодичность, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияРегламента);
		
	ИначеЕсли ТекущийРежим = Перечисления.СпособыФормированияОтчетов.Импорт Тогда
		
		ИспользуемаяИБ     = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияРегламента);
		БланкИмпорта       = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияРегламента);
		// Импорт данных с диска.
		Если НЕ ЗначениеЗаполнено(ИспользуемаяИБ) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ТипБД=ИспользуемаяИБ.ТипБД;
		
		Если НЕ (ТипБД=Справочники.ТипыБазДанных.ОбменТаблДок ИЛИ ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO) Тогда
			
			ТекущийРежим=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
			
			ДатаИзменения      = ТекущаяДата();
			
			Возврат ЗаполнитьОтчет(ТекущийРежим);
			
		КонецЕсли;
			
		ВнПараметрыОтчета = Новый Структура("ВидОтчета, Организация,Проект, Сценарий, ПериодСценария", ВидОтчета, Организация,Проект, Сценарий, ПериодОтчета);
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ВнПараметрыОтчета.Вставить("Аналитика" + Инд, ЭтотОбъект["Аналитика" + Инд]);
			
		КонецЦикла;
		
		МассивФайлов = Документы.НастраиваемыйОтчет.ПолучитьПереченьИмпортируемыхФайлов(ВнПараметрыОтчета, ИспользуемаяИБ);
		
		Если МассивФайлов.Количество()=0 Тогда
			// Файлы не найдены. Предупредим пользователя и прекратим загрузку.
			ТекстСообщения = НСтр("ru = 'Не удалось найти файлы импорта для отчета %ВидОтчета% по организации %Организация% в периоде %Период% и сценарию %Сценарий%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%",		 Строка(ВнПараметрыОтчета.ВидОтчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%",	 Строка(ВнПараметрыОтчета.Организация));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%",		 Строка(ВнПараметрыОтчета.ПериодСценария));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%",		 Строка(ВнПараметрыОтчета.Сценарий));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		ДанныеФайла=МассивФайлов[0];
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		
		Если ТипБД=Справочники.ТипыБазДанных.ОбменТаблДок Тогда
			
			СтруктураОбъекта=Новый Структура;
			СтруктураОбъекта.Вставить("Организация",Организация);
			СтруктураОбъекта.Вставить("Сценарий",Сценарий);
			СтруктураОбъекта.Вставить("ПериодСценария",ПериодОтчета);
			
			ВерсияХранимогоФайла 	= ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию(ДанныеФайла.ПолноеИмя,СтруктураОбъекта,,ФайлИмпорта);
			
			Если ВерсияХранимогоФайла = Неопределено Тогда // Не удалось получить элемент справочника "Хранимые файлы организаций" по заданным параметрам.
				
				ПротоколироватьОшибкуФайла(Ссылка,ДанныеФайла.ПолноеИмя, Нстр("ru = 'Системная ошибка. Подробности в полном протоколе'"), Истина, Нстр("ru = 'Не удалось поместить файл во временное хранилище. Возможно, он открыт другим пользователем.'"));
				Возврат Ложь;
				
			КонецЕсли;
			
			ИмяФайла = ПолучитьИмяВременногоФайла(ФайлИмпорта.РасширениеФайла)+"\"+ФайлИмпорта.Наименование;
			
			Если ХранимыеФайлыУХ.ПолучитьХранимыйФайл(ФайлИмпорта, ИмяФайла)=Неопределено Тогда
				
				ПротоколироватьОшибкуФайла(Ссылка,ДанныеФайла.ПолноеИмя, Нстр("ru = 'Системная ошибка. Подробности в полном протоколе'"),Истина, Нстр("ru = 'Не удалось поместить файл во временное хранилище. Возможно, он открыт другим пользователем.'"));
				Возврат Ложь;
				
			КонецЕсли;			
			
			ИмяЛиста      	= БланкИмпорта.ИмяЛиста;
			
		Иначе
			
			ПутьКФайлуADO=ДанныеФайла.ПолноеИмя;
			ТекущийРежим=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
			
		КонецЕсли;
		
		ДатаИзменения      = ТекущаяДата();
		
	КонецЕсли;
	
	Возврат ЗаполнитьОтчет(ТекущийРежим);
	
КонецФункции

Процедура ПротоколироватьОшибкуФайла(Ссылка, ДанныеФайла, ТекстОшибки, Ошибка=Ложь, ТехнологическаяИнформация = "", ОписаниеОшибки = "")
	
	Если Ошибка Тогда
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Обработка.ИмпортОбъектовИзExcel.ЗагрузитьОбъектыИзФайла",,ДанныеФайла,ТекстОшибки,ТехнологическаяИнформация);
		
	Иначе
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("Обработка.ИмпортОбъектовИзExcel.ЗагрузитьОбъектыИзФайла",,ДанныеФайла,ТекстОшибки,ТехнологическаяИнформация);
		
	КонецЕсли;
	
	ПротоколОшибок=ПротоколируемыеСобытияУХ.Завершить("Обработка.ИмпортОбъектовИзExcel",,ДанныеФайла,,,ДанныеФайла);
	ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(Ссылка,ДанныеФайла,ПротоколОшибок,,,,ВидОтчета);
			
КонецПроцедуры // ПротоколироватьОшибкуФайла()

Функция ПодготовитьДанныеРабочихТаблиц() Экспорт
	
	СтруктураТаблиц=Новый Структура;
	СтруктураТаблиц.Вставить("мПоказатели"								,мПоказатели);
	СтруктураТаблиц.Вставить("мПоказателиРаскрытия"						,мПоказателиРаскрытия);
	СтруктураТаблиц.Вставить("ЛогИзмененийПоказателей"					,ЛогИзмененийПоказателей);
	СтруктураТаблиц.Вставить("ЛогИзмененийРаскрытийПоказателей"			,ЛогИзмененийРаскрытийПоказателей);
	СтруктураТаблиц.Вставить("Показатели"								,Показатели);
	СтруктураТаблиц.Вставить("мПоказателиДляОбработки"					,мПоказателиДляОбработки);
	СтруктураТаблиц.Вставить("мОперанды"								,мОперанды);
	СтруктураТаблиц.Вставить("мТабПоказателиЗапросы"					,мТабПоказателиЗапросы);
	СтруктураТаблиц.Вставить("мСоответствиеОперандовИПоказателейОтбора"	,мСоответствиеОперандовИПоказателейОтбора);
	СтруктураТаблиц.Вставить("ЕстьОбращениеКВИБ"						,ЕстьОбращениеКВИБ);
	СтруктураТаблиц.Вставить("мТаблицаПересчета"						,мТаблицаПересчета);
	СтруктураТаблиц.Вставить("мПоказателиОбязательныеКПересчету"		,мПоказателиОбязательныеКПересчету);
	
КонецФункции // ПодготовитьДанныеРабочихТаблиц()

Процедура ДобавитьТаблицуПроизводительности()
	
	ТаблицаПроизводительности=Новый ТаблицаЗначений;
	ТаблицаПроизводительности.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ТаблицаПроизводительности.Колонки.Добавить("КодОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаПроизводительности.Колонки.Добавить("РасчетОперандов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,3));
	ТаблицаПроизводительности.Колонки.Добавить("РасчетПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,3));
	
	ДополнительныеСвойства.Вставить("ТаблицаПроизводительности",ТаблицаПроизводительности);
	
КонецПроцедуры // ДобавитьАнализаПроизводительности()

Процедура ОбработатьТаблицуПроизводительности()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаПроизводительности.Показатель,
	|	ТаблицаПроизводительности.РасчетОперандов,
	|	ТаблицаПроизводительности.РасчетПоказателя
	|ПОМЕСТИТЬ ТаблицаПроизводительности
	|ИЗ
	|	&ТаблицаПроизводительности КАК ТаблицаПроизводительности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроизводительности.Показатель,
	|	СУММА(ТаблицаПроизводительности.РасчетОперандов) КАК РасчетОперандов,
	|	СУММА(ТаблицаПроизводительности.РасчетПоказателя) КАК РасчетПоказателя,
	|	СУММА(ТаблицаПроизводительности.РасчетОперандов) + СУММА(ТаблицаПроизводительности.РасчетПоказателя) КАК РасчетИтого
	|ИЗ
	|	ТаблицаПроизводительности КАК ТаблицаПроизводительности
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроизводительности.Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетИтого УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаПроизводительности",ДополнительныеСвойства.ТаблицаПроизводительности);
	
	ДополнительныеСвойства.Вставить("ТаблицаПроизводительности",Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ОбработатьТаблицуПроизводительности()

Функция ЗаполнитьМногопериодныйОтчет(Режим) Экспорт	
	
	Если Режим = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПротоколируемыеСобытияУХ.Начать(ЭтотОбъект);
	
	Если Режим = Перечисления.СпособыФормированияОтчетов.Импорт И ЗначениеЗаполнено(ИспользуемаяИБ) И ИспользуемаяИБ.ТипБД.Предопределенный Тогда		
		
		ЗаполнениеВыполнено = ИмпортироватьДанные(ФайлИмпорта, ДатаИзменения,ИмяЛиста) = 1;
		
	Иначе
		
		Если АнализПроизводительности Тогда	
			ДобавитьТаблицуПроизводительности();				
		КонецЕсли;
		
		ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
		ОбъектРасчета.Вставить("СпособФормированияОтчета",Режим);
		
		ОбработкаОбъект = РасширениеБизнесЛогикиУХ.ПолучитьОбработкуЗаполненияДанных(ОбъектРасчета);
		
		ОбработкаОбъект.СпособФормированияОтчета=Режим;
		ОбработкаОбъект.Регистратор=Ссылка;
		СпособФормированияОтчета=Режим;
		
		ЗаполнениеВыполнено = Ложь;
		РасширениеБизнесЛогикиУХ.ЗаписьПоказателяСРасчетомЗависимых_ЗаполнитьДанныеПоПериодам(
			ОбработкаОбъект, ОбъектРасчета, ТаблицаСобытийЗагрузки, ЗаполнениеВыполнено);
						
		Если ЗаполнениеВыполнено И ОбработкаОбъект.Метаданные().Имя = "РасчетИЗаписьПоказателей" Тогда
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ОбщееВремяРасчетов",ОбработкаОбъект.ОбщееВремяРасчетов);
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ОбщееВремяЗаписиВерсий",ОбработкаОбъект.ОбщееВремяЗаписиВерсий);
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ОбщееВремяПолученияПараметрики",ОбработкаОбъект.ОбщееВремяПолученияПараметрики);
			ЭтотОбъект.ДополнительныеСвойства.Вставить("АдресТрассировкиРасчета",ОбработкаОбъект.АдресТрассировкиРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершитьПротоколЗагрузки();
	
	Возврат ЗаполнениеВыполнено;
	
КонецФункции 

Функция ВернутьРезультатЗаполнения(РезультатЗаполнения)
	
	Если ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
		
		ДанныеОбъекта.Вставить("ОтчетОбъект", Неопределено);
		
	КонецЕсли;
	
	Возврат РезультатЗаполнения;
	
КонецФункции // ВернутьРезультатЗаполнения()

// Функция заполняет показатели отчета: запускает последовательно модули заполнения и вычисления,
// сохраняет результат вычисления показателей в глобальной таблице показателей мПоказатели.
//
Функция ЗаполнитьОтчет(Режим) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(Ссылка);
		
	КонецЕсли;
	
	Если Документы.НастраиваемыйОтчет.РежимМногопериодныхУОП(ЭтотОбъект) Тогда
		
		Возврат ЗаполнитьМногопериодныйОтчет(Режим);
		
	КонецЕсли;
	
	ТаблицаПротоколаСеанс.Очистить();
	
	ПротоколируемыеСобытияУХ.Начать(ЭтотОбъект);
		
	Попытка
				
		Результат = Истина;
		
		ПроверитьКонтекстИнициализирован();
		ИнициализироватьКонтекстРаскрытия();
		
		Если РежимКорректировки Тогда
			ИнициализироватьТаблицыКорректировок();
		КонецЕсли;
		
		НачатьНовуюОперацию();
		ЗаполнитьКонтекстЭкземпляраОтчета();
		
		СнятьИндексыСЛогаРаскрытий();
		СнятьИндексыПоказателиРаскрытия();
		
		ФлагОшибкиИмпорта=Ложь;
		
		Если Не (Режим = Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки ИЛИ РежимКорректировки) Тогда
			
			// очищаем окружение
			ОчиститьПередЗаполнением();
			
		КонецЕсли;
				
		// заполняем параметры
		СформироватьСтруктуруПараметров();
		
		Если АнализПроизводительности Тогда
			
			ДобавитьТаблицуПроизводительности();
						
		КонецЕсли;
		
		// запускаем код заполнения и код вычисления
		Если ЗапуститьМодульЗаполнения(Режим) Тогда
			
			УправлениеОтчетамиУХ.ОбновитьСтруктуруПоказателей(ЭтотОбъект);
			
			Если ЗапуститьМодульВычисления() Тогда
				
				СпособФормированияОтчета = Режим;
								
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьИндексыНаЛогРаскрытий();
		УправлениеОтчетамиУХ.УстановитьИндексыПоказателиРаскрытия(ЭтотОбъект);
		
		СпособФормированияОтчета=Режим;
		
		ЗавершитьПротоколЗагрузки();
		
		Если АнализПроизводительности Тогда
			
			ОбработатьТаблицуПроизводительности();
						
		КонецЕсли;
				
	Исключение
		
		ОписаниеТекущейОшибки = ОписаниеОшибки();
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеТекущейОшибки);
		ЗавершитьПротоколЗагрузки();
		Возврат ВернутьРезультатЗаполнения(Ложь);
				
	КонецПопытки;	
			
	Если НЕ ЕстьОшибкиЗагрузки() Тогда
		
		Возврат ВернутьРезультатЗаполнения(Истина);
		
	Иначе
				
		Возврат ВернутьРезультатЗаполнения(Ложь);
		
	КонецЕсли;
				
КонецФункции

Процедура ЗавершитьПротоколЗагрузки() Экспорт
	
	Если (Не ЗначениеЗаполнено(ВерсияХранимогоФайла)) 
		И ЗначениеЗаполнено(ПутьКФайлуADO)
		И ((НЕ ЗначениеЗаполнено(ИспользуемаяИБ)
			ИЛИ (ЗначениеЗаполнено(ИспользуемаяИБ) И ИспользуемаяИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS))) Тогда
			
			ВерсияХранимогоФайла 	= ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию(ПутьКФайлуADO, Новый Структура("Организация,Сценарий,ПериодСценария",Организация,Сценарий,ПериодОтчета),,ФайлИмпорта);
					
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ВерсияХранимогоФайла) Тогда
		
		// Удалим информацию о предыдущих протоколах, связанных с данной версией файла
		
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(ВерсияХранимогоФайла,ВерсияХранимогоФайла,Неопределено,Организация,ПериодОтчета,Сценарий,ВидОтчета);
		
		Если НЕ ЕстьЗаполненныеЗначения() Тогда
			
			ТекстСообщения = НСтр("ru = 'Файл не содержит данных для вида отчета %ВидОтчета%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.1", , ВерсияХранимогоФайла, ТекстСообщения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКФайлуADO) И (НЕ ЗначениеЗаполнено(ИспользуемаяИБ)) Тогда
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.НастраиваемыйОтчет.1",,ВерсияХранимогоФайла, НСтр("ru = 'Возможно, в настройках неверно указана информационная база '"));
				
		КонецЕсли;
			
		ПротоколОшибок=ПротоколируемыеСобытияУХ.Завершить(,,?(ЗначениеЗаполнено(Ссылка),Ссылка,ВерсияХранимогоФайла),Ложь,Истина,ВерсияХранимогоФайла);
		
		Если НЕ ПротоколОшибок=Неопределено Тогда
			
			ТаблицаСобытийЗагрузки=ПротоколОшибок.Записи.Выгрузить();
			
		КонецЕсли;
		
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(?(ЗначениеЗаполнено(Ссылка),Ссылка,ВерсияХранимогоФайла),ВерсияХранимогоФайла,ПротоколОшибок,Организация,ПериодОтчета,Сценарий,ВидОтчета);
				
	Иначе
		
		ТаблицаСобытийЗагрузки=ПротоколируемыеСобытияУХ.Завершить(,,,,Ложь,,Истина,ПодготовитьСтруктуруПеременныхДляРасчета());
		
	КонецЕсли;
	
	ПоказателиДляЗаполнения=Неопределено;
		
КонецПроцедуры // ЗавершитьПротоколЗагрузки() 

Функция ЕстьОшибкиЗагрузки() Экспорт
	
	Возврат НЕ (ТаблицаСобытийЗагрузки=Неопределено ИЛИ ТаблицаСобытийЗагрузки.Найти(Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка,"ТипЗаписи")=Неопределено); 
	
КонецФункции // ЕстьОшибкиЗагрузки()

Функция ЕстьИзмененияЗначений() Экспорт

	Если (ЛогИзмененийПоказателей = Неопределено) Или (ЛогИзмененийРаскрытийПоказателей = Неопределено) Тогда
		Возврат Ложь;
	Иначе
		Возврат ЛогИзмененийПоказателей.Количество()>0 ИЛИ ЛогИзмененийРаскрытийПоказателей.Количество()>0
	КонецЕсли;

КонецФункции

Функция ЕстьЗаполненныеЗначения() Экспорт
	
	Если РежимКорректировки Тогда
		
		Возврат ЕстьИзмененияЗначений();
		
	КонецЕсли;
	
	ПроверитьКонтекстИнициализирован();
			
	Для Каждого СтрПоказатель ИЗ мПоказатели Цикл
		
		Если ЗначениеЗаполнено(СтрПоказатель.Значение) И (НЕ СтрПоказатель.Проверочный) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции // ЕстьЗаполненныеЗначения() 

Процедура ПроизвольнаяПроцедура(ТекстПроцедуры) Экспорт
	
	Выполнить(ТекстПроцедуры);
	
КонецПроцедуры // ВыполнитьПроизвольныйКод()

Функция ПроверитьМодуль(Знач ТекстМодуля, ОписаниеОшибки) Экспорт
	
	ТекстМодуля = "Если Ложь Тогда
	|" + ТекстМодуля + "
	|КонецЕсли;";
	
	Попытка
		Выполнить(ТекстМодуля);
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВернутьПредставлениеЭкземпляраОтчета() Экспорт
	
	Возврат "<" + ВидОтчета + "><" + Организация + "><" + ПериодОтчета + "><" + Сценарий + ">";
	
КонецФункции

Процедура ОпределитьПериодРасчета() Экспорт
	
	Если ДополнительныеВалюты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
	
	УправлениеОтчетамиУХ.ОпределитьПериодРасчета(ПодготовитьСтруктуруПеременныхДляРасчета());

	мПоказатели=ДанныеРасчета.мПоказатели;
	
КонецПроцедуры


// Функция устанавливает блокировку на объект.
Функция УстановитьБлокировку(ФормаДокумента = Неопределено) Экспорт
	
	Перем РезультатБлокировки;
	
	Если НЕ Заблокирован() Тогда
		Попытка 
			Заблокировать();
			РезультатБлокировки = Истина;
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Возможен только просмотр документа'"));
			РезультатБлокировки = Ложь;
		КонецПопытки;
	Иначе
		РезультатБлокировки = Истина;
	КонецЕсли;
	
	Если ФормаДокумента <> Неопределено Тогда
		ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность        = РезультатБлокировки;
		ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность = РезультатБлокировки;
	КонецЕсли;
	
	Возврат РезультатБлокировки;
	
КонецФункции

// Производит различные проверки перед записью документа, определяющие возможность записи.
//
Процедура ПроверитьПередЗаписью(Отказ, ШапкаОшибки) Экспорт
	
	Если ПроверкаПриЗаписи=Ложь Тогда
		Возврат;
	КонецЕсли;
		
	Отказ=НЕ УправлениеОтчетамиУХ.ПроверитьВозможностьЗаписиПоКлючевымРеквизитам(ЭтотОбъект,ШапкаОшибки);
	
	Если Отказ или Не ПолныеПраваУХ.ПроверитьВозможностьЗаписиДокументовПоПериодуСценария(Сценарий, ПериодОтчета,Организация, Отказ, ШапкаОшибки,,ПериодОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ ИЛИ НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиПоБланкуОтчета(ШаблонОтчета,Организация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"), Отказ, ШапкаОшибки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтапПроцесса = Неопределено;
	
	Если ЭтоНовый() Тогда
		ТекДанные = Новый Структура("Сценарий, ПериодОтчета,ПериодОкончания, Организация, ВидОтчета,УправлениеПериодом");
		ЗаполнитьЗначенияСвойств(ТекДанные, ЭтотОбъект);
	Иначе
		ТекДанные = Ссылка;
	КонецЕсли;
	
	СостояниеЭкземпляра = РасширениеПроцессыИСогласованиеУХ.ПолучитьСостояниеЭтапаНастраиваемогоОтчета(ТекДанные, ЭтапПроцесса);
	ЭкземплярВСостоянииУтвержден = (СостояниеЭкземпляра = Перечисления.СостоянияЭтаповПроцессов.Утвержден);
	ЭтоЗакрытиеПериода = ДополнительныеСвойства.Свойство("ЭтоЗакрытиеПериода") И ДополнительныеСвойства.ЭтоЗакрытиеПериода;
	Если НЕ ЭтоЗакрытиеПериода И (ПересчетВалюты <> Истина)	И (ЭкземплярВСостоянииУтвержден) Тогда
		ТекстСообщения = НСтр("ru = '- Этап процесса %ЭтапПроцесса% использует вид отчета %ВидОтчета% и находится в состоянии ""Закрыт"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапПроцесса%", ЭтапПроцесса);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", ВидОтчета);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, ШапкаОшибки); 
		Возврат;
	КонецЕсли;
	
	СтруктураОтчета = Новый Структура("Ссылка, Сценарий, Организация,Проект,ПериодОтчета,ПериодОкончания,УправлениеПериодом,ВидОтчета,Состояние");
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураОтчета.Вставить("Аналитика" + Инд);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтчета, ЭтотОбъект);

	Если ПолныеПраваУХ.ПроверитьНаличиеДокументовСРеквизитамиТекущего(СтруктураОтчета) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = '- уже существует документ с указанными реквизитами.'"), Отказ, ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ЕстьОпределеннаяАналитика = Ложь;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект["Аналитика" + Инд]) Тогда
			ЕстьОпределеннаяАналитика = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Если (Состояние = Перечисления.СостоянияОтчетов.Утвержден ИЛИ Состояние = Перечисления.СостоянияОтчетов.Подготовлен)
		И НЕ УправлениеОтчетамиУХ.ПроверитьНаличиеУтвержденныхПравилИШаблонов(ПравилоОбработки, ШаблонОтчета, ШапкаОшибки, Состояние) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура удаляет вхождения основной валюты в ТЧ Дополнительные валюты 
//
Процедура УбратьВхожденияОсновнойВалютыВТЧДополнительныеВалюты()
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
		НайденныеСтроки = ДополнительныеВалюты.НайтиСтроки(Новый Структура("Валюта", ОсновнаяВалюта));
		
		Для Каждого Элемент Из НайденныеСтроки Цикл
			ДополнительныеВалюты.Удалить(Элемент);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщение с заданным текстом и статусом в окно сообщений.
//
Процедура ноСообщить(ТекстСообщения, Статус = Неопределено, ВызовИзМетодовДинамическихМодулей = Ложь) Экспорт
	Если НЕ (ВызовИзМетодовДинамическихМодулей И НЕ мРасширеннаяДиагностикаВключена) Тогда
		#Если Клиент Тогда	
			Сообщить(ТекстСообщения, Статус);
		#Иначе
			СписокСообщений.Добавить(ТекстСообщения);
			Сообщить(ТекстСообщения, Статус);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

// В том случае, если процедура вызывается с клиента - дублирует поведение процедуры 
// ноСообщить, иначе заполняет переменную мТекстПредупреждения.(используется в WEB)
Процедура ноПредупреждение(ТекстСообщения, Статус = Неопределено) Экспорт
	
	#Если Клиент Тогда
		ноСообщить(ТекстСообщения, ?(Статус = Неопределено, СтатусСообщения.Важное, Статус));
	#Иначе
		мТекстПредупреждения = ТекстСообщения;
		ноСообщить(мТекстПредупреждения, ?(Статус = Неопределено, СтатусСообщения.Важное, Статус));
	#КонецЕсли
	
КонецПроцедуры

// Очищает значения показателей, примечания к показателям, раскрытия.
//
Процедура ОчиститьПередЗаполнением() Экспорт
	
	ПоказателиЭтоСтруктура = (ТипЗнч(Показатели) = Тип("Структура"));
	
	ОчиститьПоказателиВВалюте = (ЭтотОбъект.ДополнительныеВалюты.Количество() > 0) И ЗначениеЗаполнено(ПоказателиВВалюте);
	
	Для Каждого Стр Из мПоказатели Цикл
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект, Стр, ПустоеЗначениеПоТипу[Стр.ТипЗначения]);
		
		Если ПоказателиЭтоСтруктура Тогда
			
			Показатели.Вставить(Стр.Код, Стр.Значение);
			
			Если ОчиститьПоказателиВВалюте Тогда
				ПоказателиВВалюте.Вставить(Стр.Код, Стр.Значение);			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОчиститьПоказателиВВалюте Тогда
		
		Для каждого ПоказательВВалюте Из мПоказателиВВалюте Цикл			
			ПоказательВВалюте.Значение = ПустоеЗначениеПоТипу[Стр.ТипЗначения];		
		КонецЦикла;
		
	КонецЕсли;
	//	мПоказателиРаскрытия.Очистить();
	
	ОчиститьмПоказателиРаскрытия();
	
КонецПроцедуры 

Функция ПреобразоватьТаблицуРаскрытия(ТаблРаскрытия, СоставГруппы)
	
	ТаблВозврата = Новый ТаблицаЗначений;
	СтруктураОтбора = Новый Структура("");
	Для Каждого Кол Из ТаблРаскрытия.Колонки Цикл
		Если Кол.Имя <> "Показатель" И Кол.Имя <> "Значение" Тогда
			Если Кол.Имя <> "КодПоказателя" И Кол.Имя <> "ТипПоказателя" Тогда
				Если Кол.Имя <> "ДанныеРасчета" Тогда
					СтруктураОтбора.Вставить(Кол.Имя);
				КонецЕсли;
			КонецЕсли;
			ТаблВозврата.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения, Кол.Заголовок, Кол.Ширина);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.ТипЗначения КАК ТипПоказателя,
	|	ПоказателиОтчетов.Код КАК КодПоказателя
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка В(&Ссылка)
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиОтчетов.ГруппаРаскрытия.ПорядковыйНомер");
	Запрос.УстановитьПараметр("Ссылка", СоставГруппы);
	ТаблПоказатели = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для Каждого Стр Из ТаблПоказатели Цикл
		ТаблВозврата.Колонки.Добавить(СокрЛП(Стр.КодПоказателя), УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(Стр.ТипПоказателя));
	КонецЦикла;
	
	КолонкаКодПоказателяОпределена = (ТаблРаскрытия.Колонки.Найти("КодПоказателя") <> Неопределено);
	
	ИндексТаблВозврата = "";
	Для Каждого Элемент Из СтруктураОтбора Цикл
		ИндексТаблВозврата = ИндексТаблВозврата + Элемент.Ключ + ",";
	КонецЦикла;
	ТаблВозврата.Индексы.Добавить(ИндексТаблВозврата);
	
	Для Каждого Стр Из ТаблРаскрытия Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Стр);
		СтрКлючРеквизиты = ТаблВозврата.НайтиСтроки(СтруктураОтбора);
		Если СтрКлючРеквизиты.Количество() = 0 Тогда
			НовСтр = ТаблВозврата.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтруктураОтбора);
		Иначе
			НовСтр = СтрКлючРеквизиты[0];
		КонецЕсли;
		Если КолонкаКодПоказателяОпределена Тогда
			НовСтр[СокрЛП(Стр.КодПоказателя)] = Стр.Значение;
		Иначе
			НовСтр[СокрЛП(Стр.Показатель.Код)] = Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблВозврата.Колонки.Найти("ТипПоказателя") <> Неопределено Тогда
		ТаблВозврата.Колонки.Удалить(ТаблВозврата.Колонки.ТипПоказателя);
	КонецЕсли;
	Если ТаблВозврата.Колонки.Найти("КодПоказателя") <> Неопределено Тогда
		ТаблВозврата.Колонки.Удалить(ТаблВозврата.Колонки.КодПоказателя);
	КонецЕсли;
	Возврат ТаблВозврата;
	
КонецФункции

Функция СоставГруппыРаскрытия(локГруппаРаскрытия)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ГруппаРаскрытия = &ГруппаРаскрытия
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)");
	Запрос.УстановитьПараметр("ГруппаРаскрытия", локГруппаРаскрытия);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка");
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НУЖД WEB-ИНТЕРФЕЙСА

Функция ИзменитьЗначениеПоказателя(Знач КодПоказателя, ЗначениеПоказателя) Экспорт
	
	НачатьНовуюОперацию();
	
	Если ТипЗнч(КодПоказателя) <> Тип("Строка") Тогда
		КодПоказателя = СокрЛП(КодПоказателя.Код);
	КонецЕсли;
	СтрокаПоказателя = мСоответствиеДляПоискаПоКоду[СокрЛП(КодПоказателя)];
	Если СтрокаПоказателя = Неопределено Тогда
		Возврат Ложь;
	Иначе
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,СтрокаПоказателя, ЗначениеПоказателя);
		//СтрокаПоказателя.Значение = ЗначениеПоказателя;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Инициализирует структуры Показатели и Параметры, запускает модуль вычисления,
// помещает показатели, полученные в результате вычисления, в таблицу мПоказатели.
//
Функция РассчитатьВычисляемыеПоказатели(МассивКодовПоказателей=Неопределено) Экспорт
		
	// запускаем код заполнения
	Если НЕ ЗапуститьМодульВычисления(МассивКодовПоказателей) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Формирует пустую таблицу значений, соответствующую группе раскрытия.
//
Функция ПолучитьПустуюТаблицуРаскрытия(ГруппаРаскрытия) Экспорт
	
	// создаем таблицу описания раскрываемых показателей
	ПоказателиКолонки = Новый ТаблицаЗначений;
	ПоказателиКолонки.Колонки.Добавить("Ссылка");
	ПоказателиКолонки.Колонки.Добавить("Код");
	ПоказателиКолонки.Колонки.Добавить("Наименование");
	ПоказателиКолонки.Колонки.Добавить("ТипЗначения");
	НайденныеПоказатели = мПоказатели.НайтиСтроки(Новый Структура("ГруппаРаскрытия", ГруппаРаскрытия));
	
	Для Каждого НайденныйПоказатель Из НайденныеПоказатели Цикл
		НовСтр = ПоказателиКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НайденныйПоказатель);
	КонецЦикла;
	
	// создаем таблицу, со строками - комбинациями значений аналитик и колонками - показателями
	ТаблицаРаскрытия = Новый ТаблицаЗначений;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ГруппаРаскрытия["ВидАналитики" + Инд]) Тогда
			ТаблицаРаскрытия.Колонки.Добавить("Аналитика" + Инд, ГруппаРаскрытия["ВидАналитики" + Инд].ТипЗначения, ГруппаРаскрытия["ВидАналитики" + Инд]);
		КонецЕсли;
	КонецЦикла;
	ЧислоАналитик = ТаблицаРаскрытия.Колонки.Количество();
	Для Каждого Пок Из ПоказателиКолонки Цикл
		ТаблицаРаскрытия.Колонки.Добавить(Пок.Код, УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(Пок.ТипЗначения), Пок.Наименование);
	КонецЦикла;
	
	Возврат ТаблицаРаскрытия;
	
КонецФункции

Процедура ПрименитьТаблицуРаскрытия(ГруппаРаскрытия, ТаблицаРаскрытия) Экспорт
	
	ЧислоАналитик = ТаблицаРаскрытия.Колонки.Количество() - мПоказатели.НайтиСтроки(Новый Структура("ГруппаРаскрытия", ГруппаРаскрытия)).Количество(); 
	
	КолонкиПоказатели = Новый Массив;
	МассивКодовПоказателей = Новый Массив;
	НайденныеПоказатели = мПоказатели.НайтиСтроки(Новый Структура("ГруппаРаскрытия", ГруппаРаскрытия));
	Для Каждого НайденныйПоказатель Из НайденныеПоказатели Цикл
		КолонкиПоказатели.Добавить(НайденныйПоказатель);
		МассивКодовПоказателей.Добавить(НайденныйПоказатель.Код);
	КонецЦикла;
	
	// действия по применению значений - добавление/изменение измененных строк
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Показатель");
	ИменаКолонокАналитик = Новый Массив;
	Для Инд = 1 По ЧислоАналитик Цикл
		СтруктураОтбора.Вставить(ТаблицаРаскрытия.Колонки.Получить(Инд - 1).Имя);
		ИменаКолонокАналитик.Добавить(ТаблицаРаскрытия.Колонки.Получить(Инд - 1).Имя);
	КонецЦикла;
	ОбработанныеСтроки = Новый СписокЗначений;
	ПустыеСтроки = Новый Массив;
	Для Каждого Стр Из ТаблицаРаскрытия Цикл
		ЭтоПустаяСтрока = Истина;
		Для Каждого Эл Из ИменаКолонокАналитик Цикл
			Если ЗначениеЗаполнено(Стр[Эл]) Тогда
				ЭтоПустаяСтрока = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоПустаяСтрока Тогда
			ПустыеСтроки.Добавить(Стр);
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Стр); // заполняем структуру отбора значениями аналитик
		Для НомКол = ЧислоАналитик + 1 По ТаблицаРаскрытия.Колонки.Количество() Цикл // по всем показателям
			СтруктураОтбора.Показатель = КолонкиПоказатели[НомКол - (ЧислоАналитик + 1)].Ссылка;
			РезультатПоиска = мПоказателиРаскрытия.НайтиСтроки(СтруктураОтбора);
			Если РезультатПоиска.Количество() > 0 Тогда
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Неопределено, РезультатПоиска[0]);
			КонецЕсли;
			НовСтр = мПоказателиРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ЭтотОбъект); // заполняем аналитикой документа
			ЗаполнитьЗначенияСвойств(НовСтр, СтруктураОтбора); // заполняем аналитикой раскрытия по строке
			НовСтр.Показатель = СтруктураОтбора.Показатель.Ссылка;
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Стр[ТаблицаРаскрытия.Колонки.Получить(НомКол - 1).Имя], НовСтр);
			ОбработанныеСтроки.Добавить(НовСтр);
		КонецЦикла;
	КонецЦикла;
	
	// удаление пустых строк
	Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаРаскрытия.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	// удаление строк раскрытий, которые были удалены в редактируемой таблице, но еще присутствуют в таблице раскрытий
	КолСтрТаблицаРаскрытий = мПоказателиРаскрытия.Количество();
	Для Инд = 1 По КолСтрТаблицаРаскрытий Цикл
		ТекРаскр = мПоказателиРаскрытия.Получить(КолСтрТаблицаРаскрытий - Инд);
		Если ОбработанныеСтроки.НайтиПоЗначению(ТекРаскр) <> Неопределено Тогда // эту строку мы меняли
			Продолжить;
		КонецЕсли;
		Для Каждого Пок Из КолонкиПоказатели Цикл // по всем показателям
			Если ТекРаскр.Показатель = Пок.Ссылка Тогда
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Неопределено, ТекРаскр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьИтогиПоПоказателям(МассивКодовПоказателей);
	// запустим модуль вычисления
	РассчитатьВычисляемыеПоказатели();
	
КонецПроцедуры

Функция ДобавитьФайлИлиВерсию(ИмяФайла, ДвДанные, Комментарий = "") Экспорт
	
	ВремКаталог = КаталогВременныхФайлов() + Строка(Новый("УникальныйИдентификатор")) + "\";
	СоздатьКаталог(ВремКаталог);
	ИмяВременногоФайла = ВремКаталог + ИмяФайла;
	ДвДанные.Записать(ИмяВременногоФайла);
	СтруктураДляОтбора = Новый Структура("Организация, Сценарий, ПериодСценария, ВидОтчета");
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураДляОтбора.Вставить("Аналитика" + Инд);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураДляОтбора, ЭтотОбъект);
	СтруктураДляОтбора.ПериодСценария = ПериодОтчета;
	СтатусВозврата = ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию(ИмяВременногоФайла, СтруктураДляОтбора, , , , Истина);
	УдалитьФайлы(ВремКаталог);
	Возврат СтатусВозврата;
	
КонецФункции

Функция ПолучитьТабличныйДокументШаблона() Экспорт
	
	Возврат ШаблонОтчета.Макет.Получить();
	
КонецФункции

Функция ПолучитьАналитикиВидаОтчета() Экспорт
	
	ТаблицаАналитик=Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("НаименованиеАналитики");
	ТаблицаАналитик.Колонки.Добавить("ЗначениеАналитики");
	ТаблицаАналитик.Колонки.Добавить("ПредставлениеАналитики");
	ТаблицаАналитик.Колонки.Добавить("ТипЗначенияАналитики");
	ТаблицаАналитик.Колонки.Добавить("ВидСубконтоАналитики");
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики" + Инд]) Тогда
			
			НоваяСтрока=ТаблицаАналитик.Добавить();
			НоваяСтрока.НаименованиеАналитики=ВидОтчета["ВидАналитики" + Инд].Наименование;
			НоваяСтрока.ЗначениеАналитики=ЭтотОбъект["Аналитика"+Инд];
			НоваяСтрока.ТипЗначенияАналитики=ВидОтчета["ВидАналитики" + Инд].ТипЗначения;
			НоваяСтрока.ВидСубконтоАналитики=ВидОтчета["ВидАналитики" + Инд];
			
			Если ЗначениеЗаполнено(НоваяСтрока.ЗначениеАналитики) Тогда
				НоваяСтрока.ПредставлениеАналитики=НоваяСтрока.ЗначениеАналитики.Наименование;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаАналитик;
	
КонецФункции // ПолучитьАналитикиВидаОтчета()

Процедура ЗаполнитьАналитикиВидаОтчета(МассивАналитик) Экспорт
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики" + Инд]) Тогда
			
			ЭтотОбъект["Аналитика"+Инд]=МассивАналитик[Инд-1];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикиВидаОтчета 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ HTML представления документа.
//

Функция ПолучитьШестнадцатиричноеПредставление(Знач Число)
	Строка = "";
	Пока Число >= 16 Цикл
		Дробь = Число / 16;
		Число = Цел(Дробь);
		Строка = ПолучитьШестнадцатиричнуюЦифру(Дробь - Число) + Строка;
	КонецЦикла;	
	Строка = ПолучитьШестнадцатиричнуюЦифру(Число);
	Возврат Строка;
КонецФункции

Функция ПолучитьШестнадцатиричнуюЦифру(Знач Число)
	Если Число < 10 Тогда
		Возврат Строка(Число);
	Иначе
		Возврат Символ(65 + Число - 10);
	КонецЕсли;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// ДАННЫЕ ИЗ ТЕКУЩЕЙ ИНФОРМАЦИОННОЙ БАЗЫ

Процедура ЗаполнитьКонтекстЭкземпляраОтчета() Экспорт
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Организация",				Организация);
	ДанныеОбъекта.Вставить("Проект",					Проект);
	ДанныеОбъекта.Вставить("ПериодОтчета",				ПериодОтчета);
	ДанныеОбъекта.Вставить("Сценарий",					Сценарий);
	ДанныеОбъекта.Вставить("ОсновнаяВалюта",			ОсновнаяВалюта);
	ДанныеОбъекта.Вставить("ОтчетОбъект",				ЭтотОбъект);
	ДанныеОбъекта.Вставить("АнализЧувствительности",	АнализЧувствительности);
	ДанныеОбъекта.Вставить("ЧтениеНеактуальныхЗаписей",	ИспользуемоеЧтениеНеактуальныхЗаписей());
	ДанныеОбъекта.Вставить("УправляемыйРежим",			УправляемыйРежим);
	ДанныеОбъекта.Вставить("ЭкземплярыИсточники",		ЭкземплярыИсточники.Выгрузить());
	
	ДанныеОбъекта.Вставить("ИспользуемаяИБ",ИспользуемаяИБ);
	
	Если ТихийРежим Тогда
		ДанныеОбъекта.Вставить("ТихийРежим");
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("РежимРасшифровки",РежимРасшифровки);
	
	Для Индекс=1 ПО МаксАналитикОтчета Цикл
		
		ДанныеОбъекта.Вставить("Аналитика"+Индекс,ЭтотОбъект["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(мТекущаяВалюта) Тогда
		
		ДанныеОбъекта.Вставить("мТекущаяВалюта",мТекущаяВалюта);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьКонтекстЭкземпляраОтчета 

Функция ПолучитьТаблицуОперанда(Операнд) Экспорт
	
	Если Операнд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		ПостроительЗапроса=Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст=Операнд.ТекстЗапросаМодуля;
		
		ПостроительЗапроса.Отбор["Показатель"].Использование=Истина;
		ПостроительЗапроса.Отбор["Показатель"].Значение=Операнд.ПоказательОтбор;
		
		Параметр=Операнд.ПравилаВычисленияПараметровЗапроса.Выбрать();
		
		Пока Параметр.Следующий() Цикл
			
			Если Не Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
				
				ДобавитьОтборПоВычисляемымПараметрам(ПостроительЗапроса,Параметр);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ПолучитьТаблицуОперанда()

Процедура ДобавитьОтборПоВычисляемымПараметрам(ПостроительРабочий,СтрокаПараметр)
	
	ЕстьОтбор=Ложь;
	
	Для Каждого Элемент ИЗ ПостроительРабочий.Отбор Цикл
		
		Если Элемент.ПутьКДанным=СтрокаПараметр.ИмяПараметра Тогда
			
			ЕстьОтбор=Истина;
			Элемент.Использование=Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьОтбор Тогда
		
		НовыйОтбор=ПостроительРабочий.Отбор.Добавить(СтрокаПараметр.ИмяПараметра);
		НовыйОтбор.Использование=Истина;
		НовыйОтбор.ВидСравнения=ПолучитьСвойстваПараметра(СтрокаПараметр).ВидСравнения;
		НовыйОтбор.Значение=ПолучитьСвойстваПараметра(СтрокаПараметр).Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОтборПоВычисляемымПараметрам()

Функция ПолучитьШапкуОшибки() Экспорт
	
	Возврат ОбщегоНазначенияУХ.ПолучитьШапкуОшибки(ПодготовитьСтруктуруПеременныхДляРасчета());
	
КонецФункции // ПолучитьШапкуОшибки()  

Функция ВычислитьПараметрПоФункции(СтрокаПараметр) Экспорт
	
	Перем ЗначениеПараметра;
	
	Попытка
		
		ИсходныйТекстПараметра=СтрокаПараметр.ТекстМодуля;
		ТекстВычисленияПараметра=?(АнализЧувствительности,СтрЗаменить(ИсходныйТекстПараметра,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),ИсходныйТекстПараметра);
		
		Выполнить(ТекстВычисленияПараметра);
		
		Возврат ЗначениеПараметра
		
	Исключение
		ТекстСообщения = НСтр("ru = '%ШапкаОшибки%
		|во время исполнения процедуры вычисления параметра %НаименованиеБД% произошла следующая критическая ошибка:
		|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШапкаОшибки%", Строка(ПолучитьШапкуОшибки()));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеБД%", Строка(СокрЛП(СтрокаПараметр.НаименованиеБД)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
	КонецПопытки;
	
	
КонецФункции // ВычислитьПараметрПоФункции()

// Вычисляет значение параметра операнда в зависимости от способа его вычисления
//
Функция ПолучитьСвойстваПараметра(СтрокаПараметр) Экспорт
	
	Возврат УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(ЭтотОбъект,СтрокаПараметр);
	
КонецФункции // ПолучитьСвойстваПараметра()

///////////////////////////////////////////////////////////////////////////////////
//// РАСШИФРОВКИ В УПРАВЛЯЕМОМ ПРИЛОЖЕНИИ

Функция ВернутьМассивПоказателейПоКодам(МассивКодовПоказателей,ВозвращаемаяКоллекция="") Экспорт
	
	Если МассивКодовПоказателей.Количество()=0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Запрос = Новый Запрос;
	
	Если ТипЗнч(МассивКодовПоказателей[0])=Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
		ОтборПоСсылкам=Истина;
		Запрос.УстановитьПараметр("Ссылка", МассивКодовПоказателей);
	Иначе
		ОтборПоСсылкам=Ложь;
		Запрос.УстановитьПараметр("Код", МассивКодовПоказателей);
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", мПоказатели);
	
	Если ВозвращаемаяКоллекция = "мПоказатели" Тогда
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ Ссылка, Код, Наименование, ВидКурса, СвязанныйПоказатель, Значение, ТипЗначения, ПериодРасчета
		|ПОМЕСТИТЬ мПоказатели
		|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
		
		Если ОтборПоСсылкам Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ ВнешнийИсточник.Ссылка В(&Ссылка)";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ ВнешнийИсточник.Код В(&Код)";
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|;
		|ВЫБРАТЬ мПоказатели.*
		|ИЗ
		|	мПоказатели КАК мПоказатели";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ Ссылка, Код, Наименование,ПорядковыйНомерСтроки,ПорядковыйНомерКолонки
		|ПОМЕСТИТЬ мПоказатели
		|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
		
		Если ОтборПоСсылкам Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ ВнешнийИсточник.Ссылка В(&Ссылка)";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ ВнешнийИсточник.Код В(&Код)";
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|;
		|ВЫБРАТЬ мПоказатели.*
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|Упорядочить ПО ПорядковыйНомерСтроки, ПорядковыйНомерКолонки";
		
		Если ВозвращаемаяКоллекция="Таблица" Тогда
			
			Возврат Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ВернутьМассивПоказателей() 

Функция ВернутьТаблицуПримечаний(МассивПоказателей) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.Наименование КАК НаименованиеПоказателя,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Наименование КАК НаименованиеПоказателяОтбора,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.Наименование КАК НаименованиеОтчета
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &Владелец
	|	И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = &ДляПримечаний
	|	И (НЕ ИсточникиДанныхДляРасчетов.НеИспользуется)
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета В(&Показатели)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеПоказателя";
	
	
	Запрос.УстановитьПараметр("Показатели",МассивПоказателей.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("Владелец",ПравилоОбработки);
	Запрос.УстановитьПараметр("ДляПримечаний",Перечисления.СпособыИспользованияОперандов.ДляПримечаний);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ВернутьТаблицуПримечаний() 

Функция ЗаполнениеТрансляцией() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.Регистратор
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета = &ЭкземплярОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииЗначенийПоказателей.Код УБЫВ";
	
	Запрос.УстановитьПараметр("ЭкземплярОтчета",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() И ТипЗнч(Результат.Регистратор)=Тип("ДокументСсылка.Трансляция") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЗаполнениеТрансляцией() 

Функция ОбработатьРасшифровкуАналитикПоказателяПоПравилуОбработки(Знач Пок, Знач СтруктураОтбора) Экспорт
	
	Перем РабОперанды;
	Перем РабЗначенияОперандов;
		
	Если ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Делитель = 1000000;
		ФорматнаяСтрока = "ЧЦ=12";
	ИначеЕсли ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Делитель = 1000;
		ФорматнаяСтрока = "ЧЦ=15";
	Иначе
		Делитель = 1;
		ФорматнаяСтрока = "ЧЦ=18";
	КонецЕсли;
	
	Если ДанныеОбъекта=Неопределено Тогда
		
		ЗаполнитьКонтекстЭкземпляраОтчета();
		
	КонецЕсли;
			
	ФорматнаяСтрока = ФорматнаяСтрока + ";ЧДЦ=" + УровеньТочности;
	
	СтрПоказатель=мСоответствиеДляПоискаПоСсылке[Пок.Ссылка];
	
	//СтрПоказательОбработка=мПоказателиДляОбработки.Найти(СтрПоказатель.Ссылка,"Показатель");
	НеМасштабируется = СтрПоказатель.НеМасштабируется;
	
	ДанныеРасчетаПоказателя=Неопределено;
	
	ТекПоказатель             = СтрПоказатель.Ссылка;
	ТекПоказательНаименование = СтрПоказатель.Наименование;
	ТекКодПоказателя          = СтрПоказатель.Код;
	
	ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
	
	ПараметрыРасчета=УправлениеОтчетамиУХ.ПолучитьПараметрыРасчетаПоказателя(ОбъектРасчета,ТекПоказатель);
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ПравилоОбработки) Тогда
		
		ТекПравилоОбработки	= ПараметрыРасчета.ПравилоОбработки;
		ТекИспользуемаяИБ	= ПараметрыРасчета.ИспользуемаяИБ;
		
	Иначе
		
		ТекПравилоОбработки	= ПравилоОбработки;
		ТекИспользуемаяИБ	= ИспользуемаяИБ;
		
	КонецЕсли;
			
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Получим текст формулы показателя
	
	ТаблицаФормулы=УправлениеОтчетамиУХ.ПолучитьФормулыРасчета(ТекПравилоОбработки,СтрПоказатель.Ссылка);
	
	Если ТаблицаФормулы.Количество()=0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Для показателя %Показатель% в правиле обработки %ПравилоОбработки% не определены формулы расчета.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Строка(СтрПоказатель.Наименование));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПравилоОбработки%", Строка(ТекПравилоОбработки));
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат Новый Структура("ТекстОшибки, ТабДокумент", ТекстОшибки, Новый ТабличныйДокумент);
		
	ИначеЕсли ТаблицаФормулы[0].ПроизвольныйКод Тогда
		
		ТекстОшибки=НСтр("ru = 'Показатель заполнялся на основании произвольного кода. Расшифровка невозможна.'");
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат Новый Структура("ТекстОшибки, ТабДокумент", ТекстОшибки, Новый ТабличныйДокумент);
		
	КонецЕсли;
	
	ДанныеФормулы=ТаблицаФормулы[0];
	ТекстПроцедуры=ДанныеФормулы.Процедура;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника КАК КодИсточника,
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы КАК КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.КодПоказательОтбор КАК КодПоказательОтбор,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы КАК ЕстьНестандартныеОтборы,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных КАК ИсточникДанных,
	|	РеквизитыИсточниковДанныхДляФормул.СпособПолучения КАК СпособПолучения,
	|	РеквизитыИсточниковДанныхДляФормул.СпособИспользования КАК СпособИспользования,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.Наименование КАК Наименование,
	|	ЕСТЬNULL(РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.ПоказательОтбор.Владелец, НЕОПРЕДЕЛЕНО) КАК ВидОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.ПоказательОтбор КАК ПоказательОтбор,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	|	И РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета = &ПотребительРасчета
	|	И НЕ РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.НеИспользуется";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ТекПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",СтрПоказатель.Ссылка);
	
	КодыНаименованияОперандов=Новый ТаблицаЗначений;
	КодыНаименованияОперандов.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	КодыНаименованияОперандов.Колонки.Добавить("КодУпрощеннойФормулы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	КодыНаименованияОперандов.Колонки.Добавить("Наименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	
	РеквизитыОперандов=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ РеквизитыОперандов Цикл
		
		ТекстПроцедуры=СтрЗаменить(ТекстПроцедуры,"["+СокрЛП(Строка.КодИсточника)+"]",Строка.КодУпрощеннойФормулы);
		
		НоваяСтрока=КодыНаименованияОперандов.Добавить();
		НоваяСтрока.Код=Строка.КодИсточника;
		НоваяСтрока.Наименование=Строка.Наименование;
		НоваяСтрока.КодУпрощеннойФормулы=Строка.КодУпрощеннойФормулы;
	
	КонецЦикла;
	
	Если ТипЗнч(мЗначенияОперандов)=Тип("ТаблицаЗначений") Тогда
		
		ТекЗначенияОперандов=мЗначенияОперандов.Скопировать();
		
	КонецЕсли; 
	
	ДанныеДЛяРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ТекПравилоОбработки,,СтрПоказатель.Ссылка);
	ТабЗапросы=ДанныеДЛяРасчета.мТабПоказателиЗапросы;
	ЕстьОбращениеКВИБ=ДанныеДЛяРасчета.ЕстьОбращениеКВИБ;
	мСоответствиеОперандовИПоказателейОтбора=ДанныеДЛяРасчета.мСоответствиеОперандовИПоказателейОтбора;
	
	ОбъектРасчета.Вставить("ПравилоОбработки",							ТекПравилоОбработки);
	ОбъектРасчета.Вставить("ИспользуемаяИБ",							ТекИспользуемаяИБ);
	ОбъектРасчета.Вставить("ЕстьОбращениеКВИБ",							ЕстьОбращениеКВИБ);
	ОбъектРасчета.Вставить("ТабЗапросы",								ТабЗапросы);
	ОбъектРасчета.Вставить("мСоответствиеОперандовИПоказателейОтбора",	мСоответствиеОперандовИПоказателейОтбора);
	
	УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ТабЗапросы);
	
	РабЗначенияОперандов=ОбъектРасчета.мЗначенияОперандов.Скопировать();
	
	Если ТипЗнч(ТекЗначенияОперандов)=Тип("ТаблицаЗначений") Тогда
		
		мЗначенияОперандов=ТекЗначенияОперандов;
		
	КонецЕсли; 
				
	Макет            = ПолучитьМакет("МакетРасшифровки");
	
	ОбластиРасшифровки = Новый Структура;
	
	ОбластиРасшифровки.Вставить("ЗначениеПоказателя", Макет.ПолучитьОбласть("ЗначениеПоказателя"));
	ОбластиРасшифровки.Вставить("ОбщиеДанные"       , Макет.ПолучитьОбласть("ОбщиеДанные"));
	ОбластиРасшифровки.Вставить("Операнды"          , Макет.ПолучитьОбласть("Операнды"));
	ОбластиРасшифровки.Вставить("Подвал"            , Макет.ПолучитьОбласть("Подвал"));
	ОбластиРасшифровки.Вставить("Аналитики"         , Макет.ПолучитьОбласть("Аналитики"));
	ОбластиРасшифровки.Вставить("ПравилоОбработки"  , Макет.ПолучитьОбласть("ПравилоОбработки"));
	ОбластиРасшифровки.Вставить("ИспользуемаяИБ"  	, Макет.ПолучитьОбласть("ИспользуемаяИБ"));
	
	Если ТаблицаФормулы[0].ПроизвольныйКод Тогда
		
		Возврат Новый Структура("ТекстОшибки, ТабДокумент", Нстр("ru = 'Показатель заполнялся на основании произвольного кода. Расшифровка невозможна'"), Новый ТабличныйДокумент);
		
	КонецЕсли;
	
	РабочаяТаблица=РабЗначенияОперандов.Скопировать(СтруктураОтбора,"КодОперанда, Значение, ИтогПоПоказателю");

	ТолькоЧисловыеПоказатели=Истина;
	
	Для Каждого Строка ИЗ РабочаяТаблица Цикл
		
		Если НЕ ТипЗнч(Строка.Значение)=Тип("Число") Тогда
			
			ТолькоЧисловыеПоказатели=Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Если ТолькоЧисловыеПоказатели Тогда
		
		Если СтруктураОтбора=Неопределено Тогда
			
			РабочаяТаблица.Свернуть("КодОперанда,ИтогПоПоказателю","Значение");
			
		Иначе	
			
			РабочаяТаблица.Свернуть("КодОперанда,ИтогПоПоказателю","Значение");
			РабочаяТаблица.ЗаполнитьЗначения(Истина,"ИтогПоПоказателю");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтруктураОтбора=Неопределено Тогда
		
		// Добавим операнды, не раскрывавшиеся по аналитике
		Для Каждого СтрОперанд ИЗ РеквизитыОперандов Цикл
			
			ЕстьРаскрытиеПоАналитике=Ложь;
			
			Для Каждого СтрПравило ИЗ СтрОперанд.ИсточникДанных.ПравилаИспользованияПолейЗапроса Цикл
				
				Если Найти(СтрПравило.КодАналитики,"Аналитика")>0 Тогда
					
					ЕстьРаскрытиеПоАналитике=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьРаскрытиеПоАналитике Тогда // Операнд не раскрывался по аналитике
				
				СтруктураПоиска=Новый Структура("КодОперанда,ИтогПоПоказателю",СтрОперанд.КодИсточника,Истина);
				
				МассивРаскрытие=РабЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
				
				Если МассивРаскрытие.Количество()>0 Тогда
					
					НоваяСтрока=РабочаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивРаскрытие[0]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("ИтогПоПоказателю Убыв, КодОперанда");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Наименование = ТекПоказательНаименование;
	ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Ссылка       = ТекПоказатель;
	
	Если СтруктураОтбора=Неопределено Тогда
	
		ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Значение     = СтрПоказатель.Значение;
		
	Иначе
		
		СтруктураПоиска=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтруктураОтбора);
		СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Ссылка);
		МассивРаскрытие=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);	
		ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Значение     = ?(МассивРаскрытие.Количество()=0,0,МассивРаскрытие[0].Значение);
		
	КонецЕсли;
			
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ЗначениеПоказателя);
	
	ОбластиРасшифровки.ПравилоОбработки.Параметры.ПравилоОбработки	= ТекПравилоОбработки;
	ОбластиРасшифровки.ПравилоОбработки.Параметры.Ссылка			= ТекПравилоОбработки;

	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ПравилоОбработки);
	
	Если ЗначениеЗаполнено(ТекИспользуемаяИБ) Тогда
		
		ОбластиРасшифровки.ИспользуемаяИБ.Параметры.ИспользуемаяИБ	= ТекИспользуемаяИБ;
		ОбластиРасшифровки.ИспользуемаяИБ.Параметры.Ссылка			= ТекИспользуемаяИБ;

		ТабличныйДокумент.Вывести(ОбластиРасшифровки.ИспользуемаяИБ);
		
	КонецЕсли;

	Если НЕ СтруктураОтбора=Неопределено Тогда
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			
			ОбластиРасшифровки.Аналитики.Параметры.КодАналитики=КлючИЗначение.Ключ;
			ОбластиРасшифровки.Аналитики.Параметры.ЗначениеАналитики=КлючИЗначение.Значение;
			ОбластиРасшифровки.Аналитики.Параметры.Ссылка=КлючИЗначение.Значение;
			
			ТабличныйДокумент.Вывести(ОбластиРасшифровки.Аналитики);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластиРасшифровки.ОбщиеДанные.Параметры.ФормулаВычисления = ТекстПроцедуры;
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ОбщиеДанные);
		
	Для Каждого ДанныеОперанда Из РеквизитыОперандов Цикл
		
		Если ДанныеОперанда.СпособИспользования <> Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета Тогда
			Продолжить;
		КонецЕсли;
				
		ОбластиРасшифровки.Операнды.Параметры.Код                 = ДанныеОперанда.КодУпрощеннойФормулы;
		ОбластиРасшифровки.Операнды.Параметры.СпособПолучения     = ДанныеОперанда.СпособПолучения;
		ОбластиРасшифровки.Операнды.Параметры.Описание            = ДанныеОперанда.Наименование;
		
		ОбластиРасшифровки.Операнды.Параметры.ВидОтчета           =	ДанныеОперанда.ВидОтчета;	
		ОбластиРасшифровки.Операнды.Параметры.Ссылка              = ДанныеОперанда.ИсточникДанных;
		
		Если ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда = Новый Структура("Операнд, СтруктураОтбора", ДанныеОперанда.ИсточникДанных, УправлениеОтчетамиУХ.ПодготовитьСтруктуруОтбора(ДанныеОперанда.ИсточникДанных, СтруктураОтбора));
			
		ИначеЕсли ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
			
			ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда = Новый Структура("ОперандРаскрытия, СтруктураОтбора", ДанныеОперанда.ИсточникДанных, УправлениеОтчетамиУХ.ПодготовитьСтруктуруОтбора(ДанныеОперанда.ИсточникДанных, СтруктураОтбора));
			
		ИначеЕсли ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда
			
			 ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда = Новый Структура("Операнд", ДанныеОперанда.ИсточникДанных);
			
		КонецЕсли;
		
		Если ДанныеОперанда.ПоказательТекущегоОтчета Тогда
			
			Если СтруктураОтбора=Неопределено Тогда
				
				НайденнаяСтрока=мСоответствиеДляПоискаПоСсылке[ДанныеОперанда.ПоказательОтбор];
				
			Иначе
				
				СтруктураРасшифровки = УправлениеОтчетамиУХ.ПодготовитьСтруктуруОтбора(ДанныеОперанда.ИсточникДанных, СтруктураОтбора);
				СтруктураРасшифровки.Вставить("Показатель", ДанныеОперанда.ПоказательОтбор);
				
				НайденныеСтроки = мПоказателиРаскрытия.НайтиСтроки(СтруктураРасшифровки);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока = НайденныеСтроки[0];
				
			КонецЕсли;
			
		Иначе
			
			НайденнаяСтрока = РабочаяТаблица.Найти(СокрЛП(ДанныеОперанда.КодИсточника), "КодОперанда");
			
		КонецЕсли;
		
		ОбластиРасшифровки.Операнды.Параметры.Значение = ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Значение, Неопределено);
		
		ТабличныйДокумент.Вывести(ОбластиРасшифровки.Операнды);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластиРАсшифровки.Подвал);
	Возврат Новый Структура("ТекстОшибки, ТабДокумент,КодыНаименованияОперандов", "", ТабличныйДокумент,КодыНаименованияОперандов);
	
КонецФункции

Процедура ВывестиДанныеАналитик(ТаблДок,ОтборПоАналитикам)
	
	Макет=ПолучитьМакет("НовыйМакет");
	ОбластьАналитика=Макет.ПолучитьОбласть("ОбластьАналитика");
	
	ОбластьАналитика.Параметры.КодАналитики=Нстр("ru = 'Период: '");
	ОбластьАналитика.Параметры.ЗначениеАналитики=ПериодОтчета;
	ТаблДок.Вывести(ОбластьАналитика);
	
	Если ОтборПоАналитикам=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Элемент ИЗ ОтборПоАналитикам  Цикл
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ОбластьАналитика.Параметры.КодАналитики=Элемент.Ключ+": ";
			ОбластьАналитика.Параметры.ЗначениеАналитики=Элемент.Значение;
			
			ТаблДок.Вывести(ОбластьАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры // ВывестиДанныеАналитик() 

Функция ВернутьТабличныйДокументРасшифровки(АналитикаВверху, ОтборПоАналитикам = Неопределено, МассивПоказателей) Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;		
	ВывестиДанныеАналитик(ТаблДок,ОтборПоАналитикам);
		
		
	// Раскрытие по аналитике консолидации.
	Если СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация Тогда
		
		Если ОтборПоАналитикам <> Неопределено Тогда
			ПолучитьРасшифровкуКонсолидированныхПоказателей(Истина, ОтборПоАналитикам);
		ИначеЕсли НЕ ЗначениеЗаполнено(мТабРасшифровкиПоказателей) Тогда
			ПолучитьРасшифровкуКонсолидированныхПоказателей(Истина);
		ИначеЕсли мТабрасшифровкиПоказателей.Колонки.Найти("Доля") = Неопределено
			ИЛИ мТабрасшифровкиПоказателей.Колонки.Найти("Регистратор") = Неопределено Тогда
			
			ПолучитьРасшифровкуКонсолидированныхПоказателей(Истина, ОтборПоАналитикам);
		КонецЕсли;
		
		Если ТипЗнч(мТабрасшифровкиПоказателей)=Тип("ТаблицаЗначений") И мТабрасшифровкиПоказателей.Количество()>0 Тогда
			ОтобразитьРасшифровкуКонсолидированныхПоказателей(ТаблДок, АналитикаВверху, , ОтборПоАналитикам, МассивПоказателей);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиЭлиминация Тогда
		
		ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета();
		мТабРасшифровкиЭлиминация=мПоказателиРаскрытия.СкопироватьКолонки();
		мТабРасшифровкиЭлиминация.Колонки.Добавить("Организация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Организации"));
		мТабРасшифровкиЭлиминация.Колонки.Добавить("Регистратор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));
		ОбъектРасчета.Вставить("мТабРасшифровкиЭлиминация",мТабРасшифровкиЭлиминация);
		
		ПересчетПоказателейУХ.ВыполнитьПростуюЭлиминацию(ОбъектРасчета,Истина);
		
		ОбъектРасчета.мТабРасшифровкиЭлиминация.Свернуть("Показатель,Организация,Регистратор","Значение");
		мТабРасшифровкиПоказателей=ОбъектРасчета.мТабРасшифровкиЭлиминация;
		
		ОтобразитьРасшифровкуЭлиминирующихПоказателей(ТаблДок, АналитикаВверху, , ОтборПоАналитикам, МассивПоказателей);
		
	КонецЕсли;
	
	// Раскрытие по аналитикам.
	
	Если СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам Тогда
				
		ДобавитьВКэшРасшифровок("Аналитики",ОтборПоАналитикам, МассивПоказателей);
		ОтобразитьРасшифровкуПоказателейСвернутыхПоАналитике(ТаблДок, АналитикаВверху, ОтборПоАналитикам, МассивПоказателей);
		
	КонецЕсли;
	
	Если СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПроектам Тогда
		
		ПолучитьРасшифровкуПоказателя(МассивПоказателей, "ОрганизацияПроекты", ОтборПоАналитикам);
		ОтобразитьРасшифровкуПоказателейСвернутыхПоПроектамОрганизации(ТаблДок, АналитикаВверху, ОтборПоАналитикам, МассивПоказателей);
		
	КонецЕсли;
	
	Если СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоОрганизациямПроекта Тогда
		
		ПолучитьРасшифровкуПоказателя(МассивПоказателей, "ПроектОрганизации", ОтборПоАналитикам);
		ОтобразитьРасшифровкуПоказателейСвернутыхПоОрганизациямПроекта(ТаблДок, АналитикаВверху, ОтборПоАналитикам, МассивПоказателей);
		
	КонецЕсли;
	
	// Раскрытие по периодам.
	
	Если СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду Тогда
		
		ПолучитьРасшифровкуПоказателя(МассивПоказателей, "Периоды", ОтборПоАналитикам);
		ОтобразитьРасшифровкуПоказателейСвернутыхПоПериоду(ТаблДок, АналитикаВверху, ОтборПоАналитикам, МассивПоказателей);
		
	КонецЕсли;
		
	Возврат ТаблДок;	
	
КонецФункции

// Возвращает массив ссылок показателей, которые отсутствуют в таблице мТабРасшифровкиПоказателей.
//
Функция ВернутьМассивПоказателейКоторыеНужноПрочитатьИзРегистра(МассивПоказателей)
	Если ТипЗнч(мТабРасшифровкиПоказателей) <> Тип("ТаблицаЗначений") Тогда
		Возврат МассивПоказателей;
	КонецЕсли;
	
	ТекМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		
		Если мТабРасшифровкиПоказателей.Найти(ЭлементМассива, "Показатель") = Неопределено Тогда
			ТекМассив.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекМассив;
	
КонецФункции

// Процедура объединяет существующие данные из кэша с полученными запросом.
Процедура ДобавитьВКэшРасшифровок(ТипРасшифровки, ОтборПоАналитикам = Неопределено, МассивПоказателей)
	
	ТекМассивПоказателей = ВернутьМассивПоказателейКоторыеНужноПрочитатьИзРегистра(МассивПоказателей);
	
	Если ТипЗнч(мТабРасшифровкиПоказателей) <> Тип("ТаблицаЗначений") Тогда
		ПолучитьРасшифровкуПоказателя(ТекМассивПоказателей, ТипРасшифровки, ОтборПоАналитикам);
		Возврат;
	КонецЕсли;
	
	Если мТабРасшифровкиПоказателей.Количество() = 0 Тогда
		ПолучитьРасшифровкуПоказателя(ТекМассивПоказателей, ТипРасшифровки, ОтборПоАналитикам);
		Возврат;
	КонецЕсли;
	
	ВремТаблица = мТабРасшифровкиПоказателей.Скопировать();
	ПолучитьРасшифровкуПоказателя(ТекМассивПоказателей, ТипРасшифровки, ОтборПоАналитикам);
	
	Для Каждого Запись Из мТабРасшифровкиПоказателей Цикл
		ЗаполнитьЗначенияСвойств(ВремТаблица.Добавить(), Запись);
	КонецЦикла;
	
	мТабРасшифровкиПоказателей = ВремТаблица;
	
	Если ТипРасшифровки = "Периметр" Тогда
		мТабРасшифровкиПоказателей.Индексы.Добавить("Показатель, Организация");
		мТабРасшифровкиПоказателей.Сортировать("Показатель, Организация");
	КонецЕсли;
	
	Если ТипРасшифровки = "Периоды" Тогда
		мТабРасшифровкиПоказателей.Индексы.Добавить("Показатель, Период");
		мТабРасшифровкиПоказателей.Сортировать("Показатель, Период");
	КонецЕсли;
	
КонецПроцедуры   

Функция ПолучитьИтогДляРасшифровки(Показатель)

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Показатель",Показатель);
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		
		СтруктураПоиска.Вставить("Активность",Истина);
		
	КонецЕсли;
	
	Возврат мТабРасшифровкиПоказателей.Скопировать(СтруктураПоиска).Итог("ИтоговоеЗначение");	
	
КонецФункции // ПолучитьИтогДляРасшифровки() 

Процедура ОтобразитьРасшифровкуКонсолидированныхПоказателей(ТаблДок, АналитикаВверху, Сжатый = Истина, ОтборПоАналитикам = Неопределено, МассивПоказателей)
		
	ФорматОтображения = "ЧЦ=18";
	СтарыйФормат      = мТабРасшифровкиПоказателей.Колонки.Найти("ИндексПрисутствияВПериоде") = Неопределено;
	
	Если ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		ФорматОтображения = ФорматОтображения + ";ЧДЦ=3;ЧН=0.000";
	ИначеЕсли ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		ФорматОтображения = ФорматОтображения + ";ЧДЦ=0;ЧС=3;ЧН=0";
	ИначеЕсли ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ФорматОтображения = ФорматОтображения + ";ЧДЦ=0;ЧС=6;ЧН=0";
	КонецЕсли;
	
	Макет = ПолучитьМакет("НовыйМакет");
	
	ТаблОрганизаций   = мТабРасшифровкиПоказателей.Скопировать(, "Организация, Доля,Активность" + ?(СтарыйФормат, "", ", МетодКонсолидации, ИндексПрисутствияВПериоде"));
	ТаблОрганизаций.Свернуть("Организация, Доля,Активность" + ?(СтарыйФормат, "", ", МетодКонсолидации, ИндексПрисутствияВПериоде"));
	ТаблОрганизаций.Сортировать("Организация");
	МассивОрганизаций = ТаблОрганизаций.ВыгрузитьКолонку("Организация");
	
	ОбластьЗаголовокСтроки  = Макет.ПолучитьОбласть("ЗаголовокСтроки"
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("ЗаголовокКолонки" 
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	ОбластьДанныеСтроки     = Макет.ПолучитьОбласть("ДанныеСтроки"
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	ОбластьДанныеКолонки    = Макет.ПолучитьОбласть("ДанныеКолонки" 
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	
	Структура = Новый Структура("Наименование", Нстр("ru = 'Консолидированное значение показателя'"));
	Структура.Вставить("НачЗначение", "Исходное");
	Структура.Вставить("Корректировка", "Корректировка");
	Структура.Вставить("ИтогЗначение", "Итог");
	
	СтруктураПоиска = Новый Структура("Показатель, Организация");
	
	Если АналитикаВверху Тогда
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Показатель / Организация'");
		ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
		ТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
	Иначе
		ТекТаблДок = Новый ТабличныйДокумент;
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Организация / Показатель'");
		ТекТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
		ТекТаблДок.Вывести(ОбластьДанныеСтроки);
	КонецЕсли;
		
	Если СтарыйФормат тогда
		ДополнениеНаименования = Нстр("ru = '
		| Доля = %Доля%%'");
	Иначе
		ДополнениеНаименования = Нстр("ru = '  
		| Метод консолидации: %МетодКонсолидации%
		| Доля = %Доля%%  
		| Индекс присутствия = %ИндексПрисутствияВПериоде%'");
	КонецЕсли;
	
	ЦветФонаАктивный=Новый Цвет(255,255,255);
	ЦветФонаНеАктивный=?(Константы.ПроверятьУтверждениеДанных.Получить(),Новый Цвет(255,0,0),Новый Цвет(255,255,255));
	
	Для Каждого ТекОрганизация Из ТаблОрганизаций Цикл
				
		ДополнениеНаименования = СтрЗаменить(ДополнениеНаименования, "%МетодКонсолидации%", ТекОрганизация.МетодКонсолидации);
		ДополнениеНаименования = СтрЗаменить(ДополнениеНаименования, "%Доля%", ТекОрганизация.Доля);
		ДополнениеНаименования = СтрЗаменить(ДополнениеНаименования, "%ИндексПрисутствияВПериоде%", текОрганизация.ИндексПрисутствияВПериоде);
		
		Структура.Наименование = ТекОрганизация.Организация.Наименование + ДополнениеНаименования;
		
		Если АналитикаВверху Тогда
			ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
			ОбластьЗаголовокКолонки.ТекущаяОбласть.ЦветФона=?(ТекОрганизация.Активность,ЦветФонаАктивный,ЦветФонаНеАктивный);
			ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
		Иначе
			ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
			ОбластьДанныеСтроки.ТекущаяОбласть.ЦветФона=?(ТекОрганизация.Активность,ЦветФонаАктивный,ЦветФонаНеАктивный);
			ТекТаблДок.Вывести(ОбластьДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ АналитикаВверху Тогда
		ТаблДок.Присоединить(ТекТаблДок);
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из МассивПоказателей Цикл
		
		СтрокаИсх = мСоответствиеДляПоискаПоСсылке[ТекПоказатель.Ссылка];
		
		ИтогПоказатель=ПолучитьИтогДляРасшифровки(ТекПоказатель.Ссылка);		
		ОбластьДанныеКолонки.Параметры.ИтогЗначение = Формат(ИтогПоказатель, ФорматОтображения);
						
		Если НЕ Сжатый Тогда
			ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Новый Структура("Показатель, Отчет", ТекПоказатель.Ссылка, Ссылка);
		КонецЕсли;
		
		Если АналитикаВверху Тогда
			ОбластьДанныеСтроки.Параметры.Значение = СтрокаИсх.Наименование;
			ТаблДок.Вывести(ОбластьДанныеСтроки);
			ТаблДок.Присоединить(ОбластьДанныеКолонки);
		Иначе
			ТекТаблДок.Очистить();
			ОбластьЗаголовокКолонки.Параметры.Заголовок = СтрокаИсх.Наименование;
			ТекТаблДок.Вывести(ОбластьЗаголовокКолонки);
			ТекТаблДок.Вывести(ОбластьДанныеКолонки);
		КонецЕсли;
		
		Если НЕ Сжатый Тогда
			ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Неопределено;
		КонецЕсли;
		
		Для Каждого ТекОрганизация Из МассивОрганизаций Цикл
			
			СтруктураПоиска.Показатель  = ТекПоказатель.Ссылка;
			СтруктураПоиска.Организация = ТекОрганизация;
			
			ВыбрСтроки = мТабРасшифровкиПоказателей.НайтиСтроки(СтруктураПоиска);
			
			ТекРегистратор=Неопределено;
			
			ТекИтоговоеЗначение=0;
			ТекЗначение=0;
			ТекАктивность=Неопределено;
			
			ЕстьДанные=Ложь;
			
			Для Каждого Строка ИЗ ВыбрСтроки Цикл
				
				ЕстьДанные=Истина;
				
				ТекИтоговоеЗначение=ТекИтоговоеЗначение+Строка.ИтоговоеЗначение;
				ТекЗначение=ТекЗначение+Строка.Значение;
				
				Если ТипЗнч(Строка.Регистратор)=Тип("ДокументСсылка.НастраиваемыйОтчет")
					И ЗначениеЗаполнено(Строка.Регистратор) Тогда
					
					ТекРегистратор=Строка.Регистратор;
					
				КонецЕсли;
				
				Если ТекАктивность=Неопределено Тогда
					
					ТекАктивность=Строка.Активность;
					
				Иначе
					
					ТекАктивность=ТекАктивность И Строка.Активность;
										
				КонецЕсли;			
				
			КонецЦикла;
						
			
			Структура.ИтогЗначение = ?(ЕстьДанные, Формат(ТекИтоговоеЗначение, ФорматОтображения) + "
			|/" + Формат(ТекЗначение, ФорматОтображения) , "");
					
			Если ЕстьДанные Тогда
				
				ОбластьДанныеКолонки.ТекущаяОбласть.ЦветФона=?(ТекАктивность,ЦветФонаАктивный,ЦветФонаНеАктивный);
				
			КонецЕсли;
			
			ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
			
			Если НЕ Сжатый Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ТекРегистратор);
				Если ОтборПоАналитикам <> Неопределено Тогда
					ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
				КонецЕсли;
			ИначеЕсли ЕстьДанные Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаИтогЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ТекРегистратор);
				Если ОтборПоАналитикам <> Неопределено Тогда
					ОбластьДанныеКолонки.Параметры.РасшифровкаИтогЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
				КонецЕсли;
			КонецЕсли;
			
			Если АналитикаВверху Тогда
				ТаблДок.Присоединить(ОбластьДанныеКолонки);
			Иначе
				ТекТаблДок.Вывести(ОбластьДанныеКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ АналитикаВверху Тогда
			ТаблДок.Присоединить(ТекТаблДок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если АналитикаВверху Тогда
		ТаблДок.ФиксацияСлева = 2;
	Иначе
		ТаблДок.ФиксацияСверху = 2;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьРасшифровкуЭлиминирующихПоказателей(ТаблДок, АналитикаВверху, Сжатый = Истина, ОтборПоАналитикам = Неопределено, МассивПоказателей)
	
	ФорматОтображения = "ЧЦ=18";
	
	Если ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		ФорматОтображения = ФорматОтображения + ";ЧДЦ=3;ЧН=0.000";
	ИначеЕсли ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		ФорматОтображения = ФорматОтображения + ";ЧДЦ=0;ЧС=3;ЧН=0";
	ИначеЕсли ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ФорматОтображения = ФорматОтображения + ";ЧДЦ=0;ЧС=6;ЧН=0";
	КонецЕсли;
	
	Макет = ПолучитьМакет("НовыйМакет");
	
	ТаблОрганизаций   = мТабРасшифровкиПоказателей.Скопировать(, "Организация");
	ТаблОрганизаций.Свернуть("Организация");
	ТаблОрганизаций.Сортировать("Организация");
	МассивОрганизаций = ТаблОрганизаций.ВыгрузитьКолонку("Организация");
	
	ОбластьЗаголовокСтроки  = Макет.ПолучитьОбласть("ЗаголовокСтроки"
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("ЗаголовокКолонки" 
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	ОбластьДанныеСтроки     = Макет.ПолучитьОбласть("ДанныеСтроки"
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	ОбластьДанныеКолонки    = Макет.ПолучитьОбласть("ДанныеКолонки" 
	+ ?(АналитикаВверху, "", "_В")
	+ ?(Сжатый, "_С", ""));
	
	Структура = Новый Структура("Наименование", Нстр("ru = 'Элиминирущее значение показателя'"));
	Структура.Вставить("ИтогЗначение", "Значение");
		
	СтруктураПоиска = Новый Структура("Показатель, Организация");
	
	Если АналитикаВверху Тогда
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Показатель / Организация'");
		ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
		ТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
	Иначе
		ТекТаблДок = Новый ТабличныйДокумент;
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Организация / Показатель'");
		ТекТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
		ТекТаблДок.Вывести(ОбластьДанныеСтроки);
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из ТаблОрганизаций Цикл
		Структура.Наименование = ТекОрганизация.Организация.Наименование;
		Если АналитикаВверху Тогда
			ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
			ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
		Иначе
			ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
			ТекТаблДок.Вывести(ОбластьДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ АналитикаВверху Тогда
		ТаблДок.Присоединить(ТекТаблДок);
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из МассивПоказателей Цикл
		Строка = мТабРасшифровкиПоказателей.Найти(ТекПоказатель.Ссылка, "Показатель");
		
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИсх = мСоответствиеДляПоискаПоСсылке[ТекПоказатель.Ссылка];
		
		Если ОтборПоАналитикам = Неопределено Тогда
			
			ОбластьДанныеКолонки.Параметры.ИтогЗначение = Формат(СтрокаИсх.Значение, ФорматОтображения);
			
		Иначе
			
			ОбластьДанныеКолонки.Параметры.ИтогЗначение = Формат(ПолучитьЗначениеАналитик(ТекПоказатель.Ссылка,ОтборПоАналитикам), ФорматОтображения);
			
		КонецЕсли;
		
		Если НЕ Сжатый Тогда
			ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Новый Структура("Показатель, Отчет", ТекПоказатель.Ссылка, Ссылка);
		КонецЕсли;
		
		Если АналитикаВверху Тогда
			ОбластьДанныеСтроки.Параметры.Значение = СтрокаИсх.Наименование;
			ТаблДок.Вывести(ОбластьДанныеСтроки);
			ТаблДок.Присоединить(ОбластьДанныеКолонки);
		Иначе
			ТекТаблДок.Очистить();
			ОбластьЗаголовокКолонки.Параметры.Заголовок = СтрокаИсх.Наименование;
			ТекТаблДок.Вывести(ОбластьЗаголовокКолонки);
			ТекТаблДок.Вывести(ОбластьДанныеКолонки);
		КонецЕсли;
		
		Если НЕ Сжатый Тогда
			ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Неопределено;
		КонецЕсли;
		
		Для Каждого ТекОрганизация Из МассивОрганизаций Цикл
			
			СтруктураПоиска.Показатель  = ТекПоказатель.Ссылка;
			СтруктураПоиска.Организация = ТекОрганизация;
			
			ВыбрСтроки = мТабРасшифровкиПоказателей.НайтиСтроки(СтруктураПоиска);
			
			ЕстьДанные = ВыбрСтроки.Количество() <> 0;
			
			Структура.ИтогЗначение = ?(ЕстьДанные, Формат(ВыбрСтроки[0].Значение, ФорматОтображения), "");
			
			ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
			
			Если НЕ Сжатый Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ВыбрСтроки[0].Регистратор);
				Если ОтборПоАналитикам <> Неопределено Тогда
					ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
				КонецЕсли;
			ИначеЕсли ЕстьДанные Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаИтогЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ВыбрСтроки[0].Регистратор);
				Если ОтборПоАналитикам <> Неопределено Тогда
					ОбластьДанныеКолонки.Параметры.РасшифровкаИтогЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
				КонецЕсли;
			КонецЕсли;
			
			Если АналитикаВверху Тогда
				ТаблДок.Присоединить(ОбластьДанныеКолонки);
			Иначе
				ТекТаблДок.Вывести(ОбластьДанныеКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ АналитикаВверху Тогда
			ТаблДок.Присоединить(ТекТаблДок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если АналитикаВверху Тогда
		ТаблДок.ФиксацияСлева = 2;
	Иначе
		ТаблДок.ФиксацияСверху = 2;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеАналитик(Показатель,ОтборПоАналитикам)
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Показатель",Показатель);

	Для Каждого Элемент ИЗ ОтборПоАналитикам Цикл
		
		Если Элемент.Значение=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураОтбора.Вставить(Элемент.Ключ,Элемент.Значение);
		
	КонецЦикла;
	
	ТабАналитик=мПоказателиРаскрытия.Скопировать(СтруктураОтбора);
	Возврат ТабАналитик.Итог("Значение");
	
КонецФункции // ПолучитьЗначениеАналитик()

Процедура ОтобразитьРасшифровкуПоказателейСвернутыхПоПериоду(ТаблДок, АналитикаВверху, ОтборПоАналитикам = Неопределено, МассивПоказателей)
	
	Макет = ПолучитьМакет("НовыйМакет");
	
	//МассивПоказателей = мМассивПоказателей;
	//МассивПоказателей = мТабРасшифровкиПоказателей.ВыгрузитьКолонку("Показатель");
	ТаблПериодов   = мТабРасшифровкиПоказателей.Скопировать(, "Период");
	ТаблПериодов.Свернуть("Период");
	МассивПериодов = ТаблПериодов.ВыгрузитьКолонку("Период");
	
	ОбластьЗаголовокСтроки  = Макет.ПолучитьОбласть("ЗаголовокСтроки" + ?(АналитикаВверху, "", "_В"));
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("ЗаголовокКолонки" + ?(АналитикаВверху, "", "_В"));
	ОбластьДанныеСтроки     = Макет.ПолучитьОбласть("ДанныеСтроки" + ?(АналитикаВверху, "", "_В"));
	ОбластьДанныеКолонки    = Макет.ПолучитьОбласть("ДанныеКолонки" + ?(АналитикаВверху, "", "_В"));
	
	Структура = Новый Структура("Наименование", Нстр("ru = 'Значение показателя свернутое по периоду'"));
	Структура.Вставить("НачЗначение", "Значение");
	Структура.Вставить("Корректировка","Корректировка");
	Структура.Вставить("ИтогЗначение", "ИтоговоеЗначение");
	
	СтруктураПоиска = Новый Структура("Показатель, Период");
	
	Если АналитикаВверху Тогда
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Показатель / Период'");
		ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
		ТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
	Иначе
		ТекТаблДок = Новый ТабличныйДокумент;
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Период / Показатель'");
		ТекТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
		ТекТаблДок.Вывести(ОбластьДанныеСтроки);
	КонецЕсли;
	
	Для Каждого ТекПериод Из МассивПериодов Цикл
		Структура.Наименование = ТекПериод.Наименование;
		Структура.Корректировка = "Корректировка";
		Если АналитикаВверху Тогда
			ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
			ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
		Иначе
			ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
			ТекТаблДок.Вывести(ОбластьДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ АналитикаВверху Тогда
		ТаблДок.Присоединить(ТекТаблДок);
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из МассивПоказателей Цикл
		Строка = мТабРасшифровкиПоказателей.Найти(ТекПоказатель.Ссылка, "Показатель");
		
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Структура.НачЗначение   = Строка.ТекЗначение;
		Структура.Корректировка = Строка.ТекКорректировка;
		Структура.ИтогЗначение  = ?(ЗначениеЗаполнено(Строка.ТекЗначение), Строка.ТекЗначение, 0) + ?(ЗначениеЗаполнено(Строка.ТекКорректировка),Строка.ТекКорректировка, 0) ;
		
		ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
		ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Новый Структура("Показатель, Отчет", ТекПоказатель.Ссылка, Ссылка);
		Если АналитикаВверху Тогда
			ОбластьДанныеСтроки.Параметры.Значение = ТекПоказатель.Наименование;
			ТаблДок.Вывести(ОбластьДанныеСтроки);
			ТаблДок.Присоединить(ОбластьДанныеКолонки);
		Иначе
			ТекТаблДок.Очистить();
			ОбластьЗаголовокКолонки.Параметры.Заголовок = ТекПоказатель.Наименование;
			ТекТаблДок.Вывести(ОбластьЗаголовокКолонки);
			ТекТаблДок.Вывести(ОбластьДанныеКолонки);
		КонецЕсли;
		ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Неопределено;
		
		Для Каждого ТекПериод Из МассивПериодов Цикл
			
			СтруктураПоиска.Показатель  	= ТекПоказатель.Ссылка;
			СтруктураПоиска.Период		 	= ТекПериод;
			
			ВыбрСтроки = мТабРасшифровкиПоказателей.НайтиСтроки(СтруктураПоиска);
			
			ЕстьДанные = ВыбрСтроки.Количество() <> 0;
			Структура.НачЗначение = ?(ЕстьДанные, ВыбрСтроки[0].Значение, "");
			Структура.Корректировка = ?(ЕстьДанные, ВыбрСтроки[0].Корректировка, "");
			Структура.ИтогЗначение = ?(ЕстьДанные, Строка(ВыбрСтроки[0].ИтоговоеЗначение),"");
			
			ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
			ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ВыбрСтроки[0].Регистратор);
			
			Если ОтборПоАналитикам <> Неопределено Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
			КонецЕсли;
			
			Если АналитикаВверху Тогда
				ТаблДок.Присоединить(ОбластьДанныеКолонки);
			Иначе
				ТекТаблДок.Вывести(ОбластьДанныеКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ АналитикаВверху Тогда
			ТаблДок.Присоединить(ТекТаблДок);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтобразитьРасшифровкуПоказателейСвернутыхПоОрганизациямПроекта(ТаблДок, АналитикаВверху, ОтборПоАналитикам = Неопределено, МассивПоказателей)
	
	Макет = ПолучитьМакет("НовыйМакет");
	
	//МассивПоказателей = мМассивПоказателей;
	//МассивПоказателей = мТабРасшифровкиПоказателей.ВыгрузитьКолонку("Показатель");
	ТаблОрганизаций   = мТабРасшифровкиПоказателей.Скопировать(, "Организация");
	ТаблОрганизаций.Свернуть("Организация");
	МассивОрганизаций = ТаблОрганизаций.ВыгрузитьКолонку("Организация");
	
	ОбластьЗаголовокСтроки  = Макет.ПолучитьОбласть("ЗаголовокСтроки" + ?(АналитикаВверху, "", "_В"));
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("ЗаголовокКолонки" + ?(АналитикаВверху, "", "_В"));
	ОбластьДанныеСтроки     = Макет.ПолучитьОбласть("ДанныеСтроки" + ?(АналитикаВверху, "", "_В"));
	ОбластьДанныеКолонки    = Макет.ПолучитьОбласть("ДанныеКолонки" + ?(АналитикаВверху, "", "_В"));
	
	Структура = Новый Структура("Наименование", Нстр("ru = 'Значение показателя проекта, свернутое по организациям'"));
	Структура.Вставить("НачЗначение", "Значение");
	Структура.Вставить("Корректировка","Корректировка");
	Структура.Вставить("ИтогЗначение", "ИтоговоеЗначение");
	
	СтруктураПоиска = Новый Структура("Показатель, Организация");
	
	Если АналитикаВверху Тогда
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Показатель / Организация'");
		ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
		ТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
	Иначе
		ТекТаблДок = Новый ТабличныйДокумент;
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Организация / Показатель'");
		ТекТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
		ТекТаблДок.Вывести(ОбластьДанныеСтроки);
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из МассивОрганизаций Цикл
		Структура.Наименование = ТекОрганизация.Наименование;
		Структура.Корректировка = "Корректировка";
		Если АналитикаВверху Тогда
			ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
			ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
		Иначе
			ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
			ТекТаблДок.Вывести(ОбластьДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ АналитикаВверху Тогда
		ТаблДок.Присоединить(ТекТаблДок);
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из МассивПоказателей Цикл
		Строка = мТабРасшифровкиПоказателей.Найти(ТекПоказатель.Ссылка, "Показатель");
		
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Структура.НачЗначение   = Строка.ТекЗначение;
		Структура.Корректировка = Строка.ТекКорректировка;
		Структура.ИтогЗначение  = ?(ЗначениеЗаполнено(Строка.ТекЗначение), Строка.ТекЗначение, 0) + ?(ЗначениеЗаполнено(Строка.ТекКорректировка),Строка.ТекКорректировка, 0) ;
		
		ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
		ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Новый Структура("Показатель, Отчет", ТекПоказатель.Ссылка, Ссылка);
		Если АналитикаВверху Тогда
			ОбластьДанныеСтроки.Параметры.Значение = ТекПоказатель.Наименование;
			ТаблДок.Вывести(ОбластьДанныеСтроки);
			ТаблДок.Присоединить(ОбластьДанныеКолонки);
		Иначе
			ТекТаблДок.Очистить();
			ОбластьЗаголовокКолонки.Параметры.Заголовок = ТекПоказатель.Наименование;
			ТекТаблДок.Вывести(ОбластьЗаголовокКолонки);
			ТекТаблДок.Вывести(ОбластьДанныеКолонки);
		КонецЕсли;
		ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Неопределено;
		
		Для Каждого ТекОрганизация Из МассивОрганизаций Цикл
			
			СтруктураПоиска.Показатель  	= ТекПоказатель.Ссылка;
			СтруктураПоиска.Организация		= ТекОрганизация;
			
			ВыбрСтроки = мТабРасшифровкиПоказателей.НайтиСтроки(СтруктураПоиска);
			
			ЕстьДанные = ВыбрСтроки.Количество() <> 0;
			Структура.НачЗначение = ?(ЕстьДанные, ВыбрСтроки[0].Значение, "");
			Структура.Корректировка = ?(ЕстьДанные, ВыбрСтроки[0].Корректировка, "");
			Структура.ИтогЗначение = ?(ЕстьДанные, Строка(ВыбрСтроки[0].ИтоговоеЗначение),"");
			
			ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
			ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ВыбрСтроки[0].Регистратор);
			
			Если ОтборПоАналитикам <> Неопределено Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
			КонецЕсли;
			
			Если АналитикаВверху Тогда
				ТаблДок.Присоединить(ОбластьДанныеКолонки);
			Иначе
				ТекТаблДок.Вывести(ОбластьДанныеКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ АналитикаВверху Тогда
			ТаблДок.Присоединить(ТекТаблДок);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтобразитьРасшифровкуПоказателейСвернутыхПоПроектамОрганизации(ТаблДок, АналитикаВверху, ОтборПоАналитикам = Неопределено, МассивПоказателей)
	
	Макет = ПолучитьМакет("НовыйМакет");
	
	//МассивПоказателей = мМассивПоказателей;
	//МассивПоказателей = мТабРасшифровкиПоказателей.ВыгрузитьКолонку("Показатель");
	ТаблПроектов   = мТабРасшифровкиПоказателей.Скопировать(, "Проект");
	ТаблПроектов.Свернуть("Проект");
	МассивПроектов = ТаблПроектов.ВыгрузитьКолонку("Проект");
	
	ОбластьЗаголовокСтроки  = Макет.ПолучитьОбласть("ЗаголовокСтроки" + ?(АналитикаВверху, "", "_В"));
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("ЗаголовокКолонки" + ?(АналитикаВверху, "", "_В"));
	ОбластьДанныеСтроки     = Макет.ПолучитьОбласть("ДанныеСтроки" + ?(АналитикаВверху, "", "_В"));
	ОбластьДанныеКолонки    = Макет.ПолучитьОбласть("ДанныеКолонки" + ?(АналитикаВверху, "", "_В"));
	
	Структура = Новый Структура("Наименование", Нстр("ru = 'Значение показателя, свернутое по проектам'"));
	Структура.Вставить("НачЗначение", "Значение");
	Структура.Вставить("Корректировка","Корректировка");
	Структура.Вставить("ИтогЗначение", "ИтоговоеЗначение");
	
	СтруктураПоиска = Новый Структура("Показатель, Проект");
	
	Если АналитикаВверху Тогда
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Показатель / Проект'");
		ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
		ТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
	Иначе
		ТекТаблДок = Новый ТабличныйДокумент;
		ОбластьЗаголовокСтроки.Параметры.Заголовок = Нстр("ru = 'Проект / Показатель'");
		ТекТаблДок.Вывести(ОбластьЗаголовокСтроки);
		ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
		ТекТаблДок.Вывести(ОбластьДанныеСтроки);
	КонецЕсли;
	
	Для Каждого ТекПроект Из МассивПроектов Цикл
		Структура.Наименование = ТекПроект.Наименование;
		Структура.Корректировка = "Корректировка";
		Если АналитикаВверху Тогда
			ОбластьЗаголовокКолонки.Параметры.Заполнить(Структура);
			ТаблДок.Присоединить(ОбластьЗаголовокКолонки);
		Иначе
			ОбластьДанныеСтроки.Параметры.Заполнить(Структура);
			ТекТаблДок.Вывести(ОбластьДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ АналитикаВверху Тогда
		ТаблДок.Присоединить(ТекТаблДок);
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из МассивПоказателей Цикл
		Строка = мТабРасшифровкиПоказателей.Найти(ТекПоказатель.Ссылка, "Показатель");
		
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Структура.НачЗначение   = Строка.ТекЗначение;
		Структура.Корректировка = Строка.ТекКорректировка;
		Структура.ИтогЗначение  = ?(ЗначениеЗаполнено(Строка.ТекЗначение), Строка.ТекЗначение, 0) + ?(ЗначениеЗаполнено(Строка.ТекКорректировка),Строка.ТекКорректировка, 0) ;
		
		ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
		ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Новый Структура("Показатель, Отчет", ТекПоказатель.Ссылка, Ссылка);
		Если АналитикаВверху Тогда
			ОбластьДанныеСтроки.Параметры.Значение = ТекПоказатель.Наименование;
			ТаблДок.Вывести(ОбластьДанныеСтроки);
			ТаблДок.Присоединить(ОбластьДанныеКолонки);
		Иначе
			ТекТаблДок.Очистить();
			ОбластьЗаголовокКолонки.Параметры.Заголовок = ТекПоказатель.Наименование;
			ТекТаблДок.Вывести(ОбластьЗаголовокКолонки);
			ТекТаблДок.Вывести(ОбластьДанныеКолонки);
		КонецЕсли;
		ОбластьДанныеКолонки.Параметры.РасшифровкаКорректировка = Неопределено;
		
		Для Каждого ТекПроект Из МассивПроектов Цикл
			
			СтруктураПоиска.Показатель  	= ТекПоказатель.Ссылка;
			СтруктураПоиска.Проект			= ТекПроект;
			
			ВыбрСтроки = мТабРасшифровкиПоказателей.НайтиСтроки(СтруктураПоиска);
			
			ЕстьДанные = ВыбрСтроки.Количество() <> 0;
			Структура.НачЗначение = ?(ЕстьДанные, ВыбрСтроки[0].Значение, "");
			Структура.Корректировка = ?(ЕстьДанные, ВыбрСтроки[0].Корректировка, "");
			Структура.ИтогЗначение = ?(ЕстьДанные, Строка(ВыбрСтроки[0].ИтоговоеЗначение),"");
			
			ОбластьДанныеКолонки.Параметры.Заполнить(Структура);
			ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение = Новый Структура("Показатель, Регистратор", ТекПоказатель.Ссылка, ВыбрСтроки[0].Регистратор);
			
			Если ОтборПоАналитикам <> Неопределено Тогда
				ОбластьДанныеКолонки.Параметры.РасшифровкаНачЗначение.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
			КонецЕсли;
			
			Если АналитикаВверху Тогда
				ТаблДок.Присоединить(ОбластьДанныеКолонки);
			Иначе
				ТекТаблДок.Вывести(ОбластьДанныеКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ АналитикаВверху Тогда
			ТаблДок.Присоединить(ТекТаблДок);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ЗаполнитьУровеньАналитики(ТаблДок, Линия, ЛинияТолстая, СоответствиеАналитик,Знач Уровень,Знач Смещение, СтруктураПоиска, ЧислоУровнейАналитики, АналитикаВверху, МассивПоказателей, ОтборПоАналитикам = Неопределено)
	
	
	Если Уровень < ЧислоУровнейАналитики Тогда
		
		Уровень = Уровень + 1;
		МассивНижнегоУровня = СоответствиеАналитик[Уровень];
		КоличествоСмещений  = 0;
		
		Для Каждого Элемент Из МассивНижнегоУровня Цикл
			СтруктураПоиска["Аналитика" + Уровень] = Элемент;
			ТекСмещение = ЗаполнитьУровеньАналитики(ТаблДок, Линия, ЛинияТолстая
			, СоответствиеАналитик
			, Уровень
			, Смещение + КоличествоСмещений
			, СтруктураПоиска
			, ЧислоУровнейАналитики
			, АналитикаВверху
			, МассивПоказателей
			, ОтборПоАналитикам);
			Если ТекСмещение > 0 Тогда
				
				Если АналитикаВверху Тогда
					ТекОбласть = ТаблДок.Область(Уровень, Смещение + КоличествоСмещений, Уровень, Смещение + ТекСмещение + КоличествоСмещений - 1);
					ТекОбласть.Обвести(ЛинияТолстая, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
				Иначе
					ТекОбласть = ТаблДок.Область(Смещение + КоличествоСмещений, Уровень, Смещение + ТекСмещение + КоличествоСмещений - 1, Уровень);
					ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
				КонецЕсли;
				
				ТекОбласть.Объединить();
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТекОбласть.СодержитЗначение = Истина;
				ТекОбласть.Значение = Элемент.Наименование;
				КоличествоСмещений = КоличествоСмещений + ТекСмещение;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат КоличествоСмещений;
		
	Иначе
		
		ТекИнд = 0;
		
		Для Каждого Элемент Из МассивПоказателей Цикл
			СтруктураПоиска.Показатель = Элемент.Ссылка;
			НайденныеСтроки = мТабРасшифровкиПоказателей.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Возврат 0;
			Иначе
				
				Если АналитикаВверху Тогда
					ТекОбласть = ТаблДок.Область(Уровень + 1  + ТекИнд, Смещение, Уровень + 1 + ТекИнд, Смещение);
				Иначе
					ТекОбласть = ТаблДок.Область(Смещение, Уровень + 2  + ТекИнд, Смещение, Уровень + 2 + ТекИнд);
				КонецЕсли;
				
				ТекИнд  = ТекИнд + 1;
				ТекОбласть.СодержитЗначение = Истина;
				ТекОбласть.Значение         = НайденныеСтроки[0].ЗначениеОтчетовИсточников;
				ТекОбласть.Расшифровка      = Новый Структура("Показатель, Регистратор", Элемент, НайденныеСтроки[0].Регистратор);
				
				Если ТипЗнч(ОтборПоАналитикам) = Тип("Структура") Тогда
					ТекОбласть.Расшифровка.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
				КонецЕсли;
				
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
				
			КонецЕсли;
		КонецЦикла;
		
		Если Не АналитикаВверху Тогда
			ТекОбласть = ТаблДок.Область(Смещение, Уровень + 1, Смещение, Уровень + 1);
			ТекОбласть.ЦветФона = Новый Цвет(230, 230, 230);
			ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
		КонецЕсли;
		
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции

Процедура ОтобразитьРасшифровкуПоказателейСвернутыхПоАналитике(ТаблДок, АналитикаВверху, ОтборПоАналитикам = Неопределено, МассивПоказателей)
	
	Линия        = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияТолстая = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	ТекЧислоАналитик = 0;
	СоответствиеАналитик = Новый Соответствие;
	СтруктураПоиска = Новый Структура("Показатель");
	
	ТекТаблДок = Новый ТабличныйДокумент;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(Ссылка.ВидОтчета["ВидАналитики" + Инд]) Тогда
			ТекЧислоАналитик = ТекЧислоАналитик + 1;
			ТекТаблицаАналитик = мТабРасшифровкиПоказателей.Скопировать(, "Аналитика" + Инд);
			ТекТаблицаАналитик.Свернуть("Аналитика" + Инд);
			СтруктураПоиска.Вставить("Аналитика" + Инд);
			СоответствиеАналитик.Вставить(Инд, ТекТаблицаАналитик.ВыгрузитьКолонку("Аналитика" + Инд));
			
			Если АналитикаВверху Тогда
				ТекОбласть = ТекТаблДок.Область(Инд, 5, Инд, 5);
			Иначе
				ТекОбласть = ТекТаблДок.Область(1, Инд, 4, Инд);
				ТекОбласть.Объединить();
			КонецЕсли;
			
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ТекОбласть.Текст = "Аналитика " + Инд;
			ТекОбласть.Обвести(ЛинияТолстая, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
			ТекОбласть.ШиринаКолонки = 15;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если АналитикаВверху Тогда
		ТекОбласть = ТекТаблДок.Область(1, 1, ТекЧислоАналитик, 1);
		ТекОбласть.Объединить();
		ТекОбласть.ШиринаКолонки = 15;
	Иначе
		ТекОбласть = ТекТаблДок.Область(1, ТекЧислоАналитик + 1, 1, ТекЧислоАналитик + 1);
	КонецЕсли;
	
	ТекОбласть.Текст = "Показатель";
	ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ТекОбласть.Обвести(ЛинияТолстая, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
	ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
	
	Если АналитикаВверху Тогда
		ТекОбласть = ТекТаблДок.Область(1, 2, ТекЧислоАналитик, 2);
		ТекОбласть.Объединить();
		ТекОбласть.ШиринаКолонки = 12;
		ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ТекОбласть.Обвести(ЛинияТолстая, ЛинияТолстая, Линия, ЛинияТолстая);
	Иначе
		ТекОбласть = ТекТаблДок.Область(2, ТекЧислоАналитик + 1, 2, ТекЧислоАналитик + 1);
		ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
	КонецЕсли;
	
	ТекОбласть.Текст = "Исходное";
	ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Если АналитикаВверху Тогда
		ТекОбласть = ТекТаблДок.Область(1, 3, ТекЧислоАналитик, 3);
		ТекОбласть.Объединить();
		ТекОбласть.ШиринаКолонки = 12;
		ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ТекОбласть.Обвести(Линия, ЛинияТолстая, Линия, ЛинияТолстая);
	Иначе
		ТекОбласть = ТекТаблДок.Область(3, ТекЧислоАналитик + 1, 3, ТекЧислоАналитик + 1);
		ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
	КонецЕсли;
	
	ТекОбласть.Текст = "Корректировка";
	ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТекОбласть.ШиринаКолонки = 12;
	
	Если АналитикаВверху Тогда
		ТекОбласть = ТекТаблДок.Область(1, 4, ТекЧислоАналитик, 4);
		ТекОбласть.Объединить();
		ТекОбласть.ШиринаКолонки = 12;
		ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ТекОбласть.Обвести(Линия, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
	Иначе
		ТекОбласть = ТекТаблДок.Область(4, ТекЧислоАналитик + 1, 4, ТекЧислоАналитик + 1);
		ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
	КонецЕсли;
	
	ТекОбласть.Текст = "Итог";
	ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТекОбласть.ШиринаКолонки = 12;
	
	ТекИнд = ТекЧислоАналитик;
	
	Для Каждого Элемент Из МассивПоказателей Цикл
		ТекСтрока = мТабРасшифровкиПоказателей.Найти(Элемент.Ссылка, "Показатель");
		
		Если ТекСтрока <> Неопределено Тогда
			ТекИнд = ТекИнд + 1;
			
			Если АналитикаВверху Тогда
				ТекОбласть = ТекТаблДок.Область(ТекИнд, 1, ТекИнд, 1);
				ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
			Иначе
				ТекОбласть = ТекТаблДок.Область(1, ТекИнд + 1, 1, ТекИнд + 1);
				ТекОбласть.Обвести(Линия, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
			КонецЕсли;
			
			ТекОбласть.СодержитЗначение = Истина;
			ТекОбласть.Значение = ТекСтрока.Показатель;
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			
			
			Если АналитикаВверху Тогда
				ТекОбласть = ТекТаблДок.Область(ТекИнд, 2, ТекИнд, 2);
				ТекОбласть.Обвести(Линия, Линия, Линия, Линия);
			Иначе
				ТекОбласть = ТекТаблДок.Область(2, ТекИнд + 1, 2, ТекИнд + 1);
				ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
			КонецЕсли;
			
			ТекОбласть.СодержитЗначение = Истина;
			ТекОбласть.Значение = ТекСтрока.Значение;
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			
			
			Если АналитикаВверху Тогда
				ТекОбласть = ТекТаблДок.Область(ТекИнд, 3, ТекИнд, 3);
				ТекОбласть.Обвести(Линия, Линия, Линия, Линия);
			Иначе
				ТекОбласть = ТекТаблДок.Область(3, ТекИнд + 1, 3, ТекИнд + 1);
				ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
			КонецЕсли;
			
			ТекОбласть.СодержитЗначение = Истина;
			ТекОбласть.Значение = ТекСтрока.Корректировка;
			ТекОбласть.Расшифровка = Новый Структура("Показатель, Отчет", Элемент.Ссылка, Ссылка);
			
			Если ОтборПоАналитикам <> Неопределено Тогда
				ТекОбласть.Расшифровка.Вставить("ОтборПоАналитикам", ОтборПоАналитикам);
			КонецЕсли;
			
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			
			
			Если АналитикаВверху Тогда
				ТекОбласть = ТекТаблДок.Область(ТекИнд, 4, ТекИнд, 4);
				ТекОбласть.Обвести(Линия, Линия, ЛинияТолстая, Линия);
			Иначе
				ТекОбласть = ТекТаблДок.Область(4, ТекИнд + 1, 4, ТекИнд + 1);
				ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
			КонецЕсли;
			
			ТекОбласть.СодержитЗначение = Истина;
			ТекОбласть.Значение = ТекСтрока.Значение + ?(ЗначениеЗаполнено(ТекСтрока.Корректировка),ТекСтрока.Корректировка,0);
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			
			
			Если АналитикаВверху Тогда
				ТекОбласть = ТекТаблДок.Область(ТекИнд, 5, ТекИнд, 5);
				ТекОбласть.Обвести(ЛинияТолстая, Линия, ЛинияТолстая, Линия);
				ТекОбласть.ЦветФона = Новый Цвет(230, 230, 230);
			КонецЕсли;
			
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблДок.Очистить();
	
	ТаблДок.Присоединить(ТекТаблДок).Обвести(ЛинияТолстая, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
	
	ТекТаблДок.Очистить();
	
	ЗаполнитьУровеньАналитики(ТекТаблДок, Линия, ЛинияТолстая, СоответствиеАналитик, 0, 1, СтруктураПоиска, ТекЧислоАналитик, АналитикаВверху, МассивПоказателей, ОтборПоАналитикам);
	
	Если АналитикаВверху Тогда
		ТаблДок.Присоединить(ТекТаблДок).Обвести(ЛинияТолстая, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
	Иначе
		ТекТаблДок.Область(1, 1, ТекТаблДок.ВысотаТаблицы, ТекТаблДок.ШиринаТаблицы).Обвести(ЛинияТолстая, ЛинияТолстая, ЛинияТолстая, ЛинияТолстая);
		ТаблДок.Вывести(ТекТаблДок);
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуемоеЧтениеНеактуальныхЗаписей() Экспорт

	Если ИспользуемоеЧтениеНеактуальныхЗаписей = Неопределено Тогда
		 Возврат УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(ЭтотОбъект);
	Иначе
		 Возврат ИспользуемоеЧтениеНеактуальныхЗаписей;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С РЕГИСТРАМИ ЗНАЧЕНИЙ И РАСКРЫТИЙ. ОБРАБОТКА ВЕРСИЙ.
//

Процедура ДобавитьЗаписьВРегистр(СтруктураРеквизиты,ИмяРабочейТаблицы,СтрокаЗаписи)
	
	УправлениеОтчетамиУХ.ДобавитьЗаписьВРегистр(СтруктураРеквизиты,мСоответствиеНаборовЗаписей,ИмяРабочейТаблицы,СтрокаЗаписи);
	
КонецПроцедуры

// Процедура очищает записи в регистрах значений и раскрытий показателей, внесенных текущим документом.

Функция ОчиститьРегистры() Экспорт
	
	СписокИспользуемыхВерсий=Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсий
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Попытка
			ОбъектОписаниеВерсий = Результат.ОписаниеВерсий.ПолучитьОбъект();
			ОбъектОписаниеВерсий.БезусловноеУдаление = Истина;
			ОбъектОписаниеВерсий.Удалить();
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	// При сбросе значений версий в ИБ для записи необходимо заполнить логи изменений значениями таблиц мПоказатели и мПоказателиРаскрытия.
	ЗаполнитьЛогиПоТекущимЗначениям();
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьЛогиПоТекущимЗначениям() Экспорт
	
	ЛогИзмененийПоказателей.Очистить();
	НомерТекущейОперации = 1;
	Для Каждого ТекСтрока Из мПоказатели Цикл
		
		ЧисловойПоказатель = мНеЧисловыеПоказатели.Найти(ТекСтрока.Ссылка) = Неопределено;
		
		Если ЧисловойПоказатель Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
			
			ТекСтрока.ЗначениеИзменено=Истина;
			Продолжить;	
			
		КонецЕсли;
		
		ЗаписьВЛоге = ЛогИзмененийПоказателей.Добавить();
		ЗаписьВЛоге.Ссылка        = ТекСтрока.Ссылка;
		ЗаписьВЛоге.НомерОперации = НомерТекущейОперации;
		ЗаписьВЛоге.Значение = ТекСтрока.Значение;
		ЗаписьВЛоге.ЧисловойПоказатель = ЧисловойПоказатель;
		
		ТекСтрока.ЗначениеИзменено=Истина;
			
	КонецЦикла;
	
	ЛогИзмененийРаскрытийПоказателей.Очистить();
	
	Для Каждого ТекСтрока Из мПоказателиРаскрытия Цикл
		
		ТекСтрокаПоказатель=мСоответствиеДляПоискаПоСсылке[ТекСтрока.Показатель];
		
		ЗаписьВЛоге = ЛогИзмененийРаскрытийПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьВЛоге, ТекСтрока, , "Значение, ЗначениеВалюта");
		ЗаписьВЛоге.НачальноеЗначение = Неопределено;
		ЗаписьВЛоге.НомерОперации     = НомерТекущейОперации;
		
		ЗаписьВЛоге.Значение 						= ТекСтрока.Значение;
		ЗаписьВЛоге.ЗначениеВалюта 					= ТекСтрока.ЗначениеВалюта;
		ЗаписьВЛоге.ЧисловойПоказатель 				= ТекСтрокаПоказатель.ЧисловойПоказатель;
		ЗаписьВЛоге.ЧислоАналитикГруппыРаскрытия 	= МаксАналитикОтчета+ТекСтрокаПоказатель.ЧислоАналитикГруппыРаскрытия;
		
		ТекСтрока.ЗначениеИзменено=Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЛогиПоТекущимЗначениям() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПИСИ ТЕКУЩИХ ЗНАЧЕНИЙ ПОКАЗАТЕЛЕЙ.

Процедура НачатьНовуюОперацию() Экспорт
	
	УправлениеОтчетамиУХ.НачатьНовуюОперацию(НомерТекущейОперации,ЛогИзмененийПоказателей,ЛогИзмененийРаскрытийПоказателей); 
	
КонецПроцедуры

Процедура ИзменитьТаблицыПоказателей(Знак) Экспорт
	
	Перем СтруктураОтбораПоАналитикам;
	
	БылиИзменения = Ложь;
	СтруктураОтбора = Новый Структура("НомерОперации", НомерТекущейОперации + ?(Знак > 0, 1, 0));
	
	// Изменения в таблице мПоказатели.
	
	// Числовые показатели.
	СтруктураОтбора.Вставить("ЧисловойПоказатель", Истина);
	ТаблицаИзмененийЧП = ЛогИзмененийПоказателей.Скопировать(СтруктураОтбора);
	Если ТаблицаИзмененийЧП.Количество() > 0 Тогда
		ТаблицаИзмененийЧП.Свернуть("Ссылка", "Значение");
		БылиИзменения = Истина;
		Для Каждого Строка Из ТаблицаИзмененийЧП Цикл
			ТекПоказатель = мСоответствиеДляПоискаПоСсылке[Строка.Ссылка];
			ТекПоказатель.Значение = ТекПоказатель.Значение + Знак * Строка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	// Нечисловые показатели.
	СтруктураОтбора.Вставить("ЧисловойПоказатель", Ложь);
	ТаблицаИзмененийНЧП = ЛогИзмененийПоказателей.Скопировать(СтруктураОтбора);
	Если ТаблицаИзмененийНЧП.Количество() > 0 Тогда
		БылиИзменения = Истина;
		Для Каждого Строка Из ТаблицаИзмененийНЧП Цикл
			ТекПоказатель = мСоответствиеДляПоискаПоСсылке[Строка.Ссылка];
			ТекПоказатель.Значение = Строка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	// Изменения в таблице мПоказателиРаскрытия.
	
	СтруктураОтбора.Вставить("ЧисловойПоказатель", Истина);
	ТаблицаИзмененийЧП = ЛогИзмененийРаскрытийПоказателей.Скопировать(СтруктураОтбора);
	Если ТаблицаИзмененийЧП.Количество() > 0 Тогда
		СтруктураОтбораПоАналитикам = Новый Структура("Показатель,АналитикаВалюта");
		Свертка = "Показатель,АналитикаВалюта";
		
		Для Инд = МаксАналитикОтчета По МаксАналитикОтчета+МаксАналитикПоказателя Цикл
			
			ИмяАналитики = "Аналитика" + Инд;
			СтруктураОтбораПоАналитикам.Вставить(ИмяАналитики);
			Свертка = Свертка + ", " + ИмяАналитики;
			
		КонецЦикла;
		
		ТаблицаИзмененийЧП.Свернуть(Свертка, "Значение,ЗначениеВалюта");
		
		Для Каждого Строка Из ТаблицаИзмененийЧП Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораПоАналитикам, Строка);
			НайденныеСтроки = мПоказателиРаскрытия.НайтиСтроки(СтруктураОтбораПоАналитикам);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекЗначение = НайденныеСтроки[0].Значение + Знак * Строка.Значение;
				Если ТекЗначение <> 0 Тогда
					НайденныеСтроки[0].Значение = ТекЗначение;
				Иначе
					мПоказателиРаскрытия.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			Иначе
				НоваяСтрока = мПоказателиРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбораПоАналитикам);
				НоваяСтрока.Значение = Знак * Строка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		БылиИзменения = Истина;
		
	КонецЕсли;
	
	СтруктураОтбора.Вставить("ЧисловойПоказатель", Ложь);
	ТаблицаИзмененийНЧП = ЛогИзмененийРаскрытийПоказателей.Скопировать(СтруктураОтбора);
	Если ТаблицаИзмененийНЧП.Количество() > 0 Тогда
		
		Если СтруктураОтбораПоАналитикам = Неопределено Тогда // Возможно, структура уже инциализирована при работе с раскрытиями числовых показателей.
			СтруктураОтбораПоАналитикам = Новый Структура("Показатель,АналитикаВалюта");
			
			Для Инд = МаксАналитикОтчета По МаксАналитикОтчета+МаксАналитикПоказателя Цикл
				
				ИмяАналитики = "Аналитика" + Инд;
				СтруктураОтбораПоАналитикам.Вставить(ИмяАналитики);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаИзмененийНЧП Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбораПоАналитикам, Строка);
			НайденныеСтроки = мПоказателиРаскрытия.НайтиСтроки(СтруктураОтбораПоАналитикам);
			ЕстьСтроки = НайденныеСтроки.Количество() > 0;
			
			Если Знак > 0 Тогда // Отмена отката изменений
				
				Если Строка.Значение = Неопределено И ЕстьСтроки Тогда // Данные удалены в текущей операции
					мПоказателиРаскрытия.Удалить(НайденныеСтроки[0]);
					Продолжить;
				КонецЕсли;
				
				Если Строка.НачальноеЗначение = Неопределено И НЕ ЕстьСтроки Тогда // Данные добавлены в текущей операции
					НоваяСтрока = мПоказателиРаскрытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбораПоАналитикам);
					НоваяСтрока.Значение = Строка.Значение;
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки[0].Значение = Строка.Значение;
				
			Иначе // Откат изменений
				
				Если Строка.Значение = Неопределено И НЕ ЕстьСтроки Тогда
					НоваяСтрока = мПоказателиРаскрытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбораПоАналитикам);
					НоваяСтрока.Значение = Строка.НачальноеЗначение;
					Продолжить;
				КонецЕсли;
				
				Если Строка.НачальноеЗначение = Неопределено И ЕстьСтроки Тогда
					мПоказателиРаскрытия.Удалить(НайденныеСтроки[0]);
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки[0].Значение = Строка.НачальноеЗначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		БылиИзменения = Истина;
		
	КонецЕсли;
	
	Если БылиИзменения Тогда
		НомерТекущейОперации = НомерТекущейОперации + Знак;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПовторитьИзменения() Экспорт
	
	ИзменитьТаблицыПоказателей(1);
	
КонецПроцедуры

Процедура ОтменитьИзменения() Экспорт
	
	ИзменитьТаблицыПоказателей(-1);
	
КонецПроцедуры

Процедура ЗаменитьАналитикиГруппыРаскрытия(Значение,СтруктураАналитикиТек,СтруктураАналитикиНов) Экспорт
	
	// Удаляем строку со старыми значениями аналитики
	
	МассивСтрок = мПоказателиРаскрытия.НайтиСтроки(СтруктураАналитикиТек);
	Если МассивСтрок.Количество() > 0 Тогда
		ТекСтрока = МассивСтрок[0];
		ТекЗначение=ТекСтрока.Значение;
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Неопределено, ТекСтрока);
	Иначе // Нет такой комбинации аналитик
		Возврат;
	КонецЕсли;
	
	Если НЕ (Значение=Неопределено) Тогда
		НовоеЗначение=Значение;
	ИначеЕсли Не ТекСтрока=Неопределено Тогда
		НовоеЗначение=ТекЗначение;
	Иначе
		НовоеЗначение=0;
	КонецЕсли;
	
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,НовоеЗначение, СтруктураАналитикиНов);
	
КонецПроцедуры // ЗаменитьАналитикиГруппыРаскрытия

Процедура ОчиститьмПоказателиРаскрытия()
	
	Для Каждого Строка Из мПоказателиРаскрытия Цикл
		
		ТекСтрокамПоказатели = мСоответствиеДляПоискаПоСсылке[Строка.Показатель];
		ЗаписьВЛоге = ЛогИзмененийРаскрытийПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьВЛоге, Строка, , "Значение,ЗначениеВалюта");
		ЗаписьВЛоге.НачальноеЗначение 				=  Строка.Значение;
		ЗаписьВЛоге.НачальноеЗначениеВалюта 		=  Строка.ЗначениеВалюта;
		ЗаписьВЛоге.ЧислоАналитикГруппыРаскрытия=МаксАналитикОтчета+ТекСтрокамПоказатели.ЧислоАналитикГруппыРаскрытия;
		
		Если ТекСтрокамПоказатели.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ЗаписьВЛоге.Значение 			= -Строка.Значение;
			ЗаписьВЛоге.ЗначениеВалюта 		= -Строка.ЗначениеВалюта;
			ЗаписьВЛоге.ЧисловойПоказатель 	= Истина;
		Иначе
			ЗаписьВЛоге.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипЗнч(Строка.Значение));
			ЗаписьВЛоге.ЗначениеВалюта 				= 0;
			ЗаписьВЛоге.ЧисловойПоказатель = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	мПоказателиРаскрытия.Очистить();
	
КонецПроцедуры

Процедура ПереносИсходныхЗначений(СтруктураПереноса)
	
	СтрПоказатель = мСоответствиеДляПоискаПоСсылке[СтруктураПереноса.ПоказательИсточник];
	
	Если СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		
		НовоеЗначениеПоказателя=СтруктураПереноса.ИсходноеЗначение-СтруктураПереноса.ЗначениеКПереносу;
		
	Иначе
		
		НовоеЗначениеПоказателя=ПустоеЗначениеПоТипу[СтрПоказатель.ТипЗначения];
		
	КонецЕсли;
	
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,СтрПоказатель, НовоеЗначениеПоказателя);
	СтрПоказатель.ДанныеРасчета = Неопределено;
	СтрПоказатель.СохраненныеДанныеАктуальны=Ложь;
	
	Если Не СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		ИзмененНечисловойПоказатель=Истина;
	КонецЕсли;
	
	Показатели[СтрПоказатель.Код]=НовоеЗначениеПоказателя;
	
	Если СтруктураПереноса.ТаблицаАналитики.Количество()>0 Тогда
		
		Для Каждого СтрАналитика ИЗ СтруктураПереноса.ТаблицаАналитики Цикл
			
			СтруктураПоиска=Новый Структура;
			
			Для Инд = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				
				Если СтрАналитика.Свойство("Аналитика" + Инд) Тогда 
					
					СтруктураПоиска.Вставить("Аналитика" + Инд,СтрАналитика["Аналитика" + Инд]);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПоиска.Вставить("Показатель",СтруктураПереноса.ПоказательИсточник);
			
			МассивРаскрытий=мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
			
			Если МассивРаскрытий.Количество()>0 Тогда
				
				ТекСтрока=МассивРаскрытий[0];
				
				Если СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					
					НовоеЗначениеРаскрытия=СтрАналитика.ИсходноеЗначение-СтрАналитика.ЗначениеКПереносу;
					
				Иначе
					
					НовоеЗначениеРаскрытия=СтрАналитика.ЗначениеКПереносу;
					
				КонецЕсли;
				
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,НовоеЗначениеРаскрытия,ТекСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВычислятьПриИзменении Тогда
		
		Если НЕ ДанныеПараметрикиАктуальны Тогда
			УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭтотОбъект,,Истина);
		КонецЕсли;
		
		ТекПорядок=0;		
		МассивКодовПоказателей=ПолучитьПутьВычисления(СтрПоказатель.Код);
		
		ПересчитатьЗависимыеПоказатели(МассивКодовПоказателей);
		
	КонецЕсли;
	
КонецПроцедуры // ПереносЗначений()

Процедура ВставкаЗначений(СтруктураПереноса) Экспорт
	
	СтрПоказатель = мСоответствиеДляПоискаПоСсылке[СтруктураПереноса.ПоказательПриемник];
	
	Если СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		
		Если СтруктураПереноса.СпособВставки="Замещение" Тогда
			
			НовоеЗначениеПоказателя=СтруктураПереноса.ЗначениеКПереносу;
			
		Иначе
			
			НовоеЗначениеПоказателя=СтрПоказатель.Значение+СтруктураПереноса.ЗначениеКПереносу;
			
		КонецЕсли;
		
	Иначе
		
		НовоеЗначениеПоказателя=СтруктураПереноса.ЗначениеКПереносу;
		
	КонецЕсли;
	
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,СтрПоказатель, НовоеЗначениеПоказателя);
	СтрПоказатель.ДанныеРасчета = Неопределено;
	СтрПоказатель.СохраненныеДанныеАктуальны=Ложь;
	
	Если Не СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		ИзмененНечисловойПоказатель=Истина;
	КонецЕсли;
	
	Показатели[СтрПоказатель.Код]=НовоеЗначениеПоказателя;
	
	Если СтруктураПереноса.СпособПереноса="Перенос" Тогда // Трансформируем таблицу раскрытия источника в таблицу раскрытия приемника
		
		// Подготовим таблицу для записи аналитики
		
		ТаблицаАналитикиИсточник=СтруктураПереноса.ТаблицаАналитикиИсточник;
		
		РабочаяТаблицаАналитики=Новый ТаблицаЗначений;
		РабочаяТаблицаАналитики.Колонки.Добавить("ЗначениеКПереносу",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		СтруктураПерекладки=Новый Структура;
		
		ТекстСвертки="";
		ГруппаРаскрытияИсточник=СтруктураПереноса.ПоказательИсточник.ГруппаРаскрытия;
		ГруппаРаскрытияПриемник=СтруктураПереноса.ПоказательПриемник.ГруппаРаскрытия;
		
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ВидАналитики = ГруппаРаскрытияПриемник["ВидАналитики"+Инд];
			
			Если ПустаяСтрока(ВидАналитики) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекТипАналитики=ВидАналитики.ТипЗначения;
			
			Для ИндексИсточник=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				ВидАналитикиИсточник=ГруппаРаскрытияИсточник["ВидАналитики"+ИндексИсточник];
				
				Если ПустаяСтрока(ВидАналитикиИсточник) ИЛИ (НЕ ВидАналитикиИсточник=ВидАналитики) Тогда
					
					Продолжить;
					
				КонецЕсли;	
				
				СтруктураПерекладки.Вставить("Аналитика"+Инд,"Аналитика"+ИндексИсточник);
				
				ТекстСвертки=ТекстСвертки+",Аналитика"+Инд;
				
				РабочаяТаблицаАналитики.Колонки.Добавить("Аналитика"+Инд,ТекТипАналитики,Строка(ВидАналитики));
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтруктураПерекладки.Количество()>0 Тогда 
			
			Для Каждого СтрокаИсточник ИЗ ТаблицаАналитикиИсточник Цикл
				
				НоваяСтрока=РабочаяТаблицаАналитики.Добавить();
				
				Для Каждого Реквизит ИЗ СтруктураПерекладки Цикл
					
					НоваяСтрока[Реквизит.Ключ]=СтрокаИсточник[Реквизит.Значение];
					
				КонецЦикла;
				
				НоваяСтрока.ЗначениеКПереносу=СтрокаИсточник.ЗначениеКПереносу;
				
			КонецЦикла;
			
			РабочаяТаблицаАналитики.Свернуть(Сред(ТекстСвертки,2),"ЗначениеКПереносу");
			
		КонецЕсли;
		
	Иначе
		
		РабочаяТаблицаАналитики=СтруктураПереноса.ТаблицаАналитикиИсточник;
		
	КонецЕсли;
	
	// Подготовим структуру для поиска и записи раскрытий
	
	СтруктураСтроки=Новый Структура;
	
	Для Каждого Колонка ИЗ РабочаяТаблицаАналитики.Колонки Цикл
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			СтруктураСтроки.Вставить(Колонка.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПереноса.СпособВставки="Замещение" Тогда 
		
		// Очистим старое раскрытие показателя
		
		МассивДанных=мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",СтрПоказатель.Ссылка));
		
		Для Каждого Строка ИЗ МассивДанных Цикл
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Неопределено, Строка);
			
		КонецЦикла;
		
		// Запишем новые значения раскрытия
		
		Для Каждого Строка ИЗ РабочаяТаблицаАналитики Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураСтроки,Строка);
			СтруктураСтроки.Вставить("Показатель",СтруктураПереноса.ПоказательПриемник);
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Строка.ЗначениеКПереносу,СтруктураСтроки);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка ИЗ РабочаяТаблицаАналитики Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураСтроки,Строка);
			СтруктураСтроки.Вставить("Показатель",СтруктураПереноса.ПоказательПриемник);
			
			МассивРаскрытий=мПоказателиРаскрытия.НайтиСтроки(СтруктураСтроки);
			
			Если МассивРаскрытий.Количество()>0 Тогда
				
				ТекСтрока=МассивРаскрытий[0];
				
				Если СтрПоказатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					
					НовоеЗначениеРаскрытия=ТекСтрока.Значение+Строка.ЗначениеКПереносу;
					
				Иначе
					
					НовоеЗначениеРаскрытия=Строка.ЗначениеКПереносу;
					
				КонецЕсли;
				
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,НовоеЗначениеРаскрытия,ТекСтрока);
				
			Иначе
				
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Строка.ЗначениеКПереносу,СтруктураСтроки);
				
			КонецЕсли;
			
		КонецЦикла;			
		
	КонецЕсли;
	
	Если ВычислятьПриИзменении Тогда
		
		Если НЕ ДанныеПараметрикиАктуальны Тогда
			УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭтотОбъект,,Истина);
		КонецЕсли;
		
		ТекПорядок=0;		
		МассивКодовПоказателей=ПолучитьПутьВычисления(СтрПоказатель.Код);
		
		ПересчитатьЗависимыеПоказатели(МассивКодовПоказателей);
		
	КонецЕсли;
	
КонецПроцедуры // ВставкаЗначений()

Процедура ПересчитатьЗависимыеПоказатели(МассивКодовПоказателей) Экспорт
	
	// инициализируем структуру "Показатели"
	СформироватьСтруктуруПоказателей();
	
	// запускаем код заполнения
	Если НЕ ЗапуститьМодульВычисления(МассивКодовПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьВычисляемыеПоказатели() 

Процедура ОбработкаПереносаДанных(СтруктураПереноса) Экспорт
	
	// Обработаем изменение значений исходного показателя, если это необходимо
	
	СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
	НачатьНовуюОперацию();
	
	Если СтруктураПереноса.СпособПереноса="Перенос"
		И ((Не ЗначениеЗаполнено(СтруктураПереноса.ЭкземплярОтчетаИсточник)) ИЛИ СтруктураПереноса.ЭкземплярОтчетаИсточник=Ссылка) Тогда
		
		ПереносИсходныхЗначений(СтруктураПереноса);
		
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(СтруктураПереноса.ЭкземплярОтчетаПриемник)) ИЛИ СтруктураПереноса.ЭкземплярОтчетаПриемник=Ссылка Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Обработаем запись значений в результирующий показатель
		
		ТаблицаАналитикиИсточник=ПроцедурыПреобразованияДанныхУХ.ПолучитьТаблицуИзМассиваСтруктур(СтруктураПереноса.ТаблицаАналитики);
		
		Если НЕ СтруктураПереноса.ОсновнаяВалюта=ОсновнаяВалюта Тогда
			
			мТекущаяВалютаСтар=мТекущаяВалюта;
			
			мТекущаяВалюта=СтруктураПереноса.ОсновнаяВалюта;
			
			СтруктураПереносаВВалюте=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтруктураПереноса);
			
			СтруктураПереносаВВалюте.ЗначениеКПереносу=ПолучитьЗначениеПоказателяВОсновнойВалюте(СтруктураПереноса.ПоказательПриемник,СтруктураПереноса.ЗначениеКПереносу);
			
			ТаблицаРакрытияВВалюте=ТаблицаАналитикиИсточник.СкопироватьКолонки();
			
			Для Каждого СтрокаРаскрытия ИЗ ТаблицаАналитикиИсточник Цикл
				НоваяСтрока=ТаблицаРакрытияВВалюте.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРаскрытия);
				НоваяСтрока.ЗначениеКПереносу=ПолучитьЗначениеПоказателяВОсновнойВалюте(СтруктураПереноса.ПоказательПриемник,СтрокаРаскрытия.ЗначениеКПереносу);
			КонецЦикла;
			
			мТекущаяВалюта=мТекущаяВалютаСтар;
			
			СтруктураПереносаВВалюте.Вставить("ТаблицаАналитикиИсточник",ТаблицаРакрытияВВалюте);
			ВставкаЗначений(СтруктураПереносаВВалюте);
			
		Иначе	
			
			СтруктураПереноса.Вставить("ТаблицаАналитикиИсточник",ТаблицаАналитикиИсточник);
			ВставкаЗначений(СтруктураПереноса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПереносаДанных() 

//////////////////////////////////////////////////////////////////////////////////////
/// Процедуры и функции отображения данных отчета
///////////////////////////////////////////////////////////////////////////////////////

Процедура СформироватьТаблицуСтрок() Экспорт
	
	// Формируем таблицу строк отчета
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиОтчетов.Ссылка КАК Ссылка,
	             |	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |	СтрокиОтчетов.Код КАК Код,
	             |	ВЫБОР
	             |		КОГДА СтрокиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК ЕстьРаскрытие,
	             |	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	             |	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	             |	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	             |	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	             |	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики5 КАК ВидАналитики5,
	             |	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	             |	ВЫБОР
	             |		КОГДА СтрокиОтчетов.ГруппаРаскрытия = &ПустаяГруппаРаскрытия
	             |			ТОГДА 0
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики1 = &ПустойВидСубконто
	             |					ТОГДА 0
	             |				ИНАЧЕ 1
	             |			КОНЕЦ + ВЫБОР
	             |				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики2 = &ПустойВидСубконто
	             |					ТОГДА 0
	             |				ИНАЧЕ 1
	             |			КОНЕЦ + ВЫБОР
	             |				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики3 = &ПустойВидСубконто
	             |					ТОГДА 0
	             |				ИНАЧЕ 1
	             |			КОНЕЦ + ВЫБОР
	             |				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики4 = &ПустойВидСубконто
	             |					ТОГДА 0
	             |				ИНАЧЕ 1
	             |			КОНЕЦ + ВЫБОР
	             |				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики5 = &ПустойВидСубконто
	             |					ТОГДА 0
	             |				ИНАЧЕ 1
	             |			КОНЕЦ + ВЫБОР
	             |				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики6 = &ПустойВидСубконто
	             |					ТОГДА 0
	             |				ИНАЧЕ 1
	             |			КОНЕЦ
	             |	КОНЕЦ КАК КоличествоАналитик,
	             |	СтрокиОтчетов.Родитель КАК Родитель
	             |ИЗ
	             |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |ГДЕ
	             |	СтрокиОтчетов.Владелец = &ВидОтчета
	             |	И НЕ СтрокиОтчетов.ПометкаУдаления
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПорядковыйНомер ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ПустаяГруппаРаскрытия",Справочники.ГруппыРаскрытия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка());
	
	ТаблицаСтроки=Запрос.Выполнить().Выгрузить();
	ТаблицаСтроки.Колонки.Код.Имя="Имя";
	
	ТаблицаСтроки.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаСтроки.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	
	Индекс=1;
	
	Для Каждого Строка ИЗ ТаблицаСтроки Цикл
		
		Строка.Код=СокрЛП(Строка.Имя);
		Строка.Порядок=Индекс;
		
		Индекс=Индекс+1;		
		
	КонецЦикла;
	
	ТаблицаСтроки.Колонки.Удалить("Имя");
	ТаблицаСтроки.Индексы.Добавить("Ссылка");
	
	// Сформируем дерево строк для группировки
	
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ДеревоСтрок=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Строка,
	|	ЕСТЬNULL(ПроцедурыРасчетов.РедактированиеВозможно, ИСТИНА) КАК РедактированиеВозможно,
	|	НЕ ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка) КАК ЕстьРаскрытие
	|ПОМЕСТИТЬ ПоказателиПроцедуры
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
	|			И (ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки)
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоказателиОтчетов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Строка,
	|	ВЫБОР
	|		КОГДА СтрокиСРаскрытием.Строка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаскрытие,
	|	ВЫБОР
	|		КОГДА СтрокиСЗаполнением.Строка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьЗаполнение,
	|	ВЫБОР
	|		КОГДА СтрокиСВычислением.Строка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВычисление
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПоказателиОтчетов.Строка КАК Строка
	|		ИЗ
	|			Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ГДЕ
	|			ПоказателиОтчетов.Владелец = &ВидОтчета
	|			И НЕ ПоказателиОтчетов.ПометкаУдаления
	|			И НЕ ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)) КАК СтрокиСРаскрытием
	|		ПО СтрокиОтчетов.Ссылка = СтрокиСРаскрытием.Строка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПоказателиПроцедуры.Строка КАК Строка
	|		ИЗ
	|			ПоказателиПроцедуры КАК ПоказателиПроцедуры
	|		ГДЕ
	|			ПоказателиПроцедуры.РедактированиеВозможно) КАК СтрокиСЗаполнением
	|		ПО СтрокиОтчетов.Ссылка = СтрокиСЗаполнением.Строка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПоказателиПроцедуры.Строка КАК Строка
	|		ИЗ
	|			ПоказателиПроцедуры КАК ПоказателиПроцедуры
	|		ГДЕ
	|			НЕ ПоказателиПроцедуры.РедактированиеВозможно) КАК СтрокиСВычислением
	|		ПО СтрокиОтчетов.Ссылка = СтрокиСВычислением.Строка
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И НЕ СтрокиОтчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиПроцедуры.ПоказательОтчета,
	|	ПоказателиПроцедуры.ЕстьРаскрытие
	|ИЗ
	|	ПоказателиПроцедуры КАК ПоказателиПроцедуры
	|ГДЕ
	|	ПоказателиПроцедуры.РедактированиеВозможно";
	
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	Результат=Запрос.ВыполнитьПакет();
		
	ТабПризнакиСтрок=Результат[1].Выгрузить();
	ТабПризнакиСтрок.Индексы.Добавить("Строка");
	
	СписокРедактируемыхПоказателей=Новый СписокЗначений;
	
	ЗапросПоказатели=Результат[2].Выбрать();
	
	Пока ЗапросПоказатели.Следующий() Цикл
		
		СписокРедактируемыхПоказателей.Добавить(ЗапросПоказатели.ПоказательОтчета,,ЗапросПоказатели.ЕстьРаскрытие);
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.Представление
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ КолонкиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	СписокКолонокБазис=Новый СписокЗначений;
	
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		СписокКолонокБазис.Добавить(Результат.Ссылка,Результат.Представление);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицуСтрок() 

Процедура СформироватьТаблицуРаскрытияДерево()
	
	ТекстВТ="";
	
	ТекстОбъединениеРаскрытие="";
	
	// По таблицам, полученным при раскрытии строк
	
	Для Каждого СтрРаскрытие ИЗ ТаблицаРаскрытийСтрок Цикл
		
		ПрефиксТаблицы="Раскрытие_"+Формат(СтрРаскрытие.НомерСтроки,"ЧГ=0");
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|мПоказателиРаскрытияКонтекст.Показатель,
		|мПоказателиРаскрытияКонтекст.АналитикаВалюта,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"		
			|мПоказателиРаскрытияКонтекст.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
		КонецЦикла;
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|мПоказателиРаскрытияКонтекст.Значение КАК Значение
		|ИЗ мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+" КАК мПоказателиРаскрытияКонтекст";
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединениеРаскрытие,16);
	
	Если ПустаяСтрока(СокрЛП(ТекстВТ)) Тогда
		
		Если СпособВывода="Дерево" И мПоказателиРаскрытия.Колонки.Найти("ИндексАналитики")=Неопределено Тогда
			
			мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
	
	ЗапросДанныеРаскрытия.Текст=ТекстВТ;
	
	мПоказателиРаскрытия=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();	
	
	мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	мПоказателиРаскрытия.Колонки.Добавить("Техническая",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого СтрРаскрытия ИЗ мПоказателиРаскрытия Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
	мПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
	
КонецПроцедуры // СформироватьТаблицуРаскрытия()

Функция ПолучитьИндексАналитик(СтрРаскрытия) Экспорт
	
	Если СтрРаскрытия.АналитикаВалюта=Неопределено Тогда
		
		СтрРаскрытия.АналитикаВалюта=Справочники.Валюты.ПустаяСсылка();
		
	КонецЕсли;
	
	СтрИндекс=XMLString(СтрРаскрытия.АналитикаВалюта);
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ТекАналитика=СтрРаскрытия["Аналитика"+ИндексАналитики];
		Если НЕ ТекАналитика=Неопределено Тогда
			
			СтрИндекс=СтрИндекс+"_"+XMLString(ТекАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрИндекс;	
	
КонецФункции // ПолучитьИндексАналитик()

Процедура ПолучитьИзмененныеПоказатели(Знак) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогИзмененийПоказателей.Ссылка,
	|	ЛогИзмененийПоказателей.Значение КАК ЗначениеИзменения,
	|	ВЫРАЗИТЬ(ЛогИзмененийПоказателей.Значение КАК Число(18,5))"+?(Знак=-1,"*-1","")+" КАК Значение
	|ПОМЕСТИТЬ ИзмененныеПоказатели
	|ИЗ
	|	&ЛогИзмененийПоказателей КАК ЛогИзмененийПоказателей
	|ГДЕ
	|	ЛогИзмененийПоказателей.НомерОперации = &НомерОперации
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета,
	|	ИзмененныеПоказатели.Значение,
	|	ИзмененныеПоказатели.ЗначениеИзменения
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|		ПО мПоказатели.Ссылка = ИзмененныеПоказатели.Ссылка";
	
	Запрос.УстановитьПараметр("мПоказатели",мПоказатели);
	Запрос.УстановитьПараметр("НомерОперации",НомерТекущейОперации);
	Запрос.УстановитьПараметр("ЛогИзмененийПоказателей",ЛогИзмененийПоказателей);
	
	ТекИзмененныеПоказатели=Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст="ВЫБРАТЬ	
	|ЛогИзмененийРаскрытийПоказателей.Показатель,
	|ЛогИзмененийРаскрытийПоказателей.АналитикаВалюта,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|ЛогИзмененийРаскрытийПоказателей.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ВЫРАЗИТЬ(ЛогИзмененийРаскрытийПоказателей.Значение КАК Число(18,5))"+?(Знак=-1,"*-1","")+" КАК Значение,
	|ВЫРАЗИТЬ(ЛогИзмененийРаскрытийПоказателей.ЗначениеВалюта КАК Число(18,5))"+?(Знак=-1,"*-1","")+" КАК ЗначениеВалюта,
	|ЛогИзмененийРаскрытийПоказателей.Значение КАК ЗначениеИзменения,
	|ЛогИзмененийРаскрытийПоказателей.ЗначениеВалюта КАК ЗначениеИзмененияВалюта
	|ПОМЕСТИТЬ ИзмененныеПоказателиРаскрытия
	|ИЗ &ЛогИзмененийРаскрытийПоказателей КАК ЛогИзмененийРаскрытийПоказателей
	|ГДЕ 
	|ЛогИзмененийРаскрытийПоказателей.НомерОперации = &НомерОперации
	|;
	|ВЫБРАТЬ * ИЗ ИзмененныеПоказателиРаскрытия";
	
	Запрос.УстановитьПараметр("НомерОперации",НомерТекущейОперации);
	Запрос.УстановитьПараметр("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
	
	ТекИзмененныеПоказателиРаскрытия=Запрос.Выполнить().Выгрузить();
	
	ТекИзмененныеПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	Для Каждого СтрРаскрытия ИЗ ТекИзмененныеПоказателиРаскрытия Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
	Если НЕ мТекущаяВалюта=ОсновнаяВалюта Тогда 
		
		мИзмененныеПоказатели=ПолучитьЗначенияПоказателейВВалюте(ТекИзмененныеПоказатели, мТекущаяВалюта);
		мИзмененныеПоказателиРаскрытия=ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели,ТекИзмененныеПоказателиРаскрытия,мТекущаяВалюта);
		
	Иначе
		
		мИзмененныеПоказатели=ТекИзмененныеПоказатели;
		мИзмененныеПоказателиРаскрытия=ТекИзмененныеПоказателиРаскрытия;
		
	КонецЕсли;
	
Конецпроцедуры // ПолучитьИзмененныеПоказатели()

Функция ПолучитьИзмененныеПоказателиАбс() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета,
	|	мПоказатели.НеМасштабируется,
	|	мПоказатели.Значение
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогИзмененийПоказателей.Ссылка
	|ПОМЕСТИТЬ ИзмененныеПоказатели
	|ИЗ
	|	&ЛогИзмененийПоказателей КАК ЛогИзмененийПоказателей
	|ГДЕ
	|	ЛогИзмененийПоказателей.НомерОперации = &НомерОперации
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказатели.Код,
	|	мПоказатели.Ссылка,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета,
	|	мПоказатели.НеМасштабируется,
	|	мПоказатели.Значение
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|		ПО мПоказатели.Ссылка = ИзмененныеПоказатели.Ссылка";
	
	Запрос.УстановитьПараметр("мПоказатели",мПоказатели);
	Запрос.УстановитьПараметр("НомерОперации",НомерТекущейОперации);
	Запрос.УстановитьПараметр("ЛогИзмененийПоказателей",ЛогИзмененийПоказателей);
	
	ТекИзмененныеПоказатели=Запрос.Выполнить().Выгрузить();
	
	Если НЕ мТекущаяВалюта=ОсновнаяВалюта Тогда 
		
		Возврат ПолучитьЗначенияПоказателейВВалюте(ТекИзмененныеПоказатели, мТекущаяВалюта);
		
	Иначе
		
		Возврат ТекИзмененныеПоказатели;
		
	КонецЕсли;
	
КонецФункции // ПолучитьИзмененныеПоказателиАбс()

Процедура ПодготовитьТаблицуРаскрытияСтрок() Экспорт
	
	Если НЕ ДанныеРаскрытияИнициализированы Тогда
		
		ЗапросДанныеРаскрытия=Новый Запрос;
		ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		ЗапросДанныеРаскрытия.Текст="
		|ВЫБРАТЬ
		|	мПоказатели.Ссылка КАК Показатель,
		|	мПоказатели.Код,
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	мПоказатели.НеФинансовый,
		|	мПоказатели.ЧисловойПоказатель,
		|   мПоказатели.ВидКурса,
		|   мПоказатели.СвязанныйПоказатель
		|ПОМЕСТИТЬ ТабПоказатели
		|ИЗ
		|	&мПоказателиЭталон КАК мПоказатели
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказателиЭталон",мПоказатели);
		ЗапросДанныеРаскрытия.Выполнить();
		ЗапросДанныеРаскрытия.Текст="";
		
	КонецЕсли;
	
	СтрокаГруппировкиСтроки="Строка,АналитикаВалюта";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+",Аналитика"+ИндексАналитики;
	КонецЦикла;
	
	ШаблонРаскрытиеСтроки=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиСтроки);
	ШаблонРаскрытиеСтроки.Колонки.Добавить("ОсновнаяВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
	ШаблонРаскрытиеСтроки.Колонки.Добавить("ИмяТаблицыВОсновнойВалюте");
	ШаблонРаскрытиеСтроки.Колонки.Добавить("ИменаТаблицВВалюте");
	ШаблонРаскрытиеСтроки.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ТаблицаРаскрытийСтрок=Новый ТаблицаЗначений;
	ТаблицаРаскрытийСтрок.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТаблицаРаскрытийСтрок.Колонки.Добавить("ТабРаскрытиеСтроки");
	
КонецПроцедуры // ПодготовитьТаблицуРаскрытияСтрок()

Процедура ПодготовитьТаблицыГрупп() Экспорт
	
	ТабРаскрытиеГруппСтроки=Новый ТаблицаЗначений;	
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("Строка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СтрокиОтчетов"));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("НачалоГруппы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("КонецГруппы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("УровеньГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("Раскрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("ДобавленаВручную",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
КонецПроцедуры // ПодготовитьТаблицыГрупп()

Процедура ИнициализироватьИсходныеЗапросы()
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаРаскрытийСтрок=Неопределено Тогда
		ПодготовитьТаблицуРаскрытияСтрок();
	КонецЕсли;
	
	ОчиститьРасчетныеТаблицы();
	
	ЗапросКоординаты=Новый Запрос;
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если Не УправляемыйРежим Тогда
		
		ЗапросКоординаты.Текст="
		|ВЫБРАТЬ Строка, Колонка, Ссылка
		|ПОМЕСТИТЬ СтрокаКолонка
		|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
		|;";
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ШаблонТаблицыКоординат КАК ШаблонТаблицыКоординат
		|;";
		
		ЗапросКоординаты.УстановитьПараметр("ШаблонТаблицыКоординат",ШаблонТаблицыКоординат.СкопироватьКолонки());
		
		ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказатели);
		ЗапросКоординаты.Выполнить();
		
	КонецЕсли;
	
	ЗапросДанные.Текст="
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТаблицаСтроки.Ссылка КАК Ссылка,
	|ТаблицаСтроки.Код КАК Код,
	|ТаблицаСтроки.Порядок КАК Порядок
	|
	|ПОМЕСТИТЬ СтрокиОтчетов
	|ИЗ	&ТаблицаСтроки КАК ТаблицаСтроки
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка КАК Показатель,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|   мПоказатели.ВидКурса,
	|   мПоказатели.СвязанныйПоказатель
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Показатель
	|;";
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	ЗапросДанные.УстановитьПараметр("мПоказатели",мПоказатели);
	
	ЗапросДанные.Выполнить();
	
КонецПроцедуры // ИнициализироватьКонтекстСводно()

Процедура ОбновитьКонтекстРаскрытия() Экспорт
	
	Если ТаблицаРаскрытийСтрок=Неопределено Тогда
		ПодготовитьТаблицуРаскрытияСтрок();
	КонецЕсли;
	
	Если ТолькоСинтетическиеПоказатели() ИЛИ ТаблицаРаскрытийСтрок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДанныеРаскрытия.Текст="";
	ТекстЗапросаОбщий="";
	
	Для Каждого СтрРаскрытие ИЗ ТаблицаРаскрытийСтрок Цикл
		
		ПрефиксТаблицы="Раскрытие_"+Формат(СтрРаскрытие.НомерСтроки,"ЧГ=0");
		
		ТекстОбъединениеРаскрытие="";
		ТекстДанныеРаскрытие="";
		
		ТекстЗапросаОбщий=ТекстЗапросаОбщий+"
		|УНИЧТОЖИТЬ мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+"
		|;";
		
		ТабРаскрытиеСтроки=СтрРаскрытие.ТабРаскрытиеСтроки;
		
		Для Индекс=0 По ТабРаскрытиеСтроки.Количество()-1 Цикл
			
			ТекСвод=ТабРаскрытиеСтроки[Индекс];
			
			Если ТекСвод.ОсновнаяВалюта=мТекущаяВалюта Тогда
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+" ","")+"ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
				
			Иначе
				
				// Проверим, не был ли уже сделан пересчет в текущую валюту отображения
				
				ИмяТаблицыВВалюте=ТекСвод.ИменаТаблицВВалюте[мТекущаяВалюта];
				
				Если ИмяТаблицыВВалюте=Неопределено Тогда
					
					ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
					мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
					
					мПоказателиРаскрытияВВалютеТек=ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели, мПоказателиРаскрытияТек, мТекущаяВалюта, Ложь);
					
					ИмяТаблицыВВалюте=ПрефиксТаблицы+"_ВАЛ_"+СокрЛП(мТекущаяВалюта.Код)+"_мПоказателиРаскрытияВВалюте";			
					ТекСвод.ИменаТаблицВВалюте.Вставить(мТекущаяВалюта,ИмяТаблицыВВалюте);
					
					ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
					|/////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
					|;";
					ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
					
				КонецЕсли;
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы+" ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ТекстДанныеРаскрытие="" Тогда
			
			ТекстЗапросаОбщий=ТекстЗапросаОбщий+ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
			|;";
			
		Иначе
			
			ТекстЗапросаОбщий=ТекстЗапросаОбщий+Сред(ТекстОбъединениеРаскрытие,16)+"
			|;";
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.Текст=ТекстЗапросаОбщий;
	ЗапросДанныеРаскрытия.Выполнить();
	
КонецПроцедуры // ОбновитьСводныйКонтекст()

Процедура ПодготовитьТаблицуРаскрытийДляВывода(ТаблицаРаскрытий)
	
	Для Каждого СтрРаскрытия ИЗ ТаблицаРаскрытий Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
КонецПроцедуры //  

Процедура ОтобразитьДанныеОтчетов(ТолькоОбновлениеЗначений=Ложь) Экспорт
	
	ТекстВТ="";
	ТекстОбъединение="";
	ТекстОбъединениеРаскрытие="";
	МассивТаблицПоказателей=Новый Массив;
	
	Если НЕ ТолькоОбновлениеЗначений Тогда  
		
		Если Не ДанныеРаскрытияИнициализированы Тогда
			
			СформироватьТаблицуРаскрытияДерево();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстВТ=ТекстВТ+"
	|/////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|мПоказатели.Ссылка КАК Показатель,
	|мПоказатели.Код,
	|мПоказатели.Строка,
	|мПоказатели.Колонка,
	|мПоказатели.ПорядковыйНомерКолонки,
	|ВЫРАЗИТЬ(мПоказатели.Значение КАК Число(18,5)) КАК Значение
	|Поместить мПоказатели
	|ИЗ &мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Показатель
	|;";
	
	МассивТаблицПоказателей.Добавить("мПоказатели");
	
	Если ТолькоОбновлениеЗначений Тогда
		
		ЗапросДанные.УстановитьПараметр("мПоказатели",мИзмененныеПоказатели);
		
	Иначе
		
		ЗапросДанные.УстановитьПараметр("мПоказатели",?(НЕ мТекущаяВалюта=ОсновнаяВалюта,мПоказателиВВалюте,?(РежимКорректировки,мКорректировкиПоказателей,мПоказатели)));
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТекстВыборкаРаскрытий="";
	ТекстСоединение="";
	ТекстИндексы="";
	КолонокИндекса=0;
	
	Если ТолькоОбновлениеЗначений Тогда
		
		ЗапросДанные.УстановитьПараметр("ТабПоказателиРаскрытия",мИзмененныеПоказателиРаскрытия);
		
	Иначе
		
		Если ДанныеРаскрытияИнициализированы Тогда
			
			Если мТекущаяВалюта=ОсновнаяВалюта Тогда
				
				Если СпособВывода="Дерево" Тогда
					ПодготовитьТаблицуРаскрытийДляВывода(?(РежимКорректировки,мКорректировкиПоказателейРаскрытия,мПоказателиРаскрытия));
				КонецЕсли;
			
				ЗапросДанные.УстановитьПараметр("ТабПоказателиРаскрытия",?(РежимКорректировки,мКорректировкиПоказателейРаскрытия,мПоказателиРаскрытия));
				
			Иначе
				
				Если СпособВывода="Дерево" Тогда
					ПодготовитьТаблицуРаскрытийДляВывода(мПоказателиРаскрытияВВалюте);
				КонецЕсли;
			
				ЗапросДанные.УстановитьПараметр("ТабПоказателиРаскрытия",мПоказателиРаскрытияВВалюте);
				
			КонецЕсли;
			
		Иначе
			
			ЗапросДанные.УстановитьПараметр("ТабПоказателиРаскрытия",?(РежимКорректировки,мКорректировкиПоказателейРаскрытия,мПоказателиРаскрытия));
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивТаблицПоказателей.Добавить("мПоказателиРаскрытия");
	МассивТаблицПоказателей.Добавить("ТабПоказателиСвод");
	
	ЗапросДанные.УстановитьПараметр("ПустаяСтрока","");
	
	Если СпособВывода="Дерево" Тогда
		
		ТекстВТ=ТекстВТ+"
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|		ТабПоказателиРаскрытия.ИндексАналитики КАК ИндексАналитики,
		|		ТабПоказателиРаскрытия.Показатель КАК Показатель,
		|       ВЫРАЗИТЬ(ТабПоказателиРаскрытия.Значение КАК Число(18,5)) КАК Значение
		|	Поместить мПоказателиРаскрытия 
		|	ИЗ
		|		&ТабПоказателиРаскрытия КАК ТабПоказателиРаскрытия
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	мПоказатели.Значение КАК Значение,
		|	0 КАК ЗначениеРаскрытия,
		|   &ПустаяСтрока КАК ИндексАналитики
		|ПОМЕСТИТЬ ТабПоказателиСвод
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	0 КАК Значение,
		|	0 КАК ЗначениеРаскрытия,
		|   СводРаскрытия.ИндексАналитики КАК ИндексАналитики
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Показатель КАК Показатель,
		|	ИндексАналитики КАК ИндексАналитики ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия) КАК СводРаскрытия
		| 	ПО мПоказатели.Показатель=СводРаскрытия.Показатель
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиРаскрытия.Строка,
		|	ПоказателиРаскрытия.Колонка,
		|	ПоказателиРаскрытия.ПорядковыйНомерКолонки,
		|	0,
		|	ПоказателиРаскрытия.Значение,
		|	ИндексАналитики КАК ИндексАналитики
		|ИЗ
		|	(ВЫБРАТЬ
		|		мПоказателиРаскрытия.ИндексАналитики КАК ИндексАналитики,
		|		ТабПоказатели.Строка КАК Строка,
		|		ТабПоказатели.Колонка КАК Колонка,
		|		ТабПоказатели.ПорядковыйНомерКолонки КАК ПорядковыйНомерКолонки,
		|		мПоказателиРаскрытия.Показатель КАК Показатель,
		|       мПоказателиРаскрытия.Значение КАК Значение
		|	ИЗ
		|		мПоказателиРаскрытия КАК мПоказателиРаскрытия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоказатели КАК ТабПоказатели
		|			ПО мПоказателиРаскрытия.Показатель = ТабПоказатели.Показатель) КАК ПоказателиРаскрытия
		|ИНДЕКСИРОВАТЬ ПО
		|Строка,Колонка	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиОтчетов.Ссылка КАК Строка,
		|	СтрокиОтчетов.Код КАК КодСтроки,
		|	СтрокиОтчетов.Порядок КАК ПорядокСтроки,
		|	КолонкиОтчетов.Ссылка КАК Колонка,
		|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
		|	ТабПоказателиСвод.Значение КАК Значение,
		|	ТабПоказателиСвод.ЗначениеРаскрытия КАК ЗначениеРаскрытия,
		|   ТабПоказателиСвод.ИндексАналитики
		|ИЗ ТабПоказателиСвод КАК ТабПоказателиСвод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиОтчетов КАК СтрокиОтчетов
		|		ПО ТабПоказателиСвод.Строка=СтрокиОтчетов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка,ПорядковыйНомер 
		|						ИЗ Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		|						ГДЕ КолонкиОтчетов.Владелец=&ВидОтчета
		|						И (НЕ КолонкиОтчетов.ПометкаУдаления)) КАК КолонкиОтчетов
		|		ПО ТабПоказателиСвод.Колонка=КолонкиОтчетов.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|ПорядковыйНомерКолонки,
		|ПорядокСтроки,
		|ИндексАналитики
		|ИТОГИ
		|СУММА(Значение),СУММА(ЗначениеРаскрытия)
		|ПО Строка,ИндексАналитики,Колонка";
		
		МассивГруппировокСтрокИтог=Новый Массив;
		МассивГруппировокСтрокИтог.Добавить("Строка");
		МассивГруппировокСтрокИтог.Добавить("ИндексАналитики");
		
	Иначе	
		
		ТекстВТ=ТекстВТ+"
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ";
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|ТабПоказателиРаскрытия.Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|		ТабПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,
		|		ТабПоказателиРаскрытия.Показатель КАК Показатель,
		|       ВЫРАЗИТЬ(ТабПоказателиРаскрытия.Значение КАК Число(18,5)) КАК Значение
		|	Поместить мПоказателиРаскрытия 
		|	ИЗ
		|		&ТабПоказателиРаскрытия КАК ТабПоказателиРаскрытия
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|Неопределено КАК АналитикаВалюта,";
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|Неопределено КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|	мПоказатели.Значение КАК Значение,
		|	0 КАК ЗначениеРаскрытия
		|ПОМЕСТИТЬ ТабПоказателиСвод
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	СводРаскрытия.АналитикаВалюта КАК АналитикаВалюта,";
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|СводРаскрытия.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|	0 КАК Значение,
		|	0 КАК ЗначениеРаскрытия
		|ИЗ
		|	мПоказатели КАК мПоказатели
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ";
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|	АналитикаВалюта КАК АналитикаВалюта,
		|	Показатель КАК Показатель
		|	ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия) КАК СводРаскрытия
		| 	ПО мПоказатели.Показатель=СводРаскрытия.Показатель
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиРаскрытия.Строка,
		|	ПоказателиРаскрытия.Колонка,
		|	ПоказателиРаскрытия.ПорядковыйНомерКолонки,
		|	ПоказателиРаскрытия.АналитикаВалюта,";
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|	0,
		|	ПоказателиРаскрытия.Значение
		|ИЗ
		|	(ВЫБРАТЬ";
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|мПоказателиРаскрытия.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|		ТабПоказатели.Строка КАК Строка,
		|		ТабПоказатели.Колонка КАК Колонка,
		|		ТабПоказатели.ПорядковыйНомерКолонки КАК ПорядковыйНомерКолонки,
		|		мПоказателиРаскрытия.Показатель КАК Показатель,
		|		мПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,
		|       мПоказателиРаскрытия.Значение КАК Значение
		|	ИЗ
		|		мПоказателиРаскрытия КАК мПоказателиРаскрытия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоказатели КАК ТабПоказатели
		|			ПО мПоказателиРаскрытия.Показатель = ТабПоказатели.Показатель) КАК ПоказателиРаскрытия
		|ИНДЕКСИРОВАТЬ ПО
		|Строка,Колонка	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиОтчетов.Ссылка КАК Строка,
		|	СтрокиОтчетов.Код КАК КодСтроки,
		|	СтрокиОтчетов.Порядок КАК ПорядокСтроки,
		|	КолонкиОтчетов.Ссылка КАК Колонка,
		|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомерКолонки,";
		
		ТекстПредставление="";
		ТекстИтоги="";
		МассивГруппировокСтрокИтог=Новый Массив;
		МассивГруппировокСтрокИтог.Добавить("Строка");
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|ТабПоказателиСвод.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
			
			ТекстПредставление=ТекстПредставление+",Аналитика"+Индекс+".Наименование";
			
			Если СпособВывода="ДеревоГруппировкаСИерархией" Тогда
				
				ТекстВТ=ТекстВТ+"
				| ЕСТЬNULL(ТабПоказателиСвод.Аналитика"+Индекс+".Родитель,Неопределено) КАК Аналитика"+Индекс+"Родитель,
				| ЕСТЬNULL(ТабПоказателиСвод.Аналитика"+Индекс+".ЭтоГруппа,Ложь) КАК Аналитика"+Индекс+"ЭтоГруппа,";
				
				ТекстИтоги=ТекстИтоги+"Аналитика"+Индекс+" Иерархия,";
				
			Иначе
				
				ТекстИтоги=ТекстИтоги+"Аналитика"+Индекс+",";
				
			КонецЕсли;
			
			МассивГруппировокСтрокИтог.Добавить("Аналитика"+Индекс);
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|ТабПоказателиСвод.АналитикаВалюта КАК АналитикаВалюта,";
		
		ТекстПредставление=ТекстПредставление+",АналитикаВалюта.Наименование";
		
		Если СпособВывода="ДеревоГруппировкаСИерархией" Тогда
			
			ТекстВТ=ТекстВТ+"
			| Неопределено КАК АналитикаВалютаРодитель,
			| Ложь КАК АналитикаВалютаЭтоГруппа,";
			
			ТекстИтоги=ТекстИтоги+"АналитикаВалюта Иерархия,";
			
		Иначе
			
			ТекстИтоги=ТекстИтоги+"АналитикаВалюта,";
			
		КонецЕсли;
		
		МассивГруппировокСтрокИтог.Добавить("АналитикаВалюта");
		
		ТекстВТ=ТекстВТ+"
		|	ТабПоказателиСвод.Значение КАК Значение,
		|	ТабПоказателиСвод.ЗначениеРаскрытия КАК ЗначениеРаскрытия
		|ИЗ ТабПоказателиСвод КАК ТабПоказателиСвод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиОтчетов КАК СтрокиОтчетов
		|		ПО ТабПоказателиСвод.Строка=СтрокиОтчетов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка,ПорядковыйНомер 
		|						ИЗ Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		|						ГДЕ КолонкиОтчетов.Владелец=&ВидОтчета
		|						И (НЕ КолонкиОтчетов.ПометкаУдаления)) КАК КолонкиОтчетов
		|		ПО ТабПоказателиСвод.Колонка=КолонкиОтчетов.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|ПорядковыйНомерКолонки,
		|ПорядокСтроки"+ТекстПредставление+"
		|ИТОГИ
		|СУММА(Значение),СУММА(ЗначениеРаскрытия)
		|ПО Строка,"+ТекстИтоги+"Колонка";		
				
	КонецЕсли;
	
	//ТекстВТ=ТекстВТ+"
	//|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросДанные.УстановитьПараметр("ПустаяАналитика",Неопределено);
	ЗапросДанные.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	
	ЗапросДанные.Текст=ТекстВТ;
		
	МассивГруппировокКолонокИтог=Новый Массив;
	МассивГруппировокКолонокИтог.Добавить("Колонка");	
	
	Если ТолькоОбновлениеЗначений Тогда
		
		ОбновитьЗначенияВТаблице(ЗапросДанные.Выполнить());
		
	Иначе	
		
		СформироватьДерево(ЗапросДанные.Выполнить());			
		
	КонецЕсли;
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если МассивТаблицПоказателей.Количество()>0 Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателей Цикл
			ТекстУничтожить=ТекстУничтожить+"
			|Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанные.Текст=ТекстУничтожить;
		ЗапросДанные.Выполнить();
		
		МассивТаблицПоказателей.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьДанныеОтчетов() 

Процедура ОбновитьИтогиПоГруппировке(Выборка,ТекУровень,ТаблицаИтогов)
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда
			
			НачалоКолонок=ПерваяКолонка;
			РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоКолонок);
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-2 Тогда
			
			ОбновитьИтогиПоГруппировке(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],"Все"),ТекУровень+1,ТаблицаИтогов);
			
		ИначеЕсли ТекУровень+1=МассивГруппировокСтрокИтог.Количество()-1  Тогда
			
			ОбновитьРаскрытиеПоГруппировке(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все"),Выборка[ИмяГруппировки],ТекУровеньСтрока,ТаблицаИтогов);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьИтогиПоГруппировке()

Процедура ОбновитьИтогиПоГруппировкеГруппировка(Выборка,ТекУровень,ТаблицаИтогов)
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда
			
			НачалоКолонок=ПерваяКолонка;
			РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоКолонок);
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-1 Тогда
			
			ОбновитьИтогиПоГруппировкеГруппировка(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],"Все"),ТекУровень+1,ТаблицаИтогов);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьИтогиПоГруппировке()

Процедура РазвернутьСтроку(Выборка,ТекУровеньКолонка,ТекУровеньСтрока,ТаблицаИтогов,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки=Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТекУровень>=УровеньКолонка Тогда
			
			Если ТекУровеньСтрока>=УровеньСтрока Тогда
				
				НоваяСтрока=ТаблицаИтогов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				ТекНомерКолонки=ТекНомерКолонки+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
			
			РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень],"Все"),ТекУровень+1,ТекУровеньСтрока,ТаблицаИтогов,ТекНомерКолонки);
			
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтроку()

Процедура ОбновитьРаскрытиеПоГруппировке(Выборка,ВладелецГруппы,ТекУровеньСтрока,ТаблицаИтогов);
	
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти("ИндексАналитики")+1;
		
		НачалоКолонок=ПерваяКолонка;
		РазвернутьСтрокуАналитики(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТаблицаИтогов,НачалоКолонок);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиРаскрытие()

Процедура ОбновитьЗначенияВТаблице(ЗапросИтоги)
	
	// получим таблицу измененных показателей и итогов
	
	Если СтрНайти(Способвывода,"Дерево")>0 Тогда
		
		ТаблицаИтогов=ШаблонКоординаты.СкопироватьКолонки();
		
	Иначе
		
		ТаблицаИтогов=ТабКоординатыОбщ.СкопироватьКолонки();
		
	КонецЕсли;
	
	ТаблицаИтогов.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаИтогов.Колонки.Добавить("ЗначениеРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Если СпособВывода="ДеревоГруппировка" ИЛИ СпособВывода="ДеревоГруппировкаСИерархией" Тогда
		ОбновитьИтогиПоГруппировкеГруппировка(ЗапросИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,ТаблицаИтогов);
	Иначе
		ОбновитьИтогиПоГруппировке(ЗапросИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,ТаблицаИтогов);
	КонецЕсли;
	
	ТекстВыборкаГруппировокИтоги="";
	ТекстВыборкаГруппировокКоординаты="";
	ТекстСвязи="";
	
	Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
		
		ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		ТекстВТ="ВЫБРАТЬ *
		|Поместить ТабКоординатыОбщ
		|ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|;
		|ВЫБРАТЬ";
		
		ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
		
	Иначе
		
		// Поместим для обработки общую таблицу итогов	
		ТекстВТ = "ВЫБРАТЬ";
		
	КонецЕсли;
	
	Для Каждого Группировка ИЗ МассивГруппировокСтрокИтог Цикл
		
		Если НЕ Группировка="ИндексАналитики" Тогда 
			
			ТекстСвязи=ТекстСвязи+"
			|И ТаблицаИтогов."+Группировка+" = ТаблицаКоординат."+Группировка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТекстСвязи=ТекстСвязи+"
		|И ТаблицаИтогов."+Группировка+" = ТаблицаКоординат."+Группировка;
		
	КонецЦикла;	
	
	Если СпособВывода="ДеревоГруппировка" ИЛИ СпособВывода="ДеревоГруппировкаСИерархией" Тогда
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"
			|ТаблицаИтогов.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|ТаблицаИтогов.АналитикаВалюта КАК АналитикаВалюта,
		|ТаблицаИтогов.Строка КАК Строка,
		|ТаблицаИтогов.Колонка КАК Колонка,
		|ТаблицаИтогов.Значение КАК Значение,
		|ТаблицаИтогов.ЗначениеРаскрытия КАК ЗначениеРаскрытия
		|ПОМЕСТИТЬ ТаблицаИтогов ИЗ &ТаблицаИтогов КАК ТаблицаИтогов
		|;";
		ЗапросКоординаты.УстановитьПараметр("ТаблицаИтогов", ТаблицаИтогов);
		
		ТекстВТ=ТекстВТ+"
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТаблицаКоординат.НомерСтроки,
		|ТаблицаКоординат.НомерКолонки,
		|ТаблицаКоординат.Раскрытие,
		|ТаблицаИтогов.Значение,
		|ТаблицаИтогов.ЗначениеРаскрытия
		|ИЗ ТаблицаИтогов КАК ТаблицаИтогов
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТаблицаКоординат
		|ПО" +Сред(ТекстСвязи,3);
		
	Иначе
		
		ТекстВТ=ТекстВТ+"
		|ISNULL(ТаблицаИтогов.ИндексАналитики,"""") КАК ИндексАналитики,
		|ТаблицаИтогов.Строка КАК Строка,
		|ТаблицаИтогов.Колонка КАК Колонка,
		|ТаблицаИтогов.Значение КАК Значение,
		|ТаблицаИтогов.ЗначениеРаскрытия КАК ЗначениеРаскрытия
		|ПОМЕСТИТЬ ТаблицаИтогов ИЗ &ТаблицаИтогов КАК ТаблицаИтогов
		|;";
		ЗапросКоординаты.УстановитьПараметр("ТаблицаИтогов", ТаблицаИтогов);
		
		ТекстВТ=ТекстВТ+"
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТаблицаКоординат.НомерСтроки,
		|ТаблицаКоординат.НомерКолонки,
		|ТаблицаКоординат.Раскрытие,
		|ТаблицаИтогов.Значение,
		|ТаблицаИтогов.ЗначениеРаскрытия
		|ИЗ ТаблицаИтогов КАК ТаблицаИтогов
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТаблицаКоординат
		|ПО ТаблицаИтогов.ИндексАналитики=ТаблицаКоординат.ИндексАналитики"+ТекстСвязи;
		
	КонецЕсли;
	
	ЗапросКоординаты.Текст=ТекстВТ;
	
	МассивИзмененныхОбластей=Новый Массив;
	
	РучноеИзменениеСтрока=?(ИзменяемаяЯчейка=Неопределено,0,ИзменяемаяЯчейка.Строка);
	РучноеИзменениеКолонка=?(ИзменяемаяЯчейка=Неопределено,0,ИзменяемаяЯчейка.Колонка);
	
	Результат=ЗапросКоординаты.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Если Результат.НомерСтроки=РучноеИзменениеСтрока 
			И Результат.НомерКолонки=РучноеИзменениеКолонка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеИзменения=?(Результат.Раскрытие,Результат.ЗначениеРаскрытия,Результат.Значение);
		
		СтрДерева=ТабДерево.Строки.Найти(Результат.НомерСтроки,"НомерСтроки",Истина);
		
		Если СтрДерева=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрДерева[Результат.НомерКолонки-1]=СтрДерева[Результат.НомерКолонки-1]+ЗначениеИзменения/ТекущийДелитель;
		
		
		СтруктураЯчейка=Новый Структура;	
		
		СтруктураЯчейка.Вставить("АдресСтроки",ПолучитьАбсолютныйАдресСтрокиДерева(СтрДерева,ТабДерево));
		СтруктураЯчейка.Вставить("АдресКолонки",Результат.НомерКолонки-1);
		СтруктураЯчейка.Вставить("Значение",СтрДерева[Результат.НомерКолонки-1]);
		МассивИзмененныхОбластей.Добавить(СтруктураЯчейка);
		
	КонецЦикла;	
	
	ЗапросКоординаты.Текст="Уничтожить ТаблицаИтогов";
	
	Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|;
		|Уничтожить ТабКоординатыОбщ";
		
		ТаблицаКоординатПомещенаВЗапрос=Ложь;
		
	КонецЕсли;
	
	ЗапросКоординаты.Выполнить();
	
КонецПроцедуры // ОбновитьЗначенияВТаблице() 

Процедура ОбновитьЗначенияРаскрытияВТеле(ТабДок=Неопределено) Экспорт
		
	Если НЕ ТаблицаКоординатПомещенаВЗапрос Тогда
		
		ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		ЗапросКоординаты.Текст="ВЫБРАТЬ *
		|Поместить ТабКоординатыОбщ
		|ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ";
		
		ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
		ЗапросКоординаты.Выполнить();
		
	КонецЕсли;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ
	|	ИзмененныеПоказатели.Ссылка,
	|	ИзмененныеПоказатели.Значение,
	|	ИзмененныеПоказатели.ЗначениеИзменения
	|ПОМЕСТИТЬ ИзмененныеПоказатели
	|ИЗ
	|	&ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененныеПоказателиРаскрытия.Показатель,
	|	ИзмененныеПоказателиРаскрытия.ИндексАналитики,
	|	ИзмененныеПоказателиРаскрытия.Значение,
	|	ИзмененныеПоказателиРаскрытия.ЗначениеИзменения
	|ПОМЕСТИТЬ ИзмененныеПоказателиРаскрытия
	|ИЗ
	|	&ИзмененныеПоказателиРаскрытия КАК ИзмененныеПоказателиРаскрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененныеПоказатели.Ссылка КАК Показатель,
	|	"""" КАК ИндексАналитики,
	|	ИзмененныеПоказатели.Значение КАК Значение,
	|	ИзмененныеПоказатели.ЗначениеИзменения КАК ЗначениеИзменения,
	|	ЛОЖЬ КАК Раскрытие
	|ПОМЕСТИТЬ ИзмененныеПоказателиСвод
	|ИЗ
	|	ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзмененныеПоказателиРаскрытия.Показатель,
	|	ИзмененныеПоказателиРаскрытия.ИндексАналитики,
	|	ИзмененныеПоказателиРаскрытия.Значение,
	|	ИзмененныеПоказателиРаскрытия.ЗначениеИзменения,
	|	ИСТИНА
	|ИЗ
	|	ИзмененныеПоказателиРаскрытия КАК ИзмененныеПоказателиРаскрытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель,
	|	ИндексАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабКоординатыОбщ.НомерСтроки,
	|	ТабКоординатыОбщ.НомерКолонки,
	|	ТабКоординатыОбщ.Показатель,
	|	ИзмененныеПоказателиСвод.Значение,
	|	ИзмененныеПоказателиСвод.ЗначениеИзменения
	|ИЗ
	|	ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеПоказателиСвод КАК ИзмененныеПоказателиСвод
	|		ПО ТабКоординатыОбщ.Показатель = ИзмененныеПоказателиСвод.Показатель
	|			И ТабКоординатыОбщ.ИндексАналитики = ИзмененныеПоказателиСвод.ИндексАналитики";
	
	ЗапросКоординаты.УстановитьПараметр("ИзмененныеПоказатели",мИзмененныеПоказатели);
	ЗапросКоординаты.УстановитьПараметр("ИзмененныеПоказателиРаскрытия",мИзмененныеПоказателиРаскрытия);
	
	РучноеИзменениеСтрока=?(ИзменяемаяЯчейка=Неопределено,0,ИзменяемаяЯчейка.Строка);
	РучноеИзменениеКолонка=?(ИзменяемаяЯчейка=Неопределено,0,ИзменяемаяЯчейка.Колонка);
	
	МассивИзмененныхОбластей=Новый Массив;
	
	Результат=ЗапросКоординаты.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.НомерСтроки=0 
			ИЛИ Результат.НомерКолонки=0
			ИЛИ (Результат.НомерСтроки=РучноеИзменениеСтрока 
			И Результат.НомерКолонки=РучноеИзменениеКолонка
			И ЗначениеЗаполнено(Результат.Значение)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрПоказатель=мСоответствиеДляПоискаПоСсылке[Результат.Показатель];
		
		РабЗначениеДелителя=?(СтрПоказатель.НеМасштабируется,1,ТекущийДелитель);
		
		Если НЕ ТабДок=Неопределено Тогда 
			
			ТекОбласть=ТабДок.Область(Результат.НомерСтроки,Результат.НомерКолонки,Результат.НомерСтроки,Результат.НомерКолонки);							
			
			Если ЗначениеЗаполнено(Результат.Значение) Тогда
				ТекОбласть.Значение=ТекОбласть.Значение+?(ТипЗнч(Результат.Значение)=Тип("Число"),Результат.Значение/РабЗначениеДелителя,Результат.Значение);
			Иначе
				ТекОбласть.Значение=Результат.ЗначениеИзменения;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеОбласти=Новый Структура;
		ДанныеОбласти.Вставить("Верх",Результат.НомерСтроки);
		ДанныеОбласти.Вставить("Лево",Результат.НомерКолонки);
		ДанныеОбласти.Вставить("Низ",Результат.НомерСтроки);
		ДанныеОбласти.Вставить("Право",Результат.НомерКолонки);
		ДанныеОбласти.Вставить("Значение",?(ТипЗнч(Результат.Значение)=Тип("Число"),Результат.Значение/РабЗначениеДелителя,Результат.Значение));
		ДанныеОбласти.Вставить("ЗначениеИзменения",Результат.ЗначениеИзменения);
	
		МассивИзмененныхОбластей.Добавить(ДанныеОбласти);
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="Уничтожить ИзмененныеПоказателиСвод
	|;
	|Уничтожить ИзмененныеПоказатели
	|;
	|Уничтожить ИзмененныеПоказателиРаскрытия";
	
	Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|;
		|Уничтожить ТабКоординатыОбщ";
		
		ТаблицаКоординатПомещенаВЗапрос=Ложь;
		
	КонецЕсли;
	
	ЗапросКоординаты.Выполнить();		
	
КонецПроцедуры // ОбновитьЗначенияРаскрытияВТеле()

Процедура ОпределитьПутьДоКорняДерева(СтрокаДерева,ДеревоЗначений,МассивАдресов);
	
	Если СтрокаДерева.Родитель=Неопределено Тогда
		
		МассивАдресов.Вставить(0,ДеревоЗначений.Строки.Индекс(СтрокаДерева));
		Возврат 
		
	Иначе
		
		МассивАдресов.Вставить(0,СтрокаДерева.Родитель.Строки.Индекс(СтрокаДерева));
		ОпределитьПутьДоКорняДерева(СтрокаДерева.Родитель,ДеревоЗначений,МассивАдресов);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьПутьДоКорняДерева() 

Функция ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ДеревоЗначений) Экспорт
	
	МассивАдресов=Новый Массив;
	
	ОпределитьПутьДоКорняДерева(СтрокаДерева,ДеревоЗначений,МассивАдресов);
	
	Возврат МассивАдресов;
	
КонецФункции // ПолучитьАбсолютныйАдресСтрокиДерева() 

Функция ПолучитьИзмененныеПоказателиРаскрытия() Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ	
	|ЛогИзмененийРаскрытийПоказателей.Показатель,
	|ЛогИзмененийРаскрытийПоказателей.АналитикаВалюта,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|ЛогИзмененийРаскрытийПоказателей.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ЛогИзмененийРаскрытийПоказателей.ДобавлениеАналитики КАК ДобавлениеАналитики,
	|ЛогИзмененийРаскрытийПоказателей.СторнированиеАналитики КАК СторнированиеАналитики
	|ПОМЕСТИТЬ ИзмененныеПоказателиРаскрытия
	|ИЗ &ЛогИзмененийРаскрытийПоказателей КАК ЛогИзмененийРаскрытийПоказателей
	|ГДЕ 
	|ЛогИзмененийРаскрытийПоказателей.НомерОперации = &НомерОперации
	|;
	|ВЫБРАТЬ
	|СводноеИзменениеАналитики.Показатель,
	|СводноеИзменениеАналитики.АналитикаВалюта,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|СводноеИзменениеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|СУММА(СводноеИзменениеАналитики.ИндексОперации) КАК ИндексОперации";
	
	Если СтрНайти(СпособВывода,"Группировка")>0 Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ПОМЕСТИТЬ СводноеИзменениеАналитики";
		
	КонецЕсли;
		
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|(
	|ВЫБРАТЬ	
	|СторнированныеАналитики.Показатель,
	|СторнированныеАналитики.АналитикаВалюта,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|СторнированныеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|-1 КАК ИндексОперации
	|ИЗ ИзмененныеПоказателиРаскрытия КАК СторнированныеАналитики
	|ГДЕ СторнированныеАналитики.СторнированиеАналитики
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ	
	|НовыеАналитики.Показатель,
	|НовыеАналитики.АналитикаВалюта,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|НовыеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|1 КАК ИндексОперации
	|ИЗ ИзмененныеПоказателиРаскрытия КАК НовыеАналитики
	|ГДЕ НовыеАналитики.ДобавлениеАналитики) КАК СводноеИзменениеАналитики
	|СГРУППИРОВАТЬ ПО
	|СводноеИзменениеАналитики.Показатель,
	|СводноеИзменениеАналитики.АналитикаВалюта";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+",		
		|СводноеИзменениеАналитики.Аналитика"+ИндексАналитики;
		
	КонецЦикла;	
	
	Запрос.Текст=Запрос.Текст+"
	|ИМЕЮЩИЕ СУММА(СводноеИзменениеАналитики.ИндексОперации)<>0"; 
	
	Запрос.УстановитьПараметр("НомерОперации",НомерТекущейОперации);	
	Запрос.УстановитьПараметр("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
	
	Если СтрНайти(СпособВывода,"Группировка")>0 Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|;
		|ВЫБРАТЬ
		|СводноеИзменениеАналитики.Показатель,
		|СводноеИзменениеАналитики.АналитикаВалюта";
		
		ТекстИтоги="Показатель,АналитикаВалюта";
		ТекстСвертки=ТекстИтоги;
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Запрос.Текст=Запрос.Текст+"		
			|,СводноеИзменениеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики;
			
			ТекстСвертки=ТекстСвертки+",Аналитика"+ИндексАналитики;
			
			Если СпособВывода="ДеревоГруппировкаСИерархией" Тогда
				
				ТекстИтоги=ТекстИтоги+",Аналитика"+ИндексАналитики+" Иерархия";
				
			Иначе
				
				ТекстИтоги=ТекстИтоги+",Аналитика"+ИндексАналитики;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст=Запрос.Текст+",
		|СводноеИзменениеАналитики.ИндексОперации
		|ИЗ
		|СводноеИзменениеАналитики КАК СводноеИзменениеАналитики
		|ИТОГИ Сумма(СводноеИзменениеАналитики.ИндексОперации)
		|ПО
		|"+ТекстИтоги;
		
		ТабАналитики=Запрос.Выполнить().Выгрузить();
		ТабАналитики.Свернуть(ТекстСвертки+",ИндексОперации");
		
		Возврат ТабАналитики;
		
	Иначе
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции // ПолучитьИзмененныеПоказателиРаскрытия 

Процедура РазвернутьСтрокуПоАналитике(СтрокаДерева,МассивПропускаемыхАналитик=Неопределено,ДобавленоСтрок=0) Экспорт
	
	// Определим, являются ли подчиненные строки строками раскрытия
	
	Если СтрокаДерева.ЕстьАналитика И (НЕ ДанныеРаскрытияИнициализированы) Тогда
		
		ЗапросКоординаты.Текст="ВЫБРАТЬ
		|*
		|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ГДЕ (НЕ ТабКоординатыОбщ.Раскрытие)
		|И ТабКоординатыОбщ.НомерСтроки=&НомерСтроки";
		
		ЗапросКоординаты.УстановитьПараметр("НомерСтроки",СтрокаДерева.НомерСтроки);
		
		Результат=ЗапросКоординаты.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ПолучитьДанныеАналитики(Результат.Строка,СтрокаДерева,Результат,МассивПропускаемыхАналитик,ДобавленоСтрок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РазвернутьСтрокуПоАналитике()

Функция ДобавитьСтрокиРаскрытияДерево(СтрокиКДобавлению)
	
	Перем ВсегоСтрок;
	
	ДобавленоСтрок=0;
	ТабКоординатыНов=ШаблонКоординаты.СкопироватьКолонки();
	СтрокиКДобавлению.Колонки.Добавить("НомерСтрокиНов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
	
	СоответствиеСтрокАналитик=Новый Соответствие;
	
	МассивОбработанныхСтрок=Новый Массив;
	
	Для Каждого СтрАналитика ИЗ СтрокиКДобавлению Цикл
		
		Если ЗначениеЗаполнено(СтрАналитика.ИндексАналитикиТек) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерДобавленнойСтроки = СоответствиеСтрокАналитик.Получить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов);
		
		Если НомерДобавленнойСтроки = Неопределено Тогда 
			
			НомерСтроки=СтрАналитика.НомерСтроки;
			НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
			СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
			
			СтрокаДереваИсходная=ТабДерево.Строки.Найти(НомерСтроки,"НомерСтроки",Истина);
			
			// Для управляемого режима ////////
			
			Если УправляемыйРежим Тогда
				СтруктураСтрока=Новый Структура;
			КонецЕсли;
			
			////////////////////////////////////
			
			Если СтрАналитика.ИндексАналитикиДляПоиска="" Тогда
				
				Если СтрокаДереваИсходная.Строки.Количество()=0 Тогда
					
					МассивПропускаемыхАналитик=Новый Массив;
					МассивПропускаемыхАналитик.Добавить(СтрАналитика.ИндексАналитикиНов);
					
					РазвернутьСтрокуПоАналитике(СтрокаДереваИсходная,МассивПропускаемыхАналитик,ДобавленоСтрок);
					
				КонецЕсли;
				
				ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
				
				НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
				СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
				
				НоваяСтрокаДерева=СтрокаДереваИсходная.Строки.Вставить(0);
				НоваяСтрокаДерева.НомерСтроки=НомерСтрокиНов;
				НоваяСтрокаДерева.Раскрытие=Истина;
				НоваяСтрокаДерева.ДанныеАналитики=2;
				
				
				// Для управляемого режима ////////
				
				Если УправляемыйРежим Тогда
					СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДереваИсходная,ТабДерево));
					СтруктураСтрока.Вставить("ИндексВставки",0);
				КонецЕсли;
				
				///////////////////////////////////
				
			Иначе	
				
				НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
				СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
				
				ИндексСтрокиИсходной=СтрокаДереваИсходная.Родитель.Строки.Индекс(СтрокаДереваИсходная);
				
				МассивОбработанныхСтрок.Добавить(СтрАналитика.НомерСтроки);
				НоваяСтрокаДерева=СтрокаДереваИсходная.Родитель.Строки.Вставить(ИндексСтрокиИсходной+1);
				НоваяСтрокаДерева.НомерСтроки=НомерСтрокиНов;
				НоваяСтрокаДерева.Раскрытие=Истина;
				НоваяСтрокаДерева.ДанныеАналитики=2;
				
				// Для управляемого режима ////////
				
				Если УправляемыйРежим Тогда
					СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДереваИсходная.Родитель,ТабДерево));
					СтруктураСтрока.Вставить("ИндексВставки",ИндексСтрокиИсходной+1);
				КонецЕсли;
				
				///////////////////////////////////
				
			КонецЕсли;
			
			НоваяСтрокаДерева.ЕстьЗаполнение=СтрокаДереваИсходная.ЕстьЗаполнение;
			НоваяСтрокаДерева.ЕстьВычисление=СтрокаДереваИсходная.ЕстьВычисление;
			
			НомерЯчейки=8;
			
			Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				
				НоваяСтрокаДерева[НомерЯчейки]=СтрАналитика["Аналитика"+Индекс+"Нов"];					
				НомерЯчейки=НомерЯчейки+1;
				
			КонецЦикла;
			
			СоответствиеСтрокАналитик.Вставить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов,СтрАналитика.НомерСтрокиНов);
			ДобавленоСтрок=ДобавленоСтрок+1;
			
			// Для управляемого режима ////////
			
			Если УправляемыйРежим Тогда
				
				ДанныеНовойСтроки=Новый Структура;
				Для Каждого Колонка ИЗ ТабДерево.Колонки Цикл
					ДанныеНовойСтроки.Вставить(Колонка.Имя,НоваяСтрокаДерева[Колонка.Имя]);
				КонецЦикла;
				
				СтруктураСтрока.Вставить("ДанныеНовойСтроки",ДанныеНовойСтроки);
				МассивДобавленныхСтрокКПередаче.Добавить(СтруктураСтрока);
				
			КонецЕсли;
			
			
		Иначе
			
			СтрАналитика.НомерСтрокиНов=НомерДобавленнойСтроки;
			
		КонецЕсли;
		
		НоваяСтрокаКоординат=ТабКоординатыНов.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКоординат,СтрАналитика);
		НоваяСтрокаКоординат.ИндексАналитики=СтрАналитика.ИндексАналитикиНов;
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрокаКоординат["Аналитика"+ИндексАналитики]=СтрАналитика["Аналитика"+ИндексАналитики+"Нов"];
			
		КонецЦикла;
		
		НоваяСтрокаКоординат["АналитикаВалюта"]=СтрАналитика["АналитикаВалютаНов"];
		
		НоваяСтрокаКоординат.НомерСтроки=СтрАналитика.НомерСтрокиНов;
		НоваяСтрокаКоординат.Раскрытие=Истина;
		
		НоваяСтрока=ТабКоординатыСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,НоваяСтрокаКоординат);
		НоваяСтрока.ИмяГруппировки="ИндексАналитики";
		НоваяСтрока.УровеньСтроки=Истина;
		
		//////////////////////////////////////
		
	КонецЦикла;
	
	Если ДобавленоСтрок=0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыНов ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыИтог ИЗ &ТабКоординатыИтог КАК ТабКоординатыИтог
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки, Показатель, ИндексАналитикиДляПоиска 
	|; 
	|";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыИтог",СтрокиКДобавлению);
	
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		ТекстКоординатыНов=ТекстКоординатыНов+"
		|ТабКоординатыНов."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			Если СтрокиКДобавлению.Колонки.Найти(Колонка.Имя+"Нов")=Неопределено Тогда
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+" КАК "+Колонка.Имя+",";
				
			Иначе
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+"Нов КАК "+Колонка.Имя+",";
				
			КонецЕсли;
			
		ИначеЕсли Колонка.Имя="ИндексАналитики" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыИтог.ИндексАналитикиНов КАК ИндексАналитики,";
		ИначеЕсли Колонка.Имя="Раскрытие" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ИСТИНА КАК Раскрытие,";
		Иначе
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ТабКоординатыОбщ.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыНов+"
	|ТабКоординатыНов.НомерСтроки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыИтог+"
	|ТабКоординатыИтог.НомерСтрокиНов КАК НомерСтроки
	|ИЗ ТабКоординатыИтог КАК ТабКоординатыИтог
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ПО ТабКоординатыИтог.НомерСтроки=ТабКоординатыОбщ.НомерСтроки
	|И  ТабКоординатыИтог.Строка=ТабКоординатыОбщ.Строка
	|И  ТабКоординатыИтог.ИндексАналитикиДляПоиска=ТабКоординатыОбщ.ИндексАналитики
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлению
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлениюСвод
	|;
	|УНИЧТОЖИТЬ ТабКоординатыНов
	|;
	|УНИЧТОЖИТЬ ТабКоординатыИтог
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,Показатель,Раскрытие,Строка,Колонка
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 
	
	ЗапросКоординаты.Выполнить();
	
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытияДерево()

Процедура СохранитьРаскрытыеГруппы() Экспорт;
	
	ТабРаскрытиеГруппСтроки.Сортировать("НачалоГруппы, КонецГруппы Убыв");
	
	Для Каждого СтрГруппа ИЗ ТабРаскрытиеГруппСтроки Цикл
		
		ОбластьОбработки=ТабДок.Область(СтрГруппа.НачалоГруппы,,СтрГруппа.КонецГруппы,);
		СтрГруппа.Раскрыта=?(ОбластьОбработки.Видимость=Неопределено,Истина,ОбластьОбработки.Видимость);
		
	КонецЦикла;
	
КонецПроцедуры // СохранитьРаскрытыеГруппы()

Процедура РазгруппироватьСтрокиДокумента()
	
	СохранитьРаскрытыеГруппы();
	
	Для Каждого СтрРаскрытие ИЗ ТабРаскрытиеГруппСтроки Цикл
		
		ОбластьОбработки=ТабДок.Область("R"+Формат((СтрРаскрытие.НачалоГруппы),"ЧГ=0")+":R"+Формат(СтрРаскрытие.КонецГруппы,"ЧГ=0"));	
		ОбластьОбработки.Видимость=Истина;	
		ОбластьОбработки.Разгруппировать();
		
	КонецЦикла;
	
	СтрокиРазгруппированы=Истина;
	
КонецПроцедуры // РазгруппироватьСтрокиДокумента()

Процедура СгруппироватьСтрокиДокумента()
	
	Для Каждого СтрРаскрытие ИЗ ТабРаскрытиеГруппСтроки Цикл
		
		Если СтрРаскрытие.УровеньГруппировки=1 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьОбработки=ТабДок.Область("R"+Формат((СтрРаскрытие.НачалоГруппы),"ЧГ=0")+":R"+Формат(СтрРаскрытие.КонецГруппы,"ЧГ=0"));		
		ОбластьОбработки.Сгруппировать();
		ОбластьОбработки.Видимость=СтрРаскрытие.Раскрыта;
		
	КонецЦикла;
	
КонецПроцедуры // СгруппироватьСтрокиДокумента()

Процедура СгруппироватьСтрокиПоИерархии() Экспорт
	
	ТекстУсловие="";
	
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросКоординаты.Текст="ВЫБРАТЬ *
	|Поместить ТабКоординатыОбщ
	|ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Строка,НомерСтроки
	|ПОМЕСТИТЬ РабКоординаты 
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ (НЕ ТабКоординатыОбщ.Раскрытие=ИСТИНА)
	|;
	|Выбрать * ИЗ РабКоординаты
	|Упорядочить ПО РабКоординаты.НомерСтроки";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
	ТабКоординатыСтрок=ЗапросКоординаты.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ ДеревоСтрок.Строки Цикл
		
		Если Строка.Строки.Количество()>1 Тогда
			
			ВыполнитьГруппировкуСтрок(Строка,ТабКоординатыСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="Уничтожить РабКоординаты";
	ЗапросКоординаты.Выполнить();
	
КонецПроцедуры // СгруппироватьСтрокиПоИерархии

Процедура ВыполнитьГруппировкуСтрок(СтрокаДерева,РабКоординаты)
	
	ТекСтрока=СтрокаДерева.Ссылка;
	
	МассивКоординат=ТабКоординатыСтрок.НайтиСтроки(Новый Структура("Строка",ТекСтрока));
	
	Если МассивКоординат.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаКоордината ИЗ МассивКоординат Цикл
		
		НачалоОбласти=СтрокаКоордината.НомерСтроки;
		КонецОбласти=СтрокаКоордината.НомерСтроки;
		НачалоПоиска=ТабКоординатыСтрок.Индекс(ТабКоординатыСтрок.Найти(НачалоОбласти,"НомерСтроки"));
		
		Для Индекс=НачалоПоиска ПО ТабКоординатыСтрок.Количество()-1 Цикл
			
			ТекКоордината=ТабКоординатыСтрок[Индекс];
			
			Если ТекКоордината.Строка=ТекСтрока 
				ИЛИ (НЕ СтрокаДерева.Строки.Найти(ТекКоордината.Строка,"Ссылка",Истина)=Неопределено) Тогда
				
				КонецОбласти=ТекКоордината.НомерСтроки;
				
			Иначе
				
				Если НЕ НачалоОбласти>=КонецОбласти Тогда
					
					НоваяСтрока=ТабРаскрытиеГруппСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоордината);
					НоваяСтрока.НачалоГруппы=НачалоОбласти+1;
					НоваяСтрока.КонецГруппы=КонецОбласти;
					НоваяСтрока.ДобавленаВручную=Ложь;
					НоваяСтрока.УровеньГруппировки=1;
					
					ТабДок.Область(НачалоОбласти+1,,КонецОбласти,).Сгруппировать();
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ НачалоОбласти>=КонецОбласти Тогда
		
		НоваяСтрока=ТабРаскрытиеГруппСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоордината);
		НоваяСтрока.НачалоГруппы=НачалоОбласти+1;
		НоваяСтрока.КонецГруппы=КонецОбласти;
		НоваяСтрока.ДобавленаВручную=Ложь;
		НоваяСтрока.УровеньГруппировки=1;
		
		ТабДок.Область(НачалоОбласти+1,,КонецОбласти,).Сгруппировать();
		
	КонецЕсли;
	
	Для Каждого Строка ИЗ СтрокаДерева.Строки Цикл
		
		Если Строка.Строки.Количество()>1 Тогда
			
			ВыполнитьГруппировкуСтрок(Строка,РабКоординаты);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьГруппировкуСтрок()

Процедура СгруппироватьСтрокиРаскрытия(СтрРаскрытия) Экспорт
	
	Если СтрРаскрытия.ТаблицаРаскрытия.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обл = ТабДок.Области.Найти("Строка_"+СтрРаскрытия.КодСтроки);
	Если Обл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Верх=Обл.Верх;
	
	ОбластьОбработки=ТабДок.Область("R"+Формат((Верх+1),"ЧГ=0")+":R"+Формат((Верх+СтрРаскрытия.ТабДокРаскрытие.ВысотаТаблицы),"ЧГ=0"));
	
	НоваяСтрока=ТабРаскрытиеГруппСтроки.Добавить();
	НоваяСтрока.Строка=СтрРаскрытия.Строка;
	НоваяСтрока.НачалоГруппы=Верх+1;
	НоваяСтрока.КонецГруппы=Верх+СтрРаскрытия.ТабДокРаскрытие.ВысотаТаблицы;
	НоваяСтрока.ДобавленаВручную=Ложь;
	НоваяСтрока.УровеньГруппировки=2;
	
	ОбластьОбработки.Сгруппировать();
	ОбластьОбработки.Видимость=Ложь;
	
КонецПроцедуры // СгруппироватьСтрокиРаскрытия()

Процедура РазгруппироватьСтрокиРаскрытия(СтрРаскрытия, ТабДокумент) Экспорт
	
	Обл = ТабДокумент.Области.Найти("Строка_"+СтрРаскрытия.КодСтроки);
	
	Если Обл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Верх=Обл.Верх;
	
	ОбластьОбработки=ТабДокумент.Область("R"+Формат((Верх+1),"ЧГ=0")+":R"+Формат((Верх+СтрРаскрытия.ТабДокРаскрытие.ВысотаТаблицы),"ЧГ=0"));
	//СтруктураВидимостиГрупп.Вставить("Строка_"+СтрРаскрытия.КодСтроки,ОбластьОбработки.Видимость);
	
	ОбластьОбработки.Видимость=Истина;
	
	ОбластьОбработки.Разгруппировать();
	
КонецПроцедуры

Функция ОпределитьВысотуШапки(МакетыРаскрытия) Экспорт
	
	Возврат ?(МакетыРаскрытия = Неопределено ИЛИ МакетыРаскрытия.Шапка = Неопределено	, 0, МакетыРаскрытия.Шапка.ВысотаТаблицы);
	
КонецФункции // ОпределитьВысотуШапки() 

Функция ДобавитьСтрокиРаскрытияТаблица(СтрокиКДобавлению)
	
	ДобавленоСтрок=0;
	ТабКоординатыНов=ТабКоординатыОбщ.СкопироватьКолонки();
	СтрокиКДобавлению.Колонки.Добавить("НомерСтрокиНов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ТекстОбновление="";
	ТекстОбновлениеНачалоГруппы="";
	ТекстОбновлениеКонецГруппы="";
	ТекстВыбор="";
	
	МассивОбработанныхСтрок=Новый Массив;
	СоответствиеСтрокАналитик=Новый Соответствие;
	
	Для Каждого СтрАналитика ИЗ СтрокиКДобавлению Цикл
		
		Если ЗначениеЗаполнено(СтрАналитика.ИндексАналитикиТек)
			ИЛИ (Не ЗначениеЗаполнено(СтрАналитика.НомерСтроки)) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерДобавленнойСтроки = СоответствиеСтрокАналитик.Получить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов);
		
		Если НомерДобавленнойСтроки=Неопределено Тогда // Вставляем новую строку
			
			Если Не СтрокиРазгруппированы Тогда
				РазгруппироватьСтрокиДокумента();
			КонецЕсли;
			
			НомерСтроки=СтрАналитика.НомерСтроки+ДобавленоСтрок;
			НомерСтрокиНов=СтрАналитика.НомерСтроки+ДобавленоСтрок+1;
			СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
			
			МассивОбработанныхСтрок.Добавить(СтрАналитика.НомерСтроки);
			
			ТекстОбновление=СтрЗаменить(ТекстОбновление,"##", " И ТабКоординатыОбщ.НомерСтроки<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")); 
			ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
			ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
			
			////////////////////////////////////////////////////////////////////////////////////////////
			// Определим признак видимости группы
			
			НоваяГруппа=Ложь;
			
			СтруктураПоиска=Новый Структура;		
			СтруктураПоиска.Вставить("Строка",СтрАналитика.Строка);			
			
			МассивГруппа=ТабРаскрытиеГруппСтроки.НайтиСтроки(СтруктураПоиска);
			
			Если МассивГруппа.Количество()=0 Тогда
				
				СтрГруппа=ТабРаскрытиеГруппСтроки.Добавить();
				СтрГруппа.Строка=СтруктураПоиска.Строка;
				
				СтрГруппа.НачалоГруппы=НомерСтрокиНов;
				СтрГруппа.КонецГруппы=0;
				СтрГруппа.Раскрыта=Истина;
				СтрГруппа.УровеньГруппировки=2;
				
				НоваяГруппа=Истина;
				
			Иначе
				
				СтрГруппа=МассивГруппа[0]; 
				СтрГруппа.НачалоГруппы=СтрГруппа.НачалоГруппы+ДобавленоСтрок;
				
			КонецЕсли;
			
			СтрГруппа.КонецГруппы=?(СтрГруппа.КонецГруппы=0,СтрГруппа.НачалоГруппы,СтрГруппа.КонецГруппы+ДобавленоСтрок+1);
			СтрГруппа.ДобавленаВручную=Истина;
			
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Формируем макет раскрытия строки
			
			СтрРаскрытия=ТабОбластиРаскрытия.Найти(СтрАналитика.Строка,"Строка");
			СдвигПоВертикали=ОпределитьВысотуШапки(СтрРаскрытия.МакетыРаскрытия);
			Обл = ТабДок.Области.Найти("Строка_"+СтрРаскрытия.КодСтроки);
			
			ТекТаблицаРаскрытия=СтрРаскрытия.ТаблицаРаскрытия.СкопироватьКолонки();
			НоваяСтрока=ТекТаблицаРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
			
			Для Каждого Колонка ИЗ ТекТаблицаРаскрытия.Колонки Цикл
				
				Если СтрНайти(Колонка.Имя,"Аналитика")>0 И (НЕ СтрокиКДобавлению.Колонки.Найти(Колонка.Имя+"Нов")=Неопределено) Тогда
					
					НоваяСтрока[Колонка.Имя]=СтрАналитика[Колонка.Имя+"Нов"];
					
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.ИндексАналитики=СтрАналитика.ИндексАналитикиНов;	
			
			ТабДокРаскрытия=СгенерироватьМакетРаскрытияСтрока(СтрРаскрытия.ГруппаРаскрытия
			, ТекТаблицаРаскрытия
			, ВернутьТекущуюСтруктуруОтбораИзСоответствия(СтрРаскрытия.КодСтроки)
			, СтрРаскрытия.КодСтроки
			, СтрРаскрытия.МакетыРаскрытия,
			СтрРаскрытия.ПоказателиКолонки,
			ЛОЖЬ);
			
			ТекПоложениеКолонки = Неопределено;
			
			Для Каждого ОблРаскр Из ТабДокРаскрытия.Области Цикл
				Если СтрНайти(ОблРаскр.Имя, "_Показатель_") > 0 Тогда
					Если ТекПоложениеКолонки = Неопределено ИЛИ ОблРаскр.Лево < ТекПоложениеКолонки Тогда
						ТекПоложениеКолонки = ОблРаскр.Лево;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//	СмещениеПоказателей = ПоложениеПервойКолонкиПриРаскрытии - ТекПоложениеКолонки;	
			
			СмещениеПоказателей=0;
			Если СдвигПоВертикали>0 Тогда
				
				Если ПустаяСтрока(СтрАналитика.ИндексАналитикиДляПоиска) Тогда
					
					СдвигДоп=СдвигПоВертикали;
					
				Иначе
					
					СдвигДоп=0;
					
				КонецЕсли;
				
			Иначе
				
				СдвигДоп=0;
				
			КонецЕсли;
			
			Для Индекс=1 По ТабДокРаскрытия.ВысотаТаблицы Цикл
				
				ИсходнаяОбласть=ТабДок.Область(НомерСтроки+Индекс-1+СдвигДоп,Обл.Лево,НомерСтроки+Индекс-1+СдвигДоп,ТабДок.ШиринаТаблицы);
				ОбластьВставки=ТабДок.Область(НомерСтроки+Индекс+СдвигПоВертикали-1+СдвигДоп,Обл.Лево,НомерСтроки+Индекс+СдвигПоВертикали-1+СдвигДоп,ТабДок.ШиринаТаблицы);
				
				ТабДок.ВставитьОбласть(ИсходнаяОбласть,ОбластьВставки,ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				КолАналитики=0;
				
				Для Кол=1 По ТабДокРаскрытия.ШиринаТаблицы Цикл
					
					ТекОбласть=ТабДок.Область(НомерСтроки+Индекс+СдвигДоп,Кол,НомерСтроки+Индекс+СдвигДоп,Кол);
					ИсхОбласть=ТабДокРаскрытия.Область(Индекс,Кол,Индекс,Кол);
					
					ТекОбласть.Защита=Ложь;
					
					Если ИсхОбласть.СодержитЗначение Тогда
						
						ТекОбласть.СодержитЗначение=Истина;
						ТекОбласть.ТипЗначения=ИсхОбласть.ТипЗначения;
						ТекОбласть.Значение=ИсхОбласть.Значение;
						
					Иначе
						
						ТекОбласть.СодержитЗначение=Ложь;
						ТекОбласть.Текст=ИсхОбласть.Текст;
						
					КонецЕсли;
					
					ТекОбласть.Имя=ИсхОбласть.Имя;
					ТекОбласть.ЦветФона=ИсхОбласть.ЦветФона;
					ТекОбласть.Шрифт=ИсхОбласть.Шрифт;
					ТекОбласть.РазмещениеТекста=ИсхОбласть.РазмещениеТекста;
					ТекОбласть.ВертикальноеПоложение=ИсхОбласть.ВертикальноеПоложение;
					ТекОбласть.ГоризонтальноеПоложение=ИсхОбласть.ГоризонтальноеПоложение;
					ТекОбласть.Расшифровка=ИсхОбласть.Расшифровка;
					
					ТекОбласть.ГраницаСлева=ИсхОбласть.ГраницаСлева;
					ТекОбласть.ГраницаСправа=ИсхОбласть.ГраницаСправа;
					ТекОбласть.Формат = ИсхОбласть.Формат;
					ТекОбласть.Защита=Истина;
					
				КонецЦикла;
				
				ДобавленоСтрок=ДобавленоСтрок+1;
				
			КонецЦикла;	
			
			НомерСтрокиНов=НомерСтрокиНов+СдвигДоп;
			
			ТекстОбновление=ТекстОбновление+"
			|Когда ТабКоординатыОбщ.НомерСтроки>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
			|Тогда (ТабКоординатыОбщ.НомерСтроки+"+Формат(ДобавленоСтрок,"ЧГ=0")+")";
			
			ТекстОбновлениеНачалоГруппы=ТекстОбновлениеНачалоГруппы+"
			|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
			|Тогда (ТабРаскрытиеГруппСтроки.НачалоГруппы+"+Формат(ДобавленоСтрок,"ЧГ=0")+")";
			
			ТекстОбновлениеКонецГруппы=ТекстОбновлениеКонецГруппы+"
			|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
			|Тогда (ТабРаскрытиеГруппСтроки.КонецГруппы+"+Формат(ДобавленоСтрок,"ЧГ=0")+")&&&&";
			
			ТекстВыбор=ТекстВыбор+" 
			|+ ВЫБОР КОГДА ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
			|И ТабРаскрытиеГруппСтроки.КонецГруппы>="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
			|ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			
			СоответствиеСтрокАналитик.Вставить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов,НомерСтрокиНов);
			СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
			НомерДобавленнойСтроки=НомерСтрокиНов;
			
			////////////////////////////////////////////////////////////
			// Добавим строки в таблицу координат
			
			Индекс=1;
			
			Для Каждого СтрокаРаскрытия ИЗ ТекТаблицаРаскрытия Цикл
				
				Для Каждого СтрокаПоказатель ИЗ СтрРаскрытия.ПоказателиКолонки Цикл
					
					НоваяСтрока=ТабКоординатыНов.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРаскрытия);
					
					НоваяСтрока.Раскрытие=Истина;
					НоваяСтрока.Строка=СтрРаскрытия.Строка;
					НоваяСтрока.Колонка=СтрокаПоказатель.Колонка;
					НоваяСтрока.Показатель=СтрокаПоказатель.Ссылка;
					
					НоваяСтрока.НомерСтроки = НомерДобавленнойСтроки;
					НоваяСтрока.НомерКолонки= СтрокаПоказатель.НомерКолонки;
					НоваяСтрока.ЭтоГруппа	= Ложь;
					НоваяСтрока.ИмяГруппировки = "";
					
				КонецЦикла;
				
				Индекс=Индекс+1;
				
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДобавленоСтрок=0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//Обновим границы группировок
	ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"&&&&",ТекстВыбор);
	
	ЗапросГруппировкиСтрок=Новый Запрос;
	ЗапросГруппировкиСтрок.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросГруппировкиСтрок.Текст="Выбрать * Поместить ТабРаскрытиеГруппСтроки ИЗ &ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|;
	|ВЫБРАТЬ ГруппировкиСвод.*
	|ИЗ
	|(ВЫБРАТЬ";
	
	ТекстГруппировки="";
	
	Для Каждого Колонка ИЗ ТабРаскрытиеГруппСтроки.Колонки Цикл
		
		Если Колонка.Имя="НачалоГруппы" ИЛИ Колонка.Имя="КонецГруппы" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГруппировки=ТекстГруппировки+"
		|ТабРаскрытиеГруппСтроки."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
	КонецЦикла;
	
	ЗапросГруппировкиСтрок.Текст=ЗапросГруппировкиСтрок.Текст+ТекстГруппировки+"
	|ВЫБОР"+ТекстОбновлениеНачалоГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.НачалоГруппы КОНЕЦ КАК НачалоГруппы,
	|ВЫБОР"+ТекстОбновлениеКонецГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.КонецГруппы"+ТекстВыбор+" КОНЕЦ КАК КонецГруппы
	|ИЗ ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|ГДЕ (НЕ ТабРаскрытиеГруппСтроки.ДобавленаВручную) И ТабРаскрытиеГруппСтроки.УровеньГруппировки>&УровеньСтрока
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ"+ТекстГруппировки+"
	|ТабРаскрытиеГруппСтроки.НачалоГруппы,
	|ТабРаскрытиеГруппСтроки.КонецГруппы
	|ИЗ ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|ГДЕ ТабРаскрытиеГруппСтроки.ДобавленаВручную И ТабРаскрытиеГруппСтроки.УровеньГруппировки>&УровеньСтрока) КАК ГруппировкиСвод
	|УПОРЯДОЧИТЬ ПО ГруппировкиСвод.УровеньГруппировки";
	
	ЗапросГруппировкиСтрок.УстановитьПараметр("ТабРаскрытиеГруппСтроки",ТабРаскрытиеГруппСтроки);
	ЗапросГруппировкиСтрок.УстановитьПараметр("УровеньСтрока",1);
	
	ТабРаскрытиеГруппСтроки=ЗапросГруппировкиСтрок.Выполнить().Выгрузить();
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстОбновление=СтрЗаменить(ТекстОбновление,"##","");
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыНов ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыИтог ИЗ &ТабКоординатыИтог КАК ТабКоординатыИтог
	|ГДЕ НЕ ТабКоординатыИтог.НомерСтрокиНов=0 
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки, Показатель, ИндексАналитикиДляПоиска 
	|; 
	|";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыИтог",СтрокиКДобавлению);
	
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		ТекстКоординатыНов=ТекстКоординатыНов+"
		|ТабКоординатыНов."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			Если СтрокиКДобавлению.Колонки.Найти(Колонка.Имя+"Нов")=Неопределено Тогда
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+" КАК "+Колонка.Имя+",";
				
			Иначе
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+"Нов КАК "+Колонка.Имя+",";
				
			КонецЕсли;
			
		ИначеЕсли Колонка.Имя="ИндексАналитики" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыИтог.ИндексАналитикиНов КАК ИндексАналитики,";
		ИначеЕсли Колонка.Имя="Раскрытие" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ИСТИНА КАК Раскрытие,";
		Иначе
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ВЫБОР"+ТекстОбновление+"
	|ИНАЧЕ ТабКоординатыОбщ.НомерСтроки КОНЕЦ КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ"+ТекстКоординатыНов+"
	|ТабКоординатыНов.НомерСтроки
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ"+ТекстКоординатыИтог+"
	|ТабКоординатыИтог.НомерСтрокиНов КАК НомерСтроки
	|ИЗ ТабКоординатыИтог КАК ТабКоординатыИтог
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ПО ТабКоординатыИтог.НомерСтроки=ТабКоординатыОбщ.НомерСтроки
	|И  ТабКоординатыИтог.Строка=ТабКоординатыОбщ.Строка
	|И  ТабКоординатыИтог.ИндексАналитикиДляПоиска=ТабКоординатыОбщ.ИндексАналитики
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлению
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлениюСвод
	|;
	|УНИЧТОЖИТЬ ТабКоординатыНов
	|;
	|УНИЧТОЖИТЬ ТабКоординатыИтог
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 
	
	ЗапросКоординаты.Выполнить();
	
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытия()

Процедура ОбновитьСтрокиРаскрытия(ТекРасшифровка,ЗнакОперации=1) Экспорт
	
	Если СпособВывода="ДеревоГруппировка" ИЛИ
		СпособВывода="ДеревоГруппировкаСИерархией" Тогда
		
		ОбновитьСтрокиРаскрытияГруппировка(ТекРасшифровка,ЗнакОперации=1);
		
	Иначе
		
		ОбновитьСтрокиРаскрытияВТаблице(ТекРасшифровка,ЗнакОперации=1);
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьСтрокиРаскрытия()

Процедура ОбновитьСтрокиРаскрытияВТаблице(ТекРасшифровка,ЗнакОперации=1) Экспорт
		
	СтрокиРазгруппированы=Ложь;
	
	МассивУдаленныхСтрокКПередаче=Новый Массив;
	МассивДобавленныхСтрокКПередаче=Новый Массив;
	
	ИзмененныеАналитикиРаскрытия=ПолучитьИзмененныеПоказателиРаскрытия();
	ИзмененныеАналитикиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ИзмененныеАналитикиРаскрытия.Колонки.Добавить("ИндексАналитикиДляПоиска",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	Для Каждого СтрАналитика ИЗ ИзмененныеАналитикиРаскрытия Цикл
		СтрАналитика.ИндексАналитики=ПолучитьИндексАналитик(СтрАналитика);
		СтрАналитика.ИндексАналитикиДляПоиска=?((СтрАналитика.Показатель=ТекРасшифровка.Показатель) И ТекРасшифровка.Свойство("ИндексАналитики"),ТекРасшифровка.ИндексАналитики,"");
		СтрАналитика.ИндексОперации=СтрАналитика.ИндексОперации*ЗнакОперации;
	КонецЦикла;
	
	ИзмененыСтроки=Ложь;
	
	ИзмененныеАналитикиРаскрытия.Сортировать("ИндексАналитикиДляПоиска Убыв");
	
	ЗапросКоординаты.Текст="";
	ТаблицаКоординатПомещенаВЗапрос=Ложь;
	ИзменяемаяЯчейка=Неопределено;
	
	Если УправляемыйРежим Тогда
		ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|;
		|ВЫБРАТЬ Строка, Колонка, Ссылка
		|ПОМЕСТИТЬ СтрокаКолонка
		|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
		|;";
		
		ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказатели);
		ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
		
	КонецЕсли;
	
	Если НЕ ИзмененныеАналитикиРаскрытия.Найти(1,"ИндексОперации") = Неопределено Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Добавляем в таблицу необходимые строки
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ
		|ИзмененныеАналитикиРаскрытия.*
		|Поместить СтрокиКДобавлению
		|ИЗ &ИзмененныеАналитикиРаскрытия КАК ИзмененныеАналитикиРаскрытия
		|ГДЕ ИзмененныеАналитикиРаскрытия.ИндексОперации=1
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|СтрокиКДобавлению.*,
		|СтрокаКолонка.Строка КАК Строка
		|ПОМЕСТИТЬ СтрокиКДобавлениюСвод
		|ИЗ СтрокиКДобавлению КАК СтрокиКДобавлению
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка
		|ПО СтрокиКДобавлению.Показатель=СтрокаКолонка.Ссылка
		|ИНДЕКСИРОВАТЬ ПО Показатель,Строка,ИндексАналитики,ИндексАналитикиДляПоиска
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТабКоординатыОбщ.*,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"		
			|СтрокиКДобавлениюСвод.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+"Нов,";
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|СтрокиКДобавлениюСвод.АналитикаВалюта КАК АналитикаВалютаНов,
		|СтрокиКДобавлениюСвод.ИндексАналитики КАК ИндексАналитикиНов,
		|СтрокиКДобавлениюСвод.Строка,
		|ТабКоординатыОбщ_1.ИндексАналитики КАК ИндексАналитикиТек,
		|СтрокиКДобавлениюСвод.ИндексАналитикиДляПоиска КАК ИндексАналитикиДляПоиска
		|ИЗ 
		|СтрокиКДобавлениюСвод
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ПО СтрокиКДобавлениюСвод.Показатель=ТабКоординатыОбщ.Показатель
		|И СтрокиКДобавлениюСвод.ИндексАналитикиДляПоиска=ТабКоординатыОбщ.ИндексАналитики
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ_1
		|ПО СтрокиКДобавлениюСвод.Строка=ТабКоординатыОбщ_1.Строка
		|И СтрокиКДобавлениюСвод.ИндексАналитики=ТабКоординатыОбщ_1.ИндексАналитики	
		|УПОРЯДОЧИТЬ ПО СтрокиКДобавлениюСвод.ИндексАналитикиДляПоиска УБЫВ,ТабКоординатыОбщ.НомерСтроки";
		
		ЗапросКоординаты.УстановитьПараметр("ИзмененныеАналитикиРаскрытия",ИзмененныеАналитикиРаскрытия);
		
		СтрокиКДобавлению=ЗапросКоординаты.Выполнить().Выгрузить();
		ТаблицаКоординатПомещенаВЗапрос=Истина;
		
		Если СтрНайти(СпособВывода,"Дерево")>0 Тогда
			
			Если НЕ ДобавитьСтрокиРаскрытияДерево(СтрокиКДобавлению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКДобавлению
				|;
				|Уничтожить СтрокиКДобавлениюСвод
				|";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ДобавитьСтрокиРаскрытияТаблица(СтрокиКДобавлению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКДобавлению
				|;
				|Уничтожить СтрокиКДобавлениюСвод
				|";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьИзмененныеПоказатели(1*ЗнакОперации);
	
	Если СтрНайти(СпособВывода,"Дерево")>0 Тогда
		ОтобразитьДанныеОтчетов(Истина);
	Иначе
		ОбновитьЗначенияРаскрытияВТеле(ТабДок);
	КонецЕсли;
	
	Если НЕ ИзмененныеАналитикиРаскрытия.Найти(-1*ЗнакОперации,"ИндексОперации") = Неопределено Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Удаляем из таблицы необходимые строки
		
		ТекстСвязи="";
		
		ЗапросКоординаты.Текст="";
		
		Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
			ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
			|;
			|ВЫБРАТЬ Строка, Колонка, Ссылка
			|ПОМЕСТИТЬ СтрокаКолонка
			|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
			|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
			|;";
			
		КонецЕсли;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ
		|ИзмененныеАналитикиРаскрытия.*
		|Поместить СтрокиКУдалению
		|ИЗ &ИзмененныеАналитикиРаскрытия КАК ИзмененныеАналитикиРаскрытия
		|ГДЕ ИзмененныеАналитикиРаскрытия.ИндексОперации=-1
		|ИНДЕКСИРОВАТЬ ПО Показатель,ИндексАналитики
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТабКоординатыОбщ.*,
		|СтрокиКУдалению.ИндексАналитики КАК ИндексАналитикиУд
		|ИЗ 
		|СтрокиКУдалению КАК СтрокиКУдалению
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ПО СтрокиКУдалению.Показатель=ТабКоординатыОбщ.Показатель
		|И СтрокиКУдалению.ИндексАналитики=ТабКоординатыОбщ.ИндексАналитики
		|УПОРЯДОЧИТЬ ПО ТабКоординатыОбщ.НомерСтроки Убыв";
		
		ЗапросКоординаты.УстановитьПараметр("ИзмененныеАналитикиРаскрытия",ИзмененныеАналитикиРаскрытия);	
		СтрокиКУдалению=ЗапросКоординаты.Выполнить().Выгрузить();
		ТаблицаКоординатПомещенаВЗапрос=Истина;
		
		Если СтрНайти(СпособВывода,"Дерево")>0 Тогда
			
			Если НЕ УдалитьСтрокиРаскрытияДерево(СтрокиКУдалению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКУдалению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		Иначе
			
			Если НЕ УдалитьСтрокиРаскрытия(СтрокиКУдалению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКУдалению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправляемыйРежим И ТаблицаКоординатПомещенаВЗапрос Тогда
		
		ТабКоординатыОбщ=ПолучитьТаблицуИЗЗапроса(ЗапросКоординаты,"ТабКоординатыОбщ");
		
		Если ТаблицаКоординатПомещенаВЗапрос Тогда
			
			ЗапросКоординаты.Текст="Уничтожить ТабКоординатыОбщ
			|";
			ЗапросКоординаты.Выполнить();
			ТаблицаКоординатПомещенаВЗапрос=Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(СпособВывода,"Дерево")>0  Тогда
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////
	/// Обновляем таблицы координат и группировки
	
	Если ИзмененыСтроки Тогда
		
		ТекстСтроки="";
		Для Каждого Колонка ИЗ ТабКоординатыСтрок.Колонки Цикл
			
			Если Колонка.Имя="ИмяГруппировки" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Колонка.Имя="УровеньСтроки" Тогда
				ТекстСтроки=ТекстСтроки+",
				|ВЫБОР КОГДА ТабКоординатыОбщ.Строка=Значение(Справочник.СтрокиОтчетов.ПустаяСсылка)
				|ТОГДА ЛОЖЬ
				|ИНАЧЕ ИСТИНА КОНЕЦ КАК УровеньСтроки";
				
			Иначе	
				ТекстСтроки=ТекстСтроки+",
				|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СгруппироватьСтрокиПоИерархии();
		
		СгруппироватьСтрокиДокумента();
		
		СтрокиРазгруппированы=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // 

Функция УдалитьСтрокиРаскрытия(СтрокиКУдалению)
	
	УдаленоСтрок=0;	
	
	ТекстОбновление="";
	ТекстОбновлениеНачалоГруппы="";
	ТекстОбновлениеКонецГруппы="";
	ТекстВыбор="";
	
	МассивУдаленныхСтрок=Новый Массив;
	СтрокиКУдалению.Колонки.Добавить("Удалена",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ШаблонКоординаты=ШаблонТаблицыКоординат.СкопироватьКолонки();
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если (НЕ МассивУдаленныхСтрок.Найти(СтрАналитика.НомерСтроки)=Неопределено)
			ИЛИ (Не ЗначениеЗаполнено(СтрАналитика.НомерСтроки)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеАналитики=Ложь;
		
		Для Индекс=ПоложениеПервойКолонкиПриРаскрытии ПО ТабДок.ШиринаТаблицы Цикл
			
			ОбластьЗначения=ТабДок.Область(СтрАналитика.НомерСтроки,Индекс,СтрАналитика.НомерСтроки,Индекс);
			
			Если ОбластьЗначения.СодержитЗначение 
				И ЗначениеЗаполнено(ОбластьЗначения.Значение) 
				И (НЕ ОбластьЗначения.Значение=0.00001) Тогда
				ЕстьДанныеАналитики=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьДанныеАналитики Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокиРазгруппированы Тогда
			РазгруппироватьСтрокиДокумента();
		КонецЕсли;
		
		МассивУдаленныхСтрок.Добавить(СтрАналитика.НомерСтроки);
		СтрАналитика.Удалена=Истина;
		
		////////////////////////////////////////////////////////////////////////////////////////////
		// Удалим данные о группах, если удаляемая строка является единственной в группе
		
		СтруктураПоиска=Новый Структура;
		
		СтруктураПоиска.Вставить("Строка",СтрАналитика.Строка);
		
		МассивГруппа=ТабРаскрытиеГруппСтроки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивГруппа.Количество()>0 Тогда
			
			СтрГруппа=МассивГруппа[0]; 
			Если СтрГруппа.НачалоГруппы=СтрГруппа.КонецГруппы Тогда
				
				ТабРаскрытиеГруппСтроки.Удалить(СтрГруппа);
				
			КонецЕсли;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////	
		
		ТабДок.УдалитьОбласть(ТабДок.Область("R"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")),ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЦикла;
	
	Если МассивУдаленныхСтрок.Количество()=0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	СтрокиКУдалению.Сортировать("НомерСтроки Возр");
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если НЕ СтрАналитика.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОбновление=СтрЗаменить(ТекстОбновление,"##", " И ТабКоординатыОбщ.НомерСтроки<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")); 
		ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
		ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
		
		УдаленоСтрок=УдаленоСтрок+1;
		
		ТекстОбновление=ТекстОбновление+"
		|Когда ТабКоординатыОбщ.НомерСтроки>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
		|Тогда (ТабКоординатыОбщ.НомерСтроки-"+Формат(УдаленоСтрок,"ЧГ=0")+")";
		
		ТекстОбновлениеНачалоГруппы=ТекстОбновлениеНачалоГруппы+"
		|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
		|Тогда (ТабРаскрытиеГруппСтроки.НачалоГруппы-"+Формат(УдаленоСтрок,"ЧГ=0")+")";
		
		ТекстОбновлениеКонецГруппы=ТекстОбновлениеКонецГруппы+"
		|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
		|Тогда (ТабРаскрытиеГруппСтроки.КонецГруппы-"+Формат(УдаленоСтрок,"ЧГ=0")+")&&&&";
		
		ТекстВыбор=ТекстВыбор+" 
		|- ВЫБОР КОГДА ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
		|И ТабРаскрытиеГруппСтроки.КонецГруппы>="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
		|ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
		
	КонецЦикла;	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//Обновим границы группировок
	ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"&&&&",ТекстВыбор);
	
	ЗапросГруппировкиСтрок=Новый Запрос;
	ЗапросГруппировкиСтрок.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросГруппировкиСтрок.Текст="Выбрать * Поместить ТабРаскрытиеГруппСтроки ИЗ &ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|;
	|ВЫБРАТЬ";
	
	ТекстГруппировки="";
	
	Для Каждого Колонка ИЗ ТабРаскрытиеГруппСтроки.Колонки Цикл
		
		Если Колонка.Имя="НачалоГруппы" ИЛИ Колонка.Имя="КонецГруппы" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГруппировки=ТекстГруппировки+"
		|ТабРаскрытиеГруппСтроки."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
	КонецЦикла;
	
	ЗапросГруппировкиСтрок.Текст=ЗапросГруппировкиСтрок.Текст+ТекстГруппировки+"
	|ВЫБОР"+ТекстОбновлениеНачалоГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.НачалоГруппы КОНЕЦ КАК НачалоГруппы,
	|ВЫБОР"+ТекстОбновлениеКонецГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.КонецГруппы"+ТекстВыбор+" КОНЕЦ КАК КонецГруппы
	|ИЗ ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|ГДЕ ТабРаскрытиеГруппСтроки.УровеньГруппировки>&УровеньСтрока
	|УПОРЯДОЧИТЬ ПО ТабРаскрытиеГруппСтроки.УровеньГруппировки";
	
	ЗапросГруппировкиСтрок.УстановитьПараметр("ТабРаскрытиеГруппСтроки",ТабРаскрытиеГруппСтроки);
	ЗапросГруппировкиСтрок.УстановитьПараметр("УровеньСтрока",1);
	ТабРаскрытиеГруппСтроки=ЗапросГруппировкиСтрок.Выполнить().Выгрузить();
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстОбновление=СтрЗаменить(ТекстОбновление,"##","");
	
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ШаблонКоординаты.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ВЫБОР"+ТекстОбновление+"
	|ИНАЧЕ ТабКоординатыОбщ.НомерСтроки КОНЕЦ КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ (НЕ ТабКоординатыОбщ.НомерСтроки В (&МассивУдаленныхСтрок))
	|;
	|УНИЧТОЖИТЬ СтрокиКУдалению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 
	
	ЗапросКоординаты.УстановитьПараметр("МассивУдаленныхСтрок",МассивУдаленныхСтрок);
	ЗапросКоординаты.Выполнить();
	
	Возврат Истина;
	
КонецФункции // УдалитьСтрокиРаскрытия()

Функция УдалитьСтрокиРаскрытияДерево(СтрокиКУдалению)
	
	УдаленоСтрок=0;	
	
	МассивУдаленныхСтрок=Новый Массив;
	СтрокиКУдалению.Колонки.Добавить("Удалена",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если НЕ МассивУдаленныхСтрок.Найти(СтрАналитика.НомерСтроки)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеАналитики=Ложь;
		
		СтрокаДерева=ТабДерево.Строки.Найти(СтрАналитика.НомерСтроки,"НомерСтроки",Истина);
		
		Для Индекс=ПерваяКолонка-1 ПО ТабДерево.Колонки.Количество()-1 Цикл
			
			Если СтрокаДерева[Индекс]<>0 Тогда
				ЕстьДанныеАналитики=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьДанныеАналитики Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока=Новый Структура;
		
		МассивУдаленныхСтрок.Добавить(СтрАналитика.НомерСтроки);
		СтрАналитика.Удалена=Истина;
		
		Родитель=СтрокаДерева.Родитель;
		
		// Для управляемого режима ////////
		
		Если УправляемыйРежим Тогда
			
			СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(Родитель,ТабДерево));
			СтруктураСтрока.Вставить("АдресСтроки",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
			МассивУдаленныхСтрокКПередаче.Добавить(СтруктураСтрока);
			
		КонецЕсли;
		
		///////////////////////////////////
		
		Родитель.Строки.Удалить(СтрокаДерева);
		
		СтрКоордината=ТабКоординатыСтрок.Найти(СтрАналитика.НомерСтроки,"НомерСтроки");
		ТабКоординатыСтрок.Удалить(СтрКоордината);
		
	КонецЦикла;
	
	Если МассивУдаленныхСтрок.Количество()=0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ТекстКоординатыОбщ="";
	
	Для Каждого Колонка ИЗ ШаблонКоординаты.Колонки Цикл
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+",
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ"+Сред(ТекстКоординатыОбщ,2)+"
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ (НЕ ТабКоординатыОбщ.НомерСтроки В (&МассивУдаленныхСтрок))
	|;
	|УНИЧТОЖИТЬ СтрокиКУдалению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,Показатель,Раскрытие,Строка,Колонка
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 
	
	ЗапросКоординаты.УстановитьПараметр("МассивУдаленныхСтрок",МассивУдаленныхСтрок);
	ЗапросКоординаты.Выполнить();
	
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытия()

Функция ВывестиРаскрытиеВТелеОтчета(ТабДокумент = Неопределено) Экспорт
	
	ИнициализироватьКонтекстРаскрытия();
	
	Если НЕ мТекущаяВалюта=ОсновнаяВалюта Тогда
		ПересчитатьРабочиеТаблицыВВалютуОтображения();
	КонецЕсли;
	
	ОтчетИнициализирован=Истина;
	
	ОпределитьНачалоТаблицы(ТабДокумент);
	
	ТабОбластиРаскрытия.Очистить();
	КолонкаСтрока=0;
	МаксШиринаРаскрытия=0;
	
	// формируем таблицу областей раскрытия
	
	ОбластиПоказателейРаскрытия = Новый Массив;
		
	ЗаполнитьТаблицуРаскрытияСтрок(ТабДокумент,ТабОбластиРаскрытия);
	
	Для Каждого СтрРаскрытия ИЗ ТабОбластиРаскрытия Цикл
		
		ЧислоКолонокАналитики=0;
		ЕстьКолонкиАналитики=Ложь;
		
		Для НомерКолонки=1 ПО СтрРаскрытия.ТабДокРаскрытие.ШиринаТаблицы Цикл
			
			Если СтрНайти(СтрРаскрытия.ТабДокРаскрытие.Область(1,НомерКолонки).Имя,"_Аналитика")>0 Тогда
				
				ЕстьКолонкиАналитики=Истина;
				ЧислоКолонокАналитики=ЧислоКолонокАналитики+1;
				
			ИначеЕсли ЕстьКолонкиАналитики Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЧислоКолонокАналитики = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Для строки с кодом %КодСтроки% не задан макет раскрытия по аналитике.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%", Строка(СтрРаскрытия.КодСтроки));
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ЧислоКолонокАналитики>МаксШиринаРаскрытия Тогда 
			
			МаксШиринаРаскрытия=ЧислоКолонокАналитики;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ТабОбластиРаскрытия.Количество()=0 Тогда
		
		Сообщить(НСтр("ru = 'В отчете отсутствуют строки, раскрываемые по аналитике.'"),СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецЕсли;
	
	// Отодвигаем колонки отчета, чтобы корректно вывести раскрытие
	// Ищем первую колонку
	
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ВысотаТаблицы = ТабДокумент.ВысотаТаблицы;
	
	Для Ряд=1 По ВысотаТаблицы Цикл
		
		Для Кол=1 По ШиринаТаблицы Цикл
			
			ТекОбл = ТабДокумент.Область(Ряд,Кол,Ряд,Кол);
			Если СтрНайти(ТекОбл.Имя,"Колонка_")>0 Тогда
				
				ОбластьКолонка=ТекОбл;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОбластьКолонка=Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьКолонка=Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекВысота=ОбластьКолонка.Верх;
	ИмяКолонки=СтрЗаменить(ОбластьКолонка.Имя,"Колонка_","");
	
	МассивИмен=Новый Массив;
	
	//Определяем высоту первой колонки
	Для Ряд=ТекВысота По ВысотаТаблицы Цикл
		
		ТекОбл=ТабДокумент.Область(Ряд,ОбластьКолонка.Лево,Ряд,ОбластьКолонка.Лево);
		Если СтрНайти(ТекОбл.Имя,ИмяКолонки)>0 Тогда
			
			ТекВысота=ТекВысота+1;
			
			// Запомним имя и текст области
			
			СтруктураСвойств=Новый Структура;
			СтруктураСвойств.Вставить("Имя",ТекОбл.Имя);
			СтруктураСвойств.Вставить("Текст",ТекОбл.Текст);
			СтруктураСвойств.Вставить("ГраницаСправа",ТекОбл.ГраницаСправа);
			СтруктураСвойств.Вставить("ГраницаСлева",ТекОбл.ГраницаСлева);
			
			Если ТекОбл.СодержитЗначение Тогда
				
				СтруктураСвойств.Вставить("СодержитЗначение",Истина);
				СтруктураСвойств.Вставить("Значение",ТекОбл.Значение);
				
			Иначе
				
				СтруктураСвойств.Вставить("СодержитЗначение",Ложь);
				
			КонецЕсли;
			
			
			МассивИмен.Добавить(СтруктураСвойств);
			
			// Сбросим имя и текст области
			ТекОбл.Имя="";
			ТекОбл.ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ТекОбл.ГраницаСлева=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			
			Если ТекОбл.СодержитЗначение Тогда
				
				ТекОбл.Значение="";
				
			Иначе
				
				ТекОбл.Текст="";
				
			КонецЕсли;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьВставки=ТабДокумент.Область(ОбластьКолонка.Верх,ОбластьКолонка.Лево,ТекВысота-1,ОбластьКолонка.Лево);
	
	ШиринаСдвига = МаксШиринаРаскрытия - (ОбластьКолонка.Лево - (ОтступТаблицы));
	Если ШиринаСдвига < 0 Тогда
		ШиринаСдвига = 0;
	КонецЕсли;
	
	Для Индекс= 1 По ШиринаСдвига Цикл
		
		ТабДокумент.ВставитьОбласть(ОбластьВставки,ОбластьВставки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		
	КонецЦикла;
		
	Для Индекс=ОбластьКолонка.Верх ПО ТекВысота-1 Цикл
		
		ТекСвойства=МассивИмен[Индекс-ОбластьКолонка.Верх];
		
		ТекОбласть=ТабДокумент.Область(Индекс,ОбластьКолонка.Лево + ШиринаСдвига);
		ТекОбласть.Имя=ТекСвойства.Имя;
		
		ТекОбласть.ГраницаСлева=?(ТекСвойства.ГраницаСлева.ТипЛинии=ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,ТекСвойства.ГраницаСправа,ТекСвойства.ГраницаСлева);
		ТекОбласть.ГраницаСправа=?(ТекСвойства.ГраницаСправа.ТипЛинии=ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,ТекСвойства.ГраницаСлева,ТекСвойства.ГраницаСправа);	
		
		Если ТекСвойства.СодержитЗначение Тогда
			
			ТекОбласть.Значение=ТекСвойства.Значение;
			
		Иначе
			
			ТекОбласть.Текст=ТекСвойства.Текст;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрРаскрытия ИЗ ТабОбластиРаскрытия Цикл
		
		Обл = ТабДокумент.Области.Найти("Строка_"+СтрРаскрытия.КодСтроки);
		
		Если Обл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрРаскрытия.НомерСтроки=Обл.Верх;
		
	КонецЦикла;
	
	МассивКУдалению=ТабОбластиРаскрытия.НайтиСтроки(Новый Структура("НомерСтроки",0));
	
	Для Каждого Строка ИЗ МассивКУдалению Цикл
		ТабОбластиРаскрытия.Удалить(Строка);
	КонецЦикла;
	
	ТабОбластиРаскрытия.Сортировать("НомерСтроки");
	ТабКоординатыОбщ=ШаблонТаблицыКоординат.СкопироватьКолонки();
	
	ТабДокументВывода=Новый ТабличныйДокумент;
	НачалоРаскрытия=0;
	
	Пока  НачалоРаскрытия <= ТабОбластиРаскрытия.Количество()-1 Цикл
		
		ТекСтрокаРаскрытия=ТабОбластиРаскрытия[НачалоРаскрытия];
		
		Если ТекСтрокаРаскрытия.ТаблицаРаскрытия.Количество()>0 ИЛИ (НЕ ТекСтрокаРаскрытия.МакетыРаскрытия.Шапка=Неопределено) Тогда
			
			НомерПервойСтроки=ТекСтрокаРаскрытия.НомерСтроки;
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Выводим область с начала табличного документа до первой строки, раскрываемой по аналитике
			
			ОбластьВывода=ТабДокумент.ПолучитьОбласть(1,1,НомерПервойСтроки,ТабДокумент.ШиринаТаблицы);
			ДобавитьДанныеВТаблицуКоординатСинтетика(ОбластьВывода); 	
			ТабДокументВывода.Вывести(ОбластьВывода);
			НачалоОбластиСинтетики=НомерПервойСтроки+1;
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Выводим первую строку, раскрываемую по аналитике
			
			ДобавитьДанныеВТаблицуКоординатАналитика(ТабДокументВывода.ВысотаТаблицы,ТекСтрокаРаскрытия);	
			ТабДокументВывода.Вывести(ТекСтрокаРаскрытия.ТабДокРаскрытие);
			ТекНомерСтроки=ТекСтрокаРаскрытия.НомерСтроки;
			
			Прервать;
			
		КонецЕсли;
		
		НачалоРаскрытия=НачалоРаскрытия+1;
				
	КонецЦикла;
	
	Если НачалоРаскрытия=ТабОбластиРаскрытия.Количество() Тогда
		
		ОбластьВывода=ТабДокумент.ПолучитьОбласть(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
		ТабДокументВывода.Вывести(ОбластьВывода);
		ТекНомерСтроки=ТабДокумент.ВысотаТаблицы;
		
		ДобавитьДанныеВТаблицуКоординатСинтетика(ОбластьВывода,ТабДокументВывода.ВысотаТаблицы-ОбластьВывода.ВысотаТаблицы);
		
	Иначе
		
		Для Индекс=НачалоРаскрытия+1 ПО ТабОбластиРаскрытия.Количество()-1 Цикл
			
			СтрокаРаскрытия=ТабОбластиРаскрытия[Индекс];
			ТекНомерСтроки=СтрокаРаскрытия.НомерСтроки;
			
			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Выводим область синтетических значений
			ОбластьВывода=ТабДокумент.ПолучитьОбласть(НачалоОбластиСинтетики,1,ТекНомерСтроки,ТабДокумент.ШиринаТаблицы);
			ТабДокументВывода.Вывести(ОбластьВывода);
			
			ДобавитьДанныеВТаблицуКоординатСинтетика(ОбластьВывода,ТабДокументВывода.ВысотаТаблицы-ОбластьВывода.ВысотаТаблицы);
			
			Если СтрокаРаскрытия.ТаблицаРаскрытия.Количество()>0 ИЛИ (НЕ СтрокаРаскрытия.МакетыРаскрытия.Шапка=Неопределено) Тогда
				
				ДобавитьДанныеВТаблицуКоординатАналитика(ТабДокументВывода.ВысотаТаблицы,СтрокаРаскрытия);
				ТабДокументВывода.Вывести(СтрокаРаскрытия.ТабДокРаскрытие);
				
			КонецЕсли;
			
			НачалоОбластиСинтетики=ТекНомерСтроки+1;
			
		КонецЦикла;
		
	КонецЕсли;

	Если ТекНомерСтроки<ТабДокумент.ВысотаТаблицы Тогда
		
		ОбластьВывода=ТабДокумент.ПолучитьОбласть(ТекНомерСтроки+1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
		ТабДокументВывода.Вывести(ОбластьВывода);
		
		ДобавитьДанныеВТаблицуКоординатСинтетика(ОбластьВывода,ТабДокументВывода.ВысотаТаблицы-ОбластьВывода.ВысотаТаблицы);
		
	КонецЕсли;
		
	ТабДокумент.Очистить();
	ТабДокумент.Вывести(ТабДокументВывода);
		
	ТабДок=ТабДокумент;
	
	ПодготовитьДанныеРаскрытияВТеле();
	СгруппироватьСтрокиПоИерархии();
	
	Для Каждого СтрРаскрытия ИЗ ТабОбластиРаскрытия Цикл
		
		СгруппироватьСтрокиРаскрытия(СтрРаскрытия);
		
	КонецЦикла;
	
	ТабРаскрытиеГруппСтроки.Сортировать("УровеньГруппировки");	
	СброситьЗапросыОбъекта();
		
	Возврат Истина;
	
КонецФункции // ВывестиРаскрытиеВТелеОтчета()

///////////////////////////////////////////////////////////////////////////////////////////
// Обработка изменения строк аналитического раскрытия в режиме группировок

Процедура ОбновитьСтрокиРаскрытияГруппировка(ТекРасшифровка,ЗнакОперации=1) Экспорт
		
	МассивУдаленныхСтрокКПередаче=Новый Массив;
	МассивДобавленныхСтрокКПередаче=Новый Массив;
	
	ТаблицаИзмененныхАналитик=ПолучитьИзмененныеПоказателиРаскрытия();
	
	РабочаяТаблицаАналитик=ТаблицаИзмененныхАналитик.СкопироватьКолонки();
	РабочаяТаблицаАналитик.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого Строка ИЗ ТаблицаИзмененныхАналитик Цикл
		
		АналитикиЗаполнены=Ложь;
		
		Если ЗначениеЗаполнено(Строка.АналитикаВалюта) Тогда
			
			АналитикиЗаполнены=Истина;
			
		Иначе
			
			Строка.АналитикаВалюта=Неопределено;
			
		КонецЕсли;
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если ЗначениеЗаполнено(Строка["Аналитика"+Индекс]) Тогда
				
				АналитикиЗаполнены=Истина;
				
			Иначе
				
				Строка["Аналитика"+Индекс]=Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
			
		Если АналитикиЗаполнены Тогда
			
			НоваяСтрока=РабочаяТаблицаАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			НоваяСтрока.ИндексОперации=НоваяСтрока.ИндексОперации*ЗнакОперации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзмененыСтроки=Ложь;
		
	ЗапросКоординаты.Текст="";
	ТаблицаКоординатПомещенаВЗапрос=Ложь;
	ИзменяемаяЯчейка=Неопределено;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ Строка, Колонка, Ссылка
	|ПОМЕСТИТЬ СтрокаКолонка
	|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
	|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
	|;";
	
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказатели);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
	
	Если НЕ РабочаяТаблицаАналитик.Найти(1,"ИндексОперации") = Неопределено Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Добавляем в таблицу необходимые строки
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ
		|ИзмененныеАналитикиРаскрытия.*
		|Поместить СтрокиКДобавлению
		|ИЗ &ИзмененныеАналитикиРаскрытия КАК ИзмененныеАналитикиРаскрытия
		|ГДЕ ИзмененныеАналитикиРаскрытия.ИндексОперации=1
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|СтрокиКДобавлению.*,
		|СтрокаКолонка.Строка КАК Строка
		|ПОМЕСТИТЬ СтрокиКДобавлениюСвод
		|ИЗ СтрокиКДобавлению КАК СтрокиКДобавлению
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка
		|ПО СтрокиКДобавлению.Показатель=СтрокаКолонка.Ссылка
		|ИНДЕКСИРОВАТЬ ПО Показатель,Строка
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ЕСТЬNULL(ТабКоординатыОбщ.НомерСтроки,1000000) КАК НомерСтроки,
		|ЕСТЬNULL(ТабКоординатыОбщ.НомерКолонки,0) КАК НомерКолонки,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"		
			|СтрокиКДобавлениюСвод.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+"Нов,";
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|СтрокиКДобавлениюСвод.АналитикаВалюта КАК АналитикаВалютаНов,
		|СтрокиКДобавлениюСвод.Строка
		|ИЗ 
		|СтрокиКДобавлениюСвод
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ПО СтрокиКДобавлениюСвод.Показатель=ТабКоординатыОбщ.Показатель
		|И СтрокиКДобавлениюСвод.АналитикаВалюта=ТабКоординатыОбщ.АналитикаВалюта";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"		
			|И СтрокиКДобавлениюСвод.Аналитика"+ИндексАналитики+"=ТабКоординатыОбщ.Аналитика"+ИндексАналитики;
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"		
		|УПОРЯДОЧИТЬ ПО СтрокиКДобавлениюСвод.Строка, НомерСтроки, НомерКолонки";  
		
		ЗапросКоординаты.УстановитьПараметр("ИзмененныеАналитикиРаскрытия",РабочаяТаблицаАналитик);
		
		СтрокиКДобавлению=ЗапросКоординаты.Выполнить().Выгрузить();
		ТаблицаКоординатПомещенаВЗапрос=Истина;
		
		Если НЕ ДобавитьСтрокиРаскрытияДеревоГруппировка(СтрокиКДобавлению) Тогда
			ЗапросКоординаты.Текст="Уничтожить СтрокиКДобавлению
			|;
			|Уничтожить СтрокиКДобавлениюСвод
			|";
			ЗапросКоординаты.Выполнить();
		Иначе
			ИзмененыСтроки=Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьИзмененныеПоказатели(1*ЗнакОперации);	
	ОтобразитьДанныеОтчетов(Истина);
		
	Если НЕ РабочаяТаблицаАналитик.Найти(-1*ЗнакОперации,"ИндексОперации") = Неопределено Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Удаляем из таблицы необходимые строки
		
		ТекстСвязи="";
		
		ЗапросКоординаты.Текст="";
		
		Если НЕ ТаблицаКоординатПомещенаВЗапрос Тогда
			ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
			|;
			|ВЫБРАТЬ Строка, Колонка, Ссылка
			|ПОМЕСТИТЬ СтрокаКолонка
			|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
			|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
			|;";
			
		КонецЕсли;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ
		|ИзмененныеАналитикиРаскрытия.*
		|Поместить СтрокиКУдалению
		|ИЗ &ИзмененныеАналитикиРаскрытия КАК ИзмененныеАналитикиРаскрытия
		|ГДЕ ИзмененныеАналитикиРаскрытия.ИндексОперации=-1
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТабКоординатыОбщ.*
		|ИЗ 
		|СтрокиКУдалению КАК СтрокиКУдалению
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ПО СтрокиКУдалению.Показатель=ТабКоординатыОбщ.Показатель
		|И СтрокиКУдалению.АналитикаВалюта=ТабКоординатыОбщ.АналитикаВалюта";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"		
			|И СтрокиКУдалению.Аналитика"+ИндексАналитики+"=ТабКоординатыОбщ.Аналитика"+ИндексАналитики;
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|УПОРЯДОЧИТЬ ПО ТабКоординатыОбщ.НомерСтроки Убыв";
		
		ЗапросКоординаты.УстановитьПараметр("ИзмененныеАналитикиРаскрытия",РабочаяТаблицаАналитик);	
		СтрокиКУдалению=ЗапросКоординаты.Выполнить().Выгрузить();
		ТаблицаКоординатПомещенаВЗапрос=Истина;
					
			Если НЕ УдалитьСтрокиРаскрытияДеревоГруппировка(СтрокиКУдалению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКУдалению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
				
	КонецЕсли;
	
	Если ТаблицаКоординатПомещенаВЗапрос Тогда
		
		ТабКоординатыОбщ=ПолучитьТаблицуИЗЗапроса(ЗапросКоординаты,"ТабКоординатыОбщ");
		
		Если ТаблицаКоординатПомещенаВЗапрос Тогда
			
			ЗапросКоординаты.Текст="Уничтожить ТабКоординатыОбщ
			|;
			|Уничтожить СтрокаКолонка
			|";

			ЗапросКоординаты.Выполнить();
			ТаблицаКоординатПомещенаВЗапрос=Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //

Функция ДобавитьСтрокиРаскрытияДеревоГруппировка(СтрокиКДобавлению)
	
	Перем ВсегоСтрок;
	
	ДобавленоСтрок=0;
	ТабКоординатыНов=ШаблонКоординаты.СкопироватьКолонки();
	СтрокиКДобавлению.Колонки.Добавить("НомерСтрокиНов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	СтрокиКДобавлению.Колонки.Добавить("СтрокаДерева");
	
	ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
	
	СоответствиеСтрокАналитик=Новый Соответствие;
	
	МассивОбработанныхСтрок=Новый Массив;
	
	Для Каждого Строка ИЗ СтрокиКДобавлению Цикл
		
		Если Строка.НомерСтроки=1000000 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СтрокаДерева=ТабДерево.Строки.Найти(Строка.НомерСтроки,"НомерСтроки",Истина);
		
	КонецЦикла;	
			
	Для ИндексСтроки=0 По СтрокиКДобавлению.Количество()-1 Цикл
		
		СтрАналитика=СтрокиКДобавлению[ИндексСтроки];
		
		Если НЕ СтрАналитика.НомерСтроки=1000000 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
		СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
		
		Если ИндексСтроки=0 Тогда
			
			СтрокаРодитель=ТабКоординатыОбщ.Найти(СтрАналитика.Строка,"Строка");
			СтрокаДереваРодитель=ТабДерево.Строки.Найти(СтрокаРодитель.НомерСтроки,"НомерСтроки",Истина);
			
		Иначе
			
			ПредыдущаяСтрока=СтрокиКДобавлению[ИндексСтроки-1];
			
			Если ПредыдущаяСтрока.Строка=СтрАналитика.Строка Тогда
				
				СтрокаДереваРодитель=ПредыдущаяСтрока.СтрокаДерева;
				
			Иначе
				
				СтрокаРодитель=ТабКоординатыОбщ.Найти(СтрАналитика.Строка,"Строка");
				СтрокаДереваРодитель=ТабДерево.Строки.Найти(СтрокаРодитель.НомерСтроки,"НомерСтроки",Истина);
				
			КонецЕсли;
							
		КонецЕсли;
							
		СтруктураСтрока=Новый Структура;		
		ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
		
		НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
		СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
		
		НоваяСтрокаДерева=СтрокаДереваРодитель.Строки.Добавить();
		
		НоваяСтрокаДерева.ЕстьЗаполнение=Истина;
		СтрокаДереваРодитель.ЕстьЗаполнение=Ложь;
		НоваяСтрокаДерева.НомерСтроки=НомерСтрокиНов;
		НоваяСтрокаДерева.Раскрытие=Истина;
		НоваяСтрокаДерева.ДанныеАналитики=2;
		
		СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДереваРодитель,ТабДерево));
		СтруктураСтрока.Вставить("ИндексВставки",-1);
		
		Если ЗначениеЗаполнено(СтрАналитика.АналитикаВалютаНов) Тогда
			
			ИмяГруппировки="АналитикаВалюта";
			
		КонецЕсли;
		
		Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			Если ЗначениеЗаполнено(СтрАналитика["Аналитика"+Индекс+"Нов"]) Тогда
				
				ИмяГруппировки="Аналитика"+Индекс;
							
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрокаДерева.Группировка=СтрАналитика[ИмяГруппировки+"Нов"];
		НоваяСтрокаДерева.ИмяГруппировки=ИмяГруппировки;
				
		///////////////////////////////////
				
		ДобавленоСтрок=ДобавленоСтрок+1;
				
		ДанныеНовойСтроки=Новый Структура;
		Для Каждого Колонка ИЗ ТабДерево.Колонки Цикл
			ДанныеНовойСтроки.Вставить(Колонка.Имя,НоваяСтрокаДерева[Колонка.Имя]);
		КонецЦикла;
		
		СтруктураСтрока.Вставить("ДанныеНовойСтроки",ДанныеНовойСтроки);
		МассивДобавленныхСтрокКПередаче.Добавить(СтруктураСтрока);
		
		СтрАналитика.СтрокаДерева=НоваяСтрокаДерева;
			
		НоваяСтрока=ТабКоординатыСтрок.Добавить();		
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрока["Аналитика"+ИндексАналитики]=СтрАналитика["Аналитика"+ИндексАналитики+"Нов"]
			
		КонецЦикла;
		
		НоваяСтрока["АналитикаВалюта"]=СтрАналитика["АналитикаВалютаНов"];
		НоваяСтрока.НомерСтроки=СтрАналитика.НомерСтрокиНов;
		НоваяСтрока.Раскрытие=Истина;
		НоваяСтрока.ИмяГруппировки=ИмяГруппировки;
		НоваяСтрока.УровеньСтроки=Истина;
		
		Для Каждого СтрКолонка ИЗ ТабКоординатыКолонок Цикл
			
			НоваяСтрокаКоординат=ТабКоординатыНов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКоординат,НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКоординат,СтрКолонка);
			
			СтрПоказатель=мПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",НоваяСтрокаКоординат.Строка,НоваяСтрокаКоординат.Колонка));
			
			НоваяСтрокаКоординат.Показатель=СтрПоказатель[0].Ссылка;
			
		КонецЦикла;
						
		//////////////////////////////////////
		
	КонецЦикла;
	
	Если ДобавленоСтрок=0 Тогда
		Возврат Ложь;
	КонецЕсли; 			
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыНов ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыИтог ИЗ &ТабКоординатыИтог КАК ТабКоординатыИтог
	|ГДЕ ТабКоординатыИтог.НомерСтрокиНов>0
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки, Строка 
	|; 
	|";
	
	СтрокиКДобавлению.Колонки.Удалить("СтрокаДерева");
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыИтог",СтрокиКДобавлению);
	
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		ТекстКоординатыНов=ТекстКоординатыНов+"
		|ТабКоординатыНов."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			Если СтрокиКДобавлению.Колонки.Найти(Колонка.Имя+"Нов")=Неопределено Тогда
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+" КАК "+Колонка.Имя+",";
				
			Иначе
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+"Нов КАК "+Колонка.Имя+",";
				
			КонецЕсли;
			
		ИначеЕсли Колонка.Имя="Раскрытие" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ИСТИНА КАК Раскрытие,";
		Иначе
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ТабКоординатыОбщ.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыНов+"
	|ТабКоординатыНов.НомерСтроки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыИтог+"
	|ТабКоординатыИтог.НомерСтрокиНов КАК НомерСтроки
	|ИЗ ТабКоординатыИтог КАК ТабКоординатыИтог
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ПО ТабКоординатыИтог.НомерСтроки=ТабКоординатыОбщ.НомерСтроки
	|И  ТабКоординатыИтог.Строка=ТабКоординатыОбщ.Строка";
	
	Для Индекс=(МаксАналитикОтчета+1) ПО (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|И ТабКоординатыИтог.Аналитика"+Индекс+"Нов=ТабКоординатыОбщ.Аналитика"+Индекс;
		
	КонецЦикла;
		
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлению
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлениюСвод
	|;
	|УНИЧТОЖИТЬ ТабКоординатыНов
	|;
	|УНИЧТОЖИТЬ ТабКоординатыИтог
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,Показатель,Раскрытие,Строка,Колонка
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 
	
	ЗапросКоординаты.Выполнить();
	
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытияДерево()

Функция УдалитьСтрокиРаскрытияДеревоГруппировка(СтрокиКУдалению)
	
	УдаленоСтрок=0;	
	
	МассивУдаленныхСтрок=Новый Массив;
	СтрокиКУдалению.Колонки.Добавить("Удалена",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если НЕ МассивУдаленныхСтрок.Найти(СтрАналитика.НомерСтроки)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеАналитики=Ложь;
		
		СтрокаДерева=ТабДерево.Строки.Найти(СтрАналитика.НомерСтроки,"НомерСтроки",Истина);
		
		Если СтрокаДерева=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Индекс=ПерваяКолонка-1 ПО ТабДерево.Колонки.Количество()-1 Цикл
			
			Если СтрокаДерева[Индекс]<>0 Тогда
				ЕстьДанныеАналитики=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьДанныеАналитики Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока=Новый Структура;
		
		МассивУдаленныхСтрок.Добавить(СтрАналитика.НомерСтроки);
		СтрАналитика.Удалена=Истина;
		
		Родитель=СтрокаДерева.Родитель;
		
		// Для управляемого режима ////////
		
		Если УправляемыйРежим Тогда
			
			СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(Родитель,ТабДерево));
			СтруктураСтрока.Вставить("АдресСтроки",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
			МассивУдаленныхСтрокКПередаче.Добавить(СтруктураСтрока);
			
		КонецЕсли;
		
		///////////////////////////////////
		
		Родитель.Строки.Удалить(СтрокаДерева);
		
		СтрКоордината=ТабКоординатыСтрок.Найти(СтрАналитика.НомерСтроки,"НомерСтроки");
		ТабКоординатыСтрок.Удалить(СтрКоордината);
		
	КонецЦикла;
	
	Если МассивУдаленныхСтрок.Количество()=0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ТекстКоординатыОбщ="";
	
	Для Каждого Колонка ИЗ ШаблонКоординаты.Колонки Цикл
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+",
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ"+Сред(ТекстКоординатыОбщ,2)+"
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ (НЕ ТабКоординатыОбщ.НомерСтроки В (&МассивУдаленныхСтрок))
	|;
	|УНИЧТОЖИТЬ СтрокиКУдалению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,Показатель,Раскрытие,Строка,Колонка
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 
	
	ЗапросКоординаты.УстановитьПараметр("МассивУдаленныхСтрок",МассивУдаленныхСтрок);
	ЗапросКоординаты.Выполнить();
	
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытия()





////////////////////////////////////////////////////////////////////////////////////////////

Процедура СформироватьДерево(Запрос)
	
	ТабДерево=Новый ДеревоЗначений;
	
	///////////////////////////////////////////////////////////////////////////
	// Подготовим таблицы для координат группировок строк и колонок
	
	СтрокаГруппировкиСтроки="Строка,ИндексАналитики,АналитикаВалюта";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+",Аналитика"+ИндексАналитики;
	КонецЦикла;
	
	ТабКоординатыСтрок=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиСтроки);
	ТабКоординатыСтрок.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("УровеньСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыСтрок.Колонки.Добавить("ИмяГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТабКоординатыСтрок.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("СтрокаДерева");
	
	ТабКоординатыКолонок=ШаблонТаблицыКоординат.СкопироватьКолонки("Колонка");
	ТабКоординатыКолонок.Колонки.Добавить("НомерКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	///////////////////////////////////////////////////////////////////////////////////////
	
	Если СпособВывода="Дерево" Тогда
		КолонокАналитикиРаскрытия=?(МаксАналитикПоказателя<=1,0,МаксАналитикПоказателя-1);
	Иначе
		КолонокАналитикиРаскрытия=0;
	КонецЕсли;
	
	ТабДерево.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10),"");
	ТабДерево.Колонки.Добавить("ЕстьАналитика",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ЕстьЗаполнение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ЕстьВычисление",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ИмяГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50),"");
	ТабДерево.Колонки.Добавить("ДанныеАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1),"");
	ТабДерево.Колонки.Добавить("Группировка",,"Группировка");
	
	Для Индекс=1 По КолонокАналитикиРаскрытия Цикл
		
		ТабДерево.Колонки.Добавить("_"+(Индекс+1),,"");
		
	КонецЦикла;
	
	УровеньСтрока=МассивГруппировокСтрокИтог.Найти("Строка")+1;
	УровеньКолонка=МассивГруппировокКолонокИтог.Найти("Колонка")+1;
	
	НачалоКолонок=ТабДерево.Колонки.Количество();
	
	ПерваяКолонка=НачалоКолонок+1;
	
	ВывестиКолонкиДерева(Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),1);
	
	ТабКоординатыКолонок.Индексы.Добавить("НомерКолонки");
	
	ТекНомерСтроки=0;
	
	Если СпособВывода="Дерево" Тогда
		ВывестиСтрокиДерева(ТабДерево,ТекНомерСтроки,Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,);
	Иначе
		ВывестиСтрокиДереваГруппировки(ТабДерево,ТекНомерСтроки,Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,)
	КонецЕсли;
		
	ТабКоординатыСтрок.Колонки.Удалить("СтрокаДерева");
	
	// Сформируем итоговую таблицу соответствия областей и группировок строк/колонок
	
	ШаблонКоординаты=Новый ТаблицаЗначений;
	
	ТекстЗапроса="";
	
	Если УправляемыйРежим Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ Строка, Колонка, Ссылка
		|ПОМЕСТИТЬ СтрокаКолонка
		|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
		|;";
		
		ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказатели);	
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+"
		|Уничтожить ТабКоординатыОбщ
		|;";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|ВЫБРАТЬ *
	|Поместить КоординатыСтрок
	|ИЗ &ТабКоординатыСтрок КАК ТабКоординатыСтрок
	|;
	|ВЫБРАТЬ *
	|Поместить КоординатыКолонок
	|ИЗ &ТабКоординатыКолонок КАК ТабКоординатыКолонок
	|ИНДЕКСИРОВАТЬ ПО НомерКолонки
	|;
	|ВЫБРАТЬ";
	
	ТекстСвязи="";
	ТекстВыбораИзмерений="";
	ТекстИндекс="";
	ТекстИндексТК="";
	
	КолонокИндекса=0;
	КолонокИндексаТК=7;
	
	Для Каждого Группировка ИЗ МассивГруппировокСтрокИтог Цикл
		
		Если Группировка="ИндексАналитики" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыСтрок."+Группировка+" КАК "+Группировка+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки[Группировка].Имя,ТабКоординатыСтрок.Колонки[Группировка].ТипЗначения);
		
	КонецЦикла;
	
	Если СпособВывода="Дерево" Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыСтрок.АналитикаВалюта КАК АналитикаВалюта,";
		
		ШаблонКоординаты.Колонки.Добавить("АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|КоординатыСтрок.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
			ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["Аналитика"+ИндексАналитики].Имя,ТабКоординатыСтрок.Колонки["Аналитика"+ИндексАналитики].ТипЗначения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыКолонок."+Группировка+" КАК "+Группировка+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыКолонок.Колонки[Группировка].Имя,ТабКоординатыКолонок.Колонки[Группировка].ТипЗначения);
		
	КонецЦикла;
	
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["Раскрытие"].Имя,ТабКоординатыСтрок.Колонки["Раскрытие"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["ЭтоГруппа"].Имя,ТабКоординатыСтрок.Колонки["ЭтоГруппа"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["ИмяГруппировки"].Имя,ТабКоординатыСтрок.Колонки["ИмяГруппировки"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["ИндексАналитики"].Имя,ТабКоординатыСтрок.Колонки["ИндексАналитики"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["НомерСтроки"].Имя,ТабКоординатыСтрок.Колонки["НомерСтроки"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыКолонок.Колонки["НомерКолонки"].Имя,ТабКоординатыКолонок.Колонки["НомерКолонки"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	
	ТекстЗапроса=ТекстЗапроса+"
	|КоординатыСтрок.Раскрытие КАК Раскрытие,
	|КоординатыСтрок.ЭтоГруппа КАК ЭтоГруппа,
	|КоординатыСтрок.ИмяГруппировки КАК ИмяГруппировки,
	|КоординатыСтрок.ИндексАналитики КАК ИндексАналитики,
	|КоординатыСтрок.НомерСтроки КАК НомерСтроки,
	|КоординатыКолонок.НомерКолонки КАК НомерКолонки
	|ПОМЕСТИТЬ ПересечениеКоординат
	|ИЗ КоординатыСтрок КАК КоординатыСтрок,КоординатыКолонок КАК КоординатыКолонок
	|;
	|ВЫБРАТЬ ПересечениеКоординат.*, 
	|ISNULL(СтрокаКолонка.Ссылка,&ПустойПоказатель) КАК Показатель
	|ПОМЕСТИТЬ ТабКоординатыОбщ	
	|ИЗ ПересечениеКоординат КАК ПересечениеКоординат
	|ЛЕВОЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка 
	|ПО ПересечениеКоординат.Строка=СтрокаКолонка.Строка
	|И  ПересечениеКоординат.Колонка=СтрокаКолонка.Колонка
	|ГДЕ НЕ ПересечениеКоординат.НомерКолонки=0";
	
	Если НЕ УправляемыйРежим Тогда
		ТекстЗапроса=ТекстЗапроса+"	
		|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,ПересечениеКоординат.Строка,ПересечениеКоординат.Колонка,Показатель,Раскрытие
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КоординатыСтрок
		|;
		|УНИЧТОЖИТЬ КоординатыКолонок
		|;
		|УНИЧТОЖИТЬ ПересечениеКоординат
		|;";		
	КонецЕсли;
	
	ЗапросКоординаты.Текст=ТекстЗапроса;
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыСтрок",ТабКоординатыСтрок);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыКолонок",ТабКоординатыКолонок);
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказатели);
	ЗапросКоординаты.УстановитьПараметр("ПустойПоказатель",Справочники.ПоказателиОтчетов.ПустаяСсылка());
	
	ЗапросКоординаты.Выполнить();
	
КонецПроцедуры // ВывестиОтчет()

Функция ПолучитьТаблицуИЗЗапроса(Запрос,ИмяТаблицы) Экспорт
	
	Запрос.Текст="Выбрать * ИЗ "+ИмяТаблицы;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуИЗЗапроса()

Процедура ПоместитьТаблицыВЗапросы() Экспорт
	
	ТекстЗапроса="";
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Для Каждого СтрТаблица ИЗ ТаблицыЗапросаДанные Цикл
		
		Если НЕ ТипЗнч(СтрТаблица.Значение)=Тип("ТаблицаЗначений") Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ *
		|Поместить "+СтрТаблица.Ключ+"
		|ИЗ &"+СтрТаблица.Ключ+" КАК "+СтрТаблица.Ключ+"
		|;";
		
		ЗапросДанные.УстановитьПараметр(СтрТаблица.Ключ,СтрТаблица.Значение);
		
	КонецЦикла;
	
	ЗапросДанные.Текст=ТекстЗапроса;
	ЗапросДанные.Выполнить();
	
	ТекстЗапроса="";
	
	ЗапросДанныеРаскрытия=Новый Запрос;
	ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Для Каждого СтрТаблица ИЗ ТаблицыЗапросаРаскрытие Цикл
		
		Если НЕ ТипЗнч(СтрТаблица.Значение)=Тип("ТаблицаЗначений") Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ *
		|Поместить "+СтрТаблица.Ключ+"
		|ИЗ &"+СтрТаблица.Ключ+" КАК "+СтрТаблица.Ключ+"
		|;";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр(СтрТаблица.Ключ,СтрТаблица.Значение);
		
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.Текст=ТекстЗапроса;
	ЗапросДанныеРаскрытия.Выполнить();
	
	ЗапросКоординаты=Новый Запрос;
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
			
КонецПроцедуры // ПоместитьТаблицыВЗапросы()

Процедура ВыгрузитьРасчетныеТаблицы() Экспорт
	
	// Выгрузим таблицы сводных данных
	
	ТаблицыЗапросаДанные=Новый Структура;
	
	ТаблицыЗапросаДанные.Вставить("ТабПоказатели",ПолучитьТаблицуИЗЗапроса(ЗапросДанные,"ТабПоказатели"));		
	ТаблицыЗапросаДанные.Вставить("СтрокиОтчетов",ПолучитьТаблицуИЗЗапроса(ЗапросДанные,"СтрокиОтчетов"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТаблицыЗапросаРаскрытие=Новый Структура;
	
	Для Каждого СтрРаскрытие ИЗ ТаблицаРаскрытийСтрок Цикл
		
		Для Каждого СтрРаскрытиеСтрока ИЗ СтрРаскрытие.ТабРаскрытиеСтроки Цикл
			
			ТаблицыЗапросаРаскрытие.Вставить(СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте));
			
			Для Каждого СтрДанныеВалюта ИЗ СтрРаскрытиеСтрока.ИменаТаблицВВалюте Цикл
				
				ТаблицыЗапросаРаскрытие.Вставить(СтрДанныеВалюта.Значение,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрДанныеВалюта.Значение));
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПрефиксТаблицы="Раскрытие_"+Формат(СтрРаскрытие.НомерСтроки,"ЧГ=0");
		ТаблицыЗапросаРаскрытие.Вставить("мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,"мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы));
		
	КонецЦикла;
	
	ТаблицыЗапросаРаскрытие.Вставить("ТабПоказатели",ПолучитьТаблицуИЗЗапроса(ЗапросДанные,"ТабПоказатели"));
	
	Если ДанныеРаскрытияИнициализированы Тогда	
		ТаблицыЗапросаРаскрытие.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	КонецЕсли;
	
	ТабКоординатыОбщ=ПолучитьТаблицуИЗЗапроса(ЗапросКоординаты,"ТабКоординатыОбщ");
	
	ЗапросДанные.МенеджерВременныхТаблиц.Закрыть();
	
	Если ТипЗнч(ЗапросДанныеРаскрытия)=Тип("Запрос") Тогда
		ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	ЗапросКоординаты.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ВыгрузитьРасчетныеТаблицы() 

Процедура ОчиститьРасчетныеТаблицы()
	
	ТаблицыЗапросаДанные=Новый Структура;
	ТаблицыЗапросаРаскрытие=Новый Структура;
	
КонецПроцедуры // ОчиститьРасчетныеТаблицы() 

Процедура ПоместитьТаблицуРаскрытияВСвод(ИмяТаблицы,СтрокаРаскрытия)
	
	ТекстОтбор="";
	ИзмеренияАналитики1="";
	ИзмеренияАналитики2="";
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокИспользуемыхВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Ложь);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",МаксАналитикОтчета+МаксАналитикПоказателя);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	Если Не СтрокаРаскрытия=Неопределено Тогда
		
		ОтборПоказателей=Новый Соответствие;
		ОтборПоказателей.Вставить("####.Строка=&СтрокаРаскрытия",Новый Структура("СтрокаРаскрытия",СтрокаРаскрытия));
		
		ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
		ДанныеЗапроса.Вставить("ПринудительнаяТипизация",Истина);
		
	Иначе
		
		ДанныеЗапроса.Вставить("ТабНомеровАналитик",?(ТипЗнч(ТабНомеровАналитик)=Тип("ТаблицаЗначений"),ТабНомеровАналитик.Скопировать(),Неопределено));
		
	КонецЕсли;
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		ЗапросДанныеРаскрытия.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"
	|//////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Значение КАК Значение,
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
	|	ЗначенияПоказателейОтчетов.Показатель.Строка КАК Строка,
	|	ЗначенияПоказателейОтчетов.Показатель.Колонка КАК Колонка,
	|   ИСТИНА КАК ЧисловойПоказатель,
	|	ЗначенияПоказателейОтчетов.Показатель.НеФинансовый КАК НеФинансовый,
	|	ЗначенияПоказателейОтчетов.Показатель.ВидКурса КАК ВидКурса";
	
	Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+",
		|ЗначенияПоказателейОтчетов.Аналитика"+Индекс;
		
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"
	|ПОМЕСТИТЬ "+ИмяТаблицы+"
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
КонецПроцедуры // ПоместитьТаблицуРаскрытияВСвод()

Процедура ПолучитьДанныеАналитики(СтрокаРаскрытия,СтрокаДерева,СтрокаКоординат,МассивПропускаемыхАналитик=Неопределено,ДобавленоСтрок=0) Экспорт
	
	Если НЕ ТаблицаРаскрытийСтрок.Найти(СтрокаДерева.НомерСтроки,"НомерСтроки")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксТаблицы="Раскрытие_"+Формат(СтрокаДерева.НомерСтроки,"ЧГ=0");
	
	ТабРаскрытиеСтроки=ШаблонРаскрытиеСтроки.СкопироватьКолонки();
	ЗапросДанныеРаскрытия.Текст="";
	
	НоваяСтрока=ТабРаскрытиеСтроки.Добавить();
	
	НоваяСтрока.ОсновнаяВалюта=ОсновнаяВалюта;
	НоваяСтрока.НомерСтроки=СтрокаДерева.НомерСтроки;
	НоваяСтрока.ИмяТаблицыВОсновнойВалюте=ПрефиксТаблицы+"_ВАЛ_"+ОсновнаяВалюта.Код;
	НоваяСтрока.ИменаТаблицВВалюте=Новый Соответствие;
	
	ПоместитьТаблицуРаскрытияВСвод(НоваяСтрока.ИмяТаблицыВОсновнойВалюте,СтрокаРаскрытия);
	
	Если ТабРаскрытиеСтроки.Количество() ИЛИ (НЕ ТабРаскрытиеСтроки[0].ОсновнаяВалюта=мТекущаяВалюта) Тогда // Потребуется пересчет в валюту отображения
		
		ЗапросДанныеРаскрытия.Выполнить();
		ЗапросДанныеРаскрытия.Текст="";
		
	КонецЕсли;
	
	// Пересчитаем при необходимости и получим сводные таблицы в валюте отображения
	
	ТекстОбъединениеРаскрытие="";
	ТекстДанныеРаскрытие="";
	
	Для Индекс=0 По ТабРаскрытиеСтроки.Количество()-1 Цикл
		
		ТекСвод=ТабРаскрытиеСтроки[Индекс];
		
		Если ТекСвод.ОсновнаяВалюта=мТекущаяВалюта Тогда
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы+" ","")+"ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
			
		Иначе
			
			// Получим мПоказателиРаскрытия в валюте отображения
			
			ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
			мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
			
			мПоказателиРаскрытияВВалютеТек=ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели,мПоказателиРаскрытияТек,мТекущаяВалюта,Ложь);
			
			ИмяТаблицыВВалюте=ПрефиксТаблицы+"_ВАЛ_"+СокрЛП(мТекущаяВалюта.Код)+"_мПоказателиРаскрытияВВалюте";
			
			ТекСвод.ИменаТаблицВВалюте.Вставить(мТекущаяВалюта,ИмяТаблицыВВалюте);
			
			ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
			|/////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
			|;";
			ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы+" ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекстДанныеРаскрытие="" Тогда
		
		ЗапросДанныеРаскрытия.Текст=ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
		|;";
		
	Иначе
		
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+Сред(ТекстОбъединениеРаскрытие,16)+"
		|;";
		
	КонецЕсли;
	
	ЗапросДанныеРаскрытия.Выполнить();	
	
	НоваяСтрока=ТаблицаРаскрытийСтрок.Добавить();
	НоваяСтрока.НомерСтроки=СтрокаДерева.НомерСтроки;
	НоваяСтрока.ТабРаскрытиеСтроки=ТабРаскрытиеСтроки;
	
	Если УправляемыйРежим Тогда
		
		Для Каждого СтрРаскрытиеСтрока ИЗ ТабРаскрытиеСтроки Цикл
			
			ТаблицыЗапросаРаскрытие.Вставить(СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте));
			
			Для Каждого СтрДанныеВалюта ИЗ СтрРаскрытиеСтрока.ИменаТаблицВВалюте Цикл
				
				ТаблицыЗапросаРаскрытие.Вставить(СтрДанныеВалюта.Значение,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрДанныеВалюта.Значение));
				
			КонецЦикла;
			
			ТаблицыЗапросаРаскрытие.Вставить("мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,"мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы));
			
		КонецЦикла;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	// Выводим раскрытие строки в дерево
	
	ТекТаблицаРаскрытия=ПолучитьТаблицуРаскрытияДляСтроки(ПрефиксТаблицы);
	
	ЗапросКоординаты.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ТабКоординатыОбщ."+Группировка+" КАК "+Группировка+",";
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
	|НомерКолонки,
	|Показатель,
	|0 КАК ЗначениеРаскрытия
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ ТабКоординатыОбщ.НомерСтроки=&НомерСтроки
	|И НЕ ТабКоординатыОбщ.Раскрытие";
	
	ЗапросКоординаты.УстановитьПараметр("НомерСтроки",СтрокаДерева.НомерСтроки);
	
	ТабКолонки=ЗапросКоординаты.Выполнить().Выгрузить();
	
	
	///////////////////////////////////////////////////////////////////////////////////////
	ЗапросСтрокаРаскрытия=Новый Запрос;
	
	ТекстВТ="ВЫБРАТЬ 
	|ТекТаблицаРаскрытия.Показатель,
	|ТекТаблицаРаскрытия.АналитикаВалюта,
	|ТекТаблицаРаскрытия.Колонка,
	|ТекТаблицаРаскрытия.ИндексАналитики,
	|ТекТаблицаРаскрытия.Значение
	|Поместить мПоказателиРаскрытия
	|ИЗ &ТекТаблицаРаскрытия КАК ТекТаблицаРаскрытия";
	
	Если НЕ МассивПропускаемыхАналитик=Неопределено Тогда
		
		ТекстВТ=ТекстВТ+"
		|ГДЕ НЕ ИндексАналитики В (&МассивПропускаемыхАналитик)";
		
		ЗапросСтрокаРаскрытия.УстановитьПараметр("МассивПропускаемыхАналитик",МассивПропускаемыхАналитик);
		
	КонецЕсли;
	
	ТекстВТ=ТекстВТ+"
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабКолонки
	|ИЗ &ТабКолонки КАК ТабКолонки
	|;
	|ВЫБРАТЬ";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТекстВТ=ТекстВТ+"
		|мПоказателиРаскрытия."+Группировка+" КАК "+Группировка+",";
		
	КонецЦикла;
	
	ЗапросСтрокаРаскрытия.УстановитьПараметр("ТекТаблицаРаскрытия",ТекТаблицаРаскрытия);
	ЗапросСтрокаРаскрытия.УстановитьПараметр("ТабКолонки",ТабКолонки);
	
	ТекстВТ=ТекстВТ+"
	|мПоказателиРаскрытия.ИндексАналитики,
	|мПоказателиРаскрытия.Значение КАК ЗначениеРаскрытия
	|ПОМЕСТИТЬ ТабПоказателиСвод
	|ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТекстВТ=ТекстВТ+"
		|ТабКолонки."+Группировка+" КАК "+Группировка+",";
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|мПоказателиРаскрытия.ИндексАналитики,
	|0
	|ИЗ ТабКолонки КАК ТабКолонки, мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ИНДЕКСИРОВАТЬ ПО Колонка";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		Если Группировка="Колонка" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+","+Группировка;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"		
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	КолонкиОтчетов.Ссылка КАК Колонка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|	ТабПоказателиСвод.ЗначениеРаскрытия КАК ЗначениеРаскрытия,
	|   ТабПоказателиСвод.ИндексАналитики
	|ИЗ ТабПоказателиСвод КАК ТабПоказателиСвод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка,ПорядковыйНомер 
	|						ИЗ Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|						ГДЕ КолонкиОтчетов.Владелец=&ВидОтчета
	|						И (НЕ КолонкиОтчетов.ПометкаУдаления)) КАК КолонкиОтчетов
	|		ПО ТабПоказателиСвод.Колонка=КолонкиОтчетов.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|ПорядковыйНомерКолонки,
	|ИндексАналитики
	|
	|ИТОГИ
	|СУММА(ЗначениеРаскрытия)
	|ПО		
	|ИндексАналитики,
	|Колонка";
	
	ЗапросСтрокаРаскрытия.Текст=ТекстВТ;
	ЗапросСтрокаРаскрытия.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	////////////////////////////////////////////////////////////////////////////////
	// Подготовим структуру расшифровки строки
	
	РасшифровкаСтрока=Новый Структура;
	
	Для Каждого Колонка ИЗ ТабКоординатыСтрок.Колонки Цикл
		
		РасшифровкаСтрока.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(РасшифровкаСтрока,СтрокаКоординат);
	
	РасшифровкаСтрока.УровеньСтроки=Истина;
	РасшифровкаСтрока.ИмяГруппировки="ИндексАналитики";
	
	///////////////////////////////////////////////////////////////////////////////
	// Подготовим таблицу добавленных строк для таблицы координат
	
	ТабКоординатыНов=ШаблонКоординаты.СкопироватьКолонки();
	
	////////////////////////////////////////////////////////////////////////////////
	// Выведем данные запроса в дерево
	
	Результат=ЗапросСтрокаРаскрытия.Выполнить();	
	Выборка=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все");
	ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки()+ДобавленоСтрок;
	ИндексДобавления=0;
	ВставлятьСтроки=СтрокаДерева.Строки.Количество()>0 И (НЕ СтрокаДерева.Строки[0].Раскрытие); // Синтетические строки были сгруппированы по иерархии 
	
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрАналитика=ТекТаблицаРаскрытия.Найти(ИндексАналитики,"ИндексАналитики");
		
		Если СтрАналитика=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УправляемыйРежим Тогда
			СтруктураСтрока=Новый Структура;
		КонецЕсли;
		
		Если ВставлятьСтроки Тогда
			
			НоваяСтрока=СтрокаДерева.Строки.Вставить(ИндексДобавления);
			
			Если УправляемыйРежим Тогда
				СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
				СтруктураСтрока.Вставить("ИндексВставки",ИндексДобавления);
			КонецЕсли;
			
			ИндексДобавления=ИндексДобавления+1;
			
		Иначе
			
			НоваяСтрока=СтрокаДерева.Строки.Добавить();
			
			Если УправляемыйРежим Тогда
				СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
				СтруктураСтрока.Вставить("ИндексВставки",-1);
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Раскрытие=Истина;
		
		НоваяСтрока.ЕстьЗаполнение=СтрокаДерева.ЕстьЗаполнение;
		НоваяСтрока.ЕстьВычисление=СтрокаДерева.ЕстьВычисление;
		НоваяСтрока.ДанныеАналитики=2;
		
		ВсегоСтрок=ВсегоСтрок+1;
		НоваяСтрока.НомерСтроки=ВсегоСтрок;
		
		СтруктураАналитика=Новый Структура;
		СтруктураАналитика.Вставить("ИндексАналитики",ИндексАналитики);
		НомерЯчейки=6;
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрока[НомерЯчейки]=СтрАналитика["Аналитика"+Индекс];				
			СтруктураАналитика.Вставить("Аналитика"+Индекс,СтрАналитика["Аналитика"+Индекс]);
			
			НомерЯчейки=НомерЯчейки+1;
			
		КонецЦикла;
		
		ДобавитьРасшифровкуСтрокиРаскрытия(ВсегоСтрок,РасшифровкаСтрока,СтруктураАналитика);
		
		НачалоВывода=ПерваяКолонка;	
		ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,Неопределено,НачалоВывода);
		
		Если УправляемыйРежим Тогда
			
			ДанныеНовойСтроки=Новый Структура;
			Для Каждого Колонка ИЗ ТабДерево.Колонки Цикл
				ДанныеНовойСтроки.Вставить(Колонка.Имя,НоваяСтрока[Колонка.Имя]);
			КонецЦикла;
			
			СтруктураСтрока.Вставить("ДанныеНовойСтроки",ДанныеНовойСтроки);
			МассивДобавленныхСтрокКПередаче.Добавить(СтруктураСтрока);
			
		КонецЕсли;
		
		//Добавим описание координат добавленных ячеек
		Для Каждого СтрКолонка ИЗ ТабКолонки Цикл
			
			НоваяСтрока=ТабКоординатыНов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрКолонка);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,РасшифровкаСтрока);
			НоваяСтрока.НомерСтроки=ВсегоСтрок;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураАналитика);
			НоваяСтрока.Раскрытие=Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТабКоординатыНов.Количество()=0 Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	ТекстВыборки="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		ТекстВыборки=ТекстВыборки+",
		|"+Колонка.Имя+" КАК "+Колонка.Имя;
		
	КонецЦикла;
	
	ТекстВыборки=Сред(ТекстВыборки,2);
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ 
	|* 
	|Поместить ТабКоординатыНов
	|ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ"+ТекстВыборки+"
	|Поместить ТабКоординатыТек
	|Из ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстВыборки+"
	|ИЗ ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|Уничтожить ТабКоординатыОбщ
	|;
	|Уничтожить ТабКоординатыНов
	|;
	|ВЫБРАТЬ * 
	|Поместить ТабКоординатыОбщ
	|ИЗ ТабКоординатыТек КАК ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,Показатель,Раскрытие,Строка,Колонка
	|;
	|Уничтожить ТабКоординатыТек";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("НомерСтроки",СтрокаДерева.Строки[0].НомерСтроки);
	
	ЗапросКоординаты.Выполнить();
	
КонецПроцедуры // ПолучитьДанныеАналитики(СтрокаДерева,ДанныеДляОтбора)

Функция ПолучитьТаблицуРаскрытияДляСтроки(ПрефиксТаблицы)
	
	ТекстВТ="";	
	ТекстОбъединениеРаскрытие="";
	
	МассивТаблицПоказателейРаскрытия=Новый Массив;
	
	ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|мПоказателиРаскрытияКонтекст.Показатель,
	|мПоказателиРаскрытияКонтекст.АналитикаВалюта,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"		
		|мПоказателиРаскрытияКонтекст.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
	|мПоказателиРаскрытияКонтекст.Значение
	|Поместить РаскрытиеСтроки
	|ИЗ мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+" КАК мПоказателиРаскрытияКонтекст";
	
	ТекстОтбор="";	
	
	МассивТаблицПоказателейРаскрытия.Добавить("РаскрытиеСтроки");
	
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединениеРаскрытие,16)+"
	|;
	|ВЫБРАТЬ РаскрытиеСтроки.*,
	|ТабПоказатели.Колонка
	|ИЗ РаскрытиеСтроки КАК РаскрытиеСтроки
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоказатели КАК ТабПоказатели
	|ПО РаскрытиеСтроки.Показатель=ТабПоказатели.Показатель";
	
	ЗапросДанныеРаскрытия.Текст=ТекстВТ;
	
	ТекТаблицаРаскрытия=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();	
	ТекТаблицаРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	Для Каждого СтрРаскрытия ИЗ ТекТаблицаРаскрытия Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
	ТекТаблицаРаскрытия.Индексы.Добавить("ИндексАналитики");
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если МассивТаблицПоказателейРаскрытия.Количество()>0 Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателейРаскрытия Цикл
			ТекстУничтожить=ТекстУничтожить+"Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанныеРаскрытия.Текст=ТекстУничтожить;
		ЗапросДанныеРаскрытия.Выполнить();
		
		МассивТаблицПоказателейРаскрытия.Очистить();
		
	КонецЕсли;
	
	Возврат ТекТаблицаРаскрытия;
	
КонецФункции // ПолучитьТаблицуРаскрытияДляСтроки() 

Функция ВернутьМассивКоординат(СтруктураПоиска) Экспорт
	
	Возврат ТабКоординатыОбщ.НайтиСтроки(СтруктураПоиска);
	
КонецФункции // ВернутьМассивКоординат()

Функция ПолучитьМаксимальныйНомерСтроки() Экспорт
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабКоординатыОбщ.НомерСтроки
	|ИЗ
	|	ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабКоординатыОбщ.НомерСтроки УБЫВ";
	
	РезультатНомер=ЗапросКоординаты.Выполнить().Выбрать();
	
	Если РезультатНомер.Следующий() Тогда
		Возврат РезультатНомер.НомерСтроки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьМаксимальныйНомерСтроки()

Процедура ДобавитьРасшифровкуКолонки(НомерКолонки,Расшифровка)
	
	КоординатаКолонки=ТабКоординатыКолонок.Найти(НомерКолонки,"НомерКолонки");
	Если КоординатаКолонки=Неопределено Тогда
		КоординатаКолонки=ТабКоординатыКолонок.Добавить();
		КоординатаКолонки.НомерКолонки=НомерКолонки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КоординатаКолонки,Расшифровка);
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Процедура ДобавитьРасшифровкуСтроки(НомерСтроки,Расшифровка)
	
	НоваяСтрока=ТабКоординатыСтрок.Добавить();
	НоваяСтрока.НомерСтроки=НомерСтроки;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Расшифровка);
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Процедура ДобавитьРасшифровкуСтрокиРаскрытия(НомерСтроки,РасшифровкаСтроки,СтрРаскрытия)
	
	НоваяСтрока=ТабКоординатыСтрок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,РасшифровкаСтроки);
	НоваяСтрока.НомерСтроки=НомерСтроки;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрРаскрытия);
	
	НоваяСтрока.Раскрытие=Истина;
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Процедура ВывестиКолонкиДерева(Выборка,ТекУровень)	 
	
	Индекс=1;
	
	ОткрытаГруппа=Ложь;
	
	ПервыйЭлементГруппировки=Истина;
	
	Индекс=1;
	
	Пока Выборка.Следующий() Цикл
		
		НомерКолонкиИтог=ТабДерево.Колонки.Количество();
		
		Если ТекУровень=1 Тогда
			Расшифровка=Новый Структура;
		КонецЕсли;
		
		ИмяГруппировки=Выборка.Группировка();
		ЗначениеГруппировки=Выборка[ИмяГруппировки];
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		
		Расшифровка.Вставить(ИмяГруппировки,ЗначениеГруппировки);
		
		ТабДерево.Колонки.Добавить("_"+Формат(НомерКолонкиИтог+1,"ЧГ=0"),ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,УровеньТочности),Строка(ЗначениеГруппировки));
		
		ИндексКолонки=НомерКолонкиИтог+Индекс;
		
		ДобавитьРасшифровкуКолонки(ТабДерево.Колонки.Количество(),Расшифровка);
		
		НачалоУровня=ИндексКолонки;
		
		ПервыйЭлементГруппировки=Ложь;
		
		Если Расшифровка.Свойство(ИмяГруппировки) Тогда
			Расшифровка.Удалить(ИмяГруппировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиКолонкиДерева()

Функция ПолучитьСтрокуРодителя(РасшифровкаСтроки,Строка)
	
	ТекДанныеСтроки=ТаблицаСтроки.Найти(Строка,"Ссылка");
	ТекРодитель=ТекДанныеСтроки.Родитель;
	
	Если ТекРодитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПоиска=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(РасшифровкаСтроки);
	СтруктураПоиска.Вставить("Строка",ТекРодитель);
	СтруктураПоиска.Вставить("Раскрытие",Ложь);
	СтруктураПоиска.Удалить("СтрокаДерева");
	
	МассивРодитель=ТабКоординатыСтрок.НайтиСтроки(СтруктураПоиска);
	Если МассивРодитель.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивРодитель[0].СтрокаДерева;
	КонецЕсли;
	
КонецФункции // ПолучитьСтрокуРодителя() 

Функция ПолучитьДанныеЭлемента(Элемент,Выборка,ИмяГруппировки)
	
	ДанныеЭлемента=КэшДанныхЭлементов.Получить(Элемент);
	
	Если ДанныеЭлемента=Неопределено Тогда
		
		ДанныеЭлемента=Новый Структура;
		
		// Определяем родителя
		
		Если ЗначениеЗаполнено(Выборка[ИмяГруппировки+"Родитель"]) Тогда
			
			ДанныеЭлемента.Вставить("Родитель",Выборка[ИмяГруппировки+"Родитель"]);
			
		Иначе
			
			Попытка
				
				Родитель=Элемент.Родитель;
				
				Если ЗначениеЗаполнено(Родитель) Тогда	
					
					ДанныеЭлемента.Вставить("Родитель",Родитель);
					
				Иначе
					
					ДанныеЭлемента.Вставить("Родитель",Неопределено);
					
				КонецЕсли;
				
			Исключение
				
				ДанныеЭлемента.Вставить("Родитель",Неопределено);
				
			КонецПопытки;
			
		КонецЕсли;
		
		// Определяем, является ли элемент группой
		
		Если ЗначениеЗаполнено(Выборка[ИмяГруппировки+"ЭтоГруппа"]) Тогда
			
			ДанныеЭлемента.Вставить("ЭтоГруппа",Выборка[ИмяГруппировки+"ЭтоГруппа"]);
			
		Иначе
			
			Попытка	
				
				ДанныеЭлемента.Вставить("ЭтоГруппа",Элемент.ЭтоГруппа);
				
			Исключение
				
				ДанныеЭлемента.Вставить("ЭтоГруппа",Ложь);
				
			КонецПопытки;
			
		КонецЕсли;
		
		КэшДанныхЭлементов.Вставить(Элемент,ДанныеЭлемента);
		Возврат ДанныеЭлемента;
		
	Иначе
		
		Возврат ДанныеЭлемента; 
		
	КонецЕсли;
	
КонецФункции // ДобавитьВКэшДанныхЭлементов()

Процедура ВывестиСтрокиДереваГруппировки(СтрокаРодитель,ТекНомерСтроки,Выборка,ТекУровень,ТаблицаИтогов=Неопределено)
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекУровень=0 Тогда
			РасшифровкаСтрока=Новый Структура;
		КонецЕсли;
		
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда 
			
			РасшифровкаСтрока.Вставить("ИмяГруппировки",ИмяГруппировки);
			РасшифровкаСтрока.Вставить(ИмяГруппировки,Выборка[ИмяГруппировки]);
			РасшифровкаСтрока.Вставить("УровеньСтроки",(ИмяГруппировки="Строка"));
			
			Если ИмяГруппировки="Строка" Тогда
				
				ТекРодительСтроки=ПолучитьСтрокуРодителя(РасшифровкаСтрока,ТекЭлемент);
				Если НЕ ТекРодительСтроки=Неопределено Тогда
					НоваяСтрока=ТекРодительСтроки.Строки.Добавить();
				Иначе
					НоваяСтрока=СтрокаРодитель.Строки.Добавить();
				КонецЕсли;
				
			Иначе
				
				Если СтрНайти(ИмяГруппировки,"Аналитика")>0 Тогда
										
					Если СпособВывода="ДеревоГруппировкаСИерархией" Тогда 
						
						ДанныеЭлемента=ПолучитьДанныеЭлемента(Выборка[ИмяГруппировки],Выборка,ИмяГруппировки);
												
						Если ДанныеЭлемента.Родитель=Неопределено Тогда
							
							НоваяСтрока=СтрокаРодитель.Строки.Добавить();
							
						Иначе
							
							СтруктураПоиска=Новый Структура("Группировка",ДанныеЭлемента.Родитель);
							
							МассивРодитель=СтрокаРодитель.Строки.НайтиСтроки(СтруктураПоиска,Истина);
							
							Если МассивРодитель.Количество()>0 Тогда
								
								НоваяСтрока=МассивРодитель[0].Строки.Добавить();
								
							Иначе
								
								НоваяСтрока=СтрокаРодитель.Строки.Добавить();
								
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяСтрока.ЭтоГруппа=ДанныеЭлемента.ЭтоГруппа;
						НоваяСтрока.Раскрытие=Истина;
					
					Иначе
						
						НоваяСтрока=СтрокаРодитель.Строки.Добавить();
						НоваяСтрока.Раскрытие=Истина;
					
					КонецЕсли;
							
				Иначе
					
					НоваяСтрока=СтрокаРодитель.Строки.Добавить();	
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекНомерСтроки=ТекНомерСтроки+1;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Родитель) Тогда
				НоваяСтрока.Родитель.ЕстьЗаполнение=Ложь;
			КонецЕсли;
			
			НоваяСтрока.НомерСтроки=ТекНомерСтроки;
			НоваяСтрока.Группировка=ТекЭлемент;
			НоваяСтрока.ИмяГруппировки=ИмяГруппировки;
			
			РасшифровкаСтрока.Вставить("СтрокаДерева",НоваяСтрока);
			РасшифровкаСтрока.Вставить("Раскрытие",НоваяСтрока.Раскрытие);
			РасшифровкаСтрока.Вставить("ЭтоГруппа",НоваяСтрока.ЭтоГруппа);
			РасшифровкаСтрока.Вставить("ИмяГруппировки",НоваяСтрока.ИмяГруппировки);
								
			ДобавитьРасшифровкуСтроки(ТекНомерСтроки,РасшифровкаСтрока);
			
			НачалоВывода=ПерваяКолонка;
			ЗаполнитьСтрокуДерева(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоВывода);
			
			ТекУровеньВывода=ТекНомерСтроки;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если РасшифровкаСтрока.Свойство("Строка") Тогда
			
			ТекПризнакиСтроки=ТабПризнакиСтрок.Найти(РасшифровкаСтрока.Строка,"Строка");
			
			НоваяСтрока.ЕстьВычисление=ТекПризнакиСтроки.ЕстьВычисление;
			НоваяСтрока.ЕстьАналитика=ТекПризнакиСтроки.ЕстьРаскрытие;
			НоваяСтрока.ДанныеАналитики=?(НоваяСтрока.Раскрытие,2,?(НоваяСтрока.ЕстьАналитика,1,0));	
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-1 Тогда
			
			ВывестиСтрокиДереваГруппировки(НоваяСтрока,ТекНомерСтроки,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],""),ТекУровень+1,ТаблицаИтогов);
									
		КонецЕсли;
		
		НоваяСтрока.ЕстьЗаполнение=НоваяСтрока.Строки.Количество()=0;
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИмяГруппировки) И РасшифровкаСтрока.Свойство(ИмяГруппировки) Тогда
		
		РасшифровкаСтрока.Удалить(ИмяГруппировки);

	КонецЕсли;	
		
КонецПроцедуры // ВывестиСтрокиДерева()

Процедура ВывестиСтрокиДерева(СтрокаРодитель,ТекНомерСтроки,Выборка,ТекУровень,ТаблицаИтогов=Неопределено)
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекУровень=0 Тогда
			РасшифровкаСтрока=Новый Структура;
		КонецЕсли;
		
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда 
			
			РасшифровкаСтрока.Вставить("ИмяГруппировки",ИмяГруппировки);
			РасшифровкаСтрока.Вставить(ИмяГруппировки,Выборка[ИмяГруппировки]);
			РасшифровкаСтрока.Вставить("УровеньСтроки",(ИмяГруппировки="Строка"));
			
			Если ИмяГруппировки="Строка" Тогда
				ТекРодительСтроки=ПолучитьСтрокуРодителя(РасшифровкаСтрока,ТекЭлемент);
				Если НЕ ТекРодительСтроки=Неопределено Тогда
					НоваяСтрока=ТекРодительСтроки.Строки.Добавить();
				Иначе
					НоваяСтрока=СтрокаРодитель.Строки.Добавить();
				КонецЕсли;
			Иначе
				НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
			ТекНомерСтроки=ТекНомерСтроки+1;
			
			РасшифровкаСтрока.Вставить("СтрокаДерева",НоваяСтрока);
			
			НоваяСтрока.НомерСтроки=ТекНомерСтроки;
			НоваяСтрока.Группировка=ТекЭлемент;
			
			ДобавитьРасшифровкуСтроки(ТекНомерСтроки,РасшифровкаСтрока);
			
			НачалоВывода=ПерваяКолонка;
			ЗаполнитьСтрокуДерева(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоВывода);
			
			ТекУровеньВывода=ТекНомерСтроки;
			
		КонецЕсли;
		
		Если РасшифровкаСтрока.Свойство("Строка") Тогда
			ТекПризнакиСтроки=ТабПризнакиСтрок.Найти(РасшифровкаСтрока.Строка,"Строка");
			НоваяСтрока.ЕстьЗаполнение=ТекПризнакиСтроки.ЕстьЗаполнение;
			НоваяСтрока.ЕстьВычисление=ТекПризнакиСтроки.ЕстьВычисление;
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-2 Тогда
			
			ВывестиСтрокиДерева(НоваяСтрока,ТекНомерСтроки,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],""),ТекУровень+1,ТаблицаИтогов);
			
		ИначеЕсли ТекУровень+1=МассивГруппировокСтрокИтог.Количество()-1 Тогда
			
			НоваяСтрока.ЕстьАналитика=РасшифровкаСтрока.Свойство("Строка") И ТекПризнакиСтроки.ЕстьРаскрытие;	
			НоваяСтрока.ДанныеАналитики=?(НоваяСтрока.ЕстьАналитика,1,0);
			
			ВывестиАналитикуДерева(НоваяСтрока,ТекНомерСтроки,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все"),Выборка[ИмяГруппировки],ТекУровеньСтрока,ТаблицаИтогов);
			
		КонецЕсли;
		
		Если РасшифровкаСтрока.Свойство(ИмяГруппировки) Тогда
		
			РасшифровкаСтрока.Удалить(ИмяГруппировки);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ВывестиСтрокиДерева()

Процедура ЗаполнитьСтрокуДерева(ТекСтрока,Выборка,ТекУровеньКолонка,ТекУровеньСтрока,ТаблицаИтогов=Неопределено,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки=Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТаблицаИтогов=Неопределено Тогда
			
			Если ТекКолонкаШапки=Неопределено Тогда
				Продолжить;
			ИначеЕсли НЕ ТекЭлемент=ТекКолонкаШапки[ИмяГруппировки] Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗначениеРаскрытия) И (НЕ ЗначениеЗаполнено(Выборка.Значение)) Тогда
			
			РабочееЗначение=Выборка.ЗначениеРаскрытия/ТекущийДелитель;
						
		ИначеЕсли ЗначениеЗаполнено(Выборка.Значение) Тогда
			
			РабочееЗначение=Выборка.Значение/ТекущийДелитель;
						
		Иначе
			
			РабочееЗначение=0;
						
		КонецЕсли;
				
		Если ТекУровень>=УровеньКолонка Тогда
			
			Если ТекУровеньСтрока>=УровеньСтрока Тогда
				
				Если НЕ ТаблицаИтогов=Неопределено Тогда // Только добавляем строку в таблицу итогов
					
					НоваяСтрока=ТаблицаИтогов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
					ТекНомерКолонки=ТекНомерКолонки+3;
					
				Иначе	
					
					ТекСтрока[ТекНомерКолонки-1]=РабочееЗначение;
					ТекНомерКолонки=ТекНомерКолонки+3;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
			
			ЗаполнитьСтрокуДерева(ТекСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень],"Все"),ТекУровень+1,ТекУровеньСтрока,ТаблицаИтогов,ТекНомерКолонки);
			
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтрокуДерева()

Процедура ВывестиАналитикуДерева(Строка,ТекНомерСтроки,Выборка,ВладелецГруппы,ТекУровеньСтрока,ТаблицаИтогов=Неопределено);
	
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти("ИндексАналитики")+1;
		
		Если мТекущаяВалюта=ОсновнаяВалюта Тогда
			
			СтрАналитика=мПоказателиРаскрытия.Найти(ИндексАналитики,"ИндексАналитики");
			
		Иначе
			
			СтрАналитика=мПоказателиРаскрытияВВалюте.Найти(ИндексАналитики,"ИндексАналитики");
			
		КонецЕсли;
		
		Если СтрАналитика=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Строка.Строки.Добавить();
		НоваяСтрока.Раскрытие=Истина;
		НоваяСтрока.ДанныеАналитики=2;
		
		ТекНомерСтроки=ТекНомерСтроки+1;
		НоваяСтрока.НомерСтроки=ТекНомерСтроки;
		
		НоваяСтрока.ЕстьЗаполнение=Строка.ЕстьЗаполнение;
		НоваяСтрока.ЕстьВычисление=Строка.ЕстьВычисление;
		
		СтруктураАналитика=Новый Структура;
		СтруктураАналитика.Вставить("ИндексАналитики",ИндексАналитики);
		НомерЯчейки=8;
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрока[НомерЯчейки]=СтрАналитика["Аналитика"+Индекс];				
			СтруктураАналитика.Вставить("Аналитика"+Индекс,СтрАналитика["Аналитика"+Индекс]);
			
			НомерЯчейки=НомерЯчейки+1;
			
		КонецЦикла;
		
		ДобавитьРасшифровкуСтрокиРаскрытия(ТекНомерСтроки,РасшифровкаСтрока,СтруктураАналитика);
		
		НачалоВывода=ПерваяКолонка;	
		ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТаблицаИтогов,НачалоВывода);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиАналитикуДерева()

Процедура ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка,ТекУровеньКолонка,ТаблицаИтогов=Неопределено,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки=Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТаблицаИтогов=Неопределено Тогда
			
			Если ТекКолонкаШапки=Неопределено Тогда
				Продолжить;
			ИначеЕсли НЕ ТекЭлемент=ТекКолонкаШапки[ИмяГруппировки] Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровень>=УровеньКолонка И ЗначениеЗаполнено(Выборка[ИмяГруппировки]) Тогда
			
			Если НЕ ТаблицаИтогов=Неопределено Тогда // Только добавляем строку в таблицу итогов
				
				НоваяСтрока=ТаблицаИтогов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				ТекНомерКолонки=ТекНомерКолонки+3;
				
			Иначе 
				
				НоваяСтрока[ТекНомерКолонки-1]=?(Выборка.ЗначениеРаскрытия=NULL,0,Выборка.ЗначениеРаскрытия)/ТекущийДелитель;
				ТекНомерКолонки=ТекНомерКолонки+3;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровеньКолонка+1<=МассивГруппировокКолонокИтог.Количество()-1 Тогда
			ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровеньКолонка+1],"Все"),ТекУровеньКолонка+1,ТаблицаИтогов,ТекНомерКолонки);
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтрокуАналитики()

Процедура РазвернутьСтрокуАналитики(Выборка,ТекУровеньКолонка,ТаблицаИтогов,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки=Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТекУровень>=УровеньКолонка Тогда
			
			НоваяСтрока=ТаблицаИтогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			ТекНомерКолонки=ТекНомерКолонки+1;			
		КонецЕсли;
		
		Если ТекУровеньКолонка+1<=МассивГруппировокКолонокИтог.Количество()-1 Тогда
			РазвернутьСтрокуАналитики(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровеньКолонка+1],"Все"),ТекУровеньКолонка+1,ТаблицаИтогов,ТекНомерКолонки);
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтрокуАналитики()

Функция ПолучитьРасшифровкуЯчейки(Строка,Колонка) Экспорт
	
	МассивРасшифровкаПоказатель=ВернутьМассивКоординат(Новый Структура("НомерСтроки,НомерКолонки",Строка,Колонка));
	МассивРасшифровкаСтрока=ВернутьМассивКоординат(Новый Структура("НомерСтроки",Строка));
	
	ТекРасшифровка = Новый Структура;
	ТекРасшифровка.Вставить("ОбластьПоказателя",МассивРасшифровкаПоказатель.Количество()>0);
	
	Если МассивРасшифровкаПоказатель.Количество()=0 Тогда
		
		МассивРасшифровкаПоказатель=МассивРасшифровкаСтрока;
				
		Если МассивРасшифровкаПоказатель.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПоказатели = Новый Массив;
	СтруктураПоиска=Новый Структура;
	
	Для каждого СтрокаМассива из МассивРасшифровкаПоказатель Цикл
		
		Для Каждого ТабКолонка ИЗ ТабКоординатыОбщ.Колонки Цикл
			
			ТекЗначение=МассивРасшифровкаПоказатель[0][ТабКолонка.Имя];
			
			Если ЗначениеЗаполнено(ТекЗначение) ИЛИ СтрНайти(ТабКолонка.Имя,"_Родитель")>0 Тогда
				ТекРасшифровка.Вставить(ТабКолонка.Имя,ТекЗначение);
			КонецЕсли;
			
			Если (Найти(ТабКолонка.Имя,"Аналитика")>0 ИЛИ Найти(ТабКолонка.Имя,"Показатель")>0)
				И ЗначениеЗаполнено(ТекЗначение) Тогда
				
				СтруктураПоиска.Вставить(ТабКолонка.Имя,ТекЗначение);
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекРасшифровка.Свойство("Показатель") Тогда
		
		МассивПоказатели=Новый Массив;
		МассивОбработанныхПоказателей=Новый Массив;
		СтрПоказатель=мСоответствиеДляПоискаПоСсылке[ТекРасшифровка.Показатель];
		
		ТекРасшифровка.Вставить("Значение",СтрПоказатель.Значение);
		ТекРасшифровка.Вставить("ДанныеПоказателя",(Новый Структура("Ссылка, Код,Наименование,Строка,Колонка, НеФинансовый,ЧисловойПоказатель,ВидКурса, СвязанныйПоказатель, Значение, ТипЗначения, ПериодРасчета",
										СтрПоказатель.Ссылка,
										СтрПоказатель.Код,
										СтрПоказатель.Наименование,
										СтрПоказатель.Строка,
										СтрПоказатель.Колонка,
										СтрПоказатель.НеФинансовый,
										СтрПоказатель.ЧисловойПоказатель,
										СтрПоказатель.ВидКурса,
										СтрПоказатель.СвязанныйПоказатель,
										СтрПоказатель.Значение,
										СтрПоказатель.ТипЗначения,
										СтрПоказатель.ПериодРасчета)));
					
		ТекГруппаРаскрытия=СтрПоказатель.ГруппаРаскрытия;
		ТекРасшифровка.Вставить("НеРедактируется",СписокРедактируемыхПоказателей.НайтиПоЗначению(ТекРасшифровка.Показатель)=Неопределено);
		
		Для Каждого СтрокаМассива ИЗ МассивРасшифровкаСтрока Цикл
			
			ДанныеПоказателя=мСоответствиеДляПоискаПоСсылке[СтрокаМассива.Показатель];
			
			Если ЗначениеЗаполнено(ДанныеПоказателя) 
				И ДанныеПоказателя.ГруппаРаскрытия=ТекГруппаРаскрытия
				И МассивОбработанныхПоказателей.Найти(СтрокаМассива.Показатель)=Неопределено Тогда
				
				СтрПоказатель=Новый Структура;
				СтрПоказатель.Вставить("Показатель",	СтрокаМассива.Показатель);
				СтрПоказатель.Вставить("Код",			ДанныеПоказателя.Код);
				СтрПоказатель.Вставить("ТипЗначения",	ДанныеПоказателя.ТипЗначения);
				СтрПоказатель.Вставить("Наименование",	ДанныеПоказателя.Наименование);
				СтрПоказатель.Вставить("НеРедактируется",СписокРедактируемыхПоказателей.НайтиПоЗначению(СтрокаМассива.Показатель)=Неопределено);
				СтрПоказатель.Вставить("НеМасштабируется",ДанныеПоказателя.НеМасштабируется);
				СтрПоказатель.Вставить("НеФинансовый",	ДанныеПоказателя.НеФинансовый);
				
				МассивПоказатели.Добавить(СтрПоказатель);
				МассивОбработанныхПоказателей.Добавить(СтрокаМассива.Показатель);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекРасшифровка.Вставить("Показатели",	МассивПоказатели);
		
		Если ТекРасшифровка.Раскрытие Тогда
					
			МассивАналитик=мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
			
			Если МассивАналитик.Количество()>0 Тогда
				
				СтруктураАналитика=Новый Структура;
					
				Для каждого КолонкаРаскрытия Из мПоказателиРаскрытия.Колонки Цикл
					
					СтруктураАналитика.Вставить(КолонкаРаскрытия.Имя,МассивАналитик[0][КолонкаРаскрытия.Имя]);
					
				КонецЦикла; 
				
				ТекРасшифровка.Вставить("СтруктураАналитика",СтруктураАналитика);
								
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
		
	Возврат ТекРасшифровка;
	
КонецФункции // ПолучитьДанныеЯчейки() 

Процедура РаспаковатьТаблицуЗначений(ИмяТаблицы,ДанныеТаблицы) Экспорт
	
	РабочаяТаблица=ЭтотОбъект[ИмяТаблицы];
	РабочаяТаблица.Очистить();
	
	Для Каждого СтруктураСтрока ИЗ ДанныеТаблицы Цикл
		
		НоваяСтрока=РабочаяТаблица.Добавить();
		
		Для Каждого ЗначениеКолонки ИЗ СтруктураСтрока Цикл
			
			НоваяСтрока[ЗначениеКолонки.Ключ]=ЗначениеКолонки.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РаспаковатьТаблицуЗначений()

Функция ЗаписатьЗначениеВмПоказателиРаскрытия(Значение, СсылкаНаЗаписываемуюСтроку, 
						РазрешитьЗаписьНулевыхЗначений = Ложь,
						ЗаполнениеПустойТаблицы = Ложь,
						РежимВычисления=Ложь) Экспорт
	
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект,Значение, СсылкаНаЗаписываемуюСтроку,
						РазрешитьЗаписьНулевыхЗначений,
						ЗаполнениеПустойТаблицы,
						РежимВычисления);
		
КонецФункции // ЗаписатьЗначениеВмПоказателиРаскрытия()

Процедура ЗаписатьЗначениеВмПоказатели(СсылкаНаЗаписываемуюСтроку, Значение,РежимВычисления=Ложь) Экспорт
	
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,СсылкаНаЗаписываемуюСтроку, Значение,РежимВычисления);
	
		
КонецПроцедуры // ЗаписатьЗначениеВмПоказатели()


//	ПРОЦЕДУРЫ И ФУНКЦИИ, ОБСЛУЖИВАЮЩИЕ ОПИСАННЫЕ В ДОКУМЕНТАЦИИ ДОСТУПНЫЕ ПОЛЬЗОВАТЕЛЮ ДЛЯ ИСПОЛЬЗОВАНИЯ

// Функция возвращает структуру, в которой хранятся данные в следующих полях:
// - ЧистыеАктивы  - чистые активы объекта инвестирования на момент входа в период.
// - ДенежныйЭквивалентВЧА - денежный эквивалент доли инвестора в чистых активах объекта инвестирования.
// - ЗатратыНаПриобретение - затраты на приобретение объекта инвестирования.
// - Гудвилл        - гудвилл.
// - ПроцентГолосующихАкций - процент голосующих акций в объекте инвестирования.
// - ДатаВхожденияВПериметр - дата вхождения объекта инвестирования в периметр.
Функция ПолучитьСтруктуруВхожденияВПериметр(Знач локОрганизация)
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСтруктуруВхожденияВПериметр(ЭтотОбъект, локОрганизация);
	
КонецФункции

//	ПРОЦЕДУРЫ И ФУНКЦИИ, ОПИСАННЫЕ В ДОКУМЕНТАЦИИ КАК ДОСТУПНЫЕ ПОЛЬЗОВАТЕЛЮ ДЛЯ ИСПОЛЬЗОВАНИЮ

// Функция, возвращающая массив организаций, осуществляющих контроль периода, к которому относится текущий отчет.
//
Функция ВернутьМассивОрганизацийОсуществляющихКонтрольПериметра() Экспорт	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьМатеринскиеОрганизации(ЭтотОбъект);	
КонецФункции

Функция ВычислитьВыражение(Знач локВыражение = Неопределено, Знач локКодВидаОтчета = Неопределено, Знач Активность = Неопределено, Знач локСценарий = Неопределено, Знач локОрганизация = Неопределено, Знач локПериодОтчета = Неопределено, Знач локВалюта = Неопределено, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено, Знач локАналитика7 = Неопределено, Знач локАналитика8 = Неопределено, Знач локАналитика9 = Неопределено) Экспорт
	
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9);
	
	Если локСценарий = Неопределено Тогда
		локСценарий = Сценарий;
	Иначе
		локСценарий = Справочники.Сценарии.НайтиПоКоду(локСценарий);
		Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
			ТекстСообщения = НСтр("ru = 'Сценарий с кодом ""%Сценарий%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	ИначеЕсли ТипЗнч(ЛокПериодОтчета) = Тип("Число") Тогда
		локПериодОтчета = ОтносительныйПериод(ПериодОтчета, локПериодОтчета);
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЛокАналитики["локАналитика" + Инд] = Неопределено Тогда
			ЛокАналитики["локАналитика" + Инд] = ЭтотОбъект["Аналитика" + Инд];
		КонецЕсли;
	КонецЦикла;
	
	Если локВалюта = Неопределено Тогда
		локВалюта = ОсновнаяВалюта;
	КонецЕсли;
	
	Если ТипЗнч(локКодВидаОтчета) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
		локКодВидаОтчета = СокрЛП(локКодВидаОтчета.Код);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Сценарий,		Организация,	ПериодОтчета,		Валюта,		ВидОтчета",
	локСценарий,	 локОрганизация,	локПериодОтчета,	локВалюта,	локКодВидаОтчета);
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураОтбора.Вставить("Аналитика" + Инд, ЛокАналитики["локАналитика" + Инд]);
	КонецЦикла;
	
	Если Активность <> Неопределено Тогда
		СтруктураОтбора.Вставить("Активность", Активность);
	ИначеЕсли НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		СтруктураОтбора.Вставить("Активность", Истина);
	КонецЕсли;
	
	ВидОтчетаПараметр = Справочники.ВидыОтчетов.НайтиПоКоду(локКодВидаОтчета);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Код КАК Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчетаПараметр
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("ВидОтчетаПараметр", ВидОтчетаПараметр);
	СписокКодовПоказателей = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СписокКодовПоказателей.Колонки.Добавить("КодПоказателя");
	Для Каждого Стр Из СписокКодовПоказателей Цикл
		Стр.КодПоказателя = СокрЛП(Стр.Код);
	КонецЦикла;
	СписокКодовПоказателей.Колонки.Удалить("Код");
	
	СимволыОперацийИСкобки = Новый СписокЗначений;
	СимволыОперацийИСкобки.Добавить("+");
	СимволыОперацийИСкобки.Добавить("-");
	СимволыОперацийИСкобки.Добавить("*");
	СимволыОперацийИСкобки.Добавить("/");
	СимволыОперацийИСкобки.Добавить("(");
	СимволыОперацийИСкобки.Добавить(")");
	
	СтрокаВычисленияВыражения = "";
	
	ПоследовательностьОбработки = ПолучитьПоследовательностьОбработки(локВыражение, СимволыОперацийИСкобки);
	Для Каждого Лексема Из ПоследовательностьОбработки Цикл
		Если СимволыОперацийИСкобки.НайтиПоЗначению(Лексема) = Неопределено Тогда
			
			Если СписокКодовПоказателей.Найти(Лексема, "КодПоказателя") = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка в вычисляемом выражении: указан неверный код показателя (""%Лексема%"")!'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Лексема%", Строка(Лексема));
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
				Возврат 0;
			КонецЕсли;
			
			СтруктураОтбора.Вставить("Показатель", Лексема);
			ЗначениеПоказателя = ПолучитьСУчетомКеша(СтруктураОтбора);
			
			Если ЗначениеПоказателя = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru = 'Не удалось извлечь значение показателя с кодом ""%Лексема%"" со следующей аналитикой:
				|				Вид отчета: %КодВидаОтчета%,
				|				Сценарий: %Сценарий%,
				|				Организация: %Организация%,
				|				Период отчета: %ПериодОтчета%,
				|				Валюта: %Валюта%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Лексема%",		 Строка(Лексема));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодВидаОтчета%",	 Строка(?(ЗначениеЗаполнено(локКодВидаОтчета), локКодВидаОтчета, НСтр("ru = '<не задан>'"))));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%",		 Строка(локСценарий));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%",	 Строка(локОрганизация));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%",	 Строка(локПериодОтчета));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",		 Строка(локВалюта));
				Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					ТекстСообщения = ТекстСообщения + НСтр("ru = ',
					|	Аналитика '") + Инд + ": " + ЛокАналитики["локАналитика" + Инд];
				КонецЦикла;
				
				ТекстСообщения = ТекстСообщения + ".";
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
				СтрокаВычисленияВыражения = СтрокаВычисленияВыражения + "0";
				
			Иначе
				СтрокаВычисленияВыражения = СтрокаВычисленияВыражения + Формат(ЗначениеПоказателя, "ЧРД=.; ЧН=0; ЧГ=");
			КонецЕсли;
			
		Иначе
			СтрокаВычисленияВыражения = СтрокаВычисленияВыражения + Лексема;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Возврат Вычислить(СтрокаВычисленияВыражения);
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время вычисления выражения произошла следующая ошибка:
		|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецПопытки;
	
КонецФункции

Функция ДатаПринадлежитПериоду(Знач СтрокаДата, Период) Экспорт
	
	Если ТипЗнч(СтрокаДата) = Тип("Строка") Тогда
		СтрокаДата = СтрокаКДате(СтрокаДата);
	КонецЕсли;
	Возврат (Период.ДатаНачала <= СтрокаДата И Период.ДатаОкончания >= СтрокаДата);
	
КонецФункции

// Функция возвращает значение показателя НЕ ТЕКУЩЕГО отчета по заданным значениям измерений регистра ЗначенияПоказателейОтчетов.
// Сворачивание по значениям аналитик не происходит.
//
// Параметры:
//	локПоказатель		- код показателя;
//	локКодВидаОтчета	- код вида отчета, значение показателя которого требуется получить;
//	Активность			- признак актуальности значения показателя;
//	локСценарий			- код элемента справочника "Сценарии", для которого требуется получить значение показателя;
//	локОрганизация		- код элемента справочника "Организации", для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается организация текущего документа;
//	локПериодОтчета		- число - сдвиг периода отчета относительно текущего, для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается период текущего документа;
//	локАналитикаN		- значение аналитики N, для которого требуется получить значение показателя;
//	локВалюта			- СправочникСсылка.Валюты, для которого требуется получить значение показателя;
//							если не задана, то подразумевается основная валюта текущего отчета.
//
// Возвращаемое значение:
//	Значение показателя или 0, если не удалось получить значение.
//
Функция ЗначениеПоказателя(Знач локПоказатель = Неопределено, Знач локКодВидаОтчета = Неопределено, Знач Активность = Неопределено, Знач локСценарий = Неопределено, Знач локОрганизация = Неопределено, Знач локПериодОтчета = Неопределено, Знач локВалюта = Неопределено, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено, Знач локАналитика7 = Неопределено, Знач локАналитика8 = Неопределено, Знач локАналитика9 = Неопределено, Сальдовый = Неопределено,локПроект=Неопределено) Экспорт
	
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9);
	
	Если локСценарий = Неопределено Тогда
		локСценарий = Сценарий;
	Иначе
		локСценарий = Справочники.Сценарии.НайтиПоКоду(локСценарий);
		Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
			ТекстСообщения = НСтр("ru = 'Сценарий с кодом ""%Сценарий%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если локКодВидаОтчета = Неопределено Тогда
		локКодВидаОтчета = СокрЛП(ВидОтчета.Код);
	КонецЕсли;
	
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если локПроект = Неопределено Тогда
		локПроект = Проект;
	Иначе
		локПроект = Справочники.Проекты.НайтиПоНаименованию(локПроект);
		Если НЕ ЗначениеЗаполнено(локПроект) Тогда
			ТекстСообщения = НСтр("ru = 'Проект с наименованием ""%Проект%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", Строка(локПроект));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	ИначеЕсли ТипЗнч(ЛокПериодОтчета) = Тип("Число") Тогда
		локПериодОтчета = ОтносительныйПериод(ПериодОтчета, локПериодОтчета);
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЛокАналитики["локАналитика" + Инд] = Неопределено Тогда
			ЛокАналитики["локАналитика" + Инд] = ЭтотОбъект["Аналитика" + Инд];
		КонецЕсли;
	КонецЦикла;
	
	Если локВалюта = Неопределено Тогда
		локВалюта = ОсновнаяВалюта;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Сценарий,		Организация,	ПериодОтчета,		Валюта,		ВидОтчета,	Показатель, Проект",
	локСценарий,	 локОрганизация,	локПериодОтчета,	локВалюта,	локКодВидаОтчета,	локПоказатель, локПроект);
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураОтбора.Вставить("Аналитика" + Инд, ЛокАналитики["локАналитика" + Инд]);
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ДобавитьАктивностьВСтруктуру(СтруктураОтбора, ЭтотОбъект, Активность);
	
	ЗначениеПоказателя = ПолучитьСУчетомКеша(СтруктураОтбора);
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось извлечь значение показателя с кодом ""%Показатель%"" со следующей аналитикой:
		|		Вид отчета: %КодВидаОтчета%,
		|		Сценарий: %Сценарий%,
		|		Организация: %Организация%
		|		Период отчета: %ПериодОтчета%,
		|		Валюта: %Валюта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(локПоказатель));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодВидаОтчета%", Строка(локКодВидаОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(локПериодОтчета));
		ПредставлениеПроекта = "," + Символы.ПС + НСтр("ru = '		Проект: '") + Строка(локПроект) + ",";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация) + ?(ЗначениеЗаполнено(локПроект), ПредставлениеПроекта, ","));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Строка(локВалюта));
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстСообщения = ТекстСообщения + НСтр("ru = ',
			|	Аналитика '") + Инд + ": " + ЛокАналитики["локАналитика" + Инд];
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + ".";			
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат 0;
	Иначе
		Возврат ЗначениеПоказателя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает значение показателя НЕ ТЕКУЩЕГО отчета по заданным значениям измерений регистра ЗначенияПоказателейОтчетов.
// Сворачивание по значениям аналитик не происходит.
//
// Параметры:
//	локПоказатель		- код показателя;
//	локКодВидаОтчета	- код вида отчета, значение показателя которого требуется получить;
//	Активность			- признак актуальности значения показателя;
//	локСценарий			- код элемента справочника "Сценарии", для которого требуется получить значение показателя;
//	локОрганизация		- код элемента справочника "Организации", для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается организация текущего документа;
//	локПериодОтчета		- число - сдвиг периода отчета относительно текущего, для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается период текущего документа;
//	локАналитикаN		- значение аналитики N, для которого требуется получить значение показателя;
//	локВалюта			- СправочникСсылка.Валюты, для которого требуется получить значение показателя;
//							если не задана, то подразумевается основная валюта текущего отчета.
//
//  Сальдовый           - Булево, если значение не задано, то расчет ведется обычным образом. 
//						          Истина - показатель является сальдовым.
//								  Ложь   - показатель является оборотным.  
//  СчитатьПропорционально - Булево, указывает способ расчета значения показателя из отчетности на момент приобретения.
//								     Истина - показатель рассчитывается по пропорции ЗначениеНаКонецПериода * (ДатаОкончанияПериода - ДатаПриобретения) / (ДатаОкончанияПериода - ДатаНачалаПериода).
//									 Ложь - показатель принимается равным значению показателя на конец периода.
// Возвращаемое значение:
//	Значение показателя или 0, если не удалось получить значение.
//
Функция ЗначениеПоказателяСУчетомПриобретения(Знач локПоказатель = Неопределено, Знач ЛокВидОтчета = Неопределено, Знач Активность = Неопределено, Знач локОрганизация = Неопределено, Сальдовый = Неопределено, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено, Знач локАналитика7 = Неопределено, Знач локАналитика8 = Неопределено, Знач локАналитика9 = Неопределено) Экспорт
	
	Если Организация.ТипОрганизации = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
		
		ноСообщить(НСтр("ru = 'Вызов функции ""ЗначениеПоказателяСУчетомПриобретения"" возможно только для консолидирующих и элиминирующих организаций.'"));
		Возврат 0;
		
	КонецЕсли;
	
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9);
	
	ЛокСценарий 	  = Сценарий;
	ЛокПериодОтчета   = ПериодОтчета;
	ЛокВалюта         = ОсновнаяВалюта;
	
	Если ЛокВидОтчета = Неопределено Тогда
		ЛокВидОтчета = СокрЛП(ВидОтчета.Код);
	КонецЕсли;	
	
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		
		Если локОрганизация = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЛокАналитики["локАналитика" + Инд] = Неопределено Тогда
			ЛокАналитики["локАналитика" + Инд] = ЭтотОбъект["Аналитика" + Инд];
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Сценарий,		Организация,	ПериодОтчета,		Валюта,		ВидОтчета,			Показатель",
	локСценарий,	 локОрганизация,	локПериодОтчета,	локВалюта,	локВидОтчета,	локПоказатель);
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл								
		СтруктураОтбора.Вставить("Аналитика" + Инд, ЛокАналитики["локАналитика" + Инд]);
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ДобавитьАктивностьВСтруктуру(СтруктураОтбора, ЭтотОбъект, Активность);
	ЗначениеПоказателя = ПолучитьСУчетомКеша(СтруктураОтбора);
	
	Если Сальдовый <> Неопределено И ЗначениеПоказателя <> Неопределено Тогда
		
		Если ЛокОрганизация.ТипОрганизации = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
			СтруктураВхожденияВПериметр = ПолучитьСтруктуруВхожденияВПериметр(локОрганизация);
		КонецЕсли;
		
		Если СтруктураВхожденияВПериметр <> Неопределено Тогда
			ДатаНачала    = ?(ЗначениеЗаполнено(СтруктураВхожденияВПериметр.ДатаВхожденияВПериметр), СтруктураВхожденияВПериметр.ДатаВхожденияВПериметр, ЛокПериодОтчета.ДатаНачала);
			ДатаОкончания = ?(ЗначениеЗаполнено(СтруктураВхожденияВПериметр.ДатаПотериКонтроля), СтруктураВхожденияВПериметр.ДатаПотериКонтроля, ЛокПериодОтчета.ДатаОкончания);
			
			
			Если НЕ Сальдовый Тогда
				
				Если ДатаНачала > ЛокПериодОтчета.ДатаОкончания ИЛИ ДатаОкончания < ЛокПериодОтчета.ДатаНачала Тогда
					ЗначениеПоказателя = 0;
				Иначе
					
					СтруктураОтбора.Сценарий 	= СтруктураВхожденияВПериметр.Сценарий_НаМоментПриобретения;
					СтруктураОтбора.ПериодОтчета = СтруктураВхожденияВПериметр.Период_НаМоментПриобретения;
					
					ЗначениеПериодаВхождения = ПолучитьСУчетомКеша(СтруктураОтбора);
					
					Если ЗначениеПериодаВхождения <> Неопределено Тогда
						ЗначениеПериодаВхождения = ЗначениеПериодаВхождения * (ДатаНачала - СтруктураВхожденияВПериметр.Период_НаМоментПриобретения.ДатаНачала) 
						/ (СтруктураВхожденияВПериметр.Период_НаМоментПриобретения.ДатаОкончания - СтруктураВхожденияВПериметр.Период_НаМоментПриобретения.ДатаНачала);
						ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеПериодаВхождения;
					Иначе 
						ЗначениеПоказателя = ЗначениеПоказателя * СтруктураВхожденияВПериметр.ИндексКонтроляВПериоде;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ДатаНачала > ЛокПериодОтчета.ДатаОкончания ИЛИ ДатаОкончания < ЛокПериодОтчета.ДатаНачала Тогда
					ЗначениеПоказателя = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ноСообщить(НСтр("ru = 'Не удалось определить периметр для организации отчета'"));
			ЗначениеПоказателя = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось извлечь значение показателя с кодом ""%Показатель%"" со следующей аналитикой:
		|		Вид отчета: %ВидОтчета%,
		|		Сценарий: %Сценарий%,
		|		Организация: %Организация%,
		|		Период отчета: %ПериодОтчета%,
		|		Валюта: %Валюта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(локПоказатель));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(?(НЕ ЗначениеЗаполнено(локВидОтчета), НСтр("ru = '<не задан>'"), локВидОтчета)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(локПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Строка(локВалюта));
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстСообщения = ТекстСообщения + НСтр("ru = ',
			|	Аналитика '") + Инд + ": " + ЛокАналитики["локАналитика" + Инд];
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + ".";			
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат 0;
	Иначе
		Возврат ЗначениеПоказателя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает значение показателя НЕ ТЕКУЩЕГО отчета по заданным значениям измерений регистра ЗначенияПоказателейОтчетов.
// Для незаданных аналитик выполняется суммирование по всем непустым значениям.
//
// Параметры:
//	локПоказатель		- код показателя;
//	локКодВидаОтчета	- код вида отчета, значение показателя которого требуется получить;
//	Активность			- признак актуальности значения показателя;
//	локСценарий			- код элемента справочника "Сценарии", для которого требуется получить значение показателя;
//	локОрганизация		- код элемента справочника "Организации", для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается организация текущего документа;
//	локПериодОтчета		- число - сдвиг периода отчета относительно текущего, для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается период текущего документа;
//	локАналитикаN		- значение аналитики N, для которого требуется получить значение показателя;
//							если не задано, то выполняется суммирование по всем значениям с непустой аналитикой;
//	локВалюта			- СправочникСсылка.Валюты, для которого требуется получить значение показателя;
//							если не задана, то подразумевается основная валюта текущего отчета.
//
// Возвращаемое значение:
//	Значение показателя или 0, если не удалось получить значение.
//
Функция ЗначениеПоказателяСвернутоеПоАналитике(Знач локПоказатель = Неопределено, Знач локКодВидаОтчета = Неопределено, Знач Активность = Неопределено, Знач локСценарий = Неопределено, Знач локОрганизация = Неопределено, Знач локПериодОтчета = Неопределено, локВалюта = Неопределено, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено, Знач локАналитика7 = Неопределено, Знач локАналитика8 = Неопределено, Знач локАналитика9 = Неопределено, Знач локПроект = Неопределено) Экспорт
	
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, ЛокАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9);
	
	Если НЕ ЗначениеЗаполнено(локПоказатель) Тогда
		ноСообщить(НСтр("ru = 'Попытка получения свернутого по аналитикам значения показателя с незаданным кодом'"), СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецЕсли;
	
	АналитикиОтчетаСовпадают = Истина;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если НЕ ?(НЕ ЗначениеЗаполнено(ВидОтчета["ВидАналитики" + Инд]), Истина, ЛокАналитики["локАналитика" + Инд] = ЭтотОбъект["Аналитика" + Инд]) Тогда
			АналитикиОтчетаСовпадают = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если (локКодВидаОтчета = Неопределено	ИЛИ	(локКодВидаОтчета = СокрЛП(ВидОтчета.Код))
		И (локСценарий = Неопределено		ИЛИ	локСценарий = СокрЛП(Сценарий.Код))
		И (локОрганизация = Неопределено	ИЛИ	локОрганизация = СокрЛП(Организация.Код))
		И (локПроект = Неопределено			ИЛИ	локПроект = СокрЛП(Проект.Код))
		И (локПериодОтчета = Неопределено	ИЛИ	локПериодОтчета = 0)
		И (локВалюта = Неопределено			ИЛИ	локВалюта = СокрЛП(ОсновнаяВалюта.Код))
		И АналитикиОтчетаСовпадают)			Тогда
		
		
		Если ТипЗнч(локПоказатель) = Тип("Строка") Тогда
			РезультатПоиска=мСоответствиеДляПоискаПоКоду.Получить(локПоказатель);
		Иначе
			РезультатПоиска=мСоответствиеДляПоискаПоСсылке.Получить(локПоказатель);
		КонецЕсли;
		
		Если РезультатПоиска = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Попытка получения свернутого по аналитикам значения показателя с неверно заданным кодом ""%Показатель%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(локПоказатель));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
		
		АналитикиСтрок = Новый Массив;
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(РезультатПоиска["ВидАналитики" + Инд]) И локАналитики["локАналитика" + (Инд)] = Неопределено Тогда
				АналитикиСтрок.Добавить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если АналитикиСтрок.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Попытка получения свернутого по аналитикам значения показателя с кодом ""%Показатель%"", при том, что все аналитики зафиксированы.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(локПоказатель));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
		
		СуммаПоАналитикам = 0;
		СтрокиПоказателя = мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель", РезультатПоиска.Ссылка));
		Для Каждого Стр Из СтрокиПоказателя Цикл
			
			ВсеАналитикиСтрокЗаполнены = Истина;
			Для Каждого НомерАналитики Из АналитикиСтрок Цикл
				ЗначениеАналитики = Стр["Аналитика" + НомерАналитики];
				Если ЗначениеАналитики = Неопределено Тогда
					ВсеАналитикиСтрокЗаполнены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			АналитикиРавны = Истина;
			Для Инд = МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				ЗначениеОтбора = локАналитики["локАналитика" + Инд];
				Если ЗначениеОтбора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеАналитики = Стр["Аналитика" + Инд];
				Если ЗначениеАналитики <> ЗначениеОтбора Тогда
					АналитикиРавны = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеАналитикиСтрокЗаполнены И АналитикиРавны Тогда
				СуммаПоАналитикам = СуммаПоАналитикам + Стр.Значение;
			КонецЕсли;
			
		КонецЦикла;
		Возврат СуммаПоАналитикам;
		
	Иначе
		
		Если локСценарий = Неопределено Тогда
			локСценарий = Сценарий;
		Иначе
			локСценарий = Справочники.Сценарии.НайтиПоКоду(локСценарий);
			Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
				ТекстСообщения = НСтр("ru = 'Сценарий с кодом ""%Сценарий%"" не найден.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		Если локОрганизация = Неопределено Тогда
			локОрганизация = Организация;
		Иначе
			локОрганизация = Справочники.Организации.НайтиПоКоду(локОрганизация);
			Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
				ТекстСообщения = НСтр("ru = 'Организационная единица с кодом ""%Организация%"" не найдена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		Если локПроект = Неопределено Тогда
			локПроект = Проект;
		Иначе
			локПроект = Справочники.Проекты.НайтиПоКоду(локПроект);
			Если НЕ ЗначениеЗаполнено(локПроект) Тогда
				ТекстСообщения = НСтр("ru = 'Проект с наименованием ""%Проект%"" не найден.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", Строка(локПроект));
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;

		
		Если локПериодОтчета = Неопределено Тогда
			локПериодОтчета = ПериодОтчета;
		ИначеЕсли ТипЗнч(ЛокПериодОтчета) = Тип("Число") Тогда
			// вызов процедуры получения периода по сдвигу
			локПериодОтчета = ОтносительныйПериод(ПериодОтчета, локПериодОтчета);
		КонецЕсли;
		
		Для Инд = 1 По МаксАналитикОтчета Цикл
			Если ЛокАналитики["локАналитика" + Инд] = Неопределено Тогда
				ЛокАналитики["локАналитика" + Инд] = ?(НЕ ЗначениеЗаполнено(ЭтотОбъект["Аналитика" + Инд]), Неопределено, ЭтотОбъект["Аналитика" + Инд]);
			КонецЕсли;
		КонецЦикла;
		
		Если локВалюта = Неопределено Тогда
			локВалюта = ОсновнаяВалюта;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Сценарий,		Организация,	ПериодОтчета,		Валюта,		ВидОтчета,			Показатель,Проект",
		локСценарий,	 локОрганизация,	локПериодОтчета,	локВалюта,	локКодВидаОтчета,	локПоказатель,ЛокПроект);
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураОтбора.Вставить("Аналитика" + Инд, локАналитики["локАналитика" + Инд]);
		КонецЦикла;
		
		УправлениеОтчетамиУХ.ДобавитьАктивностьВСтруктуру(СтруктураОтбора, ЭтотОбъект, Активность);
		ЗначениеПоказателя = ПолучитьСвернутоеЗначениеСУчетомКеша(СтруктураОтбора);
		Если ЗначениеПоказателя <> Неопределено Тогда
			Возврат ЗначениеПоказателя;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось извлечь свернутое по аналитикам значение показателя с кодом ""%Показатель%"" со следующими измерениями:
			|			Вид отчета: %КодВидаОтчета%,
			|			Сценарий: %Сценарий%,
			|			Организация: %Организация%,
			|			Проект: %Проект%,
			|			Период отчета: %ПериодОтчета%,
			|			Валюта: %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(локПоказатель));
			ПредставлениеВидОтчета = ?(ЗначениеЗаполнено(локКодВидаОтчета), локКодВидаОтчета, НСтр("ru = '<не задан>'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодВидаОтчета%", Строка(ПредставлениеВидОтчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", Строка(локПроект));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(локПериодОтчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Строка(локВалюта));
			
			Для Инд = 1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				ТекстСообщения = ТекстСообщения + НСтр("ru = ',
				|	Аналитика '") + Инд + ": " + ?(ЛокАналитики["локАналитика" + Инд] = Неопределено, НСтр("ru = 'свернуть'"), ЛокАналитики["локАналитика" + Инд]);
			КонецЦикла;
			ТекстСообщения = ТекстСообщения + ".";			
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает значение показателя НЕ ТЕКУЩЕГО отчета по заданным значениям измерений регистра ЗначенияПоказателейОтчетов,
// кроме Организации - по этому измерению происходит сворачивание по периметру, соответствующему текущим Сценарию, Периоду, Организации.
//
// Параметры:
//	локПоказатель		- код показателя;
//	локКодВидаОтчета	- код вида отчета, значение показателя которого требуется получить;
//	Активность			- признак актуальности значения показателя;
//	локСценарий			- код элемента справочника "Сценарии", для которого требуется получить значение показателя;
//	локОрганизация		- код элемента справочника "Организации", для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается организация текущего документа;
//	локПериодОтчета		- число - сдвиг периода отчета относительно текущего, для которого требуется получить значение показателя;
//							если не заполнено, то подразумевается период текущего документа;
//	локАналитикаN		- значение аналитики N, для которого требуется получить значение показателя;
//							если не задано, то выполняется суммирование по всем значениям с непустой аналитикой;
//	локВалюта			- СправочникСсылка.Валюты, для которого требуется получить значение показателя;
//							если не задана, то подразумевается основная валюта текущего отчета.
//
// Возвращаемое значение:
//	Значение показателя или 0, если не удалось получить значение.
//
Функция ЗначениеПоказателяСвернутоеПоПериметру(локПоказатель, Знач локКодВидаОтчета = Неопределено, Знач Активность = Неопределено, Знач локСценарий = Неопределено, Знач локОрганизация = Неопределено, Знач локПериодОтчета = Неопределено, Знач локВалюта = Неопределено, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено, Знач локАналитика7 = Неопределено, Знач локАналитика8 = Неопределено, Знач локАналитика9 = Неопределено, Знач локПроект = Неопределено) Экспорт
	
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9);
	
	Если НЕ ЗначениеЗаполнено(локПоказатель) Тогда
		ноСообщить(НСтр("ru = 'Параметр ЛокПоказатель не задан. Получение значения показателя, свернутого по периметру, невозможно'"), СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецЕсли;
	
	// инициализируем сценарий, если он не задан
	Если локСценарий = Неопределено Тогда
		локСценарий = Сценарий;
	Иначе
		локСценарий = Справочники.Сценарии.НайтиПоКоду(локСценарий);
		Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
			ТекстСообщения = НСтр("ru = 'Сценарий с кодом ""%Сценарий%"" не найден. Получение значения показателя, свернутого по периметру, невозможно.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем организацию, если она не задана
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена. Получение значения показателя, свернутого по периметру, невозможно.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем период отчета
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	ИначеЕсли ТипЗнч(ЛокПериодОтчета) = Тип("Число") Тогда
		// вызов процедуры получения периода по сдвигу
		локПериодОтчета = ОтносительныйПериод(ПериодОтчета, локПериодОтчета);
	КонецЕсли;
	
	// инициализируем код вида отчета
	Если локКодВидаОтчета = Неопределено Тогда
		локКодВидаОтчета = СокрЛП(ВидОтчета.Код);
	КонецЕсли;
	
	// инициализируем валюту показателя
	Если локВалюта = Неопределено Тогда
		локВалюта = ОсновнаяВалюта;
	КонецЕсли;
	
	// проверки на неполные входные параметры
	Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
		ноСообщить(НСтр("ru = 'Не указана организационная единица. Получение значения показателя, свернутого по периметру, невозможно.'"), СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(локПериодОтчета) 
		ИЛИ НЕ ЗначениеЗаполнено(локПериодОтчета.ДатаНачала) 
		ИЛИ НЕ ЗначениеЗаполнено(локПериодОтчета.ДатаОкончания) Тогда
		
		ноСообщить(НСтр("ru = 'Неверно задан период. Получение значения показателя, свернутого по периметру, невозможно.'"), СтатусСообщения.Важное, Истина);
		Возврат 0;
		
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
		ноСообщить(НСтр("ru = 'Не задан сценарий. Получение значения показателя, свернутого по периметру, невозможно.'"), СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецЕсли;
	
	ПериметрОрганизаций = ПолучитьПериметрОрганизаций(локСценарий, локПериодОтчета, локОрганизация);
	
	Если ПериметрОрганизаций.Количество() = 0 Тогда
		ноСообщить(НСтр("ru = 'Не удалось определить периметр для вычисления значения показателя, свернутого по периметру!'"), СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	КонструкцияДоли = "";
	
	Для Каждого ОписаниеОрг Из ПериметрОрганизаций Цикл
		ИндОрг = ПериметрОрганизаций.Индекс(ОписаниеОрг);
		КонструкцияДоли = "ВЫБОР КОГДА ЗначенияПоказателейОтчетов.Организация = &Организация" + Формат(ИндОрг, "ЧГ=") + " ТОГДА " + Формат(ОписаниеОрг.ПолнаяДоляГруппы / 100.0000, "ЧРД=.; ЧГ=") + " ИНАЧЕ " + ?(ИндОрг = 0, "0", "") + Символы.ПС + КонструкцияДоли + " КОНЕЦ";
		Запрос.УстановитьПараметр("Организация" + Формат(ИндОрг, "ЧГ="), ОписаниеОрг.ИндивидуальнаяОрганизация);
	КонецЦикла;
	
	ВидОтчетаПараметр=Справочники.ВидыОтчетов.НайтиПоКоду(локКодВидаОтчета);
	
	ЗапросВерсии=Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация В(&парамПериметрОрганизаций)
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Проект = &парамПроект
	|	И ВерсииЗначенийПоказателей.Сценарий = &парамСценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &парамПериодОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &парамВалюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчетаПараметр";
	
	Если Активность <> Неопределено ИЛИ НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = &Активность";
		ЗапросВерсии.УстановитьПараметр("Активность", ?(Активность = Неопределено, Истина, Активность));
	КонецЕсли;
	
	ЗапросВерсии.УстановитьПараметр("парамПериметрОрганизаций", ПериметрОрганизаций.ВыгрузитьКолонку("ИндивидуальнаяОрганизация"));
	ЗапросВерсии.УстановитьПараметр("парамСценарий", локСценарий);
	ЗапросВерсии.УстановитьПараметр("парамПроект", локПроект);
	ЗапросВерсии.УстановитьПараметр("парамПериодОтчета", локПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("парамВалюта", локВалюта);
	ЗапросВерсии.УстановитьПараметр("ВидОтчетаПараметр", ВидОтчетаПараметр);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипыЗначенийПоказателей = Новый Массив;
	ТипыЗначенийПоказателей.Добавить(ТипЗначенияЧисло);
	ТипыЗначенийПоказателей.Добавить(Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка());
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.ТипЗначения В (&ТипыЗначенийПоказателей)",Новый Структура("ТипыЗначенийПоказателей",ТипыЗначенийПоказателей));
	ОтборПоказателей.Вставить("####.НеСуммируется = &ПризнакНеСуммируется",Новый Структура("ПризнакНеСуммируется",Ложь));
	ОтборПоказателей.Вставить("####.Код = &КодПоказателя",Новый Структура("КодПоказателя",локПоказатель));
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Организация","Организация");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Проект","Проект");
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчетаПараметр);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат 0
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	// получение сумм значений показателей по периметру консолидации
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	СУММА(ЗначенияПоказателейОтчетов.Значение * (" + КонструкцияДоли + ")) КАК Значение
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|	(НЕ ЗначенияПоказателейОтчетов.Значение=0)";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
		Запрос.УстановитьПараметр("Аналитика" + Инд, ЛокАналитики["локАналитика" + Инд]);
	КонецЦикла;
	
	Для Каждого ОписаниеОрг Из ПериметрОрганизаций Цикл
		ИндОрг = ПериметрОрганизаций.Индекс(ОписаниеОрг);		
		Запрос.УстановитьПараметр("Организация" + Формат(ИндОрг, "ЧГ="), ОписаниеОрг.ИндивидуальнаяОрганизация);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Возврат ?(Выборка.Следующий(), Выборка.Значение, 0);
	
КонецФункции

Функция ЗначениеПоказателяСвернутоеПоПериоду(локПоказатель, локВидОтчета = Неопределено, Знач ДатаНач = '00010101000000', Знач ДатаКон = '33391231235959', локПериодичность = Неопределено, локСценарий = Неопределено, локАналитика1 = Неопределено, локАналитика2 = Неопределено, локАналитика3 = Неопределено, локАналитика4 = Неопределено, локАналитика5 = Неопределено, локАналитика6 = Неопределено) Экспорт
		
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6);
	
	ВидОтчетаПараметр = ?(локВидОтчета = Неопределено, ВидОтчета, Справочники.ВидыОтчетов.НайтиПоКоду(локВидОтчета));
	
	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация = &Организация
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ДатаНачала
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ДатаОкончания
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &Периодичность
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ЭкземплярОтчета <> &Регистратор
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = &Активность";
		ЗапросВерсии.УстановитьПараметр("Активность", Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДатаНач) = Тип("Строка") Тогда
		ЭлПериода = Справочники.Периоды.НайтиПоКоду(ДатаНач);
		Если НЕ ЗначениеЗаполнено(ЭлПериода) Тогда
			ДатаНач = '00010101000000';
		Иначе
			ДатаНач = ЭлПериода.ДатаНачала;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДатаКон) = Тип("Строка") Тогда
		ЭлПериода = Справочники.Периоды.НайтиПоКоду(ДатаКон);
		Если НЕ ЗначениеЗаполнено(ЭлПериода) Тогда
			ДатаКон = '33391231235959';
		Иначе
			ДатаКон = ЭлПериода.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	ЗапросВерсии.УстановитьПараметр("Организация",		Организация);
	ЗапросВерсии.УстановитьПараметр("Проект",			Проект);
	ЗапросВерсии.УстановитьПараметр("ДатаНачала",		ДатаНач);
	ЗапросВерсии.УстановитьПараметр("ДатаОкончания",	ДатаКон);
	ЗапросВерсии.УстановитьПараметр("Периодичность",	?(локПериодичность = Неопределено, ПериодОтчета.Периодичность, локПериодичность));
	ЗапросВерсии.УстановитьПараметр("Сценарий",		?(локСценарий = Неопределено, Сценарий, локСценарий));	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета",	ВидОтчетаПараметр);
	ЗапросВерсии.УстановитьПараметр("Валюта",			ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("Регистратор",	Ссылка);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.Код = &КодПоказателя",Новый Структура("КодПоказателя",локПоказатель));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчетаПараметр);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат 0
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ
	|СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение
	|ИЗ ("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|НЕ (ЗначенияПоказателейОтчетов.Значение=0)";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл					  
		Запрос.Текст = Запрос.Текст + "
		|	И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
		Запрос.УстановитьПараметр("Аналитика" + Инд, ?(ЛокАналитики["локАналитика" + Инд] = Неопределено, ЭтотОбъект["Аналитика" + Инд], ЛокАналитики["локАналитика" + Инд]));
	КонецЦикла;	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Возврат ?(Выборка.Следующий(), ?(Выборка.Получить(0) = Null, 0, Выборка.Получить(0)), 0);
	КонецЕсли;
	
КонецФункции

// Возвращает массив или таблицу значений дополнительной аналитики по заданным значениям измерений и оставшихся дополнительных аналитик.
//
Функция ЗначенияАналитики(КодПоказателя, Знач локВидОтчета = Неопределено, Знач локПризнакАктивности = Неопределено, Знач локСценарий = Неопределено, Знач локОрганизация = Неопределено, Знач локПериодОтчета = Неопределено, ЛокАналитика1 = Неопределено, ЛокАналитика2 = Неопределено, ЛокАналитика3 = Неопределено, ЛокАналитика4 = Неопределено, ЛокАналитика5 = Неопределено,ЛокПроект=Неопределено, ЛокАналитика6=Неопределено) Экспорт
		
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6);									
	
	НомераИскомыхАналитик = Новый СписокЗначений;								
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если локАналитики["локАналитика" + Инд] = ИскомаяАналитика Тогда
			НомераИскомыхАналитик.Добавить(Инд);
		КонецЕсли;
	КонецЦикла;
	Если НомераИскомыхАналитик.Количество() = 0 Тогда
		ноСообщить(НСтр("ru = 'Не обозначены аналитики, значения которой требуется получить.'"), СтатусСообщения.Важное, Истина);
		Возврат (Новый Массив);
	Конецесли;
	
	Если локСценарий = Неопределено Тогда
		локСценарий = Сценарий;
	Иначе
		локСценарий = Справочники.Сценарии.НайтиПоКоду(локСценарий);
		Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
			ТекстСообщения = НСтр("ru = 'Сценарий с кодом ""%Сценарий%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат (Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат (Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	ИначеЕсли ТипЗнч(ЛокПериодОтчета) = Тип("Число") Тогда
		локПериодОтчета = ОтносительныйПериод(ПериодОтчета, локПериодОтчета);
	КонецЕсли;
	
	Если локВидОтчета = Неопределено Тогда
		локВидОтчета = ВидОтчета;
	Иначе
		локВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду(локВидОтчета);
		Если НЕ ЗначениеЗаполнено(локВидОтчета) Тогда
			ТекстСообщения = НСтр("ru = 'Вид отчета с кодом ""%ВидОтчета%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат (Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	ПризнакиАктивности = Новый СписокЗначений;
	Если локПризнакАктивности = Неопределено Тогда
		ПризнакиАктивности.Добавить(Истина);
		Если ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
			ПризнакиАктивности.Добавить(Ложь);
		КонецЕсли;
	Иначе
		ПризнакиАктивности.Добавить(локПризнакАктивности);
	КонецЕсли;
	
	ЗапросВерсии=Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Активность В(&Активность)
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Организация = &Организация
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий	
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	
	ЗапросВерсии.УстановитьПараметр("Активность", ПризнакиАктивности);
	ЗапросВерсии.УстановитьПараметр("Организация", локОрганизация);
	ЗапросВерсии.УстановитьПараметр("Проект", локПроект);
	ЗапросВерсии.УстановитьПараметр("ПериодОтчета", локПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("Сценарий", локСценарий);
	ЗапросВерсии.УстановитьПараметр("Валюта",	ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", ЛокВидОтчета);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.Код = &КодПоказателя",Новый Структура("КодПоказателя",КодПоказателя));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат 0
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;						
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗЛИЧНЫЕ";
	
	Для Каждого НомерИскомойАналитики Из НомераИскомыхАналитик Цикл
		Запрос.Текст = Запрос.Текст + ?(НомераИскомыхАналитик.Индекс(НомерИскомойАналитики) = 0, "", ",") + "
		|	ЗначенияПоказателейОтчетов.Аналитика" + НомерИскомойАналитики.Значение + " КАК Аналитика" + НомерИскомойАналитики.Значение;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "				  
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	ТекстОтбор="";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если НомераИскомыхАналитик.НайтиПоЗначению(Инд) <> Неопределено
			ИЛИ (НЕ ЗначениеЗаполнено(локВидОтчета["ВидАналитики" + Инд]) И ЛокАналитики["локАналитика" + Инд] = Неопределено) Тогда
			Продолжить;
		Иначе
			ТекстОтбор=ТекстОтбор+" И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
			Запрос.УстановитьПараметр("Аналитика" + Инд, ЛокАналитики["локАналитика" + Инд]);
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ТекстОтбор="" Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ
		|"+Сред(ТекстОтбор,2);
		
	КонецЕсли;
	
	Если НомераИскомыхАналитик.Количество() > 1 Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Аналитика" + НомераИскомыхАналитик.Получить(0).Значение);
	КонецЕсли;
	
КонецФункции

// Функция возвращает период, смещенный относительно заданного на Смещение.
//
// Параметры:
//	локПериодОтчета - исходный период;
//	Смещение - число, смещение относительно исходного периода. Знак определяет направление смещения.
//
// Результат:
//	СправочникСсылка.Периоды - период, смещенный от исходного на Смещение.
//
Функция ОтносительныйПериод(Знач локПериодОтчета = Неопределено, Смещение = 0) Экспорт
	
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(локПериодОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно определить относительный период (смещение = %Смещение%): исходный период не задан.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Смещение%", Строка(Смещение));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
	Если локПериодОтчета.Периодичность		= Перечисления.Периодичность.Год 
		ИЛИ локПериодОтчета.Периодичность      = Перечисления.Периодичность.ДевятьМесяцев Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 12 * Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 6 * Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 3 * Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Декада Тогда
		
		// анализируем
		ГодДатыНачала						= Год(локПериодОтчета.ДатаНачала);
		МесяцДатыНачала						= Месяц(локПериодОтчета.ДатаНачала);
		ДеньДатыНачала						= День(локПериодОтчета.ДатаНачала);
		ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
		ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
		НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
		
		// изменяем
		НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
		
		// синтезируем
		ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
		ДекадаВГоду							= НомерДекадыНЭ % 36;
		МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
		ДекадаВМесяце						= ДекадаВГоду % 3;
		ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
		
		ДатаНачалаОтносительногоПериода		= Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
		
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.День Тогда
		ОдинДень							= НачалоДня(Дата(2000, 1, 2)) - НачалоДня(Дата(2000, 1, 1));
		ДатаНачалаОтносительногоПериода		= локПериодОтчета.ДатаНачала + ОдинДень * Смещение;
	Иначе
		ТекстСообщения = НСтр("ru = 'Невозможно определить относительный период (смещение = %Смещение%): исходный период не задан.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Смещение%", Строка(Смещение));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	ДатаНачалаОтносительногоПериода = НачалоДня(ДатаНачалаОтносительногоПериода);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтносительногоПериода);
	Запрос.УстановитьПараметр("Периодичность", локПериодОтчета.Периодичность);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно определить относительный период (смещение = %Смещение%): не существует искомый период в справочнике ""Периоды"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Смещение%", Строка(Смещение));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат Справочники.Периоды.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Получить(0);
	КонецЕсли;
	
КонецФункции

// Очищает значения показателей и примечания к ним, раскрытия, а также реквизиты объекта, хранящие
// значения ссылки на импортируемый файл и его версию.
//
Процедура ОчиститьВсе() Экспорт
	
	НачатьНовуюОперацию();
	
	ПоказателиЭтоСтруктура = (ТипЗнч(Показатели) = Тип("Структура"));
	
	Для Каждого Стр Из мПоказатели Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ЭтотОбъект,Стр, ПустоеЗначениеПоТипу[Стр.ТипЗначения]);
		Если ПоказателиЭтоСтруктура Тогда
			Показатели.Вставить(Стр.Код, Стр.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ОчиститьмПоказателиРаскрытия();
	
КонецПроцедуры 

// Пересчитывает значение указанного показателя в заданную валюту.
//
// Параметры:
//	Показатель		- код показателя или СправочникСсылка.Показатели;
//	ВалютаПересчета	- валюта в которую следует пересчитать значение показателя.
//
// Возвращаемое значение:
//	Значение показателя или 0, если не удалось получить значение.
//
Функция ПересчитатьЗначениеПоКурсу(Показатель, Знач ВалютаПересчета = Неопределено) Экспорт
	
	Если ТипЗнч(Показатель) = Тип("Строка") Тогда
		РезультатПоискаПоказателя = мСоответствиеДляПоискаПоКоду[Показатель];
		Если РезультатПоискаПоказателя = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Попытка получить значение показателя с кодом ""%Показатель%"". Показатель не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
		Пок = РезультатПоискаПоказателя;
	Иначе
		РезультатПоискаПоказателя = мСоответствиеДляПоискаПоСсылке[Пок];
		Если РезультатПоискаПоказателя = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Попытка получить значение показателя ""%Показатель%"". Показатель не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат 0;
		КонецЕсли;
		Пок = РезультатПоискаПоказателя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаПересчета) Тогда
		ВалютаПересчета = мТекущаяВалюта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаПересчета) Тогда
		ТекстСообщения = НСтр("ru = 'Попытка получить значение показателя ""%Показатель%"". Валюта не определена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат 0;
	КонецЕсли;
	
	Возврат ПересчитатьЗначениеПоказателяПоКурсу(Пок.Значение, Пок, ОсновнаяВалюта, ВалютаПересчета);
	
КонецФункции

Функция ПолучитьДанныеОПриобретении(Знач локОрганизация = Неопределено) Экспорт
	
	// инициализируем организацию, если она не задана
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена. Получение значения показателя с учетом приобретения невозможно.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруВхожденияВПериметр(локОрганизация);
	
КонецФункции

// Возвращает состав периметра организаций по заданным периоду, сценарию с учетом дополнительных отборов.
//
// Параметры:
//	локСценарий - сценарий, для котороого требуется получить периметр, СправочникСсылка.Сценарии;
//	локПериодОтчета - для котороого требуется получить периметр, СправочникСсылка.Периоды;
//	локОрганизация - организация консолидирующая организация, СправочникСсылка.Организации;
//	локМетодКонсолидации - метод консолидации, ПеречислениеСсылка.МетодыКонсолидации;
//	локМинПолнаяДоляВладения - максимальная полная доля владения, число;
//	локМаксПолнаяДоляВладения - минимальная полная доля владения, число;
//	локТипыОрганизаций - типы организаций, для которых требуется получить периметр.
//
// Возвращаемое значение:
//	Массив элементов типа СпарвочникСсылка.Организация.
//
Функция СоставПериметра(
			локСценарий = Неопределено, 
			локПериодОтчета = Неопределено, 
			локОрганизация = Неопределено, 
			локМетодКонсолидации = Неопределено, 
			локМинПолнаяДоляВладения = 0, 
			локМаксПолнаяДоляВладения = 100, 
			локТипыОрганизаций = Неопределено, 
			ВладелецПериметра = Неопределено) Экспорт
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
													?(локСценарий		= Неопределено, Сценарий,		локСценарий		),
													?(локПериодОтчета	= Неопределено, ПериодОтчета,	локПериодОтчета	),
													?(локОрганизация	= Неопределено, Организация,	локОрганизация	),
													локМетодКонсолидации,
													локМинПолнаяДоляВладения,
													локМаксПолнаяДоляВладения,
													локТипыОрганизаций,
													ВладелецПериметра
												).ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	
КонецФункции
											
// Возвращает состав периметра организаций для элиминации.
//
// Возвращаемое значение:
//	Массив элементов типа СпарвочникСсылка.Организация.
//
Функция СоставПериметраДляЭлиминации() Экспорт
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
													Сценарий, 
													ПериодОтчета, 
													Организация, 
													Перечисления.МетодыКонсолидации.Полная, 
													, 
													, 
													Перечисления.ТипыОрганизационныхЕдиниц.Обычная
												).ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	
КонецФункции

// Возвращает состав периметра организаций по заданным периоду, сценарию с учетом дополнительных отборов.
//
// Параметры:
//	МетодКонсолидации - ПеречислениеСсылка.МетодыКонсолидации.
//
// Возвращаемое значение:
//	Массив элементов типа СпарвочникСсылка.Организация.
//
Функция СоставПериметраПоМетодуКонсолидации(МетодКонсолидации = Неопределено) Экспорт
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(Сценарий, ПериодОтчета, Организация, МетодКонсолидации, , , Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
	
КонецФункции

Функция СтрокаКДате(ПредставлениеДаты) Экспорт
	
	Возврат ПривестиКДате(ПредставлениеДаты, Новый ОписаниеТипов("Дата"));
	
КонецФункции

// Суммирует значения показателя с кодом локПоказатель за указанный интервал, обозначенный ДатаНач и ДатаКон,
// по периодам с периодичностью локПериодичность, по сценарию локСценарий и заданными значениями аналитик 
// локАналитикаN.
//
// Параметры:
//	локПоказатель		- код показателя, Строка;
//	ДатаНач				- дата начала интервала, Дата;
//	ДатаКон				- дата окончания интервала, Дата;
//	локПериодичность	- периодичность периодов по которым происходит суммирование, ПеречислениеСсылка.Периодичность;
//	локСценарий			- сценарий, СпарвочникСсылка.Сценарии;
//	локАналитикаN		- значение аналитики N.
//
// Возвращаемое значение:
//	Сумма - число.
//
Функция СуммаЗаИнтервал(локПоказатель, ДатаНач = '00010101000000', ДатаКон = '33391231235959', локПериодичность = Неопределено, локСценарий = Неопределено, локАналитика1 = Неопределено, локАналитика2 = Неопределено, локАналитика3 = Неопределено, локАналитика4 = Неопределено, локАналитика5 = Неопределено, локАналитика6 = Неопределено) Экспорт
		
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6);
	
	ЗапросВерсии=Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация = &Организация
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ДатаНачала
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ДатаОкончания
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &Периодичность
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ЭкземплярОтчета <> &Регистратор
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = &Активность";
		ЗапросВерсии.УстановитьПараметр("Активность", Истина);
	КонецЕсли;
	
	ЗапросВерсии.УстановитьПараметр("Организация", Организация);
	ЗапросВерсии.УстановитьПараметр("Проект", Проект);
	ЗапросВерсии.УстановитьПараметр("ДатаНачала",	ДатаНач);
	ЗапросВерсии.УстановитьПараметр("ДатаОкончания", ДатаКон);
	ЗапросВерсии.УстановитьПараметр("Периодичность", ?(локПериодичность = Неопределено, ПериодОтчета.Периодичность, локПериодичность));
	ЗапросВерсии.УстановитьПараметр("Сценарий", ?(локСценарий = Неопределено, Сценарий, локСценарий));
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Валюта",	ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("####.Код = &КодПоказателя",Новый Структура("КодПоказателя",локПоказатель));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат 0
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;						
	
	Запрос.Текст="ВЫБРАТЬ
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение
	|ИЗ
	|("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|	(НЕ ЗначенияПоказателейОтчетов.Значение=0)";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл					  
		Запрос.Текст = Запрос.Текст + "
		|	И ЗначенияПоказателейОтчетов.Аналитика" + Инд + " = &Аналитика" + Инд;
		Запрос.УстановитьПараметр("Аналитика" + Инд, ?(ЛокАналитики["локАналитика" + Инд] = Неопределено, ЭтотОбъект["Аналитика" + Инд], ЛокАналитики["локАналитика" + Инд]));
	КонецЦикла;						  
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Возврат ?(Выборка.Следующий(), ?(Выборка.Получить(0) = Null, 0, Выборка.Получить(0)), 0);
	КонецЕсли;
	
КонецФункции

Функция ТаблицаЗначенийПоказателей(Знач локПоказатель = Неопределено, Знач локВидОтчета = Неопределено, Знач Активность = Неопределено, Знач локСценарий = Неопределено, Знач локОрганизация = Неопределено, Знач локПериодОтчета = Неопределено, Знач локВалюта = NULL, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено) Экспорт
		
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6);
	
	ИзмеренияРаскрытия = Новый СписокЗначений;
	
	ЗаданаГруппаРаскрытия = Ложь;
	
	Если ТипЗнч(локПоказатель) = Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		локПоказатель = СоставГруппыРаскрытия(локПоказатель);
		ЗаданаГруппаРаскрытия = Истина;
		
	ИначеЕсли ТипЗнч(локПоказатель) = Тип("Массив") Тогда
		// определяем вид отчета
		Если локВидОтчета = Неопределено Тогда
			локВидОтчета = ВидОтчета;
		ИначеЕсли ТипЗнч(локВидОтчета) = Тип("Строка") Тогда
			локВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду(локВидОтчета);
			Если НЕ ЗначениеЗаполнено(локВидОтчета) Тогда
				ноСообщить(НСтр("ru = 'Не определен вид отчета.'"), СтатусСообщения.Важное, Истина);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Попытка     //вдруг массив пустой
			
			ВременныйМассив= новый Массив;
			Для Каждого  КодПоказателя из  локПоказатель Цикл
				локПоказательСсылка=Справочники.ПоказателиОтчетов.НайтиПоКоду(КодПоказателя, , , локВидОтчета);
				Если ЗначениеЗаполнено(локПоказательСсылка) Тогда
					ВременныйМассив.Добавить(локПоказательСсылка);
				КонецЕсли;		 
			КонецЦикла;	
			локПоказатель=ВременныйМассив;
			
		Исключение
			
		КонецПопытки;
		
		
	ИначеЕсли ТипЗнч(локПоказатель) <> Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
		
		// определяем вид отчета
		Если локВидОтчета = Неопределено Тогда
			локВидОтчета = ВидОтчета;
		ИначеЕсли ТипЗнч(локВидОтчета) = Тип("Строка") Тогда
			локВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду(локВидОтчета);
			Если НЕ ЗначениеЗаполнено(локВидОтчета) Тогда
				ноСообщить(НСтр("ru = 'Не определен вид отчета.'"), СтатусСообщения.Важное, Истина);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// определяем показатель
		Если локПоказатель = Неопределено Тогда
			ИзмеренияРаскрытия.Добавить("Показатель");
		ИначеЕсли ТипЗнч(локПоказатель) = Тип("Строка") Тогда
			КодПоказателя = локПоказатель;
			локПоказатель = Справочники.ПоказателиОтчетов.НайтиПоКоду(КодПоказателя, , , локВидОтчета);
			Если НЕ ЗначениеЗаполнено(локПоказатель) Тогда
				локПоказатель = Справочники.ГруппыРаскрытия.НайтиПоКоду(КодПоказателя, , , локВидОтчета);
				Если НЕ ЗначениеЗаполнено(локПоказатель) Тогда
					ТекстСообщения = НСтр("ru = 'Показатель или группа раскрытия с кодом ""%КодПоказателя%"" не найден.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(КодПоказателя));
					ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
					Возврат Неопределено;
				Иначе
					локПоказатель = СоставГруппыРаскрытия(локПоказатель);
					ЗаданаГруппаРаскрытия = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// определяем сценарий
	Если локСценарий = Неопределено Тогда
		локСценарий = Сценарий;
	Иначе
		локСценарий = Справочники.Сценарии.НайтиПоКоду(локСценарий);
		Если НЕ ЗначениеЗаполнено(локСценарий) Тогда
			ТекстСообщения = НСтр("ru = 'Сценарий с кодом ""%Сценарий%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(локСценарий));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// определяем организацию
	Если локОрганизация = Неопределено Тогда
		локОрганизация = Организация;
	Иначе
		локОрганизация = Справочники.Организации.НайтиПоНаименованию(локОрганизация);
		Если НЕ ЗначениеЗаполнено(локОрганизация) Тогда
			ТекстСообщения = НСтр("ru = 'Организационная единица с наименованием ""%Организация%"" не найдена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(локОрганизация));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// определяем период отчета
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = ПериодОтчета;
	ИначеЕсли ТипЗнч(ЛокПериодОтчета) = Тип("Число") Тогда
		локПериодОтчета = ОтносительныйПериод(ПериодОтчета, локПериодОтчета);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(локПериодОтчета) Тогда
		ноСообщить(НСтр("ru = 'Не задан период отчета.'"), СтатусСообщения.Важное, Истина);
		Возврат Неопределено;
	КонецЕсли;
	
	// определяем аналитики
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		текАналитика = ЛокАналитики["локАналитика" + Инд];
		Если текАналитика = Неопределено Тогда
			ИзмеренияРаскрытия.Добавить("Аналитика" + Инд);
		КонецЕсли;
	КонецЦикла;
	
	// определяем валюту
	Если локВалюта = NULL Тогда
		локВалюта = ОсновнаяВалюта;
	ИначеЕсли локВалюта = Неопределено Тогда
		локВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	// определяем признаки активности
	ПризнакиАктивности = Новый СписокЗначений;
	Если Активность = Неопределено Тогда
		ПризнакиАктивности.Добавить(Истина);
		Если ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
			ПризнакиАктивности.Добавить(Ложь);
		КонецЕсли;
	Иначе
		ПризнакиАктивности.Добавить(Активность);
	КонецЕсли;
	
	ЛокИзмерения = Новый Структура("Показатель, Сценарий, Организация, ПериодОтчета, Валюта", локПоказатель, локСценарий, локОрганизация, локПериодОтчета, локВалюта);
	
	// Получим тексты отборов по показателям и версиям
	
	ОтборПоказателей=Новый Соответствие;
	ТекстОтборВерсии="";
	ЗапросВерсии=Новый Запрос;
	
	Для Каждого локИзмерение Из локИзмерения Цикл
		
		Если ИзмеренияРаскрытия.НайтиПоЗначению(локИзмерение.Ключ) = Неопределено Тогда
			
			ТипПараметра = ТипЗнч(локИзмерение.Значение);
			
			Если ЛокИзмерение.Ключ = "Показатель" Тогда
				
				ОтборПоказателей.Вставить("#### "+ ?(ТипПараметра <> Тип("Массив") И ТипПараметра <> Тип("СписокЗначений"), " = &Парам" + локИзмерение.Ключ
				, " В (&Парам" + локИзмерение.Ключ + ")"),Новый Структура("Парам" + локИзмерение.Ключ, локИзмерение.Значение));
				
			Иначе
				
				ТекстОтборВерсии=ТекстОтборВерсии+"
				|И ВерсииЗначенийПоказателей." + локИзмерение.Ключ
				+ ?(ТипПараметра <> Тип("Массив") И ТипПараметра <> Тип("СписокЗначений"), " = &Парам" + локИзмерение.Ключ
				, " В (&Парам" + локИзмерение.Ключ + ")");
				
				ЗапросВерсии.УстановитьПараметр("Парам" + локИзмерение.Ключ, локИзмерение.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА К РЕГИСТРАМ
	
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	| ВерсииЗначенийПоказателей.Активность В (&ПризнакиАктивности)
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|И (НЕ ВерсииЗначенийПоказателей.ЭкземплярОтчета=&Ссылка) 
	|И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета"+ТекстОтборВерсии+"
	|УПОРЯДОЧИТЬ ПО ВерсииЗначенийПоказателей.Код Убыв";
	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", локВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросВерсии.УстановитьПараметр("ПризнакиАктивности", ПризнакиАктивности);
	
	ТекСписокВерсий=Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ЗапросВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ТекСписокВерсий.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Организация","Организация");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Проект","Проект");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ПериодОтчета","ПериодОтчета");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Сценарий","Сценарий");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Валюта","Валюта");
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",локВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",ТекСписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",НЕ ЗаданаГруппаРаскрытия);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",ЗаданаГруппаРаскрытия);
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Если АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;						
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Организация,
	|	ЗначенияПоказателейОтчетов.ПериодОтчета,
	|	ЗначенияПоказателейОтчетов.Сценарий,
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.Показатель.ТипЗначения КАК ТипПоказателя,
	|	ЗначенияПоказателейОтчетов.Показатель.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение,
	|	ЗначенияПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "					  
		|	ЗначенияПоказателейОтчетов.Аналитика" + Инд + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "				  
	|	ЗначенияПоказателейОтчетов.Валюта,
	|	ЗначенияПоказателейОтчетов.Значение КАК Значение
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	ТекстОтбор="";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		текАналитика = "Аналитика" + Инд;
		Если ИзмеренияРаскрытия.НайтиПоЗначению(текАналитика) = Неопределено Тогда
			ТекстОтбор = ТекстОтбор + " И ЗначенияПоказателейОтчетов." + текАналитика + " = &Парам" + текАналитика;
			Запрос.УстановитьПараметр("Парам" + текАналитика, ЛокАналитики["локАналитика" + Инд]);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаданаГруппаРаскрытия Тогда
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстОтбор= ТекстОтбор + "
			|	И ВЫБОР
			|		КОГДА ЗначенияПоказателейОтчетов.Показатель.ГруппаРаскрытия.ВидАналитики" + Инд + " = &парамПустойВидАналитики
			|		ИЛИ НЕ ЗначенияПоказателейОтчетов.Показатель.ГруппаРаскрытия.Аналитика" + Инд + "Обязательна
			|		ТОГДА Истина
			|		ИНАЧЕ ЗначенияПоказателейОтчетов.Аналитика" + Инд + " <> &НеопределенноеЗначениеАналитики
			|	КОНЕЦ";
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ"+Сред(ТекстОтбор,3);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамПустойВидАналитики", ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка());
	Запрос.УстановитьПараметр("НеопределенноеЗначениеАналитики", Неопределено);
		
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Если НЕ ЗаданаГруппаРаскрытия Тогда
		ТаблицаРезультатаЗапроса.Колонки.Удалить(ТаблицаРезультатаЗапроса.Колонки.ТипПоказателя);
		ТаблицаРезультатаЗапроса.Колонки.Удалить(ТаблицаРезультатаЗапроса.Колонки.КодПоказателя);
		Возврат ТаблицаРезультатаЗапроса;
	Иначе
		Возврат ПреобразоватьТаблицуРаскрытия(ТаблицаРезультатаЗапроса, локПоказатель);
	КонецЕсли;
	
КонецФункции

Функция ТаблицаТекущихЗначенийПоказателей(Знач локПоказатель = Неопределено, Знач локАналитика1 = Неопределено, Знач локАналитика2 = Неопределено, Знач локАналитика3 = Неопределено, Знач локАналитика4 = Неопределено, Знач локАналитика5 = Неопределено, Знач локАналитика6 = Неопределено, Знач локАналитика7 = Неопределено, Знач локАналитика8 = Неопределено, Знач локАналитика9 = Неопределено) Экспорт
	
	ЛокАналитики = Новый Структура("локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9",
	локАналитика1, локАналитика2, локАналитика3, локАналитика4, локАналитика5, локАналитика6, локАналитика7, локАналитика8, локАналитика9);
	
	ЗаданаГруппаРаскрытия = Ложь;
	
	Если ТипЗнч(локПоказатель) = Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		РезультатПоиска = мПоказатели.НайтиСтроки(Новый Структура("ГруппаРаскрытия", локПоказатель));
		Если РезультатПоиска.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Состав показателей группы раскрытия ""%локПоказатель%"" не определен.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%локПоказатель%", Строка(локПоказатель));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат Неопределено;
		Иначе
			локПоказатель = Новый СписокЗначений;
			Для Каждого Стр Из РезультатПоиска Цикл
				локПоказатель.Добавить(Стр.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		ЗаданаГруппаРаскрытия = Истина;
		
	ИначеЕсли ТипЗнч(локПоказатель) = Тип("Строка") Тогда
		
		РезультатПоиска = мСоответствиеДляПоискаПоКоду[локПоказатель];
		Если РезультатПоиска = Неопределено Тогда
			РезультатПоиска = мПоказатели.НайтиСтроки(Новый Структура("КодГруппыРаскрытия", локПоказатель));
			Если РезультатПоиска.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Показатель с кодом ""%локПоказатель%"" не найден.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%локПоказатель%", Строка(локПоказатель));
				ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
				Возврат Неопределено;
			Иначе
				локПоказатель = Новый СписокЗначений;
				Для Каждого Стр Из РезультатПоиска Цикл
					локПоказатель.Добавить(Стр.Ссылка);
				КонецЦикла;
			КонецЕсли;
			ЗаданаГруппаРаскрытия = Истина;
		Иначе
			локПоказатель = РезультатПоиска.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(локПоказатель) = Тип("Массив") Тогда
		
		СпЗн = Новый СписокЗначений;
		СпЗн.ЗагрузитьЗначения(локПоказатель);
		локПоказатель = СпЗн;
		
	КонецЕсли;
	
	Для Каждого локАналитика Из локАналитики Цикл
		Если ТипЗнч(локАналитика.Значение) = Тип("Массив") Тогда
			СпЗн = Новый СписокЗначений;
			СпЗн.ЗагрузитьЗначения(локАналитика.Значение);
			локАналитики.Вставить(локАналитика.Ключ, СпЗн);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	Для Каждого Кол Из мПоказателиРаскрытия.Колонки Цикл
		ТаблицаРезультат.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	
	ЧислоАналитикУровняОтчета = 0;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ВидОтчета["ВидАналитики" + Инд] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка() Тогда
			Прервать;
		КонецЕсли;
		ЧислоАналитикУровняОтчета = ЧислоАналитикУровняОтчета + 1;
	КонецЦикла;
	
	Для Каждого Стр Из мПоказателиРаскрытия Цикл
		
		Если ТипЗнч(локПоказатель) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			Если Стр.Показатель <> локПоказатель Тогда
				Продолжить;
			КонецЕсли;
		Иначе			
			Если локПоказатель.НайтиПоЗначению(Стр.Показатель) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОтсеивается = Ложь;
		Для Инд = ЧислоАналитикУровняОтчета + 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ЗначенияАналитики = локАналитики["локАналитика" + Инд];
			Если ЗначенияАналитики = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЗначенияАналитики) = Тип("СписокЗначений") Тогда
				Если ЗначенияАналитики.НайтиПоЗначению(Стр["Аналитика" + Инд]) = Неопределено Тогда
					СтрокаОтсеивается = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				Если ЗначенияАналитики <> Стр["Аналитика" + Инд] Тогда
					СтрокаОтсеивается = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаОтсеивается Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		
	КонецЦикла;
	
	Если ЗаданаГруппаРаскрытия Тогда
		Возврат ПреобразоватьТаблицуРаскрытия(ТаблицаРезультат, локПоказатель);
	Иначе
		Возврат ТаблицаРезультат;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что текущая валюта модуля вычисления является дополнительной.
//
// Возвращаемое значение:
//	Булево.
//
Функция ТекущаяВалютаЯвляетсяДополнительной() Экспорт
	
	Если  ЗначениеЗаполнено(мТекущаяВалюта) Тогда
		Возврат мТекущаяВалюта <> ОсновнаяВалюта;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции

// Функция устанавливает значение показателя раскрытия.
//
// Параметры:
//	КодПоказателя - код изменяемого показателя;
//	Значение - устанавливаемое значение;
//	АналитикаN - значения аналитик.
//
// Возвращаемое значение - булево:
//			Истина	- удалось установить значение;
//			Ложь	- не удалось установить значение (не удалось найти показатель с таким кодом).
//
Функция УстановитьЗначениеПоказателя(КодПоказателя, Значение, 
										Аналитика1 = Неопределено,
										Аналитика2 = Неопределено,
										Аналитика3 = Неопределено,
										Аналитика4 = Неопределено, 
										Аналитика5 = Неопределено,
										Аналитика6 = Неопределено,
										АналитикаВалюта = Неопределено, ЗаписатьИзменениеВЛог = Истина) Экспорт
	
	Аналитики = Новый Структура("Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6,АналитикаВалюта",
	Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6,АналитикаВалюта);
	
	Если ТипЗнч(КодПоказателя) = Тип("Строка") Тогда							 
		СтрокаОписанияПоказателя = мСоответствиеДляПоискаПоКоду[КодПоказателя];
		Если СтрокаОписанияПоказателя = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка установки значения показателя: показатель с кодом ""%КодПоказателя%"" не найден.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(КодПоказателя));
			ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Возврат Ложь;
		КонецЕсли;
		Показатель = СтрокаОписанияПоказателя.Ссылка;
	Иначе
		Показатель = КодПоказателя;
		СтрокаОписанияПоказателя = мСоответствиеДляПоискаПоСсылке[КодПоказателя];
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаОписанияПоказателя.КодГруппыРаскрытия) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка установки значения показателя: для показателя с кодом ""%КодПоказателя%"" не определена группа аналитик.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(КодПоказателя));
		ноСообщить(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Показатель,АналитикаВалюта", Показатель,АналитикаВалюта);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураПоиска.Вставить("Аналитика" + Инд, Аналитики["Аналитика" + Инд]);
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ЭтотОбъект, Значение, СтруктураПоиска,,,, ЗаписатьИзменениеВЛог);
	
	МассивКодов=Новый Массив;
	МассивКодов.Добавить(КодПоказателя);
	УстановитьИтогиПоПоказателям(МассивКодов, ЗаписатьИзменениеВЛог);
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьСтрокиАналитическихРаскрытий(ТаблицаРаскрытий) Экспорт
	
	
	
	
КонецПроцедуры // 

Процедура ДобавитьПоказательВТаблицу(ТЗ, Показатель, Колонка)
	
	Табл = ТаблицаТекущихЗначенийПоказателей(Показатель);
	Табл.Свернуть("АналитикаВалюта", "Значение");
	
	Для каждого Стр из Табл Цикл
		НовСтр = ТЗ.Добавить();
		НовСтр.Валюта = Стр.АналитикаВалюта;
		НовСтр[Колонка] = Стр.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДДСПоУсловиямОплаты() Экспорт
	
	РасширениеБизнесЛогикиУХ.РассчитатьДДСПоУсловиямОплаты(ЭтотОбъект);
			
КонецПроцедуры

Функция ПолучитьПериодПоДате(ДатаНачала,Периодичность)
	
	ЗапросПериоды = Новый Запрос;
	ЗапросПериоды.Текст = "ВЫБРАТЬ
	                      |	Периоды.Ссылка,
	                      |	Периоды.ДатаНачала
	                      |ИЗ
	                      |	Справочник.Периоды КАК Периоды
	                      |ГДЕ
	                      |	Периоды.ПометкаУдаления = ЛОЖЬ
	                      |	И Периоды.ДатаНачала = &ДатаНачала
	                      |	И Периоды.Произвольный = ЛОЖЬ
	                      |	И Периоды.Периодичность = &Периодичность";

	ЗапросПериоды.УстановитьПараметр("ДатаНачала",ДатаНачала);
	ЗапросПериоды.УстановитьПараметр("Периодичность",Периодичность);

	Результат = ЗапросПериоды.Выполнить().Выгрузить();
	
	Возврат Результат
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОМЕЖУТОЧНОЕ ХРАНЕНИЕ РАБОЧИХ ТАБЛИЦ МЕЖДУ ВЫЗОВАМИ СЕРВЕРА
//

Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
	
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("Ссылка",Ссылка);
	СтруктураПеременных.Вставить("ЭкземплярОтчета",Ссылка);
	СтруктураПеременных.Вставить("Регистратор",?(ЗначениеЗаполнено(Ссылка),Ссылка,Регистратор));

	СтруктураПеременных.Вставить("ПроцедураСозданияОбъекта","Документы.НастраиваемыйОтчет.СоздатьДокумент()");
	СтруктураПеременных.Вставить("мПоказатели",мПоказатели);
	СтруктураПеременных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	СтруктураПеременных.Вставить("КэшПараметровГруппРаскрытия",КэшПараметровГруппРаскрытия);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоКоду",мСоответствиеДляПоискаПоКоду);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылке",мСоответствиеДляПоискаПоСсылке);
	СтруктураПеременных.Вставить("ЛогИзмененийПоказателей",ЛогИзмененийПоказателей);
	СтруктураПеременных.Вставить("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
	СтруктураПеременных.Вставить("мПоказателиВВалюте",мПоказателиВВалюте);
	СтруктураПеременных.Вставить("мПоказателиРаскрытияВВалюте",мПоказателиРаскрытияВВалюте);
	СтруктураПеременных.Вставить("мКорректировкиПоказателей",мКорректировкиПоказателей);
	СтруктураПеременных.Вставить("мКорректировкиПоказателейРаскрытия",мКорректировкиПоказателейРаскрытия);
	СтруктураПеременных.Вставить("РежимКорректировки",РежимКорректировки);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр",мСоответствиеДляПоискаПоСсылкеКорр);
	СтруктураПеременных.Вставить("ТаблицаСобытийЗагрузки",ТаблицаСобытийЗагрузки);
	СтруктураПеременных.Вставить("ИзмененияВДиалоге",ИзмененияВДиалоге);
	СтруктураПеременных.Вставить("КомментарииИзменены",КомментарииИзменены);
	СтруктураПеременных.Вставить("мСпособЗаполнения",мСпособЗаполнения);
	СтруктураПеременных.Вставить("мКопируемыйДокумент",мКопируемыйДокумент);
	СтруктураПеременных.Вставить("Показатели",Показатели);
	СтруктураПеременных.Вставить("Параметры",Параметры);
	СтруктураПеременных.Вставить("ЧислоДопАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	СтруктураПеременных.Вставить("ТрансформационнаяКорректировка",ТрансформационнаяКорректировка);
	СтруктураПеременных.Вставить("ПустоеЗначениеПоТипу",ПустоеЗначениеПоТипу);
	СтруктураПеременных.Вставить("мТекущаяВалюта",мТекущаяВалюта);
	СтруктураПеременных.Вставить("мПоказателиДляКурсовВалют",мПоказателиДляКурсовВалют);
	СтруктураПеременных.Вставить("мВалютыЗаписей",мВалютыЗаписей);
	СтруктураПеременных.Вставить("мМакетыРаскрытий",мМакетыРаскрытий);
	СтруктураПеременных.Вставить("мРасширеннаяДиагностикаВключена",мРасширеннаяДиагностикаВключена);
	СтруктураПеременных.Вставить("Кеш",Кеш);
	СтруктураПеременных.Вставить("КешОтборов",КешОтборов);
	СтруктураПеременных.Вставить("ЗначениеОтсутствует",ЗначениеОтсутствует);
	СтруктураПеременных.Вставить("ВводНаОснованииХранимогоФайла",ВводНаОснованииХранимогоФайла);
	СтруктураПеременных.Вставить("ИскомаяАналитика",ИскомаяАналитика);
	СтруктураПеременных.Вставить("мЭтоИмпортXLS",мЭтоИмпортXLS);
	СтруктураПеременных.Вставить("мНеПрерыватьИмпортПриОшибкахВычисления",мНеПрерыватьИмпортПриОшибкахВычисления);
	СтруктураПеременных.Вставить("СписокСообщений",СписокСообщений);
	СтруктураПеременных.Вставить("мНеЧисловыеПоказатели",мНеЧисловыеПоказатели);
	СтруктураПеременных.Вставить("мЧисловыеПоказатели",мЧисловыеПоказатели);
	СтруктураПеременных.Вставить("мСоответствиеНаборовЗаписей",мСоответствиеНаборовЗаписей);
	СтруктураПеременных.Вставить("мСоотвествиеДляПересчетаКурсов",мСоотвествиеДляПересчетаКурсов);
	СтруктураПеременных.Вставить("мПоказателиДляОбработки",мПоказателиДляОбработки);
	СтруктураПеременных.Вставить("мСоответствиеПоказателейКодов",мСоответствиеПоказателейКодов);
	СтруктураПеременных.Вставить("мОперанды",мОперанды);
	СтруктураПеременных.Вставить("ОбработанныеОперанды",ОбработанныеОперанды);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикВидаОтчета",мТаблицаВидовАналитикВидаОтчета);
	СтруктураПеременных.Вставить("мТабПоказателиЗапросы",мТабПоказателиЗапросы);
	СтруктураПеременных.Вставить("мТабРасшифровкиПоказателей",мТабРасшифровкиПоказателей);
	СтруктураПеременных.Вставить("мСоответствиеОперандовИПоказателейОтбора",мСоответствиеОперандовИПоказателейОтбора);
	СтруктураПеременных.Вставить("мЗначенияОперандов",мЗначенияОперандов);
	СтруктураПеременных.Вставить("ЕстьОбращениеКВИБ",ЕстьОбращениеКВИБ);
	СтруктураПеременных.Вставить("База",База);
	СтруктураПеременных.Вставить("мПустойВидАналитики",мПустойВидАналитики);
	СтруктураПеременных.Вставить("мПоказателиСтар",мПоказателиСтар);
	СтруктураПеременных.Вставить("ФлагОшибкиИмпорта",ФлагОшибкиИмпорта);
	СтруктураПеременных.Вставить("ТихийРежим",ТихийРежим);
	СтруктураПеременных.Вставить("мУдалятьДвижения",мУдалятьДвижения);
	СтруктураПеременных.Вставить("РежимДиалога",РежимДиалога);
	СтруктураПеременных.Вставить("СрезПоВерсиям",СрезПоВерсиям);
	СтруктураПеременных.Вставить("СписокВерсий",СписокВерсий);
	СтруктураПеременных.Вставить("мТекстПредупреждения",мТекстПредупреждения);
	СтруктураПеременных.Вставить("мКопирование",мКопирование);
	СтруктураПеременных.Вставить("ОписаниеТиповРесурсаЗначение",ОписаниеТиповРесурсаЗначение);
	СтруктураПеременных.Вставить("СтруктураОтбораРасшифровок",СтруктураОтбораРасшифровок);
	СтруктураПеременных.Вставить("мКонтрольныеСоотношения",мКонтрольныеСоотношения);
	СтруктураПеременных.Вставить("мСоответствиеОперандовИПоказателейОтбораКонтр",мСоответствиеОперандовИПоказателейОтбораКонтр);
	СтруктураПеременных.Вставить("мОперандыКонтр",мОперандыКонтр);
	СтруктураПеременных.Вставить("мЗначенияОперандовКонтр",мЗначенияОперандовКонтр);
	СтруктураПеременных.Вставить("мТабПоказателиЗапросыКонтр",мТабПоказателиЗапросыКонтр);
	СтруктураПеременных.Вставить("ТабКорректировок",ТабКорректировок);
	СтруктураПеременных.Вставить("ШаблонКорректировки",ШаблонКорректировки);
	СтруктураПеременных.Вставить("СоответствиеХраненияКомментариев",СоответствиеХраненияКомментариев);
	СтруктураПеременных.Вставить("ИзмененНечисловойПоказатель",ИзмененНечисловойПоказатель);
	СтруктураПеременных.Вставить("ИзмененКлючевойРеквизит",ИзмененКлючевойРеквизит);
	СтруктураПеременных.Вставить("РежимРасшифровки",РежимРасшифровки);
	СтруктураПеременных.Вставить("ТаблицаСогласования",ТаблицаСогласования);
	СтруктураПеременных.Вставить("РаботаСВерсиями",РаботаСВерсиями);
	СтруктураПеременных.Вставить("ТекущийЭлементОписаниеВерсии",ТекущийЭлементОписаниеВерсии);
	СтруктураПеременных.Вставить("КэшТаблицыКурсов",КэшТаблицыКурсов);
	СтруктураПеременных.Вставить("КэшДатРасчетаПоказателей",КэшДатРасчетаПоказателей);
	СтруктураПеременных.Вставить("ДанныеПараметрикиАктуальны",ДанныеПараметрикиАктуальны);
	СтруктураПеременных.Вставить("ВычислятьПриИзменении",ВычислятьПриИзменении);
	СтруктураПеременных.Вставить("ОтборПоКонтрольнымСоотношениям",ОтборПоКонтрольнымСоотношениям);
	СтруктураПеременных.Вставить("ДанныеРаскрытияИнициализированы",ДанныеРаскрытияИнициализированы);
	СтруктураПеременных.Вставить("ОтчетИнициализирован",ОтчетИнициализирован);
	СтруктураПеременных.Вставить("СписокИспользуемыхВерсий",СписокИспользуемыхВерсий);
	СтруктураПеременных.Вставить("ОбновитьМакетПолностью",ОбновитьМакетПолностью);
	СтруктураПеременных.Вставить("мТаблицаПересчета",мТаблицаПересчета);
	СтруктураПеременных.Вставить("мПоказателиОбязательныеКПересчету",мПоказателиОбязательныеКПересчету);
	СтруктураПеременных.Вставить("Размерность",Размерность);
	СтруктураПеременных.Вставить("ПроверкаПриЗаписи",ПроверкаПриЗаписи);
	СтруктураПеременных.Вставить("ФормированиеДвиженийПриЗаписи",ФормированиеДвиженийПриЗаписи);
	СтруктураПеременных.Вставить("ТипЗначенияЧисло",ТипЗначенияЧисло);
	СтруктураПеременных.Вставить("Исполнитель",Исполнитель);
	СтруктураПеременных.Вставить("Проверяющий",Проверяющий);
	СтруктураПеременных.Вставить("НомерТекущейОперации",НомерТекущейОперации);
	СтруктураПеременных.Вставить("МеткаВерсии",МеткаВерсии);
	СтруктураПеременных.Вставить("КомментарийВерсии",КомментарийВерсии);

	СтруктураПеременных.Вставить("СбрасыватьФлагИзмененияПоказателейПриВыводе",СбрасыватьФлагИзмененияПоказателейПриВыводе);
	СтруктураПеременных.Вставить("ЕдиницаИзмеренияОтображения",ЕдиницаИзмеренияОтображения);
	СтруктураПеременных.Вставить("ПересчетВалюты",ПересчетВалюты);
	СтруктураПеременных.Вставить("Вариант",Вариант);
	СтруктураПеременных.Вставить("ПоказателиДляЗаполнения",ПоказателиДляЗаполнения);
	СтруктураПеременных.Вставить("АнализЧувствительности",АнализЧувствительности);
	СтруктураПеременных.Вставить("мНеИнициироватьВнутриГрупповыеОперации",мНеИнициироватьВнутриГрупповыеОперации);
	СтруктураПеременных.Вставить("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	СтруктураПеременных.Вставить("ТаблицаВыявленныхОшибок",ТаблицаВыявленныхОшибок);
	СтруктураПеременных.Вставить("ДанныеРасшифровкиСчитаны",ДанныеРасшифровкиСчитаны);
	СтруктураПеременных.Вставить("ВсегдаЗаполнятьАналитики",ВсегдаЗаполнятьАналитики);
	СтруктураПеременных.Вставить("ТабНомеровАналитик",ТабНомеровАналитик);
	СтруктураПеременных.Вставить("УчитыватьОперацииПриобретенияПриКонсолидации",УчитыватьОперацииПриобретенияПриКонсолидации);
	СтруктураПеременных.Вставить("ДокументУправленияПериодомСценария",ДокументУправленияПериодомСценария);
	СтруктураПеременных.Вставить("ТаблицаВалютСИзмененнымКурсом",ТаблицаВалютСИзмененнымКурсом);
	СтруктураПеременных.Вставить("СтруктураОтбораАналитикДляСтрокОтчета",СтруктураОтбораАналитикДляСтрокОтчета);
	СтруктураПеременных.Вставить("СтруктураСортировкиАналитикДляСтрокОтчета",СтруктураСортировкиАналитикДляСтрокОтчета);
	СтруктураПеременных.Вставить("ВыводитьВДерево",ВыводитьВДерево);
	СтруктураПеременных.Вставить("мТабПоказателиСвод",мТабПоказателиСвод);
	СтруктураПеременных.Вставить("мТаблицаАналитикВидаОтчета",мТаблицаАналитикВидаОтчета);
	СтруктураПеременных.Вставить("МаксАналитикПоказателя",МаксАналитикПоказателя);
	СтруктураПеременных.Вставить("МаксАналитикОтчета",МаксАналитикОтчета);
	СтруктураПеременных.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	СтруктураПеременных.Вставить("ДеревоСтрок",ДеревоСтрок);
	СтруктураПеременных.Вставить("СписокКолонокБазис",СписокКолонокБазис);
	СтруктураПеременных.Вставить("ПоказателиСРаскрытием",ПоказателиСРаскрытием);
	СтруктураПеременных.Вставить("СписокРедактируемыхПоказателей",СписокРедактируемыхПоказателей);
	СтруктураПеременных.Вставить("СписокРедактируемыхОбластей",СписокРедактируемыхОбластей);
	СтруктураПеременных.Вставить("СписокИспользуемыхВалют",СписокИспользуемыхВалют);
	СтруктураПеременных.Вставить("мИзмененныеПоказатели",мИзмененныеПоказатели);
	СтруктураПеременных.Вставить("мИзмененныеПоказателиРаскрытия",мИзмененныеПоказателиРаскрытия);
	СтруктураПеременных.Вставить("ТаблицаРаскрытийСтрок",ТаблицаРаскрытийСтрок);
	СтруктураПеременных.Вставить("ШаблонРаскрытиеСтроки",ШаблонРаскрытиеСтроки);
	СтруктураПеременных.Вставить("ШаблонТаблицыКоординат",ШаблонТаблицыКоординат);
	СтруктураПеременных.Вставить("ШаблонКоординаты",ШаблонКоординаты);
	СтруктураПеременных.Вставить("Расшифровка",Расшифровка);
	СтруктураПеременных.Вставить("РасшифровкаСтрока",РасшифровкаСтрока);
	СтруктураПеременных.Вставить("ЗапросКоординаты",ЗапросКоординаты);
	СтруктураПеременных.Вставить("ЗапросДанные",ЗапросДанные);
	СтруктураПеременных.Вставить("ЗапросДанныеРаскрытия",ЗапросДанныеРаскрытия);
	СтруктураПеременных.Вставить("ТаблицыЗапросаДанные",ТаблицыЗапросаДанные);
	СтруктураПеременных.Вставить("ТаблицыЗапросаРаскрытие",ТаблицыЗапросаРаскрытие);
	СтруктураПеременных.Вставить("УправляемыйРежим",УправляемыйРежим);
	СтруктураПеременных.Вставить("МассивГруппировокСтрокИтог",МассивГруппировокСтрокИтог);
	СтруктураПеременных.Вставить("МассивГруппировокКолонокИтог",МассивГруппировокКолонокИтог);
	СтруктураПеременных.Вставить("ТаблицаКоординатПомещенаВЗапрос",ТаблицаКоординатПомещенаВЗапрос);
	СтруктураПеременных.Вставить("ТабКоординатыСтрок",ТабКоординатыСтрок);
	СтруктураПеременных.Вставить("ТабКоординатыКолонок",ТабКоординатыКолонок);
	СтруктураПеременных.Вставить("ТабКоординатыОбщ",ТабКоординатыОбщ);
	СтруктураПеременных.Вставить("ТабДерево",ТабДерево);
	СтруктураПеременных.Вставить("ПерваяСтрока",ПерваяСтрока);
	СтруктураПеременных.Вставить("ПерваяКолонка",ПерваяКолонка);
	СтруктураПеременных.Вставить("ПоследняяКолонка",ПоследняяКолонка);
	СтруктураПеременных.Вставить("НачалоКолонок",НачалоКолонок);
	СтруктураПеременных.Вставить("УровеньСтрока",УровеньСтрока);
	СтруктураПеременных.Вставить("УровеньКолонка",УровеньКолонка);
	СтруктураПеременных.Вставить("ТекущийДелитель",ТекущийДелитель);
	СтруктураПеременных.Вставить("ТекущаяТочность",ТекущаяТочность);
	СтруктураПеременных.Вставить("МассивДобавленныхСтрокКПередаче",МассивДобавленныхСтрокКПередаче);
	СтруктураПеременных.Вставить("МассивУдаленныхСтрокКПередаче",МассивУдаленныхСтрокКПередаче);
	СтруктураПеременных.Вставить("МассивИзмененныхОбластей",МассивИзмененныхОбластей);
	СтруктураПеременных.Вставить("ТабРазвернутыхУзлов",ТабРазвернутыхУзлов);
	СтруктураПеременных.Вставить("ИзменяемаяЯчейка",ИзменяемаяЯчейка);
	СтруктураПеременных.Вставить("ЗаполнениеВыполнено",ЗаполнениеВыполнено);
	СтруктураПеременных.Вставить("ТабПризнакиСтрок",ТабПризнакиСтрок);
	СтруктураПеременных.Вставить("ТабРаскрытиеГруппСтроки",ТабРаскрытиеГруппСтроки);
	СтруктураПеременных.Вставить("ТабДок",ТабДок);
	СтруктураПеременных.Вставить("СтрокиРазгруппированы",СтрокиРазгруппированы);
	СтруктураПеременных.Вставить("ТабОбластиРаскрытия",ТабОбластиРаскрытия);
	СтруктураПеременных.Вставить("ПоложениеПервойКолонкиПриРаскрытии",ПоложениеПервойКолонкиПриРаскрытии);
	СтруктураПеременных.Вставить("ТабКоординатыИзменяемыхЯчеек",ТабКоординатыИзменяемыхЯчеек);
	СтруктураПеременных.Вставить("глОсновнойЯзык",глОсновнойЯзык);
	СтруктураПеременных.Вставить("УдалитьПромежуточныеВерсии",УдалитьПромежуточныеВерсии);
	СтруктураПеременных.Вставить("КорректирующаяВерсия",КорректирующаяВерсия);
	СтруктураПеременных.Вставить("ПутьКФайлуADO",ПутьКФайлуADO);
	СтруктураПеременных.Вставить("ПутьКВременномуФайлуADO",ПутьКВременномуФайлуADO);
	СтруктураПеременных.Вставить("ИмяЛиста",ИмяЛиста);
	СтруктураПеременных.Вставить("ВерсияХранимогоФайла",ВерсияХранимогоФайла);
	СтруктураПеременных.Вставить("МассивЗагруженныхГруппРаскрытия",МассивЗагруженныхГруппРаскрытия);
	СтруктураПеременных.Вставить("ДанныеОбъекта",ДанныеОбъекта);
	СтруктураПеременных.Вставить("ОтступТаблицы",ОтступТаблицы);
	СтруктураПеременных.Вставить("НеПересчитыватьИтоги",НеПересчитыватьИтоги);
	СтруктураПеременных.Вставить("ТабПараметрыПоказателей",ТабПараметрыПоказателей);
	СтруктураПеременных.Вставить("ПоказателиВВалюте",ПоказателиВВалюте);
	СтруктураПеременных.Вставить("КэшДанныхЭлементов",КэшДанныхЭлементов);
	СтруктураПеременных.Вставить("УровеньТочности",УровеньТочности);
	СтруктураПеременных.Вставить("СостояниеСогласовани",Состояние);
	СтруктураПеременных.Вставить("СостояниеСогласованиДоИзменения",СостояниеДоИзменения);
	СтруктураПеременных.Вставить("ПредставлениеОбъекта",""+ЭтотОбъект);
	СтруктураПеременных.Вставить("ДополнительныеВалюты",ДополнительныеВалюты.Выгрузить());
	СтруктураПеременных.Вставить("Дата",Дата);
	СтруктураПеременных.Вставить("СтрокаСоединения",СтрокаСоединения);
	СтруктураПеременных.Вставить("ПодставлятьЗначенияПоУмолчаниюВместоПустых",ПодставлятьЗначенияПоУмолчаниюВместоПустых);
	СтруктураПеременных.Вставить("АвтоматическийПересчетЗависимыхПоказателей",АвтоматическийПересчетЗависимыхПоказателей);	
	СтруктураПеременных.Вставить("ДополнительныеСвойства",ДополнительныеСвойства);
	СтруктураПеременных.Вставить("мТабПоказателиЗапросыАнализ",мТабПоказателиЗапросыАнализ);
	СтруктураПеременных.Вставить("МассивПериодов",МассивПериодов);
	СтруктураПеременных.Вставить("ТаблицаПротоколаСеанс",ТаблицаПротоколаСеанс);
	СтруктураПеременных.Вставить("ИдентификаторСеанса",ИдентификаторСеанса);
	
	Если ОбщегоНазначенияПовтИспУХ.РассчитыватьРасхожденияПорталаВГО() Тогда
		СтруктураПеременных.Вставить("РассчитыватьРасхожденияВГО", Истина);
	КонецЕсли;		
		
	ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект,СтруктураПеременных);
		
	Возврат СтруктураПеременных;
		
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета() 

Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета=Неопределено, тПериодОтчета=Неопределено) Экспорт

	Если ПеременныеДляРасчета=Неопределено  Тогда	
		Если ЗначениеЗаполнено(АдресХранилищаПеременныхДляРасчета) Тогда
			ПеременныеДляРасчета=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
		Иначе
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		Если ПеременныеДляРасчета.Свойство("ДополнительныеСвойства") Тогда
			
			Для Каждого КлючИЗначение ИЗ ПеременныеДляРасчета.ДополнительныеСвойства Цикл
				
				ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка,ДополнительныеСвойства");
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка");
			
		КонецЕсли;
				
		Если ТипЗнч(мПоказатели)=Тип("ТаблицаЗначений") Тогда
			ИнициализироватьСоответствияДляПоиска(тПериодОтчета);
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()


Процедура ИнициализироватьЗапросыОбъекта(ЗаполнятьТаблицуРаскрытия=Ложь) Экспорт
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если НЕ ТипЗнч(ЗапросДанныеРаскрытия)=Тип("Запрос") Тогда
		ЗапросДанныеРаскрытия=Новый Запрос;
	КонецЕсли;
	
	ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если НЕ ТипЗнч(ЗапросКоординаты)=Тип("Запрос") Тогда
		ЗапросКоординаты=Новый Запрос;
	КонецЕсли;
	
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаСтроки=Неопределено Тогда
		
		СформироватьТаблицуСтрок();
		
	КонецЕсли;
	
	ЗапросДанные.Текст="
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТаблицаСтроки.Ссылка КАК Ссылка,
	|ТаблицаСтроки.Код КАК Код,
	|ТаблицаСтроки.Порядок КАК Порядок
	|
	|ПОМЕСТИТЬ СтрокиОтчетов
	|ИЗ	&ТаблицаСтроки КАК ТаблицаСтроки
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка КАК Показатель,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|   мПоказатели.ВидКурса,
	|   мПоказатели.СвязанныйПоказатель
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Показатель
	|;";
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	ЗапросДанные.УстановитьПараметр("мПоказатели",мПоказатели);
	
	ЗапросДанные.Выполнить();
	
	Если ЗаполнятьТаблицуРаскрытия Тогда
		
		ЗапросДанныеРаскрытия.Текст="
		|/////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мПоказатели.Ссылка КАК Показатель,
		|	мПоказатели.Код,
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	мПоказатели.НеФинансовый,
		|	мПоказатели.ЧисловойПоказатель,
		|   мПоказатели.ВидКурса,
		|   мПоказатели.СвязанныйПоказатель
		|ПОМЕСТИТЬ ТабПоказатели
		|ИЗ
		|	&мПоказатели КАК мПоказатели
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказатели",мПоказатели);
		
		ЗапросДанныеРаскрытия.Выполнить();
		
	КонецЕсли;

КонецПроцедуры // ИнициализироватьЗапросыОбъекта()

Процедура ИнициализироватьСоответствияДляПоиска(тПериодОтчета = Неопределено) Экспорт
	
	Если тПериодОтчета = Неопределено Тогда
		ПоказателиОбъекта=Новый Структура("мПоказатели",мПоказатели);
	Иначе
		ПоказателиОбъекта=Новый Структура("мПоказатели",мПоказатели.Скопировать(Новый Структура("ПериодОтчета",тПериодОтчета)));
	КонецЕсли;
	УправлениеОтчетамиУХ.ИнициализироватьСоответствияДляПоиска(ПоказателиОбъекта);
	мСоответствиеДляПоискаПоКоду=ПоказателиОбъекта.мСоответствиеДляПоискаПоКоду;
	мСоответствиеДляПоискаПоСсылке=ПоказателиОбъекта.мСоответствиеДляПоискаПоСсылке;
	мРедактируемыеПоказатели=ПоказателиОбъекта.мРедактируемыеПоказатели;
		
КонецПроцедуры // ИнициализироватьСоответствияДляПоиска() 

Процедура СброситьЗапросыОбъекта() Экспорт
	
	Попытка
		
		Если ТипЗнч(ЗапросДанные)=Тип("Запрос") Тогда
			ЗапросДанные.МенеджерВременныхТаблиц.Закрыть();
		КонецЕсли;
		
		Если ТипЗнч(ЗапросДанныеРаскрытия)=Тип("Запрос") Тогда
			ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц.Закрыть();
		КонецЕсли;
		
		Если ТипЗнч(ЗапросКоординаты)=Тип("Запрос") Тогда
			ЗапросКоординаты.МенеджерВременныхТаблиц.Закрыть();
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры // СброситьЗапросыОбъекта()

Процедура СнятьБлокировку() Экспорт
	
	Если Заблокирован() Тогда
		
		Разблокировать();
		
	КонецЕсли;
	
КонецПроцедуры // СнятьБлокировку()

Функция ПолучитьСтрокуФормата(Формат)
	
	Если ПустаяСтрока(Формат) Тогда
		
		Формат="ЧДЦ = 0;";
		
	КонецЕсли;
	
	МассивФорматов=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Формат,";");
	СтрокаФормат="";
	
	Для Каждого Элемент ИЗ МассивФорматов Цикл
		
		Если Лев(Элемент,3)="ЧДЦ" Тогда
			
			СтрокаФормат=СтрокаФормат+";"+"ЧДЦ="+УровеньТочности;
			
		Иначе
			
			СтрокаФормат=СтрокаФормат+";"+Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сред(СтрокаФормат,2);
		
КонецФункции // ПолучитьСтрокуФормата() 

Процедура ОбновитьЗначенияПоказателей(ТаблицаПоказателей, ПолеТабличногоДокументаМакет) Экспорт
	
	Области = ПолеТабличногоДокументаМакет.Области;
	Делитель = ВернутьЗначениеДелителя();
	
	Для Каждого Стр Из ТаблицаПоказателей Цикл
				
		Обл = Области.Найти(Стр.Код);
		Если Обл <> Неопределено И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			Если ТипЗнч(Стр.Значение) = Тип("Число") Тогда
						
				Если НЕ Стр.НеМасштабируется Тогда
					Обл.Значение = Стр.Значение / Делитель;
				Иначе
					Обл.Значение = Стр.Значение;
				КонецЕсли;
				
				Обл.Формат=ПолучитьСтрокуФормата(Обл.Формат);
				
			Иначе
				
				Обл.Значение    = Стр.Значение;
				
			КонецЕсли;
			
			Обл.Примечание.Текст = СформироватьТекстКомментарияДляМакета(Стр.Ссылка);		
					
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеТабличногоДокументаМакет.ТолькоПросмотр=Истина;
	
КонецПроцедуры // ОбновитьЗначенияПоказателей

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	РасширениеПроцессыИСогласованиеУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Перечисления.СостоянияОтчетов.Запланирован);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ

// вспомогательное соответствие для быстрого доступа к пустым значениям всех возможных типов показателей
ПустоеЗначениеПоТипу = Новый Соответствие;
ПустоеЗначениеПоТипу.Вставить(Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка(), 0);
ПустоеЗначениеПоТипу.Вставить(Перечисления.ТипыЗначенийПоказателейОтчетов.Булево, Ложь);
ПустоеЗначениеПоТипу.Вставить(Перечисления.ТипыЗначенийПоказателейОтчетов.Дата, '000101010000');
ПустоеЗначениеПоТипу.Вставить(Перечисления.ТипыЗначенийПоказателейОтчетов.Строка, "");
ПустоеЗначениеПоТипу.Вставить(Перечисления.ТипыЗначенийПоказателейОтчетов.Число, 0);

// переменная, хранящая табличные документы, соответствующие шапке, строке, подвалу
// каждой из групп раскрытия, определенных для текущего отчета
мМакетыРаскрытий = Новый ТаблицаЗначений;
мМакетыРаскрытий.Колонки.Добавить("Имя");
мМакетыРаскрытий.Колонки.Добавить("Шапка");
мМакетыРаскрытий.Колонки.Добавить("Строка");
мМакетыРаскрытий.Колонки.Добавить("Подвал");

Кеш = Новый ТаблицаЗначений;
Кеш.Колонки.Добавить("Показатель");
Кеш.Колонки.Добавить("ВидОтчета");
Кеш.Колонки.Добавить("Активность");
Кеш.Колонки.Добавить("Организация");
Кеш.Колонки.Добавить("Проект");
Кеш.Колонки.Добавить("ПериодОтчета");
Кеш.Колонки.Добавить("ПериодОкончанияОтчета");
Кеш.Колонки.Добавить("УправлениеПериодом");
Кеш.Колонки.Добавить("Сценарий");
Кеш.Колонки.Добавить("Валюта");
Кеш.Колонки.Добавить("Значение");

Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
	Кеш.Колонки.Добавить("ВидАналитикиГруппыРаскрытия" + Инд);
	Кеш.Колонки.Добавить("ВидАналитикиВидаОтчета" + Инд);
	Кеш.Колонки.Добавить("Аналитика" + Инд);
КонецЦикла;

Кеш.Колонки.Добавить("ВидАналитикиГруппыРаскрытияВалюта");
Кеш.Колонки.Добавить("ВидАналитикиВидаОтчетаВалюта");
Кеш.Колонки.Добавить("АналитикаВалюта");

КешОтборов = Новый ТаблицаЗначений;
КешОтборов.Колонки.Добавить("Сценарий");
КешОтборов.Колонки.Добавить("Организация");
КешОтборов.Колонки.Добавить("Проект");
КешОтборов.Колонки.Добавить("ПериодОтчета");
КешОтборов.Колонки.Добавить("ПериодОкончанияОтчета");
КешОтборов.Колонки.Добавить("УправлениеПериодом");
КешОтборов.Колонки.Добавить("Валюта");
КешОтборов.Колонки.Добавить("ВидОтчета");

мРасширеннаяДиагностикаВключена = Ложь;

ЗначениеОтсутствует = "c9479cbb-416c-430c-91ef-d1a1e96ffc19";

ИскомаяАналитика = Новый УникальныйИдентификатор;
мНеПрерыватьИмпортПриОшибкахВычисления = Ложь;

СписокСообщений = Новый Массив;

мПустойВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();

ОписаниеТиповРесурсаЗначение=Метаданные.РегистрыСведений.ЗначенияПоказателейОтчетов.Ресурсы.Значение.Тип;

ТихийРежим  = Ложь;

РежимДиалога=Ложь;
СрезПоВерсиям=Ложь;
КомментарииИзменены = Ложь;
ИзмененНечисловойПоказатель=Ложь;
ИзмененКлючевойРеквизит=Ложь;

СбрасыватьФлагИзмененияПоказателейПриВыводе=Истина;

УчитыватьОперацииПриобретенияПриКонсолидации=Истина;

ДанныеПараметрикиАктуальны=Ложь;

Размерность=18;

ПроверкаПриЗаписи=Истина;
ФормированиеДвиженийПриЗаписи=Истина;

ТипЗначенияЧисло=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
АнализЧувствительности=Ложь;

ВалютаУправленческогоУчета=Константы.ВалютаУправленческогоУчета.Получить();

///////////////////////////////////////////////////////////////////////////////////////////////////////

СписокРедактируемыхПоказателей=Новый СписокЗначений;

ШаблонРасшифровки=Новый ТаблицаЗначений;
ШаблонРасшифровки.Колонки.Добавить("Ключ");
ШаблонРасшифровки.Колонки.Добавить("Значение");

ТипАналитики=Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;

ШаблонТаблицыКоординат=Новый ТаблицаЗначений;
ШаблонТаблицыКоординат.Колонки.Добавить("НомерСтроки",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
ШаблонТаблицыКоординат.Колонки.Добавить("НомерКолонки",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
ШаблонТаблицыКоординат.Колонки.Добавить("Строка",				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СтрокиОтчетов"));
ШаблонТаблицыКоординат.Колонки.Добавить("Колонка",				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.КолонкиОтчетов"));
ШаблонТаблицыКоординат.Колонки.Добавить("Раскрытие",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
ШаблонТаблицыКоординат.Колонки.Добавить("ЭтоГруппа",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
ШаблонТаблицыКоординат.Колонки.Добавить("ИмяГруппировки",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
ШаблонТаблицыКоординат.Колонки.Добавить("ИндексАналитики",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
ШаблонТаблицыКоординат.Колонки.Добавить("Показатель",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
ШаблонТаблицыКоординат.Колонки.Добавить("АналитикаВалюта",		ТипАналитики);

Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
	ШаблонТаблицыКоординат.Колонки.Добавить("Аналитика"+Индекс, ТипАналитики);
КонецЦикла;

ТабКоординатыОбщ = ШаблонТаблицыКоординат.СкопироватьКолонки();

глОсновнойЯзык=0;
ПерваяКолонка=0;

ЦветВычисляемойОбласти=Новый Цвет(220, 240, 255);

МассивТаблицПоказателей=Новый Массив;
МассивТаблицПоказателейРаскрытия=Новый Массив;

ТабРазвернутыхУзлов=Новый ТаблицаЗначений;
ТабРазвернутыхУзлов.Колонки.Добавить("НомерСтроки");
ТабРазвернутыхУзлов.Колонки.Добавить("Развернут",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

ТаблицыЗапросаКоординат=Новый Структура;
ТаблицыЗапросаДанные=Новый Структура;
ТаблицыЗапросаРаскрытие=Новый Структура;

ТаблицаКоординатПомещенаВЗапрос=Ложь;

ДанныеРаскрытияИнициализированы=Ложь;
ОтчетИнициализирован=Ложь;
УправляемыйРежим=Ложь;

КэшДанныхЭлементов=Новый Соответствие;

ТабДерево=Новый ДеревоЗначений;
мПустойВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();

ЗаполнениеВыполнено=Ложь;
ВычислятьПриИзменении=Истина;

ВыводитьВДерево=Ложь;

МассивЗагруженныхГруппРаскрытия=Новый Массив;

ОбновитьМакетПолностью=Ложь;

СтрокиРазгруппированы=Ложь;

УдалитьПромежуточныеВерсии=Ложь;

ТабКоординатыИзменяемыхЯчеек=Новый ТаблицаЗначений;
ТабКоординатыИзменяемыхЯчеек.Колонки.Добавить("НомерСтроки");
ТабКоординатыИзменяемыхЯчеек.Колонки.Добавить("НомерКолонки");

ТрансформационнаяКорректировка=Ложь;

РежимКорректировки=Ложь;
ПересчетВалюты=Ложь;

ТабОбластиРаскрытия = Новый ТаблицаЗначений;
ТабОбластиРаскрытия.Колонки.Добавить("КодСтроки");
ТабОбластиРаскрытия.Колонки.Добавить("Строка");
ТабОбластиРаскрытия.Колонки.Добавить("ТаблицаРаскрытия");
ТабОбластиРаскрытия.Колонки.Добавить("ГруппаРаскрытия");
ТабОбластиРаскрытия.Колонки.Добавить("МакетыРаскрытия");
ТабОбластиРаскрытия.Колонки.Добавить("ТабДокРаскрытие");
ТабОбластиРаскрытия.Колонки.Добавить("ОтборПоРаскрытию");
ТабОбластиРаскрытия.Колонки.Добавить("ПоказателиКолонки");
ТабОбластиРаскрытия.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(9));

СтруктураВидимостиГрупп               		= Новый Структура;
СтруктураОтбораАналитикДляСтрокОтчета 		= Новый Структура;
СтруктураСортировкиАналитикДляСтрокОтчета 	= Новый Структура;

ОтборПоЗначению = Ложь;
ОтборПоКонтрольнымСоотношениям = Ложь;

ФормироватьДвиженияПоЛимитам=Ложь;

ОбработанныеОперанды=Новый Соответствие;
ПодставлятьЗначенияПоУмолчаниюВместоПустых=Константы.ПодставлятьЗначенияПоУмолчаниюВместоПустых.Получить();

АнализПроизводительности=Ложь;

ОбрабатыватьПометкуУдаленияОписанияВерсий=Истина;

ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;

ТаблицаПротоколаСеанс=КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуПротокола();

#Область Состояние

Если Ссылка.Пустая() Тогда
	
	Состояние = Перечисления.СостоянияОтчетов.Запланирован;
	ДополнительныеСвойства.Вставить("СостояниеСогласования", Состояние);
	
Иначе
	
	СостояниеДоИзменения = РасширениеПроцессыИСогласованиеУХ.ВернутьСтатусОбъекта(Ссылка);
	Состояние = СостояниеДоИзменения;
	
КонецЕсли;

#КонецОбласти

#КонецЕсли
