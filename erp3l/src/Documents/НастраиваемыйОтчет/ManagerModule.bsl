Функция ВернутьНеопределенныеАналитикиОтчета(СсылкаНаОбъект) Экспорт
	
	МассивДанных = Новый Массив;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		МассивДанных.Добавить(Ложь);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивДанных);
	
КонецФункции

Функция ПолучитьСписокПараметровФормата(Знач СтрокаФормата) Экспорт
	
	СписокПараметров = Новый Соответствие;
	
	ПарыИмяЗначение = Новый Массив;
	ДлинаСтроки = СтрДлина(СтрокаФормата);
	Для ОбрИнд = 1 По ДлинаСтроки Цикл
		Инд = ДлинаСтроки - ОбрИнд + 1;
		ТекСимв = Сред(СтрокаФормата, Инд, 1);
		Если ТекСимв = ";" Тогда
			ПарыИмяЗначение.Вставить(0, Сред(СтрокаФормата, Инд + 1));
			СтрокаФормата = Лев(СтрокаФормата, Инд - 1);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		ПарыИмяЗначение.Добавить(СтрокаФормата);
	КонецЕсли;
	
	Для Каждого ПараИмяЗначение Из ПарыИмяЗначение Цикл
		ВхождениеРавно = СтрНайти(ПараИмяЗначение, "=");
		Если ВхождениеРавно <> 0 Тогда
			СписокПараметров.Вставить(СокрЛП(Лев(ПараИмяЗначение, ВхождениеРавно - 1)), СокрЛП(Сред(ПараИмяЗначение, ВхождениеРавно + 1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПараметров;
	
КонецФункции

Функция ПреобразоватьВСтрокуФормата(СписокПараметров) Экспорт
	
	СтрокаФормата = "";
	Для Каждого Параметр Из СписокПараметров Цикл
		СтрокаФормата = СтрокаФормата + Параметр.Ключ + " = " + Параметр.Значение + ";";
	КонецЦикла;
	Возврат СтрокаФормата;
	
КонецФункции

Функция ПолучитьЭкземплярОтчета(Организация, ПериодОтчета, Сценарий, ВидОтчета,
	ОсновнаяВалюта = Неопределено, ПроверятьНаличие = Истина, СоздаватьНовые = Истина, Комментарий = "", Проект = Неопределено, ПроверятьЗаполненностьВИБ = Истина, Аналитики = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ДанныеПериода=ПолучитьДанныеПериода(Сценарий,ПериодОтчета,Организация); 
	
	Если НЕ ЗначениеЗаполнено(ДанныеПериода.УправлениеПериодом) Тогда
		
		СтрокаШаблона = Нстр("ru = 'Формируемый отчет для вида отчета: %1, 
		|Организация: %2,
		|Период: %3,
		|Сценарий: %4, 
		|не может быть записан. Не удалось определить период подготовки отчетности.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, Организация, ПериодОтчета, Сценарий), Отказ);
		КонецЕсли;
		
		Отказ = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ПроверятьНаличие Тогда
		
		СуществующийЭкземпляр = ПолучитьСуществующийЭкземплярОтчета(ВидОтчета, Организация, ПериодОтчета, Сценарий, ДанныеПериода.УправлениеПериодом, Проект, Аналитики,ДанныеПериода.РежимМногопериодныхУОП);
		
		Если НЕ СуществующийЭкземпляр = Неопределено Тогда			
			Возврат СуществующийЭкземпляр;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СоздаватьНовые Тогда
		Возврат Документы.НастраиваемыйОтчет.ПустаяСсылка();
	КонецЕсли;
					
	Если Не ЗначениеЗаполнено(ОсновнаяВалюта) Тогда	
				
		ДанныеПоВалютам=УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ДанныеПериода.УправлениеПериодом.ВерсияОрганизационнойСтруктуры, ВидОтчета, Организация);
		
	КонецЕсли;
	
	Структура = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета
				, Сценарий
				, Организация
				, ПериодОтчета);
	
	ОтчетОбъект = Документы.НастраиваемыйОтчет.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ОтчетОбъект, Структура);
	
	Если НЕ ЗначениеЗаполнено(ОтчетОбъект.ПравилоОбработки) Тогда
		
		СтрокаШаблона = Нстр("ru = 'Формируемый отчет для вида отчета: %1, 
		|Организация: %2,
		|Период: %3,
		|Сценарий: %4, 
		|не может быть записан. Не установлено правило обработки по умолчанию.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, Организация, ПериодОтчета, Сценарий), Отказ);
		КонецЕсли;
		
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ТипБдПравила = ОтчетОбъект.ПравилоОбработки.ТипБД;
	Если ПроверятьЗаполненностьВИБ
		И НЕ (ТипБдПравила = Справочники.ТипыБазДанных.ПустаяСсылка() 
			ИЛИ ТипБдПравила = Справочники.ТипыБазДанных.ТекущаяИБ) Тогда
		
		Структура.Свойство("ВИБ", ОтчетОбъект.ИспользуемаяИБ);
		
		Если НЕ ЗначениеЗаполнено(ОтчетОбъект.ИспользуемаяИБ) Тогда
			Если ЗначениеЗаполнено(ТипБдПравила.ВИБПоУмолчанию) Тогда
				// Когда ВИБ не задана, попытаемся получить её из правила обработки.
				ОтчетОбъект.ИспользуемаяИБ = ТипБдПравила.ВИБПоУмолчанию;
			Иначе
				
				СтрокаШаблона = Нстр("ru = 'Формируемый отчет для вида отчета: %1, 
				|Организация: %2,
				|Период: %3,
				|Сценарий: %4, 
				|не может быть записан. Не установлена используемая внешняя информационная база по умолчанию.'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда			
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, Организация, ПериодОтчета, Сценарий), Отказ);
				КонецЕсли;
				
				Отказ = Истина;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Структура.Свойство("БланкОтчета", ОтчетОбъект.ШаблонОтчета);
		
	ОтчетОбъект.Дата = ТекущаяДата();
	ОтчетОбъект.УстановитьНовыйНомер();
	ОтчетОбъект.Сценарий         = Сценарий;
	ОтчетОбъект.ПериодОтчета     = ПериодОтчета;
	ОтчетОбъект.ВидОтчета        = ВидОтчета;
	ОтчетОбъект.Организация      = Организация;
	ОтчетОбъект.Проект			 = Проект;
	
	ЗаполнитьЗначенияСвойств(ОтчетОбъект,ДанныеПериода);
	
	Если ДанныеПериода.РежимМногопериодныхУОП Тогда
		ОтчетОбъект.ПериодОтчета     	= ДанныеПериода.ПериодСценария;
	Иначе	
		ОтчетОбъект.ПериодОкончания     = ПериодОтчета;
	КонецЕсли;	
	
	
	Если ЗначениеЗаполнено(Аналитики) Тогда
		ЗаполнитьЗначенияСвойств(ОтчетОбъект, Аналитики);
	КонецЕсли;
	
	ОтчетОбъект.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
		
		ОтчетОбъект.ОсновнаяВалюта   = ОсновнаяВалюта;
		
	Иначе
		
		ОтчетОбъект.ОсновнаяВалюта   = ДанныеПоВалютам.ОсновнаяВалюта;
		
		Для Каждого Элемент ИЗ ДанныеПоВалютам.ДополнительныеВАлюты Цикл
			
			НоваяСтрока=ОтчетОбъект.ДополнительныеВалюты.Добавить();
			НоваяСтрока.Валюта=Элемент.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтчетОбъект.Состояние        = Перечисления.СостоянияОтчетов.Запланирован;
		
	Попытка
		
		ОтчетОбъект.Записать();
		Возврат ОтчетОбъект.Ссылка;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // СоздатьЭкземплярОтчета()

Функция СуществуетЭкземплярОтчета(Отбор = Неопределено, ОтборНе = Неопределено) Экспорт

	Построитель = Новый ПостроительЗапроса(	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Существует
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.НастраиваемыйОтчет {(Объект).* КАК НастраиваемыйОтчет}) КАК РегистрСостоянийОбъектов
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект}
	|{ГДЕ
	|	(ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, НЕОПРЕДЕЛЕНО)).* КАК Состояние,
	|	НастраиваемыйОтчет.Ссылка КАК НастраиваемыйОтчет}");
	
	ТипМассив = Тип("Массив");
	
	Если Отбор <> Неопределено Тогда
		
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			Если ЭлементОтбора.Ключ = "Состояние" Тогда		
				ПутьКДанным = ЭлементОтбора.Ключ;			
			Иначе
				ПутьКДанным = "НастраиваемыйОтчет." + ЭлементОтбора.Ключ;		
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора.Значение) = ТипМассив Тогда
				ЭлементОтбора = Построитель.Отбор.Добавить(ПутьКДанным);
				ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
				ЭлементОтбора.Установить(ЭлементОтбора.Значение); 
			Иначе
				Построитель.Отбор.Добавить(ПутьКДанным).Установить(ЭлементОтбора.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не Построитель.ПолучитьЗапрос().Выполнить().Пустой();	

КонецФункции

Функция СвернутьВерсии(ВидОтчета) Экспорт
	
	Попытка
		
		ПересчетПоказателейУХ.СверутьВерсииПоРеквизитам(,ВидОтчета,Новый Структура);
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции // СвернутьВерсии() 

#Область ИмпортФайлов

Функция ПолучитьТаблицуИмпортируемыхФайлов(Параметры=Неопределено, НастройкиИмпорта=Неопределено,МассивФайлов=Неопределено) Экспорт
		
	ТаблицаФайлов = Новый ТаблицаЗначений;
	
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла"       , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаФайлов.Колонки.Добавить("ХранимыйФайл"   , Новый ОписаниеТипов("СправочникСсылка.ХранимыеФайлыОрганизаций"));
	ТаблицаФайлов.Колонки.Добавить("Организация"    , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФайлов.Колонки.Добавить("Проект"    		, Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТаблицаФайлов.Колонки.Добавить("Сценарий"       , Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ТаблицаФайлов.Колонки.Добавить("ПериодСценария" , Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	ТаблицаФайлов.Колонки.Добавить("ВидОтчета"      , Новый ОписаниеТипов("СправочникСсылка.ВидыОтчетов"));
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТаблицаФайлов.Колонки.Добавить("Аналитика"+Индекс, Новый ОписаниеТипов("СправочникСсылка.Организации, СправочникСсылка.ПроизвольныйКлассификаторУХ"));
		
	КонецЦикла;
	
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмяФайла" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаФайлов.Колонки.Добавить("ДатаИзмененияФайла"  , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаФайлов.Колонки.Добавить("РасширениеФайла" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаФайлов.Колонки.Добавить("ПометкаУдаления" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмяФайлаБезРасширения" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаФайлов.Колонки.Добавить("Загружать" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Если МассивФайлов=Неопределено Тогда
		
		мНачальныйКаталог = НастройкиИмпорта.НачалоИмени;
		МассивФайлов = ПолучитьПереченьИмпортируемыхФайлов(Параметры, НастройкиИмпорта);
		
	КонецЕсли;
	
	Для каждого Файл Из МассивФайлов Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева = ТаблицаФайлов.Добавить();
		СтрокаДерева.ИмяФайла = Файл.Имя;
		СтрокаДерева.ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаДерева.ПолноеИмяФайлаБезРасширения = Файл.Путь + Файл.ИмяБезРасширения;
		СтрокаДерева.РасширениеФайла = СтрЗаменить(Файл.Расширение, ".", "");
		
		Если НастройкиИмпорта=Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Параметры);
			
		Иначе
			
			ОпределитьРеквизитыФайла(СтрокаДерева, Параметры, НастройкиИмпорта);
			
		КонецЕсли;
		
		СтрокаДерева.ДатаИзмененияФайла = Файл.ПолучитьВремяИзменения();
		
		Запрос = Новый Запрос;
				
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ХранимыеФайлы.Ссылка,
		|	ЕСТЬNULL(ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ДатаМодификацииУниверсальная, НЕОПРЕДЕЛЕНО) КАК ДатаИзмененияФайла
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХранимыеФайлыОрганизаций.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ХранимыеФайлыОрганизаций КАК ХранимыеФайлыОрганизаций
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
		|			ПО ХранимыеФайлыОрганизаций.Наименование = ИменаФайловИКаталогов.Имя
		|				И (ИменаФайловИКаталогов.Объект = &ВидОтчета)
		|	ГДЕ
		|		ХранимыеФайлыОрганизаций.Владелец = &Организация
		|		И ХранимыеФайлыОрганизаций.Сценарий = &Сценарий
		|		И ХранимыеФайлыОрганизаций.ПериодСценария = &ПериодСценария
		|		И ХранимыеФайлыОрганизаций.Наименование = &Наименование) КАК ХранимыеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы КАК ХранимыеФайлыОрганизацийПрисоединенныеФайлы
		|		ПО ХранимыеФайлы.Ссылка = ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзмененияФайла УБЫВ";
		
		Запрос.УстановитьПараметр("Организация",   СтрокаДерева.Организация);
		Запрос.УстановитьПараметр("Сценарий",      СтрокаДерева.Сценарий);
		Запрос.УстановитьПараметр("ПериодСценария",СтрокаДерева.ПериодСценария);
		Запрос.УстановитьПараметр("ВидОтчета",     СтрокаДерева.ВидОтчета);
		
		Запрос.УстановитьПараметр("Наименование", СтрокаДерева.ИмяФайла);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаДерева.ХранимыйФайл = Выборка.Ссылка;
			ДатаИзмененияХранимогоФайла = ?(Выборка.ДатаИзмененияФайла=Неопределено,'00010101',Выборка.ДатаИзмененияФайла);
		Иначе
			СтрокаДерева.ХранимыйФайл = Неопределено;
			ДатаИзмененияХранимогоФайла = '00010101';
		КонецЕсли;
		
		Если СтрокаДерева.ДатаИзмененияФайла > ДатаИзмененияХранимогоФайла Тогда
			
			Если  ЗначениеЗаполнено(СтрокаДерева.Организация)
				и ЗначениеЗаполнено(СтрокаДерева.Сценарий)
				и ЗначениеЗаполнено(СтрокаДерева.ПериодСценария)
				и ЗначениеЗаполнено(СтрокаДерева.ВидОтчета) Тогда
				
				ЭтоСводныйОтчет = Истина;
				ЭтоОтчетПоАналитике = Ложь;
				Для к = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					
					ЭтоСводныйОтчет = ЭтоСводныйОтчет и НЕ ЗначениеЗаполнено(СтрокаДерева["Аналитика" + к]);
					
					ЭтоОтчетПоАналитике = ЭтоОтчетПоАналитике ИЛИ 
					(ЗначениеЗаполнено(СтрокаДерева.ВидОтчета["ВидАналитики" + к]) = ЗначениеЗаполнено(СтрокаДерева["Аналитика" + к]))
					
				КонецЦикла;
				
				Если ЭтоСводныйОтчет или ЭтоОтчетПоАналитике Тогда
						СтрокаДерева.Загружать = СравнитьРеквизиты(СтрокаДерева, Параметры);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	НайденныеСтроки = ТаблицаФайлов.НайтиСтроки(Новый Структура("Загружать", Истина));
	Для каждого СтрокаДерева Из НайденныеСтроки Цикл
		
		ФайлНаДиске = Новый Файл(СтрокаДерева.ПолноеИмяФайла);
		Если Не ФайлНаДиске.Существует() Тогда
			
			СтрокаШаблона = Нстр("ru = 'Файл отсутствует: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда			
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаДерева.ПолноеИмяФайла));
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		СтрокаШаблона = Нстр("ru = 'Версия загружена пользователем: %1 из: %2'");
		
		КомментарийКВерсии = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			КомментарийКВерсии = СтрШаблон(СтрокаШаблона, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"), СтрокаДерева.ПолноеИмяФайла);	
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ХранимыйФайл) Тогда
			
			ОбъектХранимыйФайл = Справочники.ХранимыеФайлыОрганизаций.СоздатьЭлемент();
			ОбъектХранимыйФайл.Владелец                 = СтрокаДерева.Организация;
			ОбъектХранимыйФайл.Сценарий                 = СтрокаДерева.Сценарий;
			ОбъектХранимыйФайл.ПериодСценария           = СтрокаДерева.ПериодСценария;
						
			ОбъектХранимыйФайл.Наименование             = СтрокаДерева.ИмяФайла;
			ОбъектХранимыйФайл.ИсходныйФайлПервойВерсии = СтрокаДерева.ПолноеИмяФайла;
			ОбъектХранимыйФайл.КомментарийКПервойВерсии = КомментарийКВерсии;
			
			Попытка
				ОбъектХранимыйФайл.Записать();
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаДерева.ХранимыйФайл = ОбъектХранимыйФайл.Ссылка;
			
		ИначеЕсли ХранимыеФайлыУХ.ПоместитьХранимыйФайл(СтрокаДерева.ХранимыйФайл, СтрокаДерева.ПолноеИмяФайла, КомментарийКВерсии) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева.Загружать = Ложь;
		
	КонецЦикла;
	
	Возврат ТаблицаФайлов;
	
КонецФункции

Функция СравнитьРеквизиты(СтрокаИсточник, СтрокаСравнение)
	
	Если СтрокаИсточник.ВидОтчета   = СтрокаСравнение.ВидОтчета
	   И СтрокаИсточник.Организация = СтрокаСравнение.Организация
	   И СтрокаИсточник.ПериодСценария = СтрокаСравнение.ПериодСценария
	   И СтрокаИсточник.Сценарий       = СтрокаСравнение.Сценарий Тогда
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ИмяАналитики = "Аналитика" + Инд;
			Если (ЗначениеЗаполнено(СтрокаИсточник[ИмяАналитики]) ИЛИ ЗначениеЗаполнено(СтрокаСравнение[ИмяАналитики]))
			   И (СтрокаИсточник[ИмяАналитики] <> СтрокаСравнение[ИмяАналитики]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПереченьИмпортируемыхФайлов(Параметры, ВИБ) Экспорт
	
	МассивФайлов = Новый Массив;
	
	ТипБД = ВИБ.ТипБД;
	Если ТипБД = Справочники.ТипыБазДанных.ОбменТаблДок Тогда
		
		Расширение = ?(ВИБ.ТипТабличногоДокумента = Перечисления.ТипыВнешнихТабличныхДокументов.ФайлXLS, "*.xl*", ".mxl");
				
	ИначеЕсли ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
		
		Если ВИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS Тогда
			
			Расширение = "*.xl*";
			
		ИначеЕсли ВИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.MSAccess Тогда
			
			Расширение = "*.mdb";
			
		КонецЕсли;
			
	Иначе
		
		Расширение = "*.txt";
		
	КонецЕсли;
	
	РазмерМассива=?(ЗначениеЗаполнено(Параметры.Проект),5,4);
	
	МассивДанных = Новый Массив(РазмерМассива);
	МассивРазделителей=Новый Массив(РазмерМассива);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИменаФайловИКаталогов.Имя КАК Имя,
	|	ВИБ.НомерСтроки КАК НомерСтроки,
	|	ВИБ.НачалоЭлемента КАК НачалоЭлемента
	|ИЗ
	|	РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеИнформационныеБазы.СтруктураИмени КАК ВИБ
	|		ПО ИменаФайловИКаталогов.ТипОбъекта = ВИБ.Элемент
	|ГДЕ
	|	ИменаФайловИКаталогов.Объект = &Объект
	|	И ИменаФайловИКаталогов.ТипОбъекта = &ТипОбъекта
	|	И ВИБ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"    , ВИБ);	
	
	Запрос.УстановитьПараметр("Объект", Параметры.Организация);
	Запрос.УстановитьПараметр("ТипОбъекта",Перечисления.ТипыОбъектов.Организация);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МассивДанных[Число(Выборка.НомерСтроки)-1] 			= Выборка.Имя;
		МассивРазделителей[Число(Выборка.НомерСтроки)-1] 	= Выборка.НачалоЭлемента;
	КонецЕсли;
	
	Если РазмерМассива=5 Тогда
		
		Запрос.УстановитьПараметр("Объект", Параметры.Проект);
		Запрос.УстановитьПараметр("ТипОбъекта",Перечисления.ТипыОбъектов.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МассивДанных[Число(Выборка.НомерСтроки)-1] 			= Выборка.Имя;
			МассивРазделителей[Число(Выборка.НомерСтроки)-1] 	= Выборка.НачалоЭлемента;
		КонецЕсли;	
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект", Параметры.Сценарий);
	Запрос.УстановитьПараметр("ТипОбъекта",Перечисления.ТипыОбъектов.Сценарий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МассивДанных[Число(Выборка.НомерСтроки)-1] 			= Выборка.Имя;
		МассивРазделителей[Число(Выборка.НомерСтроки)-1] 	= Выборка.НачалоЭлемента;
	КонецЕсли;

	Запрос.УстановитьПараметр("Объект", Параметры.ПериодСценария);
	Запрос.УстановитьПараметр("ТипОбъекта",Перечисления.ТипыОбъектов.ПериодСценария);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МассивДанных[Число(Выборка.НомерСтроки)-1] 			= Выборка.Имя;
		МассивРазделителей[Число(Выборка.НомерСтроки)-1] 	= Выборка.НачалоЭлемента;
	КонецЕсли;

	Запрос.УстановитьПараметр("Объект", Параметры.ВидОтчета);
	Запрос.УстановитьПараметр("ТипОбъекта",Перечисления.ТипыОбъектов.ВидОтчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МассивДанных[Число(Выборка.НомерСтроки)-1] 		= Выборка.Имя;
		МассивРазделителей[Число(Выборка.НомерСтроки)-1]= Выборка.НачалоЭлемента;
	КонецЕсли;
	
	КаталогФайла = ВИБ.НачалоИмени;
	
	ИмяФайла="";
	ПутьКФайлу="";
	
	ПоследнийКаталог=0;
	
	Для к = 0 По (РазмерМассива-1) Цикл
		
		Если МассивРазделителей[к]="\" Тогда
			
			ПоследнийКаталог=СтрДлина(ПутьКФайлу+1);
			
		КонецЕсли;
			
		Если к=0 И МассивРазделителей[к]="+" Тогда
			
			ПутьКФайлу=ПутьКФайлу+МассивДанных[к];
						
		Иначе
			
			ПутьКФайлу=ПутьКФайлу+МассивРазделителей[к]+МассивДанных[к];
			
		КонецЕсли;
			
	КонецЦикла;
	
	ДополнительныйПуть=Лев(ПутьКФайлу,ПоследнийКаталог);
	МаскаИмени=Сред(ПутьКФайлу,?(ПоследнийКаталог=0,2,ПоследнийКаталог+1));
		
	Файлы = НайтиФайлы(КаталогФайла+ДополнительныйПуть,МаскаИмени+Расширение);
	
	Для Каждого Файл из Файлы Цикл
		МассивФайлов.Добавить(Файл);
	КонецЦикла;
		
	Возврат МассивФайлов;
	
КонецФункции

// Процедура раскладывает строку полного имени файла на составляющие
// и в соответствии с настройкой импорта заполняет реквизиты
// 
Процедура ОпределитьРеквизитыФайла(СтрокаДерева, Параметры, НастройкиИмпорта)
	
	мНачальныйКаталог = НастройкиИмпорта.НачалоИмени;
	НачалоИмени = ?(Прав(мНачальныйКаталог, 1) = "\", мНачальныйКаталог, мНачальныйКаталог + "\");
	
	ДлинаНачалаИмпорта = СтрДлина(НачалоИмени);
	Если Не Лев(СтрокаДерева.ПолноеИмяФайла, ДлинаНачалаИмпорта) = НачалоИмени Тогда
		//Не тот каталог начала имени
		Возврат;
	КонецЕсли;
	
	ИмяФайла = Сред(СтрокаДерева.ПолноеИмяФайлаБезРасширения, ДлинаНачалаИмпорта + 1);
	
	МенеджерЗаписи = РегистрыСведений.ИменаФайловИКаталогов.СоздатьМенеджерЗаписи();
	
	Для каждого СтруктураИмени Из НастройкиИмпорта.СтруктураИмени Цикл
		Поз1 = СтрНайти(ИмяФайла, "+");
		Поз2 = СтрНайти(ИмяФайла, "\");
		Поз = ?(Поз1 = 0 или Поз2 = 0, Макс(Поз1, Поз2), Мин(Поз1, Поз2));
		
		ЧастьИмени = ?(Поз = 0, ИмяФайла,Лев(ИмяФайла, Поз - 1));
		Если Прав(ЧастьИмени, СтрДлина(СтруктураИмени.ОкончаниеЭлемента)) = СтруктураИмени.ОкончаниеЭлемента Тогда
			ЧастьИмени = Лев(ЧастьИмени, СтрДлина(ЧастьИмени) - СтрДлина(СтруктураИмени.ОкончаниеЭлемента));
		Иначе
			//Окончание имени не верно
			Прервать;
		КонецЕсли; 
		
		МенеджерЗаписи.Имя = ЧастьИмени;
		ТипОбъекта = СтруктураИмени.Элемент;
		ИмяТипаОбъекта = ОбщегоНазначенияУХ.ИмяЗначенияПеречисления(ТипОбъекта);
		
		Если Лев(ИмяТипаОбъекта, 9) = "Аналитика" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДерева.ВидОтчета) Тогда
				//Значит аналитика до вида отчета. так быть не должно
				Продолжить;
			КонецЕсли;
			ТипОбъекта = СтрокаДерева.ВидОтчета["ВидАналитики" + Прав(ИмяТипаОбъекта, 1)];
		Иначе
			ТипОбъекта = СтруктураИмени.Элемент;
		КонецЕсли;
		
		МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			СтрокаДерева[ИмяТипаОбъекта] = МенеджерЗаписи.Объект;
		КонецЕсли;
		
		Если Поз = 0 Тогда
			Прервать;
		КонецЕсли;
		ИмяФайла = Сред(ИмяФайла, Поз + 1)
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С РАСШИФРОВКОЙ.
//

Функция ПодготовитьСписокДокументовДляРасшифровки(АдресДокументаОбъекта, Знач СтрОперанд, Знач СтруктураАналитикОтбора = Неопределено, ФиксированныйМассивПоказателей = Неопределено, УникальныйИдентификатор) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресДокументаОбъекта) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Ошибка при работе с экземпляром отчета. Попробуйте открыть экземпляр отчета снова'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументОбъект = ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(АдресДокументаОбъекта);
	
	ПостроительРасшифровка=Новый ПостроительЗапроса;
	ПостроительРасшифровка.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;	
	
	ТекСтруктураОтбораРасшифровок = Новый Структура;
	
	Если ДокументОбъект.ДанныеОбъекта=Неопределено Тогда
		ДокументОбъект.ЗаполнитьКонтекстЭкземпляраОтчета();
	КонецЕсли;
			
	ТабЗапросы=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(,,,,СтрОперанд).мТабПоказателиЗапросы;
	
	Если ТабЗапросы.Количество()=0 Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось определить данные операнда для расчета.'"),,,СтатусСообщения.Внимание);
		ДокументОбъект.ДанныеОбъекта=Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	СтрОперанд=ТабЗапросы[0];
				
	ТабСписокОтчетов=УправлениеОтчетамиУХ.ПолучитьТаблицуОтчетовРасшифровки(ДокументОБъект.ДанныеОбъекта,СтрОперанд);

	КопияСписок=ТабСписокОтчетов.СкопироватьКолонки();
	
	МассивПоказателей=Новый Массив;
				
	ДанныеОперанда=СтрОперанд;
	МассивПоказателей.Добавить(СокрЛП(ДанныеОперанда.ПоказательОтбор.Код));
		
	Показатель = ДанныеОперанда.ПоказательОтбор;
	ГруппаРаскрытия = Показатель.ГруппаРаскрытия;
	
	РаскрыватьПоАналитике = Ложь; // Признак необходимости раскрытия по аналитикам.
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
		Если ЗначениеЗаполнено(ГруппаРаскрытия["ВидАналитики" + Инд]) Тогда
			ТекАналитика = СтрОперанд.ПравилаВычисленияПараметров.Найти("Аналитика" + Инд, "ИмяПараметра");
				
			Если ТекАналитика <> Неопределено
			   И ТекАналитика.СпособВычисленияПараметра <> Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
				Отбор = ПостроительРасшифровка.Отбор.Найти("Аналитика" + Инд);
				Если Отбор <> Неопределено Тогда
					ТекСтруктураОтбораРасшифровок.Вставить("Аналитика" + Инд, Новый Структура("ВидСравнения, Значение", Отбор.ВидСравнения, Отбор.Значение));
					
					Если Не РаскрыватьПоАналитике Тогда
						РаскрыватьПоАналитике = Истина; // Установим признак раскрытия по аналитикам.
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураАналитикОтбора <> Неопределено Тогда
		
		РаскрыватьПоАналитике = Истина;
		
		Для Каждого ТекАналитика Из СтруктураАналитикОтбора Цикл
			
			Если ТекСтруктураОтбораРасшифровок.Свойство(ТекАналитика.Ключ) Тогда
				ТекСтруктураОтбораРасшифровок[ТекАналитика.Ключ] = Новый Структура("ВидСравнения, Значение", ВидСравнения.Равно
																										   , ТекАналитика.Значение);
			Иначе
				ТекСтруктураОтбораРасшифровок.Вставить(ТекАналитика.Ключ, Новый Структура("ВидСравнения, Значение", ВидСравнения.Равно
																												  , ТекАналитика.Значение));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабСписокОтчетов.Свернуть("Регистратор");
	
	СоответствиеОтчетов = Новый Соответствие;
	
	Для Каждого СписокОтчетов ИЗ ТабСписокОтчетов Цикл
		
		СоответствиеОтчетов.Вставить(СписокОтчетов.Регистратор, ТекСтруктураОтбораРасшифровок);
		
	КонецЦикла;
	
	АдресДокументаОбъекта = ПоместитьВоВременноеХранилище(ДокументОбъект.РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(), УникальныйИдентификатор);
	ФиксированныйМассивПоказателей = Новый ФиксированныйМассив(МассивПоказателей);
	
	ДокументОбъект.ДанныеОбъекта=Неопределено;
	Возврат Новый ФиксированноеСоответствие(СоответствиеОтчетов);
	
КонецФункции // ПодготовитьСписокДокументовДляРасшифровки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ОТЧЕТА В HTML ФОРМАТ
//

Функция СохранитьHTMLПредставлениеОтчета(ЭкземплярОтчета, ПутьДляСохранения, ВыводитьРаскрытие, ВыводитьОсновнуюЧасть) Экспорт
	
	ТабличныйДокумент = УправлениеОтчетамиУХ.ПолучитьЭкземплярОтчета(ЭкземплярОтчета);
	Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Попытка
			ТабличныйДокумент.Записать(ПутьДляСохранения, ТипФайлаТабличногоДокумента.HTML);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПРЕДЕЛЕНИЯ НАСТРОЕК ПО УМОЛЧАНИЮ ОТЧЕТА.
//

Функция ПолучитьСуществующийЭкземплярОтчета(ВидОтчета, Организация, ПериодОтчета, Сценарий, УправлениеПериодом, Проект = Неопределено, Аналитики = Неопределено,РежимМногопериодныхУОП = Ложь) Экспорт
	
	
	Если  РежимМногопериодныхУОП Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НастраиваемыйОтчет.Организация = &Организация
		|	И НастраиваемыйОтчет.Сценарий = &Сценарий
		|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
		|	И НастраиваемыйОтчет.УправлениеПериодом = &УправлениеПериодом";

		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НастраиваемыйОтчет.Организация = &Организация
		|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
		|	И НастраиваемыйОтчет.Сценарий = &Сценарий
		|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
		|	И НастраиваемыйОтчет.УправлениеПериодом = &УправлениеПериодом";
		
		Запрос.УстановитьПараметр("ПериодОтчета", 		ПериодОтчета);
		
	КонецЕсли;	
	
		
	Если НЕ Проект=Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И НастраиваемыйОтчет.Проект = &Проект";
		
		Запрос.УстановитьПараметр("Проект",Проект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитики) Тогда		
		Для каждого ТекущаяАналитика Из Аналитики Цикл
						
			Запрос.Текст = Запрос.Текст + Символы.ПС + СтрШаблон(" И НастраиваемыйОтчет.%1 = &%2", ТекущаяАналитика.Ключ, ТекущаяАналитика.Ключ);			
			Запрос.УстановитьПараметр(ТекущаяАналитика.Ключ, ТекущаяАналитика.Значение);
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Сценарий", 			Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета", 			ВидОтчета);
	Запрос.УстановитьПараметр("УправлениеПериодом",	УправлениеПериодом);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
	
КонецФункции // ПолучитьСуществующийЭкземплярОтчета() 

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если НЕ ВидФормы = "ФормаОбъекта"  Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	                                                                                              
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда	
			
		Если ЗначениеЗаполнено(Параметры.Ключ.УправлениеПериодом) Тогда
			
			Если Параметры.Ключ.УправлениеПериодом.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП Тогда
				 ВыбраннаяФорма = "ФормаАналитическойТаблицы";
			Иначе	
				 ВыбраннаяФорма = "ФормаДокументаУправляемая";
			КонецЕсли;	
		Иначе	
			ВыбраннаяФорма = "ФормаДокументаУправляемая";
		КонецЕсли;	
			
	ИначеЕсли  Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда	
		Если Параметры.ЗначениеКопирования.ШаблонОтчета.РежимБланка = 2  ИЛИ Параметры.ЗначениеКопирования.ШаблонОтчета.РежимБланка = 1 Тогда
			ВыбраннаяФорма = "ФормаАналитическойТаблицы";	
		Иначе
			ВыбраннаяФорма = "ФормаДокументаУправляемая";
		КонецЕсли;
	Иначе	
		ВыбраннаяФорма = "КлючевыеРеквизитыУправляемая";	
	КонецЕсли;

КонецПроцедуры

Функция РежимМногопериодныхУОП(ОбъектРасчета) Экспорт
	
	Возврат ЗначениеЗаполнено(ОбъектРасчета.УправлениеПериодом) И ОбъектРасчета.УправлениеПериодом.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП;
	
КонецФункции // РежимМногопериодныхУОП()


Функция ПолучитьДанныеПериода(Сценарий,ПериодОтчета,Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодом,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ПериодСценарияОкончание КАК ПериодОкончания,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ПериодСценария КАК ПериодСценария,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП КАК РежимМногопериодныхУОП
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.Сценарии = &Сценарии
	               |	И СтатусыПериодовСценариев.Периоды = &Периоды
	               |	И СтатусыПериодовСценариев.Организации = &Организации";
	
	Запрос.УстановитьПараметр("Сценарии",Сценарий);
	Запрос.УстановитьПараметр("Периоды",ПериодОтчета);
	Запрос.УстановитьПараметр("Организации",Организация);
	
	СтруктураПериода=Новый Структура("УправлениеПериодом,ПериодОкончания,ПериодСценария,РежимМногопериодныхУОП"
	,Документы.УправлениеПериодомСценария.ПустаяСсылка(),Справочники.Периоды.ПустаяСсылка(),Справочники.Периоды.ПустаяСсылка(),Ложь);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПериода,Результат);
		
	КонецЕсли;	 
	
	Возврат СтруктураПериода;
	
КонецФункции

#Область Печать
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры
#КонецОбласти
