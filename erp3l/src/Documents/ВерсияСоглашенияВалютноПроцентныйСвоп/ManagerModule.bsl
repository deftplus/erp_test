Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОбработкаПолученияПредставленияВерсияСоглашения(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОбработкаПолученияПолейПредставленияВерсияСоглашения(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ПолучитьФактическиеДанные(Договор, ОписаниеГрафика, ОперацииГрафика) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ФактическиеДанныеПоСекциямГрафика(Договор, ОписаниеГрафика, ОперацииГрафика);	
КонецФункции

Функция ОписаниеГрафика(Знач ВидДоговораУХ = Неопределено) Экспорт
	
	Если ВидДоговораУХ = Неопределено Тогда
		ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ВалютноПроцентныйСвоп;
	КонецЕсли;
	
	Результат = Новый Структура;
	// 1. Номинальная сумма организации
	СекцияГрафика = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияГрафика.Имя = "НоминальнаяСуммаОрганизация";
	СекцияГрафика.Представление = Нстр("ru = 'Номинальная сумма организации'");
	
	СекцияГрафика.КолонкаПриход = "НоминальнаяСуммаОрганизацияПлатеж";
	СекцияГрафика.КолонкаПриходПредставление = Нстр("ru = 'Платеж'");
	СекцияГрафика.КолонкаПриходДДС = Истина;
	
	СекцияГрафика.КолонкаРасход = "НоминальнаяСуммаОрганизацияВозврат";
	СекцияГрафика.КолонкаРасходПредставление = Нстр("ru = 'Возврат'");
	СекцияГрафика.КолонкаРасходДДС = Истина;	
	
	СекцияГрафика.КолонкаОстаток = "НоминальнаяСуммаОрганизацияОстаток";
	СекцияГрафика.КолонкаОстатокПредставление = Нстр("ru = 'Остаток'");
	СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
	
	Результат.Вставить(СекцияГрафика.Имя, СекцияГрафика);
	
	// 2. Номинальная сумма контрагента
	СекцияГрафика = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияГрафика.Имя = "НоминальнаяСуммаКонтрагент";
	СекцияГрафика.Представление = Нстр("ru = 'Номинальная сумма контрагента'");
	
	СекцияГрафика.КолонкаПриход = "НоминальнаяСуммаКонтрагентПлатеж";
	СекцияГрафика.КолонкаПриходПредставление = Нстр("ru = 'Платеж'");
	СекцияГрафика.КолонкаПриходДДС = Истина;
	
	СекцияГрафика.КолонкаРасход = "НоминальнаяСуммаКонтрагентВозврат";
	СекцияГрафика.КолонкаРасходПредставление = Нстр("ru = 'Возврат'");
	СекцияГрафика.КолонкаРасходДДС = Истина;	
	
	СекцияГрафика.КолонкаОстаток = "НоминальнаяСуммаКонтрагентОстаток";
	СекцияГрафика.КолонкаОстатокПредставление = Нстр("ru = 'Остаток'");
	
	СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолгКонтрагента;
	
	Результат.Вставить(СекцияГрафика.Имя, СекцияГрафика);
	
	// 3. Проценты организации 
	СекцияГрафика = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияГрафика.Имя = "ПроцентыОрганизация";
	СекцияГрафика.Представление = Нстр("ru = 'Проценты организации'");
	
	СекцияГрафика.КолонкаПриход = "ПроцентыОрганизацияНачислено";
	СекцияГрафика.КолонкаПриходПредставление = Нстр("ru = 'Начислено'");
	
	СекцияГрафика.КолонкаРасход = "ПроцентыОрганизацияУплачено";
	СекцияГрафика.КолонкаРасходПредставление = Нстр("ru = 'Уплачено'");
	СекцияГрафика.КолонкаРасходДДС = Истина;
	
	СекцияГрафика.КолонкаОстаток = "ПроцентыОрганизацияОстаток";
	СекцияГрафика.КолонкаОстатокПредставление = Нстр("ru = 'Остаток'");
	СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Проценты;
	СекцияГрафика.ЭтоРасчетнаяСекция = Истина;
	Результат.Вставить(СекцияГрафика.Имя, СекцияГрафика);
	
	// 4. Проценты контрагента 
	СекцияГрафика = ФинансовыеИнструментыФормыКлиентСервер.ОписаниеСекцииГрафика();
	СекцияГрафика.Имя = "ПроцентыКонтрагент";
	СекцияГрафика.Представление = Нстр("ru = 'Проценты контрагента'");
	СекцияГрафика.КолонкаПриход = "ПроцентыКонтрагентНачислено";
	СекцияГрафика.КолонкаПриходПредставление = Нстр("ru = 'Начислено'");
	
	СекцияГрафика.КолонкаРасход = "ПроцентыКонтрагентУплачено";
	СекцияГрафика.КолонкаРасходПредставление = Нстр("ru = 'Уплачено'");
	СекцияГрафика.КолонкаРасходДДС = Истина;
	
	СекцияГрафика.КолонкаОстаток = "ПроцентыКонтрагентОстаток";
	СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ПроцентыКонтрагента;
	СекцияГрафика.ЭтоРасчетнаяСекция = Истина;
	Результат.Вставить(СекцияГрафика.Имя, СекцияГрафика);
	
	// Заполним операции
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьОперацииВОписанииГрафика(Результат, ВидДоговораУХ);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// реквизиты документа.
	Запрос = Новый Запрос;
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	Параметры = Запрос.Параметры;
	ВыполнятьБюджетирование = РаботаСДоговорамиКонтрагентовУХ.ВыполнятьБюджетирование(Параметры.РежимИспользованияГрафика);
	
	// Если в справочнике периоды нет требуемых элементов, то прекращаем собирать данные
	Если ВыполнятьБюджетирование Тогда
		Если НЕ КонтрольЛимитовУХ.ПодготовитьТаблицуДатИПериодов(Запрос, ДокументСсылка, ДополнительныеСвойства) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстыЗапроса = Новый СписокЗначений;
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаВерсииРасчетов(ТекстыЗапроса, ИмяТаблицыДокумента());
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаРасчетыСКонтрагентамиГрафики(ТекстыЗапроса, ИмяТаблицыДокумента());
	
	Если ВыполнятьБюджетирование Тогда
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаОперативныйПланПоБюджетам(ТекстыЗапроса, ИмяТаблицыДокумента());
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьТекстЗапросаВТ_ТаблицаПлановССуммамиЛимитирования(ТекстыЗапроса);
	КонецЕсли;	
	
	ПроведениеСерверУХ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	Если ВыполнятьБюджетирование Тогда
		РаботаСДоговорамиКонтрагентовУХ.ПодготовитьТаблицуЛимитовПоБюджетам(Запрос, ДополнительныеСвойства.ТаблицыДляДвижений);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьПереченьОперацийГрафиков(ОперацииГрафика, ОписаниеГрафика, ДокументОбъект) Экспорт
	
	РаботаСДоговорамиКонтрагентовУХ.ДополнитьПереченьОперацийГрафиков(ОперацииГрафика, ОписаниеГрафика, ДокументОбъект);
	
	// Заполняем валюту в зависимости от операции
	СтрокаРеквизитов = "Валюта, СчетОрганизации, СчетКонтрагента";
	ПараметрыЗаполнения = Новый Соответствие;
	
	// Организация
	СтруктураЗаполнения = Новый Структура(СтрокаРеквизитов, ДокументОбъект.ВалютаОрганизации, ДокументОбъект.СчетОрганизацииВВалютеОрганизации, ДокументОбъект.СчетКонтрагентаВВалютеОрганизации);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_НоминальнаяСуммаОрганизацияПлатеж,  СтруктураЗаполнения);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_НоминальнаяСуммаОрганизацияВозврат, СтруктураЗаполнения);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_ПроцентыОрганизацияНачислено, 		 СтруктураЗаполнения);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_ПроцентыОрганизацияУплачено, 		 СтруктураЗаполнения);
		
	// Контрагент	
	Если ДокументОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ВалютноПроцентныйСвоп Тогда
		СтруктураЗаполнения = Новый Структура(СтрокаРеквизитов, ДокументОбъект.ВалютаКонтрагента, ДокументОбъект.СчетОрганизацииВВалютеКонтрагента, ДокументОбъект.СчетКонтрагентаВВалютеКонтрагента);	
	КонецЕсли;	
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_НоминальнаяСуммаКонтрагентПлатеж,  СтруктураЗаполнения);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_НоминальнаяСуммаКонтрагентВозврат, СтруктураЗаполнения);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_ПроцентыКонтрагентНачислено, 		СтруктураЗаполнения);
	ПараметрыЗаполнения.Вставить(Справочники.ОперацииГрафиковДоговоров.ВалютноПроцентныйСвоп_ПроцентыКонтрагентУплачено, 		СтруктураЗаполнения);
	
	Для каждого Операция Из ОперацииГрафика Цикл
		СтруктураЗаполнения = ПараметрыЗаполнения[Операция.Ключ];
		ЗаполнитьЗначенияСвойств(Операция.Значение, СтруктураЗаполнения);
	КонецЦикла;
				
КонецПроцедуры

Функция ПолучитьПредставленияКолонок() Экспорт
	
	ПредставленияКолонок = Новый Структура;
	
	ПредставленияКолонок.Вставить("Дата",								НСтр("ru = 'Дата'"));
	ПредставленияКолонок.Вставить("ПроцентыОрганизацияНачислено",		НСтр("ru = 'Начисление процентов к уплате'"));
	ПредставленияКолонок.Вставить("ПроцентыОрганизацияУплачено",		НСтр("ru = 'Уплата процентов'"));
	ПредставленияКолонок.Вставить("ПроцентыКонтрагентНачислено",		НСтр("ru = 'Начисление процентов к получению'"));
	ПредставленияКолонок.Вставить("ПроцентыКонтрагентУплачено",			НСтр("ru = 'Получение процентов'"));
	
	Возврат ПредставленияКолонок;
	
КонецФункции

Функция ВычисляемыеРеквизитыДоговора(ВерсияСоглашения) Экспорт
	
	Результат = Новый Структура;
	
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьВычисляемыеРеквизитыДоговора(Результат, ВерсияСоглашения);
	
	Результат.Вставить("ЗапретПлатежаВПрочихВалютах", Истина);
	Результат.Вставить("Обеспеченность", Перечисления.ОбеспеченностьДоговоров.НеОбеспечен);
	Результат.Вставить("СпособФормированияПлатежей", Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей);
	Результат.Вставить("Сумма", ВерсияСоглашения.СуммаОрганизации);
	
	ДоговорыКонтрагентовВстраиваниеУХ.ЗаполнитьВычисляемыеРеквизитыДоговора(Результат, ВерсияСоглашения);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТабличныхЧастейДокумента() Экспорт
	
	ОписаниеТабличныхЧастей = РаботаСДоговорамиКонтрагентовУХ.НовыйОписаниеТабличныхЧастейДокумента();
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроцентныеСтавкиОрганизация", Истина);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроцентныеСтавкиКонтрагент", Истина);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроцентыОрганизация", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроцентыКонтрагент", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ГрафикРасчетов", Ложь);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПроизводственныеКалендари", Истина);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, "ПараметрыОпераций", Истина);
	
	Возврат ОписаниеТабличныхЧастей;
КонецФункции

Функция ИменаКлючевыхРеквизитов() Экспорт
	
	Результат = РаботаСДоговорамиКонтрагентовУХКлиентСервер.НовыйИменаКлючевыхРеквизитов();
	Результат.ДатаНачалаДействия = "ДатаНачалаДействия";
	Результат.ДатаОкончанияДействия = "ДатаОкончанияДействия";
	Результат.Сумма = "СуммаОрганизации";
	
	Возврат Результат;
	
КонецФункции

Функция ПредставленияКолонокГрафика() Экспорт
	
	ПредставленияКолонок = Новый Структура;
	
	ПредставленияКолонок.Вставить("Дата",								НСтр("ru = 'Дата'"));
	ПредставленияКолонок.Вставить("НоминальнаяСуммаОрганизацияПлатеж",	НСтр("ru = 'Уплата номинальной суммы организации'"));
	ПредставленияКолонок.Вставить("НоминальнаяСуммаОрганизацияВозврат",	НСтр("ru = 'Возврат номинальной суммы организации'"));
	ПредставленияКолонок.Вставить("НоминальнаяСуммаКонтрагентПлатеж",	НСтр("ru = 'Уплата номинальной суммы контрагента'"));
	ПредставленияКолонок.Вставить("НоминальнаяСуммаКонтрагентВозврат",	НСтр("ru = 'Возврат номинальной суммы контрагента'"));
	ПредставленияКолонок.Вставить("ПроцентыОрганизацияНачислено",		НСтр("ru = 'Начисление процентов организации'"));
	ПредставленияКолонок.Вставить("ПроцентыОрганизацияУплачено",		НСтр("ru = 'Уплата процентов организации'"));
	ПредставленияКолонок.Вставить("ПроцентыКонтрагентНачислено",		НСтр("ru = 'Начисление процентов контрагента'"));
	ПредставленияКолонок.Вставить("ПроцентыКонтрагентУплачено", 		НСтр("ru = 'Уплата процентов контрагента'"));
	
	Возврат ПредставленияКолонок;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяТаблицыДокумента()
	Возврат "Документ.ВерсияСоглашенияВалютноПроцентныйСвоп";
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрольНаличияПериодов
	
// Функция возвращает текст запроса, который формирует временную таблицу запроса ВТ_ДатыОпераций с колонками
//   Дата 		- Дата - Дата операции по документу
//	 ВидБюджета - ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета - Вид бюджета, по которому будет операция
// Текст запроса уникален для каждого вида документа
//
Функция ТексЗапроса_ДатыОперацийДокумента() экспорт
	
	Возврат РаботаСДоговорамиКонтрагентовУХ.ТекстЗапросаДатыОперацийДокумента(ИмяТаблицыДокумента());
	
КонецФункции

#КонецОбласти 

#Область ИсточникиДляКонтроляДокумента

Функция ИсточникиДокумента(Объект, ДопПараметры = неопределено) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект, ДопПараметры));
		
	//// 2. Планы по взаиморасчетам с контрагентом
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоКонтрагенту, 
	//	Источник_ВзаиморасчетыПоКонтрагенту(Объект));
		
	Возврат Источники;
	
КонецФункции

Функция Источник_БюджетныеЛимитыРезервы(Объект, ДопПараметры) Экспорт
	
	// Доп.параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 				Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 			Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 			НЕ ЗначениеЗаполнено(Объект.Ссылка));
	ДопПараметры.Вставить("ДатаКонтроляЛимита", Объект.Дата);
	
	Если Объект.РежимИспользованияГрафика = Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций Тогда
		ДанныеДляПроверки = ПланыДокумента(Объект);
	Иначе
		ДанныеДляПроверки = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	КонецЕсли;
	
	//
	ДанныеДляПроверки.Колонки.Сумма.Имя = "Заявлено";
	ДанныеДляПроверки.Колонки.Добавить("Лимит", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Зарезервировано", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Исполнено", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.ЗаполнитьЗначения(Объект.Дата, "Период");
	
	//
	Источник = Новый Структура;
	Источник.Вставить("Параметры",		ДопПараметры);
	Источник.Вставить("ПланыДокумента", ДанныеДляПроверки);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоКонтрагенту(Объект)
	
	// Если незаполнен контрагент, то контроль не выполняется
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	// Если роль определить не удалось, то контроль не выполняется
	РольКонтрагента = РольПоВидуДоговораУХ()[Объект.ВидДоговораУХ];
	Если РольКонтрагента = неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	//
	Результат = Новый Структура;
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Контрагент", Объект.Контрагент);
	Результат.Вставить("СуммаПлатежа", Объект.Сумма);
	Результат.Вставить("Валюта", Объект.ВалютаВзаиморасчетов);
	Результат.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат Результат;
	
КонецФункции

Функция РольПоВидуДоговораУХ()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем, Перечисления.РолиКонтрагентов.Покупатели);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыДоговоровКонтрагентовУХ.Импорт, Перечисления.РолиКонтрагентов.Поставщики);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВерсияСоглашенияВалютноПроцентныйСвоп") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	ПредопределенныеДанные = Новый Структура(
		"Период, Организация, Контрагент, ДоговорКонтрагента", 
		ДанныеОбъекта.Дата, ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДоговорКонтрагента
	);
	
	//
	РеквизитыСтроки = "СтатьяБюджета, Валюта, ЦФО, Проект,"+АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	Для Каждого Строка Из ДанныеОбъекта.ГрафикРасчетов Цикл
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Предназначение = ПланыВидовХарактеристик.ВидыБюджетов.Предназначение(Строка.ВидБюджета);
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, Строка.Дата);
		
		СтрокаПлана = ТаблицаПланов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, ПредопределенныеДанные);
		ЗаполнитьЗначенияСвойств(СтрокаПлана, Строка, РеквизитыСтроки);
		
		СтрокаПлана.Сумма = Строка.Сумма;
		СтрокаПлана.ПериодОтчета =  ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Строка.Дата, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
		СтрокаПлана.ВидБюджета = Строка.ВидБюджета;
		СтрокаПлана.Предназначение = Предназначение;
		СтрокаПлана.ПриходРасход = Строка.НаправлениеДвижения;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЦФО) Тогда
			СтрокаПлана.ЦФО = ДанныеОбъекта.ОсновнойЦФО;
			СтрокаПлана.Проект = ДанныеОбъекта.ОсновнойПроект;
		КонецЕсли;
		
		Если Строка.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
			СтрокаПлана.ДокументРезервирования = ДанныеОбъекта.ИсточникЛимитовБДДС;
		Иначе
			СтрокаПлана.ДокументРезервирования = ДанныеОбъекта.ИсточникЛимитовИсполнение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК Ссылка,
	|	ВерсияСоглашенияКоммерческийДоговор.Дата КАК Дата,
	|	ВерсияСоглашенияКоммерческийДоговор.Организация КАК Организация,
	|	ВерсияСоглашенияКоммерческийДоговор.Контрагент КАК Контрагент,
	|	ВерсияСоглашенияКоммерческийДоговор.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВерсияСоглашенияКоммерческийДоговор.ОсновнойЦФО КАК ОсновнойЦФО,
	|	ВерсияСоглашенияКоммерческийДоговор.ОсновнойПроект КАК ОсновнойПроект,
	|	ВерсияСоглашенияКоммерческийДоговор.ИсточникЛимитовБДДС КАК ИсточникЛимитовБДДС,
	|	ВерсияСоглашенияКоммерческийДоговор.ИсточникЛимитовИсполнение КАК ИсточникЛимитовИсполнение,
	|	ВерсияСоглашенияКоммерческийДоговор.ГрафикРасчетов.(
	|		Дата КАК Дата,
	|		Валюта КАК Валюта,
	|		ВидБюджета КАК ВидБюджета,
	|		СтатьяБюджета КАК СтатьяБюджета,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6,
	|		ЦФО КАК ЦФО,
	|		Проект КАК Проект,
	|		Сумма КАК Сумма,
	|		НаправлениеДвижения КАК НаправлениеДвижения
	|	) КАК ГрафикРасчетов
	|ИЗ
	|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
	|ГДЕ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ГрафикРасчетов");
		Результат.ГрафикРасчетов = Выборка.ГрафикРасчетов.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецЕсли
