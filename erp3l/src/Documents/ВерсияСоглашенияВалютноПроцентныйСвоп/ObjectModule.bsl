
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПараметрыРасчетаСекции(ИмяСекции, ОписаниеГрафика) Экспорт
	
	Результат = ФинансоваяМатематикаКлиентСервер.СтруктураПараметровРасчетаПроцентов();
	
	Если ИмяСекции = "ПроцентыОрганизация" Тогда
		Результат.ДатаНачала = ДатаНачалаДействия;
		Результат.ДатаОкончания = ДатаОкончанияДействия;
		Результат.ПравилоПереноса = ПереносДатСНерабочихДней;
		Результат.ИзменятьПроцентныйПериод = Истина;
		Результат.ПроизводственныйКалендарь = ПроизводственныеКалендари.ВыгрузитьКолонку("ПроизводственныйКалендарь");
		Результат.ПериодичностьУплаты = ПериодичностьУплатыПроцентов;
		Результат.ДатаОтсчетаПроцентныхПериодов = ДатаОтсчетаПроцентныхПериодов;
		Результат.ДатаПервойВыборки = ?(ГрафикРасчетов.Количество(), ГрафикРасчетов[0].Дата, ДатаНачалаДействия);
		Результат.ДатаНачалаДействия = ДатаНачалаДействия;
		Результат.ДатаПервогоПогашения = ДатаОкончанияПервогоПроцентногоПериода;
		Результат.ТипПроцентнойСтавки = ТипПроцентнойСтавкиОрганизации;
		Результат.ТочкаОтсчетаДатыФиксацииСтавки = ТочкаОтсчетаДатыФиксацииСтавкиОрганизации;
		Результат.СдвигДатыФиксацииСтавки = СдвигДатыФиксацииСтавкиОрганизации;
		Результат.ПроцентнаяСтавка = ПроцентнаяСтавкаОрганизации;
		Результат.ИндикативнаяСтавка = ИндикативнаяСтавкаОрганизации;
		Результат.РучноеУправлениеИзменениямиСтавки = РучноеУправлениеИзменениямиСтавкиОрганизации;
		Результат.ПроцентныеСтавки = ПроцентныеСтавкиОрганизация.Выгрузить();
		Результат.ВыплачиватьПроцентыПериодически = ВыплачиватьПроцентыПериодически;
		Результат.СдвигДатыУплаты = 0;
		Если ПроизводитсяОбменНоминальнымиСуммами Тогда
			Результат.ОперацииИзмененияБазы = ФинансовыеИнструментыУХ.ТаблицаИзмененияБазыИзГрафика(ГрафикРасчетов, ОписаниеГрафика, ОписаниеГрафика.НоминальнаяСуммаОрганизация);
		Иначе
			Результат.ОперацииИзмененияБазы = ФинансовыеИнструментыУХ.ТаблицаИзмененияБазы(СуммаОрганизации, ДатаНачалаДействия, ДатаОкончанияДействия);
		КонецЕсли;
		Результат.ВыплачиватьПроцентыВДатыПогашенияТела = Ложь;
		Результат.БазаДляРасчетаПроцентов = БазаДляРасчетаПроцентов;
		Результат.ГраницаФактическихДанных = ГраницаФактическихДанных;
		Результат.ДатаПоследнегоНачисления = Дата(1,1,1);
		
	ИначеЕсли ИмяСекции = "ПроцентыКонтрагент" Тогда
		
		Если ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ПроцентныйСвоп Тогда
			НоминальнаяСумма = СуммаОрганизации;
		Иначе
			НоминальнаяСумма = СуммаКонтрагента;
		КонецЕсли;
		
		Результат.ДатаНачала = ДатаНачалаДействия;
		Результат.ДатаОкончания = ДатаОкончанияДействия;
		Результат.ПравилоПереноса = ПереносДатСНерабочихДней;
		Результат.ИзменятьПроцентныйПериод = Истина;
		Результат.ПроизводственныйКалендарь = ПроизводственныеКалендари.ВыгрузитьКолонку("ПроизводственныйКалендарь");
		Результат.ПериодичностьУплаты = ПериодичностьУплатыПроцентов;
		Результат.ДатаОтсчетаПроцентныхПериодов = ДатаОтсчетаПроцентныхПериодов;
		Результат.ДатаПервойВыборки = ?(ГрафикРасчетов.Количество(), ГрафикРасчетов[0].Дата, ДатаНачалаДействия);
		Результат.ДатаНачалаДействия = ДатаНачалаДействия;
		Результат.ДатаПервогоПогашения = ДатаОкончанияПервогоПроцентногоПериода;
		Результат.ТипПроцентнойСтавки = ТипПроцентнойСтавкиКонтрагента;
		Результат.ТочкаОтсчетаДатыФиксацииСтавки = ТочкаОтсчетаДатыФиксацииСтавкиКонтрагента;
		Результат.СдвигДатыФиксацииСтавки = СдвигДатыФиксацииСтавкиКонтрагента;
		Результат.ПроцентнаяСтавка = ПроцентнаяСтавкаКонтрагента;
		Результат.ИндикативнаяСтавка = ИндикативнаяСтавкаКонтрагента;
		Результат.РучноеУправлениеИзменениямиСтавки = РучноеУправлениеИзменениямиСтавкиКонтрагента;
		Результат.ПроцентныеСтавки = ПроцентныеСтавкиКонтрагент.Выгрузить();
		Результат.ВыплачиватьПроцентыПериодически = ВыплачиватьПроцентыПериодически;
		Результат.СдвигДатыУплаты = 0;
		Если ПроизводитсяОбменНоминальнымиСуммами Тогда
			Результат.ОперацииИзмененияБазы = ФинансовыеИнструментыУХ.ТаблицаИзмененияБазыИзГрафика(ГрафикРасчетов, ОписаниеГрафика, ОписаниеГрафика.НоминальнаяСуммаКонтрагент);
		Иначе
			Результат.ОперацииИзмененияБазы = ФинансовыеИнструментыУХ.ТаблицаИзмененияБазы(НоминальнаяСумма, ДатаНачалаДействия, ДатаОкончанияДействия);
		КонецЕсли;
		Результат.ВыплачиватьПроцентыВДатыПогашенияТела = Ложь;
		Результат.БазаДляРасчетаПроцентов = БазаДляРасчетаПроцентов;
		Результат.ГраницаФактическихДанных = ГраницаФактическихДанных;
		Результат.ДатаПоследнегоНачисления = Дата(1,1,1);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьСекциюГрафика(ИмяСекции, ОписаниеГрафика, ОперацииГрафика, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	
	Если ИмяСекции = "НоминальнаяСуммаОрганизация" Тогда
		ФинансовыеИнструментыУХ.НачальноеЗаполнениеОсновногоДолга(ЭтотОбъект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика, СуммаОрганизации);
	ИначеЕсли ИмяСекции = "НоминальнаяСуммаКонтрагент" Тогда
		ФинансовыеИнструментыУХ.НачальноеЗаполнениеОсновногоДолга(ЭтотОбъект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика, СуммаКонтрагента);
	ИначеЕсли ИмяСекции = "ПроцентыОрганизация" ИЛИ ИмяСекции = "ПроцентыКонтрагент" Тогда
		ФинансовыеИнструментыУХ.ПересчитатьСекциюГрафика(ЭтотОбъект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВычисляемыеРеквизитыПоДаннымДоговора(ДоговорОбъект) Экспорт
	
	СуммаОрганизации = ДоговорОбъект.Сумма;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	РаботаСДоговорамиКонтрагентовУХ.ПередЗаписьюВерсииСоглашения(ЭтотОбъект, Отказ, РежимЗаписи);
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаПредыдущейВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		Если Дата <= ДатаПредыдущейВерсии Тогда
			ТекстОшибки = НСтр("ru = 'Документ не может иметь дату ранее даты предыдущей версии %1'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, ДатаПредыдущейВерсии),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОписаниеГрафика") Тогда
		ОписаниеГрафика = ДополнительныеСвойства.ОписаниеГрафика;
	Иначе
		ОписаниеГрафика = Документы.ВерсияСоглашенияВалютноПроцентныйСвоп.ОписаниеГрафика(ВидДоговораУХ);
		ДополнительныеСвойства.Вставить("ОписаниеГрафика", ОписаниеГрафика);
	КонецЕсли;
	
	// Проверка несовпадения сумм. Критичная.
	ШаблонСообщенияОбОшибке = Нстр("ru = 'Не совпадают итоговые суммы колонок графика ""%1"" и ""%2"".'");
	Для Каждого СекцияГрафика Из ОписаниеГрафика Цикл
		
		ОписаниеСекции = СекцияГрафика.Значение;
				
		СуммаПриход = ФинансовыеИнструментыУХ.ОбщаяСуммаКолонкиСекции(ГрафикРасчетов,
													ОписаниеСекции.ЭлементСтруктурыЗадолженности, 
													Перечисления.ВидыДвиженийПриходРасход.Приход);
													
		СуммаРасход = ФинансовыеИнструментыУХ.ОбщаяСуммаКолонкиСекции(ГрафикРасчетов,
													ОписаниеСекции.ЭлементСтруктурыЗадолженности, 
													Перечисления.ВидыДвиженийПриходРасход.Расход);
																							
		Если СуммаПриход <> СуммаРасход Тогда
			ТекстОшибки = СтрШаблон(ШаблонСообщенияОбОшибке, ОписаниеСекции.КолонкаПриходПредставление, ОписаниеСекции.КолонкаРасходПредставление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовУХ.ПриЗаписиВерсииСоглашения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	ВидБюджетаДоговора = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств;
	ДополнительныеСвойства.ДляПроведения.Вставить(
		"ПараметрыОперПланирования", ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(ВидБюджетаДоговора));
	ДополнительныеСвойства.ДляПроведения.Вставить("КонтролироватьПериодыПланирования", Истина);
	ДополнительныеСвойства.ДляПроведения.Вставить("КонтролироватьПериодыЛимитирования", Ложь);
	
	Документы.ВерсияСоглашенияВалютноПроцентныйСвоп.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ВыполнятьБюджетирование = РаботаСДоговорамиКонтрагентовУХ.ВыполнятьБюджетирование(РежимИспользованияГрафика);
	Если ВыполнятьБюджетирование Тогда
		КонтрольЛимитовУХ.ВыполнитьПроверкуНаличияПериодов(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РаботаСДоговорамиКонтрагентовУХ.ОтразитьВерсииРасчетов(ДополнительныеСвойства, Движения, Отказ);
	РаботаСДоговорамиКонтрагентовУХ.ОтразитьРасчетыСКонтрагентамиГрафики(ДополнительныеСвойства, Движения, Отказ);
	КонтрольЛимитовУХ.ОтразитьОперативныйПланПоБюджету(ДополнительныеСвойства, Движения, Отказ);
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЛимитыПоБюджетам") Тогда
		КонтрольЛимитовУХ.ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУХ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);	
	ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

	РаботаСДоговорамиКонтрагентовУХ.ОбновитьПозицииЗаявокПоГрафику(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);	
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);	
	ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Общая логика для всех договорных документов.
	РаботаСДоговорамиКонтрагентовУХ.ОбработкаЗаполненияВерсииСоглашения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	РаботаСДоговорамиКонтрагентовУХ.ПриКопированииВерсииСоглашения(ЭтотОбъект, ОбъектКопирования);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	РаботаСДоговорамиКонтрагентовУХ.ОбработкаПроверкиЗаполненияВерсииСоглашения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ПроцентныйСвоп Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагентаВВалютеКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизацииВВалютеКонтрагента");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти
#КонецЕсли
