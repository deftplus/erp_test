#Область ВызовыОбщихПроцедурИФункцийСогласованияОбъектов

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ОбщийМодульДействияСогласованиеУХСервер = ОбщегоНазначения.ОбщийМодуль("ДействияСогласованиеУХСервер");
	Если ОбщийМодульДействияСогласованиеУХСервер <> Неопределено Тогда
		ОбщийМодульДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаПриИзменении_Подключаемый()
	НовоеЗначениеСтатуса = РеквизитСтатусОбъекта(ЭтаФорма);
	ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатуса);	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	РасширениеПроцессыИСогласованиеКлиентУХ.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	РезультатФункции = Неопределено;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
		Модуль.ЗаполнитьЗначениеПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма, ,РезультатФункции);
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	РасширениеПроцессыИСогласованиеКлиентУХ.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()	

#КонецОбласти

// Возвращает текстовое представление о реквизитах рискового события РисковоеСобытиеВход.
&НаСервереБезКонтекста
Функция ПолучитьТекстИнформацииОРисковомСобытии(РисковоеСобытиеВход)
	РезультатФункции = "";
	Если ЗначениеЗаполнено(РисковоеСобытиеВход) Тогда
		Если ТипЗнч(РисковоеСобытиеВход) = Тип("ДокументСсылка.РисковоеСобытие") Тогда
			РезультатФункции = НСтр("ru = '%Организация%,  
			|Владелец риска: %ВладелецРиска%'");
			РезультатФункции = СтрЗаменить(РезультатФункции, "%Организация%", РисковоеСобытиеВход.Организация);	
			РезультатФункции = СтрЗаменить(РезультатФункции, "%ВладелецРиска%", РисковоеСобытиеВход.Ответственный);	
		Иначе
			РезультатФункции = "";
		КонецЕсли;
	Иначе
		РезультатФункции = "";
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТекстИнформацииОРисковомСобытии()

// Выводит на форму информацию о рисковом событии.
&НаСервере
Процедура ОтобразитьИнформациюОРисковомСобытии()
	ИнформацияОРисковомСобытии = ПолучитьТекстИнформацииОРисковомСобытии(Объект.Контекст);
КонецПроцедуры		// ОтобразитьИнформациюОРисковомСобытии()

// Выводит на форму информацию о закупочной процедуре.
&НаСервере
Процедура ОтобразитьИнформациюОЗакупочнойПроцедуре()
	Имя = "СправочникСсылка.ЗакупочныеПроцедуры";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(Объект.Контекст) = Тип(Имя) Тогда
		СпособВыбораПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контекст, "СпособВыбораПоставщика");
	ИначеЕсли ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Имя = "Перечисление.СпособыВыбораПоставщика.ПустаяСсылка";
		СпособВыбораПоставщика = ПредопределенноеЗначение(Имя);
	КонецЕсли;	
КонецПроцедуры		// ОтобразитьИнформациюОЗакупочнойПроцедуре()

// Возвращает дату, на которую можно добавить следующую стадию мероприятия.
&НаСервере
Функция ПолучитьНовуюДатуДобавленияСтадии()
	РезультатФункции = Дата(1, 1, 1);
	СтруктураМаксимальнойСтадии = ПолучитьСтруктуруМаксимальнойСтадии();
	МаксимальнаяДата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураМаксимальнойСтадии, "ДатаИзменения", Дата(1, 1, 1));
	МаксимальнаяСтадия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураМаксимальнойСтадии, "Стадия", Справочники.СтадииМероприятий.ПустаяСсылка());
	Если ЗначениеЗаполнено(МаксимальнаяСтадия) Тогда
		ДлительностьМаксимальнойСтадии = МаксимальнаяСтадия.Длительность;
		РезультатФункции = МаксимальнаяДата + 60*60*24*ДлительностьМаксимальнойСтадии;
	Иначе
		РезультатФункции = Дата(1, 1, 1);
	КонецЕсли;	
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьНовуюДатуДобавленияСтадии()

// Очищает таблицу вложенных файлов в таблице стадий на форме.
&НаСервере
Процедура ОчиститьВложения()
	Для Каждого ТекСтадии Из Объект.Стадии Цикл
		ТекСтадии.ВложенияФорма.Очистить();
	КонецЦикла;	
КонецПроцедуры		// ОчиститьВложения()	

// Возвращает соответствие таблицы вложений номерам строк объекта мероприятия ОбъектВход.
&НаСервере
Функция СохранитьВложенияВСоответствие(ОбъектВход)
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекСтадии Из ОбъектВход.Стадии Цикл
		РезультатФункции.Вставить(ТекСтадии.НомерСтроки, ТекСтадии.Вложения);
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// СохранитьВложенияВСоответствие()

// Записывает в таблицу стадий объекта ОбъектПриемник данные вложений из соответствия
// СоответствиеВложенийВход.
&НаСервере
Процедура СчитатьВложенияИзСоответствия(ОбъектПриемник, СоответствиеВложенийВход)
	Для Каждого ТекСтадии Из ОбъектПриемник.Стадии Цикл
		ХранилищеВложений = СоответствиеВложенийВход.Получить(ТекСтадии.НомерСтроки);
		Если ХранилищеВложений <> Неопределено Тогда
			ТаблицаВложений = ХранилищеВложений.Получить();
			Если ТаблицаВложений <> Неопределено Тогда
				ТекСтадии.ВложенияФорма.Загрузить(ТаблицаВложений);	
			Иначе
				// Пустое хранилище.
				ТекСтадии.ВложенияФорма.Очистить();
			КонецЕсли;	
		Иначе
			// Нет значения соответствия.
			ТекСтадии.ВложенияФорма.Очистить();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры		// СчитатьВложенияИзСоответствия()

// Очищает и заполняет табличную часть стадий по данным шаблона мероприятий.
&НаСервере
Процедура ЗаполнитьДействияПоШаблону_Сервер(ОчищатьСписокВход = Истина)
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	НоваяДатаИзменения = ПолучитьНовуюДатуДобавленияСтадии();
	Если (ЗначениеЗаполнено(НоваяДатаИзменения)) И (НЕ ОчищатьСписокВход) Тогда
		ОбъектДокумент.ЗаполнитьДействияПоШаблону(ОчищатьСписокВход, НоваяДатаИзменения);
	Иначе
		ОбъектДокумент.ЗаполнитьДействияПоШаблону(ОчищатьСписокВход);
	КонецЕсли;	
	СоответствиеВложений = СохранитьВложенияВСоответствие(ОбъектДокумент);
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	ОчиститьВложения();
	СчитатьВложенияИзСоответствия(Объект, СоответствиеВложений);
	ЗагрузитьСтадииВДерево();
	РассчитатьОбщийПрогресс();
	РассчитатьОбщуюДлительностьСтадий();
	УправлениеДоступностью();
КонецПроцедуры		// ЗаполнитьДействияПоРиску_Сервер()

// Рассчитывает значения полей Фактические затраты и Плановые затраты.
&НаСервере
Процедура РассчитатьСуммуЗатрат()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ЗаписатьДеревоВСтадии(ОбъектДокумент);
	ОбъектДокумент.РассчитатьСуммуЗатрат();
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
КонецПроцедуры		// РассчитатьСуммуЗатрат()

// Выполняет сортировку таблицы Стадии по возрастанию даты изменения.
&НаСервере
Процедура СортироватьСтадииПоДате()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект"); 
	ЗаписатьДеревоВСтадии(ОбъектДокумент);
	ОбъектДокумент.СортироватьСтадииПоДате();
	СоответствиеВложений = СохранитьВложенияВСоответствие(ОбъектДокумент);
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект"); 
	ОчиститьВложения();
	СчитатьВложенияИзСоответствия(Объект, СоответствиеВложений);
	ЗагрузитьСтадииВДерево();
КонецПроцедуры		// СортироватьСтадииПоДате()

// Возвращает массив разрешенных типов вложений документов для стадии СтадияВход.
&НаСервереБезКонтекста
Функция ВернутьМассивТиповИтоговыхДокументовСтадии(СтадияВход)
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(СтадияВход) Тогда
		Попытка
			Для Каждого ТекТипыИтоговыхДокументов Из СтадияВход.ТипыИтоговыхДокументов Цикл
				СправочникБД = ТекТипыИтоговыхДокументов.ТипИтоговогоДокумента;
				Если ЗначениеЗаполнено(СправочникБД) Тогда
					НовыйТип = ОбщегоНазначенияСерверУХ.ВернутьТипПоСсылкеБД(СправочникБД);	
					РезультатФункции.Добавить(НовыйТип);
				Иначе
					// Пустой документ. Пропускаем.
				КонецЕсли;
			КонецЦикла;	
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось получить ограничения типа для прикрепляемого к стадии %Стадия% объекта по причине: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(СтадияВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Новый Массив;
		КонецПопытки;
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ВернутьМассивТиповИтоговыхДокументовСтадии()

// Управляет доступностью элементов формы.
&НаСервере
Процедура УправлениеДоступностью()
	// Инициализация.
	ТекВидМероприятия = Объект.ВидМероприятия;
	ЭтоМероприятиеРеакцияНаРиск			 = (ТекВидМероприятия = Перечисления.ВидыМероприятий.РеакцияНаРиск);
	ЭтоКонтрольноеМероприятие			 = (ТекВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие);
	ЭтоМероприятиеИнициатива			 = (ТекВидМероприятия = Перечисления.ВидыМероприятий.Инициатива);
	ЭтоМероприятиеЗакупочнаяПроцедура	 = (ТекВидМероприятия = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура);
	ЭтоФз223 = Ложь;
	ТекКонтекст = Объект.Контекст;
	Имя = "СправочникСсылка.ЗакупочныеПроцедуры"; 
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(ТекКонтекст) = Тип(Имя) Тогда
		Если ЗначениеЗаполнено(Объект.Контекст) Тогда
			Если ЗначениеЗаполнено(ТекКонтекст.ОрганизацияДляЗаключенияДоговора) Тогда
				ЭтоФз223 = ТекКонтекст.ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223;
			Иначе
				ЭтоФз223 = Ложь;		// Не указана организация закупочной процедуры.
			КонецЕсли;
		Иначе
			ЭтоФз223 = Ложь;		// Нет контекста мероприятия.
		КонецЕсли;	
	Иначе
		ЭтоФз223 = Ложь;		// Не закупочная процедура.
	КонецЕсли; 
	// Отображение элементов для видов мероприятий.
	ОтображатьОрганизацию = (ЭтоКонтрольноеМероприятие ИЛИ ЭтоМероприятиеИнициатива);
	РазрешитьРедактированиеОбщегоПрогресса = (ЭтоМероприятиеРеакцияНаРиск ИЛИ ЭтоКонтрольноеМероприятие);
	Элементы.ТипРеакцииНаРисковоеСобытие.Видимость				 = ЭтоМероприятиеРеакцияНаРиск;
	Элементы.ГруппаСтраницаРезультаты.Видимость					 = ЭтоКонтрольноеМероприятие;
	Элементы.ШаблонМероприятия.Видимость						 = ЭтоКонтрольноеМероприятие;
	Элементы.ШаблонМероприятия.Доступность						 = НЕ ЗначениеЗаполнено(Объект.ШаблонМероприятия) И ЭтоКонтрольноеМероприятие;
	Элементы.ВидМероприятия.Доступность						 	= НЕ ЗначениеЗаполнено(Объект.ВидМероприятия) И ЭтоКонтрольноеМероприятие;
	Элементы.Организация.Видимость								 = ОтображатьОрганизацию;
	Элементы.Проект.Видимость									 = ОтображатьОрганизацию;          
	Элементы.ЦФО.Видимость										 = ОтображатьОрганизацию;          
	Элементы.ГруппаОбщийПрогресс.ТолькоПросмотр					 = РазрешитьРедактированиеОбщегоПрогресса;
	Элементы.НаименованиеРеакции.Видимость						 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаДатаНачалаДатаОкончания.Видимость			 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ДействияРеакцииДатаИзменения.Видимость				 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаСтраницаОписание.Видимость					 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаСтраницаУчастники.Видимость					 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаДатаНомер.Видимость							 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаОтветственный.Видимость						 = (НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.СпособВыбораПоставщика.Видимость					 = ЭтоМероприятиеЗакупочнаяПроцедура;
	Если НЕ Элементы.Найти("ГруппаСтатусыСогласования") = Неопределено Тогда
		Элементы["ГруппаСтатусыСогласования"].Видимость				 = НЕ (ЭтоМероприятиеЗакупочнаяПроцедура);
	КонецЕсли;
	Элементы.ВидМероприятия.Видимость							 = НЕ (ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.РисковоеСобытие.ТолькоПросмотр						 = ЭтоМероприятиеЗакупочнаяПроцедура;
	Элементы.СпособВыбораПоставщика.Видимость = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом(); 
	Если НЕ Элементы.Найти("ГруппаСтатусыСогласования") = Неопределено Тогда
	Элементы["ГруппаСтатусыСогласования"].Видимость				 = НЕ (ЭтоМероприятиеЗакупочнаяПроцедура);
	КонецЕсли;            
	
	НовыйМассив = Новый Массив();
    НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.ВидМероприятия", "Объект.ВидМероприятия"));
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда 
  	  НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.СпособВыбораПоставщика", "СпособВыбораПоставщика"));
	КонецЕсли;
    НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
    Элементы.ДеревоСтадийСтадияГруппа.СвязиПараметровВыбора = НовыеСвязи;
	
	Если ЭтоМероприятиеЗакупочнаяПроцедура Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.РисковоеСобытие.ПоложениеЗаголовка =  ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаСтадии;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.РисковоеСобытие.ПоложениеЗаголовка =  ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;	
	// Использование данных по прогрессу выполнения.
	ИспользоватьПроцентВыполнения = Документы.Мероприятие.ИспользоватьПроцентВыполнения(, Объект.ШаблонМероприятия);
	НуженПроцентВыполнения = (ИспользоватьПроцентВыполнения И НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаПрогресс.Видимость				 = НуженПроцентВыполнения;      
	Элементы.ГруппаОбщийПрогресс.Видимость			 = НуженПроцентВыполнения; 
	Элементы.ДеревоСтадийИтогВыполнения.Видимость	 = НуженПроцентВыполнения;
	// Использование данных по затратам.
	ИспользоватьКонтрольЗатрат = Документы.Мероприятие.ИспользоватьКонтрольЗатрат(, Объект.ШаблонМероприятия);
	НуженКонтрольЗатрат = (ИспользоватьКонтрольЗатрат И НЕ ЭтоМероприятиеЗакупочнаяПроцедура);
	Элементы.ГруппаЗатраты.Видимость			 = НуженКонтрольЗатрат;
	Элементы.ГруппаФактическиеЗатраты.Видимость	 = НуженКонтрольЗатрат;
	Элементы.ГруппаПлановыеЗатраты.Видимость	 = НуженКонтрольЗатрат;
	// Заголовок Формы.
	ОбновитьЗаголовокФормы();
	// Доступность способа расчёта длительности.
	Элементы.ГруппаПроизводственныйКалендарь.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ШаблонМероприятия);
	// Отображение Производственного календаря.
	Элементы.ПроизводственныйКалендарь.Видимость = Объект.ИспользоватьПроизводственныйКалендарь;
	// Заголовок общей длительности.
	Если Объект.ВидМероприятия = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура Тогда
		Элементы.ОбщаяДлительностьСтадий.Заголовок = НСтр("ru = 'Длительность от даты официального объявления закупки'");
	Иначе
		Элементы.ОбщаяДлительностьСтадий.Заголовок = НСтр("ru = 'Общая длительность'");
	КонецЕсли;
	Если Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.КонтрольноеМероприятие") Тогда
		Элементы.РисковоеСобытие.Заголовок = НСтр("ru = 'Риск'");
	Иначе
		Элементы.РисковоеСобытие.Заголовок = "";
	КонецЕсли;
КонецПроцедуры		// УправлениеДоступностью()

// Рассчитывает и выводит в поле значение общего прогресса по стадиям.
&НаСервере
Процедура РассчитатьОбщийПрогресс()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ЗаписатьДеревоВСтадии(ОбъектДокумент);
	Объект.ОбщийПрогресс = ОбъектДокумент.ПолучитьОбщийПрогрессПоСтадиям();
КонецПроцедуры		// РассчитатьОбщийПрогресс()

// Создаёт и возвращает задачу для исполнителя поручения.
&НаСервере
Функция СоздатьЗадачуИсполнителюПредписания()
	Имя = "Задачи";
	РезультатФункции = Справочники[Имя].ПустаяСсылка();
	Попытка
		ЗадачаОбъект = Справочники[Имя].СоздатьЭлемент();
		ЗадачаОбъект.СвязанныйОбъект = Объект.Ссылка;
		ЗадачаОбъект.Записать();
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("МодульРегламентныхЗаданийУХ");
			Модуль.СоздатьЗадачу(ЗадачаОбъект, Объект.ИсполнительПредписания, Неопределено, Неопределено, Неопределено);
		КонецЕсли;
		РезультатФункции = ЗадачаОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать задачу исполнителю предписания %Исполнитель% : %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Исполнитель%", Строка(Объект.ИсполнительПредписания));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники[Имя].ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьЗадачуИсполнителюПредписания()

// Создаёт и возвращает задачу для контроля исполнителя поручения.
&НаСервере
Функция СоздатьЗадачуКонтролирующемуИсполнителяПредписания()
	Имя = "Задачи";
	РезультатФункции = Справочники[Имя].ПустаяСсылка();
	Попытка
		ЗадачаОбъект = Справочники[Имя].СоздатьЭлемент();
		ЗадачаОбъект.СвязанныйОбъект = Объект.Ссылка;
		ЗадачаОбъект.Записать();
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("МодульРегламентныхЗаданийУХ");
			Модуль.СоздатьЗадачу(ЗадачаОбъект, Объект.Ответственный, Неопределено, Неопределено, Неопределено);
		КонецЕсли;		
		РезультатФункции = ЗадачаОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать задачу контроля исполнителя %Исполнитель% предписания: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Исполнитель%", Строка(Объект.ИсполнительПредписания));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники[Имя].ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьЗадачуКонтролирующемуИсполнителяПредписания()

// Создаёт и возвращает задачу для ответственного за стадию.
&НаСервере
Функция СоздатьЗадачуОтветственномуЗаСтадию(ПользовательВход)
	Имя = "Задачи";
	РезультатФункции = Справочники[Имя].ПустаяСсылка();
	Попытка
		ЗадачаОбъект = Справочники[Имя].СоздатьЭлемент();
		ЗадачаОбъект.СвязанныйОбъект = Объект.Ссылка;
		ЗадачаОбъект.Записать();
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("МодульРегламентныхЗаданийУХ");
			Модуль.СоздатьЗадачу(ЗадачаОбъект, Объект.Ответственный, Неопределено, Неопределено, Неопределено);
		КонецЕсли;		
		РезультатФункции = ЗадачаОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать задачу контроля исполнителя предписания: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники[Имя].ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьЗадачуОтветственномуЗаСтадию()

// Возвращает структуру, содержащую стадию с максимальной датой,
// стадию с максимальной датой.
&НаСервере
Функция ПолучитьСтруктуруМаксимальнойСтадии()
	РезультатФункции = Новый Структура;
	ПустаяДата = Дата(1, 1, 1);
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	РезультатФункции.Вставить("ДатаИзменения", ПустаяДата);
	РезультатФункции.Вставить("Стадия", ПустаяСтадия);
	МаксимальнаяДата = Дата(1, 1, 1);
	МаксимальнаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	Для Каждого ТекСтадии Из ДеревоСтадий.ПолучитьЭлементы() Цикл
		Если ТекСтадии.ГруппирующаяСтрока Тогда
			Для Каждого ТекПодчиненныеСтроки Из ТекСтадии.ПолучитьЭлементы() Цикл
				Если МаксимальнаяДата < ТекПодчиненныеСтроки.ДатаИзменения Тогда
					МаксимальнаяДата = ТекПодчиненныеСтроки.ДатаИзменения;
					МаксимальнаяСтадия = ТекПодчиненныеСтроки.Действие;
				Иначе
					// Выполняем поиск далее.
				КонецЕсли; 
			КонецЦикла;	
		Иначе	
			Если МаксимальнаяДата < ТекСтадии.ДатаИзменения Тогда
				МаксимальнаяДата = ТекСтадии.ДатаИзменения;
				МаксимальнаяСтадия = ТекСтадии.Действие
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
	РезультатФункции.Вставить("ДатаИзменения", МаксимальнаяДата);
	РезультатФункции.Вставить("Стадия", МаксимальнаяСтадия);
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьСтруктуруМаксимальнойСтадии()

// Загружает в дерево на форме данные по стадиям из базы данных.
&НаСервере
Процедура ЗагрузитьСтадииВДерево()
	// Инициализация.
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ДеревоВрем.Строки.Очистить();
	ТекШаблон = Объект.ШаблонМероприятия;
	ДанныеДлительности = ВернутьДанныеДлительностиСтадий(ТекШаблон);
	// Формирование соответствия групп.
	Попытка
		СоответствиеГрупп = Новый Соответствие;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ГруппирующаяСтрока", Истина);
		НайденныеСтроки = Объект.Стадии.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			СоответствиеГрупп.Вставить(ТекНайденныеСтроки.ИсходныйНомерСтроки, Новый Массив);
		КонецЦикла;	
		// Добавление стадий в соответствие групп.
		Для Каждого ТекСтадии Из Объект.Стадии Цикл
			ЕстьРодительТекущейСтроки = (ТекСтадии.ГруппаРодитель <> 0);
			Если ЕстьРодительТекущейСтроки Тогда
				МассивРодителя = СоответствиеГрупп.Получить(ТекСтадии.ГруппаРодитель);
				Если МассивРодителя <> Неопределено Тогда
					МассивРодителя.Добавить(ТекСтадии.ИсходныйНомерСтроки);
				Иначе
					МассивРодителя = Новый Массив;
				КонецЕсли;	
				СоответствиеГрупп.Вставить(ТекСтадии.ГруппаРодитель, МассивРодителя);
			Иначе
				// Нет родителя. Пропускаем строку.
			КонецЕсли;
		КонецЦикла;	
		// Заполнение временного дерева стадий.
		Для Каждого ТекСтадии Из Объект.Стадии Цикл
			ЕстьРодительТекущейСтроки = (ТекСтадии.ГруппаРодитель <> 0);
			Если НЕ ЕстьРодительТекущейСтроки Тогда
				Если ТекСтадии.ГруппирующаяСтрока Тогда
					// Добавление группирующей строки.
					НоваяСтрокаРодитель = ДеревоВрем.Строки.Добавить();
					НоваяСтрокаРодитель.Действие			 = ПустаяСтадия;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРодитель, ТекСтадии);
					НоваяСтрокаРодитель.СтадияГруппа		 = ТекСтадии.ПредставлениеГруппы;
					НоваяСтрокаРодитель.ГруппирующаяСтрока	 = Истина;
					// Получение дочерних строк.
					МассивРодителя = СоответствиеГрупп.Получить(ТекСтадии.ИсходныйНомерСтроки);
					Если МассивРодителя <> Неопределено Тогда
						Для Каждого ТекМассивРодителя Из МассивРодителя Цикл
							// Поиск данных дочерней строки.
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("ИсходныйНомерСтроки", ТекМассивРодителя);
							НайденныеСтроки = Объект.Стадии.НайтиСтроки(СтруктураПоиска);
							Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
								// Добавление дочерней строки.
								НоваяСтрокаПотомок = НоваяСтрокаРодитель.Строки.Добавить();
								НоваяСтрокаПотомок.Действие				 = ТекНайденныеСтроки.Действие;
								ЗаполнитьЗначенияСвойств(НоваяСтрокаПотомок, ТекНайденныеСтроки);
								НоваяСтрокаПотомок.СтадияГруппа			 = ТекНайденныеСтроки.Действие;
								НоваяСтрокаПотомок.ГруппирующаяСтрока	 = Ложь;
								НоваяСтрокаПотомок.ВложенияФорма		 = ТекНайденныеСтроки.ВложенияФорма.Выгрузить();
							КонецЦикла;	
						КонецЦикла;	
					Иначе
						// Нет дочерних строк.
					КонецЕсли;	
				Иначе
					ТекСтадия = ТекСтадии.Действие;
					СтруктураДлительностиСтадии = ДанныеДлительности.Получить(ТекСтадия);
					НастройкаНеБолее = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДлительностиСтадии, "НеБолее", Ложь);
					НастройкаНеМенее = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДлительностиСтадии, "НеМенее", Ложь);
					// Добавление строки-элемента дерева.
					НоваяСтрокаЭлемент = ДеревоВрем.Строки.Добавить();
					НоваяСтрокаЭлемент.Действие								 = ТекСтадия;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаЭлемент, ТекСтадии);
					НоваяСтрокаЭлемент.СтадияГруппа							 = ТекСтадия;
					НоваяСтрокаЭлемент.ГруппирующаяСтрока					 = Ложь;
					НоваяСтрокаЭлемент.ВложенияФорма						 = ТекСтадии.ВложенияФорма.Выгрузить();
					НоваяСтрокаЭлемент.ДлительностьПлановая					 = ТекСтадия.Длительность;
					НоваяСтрокаЭлемент.ОграничениеМинимальнойДлительности	 = НастройкаНеМенее;
					НоваяСтрокаЭлемент.ОграничениеМаксимальнойДлительности	 = НастройкаНеБолее;
				КонецЕсли;	
			Иначе
				// Принадлежит другой строке. Будет добавлена отдельно.
			КонецЕсли;
		КонецЦикла;	
		// Перенос временного дерева в дерево на форме.
		ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при загрузке данных в дерево стадий: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// ЗагрузитьСтадииВДерево()

// Записывает в табличную часть объекта ТекущийОбъект данные по стадиям из
// дерева стадий.
&НаСервере
Процедура ЗаписатьДеревоВСтадии(ТекущийОбъект)
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ТекущийОбъект.Стадии.Очистить();
	Для Каждого ТекСтроки Из ДеревоВрем.Строки Цикл
		НоваяСтрока = ТекущийОбъект.Стадии.Добавить();
		Если ТекСтроки.ГруппирующаяСтрока Тогда
			НоваяСтрока.Действие			 = ПустаяСтадия;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтроки);
			НоваяСтрока.ГруппаРодитель		 = 0;
			НоваяСтрока.ГруппирующаяСтрока	 = Истина;
			НоваяСтрока.ПредставлениеГруппы	 = ТекСтроки.СтадияГруппа;
			Для Каждого ТекДочерниеСтроки Из ТекСтроки.Строки Цикл
				ВыгрузкаФайлов = ТекДочерниеСтроки.ВложенияФорма;
				НоваяДочерняяСтрока = ТекущийОбъект.Стадии.Добавить();
				НоваяДочерняяСтрока.Действие			 = ТекДочерниеСтроки.Действие;
				ЗаполнитьЗначенияСвойств(НоваяДочерняяСтрока, ТекДочерниеСтроки);
				НоваяДочерняяСтрока.Вложения			 = Новый ХранилищеЗначения(ВыгрузкаФайлов);
				НоваяДочерняяСтрока.ГруппаРодитель		 = НоваяСтрока.НомерСтроки;
				НоваяДочерняяСтрока.ГруппирующаяСтрока	 = Ложь;
				НоваяДочерняяСтрока.ПредставлениеГруппы	 = "";
			КонецЦикла;	
		Иначе
			ВыгрузкаФайлов = ТекСтроки.ВложенияФорма;
			НоваяСтрока.Действие			 = ТекСтроки.Действие;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтроки);
			НоваяСтрока.Вложения			 = Новый ХранилищеЗначения(ВыгрузкаФайлов);
			НоваяСтрока.ГруппаРодитель		 = 0;
			НоваяСтрока.ГруппирующаяСтрока	 = Ложь;
			НоваяСтрока.ПредставлениеГруппы	 = "";
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры		// ЗаписатьДеревоВСтадии()

// Добавляет в корень дерева стадий новую стадию ДобавляемаяСтадияВход. Когда
// добавляемая стадия не указана - будет добавлена пустая.
&НаСервере
Процедура ДобавитьСтадию_Сервер(ДобавляемаяСтадияВход = Неопределено)
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	СтадияРабочая = ПустаяСтадия;
	Если ЗначениеЗаполнено(ДобавляемаяСтадияВход) Тогда
		СтадияРабочая = ДобавляемаяСтадияВход;
	Иначе
		СтадияРабочая = ПустаяСтадия;
	КонецЕсли;	
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	НоваяСтрокаРодитель = ДеревоВрем.Строки.Добавить();
	НоваяСтрокаРодитель.Действие				 = СтадияРабочая;
	НоваяСтрокаРодитель.ИтогВыполнения		 = 0;
	НоваяСтрокаРодитель.СтадияГруппа		 = СтадияРабочая;
	НоваяСтрокаРодитель.ГруппирующаяСтрока	 = Ложь;
	НоваяСтрокаРодитель.ИзШаблона			 = Ложь;
	// Выставим новую дату редактирования для новой строки как следующую за последней.
	НоваяДатаИзменения = ПолучитьНовуюДатуДобавленияСтадии();
	Если ЗначениеЗаполнено(НоваяДатаИзменения) Тогда
		НоваяСтрокаРодитель.ДатаИзменения = НоваяДатаИзменения;
	Иначе
		НоваяСтрокаРодитель.ДатаИзменения = Объект.ДатаНачала;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры		// ДобавитьГруппу_Сервер()

// Добавляет группу с именем ИмяГруппыВход в дерево стадий.
&НаСервере
Процедура ДобавитьГруппу_Сервер(ИмяГруппыВход)
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	НоваяСтрокаРодитель = ДеревоВрем.Строки.Добавить();
	НоваяСтрокаРодитель.Действие			 = ПустаяСтадия;
	НоваяСтрокаРодитель.СтадияГруппа		 = ИмяГруппыВход;
	НоваяСтрокаРодитель.ГруппирующаяСтрока	 = Истина;
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры		// ДобавитьГруппу_Сервер()

// Копирует группу с идентификатором ИдентификаторГруппыВход.
&НаСервере
Процедура СкопироватьГруппу(ИдентификаторГруппыВход)
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	КопируемаяГруппа = ДеревоСтадий.НайтиПоИдентификатору(ИдентификаторГруппыВход);
	НоваяГруппа = ДеревоВрем.Строки.Добавить();
	НоваяГруппа.Действие			 = ПустаяСтадия;
	НоваяГруппа.СтадияГруппа		 = КопируемаяГруппа.СтадияГруппа;
	НоваяГруппа.ГруппирующаяСтрока	 = Истина;
    Для Каждого ТекЭлементы Из КопируемаяГруппа.ПолучитьЭлементы() Цикл
		НоваяСтрока = НоваяГруппа.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлементы);
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоСтадий");
КонецПроцедуры		// СкопироватьГруппу()

// Загружает таблицу вложенных файлов в таблицу стадий на форму.
&НаСервере
Процедура СчитатьВложения()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Для Каждого ТекСтадии Из Объект.Ссылка.Стадии Цикл
			ВложенияХранилище = ТекСтадии.Вложения;
			ВложенияТаблица = ВложенияХранилище.Получить();
			Если ТипЗнч(ВложенияТаблица) = Тип("ТаблицаЗначений") Тогда
				Для Каждого ТекФормаСтадии Из Объект.Стадии Цикл
					Если ТекФормаСтадии.НомерСтроки = ТекСтадии.НомерСтроки Тогда
						ТекФормаСтадии.ВложенияФорма.Загрузить(ВложенияТаблица);
						Прервать;
					Иначе
						// Выполняем поиск далее.
					КонецЕсли;	
				КонецЦикла;	
			Иначе
				// Не обновляем список по данной строке.
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		// Новый документ.
	КонецЕсли;
КонецПроцедуры		// СчитатьВложения()	

// Устанавливает заголовок формы.
&НаСервере
Процедура ОбновитьЗаголовокФормы()
	Имя = "СправочникСсылка.ЗакупочныеПроцедуры";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(Объект.Контекст) = Тип(Имя) Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru = 'Стадии закупочной процедуры'");
	Иначе
		ЭтаФорма.АвтоЗаголовок = Истина;
	КонецЕсли;
КонецПроцедуры		// ОбновитьЗаголовокФормы()

// Возвращает общую длительность мероприятия.
&НаСервере
Функция ПолучитьОбщуюДлительностьСтадий()
	РезультатФункции = 0;
	СтадииПодготовка = Справочники.СтадииМероприятий.ВернутьСтадииНачалоПодготовкиЗакупкиКПубликации();
	// Получим исходные данные из формы.
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ТаблицаСтадий = ОбщегоНазначенияСерверУХ.ПреобразоватьДеревоЗначенийВТаблицу(ДеревоВрем);
	// Найдём минимальную и максимальную дату.
	МинимальнаяДата = Дата(3999, 1, 1);
	МаксимальнаяДата = Дата(1, 1, 1);
	МаксимальнаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	Для Каждого ТекТаблицаСтадий Из ТаблицаСтадий Цикл
		Если (НЕ ТекТаблицаСтадий.ГруппирующаяСтрока) Тогда
			Если СтадииПодготовка.Найти(ТекТаблицаСтадий.Действие) = Неопределено Тогда
				ТекДатаИзменения = ТекТаблицаСтадий.ДатаИзменения;
				Если ЗначениеЗаполнено(ТекДатаИзменения) Тогда
					Если МинимальнаяДата > ТекДатаИзменения Тогда
						МинимальнаяДата = ТекДатаИзменения;
					Иначе
						// Выполняем поиск далее.
					КонецЕсли;	
					Если МаксимальнаяДата < ТекДатаИзменения Тогда
						МаксимальнаяДата = ТекДатаИзменения;
						МаксимальнаяСтадия = ТекТаблицаСтадий.Действие;
					Иначе
						// Выполняем поиск далее.
					КонецЕсли;	
				Иначе
					// Пустая дата. Пропускаем.
				КонецЕсли;
			Иначе
				// Стадия подготовки. Пропускаем.
			КонецЕсли;
		Иначе
			// Группа. Пропускаем.
		КонецЕсли;	
	КонецЦикла;	
	// Получим разность дат.
	Если (МинимальнаяДата <> Дата(3999, 1, 1)) И (МаксимальнаяДата <> Дата(1, 1, 1)) Тогда
		РазностьДат = (НачалоДня(МаксимальнаяДата) - НачалоДня(МинимальнаяДата));
		РазностьСутки = Цел(РазностьДат / (24*60*60));
		Если ЗначениеЗаполнено(МаксимальнаяСтадия) Тогда
			РезультатФункции =  РазностьСутки + МаксимальнаяСтадия.Длительность;
		Иначе
			РезультатФункции =  РазностьСутки;
		КонецЕсли;	
	Иначе
		РезультатФункции = 0;
	КонецЕсли;	
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьОбщуюДлительностьСтадий()

// Рассчитывает и выводит на форму общую длительность всех введённых стадий.
&НаСервере
Процедура РассчитатьОбщуюДлительностьСтадий()
	ОбщаяДлительностьСтадий = ПолучитьОбщуюДлительностьСтадий();
КонецПроцедуры		// РассчитатьОбщуюДлительностьСтадий()

// Возвращает структуру реквизитов стадии СтадияВход.
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтадии(СтадияВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИспользуетсяИтоговыйДокумент", СтадияВход.ИспользуетсяИтоговыйДокумент);
	РезультатФункции.Вставить("ИспользуетсяПрикрепленныйФайл", СтадияВход.ИспользуетсяПрикрепленныйФайл);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьДанныеСтадии()

// Определяет, нужно ли контролировать последовательность завершения стадий
// текущего мероприятия из настроек, указанных в шаблоне ШаблонМероприятияВход.
&НаСервереБезКонтекста
Функция ОпределитьНеобходимостьКонтроляПоследовательностиСтадий(ШаблонМероприятияВход)
	РезультатФункции = Ложь;
	Если ЗначениеЗаполнено(ШаблонМероприятияВход) Тогда
		РезультатФункции = ШаблонМероприятияВход.КонтролироватьПоследовательностьСтадий;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОпределитьНеобходимостьКонтроляПоследовательностиСтадий()	

// Серверная обёртка обработчика ПриИзменении дерева стадий.
&НаСервере
Процедура ДеревоСтадийПриИзменении_Сервер()
	РассчитатьОбщийПрогресс();
	СортироватьСтадииПоДате();
	РассчитатьОбщуюДлительностьСтадий();
КонецПроцедуры		// ДеревоСтадийПриИзменении_Сервер()

// Возвращает список стадий с отметками мероприятий.
&НаСервере
Функция ПолучитьСписокСтадийНапоминаний()
	РезультатФункции = Новый СписокЗначений;
	ДеревоВрем = РеквизитФормыВЗначение("ДеревоСтадий");
	ТаблицаСтадий = ОбщегоНазначенияСерверУХ.ПреобразоватьДеревоЗначенийВТаблицу(ДеревоВрем);	
	Для Каждого ТекТаблицаСтадий Из ТаблицаСтадий Цикл
		Если НЕ ТекТаблицаСтадий.ГруппирующаяСтрока Тогда
			ТекДействие				 = ТекТаблицаСтадий.Действие;
			ТекДатаИзменения		 = ТекТаблицаСтадий.ДатаИзменения;
			ТекНапоминатьОСтадии	 = ТекТаблицаСтадий.НапомнитьОСтадии;
			СтруктураЗначенийСписка = Новый Структура;
			СтруктураЗначенийСписка.Вставить("Стадия", ТекДействие);
			СтруктураЗначенийСписка.Вставить("ДатаИзменения", ТекДатаИзменения);
			ПредставлениеЭлемента = "";
			ПредставлениеЭлемента = ПредставлениеЭлемента + "[";
			ПредставлениеЭлемента = ПредставлениеЭлемента + Формат(ТекДатаИзменения, "ДФ=dd.MM.yyyy");
			ПредставлениеЭлемента = ПредставлениеЭлемента + "] ";
			ПредставлениеЭлемента = ПредставлениеЭлемента + Строка(ТекДействие);
			РезультатФункции.Добавить(СтруктураЗначенийСписка, ПредставлениеЭлемента, ТекНапоминатьОСтадии);
		Иначе
			// Группирующая строка. Пропускаем.
		КонецЕсли;	
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСписокСтадийНапоминаний()

// Возвращает массив стадий из шаблона мероприятия ШаблонВход.
&НаСервереБезКонтекста
Функция ВернутьМассивСтадийШаблона(ШаблонВход, КонтекстВход)
	РезультатФункции = Новый Массив;
	// Получим настройки стадий квалификационного отбора и переторжки.
	ТаблицаСтадийШаблона = Справочники.ШаблоныМероприятий.ВернутьТаблицуСтадийШаблонаМероприятия(ШаблонВход);
	СтадииКвалификационногоОтбора = Справочники.СтадииМероприятий.ВернутьСтадииКвалификационногоОтбора();
	СтадииПереторжки = Справочники.СтадииМероприятий.ВернутьСтадииПереторжка();
	ЭтоКвалификационныйОтбор = Ложь;
	ЭтоЗакупочнаяПроцедура = Ложь;
	ЭтоПереторжка = Ложь;
	Имя = "СправочникСсылка.ЗакупочныеПроцедуры"; 
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(КонтекстВход) = Тип(Имя) Тогда
		Если ЗначениеЗаполнено(КонтекстВход) Тогда
			ЭтоКвалификационныйОтбор = КонтекстВход.ТребуетсяКвалификационныйОтбор;
			ЭтоПереторжка = КонтекстВход.Переторжка;
		Иначе
			ЭтоКвалификационныйОтбор = Ложь;
			ЭтоПереторжка = Ложь;
		КонецЕсли;
		ЭтоЗакупочнаяПроцедура = Истина;
	Иначе
		ЭтоКвалификационныйОтбор = Ложь;
		ЭтоПереторжка = Ложь;
		ЭтоЗакупочнаяПроцедура = Ложь;
	КонецЕсли;
	// Добавим в массив стадии, согласно настройкам.
	Если ТаблицаСтадийШаблона.Количество() > 0 Тогда
		Для Каждого ТекТаблицаСтадийШаблона Из ТаблицаСтадийШаблона Цикл
			МожноДобавлять = Истина;
			// Проверим добавление стадии Квалификационного отбора.
			ЭтоСтадияКвалификационногоОтбора = (СтадииКвалификационногоОтбора.Найти(ТекТаблицаСтадийШаблона.Стадия) <> Неопределено);
			Если (НЕ ЭтоЗакупочнаяПроцедура) ИЛИ (НЕ ЭтоСтадияКвалификационногоОтбора) ИЛИ (ЭтоКвалификационныйОтбор) Тогда
				// Проверка пройдена.
			Иначе
				МожноДобавлять = Ложь;
			КонецЕсли;
			// Проверим добавление стадии Переторжки.
			ЭтоСтадияПереторжки = (СтадииПереторжки.Найти(ТекТаблицаСтадийШаблона.Стадия) <> Неопределено);
			Если (НЕ ЭтоЗакупочнаяПроцедура) ИЛИ (НЕ ЭтоСтадияПереторжки) ИЛИ (ЭтоПереторжка) Тогда
				// Проверка пройдена.
			Иначе
				МожноДобавлять = Ложь;
			КонецЕсли;
			// Непосредственное добавление.
			Если МожноДобавлять Тогда
				РезультатФункции.Добавить(ТекТаблицаСтадийШаблона.Стадия);
			Иначе
				// Пропускаем стадию.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивСтадийШаблона()

// Возвращает соответствие данных длительностей стадиям из шаблона мероприятия ШаблонВход.
&НаСервереБезКонтекста
Функция ВернутьДанныеДлительностиСтадий(ШаблонВход)
	РезультатФункции = Новый Соответствие;
	ТаблицаСтадийШаблона = Справочники.ШаблоныМероприятий.ВернутьТаблицуСтадийШаблонаМероприятия(ШаблонВход);	
	Для Каждого ТекТаблицаСтадийШаблона Из ТаблицаСтадийШаблона Цикл
		ТекСтадия = ТекТаблицаСтадийШаблона.Стадия;
		Если ЗначениеЗаполнено(ТекСтадия) Тогда
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("Длительность",	 ТекСтадия.Длительность);
			СтруктураРезультата.Вставить("НеБолее",			 ТекТаблицаСтадийШаблона.ОграничениеМаксимальнойДлительности);
			СтруктураРезультата.Вставить("НеМенее",			 ТекТаблицаСтадийШаблона.ОграничениеМинимальнойДлительности);
			РезультатФункции.Вставить(ТекТаблицаСтадийШаблона.Стадия, СтруктураРезультата);
		Иначе
			// Пустая стадия. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ВернутьДанныеДлительностиСтадий()

// Возвращает массив структур, содержащих данные по вложенным файлам для стадии
// мероприятия СтадияВход.
&НаСервереБезКонтекста
Функция ВернутьМассивДанныхВложенийСтадии(СтадияВход)
	РезультатФункции = Справочники.СтадииМероприятий.ВернутьМассивДанныхВложенийСтадии(СтадияВход);
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивДанныхВложенийСтадии()

// Проверяет, определены ли даты стадии СтадияВход в контексте закупочной процедуры.
&НаСервереБезКонтекста
Функция ДатыСтадийОпределеныВЗакупочнойПроцедуре(СтадияВход)
	РезультатФункции = Ложь;
	// Подготовка закупки.
	МассивСтадийПодготовка = Справочники.СтадииМероприятий.ВернутьСтадииНачалоПодготовкиЗакупкиКПубликации();
	Если МассивСтадийПодготовка.Найти(СтадияВход) <> Неопределено Тогда
		РезультатФункции = Истина;
	Иначе
		// Проверка пройдена.
	КонецЕсли;
	// Официальное объявление.
	МассивСтадийОфициальноеОбъявление = Справочники.СтадииМероприятий.ВернутьСтадииОфициальноеОбъявлениеЗакупки();
	Если МассивСтадийОфициальноеОбъявление.Найти(СтадияВход) <> Неопределено Тогда
		РезультатФункции = Истина;
	Иначе
		// Проверка пройдена.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ДатыСтадийОпределеныВЗакупочнойПроцедуре()

// Возвращает массив обязательных вложений для стадии СтадияВход.
&НаСервереБезКонтекста
Функция ПолучитьДанныеОбязательныхВложенийСтадии(СтадияВход)
	РезультатФункции = Справочники.СтадииМероприятий.ВернутьМассивДанныхВложенийСтадии(СтадияВход, Истина);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьДанныеОбязательныхВложенийСтадии()

// Возвращает массив отбора для подстановки в форму выбора 
// прикрепляемого документа по документу ДокументБдВход.
&НаСервере
Функция ВернутьМассивОтбораПоТипуДокумента(ДокументБдВход)
	// Инициализация.
	РезультатФункции = Новый Массив;
	КонтекстОбъекта = Объект.Контекст;
	Если Объект.ВидМероприятия = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура Тогда
		ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
		// Выбор способа отбора по входному документу.
		Если ТипЗнч(ДокументБдВход) = Тип("СправочникСсылка.СправочникиБД") Тогда
			РезультатФункции = Новый Массив;			// Не устанавливаем специфический отбор.
		ИначеЕсли ТипЗнч(ДокументБдВход) = Тип("СправочникСсылка.ДокументыБД") Тогда
			ДокументПредложениеПоставщика = Справочники.ДокументыБД.НайтиПоНаименованию("ПредложениеПоставщика", , , ТекИБ);
			ДокументПротоколВыбораПобедителей = Справочники.ДокументыБД.НайтиПоНаименованию("ПротоколВыбораПобедителей", , , ТекИБ);
			ДокументПротоколОтменыЗакупочнойПроцедуры = Справочники.ДокументыБД.НайтиПоНаименованию("ПротоколОтменыЗакупочнойПроцедуры", , , ТекИБ);
			ДокументОповещениеАккредитованныхПоставщиковОТоргах = Справочники.ДокументыБД.НайтиПоНаименованию("ОповещениеАккредитованныхПоставщиковОТоргах", , , ТекИБ);
			ДокументКвалификацияПоставщика = Справочники.ДокументыБД.НайтиПоНаименованию("КвалификацияПоставщика", , , ТекИБ);
			Если ДокументБдВход = ДокументПротоколВыбораПобедителей Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗакупочнаяПроцедура", КонтекстОбъекта);
				РезультатФункции.Добавить(НовыйПараметр);			
			ИначеЕсли ДокументБдВход = ДокументПротоколОтменыЗакупочнойПроцедуры Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗакупочнаяПроцедура", КонтекстОбъекта);
				РезультатФункции.Добавить(НовыйПараметр);			
			ИначеЕсли ДокументБдВход = ДокументОповещениеАккредитованныхПоставщиковОТоргах Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗакупочнаяПроцедура", КонтекстОбъекта);
				РезультатФункции.Добавить(НовыйПараметр);			
			ИначеЕсли ДокументБдВход = ДокументКвалификацияПоставщика Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗакупочнаяПроцедура", КонтекстОбъекта);
				РезультатФункции.Добавить(НовыйПараметр);			
			Иначе
				РезультатФункции = Новый Массив;
			КонецЕсли;
		Иначе
			РезультатФункции = Новый Массив;
		КонецЕсли;
	Иначе
		// Не выставляем отбор для прочих видов мероприятий.
	КонецЕсли;
	// Вывод результата.
	Возврат РезультатФункции;	
КонецФункции		// ВернутьМассивОтбораПоТипуДокумента()	

// Возвращает структуру, содержащую данные по шаблону мероприятия ШаблонВход.
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхШаблона(ШаблонВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИспользоватьПроизводственныйКалендарь", ШаблонВход.ИспользоватьПроизводственныйКалендарь);
	РезультатФункции.Вставить("ПроизводственныйКалендарь", ШаблонВход.ПроизводственныйКалендарь);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтруктуруДанныхШаблона()

// Возвращает дату, сдвинутую от даты ДатаВход на ДлительностьВход рабочих дней, согласно
// производственному календарю ПроизводственныйКалендарьВход.
&НаСервереБезКонтекста
Функция ПолучитьДатуПоКалендарю_Сервер(ПроизводственныйКалендарьВход, ДатаВход, ДлительностьВход)
	Модуль = ОбщегоНазначения.ОбщийМодуль("КалендарныеГрафикиУХ");
	Если Модуль = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	РезультатФункции = Модуль.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарьВход, ДатаВход, ДлительностьВход);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьДатуПоКалендарю_Сервер()

// Вычисляет разность дат в рабочих днях между датами ДатаОкончанияВход и ДатаНачалаВход,
// исходя из данных производственного календаря КалендарьВход.
&НаСервереБезКонтекста
Функция РазностьДатПоКалендарю_Сервер(КалендарьВход, ДатаНачалаВход, ДатаОкончанияВход)
	РезультатФункции = КалендарныеГрафики.РазностьДатПоКалендарю(КалендарьВход, ДатаНачалаВход, ДатаОкончанияВход);
	Возврат РезультатФункции;
КонецФункции		// РазностьДатПоКалендарю_Сервер()

// Отправляет задачу ответственному ОтветственныйВход за мероприятие МероприятиеВход. 
// Возвращает успешность выполнения операции.
&НаСервереБезКонтекста
Функция ОтправитьЗадачуОтветственномуЗаМероприятие_Сервер(МероприятиеВход, ОтветственныйВход)
	РезультатФункции = Документы.Мероприятие.ОтправитьЗадачуОтветственномуЗаМероприятие(МероприятиеВход, ОтветственныйВход);
	Возврат РезультатФункции;
КонецФункции		// ОтправитьЗадачуОтветственномуЗаМероприятие_Сервер()

// Возвращает массив объекта БД, заполняемых по актуальной стадии 
// для мероприятия МероприятиеВход.
&НаСервереБезКонтекста
Функция ВернутьМассивОбъектовВвода(МероприятиеВход)
	РезультатФункции = Новый Массив;
	АктуальнаяСтадия = Документы.Мероприятие.ПолучитьАктуальнуюСтадиюМероприятия(МероприятиеВход);
	Если ЗначениеЗаполнено(АктуальнаяСтадия) Тогда
		ДанныеВложения = ВернутьМассивДанныхВложенийСтадии(АктуальнаяСтадия);
		Для Каждого ТекДанныеВложения Из ДанныеВложения Цикл
			РезультатФункции.Добавить(ТекДанныеВложения.ТипИтоговогоДокумента);
		КонецЦикла;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить актуальную стадию по мероприятию ""%Мероприятие%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Мероприятие%", Строка(МероприятиеВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ВернутьМассивОбъектовВвода()

// Возвращает массив лотов, сопоста
&НаСервереБезКонтекста
Функция ПолучитьМассивЛотовЗакупки(ЗакупкаВход)
	Имя = "ЗакупочныеПроцедуры";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
	РезультатФункции = Справочники[Имя].ПолучитьЛотыЗакупочнойПроцедуры(ЗакупкаВход, Истина);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивЛотовЗакупки()

// Устанавливает отображение актуальной стадии в документе.
&НаСервере
Процедура ОтобразитьАктуальнуюСтадию()
	АктуальнаяСтадия = Документы.Мероприятие.ПолучитьАктуальнуюСтадиюМероприятия(Объект.Ссылка);
	НовыйЗаголовок = НСтр("ru = 'Ввести документ по стадии: %ИмяСтадии%'");
	НовыйЗаголовок = СтрЗаменить(НовыйЗаголовок, "%ИмяСтадии%", Строка(АктуальнаяСтадия));
	Элементы.ВвестиАкутальныйДокумент.Заголовок = НовыйЗаголовок;
КонецПроцедуры		// ОтобразитьАктуальнуюСтадию()

//  Возвращает минимальную дату, сопоставленную потомкам узла дерева стадий ДеревоВход.
&НаКлиенте
Функция ПолучитьМинимальнуюДатуПотомков(ДеревоВход)
	РезультатФункции = Дата(1, 1, 1);
	Минимум = Дата(3999, 1, 1);
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если ТекСтроки.ГруппирующаяСтрока Тогда
			ТекМинимум = ПолучитьМинимальнуюДатуПотомков(ТекСтроки);
		Иначе
			ТекМинимум = ТекСтроки.ДатаИзменения;
		КонецЕсли; 
		Если ТекМинимум < Минимум Тогда
			Минимум = ТекМинимум;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;	
	КонецЦикла;	
	Если Минимум = Дата(3999, 1, 1) Тогда
		РезультатФункции = Дата(1, 1, 1);
	Иначе
		РезультатФункции = Минимум;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМинимальнуюДатуПотомков()

// Устанавливает всем группам даты минимальной даты подчинённой стадии.
&НаКлиенте
Процедура ОбновитьДатыГрупп(ДеревоВход)
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если ТекСтроки.ГруппирующаяСтрока Тогда
			МинимальнаяДата = ПолучитьМинимальнуюДатуПотомков(ТекСтроки);
			ТекСтроки.ДатаИзменения = МинимальнаяДата;
			ОбновитьДатыГрупп(ТекСтроки);
		Иначе
			// Пропускаем.
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ОбновитьДатыГрупп()

// Заполняет массив МассивЗначение всеми датами из дерева значений стадий ДеревоВход.
&НаКлиенте
Процедура ЗаполнитьМассивДатДереваСтадий(ДеревоВход, МассивЗначение)
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			ТекДата = ТекСтроки.ДатаИзменения;
			МассивЗначение.Добавить(ТекДата);
		Иначе
			ЗаполнитьМассивДатДереваСтадий(ТекСтроки, МассивЗначение);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьМассивДатДереваСтадий()

// Рекурсивно преобразует данные строк дерева ДеревоВход в массив МассивЗначение,
// содержащих структуры с указанием порядкового номера, идентификатора строки,
// стадии и даты изменения.
&НаКлиенте
Процедура ПреобразоватьДеревоСтадийВМассивСтруктур(ДеревоВход, МассивЗначение, СчетчикЗначение, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			СтруктураЗначение = Новый Структура;
			СтруктураЗначение.Вставить("ДатаИзменения",	 ТекСтроки.ДатаИзменения);
			СтруктураЗначение.Вставить("Завершено",		 ТекСтроки.Завершено);
			СтруктураЗначение.Вставить("Идентификатор",	 ТекСтроки.ПолучитьИдентификатор());
			СтруктураЗначение.Вставить("Стадия",		 ТекСтроки.Действие);
			СтруктураЗначение.Вставить("Счетчик",		 СчетчикЗначение);
			МассивЗначение.Добавить(СтруктураЗначение);
			СчетчикЗначение = СчетчикЗначение + 1;
		Иначе
			ПреобразоватьДеревоСтадийВМассивСтруктур(ТекСтроки, МассивЗначение, СчетчикЗначение, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ПреобразоватьДеревоСтадийВМассивСтруктур()

// Возвращает данные строки, идущей следом за строкой с идентификатором ИдентификаторСтрокиВход
// из массива МассивДанныхСтрокВход.
&НаКлиенте
Функция НайдиСтруктуруСледующейСтрокиВМассиве(МассивДанныхСтрокВход, ИдентификаторСтрокиВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Идентификатор", -1);
	РезультатФункции.Вставить("Счетчик", -1);
	РезультатФункции.Вставить("Стадия", ПредопределенноеЗначение("Справочник.СтадииМероприятий.ПустаяСсылка"));
	РезультатФункции.Вставить("ДатаИзменения", Дата(1, 1, 1));
	НайденаСтрока = Ложь;
	Для Каждого ТекМассивДанныхСтрокВход Из МассивДанныхСтрокВход Цикл
		Если НайденаСтрока Тогда
			РезультатФункции.Вставить("Идентификатор",	 ТекМассивДанныхСтрокВход.Идентификатор);
			РезультатФункции.Вставить("Счетчик",		 ТекМассивДанныхСтрокВход.Счетчик);
			РезультатФункции.Вставить("Стадия",			 ТекМассивДанныхСтрокВход.Стадия);
			РезультатФункции.Вставить("ДатаИзменения",	 ТекМассивДанныхСтрокВход.ДатаИзменения);
			Прервать;				// Искомая строка найдена.
		Иначе
			Если ТекМассивДанныхСтрокВход.Идентификатор = ИдентификаторСтрокиВход Тогда
				НайденаСтрока = Истина;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;	
КонецФункции		// НайдиСтруктуруСледующейСтрокиВМассиве()

// Рассчитывает новую дату окончания стадии, которая стартует ДатаНачалаВход, продолжается
// ДлительностьВход. В шаблоне мероприятия ШаблонВход указан производственный календарь для
// исключения праздничных и выходных дней.
&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияСтадии(ШаблонВход, ДатаНачалаВход, ДлительностьВход, ПроизводственныйКалендарьВход)
	РезультатФункции = ДатаНачалаВход;
	ПустойКалендарь = ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка");
	Если ЗначениеЗаполнено(ШаблонВход) Тогда
		Если ЗначениеЗаполнено(ПроизводственныйКалендарьВход) Тогда
			РезультатФункции = ПолучитьДатуПоКалендарю_Сервер(ПроизводственныйКалендарьВход, ДатаНачалаВход, (ДлительностьВход - 1));
		Иначе
			РезультатФункции = (ДатаНачалаВход + (ДлительностьВход - 1)*24*60*60);
		КонецЕсли;
	Иначе
		РезультатФункции = (ДатаНачалаВход + (ДлительностьВход - 1)*24*60*60);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РассчитатьДатуОкончанияСтадии()

// Обновляет фактическую длительность в дереве стадий ДеревоВход по массиву данных
// стадий МассивДанныхСтрокВход. Параметр ГлубинаРекурсииВход защищает от бесконечной
// рекурсии.
&НаКлиенте
Процедура ВыставитьФактическуюДлительностьПоМассиву(ДеревоВход, МассивДанныхСтрокВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	ПустойКалендарь = ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка");
	НовыйКалендарь = ПустойКалендарь;
	Если (Объект.ИспользоватьПроизводственныйКалендарь) И (ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь)) Тогда
		НовыйКалендарь = Объект.ПроизводственныйКалендарь;
	Иначе
		НовыйКалендарь = ПустойКалендарь;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			// Получим следующую за данной стадией дату.
			ТекДата = ТекСтроки.ДатаИзменения;
			ТекИдентификатор = ТекСтроки.ПолучитьИдентификатор();
			ДанныеСледующейСтроки = НайдиСтруктуруСледующейСтрокиВМассиве(МассивДанныхСтрокВход, ТекИдентификатор);
			СледующаяДата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСледующейСтроки, "ДатаИзменения", Дата(1, 1, 1));
			// Вычислим длительность по двум датам.
			НоваяДлительность = 0;
			Если ЗначениеЗаполнено(СледующаяДата) Тогда
				НоваяДлительность = РассчитатьДлительностьСтадии(Объект.ШаблонМероприятия, ТекДата, СледующаяДата - 60*60*24);
			Иначе
				Если ЗначениеЗаполнено(ТекСтроки.ФактическаяДлительность) Тогда
					НоваяДлительность = ТекСтроки.ФактическаяДлительность;			// Не будем затирать введённые пользователем значения.
				Иначе
					НоваяДлительность = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекСтроки.Действие, "Длительность");
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяДлительность) Тогда
				НоваяДлительность = 0;
			Иначе
				// Оставляем длительность.
			КонецЕсли;	
			// Выставим значение длительности и даты окончания.
			ТекСтроки.ФактическаяДлительность	 = НоваяДлительность;
			Если НоваяДлительность >= 1 Тогда
				ДатаСледующейСтадииПлан = РассчитатьДатуОкончанияСтадии(Объект.ШаблонМероприятия, ТекСтроки.ДатаИзменения, НоваяДлительность, НовыйКалендарь);
				ТекСтроки.ДатаОкончания = ДатаСледующейСтадииПлан;
			Иначе
				ТекСтроки.ДатаОкончания				 = ТекСтроки.ДатаИзменения;
			КонецЕсли;	
		Иначе
			ВыставитьФактическуюДлительностьПоМассиву(ТекСтроки, МассивДанныхСтрокВход, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ВыставитьФактическуюДлительностьПоМассиву()

// Возвращает массив структур с данными строк дерева ДеревоВход.
&НаКлиенте
Функция ВернутьМассивСтруктурСтадий(ДеревоВход)
	РезультатФункции = Новый Массив;
	СчетчикСтрок = 0;
	ПреобразоватьДеревоСтадийВМассивСтруктур(ДеревоВход, РезультатФункции, СчетчикСтрок);
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивСтруктурСтадий()

// Обновляет данные фактических длительностей стадий.
&НаКлиенте
Процедура ОбновитьФактическуюДлительностьСтадий(ДеревоВход)
	МассивДанныхСтрок = ВернутьМассивСтруктурСтадий(ДеревоВход);
	ВыставитьФактическуюДлительностьПоМассиву(ДеревоВход, МассивДанныхСтрок);
КонецПроцедуры		// ОбновитьФактическуюДлительностьСтадий()

// Выполняет контроль последовательности стадий в дереве ДеревоВход, согласно шаблону мероприятия, если
// данный контроль требуется. Когда контроль не пройден - устанавливает в Отказ значение Ложь.
&НаКлиенте
Процедура КонтрольПоследовательностиСтадий(ДеревоВход, Отказ)
	ТекШаблон = Объект.ШаблонМероприятия;
	ПустаяСтадия = ПредопределенноеЗначение("Справочник.СтадииМероприятий.ПустаяСсылка");
	Если ЗначениеЗаполнено(ТекШаблон) Тогда
		КонтролироватьПоследовательностьСтадий = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекШаблон, "КонтролироватьПоследовательностьСтадий");
		Если КонтролироватьПоследовательностьСтадий Тогда
			// Получим массив стадий из дерева.
			МассивДанныхСтрок = ВернутьМассивСтруктурСтадий(ДеревоВход);		
			МассивСтадийДерева = Новый Массив;
			Для Каждого ТекМассивДанныхСтрок Из МассивДанныхСтрок Цикл
				МассивСтадийДерева.Добавить(ТекМассивДанныхСтрок.Стадия);
			КонецЦикла;	
			МассивСтадийДерева = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтадийДерева);
			МассивСтадийДерева = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСтадийДерева);
			// Получим массив стадий из шаблона.
			МассивСтадийШаблона = ВернутьМассивСтадийШаблона(ТекШаблон, Объект.Контекст);
			МассивСтадийШаблона = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтадийШаблона);
			МассивСтадийШаблона = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСтадийШаблона);
			// Проанализируем совпадение массивов.
			Счетчик = 0;
			Для Каждого ТекМассивСтадийШаблона Из МассивСтадийШаблона Цикл
				СтадияДерева = ПустаяСтадия;
				Если МассивСтадийДерева.Количество() >= Счетчик Тогда
					СтадияДерева = МассивСтадийДерева[Счетчик];
				Иначе
					СтадияДерева = ПустаяСтадия;
				КонецЕсли;	
				Если ТекМассивСтадийШаблона <> СтадияДерева Тогда
					Отказ = Истина;
					ТекстСообщения = НСтр("ru = 'Стадия номер %НомерСтадии% (%СтадияШаблона%) в шаблоне не совпадает со стадией (%СтадияДерева%) в дереве стадий текущего документа. Запись отменена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтадии%", Строка(Счетчик + 1));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтадияШаблона%", Строка(ТекМассивСтадийШаблона));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтадияДерева%", Строка(СтадияДерева));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					Прервать;
				Иначе
					// Проверка пройдена. Выполняем анализ далее.
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЦикла;	
		Иначе
			// Контроль не требуется.
		КонецЕсли;
	Иначе
		// Шаблон не указан. Не выполняем контроль последовательности.
	КонецЕсли;
КонецПроцедуры		// КонтрольПоследовательностиСтадий()

// Выполняет контроль последовательности стадий в дереве ДеревоВход, согласно шаблону мероприятия, если
// данный контроль требуется. Когда контроль не пройден - устанавливает в Отказ значение Ложь.
&НаКлиенте
Процедура КонтрольДлительностиСтадий(ДеревоВход, Отказ, ГлубинаРекурсииВход = 0)
	ТекШаблон = Объект.ШаблонМероприятия;
	Если ЗначениеЗаполнено(ТекШаблон) Тогда
		ДанныеДлительности = ВернутьДанныеДлительностиСтадий(ТекШаблон);
		Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
			Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
				ТекДлительность = ТекСтроки.ФактическаяДлительность;
				ТекСтадия = ТекСтроки.Действие;
				// Извлечение настроек для проверки.
				СтруктураДлительностиСтадии = ДанныеДлительности.Получить(ТекСтадия);
				Если СтруктураДлительностиСтадии <> Неопределено Тогда
					ДлительностьСтадииШаблона = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДлительностиСтадии, "Длительность", 0);
					НастройкаНеБолее = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДлительностиСтадии, "НеБолее", Ложь);
					НастройкаНеМенее = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДлительностиСтадии, "НеМенее", Ложь);
					// Проверка на превышение.
					Если НастройкаНеБолее Тогда
						Если ДлительностьСтадииШаблона < ТекДлительность Тогда
							ТекстСообщения = НСтр("ru = 'Длительность стадии %Стадия% (%ДлительностьДерева% дн) превышает допустимую (%ДлительностьШаблона% дн). Запись отменена.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекСтадия));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДлительностьДерева%", Строка(ТекДлительность));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДлительностьШаблона%", Строка(ДлительностьСтадииШаблона));
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							Отказ = Истина;
						Иначе
							// Проверка пройдена
						КонецЕсли;
					Иначе
						// Не требуется проверка на превышение длительности.
					КонецЕсли;
					// Проверка на недостаток.
					Если НастройкаНеМенее Тогда
						Если ДлительностьСтадииШаблона > ТекДлительность Тогда
							ТекстСообщения = НСтр("ru = 'Длительность стадии %Стадия% (%ДлительностьДерева% дн) меньше допустимой (%ДлительностьШаблона% дн). Запись отменена.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекСтадия));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДлительностьДерева%", Строка(ТекДлительность));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДлительностьШаблона%", Строка(ДлительностьСтадииШаблона));
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							Отказ = Истина;
						Иначе
							// Проверка пройдена
						КонецЕсли;
					Иначе
						// Не требуется проверка на превышение длительности.
					КонецЕсли;
				Иначе
					// Нет данных по длительности для текущей стадии. Пропускаем проверку.
				КонецЕсли;
			Иначе
				КонтрольДлительностиСтадий(ТекСтроки, ГлубинаРекурсииВход + 1);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		// Шаблон не указан. Не выполняем контроль длительности.
	КонецЕсли;
КонецПроцедуры		// КонтрольДлительностиСтадий()	

// Устанавливает дату окончания по последней стадии.
&НаКлиенте
Процедура ВыставитьДатуОкончанияПоСтадиям()
	СтруктураСтадии = ПолучитьСтруктуруМаксимальнойСтадии();
	МаксимальнаяДата	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСтадии, "ДатаИзменения", Дата(1, 1, 1));
	МаксимальнаяСтадия	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСтадии, "Стадия", ПредопределенноеЗначение("Справочник.СтадииМероприятий.ПустаяСсылка"));
	Если ЗначениеЗаполнено(МаксимальнаяСтадия) Тогда
		ДлительностьМаксимальнойСтадии = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(МаксимальнаяСтадия, "Длительность");
		НоваяДатаИзменения = МаксимальнаяДата + 60*60*24*ДлительностьМаксимальнойСтадии;
		Объект.ДатаОкончания = НоваяДатаИзменения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить последнюю стадию'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;		
КонецПроцедуры

// Возвращает необходимость напоминания по стадии СтадияВход в дате 
// ДатаИзмененияВход согласно отметкам в списке значений СписокВход.
&НаКлиентеНаСервереБезКонтекста
Функция ВернутьНеобходимостьНапоминанияСтадииИзСписка(СтадияВход, ДатаИзмененияВход, СписокВход)
	РезультатФункции = Ложь;
	Для Каждого ТекСписокВход Из СписокВход Цикл
		ТекЗначение = ТекСписокВход.Значение;
		СовпадаютДаты = (ТекЗначение.ДатаИзменения = ДатаИзмененияВход);
		СовпадаютСтадии = (ТекЗначение.Стадия = СтадияВход);
		Если (СовпадаютДаты) И (СовпадаютСтадии) Тогда
			РезультатФункции = ТекСписокВход.Пометка;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ВернутьНеобходимостьНапоминанияСтадииИзСписка()

// Выставляет флаги напоминаний в дереве стадий УзелДереваВход по отметкам
// списка значений СписокСтадийВход.
&НаКлиенте
Процедура УстановитьСтадииНапоминаний(УзелДереваВход, СписокСтадийВход)
	Для Каждого ТекЭлементы Из УзелДереваВход.ПолучитьЭлементы() Цикл
		Если ТекЭлементы.ГруппирующаяСтрока Тогда
			УстановитьСтадииНапоминаний(ТекЭлементы, СписокСтадийВход);
		Иначе	
			ТекСтадия = ТекЭлементы.Действие;
			ТекДатаИзменения = ТекЭлементы.ДатаИзменения;
			НовыйПризнакНапоминания = ВернутьНеобходимостьНапоминанияСтадииИзСписка(ТекСтадия, ТекДатаИзменения, СписокСтадийВход);
			ТекЭлементы.НапомнитьОСтадии = НовыйПризнакНапоминания;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры		// УстановитьСтадииНапоминаний()

// Сворачивает дерево этапов на форме.
&НаКлиенте
Процедура СвернутьДерево()
	ЭлементыДерева = ДеревоСтадий.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДерева Из ЭлементыДерева Цикл 
		ТекИдентификатор = ТекЭлементыДерева.ПолучитьИдентификатор();
		Элементы.ДеревоСтадий.Свернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры		// СвернутьДерево()

// Разворачивает дерево на форме.
&НаКлиенте
Процедура РазвернутьДерево()
	ЭлементыДереваСтадий = ДеревоСтадий.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДереваСтадий Из ЭлементыДереваСтадий Цикл 
		ТекИдентификатор = ТекЭлементыДереваСтадий.ПолучитьИдентификатор();
		Элементы.ДеревоСтадий.Развернуть(ТекИдентификатор, Истина);
	КонецЦикла;
КонецПроцедуры		// РазвернутьДерево()

// Добавляет ко всем датам позже ДатаВход в дереве ДеревВход
// сдвиг на величину СдвигВход дней. Параметр ГлубинаРекурсииВход
// защищает от бесконечной рекурсии.
&НаКлиенте
Процедура СдвинутьДатыПослеВыбранной(ДеревоВход, ДатаВход, СдвигВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли; 
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			Если ТекСтроки.ДатаИзменения > ДатаВход Тогда
				НоваяДатаИзменения = ТекСтроки.ДатаИзменения + СдвигВход*(24*60*60);
				ТекСтроки.ДатаИзменения = НоваяДатаИзменения;
			Иначе
				// Выполняем далее.
			КонецЕсли;
		Иначе
			СдвинутьДатыПослеВыбранной(ТекСтроки, ДатаВход, СдвигВход, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// СдвинутьДатыПослеВыбранной()

// Рекурсивно увеличивает параметр КоличествоСтадийЗначение, когда находит 
// в дереве ДеревоВход незавершенные стадии с датой начала меньше ДатаВход.
// Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаКлиенте
Процедура ЗаполнитьКоличествоНезавершенныхСтадийДоДаты(ДатаВход, ДеревоВход, КоличествоСтадийЗначение, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли; 
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			ДатаМеньшеВходной = (ТекСтроки.ДатаИзменения < ДатаВход);
			СтадияЗавершена = (ТекСтроки.Завершено);
			Если (ДатаМеньшеВходной) И (НЕ СтадияЗавершена) Тогда
				КоличествоСтадийЗначение = КоличествоСтадийЗначение + 1;
			Иначе
				// Выполняем далее.
			КонецЕсли;
		Иначе
			ЗаполнитьКоличествоНезавершенныхСтадийДоДаты(ТекСтроки, ДатаВход, КоличествоСтадийЗначение, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьКоличествоНезавершенныхСтадийДоДаты()

// Завершает все стадии в дереве ДеревоВход, дата начала которых меньше даты
// ДеревоВход. Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаКлиенте
Процедура ЗавершитьВсеСтадииДоДаты(ДатаВход, ДеревоВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли; 
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			ДатаМеньшеВходной = (ТекСтроки.ДатаИзменения < ДатаВход);
			СтадияЗавершена = (ТекСтроки.Завершено);
			Если (ДатаМеньшеВходной) И (НЕ СтадияЗавершена) Тогда
				ТекСтроки.Завершено = Истина;
				ТекСтроки.Прогресс = 100;
			Иначе
				// Выполняем далее.
			КонецЕсли;
		Иначе
			ЗавершитьВсеСтадииДоДаты(ТекСтроки, ДатаВход, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ЗавершитьВсеСтадииДоДаты()

// Изменяет отображение доступности команд завершения текущей стадии.
&НаКлиенте
Процедура ОтобразитьСостояниеКнопокЗавершенияСтадии()
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекСтадияЗавершена = ТекДанные.Завершено;
		Элементы.ЗавершитьТекущееДействие.Видимость		 = НЕ ТекСтадияЗавершена;
		Элементы.ОтменитьТекущееДействие.Видимость		 = ТекСтадияЗавершена;
		Элементы.ЗавершитьТекущееДействие1.Видимость	 = НЕ ТекСтадияЗавершена;
		Элементы.ОтменитьТекущееДействие1.Видимость		 = ТекСтадияЗавершена;
	Иначе
		Элементы.ЗавершитьТекущееДействие.Видимость		 = НЕ ТекСтадияЗавершена;
		Элементы.ОтменитьТекущееДействие.Видимость		 = ТекСтадияЗавершена;
		Элементы.ЗавершитьТекущееДействие1.Видимость	 = Ложь;
		Элементы.ОтменитьТекущееДействие1.Видимость		 = Ложь;
	КонецЕсли;
КонецПроцедуры		// ОтобразитьСостояниеКнопокЗавершенияСтадии()

// Из массив идентификаторов МассивДанныхСтрокВход выделяет массив идентификаторов 
//стадий, следующих за строкой с идентификатором ИдентификаторВход. 
&НаКлиенте
Функция ВыделитьИдентификаторыПоследователейСтадии(МассивДанныхСтрокВход, ИдентификаторВход)
	РезультатФункции = Новый Массив;
	НайденаСтрока = Ложь;
	Для Каждого ТекМассивДанныхСтрокВход Из МассивДанныхСтрокВход Цикл
		Если НайденаСтрока Тогда
			РезультатФункции.Добавить(ТекМассивДанныхСтрокВход.Идентификатор);
		Иначе
			Если ИдентификаторВход = ТекМассивДанныхСтрокВход.Идентификатор Тогда
				НайденаСтрока = Истина;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;	
КонецФункции		// ВыделитьИдентификаторыПоследователейСтадии()

// Выполняет сдвиг дат стадий с идентификаторами из массива МассивИдентификаторовВход
// на величину РазмерСдвигаВход в дереве стадий ДеревоВход. 
&НаКлиенте
Процедура ВыполнитьСдвигСтадийПоМассивуИдентификаторов(ДеревоВход, МассивИдентификаторовВход, РазмерСдвигаВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			ТекИдентификатор = ТекСтроки.ПолучитьИдентификатор();
			Если МассивИдентификаторовВход.Найти(ТекИдентификатор) <> Неопределено Тогда
				ТекСтроки.ДатаИзменения = ТекСтроки.ДатаИзменения + РазмерСдвигаВход;
			Иначе
				// Не требуется сдвиг этой даты.
			КонецЕсли;	
		Иначе
			ВыполнитьСдвигСтадийПоМассивуИдентификаторов(ТекСтроки, МассивИдентификаторовВход, РазмерСдвигаВход, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ВыполнитьСдвигСтадийПоМассивуИдентификаторов()	

// Сдвигает все стадии, следующей за строкой с идентификатором ИдентификаторВход
// в дереве ДеревоВход.
&НаКлиенте
Процедура СдвинутьДатыСтадийПослеВыбранной(ДеревоВход, МассивДанныхСтрокВход, ДатаВход, ТекущаяДлительностьВход, ИдентификаторВход, ШаблонВход = Неопределено)
	ДанныеСледующейСтроки = НайдиСтруктуруСледующейСтрокиВМассиве(МассивДанныхСтрокВход, ИдентификаторВход);
	СледующаяДата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСледующейСтроки, "ДатаИзменения", Дата(1, 1, 1));
	ПустойКалендарь = ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка");
	Если ЗначениеЗаполнено(СледующаяДата) Тогда
		НовыйКалендарь = ПустойКалендарь;
		Если (Объект.ИспользоватьПроизводственныйКалендарь) И (ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь)) Тогда
			НовыйКалендарь = Объект.ПроизводственныйКалендарь;
		Иначе
			НовыйКалендарь = ПустойКалендарь;
		КонецЕсли;
		ДатаСледующейСтадииПлан = РассчитатьДатуОкончанияСтадии(Объект.ШаблонМероприятия, ДатаВход, ТекущаяДлительностьВход, НовыйКалендарь);
		РазмерСдвига = (ДатаСледующейСтадииПлан - (СледующаяДата - 1*(24*60*60)));
		МассивИдентификаторовПоследующихСтадий = ВыделитьИдентификаторыПоследователейСтадии(МассивДанныхСтрокВход, ИдентификаторВход);
		ВыполнитьСдвигСтадийПоМассивуИдентификаторов(ДеревоВход, МассивИдентификаторовПоследующихСтадий, РазмерСдвига);
	Иначе
		// Следующая дата не задана. Сдвиг не требуется.
	КонецЕсли;
КонецПроцедуры		// СдвинутьДатыСтадийПослеВыбранной()

// Завершает выполнение стадии в строке СтрокаСтадииВход таблицы стадий.
// Возвращает успешность выполнения операции.
&НаКлиенте
Функция ЗавершитьСтадиюВСтроке(СтрокаСтадииВход)
	// Инициализация.
	РезультатФункции = Истина;
	// Получим данные обязательных вложений из настроек стадии.
	ДанныеВложенийСтадии = ПолучитьДанныеОбязательныхВложенийСтадии(СтрокаСтадииВход.Действие);
	// Получим данные о заполненных вложениях на форме.
	МассивЗаполненныхИдентификаторов = Новый Массив;
	Для Каждого ТекВложенияФорма Из СтрокаСтадииВход.ВложенияФорма Цикл
		Если ЗначениеЗаполнено(ТекВложенияФорма.ИтоговыйДокумент) Тогда
			МассивЗаполненныхИдентификаторов.Добавить(ТекВложенияФорма.ИдентификаторДокумента);
		Иначе
			// Выполняем далее
		КонецЕсли;
	КонецЦикла;	
	// Сравним данные из формы с данными в настройках стадии.
	Для Каждого ТекДанныеВложенийСтадии Из ДанныеВложенийСтадии Цикл
		ТекИдентификатор = ТекДанныеВложенийСтадии.ИдентификаторДокумента;
		ИдентификаторНайден = (МассивЗаполненныхИдентификаторов.Найти(ТекИдентификатор) <> Неопределено);
		Если НЕ ИдентификаторНайден Тогда
			НовоеПредставление = "";
			Если ЗначениеЗаполнено(ТекДанныеВложенийСтадии.ПредставлениеДокумента) Тогда
				НовоеПредставление = ТекДанныеВложенийСтадии.ПредставлениеДокумента;
			Иначе
				НовоеПредставление = Строка(ТекДанныеВложенийСтадии.ТипИтоговогоДокумента);
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'В стадии %Стадия% не заполнен обязательный документ вложения %Документ%. Завершение стадии отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(СтрокаСтадииВход.Действие));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(НовоеПредставление));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		Иначе
			// Проверка пройдена. Выполняем далее.
		КонецЕсли;
	КонецЦикла;	
	// Непосредственное завершение стадии.
	Если РезультатФункции Тогда
		СтрокаСтадииВход.Завершено = Истина;
		СтрокаСтадииВход.Прогресс = 100;
	Иначе
		СтрокаСтадииВход.Завершено = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЗавершитьСтадиюВСтроке()

// Завершает все стадии в дереве стадий ДеревоВход, идентификаторы
// которых находятся в массиве МассивИдентификаторовВход.
&НаКлиенте
Процедура ЗавершитьВсеСтадииПоИдентификаторам(ДеревоВход, МассивИдентификаторовВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			ТекИдентификатор = ТекСтроки.ПолучитьИдентификатор();
			Если МассивИдентификаторовВход.Найти(ТекИдентификатор) <> Неопределено Тогда
				ЗавершитьСтадиюВСтроке(ТекСтроки);
			Иначе
				// Не требуется завершать эту стадию.
			КонецЕсли;	
		Иначе
			ЗавершитьВсеСтадииПоИдентификаторам(ТекСтроки, МассивИдентификаторовВход, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ЗавершитьВсеСтадииПоИдентификаторам()

// Завершает все стадии в дереве стадий ДеревоВход, идентификаторы
// которых находятся в массиве МассивИдентификаторовВход.
&НаКлиенте
Процедура ОтменитьВсеСтадииПоИдентификаторам(ДеревоВход, МассивИдентификаторовВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтроки.ГруппирующаяСтрока Тогда
			ТекИдентификатор = ТекСтроки.ПолучитьИдентификатор();
			Если МассивИдентификаторовВход.Найти(ТекИдентификатор) <> Неопределено Тогда
				ТекСтроки.Завершено = Ложь;
			Иначе
				// Не требуется отменять эту стадию.
			КонецЕсли;	
		Иначе
			ОтменитьВсеСтадииПоИдентификаторам(ТекСтроки, МассивИдентификаторовВход, ГлубинаРекурсииВход + 1);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры		// ОтменитьВсеСтадииПоИдентификаторам()

// Заполняет вложения по текущей стадии.
&НаКлиенте
Процедура ЗаполнитьВложенияТекущейСтроки(ОчищатьДанныеВход = Ложь)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ОчищатьДанныеВход Тогда
			ТекДанные.ВложенияФорма.Очистить();
		Иначе
			// Не требуется очистка.
		КонецЕсли;
		ДанныеВложений = ВернутьМассивДанныхВложенийСтадии(ТекДанные.Действие);
		Для Каждого ТекДанныеВложений Из ДанныеВложений Цикл
			НоваяСтрока = ТекДанные.ВложенияФорма.Добавить();
			НоваяСтрока.ПредставлениеДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ПредставлениеДокумента", "");
			НоваяСтрока.ТипИтоговогоДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ТипИтоговогоДокумента", Неопределено);
			НоваяСтрока.ИдентификаторДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ИдентификаторДокумента", "");
			НоваяСтрока.Обязательный			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "Обязательный", Ложь);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПредставлениеДокумента) Тогда
				НоваяСтрока.ПредставлениеДокумента = Строка(НоваяСтрока.ТипИтоговогоДокумента);
			Иначе
				// Значение установлено.
			КонецЕсли;	
		КонецЦикла;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьВложенияТекущейСтроки()

// Открывает форму объекта БД ТипДокументаВход с дополнительными 
// параметрами ДополнительныеПараметрыВход.
&НаКлиенте
Процедура ОткрытьФормуПоТипуОбъекта(ТипДокументаВход, ДополнительныеПараметрыВход) 
	НаименованиеДокумента = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТипДокументаВход, "Наименование");
	Если ТипЗнч(ТипДокументаВход) = Тип("СправочникСсылка.СправочникиБД") Тогда
		// Справочник.
		ОткрытьФорму("Справочник." + НаименованиеДокумента + ".ФормаОбъекта", ДополнительныеПараметрыВход);
	ИначеЕсли ТипЗнч(ТипДокументаВход) = Тип("СправочникСсылка.ДокументыБД") Тогда
		// Документ.
		ОткрытьФорму("Документ." + НаименованиеДокумента + ".ФормаОбъекта", ДополнительныеПараметрыВход);
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант вложения ""%Вложение%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Вложение%", Строка(ТипДокументаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ОткрытьФормуПоТипуОбъекта()

// Открывает форму документа БД ТипДокументаВход, заполненного по данным текущего мероприятия.
&НаКлиенте
Процедура ОткрытьФормуВложения(ТипДокументаВход)
	ПараметрыФормы = ПолучитьСтруктуруЗаполненияОбъектаБД(ТипДокументаВход, Объект.Ссылка);
	РезультатПолучен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "ЗначениеПолучено", Ложь);
	Если РезультатПолучен Тогда
		СтруктураОснование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "СтруктураОснование", Новый Структура);
		ОткрытьФормуПоТипуОбъекта(ТипДокументаВход, СтруктураОснование);
	Иначе
		// Пропускаем.
	КонецЕсли;
КонецПроцедуры		// ОткрытьФормуВложения()

// Возвращает массив идентификаторов стадий, стоящих до ИскомыйИдентификаторВход в дереве.
&НаКлиенте
Функция ПолучитьМассивНезавершенныхПредшественников(ИскомыйИдентификаторВход)
	РезультатФункции = Новый Массив;
	МассивСтруктурСтадий = ВернутьМассивСтруктурСтадий(ДеревоСтадий);
	Для Каждого ТекМассивСтруктурСтадий Из МассивСтруктурСтадий Цикл
		Если ТекМассивСтруктурСтадий.Идентификатор = ИскомыйИдентификаторВход Тогда
			Прервать;
		Иначе
			Если НЕ ТекМассивСтруктурСтадий.Завершено Тогда
				РезультатФункции.Добавить(ТекМассивСтруктурСтадий.Идентификатор);
			Иначе
				// Стадия завершена.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивНезавершенныхПредшественников()

// Возвращает массив идентификаторов стадий, следующих за ИскомыйИдентификаторВход.
&НаКлиенте
Функция ПолучитьМассивЗавершенныхПоследователей(ИскомыйИдентификаторВход)
	РезультатФункции = Новый Массив;
	МассивСтруктурСтадий = ВернутьМассивСтруктурСтадий(ДеревоСтадий);
	ИдентификаторНайден = Ложь;
	Для Каждого ТекМассивСтруктурСтадий Из МассивСтруктурСтадий Цикл
		Если ТекМассивСтруктурСтадий.Идентификатор = ИскомыйИдентификаторВход Тогда
			ИдентификаторНайден = Истина;
		Иначе
			Если (ИдентификаторНайден) И (ТекМассивСтруктурСтадий.Завершено) Тогда
				РезультатФункции.Добавить(ТекМассивСтруктурСтадий.Идентификатор);
			Иначе
				// Стадия завершена.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивНезавершенныхПредшественников()

// Рассчитывает длительность стадии в рабочих днях, которая стартует ДатаНачалаВход и заканчивается
// ДатаОкончанияВход  и содержится в шаблоне мероприятия ШаблонВход.
&НаКлиенте
Функция РассчитатьДлительностьСтадии(ШаблонВход, ДатаНачалаВход, ДатаОкончанияВход)
	РезультатФункции = 0;
	ПустойКалендарь	= ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка");
	Если ЗначениеЗаполнено(ШаблонВход) Тогда
		СтруктураШаблона = ПолучитьСтруктуруДанныхШаблона(ШаблонВход);	
		ИспользоватьПроизводственныйКалендарь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураШаблона, "ИспользоватьПроизводственныйКалендарь", Ложь);
		ПроизводственныйКалендарь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураШаблона, "ПроизводственныйКалендарь", ПустойКалендарь);
		Если (ИспользоватьПроизводственныйКалендарь) И (ЗначениеЗаполнено(ПроизводственныйКалендарь)) Тогда
			РезультатФункции = РазностьДатПоКалендарю_Сервер(ПроизводственныйКалендарь, ДатаНачалаВход, ДатаОкончанияВход);
		Иначе
			РезультатФункции = Окр((ДатаОкончанияВход - ДатаНачалаВход)/(24*60*60)) + 1;
		КонецЕсли;
	Иначе
		РезультатФункции = Окр((ДатаОкончанияВход - ДатаНачалаВход)/(24*60*60)) + 1;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РассчитатьДлительностьСтадии()

// Выполняет открытие формы НастройкиПроцессаВыбора для текущего объекта.
&НаКлиенте
Процедура ОткрытьФормуНастройки(ВладелецНастройкиВход)
	НастройкаПроцессаВыбора = ПолучитьНастройкуВыбора(ВладелецНастройкиВход);
	Если НастройкаПроцессаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ПараметрыФормы = Новый Структура("Ключ, ВладелецОбъектов", НастройкаПроцессаВыбора, ВладелецНастройкиВход);
		Имя = "Справочник.НастройкиПроцессаВыбора.ФормаОбъекта";
		ОткрытьФорму(Имя, ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры		// ОткрытьФормуНастройки()

&НаСервере
Функция ПолучитьНастройкуВыбора(ВладелецНастройкиВход)
	Модуль = ОбщегоНазначения.ОбщийМодуль("ВыборОбъектовВызовСервераУХ");
	Если Модуль = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Модуль.НастройкаПроцессаВыбораВладельца(ВладелецНастройкиВход, Истина);
КонецФункции

&НаКлиенте
Процедура ВыборЛотаДляНастройкиПроцесса_Завершение(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		МетодОценнки = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ЗначениеВыбора, "МетодОценкиПредложенийПоставщиков");
		Имя = "Перечисление.МетодыОценкиПредложенийПоставщиков.ПоЦенам";
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И МетодОценнки = ПредопределенноеЗначение(Имя) Тогда
			ТекстСообщения = НСтр("ru = 'Для метода оценки по ценам не требуется предварительная настройка. Перейдите в протокол выбора победителя для оценки предложения.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			ОткрытьФормуНастройки(ЗначениеВыбора);
		КонецЕсли;
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ВыборЛотаДляНастройкиПроцесса_Завершение()
		
// Выбирает лот по текущей закупочной процедуре и выводит на основании
// него форму документа ОбъектБдВход.
&НаКлиенте
Функция ВыбратьЛотИВвестиДокумент(ОбъектБдВход, ИмяОповещенияВход)
	РезультатФункции = Истина;
	МассивЛотов = ПолучитьМассивЛотовЗакупки(Объект.Контекст);
	Если МассивЛотов.Количество() = 0 Тогда
		СтруктураОснование = Новый Структура;
		РезультатФункции = Истина;
	ИначеЕсли МассивЛотов.Количество() = 1 Тогда
		СтруктураОснование = Новый Структура("Основание", МассивЛотов[0]);
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивЛотов);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заголовок", НСтр("ru = 'Выберите лот'"));
		СтруктураПараметров.Вставить("Список", СписокВыбора);
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("ОбъектБД", ОбъектБдВход);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(ИмяОповещенияВход, ЭтотОбъект, СтруктураДополнительныхПараметров);
		Имя = "ОбщаяФорма.ФормаВыбораИзСпискаУХ"; 
		ОткрытьФорму(Имя, СтруктураПараметров, , , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ВыбратьЛотИВвестиДокумент()

&НаКлиенте
Процедура ВыборЛота_Завершение(ЗначениеВыбора, ДопПараметры) Экспорт
    Если ЗначениеВыбора <> Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		ТекОбъектБД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ОбъектБД", Неопределено);
		Если ТекОбъектБД <> Неопределено Тогда
			НаименованиеДокумента = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекОбъектБД, "Наименование");
			Если ТекОбъектБД <> Неопределено Тогда
				ПараметрыФормы = Новый Структура("Основание", ЗначениеВыбора);
				ОткрытьФормуПоТипуОбъекта(ТекОбъектБД, ПараметрыФормы);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить объект для ввода. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить объект для ввода. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
        // Пользователь отказался. Ничего не делаем.
    КонецЕсли;
КонецПроцедуры		// ВыборЛота_Завершение()

// Возвращает структуру для заполнения объекта ОбъектБдВход по мероприятию МероприятиеВход.
&НаКлиенте
Функция ПолучитьСтруктуруЗаполненияОбъектаБД(ОбъектБдВход, МероприятиеВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЗначениеПолучено", Истина);
	СтруктураОснование = Новый Структура;
	НаименованиеОбъекта = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ОбъектБдВход, "Наименование");
	Если ТипЗнч(ОбъектБдВход) = Тип("СправочникСсылка.ДокументыБД") Тогда
		Если СокрЛП(НаименованиеОбъекта) = "ПротоколВыбораПобедителей" Тогда
			// Протокол выбора.
			СтруктураОснование = Новый Структура("Основание", Объект.Контекст);
		ИначеЕсли СокрЛП(НаименованиеОбъекта) = "ПротоколОтменыЗакупочнойПроцедуры" Тогда
			// Протокол отмены.
			СтруктураОснование = Новый Структура("Основание", Объект.Контекст);
		ИначеЕсли СокрЛП(НаименованиеОбъекта) = "ПриказОНазначенииЗакупочнойКомиссии" Тогда
			// Протокол отмены.
			СтруктураОснование = Новый Структура;
		ИначеЕсли СокрЛП(НаименованиеОбъекта) = "ОповещениеАккредитованныхПоставщиковОТоргах" Тогда
			// Приглашение поставщиков.
			СтруктураОснование = Новый Структура("Основание", Объект.Контекст);
		ИначеЕсли СокрЛП(НаименованиеОбъекта) = "ПротоколВскрытияКонвертов" Тогда
			// Протокол вскрытия конвертов.
			СтруктураОснование = Новый Структура("Основание", Объект.Контекст);
		ИначеЕсли СокрЛП(НаименованиеОбъекта) = "ПротоколРассмотренияЗаявок" Тогда
			// Протокол рассмотрения заявок.
			СтруктураОснование = Новый Структура("Основание", Объект.Контекст);
		ИначеЕсли СокрЛП(НаименованиеОбъекта) = "ПредложениеПоставщика" Тогда
			// Преложение участника.
			ЗначениеПолучено = ВыбратьЛотИВвестиДокумент(ОбъектБдВход, "ВыборЛота_Завершение");
			РезультатФункции.Вставить("ЗначениеПолучено", ЗначениеПолучено);
		Иначе
			СтруктураОснование = Новый Структура;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектБдВход) = Тип("СправочникСсылка.СправочникиБД") Тогда
		Если СокрЛП(НаименованиеОбъекта) = "НастройкиПроцессаВыбора" Тогда
			// Преложение участника.
			ЗначениеПолучено = ВыбратьЛотИВвестиДокумент(ОбъектБдВход, "ВыборЛотаДляНастройкиПроцесса_Завершение");
			РезультатФункции.Вставить("ЗначениеПолучено", ЗначениеПолучено);
		Иначе
			СтруктураОснование = Новый Структура;
		КонецЕсли;	
	Иначе
		СтруктураОснование = Новый Структура;
	КонецЕсли;
	РезультатФункции.Вставить("СтруктураОснование", СтруктураОснование);
	Возврат РезультатФункции;
КонецФункции		 //	ПолучитьСтруктуруЗаполненияОбъектаБД()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СчитатьВложения();
	ЗагрузитьСтадииВДерево();
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДействияСогласованиеУХСервер");
		Модуль.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	КонецЕсли;
	УправлениеДоступностью();
	СортироватьСтадииПоДате();
	ОтобразитьИнформациюОРисковомСобытии();  
	ОтобразитьИнформациюОЗакупочнойПроцедуре();
	РассчитатьОбщуюДлительностьСтадий();
	ОтобразитьАктуальнуюСтадию();
	СтратегическиеИнинциативы = "СтратегическиеИнинциативы";
	Если Метаданные.ФункциональныеОпции.Найти(СтратегическиеИнинциативы) <> Неопределено И ПолучитьФункциональнуюОпцию(СтратегическиеИнинциативы) = Ложь Тогда
		ИмяЭлемента = "Инициатива";
		Элементы.ВидМероприятия.СписокВыбора.Удалить(Элементы.ВидМероприятия.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ВидыМероприятий." + ИмяЭлемента)));
	КонецЕсли;
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияЦентрализованноеУправлениеЗакупками") Тогда
		ИмяЭлемента = "ЗакупочнаяПроцедура";
		Элементы.ВидМероприятия.СписокВыбора.Удалить(Элементы.ВидМероприятия.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ВидыМероприятий." + ИмяЭлемента)));
	КонецЕсли;
	ОбновитьТипы();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОтобразитьАктуальнуюСтадию();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипы()
	Для каждого Строка Из Объект.КонтекстыМероприятий Цикл
		Если Не ЗначениеЗаполнено(Строка.Контекст) Тогда
			Строка.Тип = "";
		Иначе
			Строка.Тип = ТипЗнч(Строка.Контекст);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(ЗаписатьОбъект=Ложь)
	// выбрать и записать новый файл
	ТекДанныеДерево = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанныеДерево <> Неопределено Тогда
		ТекДанныеТаблица = Элементы.ДеревоСтадийВложенияФорма.ТекущиеДанные;
		Если ТекДанныеТаблица <> Неопределено Тогда
			ДопПараметры = Новый Структура("ЗаписатьОбъект", ЗаписатьОбъект);
			ОписаниеОбработчикаДобавленияФайла = Новый ОписаниеОповещения("ОбработчикДобавленияФайла", ЭтаФорма, ДопПараметры);
			СвязанныеФайлыКлиентУХ.ДобавитьФайлВИБ(Объект.Ссылка, ТекДанныеТаблица.ИДФайла, ОписаниеОбработчикаДобавленияФайла, ЭтаФорма.УникальныйИдентификатор);
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДобавленияФайла(СсылкаНаФайл, ДопПараметры) Экспорт
	Если СсылкаНаФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанныеДерево = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанныеДерево <> Неопределено Тогда
		ТекДанныеТаблица = Элементы.ДеревоСтадийВложенияФорма.ТекущиеДанные;
		Если ТекДанныеТаблица <> Неопределено Тогда
			ДанныеФайла = СвязанныеФайлыВызовСервера.ПолучитьФайлПоСсылке(СсылкаНаФайл);
			ТекДанныеТаблица.ИмяФайла	 = ДанныеФайла.Наименование + ?(ПустаяСтрока(ДанныеФайла.Расширение), "", "." + ДанныеФайла.Расширение);
			ТекДанныеТаблица.ИДФайла	 = ДанныеФайла.Идентификатор;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл()
	ТекДанныеДерево = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанныеДерево <> Неопределено Тогда
		ТекДанныеТаблица = Элементы.ДеревоСтадийВложенияФорма.ТекущиеДанные;
		Если ТекДанныеТаблица <> Неопределено Тогда
			Если НЕ ПустаяСтрока(ТекДанныеТаблица.ИДФайла) Тогда
				СвязанныеФайлыКлиентУХ.ПодготовитьИОткрытьФайлДляПросмотра(ТекДанныеТаблица.ИДФайла, ЭтаФорма);
			КонецЕсли;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РисковоеСобытиеПриИзменении(Элемент)
	УправлениеДоступностью();
	ИнформацияОРисковомСобытии = ПолучитьТекстИнформацииОРисковомСобытии(Объект.Контекст);
	ОтобразитьИнформациюОЗакупочнойПроцедуре();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеОчисткиСтадий_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДействияПоШаблону_Сервер(Истина);	
		ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьДействияПоШаблону_Сервер(Ложь);		
		ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		// Пользователь отказался от заполнения.
	Иначе
		// Неизвестный вариант. Ничего не делаем.
	КонецЕсли;	
	ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
КонецПроцедуры		// ПодтверждениеОчисткиСтадий_Завершение()		

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	Если ДеревоСтадий.ПолучитьЭлементы().Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'Очистить имеющиеся стадии?'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеОчисткиСтадий_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьДействияПоШаблону_Сервер();	
		ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииФактическиеЗатратыСтадииПриИзменении(Элемент)
	РассчитатьСуммуЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииЗатратыШагаПриИзменении(Элемент)
	РассчитатьСуммуЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииЗавершеноПриИзменении(Элемент)
	РассчитатьОбщийПрогресс();
	СортироватьСтадииПоДате();
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СортироватьСтадииПоДате();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗакрытияСтадий_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
	Иначе       
		// Пользователь согласился. Завершим все стадии-предшественники.
		МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "МассивИдентификаторов", Новый Массив);
		ЗавершитьВсеСтадииПоИдентификаторам(ДеревоСтадий, МассивИдентификаторов);
		// Состояния кнопок завершения стадии.
		ОтобразитьСостояниеКнопокЗавершенияСтадии();
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеЗакрытияСтадий_Завершение()

&НаКлиенте
Процедура ПодтверждениеОтменыСтадий_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
	Иначе       
		// Пользователь согласился. Отменим все стадии-последователи.
		МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "МассивИдентификаторов", Новый Массив);
		ОтменитьВсеСтадииПоИдентификаторам(ДеревоСтадий, МассивИдентификаторов);
		// Состояния кнопок завершения стадии.
		ОтобразитьСостояниеКнопокЗавершенияСтадии();
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеОтменыСтадий_Завершение()

&НаКлиенте
Процедура ЗавершитьТекущееДействие(Команда)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Проверим завершение предшествующих стадий.
		Если ОпределитьНеобходимостьКонтроляПоследовательностиСтадий(Объект.ШаблонМероприятия) Тогда
			ТекИдентификатор = ТекДанные.ПолучитьИдентификатор();
			// Получим массив незавершенных строк-предшественников.
			МассивИдентификаторовНезавершенных = ПолучитьМассивНезавершенныхПредшественников(ТекИдентификатор);
			КоличествоНезавершенныхПредшественников = МассивИдентификаторовНезавершенных.Количество();
			// Обработка полученных данных по последовательности.
			Если (КоличествоНезавершенныхПредшественников = 0) Тогда
				// Предшественников нет. Завершим текущую стадию и обновим данные по прогрессу.
				ЗавершитьСтадиюВСтроке(ТекДанные);
				РассчитатьОбщийПрогресс();
			Иначе
				// Есть незавершенные предшественники, спросим пользователя, нужно ли продолжать операцию.
				МассивИдентификаторовНезавершенных.Добавить(ТекИдентификатор);			// Добавим текущую строку.
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("МассивИдентификаторов", МассивИдентификаторовНезавершенных);
				ТекстВопроса = НСтр("ru = 'Предыдущие стадии (%Количество%)  будут завершены. Продолжить?'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Количество%", Строка(КоличествоНезавершенныхПредшественников));
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗакрытияСтадий_Завершение", ЭтаФорма, СтруктураПараметров);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			КонецЕсли; 
		Иначе	
			// Завершим текущую стадию и обновим данные по прогрессу.
			ЗавершитьСтадиюВСтроке(ТекДанные);
			РассчитатьОбщийПрогресс();
		КонецЕсли;
		// Состояния кнопок завершения стадии.
		ОтобразитьСостояниеКнопокЗавершенияСтадии();
	Иначе
		ТекстСообщения = НСтр("ru = 'Строка не выбрана. Операция отменена'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьТекущееДействие(Команда)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Проверим завершение последующих стадий.
		Если ОпределитьНеобходимостьКонтроляПоследовательностиСтадий(Объект.ШаблонМероприятия) Тогда
			ТекИдентификатор = ТекДанные.ПолучитьИдентификатор();
			// Получим массив завершенных строк-последователей.
			МассивИдентификаторовЗавершенных = ПолучитьМассивЗавершенныхПоследователей(ТекИдентификатор);
			КоличествоЗавершенныхПоследователей = МассивИдентификаторовЗавершенных.Количество();
			Если КоличествоЗавершенныхПоследователей = 0 Тогда
				// Последователей нет. Отменим текущую стадию и обновим данные по прогрессу.
				ТекДанные.Завершено = Ложь;
				РассчитатьОбщийПрогресс();
			Иначе
				// Есть завершенные последователи, спросим пользователя, нужно ли продолжать операцию.
				МассивИдентификаторовЗавершенных.Добавить(ТекИдентификатор);			// Добавим текущую строку.
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("МассивИдентификаторов", МассивИдентификаторовЗавершенных);
				ТекстВопроса = НСтр("ru = 'Последующие стадии (%Количество%)  будут отменены. Продолжить?'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Количество%", Строка(КоличествоЗавершенныхПоследователей));
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПодтверждениеОтменыСтадий_Завершение", ЭтаФорма, СтруктураПараметров);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			КонецЕсли;
		Иначе	
			// Завершим текущую стадию и обновим данные по прогрессу.
			ТекДанные.Завершено = Ложь;
			РассчитатьОбщийПрогресс();
		КонецЕсли;
		// Состояния кнопок завершения стадии.
		ОтобразитьСостояниеКнопокЗавершенияСтадии();
	Иначе
		ТекстСообщения = НСтр("ru = 'Строка не выбрана. Операция отменена'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииИтоговыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		МассивТиповИтоговыхДокументов = ВернутьМассивТиповИтоговыхДокументовСтадии(ТекДанные.Действие);
		НесколькоТиповДокументов = (МассивТиповИтоговыхДокументов.Количество() <> 1);		// Не выбираем тип, если доступен строго один.
		Элемент.ВыбиратьТип = НесколькоТиповДокументов;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповИтоговыхДокументов);
	Иначе
		Элемент.ВыбиратьТип = Истина;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПредписание(Команда)
	// Проверка возможности отправки уведомлений.
	ПроверкаПройдена = Истина;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если (СокрЛП(Объект.Предписания ) <> "") И (ЗначениеЗаполнено(Объект.ИсполнительПредписания)) Тогда
			Если (Объект.КонтролироватьИсполненияПредписания) Тогда
				Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
					// Все проверки пройдены. Выполняем далее.
				Иначе
					ПроверкаПройдена = Ложь;
					ТекстСообщения = НСтр("ru = 'Для контроля исполнения предписания требуется заполнить ответственного. Отправка предписания отменена.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;	
			Иначе
				// Не требуется контроль. Не проверяем заполнение ответственного.
			КонецЕсли;
		Иначе
			ПроверкаПройдена = Ложь;
			ТекстСообщения = НСтр("ru = 'Для отправки предписания требуется заполнить текст предписания и исполнителя предписания. Отправка отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	Иначе
		ПроверкаПройдена = Ложь;
		ТекстСообщения = НСтр("ru = 'Требуется записать документ перед отправкой предписания. Отправка отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
	// Уведомление исполнителю предписания.
	Если ПроверкаПройдена Тогда
		НоваяЗадачаИсполнитель = СоздатьЗадачуИсполнителюПредписания();
		Если ЗначениеЗаполнено(НоваяЗадачаИсполнитель) Тогда
			Имя = "Справочник.ВидыСобытийОповещений.ПредписаниеИсполнителю";
			ВидСобытия = ПредопределенноеЗначение(Имя);
			СписокРассылки = Новый Массив;
			СписокРассылки.Добавить(Объект.ИсполнительПредписания);
			РасширениеПроцессыИСогласованиеКлиентУХ.ОповеститьПользователей(ВидСобытия, , Объект.Ссылка, СписокРассылки, , НоваяЗадачаИсполнитель);
			// Уведомление контролирующему исполнение предписание.
			Если Объект.КонтролироватьИсполненияПредписания Тогда
				НоваяЗадачаКонтролирующий = СоздатьЗадачуКонтролирующемуИсполнителяПредписания();
				Если ЗначениеЗаполнено(НоваяЗадачаКонтролирующий) Тогда
					Имя = "Справочник.ВидыСобытийОповещений.ПроверкаИсполненияПоручения";
					ВидСобытия = ПредопределенноеЗначение(Имя);
					СписокРассылки = Новый Массив;
					СписокРассылки.Добавить(Объект.Ответственный);
					РасширениеПроцессыИСогласованиеКлиентУХ.ОповеститьПользователей(ВидСобытия, , Объект.Ссылка, СписокРассылки, , НоваяЗадачаКонтролирующий);
				Иначе
					ТекстСообщения = НСтр("ru = 'Задача контролирующему исполнение предписания не создана. Отправка уведомления отменена.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Контроль исполнения не требуется, не создаём задачу.
			КонецЕсли;	
		Иначе
			ТекстСообщения = НСтр("ru = 'Задача исполнителю не создана. Отправка уведомления отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Проверка не пройдена. Не отправляем уведомление.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтадииПриИзменении(Элемент)
	РассчитатьОбщийПрогресс();
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииПрогресс1ПриИзменении(Элемент)
	РассчитатьОбщийПрогресс();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗадачуОтветственномуЗаСтадию(Команда)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекОтветственныйЗаСтадию = ТекДанные.ОтветственныйСтадии;
		Если ЗначениеЗаполнено(ТекОтветственныйЗаСтадию) Тогда
			НоваяЗадача = СоздатьЗадачуОтветственномуЗаСтадию(ТекОтветственныйЗаСтадию);
			Если ЗначениеЗаполнено(НоваяЗадача) Тогда
				Имя = "Справочник.ВидыСобытийОповещений.ВыполнениеОперацииПоСтадииМероприятия";
				ВидСобытия = ПредопределенноеЗначение(Имя);
				СписокРассылки = Новый Массив;
				СписокРассылки.Добавить(ТекОтветственныйЗаСтадию);
				СтруктураДополнительныхПараметров = Новый Структура;
				СтруктураДополнительныхПараметров.Вставить("Стадия", ТекДанные.Действие);
				СтруктураДополнительныхПараметров.Вставить("ДатаСтадии", ТекДанные.ДатаИзменения);
				РезультатОтправки = РасширениеПроцессыИСогласованиеКлиентУХ.ОповеститьПользователей(ВидСобытия, , Объект.Ссылка, СписокРассылки, СтруктураДополнительныхПараметров, НоваяЗадача);
				Если РезультатОтправки Тогда
					КартинкаОповещения = БиблиотекаКартинок.ОбщаяКартинка54ФЗEmail_32;
					ТекстОповещения = НСтр("ru = 'Оповещение отправлено'");
					ПояснениеОповещения = НСтр("ru = 'Оповещение ответственному за стадию %Стадия% успешно отправлено'");
					ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Стадия%", Строка(ТекДанные.Действие));
					ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось отправить оповещение ответственному за стадию %Стадия%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекДанные.Действие));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;	
			Иначе
				ТекстСообщения = НСтр("ru = 'Задача контролирующему исполнение предписания не создана. Отправка уведомления отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Ответственный по стадии %Стадия% не указан. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекДанные.Действие));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Стадия не выбрана. Отправка задачи ответственному отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтадииИтогВыполненияПриИзменении(Элемент)
	РассчитатьОбщийПрогресс();
КонецПроцедуры

&НаКлиенте
Процедура СтадииИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭтаФорма.Модифицированность = Истина;
	ДобавитьФайл();
КонецПроцедуры

&НаКлиенте
Процедура СтадииИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуОкончания(Команда)
	ВыставитьДатуОкончанияПоСтадиям();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонМероприятияПриИзменении(Элемент)
	УправлениеДоступностью();
	Если ДеревоСтадий.ПолучитьЭлементы().Количество() = 0 Тогда
		Если (ЗначениеЗаполнено(Объект.ШаблонМероприятия)) Тогда
			ЗаполнитьДействияПоШаблону_Сервер();
			ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
			ВыставитьДатуОкончанияПоСтадиям();
		Иначе
			// Риск не указан. Не заполняем.
		КонецЕсли;
	Иначе
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'В таблице уже указаны стадии. Очистить имеющиеся стадии при перезаполнении по шаблону?'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеОчисткиСтадий_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Ограничение типа.
		ЭтоГруппирующаяСтрока = ТекДанные.ГруппирующаяСтрока;
		МассивТипов = Новый Массив;
		Элементы.ДеревоСтадийСтадияГруппа.ВыбиратьТип = Ложь;
		Если ЭтоГруппирующаяСтрока Тогда
			МассивТипов.Добавить(Тип("Строка"));
		Иначе
			МассивТипов.Добавить(Тип("СправочникСсылка.СтадииМероприятий"));
		КонецЕсли;	
		Элементы.ДеревоСтадийСтадияГруппа.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		// Доступность элементов.
		Элементы.ГруппаТекущиеДействияПравая.ТолькоПросмотр	 = ЭтоГруппирующаяСтрока;
		Элементы.ОтправитьЗадачуОтветственному.Доступность	 = НЕ ЭтоГруппирующаяСтрока;
		Элементы.ЗавершитьТекущееДействие.Доступность		 = НЕ ЭтоГруппирующаяСтрока;
		Элементы.ОтменитьТекущееДействие.Доступность		 = НЕ ЭтоГруппирующаяСтрока;
		Элементы.ДеревоСтадийДатаИзменения.ТолькоПросмотр	 = ЭтоГруппирующаяСтрока;
		Элементы.ДеревоСтадийИтогВыполнения.ТолькоПросмотр	 = ЭтоГруппирующаяСтрока;
		// Видимость вложений.
		ТекДействие = ТекДанные.Действие;
		Если ЗначениеЗаполнено(ТекДействие) Тогда
			СтруктураРеквизитов = ПолучитьДанныеСтадии(ТекДействие);
			// Итоговый документ.
			ИспользуетсяИтоговыйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ИспользуетсяИтоговыйДокумент", Ложь);
			Элементы.ДеревоСтадийВложенияФормаИтоговыйДокумент.Видимость = ИспользуетсяИтоговыйДокумент;
			// Прикрепленный файл.
			ИспользуетсяПрикрепленныйФайл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ИспользуетсяПрикрепленныйФайл");
			Элементы.ДеревоСтадийВложенияФормаИмяФайла.Видимость = ИспользуетсяПрикрепленныйФайл;
			// Таблица вложений.
			Элементы.ДеревоСтадийВложенияФорма.Видимость = (ИспользуетсяИтоговыйДокумент ИЛИ ИспользуетсяПрикрепленныйФайл);
		Иначе
			// Стадия не выбрана. Ничего не делаем.
		КонецЕсли;
		// Состояния кнопок завершения стадии.
		ОтобразитьСостояниеКнопокЗавершенияСтадии();
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьДеревоВСтадии(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийСтадияГруппаПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Добавим установим текущую стадию из выбранной стадии на форме.
		Если ТипЗнч(ТекДанные.СтадияГруппа) = Тип("СправочникСсылка.СтадииМероприятий") Тогда
			ТекДанные.Действие = ТекДанные.СтадияГруппа;
		Иначе
			// Групповая строка. Не изменяем.
		КонецЕсли;	
		// Дозаполним поле Описание реакции.
		Если СокрЛП(ТекДанные.ОписаниеРеакции) = "" Тогда
			НовоеОписание = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекДанные.Действие, "Описание");
			ТекДанные.ОписаниеРеакции = НовоеОписание;
		Иначе
			// Значение
		КонецЕсли;	
		// Заполним приложенные документы.
		ЗаполнитьВложенияТекущейСтроки(Истина);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПриИзменении(Элемент)
	ДеревоСтадийПриИзменении_Сервер();
	ОбновитьДатыГрупп(ДеревоСтадий);
	ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если НоваяСтрока Тогда
			// Установим реквизит ИзШаблона в значение Ложь при копировании строки.
			Если Копирование Тогда
				ТекДанные.ИзШаблона = Ложь;
			Иначе
				// Не изменяем реквизит.
			КонецЕсли;	
			// Выставим новую дату редактирования для новой строки как следующую за последней.
			СтруктураСтадии = ПолучитьСтруктуруМаксимальнойСтадии();
			МаксимальнаяДата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСтадии, "ДатаИзменения", Дата(1, 1, 1));
			МаксимальнаяСтадия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСтадии, "Стадия", ПредопределенноеЗначение("Справочник.СтадииМероприятий.ПустаяСсылка"));
			Если ЗначениеЗаполнено(МаксимальнаяСтадия) Тогда
				ДлительностьМаксимальнойСтадии = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(МаксимальнаяСтадия, "Длительность");
				НоваяДатаИзменения = МаксимальнаяДата + 60*60*24*ДлительностьМаксимальнойСтадии;
				ТекДанные.ДатаИзменения = НоваяДатаИзменения;
			Иначе
				ТекДанные.ДатаИзменения = Объект.ДатаНачала;
			КонецЕсли;	
		Иначе
			// Не изменяем дату для существующей строки.
		КонецЕсли;	
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.ГруппирующаяСтрока Тогда
				Отказ = Ложь;				
			Иначе
				Отказ = Истина;
				ДобавитьСтадию_Сервер();
			КонецЕсли;	
		Иначе
			Отказ = Ложь;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.ГруппирующаяСтрока Тогда
				ИдентификаторГруппы = ТекДанные.ПолучитьИдентификатор();
				СкопироватьГруппу(ИдентификаторГруппы);
			Иначе
				Отказ = Ложь;				
			КонецЕсли;	
		Иначе
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Выполнение = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВводИмениГруппы_Завершение(ВыбранноеЗначение, Параметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ДобавитьГруппу_Сервер(ВыбранноеЗначение);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить имя группы. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры		// ВводИмениГруппы_Завершение()	

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	Оповещение = Новый ОписаниеОповещения("ВводИмениГруппы_Завершение", ЭтотОбъект);
    ПоказатьВводСтроки(Оповещение, НСтр("ru = 'Новая группа'"), НСтр("ru = 'Ввод наименования группы'"), 75, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГанта(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Мероприятие", Объект.Ссылка);
		ОткрытьФорму("Отчет.ИсполнениеСтадийМеропритияДиаграммаГанта.Форма.ФормаОтчета", СтруктураПараметров);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать объект. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияРеакцииДатаИзмененияПриИзменении(Элемент)
	СортироватьСтадииПоДате();   	
	РассчитатьОбщуюДлительностьСтадий();
	ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		ОпределитьСостояниеОбъекта();
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьСвязанныеМероприятия");
КонецПроцедуры

&НаКлиенте
Процедура РисковоеСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.РеакцияНаРиск") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ.РисковоеСобытие.ФормаВыбора", , Элементы.РисковоеСобытие);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.КонтрольноеМероприятие") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Риски.ФормаВыбора", , Элементы.РисковоеСобытие);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.Инициатива") Тогда
		СтандартнаяОбработка = Ложь;
		Имя = "Справочник.Цели.ФормаВыбора";
		ОткрытьФорму(Имя, , Элементы.РисковоеСобытие);
	ИначеЕсли Объект.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятий.ЗакупочнаяПроцедура") Тогда
		СтандартнаяОбработка = Ложь;
		Имя = "Справочник.ЗакупочныеПроцедуры.ФормаВыбора";
		ОткрытьФорму(Имя, , Элементы.РисковоеСобытие);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийВложенияФормаИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭтаФорма.Модифицированность = Истина;
	ДобавитьФайл();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийВложенияФормаИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл();
КонецПроцедуры

&НаКлиенте
Процедура ПланФактныйАнализИсполнения(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Мероприятие", Объект.Ссылка);
		ПараметрыФормы.Вставить("ФормироватьАвтоматически", Истина);
		ОткрытьФорму("Отчет.ПланФактВыполненияМероприятий.ФормаОбъекта", ПараметрыФормы);	
	Иначе
		ТекстСообщения = НСтр("ru = 'Мероприятие не записано. Для продолжения требуется записать объект.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийВложенияФормаИтоговыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанныеДерево = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанныеДерево <> Неопределено Тогда
		ТекДанныеТаблица = Элементы.ДеревоСтадийВложенияФорма.ТекущиеДанные;
		Если ТекДанныеТаблица <> Неопределено Тогда
			// Ограничение выбора типа прикрепляемого документа.
			МассивТиповИтоговыхДокументов = Новый Массив;
			НовыйТип = ОбщегоНазначенияСерверУХ.ВернутьТипПоСсылкеБД(ТекДанныеТаблица.ТипИтоговогоДокумента);	
			МассивТиповИтоговыхДокументов.Добавить(НовыйТип);
			ОписаниеТиповСписка = Новый ОписаниеТипов(МассивТиповИтоговыхДокументов);
			Элемент.ОграничениеТипа = ОписаниеТиповСписка;
			// Отбор по реквизитам прикрепляемого документа.
			МассивОтбор = ВернутьМассивОтбораПоТипуДокумента(ТекДанныеТаблица.ТипИтоговогоДокумента);
			Если МассивОтбор.Количество() > 0 Тогда
				НовыеПараметры = Новый ФиксированныйМассив(МассивОтбор);
				Элемент.ПараметрыВыбора = НовыеПараметры; 
			Иначе
				// Не требуется накладывать отбор.
			КонецЕсли;
		Иначе
			Элемент.ОграничениеТипа = Неопределено;
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ИтоговыйСписок, СписокПараметров) Экспорт
    Если ИтоговыйСписок = Неопределено Тогда
        ТекстСообщения = НСтр("ru = 'Выбор стадий отменён'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		УстановитьСтадииНапоминаний(ДеревоСтадий, ИтоговыйСписок);
	КонецЕсли;
КонецПроцедуры		// ПослеВыбораЭлемента()

&НаКлиенте
Процедура ВыбратьНапоминания(Команда)
	// Получение данных.
	СписокСтадий = ПолучитьСписокСтадийНапоминаний();
	// Формирование структуры параметров.
	ЗаголовокДиалога = НСтр("ru = 'Выберите стадии, по которым будут отправлены напоминания ответственным'");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	ОписаниеТиповСтадии = Новый ОписаниеТипов(МассивТипов);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОписаниеТипов", ОписаниеТиповСтадии);
	СтруктураПараметров.Вставить("ЗначенияДляВыбора", СписокСтадий);
	СтруктураПараметров.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	СтруктураПараметров.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	СтруктураПараметров.Вставить("Представление", ЗаголовокДиалога);
	// Настройки открытия формы.
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма);
	// Вызов формы выбора стадий.
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", СтруктураПараметров, , , , , Оповещение, Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДатыГрупп(ДеревоСтадий);                 
	ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийВложенияФормаИтоговыйДокументПриИзменении(Элемент)
	// Проверим, что выбран документ подходящего типа.
	ТекДанныеДерево = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанныеДерево <> Неопределено Тогда
		ТекДанныеТаблица = Элементы.ДеревоСтадийВложенияФорма.ТекущиеДанные;
		Если ТекДанныеТаблица <> Неопределено Тогда
			Если ТекДанныеТаблица.ТипИтоговогоДокумента <> Неопределено Тогда
				МассивТиповИтоговыхДокументов = ВернутьМассивТиповИтоговыхДокументовСтадии(ТекДанныеДерево.Действие);
				ОписаниеТиповСписка = Новый ОписаниеТипов(МассивТиповИтоговыхДокументов);
				ТипВыбранногоДокумента = ТипЗнч(ТекДанныеТаблица.ИтоговыйДокумент);
				ВыбранПодходящийДокумент = (ОписаниеТиповСписка.СодержитТип(ТипВыбранногоДокумента));
				Если НЕ ВыбранПодходящийДокумент Тогда
					ТекстСообщения = НСтр("ru = 'В стадии %Стадия% выбран документ %Документ%, не соответствующий настройкам. Поле очищено.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекДанныеДерево.Действие));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ТекДанныеТаблица.ИтоговыйДокумент));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					ТекДанныеТаблица.ИтоговыйДокумент = Неопределено;
				Иначе
					// Проверка пройдена успешно.
				КонецЕсли;	
			Иначе
				// Тип итогового документа не указан. Пропускаем.
			КонецЕсли;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Ограничение доступности стадии ФЗ-223.
		ПредопределеннаяСтадияФз223 = (ЭтоФз223 И ТекДанные.ИзШаблона);
		Отказ = ПредопределеннаяСтадияФз223;
		Если ПредопределеннаяСтадияФз223 Тогда
			ТекстСообщения = НСтр("ru = 'Стадия %Стадия% предопределена в шаблоне %Шаблон% и используется для закупки %Закупка% по ФЗ-223. Удаление данной стадии невозможно.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекДанные.Действие));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(Объект.ШаблонМероприятия));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Закупка%", Строка(Объект.Контекст));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			// Не выводим сообщение.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Ограничение доступности стадии ФЗ-223.
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоСтадийСтадияГруппа" Тогда
			ПредопределеннаяСтадияФз223 = (ЭтоФз223 И ТекДанные.ИзШаблона);
			Отказ = ПредопределеннаяСтадияФз223;
			Если ПредопределеннаяСтадияФз223 Тогда
				ТекстСообщения = НСтр("ru = 'Стадия %Стадия% предопределена в шаблоне %Шаблон% и используется для закупки %Закупка% по ФЗ-223. Изменение данной стадии невозможно.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекДанные.Действие));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(Объект.ШаблонМероприятия));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Закупка%", Строка(Объект.Контекст));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Не выводим сообщение.
			КонецЕсли;
		Иначе
			// Не ограничиваем прочие поля.
		КонецЕсли;
		// Ограничение доступности стадий подготовки к закупочной процедуре и официального объявления закупки.
		Если ДатыСтадийОпределеныВЗакупочнойПроцедуре(ТекДанные.Действие) Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Стадия %Стадия% определяется закупочной процедурой. Редактирование запрещено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стадия%", Строка(ТекДанные.Действие));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			// Проверка пройдена. Пропускаем.
		КонецЕсли;	
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийСтадияГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.ВидМероприятия) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru = 'Не указан вид мероприятия. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Выполняем далее.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийФактическаяДлительностьПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДата = ТекДанные.ДатаИзменения;
		Если ЗначениеЗаполнено(ТекДата) Тогда
			МассивДанныхСтрок = ВернутьМассивСтруктурСтадий(ДеревоСтадий);
			ТекИдентификатор = ТекДанные.ПолучитьИдентификатор();
			ТекДлительность = ТекДанные.ФактическаяДлительность;
			ТекШаблон = Объект.ШаблонМероприятия;
			СдвинутьДатыСтадийПослеВыбранной(ДеревоСтадий, МассивДанныхСтрок, ТекДата, ТекДлительность, ТекИдентификатор, ТекШаблон);
		Иначе
			// Текущая дата пустая. Вычислить сдвиг не удастся.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	КонтрольПоследовательностиСтадий(ДеревоСтадий, Отказ);
	КонтрольДлительностиСтадий(ДеревоСтадий, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийВложенияФормаПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.ДеревоСтадийВложенияФорма.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоСтадийВложенияФормаПредставлениеДокумента" Тогда
			Отказ = ЗначениеЗаполнено(ТекДанные.ИдентификаторДокумента);
		Иначе
			// Другая колонка. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыВложения_Завершение(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			НоваяСтрока = ТекДанные.ВложенияФорма.Добавить();
			Если СокрЛП(ЗначениеВыбора) <> "" Тогда
				Для Каждого ТекДанныеВложений Из ДопПараметры.ДанныеВложений Цикл
					Если СокрЛП(ТекДанныеВложений.ИдентификаторДокумента) = СокрЛП(ЗначениеВыбора.Значение) Тогда
						НоваяСтрока.ПредставлениеДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ПредставлениеДокумента", "");
						НоваяСтрока.ТипИтоговогоДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ТипИтоговогоДокумента", Неопределено);
						НоваяСтрока.ИдентификаторДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ИдентификаторДокумента", "");
						НоваяСтрока.Обязательный			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "Обязательный", Ложь);
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПредставлениеДокумента) Тогда
							НоваяСтрока.ПредставлениеДокумента = Строка(НоваяСтрока.ТипИтоговогоДокумента);
						Иначе
							// Значение установлено.
						КонецЕсли;	
					Иначе
						// Выполняем поиск далее. 
					КонецЕсли;
				КонецЦикла;	
			Иначе
				// Пользователь выбрал произвольное вложение. Оставим новую строку пустой.
			КонецЕсли;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
	Иначе
        // Пользователь отказался. Ничего не делаем.
    КонецЕсли;	
КонецПроцедуры		// ВариантыВложения_Завершение()

&НаКлиенте
Процедура ДеревоСтадийВложенияФормаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДанныеВложений = ВернутьМассивДанныхВложенийСтадии(ТекДанные.Действие);
		СписокВариантовВложений = Новый СписокЗначений;
		Для Каждого ТекДанныеВложений Из ДанныеВложений Цикл
			ЗначениеСписка = ТекДанныеВложений.ИдентификаторДокумента;
			ПредставлениеСписка = "";
			Если ЗначениеЗаполнено(ТекДанныеВложений.ПредставлениеДокумента) Тогда
				ПредставлениеСписка = ТекДанныеВложений.ПредставлениеДокумента;
			Иначе
				ПредставлениеСписка = Строка(ТекДанныеВложений.ТипИтоговогоДокумента);
			КонецЕсли;
			СписокВариантовВложений.Добавить(ЗначениеСписка, ПредставлениеСписка);
		КонецЦикла;	
		СписокВариантовВложений.Добавить("", НСтр("ru = '<Произвольное вложение>'"));
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДанныеВложений", ДанныеВложений);
		Оповещение = Новый ОписаниеОповещения("ВариантыВложения_Завершение", ЭтотОбъект, СтруктураПараметров);
		СписокВариантовВложений.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите вариант вложения'"));
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеВложений_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЗаполнитьВложенияТекущейСтроки(Истина);
	Иначе       
		// Пользователь отказался.
    КонецЕсли;
КонецПроцедуры		// ЗаполнениеВложений_Завершение()

&НаКлиенте
Процедура ЗаполнитьВложения(Команда)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВложенияФорма.Количество() = 0 Тогда
			ЗаполнитьВложенияТекущейСтроки(Истина);
		Иначе
			СтруктураПараметров = Новый Структура;
			ТекстВопроса = НСтр("ru = 'В стадии %Стадии% заполнена таблица вложений. Продолжить заполнение?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Стадии%", ТекДанные.Действие);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ЗаполнениеВложений_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Стадия не выбрана. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтадийДатаОкончанияПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоСтадий.ТекущиеДанные;

	Если ТекДанные <> Неопределено Тогда
		ТекДатаНачала		 = ТекДанные.ДатаИзменения;
		ТекДатаОкончания	 = ТекДанные.ДатаОкончания;
		ТекШаблон			 = Объект.ШаблонМероприятия;
		Если ЗначениеЗаполнено(ТекДатаНачала) Тогда
			// Вычисление новой длительности.
			Если НачалоДня(ТекДатаОкончания) > НачалоДня(ТекДатаНачала) Тогда
				НоваяДлительность = РассчитатьДлительностьСтадии(ТекШаблон, ТекДатаНачала, ТекДатаОкончания); 
			ИначеЕсли НачалоДня(ТекДатаОкончания) = НачалоДня(ТекДатаНачала) Тогда
				НоваяДлительность = 1;
			Иначе
				НоваяДлительность = 0;
				ТекстСообщения = НСтр("ru = 'Установленная дата окончания %ДатаОкончания% меньше даты начала %ДатаНачала%. Поле очищено.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОкончания%", Строка(ТекДатаОкончания));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаНачала%", Строка(ТекДатаНачала));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				ТекДанные.ДатаОкончания = Дата(1, 1, 1);
			КонецЕсли;	
			ТекДанные.ФактическаяДлительность = НоваяДлительность;
			// Сдвиг дат по новой длительности.
			МассивДанныхСтрок = ВернутьМассивСтруктурСтадий(ДеревоСтадий);
			ТекИдентификатор = ТекДанные.ПолучитьИдентификатор();
			СдвинутьДатыСтадийПослеВыбранной(ДеревоСтадий, МассивДанныхСтрок, ТекДатаНачала, НоваяДлительность, ТекИдентификатор);
		Иначе
			// Текущая дата пустая. Вычислить сдвиг не удастся.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗадачуОтветственномуЗаМероприятие(Команда)
	РезультатОтправки = ОтправитьЗадачуОтветственномуЗаМероприятие_Сервер(Объект.Ссылка, Объект.Ответственный);
	Если РезультатОтправки Тогда
		КартинкаОповещения = БиблиотекаКартинок.ОбщаяКартинка54ФЗEmail_32;
		ТекстОповещения = НСтр("ru = 'Оповещение отправлено'");
		ПояснениеОповещения = НСтр("ru = 'Оповещение ответственному за мероприятие успешно отправлено'");
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось отправить оповещение ответственному за мероприятие'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводственныйКалендарьПриИзменении(Элемент)
	ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйКалендарьПриИзменении(Элемент)
	ОбновитьФактическуюДлительностьСтадий(ДеревоСтадий);
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектВложениеВыбор_Завершение(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
			ОткрытьФормуВложения(ЗначениеВыбора);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить значение заполнения'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;	
КонецПроцедуры		// ОбъектВложениеВыбор_Завершение()

&НаКлиенте
Процедура ВвестиАкутальныйДокумент(Команда)
	Если Не Модифицированность Тогда
		МасивОбъектовВвода = ВернутьМассивОбъектовВвода(Объект.Ссылка);
		Если МасивОбъектовВвода.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Для данной стадии мероприятия не задано обязательных объектов'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ИначеЕсли МасивОбъектовВвода.Количество() = 1 Тогда
			ТипИтоговогоДокумента = МасивОбъектовВвода[0];
			ОткрытьФормуВложения(ТипИтоговогоДокумента);
		Иначе
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(МасивОбъектовВвода);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заголовок", НСтр("ru = 'Выберите объект ввода'"));
			СтруктураПараметров.Вставить("Список", СписокВыбора);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбъектВложениеВыбор_Завершение", ЭтотОбъект);
			Имя = "ОбщаяФорма.ФормаВыбораИзСпискаУХ";
			ОткрытьФорму(Имя, СтруктураПараметров, , , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать текущее мероприятие перед вводом документа'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстыМероприятийКонтекстПриИзменении(Элемент)
	ОбновитьТипы();
КонецПроцедуры
