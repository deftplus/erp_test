#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Из таблицы стадий ТаблицаВход получает минимальную дату,
// которая больше ДатаВход.
Функция НайтиСледующуюДатуНачала(ТаблицаВход, ДатаВход)
	// Инициализация.
	РезультатФункции = Дата(1, 1, 1);
	МинимальнаяДата = Дата(3000, 1, 1);
	// Поиск минимальной даты в таблице.
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		ТекДата = ТекТаблицаВход.ДатаИзменения;
		Если (ТекДата < МинимальнаяДата) И (ТекДата > ДатаВход) Тогда
			МинимальнаяДата = ТекДата;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	// Возврат результата.
	Если МинимальнаяДата <> Дата(3000, 1, 1) Тогда
		РезультатФункции = МинимальнаяДата;
	Иначе
		РезультатФункции = Дата(1, 1, 1);
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// НайтиСледующуюДатуНачала()

// Рассчитывает значения полей Фактические затраты и Плановые затраты.
Процедура РассчитатьСуммуЗатрат() Экспорт
	НовыеПлановыеЗатраты = Стадии.Итог("ПлановыеЗатратыСтадии");
	НовыеФактическиеЗатраты = Стадии.Итог("ФактическиеЗатратыСтадии");
	ПлановыеЗатраты = НовыеПлановыеЗатраты;
	ФактическиеЗатраты = НовыеФактическиеЗатраты;
КонецПроцедуры		// РассчитатьСуммуЗатрат()

// Выполняет сортировку таблицы Стадии по возрастанию даты изменения.
Процедура СортироватьСтадииПоДате() Экспорт
	// Сортировка строк.
	Выгрузка = Стадии.Выгрузить();
	Выгрузка.Сортировать("ДатаИзменения");
	// Переобозначим номер групповых строк.
	Выгрузка.Колонки.Добавить("НовыйНомерСтроки");
	Счетчик = 1;
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		ТекВыгрузка.НовыйНомерСтроки = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		Если ТекВыгрузка.ГруппаРодитель <> 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерСтроки", ТекВыгрузка.ГруппаРодитель);
			НайденныеСтроки = Выгрузка.НайтиСтроки(СтруктураПоиска);
			НомерГруппы = 0;
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекВыгрузка.ГруппаРодитель = ТекНайденныеСтроки.НовыйНомерСтроки;
			КонецЦикла;	
		Иначе
			// Группирующая строка не задана. Не требуется перенаправление.
		КонецЕсли; 
	КонецЦикла;	
	Стадии.Загрузить(Выгрузка);
КонецПроцедуры		// СортироватьСтадииПоДате()

// Определяет можно ли добавлять в мероприятие по контексту КонтекстВход
// стадию СтадияВход.
Функция МожноДобавлятьСтадию(КонтекстВход, СтадияВход)
	РезультатФункции = Истина;
	ЕстьЗапрещенныеСтадии = Ложь;
	// Ограничим добавление квалификационного отбора и переторжки, если в закупочной процедуре не установлен флаг их использования.
	Если ЗначениеЗаполнено(КонтекстВход) Тогда
		ТипСсылки = "СправочникСсылка.ЗакупочныеПроцедуры"; 
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(КонтекстВход) = Тип(ТипСсылки) Тогда
			// Проверка квалификационного отбора.
			Если НЕ КонтекстВход.ТребуетсяКвалификационныйОтбор Тогда
				Если Справочники.СтадииМероприятий.ЭтоСтадияКвалификационногоОтбора(СтадияВход) Тогда			
					ЕстьЗапрещенныеСтадии = Истина;
				Иначе	
					// Входной стадии нет в числе исключаемых.
				КонецЕсли;	
			Иначе
				// Квалификационный отбор установлен. Не ограничиваем стадии.
			КонецЕсли;
			// Проверка переторжки.
			Если (НЕ КонтекстВход.Переторжка) Тогда
				Если Справочники.СтадииМероприятий.ЭтоСтадияПереторжка(СтадияВход) Тогда			
					ЕстьЗапрещенныеСтадии = Истина;
				Иначе	
					// Входной стадии нет в числе исключаемых.
				КонецЕсли;	
			Иначе
				// Переторжка установлена. Не ограничиваем стадии.
			КонецЕсли;
		Иначе
			ЕстьЗапрещенныеСтадии = Ложь;			// Не закупочная процедура. Не производим проверку.
		КонецЕсли;
	Иначе
		ЕстьЗапрещенныеСтадии = Ложь;				// Неизвестный контекст.
	КонецЕсли;
	РезультатФункции = НЕ ЕстьЗапрещенныеСтадии;
	Возврат РезультатФункции;
КонецФункции		// МожноДобавлятьСтадию()

// Получает дату начала для стадии СтадияВход.
Функция ВычислитьДатуСтадии(ДатаПоУмолчаниюВход, СтадияВход)
	РезультатФункции = ДатаПоУмолчаниюВход;
	МассивСтадий = Новый Массив;
	МассивСтадий.Добавить(Справочники.СтадииМероприятий.Аукцион_ОфициальноеОбъявлениеЗакупки);
	МассивСтадий.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_ОфициальноеОбъявлениеЗакупки);
	МассивСтадий.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_ОфициальноеОбъявлениеЗакупки);
	МассивСтадий.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_ОфициальноеОбъявлениеЗакупки);
	МассивСтадий.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОфициальноеОбъявлениеЗакупки);
	МассивСтадий.Добавить(Справочники.СтадииМероприятий.Конкурс_ОфициальноеОбъявлениеЗакупки);
	СтадияНайдена = (МассивСтадий.Найти(СтадияВход) <> Неопределено);
	ДатаЗакупкиЗаполнена = ЗначениеЗаполнено(ДатаОфициальногоОбъявленияЗакупки);
	Если (СтадияНайдена) И (ДатаЗакупкиЗаполнена) Тогда
		РезультатФункции = ДатаОфициальногоОбъявленияЗакупки;
	Иначе
		РезультатФункции = ДатаПоУмолчаниюВход;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ВычислитьДатуСтадии()

// Обновляет закешированные предопределённые даты для мероприятия закупочной процедуры.
Процедура ОбновитьДатыЗакупочнойПроцедуры()
	Имя = "СправочникСсылка.ЗакупочныеПроцедуры";
	ЕстьЗакупочнаяПроцедура = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И (ТипЗнч(Контекст) = Тип(Имя)) И (ЗначениеЗаполнено(Контекст));
	Если (ЕстьЗакупочнаяПроцедура) Тогда
		ДатаНачала							 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Контекст,"ДатаНачалаПодготовкиЗакупки");
		ДатаОфициальногоОбъявленияЗакупки	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Контекст,"ДатаОфициальногоОбъявленияЗакупки");
	Иначе
		// Для прочих случаев не требуется обновление.
	КонецЕсли;
КонецПроцедуры		// ОбновитьДатыЗакупочнойПроцедуры()

// Возвращает новую дату, сдвинутую от даты ДатаВход на количество
// рабочих дней ДлительностьВход, используя производственный каленндарь
// ПроизводственныйКалендарьВход. Когда производственный календарь
// не задан, рассчёт производится по календарным дням.
Функция СдвинутьДатуПокалендарю(ДатаВход, ДлительностьВход, ПроизводственныйКалендарьВход)
	РезультатФункции = ДатаВход;
	Если ЗначениеЗаполнено(ПроизводственныйКалендарьВход) Тогда
		// Производственный календарь задан. Произведём рассчёт по рабочим дням.
		РезультатФункции = КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь, ДатаВход, ДлительностьВход);
	Иначе
		// Производственный календарь не задан. Рассчитаем по календарным дням.
		ВеличинаСдвига = (24*60*60) * ДлительностьВход;
		РезультатФункции = ДатаВход + ВеличинаСдвига;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// СдвинутьДатуПокалендарю()

// Очищает и заполняет табличную часть действий по риску из данных риска. При установке
// параметра ОчищатьСписокВход, будет очищен имеющийся список. Когда указан
// параметр ДатаНачалаВход, отсчёт будет происходить от этой даты, иначе - от даты начала
// мероприятия.
Процедура ЗаполнитьДействияПоШаблону(ОчищатьСписокВход = Истина, ДатаНачалаВход = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ШаблонМероприятия) Тогда
		// Считывание параметров.
		ОбновитьДатыЗакупочнойПроцедуры();
		ПустойКалендарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
		ИспользоватьПроизводственныйКалендарь = ШаблонМероприятия.ИспользоватьПроизводственныйКалендарь;
		Если ИспользоватьПроизводственныйКалендарь Тогда
			ПроизводственныйКалендарь = ШаблонМероприятия.ПроизводственныйКалендарь;
		Иначе
			ПроизводственныйКалендарь = ПустойКалендарь;
		КонецЕсли;
		ТекДата = ДатаНачала;
		Если ДатаНачалаВход <> Неопределено Тогда
			ТекДата = ДатаНачалаВход;
		Иначе	
			ТекДата = ДатаНачала;
		КонецЕсли;
		КонтролироватьПоследовательностьСтадий = ШаблонМероприятия.КонтролироватьПоследовательностьСтадий;
		// Очистим имеющийся список.
		Если ОчищатьСписокВход Тогда
			Стадии.Очистить();
		Иначе
			// Очистка не требуется.
		КонецЕсли;	
		// Добавим новые элементы в таблицу.
		Для Каждого ТекСтадии Из ШаблонМероприятия.Стадии Цикл
			ТекСтадия = ТекСтадии.Стадия;
			Если МожноДобавлятьСтадию(Контекст, ТекСтадия) Тогда
				НоваяСтрока = Стадии.Добавить();
				НоваяСтрока.Действие				 = ТекСтадия;
				НоваяСтрока.Прогресс				 = 0;
				НоваяСтрока.Завершено				 = Ложь;
				ТекДата = ВычислитьДатуСтадии(ТекДата, ТекСтадия);
				НоваяСтрока.ДатаИзменения			 = ТекДата;
				НоваяСтрока.ИтогВыполнения			 = ТекСтадии.ИтогВыполнения;
				Если ЗначениеЗаполнено(Ответственный) Тогда
					НоваяСтрока.ОтветственныйСтадии	 = Ответственный;
				Иначе
					// Оставляем предыдущее значение.
				КонецЕсли;
				НоваяСтрока.ГруппаРодитель			 = ТекСтадии.ГруппаРодитель;
				НоваяСтрока.ГруппирующаяСтрока		 = ТекСтадии.ГруппирующаяСтрока;
				НоваяСтрока.ПредставлениеГруппы		 = ТекСтадии.ПредставлениеГруппы;
				НоваяСтрока.ОписаниеРеакции			 = ТекСтадии.Стадия.Описание;
				НоваяСтрока.ИзШаблона				 = Истина;
				// Заполним таблицу вложений.
				ТаблицаВложений = Новый ТаблицаЗначений;
				ТаблицаВложений.Колонки.Добавить("ПредставлениеДокумента");
				ТаблицаВложений.Колонки.Добавить("ТипИтоговогоДокумента");
				ТаблицаВложений.Колонки.Добавить("ИдентификаторДокумента");
				ТаблицаВложений.Колонки.Добавить("Обязательный");
				ДанныеВложений = Справочники.СтадииМероприятий.ВернутьМассивДанныхВложенийСтадии(ТекСтадия);
				Для Каждого ТекДанныеВложений Из ДанныеВложений Цикл
					НоваяСтрокаВложения = ТаблицаВложений.Добавить();
					НоваяСтрокаВложения.ПредставлениеДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ПредставлениеДокумента", "");
					НоваяСтрокаВложения.ТипИтоговогоДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ТипИтоговогоДокумента", Неопределено);
					НоваяСтрокаВложения.ИдентификаторДокумента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "ИдентификаторДокумента", "");
					НоваяСтрокаВложения.Обязательный			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеВложений, "Обязательный", Ложь);
					Если Не ЗначениеЗаполнено(НоваяСтрокаВложения.ПредставлениеДокумента) Тогда
						НоваяСтрокаВложения.ПредставлениеДокумента = Строка(НоваяСтрокаВложения.ТипИтоговогоДокумента);
					Иначе
						// Представление установлено.
					КонецЕсли;
				КонецЦикла;	
				НоваяСтрока.Вложения				 = Новый ХранилищеЗначения(ТаблицаВложений);
				ТекДата = СдвинутьДатуПокалендарю(ТекДата, ТекСтадия.Длительность, ПроизводственныйКалендарь);
			Иначе
				// Пропускаем стадию.
			КонецЕсли;
		КонецЦикла;	
		// Постобработка.
		СортироватьСтадииПоДате();
		РассчитатьСуммуЗатрат();
	Иначе
		// Неизвестный шаблон. Пропускаем.
	КонецЕсли;	
КонецПроцедуры		// ЗаполнитьДействияПоШаблону()

// Заполняет текущий документ по данным основного шаблона, сопоставленного
// для контекста КонтекстВход по виду мероприятия ВидМероприятияВход.
Процедура ЗаполнитьПоШаблонуКонтекста(КонтекстВход, ВидМероприятияВход = Неопределено) Экспорт
	Если (ЗначениеЗаполнено(КонтекстВход)) И (НЕ ЗначениеЗаполнено(ШаблонМероприятия))Тогда
		ШаблонМероприятия = РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.ПолучитьОсновнойШаблонПоКонтексту(КонтекстВход, ВидМероприятияВход);
		ЗаполнитьДействияПоШаблону(Истина);
	Иначе
		// Риск не указан. Не заполняем.
	КонецЕсли;	
КонецПроцедуры		// ЗаполнитьПоРиску()
	
// Возвращает значение в процентах общего прогресса по всем стадиям для
// данного документа.
Функция ПолучитьОбщийПрогрессПоСтадиям() Экспорт
	РезультатФункции = 0;
	Для Каждого ТекСтадии Из Стадии Цикл
		Если ТекСтадии.Завершено Тогда
			Если РезультатФункции < ТекСтадии.ИтогВыполнения Тогда
				РезультатФункции = ТекСтадии.ИтогВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;	
		Иначе
			// Не завершено. Выполняем далее.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОбщийПрогрессПоСтадиям()

// Записывает в закупочную процедуру КонтекстВход даты, согласно предопределённым
// стадиям из текущего мероприятия.
Процедура УстановитьДатыЗакупочнойПроцедуры(КонтекстВход)
	Попытка
		СоответствиеСтадийДатам = Справочники.СтадииМероприятий.СформироватьСоответствиеДатЗакупочнойПроцедурыСтадиямМероприятиям();
		КонтекстОбъект = КонтекстВход.ПолучитьОбъект();
		Для Каждого ТекСтадии Из Стадии Цикл
			// Получим контрольную дату из стадии мероприятия.
			НайденнаяДата = СоответствиеСтадийДатам.Получить(ТекСтадии.Действие);
			Если НайденнаяДата <> Неопределено Тогда
				ЕстьДатаВКонтексте = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КонтекстОбъект, НайденнаяДата);
				Если ЕстьДатаВКонтексте Тогда
					КонтекстОбъект[НайденнаяДата] = ТекСтадии.ДатаИзменения;
				Иначе
					// Нет такого реквизита. Пропускаем.
				КонецЕсли;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;	
		КонтекстОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи дат закупочной процедуры %ЗакупочнаяПроцедура% по мероприятию %Мероприятие% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗакупочнаяПроцедура%", Строка(КонтекстВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Мероприятие%", Строка(Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// УстановитьДатыЗакупочнойПроцедуры()

// Возвращает актуальную стадию для текущего объекта-Мероприятия.
Функция ПолучитьАктуальнуюСтадиюМероприятия() Экспорт
	ПустаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	РезультатФункции = ПустаяСтадия;
	Выгрузка = Стадии.Выгрузить();
	Если Выгрузка.Количество() > 0 Тогда
		ПерваяСтадия = Выгрузка[0].Действие;
		ЕстьНайденные = Ложь;
		Для Каждого ТекВыгрузка Из Выгрузка Цикл
			Если НЕ ТекВыгрузка.Завершено Тогда
				Если ЕстьНайденные Тогда
					РезультатФункции = ТекВыгрузка.Действие;
				Иначе
					РезультатФункции = ПерваяСтадия;
				КонецЕсли;
				Прервать;
			Иначе
				ЕстьНайденные = Истина;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = ПустаяСтадия;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьАктуальнуюСтадиюМероприятия()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ДатаНачала = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	ТипЦели = "СправочникСсылка.Цели";
	ТипЗакупочныеПроцедуры = "СправочникСсылка.ЗакупочныеПроцедуры";
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РисковоеСобытие") Тогда
		Организация		 = ДанныеЗаполнения.Организация;
		Проект			 = ДанныеЗаполнения.Проект;
		Контекст		 = ДанныеЗаполнения.Ссылка;
		ЦФО				 = ДанныеЗаполнения.ЦФО;
		ТипРеакцииНаРисковоеСобытие = Справочники.ТипРеакцииНаРисковоеСобытие.Превентивные;
		ВидМероприятия = Перечисления.ВидыМероприятий.РеакцияНаРиск;
		ЗаполнитьПоШаблонуКонтекста(ДанныеЗаполнения.Риск, Перечисления.ВидыМероприятий.РеакцияНаРиск);
		Если СокрЛП(НаименованиеРеакции) = "" Тогда
			НаименованиеРеакции = НСтр("ru = 'Реакция на %Риск%'");
			НаименованиеРеакции = СтрЗаменить(НаименованиеРеакции, "%Риск%", Строка(ДанныеЗаполнения));
		Иначе
			// Наименование уже установлено.
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Риски") Тогда
		ВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие;
		Контекст		 = ДанныеЗаполнения.Ссылка;
		Организация		 = ДанныеЗаполнения.Организация;
		Проект			 = ДанныеЗаполнения.Проект;
		ЦФО				 = ДанныеЗаполнения.ЦФО;
		ЗаполнитьПоШаблонуКонтекста(ДанныеЗаполнения, Перечисления.ВидыМероприятий.КонтрольноеМероприятие);
		Если СокрЛП(НаименованиеРеакции) = "" Тогда
			НаименованиеРеакции = НСтр("ru = 'Контрольное мероприятие по риску %Риск%'");
			НаименованиеРеакции = СтрЗаменить(НаименованиеРеакции, "%Риск%", Строка(ДанныеЗаполнения));
		Иначе
			// Наименование уже установлено.
		КонецЕсли;	
	ИначеЕсли ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(ДанныеЗаполнения) = Тип(ТипЦели) Тогда
		ВидМероприятия = Перечисления.ВидыМероприятий.Инициатива;
		Контекст = ДанныеЗаполнения.Ссылка;	
		ЗаполнитьПоШаблонуКонтекста(ДанныеЗаполнения);
		Если СокрЛП(НаименованиеРеакции) = "" Тогда
			НаименованиеРеакции = НСтр("ru = 'Инициатива для цели %Цель%'");
			НаименованиеРеакции = СтрЗаменить(НаименованиеРеакции, "%Цель%", Строка(ДанныеЗаполнения));
		Иначе
			// Наименование уже установлено.
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныМероприятий") Тогда
		ВидМероприятия		 = ДанныеЗаполнения.ВидМероприятия;
		ШаблонМероприятия	 = ДанныеЗаполнения;
		ЗаполнитьДействияПоШаблону(Истина);
	ИначеЕсли ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ТипЗнч(ДанныеЗаполнения) = Тип(ТипЗакупочныеПроцедуры) Тогда
		ДатаНачала								 = ДанныеЗаполнения.ДатаНачалаПодготовкиЗакупки;
		ВидМероприятия							 = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура;
		Контекст								 = ДанныеЗаполнения.Ссылка;
		СпособВыбораПоставщика					 = ДанныеЗаполнения.СпособВыбораПоставщика; 
		ДатаОфициальногоОбъявленияЗакупки		 = ДанныеЗаполнения.ДатаОфициальногоОбъявленияЗакупки;
		ЗаполнитьПоШаблонуКонтекста(СпособВыбораПоставщика);
		Ответственный							 = ДанныеЗаполнения.Ответственный;
		Если СокрЛП(НаименованиеРеакции) = "" Тогда
			НаименованиеРеакции					 = НСтр("ru = 'Закупочная процедура для %СпособВыбораПоставщика%'");
			НаименованиеРеакции					 = СтрЗаменить(НаименованиеРеакции, "%СпособВыбораПоставщика%", Строка(ДанныеЗаполнения.СпособВыбораПоставщика));
		Иначе
			// Наименование уже установлено.
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		ВидМероприятияЗаполнения			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ВидМероприятия", Перечисления.ВидыМероприятий.ПустаяСсылка());
		ДатаНачалаЗаполнения				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ДатаНачала", Дата(1, 1, 1));
		КонтекстЗаполнения					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Контекст", Справочники.Риски.ПустаяСсылка());
		ШаблонМероприятияЗаполнения			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ШаблонМероприятия", Справочники.ШаблоныМероприятий.ПустаяСсылка());
		ОрганизацияЗаполнения				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Организация", Справочники.Организации.ПустаяСсылка());
		ЦФОЗаполнения						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ЦФО", Справочники.Организации.ПустаяСсылка());
		ПроектЗаполнения					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Проект", Справочники.Проекты.ПустаяСсылка());
		Если ЗначениеЗаполнено(КонтекстЗаполнения) Тогда
			Контекст = КонтекстЗаполнения;
		Иначе
			// Пропускаем контекст.
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаНачалаЗаполнения) Тогда
			ДатаНачала = ДатаНачалаЗаполнения;
		Иначе
			// Пропускаем дату начала.
		КонецЕсли; 
		Если ЗначениеЗаполнено(ШаблонМероприятияЗаполнения) Тогда
			ШаблонМероприятия = ШаблонМероприятияЗаполнения;
			ВидМероприятияЗаполнения = ШаблонМероприятияЗаполнения.ВидМероприятия;
		Иначе
			КонтекстЗаполнения = Контекст;
			Если (ВидМероприятия = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура) И (ЗначениеЗаполнено(Контекст)) Тогда
				КонтекстЗаполнения = Контекст.СпособВыбораПоставщика;
			Иначе
				КонтекстЗаполнения = Контекст
			КонецЕсли;	
			ШаблонМероприятия = РегистрыСведений.НастройкиИспользованияШаблоновМероприятий.ПолучитьОсновнойШаблонПоКонтексту(КонтекстЗаполнения, ВидМероприятия);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидМероприятияЗаполнения) Тогда
			ВидМероприятия = ВидМероприятияЗаполнения;
		Иначе
			ВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОрганизацияЗаполнения) Тогда
			Организация = ОрганизацияЗаполнения;
		Иначе
			// Пропускаем организацию.
		КонецЕсли; 
		Если ЗначениеЗаполнено(ЦфоЗаполнения) Тогда
			ЦФО = ЦфоЗаполнения;
		Иначе
			// Пропускаем организацию.
		КонецЕсли; 
        Если ЗначениеЗаполнено(ПроектЗаполнения) Тогда
			Проект = ПроектЗаполнения;
		Иначе
			// Пропускаем организацию.
		КонецЕсли; 
		ЗаполнитьДействияПоШаблону(Истина);
	Иначе
		// Неизвестный вариант. По умолчанию выставляем контрольное мероприятие.
		ВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	ВыгрузкаСтадий = Стадии.Выгрузить();
	// регистр ЗатратыНаЛиквидациюРисков Приход
	Если ВидМероприятия = Перечисления.ВидыМероприятий.РеакцияНаРиск Тогда
		Движения.ЗатратыНаЛиквидациюРисков.Записывать = Истина;
		ИспользоватьКонтрольЗатрат = Документы.Мероприятие.ИспользоватьКонтрольЗатрат(Ссылка);	
		Если ИспользоватьКонтрольЗатрат Тогда
			Для Каждого ТекСтадии Из Стадии Цикл
				Если НЕ ТекСтадии.ГруппирующаяСтрока Тогда
					Если ТекСтадии.Завершено Тогда 
						Движение = Движения.ЗатратыНаЛиквидациюРисков.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период					 = ТекСтадии.ДатаИзменения;
						Движение.РисковоеСобытие		 = Контекст;
						Движение.Стадия					 = ТекСтадии.Действие;
						Движение.Сумма					 = ТекСтадии.ФактическиеЗатратыСтадии;
						Движение.Автор					 = Ответственный;
					Иначе
						// Действие не завершено. Пропускаем.
					КонецЕсли;
				Иначе
					// Группа стадий. Движений не осуществляет.
				КонецЕсли;
			КонецЦикла;	
		Иначе
			// Не требуется контроль затрат в данном мероприятии.
		КонецЕсли;
	Иначе
		// Для прочих видов мероприятий не заполняем затраты на ликвидацию риска.
	КонецЕсли;
	// регистр ПрогрессСтадийМероприятий
	ИспользоватьПроцентВыполнения = Документы.Мероприятие.ИспользоватьПроцентВыполнения(Ссылка);	
	Движения.ПрогрессСтадийМероприятий.Записывать = Истина;
	Для Каждого ТекСтадии Из Стадии Цикл
		Если НЕ ТекСтадии.ГруппирующаяСтрока Тогда
			НоваяДатаНачала = ТекСтадии.ДатаИзменения;
			НоваяДатаОкончания = НайтиСледующуюДатуНачала(ВыгрузкаСтадий, НоваяДатаНачала);
			Если НЕ ЗначениеЗаполнено(НоваяДатаОкончания) Тогда
				ВеличинаСдвига = ТекСтадии.Действие.Длительность*24*60*60;
				НоваяДатаОкончания = НоваяДатаНачала + ВеличинаСдвига;
			Иначе
				// Значение получено. Оставляем его.
			КонецЕсли;
			Движение = Движения.ПрогрессСтадийМероприятий.Добавить();
			Движение.Мероприятие			 = Ссылка;
			Движение.Стадия					 = ТекСтадии.Действие;
			Движение.Завершено				 = ТекСтадии.Завершено;
			НовыйПрогресс = 0;
			Если ИспользоватьПроцентВыполнения Тогда
				НовыйПрогресс		 = ТекСтадии.Прогресс;
			Иначе
				Если ТекСтадии.Завершено Тогда
					НовыйПрогресс	 = 100;
				Иначе
					НовыйПрогресс	 = 0;
				КонецЕсли;	
			КонецЕсли;
			Движение.Прогресс				 = НовыйПрогресс;
			Движение.ДатаНачала				 = НоваяДатаНачала;
			Движение.ДатаОкончания			 = НоваяДатаОкончания;
			Движение.Автор					 = Ответственный;
			Движение.Комментарий			 = ТекСтадии.РезюмеСтадии;
		Иначе
			// Группа стадий. Движений не осуществляет.
		КонецЕсли;
	КонецЦикла;	
	// регистр АктуальныеСтадииМероприятий.
	АктуальнаяСтадия = ПолучитьАктуальнуюСтадиюМероприятия();
	НаборЗаписей = РегистрыСведений.АктуальныеСтадииМероприятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Ссылка); 
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.Период		 = Дата; 
	НоваяЗапись.Мероприятие	 = Ссылка; 
	НоваяЗапись.Контекст	 = Контекст; 
	НоваяЗапись.Стадия		 = АктуальнаяСтадия; 
	НаборЗаписей.Записать();
	
	Движения.КонтекстыМероприятий.Очистить();
	Движения.КонтекстыМероприятий.Записывать = Истина;
	
	Для каждого СтрокаКонтекста Из КонтекстыМероприятий Цикл
		Движение = Движения.КонтекстыМероприятий.Добавить();
		Движение.Мероприятие = Ссылка;
		Движение.Разделитель = СтрокаКонтекста.НомерСтроки;
		Движение.Контекст = СтрокаКонтекста.Контекст;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	// Проверим, что прогресс максимальной стадии - 100%.
	ЭтоРеакцияНаРиск = (ВидМероприятия = Перечисления.ВидыМероприятий.РеакцияНаРиск);
	ЭтоКонтрольноеМероприятие = (ВидМероприятия = Перечисления.ВидыМероприятий.КонтрольноеМероприятие);
	
	Если (ЭтоРеакцияНаРиск ИЛИ ЭтоКонтрольноеМероприятие) И ЗначениеЗаполнено(ШаблонМероприятия) И ШаблонМероприятия.КонтролироватьПоследовательностьСтадий Тогда
		МаксИтогВыполнения = 0;
		Для Каждого ТекСтадии Из Стадии Цикл
			Если МаксИтогВыполнения < ТекСтадии.ИтогВыполнения Тогда
				МаксИтогВыполнения = ТекСтадии.ИтогВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;	   
		Если МаксИтогВыполнения = 100 Тогда
			// Проверка пройдена успешно.
		Иначе
			ТекстСообщения = НСтр("ru = 'Таблица стадий должна иметь максимальную стадию в 100%. Запись отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоКонтрольноеМероприятие Тогда
		ПроверяемыеРеквизиты.Добавить("ШаблонМероприятия");
		Если ЭтотОбъект.ШаблонМероприятия.УчитываетсяВНалоговомМониторинге И ЭтотОбъект.ОбщийПрогресс = 100 Тогда
			ПроверяемыеРеквизиты.Добавить("РезультатВыполнения");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	// Создадим напоминания о стадии мероприятия.
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Возврат;
	КонецЕсли;
	Имя = "Справочник.ВидыСобытийОповещений.Напоминание_СтадияМероприятия";
	ВидСобытияСтадияМероприятия = ПредопределенноеЗначение(Имя);
	Модуль = ОбщегоНазначения.ОбщийМодуль("МодульУправленияОповещениямиУХ");
	СтруктураНастроек = Модуль.ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияСтадияМероприятия, ВидМероприятия);
	ЕстьНастройкиОповещения = (СтруктураНастроек.Количество() > 0);
	Если (ЕстьНастройкиОповещения) Тогда
		Для Каждого ТекСтадии Из Стадии Цикл
			Если (ТекСтадии.НапомнитьОСтадии) И (НЕ ТекСтадии.Завершено) Тогда
				// Определение получателя.
				ПользовательАдресат = Ответственный;
				Если ЗначениеЗаполнено(ТекСтадии.ОтветственныйСтадии) Тогда
					ПользовательАдресат = ТекСтадии.ОтветственныйСтадии;
				Иначе
					ПользовательАдресат = Ответственный;
				КонецЕсли;	
				// Дополнительные параметры.
				СтруктураДопПараметры = Новый Структура;   
				СтруктураДопПараметры.Вставить("ДатаСтадии", ТекСтадии.ДатаИзменения);
				СтруктураДопПараметры.Вставить("Стадия", ТекСтадии.Действие);
				// Отправка уведомления.
				ДатаСтадии = ТекСтадии.ДатаИзменения;		
				СтруктураНапоминание = Модуль.СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроек, ПользовательАдресат, ДатаСтадии, Ссылка);
				СтруктураНапоминание.Вставить("ДопПараметры", СтруктураДопПараметры);
				Модуль.ДобавитьНапоминаниеПользователяСЗадачей(СтруктураНапоминание);
			Иначе
				// Не требуется напоминать об этой стадии, либо стадия уже завершена.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Оповещения по данному событию не настроено.
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// регистр АктуальныеСтадииМероприятий.
	АктуальнаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	Выгрузка = Стадии.Выгрузить();
	Если Выгрузка.Количество() > 0 Тогда
		Выгрузка.Сортировать("ДатаИзменения возр");
		ПерваяСтрока = Выгрузка[0];
		АктуальнаяСтадия = ПерваяСтрока.Действие;
	Иначе
		АктуальнаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.АктуальныеСтадииМероприятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Ссылка); 
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.Период		 = Дата; 
	НоваяЗапись.Мероприятие	 = Ссылка; 
	НоваяЗапись.Контекст	 = Контекст; 
	НоваяЗапись.Стадия		 = АктуальнаяСтадия; 
	НаборЗаписей.Записать(); 
КонецПроцедуры

#КонецЕсли