#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Проводки = ВыбранноеЗначение;
	Иначе
		Проводки = Новый Массив;
		Проводки.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	Для каждого Проводка Из Проводки Цикл
		
		Отбор = Новый Структура("Корректировка,НомерПроводки", Проводка.Ссылка, Проводка.НомерПроводки);
		
		Если Объект.ПроводкиПовтора.НайтиСтроки(Отбор).Количество() Тогда
			
			ШаблонСообщения = НСтр("ru = 'Корректировка №<%1> документа <%2> уже содержится в списке повтора'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ШаблонСообщения, Проводка.НомерПроводки, Проводка.Ссылка));
												
		Иначе	
			
			НоваяСтрока = Объект.ПроводкиПовтора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка); 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборПроводок(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ПериодОтчета", Объект.ПериодОтчетаПредыдущий);
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	
	ОткрытьФорму("Документ.ПовторениеКорректировокПрошлыхПериодов.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ПериодСценарияПриИзменении(Элемент)
	ДанныеПоПериоду = ПолучитьДанныеПоПериоду(Объект.ПериодОтчета);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеПоПериоду);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПовтораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;// проводки можно добавлять только через заполнение или подбор, но удалять можно
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоПериоду(ПериодОтчета)
	
	Результат = Новый Структура;
	Результат.Вставить("ПериодОтчетаПредыдущий", ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, -1));
	Результат.Вставить("Дата", НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПериодОтчета, "ДатаНачала")));
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Новый Структура("ЗаполнитьДокумент", Истина));
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти