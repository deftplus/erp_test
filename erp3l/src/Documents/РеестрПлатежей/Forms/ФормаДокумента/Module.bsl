#Область УниверсальныеПроцессыСогласование

// Выводит на форму панель согасования и устанавливает обработчики событий
// для элементов панели.
&НаСервере
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, ЭтаФорма);
	ЭтаФорма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
	ЭтаФорма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
	ЭтаФорма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
	ЭтаФорма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
	ЭтаФорма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	ОпределитьСостояниеОбъекта();
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

#Область ВызовыОбщихПроцедурИФункцийСогласованияОбъектов

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Изменение состояния возможно только после записи данных.
				|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	
	УстановитьУсловноеОформление();
	
	ИнициализироватьПараметрыОрганизации();
	
	АктуализироватьДанныеЗаявок();
	
	УстановитьРежимОтбораЗаявок(ЭтотОбъект, РежимОтбораВсеЗаявки());	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДополнитьЗаявкиПлатежнымиПоручениями();
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбъектСогласован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "МаршрутИнициализирован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояниеОбъекта();
		#КонецОбласти		
	ИначеЕсли ИмяСобытия = "СозданыПлатежныеПоручения" И Параметр = Объект.Ссылка Тогда
		АктуализироватьДанныеЗаявок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.Свойство("НеОтправлятьНаСогласованиеПриПроведении") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеОтправлятьНаСогласованиеПриПроведении", Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Оповестить("ПроведенРеестрПлатежей",, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	#Область УХ_Согласование
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		ОпределитьСостояниеОбъекта();
	КонецЕсли;
	#КонецОбласти

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	АктуализироватьДанныеЗаявок();
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОплатыПриИзменении(Элемент)
	ЗаполнитьСписокПлатежей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежи

&НаКлиенте
Процедура ЗаявкиНаОплатуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РедактируемыеПоля = Новый Массив;
	Если РазрешеноИсключениеЗаявок(ЭтотОбъект) Тогда
		РедактируемыеПоля.Добавить(Элементы.ЗаявкиНаОплатуИсключена);
		РедактируемыеПоля.Добавить(Элементы.ЗаявкиНаОплатуПричинаИсключения);
	КонецЕсли;	
	
	Если РедактируемыеПоля.Найти(Поле) = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ЗаявкаНаОплату);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаОплатуИсключенаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаявкиНаОплату.ТекущиеДанные;
	ОбработатьИсключениеЗаявки(ТекДанные);
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИсключениеЗаявки(Строка)
	
	Если Строка.Исключена Тогда
		Строка.КтоИсключил = ПользователиКлиентСервер.ТекущийПользователь();
	Иначе
		Строка.КтоИсключил = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Строка.ПричинаИсключения = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаОплатуПередУдалением(Элемент, Отказ)
	
	Если НЕ РазрешеноИзменениеСпискаЗаявок(ЭтотОбъект) Тогда
		Отказ = Истина;	 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаОплатуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина; // добавление через подбор
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаОплатуПриАктивизацииСтроки(Элемент)
	// Доступность команды ОткрытьПлатежноеПоручение
	ДоступностьОткрытьПлатежноеПоручение();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПодобратьЗаявки(Команда)
	
	ПараметрыПодбора = ПараметрыПодбораЗаявок();
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодобратьЗаявкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.РеестрПлатежей.Форма.ПодборПлатежныхПозиций",
		ПараметрыПодбора, ЭтаФорма,,,,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаСервере
Функция ПараметрыПодбораЗаявок()
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ДатаОплаты", Объект.ДатаОплаты);
	ПараметрыПодбора.Вставить("ИсключаемыеИдентификаторыПозиций", 
		Объект.ЗаявкиНаОплату.Выгрузить().ВыгрузитьКолонку("ИдентификаторПозиции"));
	
	Возврат ПараметрыПодбора;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьЗаявкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьПодборПлатежныхПозиций(Результат.АдресЗаявокВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеПометки(Команда)
	
	УстановитьЗначениеПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПометки(Команда)
	
	УстановитьЗначениеПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ЗаполнитьСписокПлатежей();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатежноеПоручение(Команда)
	ТекущиеДанные = Элементы.ЗаявкиНаОплату.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда		
		ПоказатьЗначение(, ТекущиеДанные.ПлатежноеПоручение);
	Иначе
		//Текущая строка не выбрана. Ничего не делаем.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеПоручения(Команда)
	
	СтруктураПараметров = Новый Структура("ГенерацияПоРееструПлатежей,РеестрПлатежей", Истина, Объект.Ссылка);
	ДенежныеСредстваВстраиваниеУХКлиент.ОткрытьФормуГенерацииПлатежныхПоручений(СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВключенныеЗаявки(Команда)
	
	УстановитьРежимОтбораЗаявок(ЭтотОбъект, РежимОтбораТолькоВключенныеЗаявки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИсключенныеЗаявки(Команда)
	
	УстановитьРежимОтбораЗаявок(ЭтотОбъект, РежимОтбораТолькоИсключенныеЗаявки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеЗаявки(Команда)
	
	УстановитьРежимОтбораЗаявок(ЭтотОбъект, РежимОтбораВсеЗаявки());

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьИтоги()
	
	ВсегоКОплате = Объект.ЗаявкиНаОплату.Выгрузить(Новый Структура("Исключена", Ложь),"ВалютаПлатежа,СуммаПлатежа");
	ВсегоКОплате.Свернуть("ВалютаПлатежа","СуммаПлатежа");
	ВсегоКОплате.Сортировать("ВалютаПлатежа");
	ЧастиСумм = Новый Массив;
	Для Каждого ТекСтрока Из ВсегоКОплате Цикл
		ЧастиСумм.Добавить(СтрШаблон("%1 %2", ТекСтрока.СуммаПлатежа, ТекСтрока.ВалютаПлатежа));
	КонецЦикла;
	
	ИтогоТекст = СтрСоединить(ЧастиСумм, ", ");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить(Элементы.ЗаявкиНаОплатуИсключена);
	ИсключаемыеПоля.Добавить(Элементы.ЗаявкиНаОплатуКтоИсключил);
	ИсключаемыеПоля.Добавить(Элементы.ЗаявкиНаОплатуПричинаИсключения);
	
	// Зачеркнем исключенные заявки
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	Для Каждого ТекКолонка Из Элементы.ЗаявкиНаОплату.ПодчиненныеЭлементы Цикл		
		Если ИсключаемыеПоля.Найти(ТекКолонка) = Неопределено Тогда 			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ТекКолонка.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЗаявкиНаОплату.Исключена", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,,Истина));
	
	// Не дадим восстанавливать ранее исключенные не нами заявки.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ЗаявкиНаОплатуИсключена.Имя);
	
	ГруппаОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "ГруппаИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбор,
		"Объект.ЗаявкиНаОплату.ИсключенаВСохраненнойВерсии", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбор,
		"Объект.ЗаявкиНаОплату.ЗаявкиНаОплатуКтоИсключил", ВидСравненияКомпоновкиДанных.Равно, ПользователиКлиентСервер.ТекущийПользователь());
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ПричинаИсключения = ТолькоПросмотр, если заявка не исключена
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ЗаявкиНаОплатуПричинаИсключения.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЗаявкиНаОплату.Исключена", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПометки(Знач ЗначениеПометки = Истина)
	
	Для Каждого ТекСтрока Из Объект.ЗаявкиНаОплату Цикл
		ТекСтрока.Исключена = ЗначениеПометки;
		ОбработатьИсключениеЗаявки(ТекСтрока);
	КонецЦикла;
	
	ОбновитьИтоги();
	
КонецПроцедуры

#Область УниверсальныеПроцессыСогласование

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры	

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ДокументУтвержден = (Форма.СтатусОбъекта = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Утверждена"));
	
	Элементы.ВнеМаршрута.Видимость = Форма.ЕстьСуперпользователь;
	
	РазрешеноИсключениеЗаявок = РазрешеноИсключениеЗаявок(Форма);
	РазрешеноИзменениеСпискаЗаявок = РазрешеноИзменениеСпискаЗаявок(Форма);
	
	Элементы.ГруппаОсновныеРеквизиты.ТолькоПросмотр = НЕ РазрешеноИзменениеСпискаЗаявок;	
	Элементы.ЗаявкиНаОплатуОбновитьСписок.Доступность = РазрешеноИзменениеСпискаЗаявок;
	Элементы.ЗаявкиНаОплатуПодобратьЗаявки.Доступность = РазрешеноИзменениеСпискаЗаявок;
	
	Элементы.ЗаявкиНаОплатуГруппаПометки.Доступность = РазрешеноИсключениеЗаявок;
	Элементы.ЗаявкиНаОплатуИсключена.ТолькоПросмотр = НЕ РазрешеноИсключениеЗаявок;
	Элементы.ЗаявкиНаОплатуПричинаИсключения.ТолькоПросмотр = НЕ РазрешеноИсключениеЗаявок;

	Элементы.ФормаСформироватьПлатежныеПоручения.Доступность = ДокументУтвержден И Объект.Проведен;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазрешеноИсключениеЗаявок(Форма)
	
	Возврат Форма.СтатусОбъекта <> ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Утверждена")
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазрешеноИзменениеСпискаЗаявок(Форма)
	
	Возврат 
	    НЕ Форма.Объект.Проведен
		И Форма.СтатусОбъекта <> ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Утверждена")
	    И Форма.СтатусОбъекта <> ПредопределенноеЗначение("Перечисление.СостоянияСогласования.НаУтверждении")
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПараметрыОрганизации()
	
	ЕстьСуперПользователь	= МодульСогласованияДокументовУХ.ЕстьСуперПользователь(Объект.Организация);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура АктуализироватьДанныеЗаявок()
	ЗаполнитьСписокПлатежей(Ложь);
КонецПроцедуры

Процедура ЗаполнитьСписокПлатежей(ПерезаполнитьПолностью = Истина)
	
	Если РазрешеноИзменениеСпискаЗаявок(ЭтотОбъект) Тогда
		
		МассивИдентификаторов = Неопределено;
		Если НЕ ПерезаполнитьПолностью Тогда
			// только обновляем данные заявок
			МассивИдентификаторов = Объект.ЗаявкиНаОплату.Выгрузить().ВыгрузитьКолонку("ИдентификаторПозиции");
		КонецЕсли;
		
		ТабЗаявок = Документы.РеестрПлатежей.СписокСогласованныхПлатежей(Объект.Организация, Объект.ДатаОплаты, МассивИдентификаторов);
		ЗагрузитьТаблицуЗаявок(ТабЗаявок, ПерезаполнитьПолностью);
		
	КонецЕсли;
		
	ОбновитьИтоги();
	
	ДополнитьЗаявкиПлатежнымиПоручениями();
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуЗаявок(НоваяТаблицаЗаявок, ПерезаполнитьПолностью)
	
	Если ПерезаполнитьПолностью Тогда
		Объект.ЗаявкиНаОплату.Загрузить(НоваяТаблицаЗаявок);
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица = Объект.ЗаявкиНаОплату.Выгрузить();
	ТекущаяТаблица.Колонки.Добавить("Актуальна", Новый ОписаниеТипов("Булево"));
	ТекущаяТаблица.Индексы.Добавить("ИдентификаторПозиции");
	
	Для каждого НоваяСтрока Из НоваяТаблицаЗаявок Цикл
		ТекущаяСтрока = ТекущаяТаблица.Найти(НоваяСтрока.ИдентификаторПозиции, "ИдентификаторПозиции");
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = ТекущаяТаблица.Добавить();
		КонецЕсли;
		
		// не перезаполняются Исключена, КтоИсключил, ПричинаИсключения
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НоваяСтрока);
		ТекущаяСтрока.Актуальна = Истина;
	КонецЦикла;
	
	МассивУдаленныхСтрок = ТекущаяТаблица.НайтиСтроки(Новый Структура("Актуальна", Ложь));
	Для каждого Строка Из МассивУдаленныхСтрок Цикл
		ТекущаяТаблица.Удалить(Строка);
	КонецЦикла;
	
	Объект.ЗаявкиНаОплату.Загрузить(ТекущаяТаблица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимОтбораЗаявок(Форма, РежимОтбора)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ЗаявкиНаОплатуОтображатьВключенныеЗаявки.Пометка = (РежимОтбора = РежимОтбораТолькоВключенныеЗаявки());
	Элементы.ЗаявкиНаОплатуОтображатьИсключенныеЗаявки.Пометка = (РежимОтбора = РежимОтбораТолькоИсключенныеЗаявки());
	Элементы.ЗаявкиНаОплатуОтображатьВсеЗаявки.Пометка = (РежимОтбора = РежимОтбораВсеЗаявки());
	
	
	// По умолчанию показываем все.
	ОтборСтрок = Неопределено;
	
	Если РежимОтбора = РежимОтбораТолькоВключенныеЗаявки() Тогда
		// Только включенные.
		ОтборСтрок = Новый ФиксированнаяСтруктура("Исключена", Ложь);
	ИначеЕсли РежимОтбора = РежимОтбораТолькоИсключенныеЗаявки() Тогда
		// Только исключенные.
		ОтборСтрок = Новый ФиксированнаяСтруктура("Исключена", Истина);
	ИначеЕсли РежимОтбора = РежимОтбораВсеЗаявки() Тогда
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ЗаявкиНаОплату.ОтборСтрок = ОтборСтрок;
	
	Элементы.ЗаявкиНаОплатуКтоИсключил.Видимость = НЕ (РежимОтбора = РежимОтбораТолькоВключенныеЗаявки());
	Элементы.ЗаявкиНаОплатуПричинаИсключения.Видимость = НЕ (РежимОтбора = РежимОтбораТолькоВключенныеЗаявки());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимОтбораВсеЗаявки()

	Возврат "ВсеЗаявки";

КонецФункции // РежимОтбораВсеЗаявки()

&НаКлиентеНаСервереБезКонтекста
Функция РежимОтбораТолькоВключенныеЗаявки()

	Возврат "ТолькоВключенныеЗаявки";

КонецФункции // РежимОтбораТолькоВключенныеЗаявки()

&НаКлиентеНаСервереБезКонтекста
Функция РежимОтбораТолькоИсключенныеЗаявки()

	Возврат "ТолькоИсключенныеЗаявки";

КонецФункции // РежимОтбораТолькоИсключенныеЗаявки()

// Управляет доступностью команды ОткрытьПлатежноеПоручение
&НаКлиенте
Функция ДоступностьОткрытьПлатежноеПоручение()
	ТекущиеДанные = Элементы.ЗаявкиНаОплату.ТекущиеДанные;
	МожноОткрытьПлатежноеПоручение = Ложь;
	Если ТекущиеДанные <> Неопределено Тогда
				
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "ПлатежноеПоручение") тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ПлатежноеПоручение) тогда
				МожноОткрытьПлатежноеПоручение = Истина;
			Иначе
				МожноОткрытьПлатежноеПоручение = Ложь;
			КонецЕсли;
		Иначе
			МожноОткрытьПлатежноеПоручение = Ложь;
		КонецЕсли;
		
	Иначе
		МожноОткрытьПлатежноеПоручение = Ложь;
	КонецЕсли;
	Элементы.ЗаявкиНаОплатуОткрытьПлатежноеПоручение.Доступность					 = МожноОткрытьПлатежноеПоручение;
	Элементы.ЗаявкиНаОплатуКонтекстноеМенюОткрытьПлатежноеПоручение.Доступность	 = МожноОткрытьПлатежноеПоручение;
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ИнициализироватьПараметрыОрганизации();
	ЗаполнитьСписокПлатежей();
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	ДополнитьТаблицуЗаявок();
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуЗаявок()
	
	// 1. Продублируем колонку со статусом
	// 2. Выполним проверку актуальности всех заявок.
	Для Каждого ТекСтрокаРеестра Из Объект.ЗаявкиНаОплату Цикл
		
		ТекСтрокаРеестра.ИсключенаВСохраненнойВерсии = ТекСтрокаРеестра.Исключена;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкиВРеестре.ЗаявкаНаОплату КАК ЗаявкаНаОплату,
	|	ЗаявкиВРеестре.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТ_ЗаявкиВРеестре
	|ИЗ
	|	&ЗаявкиВРеестре КАК ЗаявкиВРеестре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиВРеестре.ЗаявкаНаОплату КАК ЗаявкаНаОплату,
	|	ВТ_ЗаявкиВРеестре.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ЗаявкиВРеестрахПлатежей.РеестрПлатежей КАК РеестрПлатежей,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	ВТ_ЗаявкиВРеестре КАК ВТ_ЗаявкиВРеестре
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкиВРеестрахПлатежей КАК ЗаявкиВРеестрахПлатежей
	|		ПО ВТ_ЗаявкиВРеестре.ЗаявкаНаОплату = ЗаявкиВРеестрахПлатежей.ЗаявкаНаОперацию
	|			И ВТ_ЗаявкиВРеестре.ИдентификаторПозиции = ЗаявкиВРеестрахПлатежей.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО ВТ_ЗаявкиВРеестре.ЗаявкаНаОплату = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И ВТ_ЗаявкиВРеестре.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции";
	
	Запрос.УстановитьПараметр("ЗаявкиВРеестре", Объект.ЗаявкиНаОплату.Выгрузить(,"ЗаявкаНаОплату, ИдентификаторПозиции"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЗаявкиПлатежнымиПоручениями()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы.ЗаявкиНаОплату.ПодчиненныеЭлементы, "ЗаявкиНаОплатуПлатежноеПоручение") тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаявок = Объект.ЗаявкиНаОплату.Выгрузить(, "ЗаявкаНаОплату, ИдентификаторПозиции");
	ТаблицаЗаявок.Свернуть("ЗаявкаНаОплату, ИдентификаторПозиции");
	
	ЗапросПоПлатежнымПоручениям = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаявок.ЗаявкаНаОплату КАК ЗаявкаНаОплату,
	|	ТаблицаЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТЗаявкиНаОплату
	|ИЗ
	|	&ТаблицаЗаявок КАК ТаблицаЗаявок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторПозиции,
	|	ЗаявкаНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТЗаявкиНаОплату.ЗаявкаНаОплату КАК ЗаявкаНаОплату,
	|	ВТЗаявкиНаОплату.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка КАК ПлатежноеПоручение
	|ИЗ
	|	ВТЗаявкиНаОплату КАК ВТЗаявкиНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО ВТЗаявкиНаОплату.ИдентификаторПозиции = СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ИдентификаторПозиции
	|			И ВТЗаявкиНаОплату.ЗаявкаНаОплату = СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ДокументПланирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО (СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка = СписаниеБезналичныхДенежныхСредств.Ссылка)
	|			И (СписаниеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ)");
	
	ЗапросПоПлатежнымПоручениям.УстановитьПараметр("ТаблицаЗаявок", ТаблицаЗаявок);
	
	ВыборкаПлатежныхПоручений = ЗапросПоПлатежнымПоручениям.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("ЗаявкаНаОплату, ИдентификаторПозиции");
	
	Для Каждого Строка Из Объект.ЗаявкиНаОплату Цикл
		Строка.ПлатежноеПоручение = неопределено;
	КонецЦикла;
	
	Пока ВыборкаПлатежныхПоручений.Следующий() Цикл
		
		СтруктураПоиска.Вставить("ЗаявкаНаОплату", ВыборкаПлатежныхПоручений.ЗаявкаНаОплату);
		СтруктураПоиска.Вставить("ИдентификаторПозиции", ВыборкаПлатежныхПоручений.ИдентификаторПозиции);
		
		МассивСтрок = Объект.ЗаявкиНаОплату.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Строка Из МассивСтрок Цикл
			Строка.ПлатежноеПоручение = ВыборкаПлатежныхПоручений.ПлатежноеПоручение;
			Строка.Исполнение = Истина;
		КонецЦикла;
		
	КонецЦикла;
		
	ВсеПлатежныеПорученияСозданы = Истина;
	
	Для Каждого Строка Из Объект.ЗаявкиНаОплату Цикл
		Если Не ЗначениеЗаполнено(Строка.ПлатежноеПоручение) тогда
			ВсеПлатежныеПорученияСозданы = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормаСформироватьПлатежныеПоручения.Видимость = Не ВсеПлатежныеПорученияСозданы;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборПлатежныхПозиций(АдресЗаявокВХранилище)
	
	ТаблицаЗаявок = ПолучитьИзВременногоХранилища(АдресЗаявокВХранилище);
	
	Для каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		СтрокиПозиции = Объект.ЗаявкиНаОплату.НайтиСтроки(Новый Структура("ИдентификаторПозиции", СтрокаЗаявки.ИдентификаторПозиции));
		Если СтрокиПозиции.Количество() > 0 Тогда
			СтрокаТЧ = СтрокиПозиции[0];
		Иначе
			СтрокаТЧ = Объект.ЗаявкиНаОплату.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаЗаявки);
	КонецЦикла;
	
	ОбновитьИтоги();	
	ДополнитьЗаявкиПлатежнымиПоручениями();
	
КонецПроцедуры
#КонецОбласти
