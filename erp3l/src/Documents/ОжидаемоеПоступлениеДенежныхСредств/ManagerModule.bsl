#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Автор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов,	"Организация", Параметры);
	
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Подразделение");
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Организация, Подразделение";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Ответственный", Параметры);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	#Область УХ_Встраивание
	
	//Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	//Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	НоваяКоманда = Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "ПлатежныеПозицииКлиент.СоздатьПоступлениеБезналичныхДС";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию";
		НоваяКоманда.МножественныйВыбор = Истина;
	КонецЕсли;
	
	НоваяКоманда = Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "ПлатежныеПозицииКлиент.СоздатьПриходныйКассовыйОрдер";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию";
		НоваяКоманда.МножественныйВыбор = Истина;
	КонецЕсли;
		
	#КонецОбласти 
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	#Область УХ_Встраивание
	ВстраиваниеУХОжидаемоеПоступлениеДенежныхСредств.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	#КонецОбласти 
	
КонецПроцедуры

// Добавляет команду создания документа "Ожидаемое поступление ДС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений - строка данных, определяющая параметры команды ввода на основании.
//  - Неопределено - если нет права на создание документа "Ожидаемое поступление ДС".
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОжидаемоеПоступлениеДенежныхСредств) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ОжидаемоеПоступлениеДенежныхСредств.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ОжидаемоеПоступлениеДенежныхСредств);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаявкиНаРасходованиеДенежныхСредств";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - значение формы оплаты.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ФормаОплаты, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Касса");
	МассивВсехРеквизитов.Добавить("БанковскийСчет");
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		МассивРеквизитовОперации = Новый Массив;
		МассивРеквизитовОперации.Добавить("Касса");
	
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		МассивРеквизитовОперации = Новый Массив;
		МассивРеквизитовОперации.Добавить("БанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ВЫБОР КОГДА Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	ТОГДА ЗначениеРазрешено(Касса)
	|	ИНАЧЕ ИСТИНА КОНЕЦ ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область УХ_Встраивание

// Функция возвращает таблицу операций заявки для формирования платежной позиции
Функция ПолучитьДвиженияОперацииДокументаДляПлатежнойПозиции(ЗаявкаСсылка) экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ЗаявкаСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.ПустаяСсылка) КАК ПриходРасход,
	|	ОжидаемоеПоступлениеДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика1 КАК Аналитика1,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика2 КАК Аналитика2,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика3 КАК Аналитика3,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика4 КАК Аналитика4,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика5 КАК Аналитика5,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика6 КАК Аналитика6,
	|	ОжидаемоеПоступлениеДенежныхСредств.ЦФО КАК ЦФО,
	|	ОжидаемоеПоступлениеДенежныхСредств.Проект КАК Проект,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ОжидаемоеПоступлениеДенежныхСредств.Валюта КАК ВалютаВзаиморасчетов,
	|	ОжидаемоеПоступлениеДенежныхСредств.Подразделение КАК Подразделение,
	|	ОжидаемоеПоступлениеДенежныхСредств.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ОжидаемоеПоступлениеДенежныхСредств.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ОжидаемоеПоступлениеДенежныхСредств.ДоговорАренды КАК ДоговорАренды,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ОбъектРасчетов,
	|	ОжидаемоеПоступлениеДенежныхСредств.Договор КАК ОбъектРасчетовУХ,
	|	ОжидаемоеПоступлениеДенежныхСредств.Партнер КАК Партнер,
	|	ОжидаемоеПоступлениеДенежныхСредств.Договор КАК Заказ,
	|	СУММА(ОжидаемоеПоступлениеДенежныхСредств.СуммаДокумента) КАК Сумма,
	|	СУММА(0) КАК СуммаНДС,
	|	ОжидаемоеПоступлениеДенежныхСредств.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ОжидаемоеПоступлениеДенежныхСредств
	|ГДЕ
	|	ОжидаемоеПоступлениеДенежныхСредств.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОжидаемоеПоступлениеДенежныхСредств.СтатьяДвиженияДенежныхСредств,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика1,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика2,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика3,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика4,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика5,
	|	ОжидаемоеПоступлениеДенежныхСредств.Аналитика6,
	|	ОжидаемоеПоступлениеДенежныхСредств.ЦФО,
	|	ОжидаемоеПоступлениеДенежныхСредств.Проект,
	|	ОжидаемоеПоступлениеДенежныхСредств.Валюта,
	|	ОжидаемоеПоступлениеДенежныхСредств.Подразделение,
	|	ОжидаемоеПоступлениеДенежныхСредств.ДоговорЗаймаСотруднику,
	|	ОжидаемоеПоступлениеДенежныхСредств.ДоговорКредитаДепозита,
	|	ОжидаемоеПоступлениеДенежныхСредств.ДоговорАренды,
	|	ОжидаемоеПоступлениеДенежныхСредств.Партнер,
	|	ОжидаемоеПоступлениеДенежныхСредств.Договор,
	|	ОжидаемоеПоступлениеДенежныхСредств.ЭлементСтруктурыЗадолженности,
	|	ОжидаемоеПоступлениеДенежныхСредств.Договор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ОжидаемоеПоступлениеДенежныхСредств.СуммаДокумента) <> 0
	|		ИЛИ СУММА(0) <> 0)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбъектыРасчетов = Новый Соответствие;
	Для Каждого Строка Из Результат Цикл
		
		ОбъектРасчетовДоговор = ОбъектыРасчетов[Строка.ОбъектРасчетовУХ];
		Если ОбъектРасчетовДоговор = неопределено Тогда
			ОбъектРасчетовДоговор = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Строка.ОбъектРасчетовУХ);
		КонецЕсли;
		Строка.ОбъектРасчетов = ОбъектРасчетовДоговор;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьВозможностьУстановкиСостояния(ОбъектСсылка, СостояниеОбъекта, ПротоколОшибок = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектСсылка) <> Тип("ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств") Тогда
		ТекстОшибки = СтрШаблон( 
			НСтр("ru = 'Объект %1 не является заявкой на операцию.'"),
			ОбъектСсылка);
		УправлениеПроцессамиСогласованияУХКлиентСервер.ДобавитьОшибкуУстановкиСтатусаОбъекта(
			ПротоколОшибок, ОбъектСсылка, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПроверкаПройдена = Истина;
	
	Если СостояниеОбъекта = Перечисления.СостоянияСогласования.Утверждена Тогда
		
		// Организация, контрагент, договор, счет контрагента, статьи ДДС, ЦФО, Период контроля
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаОперацию.Ссылка КАК Ссылка,
		|	ЗаявкаНаОперацию.Организация КАК Организация,
		|	ЗаявкаНаОперацию.Контрагент КАК Контрагент,
		|	ЗаявкаНаОперацию.ЦФО КАК ЦФО,
		|	ЗаявкаНаОперацию.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	неопределено КАК ДоговорКонтрагента,
		|	ЗаявкаНаОперацию.СуммаДокумента КАК СуммаДокумента,
		|	ЗаявкаНаОперацию.Валюта КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств) КАК ВидБюджета,
		|	ЗаявкаНаОперацию.ФормаОплаты КАК ФормаОплаты
		|ИЗ
		|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ЗаявкаНаОперацию
		|ГДЕ
		|	ЗаявкаНаОперацию.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		ДанныеДокумента = Запрос.Выполнить().Выгрузить()[0];
		
		РеквизитыПроверяемыеНаЗаполнение = Новый СписокЗначений;
		РеквизитыПроверяемыеНаЗаполнение.Добавить("СуммаДокумента", НСтр("ru = 'Сумма документа'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("ВалютаДокумента", НСтр("ru = 'Валюта документа'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("ЦФО", НСтр("ru = 'ЦФО'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("СтатьяДвиженияДенежныхСредств", НСтр("ru = 'Статья движения денежных средств'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("Организация", НСтр("ru = 'Организация'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("Контрагент", НСтр("ru = 'Контрагент'"));
		
		Для Каждого ПроверяемыйРеквизит из РеквизитыПроверяемыеНаЗаполнение Цикл
			Если Не ЗначениеЗаполнено(ДанныеДокумента[ПроверяемыйРеквизит.Значение]) Тогда
				
				ПроверкаПройдена = Ложь;
				
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле","Заполнение",ПроверяемыйРеквизит.Представление);
				УправлениеПроцессамиСогласованияУХКлиентСервер.ДобавитьОшибкуУстановкиСтатусаОбъекта(ПротоколОшибок, ОбъектСсылка, ТекстОшибки, "Объект." + ПроверяемыйРеквизит.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	ПеречислениеВБюджет - Булево - Признак перечисления в бюджет
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемыз в выбранной хозяйственной операции.
//
Процедура ПолучитьМассивыРеквизитов(ФормаОплаты, ВидОперацииУХ, ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ФормаОплаты, МассивВсехРеквизитов, МассивРеквизитовОперации);
	#Область УХ_Встраивание
	ВстраиваниеУХОжидаемоеПоступлениеДенежныхСредств.ПолучитьМассивыРеквизитов(ВидОперацииУХ, ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
	#КонецОбласти
	
КонецПроцедуры

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Функция НастройкиПолейФормы() Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Настройки = ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы();
	
	#Область УХ_Встраивание
	ВстраиваниеУХОжидаемоеПоступлениеДенежныхСредств.НастройкиПолейФормы(Настройки);
	#КонецОбласти 
	
	Возврат Настройки;
	
КонецФункции

Функция РольПоВидуОперацииУХ()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Справочники.ВидыОперацийУХ.ВозвратПокупателю, Перечисления.РолиКонтрагентов.Покупатели);
	Результат.Вставить(Справочники.ВидыОперацийУХ.ВозвратРозничномуПокупателю, Перечисления.РолиКонтрагентов.Покупатели);
	Результат.Вставить(Справочники.ВидыОперацийУХ.ОплатаПоставщику, Перечисления.РолиКонтрагентов.Поставщики);
	Результат.Вставить(Справочники.ВидыОперацийУХ.ВозвратОтПоставщика, Перечисления.РолиКонтрагентов.Поставщики);
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныйПрограммныйИнтерфейс

Процедура РеквизитыЗаявки(РеквизитыЗаявки) Экспорт
	
	ОМ = ЗаявкиНаОперации;

	РеквизитыЗаявки.ВидБюджетаПВХ = ОМ.Новый_ЗначениеРеквизита("ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств");
	РеквизитыЗаявки.ВидБюджета = ОМ.Новый_ЗначениеРеквизита("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств");
	РеквизитыЗаявки.СтатьяБюджета = ОМ.Новый_Реквизит("СтатьяДвиженияДенежныхСредств");
	
	РеквизитыЗаявки.БанковскийСчет = ОМ.Новый_Реквизит("БанковскийСчет");
	РеквизитыЗаявки.Касса = ОМ.Новый_Реквизит("Касса");
	РеквизитыЗаявки.ДоговорКонтрагента = ОМ.Новый_Реквизит("Договор");
	РеквизитыЗаявки.Вставить("ДоговорКредитаДепозита", ОМ.Новый_Реквизит("ДоговорКредитаДепозита"));
	РеквизитыЗаявки.БанковскийСчетКонтрагента = ОМ.Новый_Реквизит(неопределено);
	РеквизитыЗаявки.ОрганизацияВстречная = ОМ.Новый_Реквизит("ОрганизацияОтправитель");
	РеквизитыЗаявки.ВалютаДокумента = ОМ.Новый_Реквизит("Валюта");
	РеквизитыЗаявки.ВалютаОплаты = ОМ.Новый_Реквизит("ВалютаОплаты");

	РеквизитыЗаявки.ПриходРасход = ОМ.Новый_ЗначениеРеквизита("Перечисление.ВидыДвиженийПриходРасход.Приход");
	РеквизитыЗаявки.ФормаОплаты = ОМ.Новый_Реквизит("ФормаОплаты");
	РеквизитыЗаявки.ПланируемаяДатаОперации = ОМ.Новый_Реквизит("ДатаНачала");
	
	// Аналитики
	ОМ.Изменить_Реквизит(РеквизитыЗаявки.СтатьяБюджета, "СтатьяДвиженияДенежныхСредств");
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		ОМ.Изменить_Реквизит(РеквизитыЗаявки["Аналитика"+Сч], "Аналитика"+Сч);
	КонецЦикла;
	
	// Параметры
	РеквизитыЗаявки.Параметры.Вставить("СчетКассаВФорме", Ложь);
	
	// Аналитики
	ЗаявкиНаОперации.РазместитьВПоляхФормы(
		РеквизитыЗаявки,,
		РеквизитыЗаявки.СтатьяБюджета, "СтатьяДвиженияДенежныхСредств",
		"Аналитика%1", "АналитикаШапка%1",
		ФормыУХ.РазместитьВГруппе("ГруппаДополнительныеРеквизиты")
	);
	
КонецПроцедуры

Процедура ПоляДанныхПредставления(СтруктураПолей) Экспорт
	
	СтруктураПолей.Сумма = "СуммаДокумента";
	СтруктураПолей.Валюта = "Валюта";
	СтруктураПолей.ДатаПланируемая = "ДатаНачала";
	СтруктураПолей.Удалить("ДатаНеПозднее");
	
КонецПроцедуры

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	РеквизитыЗаявки = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(ПустаяСсылка().Метаданные().ПолноеИмя());
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	ВидБюджета = ЗаявкиНаОперации.РеквизитЗаявки(Источник, РеквизитыЗаявки.ВидБюджетаПВХ);
	Предназначение = ЗаявкиНаОперации.РеквизитЗаявки(Источник, РеквизитыЗаявки.ВидБюджета);
	Направление = ЗаявкиНаОперации.РеквизитЗаявки(Источник, РеквизитыЗаявки.ПриходРасход);
	
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение);
	
	//
	ПредопределенныеДанные = Новый Структура(
		"ВидБюджета, Предназначение, ПриходРасход, ДокументРезервирования, Период, Организация, Контрагент, ДоговорКонтрагента, ЦФО, Проект, Валюта",
		ВидБюджета, Предназначение, Направление, ДанныеОбъекта.ДокументПланирования,
		ДанныеОбъекта.ДатаНачала, ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.Договор,
		ДанныеОбъекта.ЦФО, ДанныеОбъекта.Проект, ДанныеОбъекта.Валюта
	);
	ПредопределенныеДанные.Вставить("ДокументПланирования", ДанныеОбъекта.Ссылка);
	ПредопределенныеДанные.Вставить("ПериодОтчета", 
		ВстраиваниеОПКПереопределяемый.глОтносительныйПериодПоДате(ПредопределенныеДанные.Период, ПараметрыОП.ПериодичностьОперативногоПланирования,0));
	
	РеквизитыСтроки = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	
	//
	ПредопределенныеДанные.Вставить("СтатьяБюджета", ДанныеОбъекта.СтатьяДвиженияДенежныхСредств);
	СтрокаПлана = ТаблицаПланов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПлана, ДанныеОбъекта, РеквизитыСтроки);
	ЗаполнитьЗначенияСвойств(СтрокаПлана, ПредопределенныеДанные);
	СтрокаПлана.Сумма = ДанныеОбъекта.СуммаДокумента;
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	//ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ИсточникиДляКонтроляДокумента
	
Функция ИсточникиДокумента(Объект) Экспорт
	
	Источники = Новый Соответствие;
	
	//// 1. Источник для контроля бюджетных лимитов и резервов
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХБюджетныеЛимиты, 
	//	Источник_БюджетныеЛимитыРезервы(Объект));
	//
	//// 2. Планы по взаиморасчетам с контрагентом
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоКонтрагенту, 
	//	Источник_ВзаиморасчетыПоКонтрагенту(Объект));
	//
	//// 3. Планы по взаиморасчетам по договору
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоДоговору,
	//	Источник_ВзаиморасчетыПоДоговору(Объект));
	//
	//// 4. Контроль суммы расходов по договору
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХРасходыПоДоговору,
	//	Источник_РасходыПоДоговору(Объект));
	
	Возврат Источники;
	
КонецФункции
	
Функция Источник_БюджетныеЛимитыРезервы(Объект)
	
	//
	Источник = Новый Структура;
	
	// Параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 						Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 					Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 					НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	ТаблицаПланов = ПланыДокумента(Объект);
	ТаблицаПланов.Колонки.Сумма.Имя = "Заявлено";
	ТаблицаПланов.Колонки.Добавить("Лимит",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	ТаблицаПланов.Колонки.Добавить("Зарезервировано",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	ТаблицаПланов.Колонки.Добавить("Исполнено",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	
	//
	Источник.Вставить("Параметры", ДопПараметры);
	Источник.Вставить("ПланыДокумента", ТаблицаПланов);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоКонтрагенту(Объект)
	
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	// Если незаполнен контрагент, то контроль не выполняется
	Контрагент = ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Контрагент);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	// Если роль определить не удалось, то контроль не выполняется
	РольКонтрагента = РольПоВидуОперацииУХ()[Объект.ВидОперацииУХ];
	Если РольКонтрагента = неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	//
	Результат = Новый Структура;
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Контрагент", Контрагент);
	Результат.Вставить("СуммаПлатежа", Объект.СуммаДокумента);
	Результат.Вставить("Валюта", ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента));
	Результат.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат Результат;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоДоговору(Объект)
	
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	Договор = ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Не ЗначениеЗаполнено(Договор) Тогда
		// Контроль не выполняется
		Возврат неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Организация", Объект.Организация);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
	Тогда
		Результат.Вставить("Контрагент", Объект.ОрганизацияПолучатель);
		Результат.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
		Результат.Вставить("Договор", Объект.Договор);
		Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		Результат.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		Результат.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Результат.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов ТОГДА
		Результат.Вставить("Контрагент", Объект.Контрагент);
		Результат.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Результат.Вставить("Договор", Объект.ДоговорКредитаДепозита);
		Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю ТОГДА
		Результат.Вставить("Контрагент", Объект.Контрагент);
		Результат.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Результат.Вставить("Договор", Объект.ДоговорАренды);
		Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	Иначе
		Результат.Вставить("Контрагент", Объект.Контрагент);
		Результат.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Результат.Вставить("Договор", Объект.Договор);
		Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	КонецЕсли;
	
	Результат.Вставить("СуммаПлатежа", Объект.СуммаДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция Источник_РасходыПоДоговору(Объект)
	
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	Договор = ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Не ЗначениеЗаполнено(Договор) Тогда
		Возврат неопределено; // Контроль не выполняется
	КонецЕсли;
	
	КонтрольОплаты = Истина;
	Результат = КонтрольУХРасходыПоДоговору.СтруктураИсточник(Объект.Ссылка, Объект.Организация, КонтрольОплаты);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
	Тогда
		Результат.Контрагент = Объект.ОрганизацияПолучатель;
		Результат.Договор = Договор;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом Тогда
		Результат.Контрагент = Объект.Контрагент;
		Результат.Договор = Договор;
	КонецЕсли;
	
	// Оплата
	Строка = Результат.ДанныеДляПроверки.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Результат);
	Строка.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	Строка.Валюта = Объект.Валюта;
	Строка.ЭтоОплата = КонтрольОплаты;
	Строка.Сумма = Объект.СуммаДокумента;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаВыбора" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбиратьПозицию") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = Метаданные.Обработки.РаботаСЗаявкамиНаОперации.Формы.ФормаПодбораЗаявок;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
#КонецЕсли