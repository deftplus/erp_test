#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Сторнировать" Тогда
		ЗаполнитьПоСторнируемомуДокументу(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("СторнируемыйДокумент", СторнируемыйДокумент);
	Документы.СторнированиеНачислений.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокумент(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("Сторнирование", Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокументПриКопировании(ЭтотОбъект, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьДокументОснование(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПериодДействияНачислений(Отказ);
	
	ОписаниеДокумента = Документы.СторнированиеНачислений.ОписаниеСторнируемогоДокумента(СторнируемыйДокумент);
	ПериодРегистрацииСторнируемого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СторнируемыйДокумент, ОписаниеДокумента.МесяцНачисленияИмя);
	
	Если ПериодРегистрацииСторнируемого = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИсправлениеДокументовЗарплатаКадры.ВозможноИсправлениеТекущимПериодом(СторнируемыйДокумент) Тогда
		Если ПериодРегистрацииСторнируемого > ПериодРегистрации Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Месяц сторнирования должен быть больше или равен месяцу сторнируемого документа (%1 г.)';
					|en = 'The month of reversal must be later or equal to the month of the document being reversed (%1)'"),
				Формат(ПериодРегистрацииСторнируемого, "ДФ='ММММ гггг'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПериодРегистрации",, Отказ);
		КонецЕсли;
	Иначе
		Если ПериодРегистрацииСторнируемого >= ПериодРегистрации Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Месяц сторнирования должен быть больше месяца сторнируемого документа (%1 г.)';
					|en = 'The month of reversal must be later than the month of the document being reversed (%1)'"),
				Формат(ПериодРегистрацииСторнируемого, "ДФ='ММММ гггг'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПериодРегистрации",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка корректности распределения по источникам финансирования
	ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "ДоначисленияИПерерасчеты,Сторнировано";
	
	ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
		ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
	
	// Проверка корректности распределения по территориям и условиям труда
	ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "ДоначисленияИПерерасчеты";
	
	РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
		ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("ДоначисленияИПерерасчеты", НСтр("ru = 'Доначисления и перерасчеты';
																																		|en = 'Additional accruals and recalculations'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьПоСторнируемомуДокументу(ДанныеЗаполнения)
	
	Сторнировано.Очистить();
	ДоначисленияИПерерасчеты.Очистить();
	Показатели.Очистить();
	РаспределениеРезультатовНачислений.Очистить();
	РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	СторнируемыйДокумент = ДанныеЗаполнения.Ссылка;
	
	ОписаниеДокумента = Документы.СторнированиеНачислений.ОписаниеСторнируемогоДокумента(СторнируемыйДокумент);
	ДополнитьОписаниеСторнируемогоДокумента(ОписаниеДокумента, СторнируемыйДокумент);
	
	Если ОписаниеДокумента.РеквизитНачислениеДокумента = Неопределено Тогда
		ДополнительныеПараметры = Неопределено;
	Иначе
		// Начисление будет получено из "шапки" документа.
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НачислениеДокумента", ОписаниеДокумента.РеквизитНачислениеДокумента);
		ДополнительныеПараметры.Вставить("ЗачетНормыВремени", ОписаниеДокумента.РеквизитНачислениеДокумента + ".ЗачетНормыВремени");
	КонецЕсли;
	
	ПараметрыСторнируемогоДокумента = Неопределено;
	ИсправлениеДокументовЗарплатаКадры.ЗаполнитьПараметрыИсправляемогоДокумента(
		ПараметрыСторнируемогоДокумента, СторнируемыйДокумент, ОписаниеДокумента.МесяцНачисленияИмя, ДополнительныеПараметры);
	
	Если ОписаниеДокумента.РеквизитНачислениеДокумента = Неопределено Тогда
		НачислениеДокумента = Неопределено;
	Иначе
		НачислениеДокумента = ПараметрыСторнируемогоДокумента["НачислениеДокумента"];
		НачислениеДокументаЗачетНормыВремени = ПараметрыСторнируемогоДокумента["ЗачетНормыВремени"];
	КонецЕсли;
	
	Организация = ПараметрыСторнируемогоДокумента.Организация;
	
	Если ДанныеЗаполнения.Свойство("Период") Тогда
		ПериодРегистрации = ДанныеЗаполнения.Период;
	ИначеЕсли ДанныеЗаполнения.Свойство("ДопустимоИсправлениеВТекущемПериоде") И ДанныеЗаполнения.ДопустимоИсправлениеВТекущемПериоде Тогда
		ПериодРегистрации = ДанныеЗаполнения.ПериодРегистрацииИсправленногоДокумента;
	Иначе
		ЗаполняемыеЗначения = Новый Структура("Месяц");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
		ПериодРегистрации = Макс(ЗаполняемыеЗначения.Месяц, ДобавитьМесяц(ПараметрыСторнируемогоДокумента.ПериодРегистрации, 1));
		ДоначислитьЗарплатуПриНеобходимости = Истина;
	КонецЕсли;
	
	ДоначислитьЗарплатуПриНеобходимости = ДоначислитьЗарплатуПриНеобходимости И (ПараметрыСторнируемогоДокумента.ПериодРегистрации < ПериодРегистрации);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТДокументыСторнируемыхНачислений(МенеджерВременныхТаблиц, СторнируемыйДокумент);
	Данные = ДанныеСторнируемыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, ОписаниеДокумента);
	
	ВременныйРегистраторПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	
	НачисленияЗаднимЧислом = ИсправлениеДокументовРасчетЗарплаты.ПустаяТаблицаНачисленийЗаднимЧислом();
	
	// Заполним сторнируемые начисления, по сторнируемому документу.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСуммуВычета", Данные.НачисленийСторнируемого.Колонки.Найти("СуммаВычета") <> Неопределено);
	ДополнительныеПараметры.Вставить("УчитыватьСкидкуПоВзносам", Данные.НачисленийСторнируемого.Колонки.Найти("СкидкаПоВзносам") <> Неопределено);
	ДополнительныеПараметры.Вставить("РаспределениеРезультатов", Данные.РаспределениеРезультатовСторнируемого);
	ДополнительныеПараметры.Вставить("РаспределениеПоТерриториям", Данные.РаспределениеПоТерриториямСторнируемого);
	ДополнительныеПараметры.Вставить("НачислениеДокумента", НачислениеДокумента);
	ДополнительныеПараметры.Вставить("ДокументБезДатаНачала", ОписаниеДокумента.ДокументБезДатаНачала);
	ДополнительныеПараметры.Вставить("ВременныйРегистраторПерерасчета", ВременныйРегистраторПерерасчета);
	ДополнительныеПараметры.Вставить("ОтборСтрок", Новый Структура("ИдентификаторСтроки"));
	ВыборкаНачислений = Данные.НачисленийСторнируемого.Выбрать();
	Пока ВыборкаНачислений.Следующий() Цикл
		ДополнитьСторнируемыеНачисления(ВыборкаНачислений, НачисленияЗаднимЧислом, ДополнительныеПараметры);
	КонецЦикла;
	
	// Заполним сторнируемые начисления, по документам "на основании" сторнируемого документа.
	ДополнительныеПараметры.РаспределениеРезультатов = Данные.РаспределениеРезультатовНаОсновании;
	ДополнительныеПараметры.РаспределениеПоТерриториям = Данные.РаспределениеПоТерриториямНаОсновании;
	ДополнительныеПараметры.ОтборСтрок.Вставить("Ссылка");
	ВыборкаНачислений = Данные.НачисленийДокументовНаОсновании.Выбрать();
	Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока ВыборкаНачислений.Следующий() Цикл
			ДополнитьСторнируемыеНачисления(ВыборкаНачислений, НачисленияЗаднимЧислом, ДополнительныеПараметры);
		КонецЦикла;
	КонецЦикла;
	
	Если ОписаниеДокумента.ДокументБезДатаНачала Тогда
		ЗарплатаКадрыРасширенный.СкорректироватьДатыНачисленийБезПериодаДействия(Сторнировано, ПараметрыСторнируемогоДокумента.ПериодРегистрации);
	КонецЕсли;
	
	НаборыДляВременнойЗаписи = Новый Массив();
	
	НачатьТранзакцию();
	
	Если Не ОписаниеДокумента.ДокументБезДатаНачала 
		И (ДоначислитьЗарплатуПриНеобходимости Или ПараметрыСторнируемогоДокумента.ВыполнилДоначисление)
		И Не (НачислениеДокумента <> НеОпределено И Не НачислениеДокументаЗачетНормыВремени) Тогда
		
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистраторПерерасчета);
		НаборыДляВременнойЗаписи.Добавить(НаборыЗаписей.Начисления);
		НаборыДляВременнойЗаписи.Добавить(НаборыЗаписей.ЗначенияПоказателейНачислений);		
		
		Данные = ДанныеДляВыявленияПлановыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, НачислениеДокумента, ОписаниеДокумента);
		
		ИдентификаторСтрокиДоначисления = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(
			Сторнировано, "ИдентификаторСтрокиВидаРасчета") + 1;
		
		Для Каждого ИсправляемыйПериод Из Данные.ИсправляемыеПериоды Цикл
			
			НачалоСтарогоПериода = ИсправляемыйПериод.ДатаНачала;
			
			Если ИсправляемыйПериод.ДатаНачала >= ПериодРегистрации Тогда
				ОкончаниеСтарогоПериода = ИсправляемыйПериод.ДатаОкончания;
			Иначе
				ОкончаниеСтарогоПериода = Мин(ИсправляемыйПериод.ДатаОкончания, ПериодРегистрации - 1);
			КонецЕсли;
			
			// Получим данные плановых начислений за исправляемый период.
			МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, ИсправляемыйПериод.Организация);
			МенеджерРасчета.ИсключаемыйРегистратор = Ссылка;
			МенеджерРасчета.НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Ложь;
			ПлановыеНачисления = МенеджерРасчета.НачисленияЗарплатыЗаПериод(Данные.Сотрудники, НачалоСтарогоПериода, ОкончаниеСтарогоПериода);
			
			// Добавим во временный набор плановые начисления сторнируемого периода.
			Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
				
				Если СтрокаНачисления.ДокументОснование = СторнируемыйДокумент Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаНачисленияЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияЗаднимЧислом, СтрокаНачисления);
				НоваяСтрокаНачисленияЗаднимЧислом.ВидРасчета = СтрокаНачисления.Начисление;
				НоваяСтрокаНачисленияЗаднимЧислом.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
				НоваяСтрокаНачисленияЗаднимЧислом.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
				
				НоваяСтрокаДоначислений = ДоначисленияИПерерасчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДоначислений, СтрокаНачисления);
				НоваяСтрокаДоначислений.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиДоначисления;
				Для Каждого СтрокаПоказателя Из СтрокаНачисления.Показатели Цикл
					НоваяСтрокаПоказателя = Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаПоказателя);
					НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиДоначисления;
				КонецЦикла;
				ИдентификаторСтрокиДоначисления = ИдентификаторСтрокиДоначисления + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		НаборыДляВременнойЗаписи.Добавить(РасчетЗарплатыРасширенный.НаборЗаписейНачисления(Ссылка));
	КонецЕсли;
	
	Если НаборыДляВременнойЗаписи.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Набор Из НаборыДляВременнойЗаписи Цикл
			Набор.Записать();
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ДоначислитьЗарплатуПриНеобходимости Или ПараметрыСторнируемогоДокумента.ВыполнилДоначисление Тогда
		
		ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
		
		ИсправлениеДокументовРасчетЗарплаты.ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(
			Организация, ПериодРегистрации,	НачисленияЗаднимЧислом,	ДоначисленияИПерерасчеты,
			ВременныйРегистраторПерерасчета, ДанныеПерерасчетов, Показатели);
		
		ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
		ИспользоватьРаспределениеПоТерриториям = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
		
		Если ИспользоватьСтатьиФинансирования Или ИспользоватьРаспределениеПоТерриториям Тогда
			Для Каждого Строка Из ДанныеПерерасчетов Цикл
				
				Если ИспользоватьСтатьиФинансирования Тогда
					Для Каждого СтрокаРаспределения Из Строка.РезультатРаспределения Цикл
						НоваяСтрока = РаспределениеРезультатовНачислений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
						НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиВидаРасчета;
					КонецЦикла;
				КонецЕсли;
				
				Если ИспользоватьРаспределениеПоТерриториям	Тогда
					Для Каждого СтрокаТерритории Из Строка.РаспределениеПоТерриториямУсловиямТруда Цикл
						НоваяСтрока = РаспределениеПоТерриториямУсловиямТруда.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТерритории);
						НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиВидаРасчета;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура СоздатьВТДокументыСторнируемыхНачислений(МенеджерВременныхТаблиц, СторнируемыйДокумент)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Регистратор КАК ДокументНачисления
		|ПОМЕСТИТЬ ВТДокументыСторнируемыхНачислений
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ДокументОснование = &СторнируемыйДокумент
		|	И Начисления.Регистратор <> &СторнируемыйДокумент");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СторнируемыйДокумент", СторнируемыйДокумент);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеДляВыявленияПлановыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, НачислениеДокумента, ОписаниеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", СторнируемыйДокумент);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(Начисления.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(Начисления.ДатаОкончания) КАК ДатаОкончания,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.ДатаНачала КАК ДатаНачала,
		|		ВЫБОР
		|			КОГДА Начисления.ДатаОкончания > &КонецПериодаРегистрации
		|				ТОГДА &КонецПериодаРегистрации
		|			ИНАЧЕ Начисления.ДатаОкончания
		|		КОНЕЦ КАК ДатаОкончания,
		|		Начисления.Ссылка.Организация КАК Организация,
		|		Начисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
		|		Начисления.Начисление КАК ВидРасчета
		|	ИЗ
		|		#Начисления КАК Начисления
		|	ГДЕ
		|		Начисления.Ссылка = &Ссылка
		|		И Начисления.ДатаНачала < &КонецПериодаРегистрации
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.ДатаНачала,
		|		Начисления.ДатаОкончания,
		|		Начисления.Ссылка.Организация,
		|		Начисления.Ссылка.МесяцНачисления,
		|		Начисления.Начисление
		|	ИЗ
		|		Документ.НачислениеЗарплаты.Начисления КАК Начисления
		|	ГДЕ
		|		Начисления.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|				ИЗ
		|					ВТДокументыСторнируемыхНачислений)
		|		И Начисления.ДокументОснование = &Ссылка) КАК Начисления
		|ГДЕ
		|	Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Организация,
		|	Начисления.ПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	#Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Сотрудник.ГоловнаяОрганизация
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)
		|	И Начисления.ДокументОснование = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Начисления", ОписаниеДокумента.ПолноеИмя + ".Начисления");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка.ПериодРегистрации", "Начисления.Ссылка." + ОписаниеДокумента.МесяцНачисленияИмя);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	
	Если НачислениеДокумента <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление КАК ВидРасчета", "&НачислениеДокумента КАК ВидРасчета");
		Запрос.УстановитьПараметр("НачислениеДокумента", НачислениеДокумента);
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();

	Результат = Новый Структура;
	Результат.Вставить("ИсправляемыеПериоды", Результаты[0].Выгрузить());
	Результат.Вставить("Сотрудники", Результаты[1].Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	
	Возврат Результат;
	
КонецФункции
		
Функция ДанныеСторнируемыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, ОписаниеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", СторнируемыйДокумент);
	
	Если ОписаниеДокумента.ДокументБезДатаНачала И Не ОписаниеДокумента.ДокументСТаблицейНачисления Тогда
		// Это случай, когда сторнируется документ без таблицы "Начисления" (пример - ИндивидуальныйГрафик).
		ТекстПоСторнируемому = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК Сотрудник";
	Иначе
		ТекстПоСторнируемому = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	#Начисления КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	#РаспределениеРезультатовНачислений КАК РаспределениеРезультатов
			|ГДЕ
			|	РаспределениеРезультатов.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	#РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториям
			|ГДЕ
			|	РаспределениеПоТерриториям.Ссылка = &Ссылка";
		
		ТекстПоСторнируемому = СтрЗаменить(ТекстПоСторнируемому, "#Начисления", ОписаниеДокумента.ПолноеИмя + ".Начисления");
		ТекстПоСторнируемому = СтрЗаменить(ТекстПоСторнируемому, "#РаспределениеРезультатовНачислений", ОписаниеДокумента.ПолноеИмя + ".РаспределениеРезультатовНачислений");
		ТекстПоСторнируемому = СтрЗаменить(ТекстПоСторнируемому, "#РаспределениеПоТерриториямУсловиямТруда", ОписаниеДокумента.ПолноеИмя + ".РаспределениеПоТерриториямУсловиямТруда");
	КонецЕсли;
	
	ТекстПоОснованиям = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)
		|	И НачислениеЗарплаты.ДокументОснование = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.НачислениеЗарплаты.РаспределениеРезультатовНачислений КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.НачислениеЗарплаты.РаспределениеПоТерриториямУсловиямТруда КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)";
	
	Запрос.Текст = ТекстПоСторнируемому + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстПоОснованиям;
	Результаты = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("НачисленийСторнируемого",                 Результаты[0]);
	Результат.Вставить("РаспределениеРезультатовСторнируемого",   Результаты[1].Выгрузить());
	Результат.Вставить("РаспределениеПоТерриториямСторнируемого", Результаты[2].Выгрузить());
	Результат.Вставить("НачисленийДокументовНаОсновании",         Результаты[3]);
	Результат.Вставить("РаспределениеРезультатовНаОсновании",     Результаты[4].Выгрузить());
	Результат.Вставить("РаспределениеПоТерриториямНаОсновании",   Результаты[5].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьОписаниеСторнируемогоДокумента(Описание, СторнируемыйДокумент)
	
	МетаданныеДокумента = СторнируемыйДокумент.Метаданные();
	
	ТаблицаНачисления = МетаданныеДокумента.ТабличныеЧасти.Найти("Начисления");
	
	Описание.Вставить("ДокументСТаблицейНачисления", ТаблицаНачисления <> Неопределено);
	Описание.Вставить("ДокументБезДатаНачала", Истина);
	Описание.Вставить("ДокументБезНачисление", Истина);
	Описание.Вставить("РеквизитНачислениеДокумента", Неопределено);
	
	Если Описание.ДокументСТаблицейНачисления Тогда
		Описание.ДокументБезДатаНачала = ТаблицаНачисления.Реквизиты.Найти("ДатаНачала") = Неопределено;
		Описание.ДокументБезНачисление = ТаблицаНачисления.Реквизиты.Найти("Начисление") = Неопределено;
	КонецЕсли;
	
	Если Описание.ДокументБезНачисление Тогда
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Реквизит.Тип.Типы()[0] = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
				Описание.РеквизитНачислениеДокумента = Реквизит.Имя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДополнитьСторнируемыеНачисления(ВыборкаНачислений, НачисленияЗаднимЧислом, ДополнительныеПараметры)
	
	УчитыватьСуммуВычета = ДополнительныеПараметры.УчитыватьСуммуВычета;
	УчитыватьСкидкуПоВзносам = ДополнительныеПараметры.УчитыватьСкидкуПоВзносам;
	НачислениеДокумента = ДополнительныеПараметры.НачислениеДокумента;
	ДокументБезДатаНачала = ДополнительныеПараметры.ДокументБезДатаНачала;
	ВременныйРегистраторПерерасчета = ДополнительныеПараметры.ВременныйРегистраторПерерасчета;
	ОтборСтрок = ДополнительныеПараметры.ОтборСтрок;
	
	СтрокаСторно = Сторнировано.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСторно, ВыборкаНачислений);
	СтрокаСторно.Результат = - СтрокаСторно.Результат;
	СтрокаСторно.РезультатФСС = - СтрокаСторно.РезультатФСС;
	Если УчитыватьСуммуВычета Тогда
		СтрокаСторно.СуммаВычета = - СтрокаСторно.СуммаВычета;
	КонецЕсли;
	Если УчитыватьСкидкуПоВзносам Тогда
		СтрокаСторно.СкидкаПоВзносам = - СтрокаСторно.СкидкаПоВзносам;
	КонецЕсли;
	СтрокаСторно.ОтработаноДней = - СтрокаСторно.ОтработаноДней;
	СтрокаСторно.ОтработаноЧасов = - СтрокаСторно.ОтработаноЧасов;
	СтрокаСторно.ОплаченоДней = - СтрокаСторно.ОплаченоДней;
	СтрокаСторно.ОплаченоЧасов = - СтрокаСторно.ОплаченоЧасов;
	Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
		СтрокаСторно.Начисление = НачислениеДокумента;
	КонецЕсли;
	Если Не ДокументБезДатаНачала Тогда
		СтрокаСторно.ДатаНачала = ВыборкаНачислений.ДатаНачала;
		СтрокаСторно.ДатаОкончания = ВыборкаНачислений.ДатаОкончания;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаСторно.ПериодДействия) Тогда
		СтрокаСторно.ПериодДействия = НачалоМесяца(СтрокаСторно.ДатаНачала);
	КонецЕсли;
	СтрокаСторно.Сторно = Истина;
	СтрокаСторно.ФиксРасчет = Истина;
	
	НовыйИдентификаторСтроки = Сторнировано.Количество();
	СтрокаСторно.ИдентификаторСтрокиВидаРасчета = НовыйИдентификаторСтроки;
	 
	СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, ВыборкаНачислений);
	СтрокаНачисленийЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
	СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = НовыйИдентификаторСтроки;
	СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = Неопределено;
	СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = Неопределено;
	Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
		СтрокаНачисленийЗаднимЧислом.ВидРасчета = НачислениеДокумента;
	Иначе
		СтрокаНачисленийЗаднимЧислом.ВидРасчета = ВыборкаНачислений.Начисление;
	КонецЕсли;
	Если Не ДокументБезДатаНачала Тогда
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = ВыборкаНачислений.ДатаНачала;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = ВыборкаНачислений.ДатаОкончания;
	КонецЕсли;
	СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
		
	ОтборСтрок.ИдентификаторСтроки = ВыборкаНачислений.ИдентификаторСтрокиВидаРасчета;
	Если ОтборСтрок.Свойство("Ссылка") Тогда
		ОтборСтрок.Ссылка = ВыборкаНачислений.Ссылка;
	КонецЕсли;
	
	СтрокиРаспределения = ДополнительныеПараметры.РаспределениеРезультатов.НайтиСтроки(ОтборСтрок);
	Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		НоваяСтрока = РаспределениеРезультатовНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		НоваяСтрока.Результат = - НоваяСтрока.Результат;
		НоваяСтрока.ИдентификаторСтроки = НовыйИдентификаторСтроки;
	КонецЦикла;
	
	СтрокиТерриторий = ДополнительныеПараметры.РаспределениеПоТерриториям.НайтиСтроки(ОтборСтрок);
	Для каждого СтрокаТерритории Из СтрокиТерриторий Цикл
		НоваяСтрока = РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТерритории);
		НоваяСтрока.Результат = - НоваяСтрока.Результат;
		НоваяСтрока.СуммаВычета = - НоваяСтрока.СуммаВычета;
		НоваяСтрока.СкидкаПоВзносам = - НоваяСтрока.СкидкаПоВзносам;
		НоваяСтрока.ИдентификаторСтроки = НовыйИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДокументОснование(Отказ)
	
	Если Не ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Сведения = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(СторнируемыйДокумент);
	
	Если Не Сведения.Проведен Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сторнируемый документ не проведен.';
				|en = 'Reversed document is not posted.'"),,"Объект.СторнируемыйДокумент",,Отказ);
			
	ИначеЕсли Сведения.Исправлен Или Сведения.Сторнирован И Сведения.СторнирующийДокумент <> Ссылка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Проведение запрещено.';
				|en = 'Posting is prohibited.'")
				+ Символы.ПС + Сведения.ПредставлениеСостояния,,"Объект.СторнируемыйДокумент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли
