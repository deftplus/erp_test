
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

Функция ПараметрыРасчетаСекции(ИмяСекции, ОписаниеГрафика) Экспорт
	
	Результат = ФинансоваяМатематикаКлиентСервер.СтруктураПараметровРасчетаПроцентов();
	Если ИмяСекции = "Проценты" Тогда
		
		Результат.ДатаНачала = ДатаНачалаДействия;
		Результат.ДатаОкончания = ДатаОкончанияДействия;
		Результат.ПравилоПереноса = ПереносДатСНерабочихДней;
		Результат.ИзменятьПроцентныйПериод = ИзменяетсяДлительностьПроцентногоПериодаПриПереносе;
		Результат.ПроизводственныйКалендарь = ПроизводственныеКалендари.ВыгрузитьКолонку("ПроизводственныйКалендарь");
		Результат.ПериодичностьУплаты = ПериодичностьУплатыПроцентов;
		Результат.ПериодичностьНачисленияПроцентов = ?(НачислениеПроцентовНаОтчетныеДаты, 
															ПериодичностьНачисленияПроцентов, 
															Перечисления.Периодичность.ПустаяСсылка());
		Результат.ДатаОтсчетаПроцентныхПериодов = ДатаОтсчетаПроцентныхПериодов;
		Результат.ДатаНачалаДействия = ДатаНачалаДействия;
		Результат.ДатаПервогоПогашения = ДатаОкончанияПервогоПроцентногоПериода;
		Результат.ТочкаОтсчетаСдвигаДатыУплаты = ТочкаОтсчетаСдвигаДатыУплаты;
		Результат.СдвигДатыУплаты = СдвигДатыУплатыПроцентов;
		Результат.ТипПроцентнойСтавки = Перечисления.ТипыСтавокДляРасчетаПериодическихОпераций.Фиксированная;
		Результат.ПроцентнаяСтавка = ПроцентнаяСтавка;
		Результат.РучноеУправлениеИзменениямиСтавки = Ложь;
		Результат.ВыплачиватьПроцентыПериодически = ВыплачиватьПроцентыПериодически;
		Результат.ВыплачиватьПроцентыВДатыПогашенияТела = ВыплачиватьПроцентыВДатыПогашенияТела;
		Результат.ОперацииИзмененияБазы = ФинансовыеИнструментыУХ.ТаблицаИзмененияБазыИзГрафика(ГрафикРасчетов, ОписаниеГрафика);
		Результат.ДатаПервойВыборки = ?(Результат.ОперацииИзмененияБазы.Количество(), Результат.ОперацииИзмененияБазы[0].Дата, ДатаНачалаДействия);
		
		Результат.Вставить("КапитализацияПроцентов", КапитализацияПроцентов);
		Результат.Вставить("ЕстьСтавкаДосрочногоПогашения", ПроцентнаяСтавкаДосрочногоВозврата <> 0);
		Результат.Вставить("ПроцентнаяСтавкаДосрочногоПогашения", ПроцентнаяСтавкаДосрочногоВозврата);
		
		Результат.ГраницаФактическихДанных = ГраницаФактическихДанных;
		
		// Проанализируем график в части факта.		
		Результат.ДатаПоследнегоНачисления = ФинансовыеИнструментыУХ.ДатаПоследнегоНачисленияСекцииГрафика(ГрафикРасчетов, ОписаниеГрафика["Проценты"], ГраницаФактическихДанных);		
		Результат.СуммаНакопленнойЗадолженности = ФинансовыеИнструментыУХ.ОстатокЗадолженностиСекцииГрафика(ГрафикРасчетов, ОписаниеГрафика["Проценты"], ГраницаФактическихДанных);
		
		Результат.Вставить("МетодСписанияЗадолженности", МетодСписанияЗадолженности);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьСекциюГрафика(ИмяСекции, ОписаниеГрафика, ОперацииГрафика, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	
	Если ИмяСекции = "ОсновнойДолг" Тогда
		ФинансовыеИнструментыУХ.НачальноеЗаполнениеОсновногоДолга(ЭтотОбъект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика);
	ИначеЕсли ИмяСекции = "Проценты" Тогда
		ФинансовыеИнструментыУХ.ПересчитатьСекциюГрафика(ЭтотОбъект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВычисляемыеРеквизитыПоДаннымДоговора(ДоговорОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
		ДатаНачалаДействия = ДоговорОбъект.ДатаПервогоТранша;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
		ДатаОкончанияДействия = ДоговорОбъект.ДатаПоследнегоПлатежа;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Сумма = ДоговорОбъект.СуммаТраншей;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		
	РаботаСДоговорамиКонтрагентовУХ.ПередЗаписьюВерсииСоглашения(ЭтотОбъект, Отказ, РежимЗаписи);

	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеГрафика") Тогда
		ОписаниеГрафика = Документы.ВерсияСоглашенияДепозит.ОписаниеГрафика(ВидДоговораУХ);
		ДополнительныеСвойства.Вставить("ОписаниеГрафика", ОписаниеГрафика);
	КонецЕсли;
	
	// Проверка действующих ограничений.
	СтруктураОграничений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Ограничения");
	Если Не ЗначениеЗаполнено(СтруктураОграничений) Тогда
		Если ЗначениеЗаполнено(БазовыйДоговор) Тогда
			СтруктураОграничений = Документы.ВерсияСоглашенияДепозит.ПолучитьОграниченияПоРамочномуСоглашению(БазовыйДоговор, Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОграничений) Тогда
		
		// 1. Сумма сделки
		Если Сумма < СтруктураОграничений.МинимальнаяСуммаСделки Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Размещение средств возможно в размере не менее %1 %3, текущая сумма сделки %2 %3'"), СтруктураОграничений.МинимальнаяСуммаСделки, Сумма, ВалютаВзаиморасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
		
		Если Сумма > СтруктураОграничений.МаксимальнаяСуммаСделки И СтруктураОграничений.МаксимальнаяСуммаСделки <> 0 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Размещение средств возможно в размере не более %1 %3, текущая сумма сделки %2 %3'"), СтруктураОграничений.МаксимальнаяСуммаСделки, Сумма, ВалютаВзаиморасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
		
		// 2. Срок сделки - ограничение.
		СрокСделки = Цел((ДатаОкончанияДействия - ДатаНачалаДействия)/86400 + 1);
		
		Если СрокСделки < СтруктураОграничений.МинимальныйСрок Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Размещение средств возможно на срок не менее %1, текущий срок сделки %2'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СтруктураОграничений.МинимальныйСрок, НСтр("ru = 'день,дня,дней'")),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СрокСделки, НСтр("ru = 'день,дня,дней'")));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
		
		Если СрокСделки > СтруктураОграничений.МаксимальныйСрок И СтруктураОграничений.МаксимальныйСрок <> 0 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Размещение средств возможно на срок не более %1, текущий срок сделки %2'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СтруктураОграничений.МаксимальныйСрок, НСтр("ru = 'день,дня,дней'")),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СрокСделки, НСтр("ru = 'день,дня,дней'")));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ) 
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовУХ.ПриЗаписиВерсииСоглашения(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	ВидБюджетаДоговора = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств;
	ДополнительныеСвойства.ДляПроведения.Вставить(
		"ПараметрыОперПланирования", ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(ВидБюджетаДоговора));
	ДополнительныеСвойства.ДляПроведения.Вставить("КонтролироватьПериодыПланирования", Истина);
	ДополнительныеСвойства.ДляПроведения.Вставить("КонтролироватьПериодыЛимитирования", Ложь);
	
	Документы.ВерсияСоглашенияДепозит.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ВыполнятьБюджетирование = РаботаСДоговорамиКонтрагентовУХ.ВыполнятьБюджетирование(РежимИспользованияГрафика);
	Если ВыполнятьБюджетирование Тогда
		КонтрольЛимитовУХ.ВыполнитьПроверкуНаличияПериодов(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РаботаСДоговорамиКонтрагентовУХ.ОтразитьВерсииРасчетов(ДополнительныеСвойства, Движения, Отказ);
	РаботаСДоговорамиКонтрагентовУХ.ОтразитьРасчетыСКонтрагентамиГрафики(ДополнительныеСвойства, Движения, Отказ);
	КонтрольЛимитовУХ.ОтразитьОперативныйПланПоБюджету(ДополнительныеСвойства, Движения, Отказ);
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЛимитыПоБюджетам") Тогда
		КонтрольЛимитовУХ.ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУХ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);	
	ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

	РаботаСДоговорамиКонтрагентовУХ.ОбновитьПозицииЗаявокПоГрафику(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);	
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);	
	ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Общая логика для всех договорных документов.
	РаботаСДоговорамиКонтрагентовУХ.ОбработкаЗаполненияВерсииСоглашения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	ВидФинансовогоИнструмента = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьВидФинансовогоИнструментаПоВидуДоговора(ВидДоговораУХ);
	ЭтоРамочноеСоглашение = (ВидСоглашения = Перечисления.ВидыСоглашений.РамочныйДоговор);
	Если Не ЭтоРамочноеСоглашение 
		И Не ГрафикРасчетов.Количество() 
		И Сумма > 0 Тогда
		
		СтруктураДействий = Новый Структура;
		Секции = Новый Массив;
		Секции.Добавить("ОсновнойДолг");
		Секции.Добавить("Проценты");
		СтруктураДействий.Вставить("Пересчитать", Новый Структура("СекцииГрафика", Секции));
		
		ОписаниеГрафика = Документы.ВерсияСоглашенияДепозит.ОписаниеГрафика(ВидДоговораУХ);
		ОперацииГрафика = РаботаСДоговорамиКонтрагентовУХ.ОперацииГрафика(ОписаниеГрафика, ЭтотОбъект);
		ФинансовыеИнструментыУХ.ПересчетГрафика(ЭтотОбъект, 0, ОписаниеГрафика, ОперацииГрафика, СтруктураДействий);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	РаботаСДоговорамиКонтрагентовУХ.ПриКопированииВерсииСоглашения(ЭтотОбъект, ОбъектКопирования);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	РаботаСДоговорамиКонтрагентовУХ.ОбработкаПроверкиЗаполненияВерсииСоглашения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ЕстьДосрочныеВозвраты = Ложь;
	ЕстьЧастичныеВозвраты = Ложь;
	ЕстьПополнения = Ложь;
	
	КоличествоПополнений = 0;
		
	Для Каждого ТекСтрока Из ГрафикРасчетов Цикл 
		
		Если ТекСтрока.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг 
			И ТекСтрока.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
			
			Если ТекСтрока.Дата < ДатаОкончанияДействия Тогда
				ЕстьДосрочныеВозвраты = Истина;
			КонецЕсли;
			
			Если ТекСтрока.Сумма <> Сумма Тогда
				ЕстьЧастичныеВозвраты = Истина;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг 
			И ТекСтрока.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			
			КоличествоПополнений = КоличествоПополнений + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Пополняемый И КоличествоПополнений > 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещены операции пополнения данного депозита'"),,,,Отказ);
	КонецЕсли;
	
	Если НЕ ВозможностьДосрочногоВозврата И ЕстьДосрочныеВозвраты Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещен досрочный возврат депозита'"),,,,Отказ);
	КонецЕсли;
	
	Если НЕ ВозможностьЧастичногоДосрочногоВозврата И ЕстьЧастичныеВозвраты Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещен частичный досрочный возврат депозита'"),,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры


#КонецОбласти

#КонецЕсли
