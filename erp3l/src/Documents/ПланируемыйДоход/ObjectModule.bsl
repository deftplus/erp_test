#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем СоответствиеКурсовВалют Экспорт;
Перем ВалютаУправленческогоУчета Экспорт;

#Область ПрограммныйИнтерфейс

Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета) Экспорт
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета,,"Ссылка");
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаявкиНаОперации.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	ДанныеЗаказаПоставщика = Неопределено;
	ОчиститьДокОснованиеПослеЗаполнения = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ОперативныйПлан") Тогда
		
		ДокументПланирования = ДанныеЗаполнения;
		
		ПриУточненииРезерваПереноситьПланыНаНовыйЛокумент = Истина;
		
		//
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПланирования, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов Тогда
			ОчиститьДокОснованиеПослеЗаполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеОбязательства.Тип.СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда
		
		ОснованиеОбязательства = ДанныеЗаполнения;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(ОбъектРасчетов) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорКонтрагента = ОбъектРасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПланирования) Тогда
		ЗаполнитьПоДокументуПланирования(ДокументПланирования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеОбязательства) Тогда
		ЗаявкиНаОперации.ЗаполнитьПоПервичномуДокументу(ЭтотОбъект, ОснованиеОбязательства, ДополнительныеСвойства);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЗаполнитьПоДоговоруКонтрагента(ДоговорКонтрагента);
	КонецЕсли;
	
	// Определим незаполненные реквизиты значениями по умолчанию.
	
	Если НЕ ЗначениеЗаполнено(ВидОперацииУХ) Тогда
		ВидОперацииУХ = Справочники.ВидыОперацийУХ.ДоходыОтКонтрагентов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДатаСеанса() + 24*60*60;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВстраиваниеОПКПереопределяемый.КонстантаВалютаУправленческогоУчета();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ВстраиваниеОПКПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
		ЦФО = ВстраиваниеОПКПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Проект = ВстраиваниеОПКПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Приоритет) Тогда
		Приоритет = ЗаявкиНаОперации.ПолучитьПриоритетПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	// Проверяем заполнение реквизита "ВидОперацииУХ"
	ЗаявкиНаОперации.ОбработкаЗаполненияКонтрольВидаОперации(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	// Заполним табличную часть "Движения операции".
	ДвиженияОперации.Очистить();
	Если ЗначениеЗаполнено(ОснованиеОбязательства) Тогда
		// Первичный документ содержит все необходимые сведения.
		ЗаполнитьТабличнуюЧастьПоОснованиюОбязательства();
	Иначе
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("СтатьяБюджета") Тогда
			ЗаполнитьТабличнуюЧастьПоСтруктуре(ДанныеЗаполнения)
		ИначеЕсли ЗначениеЗаполнено(ДокументПланирования) Тогда
			ЗаполнитьТабличнуюЧастьПоДокументуПланирования();
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента();
		ИначеЕсли ЗначениеЗаполнено(ВидОперацииУХ) Тогда
			// ОПК
			ЭтотОбъект.ВидОперацииУХ = ВидОперацииУХ;
			ЗаявкиНаОперации.УстановитьСтатьюБюджетаПоВидуОперацииУХ(ЭтотОбъект);
			// Конец ОПК
		КонецЕсли;
		
		Если Не ДвиженияОперации.Количество() Тогда
			ДвиженияОперации.Добавить();
		КонецЕсли;
		
		СтавкаНДСПоУмолчанию = ВстраиваниеОПКПереопределяемый.ПолучитьСтавкуНДСПоДоговору(ДоговорКонтрагента);
		Для Каждого ТекДвижение Из ДвиженияОперации Цикл
			Если Не ЗначениеЗаполнено(ТекДвижение.СтавкаНДС) Тогда
				ТекДвижение.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаДокумента <> 0 Тогда
			КоличествоСтрок = ДвиженияОперации.Количество();
			СуммаВСтроке = СуммаДокумента / КоличествоСтрок;
			СуммаВПоследнейСтроке = СуммаДокумента - СуммаВСтроке *(КоличествоСтрок - 1);
			Для Сч = 0 По (КоличествоСтрок - 2) Цикл
				ДвиженияОперации[Сч].Сумма = СуммаВСтроке;
				ОбщегоНазначенияОПККлиентСервер.ПересчитатьСуммуНДС(ДвиженияОперации[Сч]);
			КонецЦикла;
			ДвиженияОперации[КоличествоСтрок - 1].Сумма = СуммаВПоследнейСтроке;
			ОбщегоНазначенияОПККлиентСервер.ПересчитатьСуммуНДС(ДвиженияОперации[Сч]);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("БанковскийСчетКасса") И ЗначениеЗаполнено(ДополнительныеСвойства.БанковскийСчетКасса) Тогда
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
			ДанныеЗаполнения = Новый Структура;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ДополнительныеСвойства.БанковскийСчетКасса);
	КонецЕсли;
	
	Если ОчиститьДокОснованиеПослеЗаполнения Тогда
		ДокументПланирования = неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаявкиНаОперации.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	ЗаявкиНаОперации.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	ЗаявкиНаОперации.ПриЗаписи(ЭтотОбъект, Отказ);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ЗаявкиНаОперации.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ЗаявкиНаОперации.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ЗаявкиНаОперации.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуПланирования(Знач ДанныеЗаполнения)
	
	ЗаявкиНаОперации.ЗаполнитьЗаявкуПоДокументуПланирования(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоДокументуПланирования() 

Процедура ЗаполнитьПоДоговоруКонтрагента(Знач Договор)
	
	РеквизитыДоговора = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыДоговора.Вставить("Контрагент", "Контрагент");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		РеквизитыДоговора.Вставить("Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЦФО) Тогда
		РеквизитыДоговора.Вставить("ЦФО", "ОсновнойЦФО");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		РеквизитыДоговора.Вставить("Проект", "ОсновнойПроект");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		РеквизитыДоговора.Вставить("ВалютаДокумента", "ВалютаВзаиморасчетов");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		СтруктураРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, РеквизитыДоговора);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитовДоговора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоСтруктуре(Знач ДанныеЗаполнения)
	
	ПараметрыБюджета = ВстраиваниеОПККлиентСерверПереопределяемый.ПараметрыБюджета(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
	
	НоваяСтрока = ДвиженияОперации.Добавить();
	НоваяСтрока[ПараметрыБюджета.КолонкаСтатья] = ДанныеЗаполнения.СтатьяБюджета;
	
	Для Сч = 1 По 3 Цикл
		Если ДанныеЗаполнения.Свойство("Аналитика" + Сч) Тогда
			НоваяСтрока["Аналитика" + Сч] = ДанныеЗаполнения["Аналитика" + Сч];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДокументуПланирования()
	
	РасшифровкаИсходная = ДокументПланирования.ДвиженияОперации.Выгрузить();
	
	Измерения = "СтатьяБюджета";
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		Измерения = Измерения + ", Аналитика"+Сч;
	КонецЦикла;
	РасшифровкаИсходная.Свернуть(Измерения, "Сумма, Количество");
	
	РасшифровкаИсходная.ЗаполнитьЗначения(0, "Сумма,Количество");
	
	РасшифровкаИсходная.Колонки.СтатьяБюджета.Имя = "СтатьяДоходовИРасходов";
	
	ДвиженияОперации.Загрузить(РасшифровкаИсходная);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента()
	
	Если Не ДвиженияОперации.Количество() Тогда
		ДвиженияОперации.Добавить();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтатьяДоходовИРасходов", "ОсновнаяСтатьяИсполнение");
   
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		СтруктураРеквизитов.Вставить("Аналитика"+Сч, "АналитикаИсполнение"+Сч);
	КонецЦикла;

	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, СтруктураРеквизитов);
	РеквизитыДоговора.Вставить("ЭлементСтруктурыЗадолженности",
								ЗаявкиНаОперацииВызовСервера.ОсновнойЭлементСтруктурыЗадолженности(ДоговорКонтрагента, Ссылка));
	Для Каждого ТекСтрока Из ДвиженияОперации Цикл
		ЗаполнитьЗначенияСвойств(ТекСтрока, РеквизитыДоговора);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоОснованиюОбязательства()
	ТаблицаОснование = ЗаявкиНаОперацииВстраивание.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ОснованиеОбязательства);
	ДвиженияОперации.Загрузить(ТаблицаОснование);
	ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента();
КонецПроцедуры

Процедура ПроверитьВозможностьОтменыПроведения(Отказ)
	

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	Массив.Добавить(Движения.ЛимитыПоБюджетам);
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

