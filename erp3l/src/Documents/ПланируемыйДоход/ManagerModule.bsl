#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СтандартныеПодсистемыКоманды

// Добавляет команду создания объекта на основании.
// 
// Параметры:
// 	КомандыСозданияНаОсновании - ТаблицаЗначений - перечень команд
// Возвращаемое значение:
// 	Неопределено, СтрокаТаблицыЗначений - Добавленная Команда.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	Если ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		
		КомандаСоздатьНаОсновании						= КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер				= МетаданныеДокумента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление			= ОбщегоНазначения.ПредставлениеОбъекта(МетаданныеДокумента);
		КомандаСоздатьНаОсновании.РежимЗаписи			= "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
// 	КомандыСозданияНаОсновании - ТаблицаЗначений - перечень команд
// 	Параметры - Структура - параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ПланируемыйДоход.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.ОтражениеФактическихДанныхБюджетирования.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	СозданиеНаОснованииОПК.ДобавитьКоманду_НачисленияОперацийМСФО(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

Функция ПроверитьВозможностьУстановкиСостояния(ОбъектСсылка, СостояниеОбъекта, ПротоколОшибок = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектСсылка) <> Тип("ДокументСсылка.ПланируемыйДоход") Тогда
		ТекстОшибки = СтрШаблон( 
			НСтр("ru = 'Объект %1 не является заявкой на операцию.'"),
			ОбъектСсылка);
		ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьОшибкуУстановкиСтатусаОбъекта(
			ПротоколОшибок, ОбъектСсылка, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПроверкаПройдена = Истина;
	
	Если СостояниеОбъекта = Перечисления.СостоянияСогласования.Утверждена Тогда
		
		// Организация, контрагент, договор, счет контрагента, статьи ДДС, ЦФО, Период контроля
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаОперацию.Ссылка КАК Ссылка,
		|	ЗаявкаНаОперацию.Организация КАК Организация,
		|	ЗаявкаНаОперацию.Контрагент КАК Контрагент,
		|	ЗаявкаНаОперацию.ЦФО КАК ЦФО,
		|	ЗаявкаНаОперацию.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЗаявкаНаОперацию.ДвиженияОперации.(
		|		НомерСтроки КАК НомерСтроки,
		|		СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов
		|	) КАК ДвиженияОперации,
		|	ЗаявкаНаОперацию.СуммаДокумента КАК СуммаДокумента,
		|	ЗаявкаНаОперацию.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаявкаНаОперацию.ВидОперацииУХ КАК ВидОперацииУХ
		|ИЗ
		|	Документ.ПланируемыйДоход КАК ЗаявкаНаОперацию
		|ГДЕ
		|	ЗаявкаНаОперацию.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		ДанныеДокумента = Запрос.Выполнить().Выгрузить()[0];
		
		РеквизитыПроверяемыеНаЗаполнение = Новый СписокЗначений;
		РеквизитыПроверяемыеНаЗаполнение.Добавить("СуммаДокумента", НСтр("ru = 'Сумма документа'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("ВалютаДокумента", НСтр("ru = 'Валюта документа'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("ЦФО", НСтр("ru = 'ЦФО'"));
		РеквизитыПроверяемыеНаЗаполнение.Добавить("Организация", НСтр("ru = 'Организация'"));
		
		ЭтоРасчетыСКонтрагентом = ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыСКонтрагентом(ДанныеДокумента.ВидОперацииУХ);
		ЕстьРасчетыСФизическимЛицом	= ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыСФизическимЛицом(ДанныеДокумента.ВидОперацииУХ);	
		Если ЭтоРасчетыСКонтрагентом Тогда
			РеквизитыПроверяемыеНаЗаполнение.Добавить("Контрагент", НСтр("ru = 'Контрагент'"));
		ИначеЕсли ЕстьРасчетыСФизическимЛицом Тогда
			РеквизитыПроверяемыеНаЗаполнение.Добавить("Контрагент", НСтр("ru = 'Сотрудник'"));
		КонецЕсли;	
		
		Если ЭтоРасчетыСКонтрагентом 
			И НЕ ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыБезДоговора(ДанныеДокумента.ВидОперацииУХ) Тогда
			
			РеквизитыПроверяемыеНаЗаполнение.Добавить("ДоговорКонтрагента", НСтр("ru = 'Договор контрагента'"));
		КонецЕсли;
		
		Для Каждого ПроверяемыйРеквизит из РеквизитыПроверяемыеНаЗаполнение Цикл
			Если Не ЗначениеЗаполнено(ДанныеДокумента[ПроверяемыйРеквизит.Значение]) Тогда
				
				ПроверкаПройдена = Ложь;
				
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле","Заполнение",ПроверяемыйРеквизит.Представление);
				ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьОшибкуУстановкиСтатусаОбъекта(ПротоколОшибок, ОбъектСсылка, ТекстОшибки, "Объект." + ПроверяемыйРеквизит.Значение);
				
			КонецЕсли;
		КонецЦикла;
				
		Если Не ДанныеДокумента.ДвиженияОперации.Количество() Тогда
			
			ПроверкаПройдена = Ложь;
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список","Заполнение", ,,НСтр("ru = 'Аналитики учета и планирования'"));
			ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьОшибкуУстановкиСтатусаОбъекта(ПротоколОшибок, ОбъектСсылка, ТекстОшибки, "Объект.ДвиженияОперации");
			
		КонецЕсли;
		
		ПараметрыБюджета = ВстраиваниеОПККлиентСерверПереопределяемый.ПараметрыБюджета(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
		
		Для Каждого ТекСтрокаРасшифровки Из ДанныеДокумента.ДвиженияОперации Цикл
			Если Не ЗначениеЗаполнено(ТекСтрокаРасшифровки[ПараметрыБюджета.КолонкаСтатья]) Тогда
				
				ПроверкаПройдена = Ложь;
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение", 
				ПараметрыБюджета.ЗаголовокКолонкиСтатья, 
				ТекСтрокаРасшифровки.НомерСтроки,
				НСтр("ru = 'Аналитики учета и планирования'"));
				ИмяПоля = СтрШаблон("Объект.ДвиженияОперации[%1].%2", ТекСтрокаРасшифровки.НомерСтроки - 1, ПараметрыБюджета.КолонкаСтатья);
				
				ВстраиваниеОПККлиентСерверПереопределяемый.ДобавитьОшибкуУстановкиСтатусаОбъекта(ПротоколОшибок, ОбъектСсылка, ТекстОшибки, ИмяПоля);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, ИмяИсходного, ИмяРеквизита = "", ИмяИсточника = "", ИсходныеДанныеПереданы)
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ИмяРеквизита = ИмяИсходного;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяИсточника) Тогда
		ИмяИсточника = ИмяРеквизита;
	КонецЕсли;
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если ИсходныеДанныеЗаполнения.Свойство(ИмяИсходного) И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения[ИмяИсходного]) Тогда
		Если ИсходныеДанныеПереданы
			ИЛИ (НЕ РеквизитыОбъекта.Свойство(ИмяРеквизита) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыОбъекта[ИмяРеквизита]))
			И (НЕ ИсточникДанных.Свойство(ИмяИсточника) ИЛИ НЕ ЗначениеЗаполнено(ИсточникДанных[ИмяИсточника])) Тогда
			РеквизитыОбъекта.Вставить(ИмяРеквизита, ИсходныеДанныеЗаполнения[ИмяИсходного]);
			РеквизитОбъектЗаполненИсходнымиДанными = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура РеквизитыЗаявки(РеквизитыЗаявки) Экспорт
	
	ОМ = ЗаявкиНаОперации;
	
	РеквизитыЗаявки.ПриходРасход = ОМ.Новый_ЗначениеРеквизита("Перечисление.ВидыДвиженийПриходРасход.Приход");
	РеквизитыЗаявки.ВидБюджетаПВХ = ОМ.Новый_ЗначениеРеквизита("ПланВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов");
	РеквизитыЗаявки.ВидБюджета = ОМ.Новый_ЗначениеРеквизита("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов");
	РеквизитыЗаявки.БанковскийСчетКонтрагента = ОМ.Новый_Реквизит(неопределено);
	РеквизитыЗаявки.ФормаОплаты = ОМ.Новый_Реквизит(неопределено);
	РеквизитыЗаявки.ПланируемаяДатаОперации = ОМ.Новый_Реквизит("ДатаНачала");
	РеквизитыЗаявки.ОбъектРасчетов = ОМ.Новый_Реквизит("ОбъектРасчетов");
	
	// Аналитики
	ОМ.Изменить_Реквизит(РеквизитыЗаявки.СтатьяБюджета, "СтатьяДоходовИРасходов", "ДвиженияОперации");
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		ОМ.Изменить_Реквизит(РеквизитыЗаявки["Аналитика"+Сч], "Аналитика"+Сч, "ДвиженияОперации");
	КонецЦикла;

	// Регистрируем параметры размещения аналитик статей бюджетов
	ЗаявкиНаОперации.РазместитьВКолонкахТаблицы(
		РеквизитыЗаявки, "ТаблицаДвижений", 
		РеквизитыЗаявки.СтатьяБюджета, "ТаблицаДвиженийСтатьяДоходовИРасходов",
		"Аналитика%1", "Аналитика%1",
		ФормыУХ.РазместитьВГруппе("ГруппаАналитика")
	);
	
КонецПроцедуры

#Область ИсточникиДляКонтроляДокумента
	
Функция ИсточникиДокумента(Объект) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект));
	
	Возврат Источники;
	
КонецФункции
	
Функция Источник_БюджетныеЛимитыРезервы(Объект)
	
	//
	Источник = Новый Структура;
	
	// Параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 						Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 					Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 					НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	ТаблицаПланов = ПланыДокумента(Объект);
	ТаблицаПланов.Колонки.Сумма.Имя = "Заявлено";
	ТаблицаПланов.Колонки.Добавить("Лимит",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	ТаблицаПланов.Колонки.Добавить("Зарезервировано",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	ТаблицаПланов.Колонки.Добавить("Исполнено",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	
	//
	Источник.Вставить("Параметры", ДопПараметры);
	Источник.Вставить("ПланыДокумента", ТаблицаПланов);
	
	Возврат Источник;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	РеквизитыЗаявки = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(ПустаяСсылка().Метаданные().ПолноеИмя());
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПланируемыйДоход") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = ТипЗнч(ПустаяСсылка()) Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	ВидБюджета = ЗаявкиНаОперации.РеквизитЗаявки(Источник, РеквизитыЗаявки.ВидБюджетаПВХ);
	Предназначение = ЗаявкиНаОперации.РеквизитЗаявки(Источник, РеквизитыЗаявки.ВидБюджета);
	Направление =ЗаявкиНаОперации.РеквизитЗаявки(Источник, РеквизитыЗаявки.ПриходРасход);
	
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение);
	
	//
	ПредопределенныеДанные = Новый Структура(
		"ВидБюджета, Предназначение, ПриходРасход, ДокументРезервирования, Период, Организация, Контрагент, ДоговорКонтрагента, ЦФО, Проект, Валюта, ПериодОтчета", 
		ВидБюджета, Предназначение, Направление, ДанныеОбъекта.ДокументПланирования,
		ДанныеОбъекта.Дата, ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДоговорКонтрагента,
		ДанныеОбъекта.ЦФО, ДанныеОбъекта.Проект, ДанныеОбъекта.ВалютаДокумента,
		ВстраиваниеОПКПереопределяемый.глОтносительныйПериодПоДате(ДанныеОбъекта.ДатаНачала, ПараметрыОП.ПериодичностьОперативногоПланирования,0)
	);
	
	//
	РеквизитыСтроки = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	Для Каждого Строка Из ДанныеОбъекта.ДвиженияОперации Цикл
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПлана = ТаблицаПланов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, ПредопределенныеДанные);
		ЗаполнитьЗначенияСвойств(СтрокаПлана, Строка, РеквизитыСтроки);
		СтрокаПлана.СтатьяБюджета  = Строка.СтатьяДоходовИРасходов;
		СтрокаПлана.Сумма = Строка.Сумма;
		
	КонецЦикла;
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланируемыйДоход.Ссылка КАК Ссылка,
	|	ПланируемыйДоход.Дата КАК Дата,
	|	ПланируемыйДоход.ВалютаДокумента КАК ВалютаДокумента,
	|	ПланируемыйДоход.ДатаНачала КАК ДатаНачала,
	|	ПланируемыйДоход.Организация КАК Организация,
	|	ПланируемыйДоход.Контрагент КАК Контрагент,
	|	ПланируемыйДоход.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПланируемыйДоход.ЦФО КАК ЦФО,
	|	ПланируемыйДоход.Проект КАК Проект,
	|	ПланируемыйДоход.ДокументПланирования КАК ДокументПланирования,
	|	ПланируемыйДоход.ДвиженияОперации.(
	|		СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС
	|	) КАК ДвиженияОперации
	|ИЗ
	|	Документ.ПланируемыйДоход КАК ПланируемыйДоход
	|ГДЕ
	|	ПланируемыйДоход.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ДвиженияОперации");
		Результат.ДвиженияОперации = Выборка.ДвиженияОперации.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

Процедура ПоляДанныхПредставления(СтруктураПолей) Экспорт
	
	//СтруктураПолей.Номер = "";
	//СтруктураПолей.Дата = "";
	СтруктураПолей.Сумма = "СуммаДокумента";
	СтруктураПолей.Валюта = "ВалютаДокумента";
	СтруктураПолей.ДатаПланируемая = "ДатаНачала";
	СтруктураПолей.ДатаНеПозднее = "КрайняяДата";
	//Источник.Контрагент = "";
	//Источник.ВидОперацииУХ = "";
	
КонецПроцедуры

Функция ЗаявкаСРасшифровкойПлатежа(Объект) Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли

