#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
	КонецЕсли;
	
	ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Формирует представление документа
//
// Параметры:
// 		Ссылка - ДокументСсылка.ГрафикИсполненияДоговора - документ, для которого формируется представление.
//
// Возвращаемое значение:
// 		ФорматированнаяСтрока - Представление графика.
//
Функция ПредставлениеГрафика(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтрок = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	График.ДатаПоГрафику КАК Дата,
	|	МАКСИМУМ(График.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаИсполненияДоговора КАК График
	|
	|ГДЕ
	|	График.Ссылка.Проведен
	|	И График.Ссылка = &Ссылка
	|	И График.СуммаОплаты <> 0
	|	
	|СГРУППИРОВАТЬ ПО
	|	График.ДатаПоГрафику
	|;
	|///////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	График.ДатаПоГрафику КАК Дата,
	|	МАКСИМУМ(График.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаИсполненияДоговора КАК График
	|
	|ГДЕ
	|	График.Ссылка.Проведен
	|	И График.Ссылка = &Ссылка
	|	И График.СуммаИсполнения <> 0
	|	
	|СГРУППИРОВАТЬ ПО
	|	График.ДатаПоГрафику
	|;
	|///////////////////////////////////////////////////
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[0].Пустой() И Результат[1].Пустой() Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Не задан';
																|en = 'Not specified'"),, WebЦвета.Кирпичный));
		
	Иначе
		
		СтрокаИсполнение = ""; СтрокаИсполнениеНеЗадано = "";
		ТипДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Договор.ТипДоговора");
		Если ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
			Или ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
			
			СтрокаИсполнение = НСтр("ru = 'Отгрузка';
									|en = 'Shipment'");
			СтрокаИсполнениеНеЗадано = НСтр("ru = 'Отгрузка не задана';
											|en = 'Shipment is not specified'");
			
		ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			Или ТипДоговора = Перечисления.ТипыДоговоров.Импорт
			Или ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
			
			СтрокаИсполнение = НСтр("ru = 'Поступление';
									|en = 'Receipt'");
			СтрокаИсполнениеНеЗадано = НСтр("ru = 'Поступление не задано';
											|en = 'Receipt is not set'");
		КонецЕсли;
		
		Выборка = Результат[0].Выбрать();
		КоличествоОплат = Выборка.Количество();
		Если КоличествоОплат = 0 Тогда
			МассивСтрок.Добавить(НСтр("ru = 'Оплата не задана';
										|en = 'Payment is not specified'"));
		ИначеЕсли КоличествоОплат = 1 Тогда
			Выборка.Следующий();
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Оплата %1';
												|en = 'Payment %1'"), Формат(Выборка.Дата, "ДЛФ=Д") ));
		Иначе
			ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
				КоличествоОплат,
				НСтр("ru = 'этапы';
					|en = 'stages'"), НСтр("ru = 'этапа';
										|en = 'stage'"), НСтр("ru = 'этапов';
															|en = 'steps'"), НСтр("ru = 'м';
																					|en = 'm'"));
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Оплата в %1';
												|en = 'Payment to %1'"), Формат(КоличествоОплат, "ЧН=0")) + " " + ТекстЭтапа);
		КонецЕсли;
		
		МассивСтрок.Добавить("; ");
		
		Выборка = Результат[1].Выбрать();
		КоличествоИсполнений = Выборка.Количество();
		Если КоличествоИсполнений = 0 Тогда
			МассивСтрок.Добавить(СтрокаИсполнениеНеЗадано);
		ИначеЕсли КоличествоИсполнений = 1 Тогда
			Выборка.Следующий();
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = '%1 %2';
												|en = '%1 %2'"), СтрокаИсполнение, Формат(Выборка.Дата, "ДЛФ=Д")));
		Иначе
			ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
				КоличествоИсполнений,
				НСтр("ru = 'этапы';
					|en = 'stages'"), НСтр("ru = 'этапа';
										|en = 'stage'"), НСтр("ru = 'этапов';
															|en = 'steps'"), НСтр("ru = 'м';
																					|en = 'm'"));
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = '%1 в %2';
												|en = '%1 in %2'"), СтрокаИсполнение, Формат(КоличествоИсполнений, "ЧН=0")) + " " + ТекстЭтапа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

// Процедура устанавливает пометку на удаление для найденного документа
//
// Параметры:
//    Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор, график которого должен быть помечен на удаление.
//    ПометкаУдаления - Булево - Признак установки пометки на удаление.
//
Процедура УстановитьПометкуУдаления(Договор, ПометкаУдаления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ГрафикИсполненияДоговора");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния выполнения договора
//
// Возвращаемое значение:
// 		Структура - Структура состояния.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками", 2);
	СтруктураСостояние.Вставить("ЭтоДоговор", Истина);
	
	Возврат СтруктураСостояние;
	
КонецФункции

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = НСтр("ru = 'График исполнения договора';
						|en = 'Contract schedule'") + " " + ДенежныеСредстваВызовСервера.НаименованиеДоговора(Данные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                     КАК Период,
	|	ДанныеДокумента.Номер                                    КАК Номер,
	|	ДанныеДокумента.Договор                                  КАК Договор,
	|	ДанныеДокумента.Договор.Организация                      КАК Организация,
	|	ДанныеДокумента.Договор.Контрагент                       КАК Контрагент,
	|	ДанныеДокумента.Договор.Партнер                          КАК Партнер,
	|	ДанныеДокумента.Договор.НаправлениеДеятельности          КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Договор.ВалютаВзаиморасчетов             КАК Валюта,
	|	ДанныеДокумента.Договор.ТипДоговора                      КАК ТипДоговора
	|ИЗ
	|	Документ.ГрафикИсполненияДоговора КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры)
	
	#Область РасчетыСКлиентами
	
	ТекстПланыОплат =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                                           КАК Ссылка,
		|	Договоры.Организация                                                     КАК Организация,
		|	Договоры.Партнер                                                         КАК Партнер,
		|	
		|	Таблица.Ссылка.ОбъектРасчетов                                            КАК ОбъектРасчетов,
		|	Таблица.Ссылка.Дата                                                      КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                                                     КАК НомерРегистратора,
		|	Договоры.ВалютаВзаиморасчетов                                            КАК ВалютаВзаиморасчетов,
		|	Договоры.ВалютаВзаиморасчетов                                            КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация,
		|	
		|	Таблица.ДатаПоГрафику                                                    КАК ДатаПлатежа,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)        КАК ВариантОплаты,
		|	Таблица.СуммаОплаты                                                      КАК КОплате,
		|		
		|	ИСТИНА                                                                   КАК ИсключатьПриКонтроле
		|	
		|ИЗ
		|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаИсполненияДоговора КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО Договоры.Ссылка = Таблица.Ссылка.Договор
		|			И Договоры.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем),
		|									ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем))
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)";
	
	ТекстПланыОтгрузок =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                                           КАК Ссылка,
		|	Договоры.Организация                                                     КАК Организация,
		|	Договоры.Партнер                                                         КАК Партнер,
		|	
		|	Таблица.Ссылка.ОбъектРасчетов                                            КАК ОбъектРасчетов,
		|	Таблица.Ссылка.Дата                                                      КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                                                     КАК НомерРегистратора,
		|	Договоры.ВалютаВзаиморасчетов                                            КАК ВалютаВзаиморасчетов,
		|	Договоры.ВалютаВзаиморасчетов                                            КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация,
		|	
		|	КОНЕЦПЕРИОДА(Таблица.ДатаПоГрафику, ДЕНЬ)                                КАК ДатаОтгрузки,
		|	Таблица.СуммаИсполнения                                                  КАК КОтгрузке
		|	
		|ИЗ
		|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаИсполненияДоговора КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|			ПО Договоры.Ссылка = Таблица.Ссылка.Договор
		|				И Договоры.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем),
		|											ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем))
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)";
	
	ВзаиморасчетыСервер.ПроведениеГрафикаИсполненияДоговораСКлиентом(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыОтгрузок);
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	ТекстПланыОплат =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                                              КАК Ссылка,
		|	
		|	Договоры.Организация                                                        КАК Организация,
		|	Договоры.Партнер                                                            КАК Партнер,
		|	Договоры.Контрагент                                                         КАК Контрагент,
		|	Договоры.Ссылка                                                             КАК Договор,
		|	Договоры.НаправлениеДеятельности                                            КАК НаправлениеДеятельности,
		|	
		|	Таблица.Ссылка.ОбъектРасчетов                                               КАК ОбъектРасчетов,
		|	Таблица.Ссылка.Дата                                                         КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                                                        КАК НомерРегистратора,
		|	Договоры.ВалютаВзаиморасчетов                                               КАК ВалютаВзаиморасчетов,
		|	Договоры.ВалютаВзаиморасчетов                                               КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация,
		|	
		|	Таблица.ДатаПоГрафику                                                       КАК ДатаПлатежа,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)      КАК ВариантОплаты,
		|	Таблица.СуммаОплаты                                                         КАК КОплате
		|	
		|ИЗ
		|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаИсполненияДоговора КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО Договоры.Ссылка = Таблица.Ссылка.Договор
		|			И Договоры.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком),
		|										ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт),
		|										ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком))
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)";
	
	ТекстПланыПоставок = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                                              КАК Ссылка,
		|	Договоры.Организация                                                        КАК Организация,
		|	Договоры.Партнер                                                            КАК Партнер,
		|	
		|	Таблица.Ссылка.ОбъектРасчетов                                               КАК ОбъектРасчетов,
		|	Таблица.Ссылка.Дата                                                         КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                                                        КАК НомерРегистратора,
		|	Договоры.ВалютаВзаиморасчетов                                               КАК ВалютаВзаиморасчетов,
		|	Договоры.ВалютаВзаиморасчетов                                               КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация,
		|	
		|	Таблица.ДатаПоГрафику                                                       КАК ДатаПоступления,
		|	Таблица.СуммаИсполнения                                                     КАК КПоступлению
		|ИЗ
		|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаИсполненияДоговора КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО Договоры.Ссылка = Таблица.Ссылка.Договор
		|			И Договоры.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком),
		|										ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт),
		|										ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком))
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)";
	
	ВзаиморасчетыСервер.ПроведениеГрафикаИсполненияДоговораСПоставщиком(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыПоставок);
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ГрафикИсполненияДоговора.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dfc893ab-0beb-444b-b0cd-a7310c92e8ac");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ГрафикИсполненияДоговора.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Объект расчетов""';
									|en = 'Fills in ""AR/AP object"" attribute.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ГрафикИсполненияДоговора.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ГрафикИсполненияДоговора.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ГрафикИсполненияДоговора.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыУПоставщика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупТоваровХранителем.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионера.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионераОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитентуОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОператораСистемыПлатон.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетДавальцу.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТКА

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьДокумент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "Договор");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ГрафикИсполненияДоговора КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И НЕ ДанныеДокумента.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбрабатываемыеДанные.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОбрабатываемыеДанные
		|ИЗ
		|	&ОбновляемыеДанные КАК ОбрабатываемыеДанные
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ГрафикИсполненияДоговора КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ОбъектыРасчетов.Объект = ДанныеДокумента.Договор
		|				И НЕ ОбъектыРасчетов.ТолькоОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбрабатываемыеДанные КАК ОбрабатываемыеДанные
		|			ПО ДанныеДокумента.Ссылка = ОбрабатываемыеДанные.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокумент = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Ссылка = ВыборкаДокумент.Ссылка;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Ссылка,
				ВыборкаДокумент.ВерсияДанных,
				Параметры.Очередь);
				
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДокумент.ОбъектРасчетов) Тогда
				ДокументОбъект.ОбъектРасчетов = ВыборкаДокумент.ОбъектРасчетов;
			ИначеЕсли ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДокумент.Договор)
				Или ЗначениеЗаполнено(ВыборкаДокумент.Договор) И ДокументОбъект.Проведен Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найден удалось заполнить поле ""Объект расчетов"" в документе: %1';
							|en = 'Couldn''t find fill in the ""AR/AP object"" field in the document: %1'"),
							Ссылка);

					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Предупреждение,
						ДокументОбъект.Метаданные(),
						,
						ТекстСообщения);
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаДокумент.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
