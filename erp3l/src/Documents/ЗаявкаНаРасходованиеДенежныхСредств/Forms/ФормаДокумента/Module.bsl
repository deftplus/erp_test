#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПараметрыВыбораСтатейИАналитик =
		Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
		#Область УХ_Встраивание
		ИнициализироватьДоговорКонтрагента();
		#КонецОбласти
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	//++ НЕ УТ
	ПараметрыНастройки = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыНастройкиСчетовУчета(
		Объект.ХозяйственнаяОперация, Объект.ТипНалога);
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(Объект, Основание);
		
		ТекущаяДата = Объект.Дата;
		
		Если ПериодАвансовогоОтчета = НСтр("ru = 'Через неделю';
											|en = 'In a week'") Тогда
			Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.ДатаПлатежа), Объект.ДатаПлатежа, ТекущаяДата()) + 7 * 24 * 3600;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПараметрыВыбораСтатейИАналитик =
		Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПриЧтенииСозданииНаСервере();
	
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтаФорма);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	//++ НЕ УТ
	//Настройка счетов учета
	ПараметрыНастройки = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыНастройкиСчетовУчета(
		Объект.ХозяйственнаяОперация, Объект.ТипНалога);
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте" Тогда
		ЗаполнитьДанныеОбОплатеЗаявки();
	КонецЕсли;
	
	#Область УХ_Встраивание
	СобытияОбновленияПП = "Запись_РасходныйКассовыйОрдер,Запись_СписаниеБезналичныхДенежныхСредств";
	Если ЗаявкиНаОперацииКлиент.ТребуетсяОбработкаСобытия(ИмяСобытия, СобытияОбновленияПП) Тогда
		ВыполнитьОбработкуСобытийЗаявки(ИмяСобытия, Параметр, СобытияОбновленияПП);
	КонецЕсли;
	#КонецОбласти 
	
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПереключательРасшифровки Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
	ПроверитьНераспределенныйПлатеж(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНераспределенныйПлатеж(Отказ)
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") <> Неопределено Тогда
		
		ЕстьСтрокиСОбъектамиРасчетов = Ложь;
		ЕстьСтрокиБезОбъектовРасчетов = Ложь;
		
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
				ЕстьСтрокиСОбъектамиРасчетов = Истина;
			Иначе
				ЕстьСтрокиБезОбъектовРасчетов = Истина;
			КонецЕсли;
			Если ЕстьСтрокиСОбъектамиРасчетов И ЕстьСтрокиБезОбъектовРасчетов Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьСтрокиСОбъектамиРасчетов И ЕстьСтрокиБезОбъектовРасчетов Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Объекты расчетов должны быть указаны во всех строках расшифровки платежа, либо ни в одной из них.';
					|en = 'AR/AP objects must be specified in all or no payment details lines.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты")
		И Не ИспользоватьНачислениеЗарплатыУТ
		И Объект.ХозяйственнаяОперацияПоЗарплате = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику")
			И Объект.СписокФизЛиц Тогда
		ТабличнаяЧасть = "ЛицевыеСчетаСотрудников";
	Иначе
		ТабличнаяЧасть = "РасшифровкаПлатежа";
	КонецЕсли;
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
		
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
			ЭтаФорма,
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТабличнаяЧасть);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВзаиморасчетыСервер.ФормаПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	//++ НЕ УТ
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//-- НЕ УТ
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	//++ НЕ УТ
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	//-- НЕ УТ
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект.ДополнительныеСвойства);
	
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	ЗаполнитьКурсКратностьТекстом();
	
	ЗаполнитьДанныеОбОплатеЗаявки();
	ЗаполнитьНалогообложениеНДС();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НастроитьЗависимыеЭлементыФормы("Модифицированность");
	
	// Используется для автоматического обновления формы платежного календаря
	Оповестить("Запись_ЗаявкаНаРасходованиеДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#Область УХ_Встраивание
	ЗаявкиНаОперацииКлиент.ПослеЗаписи(ПараметрыЗаписи);
	#КонецОбласти 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДатаПлатежа < Объект.Дата Тогда
		Объект.ДатаПлатежа = Объект.Дата;
	КонецЕсли;
	
	ТекущаяДата = Объект.Дата;
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьКурсВзаиморасчетов();
	РассчитатьСуммыВзаиморасчетов();
	ЗаполнитьКурсКратностьТекстом();
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелательнаяДатаПлатежаПриИзменении(Элемент)
	
	Объект.ДатаАвансовогоОтчета =
		ДенежныеСредстваКлиент.ПересчитатьДатуАвансовогоОтчета(ПериодАвансовогоОтчета, Объект.ЖелательнаяДатаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	НуженПереходНаСервер = ХозяйственнаяОперацияПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		ХозяйственнаяОперацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ХозяйственнаяОперацияПриИзмененииКлиент()
	
	Если СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, СтрокаРасшифровки, "Объект.РасшифровкаПлатежа");
	КонецЦикла;
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	Если МассивРеквизитовОперации.Найти("Контрагент") = Неопределено Тогда
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Для каждого ТекСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекСтрокаРасшифровки.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
	Иначе
		Объект.ХозяйственнаяОперацияПоЗарплате = Неопределено;
	КонецЕсли;
	СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате;
	
	УстановитьФормыОплатыПоХозяйственнойОперации();
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	
	ПроверитьИОчиститьОрганизацию();
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	Если Не СчетСоответствуетВладельцу() Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = 
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			?(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
				Объект.ХозяйственнаяОперацияПоЗарплате, Объект.ХозяйственнаяОперация));
	
	Объект.СписокФизЛиц = Ложь;
	СписокФизЛиц = 0;
	
		//++ НЕ УТ
	ПараметрыНастройки = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыНастройкиСчетовУчета(
		Объект.ХозяйственнаяОперация, Объект.ТипНалога);
	НастройкаСчетовУчетаСервер.ПриИзмененииПараметровНастройки(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	
	ПолучитьДоговорПоУмолчаниюСервер();
	ОпределитьВалютныйПлатеж();
	УправлениеЭлементамиФормы();
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
		
	ПараметрыВыбораСтатейИАналитик =
		Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриИзмененииПараметровВыбораСтатей(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	НуженПереходНаСервер = СуммаДокументаПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		СуммаДокументаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СуммаДокументаПриИзмененииКлиент()
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента, Ложь);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ПересчитатьПараметрыКонвертации("КурсКонвертации");
	КонецЕсли;
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
	Если Объект.ОтражатьКомиссию Тогда
		Объект.СуммаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(Объект.СуммаДокумента, СтавкаКомиссии);
		Элементы.ГруппаКомиссия.Заголовок = ЗаголовокЭквайринговойКомиссии(Объект.СуммаКомиссии, Объект.Валюта, СтавкаКомиссии);
	КонецЕсли;
	
	ЗаполнитьКурсВзаиморасчетов();
	РассчитатьСуммыВзаиморасчетов();
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	НуженПереходНаСервер = ВалютаПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		ВалютаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВалютаПриИзмененииКлиент()
	
	Если ТекущаяВалюта = Объект.Валюта Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Касса = Неопределено;
	Объект.БанковскийСчет = Неопределено;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	#Область УХ_Встраивание
	Если Не Объект.ПлатежВУсловныхЕдиницах Тогда
		Объект.ВалютаОплаты = Объект.Валюта;
	КонецЕсли;
	#КонецОбласти
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
	ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ВалютаКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, Объект.Валюта);
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	ТребуетсяИнформацияДляРегулирующихОрганов = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Валюта, "Код") = "980");
	
	ТекущаяВалюта = Объект.Валюта;
	
	ОпределитьВалютныйПлатеж();
	ПроверитьСоответствиеВалют();
	ЗаполнитьРеквизитыДокументаПоФормеОплаты();
	
	Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма;
			СтрокаТЧ.ВалютаВзаиморасчетов = Объект.Валюта;
			СтрокаТЧ.КурсЧислительВзаиморасчетов = 1;
			СтрокаТЧ.КурсЗнаменательВзаиморасчетов = 1;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьКурсВзаиморасчетов();
	ЗаполнитьКурсКратностьТекстом();
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	УправлениеЭлементамиФормы();
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииЭлементаУХ(ЭтаФорма, Элементы.Валюта.Имя);
	#КонецОбласти 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	//++ НЕ УТ
	УстановитьПараметрыВыбораДоговораЛизинга();
	//-- НЕ УТ
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		ТекущаяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ФормаОплатыЗаявки) Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = Объект.Организация;
		СтруктураПараметров.ФормаОплаты = Объект.ФормаОплатыЗаявки;
		СтруктураПараметров.БанковскийСчет = Объект.БанковскийСчет;
		Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			СтруктураПараметров.Валюта = Объект.Валюта;
		КонецЕсли;
		Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		ПроверитьСоответствиеВалют();
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = Объект.Организация;
		СтруктураПараметров.ФормаОплаты = Объект.ФормаОплатыЗаявки;
		СтруктураПараметров.Касса       = Объект.Касса;
		Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			СтруктураПараметров.Валюта = Объект.Валюта;
		КонецЕсли;
		Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
		ПолучитьДоговорПоУмолчаниюСервер();
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ОбъектРасчетовДоговор = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ДоговорКонтрагента)
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетовДоговор;
				СтрокаТЧ.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТЧ.СтавкаНДС = СтавкаНДС;
				СтрокаТЧ.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				ЗаполнитьКурсИКратностьВСтрокеРасшифровки(СтрокаТЧ);
				ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
					СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
				ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
				ЗаполнитьВалютуВзаиморасчетовДокумента();
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮрФизЛицо");
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	ЗаполнитьНалогообложениеНДС();
	
	ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииОрганизации(ЭтаФорма);
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииЭлементаУХ(ЭтаФорма, "Валюта");
	#КонецОбласти
	
КонецПроцедуры


&НаКлиенте
Процедура ХозяйственнаяОперацияПоЗарплатеПриИзменении(Элемент)
	
	НуженПереходНаСервер = ХозяйственнаяОперацияПоЗарплатеПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		ХозяйственнаяОперацияПоЗарплатеПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ХозяйственнаяОперацияПоЗарплатеПриИзмененииКлиент()
	
	Если СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ХозяйственнаяОперацияПоЗарплатеПриИзмененииСервер()
	
	Если СохраненнаяХозяйственнаяОперацияПоЗарплате <> Объект.ХозяйственнаяОперацияПоЗарплате Тогда
		Объект.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперацияПоЗарплате);
	КонецЕсли;
	
	СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате;
	
	УстановитьФормыОплатыПоХозяйственнойОперации();
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииХозяйственнойОперацииПоЗарплате(ЭтотОбъект);
	#КонецОбласти
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ТипыРаспределения = Новый Массив;
	Для каждого СтрокаРаспределения Из Объект.РаспределениеПоСчетам Цикл
		ТипыРаспределения.Добавить(ТипЗнч(СтрокаРаспределения.БанковскийСчетКасса));
	КонецЦикла;
	
	НесоответствиеТиповРаспределения = Ложь;
	Если ФормаОплаты = "Наличная" Тогда
		НесоответствиеТиповРаспределения =
			(ТипыРаспределения.Найти(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")) <> Неопределено);
	ИначеЕсли ФормаОплаты = "Безналичная" Тогда
		НесоответствиеТиповРаспределения =
			(ТипыРаспределения.Найти(Тип("СправочникСсылка.Кассы")) <> Неопределено);
	КонецЕсли;
	
	Если НесоответствиеТиповРаспределения Тогда
		ТекстВопроса = НСтр("ru = 'Выбранная форма оплаты отличается от указанной в распределении по счетам. Удалить некорректные строки распределения?';
							|en = 'The selected payment method differs from the one specified in allocation to accounts. Remove the incorrect allocation lines?'");
		Оповещение = Новый ОписаниеОповещения("ФормаОплатыПриИзмененииЗавершение", ЭтаФорма, Неопределено);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФормаОплатыПриИзмененииФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзмененииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Инд = Объект.РаспределениеПоСчетам.Количество() - 1;
		Пока Инд >= 0 Цикл
			Если ФормаОплаты = "Наличная"
				И ТипЗнч(Объект.РаспределениеПоСчетам[Инд].БанковскийСчетКасса) <> Тип("СправочникСсылка.Кассы") Тогда
				Объект.РаспределениеПоСчетам.Удалить(Инд);
			ИначеЕсли ФормаОплаты = "Безналичная"
				И ТипЗнч(Объект.РаспределениеПоСчетам[Инд].БанковскийСчетКасса) <> Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
				Объект.РаспределениеПоСчетам.Удалить(Инд);
			КонецЕсли;
			Инд = Инд - 1;
		КонецЦикла;
		
		ФормаОплатыПриИзмененииФрагмент();
	Иначе
		УстановитьФормуОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзмененииФрагмент()
	
	Если ФормаОплаты = "Наличная" Тогда
		Объект.ФормаОплатыНаличная = Истина;
		Объект.ФормаОплатыБезналичная = Ложь;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
		
	ИначеЕсли ФормаОплаты = "Безналичная" Тогда
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Истина;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная");
		
	ИначеЕсли ФормаОплаты = "Любая" Тогда
		Объект.ФормаОплатыНаличная = Истина;
		Объект.ФормаОплатыБезналичная = Истина;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		Объект.ФормаОплатыЗаявки = Неопределено;
		
	ИначеЕсли ФормаОплаты = "ПлатежнаяКарта" Тогда
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Ложь;
		Объект.ФормаОплатыПлатежнаяКарта = Истина;
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
		
	Иначе
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Ложь;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		
		#Область УХ_Встраивание
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка");
		#КонецОбласти
		
	КонецЕсли;
	
	Объект.СписокФизЛиц = Ложь;
	СписокФизЛиц = 0;
	
	ФормаОплатыЗаявкиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ФормаОплатыЗаявкиПриИзмененииСервер()
	
	ЗаполнитьРеквизитыДокументаПоФормеОплаты();
	
	УстановитьПараметрыВыбораБанковскогоСчета();
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.КассаПолучатель);
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ФормаОплаты, ФормаОплатыЗаявки, ФормаОплатыБезналичная, СписокФизЛиц");
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииФормыОплаты(ЭтаФорма);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	БанковскийСчетПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер()
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
		ПроверитьСоответствиеВалют();
	КонецЕсли;
	
	ОпределитьВалютныйПлатеж();
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаСписания(ЭтаФорма);
	#КонецОбласти
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ТекущийКонтрагент <> Объект.Контрагент Тогда
		
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
		ПолучитьДоговорПоУмолчаниюСервер();
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ОбъектРасчетовДоговор = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ДоговорКонтрагента)
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетовДоговор;
				СтрокаТЧ.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТЧ.СтавкаНДС = СтавкаНДС;
				СтрокаТЧ.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				ЗаполнитьКурсИКратностьВСтрокеРасшифровки(СтрокаТЧ);
				ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
					СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
				ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
				ЗаполнитьВалютуВзаиморасчетовДокумента();
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
		
		УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
		//++ НЕ УТ
		УстановитьПараметрыВыбораДоговораЛизинга();
		//-- НЕ УТ
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента =
				Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент, Объект.Валюта);
		КонецЕсли;
		ЗаполнитьНазначениеПлатежаПоСчетуПолучателя();
		
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
		//++ НЕ УТ
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораАренды(Объект, Элементы.РасшифровкаПлатежаДоговорАренды);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораАренды(Объект, Элементы.РасшифровкаБезРазбиенияДоговорАренды);
		//-- НЕ УТ
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
			Объект.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорПоУмолчанию(Объект.Организация, Объект.Контрагент);
			Если ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
				ДоговорЭквайрингаПриИзмененииНаСервере();
			КонецЕсли;
		КонецЕсли;
		
		ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Контрагент");
		
		ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
		
		ТекущийКонтрагент = Объект.Контрагент;
	КонецЕсли;
	
	Объект.ПеречислениеСотрудникуЧерезБанк = ЗначениеЗаполнено(Объект.Контрагент)
												И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
												ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
												ИЛИ (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
												И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета));
	
	ОпределитьВалютныйПлатеж();
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииКонтрагента(ЭтаФорма);
	#КонецОбласти
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЭквайрингаПриИзменении(Элемент)
	
	ДоговорЭквайрингаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорЭквайрингаПриИзмененииНаСервере()
	
	ЗначенияРеквизитов = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(Объект.ДоговорЭквайринга);
	
	Объект.СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствВозврат;
	
	Объект.ОтражатьКомиссию = (ЗначенияРеквизитов.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении
		И ЗначенияРеквизитов.ВзимаетсяКомиссияПриВозврате);
	
	Если Объект.ОтражатьКомиссию Тогда
		
		Если ЗначенияРеквизитов.ФиксированнаяСтавкаКомиссии Тогда
			СтавкаКомиссии = ЗначенияРеквизитов.СтавкаКомиссии;
			Объект.СуммаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(Объект.СуммаДокумента, СтавкаКомиссии);
		Иначе
			СтавкаКомиссии = 0;
		КонецЕсли;
		
		Объект.СтатьяРасходов          = ЗначенияРеквизитов.СтатьяРасходов;
		Объект.АналитикаРасходов       = ЗначенияРеквизитов.АналитикаРасходов;
		Объект.Подразделение           = ЗначенияРеквизитов.ПодразделениеРасходов;
		Объект.НаправлениеДеятельности = ЗначенияРеквизитов.НаправлениеДеятельности;
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(
		Объект.ХозяйственнаяОперация, Объект.ОтражатьКомиссию);
	ДоходыИРасходыСервер.ПриИзмененииПараметровВыбораСтатей(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	БанковскийСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		ЗаполнитьНазначениеПлатежаПоСчетуПолучателя();
	КонецЕсли;
	
	ОпределитьВалютныйПлатеж();
	УправлениеЭлементамиФормы();
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаКонтрагента(ЭтаФорма);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммыПриИзменении(Элемент)
	
	ПланированиеСуммыПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПланированиеСуммыПриИзмененииСервер()
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		
		Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			Если ЗначениеЗаполнено(Объект.Касса) Тогда
				Объект.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Касса, "ВалютаДенежныхСредств");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МассивВалют = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВалютаВзаиморасчетов)
				И МассивВалют.Найти(СтрокаТаблицы.ВалютаВзаиморасчетов) = Неопределено Тогда
				МассивВалют.Добавить(СтрокаТаблицы.ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;
		
		#Область УХ_Внедрение
		//Если МассивВалют.Количество() = 1 Тогда
		//	Объект.Валюта = МассивВалют[0];	
		//Иначе
		//	Объект.Валюта = Неопределено;
		//КонецЕсли;
		Если МассивВалют.Количество() >= 1 Тогда
			Объект.Валюта = МассивВалют[0];
		КонецЕсли;	
		#КонецОбласти
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		КоэффициентПересчета =
			РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ТекущаяВалюта, Объект.Валюта, Объект.Дата);
		
		ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
		СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
		Объект.СуммаДокумента = СуммаДокумента;
		
		Если ИтогСумма <> 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
				ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
				СуммаДокумента = СуммаДокумента - Сумма;
				СтрокаТаблицы.Сумма = Сумма;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСумма.Заголовок = НСтр("ru = 'Сумма (';
															|en = 'Amount ('") + Строка(Объект.Валюта) + ")";
		ТекущаяВалюта = Объект.Валюта;
		
		ЗаполнитьКурсВзаиморасчетов();
	КонецЕсли;
	
	ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
	ПроверитьСоответствиеВалют();
	ОпределитьВалютныйПлатеж();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента)
		И НЕ Объект.ПеречислениеСотрудникуЧерезБанк Тогда
		ПодотчетноеЛицоПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Объект.БанковскийСчетКонтрагента =
		Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.ПодотчетноеЛицо, Объект.Валюта);
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)

	ОрганизацияПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииОрганизацииПолучателя(ЭтаФорма);
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		Объект.БанковскийСчетПолучатель =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.ОрганизацияПолучатель, Объект.Валюта);
		#Область УХ_Встраивание
		БанковскийСчетПолучательПриИзмененииНаСервере();
		#КонецОбласти 
		
		УправлениеЭлементамиФормы();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		СтатусПриИзмененииСервер();
		ТекущийСтатус = Объект.Статус;
	КонецЕсли;
	
	Объект.ДатаАвансовогоОтчета =
		ДенежныеСредстваКлиент.ПересчитатьДатуАвансовогоОтчета(ПериодАвансовогоОтчета, Объект.ЖелательнаяДатаПлатежа);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	Если (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
		И Не ЗначениеЗаполнено(Объект.ДатаПлатежа)
		И ЗначениеЗаполнено(Объект.ЖелательнаяДатаПлатежа) Тогда
		
		Объект.ДатаПлатежа = Макс(Объект.Дата, Объект.ЖелательнаяДатаПлатежа);
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		Или ТекущийСтатус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
			И Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		Объект.КтоРешил = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьСписокСтатусов();
	НастроитьЗависимыеЭлементыФормыНаСервере("Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ВалютаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаКонвертацииПриИзмененииСервер()
	
	ПересчитатьПараметрыКонвертации("ВалютаКонвертации");
	УстановитьЗаголовокСуммыКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	
	ПересчитатьПараметрыКонвертации("КурсКонвертации");
	
КонецПроцедуры

&НаКлиенте
Процедура СверхЛимитаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКонвертацииПриИзменении(Элемент)
	
	#Область УХ_Встраивание
	//ПересчитатьПараметрыКонвертации("СуммаКонвертации");
	ПересчитатьПараметрыКонвертации("СуммаДокумента");
	#КонецОбласти 
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Отчет.ОплатаЗаявокНаРасходованиеДенежныхСредств.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРасшифровка И Не ПереключательРасшифровки И Не ТолькоПросмотр Тогда
		РасшифровкаПлатежаПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПолучательПриИзменении(Элемент)
	
	БанковскийСчетПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПолучательПриИзмененииНаСервере()
	
	ОпределитьВалютныйПлатеж();
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаКассыПолучателя(ЭтаФорма);
	#КонецОбласти
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыИнструкцийБанкуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокИнструкций = Новый Массив;
	Для каждого СтрокаИнструкции Из Объект.ИнструкцииБанку Цикл
		СписокИнструкций.Добавить(СтрокаИнструкции.Инструкция);
	КонецЦикла;
	
	ПараметрыВыбораИнструкций = Новый Структура;
	ПараметрыВыбораИнструкций.Вставить("СписокИнструкций", СписокИнструкций);
	ПараметрыВыбораИнструкций.Вставить("ТолькоПросмотр", Элемент.ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.ИнструкцииБанку.ФормаВыбора",
		ПараметрыВыбораИнструкций,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПослеВыбораИнструкцийБанку", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИнструкцийБанку(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Модифицированность = Истина;
		Объект.ИнструкцииБанку.Очистить();
		Для каждого НоваяИнструкция Из Результат Цикл
			Объект.ИнструкцииБанку.Добавить().Инструкция = НоваяИнструкция;
		КонецЦикла;
		КодыИнструкцийБанку = НадписьКодыИнструкцийБанку(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКурсаПриИзменении(Элемент)
	
	Если Объект.УсловиеСделкиКонвертации = 1 Тогда
		ПересчитатьПараметрыКонвертации("ВалютаКонвертации");
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("УсловиеСделкиКонвертации");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияДляРегулирующихОргановНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеВводаСтрокиИнформацияДляРегулирующихОрганов", ЭтотОбъект),
		Объект.ИнформацияДляРегулирующихОрганов, НСтр("ru = 'Информация для регулятора (77B):';
														|en = 'Information for controller (77V):'"),, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокиИнформацияДляРегулирующихОрганов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Объект.ИнформацияДляРегулирующихОрганов <> Результат Тогда
		Модифицированность = Истина;
		Объект.ИнформацияДляРегулирующихОрганов = Результат;
		ИнформацияДляРегулирующихОрганов = НадписьИнформацияДляРегулирующихОрганов(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФизЛицПриИзменении(Элемент)
	
	Объект.СписокФизЛиц = Булево(СписокФизЛиц);
	НастроитьЗависимыеЭлементыФормы("СписокФизЛиц");
	
	#Область УХ_Встраивание
	СписокФизЛицПриИзмененииНаСервереУХ();
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаПриИзменении(Элемент)
	
	Объект.ДатаАвансовогоОтчета =
		ДенежныеСредстваКлиент.ПересчитатьДатуАвансовогоОтчета(ПериодАвансовогоОтчета, Объект.ДатаПлатежа);
	
	НастроитьЗависимыеЭлементыФормы("ПериодАвансовогоОтчетаДата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
	
	ДенежныеСредстваКлиент.ПериодАвансовогоОтчетаОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма, Объект.ЖелательнаяДатаПлатежа, Оповещение);
	
	ПериодАвансовогоОтчетаДата = (ТипЗнч(ВыбранноеЗначение) = Тип("Дата") Или ВыбранноеЗначение = "ДоДаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	ПериодАвансовогоОтчетаДата = (ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата"));
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорКонтрагента = Объект.Договор;
		УчетнаяИнформацияПоДоговору = Справочники.ДоговорыКонтрагентов.УчетнаяИнформацияПоДоговору(ДоговорКонтрагента);
		Если ЗначениеЗаполнено(УчетнаяИнформацияПоДоговору) Тогда
			ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, УчетнаяИнформацияПоДоговору);
			
			ЗаполнитьКурсИКратностьВСтрокеРасшифровки(ТекущаяСтрока);
			ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
				ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
			ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
			ЗаполнитьВалютуВзаиморасчетовДокумента();
			
			УчетнаяИнформацияПоДоговору.Свойство("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			УчетнаяИнформацияПоДоговору.Свойство("ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДС();
	
	СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор.Вставить("ПорядокРасчетов", ДоступныеПорядкиРасчетов());
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор.Вставить("ПорядокРасчетов", ДоступныеПорядкиРасчетов());
КонецПроцедуры

&НаКлиенте
Процедура СуммаКомиссииПриИзменении(Элемент)
	
	Если Объект.СуммаДокумента <> 0 Тогда
		СтавкаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСтавкуКомиссии(Объект.СуммаДокумента, Объект.СуммаКомиссии);
	Иначе
		СтавкаКомиссии = 0;
	КонецЕсли;
	Элементы.ГруппаКомиссия.Заголовок = ЗаголовокЭквайринговойКомиссии(Объект.СуммаКомиссии, Объект.Валюта, СтавкаКомиссии);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.АналитикаРасходовПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВалютыИКурсПлатежаНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияВалютыИКурсПлатежаНажатиеЗавершение", ЭтотОбъект);
	ДенежныеСредстваКлиент.ВалютыИКурсПлатежаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВалютыИКурсПлатежаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДекорацияВалютыИКурсПлатежаНажатиеЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияВалютыИКурсПлатежаНажатиеЗавершениеНаСервере()
	
	ЗаполнитьКурсКратностьТекстом();
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСотрудникуЧерезБанкПриИзменении(Элемент)

	ПеречислениеСотрудникуЧерезБанкПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПеречислениеСотрудникуЧерезБанкПриИзмененииНаСервере()

	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	
	Если НЕ Объект.ПеречислениеСотрудникуЧерезБанк Тогда
		
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.ПодотчетноеЛицо, Объект.Валюта);
		
	Иначе
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент, Объект.Валюта);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ПеречислениеСотрудникуЧерезБанк");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	//++ Локализация
	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ Локализация
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("Объект",         Объект);
	СтруктураПараметров.Вставить("ЮрФизЛицо",      ЮрФизЛицо);
	
	ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.Форма.РеквизитыПлательщика", СтруктураПараметров, ЭтотОбъект);
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПлатежаПриИзменении(Элемент)
	
	//++ Локализация
	Если Объект.ПеречислениеВБюджет Тогда
		ОчиститьСообщения();
		ПроверитьРеквизитыБюджетаНаСервере();
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПо275ФЗПриИзменении(Элемент)
	
	//++ Локализация
	//++ НЕ УТ
	ПлатежиПо275ФЗПриИзмененииНаСервере();
	//-- НЕ УТ
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПлатежаФЗ275ПриИзменении(Элемент)
	
	//++ Локализация
	//++ НЕ УТ
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть            = Объект.ПодтверждающиеДокументы;
	ПараметрыПроверки.ЗаголовокТабличнойЧасти   = НСтр("ru = 'Подтверждающие документы';
														|en = 'Justification documents'");
	ПараметрыПроверки.ПроверятьРаспроведенность = Ложь;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодтверждающиеДокументыЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
	ТипПлатежаФЗ275ПриИзмененииНаСервере();
	//-- НЕ УТ
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПоВедомостямПриИзменении(Элемент)
	
	//++ Локализация
	//++ НЕ УТ
	Если Не Объект.НДФЛПоВедомостям Тогда
		ОчиститьВедомостиВРасшифровкеПлатежа(Объект);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	//-- НЕ УТ
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНалогаПриИзменении(Элемент)
	
	//++ Локализация
	ТипНалогаПриИзмененииНаСервере();
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежаВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ Локализация
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТолькоПросмотр);
	ПараметрыФормы.Вставить("ВидПеречисленияВБюджет", Объект.ВидПеречисленияВБюджет);
	ПараметрыФормы.Вставить("КодБК",                  Объект.КодБК);
	ПараметрыФормы.Вставить("КодОКАТО",               Объект.КодОКАТО);
	ПараметрыФормы.Вставить("ПоказательДаты",         Объект.ПоказательДаты);
	ПараметрыФормы.Вставить("ПоказательНомера",       Объект.ПоказательНомера);
	ПараметрыФормы.Вставить("ПоказательОснования",    Объект.ПоказательОснования);
	ПараметрыФормы.Вставить("ПоказательПериода",      Объект.ПоказательПериода);
	ПараметрыФормы.Вставить("ПоказательТипа",         Объект.ПоказательТипа);
	ПараметрыФормы.Вставить("СтатусСоставителя",      Объект.СтатусСоставителя);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация",  Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("ПрименениеПриказа107н",  ПрименениеПриказа107н);
	ПараметрыФормы.Вставить("ПрименениеПриказа126н",  ПрименениеПриказа126н);
	ПараметрыФормы.Вставить("ТекущаяДата",            ТекущаяДата);
	
	Оповещение = Новый ОписаниеОповещения("НадписьРеквизитыПлатежаВБюджетНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.РеквизитыПлатежаВБюджет",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	//++ Локализация
	ПеречислениеВБюджетПриИзмененииСервер();
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			РасшифровкаПлатежаПриНачалеРедактирования(Элементы.РасшифровкаПлатежа, Истина, Ложь);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!';
									|en = 'Cannot switch to no-split mode if multiple lines are entered into the payment details.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Поле.Имя = "РасшифровкаПлатежаПредставлениеОтраженияВРеглУчете" Тогда
		НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект, Партнер, ДоговорКонтрагента, СтрокаТаблицы, НоваяСтрока, Копирование);
		
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, СтрокаТаблицы, "Объект.РасшифровкаПлатежа");
		КонецЕсли;
		ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
			СтрокаТаблицы, Объект.Валюта, ВалютаРеглУчета);
		ОбновитьСтавкуНДСИПересчитатьСуммуНДС(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЕсли;
	
	РасшифровкаПлатежаСуммаПриИзмененииНаСервере();
	
	//++ НЕ УТ
	//Настройка счетов учета 
	Если НоваяСтрока И Копирование Тогда
		НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РасшифровкаПлатежаПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаПриОкончанииРедактированияНаСервере()
	
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОбъектРасчетовПриИзменении(Элемент)
	
	РасшифровкаБезРазбиенияОбъектРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаБезРазбиенияОбъектРасчетовПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеНДС();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	ВзаиморасчетыСервер.ЗаблокироватьОбъектыРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбъектРасчетов = ТекущиеДанные.ОбъектРасчетов;
	КонецЕсли;
	
	ВзаиморасчетыКлиент.ОбъектРасчетовНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка,, ОбъектРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		РасшифровкаПлатежаОбъектРасчетовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаОбъектРасчетовОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	ДополнитьВыбранноеЗначение(ВыбранноеЗначение);
	
	#Область УХ_Встраивание
	//ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
	СвойстваИсключения = "";
	Если ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
		СвойстваИсключения = "СтатьяДвиженияДенежныхСредств";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение,,СвойстваИсключения);
	#КонецОбласти
	
	
	Модифицированность = Истина;
	ВзаиморасчетыСервер.ЗаблокироватьОбъектыРасчетов(ЭтаФорма);
	
	//++ Локализация
	//++ НЕ УТ
	Если ПоддержкаПлатежей275ФЗ И ВыбранноеЗначение.ПлатежиПо275ФЗ Тогда
		ЗаполнитьПоДоговору(ВыбранноеЗначение.Договор);
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
	ОбновитьНДССтрокиНаСервере(СтрокаТаблицы.ПолучитьИдентификатор());
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
	ЗаполнитьКурсИКратностьВСтрокеРасшифровки(СтрокаТаблицы);
	ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
		СтрокаТаблицы, Объект.Валюта, ВалютаРеглУчета);
	ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.Валюта, ВалютаРеглУчета);
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьВыбранноеЗначение(ВыбранноеЗначение)
	
	ВыбранноеЗначение.Вставить("СтатьяДвиженияДенежныхСредств",
		ДенежныеСредстваСервер.СтатьяДвиженияДенежныхСредствОбъектаРасчетов(ВыбранноеЗначение.ОбъектРасчетов, Объект.ХозяйственнаяОперация));
	
	//++ Локализация
	Если ЗначениеЗаполнено(ВыбранноеЗначение.Договор) Тогда
		ПлатежиПо275ФЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.Договор, "ПлатежиПо275ФЗ");
	Иначе
		ПлатежиПо275ФЗ = Ложь;
	КонецЕсли;
	ВыбранноеЗначение.Вставить("ПлатежиПо275ФЗ", ПлатежиПо275ФЗ);
	//-- Локализация
	
	ОбъектыРасчетов = Новый Массив;
	ОбъектыРасчетов.Добавить(ВыбранноеЗначение.ОбъектРасчетов);
	
	ТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Объект.Организация, Неопределено, Неопределено, ОбъектыРасчетов, ВыбранноеЗначение.ЭтоРасчетыСКлиентами);
	Если ТаблицаНДС.Количество() = 1 Тогда
		ВыбранноеЗначение.Вставить("СтавкаНДС", ТаблицаНДС[0].СтавкаНДС);
		Если ВыбранноеЗначение.СуммаПлатежа = ВыбранноеЗначение.СуммаЗаказа Тогда
			ВыбранноеЗначение.Вставить("СуммаНДС", ТаблицаНДС[0].СуммаНДС);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ВалютаВзаиморасчетов) Тогда
		КурсВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВыбранноеЗначение.ВалютаВзаиморасчетов, Неопределено, ВалютаРеглУчета);
		ВыбранноеЗначение.Вставить("КурсЧислительВзаиморасчетов", КурсВалюты.КурсЧислитель);
		ВыбранноеЗначение.Вставить("КурсЗнаменательВзаиморасчетов", КурсВалюты.КурсЗнаменатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
		СтрокаТаблицы, Объект.Валюта, ВалютаРеглУчета);
	#Область УХ_Встраивание
	СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	#КонецОбласти 
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	РасшифровкаПлатежаСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСуммаПриИзмененииНаСервере()
	
	Элементы.ДекорацияВалютыИКурсПлатежа.Заголовок = ДенежныеСредстваСервер.НадписьВалютыИКурсПлатежа(ЭтаФорма);
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзаиморасчетов)
		И СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта
		И СтрокаТаблицы.СуммаВзаиморасчетов <> СтрокаТаблицы.Сумма Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	Иначе
		РасшифровкаПлатежаСуммаВзаиморасчетовПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзмененииНаСервере()
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	ДенежныеСредстваКлиентСервер.РассчитатьКурсЧислительВзаиморасчетовВСтрокеРасшифровки(
		ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РасшифровкаПлатежаВалютаВзаиморасчетовПриИзмененииНаСервере();
	#Область УХ_Встраивание
	СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	#КонецОбласти 
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзмененииНаСервере()
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	ЗаполнитьКурсИКратностьВСтрокеРасшифровки(ТекущаяСтрока);
	ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
		ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсЧислительВзаиморасчетовПриИзменении(Элемент)
	
	РасшифровкаПлатежаКурсЧислительВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаКурсЧислительВзаиморасчетовПриИзмененииНаСервере()
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
		ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсИКратностьВСтрокеРасшифровки(СтрокаТЧ)
	
	КурсИКратность = ДенежныеСредстваСервер.КурсЧислительИКурсЗнаменательВзаиморасчетов(
		Объект.Валюта, СтрокаТЧ.ВалютаВзаиморасчетов, ВалютаРеглУчета, Объект.Дата);
	СтрокаТЧ.КурсЧислительВзаиморасчетов = КурсИКратность.КурсЧислитель;
	СтрокаТЧ.КурсЗнаменательВзаиморасчетов = КурсИКратность.КурсЗнаменатель;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер()
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.ДоговорКредитаДепозита,
		"ВалютаВзаиморасчетов, ХарактерДоговора, СтатьяДДСОсновногоДолга, СтатьяДДСПоступленияВыдачи");
	
	ТекущаяСтрока.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Если РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДДСОсновногоДолга;
	Иначе
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДДСПоступленияВыдачи;
	КонецЕсли;
	
	ЗаполнитьКурсИКратностьВСтрокеРасшифровки(ТекущаяСтрока);
	ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
		ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаТипСуммыКредитаДепозитаПриИзменении(Элемент)
	
	ТипСуммыКредитаДепозитаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТипСуммыКредитаДепозитаПриИзмененииСервер()
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	СтатьиДДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТекущаяСтрока.ДоговорКредитаДепозита, "СтатьяДДСОсновногоДолга, СтатьяДДСПроцентов, СтатьяДДСКомиссии");
		
	Если ТекущаяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг Тогда
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСОсновногоДолга;
	ИначеЕсли ТекущаяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты Тогда
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСПроцентов;
	ИначеЕсли ТекущаяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия Тогда
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСКомиссии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзменении(Элемент)
	
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(ИмяЭлемента)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы[ИмяЭлемента]);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.АналитикаРасходовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаАктивовПассивовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.АналитикаАктивовПассивовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеквизитыОбъектаРасчетовНажатие(Элемент)
	
	ЗаблокироватьДанные();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ГиперссылкаРеквизитыОбъектаРасчетовНажатиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		ПараметрыФормы.Вставить("Контрагент",            Объект.ОрганизацияПолучатель);
	Иначе
		ПараметрыФормы.Вставить("Контрагент",            Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ГруппаФинансовогоУчета",    Объект.ГруппаФинансовогоУчета);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",   Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("Договор",                   Объект.Договор);
	ПараметрыФормы.Вставить("Организация",               Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",             Объект.Подразделение);
	ПараметрыФормы.Вставить("НалогообложениеНДС",        Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("СписокНалогообложенияНДС",  Элементы.РасшифровкаБезРазбиенияНалогообложениеНДС.СписокВыбора);
	ПараметрыФормы.Вставить("ДокументСсылка",            Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьРасшифровкуВоВременноеХранилище());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораРеквизитовОбъектаРасчетовПлатежа", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеквизитыОбъектаРасчетовНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РазблокироватьДанные();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате") Тогда
		
		Объект.ГруппаФинансовогоУчета  = Результат.ГруппаФинансовогоУчета;
		Объект.НаправлениеДеятельности = Результат.НаправлениеДеятельности;
		Объект.Договор                 = Результат.Договор;
		Объект.Подразделение           = Результат.Подразделение;
		ЕстьИзменениеПоНалогообложениюНДС = ?(Объект.НалогообложениеНДС = Результат.НалогообложениеНДС, Ложь, Истина);
		
		Если ЕстьИзменениеПоНалогообложениюНДС Тогда
			Объект.НалогообложениеНДС = Результат.НалогообложениеНДС;
			ЗаполнитьНалогообложениеНДС();
		КонецЕсли;
		
		Модифицированность = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	#Область УХ_Встраивание
	// Закоментирован текст ERP: отборов по валюте в списке договоров быть не должно
	//Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
	//	СтруктураОтбора.Вставить("ВалютаВзаиморасчетов", Элементы.РасшифровкаПлатежа.ТекущиеДанные.ВалютаВзаиморасчетов);
	//КонецЕсли;
	#КонецОбласти
	
	СтруктураПараметровВыбора = Новый Структура;
	СтруктураПараметровВыбора.Вставить("РежимВыбора", Истина);
	
	СписокПорядков = Новый СписокЗначений;
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"));
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту")
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
	КонецЕсли;
	
	СтруктураПараметровВыбора.Вставить("ДоступныеПорядкиРасчетов", СписокПорядков);
	
	#Область УХ_Встраивание
	СтруктураПараметровВыбора.Удалить("ДоступныеПорядкиРасчетов");
	#КонецОбласти 
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию") 
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		
		#Область УХ_Встраивание_ИсправлениеОшибкиERP
		//СтруктураОтбора.Организация= Объект.ОрганизацияПолучатель;
		//СтруктураОтбора.Вставить("ОрганизацияПолучатель", Объект.Организация);
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию") Тогда
			СтруктураОтбора.Организация = Объект.ОрганизацияПолучатель;
			СтруктураОтбора.Вставить("ОрганизацияПолучатель", Объект.Организация);
		Иначе
			СтруктураОтбора.Вставить("ОрганизацияПолучатель", Объект.ОрганизацияПолучатель);
		КонецЕсли;
		#КонецОбласти
		
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
		ОткрытьФорму("Справочник.ДоговорыМеждуОрганизациями.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Элемент,
			Элемент,)
	Иначе
		#Область УХ_Встраивание
		Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
			Если Параметр.Имя = "Отбор.ВидДоговораУХ" Тогда
				СтруктураОтбора.Вставить("ВидДоговораУХ", Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
		#КонецОбласти
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Элемент,
			Элемент,)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	РасшифровкаПлатежаПослеУдаленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаПослеУдаленияСервер()
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	ВзаиморасчетыСервер.ЗаблокироватьОбъектыРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОбъектРасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РасшифровкаПлатежаОбъектРасчетовПриИзмененииСервер(СтрокаТаблицы.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаОбъектРасчетовПриИзмененииСервер(ИдСтроки)
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	ОбновитьСтавкуНДСИПересчитатьСуммуНДС(ИдСтроки);
	ВзаиморасчетыСервер.ЗаблокироватьОбъектыРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьНалогообложениеНДС();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорАрендыПриИзменении(Элемент)
	
	//++ НЕ УТ
	РасшифровкаПлатежаДоговорАрендыПриИзмененииСервер();
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура РасшифровкаПлатежаДоговорАрендыПриИзмененииСервер()
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДоговорыАренды.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	УсловияДоговоровАренды.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды.СрезПоследних(, Договор = &ДоговорАренды) КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.Договор = &ДоговорАренды
	|ГДЕ
	|	ДоговорыАренды.Ссылка = &ДоговорАренды";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДоговорАренды", ТекущаяСтрока.ДоговорАренды);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
	КонецЕсли;
	
	ТекущаяСтрока.ТипПлатежаПоАренде = Перечисления.ТипыПлатежейПоАренде.УслугаПоАренде;
	
	Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
		Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Договор", ТекущаяСтрока.ДоговорАренды);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Платеж", Истина);
	
	Элементы.РасшифровкаПлатежаТипПлатежаПоАренде.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
		Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Договор", ТекущаяСтрока.ДоговорАренды);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.РасшифровкаПлатежаТипПлатежаПоАренде, "Платеж", Истина);
	
	ЗаполнитьКурсИКратностьВСтрокеРасшифровки(ТекущаяСтрока);
	ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
		ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(ТекущаяСтрока, Объект.Валюта, ВалютаРеглУчета);
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура РасшифровкаТипПлатежаПоАрендеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТ
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ПараметрыВыбораТипаПлатежа = Новый Массив;
	ПараметрыВыбораТипаПлатежа.Добавить(Новый ПараметрВыбора("Отбор.Договор", ТекущиеДанные.ДоговорАренды));
	ПараметрыВыбораТипаПлатежа.Добавить(Новый ПараметрВыбора("Отбор.Платеж", Истина));
	Элементы.РасшифровкаПлатежаТипПлатежаПоАренде.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораТипаПлатежа);
	Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораТипаПлатежа);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ Локализация
	//++ НЕ УТ
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Источник", Объект.Ссылка);
	СтруктураПараметров.Вставить("ИсключатьОплаченные", Истина);
	СтруктураПараметров.Вставить("КодВидаДохода", Объект.КодВидаДохода);
	СтруктураПараметров.Вставить("ДатаПлатежа", Объект.ЖелательнаяДатаПлатежа);
	СтруктураПараметров.Вставить("ТипНалога", Объект.ТипНалога);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты") Тогда
		СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперацияПоЗарплате);
	Иначе
		СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	ОтборВедомостей = Новый Структура;
	ОтборВедомостей.Вставить("Организация", Объект.Организация);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет") Тогда
		ОтборВедомостей.Вставить("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
		ОтборВедомостей.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ОтборВедомостей.Вставить("ТипНалога", Объект.ТипНалога);
	ИначеЕсли Объект.ХозяйственнаяОперацияПоЗарплате = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу") Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком"));
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу"));
		ОтборВедомостей.Вставить("МассивОпераций", МассивОпераций);
	Иначе
		ОтборВедомостей.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперацияПоЗарплате);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОтборВедомостей", ОтборВедомостей);
	
	ОткрытьФорму("ОбщаяФорма.ВедомостиНаВыплатуЗарплаты", СтруктураПараметров, ЭтаФорма);
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ Локализация
	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждающиеДокументыФайлНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПунктыМеню = Новый СписокЗначений;
	ПунктыМеню.Добавить("ВыборИзПрисоединенныхФайлов",
		НСтр("ru = 'Выбрать из присоединенных файлов ...';
			|en = 'Select from attached files ...'"),, БиблиотекаКартинок.ВыбратьЗначение);
	ПунктыМеню.Добавить("ДобавлениеФайлаСДиска",
		НСтр("ru = 'Добавить файл с диска ...';
			|en = 'Add file from disk ...'"),, БиблиотекаКартинок.ОткрытьФайл);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, ПунктыМеню, Элементы.ПодтверждающиеДокументыФайл);
	//-- НЕ УТ
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОбъектРасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(
			ДанныеВыбора, Объект.Организация, Объект.Контрагент, Объект.ХозяйственнаяОперация, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОбъектРасчетовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(
			ДанныеВыбора, Объект.Организация, Объект.Контрагент, Объект.ХозяйственнаяОперация, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОбъектРасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(
			ДанныеВыбора, Объект.Организация, Объект.Контрагент, Объект.ХозяйственнаяОперация, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОбъектРасчетовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(
			ДанныеВыбора, Объект.Организация, Объект.Контрагент, Объект.ХозяйственнаяОперация, Текст);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВедомостиНаВыплатуЗарплаты

&НаКлиенте
Процедура ЛицевыеСчетаСотрудниковФизическоеЛицоПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧЛицевыеСчета = Элементы.ЛицевыеСчетаСотрудников.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧЛицевыеСчета.ЛицевойСчет) Тогда
		ТекущаяСтрокаТЧЛицевыеСчета.ЛицевойСчет =
			ПолучитьЛицевойСчетФЛ(ТекущаяСтрокаТЧЛицевыеСчета.ФизическоеЛицо, Объект.Валюта);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЛицевойСчетФЛ(ФизЛицо, Валюта)
	
	Возврат Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ФизЛицо, Валюта);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеПоСчетам

&НаКлиенте
Процедура РаспределениеПоСчетамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.РаспределениеПоСчетам.Количество() = 1 Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Сумма = Объект.СуммаДокумента;
		ТекущиеДанные.ДатаПлатежа = Объект.ДатаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоСчетамБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	
	Если Объект.ФормаОплатыБезналичная Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	КонецЕсли;
	Если Объект.ФормаОплатыНаличная Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Кассы"));
	КонецЕсли;
	
	Элементы.РаспределениеПоСчетамБанковскийСчет.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ПодборПоОстаткамОбработка("ПодборПоОстаткамЗавершение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамОбработка(ПроцедураЗавершения)
	
	ОплатаВДругуюОрганизацию =
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация", НСтр("ru = 'Организация';
																		|en = 'Company'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Валюта",      НСтр("ru = 'Валюта';
																		|en = 'Currency'"));
	Если ОплатаВДругуюОрганизацию Тогда
		Если Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
			ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("КассаПолучатель",          НСтр("ru = 'Касса получателя';
																							|en = 'Receiving cash account'"));
		ИначеЕсли Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная") Тогда
			ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("БанковскийСчетПолучатель", НСтр("ru = 'Счет получателя';
																							|en = 'Payee account'"));
		КонецЕсли;
	Иначе
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Контрагент", НСтр("ru = 'Контрагент';
																			|en = 'Counterparty'"));
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамПослеПроверки", ЭтотОбъект,
		Новый Структура("ОплатаВДругуюОрганизацию, ПроцедураЗавершения", ОплатаВДругуюОрганизацию, ПроцедураЗавершения));
		
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамПослеПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(ДополнительныеПараметры.ПроцедураЗавершения, ЭтотОбъект);
	ПоместитьРасшифровкуПлатежаВоВременноеХранилище();
	ВзаиморасчетыКлиент.ПодборВРасшифровкуПлатежа(ЭтаФорма, Элементы.РасшифровкаПлатежаПодборПоОстаткам.Имя, Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьРасшифровкуПлатежаВоВременноеХранилище()
	ВзаиморасчетыСервер.ПоместитьРасшифровкуПлатежаВоВременноеХранилище(ЭтаФорма, "РасшифровкаПлатежаПодборПоОстаткам");
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ПодборПоОстаткамЗавершениеСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодборПоОстаткамЗавершениеСервер()
	
	ВзаиморасчетыСервер.ЗагрузитьРасшифровкуПлатежаИзВременногоХранилища(ЭтаФорма);
	
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств =
				Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
		КонецЕсли;
		ЗаполнитьКурсИКратностьВСтрокеРасшифровки(СтрокаТаблицы);
		ДенежныеСРедстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
			СтрокаТаблицы, Объект.Валюта, ВалютаРеглУчета);
		ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.Валюта, ВалютаРеглУчета);
	КонецЦикла;
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиНевыданныхСуммКонтрагенту(Команда)
	
	ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ДействующиеДоговоры = Справочники.ДоговорыКредитовИДепозитов.ДействующиеДоговорыПоКонтрагенту(
		Объект.Организация, Объект.Контрагент, Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный);
	
	Для Каждого Договор Из ДействующиеДоговоры Цикл
		
		ДанныеРасшифровки = Справочники.ДоговорыКредитовИДепозитов.ДанныеРасшифровкиПлатежаДокументаДДС(
			Договор, Ложь, Объект.Ссылка);
		
		Для Каждого Строка Из ДанныеРасшифровки Цикл
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, НоваяСтрока, "Объект.РасшифровкаПлатежа");
		КонецЦикла;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеПлатежа(Команда)
	
	ЗаполнитьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаСервер()
	
	ДенежныеСредстваСервер.ЗаполнитьТекстНазначенияПлатежа(Объект);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлДляОбменаСБанком(Команда)
	
	//++ Локализация
	ВыгрузитьФайлДляОбменаСБанкомЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткам(Команда)
	
	//++ Локализация
	ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткамЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиНевыданныхСуммСотруднику(Команда)
	
	//++ Локализация
	ЗаполнитьОстаткамиНевыданныхСуммСотрудникуЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументы(Команда)
	
	//++ Локализация
	ЗаполнитьПодтверждающиеДокументыЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуПлатежу(Команда)
	
	//++ Локализация
	ЗаполнитьПоПредыдущемуПлатежуЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСчетаФактуры(Команда)
	
	//++ Локализация
	ПодобратьСчетаФактурыЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПодтверждающийДокумент(Команда)
	
	//++ Локализация
	ПросмотретьПодтверждающийДокументЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте	
Процедура ЗакрытьЗаявку(Команда)
	
	Объект.Закрыта = Истина;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть            = Объект.ПодтверждающиеДокументы;
	ПараметрыПроверки.ПроверятьРаспроведенность = Ложь;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("ТипПлатежаФЗ275", НСтр("ru = 'Тип платежа 275-ФЗ';
																			|en = 'Payment type 275-FZ'"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	#Область УХ_Встраивание
	//УсловноеОформление.Элементы.Очистить();
	#КонецОбласти
	
	// В статусах "Не согласована", "Отклонена" заполнение полей "СтатьяАктивовПассивов" и "СтатьяРасходов" необязательно.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСтатьяРасходов.Имя);
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетПолучатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетКонтрагента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыБезналичная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыОплаты.Безналичная;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыБезналичная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыОплаты.Безналичная;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетПолучатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыБезналичная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыОплаты.Безналичная;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КассаПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора1 = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОбъектРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОбъектРасчетов.Объект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ссылка");
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ДоговорКредитаДепозита");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ДоговорАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	// Курс взаиморасчетов
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаКурсЧислительВзаиморасчетов.Имя);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	#КонецОбласти
	
	ДенежныеСредстваСервер.УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	ИспользоватьНачислениеЗарплатыУТ       = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьНесколькоВалют             = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьВалютныеПлатежи            = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи");
	ИспользоватьДоговорыМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
	ИспользоватьДоговорыСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ИспользоватьДоговорыСПоставщиками      = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	ИспользоватьУчетПрочихАктивовПассивов  = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов");
	ИспользоватьСинхронизациюДанных        = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	ИспользоватьУчетНДС                    = ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС");
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	ПравоСогласования = ПраваПользователяПовтИсп.СогласованиеЗаявокНаРасходованиеДенежныхСредств();
	ПравоУтверждения  = ПраваПользователяПовтИсп.УтверждениеЗаявокНаРасходованиеДенежныхСредств();

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮрФизЛицо");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
		Если Объект.ОтражатьКомиссию Тогда
			Если Объект.СуммаДокумента <> 0 Тогда
				СтавкаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСтавкуКомиссии(Объект.СуммаДокумента, Объект.СуммаКомиссии);
			Иначе
				СтавкаКомиссии = 0;
			КонецЕсли;
			Элементы.ГруппаКомиссия.Заголовок = ЗаголовокЭквайринговойКомиссии(Объект.СуммаКомиссии, Объект.Валюта, СтавкаКомиссии);
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	ТекущийСтатус = Объект.Статус;
	ТекущийКонтрагент = Объект.Контрагент;
	
	ФормаОплатыБезналичная = Перечисления.ФормыОплаты.Безналичная;
	
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер(Ложь);
	
	ИнициализироватьРасшифровкуПлатежа();
	
	ЗаполнитьДанныеОбОплатеЗаявки();
	ДенежныеСредстваСервер.ЗаполнитьСписокВыбораПериодовАвансовогоОтчета(ЭтаФорма, Объект.ДатаПлатежа);
	ПериодАвансовогоОтчетаДата = (ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата"));
	
	СписокФизЛиц = Число(Объект.СписокФизЛиц);
	
	ЗаполнитьСписокХозяйственныхОпераций();
	УточнитьСписокХозяйственныхОпераций();
	ЗаполнитьСписокХозяйственныхОперацийПоЗарплате();
	УстановитьЗаголовокСтатьяДоходовРасходов();
	УстановитьЗаголовокСуммыКонвертации();
	ОпределитьВалютныйПлатеж();
	
	ЗаполнитьВалютуВзаиморасчетовДокумента();
	ЗаполнитьКурсКратностьТекстом();
	
	ТребуетсяИнформацияДляРегулирующихОрганов = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Валюта, "Код") = "980");
	КодыИнструкцийБанку = НадписьКодыИнструкцийБанку(Объект);
	
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	УправлениеЭлементамиФормы();
	УстановитьСписокХозяйственныхОпераций();
	УстановитьСписокСтатусов();
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
	#Область УХ_Встраивание
	ЭтаФорма.ТолькоПросмотр 	= НЕ ЭтаФорма.ЕстьСуперПользователь И ЭтаФорма.СтатусОбъекта = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Утверждена");
	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ИспользоватьРеглУчет");
	РеквизитыФормы.Вставить("ФормаОплатыОграничена");
	РеквизитыФормы.Вставить("ФормаОплаты");
	РеквизитыФормы.Вставить("ИспользоватьНесколькоВалют");
	РеквизитыФормы.Вставить("ИспользоватьНачислениеЗарплатыУТ");
	РеквизитыФормы.Вставить("ПериодАвансовогоОтчетаДата");
	РеквизитыФормы.Вставить("ТребуетсяИнформацияДляРегулирующихОрганов");
	РеквизитыФормы.Вставить("ИспользоватьВалютныеПлатежи");
	РеквизитыФормы.Вставить("ВалютныйПлатеж");
	РеквизитыФормы.Вставить("ВалютныйКонтроль");
	РеквизитыФормы.Вставить("КодВалютнойОперацииЗаполнен");
	РеквизитыФормы.Вставить("ПравоСогласования");
	РеквизитыФормы.Вставить("ПравоУтверждения");
	РеквизитыФормы.Вставить("ТекстНеОплачено");
	РеквизитыФормы.Вставить("ОплатаНДСВБюджетПоОтдельнымОперациям");
	РеквизитыФормы.Вставить("ИспользоватьСинхронизациюДанных");
	РеквизитыФормы.Вставить("Модифицированность");
	РеквизитыФормы.Вставить("СуммаНераспределено");
	РеквизитыФормы.Вставить("ИспользоватьДоговорыМеждуОрганизациями");
	РеквизитыФормы.Вставить("ИспользоватьДоговорыСКлиентами");
	РеквизитыФормы.Вставить("ИспользоватьДоговорыСПоставщиками");
	РеквизитыФормы.Вставить("ДействуетУказание2019_5286У");
	РеквизитыФормы.Вставить("ВалютаВзаиморасчетов");
	РеквизитыФормы.Вставить("ОстатокОплаты");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	#Область УХ_Встраивание
	РеквизитыФормы.Вставить("Истина", Истина);
	РеквизитыФормы.Вставить("СтатусОбъекта", 				Форма.СтатусОбъекта);
	РеквизитыФормы.Вставить("ЕстьСуперПользователь", 		Форма.ЕстьСуперПользователь);
	РеквизитыФормы.Вставить("ЕстьРасчетыСКонтрагентами", 	ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыСКонтрагентом(Форма.Объект.ВидОперацииУХ));
	РеквизитыФормы.Вставить("ЭтоТехническаяОперация", 		ЗаявкиНаОперацииКлиентСервер.ЕстьЗеркалированиеОперации(Форма.Объект));
	#КонецОбласти
	
	Возврат РеквизитыФормы;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРасшифровкуПлатежа()
	
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект, Неопределено, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ПереключательРасшифровки = 0;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Объект.СуммаДокумента;
			НоваяСтрока.ВалютаВзаиморасчетов = Объект.Валюта;
			НоваяСтрока.КурсЧислительВзаиморасчетов = 1;
			НоваяСтрока.КурсЗнаменательВзаиморасчетов = 1;
			ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, НоваяСтрока, "Объект.РасшифровкаПлатежа");
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
		Иначе
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИнициализацииРасшифровкиПлатежа(ЭтотОбъект);
	#КонецОбласти 
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьФормуОплаты();
	НастроитьДоступныеФормыОплаты();
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКонтрагента(Объект, Элементы.Контрагент);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаБезРазбиенияПартнер);
	УстановитьПараметрыВыбораБанковскогоСчета();
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.КассаПолучатель);
	
	УстановитьПараметрыВыбораОрганизации();
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	//++ НЕ УТ
	УстановитьПараметрыВыбораДоговораЛизинга();
	//-- НЕ УТ
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.СтатьяДвиженияДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
	ДенежныеСредстваСервер.ЗаполнитьНалогообложениеНДС(Объект, Объект.НалогообложениеНДС, Элементы.РасшифровкаБезРазбиенияНалогообложениеНДС);
	
	ЭлементыКИзменению = Новый Массив;
	ЭлементыКИзменению.Добавить("РаспределениеПоСчетамСумма");
	ЭлементыКИзменению.Добавить("ЛицевыеСчетаСотрудниковСумма");
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы, ЭлементыКИзменению);
	Элементы.НадписьВалютаКомиссия.Заголовок = Строка(Объект.Валюта);
	
	Элементы.ГруппаКомиссия.Заголовок = ЗаголовокЭквайринговойКомиссии(Объект.СуммаКомиссии, Объект.Валюта, СтавкаКомиссии);
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	
	Если Не ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	Операции = Перечисления.ХозяйственныеОперации;
	ДоступныеОперации = Элементы.ХозяйственнаяОперация.СписокВыбора;
	ДоступныеОперации.Очистить();
	
	ДоступныеОперации.Добавить(Операции.ОплатаПоставщику);
	ДоступныеОперации.Добавить(Операции.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru = 'Выдача подотчетнику';
																				|en = 'Payment to advance holder'"));
	ДоступныеОперации.Добавить(Операции.ПеречислениеВБюджет);
	ДоступныеОперации.Добавить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Оплата другой организации';
																						|en = 'Intercompany payment'"));
	ДоступныеОперации.Добавить(Операции.ВнутренняяПередачаДенежныхСредств, НСтр("ru = 'Передача между организацией и филиалом';
																				|en = 'Transfer between the company and its branch office'"));
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплаты);
	ДоступныеОперации.Добавить(Операции.ОплатаАрендодателю);
	ДоступныеОперации.Добавить(Операции.ОплатаПоКредитам);
	ДоступныеОперации.Добавить(Операции.ПеречислениеНаДепозиты);
	ДоступныеОперации.Добавить(Операции.ВыдачаЗаймов, НСтр("ru = 'Выдача займа контрагенту';
															|en = 'Loan to counterparty'"));
	ДоступныеОперации.Добавить(Операции.ВыдачаЗаймаСотруднику, НСтр("ru = 'Выдача займа сотруднику';
																	|en = 'Loan to employee'"));
	ДоступныеОперации.Добавить(Операции.КонвертацияВалюты);
	ДоступныеОперации.Добавить(Операции.ПрочаяВыдачаДенежныхСредств, НСтр("ru = 'Прочий расход';
																			|en = 'Other expenses'"));
	ДоступныеОперации.Добавить(Операции.ВозвратОплатыКлиенту);
	ДоступныеОперации.Добавить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Возврат другой организации';
																						|en = 'Refund to another company'"));
	ДоступныеОперации.Добавить(Операции.ВозвратОплатыНаПлатежнуюКарту);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОперацийПоЗарплате()
	
	Операции = Перечисления.ХозяйственныеОперации;
	ДоступныеОперации = Элементы.ХозяйственнаяОперацияПоЗарплате.СписокВыбора;
	ДоступныеОперации.Очистить();
	
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплатыНаЛицевыеСчета, НСтр("ru = 'На лицевые счета';
																			|en = 'To personal accounts'"));
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплатыЧерезКассу, НСтр("ru = 'Через кассу';
																		|en = 'Via cash account'"));
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииОплатаАрендодателю(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЭквайринга(ЭлементХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокХозяйственныхОпераций()
	
	СписокВыбора = Элементы.ХозяйственнаяОперация.СписокВыбора;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТипДокумента = ТипЗнч(Объект.ДокументОснование);
		Если ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику")
			Или ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера")
			Или ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту")
			Или ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			Если ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			Или ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			Или ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСтатусов()
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	
	Если Не ПравоСогласования Или Не ПравоУтверждения Тогда
		
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
		
		Если ПравоСогласования Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
		КонецЕсли;
		
		Если ПравоУтверждения Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступныеФормыОплаты()
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	ОплатаНаличная = СписокВыбора.Добавить("Наличная", НСтр("ru = 'Наличными';
															|en = 'Cash'"));
	ОплатаБезналичная = СписокВыбора.Добавить("Безналичная", НСтр("ru = 'Безналичными';
																	|en = 'Bank account'"));
	ОплатаЛюбая = СписокВыбора.Добавить("Любая", НСтр("ru = 'В любой форме';
														|en = 'Any'"));
	ОплатаКартой = СписокВыбора.Добавить("ПлатежнаяКарта", НСтр("ru = 'Платежной картой';
																|en = 'With payment card'"));
	
	Если (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		Или Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Элементы.ФормаОплаты.СписокВыбора.Удалить(ОплатаКартой);
	КонецЕсли;
	
	#Область УХ_Встраивание
	Элементы.ФормаОплаты.СписокВыбора.Удалить(ОплатаЛюбая);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбОплатеЗаявки()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОстатокОплаты = -1;
	Иначе
		ОстатокОплаты = ОстатокОплатыПоЗаявке(Объект.Ссылка);
	КонецЕсли;
	
	Если ОстатокОплаты < 0 Тогда
		НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = '<span style=""color: %1"">Не оплачена</span>';
				|en = '<span style=""color: %1"">Not paid</span>'"), "ЦветТекстаПредупреждение");
	ИначеЕсли ОстатокОплаты = 0 Тогда
		Если Объект.Закрыта Тогда
			СуммаЗакрыто = СуммаЗакрыто(Объект.Ссылка);
			НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Оплачена частично, <span style=""color: %1"">закрыто: %2</span>';
					|en = 'Paid partially, <span style=""color: %1"">closed: %2</span>'"),
				"ЦветТекстаПредупреждение", ФормированиеПечатныхФорм.ФорматСумм(СуммаЗакрыто, Объект.Валюта));
		Иначе
			НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Оплачена полностью';
																					|en = 'Fully paid'"));
		КонецЕсли;
	Иначе
		НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Оплачена частично, <span style=""color: %1"">не оплачено: %2</span>';
				|en = 'Paid partially, <span style=""color: %1"">not paid: %2</span>'"),
			"ЦветТекстаПредупреждение", ФормированиеПечатныхФорм.ФорматСумм(ОстатокОплаты, Объект.Валюта));
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ОстатокОплаты");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокОплатыПоЗаявке(Ссылка)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК НеОплачено
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	) КАК ДенежныеСредства
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивРезультатов[0].Пустой() Тогда
		Результат = -1;
	Иначе
		Результат = МассивРезультатов[1].Выгрузить()[0].НеОплачено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаЗакрыто(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	-СУММА(ДенежныеСредства.Сумма) КАК Закрыто
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДенежныеСредства.Сумма < 0
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить()[0].Закрыто;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
			Получатель = Объект.ПодотчетноеЛицо;
		Иначе
			Получатель = Объект.Контрагент;
		КонецЕсли;
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Получатель,
		#Область УХ_Встраивание
			//Объект.Валюта);
			Объект.ВалютаОплаты);
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаКонтрагента(ЭтаФорма);
		#КонецОбласти
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.Организация,
		#Область УХ_Встраивание
			//Объект.Валюта);
			Объект.ВалютаОплаты);
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаСписания(ЭтаФорма);
		#КонецОбласти
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			Объект.Организация,
		#Область УХ_Встраивание
			//Объект.Валюта);
			Объект.ВалютаОплаты);
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаСписания(ЭтаФорма);
		#КонецОбласти
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПолучатель) Тогда
		Объект.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта);
		#Область УХ_Встраивание
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаКассыПолучателя(ЭтаФорма);
		#КонецОбласти
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
		Объект.КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта);
		#Область УХ_Встраивание
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСчетаКассыПолучателя(ЭтаФорма);
		#КонецОбласти
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер(ЗаполнятьСчетПоДоговору = Истина)
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		
		ХозяйственнаяОперацияДоговора = Новый Массив;
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		КонецЕсли;
		
		ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
			ДоговорКонтрагента, Партнер, Объект.Контрагент, Объект.Организация, ХозяйственнаяОперацияДоговора);
		
		Если ЗаполнятьСчетПоДоговору Тогда
			ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента,, Объект.БанковскийСчетКонтрагента);
			Если Объект.Валюта <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ВалютаДенежныхСредств") Тогда
				Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			УчетнаяИнформацияПоДоговору = Справочники.ДоговорыКонтрагентов.УчетнаяИнформацияПоДоговору(ДоговорКонтрагента);
			Если ЗначениеЗаполнено(УчетнаяИнформацияПоДоговору) Тогда
				Если Не ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
					УчетнаяИнформацияПоДоговору.Свойство("СтатьяДвиженияДенежныхСредств", Объект.СтатьяДвиженияДенежныхСредств);
				КонецЕсли;
				УчетнаяИнформацияПоДоговору.Свойство("СтавкаНДС", СтавкаНДС);
				УчетнаяИнформацияПоДоговору.Свойство("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаПоСчетуПолучателя()
	
	Реквизиты =
		Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчетКонтрагента);
	ТекстНазначенияПлатежа = Реквизиты.ТекстНазначения;
	
	Если ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		Объект.НазначениеПлатежа = Объект.НазначениеПлатежа + "
			|" + ТекстНазначенияПлатежа;
	Иначе
		Объект.НазначениеПлатежа = ТекстНазначенияПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизации()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
	КонецЕсли;
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизацииПолучателя()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", Объект.Организация));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", Объект.Организация));
		
	КонецЕсли;
	
	Элементы.ОрганизацияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизацию()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизациюПолучатель()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(
			Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, ЭлементБанковскийСчетКонтрагента)
	
	МассивПараметров = Новый Массив;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	Иначе
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	КонецЕсли;
	
	#Область УХ_Встраивание
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	КонецЕсли;
	//СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаОплаты", РежимИзмененияСвязанногоЗначения.Очищать);
	//МассивПараметров.Добавить(СвязьПараметров);
	#КонецОбласти 
	
	ЭлементБанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	ДенежныеСредстваСервер.УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения(ЭтотОбъект);
	
	СуммаНераспределено = ДенежныеСредстваСервер.НераспределенныйОстатокПлатежа(Объект);
	
	Если СуммаНераспределено <> 0 И Не ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
			Объект.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
			Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями");
		Иначе
			Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		КонецЕсли;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("СуммаНераспределено");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговоровКредитовДепозитов()

	МассивПараметров = Новый Массив;
	
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФормаОплатыЗаявки)
		И (Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная
		ИЛИ Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Объект.ФормаОплатыЗаявки));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора",
		Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация)));
		
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	#Область УХ_Встраивание
	Элементы.ДоговорКредитаДепозита.ПараметрыВыбора = НовыеПараметрыВыбора;
	#КонецОбласти 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормыОплатыПоХозяйственнойОперации()
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	#Область УХ_Встраивание
	// ошибка ЕРП для выплаты зарплаты через кассу ставится форма оплаты - безналичная
	СтруктураДанныхЗаполнения.Вставить("ХозяйственнаяОперацияПоЗарплате", Объект.ХозяйственнаяОперацияПоЗарплате);
	#КонецОбласти
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьФормуОплатыПоХозОперации(СтруктураДанныхЗаполнения);
	
	Если СтруктураДанныхЗаполнения.Свойство("ФормаОплатыНаличная")
		И СтруктураДанныхЗаполнения.Свойство("ФормаОплатыБезналичная")
		И СтруктураДанныхЗаполнения.Свойство("ФормаОплатыПлатежнаяКарта")
		И СтруктураДанныхЗаполнения.Свойство("ФормаОплатыЗаявки") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхЗаполнения,
			"ФормаОплатыНаличная, ФормаОплатыБезналичная, ФормаОплатыПлатежнаяКарта, ФормаОплатыЗаявки");
	КонецЕсли;
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииФормыОплаты(ЭтаФорма);
	#КонецОбласти
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура УстановитьПараметрыВыбораДоговораЛизинга()

	МассивПараметров = Новый Массив;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорАренды.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасшифровкаБезРазбиенияДоговорАренды.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	#Область УХ_Встраивание
	Элементы.ДоговорАренды.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	#КонецОбласти 
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура УстановитьЗаголовокСуммыКонвертации()
	
	ПараметрыКонвертации = ДенежныеСредстваСервер.ИнициализироватьПараметрыКонвертации();
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, Объект);
	ПараметрыКонвертации.ВалютаРеглУчета = ВалютаРеглУчета;
	
	ЗаголовокСуммыКонвертации = ДенежныеСредстваСервер.ЗаголовокСуммыКонвертации(ПараметрыКонвертации);
	Элементы.СуммаКонвертации.Заголовок =
		ЗаголовокСуммыКонвертации + ?(ЗначениеЗаполнено(ЗаголовокСуммыКонвертации), " ", "") + НСтр("ru = 'на сумму';
																									|en = 'in the amount of'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДС()
	
	ДенежныеСредстваСервер.ЗаполнитьНалогообложениеНДС(Объект, Объект.НалогообложениеНДС, Элементы.РасшифровкаБезРазбиенияНалогообложениеНДС, Элементы.РасшифровкаБезРазбиенияНалогообложениеНДСВозврата);
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНДССтрокиНаСервере(ИдСтроки)
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	ОбновитьСтавкуНДСИПересчитатьСуммуНДС(ИдСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтавкуНДСИПересчитатьСуммуНДС(ИдСтроки)
	
	ДенежныеСредстваСервер.ОбновитьСтавкуНДСИПересчитатьСуммуНДС(Объект, ИдСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ФормаОплатыОграничена() // Одним значением
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		ДопустимаяФормаОплаты = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОграничениеФормыОплаты(Объект.ХозяйственнаяОперацияПоЗарплате);
	Иначе
		ДопустимаяФормаОплаты = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОграничениеФормыОплаты(Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат (ДопустимаяФормаОплаты <> Неопределено);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов';
																		|en = 'Expense item'");
		Элементы.РасшифровкаПлатежаСтатьяРасходов.Заголовок      = НСтр("ru = 'Статья расходов';
																		|en = 'Expense item'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчета()
	
	МассивПараметров = Новый Массив;
	СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
	МассивПараметров.Добавить(СвязьПараметров);
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	КонецЕсли;
	
	Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.Касса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РаспределениеПоСчетамБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеВалют()
	
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная
		И Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		
		#Область УХ_Встраивание
		//ВалютаКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Касса, "ВалютаДенежныхСредств");
		ВалютаКассы = Объект.ВалютаОплаты;
		#КонецОбласти 
		ВалютаСравнения = Объект.Валюта;
		
		Если ВалютаКассы <> ВалютаСравнения Тогда
			Объект.Касса = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		
		#Область УХ_Встраивание
		//ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
		ВалютаСчета = Объект.ВалютаОплаты;
		#КонецОбласти 
		ВалютаСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ВалютаДенежныхСредств");
		МассивСчетов = Новый Массив;
		
		Для Каждого СтрокаСчета Из Объект.РаспределениеПоСчетам Цикл
			Если ЗначениеЗаполнено(СтрокаСчета.БанковскийСчетКасса)
				И ТипЗнч(СтрокаСчета.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
				МассивСчетов.Добавить(СтрокаСчета.БанковскийСчетКасса);
			КонецЕсли;
		КонецЦикла;
		ВалютыСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетов, "ВалютаДенежныхСредств");
		
		ВалютаСравнения = ВалютаПланированияДенежныхСредств(ВалютаСчета);
		
		Если ВалютаСчетаКонтрагента <> ВалютаСравнения Тогда
			Объект.БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
		
		КУдалению = Новый Массив;
		Для Каждого СтрокаСчета Из Объект.РаспределениеПоСчетам Цикл
			Если ЗначениеЗаполнено(СтрокаСчета.БанковскийСчетКасса)
				И ТипЗнч(СтрокаСчета.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
				Если ВалютыСчетов[СтрокаСчета.БанковскийСчетКасса].ВалютаДенежныхСредств <> ВалютаСравнения Тогда 
					КУдалению.Добавить(СтрокаСчета);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаСчета Из КУдалению Цикл
			Объект.РаспределениеПоСчетам.Удалить(СтрокаСчета);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВалютаПланированияДенежныхСредств(ВалютаБанковскогоСчета)
	
	Если Объект.ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		Возврат ВалютаБанковскогоСчета;
	Иначе
		Возврат Объект.Валюта;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьФормуОплаты()
	
	Если Объект.ФормаОплатыНаличная И Объект.ФормаОплатыБезналичная Тогда
		ФормаОплаты = "Любая";
	
	ИначеЕсли Объект.ФормаОплатыНаличная Тогда
		ФормаОплаты = "Наличная";
		
	ИначеЕсли Объект.ФормаОплатыБезналичная Тогда
		ФормаОплаты = "Безналичная";
		
	ИначеЕсли Объект.ФормаОплатыПлатежнаяКарта Тогда
		ФормаОплаты = "ПлатежнаяКарта";
		
	Иначе
		ФормаОплаты = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов()
	ДенежныеСредстваСервер.СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов(ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуВоВременноеХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаПлатежа.Выгрузить());
КонецФункции

&НаСервере
Процедура ОпределитьВалютныйПлатеж()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ВалютныйПлатеж = Ложь;
	Иначе
		ВалютныйПлатеж = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НадписьКодыИнструкцийБанку(Объект)
	
	КодыИнструкцийБанку = "";
	
	Если Объект.ИнструкцииБанку.Количество() Тогда
		КодыИнструкцийБанку = НСтр("ru = 'Инструкции банку:';
									|en = 'Instructions for bank:'") + " ";
		Для каждого СтрокаИнструкции Из Объект.ИнструкцииБанку Цикл
			КодыИнструкцийБанку = КодыИнструкцийБанку + Строка(СтрокаИнструкции.Инструкция) + ", ";
		КонецЦикла;
		КодыИнструкцийБанку = Лев(КодыИнструкцийБанку, СтрДлина(КодыИнструкцийБанку) - 2);
	Иначе
		КодыИнструкцийБанку = НСтр("ru = '<Указать инструкции банку>';
									|en = '<Specify instructions for bank>'");
	КонецЕсли;
	
	Возврат КодыИнструкцийБанку;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьИнформацияДляРегулирующихОрганов(Объект)
	
	ИнформацияДляРегулирующихОрганов = НСтр("ru = 'Для регулятора (77B):';
											|en = 'For controller (77V):'");
	
	Если ЗначениеЗаполнено(Объект.ИнформацияДляРегулирующихОрганов) Тогда
		ИнформацияДляРегулирующихОрганов = ИнформацияДляРегулирующихОрганов + " " + Объект.ИнформацияДляРегулирующихОрганов;
	Иначе
		ИнформацияДляРегулирующихОрганов = ИнформацияДляРегулирующихОрганов + " " + НСтр("ru = '<Указать>';
																						|en = '<Specify>'");
	КонецЕсли;
	
	Возврат ИнформацияДляРегулирующихОрганов;
	
КонецФункции

&НаСервере
Процедура ПересчитатьПараметрыКонвертации(ИмяРеквизита)
	
	ПараметрыКонвертации = ДенежныеСредстваСервер.ИнициализироватьПараметрыКонвертации();
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, Объект);
	ПараметрыКонвертации.ВалютаРеглУчета = ВалютаРеглУчета;
	
	ДенежныеСредстваСервер.РассчитатьПараметрыКонвертации(ПараметрыКонвертации, ИмяРеквизита);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыКонвертации);
	
	#Область УХ_Встраивание
	ПлатежныеПозиции.ПриПересчетеПараметровКонвертации(ЭтаФорма);
	#КонецОбласти 
	
КонецПроцедуры

&НаСервере
Функция СчетСоответствуетВладельцу()
	
	Результат = Ложь;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		Результат = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента, Объект.ПодотчетноеЛицо);
	Иначе
		Результат = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента, Объект.Контрагент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДоступныеПорядкиРасчетов()
	СписокПорядков = Новый СписокЗначений;
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"));
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
	СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту")
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
	КонецЕсли;
	Возврат СписокПорядков;
КонецФункции

&НаСервере
Процедура ЗаблокироватьДанные()
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,,ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДанные()
	РазблокироватьДанныеДляРедактирования(,ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокЭквайринговойКомиссии(Сумма, Валюта, Ставка)
	
	Возврат НСтр("ru = 'Комиссия';
				|en = 'Fee'") + " " + Строка(Сумма) + " " + Строка(Валюта) + " " + Строка(Ставка) + "%";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВалютуВзаиморасчетовДокумента()
	
	ДенежныеСредстваСервер.ЗаполнитьВалютуВзаиморасчетовДокумента(ЭтаФорма);
	Элементы.ДекорацияВалютыИКурсПлатежа.Заголовок = ДенежныеСредстваСервер.НадписьВалютыИКурсПлатежа(ЭтаФорма);
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсВзаиморасчетов()
	
	Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		ЗаполнитьКурсИКратностьВСтрокеРасшифровки(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсКратностьТекстом()
	
	Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		ДенежныеСредстваКлиентСервер.СформироватьКурсЗнаменательТекстом(СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыВзаиморасчетов()
	
	Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
			СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, ХозяйственнаяОперация, Текст, ЭтоУИП = Ложь)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТипРасчетов = ?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
		Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,
		Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("Контрагент",Контрагент);
	СтруктураПараметров.Вставить("ТипРасчетов",ТипРасчетов);
	СтруктураПараметров.Вставить("Текст",Текст);
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(
		ДанныеВыбора,
		СтруктураПараметров,
		Истина,
		ЭтоУИП,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УХ_Встраивание
&НаСервере
Процедура ИнициализироватьДоговорКонтрагента()

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
		Объект.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
		Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями");
	Иначе
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЭлементаУХ(Элемент)
	
	ПриИзмененииЭлементаУХНаСервере(Элемент.Имя);
	
	Переконтролировать = Новый Массив;
	Переконтролировать.Добавить("ЦФОБезРазбиения");
	Переконтролировать.Добавить("ПроектБезРазбиения");
	Переконтролировать.Добавить("ЦФО");
	Переконтролировать.Добавить("Проект");
	
	Если Переконтролировать.Найти(Элемент.Имя) <> неопределено Тогда
		// проверяем лимиты
		ВыполнитьКонтрольДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент = Элементы.РасшифровкаПлатежа Тогда
		Если ОтменаРедактирования Тогда
			ПриИзмененииЭлементаУХНаСервере(Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеФормы_ПриИзменении(Элемент)
	
	//
	ПредыдущиеОбработчики = ПереопределениеСобытийФормыКлиент.ПолучитьПредыдущиеОбработчики(ЭтаФорма, Элемент.Имя, "ПриИзменении");
	Для каждого Событие Из ПредыдущиеОбработчики Цикл
		Если Событие.ПредыдущийУстановлен Тогда
			Выполнить(Событие.ОбработчикСобытияПредыдущий+Событие.Параметры);
		КонецЕсли;
	КонецЦикла; 
	
	Если Элемент.Имя = "Договор" Тогда
		ПриИзмененииДоговораВШапкеНаСервере();
	#Область УХ_Встраивание
	ИначеЕсли Элемент.Имя = "ДоговорВозврата" Тогда
		ПриИзмененииДоговораВШапкеНаСервере();
	#КонецОбласти
	ИначеЕсли Элемент.Имя = "ДоговорКредитаДепозита" Тогда
		ПриИзмененииДоговораКредитаДепозитаВШапкеНаСервере();
	ИначеЕсли Элемент.Имя = "ДоговорАренды" Тогда
		ПриИзмененииДоговораЛизингаВШапкеНаСервере();
	ИначеЕсли Элемент.Имя = "ДоговорЗаймаСотруднику" Тогда
		ПриИзмененииДоговораЗаймаСотрудникуВШапкеНаСервере();
	ИначеЕсли Элемент.Имя = "РасшифровкаБезРазбиенияСуммаВзаиморасчетов" Тогда
		ПересчитатьСуммуПриИзмененииСуммыВзаиморасчетовВСтроке();
		ОбновитьСуммуДокументаПоДаннымРасшифровки();
		ПриИзмененииЭлементаУХНаСервере(Элементы.СуммаДокумента.Имя);
	ИначеЕсли Элемент.Имя = "РасшифровкаПлатежаСумма" Тогда
		ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыВСтроке();
		ОбновитьСуммуДокументаПоДаннымРасшифровки();
	ИначеЕсли Элемент.Имя = "СуммаДокумента" Тогда
		ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыДокумента();
		Подключаемый_ПриИзмененииЭлементаУХ(Элемент);
	КонецЕсли;
	
	// Контроль документа
	ВыполнитьКонтрольДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтатьяБюджета_ПриИзменении(Элемент)
	
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтаФорма, Элемент.Имя);
	ПриИзмененииСтатьиБюджетаНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтатьиБюджета_ПриИзменении(Элемент)
	АналитикиСтатейБюджетовУХКлиент.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, Элемент.Имя);
	ПриИзмененииАналитикиСтатьиНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАналитикиСтатьиНаСервере(ИмяЭлемента)
	ЗаявкиНаОперации.ПриИзмененииАналитикиСтатьиБюджета(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БезакцептноеСписаниеПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииТаблицыЛицевыхСчетовСотрудников(Элемент)
	
	ПриИзмененииТаблицыЛицевыхСчетовСотрудниковНаСервере();
	Подключаемый_ПолеФормы_ПриИзменении(Элементы.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументПланированияПриИзменении(Элемент)
	
	ПриИзмененииДокументаПланированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтролейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД =  Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонтрольУХКлиент.ПоказатьРасшифровкуКонтроля(Объект, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтролейПриАктивизацииЯчейки(Элемент)
	Элемент.ТекущаяСтрока = неопределено;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВалютаОплатыПриИзменении(Элемент)
	
	ПриИзмененииВалютыОплтатыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуУХ(Команда)
	
	Если Команда.Имя = "ВыполнитьКонтрольДокумента" Тогда
		Модифицированность = Истина;
		ВыполнитьКонтрольДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасшифровкаПлатежаЭлементСтруктурыЗадолженностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЭлементСтруктурыЗадолженности = ТекущиеДанные.ЭлементСтруктурыЗадолженности;
	Если НЕ ЗначениеЗаполнено(ЭлементСтруктурыЗадолженности) Тогда
		Возврат;
	КонецЕсли;
		
	СтатьяДДС = СтатьяДДСПоЭлементуСтруктурыЗадолженности(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
		
	Если Элемент.Имя = "РасшифровкаПлатежаЭлементСтруктурыЗадолженности" Тогда
		ИмяСтатьи = "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств";
	Иначе
		ИмяСтатьи = "РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(ЭтотОбъект, ИмяСтатьи);
		ПриИзмененииСтатьиБюджетаНаСервере(ИмяСтатьи, Ложь);
	КонецЕсли;
	
	#Область УХ_Встраивание
	УстановитьТипПлатежаПоЭлементуСтруктурыЗадолженности(ЭлементСтруктурыЗадолженности);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Функция СтатьяДДСПоЭлементуСтруктурыЗадолженности(ТекущаяСтрока)
	
	Строка = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Возврат ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.СтатьяДДСПоЭлементуСтруктурыЗадолженности(
		Строка.ЭлементСтруктурыЗадолженности, Строка, Объект);
		
КонецФункции

#Область УХ_ПлатежнаяПозиция

&НаКлиенте
Процедура Подключаемый_СтрокаПлатежнаяПозицияНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("РедактироватьСоставПлатежныхПозиций", Истина);
	ПараметрыРедактирования.Вставить("РедактироватьСуммуПлатежныхПозиций", Истина);
	
	Если ПлатежныеПозицииЗаполняютсяПоЛицевымСчетам(Объект) Тогда
		ПараметрыРедактирования.РедактироватьСоставПлатежныхПозиций = Ложь;
		ПараметрыРедактирования.РедактироватьСуммуПлатежныхПозиций = Ложь;
	КонецЕсли;	
	
	ПлатежныеПозицииКлиент.НажатиеНаПредставлениеПлатежнойПозиции(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыРедактирования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПлатежныеПозицииЗаполняютсяПоЛицевымСчетам(Объект) Экспорт
	
	Если Объект.ВидОперацииУХ = ПредопределенноеЗначение("Справочник.ВидыОперацийУХ.ПеречислениеЗаработнойПлатыПоВедомостям")
		И Объект.ХозяйственнаяОперацияПоЗарплате = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета") Тогда
		
		Возврат Истина;
		
	ИначеЕсли Объект.ВидОперацииУХ = ПредопределенноеЗначение("Справочник.ВидыОперацийУХ.ПеречислениеПодотчетномуЛицу")
		И Объект.СписокФизЛиц Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПлатежнаяПозицияНажатиеПродолжение(Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		ПлатежнаяПозицияНажатиеЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПлатежнаяПозицияНажатиеЗавершениеНаСервере(Адрес)
	
	ПлатежныеПозиции.ЗагрузитьПлатежнуюПозициюПослеРедактирования(ЭтаФорма, Адрес);
	
КонецПроцедуры

#КонецОбласти 

#Область УХ_ВызовыОбщихПроцедурИФункцийСогласованияОбъектов

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход) экспорт
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход) экспорт
	Возврат ФормаВход["Согласующий"];
КонецФункции

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриИзмененииЭлементаУХНаСервере(ИмяЭлемента)
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииЭлементаУХ(ЭтаФорма, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораВШапкеНаСервере()
	
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииДоговора(ЭтаФорма);
	ПланированиеСуммыПриИзмененииСервер();
	ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыДокументаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДокументаПланированияНаСервере()
	
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииДокументаПланирования(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыОплтатыНаСервере()
	
	ПлатежныеПозиции.УстановитьВалюты(ЭтотОбъект);

КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииДоговораКредитаДепозитаВШапкеНаСервере()
	
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииДоговораКредитаДепозита(ЭтаФорма);
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	ПланированиеСуммыПриИзмененииСервер();
	ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыДокументаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораЛизингаВШапкеНаСервере()
	
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииДоговораАренды(ЭтаФорма);
		
	Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
		Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Договор", Объект.ДоговорАренды);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Платеж", Истина);
	
	Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
		Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Договор", Объект.ДоговорАренды);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.РасшифровкаБезРазбиенияТипПлатежаПоАренде, "Платеж", Истина);
	
	ПланированиеСуммыПриИзмененииСервер();
	ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыДокументаНаСервере();
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораЗаймаСотрудникуВШапкеНаСервере()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		Строка.ДоговорЗаймаСотруднику = Объект.ДоговорЗаймаСотруднику;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатьиБюджетаНаСервере(ИмяЭлемента, РучноеИзменение = Истина)
	
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииСтатьиБюджета(ЭтаФорма, ИмяЭлемента, РучноеИзменение);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольДокументаНаСервере()
	КонтрольУХ.ВыполнитьИнтерактивныйКонтроль(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперацииНаСервере()
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидОперацииУХ, "ВидОперацииДДСБезналичныйРасчет,ВидОперацииДДСНаличныйРасчет");
	
	Если ЗначениеЗаполнено(Данные.ВидОперацииДДСБезналичныйРасчет) Тогда
		Объект.ХозяйственнаяОперация = Данные.ВидОперацииДДСБезналичныйРасчет;
	Иначе
		Объект.ХозяйственнаяОперация = Данные.ВидОперацииДДСНаличныйРасчет;
	КонецЕсли;
	
	Если СохраненнаяХозяйственнаяОперация <> Объект.ХозяйственнаяОперация Тогда
		ХозяйственнаяОперацияПриИзмененииСервер();
		// Очистить договор
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Объект.ПлатежВУсловныхЕдиницах = Ложь;
		Объект.ВалютаОплаты = Объект.Валюта;
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	ОпределитьВалютныйПлатежЛокализация();
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииВидаОперацииУХ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ХозяйственнаяОперацияСКонтрагентом(ХозяйственнаяОперация)

	// Аналог функций, который исполняется на клиенте
	//ВзаиморасчетыСервер.ХозяйственнаяОперацияСКлиентом(Объект.ХозяйственнаяОперация);
	//ВзаиморасчетыСервер.ХозяйственнаяОперацияСПоставщиком(Объект.ХозяйственнаяОперация);
	
	Если ИспользоватьДоговорыСКлиентами
		И ( ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту")) Тогда
		Возврат Истина;
	ИначеЕсли ИспользоватьДоговорыСПоставщиками
		И (	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой() экспорт
	
	НастроитьЗависимыеЭлементыФормыНаСервере();	
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки события "ПриНачалеРедактирования" табличной части "РасшифровкаПлатежа".
//
Процедура РасшифровкаПлатежаПриНачалеРедактированияУХ(СтрокаТаблицы, НоваяСтрока, Копирование) Экспорт
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорКредитаДепозита) Тогда
			СтрокаТаблицы.ДоговорКредитаДепозита = Объект.ДоговорКредитаДепозита;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДоговорЗаймаСотруднику) Тогда
			СтрокаТаблицы.ДоговорЗаймаСотруднику = Объект.ДоговорЗаймаСотруднику;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДоговорАренды) Тогда
			СтрокаТаблицы.ДоговорАренды = Объект.ДоговорАренды;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПриИзмененииСуммыВзаиморасчетовВСтроке()
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.СуммаВзаиморасчетов;
		
		// Пересчитаем НДС
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуДокументаПоДаннымРасшифровки()
	
	СуммаРасшифровки = Объект.РасшифровкаПлатежа.Итог("Сумма");
	Если Объект.СуммаДокумента <> СуммаРасшифровки Тогда
		Объект.СуммаДокумента = СуммаРасшифровки;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыВСтроке()
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.СуммаВзаиморасчетов = ТекущиеДанные.Сумма;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыДокумента()
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.Сумма;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВидаОперацииУХ(Элемент)
	
	ПриИзмененииВидаОперацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуВзаиморасчетовПриИзмененииСуммыДокументаНаСервере()
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.Сумма;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД =  Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонтрольУХКлиент.ПоказатьРасшифровкуКонтроля(Объект, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаКонтроляДокументаПриАктивизацииЯчейки(Элемент)
	Элемент.ТекущаяСтрока = неопределено;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуСобытийЗаявки(ИмяСобытия, Параметр, СобытияОбновленияПП = "")
	ЗаявкиНаОперации.ОбработкаОповещенияФормыЗаявки(ЭтотОбъект, ИмяСобытия, Параметр, СобытияОбновленияПП);
КонецПроцедуры

&НаСервере
Процедура УстановитьСуммуВПлатежнойПозиции()
	ПлатежныеПозиции.УстановитьСуммуДокумента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТаблицыЛицевыхСчетовСотрудниковНаСервере()
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииЛицевыхСчетовСотрудников(ЭтотОбъект);
	Объект.СуммаДокумента = Объект.ЛицевыеСчетаСотрудников.Итог("Сумма");
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВедомостиНаЗарплату()
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПриИзмененииВедомостиНаЗарплату(ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Процедура СписокФизЛицПриИзмененииНаСервереУХ()	
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.СписокФизЛицПриИзменении(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Функция УстановитьТипПлатежаПоЭлементуСтруктурыЗадолженности(ЭлементСтруктурыЗадолженности)
	
	ТипПлатежа = Неопределено;
	СоответствиеТиповПлатежей = Новый Соответствие;
	
	Если Объект.ВидОперацииУХ = ПредопределенноеЗначение("Справочник.ВидыОперацийУХ.ОплатаАрендодателю") тогда
		СоответствиеТиповПлатежей.Вставить(ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.УслугаПоАренде"),ПредопределенноеЗначение("Перечисление.ТипыПлатежейПоАренде.УслугаПоАренде"));
		СоответствиеТиповПлатежей.Вставить(ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.ОбеспечительныйПлатеж"),ПредопределенноеЗначение("Перечисление.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж"));
		СоответствиеТиповПлатежей.Вставить(ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.ВыкупнаяСтоимость"),ПредопределенноеЗначение("Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимость"));
		СоответствиеТиповПлатежей.Вставить(ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.ВыкупнаяСтоимостьАванс"),ПредопределенноеЗначение("Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимостьАванс"));
		
		ТипПлатежа = СоответствиеТиповПлатежей.Получить(ЭлементСтруктурыЗадолженности);
	КонецЕсли;
	
	Для каждого СтрокаРасшифровки из Объект.РасшифровкаПлатежа цикл
		ТипПлатежа = СоответствиеТиповПлатежей.Получить(ЭлементСтруктурыЗадолженности);
		СтрокаРасшифровки.ТипПлатежаПоАренде = ТипПлатежа;	
	КонецЦикла;
	
КонецФункции

#КонецОбласти

//++ Локализация
#Область Локализация

#Область Локализация_ПодключаемыеОбработчикиСобытийФормы

&НаСервере
Процедура Подключаемый_ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	УстановитьУсловноеОформлениеЛокализация();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер();
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
				ЗаполнитьРеквизитыПлательщика();
			КонецЕсли;
		КонецЕсли;
		ПриЧтенииСозданииНаСервереЛокализация();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Элементы.ДекорацияСостояниеЭДО.Видимость = Истина;
	
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Контрагент,
		Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(Объект.Контрагент),
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПриЧтенииНаСервереЛокализация(ТекущийОбъект)
	
	ПриЧтенииНаСервере(ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервереЛокализация();

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриОткрытииЛокализация(Отказ)
	
	ПриОткрытии(Отказ);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрименениеПриказа107н = (Объект.Дата >= ДатаНачалаПримененияПриказа107н);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораЛокализация(РезультатВыбора, ИсточникВыбора)
	
	ОбработкаВыбора(РезультатВыбора, ИсточникВыбора);
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РанееСовершенныеПлатежи" Тогда
		
		Модифицированность = Истина;
		ЗаполнитьПоРанееСовершенномуПлатежу(РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СписаниеБезналичныхДенежныхСредств.Форма.РеквизитыПлательщика" Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
		УстановитьНадписьРеквизитыПлательщика();
		
	//++ НЕ УТ
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВедомостиНаВыплатуЗарплаты" Тогда
		
		Модифицированность = Истина;
		
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатВыбора);
		
		ТекущиеДанные.ВалютаВзаиморасчетов = Объект.Валюта;
		ТекущиеДанные.КурсЧислительВзаиморасчетов = 1;
		ТекущиеДанные.КурсЗнаменательВзаиморасчетов = 1;
		
		Элементы.РасшифровкаПлатежа.ЗакончитьРедактированиеСтроки(Ложь);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
		
		#Область УХ_Встраивание
		ПриИзмененииВедомостиНаЗарплату();
		#КонецОбласти
		
	//-- НЕ УТ
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПередЗаписьюНаСервереЛокализация(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОповещенияЛокализация(ИмяСобытия, Параметр, Источник)
	
	ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполненияИзФайла" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл"
			И Параметр.Свойство("ВладелецФайла")
			И Параметр.ВладелецФайла = ВыбранныйВладелецФайла
			И Параметр.ЭтоНовый
			И ДобавляетсяФайлПодтверждающегоДокумента Тогда
			
		Элементы.ПодтверждающиеДокументы.ТекущиеДанные.Файл = Источник[0];
		ДобавляетсяФайлПодтверждающегоДокумента = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПослеЗаписиНаСервереЛокализация(ТекущийОбъект, ПараметрыЗаписи)
	
	ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗаписиЛокализация(ПараметрыЗаписи)
	
	ПослеЗаписи(ПараметрыЗаписи);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры


#КонецОбласти

#Область Локализация_ПодключаемыеОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_ХозяйственнаяОперацияПриИзмененииЛокализация(Элемент)
	
	НуженПереходНаСервер = ХозяйственнаяОперацияПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		ХозяйственнаяОперацияПриИзмененииСерверЛокализация();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСерверЛокализация()
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
	Иначе
		Объект.ХозяйственнаяОперацияПоЗарплате = Неопределено;
	КонецЕсли;
	СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате;
	
	УстановитьФормыОплатыПоХозяйственнойОперацииЛокализация();
	ФормаОплатыОграничена = ФормаОплатыОграничена Или ФормаОплатыОграниченаЛокализация();
	
	ПеречислениеВБюджет = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Если ПеречислениеВБюджет
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		ЗаполнитьРеквизитыПлательщика();
		УстановитьНадписьРеквизитыПлательщика();
	КонецЕсли;
	
	//++ НЕ УТ
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	Если МассивРеквизитовОперации.Найти("ПлатежиПо275ФЗ") = Неопределено Тогда
		Объект.ПлатежиПо275ФЗ = Ложь;
	КонецЕсли;
	
	Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) Тогда
		Объект.ДоговорСУчастникомГОЗ = Ложь;
	КонецЕсли;
	
	УстановитьОграничениеФормыОплаты275ФЗ();
	ПроверитьЗаполнитьТипПлатежа275ФЗ();
	//-- НЕ УТ
	
	ОпределитьВалютныйПлатежЛокализация();
	ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер();
	УправлениеПоказателямиПлатежаВБюджет();
	
	ЗаполнитьСписокКодовВидаДохода();
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		Объект.КодВидаДохода = "1";
	Иначе
		Объект.КодВидаДохода = "";
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СуммаДокументаПриИзмененииЛокализация(Элемент)
	
	НуженПереходНаСервер = СуммаДокументаПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		СуммаДокументаПриИзмененииСерверЛокализация();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСерверЛокализация()
	
	СуммаДокументаПриИзмененииСервер();
	
	ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВалютаПриИзмененииЛокализация(Элемент)
	
	НуженПереходНаСервер = ВалютаПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		ВалютаПриИзмененииСерверЛокализация();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСерверЛокализация()
	
	ВалютаПриИзмененииСервер();
	
	ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	
	ОпределитьВалютныйПлатежЛокализация();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОрганизацияПриИзмененииЛокализация(Элемент)
	
	ОрганизацияПриИзмененииСерверЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСерверЛокализация()
	
	ОрганизацияПриИзмененииСервер();
	
	ЗаполнитьРеквизитыПлательщика();
	УстановитьНадписьРеквизитыПлательщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ХозяйственнаяОперацияПоЗарплатеПриИзмененииЛокализация(Элемент)
	
	НуженПереходНаСервер = ХозяйственнаяОперацияПоЗарплатеПриИзмененииКлиент();
	Если НуженПереходНаСервер Тогда
		ХозяйственнаяОперацияПоЗарплатеПриИзмененииСерверЛокализация();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПоЗарплатеПриИзмененииСерверЛокализация()
	
	ЗаполнитьСписокКодовВидаДохода();
	
	ХозяйственнаяОперацияПоЗарплатеПриИзмененииСервер();
	
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплатыУТ Тогда
		ОчиститьВедомостиВРасшифровкеПлатежа(Объект);
		#Область УХ_Встраивание
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ОбновитьАналитикиСтатейБюджетов(ЭтотОбъект);	
		#КонецОбласти 
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БанковскийСчетПриИзмененииЛокализация(Элемент)
	
	БанковскийСчетПриИзмененииСерверЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСерверЛокализация()
	
	БанковскийСчетПриИзмененииСервер();
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ Тогда
		ПроверитьЗаполнитьТипПлатежа275ФЗ();
	КонецЕсли;
	//-- НЕ УТ
	
	ЗаполнитьРеквизитыПлательщика();
	УстановитьНадписьРеквизитыПлательщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтрагентПриИзмененииЛокализация()
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
	КонтрагентПриИзмененииСерверЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСерверЛокализация()
	
	КонтрагентПриИзмененииСервер();
	
	ОпределитьВалютныйПлатежЛокализация();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БанковскийСчетКонтрагентаПриИзмененииЛокализация()
	
	БанковскийСчетКонтрагентаПриИзмененииСерверЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаПриИзмененииСерверЛокализация()
	
	БанковскийСчетКонтрагентаПриИзмененииНаСервере();
	
	ОпределитьВалютныйПлатежЛокализация();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланированиеСуммыПриИзмененииЛокализация()
	
	ПланированиеСуммыПриИзмененииСерверЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура ПланированиеСуммыПриИзмененииСерверЛокализация()
	
	ПланированиеСуммыПриИзмененииСервер();
	
	ОпределитьВалютныйПлатежЛокализация();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияОбработчикиСобытийЭлементовФормы

//++ НЕ УТ

&НаСервере
Процедура ПлатежиПо275ФЗПриИзмененииНаСервере()
	
	Если Объект.ПлатежиПо275ФЗ
		И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПервыйОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РасшифровкаПлатежа[0].ОбъектРасчетов, "Объект");
		Если ТипЗнч(ПервыйОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПервыйОбъектРасчетов,
				"ДоговорСУчастникомГОЗ, ОплатаРасходовПоТарифамСГосрегулированием,
				|ГосударственныйКонтракт, ИностранныйИсполнительВУтвержденномПеречнеГОЗ");
			ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, "ДоговорСУчастникомГОЗ");
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов,
				"ОплатаРасходовПоТарифамСГосрегулированием, ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ГосударственныйКонтракт");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОграничениеФормыОплаты275ФЗ();
	ПроверитьЗаполнитьТипПлатежа275ФЗ();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеФормыОплаты275ФЗ()
	
	Если Объект.ПлатежиПо275ФЗ Тогда
		Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Истина;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		ФормаОплатыОграничена = Истина;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ПеречислениеВБюджетПриИзмененииСервер()
	
	Если Объект.ПеречислениеВБюджет Тогда
		
		МассивОпераций = ДенежныеСредстваСерверЛокализация.МассивОперацийПеречисленияВБюджет();
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		ИначеЕсли МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
		УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
		
		Если ПустаяСтрока(Объект.КодОКАТО) Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(Объект.Организация);
			Если ПрименениеПриказа107н Тогда
				Объект.КодОКАТО = Реквизиты.КодПоОКТМО;
			Иначе
				Объект.КодОКАТО = Реквизиты.КодПоОКАТО;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПоказателямиПлатежаВБюджет();
	НастроитьЗависимыеЭлементыФормыНаСервере("ПеречислениеВБюджет");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежаВБюджетНажатиеЗавершение(РеквизитыПлатежаВБюджет, ДополнительныеПараметры) Экспорт
	
	Если РеквизитыПлатежаВБюджет <> Неопределено Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлатежаВБюджет);
		УправлениеПоказателямиПлатежаВБюджет();
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ТипПлатежаФЗ275ПриИзмененииНаСервере()
	
	Элементы.ПредметОплаты.СписокВыбора.Очистить();
	Если Объект.ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.ОплатаТоваровРаботУслугПоРегулируемымЦенам Тогда
		Для каждого ПредметОплаты Из ТоварыРаботыУслугиСТарифнымРегулированием Цикл
			Элементы.ПредметОплаты.СписокВыбора.Добавить(ПредметОплаты.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ТипНалогаПриИзмененииНаСервере()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплатыУТ И Объект.ТипНалога <> Перечисления.ТипыНалогов.НДФЛ И Объект.ТипНалога <> Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
		ОчиститьВедомостиВРасшифровкеПлатежа(Объект);
		#Область УХ_Встраивание
		ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ОбновитьАналитикиСтатейБюджетов(ЭтотОбъект);	
		#КонецОбласти 
	КонецЕсли;
	
	ОплатаНДСВБюджетПоОтдельнымОперациям = (Объект.ТипНалога = Перечисления.ТипыНалогов.НДС_ВвозимыеТовары
		Или Объект.ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	//-- НЕ УТ
	
	УправлениеЭлементамиФормы();
	
	//++ НЕ УТ
	ПроставитьСчетУчетаНалоговНаСервере();
	ПараметрыНастройки = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыНастройкиСчетовУчета(
		Объект.ХозяйственнаяОперация, Объект.ТипНалога);
	НастройкаСчетовУчетаСервер.ПриИзмененииПараметровНастройки(ЭтотОбъект, ПараметрыНастройки);
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ПроставитьСчетУчетаНалоговНаСервере()
	
	СчетУчетДоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НастройкаСчетовУчета, "СчетУчета");
	
	СчетПоТипуНалога = РеглУчетСервер.СчетУчетаПоТипуНалога(Объект.ТипНалога);
	
	Если СчетУчетДоИзменения <> СчетПоТипуНалога Тогда
		НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		НоваяНастройка.СчетУчета = СчетПоТипуНалога;
		Объект.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(
			НоваяНастройка, ЭтаФорма);
	КонецЕсли;
	
	Если Не ОплатаНДСВБюджетПоОтдельнымОперациям Тогда
		Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
			НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
			НоваяНастройка.СчетУчета = СчетПоТипуНалога;
			СтрокаРасшифровкиПлатежа.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(
				НоваяНастройка, ЭтаФорма);
			СтрокаРасшифровкиПлатежа.ТипСтатьи = 0;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
			СтрокаРасшифровкиПлатежа.ТипСтатьи = 3;
			Если СчетУчетДоИзменения <> СчетПоТипуНалога Тогда
				НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
				НоваяНастройка.СчетУчета = СчетПоТипуНалога;
				СтрокаРасшифровкиПлатежа.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(
					НоваяНастройка, ЭтаФорма);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура ОтраженияВРеглУчетеПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	ОтраженияВРеглУчетеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтраженияВРеглУчетеПриИзмененииНаСервере()
	
	РегистрацияВНалоговомОргане = Неопределено;
	Если ТипЗнч(Объект.НастройкаСчетовУчета.Субконто1) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		РегистрацияВНалоговомОргане = Объект.НастройкаСчетовУчета.Субконто1;
	ИначеЕсли ТипЗнч(Объект.НастройкаСчетовУчета.Субконто2) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		РегистрацияВНалоговомОргане = Объект.НастройкаСчетовУчета.Субконто2;
	ИначеЕсли ТипЗнч(Объект.НастройкаСчетовУчета.Субконто3) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		РегистрацияВНалоговомОргане = Объект.НастройкаСчетовУчета.Субконто3;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Объект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежаЛокализация

// Обработчик выбора в расшифровке
//
// Параметры:
//    Элемент - ПолеФормы - Поле расшифровки платежа
//    ВыбраннаяСтрока - Число - Индекс строки
//    Поле - ПолеФормы - Активная колонка
//    СтандартнаяОбработка - Булево - Признак стандартной обработки
&НаКлиенте
Процедура Подключаемый_РасшифровкаПлатежаВыборЛокализация(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТ
	РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииЛокализация(Элемент)
	
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСерверЛокализация();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасшифровкаБезРазбиенияДоговорКредитаДепозитаПриИзмененииЛокализация(Элемент)
	
	Подключаемый_РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииЛокализация(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСерверЛокализация()
	
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер();
	
	//++ НЕ УТ
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТекущаяСтрока.ДоговорКредитаДепозита, "БанковскийСчет.ОтдельныйСчетГОЗ, ТипПлатежаФЗ275, ТипДоговора");
	
	Если РеквизитыДоговора.БанковскийСчетОтдельныйСчетГОЗ <> Неопределено Тогда
		
		Объект.ПлатежиПо275ФЗ = РеквизитыДоговора.БанковскийСчетОтдельныйСчетГОЗ;
		
		Если РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанке
			Или РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанкеСКапитализацией
			Или ТекущаяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг Тогда
			
			Объект.ТипПлатежаФЗ275 = РеквизитыДоговора.ТипПлатежаФЗ275;
		Иначе
			Объект.ТипПлатежаФЗ275 = Неопределено;
		КонецЕсли;
	Иначе
		Объект.ПлатежиПо275ФЗ = Ложь;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ПлатежиПо275ФЗ");
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияКоманды

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткамЛокализация(Команда)
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть            = Объект.РасшифровкаПлатежа;
	ПараметрыПроверки.ПроверятьРаспроведенность = Ложь;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация", НСтр("ru = 'Организация';
																		|en = 'Company'"));
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткамЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьВедомостиПоОстаткамНаСервере();
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ВыгрузитьФайлДляОбменаСБанкомЛокализация(Команда)
	
	//++ НЕ УТ
	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Данные еще не записаны.
					|Выполнение действия ""Выгрузить файл обмена с банком"" возможно только после записи данных.
					|Данные будут записаны.';
					|en = 'The data is not recorded. 
					|Action ""Download bank exchange file"" can be performed only after the data is recorded.
					|The data will be recorded.'");
		Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлДляОбменаСБанкомЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОбменСБанкамиПоЗарплатнымПроектамКлиент.ВыгрузитьВФайлПлатежныеДокументыПеречисленияЗарплаты(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка), ЭтотОбъект);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура ВыгрузитьФайлДляОбменаСБанкомЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Записать();
		СсылкаНаОбъект = Объект.Ссылка;
		ОбменСБанкамиПоЗарплатнымПроектамКлиент.ВыгрузитьВФайлПлатежныеДокументыПеречисленияЗарплаты(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ЗаполнитьОстаткамиНевыданныхСуммСотрудникуЛокализация(Команда)
	
	//++ НЕ УТ
	ЗаполнитьОстаткамиНевыданныхСуммСотрудникуНаСервере();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ЗаполнитьОстаткамиНевыданныхСуммСотрудникуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	РасшифровкаПлатежа = ДенежныеСредстваСерверЛокализация.ДанныеРасшифровкиПлатежаДокументаДДСПоДоговоруЗаймаСотруднику(
		Объект, Ложь, Объект.Ссылка);
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументыЛокализация(Команда)
	
	//++ НЕ УТ
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть            = Объект.ПодтверждающиеДокументы;
	ПараметрыПроверки.ПроверятьРаспроведенность = Ложь;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("ТипПлатежаФЗ275", НСтр("ru = 'Тип платежа 275-ФЗ';
																			|en = 'Payment type 275-FZ'"));
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодтверждающиеДокументыЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПодтверждающиеДокументыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодтверждающиеДокументыНаСервере()
	
	Объект.ПодтверждающиеДокументы.Загрузить(
		ПолучитьИзВременногоХранилища(ДенежныеСредстваСерверЛокализация.ПодтверждающиеДокументыФЗ275(
			Объект.ТипПлатежаФЗ275, УникальныйИдентификатор, ДоговорКонтрагента)));
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ПросмотретьПодтверждающийДокументЛокализация(Команда)
	
	//++ НЕ УТ
	Если Элементы.ПодтверждающиеДокументы.ТекущаяСтрока <> Неопределено Тогда
		Файл = Элементы.ПодтверждающиеДокументы.ТекущиеДанные.Файл;
		
		Если Файл = Неопределено Или Файл.Пустая() Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Файл не указан.';
										|en = 'File is not specified.'"));
			Возврат;
		КонецЕсли;
		
		РеквизитыФайла = РеквизитыПодтверждающегоДокумента(Файл);
		
		Если РеквизитыФайла.Зашифрован Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, РеквизитыФайла.ФайлРедактируется);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуПлатежуЛокализация(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",                  Объект.Ссылка);
	ПараметрыФормы.Вставить("БанковскийСчет",          Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("ПрименениеПриказа107н",   ПрименениеПриказа107н);
	ПараметрыФормы.Вставить("ПрименениеПриказа126н",   ПрименениеПриказа126н);
	
	Если ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		ПараметрыФормы.Вставить("ТипНалога", Объект.ТипНалога);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.РанееСовершенныеПлатежи", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСчетаФактурыЛокализация(Команда)
	
	//++ НЕ УТ
	ПараметрыПодбора = УчетНДСУПКлиент.ПараметрыПодбораСчетовФактурТребующихОплатыНДС();
	ПараметрыПодбора.ТипНалога      = Объект.ТипНалога;
	ПараметрыПодбора.Организация    = Объект.Организация;
	ПараметрыПодбора.ДатаДокумента  = Объект.Дата;
	ПараметрыПодбора.ДокументСсылка = Объект.Ссылка;
	ПараметрыПодбора.АдресВременногоХранилища = ПоместитьВоВременноеХранилищеРасшифровкуПлатежа();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПодбораСчетовФактур", ЭтотОбъект);
	УчетНДСУПКлиент.ОткрытьФормуПодбораСчетовФактурТребующихОплатыНДС(ПараметрыПодбора, ОписаниеОповещения);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораСчетовФактур(Результат, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТ
	Если Результат <> Неопределено И Результат.Свойство("АдресВременногоХранилища") Тогда
		Модифицированность = Истина;
		ПолучитьРасшифровкуПлатежаНДСНалоговогоАгента(Результат.АдресВременногоХранилища);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Функция ПоместитьВоВременноеХранилищеРасшифровкуПлатежа()
	
	ТаблицаНалоговогоАгента = Новый ТаблицаЗначений;
	ТаблицаНалоговогоАгента.Колонки.Добавить("Контрагент");
	ТаблицаНалоговогоАгента.Колонки.Добавить("Договор");
	ТаблицаНалоговогоАгента.Колонки.Добавить("ДокументРасчетов");
	ТаблицаНалоговогоАгента.Колонки.Добавить("Сумма");
	
	НастройкаСчетовУчетаСервер.ЗаписатьНастройкиСчетовУчетаФормы(ЭтотОбъект);
	
	ТаблицаНастроекСчетовУчета = Объект.РасшифровкаПлатежа.Выгрузить(, "НастройкаСчетовУчета");
	НастройкиСчетовУчета = ТаблицаНастроекСчетовУчета.ВыгрузитьКолонку("НастройкаСчетовУчета");
	
	КоличествоНастроек = НастройкиСчетовУчета.Количество();
	Для ОбратныйИндекс = 1 По КоличествоНастроек Цикл
		Индекс = КоличествоНастроек - ОбратныйИндекс;
		Если НЕ ЗначениеЗаполнено(НастройкиСчетовУчета[Индекс]) Тогда
			НастройкиСчетовУчета.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиСчетовУчета.Количество() > 0 Тогда
		ДанныеНастроекСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НастройкиСчетовУчета, "Субконто1,Субконто2,Субконто3");
		
		Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			ДанныеНастройкиСчетов = ДанныеНастроекСчетов[СтрокаТЧ.НастройкаСчетовУчета];
			Если ДанныеНастройкиСчетов <> Неопределено И ЗначениеЗаполнено(ДанныеНастройкиСчетов.Субконто3) Тогда
				СтрокаТЗ = ТаблицаНалоговогоАгента.Добавить();
				СтрокаТЗ.Контрагент = ДанныеНастройкиСчетов.Субконто1;
				СтрокаТЗ.Договор = ДанныеНастройкиСчетов.Субконто2;
				СтрокаТЗ.ДокументРасчетов = ДанныеНастройкиСчетов.Субконто3;
				СтрокаТЗ.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНалоговогоАгента, Новый УникальныйИдентификатор);
	
КонецФункции
//-- НЕ УТ

&НаКлиенте
Процедура Подключаемый_ПодборПоОстаткамЛокализация(Команда)
	
	ПодборПоОстаткамОбработка("ПодборПоОстаткамЗавершениеЛокализация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершениеЛокализация(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПодборПоОстаткамЗавершениеСерверЛокализация();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборПоОстаткамЗавершениеСерверЛокализация()
	
	ПодборПоОстаткамЗавершениеСервер();
	
	//++ НЕ УТ
	ЗаполнитьПоДоговоруГОЗ();
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияСлужебные

&НаСервере
Процедура УстановитьУсловноеОформлениеЛокализация()
	
	//++ НЕ УТ
	// Подтверждающие документы
	ВидыПодтверждающиеИсполнениеКонтракта = Новый СписокЗначений;
	ВидыПодтверждающиеИсполнениеКонтракта.ЗагрузитьЗначения(Справочники.ВидыПодтверждающихДокументов.ВидыПодтверждающиеИсполнениеКонтракта());
	
	// Обязательное заполнение номера для документов, подтверждающих исполнение контракта.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыНомер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПодтверждающиеИсполнениеКонтракта;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Номер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Обязательное заполнение даты для документов, подтверждающих исполнение контракта
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыДата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПодтверждающиеИсполнениеКонтракта;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Обязательное заполнение суммы для документов, подтверждающих исполнение контракта.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПодтверждающиеИсполнениеКонтракта;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Сумма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Текст номера и даты для документов, подтверждающих исполнение контракта
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыВидДокумента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выберите вид документа...';
																|en = 'Select document kind...'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Пометка автозаполнения поля "Файл" из ТЧ "ПодтверждающиеДокументы"
	СтатусыОтменыПроверкиФайла = Новый СписокЗначений;
	СтатусыОтменыПроверкиФайла.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	СтатусыОтменыПроверкиФайла.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыФайл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыОтменыПроверкиФайла;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервереЛокализация()
	
	ДенежныеСредстваСерверЛокализация.УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(ЭтотОбъект);
	//++ НЕ УТ
	ПоддержкаПлатежей275ФЗ                 = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	ИспользоватьРеглУчет                   = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ПравоДоступаКПлануСчетов = ПравоДоступа("Просмотр", Метаданные.ПланыСчетов.Хозрасчетный);
	//-- НЕ УТ
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ДатаНачалаПримененияПриказа107н = Константы.ДатаНачалаПримененияПриказа107н.Получить();
	ПрименениеПриказа107н = (ТекущаяДата >= ДатаНачалаПримененияПриказа107н);
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	ПрименениеПриказа126н = (ДатаНачалаПримененияПриказа126н <> '00010101' И ТекущаяДата >= ДатаНачалаПримененияПриказа126н);
	ДействуетУказание2019_5286У = ПлатежиВБюджетКлиентСервер.ДействуетУказание2019_5286У(ТекущаяДата);
	
	ТоварыРаботыУслугиСТарифнымРегулированием.Загрузить(ОбщегоНазначения.ПрочитатьXMLВТаблицу(
		Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМакет("ТоварыРаботыУслугиСТарифнымРегулированием").ПолучитьТекст()).Данные);
	
	//++ НЕ УТ
	ОплатаНДСВБюджетПоОтдельнымОперациям = (Объект.ТипНалога = Перечисления.ТипыНалогов.НДС_ВвозимыеТовары
		Или Объект.ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	
	Если Объект.ПлатежиПо275ФЗ И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РасшифровкаПлатежа[0].ОбъектРасчетов, "Объект");
		Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ДоговорКонтрагента = ОбъектРасчетов;
			
		ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику")
			Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад")
			Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
			
			ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Договор");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
				"ОплатаРасходовПоТарифамСГосрегулированием, ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ГосударственныйКонтракт");
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПлатежиПо275ФЗ Тогда
		УстановитьОграничениеФормыОплаты275ФЗ();
	КонецЕсли;
	//-- НЕ УТ
	
	ЗаполнитьСписокХозяйственныхОперацийЛокализация();
	ЗаполнитьСписокХозяйственныхОперацийПоЗарплатеЛокализация();
	УточнитьСписокХозяйственныхОперацийЛокализация();
	
	#Область УХ_Встраивание
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.УточнитьСписокОперацийУХ(ЭтотОбъект);
	#КонецОбласти
	
	ФормаОплатыОграничена = ФормаОплатыОграничена Или ФормаОплатыОграниченаЛокализация();
	ОпределитьВалютныйПлатежЛокализация();
	УстановитьНадписьРеквизитыПлательщика();
	УправлениеПоказателямиПлатежаВБюджет();
	ЗаполнитьСписокКодовВидаДохода();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОперацийЛокализация()
	
	Операции = Перечисления.ХозяйственныеОперации;
	ДоступныеОперации = Элементы.ХозяйственнаяОперация.СписокВыбора;
	ДоступныеОперации.Очистить();
	
	ДоступныеОперации.Добавить(Операции.ОплатаПоставщику);
	ДоступныеОперации.Добавить(Операции.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru = 'Выдача подотчетнику';
																				|en = 'Payment to the advance holder'"));
	ДоступныеОперации.Добавить(Операции.ПеречислениеВБюджет);
	ДоступныеОперации.Добавить(Операции.ПеречислениеТаможне);
	ДоступныеОперации.Добавить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Оплата в другую организацию';
																						|en = 'Payment to another company'"));
	ДоступныеОперации.Добавить(Операции.ВнутренняяПередачаДенежныхСредств, НСтр("ru = 'Передача между организацией и филиалом';
																				|en = 'Transfer between the company and its branch'"));
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплаты);
	ДоступныеОперации.Добавить(Операции.ОплатаАрендодателю);
	ДоступныеОперации.Добавить(Операции.ОплатаПоКредитам);
	ДоступныеОперации.Добавить(Операции.ПеречислениеНаДепозиты);
	ДоступныеОперации.Добавить(Операции.ВыдачаЗаймов, НСтр("ru = 'Выдача займа контрагенту';
															|en = 'Issue loan to counterparty'"));
	ДоступныеОперации.Добавить(Операции.ВыдачаЗаймаСотруднику, НСтр("ru = 'Выдача займа сотруднику';
																	|en = 'Issue loan to employee'"));
	ДоступныеОперации.Добавить(Операции.КонвертацияВалюты);
	ДоступныеОперации.Добавить(Операции.ПрочаяВыдачаДенежныхСредств, НСтр("ru = 'Прочий расход';
																			|en = 'Other expenses'"));
	ДоступныеОперации.Добавить(Операции.ВозвратОплатыКлиенту);
	ДоступныеОперации.Добавить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Возврат в другую организацию';
																						|en = 'Return to another company'"));
	ДоступныеОперации.Добавить(Операции.ВозвратОплатыНаПлатежнуюКарту);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОперацийПоЗарплатеЛокализация()
	
	Операции = Перечисления.ХозяйственныеОперации;
	ДоступныеОперации = Элементы.ХозяйственнаяОперацияПоЗарплате.СписокВыбора;
	ДоступныеОперации.Очистить();
	
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплатыПоЗарплатномуПроекту, НСтр("ru = 'По зарплатному проекту';
																					|en = 'By payroll card program'"));
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплатыНаЛицевыеСчета, НСтр("ru = 'На лицевые счета';
																			|en = 'To personal accounts'"));
	ДоступныеОперации.Добавить(Операции.ВыплатаЗарплатыЧерезКассу, НСтр("ru = 'Через кассу';
																		|en = 'Via cash desk'"));
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОперацийЛокализация()
	
	УточнитьСписокХозяйственныхОпераций();
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСерверЛокализация.УстановитьВидимостьОперацииПеречислениеТаможне(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСерверЛокализация.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеПоказателямиПлатежаВБюджет()
	
	ПлатежиВБюджет.УстановитьНадписьРеквизитовПлатежаВБюджет(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовВидаДохода()
	
	Элементы.КодВидаДохода.СписокВыбора.Очистить();
	Для каждого ЭлементСписка Из ПлатежиВБюджетКлиентСервер.КодыВидовДохода(
		Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		Или Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) Цикл
		Элементы.КодВидаДохода.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПлательщика()
	
	РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(Объект);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлательщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьРеквизитыПлательщика()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НадписьРеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.НадписьРеквизитыПлательщика(
			Объект.ИННПлательщика, Объект.КПППлательщика, Объект.ТекстПлательщика, ЮрФизЛицо, Объект.ХозяйственнаяОперация);
	Иначе
		НадписьРеквизитыПлательщика = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыБюджетаНаСервере()
	
	НомерСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "НомерСчета");
	Ошибка = ПлатежиВБюджетКлиентСервер.ПроверитьУИН(Объект.ИдентификаторПлатежа,
		ПлатежиВБюджетКлиентСервер.АдминистраторНачисленияФедеральныйОрганГосударственнойВласти(НомерСчетаКонтрагента));
		
	Если Не ПустаяСтрока(Ошибка) Тогда
		ШаблонТекста = НСтр("ru = '%1
			|Если УИН достоверно не известен, не указывайте его (очистите поле).';
			|en = '%1 
			|If Payment ID is unknown, leave the field blank (clear the field).'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Ошибка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка, , "ИдентификаторПлатежа", "Объект");
	КонецЕсли;
	
	ДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(Объект.ИдентификаторПлатежа, Объект.Ссылка);
	
	Если ДублиУИН.Количество() > 0 Тогда
		Для каждого ОписаниеОшибки Из ДублиУИН Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОписаниеОшибки.ТекстОшибки,, "ИдентификаторПлатежа", "Объект");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВедомостиПоОстаткамНаСервере()
	
	Если Не ИспользоватьНачислениеЗарплатыУТ Тогда
		ВызватьИсключение НСтр("ru = 'Не используется начисление зарплаты';
								|en = 'Salary accounting is not used'");
	КонецЕсли;
	
	//++ НЕ УТ
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперацияПоЗарплате);
	Если Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		СтруктураПараметров.Вставить("МассивОпераций", МассивОпераций);
	КонецЕсли;

	Если Объект.ХозяйственнаяОперацияПоЗарплате =
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту") Тогда
		СтруктураПараметров.Вставить("РасчетныйСчет", Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Заявка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ИсключатьОплаченные");
	СтруктураПараметров.Вставить("ИсключатьВключенныеВЗаявки");
	СтруктураПараметров.Вставить("ЗаполнятьСуммуПоДокументу");
	
	ДенежныеСредстваСерверЛокализация.ЗаполнитьПоВедомостямКОплате(Объект.РасшифровкаПлатежа, СтруктураПараметров);
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	//-- НЕ УТ
	
	#Область УХ_Встраивание
	ПриИзмененииВедомостиНаЗарплату();
	#КонецОбласти
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьВедомостиВРасшифровкеПлатежа(Объект)
	
	Для каждого ТекСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		ТекСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
		ТекСтрокаРасшифровки.Ведомость = Неопределено;
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТ

&НаСервере
Процедура ЗаполнитьПоДоговору(Ссылка)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ПлатежиПо275ФЗ, ДоговорСУчастникомГОЗ, ОплатаРасходовПоТарифамСГосрегулированием,
		|БанковскийСчет, ДоговорыСЗаказчиками, ГосударственныйКонтракт,
		|ИностранныйИсполнительВУтвержденномПеречнеГОЗ");
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, "ПлатежиПо275ФЗ, ДоговорСУчастникомГОЗ, БанковскийСчет");
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, "ОплатаРасходовПоТарифамСГосрегулированием, ГосударственныйКонтракт, ИностранныйИсполнительВУтвержденномПеречнеГОЗ");
	
	Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
	ДоговорКонтрагента = Ссылка;
	
	УстановитьОграничениеФормыОплаты275ФЗ();
	ПроверитьЗаполнитьТипПлатежа275ФЗ();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Функция РеквизитыПодтверждающегоДокумента(ПодтверждающийДокумент)
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодтверждающийДокумент, "Зашифрован, Редактирует");
	
	ФайлРедактируется = ЗначениеЗаполнено(РеквизитыОбъекта.Редактирует)
		И РеквизитыОбъекта.Редактирует = ПользователиКлиентСервер.ТекущийПользователь();
	РеквизитыОбъекта.Вставить("ФайлРедактируется", ФайлРедактируется);
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат РаботаСФайлами.ДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции
//-- НЕ УТ

&НаСервере
Процедура УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду()
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Объект.СтатусСоставителя = "01";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		
		Объект.СтатусСоставителя = "06";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
		
		Объект.СтатусСоставителя = "08";
		Объект.ПоказательОснования = "0";
		Объект.ПоказательПериода = "0";
		Объект.ПоказательНомера = "0";
		Объект.ПоказательДаты = "0";
		Объект.ПоказательТипа = ?(ПрименениеПриказа126н, "", "0");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормаОплатыОграниченаЛокализация() // Одним значением
	
	ДопустимаяФормаОплаты = ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ОграничениеФормыОплаты(Объект.ХозяйственнаяОперация);
	
	Возврат (ДопустимаяФормаОплаты <> Неопределено);
	
КонецФункции

//++ НЕ УТ

&НаСервере
Процедура ПроверитьЗаполнитьТипПлатежа275ФЗ()
	
	Если Не ЗначениеЗаполнено(Объект.ТипПлатежаФЗ275) Тогда
		
		ПараметрыПлатежа = Новый Структура;
		ПараметрыПлатежа.Вставить("ПлатежиПо275ФЗ", Объект.ПлатежиПо275ФЗ);
		ПараметрыПлатежа.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыПлатежа.Вставить("ДоговорСУчастникомГОЗ", Объект.ДоговорСУчастникомГОЗ);
		ПараметрыПлатежа.Вставить("ОплатаРасходовПоТарифамСГосрегулированием", ОплатаРасходовПоТарифамСГосрегулированием);
		ПараметрыПлатежа.Вставить("ИностранныйИсполнительВУтвержденномПеречнеГОЗ", ИностранныйИсполнительВУтвержденномПеречнеГОЗ);
		ПараметрыПлатежа.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	
		ДоступныеТипыПлатежа275ФЗ = Справочники.ТипыПлатежейФЗ275.ДоступныеТипыПлатежа275ФЗ(ПараметрыПлатежа);
		Если ДоступныеТипыПлатежа275ФЗ.Количество() Тогда
			Объект.ТипПлатежаФЗ275 = ДоступныеТипыПлатежа275ФЗ[0];
			ЗаполнитьПодтверждающиеДокументыНаСервере();
		Иначе
			Объект.ТипПлатежаФЗ275 = Неопределено;
		КонецЕсли;
		
		ТипПлатежаФЗ275ПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыФайлНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ОбновитьСписокВладельцевПодтверждающихДокументов();
		
		ДополнительныеПараметрыВыбораВладельца = Новый Структура("Действие", Результат.Значение);
		Если ВладельцыПодтверждающихДокументов.Количество() > 1 Тогда
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(ВладельцыПодтверждающихДокументов.ВыгрузитьЗначения());
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВладельцаФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметрыВыбораВладельца);
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор договора для создания файла';
																		|en = 'Select a contract for creating a file'")); 
			
		ИначеЕсли ВладельцыПодтверждающихДокументов.Количество() = 1 Тогда
			
			ВыборВладельцаФайлаЗавершение(Новый Структура("Значение", ВладельцыПодтверждающихДокументов[0].Значение), ДополнительныеПараметрыВыбораВладельца);
			
		Иначе
			Если Результат.Значение = "ДобавлениеФайлаСДиска" Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'В документе не указан ни один договор. Добавление файла невозможно.';
												|en = 'No contract is specified in the document. Cannot add a file.'"));
			ИначеЕсли Результат.Значение = "ВыборИзПрисоединенныхФайлов" Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'В документе не указан ни один договор. Выбор файла невозможен.';
												|en = 'No contract is specified in the document. Cannot select a file.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВладельцаФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВыбранныйВладелецФайла = Результат.Значение;
		
		Если ДополнительныеПараметры.Действие = "ДобавлениеФайлаСДиска" Тогда
			
			ИдентификаторФайла = Новый УникальныйИдентификатор;
			ДобавляетсяФайлПодтверждающегоДокумента = Истина;
			РаботаСФайламиКлиент.ДобавитьФайлы(ВыбранныйВладелецФайла, ИдентификаторФайла);
			
		ИначеЕсли ДополнительныеПараметры.Действие = "ВыборИзПрисоединенныхФайлов" Тогда
			
			РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ВыбранныйВладелецФайла, Элементы.ПодтверждающиеДокументыФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВладельцевПодтверждающихДокументов()
	
	ВладельцыПодтверждающихДокументов.Очистить();
	
	ВладелецРасшифровка = Неопределено;
	ВладелецДоговорСЗаказчиком = Неопределено;
	
	ОбъектыРасшифровкиПлатежа = ОбъектыРасшифровкиПлатежа();
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл 
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКредитаДепозита) Тогда
			
			ВладельцыПодтверждающихДокументов.Добавить(СтрокаРасшифровки.ДоговорКредитаДепозита);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
			
			ОбъектРасчетов = ОбъектыРасшифровкиПлатежа.Получить(СтрокаРасшифровки.ОбъектРасчетов);
			
			Если (ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				Или ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")) Тогда
				
				ВладельцыПодтверждающихДокументов.Добавить(ОбъектРасчетов);
				
			ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				
				ВладельцыПодтверждающихДокументов.Добавить(ДоговорКонтрагента);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ТипПлатежаФЗ275 = ПредопределенноеЗначение("Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю")
		Или Объект.ТипПлатежаФЗ275 = ПредопределенноеЗначение("Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю")
		Или Объект.ТипПлатежаФЗ275 = ПредопределенноеЗначение("Справочник.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств") Тогда
		
		Для каждого СтрокаДоговоровСЗаказчиками Из Объект.ДоговорыСЗаказчиками Цикл 
			
			Если ЗначениеЗаполнено(СтрокаДоговоровСЗаказчиками.ДоговорСЗаказчиком) Тогда
				ВладелецДоговорСЗаказчиком = СтрокаДоговоровСЗаказчиками.ДоговорСЗаказчиком;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВладелецДоговорСЗаказчиком) Тогда
				ВладельцыПодтверждающихДокументов.Добавить(ВладелецДоговорСЗаказчиком);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбъектыРасшифровкиПлатежа()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК Объект,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|ИЗ 
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка В (&МассивОбъектовРасчетов)");
	Запрос.УстановитьПараметр("МассивОбъектовРасчетов", Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ОбъектРасчетов,Выборка.Объект);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//-- НЕ УТ

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ЗаполнитьПоДоговоруГОЗ()
	
	ДоговорыФЗ275 = Новый Массив;
	ОбъектыРасшифровкиПлатежа = ОбъектыРасшифровкиПлатежа();
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
			
			ОбъектРасчетов = ОбъектыРасшифровкиПлатежа.Получить(СтрокаРасшифровки.ОбъектРасчетов);
			
			Если (ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				Или ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"))
				И ДоговорыФЗ275.Найти(ОбъектРасчетов) = Неопределено Тогда
				ДоговорыФЗ275.Добавить(ОбъектРасчетов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоговорыФЗ275.Количество() = 1 Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорыФЗ275[0], "ПлатежиПо275ФЗ") Тогда
			ЗаполнитьПоДоговору(ДоговорыФЗ275[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаНДСНалоговогоАгента(АдресТаблицыНалоговыйАгентНДСВХранилище)
	
	ТаблицаНалоговыйАгентНДС = ПолучитьИзВременногоХранилища(АдресТаблицыНалоговыйАгентНДСВХранилище);
	
	Если ТаблицаНалоговыйАгентНДС = Неопределено
		ИЛИ ТаблицаНалоговыйАгентНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяРасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	Если ТекущаяРасшифровкаПлатежа.Количество() Тогда
		СтрокаЗаполнения = ТекущаяРасшифровкаПлатежа[0];
	Иначе
		СтрокаЗаполнения = Неопределено;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();

	Для Каждого СтрокаНалоговогоПлатежа Из ТаблицаНалоговыйАгентНДС Цикл
		СтрокаРасшифровкиПлатежа = Объект.РасшифровкаПлатежа.Добавить();
		Если СтрокаЗаполнения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиПлатежа, СтрокаЗаполнения);
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.Сумма = СтрокаНалоговогоПлатежа.Сумма;
		СтрокаРасшифровкиПлатежа.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка");
		СтрокаРасшифровкиПлатежа.ТипСтатьи = 3;
		
		НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		НоваяНастройка.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Объект.ТипНалога);
		НоваяНастройка.Субконто1 = СтрокаНалоговогоПлатежа.Контрагент;
		НоваяНастройка.Субконто2 = СтрокаНалоговогоПлатежа.Договор;
		НоваяНастройка.Субконто3 = СтрокаНалоговогоПлатежа.ДокументРасчетов;
		СтрокаРасшифровкиПлатежа.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НоваяНастройка, ЭтотОбъект);
		
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	КонецЦикла;
	НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтотОбъект, "Объект.РасшифровкаПлатежа");
	ПереключательРасшифровки = ?(Объект.РасшифровкаПлатежа.Количество() > 1, 1, 0);
	УправлениеЭлементамиФормы();
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер()
	
	МассивОпераций = ДенежныеСредстваСерверЛокализация.МассивОперацийПеречисленияВБюджет();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		
		Периодичность = "МС";
		НомерПериода = Месяц(ТекущаяДата);
		ГодПериода = Год(ТекущаяДата);
		Объект.ПоказательПериода = Периодичность
					+ "." 
					+ ?(СтрДлина(СокрЛП(НомерПериода)) = 1, "0" + НомерПериода, НомерПериода)
					+ "." 
					+ СтрЗаменить(Строка(ГодПериода), Символы.НПП, "");
				
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		Объект.ПоказательПериода = "";
		
	ИначеЕсли МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		
	Иначе
		Объект.ПеречислениеВБюджет = Ложь;
	КонецЕсли;
	
	УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРанееСовершенномуПлатежу(РезультатВыбора)
	
	Объект.ПеречислениеВБюджет = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		Объект.ТипНалога = РезультатВыбора.АналитикаАктивовПассивов;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора,,);
	Если Не Объект.РасшифровкаПлатежа.Количество() Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, НоваяСтрока, "Объект.РасшифровкаПлатежа");
	КонецЕсли;
	
	Для Каждого СтрокаПлатежа Из Объект.РасшифровкаПлатежа Цикл
		СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = РезультатВыбора.СтатьяДвиженияДенежныхСредств;
	КонецЦикла;
	//++ НЕ УТ
	Если Не ОплатаНДСВБюджетПоОтдельнымОперациям Тогда
		НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, РезультатВыбора, "СчетУчета, Субконто1, Субконто2, Субконто3");
		Объект.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НоваяНастройка, ЭтотОбъект);
		ПараметрыНастройки = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыНастройкиСчетовУчета(
			Объект.ХозяйственнаяОперация, Объект.ТипНалога);
		НастройкаСчетовУчетаСервер.ПриИзмененииПараметровНастройки(ЭтотОбъект, ПараметрыНастройки);
	КонецЕсли;
	//-- НЕ УТ
	
	УправлениеПоказателямиПлатежаВБюджет();
	УстановитьНадписьРеквизитыПлательщика();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВалютныйПлатежЛокализация()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ВалютныйПлатеж = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ВалютаСчетаПолучателя) Тогда
			ВалютныйПлатеж = (ВалютаСчетаПолучателя <> ВалютаРеглУчета);
		ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
			ВалютныйПлатеж = (Объект.Валюта <> ВалютаРеглУчета);
		Иначе
			ВалютныйПлатеж = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормыОплатыПоХозяйственнойОперацииЛокализация()
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ЗаполнитьФормуОплатыПоХозОперации(СтруктураДанныхЗаполнения);
	
	Если СтруктураДанныхЗаполнения.Свойство("ФормаОплатыНаличная")
		И СтруктураДанныхЗаполнения.Свойство("ФормаОплатыБезналичная")
		И СтруктураДанныхЗаполнения.Свойство("ФормаОплатыПлатежнаяКарта")
		И СтруктураДанныхЗаполнения.Свойство("ФормаОплатыЗаявки") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхЗаполнения,
			"ФормаОплатыНаличная, ФормаОплатыБезналичная, ФормаОплатыПлатежнаяКарта, ФормаОплатыЗаявки");
	КонецЕсли;
	
КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Контрагент, // Искать по ссылке
		ВидКонтрагентаСПАРК(Объект.Контрагент),
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаСервере
Функция ВидКонтрагентаСПАРК(Контрагент)
	
	Возврат Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(Контрагент);
	
КонецФункции
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

#КонецОбласти

#КонецОбласти

#Область Инициализация

#Если НаСервере Тогда

Если Не ПодключеныОбработчикиЛокализация И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
	
	ПодключеныОбработчикиЛокализация = Истина;
	
	ПодключаемыеОбработчикиСобытийФормы = Новый Массив;
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриСозданииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриЧтенииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриОткрытии");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ОбработкаВыбора");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПередЗаписьюНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ОбработкаОповещения");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПослеЗаписиНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПослеЗаписи");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийФормы Цикл
		УстановитьДействие(Обработчик, "Подключаемый_" + Обработчик + "Локализация");
	КонецЦикла;
	
	КомандыЛокализация = Новый Массив;
	КомандыЛокализация.Добавить("ПодборПоОстаткам");
	
	Для каждого Обработчик Из КомандыЛокализация Цикл
		Команда = Команды.Найти(Обработчик);
		Если Команда <> Неопределено Тогда
			Команда.Действие = "Подключаемый_" + Обработчик + "Локализация";
		КонецЕсли;
	КонецЦикла;
	
	ПодключаемыеОбработчикиСобытийЭлементов = Новый Соответствие; // Ключ - Элемент, Значение - Событие
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("ХозяйственнаяОперация",           "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("Организация",                     "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("СуммаДокумента",                  "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("Валюта",                          "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("ХозяйственнаяОперацияПоЗарплате", "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("БанковскийСчет",                  "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("Контрагент",                      "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("БанковскийСчетКонтрагента",       "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("ПланированиеСуммы",               "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("РасшифровкаПлатежа",              "Выбор");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("РасшифровкаПлатежаДоговорКредитаДепозита",      "ПриИзменении");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("РасшифровкаБезРазбиенияДоговорКредитаДепозита", "ПриИзменении");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийЭлементов Цикл
		Если Элементы.Найти(Обработчик.Ключ) <> Неопределено Тогда
			Элементы[Обработчик.Ключ].УстановитьДействие(
				Обработчик.Значение, "Подключаемый_" + Обработчик.Ключ + Обработчик.Значение + "Локализация");
		КонецЕсли;
	КонецЦикла;
	
КонецЕсли;

#КонецЕсли

#КонецОбласти
 
