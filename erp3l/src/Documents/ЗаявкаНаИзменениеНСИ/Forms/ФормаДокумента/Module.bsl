#Область УниверсальныеПроцессыСогласование

&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

#КонецОбласти

// Формирует и изменяет заголовок формы документа.
&НаСервере
Процедура ВывестиЗаголовок()
	Заголовок = "(" + Строка(РеквизитСтатусОбъекта(ЭтаФорма)) + ")";
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	ТекущийПользователь=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			
			ТаблицаАналитики=Параметры.Основание.Метаданные().ПолноеИмя();
				
			ТипОбъектаКонсолидации="Справочник";
			ИмяОбъектаМетаданных=СтрЗаменить(ТаблицаАналитики,"Справочник.","");
				
					
			Объект.ТипОбъектаКонсолидации=ТипОбъектаКонсолидации;
			Объект.ИмяОбъектаМетаданных=ИмяОбъектаМетаданных;
			Объект.ИзменяемыйОбъект=Параметры.Основание;
			Объект.СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию(ИмяОбъектаМетаданных,,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
			Если Параметры.Основание.НСИ_НеАктивный Тогда
				
				Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта;
				
			Иначе
				
				Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта;
				
			КонецЕсли;
					
		Иначе
			
			ЗаполнитьЗначенияСвойств(Объект,Параметры);
			
		КонецЕсли;
		
		Объект.Ответственный=ТекущийПользователь;
				
	КонецЕсли;
	
	
	Элементы.ИмяОбъектаМетаданных.СписокВыбора.Очистить();
	
	ПриИзмененииОбъектаМетаданных();
	#Область УниверсальныеПроцессыСогласование
		ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	
	Если РеквизитСтатусОбъекта(ЭтаФорма) = Перечисления.СостоянияСогласования.Утверждена Тогда
		
		Если НЕ ПользовательЯвляетсяОтветственным Тогда
			
			ЭтаФорма.ТолькоПросмотр=Истина;
			
		Иначе
			
			Элементы.ДанныеОбъекта.ТолькоПросмотр=Истина;
			Элементы.ВидОперации.ТолькоПросмотр=Истина;
			
		КонецЕсли;
		
	ИначеЕсли РеквизитСтатусОбъекта(ЭтаФорма) = Перечисления.СостоянияСогласования.НаУтверждении Тогда
		
		Если ПользовательЯвляетсяОтветственным Тогда
			
			Элементы.ДанныеОбъекта.ТолькоПросмотр=Истина;
			Элементы.ВидОперации.ТолькоПросмотр=Истина;

		ИначеЕсли НЕ (ТекущийПользователь=Объект.Ответственный) Тогда
			
			ЭтаФорма.ТолькоПросмотр=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ВывестиЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ОбразцовыйОбъект.Видимость=(Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.УдалениеДубликатаОбъекта);
	
	Если Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта Тогда
		
		Элементы.ИзменяемыйОбъект.Заголовок=Нстр("ru = 'Регистрируемый объект'");
		Элементы.ИсходноеЗначение.Заголовок=Нстр("ru = 'Значение реквизита'");
		Элементы.НовоеЗначение.Видимость=Ложь;
		
	ИначеЕсли Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.УдалениеОбъекта Тогда
		
		Элементы.ИзменяемыйОбъект.Заголовок=Нстр("ru = 'Удаляемый объект'");
		Элементы.ИсходноеЗначение.Заголовок="Значение";
		Элементы.НовоеЗначение.Видимость=Ложь;
		
	ИначеЕсли Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта Тогда
		
		Элементы.ИзменяемыйОбъект.Заголовок=Нстр("ru = 'Изменяемый объект'");
		Элементы.ИсходноеЗначение.Заголовок=Нстр("ru = 'Исходное значение'");
			
		Элементы.НовоеЗначение.Видимость=Истина;
		Элементы.НовоеЗначение.Заголовок=Нстр("ru = 'Новое значение'");
		Элементы.НовоеЗначение.ТолькоПросмотр=Ложь;
		
	ИначеЕсли Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.УдалениеДубликатаОбъекта Тогда
		
		Элементы.ИзменяемыйОбъект.Заголовок="Дубликат";
		Элементы.ИсходноеЗначение.Заголовок="Образец";
		
		Элементы.НовоеЗначение.Видимость=Истина;
		Элементы.НовоеЗначение.Заголовок="Дубликат";
		Элементы.НовоеЗначение.ТолькоПросмотр=Истина;
		
	КонецЕсли;	
	
	Если ПользовательЯвляетсяОтветственным Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаУтвердить.Заголовок="Утвердить";
	Иначе
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаУтвердить.Заголовок=Нстр("ru = 'На утверждение'");
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость() 

// Выполняет процедуры на форме, связанные с изменением статуса объекта.
&НаСервере
Процедура ОпределитьСостояние()
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	ВывестиЗаголовок();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОбъектаМетаданных()

	//Определим,нужны ли организации
	 
	Элементы.Организация.Доступность = Объект.СправочникБД.РазделятьПоОрганизациям;
		
	Объект.ИмяОбъектаМетаданных = Объект.СправочникБД.Наименование;
	
	РеквизитыДляПоиска.Очистить();
	
	ТабРеквизитыДляПоиска=РеквизитФормыВЗначение("РеквизитыДляПоиска");
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаДанные.Справочники.Найти(Объект.ИмяОбъектаМетаданных) = Неопределено Тогда
		Возврат;		// Нет такого справочника.
	Иначе	
		ОбъектМетаДанных = МетаДанные.Справочники[Объект.ИмяОбъектаМетаданных];
	КонецЕсли;
	
	Если ОбъектМетаДанных.ДлинаНаименования>0 Тогда
		НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
		НоваяСтрока.ИмяРеквизита="Наименование";
		НоваяСтрока.Синоним="Наименование";
		НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ОбъектМетаДанных.ДлинаНаименования);
	КонецЕсли;
	
	Если ОбъектМетаДанных.ДлинаКода>0 Тогда
		
		НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
		НоваяСтрока.ИмяРеквизита="Код";
		НоваяСтрока.Синоним="Код";
		
		Если ОбъектМетаДанных.ТипКода=Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
			
			НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(ОбъектМетаДанных.ДлинаКода);
			
		Иначе
			
			НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ОбъектМетаДанных.ДлинаКода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоляПоРеквизитам(ОбъектМетаДанных,ТабРеквизитыДляПоиска);			
	ОтборПоВладельцу=(ОбъектМетаДанных.Владельцы.Количество()>0);
	Иерархический=ОбъектМетаДанных.Иерархический;
	
			
	ТаблицаАналитики="Справочник."+ОбъектМетаДанных.Имя;
	ОтборПоВладельцу=(ОбъектМетаДанных.Владельцы.Количество()>0);
	ЗначениеВРеквизитФормы(ТабРеквизитыДляПоиска,"РеквизитыДляПоиска");
		
	ТаблицаИзменений.Очистить();
	
	Для Каждого Строка ИЗ ТабРеквизитыДляПоиска Цикл
		
		НоваяСтрока=ТаблицаИзменений.Добавить();
		НоваяСтрока.ИмяРеквизита=Строка.ИмяРеквизита;
		
	КонецЦикла;
	

	Согласующий =  УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(Объект.Ссылка, Объект.Организация,Объект.СправочникБД,"Согласующий");
	Инициатор=УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(Объект.Ссылка, Объект.Организация,Объект.СправочникБД,"Исполнитель");			
		
	Объект.Согласующий = Согласующий;
	
	//ПользовательЯвляетсяОтветственным=ОбщегоНазначенияУХ.ТекущийПользовательЯвляетсяОтветственным(Объект.ТипОбъектаКонсолидации,Объект.ИмяОбъектаМетаданных);
	
	Если ЗначениеЗаполнено(Объект.ИзменяемыйОбъект) И Объект.ИзменяемыйОбъект.Метаданные().ПолноеИмя()=ТаблицаАналитики Тогда
		
		Если Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.УдалениеДубликатаОбъекта Тогда
			
			ЗаполнитьРеквизитыОбъекта(Объект.ОбразцовыйОбъект,"ИсходноеЗначение");
			ЗаполнитьРеквизитыОбъекта(Объект.ИзменяемыйОбъект,"НовоеЗначение");
			
		Иначе
			
			ЗаполнитьРеквизитыОбъекта(Объект.ИзменяемыйОбъект,"ИсходноеЗначение");
			
		КонецЕсли;
		
	Иначе
		
		Объект.ИзменяемыйОбъект=Неопределено;
		Объект.ОбразцовыйОбъект=Неопределено;
		Объект.ИзменениеРеквизитов.Очистить();
		
	КонецЕсли;
	ОпределитьСостояниеОбъекта(Истина);		
КонецПроцедуры // ПриИзмененииПотребителяРасчета()

&НаСервере
Процедура ЗаполнитьПоляПоРеквизитам(ОбъектМетаданных,ТабРеквизитыДляПоиска)
	
	Для Каждого Реквизит ИЗ ОбъектМетаданных.Реквизиты Цикл
				
		НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
		НоваяСтрока.ИмяРеквизита=Реквизит.Имя;
		НоваяСтрока.Синоним=Реквизит.Синоним;
		НоваяСтрока.ТипЗначения=Реквизит.Тип;
		
		Если НоваяСтрока.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0) Тогда
			
			НоваяСтрока.НеограниченнаяДлина=Истина;
			
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоляПоРеквизитам()

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(Ссылка,ИмяКолонки)
				
	Если Не ЗначениеЗаполнено(ТаблицаАналитики) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ";
	
	Для Каждого СтрРеквизит ИЗ РеквизитыДляПоиска Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|ТаблицаАналитики."+СтрРеквизит.ИмяРеквизита+" КАК "+СтрРеквизит.ИмяРеквизита+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ТаблицаАналитики.ПометкаУдаления КАК ПометкаУдаления	
	|ИЗ "+ТаблицаАналитики+" КАК ТаблицаАналитики
	|ГДЕ ТаблицаАналитики.Ссылка=&Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();	
	Результат.Следующий();
		
	Для Каждого Строка ИЗ ТаблицаИзменений Цикл 
		
		Строка[ИмяКолонки]=Результат[Строка.ИмяРеквизита];
				
		Если Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта Тогда
			
			Строка.НовоеЗначение=Результат[Строка.ИмяРеквизита];

		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта Тогда
		
		Для Каждого СтрИзменение ИЗ Объект.ИзменениеРеквизитов Цикл
			
			СтрРеквизит=ТаблицаИзменений.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрИзменение.ИмяРеквизита))[0];
			СтрРеквизит.ИсходноеЗначение=СтрИзменение.ИсходноеЗначение;
			СтрРеквизит.НовоеЗначение=СтрИзменение.НовоеЗначение;
			
		КонецЦикла;
		
	КонецЕсли;
					
КонецПроцедуры // 

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ПриИзмененииВидаОперации();
		 
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперации()
	
	Объект.ИзменяемыйОбъект = Неопределено;
	ПриИзмененииОбъектаМетаданных();
    УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииВидаОперации() 

&НаКлиенте
Процедура ОбразцовыйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Не ЗначениеЗаполнено(ТаблицаАналитики) Тогда
	   Возврат;
   КонецЕсли;
   
   СтруктураПараметров=Новый Структура;
   СтруктураОтбора=Новый Структура;
	
	Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		СтруктураОтбора.Вставить("Владелец",Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОбразцовыйОбъект) Тогда
		СтруктураПараметров.Вставить("НачальноеЗначениеВыбора",Объект.ОбразцовыйОбъект);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
			
	ОткрытьФорму(ТаблицаАналитики+".ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Не ЗначениеЗаполнено(ТаблицаАналитики) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта") Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТаблицаАналитики",ТаблицаАналитики);
		
		Оповещение = Новый ОписаниеОповещения("ИзменяемыйОбъектНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЗаявкаНаИзменениеНСИ.Форма.ФормаВыбораЭлементаДляРегистрации",
						СтруктураПараметров,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
		
		СтруктураПараметров=Новый Структура;
		СтруктураОтбора=Новый Структура;
		
				
		Если ЗначениеЗаполнено(Объект.ИзменяемыйОбъект) Тогда
			СтруктураПараметров.Вставить("НачальноеЗначениеВыбора",Объект.ИзменяемыйОбъект);
		КонецЕсли;
		
		СтруктураОтбора.Вставить("НСИ_НеАктивный", Ложь);
		
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		
		ОткрытьФорму(ТаблицаАналитики + ".ФормаВыбора", СтруктураПараметров, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыйОбъектНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Объект.ИзменяемыйОбъект=Результат;
    ЗаполнитьРеквизитыОбъекта(Объект.ИзменяемыйОбъект,"ИсходноеЗначение");

КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыйОбъектПриИзменении(Элемент)
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийИзмененияНСИ.УдалениеДубликатаОбъекта") Тогда
		
		ЗаполнитьРеквизитыОбъекта(Объект.ИзменяемыйОбъект,"НовоеЗначение");
		
	Иначе
		
		ЗаполнитьРеквизитыОбъекта(Объект.ИзменяемыйОбъект,"ИсходноеЗначение");

	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ОбразцовыйОбъектПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыОбъекта(Объект.ОбразцовыйОбъект,"ИсходноеЗначение");
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	Записать();
	УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(Объект.Ссылка);	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Утвердить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	Иначе
		// Ссылка есть, можно переводить состояние.
	КонецЕсли;

	Если ПользовательЯвляетсяОтветственным Тогда
		
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеУтверждена(Объект.Ссылка);			
		
	Иначе
		
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеНаУтверждении(Объект.Ссылка);			
		
		Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта") Тогда
			
			Объект.ИзменениеРеквизитов.Очистить();
			
			Для Каждого Строка ИЗ ТаблицаИзменений Цикл
				
				Если НЕ Строка.ИсходноеЗначение=Строка.НовоеЗначение Тогда
					
					НоваяСтрока=Объект.ИзменениеРеквизитов.Добавить();
					НоваяСтрока.ИмяРеквизита=Строка.ИмяРеквизита;
					НоваяСтрока.ИсходноеЗначение=Строка.ИсходноеЗначение;
					НоваяСтрока.НовоеЗначение=Строка.НовоеЗначение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Записать();	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаМетаданныхПриИзменении(Элемент)
	
	ПриИзмененииОбъектаМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзмененийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭлементУправления=Элементы.ТаблицаИзменений.ПодчиненныеЭлементы.НовоеЗначение;
	
	СтрРеквизит=РеквизитыДляПоиска.НайтиСтроки(Новый Структура("ИмяРеквизита",Элементы.ТаблицаИзменений.ТекущиеДанные.ИмяРеквизита))[0];
	ЭлементУправления.ОграничениеТипа=СтрРеквизит.ТипЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзмененийПриИзменении(Элемент)
	
	СтрокаИзменений=Элементы.ТаблицаИзменений.ТекущиеДанные;
	
	Если НЕ СтрокаИзменений.ИсходноеЗначение=СтрокаИзменений.НовоеЗначение Тогда
		
		СтрокиОбъект=Объект.ИзменениеРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрокаИзменений.ИмяРеквизита));
		
		Если СтрокиОбъект.Количество()=0 Тогда
			
			СтрокаДанные=Объект.ИзменениеРеквизитов.Добавить();
			
		Иначе
			
			СтрокаДанные=СтрокиОбъект[0];
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДанные,СтрокаИзменений);
		
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СправочникБДПриИзменении(Элемент)
	
	ПриИзмененииОбъектаМетаданных();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "МаршрутИнициализирован" Тогда
		
		ПриИнициализацииМаршрута()	
		
	КонецЕсли;
	
	Если ИмяСобытия = "УтвердитьЭтап"  Тогда
		
		ПриУтвержденииЭтапа();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОтклонитьЭтап" Тогда
		
		ПриОтклоненииЭтапа();
		
	КонецЕсли;

	Если ИмяСобытия = "ОбъектСогласован" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояние();
		#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбъектОтклонен" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояние();
		#КонецОбласти			
	ИначеЕсли ИмяСобытия = "ОбновитьМоиЗадачиИОповещения" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояние();
		#КонецОбласти			
	ИначеЕсли ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		#Область УниверсальныеПроцессыСогласование
		ОпределитьСостояние();
		#КонецОбласти					
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

Процедура ОрганизацияПриИзмененииСервер()
	
	Согласующий =  УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(Объект.Ссылка, Объект.Организация,Объект.СправочникБД,"Согласующий");
	
    Объект.Согласующий = Согласующий;
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли	
КонецПроцедуры


//ОБРАБОТЧИКИ СОГЛАСОВАНИЯ
&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

// Определяет наличие согласующего по ссылке СсылкаВход.
&НаСервереБезКонтекста
Функция ЕстьСогласующий(СсылкаВход)
	СогласующийРезультат = МодульУправленияПроцессамиУХ.ПолучитьОтветственногоЗаТипОбъекта(СсылкаВход,,,,,Истина);
	РезультатФункции = ЗначениеЗаполнено(СогласующийРезультат);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИнициализацииМаршрута()
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
    ЭтаФорма.Записать();

КонецПроцедуры

Процедура ПриУтвержденииЭтапа()
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
		
КонецПроцедуры

Процедура ПриОтклоненииЭтапа()
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма);
	ЭтаФорма.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		СтруктураПараметровОповещения = Новый Структура;
		СтруктураПараметровОповещения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметровОповещения);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение);	

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИЗакрытьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Закрыть();
	Иначе
		// Пользователь отказался. Не вызываем закрытие формы.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОтправитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
	Иначе
		// Пользователь отказался. Не вызываем закрытие формы.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИЗакрыть(Команда)
	ЭтаФорма.Записать();
	ТекСостояниеЗаявки = РеквизитСостояниеЗаявки(ЭтаФорма);
	ПроцессНеЗапущен = (Не ЗначениеЗаполнено(ТекСостояниеЗаявки)) ИЛИ (ТекСостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик")) ИЛИ (ТекСостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен"));
	Если ПроцессНеЗапущен Тогда
		Если ЕстьСогласующий(Объект.Ссылка) Тогда
			ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьИЗакрытьЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Для данной заявки не определён согласующий. Согласование не будет запущено. Продолжить закрытие?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	Иначе
		// Процесс уже запущен. Не отправляем.
	КонецЕсли;
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФорму(Команда)
	ЭтаФорма.Записать();
	ТекСостояниеЗаявки = РеквизитСостояниеЗаявки(ЭтаФорма);
	ПроцессНеЗапущен = (Не ЗначениеЗаполнено(ТекСостояниеЗаявки)) ИЛИ (ТекСостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик")) ИЛИ (ТекСостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен"));
	Если ПроцессНеЗапущен Тогда
		Если ЕстьСогласующий(Объект.Ссылка) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьИОтправитьЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Отправить заявку на согласование?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			// Нет согласующего. Не отправляем на согласование.
		КонецЕсли;
	Иначе
		// Процесс уже запущен. Не отправляем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Объект.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ОписаниеОбъекта = УправлениеНСИ.ПолучитьДанныеОбъектаНСИ(Объект.ИмяОбъектаМетаданных);
	
	СтруктураОбъекта=Новый Структура;
	
	Для Каждого Строка ИЗ ТаблицаИзменений Цикл
		
		СтруктураОбъекта.Вставить(Строка.ИмяРеквизита,Строка.НовоеЗначение);
		
	КонецЦикла; 
	
	Если ОписаниеОбъекта.УчитыватьГруппы Тогда
		
		СтруктураОбъекта.Вставить("ЭтоГруппа",Объект.ИзменяемыйОбъект.ЭтоГруппа);
		
	Иначе
		
		СтруктураОбъекта.Вставить("ЭтоГруппа",Ложь);
		
	КонецЕсли;
		
	ТекстОшибки=УправлениеНСИ.ПроверитьКонтролируемыеРеквизитыОбъекта(СтруктураОбъекта,ОписаниеОбъекта);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Отправка заявки на согласование изменений объекта %1 отменена по причине:
		|%2'"), Объект.ИзменяемыйОбъект, ТекстОшибки),Отказ,,СтатусСообщения.Важное);
		
		Возврат
		
	КонецЕсли;
		
КонецПроцедуры
