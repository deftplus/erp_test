
&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Поле = "Элементы.ИмяФайлаВыгрузки";
		СообщениеПользователю.Текст = Нстр("ru = 'Не выбрано имя файла'");
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаРежимБланка20.Видимость Тогда
		Параметры.ТаблДок = ПолучитьШаблонМакетаДляВыгрузки(Параметры.БланкОтчета);
	КонецЕсли;	
	
	Если ИмпортИзЭкселя Тогда
		
		Ексел = Неопределено;
		ВыгрузитьМакетвXLS();
		ЭтаФорма.Закрыть();
		
	Иначе
		
		Попытка
			ОписаниеОповещения=Новый ОписаниеОповещения("ЗакрытьПослеУспешнойЗаписи",ЭтотОбъект);
			Параметры.ТаблДок.НачатьЗапись(ОписаниеОповещения,ИмяФайлаВыгрузки);
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось записать файл!
			|Возможно, диск защищен от записи или на диске недостаточно места!'"));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПослеУспешнойЗаписи(Результат,ДопПараметры) Экспорт
	
	Если Результат=Истина Тогда
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры // ЗакрытьПослеУспешнойЗаписи() 
	
	
	


&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.ПолноеИмяФайла = ИмяФайлаВыгрузки;
	
	ДиалогВыбора.Фильтр = ?(ИмпортИзЭкселя, Нстр("ru = 'Файл формата MS Excel(*.xls)|*.xls'"), Нстр("ru = 'Файл формата 1С(*.mxl)|*.mxl'"));
		
	ОписаниеОткрытияФайла = Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаЗавершение", ЭтаФорма);
	ДиалогВыбора.Показать(ОписаниеОткрытияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ИмяФайлаВыгрузки=ВыбранноеЗначение[0];
			
	КонецЕсли;
	
КонецПроцедуры




&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаРежимБланка20.Видимость = Параметры.Режим20;
	КоличествоПериодов                     = 12;
	Периодичность                          = Перечисления.Периодичность.Месяц;
	ЗаполнитьРеквизитыПоВИБ(ВнешняяИБ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоВИБ(ВИБ)
	
	Если ЗначениеЗаполнено(ВИБ) Тогда
		ТипФайла         = ВИБ.ТипТабличногоДокумента;
		РасширенныйРежим = НЕ Элементы.ГруппаРежимБланка20.Видимость;
		Пароль           = ВИБ.Пароль;
		ИмяФайлаВыгрузки = ВИБ.НачалоИмени + ?(Прав(ВнешняяИБ.НачалоИмени, 1) = "\", "", "\") + СокрЛП(Параметры.БланкОтчета.Код) + ?(ТипФайла = Перечисления.ТипыВнешнихТабличныхДокументов.ФайлXLS, ".xls", ".mxl");
		ИмпортИзЭкселя   = ВИБ.ТипТабличногоДокумента = Перечисления.ТипыВнешнихТабличныхДокументов.ФайлXLS;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяИБПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыПоВИБ(ВнешняяИБ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ МАКЕТОВ
//

&НаСервере
Процедура ВернутьМассивСтруктурДляВычисляемыхПоказателей(МассивСтруктур, МассивБлокируемыхОбластей, МассивГруппировок)
	
	ТаблДок = Параметры.ТаблДок;
	ФорматЧисла = "ЧГ=";
	// Для вычисляемых показателей создадим формулы расчета на основании правила обработки.
	МассивОбработанныхВычисляемыхПоказателей = Новый Массив;
	
	Если ЗначениеЗаполнено(Параметры.ПравилоОбработки) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроцедурыРасчетов.ПроцедураВычисления КАК Процедура,
		|	ПроцедурыРасчетов.ПотребительРасчета КАК Показатель,
		|	ПроцедурыРасчетов.ПотребительРасчета.Код КАК КодПоказателя
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки
		|	И ПроцедурыРасчетов.СпособОбработки = ЗНАЧЕНИЕ(Перечисление.СпособыОбработкиПоказателейОтчетов.Вычисление)
		|	И НЕ ПроцедурыРасчетов.ПотребительРасчета.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ВидОтчета", Параметры.ВидОтчета);
		Запрос.УстановитьПараметр("ПравилоОбработки", Параметры.ПравилоОбработки);
			
		Выборка = Запрос.Выполнить().Выбрать();		
		Пока Выборка.Следующий() Цикл
			Если НЕ ПустаяСтрока(Выборка.Процедура) Тогда
				ОбластьПоказателя = ТаблДок.Области.Найти(СокрЛП(Выборка.КодПоказателя));
				ТекстПроцедуры = ВЫборка.Процедура;
				НайденыВсеОперанды = Истина;
				Если ОбластьПоказателя <> Неопределено Тогда
					СписокПоказателей = УправлениеОтчетамиУХ.РазобратьОперанды(Выборка.Процедура);
					Для Каждого ТекПоказатель Из СписокПоказателей Цикл
						ОбластьОперанда = ТаблДок.Области.Найти(ТекПоказатель.Значение);
						Если ОбластьОперанда = Неопределено Тогда
							НайденыВсеОперанды = Ложь;
							Прервать;
						КонецЕсли;
						
						ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, 
														"[" + ТекПоказатель.Значение + "]", 
														"R" + Формат(ОбластьОперанда.Верх, ФорматЧисла) + "C" + Формат(ОбластьОперанда.Лево, ФорматЧисла)
													);
						
					КонецЦикла;
					
					Если НайденыВсеОперанды Тогда
						МассивСтруктур.Добавить(Новый Структура("Верх, Лево, Процедура", ОбластьПоказателя.Верх, ОбластьПоказателя.Лево, "=" + ТекстПроцедуры));
						МассивОбработанныхВычисляемыхПоказателей.Добавить(Выборка.КодПоказателя);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыРаскрытия.Код КАК ГруппаРаскрытия,
	|	ПоказателиОтчетов.Код КАК ПоказателиОтчетов,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	СтрокиОтчетов.Код КАК СтрокаОтчета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|			ПО СтрокиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
	|		ПО ПоказателиОтчетов.Строка = СтрокиОтчетов.Ссылка
	|ГДЕ
	|	ГруппыРаскрытия.Владелец = &Владелец
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И НЕ СтрокиОтчетов.ПометкаУдаления
	|ИТОГИ
	|	МАКСИМУМ(ГруппаРаскрытия)
	|ПО
	|	СтрокаОтчета";

	Запрос.УстановитьПараметр("Владелец", Параметры.ВидОтчета);

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ИмяОбластиРаскрытия = СокрЛП(Выборка.ГруппаРаскрытия) + "_" + СокрЛП(Выборка.СтрокаОтчета);
		ИмяОбластиСтроки    = "Область_Строка_" + СокрЛП(Выборка.СтрокаОтчета);
		ОбластьРаскрытия       = ТаблДок.Области.Найти(ИмяОбластиРаскрытия);
		ОбластьРаскрытияПодвал = ТаблДок.Области.Найти(ИмяОбластиРаскрытия + "_Подвал");
		Если ОбластьРаскрытия <> Неопределено И ТаблДок.Области.Найти(ИмяОбластиСтроки) <> Неопределено И ОбластьРаскрытияПодвал <> Неопределено Тогда
			ВыборкаПоказателей = Выборка.Выбрать();
			Пока ВыборкаПоказателей.Следующий() Цикл
				ИмяОбластиПоказателя = СокрЛП(ВыборкаПоказателей.ПоказателиОтчетов);
				ОбластьВСтроке    = ТаблДок.Области.Найти(ИмяОбластиПоказателя);
				ОбластьВРаскрытии = ТаблДок.Области.Найти(ИмяОбластиРаскрытия + "_Показатель_" + ИмяОбластиПоказателя);
				ОбластьВПодвале   = ТаблДок.Области.Найти(ИмяОбластиРаскрытия + "_" + ИмяОбластиПоказателя + "_СУММА");
				Если МассивОбработанныхВычисляемыхПоказателей.Найти(ВЫборкаПоказателей.ПоказателиОтчетов) <> Неопределено Тогда
					
					Если ОбластьВСтроке <> Неопределено Тогда
						МассивБлокируемыхОбластей.Добавить(Новый Структура("Верх, Лево", ОбластьВСтроке.Верх, ОбластьВСтроке.Лево));
					КонецЕсли;
					
					Если ОбластьВРаскрытии <> Неопределено Тогда
						МассивБлокируемыхОбластей.Добавить(Новый Структура("Верх, Лево", ОбластьВРаскрытии.Верх, ОбластьВРаскрытии.Лево));
					КонецЕсли;
					
					Если ОбластьВПодвале <> Неопределено Тогда
						МассивБлокируемыхОбластей.Добавить(Новый Структура("Верх, Лево", ОбластьВПодвале.Верх, ОбластьВПодвале.Лево));
					КонецЕсли;
					
				ИначеЕсли ОбластьВСтроке <> Неопределено И ОбластьВРаскрытии <> Неопределено И ОбластьВПодвале <> Неопределено Тогда
					
					РасстояниеДо    = ОбластьВПодвале.Верх - ОБластьВРаскрытии.Верх;
					
					Если ВыборкаПоказателей.ВидИтога <> Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
						Если ВыборкаПоказателей.ВидИтога = ПЕречисления.ВидыИтоговПоказателя.Максимум Тогда
							ТекстФормулы = "=MAX";
						ИначеЕсли ВыборкаПоказателей.ВидИтога = ПЕречисления.ВидыИтоговПоказателя.Минимум Тогда
							ТекстФормулы = "=MIN";
						ИначеЕсли ВыборкаПоказателей.ВидИтога = ПЕречисления.ВидыИтоговПоказателя.Среднее Тогда
							ТекстФормулы = "=AVERAGE";
						ИначеЕсли ВыборкаПоказателей.ВидИтога = ПЕречисления.ВидыИтоговПоказателя.Сумма Тогда
							ТекстФормулы = "=SUM";
						Иначе
							ТекстФормулы = "=SUM";
						КонецЕсли;
						ТекстФормулы = ТекстФормулы + "(R[-" + Формат(РасстояниеДо, ФорматЧисла) + "]C:R[-1]C)";
						
						МассивСтруктур.Добавить(Новый Структура("Верх, Лево, Процедура", ОбластьВПодвале.Верх, ОбластьВПодвале.Лево, ТекстФормулы));
						МассивСтруктур.Добавить(Новый Структура("Верх, Лево, Процедура", ОбластьВСтроке.Верх, ОбластьВСтроке.Лево, "=R[" + Формат(ОбластьВПодвале.Верх - ОбластьВСтроке.Верх, ФорматЧисла) + "]C[" + Формат(ОбластьВПодвале.Лево - ОбластьВСтроке.Лево, ФорматЧисла) + "]"));
						
						МассивБлокируемыхОбластей.Добавить(Новый Структура("Верх, Лево", ОбластьВПодвале.Верх, ОбластьВПодвале.Лево));
						МассивБлокируемыхОбластей.Добавить(Новый Структура("Верх, Лево", ОбластьВСтроке.Верх, ОбластьВСтроке.Лево));
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОбластьРаскрытия <> Неопределено Тогда
			ОбластьШапкиРаскрытия = ТаблДок.Области.Найти(ИмяОбластиРаскрытия + "_Шапка");
			Если ОбластьШапкиРаскрытия <> Неопределено Тогда
				ВерхОбласти = ОбластьШапкиРаскрытия.Верх;
			Иначе
				ВерхОбласти = ОбластьРаскрытия.Верх;
			КонецЕсли;
			ОбластьПодвалаРаскрытия = ТаблДок.Области.Найти(ИмяОбластиРаскрытия + "_Подвал");
			Если ОбластьПодвалаРаскрытия <> Неопределено Тогда
				НизОбласти = ОбластьПодвалаРаскрытия.Низ;
			Иначе
				НизОбласти = ОбластьРаскрытия.Низ;
			КонецЕсли;
			МассивГруппировок.Добавить(Формат(ВерхОбласти, ФорматЧисла) + ":" + Формат(НизОбласти, ФорматЧисла));
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьОбщийМакет(ИмяМакета)
	
	Возврат ПолучитьОбщийМакет(ИмяМакета);
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьМакетвXLS() Экспорт
	
	Перем Ексел;
	Перем ИмяВременногоФайла;
	Перем МакетПроцедуры;
	
	ТаблДок = Параметры.ТаблДок;
	
	Попытка
		#Если НЕ ВебКлиент Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
		#Иначе
			Возврат;
		#КонецЕсли
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТаблДок",ТаблДок);
		СтруктураПараметров.Вставить("ИмяВременногоФайла",ИмяВременногоФайла);
		
		ОписаниеОповещения=Новый ОписаниеОповещения("ЗаписьТаблДокЗавершение",ЭтотОбъект,СтруктураПараметров);
		ТаблДок.НачатьЗапись(ОписаниеОповещения,ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS);
		
	
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось записать временный файл!
		|Возможно, диск защищен от записи или на диске недостаточно места!'"));
		Возврат;
	КонецПопытки;
		
КонецПроцедуры // ВыгрузитьМакетвXLS()

&НаКлиенте
Процедура ЗаписьТаблДокЗавершение(Результат,ДопПараметры) Экспорт
	
	Перем Ексел;
	
	Если НЕ Результат=Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблДок=ДопПараметры.ТаблДок;
	
	ОбластиСтроки = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСтроки.Добавить(Обл);
		КонецЕсли;
	КонецЦикла;
	
	Если Ексел = Неопределено Тогда
		
		Попытка
			
			Состояние(Нстр("ru = 'Создание COM-объекта ...'"));
			Ексел = Новый COMОбъект("Excel.Application");
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось создать COM-объект Microsoft Excel!
			|Вероятно, у Вас на компьютере не установлен Microsoft Office.'"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		Состояние(Нстр("ru = 'Открытие файла ...'"));
		РабочаяКнига = Ексел.Workbooks.Open(ДопПараметры.ИмяВременногоФайла);
		Ексел.Visible = Ложь;
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Ошибка при работе с временным файлом.'"));
		Возврат;
	КонецПопытки;
	
	Попытка
		
		
		Состояние(Нстр("ru = 'Именование областей строк.'"));
		Для Каждого Обл Из ОбластиСтроки Цикл
			РабочаяКнига.ActiveSheet.Range(РабочаяКнига.ActiveSheet.Rows(Обл.Верх), РабочаяКнига.ActiveSheet.Rows(Обл.Низ)).Name = РабочаяКнига.ActiveSheet.Name + "!" + Обл.Имя;
		КонецЦикла;
		
		Для ИндСтрока = 1 По ТаблДок.ВысотаТаблицы Цикл
			Состояние(Нстр("ru = 'Установка типов ячеек'"), (ИндСтрока * 100)/ТаблДок.ВысотаТаблицы);
			Для ИндКолонка = 1 По ТаблДок.ШиринаТаблицы Цикл
				
				ОбработкаПрерыванияПользователя();
				ТекОбласть = ТаблДок.Область(ИндСтрока, ИндКолонка);
				Если ТекОбласть.Лево <> ИндКолонка
					ИЛИ ТекОбласть.Верх <> ИндСтрока Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					РабочаяЯчейка = РабочаяКнига.ActiveSheet.Cells(ИндСтрока, ИндКолонка);
					Если ТекОбласть.СодержитЗначение Тогда
						Если ТекОбласть.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
							РабочаяЯчейка.NumberFormat = "@";
						КонецЕсли;
						
						Если РасширенныйРежим Тогда
							РабочаяЯчейка.MergeArea.Locked       = Ложь;
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(ТекОбласть.Текст) И НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(ТекОбласть.Текст) Тогда
						РабочаяЯчейка.NumberFormat = "@";
						РабочаяЯчейка.Value = ТекОбласть.Текст;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если РасширенныйРежим Тогда
			Состояние(Нстр("ru = 'Установка формул для ячеек вычисляемых показателей... '"));
			
			// Для вычисляемых показателей создадим формулы расчета на основании правила обработки.
			МассивОбработанныхВычисляемыхПоказателей = Новый Массив;
			МассивСтруктур            = Новый Массив;
			МассивБлокируемыхОбластей = Новый Массив;
			МассивГруппировок         = Новый Массив;
			
			ВернутьМассивСтруктурДляВычисляемыхПоказателей(МассивСтруктур, МассивБлокируемыхОбластей, МассивГруппировок);
			
			Для Каждого Элемент Из МассивСтруктур Цикл
				
				Попытка
					ЯчейкаЕксель         = РабочаяКнига.ActiveSheet.Cells(Элемент.Верх, Элемент.Лево);
					ЯчейкаЕксель.Formula = Элемент.Процедура;
					ЯчейкаЕксель.Locked  = Истина;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			Для Каждого Элемент Из МассивГруппировок Цикл
				РабочаяКнига.ActiveSheet.Range(Элемент).Group();
			КонецЦикла;
			
			Для Каждого Элемент Из МассивБлокируемыхОбластей Цикл
				ЯчейкаЕксель         = РабочаяКнига.ActiveSheet.Cells(Элемент.Верх, Элемент.Лево);
				ЯчейкаЕксель.Locked  = Истина;
			КонецЦикла;
			
			// Установим защиту на текущий лист при работе в расширенном режиме.
			РабочаяКнига.ActiveSheet.Protect(Пароль);

		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Ошибка работы с COM-объектом Microsoft Excel!
		|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат;
	КонецПопытки;
	Попытка
		РабочаяКнига.Save();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось сохранить изменения в табличном документе'"));
		Возврат;
	КонецПопытки;
	
	Если РасширенныйРежим Тогда
		
		Состояние(Нстр("ru = 'Добавление макросов в табличный документ'"));
		
		Попытка
			Ексел.VBE.MainWindow.Visible = Ложь;
			Проект = РабочаяКнига.VBProject;
			Компоненты = Проект.VBComponents(РабочаяКнига.CodeName);
			КодМодуля = Компоненты.CodeModule;
			ТекЛиния = КодМодуля.CreateEventProc("Open", "Workbook");
			
			#Если ТонкийКлиент Тогда
				МакетПроцедуры = ВернутьОбщийМакет("ТекстМодуляКнигиExcel");
			#ИначеЕсли ВебКлиент Тогда
				МакетПроцедуры=Новый ТекстовыйДокумент;
				Возврат;
			#Иначе
				МакетПроцедуры = ПолучитьОбщийМакет("ТекстМодуляКнигиExcel");
			#КонецЕсли
			
			ТекстПроцедуры = МакетПроцедуры.ПолучитьТекст();
			КодМодуля.InsertLines(ТекЛиния + 1, ТекстПроцедуры);
			
			НовыйМодуль = Проект.VBComponents.Add(1);
			НовыйМодуль.Name = "Consolidation";
			КодМодуля = НовыйМодуль.CodeModule;
			
			#Если ТонкийКлиент Тогда
				МакетПроцедуры = ВернутьОбщийМакет("ТекстМакросаExcel");
			#ИначеЕсли ВебКлиент Тогда
				МакетПроцедуры=Новый ТекстовыйДокумент;
				Возврат;
			#Иначе
				МакетПроцедуры = ПолучитьОбщийМакет("ТекстМакросаExcel");
			#КонецЕсли
			
			ТекстПроцедуры = МакетПроцедуры.ПолучитьТекст();
			КодМодуля.InsertLines(ТекЛиния + 1, ТекстПроцедуры);
			
			НовыйМодуль = Проект.VBComponents.Add(1);
			НовыйМодуль.Name = "Protection";
			КодМодуля = НовыйМодуль.CodeModule;
			
			ТекстПроцедуры = "
			| Sub Protect_ON()
			|	ActiveSheet.Protect" + ?(ПустаяСтрока(Пароль), "", " Password:=""" + Пароль + """") + "
			| End Sub
			|
			|Sub Protect_OFF()
			|	ActiveSheet.UnProtect" + ?(ПустаяСтрока(Пароль), "", " Password:=""" + Пароль + """") + "
			|End Sub";
			
			КодМодуля.InsertLines(1, ТекстПроцедуры);
			РабочаяКнига.Save();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось записать управляющие макросы в табличный документ.
			|Возможно, не разрешен доступ к Visual Basic Project в MS Excel.'"));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	РабочаяКнига.Close();
	
	ОписаниеОповещения=Новый ОписаниеОповещения("КопированиеФайлаЗавершение",ЭтотОбъект);
	
	НачатьКопированиеФайла(ОписаниеОповещения,ДопПараметры.ИмяВременногоФайла, ИмяФайлаВыгрузки);
		
КонецПроцедуры // ЗаписьТаблДокЗавершение()

&НаКлиенте
Процедура КопированиеФайлаЗавершение(СкопированныйФайл,ДопПараметры) Экспорт
	
	Состояние();
	
КонецПроцедуры // КопированиеФайлаЗавершение() 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ВнешняяИБ"] <> Неопределено Тогда
		
		ЗаполнитьРеквизитыПоВИБ(Настройки["ВнешняяИБ"]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Выгрузка макетов отчетов недоступна в веб-клиенте'"));
		Отказ = Истина;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПолучитьШаблонМакетаДляВыгрузки(БланкОтчета);
	
	Возврат РасширениеБизнесЛогикиУХ.ПолучитьШаблонМакетаДляВыгрузки(Параметры.ТаблДок,БланкОтчета,Периодичность,КоличествоПериодов,Истина);	
			
КонецФункции	

