
&НаКлиенте
Перем ЗакрытьФорму;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВычисляемыйПоказатель",ВычисляемыйПоказатель);
	
	Если Параметры.Свойство("СпособПолучения")
		И (Параметры.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		Или Параметры.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		Или Параметры.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		Или Параметры.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		Или Параметры.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		Или Параметры.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO) Тогда
		ИспользоватьРасширенныйРасчет = Ложь;
	Иначе
		ИспользоватьРасширенныйРасчет = РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет();
	КонецЕсли;
	Если ИспользоватьРасширенныйРасчет Тогда
		МакетОпределения = Справочники.БланкиОтчетов.ПолучитьМакет("ОпределенияПроцедурИФункцийРасширенный_ru");
	Иначе	
		МакетОпределения = Справочники.БланкиОтчетов.ПолучитьМакет("ОпределенияПроцедурИФункций_ru");
	КонецЕсли;
	
	ОпределенияТаблица = РеквизитФормыВЗначение("Определения");
	
	Для НомСтр = 2 По МакетОпределения.ВысотаТаблицы Цикл
		
		Если ИспользоватьРасширенныйРасчет Тогда
			Если ВычисляемыйПоказатель Тогда
				Назначение = МакетОпределения.Область(НомСтр, 5).Текст;
			Иначе
				Назначение = МакетОпределения.Область(НомСтр, 6).Текст;
			КонецЕсли;
			Если СокрЛП(Назначение) <> "Да" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовСтр = ОпределенияТаблица.Добавить();
		
		НовСтр.Метод	= МакетОпределения.Область(НомСтр, 1).Текст;
		НовСтр.Описание	= МакетОпределения.Область(НомСтр, 2).Текст;
		НовСтр.Код		= МакетОпределения.Область(НомСтр, 3).Текст;
		
		ТекстВид = МакетОпределения.Область(НомСтр, 4).Текст;
		Если ТекстВид = "Процедура" Тогда
			НовСтр.Вид = 0;
		ИначеЕсли ТекстВид = "Функция" Тогда
			НовСтр.Вид = 1;
		Иначе
			НовСтр.Вид = 2;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОпределенияТаблица.Количество() = 0 Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Нстр("ru = 'Определения вспомогательных процедур и функций не обнаружены!'");
		СообщениеПользователю.Сообщить();
		
		Отказ = Истина;
		
		Возврат;
		
	Иначе		
		ЗначениеВРеквизитФормы(ОпределенияТаблица, "Определения");		
	КонецЕсли;
	
	Элементы.ФормаВидимостьПроцедурИФункций.Пометка = Истина;
	Если ИспользоватьРасширенныйРасчет Тогда
		Если ВычисляемыйПоказатель Тогда
			Элементы.ФормаВидимостьВидыОтчетов.Пометка = Ложь;
			Элементы.ГруппаВидыОтчетов.Видимость = Ложь;
		Иначе
			Элементы.ФормаВидимостьВидыОтчетов.Пометка = Истина;
		КонецЕсли;	
	Иначе
		ОпределенияТаблица.Сортировать("Метод");
	КонецЕсли;
	
	ВидОтчета = Параметры.ВидОтчета;
	
	Если ВычисляемыйПоказатель И НЕ ИспользоватьРасширенныйРасчет Тогда
		
		ПолеТекстовогоДокументаПроцедура.ДобавитьСтроку(Параметры.ТекстПроцедуры);
		Элементы.ГруппаВидыОтчетов.Видимость = Ложь;
		Элементы.ПолеТекстовогоДокументаПроцедура
					.КонтекстноеМеню.ПодчиненныеЭлементы
					.ПолеТекстовогоДокументаПроцедураКонтекстноеМенюВставитьПоказатели.Видимость = Ложь;
		
	Иначе
		
		НоваяСтрока = ИспользуемыеВидыОтчетов.Добавить();
		НоваяСтрока.ВидОтчета = ВидОтчета;
		
		Заголовок= "" + ВидОтчета + ", " 
					+ Параметры.НазначениеРасчетов + ": " 
					+ ?(ПустаяСтрока(Параметры.ИмяПроцедуры), Параметры.ПотребительРасчета, Параметры.ИмяПроцедуры);
		
		Если Параметры.ОбновлятьОбъект Тогда
			
			Запрос = Новый Запрос;
			
			// Определяем текст процедуры
			
			Если ЗначениеЗаполнено(Параметры.СпособОбработки) Тогда
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	" + Параметры.ИмяПроцедуры + " КАК ТекстПроцедуры
				|ИЗ 
				|	Справочник.ПравилаОбработки КАК ПравилаОбработки
				|ГДЕ 
				|	ПравилаОбработки.Ссылка = &НазначениеРасчетов";
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПравилаПроверки.ПроцедураПроверки КАК ТекстПроцедуры
				|ИЗ
				|	Справочник.ПравилаПроверки КАК ПравилаПроверки
				|ГДЕ
				|	ПравилаПроверки.Ссылка = &НазначениеРасчетов";
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("НазначениеРасчетов", Параметры.НазначениеРасчетов);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				ПолеТекстовогоДокументаПроцедура.ДобавитьСтроку(Результат.ТекстПроцедуры);
				
			КонецЕсли;
			
			// Определяем список используемых отчетов
			
			Если ЗначениеЗаполнено(Параметры.СпособОбработки) Тогда
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПравилаОбработкиИспользуемыеОтчеты.ВидОтчета
				|ИЗ
				|	Справочник.ПравилаОбработки.ИспользуемыеОтчеты КАК ПравилаОбработкиИспользуемыеОтчеты
				|ГДЕ
				|	ПравилаОбработкиИспользуемыеОтчеты.Ссылка = &НазначениеРасчетов";
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПравилаПроверкиИспользуемыеОтчеты.ВидОтчета
				|ИЗ
				|	Справочник.ПравилаПроверки.ИспользуемыеОтчеты КАК ПравилаПроверкиИспользуемыеОтчеты
				|ГДЕ
				|	ПравилаПроверкиИспользуемыеОтчеты.Ссылка = &НазначениеРасчетов";
				
			КонецЕсли;
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл 
				
				НоваяСтрока = ИспользуемыеВидыОтчетов.Добавить();
				НоваяСтрока.ВидОтчета = Результат.ВидОтчета;
				
			КонецЦикла;
			
		Иначе
			
			ПолеТекстовогоДокументаПроцедура.ДобавитьСтроку(Параметры.ТекстПроцедуры);
			
			Для Каждого СтрВидОтчета ИЗ Параметры.ИспользуемыеВидыОтчетов Цикл
				
				НоваяСтрока = ИспользуемыеВидыОтчетов.Добавить();
				НоваяСтрока.ВидОтчета = СтрВидОтчета.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ИспользоватьРасширенныйРасчет И ВычисляемыйПоказатель 
		И ПустаяСтрока(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст()) Тогда
		ПолеТекстовогоДокументаПроцедура.Очистить();
		ПолеТекстовогоДокументаПроцедура.ДобавитьСтроку("Результат = ");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработатьЗакрытие(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем СписокПоказателей;
	
	ТекстВставки = "";
	ТекВидОтчета = Элементы.ИспользуемыеВидыОтчетов.ТекущиеДанные.ВидОтчета;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СписокПоказателей = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СписокПоказателей = ВыбранноеЗначение.МассивПоказателей;
	КонецЕсли;
	
	Если СписокПоказателей <> Неопределено Тогда
		
		Если ИспользоватьРасширенныйРасчет Тогда
			
			КодТекВидОтчета = СокрЛП(ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ТекВидОтчета,"Код"));
			Для Каждого СтрПоказатель ИЗ СписокПоказателей Цикл
				ТекстВставки = ТекстВставки + "МассивПоказателей.Добавить("""
					+ КодТекВидОтчета
					+ СтрЗаменить(СокрЛП(СтрПоказатель.Значение),"Показатели.",":")
					+ """);"
					+ Символы.ПС;
			КонецЦикла;
			
			ТекстВставки = "МассивПоказателей = Новый Массив;"
				+ Символы.ПС + ТекстВставки 
				+ "тЗначенияПоказателей = ПолучитьЗначениеПоказателей(Новый Структура(""ПоказателиОтчетов"",МассивПоказателей));"
				+ Символы.ПС;
				
		Иначе
			Для Каждого СтрПоказатель ИЗ СписокПоказателей Цикл
				ТекстВставки = ТекстВставки + ?(ТекВидОтчета = ВидОтчета, СтрПоказатель.Значение, СтрПоказатель.Представление) + " ";
			КонецЦикла;
		КонецЕсли;
		
		ПТД = Элементы.ПолеТекстовогоДокументаПроцедура;
		ПТД.ВыделенныйТекст = ТекстВставки;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Перем МестоВставки;
	Перем ТекстДляВставки;
	
	Если ИмяСобытия = "ВставитьПоказатели" Тогда
		
		Если Параметр.Свойство("МестоВставки", МестоВставки) И Параметр.Свойство("ТекстДляВставки", ТекстДляВставки) Тогда
		
			ПТД = Элементы.ПолеТекстовогоДокументаПроцедура;
			Если МестоВставки = 0 Тогда
				
				Если СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст()) <> 0 Тогда
					ПТД.УстановитьГраницыВыделения(1, 1);
				КонецЕсли;
				ПТД.ВыделенныйТекст = ТекстДляВставки;
				
			ИначеЕсли МестоВставки = 1 Тогда
				
				ПТД.ВыделенныйТекст = ТекстДляВставки;
				
			ИначеЕсли МестоВставки = 2 Тогда
				
				ДлинаИсходногоТекста = СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст());
				Если СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст()) <> 0 Тогда
					ПТД.УстановитьГраницыВыделения(ДлинаИсходногоТекста, ДлинаИсходногоТекста);
				КонецЕсли;
				ПТД.ВыделенныйТекст = Символы.ПС + ТекстДляВставки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбработатьЗакрытие(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Перем КоличествоОшибок;
	
	ПроверитьКод(КоличествоОшибок);
	Если КоличествоОшибок = 0 Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Ошибок не найдено'"));
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(Нстр("ru = 'Найдено: %1%2'"), КоличествоОшибок, 
			ВыбратьСклонение(КоличествоОшибок, " ошибка", " ошибки", " ошибок")));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьМетод(Команда)
	
	ВставитьТекстПроцедуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПоказатели(Команда)
	
	ВставитьОбращениеКПоказателю();
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыФункции

&НаКлиенте
Процедура ВыполнитьОповещение()
	
	Если Параметры.ОбновлятьОбъект Тогда
		
	Иначе
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ТекстПроцедуры", ПолеТекстовогоДокументаПроцедура.ПолучитьТекст());
		
		СписокВидовОтчетов=Новый СписокЗначений;
		
		Для Каждого СтрВидОтчета ИЗ ИспользуемыеВидыОтчетов Цикл
			
			Если СтрВидОтчета.ВидОтчета = ВидОтчета Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВидовОтчетов.Добавить(СтрВидОтчета.ВидОтчета);
			
		КонецЦикла;
		
		СтруктураОтвета.Вставить("ИспользуемыеОтчеты", СписокВидовОтчетов);
		
		ФормаИсточник = Неопределено;
		ТипУФ = Тип("УправляемаяФорма");
		Если ТипЗнч(ЭтаФорма.ВладелецФормы) = ТипУФ Тогда
			
			Если ЭтаФорма.ВладелецФормы.ВладелецФормы <> Неопределено
				И Тип(ЭтаФорма.ВладелецФормы.ВладелецФормы) = ТипУФ Тогда
			
				ФормаИсточник = ЭтаФорма.ВладелецФормы.ВладелецФормы;
				
			Иначе
				
				ФормаИсточник = ЭтаФорма.ВладелецФормы;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Оповестить(
				"Изменена" + ?(ПустаяСтрока(Параметры.ИмяПроцедуры), "ПроцедураРасчета", Параметры.ИмяПроцедуры),
				СтруктураОтвета, 
				ФормаИсточник
			);
		
	КонецЕсли;	
	
КонецПроцедуры // ВыполнитьОповещение() 

&НаКлиенте
Процедура ПолеТекстовогоДокументаПроцедураПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьСклонение(Знач Число, Единственное, ДоПяти, СвышеПяти)
	
	Остаток = Число - Цел(Число / 10);
	Если Остаток = 1 Тогда
		Возврат Единственное;
	ИначеЕсли Остаток >=2 И Остаток <=5 Тогда
		Возврат ДоПяти;
	Иначе
		Возврат СвышеПяти;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытие(Отказ)
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		
		Если ЗакрытьФорму = Неопределено Тогда
			
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьЗакрытие", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Нстр("ru = 'Сохранить измененную процедуру?'"), РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			
			ЗакрытьФорму = Истина;
			
		КонецЕсли;
		
	Иначе
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗакрытие(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Перем КоличествоОшибок;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПроверитьКод(КоличествоОшибок);
		Если КоличествоОшибок > 0 Тогда
			
			ТекстВопроса = СтрШаблон(Нстр("ru = 'В тексте процедуры обнаружено %1 ошибок. Закрыть без сохранения?'"), КоличествоОшибок);
			
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьЗакрытиеЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			
			Возврат;
			
		КонецЕсли;
		
		ОповеститьИЗакрыть();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗакрытиеЗавершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьИЗакрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьИЗакрыть()
	
	ВыполнитьОповещение();
	
	ЭтаФорма.Модифицированность = Ложь;
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКод(КоличествоОшибок)
	
	КоличествоОшибок = Справочники.ПравилаОбработки.ПроверкаПроцедуры(
		ПолеТекстовогоДокументаПроцедура, ВидОтчета, ВычисляемыйПоказатель, ИспользоватьРасширенныйРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстПроцедуры()
	
	Если Элементы.Определения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПТД = Элементы.ПолеТекстовогоДокументаПроцедура;
	
	ТекстВставки=Элементы.Определения.ТекущиеДанные.Код;
	
	ПТД.ВыделенныйТекст=ТекстВставки;
	
КонецПроцедуры // ВставитьТекстПроцедуры()

&НаКлиенте
Процедура ВставитьОбращениеКПоказателю()
	
	Если Элементы.ИспользуемыеВидыОтчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФормы = Новый Структура("Владелец", Элементы.ИспользуемыеВидыОтчетов.ТекущиеДанные.ВидОтчета);
	ПараметрыФормы = Новый Структура("Отбор,ВозвращатьКод", ОтборФормы, Истина);
	ОткрытьФорму("Справочник.ПоказателиОтчетов.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ВставитьОбращениеКПоказателю()

&НаКлиенте
Процедура ОпределенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВставитьТекстПроцедуры();
	
КонецПроцедуры

&НаКлиенте                                                                                                        
Процедура ВидимостьВидыОтчетов(Команда)
	
	Элементы.ФормаВидимостьВидыОтчетов.Пометка = НЕ Элементы.ФормаВидимостьВидыОтчетов.Пометка;
	Элементы.ГруппаВидыОтчетов.Видимость = Элементы.ФормаВидимостьВидыОтчетов.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПроцедурИФункций(Команда)
	
	Элементы.ФормаВидимостьПроцедурИФункций.Пометка = НЕ Элементы.ФормаВидимостьПроцедурИФункций.Пометка;
	Элементы.ГруппаМетоды.Видимость = Элементы.ФормаВидимостьПроцедурИФункций.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПараметрыПеретаскивания.Значение = "";
	Иначе
		ПараметрыПеретаскивания.Значение = СокрЛП(Элемент.ТекущиеДанные.Код);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

