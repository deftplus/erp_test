
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Бланк 						= Параметры.Бланк;
	ВидОтчета 					= Параметры.Бланк.Владелец;
	АдресТекущихНастроек 		= Параметры.АдресТекущихНастроек;
	РежимСравненияСБазой 		= Параметры.РежимСравненияСБазой;
	
	
	Если Параметры.АдресТекущихНастроек = "" Тогда
		
		СводнаяТаблицаУХ.ЗаполнитьДоступныеПоля(ТаблицаДоступныеПоля,Бланк.Владелец,Бланк,КэшАналитикПоказателей,ДоступныеАналитики);
		СводнаяТаблицаУХ.ЗаполнитьРесурсы(Бланк,ТаблицаВыбранныеРесурсы);
		СводнаяТаблицаУХ.ЗаполнитьЗначенияОсей(Бланк,ТаблицаДоступныеПоля,ТаблицаСтраницы,ТаблицаКолонки,ТаблицаСтроки);
		
	Иначе	
		
		СводнаяТаблицаУХ.ЗаполнитьРесурсы(Бланк,ТаблицаВыбранныеРесурсы);

		СтруктураТаблиц = ПолучитьИзВременногоХранилища(Параметры.АдресТекущихНастроек);
		ТаблицаСтроки.Загрузить(СтруктураТаблиц.ТаблицаСтроки);
		ТаблицаКолонки.Загрузить(СтруктураТаблиц.ТаблицаКолонки);
		ТаблицаСтраницы.Загрузить(СтруктураТаблиц.ТаблицаСтраницы);
		ТаблицаДоступныеПоля.Загрузить(СтруктураТаблиц.ТаблицаДоступныеПоля);
		
		Для Каждого Стр ИЗ ТаблицаСтроки Цикл
			ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
			Если ИсключаемыйЭлемент.Количество() = 1 Тогда
				ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
			КонецЕсли;	
		КонецЦикла;
		Для Каждого Стр ИЗ ТаблицаКолонки Цикл
			ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
			Если ИсключаемыйЭлемент.Количество() = 1 Тогда
				ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
			КонецЕсли;	
		КонецЦикла;
		Для Каждого Стр ИЗ ТаблицаСтраницы Цикл
			ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
			Если ИсключаемыйЭлемент.Количество() = 1 Тогда
				ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
			КонецЕсли;	
		КонецЦикла;
	
	КонецЕсли;	
	
	Если Параметры.Свойство("ЗаблокироватьДоступныеПоля") Тогда
		 Элементы.Группа2.Доступность = Ложь;
	КонецЕсли;	

	
	ИерархияСтрок	 	= Параметры.ИерархияСтрок;
	ИерархияКолонок 	= Параметры.ИерархияКолонок;
	
	
	РежимРедактированияСвойств = Параметры.РежимРедактированияСвойств;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСводнойТаблицы

#Область ОбработчикиПеретаскивания

&НаКлиенте
Процедура ТаблицаСтраницыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаСтраницы.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
				
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаДоступныеПоля.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);		
				
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)                                                                             
	
	СтандартнаяОбработка = Ложь;

	Если НЕ ПроверитьВозможностьПеретаскивания(ПараметрыПеретаскивания,Строка,Элемент.Имя) Тогда
		  ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;	
	
	Если  ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Отклонения" ИЛИ ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Показатели_Колонки" 
		ИЛИ  ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Периоды" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте                                               
Процедура ТаблицаСтрокиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;                                                         
	
	Если НЕ ПроверитьВозможностьПеретаскивания(ПараметрыПеретаскивания,Строка,Элемент.Имя) Тогда
		  ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;	
		
	Если   ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Показатели_Колонки" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте                                                                           
Процедура ТаблицаКолонкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПроверитьВозможностьПеретаскивания(ПараметрыПеретаскивания,Строка,Элемент.Имя) Тогда
		  ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;	
	
	Если  ПараметрыПеретаскивания.Значение.ТекущаяСтрока.ИндексКартинки=4 Тогда                                                 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	              
	КонецЕсли;		                                  
		
КонецПроцедуры
                                                               
&НаКлиенте
Процедура ТаблицаСтрокиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)       
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	                      
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	
	Если Элемент.ТекущиеДанные.Код = "Фильтр_Валюты" Тогда
		Выполнение = Ложь;
	КонецЕсли;	
	
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	 
 КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;     

	Если   ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Показатели_Колонки" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	

	Если   ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Показатели" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
	
	Если   ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Сценарии" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	

	Если   ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код= "Фильтр_Валюты" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте                               
Процедура ТаблицаСтраницыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	 
 КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	 
 КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
 КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	 
 КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
 КонецПроцедуры
	
#КонецОбласти                                      

&НаКлиенте
Процедура НастройкаОтклоненийЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ОбновитьСтруктуруПолей(Результат.АдресТзОтклонений);

КонецПроцедуры

&НаКлиенте
Процедура НастрйкаШкалыВремениЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
		
	ОбновитьГоризонт = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	КонецЕсли; 	
							
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСтраницыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНастраиваемыеИзмерения(Элемент.ТекущиеДанные,"ТаблицаСтраницы");
	Возврат;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)		
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНастраиваемыеИзмерения(Элемент.ТекущиеДанные,"ТаблицаДоступныеПоля");
	Возврат;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНастраиваемыеИзмерения(Элемент.ТекущиеДанные,"ТаблицаКолонки");
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНастраиваемыеИзмерения(Элемент.ТекущиеДанные,"ТаблицаСтроки");
	Возврат;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьВозможностьПеретаскивания(ПараметрыПеретаскивания,Строка,ТаблицаПриемник)
	                           
	Если ПараметрыПеретаскивания.Значение.ТекущийЭлемент = "ТаблицаДоступныеПоля" Тогда	
		Если НЕ Строка = Неопределено Тогда 	
			ЭлементПриемник = ЭтаФорма[ТаблицаПриемник].НайтиПоИдентификатору(Строка);	                   
			Если ЭлементПриемник.Код = "Фильтр_Показатели" ИЛИ ЭлементПриемник.Код = "Фильтр_Периоды" ИЛИ ЭлементПриемник.Код = "Фильтр_Показатели_Колонки" Тогда		
				 Возврат Ложь;				
			КонецЕсли;		
		КонецЕсли;	                                                           
	КонецЕсли;	
	
	Если ПараметрыПеретаскивания.Значение.ТекущийЭлемент = "ТаблицаСтраницы" Тогда	
		Если НЕ Строка = Неопределено Тогда 	
			ЭлементПриемник = ЭтаФорма[ТаблицаПриемник].НайтиПоИдентификатору(Строка);	                   
			Если  ЭлементПриемник.Код = "Фильтр_Периоды" ИЛИ ЭлементПриемник.Код = "Фильтр_Показатели_Колонки" Тогда		
				 Возврат Ложь;				
			КонецЕсли;		
		КонецЕсли;	                                                           
	КонецЕсли;	

	Если ПараметрыПеретаскивания.Значение.ТекущийЭлемент = "ТаблицаСтроки" Тогда	
		Если НЕ Строка = Неопределено Тогда 	
			ЭлементПриемник = ЭтаФорма[ТаблицаПриемник].НайтиПоИдентификатору(Строка);                   
			Если  ЭлементПриемник.Код = "Фильтр_Показатели_Колонки" Тогда		
				 Возврат Ложь;				
			КонецЕсли;		
		КонецЕсли;	                                                           
	КонецЕсли;	

	
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНастраиваемыеИзмерения(ТекДанные,ТекущаяТаблица=Неопределено)
	
	КодЭлементаНастройки = ТекДанные.Код;
	
		
	Если КодЭлементаНастройки = "Фильтр_Периоды" Тогда	
		Параметры_ = Новый Структура("Бланк,РежимРаботыСДанными,НастройкаШкалыВремениАдрес", Бланк,НЕ РежимРедактированияСвойств,АдресТекущихНастроек);      
		ИзмененаСтруктура = Истина;	
		ИзмененыДанные = Истина;
		Оповещение = Новый ОписаниеОповещения("НастрйкаШкалыВремениЗавершение", ЭтаФорма);	
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиШкалыВремени", 
		Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
		
		
		
	ИначеЕсли КодЭлементаНастройки = "Фильтр_Показатели_Колонки" Тогда
		
		Если РежимСравненияСБазой Тогда	
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Прежде чем редактировать состав показателей, необходимо отключить режим сравнения с базовыми значениями.");
			Возврат;	
		КонецЕсли; 	
		
		Оповещение = Новый ОписаниеОповещения("НастройкаОтклоненийЗавершение", ЭтаФорма);
		СтруктураПараметров = Новый Структура("АдресТекущихНастроек,Бланк",АдресТекущихНастроек,Бланк);
		ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаНастройкиОтклонений",СтруктураПараметров,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли КодЭлементаНастройки = "Фильтр_Показатели" Тогда
		
		Параметры_ = Новый Структура;
		Параметры_.Вставить("Бланк",Бланк);
		Параметры_.Вставить("АналитикаКод",ТекДанные.Код);
		Параметры_.Вставить("АналитикаТип",ТекДанные.ТипСтрока);
		Параметры_.Вставить("АналиикаИмя",ТекДанные.Наименование);
		Параметры_.Вставить("АналитикаСубконто",ТекДанные.ТипСубконто);
		Параметры_.Вставить("ТекущаяТаблица",ТекущаяТаблица);
		Параметры_.Вставить("Редактируется",ТекДанные.Редактируется);
		Параметры_.Вставить("Представление",ТекДанные.Представление);
		Параметры_.Вставить("Сортировка",ТекДанные.Сортировка);
		Параметры_.Вставить("ПоддерживатьИерархию",ТекДанные.ПоддерживатьИерархию);
		Параметры_.Вставить("РежимРедактированияСвойств",РежимРедактированияСвойств);

		
		Оповещение = Новый ОписаниеОповещения("НастройкаАналитикиЗавершение", ЭтаФорма);
		ИзмененаСтруктура = Истина;
		ИзмененыДанные = Истина;
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиАналитики", 
		Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
		ИзмененыДанные = Истина;	
		ИзмененаСтруктура = Истина;

			
	ИначеЕсли  КодЭлементаНастройки = "Фильтр_ШаблонДокументаБД" ИЛИ  КодЭлементаНастройки = "Фильтр_Проект" 
		ИЛИ КодЭлементаНастройки = "Фильтр_Организация"  Тогда		
		Возврат;
	Иначе	
				
		Параметры_ = Новый Структура;
		Параметры_.Вставить("Бланк",Бланк);
		Параметры_.Вставить("АналитикаКод",ТекДанные.Код);
		Параметры_.Вставить("АналитикаТип",ТекДанные.ТипСтрока);
		Параметры_.Вставить("АналиикаИмя",ТекДанные.Наименование);
		Параметры_.Вставить("АналитикаСубконто",ТекДанные.ТипСубконто);
		Параметры_.Вставить("ТекущаяТаблица",ТекущаяТаблица);
		Параметры_.Вставить("Редактируется",ТекДанные.Редактируется);
		Параметры_.Вставить("Представление",ТекДанные.Представление);
		Параметры_.Вставить("Сортировка",ТекДанные.Сортировка);
		Параметры_.Вставить("ПоддерживатьИерархию",ТекДанные.ПоддерживатьИерархию);
		Параметры_.Вставить("РежимРедактированияСвойств",РежимРедактированияСвойств);
		Оповещение = Новый ОписаниеОповещения("НастройкаАналитикиЗавершение", ЭтаФорма);
		ИзмененаСтруктура = Истина;
		ИзмененыДанные = Истина;
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиАналитики", 
		Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
		ИзмененыДанные = Истина;	
		ИзмененаСтруктура = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАналитикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		  Возврат;
	КонецЕсли;	
	
	ОбновитьСвойстваАналитики(Результат);
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваАналитики(Результат)
	
	ТекСтрока =  ЭтаФорма[Результат.ТекущаяТаблица].НайтиСтроки(Новый Структура("Код",Результат.АналиикаИмя))[0];
	ТекСтрока.Редактируется = Результат.ВозможностьРедактирования;
	ТекСтрока.Представление = Результат.СтрокаПредставления;
	ТекСтрока.Сортировка = Результат.СтрокаСортировки;
	ТекСтрока.ПоддерживатьИерархию = Результат.ПоддерживатьИерархию;
	Если Не Результат.АналиикаИмя = "Фильтр_Показатели" Тогда
		ТекСтрока.ИндексКартинки = ?(ТекСтрока.Редактируется,4,1);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Применить(Команда)
	
	Отказ = Ложь;
	
	Если ТаблицаСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В строках должно быть выбрано хотя бы одно измерение'"),,"ТаблицаСтроки",, Отказ);
		Возврат;	
	КонецЕсли;	
	
	
	Если ТаблицаКолонки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В колонках должно быть выбрано хотя бы одно измерение'"),,"ТаблицаКолонки",, Отказ);
		Возврат;		
	КонецЕсли;	

	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураТаблиц",ПодготовитьСтруктуруТаблиц());	
	СтруктураПараметров.Вставить("ИерархияКолонок",ИерархияКолонок);
	СтруктураПараметров.Вставить("ИерархияСтрок",ИерархияСтрок);
    СтруктураПараметров.Вставить("ОбновитьГоризонт",ОбновитьГоризонт);

	
	Закрыть(СтруктураПараметров);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруТаблиц()
		
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаСтроки",РеквизитФормыВзначение("ТаблицаСтроки"));
	СтруктураТаблиц.Вставить("ТаблицаКолонки",РеквизитФормыВзначение("ТаблицаКолонки"));
    СтруктураТаблиц.Вставить("ТаблицаСтраницы",РеквизитФормыВзначение("ТаблицаСтраницы"));
	СтруктураТаблиц.Вставить("ТаблицаДоступныеПоля",РеквизитФормыВзначение("ТаблицаДоступныеПоля"));
	
	
	Если РежимРедактированияСвойств Тогда
		ЗаписатьСвойстваИзмерений();
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураТаблиц,Новый УникальныйИдентификатор);
		
КонецФункции	

&НаСервере
Процедура ЗаписатьСвойстваИзмерений()
	
	Для Каждого Стр Из ТаблицаСтроки Цикл
		
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;	

		
		НаборЗаписейНастройкиПараметровАналитик = РегистрыСведений.НастройкиПараметровАналитик.СоздатьНаборЗаписей();
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Бланк.Установить(Бланк);
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Аналитика.Установить(Стр.ТипСубконто);
		
		нНаборЗаписейНастройкиПараметровАналитик = НаборЗаписейНастройкиПараметровАналитик.Добавить();
		
		нНаборЗаписейНастройкиПараметровАналитик.Бланк = Бланк;
		нНаборЗаписейНастройкиПараметровАналитик.Аналитика = Стр.ТипСубконто;
		нНаборЗаписейНастройкиПараметровАналитик.Редактируется = Стр.Редактируется;
		нНаборЗаписейНастройкиПараметровАналитик.Представление = Стр.Представление;
		нНаборЗаписейНастройкиПараметровАналитик.Сортировка =    Стр.Сортировка;
		нНаборЗаписейНастройкиПараметровАналитик.ПоддерживатьИерархию =  Стр.ПоддерживатьИерархию;
		
		НаборЗаписейНастройкиПараметровАналитик.Записать(Истина);
		
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаКолонки Цикл
		
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;	
		
		НаборЗаписейНастройкиПараметровАналитик = РегистрыСведений.НастройкиПараметровАналитик.СоздатьНаборЗаписей();
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Бланк.Установить(Бланк);
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Аналитика.Установить(Стр.ТипСубконто);
		
		нНаборЗаписейНастройкиПараметровАналитик = НаборЗаписейНастройкиПараметровАналитик.Добавить();
		
		нНаборЗаписейНастройкиПараметровАналитик.Бланк = Бланк;
		нНаборЗаписейНастройкиПараметровАналитик.Аналитика = Стр.ТипСубконто;
		нНаборЗаписейНастройкиПараметровАналитик.Редактируется = Стр.Редактируется;
		нНаборЗаписейНастройкиПараметровАналитик.Представление = Стр.Представление;
		нНаборЗаписейНастройкиПараметровАналитик.Сортировка =    Стр.Сортировка;
		нНаборЗаписейНастройкиПараметровАналитик.ПоддерживатьИерархию =  Стр.ПоддерживатьИерархию;
		
		НаборЗаписейНастройкиПараметровАналитик.Записать(Истина);
		
	КонецЦикла;

	Для Каждого Стр Из ТаблицаСтраницы Цикл
		
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;	

		
		НаборЗаписейНастройкиПараметровАналитик = РегистрыСведений.НастройкиПараметровАналитик.СоздатьНаборЗаписей();
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Бланк.Установить(Бланк);
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Аналитика.Установить(Стр.ТипСубконто);
		
		нНаборЗаписейНастройкиПараметровАналитик = НаборЗаписейНастройкиПараметровАналитик.Добавить();
		
		нНаборЗаписейНастройкиПараметровАналитик.Бланк = Бланк;
		нНаборЗаписейНастройкиПараметровАналитик.Аналитика = Стр.ТипСубконто;
		нНаборЗаписейНастройкиПараметровАналитик.Редактируется = Стр.Редактируется;
		нНаборЗаписейНастройкиПараметровАналитик.Представление = Стр.Представление;
		нНаборЗаписейНастройкиПараметровАналитик.Сортировка =    Стр.Сортировка;
		нНаборЗаписейНастройкиПараметровАналитик.ПоддерживатьИерархию =  Стр.ПоддерживатьИерархию;
		
		НаборЗаписейНастройкиПараметровАналитик.Записать(Истина);
		
	КонецЦикла;

	Для Каждого Стр Из ТаблицаДоступныеПоля Цикл
		
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;	
		
		НаборЗаписейНастройкиПараметровАналитик = РегистрыСведений.НастройкиПараметровАналитик.СоздатьНаборЗаписей();
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Бланк.Установить(Бланк);
		НаборЗаписейНастройкиПараметровАналитик.Отбор.Аналитика.Установить(Стр.ТипСубконто);
		
		нНаборЗаписейНастройкиПараметровАналитик = НаборЗаписейНастройкиПараметровАналитик.Добавить();
		
		нНаборЗаписейНастройкиПараметровАналитик.Бланк = Бланк;
		нНаборЗаписейНастройкиПараметровАналитик.Аналитика = Стр.ТипСубконто;
		нНаборЗаписейНастройкиПараметровАналитик.Редактируется = Стр.Редактируется;
		нНаборЗаписейНастройкиПараметровАналитик.Представление = Стр.Представление;
		нНаборЗаписейНастройкиПараметровАналитик.Сортировка =    Стр.Сортировка;
		нНаборЗаписейНастройкиПараметровАналитик.ПоддерживатьИерархию =  Стр.ПоддерживатьИерархию;
		
		НаборЗаписейНастройкиПараметровАналитик.Записать(Истина);
		
	КонецЦикла;

	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	Если НЕ ВидОтчета.РазделениеПоПроектам Тогда
		ЭУО = УсловноеОформление.Элементы.Добавить();
		ЭУО_Оформление = ЭУО.Оформление.Элементы.Найти("ЦветТекста");
		ЭУО_Оформление.Значение = Новый Цвет(153,153,153);
		ЭУО_Оформление.Использование = Истина;
		
		ЭУО_Оформление = ЭУО.Оформление.Элементы.Найти("Доступность");
		ЭУО_Оформление.Значение = Ложь;
		ЭУО_Оформление.Использование = Истина;
		
		ЭУО_Отбор = ЭУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭУО_Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭУО_Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСтраницы.Код");
		ЭУО_Отбор.ПравоеЗначение = "Фильтр_Проекты";
		ЭУО_Отбор.Использование = Истина;
		
		ЭУО_Поле = ЭУО.Поля.Элементы.Добавить();
		ЭУО_Поле.Использование = Истина;
		ЭУО_Поле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСтраницыНаименование");	
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура ОбновитьСтруктуруПолей(Адрес)
		
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(АдресТекущихНастроек);	
	ТаблицыИнтерфейса.ДополнительныеПоля =ПолучитьИзВременногоХранилища(Адрес);
			
КонецПроцедуры



