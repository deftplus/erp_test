
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мОписаниеТиповСтрока=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500);
	мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	мОписаниеТиповТЗ=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ();
	мОписаниеТиповСписокЗначений=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений();
	
	ДляЗаполненияОбъектаБД=ТипЗнч(Параметры.ПотребительРасчета)=Тип("СправочникСсылка.ДокументыБД") 
			ИЛИ ТипЗнч(Параметры.ПотребительРасчета)=Тип("СправочникСсылка.СправочникиБД")
			ИЛИ ТипЗнч(Параметры.ПотребительРасчета)=Тип("СправочникСсылка.ТабличныеЧастиБД");
			
	ДляФормированияКорректировок=(ТипЗнч(Параметры.ПотребительРасчета)=Тип("СправочникСсылка.СоответствияСчетовДляТрансляции") 
								ИЛИ ТипЗнч(Параметры.ПотребительРасчета.Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок")
								ИЛИ ТипЗнч(Параметры.ПотребительРасчета)=Тип("СправочникСсылка.РегистрыБухгалтерииБД"));

	
	мТаблицаПоказателейБД         = Новый ТаблицаЗначений;
	мТаблицаПоказателейБД.Колонки.Добавить("ПолеБД",          	мОписаниеТиповСтрока);
	мТаблицаПоказателейБД.Колонки.Добавить("НаименованиеБД",  	мОписаниеТиповСтрока);
	мТаблицаПоказателейБД.Колонки.Добавить("ТипЗначения",		мОписаниеТиповСписокЗначений);
	мТаблицаПоказателейБД.Колонки.Добавить("ТипМетаДанных",    	мОписаниеТиповСтрока);
	мТаблицаПоказателейБД.Колонки.Добавить("ТипДанныхПоля",		мОписаниеТиповСписокЗначений);
	мТаблицаПоказателейБД.Колонки.Добавить("ТолькоОбороты",    	мОписаниеТиповБулево);
	мТаблицаПоказателейБД.Колонки.Добавить("ВидАналитики", 		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	мТаблицаПоказателейБД.Колонки.Добавить("ПризнакиУчетаСубконто",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	мТаблицаПоказателейБД.Колонки.Добавить("Измерение",        	мОписаниеТиповБулево);
	мТаблицаПоказателейБД.Колонки.Добавить("Дебетовый",        	мОписаниеТиповБулево);
	мТаблицаПоказателейБД.Колонки.Добавить("СправочникБД",    	мОписаниеТиповСтрока);
	мТаблицаПоказателейБД.Колонки.Добавить("Балансовый",       	мОписаниеТиповБулево);
	мТаблицаПоказателейБД.Колонки.Добавить("НеЯвляетсяРазделителемДанных",мОписаниеТиповБулево);
	мТаблицаПоказателейБД.Колонки.Добавить("ПолеЗапроса",      	мОписаниеТиповСтрока);
	
	мТаблицаПроизводныхБД		= мТаблицаПоказателейБД.СкопироватьКолонки();
	
	Если ЗначениеЗаполнено(Параметры.ВидОтчета) Тогда
		мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Параметры.ВидОтчета);
	КонецЕсли;
	
	ЗаполнитьСписокПолей(мТаблицаПоказателейБД,мТаблицаВидовАналитикВидаОтчета);
	
	ЛокальноеДерево = Новый ДеревоЗначений;
	ЛокальноеДерево.Колонки.Добавить("НаименованиеБД"		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ПолеБД"				, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("СправочникБД"   		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипМетаДанных" 		, мОписаниеТиповСтрока);
	ЛокальноеДерево.Колонки.Добавить("ТипЗначения"			, мОписаниеТиповСписокЗначений);
	ЛокальноеДерево.Колонки.Добавить("ТипДанныхПоля"		, мОписаниеТиповСписокЗначений);
	ЛокальноеДерево.Колонки.Добавить("ВидАналитики"			, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
		
	СписокИзмерений = мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("Измерение", Истина));
	
	СтрокаИзмерений = ЛокальноеДерево.Строки.Добавить();
	
	СтрокаИзмерений.НаименованиеБД 	= ?(ДляЗаполненияОбъектаБД ИЛИ ДляФормированияКорректировок,"Контекст загрузки","Реквизиты экземпляра отчета");
	ЭтаФорма.Заголовок				= ?(ДляЗаполненияОбъектаБД ИЛИ ДляФормированияКорректировок,"Выберите реквизит контекста загрузки","Выберите реквизит экземпляра отчета");
	
	Для Каждого Элемент Из СписокИзмерений Цикл
				
		ТекущаяСтрока                           = СтрокаИзмерений.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
			
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
			
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(ЛокальноеДерево,ТабличноеПолеИзмеренийБД);	
	АдресХранилищаТаблиц=ПоместитьВоВременноеХранилище(Новый Структура("мТаблицаПоказателейБД,мТаблицаПроизводныхБД",мТаблицаПоказателейБД,мТаблицаПроизводныхБД),ЭтаФорма.УникальныйИдентификатор);	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолей(мТаблицаПоказателейБД,мТаблицаВидовАналитикВидаОтчета=Неопределено)
		
	ПолеАналитика=мТаблицаПоказателейБД.Добавить();
	ПолеАналитика.ПолеБД="Организация";
	ПолеАналитика.НаименованиеБД="Организационная единица";
	ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.Организации");
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Организации",Справочники.ТипыБазДанных.ТекущаяИБ);
	ПолеАналитика.Балансовый=Истина;
	ПолеАналитика.Измерение = Истина;
	ПолеАналитика.ТолькоОбороты = Истина;
		
	ПолеАналитика=мТаблицаПоказателейБД.Добавить();
	ПолеАналитика.ПолеБД="ПериодОтчета";
	ПолеАналитика.НаименованиеБД="Период";
	ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.Периоды");
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Периоды",Справочники.ТипыБазДанных.ТекущаяИБ);
	ПолеАналитика.Балансовый=Истина;
	ПолеАналитика.Измерение = Истина;
	ПолеАналитика.ТолькоОбороты = Истина;
			
	Если ДляЗаполненияОбъектаБД Тогда
		
		ПолеАналитика=мТаблицаПоказателейБД.Добавить();
		ПолеАналитика.ПолеБД="ОбъектБД";
		ПолеАналитика.НаименованиеБД="Вид документа";
		ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.ДокументыБД");
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.ДокументыБД",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.Балансовый=Истина;
		ПолеАналитика.Измерение = Истина;
		ПолеАналитика.ТолькоОбороты = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	ПолеАналитика=мТаблицаПоказателейБД.Добавить();
	ПолеАналитика.ПолеБД="Сценарий";
	ПолеАналитика.НаименованиеБД="Сценарий";
	ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.Сценарии");
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Сценарии",Справочники.ТипыБазДанных.ТекущаяИБ);
	ПолеАналитика.Балансовый=Истина;
	ПолеАналитика.Измерение = Истина;
	ПолеАналитика.ТолькоОбороты = Истина;
	
	ПолеАналитика=мТаблицаПоказателейБД.Добавить();
	ПолеАналитика.ПолеБД="ОсновнаяВалюта";
	ПолеАналитика.НаименованиеБД="Валюта";
	ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.Валюты");
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.Валюты",Справочники.ТипыБазДанных.ТекущаяИБ);
	ПолеАналитика.Балансовый=Истина;
	ПолеАналитика.Измерение = Истина;
	ПолеАналитика.ТолькоОбороты = Истина;
	
	Если ДляФормированияКорректировок Тогда
		
		ПолеАналитика=мТаблицаПоказателейБД.Добавить();
		ПолеАналитика.ПолеБД="ВидОперации";
		ПолеАналитика.НаименованиеБД="Вид операции";
		ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.ВидыОпераций");
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.ВидыОпераций",Справочники.ТипыБазДанных.ТекущаяИБ);
		ПолеАналитика.Балансовый=Истина;
		ПолеАналитика.Измерение = Истина;
		ПолеАналитика.ТолькоОбороты = Истина;
		
	КонецЕсли;
			
	ПолеАналитика=мТаблицаПоказателейБД.Добавить();
	ПолеАналитика.ПолеБД="ИспользуемаяИБ";
	ПолеАналитика.НаименованиеБД="Используемая ИБ";
	ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,"Справочник.ВнешниеИнформационныеБазы");
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, "Справочник.ВнешниеИнформационныеБазы",Справочники.ТипыБазДанных.ТекущаяИБ);
	ПолеАналитика.Балансовый=Истина;
	ПолеАналитика.Измерение = Истина;
	ПолеАналитика.ТолькоОбороты = Истина;
		
	Если мТаблицаВидовАналитикВидаОтчета=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АналитикаПоказателя ИЗ мТаблицаВидовАналитикВидаОтчета Цикл
		
		ПолеАналитика=мТаблицаПоказателейБД.Добавить();
		ПолеАналитика.ПолеБД=АналитикаПоказателя.КодАналитики;
		ПолеАналитика.НаименованиеБД=АналитикаПоказателя.ПредставлениеАналитики;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,АналитикаПоказателя.ВидАналитики.ТипЗначения,Справочники.ТипыБазДанных.ТекущаяИБ,Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(ПолеАналитика, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
		
		ПолеАналитика.ВидАналитики=АналитикаПоказателя.ВидАналитики;
		ПолеАналитика.ТипМетаДанных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,АналитикаПоказателя.ТаблицаАналитики);
		
		ПолеАналитика.Балансовый=Истина;
		ПолеАналитика.Измерение = Истина;
		ПолеАналитика.ТолькоОбороты = Истина;
		
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьСписокПолей()

&НаСервере
Функция СформироватьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		АдресХранилищаТаблиц);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	ЭтаФорма.УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТипБД",						Справочники.ТипыБазДанных.ТекущаяИБ);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("Отказ",						Ложь);
	ДанныеОбъекта.Вставить("Использование77",			Ложь);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			Истина);
	ДанныеОбъекта.Вставить("СпособПолучения",			Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета);
	ДанныеОбъекта.Вставить("СпособИспользования",		Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()
	
&НаКлиенте
Процедура ТабличноеПолеИзмеренийБДПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если (НЕ (СтрокаРазворота.ТипМетаДанных="Справочник" ИЛИ СтрокаРазворота.ТипМетаДанных="Документ" ИЛИ СтрокаРазворота.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ СтрокаРазворота.ТипМетаДанных="ТаблицаADO" ИЛИ СтрокаРазворота.ТипЗначения.Количество()>1)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
	
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	АдресХранилищаТаблиц=ДанныеОбъекта.РабочийОбъектАдрес;
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки  

&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	Ложь);
	
	СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);			
	СтрокаБД.Вставить("ПолеБД		",				ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);
	СтрокаБД.Вставить("ТаблицаADO",					ДанныеСтрокиАналитики.ТаблицаADO);
	СтрокаБД.Вставить("КонтекстОтчета",				Истина);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура ТабличноеПолеИзмеренийБДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеЗаполнено(Элементы.ТабличноеПолеИзмеренийБД.ТекущиеДанные.ПолеБД) Тогда
				
		Оповестить("ВыборПоляИзКонтекста",СформироватьСтруктуруСтрокиБД(Элементы.ТабличноеПолеИзмеренийБД.ТекущиеДанные));
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры
